{"files":[{"patch":"@@ -205,5 +205,0 @@\n-\t\t<dependency>\n-\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n-\t\t\t<artifactId>org.openjdk.jmc.flightrecorder.configuration<\/artifactId>\n-\t\t\t<version>${project.version}<\/version>\n-\t\t<\/dependency>\n@@ -326,5 +321,0 @@\n-\t\t<dependency>\n-\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n-\t\t\t<artifactId>org.openjdk.jmc.rjmx.services.jfr<\/artifactId>\n-\t\t\t<version>${project.version}<\/version>\n-\t\t<\/dependency>\n","filename":"application\/coverage\/pom.xml","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.alert\/src\/main\/java\/org\/openjdk\/jmc\/alert\/AlertPlugin.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.alert\/src\/main\/java\/org\/openjdk\/jmc\/alert\/ExceptionHandler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,3 +41,2 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.services.IDiagnosticCommandService;\n","filename":"application\/org.openjdk.jmc.alert\/src\/main\/java\/org\/openjdk\/jmc\/alert\/TriggerActionThreadStackDump.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -53,2 +53,2 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n","filename":"application\/org.openjdk.jmc.browser.attach\/src\/main\/java\/org\/openjdk\/jmc\/browser\/attach\/LocalConnectionDescriptor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n","filename":"application\/org.openjdk.jmc.browser.attach\/src\/main\/java\/org\/openjdk\/jmc\/browser\/attach\/LocalJVMToolkit.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n","filename":"application\/org.openjdk.jmc.browser.jdp\/src\/main\/java\/org\/openjdk\/jmc\/browser\/jdp\/JDPDescriptorProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import org.openjdk.jmc.common.labelingrules.NameConverter;\n@@ -40,0 +41,2 @@\n+import org.openjdk.jmc.ui.common.idesupport.IDESupportFactory;\n+import org.openjdk.jmc.ui.common.labelingrules.NameConverterRulesInitializer;\n@@ -66,0 +69,1 @@\n+\t\tinitializeNameConverter();\n@@ -107,0 +111,5 @@\n+\tprivate void initializeNameConverter() {\n+\t\tNameConverter.getInstance().setRules(NameConverterRulesInitializer.initializeRulesFromExtensions());\n+\t\tNameConverter.getInstance().setIdentity(IDESupportFactory.getIDESupport().getIdentity());\n+\t}\n+\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/JVMBrowserPlugin.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+import org.openjdk.jmc.common.action.IActionProvider;\n+import org.openjdk.jmc.common.action.IUserAction;\n@@ -42,2 +44,0 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/remoteagent\/RemoteJMXAgent.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+import org.openjdk.jmc.rjmx.common.servermodel.IDiscoveryInfo;\n@@ -48,1 +49,0 @@\n-import org.openjdk.jmc.rjmx.servermodel.IDiscoveryInfo;\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/views\/BrowserLabelProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,1 @@\n-import org.openjdk.jmc.ui.common.tree.IParent;\n+import org.openjdk.jmc.common.tree.IParent;\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/views\/Folder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,2 @@\n-import org.openjdk.jmc.rjmx.servermodel.IDiscoveryInfo;\n+import org.openjdk.jmc.common.tree.IArray;\n+import org.openjdk.jmc.rjmx.common.servermodel.IDiscoveryInfo;\n@@ -50,1 +51,0 @@\n-import org.openjdk.jmc.ui.common.tree.IArray;\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/views\/FolderStructure.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,2 +87,3 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.IServerHandle.State;\n+import org.openjdk.jmc.common.action.IActionProvider;\n+import org.openjdk.jmc.common.action.IUserAction;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n@@ -90,0 +91,1 @@\n+import org.openjdk.jmc.rjmx.IServerHandle.State;\n@@ -94,2 +96,0 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/views\/JVMBrowserView.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,1 @@\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n+import org.openjdk.jmc.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/wizards\/ActionWizardPage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,2 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.internal.JMXRMISystemPropertiesProvider;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.internal.JMXRMISystemPropertiesProvider;\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/wizards\/ConnectionWizard.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import org.openjdk.jmc.common.action.IUserAction;\n@@ -39,1 +40,0 @@\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/wizards\/ConnectionWizardModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,4 +67,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n@@ -73,1 +69,5 @@\n-import org.openjdk.jmc.rjmx.internal.ServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.internal.ServerDescriptor;\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/wizards\/ConnectionWizardPage.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,2 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n+import org.openjdk.jmc.common.action.IActionProvider;\n+import org.openjdk.jmc.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.browser\/src\/main\/java\/org\/openjdk\/jmc\/browser\/wizards\/UserActionContentProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2020, 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023 Red Hat Inc. All rights reserved.\n@@ -36,3 +36,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.IConnectionListener;\n@@ -40,0 +37,3 @@\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionListener;\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/AgentJmxHelper.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2020, 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023 Red Hat Inc. All rights reserved.\n@@ -52,0 +52,1 @@\n+import org.openjdk.jmc.common.action.Executable;\n@@ -59,3 +60,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.IConnectionListener;\n@@ -65,1 +63,3 @@\n-import org.openjdk.jmc.ui.common.action.Executable;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionListener;\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/actions\/AgentEditorOpener.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2020, 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023 Red Hat Inc. All rights reserved.\n@@ -53,2 +53,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.IConnectionListener;\n@@ -56,0 +54,2 @@\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionListener;\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/editor\/AgentEditor.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, 2021 Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, 2021 Red Hat Inc. All rights reserved.\n+ * Copyright (c) 2020, 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023 Red Hat Inc. All rights reserved.\n@@ -42,1 +42,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -44,0 +43,1 @@\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.agent\/src\/main\/java\/org\/openjdk\/jmc\/console\/agent\/editor\/AgentEditorInput.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.jconsole\/src\/main\/java\/org\/openjdk\/jmc\/console\/jconsole\/MissionControlContext.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.jconsole\/src\/main\/java\/org\/openjdk\/jmc\/console\/jconsole\/tabs\/JConsolePluginTabbedPane.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.jconsole\/src\/main\/java\/org\/openjdk\/jmc\/console\/jconsole\/tabs\/JConsoleTab.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,2 @@\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n@@ -71,2 +73,0 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.console.persistence\/src\/main\/java\/org\/openjdk\/jmc\/console\/persistence\/editors\/PersistenceEditor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-\n+import org.openjdk.jmc.common.action.Executable;\n@@ -43,1 +43,0 @@\n-import org.openjdk.jmc.ui.common.action.Executable;\n","filename":"application\/org.openjdk.jmc.console.persistence\/src\/main\/java\/org\/openjdk\/jmc\/console\/persistence\/editors\/PersistenceEditorOpener.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,4 +37,4 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.console.persistence\/src\/main\/java\/org\/openjdk\/jmc\/console\/persistence\/editors\/PersistenceMetadataService.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,2 +53,2 @@\n-import org.openjdk.jmc.rjmx.services.IOperation;\n-import org.openjdk.jmc.rjmx.services.IOperation.OperationImpact;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.services.IOperation.OperationImpact;\n","filename":"application\/org.openjdk.jmc.console.ui.diagnostic\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/diagnostic\/form\/DiagnosticOperationForm.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,3 +48,3 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;\n-import org.openjdk.jmc.rjmx.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.services.IDiagnosticCommandService;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n","filename":"application\/org.openjdk.jmc.console.ui.diagnostic\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/diagnostic\/form\/DiagnosticTab.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-import org.openjdk.jmc.rjmx.services.IOperation.OperationImpact;\n+import org.openjdk.jmc.rjmx.common.services.IOperation.OperationImpact;\n","filename":"application\/org.openjdk.jmc.console.ui.diagnostic\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/diagnostic\/preferences\/DiagnosticPage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.services.IOperation.OperationImpact;\n+import org.openjdk.jmc.rjmx.common.services.IOperation.OperationImpact;\n","filename":"application\/org.openjdk.jmc.console.ui.diagnostic\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/diagnostic\/preferences\/PreferenceConstants.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023,  Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-import org.openjdk.jmc.rjmx.services.IOperation.OperationImpact;\n+import org.openjdk.jmc.rjmx.common.services.IOperation.OperationImpact;\n","filename":"application\/org.openjdk.jmc.console.ui.diagnostic\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/diagnostic\/preferences\/PreferenceInitializer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,2 +55,2 @@\n-\n-import org.openjdk.jmc.rjmx.services.IAttributeInfo;\n+import org.openjdk.jmc.rjmx.common.services.IAttributeInfo;\n+import org.openjdk.jmc.rjmx.common.util.internal.SimpleAttributeInfo;\n@@ -60,1 +60,0 @@\n-import org.openjdk.jmc.rjmx.util.internal.SimpleAttributeInfo;\n","filename":"application\/org.openjdk.jmc.console.ui.mbeanbrowser\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/mbeanbrowser\/notifications\/MBeanNotificationLogInspector.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui.mbeanbrowser\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/mbeanbrowser\/notifications\/NotificationInfoSectionPart.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,6 +63,6 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.internal.RJMXConnection;\n-import org.openjdk.jmc.rjmx.services.IOperation;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.internal.RJMXConnection;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/org.openjdk.jmc.console.ui.mbeanbrowser\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/mbeanbrowser\/tab\/FeatureSectionPart.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,2 +50,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n","filename":"application\/org.openjdk.jmc.console.ui.mbeanbrowser\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/mbeanbrowser\/tab\/MBeanTab.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,1 @@\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n","filename":"application\/org.openjdk.jmc.console.ui.mbeanbrowser\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/mbeanbrowser\/tree\/MBeanTreeSectionPart.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-Import-Package: org.openjdk.jmc.rjmx.services.jfr\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/META-INF\/MANIFEST.MF","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/TriggerTab.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n@@ -45,3 +46,2 @@\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderToolkit;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.services.jfr.FlightRecorderToolkit;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/action\/TriggerActionDumpRecording.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,3 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -42,4 +45,1 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/action\/TriggerActionRecordingToolkit.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n@@ -38,3 +40,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/action\/TriggerActionStartContinuousRecording.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,4 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor.RecordingState;\n@@ -52,5 +56,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor.RecordingState;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/action\/TriggerActionStartTimeBoundRecording.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,0 +50,3 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -51,4 +54,1 @@\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderToolkit;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.rjmx.common.services.jfr.FlightRecorderToolkit;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/action\/WriteAndOpenRecordingJob.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,3 +46,3 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;\n-import org.openjdk.jmc.rjmx.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.services.IDiagnosticCommandService;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/tab\/ActionComponentFactory.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,1 @@\n-\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/tab\/RuleCheckedStateProvider.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,2 +50,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/tab\/TriggerConditionSectionPart.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/tab\/TriggerDetailsPage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,3 +76,3 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/tab\/TriggerSectionPart.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -62,1 +62,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/widget\/ActionChooser.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,7 +54,8 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n@@ -62,1 +63,0 @@\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/widget\/ConditionChooser.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/wizard\/ActionWizardPage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,5 +43,5 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/wizard\/RuleWizard.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/wizard\/RuleWizardDialog.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.console.ui.notification\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/notification\/wizard\/TriggerConditionWizardPage.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui.subscriptions\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/subscriptions\/SubscriptionTab.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,4 +43,5 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.IMRISubscriptionDebugInformation;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.ISubscriptionDebugService;\n@@ -48,2 +49,0 @@\n-import org.openjdk.jmc.rjmx.subscription.internal.IMRISubscriptionDebugInformation;\n-import org.openjdk.jmc.rjmx.subscription.internal.ISubscriptionDebugService;\n","filename":"application\/org.openjdk.jmc.console.ui.subscriptions\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/subscriptions\/SubscriptionTableContentProvider.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,2 +51,3 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.ISubscriptionDebugService;\n@@ -54,1 +55,0 @@\n-import org.openjdk.jmc.rjmx.subscription.internal.ISubscriptionDebugService;\n","filename":"application\/org.openjdk.jmc.console.ui.subscriptions\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/subscriptions\/SubscriptionsSectionPart.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-import org.openjdk.jmc.rjmx.subscription.IMBeanServerChangeListener;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanServerChangeListener;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/actions\/MBeanAutomaticRefreshAction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -69,2 +69,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -73,1 +71,3 @@\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/editor\/internal\/ConsoleEditor.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-\n+import org.openjdk.jmc.common.action.Executable;\n@@ -44,1 +44,0 @@\n-import org.openjdk.jmc.ui.common.action.Executable;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/editor\/internal\/ConsoleEditorOpener.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -63,0 +62,1 @@\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/editor\/internal\/ConsoleFormPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,8 +53,8 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/memory\/GcTableSectionPart.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,2 +67,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.services.IDiagnosticCommandService;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/memory\/HeapHistogram.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,7 +46,7 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/memory\/MemoryPoolModel.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,3 +56,3 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.services.IDiagnosticCommandService;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/memory\/MemoryTab.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/overview\/OverviewTab.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,3 +49,3 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/system\/ServerInformationModelBuilder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -49,5 +49,5 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/system\/SystemPropertiesSectionPart.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,2 +50,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/system\/SystemTab.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/system\/TableInformationSectionPart.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.ui.common.tree.IArray;\n+import org.openjdk.jmc.common.tree.IArray;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/threads\/IThreadsModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/threads\/ThreadTab.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,2 +47,2 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.console.ui\/src\/main\/java\/org\/openjdk\/jmc\/console\/ui\/tabs\/threads\/ThreadsModel.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -125,7 +125,0 @@\n-   <plugin\n-         id=\"org.openjdk.jmc.rjmx.services.jfr\"\n-         download-size=\"0\"\n-         install-size=\"0\"\n-         version=\"0.0.0\"\n-         unpack=\"false\"\/>\n-\n","filename":"application\/org.openjdk.jmc.feature.flightrecorder\/feature.xml","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -10,0 +10,1 @@\n+ org.openjdk.jmc.rjmx.common,\n@@ -26,1 +27,0 @@\n- org.openjdk.jmc.rjmx.services.jfr,\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,2 @@\n-\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n@@ -46,2 +47,0 @@\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/ControlPanel.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,2 @@\n+import org.openjdk.jmc.common.action.IActionProvider;\n+import org.openjdk.jmc.common.action.IUserAction;\n@@ -47,0 +49,3 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -50,1 +55,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n@@ -52,1 +57,0 @@\n-import org.openjdk.jmc.rjmx.IServerHandle.State;\n@@ -54,3 +58,1 @@\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.rjmx.IServerHandle.State;\n@@ -58,2 +60,0 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/FlightRecorderProvider.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+import org.openjdk.jmc.common.action.IActionProvider;\n+import org.openjdk.jmc.common.action.IUserAction;\n@@ -41,2 +43,0 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/FlightRecorderProviderFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,4 +38,4 @@\n-import static org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor.RecordingState.CREATED;\n-import static org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor.RecordingState.RUNNING;\n-import static org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor.RecordingState.STOPPED;\n-import static org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor.RecordingState.STOPPING;\n+import static org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor.RecordingState.CREATED;\n+import static org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor.RecordingState.RUNNING;\n+import static org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor.RecordingState.STOPPED;\n+import static org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor.RecordingState.STOPPING;\n@@ -51,0 +51,2 @@\n+import org.openjdk.jmc.common.action.IActionProvider;\n+import org.openjdk.jmc.common.action.IUserAction;\n@@ -57,0 +59,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor.RecordingState;\n@@ -66,1 +70,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -68,4 +71,1 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor.RecordingState;\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/RecordingProvider.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -42,3 +44,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/actions\/CloseRecordingAction.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n@@ -44,2 +45,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/actions\/DumpAnyRecordingAction.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n@@ -43,2 +43,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/actions\/EditRecordingAction.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+import org.openjdk.jmc.common.action.IUserAction;\n@@ -54,0 +55,3 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -55,0 +59,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeInfo;\n@@ -56,8 +61,3 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IEventTypeInfo;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/actions\/PrintRecordingDescriptorAction.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n@@ -42,1 +44,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -44,2 +45,2 @@\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n@@ -63,1 +64,1 @@\n-\t\t\tif (flrService == null || !JVMSupportToolkit.hasFlightRecorder(handle)) {\n+\t\t\tif (flrService == null || !ConnectionToolkit.hasFlightRecorder(handle)) {\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/actions\/StartRecordingAction.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -44,3 +46,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/actions\/StopRecordingAction.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n@@ -49,4 +51,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/jobs\/DumpRecordingJob.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -57,1 +59,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -60,2 +61,1 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/jobs\/StartRecordingJob.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -45,1 +47,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -47,2 +48,1 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/jobs\/UpdateRecordingJob.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/model\/ConfigurationRepositoryFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,0 +52,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -55,0 +56,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeInfo;\n@@ -59,1 +61,0 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IEventTypeInfo;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/model\/EventConfigurationModel.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/model\/EventConfigurationRepository.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -94,1 +95,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/recordingconfiguration\/EventConfigurationPart.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -52,1 +52,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/wizards\/AdvancedWizardPage.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,3 +43,3 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/wizards\/DumpRecordingWizardModel.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,1 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/wizards\/DumpRecordingWizardPage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -50,1 +50,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/wizards\/RecordingEventOptionsWizardPage.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n@@ -58,0 +60,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -61,0 +65,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeInfo;\n@@ -67,1 +72,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n@@ -69,4 +73,0 @@\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IEventTypeInfo;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/wizards\/RecordingWizardModel.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -38,1 +38,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/wizards\/TemplateEditSimplePage.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeInfo;\n@@ -82,1 +83,0 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IEventTypeInfo;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/wizards\/TemplateManagerWizardPage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -47,1 +47,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n","filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/wizards\/TemplateToolkit.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import org.openjdk.jmc.common.tree.IParent;\n@@ -46,1 +47,0 @@\n-import org.openjdk.jmc.ui.common.tree.IParent;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/EventTypeFolderNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+import org.openjdk.jmc.common.tree.IParent;\n@@ -79,1 +80,0 @@\n-import org.openjdk.jmc.ui.common.tree.IParent;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/common\/TypeFilterBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+import org.openjdk.jmc.common.tree.IArray;\n@@ -96,1 +97,0 @@\n-import org.openjdk.jmc.ui.common.tree.IArray;\n","filename":"application\/org.openjdk.jmc.flightrecorder.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/ui\/pages\/ThreadDumpsPage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import org.openjdk.jmc.common.util.IObservable;\n@@ -38,1 +39,0 @@\n-import org.openjdk.jmc.ui.common.util.IObservable;\n","filename":"application\/org.openjdk.jmc.greychart\/src\/main\/java\/org\/openjdk\/jmc\/greychart\/data\/SeriesProvider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -17,0 +17,1 @@\n+ org.openjdk.jmc.rjmx.common,\n@@ -25,1 +26,0 @@\n-Import-Package: org.openjdk.jmc.rjmx.services.jfr\n","filename":"application\/org.openjdk.jmc.ide.launch\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,0 +66,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -70,1 +71,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n","filename":"application\/org.openjdk.jmc.ide.launch\/src\/main\/java\/org\/openjdk\/jmc\/ide\/launch\/model\/JfrLaunchModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import org.openjdk.jmc.common.action.Executable;\n@@ -48,1 +49,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -51,0 +51,1 @@\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n@@ -54,1 +55,0 @@\n-import org.openjdk.jmc.ui.common.action.Executable;\n","filename":"application\/org.openjdk.jmc.joverflow.ui\/src\/main\/java\/org\/openjdk\/jmc\/joverflow\/ui\/HeapDumpAction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,1 @@\n-\n+import org.openjdk.jmc.common.action.IUserAction;\n@@ -45,1 +45,0 @@\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.rcp.application\/src\/main\/java\/org\/openjdk\/jmc\/rcp\/application\/MissionControlEditorDropAdapter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n@@ -49,0 +48,1 @@\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n","filename":"application\/org.openjdk.jmc.rcp.intro\/src\/main\/java\/org\/openjdk\/jmc\/rcp\/intro\/ConsoleExampleAction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,8 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<classpath>\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-17\"\/>\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.pde.core.requiredPlugins\"\/>\n-\t<classpathentry kind=\"src\" path=\"src\/main\/java\/\"\/>\n-\t<classpathentry kind=\"src\" path=\"src\/main\/resources\/\"\/>\n-\t<classpathentry kind=\"output\" path=\"target\/classes\"\/>\n-<\/classpath>\n","filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/.classpath","additions":0,"deletions":8,"binary":false,"changes":8,"status":"deleted"},{"patch":"@@ -1,34 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<projectDescription>\n-\t<name>org.openjdk.jmc.rjmx.services.jfr<\/name>\n-\t<comment><\/comment>\n-\t<projects>\n-\t<\/projects>\n-\t<buildSpec>\n-\t\t<buildCommand>\n-\t\t\t<name>org.eclipse.jdt.core.javabuilder<\/name>\n-\t\t\t<arguments>\n-\t\t\t<\/arguments>\n-\t\t<\/buildCommand>\n-\t\t<buildCommand>\n-\t\t\t<name>org.eclipse.pde.ManifestBuilder<\/name>\n-\t\t\t<arguments>\n-\t\t\t<\/arguments>\n-\t\t<\/buildCommand>\n-\t\t<buildCommand>\n-\t\t\t<name>org.eclipse.pde.SchemaBuilder<\/name>\n-\t\t\t<arguments>\n-\t\t\t<\/arguments>\n-\t\t<\/buildCommand>\n-\t\t<buildCommand>\n-\t\t\t<name>org.eclipse.m2e.core.maven2Builder<\/name>\n-\t\t\t<arguments>\n-\t\t\t<\/arguments>\n-\t\t<\/buildCommand>\n-\t<\/buildSpec>\n-\t<natures>\n-\t\t<nature>org.eclipse.m2e.core.maven2Nature<\/nature>\n-\t\t<nature>org.eclipse.pde.PluginNature<\/nature>\n-\t\t<nature>org.eclipse.jdt.core.javanature<\/nature>\n-\t<\/natures>\n-<\/projectDescription>\n","filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/.project","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -1,18 +0,0 @@\n-Manifest-Version: 1.0\n-Bundle-ManifestVersion: 2\n-Bundle-Name: JFR RJMX Service\n-Bundle-SymbolicName: org.openjdk.jmc.rjmx.services.jfr;singleton:=true\n-Bundle-Version: 9.0.0.qualifier\n-Bundle-Vendor: Oracle Corporation\n-Bundle-RequiredExecutionEnvironment: JavaSE-17\n-Require-Bundle: org.openjdk.jmc.flightrecorder.configuration,\n- org.openjdk.jmc.common,\n- org.openjdk.jmc.rjmx\n-Import-Package: org.openjdk.jmc.rjmx,\n- org.openjdk.jmc.rjmx.services,\n- org.openjdk.jmc.rjmx.services.internal,\n- org.openjdk.jmc.rjmx.subscription,\n- org.eclipse.osgi.util\n-Export-Package: org.openjdk.jmc.rjmx.services.jfr,\n- org.openjdk.jmc.rjmx.services.jfr.internal;x-friends:=\"org.openjdk.jmc.rjmx.services.jfr.test\"\n-Automatic-Module-Name: org.openjdk.jmc.rjmx.services.jfr\n","filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/META-INF\/MANIFEST.MF","additions":0,"deletions":18,"binary":false,"changes":18,"status":"deleted"},{"patch":"@@ -1,39 +0,0 @@\n-#\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-#\n-#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-#  The contents of this file are subject to the terms of either the Universal Permissive License \n-#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n-#   \n-#  or the following license:\n-#   \n-#  Redistribution and use in source and binary forms, with or without modification, are permitted\n-#  provided that the following conditions are met:\n-#   \n-#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n-#  and the following disclaimer.\n-#   \n-#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n-#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n-#  the distribution.\n-#   \n-#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n-#  endorse or promote products derived from this software without specific prior written permission.\n-#\n-#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n-#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n-#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n-#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n-#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-#\n-source.. = src\/main\/java\/,\\\n-           src\/main\/resources\/\n-output.. = target\/classes\/\n-bin.includes = META-INF\/,\\\n-               .,\\\n-               plugin.xml\n-pde.match.rule.bundle=compatible\n","filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/build.properties","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,44 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--   \n-   Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-   \n-   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-   \n-   The contents of this file are subject to the terms of either the Universal Permissive License \n-   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n-   \n-   or the following license:\n-   \n-   Redistribution and use in source and binary forms, with or without modification, are permitted\n-   provided that the following conditions are met:\n-   \n-   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n-   and the following disclaimer.\n-   \n-   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n-   conditions and the following disclaimer in the documentation and\/or other materials provided with\n-   the distribution.\n-   \n-   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n-   endorse or promote products derived from this software without specific prior written permission.\n-   \n-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n-   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n-   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n-   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n-   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--->\n-<?eclipse version=\"3.4\"?>\n-<plugin>\n-   <extension\n-         point=\"org.openjdk.jmc.rjmx.service\">\n-      <service\n-            factory=\"org.openjdk.jmc.rjmx.services.jfr.internal.FlightRecorderServiceFactory\"\n-            description=\"Service for controlling the flight recorder\"\n-            name=\"Flight Recorder\">\n-      <\/service>\n-   <\/extension>\n-<\/plugin>\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/plugin.xml","additions":0,"deletions":44,"binary":false,"changes":44,"status":"deleted"},{"patch":"@@ -1,46 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-   Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n-\n-   DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-\n-   The contents of this file are subject to the terms of either the Universal Permissive License\n-   v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n-\n-   or the following license:\n-\n-   Redistribution and use in source and binary forms, with or without modification, are permitted\n-   provided that the following conditions are met:\n-\n-   1. Redistributions of source code must retain the above copyright notice, this list of conditions\n-   and the following disclaimer.\n-\n-   2. Redistributions in binary form must reproduce the above copyright notice, this list of\n-   conditions and the following disclaimer in the documentation and\/or other materials provided with\n-   the distribution.\n-\n-   3. Neither the name of the copyright holder nor the names of its contributors may be used to\n-   endorse or promote products derived from this software without specific prior written permission.\n-\n-   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n-   IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-   FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n-   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n-   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n-   WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n--->\n-<project xmlns=\"http:\/\/maven.apache.org\/POM\/4.0.0\" xmlns:xsi=\"http:\/\/www.w3.org\/2001\/XMLSchema-instance\" xsi:schemaLocation=\"http:\/\/maven.apache.org\/POM\/4.0.0 http:\/\/maven.apache.org\/xsd\/maven-4.0.0.xsd\">\n-\t<modelVersion>4.0.0<\/modelVersion>\n-\t<parent>\n-\t\t<groupId>org.openjdk.jmc<\/groupId>\n-\t\t<artifactId>missioncontrol.application<\/artifactId>\n-\t\t<version>${revision}${changelist}<\/version>\n-\t<\/parent>\n-\t<artifactId>org.openjdk.jmc.rjmx.services.jfr<\/artifactId>\n-\t<packaging>eclipse-plugin<\/packaging>\n-\t<properties>\n-\t\t<jmc.config.path>${project.basedir}\/..\/..\/configuration<\/jmc.config.path>\n-\t<\/properties>\n-<\/project>\n","filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/pom.xml","additions":0,"deletions":46,"binary":false,"changes":46,"status":"deleted"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n-\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.IServiceFactory;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-\n-public class FlightRecorderServiceFactory implements IServiceFactory<IFlightRecorderService> {\n-\n-\t@Override\n-\tpublic IFlightRecorderService getServiceInstance(IConnectionHandle handle)\n-\t\t\tthrows ConnectionException, ServiceNotAvailableException {\n-\t\tif (FlightRecorderServiceV2.isAvailable(handle)) {\n-\t\t\treturn new FlightRecorderServiceV2(handle);\n-\t\t}\n-\t\treturn new FlightRecorderServiceV1(handle);\n-\t}\n-\n-\t@Override\n-\tpublic Class<IFlightRecorderService> getServiceType() {\n-\t\treturn IFlightRecorderService.class;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/FlightRecorderServiceFactory.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n-\n-import java.io.IOException;\n-\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n-\n-interface IFlightRecorderCommunicationHelper {\n-\n-\tObject getAttribute(String attribute) throws FlightRecorderException;\n-\n-\tObject invokeOperation(String name, Object ... parameters) throws IOException, FlightRecorderException;\n-\n-\tvoid closeRecording(IRecordingDescriptor descriptor) throws FlightRecorderException;\n-\n-}\n","filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/IFlightRecorderCommunicationHelper.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n-\n-import org.eclipse.osgi.util.NLS;\n-\n-public class Messages extends NLS {\n-\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.rjmx.services.jfr.internal.messages\"; \/\/$NON-NLS-1$\n-\n-\tpublic static String EventTypeMetadataV2_BAD_DEFAULT_VALUE;\n-\tpublic static String FlightRecorderServiceV2_CLONE_OF_RECORDING_NAME;\n-\n-\tstatic {\n-\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n-\t}\n-\n-\tprivate Messages() {\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/Messages.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\/**\n- * This package contains the service to control the flight recorder, and all classes related to that\n- * service.\n- * <p>\n- * The following example will print the names of all ongoing recordings:\n- *\n- * <pre>\n- * <code>\n- * IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName(\"localhost\").port(0).build(); \/\/$NON-NLS-1$\n- * IServerHandle serverHandle = IServerHandle.create(descriptor);\n- * IConnectionHandle handle = serverHandle.connect(\"Get JFR recording info\"); \/\/$NON-NLS-1$\n- * try {\n- * \tIFlightRecorderService jfr = handle.getServiceOrThrow(IFlightRecorderService.class);\n- * \tfor (IRecordingDescriptor desc : jfr.getAvailableRecordings()) {\n- * \t\tSystem.out.println(desc.getName());\n- * \t}\n- * } finally {\n- * \tIOToolkit.closeSilently(handle);\n- * }\n- *<\/code>\n- * <\/pre>\n- *\n- * The following will start a time bound recording, and then transfer the recording to a local file\n- * when completed:\n- *\n- * <pre>\n- * <code>\n- * IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName(\"localhost\").port(0).build(); \/\/$NON-NLS-1$\n- * IServerHandle serverHandle = IServerHandle.create(descriptor);\n- * IConnectionHandle handle = serverHandle.connect(\"Start time bound flight recording\");\n- * try {\n- * \tIFlightRecorderService jfr = handle.getServiceOrThrow(IFlightRecorderService.class);\n- *\n- * \tlong duration = 5000;\n- * \tIConstrainedMap<String> defaultRecordingOptions = jfr.getDefaultRecordingOptions();\n- *  IDescribedMap<EventOptionID> defaultEventOptions = jfr.getDefaultEventOptions();\n- * \tIConstrainedMap<String> recordingOptions = new RecordingOptionsBuilder(defaultRecordingOptions.mutableCopy())\n- * \t\t\t.name(\"MyRecording\").duration(duration).build();\n- * \tIRecordingDescriptor recording = jfr.start(recordingOptions, defaultEventOptions);\n- * \tThread.sleep(duration);\n- * \twhile (recording.getState() != IRecordingDescriptor.RecordingState.STOPPED) {\n- * \t\tThread.sleep(1000);\n- * \t\trecording = jfr.getUpdatedRecordingDescription(recording);\n- * \t}\n- * \tInputStream is = jfr.openStream(recording, true);\n- * \twriteStreamToFile(is);\n- * } finally {\n- * \tIOToolkit.closeSilently(handle);\n- * }\n- * <\/code>\n- * <\/pre>\n- *\/\n-package org.openjdk.jmc.rjmx.services.jfr;\n","filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/package-info.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,4 +43,3 @@\n-\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/attributes\/EditDisplayNameAction.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,4 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.AttributeValueToolkit;\n@@ -42,2 +44,0 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n@@ -45,1 +45,0 @@\n-import org.openjdk.jmc.rjmx.subscription.internal.AttributeValueToolkit;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/attributes\/MRIAttribute.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,7 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRITransformationFactory;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n@@ -85,5 +91,0 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRITransformationFactory;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n@@ -91,1 +92,0 @@\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/attributes\/MRIAttributeInspector.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -57,3 +57,12 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.AttributeValueToolkit;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.DefaultUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.OneShotUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.SimpleUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.util.internal.SimpleAttributeInfo;\n@@ -62,3 +71,0 @@\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IUpdatePolicy;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n@@ -66,3 +72,0 @@\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n-import org.openjdk.jmc.rjmx.subscription.internal.AttributeValueToolkit;\n-import org.openjdk.jmc.rjmx.subscription.internal.DefaultUpdatePolicy;\n@@ -70,2 +73,0 @@\n-import org.openjdk.jmc.rjmx.subscription.internal.OneShotUpdatePolicy;\n-import org.openjdk.jmc.rjmx.subscription.internal.SimpleUpdatePolicy;\n@@ -76,1 +77,0 @@\n-import org.openjdk.jmc.rjmx.util.internal.SimpleAttributeInfo;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/attributes\/ReadOnlyMRIAttribute.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,3 +63,3 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/attributes\/SetUnitMenuManager.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,5 +43,4 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRITransformationFactory;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRITransformationFactory;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/attributes\/VisualizeAction.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,3 +60,2 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/attributes\/VisualizeWizardPage.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,3 +40,3 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/AddAttibutesAction.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,2 +61,2 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/AttributeConfiguratorTableFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,1 @@\n-\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/AttributeConfiguratorWizardPage.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,4 +40,3 @@\n-\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/AttributeLabelProvider.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,8 +42,7 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/AttributeSectionPart.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,4 +44,4 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/AttributeSelectionContentModel.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,3 +59,3 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/AttributeSelectorComponent.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,3 +39,3 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/AttributeSelectorWizard.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,4 +36,3 @@\n-\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/AttributeSelectorWizardDialog.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+import org.openjdk.jmc.common.tree.IArray;\n@@ -83,9 +84,9 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.IAttributeStorage;\n-import org.openjdk.jmc.rjmx.services.IAttributeStorageService;\n-import org.openjdk.jmc.rjmx.services.MRIDataSeries;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.services.IAttributeStorage;\n+import org.openjdk.jmc.rjmx.common.services.MRIDataSeries;\n+import org.openjdk.jmc.rjmx.common.services.internal.IAttributeStorageService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n@@ -95,1 +96,0 @@\n-import org.openjdk.jmc.ui.common.tree.IArray;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/CombinedChartSectionPart.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,6 +64,7 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n@@ -71,1 +72,0 @@\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/CombinedDialsSectionPart.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,2 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.ui.common.tree.IArray;\n+import org.openjdk.jmc.common.tree.IArray;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/IAttributeSet.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/MBeanPropertiesOrderer.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,2 +46,2 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/MBeanTreeLabelProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,1 @@\n-\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/MBeanTreeSorter.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,1 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/NewChartAction.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,4 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n@@ -51,3 +53,0 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/PersistenceSectionPart.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,1 @@\n-\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/RemoveAttributeAction.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/internal\/StatisticsCalculator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+import org.openjdk.jmc.common.action.IActionProvider;\n+import org.openjdk.jmc.common.action.IUserAction;\n@@ -47,2 +49,0 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/misc\/SimpleActionProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,1 +76,1 @@\n-import org.openjdk.jmc.rjmx.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/operations\/ExecuteOperationForm.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,0 +73,3 @@\n+import org.openjdk.jmc.rjmx.common.services.IAttributeInfo;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.services.IllegalOperandException;\n@@ -74,2 +77,0 @@\n-import org.openjdk.jmc.rjmx.services.IAttributeInfo;\n-import org.openjdk.jmc.rjmx.services.IOperation;\n@@ -77,1 +78,0 @@\n-import org.openjdk.jmc.rjmx.services.IllegalOperandException;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/operations\/InvocatorBuilderForm.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,3 +45,3 @@\n-import org.openjdk.jmc.rjmx.services.IAttributeInfo;\n-import org.openjdk.jmc.rjmx.services.IOperation;\n-import org.openjdk.jmc.rjmx.services.IOperation.OperationImpact;\n+import org.openjdk.jmc.rjmx.common.services.IAttributeInfo;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.services.IOperation.OperationImpact;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/operations\/OperationsLabelProvider.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-import org.openjdk.jmc.rjmx.preferences.JMXRMIPreferences;\n+import org.openjdk.jmc.rjmx.common.preferences.JMXRMIPreferences;\n","filename":"application\/org.openjdk.jmc.rjmx.ui\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ui\/preferences\/JMXRMIPreferencePage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,0 @@\n-   org.openjdk.jmc.rjmx.services.jfr,\n@@ -49,1 +48,1 @@\n- org.openjdk.jmc.rjmx.services.internal;x-friends:=\"org.openjdk.jmc.rjmx.services.jfr,org.openjdk.jmc.rjmx.test\",\n+ org.openjdk.jmc.rjmx.services.internal;x-friends:=\"org.openjdk.jmc.rjmx.test\",\n@@ -56,1 +55,0 @@\n- org.openjdk.jmc.rjmx.subscription.storage.internal;x-internal:=true,\n@@ -70,1 +68,2 @@\n- org.openjdk.jmc.common;visibility:=reexport\n+ org.openjdk.jmc.common;visibility:=reexport,\n+ org.openjdk.jmc.rjmx.common;visibility:=reexport\n","filename":"application\/org.openjdk.jmc.rjmx\/META-INF\/MANIFEST.MF","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -51,1 +51,6 @@\n-            factory=\"org.openjdk.jmc.rjmx.services.internal.DiagnosticCommandServiceFactory\"\n+         factory=\"org.openjdk.jmc.rjmx.common.services.jfr.internal.FlightRecorderServiceFactory\"\n+         description=\"Service for controlling the flight recorder\"\n+         name=\"Flight Recorder\">\n+      <\/service>\n+      <service\n+            factory=\"org.openjdk.jmc.rjmx.common.services.internal.DiagnosticCommandServiceFactory\"\n@@ -56,1 +61,1 @@\n-            factory=\"org.openjdk.jmc.rjmx.services.internal.SubscriptionServiceFactory\"\n+            factory=\"org.openjdk.jmc.rjmx.common.services.internal.SubscriptionServiceFactory\"\n@@ -66,1 +71,1 @@\n-            factory=\"org.openjdk.jmc.rjmx.services.internal.AttributeStorageServiceFactory\"\n+            factory=\"org.openjdk.jmc.rjmx.common.services.internal.AttributeStorageServiceFactory\"\n@@ -71,1 +76,1 @@\n-            factory=\"org.openjdk.jmc.rjmx.services.internal.CommercialFeaturesServiceFactory\"\n+            factory=\"org.openjdk.jmc.rjmx.common.services.internal.CommercialFeaturesServiceFactory\"\n@@ -85,1 +90,1 @@\n-               adaptableType=\"org.openjdk.jmc.ui.common.action.IActionProvider\"\n+               adaptableType=\"org.openjdk.jmc.common.action.IActionProvider\"\n@@ -88,1 +93,1 @@\n-                  type=\"org.openjdk.jmc.ui.common.action.IUserAction\">\n+                  type=\"org.openjdk.jmc.common.action.IUserAction\">\n@@ -95,1 +100,1 @@\n-                  type=\"org.openjdk.jmc.ui.common.action.IUserAction\">\n+                  type=\"org.openjdk.jmc.common.action.IUserAction\">\n@@ -485,1 +490,1 @@\n-            class=\"org.openjdk.jmc.rjmx.subscription.internal.SingleMRITransformationFactory\"\n+            class=\"org.openjdk.jmc.rjmx.common.subscription.internal.SingleMRITransformationFactory\"\n@@ -494,1 +499,1 @@\n-            class=\"org.openjdk.jmc.rjmx.subscription.internal.SingleMRITransformationFactory\"\n+            class=\"org.openjdk.jmc.rjmx.common.subscription.internal.SingleMRITransformationFactory\"\n@@ -504,1 +509,1 @@\n-            class=\"org.openjdk.jmc.rjmx.subscription.internal.SingleMRITransformationFactory\"\n+            class=\"org.openjdk.jmc.rjmx.common.subscription.internal.SingleMRITransformationFactory\"\n@@ -514,1 +519,1 @@\n-            class=\"org.openjdk.jmc.rjmx.subscription.internal.SingleMRITransformationFactory\"\n+            class=\"org.openjdk.jmc.rjmx.common.subscription.internal.SingleMRITransformationFactory\"\n","filename":"application\/org.openjdk.jmc.rjmx\/plugin.xml","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1,460 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx;\n-\n-import java.io.IOException;\n-import java.lang.management.ManagementFactory;\n-import java.lang.management.MemoryMXBean;\n-import java.lang.management.OperatingSystemMXBean;\n-import java.lang.management.RuntimeMXBean;\n-import java.lang.management.ThreadMXBean;\n-import java.lang.reflect.UndeclaredThrowableException;\n-import java.net.MalformedURLException;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.StringTokenizer;\n-import java.util.logging.Level;\n-\n-import javax.management.JMException;\n-import javax.management.MBeanServerConnection;\n-import javax.management.MalformedObjectNameException;\n-import javax.management.ObjectName;\n-import javax.management.openmbean.CompositeData;\n-import javax.management.openmbean.TabularData;\n-import javax.management.remote.JMXServiceURL;\n-\n-import org.openjdk.jmc.common.jvm.JVMDescriptor;\n-import org.openjdk.jmc.common.version.JavaVMVersionToolkit;\n-import org.openjdk.jmc.common.version.JavaVersion;\n-import org.openjdk.jmc.rjmx.internal.RJMXConnection;\n-\n-\/**\n- * Toolkit providing utility methods to retrieve MBean proxy objects, invoke JMX operations and\n- * query a connection about its properties.\n- *\/\n-public final class ConnectionToolkit {\n-\n-\t\/**\n-\t * Object name for the {@link ManagementFactory#RUNTIME_MXBEAN_NAME} constant.\n-\t *\/\n-\tpublic static final ObjectName RUNTIME_BEAN_NAME = createObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);\n-\t\/**\n-\t * Object name for the {@link ManagementFactory#MEMORY_MXBEAN_NAME} constant.\n-\t *\/\n-\tpublic static final ObjectName MEMORY_BEAN_NAME = createObjectName(ManagementFactory.MEMORY_MXBEAN_NAME);\n-\t\/**\n-\t * Object name for the {@link ManagementFactory#THREAD_MXBEAN_NAME} constant.\n-\t *\/\n-\tpublic static final ObjectName THREAD_BEAN_NAME = createObjectName(ManagementFactory.THREAD_MXBEAN_NAME);\n-\t\/**\n-\t * Object name for the {@link ManagementFactory#OPERATING_SYSTEM_MXBEAN_NAME} constant.\n-\t *\/\n-\tpublic static final ObjectName OPERATING_SYSTEM_BEAN_NAME = createObjectName(\n-\t\t\tManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME);\n-\n-\tprivate ConnectionToolkit() {\n-\t\tthrow new IllegalArgumentException(\"Don't instantiate this toolkit\"); \/\/$NON-NLS-1$\n-\t}\n-\n-\t\/**\n-\t * Creates an object name for an MBean. Hides the fact that a\n-\t * {@link MalformedObjectNameException} might be thrown if the passed string has the wrong\n-\t * format.\n-\t *\n-\t * @param name\n-\t *            name of the object.\n-\t * @return the ObjectName\n-\t * @throws IllegalArgumentException\n-\t *             if an object name could not be created from the string\n-\t *\/\n-\tpublic static ObjectName createObjectName(String name) {\n-\t\ttry {\n-\t\t\treturn new ObjectName(name);\n-\t\t} catch (MalformedObjectNameException e) {\n-\t\t\t\/\/ Should not happen - programmer error!\n-\t\t\tassert (false);\n-\t\t\tthrow new IllegalArgumentException(e.getMessage(), e);\n-\t\t}\n-\t}\n-\n-\t\/**\n-\t * Helper method to retrieve proxy object for platform Memory MXBean\n-\t * ({@code \"java.lang:type=Memory\"}).\n-\t *\n-\t * @param server\n-\t *            the connected server\n-\t * @return a proxy object or {@code null} if it does not exist.\n-\t * @throws IOException\n-\t *             if a communication problem occurred.\n-\t * @see ManagementFactory#newPlatformMXBeanProxy(MBeanServerConnection, String, Class)\n-\t *\/\n-\tpublic static MemoryMXBean getMemoryBean(MBeanServerConnection server) throws IOException {\n-\t\treturn ManagementFactory.newPlatformMXBeanProxy(server, ManagementFactory.MEMORY_MXBEAN_NAME,\n-\t\t\t\tMemoryMXBean.class);\n-\t}\n-\n-\t\/**\n-\t * Helper method to retrieve proxy object for platform Runtime MXBean\n-\t * ({@code \"java.lang:type=Runtime\"}).\n-\t *\n-\t * @param server\n-\t *            the connected server\n-\t * @return a proxy object or {@code null} if it does not exist.\n-\t * @throws IOException\n-\t *             if a communication problem occurred.\n-\t * @see ManagementFactory#newPlatformMXBeanProxy(MBeanServerConnection, String, Class)\n-\t *\/\n-\tpublic static RuntimeMXBean getRuntimeBean(MBeanServerConnection server) throws IOException {\n-\t\treturn ManagementFactory.newPlatformMXBeanProxy(server, ManagementFactory.RUNTIME_MXBEAN_NAME,\n-\t\t\t\tRuntimeMXBean.class);\n-\t}\n-\n-\t\/**\n-\t * Helper method to retrieve proxy object for platform Memory MXBean\n-\t * ({@code \"java.lang:type=Threading\"}).\n-\t *\n-\t * @param server\n-\t *            the connected server\n-\t * @return a proxy object or {@code null} if it does not exist.\n-\t * @throws IOException\n-\t *             if a communication problem occurred.\n-\t * @see ManagementFactory#newPlatformMXBeanProxy(MBeanServerConnection, String, Class)\n-\t *\/\n-\tpublic static ThreadMXBean getThreadBean(MBeanServerConnection server) throws IOException {\n-\t\treturn ManagementFactory.newPlatformMXBeanProxy(server, ManagementFactory.THREAD_MXBEAN_NAME,\n-\t\t\t\tThreadMXBean.class);\n-\t}\n-\n-\t\/**\n-\t * Helper method to retrieve proxy object for platform Memory MXBean\n-\t * ({@code \"java.lang:type=OperatingSystem\"}).\n-\t *\n-\t * @param server\n-\t *            the connected server\n-\t * @return a proxy object or {@code null} if it does not exist.\n-\t * @throws IOException\n-\t *             if a communication problem occurred.\n-\t * @see ManagementFactory#newPlatformMXBeanProxy(MBeanServerConnection, String, Class)\n-\t *\/\n-\tpublic static OperatingSystemMXBean getOperatingSystemBean(MBeanServerConnection server) throws IOException {\n-\t\treturn ManagementFactory.newPlatformMXBeanProxy(server, ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME,\n-\t\t\t\tOperatingSystemMXBean.class);\n-\t}\n-\n-\t\/**\n-\t * Helper method to invoke MBean operation on a MBean server. Will try to deduce the correct\n-\t * method to invoke based on the provided parameters.\n-\t *\n-\t * @param server\n-\t *            the MBean server to invoke method on.\n-\t * @param on\n-\t *            the name of the MBean.\n-\t * @param operation\n-\t *            the name of the operation.\n-\t * @param parameters\n-\t *            the parameters for the method invocation.\n-\t * @return the object returned by the operation, which represents the result of invoking the\n-\t *         operation on the MBean specified.\n-\t * @throws JMException\n-\t *             some sort of exception due to unknown MBean or exception thrown in invoked\n-\t *             method.\n-\t * @throws IOException\n-\t *             if a communication problem occurred when talking to the MBean server.\n-\t *\/\n-\tpublic static Object invokeOperation(\n-\t\tMBeanServerConnection server, ObjectName on, String operation, Object ... parameters)\n-\t\t\tthrows JMException, IOException {\n-\t\treturn server.invoke(on, operation, parameters, extractSignature(parameters));\n-\t}\n-\n-\t\/**\n-\t * Automatically generates the signature to be used when invoking operations.\n-\t *\n-\t * @param param\n-\t *            the parameters for which to get the signature.\n-\t * @return the signature matching the parameters.\n-\t *\/\n-\tprivate static String[] extractSignature(Object[] param) {\n-\t\tString[] sig = new String[param.length];\n-\t\tfor (int i = 0; i < sig.length; i++) {\n-\t\t\tif (param[i].getClass() == Boolean.class) {\n-\t\t\t\tsig[i] = Boolean.TYPE.getName();\n-\t\t\t} else if (Number.class.isAssignableFrom(param[i].getClass())) {\n-\t\t\t\ttry {\n-\t\t\t\t\tsig[i] = ((Class<?>) param[i].getClass().getField(\"TYPE\").get(param[i])).getName(); \/\/$NON-NLS-1$\n-\t\t\t\t} catch (IllegalArgumentException e) {\n-\t\t\t\t\tthrow new UndeclaredThrowableException(e);\n-\t\t\t\t} catch (SecurityException e) {\n-\t\t\t\t\tthrow new UndeclaredThrowableException(e);\n-\t\t\t\t} catch (IllegalAccessException e) {\n-\t\t\t\t\tthrow new UndeclaredThrowableException(e);\n-\t\t\t\t} catch (NoSuchFieldException e) {\n-\t\t\t\t\tthrow new UndeclaredThrowableException(e);\n-\t\t\t\t}\n-\t\t\t} else if (CompositeData.class.isAssignableFrom(param[i].getClass())) {\n-\t\t\t\tsig[i] = CompositeData.class.getName();\n-\t\t\t} else if (TabularData.class.isAssignableFrom(param[i].getClass())) {\n-\t\t\t\tsig[i] = TabularData.class.getName();\n-\t\t\t} else if (List.class.isAssignableFrom(param[i].getClass())) {\n-\t\t\t\tsig[i] = List.class.getName();\n-\t\t\t} else {\n-\t\t\t\tsig[i] = param[i].getClass().getName();\n-\t\t\t}\n-\t\t}\n-\t\treturn sig;\n-\t}\n-\n-\t\/**\n-\t * Will attempt to derive the host name from the {@link JMXServiceURL}. If the JXMServiceURL\n-\t * uses jmxrmi, the host name will be derived from the information in the JXMServiceURL.\n-\t *\n-\t * @param url\n-\t *            the {@link JMXServiceURL} to retrieve the host name from.\n-\t * @return the host name.\n-\t *\/\n-\tpublic static String getHostName(JMXServiceURL url) {\n-\t\tif (url.getHost() == null || \"\".equals(url.getHost().trim())) { \/\/$NON-NLS-1$\n-\t\t\treturn deriveHost(url);\n-\t\t} else {\n-\t\t\treturn url.getHost();\n-\t\t}\n-\t}\n-\n-\t\/**\n-\t * Will attempt to derive the port from the {@link JMXServiceURL}. If the JXMServiceURL uses\n-\t * jmxrmi, the port will be derived from the information in the JXMServiceURL.\n-\t *\n-\t * @param url\n-\t *            the {@link JMXServiceURL} to derive the port from.\n-\t * @return the port number\n-\t *\/\n-\tpublic static int getPort(JMXServiceURL url) {\n-\t\tif (url.getPort() <= 0) {\n-\t\t\treturn derivePort(url);\n-\t\t} else {\n-\t\t\treturn url.getPort();\n-\t\t}\n-\t}\n-\n-\t\/**\n-\t * Helper method to try to derive the host name from a standard jmxrmi JMX service URL.\n-\t *\n-\t * @param url\n-\t *            service URL.\n-\t * @return the host name.\n-\t *\/\n-\tprivate static String deriveHost(JMXServiceURL url) {\n-\t\tStringTokenizer st = new StringTokenizer(url.getURLPath(), \":\/\"); \/\/$NON-NLS-1$\n-\t\tif (st.countTokens() == 5) {\n-\t\t\tfor (int i = 0; i < 2; i++) {\n-\t\t\t\tst.nextToken();\n-\t\t\t}\n-\t\t\tString host = st.nextToken();\n-\t\t\t\/\/ strip dashes\n-\t\t\treturn host;\n-\t\t}\n-\t\treturn \"unknown\"; \/\/$NON-NLS-1$\n-\t}\n-\n-\t\/**\n-\t * Evil helper method to try to derive the port number from a standard jmxrmi JMX service URL.\n-\t *\n-\t * @param url\n-\t *            service URL.\n-\t * @return the port number.\n-\t *\/\n-\tprivate static int derivePort(JMXServiceURL url) {\n-\t\tStringTokenizer st = new StringTokenizer(url.getURLPath(), \":\/\"); \/\/$NON-NLS-1$\n-\t\tif (st.countTokens() == 5) {\n-\t\t\tfor (int i = 0; i < 3; i++) {\n-\t\t\t\tst.nextToken();\n-\t\t\t}\n-\t\t\tString port = st.nextToken();\n-\t\t\ttry {\n-\t\t\t\treturn Integer.parseInt(port);\n-\t\t\t} catch (NumberFormatException e) {\n-\t\t\t\treturn -1;\n-\t\t\t}\n-\t\t}\n-\t\treturn 0;\n-\t}\n-\n-\t\/**\n-\t * Creates a \"JMX over RMI\" or \"JMX over RMP\" service URL.\n-\t *\n-\t * @param host\n-\t *            the host name.\n-\t * @param port\n-\t *            port or {@link ConnectionDescriptorBuilder#DEFAULT_PORT} for the default port for\n-\t *            the selected protocol\n-\t * @return the {@link JMXServiceURL}.\n-\t * @throws MalformedURLException\n-\t *             if the URL could not be created with the provided data.\n-\t *\/\n-\tpublic static JMXServiceURL createServiceURL(String host, int port) throws MalformedURLException {\n-\t\tint actualPort = (port != ConnectionDescriptorBuilder.DEFAULT_PORT) ? port\n-\t\t\t\t: RJMXConnection.VALUE_DEFAULT_REMOTE_PORT_JMX;\n-\t\treturn new JMXServiceURL(\"rmi\", \"\", 0, \"\/jndi\/rmi:\/\/\" + host + ':' + actualPort + \"\/jmxrmi\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$ \/\/$NON-NLS-4$\n-\t}\n-\n-\t\/**\n-\t * Returns the default port number for the management agent.\n-\t *\n-\t * @return the default port for the management agent. May vary depending on which JVM version\n-\t *         the method is executed in.\n-\t *\/\n-\tpublic static int getDefaultPort() {\n-\t\treturn RJMXConnection.VALUE_DEFAULT_REMOTE_PORT_JMX;\n-\t}\n-\n-\t\/**\n-\t * Returns {@code true} if the connection handle is connected to a JRockit, {@code false}\n-\t * otherwise.\n-\t *\n-\t * @param connectionHandle\n-\t *            the connection handle to check.\n-\t * @return {@code true} if the connection handle is connected to a JRockit, {@code false}\n-\t *         otherwise.\n-\t *\/\n-\tpublic static boolean isJRockit(IConnectionHandle connectionHandle) {\n-\t\tString vmName = getVMName(connectionHandle);\n-\t\treturn JavaVMVersionToolkit.isJRockitJVMName(vmName);\n-\t}\n-\n-\t\/**\n-\t * Returns {@code true} if the connection handle is connected to a HotSpot, {@code false}\n-\t * otherwise. This method requires the connection handle to be connected.\n-\t *\n-\t * @param connectionHandle\n-\t *            the connection handle to check.\n-\t * @return {@code true} if the connection handle is connected to a HotSpot, {@code false}\n-\t *         otherwise.\n-\t *\/\n-\tpublic static boolean isHotSpot(IConnectionHandle connectionHandle) {\n-\t\tString vmName = getVMName(connectionHandle);\n-\t\treturn vmName != null && JavaVMVersionToolkit.isHotspotJVMName(vmName);\n-\t}\n-\n-\t\/**\n-\t * Returns {@code true} if the connection handle is connected to a Substrate VM, {@code false}\n-\t * otherwise. This method requires the connection handle to be connected.\n-\t *\n-\t * @param connectionHandle\n-\t *            the connection handle to check.\n-\t * @return {@code true} if the connection handle is connected to a Substrate VM, {@code false}\n-\t *         otherwise.\n-\t *\/\n-\tpublic static boolean isSubstrateVM(IConnectionHandle connectionHandle) {\n-\t\tString vmName = getVMName(connectionHandle);\n-\t\treturn vmName != null && JavaVMVersionToolkit.isSubstrateVMName(vmName);\n-\t}\n-\n-\t\/**\n-\t * Returns {@code true} if the connection handle is associated with an Oracle built JVM,\n-\t * {@code false} otherwise. If the information is already present in the {@link JVMDescriptor},\n-\t * this method will not cause any JMXRMI calls. If the information is lacking, an attempt will\n-\t * be made to look it up in the connected JVM. If the attempt fails, false will be returned.\n-\t *\n-\t * @return {@code true} if the connection handle describes an Oracle JVM, or {@code false}\n-\t *         otherwise or if it could not be determined.\n-\t *\/\n-\tpublic static boolean isOracle(IConnectionHandle handle) {\n-\t\tJVMDescriptor descriptor = handle.getServerDescriptor().getJvmInfo();\n-\t\t\/\/ This should normally not happen for discovered JVMs, but users can create custom connections\n-\t\tString name = null;\n-\t\tif (descriptor != null) {\n-\t\t\tname = descriptor.getJvmName();\n-\t\t} else {\n-\t\t\t\/\/ We try checking if connected\n-\t\t\tif (handle.isConnected()) {\n-\t\t\t\tMBeanServerConnection connection = handle.getServiceOrNull(MBeanServerConnection.class);\n-\t\t\t\tif (connection != null) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tname = getRuntimeBean(connection).getVmName();\n-\t\t\t\t\t} catch (IOException e) {\n-\t\t\t\t\t\t\/\/ Worst case we classify JVM name wrong\n-\t\t\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not check if Oracle JVM\", e);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\treturn name != null && (name.contains(\"Java HotSpot\"));\n-\t}\n-\n-\t\/**\n-\t * This will return true if the java version is above or equal the supplied value. (For example\n-\t * 1.7.0_40).\n-\t *\n-\t * @param connectionHandle\n-\t *            the connectionHandle to check.\n-\t * @param minVersion\n-\t *            the java version needed.\n-\t * @return {@code true} if the version is above or equal the supplied value, {@code true} if no\n-\t *         version can be obtained from the connection, {@code false} otherwise.\n-\t *\/\n-\tpublic static boolean isJavaVersionAboveOrEqual(IConnectionHandle connectionHandle, JavaVersion minVersion) {\n-\t\tJavaVersion version = getJavaVersion(connectionHandle);\n-\t\treturn version != null ? version.isGreaterOrEqualThan(minVersion) : true;\n-\t}\n-\n-\tprivate static String getVMName(IConnectionHandle connectionHandle) {\n-\t\tMBeanServerConnection connection = connectionHandle.getServiceOrDummy(MBeanServerConnection.class);\n-\t\ttry {\n-\t\t\t\/\/ getAttribute may fail if the connection handle\n-\t\t\t\/\/ has just been disconnected by the user, which is not a problem\n-\t\t\treturn getRuntimeBean(connection).getVmName();\n-\n-\t\t} catch (Exception e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.INFO, \"Could not check the JVM name!\", e); \/\/$NON-NLS-1$\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate static JavaVersion getJavaVersion(IConnectionHandle connectionHandle) {\n-\t\ttry {\n-\t\t\tMBeanServerConnection server = connectionHandle.getServiceOrThrow(MBeanServerConnection.class);\n-\t\t\tMap<String, String> serverProps = getRuntimeBean(server).getSystemProperties();\n-\t\t\tString javaVersion = serverProps.get(\"java.version\"); \/\/$NON-NLS-1$\n-\t\t\tif (javaVersion != null) {\n-\t\t\t\treturn new JavaVersion(javaVersion);\n-\t\t\t}\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING,\n-\t\t\t\t\t\"System Properties from \" + connectionHandle.getDescription() \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\t+ \" contained no java.version property!\"); \/\/$NON-NLS-1$\n-\t\t} catch (Exception e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING,\n-\t\t\t\t\t\"Could not check the java.version from System Properties!\", e); \/\/$NON-NLS-1$\n-\t\t}\n-\t\treturn null;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ConnectionToolkit.java","additions":0,"deletions":460,"binary":false,"changes":460,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import org.openjdk.jmc.rjmx.common.ISyntheticAttribute;\n+\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/IPropertySyntheticAttribute.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,5 @@\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionListener;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/IServerHandle.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,3 +35,0 @@\n-import javax.management.MBeanServerConnection;\n-import javax.management.ObjectName;\n-\n@@ -42,0 +39,2 @@\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n@@ -44,1 +43,0 @@\n-import org.openjdk.jmc.rjmx.services.internal.HotspotManagementToolkit;\n@@ -51,2 +49,0 @@\n-\tprivate final static String JFR_MBEAN_OBJECT_NAME = \"jdk.management.jfr:type=FlightRecorder\"; \/\/$NON-NLS-1$\n-\n@@ -90,52 +86,0 @@\n-\t\/**\n-\t * Checks if Flight Recorder is available for use\n-\t * \n-\t * @param connection\n-\t * @return If it is an Oracle JVM or there is a FlightRecorder VM option, then return true.\n-\t *         Otherwise, return false. This is used for verifying JDK 8 JVMs that are not built\n-\t *         with JFR enabled, e.g., OpenJDK 8\n-\t *\/\n-\tpublic static boolean hasFlightRecorder(IConnectionHandle connection) {\n-\t\tif (ConnectionToolkit.isOracle(connection)) {\n-\t\t\treturn true;\n-\t\t}\n-\t\tMBeanServerConnection server = connection.getServiceOrNull(MBeanServerConnection.class);\n-\t\ttry {\n-\t\t\tif (ConnectionToolkit.isSubstrateVM(connection)) {\n-\t\t\t\treturn server.isRegistered(new ObjectName(JFR_MBEAN_OBJECT_NAME));\n-\t\t\t} else {\n-\t\t\t\tHotspotManagementToolkit.getVMOption(server, \"FlightRecorder\");\n-\t\t\t\treturn true;\n-\t\t\t}\n-\t\t} catch (Exception e) { \/\/ RuntimeMBeanException thrown if FlightRecorder is not present\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\t\/**\n-\t * Checks if Flight Recorder is disabled.\n-\t *\n-\t * @param connection\n-\t *            the connection to check\n-\t * @param explicitFlag\n-\t *            If the flag has to be explicitly disabled on the command line with\n-\t *            -XX:-FlightRecorder\n-\t * @return If explicitFlag is true, then returns true only if Flight Recorder is explicitly\n-\t *         disabled on the command line. If explicitFlag is false, then returns true if Flight\n-\t *         Recorder is currently not enabled.\n-\t *\/\n-\tpublic static boolean isFlightRecorderDisabled(IConnectionHandle connection, boolean explicitFlag) {\n-\t\ttry {\n-\t\t\tMBeanServerConnection server = connection.getServiceOrThrow(MBeanServerConnection.class);\n-\t\t\tboolean disabled = !Boolean\n-\t\t\t\t\t.parseBoolean(HotspotManagementToolkit.getVMOption(server, \"FlightRecorder\").toString()); \/\/$NON-NLS-1$\n-\t\t\tif (explicitFlag) {\n-\t\t\t\treturn (disabled && HotspotManagementToolkit.isVMOptionExplicit(server, \"FlightRecorder\")); \/\/$NON-NLS-1$\n-\t\t\t} else {\n-\t\t\t\treturn disabled;\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n@@ -161,1 +105,1 @@\n-\t\tif (isFlightRecorderDisabled(handle, true)) {\n+\t\tif (ConnectionToolkit.isFlightRecorderDisabled(handle, true)) {\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/JVMSupportToolkit.java","additions":3,"deletions":59,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import org.openjdk.jmc.common.action.Executable;\n@@ -36,1 +37,0 @@\n-import org.openjdk.jmc.ui.common.action.Executable;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/actionprovider\/IActionFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import org.openjdk.jmc.common.action.IActionProvider;\n+import org.openjdk.jmc.common.action.IUserAction;\n@@ -38,2 +40,0 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/actionprovider\/IActionProviderFactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,3 @@\n-\n+import org.openjdk.jmc.common.action.Executable;\n+import org.openjdk.jmc.common.action.IUserAction;\n+import org.openjdk.jmc.common.resource.Resource;\n@@ -46,2 +48,0 @@\n-import org.openjdk.jmc.ui.common.action.Executable;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n@@ -49,1 +49,0 @@\n-import org.openjdk.jmc.ui.common.resource.Resource;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/actionprovider\/internal\/ActionDescriptor.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,2 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n+import org.openjdk.jmc.common.action.IActionProvider;\n+import org.openjdk.jmc.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/actionprovider\/internal\/ActionProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,2 @@\n+import org.openjdk.jmc.common.action.IUserAction;\n+import org.openjdk.jmc.common.resource.Resource;\n@@ -47,1 +49,0 @@\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n@@ -49,1 +50,0 @@\n-import org.openjdk.jmc.ui.common.resource.Resource;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/actionprovider\/internal\/ActionProviderDescriptor.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,0 +55,1 @@\n+import org.openjdk.jmc.common.action.IActionProvider;\n@@ -58,1 +59,0 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/actionprovider\/internal\/ActionProviderRepository.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,2 @@\n-\n+import org.openjdk.jmc.common.action.IActionProvider;\n+import org.openjdk.jmc.common.action.IUserAction;\n@@ -38,2 +39,0 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/actionprovider\/internal\/DefaultActionFactory.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/descriptorprovider\/AbstractDescriptorProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/descriptorprovider\/IDescriptorListener.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,231 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.internal;\n-\n-import java.io.IOException;\n-import java.util.Collections;\n-import java.util.LinkedHashMap;\n-import java.util.Map;\n-import java.util.logging.Level;\n-\n-import javax.management.MBeanServerConnection;\n-\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.IConnectionListener;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.internal.ServiceFactoryManager;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-\n-\/**\n- * This class represents a connection to a JVM.\n- *\n- * @see org.openjdk.jmc.rjmx.internal.RJMXConnection\n- *\/\n-public class DefaultConnectionHandle implements IConnectionHandle {\n-\n-\t\/\/ The services exposed by this IConnectionHandle (<class,object>)\n-\tprivate final Map<Class<?>, Object> services = Collections.synchronizedMap(new LinkedHashMap<Class<?>, Object>());\n-\n-\tprivate final String description;\n-\tprivate final RJMXConnection connection;\n-\tprivate final IConnectionListener[] listeners;\n-\n-\tprivate static final ServiceFactoryManager FACTORY_MANAGER = new ServiceFactoryManager();\n-\n-\tprivate volatile Long closeDownThreadId; \/\/ Set to -1 when handle is closed\n-\n-\tpublic DefaultConnectionHandle(RJMXConnection connection, String description, IConnectionListener[] listeners) {\n-\t\tthis.connection = connection;\n-\t\tthis.description = description;\n-\t\tthis.listeners = listeners == null ? new IConnectionListener[0] : listeners;\n-\t\tregisterDefaultServices();\n-\t}\n-\n-\t@Override\n-\tpublic IServerDescriptor getServerDescriptor() {\n-\t\treturn connection.getServerDescriptor();\n-\t}\n-\n-\t@Override\n-\tpublic boolean isConnected() {\n-\t\treturn isOpen() && connection.isConnected();\n-\t}\n-\n-\tprivate boolean isOpen() {\n-\t\t\/\/ Access allowed if we are not closed, or for the closing thread during shutdown\n-\t\treturn closeDownThreadId == null || Thread.currentThread().getId() == closeDownThreadId;\n-\t}\n-\n-\t@Override\n-\tpublic void close() throws IOException {\n-\t\tsynchronized (services) {\n-\t\t\tif (closeDownThreadId != null) {\n-\t\t\t\t\/\/ Already closed\n-\t\t\t\treturn;\n-\t\t\t}\n-\t\t\t\/\/ Allow disposing services to get other services, but refuse all other\n-\t\t\tcloseDownThreadId = Thread.currentThread().getId();\n-\t\t\tshutdownServices();\n-\t\t\tcloseDownThreadId = -1L; \/\/ No more access, refuse all\n-\t\t}\n-\t\tfor (IConnectionListener l : listeners) {\n-\t\t\ttry {\n-\t\t\t\tl.onConnectionChange(this);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING,\n-\t\t\t\t\t\t\"DefaultConnectionHandle listener \" + l + \" failed\", e); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void shutdownServices() {\n-\t\tObject[] servicesArray = services.values().toArray();\n-\t\tfor (int i = 0; i < servicesArray.length; i++) {\n-\t\t\tObject service = servicesArray[servicesArray.length - i - 1];\n-\t\t\tif (service instanceof IDisposableService) {\n-\t\t\t\ttry {\n-\t\t\t\t\t((IDisposableService) service).dispose();\n-\t\t\t\t} catch (RuntimeException e) {\n-\t\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING,\n-\t\t\t\t\t\t\t\"Could not shut down the \" + service.getClass().getName() \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\t\t\t+ \" service.\", \/\/$NON-NLS-1$\n-\t\t\t\t\t\t\te);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tservices.clear();\n-\t}\n-\n-\t\/**\n-\t * Free external resources.\n-\t *\n-\t * @see java.lang.Object#finalize()\n-\t *\/\n-\t@Override\n-\tprotected void finalize() throws Throwable {\n-\t\t\/\/ Make sure that external resources are freed upon GC.\n-\t\tclose();\n-\t\tsuper.finalize();\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn description + \" - \" + connection.toString(); \/\/$NON-NLS-1$\n-\t}\n-\n-\t@Override\n-\tpublic <T> T getServiceOrThrow(Class<T> serviceInterface) throws ConnectionException, ServiceNotAvailableException {\n-\t\tif (isOpen()) {\n-\t\t\tT service = getService(serviceInterface, false);\n-\t\t\tif (service != null) {\n-\t\t\t\treturn service;\n-\t\t\t}\n-\t\t} else {\n-\t\t\tthrow new ConnectionException(\"Connection closed!\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tthrow new ServiceNotAvailableException(\"Service '\" + serviceInterface.getName() + \"' not available!\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t}\n-\n-\t@Override\n-\tpublic <T> T getServiceOrDummy(Class<T> serviceInterface) {\n-\t\tif (!serviceInterface.isInterface()) {\n-\t\t\t\/*\n-\t\t\t * If you get this, you need to call createServiceOrNull() instead and handle the null\n-\t\t\t * case. (And yes, we want to check this before attempting to create a service. Ideally,\n-\t\t\t * we would like to check this at compile time, but langtools couldn't come up with a\n-\t\t\t * good way to do so when we asked. Although JSR 308 and the Checker Framework should\n-\t\t\t * change that.)\n-\t\t\t *\/\n-\t\t\tthrow new IllegalArgumentException(\"Will not be able to create dummy implementations of \" \/\/$NON-NLS-1$\n-\t\t\t\t\t+ serviceInterface.getName() + \" since the service is not an interface\"); \/\/$NON-NLS-1$\n-\t\t} else if (isOpen()) {\n-\t\t\treturn getService(serviceInterface, true);\n-\t\t} else {\n-\t\t\treturn createDummyService(serviceInterface);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic <T> T getServiceOrNull(Class<T> serviceInterface) {\n-\t\tif (isOpen()) {\n-\t\t\treturn getService(serviceInterface, false);\n-\t\t} else {\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tprivate <T> T getService(Class<T> serviceInterface, boolean acceptDummy) {\n-\t\tsynchronized (services) {\n-\t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\tT service = (T) services.get(serviceInterface);\n-\t\t\tif (service == null || (ServiceFactoryManager.isDummy(service) && !acceptDummy)) {\n-\t\t\t\tservice = FACTORY_MANAGER.createService(serviceInterface, this);\n-\t\t\t\tif ((service == null) && acceptDummy) {\n-\t\t\t\t\tservice = createDummyService(serviceInterface);\n-\t\t\t\t}\n-\t\t\t\tif (service != null) {\n-\t\t\t\t\tservices.put(serviceInterface, service);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn (acceptDummy || !ServiceFactoryManager.isDummy(service)) ? service : null;\n-\t\t}\n-\t}\n-\n-\tprivate static <T> T createDummyService(Class<T> serviceInterface) throws IllegalArgumentException {\n-\t\treturn ServiceFactoryManager.createDummyService(serviceInterface, null);\n-\t}\n-\n-\tprivate synchronized void registerDefaultServices() {\n-\t\tsynchronized (services) {\n-\t\t\tservices.put(MBeanServerConnection.class, connection.getMBeanServer());\n-\t\t\tservices.put(IMBeanHelperService.class, connection);\n-\t\t\tservices.put(IMRIService.class, connection.getMRIService());\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean hasService(Class<?> serviceClass) {\n-\t\tsynchronized (services) {\n-\t\t\treturn getServiceOrNull(serviceClass) != null;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic String getDescription() {\n-\t\treturn description;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/DefaultConnectionHandle.java","additions":0,"deletions":231,"binary":false,"changes":231,"status":"deleted"},{"patch":"@@ -1,92 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.internal;\n-\n-import java.util.Properties;\n-import java.util.logging.Level;\n-\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.preferences.JMXRMIPreferences;\n-\n-public final class JMXRMISystemPropertiesProvider {\n-\n-\tpublic static void setup() {\n-\t\ttry {\n-\t\t\tProperties jmxRmiProperties = JMXRMIPreferences.getInstance().getProperties();\n-\t\t\tif (jmxRmiProperties != null) {\n-\t\t\t\tfor (String prop : jmxRmiProperties.stringPropertyNames()) {\n-\t\t\t\t\tObject val = jmxRmiProperties.get(prop);\n-\t\t\t\t\tif (val != null && !val.toString().isEmpty()) {\n-\t\t\t\t\t\tSystem.setProperty(prop, val.toString());\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.FINE, \"Did not load jmxRmiProperties\", e); \/\/$NON-NLS-1$\n-\t\t}\n-\t}\n-\n-\tpublic static void clearJMXRMISystemProperties() {\n-\t\ttry {\n-\t\t\tProperties jmxRmiProperties = JMXRMIPreferences.getInstance().getProperties();\n-\t\t\tif (jmxRmiProperties != null) {\n-\t\t\t\tfor (String prop : jmxRmiProperties.stringPropertyNames()) {\n-\t\t\t\t\tSystem.clearProperty(prop);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.FINE, \"Failed to remove JMXRMI SystemProperties\", e); \/\/$NON-NLS-1$\n-\t\t}\n-\t}\n-\n-\tpublic static boolean isKeyStoreConfigured() {\n-\t\ttry {\n-\t\t\tProperties jmxRmiProperties = JMXRMIPreferences.getInstance().getProperties();\n-\t\t\tif (jmxRmiProperties != null) {\n-\t\t\t\tint totalPrefCnt = 0;\n-\t\t\t\tfor (String prop : jmxRmiProperties.stringPropertyNames()) {\n-\t\t\t\t\tObject val = jmxRmiProperties.get(prop);\n-\t\t\t\t\tif (val != null && !val.toString().isEmpty()) {\n-\t\t\t\t\t\t++totalPrefCnt;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tif (totalPrefCnt == 4) {\n-\t\t\t\t\treturn true;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.FINE, \"Did not load jmxRmiProperties\", e); \/\/$NON-NLS-1$\n-\t\t}\n-\t\treturn false;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/JMXRMISystemPropertiesProvider.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -1,595 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.internal;\n-\n-import java.io.Closeable;\n-import java.io.IOException;\n-import java.lang.management.ManagementFactory;\n-import java.net.MalformedURLException;\n-import java.rmi.UnmarshalException;\n-import java.util.Collection;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.concurrent.atomic.AtomicInteger;\n-import java.util.logging.Level;\n-\n-import javax.management.AttributeNotFoundException;\n-import javax.management.InstanceNotFoundException;\n-import javax.management.IntrospectionException;\n-import javax.management.JMRuntimeException;\n-import javax.management.MBeanException;\n-import javax.management.MBeanInfo;\n-import javax.management.MBeanServerConnection;\n-import javax.management.MBeanServerDelegate;\n-import javax.management.MBeanServerNotification;\n-import javax.management.MalformedObjectNameException;\n-import javax.management.Notification;\n-import javax.management.NotificationListener;\n-import javax.management.ObjectName;\n-import javax.management.QueryExp;\n-import javax.management.ReflectionException;\n-import javax.management.remote.JMXConnectionNotification;\n-import javax.management.remote.JMXConnector;\n-import javax.management.remote.JMXConnectorFactory;\n-import javax.management.remote.JMXServiceURL;\n-import javax.rmi.ssl.SslRMIClientSocketFactory;\n-\n-import org.eclipse.core.runtime.ListenerList;\n-import org.openjdk.jmc.common.jvm.JVMDescriptor;\n-import org.openjdk.jmc.common.version.JavaVersion;\n-import org.openjdk.jmc.common.version.JavaVersionSupport;\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.services.IOperation;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanServerChangeListener;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.internal.AttributeValueToolkit;\n-import org.openjdk.jmc.rjmx.subscription.internal.InvoluntaryDisconnectException;\n-import org.openjdk.jmc.rjmx.subscription.internal.MBeanMRIMetadataDB;\n-\n-\/**\n- * This class simplifies and hides some of the complexity of connecting to a JVM (supporting JSR-174\n- * and JSR-160) using Remote JMX. The RJMXConnection is shared between several\n- * {@link DefaultConnectionHandle}s, and when the last {@link DefaultConnectionHandle} using the\n- * JRMXConnection is closed, the RJMXConnection will be automatically closed.\n- *\/\n-public class RJMXConnection implements Closeable, IMBeanHelperService {\n-\n-\tpublic static final String KEY_SOCKET_FACTORY = \"com.sun.jndi.rmi.factory.socket\"; \/\/$NON-NLS-1$\n-\tpublic static final String KEY_JMXREMOTE_SSL = \"com.sun.management.jmxremote.ssl\"; \/\/$NON-NLS-1$\n-\n-\t\/**\n-\t * The default port JMX\n-\t *\/\n-\tpublic static final int VALUE_DEFAULT_REMOTE_PORT_JMX = 7091;\n-\n-\t\/**\n-\t * Default recalibration interval. The server to client timediff is recalibrated every two\n-\t * minutes per default.\n-\t *\/\n-\tprivate static final long VALUE_RECALIBRATION_INTERVAL = 120000;\n-\tprivate static final long REMOTE_START_TIME_UNDEFINED = -1;\n-\tprivate static final AtomicInteger CONNECTION_COUNTER = new AtomicInteger();\n-\n-\t\/\/ The ConnectionDescriptor used to create this RJMXConnection\n-\tprivate final IConnectionDescriptor m_connectionDescriptor;\n-\tprivate final IServerDescriptor m_serverDescriptor;\n-\tprivate final int m_connectionId = CONNECTION_COUNTER.getAndIncrement();\n-\n-\t\/\/ The MBean server connection used for all local and remote communication.\n-\tprivate volatile MCMBeanServerConnection m_server;\n-\n-\t\/\/ The underlying JMX connection used when communicating remote.\n-\tprivate JMXConnector m_jmxc;\n-\n-\tprivate final MBeanMRIMetadataDB m_mbeanDataProvider;\n-\n-\t\/\/ Variables used for calibrating the offset to the server clock.\n-\tprivate long m_serverOffset;\n-\tprivate long m_lastRecalibration;\n-\tprivate long m_remoteStartTime = REMOTE_START_TIME_UNDEFINED;\n-\n-\tprivate boolean m_hasInitializedAllMBeans = false;\n-\tprivate final HashMap<ObjectName, MBeanInfo> m_cachedInfos = new HashMap<>();\n-\tprivate volatile Set<ObjectName> m_cachedMBeanNames = new HashSet<>();\n-\tprivate final Runnable m_onFailCallback;\n-\tprivate final ListenerList<IMBeanServerChangeListener> m_mbeanListeners = new ListenerList<>();\n-\tprivate final NotificationListener m_registrationListener = new NotificationListener() {\n-\t\t@Override\n-\t\tpublic void handleNotification(Notification notification, Object handback) {\n-\t\t\tif (notification instanceof MBeanServerNotification) {\n-\t\t\t\tObjectName name = ((MBeanServerNotification) notification).getMBeanName();\n-\t\t\t\tif (notification.getType().equals(MBeanServerNotification.REGISTRATION_NOTIFICATION)) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tsynchronized (m_cachedInfos) {\n-\t\t\t\t\t\t\tgetMBeanInfo(name);\n-\t\t\t\t\t\t\tif (m_cachedMBeanNames.size() > 0) {\n-\t\t\t\t\t\t\t\tm_cachedMBeanNames.add(name);\n-\t\t\t\t\t\t\t}\n-\t\t\t\t\t\t}\n-\t\t\t\t\t\tfor (IMBeanServerChangeListener l : m_mbeanListeners) {\n-\t\t\t\t\t\t\tl.mbeanRegistered(name);\n-\t\t\t\t\t\t}\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING,\n-\t\t\t\t\t\t\t\t\"Could not retrieve MBean information for \" + name + '!', e); \/\/$NON-NLS-1$\n-\t\t\t\t\t}\n-\t\t\t\t} else if (notification.getType().equals(MBeanServerNotification.UNREGISTRATION_NOTIFICATION)) {\n-\t\t\t\t\tsynchronized (m_cachedInfos) {\n-\t\t\t\t\t\tm_cachedInfos.remove(name);\n-\t\t\t\t\t\tm_cachedMBeanNames.remove(name);\n-\t\t\t\t\t}\n-\t\t\t\t\tfor (IMBeanServerChangeListener l : m_mbeanListeners) {\n-\t\t\t\t\t\tl.mbeanUnregistered(name);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t};\n-\n-\tprivate final NotificationListener m_disconnectListener = new NotificationListener() {\n-\n-\t\t@Override\n-\t\tpublic void handleNotification(Notification notification, Object handback) {\n-\t\t\tif (notification != null && (JMXConnectionNotification.CLOSED.equals(notification.getType())\n-\t\t\t\t\t|| JMXConnectionNotification.FAILED.equals(notification.getType()))) {\n-\t\t\t\tclose();\n-\t\t\t\tif (m_onFailCallback != null) {\n-\t\t\t\t\tm_onFailCallback.run();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\n-\t};\n-\n-\tprivate final Object connectionStateLock = new Object();\n-\n-\t\/**\n-\t * Creates a new remote JMX connection to the specified host, using the supplied credentials. If\n-\t * password is null or empty, it will be ignored. Will attempt to set up a connection to the\n-\t * server immediately. The Constructor will fail if no connection could be established.\n-\t *\n-\t * @throws MalformedURLException\n-\t *\/\n-\tpublic RJMXConnection(IConnectionDescriptor connectionDescriptor, IServerDescriptor serverDescriptor,\n-\t\t\tRunnable onFailCallback) {\n-\t\tif (connectionDescriptor == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Connection descriptor must not be null!\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tif (serverDescriptor == null) {\n-\t\t\tthrow new IllegalArgumentException(\"Server descriptor must not be null!\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tm_onFailCallback = onFailCallback;\n-\t\tm_connectionDescriptor = connectionDescriptor;\n-\t\tm_serverDescriptor = serverDescriptor;\n-\t\tm_mbeanDataProvider = new MBeanMRIMetadataDB(this);\n-\t\taddMBeanServerChangeListener(m_mbeanDataProvider);\n-\t}\n-\n-\tpublic IServerDescriptor getServerDescriptor() {\n-\t\treturn m_serverDescriptor;\n-\t}\n-\n-\tpublic IConnectionDescriptor getConnectionDescriptor() {\n-\t\treturn m_connectionDescriptor;\n-\t}\n-\n-\t\/**\n-\t * Disconnects the connection from the RJMX server\n-\t *\/\n-\t@Override\n-\tpublic void close() {\n-\t\tsynchronized (connectionStateLock) {\n-\t\t\tif (isConnected()) {\n-\t\t\t\tMCMBeanServerConnection tmpServer = m_server;\n-\t\t\t\tm_server = null;\n-\t\t\t\ttryRemovingListener(tmpServer);\n-\t\t\t\ttmpServer.dispose();\n-\t\t\t\tclearCollections();\n-\t\t\t\tif (m_jmxc != null) {\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tm_jmxc.close();\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.INFO, \"Problem when closing connection.\", e); \/\/$NON-NLS-1$\n-\t\t\t\t\t}\n-\t\t\t\t\tm_jmxc = null;\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t\/**\n-\t * Sometimes we can fail to remove the unregister listeners from the MBeanConnection, causing\n-\t * JMX to keep a reference to this instance. To minimize impact if this happens, we clear all\n-\t * collections from data.\n-\t *\/\n-\tprivate void clearCollections() {\n-\t\tclearCache();\n-\t}\n-\n-\tprivate void tryRemovingListener(MCMBeanServerConnection tmpServer) {\n-\t\ttry {\n-\t\t\tif (tmpServer != null) {\n-\t\t\t\ttmpServer.removeNotificationListener(MBeanServerDelegate.DELEGATE_NAME, m_registrationListener);\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING,\n-\t\t\t\t\t\"Failed to remove unregistration listener! Lost connection?\", e); \/\/$NON-NLS-1$\n-\t\t}\n-\t}\n-\n-\t\/**\n-\t * Returns whether the underlying connector is connected\n-\t *\n-\t * @return true if the underlying connector is still connected\n-\t *\/\n-\tpublic boolean isConnected() {\n-\t\treturn m_server != null;\n-\t}\n-\n-\t@Override\n-\tpublic Set<ObjectName> getMBeanNames() throws IOException {\n-\t\tsynchronized (m_cachedInfos) {\n-\t\t\tif (m_cachedMBeanNames.size() == 0) {\n-\t\t\t\tMBeanServerConnection server = ensureConnected();\n-\t\t\t\tm_cachedMBeanNames = server.queryNames(null, null);\n-\t\t\t}\n-\t\t\treturn new HashSet<>(m_cachedMBeanNames);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic HashMap<ObjectName, MBeanInfo> getMBeanInfos() throws IOException {\n-\t\tsynchronized (m_cachedInfos) {\n-\t\t\tinitializeMBeanInfos();\n-\t\t\treturn new HashMap<>(m_cachedInfos);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic MBeanInfo getMBeanInfo(ObjectName mbean)\n-\t\t\tthrows InstanceNotFoundException, IntrospectionException, ReflectionException, IOException {\n-\t\tsynchronized (m_cachedInfos) {\n-\t\t\tMBeanInfo mbeanInfo = m_cachedInfos.get(mbean);\n-\t\t\tif (mbeanInfo == null) {\n-\t\t\t\tMBeanServerConnection server = ensureConnected();\n-\t\t\t\tmbeanInfo = server.getMBeanInfo(mbean);\n-\t\t\t\tif (mbeanInfo != null) {\n-\t\t\t\t\tm_cachedInfos.put(mbean, mbeanInfo);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn mbeanInfo;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic Object getAttributeValue(MRI attribute) throws AttributeNotFoundException, MBeanException, IOException,\n-\t\t\tInstanceNotFoundException, ReflectionException {\n-\t\ttry {\n-\t\t\tMBeanServerConnection server = ensureConnected();\n-\t\t\treturn AttributeValueToolkit.getAttribute(server, attribute);\n-\t\t} catch (JMRuntimeException e) {\n-\t\t\tthrow new MBeanException(e, e.getMessage());\n-\t\t}\n-\t}\n-\n-\tpublic boolean connect() throws ConnectionException {\n-\t\tJVMDescriptor jvmInfo = getServerDescriptor().getJvmInfo();\n-\t\tif (jvmInfo != null && jvmInfo.getJavaVersion() != null\n-\t\t\t\t&& !new JavaVersion(jvmInfo.getJavaVersion()).isGreaterOrEqualThan(JavaVersionSupport.JDK_6)) {\n-\t\t\tthrow new ConnectionException(\"Too low JDK Version. JDK 1.6 or higher is supported.\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tsynchronized (connectionStateLock) {\n-\t\t\tif (isConnected()) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t\tJMXServiceURL url;\n-\t\t\ttry {\n-\t\t\t\turl = m_connectionDescriptor.createJMXServiceURL();\n-\t\t\t} catch (IOException e1) {\n-\t\t\t\tthrow new WrappedConnectionException(m_serverDescriptor.getDisplayName(), null, e1);\n-\t\t\t}\n-\n-\t\t\ttry {\n-\t\t\t\t\/\/ Use same convention as Sun. localhost:0 means \"VM, monitor thyself!\"\n-\t\t\t\tString hostName = ConnectionToolkit.getHostName(url);\n-\t\t\t\tif (hostName != null && (hostName.equals(\"localhost\")) \/\/$NON-NLS-1$\n-\t\t\t\t\t\t&& ConnectionToolkit.getPort(url) == 0) {\n-\t\t\t\t\tm_server = new MCMBeanServerConnection(ManagementFactory.getPlatformMBeanServer());\n-\t\t\t\t} else {\n-\t\t\t\t\testablishConnection(url, m_connectionDescriptor.getEnvironment());\n-\t\t\t\t}\n-\t\t\t\ttryToAddMBeanNotificationListener();\n-\t\t\t\tm_remoteStartTime = fetchServerStartTime();\n-\t\t\t\treturn true;\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tm_server = null;\n-\t\t\t\tthrow new WrappedConnectionException(m_serverDescriptor.getDisplayName(), url, e);\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic long getApproximateServerTime(long localTime) {\n-\t\tlong startTime = System.currentTimeMillis();\n-\t\tif ((startTime - m_lastRecalibration) > VALUE_RECALIBRATION_INTERVAL\n-\t\t\t\t&& m_remoteStartTime != REMOTE_START_TIME_UNDEFINED) {\n-\t\t\ttry {\n-\t\t\t\t\/*\n-\t\t\t\t * FIXME: JMC-4270 - Server time approximation is not reliable. Since JDK-6523160,\n-\t\t\t\t * getUptime can no longer be used to derive the current server time. Find some\n-\t\t\t\t * other way to do this.\n-\t\t\t\t *\/\n-\t\t\t\tlong uptime = ConnectionToolkit.getRuntimeBean(ensureConnected()).getUptime();\n-\t\t\t\tlong returnTime = System.currentTimeMillis();\n-\t\t\t\tlong localTimeEstimate = (startTime + returnTime) \/ 2;\n-\t\t\t\tm_serverOffset = m_remoteStartTime + uptime - localTimeEstimate;\n-\t\t\t\tm_lastRecalibration = returnTime;\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE, \"Could not recalibrate server offset\", e); \/\/$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t\treturn localTime + m_serverOffset;\n-\t}\n-\n-\tpublic void clearCache() {\n-\t\tsynchronized (m_cachedInfos) {\n-\t\t\tm_cachedInfos.clear();\n-\t\t\tm_cachedMBeanNames.clear();\n-\t\t\tm_hasInitializedAllMBeans = false;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn \"RJMX Connection \" + m_connectionId + \": \" + m_serverDescriptor.getDisplayName(); \/\/$NON-NLS-1$\n-\t}\n-\n-\t@Override\n-\tpublic void removeMBeanServerChangeListener(IMBeanServerChangeListener listener) {\n-\t\tm_mbeanListeners.remove(listener);\n-\t}\n-\n-\t@Override\n-\tpublic void addMBeanServerChangeListener(IMBeanServerChangeListener listener) {\n-\t\tm_mbeanListeners.add(listener);\n-\t}\n-\n-\t@Override\n-\tpublic Map<MRI, Map<String, Object>> getMBeanMetadata(ObjectName mbean) {\n-\t\treturn m_mbeanDataProvider.getMBeanData(mbean);\n-\t}\n-\n-\t\/**\n-\t * Returns the IOperations available for the specified MBean.\n-\t *\n-\t * @param mbean\n-\t *            the MBean for which to return the information.\n-\t * @return the operations that can be invoked on this mbean.\n-\t * @throws Exception\n-\t *             if the connection failed or some other problem occurred when trying create\n-\t *             operations.\n-\t *\/\n-\tpublic Collection<IOperation> getOperations(ObjectName mbean) throws Exception {\n-\t\tMBeanServerConnection connection = ensureConnected();\n-\t\treturn MBeanOperationWrapper.createOperations(connection, mbean,\n-\t\t\t\tconnection.getMBeanInfo(mbean).getOperations());\n-\t}\n-\n-\tIMRIService getMRIService() {\n-\t\treturn m_mbeanDataProvider;\n-\t}\n-\n-\t\/**\n-\t * Returns the MBeanServerConnection. Yes, this breaks abstraction a bit, and should only be\n-\t * used by the MBeanBrowser. Everybody else should be using subscriptions anyway.\n-\t *\n-\t * @return the MBeanServerConnection currently in use by this connection. May be null if none is\n-\t *         currently in use.\n-\t *\/\n-\tMBeanServerConnection getMBeanServer() {\n-\t\treturn m_server;\n-\t}\n-\n-\t\/**\n-\t * Returns the bean information for the MBeans matching the domain and query.\n-\t *\n-\t * @param domain\n-\t *            the domain for which to retrieve the information.\n-\t * @param query\n-\t *            a query to filter for which MBeans to retrieve the information.\n-\t * @return a map with the ObjectNames and their associated MBeanInfos.\n-\t * @throws IOException\n-\t *             if the connection failed or some other IO related problem occurred.\n-\t * @throws MalformedObjectNameException\n-\t *             if a particularly malign (malformatted) domain was specified.\n-\t *\/\n-\tprivate HashMap<ObjectName, MBeanInfo> getMBeanInfos(String domain, QueryExp query)\n-\t\t\tthrows MalformedObjectNameException, IOException {\n-\t\tMBeanServerConnection server = ensureConnected();\n-\t\tObjectName objectName = null;\n-\t\tint skippedMBeanCounter = 0;\n-\t\tif (domain != null) {\n-\t\t\tobjectName = new ObjectName(domain + \":*\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tSet<ObjectName> names = server.queryNames(objectName, query);\n-\t\tHashMap<ObjectName, MBeanInfo> infos = new HashMap<>(names.size());\n-\n-\t\tIterator<ObjectName> iter = names.iterator();\n-\t\twhile (iter.hasNext()) {\n-\t\t\tObjectName name = iter.next();\n-\t\t\ttry {\n-\t\t\t\tinfos.put(name, getMBeanInfo(name));\n-\t\t\t} catch (NullPointerException e) {\n-\t\t\t\t\/*\n-\t\t\t\t * Skip problematic MBeans when connecting. Workaround implemented so that we can\n-\t\t\t\t * connect to JBoss 4.2.3.\n-\t\t\t\t *\/\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Skipping \" + name.toString() \/\/$NON-NLS-1$\n-\t\t\t\t\t\t+ \". Could not retrieve the MBean info for the MBean. Set log level to fine for stacktrace!\"); \/\/$NON-NLS-1$\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.FINE, e.getMessage(), e);\n-\t\t\t\tskippedMBeanCounter++;\n-\t\t\t} catch (UnmarshalException e) {\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Skipping \" \/\/$NON-NLS-1$\n-\t\t\t\t\t\t+ name.toString()\n-\t\t\t\t\t\t+ \". Could not retrieve the MBean info due to marshalling problems. Set log level to fine for stacktrace!\"); \/\/$NON-NLS-1$\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.FINE, e.getMessage(), e);\n-\t\t\t\tskippedMBeanCounter++;\n-\t\t\t} catch (InstanceNotFoundException e) {\n-\t\t\t\t\/*\n-\t\t\t\t * We may end up here if the MBean was unregistered between the call to\n-\t\t\t\t * getMBeanNames and getMBeanInfo(). Should not be very common though.\n-\t\t\t\t *\/\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Skipping \" + name.toString() \/\/$NON-NLS-1$\n-\t\t\t\t\t\t+ \". It could not be found and may have been unregistered very recently. Set log level to fine to fine for stacktrace!\"); \/\/$NON-NLS-1$\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.FINE, e.getMessage(), e);\n-\t\t\t} catch (IntrospectionException e) {\n-\t\t\t\tIOException exception = new IOException(\"Error accessing the bean.\"); \/\/$NON-NLS-1$\n-\t\t\t\texception.initCause(e);\n-\t\t\t\tthrow exception;\n-\t\t\t} catch (ReflectionException e) {\n-\t\t\t\tIOException exception = new IOException(\"Error accessing the bean.\"); \/\/$NON-NLS-1$\n-\t\t\t\texception.initCause(e);\n-\t\t\t\tthrow exception;\n-\t\t\t}\n-\t\t}\n-\t\tif (skippedMBeanCounter > 0) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING,\n-\t\t\t\t\t\"Skipped \" + skippedMBeanCounter + \" MBeans because of marshalling related issues.\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t}\n-\t\treturn infos;\n-\t}\n-\n-\t\/**\n-\t * Tries to add a dedicated notification listener that removes unloaded MBeans.\n-\t *\/\n-\tprivate void tryToAddMBeanNotificationListener() {\n-\t\ttry {\n-\t\t\tensureConnected().addNotificationListener(MBeanServerDelegate.DELEGATE_NAME, m_registrationListener, null,\n-\t\t\t\t\tnull);\n-\t\t} catch (InstanceNotFoundException e) {\n-\t\t\t\/\/ Will typically not happen.\n-\t\t} catch (IOException e) {\n-\t\t\t\/\/ Will typically not happen.\n-\t\t}\n-\t}\n-\n-\t\/**\n-\t * Tries to populate the MBean information cache if it is empty.\n-\t *\n-\t * @throws IOException\n-\t *             if the connection failed or some other IO related problem occurred.\n-\t *\/\n-\tprivate void initializeMBeanInfos() throws IOException {\n-\t\tsynchronized (m_cachedInfos) {\n-\t\t\tif (!m_hasInitializedAllMBeans) {\n-\t\t\t\ttry {\n-\t\t\t\t\tgetMBeanInfos(null, null);\n-\t\t\t\t\tm_hasInitializedAllMBeans = true;\n-\t\t\t\t} catch (MalformedObjectNameException e) {\n-\t\t\t\t\tassert (false); \/\/ Should not be able to get here!\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate long fetchServerStartTime() throws IOException {\n-\t\ttry {\n-\t\t\treturn ConnectionToolkit.getRuntimeBean(ensureConnected()).getStartTime();\n-\t\t} catch (IllegalArgumentException e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING,\n-\t\t\t\t\t\"Could not find the Runtime MBean. You are probably connecting to a custom MBean server. Functionality will be limited.\", \/\/$NON-NLS-1$\n-\t\t\t\t\te);\n-\t\t\treturn REMOTE_START_TIME_UNDEFINED;\n-\t\t}\n-\t}\n-\n-\t\/**\n-\t * Attempts to establish a connection. If the connection fails due to symptoms indicating the\n-\t * registry using SSL, another attempt to connect will be performed, with the required additions\n-\t * to the env.\n-\t *\/\n-\tprivate void establishConnection(JMXServiceURL serviceURL, Map<String, Object> env) throws IOException {\n-\t\ttry {\n-\t\t\tconnectJmxConnector(serviceURL, env);\n-\t\t} catch (IOException exception) {\n-\t\t\ttry {\n-\t\t\t\tif (env.get(KEY_SOCKET_FACTORY) instanceof SslRMIClientSocketFactory) {\n-\t\t\t\t\tenv.remove(KEY_SOCKET_FACTORY);\n-\t\t\t\t} else {\n-\t\t\t\t\tenv.put(KEY_SOCKET_FACTORY, new SslRMIClientSocketFactory());\n-\t\t\t\t}\n-\t\t\t\tconnectJmxConnector(serviceURL, env);\n-\t\t\t} catch (IOException ioe) {\n-\t\t\t\t\/\/ So we failed even when changing to secure sockets. Original exception was probably spot on...\n-\t\t\t\tthrow exception;\n-\t\t\t}\n-\t\t}\n-\t\tm_server = new MCMBeanServerConnection(m_jmxc.getMBeanServerConnection());\n-\t}\n-\n-\tprivate void connectJmxConnector(JMXServiceURL serviceURL, Map<String, Object> env) throws IOException {\n-\t\tm_jmxc = JMXConnectorFactory.newJMXConnector(serviceURL, env);\n-\t\tm_jmxc.addConnectionNotificationListener(m_disconnectListener, null, null);\n-\t\t\/\/ This is a hack to provide SSL properties to the RMI SSL server socket factory using system properties\n-\t\tJMXRMISystemPropertiesProvider.setup();\n-\t\t\/\/ According to javadocs, has to pass env here too (which mSA RMI took literally).\n-\t\tm_jmxc.connect(env);\n-\t\tJMXRMISystemPropertiesProvider.clearJMXRMISystemProperties();\n-\t}\n-\n-\t\/**\n-\t * Ok, so this method may not be very useful, from a strict synchronization perspective, but at\n-\t * least it is now done in ONE place.\n-\t *\n-\t * @return a MBeanServerConnection, if connected (or at least non-null).\n-\t * @throws IOException\n-\t *             if not connected.\n-\t *\/\n-\tprivate MBeanServerConnection ensureConnected() throws IOException {\n-\t\tMBeanServerConnection server = m_server;\n-\t\tif (server == null) {\n-\t\t\tthrow new InvoluntaryDisconnectException(\"Server is disconnected!\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\treturn server;\n-\t}\n-\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/RJMXConnection.java","additions":0,"deletions":595,"binary":false,"changes":595,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n@@ -47,1 +48,0 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/RJMXSingleton.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,5 +40,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.IConnectionListener;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n@@ -46,0 +41,8 @@\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionListener;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.internal.DefaultConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.internal.RJMXConnection;\n+import org.openjdk.jmc.rjmx.common.internal.ServerDescriptor;\n@@ -76,1 +79,3 @@\n-\t\tconnection = new RJMXConnection(descriptor, server, connectionListener);\n+\t\tconnection = new RJMXConnection(descriptor, server, connectionListener,\n+\t\t\t\tSyntheticRepositoryInitializer.initializeAttributeEntries(),\n+\t\t\t\tSyntheticRepositoryInitializer.initializeNotificationEntries());\n@@ -117,1 +122,2 @@\n-\t\t\tnewConnectionHandle = new DefaultConnectionHandle(connection, usage, listeners);\n+\t\t\tnewConnectionHandle = new DefaultConnectionHandle(connection, usage, listeners,\n+\t\t\t\t\tServiceFactoryInitializer.initializeFromExtensions());\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/ServerHandle.java","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Red Hat Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.internal;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.logging.Level;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IConfigurationElement;\n+import org.eclipse.core.runtime.IExtensionRegistry;\n+import org.eclipse.core.runtime.Platform;\n+import org.openjdk.jmc.rjmx.RJMXPlugin;\n+import org.openjdk.jmc.rjmx.common.services.IServiceFactory;\n+import org.openjdk.jmc.rjmx.common.services.internal.ServiceEntry;\n+\n+public class ServiceFactoryInitializer {\n+\tprivate final static String EXTENSION_POINT = \"org.openjdk.jmc.rjmx.service\";\n+\tprivate final static String EXTENSION_ELEMENT_SERVICE = \"service\";\n+\tprivate final static String EXTENSION_ATTRIBUTE_FACTORY = \"factory\";\n+\tprivate final static String EXTENSION_ATTRIBUTE_NAME = \"name\";\n+\tprivate final static String EXTENSION_ATTRIBUTE_DESCRIPTION = \"description\";\n+\n+\tpublic static List<ServiceEntry<?>> initializeFromExtensions() {\n+\t\tList<ServiceEntry<?>> serviceEntries = new ArrayList<>();\n+\t\tIExtensionRegistry registry = Platform.getExtensionRegistry();\n+\t\tfor (IConfigurationElement config : registry.getConfigurationElementsFor(EXTENSION_POINT)) {\n+\t\t\tif (config.getName().equals(EXTENSION_ELEMENT_SERVICE)) {\n+\t\t\t\ttry {\n+\t\t\t\t\tIServiceFactory<?> factory = (IServiceFactory<?>) config\n+\t\t\t\t\t\t\t.createExecutableExtension(EXTENSION_ATTRIBUTE_FACTORY);\n+\t\t\t\t\tserviceEntries.add(createServiceEntry(factory, config));\n+\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE, \"Could not instantiate service factory!\", e);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn serviceEntries;\n+\t}\n+\n+\tprivate static <T> ServiceEntry<T> createServiceEntry(IServiceFactory<T> factory, IConfigurationElement config) {\n+\t\tString name = config.getAttribute(EXTENSION_ATTRIBUTE_NAME);\n+\t\tString description = config.getAttribute(EXTENSION_ATTRIBUTE_DESCRIPTION);\n+\t\treturn new ServiceEntry<>(factory, name, description);\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/ServiceFactoryInitializer.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -1,274 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.internal;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.logging.Level;\n-\n-import javax.management.Attribute;\n-import javax.management.AttributeList;\n-import javax.management.AttributeNotFoundException;\n-import javax.management.InstanceNotFoundException;\n-import javax.management.IntrospectionException;\n-import javax.management.InvalidAttributeValueException;\n-import javax.management.MBeanException;\n-import javax.management.MBeanInfo;\n-import javax.management.MBeanServer;\n-import javax.management.MBeanServerConnection;\n-import javax.management.MBeanServerFactory;\n-import javax.management.ObjectInstance;\n-import javax.management.ObjectName;\n-import javax.management.QueryExp;\n-import javax.management.ReflectionException;\n-\n-import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.core.runtime.IConfigurationElement;\n-import org.eclipse.core.runtime.IExtension;\n-import org.eclipse.core.runtime.IExtensionPoint;\n-import org.eclipse.core.runtime.IExtensionRegistry;\n-import org.eclipse.core.runtime.Platform;\n-\n-import org.openjdk.jmc.rjmx.IPropertySyntheticAttribute;\n-import org.openjdk.jmc.rjmx.ISyntheticAttribute;\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.internal.AttributeValueToolkit;\n-\n-\/**\n- * Contains all the synthetic attributes.\n- *\/\n-public final class SyntheticAttributeRepository {\n-\n-\tprivate final Map<ObjectName, SyntheticAttributeMBeanEntry> mbeans = new HashMap<>();\n-\tprivate final MBeanServer server = MBeanServerFactory.newMBeanServer();\n-\tprivate final MBeanServerConnection compoundServer;\n-\n-\tpublic SyntheticAttributeRepository(MBeanServerConnection compoundServer) {\n-\t\tthis.compoundServer = compoundServer;\n-\t}\n-\n-\tvoid initializeFromExtensions() {\n-\t\tIExtensionRegistry er = Platform.getExtensionRegistry();\n-\t\tIExtensionPoint ep = er.getExtensionPoint(\"org.openjdk.jmc.rjmx.syntheticattribute\"); \/\/$NON-NLS-1$\n-\t\tIExtension[] extensions = ep.getExtensions();\n-\t\tList<SyntheticAttributeEntry> attributeCandidates = new ArrayList<>();\n-\t\tfor (IExtension extension : extensions) {\n-\t\t\tIConfigurationElement[] configs = extension.getConfigurationElements();\n-\t\t\tfor (IConfigurationElement config : configs) {\n-\t\t\t\tif (config.getName().equals(\"syntheticAttribute\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\tISyntheticAttribute attribute = (ISyntheticAttribute) config.createExecutableExtension(\"class\"); \/\/$NON-NLS-1$\n-\t\t\t\t\t\tSyntheticAttributeEntry candidate = createEntry(attribute, config);\n-\t\t\t\t\t\tattributeCandidates.add(candidate);\n-\t\t\t\t\t} catch (CoreException e) {\n-\t\t\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE,\n-\t\t\t\t\t\t\t\t\"Could not instantiate synthetic attribute!\", e); \/\/$NON-NLS-1$\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tboolean hasResolved = true;\n-\t\twhile (!attributeCandidates.isEmpty() && hasResolved) {\n-\t\t\thasResolved = false;\n-\t\t\tIterator<SyntheticAttributeEntry> iterator = attributeCandidates.iterator();\n-\t\t\twhile (iterator.hasNext()) {\n-\t\t\t\tSyntheticAttributeEntry candidate = iterator.next();\n-\t\t\t\tif (candidate.getAttribute().hasResolvedDependencies(compoundServer)) {\n-\t\t\t\t\thasResolved = true;\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t\tcandidate.getAttribute().init(compoundServer);\n-\t\t\t\t\tregisterEntry(candidate);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate void registerEntry(SyntheticAttributeEntry attributeEntry) {\n-\t\tObjectName objectName = attributeEntry.getAttributeDescriptor().getObjectName();\n-\t\tSyntheticAttributeMBeanEntry entry = mbeans.get(objectName);\n-\t\tif (entry == null) {\n-\t\t\tentry = new SyntheticAttributeMBeanEntry(compoundServer);\n-\t\t\ttry {\n-\t\t\t\tserver.registerMBean(entry, objectName);\n-\t\t\t\tmbeans.put(objectName, entry);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE,\n-\t\t\t\t\t\t\"Could not register MBean for synthetic attribute!\", e); \/\/$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t\tentry.addSyntheticAttribute(attributeEntry);\n-\t}\n-\n-\tprivate SyntheticAttributeEntry createEntry(ISyntheticAttribute attribute, IConfigurationElement config) {\n-\t\tString attributeName = config.getAttribute(\"attributeName\"); \/\/$NON-NLS-1$\n-\t\tString description = config.getAttribute(\"description\"); \/\/$NON-NLS-1$\n-\t\tString type = config.getAttribute(\"type\"); \/\/$NON-NLS-1$\n-\t\tboolean readable = Boolean.valueOf(config.getAttribute(\"readable\")); \/\/$NON-NLS-1$\n-\t\tboolean writeable = Boolean.valueOf(config.getAttribute(\"writeable\")); \/\/$NON-NLS-1$\n-\t\tboolean isIs = Boolean.valueOf(config.getAttribute(\"isIs\")); \/\/$NON-NLS-1$\n-\t\tif (attribute instanceof IPropertySyntheticAttribute) {\n-\t\t\tMap<String, Object> properties = parseProperties(config.getChildren(\"properties\")); \/\/$NON-NLS-1$\n-\t\t\t((IPropertySyntheticAttribute) attribute).setProperties(properties);\n-\t\t}\n-\t\tMRI descriptor = MRI.createFromQualifiedName(attributeName);\n-\t\treturn new SyntheticAttributeEntry(attribute, descriptor, description, type, readable, writeable, isIs);\n-\t}\n-\n-\tprivate Map<String, Object> parseProperties(IConfigurationElement[] children) {\n-\t\tif (children == null || children.length == 0) {\n-\t\t\treturn Collections.emptyMap();\n-\t\t}\n-\t\tMap<String, Object> properties = new HashMap<>();\n-\t\tfor (IConfigurationElement child : children[0].getChildren()) {\n-\t\t\tparseProperty(child, properties);\n-\t\t}\n-\t\treturn properties;\n-\t}\n-\n-\tprivate void parseProperty(IConfigurationElement child, Map<String, Object> properties) {\n-\t\tString key = child.getAttribute(\"key\"); \/\/$NON-NLS-1$\n-\t\ttry {\n-\t\t\tif (\"string\".equals(child.getName())) { \/\/$NON-NLS-1$\n-\t\t\t\tproperties.put(key, child.getAttribute(\"value\")); \/\/$NON-NLS-1$\n-\t\t\t} else if (\"boolean\".equals(child.getName())) { \/\/$NON-NLS-1$\n-\t\t\t\tproperties.put(key, Boolean.valueOf(child.getAttribute(\"value\"))); \/\/$NON-NLS-1$\n-\t\t\t} else if (\"integer\".equals(child.getName())) { \/\/$NON-NLS-1$\n-\t\t\t\tproperties.put(key, Integer.parseInt(child.getAttribute(\"value\"))); \/\/$NON-NLS-1$\n-\t\t\t} else if (\"float\".equals(child.getName())) { \/\/$NON-NLS-1$\n-\t\t\t\tproperties.put(key, Float.parseFloat(child.getAttribute(\"value\"))); \/\/$NON-NLS-1$\n-\t\t\t}\n-\t\t} catch (NumberFormatException e) {\n-\t\t\tproperties.put(key, e.getMessage());\n-\t\t}\n-\t}\n-\n-\tpublic String[] getDomains() {\n-\t\treturn server.getDomains();\n-\t}\n-\n-\tpublic ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFoundException {\n-\t\treturn server.getObjectInstance(name);\n-\t}\n-\n-\tpublic Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query) {\n-\t\treturn server.queryMBeans(name, query);\n-\t}\n-\n-\tpublic Set<ObjectName> queryNames(ObjectName name, QueryExp query) {\n-\t\treturn server.queryNames(name, query);\n-\t}\n-\n-\tpublic boolean isRegistered(ObjectName name) {\n-\t\treturn server.isRegistered(name);\n-\t}\n-\n-\tpublic Integer getMBeanCount() {\n-\t\treturn server.getMBeanCount();\n-\t}\n-\n-\tpublic boolean hasAttribute(ObjectName name, String dataPath) {\n-\t\tSyntheticAttributeMBeanEntry entry = mbeans.get(name);\n-\t\tif (entry == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\treturn entry.hasDataPath(dataPath);\n-\t}\n-\n-\tpublic MBeanInfo getMBeanInfo(ObjectName name)\n-\t\t\tthrows IntrospectionException, InstanceNotFoundException, ReflectionException {\n-\t\treturn server.getMBeanInfo(name);\n-\t}\n-\n-\tpublic Object getAttribute(ObjectName name, String attribute) throws AttributeNotFoundException,\n-\t\t\tInstanceNotFoundException, MBeanException, ReflectionException, IOException {\n-\t\treturn AttributeValueToolkit.getAttribute(server, name, attribute);\n-\t}\n-\n-\tpublic AttributeList getExistingAttributes(ObjectName name, String[] attributes)\n-\t\t\tthrows InstanceNotFoundException, ReflectionException, IOException {\n-\t\tList<String> syntheticAttributes = new ArrayList<>();\n-\t\tfor (String attribute : attributes) {\n-\t\t\tif (hasAttribute(name, attribute)) {\n-\t\t\t\tsyntheticAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tif (syntheticAttributes.size() > 0) {\n-\t\t\treturn AttributeValueToolkit.getAttributes(server, name, syntheticAttributes);\n-\t\t}\n-\t\treturn new AttributeList();\n-\t}\n-\n-\tpublic void setAttribute(ObjectName name, Attribute attribute)\n-\t\t\tthrows InstanceNotFoundException, InvalidAttributeValueException, AttributeNotFoundException,\n-\t\t\tReflectionException, MBeanException, IOException {\n-\t\tserver.setAttribute(name, attribute);\n-\t}\n-\n-\tpublic AttributeList setExistingAttributes(ObjectName name, AttributeList attributes)\n-\t\t\tthrows InstanceNotFoundException, ReflectionException, IOException {\n-\t\tAttributeList existingAttributes = new AttributeList();\n-\t\tfor (Object obj : attributes) {\n-\t\t\tAttribute attribute = (Attribute) obj;\n-\t\t\tif (hasAttribute(name, attribute.getName())) {\n-\t\t\t\texistingAttributes.add(attribute);\n-\t\t\t}\n-\t\t}\n-\t\tif (existingAttributes.size() > 0) {\n-\t\t\treturn server.setAttributes(name, existingAttributes);\n-\t\t}\n-\t\treturn new AttributeList();\n-\t}\n-\n-\tpublic boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException {\n-\t\treturn server.isInstanceOf(name, className);\n-\t}\n-\n-\tpublic void dispose() {\n-\t\tfor (SyntheticAttributeMBeanEntry mbeanEntry : mbeans.values()) {\n-\t\t\tfor (SyntheticAttributeEntry entry : mbeanEntry.getSyntheticAttributes()) {\n-\t\t\t\ttry {\n-\t\t\t\t\tentry.getAttribute().stop();\n-\t\t\t\t} catch (Throwable t) {\n-\t\t\t\t\t\/\/ silently ignore\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/SyntheticAttributeRepository.java","additions":0,"deletions":274,"binary":false,"changes":274,"status":"deleted"},{"patch":"@@ -1,247 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.internal;\n-\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.Set;\n-import java.util.logging.Level;\n-\n-import javax.management.InstanceNotFoundException;\n-import javax.management.IntrospectionException;\n-import javax.management.ListenerNotFoundException;\n-import javax.management.MBeanInfo;\n-import javax.management.MBeanServer;\n-import javax.management.MBeanServerConnection;\n-import javax.management.MBeanServerFactory;\n-import javax.management.NotificationFilter;\n-import javax.management.NotificationListener;\n-import javax.management.ObjectInstance;\n-import javax.management.ObjectName;\n-import javax.management.QueryExp;\n-import javax.management.ReflectionException;\n-\n-import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.core.runtime.IConfigurationElement;\n-import org.eclipse.core.runtime.IExtension;\n-import org.eclipse.core.runtime.IExtensionPoint;\n-import org.eclipse.core.runtime.IExtensionRegistry;\n-import org.eclipse.core.runtime.Platform;\n-\n-import org.openjdk.jmc.rjmx.ISyntheticNotification;\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-\n-public class SyntheticNotificationRepository {\n-\tprivate final Map<ObjectName, Set<SyntheticNotificationEntry>> mbeans = new HashMap<>();\n-\tprivate final MBeanServer server = MBeanServerFactory.newMBeanServer();\n-\tprivate final MBeanServerConnection compoundServer;\n-\n-\tpublic SyntheticNotificationRepository(MBeanServerConnection compoundServer) {\n-\t\tthis.compoundServer = compoundServer;\n-\t}\n-\n-\tpublic String[] getDomains() {\n-\t\treturn server.getDomains();\n-\t}\n-\n-\tpublic ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFoundException {\n-\t\treturn server.getObjectInstance(name);\n-\t}\n-\n-\tpublic Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query) {\n-\t\treturn server.queryMBeans(name, query);\n-\t}\n-\n-\tpublic Set<ObjectName> queryNames(ObjectName name, QueryExp query) {\n-\t\treturn server.queryNames(name, query);\n-\t}\n-\n-\tpublic boolean isRegistered(ObjectName name) {\n-\t\treturn server.isRegistered(name);\n-\t}\n-\n-\tpublic Integer getMBeanCount() {\n-\t\treturn server.getMBeanCount();\n-\t}\n-\n-\tpublic boolean hasNotification(ObjectName name) {\n-\t\tSet<SyntheticNotificationEntry> entries = mbeans.get(name);\n-\t\treturn entries != null;\n-\t}\n-\n-\tpublic MBeanInfo getMBeanInfo(ObjectName name)\n-\t\t\tthrows IntrospectionException, InstanceNotFoundException, ReflectionException {\n-\t\treturn server.getMBeanInfo(name);\n-\t}\n-\n-\tpublic void addNotificationListener(\n-\t\tObjectName name, ObjectName listener, NotificationFilter filter, Object handback)\n-\t\t\tthrows InstanceNotFoundException, IOException {\n-\t\tserver.addNotificationListener(name, listener, filter, handback);\n-\t}\n-\n-\tpublic void addNotificationListener(\n-\t\tObjectName name, NotificationListener listener, NotificationFilter filter, Object handback)\n-\t\t\tthrows InstanceNotFoundException {\n-\t\tserver.addNotificationListener(name, listener, filter, handback);\n-\t}\n-\n-\tpublic void removeNotificationListener(ObjectName name, ObjectName listener)\n-\t\t\tthrows InstanceNotFoundException, ListenerNotFoundException {\n-\t\tserver.removeNotificationListener(name, listener);\n-\t}\n-\n-\tpublic void removeNotificationListener(\n-\t\tObjectName name, ObjectName listener, NotificationFilter filter, Object handback)\n-\t\t\tthrows InstanceNotFoundException, ListenerNotFoundException {\n-\t\tserver.removeNotificationListener(name, listener, filter, handback);\n-\t}\n-\n-\tpublic void removeNotificationListener(ObjectName name, NotificationListener listener)\n-\t\t\tthrows InstanceNotFoundException, ListenerNotFoundException {\n-\t\tserver.removeNotificationListener(name, listener);\n-\t}\n-\n-\tpublic void removeNotificationListener(\n-\t\tObjectName name, NotificationListener listener, NotificationFilter filter, Object handback)\n-\t\t\tthrows InstanceNotFoundException, ListenerNotFoundException {\n-\t\tserver.removeNotificationListener(name, listener, filter, handback);\n-\t}\n-\n-\tvoid initializeFromExtensions() {\n-\t\tIExtensionRegistry er = Platform.getExtensionRegistry();\n-\t\tIExtensionPoint ep = er.getExtensionPoint(\"org.openjdk.jmc.rjmx.syntheticnotification\"); \/\/$NON-NLS-1$\n-\t\tIExtension[] extensions = ep.getExtensions();\n-\t\tList<SyntheticNotificationEntry> notificationCandidates = new ArrayList<>();\n-\t\tfor (IExtension extension : extensions) {\n-\t\t\tIConfigurationElement[] configs = extension.getConfigurationElements();\n-\t\t\tfor (IConfigurationElement config : configs) {\n-\t\t\t\tif (config.getName().equals(\"syntheticNotification\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\tSyntheticNotificationEntry candidate = createEntry(config);\n-\t\t\t\t\tif (candidate != null) {\n-\t\t\t\t\t\tnotificationCandidates.add(candidate);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tboolean hasResolved = true;\n-\t\twhile (!notificationCandidates.isEmpty() && hasResolved) {\n-\t\t\thasResolved = false;\n-\t\t\tIterator<SyntheticNotificationEntry> iterator = notificationCandidates.iterator();\n-\t\t\twhile (iterator.hasNext()) {\n-\t\t\t\tSyntheticNotificationEntry candidate = iterator.next();\n-\t\t\t\tif (candidate.getNotification().hasResolvedDependencies(compoundServer)) {\n-\t\t\t\t\thasResolved = true;\n-\t\t\t\t\titerator.remove();\n-\t\t\t\t\tregisterEntry(candidate);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\tregisterMBeans();\n-\t}\n-\n-\tprivate void registerMBeans() {\n-\t\tfor (Entry<ObjectName, Set<SyntheticNotificationEntry>> notificationEntry : mbeans.entrySet()) {\n-\t\t\tObjectName objectName = notificationEntry.getKey();\n-\t\t\ttry {\n-\t\t\t\tSyntheticNotificationMBean mbean = createMBean(objectName);\n-\t\t\t\tfor (SyntheticNotificationEntry entry : notificationEntry.getValue()) {\n-\t\t\t\t\tentry.getNotification().init(mbean);\n-\t\t\t\t\tentry.getNotification().init(compoundServer, entry.getNotificationDescriptor().getDataPath(),\n-\t\t\t\t\t\t\tentry.getMessage());\n-\t\t\t\t}\n-\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE,\n-\t\t\t\t\t\t\"Failed to register synthetic notification mbean \" + objectName.toString(), e); \/\/$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate SyntheticNotificationMBean createMBean(ObjectName name) throws Exception {\n-\t\tSet<SyntheticNotificationEntry> entries = mbeans.get(name);\n-\t\tSyntheticNotificationMBean mbean = new SyntheticNotificationMBean(\n-\t\t\t\tentries.toArray(new SyntheticNotificationEntry[entries.size()]));\n-\t\tserver.registerMBean(mbean, name);\n-\t\treturn mbean;\n-\t}\n-\n-\tprivate void registerEntry(SyntheticNotificationEntry entry) {\n-\t\tSet<SyntheticNotificationEntry> notificationEntries = mbeans\n-\t\t\t\t.get(entry.getNotificationDescriptor().getObjectName());\n-\t\tif (notificationEntries == null) {\n-\t\t\tnotificationEntries = new HashSet<>();\n-\t\t\tmbeans.put(entry.getNotificationDescriptor().getObjectName(), notificationEntries);\n-\t\t}\n-\t\tnotificationEntries.add(entry);\n-\t}\n-\n-\tprivate SyntheticNotificationEntry createEntry(IConfigurationElement config) {\n-\t\tString notificationName = config.getAttribute(\"notificationName\"); \/\/$NON-NLS-1$\n-\t\ttry {\n-\t\t\tISyntheticNotification notification = (ISyntheticNotification) config.createExecutableExtension(\"class\"); \/\/$NON-NLS-1$\n-\t\t\tString description = config.getAttribute(\"description\"); \/\/$NON-NLS-1$\n-\t\t\tString type = config.getAttribute(\"type\"); \/\/$NON-NLS-1$\n-\t\t\tString message = config.getAttribute(\"message\"); \/\/$NON-NLS-1$\n-\t\t\tMRI descriptor = MRI.createFromQualifiedName(notificationName);\n-\t\t\treturn new SyntheticNotificationEntry(notification, descriptor, description, type, message);\n-\t\t} catch (CoreException e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE,\n-\t\t\t\t\t\"Could not create synthetic notification for \" + notificationName, e); \/\/$NON-NLS-1$\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tpublic boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException {\n-\t\treturn server.isInstanceOf(name, className);\n-\t}\n-\n-\tpublic void dispose() {\n-\t\tfor (Set<SyntheticNotificationEntry> notificationEntrySet : mbeans.values()) {\n-\t\t\tfor (SyntheticNotificationEntry entry : notificationEntrySet) {\n-\t\t\t\ttry {\n-\t\t\t\t\tentry.getNotification().stop();\n-\t\t\t\t} catch (Throwable t) {\n-\t\t\t\t\t\/\/ silently ignore\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/SyntheticNotificationRepository.java","additions":0,"deletions":247,"binary":false,"changes":247,"status":"deleted"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Red Hat Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import org.eclipse.core.runtime.CoreException;\n+import org.eclipse.core.runtime.IConfigurationElement;\n+import org.eclipse.core.runtime.IExtension;\n+import org.eclipse.core.runtime.IExtensionPoint;\n+import org.eclipse.core.runtime.IExtensionRegistry;\n+import org.eclipse.core.runtime.Platform;\n+import org.openjdk.jmc.rjmx.IPropertySyntheticAttribute;\n+import org.openjdk.jmc.rjmx.RJMXPlugin;\n+import org.openjdk.jmc.rjmx.common.ISyntheticAttribute;\n+import org.openjdk.jmc.rjmx.common.ISyntheticNotification;\n+import org.openjdk.jmc.rjmx.common.internal.SyntheticAttributeEntry;\n+import org.openjdk.jmc.rjmx.common.internal.SyntheticNotificationEntry;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+\n+public class SyntheticRepositoryInitializer {\n+\tpublic static List<SyntheticAttributeEntry> initializeAttributeEntries() {\n+\t\tIExtensionRegistry er = Platform.getExtensionRegistry();\n+\t\tIExtensionPoint ep = er.getExtensionPoint(\"org.openjdk.jmc.rjmx.syntheticattribute\"); \/\/$NON-NLS-1$\n+\t\tIExtension[] extensions = ep.getExtensions();\n+\t\tList<SyntheticAttributeEntry> attributeCandidates = new ArrayList<>();\n+\t\tfor (IExtension extension : extensions) {\n+\t\t\tIConfigurationElement[] configs = extension.getConfigurationElements();\n+\t\t\tfor (IConfigurationElement config : configs) {\n+\t\t\t\tif (config.getName().equals(\"syntheticAttribute\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tISyntheticAttribute attribute = (ISyntheticAttribute) config.createExecutableExtension(\"class\"); \/\/$NON-NLS-1$\n+\t\t\t\t\t\tSyntheticAttributeEntry candidate = createAttributeEntry(attribute, config);\n+\t\t\t\t\t\tattributeCandidates.add(candidate);\n+\t\t\t\t\t} catch (CoreException e) {\n+\t\t\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE,\n+\t\t\t\t\t\t\t\t\"Could not instantiate synthetic attribute!\", e); \/\/$NON-NLS-1$\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn attributeCandidates;\n+\t}\n+\n+\tprivate static SyntheticAttributeEntry createAttributeEntry(\n+\t\tISyntheticAttribute attribute, IConfigurationElement config) {\n+\t\tString attributeName = config.getAttribute(\"attributeName\"); \/\/$NON-NLS-1$\n+\t\tString description = config.getAttribute(\"description\"); \/\/$NON-NLS-1$\n+\t\tString type = config.getAttribute(\"type\"); \/\/$NON-NLS-1$\n+\t\tboolean readable = Boolean.valueOf(config.getAttribute(\"readable\")); \/\/$NON-NLS-1$\n+\t\tboolean writeable = Boolean.valueOf(config.getAttribute(\"writeable\")); \/\/$NON-NLS-1$\n+\t\tboolean isIs = Boolean.valueOf(config.getAttribute(\"isIs\")); \/\/$NON-NLS-1$\n+\t\tif (attribute instanceof IPropertySyntheticAttribute) {\n+\t\t\tMap<String, Object> properties = parseProperties(config.getChildren(\"properties\")); \/\/$NON-NLS-1$\n+\t\t\t((IPropertySyntheticAttribute) attribute).setProperties(properties);\n+\t\t}\n+\t\tMRI descriptor = MRI.createFromQualifiedName(attributeName);\n+\t\treturn new SyntheticAttributeEntry(attribute, descriptor, description, type, readable, writeable, isIs);\n+\t}\n+\n+\tprivate static Map<String, Object> parseProperties(IConfigurationElement[] children) {\n+\t\tif (children == null || children.length == 0) {\n+\t\t\treturn Collections.emptyMap();\n+\t\t}\n+\t\tMap<String, Object> properties = new HashMap<>();\n+\t\tfor (IConfigurationElement child : children[0].getChildren()) {\n+\t\t\tparseProperty(child, properties);\n+\t\t}\n+\t\treturn properties;\n+\t}\n+\n+\tprivate static void parseProperty(IConfigurationElement child, Map<String, Object> properties) {\n+\t\tString key = child.getAttribute(\"key\"); \/\/$NON-NLS-1$\n+\t\ttry {\n+\t\t\tif (\"string\".equals(child.getName())) { \/\/$NON-NLS-1$\n+\t\t\t\tproperties.put(key, child.getAttribute(\"value\")); \/\/$NON-NLS-1$\n+\t\t\t} else if (\"boolean\".equals(child.getName())) { \/\/$NON-NLS-1$\n+\t\t\t\tproperties.put(key, Boolean.valueOf(child.getAttribute(\"value\"))); \/\/$NON-NLS-1$\n+\t\t\t} else if (\"integer\".equals(child.getName())) { \/\/$NON-NLS-1$\n+\t\t\t\tproperties.put(key, Integer.parseInt(child.getAttribute(\"value\"))); \/\/$NON-NLS-1$\n+\t\t\t} else if (\"float\".equals(child.getName())) { \/\/$NON-NLS-1$\n+\t\t\t\tproperties.put(key, Float.parseFloat(child.getAttribute(\"value\"))); \/\/$NON-NLS-1$\n+\t\t\t}\n+\t\t} catch (NumberFormatException e) {\n+\t\t\tproperties.put(key, e.getMessage());\n+\t\t}\n+\t}\n+\n+\tpublic static List<SyntheticNotificationEntry> initializeNotificationEntries() {\n+\t\tIExtensionRegistry er = Platform.getExtensionRegistry();\n+\t\tIExtensionPoint ep = er.getExtensionPoint(\"org.openjdk.jmc.rjmx.syntheticnotification\"); \/\/$NON-NLS-1$\n+\t\tIExtension[] extensions = ep.getExtensions();\n+\t\tList<SyntheticNotificationEntry> notificationCandidates = new ArrayList<>();\n+\t\tfor (IExtension extension : extensions) {\n+\t\t\tIConfigurationElement[] configs = extension.getConfigurationElements();\n+\t\t\tfor (IConfigurationElement config : configs) {\n+\t\t\t\tif (config.getName().equals(\"syntheticNotification\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\tSyntheticNotificationEntry candidate = createNotificationEntry(config);\n+\t\t\t\t\tif (candidate != null) {\n+\t\t\t\t\t\tnotificationCandidates.add(candidate);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn notificationCandidates;\n+\t}\n+\n+\tprivate static SyntheticNotificationEntry createNotificationEntry(IConfigurationElement config) {\n+\t\tString notificationName = config.getAttribute(\"notificationName\"); \/\/$NON-NLS-1$\n+\t\ttry {\n+\t\t\tISyntheticNotification notification = (ISyntheticNotification) config.createExecutableExtension(\"class\"); \/\/$NON-NLS-1$\n+\t\t\tString description = config.getAttribute(\"description\"); \/\/$NON-NLS-1$\n+\t\t\tString type = config.getAttribute(\"type\"); \/\/$NON-NLS-1$\n+\t\t\tString message = config.getAttribute(\"message\"); \/\/$NON-NLS-1$\n+\t\t\tMRI descriptor = MRI.createFromQualifiedName(notificationName);\n+\t\t\treturn new SyntheticNotificationEntry(notification, descriptor, description, type, message);\n+\t\t} catch (CoreException e) {\n+\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE,\n+\t\t\t\t\t\"Could not create synthetic notification for \" + notificationName, e); \/\/$NON-NLS-1$\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/SyntheticRepositoryInitializer.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -1,115 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.internal;\n-\n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n-import java.net.MalformedURLException;\n-import java.net.UnknownHostException;\n-import java.security.GeneralSecurityException;\n-\n-import javax.management.remote.JMXServiceURL;\n-import javax.naming.NameNotFoundException;\n-import javax.naming.NoInitialContextException;\n-\n-import org.eclipse.osgi.util.NLS;\n-\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.messages.internal.Messages;\n-\n-public class WrappedConnectionException extends ConnectionException {\n-\n-\tprivate final JMXServiceURL url;\n-\tprivate final String serverName;\n-\n-\tpublic WrappedConnectionException(String serverName, JMXServiceURL url, Exception cause) {\n-\t\tsuper(cause.getMessage());\n-\t\tinitCause(cause); \/\/ yes, still 1.4 compatible\n-\t\tthis.url = url;\n-\t\tthis.serverName = serverName;\n-\n-\t}\n-\n-\t@Override\n-\tpublic String getLocalizedMessage() {\n-\t\tThrowable cause = getCause();\n-\t\tThrowable rootCause = cause;\n-\t\twhile (rootCause.getCause() != null) {\n-\t\t\trootCause = rootCause.getCause();\n-\t\t}\n-\n-\t\tString hostName = url != null ? ConnectionToolkit.getHostName(url) : Messages.ConnectionException_UNRESOLVED;\n-\t\tString protocol = url != null ? url.getProtocol() : Messages.ConnectionException_UNRESOLVED;\n-\n-\t\tif (rootCause instanceof UnknownHostException) {\n-\t\t\treturn NLS.bind(Messages.ConnectionException_COULD_NOT_DETERMINE_IP_MSG, hostName);\n-\t\t}\n-\t\tif (rootCause instanceof NameNotFoundException) {\n-\t\t\treturn NLS.bind(Messages.ConnectionException_NAME_NOT_FOUND_MSG, serverName, url);\n-\t\t}\n-\t\tif (rootCause instanceof MalformedURLException) {\n-\t\t\treturn NLS.bind(Messages.ConnectionException_MALFORMED_URL_MSG, serverName, url);\n-\t\t}\n-\t\tif (rootCause instanceof NoInitialContextException) {\n-\t\t\treturn NLS.bind(Messages.ConnectionException_UNABLE_TO_CREATE_INITIAL_CONTEXT, serverName, url);\n-\t\t}\n-\t\tif (protocol.equals(\"msarmi\")) { \/\/$NON-NLS-1$\n-\t\t\treturn NLS.bind(Messages.ConnectionException_MSARMI_CHECK_PASSWORD, serverName, url);\n-\t\t}\n-\t\tif (rootCause instanceof SecurityException || rootCause instanceof GeneralSecurityException) {\n-\t\t\treturn NLS.bind(Messages.ConnectionException_UNABLE_TO_RESOLVE_CREDENTIALS, serverName,\n-\t\t\t\t\trootCause.getLocalizedMessage());\n-\t\t}\n-\t\tif (\"com.sun.tools.attach.AttachNotSupportedException\".equals(rootCause \/\/$NON-NLS-1$\n-\t\t\t\t.getClass().getName())) {\n-\t\t\treturn NLS.bind(Messages.ConnectionException_ATTACH_NOT_SUPPORTED, serverName,\n-\t\t\t\t\trootCause.getLocalizedMessage());\n-\t\t}\n-\t\treturn NLS.bind(Messages.ConnectionException_COULD_NOT_CONNECT_MSG, serverName, url);\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn ConnectionException.class.getName() + \" caused by \" + getCause().toString(); \/\/$NON-NLS-1$\n-\t}\n-\n-\tprivate void writeObject(ObjectOutputStream oos) throws IOException {\n-\t\tthrow new IOException(\"You should not serialize instances of \" + getClass().getName()); \/\/$NON-NLS-1$\n-\t}\n-\n-\tprivate void readObject(ObjectInputStream ois) throws IOException {\n-\t\tthrow new IOException(\"You should not serialize instances of \" + getClass().getName()); \/\/$NON-NLS-1$\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/WrappedConnectionException.java","additions":0,"deletions":115,"binary":false,"changes":115,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,9 +40,0 @@\n-\tpublic static String ConnectionException_ATTACH_NOT_SUPPORTED;\n-\tpublic static String ConnectionException_COULD_NOT_CONNECT_MSG;\n-\tpublic static String ConnectionException_COULD_NOT_DETERMINE_IP_MSG;\n-\tpublic static String ConnectionException_MALFORMED_URL_MSG;\n-\tpublic static String ConnectionException_MSARMI_CHECK_PASSWORD;\n-\tpublic static String ConnectionException_NAME_NOT_FOUND_MSG;\n-\tpublic static String ConnectionException_UNABLE_TO_CREATE_INITIAL_CONTEXT;\n-\tpublic static String ConnectionException_UNABLE_TO_RESOLVE_CREDENTIALS;\n-\tpublic static String ConnectionException_UNRESOLVED;\n@@ -67,1 +58,0 @@\n-\tpublic static String LABEL_NOT_AVAILABLE;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/messages\/internal\/Messages.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -79,2 +79,2 @@\n- * {@link org.openjdk.jmc.rjmx.IConnectionHandle},\n- * {@link org.openjdk.jmc.rjmx.subscription.ISubscriptionService} and\n+ * {@link org.openjdk.jmc.rjmx.common.IConnectionHandle},\n+ * {@link org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService} and\n@@ -85,3 +85,4 @@\n- * <li>{@link org.openjdk.jmc.rjmx.IConnectionDescriptor} represents a way to reach a server.<\/li>\n- * <li>{@link org.openjdk.jmc.rjmx.IConnectionHandle} is an active connection to a server. Must\n- * always be closed when not used anymore.<\/li>\n+ * <li>{@link org.openjdk.jmc.rjmx.common.IConnectionDescriptor} represents a way to reach a\n+ * server.<\/li>\n+ * <li>{@link org.openjdk.jmc.rjmx.common.IConnectionHandle} is an active connection to a server.\n+ * Must always be closed when not used anymore.<\/li>\n@@ -89,2 +90,2 @@\n- * connection between users ( {@link org.openjdk.jmc.rjmx.IConnectionHandle}s), keep track of all\n- * open connection handles and close the connection when all connection handles are closed.<\/li>\n+ * connection between users ( {@link org.openjdk.jmc.rjmx.common.IConnectionHandle}s), keep track of\n+ * all open connection handles and close the connection when all connection handles are closed.<\/li>\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/package-info.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,3 +46,3 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/persistence\/internal\/AttributeWriter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/persistence\/internal\/PersistenceFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,0 +56,5 @@\n+import org.openjdk.jmc.rjmx.common.services.IAttributeStorage;\n+import org.openjdk.jmc.rjmx.common.services.MRIDataSeries;\n+import org.openjdk.jmc.rjmx.common.services.internal.IAttributeStorageService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n@@ -57,5 +62,0 @@\n-import org.openjdk.jmc.rjmx.services.IAttributeStorage;\n-import org.openjdk.jmc.rjmx.services.IAttributeStorageService;\n-import org.openjdk.jmc.rjmx.services.MRIDataSeries;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/persistence\/internal\/PersistenceReader.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,5 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.IServiceFactory;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n@@ -39,2 +41,0 @@\n-import org.openjdk.jmc.rjmx.services.IServiceFactory;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/persistence\/internal\/PersistenceServiceFactory.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,3 @@\n-import org.openjdk.jmc.rjmx.internal.IDisposableService;\n+import org.openjdk.jmc.rjmx.common.internal.IDisposableService;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n@@ -50,2 +52,0 @@\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/persistence\/internal\/PersistenceWriter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.common.action.IActionProvider;\n@@ -37,1 +37,2 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.servermodel.IDiscoveryInfo;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/servermodel\/IServer.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.ui.common.tree.IArray;\n+import org.openjdk.jmc.common.tree.IArray;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/servermodel\/IServerModel.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-import org.openjdk.jmc.rjmx.servermodel.IDiscoveryInfo;\n+import org.openjdk.jmc.rjmx.common.servermodel.IDiscoveryInfo;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/servermodel\/internal\/DiscoveryInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,3 +52,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n@@ -56,1 +53,4 @@\n-import org.openjdk.jmc.rjmx.internal.ServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.internal.ServerDescriptor;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/servermodel\/internal\/ModelPersistence.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import org.openjdk.jmc.common.action.IActionProvider;\n@@ -41,0 +42,2 @@\n+import org.openjdk.jmc.common.labelingrules.NameConverter;\n+import org.openjdk.jmc.common.resource.Resource;\n@@ -42,3 +45,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n@@ -47,1 +47,5 @@\n-import org.openjdk.jmc.rjmx.internal.ServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.internal.ServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.servermodel.IDiscoveryInfo;\n@@ -49,1 +53,0 @@\n-import org.openjdk.jmc.rjmx.servermodel.IDiscoveryInfo;\n@@ -51,2 +54,0 @@\n-import org.openjdk.jmc.ui.common.action.IActionProvider;\n-import org.openjdk.jmc.ui.common.labelingrules.NameConverter;\n@@ -54,1 +55,0 @@\n-import org.openjdk.jmc.ui.common.resource.Resource;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/servermodel\/internal\/Server.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,3 +52,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n@@ -56,0 +53,3 @@\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/servermodel\/internal\/ServerModel.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services;\n-\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-\n-public interface IAttributeStorageService {\n-\n-\tIAttributeStorage getAttributeStorage(MRI attributeDescriptor);\n-\n-\tint getRetainedLength(MRI attributeDescriptor);\n-\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/IAttributeStorageService.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/IPersistenceService.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import org.openjdk.jmc.rjmx.common.services.IAttributeInfo;\n+\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/IReadOnlyAttribute.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services;\n-\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-\n-public interface IServiceFactory<T> {\n-\t\/**\n-\t * Create an instance of the service as based on {@code handle}. Normally, a service should only\n-\t * be returned if it is likely that this factory provides the best service for the given\n-\t * {@code handle}. Otherwise, null shall be returned. However, there might currently be\n-\t * circumstances where dummy services could be returned. In this case, they must also implement\n-\t * the marker interface {@link IDummyService}, so that they can be skipped when looking for\n-\t * proper services.\n-\t *\n-\t * @param handle\n-\t * @return a proper service, a dummy service, or null.\n-\t * @throws ConnectionException\n-\t * @throws ServiceNotAvailableException\n-\t *\/\n-\tT getServiceInstance(IConnectionHandle handle) throws ConnectionException, ServiceNotAvailableException;\n-\n-\tClass<T> getServiceType();\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/IServiceFactory.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services.internal;\n-\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.IAttributeStorageService;\n-import org.openjdk.jmc.rjmx.services.IServiceFactory;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.storage.internal.DefaultAttributeStorageService;\n-\n-public class AttributeStorageServiceFactory implements IServiceFactory<IAttributeStorageService> {\n-\n-\t@Override\n-\tpublic IAttributeStorageService getServiceInstance(IConnectionHandle handle)\n-\t\t\tthrows ConnectionException, ServiceNotAvailableException {\n-\t\treturn new DefaultAttributeStorageService(handle.getServiceOrThrow(ISubscriptionService.class));\n-\t}\n-\n-\t@Override\n-\tpublic Class<IAttributeStorageService> getServiceType() {\n-\t\treturn IAttributeStorageService.class;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/AttributeStorageServiceFactory.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services.internal;\n-\n-import org.openjdk.jmc.common.jvm.JVMDescriptor;\n-import org.openjdk.jmc.common.version.JavaVersion;\n-import org.openjdk.jmc.common.version.JavaVersionSupport;\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.ICommercialFeaturesService;\n-import org.openjdk.jmc.rjmx.services.IServiceFactory;\n-\n-public class CommercialFeaturesServiceFactory implements IServiceFactory<ICommercialFeaturesService> {\n-\n-\t@Override\n-\tpublic ICommercialFeaturesService getServiceInstance(IConnectionHandle handle)\n-\t\t\tthrows ConnectionException, ServiceNotAvailableException {\n-\t\t\/\/ Optimization - using already available information instead of doing more round trips.\n-\t\t\/\/ It's always a bit precarious to look at version instead of capability, but in this case\n-\t\t\/\/ it should be safe - the commercial features flag is not coming back\n-\t\tJVMDescriptor descriptor = handle.getServerDescriptor().getJvmInfo();\n-\t\tif (descriptor != null) {\n-\t\t\tJavaVersion version = new JavaVersion(descriptor.getJavaVersion());\n-\t\t\tif (version.getMajorVersion() >= 11) {\n-\t\t\t\treturn new NoCommercialFeaturesService();\n-\t\t\t}\n-\t\t} else if (handle.isConnected() && ConnectionToolkit.isOracle(handle)) {\n-\t\t\tif (ConnectionToolkit.isJavaVersionAboveOrEqual(handle, JavaVersionSupport.JDK_11)) {\n-\t\t\t\treturn new NoCommercialFeaturesService();\n-\t\t\t}\n-\t\t}\n-\n-\t\t\/\/ Funnily enough, OpenJDK built JVMs for unknown reasons also have the unlock commercial features flag,\n-\t\t\/\/ so we'll just check if Oracle is the JVM vendor. Any other vendor will not have JFR protected by commercial flags.\n-\t\tif (ConnectionToolkit.isOracle(handle)) {\n-\t\t\treturn new HotSpot23CommercialFeaturesService(handle);\n-\t\t}\n-\t\treturn new NoCommercialFeaturesService();\n-\t}\n-\n-\t@Override\n-\tpublic Class<ICommercialFeaturesService> getServiceType() {\n-\t\treturn ICommercialFeaturesService.class;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/CommercialFeaturesServiceFactory.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services.internal;\n-\n-import javax.management.MBeanServerConnection;\n-\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;\n-import org.openjdk.jmc.rjmx.services.IServiceFactory;\n-\n-public class DiagnosticCommandServiceFactory implements IServiceFactory<IDiagnosticCommandService> {\n-\n-\t@Override\n-\tpublic IDiagnosticCommandService getServiceInstance(IConnectionHandle handle)\n-\t\t\tthrows ServiceNotAvailableException, ConnectionException {\n-\t\treturn new HotSpot24DiagnosticCommandService(handle.getServiceOrThrow(MBeanServerConnection.class));\n-\t}\n-\n-\t@Override\n-\tpublic Class<IDiagnosticCommandService> getServiceType() {\n-\t\treturn IDiagnosticCommandService.class;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/DiagnosticCommandServiceFactory.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,105 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services.internal;\n-\n-import javax.management.MBeanServerConnection;\n-\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.ICommercialFeaturesService;\n-import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;\n-import javax.management.ObjectName;\n-\n-public class HotSpot23CommercialFeaturesService implements ICommercialFeaturesService {\n-\tprivate final static String UNLOCK_COMMERCIAL_FEATURES_FLAG = \"UnlockCommercialFeatures\"; \/\/$NON-NLS-1$\n-\tprivate final static String UNLOCK_COMMAND = \"VM.unlock_commercial_features\"; \/\/$NON-NLS-1$\n-\tprivate final MBeanServerConnection server;\n-\tprivate final IDiagnosticCommandService dcs;\n-\tprivate final static String JDK_MANAGEMENT_JFR_MBEAN_NAME = \"jdk.management.jfr:type=FlightRecorder\"; \/\/$NON-NLS-1$\n-\n-\tpublic HotSpot23CommercialFeaturesService(IConnectionHandle handle)\n-\t\t\tthrows ConnectionException, ServiceNotAvailableException {\n-\t\tserver = handle.getServiceOrThrow(MBeanServerConnection.class);\n-\t\tdcs = handle.getServiceOrNull(IDiagnosticCommandService.class);\n-\t\ttry {\n-\t\t\tHotspotManagementToolkit.getVMOption(server, UNLOCK_COMMERCIAL_FEATURES_FLAG); \/\/ Will fail if option is not available\n-\t\t} catch (Exception e) {\n-\t\t\t\/\/ Commercial Feature option is not available but Flight Recorder is.\n-\t\t\tif (!isJfrMBeanAvailable()) {\n-\t\t\t\tthrow new ServiceNotAvailableException(\"\"); \/\/$NON-NLS-1$\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic boolean isCommercialFeaturesEnabled() {\n-\t\ttry {\n-\t\t\treturn ((String) HotspotManagementToolkit.getVMOption(server, UNLOCK_COMMERCIAL_FEATURES_FLAG))\n-\t\t\t\t\t.contains(\"true\"); \/\/$NON-NLS-1$\n-\t\t} catch (Exception e) {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void enableCommercialFeatures() throws Exception {\n-\t\tif (dcs != null) {\n-\t\t\tdcs.runCtrlBreakHandlerWithResult(UNLOCK_COMMAND);\n-\t\t}\n-\t\tif (!isCommercialFeaturesEnabled()) {\n-\t\t\tHotspotManagementToolkit.setVMOption(server, UNLOCK_COMMERCIAL_FEATURES_FLAG, \"true\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t}\n-\n-\tprivate boolean isJfrMBeanAvailable() {\n-\t\ttry {\n-\t\t\tgetJfrMBeanObjectName();\n-\t\t\treturn true;\n-\t\t} catch (Exception e) {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tprivate ObjectName getJfrMBeanObjectName() throws Exception {\n-\t\tObjectName candidateObjectName = ConnectionToolkit.createObjectName(JDK_MANAGEMENT_JFR_MBEAN_NAME);\n-\t\tserver.getMBeanInfo(candidateObjectName);\n-\t\treturn candidateObjectName;\n-\t}\n-\n-\t@Override\n-\tpublic boolean hasCommercialFeatures() {\n-\t\treturn true;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/HotSpot23CommercialFeaturesService.java","additions":0,"deletions":105,"binary":false,"changes":105,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,5 +35,5 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.IServiceFactory;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.IServiceFactory;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/MRIMetadataServiceFactory.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services.internal;\n-\n-import org.eclipse.osgi.util.NLS;\n-\n-public class Messages extends NLS {\n-\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.rjmx.services.internal.messages\"; \/\/$NON-NLS-1$\n-\n-\tpublic static String MBeanOperationsWrapper_DESCRIPTOR;\n-\n-\tstatic {\n-\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n-\t}\n-\n-\tprivate Messages() {\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/Messages.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,210 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services.internal;\n-\n-import java.lang.reflect.InvocationHandler;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Proxy;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-import org.eclipse.core.runtime.CoreException;\n-import org.eclipse.core.runtime.IConfigurationElement;\n-import org.eclipse.core.runtime.IExtensionRegistry;\n-import org.eclipse.core.runtime.Platform;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.services.IDummyService;\n-import org.openjdk.jmc.rjmx.services.IServiceFactory;\n-\n-\/**\n- * Manager for service factories.\n- *\/\n-@SuppressWarnings(\"nls\")\n-public class ServiceFactoryManager {\n-\tprivate final static String EXTENSION_POINT = \"org.openjdk.jmc.rjmx.service\";\n-\tprivate final static String EXTENSION_ELEMENT_SERVICE = \"service\";\n-\tprivate final static String EXTENSION_ATTRIBUTE_FACTORY = \"factory\";\n-\tprivate final static String EXTENSION_ATTRIBUTE_NAME = \"name\";\n-\tprivate final static String EXTENSION_ATTRIBUTE_DESCRIPTION = \"description\";\n-\n-\tprivate final static Map<Class<?>, Collection<? extends ServiceEntry<?>>> factoryMap = new HashMap<>();\n-\n-\tprivate static class UnsupportedInvocationHandler implements InvocationHandler {\n-\t\tprivate final Throwable cause;\n-\n-\t\tpublic UnsupportedInvocationHandler(Throwable cause) {\n-\t\t\tthis.cause = cause;\n-\t\t}\n-\n-\t\t@Override\n-\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n-\t\t\tString msg;\n-\t\t\tif ((cause != null) && (cause.getMessage() != null)) {\n-\t\t\t\tmsg = cause.getMessage();\n-\t\t\t} else {\n-\t\t\t\tmsg = \"Does not support method \" + method.getName();\n-\t\t\t}\n-\t\t\tthrow new UnsupportedOperationException(msg, cause);\n-\t\t}\n-\t}\n-\n-\tpublic ServiceFactoryManager() {\n-\t\tinitializeFromExtensions();\n-\t}\n-\n-\tprivate Logger getLogger() {\n-\t\treturn RJMXPlugin.getDefault().getLogger();\n-\t}\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\tpublic static <T> T createDummyService(Class<T> serviceInterface, Throwable cause) {\n-\t\tClass<?>[] interfaces = new Class[] {serviceInterface, IDummyService.class};\n-\t\tClassLoader cl = serviceInterface.getClassLoader();\n-\t\treturn (T) Proxy.newProxyInstance(cl == null ? IDummyService.class.getClassLoader() : cl, interfaces,\n-\t\t\t\tnew UnsupportedInvocationHandler(cause));\n-\t}\n-\n-\t\/**\n-\t * Create a service instance of {@code serviceClass}. Normally only proper services or null will\n-\t * be returned, but there are two exceptional cases in which dummy services will be returned:\n-\t * <ul>\n-\t * <li>If no proper service could be created, but some service factory provided a dummy service,\n-\t * this will be returned.<\/li>\n-\t * <li>If neither a proper nor a dummy service was provided, but some service factory threw an\n-\t * exception (and {@code serviceClass} denotes an interface), a dummy service will be\n-\t * constructed. This dummy service will use the thrown exception as the cause of the\n-\t * {@link UnsupportedOperationException}s that its methods will throw.\n-\t * <\/ul>\n-\t *\n-\t * @param serviceClass\n-\t * @param handle\n-\t * @return A service instance of {@code serviceClass}, or a dummy service.\n-\t *\/\n-\tpublic <T> T createService(Class<T> serviceClass, IConnectionHandle handle) {\n-\t\tT firstDummyService = null;\n-\t\tException firstException = null;\n-\n-\t\tfor (ServiceEntry<T> entry : getFactoriesFor(serviceClass)) {\n-\t\t\ttry {\n-\t\t\t\tT service = entry.getServiceFactory().getServiceInstance(handle);\n-\t\t\t\tif (service != null) {\n-\t\t\t\t\tif (!isDummy(service)) {\n-\t\t\t\t\t\treturn service;\n-\t\t\t\t\t}\n-\t\t\t\t\tif (firstDummyService == null) {\n-\t\t\t\t\t\tfirstDummyService = service;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t} catch (Exception e) {\n-\t\t\t\tif (firstException == null) {\n-\t\t\t\t\tfirstException = e;\n-\t\t\t\t}\n-\t\t\t\tgetLogger().log(Level.FINE, \"Could not create service!\", e);\n-\t\t\t}\n-\t\t}\n-\n-\t\tif ((firstDummyService == null) && (firstException != null) && serviceClass.isInterface()) {\n-\t\t\ttry {\n-\t\t\t\tfirstDummyService = createDummyService(serviceClass, firstException);\n-\t\t\t} catch (Exception e) {\n-\t\t\t\t\/\/ Just log and ignore.\n-\t\t\t\tgetLogger().log(Level.FINE, \"Could not create dummy service to wrap exception!\", e);\n-\t\t\t}\n-\t\t}\n-\n-\t\treturn firstDummyService;\n-\t}\n-\n-\tpublic static boolean isDummy(Object service) {\n-\t\treturn service instanceof IDummyService;\n-\t}\n-\n-\t@SuppressWarnings(\"unchecked\")\n-\tprivate <T> Collection<ServiceEntry<T>> getFactoriesFor(Class<T> clazz) {\n-\t\tCollection<ServiceEntry<T>> factories = (Collection<ServiceEntry<T>>) factoryMap.get(clazz);\n-\t\tif (factories == null) {\n-\t\t\tfactories = Collections.emptyList();\n-\t\t}\n-\t\treturn factories;\n-\t}\n-\n-\t\/\/ FIXME: Suggested improvement to service factories. Might not give enough benefits to be worth the effort.\n-\/\/\tpublic <T> boolean hasService(Class<T> serviceClass, IConnectionHandle handle) {\n-\/\/\t\tfor (ServiceEntry<T> entry : getFactoriesFor(serviceClass)) {\n-\/\/\t\t\tif (entry.getServiceFactory().canCreateService(serviceClass, handle)) {\n-\/\/\t\t\t\treturn true;\n-\/\/\t\t\t}\n-\/\/\t\t}\n-\/\/\t\treturn false;\n-\/\/\t}\n-\n-\tprivate void initializeFromExtensions() {\n-\t\tIExtensionRegistry registry = Platform.getExtensionRegistry();\n-\t\tfor (IConfigurationElement config : registry.getConfigurationElementsFor(EXTENSION_POINT)) {\n-\t\t\tif (config.getName().equals(EXTENSION_ELEMENT_SERVICE)) {\n-\t\t\t\ttry {\n-\t\t\t\t\tIServiceFactory<?> factory = (IServiceFactory<?>) config\n-\t\t\t\t\t\t\t.createExecutableExtension(EXTENSION_ATTRIBUTE_FACTORY);\n-\t\t\t\t\tregisterService(createServiceEntry(factory, config));\n-\t\t\t\t} catch (CoreException e) {\n-\t\t\t\t\tgetLogger().log(Level.SEVERE, \"Could not instantiate service factory!\", e);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tprivate <T> void registerService(ServiceEntry<T> entry) {\n-\t\tClass<T> serviceClass = entry.getServiceClass();\n-\t\tCollection<ServiceEntry<T>> factories;\n-\t\t\/\/ HINT: A little convoluted to avoid suppressing \"unchecked\" warnings here.\n-\t\tif (factoryMap.containsKey(serviceClass)) {\n-\t\t\tfactories = getFactoriesFor(entry.getServiceClass());\n-\t\t} else {\n-\t\t\tfactories = new ArrayList<>();\n-\t\t\tfactoryMap.put(entry.getServiceClass(), factories);\n-\t\t}\n-\t\tfactories.add(entry);\n-\t}\n-\n-\tprivate <T> ServiceEntry<T> createServiceEntry(IServiceFactory<T> factory, IConfigurationElement config) {\n-\t\tString name = config.getAttribute(EXTENSION_ATTRIBUTE_NAME);\n-\t\tString description = config.getAttribute(EXTENSION_ATTRIBUTE_DESCRIPTION);\n-\t\treturn new ServiceEntry<>(factory, name, description);\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/ServiceFactoryManager.java","additions":0,"deletions":210,"binary":false,"changes":210,"status":"deleted"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.services.internal;\n-\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.IServiceFactory;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.internal.DefaultAttributeSubscriptionService;\n-\n-public class SubscriptionServiceFactory implements IServiceFactory<ISubscriptionService> {\n-\n-\t@Override\n-\tpublic ISubscriptionService getServiceInstance(IConnectionHandle handle)\n-\t\t\tthrows ConnectionException, ServiceNotAvailableException {\n-\t\treturn new DefaultAttributeSubscriptionService(handle);\n-\t}\n-\n-\t@Override\n-\tpublic Class<ISubscriptionService> getServiceType() {\n-\t\treturn ISubscriptionService.class;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/SubscriptionServiceFactory.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,3 +54,3 @@\n- * must implement the {@link org.openjdk.jmc.rjmx.services.IServiceFactory} interface. The following\n- * example shows how the flight recorder service is added in the <tt>plugin.xml<tt> for the RJMX\n- * plug-in itself:\n+ * must implement the {@link org.openjdk.jmc.rjmx.common.services.IServiceFactory} interface. The\n+ * following example shows how the flight recorder service is added in the <tt>plugin.xml<tt> for\n+ * the RJMX plug-in itself:\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/package-info.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,3 @@\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IMRIMetadataProviderService.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,5 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/MRIMetadataToolkit.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,5 @@\n-import org.openjdk.jmc.rjmx.subscription.internal.DefaultUpdatePolicy;\n-import org.openjdk.jmc.rjmx.subscription.internal.OneShotUpdatePolicy;\n-import org.openjdk.jmc.rjmx.subscription.internal.SimpleUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.IUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.DefaultUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.OneShotUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.SimpleUpdatePolicy;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/PolicyFactory.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,2 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.AttributeValueToolkit;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/AbstractPropertySyntheticAttribute.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,4 +37,4 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRITransformation;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRITransformation;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/AbstractSingleMRITransformation.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-import org.openjdk.jmc.rjmx.ISyntheticAttribute;\n+import org.openjdk.jmc.rjmx.common.ISyntheticAttribute;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/AbstractSyntheticAttribute.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.openjdk.jmc.rjmx.ISyntheticNotification;\n@@ -43,0 +42,1 @@\n+import org.openjdk.jmc.rjmx.common.ISyntheticNotification;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/AbstractSyntheticNotification.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,53 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.subscription.internal;\n-\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n-\n-\/**\n- * Instances of this class are delivered when the Subscription is re-registered, typically because\n- * an attribute became available again.\n- *\/\n-public class AttributeReregisteredEvent extends MRIValueEvent {\n-\n-\t\/**\n-\t * @param source\n-\t *            the subscription that re-registered.\n-\t * @param timestamp\n-\t *            the time the attribute was re-registered.\n-\t *\/\n-\tpublic AttributeReregisteredEvent(IMRISubscription source, long timestamp) {\n-\t\tsuper(source.getMRIMetadata().getMRI(), timestamp, null);\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/AttributeReregisteredEvent.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,1 @@\n-\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/AverageTransformation.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,55 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.subscription.internal;\n-\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n-\n-\/**\n- * Instances of this class are delivered when the subscription thread fails, typically because the\n- * connection was lost.\n- *\/\n-public class ConnectionLostEvent extends MRIValueEvent {\n-\n-\t\/**\n-\t * Constructor.\n-\t *\n-\t * @param source\n-\t *            the subscription that failed .\n-\t * @param timestamp\n-\t *            the time the failure occurred.\n-\t *\/\n-\tpublic ConnectionLostEvent(IMRISubscription source, long timestamp) {\n-\t\tsuper(source.getMRIMetadata().getMRI(), timestamp, null);\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/ConnectionLostEvent.java","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.subscription.internal;\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-\n-\/**\n- * The default implementation of an attribute subscription.\n- *\/\n-public class DefaultAttributeSubscription extends AbstractAttributeSubscription {\n-\tpublic DefaultAttributeSubscription(IConnectionHandle connectionHandle, IMRIMetadata info) {\n-\t\tsuper(connectionHandle, info);\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/DefaultAttributeSubscription.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,3 +42,0 @@\n-\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -46,7 +43,9 @@\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.internal.IDisposableService;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanServerChangeListener;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.internal.IDisposableService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanServerChangeListener;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/DefaultMRIMetadataService.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/DeltaTransformation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/DifferenceTransformation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,3 @@\n+import org.openjdk.jmc.rjmx.common.subscription.internal.IMRISubscriptionDebugInformation;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.ISubscriptionDebugService;\n+\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/EmptySubscriptionDebugService.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,4 +37,4 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/ExtendedMRIMetadataToolkit.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,2 @@\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n@@ -48,2 +50,0 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/ExtensionMetadataProviderService.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,3 +43,3 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/FileMRIMetadata.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,3 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n@@ -45,2 +47,0 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/FileMRIMetadataDB.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+import org.openjdk.jmc.rjmx.common.subscription.internal.AttributeValueToolkit;\n+\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/HotSpotLastGcAttribute.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,2 +46,3 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.AttributeValueToolkit;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/HotSpotLiveSetAttribute.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,62 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.subscription.internal;\n-\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n-\n-public interface IMRISubscriptionDebugInformation {\n-\tpublic static enum SubscriptionState {\n-\t\tSUBSCRIBED, UNSUBSCRIBED, LOST\n-\t}\n-\n-\tpublic MRI getMRI();\n-\n-\tpublic SubscriptionState getState();\n-\n-\tpublic int getConnectionCount();\n-\n-\tpublic int getDisconnectionCount();\n-\n-\tpublic int getEventCount();\n-\n-\tpublic int getRetainedEventCount();\n-\n-\tpublic MRIValueEvent getLastEvent();\n-\n-\tpublic int getConnectionLostCount();\n-\n-\tpublic int getTriedReconnectionsCount();\n-\n-\tpublic int getSucceededReconnectionsCount();\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/IMRISubscriptionDebugInformation.java","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,308 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.subscription.internal;\n-\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Map.Entry;\n-import java.util.Set;\n-import java.util.logging.Level;\n-\n-import javax.management.Descriptor;\n-import javax.management.InstanceNotFoundException;\n-import javax.management.JMX;\n-import javax.management.MBeanAttributeInfo;\n-import javax.management.MBeanInfo;\n-import javax.management.MBeanNotificationInfo;\n-import javax.management.ObjectName;\n-import javax.management.openmbean.CompositeData;\n-import javax.management.openmbean.CompositeType;\n-import javax.management.openmbean.OpenType;\n-\n-import org.openjdk.jmc.common.util.TypeHandling;\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanServerChangeListener;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.IMRITransformation;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-\n-\/**\n- * Responsible for querying the existing MBean server for metadata. Will cache metadata for\n- * everything that is not directly available through the MBean information of the MBean server.\n- *\/\n-public final class MBeanMRIMetadataDB implements IMRIService, IMBeanServerChangeListener {\n-\t\/\/ FIXME: extend possibility to record MBean metadata about notifications\n-\tprivate final IMBeanHelperService mbeanService;\n-\tprivate final Map<ObjectName, Map<MRI, Map<String, Object>>> cachedMRIMetadata = new HashMap<>();\n-\tprivate final Set<ObjectName> introspectedMBeans = new HashSet<>();\n-\n-\tpublic MBeanMRIMetadataDB(IMBeanHelperService mbeanService) {\n-\t\tthis.mbeanService = mbeanService;\n-\t}\n-\n-\t@Override\n-\tpublic Set<MRI> getMRIs() {\n-\t\tSet<MRI> allMRIOnServer = new HashSet<>();\n-\t\ttry {\n-\t\t\tfor (ObjectName mbean : mbeanService.getMBeanNames()) {\n-\t\t\t\tallMRIOnServer.addAll(getMBeanData(mbean).keySet());\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE, \"Unable to retrieve MBean names from server!\", e); \/\/$NON-NLS-1$\n-\t\t}\n-\t\treturn allMRIOnServer;\n-\t}\n-\n-\t@Override\n-\tpublic boolean isMRIAvailable(MRI mri) {\n-\t\tif (mri.getType() == Type.TRANSFORMATION) {\n-\t\t\treturn isTransformationAvailable(mri);\n-\t\t}\n-\t\treturn getMBeanData(mri.getObjectName()).keySet().contains(mri);\n-\t}\n-\n-\tprivate boolean isTransformationAvailable(MRI mri) {\n-\t\tIMRITransformation transformation = MRITransformationToolkit.createTransformation(mri);\n-\t\tfor (MRI attribute : transformation.getAttributes()) {\n-\t\t\tif (!isMRIAvailable(attribute)) {\n-\t\t\t\treturn false;\n-\t\t\t}\n-\t\t}\n-\t\treturn true;\n-\t}\n-\n-\t@Override\n-\tpublic void mbeanUnregistered(ObjectName mbean) {\n-\t\tsynchronized (cachedMRIMetadata) {\n-\t\t\tintrospectedMBeans.remove(mbean);\n-\t\t\tcachedMRIMetadata.remove(mbean);\n-\t\t}\n-\t}\n-\n-\t@Override\n-\tpublic void mbeanRegistered(ObjectName mbean) {\n-\t}\n-\n-\tpublic Map<MRI, Map<String, Object>> getMBeanData(ObjectName mbean) {\n-\t\tif (hasIntrospectedMBean(mbean)) {\n-\t\t\tsynchronized (cachedMRIMetadata) {\n-\t\t\t\treturn getNonNullMap(cachedMRIMetadata, mbean);\n-\t\t\t}\n-\t\t}\n-\t\treturn introspectMBean(mbean);\n-\t}\n-\n-\tprivate boolean hasIntrospectedMBean(ObjectName mbean) {\n-\t\treturn introspectedMBeans.contains(mbean);\n-\t}\n-\n-\tprivate <K, V, C> Map<V, C> getNonNullMap(Map<K, Map<V, C>> map, K key) {\n-\t\tMap<V, C> keyMap = map.get(key);\n-\t\tif (keyMap == null) {\n-\t\t\treturn Collections.emptyMap();\n-\t\t}\n-\t\treturn keyMap;\n-\t}\n-\n-\tprivate Map<MRI, Map<String, Object>> lookupMBeanMRIData(ObjectName mbean) {\n-\t\tMBeanInfo info = lookupMBeanInfo(mbean);\n-\t\tif (info != null) {\n-\t\t\tMap<MRI, Map<String, Object>> mbeanMetadata = new HashMap<>();\n-\t\t\tfor (MBeanAttributeInfo attribute : info.getAttributes()) {\n-\t\t\t\tif (attribute.getName() == null) {\n-\t\t\t\t\tRJMXPlugin.getDefault().getLogger()\n-\t\t\t\t\t\t\t.warning(\"Omitting attribute with name==null in MBean + \" + mbean.toString()); \/\/$NON-NLS-1$\n-\t\t\t\t} else {\n-\t\t\t\t\tif (attribute.getType() == null) {\n-\t\t\t\t\t\tRJMXPlugin.getDefault().getLogger().warning(\n-\t\t\t\t\t\t\t\t\"Found MBean attribute with invalid type for \" + mbean + \"\/\" + attribute.getName()); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t\t\t\t}\n-\t\t\t\t\tmbeanMetadata.put(new MRI(Type.ATTRIBUTE, mbean, attribute.getName()), createMetadata(attribute));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tfor (MBeanNotificationInfo notification : info.getNotifications()) {\n-\t\t\t\tfor (String type : notification.getNotifTypes()) {\n-\t\t\t\t\tmbeanMetadata.put(new MRI(Type.NOTIFICATION, mbean, type), createMetadata(notification, type));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\treturn mbeanMetadata;\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate MBeanInfo lookupMBeanInfo(ObjectName mbean) {\n-\t\ttry {\n-\t\t\treturn mbeanService.getMBeanInfo(mbean);\n-\t\t} catch (InstanceNotFoundException e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.INFO, \"MBean \" + mbean + \" does not exist on the server\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t} catch (Exception e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE, \"Unable to retrieve MBean information from server!\", \/\/$NON-NLS-1$\n-\t\t\t\t\te);\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate Map<String, Object> createMetadata(MBeanAttributeInfo attribute) {\n-\t\tString typeName = attribute.getType();\n-\t\tObject originalType = attribute.getDescriptor().getFieldValue(\"originalType\"); \/\/$NON-NLS-1$\n-\t\tif (originalType instanceof String) {\n-\t\t\ttypeName = (String) originalType;\n-\t\t}\n-\t\tMap<String, Object> metadata = new HashMap<>();\n-\t\tmetadata.put(IMRIMetadataProvider.KEY_DISPLAY_NAME, attribute.getName());\n-\t\tmetadata.put(IMRIMetadataProvider.KEY_DESCRIPTION, attribute.getDescription());\n-\t\tmetadata.put(IMRIMetadataProvider.KEY_VALUE_TYPE, typeName);\n-\t\tmetadata.put(IMRIMetadataProvider.KEY_COMPOSITE, isCompositeType(attribute.getType()));\n-\t\tmetadata.put(IMRIMetadataProvider.KEY_READABLE, attribute.isReadable());\n-\t\tmetadata.put(IMRIMetadataProvider.KEY_WRITABLE, attribute.isWritable());\n-\t\tmetadata.put(IMRIMetadataProvider.KEY_DESCRIPTOR, attribute.getDescriptor());\n-\t\treturn metadata;\n-\t}\n-\n-\tprivate Map<String, Object> createMetadata(MBeanNotificationInfo notification, String type) {\n-\t\tMap<String, Object> metadata = new HashMap<>();\n-\t\tmetadata.put(IMRIMetadataProvider.KEY_DISPLAY_NAME, type);\n-\t\tmetadata.put(IMRIMetadataProvider.KEY_DESCRIPTION, notification.getDescription());\n-\t\tmetadata.put(IMRIMetadataProvider.KEY_VALUE_TYPE, notification.getName());\n-\t\tmetadata.put(IMRIMetadataProvider.KEY_DESCRIPTOR, notification.getDescriptor());\n-\t\treturn metadata;\n-\t}\n-\n-\tprivate boolean isCompositeType(String className) {\n-\t\tif (className == null) {\n-\t\t\treturn false;\n-\t\t}\n-\t\ttry {\n-\t\t\treturn CompositeData.class.isAssignableFrom(TypeHandling.getClassWithName(className));\n-\t\t} catch (ClassNotFoundException e) {\n-\t\t\treturn false;\n-\t\t}\n-\t}\n-\n-\tprivate Map<MRI, Map<String, Object>> introspectMBean(ObjectName mbean) {\n-\t\tMap<MRI, Map<String, Object>> cachedMBeanInfo;\n-\t\tsynchronized (cachedMRIMetadata) {\n-\t\t\tMap<MRI, Map<String, Object>> mbeanMetadata = cachedMRIMetadata.get(mbean);\n-\t\t\tif (mbeanMetadata == null) {\n-\t\t\t\tmbeanMetadata = lookupMBeanMRIData(mbean);\n-\t\t\t\tif (mbeanMetadata == null) {\n-\t\t\t\t\treturn Collections.emptyMap();\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcachedMBeanInfo = new HashMap<>(mbeanMetadata);\n-\t\t\tboolean hasIntrospected = true;\n-\t\t\tfor (Entry<MRI, Map<String, Object>> entry : mbeanMetadata.entrySet()) {\n-\t\t\t\tCompositeType type = getCompositeType(entry.getValue());\n-\t\t\t\tif (type == null && isComposite(entry.getValue())) {\n-\t\t\t\t\t\/\/ FIXME: We ought to retrieve all composites at once but we will not need this for well behaved MBeans\n-\t\t\t\t\tCompositeData compositeData = getCompositeData(entry.getKey());\n-\t\t\t\t\tif (compositeData != null) {\n-\t\t\t\t\t\ttype = compositeData.getCompositeType();\n-\t\t\t\t\t} else {\n-\t\t\t\t\t\thasIntrospected = false;\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t\tif (type != null) {\n-\t\t\t\t\tObject readable = entry.getValue().get(IMRIMetadataProvider.KEY_READABLE);\n-\t\t\t\t\tObject writable = entry.getValue().get(IMRIMetadataProvider.KEY_WRITABLE);\n-\t\t\t\t\tentry.getValue().put(IMRIMetadataProvider.KEY_COMPOSITE, true);\n-\t\t\t\t\tcachedMBeanInfo.putAll(introspectChildren(entry.getKey(), type, readable, writable));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tcachedMRIMetadata.put(mbean, cachedMBeanInfo);\n-\t\t\tif (hasIntrospected) {\n-\t\t\t\tintrospectedMBeans.add(mbean);\n-\t\t\t}\n-\t\t}\n-\t\treturn new HashMap<>(cachedMBeanInfo);\n-\t}\n-\n-\tprivate boolean isComposite(Map<String, Object> metadata) {\n-\t\tObject object = metadata.get(IMRIMetadataProvider.KEY_COMPOSITE);\n-\t\tif (object != null && object instanceof Boolean) {\n-\t\t\treturn ((Boolean) object).booleanValue();\n-\t\t}\n-\t\treturn false;\n-\t}\n-\n-\tprivate CompositeType getCompositeType(Map<String, Object> metadata) {\n-\t\tObject descriptor = metadata.get(IMRIMetadataProvider.KEY_DESCRIPTOR);\n-\t\tif (descriptor instanceof Descriptor) {\n-\t\t\tObject type = ((Descriptor) descriptor).getFieldValue(JMX.OPEN_TYPE_FIELD);\n-\t\t\tif (type instanceof CompositeType) {\n-\t\t\t\treturn (CompositeType) type;\n-\t\t\t}\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate CompositeData getCompositeData(MRI mri) {\n-\t\ttry {\n-\t\t\tObject attributeValue = mbeanService.getAttributeValue(mri);\n-\t\t\tif (attributeValue instanceof CompositeData) {\n-\t\t\t\treturn (CompositeData) attributeValue;\n-\t\t\t}\n-\t\t\treturn null;\n-\t\t} catch (Exception e) {\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE, \"Could not retrieve attribute: \" + mri, e); \/\/$NON-NLS-1$\n-\t\t\treturn null;\n-\t\t}\n-\t}\n-\n-\tprivate Map<MRI, Map<String, Object>> introspectChildren(\n-\t\tMRI parentMRI, CompositeType parentType, Object readable, Object writable) {\n-\t\tMap<MRI, Map<String, Object>> children = new HashMap<>();\n-\t\tfor (Object key : parentType.keySet()) {\n-\t\t\tString childAttribute = String.valueOf(key);\n-\t\t\tMRI childMRI = new MRI(parentMRI, childAttribute);\n-\t\t\tMap<String, Object> childMetadata = new HashMap<>();\n-\t\t\tchildren.put(childMRI, childMetadata);\n-\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_DISPLAY_NAME, childAttribute);\n-\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_DESCRIPTION, parentType.getDescription(childAttribute));\n-\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_VALUE_TYPE, parentType.getType(childAttribute).getClassName());\n-\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_READABLE, readable);\n-\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_WRITABLE, writable);\n-\t\t\tOpenType<?> childType = parentType.getType(childAttribute);\n-\t\t\tif (childType instanceof CompositeType) {\n-\t\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_COMPOSITE, true);\n-\t\t\t\tchildren.putAll(introspectChildren(childMRI, (CompositeType) childType, readable, writable));\n-\t\t\t}\n-\t\t}\n-\t\treturn children;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/MBeanMRIMetadataDB.java","additions":0,"deletions":308,"binary":false,"changes":308,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,4 +35,4 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/MRIMetadataWrapper.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,0 @@\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n@@ -47,1 +44,0 @@\n-import org.eclipse.osgi.util.NLS;\n@@ -50,6 +46,2 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRITransformation;\n-import org.openjdk.jmc.rjmx.subscription.IMRITransformationFactory;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRITransformationFactory;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.MRITransformationBaseToolkit;\n@@ -62,11 +54,1 @@\n-public class MRITransformationToolkit {\n-\n-\tstatic final String TRANSFORMATION_EXTENSION_NAME = \"org.openjdk.jmc.rjmx.attributeTransformation\"; \/\/$NON-NLS-1$\n-\tstatic final String TRANSFORMATION_ELEMENT = \"attributeTransformation\"; \/\/$NON-NLS-1$\n-\tpublic static final String TRANSFORMATION_NAME_ATTRIBUTE = \"transformationName\"; \/\/$NON-NLS-1$\n-\tstatic final String TRANSFORMATION_PROPERTY_ELEMENT = \"property\"; \/\/$NON-NLS-1$\n-\tstatic final String TRANSFORMATION_PROPERTY_NAME = \"name\"; \/\/$NON-NLS-1$\n-\tstatic final String TRANSFORMATION_PROPERTY_VALUE = \"value\"; \/\/$NON-NLS-1$\n-\tstatic final String TRANSFORMATION_PROPERTIES_ELEMENT = \"transformationProperties\"; \/\/$NON-NLS-1$\n-\n-\tprivate static final Map<String, IMRITransformationFactory> TRANSFORMATION_FACTORIES = new HashMap<>();\n+public class MRITransformationToolkit extends MRITransformationBaseToolkit {\n@@ -121,61 +103,0 @@\n-\t\/**\n-\t * Creates a new transformation with given transformation MRI for given connection.\n-\t *\n-\t * @param mri\n-\t *            the transformation MRI\n-\t * @return the corresponding transformation object\n-\t *\/\n-\tpublic static IMRITransformation createTransformation(MRI mri) {\n-\t\tString transformationName = getTransformationName(mri);\n-\t\tif (TRANSFORMATION_FACTORIES.containsKey(transformationName)) {\n-\t\t\tProperties properties = createProperties(mri);\n-\t\t\treturn TRANSFORMATION_FACTORIES.get(transformationName).createTransformation(properties);\n-\t\t}\n-\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE,\n-\t\t\t\t\"Could not instantiate unknown transformation type \" + transformationName + \"!\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\treturn null;\n-\t}\n-\n-\t\/**\n-\t * Returns the different available transformation factories.\n-\t *\n-\t * @return the set of transformation factories\n-\t *\/\n-\tpublic static Iterable<IMRITransformationFactory> getFactories() {\n-\t\treturn Collections.unmodifiableCollection(TRANSFORMATION_FACTORIES.values());\n-\t}\n-\n-\tprivate static String getTransformationName(MRI mri) {\n-\t\tString path = mri.getDataPath();\n-\t\tint partitionIndex = path.indexOf('?');\n-\t\tif (partitionIndex >= 0) {\n-\t\t\treturn path.substring(0, partitionIndex);\n-\t\t}\n-\t\treturn path;\n-\t}\n-\n-\tprivate static Properties createProperties(MRI mri) {\n-\t\tProperties properties = new Properties();\n-\t\tString path = mri.getDataPath();\n-\t\tint partitionIndex = path.indexOf('?');\n-\t\tif (partitionIndex >= 0) {\n-\t\t\tpath = path.substring(partitionIndex + 1);\n-\t\t\tfor (String property : path.split(\"&\")) { \/\/$NON-NLS-1$\n-\t\t\t\tint equalIndex = property.indexOf('=');\n-\t\t\t\tproperties.put(property.substring(0, equalIndex), property.substring(equalIndex + 1));\n-\t\t\t}\n-\t\t}\n-\t\treturn properties;\n-\t}\n-\n-\tpublic static void forwardMetadata(\n-\t\tIMRIMetadataService metadataService, MRI mri, IMRIMetadata attributeMetadata, String textPattern) {\n-\t\tmetadataService.setMetadata(mri, IMRIMetadataProvider.KEY_DISPLAY_NAME,\n-\t\t\t\tNLS.bind(textPattern, attributeMetadata.getMetadata(IMRIMetadataProvider.KEY_DISPLAY_NAME)));\n-\t\tmetadataService.setMetadata(mri, IMRIMetadataProvider.KEY_DESCRIPTION,\n-\t\t\t\tNLS.bind(textPattern, attributeMetadata.getMetadata(IMRIMetadataProvider.KEY_DESCRIPTION)));\n-\t\tmetadataService.setMetadata(mri, IMRIMetadataProvider.KEY_UPDATE_TIME,\n-\t\t\t\t(String) attributeMetadata.getMetadata(IMRIMetadataProvider.KEY_UPDATE_TIME));\n-\t\tmetadataService.setMetadata(mri, IMRIMetadataProvider.KEY_UNIT_STRING,\n-\t\t\t\t(String) attributeMetadata.getMetadata(IMRIMetadataProvider.KEY_UNIT_STRING));\n-\t}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/MRITransformationToolkit.java","additions":4,"deletions":83,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.subscription.internal;\n-\n-import java.util.Properties;\n-import java.util.logging.Level;\n-\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.subscription.IMRITransformation;\n-import org.openjdk.jmc.rjmx.subscription.IMRITransformationFactory;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-\n-\/**\n- * A transformation factory used be several of our own transformations.\n- *\/\n-public class SingleMRITransformationFactory implements IMRITransformationFactory {\n-\n-\tprivate static final String TRANSFORMATION_CLASS_NAME_PROPERTY = \"transformationClass\"; \/\/$NON-NLS-1$\n-\tprivate Properties m_properties;\n-\tprivate Properties m_transformationProperties;\n-\n-\t@Override\n-\tpublic void setFactoryProperties(Properties properties, Properties transformationProperties) {\n-\t\tm_properties = properties;\n-\t\tm_transformationProperties = transformationProperties;\n-\t}\n-\n-\t@Override\n-\tpublic IMRITransformation createTransformation(Properties properties) {\n-\t\tString className = m_properties.getProperty(TRANSFORMATION_CLASS_NAME_PROPERTY);\n-\t\tif (className == null) {\n-\t\t\treturn null;\n-\t\t}\n-\t\ttry {\n-\t\t\t@SuppressWarnings(\"unchecked\")\n-\t\t\tClass<IMRITransformation> clz = (Class<IMRITransformation>) Class.forName(className);\n-\t\t\tIMRITransformation transformation = clz.newInstance();\n-\t\t\tproperties.putAll(m_transformationProperties);\n-\t\t\ttransformation.setProperties(properties);\n-\t\t\treturn transformation;\n-\t\t} catch (ClassNotFoundException e) {\n-\t\t\tlogException(e);\n-\t\t} catch (InstantiationException e) {\n-\t\t\tlogException(e);\n-\t\t} catch (IllegalAccessException e) {\n-\t\t\tlogException(e);\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate void logException(Exception e) {\n-\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Unable to create transformation!\", e); \/\/$NON-NLS-1$\n-\t}\n-\n-\t@Override\n-\tpublic String getVisualizationLabel() {\n-\t\treturn m_properties.getProperty(\"visualizeLabel\"); \/\/$NON-NLS-1$\n-\t}\n-\n-\t@Override\n-\tpublic MRI createTransformationMRI(MRI mri) {\n-\t\tString transformationName = m_properties.getProperty(MRITransformationToolkit.TRANSFORMATION_NAME_ATTRIBUTE);\n-\t\t\/\/ FIXME: Would be nice to not have to specify an ObjectName but until then let us use something meaningful.\n-\t\treturn new MRI(MRI.Type.TRANSFORMATION, \"transformation:type=\" + transformationName, \/\/$NON-NLS-1$\n-\t\t\t\ttransformationName + \"?attribute=\" + mri); \/\/$NON-NLS-1$\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/SingleMRITransformationFactory.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,2 +48,2 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/SyntheticAttributeToolkit.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,87 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.subscription.internal;\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRITransformation;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n-\n-\/**\n- * Will encapsulate an attribute transformation and set up subscriptions of all attributes that the\n- * transformation reports as used. Will propagate updated values for the transformation.\n- *\/\n-public class TransformationSubscription extends AbstractAttributeSubscription {\n-\n-\tprivate final IMRITransformation m_transformation;\n-\tprivate final IMRIValueListener m_mriListener;\n-\tprivate final ISubscriptionService m_subscriptionService;\n-\n-\tpublic TransformationSubscription(IConnectionHandle connectionHandle, IMRIMetadata info,\n-\t\t\tIMRITransformation transformation) {\n-\t\tsuper(connectionHandle, info);\n-\n-\t\tm_transformation = transformation;\n-\t\tm_mriListener = createListener();\n-\t\tm_subscriptionService = getConnectionHandle().getServiceOrDummy(ISubscriptionService.class);\n-\t\tfor (MRI mri : transformation.getAttributes()) {\n-\t\t\tm_subscriptionService.addMRIValueListener(mri, m_mriListener);\n-\t\t}\n-\t\ttransformation.extendMetadata(connectionHandle.getServiceOrDummy(IMRIMetadataService.class), info);\n-\t}\n-\n-\tprivate IMRIValueListener createListener() {\n-\t\treturn new IMRIValueListener() {\n-\t\t\t@Override\n-\t\t\tpublic void valueChanged(MRIValueEvent event) {\n-\t\t\t\tObject eventValue = m_transformation.createSubscriptionValue(event);\n-\t\t\t\tif (eventValue != IMRITransformation.NO_VALUE) {\n-\t\t\t\t\tMRIValueEvent newEvent = new MRIValueEvent(getMRIMetadata().getMRI(), event.getTimestamp(),\n-\t\t\t\t\t\t\teventValue);\n-\t\t\t\t\tfireAttributeChange(newEvent);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t};\n-\t}\n-\n-\t\/**\n-\t * Unsubscribes to the transformation attributes.\n-\t *\/\n-\tpublic void unregisterSubscription() {\n-\t\tm_subscriptionService.removeMRIValueListener(m_mriListener);\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/TransformationSubscription.java","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -39,0 +38,10 @@\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.IUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.DefaultUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.OneShotUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.SimpleUpdatePolicy;\n@@ -40,6 +49,0 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.IUpdatePolicy;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/UpdatePolicyToolkit.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/package-info.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,2 @@\n- * and transformations are addressed with {@link org.openjdk.jmc.rjmx.subscription.MRI} combining\n- * the MBean {@link javax.management.ObjectName} and the actual resource name.\n+ * and transformations are addressed with {@link org.openjdk.jmc.rjmx.common.subscription.MRI}\n+ * combining the MBean {@link javax.management.ObjectName} and the actual resource name.\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/package-info.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,150 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.subscription.storage.internal;\n-\n-import java.util.ArrayList;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Observable;\n-import java.util.Observer;\n-\n-import org.openjdk.jmc.common.collection.BoundedList;\n-import org.openjdk.jmc.common.xydata.DefaultTimestampedData;\n-import org.openjdk.jmc.common.xydata.ITimestampedData;\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.preferences.PreferencesKeys;\n-import org.openjdk.jmc.rjmx.services.IAttributeStorage;\n-import org.openjdk.jmc.rjmx.services.MRIDataSeries;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n-\n-\/**\n- * Simple attribute storage that contains attribute events.\n- * <p>\n- * NOTE: You must synchronize on the storage if you use the dataseries iterator!\n- *\/\n-public class BufferingAttributeStorage extends Observable implements IAttributeStorage {\n-\n-\tprivate static int preferenceLookupCounter = 0;\n-\tprivate static int currentRetainedEventValues;\n-\n-\tprivate static int lookupRetainedEventValues() {\n-\t\tif (preferenceLookupCounter++ % 1000 == 0) {\n-\t\t\tcurrentRetainedEventValues = RJMXPlugin.getDefault().getRJMXPreferences().getInt(\n-\t\t\t\t\tPreferencesKeys.PROPERTY_RETAINED_EVENT_VALUES, PreferencesKeys.DEFAULT_RETAINED_EVENT_VALUES);\n-\t\t}\n-\t\treturn currentRetainedEventValues;\n-\t}\n-\n-\tprivate final BoundedList<ITimestampedData> cache = new BoundedList<>(lookupRetainedEventValues());\n-\tprivate final MRI mri;\n-\tprivate final ISubscriptionService subscriptionService;\n-\tprivate final IMRIValueListener valueListener = new IMRIValueListener() {\n-\t\t@Override\n-\t\tpublic void valueChanged(MRIValueEvent event) {\n-\t\t\tObject value = event.getValue();\n-\t\t\tif (value instanceof Number) {\n-\t\t\t\tif (lookupRetainedEventValues() != cache.getMaxSize()) {\n-\t\t\t\t\tcache.setMaxSize(Math.max(lookupRetainedEventValues(), Math.max(cache.getSize() - 1000, 1)));\n-\t\t\t\t}\n-\t\t\t\tDefaultTimestampedData data = new DefaultTimestampedData(event.getTimestamp() * 1000 * 1000L,\n-\t\t\t\t\t\t((Number) value).doubleValue());\n-\t\t\t\tcache.add(data);\n-\t\t\t\tsetChanged();\n-\t\t\t\tnotifyObservers(data);\n-\t\t\t}\n-\t\t}\n-\t};\n-\tprivate final List<MRIDataSeries> dataSeries = new ArrayList<>(1);\n-\n-\tpublic BufferingAttributeStorage(MRI attribute, ISubscriptionService subscriptionService) {\n-\t\tmri = attribute;\n-\t\tthis.subscriptionService = subscriptionService;\n-\t\tdataSeries.add(new MRIDataSeries() {\n-\n-\t\t\t@Override\n-\t\t\tpublic Iterator<ITimestampedData> createIterator(long min, long max) {\n-\t\t\t\treturn cache.iterator();\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic MRI getAttribute() {\n-\t\t\t\treturn mri;\n-\t\t\t}\n-\t\t});\n-\n-\t}\n-\n-\t@Override\n-\tpublic long getDataStart() {\n-\t\tITimestampedData first = cache.getFirst();\n-\t\treturn first != null ? first.getX() : Long.MAX_VALUE;\n-\t}\n-\n-\t@Override\n-\tpublic long getDataEnd() {\n-\t\tITimestampedData last = cache.getLast();\n-\t\treturn last != null ? last.getX() : Long.MIN_VALUE;\n-\t}\n-\n-\t@Override\n-\tpublic synchronized void addObserver(Observer o) {\n-\t\tif (countObservers() == 0) {\n-\t\t\tsubscriptionService.addMRIValueListener(mri, valueListener);\n-\t\t}\n-\t\tsuper.addObserver(o);\n-\t}\n-\n-\t@Override\n-\tpublic synchronized void deleteObserver(Observer o) {\n-\t\tsuper.deleteObserver(o);\n-\t\tif (countObservers() == 0) {\n-\t\t\tsubscriptionService.removeMRIValueListener(mri, valueListener);\n-\t\t}\n-\t}\n-\n-\tvoid dispose() {\n-\t\tsubscriptionService.removeMRIValueListener(mri, valueListener);\n-\t}\n-\n-\t@Override\n-\tpublic List<MRIDataSeries> getDataSeries() {\n-\t\treturn dataSeries;\n-\t}\n-\n-\tpublic int getRetainedLength() {\n-\t\treturn cache.getSize();\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/storage\/internal\/BufferingAttributeStorage.java","additions":0,"deletions":150,"binary":false,"changes":150,"status":"deleted"},{"patch":"@@ -1,94 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.rjmx.subscription.storage.internal;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-\n-import org.openjdk.jmc.rjmx.internal.IDisposableService;\n-import org.openjdk.jmc.rjmx.services.IAttributeStorage;\n-import org.openjdk.jmc.rjmx.services.IAttributeStorageService;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-\n-\/**\n- * Default implementation of {@link IAttributeStorageService}. Keeps a pretty rigid synchronization\n- * on the methods.\n- *\/\n-public class DefaultAttributeStorageService implements IAttributeStorageService, IDisposableService {\n-\n-\tprivate final ISubscriptionService attributeSubscriptionService;\n-\tprivate Map<MRI, BufferingAttributeStorage> activeStorages = new HashMap<>();\n-\n-\t\/**\n-\t * Creates a new {@link IAttributeStorageService}.\n-\t *\n-\t * @param subscriptionService\n-\t *\/\n-\tpublic DefaultAttributeStorageService(ISubscriptionService subscriptionService) {\n-\t\tattributeSubscriptionService = subscriptionService;\n-\t}\n-\n-\t@Override\n-\tpublic synchronized IAttributeStorage getAttributeStorage(MRI mri) {\n-\t\tif (activeStorages == null) {\n-\t\t\tthrow new IllegalStateException(\"Attribute storage service is disposed!\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tBufferingAttributeStorage storage = activeStorages.get(mri);\n-\t\tif (storage == null) {\n-\t\t\tstorage = new BufferingAttributeStorage(mri, attributeSubscriptionService);\n-\t\t\tactiveStorages.put(mri, storage);\n-\t\t}\n-\t\treturn storage;\n-\t}\n-\n-\t@Override\n-\tpublic int getRetainedLength(MRI mri) {\n-\t\tif (activeStorages == null) {\n-\t\t\tthrow new IllegalStateException(\"Attribute storage service is disposed!\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tBufferingAttributeStorage storage = activeStorages.get(mri);\n-\t\tif (storage != null) {\n-\t\t\treturn storage.getRetainedLength();\n-\t\t}\n-\t\treturn 0;\n-\t}\n-\n-\t@Override\n-\tpublic synchronized void dispose() {\n-\t\tfor (BufferingAttributeStorage s : activeStorages.values()) {\n-\t\t\ts.dispose();\n-\t\t}\n-\t\tactiveStorages = null;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/storage\/internal\/DefaultAttributeStorageService.java","additions":0,"deletions":94,"binary":false,"changes":94,"status":"deleted"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-\/**\n- * This package is internal to the JMC team. Java docs must not be generated for this package! If\n- * you see this in generated javadocs, report a bug!\n- *\/\n-package org.openjdk.jmc.rjmx.subscription.storage.internal;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/storage\/internal\/package-info.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/IActivatableTriggerAction.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/IExceptionHandler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,3 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/ITrigger.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n@@ -37,2 +38,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/ITriggerAction.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,1 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/TriggerAction.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/TriggerEvent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/TriggerRule.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.services.IDiagnosticCommandService;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/actions\/internal\/TriggerActionDiagnosticCommand.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -47,0 +46,1 @@\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/actions\/internal\/TriggerActionHPROF.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import org.openjdk.jmc.common.resource.Resource;\n@@ -56,1 +57,0 @@\n-import org.openjdk.jmc.ui.common.resource.Resource;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/extension\/internal\/TriggerComponent.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -39,0 +38,1 @@\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/internal\/DefaultExceptionHandler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/internal\/NotificationRegistry.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,4 +43,4 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/internal\/NotificationRuleBag.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -46,2 +45,3 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/triggers\/internal\/NotificationTrigger.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,3 @@\n+import org.openjdk.jmc.common.tree.IParent;\n+import org.openjdk.jmc.rjmx.common.services.IAttributeInfo;\n+import org.openjdk.jmc.rjmx.common.util.internal.SimpleAttributeInfo;\n@@ -48,1 +51,0 @@\n-import org.openjdk.jmc.rjmx.services.IAttributeInfo;\n@@ -52,1 +54,0 @@\n-import org.openjdk.jmc.ui.common.tree.IParent;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/util\/internal\/AbstractReadOnlyAttribute.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import org.openjdk.jmc.rjmx.common.services.IAttributeInfo;\n+import org.openjdk.jmc.rjmx.common.util.internal.SimpleAttributeInfo;\n@@ -36,1 +38,0 @@\n-import org.openjdk.jmc.rjmx.services.IAttributeInfo;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/util\/internal\/DefaultAttribute.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import org.openjdk.jmc.common.tree.IParent;\n@@ -40,1 +41,0 @@\n-import org.openjdk.jmc.ui.common.tree.IParent;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/util\/internal\/PartitionedList.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,2 +40,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n@@ -43,0 +41,2 @@\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/util\/internal\/RJMXStartCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,10 +33,0 @@\n-ConnectionException_COULD_NOT_CONNECT_MSG=Could not connect to {0}. Make sure the JVM is running and that you are using the correct protocol in the Service URL ({1}).\n-ConnectionException_COULD_NOT_DETERMINE_IP_MSG=Could not determine IP address for {0}\n-ConnectionException_NAME_NOT_FOUND_MSG=Name cannot be found for {0}. Please check the Service URL ({1}).\n-ConnectionException_UNABLE_TO_CREATE_INITIAL_CONTEXT=Unable to create initial context for {0}. Please check the Service URL ({1}).\n-ConnectionException_MALFORMED_URL_MSG=The URL for {0} is not in a valid format. Please check the Service URL ({1}).\n-ConnectionException_UNABLE_TO_RESOLVE_CREDENTIALS=Unable to resolve the connection credentials for {0}. Problem was: {1}\n-ConnectionException_MSARMI_CHECK_PASSWORD=Unable to connect with msarmi protocol for {0}, using Service URL {1}. Verify that you have entered the correct password.\n-ConnectionException_ATTACH_NOT_SUPPORTED=Attaching to the local JVM {0} is not supported: {1}\n-ConnectionException_UNRESOLVED=Unresolved\n-\n@@ -61,2 +51,0 @@\n-\n-LABEL_NOT_AVAILABLE=N\/A\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/messages\/internal\/messages.properties","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1,33 +0,0 @@\n-#\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-#\n-#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-#  The contents of this file are subject to the terms of either the Universal Permissive License \n-#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n-#   \n-#  or the following license:\n-#   \n-#  Redistribution and use in source and binary forms, with or without modification, are permitted\n-#  provided that the following conditions are met:\n-#   \n-#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n-#  and the following disclaimer.\n-#   \n-#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n-#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n-#  the distribution.\n-#   \n-#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n-#  endorse or promote products derived from this software without specific prior written permission.\n-#\n-#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n-#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n-#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n-#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n-#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-#\n-MBeanOperationsWrapper_DESCRIPTOR=Descriptor\n","filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/services\/internal\/messages.properties","additions":0,"deletions":33,"binary":false,"changes":33,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,1 @@\n-\n+import org.openjdk.jmc.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/action\/UserActionJob.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,87 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.ui.common.labelingrules;\n-\n-import java.util.HashMap;\n-\n-import org.openjdk.jmc.ui.common.labelingrules.NameConverter.ValueArrayInfo;\n-\n-\/**\n- * Constant mapping database.\n- *\/\n-final class Constants {\n-\t\/\/ A mapping from constants to their expanded form.\n-\tprivate final static HashMap<String, Object> constants = new HashMap<>();\n-\tprivate final static Constants instance = new Constants();\n-\n-\tstatic Constants getInstance() {\n-\t\treturn instance;\n-\t}\n-\n-\tpublic Constants() {\n-\t\tinitDefaultConstants();\n-\t}\n-\n-\tprivate void initDefaultConstants() {\n-\t\t\/\/ setConstant(\"ThisPID\", MessageFormat.format(\"{0,number,#}\", new Object[] {Integer.valueOf(MBeanToolkit.getThisPID())})); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tfor (ValueArrayInfo info : ValueArrayInfo.values()) {\n-\t\t\tsetConstant(info.getValueName(), info.getMatchExpression());\n-\t\t}\n-\t\tsetConstant(\"StrConstDebug\", Messages.NameConverter_DEBUG); \/\/$NON-NLS-1$\n-\t\tsetConstant(\"StrConstJVMJRockit\", Messages.NameConverter_JVM_TYPE_JROCKIT); \/\/$NON-NLS-1$\n-\t\tsetConstant(\"StrConstJVMUnknown\", Messages.NameConverter_JVM_TYPE_UNKNOWN); \/\/$NON-NLS-1$\n-\t}\n-\n-\t\/**\n-\t * Adds a constant to this name converter.\n-\t *\n-\t * @param key\n-\t *            the name of the constant.\n-\t * @param value\n-\t *            the value to assign the constant.\n-\t *\/\n-\tpublic void setConstant(String key, Object value) {\n-\t\tif (value == null) {\n-\t\t\tthrow new IllegalArgumentException(\"You may not add a variable which has a value that is null!\"); \/\/$NON-NLS-1$\n-\t\t}\n-\t\tconstants.put(key, value);\n-\t}\n-\n-\tpublic Object getConstant(String key) {\n-\t\treturn constants.get(key);\n-\t}\n-\n-\tpublic boolean containsConstant(String key) {\n-\t\treturn constants.containsKey(key);\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/Constants.java","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.ui.common.labelingrules;\n-\n-import org.eclipse.osgi.util.NLS;\n-\n-public class Messages extends NLS {\n-\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.ui.common.labelingrules.messages\"; \/\/$NON-NLS-1$\n-\n-\tpublic static String NameConverter_DEBUG;\n-\tpublic static String NameConverter_JVM_ARCH_32BIT;\n-\tpublic static String NameConverter_JVM_ARCH_64BIT;\n-\tpublic static String NameConverter_JVM_ARCH_OTHER;\n-\tpublic static String NameConverter_JVM_ARCH_UNKNOWN;\n-\tpublic static String NameConverter_JVM_TYPE_HOTSPOT;\n-\tpublic static String NameConverter_JVM_TYPE_JROCKIT;\n-\tpublic static String NameConverter_JVM_TYPE_OTHER;\n-\tpublic static String NameConverter_JVM_TYPE_UNKNOWN;\n-\tpublic static String NameConverter_LOCAL_NAME_TEMPLATE;\n-\tpublic static String NameConverter_UNKNOWN_LOCAL_JVM;\n-\n-\tstatic {\n-\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n-\t}\n-\n-\tprivate Messages() {\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/Messages.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,237 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.ui.common.labelingrules;\n-\n-import java.text.MessageFormat;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Comparator;\n-import java.util.List;\n-import java.util.logging.Level;\n-\n-import org.eclipse.core.runtime.IConfigurationElement;\n-import org.eclipse.core.runtime.IExtension;\n-import org.eclipse.core.runtime.IExtensionPoint;\n-import org.eclipse.core.runtime.IExtensionRegistry;\n-import org.eclipse.core.runtime.Platform;\n-import org.openjdk.jmc.common.jvm.JVMCommandLineToolkit;\n-import org.openjdk.jmc.common.jvm.JVMDescriptor;\n-import org.openjdk.jmc.common.util.Environment;\n-import org.openjdk.jmc.ui.common.CorePlugin;\n-import org.openjdk.jmc.ui.common.idesupport.IDESupportFactory;\n-import org.openjdk.jmc.ui.common.resource.Resource;\n-\n-\/**\n- * Converts names according to rules specified with the {@value #LABELING_RULES_EXTENSION_POINT}\n- * extension point.\n- *\/\n-public final class NameConverter {\n-\tprivate static final String LABELING_RULES_EXTENSION_POINT = \"org.openjdk.jmc.ui.common.labelingRules\"; \/\/$NON-NLS-1$\n-\tprivate static final String ATTRIBUTE_ICON = \"icon\"; \/\/$NON-NLS-1$\n-\tprivate static final Comparator<NamingRule> COMPARATOR = new Comparator<NamingRule>() {\n-\t\t@Override\n-\t\tpublic int compare(NamingRule o1, NamingRule o2) {\n-\t\t\treturn o2.getPriority() - o1.getPriority();\n-\t\t}\n-\t};\n-\n-\tprivate static final NameConverter INSTANCE = new NameConverter();\n-\n-\tstatic enum ValueArrayInfo {\n-\t\tJAVAVERSION(0, \"JDK\", \"{0}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tJVMTYPE(1, \"JVMType\", \"{1}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tJVMARCH(2, \"JVMArch\", \"{2}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tNAME(3, \"Name\", \"{3}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tJAVACOMMAND(4, \"JavaCmd\", \"{4}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tPID(5, \"PID\", \"{5}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tDEBUG(6, \"IsDebug\", \"{6}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\tJVMARGS(7, \"JVMArgs\", \"{7}\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\n-\t\tprivate int index;\n-\t\tprivate String valueName;\n-\t\tprivate String matchExpression;\n-\n-\t\tValueArrayInfo(int index, String valueName, String matchExpression) {\n-\t\t\tthis.index = index;\n-\t\t\tthis.valueName = valueName;\n-\t\t\tthis.matchExpression = matchExpression;\n-\t\t}\n-\n-\t\tpublic int getIndex() {\n-\t\t\treturn index;\n-\t\t}\n-\n-\t\tpublic String getValueName() {\n-\t\t\treturn valueName;\n-\t\t}\n-\n-\t\tpublic String getMatchExpression() {\n-\t\t\treturn matchExpression;\n-\t\t}\n-\t}\n-\n-\tprivate final List<NamingRule> rules = new ArrayList<>();\n-\n-\t\/**\n-\t * @return a singleton instance\n-\t *\/\n-\tpublic static NameConverter getInstance() {\n-\t\treturn INSTANCE;\n-\t}\n-\n-\t\/**\n-\t * Create a new name converter instance. This should only be used if you want a new, clean\n-\t * instance. Normally the {@link NameConverter#getInstance()} method should be used instead to\n-\t * get a singleton instance.\n-\t *\/\n-\tpublic NameConverter() {\n-\t\tinitializeRulesFromExtensions();\n-\t}\n-\n-\t\/**\n-\t * @param descriptor\n-\t * @return the properly formatted values. If no matching formatter could be found, the default\n-\t *         format String as defined in NameConverter_LOCAL_NAME_TEMPLATE will be used.\n-\t *\/\n-\tpublic String format(JVMDescriptor descriptor) {\n-\t\t\/\/ FIXME: Somehow rewrite this to avoid things like [Unknown][Unknown] and empty () when the pid is unknown.\n-\t\t\/\/ JDP being the typical use case.\n-\t\tObject[] values = prepareValues(descriptor);\n-\t\tNamingRule rule = getMatchingRule(values);\n-\t\tif (rule != null) {\n-\t\t\treturn rule.format(values);\n-\t\t}\n-\t\t\/\/ Should always be a catch all rule, but if someone messes up, we will use the LOCAL_NAME_TEMPLATE.\n-\t\treturn MessageFormat.format(Messages.NameConverter_LOCAL_NAME_TEMPLATE, descriptor);\n-\t}\n-\n-\tpublic Resource getImageResource(JVMDescriptor descriptor) {\n-\t\tNamingRule rule = getMatchingRule(prepareValues(descriptor));\n-\t\treturn rule == null ? null : rule.getImageResource();\n-\t}\n-\n-\t\/**\n-\t * Adds a rule to the name converter.\n-\t * <p>\n-\t * Adding rules should normally not be done using this method, but rather through the\n-\t * {@value #LABELING_RULES_EXTENSION_POINT} extension point.\n-\t *\n-\t * @param rule\n-\t *            the rule to add.\n-\t *\/\n-\tpublic void addNamingRule(NamingRule rule) {\n-\t\trules.add(rule);\n-\t\trules.sort(COMPARATOR);\n-\t}\n-\n-\t\/**\n-\t * @return an immutable list of the available rules.\n-\t *\/\n-\tpublic List<NamingRule> getRules() {\n-\t\treturn Collections.unmodifiableList(rules);\n-\t}\n-\n-\tprivate NamingRule getMatchingRule(Object[] values) {\n-\t\tfor (NamingRule rule : rules) {\n-\t\t\ttry {\n-\t\t\t\tif (rule.matches(values)) {\n-\t\t\t\t\treturn rule;\n-\t\t\t\t}\n-\t\t\t} catch (RuntimeException e) {\n-\t\t\t\t\/\/ Silently ignore broken rules for now.\n-\t\t\t}\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate void initializeRulesFromExtensions() {\n-\t\tIExtensionRegistry er = Platform.getExtensionRegistry();\n-\t\tIExtensionPoint ep = er.getExtensionPoint(LABELING_RULES_EXTENSION_POINT);\n-\t\tIExtension[] extensions = ep.getExtensions();\n-\t\tfor (IExtension extension : extensions) {\n-\t\t\tIConfigurationElement[] configs = extension.getConfigurationElements();\n-\t\t\tfor (IConfigurationElement config : configs) {\n-\t\t\t\tif (config.getName().equals(\"rule\")) { \/\/$NON-NLS-1$\n-\t\t\t\t\ttry {\n-\t\t\t\t\t\trules.add(createRule(config));\n-\t\t\t\t\t} catch (Exception e) {\n-\t\t\t\t\t\tCorePlugin.getDefault().getLogger().log(Level.SEVERE, e.getMessage(), e);\n-\t\t\t\t\t}\n-\t\t\t\t}\n-\t\t\t}\n-\t\t}\n-\t\trules.sort(COMPARATOR);\n-\t}\n-\n-\tprivate NamingRule createRule(IConfigurationElement config) throws Exception {\n-\t\tString name = config.getAttribute(\"name\"); \/\/$NON-NLS-1$\n-\t\t\/\/ Try\/Catch here to at least have a chance of providing the user with a hint\n-\t\t\/\/ should something go wrong.\n-\t\ttry {\n-\t\t\tint priority = Integer.parseInt(config.getAttribute(\"priority\")); \/\/$NON-NLS-1$\n-\t\t\tString matchingPart = config.getAttribute(\"match\"); \/\/$NON-NLS-1$\n-\t\t\tString formattingPart = config.getAttribute(\"format\"); \/\/$NON-NLS-1$\n-\t\t\treturn new NamingRule(name, matchingPart, formattingPart, priority, getIcon(config));\n-\t\t} catch (Exception e) {\n-\t\t\tthrow new Exception(\"Problem instantiating naming rule named \" + name); \/\/$NON-NLS-1$\n-\t\t}\n-\t}\n-\n-\tprivate Resource getIcon(IConfigurationElement configElement) {\n-\t\tString iconName = configElement.getAttribute(ATTRIBUTE_ICON);\n-\t\tif (iconName != null) {\n-\t\t\tString extendingPluginId = configElement.getDeclaringExtension().getContributor().getName();\n-\t\t\treturn new Resource(extendingPluginId, iconName);\n-\t\t}\n-\t\treturn null;\n-\t}\n-\n-\tprivate Object[] prepareValues(JVMDescriptor descriptor) {\n-\t\treturn new Object[] {descriptor.getJavaVersion(), descriptor.getJvmType(), descriptor.getJvmArch(),\n-\t\t\t\tgetValidName(descriptor), descriptor.getJavaCommand(),\n-\t\t\t\tdescriptor.getPid() != null ? String.valueOf(descriptor.getPid()) : \"\", descriptor.isDebug(), \/\/$NON-NLS-1$\n-\t\t\t\tdescriptor.getJVMArguments()};\n-\t}\n-\n-\tprivate String getValidName(JVMDescriptor descriptor) {\n-\t\tInteger pid = descriptor.getPid();\n-\t\tif (pid != null && pid.intValue() == Environment.getThisPID() && descriptor.isAttachable()) {\n-\t\t\treturn IDESupportFactory.getIDESupport().getIdentity() + \".this\"; \/\/$NON-NLS-1$\n-\t\t}\n-\t\tString name = JVMCommandLineToolkit.getMainClassOrJar(descriptor.getJavaCommand());\n-\t\tif (name != null && name.length() > 0) {\n-\t\t\treturn name;\n-\t\t}\n-\t\treturn Messages.NameConverter_UNKNOWN_LOCAL_JVM;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/NameConverter.java","additions":0,"deletions":237,"binary":false,"changes":237,"status":"deleted"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Red Hat Inc. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.ui.common.labelingrules;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.logging.Level;\n+\n+import org.eclipse.core.runtime.IConfigurationElement;\n+import org.eclipse.core.runtime.IExtension;\n+import org.eclipse.core.runtime.IExtensionPoint;\n+import org.eclipse.core.runtime.IExtensionRegistry;\n+import org.eclipse.core.runtime.Platform;\n+import org.openjdk.jmc.common.labelingrules.NamingRule;\n+import org.openjdk.jmc.common.resource.Resource;\n+import org.openjdk.jmc.ui.common.CorePlugin;\n+\n+public class NameConverterRulesInitializer {\n+\tprivate static final String LABELING_RULES_EXTENSION_POINT = \"org.openjdk.jmc.ui.common.labelingRules\"; \/\/$NON-NLS-1$\n+\tprivate static final String ATTRIBUTE_ICON = \"icon\"; \/\/$NON-NLS-1$\n+\tprivate static final Comparator<NamingRule> COMPARATOR = new Comparator<NamingRule>() {\n+\t\t@Override\n+\t\tpublic int compare(NamingRule o1, NamingRule o2) {\n+\t\t\treturn o2.getPriority() - o1.getPriority();\n+\t\t}\n+\t};\n+\n+\tpublic static List<NamingRule> initializeRulesFromExtensions() {\n+\t\tList<NamingRule> rules = new ArrayList<>();\n+\t\tIExtensionRegistry er = Platform.getExtensionRegistry();\n+\t\tIExtensionPoint ep = er.getExtensionPoint(LABELING_RULES_EXTENSION_POINT);\n+\t\tIExtension[] extensions = ep.getExtensions();\n+\t\tfor (IExtension extension : extensions) {\n+\t\t\tIConfigurationElement[] configs = extension.getConfigurationElements();\n+\t\t\tfor (IConfigurationElement config : configs) {\n+\t\t\t\tif (config.getName().equals(\"rule\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\trules.add(createRule(config));\n+\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\tCorePlugin.getDefault().getLogger().log(Level.SEVERE, e.getMessage(), e);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\trules.sort(COMPARATOR);\n+\t\treturn rules;\n+\t}\n+\n+\tprivate static NamingRule createRule(IConfigurationElement config) throws Exception {\n+\t\tString name = config.getAttribute(\"name\"); \/\/$NON-NLS-1$\n+\t\t\/\/ Try\/Catch here to at least have a chance of providing the user with a hint\n+\t\t\/\/ should something go wrong.\n+\t\ttry {\n+\t\t\tint priority = Integer.parseInt(config.getAttribute(\"priority\")); \/\/$NON-NLS-1$\n+\t\t\tString matchingPart = config.getAttribute(\"match\"); \/\/$NON-NLS-1$\n+\t\t\tString formattingPart = config.getAttribute(\"format\"); \/\/$NON-NLS-1$\n+\t\t\treturn new NamingRule(name, matchingPart, formattingPart, priority, getIcon(config));\n+\t\t} catch (Exception e) {\n+\t\t\tthrow new Exception(\"Problem instantiating naming rule named \" + name); \/\/$NON-NLS-1$\n+\t\t}\n+\t}\n+\n+\tprivate static Resource getIcon(IConfigurationElement configElement) {\n+\t\tString iconName = configElement.getAttribute(ATTRIBUTE_ICON);\n+\t\tif (iconName != null) {\n+\t\t\tString extendingPluginId = configElement.getDeclaringExtension().getContributor().getName();\n+\t\t\treturn new Resource(extendingPluginId, iconName);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/NameConverterRulesInitializer.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -1,193 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.ui.common.labelingrules;\n-\n-import java.util.HashMap;\n-\n-import org.openjdk.jmc.common.jvm.JVMArch;\n-import org.openjdk.jmc.common.jvm.JVMType;\n-import org.openjdk.jmc.ui.common.labelingrules.NameConverter.ValueArrayInfo;\n-\n-\/**\n- * Variable mapping database.\n- *\/\n-class Variables {\n-\t\/\/ A mapping from variables to IVariableEvaluator.\n-\tprivate final static HashMap<String, IVariableEvaluator> variables = new HashMap<>();\n-\tprivate final static Variables instance = new Variables();\n-\n-\tpublic Variables() {\n-\t\tinitDefaultVariables();\n-\t}\n-\n-\t\/\/ Variables are late bound matching variables that (for performance reasons) will be applied to the resulting\n-\t\/\/ string just before returning it.\n-\tprivate void initDefaultVariables() {\n-\t\t\/\/ FIXME: Could possibly be a good idea to combine JVMType and JVMArch into one enum, at least to avoid \"[Unknown][Unknown]\"\n-\t\t\/\/ This occurs for JDP connections.\n-\t\tvariables.put(\"StrJVMType\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n-\t\t\t@Override\n-\t\t\tpublic String evaluate(Object[] input) {\n-\t\t\t\tJVMType type = (JVMType) input[ValueArrayInfo.JVMTYPE.getIndex()];\n-\t\t\t\tString typeStr = getLocalizedTypeStr(type);\n-\t\t\t\tif (typeStr == null) {\n-\t\t\t\t\treturn \"\"; \/\/$NON-NLS-1$\n-\t\t\t\t}\n-\t\t\t\treturn \"[\" + typeStr + \"]\"; \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t\t}\n-\n-\t\t\tprivate String getLocalizedTypeStr(JVMType type) {\n-\t\t\t\tif (type == JVMType.JROCKIT) {\n-\t\t\t\t\treturn Messages.NameConverter_JVM_TYPE_JROCKIT;\n-\t\t\t\t}\n-\t\t\t\tif (type == JVMType.HOTSPOT) {\n-\t\t\t\t\treturn Messages.NameConverter_JVM_TYPE_HOTSPOT;\n-\t\t\t\t}\n-\t\t\t\tif (type == JVMType.OTHER) {\n-\t\t\t\t\treturn Messages.NameConverter_JVM_TYPE_OTHER;\n-\t\t\t\t}\n-\t\t\t\treturn Messages.NameConverter_JVM_TYPE_UNKNOWN;\n-\t\t\t}\n-\t\t});\n-\t\tvariables.put(\"UnsupportedStrJVMType\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n-\t\t\t@Override\n-\t\t\tpublic String evaluate(Object[] input) {\n-\t\t\t\tJVMType type = (JVMType) input[ValueArrayInfo.JVMTYPE.getIndex()];\n-\t\t\t\tString typeStr = getLocalizedTypeStr(type);\n-\t\t\t\tif (typeStr == null) {\n-\t\t\t\t\treturn \"\"; \/\/$NON-NLS-1$\n-\t\t\t\t}\n-\t\t\t\treturn \"[\" + typeStr + \"]\"; \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t\t}\n-\n-\t\t\tprivate String getLocalizedTypeStr(JVMType type) {\n-\t\t\t\tif (type == JVMType.JROCKIT) {\n-\t\t\t\t\treturn Messages.NameConverter_JVM_TYPE_JROCKIT;\n-\t\t\t\t}\n-\t\t\t\tif (type == JVMType.HOTSPOT) {\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t\tif (type == JVMType.OTHER) {\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t\treturn Messages.NameConverter_JVM_TYPE_UNKNOWN;\n-\t\t\t}\n-\t\t});\n-\t\tvariables.put(\"StrJVMArch\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n-\t\t\t@Override\n-\t\t\tpublic String evaluate(Object[] input) {\n-\t\t\t\tJVMArch arch = (JVMArch) input[ValueArrayInfo.JVMARCH.getIndex()];\n-\t\t\t\tString archStr = getLocalizedArchStr(arch);\n-\t\t\t\tif (archStr == null) {\n-\t\t\t\t\treturn \"\"; \/\/$NON-NLS-1$\n-\t\t\t\t}\n-\t\t\t\treturn \"[\" + archStr + \"]\"; \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t\t}\n-\n-\t\t\tprivate String getLocalizedArchStr(JVMArch arch) {\n-\t\t\t\tif (arch == JVMArch.BIT32) {\n-\t\t\t\t\treturn Messages.NameConverter_JVM_ARCH_32BIT;\n-\t\t\t\t}\n-\t\t\t\tif (arch == JVMArch.BIT64) {\n-\t\t\t\t\treturn Messages.NameConverter_JVM_ARCH_64BIT;\n-\t\t\t\t}\n-\t\t\t\tif (arch == JVMArch.OTHER) {\n-\t\t\t\t\treturn Messages.NameConverter_JVM_ARCH_OTHER;\n-\t\t\t\t}\n-\t\t\t\treturn Messages.NameConverter_JVM_ARCH_UNKNOWN;\n-\t\t\t}\n-\t\t});\n-\t\tvariables.put(\"UnsupportedStrJVMArch\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n-\t\t\t@Override\n-\t\t\tpublic String evaluate(Object[] input) {\n-\t\t\t\tJVMArch arch = (JVMArch) input[ValueArrayInfo.JVMARCH.getIndex()];\n-\t\t\t\tJVMType type = (JVMType) input[ValueArrayInfo.JVMTYPE.getIndex()];\n-\t\t\t\tString archStr = getLocalizedArchStr(arch, type);\n-\t\t\t\tif (archStr == null) {\n-\t\t\t\t\treturn \"\"; \/\/$NON-NLS-1$\n-\t\t\t\t}\n-\t\t\t\treturn \"[\" + archStr + \"]\"; \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n-\t\t\t}\n-\n-\t\t\tprivate String getLocalizedArchStr(JVMArch arch, JVMType type) {\n-\t\t\t\tJVMArch thisArch = JVMArch.getCurrentJVMArch();\n-\t\t\t\tif (arch == thisArch) {\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t\tif (arch == JVMArch.BIT32) {\n-\t\t\t\t\treturn Messages.NameConverter_JVM_ARCH_32BIT;\n-\t\t\t\t}\n-\t\t\t\tif (arch == JVMArch.BIT64) {\n-\t\t\t\t\treturn Messages.NameConverter_JVM_ARCH_64BIT;\n-\t\t\t\t}\n-\t\t\t\tif (arch == JVMArch.OTHER) {\n-\t\t\t\t\treturn null;\n-\t\t\t\t}\n-\t\t\t\t\/\/ Avoid showing double [Unknown]\n-\t\t\t\treturn type == JVMType.UNKNOWN ? null : Messages.NameConverter_JVM_ARCH_UNKNOWN;\n-\t\t\t}\n-\t\t});\n-\t\tvariables.put(\"StrDebug\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n-\t\t\t@Override\n-\t\t\tpublic String evaluate(Object[] input) {\n-\t\t\t\treturn \"true\".equals(input[ValueArrayInfo.DEBUG.getIndex()]) ? \"[\" + Messages.NameConverter_DEBUG + \"]\" \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n-\t\t\t\t\t\t: \"\"; \/\/$NON-NLS-1$\n-\t\t\t}\n-\t\t});\n-\t\tvariables.put(\"StrJDK\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n-\t\t\t@Override\n-\t\t\tpublic String evaluate(Object[] input) {\n-\t\t\t\tString version = (String) input[ValueArrayInfo.JAVAVERSION.getIndex()];\n-\t\t\t\treturn version == null ? \"\" : \"[\" + version + \"]\"; \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n-\t\t\t}\n-\t\t});\n-\t\tvariables.put(\"JVMArgs\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n-\t\t\t@Override\n-\t\t\tpublic String evaluate(Object[] input) {\n-\t\t\t\treturn (String) input[ValueArrayInfo.JVMARGS.getIndex()];\n-\t\t\t}\n-\t\t});\n-\t}\n-\n-\tpublic static Variables getInstance() {\n-\t\treturn instance;\n-\t}\n-\n-\tpublic boolean containsVariable(String content) {\n-\t\treturn variables.containsKey(content);\n-\t}\n-\n-\tpublic IVariableEvaluator getVariable(String content) {\n-\t\treturn variables.get(content);\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/Variables.java","additions":0,"deletions":193,"binary":false,"changes":193,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import org.openjdk.jmc.common.resource.Resource;\n+\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/resource\/IImageResource.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.ui.common.resource;\n-\n-\/**\n- * Class identifying a resource in an Eclipse plugin.\n- *\/\n-public class Resource {\n-\n-\tprivate final String pluginId;\n-\tprivate final String resource;\n-\n-\t\/**\n-\t * @param pluginId\n-\t *            id of the Eclipse plugin containing the resource\n-\t * @param resource\n-\t *            resource path within the Eclipse plugin\n-\t *\/\n-\tpublic Resource(String pluginId, String resource) {\n-\t\tthis.pluginId = pluginId;\n-\t\tthis.resource = resource;\n-\t}\n-\n-\tpublic String getPluginId() {\n-\t\treturn pluginId;\n-\t}\n-\n-\tpublic String getResourcePath() {\n-\t\treturn resource;\n-\t}\n-}\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/resource\/Resource.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,47 +0,0 @@\n-#\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n-#\n-#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-#  The contents of this file are subject to the terms of either the Universal Permissive License \n-#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n-#   \n-#  or the following license:\n-#   \n-#  Redistribution and use in source and binary forms, with or without modification, are permitted\n-#  provided that the following conditions are met:\n-#   \n-#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n-#  and the following disclaimer.\n-#   \n-#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n-#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n-#  the distribution.\n-#   \n-#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n-#  endorse or promote products derived from this software without specific prior written permission.\n-#\n-#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n-#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n-#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n-#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n-#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n-#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n-#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n-#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n-#\n-# 0 = Java version.\n-# 1 = LocalConnectionDescriptor_JVM_TYPE_X if a non jrockit JVM.\n-# 2 = The commandline (first part)\n-# 3 = PID\n-NameConverter_LOCAL_NAME_TEMPLATE= ({0}) {1}{2} ({3})\n-NameConverter_JVM_TYPE_UNKNOWN=Unknown\n-NameConverter_JVM_TYPE_OTHER=Other\n-NameConverter_JVM_TYPE_JROCKIT=JRockit\n-NameConverter_JVM_TYPE_HOTSPOT=HotSpot\n-NameConverter_JVM_ARCH_UNKNOWN=Unknown\n-NameConverter_JVM_ARCH_OTHER=Other arch\n-NameConverter_JVM_ARCH_32BIT=32-bit\n-NameConverter_JVM_ARCH_64BIT=64-bit\n-NameConverter_DEBUG=Debug\n-NameConverter_UNKNOWN_LOCAL_JVM=Local\n\\ No newline at end of file\n","filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/resources\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/messages.properties","additions":0,"deletions":47,"binary":false,"changes":47,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,1 @@\n-\n-import org.openjdk.jmc.ui.common.action.IUserAction;\n+import org.openjdk.jmc.common.action.IUserAction;\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/misc\/AbstractWarningAction.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-import org.openjdk.jmc.ui.common.tree.IArray;\n+import org.openjdk.jmc.common.tree.IArray;\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/misc\/ArrayProxy.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,1 @@\n+import org.openjdk.jmc.common.resource.Resource;\n@@ -39,1 +40,0 @@\n-import org.openjdk.jmc.ui.common.resource.Resource;\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/misc\/ImageDescriptorAdapterFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,1 @@\n-\n-import org.openjdk.jmc.ui.common.tree.IArray;\n+import org.openjdk.jmc.common.tree.IArray;\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/misc\/MCArrayContentProvider.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n-\n-import org.openjdk.jmc.ui.common.tree.IArray;\n+import org.openjdk.jmc.common.tree.IArray;\n+import org.openjdk.jmc.common.tree.IParent;\n@@ -42,1 +42,0 @@\n-import org.openjdk.jmc.ui.common.tree.IParent;\n","filename":"application\/org.openjdk.jmc.ui\/src\/main\/java\/org\/openjdk\/jmc\/ui\/misc\/TreeStructureContentProvider.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -108,1 +108,0 @@\n-\t\t<module>org.openjdk.jmc.rjmx.services.jfr<\/module>\n@@ -163,0 +162,5 @@\n+\t\t<dependency>\n+\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t\t<artifactId>rjmx.common<\/artifactId>\n+\t\t\t<version>${revision}${changelist}<\/version>\n+\t\t<\/dependency>\n","filename":"application\/pom.xml","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -15,1 +15,1 @@\n- org.openjdk.jmc.rjmx.services.jfr,\n+ org.openjdk.jmc.rjmx.common,\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.controlpanel.ui.test\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -47,0 +47,3 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -50,0 +53,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeInfo;\n@@ -53,1 +57,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n@@ -56,5 +59,2 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IEventTypeInfo;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.controlpanel.ui.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/model\/test\/EventConfigurationModelTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -45,1 +45,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.controlpanel.ui.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/model\/test\/EventConfigurationTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -44,1 +46,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n@@ -46,3 +47,2 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.controlpanel.ui.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/model\/test\/JfcAndServerSettingsCombinationTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -39,1 +40,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.controlpanel.ui.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/model\/test\/JfrControlTestCase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.events.EventConfiguration;\n@@ -59,1 +61,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.model.EventConfiguration;\n@@ -70,0 +71,1 @@\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n@@ -71,2 +73,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n","filename":"application\/tests\/org.openjdk.jmc.flightrecorder.controlpanel.ui.test\/src\/test\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/test\/PropertyContentBuilderTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -12,1 +12,0 @@\n- org.openjdk.jmc.rjmx.services.jfr,\n@@ -14,0 +13,1 @@\n+ org.openjdk.jmc.rjmx.common,\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.services.jfr.test\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -53,0 +55,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeInfo;\n@@ -54,5 +57,2 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IEventTypeInfo;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n-import org.openjdk.jmc.rjmx.services.jfr.internal.EventTypeMetadataV1;\n-import org.openjdk.jmc.rjmx.services.jfr.internal.EventTypeMetadataV2;\n+import org.openjdk.jmc.rjmx.common.services.jfr.internal.EventTypeMetadataV1;\n+import org.openjdk.jmc.rjmx.common.services.jfr.internal.EventTypeMetadataV2;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.services.jfr.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/test\/EventMetadataTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n@@ -41,1 +42,0 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.services.jfr.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/test\/EventTemplateTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -48,2 +50,0 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.services.jfr.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/test\/JfrControlTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -43,3 +45,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -47,2 +46,3 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.services.jfr.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/test\/JfrPackageExampleTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,3 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -47,5 +50,2 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.services.jfr.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/test\/JfrTestCase.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n@@ -63,1 +64,0 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.services.jfr.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/test\/OnlineEventOptionsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,2 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -53,2 +55,0 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.services.jfr.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/test\/RecordingOptionsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -11,0 +11,1 @@\n+ org.openjdk.jmc.rjmx.common,\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/META-INF\/MANIFEST.MF","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,5 +43,0 @@\n-\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -49,7 +44,11 @@\n-import org.openjdk.jmc.rjmx.internal.JMXConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.internal.JMXConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/BasicCommunicationTest.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,2 +43,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/DefaultServicesTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n@@ -44,1 +43,2 @@\n-import org.openjdk.jmc.rjmx.internal.ServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.internal.ServerDescriptor;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/JVMSupportToolkitTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,6 +35,6 @@\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/LocalRJMXTestToolkit.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -39,5 +39,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n@@ -46,0 +41,12 @@\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n@@ -48,7 +55,0 @@\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/PackageExampleTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -53,14 +53,16 @@\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.internal.DefaultConnectionHandle;\n-import org.openjdk.jmc.rjmx.internal.RJMXConnection;\n-import org.openjdk.jmc.rjmx.internal.ServerDescriptor;\n-import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.internal.DefaultConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.internal.RJMXConnection;\n+import org.openjdk.jmc.rjmx.common.internal.ServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.services.IDiagnosticCommandService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.internal.ServiceFactoryInitializer;\n+import org.openjdk.jmc.rjmx.internal.SyntheticRepositoryInitializer;\n@@ -287,1 +289,2 @@\n-\t\t\t\tnull);\n+\t\t\t\tnull, SyntheticRepositoryInitializer.initializeAttributeEntries(),\n+\t\t\t\tSyntheticRepositoryInitializer.initializeNotificationEntries());\n@@ -289,1 +292,2 @@\n-\t\tm_connectionHandle = new DefaultConnectionHandle(m_connection, \"Test\", null);\n+\t\tm_connectionHandle = new DefaultConnectionHandle(m_connection, \"Test\", null,\n+\t\t\t\tServiceFactoryInitializer.initializeFromExtensions());\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/RjmxTestCase.java","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n@@ -42,0 +40,2 @@\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/ServerHandleTestCase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,7 +54,6 @@\n-\n-import org.openjdk.jmc.rjmx.internal.DefaultConnectionHandle;\n-import org.openjdk.jmc.rjmx.internal.JMXConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.internal.RJMXConnection;\n-import org.openjdk.jmc.rjmx.internal.ServerDescriptor;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.internal.DefaultConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.internal.JMXConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.internal.RJMXConnection;\n+import org.openjdk.jmc.rjmx.common.internal.ServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/internal\/RJMXConnectionTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,3 +39,3 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.services.ICommercialFeaturesService;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.services.ICommercialFeaturesService;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/services\/CommercialFeaturesServiceTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,3 +38,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -42,2 +39,5 @@\n-import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;\n-import org.openjdk.jmc.rjmx.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.services.IDiagnosticCommandService;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/services\/ServicesPackageExampleTest.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,3 +43,2 @@\n-\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/AttributeDescriptorTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -43,5 +42,6 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/AttributeSubscriptionTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,5 +46,4 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.internal.AttributeValueToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.AttributeValueToolkit;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/AttributeValueTest.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,6 +39,5 @@\n-\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n@@ -55,1 +54,1 @@\n-\t * @see org.openjdk.jmc.rjmx.subscription.IMRIValueListener#valueChanged(org.openjdk.jmc.rjmx.subscription.MRIValueEvent)\n+\t * @see org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener#valueChanged(org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent)\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/CompositeDataSubscriptionTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,1 @@\n-\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/JRockitPerfCounterMBeanTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,1 @@\n-\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/JmxOperatingSystemTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,1 @@\n-\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/JmxThreadTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,0 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -48,5 +46,7 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataProvider;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n@@ -54,1 +54,0 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/MRIMetadataServiceTest.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,0 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -41,5 +39,6 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/MultipleAttributeSubscriptionTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,7 +41,6 @@\n-\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/NotificationAttributeSubscriptionTest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,6 +42,5 @@\n-\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.internal.IIntervalUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.IIntervalUpdatePolicy;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/internal\/ConsoleAttributeInfoManagerTest.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.internal.AbstractAttributeSubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.AbstractAttributeSubscription;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/internal\/DummyAttributeSubscription.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,8 +37,8 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.internal.ServerDescriptor;\n-import org.openjdk.jmc.rjmx.services.internal.ServiceFactoryManager;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.internal.ServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.services.internal.ServiceFactoryManager;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/internal\/DummyConnectionHandle.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,7 +39,9 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.IUpdatePolicy;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.IUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.IIntervalUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.SimpleUpdatePolicy;\n@@ -47,2 +49,0 @@\n-import org.openjdk.jmc.rjmx.subscription.internal.IIntervalUpdatePolicy;\n-import org.openjdk.jmc.rjmx.subscription.internal.SimpleUpdatePolicy;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/subscription\/internal\/UpdatePolicyTest.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,5 +56,4 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.internal.AttributeValueToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.AttributeValueToolkit;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/synthetic\/SyntheticAttributesTest.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,2 +55,1 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/synthetic\/SyntheticNotificationTest.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,1 @@\n-\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/triggers\/NotificationActionCallback.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,3 +47,3 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/triggers\/NotificationModelTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,4 +51,4 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"application\/tests\/org.openjdk.jmc.rjmx.test\/src\/test\/java\/org\/openjdk\/jmc\/rjmx\/test\/triggers\/NotificationTriggerAndRuleTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -11,0 +11,1 @@\n+ org.openjdk.jmc.common,\n","filename":"application\/tests\/org.openjdk.jmc.ui.common.test\/META-INF\/MANIFEST.MF","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.ui.common.labelingrules;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.junit.Test;\n+import org.openjdk.jmc.common.labelingrules.NameConverter;\n+import org.openjdk.jmc.common.labelingrules.NamingRule;\n+\n+@SuppressWarnings(\"nls\")\n+public class NameConverterExtensionsTest {\n+\t@Test\n+\tpublic void testDefaultRules() {\n+\t\tNameConverter nc = new NameConverter(NameConverterRulesInitializer.initializeRulesFromExtensions());\n+\t\tassertTrue(nc.getRules().size() > 0);\n+\t\tint lastPrio = Integer.MAX_VALUE;\n+\t\tfor (NamingRule rule : nc.getRules()) {\n+\t\t\tassertNotNull(rule.getName());\n+\t\t\tassertNotNull(rule.getNormalizedExpression());\n+\t\t\tassertTrue(rule.getPriority() <= lastPrio);\n+\t\t\tlastPrio = rule.getPriority();\n+\t\t}\n+\t}\n+}\n","filename":"application\/tests\/org.openjdk.jmc.ui.common.test\/src\/test\/java\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/NameConverterExtensionsTest.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * \n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * The contents of this file are subject to the terms of either the Universal Permissive License\n- * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n- *\n- * or the following license:\n- *\n- * Redistribution and use in source and binary forms, with or without modification, are permitted\n- * provided that the following conditions are met:\n- * \n- * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n- * and the following disclaimer.\n- * \n- * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n- * conditions and the following disclaimer in the documentation and\/or other materials provided with\n- * the distribution.\n- * \n- * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n- * endorse or promote products derived from this software without specific prior written permission.\n- * \n- * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n- * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n- * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n- * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n- * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n- * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n- * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n- * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n- *\/\n-package org.openjdk.jmc.ui.common.labelingrules;\n-\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n-\n-import java.text.MessageFormat;\n-\n-import org.junit.Test;\n-import org.openjdk.jmc.common.util.Environment;\n-\n-@SuppressWarnings(\"nls\")\n-public class NameConverterTest {\n-\tprivate final static Object[] EXAMPLE_VALUES1 = new Object[] {\"1.5\", \"[Unknown]\",\n-\t\t\t\"C:\\\\Java\\\\eclipse3.3.1.1\\\\plugins\\\\org.eclipse.equinox.launcher_1.0.1.R33x_v20070828.jar\",\n-\t\t\tInteger.valueOf(4711)};\n-\tprivate final static Object[] EXAMPLE_VALUES2 = new Object[] {\"1.6\", \"\", \"weblogic.Server\",\n-\t\t\tInteger.valueOf(Environment.getThisPID())};\n-\tprivate final static Object[] EXAMPLE_VALUES3 = new Object[] {\"1.5\", \"\", \"org.jboss.Main\", Integer.valueOf(666)};\n-\n-\t@Test\n-\tpublic void testFormatJBoss() {\n-\t\tNamingRule rule = new NamingRule(\"Test rule\", \"{2}=org.jboss.Main=>[{0}] JBoss ({3})\", 2000, null);\n-\t\tString result = rule.format(EXAMPLE_VALUES3);\n-\t\tassertEquals(\"[1.5] JBoss (\" + MessageFormat.format(\"{0}\", new Object[] {(Integer) EXAMPLE_VALUES3[3]}) + \")\",\n-\t\t\t\tresult);\n-\t}\n-\n-\t@Test\n-\tpublic void testFormatWLS() {\n-\t\tNamingRule rule = new NamingRule(\"Test rule\", \"{2}=weblogic.Server=>[{0}] WebLogic Server ({3})\", 2000, null);\n-\t\tString result = rule.format(EXAMPLE_VALUES2);\n-\t\tassertEquals(\n-\t\t\t\t\"[1.6] WebLogic Server (\" + MessageFormat.format(\"{0}\", new Object[] {Environment.getThisPID()}) + \")\",\n-\t\t\t\tresult);\n-\t}\n-\n-\t@Test\n-\tpublic void testConvertEclipse() {\n-\t\tNamingRule rule = new NamingRule(\"Test rule\",\n-\t\t\t\t\"{2}=.*org.eclipse.equinox.launcher_1.0.1.R33x.*=>[{0}] Eclipse 3.3 ({3})\", 2000, null);\n-\t\tString result = rule.format(EXAMPLE_VALUES1);\n-\t\tassertEquals(\n-\t\t\t\t\"[1.5] Eclipse 3.3 (\" + MessageFormat.format(\"{0}\", new Object[] {(Integer) EXAMPLE_VALUES1[3]}) + \")\",\n-\t\t\t\tresult);\n-\t}\n-\n-\t@Test\n-\tpublic void testConvertJBoss() {\n-\t\tNamingRule rule = new NamingRule(\"Test rule\", \"{2}=org.jboss.Main=>[{0}] JBoss ({3})\", 2000, null);\n-\t\tString result = rule.format(EXAMPLE_VALUES3);\n-\t\tassertEquals(\"[1.5] JBoss (\" + MessageFormat.format(\"{0}\", new Object[] {(Integer) EXAMPLE_VALUES3[3]}) + \")\",\n-\t\t\t\tresult);\n-\t}\n-\n-\t@Test\n-\tpublic void testAddNamingRule() {\n-\t\tNameConverter nc = new NameConverter();\n-\t\tNamingRule rule = new NamingRule(\"Test rule\", \"{2} = .*MyApp.* => MyCoolApp ({3})\", 2000, null);\n-\t\tnc.addNamingRule(rule);\n-\t\tassertTrue(nc.getRules().contains(rule));\n-\t}\n-\n-\t@Test\n-\tpublic void testDefaultRules() {\n-\t\tNameConverter nc = new NameConverter();\n-\t\tassertTrue(nc.getRules().size() > 0);\n-\t\tint lastPrio = Integer.MAX_VALUE;\n-\t\tfor (NamingRule rule : nc.getRules()) {\n-\t\t\tassertNotNull(rule.getName());\n-\t\t\tassertNotNull(rule.getNormalizedExpression());\n-\t\t\tassertTrue(rule.getPriority() <= lastPrio);\n-\t\t\tlastPrio = rule.getPriority();\n-\t\t}\n-\t}\n-}\n","filename":"application\/tests\/org.openjdk.jmc.ui.common.test\/src\/test\/java\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/NameConverterTest.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,6 +54,6 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.internal.RJMXConnection;\n-import org.openjdk.jmc.rjmx.services.IOperation;\n-import org.openjdk.jmc.rjmx.services.IOperation.OperationImpact;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.internal.RJMXConnection;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.services.IOperation.OperationImpact;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n","filename":"application\/uitests\/org.openjdk.jmc.console.uitest\/src\/test\/java\/org\/openjdk\/jmc\/console\/uitest\/DiagnosticCommandsTabTest.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -16,0 +16,1 @@\n+ org.openjdk.jmc.rjmx.common,\n@@ -34,1 +35,0 @@\n- org.openjdk.jmc.rjmx.services.jfr,\n","filename":"application\/uitests\/org.openjdk.jmc.test.jemmy\/META-INF\/MANIFEST.MF","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -47,0 +45,2 @@\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/uitests\/org.openjdk.jmc.test.jemmy\/src\/main\/java\/org\/openjdk\/jmc\/test\/jemmy\/MCJemmyTestBase.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,3 +42,0 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -46,0 +43,3 @@\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"application\/uitests\/org.openjdk.jmc.test.jemmy\/src\/main\/java\/org\/openjdk\/jmc\/test\/jemmy\/misc\/helpers\/ConnectionHelper.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -90,0 +90,5 @@\n+\t\t<dependency>\n+\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t\t<artifactId>rjmx.common<\/artifactId>\n+\t\t\t<version>${project.version}<\/version>\n+\t\t<\/dependency>\n","filename":"core\/coverage\/pom.xml","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -9,0 +9,1 @@\n+ org.openjdk.jmc.common.action,\n@@ -13,0 +14,2 @@\n+ org.openjdk.jmc.common.labelingrules,\n+ org.openjdk.jmc.common.resource,\n@@ -14,0 +17,1 @@\n+ org.openjdk.jmc.common.tree,\n","filename":"core\/org.openjdk.jmc.common\/META-INF\/MANIFEST.MF","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.ui.common.action;\n+package org.openjdk.jmc.common.action;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/action\/Executable.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/action\/Executable.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.ui.common.action;\n+package org.openjdk.jmc.common.action;\n@@ -37,1 +37,1 @@\n-import org.openjdk.jmc.ui.common.tree.IParent;\n+import org.openjdk.jmc.common.tree.IParent;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/action\/IActionProvider.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/action\/IActionProvider.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.ui.common.action;\n+package org.openjdk.jmc.common.action;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/action\/IUserAction.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/action\/IUserAction.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -118,1 +118,1 @@\n-\tprivate final static Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.common.item\"); \/\/$NON-NLS-1$\n+\tprivate final static Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.rjmx.common\"); \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/item\/PersistableItemFilter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.common.labelingrules;\n+\n+import java.util.HashMap;\n+\n+import org.openjdk.jmc.common.labelingrules.NameConverter.ValueArrayInfo;\n+import org.openjdk.jmc.common.messages.internal.Messages;\n+\n+\/**\n+ * Constant mapping database.\n+ *\/\n+final class Constants {\n+\t\/\/ A mapping from constants to their expanded form.\n+\tprivate final static HashMap<String, Object> constants = new HashMap<>();\n+\tprivate final static Constants instance = new Constants();\n+\n+\tstatic Constants getInstance() {\n+\t\treturn instance;\n+\t}\n+\n+\tpublic Constants() {\n+\t\tinitDefaultConstants();\n+\t}\n+\n+\tprivate void initDefaultConstants() {\n+\t\t\/\/ setConstant(\"ThisPID\", MessageFormat.format(\"{0,number,#}\", new Object[] {Integer.valueOf(MBeanToolkit.getThisPID())})); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tfor (ValueArrayInfo info : ValueArrayInfo.values()) {\n+\t\t\tsetConstant(info.getValueName(), info.getMatchExpression());\n+\t\t}\n+\t\tsetConstant(\"StrConstDebug\", Messages.getString(Messages.NameConverter_DEBUG)); \/\/$NON-NLS-1$\n+\t\tsetConstant(\"StrConstJVMJRockit\", Messages.getString(Messages.NameConverter_JVM_TYPE_JROCKIT)); \/\/$NON-NLS-1$\n+\t\tsetConstant(\"StrConstJVMUnknown\", Messages.getString(Messages.NameConverter_JVM_TYPE_UNKNOWN)); \/\/$NON-NLS-1$\n+\t}\n+\n+\t\/**\n+\t * Adds a constant to this name converter.\n+\t *\n+\t * @param key\n+\t *            the name of the constant.\n+\t * @param value\n+\t *            the value to assign the constant.\n+\t *\/\n+\tpublic void setConstant(String key, Object value) {\n+\t\tif (value == null) {\n+\t\t\tthrow new IllegalArgumentException(\"You may not add a variable which has a value that is null!\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\tconstants.put(key, value);\n+\t}\n+\n+\tpublic Object getConstant(String key) {\n+\t\treturn constants.get(key);\n+\t}\n+\n+\tpublic boolean containsConstant(String key) {\n+\t\treturn constants.containsKey(key);\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/labelingrules\/Constants.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.ui.common.labelingrules;\n+package org.openjdk.jmc.common.labelingrules;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/labelingrules\/Formatter.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/Formatter.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.ui.common.labelingrules;\n+package org.openjdk.jmc.common.labelingrules;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/labelingrules\/IVariableEvaluator.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/IVariableEvaluator.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.ui.common.labelingrules;\n+package org.openjdk.jmc.common.labelingrules;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/labelingrules\/Matcher.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/Matcher.java","status":"renamed"},{"patch":"@@ -0,0 +1,199 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.common.labelingrules;\n+\n+import java.text.MessageFormat;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+\n+import org.openjdk.jmc.common.jvm.JVMCommandLineToolkit;\n+import org.openjdk.jmc.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.common.messages.internal.Messages;\n+import org.openjdk.jmc.common.resource.Resource;\n+import org.openjdk.jmc.common.util.Environment;\n+\n+\/**\n+ * Converts names according to rules specified with the <code>labelingRules<\/code> extension point.\n+ *\/\n+public class NameConverter {\n+\tprivate static final Comparator<NamingRule> COMPARATOR = new Comparator<NamingRule>() {\n+\t\t@Override\n+\t\tpublic int compare(NamingRule o1, NamingRule o2) {\n+\t\t\treturn o2.getPriority() - o1.getPriority();\n+\t\t}\n+\t};\n+\n+\tprivate static final NameConverter INSTANCE = new NameConverter();\n+\n+\tstatic enum ValueArrayInfo {\n+\t\tJAVAVERSION(0, \"JDK\", \"{0}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tJVMTYPE(1, \"JVMType\", \"{1}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tJVMARCH(2, \"JVMArch\", \"{2}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tNAME(3, \"Name\", \"{3}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tJAVACOMMAND(4, \"JavaCmd\", \"{4}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tPID(5, \"PID\", \"{5}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tDEBUG(6, \"IsDebug\", \"{6}\"), \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\tJVMARGS(7, \"JVMArgs\", \"{7}\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\n+\t\tprivate int index;\n+\t\tprivate String valueName;\n+\t\tprivate String matchExpression;\n+\n+\t\tValueArrayInfo(int index, String valueName, String matchExpression) {\n+\t\t\tthis.index = index;\n+\t\t\tthis.valueName = valueName;\n+\t\t\tthis.matchExpression = matchExpression;\n+\t\t}\n+\n+\t\tpublic int getIndex() {\n+\t\t\treturn index;\n+\t\t}\n+\n+\t\tpublic String getValueName() {\n+\t\t\treturn valueName;\n+\t\t}\n+\n+\t\tpublic String getMatchExpression() {\n+\t\t\treturn matchExpression;\n+\t\t}\n+\t}\n+\n+\tprotected List<NamingRule> rules = new ArrayList<>();\n+\tprivate String identity;\n+\n+\t\/**\n+\t * @return a singleton instance\n+\t *\/\n+\tpublic static NameConverter getInstance() {\n+\t\treturn INSTANCE;\n+\t}\n+\n+\t\/**\n+\t * Create a new name converter instance. This should only be used if you want a new, clean\n+\t * instance. Normally the {@link NameConverter#getInstance()} method should be used instead to\n+\t * get a singleton instance.\n+\t *\/\n+\tpublic NameConverter() {\n+\t\tthis(new ArrayList<>());\n+\t}\n+\n+\tpublic NameConverter(List<NamingRule> rules) {\n+\t\tthis.rules = rules;\n+\t}\n+\n+\t\/**\n+\t * @param descriptor\n+\t * @return the properly formatted values. If no matching formatter could be found, the default\n+\t *         format String as defined in NameConverter_LOCAL_NAME_TEMPLATE will be used.\n+\t *\/\n+\tpublic String format(JVMDescriptor descriptor) {\n+\t\t\/\/ FIXME: Somehow rewrite this to avoid things like [Unknown][Unknown] and empty () when the pid is unknown.\n+\t\t\/\/ JDP being the typical use case.\n+\t\tObject[] values = prepareValues(descriptor);\n+\t\tNamingRule rule = getMatchingRule(values);\n+\t\tif (rule != null) {\n+\t\t\treturn rule.format(values);\n+\t\t}\n+\t\t\/\/ Should always be a catch all rule, but if someone messes up, we will use the LOCAL_NAME_TEMPLATE.\n+\t\treturn MessageFormat.format(Messages.getString(Messages.NameConverter_LOCAL_NAME_TEMPLATE), descriptor);\n+\t}\n+\n+\tpublic Resource getImageResource(JVMDescriptor descriptor) {\n+\t\tNamingRule rule = getMatchingRule(prepareValues(descriptor));\n+\t\treturn rule == null ? null : rule.getImageResource();\n+\t}\n+\n+\t\/**\n+\t * Adds a rule to the name converter.\n+\t * <p>\n+\t * Adding rules should normally not be done using this method, but rather through the\n+\t * <code>labelingRules<\/code> extension point.\n+\t *\n+\t * @param rule\n+\t *            the rule to add.\n+\t *\/\n+\tpublic void addNamingRule(NamingRule rule) {\n+\t\trules.add(rule);\n+\t\trules.sort(COMPARATOR);\n+\t}\n+\n+\t\/**\n+\t * @return an immutable list of the available rules.\n+\t *\/\n+\tpublic List<NamingRule> getRules() {\n+\t\treturn Collections.unmodifiableList(rules);\n+\t}\n+\n+\tprivate NamingRule getMatchingRule(Object[] values) {\n+\t\tfor (NamingRule rule : rules) {\n+\t\t\ttry {\n+\t\t\t\tif (rule.matches(values)) {\n+\t\t\t\t\treturn rule;\n+\t\t\t\t}\n+\t\t\t} catch (RuntimeException e) {\n+\t\t\t\t\/\/ Silently ignore broken rules for now.\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tpublic void setRules(List<NamingRule> rules) {\n+\t\tthis.rules = rules;\n+\t}\n+\n+\tpublic void setIdentity(String identity) {\n+\t\tthis.identity = identity;\n+\t}\n+\n+\tprivate Object[] prepareValues(JVMDescriptor descriptor) {\n+\t\treturn new Object[] {descriptor.getJavaVersion(), descriptor.getJvmType(), descriptor.getJvmArch(),\n+\t\t\t\tgetValidName(descriptor), descriptor.getJavaCommand(),\n+\t\t\t\tdescriptor.getPid() != null ? String.valueOf(descriptor.getPid()) : \"\", descriptor.isDebug(), \/\/$NON-NLS-1$\n+\t\t\t\tdescriptor.getJVMArguments()};\n+\t}\n+\n+\tprivate String getValidName(JVMDescriptor descriptor) {\n+\t\tInteger pid = descriptor.getPid();\n+\t\tif (identity != null && pid != null && pid.intValue() == Environment.getThisPID()\n+\t\t\t\t&& descriptor.isAttachable()) {\n+\t\t\treturn identity + \".this\"; \/\/$NON-NLS-1$\n+\t\t}\n+\t\tString name = JVMCommandLineToolkit.getMainClassOrJar(descriptor.getJavaCommand());\n+\t\tif (name != null && name.length() > 0) {\n+\t\t\treturn name;\n+\t\t}\n+\t\treturn Messages.getString(Messages.NameConverter_UNKNOWN_LOCAL_JVM);\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/labelingrules\/NameConverter.java","additions":199,"deletions":0,"binary":false,"changes":199,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.ui.common.labelingrules;\n+package org.openjdk.jmc.common.labelingrules;\n@@ -37,1 +37,1 @@\n-import org.openjdk.jmc.ui.common.resource.Resource;\n+import org.openjdk.jmc.common.resource.Resource;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/labelingrules\/NamingRule.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/labelingrules\/NamingRule.java","status":"renamed"},{"patch":"@@ -0,0 +1,194 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.common.labelingrules;\n+\n+import java.util.HashMap;\n+\n+import org.openjdk.jmc.common.jvm.JVMArch;\n+import org.openjdk.jmc.common.jvm.JVMType;\n+import org.openjdk.jmc.common.labelingrules.NameConverter.ValueArrayInfo;\n+import org.openjdk.jmc.common.messages.internal.Messages;\n+\n+\/**\n+ * Variable mapping database.\n+ *\/\n+class Variables {\n+\t\/\/ A mapping from variables to IVariableEvaluator.\n+\tprivate final static HashMap<String, IVariableEvaluator> variables = new HashMap<>();\n+\tprivate final static Variables instance = new Variables();\n+\n+\tpublic Variables() {\n+\t\tinitDefaultVariables();\n+\t}\n+\n+\t\/\/ Variables are late bound matching variables that (for performance reasons) will be applied to the resulting\n+\t\/\/ string just before returning it.\n+\tprivate void initDefaultVariables() {\n+\t\t\/\/ FIXME: Could possibly be a good idea to combine JVMType and JVMArch into one enum, at least to avoid \"[Unknown][Unknown]\"\n+\t\t\/\/ This occurs for JDP connections.\n+\t\tvariables.put(\"StrJVMType\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n+\t\t\t@Override\n+\t\t\tpublic String evaluate(Object[] input) {\n+\t\t\t\tJVMType type = (JVMType) input[ValueArrayInfo.JVMTYPE.getIndex()];\n+\t\t\t\tString typeStr = getLocalizedTypeStr(type);\n+\t\t\t\tif (typeStr == null) {\n+\t\t\t\t\treturn \"\"; \/\/$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t\treturn \"[\" + typeStr + \"]\"; \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\t}\n+\n+\t\t\tprivate String getLocalizedTypeStr(JVMType type) {\n+\t\t\t\tif (type == JVMType.JROCKIT) {\n+\t\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_TYPE_JROCKIT);\n+\t\t\t\t}\n+\t\t\t\tif (type == JVMType.HOTSPOT) {\n+\t\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_TYPE_HOTSPOT);\n+\t\t\t\t}\n+\t\t\t\tif (type == JVMType.OTHER) {\n+\t\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_TYPE_OTHER);\n+\t\t\t\t}\n+\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_TYPE_UNKNOWN);\n+\t\t\t}\n+\t\t});\n+\t\tvariables.put(\"UnsupportedStrJVMType\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n+\t\t\t@Override\n+\t\t\tpublic String evaluate(Object[] input) {\n+\t\t\t\tJVMType type = (JVMType) input[ValueArrayInfo.JVMTYPE.getIndex()];\n+\t\t\t\tString typeStr = getLocalizedTypeStr(type);\n+\t\t\t\tif (typeStr == null) {\n+\t\t\t\t\treturn \"\"; \/\/$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t\treturn \"[\" + typeStr + \"]\"; \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\t}\n+\n+\t\t\tprivate String getLocalizedTypeStr(JVMType type) {\n+\t\t\t\tif (type == JVMType.JROCKIT) {\n+\t\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_TYPE_JROCKIT);\n+\t\t\t\t}\n+\t\t\t\tif (type == JVMType.HOTSPOT) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\tif (type == JVMType.OTHER) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_TYPE_UNKNOWN);\n+\t\t\t}\n+\t\t});\n+\t\tvariables.put(\"StrJVMArch\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n+\t\t\t@Override\n+\t\t\tpublic String evaluate(Object[] input) {\n+\t\t\t\tJVMArch arch = (JVMArch) input[ValueArrayInfo.JVMARCH.getIndex()];\n+\t\t\t\tString archStr = getLocalizedArchStr(arch);\n+\t\t\t\tif (archStr == null) {\n+\t\t\t\t\treturn \"\"; \/\/$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t\treturn \"[\" + archStr + \"]\"; \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\t}\n+\n+\t\t\tprivate String getLocalizedArchStr(JVMArch arch) {\n+\t\t\t\tif (arch == JVMArch.BIT32) {\n+\t\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_ARCH_32BIT);\n+\t\t\t\t}\n+\t\t\t\tif (arch == JVMArch.BIT64) {\n+\t\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_ARCH_64BIT);\n+\t\t\t\t}\n+\t\t\t\tif (arch == JVMArch.OTHER) {\n+\t\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_ARCH_OTHER);\n+\t\t\t\t}\n+\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_ARCH_UNKNOWN);\n+\t\t\t}\n+\t\t});\n+\t\tvariables.put(\"UnsupportedStrJVMArch\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n+\t\t\t@Override\n+\t\t\tpublic String evaluate(Object[] input) {\n+\t\t\t\tJVMArch arch = (JVMArch) input[ValueArrayInfo.JVMARCH.getIndex()];\n+\t\t\t\tJVMType type = (JVMType) input[ValueArrayInfo.JVMTYPE.getIndex()];\n+\t\t\t\tString archStr = getLocalizedArchStr(arch, type);\n+\t\t\t\tif (archStr == null) {\n+\t\t\t\t\treturn \"\"; \/\/$NON-NLS-1$\n+\t\t\t\t}\n+\t\t\t\treturn \"[\" + archStr + \"]\"; \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\t}\n+\n+\t\t\tprivate String getLocalizedArchStr(JVMArch arch, JVMType type) {\n+\t\t\t\tJVMArch thisArch = JVMArch.getCurrentJVMArch();\n+\t\t\t\tif (arch == thisArch) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\tif (arch == JVMArch.BIT32) {\n+\t\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_ARCH_32BIT);\n+\t\t\t\t}\n+\t\t\t\tif (arch == JVMArch.BIT64) {\n+\t\t\t\t\treturn Messages.getString(Messages.NameConverter_JVM_ARCH_64BIT);\n+\t\t\t\t}\n+\t\t\t\tif (arch == JVMArch.OTHER) {\n+\t\t\t\t\treturn null;\n+\t\t\t\t}\n+\t\t\t\t\/\/ Avoid showing double [Unknown]\n+\t\t\t\treturn type == JVMType.UNKNOWN ? null : Messages.getString(Messages.NameConverter_JVM_ARCH_UNKNOWN);\n+\t\t\t}\n+\t\t});\n+\t\tvariables.put(\"StrDebug\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n+\t\t\t@Override\n+\t\t\tpublic String evaluate(Object[] input) {\n+\t\t\t\treturn \"true\".equals(input[ValueArrayInfo.DEBUG.getIndex()]) ? \"[ DEBUG ]\" \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n+\t\t\t\t\t\t: \"\"; \/\/$NON-NLS-1$\n+\t\t\t}\n+\t\t});\n+\t\tvariables.put(\"StrJDK\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n+\t\t\t@Override\n+\t\t\tpublic String evaluate(Object[] input) {\n+\t\t\t\tString version = (String) input[ValueArrayInfo.JAVAVERSION.getIndex()];\n+\t\t\t\treturn version == null ? \"\" : \"[\" + version + \"]\"; \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$\n+\t\t\t}\n+\t\t});\n+\t\tvariables.put(\"JVMArgs\", new IVariableEvaluator() { \/\/$NON-NLS-1$\n+\t\t\t@Override\n+\t\t\tpublic String evaluate(Object[] input) {\n+\t\t\t\treturn (String) input[ValueArrayInfo.JVMARGS.getIndex()];\n+\t\t\t}\n+\t\t});\n+\t}\n+\n+\tpublic static Variables getInstance() {\n+\t\treturn instance;\n+\t}\n+\n+\tpublic boolean containsVariable(String content) {\n+\t\treturn variables.containsKey(content);\n+\t}\n+\n+\tpublic IVariableEvaluator getVariable(String content) {\n+\t\treturn variables.get(content);\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/labelingrules\/Variables.java","additions":194,"deletions":0,"binary":false,"changes":194,"status":"added"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2018, 2022 Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2022, Datadog, Inc. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023, Datadog, Inc. All rights reserved.\n@@ -62,0 +62,11 @@\n+\tpublic static final String NameConverter_DEBUG = \"NameConverter_DEBUG\"; \/\/$NON-NLS-1$\n+\tpublic static final String NameConverter_JVM_ARCH_32BIT = \"NameConverter_JVM_ARCH_32BIT\"; \/\/$NON-NLS-1$\n+\tpublic static final String NameConverter_JVM_ARCH_64BIT = \"NameConverter_JVM_ARCH_64BIT\"; \/\/$NON-NLS-1$\n+\tpublic static final String NameConverter_JVM_ARCH_OTHER = \"NameConverter_JVM_ARCH_OTHER\"; \/\/$NON-NLS-1$\n+\tpublic static final String NameConverter_JVM_ARCH_UNKNOWN = \"NameConverter_JVM_ARCH_UNKNOWN\"; \/\/$NON-NLS-1$\n+\tpublic static final String NameConverter_JVM_TYPE_HOTSPOT = \"NameConverter_JVM_TYPE_HOTSPOT\"; \/\/$NON-NLS-1$\n+\tpublic static final String NameConverter_JVM_TYPE_JROCKIT = \"NameConverter_JVM_TYPE_JROCKIT\"; \/\/$NON-NLS-1$\n+\tpublic static final String NameConverter_JVM_TYPE_OTHER = \"NameConverter_JVM_TYPE_OTHER\"; \/\/$NON-NLS-1$\n+\tpublic static final String NameConverter_JVM_TYPE_UNKNOWN = \"NameConverter_JVM_TYPE_UNKNOWN\"; \/\/$NON-NLS-1$\n+\tpublic static final String NameConverter_LOCAL_NAME_TEMPLATE = \"NameConverter_LOCAL_NAME_TEMPLATE\"; \/\/$NON-NLS-1$\n+\tpublic static final String NameConverter_UNKNOWN_LOCAL_JVM = \"NameConverter_UNKNOWN_LOCAL_JVM\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/messages\/internal\/Messages.java","additions":13,"deletions":2,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,61 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.common.resource;\n+\n+\/**\n+ * Class identifying a resource in a plugin.\n+ *\/\n+public class Resource {\n+\n+\tprivate final String pluginId;\n+\tprivate final String resource;\n+\n+\t\/**\n+\t * @param pluginId\n+\t *            id of the plugin containing the resource\n+\t * @param resource\n+\t *            resource path within the plugin\n+\t *\/\n+\tpublic Resource(String pluginId, String resource) {\n+\t\tthis.pluginId = pluginId;\n+\t\tthis.resource = resource;\n+\t}\n+\n+\tpublic String getPluginId() {\n+\t\treturn pluginId;\n+\t}\n+\n+\tpublic String getResourcePath() {\n+\t\treturn resource;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/resource\/Resource.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.ui.common.tree;\n+package org.openjdk.jmc.common.tree;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/tree\/IArray.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/tree\/IArray.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.ui.common.tree;\n+package org.openjdk.jmc.common.tree;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/tree\/IParent.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/tree\/IParent.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.ui.common.util;\n+package org.openjdk.jmc.common.util;\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/java\/org\/openjdk\/jmc\/common\/util\/IObservable.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.ui.common\/src\/main\/java\/org\/openjdk\/jmc\/ui\/common\/util\/IObservable.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -195,0 +195,16 @@\n+\n+# 0 = Java version.\n+# 1 = LocalConnectionDescriptor_JVM_TYPE_X if a non jrockit JVM.\n+# 2 = The commandline (first part)\n+# 3 = PID\n+NameConverter_LOCAL_NAME_TEMPLATE= ({0}) {1}{2} ({3})\n+NameConverter_JVM_TYPE_UNKNOWN=Unknown\n+NameConverter_JVM_TYPE_OTHER=Other\n+NameConverter_JVM_TYPE_JROCKIT=JRockit\n+NameConverter_JVM_TYPE_HOTSPOT=HotSpot\n+NameConverter_JVM_ARCH_UNKNOWN=Unknown\n+NameConverter_JVM_ARCH_OTHER=Other arch\n+NameConverter_JVM_ARCH_32BIT=32-bit\n+NameConverter_JVM_ARCH_64BIT=64-bit\n+NameConverter_DEBUG=Debug\n+NameConverter_UNKNOWN_LOCAL_JVM=Local\n","filename":"core\/org.openjdk.jmc.common\/src\/main\/resources\/org\/openjdk\/jmc\/common\/messages\/internal\/messages.properties","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr;\n+package org.openjdk.jmc.flightrecorder.configuration;\n","filename":"core\/org.openjdk.jmc.flightrecorder.configuration\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/configuration\/FlightRecorderException.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/FlightRecorderException.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr;\n+package org.openjdk.jmc.flightrecorder.configuration;\n@@ -44,1 +44,0 @@\n-import org.openjdk.jmc.flightrecorder.configuration.IRecorderConfigurationService;\n@@ -47,0 +46,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeInfo;\n@@ -48,1 +48,0 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n@@ -54,1 +53,1 @@\n- * {@link IConnectionHandle#getServiceOrNull(Class)}\n+ * <code>IConnectionHandle.getServiceOrNull(Class)<\/code>\n","filename":"core\/org.openjdk.jmc.flightrecorder.configuration\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/configuration\/IFlightRecorderService.java","additions":4,"deletions":5,"binary":false,"changes":9,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/IFlightRecorderService.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr;\n+package org.openjdk.jmc.flightrecorder.configuration;\n@@ -123,1 +123,1 @@\n-\t * @return the start time for this recording, or <tt>null<\/tt> if not available\n+\t * @return the start time for this recording, or null if not available\n@@ -137,1 +137,1 @@\n-\t * @return <tt>true<\/tt> if the recording was created continuous, or <tt>false<\/tt> if not\n+\t * @return true if the recording was created continuous, or false if not\n@@ -144,1 +144,1 @@\n-\t * @return <tt>true<\/tt> if the recording is stored to disk, <tt>false<\/tt> otherwise\n+\t * @return true if the recording is stored to disk, false otherwise\n","filename":"core\/org.openjdk.jmc.flightrecorder.configuration\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/configuration\/IRecordingDescriptor.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/IRecordingDescriptor.java","status":"renamed"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.flightrecorder.controlpanel.ui.model;\n+package org.openjdk.jmc.flightrecorder.configuration.events;\n@@ -69,0 +69,1 @@\n+import java.util.logging.Logger;\n@@ -81,4 +82,0 @@\n-import org.openjdk.jmc.flightrecorder.configuration.events.EventOptionID;\n-import org.openjdk.jmc.flightrecorder.configuration.events.IEventConfiguration;\n-import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeID;\n-import org.openjdk.jmc.flightrecorder.configuration.events.SchemaVersion;\n@@ -94,3 +91,0 @@\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.ControlPanel;\n-import org.openjdk.jmc.flightrecorder.controlpanel.ui.messages.internal.Messages;\n-import org.openjdk.jmc.rjmx.services.jfr.IEventTypeInfo;\n@@ -106,0 +100,1 @@\n+\tprivate final static Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.flightrecorder.configuration.events\"); \/\/$NON-NLS-1$\n@@ -133,1 +128,1 @@\n-\t\tconfig.setName(Messages.RECORDING_TEMPLATE_NEW_NAME);\n+\t\tconfig.setName(\"New Template\"); \/\/ TODO: replace with Messages.RECORDING_TEMPLATE_NEW_NAME\n@@ -188,1 +183,1 @@\n-\tboolean replaceWithContentsFrom(IEventConfiguration workingCopy) {\n+\tpublic boolean replaceWithContentsFrom(IEventConfiguration workingCopy) {\n@@ -284,1 +279,1 @@\n-\t\t\t\tControlPanel.getDefault().getLogger().log(Level.FINE, e.getMessage(), e);\n+\t\t\t\tLOGGER.log(Level.FINE, e.getMessage(), e);\n@@ -521,1 +516,1 @@\n-\t\t\t\tControlPanel.getDefault().getLogger().log(Level.WARNING, \"Cannot save configuration.\", e); \/\/$NON-NLS-1$\n+\t\t\t\tLOGGER.log(Level.WARNING, \"Cannot save configuration.\", e); \/\/$NON-NLS-1$\n@@ -628,1 +623,1 @@\n-\tvoid populateOption(\n+\tpublic void populateOption(\n@@ -648,1 +643,1 @@\n-\tvoid populateEventMetadata(IEventTypeID eventTypeID, IEventTypeInfo serverEventTypeInfo, boolean override) {\n+\tpublic void populateEventMetadata(IEventTypeID eventTypeID, IEventTypeInfo serverEventTypeInfo, boolean override) {\n@@ -660,1 +655,1 @@\n-\tvoid putEventInCategory(IEventTypeID eventTypeID, String[] categories) {\n+\tpublic void putEventInCategory(IEventTypeID eventTypeID, String[] categories) {\n","filename":"core\/org.openjdk.jmc.flightrecorder.configuration\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/configuration\/events\/EventConfiguration.java","additions":10,"deletions":15,"binary":false,"changes":25,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.controlpanel.ui\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/controlpanel\/ui\/model\/EventConfiguration.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr;\n+package org.openjdk.jmc.flightrecorder.configuration.events;\n@@ -39,2 +39,0 @@\n-import org.openjdk.jmc.flightrecorder.configuration.events.EventOptionID;\n-import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeID;\n","filename":"core\/org.openjdk.jmc.flightrecorder.configuration\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/configuration\/events\/IEventTypeInfo.java","additions":2,"deletions":4,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/IEventTypeInfo.java","status":"renamed"},{"patch":"@@ -255,4 +255,0 @@\n-\t *\n-\t * @param writer\n-\t * @param oneLineElements\n-\t *            XML tags to output on a single line\n@@ -275,3 +271,0 @@\n-\t * @param writer\n-\t * @param oneLineElements\n-\t *            XML tags to output on a single line\n","filename":"core\/org.openjdk.jmc.flightrecorder.configuration\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/configuration\/model\/xml\/XMLModel.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -9,1 +9,1 @@\n-\t<classpathentry kind=\"src\" output=\"target\/test-classes\" path=\"src\/test\/java\">\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-17\">\n@@ -11,1 +11,0 @@\n-\t\t\t<attribute name=\"optional\" value=\"true\"\/>\n@@ -13,1 +12,0 @@\n-\t\t\t<attribute name=\"test\" value=\"true\"\/>\n@@ -16,1 +14,2 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER\/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType\/JavaSE-17\">\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.pde.core.requiredPlugins\"\/>\n+\t<classpathentry kind=\"con\" path=\"org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER\">\n@@ -21,1 +20,1 @@\n-\t<classpathentry kind=\"con\" path=\"org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER\">\n+\t<classpathentry kind=\"src\" output=\"target\/test-classes\" path=\"src\/test\/java\">\n@@ -23,0 +22,1 @@\n+\t\t\t<attribute name=\"optional\" value=\"true\"\/>\n@@ -24,0 +24,1 @@\n+\t\t\t<attribute name=\"test\" value=\"true\"\/>\n","filename":"core\/org.openjdk.jmc.rjmx.common\/.classpath","additions":6,"deletions":5,"binary":false,"changes":11,"previous_filename":"releng\/third-party\/.classpath","status":"copied"},{"patch":"@@ -0,0 +1,22 @@\n+Manifest-Version: 1.0\n+Bundle-ManifestVersion: 2\n+Bundle-Name: RJMX Common\n+Bundle-SymbolicName: org.openjdk.jmc.rjmx.common;singleton:=true\n+Bundle-RequiredExecutionEnvironment: JavaSE-17\n+Bundle-Version: 9.0.0.qualifier\n+Bundle-Vendor: Oracle Corporation\n+Require-Bundle: org.openjdk.jmc.common,\n+ org.openjdk.jmc.flightrecorder,\n+ org.openjdk.jmc.flightrecorder.configuration\n+Export-Package: org.openjdk.jmc.rjmx.common,\n+ org.openjdk.jmc.rjmx.common.internal;x-friends:=\"org.openjdk.jmc.rjmx,org.openjdk.jmc.rjmx.test\",\n+ org.openjdk.jmc.rjmx.common.preferences,\n+ org.openjdk.jmc.rjmx.common.servermodel,\n+ org.openjdk.jmc.rjmx.common.services,\n+ org.openjdk.jmc.rjmx.common.services.internal;x-friends:=\"org.openjdk.jmc.rjmx,org.openjdk.jmc.rjmx.test\",\n+ org.openjdk.jmc.rjmx.common.services.jfr,\n+ org.openjdk.jmc.rjmx.common.services.jfr.internal;x-friends:=\"org.openjdk.jmc.rjmx,org.openjdk.jmc.rjmx.services.jfr.test\",\n+ org.openjdk.jmc.rjmx.common.subscription,\n+ org.openjdk.jmc.rjmx.common.subscription.internal;x-friends:=\"org.openjdk.jmc.rjmx,org.openjdk.jmc.rjmx.test\",\n+ org.openjdk.jmc.rjmx.common.util.internal;x-friends:=\"org.openjdk.jmc.rjmx\"\n+Automatic-Module-Name: org.openjdk.jmc.rjmx.common\n","filename":"core\/org.openjdk.jmc.rjmx.common\/META-INF\/MANIFEST.MF","additions":22,"deletions":0,"binary":false,"changes":22,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2023 Oracle and\/or its affiliates. All rights reserved.\n","filename":"core\/org.openjdk.jmc.rjmx.common\/build.properties","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"application\/org.openjdk.jmc.flightrecorder.rules.extensionprovider\/build.properties","status":"copied"},{"patch":"@@ -41,2 +41,4 @@\n-\t<artifactId>flightrecorder.configuration<\/artifactId>\n-\n+\t<artifactId>rjmx.common<\/artifactId>\n+\t<properties>\n+\t\t<jmc.config.path>${project.basedir}\/..\/..\/configuration<\/jmc.config.path>\n+\t<\/properties>\n@@ -54,0 +56,5 @@\n+\t\t<dependency>\n+\t\t\t<groupId>org.openjdk.jmc<\/groupId>\n+\t\t\t<artifactId>flightrecorder.configuration<\/artifactId>\n+\t\t\t<version>${project.version}<\/version>\n+\t\t<\/dependency>\n@@ -55,3 +62,0 @@\n-\t<properties>\n-\t\t<jmc.config.path>${project.basedir}\/..\/..\/configuration<\/jmc.config.path>\n-\t<\/properties>\n","filename":"core\/org.openjdk.jmc.rjmx.common\/pom.xml","additions":9,"deletions":5,"binary":false,"changes":14,"previous_filename":"core\/org.openjdk.jmc.flightrecorder.configuration\/pom.xml","status":"copied"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx;\n+package org.openjdk.jmc.rjmx.common;\n@@ -41,1 +41,1 @@\n-import org.openjdk.jmc.rjmx.internal.JMXConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.internal.JMXConnectionDescriptor;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/ConnectionDescriptorBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ConnectionDescriptorBuilder.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx;\n+package org.openjdk.jmc.rjmx.common;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/ConnectionException.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ConnectionException.java","status":"renamed"},{"patch":"@@ -0,0 +1,516 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.lang.management.MemoryMXBean;\n+import java.lang.management.OperatingSystemMXBean;\n+import java.lang.management.RuntimeMXBean;\n+import java.lang.management.ThreadMXBean;\n+import java.lang.reflect.UndeclaredThrowableException;\n+import java.net.MalformedURLException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringTokenizer;\n+import java.util.logging.Level;\n+\n+import javax.management.JMException;\n+import javax.management.MBeanServerConnection;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.openmbean.CompositeData;\n+import javax.management.openmbean.TabularData;\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.openjdk.jmc.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.common.version.JavaVMVersionToolkit;\n+import org.openjdk.jmc.common.version.JavaVersion;\n+import org.openjdk.jmc.rjmx.common.services.jfr.internal.HotspotManagementToolkit;\n+\n+\/**\n+ * Toolkit providing utility methods to retrieve MBean proxy objects, invoke JMX operations and\n+ * query a connection about its properties.\n+ *\/\n+public final class ConnectionToolkit {\n+\t\/**\n+\t * The default port JMX\n+\t *\/\n+\tpublic static final int VALUE_DEFAULT_REMOTE_PORT_JMX = 7091;\n+\t\/**\n+\t * Object name for the {@link ManagementFactory#RUNTIME_MXBEAN_NAME} constant.\n+\t *\/\n+\tpublic static final ObjectName RUNTIME_BEAN_NAME = createObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME);\n+\t\/**\n+\t * Object name for the {@link ManagementFactory#MEMORY_MXBEAN_NAME} constant.\n+\t *\/\n+\tpublic static final ObjectName MEMORY_BEAN_NAME = createObjectName(ManagementFactory.MEMORY_MXBEAN_NAME);\n+\t\/**\n+\t * Object name for the {@link ManagementFactory#THREAD_MXBEAN_NAME} constant.\n+\t *\/\n+\tpublic static final ObjectName THREAD_BEAN_NAME = createObjectName(ManagementFactory.THREAD_MXBEAN_NAME);\n+\t\/**\n+\t * Object name for the {@link ManagementFactory#OPERATING_SYSTEM_MXBEAN_NAME} constant.\n+\t *\/\n+\tpublic static final ObjectName OPERATING_SYSTEM_BEAN_NAME = createObjectName(\n+\t\t\tManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME);\n+\n+\tprivate final static String JFR_MBEAN_OBJECT_NAME = \"jdk.management.jfr:type=FlightRecorder\"; \/\/$NON-NLS-1$\n+\n+\tprivate ConnectionToolkit() {\n+\t\tthrow new IllegalArgumentException(\"Don't instantiate this toolkit\"); \/\/$NON-NLS-1$\n+\t}\n+\n+\t\/**\n+\t * Creates an object name for an MBean. Hides the fact that a\n+\t * {@link MalformedObjectNameException} might be thrown if the passed string has the wrong\n+\t * format.\n+\t *\n+\t * @param name\n+\t *            name of the object.\n+\t * @return the ObjectName\n+\t * @throws IllegalArgumentException\n+\t *             if an object name could not be created from the string\n+\t *\/\n+\tpublic static ObjectName createObjectName(String name) {\n+\t\ttry {\n+\t\t\treturn new ObjectName(name);\n+\t\t} catch (MalformedObjectNameException e) {\n+\t\t\t\/\/ Should not happen - programmer error!\n+\t\t\tassert (false);\n+\t\t\tthrow new IllegalArgumentException(e.getMessage(), e);\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Helper method to retrieve proxy object for platform Memory MXBean\n+\t * ({@code \"java.lang:type=Memory\"}).\n+\t *\n+\t * @param server\n+\t *            the connected server\n+\t * @return a proxy object or {@code null} if it does not exist.\n+\t * @throws IOException\n+\t *             if a communication problem occurred.\n+\t * @see ManagementFactory#newPlatformMXBeanProxy(MBeanServerConnection, String, Class)\n+\t *\/\n+\tpublic static MemoryMXBean getMemoryBean(MBeanServerConnection server) throws IOException {\n+\t\treturn ManagementFactory.newPlatformMXBeanProxy(server, ManagementFactory.MEMORY_MXBEAN_NAME,\n+\t\t\t\tMemoryMXBean.class);\n+\t}\n+\n+\t\/**\n+\t * Helper method to retrieve proxy object for platform Runtime MXBean\n+\t * ({@code \"java.lang:type=Runtime\"}).\n+\t *\n+\t * @param server\n+\t *            the connected server\n+\t * @return a proxy object or {@code null} if it does not exist.\n+\t * @throws IOException\n+\t *             if a communication problem occurred.\n+\t * @see ManagementFactory#newPlatformMXBeanProxy(MBeanServerConnection, String, Class)\n+\t *\/\n+\tpublic static RuntimeMXBean getRuntimeBean(MBeanServerConnection server) throws IOException {\n+\t\treturn ManagementFactory.newPlatformMXBeanProxy(server, ManagementFactory.RUNTIME_MXBEAN_NAME,\n+\t\t\t\tRuntimeMXBean.class);\n+\t}\n+\n+\t\/**\n+\t * Helper method to retrieve proxy object for platform Memory MXBean\n+\t * ({@code \"java.lang:type=Threading\"}).\n+\t *\n+\t * @param server\n+\t *            the connected server\n+\t * @return a proxy object or {@code null} if it does not exist.\n+\t * @throws IOException\n+\t *             if a communication problem occurred.\n+\t * @see ManagementFactory#newPlatformMXBeanProxy(MBeanServerConnection, String, Class)\n+\t *\/\n+\tpublic static ThreadMXBean getThreadBean(MBeanServerConnection server) throws IOException {\n+\t\treturn ManagementFactory.newPlatformMXBeanProxy(server, ManagementFactory.THREAD_MXBEAN_NAME,\n+\t\t\t\tThreadMXBean.class);\n+\t}\n+\n+\t\/**\n+\t * Helper method to retrieve proxy object for platform Memory MXBean\n+\t * ({@code \"java.lang:type=OperatingSystem\"}).\n+\t *\n+\t * @param server\n+\t *            the connected server\n+\t * @return a proxy object or {@code null} if it does not exist.\n+\t * @throws IOException\n+\t *             if a communication problem occurred.\n+\t * @see ManagementFactory#newPlatformMXBeanProxy(MBeanServerConnection, String, Class)\n+\t *\/\n+\tpublic static OperatingSystemMXBean getOperatingSystemBean(MBeanServerConnection server) throws IOException {\n+\t\treturn ManagementFactory.newPlatformMXBeanProxy(server, ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME,\n+\t\t\t\tOperatingSystemMXBean.class);\n+\t}\n+\n+\t\/**\n+\t * Helper method to invoke MBean operation on a MBean server. Will try to deduce the correct\n+\t * method to invoke based on the provided parameters.\n+\t *\n+\t * @param server\n+\t *            the MBean server to invoke method on.\n+\t * @param on\n+\t *            the name of the MBean.\n+\t * @param operation\n+\t *            the name of the operation.\n+\t * @param parameters\n+\t *            the parameters for the method invocation.\n+\t * @return the object returned by the operation, which represents the result of invoking the\n+\t *         operation on the MBean specified.\n+\t * @throws JMException\n+\t *             some sort of exception due to unknown MBean or exception thrown in invoked\n+\t *             method.\n+\t * @throws IOException\n+\t *             if a communication problem occurred when talking to the MBean server.\n+\t *\/\n+\tpublic static Object invokeOperation(\n+\t\tMBeanServerConnection server, ObjectName on, String operation, Object ... parameters)\n+\t\t\tthrows JMException, IOException {\n+\t\treturn server.invoke(on, operation, parameters, extractSignature(parameters));\n+\t}\n+\n+\t\/**\n+\t * Automatically generates the signature to be used when invoking operations.\n+\t *\n+\t * @param param\n+\t *            the parameters for which to get the signature.\n+\t * @return the signature matching the parameters.\n+\t *\/\n+\tprivate static String[] extractSignature(Object[] param) {\n+\t\tString[] sig = new String[param.length];\n+\t\tfor (int i = 0; i < sig.length; i++) {\n+\t\t\tif (param[i].getClass() == Boolean.class) {\n+\t\t\t\tsig[i] = Boolean.TYPE.getName();\n+\t\t\t} else if (Number.class.isAssignableFrom(param[i].getClass())) {\n+\t\t\t\ttry {\n+\t\t\t\t\tsig[i] = ((Class<?>) param[i].getClass().getField(\"TYPE\").get(param[i])).getName(); \/\/$NON-NLS-1$\n+\t\t\t\t} catch (IllegalArgumentException e) {\n+\t\t\t\t\tthrow new UndeclaredThrowableException(e);\n+\t\t\t\t} catch (SecurityException e) {\n+\t\t\t\t\tthrow new UndeclaredThrowableException(e);\n+\t\t\t\t} catch (IllegalAccessException e) {\n+\t\t\t\t\tthrow new UndeclaredThrowableException(e);\n+\t\t\t\t} catch (NoSuchFieldException e) {\n+\t\t\t\t\tthrow new UndeclaredThrowableException(e);\n+\t\t\t\t}\n+\t\t\t} else if (CompositeData.class.isAssignableFrom(param[i].getClass())) {\n+\t\t\t\tsig[i] = CompositeData.class.getName();\n+\t\t\t} else if (TabularData.class.isAssignableFrom(param[i].getClass())) {\n+\t\t\t\tsig[i] = TabularData.class.getName();\n+\t\t\t} else if (List.class.isAssignableFrom(param[i].getClass())) {\n+\t\t\t\tsig[i] = List.class.getName();\n+\t\t\t} else {\n+\t\t\t\tsig[i] = param[i].getClass().getName();\n+\t\t\t}\n+\t\t}\n+\t\treturn sig;\n+\t}\n+\n+\t\/**\n+\t * Will attempt to derive the host name from the {@link JMXServiceURL}. If the JXMServiceURL\n+\t * uses jmxrmi, the host name will be derived from the information in the JXMServiceURL.\n+\t *\n+\t * @param url\n+\t *            the {@link JMXServiceURL} to retrieve the host name from.\n+\t * @return the host name.\n+\t *\/\n+\tpublic static String getHostName(JMXServiceURL url) {\n+\t\tif (url.getHost() == null || \"\".equals(url.getHost().trim())) { \/\/$NON-NLS-1$\n+\t\t\treturn deriveHost(url);\n+\t\t} else {\n+\t\t\treturn url.getHost();\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Will attempt to derive the port from the {@link JMXServiceURL}. If the JXMServiceURL uses\n+\t * jmxrmi, the port will be derived from the information in the JXMServiceURL.\n+\t *\n+\t * @param url\n+\t *            the {@link JMXServiceURL} to derive the port from.\n+\t * @return the port number\n+\t *\/\n+\tpublic static int getPort(JMXServiceURL url) {\n+\t\tif (url.getPort() <= 0) {\n+\t\t\treturn derivePort(url);\n+\t\t} else {\n+\t\t\treturn url.getPort();\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Helper method to try to derive the host name from a standard jmxrmi JMX service URL.\n+\t *\n+\t * @param url\n+\t *            service URL.\n+\t * @return the host name.\n+\t *\/\n+\tprivate static String deriveHost(JMXServiceURL url) {\n+\t\tStringTokenizer st = new StringTokenizer(url.getURLPath(), \":\/\"); \/\/$NON-NLS-1$\n+\t\tif (st.countTokens() == 5) {\n+\t\t\tfor (int i = 0; i < 2; i++) {\n+\t\t\t\tst.nextToken();\n+\t\t\t}\n+\t\t\tString host = st.nextToken();\n+\t\t\t\/\/ strip dashes\n+\t\t\treturn host;\n+\t\t}\n+\t\treturn \"unknown\"; \/\/$NON-NLS-1$\n+\t}\n+\n+\t\/**\n+\t * Evil helper method to try to derive the port number from a standard jmxrmi JMX service URL.\n+\t *\n+\t * @param url\n+\t *            service URL.\n+\t * @return the port number.\n+\t *\/\n+\tprivate static int derivePort(JMXServiceURL url) {\n+\t\tStringTokenizer st = new StringTokenizer(url.getURLPath(), \":\/\"); \/\/$NON-NLS-1$\n+\t\tif (st.countTokens() == 5) {\n+\t\t\tfor (int i = 0; i < 3; i++) {\n+\t\t\t\tst.nextToken();\n+\t\t\t}\n+\t\t\tString port = st.nextToken();\n+\t\t\ttry {\n+\t\t\t\treturn Integer.parseInt(port);\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\treturn -1;\n+\t\t\t}\n+\t\t}\n+\t\treturn 0;\n+\t}\n+\n+\t\/**\n+\t * Creates a \"JMX over RMI\" or \"JMX over RMP\" service URL.\n+\t *\n+\t * @param host\n+\t *            the host name.\n+\t * @param port\n+\t *            port or {@link ConnectionDescriptorBuilder#DEFAULT_PORT} for the default port for\n+\t *            the selected protocol\n+\t * @return the {@link JMXServiceURL}.\n+\t * @throws MalformedURLException\n+\t *             if the URL could not be created with the provided data.\n+\t *\/\n+\tpublic static JMXServiceURL createServiceURL(String host, int port) throws MalformedURLException {\n+\t\tint actualPort = (port != ConnectionDescriptorBuilder.DEFAULT_PORT) ? port : VALUE_DEFAULT_REMOTE_PORT_JMX;\n+\t\treturn new JMXServiceURL(\"rmi\", \"\", 0, \"\/jndi\/rmi:\/\/\" + host + ':' + actualPort + \"\/jmxrmi\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$ \/\/$NON-NLS-4$\n+\t}\n+\n+\t\/**\n+\t * Returns the default port number for the management agent.\n+\t *\n+\t * @return the default port for the management agent. May vary depending on which JVM version\n+\t *         the method is executed in.\n+\t *\/\n+\tpublic static int getDefaultPort() {\n+\t\treturn VALUE_DEFAULT_REMOTE_PORT_JMX;\n+\t}\n+\n+\t\/**\n+\t * Returns {@code true} if the connection handle is connected to a JRockit, {@code false}\n+\t * otherwise.\n+\t *\n+\t * @param connectionHandle\n+\t *            the connection handle to check.\n+\t * @return {@code true} if the connection handle is connected to a JRockit, {@code false}\n+\t *         otherwise.\n+\t *\/\n+\tpublic static boolean isJRockit(IConnectionHandle connectionHandle) {\n+\t\tString vmName = getVMName(connectionHandle);\n+\t\treturn JavaVMVersionToolkit.isJRockitJVMName(vmName);\n+\t}\n+\n+\t\/**\n+\t * Returns {@code true} if the connection handle is connected to a HotSpot, {@code false}\n+\t * otherwise. This method requires the connection handle to be connected.\n+\t *\n+\t * @param connectionHandle\n+\t *            the connection handle to check.\n+\t * @return {@code true} if the connection handle is connected to a HotSpot, {@code false}\n+\t *         otherwise.\n+\t *\/\n+\tpublic static boolean isHotSpot(IConnectionHandle connectionHandle) {\n+\t\tString vmName = getVMName(connectionHandle);\n+\t\treturn vmName != null && JavaVMVersionToolkit.isHotspotJVMName(vmName);\n+\t}\n+\n+\t\/**\n+\t * Returns {@code true} if the connection handle is connected to a Substrate VM, {@code false}\n+\t * otherwise. This method requires the connection handle to be connected.\n+\t *\n+\t * @param connectionHandle\n+\t *            the connection handle to check.\n+\t * @return {@code true} if the connection handle is connected to a Substrate VM, {@code false}\n+\t *         otherwise.\n+\t *\/\n+\tpublic static boolean isSubstrateVM(IConnectionHandle connectionHandle) {\n+\t\tString vmName = getVMName(connectionHandle);\n+\t\treturn vmName != null && JavaVMVersionToolkit.isSubstrateVMName(vmName);\n+\t}\n+\n+\t\/**\n+\t * Returns {@code true} if the connection handle is associated with an Oracle built JVM,\n+\t * {@code false} otherwise. If the information is already present in the {@link JVMDescriptor},\n+\t * this method will not cause any JMXRMI calls. If the information is lacking, an attempt will\n+\t * be made to look it up in the connected JVM. If the attempt fails, false will be returned.\n+\t *\n+\t * @return {@code true} if the connection handle describes an Oracle JVM, or {@code false}\n+\t *         otherwise or if it could not be determined.\n+\t *\/\n+\tpublic static boolean isOracle(IConnectionHandle handle) {\n+\t\tJVMDescriptor descriptor = handle.getServerDescriptor().getJvmInfo();\n+\t\t\/\/ This should normally not happen for discovered JVMs, but users can create custom connections\n+\t\tString name = null;\n+\t\tif (descriptor != null) {\n+\t\t\tname = descriptor.getJvmName();\n+\t\t} else {\n+\t\t\t\/\/ We try checking if connected\n+\t\t\tif (handle.isConnected()) {\n+\t\t\t\tMBeanServerConnection connection = handle.getServiceOrNull(MBeanServerConnection.class);\n+\t\t\t\tif (connection != null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tname = getRuntimeBean(connection).getVmName();\n+\t\t\t\t\t} catch (IOException e) {\n+\t\t\t\t\t\t\/\/ Worst case we classify JVM name wrong\n+\t\t\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not check if Oracle JVM\", e);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\treturn name != null && (name.contains(\"Java HotSpot\"));\n+\t}\n+\n+\t\/**\n+\t * This will return true if the java version is above or equal the supplied value. (For example\n+\t * 1.7.0_40).\n+\t *\n+\t * @param connectionHandle\n+\t *            the connectionHandle to check.\n+\t * @param minVersion\n+\t *            the java version needed.\n+\t * @return {@code true} if the version is above or equal the supplied value, {@code true} if no\n+\t *         version can be obtained from the connection, {@code false} otherwise.\n+\t *\/\n+\tpublic static boolean isJavaVersionAboveOrEqual(IConnectionHandle connectionHandle, JavaVersion minVersion) {\n+\t\tJavaVersion version = getJavaVersion(connectionHandle);\n+\t\treturn version != null ? version.isGreaterOrEqualThan(minVersion) : true;\n+\t}\n+\n+\tprivate static String getVMName(IConnectionHandle connectionHandle) {\n+\t\tMBeanServerConnection connection = connectionHandle.getServiceOrDummy(MBeanServerConnection.class);\n+\t\ttry {\n+\t\t\t\/\/ getAttribute may fail if the connection handle\n+\t\t\t\/\/ has just been disconnected by the user, which is not a problem\n+\t\t\treturn getRuntimeBean(connection).getVmName();\n+\n+\t\t} catch (Exception e) {\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.INFO, \"Could not check the JVM name!\", e); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate static JavaVersion getJavaVersion(IConnectionHandle connectionHandle) {\n+\t\ttry {\n+\t\t\tMBeanServerConnection server = connectionHandle.getServiceOrThrow(MBeanServerConnection.class);\n+\t\t\tMap<String, String> serverProps = getRuntimeBean(server).getSystemProperties();\n+\t\t\tString javaVersion = serverProps.get(\"java.version\"); \/\/$NON-NLS-1$\n+\t\t\tif (javaVersion != null) {\n+\t\t\t\treturn new JavaVersion(javaVersion);\n+\t\t\t}\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\"System Properties from \" + connectionHandle.getDescription() \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t+ \" contained no java.version property!\"); \/\/$NON-NLS-1$\n+\t\t} catch (Exception e) {\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\"Could not check the java.version from System Properties!\", e); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\t\/**\n+\t * Checks if Flight Recorder is available for use\n+\t * \n+\t * @param connection\n+\t * @return If it is an Oracle JVM or there is a FlightRecorder VM option, then return true.\n+\t *         Otherwise, return false. This is used for verifying JDK 8 JVMs that are not built\n+\t *         with JFR enabled, e.g., OpenJDK 8\n+\t *\/\n+\tpublic static boolean hasFlightRecorder(IConnectionHandle connection) {\n+\t\tif (ConnectionToolkit.isOracle(connection)) {\n+\t\t\treturn true;\n+\t\t}\n+\t\tMBeanServerConnection server = connection.getServiceOrNull(MBeanServerConnection.class);\n+\t\ttry {\n+\t\t\tif (ConnectionToolkit.isSubstrateVM(connection)) {\n+\t\t\t\treturn server.isRegistered(new ObjectName(JFR_MBEAN_OBJECT_NAME));\n+\t\t\t} else {\n+\t\t\t\tHotspotManagementToolkit.getVMOption(server, \"FlightRecorder\");\n+\t\t\t\treturn true;\n+\t\t\t}\n+\t\t} catch (Exception e) { \/\/ RuntimeMBeanException thrown if FlightRecorder is not present\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Checks if Flight Recorder is disabled.\n+\t *\n+\t * @param connection\n+\t *            the connection to check\n+\t * @param explicitFlag\n+\t *            If the flag has to be explicitly disabled on the command line with\n+\t *            -XX:-FlightRecorder\n+\t * @return If explicitFlag is true, then returns true only if Flight Recorder is explicitly\n+\t *         disabled on the command line. If explicitFlag is false, then returns true if Flight\n+\t *         Recorder is currently not enabled.\n+\t *\/\n+\tpublic static boolean isFlightRecorderDisabled(IConnectionHandle connection, boolean explicitFlag) {\n+\t\ttry {\n+\t\t\tMBeanServerConnection server = connection.getServiceOrThrow(MBeanServerConnection.class);\n+\t\t\tboolean disabled = !Boolean\n+\t\t\t\t\t.parseBoolean(HotspotManagementToolkit.getVMOption(server, \"FlightRecorder\").toString()); \/\/$NON-NLS-1$\n+\t\t\tif (explicitFlag) {\n+\t\t\t\treturn (disabled && HotspotManagementToolkit.isVMOptionExplicit(server, \"FlightRecorder\")); \/\/$NON-NLS-1$\n+\t\t\t} else {\n+\t\t\t\treturn disabled;\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/ConnectionToolkit.java","additions":516,"deletions":0,"binary":false,"changes":516,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx;\n+package org.openjdk.jmc.rjmx.common;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/IConnectionDescriptor.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/IConnectionDescriptor.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx;\n+package org.openjdk.jmc.rjmx.common;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/IConnectionHandle.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/IConnectionHandle.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx;\n+package org.openjdk.jmc.rjmx.common;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/IConnectionListener.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/IConnectionListener.java","status":"renamed"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx;\n+package org.openjdk.jmc.rjmx.common;\n@@ -36,1 +36,1 @@\n-import org.openjdk.jmc.rjmx.internal.ServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.internal.ServerDescriptor;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/IServerDescriptor.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/IServerDescriptor.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx;\n+package org.openjdk.jmc.rjmx.common;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/ISyntheticAttribute.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ISyntheticAttribute.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx;\n+package org.openjdk.jmc.rjmx.common;\n@@ -63,1 +63,1 @@\n-\t * @return <tt>true<\/tt> if resources are present, <tt>false<\/tt> otherwise\n+\t * @return true if resources are present, false otherwise\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/ISyntheticNotification.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ISyntheticNotification.java","status":"renamed"},{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common;\n+\n+import java.util.logging.Logger;\n+\n+\/\/import org.openjdk.jmc.rjmx.internal.RJMXSingleton;\n+\n+\/**\n+ * There is one instance of the RJMX Core plugin available from {@link RJMXCorePlugin#getDefault()}.\n+ * The plugin provides:\n+ * <ul>\n+ * <li>access to the connection manager<\/li>\n+ * <li>access to the description repository<\/li>\n+ * <li>access to the global services<\/li>\n+ * <\/ul>\n+ * Clients may not instantiate or subclass this class.\n+ *\/\n+public final class RJMXCorePlugin {\n+\n+\t\/**\n+\t * The plugin identifier.\n+\t *\/\n+\tpublic static final String PLUGIN_ID = \"org.openjdk.jmc.rjmx.common\"; \/\/$NON-NLS-1$\n+\n+\t\/**\n+\t * The identifier for the server configuration.\n+\t *\/\n+\tpublic static final String SERVER_CONFIG_ID = \"serverConfig\"; \/\/$NON-NLS-1$\n+\n+\t\/\/ The logger.\n+\tprivate final static Logger LOGGER = Logger.getLogger(PLUGIN_ID);\n+\n+\t\/\/ The shared instance\n+\tprivate static final RJMXCorePlugin plugin = new RJMXCorePlugin();\n+\n+\t\/**\n+\t * The default constructor.\n+\t *\/\n+\tprivate RJMXCorePlugin() {\n+\t}\n+\n+\t\/**\n+\t * Returns the shared instance.\n+\t *\n+\t * @return the shared instance\n+\t *\/\n+\tpublic static RJMXCorePlugin getDefault() {\n+\t\treturn plugin;\n+\t}\n+\n+\t\/**\n+\t * Returns the logger for RJMX.\n+\t *\n+\t * @return the {@link Logger}\n+\t *\/\n+\tpublic Logger getLogger() {\n+\t\treturn LOGGER;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/RJMXCorePlugin.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx;\n+package org.openjdk.jmc.rjmx.common;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/ServiceNotAvailableException.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/ServiceNotAvailableException.java","status":"renamed"},{"patch":"@@ -0,0 +1,240 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.internal;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+\n+import javax.management.MBeanServerConnection;\n+\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionListener;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.internal.ServiceEntry;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.services.internal.ServiceFactoryManager;\n+\n+\/**\n+ * This class represents a connection to a JVM.\n+ *\n+ * @see org.openjdk.jmc.rjmx.common.internal.RJMXConnection\n+ *\/\n+public class DefaultConnectionHandle implements IConnectionHandle {\n+\n+\t\/\/ The services exposed by this IConnectionHandle (<class,object>)\n+\tprivate final Map<Class<?>, Object> services = Collections.synchronizedMap(new LinkedHashMap<Class<?>, Object>());\n+\n+\tprivate final String description;\n+\tprivate final RJMXConnection connection;\n+\tprivate final IConnectionListener[] listeners;\n+\n+\tprivate static final ServiceFactoryManager FACTORY_MANAGER = new ServiceFactoryManager();\n+\n+\tprivate volatile Long closeDownThreadId; \/\/ Set to -1 when handle is closed\n+\n+\tpublic DefaultConnectionHandle(RJMXConnection connection, String description, IConnectionListener[] listeners) {\n+\t\tthis(connection, description, listeners, new ArrayList<>());\n+\t}\n+\n+\tpublic DefaultConnectionHandle(RJMXConnection connection, String description, IConnectionListener[] listeners,\n+\t\t\tList<ServiceEntry<?>> serviceEntries) {\n+\t\tthis.connection = connection;\n+\t\tthis.description = description;\n+\t\tthis.listeners = listeners == null ? new IConnectionListener[0] : listeners;\n+\t\tFACTORY_MANAGER.initializeFromExtensions(serviceEntries);\n+\t\tregisterDefaultServices();\n+\t}\n+\n+\t@Override\n+\tpublic IServerDescriptor getServerDescriptor() {\n+\t\treturn connection.getServerDescriptor();\n+\t}\n+\n+\t@Override\n+\tpublic boolean isConnected() {\n+\t\treturn isOpen() && connection.isConnected();\n+\t}\n+\n+\tprivate boolean isOpen() {\n+\t\t\/\/ Access allowed if we are not closed, or for the closing thread during shutdown\n+\t\treturn closeDownThreadId == null || Thread.currentThread().getId() == closeDownThreadId;\n+\t}\n+\n+\t@Override\n+\tpublic void close() throws IOException {\n+\t\tsynchronized (services) {\n+\t\t\tif (closeDownThreadId != null) {\n+\t\t\t\t\/\/ Already closed\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\t\/\/ Allow disposing services to get other services, but refuse all other\n+\t\t\tcloseDownThreadId = Thread.currentThread().getId();\n+\t\t\tshutdownServices();\n+\t\t\tcloseDownThreadId = -1L; \/\/ No more access, refuse all\n+\t\t}\n+\t\tfor (IConnectionListener l : listeners) {\n+\t\t\ttry {\n+\t\t\t\tl.onConnectionChange(this);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\t\"DefaultConnectionHandle listener \" + l + \" failed\", e); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void shutdownServices() {\n+\t\tObject[] servicesArray = services.values().toArray();\n+\t\tfor (int i = 0; i < servicesArray.length; i++) {\n+\t\t\tObject service = servicesArray[servicesArray.length - i - 1];\n+\t\t\tif (service instanceof IDisposableService) {\n+\t\t\t\ttry {\n+\t\t\t\t\t((IDisposableService) service).dispose();\n+\t\t\t\t} catch (RuntimeException e) {\n+\t\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\t\t\"Could not shut down the \" + service.getClass().getName() \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\t\t+ \" service.\", \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\te);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tservices.clear();\n+\t}\n+\n+\t\/**\n+\t * Free external resources.\n+\t *\n+\t * @see java.lang.Object#finalize()\n+\t *\/\n+\t@Override\n+\tprotected void finalize() throws Throwable {\n+\t\t\/\/ Make sure that external resources are freed upon GC.\n+\t\tclose();\n+\t\tsuper.finalize();\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn description + \" - \" + connection.toString(); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Override\n+\tpublic <T> T getServiceOrThrow(Class<T> serviceInterface) throws ConnectionException, ServiceNotAvailableException {\n+\t\tif (isOpen()) {\n+\t\t\tT service = getService(serviceInterface, false);\n+\t\t\tif (service != null) {\n+\t\t\t\treturn service;\n+\t\t\t}\n+\t\t} else {\n+\t\t\tthrow new ConnectionException(\"Connection closed!\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\tthrow new ServiceNotAvailableException(\"Service '\" + serviceInterface.getName() + \"' not available!\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t}\n+\n+\t@Override\n+\tpublic <T> T getServiceOrDummy(Class<T> serviceInterface) {\n+\t\tif (!serviceInterface.isInterface()) {\n+\t\t\t\/*\n+\t\t\t * If you get this, you need to call createServiceOrNull() instead and handle the null\n+\t\t\t * case. (And yes, we want to check this before attempting to create a service. Ideally,\n+\t\t\t * we would like to check this at compile time, but langtools couldn't come up with a\n+\t\t\t * good way to do so when we asked. Although JSR 308 and the Checker Framework should\n+\t\t\t * change that.)\n+\t\t\t *\/\n+\t\t\tthrow new IllegalArgumentException(\"Will not be able to create dummy implementations of \" \/\/$NON-NLS-1$\n+\t\t\t\t\t+ serviceInterface.getName() + \" since the service is not an interface\"); \/\/$NON-NLS-1$\n+\t\t} else if (isOpen()) {\n+\t\t\treturn getService(serviceInterface, true);\n+\t\t} else {\n+\t\t\treturn createDummyService(serviceInterface);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic <T> T getServiceOrNull(Class<T> serviceInterface) {\n+\t\tif (isOpen()) {\n+\t\t\treturn getService(serviceInterface, false);\n+\t\t} else {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tprivate <T> T getService(Class<T> serviceInterface, boolean acceptDummy) {\n+\t\tsynchronized (services) {\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tT service = (T) services.get(serviceInterface);\n+\t\t\tif (service == null || (ServiceFactoryManager.isDummy(service) && !acceptDummy)) {\n+\t\t\t\tservice = FACTORY_MANAGER.createService(serviceInterface, this);\n+\t\t\t\tif ((service == null) && acceptDummy) {\n+\t\t\t\t\tservice = createDummyService(serviceInterface);\n+\t\t\t\t}\n+\t\t\t\tif (service != null) {\n+\t\t\t\t\tservices.put(serviceInterface, service);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn (acceptDummy || !ServiceFactoryManager.isDummy(service)) ? service : null;\n+\t\t}\n+\t}\n+\n+\tprivate static <T> T createDummyService(Class<T> serviceInterface) throws IllegalArgumentException {\n+\t\treturn ServiceFactoryManager.createDummyService(serviceInterface, null);\n+\t}\n+\n+\tprivate synchronized void registerDefaultServices() {\n+\t\tsynchronized (services) {\n+\t\t\tservices.put(MBeanServerConnection.class, connection.getMBeanServer());\n+\t\t\tservices.put(IMBeanHelperService.class, connection);\n+\t\t\tservices.put(IMRIService.class, connection.getMRIService());\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasService(Class<?> serviceClass) {\n+\t\tsynchronized (services) {\n+\t\t\treturn getServiceOrNull(serviceClass) != null;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String getDescription() {\n+\t\treturn description;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/DefaultConnectionHandle.java","additions":240,"deletions":0,"binary":false,"changes":240,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.internal;\n+package org.openjdk.jmc.rjmx.common.internal;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/IDisposableService.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/IDisposableService.java","status":"renamed"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.internal;\n+package org.openjdk.jmc.rjmx.common.internal;\n@@ -45,2 +45,2 @@\n-import org.openjdk.jmc.rjmx.ConnectionDescriptorBuilder;\n-import org.openjdk.jmc.rjmx.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.ConnectionDescriptorBuilder;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/JMXConnectionDescriptor.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/JMXConnectionDescriptor.java","status":"renamed"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.internal;\n+\n+import java.util.Properties;\n+import java.util.logging.Level;\n+\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n+import org.openjdk.jmc.rjmx.common.preferences.JMXRMIPreferences;\n+\n+public final class JMXRMISystemPropertiesProvider {\n+\n+\tpublic static void setup() {\n+\t\ttry {\n+\t\t\tProperties jmxRmiProperties = JMXRMIPreferences.getInstance().getProperties();\n+\t\t\tif (jmxRmiProperties != null) {\n+\t\t\t\tfor (String prop : jmxRmiProperties.stringPropertyNames()) {\n+\t\t\t\t\tObject val = jmxRmiProperties.get(prop);\n+\t\t\t\t\tif (val != null && !val.toString().isEmpty()) {\n+\t\t\t\t\t\tSystem.setProperty(prop, val.toString());\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.FINE, \"Did not load jmxRmiProperties\", e); \/\/$NON-NLS-1$\n+\t\t}\n+\t}\n+\n+\tpublic static void clearJMXRMISystemProperties() {\n+\t\ttry {\n+\t\t\tProperties jmxRmiProperties = JMXRMIPreferences.getInstance().getProperties();\n+\t\t\tif (jmxRmiProperties != null) {\n+\t\t\t\tfor (String prop : jmxRmiProperties.stringPropertyNames()) {\n+\t\t\t\t\tSystem.clearProperty(prop);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.FINE, \"Failed to remove JMXRMI SystemProperties\", e); \/\/$NON-NLS-1$\n+\t\t}\n+\t}\n+\n+\tpublic static boolean isKeyStoreConfigured() {\n+\t\ttry {\n+\t\t\tProperties jmxRmiProperties = JMXRMIPreferences.getInstance().getProperties();\n+\t\t\tif (jmxRmiProperties != null) {\n+\t\t\t\tint totalPrefCnt = 0;\n+\t\t\t\tfor (String prop : jmxRmiProperties.stringPropertyNames()) {\n+\t\t\t\t\tObject val = jmxRmiProperties.get(prop);\n+\t\t\t\t\tif (val != null && !val.toString().isEmpty()) {\n+\t\t\t\t\t\t++totalPrefCnt;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (totalPrefCnt == 4) {\n+\t\t\t\t\treturn true;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.FINE, \"Did not load jmxRmiProperties\", e); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn false;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/JMXRMISystemPropertiesProvider.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.internal;\n+package org.openjdk.jmc.rjmx.common.internal;\n@@ -48,5 +48,5 @@\n-import org.openjdk.jmc.rjmx.services.IOperation;\n-import org.openjdk.jmc.rjmx.services.IllegalOperandException;\n-import org.openjdk.jmc.rjmx.services.internal.AbstractOperation;\n-import org.openjdk.jmc.rjmx.services.internal.Messages;\n-import org.openjdk.jmc.rjmx.util.internal.SimpleAttributeInfo;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.services.IllegalOperandException;\n+import org.openjdk.jmc.rjmx.common.services.internal.AbstractOperation;\n+import org.openjdk.jmc.rjmx.common.util.internal.SimpleAttributeInfo;\n+import org.openjdk.jmc.rjmx.common.messages.internal.Messages;\n@@ -181,1 +181,1 @@\n-\t\t\t\tsb.append(Messages.MBeanOperationsWrapper_DESCRIPTOR).append(\":\\n \"); \/\/$NON-NLS-1$\n+\t\t\t\tsb.append(Messages.getString(Messages.MBeanOperationsWrapper_DESCRIPTOR)).append(\":\\n \"); \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/MBeanOperationWrapper.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/MBeanOperationWrapper.java","status":"renamed"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.internal;\n+package org.openjdk.jmc.rjmx.common.internal;\n@@ -67,2 +67,2 @@\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.subscription.internal.AttributeValueToolkit;\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.AttributeValueToolkit;\n@@ -78,1 +78,2 @@\n-\tpublic MCMBeanServerConnection(MBeanServerConnection delegate) {\n+\tpublic MCMBeanServerConnection(MBeanServerConnection delegate, List<SyntheticAttributeEntry> attributeEntries,\n+\t\t\tList<SyntheticNotificationEntry> notificationEntries) {\n@@ -82,2 +83,2 @@\n-\t\tattributeRepository.initializeFromExtensions();\n-\t\tnotificationRepository.initializeFromExtensions();\n+\t\tnotificationRepository.initializeFromExtensions(notificationEntries);\n+\t\tattributeRepository.initializeFromExtensions(attributeEntries);\n@@ -264,1 +265,1 @@\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.FINE,\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.FINE,\n@@ -267,1 +268,1 @@\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.FINE,\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.FINE,\n@@ -325,1 +326,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n@@ -327,1 +328,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n@@ -359,1 +360,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n@@ -361,1 +362,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n@@ -390,1 +391,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n@@ -392,1 +393,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n@@ -423,1 +424,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n@@ -425,1 +426,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n@@ -455,1 +456,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n@@ -457,1 +458,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n@@ -489,1 +490,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n@@ -491,1 +492,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Could not add listener!\", e); \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/MCMBeanServerConnection.java","additions":21,"deletions":20,"binary":false,"changes":41,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/MCMBeanServerConnection.java","status":"renamed"},{"patch":"@@ -0,0 +1,616 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.internal;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.net.MalformedURLException;\n+import java.rmi.UnmarshalException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.logging.Level;\n+\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.JMRuntimeException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServerConnection;\n+import javax.management.MBeanServerDelegate;\n+import javax.management.MBeanServerNotification;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.Notification;\n+import javax.management.NotificationListener;\n+import javax.management.ObjectName;\n+import javax.management.QueryExp;\n+import javax.management.ReflectionException;\n+import javax.management.remote.JMXConnectionNotification;\n+import javax.management.remote.JMXConnector;\n+import javax.management.remote.JMXConnectorFactory;\n+import javax.management.remote.JMXServiceURL;\n+import javax.rmi.ssl.SslRMIClientSocketFactory;\n+\n+import org.openjdk.jmc.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.common.version.JavaVersion;\n+import org.openjdk.jmc.common.version.JavaVersionSupport;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanServerChangeListener;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.AttributeValueToolkit;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.InvoluntaryDisconnectException;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.MBeanMRIMetadataDB;\n+\n+\/**\n+ * This class simplifies and hides some of the complexity of connecting to a JVM (supporting JSR-174\n+ * and JSR-160) using Remote JMX. The RJMXConnection is shared between several\n+ * {@link DefaultConnectionHandle}s, and when the last {@link DefaultConnectionHandle} using the\n+ * JRMXConnection is closed, the RJMXConnection will be automatically closed.\n+ *\/\n+public class RJMXConnection implements Closeable, IMBeanHelperService {\n+\n+\tpublic static final String KEY_SOCKET_FACTORY = \"com.sun.jndi.rmi.factory.socket\"; \/\/$NON-NLS-1$\n+\tpublic static final String KEY_JMXREMOTE_SSL = \"com.sun.management.jmxremote.ssl\"; \/\/$NON-NLS-1$\n+\n+\t\/**\n+\t * Default recalibration interval. The server to client timediff is recalibrated every two\n+\t * minutes per default.\n+\t *\/\n+\tprivate static final long VALUE_RECALIBRATION_INTERVAL = 120000;\n+\tprivate static final long REMOTE_START_TIME_UNDEFINED = -1;\n+\tprivate static final AtomicInteger CONNECTION_COUNTER = new AtomicInteger();\n+\n+\t\/\/ The ConnectionDescriptor used to create this RJMXConnection\n+\tprivate final IConnectionDescriptor m_connectionDescriptor;\n+\tprivate final IServerDescriptor m_serverDescriptor;\n+\tprivate final int m_connectionId = CONNECTION_COUNTER.getAndIncrement();\n+\n+\t\/\/ The MBean server connection used for all local and remote communication.\n+\tprivate volatile MCMBeanServerConnection m_server;\n+\n+\t\/\/ The underlying JMX connection used when communicating remote.\n+\tprivate JMXConnector m_jmxc;\n+\n+\tprivate final MBeanMRIMetadataDB m_mbeanDataProvider;\n+\n+\t\/\/ Variables used for calibrating the offset to the server clock.\n+\tprivate long m_serverOffset;\n+\tprivate long m_lastRecalibration;\n+\tprivate long m_remoteStartTime = REMOTE_START_TIME_UNDEFINED;\n+\n+\tprivate boolean m_hasInitializedAllMBeans = false;\n+\tprivate final HashMap<ObjectName, MBeanInfo> m_cachedInfos = new HashMap<>();\n+\tprivate volatile Set<ObjectName> m_cachedMBeanNames = new HashSet<>();\n+\tprivate final Runnable m_onFailCallback;\n+\tprivate final CopyOnWriteArrayList<IMBeanServerChangeListener> m_mbeanListeners = new CopyOnWriteArrayList<>();\n+\tprivate final NotificationListener m_registrationListener = new NotificationListener() {\n+\t\t@Override\n+\t\tpublic void handleNotification(Notification notification, Object handback) {\n+\t\t\tif (notification instanceof MBeanServerNotification) {\n+\t\t\t\tObjectName name = ((MBeanServerNotification) notification).getMBeanName();\n+\t\t\t\tif (notification.getType().equals(MBeanServerNotification.REGISTRATION_NOTIFICATION)) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tsynchronized (m_cachedInfos) {\n+\t\t\t\t\t\t\tgetMBeanInfo(name);\n+\t\t\t\t\t\t\tif (m_cachedMBeanNames.size() > 0) {\n+\t\t\t\t\t\t\t\tm_cachedMBeanNames.add(name);\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tfor (IMBeanServerChangeListener l : m_mbeanListeners) {\n+\t\t\t\t\t\t\tl.mbeanRegistered(name);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\t\t\t\"Could not retrieve MBean information for \" + name + '!', e); \/\/$NON-NLS-1$\n+\t\t\t\t\t}\n+\t\t\t\t} else if (notification.getType().equals(MBeanServerNotification.UNREGISTRATION_NOTIFICATION)) {\n+\t\t\t\t\tsynchronized (m_cachedInfos) {\n+\t\t\t\t\t\tm_cachedInfos.remove(name);\n+\t\t\t\t\t\tm_cachedMBeanNames.remove(name);\n+\t\t\t\t\t}\n+\t\t\t\t\tfor (IMBeanServerChangeListener l : m_mbeanListeners) {\n+\t\t\t\t\t\tl.mbeanUnregistered(name);\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t};\n+\n+\tprivate final NotificationListener m_disconnectListener = new NotificationListener() {\n+\n+\t\t@Override\n+\t\tpublic void handleNotification(Notification notification, Object handback) {\n+\t\t\tif (notification != null && (JMXConnectionNotification.CLOSED.equals(notification.getType())\n+\t\t\t\t\t|| JMXConnectionNotification.FAILED.equals(notification.getType()))) {\n+\t\t\t\tclose();\n+\t\t\t\tif (m_onFailCallback != null) {\n+\t\t\t\t\tm_onFailCallback.run();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t};\n+\n+\tprivate final Object connectionStateLock = new Object();\n+\n+\tprivate List<SyntheticNotificationEntry> notificationEntries;\n+\n+\tpublic void setSyntheticNotificationEntries(List<SyntheticNotificationEntry> notificationEntries) {\n+\t\tthis.notificationEntries = notificationEntries;\n+\t}\n+\n+\tprivate List<SyntheticAttributeEntry> attributeEntries;\n+\n+\tpublic void setSyntheticAttributeEntries(List<SyntheticAttributeEntry> attributeEntries) {\n+\t\tthis.attributeEntries = attributeEntries;\n+\t}\n+\n+\tpublic RJMXConnection(IConnectionDescriptor connectionDescriptor, IServerDescriptor serverDescriptor,\n+\t\t\tRunnable onFailCallback) {\n+\t\tthis(connectionDescriptor, serverDescriptor, onFailCallback, new ArrayList<>(), new ArrayList<>());\n+\t}\n+\n+\t\/**\n+\t * Creates a new remote JMX connection to the specified host, using the supplied credentials. If\n+\t * password is null or empty, it will be ignored. Will attempt to set up a connection to the\n+\t * server immediately. The Constructor will fail if no connection could be established.\n+\t *\n+\t * @throws MalformedURLException\n+\t *\/\n+\tpublic RJMXConnection(IConnectionDescriptor connectionDescriptor, IServerDescriptor serverDescriptor,\n+\t\t\tRunnable onFailCallback, List<SyntheticAttributeEntry> attributeEntries,\n+\t\t\tList<SyntheticNotificationEntry> notificationEntries) {\n+\t\tif (connectionDescriptor == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Connection descriptor must not be null!\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\tif (serverDescriptor == null) {\n+\t\t\tthrow new IllegalArgumentException(\"Server descriptor must not be null!\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\tthis.attributeEntries = attributeEntries;\n+\t\tthis.notificationEntries = notificationEntries;\n+\t\tm_onFailCallback = onFailCallback;\n+\t\tm_connectionDescriptor = connectionDescriptor;\n+\t\tm_serverDescriptor = serverDescriptor;\n+\t\tm_mbeanDataProvider = new MBeanMRIMetadataDB(this);\n+\t\taddMBeanServerChangeListener(m_mbeanDataProvider);\n+\t}\n+\n+\tpublic IServerDescriptor getServerDescriptor() {\n+\t\treturn m_serverDescriptor;\n+\t}\n+\n+\tpublic IConnectionDescriptor getConnectionDescriptor() {\n+\t\treturn m_connectionDescriptor;\n+\t}\n+\n+\t\/**\n+\t * Disconnects the connection from the RJMX server\n+\t *\/\n+\t@Override\n+\tpublic void close() {\n+\t\tsynchronized (connectionStateLock) {\n+\t\t\tif (isConnected()) {\n+\t\t\t\tMCMBeanServerConnection tmpServer = m_server;\n+\t\t\t\tm_server = null;\n+\t\t\t\ttryRemovingListener(tmpServer);\n+\t\t\t\ttmpServer.dispose();\n+\t\t\t\tclearCollections();\n+\t\t\t\tif (m_jmxc != null) {\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tm_jmxc.close();\n+\t\t\t\t\t} catch (Exception e) {\n+\t\t\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.INFO, \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\t\"Problem when closing connection.\", e);\n+\t\t\t\t\t}\n+\t\t\t\t\tm_jmxc = null;\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Sometimes we can fail to remove the unregister listeners from the MBeanConnection, causing\n+\t * JMX to keep a reference to this instance. To minimize impact if this happens, we clear all\n+\t * collections from data.\n+\t *\/\n+\tprivate void clearCollections() {\n+\t\tclearCache();\n+\t}\n+\n+\tprivate void tryRemovingListener(MCMBeanServerConnection tmpServer) {\n+\t\ttry {\n+\t\t\tif (tmpServer != null) {\n+\t\t\t\ttmpServer.removeNotificationListener(MBeanServerDelegate.DELEGATE_NAME, m_registrationListener);\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\"Failed to remove unregistration listener! Lost connection?\", e); \/\/$NON-NLS-1$\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Returns whether the underlying connector is connected\n+\t *\n+\t * @return true if the underlying connector is still connected\n+\t *\/\n+\tpublic boolean isConnected() {\n+\t\treturn m_server != null;\n+\t}\n+\n+\t@Override\n+\tpublic Set<ObjectName> getMBeanNames() throws IOException {\n+\t\tsynchronized (m_cachedInfos) {\n+\t\t\tif (m_cachedMBeanNames.size() == 0) {\n+\t\t\t\tMBeanServerConnection server = ensureConnected();\n+\t\t\t\tm_cachedMBeanNames = server.queryNames(null, null);\n+\t\t\t}\n+\t\t\treturn new HashSet<>(m_cachedMBeanNames);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic HashMap<ObjectName, MBeanInfo> getMBeanInfos() throws IOException {\n+\t\tsynchronized (m_cachedInfos) {\n+\t\t\tinitializeMBeanInfos();\n+\t\t\treturn new HashMap<>(m_cachedInfos);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic MBeanInfo getMBeanInfo(ObjectName mbean)\n+\t\t\tthrows InstanceNotFoundException, IntrospectionException, ReflectionException, IOException {\n+\t\tsynchronized (m_cachedInfos) {\n+\t\t\tMBeanInfo mbeanInfo = m_cachedInfos.get(mbean);\n+\t\t\tif (mbeanInfo == null) {\n+\t\t\t\tMBeanServerConnection server = ensureConnected();\n+\t\t\t\tmbeanInfo = server.getMBeanInfo(mbean);\n+\t\t\t\tif (mbeanInfo != null) {\n+\t\t\t\t\tm_cachedInfos.put(mbean, mbeanInfo);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn mbeanInfo;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic Object getAttributeValue(MRI attribute) throws AttributeNotFoundException, MBeanException, IOException,\n+\t\t\tInstanceNotFoundException, ReflectionException {\n+\t\ttry {\n+\t\t\tMBeanServerConnection server = ensureConnected();\n+\t\t\treturn AttributeValueToolkit.getAttribute(server, attribute);\n+\t\t} catch (JMRuntimeException e) {\n+\t\t\tthrow new MBeanException(e, e.getMessage());\n+\t\t}\n+\t}\n+\n+\tpublic boolean connect() throws ConnectionException {\n+\t\tJVMDescriptor jvmInfo = getServerDescriptor().getJvmInfo();\n+\t\tif (jvmInfo != null && jvmInfo.getJavaVersion() != null\n+\t\t\t\t&& !new JavaVersion(jvmInfo.getJavaVersion()).isGreaterOrEqualThan(JavaVersionSupport.JDK_6)) {\n+\t\t\tthrow new ConnectionException(\"Too low JDK Version. JDK 1.6 or higher is supported.\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\tsynchronized (connectionStateLock) {\n+\t\t\tif (isConnected()) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t\tJMXServiceURL url;\n+\t\t\ttry {\n+\t\t\t\turl = m_connectionDescriptor.createJMXServiceURL();\n+\t\t\t} catch (IOException e1) {\n+\t\t\t\tthrow new WrappedConnectionException(m_serverDescriptor.getDisplayName(), null, e1);\n+\t\t\t}\n+\n+\t\t\ttry {\n+\t\t\t\t\/\/ Use same convention as Sun. localhost:0 means \"VM, monitor thyself!\"\n+\t\t\t\tString hostName = ConnectionToolkit.getHostName(url);\n+\t\t\t\tif (hostName != null && (hostName.equals(\"localhost\")) \/\/$NON-NLS-1$\n+\t\t\t\t\t\t&& ConnectionToolkit.getPort(url) == 0) {\n+\t\t\t\t\tm_server = new MCMBeanServerConnection(ManagementFactory.getPlatformMBeanServer(), attributeEntries,\n+\t\t\t\t\t\t\tnotificationEntries);\n+\t\t\t\t} else {\n+\t\t\t\t\testablishConnection(url, m_connectionDescriptor.getEnvironment());\n+\t\t\t\t}\n+\t\t\t\ttryToAddMBeanNotificationListener();\n+\t\t\t\tm_remoteStartTime = fetchServerStartTime();\n+\t\t\t\treturn true;\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tm_server = null;\n+\t\t\t\tthrow new WrappedConnectionException(m_serverDescriptor.getDisplayName(), url, e);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic long getApproximateServerTime(long localTime) {\n+\t\tlong startTime = System.currentTimeMillis();\n+\t\tif ((startTime - m_lastRecalibration) > VALUE_RECALIBRATION_INTERVAL\n+\t\t\t\t&& m_remoteStartTime != REMOTE_START_TIME_UNDEFINED) {\n+\t\t\ttry {\n+\t\t\t\t\/*\n+\t\t\t\t * FIXME: JMC-4270 - Server time approximation is not reliable. Since JDK-6523160,\n+\t\t\t\t * getUptime can no longer be used to derive the current server time. Find some\n+\t\t\t\t * other way to do this.\n+\t\t\t\t *\/\n+\t\t\t\tlong uptime = ConnectionToolkit.getRuntimeBean(ensureConnected()).getUptime();\n+\t\t\t\tlong returnTime = System.currentTimeMillis();\n+\t\t\t\tlong localTimeEstimate = (startTime + returnTime) \/ 2;\n+\t\t\t\tm_serverOffset = m_remoteStartTime + uptime - localTimeEstimate;\n+\t\t\t\tm_lastRecalibration = returnTime;\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.SEVERE, \"Could not recalibrate server offset\", \/\/$NON-NLS-1$\n+\t\t\t\t\t\te);\n+\t\t\t}\n+\t\t}\n+\t\treturn localTime + m_serverOffset;\n+\t}\n+\n+\tpublic void clearCache() {\n+\t\tsynchronized (m_cachedInfos) {\n+\t\t\tm_cachedInfos.clear();\n+\t\t\tm_cachedMBeanNames.clear();\n+\t\t\tm_hasInitializedAllMBeans = false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn \"RJMX Connection \" + m_connectionId + \": \" + m_serverDescriptor.getDisplayName(); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Override\n+\tpublic void removeMBeanServerChangeListener(IMBeanServerChangeListener listener) {\n+\t\tm_mbeanListeners.remove(listener);\n+\t}\n+\n+\t@Override\n+\tpublic void addMBeanServerChangeListener(IMBeanServerChangeListener listener) {\n+\t\tm_mbeanListeners.add(listener);\n+\t}\n+\n+\t@Override\n+\tpublic Map<MRI, Map<String, Object>> getMBeanMetadata(ObjectName mbean) {\n+\t\treturn m_mbeanDataProvider.getMBeanData(mbean);\n+\t}\n+\n+\t\/**\n+\t * Returns the IOperations available for the specified MBean.\n+\t *\n+\t * @param mbean\n+\t *            the MBean for which to return the information.\n+\t * @return the operations that can be invoked on this mbean.\n+\t * @throws Exception\n+\t *             if the connection failed or some other problem occurred when trying create\n+\t *             operations.\n+\t *\/\n+\tpublic Collection<IOperation> getOperations(ObjectName mbean) throws Exception {\n+\t\tMBeanServerConnection connection = ensureConnected();\n+\t\treturn MBeanOperationWrapper.createOperations(connection, mbean,\n+\t\t\t\tconnection.getMBeanInfo(mbean).getOperations());\n+\t}\n+\n+\tpublic IMRIService getMRIService() {\n+\t\treturn m_mbeanDataProvider;\n+\t}\n+\n+\t\/**\n+\t * Returns the MBeanServerConnection. Yes, this breaks abstraction a bit, and should only be\n+\t * used by the MBeanBrowser. Everybody else should be using subscriptions anyway.\n+\t *\n+\t * @return the MBeanServerConnection currently in use by this connection. May be null if none is\n+\t *         currently in use.\n+\t *\/\n+\tpublic MBeanServerConnection getMBeanServer() {\n+\t\treturn m_server;\n+\t}\n+\n+\t\/**\n+\t * Returns the bean information for the MBeans matching the domain and query.\n+\t *\n+\t * @param domain\n+\t *            the domain for which to retrieve the information.\n+\t * @param query\n+\t *            a query to filter for which MBeans to retrieve the information.\n+\t * @return a map with the ObjectNames and their associated MBeanInfos.\n+\t * @throws IOException\n+\t *             if the connection failed or some other IO related problem occurred.\n+\t * @throws MalformedObjectNameException\n+\t *             if a particularly malign (malformatted) domain was specified.\n+\t *\/\n+\tprivate HashMap<ObjectName, MBeanInfo> getMBeanInfos(String domain, QueryExp query)\n+\t\t\tthrows MalformedObjectNameException, IOException {\n+\t\tMBeanServerConnection server = ensureConnected();\n+\t\tObjectName objectName = null;\n+\t\tint skippedMBeanCounter = 0;\n+\t\tif (domain != null) {\n+\t\t\tobjectName = new ObjectName(domain + \":*\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\tSet<ObjectName> names = server.queryNames(objectName, query);\n+\t\tHashMap<ObjectName, MBeanInfo> infos = new HashMap<>(names.size());\n+\n+\t\tIterator<ObjectName> iter = names.iterator();\n+\t\twhile (iter.hasNext()) {\n+\t\t\tObjectName name = iter.next();\n+\t\t\ttry {\n+\t\t\t\tinfos.put(name, getMBeanInfo(name));\n+\t\t\t} catch (NullPointerException e) {\n+\t\t\t\t\/*\n+\t\t\t\t * Skip problematic MBeans when connecting. Workaround implemented so that we can\n+\t\t\t\t * connect to JBoss 4.2.3.\n+\t\t\t\t *\/\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Skipping \" + name.toString() \/\/$NON-NLS-1$\n+\t\t\t\t\t\t+ \". Could not retrieve the MBean info for the MBean. Set log level to fine for stacktrace!\"); \/\/$NON-NLS-1$\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.FINE, e.getMessage(), e);\n+\t\t\t\tskippedMBeanCounter++;\n+\t\t\t} catch (UnmarshalException e) {\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Skipping \" \/\/$NON-NLS-1$\n+\t\t\t\t\t\t+ name.toString()\n+\t\t\t\t\t\t+ \". Could not retrieve the MBean info due to marshalling problems. Set log level to fine for stacktrace!\"); \/\/$NON-NLS-1$\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.FINE, e.getMessage(), e);\n+\t\t\t\tskippedMBeanCounter++;\n+\t\t\t} catch (InstanceNotFoundException e) {\n+\t\t\t\t\/*\n+\t\t\t\t * We may end up here if the MBean was unregistered between the call to\n+\t\t\t\t * getMBeanNames and getMBeanInfo(). Should not be very common though.\n+\t\t\t\t *\/\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Skipping \" + name.toString() \/\/$NON-NLS-1$\n+\t\t\t\t\t\t+ \". It could not be found and may have been unregistered very recently. Set log level to fine to fine for stacktrace!\"); \/\/$NON-NLS-1$\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.FINE, e.getMessage(), e);\n+\t\t\t} catch (IntrospectionException e) {\n+\t\t\t\tIOException exception = new IOException(\"Error accessing the bean.\"); \/\/$NON-NLS-1$\n+\t\t\t\texception.initCause(e);\n+\t\t\t\tthrow exception;\n+\t\t\t} catch (ReflectionException e) {\n+\t\t\t\tIOException exception = new IOException(\"Error accessing the bean.\"); \/\/$NON-NLS-1$\n+\t\t\t\texception.initCause(e);\n+\t\t\t\tthrow exception;\n+\t\t\t}\n+\t\t}\n+\t\tif (skippedMBeanCounter > 0) {\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\"Skipped \" + skippedMBeanCounter + \" MBeans because of marshalling related issues.\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t}\n+\t\treturn infos;\n+\t}\n+\n+\t\/**\n+\t * Tries to add a dedicated notification listener that removes unloaded MBeans.\n+\t *\/\n+\tprivate void tryToAddMBeanNotificationListener() {\n+\t\ttry {\n+\t\t\tensureConnected().addNotificationListener(MBeanServerDelegate.DELEGATE_NAME, m_registrationListener, null,\n+\t\t\t\t\tnull);\n+\t\t} catch (InstanceNotFoundException e) {\n+\t\t\t\/\/ Will typically not happen.\n+\t\t} catch (IOException e) {\n+\t\t\t\/\/ Will typically not happen.\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Tries to populate the MBean information cache if it is empty.\n+\t *\n+\t * @throws IOException\n+\t *             if the connection failed or some other IO related problem occurred.\n+\t *\/\n+\tprivate void initializeMBeanInfos() throws IOException {\n+\t\tsynchronized (m_cachedInfos) {\n+\t\t\tif (!m_hasInitializedAllMBeans) {\n+\t\t\t\ttry {\n+\t\t\t\t\tgetMBeanInfos(null, null);\n+\t\t\t\t\tm_hasInitializedAllMBeans = true;\n+\t\t\t\t} catch (MalformedObjectNameException e) {\n+\t\t\t\t\tassert (false); \/\/ Should not be able to get here!\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate long fetchServerStartTime() throws IOException {\n+\t\ttry {\n+\t\t\treturn ConnectionToolkit.getRuntimeBean(ensureConnected()).getStartTime();\n+\t\t} catch (IllegalArgumentException e) {\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\"Could not find the Runtime MBean. You are probably connecting to a custom MBean server. Functionality will be limited.\", \/\/$NON-NLS-1$\n+\t\t\t\t\te);\n+\t\t\treturn REMOTE_START_TIME_UNDEFINED;\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Attempts to establish a connection. If the connection fails due to symptoms indicating the\n+\t * registry using SSL, another attempt to connect will be performed, with the required additions\n+\t * to the env.\n+\t *\/\n+\tprivate void establishConnection(JMXServiceURL serviceURL, Map<String, Object> env) throws IOException {\n+\t\ttry {\n+\t\t\tconnectJmxConnector(serviceURL, env);\n+\t\t} catch (IOException exception) {\n+\t\t\ttry {\n+\t\t\t\tif (env.get(KEY_SOCKET_FACTORY) instanceof SslRMIClientSocketFactory) {\n+\t\t\t\t\tenv.remove(KEY_SOCKET_FACTORY);\n+\t\t\t\t} else {\n+\t\t\t\t\tenv.put(KEY_SOCKET_FACTORY, new SslRMIClientSocketFactory());\n+\t\t\t\t}\n+\t\t\t\tconnectJmxConnector(serviceURL, env);\n+\t\t\t} catch (IOException ioe) {\n+\t\t\t\t\/\/ So we failed even when changing to secure sockets. Original exception was probably spot on...\n+\t\t\t\tthrow exception;\n+\t\t\t}\n+\t\t}\n+\t\tm_server = new MCMBeanServerConnection(m_jmxc.getMBeanServerConnection(), attributeEntries,\n+\t\t\t\tnotificationEntries);\n+\t}\n+\n+\tprivate void connectJmxConnector(JMXServiceURL serviceURL, Map<String, Object> env) throws IOException {\n+\t\tm_jmxc = JMXConnectorFactory.newJMXConnector(serviceURL, env);\n+\t\tm_jmxc.addConnectionNotificationListener(m_disconnectListener, null, null);\n+\t\t\/\/ This is a hack to provide SSL properties to the RMI SSL server socket factory using system properties\n+\t\tJMXRMISystemPropertiesProvider.setup();\n+\t\t\/\/ According to javadocs, has to pass env here too (which mSA RMI took literally).\n+\t\tm_jmxc.connect(env);\n+\t\tJMXRMISystemPropertiesProvider.clearJMXRMISystemProperties();\n+\t}\n+\n+\t\/**\n+\t * Ok, so this method may not be very useful, from a strict synchronization perspective, but at\n+\t * least it is now done in ONE place.\n+\t *\n+\t * @return a MBeanServerConnection, if connected (or at least non-null).\n+\t * @throws IOException\n+\t *             if not connected.\n+\t *\/\n+\tprivate MBeanServerConnection ensureConnected() throws IOException {\n+\t\tMBeanServerConnection server = m_server;\n+\t\tif (server == null) {\n+\t\t\tthrow new InvoluntaryDisconnectException(\"Server is disconnected!\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn server;\n+\t}\n+\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/RJMXConnection.java","additions":616,"deletions":0,"binary":false,"changes":616,"status":"added"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.internal;\n+package org.openjdk.jmc.rjmx.common.internal;\n@@ -38,2 +38,3 @@\n-import org.openjdk.jmc.rjmx.IServerDescriptor;\n-import org.openjdk.jmc.ui.common.labelingrules.NameConverter;\n+import org.openjdk.jmc.common.labelingrules.NameConverter;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+\/\/import org.openjdk.jmc.ui.common.labelingrules.NameConverter;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/ServerDescriptor.java","additions":4,"deletions":3,"binary":false,"changes":7,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/ServerDescriptor.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.internal;\n+package org.openjdk.jmc.rjmx.common.internal;\n@@ -35,2 +35,2 @@\n-import org.openjdk.jmc.rjmx.ISyntheticAttribute;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.ISyntheticAttribute;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/SyntheticAttributeEntry.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/SyntheticAttributeEntry.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.internal;\n+package org.openjdk.jmc.rjmx.common.internal;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/SyntheticAttributeMBeanEntry.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/SyntheticAttributeMBeanEntry.java","status":"renamed"},{"patch":"@@ -0,0 +1,201 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.internal;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import javax.management.Attribute;\n+import javax.management.AttributeList;\n+import javax.management.AttributeNotFoundException;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.InvalidAttributeValueException;\n+import javax.management.MBeanException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServer;\n+import javax.management.MBeanServerConnection;\n+import javax.management.MBeanServerFactory;\n+import javax.management.ObjectInstance;\n+import javax.management.ObjectName;\n+import javax.management.QueryExp;\n+import javax.management.ReflectionException;\n+\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.AttributeValueToolkit;\n+\n+\/**\n+ * Contains all the synthetic attributes.\n+ *\/\n+public final class SyntheticAttributeRepository {\n+\n+\tprivate final Map<ObjectName, SyntheticAttributeMBeanEntry> mbeans = new HashMap<>();\n+\tprivate final MBeanServer server = MBeanServerFactory.newMBeanServer();\n+\tprivate final MBeanServerConnection compoundServer;\n+\n+\tpublic SyntheticAttributeRepository(MBeanServerConnection compoundServer) {\n+\t\tthis.compoundServer = compoundServer;\n+\t}\n+\n+\tpublic void initializeFromExtensions(List<SyntheticAttributeEntry> attributeCandidates) {\n+\t\tboolean hasResolved = true;\n+\t\twhile (!attributeCandidates.isEmpty() && hasResolved) {\n+\t\t\thasResolved = false;\n+\t\t\tIterator<SyntheticAttributeEntry> iterator = attributeCandidates.iterator();\n+\t\t\twhile (iterator.hasNext()) {\n+\t\t\t\tSyntheticAttributeEntry candidate = iterator.next();\n+\t\t\t\tif (candidate.getAttribute().hasResolvedDependencies(compoundServer)) {\n+\t\t\t\t\thasResolved = true;\n+\t\t\t\t\titerator.remove();\n+\t\t\t\t\tcandidate.getAttribute().init(compoundServer);\n+\t\t\t\t\tregisterEntry(candidate);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate void registerEntry(SyntheticAttributeEntry attributeEntry) {\n+\t\tObjectName objectName = attributeEntry.getAttributeDescriptor().getObjectName();\n+\t\tSyntheticAttributeMBeanEntry entry = mbeans.get(objectName);\n+\t\tif (entry == null) {\n+\t\t\tentry = new SyntheticAttributeMBeanEntry(compoundServer);\n+\t\t\ttry {\n+\t\t\t\tserver.registerMBean(entry, objectName);\n+\t\t\t\tmbeans.put(objectName, entry);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.SEVERE,\n+\t\t\t\t\t\t\"Could not register MBean for synthetic attribute!\", e); \/\/$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t\tentry.addSyntheticAttribute(attributeEntry);\n+\t}\n+\n+\tpublic String[] getDomains() {\n+\t\treturn server.getDomains();\n+\t}\n+\n+\tpublic ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFoundException {\n+\t\treturn server.getObjectInstance(name);\n+\t}\n+\n+\tpublic Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query) {\n+\t\treturn server.queryMBeans(name, query);\n+\t}\n+\n+\tpublic Set<ObjectName> queryNames(ObjectName name, QueryExp query) {\n+\t\treturn server.queryNames(name, query);\n+\t}\n+\n+\tpublic boolean isRegistered(ObjectName name) {\n+\t\treturn server.isRegistered(name);\n+\t}\n+\n+\tpublic Integer getMBeanCount() {\n+\t\treturn server.getMBeanCount();\n+\t}\n+\n+\tpublic boolean hasAttribute(ObjectName name, String dataPath) {\n+\t\tSyntheticAttributeMBeanEntry entry = mbeans.get(name);\n+\t\tif (entry == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\treturn entry.hasDataPath(dataPath);\n+\t}\n+\n+\tpublic MBeanInfo getMBeanInfo(ObjectName name)\n+\t\t\tthrows IntrospectionException, InstanceNotFoundException, ReflectionException {\n+\t\treturn server.getMBeanInfo(name);\n+\t}\n+\n+\tpublic Object getAttribute(ObjectName name, String attribute) throws AttributeNotFoundException,\n+\t\t\tInstanceNotFoundException, MBeanException, ReflectionException, IOException {\n+\t\treturn AttributeValueToolkit.getAttribute(server, name, attribute);\n+\t}\n+\n+\tpublic AttributeList getExistingAttributes(ObjectName name, String[] attributes)\n+\t\t\tthrows InstanceNotFoundException, ReflectionException, IOException {\n+\t\tList<String> syntheticAttributes = new ArrayList<>();\n+\t\tfor (String attribute : attributes) {\n+\t\t\tif (hasAttribute(name, attribute)) {\n+\t\t\t\tsyntheticAttributes.add(attribute);\n+\t\t\t}\n+\t\t}\n+\t\tif (syntheticAttributes.size() > 0) {\n+\t\t\treturn AttributeValueToolkit.getAttributes(server, name, syntheticAttributes);\n+\t\t}\n+\t\treturn new AttributeList();\n+\t}\n+\n+\tpublic void setAttribute(ObjectName name, Attribute attribute)\n+\t\t\tthrows InstanceNotFoundException, InvalidAttributeValueException, AttributeNotFoundException,\n+\t\t\tReflectionException, MBeanException, IOException {\n+\t\tserver.setAttribute(name, attribute);\n+\t}\n+\n+\tpublic AttributeList setExistingAttributes(ObjectName name, AttributeList attributes)\n+\t\t\tthrows InstanceNotFoundException, ReflectionException, IOException {\n+\t\tAttributeList existingAttributes = new AttributeList();\n+\t\tfor (Object obj : attributes) {\n+\t\t\tAttribute attribute = (Attribute) obj;\n+\t\t\tif (hasAttribute(name, attribute.getName())) {\n+\t\t\t\texistingAttributes.add(attribute);\n+\t\t\t}\n+\t\t}\n+\t\tif (existingAttributes.size() > 0) {\n+\t\t\treturn server.setAttributes(name, existingAttributes);\n+\t\t}\n+\t\treturn new AttributeList();\n+\t}\n+\n+\tpublic boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException {\n+\t\treturn server.isInstanceOf(name, className);\n+\t}\n+\n+\tpublic void dispose() {\n+\t\tfor (SyntheticAttributeMBeanEntry mbeanEntry : mbeans.values()) {\n+\t\t\tfor (SyntheticAttributeEntry entry : mbeanEntry.getSyntheticAttributes()) {\n+\t\t\t\ttry {\n+\t\t\t\t\tentry.getAttribute().stop();\n+\t\t\t\t} catch (Throwable t) {\n+\t\t\t\t\t\/\/ silently ignore\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/SyntheticAttributeRepository.java","additions":201,"deletions":0,"binary":false,"changes":201,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.internal;\n+package org.openjdk.jmc.rjmx.common.internal;\n@@ -35,2 +35,2 @@\n-import org.openjdk.jmc.rjmx.ISyntheticNotification;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.ISyntheticNotification;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/SyntheticNotificationEntry.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/SyntheticNotificationEntry.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.internal;\n+package org.openjdk.jmc.rjmx.common.internal;\n@@ -49,1 +49,1 @@\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n@@ -68,1 +68,2 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.SEVERE, \"Could not setup synthetic notification MBean!\", e); \/\/$NON-NLS-1$\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.SEVERE, \"Could not setup synthetic notification MBean!\", \/\/$NON-NLS-1$\n+\t\t\t\t\te);\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/SyntheticNotificationMBean.java","additions":5,"deletions":4,"binary":false,"changes":9,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/internal\/SyntheticNotificationMBean.java","status":"renamed"},{"patch":"@@ -0,0 +1,206 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.internal;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.logging.Level;\n+\n+import javax.management.InstanceNotFoundException;\n+import javax.management.IntrospectionException;\n+import javax.management.ListenerNotFoundException;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanServer;\n+import javax.management.MBeanServerConnection;\n+import javax.management.MBeanServerFactory;\n+import javax.management.NotificationFilter;\n+import javax.management.NotificationListener;\n+import javax.management.ObjectInstance;\n+import javax.management.ObjectName;\n+import javax.management.QueryExp;\n+import javax.management.ReflectionException;\n+\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n+\n+public class SyntheticNotificationRepository {\n+\tprivate final Map<ObjectName, Set<SyntheticNotificationEntry>> mbeans = new HashMap<>();\n+\tprivate final MBeanServer server = MBeanServerFactory.newMBeanServer();\n+\tprivate final MBeanServerConnection compoundServer;\n+\n+\tpublic SyntheticNotificationRepository(MBeanServerConnection compoundServer) {\n+\t\tthis.compoundServer = compoundServer;\n+\t}\n+\n+\tpublic String[] getDomains() {\n+\t\treturn server.getDomains();\n+\t}\n+\n+\tpublic ObjectInstance getObjectInstance(ObjectName name) throws InstanceNotFoundException {\n+\t\treturn server.getObjectInstance(name);\n+\t}\n+\n+\tpublic Set<ObjectInstance> queryMBeans(ObjectName name, QueryExp query) {\n+\t\treturn server.queryMBeans(name, query);\n+\t}\n+\n+\tpublic Set<ObjectName> queryNames(ObjectName name, QueryExp query) {\n+\t\treturn server.queryNames(name, query);\n+\t}\n+\n+\tpublic boolean isRegistered(ObjectName name) {\n+\t\treturn server.isRegistered(name);\n+\t}\n+\n+\tpublic Integer getMBeanCount() {\n+\t\treturn server.getMBeanCount();\n+\t}\n+\n+\tpublic boolean hasNotification(ObjectName name) {\n+\t\tSet<SyntheticNotificationEntry> entries = mbeans.get(name);\n+\t\treturn entries != null;\n+\t}\n+\n+\tpublic MBeanInfo getMBeanInfo(ObjectName name)\n+\t\t\tthrows IntrospectionException, InstanceNotFoundException, ReflectionException {\n+\t\treturn server.getMBeanInfo(name);\n+\t}\n+\n+\tpublic void addNotificationListener(\n+\t\tObjectName name, ObjectName listener, NotificationFilter filter, Object handback)\n+\t\t\tthrows InstanceNotFoundException, IOException {\n+\t\tserver.addNotificationListener(name, listener, filter, handback);\n+\t}\n+\n+\tpublic void addNotificationListener(\n+\t\tObjectName name, NotificationListener listener, NotificationFilter filter, Object handback)\n+\t\t\tthrows InstanceNotFoundException {\n+\t\tserver.addNotificationListener(name, listener, filter, handback);\n+\t}\n+\n+\tpublic void removeNotificationListener(ObjectName name, ObjectName listener)\n+\t\t\tthrows InstanceNotFoundException, ListenerNotFoundException {\n+\t\tserver.removeNotificationListener(name, listener);\n+\t}\n+\n+\tpublic void removeNotificationListener(\n+\t\tObjectName name, ObjectName listener, NotificationFilter filter, Object handback)\n+\t\t\tthrows InstanceNotFoundException, ListenerNotFoundException {\n+\t\tserver.removeNotificationListener(name, listener, filter, handback);\n+\t}\n+\n+\tpublic void removeNotificationListener(ObjectName name, NotificationListener listener)\n+\t\t\tthrows InstanceNotFoundException, ListenerNotFoundException {\n+\t\tserver.removeNotificationListener(name, listener);\n+\t}\n+\n+\tpublic void removeNotificationListener(\n+\t\tObjectName name, NotificationListener listener, NotificationFilter filter, Object handback)\n+\t\t\tthrows InstanceNotFoundException, ListenerNotFoundException {\n+\t\tserver.removeNotificationListener(name, listener, filter, handback);\n+\t}\n+\n+\tpublic void initializeFromExtensions(List<SyntheticNotificationEntry> notificationCandidates) {\n+\t\tboolean hasResolved = true;\n+\t\twhile (!notificationCandidates.isEmpty() && hasResolved) {\n+\t\t\thasResolved = false;\n+\t\t\tIterator<SyntheticNotificationEntry> iterator = notificationCandidates.iterator();\n+\t\t\twhile (iterator.hasNext()) {\n+\t\t\t\tSyntheticNotificationEntry candidate = iterator.next();\n+\t\t\t\tif (candidate.getNotification().hasResolvedDependencies(compoundServer)) {\n+\t\t\t\t\thasResolved = true;\n+\t\t\t\t\titerator.remove();\n+\t\t\t\t\tregisterEntry(candidate);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t\tregisterMBeans();\n+\t}\n+\n+\tprivate void registerMBeans() {\n+\t\tfor (Entry<ObjectName, Set<SyntheticNotificationEntry>> notificationEntry : mbeans.entrySet()) {\n+\t\t\tObjectName objectName = notificationEntry.getKey();\n+\t\t\ttry {\n+\t\t\t\tSyntheticNotificationMBean mbean = createMBean(objectName);\n+\t\t\t\tfor (SyntheticNotificationEntry entry : notificationEntry.getValue()) {\n+\t\t\t\t\tentry.getNotification().init(mbean);\n+\t\t\t\t\tentry.getNotification().init(compoundServer, entry.getNotificationDescriptor().getDataPath(),\n+\t\t\t\t\t\t\tentry.getMessage());\n+\t\t\t\t}\n+\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.SEVERE,\n+\t\t\t\t\t\t\"Failed to register synthetic notification mbean \" + objectName.toString(), e); \/\/$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate SyntheticNotificationMBean createMBean(ObjectName name) throws Exception {\n+\t\tSet<SyntheticNotificationEntry> entries = mbeans.get(name);\n+\t\tSyntheticNotificationMBean mbean = new SyntheticNotificationMBean(\n+\t\t\t\tentries.toArray(new SyntheticNotificationEntry[entries.size()]));\n+\t\tserver.registerMBean(mbean, name);\n+\t\treturn mbean;\n+\t}\n+\n+\tprivate void registerEntry(SyntheticNotificationEntry entry) {\n+\t\tSet<SyntheticNotificationEntry> notificationEntries = mbeans\n+\t\t\t\t.get(entry.getNotificationDescriptor().getObjectName());\n+\t\tif (notificationEntries == null) {\n+\t\t\tnotificationEntries = new HashSet<>();\n+\t\t\tmbeans.put(entry.getNotificationDescriptor().getObjectName(), notificationEntries);\n+\t\t}\n+\t\tnotificationEntries.add(entry);\n+\t}\n+\n+\tpublic boolean isInstanceOf(ObjectName name, String className) throws InstanceNotFoundException {\n+\t\treturn server.isInstanceOf(name, className);\n+\t}\n+\n+\tpublic void dispose() {\n+\t\tfor (Set<SyntheticNotificationEntry> notificationEntrySet : mbeans.values()) {\n+\t\t\tfor (SyntheticNotificationEntry entry : notificationEntrySet) {\n+\t\t\t\ttry {\n+\t\t\t\t\tentry.getNotification().stop();\n+\t\t\t\t} catch (Throwable t) {\n+\t\t\t\t\t\/\/ silently ignore\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/SyntheticNotificationRepository.java","additions":206,"deletions":0,"binary":false,"changes":206,"status":"added"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.internal;\n+\n+import java.io.IOException;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.net.MalformedURLException;\n+import java.net.UnknownHostException;\n+import java.security.GeneralSecurityException;\n+\n+import javax.management.remote.JMXServiceURL;\n+import javax.naming.NameNotFoundException;\n+import javax.naming.NoInitialContextException;\n+\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.messages.internal.Messages;\n+\n+public class WrappedConnectionException extends ConnectionException {\n+\n+\tprivate final JMXServiceURL url;\n+\tprivate final String serverName;\n+\n+\tpublic WrappedConnectionException(String serverName, JMXServiceURL url, Exception cause) {\n+\t\tsuper(cause.getMessage());\n+\t\tinitCause(cause); \/\/ yes, still 1.4 compatible\n+\t\tthis.url = url;\n+\t\tthis.serverName = serverName;\n+\n+\t}\n+\n+\t@Override\n+\tpublic String getLocalizedMessage() {\n+\t\tThrowable cause = getCause();\n+\t\tThrowable rootCause = cause;\n+\t\twhile (rootCause.getCause() != null) {\n+\t\t\trootCause = rootCause.getCause();\n+\t\t}\n+\n+\t\tString hostName = url != null ? ConnectionToolkit.getHostName(url)\n+\t\t\t\t: Messages.getString(Messages.ConnectionException_UNRESOLVED);\n+\t\tString protocol = url != null ? url.getProtocol() : Messages.getString(Messages.ConnectionException_UNRESOLVED);\n+\n+\t\tif (rootCause instanceof UnknownHostException) {\n+\t\t\treturn String.format(Messages.getString(Messages.ConnectionException_COULD_NOT_DETERMINE_IP_MSG), hostName);\n+\t\t}\n+\t\tif (rootCause instanceof NameNotFoundException) {\n+\t\t\treturn String.format(Messages.getString(Messages.ConnectionException_NAME_NOT_FOUND_MSG), serverName, url);\n+\t\t}\n+\t\tif (rootCause instanceof MalformedURLException) {\n+\t\t\treturn String.format(Messages.getString(Messages.ConnectionException_MALFORMED_URL_MSG), serverName, url);\n+\t\t}\n+\t\tif (rootCause instanceof NoInitialContextException) {\n+\t\t\treturn String.format(Messages.getString(Messages.ConnectionException_UNABLE_TO_CREATE_INITIAL_CONTEXT),\n+\t\t\t\t\tserverName, url);\n+\t\t}\n+\t\tif (protocol.equals(\"msarmi\")) { \/\/$NON-NLS-1$\n+\t\t\treturn String.format(Messages.getString(Messages.ConnectionException_MSARMI_CHECK_PASSWORD), serverName,\n+\t\t\t\t\turl);\n+\t\t}\n+\t\tif (rootCause instanceof SecurityException || rootCause instanceof GeneralSecurityException) {\n+\t\t\treturn String.format(Messages.getString(Messages.ConnectionException_UNABLE_TO_RESOLVE_CREDENTIALS),\n+\t\t\t\t\tserverName, rootCause.getLocalizedMessage());\n+\t\t}\n+\t\tif (\"com.sun.tools.attach.AttachNotSupportedException\".equals(rootCause \/\/$NON-NLS-1$\n+\t\t\t\t.getClass().getName())) {\n+\t\t\treturn String.format(Messages.getString(Messages.ConnectionException_ATTACH_NOT_SUPPORTED), serverName,\n+\t\t\t\t\trootCause.getLocalizedMessage());\n+\t\t}\n+\t\treturn String.format(Messages.getString(Messages.ConnectionException_COULD_NOT_CONNECT_MSG), serverName, url);\n+\t}\n+\n+\t@Override\n+\tpublic String toString() {\n+\t\treturn ConnectionException.class.getName() + \" caused by \" + getCause().toString(); \/\/$NON-NLS-1$\n+\t}\n+\n+\tprivate void writeObject(ObjectOutputStream oos) throws IOException {\n+\t\tthrow new IOException(\"You should not serialize instances of \" + getClass().getName()); \/\/$NON-NLS-1$\n+\t}\n+\n+\tprivate void readObject(ObjectInputStream ois) throws IOException {\n+\t\tthrow new IOException(\"You should not serialize instances of \" + getClass().getName()); \/\/$NON-NLS-1$\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/internal\/WrappedConnectionException.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2018, 2023 Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.messages.internal;\n+\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n+\n+public class Messages {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.rjmx.common.messages.internal.messages\"; \/\/$NON-NLS-1$\n+\n+\tprivate static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME);\n+\n+\tpublic static final String ConnectionException_ATTACH_NOT_SUPPORTED = \"ConnectionException_ATTACH_NOT_SUPPORTED\"; \/\/$NON-NLS-1$\n+\tpublic static final String ConnectionException_COULD_NOT_CONNECT_MSG = \"ConnectionException_COULD_NOT_CONNECT_MSG\"; \/\/$NON-NLS-1$\n+\tpublic static final String ConnectionException_COULD_NOT_DETERMINE_IP_MSG = \"ConnectionException_COULD_NOT_DETERMINE_IP_MSG\"; \/\/$NON-NLS-1$\n+\tpublic static final String ConnectionException_MALFORMED_URL_MSG = \"ConnectionException_MALFORMED_URL_MSG\"; \/\/$NON-NLS-1$\n+\tpublic static final String ConnectionException_MSARMI_CHECK_PASSWORD = \"ConnectionException_MSARMI_CHECK_PASSWORD\"; \/\/$NON-NLS-1$\n+\tpublic static final String ConnectionException_NAME_NOT_FOUND_MSG = \"ConnectionException_NAME_NOT_FOUND_MSG\"; \/\/$NON-NLS-1$\n+\tpublic static final String ConnectionException_UNABLE_TO_CREATE_INITIAL_CONTEXT = \"ConnectionException_UNABLE_TO_CREATE_INITIAL_CONTEXT\"; \/\/$NON-NLS-1$\n+\tpublic static final String ConnectionException_UNABLE_TO_RESOLVE_CREDENTIALS = \"ConnectionException_UNABLE_TO_RESOLVE_CREDENTIALS\"; \/\/$NON-NLS-1$\n+\tpublic static final String ConnectionException_UNRESOLVED = \"ConnectionException_UNRESOLVED\"; \/\/$NON-NLS-1$\n+\tpublic static final String LABEL_NOT_AVAILABLE = \"LABEL_NOT_AVAILABLE\"; \/\/$NON-NLS-1$\n+\tpublic static final String MBeanOperationsWrapper_DESCRIPTOR = \"MBeanOperationsWrapper_DESCRIPTOR\"; \/\/$NON-NLS-1$\n+\n+\tprivate Messages() {\n+\t}\n+\n+\tpublic static String getString(String key) {\n+\t\ttry {\n+\t\t\treturn RESOURCE_BUNDLE.getString(key);\n+\t\t} catch (MissingResourceException e) {\n+\t\t\treturn '!' + key + '!';\n+\t\t}\n+\t}\n+\n+\tpublic static String getString(String key, String def) {\n+\t\ttry {\n+\t\t\treturn RESOURCE_BUNDLE.getString(key);\n+\t\t} catch (MissingResourceException e) {\n+\t\t\treturn def;\n+\t\t}\n+\t}\n+\n+\tpublic static boolean hasString(String key) {\n+\t\treturn RESOURCE_BUNDLE.containsKey(key);\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/messages\/internal\/Messages.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.preferences;\n+package org.openjdk.jmc.rjmx.common.preferences;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/preferences\/JMXRMIPreferences.java","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/preferences\/JMXRMIPreferences.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.servermodel;\n+package org.openjdk.jmc.rjmx.common.servermodel;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/servermodel\/IDiscoveryInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/servermodel\/IDiscoveryInfo.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-package org.openjdk.jmc.rjmx.servermodel;\n+package org.openjdk.jmc.rjmx.common.servermodel;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/servermodel\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/servermodel\/package-info.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services;\n+package org.openjdk.jmc.rjmx.common.services;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/IAttributeInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/IAttributeInfo.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services;\n+package org.openjdk.jmc.rjmx.common.services;\n@@ -37,1 +37,1 @@\n-import org.openjdk.jmc.ui.common.util.IObservable;\n+import org.openjdk.jmc.common.util.IObservable;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/IAttributeStorage.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/IAttributeStorage.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services;\n+package org.openjdk.jmc.rjmx.common.services;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/ICommercialFeaturesService.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/ICommercialFeaturesService.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services;\n+package org.openjdk.jmc.rjmx.common.services;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/IDiagnosticCommandService.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/IDiagnosticCommandService.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services;\n+package org.openjdk.jmc.rjmx.common.services;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/IDummyService.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/IDummyService.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services;\n+package org.openjdk.jmc.rjmx.common.services;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/IOperation.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/IOperation.java","status":"renamed"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services;\n+\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+\n+public interface IServiceFactory<T> {\n+\t\/**\n+\t * Create an instance of the service as based on {@code handle}. Normally, a service should only\n+\t * be returned if it is likely that this factory provides the best service for the given\n+\t * {@code handle}. Otherwise, null shall be returned. However, there might currently be\n+\t * circumstances where dummy services could be returned. In this case, they must also implement\n+\t * the marker interface {@link IDummyService}, so that they can be skipped when looking for\n+\t * proper services.\n+\t *\n+\t * @param handle\n+\t * @return a proper service, a dummy service, or null.\n+\t * @throws ConnectionException\n+\t * @throws ServiceNotAvailableException\n+\t *\/\n+\tT getServiceInstance(IConnectionHandle handle) throws ConnectionException, ServiceNotAvailableException;\n+\n+\tClass<T> getServiceType();\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/IServiceFactory.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services;\n+package org.openjdk.jmc.rjmx.common.services;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/IllegalOperandException.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/IllegalOperandException.java","status":"renamed"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services;\n+package org.openjdk.jmc.rjmx.common.services;\n@@ -37,1 +37,1 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/MRIDataSeries.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/MRIDataSeries.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.internal;\n+package org.openjdk.jmc.rjmx.common.services.internal;\n@@ -37,2 +37,2 @@\n-import org.openjdk.jmc.rjmx.services.IAttributeInfo;\n-import org.openjdk.jmc.rjmx.services.IOperation;\n+import org.openjdk.jmc.rjmx.common.services.IAttributeInfo;\n+import org.openjdk.jmc.rjmx.common.services.IOperation;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/internal\/AbstractOperation.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/AbstractOperation.java","status":"renamed"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services.internal;\n+\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.IServiceFactory;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.storage.internal.DefaultAttributeStorageService;\n+\n+public class AttributeStorageServiceFactory implements IServiceFactory<IAttributeStorageService> {\n+\n+\t@Override\n+\tpublic IAttributeStorageService getServiceInstance(IConnectionHandle handle)\n+\t\t\tthrows ConnectionException, ServiceNotAvailableException {\n+\t\treturn new DefaultAttributeStorageService(handle.getServiceOrThrow(ISubscriptionService.class));\n+\t}\n+\n+\t@Override\n+\tpublic Class<IAttributeStorageService> getServiceType() {\n+\t\treturn IAttributeStorageService.class;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/internal\/AttributeStorageServiceFactory.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services.internal;\n+\n+import org.openjdk.jmc.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.common.version.JavaVersion;\n+import org.openjdk.jmc.common.version.JavaVersionSupport;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.ICommercialFeaturesService;\n+import org.openjdk.jmc.rjmx.common.services.IServiceFactory;\n+\n+public class CommercialFeaturesServiceFactory implements IServiceFactory<ICommercialFeaturesService> {\n+\n+\t@Override\n+\tpublic ICommercialFeaturesService getServiceInstance(IConnectionHandle handle)\n+\t\t\tthrows ConnectionException, ServiceNotAvailableException {\n+\t\t\/\/ Optimization - using already available information instead of doing more round trips.\n+\t\t\/\/ It's always a bit precarious to look at version instead of capability, but in this case\n+\t\t\/\/ it should be safe - the commercial features flag is not coming back\n+\t\tJVMDescriptor descriptor = handle.getServerDescriptor().getJvmInfo();\n+\t\tif (descriptor != null) {\n+\t\t\tJavaVersion version = new JavaVersion(descriptor.getJavaVersion());\n+\t\t\tif (version.getMajorVersion() >= 11) {\n+\t\t\t\treturn new NoCommercialFeaturesService();\n+\t\t\t}\n+\t\t} else if (handle.isConnected() && ConnectionToolkit.isOracle(handle)) {\n+\t\t\tif (ConnectionToolkit.isJavaVersionAboveOrEqual(handle, JavaVersionSupport.JDK_11)) {\n+\t\t\t\treturn new NoCommercialFeaturesService();\n+\t\t\t}\n+\t\t}\n+\n+\t\t\/\/ Funnily enough, OpenJDK built JVMs for unknown reasons also have the unlock commercial features flag,\n+\t\t\/\/ so we'll just check if Oracle is the JVM vendor. Any other vendor will not have JFR protected by commercial flags.\n+\t\tif (ConnectionToolkit.isOracle(handle)) {\n+\t\t\treturn new HotSpot23CommercialFeaturesService(handle);\n+\t\t}\n+\t\treturn new NoCommercialFeaturesService();\n+\t}\n+\n+\t@Override\n+\tpublic Class<ICommercialFeaturesService> getServiceType() {\n+\t\treturn ICommercialFeaturesService.class;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/internal\/CommercialFeaturesServiceFactory.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services.internal;\n+\n+import javax.management.MBeanServerConnection;\n+\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.IDiagnosticCommandService;\n+import org.openjdk.jmc.rjmx.common.services.IServiceFactory;\n+\n+public class DiagnosticCommandServiceFactory implements IServiceFactory<IDiagnosticCommandService> {\n+\n+\t@Override\n+\tpublic IDiagnosticCommandService getServiceInstance(IConnectionHandle handle)\n+\t\t\tthrows ServiceNotAvailableException, ConnectionException {\n+\t\treturn new HotSpot24DiagnosticCommandService(handle.getServiceOrThrow(MBeanServerConnection.class));\n+\t}\n+\n+\t@Override\n+\tpublic Class<IDiagnosticCommandService> getServiceType() {\n+\t\treturn IDiagnosticCommandService.class;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/internal\/DiagnosticCommandServiceFactory.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services.internal;\n+\n+import javax.management.MBeanServerConnection;\n+\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.ICommercialFeaturesService;\n+import org.openjdk.jmc.rjmx.common.services.jfr.internal.HotspotManagementToolkit;\n+import org.openjdk.jmc.rjmx.common.services.IDiagnosticCommandService;\n+import javax.management.ObjectName;\n+\n+public class HotSpot23CommercialFeaturesService implements ICommercialFeaturesService {\n+\tprivate final static String UNLOCK_COMMERCIAL_FEATURES_FLAG = \"UnlockCommercialFeatures\"; \/\/$NON-NLS-1$\n+\tprivate final static String UNLOCK_COMMAND = \"VM.unlock_commercial_features\"; \/\/$NON-NLS-1$\n+\tprivate final MBeanServerConnection server;\n+\tprivate final IDiagnosticCommandService dcs;\n+\tprivate final static String JDK_MANAGEMENT_JFR_MBEAN_NAME = \"jdk.management.jfr:type=FlightRecorder\"; \/\/$NON-NLS-1$\n+\n+\tpublic HotSpot23CommercialFeaturesService(IConnectionHandle handle)\n+\t\t\tthrows ConnectionException, ServiceNotAvailableException {\n+\t\tserver = handle.getServiceOrThrow(MBeanServerConnection.class);\n+\t\tdcs = handle.getServiceOrNull(IDiagnosticCommandService.class);\n+\t\ttry {\n+\t\t\tHotspotManagementToolkit.getVMOption(server, UNLOCK_COMMERCIAL_FEATURES_FLAG); \/\/ Will fail if option is not available\n+\t\t} catch (Exception e) {\n+\t\t\t\/\/ Commercial Feature option is not available but Flight Recorder is.\n+\t\t\tif (!isJfrMBeanAvailable()) {\n+\t\t\t\tthrow new ServiceNotAvailableException(\"\"); \/\/$NON-NLS-1$\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean isCommercialFeaturesEnabled() {\n+\t\ttry {\n+\t\t\treturn ((String) HotspotManagementToolkit.getVMOption(server, UNLOCK_COMMERCIAL_FEATURES_FLAG))\n+\t\t\t\t\t.contains(\"true\"); \/\/$NON-NLS-1$\n+\t\t} catch (Exception e) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void enableCommercialFeatures() throws Exception {\n+\t\tif (dcs != null) {\n+\t\t\tdcs.runCtrlBreakHandlerWithResult(UNLOCK_COMMAND);\n+\t\t}\n+\t\tif (!isCommercialFeaturesEnabled()) {\n+\t\t\tHotspotManagementToolkit.setVMOption(server, UNLOCK_COMMERCIAL_FEATURES_FLAG, \"true\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t}\n+\n+\tprivate boolean isJfrMBeanAvailable() {\n+\t\ttry {\n+\t\t\tgetJfrMBeanObjectName();\n+\t\t\treturn true;\n+\t\t} catch (Exception e) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\tprivate ObjectName getJfrMBeanObjectName() throws Exception {\n+\t\tObjectName candidateObjectName = ConnectionToolkit.createObjectName(JDK_MANAGEMENT_JFR_MBEAN_NAME);\n+\t\tserver.getMBeanInfo(candidateObjectName);\n+\t\treturn candidateObjectName;\n+\t}\n+\n+\t@Override\n+\tpublic boolean hasCommercialFeatures() {\n+\t\treturn true;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/internal\/HotSpot23CommercialFeaturesService.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.internal;\n+package org.openjdk.jmc.rjmx.common.services.internal;\n@@ -53,7 +53,7 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.IDiagnosticCommandService;\n-import org.openjdk.jmc.rjmx.services.IOperation.OperationImpact;\n-import org.openjdk.jmc.rjmx.services.IllegalOperandException;\n-import org.openjdk.jmc.rjmx.util.internal.SimpleAttributeInfo;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.IllegalOperandException;\n+import org.openjdk.jmc.rjmx.common.services.IOperation.OperationImpact;\n+import org.openjdk.jmc.rjmx.common.services.IDiagnosticCommandService;\n+import org.openjdk.jmc.rjmx.common.util.internal.SimpleAttributeInfo;\n@@ -62,1 +62,0 @@\n-\n@@ -189,1 +188,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger()\n+\t\t\tRJMXCorePlugin.getDefault().getLogger()\n@@ -202,1 +201,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger()\n+\t\t\tRJMXCorePlugin.getDefault().getLogger()\n@@ -259,1 +258,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger()\n+\t\t\tRJMXCorePlugin.getDefault().getLogger()\n@@ -290,1 +289,1 @@\n-\t\tRJMXPlugin.getDefault().getLogger().finer(\"Refreshing diagnostic operations\"); \/\/$NON-NLS-1$\n+\t\tRJMXCorePlugin.getDefault().getLogger().finer(\"Refreshing diagnostic operations\"); \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/internal\/HotSpot24DiagnosticCommandService.java","additions":13,"deletions":14,"binary":false,"changes":27,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/HotSpot24DiagnosticCommandService.java","status":"renamed"},{"patch":"@@ -0,0 +1,44 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services.internal;\n+\n+import org.openjdk.jmc.rjmx.common.services.IAttributeStorage;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+\n+public interface IAttributeStorageService {\n+\n+\tIAttributeStorage getAttributeStorage(MRI attributeDescriptor);\n+\n+\tint getRetainedLength(MRI attributeDescriptor);\n+\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/internal\/IAttributeStorageService.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.internal;\n+package org.openjdk.jmc.rjmx.common.services.internal;\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.services.ICommercialFeaturesService;\n+import org.openjdk.jmc.rjmx.common.services.ICommercialFeaturesService;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/internal\/NoCommercialFeaturesService.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/NoCommercialFeaturesService.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.internal;\n+package org.openjdk.jmc.rjmx.common.services.internal;\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.services.IServiceFactory;\n+import org.openjdk.jmc.rjmx.common.services.IServiceFactory;\n@@ -37,1 +37,1 @@\n-class ServiceEntry<T> {\n+public class ServiceEntry<T> {\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/internal\/ServiceEntry.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/ServiceEntry.java","status":"renamed"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services.internal;\n+\n+import java.lang.reflect.InvocationHandler;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n+import org.openjdk.jmc.rjmx.common.services.IDummyService;\n+\n+\/**\n+ * Manager for service factories.\n+ *\/\n+@SuppressWarnings(\"nls\")\n+public class ServiceFactoryManager {\n+\tprivate final static Map<Class<?>, Collection<? extends ServiceEntry<?>>> factoryMap = new HashMap<>();\n+\n+\tprivate static class UnsupportedInvocationHandler implements InvocationHandler {\n+\t\tprivate final Throwable cause;\n+\n+\t\tpublic UnsupportedInvocationHandler(Throwable cause) {\n+\t\t\tthis.cause = cause;\n+\t\t}\n+\n+\t\t@Override\n+\t\tpublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable {\n+\t\t\tString msg;\n+\t\t\tif ((cause != null) && (cause.getMessage() != null)) {\n+\t\t\t\tmsg = cause.getMessage();\n+\t\t\t} else {\n+\t\t\t\tmsg = \"Does not support method \" + method.getName();\n+\t\t\t}\n+\t\t\tthrow new UnsupportedOperationException(msg, cause);\n+\t\t}\n+\t}\n+\n+\tpublic ServiceFactoryManager() {\n+\t}\n+\n+\tprivate Logger getLogger() {\n+\t\treturn RJMXCorePlugin.getDefault().getLogger();\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tpublic static <T> T createDummyService(Class<T> serviceInterface, Throwable cause) {\n+\t\tClass<?>[] interfaces = new Class[] {serviceInterface, IDummyService.class};\n+\t\tClassLoader cl = serviceInterface.getClassLoader();\n+\t\treturn (T) Proxy.newProxyInstance(cl == null ? IDummyService.class.getClassLoader() : cl, interfaces,\n+\t\t\t\tnew UnsupportedInvocationHandler(cause));\n+\t}\n+\n+\t\/**\n+\t * Create a service instance of {@code serviceClass}. Normally only proper services or null will\n+\t * be returned, but there are two exceptional cases in which dummy services will be returned:\n+\t * <ul>\n+\t * <li>If no proper service could be created, but some service factory provided a dummy service,\n+\t * this will be returned.<\/li>\n+\t * <li>If neither a proper nor a dummy service was provided, but some service factory threw an\n+\t * exception (and {@code serviceClass} denotes an interface), a dummy service will be\n+\t * constructed. This dummy service will use the thrown exception as the cause of the\n+\t * {@link UnsupportedOperationException}s that its methods will throw.\n+\t * <\/ul>\n+\t *\n+\t * @param serviceClass\n+\t * @param handle\n+\t * @return A service instance of {@code serviceClass}, or a dummy service.\n+\t *\/\n+\tpublic <T> T createService(Class<T> serviceClass, IConnectionHandle handle) {\n+\t\tT firstDummyService = null;\n+\t\tException firstException = null;\n+\n+\t\tfor (ServiceEntry<T> entry : getFactoriesFor(serviceClass)) {\n+\t\t\ttry {\n+\t\t\t\tT service = entry.getServiceFactory().getServiceInstance(handle);\n+\t\t\t\tif (service != null) {\n+\t\t\t\t\tif (!isDummy(service)) {\n+\t\t\t\t\t\treturn service;\n+\t\t\t\t\t}\n+\t\t\t\t\tif (firstDummyService == null) {\n+\t\t\t\t\t\tfirstDummyService = service;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t} catch (Exception e) {\n+\t\t\t\tif (firstException == null) {\n+\t\t\t\t\tfirstException = e;\n+\t\t\t\t}\n+\t\t\t\tgetLogger().log(Level.FINE, \"Could not create service!\", e);\n+\t\t\t}\n+\t\t}\n+\n+\t\tif ((firstDummyService == null) && (firstException != null) && serviceClass.isInterface()) {\n+\t\t\ttry {\n+\t\t\t\tfirstDummyService = createDummyService(serviceClass, firstException);\n+\t\t\t} catch (Exception e) {\n+\t\t\t\t\/\/ Just log and ignore.\n+\t\t\t\tgetLogger().log(Level.FINE, \"Could not create dummy service to wrap exception!\", e);\n+\t\t\t}\n+\t\t}\n+\n+\t\treturn firstDummyService;\n+\t}\n+\n+\tpublic static boolean isDummy(Object service) {\n+\t\treturn service instanceof IDummyService;\n+\t}\n+\n+\t@SuppressWarnings(\"unchecked\")\n+\tprivate <T> Collection<ServiceEntry<T>> getFactoriesFor(Class<T> clazz) {\n+\t\tCollection<ServiceEntry<T>> factories = (Collection<ServiceEntry<T>>) factoryMap.get(clazz);\n+\t\tif (factories == null) {\n+\t\t\tfactories = Collections.emptyList();\n+\t\t}\n+\t\treturn factories;\n+\t}\n+\n+\t\/\/ FIXME: Suggested improvement to service factories. Might not give enough benefits to be worth the effort.\n+\/\/\tpublic <T> boolean hasService(Class<T> serviceClass, IConnectionHandle handle) {\n+\/\/\t\tfor (ServiceEntry<T> entry : getFactoriesFor(serviceClass)) {\n+\/\/\t\t\tif (entry.getServiceFactory().canCreateService(serviceClass, handle)) {\n+\/\/\t\t\t\treturn true;\n+\/\/\t\t\t}\n+\/\/\t\t}\n+\/\/\t\treturn false;\n+\/\/\t}\n+\n+\tpublic void initializeFromExtensions(List<ServiceEntry<?>> serviceEntries) {\n+\t\tfor (ServiceEntry<?> service : serviceEntries) {\n+\t\t\tregisterService(service);\n+\t\t}\n+\t}\n+\n+\tprivate <T> void registerService(ServiceEntry<T> entry) {\n+\t\tClass<T> serviceClass = entry.getServiceClass();\n+\t\tCollection<ServiceEntry<T>> factories;\n+\t\t\/\/ HINT: A little convoluted to avoid suppressing \"unchecked\" warnings here.\n+\t\tif (factoryMap.containsKey(serviceClass)) {\n+\t\t\tfactories = getFactoriesFor(entry.getServiceClass());\n+\t\t} else {\n+\t\t\tfactories = new ArrayList<>();\n+\t\t\tfactoryMap.put(entry.getServiceClass(), factories);\n+\t\t}\n+\t\tfactories.add(entry);\n+\t}\n+\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/internal\/ServiceFactoryManager.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services.internal;\n+\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.IServiceFactory;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.DefaultAttributeSubscriptionService;\n+\n+public class SubscriptionServiceFactory implements IServiceFactory<ISubscriptionService> {\n+\n+\t@Override\n+\tpublic ISubscriptionService getServiceInstance(IConnectionHandle handle)\n+\t\t\tthrows ConnectionException, ServiceNotAvailableException {\n+\t\treturn new DefaultAttributeSubscriptionService(handle);\n+\t}\n+\n+\t@Override\n+\tpublic Class<ISubscriptionService> getServiceType() {\n+\t\treturn ISubscriptionService.class;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/internal\/SubscriptionServiceFactory.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr;\n+package org.openjdk.jmc.rjmx.common.services.jfr;\n@@ -41,1 +41,3 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor.RecordingState;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor.RecordingState;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/FlightRecorderToolkit.java","additions":5,"deletions":3,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/FlightRecorderToolkit.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -49,0 +49,1 @@\n+import java.util.logging.Logger;\n@@ -62,1 +63,0 @@\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n@@ -68,0 +68,1 @@\n+\tprivate static final Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.rjmx.common.services.jfr\");\n@@ -160,1 +161,1 @@\n-\t\t\t\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, e.getMessage(), e);\n+\t\t\t\t\t\t\tLOGGER.log(Level.WARNING, e.getMessage(), e);\n@@ -194,2 +195,1 @@\n-\t\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Problem with value for option \" + optionID,\n-\t\t\t\t\t\t\te);\n+\t\t\t\t\tLOGGER.log(Level.WARNING, \"Problem with value for option \" + optionID, e);\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/EventOptionsToolkitV1.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/EventOptionsToolkitV1.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -40,0 +40,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeInfo;\n@@ -41,1 +42,0 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IEventTypeInfo;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/EventTypeMetadataV1.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/EventTypeMetadataV1.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -46,0 +46,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeInfo;\n@@ -48,2 +49,1 @@\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.services.jfr.IEventTypeInfo;\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n@@ -112,1 +112,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, e.getMessage(), e);\n+\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, e.getMessage(), e);\n@@ -114,1 +114,1 @@\n-\t\t\tT strDef = (T) Messages.EventTypeMetadataV2_BAD_DEFAULT_VALUE;\n+\t\t\tT strDef = (T) Messages.getString(Messages.EventTypeMetadataV2_BAD_DEFAULT_VALUE);\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/EventTypeMetadataV2.java","additions":6,"deletions":6,"binary":false,"changes":12,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/EventTypeMetadataV2.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/ExcludingEventOptionMapper.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/ExcludingEventOptionMapper.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -42,4 +42,3 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.services.internal.HotspotManagementToolkit;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/FlightRecorderCommunicationHelperV1.java","additions":5,"deletions":6,"binary":false,"changes":11,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/FlightRecorderCommunicationHelperV1.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -42,5 +42,5 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/FlightRecorderCommunicationHelperV2.java","additions":7,"deletions":7,"binary":false,"changes":14,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/FlightRecorderCommunicationHelperV2.java","status":"renamed"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.IServiceFactory;\n+\n+public class FlightRecorderServiceFactory implements IServiceFactory<IFlightRecorderService> {\n+\n+\t@Override\n+\tpublic IFlightRecorderService getServiceInstance(IConnectionHandle handle)\n+\t\t\tthrows ConnectionException, ServiceNotAvailableException {\n+\t\tif (FlightRecorderServiceV2.isAvailable(handle)) {\n+\t\t\treturn new FlightRecorderServiceV2(handle);\n+\t\t}\n+\t\treturn new FlightRecorderServiceV1(handle);\n+\t}\n+\n+\t@Override\n+\tpublic Class<IFlightRecorderService> getServiceType() {\n+\t\treturn IFlightRecorderService.class;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/FlightRecorderServiceFactory.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -67,0 +67,3 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -70,0 +73,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.events.IEventTypeInfo;\n@@ -76,13 +80,7 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.JVMSupportToolkit;\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.ICommercialFeaturesService;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderToolkit;\n-import org.openjdk.jmc.rjmx.services.jfr.IEventTypeInfo;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.ICommercialFeaturesService;\n+import org.openjdk.jmc.rjmx.common.services.jfr.FlightRecorderToolkit;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n@@ -91,1 +89,1 @@\n-\tfinal static Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.rjmx.services.jfr\"); \/\/$NON-NLS-1$\n+\tfinal static Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.rjmx.common.services.jfr\"); \/\/$NON-NLS-1$\n@@ -126,1 +124,1 @@\n-\t\t\treturn !cfs.isCommercialFeaturesEnabled() || JVMSupportToolkit.isFlightRecorderDisabled(handle, false);\n+\t\t\treturn !cfs.isCommercialFeaturesEnabled() || ConnectionToolkit.isFlightRecorderDisabled(handle, false);\n@@ -134,1 +132,1 @@\n-\t\tif (!JVMSupportToolkit.hasFlightRecorder(handle)) {\n+\t\tif (!ConnectionToolkit.hasFlightRecorder(handle)) {\n@@ -140,1 +138,1 @@\n-\t\tif (JVMSupportToolkit.isFlightRecorderDisabled(handle, true)) {\n+\t\tif (ConnectionToolkit.isFlightRecorderDisabled(handle, true)) {\n@@ -307,1 +305,1 @@\n-\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, \"Couldn't get default event options\", e); \/\/$NON-NLS-1$\n+\t\t\tLOGGER.log(Level.WARNING, \"Couldn't get default event options\", e); \/\/$NON-NLS-1$\n@@ -378,2 +376,1 @@\n-\t\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING,\n-\t\t\t\t\t\t\t\"Could not create event metadata for composite data!\", e); \/\/$NON-NLS-1$\n+\t\t\t\t\tLOGGER.log(Level.WARNING, \"Could not create event metadata for composite data!\", e); \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/FlightRecorderServiceV1.java","additions":19,"deletions":22,"binary":false,"changes":41,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/FlightRecorderServiceV1.java","status":"renamed"},{"patch":"@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -37,1 +37,1 @@\n-import static org.openjdk.jmc.rjmx.services.jfr.internal.RecordingOptionsToolkitV2.toTabularData;\n+import static org.openjdk.jmc.rjmx.common.services.jfr.internal.RecordingOptionsToolkitV2.toTabularData;\n@@ -55,2 +55,0 @@\n-\n-import org.eclipse.osgi.util.NLS;\n@@ -66,0 +64,3 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IFlightRecorderService;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -75,10 +76,6 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.JVMSupportToolkit;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.ICommercialFeaturesService;\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IFlightRecorderService;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.ICommercialFeaturesService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n@@ -87,1 +84,1 @@\n-\tfinal static Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.rjmx.services.jfr\"); \/\/$NON-NLS-1$\n+\tfinal static Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.rjmx.common.services.jfr\"); \/\/$NON-NLS-1$\n@@ -122,1 +119,1 @@\n-\t\t\treturn !cfs.isCommercialFeaturesEnabled() || JVMSupportToolkit.isFlightRecorderDisabled(handle, false);\n+\t\t\treturn !cfs.isCommercialFeaturesEnabled() || ConnectionToolkit.isFlightRecorderDisabled(handle, false);\n@@ -124,1 +121,1 @@\n-\t\t\treturn JVMSupportToolkit.isFlightRecorderDisabled(handle, false);\n+\t\t\treturn ConnectionToolkit.isFlightRecorderDisabled(handle, false);\n@@ -138,1 +135,1 @@\n-\t\tif (!ConnectionToolkit.isSubstrateVM(handle) && JVMSupportToolkit.isFlightRecorderDisabled(handle, true)) {\n+\t\tif (!ConnectionToolkit.isSubstrateVM(handle) && ConnectionToolkit.isFlightRecorderDisabled(handle, true)) {\n@@ -428,1 +425,2 @@\n-\t\t\t\t\tNLS.bind(Messages.FlightRecorderServiceV2_CLONE_OF_RECORDING_NAME, descriptor.getName()));\n+\t\t\t\t\tString.format(Messages.getString(Messages.FlightRecorderServiceV2_CLONE_OF_RECORDING_NAME),\n+\t\t\t\t\t\t\tdescriptor.getName()));\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/FlightRecorderServiceV2.java","additions":17,"deletions":19,"binary":false,"changes":36,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/FlightRecorderServiceV2.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -44,1 +44,1 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/HotspotManagementToolkit.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/internal\/HotspotManagementToolkit.java","status":"renamed"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n+\n+import java.io.IOException;\n+\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n+\n+interface IFlightRecorderCommunicationHelper {\n+\n+\tObject getAttribute(String attribute) throws FlightRecorderException;\n+\n+\tObject invokeOperation(String name, Object ... parameters) throws IOException, FlightRecorderException;\n+\n+\tvoid closeRecording(IRecordingDescriptor descriptor) throws FlightRecorderException;\n+\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/IFlightRecorderCommunicationHelper.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -40,2 +40,2 @@\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/JfrRecordingInputStreamV1.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/JfrRecordingInputStreamV1.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -44,2 +44,2 @@\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/JfrRecordingInputStreamV2.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/JfrRecordingInputStreamV2.java","status":"renamed"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2018, 2023 Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n+\n+import java.util.MissingResourceException;\n+import java.util.ResourceBundle;\n+\n+public class Messages {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.rjmx.common.services.jfr.internal.messages\"; \/\/$NON-NLS-1$\n+\n+\tprivate static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME);\n+\n+\tpublic static final String EventTypeMetadataV2_BAD_DEFAULT_VALUE = \"EventTypeMetadataV2_BAD_DEFAULT_VALUE\"; \/\/$NON-NLS-1$\n+\tpublic static final String FlightRecorderServiceV2_CLONE_OF_RECORDING_NAME = \"FlightRecorderServiceV2_CLONE_OF_RECORDING_NAME\"; \/\/$NON-NLS-1$\n+\n+\tprivate Messages() {\n+\t}\n+\n+\tpublic static String getString(String key) {\n+\t\ttry {\n+\t\t\treturn RESOURCE_BUNDLE.getString(key);\n+\t\t} catch (MissingResourceException e) {\n+\t\t\treturn '!' + key + '!';\n+\t\t}\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/Messages.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/OpenTypeConverter.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/OpenTypeConverter.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -45,1 +45,1 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/RecordingDescriptorToolkitV1.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/RecordingDescriptorToolkitV1.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -46,0 +46,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n@@ -47,1 +48,0 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/RecordingDescriptorV1.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/RecordingDescriptorV1.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -45,1 +45,1 @@\n-import org.openjdk.jmc.rjmx.services.jfr.IRecordingDescriptor;\n+import org.openjdk.jmc.flightrecorder.configuration.IRecordingDescriptor;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/RecordingDescriptorV2.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/RecordingDescriptorV2.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n@@ -64,0 +64,1 @@\n+import org.openjdk.jmc.flightrecorder.configuration.FlightRecorderException;\n@@ -65,1 +66,0 @@\n-import org.openjdk.jmc.rjmx.services.jfr.FlightRecorderException;\n@@ -68,1 +68,1 @@\n- * Toolkit for handling marshalling of RecordingOptions for JFR 1.0 (JDK 7\/8).\n+ * Toolkit for handling marshaling of RecordingOptions for JFR 1.0 (JDK 7\/8).\n@@ -71,1 +71,1 @@\n-\tprivate final static Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.rjmx.services.jfr.internal\"); \/\/$NON-NLS-1$\n+\tprivate final static Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.rjmx.common.services.jfr.internal\"); \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/RecordingOptionsToolkitV1.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/RecordingOptionsToolkitV1.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/RecordingOptionsToolkitV2.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/RecordingOptionsToolkitV2.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.services.jfr.internal;\n+package org.openjdk.jmc.rjmx.common.services.jfr.internal;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/RecordingTemplateToolkit.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/RecordingTemplateToolkit.java","status":"renamed"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+\/**\n+ * This package contains the service to control the flight recorder, and all classes related to that\n+ * service.\n+ * <p>\n+ * The following example will print the names of all ongoing recordings:\n+ *\n+ * <pre>\n+ * <code>\n+ * IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName(\"localhost\").port(0).build(); \/\/$NON-NLS-1$\n+ * IServerHandle serverHandle = IServerHandle.create(descriptor);\n+ * IConnectionHandle handle = serverHandle.connect(\"Get JFR recording info\"); \/\/$NON-NLS-1$\n+ * try {\n+ * \tIFlightRecorderService jfr = handle.getServiceOrThrow(IFlightRecorderService.class);\n+ * \tfor (IRecordingDescriptor desc : jfr.getAvailableRecordings()) {\n+ * \t\tSystem.out.println(desc.getName());\n+ * \t}\n+ * } finally {\n+ * \tIOToolkit.closeSilently(handle);\n+ * }\n+ *<\/code>\n+ * <\/pre>\n+ *\n+ * The following will start a time bound recording, and then transfer the recording to a local file\n+ * when completed:\n+ *\n+ * <pre>\n+ * <code>\n+ * IConnectionDescriptor descriptor = new ConnectionDescriptorBuilder().hostName(\"localhost\").port(0).build(); \/\/$NON-NLS-1$\n+ * IServerHandle serverHandle = IServerHandle.create(descriptor);\n+ * IConnectionHandle handle = serverHandle.connect(\"Start time bound flight recording\");\n+ * try {\n+ * \tIFlightRecorderService jfr = handle.getServiceOrThrow(IFlightRecorderService.class);\n+ *\n+ * \tlong duration = 5000;\n+ * \tIConstrainedMap&lt;String&gt; defaultRecordingOptions = jfr.getDefaultRecordingOptions();\n+ * \tIDescribedMap&lt;EventOptionID&gt; defaultEventOptions = jfr.getDefaultEventOptions();\n+ * \tIConstrainedMap&lt;String&gt; recordingOptions = new RecordingOptionsBuilder(defaultRecordingOptions.mutableCopy())\n+ * \t\t\t.name(\"MyRecording\").duration(duration).build();\n+ * \tIRecordingDescriptor recording = jfr.start(recordingOptions, defaultEventOptions);\n+ * \tThread.sleep(duration);\n+ * \twhile (recording.getState() != IRecordingDescriptor.RecordingState.STOPPED) {\n+ * \t\tThread.sleep(1000);\n+ * \t\trecording = jfr.getUpdatedRecordingDescription(recording);\n+ * \t}\n+ * \tInputStream is = jfr.openStream(recording, true);\n+ * \twriteStreamToFile(is);\n+ * } finally {\n+ * \tIOToolkit.closeSilently(handle);\n+ * }\n+ * <\/code>\n+ * <\/pre>\n+ *\/\n+package org.openjdk.jmc.rjmx.common.services.jfr;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/package-info.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n@@ -47,1 +47,1 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/IMBeanHelperService.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IMBeanHelperService.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/IMBeanServerChangeListener.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IMBeanServerChangeListener.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/IMRIMetadata.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IMRIMetadata.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/IMRIMetadataProvider.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IMRIMetadataProvider.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n@@ -35,2 +35,2 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.ui.common.util.IObservable;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.common.util.IObservable;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/IMRIMetadataService.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IMRIMetadataService.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/IMRIService.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IMRIService.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/IMRISubscription.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IMRISubscription.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/IMRITransformation.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IMRITransformation.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/IMRITransformationFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IMRITransformationFactory.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/IMRIValueListener.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IMRIValueListener.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/ISubscriptionService.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/ISubscriptionService.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/IUpdatePolicy.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/IUpdatePolicy.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n@@ -39,1 +39,1 @@\n-import org.openjdk.jmc.rjmx.ConnectionToolkit;\n+import org.openjdk.jmc.rjmx.common.ConnectionToolkit;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/MRI.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/MRI.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription;\n+package org.openjdk.jmc.rjmx.common.subscription;\n@@ -37,1 +37,1 @@\n-import org.openjdk.jmc.rjmx.messages.internal.Messages;\n+import org.openjdk.jmc.rjmx.common.messages.internal.Messages;\n@@ -48,1 +48,1 @@\n-\t\t\treturn '[' + Messages.LABEL_NOT_AVAILABLE + ']';\n+\t\t\treturn '[' + Messages.getString(Messages.LABEL_NOT_AVAILABLE) + ']';\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/MRIValueEvent.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/MRIValueEvent.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -42,8 +42,8 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.IUpdatePolicy;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.IUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/AbstractAttributeSubscription.java","additions":10,"deletions":10,"binary":false,"changes":20,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/AbstractAttributeSubscription.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.subscription.IUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.IUpdatePolicy;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/AbstractUpdatePolicy.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/AbstractUpdatePolicy.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -35,2 +35,2 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/AttributeExceptionEvent.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/AttributeExceptionEvent.java","status":"renamed"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n+\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+\n+\/**\n+ * Instances of this class are delivered when the Subscription is re-registered, typically because\n+ * an attribute became available again.\n+ *\/\n+public class AttributeReregisteredEvent extends MRIValueEvent {\n+\n+\t\/**\n+\t * @param source\n+\t *            the subscription that re-registered.\n+\t * @param timestamp\n+\t *            the time the attribute was re-registered.\n+\t *\/\n+\tpublic AttributeReregisteredEvent(IMRISubscription source, long timestamp) {\n+\t\tsuper(source.getMRIMetadata().getMRI(), timestamp, null);\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/AttributeReregisteredEvent.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -43,0 +43,1 @@\n+import java.util.logging.Logger;\n@@ -55,3 +56,2 @@\n-import org.openjdk.jmc.rjmx.RJMXPlugin;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n@@ -64,0 +64,2 @@\n+\tprivate static final Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.rjmx.common.subscription.internal\");\n+\n@@ -165,1 +167,1 @@\n-\t\t\t\tRJMXPlugin.getDefault().getLogger().log(Level.WARNING, msg);\n+\t\t\t\tLOGGER.log(Level.WARNING, msg);\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/AttributeValueToolkit.java","additions":8,"deletions":6,"binary":false,"changes":14,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/AttributeValueToolkit.java","status":"renamed"},{"patch":"@@ -0,0 +1,55 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n+\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+\n+\/**\n+ * Instances of this class are delivered when the subscription thread fails, typically because the\n+ * connection was lost.\n+ *\/\n+public class ConnectionLostEvent extends MRIValueEvent {\n+\n+\t\/**\n+\t * Constructor.\n+\t *\n+\t * @param source\n+\t *            the subscription that failed .\n+\t * @param timestamp\n+\t *            the time the failure occurred.\n+\t *\/\n+\tpublic ConnectionLostEvent(IMRISubscription source, long timestamp) {\n+\t\tsuper(source.getMRIMetadata().getMRI(), timestamp, null);\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/ConnectionLostEvent.java","additions":55,"deletions":0,"binary":false,"changes":55,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n+\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+\n+\/**\n+ * The default implementation of an attribute subscription.\n+ *\/\n+public class DefaultAttributeSubscription extends AbstractAttributeSubscription {\n+\tpublic DefaultAttributeSubscription(IConnectionHandle connectionHandle, IMRIMetadata info) {\n+\t\tsuper(connectionHandle, info);\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/DefaultAttributeSubscription.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -42,13 +42,13 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.internal.IDisposableService;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadataService;\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.IMRITransformation;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.internal.IDisposableService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRITransformation;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n@@ -338,1 +338,1 @@\n-\t\t\tIMRITransformation transformation = MRITransformationToolkit.createTransformation(info.getMRI());\n+\t\t\tIMRITransformation transformation = MRITransformationBaseToolkit.createTransformation(info.getMRI());\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/DefaultAttributeSubscriptionService.java","additions":16,"deletions":16,"binary":false,"changes":32,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/DefaultAttributeSubscriptionService.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -51,9 +51,9 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.services.IAttributeStorageService;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n-import org.openjdk.jmc.rjmx.subscription.internal.IMRISubscriptionDebugInformation.SubscriptionState;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.services.internal.IAttributeStorageService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.IMRISubscriptionDebugInformation.SubscriptionState;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/DefaultAttributeSubscriptionThread.java","additions":11,"deletions":11,"binary":false,"changes":22,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/DefaultAttributeSubscriptionThread.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -51,9 +51,9 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.subscription.IMRIMetadata;\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRI.Type;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n-import org.openjdk.jmc.rjmx.subscription.internal.IMRISubscriptionDebugInformation.SubscriptionState;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n+import org.openjdk.jmc.rjmx.common.subscription.internal.IMRISubscriptionDebugInformation.SubscriptionState;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/DefaultNotificationSubscriptionManager.java","additions":11,"deletions":11,"binary":false,"changes":22,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/DefaultNotificationSubscriptionManager.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -35,2 +35,2 @@\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/DefaultSubscriptionDebugInformation.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/DefaultSubscriptionDebugInformation.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -35,2 +35,2 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.IUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.IUpdatePolicy;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/DefaultUpdatePolicy.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/DefaultUpdatePolicy.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.subscription.IUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.IUpdatePolicy;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/IIntervalUpdatePolicy.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/IIntervalUpdatePolicy.java","status":"renamed"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n+\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+\n+public interface IMRISubscriptionDebugInformation {\n+\tpublic static enum SubscriptionState {\n+\t\tSUBSCRIBED, UNSUBSCRIBED, LOST\n+\t}\n+\n+\tpublic MRI getMRI();\n+\n+\tpublic SubscriptionState getState();\n+\n+\tpublic int getConnectionCount();\n+\n+\tpublic int getDisconnectionCount();\n+\n+\tpublic int getEventCount();\n+\n+\tpublic int getRetainedEventCount();\n+\n+\tpublic MRIValueEvent getLastEvent();\n+\n+\tpublic int getConnectionLostCount();\n+\n+\tpublic int getTriedReconnectionsCount();\n+\n+\tpublic int getSucceededReconnectionsCount();\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/IMRISubscriptionDebugInformation.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/ISubscriptionDebugService.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/ISubscriptionDebugService.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/InvoluntaryDisconnectException.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/InvoluntaryDisconnectException.java","status":"renamed"},{"patch":"@@ -0,0 +1,309 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.Set;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import javax.management.Descriptor;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.JMX;\n+import javax.management.MBeanAttributeInfo;\n+import javax.management.MBeanInfo;\n+import javax.management.MBeanNotificationInfo;\n+import javax.management.ObjectName;\n+import javax.management.openmbean.CompositeData;\n+import javax.management.openmbean.CompositeType;\n+import javax.management.openmbean.OpenType;\n+\n+import org.openjdk.jmc.common.util.TypeHandling;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanServerChangeListener;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRITransformation;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI.Type;\n+\n+\/**\n+ * Responsible for querying the existing MBean server for metadata. Will cache metadata for\n+ * everything that is not directly available through the MBean information of the MBean server.\n+ *\/\n+public final class MBeanMRIMetadataDB implements IMRIService, IMBeanServerChangeListener {\n+\tprivate static final Logger LOGGER = Logger.getLogger(\"org.openjdk.jmc.rjmx.subscription.internal\");\n+\n+\t\/\/ FIXME: extend possibility to record MBean metadata about notifications\n+\tprivate final IMBeanHelperService mbeanService;\n+\tprivate final Map<ObjectName, Map<MRI, Map<String, Object>>> cachedMRIMetadata = new HashMap<>();\n+\tprivate final Set<ObjectName> introspectedMBeans = new HashSet<>();\n+\n+\tpublic MBeanMRIMetadataDB(IMBeanHelperService mbeanService) {\n+\t\tthis.mbeanService = mbeanService;\n+\t}\n+\n+\t@Override\n+\tpublic Set<MRI> getMRIs() {\n+\t\tSet<MRI> allMRIOnServer = new HashSet<>();\n+\t\ttry {\n+\t\t\tfor (ObjectName mbean : mbeanService.getMBeanNames()) {\n+\t\t\t\tallMRIOnServer.addAll(getMBeanData(mbean).keySet());\n+\t\t\t}\n+\t\t} catch (Exception e) {\n+\t\t\tLOGGER.log(Level.SEVERE, \"Unable to retrieve MBean names from server!\", e); \/\/$NON-NLS-1$\n+\t\t}\n+\t\treturn allMRIOnServer;\n+\t}\n+\n+\t@Override\n+\tpublic boolean isMRIAvailable(MRI mri) {\n+\t\tif (mri.getType() == Type.TRANSFORMATION) {\n+\t\t\treturn isTransformationAvailable(mri);\n+\t\t}\n+\t\treturn getMBeanData(mri.getObjectName()).keySet().contains(mri);\n+\t}\n+\n+\tprivate boolean isTransformationAvailable(MRI mri) {\n+\t\tIMRITransformation transformation = MRITransformationBaseToolkit.createTransformation(mri);\n+\t\tfor (MRI attribute : transformation.getAttributes()) {\n+\t\t\tif (!isMRIAvailable(attribute)) {\n+\t\t\t\treturn false;\n+\t\t\t}\n+\t\t}\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic void mbeanUnregistered(ObjectName mbean) {\n+\t\tsynchronized (cachedMRIMetadata) {\n+\t\t\tintrospectedMBeans.remove(mbean);\n+\t\t\tcachedMRIMetadata.remove(mbean);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void mbeanRegistered(ObjectName mbean) {\n+\t}\n+\n+\tpublic Map<MRI, Map<String, Object>> getMBeanData(ObjectName mbean) {\n+\t\tif (hasIntrospectedMBean(mbean)) {\n+\t\t\tsynchronized (cachedMRIMetadata) {\n+\t\t\t\treturn getNonNullMap(cachedMRIMetadata, mbean);\n+\t\t\t}\n+\t\t}\n+\t\treturn introspectMBean(mbean);\n+\t}\n+\n+\tprivate boolean hasIntrospectedMBean(ObjectName mbean) {\n+\t\treturn introspectedMBeans.contains(mbean);\n+\t}\n+\n+\tprivate <K, V, C> Map<V, C> getNonNullMap(Map<K, Map<V, C>> map, K key) {\n+\t\tMap<V, C> keyMap = map.get(key);\n+\t\tif (keyMap == null) {\n+\t\t\treturn Collections.emptyMap();\n+\t\t}\n+\t\treturn keyMap;\n+\t}\n+\n+\tprivate Map<MRI, Map<String, Object>> lookupMBeanMRIData(ObjectName mbean) {\n+\t\tMBeanInfo info = lookupMBeanInfo(mbean);\n+\t\tif (info != null) {\n+\t\t\tMap<MRI, Map<String, Object>> mbeanMetadata = new HashMap<>();\n+\t\t\tfor (MBeanAttributeInfo attribute : info.getAttributes()) {\n+\t\t\t\tif (attribute.getName() == null) {\n+\t\t\t\t\tLOGGER.warning(\"Omitting attribute with name==null in MBean + \" + mbean.toString()); \/\/$NON-NLS-1$\n+\t\t\t\t} else {\n+\t\t\t\t\tif (attribute.getType() == null) {\n+\t\t\t\t\t\tLOGGER.warning(\n+\t\t\t\t\t\t\t\t\"Found MBean attribute with invalid type for \" + mbean + \"\/\" + attribute.getName()); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t\t\t\t}\n+\t\t\t\t\tmbeanMetadata.put(new MRI(Type.ATTRIBUTE, mbean, attribute.getName()), createMetadata(attribute));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tfor (MBeanNotificationInfo notification : info.getNotifications()) {\n+\t\t\t\tfor (String type : notification.getNotifTypes()) {\n+\t\t\t\t\tmbeanMetadata.put(new MRI(Type.NOTIFICATION, mbean, type), createMetadata(notification, type));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\treturn mbeanMetadata;\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate MBeanInfo lookupMBeanInfo(ObjectName mbean) {\n+\t\ttry {\n+\t\t\treturn mbeanService.getMBeanInfo(mbean);\n+\t\t} catch (InstanceNotFoundException e) {\n+\t\t\tLOGGER.log(Level.INFO, \"MBean \" + mbean + \" does not exist on the server\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\t} catch (Exception e) {\n+\t\t\tLOGGER.log(Level.SEVERE, \"Unable to retrieve MBean information from server!\", \/\/$NON-NLS-1$\n+\t\t\t\t\te);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate Map<String, Object> createMetadata(MBeanAttributeInfo attribute) {\n+\t\tString typeName = attribute.getType();\n+\t\tObject originalType = attribute.getDescriptor().getFieldValue(\"originalType\"); \/\/$NON-NLS-1$\n+\t\tif (originalType instanceof String) {\n+\t\t\ttypeName = (String) originalType;\n+\t\t}\n+\t\tMap<String, Object> metadata = new HashMap<>();\n+\t\tmetadata.put(IMRIMetadataProvider.KEY_DISPLAY_NAME, attribute.getName());\n+\t\tmetadata.put(IMRIMetadataProvider.KEY_DESCRIPTION, attribute.getDescription());\n+\t\tmetadata.put(IMRIMetadataProvider.KEY_VALUE_TYPE, typeName);\n+\t\tmetadata.put(IMRIMetadataProvider.KEY_COMPOSITE, isCompositeType(attribute.getType()));\n+\t\tmetadata.put(IMRIMetadataProvider.KEY_READABLE, attribute.isReadable());\n+\t\tmetadata.put(IMRIMetadataProvider.KEY_WRITABLE, attribute.isWritable());\n+\t\tmetadata.put(IMRIMetadataProvider.KEY_DESCRIPTOR, attribute.getDescriptor());\n+\t\treturn metadata;\n+\t}\n+\n+\tprivate Map<String, Object> createMetadata(MBeanNotificationInfo notification, String type) {\n+\t\tMap<String, Object> metadata = new HashMap<>();\n+\t\tmetadata.put(IMRIMetadataProvider.KEY_DISPLAY_NAME, type);\n+\t\tmetadata.put(IMRIMetadataProvider.KEY_DESCRIPTION, notification.getDescription());\n+\t\tmetadata.put(IMRIMetadataProvider.KEY_VALUE_TYPE, notification.getName());\n+\t\tmetadata.put(IMRIMetadataProvider.KEY_DESCRIPTOR, notification.getDescriptor());\n+\t\treturn metadata;\n+\t}\n+\n+\tprivate boolean isCompositeType(String className) {\n+\t\tif (className == null) {\n+\t\t\treturn false;\n+\t\t}\n+\t\ttry {\n+\t\t\treturn CompositeData.class.isAssignableFrom(TypeHandling.getClassWithName(className));\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\treturn false;\n+\t\t}\n+\t}\n+\n+\tprivate Map<MRI, Map<String, Object>> introspectMBean(ObjectName mbean) {\n+\t\tMap<MRI, Map<String, Object>> cachedMBeanInfo;\n+\t\tsynchronized (cachedMRIMetadata) {\n+\t\t\tMap<MRI, Map<String, Object>> mbeanMetadata = cachedMRIMetadata.get(mbean);\n+\t\t\tif (mbeanMetadata == null) {\n+\t\t\t\tmbeanMetadata = lookupMBeanMRIData(mbean);\n+\t\t\t\tif (mbeanMetadata == null) {\n+\t\t\t\t\treturn Collections.emptyMap();\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcachedMBeanInfo = new HashMap<>(mbeanMetadata);\n+\t\t\tboolean hasIntrospected = true;\n+\t\t\tfor (Entry<MRI, Map<String, Object>> entry : mbeanMetadata.entrySet()) {\n+\t\t\t\tCompositeType type = getCompositeType(entry.getValue());\n+\t\t\t\tif (type == null && isComposite(entry.getValue())) {\n+\t\t\t\t\t\/\/ FIXME: We ought to retrieve all composites at once but we will not need this for well behaved MBeans\n+\t\t\t\t\tCompositeData compositeData = getCompositeData(entry.getKey());\n+\t\t\t\t\tif (compositeData != null) {\n+\t\t\t\t\t\ttype = compositeData.getCompositeType();\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\thasIntrospected = false;\n+\t\t\t\t\t}\n+\t\t\t\t}\n+\t\t\t\tif (type != null) {\n+\t\t\t\t\tObject readable = entry.getValue().get(IMRIMetadataProvider.KEY_READABLE);\n+\t\t\t\t\tObject writable = entry.getValue().get(IMRIMetadataProvider.KEY_WRITABLE);\n+\t\t\t\t\tentry.getValue().put(IMRIMetadataProvider.KEY_COMPOSITE, true);\n+\t\t\t\t\tcachedMBeanInfo.putAll(introspectChildren(entry.getKey(), type, readable, writable));\n+\t\t\t\t}\n+\t\t\t}\n+\t\t\tcachedMRIMetadata.put(mbean, cachedMBeanInfo);\n+\t\t\tif (hasIntrospected) {\n+\t\t\t\tintrospectedMBeans.add(mbean);\n+\t\t\t}\n+\t\t}\n+\t\treturn new HashMap<>(cachedMBeanInfo);\n+\t}\n+\n+\tprivate boolean isComposite(Map<String, Object> metadata) {\n+\t\tObject object = metadata.get(IMRIMetadataProvider.KEY_COMPOSITE);\n+\t\tif (object != null && object instanceof Boolean) {\n+\t\t\treturn ((Boolean) object).booleanValue();\n+\t\t}\n+\t\treturn false;\n+\t}\n+\n+\tprivate CompositeType getCompositeType(Map<String, Object> metadata) {\n+\t\tObject descriptor = metadata.get(IMRIMetadataProvider.KEY_DESCRIPTOR);\n+\t\tif (descriptor instanceof Descriptor) {\n+\t\t\tObject type = ((Descriptor) descriptor).getFieldValue(JMX.OPEN_TYPE_FIELD);\n+\t\t\tif (type instanceof CompositeType) {\n+\t\t\t\treturn (CompositeType) type;\n+\t\t\t}\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate CompositeData getCompositeData(MRI mri) {\n+\t\ttry {\n+\t\t\tObject attributeValue = mbeanService.getAttributeValue(mri);\n+\t\t\tif (attributeValue instanceof CompositeData) {\n+\t\t\t\treturn (CompositeData) attributeValue;\n+\t\t\t}\n+\t\t\treturn null;\n+\t\t} catch (Exception e) {\n+\t\t\tLOGGER.log(Level.SEVERE, \"Could not retrieve attribute: \" + mri, e); \/\/$NON-NLS-1$\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tprivate Map<MRI, Map<String, Object>> introspectChildren(\n+\t\tMRI parentMRI, CompositeType parentType, Object readable, Object writable) {\n+\t\tMap<MRI, Map<String, Object>> children = new HashMap<>();\n+\t\tfor (Object key : parentType.keySet()) {\n+\t\t\tString childAttribute = String.valueOf(key);\n+\t\t\tMRI childMRI = new MRI(parentMRI, childAttribute);\n+\t\t\tMap<String, Object> childMetadata = new HashMap<>();\n+\t\t\tchildren.put(childMRI, childMetadata);\n+\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_DISPLAY_NAME, childAttribute);\n+\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_DESCRIPTION, parentType.getDescription(childAttribute));\n+\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_VALUE_TYPE, parentType.getType(childAttribute).getClassName());\n+\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_READABLE, readable);\n+\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_WRITABLE, writable);\n+\t\t\tOpenType<?> childType = parentType.getType(childAttribute);\n+\t\t\tif (childType instanceof CompositeType) {\n+\t\t\t\tchildMetadata.put(IMRIMetadataProvider.KEY_COMPOSITE, true);\n+\t\t\t\tchildren.putAll(introspectChildren(childMRI, (CompositeType) childType, readable, writable));\n+\t\t\t}\n+\t\t}\n+\t\treturn children;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/MBeanMRIMetadataDB.java","additions":309,"deletions":0,"binary":false,"changes":309,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n+\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import java.util.logging.Level;\n+\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRITransformation;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRITransformationFactory;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+\n+\/**\n+ * An MRI transformation toolkit responsible for creating transformations from MRI, finding\n+ * attributes they depend on, etc.\n+ *\/\n+public class MRITransformationBaseToolkit {\n+\n+\tprotected static final String TRANSFORMATION_EXTENSION_NAME = \"org.openjdk.jmc.rjmx.attributeTransformation\"; \/\/$NON-NLS-1$\n+\tprotected static final String TRANSFORMATION_ELEMENT = \"attributeTransformation\"; \/\/$NON-NLS-1$\n+\tpublic static final String TRANSFORMATION_NAME_ATTRIBUTE = \"transformationName\"; \/\/$NON-NLS-1$\n+\tprotected static final String TRANSFORMATION_PROPERTY_ELEMENT = \"property\"; \/\/$NON-NLS-1$\n+\tprotected static final String TRANSFORMATION_PROPERTY_NAME = \"name\"; \/\/$NON-NLS-1$\n+\tprotected static final String TRANSFORMATION_PROPERTY_VALUE = \"value\"; \/\/$NON-NLS-1$\n+\tprotected static final String TRANSFORMATION_PROPERTIES_ELEMENT = \"transformationProperties\"; \/\/$NON-NLS-1$\n+\n+\tprotected static final Map<String, IMRITransformationFactory> TRANSFORMATION_FACTORIES = new HashMap<>();\n+\n+\tpublic void initializeFromExtensions(Map<String, IMRITransformationFactory> transformationFactories) {\n+\t\tTRANSFORMATION_FACTORIES.clear();\n+\t\tfor (Map.Entry<String, IMRITransformationFactory> factory : transformationFactories.entrySet()) {\n+\t\t\tTRANSFORMATION_FACTORIES.put(factory.getKey(), factory.getValue());\n+\t\t}\n+\t}\n+\n+\tpublic static void addTransformationsFactory(\n+\t\tString transformationName, IMRITransformationFactory transformationFactory) {\n+\t\tTRANSFORMATION_FACTORIES.put(transformationName, transformationFactory);\n+\t}\n+\n+\t\/**\n+\t * Creates a new transformation with given transformation MRI for given connection.\n+\t *\n+\t * @param mri\n+\t *            the transformation MRI\n+\t * @return the corresponding transformation object\n+\t *\/\n+\tpublic static IMRITransformation createTransformation(MRI mri) {\n+\t\tString transformationName = getTransformationName(mri);\n+\t\tif (TRANSFORMATION_FACTORIES.containsKey(transformationName)) {\n+\t\t\tProperties properties = createProperties(mri);\n+\t\t\treturn TRANSFORMATION_FACTORIES.get(transformationName).createTransformation(properties);\n+\t\t}\n+\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.SEVERE,\n+\t\t\t\t\"Could not instantiate unknown transformation type \" + transformationName + \"!\"); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$\n+\t\treturn null;\n+\t}\n+\n+\t\/**\n+\t * Returns the different available transformation factories.\n+\t *\n+\t * @return the set of transformation factories\n+\t *\/\n+\tpublic static Iterable<IMRITransformationFactory> getFactories() {\n+\t\treturn Collections.unmodifiableCollection(TRANSFORMATION_FACTORIES.values());\n+\t}\n+\n+\tprivate static String getTransformationName(MRI mri) {\n+\t\tString path = mri.getDataPath();\n+\t\tint partitionIndex = path.indexOf('?');\n+\t\tif (partitionIndex >= 0) {\n+\t\t\treturn path.substring(0, partitionIndex);\n+\t\t}\n+\t\treturn path;\n+\t}\n+\n+\tprivate static Properties createProperties(MRI mri) {\n+\t\tProperties properties = new Properties();\n+\t\tString path = mri.getDataPath();\n+\t\tint partitionIndex = path.indexOf('?');\n+\t\tif (partitionIndex >= 0) {\n+\t\t\tpath = path.substring(partitionIndex + 1);\n+\t\t\tfor (String property : path.split(\"&\")) { \/\/$NON-NLS-1$\n+\t\t\t\tint equalIndex = property.indexOf('=');\n+\t\t\t\tproperties.put(property.substring(0, equalIndex), property.substring(equalIndex + 1));\n+\t\t\t}\n+\t\t}\n+\t\treturn properties;\n+\t}\n+\n+\tpublic static void forwardMetadata(\n+\t\tIMRIMetadataService metadataService, MRI mri, IMRIMetadata attributeMetadata, String textPattern) {\n+\t\tmetadataService.setMetadata(mri, IMRIMetadataProvider.KEY_DISPLAY_NAME,\n+\t\t\t\tString.format(textPattern, attributeMetadata.getMetadata(IMRIMetadataProvider.KEY_DISPLAY_NAME)));\n+\t\tmetadataService.setMetadata(mri, IMRIMetadataProvider.KEY_DESCRIPTION,\n+\t\t\t\tString.format(textPattern, attributeMetadata.getMetadata(IMRIMetadataProvider.KEY_DESCRIPTION)));\n+\t\tmetadataService.setMetadata(mri, IMRIMetadataProvider.KEY_UPDATE_TIME,\n+\t\t\t\t(String) attributeMetadata.getMetadata(IMRIMetadataProvider.KEY_UPDATE_TIME));\n+\t\tmetadataService.setMetadata(mri, IMRIMetadataProvider.KEY_UNIT_STRING,\n+\t\t\t\t(String) attributeMetadata.getMetadata(IMRIMetadataProvider.KEY_UNIT_STRING));\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/MRITransformationBaseToolkit.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/OneShotUpdatePolicy.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/OneShotUpdatePolicy.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -35,2 +35,2 @@\n-import org.openjdk.jmc.rjmx.subscription.IMRISubscription;\n-import org.openjdk.jmc.rjmx.subscription.IUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.IUpdatePolicy;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/SimpleUpdatePolicy.java","additions":4,"deletions":4,"binary":false,"changes":8,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/SimpleUpdatePolicy.java","status":"renamed"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n+\n+import java.util.Properties;\n+import java.util.logging.Level;\n+\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRITransformation;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRITransformationFactory;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+\n+\/**\n+ * A transformation factory used be several of our own transformations.\n+ *\/\n+public class SingleMRITransformationFactory implements IMRITransformationFactory {\n+\n+\tprivate static final String TRANSFORMATION_CLASS_NAME_PROPERTY = \"transformationClass\"; \/\/$NON-NLS-1$\n+\tprivate Properties m_properties;\n+\tprivate Properties m_transformationProperties;\n+\n+\t@Override\n+\tpublic void setFactoryProperties(Properties properties, Properties transformationProperties) {\n+\t\tm_properties = properties;\n+\t\tm_transformationProperties = transformationProperties;\n+\t}\n+\n+\t@Override\n+\tpublic IMRITransformation createTransformation(Properties properties) {\n+\t\tString className = m_properties.getProperty(TRANSFORMATION_CLASS_NAME_PROPERTY);\n+\t\tif (className == null) {\n+\t\t\treturn null;\n+\t\t}\n+\t\ttry {\n+\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\tClass<IMRITransformation> clz = (Class<IMRITransformation>) Class.forName(className);\n+\t\t\tIMRITransformation transformation = clz.newInstance();\n+\t\t\tproperties.putAll(m_transformationProperties);\n+\t\t\ttransformation.setProperties(properties);\n+\t\t\treturn transformation;\n+\t\t} catch (ClassNotFoundException e) {\n+\t\t\tlogException(e);\n+\t\t} catch (InstantiationException e) {\n+\t\t\tlogException(e);\n+\t\t} catch (IllegalAccessException e) {\n+\t\t\tlogException(e);\n+\t\t}\n+\t\treturn null;\n+\t}\n+\n+\tprivate void logException(Exception e) {\n+\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING, \"Unable to create transformation!\", e); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Override\n+\tpublic String getVisualizationLabel() {\n+\t\treturn m_properties.getProperty(\"visualizeLabel\"); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Override\n+\tpublic MRI createTransformationMRI(MRI mri) {\n+\t\tString transformationName = m_properties\n+\t\t\t\t.getProperty(MRITransformationBaseToolkit.TRANSFORMATION_NAME_ATTRIBUTE);\n+\t\t\/\/ FIXME: Would be nice to not have to specify an ObjectName but until then let us use something meaningful.\n+\t\treturn new MRI(MRI.Type.TRANSFORMATION, \"transformation:type=\" + transformationName, \/\/$NON-NLS-1$\n+\t\t\t\ttransformationName + \"?attribute=\" + mri); \/\/$NON-NLS-1$\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/SingleMRITransformationFactory.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n+\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadata;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRITransformation;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+\n+\/**\n+ * Will encapsulate an attribute transformation and set up subscriptions of all attributes that the\n+ * transformation reports as used. Will propagate updated values for the transformation.\n+ *\/\n+public class TransformationSubscription extends AbstractAttributeSubscription {\n+\n+\tprivate final IMRITransformation m_transformation;\n+\tprivate final IMRIValueListener m_mriListener;\n+\tprivate final ISubscriptionService m_subscriptionService;\n+\n+\tpublic TransformationSubscription(IConnectionHandle connectionHandle, IMRIMetadata info,\n+\t\t\tIMRITransformation transformation) {\n+\t\tsuper(connectionHandle, info);\n+\n+\t\tm_transformation = transformation;\n+\t\tm_mriListener = createListener();\n+\t\tm_subscriptionService = getConnectionHandle().getServiceOrDummy(ISubscriptionService.class);\n+\t\tfor (MRI mri : transformation.getAttributes()) {\n+\t\t\tm_subscriptionService.addMRIValueListener(mri, m_mriListener);\n+\t\t}\n+\t\ttransformation.extendMetadata(connectionHandle.getServiceOrDummy(IMRIMetadataService.class), info);\n+\t}\n+\n+\tprivate IMRIValueListener createListener() {\n+\t\treturn new IMRIValueListener() {\n+\t\t\t@Override\n+\t\t\tpublic void valueChanged(MRIValueEvent event) {\n+\t\t\t\tObject eventValue = m_transformation.createSubscriptionValue(event);\n+\t\t\t\tif (eventValue != IMRITransformation.NO_VALUE) {\n+\t\t\t\t\tMRIValueEvent newEvent = new MRIValueEvent(getMRIMetadata().getMRI(), event.getTimestamp(),\n+\t\t\t\t\t\t\teventValue);\n+\t\t\t\t\tfireAttributeChange(newEvent);\n+\t\t\t\t}\n+\t\t\t}\n+\t\t};\n+\t}\n+\n+\t\/**\n+\t * Unsubscribes to the transformation attributes.\n+\t *\/\n+\tpublic void unregisterSubscription() {\n+\t\tm_subscriptionService.removeMRIValueListener(m_mriListener);\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/TransformationSubscription.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -41,6 +41,6 @@\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.subscription.IMRIValueListener;\n-import org.openjdk.jmc.rjmx.subscription.ISubscriptionService;\n-import org.openjdk.jmc.rjmx.subscription.IUpdatePolicy;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n-import org.openjdk.jmc.rjmx.subscription.MRIValueEvent;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.IUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/UnavailableChildSubscriptions.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/UnavailableChildSubscriptions.java","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n@@ -45,6 +45,6 @@\n-import org.openjdk.jmc.rjmx.ConnectionException;\n-import org.openjdk.jmc.rjmx.IConnectionHandle;\n-import org.openjdk.jmc.rjmx.ServiceNotAvailableException;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanHelperService;\n-import org.openjdk.jmc.rjmx.subscription.IMBeanServerChangeListener;\n-import org.openjdk.jmc.rjmx.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.ConnectionException;\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.ServiceNotAvailableException;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanHelperService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMBeanServerChangeListener;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/UnavailableSubscriptionsRepository.java","additions":8,"deletions":8,"binary":false,"changes":16,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/UnavailableSubscriptionsRepository.java","status":"renamed"},{"patch":"@@ -0,0 +1,140 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.subscription.internal;\n+\n+import java.util.logging.Level;\n+\n+import org.openjdk.jmc.rjmx.common.IConnectionHandle;\n+import org.openjdk.jmc.rjmx.common.RJMXCorePlugin;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataProvider;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIMetadataService;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRISubscription;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.IUpdatePolicy;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+\n+public final class UpdatePolicyToolkit {\n+\n+\tprivate static final String DEFAULT_UPDATE_INTERVAL = \"defaultUpdateInterval\"; \/\/$NON-NLS-1$\n+\n+\tprivate UpdatePolicyToolkit() throws InstantiationException {\n+\t\tthrow new InstantiationException(\"Should not be instantiated!\"); \/\/$NON-NLS-1$\n+\t}\n+\n+\tpublic static int getDefaultUpdateInterval() {\n+\t\treturn 1000;\n+\t}\n+\n+\t\/**\n+\t * Sets the {@link IUpdatePolicy} for an {@link MRI} .\n+\t *\n+\t * @param handle\n+\t *            the connection handle for which to set to policy.\n+\t * @param attributeDescriptor\n+\t *            the descriptor for which to set the policy.\n+\t * @param policy\n+\t *            the policy to set.\n+\t * @throws UnsupportedOperationException\n+\t *             if the policy is unknown to the system.\n+\t *\/\n+\tpublic static void setUpdatePolicy(IConnectionHandle handle, MRI attributeDescriptor, IUpdatePolicy policy) {\n+\t\tIMRIMetadataService metadataService = getMetadataService(handle);\n+\t\tif (metadataService == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tif (policy instanceof OneShotUpdatePolicy) {\n+\t\t\tmetadataService.setMetadata(attributeDescriptor, IMRIMetadataProvider.KEY_UPDATE_TIME, Integer.toString(0));\n+\t\t} else if (policy instanceof SimpleUpdatePolicy) {\n+\t\t\tSimpleUpdatePolicy s = (SimpleUpdatePolicy) policy;\n+\t\t\tmetadataService.setMetadata(attributeDescriptor, IMRIMetadataProvider.KEY_UPDATE_TIME,\n+\t\t\t\t\tInteger.toString(s.getIntervalTime()));\n+\t\t} else if (policy instanceof DefaultUpdatePolicy) {\n+\t\t\tmetadataService.setMetadata(attributeDescriptor, IMRIMetadataProvider.KEY_UPDATE_TIME,\n+\t\t\t\t\tDEFAULT_UPDATE_INTERVAL);\n+\t\t} else {\n+\t\t\tthrow new UnsupportedOperationException(policy.getClass() + \"is not supported!\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\tupdateExistingSubscription(handle, attributeDescriptor);\n+\t}\n+\n+\tprivate static void updateExistingSubscription(IConnectionHandle handle, MRI attributeDescriptor) {\n+\t\tISubscriptionService service = handle.getServiceOrNull(ISubscriptionService.class);\n+\t\tif (service == null) {\n+\t\t\treturn;\n+\t\t}\n+\t\tIMRISubscription attributeSubscription = service.getMRISubscription(attributeDescriptor);\n+\t\tif (attributeSubscription != null) {\n+\t\t\tattributeSubscription.setUpdatePolicy(getUpdatePolicy(handle, attributeDescriptor));\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Returns the update policy for an {@link MRI}. If no policy is set the default policy will be\n+\t * returned.\n+\t *\n+\t * @param handle\n+\t *            the handle for which to get the policy.\n+\t * @param attributeDescriptor\n+\t *            the descriptor for which to set the policy.\n+\t * @return an {@link IUpdatePolicy}.\n+\t *\/\n+\tpublic static IUpdatePolicy getUpdatePolicy(IConnectionHandle handle, MRI attributeDescriptor) {\n+\t\tIMRIMetadataService metadataService = getMetadataService(handle);\n+\t\tif (metadataService != null) {\n+\t\t\treturn getUpdatePolicy(metadataService.getMetadata(attributeDescriptor));\n+\t\t}\n+\t\treturn DefaultUpdatePolicy.newPolicy();\n+\t}\n+\n+\tpublic static IUpdatePolicy getUpdatePolicy(IMRIMetadataProvider info) {\n+\t\tString update = (String) info.getMetadata(IMRIMetadataProvider.KEY_UPDATE_TIME);\n+\t\tif (update != null && !update.equals(DEFAULT_UPDATE_INTERVAL)) {\n+\t\t\ttry {\n+\t\t\t\tint interval = Integer.parseInt(update);\n+\t\t\t\treturn interval == 0 ? OneShotUpdatePolicy.newPolicy() : SimpleUpdatePolicy.newPolicy(interval);\n+\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\tRJMXCorePlugin.getDefault().getLogger().log(Level.WARNING,\n+\t\t\t\t\t\t\"Warning: The update_interval specified for attribute \" + info.getMRI() \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\t+ \" is malformed. The default update time (\" \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\t+ Integer.toString(UpdatePolicyToolkit.getDefaultUpdateInterval())\n+\t\t\t\t\t\t\t\t+ \") will be used instead.\", \/\/$NON-NLS-1$\n+\t\t\t\t\t\te);\n+\t\t\t}\n+\t\t}\n+\t\treturn DefaultUpdatePolicy.newPolicy();\n+\t}\n+\n+\tprivate static IMRIMetadataService getMetadataService(IConnectionHandle handle) {\n+\t\treturn handle.getServiceOrNull(IMRIMetadataService.class);\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/internal\/UpdatePolicyToolkit.java","additions":140,"deletions":0,"binary":false,"changes":140,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.subscription.storage.internal;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Observable;\n+import java.util.Observer;\n+\n+import org.openjdk.jmc.common.collection.BoundedList;\n+import org.openjdk.jmc.rjmx.common.services.IAttributeStorage;\n+import org.openjdk.jmc.rjmx.common.services.MRIDataSeries;\n+import org.openjdk.jmc.rjmx.common.subscription.IMRIValueListener;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+import org.openjdk.jmc.rjmx.common.subscription.MRIValueEvent;\n+import org.openjdk.jmc.common.xydata.DefaultTimestampedData;\n+import org.openjdk.jmc.common.xydata.ITimestampedData;\n+\n+\/**\n+ * Simple attribute storage that contains attribute events.\n+ * <p>\n+ * NOTE: You must synchronize on the storage if you use the dataseries iterator!\n+ *\/\n+public class BufferingAttributeStorage extends Observable implements IAttributeStorage {\n+\n+\tprivate static int preferenceLookupCounter = 0;\n+\tprivate static int currentRetainedEventValues;\n+\n+\tprivate static int lookupRetainedEventValues() {\n+\t\tif (preferenceLookupCounter++ % 1000 == 0) {\n+\t\t\tcurrentRetainedEventValues = 7 * 24 * 3600;\n+\t\t}\n+\t\treturn currentRetainedEventValues;\n+\t}\n+\n+\tprivate final BoundedList<ITimestampedData> cache = new BoundedList<>(lookupRetainedEventValues());\n+\tprivate final MRI mri;\n+\tprivate final ISubscriptionService subscriptionService;\n+\tprivate final IMRIValueListener valueListener = new IMRIValueListener() {\n+\t\t@Override\n+\t\tpublic void valueChanged(MRIValueEvent event) {\n+\t\t\tObject value = event.getValue();\n+\t\t\tif (value instanceof Number) {\n+\t\t\t\tif (lookupRetainedEventValues() != cache.getMaxSize()) {\n+\t\t\t\t\tcache.setMaxSize(Math.max(lookupRetainedEventValues(), Math.max(cache.getSize() - 1000, 1)));\n+\t\t\t\t}\n+\t\t\t\tDefaultTimestampedData data = new DefaultTimestampedData(event.getTimestamp() * 1000 * 1000L,\n+\t\t\t\t\t\t((Number) value).doubleValue());\n+\t\t\t\tcache.add(data);\n+\t\t\t\tsetChanged();\n+\t\t\t\tnotifyObservers(data);\n+\t\t\t}\n+\t\t}\n+\t};\n+\tprivate final List<MRIDataSeries> dataSeries = new ArrayList<>(1);\n+\n+\tpublic BufferingAttributeStorage(MRI attribute, ISubscriptionService subscriptionService) {\n+\t\tmri = attribute;\n+\t\tthis.subscriptionService = subscriptionService;\n+\t\tdataSeries.add(new MRIDataSeries() {\n+\n+\t\t\t@Override\n+\t\t\tpublic Iterator<ITimestampedData> createIterator(long min, long max) {\n+\t\t\t\treturn cache.iterator();\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic MRI getAttribute() {\n+\t\t\t\treturn mri;\n+\t\t\t}\n+\t\t});\n+\n+\t}\n+\n+\t@Override\n+\tpublic long getDataStart() {\n+\t\tITimestampedData first = cache.getFirst();\n+\t\treturn first != null ? first.getX() : Long.MAX_VALUE;\n+\t}\n+\n+\t@Override\n+\tpublic long getDataEnd() {\n+\t\tITimestampedData last = cache.getLast();\n+\t\treturn last != null ? last.getX() : Long.MIN_VALUE;\n+\t}\n+\n+\t@Override\n+\tpublic synchronized void addObserver(Observer o) {\n+\t\tif (countObservers() == 0) {\n+\t\t\tsubscriptionService.addMRIValueListener(mri, valueListener);\n+\t\t}\n+\t\tsuper.addObserver(o);\n+\t}\n+\n+\t@Override\n+\tpublic synchronized void deleteObserver(Observer o) {\n+\t\tsuper.deleteObserver(o);\n+\t\tif (countObservers() == 0) {\n+\t\t\tsubscriptionService.removeMRIValueListener(mri, valueListener);\n+\t\t}\n+\t}\n+\n+\tvoid dispose() {\n+\t\tsubscriptionService.removeMRIValueListener(mri, valueListener);\n+\t}\n+\n+\t@Override\n+\tpublic List<MRIDataSeries> getDataSeries() {\n+\t\treturn dataSeries;\n+\t}\n+\n+\tpublic int getRetainedLength() {\n+\t\treturn cache.getSize();\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/storage\/internal\/BufferingAttributeStorage.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.rjmx.common.subscription.storage.internal;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.openjdk.jmc.rjmx.common.internal.IDisposableService;\n+import org.openjdk.jmc.rjmx.common.services.IAttributeStorage;\n+import org.openjdk.jmc.rjmx.common.services.internal.IAttributeStorageService;\n+import org.openjdk.jmc.rjmx.common.subscription.ISubscriptionService;\n+import org.openjdk.jmc.rjmx.common.subscription.MRI;\n+\n+\/**\n+ * Default implementation of {@link IAttributeStorageService}. Keeps a pretty rigid synchronization\n+ * on the methods.\n+ *\/\n+public class DefaultAttributeStorageService implements IAttributeStorageService, IDisposableService {\n+\n+\tprivate final ISubscriptionService attributeSubscriptionService;\n+\tprivate Map<MRI, BufferingAttributeStorage> activeStorages = new HashMap<>();\n+\n+\t\/**\n+\t * Creates a new {@link IAttributeStorageService}.\n+\t *\n+\t * @param subscriptionService\n+\t *\/\n+\tpublic DefaultAttributeStorageService(ISubscriptionService subscriptionService) {\n+\t\tattributeSubscriptionService = subscriptionService;\n+\t}\n+\n+\t@Override\n+\tpublic synchronized IAttributeStorage getAttributeStorage(MRI mri) {\n+\t\tif (activeStorages == null) {\n+\t\t\tthrow new IllegalStateException(\"Attribute storage service is disposed!\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\tBufferingAttributeStorage storage = activeStorages.get(mri);\n+\t\tif (storage == null) {\n+\t\t\tstorage = new BufferingAttributeStorage(mri, attributeSubscriptionService);\n+\t\t\tactiveStorages.put(mri, storage);\n+\t\t}\n+\t\treturn storage;\n+\t}\n+\n+\t@Override\n+\tpublic int getRetainedLength(MRI mri) {\n+\t\tif (activeStorages == null) {\n+\t\t\tthrow new IllegalStateException(\"Attribute storage service is disposed!\"); \/\/$NON-NLS-1$\n+\t\t}\n+\t\tBufferingAttributeStorage storage = activeStorages.get(mri);\n+\t\tif (storage != null) {\n+\t\t\treturn storage.getRetainedLength();\n+\t\t}\n+\t\treturn 0;\n+\t}\n+\n+\t@Override\n+\tpublic synchronized void dispose() {\n+\t\tfor (BufferingAttributeStorage s : activeStorages.values()) {\n+\t\t\ts.dispose();\n+\t\t}\n+\t\tactiveStorages = null;\n+\t}\n+}\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/storage\/internal\/DefaultAttributeStorageService.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,1 @@\n-package org.openjdk.jmc.rjmx.subscription.internal;\n+package org.openjdk.jmc.rjmx.common.subscription.storage.internal;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/subscription\/storage\/internal\/package-info.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/subscription\/internal\/package-info.java","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-package org.openjdk.jmc.rjmx.util.internal;\n+package org.openjdk.jmc.rjmx.common.util.internal;\n@@ -35,1 +35,1 @@\n-import org.openjdk.jmc.rjmx.services.IAttributeInfo;\n+import org.openjdk.jmc.rjmx.common.services.IAttributeInfo;\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/common\/util\/internal\/SimpleAttributeInfo.java","additions":3,"deletions":3,"binary":false,"changes":6,"previous_filename":"application\/org.openjdk.jmc.rjmx\/src\/main\/java\/org\/openjdk\/jmc\/rjmx\/util\/internal\/SimpleAttributeInfo.java","status":"renamed"},{"patch":"@@ -0,0 +1,43 @@\n+#\n+#  Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+#\n+#  DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+#  The contents of this file are subject to the terms of either the Universal Permissive License \n+#  v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+#   \n+#  or the following license:\n+#   \n+#  Redistribution and use in source and binary forms, with or without modification, are permitted\n+#  provided that the following conditions are met:\n+#   \n+#  1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+#  and the following disclaimer.\n+#   \n+#  2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+#  conditions and the following disclaimer in the documentation and\/or other materials provided with\n+#  the distribution.\n+#   \n+#  3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+#  endorse or promote products derived from this software without specific prior written permission.\n+#\n+#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+#  IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+#  FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+#  CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+#  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+#  WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+#\n+ConnectionException_COULD_NOT_CONNECT_MSG=Could not connect to {0}. Make sure the JVM is running and that you are using the correct protocol in the Service URL ({1}).\n+ConnectionException_COULD_NOT_DETERMINE_IP_MSG=Could not determine IP address for {0}\n+ConnectionException_NAME_NOT_FOUND_MSG=Name cannot be found for {0}. Please check the Service URL ({1}).\n+ConnectionException_UNABLE_TO_CREATE_INITIAL_CONTEXT=Unable to create initial context for {0}. Please check the Service URL ({1}).\n+ConnectionException_MALFORMED_URL_MSG=The URL for {0} is not in a valid format. Please check the Service URL ({1}).\n+ConnectionException_UNABLE_TO_RESOLVE_CREDENTIALS=Unable to resolve the connection credentials for {0}. Problem was: {1}\n+ConnectionException_MSARMI_CHECK_PASSWORD=Unable to connect with msarmi protocol for {0}, using Service URL {1}. Verify that you have entered the correct password.\n+ConnectionException_ATTACH_NOT_SUPPORTED=Attaching to the local JVM {0} is not supported: {1}\n+ConnectionException_UNRESOLVED=Unresolved\n+LABEL_NOT_AVAILABLE=N\/A\n+MBeanOperationsWrapper_DESCRIPTOR=Descriptor\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/common\/messages\/internal\/messages.properties","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/messages.properties","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/messages.properties","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/messages_ja.properties","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/messages_ja.properties","status":"renamed"},{"patch":"@@ -2,1 +2,1 @@\n-#  Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+#  Copyright (c) 2018, 2023 Oracle and\/or its affiliates. All rights reserved.\n","filename":"core\/org.openjdk.jmc.rjmx.common\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/common\/services\/jfr\/internal\/messages_zh_CN.properties","additions":1,"deletions":1,"binary":false,"changes":2,"previous_filename":"application\/org.openjdk.jmc.rjmx.services.jfr\/src\/main\/resources\/org\/openjdk\/jmc\/rjmx\/services\/jfr\/internal\/messages_zh_CN.properties","status":"renamed"},{"patch":"@@ -130,0 +130,1 @@\n+\t\t<module>org.openjdk.jmc.rjmx.common<\/module>\n","filename":"core\/pom.xml","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.common.test.labelingrules;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.text.MessageFormat;\n+\n+import org.junit.Test;\n+import org.openjdk.jmc.common.labelingrules.NameConverter;\n+import org.openjdk.jmc.common.labelingrules.NamingRule;\n+import org.openjdk.jmc.common.util.Environment;\n+\n+@SuppressWarnings(\"nls\")\n+public class NameConverterTest {\n+\tprivate final static Object[] EXAMPLE_VALUES1 = new Object[] {\"1.5\", \"[Unknown]\",\n+\t\t\t\"C:\\\\Java\\\\eclipse3.3.1.1\\\\plugins\\\\org.eclipse.equinox.launcher_1.0.1.R33x_v20070828.jar\",\n+\t\t\tInteger.valueOf(4711)};\n+\tprivate final static Object[] EXAMPLE_VALUES2 = new Object[] {\"1.6\", \"\", \"weblogic.Server\",\n+\t\t\tInteger.valueOf(Environment.getThisPID())};\n+\tprivate final static Object[] EXAMPLE_VALUES3 = new Object[] {\"1.5\", \"\", \"org.jboss.Main\", Integer.valueOf(666)};\n+\n+\t@Test\n+\tpublic void testFormatJBoss() {\n+\t\tNamingRule rule = new NamingRule(\"Test rule\", \"{2}=org.jboss.Main=>[{0}] JBoss ({3})\", 2000, null);\n+\t\tString result = rule.format(EXAMPLE_VALUES3);\n+\t\tassertEquals(\"[1.5] JBoss (\" + MessageFormat.format(\"{0}\", new Object[] {(Integer) EXAMPLE_VALUES3[3]}) + \")\",\n+\t\t\t\tresult);\n+\t}\n+\n+\t@Test\n+\tpublic void testFormatWLS() {\n+\t\tNamingRule rule = new NamingRule(\"Test rule\", \"{2}=weblogic.Server=>[{0}] WebLogic Server ({3})\", 2000, null);\n+\t\tString result = rule.format(EXAMPLE_VALUES2);\n+\t\tassertEquals(\n+\t\t\t\t\"[1.6] WebLogic Server (\" + MessageFormat.format(\"{0}\", new Object[] {Environment.getThisPID()}) + \")\",\n+\t\t\t\tresult);\n+\t}\n+\n+\t@Test\n+\tpublic void testConvertEclipse() {\n+\t\tNamingRule rule = new NamingRule(\"Test rule\",\n+\t\t\t\t\"{2}=.*org.eclipse.equinox.launcher_1.0.1.R33x.*=>[{0}] Eclipse 3.3 ({3})\", 2000, null);\n+\t\tString result = rule.format(EXAMPLE_VALUES1);\n+\t\tassertEquals(\n+\t\t\t\t\"[1.5] Eclipse 3.3 (\" + MessageFormat.format(\"{0}\", new Object[] {(Integer) EXAMPLE_VALUES1[3]}) + \")\",\n+\t\t\t\tresult);\n+\t}\n+\n+\t@Test\n+\tpublic void testConvertJBoss() {\n+\t\tNamingRule rule = new NamingRule(\"Test rule\", \"{2}=org.jboss.Main=>[{0}] JBoss ({3})\", 2000, null);\n+\t\tString result = rule.format(EXAMPLE_VALUES3);\n+\t\tassertEquals(\"[1.5] JBoss (\" + MessageFormat.format(\"{0}\", new Object[] {(Integer) EXAMPLE_VALUES3[3]}) + \")\",\n+\t\t\t\tresult);\n+\t}\n+\n+\t@Test\n+\tpublic void testAddNamingRule() {\n+\t\tNameConverter nc = new NameConverter();\n+\t\tNamingRule rule = new NamingRule(\"Test rule\", \"{2} = .*MyApp.* => MyCoolApp ({3})\", 2000, null);\n+\t\tnc.addNamingRule(rule);\n+\t\tassertTrue(nc.getRules().contains(rule));\n+\t}\n+}\n","filename":"core\/tests\/org.openjdk.jmc.common.test\/src\/main\/java\/org\/openjdk\/jmc\/common\/test\/labelingrules\/NameConverterTest.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}