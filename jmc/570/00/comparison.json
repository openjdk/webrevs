{"files":[{"patch":"@@ -13,1 +13,3 @@\n- org.openjdk.jmc.ui\n+ org.openjdk.jmc.ui,\n+ org.jolokia.service.discovery;bundle-version=\"2.0.2\",\n+ org.jolokia.server.core;bundle-version=\"2.0.2\"\n","filename":"application\/org.openjdk.jmc.jolokia\/META-INF\/MANIFEST.MF","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,0 +44,15 @@\n+      <extension\n+            point=\"org.eclipse.ui.preferencePages\">\n+         <page\n+               category=\"org.openjdk.jmc.browser.preferences.BrowserPreferencePage\"\n+               class=\"org.openjdk.jmc.jolokia.preferences.JolokiaPreferencePage\"\n+               id=\"org.openjdk.jmc.jolokia.preferences.JolokiaPreferencePage\"\n+               name=\"%page.name\">\n+         <\/page>\n+      <\/extension>\n+      <extension\n+            point=\"org.eclipse.core.runtime.preferences\">\n+         <initializer\n+               class=\"org.openjdk.jmc.jolokia.preferences.PreferenceInitializer\">\n+         <\/initializer>\n+      <\/extension>\n","filename":"application\/org.openjdk.jmc.jolokia\/plugin.xml","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.openjdk.jmc.rjmx.descriptorprovider.AbstractDescriptorProvider;\n+import org.openjdk.jmc.rjmx.descriptorprovider.IDescriptorListener;\n+\n+\/**\n+ * The {@code AbstractCachedDescriptorProvider} keeps a list of identified JVMs that can be\n+ * refreshed in the background by some means of discovering JVMs. Listeners will be notified of any\n+ * changes.\n+ *\/\n+public abstract class AbstractCachedDescriptorProvider extends AbstractDescriptorProvider {\n+\n+\tprivate static final long LOCAL_REFRESH_INTERVAL = 20000;\n+\tprivate Scanner scanner;\n+\tprivate Thread scannerThread;\n+\t\/**\n+\t * Map<UUID, IServerDescriptor>\n+\t *\/\n+\tprivate final Map<String, ServerConnectionDescriptor> knownDescriptors = new HashMap<>();\n+\n+\t\/**\n+\t * This is where we periodically scan and report deltas to the listeners.\n+\t *\/\n+\tprivate class Scanner implements Runnable {\n+\t\tboolean isRunning;\n+\n+\t\t@Override\n+\t\tpublic void run() {\n+\t\t\tisRunning = true;\n+\t\t\twhile (isRunning) {\n+\t\t\t\ttry {\n+\t\t\t\t\tscan();\n+\t\t\t\t\tThread.sleep(LOCAL_REFRESH_INTERVAL);\n+\t\t\t\t} catch (InterruptedException ignore) {\n+\t\t\t\t\t\/\/ Don't mind being interrupted.\n+\t\t\t\t}\n+\t\t\t}\n+\t\t}\n+\n+\t\t\/**\n+\t\t * Marks this scanner as terminated.\n+\t\t *\/\n+\t\tpublic void shutdown() {\n+\t\t\tisRunning = false;\n+\t\t}\n+\n+\t\tprotected void scan() {\n+\t\t\tMap<String, ServerConnectionDescriptor> newOnes = discoverJvms();\n+\n+\t\t\tsynchronized (knownDescriptors) {\n+\t\t\t\t\/\/ Remove stale ones...\n+\t\t\t\tfor (Iterator<Entry<String, ServerConnectionDescriptor>> entryIterator = knownDescriptors.entrySet()\n+\t\t\t\t\t\t.iterator(); entryIterator.hasNext();) {\n+\t\t\t\t\tEntry<String, ServerConnectionDescriptor> entry = entryIterator.next();\n+\t\t\t\t\tif (newOnes.containsKey(entry.getKey())) {\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tentryIterator.remove();\n+\t\t\t\t\tonDescriptorRemoved(entry.getKey());\n+\t\t\t\t}\n+\n+\t\t\t\t\/\/ Add new ones...\n+\t\t\t\tfor (Entry<String, ServerConnectionDescriptor> entry : newOnes.entrySet()) {\n+\t\t\t\t\tif (knownDescriptors.containsKey(entry.getKey())) {\n+\t\t\t\t\t\tcontinue;\n+\t\t\t\t\t}\n+\t\t\t\t\tonDescriptorDetected(entry.getValue(), entry.getValue().getPath(), entry.getValue().serviceUrl(),\n+\t\t\t\t\t\t\tentry.getValue());\n+\t\t\t\t}\n+\t\t\t\tknownDescriptors.clear();\n+\t\t\t\tknownDescriptors.putAll(newOnes);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Sets up the thread.\n+\t *\/\n+\tprivate void initialize() {\n+\t\tscanner = new Scanner();\n+\t\tscannerThread = new Thread(scanner, getName()); \/\/ $NON-NLS-1$\n+\t\tscannerThread.start();\n+\t}\n+\n+\tprotected abstract boolean isEnabled();\n+\n+\tprotected abstract Map<String, ServerConnectionDescriptor> discoverJvms();\n+\n+\t@Override\n+\tpublic void addDescriptorListener(IDescriptorListener l) {\n+\t\tsynchronized (m_descriptorListeners) {\n+\t\t\tif (m_descriptorListeners.size() == 0) {\n+\t\t\t\tsuper.addDescriptorListener(l);\n+\t\t\t\tinitialize();\n+\t\t\t} else {\n+\t\t\t\tsuper.addDescriptorListener(l);\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic void removeDescriptorListener(IDescriptorListener l) {\n+\t\tsynchronized (m_descriptorListeners) {\n+\t\t\tsuper.removeDescriptorListener(l);\n+\t\t\tif (m_descriptorListeners.size() == 0 && scanner != null) {\n+\t\t\t\tscanner.shutdown();\n+\t\t\t\tscannerThread.interrupt();\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\t\/**\n+\t * Shuts down the scanner thread.\n+\t *\/\n+\tpublic void shutdown() {\n+\t\tif (scanner != null) {\n+\t\t\tscanner.shutdown();\n+\t\t}\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/AbstractCachedDescriptorProvider.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -48,2 +48,1 @@\n-\t\t\tthrow new MalformedURLException(Messages\n-\t\t\t\t\t.getString(\"JmcJolokiaJmxConnectionProvider.JMC_JOLOKIA_JMX_CONNECTION_PROVIDER_EXCEPTION_MSG\")); \/\/$NON-NLS-1$\n+\t\t\tthrow new MalformedURLException(Messages.JmcJolokiaJmxConnectionProvider_UnsupportedUrlMessage);\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaJmxConnectionProvider.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,12 @@\n+import java.util.Arrays;\n+import java.util.TreeSet;\n+\n+import org.jolokia.server.core.config.ConfigKey;\n+import org.jolokia.server.core.config.StaticConfiguration;\n+import org.jolokia.server.core.detector.ServerDetector;\n+import org.jolokia.server.core.restrictor.AllowAllRestrictor;\n+import org.jolokia.server.core.service.JolokiaServiceManagerFactory;\n+import org.jolokia.server.core.service.api.JolokiaContext;\n+import org.jolokia.server.core.service.api.JolokiaServiceManager;\n+import org.jolokia.server.core.service.impl.JulLogHandler;\n+import org.openjdk.jmc.jolokia.preferences.PreferenceConstants;\n@@ -38,1 +50,1 @@\n-public class JmcJolokiaPlugin extends MCAbstractUIPlugin {\n+public class JmcJolokiaPlugin extends MCAbstractUIPlugin implements JolokiaDiscoverySettings, PreferenceConstants {\n@@ -51,0 +63,33 @@\n+\n+\t@Override\n+\tpublic boolean shouldRunDiscovery() {\n+\t\treturn getPreferenceStore().getBoolean(P_SCAN);\n+\t}\n+\n+\t\/**\n+\t * @return a very basic Jolokia context to satisfy discovery. We are not interested in the\n+\t *         server side aspects here.\n+\t *\/\n+\t@Override\n+\tpublic JolokiaContext getJolokiaContext() {\n+\t\tStaticConfiguration configuration = new StaticConfiguration(ConfigKey.AGENT_ID, \"jmc\");\/\/$NON-NLS-1$\n+\t\tJolokiaServiceManager serviceManager = JolokiaServiceManagerFactory.createJolokiaServiceManager(configuration,\n+\t\t\t\tnew JulLogHandler(PLUGIN_ID), new AllowAllRestrictor(),\n+\t\t\t\t() -> new TreeSet<ServerDetector>(Arrays.asList(ServerDetector.FALLBACK)));\n+\t\treturn serviceManager.start();\n+\t}\n+\n+\t@Override\n+\tpublic String getMulticastGroup() {\n+\t\treturn this.getPreferenceStore().getString(P_MULTICAST_GROUP);\n+\t}\n+\n+\t@Override\n+\tpublic int getMulticastPort() {\n+\t\treturn this.getPreferenceStore().getInt(P_MULTICAST_PORT);\n+\t}\n+\n+\t@Override\n+\tpublic int getDiscoveryTimeout() {\n+\t\treturn this.getPreferenceStore().getInt(P_DISCOVER_TIMEOUT);\n+\t}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JmcJolokiaPlugin.java","additions":46,"deletions":1,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -0,0 +1,203 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.lang.management.ManagementFactory;\n+import java.net.MalformedURLException;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import javax.management.Attribute;\n+import javax.management.AttributeList;\n+import javax.management.InstanceNotFoundException;\n+import javax.management.MalformedObjectNameException;\n+import javax.management.ObjectName;\n+import javax.management.openmbean.CompositeDataSupport;\n+import javax.management.openmbean.TabularDataSupport;\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n+import org.openjdk.jmc.common.jvm.Connectable;\n+import org.openjdk.jmc.common.jvm.JVMArch;\n+import org.openjdk.jmc.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.common.jvm.JVMType;\n+\n+\/**\n+ * Provide data about JVMs accessed over Jolokia for the JVM browser\n+ *\/\n+public class JolokiaAgentDescriptor implements ServerConnectionDescriptor {\n+\n+\tpublic static final JVMDescriptor NULL_DESCRIPTOR = new JVMDescriptor(null, null, null, null, null, null, null,\n+\t\t\tnull, false, Connectable.UNKNOWN);\n+\tprivate final JMXServiceURL serviceUrl;\n+\tprivate final Map<String, ?> agentData;\n+\tprivate final JVMDescriptor jvmDescriptor;\n+\n+\tpublic JolokiaAgentDescriptor(Map<String, ?> agentData, JVMDescriptor jvmDescriptor)\n+\t\t\tthrows URISyntaxException, MalformedURLException {\n+\t\tsuper();\n+\t\tURI uri = new URI((String) agentData.get(\"url\")); \/\/$NON-NLS-1$\n+\t\tthis.serviceUrl = new JMXServiceURL(\n+\t\t\t\tString.format(\"service:jmx:jolokia:\/\/%s:%s%s\", uri.getHost(), uri.getPort(), uri.getPath())); \/\/$NON-NLS-1$\n+\t\tthis.agentData = agentData;\n+\t\tthis.jvmDescriptor = jvmDescriptor;\n+\t}\n+\n+\tJMXServiceURL getServiceUrl() {\n+\t\treturn serviceUrl;\n+\t}\n+\n+\t@Override\n+\tpublic String getGUID() {\n+\t\treturn String.valueOf(agentData.get(\"agent_id\")); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Override\n+\tpublic String getDisplayName() {\n+\t\treturn String.valueOf(agentData.get(\"agent_id\")); \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Override\n+\tpublic JVMDescriptor getJvmInfo() {\n+\t\treturn this.jvmDescriptor;\n+\t}\n+\n+\t\/**\n+\t * Best effort to extract JVM information from a connection if everything works. Can be adjusted\n+\t * to support different flavors of JVM.\n+\t *\/\n+\tpublic static JVMDescriptor attemptToGetJvmInfo(RemoteJmxAdapter adapter) {\n+\n+\t\ttry {\n+\t\t\tAttributeList attributes = adapter.getAttributes(new ObjectName(ManagementFactory.RUNTIME_MXBEAN_NAME),\n+\t\t\t\t\tnew String[] {\"Pid\", \"Name\", \"InputArguments\", \"SystemProperties\"}); \/\/$NON-NLS-1$ \/\/$NON-NLS-2$ \/\/$NON-NLS-3$ \/\/$NON-NLS-4$\n+\t\t\tInteger pid = null;\n+\t\t\tString arguments = null, javaCommand = null, javaVersion = null, vmName = null, vmVendor = null;\n+\t\t\tboolean isDebug = false;\n+\t\t\tJVMType type = JVMType.UNKNOWN;\n+\t\t\tJVMArch arch = JVMArch.UNKNOWN;\n+\t\t\tfor (Attribute attribute : attributes.asList()) {\n+\t\t\t\t\/\/ newer JVM have pid as separate attribute, older have to parse from name\n+\t\t\t\tif (attribute.getName().equalsIgnoreCase(\"Pid\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\ttry {\n+\t\t\t\t\t\tpid = Integer.valueOf(String.valueOf(attribute.getValue()));\n+\t\t\t\t\t} catch (NumberFormatException ignore) {\n+\t\t\t\t\t}\n+\t\t\t\t} else if (attribute.getName().equalsIgnoreCase(\"Name\") && pid == null) { \/\/$NON-NLS-1$\n+\t\t\t\t\tString pidAndHost = String.valueOf(attribute.getValue());\n+\t\t\t\t\tint separator = pidAndHost.indexOf('@');\n+\t\t\t\t\tif (separator > 0) {\n+\t\t\t\t\t\ttry {\n+\t\t\t\t\t\t\tpid = Integer.valueOf(pidAndHost.substring(0, separator));\n+\t\t\t\t\t\t} catch (NumberFormatException e) {\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\t\t\t\t} else if (attribute.getName().equalsIgnoreCase(\"InputArguments\")) { \/\/$NON-NLS-1$\n+\n+\t\t\t\t\tif (attribute.getValue() instanceof String[]) {\n+\t\t\t\t\t\targuments = Arrays.toString((String[]) attribute.getValue());\n+\t\t\t\t\t} else {\n+\t\t\t\t\t\targuments = String.valueOf(attribute.getValue());\n+\t\t\t\t\t}\n+\t\t\t\t\tif (arguments.contains(\"-agentlib:jdwp\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\tisDebug = true;\n+\t\t\t\t\t}\n+\t\t\t\t} else if (attribute.getName().equalsIgnoreCase(\"SystemProperties\") \/\/$NON-NLS-1$\n+\t\t\t\t\t\t&& attribute.getValue() instanceof TabularDataSupport) {\n+\t\t\t\t\tTabularDataSupport systemProperties = (TabularDataSupport) attribute.getValue();\n+\n+\t\t\t\t\t\/\/ quite clumsy: iterate over properties as we need to use the exact key, which is non trivial\n+\t\t\t\t\t\/\/ to reproduce\n+\t\t\t\t\tfor (Object entry : systemProperties.values()) {\n+\t\t\t\t\t\tString key = ((CompositeDataSupport) entry).get(\"key\").toString(); \/\/$NON-NLS-1$\n+\t\t\t\t\t\tString value = ((CompositeDataSupport) entry).get(\"value\").toString(); \/\/$NON-NLS-1$\n+\t\t\t\t\t\tif (key.equalsIgnoreCase(\"sun.management.compiler\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tif (value.toLowerCase().contains(\"hotspot\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\ttype = JVMType.HOTSPOT;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"sun.arch.data.model\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tString archIndicator = value;\n+\t\t\t\t\t\t\tif (archIndicator.contains(\"64\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\tarch = JVMArch.BIT64;\n+\t\t\t\t\t\t\t} else if (archIndicator.contains(\"32\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\t\tarch = JVMArch.BIT32;\n+\t\t\t\t\t\t\t}\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"sun.java.command\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tjavaCommand = value;\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"java.version\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tjavaVersion = value;\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"java.vm.name\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tvmName = value;\n+\t\t\t\t\t\t} else if (key.equalsIgnoreCase(\"java.vm.vendor\")) { \/\/$NON-NLS-1$\n+\t\t\t\t\t\t\tvmVendor = value;\n+\t\t\t\t\t\t}\n+\t\t\t\t\t}\n+\n+\t\t\t\t}\n+\n+\t\t\t}\n+\t\t\treturn new JVMDescriptor(javaVersion, type, arch, javaCommand, arguments, vmName, vmVendor, pid, isDebug,\n+\t\t\t\t\tConnectable.UNKNOWN);\n+\n+\t\t} catch (RuntimeException | IOException | InstanceNotFoundException | MalformedObjectNameException ignore) {\n+\t\t\treturn NULL_DESCRIPTOR;\n+\t\t}\n+\n+\t}\n+\n+\t@Override\n+\tpublic JMXServiceURL createJMXServiceURL() throws IOException {\n+\t\treturn serviceUrl;\n+\t}\n+\n+\t@Override\n+\tpublic Map<String, Object> getEnvironment() {\n+\t\treturn new HashMap<>();\n+\t}\n+\n+\t@Override\n+\tpublic String getPath() {\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic JMXServiceURL serviceUrl() {\n+\t\treturn this.serviceUrl;\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaAgentDescriptor.java","additions":203,"deletions":0,"binary":false,"changes":203,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.jolokia.client.jmxadapter.RemoteJmxAdapter;\n+import org.jolokia.service.discovery.JolokiaDiscovery;\n+import org.openjdk.jmc.common.jvm.JVMDescriptor;\n+import org.openjdk.jmc.jolokia.preferences.PreferenceConstants;\n+\n+\/**\n+ * Add found Jolokia instances to the JVM browser using the Jolokia discovery mechanism.\n+ * https:\/\/jolokia.org\/reference\/html\/protocol.html#discovery\n+ *\/\n+public class JolokiaDiscoveryListener extends AbstractCachedDescriptorProvider implements PreferenceConstants {\n+\n+\tJolokiaDiscoverySettings settings;\n+\n+\tpublic JolokiaDiscoveryListener(JolokiaDiscoverySettings settings) {\n+\t\tthis.settings = settings;\n+\t}\n+\n+\tpublic JolokiaDiscoveryListener() {\n+\t\tthis(JmcJolokiaPlugin.getDefault());\n+\t}\n+\n+\t@Override\n+\tprotected Map<String, ServerConnectionDescriptor> discoverJvms() {\n+\t\tMap<String, ServerConnectionDescriptor> found = new HashMap<>();\n+\t\tif (!this.settings.shouldRunDiscovery()) {\n+\t\t\treturn found;\n+\t\t}\n+\t\ttry {\n+\t\t\tJolokiaDiscovery jolokiaDiscovery = new JolokiaDiscovery();\n+\t\t\tjolokiaDiscovery.init(this.settings.getJolokiaContext());\n+\t\t\tfor (Object object : jolokiaDiscovery.lookupAgentsWithTimeoutAndMulticastAddress(\n+\t\t\t\t\tthis.settings.getDiscoveryTimeout(), this.settings.getMulticastGroup(),\n+\t\t\t\t\tthis.settings.getMulticastPort())) {\n+\t\t\t\ttry {\n+\n+\t\t\t\t\t@SuppressWarnings(\"unchecked\")\n+\t\t\t\t\tMap<String, ?> response = (Map<String, ?>) object;\n+\t\t\t\t\tJVMDescriptor jvmInfo;\n+\t\t\t\t\ttry {\/\/ if it is connectable, see if we can get info from connection\n+\t\t\t\t\t\tjvmInfo = JolokiaAgentDescriptor\n+\t\t\t\t\t\t\t\t.attemptToGetJvmInfo(new RemoteJmxAdapter(String.valueOf(response.get(\"url\")))); \/\/$NON-NLS-1$\n+\t\t\t\t\t} catch (Exception ignore) {\n+\t\t\t\t\t\tjvmInfo = JolokiaAgentDescriptor.NULL_DESCRIPTOR;\n+\t\t\t\t\t}\n+\t\t\t\t\tJolokiaAgentDescriptor agentDescriptor = new JolokiaAgentDescriptor(response, jvmInfo);\n+\t\t\t\t\tfound.put(agentDescriptor.getGUID(), agentDescriptor);\n+\n+\t\t\t\t} catch (URISyntaxException ignore) {\n+\t\t\t\t}\n+\t\t\t}\n+\t\t} catch (IOException ignore) {\n+\t\t}\n+\t\treturn found;\n+\t}\n+\n+\t@Override\n+\tpublic String getDescription() {\n+\t\treturn Messages.JolokiaDiscoveryListener_Description;\n+\t}\n+\n+\t@Override\n+\tpublic String getName() {\n+\t\treturn \"jolokia\"; \/\/$NON-NLS-1$\n+\t}\n+\n+\t@Override\n+\tprotected boolean isEnabled() {\n+\t\treturn true;\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaDiscoveryListener.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,16 @@\n+package org.openjdk.jmc.jolokia;\n+\n+import org.jolokia.server.core.service.api.JolokiaContext;\n+\n+public interface JolokiaDiscoverySettings {\n+\tboolean shouldRunDiscovery();\n+\n+\tJolokiaContext getJolokiaContext();\n+\n+\tString getMulticastGroup();\n+\n+\tint getMulticastPort();\n+\n+\tint getDiscoveryTimeout();\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaDiscoverySettings.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n@@ -3,2 +36,1 @@\n-import java.util.MissingResourceException;\n-import java.util.ResourceBundle;\n+import org.eclipse.osgi.util.NLS;\n@@ -6,1 +38,1 @@\n-public class Messages {\n+public class Messages extends NLS {\n@@ -8,4 +40,5 @@\n-\n-\tprivate static final ResourceBundle RESOURCE_BUNDLE = ResourceBundle.getBundle(BUNDLE_NAME);\n-\n-\tprivate Messages() {\n+\tpublic static String JmcJolokiaJmxConnectionProvider_UnsupportedUrlMessage;\n+\tpublic static String JolokiaDiscoveryListener_Description;\n+\tstatic {\n+\t\t\/\/ initialize resource bundle\n+\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n@@ -14,6 +47,1 @@\n-\tpublic static String getString(String key) {\n-\t\ttry {\n-\t\t\treturn RESOURCE_BUNDLE.getString(key);\n-\t\t} catch (MissingResourceException e) {\n-\t\t\treturn '!' + key + '!';\n-\t\t}\n+\tprivate Messages() {\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/Messages.java","additions":41,"deletions":13,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -0,0 +1,48 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia;\n+\n+import javax.management.remote.JMXServiceURL;\n+\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+\n+\/**\n+ * Describes the JVM and how to connect to it.\n+ *\/\n+public interface ServerConnectionDescriptor extends IServerDescriptor, IConnectionDescriptor {\n+\tString getPath();\n+\n+\tJMXServiceURL serviceUrl();\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/ServerConnectionDescriptor.java","additions":48,"deletions":0,"binary":false,"changes":48,"status":"added"},{"patch":"@@ -1,1 +1,2 @@\n-JmcJolokiaJmxConnectionProvider.JMC_JOLOKIA_JMX_CONNECTION_PROVIDER_EXCEPTION_MSG=I only serve Jolokia connections\n+JmcJolokiaJmxConnectionProvider_UnsupportedUrlMessage=I only serve Jolokia connections\n+JolokiaDiscoveryListener_Description=Uses Jolokia Discovery to report any active JVMs with Jolokia broadcasting\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/messages.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,105 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia.preferences;\n+\n+import java.util.Map;\n+import java.util.WeakHashMap;\n+\n+import org.eclipse.jface.preference.BooleanFieldEditor;\n+import org.eclipse.jface.preference.FieldEditor;\n+import org.eclipse.jface.preference.FieldEditorPreferencePage;\n+import org.eclipse.jface.preference.IntegerFieldEditor;\n+import org.eclipse.jface.preference.StringFieldEditor;\n+import org.eclipse.swt.widgets.Control;\n+import org.eclipse.swt.widgets.Text;\n+import org.eclipse.ui.IWorkbench;\n+import org.eclipse.ui.IWorkbenchPreferencePage;\n+import org.openjdk.jmc.jolokia.JmcJolokiaPlugin;\n+\n+public class JolokiaPreferencePage extends FieldEditorPreferencePage\n+\t\timplements IWorkbenchPreferencePage, PreferenceConstants {\n+\n+\tprivate Map<Control, Object> dependantControls = new WeakHashMap<>();\n+\n+\tpublic JolokiaPreferencePage() {\n+\t\tsuper(GRID);\n+\t\tsetPreferenceStore(JmcJolokiaPlugin.getDefault().getPreferenceStore());\n+\t\tsetDescription(Messages.JolokiaPreferencePage_Description);\n+\t}\n+\n+\tpublic void createFieldEditors() {\n+\t\tBooleanFieldEditor mainEnabler = new BooleanFieldEditor(P_SCAN, Messages.JolokiaPreferencePage_Label,\n+\t\t\t\tgetFieldEditorParent()) {\n+\t\t\t@Override\n+\t\t\tprotected void valueChanged(boolean oldValue, boolean newValue) {\n+\t\t\t\tsuper.valueChanged(oldValue, newValue);\n+\t\t\t\tenableDependantFields(newValue);\n+\t\t\t}\n+\t\t};\n+\t\taddField(mainEnabler);\n+\t\tthis.addTextField(new StringFieldEditor(P_MULTICAST_GROUP, Messages.JolokiaPreferencePage_MulticastGroupLabel,\n+\t\t\t\tgetFieldEditorParent()), Messages.JolokiaPreferencePage_MulticastGroupTooltip);\n+\t\tthis.addTextField(new IntegerFieldEditor(P_MULTICAST_PORT, Messages.JolokiaPreferencePage_MulticastPortLabel,\n+\t\t\t\tgetFieldEditorParent()), Messages.JolokiaPreferencePage_MulticastPortTooltip);\n+\t\tthis.addDependantField(new IntegerFieldEditor(P_DISCOVER_TIMEOUT,\n+\t\t\t\tMessages.JolokiaPreferencePage_DiscoverTimeoutLabel, getFieldEditorParent()), getControl());\n+\t}\n+\n+\t\/*\n+\t * (non-Javadoc)\n+\t * \n+\t * @see org.eclipse.ui.IWorkbenchPreferencePage#init(org.eclipse.ui.IWorkbench)\n+\t *\/\n+\tpublic void init(IWorkbench workbench) {\n+\t}\n+\n+\tprivate void addTextField(StringFieldEditor field, String tooltip) {\n+\t\tText textControl = field.getTextControl(getFieldEditorParent());\n+\t\tthis.addDependantField(field, textControl);\n+\t\ttextControl.setToolTipText(tooltip);\n+\t\tfield.getLabelControl(getFieldEditorParent()).setToolTipText(tooltip);\n+\n+\t}\n+\n+\tprivate void addDependantField(FieldEditor field, Control control) {\n+\t\tthis.dependantControls.put(control, null);\n+\t\taddField(field);\n+\t}\n+\n+\tprivate void enableDependantFields(boolean enabled) {\n+\t\tfor (Control field : this.dependantControls.keySet()) {\n+\t\t\tfield.setEnabled(enabled);\n+\t\t}\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/JolokiaPreferencePage.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia.preferences;\n+\n+import org.eclipse.osgi.util.NLS;\n+\n+public class Messages extends NLS {\n+\tprivate static final String BUNDLE_NAME = \"org.openjdk.jmc.jolokia.preferences.messages\"; \/\/$NON-NLS-1$\n+\tpublic static String JolokiaPreferencePage_Description;\n+\tpublic static String JolokiaPreferencePage_DiscoverTimeoutLabel;\n+\tpublic static String JolokiaPreferencePage_Label;\n+\tpublic static String JolokiaPreferencePage_MulticastGroupLabel;\n+\tpublic static String JolokiaPreferencePage_MulticastGroupTooltip;\n+\tpublic static String JolokiaPreferencePage_MulticastPortLabel;\n+\tpublic static String JolokiaPreferencePage_MulticastPortTooltip;\n+\tstatic {\n+\t\t\/\/ initialize resource bundle\n+\t\tNLS.initializeMessages(BUNDLE_NAME, Messages.class);\n+\t}\n+\n+\tprivate Messages() {\n+\t}\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/Messages.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -0,0 +1,45 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia.preferences;\n+\n+\/**\n+ * Constant definitions for plug-in preferences.\n+ *\/\n+public interface PreferenceConstants {\n+\n+\tpublic static final String P_SCAN = \"discoverJolokia\"; \/\/$NON-NLS-1$\n+\tpublic static final String P_MULTICAST_GROUP = \"multicastGroup\";\/\/$NON-NLS-1$\n+\tpublic static final String P_MULTICAST_PORT = \"multicastPort\";\/\/$NON-NLS-1$\n+\tpublic static final String P_DISCOVER_TIMEOUT = \"discoverTimeout\";\/\/$NON-NLS-1$ \n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/PreferenceConstants.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"added"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Kantega AS. All rights reserved.\n+ * \n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ * \n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ * \n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ * \n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ * \n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n+package org.openjdk.jmc.jolokia.preferences;\n+\n+import org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer;\n+import org.eclipse.jface.preference.IPreferenceStore;\n+import org.openjdk.jmc.jolokia.JmcJolokiaPlugin;\n+import org.jolokia.server.core.config.ConfigKey;\n+\n+\/**\n+ * Class used to initialize default preference values.\n+ *\/\n+public class PreferenceInitializer extends AbstractPreferenceInitializer implements PreferenceConstants {\n+\n+\t\/*\n+\t * (non-Javadoc)\n+\t * \n+\t * @see org.eclipse.core.runtime.preferences.AbstractPreferenceInitializer#\n+\t * initializeDefaultPreferences()\n+\t *\/\n+\tpublic void initializeDefaultPreferences() {\n+\t\tIPreferenceStore store = JmcJolokiaPlugin.getDefault().getPreferenceStore();\n+\t\tstore.setDefault(P_SCAN, false);\n+\t\tstore.setDefault(P_MULTICAST_GROUP, ConfigKey.MULTICAST_GROUP.getDefaultValue());\n+\t\tstore.setDefault(P_MULTICAST_PORT, ConfigKey.MULTICAST_PORT.getDefaultValue());\n+\t\tstore.setDefault(P_DISCOVER_TIMEOUT, 1000);\n+\t}\n+\n+}\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/PreferenceInitializer.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,11 @@\n+JolokiaPreferencePage_Description=Discover Jolokia Agents\\n\\nhttps:\/\/jolokia.org\/reference\/html\/protocol.html\\#discovery\\n\\n\n+JolokiaPreferencePage_DiscoverTimeoutLabel=Discovery timeout (ms)\n+JolokiaPreferencePage_Label=&Discover Jolokia agents\n+JolokiaPreferencePage_MulticastGroupLabel=Multicast Group\n+JolokiaPreferencePage_MulticastGroupTooltip=Multicast group used by Jolokia discovery to detect instances.\n+JolokiaPreferencePage_MulticastPortLabel=Multicast Port\n+JolokiaPreferencePage_MulticastPortTooltip=Port number used by Jolokia discovery to detect instances.\n+JolokiaPreferencePage.MulticastAddressLabel=Jolokia Discovery Multicast Address.\n+JolokiaPreferencePage.MulticastAddressTooltip=Address used for broadcast messages that available Jolokia agents should respond to.\n+JolokiaPreferencePage.MulticastPortLabel=Jolokia Discovery Multicast Address.\n+JolokiaPreferencePage.MulticastPortTooltip=Port used for broadcast messages that available Jolokia agents should respond to.\n","filename":"application\/org.openjdk.jmc.jolokia\/src\/main\/java\/org\/openjdk\/jmc\/jolokia\/preferences\/messages.properties","additions":11,"deletions":0,"binary":false,"changes":11,"status":"added"},{"patch":"@@ -16,1 +16,2 @@\n- org.hamcrest\n+ org.hamcrest,\n+ org.osgi.service.servlet;bundle-version=\"2.0.0\"\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/META-INF\/MANIFEST.MF","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-\t\t<jolokia.agent.version>1.7.2<\/jolokia.agent.version>\n+\t\t<jolokia.agent.version>2.0.2<\/jolokia.agent.version>\n@@ -60,1 +60,1 @@\n-\t\t\t<artifactId>jolokia-jvm<\/artifactId>\n+\t\t\t<artifactId>jolokia-agent-jvm<\/artifactId>\n@@ -63,0 +63,1 @@\n+\t\t\t<classifier>javaagent<\/classifier>\n@@ -77,1 +78,1 @@\n-\t\t\t\t\t\t-javaagent:${settings.localRepository}\/org\/jolokia\/jolokia-jvm\/${jolokia.agent.version}\/jolokia-jvm-${jolokia.agent.version}.jar=port=0,discover=true<\/argLine>\n+\t\t\t\t\t\t-javaagent:${settings.localRepository}\/org\/jolokia\/jolokia-agent-jvm\/${jolokia.agent.version}\/jolokia-agent-jvm-${jolokia.agent.version}-javaagent.jar=port=0,discoveryEnabled=true<\/argLine>\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/pom.xml","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import java.util.TreeSet;\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -61,0 +63,9 @@\n+import org.jolokia.server.core.config.ConfigKey;\n+import org.jolokia.server.core.config.StaticConfiguration;\n+import org.jolokia.server.core.detector.ServerDetector;\n+import org.jolokia.server.core.restrictor.AllowAllRestrictor;\n+import org.jolokia.server.core.service.JolokiaServiceManagerFactory;\n+import org.jolokia.server.core.service.api.JolokiaContext;\n+import org.jolokia.server.core.service.api.JolokiaServiceManager;\n+import org.jolokia.server.core.service.impl.StdoutLogHandler;\n+import org.junit.After;\n@@ -64,0 +75,5 @@\n+import org.openjdk.jmc.common.IDescribable;\n+import org.openjdk.jmc.jolokia.preferences.PreferenceConstants;\n+import org.openjdk.jmc.rjmx.common.IConnectionDescriptor;\n+import org.openjdk.jmc.rjmx.common.IServerDescriptor;\n+import org.openjdk.jmc.rjmx.descriptorprovider.IDescriptorListener;\n@@ -69,1 +85,1 @@\n-public class JolokiaTest {\n+public class JolokiaTest implements JolokiaDiscoverySettings, PreferenceConstants {\n@@ -77,0 +93,2 @@\n+\tprivate JolokiaDiscoveryListener discoveryListener;\n+\n@@ -126,2 +144,2 @@\n-\t\tObjectName objectName = new ObjectName(\"jolokia:type=Config\");\n-\t\tString attribute = \"Debug\";\n+\t\tObjectName objectName = new ObjectName(\"java.lang:type=Memory\");\n+\t\tString attribute = \"Verbose\";\n@@ -130,0 +148,2 @@\n+\t\t\/\/set it back as it otherwise generates a lot of noise in the output\n+\t\tjolokiaConnection.setAttribute(objectName, new Attribute(attribute, false));\n@@ -140,0 +160,71 @@\n+\t@Test\n+\tpublic void testDiscover() {\n+\t\tboolean isMacOs = \"macosx\".equals(System.getProperty(\"osgi.os\"));\n+\t\tboolean isCiRun = \"true\".equals(System.getenv(\"GITHUB_ACTIONS\"));\n+\t\tboolean shouldTestMacOS = \"true\".equals(System.getenv(\"JOLOKIA_TEST_DISCOVERY_ON_MAC\"));\n+\t\tif (isMacOs && isCiRun && !shouldTestMacOS) {\n+\t\t\t\/\/This does not work in the JMC CI pipeline for Mac \n+\t\t\t\/\/ 'D> --> Couldnt send discovery message from \/127.0.0.1: java.net.BindException: Can't assign requested address\n+\t\t\t\/\/  D> --> Exception during lookup: java.util.concurrent.ExecutionException: \n+\t\t\t\/\/    org.jolokia.service.discovery.MulticastUtil$CouldntSendDiscoveryPacketException: \n+\t\t\t\/\/    Can't send discovery UDP packet from \/127.0.0.1: Can't assign requested address'\n+\t\t\t\/\/ We get test coverage on both Linux and Windows\n+\t\t\treturn;\n+\n+\t\t}\n+\t\tdiscoveryListener = new JolokiaDiscoveryListener(this);\n+\n+\t\tfinal AtomicInteger foundVms = new AtomicInteger(0);\n+\n+\t\tdiscoveryListener.addDescriptorListener(new IDescriptorListener() {\n+\t\t\tpublic void onDescriptorDetected(\n+\t\t\t\tIServerDescriptor serverDescriptor, String path, JMXServiceURL url,\n+\t\t\t\tIConnectionDescriptor connectionDescriptor, IDescribable provider) {\n+\t\t\t\tfoundVms.getAndIncrement();\n+\t\t\t}\n+\n+\t\t\tpublic void onDescriptorRemoved(String descriptorId) {\n+\t\t\t\tfoundVms.getAndDecrement();\n+\t\t\t}\n+\n+\t\t});\n+\t\t\/\/ Test that at least one VM (the one running the test was discovered)\n+\t\tAwaitility.await().atMost(Duration.ofSeconds(5)).until(() -> foundVms.get() > 0);\n+\t}\n+\n+\t@After\n+\tpublic void stopListener() throws Exception {\n+\t\tif (discoveryListener != null) {\n+\t\t\tdiscoveryListener.shutdown();\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic boolean shouldRunDiscovery() {\n+\t\treturn true;\n+\t}\n+\n+\t@Override\n+\tpublic JolokiaContext getJolokiaContext() {\n+\t\tStaticConfiguration configuration = new StaticConfiguration(ConfigKey.AGENT_ID, \"jolokiatest\");\n+\t\tJolokiaServiceManager serviceManager = JolokiaServiceManagerFactory.createJolokiaServiceManager(configuration,\n+\t\t\t\tnew StdoutLogHandler(true), new AllowAllRestrictor(),\n+\t\t\t\t() -> new TreeSet<ServerDetector>(Arrays.asList(ServerDetector.FALLBACK)));\n+\t\treturn serviceManager.start();\n+\t}\n+\n+\t@Override\n+\tpublic String getMulticastGroup() {\n+\t\treturn ConfigKey.MULTICAST_GROUP.getDefaultValue();\n+\t}\n+\n+\t@Override\n+\tpublic int getMulticastPort() {\n+\t\treturn Integer.parseInt(ConfigKey.MULTICAST_PORT.getDefaultValue());\n+\t}\n+\n+\t@Override\n+\tpublic int getDiscoveryTimeout() {\n+\t\treturn 1000;\n+\t}\n+\n","filename":"application\/tests\/org.openjdk.jmc.jolokia.test\/src\/test\/java\/org\/openjdk\/jmc\/jolokia\/JolokiaTest.java","additions":94,"deletions":3,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -49,0 +49,2 @@\n+            <unit id=\"org.jolokia.service.discovery\" version=\"2.0.2\"\/>\n+            <unit id=\"org.jolokia.server.core\" version=\"2.0.2\"\/>\n","filename":"releng\/platform-definitions\/platform-definition-2024-03\/platform-definition-2024-03.target","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -167,0 +167,13 @@\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>org.jolokia:jolokia-service-discovery:${jolokia.version}<\/id>\n+\t\t\t\t\t\t\t\t\t<override>true<\/override>\n+\t\t\t\t\t\t\t\t\t<instructions>\n+\t\t\t\t\t\t\t\t\t\t<Export-Package>org.jolokia.service.discovery<\/Export-Package>\n+\t\t\t\t\t\t\t\t\t<\/instructions>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>org.jolokia:jolokia-server-core:${jolokia.version}<\/id>\n+\t\t\t\t\t\t\t\t<\/artifact>\n+\t\t\t\t\t\t\t\t<artifact>\n+\t\t\t\t\t\t\t\t\t<id>org.osgi:org.osgi.service.servlet:2.0.0<\/id>\n+\t\t\t\t\t\t\t\t<\/artifact>\n","filename":"releng\/third-party\/pom.xml","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"}]}