{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,0 +149,6 @@\n+\tpublic static final TypedResult<IQuantity> CODE_CACHE_RESERVED_SIZE = new TypedResult<>(\"reservedSize\", \/\/$NON-NLS-1$\n+\t\t\t\"Code Cache Reserved Size\", \"The reserved size for the code cache.\", UnitLookup.NUMBER, \/\/$NON-NLS-1$\/\/$NON-NLS-2$\n+\t\t\tIQuantity.class);\n+\tpublic static final TypedResult<IQuantity> CODE_CACHE_FULL_COUNT = new TypedResult<>(\"codeCacheFullCount\", \/\/$NON-NLS-1$\n+\t\t\t\"Code Cache Full Count\", \"The number of times the code cache was full.\", UnitLookup.NUMBER, \/\/$NON-NLS-1$\/\/$NON-NLS-2$\n+\t\t\tIQuantity.class);\n@@ -150,2 +156,2 @@\n-\tprivate static final Collection<TypedResult<?>> RESULT_ATTRIBUTES = Arrays\n-\t\t\t.<TypedResult<?>> asList(TypedResult.SCORE, CODE_CACHE_FREE_RATIO);\n+\tprivate static final Collection<TypedResult<?>> RESULT_ATTRIBUTES = Arrays.<TypedResult<?>> asList(\n+\t\t\tTypedResult.SCORE, CODE_CACHE_FREE_RATIO, CODE_CACHE_RESERVED_SIZE, CODE_CACHE_FULL_COUNT);\n@@ -171,0 +177,2 @@\n+\t\tIQuantity ccReserved = ccItems.getAggregate(\n+\t\t\t\t(IAggregator<IQuantity, ?>) Aggregators.min(JdkTypeIDs.CODE_CACHE_CONFIG, JdkAttributes.RESERVED_SIZE));\n@@ -175,0 +183,1 @@\n+\t\t\t\t\t.addResult(CODE_CACHE_RESERVED_SIZE, ccReserved).addResult(CODE_CACHE_FULL_COUNT, ccFullCount)\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/compilation\/CodeCacheRule.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -142,1 +142,1 @@\n-CodeCacheRuleFactory_BLOG_REFERENCE=See [this blog post](https:\/\/blogs.oracle.com\/poonam\/why-do-i-get-message-codecache-is-full-compiler-has-been-disabled) for a longer discussion on the code cache.\n+CodeCacheRuleFactory_BLOG_REFERENCE=Refer to [this blog post](https:\/\/blogs.oracle.com\/poonam\/why-do-i-get-message-codecache-is-full-compiler-has-been-disabled) for a longer discussion on the code cache.\n@@ -149,1 +149,1 @@\n-CodeCacheRuleFactory_TEXT_WARN_LONG=This can happen if you have a lot of code in your application or if the code cache is too small. If the code cache is filled, the JVM will stop compiling new methods which means that your code will run slower than necessary. Increase the size of the code cache with '-XX:ReservedCodeCacheSize', for example '-XX:ReservedCodeCacheSize=128M'.\n+CodeCacheRuleFactory_TEXT_WARN_LONG=The CodeCache is the memory area where the compiled code generated by the JIT compiler is stored. Your CodeCache size is configured as {reservedSize}. In this recording, the CodeCache got filled {codeCacheFullCount} times. This can happen if there is a lot of compiled code generated in your application or the CodeCache is sized too small. Once the CodeCache becomes full, the JVM stops compiling new methods and that impacts the performance of the application as those methods will be executed in interpreted mode. Furthermore, the JVM may discard some of the already compiled code to free up some space in CodeCache, which may also cause the application to run slower. To avoid this, increase the size of the CodeCache using the '-XX:ReservedCodeCacheSize' JVM option, for example, '-XX:ReservedCodeCacheSize=128M'.\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}