{"files":[{"patch":"@@ -0,0 +1,32 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * The contents of this file are subject to the terms of either the Universal Permissive License\n+ * v 1.0 as shown at http:\/\/oss.oracle.com\/licenses\/upl\n+ *\n+ * or the following license:\n+ *\n+ * Redistribution and use in source and binary forms, with or without modification, are permitted\n+ * provided that the following conditions are met:\n+ *\n+ * 1. Redistributions of source code must retain the above copyright notice, this list of conditions\n+ * and the following disclaimer.\n+ *\n+ * 2. Redistributions in binary form must reproduce the above copyright notice, this list of\n+ * conditions and the following disclaimer in the documentation and\/or other materials provided with\n+ * the distribution.\n+ *\n+ * 3. Neither the name of the copyright holder nor the names of its contributors may be used to\n+ * endorse or promote products derived from this software without specific prior written permission.\n+ *\n+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n+ * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n+ * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n+ * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n+ * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n+ * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY\n+ * WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n+ *\/\n@@ -30,1 +62,1 @@\n-\tprivate static final String PID1Rule_RESULT_ID = \"PID1Rule\";\n+\tprivate static final String PID1Rule_RESULT_ID = \"PID1Rule\"; \/\/$NON-NLS-1$\n@@ -80,1 +112,2 @@\n-\t\t\t\t\t.setExplanation(Messages.getString(Messages.PID1Rule_TEXT_INFO_LONG)).build();\n+\t\t\t\t\t.setExplanation(Messages.getString(Messages.PID1Rule_TEXT_INFO_LONG))\n+\t\t\t\t\t.setSolution(Messages.getString(Messages.PID1Rule_TEXT_SOLUTION)).build();\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/general\/PID1Rule.java","additions":35,"deletions":2,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -661,0 +661,1 @@\n+\tpublic static final String PID1Rule_TEXT_SOLUTION = \"PID1Rule_TEXT_SOLUTION\"; \/\/$NON-NLS-1$\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/java\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/Messages.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -649,1 +649,2 @@\n-PID1Rule_TEXT_INFO_LONG=Java processes shouldn't run with PID 1 as this PID is for the init process in Unix-like systems and receives special treatment.\n+PID1Rule_TEXT_INFO_LONG=Java processes should not run with PID 1 as this PID is reserved for the init process in Linux, which is responsible for signal handling and process management. Java processes do not natively handle signals like SIGTERM correctly, leading to issues such as unclean shutdowns and orphaned child processes.\n+PID1Rule_TEXT_SOLUTION=Enforce the process does not run with PID 1. In Docker, this can be achieved by using the lightweight init system tini with the '--init' flag. For an example with Docker Compose refer to the [documentation from Docker Compose](https:\/\/docs.docker.com\/reference\/compose-file\/services\/#init).\n","filename":"core\/org.openjdk.jmc.flightrecorder.rules.jdk\/src\/main\/resources\/org\/openjdk\/jmc\/flightrecorder\/rules\/jdk\/messages\/internal\/messages.properties","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -5730,1 +5730,2 @@\n-            <explanation>Java processes shouldn't run with PID 1 as this PID is for the init process in Unix-like systems and receives special treatment.<\/explanation>\n+            <explanation>Java processes should not run with PID 1 as this PID is reserved for the init process in Linux, which is responsible for signal handling and process management. Java processes do not natively handle signals like SIGTERM correctly, leading to issues such as unclean shutdowns and orphaned child processes.<\/explanation>\n+            <solution>Enforce the process does not run with PID 1. In Docker, this can be achieved by using the lightweight init system tini with the '--init' flag. For an example with Docker Compose refer to the [documentation from Docker Compose](https:\/\/docs.docker.com\/reference\/compose-file\/services\/#init).<\/solution>\n","filename":"core\/tests\/org.openjdk.jmc.flightrecorder.rules.jdk.test\/src\/main\/resources\/baseline\/JfrRuleBaseline.xml","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}