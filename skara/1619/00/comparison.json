{"files":[{"patch":"@@ -67,1 +67,2 @@\n-    private static final String MERGE_READY_MARKER = \"<!-- PullRequestBot merge is ready comment -->\";\n+    protected static final String MERGE_READY_MARKER = \"<!-- PullRequestBot merge is ready comment -->\";\n+    protected static final String PLACEHOLDER_MARKER = \"<!-- PullRequestBot placeholder -->\";\n@@ -1127,1 +1128,1 @@\n-        } else if (existing.isPresent()) {\n+        } else if (existing.isPresent() && !existing.get().body().contains(PLACEHOLDER_MARKER)) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import java.util.stream.Stream;\n@@ -53,0 +54,2 @@\n+import static org.openjdk.skara.bots.pr.CheckRun.MERGE_READY_MARKER;\n+import static org.openjdk.skara.bots.pr.CheckRun.PLACEHOLDER_MARKER;\n@@ -417,0 +420,1 @@\n+        comments = postPlaceholderMessageForReadyComment(comments);\n@@ -724,0 +728,17 @@\n+    private List<Comment> postPlaceholderMessageForReadyComment(List<Comment> comments) {\n+        var existing = comments.stream()\n+                .filter(comment -> comment.author().equals(pr.repository().forge().currentUser()))\n+                .filter(comment -> comment.body().contains(MERGE_READY_MARKER))\n+                .findAny();\n+        if (existing.isPresent()) {\n+            return comments;\n+        }\n+        String message = \"‚ùó This change is not yet ready to be integrated.\\n\" +\n+                \"See the **Progress** checklist in the description for automated requirements.\\n\" +\n+                \"This project also has non-automated pre-integration requirements. Please see the file CONTRIBUTING.md for details.\\n\" +\n+                MERGE_READY_MARKER + \"\\n\" + PLACEHOLDER_MARKER;\n+        \/\/ If the bot posted a placeholder comment, we should update comments otherwise the bot will not be able to find\n+        \/\/ comment with MERGE_READY_MARKER later and post merge ready comment again\n+        return Stream.concat(comments.stream(), Stream.of(pr.addComment(message))).toList();\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -166,0 +166,2 @@\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportPRCommandTests.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertFirstCommentContains;\n@@ -93,1 +94,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -103,1 +104,1 @@\n-            assertLastCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n@@ -195,1 +196,1 @@\n-            var backportComment = comments.get(0).body();\n+            var backportComment = comments.get(1).body();\n@@ -205,1 +206,1 @@\n-            assertLastCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n@@ -299,1 +300,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -309,1 +310,1 @@\n-            assertLastCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n@@ -388,1 +389,1 @@\n-            assertEquals(1, pr.comments().size());\n+            assertEquals(2, pr.comments().size());\n@@ -457,1 +458,1 @@\n-            assertEquals(1, pr.comments().size());\n+            assertEquals(2, pr.comments().size());\n@@ -529,1 +530,1 @@\n-            assertEquals(1, pr.comments().size());\n+            assertEquals(2, pr.comments().size());\n@@ -585,1 +586,1 @@\n-            var backportComment = comments.get(0).body();\n+            var backportComment = comments.get(1).body();\n@@ -658,1 +659,1 @@\n-            var backportComment = comments.get(0).body();\n+            var backportComment = comments.get(1).body();\n@@ -729,1 +730,1 @@\n-            var backportComment = comments.get(0).body();\n+            var backportComment = comments.get(1).body();\n@@ -804,1 +805,1 @@\n-            var backportComment = comments.get(0).body();\n+            var backportComment = comments.get(1).body();\n@@ -866,1 +867,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -870,1 +871,1 @@\n-            assertLastCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n@@ -963,1 +964,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -967,1 +968,1 @@\n-            assertLastCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n@@ -1073,1 +1074,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -1132,1 +1133,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -1191,1 +1192,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -1250,1 +1251,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -1309,1 +1310,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -1319,1 +1320,1 @@\n-            assertLastCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n@@ -1408,1 +1409,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -1458,1 +1459,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -1465,1 +1466,1 @@\n-            backportComment = pr.comments().get(1).body();\n+            backportComment = pr.comments().get(2).body();\n@@ -1473,1 +1474,1 @@\n-            backportComment = pr.comments().get(2).body();\n+            backportComment = pr.comments().get(3).body();\n@@ -1481,1 +1482,1 @@\n-            backportComment = pr.comments().get(2).body();\n+            backportComment = pr.comments().get(4).body();\n@@ -1489,1 +1490,1 @@\n-            backportComment = pr.comments().get(3).body();\n+            backportComment = pr.comments().get(5).body();\n@@ -1498,1 +1499,1 @@\n-            assertLastCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n@@ -1600,1 +1601,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -1606,2 +1607,1 @@\n-            var mergeReadyComment = pr.comments().get(1).body();\n-            assertTrue(mergeReadyComment.contains(\"This change now passes all *automated* pre-integration checks\"));\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n@@ -1621,2 +1621,1 @@\n-            mergeReadyComment = pr.comments().get(1).body();\n-            assertTrue(mergeReadyComment.contains(\"This change is no longer ready for integration - check the PR body for details\"));\n+            assertFirstCommentContains(pr, \"This change is no longer ready for integration - check the PR body for details\");\n@@ -1628,2 +1627,1 @@\n-            mergeReadyComment = pr.comments().get(1).body();\n-            assertTrue(mergeReadyComment.contains(\"This change now passes all *automated* pre-integration checks\"));\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n@@ -1727,1 +1725,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -1738,1 +1736,1 @@\n-            var backportComment2 = pr.comments().get(1).body();\n+            var backportComment2 = pr.comments().get(2).body();\n@@ -1750,1 +1748,1 @@\n-            assertLastCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n@@ -1840,1 +1838,1 @@\n-            var backportComment = pr.comments().get(0).body();\n+            var backportComment = pr.comments().get(1).body();\n@@ -1959,1 +1957,1 @@\n-            var backportComment = comments.get(0).body();\n+            var backportComment = comments.get(1).body();\n@@ -1972,1 +1970,1 @@\n-            assertTrue(pr.store().comments().get(1).body().contains(\"This change is no longer ready for integration - check the PR body for details.\"));\n+            assertFirstCommentContains(pr, \"This change is no longer ready for integration - check the PR body for details.\");\n@@ -1982,1 +1980,1 @@\n-            assertTrue(pr.store().comments().get(1).body().contains(\"This change now passes all *automated* pre-integration checks.\"));\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks.\");\n@@ -1987,1 +1985,1 @@\n-            assertTrue(pr.store().comments().get(1).body().contains(\"This change is no longer ready for integration - check the PR body for details.\"));\n+            assertFirstCommentContains(pr, \"This change is no longer ready for integration - check the PR body for details.\");\n@@ -2090,1 +2088,1 @@\n-            var backportComment = comments.get(0).body();\n+            var backportComment = comments.get(1).body();\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":45,"deletions":47,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1030,2 +1030,2 @@\n-            assertTrue(pr.comments().get(pr.comments().size() - 2).body().contains(\"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n-                    \"is not needed for this pull request.\"));\n+            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+                    \"is not needed for this pull request.\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommandTests.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -46,0 +46,2 @@\n+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertFirstCommentContains;\n+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertLastCommentContains;\n@@ -2003,4 +2005,2 @@\n-            var lastComment = comments.get(comments.size() - 1).body();\n-            assertTrue(lastComment.contains(\"This change now passes all *automated* pre-integration checks.\"));\n-            var nextToLastComment = comments.get(comments.size() - 2).body();\n-            assertTrue(nextToLastComment.contains(\"the full name on your profile does not match the author name\"));\n+            assertLastCommentContains(pr, \"the full name on your profile does not match the author name\");\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks.\");\n@@ -2311,3 +2311,2 @@\n-            var comments = pr.store().comments();\n-            assertTrue(comments.get(comments.size() - 1).body().contains(\" ‚ö†Ô∏è @\" + pr.author().username() + \" No `.jcheck\/conf` found in the target branch of this pull request. \"\n-                    + \"Until that is resolved, this pull request cannot be processed. Please notify the repository owner.\"));\n+            assertLastCommentContains(pr, \" ‚ö†Ô∏è @\" + pr.author().username() + \" No `.jcheck\/conf` found in the target branch of this pull request. \"\n+                    + \"Until that is resolved, this pull request cannot be processed. Please notify the repository owner.\");\n@@ -2317,1 +2316,1 @@\n-            assertEquals(1, pr.store().comments().size());\n+            assertEquals(2, pr.comments().size());\n@@ -2372,3 +2371,2 @@\n-            var comments = pr.store().comments();\n-            assertTrue(comments.get(comments.size() - 1).body().contains(\" ‚ö†Ô∏è @\" + pr.author().username() + \" The `.jcheck\/conf` in the target branch of this pull request is invalid. \"\n-                    + \"Until that is resolved, this pull request cannot be processed. Please notify the repository owner.\"));\n+            assertLastCommentContains(pr, \" ‚ö†Ô∏è @\" + pr.author().username() + \" The `.jcheck\/conf` in the target branch of this pull request is invalid. \"\n+                    + \"Until that is resolved, this pull request cannot be processed. Please notify the repository owner.\");\n@@ -2378,1 +2376,1 @@\n-            assertEquals(1, pr.store().comments().size());\n+            assertEquals(2, pr.comments().size());\n@@ -2385,1 +2383,1 @@\n-            assertEquals(\"<!-- Jmerge command reply message (1) -->\\n\" +\n+            assertEquals(\"<!-- Jmerge command reply message (2) -->\\n\" +\n@@ -2387,1 +2385,1 @@\n-                    \"Please issue this command again once the problem has been resolved.\", pr.store().comments().get(2).body());\n+                    \"Please issue this command again once the problem has been resolved.\", pr.comments().get(3).body());\n@@ -2392,1 +2390,1 @@\n-            assertEquals(\"<!-- Jmerge command reply message (3) -->\\n\" +\n+            assertEquals(\"<!-- Jmerge command reply message (4) -->\\n\" +\n@@ -2395,1 +2393,1 @@\n-                    \"Please issue this command again once the problem has been resolved.\", pr.store().comments().get(4).body());\n+                    \"Please issue this command again once the problem has been resolved.\", pr.comments().get(5).body());\n@@ -2461,3 +2459,2 @@\n-            var comments = pr.store().comments();\n-            assertTrue(comments.get(comments.size() - 1).body().contains(\" ‚ö†Ô∏è @\" + pr.author().username() + \" The external jcheck configuration for this repository could not be found. \"\n-                    + \"Until that is resolved, this pull request cannot be processed. Please notify a Skara admin.\"));\n+            assertLastCommentContains(pr, \" ‚ö†Ô∏è @\" + pr.author().username() + \" The external jcheck configuration for this repository could not be found. \"\n+                    + \"Until that is resolved, this pull request cannot be processed. Please notify a Skara admin.\");\n@@ -2467,1 +2464,1 @@\n-            assertEquals(1, pr.store().comments().size());\n+            assertEquals(2, pr.comments().size());\n@@ -2474,1 +2471,1 @@\n-            assertEquals(\"<!-- Jmerge command reply message (1) -->\\n\" +\n+            assertEquals(\"<!-- Jmerge command reply message (2) -->\\n\" +\n@@ -2476,1 +2473,1 @@\n-                    \"Please issue this command again once the problem has been resolved.\", pr.store().comments().get(2).body());\n+                    \"Please issue this command again once the problem has been resolved.\", pr.comments().get(3).body());\n@@ -2540,3 +2537,2 @@\n-            var comments = pr.store().comments();\n-            assertTrue(comments.get(comments.size() - 1).body().contains(\" ‚ö†Ô∏è @\" + pr.author().username() + \" The external jcheck configuration for this repository is invalid. \"\n-                    + \"Until that is resolved, this pull request cannot be processed. Please notify a Skara admin.\"));\n+            assertLastCommentContains(pr, \" ‚ö†Ô∏è @\" + pr.author().username() + \" The external jcheck configuration for this repository is invalid. \"\n+                    + \"Until that is resolved, this pull request cannot be processed. Please notify a Skara admin.\");\n@@ -2546,1 +2542,1 @@\n-            assertEquals(1, pr.store().comments().size());\n+            assertEquals(2, pr.comments().size());\n@@ -2610,0 +2606,1 @@\n+            TestBotRunner.runPeriodicItems(checkBot);\n@@ -2614,1 +2611,1 @@\n-            assertEquals(1, pr.comments().size());\n+            assertEquals(2, pr.comments().size());\n@@ -2627,1 +2624,1 @@\n-            assertEquals(2, pr.comments().size());\n+            assertEquals(3, pr.comments().size());\n@@ -2644,1 +2641,1 @@\n-            assertEquals(4, pr.comments().size());\n+            assertEquals(5, pr.comments().size());\n@@ -2660,1 +2657,1 @@\n-            assertEquals(5, pr.comments().size());\n+            assertEquals(6, pr.comments().size());\n@@ -2677,1 +2674,1 @@\n-            assertEquals(6, pr.comments().size());\n+            assertEquals(7, pr.comments().size());\n@@ -2688,1 +2685,1 @@\n-            assertEquals(6, pr.comments().size());\n+            assertEquals(7, pr.comments().size());\n@@ -2705,1 +2702,1 @@\n-            assertEquals(8, pr.comments().size());\n+            assertEquals(9, pr.comments().size());\n@@ -2975,2 +2972,2 @@\n-            var comment = pr.store().comments().get(pr.store().comments().size() - 1);\n-            assertEquals(1, pr.store().comments().size());\n+            var comment = pr.comments().get(pr.comments().size() - 1);\n+            assertEquals(2, pr.comments().size());\n@@ -2981,2 +2978,2 @@\n-            comment = pr.store().comments().get(pr.store().comments().size() - 1);\n-            assertEquals(1, pr.store().comments().size());\n+            comment = pr.comments().get(pr.comments().size() - 1);\n+            assertEquals(2, pr.comments().size());\n@@ -2987,1 +2984,1 @@\n-            assertEquals(1, pr.store().comments().size());\n+            assertEquals(2, pr.comments().size());\n@@ -3023,2 +3020,2 @@\n-            var comment = pr.store().comments().get(pr.store().comments().size() - 1);\n-            assertEquals(1, pr.store().comments().size());\n+            var comment = pr.comments().get(pr.comments().size() - 1);\n+            assertEquals(2, pr.comments().size());\n@@ -3029,2 +3026,2 @@\n-            comment = pr.store().comments().get(pr.store().comments().size() - 1);\n-            assertEquals(1, pr.store().comments().size());\n+            comment = pr.comments().get(pr.comments().size() - 1);\n+            assertEquals(2, pr.comments().size());\n@@ -3035,1 +3032,1 @@\n-            assertEquals(1, pr.store().comments().size());\n+            assertEquals(2, pr.comments().size());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":40,"deletions":43,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,1 +130,1 @@\n-            var backportComment = comments.get(0).body();\n+            var backportComment = comments.get(1).body();\n@@ -206,1 +206,1 @@\n-            var backportComment = comments.get(0).body();\n+            var backportComment = comments.get(1).body();\n@@ -286,1 +286,1 @@\n-            var backportComment = comments.get(0).body();\n+            var backportComment = comments.get(1).body();\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CleanCommandTests.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -763,1 +763,1 @@\n-            assertEquals(3, comments.size());\n+            assertEquals(4, comments.size());\n@@ -765,2 +765,1 @@\n-            assertTrue(comments.get(0).body().contains(\"current title does not contain an issue reference\"));\n-            assertTrue(comments.get(1).body().contains(\"Adding additional issue to\"));\n+            assertTrue(comments.get(1).body().contains(\"current title does not contain an issue reference\"));\n@@ -768,0 +767,1 @@\n+            assertTrue(comments.get(3).body().contains(\"Adding additional issue to\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueTests.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,1 @@\n+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertFirstCommentContains;\n@@ -230,1 +231,1 @@\n-            assertEquals(1, pr.comments().size());\n+            assertEquals(2, pr.comments().size());\n@@ -394,0 +395,1 @@\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -408,3 +410,3 @@\n-            assertLastCommentContains(pr,\"This change now passes all *automated* pre-integration checks\");\n-            assertLastCommentContains(pr,\":mag: One or more changes in this pull request modifies files\");\n-            assertLastCommentContains(pr,\"in areas of the source code that often require two reviewers.\");\n+            assertFirstCommentContains(pr, \"This change now passes all *automated* pre-integration checks\");\n+            assertFirstCommentContains(pr, \":mag: One or more changes in this pull request modifies files\");\n+            assertFirstCommentContains(pr, \"in areas of the source code that often require two reviewers.\");\n@@ -448,0 +450,1 @@\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -462,4 +465,4 @@\n-            assertLastCommentContains(pr,\"This change now passes all *automated* pre-integration checks\");\n-            assertLastCommentContains(pr,\":earth_americas: Applicable reviewers for one or more changes \");\n-            assertLastCommentContains(pr,\"in this pull request are spread across multiple different time zones.\");\n-            assertLastCommentContains(pr,\"been out for review for at least 24 hours\");\n+            assertFirstCommentContains(pr,\"This change now passes all *automated* pre-integration checks\");\n+            assertFirstCommentContains(pr,\":earth_americas: Applicable reviewers for one or more changes \");\n+            assertFirstCommentContains(pr,\"in this pull request are spread across multiple different time zones.\");\n+            assertFirstCommentContains(pr,\"been out for review for at least 24 hours\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTests.java","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1645,1 +1645,1 @@\n-            assertEquals(0, pr.comments().size());\n+            assertEquals(1, pr.comments().size());\n@@ -1818,3 +1818,2 @@\n-            var comment = pr.store().comments().get(pr.store().comments().size() - 1);\n-            assertEquals(1, pr.store().comments().size());\n-            assertTrue(comment.body().contains(\"can not be source repo for merge-style pull requests in this repository.\"));\n+            assertEquals(2, pr.comments().size());\n+            assertLastCommentContains(pr, \"can not be source repo for merge-style pull requests in this repository.\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/MergeTests.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,7 @@\n+\n+    public static void assertFirstCommentContains(PullRequest pr, String contains) {\n+        var comments = pr.comments();\n+        assertTrue(!comments.isEmpty());\n+        var firstComment = comments.get(0);\n+        assertTrue(firstComment.body().contains(contains), firstComment.body());\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestAsserts.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -142,3 +142,3 @@\n-            assertEquals(4, pr.comments().size());\n-            assertTrue(pr.comments().get(1).body().contains(\"Contributor `A <a@b.c>` successfully added\"), pr.comments().get(1).body());\n-            assertTrue(pr.comments().get(2).body().contains(\"Setting summary to:\\n\" +\n+            assertEquals(5, pr.comments().size());\n+            assertTrue(pr.comments().get(2).body().contains(\"Contributor `A <a@b.c>` successfully added\"), pr.comments().get(2).body());\n+            assertTrue(pr.comments().get(3).body().contains(\"Setting summary to:\\n\" +\n@@ -148,2 +148,2 @@\n-                                                                    \"line 2\"), pr.comments().get(2).body());\n-            assertTrue(pr.comments().get(3).body().contains(\"Contributor `B <b@c.d>` successfully added\"), pr.comments().get(3).body());\n+                                                                    \"line 2\"), pr.comments().get(3).body());\n+            assertTrue(pr.comments().get(4).body().contains(\"Contributor `B <b@c.d>` successfully added\"), pr.comments().get(4).body());\n@@ -154,1 +154,1 @@\n-            assertEquals(4, pr.comments().size());\n+            assertEquals(5, pr.comments().size());\n@@ -187,1 +187,1 @@\n-            assertEquals(1, pr.comments().size());\n+            assertEquals(2, pr.comments().size());\n@@ -192,2 +192,0 @@\n-            assertEquals(2, pr.comments().size());\n-            TestBotRunner.runPeriodicItems(mergeBot);\n@@ -195,0 +193,2 @@\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            assertEquals(4, pr.comments().size());\n@@ -304,2 +304,1 @@\n-            var lastComment = pr.comments().get(pr.comments().size() - 1);\n-            assertEquals(externalCommandComment, lastComment);\n+            assertLastCommentContains(pr, \"This change is not yet ready to be integrated.\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandTests.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,1 @@\n+import static org.openjdk.skara.bots.pr.PullRequestAsserts.assertFirstCommentContains;\n@@ -498,0 +499,1 @@\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -513,1 +515,1 @@\n-            assertLastCommentContains(pr, \"Reviewed-by: integrationreviewer2, integrationreviewer1, integrationcommitter3\");\n+            assertFirstCommentContains(pr, \"Reviewed-by: integrationreviewer2, integrationreviewer1, integrationcommitter3\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewerTests.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}