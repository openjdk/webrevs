{"files":[{"patch":"@@ -328,1 +328,3 @@\n-                (webrev.uri() == null ? \"\" : \" Webrev: \" + webrev.uri().toString() + \"\\n\") +\n+                (webrev.diffTooLarge() ?\n+                        \"  Webrev: Webrev is not available because diff is too large\\n\" :\n+                        (webrev.uri() == null ? \"\" : \"  Webrev: \" + webrev.uri().toString() + \"\\n\")) +\n@@ -341,1 +343,1 @@\n-            if (webrevs.stream().noneMatch(w -> w.uri() != null)) {\n+            if (webrevs.stream().noneMatch(w -> w.uri() != null || w.diffTooLarge())) {\n@@ -354,1 +356,3 @@\n-                                .map(d -> String.format(\" - %s: %s\", d.shortLabel(), d.uri()))\n+                                .map(d -> d.diffTooLarge() ?\n+                                        String.format(\" - %s: %s\", d.shortLabel(), \"Webrev is not available because diff is too large\") :\n+                                        String.format(\" - %s: %s\", d.shortLabel(), d.uri()))\n@@ -372,1 +376,3 @@\n-                (fullWebrev.uri() == null ? \"\" : \" Webrev: \" + fullWebrev.uri().toString() + \"\\n\") +\n+                (fullWebrev.diffTooLarge() ?\n+                        \"  Webrev: Webrev is not available because diff is too large\\n\" :\n+                        (fullWebrev.uri() == null ? \"\" : \"  Webrev: \" + fullWebrev.uri().toString() + \"\\n\")) +\n@@ -383,3 +389,5 @@\n-                (fullWebrev.uri() == null ? \"\" : \"Webrevs:\\n\") +\n-                (fullWebrev.uri() == null ? \"\" : \" - full: \" + fullWebrev.uri().toString() + \"\\n\") +\n-                (incrementalWebrev.uri() == null ? \"\" : \" - incr: \" + incrementalWebrev.uri().toString() + \"\\n\\n\") +\n+                (fullWebrev.diffTooLarge() ? \"Webrevs:\\n\" : fullWebrev.uri() == null ? \"\" : \"Webrevs:\\n\") +\n+                (fullWebrev.diffTooLarge() ? \" - full: Webrev is not available because diff is too large\\n\" :\n+                        fullWebrev.uri() == null ? \"\" : \" - full: \" + fullWebrev.uri().toString() + \"\\n\") +\n+                (incrementalWebrev.diffTooLarge() ? \" - incr: Webrev is not available because diff is too large\\n\\n\" :\n+                        incrementalWebrev.uri() == null ? \"\" : \" - incr: \" + incrementalWebrev.uri().toString() + \"\\n\\n\") +\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -179,1 +179,1 @@\n-        if (webrevs.stream().noneMatch(w -> w.uri() != null)) {\n+        if (webrevs.stream().noneMatch(w -> (w.uri() != null || w.diffTooLarge()))) {\n@@ -187,2 +187,4 @@\n-                                        .map(d -> String.format(\"[%s](%s)\", d.label(), d.uri()))\n-                                        .collect(Collectors.joining(\" - \"));\n+                .map(d -> d.diffTooLarge() ?\n+                        String.format(\"[%s](%s)\", d.label(), \"Webrev is not available because diff is too large\") :\n+                        String.format(\"[%s](%s)\", d.label(), d.uri()))\n+                .collect(Collectors.joining(\" - \"));\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+    private final boolean diffTooLarge;\n@@ -40,1 +41,1 @@\n-    public WebrevDescription(URI uri, Type type, String description) {\n+    public WebrevDescription(URI uri, Type type, String description, boolean diffTooLarge) {\n@@ -44,0 +45,1 @@\n+        this.diffTooLarge = diffTooLarge;\n@@ -46,1 +48,1 @@\n-    public WebrevDescription(URI uri, Type type) {\n+    public WebrevDescription(URI uri, Type type, boolean diffTooLarge) {\n@@ -50,0 +52,1 @@\n+        this.diffTooLarge = diffTooLarge;\n@@ -60,0 +63,3 @@\n+    public boolean diffTooLarge() {\n+        return diffTooLarge;\n+    }\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/WebrevDescription.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import org.openjdk.skara.webrev.DiffTooLargeException;\n@@ -92,1 +93,1 @@\n-    private void generateHTML(PullRequest pr, ReadOnlyRepository localRepository, Path folder, Diff diff, Hash base, Hash head) throws IOException {\n+    private void generateHTML(PullRequest pr, ReadOnlyRepository localRepository, Path folder, Diff diff, Hash base, Hash head) throws IOException, DiffTooLargeException {\n@@ -130,1 +131,1 @@\n-    private void generateJSON(PullRequest pr, ReadOnlyRepository localRepository, Path folder, Diff diff, Hash base, Hash head) throws IOException {\n+    private void generateJSON(PullRequest pr, ReadOnlyRepository localRepository, Path folder, Diff diff, Hash base, Hash head) throws IOException, DiffTooLargeException {\n@@ -289,1 +290,1 @@\n-                                 Repository jsonLocalStorage, Repository htmlLocalStorage) {\n+                                 Repository jsonLocalStorage, Repository htmlLocalStorage) throws DiffTooLargeException {\n@@ -356,2 +357,6 @@\n-                var uri = createAndArchive(pr, localRepository, jsonScratchPath, htmlScratchPath, null, base, head, identifier, jsonLocalStorage, htmlLocalStorage);\n-                return new WebrevDescription(uri, type);\n+                try {\n+                    var uri = createAndArchive(pr, localRepository, jsonScratchPath, htmlScratchPath, null, base, head, identifier, jsonLocalStorage, htmlLocalStorage);\n+                    return new WebrevDescription(uri, type, false);\n+                } catch (DiffTooLargeException e) {\n+                    return new WebrevDescription(null, type, true);\n+                }\n@@ -363,2 +368,6 @@\n-                var uri = createAndArchive(pr, localRepository, jsonScratchPath, htmlScratchPath, diff, diff.from(), diff.to(), identifier, jsonLocalStorage, htmlLocalStorage);\n-                return new WebrevDescription(uri, type, description);\n+                try {\n+                    var uri = createAndArchive(pr, localRepository, jsonScratchPath, htmlScratchPath, diff, diff.from(), diff.to(), identifier, jsonLocalStorage, htmlLocalStorage);\n+                    return new WebrevDescription(uri, type, description, false);\n+                } catch (DiffTooLargeException e) {\n+                    return new WebrevDescription(null, type, description, true);\n+                }\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/WebrevStorage.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -3988,0 +3988,96 @@\n+\n+    @Test\n+    void largeDiffArchive(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var archiveFolder = new TemporaryDirectory();\n+             var webrevFolder = new TemporaryDirectory();\n+             var listServer = new TestMailmanServer();\n+             var webrevServer = new TestWebrevServer()) {\n+            var author = credentials.getHostedRepository();\n+            var archive = credentials.getHostedRepository();\n+            var ignored = credentials.getHostedRepository();\n+            var listAddress = EmailAddress.parse(listServer.createList(\"test\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id());\n+            var from = EmailAddress.from(\"test\", \"test@test.mail\");\n+            var mlBot = MailingListBridgeBot.newBuilder()\n+                    .from(from)\n+                    .repo(author)\n+                    .archive(archive)\n+                    .censusRepo(censusBuilder.build())\n+                    .lists(List.of(new MailingListConfiguration(listAddress, Set.of())))\n+                    .ignoredUsers(Set.of(ignored.forge().currentUser().username()))\n+                    .ignoredComments(Set.of())\n+                    .listArchive(listServer.getArchive())\n+                    .smtpServer(listServer.getSMTP())\n+                    .webrevStorageHTMLRepository(archive)\n+                    .webrevStorageRef(\"webrev\")\n+                    .webrevStorageBase(Path.of(\"test\"))\n+                    .webrevStorageBaseUri(webrevServer.uri())\n+                    .readyLabels(Set.of(\"rfr\"))\n+                    .readyComments(Map.of(ignored.forge().currentUser().username(), Pattern.compile(\"ready\")))\n+                    .issueTracker(URIBuilder.base(\"http:\/\/issues.test\/browse\/\").build())\n+                    .headers(Map.of(\"Extra1\", \"val1\", \"Extra2\", \"val2\"))\n+                    .sendInterval(Duration.ZERO)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+            localRepo.push(masterHash, archive.authenticatedUrl(), \"webrev\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"A simple change\\n\".repeat(300001),\n+                    \"Change msg\\n\\nWith several lines\");\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(archive, \"master\", \"edit\", \"1234: This is a pull request\");\n+            pr.setBody(\"This should not be ready\");\n+\n+            \/\/ Flag it as ready for review\n+            pr.setBody(\"This should now be ready\");\n+            pr.addLabel(\"rfr\");\n+\n+            \/\/ Post a ready comment\n+            var ignoredPr = ignored.pullRequest(pr.id());\n+            ignoredPr.addComment(\"ready\");\n+\n+            \/\/ Run another archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/ The archive should now contain an entry\n+            Repository.materialize(archiveFolder.path(), archive.authenticatedUrl(), \"master\");\n+            assertTrue(archiveContains(archiveFolder.path(), \"Webrev: Webrev is not available because diff is too large\"));\n+\n+            assertTrue(pr.store().comments().get(1).body().contains(\"[Full](Webrev is not available because diff is too large)\"));\n+            \/\/ The mailing list as well\n+            listServer.processIncoming();\n+            var mailmanServer = MailingListServerFactory.createMailmanServer(listServer.getArchive(), listServer.getSMTP(), Duration.ZERO);\n+            var mailmanList = mailmanServer.getListReader(listAddress.address());\n+            var conversations = mailmanList.conversations(Duration.ofDays(1));\n+            assertEquals(1, conversations.size());\n+            var mail = conversations.get(0).first();\n+            assertTrue(mail.body().contains(\"Webrev: Webrev is not available because diff is too large\"));\n+\n+            \/\/ And there shouldn't be a webrev\n+            Repository.materialize(webrevFolder.path(), archive.authenticatedUrl(), \"webrev\");\n+            assertFalse(Files.exists(webrevFolder.path().resolve(\"test\")));\n+\n+            \/\/ Make a small change\n+            editHash = CheckableRepository.appendAndCommit(localRepo, \"A simple change 2\",\n+                    \"Change msg\\n\\nWith several lines\");\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+\n+            TestBotRunner.runPeriodicItems(mlBot);\n+            assertTrue(pr.store().comments().get(1).body().contains(\"webrevs\/test\/1\/00-01)\"));\n+            listServer.processIncoming();\n+            conversations = mailmanList.conversations(Duration.ofDays(1));\n+            mail = conversations.get(0).allMessages().get(1);\n+            assertTrue(mail.body().contains(\"webrevs\/test\/1\/00-01\"));\n+\n+            \/\/ And there should be a webrev\n+            Repository.materialize(webrevFolder.path(), archive.authenticatedUrl(), \"webrev\");\n+            assertTrue(webrevContains(webrevFolder.path(), \"1 lines changed\"));\n+        }\n+    }\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":97,"deletions":1,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -451,6 +451,10 @@\n-            Webrev.repository(repo)\n-                  .output(output)\n-                  .upstream(upstreamPullPath, upstreamName)\n-                  .fork(originPullPath, originName)\n-                  .similarity(similarity)\n-                  .generateJSON(base, head);\n+            try {\n+                Webrev.repository(repo)\n+                      .output(output)\n+                      .upstream(upstreamPullPath, upstreamName)\n+                      .fork(originPullPath, originName)\n+                      .similarity(similarity)\n+                      .generateJSON(base, head);\n+            } catch (DiffTooLargeException e) {\n+                System.out.println(\"Webrev is not available because diff is too large.\");\n+            }\n@@ -458,13 +462,17 @@\n-            Webrev.repository(repo)\n-                  .output(output)\n-                  .title(title)\n-                  .upstream(upstream)\n-                  .username(author.name())\n-                  .commitLinker(hash -> upstreamURL == null ? null : upstreamURL + \"\/commit\/\" + hash)\n-                  .issueLinker(id -> jbs + (isDigit(id.charAt(0)) ? jbsProject + \"-\" : \"\") + id)\n-                  .issue(issue)\n-                  .version(version)\n-                  .files(files)\n-                  .similarity(similarity)\n-                  .comments(comments)\n-                  .generate(base, head);\n+            try {\n+                Webrev.repository(repo)\n+                      .output(output)\n+                      .title(title)\n+                      .upstream(upstream)\n+                      .username(author.name())\n+                      .commitLinker(hash -> upstreamURL == null ? null : upstreamURL + \"\/commit\/\" + hash)\n+                      .issueLinker(id -> jbs + (isDigit(id.charAt(0)) ? jbsProject + \"-\" : \"\") + id)\n+                      .issue(issue)\n+                      .version(version)\n+                      .files(files)\n+                      .similarity(similarity)\n+                      .comments(comments)\n+                      .generate(base, head);\n+            } catch (DiffTooLargeException e) {\n+                System.out.println(\"Webrev is not available because diff is too large.\");\n+            }\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/GitWebrev.java","additions":28,"deletions":20,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -0,0 +1,28 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.webrev;\n+\n+public class DiffTooLargeException extends Exception {\n+    public DiffTooLargeException() {\n+    }\n+}\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/DiffTooLargeException.java","additions":28,"deletions":0,"binary":false,"changes":28,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -171,1 +171,1 @@\n-        public void generate(Hash tailEnd) throws IOException {\n+        public void generate(Hash tailEnd) throws IOException, DiffTooLargeException {\n@@ -175,1 +175,1 @@\n-        public void generate(Hash tailEnd, Hash head) throws IOException {\n+        public void generate(Hash tailEnd, Hash head) throws IOException, DiffTooLargeException {\n@@ -182,1 +182,1 @@\n-        public void generateJSON(Hash tailEnd, Hash head) throws IOException {\n+        public void generateJSON(Hash tailEnd, Hash head) throws IOException, DiffTooLargeException {\n@@ -190,1 +190,1 @@\n-        public void generate(Diff diff) throws IOException {\n+        public void generate(Diff diff) throws IOException, DiffTooLargeException {\n@@ -194,1 +194,1 @@\n-        public void generateJSON(Diff diff) throws IOException {\n+        public void generateJSON(Diff diff) throws IOException, DiffTooLargeException {\n@@ -203,1 +203,14 @@\n-        private void generateJSON(Diff diff, Hash tailEnd, Hash head) throws IOException {\n+        private boolean diffTooLarge(Diff diff) {\n+            var totalChanges = diff.patches().stream()\n+                    .filter(Patch::isTextual)\n+                    .map(Patch::asTextualPatch)\n+                    .flatMap(textualPatch -> textualPatch.hunks().stream())\n+                    .mapToInt(Hunk::changes)\n+                    .sum();\n+            return totalChanges > 300000;\n+        }\n+\n+        private void generateJSON(Diff diff, Hash tailEnd, Hash head) throws IOException, DiffTooLargeException {\n+            if (diffTooLarge(diff)) {\n+                throw new DiffTooLargeException();\n+            }\n@@ -324,1 +337,4 @@\n-        private void generate(Diff diff, Hash tailEnd, Hash head) throws IOException {\n+        private void generate(Diff diff, Hash tailEnd, Hash head) throws IOException, DiffTooLargeException {\n+            if (diffTooLarge(diff)) {\n+                throw new DiffTooLargeException();\n+            }\n","filename":"webrev\/src\/main\/java\/org\/openjdk\/skara\/webrev\/Webrev.java","additions":24,"deletions":8,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-    void simple(VCS vcs) throws IOException {\n+    void simple(VCS vcs) throws IOException, DiffTooLargeException {\n@@ -66,1 +66,1 @@\n-    void middle(VCS vcs) throws IOException {\n+    void middle(VCS vcs) throws IOException, DiffTooLargeException {\n@@ -85,1 +85,1 @@\n-    void emptySourceHunk(VCS vcs) throws IOException {\n+    void emptySourceHunk(VCS vcs) throws IOException, DiffTooLargeException {\n@@ -104,1 +104,1 @@\n-    void removedHeader(VCS vcs) throws IOException {\n+    void removedHeader(VCS vcs) throws IOException, DiffTooLargeException {\n@@ -123,1 +123,1 @@\n-    void removeBinaryFile(VCS vcs) throws IOException {\n+    void removeBinaryFile(VCS vcs) throws IOException, DiffTooLargeException {\n@@ -140,1 +140,1 @@\n-    void addBinaryFile(VCS vcs) throws IOException {\n+    void addBinaryFile(VCS vcs) throws IOException, DiffTooLargeException {\n@@ -160,1 +160,1 @@\n-    void modifyBinaryFile(VCS vcs) throws IOException {\n+    void modifyBinaryFile(VCS vcs) throws IOException, DiffTooLargeException {\n@@ -181,1 +181,1 @@\n-    void reservedName(VCS vcs) throws IOException {\n+    void reservedName(VCS vcs) throws IOException, DiffTooLargeException {\n","filename":"webrev\/src\/test\/java\/org\/openjdk\/skara\/webrev\/WebrevTests.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}