{"files":[{"patch":"@@ -328,0 +328,16 @@\n+\n+    @Override\n+    public void visit(CopyrightIssue issue) {\n+        List<String> messages = new ArrayList<>();\n+        if (!issue.filesWithCopyrightFormatIssue().isEmpty()) {\n+            messages.add(\"Found copyright format issue in [\" + String.join(\", \", issue.filesWithCopyrightFormatIssue()) + \"]\");\n+        }\n+        if (!issue.filesWithCopyrightYearIssue().isEmpty()) {\n+            messages.add(\"Found outdated copyright year in [\" + String.join(\", \", issue.filesWithCopyrightYearIssue()) + \"]\");\n+        }\n+        if (!issue.filesWithCopyrightMissingIssue().isEmpty()) {\n+            messages.add(\"Can't find copyright header in [\" + String.join(\", \", issue.filesWithCopyrightMissingIssue()) + \"]\");\n+        }\n+        addMessage(issue.check(), String.join(\"\\n\", messages),\n+                issue.severity());\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -3270,1 +3270,1 @@\n-            assertEquals(\"line 19: entry must be of form 'key = value'\", check.summary().get());\n+            assertEquals(\"line 22: entry must be of form 'key = value'\", check.summary().get());\n@@ -3718,1 +3718,1 @@\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"));\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"),Set.of(\"author\", \"reviewers\", \"whitespace\"), Set.of(\"issuestitle\"), \"0.1\");\n@@ -3771,0 +3771,62 @@\n+\n+    @Test\n+    void copyrightCheck(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .issuePRMap(issuePRMap)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"),Set.of(\"author\", \"reviewers\", \"whitespace\"), Set.of(\"copyright\"), \"0.1\");\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"\/*\\n\" +\n+                    \" * Copyright (c) 2024,  Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\");\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Pull Request\", List.of(\"Body\"), false);\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertTrue(pr.store().body().contains(\"Found copyright format issue in [appendable.txt]\"));\n+\n+            \/\/ Make the year outdated\n+            var editHash2 = CheckableRepository.replaceAndCommit(localRepo, \"\/*\\n\" +\n+                    \" * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\");\n+            localRepo.push(editHash2, author.authenticatedUrl(), \"edit\", true);\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertTrue(pr.store().body().contains(\"Found outdated copyright year in [appendable.txt]\"));\n+\n+            \/\/ Fix the issue\n+            var editHash3 = CheckableRepository.replaceAndCommit(localRepo, \"\/*\\n\" +\n+                    \" * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\");\n+            localRepo.push(editHash3, author.authenticatedUrl(), \"edit\", true);\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertFalse(pr.store().body().contains(\"Found copyright format issue in [appendable.txt]\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":64,"deletions":2,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -329,0 +329,19 @@\n+    @Override\n+    public void visit(CopyrightIssue i) {\n+        if (!ignore.contains(i.check().name()) && !isLax) {\n+            if (!i.filesWithCopyrightFormatIssue().isEmpty()) {\n+                println(i, \"Found copyright format issue in [\" + String.join(\", \", i.filesWithCopyrightFormatIssue()) + \"]\");\n+            }\n+            if (!i.filesWithCopyrightYearIssue().isEmpty()) {\n+                println(i, \"Found outdated copyright year in [\" + String.join(\", \", i.filesWithCopyrightYearIssue()) + \"]\");\n+            }\n+            if (!i.filesWithCopyrightMissingIssue().isEmpty()) {\n+                println(i, \"Can't find copyright header in [\" + String.join(\", \", i.filesWithCopyrightMissingIssue()) + \"]\");\n+            }\n+            for (var line : i.commit().message()) {\n+                System.out.println(\"> \" + line);\n+            }\n+            hasDisplayedErrors = i.severity() == Severity.ERROR;\n+        }\n+    }\n+\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/JCheckCLIVisitor.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,2 @@\n-                                ProblemListsConfiguration.DEFAULT);\n+                                ProblemListsConfiguration.DEFAULT,\n+                                CopyrightConfiguration.DEFAULT);\n@@ -49,0 +50,1 @@\n+    private final CopyrightConfiguration copyright;\n@@ -57,1 +59,2 @@\n-                        ProblemListsConfiguration problemlists) {\n+                        ProblemListsConfiguration problemlists,\n+                        CopyrightConfiguration copyright) {\n@@ -66,0 +69,1 @@\n+        this.copyright = copyright;\n@@ -118,0 +122,4 @@\n+    public CopyrightConfiguration copyright(){\n+        return copyright;\n+    }\n+\n@@ -136,1 +144,2 @@\n-        return new ChecksConfiguration(error, warning, whitespace, reviewers, merge, committer, issues, problemlists);\n+        var copyright = CopyrightConfiguration.parse(s.subsection(CopyrightConfiguration.name()));\n+        return new ChecksConfiguration(error, warning, whitespace, reviewers, merge, committer, issues, problemlists, copyright);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ChecksConfiguration.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import org.openjdk.skara.census.Census;\n+import org.openjdk.skara.vcs.Commit;\n+import org.openjdk.skara.vcs.ReadOnlyRepository;\n+import org.openjdk.skara.vcs.openjdk.CommitMessage;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.time.Year;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+public class CopyrightCheck extends CommitCheck {\n+\n+    private final ReadOnlyRepository repo;\n+\n+    private final static Pattern COPYRIGHT_PATTERN = Pattern.compile(\".*Copyright \\\\(c\\\\) (\\\\d{4})(?:, (\\\\d{4}))?, Oracle and\/or its affiliates\\\\. All rights reserved\\\\.\");\n+\n+    CopyrightCheck(ReadOnlyRepository repo) {\n+        this.repo = repo;\n+    }\n+\n+    @Override\n+    Iterator<Issue> check(Commit commit, CommitMessage message, JCheckConfiguration conf, Census census) {\n+        var metadata = CommitIssue.metadata(commit, message, conf, this);\n+        var pattern = Pattern.compile(conf.checks().copyright().files());\n+\n+        var filesWithCopyrightFormatIssue = new ArrayList<String>();\n+        var filesWithCopyrightYearIssue = new ArrayList<String>();\n+        var filesWithCopyrightMissingIssue = new ArrayList<String>();\n+\n+        for (var diff : commit.parentDiffs()) {\n+            for (var patch : diff.patches()) {\n+                if (patch.target().path().isEmpty() || patch.isBinary()) {\n+                    continue;\n+                }\n+                var path = patch.target().path().get();\n+                if (pattern.matcher(path.toString()).matches()) {\n+                    try {\n+                        var lines = repo.lines(path, commit.hash()).orElse(List.of());\n+                        var copyrightFound = false;\n+                        for (String line : lines) {\n+                            if (line.contains(\"Copyright (c)\") && line.contains(\"Oracle\")) {\n+                                copyrightFound = true;\n+                                var matcher = COPYRIGHT_PATTERN.matcher(line);\n+                                if (matcher.matches()) {\n+                                    int minYear = Integer.parseInt(matcher.group(1));\n+                                    int maxYear = matcher.group(2) != null ? Integer.parseInt(matcher.group(2)) : minYear;\n+                                    int currentYear = Year.now().getValue();\n+                                    if (currentYear != maxYear) {\n+                                        filesWithCopyrightYearIssue.add(path.toString());\n+                                    }\n+                                } else {\n+                                    filesWithCopyrightFormatIssue.add(path.toString());\n+                                }\n+                            }\n+                        }\n+                        if (!copyrightFound) {\n+                            filesWithCopyrightMissingIssue.add(path.toString());\n+                        }\n+                    } catch (IOException e) {\n+                        throw new RuntimeException(e);\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!filesWithCopyrightFormatIssue.isEmpty() || !filesWithCopyrightYearIssue.isEmpty() || !filesWithCopyrightMissingIssue.isEmpty()) {\n+            return iterator(new CopyrightIssue(metadata, filesWithCopyrightFormatIssue, filesWithCopyrightYearIssue, filesWithCopyrightMissingIssue));\n+        }\n+\n+        return iterator();\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"copyright\";\n+    }\n+\n+    @Override\n+    public String description() {\n+        return \"Copyright should be properly formatted\";\n+    }\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CopyrightCheck.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import org.openjdk.skara.ini.Section;\n+\n+public class CopyrightConfiguration {\n+    static final CopyrightConfiguration DEFAULT =\n+            new CopyrightConfiguration(\".*\\\\.cpp|.*\\\\.hpp|.*\\\\.c|.*\\\\.h|.*\\\\.java\");\n+\n+    private final String files;\n+\n+    CopyrightConfiguration(String files) {\n+        this.files = files;\n+    }\n+\n+    public String files() {\n+        return files;\n+    }\n+\n+    static String name() {\n+        return \"copyright\";\n+    }\n+\n+    static CopyrightConfiguration parse(Section s) {\n+        if (s == null) {\n+            return DEFAULT;\n+        }\n+\n+        var files = s.get(\"files\", DEFAULT.files());\n+        return new CopyrightConfiguration(files);\n+    }\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CopyrightConfiguration.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import java.util.List;\n+\n+public class CopyrightIssue extends CommitIssue {\n+\n+    List<String> filesWithCopyrightFormatIssue;\n+    List<String> filesWithCopyrightYearIssue;\n+    List<String> filesWithCopyrightMissingIssue;\n+\n+    CopyrightIssue(CommitIssue.Metadata metadata, List<String> filesWithCopyrightFormatIssue, List<String> filesWithCopyrightYearIssue,\n+                   List<String> filesWithCopyrightMissingIssue) {\n+        super(metadata);\n+        this.filesWithCopyrightFormatIssue = filesWithCopyrightFormatIssue;\n+        this.filesWithCopyrightYearIssue = filesWithCopyrightYearIssue;\n+        this.filesWithCopyrightMissingIssue = filesWithCopyrightMissingIssue;\n+    }\n+\n+    @Override\n+    public void accept(IssueVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    public List<String> filesWithCopyrightFormatIssue() {\n+        return filesWithCopyrightFormatIssue;\n+    }\n+\n+    public List<String> filesWithCopyrightYearIssue() {\n+        return filesWithCopyrightYearIssue;\n+    }\n+\n+    public List<String> filesWithCopyrightMissingIssue() {\n+        return filesWithCopyrightMissingIssue;\n+    }\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CopyrightIssue.java","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -48,0 +48,1 @@\n+    void visit(CopyrightIssue copyrightIssue);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssueVisitor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,1 +93,2 @@\n-            new IssuesTitleCheck()\n+            new IssuesTitleCheck(),\n+            new CopyrightCheck(repository)\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestableRepository;\n+import org.openjdk.skara.vcs.Commit;\n+import org.openjdk.skara.vcs.VCS;\n+import org.openjdk.skara.vcs.openjdk.CommitMessage;\n+import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class CopyrightCheckTests {\n+\n+    private static JCheckConfiguration conf() {\n+        return JCheckConfiguration.parse(List.of(\n+                \"[general]\",\n+                \"project = test\",\n+                \"[checks]\",\n+                \"error = copyright\"\n+        ));\n+    }\n+\n+    private static CommitMessage message(Commit c) {\n+        return CommitMessageParsers.v1.parse(c);\n+    }\n+\n+    @Test\n+    void CopyrightFormatIssueWithTrailingWhiteSpace() throws IOException {\n+        try (var dir = new TemporaryDirectory()) {\n+            var r = TestableRepository.init(dir.path(), VCS.GIT);\n+\n+            var afile = dir.path().resolve(\"a.java\");\n+            Files.write(afile, List.of(\"\/*\\n\" +\n+                    \" * Copyright (c) 2024,  Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\"));\n+            r.add(afile);\n+            var first = r.commit(\"1: Added a.java\", \"duke\", \"duke@openjdk.org\");\n+\n+            var check = new CopyrightCheck(r);\n+            var commit = r.lookup(first).orElseThrow();\n+            var issue = (CopyrightIssue) check.check(commit, message(commit), conf(), null).next();\n+            assertTrue(issue.filesWithCopyrightYearIssue.isEmpty());\n+            assertEquals(1, issue.filesWithCopyrightFormatIssue.size());\n+\n+            \/\/ Now, remove the trailing whitespace\n+            Files.write(afile, List.of(\"\/*\\n\" +\n+                    \" * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\"));\n+            r.add(afile);\n+            var second = r.commit(\"2: Modified a.java\", \"duke\", \"duke@openjdk.org\");\n+            check = new CopyrightCheck(r);\n+            commit = r.lookup(second).orElseThrow();\n+            assertFalse(check.check(commit, message(commit), conf(), null).hasNext());\n+        }\n+    }\n+\n+    @Test\n+    void CopyrightYearIssue() throws IOException {\n+        try (var dir = new TemporaryDirectory()) {\n+            var r = TestableRepository.init(dir.path(), VCS.GIT);\n+\n+            var afile = dir.path().resolve(\"a.java\");\n+            Files.write(afile, List.of(\"\/*\\n\" +\n+                    \" * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\"));\n+            r.add(afile);\n+            var first = r.commit(\"1: Added a.java\", \"duke\", \"duke@openjdk.org\");\n+\n+            var check = new CopyrightCheck(r);\n+            var commit = r.lookup(first).orElseThrow();\n+            var issue = (CopyrightIssue) check.check(commit, message(commit), conf(), null).next();\n+            assertEquals(1, issue.filesWithCopyrightYearIssue.size());\n+            assertTrue(issue.filesWithCopyrightFormatIssue.isEmpty());\n+\n+            \/\/ Update the copyright year\n+            Files.write(afile, List.of(\"\/*\\n\" +\n+                    \" * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\"));\n+            r.add(afile);\n+            var second = r.commit(\"2: Modified a.java\", \"duke\", \"duke@openjdk.org\");\n+            check = new CopyrightCheck(r);\n+            commit = r.lookup(second).orElseThrow();\n+            assertFalse(check.check(commit, message(commit), conf(), null).hasNext());\n+        }\n+    }\n+}\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/CopyrightCheckTests.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -246,0 +246,5 @@\n+        @Override\n+        public void visit(CopyrightIssue e) {\n+            issues.add(e);\n+        }\n+\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckTests.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -84,0 +84,3 @@\n+            output.append(\"\\n\");\n+            output.append(\"[checks \\\"copyright\\\"]\\n\");\n+            output.append(\"files=.*\\\\.txt\\n\");\n@@ -93,1 +96,1 @@\n-        return init(path, vcs, appendableFilePath, errorChecks, Set.of(\"issuestitle\"), version);\n+        return init(path, vcs, appendableFilePath, errorChecks, Set.of(), version);\n@@ -97,1 +100,1 @@\n-        return init(path, vcs, appendableFilePath, Set.of(\"author\", \"reviewers\", \"whitespace\"), Set.of(\"issuestitle\"), \"0.1\");\n+        return init(path, vcs, appendableFilePath, Set.of(\"author\", \"reviewers\", \"whitespace\"), Set.of(), \"0.1\");\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/CheckableRepository.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"}]}