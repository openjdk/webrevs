{"files":[{"patch":"@@ -332,4 +332,2 @@\n-        if (!issue.filesWithCopyrightFormatIssue().isEmpty()) {\n-            for (var entry : issue.filesWithCopyrightFormatIssue().entrySet()) {\n-                messages.add(\"Found copyright format issue for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n-            }\n+        for (var entry : issue.filesWithCopyrightFormatIssue().entrySet()) {\n+            messages.add(\"Found copyright format issue for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n@@ -337,4 +335,2 @@\n-        if (!issue.filesWithCopyrightMissingIssue().isEmpty()) {\n-            for (var entry : issue.filesWithCopyrightMissingIssue().entrySet()) {\n-                messages.add(\"Can't find copyright header for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n-            }\n+        for (var entry : issue.filesWithCopyrightMissingIssue().entrySet()) {\n+            messages.add(\"Can't find copyright header for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -332,4 +332,2 @@\n-            if (!i.filesWithCopyrightFormatIssue().isEmpty()) {\n-                for (var entry : i.filesWithCopyrightFormatIssue().entrySet()) {\n-                    println(i, \"Found copyright format issue for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n-                }\n+            for (var entry : i.filesWithCopyrightFormatIssue().entrySet()) {\n+                println(i, \"Found copyright format issue for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n@@ -337,4 +335,2 @@\n-            if (!i.filesWithCopyrightMissingIssue().isEmpty()) {\n-                for (var entry : i.filesWithCopyrightMissingIssue().entrySet()) {\n-                    println(i, \"Can't find copyright header for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n-                }\n+            for (var entry : i.filesWithCopyrightMissingIssue().entrySet()) {\n+                println(i, \"Can't find copyright header for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/JCheckCLIVisitor.java","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.io.UncheckedIOException;\n@@ -52,2 +53,2 @@\n-        var pattern = Pattern.compile(copyrightConf.files());\n-        var copyrightSingleCheckConfigurations = copyrightConf.singleCheckConfigurations();\n+        var filesPattern = Pattern.compile(copyrightConf.files());\n+        var copyrightConfigs = copyrightConf.copyrightConfigs();\n@@ -64,1 +65,1 @@\n-                if (pattern.matcher(path.toString()).matches()) {\n+                if (filesPattern.matcher(path.toString()).matches()) {\n@@ -68,1 +69,1 @@\n-                        for (var singleConf : copyrightSingleCheckConfigurations) {\n+                        for (var singleConf : copyrightConfigs) {\n@@ -71,1 +72,1 @@\n-                                if (singleConf.locator.matcher(line).matches()) {\n+                                if (singleConf.locator().matcher(line).matches()) {\n@@ -73,1 +74,1 @@\n-                                    if (!singleConf.validator.matcher(line).matches()) {\n+                                    if (!singleConf.validator().matcher(line).matches()) {\n@@ -75,1 +76,1 @@\n-                                                .computeIfAbsent(singleConf.name, k -> new ArrayList<>())\n+                                                .computeIfAbsent(singleConf.name(), k -> new ArrayList<>())\n@@ -81,1 +82,1 @@\n-                            if (singleConf.required && !copyrightFound) {\n+                            if (singleConf.required() && !copyrightFound) {\n@@ -83,1 +84,1 @@\n-                                        .computeIfAbsent(singleConf.name, k -> new ArrayList<>())\n+                                        .computeIfAbsent(singleConf.name(), k -> new ArrayList<>())\n@@ -88,1 +89,1 @@\n-                        throw new RuntimeException(e);\n+                        throw new UncheckedIOException(e);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CopyrightFormatCheck.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -32,0 +32,34 @@\n+\n+    public static class CopyrightConfiguration {\n+        private final String name;\n+        \/\/ Regex used to locate the copyright line\n+        private final Pattern locator;\n+        \/\/ Regex used to validate the copyright line\n+        private final Pattern validator;\n+        \/\/ Indicates whether a copyright is required for each file; if true, the check will fail if the copyright is missing\n+        private final boolean required;\n+\n+        CopyrightConfiguration(String name, Pattern locator, Pattern validator, boolean required) {\n+            this.name = name;\n+            this.locator = locator;\n+            this.validator = validator;\n+            this.required = required;\n+        }\n+\n+        public String name() {\n+            return name;\n+        }\n+\n+        public Pattern locator() {\n+            return locator;\n+        }\n+\n+        public Pattern validator() {\n+            return validator;\n+        }\n+\n+        public boolean required() {\n+            return required;\n+        }\n+    }\n+\n@@ -33,1 +67,1 @@\n-    private final List<CopyrightSingleCheckConfiguration> singleCheckConfigurations;\n+    private final List<CopyrightConfiguration> copyrightConfigs;\n@@ -35,1 +69,1 @@\n-    CopyrightFormatConfiguration(String files, List<CopyrightSingleCheckConfiguration> singleCheckConfigurations) {\n+    CopyrightFormatConfiguration(String files, List<CopyrightConfiguration> copyrightConfigs) {\n@@ -37,1 +71,1 @@\n-        this.singleCheckConfigurations = singleCheckConfigurations;\n+        this.copyrightConfigs = copyrightConfigs;\n@@ -44,2 +78,2 @@\n-    public List<CopyrightSingleCheckConfiguration> singleCheckConfigurations() {\n-        return singleCheckConfigurations;\n+    public List<CopyrightConfiguration> copyrightConfigs() {\n+        return copyrightConfigs;\n@@ -58,1 +92,1 @@\n-        var configurations = new ArrayList<CopyrightSingleCheckConfiguration>();\n+        var configurations = new ArrayList<CopyrightConfiguration>();\n@@ -67,1 +101,1 @@\n-                configurations.add(new CopyrightSingleCheckConfiguration(name, locator, validator, required));\n+                configurations.add(new CopyrightConfiguration(name, locator, validator, required));\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CopyrightFormatConfiguration.java","additions":41,"deletions":7,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -1,42 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.jcheck;\n-\n-import java.util.regex.Pattern;\n-\n-public class CopyrightSingleCheckConfiguration {\n-    String name;\n-    \/\/ Regex used to locate the copyright line\n-    Pattern locator;\n-    \/\/ Regex used to validate the copyright line\n-    Pattern validator;\n-    \/\/ Indicates whether a copyright is required for each file; if true, the check will fail if the copyright is missing\n-    boolean required;\n-\n-    CopyrightSingleCheckConfiguration(String name, Pattern locator, Pattern validator, boolean required) {\n-        this.name = name;\n-        this.locator = locator;\n-        this.validator = validator;\n-        this.required = required;\n-    }\n-}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CopyrightSingleCheckConfiguration.java","additions":0,"deletions":42,"binary":false,"changes":42,"status":"deleted"}]}