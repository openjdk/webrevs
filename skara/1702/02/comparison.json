{"files":[{"patch":"@@ -328,0 +328,13 @@\n+\n+    @Override\n+    public void visit(CopyrightFormatIssue issue) {\n+        List<String> messages = new ArrayList<>();\n+        for (var entry : issue.filesWithCopyrightFormatIssue().entrySet()) {\n+            messages.add(\"Found copyright format issue for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n+        }\n+        for (var entry : issue.filesWithCopyrightMissingIssue().entrySet()) {\n+            messages.add(\"Can't find copyright header for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n+        }\n+        addMessage(issue.check(), String.join(\"\\n\", messages),\n+                issue.severity());\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -3270,1 +3270,1 @@\n-            assertEquals(\"line 19: entry must be of form 'key = value'\", check.summary().get());\n+            assertEquals(\"line 27: entry must be of form 'key = value'\", check.summary().get());\n@@ -3718,1 +3718,1 @@\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"));\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"),Set.of(\"author\", \"reviewers\", \"whitespace\"), Set.of(\"issuestitle\"), \"0.1\");\n@@ -3771,0 +3771,59 @@\n+\n+    @Test\n+    void copyrightCheck(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .issuePRMap(issuePRMap)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"),Set.of(\"author\", \"reviewers\", \"whitespace\"), Set.of(\"copyright\"), \"0.1\");\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"\/*\\n\" +\n+                    \" * Copyright (c) 2024,  Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\");\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Pull Request\", List.of(\"Body\"), false);\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().body().contains(\"Found copyright format issue for oracle in [appendable.txt]\"));\n+\n+            \/\/ Fix the issue\n+            var editHash2 = CheckableRepository.replaceAndCommit(localRepo, \"\/*\\n\" +\n+                    \" * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\");\n+            localRepo.push(editHash2, author.authenticatedUrl(), \"edit\", true);\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().body().contains(\"Found copyright format issue for oracle in [appendable.txt]\"));\n+\n+            \/\/ Replace the oracle copyright with red hat one\n+            var editHash3 = CheckableRepository.replaceAndCommit(localRepo, \"\/*\\n\" +\n+                    \" * Copyright (c) 2024,  Red Hat, Inc.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\");\n+            localRepo.push(editHash3, author.authenticatedUrl(), \"edit\", true);\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().body().contains(\"Found copyright format issue for redhat in [appendable.txt]\"));\n+            assertTrue(pr.store().body().contains(\"Can't find copyright header for oracle in [appendable.txt]\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":61,"deletions":2,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -329,0 +329,16 @@\n+    @Override\n+    public void visit(CopyrightFormatIssue i) {\n+        if (!ignore.contains(i.check().name()) && !isLax) {\n+            for (var entry : i.filesWithCopyrightFormatIssue().entrySet()) {\n+                println(i, \"Found copyright format issue for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n+            }\n+            for (var entry : i.filesWithCopyrightMissingIssue().entrySet()) {\n+                println(i, \"Can't find copyright header for \" + entry.getKey() + \" in [\" + String.join(\", \", entry.getValue()) + \"]\");\n+            }\n+            for (var line : i.commit().message()) {\n+                System.out.println(\"> \" + line);\n+            }\n+            hasDisplayedErrors = i.severity() == Severity.ERROR;\n+        }\n+    }\n+\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/JCheckCLIVisitor.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,2 @@\n-                                ProblemListsConfiguration.DEFAULT);\n+                                ProblemListsConfiguration.DEFAULT,\n+                                null);\n@@ -49,0 +50,1 @@\n+    private final CopyrightFormatConfiguration copyright;\n@@ -57,1 +59,2 @@\n-                        ProblemListsConfiguration problemlists) {\n+                        ProblemListsConfiguration problemlists,\n+                        CopyrightFormatConfiguration copyright) {\n@@ -66,0 +69,1 @@\n+        this.copyright = copyright;\n@@ -118,0 +122,4 @@\n+    public CopyrightFormatConfiguration copyright(){\n+        return copyright;\n+    }\n+\n@@ -136,1 +144,2 @@\n-        return new ChecksConfiguration(error, warning, whitespace, reviewers, merge, committer, issues, problemlists);\n+        var copyright = CopyrightFormatConfiguration.parse(s.subsection(CopyrightFormatConfiguration.name()));\n+        return new ChecksConfiguration(error, warning, whitespace, reviewers, merge, committer, issues, problemlists, copyright);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ChecksConfiguration.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import org.openjdk.skara.census.Census;\n+import org.openjdk.skara.vcs.Commit;\n+import org.openjdk.skara.vcs.ReadOnlyRepository;\n+import org.openjdk.skara.vcs.openjdk.CommitMessage;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+public class CopyrightFormatCheck extends CommitCheck {\n+\n+    private final ReadOnlyRepository repo;\n+\n+    CopyrightFormatCheck(ReadOnlyRepository repo) {\n+        this.repo = repo;\n+    }\n+\n+    @Override\n+    Iterator<Issue> check(Commit commit, CommitMessage message, JCheckConfiguration conf, Census census) {\n+        var metadata = CommitIssue.metadata(commit, message, conf, this);\n+        var copyrightConf = conf.checks().copyright();\n+        if (copyrightConf == null) {\n+            return iterator();\n+        }\n+        var filesPattern = Pattern.compile(copyrightConf.files());\n+        var copyrightConfigs = copyrightConf.copyrightConfigs();\n+        var filesWithCopyrightFormatIssue = new HashMap<String, List<String>>();\n+        var filesWithCopyrightMissingIssue = new HashMap<String, List<String>>();\n+\n+        for (var diff : commit.parentDiffs()) {\n+            for (var patch : diff.patches()) {\n+                if (patch.target().path().isEmpty() || patch.isBinary()) {\n+                    continue;\n+                }\n+                var path = patch.target().path().get();\n+                \/\/ Check if we need to check copyright in this type of file\n+                if (filesPattern.matcher(path.toString()).matches()) {\n+                    try {\n+                        var lines = repo.lines(path, commit.hash()).orElse(List.of());\n+                        \/\/ Iterate over every kind of configured copyright\n+                        for (var singleConf : copyrightConfigs) {\n+                            var copyrightFound = false;\n+                            for (String line : lines) {\n+                                if (singleConf.locator().matcher(line).matches()) {\n+                                    copyrightFound = true;\n+                                    if (!singleConf.validator().matcher(line).matches()) {\n+                                        filesWithCopyrightFormatIssue\n+                                                .computeIfAbsent(singleConf.name(), k -> new ArrayList<>())\n+                                                .add(path.toString());\n+                                    }\n+                                    break;\n+                                }\n+                            }\n+                            if (singleConf.required() && !copyrightFound) {\n+                                filesWithCopyrightMissingIssue\n+                                        .computeIfAbsent(singleConf.name(), k -> new ArrayList<>())\n+                                        .add(path.toString());\n+                            }\n+                        }\n+                    } catch (IOException e) {\n+                        throw new UncheckedIOException(e);\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!filesWithCopyrightFormatIssue.isEmpty() || !filesWithCopyrightMissingIssue.isEmpty()) {\n+            return iterator(new CopyrightFormatIssue(metadata, filesWithCopyrightFormatIssue, filesWithCopyrightMissingIssue));\n+        }\n+\n+        return iterator();\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"copyright\";\n+    }\n+\n+    @Override\n+    public String description() {\n+        return \"Copyright should be properly formatted\";\n+    }\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CopyrightFormatCheck.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import org.openjdk.skara.ini.Section;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+public class CopyrightFormatConfiguration {\n+\n+    public static class CopyrightConfiguration {\n+        private final String name;\n+        \/\/ Regex used to locate the copyright line\n+        private final Pattern locator;\n+        \/\/ Regex used to validate the copyright line\n+        private final Pattern validator;\n+        \/\/ Indicates whether a copyright is required for each file; if true, the check will fail if the copyright is missing\n+        private final boolean required;\n+\n+        CopyrightConfiguration(String name, Pattern locator, Pattern validator, boolean required) {\n+            this.name = name;\n+            this.locator = locator;\n+            this.validator = validator;\n+            this.required = required;\n+        }\n+\n+        public String name() {\n+            return name;\n+        }\n+\n+        public Pattern locator() {\n+            return locator;\n+        }\n+\n+        public Pattern validator() {\n+            return validator;\n+        }\n+\n+        public boolean required() {\n+            return required;\n+        }\n+    }\n+\n+    private final String files;\n+    private final List<CopyrightConfiguration> copyrightConfigs;\n+\n+    CopyrightFormatConfiguration(String files, List<CopyrightConfiguration> copyrightConfigs) {\n+        this.files = files;\n+        this.copyrightConfigs = copyrightConfigs;\n+    }\n+\n+    public String files() {\n+        return files;\n+    }\n+\n+    public List<CopyrightConfiguration> copyrightConfigs() {\n+        return copyrightConfigs;\n+    }\n+\n+    static String name() {\n+        return \"copyright\";\n+    }\n+\n+    static CopyrightFormatConfiguration parse(Section s) {\n+        if (s == null) {\n+            return null;\n+        }\n+\n+        var files = s.get(\"files\").asString();\n+        var configurations = new ArrayList<CopyrightConfiguration>();\n+        for (var entry : s.entries()) {\n+            var key = entry.key();\n+            var value = entry.value();\n+            if (key.contains(\"locator\")) {\n+                var name = key.split(\"_\")[0];\n+                var locator = Pattern.compile(value.asString());\n+                var validator = Pattern.compile(s.get(name + \"_validator\", \"\"));\n+                var required = s.get(name + \"_required\", false);\n+                configurations.add(new CopyrightConfiguration(name, locator, validator, required));\n+            }\n+        }\n+        return new CopyrightFormatConfiguration(files, configurations);\n+    }\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CopyrightFormatConfiguration.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+\n+public class CopyrightFormatIssue extends CommitIssue {\n+\n+    HashMap<String, List<String>> filesWithCopyrightFormatIssue;\n+    HashMap<String, List<String>> filesWithCopyrightMissingIssue;\n+\n+    CopyrightFormatIssue(CommitIssue.Metadata metadata, HashMap<String, List<String>> filesWithCopyrightFormatIssue, HashMap<String, List<String>> filesWithCopyrightMissingIssue) {\n+        super(metadata);\n+        this.filesWithCopyrightFormatIssue = filesWithCopyrightFormatIssue;\n+        this.filesWithCopyrightMissingIssue = filesWithCopyrightMissingIssue;\n+    }\n+\n+    @Override\n+    public void accept(IssueVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    public HashMap<String, List<String>> filesWithCopyrightFormatIssue() {\n+        return filesWithCopyrightFormatIssue;\n+    }\n+\n+    public HashMap<String, List<String>> filesWithCopyrightMissingIssue() {\n+        return filesWithCopyrightMissingIssue;\n+    }\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/CopyrightFormatIssue.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"},{"patch":"@@ -48,0 +48,1 @@\n+    void visit(CopyrightFormatIssue copyrightFormatIssue);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssueVisitor.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -93,1 +93,2 @@\n-            new IssuesTitleCheck()\n+            new IssuesTitleCheck(),\n+            new CopyrightFormatCheck(repository)\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestableRepository;\n+import org.openjdk.skara.vcs.Commit;\n+import org.openjdk.skara.vcs.VCS;\n+import org.openjdk.skara.vcs.openjdk.CommitMessage;\n+import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class CopyrightFormatCheckTests {\n+\n+    private static JCheckConfiguration conf() {\n+        return JCheckConfiguration.parse(List.of(\n+                \"[general]\",\n+                \"project = test\",\n+                \"[checks]\",\n+                \"error = copyright\",\n+                \"[checks \\\"copyright\\\"]\",\n+                \"files=.*\\\\.cpp|.*\\\\.hpp|.*\\\\.c|.*\\\\.h|.*\\\\.java|.*\\\\.cc|.*\\\\.hh\",\n+                \"oracle_locator=.*Copyright \\\\(c\\\\)(.*)Oracle and\/or its affiliates\\\\. All rights reserved\\\\.\",\n+                \"oracle_validator=.*Copyright \\\\(c\\\\) (\\\\d{4})(?:, (\\\\d{4}))?, Oracle and\/or its affiliates\\\\. All rights reserved\\\\.\",\n+                \"oracle_required=true\",\n+                \"redhat_locator=.*Copyright \\\\(c\\\\)(.*)Red Hat, Inc\\\\.\",\n+                \"redhat_validator=.*Copyright \\\\(c\\\\) (\\\\d{4})(?:, (\\\\d{4}))?, Red Hat, Inc\\\\.\"\n+        ));\n+    }\n+\n+    private static CommitMessage message(Commit c) {\n+        return CommitMessageParsers.v1.parse(c);\n+    }\n+\n+    @Test\n+    void CopyrightFormatIssueWithTrailingWhiteSpace() throws IOException {\n+        try (var dir = new TemporaryDirectory()) {\n+            var r = TestableRepository.init(dir.path(), VCS.GIT);\n+\n+            var afile = dir.path().resolve(\"a.java\");\n+            Files.write(afile, List.of(\"\/*\\n\" +\n+                    \" * Copyright (c) 2024,  Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\"));\n+            r.add(afile);\n+            var first = r.commit(\"1: Added a.java\", \"duke\", \"duke@openjdk.org\");\n+\n+            var check = new CopyrightFormatCheck(r);\n+            var commit = r.lookup(first).orElseThrow();\n+            var issue = (CopyrightFormatIssue) check.check(commit, message(commit), conf(), null).next();\n+            assertEquals(1, issue.filesWithCopyrightFormatIssue.size());\n+            assertEquals(0, issue.filesWithCopyrightMissingIssue.size());\n+            assertTrue(issue.filesWithCopyrightFormatIssue.containsKey(\"oracle\"));\n+\n+            \/\/ Remove the trailing whitespace\n+            Files.write(afile, List.of(\"\/*\\n\" +\n+                    \" * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\"));\n+            r.add(afile);\n+            var second = r.commit(\"2: Modified a.java\", \"duke\", \"duke@openjdk.org\");\n+            check = new CopyrightFormatCheck(r);\n+            commit = r.lookup(second).orElseThrow();\n+            \/\/ No issue right now\n+            assertFalse(check.check(commit, message(commit), conf(), null).hasNext());\n+\n+            \/\/ Add a Red Hat copyright with a trailing whitespace issue\n+            Files.write(afile, List.of(\"\/*\\n\" +\n+                    \" * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\\n\" +\n+                    \" * Copyright (c) 2024,  Red Hat, Inc.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\"));\n+            r.add(afile);\n+            var third = r.commit(\"3: Modified a.java\", \"duke\", \"duke@openjdk.org\");\n+            check = new CopyrightFormatCheck(r);\n+            commit = r.lookup(third).orElseThrow();\n+            issue = (CopyrightFormatIssue) check.check(commit, message(commit), conf(), null).next();\n+            assertEquals(1, issue.filesWithCopyrightFormatIssue.size());\n+            assertEquals(0, issue.filesWithCopyrightMissingIssue.size());\n+            assertTrue(issue.filesWithCopyrightFormatIssue.containsKey(\"redhat\"));\n+\n+            \/\/ Remove oracle copyright header and fix redhat copyright\n+            Files.write(afile, List.of(\"\/*\\n\" +\n+                    \" * Copyright (c) 2024, Red Hat, Inc.\\n\" +\n+                    \" * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\\n\" +\n+                    \" *\/\\n\"));\n+            r.add(afile);\n+            var fourth = r.commit(\"4: Modified a.java\", \"duke\", \"duke@openjdk.org\");\n+            check = new CopyrightFormatCheck(r);\n+            commit = r.lookup(fourth).orElseThrow();\n+            issue = (CopyrightFormatIssue) check.check(commit, message(commit), conf(), null).next();\n+            assertEquals(0, issue.filesWithCopyrightFormatIssue.size());\n+            assertEquals(1, issue.filesWithCopyrightMissingIssue.size());\n+            assertTrue(issue.filesWithCopyrightMissingIssue.containsKey(\"oracle\"));\n+        }\n+    }\n+}\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/CopyrightFormatCheckTests.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -246,0 +246,5 @@\n+        @Override\n+        public void visit(CopyrightFormatIssue e) {\n+            issues.add(e);\n+        }\n+\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckTests.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -84,0 +84,8 @@\n+            output.append(\"\\n\");\n+            output.append(\"[checks \\\"copyright\\\"]\\n\");\n+            output.append(\"files=.*\\\\.txt\\n\");\n+            output.append(\"oracle_locator=.*Copyright \\\\(c\\\\)(.*)Oracle and\/or its affiliates\\\\. All rights reserved\\\\.\\n\");\n+            output.append(\"oracle_validator=.*Copyright \\\\(c\\\\) (\\\\d{4})(?:, (\\\\d{4}))?, Oracle and\/or its affiliates\\\\. All rights reserved\\\\.\\n\");\n+            output.append(\"oracle_required=true\\n\");\n+            output.append(\"redhat_locator=.*Copyright \\\\(c\\\\)(.*)Red Hat, Inc\\\\.\\n\");\n+            output.append(\"redhat_validator=.*Copyright \\\\(c\\\\) (\\\\d{4})(?:, (\\\\d{4}))?, Red Hat, Inc\\\\.\\n\");\n@@ -93,1 +101,1 @@\n-        return init(path, vcs, appendableFilePath, errorChecks, Set.of(\"issuestitle\"), version);\n+        return init(path, vcs, appendableFilePath, errorChecks, Set.of(), version);\n@@ -97,1 +105,1 @@\n-        return init(path, vcs, appendableFilePath, Set.of(\"author\", \"reviewers\", \"whitespace\"), Set.of(\"issuestitle\"), \"0.1\");\n+        return init(path, vcs, appendableFilePath, Set.of(\"author\", \"reviewers\", \"whitespace\"), Set.of(), \"0.1\");\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/CheckableRepository.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"}]}