{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,1 @@\n-    public static String toTextBrief(HostedRepository repository, Commit commit) {\n+    public static String toTextBrief(HostedRepository repository, Commit commit, Branch branch) {\n@@ -37,0 +37,3 @@\n+        if (branch != null) {\n+            printer.println(\"Branch: \" + branch.name());\n+        }\n@@ -59,1 +62,1 @@\n-    public static String toText(HostedRepository repository, Commit commit) {\n+    public static String toText(HostedRepository repository, Commit commit, Branch branch) {\n@@ -63,1 +66,1 @@\n-        printer.print(toTextBrief(repository, commit));\n+        printer.print(toTextBrief(repository, commit, branch));\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/CommitFormatters.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,0 +45,2 @@\n+    default void onTargetBranchChange(PullRequest pr, Path scratchPath, Issue issue) {\n+    }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestListener.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+    private final String targetBranch;\n@@ -44,0 +45,1 @@\n+        this.targetBranch = pr.targetRef();\n@@ -46,1 +48,1 @@\n-    PullRequestState(String prId, Set<String> issueIds, Hash commitId, Hash head, Issue.State state) {\n+    PullRequestState(String prId, Set<String> issueIds, Hash commitId, Hash head, Issue.State state, String targetBranch) {\n@@ -52,0 +54,1 @@\n+        this.targetBranch = targetBranch;\n@@ -74,0 +77,4 @@\n+    public String targetBranch() {\n+        return targetBranch;\n+    }\n+\n@@ -82,0 +89,1 @@\n+                \", targetBranch=\" + targetBranch +\n@@ -98,1 +106,2 @@\n-                Objects.equals(state, that.state);\n+                Objects.equals(state, that.state) &&\n+                Objects.equals(targetBranch, that.targetBranch);\n@@ -103,1 +112,1 @@\n-        return Objects.hash(prId, issueIds, commitId, head);\n+        return Objects.hash(prId, issueIds, commitId, head, targetBranch);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestState.java","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,1 @@\n-                           null : new Hash(obj.get(\"commit\").asString());\n+                               null : new Hash(obj.get(\"commit\").asString());\n@@ -99,0 +99,2 @@\n+                       var targetBranch = obj.get(\"targetBranch\") == null ?\n+                               null : obj.get(\"targetBranch\").asString();\n@@ -100,1 +102,1 @@\n-                       return new PullRequestState(id, issues, commit, new Hash(obj.get(\"head\").asString()), state);\n+                       return new PullRequestState(id, issues, commit, new Hash(obj.get(\"head\").asString()), state, targetBranch);\n@@ -102,1 +104,1 @@\n-                   .collect(Collectors.toSet());\n+                .collect(Collectors.toSet());\n@@ -136,0 +138,3 @@\n+                                if (pr.targetBranch() != null) {\n+                                    ret.put(\"targetBranch\", JSON.of(pr.targetBranch()));\n+                                }\n@@ -179,0 +184,4 @@\n+    private void notifyTargetBranchChange(String issueId, Path scratchPath) {\n+        listeners.forEach(c -> c.onTargetBranchChange(pr, scratchPath.resolve(c.name()), new Issue(issueId, \"\")));\n+    }\n+\n@@ -280,0 +289,6 @@\n+            var storedTargetBranch = storedState.get().targetBranch();\n+            if (state.targetBranch() != null && !state.targetBranch().equals(storedTargetBranch)) {\n+                storedIssues.stream()\n+                        .filter(issues::contains)\n+                        .forEach(issue -> notifyTargetBranchChange(issue, listenerScratchPath));\n+            }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/PullRequestWorkItem.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -199,2 +199,2 @@\n-                var linkBuilder = Link.create(repository.webUrl(hash), \"Commit\")\n-                                      .summary(repository.name() + \"\/\" + hash.abbreviate());\n+                var linkBuilder = Link.create(repository.webUrl(hash), \"Commit(\" + pr.targetRef() + \")\")\n+                        .summary(repository.name() + \"\/\" + hash.abbreviate());\n@@ -227,0 +227,36 @@\n+    public void onTargetBranchChange(PullRequest pr, Path scratchPath, org.openjdk.skara.vcs.openjdk.Issue issue) {\n+        var realIssue = issueProject.issue(issue.shortId());\n+        if (realIssue.isEmpty()) {\n+            log.warning(\"Pull request \" + pr + \" added unknown issue: \" + issue.id());\n+            return;\n+        }\n+\n+        if (reviewLink) {\n+            \/\/ Remove the previous link\n+            removeReviewLink(pr, realIssue.get());\n+            \/\/ Add a new link\n+            addReviewLink(pr, realIssue.get());\n+        }\n+\n+        log.info(\"Updating review link comment to issue \" + realIssue.get().id());\n+        PullRequestUtils.postPullRequestLinkComment(realIssue.get(), pr);\n+    }\n+\n+    private void addReviewLink(PullRequest pr, IssueTrackerIssue realIssue) {\n+        var linkBuilder = Link.create(pr.webUrl(), \"Review(\" + pr.targetRef() + \")\")\n+                .summary(pr.repository().name() + \"\/\" + pr.id());\n+        if (reviewIcon != null) {\n+            linkBuilder.iconTitle(\"Review\");\n+            linkBuilder.iconUrl(reviewIcon);\n+        }\n+\n+        log.info(\"Adding review link to issue \" + realIssue.id());\n+        realIssue.addLink(linkBuilder.build());\n+    }\n+\n+    private void removeReviewLink(PullRequest pr, IssueTrackerIssue realIssue) {\n+        log.info(\"Removing review links from issue \" + realIssue.id());\n+        var link = Link.create(pr.webUrl(), \"\").build();\n+        realIssue.removeLink(link);\n+    }\n+\n@@ -236,9 +272,1 @@\n-            var linkBuilder = Link.create(pr.webUrl(), \"Review\")\n-                                  .summary(pr.repository().name() + \"\/\" + pr.id());\n-            if (reviewIcon != null) {\n-                linkBuilder.iconTitle(\"Review\");\n-                linkBuilder.iconUrl(reviewIcon);\n-            }\n-\n-            log.info(\"Adding review link to issue \" + realIssue.get().id());\n-            realIssue.get().addLink(linkBuilder.build());\n+            addReviewLink(pr, realIssue.get());\n@@ -259,3 +287,1 @@\n-        log.info(\"Removing review links from issue \" + realIssue.get().id());\n-        var link = Link.create(pr.webUrl(), \"\").build();\n-        realIssue.get().removeLink(link);\n+        removeReviewLink(pr, realIssue.get());\n@@ -270,1 +296,1 @@\n-            var commitNotification = CommitFormatters.toTextBrief(linkRepository, commit);\n+            var commitNotification = CommitFormatters.toTextBrief(linkRepository, commit, branch);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":42,"deletions":16,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-            printer.println(CommitFormatters.toText(repository, commit));\n+            printer.println(CommitFormatters.toText(repository, commit, branch));\n@@ -259,1 +259,1 @@\n-        printer.println(CommitFormatters.toTextBrief(repository, taggedCommit));\n+        printer.println(CommitFormatters.toTextBrief(repository, taggedCommit, null));\n@@ -305,1 +305,1 @@\n-        printer.println(CommitFormatters.toTextBrief(repository, commit));\n+        printer.println(CommitFormatters.toTextBrief(repository, commit, null));\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/mailinglist\/MailingListNotifier.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -147,1 +147,1 @@\n-            assertEquals(\"Commit\", link.title().orElseThrow());\n+            assertEquals(\"Commit(master)\", link.title().orElseThrow());\n@@ -1665,1 +1665,1 @@\n-            issue.addComment(CommitFormatters.toTextBrief(repo, lastCommit).replace(editHash.toString(), editHash.abbreviate()));\n+            issue.addComment(CommitFormatters.toTextBrief(repo, lastCommit, new Branch(\"master\")).replace(editHash.toString(), editHash.abbreviate()));\n@@ -2228,1 +2228,1 @@\n-            assertEquals(\"Review\", link.title().orElseThrow());\n+            assertEquals(\"Review(master)\", link.title().orElseThrow());\n@@ -2501,0 +2501,74 @@\n+\n+    @Test\n+    void testTargetBranchUpdate(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.authenticatedUrl());\n+\n+            var tagStorage = createTagStorage(repo);\n+            var branchStorage = createBranchStorage(repo);\n+            var prStateStorage = createPullRequestStateStorage(repo);\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+\n+            var issueProject = credentials.getIssueProject();\n+            var reviewIcon = URI.create(\"http:\/\/www.example.com\/review.png\");\n+            var notifyBot = NotifyBot.newBuilder()\n+                    .repository(repo)\n+                    .storagePath(storageFolder)\n+                    .branches(Pattern.compile(\"master\"))\n+                    .tagStorageBuilder(tagStorage)\n+                    .branchStorageBuilder(branchStorage)\n+                    .prStateStorageBuilder(prStateStorage)\n+                    .integratorId(repo.forge().currentUser().id())\n+                    .build();\n+            var updater = IssueNotifier.newBuilder()\n+                    .issueProject(issueProject)\n+                    .reviewLink(true)\n+                    .reviewIcon(reviewIcon)\n+                    .build();\n+            \/\/ Register a RepositoryListener to make history initialize on the first run\n+            notifyBot.registerRepositoryListener(new NullRepositoryListener());\n+            updater.attachTo(notifyBot);\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Save the state\n+            var historyState = localRepo.fetch(repo.authenticatedUrl(), \"history\").orElseThrow();\n+\n+            \/\/ Create an issue and commit a fix\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\");\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"master\");\n+            var pr = credentials.createPullRequest(repo, \"master\", \"master\", issue.id() + \": Fix that issue\");\n+            pr.addLabel(\"rfr\");\n+            pr.setBody(\"\\n\\n### Issue\\n * [\" + issue.id() + \"](http:\/\/www.test.test\/): The issue\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ There should be a review link\n+            var links = issue.links();\n+            assertEquals(1, links.size());\n+            var link = links.get(0);\n+            assertEquals(reviewIcon, link.iconUrl().orElseThrow());\n+            assertEquals(\"Review(master)\", link.title().orElseThrow());\n+            assertEquals(pr.webUrl(), link.uri().orElseThrow());\n+            assertTrue(issue.comments().getLast().body().contains(\"Branch: master\"));\n+\n+            \/\/ Retarget the pr\n+            pr.setTargetRef(\"jdk23\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The review link should be updated\n+            links = issue.links();\n+            assertEquals(1, links.size());\n+            link = links.get(0);\n+            assertEquals(reviewIcon, link.iconUrl().orElseThrow());\n+            assertEquals(\"Review(jdk23)\", link.title().orElseThrow());\n+            assertEquals(pr.webUrl(), link.uri().orElseThrow());\n+            assertTrue(issue.comments().getLast().body().contains(\"Branch: jdk23\"));\n+        }\n+    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":77,"deletions":3,"binary":false,"changes":80,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -233,6 +233,10 @@\n-                .anyMatch(comment -> comment.body().contains(pullRequestMessage) && comment.body().contains(pr.webUrl().toString()));\n-        if (!alreadyPostedComment) {\n-            String builder = pullRequestMessage + \"\\n\" +\n-                    \"URL: \" + pr.webUrl().toString() + \"\\n\" +\n-                    \"Date: \" + pr.createdAt().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss +0000\"));\n-            issue.addComment(builder);\n+                .filter(comment -> comment.body().contains(pullRequestMessage) && comment.body().contains(pr.webUrl().toString()))\n+                .findFirst();\n+        String message = pullRequestMessage + \"\\n\" +\n+                \"Branch: \" + pr.targetRef() + \"\\n\" +\n+                \"URL: \" + pr.webUrl().toString() + \"\\n\" +\n+                \"Date: \" + pr.createdAt().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss +0000\"));\n+        if (alreadyPostedComment.isEmpty()) {\n+            issue.addComment(message);\n+        } else if (!alreadyPostedComment.get().body().equals(message)) {\n+            issue.updateComment(alreadyPostedComment.get().id(), message);\n@@ -276,1 +280,1 @@\n-        var urlMatcher = PR_URL_PATTERN.matcher(lines.get(1));\n+        var urlMatcher = PR_URL_PATTERN.matcher(lines.get(2));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUtils.java","additions":12,"deletions":8,"binary":false,"changes":20,"status":"modified"}]}