{"files":[{"patch":"@@ -29,0 +29,1 @@\n+        requires 'org.openjdk.skara.proxy'\n@@ -58,0 +59,1 @@\n+    testImplementation project(':proxy')\n","filename":"bots\/notify\/build.gradle","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-    private JbsVault vault = null;\n@@ -96,5 +95,0 @@\n-    public IssueNotifierBuilder vault(JbsVault vault) {\n-        this.vault = vault;\n-        return this;\n-    }\n-\n@@ -170,1 +164,1 @@\n-        var jbsBackport = new JbsBackport(issueProject.issueTracker().uri(), vault);\n+        var jbsBackport = new JbsBackport(issueProject.issueTracker());\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,13 +88,0 @@\n-        if (notifierConfiguration.contains(\"vault\")) {\n-            var vaultConfiguration = notifierConfiguration.get(\"vault\").asObject();\n-            var credential = new Credential(vaultConfiguration.get(\"username\").asString(), vaultConfiguration.get(\"password\").asString());\n-\n-            if (credential.username().startsWith(\"https:\/\/\")) {\n-                var vaultUrl = URIBuilder.base(credential.username()).build();\n-                var jbsVault = new JbsVault(vaultUrl, credential.password(), issueProject.issueTracker().uri());\n-                builder.vault(jbsVault);\n-            } else {\n-                throw new RuntimeException(\"basic authentication not implemented yet\");\n-            }\n-        }\n-\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-import static org.openjdk.skara.issuetracker.jira.JiraProject.RESOLVED_IN_BUILD;\n-\n@@ -36,1 +34,1 @@\n-    private final RestRequest backportRequest;\n+    private final IssueTracker.CustomEndpoint backportEndpoint;\n@@ -38,4 +36,4 @@\n-    private static URI backportRequest(URI uri) {\n-        return URIBuilder.base(uri)\n-                         .setPath(\"\/rest\/jbs\/1.0\/backport\/\")\n-                         .build();\n+    JbsBackport(IssueTracker tracker) {\n+        this.backportEndpoint = tracker.lookupCustomEndpoint(\"\/rest\/jbs\/1.0\/backport\/\").orElseThrow(() ->\n+            new IllegalArgumentException(\"Issue tracker does not support backport endpoint\")\n+        );\n@@ -44,7 +42,4 @@\n-    JbsBackport(URI uri, JbsVault vault) {\n-        if (vault != null) {\n-            backportRequest = new RestRequest(backportRequest(uri), vault.authId(), (r) -> Arrays.asList(\"Cookie\", vault.getCookie()));\n-        } else {\n-            backportRequest = null;\n-        }\n-    }\n+    IssueTrackerIssue createBackport(IssueTrackerIssue primary, String fixVersion, String assignee, String defaultSecurity) {\n+        var body = JSON.object()\n+                       .put(\"parentIssueKey\", primary.id())\n+                       .put(\"fixVersion\", fixVersion);\n@@ -52,28 +47,0 @@\n-    private IssueTrackerIssue createBackportIssue(IssueTrackerIssue primary, String fixVersion, String defaultSecurity) {\n-        var finalProperties = new HashMap<>(primary.properties());\n-        finalProperties.put(\"issuetype\", JSON.of(\"Backport\"));\n-        finalProperties.put(\"fixVersion\", JSON.of(fixVersion));\n-        if (!primary.properties().containsKey(\"security\") && defaultSecurity != null) {\n-            finalProperties.put(\"security\", JSON.of(defaultSecurity));\n-        }\n-        finalProperties.remove(RESOLVED_IN_BUILD);\n-\n-        var backport = primary.project().createIssue(primary.title(), primary.body().lines().collect(Collectors.toList()), finalProperties);\n-\n-        var backportLink = Link.create(backport, \"backported by\").build();\n-        primary.addLink(backportLink);\n-        return backport;\n-    }\n-\n-    public IssueTrackerIssue createBackport(IssueTrackerIssue primary, String fixVersion, String assignee, String defaultSecurity) {\n-        if (backportRequest == null) {\n-            if (primary.project().webUrl().toString().contains(\"openjdk.org\")) {\n-                throw new RuntimeException(\"Backports on JBS require vault authentication\");\n-            } else {\n-                return createBackportIssue(primary, fixVersion, defaultSecurity);\n-            }\n-        }\n-\n-        var request = backportRequest.post()\n-                                     .body(\"parentIssueKey\", primary.id())\n-                                     .body(\"fixVersion\", fixVersion);\n@@ -81,1 +48,1 @@\n-            request.body(\"assignee\", assignee);\n+            body = body.put(\"assignee\", assignee);\n@@ -83,0 +50,1 @@\n+\n@@ -84,1 +52,1 @@\n-            request.body(\"level\", primary.properties().get(\"security\").asString());\n+            body = body.put(\"level\", primary.properties().get(\"security\").asString());\n@@ -86,1 +54,1 @@\n-            request.body(\"level\", defaultSecurity);\n+            body = body.put(\"level\", defaultSecurity);\n@@ -88,1 +56,4 @@\n-        var response = request.execute();\n+\n+        var response = backportEndpoint.post()\n+                                       .body(body)\n+                                       .execute();\n@@ -96,0 +67,1 @@\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsBackport.java","additions":19,"deletions":47,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -1,81 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.notify.issue;\n-\n-import org.openjdk.skara.json.JSON;\n-import org.openjdk.skara.network.*;\n-\n-import java.net.URI;\n-import java.nio.charset.StandardCharsets;\n-import java.security.*;\n-import java.util.*;\n-import java.util.logging.Logger;\n-\n-public class JbsVault {\n-    private final RestRequest request;\n-    private final String authId;\n-    private final URI authProbe;\n-    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.notify\");\n-\n-    private String cookie;\n-\n-    private String checksum(String body) {\n-        try {\n-            var digest = MessageDigest.getInstance(\"SHA-256\");\n-            digest.update(body.getBytes(StandardCharsets.UTF_8));\n-            return Base64.getUrlEncoder().encodeToString(digest.digest());\n-        } catch (NoSuchAlgorithmException e) {\n-            throw new RuntimeException(\"Cannot find SHA-256\");\n-        }\n-    }\n-\n-    JbsVault(URI vaultUri, String vaultToken, URI jiraUri) {\n-        authId = checksum(vaultToken);\n-        request = new RestRequest(vaultUri, authId, (r) -> Arrays.asList(\n-                \"X-Vault-Token\", vaultToken\n-        ));\n-        this.authProbe = URIBuilder.base(jiraUri).appendPath(\"\/rest\/api\/2\/myself\").build();\n-    }\n-\n-    String getCookie() {\n-        if (cookie != null) {\n-            var authProbeRequest = new RestRequest(authProbe, authId, (r) -> Arrays.asList(\"Cookie\", cookie));\n-            var res = authProbeRequest.get()\n-                                      .onError(error -> error.statusCode() >= 400 ? Optional.of(JSON.of(\"AUTH_ERROR\")) : Optional.empty())\n-                                      .execute();\n-            if (res.isObject() && !res.contains(\"AUTH_ERROR\")) {\n-                return cookie;\n-            }\n-        }\n-\n-        \/\/ Renewal time\n-        var result = request.get(\"\").execute();\n-        cookie = result.get(\"data\").get(\"cookie.name\").asString() + \"=\" + result.get(\"data\").get(\"cookie.value\").asString();\n-        log.info(\"Renewed Jira token (\" + cookie + \")\");\n-        return cookie;\n-    }\n-\n-    String authId() {\n-        return authId;\n-    }\n-}\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsVault.java","additions":0,"deletions":81,"binary":false,"changes":81,"status":"deleted"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.notify.issue;\n+\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.issuetracker.IssueTracker;\n+import org.openjdk.skara.issuetracker.IssueTrackerFactory;\n+import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.json.JSONObject;\n+import org.openjdk.skara.json.JSONValue;\n+import org.openjdk.skara.network.URIBuilder;\n+import org.openjdk.skara.proxy.HttpProxy;\n+import org.openjdk.skara.test.TestProperties;\n+import org.openjdk.skara.test.EnabledIfTestProperties;\n+\n+import java.util.*;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\n+class JbsBackportIntegrationTests {\n+    private static TestProperties props;\n+    private static IssueTracker tracker;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        props = TestProperties.load();\n+        if (props.contains(\"jira.uri\", \"jira.pat\")) {\n+            var factory = IssueTrackerFactory.getIssueTrackerFactories().stream().filter(f -> f.name().equals(\"jira\")).findFirst();\n+            if (factory.isEmpty()) {\n+                throw new IllegalStateException(\"'jira.uri' and 'jira.pat' has been configured but could not find IssueTrackerFactory for 'jira'\");\n+            }\n+            HttpProxy.setup();\n+            var uri = URIBuilder.base(props.get(\"jira.uri\")).build();\n+            var credential = new Credential(\"\", \"Bearer \" + props.get(\"jira.pat\"));\n+            tracker = factory.get().create(uri, credential, new JSONObject());\n+        }\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"jira.uri\", \"jira.pat\"})\n+    void testBackportCreation() {\n+        var project = tracker.project(\"SKARA\");\n+        var issue = project.createIssue(\"Issue to backport\", List.of(\"This is just a test issue for testing backport\"), new HashMap<String, JSONValue>());\n+\n+        var jbsBackport = new JbsBackport(tracker);\n+        var backport = jbsBackport.createBackport(issue, \"1.0\", \"duke\", null);\n+        assertNotEquals(issue.id(), backport.id());\n+        var backportOfLink = backport.links().stream().filter(l -> l.relationship().equals(Optional.of(\"backport of\"))).findFirst();\n+        assertTrue(backportOfLink.isPresent());\n+        assertTrue(backportOfLink.get().issue().isPresent());\n+        assertEquals(issue.id(), backportOfLink.get().issue().get().id());\n+    }\n+}\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsBackportIntegrationTests.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,3 @@\n+import java.net.URI;\n+import java.util.Optional;\n+\n@@ -27,1 +30,2 @@\n-import org.openjdk.skara.json.JSONObject;\n+import org.openjdk.skara.network.RestRequest;\n+import org.openjdk.skara.json.*;\n@@ -29,1 +33,0 @@\n-import java.net.URI;\n@@ -32,1 +35,24 @@\n-    IssueProject project(String name);\n+    public interface CustomEndpointRequest {\n+        CustomEndpointRequest body(JSONValue json);\n+        CustomEndpointRequest header(String value, String name);\n+        CustomEndpointRequest onError(RestRequest.ErrorTransform transform);\n+\n+        JSONValue execute();\n+    }\n+\n+    public interface CustomEndpoint {\n+        default CustomEndpointRequest post() {\n+            throw new UnsupportedOperationException(\"HTTP method POST is not supported\");\n+        }\n+\n+        default CustomEndpointRequest get() {\n+            throw new UnsupportedOperationException(\"HTTP method GET is not supported\");\n+        }\n+\n+        default CustomEndpointRequest put() {\n+            throw new UnsupportedOperationException(\"HTTP method PUT is not supported\");\n+        }\n+\n+        default CustomEndpointRequest patch() {\n+            throw new UnsupportedOperationException(\"HTTP method PATCH is not supported\");\n+        }\n@@ -34,0 +60,7 @@\n+        default CustomEndpointRequest delete() {\n+            throw new UnsupportedOperationException(\"HTTP method DELETE is not supported\");\n+        }\n+    }\n+\n+    IssueProject project(String name);\n+    Optional<CustomEndpoint> lookupCustomEndpoint(String path);\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/IssueTracker.java","additions":37,"deletions":4,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,53 @@\n+    private static class BackportEndpoint implements CustomEndpoint, CustomEndpointRequest {\n+        private final RestRequest request;\n+        private final String securityLevel;\n+\n+        private RestRequest.QueryBuilder query;\n+        private JSONValue body;\n+\n+        private BackportEndpoint(RestRequest request, String securityLevel) {\n+            this.request = request;\n+            this.securityLevel = securityLevel;\n+        }\n+\n+        @Override\n+        public CustomEndpointRequest post() {\n+            query = request.post();\n+            return this;\n+        }\n+\n+        @Override\n+        public CustomEndpointRequest body(JSONValue body) {\n+            this.body = body;\n+            return this;\n+        }\n+\n+        @Override\n+        public CustomEndpointRequest header(String value, String name) {\n+            query = query.header(value, name);\n+            return this;\n+        }\n+\n+        @Override\n+        public CustomEndpointRequest onError(RestRequest.ErrorTransform transform) {\n+            query = query.onError(transform);\n+            return this;\n+        }\n+\n+        @Override\n+        public JSONValue execute() {\n+            if (body == null || !body.contains(\"parentIssueKey\")) {\n+                throw new IllegalStateException(\"Body must be a JSON object with at least the field 'parentIssueKey' set\");\n+            }\n+\n+            if (securityLevel != null) {\n+                body = body.contains(\"level\") ? body : body.asObject().put(\"level\", securityLevel);\n+            }\n+\n+            return query.body(body).execute();\n+        }\n+    }\n+\n+    private static final String REST_API_ENDPOINT_PATH = \"\/rest\/api\/2\/\";\n+    private static final String BACKPORT_ENDPOINT_PATH = \"\/rest\/jbs\/1.0\/backport\/\";\n+\n@@ -40,0 +93,1 @@\n+    private final RestRequest backportRequest;\n@@ -50,1 +104,1 @@\n-                                .appendPath(\"\/rest\/api\/2\/\")\n+                                .appendPath(REST_API_ENDPOINT_PATH)\n@@ -52,1 +106,6 @@\n-        request = new RestRequest(baseApi);\n+        this.request = new RestRequest(baseApi);\n+\n+        var backportUri = URIBuilder.base(uri)\n+                                    .appendPath(BACKPORT_ENDPOINT_PATH)\n+                                    .build();\n+        this.backportRequest = new RestRequest(backportUri);\n@@ -64,1 +123,1 @@\n-                                .appendPath(\"\/rest\/api\/2\/\")\n+                                .appendPath(REST_API_ENDPOINT_PATH)\n@@ -66,1 +125,6 @@\n-        request = new RestRequest(baseApi, \"test\", (r) -> Arrays.asList(header, value));\n+        this.request = new RestRequest(baseApi, \"test\", (r) -> Arrays.asList(header, value));\n+\n+        var backportUri = URIBuilder.base(uri)\n+                                    .appendPath(BACKPORT_ENDPOINT_PATH)\n+                                    .build();\n+        this.backportRequest = new RestRequest(backportUri, \"test\", (r) -> Arrays.asList(header, value));\n@@ -70,7 +134,1 @@\n-        this.uri = uri;\n-        this.visibilityRole = null;\n-        this.securityLevel = null;\n-        var baseApi = URIBuilder.base(uri)\n-                                .appendPath(\"\/rest\/api\/2\/\")\n-                                .build();\n-        request = new RestRequest(baseApi, jiraVault.authId(), (r) -> Arrays.asList(\"Cookie\", jiraVault.getCookie()));\n+        this(uri, jiraVault, null, null);\n@@ -83,0 +141,1 @@\n+\n@@ -84,1 +143,1 @@\n-                                .appendPath(\"\/rest\/api\/2\/\")\n+                                .appendPath(REST_API_ENDPOINT_PATH)\n@@ -86,1 +145,6 @@\n-        request = new RestRequest(baseApi, jiraVault.authId(), (r) -> Arrays.asList(\"Cookie\", jiraVault.getCookie()));\n+        this.request = new RestRequest(baseApi, jiraVault.authId(), (r) -> Arrays.asList(\"Cookie\", jiraVault.getCookie()));\n+\n+        var backportUri = URIBuilder.base(uri)\n+                                    .appendPath(BACKPORT_ENDPOINT_PATH)\n+                                    .build();\n+        this.backportRequest = new RestRequest(backportUri, jiraVault.authId(), (r) -> Arrays.asList(\"Cookie\", jiraVault.getCookie()));\n@@ -94,0 +158,9 @@\n+    @Override\n+    public Optional<CustomEndpoint> lookupCustomEndpoint(String path) {\n+        var endpoint = switch (path) {\n+            case BACKPORT_ENDPOINT_PATH -> new BackportEndpoint(backportRequest, securityLevel);\n+            default -> null;\n+        };\n+        return Optional.ofNullable(endpoint);\n+    }\n+\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraHost.java","additions":87,"deletions":14,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -52,1 +52,5 @@\n-                throw new RuntimeException(\"basic authentication not implemented yet\");\n+                if (credential.username().isEmpty() && !credential.password().isEmpty()) {\n+                    return createWithPat(uri, credential.password());\n+                } else {\n+                    throw new RuntimeException(\"basic authentication not implemented yet\");\n+                }\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraIssueTrackerFactory.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-import org.openjdk.skara.json.JSONValue;\n+import org.openjdk.skara.json.*;\n+import org.openjdk.skara.network.RestRequest;\n@@ -43,0 +44,1 @@\n+import static org.openjdk.skara.issuetracker.jira.JiraProject.RESOLVED_IN_BUILD;\n@@ -45,0 +47,76 @@\n+    \/***\n+     * TestBackportEndpoint simulates the JBS custom endpoint for creating backports in JBS\n+     *\/\n+    private static class TestBackportEndpoint implements IssueTracker.CustomEndpoint, IssueTracker.CustomEndpointRequest {\n+        private final TestHost host;\n+\n+        private JSONValue body;\n+\n+        private TestBackportEndpoint(TestHost host) {\n+            this.host = host;\n+        }\n+\n+        @Override\n+        public IssueTracker.CustomEndpointRequest post() {\n+            return this;\n+        }\n+\n+        @Override\n+        public IssueTracker.CustomEndpointRequest body(JSONValue body) {\n+            this.body = body;\n+            return this;\n+        }\n+\n+        @Override\n+        public IssueTracker.CustomEndpointRequest header(String value, String name) {\n+            \/\/ Not needed\n+            return this;\n+        }\n+\n+        @Override\n+        public IssueTracker.CustomEndpointRequest onError(RestRequest.ErrorTransform transform) {\n+            \/\/ Not needed\n+            return this;\n+        }\n+\n+        @Override\n+        public JSONValue execute() {\n+            if (body == null) {\n+                throw new IllegalStateException(\"Must set body\");\n+            }\n+\n+            \/\/ A TestHost can only handle a single project and since a backport\n+            \/\/ requires a primary issue to exist, then there must already exist\n+            \/\/ a project for the primary issue\n+            var project = host.data.issueProjects.entrySet().stream().findFirst().orElseThrow().getValue();\n+            var primary = project.issue(body.get(\"parentIssueKey\").asString()).orElseThrow();\n+\n+            var props = new HashMap<String, JSONValue>();\n+            props.put(\"issuetype\", JSON.of(\"Backport\"));\n+            \/\/ Propagate properties set in POST request body\n+            if (body.contains(\"assignee\")) {\n+                props.put(\"assignee\", body.get(\"assignee\"));\n+            }\n+            if (body.contains(\"level\")) {\n+                props.put(\"security\", body.get(\"level\"));\n+            }\n+            if (body.contains(\"fixVersion\")) {\n+                props.put(\"fixVersion\", body.get(\"fixVersion\"));\n+            }\n+\n+            \/\/ Propagate properties from the primary issue *except* those\n+            \/\/ that can be set via the POST request body. The custom\n+            \/\/ RESOLVED_IN_BUILD property should also not propagate\n+            var ignore = Set.of(\"assignee\", \"security\", \"fixVersion\", RESOLVED_IN_BUILD);\n+            for (var entry : primary.properties().entrySet()) {\n+                if (!ignore.contains(entry.getKey())) {\n+                    props.put(entry.getKey(), entry.getValue());\n+                }\n+            }\n+\n+            var backport = project.createIssue(primary.title(), Arrays.asList(primary.body().split(\"\\n\")), props);\n+            backport.addLink(Link.create(primary, \"backport of\").build());\n+            primary.addLink(Link.create(backport, \"backported by\").build());\n+            return JSON.object().put(\"key\", backport.id());\n+        }\n+    }\n@@ -109,0 +187,10 @@\n+    @Override\n+    public Optional<IssueTracker.CustomEndpoint> lookupCustomEndpoint(String path) {\n+        switch (path) {\n+            case \"\/rest\/jbs\/1.0\/backport\/\":\n+                return Optional.of(new TestBackportEndpoint(this));\n+            default:\n+                return Optional.empty();\n+        }\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":89,"deletions":1,"binary":false,"changes":90,"status":"modified"}]}