{"files":[{"patch":"@@ -404,1 +404,1 @@\n-            var summary = Stream.concat(visitor.messages().stream(), additionalErrors.stream())\n+            var summary = Stream.concat(visitor.errorFailedChecksMessages().stream(), additionalErrors.stream())\n@@ -661,1 +661,1 @@\n-            List<String> integrationBlockers, boolean reviewNeeded,\n+            List<String> integrationBlockers, List<String> warnings, boolean reviewNeeded,\n@@ -690,0 +690,10 @@\n+        var allWarnings = Stream.concat(visitor.warningFailedChecksMessages().stream(), warnings.stream()).toList();\n+        if (!allWarnings.isEmpty()) {\n+            progressBody.append(\"\\n\\n### Warning\");\n+            if (allWarnings.size() > 1) {\n+                progressBody.append(\"s\");\n+            }\n+            progressBody.append(\"\\n\");\n+            progressBody.append(warningListToText(allWarnings));\n+        }\n+\n@@ -1237,0 +1247,1 @@\n+            var warnings = new ArrayList<String>();\n@@ -1259,1 +1270,6 @@\n-                        mergeJCheckMessageWithTargetConf.addAll(targetVisitor.messages().stream()\n+                        mergeJCheckMessageWithTargetConf.addAll(targetVisitor.errorFailedChecksMessages().stream()\n+                                .map(StringBuilder::new)\n+                                .map(e -> e.append(\" (in commit `\").append(hash.hex()).append(\"` with target configuration)\"))\n+                                .map(StringBuilder::toString)\n+                                .toList());\n+                        warnings.addAll(targetVisitor.warningFailedChecksMessages().stream()\n@@ -1270,1 +1286,6 @@\n-                            mergeJCheckMessageWithCommitConf.addAll(commitVisitor.messages().stream()\n+                            mergeJCheckMessageWithCommitConf.addAll(commitVisitor.errorFailedChecksMessages().stream()\n+                                    .map(StringBuilder::new)\n+                                    .map(e -> e.append(\" (in commit `\").append(hash.hex()).append(\"` with commit configuration)\"))\n+                                    .map(StringBuilder::toString)\n+                                    .toList());\n+                            warnings.addAll(commitVisitor.warningFailedChecksMessages().stream()\n@@ -1323,1 +1344,6 @@\n-                    secondJCheckMessage.addAll(localVisitor.messages().stream()\n+                    secondJCheckMessage.addAll(localVisitor.errorFailedChecksMessages().stream()\n+                            .map(StringBuilder::new)\n+                            .map(e -> e.append(\" (failed with updated jcheck configuration in pull request)\"))\n+                            .map(StringBuilder::toString)\n+                            .toList());\n+                    warnings.addAll(localVisitor.warningFailedChecksMessages().stream()\n@@ -1373,1 +1399,1 @@\n-            var statusMessage = getStatusMessage(visitor, additionalErrors, additionalProgresses, integrationBlockers,\n+            var statusMessage = getStatusMessage(visitor, additionalErrors, additionalProgresses, integrationBlockers, warnings,\n@@ -1383,1 +1409,1 @@\n-                    (!reviewNeeded || visitor.messages().isEmpty()) &&\n+                    (!reviewNeeded || visitor.errorFailedChecksMessages().isEmpty()) &&\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":33,"deletions":7,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-        if (!visitor.messages().isEmpty()) {\n+        if (!visitor.errorFailedChecksMessages().isEmpty()) {\n@@ -272,1 +272,1 @@\n-            visitor.messages().stream()\n+            visitor.errorFailedChecksMessages().stream()\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,2 +37,2 @@\n-    private final Map<Class<? extends Check>, String> failedChecks = new HashMap<>();\n-\n+    private final Map<Class<? extends Check>, String> errorFailedChecks = new HashMap<>();\n+    private final Map<Class<? extends Check>, String> warningFailedChecks = new HashMap<>();\n@@ -57,2 +57,13 @@\n-    private void addFailureMessage(Check check, String message) {\n-        failedChecks.put(check.getClass(), message);\n+    private void addMessage(Check check, String message, Severity severity, boolean readyForReviewWhenFailedAsError) {\n+        if (severity.equals(Severity.ERROR)) {\n+            errorFailedChecks.put(check.getClass(), message);\n+            if (this.readyForReview) {\n+                this.readyForReview = readyForReviewWhenFailedAsError;\n+            }\n+        } else if (severity.equals(Severity.WARNING)) {\n+            warningFailedChecks.put(check.getClass(), message);\n+        }\n+    }\n+\n+    List<String> errorFailedChecksMessages() {\n+        return new ArrayList<>(errorFailedChecks.values());\n@@ -61,2 +72,2 @@\n-    List<String> messages() {\n-        return new ArrayList<>(failedChecks.values());\n+    List<String> warningFailedChecksMessages() {\n+        return new ArrayList<>(warningFailedChecks.values());\n@@ -66,1 +77,1 @@\n-        return failedChecks.entrySet().stream()\n+        return errorFailedChecks.entrySet().stream()\n@@ -80,1 +91,1 @@\n-                                                      check -> !failedChecks.containsKey(check.getClass())));\n+                                                      check -> !errorFailedChecks.containsKey(check.getClass())));\n@@ -92,1 +103,1 @@\n-                                                      check -> !failedChecks.containsKey(check.getClass())));\n+                                                      check -> !errorFailedChecks.containsKey(check.getClass())));\n@@ -112,7 +123,7 @@\n-    public void visit(DuplicateIssuesIssue e) {\n-        var id = e.issue().id();\n-        var other = e.hashes()\n-                     .stream()\n-                     .map(Hash::abbreviate)\n-                     .map(s -> \"         - \" + s)\n-                     .collect(Collectors.toList());\n+    public void visit(DuplicateIssuesIssue issue) {\n+        var id = issue.issue().id();\n+        var other = issue.hashes()\n+                .stream()\n+                .map(Hash::abbreviate)\n+                .map(s -> \"         - \" + s)\n+                .toList();\n@@ -123,2 +134,1 @@\n-        addFailureMessage(e.check(), output.toString());\n-        readyForReview = false;\n+        addMessage(issue.check(), output.toString(), issue.severity(), false);\n@@ -128,2 +138,2 @@\n-    public void visit(TagIssue e) {\n-        log.fine(\"ignored: illegal tag name: \" + e.tag().name());\n+    public void visit(TagIssue issue) {\n+        log.fine(\"ignored: illegal tag name: \" + issue.tag().name());\n@@ -133,2 +143,2 @@\n-    public void visit(BranchIssue e) {\n-        log.fine(\"ignored: illegal branch name: \" + e.branch().name());\n+    public void visit(BranchIssue issue) {\n+        log.fine(\"ignored: illegal branch name: \" + issue.branch().name());\n@@ -138,1 +148,1 @@\n-    public void visit(SelfReviewIssue e)\n+    public void visit(SelfReviewIssue issue)\n@@ -140,2 +150,1 @@\n-        addFailureMessage(e.check(), \"Self-reviews are not allowed\");\n-        readyForReview = false;\n+        addMessage(issue.check(), \"Self-reviews are not allowed\", issue.severity(), false);\n@@ -145,2 +154,3 @@\n-    public void visit(TooFewReviewersIssue e) {\n-        addFailureMessage(e.check(), String.format(\"Too few reviewers with at least role %s found (have %d, need at least %d)\", e.role(), e.numActual(), e.numRequired()));\n+    public void visit(TooFewReviewersIssue issue) {\n+        addMessage(issue.check(), String.format(\"Too few reviewers with at least role %s found (have %d, need at least %d)\",\n+                issue.role(), issue.numActual(), issue.numRequired()), issue.severity(), true);\n@@ -150,3 +160,3 @@\n-    public void visit(InvalidReviewersIssue e) {\n-        var invalid = String.join(\", \", e.invalid());\n-        addFailureMessage(e.check(), \"Invalid reviewers \" + invalid);\n+    public void visit(InvalidReviewersIssue issue) {\n+        var invalid = String.join(\", \", issue.invalid());\n+        addMessage(issue.check(), \"Invalid reviewers \" + invalid, issue.severity(), true);\n@@ -156,4 +166,4 @@\n-    public void visit(MergeMessageIssue e) {\n-        var message = String.join(\"\\n\", e.commit().message());\n-        var desc = \"Merge commit message is not `\" + e.expected() + \"`, but:\";\n-        if (e.commit().message().size() == 1) {\n+    public void visit(MergeMessageIssue issue) {\n+        var message = String.join(\"\\n\", issue.commit().message());\n+        var desc = \"Merge commit message is not `\" + issue.expected() + \"`, but:\";\n+        if (issue.commit().message().size() == 1) {\n@@ -167,1 +177,1 @@\n-        addFailureMessage(e.check(), desc);\n+        addMessage(issue.check(), desc, issue.severity(), true);\n@@ -193,2 +203,1 @@\n-        addFailureMessage(issue.check(), \"Pull request's HEAD commit must contain a full name\");\n-        readyForReview = false;\n+        addMessage(issue.check(), \"Pull request's HEAD commit must contain a full name\", issue.severity(), false);\n@@ -200,2 +209,1 @@\n-        addFailureMessage(issue.check(), \"Pull request's HEAD commit must contain a valid e-mail\");\n-        readyForReview = false;\n+        addMessage(issue.check(), \"Pull request's HEAD commit must contain a valid e-mail\", issue.severity(), false);\n@@ -205,1 +213,1 @@\n-    public void visit(WhitespaceIssue e) {\n+    public void visit(WhitespaceIssue issue) {\n@@ -209,1 +217,1 @@\n-        for (var error : e.errors()) {\n+        for (var error : issue.errors()) {\n@@ -216,3 +224,3 @@\n-                e.path().toString(),\n-                e.row(),\n-                e.row(),\n+                issue.path().toString(),\n+                issue.row(),\n+                issue.row(),\n@@ -232,2 +240,1 @@\n-        addFailureMessage(e.check(), \"Whitespace errors\");\n-        readyForReview = false;\n+        addMessage(issue.check(), \"Whitespace errors\", issue.severity(), false);\n@@ -240,1 +247,1 @@\n-        addFailureMessage(issue.check(), \"Incorrectly formatted commit message\");\n+        addMessage(issue.check(), \"Incorrectly formatted commit message\", issue.severity(), true);\n@@ -255,2 +262,1 @@\n-        addFailureMessage(issue.check(), \"The commit message contains \" + desc + \" on line \" + issue.line());\n-        readyForReview = false;\n+        addMessage(issue.check(), \"The commit message contains \" + desc + \" on line \" + issue.line(), issue.severity(), false);\n@@ -261,3 +267,2 @@\n-        addFailureMessage(issue.check(), \"The commit message does not reference any issue. To add an issue reference to this PR, \" +\n-                \"edit the title to be of the format `issue number`: `message`.\");\n-        readyForReview = false;\n+        addMessage(issue.check(), \"The commit message does not reference any issue. To add an issue reference to this PR, \" +\n+                \"edit the title to be of the format `issue number`: `message`.\", issue.severity(), false);\n@@ -268,2 +273,1 @@\n-        addFailureMessage(issue.check(), String.format(\"Executable files are not allowed (file: %s)\", issue.path()));\n-        readyForReview = false;\n+        addMessage(issue.check(), String.format(\"Executable files are not allowed (file: %s)\", issue.path()), issue.severity(), false);\n@@ -274,2 +278,1 @@\n-        addFailureMessage(issue.check(), String.format(\"Symbolic links are not allowed (file: %s)\", issue.path()));\n-        readyForReview = false;\n+        addMessage(issue.check(), String.format(\"Symbolic links are not allowed (file: %s)\", issue.path()), issue.severity(), false);\n@@ -280,2 +283,1 @@\n-        addFailureMessage(issue.check(), String.format(\"Binary files are not allowed (file: %s)\", issue.path()));\n-        readyForReview = false;\n+        addMessage(issue.check(), String.format(\"Binary files are not allowed (file: %s)\", issue.path()), issue.severity(), false);\n@@ -286,1 +288,7 @@\n-        addFailureMessage(issue.check(), issue.issue() + \" is used in problem lists: \" + issue.files());\n+        addMessage(issue.check(), issue.issue() + \" is used in problem lists: \" + issue.files(), issue.severity(), true);\n+    }\n+\n+    @Override\n+    public void visit(IssuesTitleIssue issue) {\n+        addMessage(issue.check(), \"Found trailing period in \" + String.join(\" ,\", issue.getIssuesWithTrailingPeriod()),\n+                issue.severity(), true);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":68,"deletions":60,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -2590,0 +2590,3 @@\n+            output.append(\"\\n\");\n+            output.append(\"warning=\");\n+            output.append(String.join(\",\", Set.of(\"issuestitle\")));\n@@ -2791,0 +2794,1 @@\n+            var issues = credentials.getIssueProject();\n@@ -2801,0 +2805,2 @@\n+                    .issueProject(issues)\n+                    .issuePRMap(new HashMap<>())\n@@ -2804,2 +2810,2 @@\n-            \/\/ set the .jcheck\/conf without whitespace check\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"), Set.of(\"author\", \"reviewers\"), \"0.1\");\n+            \/\/ set the .jcheck\/conf without whitespace and issuestitle check\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"), Set.of(\"author\", \"reviewers\"), Set.of(), \"0.1\");\n@@ -2809,0 +2815,1 @@\n+            var issue = issues.createIssue(\"This is an issue.\", List.of(\"Test\"), Map.of());\n@@ -2812,1 +2819,1 @@\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id());\n@@ -2824,0 +2831,1 @@\n+            assertFalse(pr.store().body().contains(\"Warning\"));\n@@ -2825,1 +2833,1 @@\n-            \/\/ Add whitespace check to .jcheck\/conf\n+            \/\/ Add whitespace and issuestitle check to .jcheck\/conf\n@@ -2834,1 +2842,1 @@\n-            \/\/ pr body should have the integrationBlocker for whitespace and reviewer check\n+            \/\/ pr body should have the integrationBlocker for whitespace and reviewer check, also warning for issuestitle check\n@@ -2837,0 +2845,1 @@\n+            assertTrue(pr.store().body().contains(\"Found trailing period in 1: This is an issue. (failed with updated jcheck configuration in pull request)\"));\n@@ -2962,1 +2971,1 @@\n-            assertEquals(\"line 18: entry must be of form 'key = value'\", check.summary().get());\n+            assertEquals(\"line 19: entry must be of form 'key = value'\", check.summary().get());\n@@ -3388,0 +3397,66 @@\n+\n+    @Test\n+    void issuesTitleCheck(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .issuePRMap(issuePRMap)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"));\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ An issue with trailing period\n+            var issue1 = issues.createIssue(\"This is an issue.\", List.of(\"Hello\"), Map.of());\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue1.id(), List.of(\"Body\"), false);\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertTrue(pr.store().body().contains(\"Warning\"));\n+            assertTrue(pr.store().body().contains(\"Found trailing period in 1: This is an issue.\"));\n+\n+            \/\/ Remove the trailing period in the title\n+            pr.setTitle(\"1: This is an issue\");\n+            issue1.setTitle(\"This is an issue\");\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().body().contains(\"Warning\"));\n+            assertFalse(pr.store().body().contains(\"Found trailing period in 1: This is an issue.\"));\n+\n+            \/\/ Create another issue with trailing period\n+            var issue2 = issues.createIssue(\"This is an issue2 etc.\", List.of(\"Hello\"), Map.of());\n+            pr.addComment(\"\/issue add \" + issue2.id());\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().body().contains(\"Found trailing period in 2: This is an issue2 etc.\"));\n+\n+            \/\/ Approve it as Reviewer, warnings shouldn't prevent adding ready label to the pr\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+            reviewerPr.addReview(Review.Verdict.APPROVED, \"LGTM\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            \/\/ Should be able to integrate with warnings\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"integrated\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":81,"deletions":6,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -88,1 +88,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -95,1 +95,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -102,1 +102,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -112,1 +112,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -121,1 +121,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -128,1 +128,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -134,1 +134,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -157,1 +157,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -215,1 +215,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -225,1 +225,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -241,1 +241,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -251,1 +251,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -258,1 +258,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -265,1 +265,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -272,1 +272,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -279,1 +279,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -286,1 +286,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -294,1 +294,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -301,1 +301,1 @@\n-            hasDisplayedErrors = true;\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n@@ -308,2 +308,13 @@\n-            println(i,  i.issue() + \" is used in problem lists \" + i.files());\n-            hasDisplayedErrors = true;\n+            println(i, i.issue() + \" is used in problem lists \" + i.files());\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n+        }\n+    }\n+\n+    @Override\n+    public void visit(IssuesTitleIssue i) {\n+        if (!ignore.contains(i.check().name()) && !isLax) {\n+            println(i, \"Found trailing period in \" + String.join(\" ,\", i.getIssuesWithTrailingPeriod()));\n+            for (var line : i.commit().message()) {\n+                System.out.println(\"> \" + line);\n+            }\n+            hasDisplayedErrors = i.severity().equals(Severity.ERROR);\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/JCheckCLIVisitor.java","additions":34,"deletions":23,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+    void visit(IssuesTitleIssue issuesTitleIssue);\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssueVisitor.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import org.openjdk.skara.census.Census;\n+import org.openjdk.skara.vcs.Commit;\n+import org.openjdk.skara.vcs.openjdk.CommitMessage;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.logging.Logger;\n+\n+public class IssuesTitleCheck extends CommitCheck {\n+    private final Logger log = Logger.getLogger(\"org.openjdk.skara.jcheck.issuesTitle\");\n+\n+    @Override\n+    Iterator<Issue> check(Commit commit, CommitMessage message, JCheckConfiguration conf, Census census) {\n+\n+        var metadata = CommitIssue.metadata(commit, message, conf, this);\n+\n+        \/\/ if issues check is not required, skip issuesTitleCheck\n+        if (conf.checks().issues().required() &&\n+                (commit.message().isEmpty() || message.issues().isEmpty())) {\n+            return iterator();\n+        }\n+\n+        var issuesWithTrailingPeriod = new ArrayList<String>();\n+        for (var issue : message.issues()) {\n+            if (issue.description().endsWith(\".\")) {\n+                issuesWithTrailingPeriod.add(issue.toString());\n+            }\n+        }\n+        if (!issuesWithTrailingPeriod.isEmpty()) {\n+            return iterator(new IssuesTitleIssue(metadata, issuesWithTrailingPeriod));\n+        }\n+        return iterator();\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"issuestitle\";\n+    }\n+\n+    @Override\n+    public String description() {\n+        return \"Issue's title shouldn't have trailing period\";\n+    }\n+\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssuesTitleCheck.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jcheck;\n+\n+import java.util.List;\n+\n+public class IssuesTitleIssue extends CommitIssue {\n+    List<String> issuesWithTrailingPeriod;\n+\n+    IssuesTitleIssue(CommitIssue.Metadata metadata, List<String> issuesWithTrailingPeriod) {\n+        super(metadata);\n+        this.issuesWithTrailingPeriod = issuesWithTrailingPeriod;\n+    }\n+\n+    @Override\n+    public void accept(IssueVisitor visitor) {\n+        visitor.visit(this);\n+    }\n+\n+    public List<String> getIssuesWithTrailingPeriod() {\n+        return issuesWithTrailingPeriod;\n+    }\n+}\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssuesTitleIssue.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,2 @@\n-            new ProblemListsCheck(repository)\n+            new ProblemListsCheck(repository),\n+            new IssuesTitleCheck()\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/JCheck.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -241,0 +241,5 @@\n+        @Override\n+        public void visit(IssuesTitleIssue e) {\n+            issues.add(e);\n+        }\n+\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/JCheckTests.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    public static Repository init(Path path, VCS vcs, Path appendableFilePath, Set<String> checks, String version) throws IOException {\n+    public static Repository init(Path path, VCS vcs, Path appendableFilePath, Set<String> errorChecks, Set<String> warningChecks, String version) throws IOException {\n@@ -71,1 +71,4 @@\n-            output.append(String.join(\",\", checks));\n+            output.append(String.join(\",\", errorChecks));\n+            output.append(\"\\n\");\n+            output.append(\"warning=\");\n+            output.append(String.join(\",\", warningChecks));\n@@ -90,0 +93,4 @@\n+    public static Repository init(Path path, VCS vcs, Path appendableFilePath, Set<String> errorChecks, String version) throws IOException {\n+        return init(path, vcs, appendableFilePath, errorChecks, Set.of(\"issuestitle\"), version);\n+    }\n+\n@@ -91,1 +98,1 @@\n-        return init(path, vcs, appendableFilePath, Set.of(\"author\", \"reviewers\", \"whitespace\"), \"0.1\");\n+        return init(path, vcs, appendableFilePath, Set.of(\"author\", \"reviewers\", \"whitespace\"), Set.of(\"issuestitle\"), \"0.1\");\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/CheckableRepository.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}