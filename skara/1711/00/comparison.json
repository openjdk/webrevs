{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -196,1 +196,1 @@\n-    Hash amendManualReviewersAndStaleReviewers(Hash commit, Namespace namespace, Hash original) throws IOException {\n+    Hash amendManualReviewersAndStaleReviewers(Hash hash, Namespace namespace, Hash original) throws IOException {\n@@ -198,2 +198,2 @@\n-        var originalCommitMessage = commitMessage(commit, activeReviews, namespace, false, original);\n-        var amendedCommitMessage = commitMessage(commit, activeReviews, namespace, true, original);\n+        var originalCommitMessage = commitMessage(hash, activeReviews, namespace, false, original);\n+        var amendedCommitMessage = commitMessage(hash, activeReviews, namespace, true, original);\n@@ -202,1 +202,1 @@\n-            return commit;\n+            return hash;\n@@ -204,1 +204,2 @@\n-            return localRepo.amend(amendedCommitMessage);\n+            var commit = localRepo.lookup(hash).orElseThrow();\n+            return localRepo.amend(amendedCommitMessage, commit.author().name(), commit.author().email(), commit.committer().name(), commit.committer().email());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -972,0 +972,91 @@\n+\n+    @Test\n+    void sponsorWithAmendingCommitMessage(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory();\n+             var pushedFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer1 = credentials.getHostedRepository();\n+            var reviewer2 = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer1.forge().currentUser().id())\n+                    .addReviewer(reviewer2.forge().currentUser().id())\n+                    .addAuthor(author.forge().currentUser().id());\n+\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).useStaleReviews(false).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var authorFullName = author.forge().currentUser().fullName();\n+            var authorEmail = \"ta@none.none\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"This is a new line\", \"Append commit\", authorFullName, authorEmail);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Approve it as reviewer2\n+            var approval2Pr = reviewer2.pullRequest(pr.id());\n+            approval2Pr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var updateHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(updateHash, author.authenticatedUrl(), \"refs\/heads\/edit\", true);\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Approve it as reviewer1\n+            var approval1Pr = reviewer1.pullRequest(pr.id());\n+            approval1Pr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ Issue a merge command without being a Committer\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply that a sponsor is required\n+            var sponsor = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"sponsor\"))\n+                    .filter(comment -> comment.body().contains(\"your change\"))\n+                    .count();\n+            assertEquals(1, sponsor);\n+\n+            \/\/ The bot should not have pushed the commit\n+            var notPushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(0, notPushed);\n+\n+            \/\/ Reviewer now agrees to sponsor\n+            var reviewer1Pr = reviewer1.pullRequest(pr.id());\n+            pr.addComment(\"\/summary amendCommitMessage\");\n+            reviewer1Pr.addComment(\"\/sponsor\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should have pushed the commit\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed);\n+\n+            \/\/ The change should now be present on the master branch\n+            var pushedRepo = Repository.materialize(pushedFolder.path(), author.authenticatedUrl(), \"master\");\n+            var headHash = pushedRepo.resolve(\"HEAD\").orElseThrow();\n+            var headCommit = pushedRepo.commits(headHash.hex() + \"^..\" + headHash.hex()).asList().get(0);\n+\n+            assertEquals(\"Generated Author 3\", headCommit.author().name());\n+            assertEquals(\"integrationauthor3@openjdk.org\", headCommit.author().email());\n+\n+            \/\/ The committer should be the sponsor\n+            assertEquals(\"Generated Reviewer 1\", headCommit.committer().name());\n+            assertEquals(\"integrationreviewer1@openjdk.org\", headCommit.committer().email());\n+            assertTrue(pr.store().labelNames().contains(\"integrated\"));\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertFalse(pr.store().labelNames().contains(\"sponsor\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorTests.java","additions":92,"deletions":1,"binary":false,"changes":93,"status":"modified"}]}