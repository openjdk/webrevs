{"files":[{"patch":"@@ -1382,1 +1382,1 @@\n-            var amendedHash = checkablePullRequest.amendManualReviewers(localHash, censusInstance.namespace(), original.map(Commit::hash).orElse(null));\n+            var amendedHash = checkablePullRequest.amendManualReviewersAndStaleReviewers(localHash, censusInstance.namespace(), original.map(Commit::hash).orElse(null));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -70,1 +70,1 @@\n-    private String commitMessage(Hash head, List<Review> activeReviews, Namespace namespace, boolean manualReviewers, Hash original) throws IOException {\n+    private String commitMessage(Hash head, List<Review> activeReviews, Namespace namespace, boolean manualReviewersAndStaleReviewers, Hash original) throws IOException {\n@@ -82,6 +82,8 @@\n-        if (manualReviewers) {\n-            var allReviewers = reviewerNames(activeReviews, namespace);\n-            var additionalReviewers = Reviewers.reviewers(currentUser, comments);\n-            for (var additionalReviewer : additionalReviewers) {\n-                if (!allReviewers.contains(additionalReviewer)) {\n-                    reviewers.add(additionalReviewer);\n+        if (manualReviewersAndStaleReviewers) {\n+            reviewers.addAll(Reviewers.reviewers(currentUser, comments));\n+            if (ignoreStaleReviews) {\n+                var staleReviews = new ArrayList<Review>();\n+                for (var review : activeReviews) {\n+                    if (review.verdict() == Review.Verdict.APPROVED && !eligibleReviews.contains(review)) {\n+                        staleReviews.add(review);\n+                    }\n@@ -89,0 +91,1 @@\n+                reviewers.addAll(reviewerNames(staleReviews, namespace));\n@@ -196,1 +199,1 @@\n-    Hash amendManualReviewers(Hash commit, Namespace namespace, Hash original) throws IOException {\n+    Hash amendManualReviewersAndStaleReviewers(Hash commit, Namespace namespace, Hash original) throws IOException {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -244,1 +244,1 @@\n-                var amendedHash = checkablePr.amendManualReviewers(localHash, censusInstance.namespace(), original);\n+                var amendedHash = checkablePr.amendManualReviewersAndStaleReviewers(localHash, censusInstance.namespace(), original);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,1 +134,1 @@\n-                var amendedHash = checkablePr.amendManualReviewers(localHash, censusInstance.namespace(), original);\n+                var amendedHash = checkablePr.amendManualReviewersAndStaleReviewers(localHash, censusInstance.namespace(), original);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1514,0 +1514,2 @@\n+            var reviewer2 = credentials.getHostedRepository();\n+            var reviewer3 = credentials.getHostedRepository();\n@@ -1516,2 +1518,5 @@\n-                                           .addAuthor(author.forge().currentUser().id())\n-                                           .addReviewer(reviewer.forge().currentUser().id());\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addReviewer(reviewer2.forge().currentUser().id())\n+                    .addReviewer(reviewer3.forge().currentUser().id());\n+\n@@ -1533,1 +1538,0 @@\n-            \/\/ Approve it as another user\n@@ -1535,0 +1539,4 @@\n+            var approvalPr2 = reviewer2.pullRequest(pr.id());\n+            var approvalPr3 = reviewer3.pullRequest(pr.id());\n+\n+            \/\/ Approve it as another user\n@@ -1536,0 +1544,1 @@\n+            approvalPr2.addReview(Review.Verdict.APPROVED, \"Approved\");\n@@ -1551,1 +1560,1 @@\n-            \/\/ The PR should no longer be ready, as the review is stale\n+            \/\/ The PR should no longer be ready, as the reviews are stale\n@@ -1556,1 +1565,1 @@\n-            \/\/ Approve again\n+            \/\/ Approve again by reviewer1\n@@ -1573,0 +1582,1 @@\n+            approvalPr3.addReview(Review.Verdict.APPROVED, \"Approved when target ref is other-branch\");\n@@ -1579,1 +1589,1 @@\n-            assertFalse(pr.store().body().contains(\"Re-review required\"));\n+            assertTrue(pr.store().body().contains(\"Re-review required\"));\n@@ -1589,1 +1599,3 @@\n-            assertFalse(pr.store().body().contains(\"Re-review required\"));\n+            assertTrue(pr.store().body().contains(\"Re-review required\"));\n+            \/\/ Credit line should include reviewers with stale reviews\n+            assertLastCommentContains(pr, \"Reviewed-by: integrationreviewer2, integrationreviewer3, integrationreviewer4\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"}]}