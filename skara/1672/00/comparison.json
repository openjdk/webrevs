{"files":[{"patch":"@@ -85,0 +85,1 @@\n+    private final ReviewCoverage reviewCoverage;\n@@ -115,0 +116,1 @@\n+        reviewCoverage = new ReviewCoverage(workItem.bot.ignoreStaleReviews(), workItem.bot.includeSimpleMerges(), localRepo);\n@@ -121,1 +123,2 @@\n-                reviewMerge);\n+                reviewMerge,\n+                reviewCoverage);\n@@ -607,8 +610,6 @@\n-                                           if (!hash.get().equals(pr.headHash())) {\n-                                               if (ignoreStaleReviews) {\n-                                                   entry += \" üîÑ Re-review required (review applies to [\" + hash.get().abbreviate()\n-                                                           + \"](\" + pr.filesUrl(hash.get()) + \"))\";\n-                                               } else {\n-                                                   entry += \" ‚ö†Ô∏è Review applies to [\" + hash.get().abbreviate()\n-                                                           + \"](\" + pr.filesUrl(hash.get()) + \")\";\n-                                               }\n+                                           if (!reviewCoverage.covers(review, pr)) {\n+                                               entry += \" üîÑ Re-review required (review applies to [\" + hash.get().abbreviate()\n+                                                       + \"](\" + pr.filesUrl(hash.get()) + \"))\";\n+                                           } else {\n+                                               entry += \" ‚ö†Ô∏è Review applies to [\" + hash.get().abbreviate()\n+                                                       + \"](\" + pr.filesUrl(hash.get()) + \")\";\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+    private final ReviewCoverage reviewCoverage;\n@@ -54,1 +55,1 @@\n-            HostedRepository jcheckRepo, String jcheckName, String jcheckRef, List<Comment> comments, MergePullRequestReviewConfiguration reviewMerge) {\n+            HostedRepository jcheckRepo, String jcheckName, String jcheckRef, List<Comment> comments, MergePullRequestReviewConfiguration reviewMerge, ReviewCoverage reviewCoverage) {\n@@ -60,0 +61,1 @@\n+        this.reviewCoverage = reviewCoverage;\n@@ -72,6 +74,1 @@\n-                                           \/\/ Reviews without a hash are never valid as they referred to no longer\n-                                           \/\/ existing commits.\n-                                           .filter(review -> review.hash().isPresent())\n-                                           .filter(review -> review.targetRef().equals(pr.targetRef()))\n-                                           .filter(review -> !ignoreStaleReviews || review.hash().orElseThrow().equals(pr.headHash()))\n-                                           .filter(review -> review.verdict() == Review.Verdict.APPROVED)\n+                                           .filter(review -> reviewCoverage.covers(review, pr))\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -201,1 +201,2 @@\n-                    bot.reviewMerge());\n+                    bot.reviewMerge(),\n+                    new ReviewCoverage(bot.ignoreStaleReviews(), bot.includeSimpleMerges(), localRepo));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+    private final boolean includeSimpleMerges;\n@@ -92,1 +93,1 @@\n-                   boolean ignoreStaleReviews, Pattern allowedTargetBranches,\n+                   boolean ignoreStaleReviews, boolean includeSimpleMerges, Pattern allowedTargetBranches,\n@@ -112,0 +113,1 @@\n+        this.includeSimpleMerges = includeSimpleMerges;\n@@ -305,0 +307,4 @@\n+    boolean includeSimpleMerges() {\n+        return includeSimpleMerges;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -47,0 +47,1 @@\n+    private boolean includeSimpleMerges = false;\n@@ -140,0 +141,5 @@\n+    public PullRequestBotBuilder includeSimpleMerges(boolean includeSimpleMerges) {\n+        this.includeSimpleMerges = includeSimpleMerges;\n+        return this;\n+    }\n+\n@@ -263,1 +269,1 @@\n-                readyComments, issueProject, ignoreStaleReviews, allowedTargetBranches, seedStorage, confOverrideRepo,\n+                readyComments, issueProject, ignoreStaleReviews, includeSimpleMerges, allowedTargetBranches, seedStorage, confOverrideRepo,\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -167,0 +167,3 @@\n+            if (repo.value().contains(\"includemerge\")) {\n+                botBuilder.includeSimpleMerges(repo.value().get(\"includemerge\").asBoolean());\n+            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.forge.PullRequestUtils;\n+import org.openjdk.skara.forge.Review;\n+import org.openjdk.skara.vcs.Repository;\n+import org.openjdk.skara.vcs.git.GitRepository;\n+\n+public class ReviewCoverage {\n+\n+    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.pr\");\n+    private final boolean ignoreStaleReviews;\n+    private final boolean includeSimpleMerges;\n+    private final Repository repo;\n+\n+    public ReviewCoverage(boolean ignoreStaleReviews, boolean includeSimpleMerges, Repository repo) {\n+        this.ignoreStaleReviews = ignoreStaleReviews;\n+        this.includeSimpleMerges = includeSimpleMerges;\n+        this.repo = repo;\n+    }\n+\n+    public boolean covers(Review review, PullRequest pr) {\n+        var r = review.hash();\n+        \/\/ Reviews without a hash are never valid as they referred to no longer\n+        \/\/ existing commits.\n+        if (r.isEmpty() || review.verdict() != Review.Verdict.APPROVED\n+                || !review.targetRef().equals(pr.targetRef()))\n+            return false;\n+        if (!ignoreStaleReviews || r.get().equals(pr.headHash()))\n+            return true;\n+        if (!includeSimpleMerges)\n+            return false;\n+        if (!(repo instanceof GitRepository gitRepo)) {\n+            log.fine(\"Merge re-review check is unavailable on '\" + repo.getClass() + \"' repo\");\n+            return false;\n+        }\n+        boolean seenAtLeastOneCommit = false;\n+        try {\n+            var targetHash = PullRequestUtils.targetHash(gitRepo);\n+            try (var commits = gitRepo.commits(List.of(pr.headHash()), List.of(r.get(), targetHash))) {\n+                for (var c : commits) {\n+                    seenAtLeastOneCommit = true;\n+                    if (!c.isMerge() || c.numParents() != 2)\n+                        return false;\n+                    \/\/ from https:\/\/git-scm.com\/book\/en\/v2\/Git-Tools-Revision-Selection\n+                    \/\/ we expect that ^1 has to belong to the PR and ^2 to the target\n+                    \/\/ branch; the former seems obvious and enforced by Git, while\n+                    \/\/ the latter should be checked\n+                    var secondParent = c.parents().get(1);\n+                    if (!gitRepo.isAncestor(secondParent, targetHash)) {\n+                        return false;\n+                    }\n+                    if (!gitRepo.isRemergeDiffEmpty(c.hash())) {\n+                        return false;\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            log.log(Level.FINE, \"Error while looking for simple merges in a PR \" + pr, e);\n+            return false;\n+        }\n+        if (seenAtLeastOneCommit) {\n+            log.finest(\"Saved a merge from review: \" + pr.repository() + \", \" + pr.id());\n+        }\n+        return seenAtLeastOneCommit;\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewCoverage.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -104,1 +104,2 @@\n-                    bot.reviewMerge());\n+                    bot.reviewMerge(),\n+                    new ReviewCoverage(bot.ignoreStaleReviews(), bot.includeSimpleMerges(), localRepo));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.skara.vcs.Branch;\n@@ -1610,0 +1611,258 @@\n+\n+    @Test\n+    void includeSimpleMerges(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .ignoreStaleReviews(true)\n+                    .includeSimpleMerges(true)\n+                    .build();\n+\n+            \/\/ create the repo using CheckableRepository, as it creates probably useful files, such as .jcheck\/conf\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            \/\/ replace the default file with a bigger file for auto-merging purposes\n+            localRepo.checkout(new Branch(\"master\"));\n+            Path f = localRepo.root().resolve(\"file.txt\");\n+            Files.writeString(f, \"\"\"\n+                    0\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    d\n+                    e\n+                    f\n+                    \"\"\");\n+            localRepo.add(f);\n+            var masterHash = localRepo.commit(\"master 1\", author.name(), \"someone@example.com\");\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+            localRepo.branch(masterHash, \"feature\");\n+            localRepo.checkout(new Branch(\"feature\"));\n+            Files.writeString(f, \"\"\"\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    d\n+                    e\n+                    f\n+                    \"\"\");\n+            localRepo.add(f);\n+            var featureHash = localRepo.commit(\"feature 1\", author.name(), \"author@example.com\");\n+            localRepo.push(featureHash, author.authenticatedUrl(), \"feature\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"feature\", \"This is a pull request\");\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+\n+            var approvalPr = reviewer.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"master\"));\n+            Files.writeString(f, \"\"\"\n+                    0\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    d\n+                    e\n+                    \"\"\");\n+            localRepo.add(f);\n+            masterHash = localRepo.commit(\"master 2\", author.name(), \"someone@example.com\");\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"feature\"));\n+            localRepo.merge(new Branch(\"master\"));\n+            localRepo.add(f);\n+            var mergeHash = localRepo.commit(\"Updated from master\", author.name(), \"author@example.com\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"feature\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"master\"));\n+            Files.writeString(f, \"\"\"\n+                    0\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    d\n+                    \"\"\");\n+            localRepo.add(f);\n+            masterHash = localRepo.commit(\"master 3\", author.name(), \"someone@example.com\");\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"feature\"));\n+            Files.writeString(f, \"\"\"\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    d\n+                    e\n+                    \"\"\");\n+            localRepo.add(f);\n+            featureHash = localRepo.commit(\"feature 2\", author.name(), \"author@example.com\");\n+            localRepo.push(featureHash, author.authenticatedUrl(), \"feature\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"Re-review required\"));\n+\n+            approvalPr = reviewer.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.merge(new Branch(\"master\"));\n+            localRepo.add(f);\n+            mergeHash = localRepo.commit(\"Updated from master 2\", author.name(), \"author@example.com\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"feature\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"master\"));\n+            Files.writeString(f, \"\"\"\n+                    0\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    \"\"\");\n+            localRepo.add(f);\n+            masterHash = localRepo.commit(\"master 4\", author.name(), \"someone@example.com\");\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"feature\"));\n+            localRepo.merge(new Branch(\"master\"));\n+            localRepo.add(f);\n+            mergeHash = localRepo.commit(\"Updated from master 3\", author.name(), \"author@example.com\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"feature\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"master\"));\n+            Files.writeString(f, \"\"\"\n+                    0\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    \"\"\");\n+            localRepo.add(f);\n+            masterHash = localRepo.commit(\"master 5\", author.name(), \"someone@example.com\");\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"feature\"));\n+            localRepo.merge(new Branch(\"master\"));\n+            Files.writeString(f, \"\"\"\n+                    w\n+                    x\n+                    y\n+                    z\n+                    \"\"\");\n+            localRepo.add(f);\n+            mergeHash = localRepo.commit(\"Updated from master 4\", author.name(), \"author@example.com\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"feature\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"Re-review required\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":259,"deletions":0,"binary":false,"changes":259,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+    private final List<Hash> from;\n+    private final List<Hash> notFrom;\n@@ -50,0 +52,2 @@\n+        this.from = null;\n+        this.notFrom = null;\n@@ -58,0 +62,13 @@\n+    public GitCommits(Path dir, List<Hash> reachableFrom, List<Hash> unreachableFrom) throws IOException {\n+        this.dir = dir;\n+        this.range = null;\n+        this.reverse = false;\n+        this.num = -1;\n+        from = reachableFrom;\n+        notFrom = unreachableFrom;\n+        this.format = String.join(\"%n\",\n+                                  COMMIT_DELIMITER,\n+                                  GitCommitMetadata.FORMAT);\n+\n+    }\n+\n@@ -81,1 +98,9 @@\n-        cmd.add(range);\n+        if (range != null)\n+            cmd.add(range);\n+        else {\n+            cmd.addAll(from.stream().map(Hash::hex).toList());\n+            if (!notFrom.isEmpty()) {\n+                cmd.add(\"--not\");\n+                cmd.addAll(notFrom.stream().map(Hash::hex).toList());\n+            }\n+        }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitCommits.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,0 +183,4 @@\n+    public Commits commits(List<Hash> reachableFrom, List<Hash> unreachableFrom) throws IOException {\n+        return new GitCommits(dir, reachableFrom, unreachableFrom);\n+    }\n+\n@@ -1000,0 +1004,9 @@\n+    public boolean isRemergeDiffEmpty(Hash hash) throws IOException {\n+        try (var p = Process.capture(\"git\", \"show\", \"--remerge-diff\", \"--format=%b\", hash.hex())\n+                .workdir(dir)\n+                .environ(currentEnv)\n+                .execute()) {\n+            return String.join(\"\", await(p).stdout()).isEmpty();\n+        }\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"}]}