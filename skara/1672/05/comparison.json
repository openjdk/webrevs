{"files":[{"patch":"@@ -60,1 +60,1 @@\n-    private final boolean ignoreStaleReviews;\n+    private final boolean useStaleReviews;\n@@ -85,0 +85,1 @@\n+    private final ReviewCoverage reviewCoverage;\n@@ -93,1 +94,1 @@\n-                     CensusInstance censusInstance, boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport,\n+                     CensusInstance censusInstance, boolean useStaleReviews, Set<String> integrators, boolean reviewCleanBackport,\n@@ -104,1 +105,1 @@\n-        this.ignoreStaleReviews = ignoreStaleReviews;\n+        this.useStaleReviews = useStaleReviews;\n@@ -115,0 +116,1 @@\n+        reviewCoverage = new ReviewCoverage(workItem.bot.useStaleReviews(), workItem.bot.acceptSimpleMerges(), localRepo, pr);\n@@ -116,1 +118,1 @@\n-        checkablePullRequest = new CheckablePullRequest(pr, localRepo, ignoreStaleReviews,\n+        checkablePullRequest = new CheckablePullRequest(pr, localRepo, useStaleReviews,\n@@ -121,1 +123,2 @@\n-                reviewMerge);\n+                reviewMerge,\n+                reviewCoverage);\n@@ -126,1 +129,1 @@\n-                                     boolean ignoreStaleReviews, Set<String> integrators, boolean reviewCleanBackport, MergePullRequestReviewConfiguration reviewMerge,\n+                                     boolean useStaleReviews, Set<String> integrators, boolean reviewCleanBackport, MergePullRequestReviewConfiguration reviewMerge,\n@@ -129,1 +132,1 @@\n-                ignoreStaleReviews, integrators, reviewCleanBackport, reviewMerge, approval);\n+                useStaleReviews, integrators, reviewCleanBackport, reviewMerge, approval);\n@@ -607,8 +610,6 @@\n-                                           if (!hash.get().equals(pr.headHash())) {\n-                                               if (ignoreStaleReviews) {\n-                                                   entry += \" üîÑ Re-review required (review applies to [\" + hash.get().abbreviate()\n-                                                           + \"](\" + pr.filesUrl(hash.get()) + \"))\";\n-                                               } else {\n-                                                   entry += \" ‚ö†Ô∏è Review applies to [\" + hash.get().abbreviate()\n-                                                           + \"](\" + pr.filesUrl(hash.get()) + \")\";\n-                                               }\n+                                           if (!reviewCoverage.covers(review)) {\n+                                               entry += \" üîÑ Re-review required (review applies to [\" + hash.get().abbreviate()\n+                                                       + \"](\" + pr.filesUrl(hash.get()) + \"))\";\n+                                           } else {\n+                                               entry += \" ‚ö†Ô∏è Review applies to [\" + hash.get().abbreviate()\n+                                                       + \"](\" + pr.filesUrl(hash.get()) + \")\";\n@@ -625,1 +626,1 @@\n-        if (!ignoreStaleReviews) {\n+        if (useStaleReviews) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":17,"deletions":16,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -715,1 +715,1 @@\n-                        activeReviews, labels, census, bot.ignoreStaleReviews(), bot.integrators(), bot.reviewCleanBackport(),\n+                        activeReviews, labels, census, bot.useStaleReviews(), bot.integrators(), bot.reviewCleanBackport(),\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    private final boolean ignoreStaleReviews;\n+    private final boolean useStaleReviews;\n@@ -52,0 +52,1 @@\n+    private final ReviewCoverage reviewCoverage;\n@@ -53,2 +54,2 @@\n-    CheckablePullRequest(PullRequest pr, Repository localRepo, boolean ignoreStaleReviews,\n-            HostedRepository jcheckRepo, String jcheckName, String jcheckRef, List<Comment> comments, MergePullRequestReviewConfiguration reviewMerge) {\n+    CheckablePullRequest(PullRequest pr, Repository localRepo, boolean useStaleReviews,\n+            HostedRepository jcheckRepo, String jcheckName, String jcheckRef, List<Comment> comments, MergePullRequestReviewConfiguration reviewMerge, ReviewCoverage reviewCoverage) {\n@@ -57,1 +58,1 @@\n-        this.ignoreStaleReviews = ignoreStaleReviews;\n+        this.useStaleReviews = useStaleReviews;\n@@ -60,0 +61,1 @@\n+        this.reviewCoverage = reviewCoverage;\n@@ -72,6 +74,1 @@\n-                                           \/\/ Reviews without a hash are never valid as they referred to no longer\n-                                           \/\/ existing commits.\n-                                           .filter(review -> review.hash().isPresent())\n-                                           .filter(review -> review.targetRef().equals(pr.targetRef()))\n-                                           .filter(review -> !ignoreStaleReviews || review.hash().orElseThrow().equals(pr.headHash()))\n-                                           .filter(review -> review.verdict() == Review.Verdict.APPROVED)\n+                                           .filter(reviewCoverage::covers)\n@@ -84,1 +81,1 @@\n-            if (ignoreStaleReviews) {\n+            if (!useStaleReviews) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -196,1 +196,1 @@\n-            var checkablePr = new CheckablePullRequest(pr, localRepo, bot.ignoreStaleReviews(),\n+            var checkablePr = new CheckablePullRequest(pr, localRepo, bot.useStaleReviews(),\n@@ -201,1 +201,2 @@\n-                    bot.reviewMerge());\n+                    bot.reviewMerge(),\n+                    new ReviewCoverage(bot.useStaleReviews(), bot.acceptSimpleMerges(), localRepo, pr));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IntegrateCommand.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -52,1 +52,2 @@\n-    private final boolean ignoreStaleReviews;\n+    private final boolean useStaleReviews;\n+    private final boolean acceptSimpleMerges;\n@@ -92,1 +93,1 @@\n-                   boolean ignoreStaleReviews, Pattern allowedTargetBranches,\n+                   boolean useStaleReviews, boolean acceptSimpleMerges, Pattern allowedTargetBranches,\n@@ -111,1 +112,2 @@\n-        this.ignoreStaleReviews = ignoreStaleReviews;\n+        this.useStaleReviews = useStaleReviews;\n+        this.acceptSimpleMerges = acceptSimpleMerges;\n@@ -301,2 +303,6 @@\n-    boolean ignoreStaleReviews() {\n-        return ignoreStaleReviews;\n+    boolean useStaleReviews() {\n+        return useStaleReviews;\n+    }\n+\n+    boolean acceptSimpleMerges() {\n+        return acceptSimpleMerges;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -46,1 +46,2 @@\n-    private boolean ignoreStaleReviews = false;\n+    private boolean useStaleReviews = true;\n+    private boolean acceptSimpleMerges = false;\n@@ -135,2 +136,7 @@\n-    public PullRequestBotBuilder ignoreStaleReviews(boolean ignoreStaleReviews) {\n-        this.ignoreStaleReviews = ignoreStaleReviews;\n+    public PullRequestBotBuilder useStaleReviews(boolean useStaleReviews) {\n+        this.useStaleReviews = useStaleReviews;\n+        return this;\n+    }\n+\n+    public PullRequestBotBuilder acceptSimpleMerges(boolean acceptSimpleMerges) {\n+        this.acceptSimpleMerges = acceptSimpleMerges;\n@@ -263,1 +269,1 @@\n-                readyComments, issueProject, ignoreStaleReviews, allowedTargetBranches, seedStorage, confOverrideRepo,\n+                readyComments, issueProject, useStaleReviews, acceptSimpleMerges, allowedTargetBranches, seedStorage, confOverrideRepo,\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -164,2 +164,5 @@\n-            if (repo.value().contains(\"ignorestale\")) {\n-                botBuilder.ignoreStaleReviews(repo.value().get(\"ignorestale\").asBoolean());\n+            if (repo.value().contains(\"useStaleReviews\")) {\n+                botBuilder.useStaleReviews(repo.value().get(\"useStaleReviews\").asBoolean());\n+            }\n+            if (repo.value().contains(\"acceptSimpleMerges\")) {\n+                botBuilder.acceptSimpleMerges(repo.value().get(\"acceptSimpleMerges\").asBoolean());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.openjdk.skara.forge.PullRequest;\n+import org.openjdk.skara.forge.PullRequestUtils;\n+import org.openjdk.skara.forge.Review;\n+import org.openjdk.skara.vcs.Hash;\n+import org.openjdk.skara.vcs.Repository;\n+\n+public class ReviewCoverage {\n+\n+    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.pr\");\n+    private final boolean useStaleReviews;\n+    private final boolean acceptSimpleMerges;\n+    private final Repository repo;\n+    private final PullRequest pr;\n+    private final Map<Review, Boolean> cachedCoverage = new HashMap<>();\n+    private Hash cachedTargetHash;\n+\n+    public ReviewCoverage(boolean useStaleReviews,\n+                          boolean acceptSimpleMerges,\n+                          Repository repo,\n+                          PullRequest pr) {\n+        this.useStaleReviews = useStaleReviews;\n+        this.acceptSimpleMerges = acceptSimpleMerges;\n+        this.repo = repo;\n+        this.pr = pr;\n+    }\n+\n+    public boolean covers(Review review) {\n+        return cachedCoverage.computeIfAbsent(review, this::covers0);\n+    }\n+\n+    private boolean covers0(Review review) {\n+        var r = review.hash();\n+        \/\/ Reviews without a hash are never valid as they referred to no longer\n+        \/\/ existing commits.\n+        if (r.isEmpty() || review.verdict() != Review.Verdict.APPROVED\n+                || !review.targetRef().equals(pr.targetRef())) {\n+            return false;\n+        }\n+        if (useStaleReviews || r.get().equals(pr.headHash())) {\n+            return true;\n+        }\n+        if (!acceptSimpleMerges) {\n+            return false;\n+        }\n+        boolean seenAtLeastOneCommit = false;\n+        try {\n+            try (var commits = repo.commits(List.of(pr.headHash()), List.of(r.get(), targetHash()))) {\n+                for (var c : commits) {\n+                    seenAtLeastOneCommit = true;\n+                    if (!c.isMerge() || c.numParents() != 2) {\n+                        return false;\n+                    }\n+                    \/\/ from https:\/\/git-scm.com\/book\/en\/v2\/Git-Tools-Revision-Selection\n+                    \/\/ we expect that ^1 has to belong to the PR and ^2 to the target\n+                    \/\/ branch; the former seems obvious and enforced by Git, while\n+                    \/\/ the latter should be checked\n+                    var secondParent = c.parents().get(1);\n+                    if (!repo.isAncestor(secondParent, targetHash())) {\n+                        return false;\n+                    }\n+                    if (!repo.isRemergeDiffEmpty(c.hash())) {\n+                        return false;\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            log.log(Level.FINE, \"Error while looking for simple merges: \" + pr.repository() + \", \" + pr.id(), e);\n+            return false;\n+        }\n+        if (seenAtLeastOneCommit) {\n+            log.finest(\"Saved a merge from review: \" + pr.repository() + \", \" + pr.id());\n+        }\n+        return seenAtLeastOneCommit;\n+    }\n+\n+    private Hash targetHash() throws IOException {\n+        if (cachedTargetHash == null) {\n+            cachedTargetHash = PullRequestUtils.targetHash(repo);\n+        } else {\n+            \/\/ main assumption for caching targetHash\n+            if (ReviewCoverage.class.desiredAssertionStatus()) {\n+                var latest = PullRequestUtils.targetHash(repo);\n+                assert cachedTargetHash.equals(latest) :\n+                        cachedTargetHash + \" != \" + latest;\n+            }\n+        }\n+        return cachedTargetHash;\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewCoverage.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -99,1 +99,1 @@\n-            var checkablePr = new CheckablePullRequest(pr, localRepo, bot.ignoreStaleReviews(),\n+            var checkablePr = new CheckablePullRequest(pr, localRepo, bot.useStaleReviews(),\n@@ -104,1 +104,2 @@\n-                    bot.reviewMerge());\n+                    bot.reviewMerge(),\n+                    new ReviewCoverage(bot.useStaleReviews(), bot.acceptSimpleMerges(), localRepo, pr));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/SponsorCommand.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import org.openjdk.skara.vcs.Branch;\n@@ -1514,1 +1515,1 @@\n-    void ignoreStale(TestInfo testInfo) throws IOException {\n+    void useStaleReviews(TestInfo testInfo) throws IOException {\n@@ -1529,1 +1530,1 @@\n-            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).ignoreStaleReviews(true).build();\n+            var checkBot = PullRequestBot.newBuilder().repo(author).censusRepo(censusBuilder.build()).useStaleReviews(false).build();\n@@ -1610,0 +1611,258 @@\n+\n+    @Test\n+    void acceptSimpleMerges(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .useStaleReviews(false)\n+                    .acceptSimpleMerges(true)\n+                    .build();\n+\n+            \/\/ create the repo using CheckableRepository, as it creates probably useful files, such as .jcheck\/conf\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            \/\/ replace the default file with a bigger file for auto-merging purposes\n+            localRepo.checkout(new Branch(\"master\"));\n+            Path f = localRepo.root().resolve(\"file.txt\");\n+            Files.writeString(f, \"\"\"\n+                    0\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    d\n+                    e\n+                    f\n+                    \"\"\");\n+            localRepo.add(f);\n+            var masterHash = localRepo.commit(\"master 1\", author.name(), \"someone@example.com\");\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+            localRepo.branch(masterHash, \"feature\");\n+            localRepo.checkout(new Branch(\"feature\"));\n+            Files.writeString(f, \"\"\"\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    d\n+                    e\n+                    f\n+                    \"\"\");\n+            localRepo.add(f);\n+            var featureHash = localRepo.commit(\"feature 1\", author.name(), \"author@example.com\");\n+            localRepo.push(featureHash, author.authenticatedUrl(), \"feature\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"feature\", \"This is a pull request\");\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+\n+            var approvalPr = reviewer.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"master\"));\n+            Files.writeString(f, \"\"\"\n+                    0\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    d\n+                    e\n+                    \"\"\");\n+            localRepo.add(f);\n+            masterHash = localRepo.commit(\"master 2\", author.name(), \"someone@example.com\");\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"feature\"));\n+            localRepo.merge(new Branch(\"master\"));\n+            localRepo.add(f);\n+            var mergeHash = localRepo.commit(\"Updated from master\", author.name(), \"author@example.com\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"feature\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"master\"));\n+            Files.writeString(f, \"\"\"\n+                    0\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    d\n+                    \"\"\");\n+            localRepo.add(f);\n+            masterHash = localRepo.commit(\"master 3\", author.name(), \"someone@example.com\");\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"feature\"));\n+            Files.writeString(f, \"\"\"\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    d\n+                    e\n+                    \"\"\");\n+            localRepo.add(f);\n+            featureHash = localRepo.commit(\"feature 2\", author.name(), \"author@example.com\");\n+            localRepo.push(featureHash, author.authenticatedUrl(), \"feature\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"Re-review required\"));\n+\n+            approvalPr = reviewer.pullRequest(pr.id());\n+            approvalPr.addReview(Review.Verdict.APPROVED, \"Approved\");\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.merge(new Branch(\"master\"));\n+            localRepo.add(f);\n+            mergeHash = localRepo.commit(\"Updated from master 2\", author.name(), \"author@example.com\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"feature\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"master\"));\n+            Files.writeString(f, \"\"\"\n+                    0\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    c\n+                    \"\"\");\n+            localRepo.add(f);\n+            masterHash = localRepo.commit(\"master 4\", author.name(), \"someone@example.com\");\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"feature\"));\n+            localRepo.merge(new Branch(\"master\"));\n+            localRepo.add(f);\n+            mergeHash = localRepo.commit(\"Updated from master 3\", author.name(), \"author@example.com\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"feature\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"master\"));\n+            Files.writeString(f, \"\"\"\n+                    0\n+                    1\n+                    2\n+                    3\n+                    4\n+                    5\n+                    6\n+                    7\n+                    8\n+                    9\n+                    a\n+                    b\n+                    \"\"\");\n+            localRepo.add(f);\n+            masterHash = localRepo.commit(\"master 5\", author.name(), \"someone@example.com\");\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            localRepo.checkout(new Branch(\"feature\"));\n+            localRepo.merge(new Branch(\"master\"));\n+            Files.writeString(f, \"\"\"\n+                    w\n+                    x\n+                    y\n+                    z\n+                    \"\"\");\n+            localRepo.add(f);\n+            mergeHash = localRepo.commit(\"Updated from master 4\", author.name(), \"author@example.com\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"feature\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"Re-review required\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":261,"deletions":2,"binary":false,"changes":263,"status":"modified"},{"patch":"@@ -226,1 +226,1 @@\n-            assertFalse(pullRequestBot6.ignoreStaleReviews());\n+            assertTrue(pullRequestBot6.useStaleReviews());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -128,0 +128,5 @@\n+    @Override\n+    public Commits commits(List<Hash> reachableFrom, List<Hash> unreachableFrom) throws IOException {\n+        return null;\n+    }\n+\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/TestRepository.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+    Commits commits(List<Hash> reachableFrom, List<Hash> unreachableFrom) throws IOException;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/ReadOnlyRepository.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -239,0 +239,2 @@\n+    boolean isRemergeDiffEmpty(Hash mergeCommitHash) throws IOException;\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Repository.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+    private final List<Hash> from;\n+    private final List<Hash> notFrom;\n@@ -50,0 +52,2 @@\n+        this.from = null;\n+        this.notFrom = null;\n@@ -58,0 +62,13 @@\n+    public GitCommits(Path dir, List<Hash> reachableFrom, List<Hash> unreachableFrom) throws IOException {\n+        this.dir = dir;\n+        this.range = null;\n+        this.reverse = false;\n+        this.num = -1;\n+        this.from = reachableFrom;\n+        this.notFrom = unreachableFrom;\n+        this.format = String.join(\"%n\",\n+                                  COMMIT_DELIMITER,\n+                                  GitCommitMetadata.FORMAT);\n+\n+    }\n+\n@@ -81,1 +98,9 @@\n-        cmd.add(range);\n+        if (range != null) {\n+            cmd.add(range);\n+        } else {\n+            cmd.addAll(from.stream().map(Hash::hex).toList());\n+            if (!notFrom.isEmpty()) {\n+                cmd.add(\"--not\");\n+                cmd.addAll(notFrom.stream().map(Hash::hex).toList());\n+            }\n+        }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitCommits.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -183,0 +183,5 @@\n+    @Override\n+    public Commits commits(List<Hash> reachableFrom, List<Hash> unreachableFrom) throws IOException {\n+        return new GitCommits(dir, reachableFrom, unreachableFrom);\n+    }\n+\n@@ -1000,0 +1005,10 @@\n+    @Override\n+    public boolean isRemergeDiffEmpty(Hash mergeCommitHash) throws IOException {\n+        try (var p = Process.capture(\"git\", \"show\", \"--remerge-diff\", \"--format=%b\", mergeCommitHash.hex())\n+                .workdir(dir)\n+                .environ(currentEnv)\n+                .execute()) {\n+            return String.join(\"\", await(p).stdout()).isEmpty();\n+        }\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,5 @@\n+    @Override\n+    public boolean isRemergeDiffEmpty(Hash mergeCommitHash) throws IOException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n@@ -251,0 +256,5 @@\n+    @Override\n+    public Commits commits(List<Hash> reachableFrom, List<Hash> unreachableFrom) throws IOException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}