{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,1 +40,0 @@\n-    implementation project(':bots:csr')\n","filename":"bots\/cli\/build.gradle","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,1 +31,0 @@\n-    public static final String CSR_UPDATE_MARKER = \"<!-- csr: 'update' -->\";\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/PullRequestConstants.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-module {\n-    name = 'org.openjdk.skara.bots.csr'\n-    test {\n-        requires 'org.junit.jupiter.api'\n-        requires 'org.openjdk.skara.test'\n-        opens 'org.openjdk.skara.bots.csr' to 'org.junit.platform.commons'\n-    }\n-}\n-\n-dependencies {\n-    implementation project(':host')\n-    implementation project(':bot')\n-    implementation project(':forge')\n-    implementation project(':issuetracker')\n-    implementation project(':census')\n-    implementation project(':ci')\n-    implementation project(':json')\n-    implementation project(':vcs')\n-    implementation project(':metrics')\n-    implementation project(':jcheck')\n-    implementation project(':jbs')\n-    implementation project(':bots:common')\n-\n-    testImplementation project(':test')\n-}\n","filename":"bots\/csr\/build.gradle","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-module org.openjdk.skara.bots.csr {\n-    requires org.openjdk.skara.bot;\n-    requires org.openjdk.skara.vcs;\n-    requires org.openjdk.skara.forge;\n-    requires org.openjdk.skara.issuetracker;\n-    requires org.openjdk.skara.jcheck;\n-    requires org.openjdk.skara.jbs;\n-    requires org.openjdk.skara.bots.common;\n-    requires java.logging;\n-\n-    provides org.openjdk.skara.bot.BotFactory with org.openjdk.skara.bots.csr.CSRBotFactory;\n-}\n","filename":"bots\/csr\/src\/main\/java\/module-info.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -1,79 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.csr;\n-\n-import java.util.HashMap;\n-import org.openjdk.skara.bot.*;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.logging.Logger;\n-import org.openjdk.skara.forge.HostedRepository;\n-import org.openjdk.skara.issuetracker.IssueProject;\n-\n-\/**\n- * The factory creates a CSRPullRequestBot for every configured repository\n- * and a CSRIssueBot for each unique IssueProject found.\n- *\/\n-public class CSRBotFactory implements BotFactory {\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.csr\");\n-\n-    static final String NAME = \"csr\";\n-    @Override\n-    public String name() {\n-        return NAME;\n-    }\n-\n-    @Override\n-    public List<Bot> create(BotConfiguration configuration) {\n-        var ret = new ArrayList<Bot>();\n-        var prBots = new ArrayList<Bot>();\n-        var specific = configuration.specific();\n-        var issueProjects = new HashMap<String, IssueProject>();\n-        var repositories = new HashMap<IssueProject, List<HostedRepository>>();\n-\n-        for (var project : specific.get(\"projects\").asArray()) {\n-            var repo = configuration.repository(project.get(\"repository\").asString());\n-            var issuesString = project.get(\"issues\").asString();\n-            var issueProject = issueProjects.get(issuesString);\n-            if (issueProject == null) {\n-                issueProject = configuration.issueProject(issuesString);\n-                issueProjects.put(issuesString, issueProject);\n-            }\n-            if (!repositories.containsKey(issueProject)) {\n-                repositories.put(issueProject, new ArrayList<>());\n-            }\n-            repositories.get(issueProject).add(repo);\n-            log.info(\"Setting up csr bot for \" + repo.name());\n-            prBots.add(new CSRPullRequestBot(repo, issueProject));\n-        }\n-\n-        for (IssueProject issueProject : issueProjects.values()) {\n-            ret.add(new CSRIssueBot(issueProject, repositories.get(issueProject)));\n-        }\n-        \/\/ Need to add the PR bots after the issue bots, so that issue bots are called first\n-        ret.addAll(prBots);\n-\n-        return ret;\n-    }\n-}\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotFactory.java","additions":0,"deletions":79,"binary":false,"changes":79,"status":"deleted"},{"patch":"@@ -1,92 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.csr;\n-\n-import java.time.Duration;\n-import java.time.Instant;\n-import java.time.ZoneId;\n-import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.logging.Logger;\n-import org.openjdk.skara.bot.Bot;\n-import org.openjdk.skara.bot.WorkItem;\n-import org.openjdk.skara.forge.HostedRepository;\n-import org.openjdk.skara.issuetracker.Issue;\n-import org.openjdk.skara.issuetracker.IssuePoller;\n-import org.openjdk.skara.issuetracker.IssueProject;\n-\n-\/**\n- * The CSRIssueBot polls an IssueProject for updated issues of CSR type. When\n- * found, IssueWorkItems are created to figure out if any PR needs to be\n- * re-evaluated.\n- *\/\n-public class CSRIssueBot implements Bot {\n-    private final IssueProject issueProject;\n-    private final List<HostedRepository> repositories;\n-    private final IssuePoller poller;\n-\n-    public CSRIssueBot(IssueProject issueProject, List<HostedRepository> repositories) {\n-        this.issueProject = issueProject;\n-        this.repositories = repositories;\n-        \/\/ The CSRPullRequestBot will initially evaluate all active PRs so there\n-        \/\/ is no need to look at any issues older than the start time of the bot\n-        \/\/ here. A padding of 10 minutes for the initial query should cover any\n-        \/\/ potential time difference between local and remote, as well as timing\n-        \/\/ issues between the first run of each bot, without the risk of\n-        \/\/ returning excessive amounts of Issues in the first run.\n-        this.poller = new IssuePoller(issueProject, Duration.ofMinutes(10)) {\n-            \/\/ Only query for CSR issues in this poller.\n-            @Override\n-            protected List<Issue> queryIssues(IssueProject issueProject, ZonedDateTime updatedAfter) {\n-                return issueProject.csrIssues(updatedAfter);\n-            }\n-        };\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"CSRIssueBot@\" + issueProject.name();\n-    }\n-\n-    @Override\n-    public List<WorkItem> getPeriodicItems() {\n-        var issues = poller.updatedIssues();\n-        var items = issues.stream()\n-                .map(i -> (WorkItem) new IssueWorkItem(this, i, e -> poller.retryIssue(i)))\n-                .toList();\n-        poller.lastBatchHandled();\n-        return items;\n-    }\n-\n-    @Override\n-    public String name() {\n-        return CSRBotFactory.NAME;\n-    }\n-\n-    List<HostedRepository> repositories() {\n-        return repositories;\n-    }\n-}\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRIssueBot.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.csr;\n-\n-import java.time.ZonedDateTime;\n-import org.openjdk.skara.bot.*;\n-import org.openjdk.skara.forge.HostedRepository;\n-import org.openjdk.skara.forge.PullRequest;\n-import org.openjdk.skara.forge.PullRequestPoller;\n-import org.openjdk.skara.issuetracker.IssueProject;\n-\n-import java.util.*;\n-import java.util.logging.Logger;\n-\n-\/**\n- * The CSRPullRequestBot polls all PRs for a specific repository for updates.\n- * When found, PullRequestWorkItems are created to re-evaluate CSR state for\n- * the PR.\n- *\/\n-class CSRPullRequestBot implements Bot {\n-    private final HostedRepository repo;\n-    private final IssueProject project;\n-    private final PullRequestPoller poller;\n-\n-    CSRPullRequestBot(HostedRepository repo, IssueProject project) {\n-        this.repo = repo;\n-        this.project = project;\n-        this.poller = new PullRequestPoller(repo, false);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return \"CSRPullRequestBot@\" + repo.name();\n-    }\n-\n-    @Override\n-    public List<WorkItem> getPeriodicItems() {\n-        var items = new ArrayList<WorkItem>();\n-\n-        var prs = poller.updatedPullRequests();\n-        for (PullRequest pr : prs) {\n-            var pullRequestWorkItem = new PullRequestWorkItem(repo, pr.id(), project, pr.updatedAt(),\n-                    e -> poller.retryPullRequest(pr));\n-            items.add(pullRequestWorkItem);\n-        }\n-        poller.lastBatchHandled();\n-        return items;\n-    }\n-\n-    @Override\n-    public String name() {\n-        return CSRBotFactory.NAME;\n-    }\n-\n-    public IssueProject getProject() {\n-        return project;\n-    }\n-}\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/CSRPullRequestBot.java","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -1,123 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.csr;\n-\n-import java.nio.file.Path;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.Optional;\n-import java.util.function.Consumer;\n-import java.util.logging.Logger;\n-import java.util.stream.Stream;\n-import org.openjdk.skara.bot.WorkItem;\n-import org.openjdk.skara.forge.PullRequestUtils;\n-import org.openjdk.skara.issuetracker.Issue;\n-import org.openjdk.skara.issuetracker.Link;\n-import org.openjdk.skara.jbs.Backports;\n-\n-\/**\n- * The IssueWorkItem is read-only. Its purpose is to create PullRequestWorkItems for\n- * every pull request found in the Backport hierarchy associated with a CSR issue.\n- * It should only be triggered when a modified CSR issue has been found.\n- *\/\n-class IssueWorkItem implements WorkItem {\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.csr\");\n-\n-    private final CSRIssueBot bot;\n-    private final Issue csrIssue;\n-    private final Consumer<RuntimeException> errorHandler;\n-\n-    public IssueWorkItem(CSRIssueBot bot, Issue csrIssue, Consumer<RuntimeException> errorHandler) {\n-        this.bot = bot;\n-        this.csrIssue = csrIssue;\n-        this.errorHandler = errorHandler;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return botName() + \"\/IssueWorkItem@\" + csrIssue.id();\n-    }\n-\n-    \/**\n-     * Concurrency between IssueWorkItems is ok as long as they aren't processing the\n-     * same issue and are spawned from the same bot instance.\n-     *\/\n-    @Override\n-    public boolean concurrentWith(WorkItem other) {\n-        if (!(other instanceof IssueWorkItem otherItem)) {\n-            return true;\n-        }\n-\n-        if (!csrIssue.project().name().equals(otherItem.csrIssue.project().name())) {\n-            return true;\n-        }\n-\n-        if (!csrIssue.id().equals(otherItem.csrIssue.id())) {\n-            return true;\n-        }\n-\n-        if (!bot.equals(otherItem.bot)) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    @Override\n-    public Collection<WorkItem> run(Path scratchPath) {\n-        var link = csrIssue.links().stream()\n-                .filter(l -> l.relationship().isPresent() && \"csr of\".equals(l.relationship().get())).findAny();\n-        var issue = link.flatMap(Link::issue);\n-        var mainIssue = issue.flatMap(Backports::findMainIssue);\n-        if (mainIssue.isEmpty()) {\n-            return List.of();\n-        }\n-        var backports = Backports.findBackports(mainIssue.get(), false);\n-        var ret = new ArrayList<WorkItem>();\n-        Stream.concat(mainIssue.stream(), backports.stream())\n-                .flatMap(i -> PullRequestUtils.pullRequestCommentLink(i).stream())\n-                .flatMap(uri -> bot.repositories().stream()\n-                        .flatMap(r -> r.parsePullRequestUrl(uri.toString()).stream()))\n-                .filter(Issue::isOpen)\n-                \/\/ This will mix time stamps from the IssueTracker and the Forge hosting PRs, but it's the\n-                \/\/ best we can do.\n-                .map(pr -> new PullRequestWorkItem(pr.repository(), pr.id(), csrIssue.project(), csrIssue.updatedAt(), errorHandler))\n-                .forEach(ret::add);\n-        return ret;\n-    }\n-\n-    @Override\n-    public String botName() {\n-        return CSRBotFactory.NAME;\n-    }\n-\n-    @Override\n-    public String workItemName() {\n-        return \"issue\";\n-    }\n-\n-    @Override\n-    public void handleRuntimeException(RuntimeException e) {\n-        errorHandler.accept(e);\n-    }\n-}\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/IssueWorkItem.java","additions":0,"deletions":123,"binary":false,"changes":123,"status":"deleted"},{"patch":"@@ -1,320 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.csr;\n-\n-import java.nio.file.Path;\n-import java.time.Duration;\n-import java.time.ZonedDateTime;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import java.util.function.Consumer;\n-import java.util.logging.Level;\n-import java.util.logging.Logger;\n-\n-import org.openjdk.skara.bot.WorkItem;\n-import org.openjdk.skara.bots.common.BotUtils;\n-import org.openjdk.skara.bots.common.SolvesTracker;\n-import org.openjdk.skara.forge.HostedRepository;\n-import org.openjdk.skara.forge.PullRequest;\n-import org.openjdk.skara.issuetracker.Comment;\n-import org.openjdk.skara.issuetracker.Issue;\n-import org.openjdk.skara.issuetracker.IssueProject;\n-import org.openjdk.skara.jbs.Backports;\n-\n-import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n-\n-\/**\n- * The PullRequestWorkItem is the work horse of the CSRBot. It gets triggered when\n- * either the pull request itself, or any CSR issue associated with it have been\n- * updated. It operates on one single pull request and re-evaluates the CSR state\n- * for it.\n- *\/\n-class PullRequestWorkItem implements WorkItem {\n-    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.csr\");\n-    private final HostedRepository repository;\n-    private final String prId;\n-    private final IssueProject project;\n-    private final Consumer<RuntimeException> errorHandler;\n-    \/**\n-     * The updatedAt timestamp of the external entity that triggered this WorkItem,\n-     * which would be either a PR or a CSR Issue. Used for tracking reaction legacy\n-     * of the bot through logging.\n-     *\/\n-    private final ZonedDateTime triggerUpdatedAt;\n-\n-    public PullRequestWorkItem(HostedRepository repository, String prId, IssueProject project,\n-            ZonedDateTime triggerUpdatedAt, Consumer<RuntimeException> errorHandler) {\n-        this.repository = repository;\n-        this.prId = prId;\n-        this.project = project;\n-        this.triggerUpdatedAt = triggerUpdatedAt;\n-        this.errorHandler = errorHandler;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return botName()+ \"\/PullRequestWorkItem@\" + repository.name() + \"#\" + prId;\n-    }\n-\n-    @Override\n-    public boolean concurrentWith(WorkItem other) {\n-        if (!(other instanceof PullRequestWorkItem item)) {\n-            return true;\n-        }\n-\n-        return !(repository.isSame(item.repository) && prId.equals(item.prId));\n-    }\n-\n-    private String describe(PullRequest pr) {\n-        return pr.repository().name() + \"#\" + pr.id();\n-    }\n-\n-    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n-        return \"Change requires CSR request [\" + issue.id() + \"](\" + issue.webUrl() + \") to be approved\";\n-    }\n-\n-    private boolean hasCsrIssueAndProgress(PullRequest pr, Issue csr) {\n-        var statusMessage = getStatusMessage(pr);\n-        return hasCsrIssue(statusMessage, csr) &&\n-                (statusMessage.contains(\"- [ ] \" + generateCSRProgressMessage(csr)) ||\n-                        statusMessage.contains(\"- [x] \" + generateCSRProgressMessage(csr)));\n-    }\n-\n-    private boolean hasCsrIssueAndProgressChecked(PullRequest pr, Issue csr) {\n-        var statusMessage = getStatusMessage(pr);\n-        return hasCsrIssue(statusMessage, csr) && statusMessage.contains(\"- [x] \" + generateCSRProgressMessage(csr));\n-    }\n-\n-    private boolean hasCsrIssue(String statusMessage, Issue csr) {\n-        return statusMessage.contains(csr.id()) &&\n-                statusMessage.contains(csr.webUrl().toString()) &&\n-                statusMessage.contains(BotUtils.escape(csr.title()) + \" (**CSR**)\");\n-    }\n-\n-    private boolean hasWithdrawnCsrIssue(String statusMessage, Issue csr) {\n-        return statusMessage.contains(csr.id()) &&\n-                statusMessage.contains(csr.webUrl().toString()) &&\n-                statusMessage.contains(BotUtils.escape(csr.title()) + \" (**CSR**) (Withdrawn)\");\n-    }\n-\n-    private String getStatusMessage(PullRequest pr) {\n-        var lastIndex = pr.body().lastIndexOf(PROGRESS_MARKER);\n-        if (lastIndex == -1) {\n-            return \"\";\n-        } else {\n-            return pr.body().substring(lastIndex);\n-        }\n-    }\n-\n-    private void addUpdateMarker(PullRequest pr) {\n-        var statusMessage = getStatusMessage(pr);\n-        if (statusMessage.isEmpty()) {\n-            log.info(\"No PROGRESS_MARKER found in PR body, wait for first CheckRun before adding csr update marker.\");\n-        } else if (!statusMessage.contains(CSR_UPDATE_MARKER)) {\n-            pr.setBody(pr.body() + \"\\n\" + CSR_UPDATE_MARKER + \"\\n\");\n-        } else {\n-            log.info(\"The pull request \" + describe(pr) + \" has already had a csr update marker. Do not need to add it again.\");\n-        }\n-    }\n-\n-    @Override\n-    public Collection<WorkItem> run(Path scratchPath) {\n-        var pr = repository.pullRequest(prId);\n-        \/\/ All the issues this pr solves\n-        var mainIssue = org.openjdk.skara.vcs.openjdk.Issue.fromStringRelaxed(pr.title());\n-        var issues = new ArrayList<org.openjdk.skara.vcs.openjdk.Issue>();\n-        mainIssue.ifPresent(issues::add);\n-        issues.addAll(SolvesTracker.currentSolved(pr.repository().forge().currentUser(), pr.comments()));\n-\n-        if (issues.isEmpty()) {\n-            log.info(\"No issue found for \" + describe(pr));\n-            return List.of();\n-        }\n-\n-        var versionOpt = BotUtils.getVersion(pr);\n-        if (versionOpt.isEmpty()) {\n-            log.info(\"No fix version found in `.jcheck\/conf` for \" + describe(pr));\n-            return List.of();\n-        }\n-\n-        boolean notExistingUnresolvedCSR = true;\n-        boolean needToAddUpdateMarker = false;\n-        boolean existingCSR = false;\n-        boolean existingApprovedCSR = false;\n-\n-        for (var issue : issues) {\n-            var jbsIssueOpt = project.issue(issue.shortId());\n-            if (jbsIssueOpt.isEmpty()) {\n-                \/\/ An issue could not be found, so the csr label cannot be removed\n-                notExistingUnresolvedCSR = false;\n-                var issueId = issue.project().isEmpty() ? (project.name() + \"-\" + issue.id()) : issue.id();\n-                log.info(issueId + \" for \" + describe(pr) + \" not found\");\n-                continue;\n-            }\n-\n-            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n-            if (csrOptional.isEmpty()) {\n-                log.info(\"No CSR found for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr) + \" with fixVersion \" + versionOpt.get().raw());\n-                continue;\n-            }\n-            var csr = csrOptional.get();\n-            existingCSR = true;\n-\n-            log.info(\"Found CSR \" + csr.id() + \" for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr));\n-            if (!hasCsrIssueAndProgress(pr, csr) && !isWithdrawnCSR(csr)) {\n-                \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress,\n-                \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n-                log.info(\"The PR body doesn't have the CSR issue or progress, adding the csr update marker for this csr issue\"\n-                        + csr.id() + \" for \" + describe(pr));\n-                needToAddUpdateMarker = true;\n-            }\n-\n-            var resolution = csr.properties().get(\"resolution\");\n-            if (resolution == null || resolution.isNull()) {\n-                notExistingUnresolvedCSR = false;\n-                if (!pr.labelNames().contains(CSR_LABEL)) {\n-                    log.info(\"CSR issue resolution is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n-                    pr.addLabel(CSR_LABEL);\n-                } else {\n-                    log.info(\"CSR issue resolution is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n-                }\n-                continue;\n-            }\n-\n-            var name = resolution.get(\"name\");\n-            if (name == null || name.isNull()) {\n-                notExistingUnresolvedCSR = false;\n-                if (!pr.labelNames().contains(CSR_LABEL)) {\n-                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n-                    pr.addLabel(CSR_LABEL);\n-                } else {\n-                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n-                }\n-                continue;\n-            }\n-\n-            if (csr.state() != Issue.State.CLOSED) {\n-                notExistingUnresolvedCSR = false;\n-                if (!pr.labelNames().contains(CSR_LABEL)) {\n-                    log.info(\"CSR issue state is not closed for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n-                    pr.addLabel(CSR_LABEL);\n-                } else {\n-                    log.info(\"CSR issue state is not closed for csr issue\" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n-                }\n-                continue;\n-            }\n-\n-            if (!name.asString().equals(\"Approved\")) {\n-                if (name.asString().equals(\"Withdrawn\")) {\n-                    \/\/ This condition is necessary to prevent the bot from adding the CSR label again.\n-                    \/\/ And the bot can't remove the CSR label automatically here.\n-                    \/\/ Because the PR author with the role of Committer may withdraw a CSR that\n-                    \/\/ a Reviewer had requested and integrate it without satisfying that requirement.\n-                    if (!hasWithdrawnCsrIssue(getStatusMessage(pr), csr)) {\n-                        needToAddUpdateMarker = true;\n-                    }\n-                    log.info(\"CSR closed and withdrawn for csr issue \" + csr.id() + \" for \" + describe(pr));\n-                } else if (!pr.labelNames().contains(CSR_LABEL)) {\n-                    notExistingUnresolvedCSR = false;\n-                    log.info(\"CSR issue resolution is not 'Approved' for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n-                    pr.addLabel(CSR_LABEL);\n-                } else {\n-                    notExistingUnresolvedCSR = false;\n-                    log.info(\"CSR issue resolution is not 'Approved' for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n-                }\n-                continue;\n-            } else {\n-                existingApprovedCSR = true;\n-            }\n-\n-            \/\/ The CSR issue has been closed and approved\n-            if (!hasCsrIssueAndProgressChecked(pr, csr)) {\n-                \/\/ If the PR body doesn't have the CSR issue or doesn't have the CSR progress or the CSR progress checkbox is not selected,\n-                \/\/ this bot need to add the csr update marker so that the PR bot can update the message of the PR body.\n-                log.info(\"CSR closed and approved for \" + describe(pr) + \", adding the csr update marker\");\n-                needToAddUpdateMarker = true;\n-            }\n-        }\n-        if (needToAddUpdateMarker) {\n-            addUpdateMarker(pr);\n-        }\n-        if (notExistingUnresolvedCSR && existingCSR && (!isCSRNeeded(pr.comments()) || existingApprovedCSR) && pr.labelNames().contains(CSR_LABEL)) {\n-            log.info(\"All CSR issues closed and approved for \" + describe(pr) + \", removing CSR label\");\n-            pr.removeLabel(CSR_LABEL);\n-        }\n-        logLatency();\n-        return List.of();\n-    }\n-\n-    \/**\n-     * Determine whether the CSR label is added via '\/csr needed' command\n-     *\/\n-    private boolean isCSRNeeded(List<Comment> comments) {\n-        for (int i = comments.size() - 1; i >= 0; i--) {\n-            var comment = comments.get(i);\n-            if (comment.body().contains(CSR_NEEDED_MARKER)) {\n-                return true;\n-            }\n-            if (comment.body().contains(CSR_UNNEEDED_MARKER)) {\n-                return false;\n-            }\n-        }\n-        return false;\n-    }\n-\n-    private void logLatency() {\n-        if (log.isLoggable(Level.INFO)) {\n-            var updatedPr = repository.pullRequest(prId);\n-            var latency = Duration.between(triggerUpdatedAt, updatedPr.updatedAt());\n-            log.log(Level.INFO, \"Time from trigger to CSR state updated in PR \" + latency, latency);\n-        }\n-    }\n-\n-    @Override\n-    public String botName() {\n-        return CSRBotFactory.NAME;\n-    }\n-\n-    @Override\n-    public String workItemName() {\n-        return \"pr\";\n-    }\n-\n-    public final void handleRuntimeException(RuntimeException e) {\n-        errorHandler.accept(e);\n-    }\n-\n-    private boolean isWithdrawnCSR(Issue csr) {\n-        if (csr.isClosed()) {\n-            var resolution = csr.properties().get(\"resolution\");\n-            if (resolution != null && !resolution.isNull()) {\n-                var name = resolution.get(\"name\");\n-                if (name != null && !name.isNull() && name.asString().equals(\"Withdrawn\")) {\n-                    return true;\n-                }\n-            }\n-        }\n-        return false;\n-    }\n-}\n","filename":"bots\/csr\/src\/main\/java\/org\/openjdk\/skara\/bots\/csr\/PullRequestWorkItem.java","additions":0,"deletions":320,"binary":false,"changes":320,"status":"deleted"},{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.csr;\n-\n-import java.util.List;\n-import org.junit.jupiter.api.Test;\n-import org.openjdk.skara.json.*;\n-import org.openjdk.skara.test.*;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-\n-public class CSRBotFactoryTest {\n-    @Test\n-    public void testCreate() {\n-        String jsonString = \"\"\"\n-                 {\n-                   \"projects\": [\n-                     {\n-                       \"repository\": \"repo1\",\n-                       \"issues\": \"test_bugs\/TEST\"\n-                     },\n-                     {\n-                       \"repository\": \"repo2\",\n-                       \"issues\": \"test_bugs\/TEST\"\n-                     },\n-                     {\n-                       \"repository\": \"repo3\",\n-                       \"issues\": \"test_bugs\/TEST2\"\n-                     }\n-                   ]\n-                 }\n-                \"\"\";\n-        var jsonConfig = JWCC.parse(jsonString).asObject();\n-\n-        var testHost = TestHost.createNew(List.of());\n-        var testBotFactory = TestBotFactory.newBuilder()\n-                .addHostedRepository(\"repo1\", new TestHostedRepository(testHost, \"repo1\"))\n-                .addHostedRepository(\"repo2\", new TestHostedRepository(testHost, \"repo2\"))\n-                .addHostedRepository(\"repo3\", new TestHostedRepository(testHost, \"repo3\"))\n-                .addIssueProject(\"test_bugs\/TEST\", new TestIssueProject(testHost, \"TEST\"))\n-                .addIssueProject(\"test_bugs\/TEST2\", new TestIssueProject(testHost, \"TEST2\"))\n-                .build();\n-\n-        var bots = testBotFactory.createBots(CSRBotFactory.NAME, jsonConfig);\n-        assertEquals(5, bots.size());\n-\n-        var csrPullRequestBots = bots.stream().filter(e -> e.getClass().equals(CSRPullRequestBot.class)).toList();\n-        var csrIssueBots = bots.stream().filter(e -> e.getClass().equals(CSRIssueBot.class)).toList();\n-\n-        \/\/ A CSRPullRequestBot for every configured repository\n-        assertEquals(3, csrPullRequestBots.size());\n-        \/\/ A CSRIssueBot for each unique IssueProject\n-        assertEquals(2, csrIssueBots.size());\n-\n-        var CSRPullRequestBot1 = (CSRPullRequestBot) csrPullRequestBots.get(0);\n-        var CSRPullRequestBot2 = (CSRPullRequestBot) csrPullRequestBots.get(1);\n-        var CSRPullRequestBot3 = (CSRPullRequestBot) csrPullRequestBots.get(2);\n-        assertEquals(\"CSRPullRequestBot@repo1\", CSRPullRequestBot1.toString());\n-        assertEquals(\"CSRPullRequestBot@repo2\", CSRPullRequestBot2.toString());\n-        assertEquals(\"CSRPullRequestBot@repo3\", CSRPullRequestBot3.toString());\n-        assertEquals(\"TEST\", CSRPullRequestBot1.getProject().name());\n-        assertEquals(\"TEST\", CSRPullRequestBot2.getProject().name());\n-        assertEquals(\"TEST2\", CSRPullRequestBot3.getProject().name());\n-\n-        for (var bot : csrIssueBots) {\n-            CSRIssueBot csrIssueBot = (CSRIssueBot) bot;\n-            if (csrIssueBot.toString().equals(\"CSRIssueBot@TEST\")) {\n-                assertEquals(2, csrIssueBot.repositories().size());\n-            } else if (csrIssueBot.toString().equals(\"CSRIssueBot@TEST2\")) {\n-                assertEquals(1, csrIssueBot.repositories().size());\n-            } else {\n-                throw new RuntimeException(\"This CSRIssueBot is not expected\");\n-            }\n-        }\n-    }\n-}\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotFactoryTest.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -1,643 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.csr;\n-\n-import org.openjdk.skara.bots.common.BotUtils;\n-import org.openjdk.skara.bots.common.SolvesTracker;\n-import org.openjdk.skara.forge.PullRequestUtils;\n-import org.openjdk.skara.issuetracker.Link;\n-import org.openjdk.skara.issuetracker.Issue;\n-import org.openjdk.skara.test.*;\n-import org.openjdk.skara.json.JSON;\n-\n-import org.junit.jupiter.api.*;\n-\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.util.*;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n-\n-class CSRBotTests {\n-    @Test\n-    void removeLabelForApprovedCSR(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issues = credentials.getIssueProject();\n-            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n-\n-            var csr = issues.createIssue(\"This is an approved CSR\", List.of(), Map.of());\n-            csr.setState(Issue.State.CLOSED);\n-            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n-            issue.addLink(Link.create(csr, \"csr for\").build());\n-\n-            var bot = new CSRPullRequestBot(repo, issues);\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issue.id() + \": This is an issue\");\n-\n-            \/\/ Add CSR label\n-            pr.addLabel(\"csr\");\n-\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            \/\/ The bot should have removed the CSR label\n-            assertFalse(pr.store().labelNames().contains(\"csr\"));\n-        }\n-    }\n-\n-    @Test\n-    void keepLabelForNoIssue(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issues = credentials.getIssueProject();\n-            var bot = new CSRPullRequestBot(repo, issues);\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", \"This is an issue\");\n-\n-            \/\/ Add CSR label\n-            pr.addLabel(\"csr\");\n-\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            \/\/ The bot should have kept the CSR label\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-        }\n-    }\n-\n-    @Test\n-    void keepLabelForNoJBS(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issues = credentials.getIssueProject();\n-            var bot = new CSRPullRequestBot(repo, issues);\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", \"123: This is an issue\");\n-\n-            \/\/ Add CSR label\n-            pr.addLabel(\"csr\");\n-\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            \/\/ The bot should have kept the CSR label\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-        }\n-    }\n-\n-    @Test\n-    void keepLabelForNotApprovedCSR(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issues = credentials.getIssueProject();\n-            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n-\n-            var csr = issues.createIssue(\"This is an approved CSR\", List.of(), Map.of(\"resolution\",\n-                                                                                      JSON.object().put(\"name\", \"Unresolved\")));\n-            csr.setState(Issue.State.OPEN);\n-            issue.addLink(Link.create(csr, \"csr for\").build());\n-\n-            var bot = new CSRPullRequestBot(repo, issues);\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issue.id() + \": This is an issue\");\n-\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            \/\/ The bot added the csr label automatically\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            \/\/ The bot should have kept the CSR label\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-        }\n-    }\n-\n-    @Test\n-    void handleCSRWithNullResolution(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issues = credentials.getIssueProject();\n-            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n-\n-            var csr = issues.createIssue(\"This is an CSR with null resolution\", List.of(), Map.of(\"resolution\", JSON.of()));\n-            csr.setState(Issue.State.OPEN);\n-            issue.addLink(Link.create(csr, \"csr for\").build());\n-\n-            var bot = new CSRPullRequestBot(repo, issues);\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issue.id() + \": This is an issue\");\n-\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            \/\/ The bot added the csr label automatically\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Run bot, should *not* throw NPE\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            \/\/ The bot should have kept the CSR label\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-        }\n-    }\n-\n-    @Test\n-    void handleCSRWithNullName(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issues = credentials.getIssueProject();\n-            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n-\n-            var csr = issues.createIssue(\"This is an CSR with null resolution\", List.of(),\n-                                         Map.of(\"resolution\", JSON.object().put(\"name\", JSON.of())));\n-            csr.setState(Issue.State.OPEN);\n-            issue.addLink(Link.create(csr, \"csr for\").build());\n-\n-            var bot = new CSRPullRequestBot(repo, issues);\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issue.id() + \": This is an issue\");\n-\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            \/\/ The bot added the csr label automatically\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Run bot, should *not* throw NPE\n-            TestBotRunner.runPeriodicItems(bot);\n-\n-            \/\/ The bot should have kept the CSR label\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-        }\n-    }\n-\n-    @Test\n-    void testBackportCsr(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issueProject = credentials.getIssueProject();\n-            var csrPullRequestBot = new CSRPullRequestBot(repo, issueProject);\n-            var csrIssueBot = new CSRIssueBot(issueProject, List.of(repo));\n-\n-            \/\/ Run issue bot once to initialize lastUpdatedAt\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-\n-            var issue = issueProject.createIssue(\"This is the primary issue\", List.of(), Map.of());\n-            issue.setState(Issue.State.CLOSED);\n-            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n-            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n-\n-            var csr = issueProject.createIssue(\"This is the primary CSR\", List.of(), Map.of());\n-            csr.setState(Issue.State.CLOSED);\n-            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n-            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n-            issue.addLink(Link.create(csr, \"csr for\").build());\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Push a commit to the jdk18 branch\n-            var jdk18Branch = localRepo.branch(masterHash, \"jdk18\");\n-            localRepo.checkout(jdk18Branch);\n-            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n-            Files.writeString(newFile, \"a_new_file\");\n-            localRepo.add(newFile);\n-            var issueNumber = issue.id().split(\"-\")[1];\n-            var commitMessage = issueNumber + \": This is the primary issue\\n\\nReviewed-by: integrationreviewer2\";\n-            var commitHash = localRepo.commit(commitMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n-            localRepo.push(commitHash, repo.authenticatedUrl(), \"jdk18\", true);\n-\n-            \/\/ \"backport\" the commit to the master branch\n-            localRepo.checkout(localRepo.defaultBranch());\n-            var editBranch = localRepo.branch(masterHash, \"edit\");\n-            localRepo.checkout(editBranch);\n-            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n-            Files.writeString(newFile2, \"a_new_file\");\n-            localRepo.add(newFile2);\n-            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.org\");\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issueNumber + \": This is the primary issue\");\n-            pr.addLabel(\"backport\");\n-            \/\/ Add the notification link to the PR in the issue. This is needed for the CSRIssueBot to\n-            \/\/ be able to trigger on CSR issue updates\n-            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n-\n-            \/\/ Remove `version=0.1` from `.jcheck\/conf`, set the version as null in the edit branch\n-            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n-            var newConf = defaultConf.replace(\"version=0.1\", \"\");\n-            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n-            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n-            var confHash = localRepo.commit(\"Set version as null\", \"duke\", \"duke@openjdk.org\");\n-            localRepo.push(confHash, repo.authenticatedUrl(), \"edit\", true);\n-            assertFalse(pr.store().labelNames().contains(\"csr\"));\n-            \/\/ Run bot. The bot won't get a CSR.\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ The bot shouldn't add the `csr` label.\n-            assertFalse(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Add `version=bla` to `.jcheck\/conf`, set the version as a wrong value\n-            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n-            newConf = defaultConf.replace(\"project=test\", \"project=test\\nversion=bla\");\n-            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n-            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n-            confHash = localRepo.commit(\"Set the version as a wrong value\", \"duke\", \"duke@openjdk.org\");\n-            localRepo.push(confHash, repo.authenticatedUrl(), \"edit\", true);\n-            \/\/ Run bot. The bot won't get a CSR.\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ The bot shouldn't add the `csr` label.\n-            assertFalse(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Test the method `TestPullRequest#diff`.\n-            assertEquals(1, pr.diff().patches().size());\n-\n-            \/\/ Set the `version` in `.jcheck\/conf` as 17 which is an available version.\n-            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n-            newConf = defaultConf.replace(\"version=bla\", \"version=17\");\n-            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n-            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n-            confHash = localRepo.commit(\"Set the version as 17\", \"duke\", \"duke@openjdk.org\");\n-            localRepo.push(confHash, repo.authenticatedUrl(), \"edit\", true);\n-            \/\/ Run bot. The primary CSR doesn't have the fix version `17`, so the bot won't get a CSR.\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ The bot shouldn't add the `csr` label.\n-            assertFalse(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Set the fix versions of the primary CSR to 17 and 18.\n-            csr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"18\"));\n-            \/\/ Run csr issue bot to trigger on updates to the CSR issue. The primary CSR has\n-            \/\/ the fix version `17`, so it would be used and the `csr` label would be added.\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-            \/\/ The bot should have added the `csr` label\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Revert the fix versions of the primary CSR to 18.\n-            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n-            \/\/ Create a backport issue whose fix version is 17\n-            var backportIssue = issueProject.createIssue(\"This is the backport issue\", List.of(), Map.of());\n-            backportIssue.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n-            backportIssue.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n-            backportIssue.setState(Issue.State.OPEN);\n-            issue.addLink(Link.create(backportIssue, \"backported by\").build());\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-            pr.removeLabel(\"csr\");\n-            \/\/ Run bot. The bot can find a backport issue but can't find a backport CSR.\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ The bot shouldn't add the `csr` label.\n-            assertFalse(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Create a backport CSR whose fix version is 17.\n-            var backportCsr = issueProject.createIssue(\"This is the backport CSR\", List.of(), Map.of());\n-            backportCsr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n-            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n-            backportCsr.setState(Issue.State.OPEN);\n-            backportIssue.addLink(Link.create(backportCsr, \"csr for\").build());\n-            \/\/ Run csr issue bot. The bot can find a backport issue and a backport CSR.\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-            \/\/ The bot should have added the CSR label\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Now we have a primary issue, a primary CSR, a backport issue, a backport CSR.\n-            \/\/ Set the backport CSR to have multiple fix versions, included 11.\n-            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"11\").add(\"8\"));\n-            \/\/ Set the `version` in `.jcheck\/conf` as 11.\n-            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n-            newConf = defaultConf.replace(\"version=17\", \"version=11\");\n-            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n-            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n-            confHash = localRepo.commit(\"Set the version as 11\", \"duke\", \"duke@openjdk.org\");\n-            localRepo.push(confHash, repo.authenticatedUrl(), \"edit\", true);\n-            pr.removeLabel(\"csr\");\n-            \/\/ Run bot.\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ The bot should have added the CSR label\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Set the backport CSR to have multiple fix versions, excluded 11.\n-            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"8\"));\n-            pr.removeLabel(\"csr\");\n-            \/\/ Run bot.\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ The bot shouldn't add the `csr` label.\n-            assertFalse(pr.store().labelNames().contains(\"csr\"));\n-        }\n-    }\n-\n-    private String generateCSRProgressMessage(org.openjdk.skara.issuetracker.Issue issue) {\n-        return \"Change requires CSR request [\" + issue.id() + \"](\" + issue.webUrl() + \") to be approved\";\n-    }\n-\n-    @Test\n-    void testCsrUpdateMarker(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issueProject = credentials.getIssueProject();\n-            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n-            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n-            var csrPullRequestBot = new CSRPullRequestBot(repo, issueProject);\n-            var csrIssueBot = new CSRIssueBot(issueProject, List.of(repo));\n-\n-            \/\/ Run issue bot once to initialize lastUpdatedAt\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issue.id() + \": This is an issue\");\n-            \/\/ Add the notification link to the PR in the issue. This is needed for the CSRIssueBot to\n-            \/\/ be able to trigger on CSR issue updates\n-            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ The bot shouldn't add the csr update marker\n-            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n-\n-            \/\/ Add the csr issue.\n-            var csr = issueProject.createIssue(\"This is an CSR <1>\", List.of(), Map.of());\n-            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n-            csr.setState(Issue.State.OPEN);\n-            issue.addLink(Link.create(csr, \"csr for\").build());\n-            \/\/ Run just the pull request bot\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ Nothing should have happened\n-            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n-            \/\/ Run csr issue bot to trigger updates on the CSR issue\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-            \/\/ The bot should not add the csr update marker\n-            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n-\n-            \/\/ Add csr issue and progress to the PR body\n-            pr.setBody(\"PR body\\n\" + PROGRESS_MARKER + csr.id() + csr.webUrl().toString() + BotUtils.escape(csr.title()) + \" (**CSR**)\"\n-                    + \"- [ ] \" + generateCSRProgressMessage(csr));\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ The bot shouldn't add the csr update marker\n-            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n-\n-            \/\/ Set csr status to closed and approved.\n-            csr.setState(Issue.State.CLOSED);\n-            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n-            \/\/ un csr issue bot to trigger updates on the CSR issue\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-            \/\/ The bot should add the csr update marker\n-            assertTrue(pr.store().body().contains(CSR_UPDATE_MARKER));\n-\n-            \/\/ Add csr issue and selected progress to the PR body\n-            pr.setBody(\"PR body\\n\" + PROGRESS_MARKER + csr.id() + csr.webUrl().toString() + BotUtils.escape(csr.title()) + \" (**CSR**)\"\n-                    + \"- [x] \" + generateCSRProgressMessage(csr));\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ The bot shouldn't add the csr update marker\n-            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n-\n-            \/\/ Add csr update marker to the pull request body manually.\n-            pr.setBody(\"PR body\\n\" + PROGRESS_MARKER + csr.id() + csr.webUrl().toString() + BotUtils.escape(csr.title()) + \" (**CSR**)\"\n-                    + \"- [ ] \" + generateCSRProgressMessage(csr));\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ The bot shouldn't add the csr update marker again. The PR should have only one csr update marker.\n-            assertTrue(pr.store().body().contains(CSR_UPDATE_MARKER));\n-            assertEquals(pr.store().body().indexOf(CSR_UPDATE_MARKER), pr.store().body().lastIndexOf(CSR_UPDATE_MARKER));\n-        }\n-    }\n-\n-    @Test\n-    void testCsrUpdateMarkerWithWithdrawnCSRIssue(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issueProject = credentials.getIssueProject();\n-            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n-            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n-            var csrPullRequestBot = new CSRPullRequestBot(repo, issueProject);\n-            var csrIssueBot = new CSRIssueBot(issueProject, List.of(repo));\n-\n-            \/\/ Run issue bot once to initialize lastUpdatedAt\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issue.id() + \": This is an issue\");\n-            \/\/ Add the notification link to the PR in the issue. This is needed for the CSRIssueBot to\n-            \/\/ be able to trigger on CSR issue updates\n-            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ The bot shouldn't add the csr update marker\n-            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n-\n-            \/\/ Add a withdrawn csr issue.\n-            var csr = issueProject.createIssue(\"This is an CSR\", List.of(), Map.of());\n-            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n-            csr.setState(Issue.State.CLOSED);\n-            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n-            issue.addLink(Link.create(csr, \"csr for\").build());\n-            \/\/ Run just the pull request bot\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-            \/\/ Nothing should have happened\n-            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n-            \/\/ Run csr issue bot to trigger updates on the CSR issue\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-            \/\/ The bot should not add the csr update marker\n-            assertFalse(pr.store().body().contains(CSR_UPDATE_MARKER));\n-        }\n-    }\n-\n-    @Test\n-    void testPRWithMultipleIssues(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var repo = credentials.getHostedRepository();\n-            var issueProject = credentials.getIssueProject();\n-            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n-            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n-            var csrPullRequestBot = new CSRPullRequestBot(repo, issueProject);\n-            var csrIssueBot = new CSRIssueBot(issueProject, List.of(repo));\n-\n-            \/\/ Run issue bot once to initialize lastUpdatedAt\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, repo.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, repo.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, repo.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(repo, \"master\", \"edit\", issue.id() + \": This is an issue\");\n-            pr.setBody(\"PR body\\n\" + PROGRESS_MARKER);\n-            \/\/ Add the notification link to the PR in the issue. This is needed for the CSRIssueBot to\n-            \/\/ be able to trigger on CSR issue updates\n-            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n-            \/\/ Run bot\n-            TestBotRunner.runPeriodicItems(csrPullRequestBot);\n-\n-            \/\/ Add another issue to this pr\n-            var issue2 = issueProject.createIssue(\"This is an issue 2\", List.of(), Map.of());\n-            issue2.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n-            pr.addComment(SolvesTracker.setSolvesMarker(new org.openjdk.skara.vcs.openjdk.Issue(issue2.id(), issue2.title())));\n-            PullRequestUtils.postPullRequestLinkComment(issue2, pr);\n-\n-            \/\/ Add a csr to issue2\n-            var csr2 = issueProject.createIssue(\"This is an CSR for issue2\", List.of(), Map.of());\n-            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n-            csr2.setState(Issue.State.OPEN);\n-            issue2.addLink(Link.create(csr2, \"csr for\").build());\n-\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-            \/\/ PR should contain csr label\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Add another issue to this pr\n-            var issue3 = issueProject.createIssue(\"This is an issue 3\", List.of(), Map.of());\n-            issue3.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n-            pr.addComment(SolvesTracker.setSolvesMarker(new org.openjdk.skara.vcs.openjdk.Issue(issue3.id(), issue3.title())));\n-            PullRequestUtils.postPullRequestLinkComment(issue3, pr);\n-\n-            \/\/ Withdrawn the csr for issue2\n-            csr2.setState(Issue.State.CLOSED);\n-            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-            assertTrue(pr.store().body().contains(CSR_UPDATE_MARKER));\n-            \/\/ PR should not contain csr label\n-            assertFalse(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Add a csr to issue3\n-            var csr3 = issueProject.createIssue(\"This is an CSR for issue3\", List.of(), Map.of());\n-            csr3.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n-            csr3.setState(Issue.State.OPEN);\n-            issue3.addLink(Link.create(csr3, \"csr for\").build());\n-\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-            \/\/ PR should contain csr label\n-            assertTrue(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Approve CSR3\n-            csr3.setState(Issue.State.CLOSED);\n-            csr3.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-            \/\/ PR should not contain csr label\n-            assertFalse(pr.store().labelNames().contains(\"csr\"));\n-\n-            \/\/ Approve CSR2\n-            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n-            TestBotRunner.runPeriodicItems(csrIssueBot);\n-            \/\/ PR should not contain csr label\n-            assertFalse(pr.store().labelNames().contains(\"csr\"));\n-        }\n-    }\n-}\n","filename":"bots\/csr\/src\/test\/java\/org\/openjdk\/skara\/bots\/csr\/CSRBotTests.java","additions":0,"deletions":643,"binary":false,"changes":643,"status":"deleted"},{"patch":"@@ -0,0 +1,95 @@\n+\/*\n+ * Copyright (c) 2022, 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import java.time.Duration;\n+import java.time.ZonedDateTime;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.openjdk.skara.bot.Bot;\n+import org.openjdk.skara.bot.WorkItem;\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.IssuePoller;\n+import org.openjdk.skara.issuetracker.IssueProject;\n+\n+\/**\n+ * The CSRIssueBot polls an IssueProject for updated issues of CSR type. When\n+ * found, IssueWorkItems are created to figure out if any PR needs to be\n+ * re-evaluated.\n+ *\/\n+public class CSRIssueBot implements Bot {\n+    private final IssueProject issueProject;\n+    private final List<HostedRepository> repositories;\n+    private final IssuePoller poller;\n+\n+    private final Map<String, PullRequestBot> pullRequestBotMap;\n+\n+    public CSRIssueBot(IssueProject issueProject, List<HostedRepository> repositories, Map<String, PullRequestBot> pullRequestBotMap) {\n+        this.issueProject = issueProject;\n+        this.repositories = repositories;\n+        this.pullRequestBotMap = pullRequestBotMap;\n+        \/\/ The CSRPullRequestBot will initially evaluate all active PRs so there\n+        \/\/ is no need to look at any issues older than the start time of the bot\n+        \/\/ here. A padding of 10 minutes for the initial query should cover any\n+        \/\/ potential time difference between local and remote, as well as timing\n+        \/\/ issues between the first run of each bot, without the risk of\n+        \/\/ returning excessive amounts of Issues in the first run.\n+        this.poller = new IssuePoller(issueProject, Duration.ofMinutes(10)) {\n+            \/\/ Only query for CSR issues in this poller.\n+            @Override\n+            protected List<Issue> queryIssues(IssueProject issueProject, ZonedDateTime updatedAfter) {\n+                return issueProject.csrIssues(updatedAfter);\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"CSRIssueBot@\" + issueProject.name();\n+    }\n+\n+    @Override\n+    public List<WorkItem> getPeriodicItems() {\n+        var issues = poller.updatedIssues();\n+        var items = issues.stream()\n+                .map(i -> (WorkItem) new IssueWorkItem(this, i, e -> poller.retryIssue(i)))\n+                .toList();\n+        poller.lastBatchHandled();\n+        return items;\n+    }\n+\n+    @Override\n+    public String name() {\n+        return PullRequestBotFactory.NAME;\n+    }\n+\n+    List<HostedRepository> repositories() {\n+        return repositories;\n+    }\n+\n+    PullRequestBot getPRBot(String repo){\n+        return pullRequestBotMap.get(repo);\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRIssueBot.java","additions":95,"deletions":0,"binary":false,"changes":95,"status":"added"},{"patch":"@@ -1176,0 +1176,3 @@\n+            \/\/ Check the status of csr issues and determine whether to add or remove csr label here\n+            updateCSRLabel(issues);\n+\n@@ -1283,0 +1286,119 @@\n+\n+    void updateCSRLabel(List<Issue> issues) {\n+        if (issues.isEmpty()) {\n+            log.info(\"No issue found for \" + describe(pr));\n+            return;\n+        }\n+\n+        var versionOpt = BotUtils.getVersion(pr);\n+        if (versionOpt.isEmpty()) {\n+            log.info(\"No fix version found in `.jcheck\/conf` for \" + describe(pr));\n+            return;\n+        }\n+        boolean notExistingUnresolvedCSR = true;\n+        boolean existingCSR = false;\n+        boolean existingApprovedCSR = false;\n+\n+        var project = workItem.bot.issueProject();\n+        if (project == null) {\n+            log.info(\"No issue project found for \" + describe(pr));\n+            return;\n+        }\n+\n+        for (var issue : issues) {\n+            var jbsIssueOpt = project.issue(issue.shortId());\n+            if (jbsIssueOpt.isEmpty()) {\n+                \/\/ An issue could not be found, so the csr label cannot be removed\n+                notExistingUnresolvedCSR = false;\n+                var issueId = issue.project().isEmpty() ? (project.name() + \"-\" + issue.id()) : issue.id();\n+                log.info(issueId + \" for \" + describe(pr) + \" not found\");\n+                continue;\n+            }\n+\n+            var csrOptional = Backports.findCsr(jbsIssueOpt.get(), versionOpt.get());\n+            if (csrOptional.isEmpty()) {\n+                log.info(\"No CSR found for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr) + \" with fixVersion \" + versionOpt.get().raw());\n+                continue;\n+            }\n+            var csr = csrOptional.get();\n+            existingCSR = true;\n+\n+            log.info(\"Found CSR \" + csr.id() + \" for issue \" + jbsIssueOpt.get().id() + \" for \" + describe(pr));\n+\n+            var resolution = csr.properties().get(\"resolution\");\n+            if (resolution == null || resolution.isNull()) {\n+                notExistingUnresolvedCSR = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue resolution is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    newLabels.add(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue resolution is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                continue;\n+            }\n+\n+            var name = resolution.get(\"name\");\n+            if (name == null || name.isNull()) {\n+                notExistingUnresolvedCSR = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    newLabels.add(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue resolution name is null for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                continue;\n+            }\n+\n+            if (csr.state() != org.openjdk.skara.issuetracker.Issue.State.CLOSED) {\n+                notExistingUnresolvedCSR = false;\n+                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    log.info(\"CSR issue state is not closed for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    newLabels.add(CSR_LABEL);\n+                } else {\n+                    log.info(\"CSR issue state is not closed for csr issue\" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+                continue;\n+            }\n+\n+            if (!name.asString().equals(\"Approved\")) {\n+                if (name.asString().equals(\"Withdrawn\")) {\n+                    \/\/ This condition is necessary to prevent the bot from adding the CSR label again.\n+                    \/\/ And the bot can't remove the CSR label automatically here.\n+                    \/\/ Because the PR author with the role of Committer may withdraw a CSR that\n+                    \/\/ a Reviewer had requested and integrate it without satisfying that requirement.\n+                    log.info(\"CSR closed and withdrawn for csr issue \" + csr.id() + \" for \" + describe(pr));\n+                } else if (!pr.labelNames().contains(CSR_LABEL)) {\n+                    notExistingUnresolvedCSR = false;\n+                    log.info(\"CSR issue resolution is not 'Approved' for csr issue \" + csr.id() + \" for \" + describe(pr) + \", adding the CSR label\");\n+                    newLabels.add(CSR_LABEL);\n+                } else {\n+                    notExistingUnresolvedCSR = false;\n+                    log.info(\"CSR issue resolution is not 'Approved' for csr issue \" + csr.id() + \" for \" + describe(pr) + \", not removing the CSR label\");\n+                }\n+            } else {\n+                existingApprovedCSR = true;\n+            }\n+        }\n+        if (notExistingUnresolvedCSR && existingCSR && (!isCSRNeeded(pr.comments()) || existingApprovedCSR) && pr.labelNames().contains(CSR_LABEL)) {\n+            log.info(\"All CSR issues closed and approved for \" + describe(pr) + \", removing CSR label\");\n+            newLabels.remove(CSR_LABEL);\n+        }\n+    }\n+\n+    private boolean isCSRNeeded(List<Comment> comments) {\n+        for (int i = comments.size() - 1; i >= 0; i--) {\n+            var comment = comments.get(i);\n+            if (comment.body().contains(CSR_NEEDED_MARKER)) {\n+                return true;\n+            }\n+            if (comment.body().contains(CSR_UNNEEDED_MARKER)) {\n+                return false;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    private String describe(PullRequest pr) {\n+        return pr.repository().name() + \"#\" + pr.id();\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -61,0 +61,2 @@\n+    private final boolean forceUpdate;\n+\n@@ -62,1 +64,1 @@\n-            boolean needsReadyCheck) {\n+                  boolean needsReadyCheck, boolean forceUpdate) {\n@@ -64,0 +66,1 @@\n+        this.forceUpdate = forceUpdate;\n@@ -275,1 +278,1 @@\n-        if (!currentCheckValid(census, comments, activeReviews, labels)) {\n+        if (forceUpdate || !currentCheckValid(census, comments, activeReviews, labels)) {\n@@ -344,1 +347,1 @@\n-                    return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt, false));\n+                    return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt, false, false));\n@@ -384,1 +387,1 @@\n-                return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt, false));\n+                return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt, false, false));\n@@ -391,1 +394,1 @@\n-                return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt, false));\n+                return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt, false, false));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.function.Consumer;\n+import java.util.logging.Logger;\n+import java.util.stream.Stream;\n+\n+import org.openjdk.skara.bot.WorkItem;\n+import org.openjdk.skara.forge.PullRequestUtils;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.Link;\n+import org.openjdk.skara.jbs.Backports;\n+\n+\/**\n+ * The IssueWorkItem is read-only. Its purpose is to create PullRequestWorkItems for\n+ * every pull request found in the Backport hierarchy associated with a CSR issue.\n+ * It should only be triggered when a modified CSR issue has been found.\n+ *\/\n+class IssueWorkItem implements WorkItem {\n+    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.pr\");\n+\n+    private final CSRIssueBot bot;\n+    private final Issue csrIssue;\n+    private final Consumer<RuntimeException> errorHandler;\n+\n+    public IssueWorkItem(CSRIssueBot bot, Issue csrIssue, Consumer<RuntimeException> errorHandler) {\n+        this.bot = bot;\n+        this.csrIssue = csrIssue;\n+        this.errorHandler = errorHandler;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return botName() + \"\/IssueWorkItem@\" + csrIssue.id();\n+    }\n+\n+    \/**\n+     * Concurrency between IssueWorkItems is ok as long as they aren't processing the\n+     * same issue and are spawned from the same bot instance.\n+     *\/\n+    @Override\n+    public boolean concurrentWith(WorkItem other) {\n+        if (!(other instanceof IssueWorkItem otherItem)) {\n+            return true;\n+        }\n+\n+        if (!csrIssue.project().name().equals(otherItem.csrIssue.project().name())) {\n+            return true;\n+        }\n+\n+        if (!csrIssue.id().equals(otherItem.csrIssue.id())) {\n+            return true;\n+        }\n+\n+        if (!bot.equals(otherItem.bot)) {\n+            return true;\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Collection<WorkItem> run(Path scratchPath) {\n+        var link = csrIssue.links().stream()\n+                .filter(l -> l.relationship().isPresent() && \"csr of\".equals(l.relationship().get())).findAny();\n+        var issue = link.flatMap(Link::issue);\n+        var mainIssue = issue.flatMap(Backports::findMainIssue);\n+        if (mainIssue.isEmpty()) {\n+            return List.of();\n+        }\n+        var backports = Backports.findBackports(mainIssue.get(), false);\n+        var ret = new ArrayList<WorkItem>();\n+        Stream.concat(mainIssue.stream(), backports.stream())\n+                .flatMap(i -> PullRequestUtils.pullRequestCommentLink(i).stream())\n+                .flatMap(uri -> bot.repositories().stream()\n+                        .flatMap(r -> r.parsePullRequestUrl(uri.toString()).stream()))\n+                .filter(Issue::isOpen)\n+                .map(pr -> new CheckWorkItem(bot.getPRBot(pr.repository().name()), pr.id(), errorHandler, pr.updatedAt(), true, true))\n+                .forEach(ret::add);\n+        return ret;\n+    }\n+\n+    @Override\n+    public String botName() {\n+        return PullRequestBotFactory.NAME;\n+    }\n+\n+    @Override\n+    public String workItemName() {\n+        return \"issue\";\n+    }\n+\n+    @Override\n+    public void handleRuntimeException(RuntimeException e) {\n+        errorHandler.accept(e);\n+    }\n+}\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IssueWorkItem.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.util.concurrent.ConcurrentHashMap;\n@@ -128,1 +127,1 @@\n-                ret.add(new CheckWorkItem(this, pr.id(), e -> poller.retryPullRequest(pr), pr.updatedAt(), true));\n+                ret.add(new CheckWorkItem(this, pr.id(), e -> poller.retryPullRequest(pr), pr.updatedAt(), true, false));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,1 @@\n-import org.openjdk.skara.host.HostUser;\n+import org.openjdk.skara.issuetracker.IssueProject;\n@@ -45,0 +45,3 @@\n+        var issueProjects = new HashMap<String, IssueProject>();\n+        var repositories = new HashMap<IssueProject, List<HostedRepository>>();\n+        var pullRequestBotMap = new HashMap<String, PullRequestBot>();\n@@ -109,0 +112,1 @@\n+            var repository = configuration.repository(repo.name());\n@@ -110,1 +114,1 @@\n-                                           .repo(configuration.repository(repo.name()))\n+                                           .repo(repository)\n@@ -144,1 +148,11 @@\n-                botBuilder.issueProject(configuration.issueProject(repo.value().get(\"issues\").asString()));\n+                var issueString = repo.value().get(\"issues\").asString();\n+                botBuilder.issueProject(configuration.issueProject(issueString));\n+                var issueProject = issueProjects.get(issueString);\n+                if (issueProject == null) {\n+                    issueProject = configuration.issueProject(issueString);\n+                    issueProjects.put(issueString, issueProject);\n+                }\n+                if (!repositories.containsKey(issueProject)) {\n+                    repositories.put(issueProject, new ArrayList<>());\n+                }\n+                repositories.get(issueProject).add(repository);\n@@ -178,0 +192,4 @@\n+            var prBot = botBuilder.build();\n+            pullRequestBotMap.put(repository.name(), prBot);\n+            ret.add(prBot);\n+        }\n@@ -179,1 +197,2 @@\n-            ret.add(botBuilder.build());\n+        for (IssueProject issueProject : issueProjects.values()) {\n+            ret.add(new CSRIssueBot(issueProject, repositories.get(issueProject), pullRequestBotMap));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":24,"deletions":5,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-            return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt, false));\n+            return List.of(new CheckWorkItem(bot, prId, errorHandler, prUpdatedAt, false, false));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,591 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInfo;\n+import org.openjdk.skara.forge.PullRequestUtils;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.Link;\n+import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.test.CheckableRepository;\n+import org.openjdk.skara.test.HostCredentials;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestBotRunner;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.util.List;\n+import java.util.Map;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class CSRBotTests {\n+    @Test\n+    void removeLabelForApprovedCSR(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n+            var csr = issueProject.createIssue(\"This is an approved CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.OPEN);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+\n+            \/\/ Use CSRIssueBot to add CSR label\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Approve CSR issue\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+\n+            \/\/ Run bot\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ The bot should have removed the CSR label\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n+\n+    @Test\n+    void keepLabelForNoIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is an issue\");\n+\n+            \/\/ Use csr command to add csr label\n+            var reviewPr = reviewer.pullRequest(pr.id());\n+            reviewPr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Run bot\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ The bot should have kept the CSR label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n+\n+    @Test\n+    void keepLabelForNoJBS(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is an issue\");\n+\n+            \/\/ Use csr command to add csr label\n+            var reviewPr = reviewer.pullRequest(pr.id());\n+            reviewPr.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Run bot\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should have kept the CSR label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n+\n+    @Test\n+    void keepLabelForNotApprovedCSR(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+\n+            var csr = issues.createIssue(\"This is an approved CSR\", List.of(), Map.of(\"resolution\",\n+                    JSON.object().put(\"name\", \"Unresolved\")));\n+            csr.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            \/\/ Run bot\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot added the csr label automatically\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Run bot\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should have kept the CSR label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n+\n+    @Test\n+    void handleCSRWithNullResolution(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+\n+            var csr = issues.createIssue(\"This is an CSR with null resolution\", List.of(), Map.of(\"resolution\", JSON.of()));\n+            csr.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            \/\/ Run bot\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot added the csr label automatically\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Run bot, should *not* throw NPE\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should have kept the CSR label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n+\n+    @Test\n+    void handleCSRWithNullName(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var issue = issues.createIssue(\"This is an issue\", List.of(), Map.of());\n+\n+            var csr = issues.createIssue(\"This is an CSR with null resolution\", List.of(),\n+                    Map.of(\"resolution\", JSON.object().put(\"name\", JSON.of())));\n+            csr.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issues).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+\n+            \/\/ Run bot\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot added the csr label automatically\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Run bot, should *not* throw NPE\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ The bot should have kept the CSR label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n+\n+    @Test\n+    void testBackportCsr(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n+            var issue = issueProject.createIssue(\"This is the primary issue\", List.of(), Map.of());\n+            issue.setState(Issue.State.CLOSED);\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+\n+            var csr = issueProject.createIssue(\"This is the primary CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Push a commit to the jdk18 branch\n+            var jdk18Branch = localRepo.branch(masterHash, \"jdk18\");\n+            localRepo.checkout(jdk18Branch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"a_new_file\");\n+            localRepo.add(newFile);\n+            var issueNumber = issue.id().split(\"-\")[1];\n+            var commitMessage = issueNumber + \": This is the primary issue\\n\\nReviewed-by: integrationreviewer2\";\n+            var commitHash = localRepo.commit(commitMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n+            localRepo.push(commitHash, author.authenticatedUrl(), \"jdk18\", true);\n+\n+            \/\/ \"backport\" the commit to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"a_new_file\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + commitHash.hex());\n+\n+            \/\/ run bot to add backport label\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"backport\"));\n+            \/\/ Add the notification link to the PR in the issue. This is needed for the CSRIssueBot to\n+            \/\/ be able to trigger on CSR issue updates\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+\n+            \/\/ Remove `version=0.1` from `.jcheck\/conf`, set the version as null in the edit branch\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"version=0.1\", \"\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set version as null\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.authenticatedUrl(), \"edit\", true);\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+            \/\/ Run bot. The bot won't get a CSR.\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Add `version=bla` to `.jcheck\/conf`, set the version as a wrong value\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"project=test\", \"project=test\\nversion=bla\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as a wrong value\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.authenticatedUrl(), \"edit\", true);\n+            \/\/ Run bot. The bot won't get a CSR.\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Test the method `TestPullRequest#diff`.\n+            assertEquals(1, pr.diff().patches().size());\n+\n+            \/\/ Set the `version` in `.jcheck\/conf` as 17 which is an available version.\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=bla\", \"version=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.authenticatedUrl(), \"edit\", true);\n+            \/\/ Run bot. The primary CSR doesn't have the fix version `17`, so the bot won't get a CSR.\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Set the fix versions of the primary CSR to 17 and 18.\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"18\"));\n+            \/\/ Run csr issue bot to trigger on updates to the CSR issue. The primary CSR has\n+            \/\/ the fix version `17`, so it would be used and the `csr` label would be added.\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ The bot should have added the `csr` label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Revert the fix versions of the primary CSR to 18.\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+            \/\/ Create a backport issue whose fix version is 17\n+            var backportIssue = issueProject.createIssue(\"This is the backport issue\", List.of(), Map.of());\n+            backportIssue.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backportIssue.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            backportIssue.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(backportIssue, \"backported by\").build());\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ remove the csr label with \/csr command\n+            var reviewerPr = reviewer.pullRequest(pr.id());\n+            reviewerPr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Run bot. The bot can find a backport issue but can't find a backport CSR.\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Create a backport CSR whose fix version is 17.\n+            var backportCsr = issueProject.createIssue(\"This is the backport CSR\", List.of(), Map.of());\n+            backportCsr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            backportCsr.setState(Issue.State.OPEN);\n+            backportIssue.addLink(Link.create(backportCsr, \"csr for\").build());\n+            \/\/ Run csr issue bot. The bot can find a backport issue and a backport CSR.\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ The bot should have added the CSR label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Now we have a primary issue, a primary CSR, a backport issue, a backport CSR.\n+            \/\/ Set the backport CSR to have multiple fix versions, included 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"11\").add(\"8\"));\n+            \/\/ Set the `version` in `.jcheck\/conf` as 11.\n+            defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            newConf = defaultConf.replace(\"version=17\", \"version=11\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            confHash = localRepo.commit(\"Set the version as 11\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.authenticatedUrl(), \"edit\", true);\n+            pr.removeLabel(\"csr\");\n+            \/\/ Run bot.\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ The bot should have added the CSR label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Set the backport CSR to have multiple fix versions, excluded 11.\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\").add(\"8\"));\n+            reviewerPr.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Run bot.\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ The bot shouldn't add the `csr` label.\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n+\n+    private String generateCSRProgressMessage(Issue issue) {\n+        return \"Change requires CSR request [\" + issue.id() + \"](\" + issue.webUrl() + \") to be approved\";\n+    }\n+\n+    @Test\n+    void testPRWithMultipleIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).issueProject(issueProject).censusRepo(censusBuilder.build()).enableCsr(true).build();\n+\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot));\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue.id() + \": This is an issue\");\n+            \/\/ Add the notification link to the PR in the issue. This is needed for the CSRIssueBot to\n+            \/\/ be able to trigger on CSR issue updates\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+            \/\/ Run bot\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            \/\/ Add another issue to this pr\n+            var issue2 = issueProject.createIssue(\"This is an issue 2\", List.of(), Map.of());\n+            issue2.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            PullRequestUtils.postPullRequestLinkComment(issue2, pr);\n+\n+            \/\/ Add issue2 to this pr\n+            pr.addComment(\"\/issue \" + issue2.id());\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().comments().get(pr.store().comments().size() - 1).body().contains(\"solves: '2'\"));\n+\n+            \/\/ Add a csr to issue2\n+            var csr2 = issueProject.createIssue(\"This is an CSR for issue2\", List.of(), Map.of());\n+            csr2.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr2.setState(Issue.State.OPEN);\n+            issue2.addLink(Link.create(csr2, \"csr for\").build());\n+\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should contain csr label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            assertTrue(pr.store().body().contains(\"This is an CSR for issue2\"));\n+\n+            \/\/ Add another issue to this pr\n+            var issue3 = issueProject.createIssue(\"This is an issue 3\", List.of(), Map.of());\n+            issue3.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            PullRequestUtils.postPullRequestLinkComment(issue3, pr);\n+\n+            \/\/ Add issue3 to this pr\n+            pr.addComment(\"\/issue \" + issue3.id());\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().comments().get(pr.store().comments().size() - 1).body().contains(\"solves: '4'\"));\n+\n+            \/\/ Withdrawn the csr for issue2\n+            csr2.setState(Issue.State.CLOSED);\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Withdrawn\"));\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            assertTrue(pr.store().body().contains(\"This is an CSR for issue2 (**CSR**) (Withdrawn)\"));\n+            \/\/ PR should not contain csr label\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Add a csr to issue3\n+            var csr3 = issueProject.createIssue(\"This is an CSR for issue3\", List.of(), Map.of());\n+            csr3.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr3.setState(Issue.State.OPEN);\n+            issue3.addLink(Link.create(csr3, \"csr for\").build());\n+\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should contain csr label\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Approve CSR3\n+            csr3.setState(Issue.State.CLOSED);\n+            csr3.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should not contain csr label\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+\n+            \/\/ Approve CSR2\n+            csr2.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            \/\/ PR should not contain csr label\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRBotTests.java","additions":591,"deletions":0,"binary":false,"changes":591,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -452,4 +452,4 @@\n-            \/\/ The bot should reply with a message that the PR will not be integrated until the CSR is approved\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [CSR]\");\n-            assertLastCommentContains(pr, \"for issue \");\n-            assertLastCommentContains(pr, \"has been approved.\");\n+            \/\/ The bot should reply with a message that there is already an approved\n+            \/\/ Now CheckWorkItem is responsible for updating CSR label, so before 'csr' is handled, csr label is added to this pr\n+            assertLastCommentContains(pr, \"an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request is already required for this pull request.\");\n+            assertLastCommentContains(pr, \"<!-- csr: 'needed' -->\");\n@@ -526,4 +526,4 @@\n-            \/\/ The bot should reply with a message that the PR will not be integrated until the CSR is approved\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [CSR]\");\n-            assertLastCommentContains(pr, \"for issue \");\n-            assertLastCommentContains(pr, \"has been approved.\");\n+            \/\/ The bot should reply with a message that there is already an approved\n+            \/\/ Now CheckWorkItem is responsible for updating CSR label, so before 'csr' is handled, csr label is added to this pr\n+            assertLastCommentContains(pr, \"an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request is already required for this pull request.\");\n+            assertLastCommentContains(pr, \"<!-- csr: 'needed' -->\");\n@@ -921,3 +921,2 @@\n-            assertLastCommentContains(pr, \"this pull request will not be integrated until the [CSR]\");\n-            assertLastCommentContains(pr, \"for issue \");\n-            assertLastCommentContains(pr, \"has been approved.\");\n+            assertLastCommentContains(pr, \"an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request is already required for this pull request.\");\n+            assertLastCommentContains(pr, \"<!-- csr: 'needed' -->\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRTests.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import static org.openjdk.skara.bots.common.PullRequestConstants.*;\n@@ -1975,1 +1974,1 @@\n-            var bot = PullRequestBot.newBuilder().repo(botRepo)\n+            var prBot = PullRequestBot.newBuilder().repo(botRepo)\n@@ -1977,0 +1976,4 @@\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(author), Map.of(\"test\", prBot));\n+\n+            \/\/ Run issue bot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -1979,1 +1982,1 @@\n-            issue.setState(Issue.State.CLOSED);\n+            issue.setState(Issue.State.OPEN);\n@@ -2016,0 +2019,1 @@\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n@@ -2024,2 +2028,0 @@\n-            \/\/ Simulate the CSRBot.\n-            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2027,1 +2029,2 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -2043,2 +2046,0 @@\n-            \/\/ Simulate the CSRBot.\n-            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2046,1 +2047,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -2062,2 +2063,0 @@\n-            \/\/ Simulate the CSRBot.\n-            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2065,1 +2064,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -2076,2 +2075,0 @@\n-            \/\/ Simulate the CSRBot.\n-            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2079,1 +2076,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -2095,2 +2092,0 @@\n-            \/\/ Simulate the CSRBot.\n-            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2098,1 +2093,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -2115,2 +2110,0 @@\n-            \/\/ Simulate the CSRBot.\n-            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2118,1 +2111,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n@@ -2140,2 +2133,0 @@\n-            \/\/ Simulate the CSRBot.\n-            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2143,1 +2134,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -2157,2 +2148,0 @@\n-            \/\/ Simulate the CSRBot.\n-            pr.setBody(pr.store().body() + CSR_UPDATE_MARKER);\n@@ -2160,1 +2149,1 @@\n-            TestBotRunner.runPeriodicItems(bot);\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":16,"deletions":27,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2023 Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,35 @@\n-                          \"csr\": false,\n+                          \"csr\": true,\n+                          \"two-reviewers\": [\n+                            \"rfr\"\n+                          ],\n+                          \"24h\": [\n+                            \"24h_test\"\n+                          ],\n+                          \"integrators\": [\n+                            \"integrator1\",\n+                            \"integrator2\"\n+                          ],\n+                          \"reviewCleanBackport\": true\n+                        },\n+                        \"repo5\": {\n+                          \"census\": \"census:master\",\n+                          \"censuslink\": \"https:\/\/test.test.com\",\n+                          \"issues\": \"TEST2\",\n+                          \"csr\": true,\n+                          \"two-reviewers\": [\n+                            \"rfr\"\n+                          ],\n+                          \"24h\": [\n+                            \"24h_test\"\n+                          ],\n+                          \"integrators\": [\n+                            \"integrator1\",\n+                            \"integrator2\"\n+                          ],\n+                          \"reviewCleanBackport\": true\n+                        },\n+                        \"repo6\": {\n+                          \"census\": \"census:master\",\n+                          \"censuslink\": \"https:\/\/test.test.com\",\n+                          \"issues\": \"TEST2\",\n+                          \"csr\": true,\n@@ -97,0 +131,2 @@\n+                    .addHostedRepository(\"repo5\", new TestHostedRepository(TestHost.createNew(List.of()), \"repo5\"))\n+                    .addHostedRepository(\"repo6\", new TestHostedRepository(TestHost.createNew(List.of()), \"repo6\"))\n@@ -100,1 +136,2 @@\n-                    .addIssueProject(\"TEST\", new TestIssueProject(null, \"TEST\"))\n+                    .addIssueProject(\"TEST\", new TestIssueProject(TestHost.createNew(List.of()), \"TEST\"))\n+                    .addIssueProject(\"TEST2\", new TestIssueProject(TestHost.createNew(List.of()), \"TEST2\"))\n@@ -105,2 +142,2 @@\n-            \/\/A pullRequestBot for every configured repository\n-            assertEquals(1, bots.size());\n+            \/\/A pullRequestBot for every configured repository and A CSRIssueBot for every configured issue project\n+            assertEquals(5, bots.size());\n@@ -109,1 +146,1 @@\n-            assertEquals(\"PullRequestBot@repo2\", pullRequestBot1.toString());\n+            assertEquals(\"PullRequestBot@repo6\", pullRequestBot1.toString());\n@@ -111,1 +148,1 @@\n-            assertEquals(\"TEST\", pullRequestBot1.issueProject().name());\n+            assertEquals(\"TEST2\", pullRequestBot1.issueProject().name());\n@@ -125,0 +162,12 @@\n+\n+            var csrIssueBot1 = (CSRIssueBot) bots.get(3);\n+            assertEquals(2, csrIssueBot1.repositories().size());\n+            assertNotNull(csrIssueBot1.getPRBot(\"repo2\"));\n+            assertNotNull(csrIssueBot1.getPRBot(\"repo5\"));\n+            assertNotNull(csrIssueBot1.getPRBot(\"repo6\"));\n+\n+            var csrIssueBot2 = (CSRIssueBot) bots.get(4);\n+            assertEquals(1, csrIssueBot2.repositories().size());\n+            assertNotNull(csrIssueBot2.getPRBot(\"repo2\"));\n+            assertNotNull(csrIssueBot2.getPRBot(\"repo5\"));\n+            assertNotNull(csrIssueBot2.getPRBot(\"repo6\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":56,"deletions":7,"binary":false,"changes":63,"status":"modified"}]}