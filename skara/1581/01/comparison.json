{"files":[{"patch":"@@ -48,0 +48,1 @@\n+        ret.add(\"minimum=disable\");\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/AdditionalConfiguration.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.pr;\n+\n+import org.openjdk.skara.test.*;\n+\n+import java.io.*;\n+import java.util.*;\n+\n+import org.junit.jupiter.api.*;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class AdditionalConfigurationTests {\n+    @Test\n+    void minimumShouldBeDisabled(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addReviewer(integrator.forge().currentUser().id())\n+                                           .addCommitter(author.forge().currentUser().id());\n+            var prBot = PullRequestBot.newBuilder().repo(bot).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+\n+            var reviewerPr = (TestPullRequest)integrator.pullRequest(pr.id());\n+\n+            \/\/ Require two reviewers\n+            reviewerPr.addComment(\"\/reviewers 2\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            var additional = AdditionalConfiguration.get(localRepo, masterHash, bot.forge().currentUser(),\n+                                                         pr.comments(), false);\n+            var expected = List.of(\n+                \"[checks \\\"reviewers\\\"]\",\n+                \"lead=0\",\n+                \"reviewers=1\",\n+                \"committers=0\",\n+                \"authors=1\",\n+                \"contributors=0\",\n+                \"minimum=disable\"\n+            );\n+            assertEquals(expected, additional);\n+        }\n+    }\n+}\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/AdditionalConfigurationTests.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -133,20 +133,31 @@\n-            \/\/ Reset defaults to 0\n-            lead = 0;\n-            reviewers = 0;\n-            committers = 0;\n-            authors = 0;\n-            contributors = 0;\n-\n-            var minimum = s.get(\"minimum\").asInt();\n-            if (s.contains(\"role\")) {\n-                var role = s.get(\"role\").asString();\n-                if (role.equals(\"lead\")) {\n-                    lead = minimum;\n-                } else if (role.equals(\"reviewer\")) {\n-                    reviewers = minimum;\n-                } else if (role.equals(\"committer\")) {\n-                    committers = minimum;\n-                } else if (role.equals(\"author\")) {\n-                    authors = minimum;\n-                } else if (role.equals(\"contributor\")) {\n-                    contributors = minimum;\n+            var isMinimumDisabled = s.get(\"minimum\").asString().trim().toLowerCase().equals(\"disable\");\n+            if (!isMinimumDisabled) {\n+                for (var role : List.of(\"lead\", \"reviewers\", \"committers\", \"authors\", \"contributors\")) {\n+                    if (s.contains(role)) {\n+                        throw new IllegalStateException(\"Cannot combine 'minimum' with '\" + role + \"'\");\n+                    }\n+                }\n+\n+                \/\/ Reset defaults to 0\n+                lead = 0;\n+                reviewers = 0;\n+                committers = 0;\n+                authors = 0;\n+                contributors = 0;\n+\n+                var minimum = s.get(\"minimum\").asInt();\n+                if (s.contains(\"role\")) {\n+                    var role = s.get(\"role\").asString();\n+                    if (role.equals(\"lead\")) {\n+                        lead = minimum;\n+                    } else if (role.equals(\"reviewer\")) {\n+                        reviewers = minimum;\n+                    } else if (role.equals(\"committer\")) {\n+                        committers = minimum;\n+                    } else if (role.equals(\"author\")) {\n+                        authors = minimum;\n+                    } else if (role.equals(\"contributor\")) {\n+                        contributors = minimum;\n+                    } else {\n+                        throw new IllegalArgumentException(\"Unexpected role: \" + role);\n+                    }\n@@ -154,1 +165,1 @@\n-                    throw new IllegalArgumentException(\"Unexpected role: \" + role);\n+                    reviewers = minimum;\n@@ -156,2 +167,0 @@\n-            } else {\n-                reviewers = minimum;\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/ReviewersConfiguration.java","additions":32,"deletions":23,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -701,0 +701,17 @@\n+    @Test\n+    void minimumCanBeDisabled() {\n+        var conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"minimum = disable\");\n+        assertEquals(constructReviewRequirement(0, 1, 0, 0, 0),\n+                JCheckConfiguration.parse(conf).checks().reviewers().getReviewRequirements());\n+    }\n+\n+    @Test\n+    void minimumWithAnotherRoleTrows() {\n+        var conf = new ArrayList<>(CONFIGURATION);\n+        conf.add(\"reviewers = 1\");\n+        conf.add(\"minimum = 1\");\n+        assertThrows(IllegalStateException.class, () -> JCheckConfiguration.parse(conf));\n+    }\n+\n","filename":"jcheck\/src\/test\/java\/org\/openjdk\/skara\/jcheck\/ReviewersCheckTests.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}