{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,0 +56,5 @@\n+        if (!bot.cleanCommandEnabled()) {\n+            reply.println(\"The `\/clean` pull request command is not enabled for this repository\");\n+            return;\n+        }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CleanCommand.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,0 +83,1 @@\n+    private final boolean cleanCommandEnabled;\n@@ -97,1 +98,1 @@\n-                   Map<String, List<PRRecord>> issuePRMap, Approval approval, boolean versionMismatchWarning) {\n+                   Map<String, List<PRRecord>> issuePRMap, Approval approval, boolean versionMismatchWarning, boolean cleanCommandEnabled) {\n@@ -134,0 +135,1 @@\n+        this.cleanCommandEnabled = cleanCommandEnabled;\n@@ -406,0 +408,4 @@\n+    public boolean cleanCommandEnabled() {\n+        return cleanCommandEnabled;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,1 @@\n+    private boolean cleanCommandEnabled = true;\n@@ -254,0 +255,5 @@\n+    public PullRequestBotBuilder cleanCommandEnabled(boolean cleanCommandEnabled) {\n+        this.cleanCommandEnabled = cleanCommandEnabled;\n+        return this;\n+    }\n+\n@@ -260,1 +266,1 @@\n-                mergeSources, jcheckMerge, enableBackport, issuePRMap, approval, versionMismatchWarning);\n+                mergeSources, jcheckMerge, enableBackport, issuePRMap, approval, versionMismatchWarning, cleanCommandEnabled);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -266,0 +266,4 @@\n+            if (repo.value().contains(\"cleanCommandEnabled\")) {\n+                botBuilder.cleanCommandEnabled(repo.value().get(\"cleanCommandEnabled\").asBoolean());\n+            }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -350,0 +350,70 @@\n+\n+    @Test\n+    void cleanCommandDisabled(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory(false)) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .issuePRMap(new HashMap<>())\n+                    .cleanCommandEnabled(false)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"a\\nb\\nc\\nd\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                    \"\\n\" +\n+                    \"Reviewed-by: integrationreviewer2\";\n+            var masterHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n+\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            Files.writeString(newFile, \"a\\nb\\nc\\nd\\ne\");\n+            localRepo.add(newFile);\n+            var issue2 = credentials.createIssue(issues, \"Another issue\");\n+            var issue2Number = issue2.id().split(\"-\")[1];\n+            var upstreamMessage = issue2Number + \": Another issue\\n\" +\n+                    \"\\n\" +\n+                    \"Reviewed-by: integrationreviewer2\";\n+            var upstreamHash = localRepo.commit(upstreamMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n+            localRepo.push(upstreamHash, author.authenticatedUrl(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            Files.writeString(newFile, \"a\\nb\\nc\\nd\\nd\");\n+            localRepo.add(newFile);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(editHash, author.authenticatedUrl(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + upstreamHash.hex());\n+\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            \/\/ The bot should not have added the \"clean\" label\n+            assertFalse(pr.store().labelNames().contains(\"clean\"));\n+\n+            \/\/ Use the \"\/clean\" pull request command to mark the backport PR as clean\n+            pr.addComment(\"\/clean\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ The pr shouldn't have clean label since clean command is disabled\n+            assertFalse(pr.store().labelNames().contains(\"clean\"));\n+            assertLastCommentContains(pr, \"The `\/clean` pull request command is not enabled for this repository\");\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CleanCommandTests.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -159,0 +159,1 @@\n+                          \"cleanCommandEnabled\": false,\n@@ -211,0 +212,1 @@\n+            assertTrue(pullRequestBot5.cleanCommandEnabled());\n@@ -245,0 +247,1 @@\n+            assertFalse(pullRequestBot7.cleanCommandEnabled());\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactoryTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}