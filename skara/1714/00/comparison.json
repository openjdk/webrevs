{"files":[{"patch":"@@ -1472,0 +1472,3 @@\n+            var onlyReviewersCheckFailed = visitor.errorFailedChecksMessages().stream()\n+                    .allMatch(message -> message.contains(\"Too few reviewers\"));\n+\n@@ -1473,1 +1476,1 @@\n-                    (!reviewNeeded || visitor.errorFailedChecksMessages().isEmpty()) &&\n+                    ((!reviewNeeded && onlyReviewersCheckFailed) || visitor.errorFailedChecksMessages().isEmpty()) &&\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2166,0 +2166,72 @@\n+\n+    @Test\n+    void cleanBackportWithProblemListIssue(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory(false)) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .issuePRMap(new HashMap<>())\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(),\n+                    Path.of(\"appendable.txt\"), Set.of(\"author\", \"reviewers\", \"whitespace\", \"problemlists\"), \"0.1\");\n+\n+            \/\/ Add problemlists configuration to conf\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            Files.writeString(checkConf, \"\\n[checks \\\"problemlists\\\"]\\n\", StandardOpenOption.APPEND);\n+            Files.writeString(checkConf, \"dirs=test\/jdk\\n\", StandardOpenOption.APPEND);\n+            \/\/ Create ProblemList.txt\n+            Files.createDirectories(tempFolder.path().resolve(\"test\/jdk\"));\n+            var problemList = tempFolder.path().resolve(\"test\/jdk\/ProblemList.txt\");\n+            Files.writeString(problemList, \"test 1 windows-all\", StandardOpenOption.CREATE);\n+            localRepo.add(tempFolder.path().resolve(\".jcheck\/conf\"));\n+            localRepo.add(problemList);\n+            localRepo.commit(\"add problemList.txt\", \"testauthor\", \"ta@none.none\");\n+\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"hello\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                    \"\\n\" +\n+                    \"Reviewed-by: integrationreviewer2\";\n+            var releaseHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n+            localRepo.push(releaseHash, author.authenticatedUrl(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"hello\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(editHash, author.authenticatedUrl(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + releaseHash.hex(), List.of());\n+\n+            \/\/ The bot should reply with a backport message\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ Should be marked as ready for review\n+            assertTrue(pr.store().labelNames().contains(\"rfr\"));\n+            \/\/ Shouldn't be marked as ready\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"modified"}]}