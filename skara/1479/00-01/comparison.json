{"files":[{"patch":"@@ -0,0 +1,27 @@\n+package org.openjdk.skara.bots.common;\n+\n+import java.util.regex.Pattern;\n+\n+import static java.util.regex.Pattern.DOTALL;\n+import static java.util.regex.Pattern.MULTILINE;\n+import static java.util.regex.Pattern.compile;\n+\n+\/**\n+ * Enum for commonly used Regex patterns\n+ *\/\n+public enum PatternEnum {\n+\n+    EXECUTION_COMMAND_PATTERN(compile(\"^\\\\s*\/([a-z]+)(?:\\\\s+|$)(.*)?\")),\n+    ARCHIVAL_COMMAND_PATTERN(compile(EXECUTION_COMMAND_PATTERN.pattern.pattern(), Pattern.MULTILINE | Pattern.DOTALL)),\n+    COMMENT_PATTERN(compile(\"<!--.*?-->\", DOTALL | MULTILINE));\n+\n+    private final Pattern pattern;\n+\n+    PatternEnum(Pattern pattern) {\n+        this.pattern = pattern;\n+    }\n+\n+    public Pattern getPattern() {\n+        return this.pattern;\n+    }\n+}\n","filename":"bots\/common\/src\/main\/java\/org\/openjdk\/skara\/bots\/common\/PatternEnum.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"added"},{"patch":"@@ -37,1 +37,0 @@\n-import java.util.regex.Pattern;\n@@ -40,1 +39,2 @@\n-import static org.openjdk.skara.bots.common.CommandNameEnum.commandNamesSepByDelim;\n+import static org.openjdk.skara.bots.common.PatternEnum.ARCHIVAL_COMMAND_PATTERN;\n+import static org.openjdk.skara.bots.common.PatternEnum.COMMENT_PATTERN;\n@@ -43,4 +43,1 @@\n-    private static final Pattern COMMENT_PATTERN = Pattern.compile(\"<!--.*?-->\",\n-                                                                  Pattern.DOTALL | Pattern.MULTILINE);\n-    static final Pattern COMMAND_PATTERN = Pattern.compile(\"^\\\\s*\/([\"+ commandNamesSepByDelim(\"|\") + \"]+).*$\",\n-                                                                  Pattern.MULTILINE | Pattern.DOTALL);\n+\n@@ -51,1 +48,1 @@\n-        var commentMatcher = COMMENT_PATTERN.matcher(body);\n+        var commentMatcher = COMMENT_PATTERN.getPattern().matcher(body);\n@@ -54,1 +51,1 @@\n-        var commandLineMatcher = COMMAND_PATTERN.matcher(body);\n+        var commandLineMatcher = ARCHIVAL_COMMAND_PATTERN.getPattern().matcher(body);\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveMessages.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-import static org.openjdk.skara.bots.mlbridge.ArchiveMessages.COMMAND_PATTERN;\n+import static org.openjdk.skara.bots.common.PatternEnum.ARCHIVAL_COMMAND_PATTERN;\n@@ -128,1 +128,1 @@\n-        var commandLineMatcher = COMMAND_PATTERN.matcher(body);\n+        var commandLineMatcher = ARCHIVAL_COMMAND_PATTERN.getPattern().matcher(body);\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/ArchiveWorkItem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -197,0 +197,10 @@\n+            \/\/Invalid skara command but starting with '\/' - should be archived\n+            pr.addComment(\"\/some-text & more text\");\n+            \/\/ Run another archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n+            \/\/Not a valid skara command with upper case letter - should be archived\n+            pr.addComment(\"\/Help\");\n+            \/\/ Run another archive pass\n+            TestBotRunner.runPeriodicItems(mlBot);\n+\n@@ -219,0 +229,2 @@\n+            assertTrue(archiveContains(archiveFolder.path(), \"\/some-text & more text\"));\n+            assertTrue(archiveContains(archiveFolder.path(), \"\/Help\"));\n","filename":"bots\/mlbridge\/src\/test\/java\/org\/openjdk\/skara\/bots\/mlbridge\/MailingListBridgeBotTests.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.util.regex.Pattern;\n@@ -38,0 +37,1 @@\n+import static org.openjdk.skara.bots.common.PatternEnum.EXECUTION_COMMAND_PATTERN;\n@@ -40,1 +40,0 @@\n-    private static final Pattern COMMAND_PATTERN = Pattern.compile(\"^\\\\s*\/([\"+ commandNamesSepByDelim(\"|\") +\"]+)(?:\\\\s+(.*))?\");\n@@ -113,1 +112,1 @@\n-            var commandMatcher = COMMAND_PATTERN.matcher(line);\n+            var commandMatcher = EXECUTION_COMMAND_PATTERN.getPattern().matcher(line);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommandExtractor.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.text.MessageFormat;\n@@ -112,1 +113,6 @@\n-            bot.repo().addCommitComment(commitComment.commit(), writer.toString());\n+        } else {\n+            printer.printf(MessageFormat.format(\"\"\"\n+                    I see that you entered a comment with `\/{0}` at the beginning of a line.\n+                    `\/{0}` is not a recognized Skara PR command, so it was ignored and treated like an ordinary comment.\n+                    If you intended to issue a Skara command, use `\/help` in a comment to see a complete list of Skara commands.\n+                    \"\"\", command.name()));\n@@ -114,0 +120,1 @@\n+        bot.repo().addCommitComment(commitComment.commit(), writer.toString());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandWorkItem.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.text.MessageFormat;\n@@ -166,3 +167,6 @@\n-            var newComment = pr.addComment(writer.toString());\n-            var latency = Duration.between(command.createdAt(), newComment.createdAt());\n-            log.log(Level.INFO, \"Time from command '\" + command.name() + \"' to reply \" + latency, latency);\n+        } else {\n+            printer.printf(MessageFormat.format(\"\"\"\n+                    I see that you entered a comment with `\/{0}` at the beginning of a line.\n+                    `\/{0}` is not a recognized Skara PR command, so it was ignored and treated like an ordinary comment\n+                    If you intended to issue a Skara command, use `\/help` in a comment to see a complete list of Skara commands.\n+                    \"\"\", command.name()));\n@@ -170,0 +174,3 @@\n+        var newComment = pr.addComment(writer.toString());\n+        var latency = Duration.between(command.createdAt(), newComment.createdAt());\n+        log.log(Level.INFO, \"Time from command '\" + command.name() + \"' to reply \" + latency, latency);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-            \/\/ Verify that the bot did *not* reply\n+            \/\/ Verify that the bot did reply\n@@ -85,1 +85,1 @@\n-            CommitCommandAsserts.assertLastCommentContains(replies, \"\/hello\");\n+            CommitCommandAsserts.assertLastCommentContains(replies, \"If you intended to issue a Skara command\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,2 +69,2 @@\n-            \/\/ Verify that the bot did *not* reply\n-            PullRequestAsserts.assertLastCommentContains(pr, \"\/howdy\");\n+            \/\/ Verify that the bot did reply\n+            PullRequestAsserts.assertLastCommentContains(pr, \"If you intended to issue a Skara command\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}