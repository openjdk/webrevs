{"files":[{"patch":"@@ -35,0 +35,1 @@\n+import org.openjdk.skara.vcs.Branch;\n@@ -580,0 +581,16 @@\n+            } else if (pr.title().equals(\"Merge\")) {\n+                \/\/ Update the PR title with the hash of the commit that will become the second parent\n+                \/\/ of the final merge commit (the first parent is always the HEAD of the target branch).\n+                var targetBranch = new Branch(pr.targetRef());\n+                var targetBranchWebUrl = pr.repository().webUrl(targetBranch);\n+                var secondParent = pr.headHash();\n+                pr.setTitle(\"Merge \" + secondParent.hex());\n+                var comment = List.of(\n+                    \"<!-- merge parent \" + secondParent.hex() + \"-->\\n\",\n+                    \"The first parent of the resulting merge commit from this pull request will be set to the \" +\n+                    \"upon integration current `HEAD` of the (\" + targetBranch.name() + \")[\" + targetBranchWebUrl + \"] \" +\n+                    \"branch. The second parent of the resulting merge commit from this pull request will be \" +\n+                    \"set to `\" + secondParent.hex() + \"`.\"\n+                );\n+                pr.addComment(String.join(\"\\n\", comment));\n+                return List.of(CheckWorkItem.fromWorkItem(bot, prId, errorHandler, triggerUpdatedAt));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1943,0 +1943,53 @@\n+\n+    @Test\n+    void noSecondParentSpecified(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder()\n+                                         .repo(integrator)\n+                                         .censusRepo(censusBuilder.build())\n+                                         .reviewMerge(MergePullRequestReviewConfiguration.ALWAYS)\n+                                         .jcheckMerge(true)\n+                                         .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make more changes in another branch\n+            var otherHash1 = CheckableRepository.appendAndCommit(localRepo, \"First change in other\",\n+                    \"First other\\n\\nReviewed-by: integrationreviewer2\");\n+            var otherHash2 = CheckableRepository.appendAndCommit(localRepo, \"Second change in other\",\n+                    \"Second other\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash2, author.authenticatedUrl(), \"other\");\n+\n+            \/\/ Go back to the original master\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var unrelated = Files.writeString(localRepo.root().resolve(\"unrelated.txt\"), \"Unrelated\", StandardCharsets.UTF_8);\n+            localRepo.add(unrelated);\n+            var updatedMaster = localRepo.commit(\"Unrelated\", \"some\", \"some@one\");\n+            localRepo.push(updatedMaster, author.authenticatedUrl(), \"master\");\n+\n+            var pr = credentials.createPullRequest(author, \"master\", \"other\", \"Merge\");\n+\n+            \/\/ Let the bot check the status\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The PR title should have been updated\n+            assertEquals(\"Merge \" + otherHash2.hex(), pr.title());\n+            assertLastCommentContains(pr,\n+                    \"The second parent of the resulting merge commit from this pull request will be set to `\" +\n+                    otherHash2.hex() + \"`\");\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/MergeTests.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"modified"}]}