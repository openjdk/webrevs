{"files":[{"patch":"@@ -1182,1 +1182,2 @@\n-            var reviewNeeded = !isCleanBackport || reviewCleanBackport;\n+            var reviewersCommandIssued = ReviewersTracker.additionalRequiredReviewers(pr.repository().forge().currentUser(), comments).isPresent();\n+            var reviewNeeded = !isCleanBackport || reviewCleanBackport || reviewersCommandIssued;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -144,0 +144,3 @@\n+        if (pr.labelNames().contains(\"clean\") && pr.labelNames().contains(\"backport\")) {\n+            reply.println(\"Warning: By issuing the \/reviewers command in this clean backport pull request, the reviewers check has now been enabled.\");\n+        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/ReviewersCommand.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -1800,0 +1801,101 @@\n+\n+    @Test\n+    void cleanBackportWithReviewersCommand(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory(false)) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var bot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+\n+            var confPath = localRepo.root().resolve(\".jcheck\/conf\");\n+            var defaultConf = Files.readString(confPath, StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"reviewers=1\", \"\"\"\n+                    lead=0\n+                    reviewers=2\n+                    committers=0\n+                    authors=0\n+                    contributors=0\n+                    ignore=duke\n+                    \"\"\");\n+            Files.writeString(confPath, newConf);\n+            localRepo.add(confPath);\n+            var confHash = localRepo.commit(\"Change conf\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.url(), \"master\", true);\n+\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.url(), \"master\", true);\n+\n+            var releaseBranch = localRepo.branch(masterHash, \"release\");\n+            localRepo.checkout(releaseBranch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"hello\");\n+            localRepo.add(newFile);\n+            var issue1 = credentials.createIssue(issues, \"An issue\");\n+            var issue1Number = issue1.id().split(\"-\")[1];\n+            var originalMessage = issue1Number + \": An issue\\n\" +\n+                    \"\\n\" +\n+                    \"Reviewed-by: integrationreviewer2\";\n+            var releaseHash = localRepo.commit(originalMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n+            localRepo.push(releaseHash, author.url(), \"refs\/heads\/release\", true);\n+\n+            \/\/ \"backport\" the new file to the master branch\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var editBranch = localRepo.branch(masterHash, \"edit\");\n+            localRepo.checkout(editBranch);\n+            var newFile2 = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile2, \"hello\");\n+            localRepo.add(newFile2);\n+            var editHash = localRepo.commit(\"Backport\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(editHash, author.url(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Backport \" + releaseHash.hex(), List.of());\n+\n+            \/\/ The bot should reply with a backport message\n+            TestBotRunner.runPeriodicItems(bot);\n+            var comments = pr.comments();\n+            var backportComment = comments.get(0).body();\n+            assertTrue(backportComment.contains(\"This backport pull request has now been updated with issue\"));\n+            assertTrue(backportComment.contains(\"<!-- backport \" + releaseHash.hex() + \" -->\"));\n+            assertEquals(issue1Number + \": An issue\", pr.store().title());\n+            assertTrue(pr.store().labelNames().contains(\"backport\"));\n+            assertFalse(pr.store().body().contains(ReviewersCheck.DESCRIPTION), \"Reviewer requirement found in pr body\");\n+            assertFalse(pr.store().body().contains(CheckRun.MSG_EMPTY_BODY), \"Body not empty requirement found in pr body\");\n+\n+            \/\/ The bot should have added the \"clean\" label\n+            assertTrue(pr.store().labelNames().contains(\"clean\"));\n+\n+            pr.addComment(\"\/reviewers 1\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.store().comments().get(1).body().contains(\"This change is no longer ready for integration - check the PR body for details.\"));\n+            assertTrue(pr.store().body().contains(\"Change must be properly reviewed (2 reviews required\"));\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+\n+            var reviewPr = reviewer.pullRequest(pr.id());\n+            reviewPr.addReview(Review.Verdict.APPROVED, \"LGTM\");\n+            var integratorPr = integrator.pullRequest(pr.id());\n+            integratorPr.addReview(Review.Verdict.APPROVED, \"LGTM\");\n+\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.store().comments().get(1).body().contains(\"This change now passes all *automated* pre-integration checks.\"));\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+\n+            pr.addComment(\"\/reviewers 3\");\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertTrue(pr.store().comments().get(1).body().contains(\"This change is no longer ready for integration - check the PR body for details.\"));\n+            assertTrue(pr.store().body().contains(\"Change must be properly reviewed (3 reviews required\"));\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportTests.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"modified"}]}