{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,1 @@\n+    private static final String DIFF_TOO_LARGE_WARNING_MARKER = \"<!-- PullRequestBot diff too large warning comment -->\";\n@@ -462,0 +463,5 @@\n+        if (pr.isDiffLimited()) {\n+            \/\/ Add diff too large warning comment\n+            addDiffTooLargeWarning();\n+            return false;\n+        }\n@@ -1266,0 +1272,14 @@\n+    private void addDiffTooLargeWarning() {\n+        var existing = findComment(DIFF_TOO_LARGE_WARNING_MARKER);\n+        if (existing.isPresent()) {\n+            \/\/ Only add the comment once per PR\n+            return;\n+        }\n+        var message = \"⚠️  @\" + pr.author().username() +\n+                \" This backport pull request is too large for skara bot to get the entire diff from the remote repository. \" +\n+                \"Therefore, skara bot can't evaluate whether this backport is clean or not.\" +\n+                DIFF_TOO_LARGE_WARNING_MARKER;\n+        log.info(\"Adding diff too large warning comment\");\n+        pr.addComment(message);\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -340,0 +340,5 @@\n+\n+    @Override\n+    public boolean isDiffLimited() {\n+        return false;\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,0 +218,7 @@\n+    \/**\n+     * Returns true if the Diff returned by diff() is limited.\n+     * This method can only be called after invoking diff().\n+     * Calling it before diff() will result in a RuntimeException.\n+     *\/\n+    boolean isDiffLimited();\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+    private Optional<Boolean> diffLimited = Optional.empty();\n@@ -754,0 +755,5 @@\n+        if (files.asArray().size() < json.get(\"changed_files\").asInt()) {\n+            diffLimited = Optional.of(true);\n+        } else {\n+            diffLimited = Optional.of(false);\n+        }\n@@ -824,0 +830,8 @@\n+\n+    @Override\n+    public boolean isDiffLimited() {\n+        if (diffLimited.isEmpty()) {\n+            throw new RuntimeException(\"Diff() has not been called. Can't evaluate if diff is limited\");\n+        }\n+        return diffLimited.get();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,0 +53,1 @@\n+    private Optional<Boolean> diffLimited = Optional.empty();\n@@ -833,0 +834,9 @@\n+        if (changes.get(\"overflow\").asBoolean()) {\n+            diffLimited = Optional.of(true);\n+        } else {\n+            if (changes.get(\"changes\").asArray().size() < Integer.parseInt(json.get(\"changes_count\").asString())) {\n+                diffLimited = Optional.of(true);\n+            } else {\n+                diffLimited = Optional.of(false);\n+            }\n+        }\n@@ -920,0 +930,8 @@\n+\n+    @Override\n+    public boolean isDiffLimited() {\n+        if (diffLimited.isEmpty()) {\n+            throw new RuntimeException(\"Diff() has not been called. Can't evaluate if diff is limited\");\n+        }\n+        return diffLimited.get();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -497,0 +497,11 @@\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\", \"github.repository\", \"github.prId\"})\n+    void testIsDiffLimited() {\n+        var githubRepoOpt = githubHost.repository(props.get(\"github.repository\"));\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var pr = githubRepo.pullRequest(props.get(\"github.prId\"));\n+        pr.diff();\n+        assertTrue(pr.isDiffLimited());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubIntegrationTests.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -391,0 +391,10 @@\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+            \"gitlab.repository\", \"gitlab.merge.request.id\"})\n+    void testIsDiffLimited() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var pr = gitLabRepo.pullRequest(props.get(\"gitlab.merge.request.id\"));\n+        pr.diff();\n+        assertFalse(pr.isDiffLimited());\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabIntegrationTests.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -353,0 +353,5 @@\n+\n+    @Override\n+    public boolean isDiffLimited() {\n+        return false;\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"}]}