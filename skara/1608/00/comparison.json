{"files":[{"patch":"@@ -35,0 +35,1 @@\n+        opens 'org.openjdk.skara.bots.notify.notes' to 'org.junit.platform.commons'\n","filename":"bots\/notify\/build.gradle","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -47,1 +47,2 @@\n-            org.openjdk.skara.bots.notify.prbranch.PullRequestBranchNotifierFactory;\n+            org.openjdk.skara.bots.notify.prbranch.PullRequestBranchNotifierFactory,\n+            org.openjdk.skara.bots.notify.notes.CommitNoteNotifierFactory;\n","filename":"bots\/notify\/src\/main\/java\/module-info.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.notify.notes;\n+\n+import org.openjdk.skara.bots.notify.*;\n+import org.openjdk.skara.forge.*;\n+import org.openjdk.skara.issuetracker.*;\n+import org.openjdk.skara.vcs.*;\n+import org.openjdk.skara.vcs.openjdk.CommitMessageParsers;\n+\n+import java.io.IOException;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Path;\n+import java.util.*;\n+import java.util.logging.Logger;\n+import java.util.stream.Collectors;\n+\n+class CommitNoteNotifier implements Notifier, PullRequestListener {\n+    private final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.notify\");\n+\n+    private final IssueProject issueProject;\n+\n+    CommitNoteNotifier(IssueProject issueProject) {\n+        this.issueProject = issueProject;\n+    }\n+\n+    private List<IssueTrackerIssue> issues(Commit commit) {\n+        var commitMessage = CommitMessageParsers.v1.parse(commit.metadata());\n+        return commitMessage.issues()\n+                            .stream()\n+                            .map(i -> issueProject.issue(i.shortId()))\n+                            .filter(Optional::isPresent)\n+                            .map(Optional::get)\n+                            .collect(Collectors.toList());\n+    }\n+\n+    @Override\n+    public void attachTo(Emitter e) {\n+        e.registerPullRequestListener(this);\n+    }\n+\n+    @Override\n+    public void onIntegratedPullRequest(PullRequest pr, Path scratchPath, Hash hash)  {\n+        try {\n+            var pool = new HostedRepositoryPool(scratchPath.resolve(\"pool\"));\n+            var localRepoDir = scratchPath.resolve(pr.repository().name());\n+            var localRepo = pool.materialize(pr.repository(), localRepoDir);\n+            localRepo.fetch(pr.repository().authenticatedUrl(), hash.hex(), true);\n+\n+            var commit = pr.repository().commit(hash).orElseThrow(() ->\n+                    new IllegalStateException(\"Integrated commit \" + hash +\n+                                            \" not present in repository \" + pr.repository().webUrl())\n+            );\n+            var issues = issues(commit);\n+\n+            var note = new ArrayList<String>();\n+            note.add(\"Commit: \" + commit.webUrl());\n+            note.add(\"Review: \" + pr.webUrl());\n+            if (!issues.isEmpty()) {\n+                note.add(\"Issues:\");\n+                for (var issue : issues) {\n+                    note.add(\"- \" + issue.webUrl());\n+                }\n+            }\n+\n+            localRepo.fetch(pr.repository().authenticatedUrl(), \"refs\/notes\/*:refs\/notes\/*\");\n+            var existingNotes = localRepo.notes(hash);\n+            if (existingNotes.isEmpty()) {\n+                localRepo.addNote(hash, note, \"Duke\", \"duke@openjdk.org\");\n+                localRepo.pushNotes(pr.repository().authenticatedUrl());\n+            }\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    @Override\n+    public String name() {\n+        return \"notes\";\n+    }\n+}\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/notes\/CommitNoteNotifier.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -0,0 +1,42 @@\n+\/*\n+ * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.notify.notes;\n+\n+import org.openjdk.skara.bot.BotConfiguration;\n+import org.openjdk.skara.bots.notify.*;\n+import org.openjdk.skara.json.JSONObject;\n+\n+import java.net.URI;\n+\n+public class CommitNoteNotifierFactory implements NotifierFactory {\n+    @Override\n+    public String name() {\n+        return \"notes\";\n+    }\n+\n+    @Override\n+    public Notifier create(BotConfiguration botConfiguration, JSONObject notifierConfiguration) {\n+        var issueProject = botConfiguration.issueProject(notifierConfiguration.get(\"project\").asString());\n+        return new CommitNoteNotifier(issueProject);\n+    }\n+}\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/notes\/CommitNoteNotifierFactory.java","additions":42,"deletions":0,"binary":false,"changes":42,"status":"added"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.bots.notify.notes;\n+\n+import org.junit.jupiter.api.*;\n+import org.openjdk.skara.bots.notify.NotifyBot;\n+import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.test.*;\n+\n+import java.io.IOException;\n+import java.util.*;\n+import java.util.regex.Pattern;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.openjdk.skara.bots.notify.TestUtils.*;\n+\n+public class CommitNoteNotiferTests {\n+    @Test\n+    void testCommitNote(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.authenticatedUrl());\n+\n+            var tagStorage = createTagStorage(repo);\n+            var branchStorage = createBranchStorage(repo);\n+            var prStateStorage = createPullRequestStateStorage(repo);\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+\n+            var issueProject = credentials.getIssueProject();\n+            var notifyBot = NotifyBot.newBuilder()\n+                                     .repository(repo)\n+                                     .storagePath(storageFolder)\n+                                     .branches(Pattern.compile(\"master\"))\n+                                     .tagStorageBuilder(tagStorage)\n+                                     .branchStorageBuilder(branchStorage)\n+                                     .prStateStorageBuilder(prStateStorage)\n+                                     .integratorId(repo.forge().currentUser().id())\n+                                     .build();\n+            \/\/ Register a RepositoryListener to make history initialize on the first run\n+            notifyBot.registerRepositoryListener(new NullRepositoryListener());\n+            var notifier = new CommitNoteNotifier(issueProject);\n+            notifier.attachTo(notifyBot);\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Save the state\n+            var historyState = localRepo.fetch(repo.authenticatedUrl(), \"history\");\n+\n+            \/\/ \"Fake\" an integrated pull request\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", \"Fix an issue\");\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"master\");\n+            var pr = credentials.createPullRequest(repo, \"master\", \"master\", \"Fix an issue\");\n+            pr.setBody(\"I made a fix\");\n+            pr.addLabel(\"integrated\");\n+            pr.addComment(\"More text!\\n\\n@user Pushed as commit \" + editHash.hex() + \". Even more text.\\n\\nAnd some additional text.\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Check commit note\n+            var remoteCommit = repo.commit(editHash).orElseThrow();\n+            localRepo.fetch(repo.authenticatedUrl(), \"refs\/notes\/*:refs\/notes\/*\");\n+            var note = localRepo.notes(editHash);\n+            assertEquals(List.of(\"Commit: \" + remoteCommit.webUrl(),\n+                                 \"Review: \" + pr.webUrl()),\n+                         note);\n+        }\n+    }\n+\n+    @Test\n+    void testCommitNoteWithIssues(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType());\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.authenticatedUrl());\n+\n+            var tagStorage = createTagStorage(repo);\n+            var branchStorage = createBranchStorage(repo);\n+            var prStateStorage = createPullRequestStateStorage(repo);\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"A title\",\n+                                                 List.of(\"A description\"),\n+                                                 Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var commitMessageTitle = issue.id() + \": A title\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Change\", commitMessageTitle);\n+\n+            var notifyBot = NotifyBot.newBuilder()\n+                                     .repository(repo)\n+                                     .storagePath(storageFolder)\n+                                     .branches(Pattern.compile(\"master\"))\n+                                     .tagStorageBuilder(tagStorage)\n+                                     .branchStorageBuilder(branchStorage)\n+                                     .prStateStorageBuilder(prStateStorage)\n+                                     .integratorId(repo.forge().currentUser().id())\n+                                     .build();\n+            \/\/ Register a RepositoryListener to make history initialize on the first run\n+            notifyBot.registerRepositoryListener(new NullRepositoryListener());\n+            var notifier = new CommitNoteNotifier(issueProject);\n+            notifier.attachTo(notifyBot);\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Save the state\n+            var historyState = localRepo.fetch(repo.authenticatedUrl(), \"history\");\n+\n+            \/\/ \"Fake\" a fix\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"master\");\n+            var pr = credentials.createPullRequest(repo, \"master\", \"master\", commitMessageTitle);\n+            pr.setBody(\"\\n\\n### Issue\\n * [\" + issue.id() + \"](https:\/\/openjdk.org): The issue\");\n+            pr.addLabel(\"integrated\");\n+            pr.addComment(\"Pushed as commit \" + editHash.hex() + \".\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Check commit note\n+            var remoteCommit = repo.commit(editHash).orElseThrow();\n+            localRepo.fetch(repo.authenticatedUrl(), \"refs\/notes\/*:refs\/notes\/*\");\n+            var note = localRepo.notes(editHash);\n+            assertEquals(List.of(\"Commit: \" + remoteCommit.webUrl(),\n+                                 \"Review: \" + pr.webUrl(),\n+                                 \"Issues:\",\n+                                 \"- \" + issue.webUrl()),\n+                         note);\n+        }\n+    }\n+}\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/notes\/CommitNoteNotiferTests.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"},{"patch":"@@ -34,0 +34,1 @@\n+    private final URI webUrl;\n@@ -36,0 +37,3 @@\n+        this(metadata, parentDiffs, url, url);\n+    }\n+    public HostedCommit(CommitMetadata metadata, List<Diff> parentDiffs, URI url, URI webUrl) {\n@@ -38,0 +42,1 @@\n+        this.webUrl = webUrl;\n@@ -44,0 +49,4 @@\n+    public URI webUrl() {\n+        return webUrl;\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/HostedCommit.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -585,1 +585,3 @@\n-        return Optional.of(new HostedCommit(metadata, diffs, URI.create(o.get(\"html_url\").asString())));\n+        var url = URI.create(o.get(\"html_url\").asString());\n+        var webUrl = gitHubHost.getWebURI(url.getPath());\n+        return Optional.of(new HostedCommit(metadata, diffs, url, webUrl));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRepository.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}