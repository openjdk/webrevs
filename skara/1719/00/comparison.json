{"files":[{"patch":"@@ -729,1 +729,1 @@\n-        var allWarnings = Stream.concat(visitor.warningFailedChecksMessages().stream(), warnings.stream()).toList();\n+        var allWarnings = Stream.concat(visitor.hiddenWarningMessages().stream(), warnings.stream()).toList();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,0 +89,9 @@\n+    List<String> hiddenWarningMessages(){\n+        return warningFailedChecks.entrySet().stream()\n+                .filter(entry -> !displayedChecks.contains(entry.getKey()))\n+                .map(Map.Entry::getValue)\n+                .flatMap(List::stream)\n+                .sorted()\n+                .collect(Collectors.toList());\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCheckIssueVisitor.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3845,0 +3845,38 @@\n+\n+    @Test\n+    void WhitespaceAndReviewersCheckAsWarnings(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issues = credentials.getIssueProject();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issues)\n+                    .issuePRMap(issuePRMap)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"), Set.of(), Set.of(\"reviewers\", \"whitespace\"), \"0.1\");\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+            var issue1 = issues.createIssue(\"This is an issue\", List.of(\"Hello\"), Map.of());\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"An additional line\\r\\n\");\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", issue1.id(), List.of(\"Body\"), false);\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(prBot);\n+\n+            assertFalse(pr.store().body().contains(\"Warning\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"}]}