{"files":[{"patch":"@@ -90,0 +90,3 @@\n+    \/\/ If true, avoid creating a \"forward backport\" when creating a new backport\n+    private boolean avoidForwardports;\n+\n@@ -95,1 +98,1 @@\n-                  boolean tagMatchPrefix, List<BranchSecurity> defaultSecurity) {\n+                  boolean tagMatchPrefix, List<BranchSecurity> defaultSecurity, boolean avoidForwardports) {\n@@ -116,0 +119,1 @@\n+        this.avoidForwardports = avoidForwardports;\n@@ -306,1 +310,1 @@\n-                                log.info(\"Creating new backport for \" + issue.id() + \" with fixVersion \" + requestedVersion);\n+                                var issueFixVersion = Backports.mainFixVersion(issue);\n@@ -308,1 +312,7 @@\n-                                    issue = Backports.createBackport(issue, requestedVersion, username.orElse(null), defaultSecurity(branch));\n+                                    if (avoidForwardports && issueFixVersion.isPresent() && fixVersion.compareTo(issueFixVersion.get()) > 0) {\n+                                        log.info(\"Avoiding 'forwardport', creating new backport for \" + issue.id() + \" with fixVersion \" + issueFixVersion.get().raw());\n+                                        Backports.createBackport(issue, issueFixVersion.get().raw() , username.orElse(null), defaultSecurity(branch));\n+                                    } else {\n+                                        log.info(\"Creating new backport for \" + issue.id() + \" with fixVersion \" + requestedVersion);\n+                                        issue = Backports.createBackport(issue, requestedVersion, username.orElse(null), defaultSecurity(branch));\n+                                    }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+    private boolean avoidForwardports = false;\n@@ -155,0 +156,5 @@\n+    public IssueNotifierBuilder avoidForwardports(boolean avoidForwardports) {\n+        this.avoidForwardports = avoidForwardports;\n+        return this;\n+    }\n+\n@@ -167,1 +173,1 @@\n-                resolve, tagIgnoreOpt, tagMatchPrefix, defaultSecurity);\n+                resolve, tagIgnoreOpt, tagMatchPrefix, defaultSecurity, avoidForwardports);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -138,0 +138,4 @@\n+        if (notifierConfiguration.contains(\"avoidforwardports\")) {\n+            builder.avoidForwardports(notifierConfiguration.get(\"avoidforwardports\").asBoolean());\n+        }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2241,0 +2241,260 @@\n+\n+    @Test\n+    void testAvoidForwardports(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of(\"appendable.txt\"), Set.of(), null);\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.authenticatedUrl());\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\".*aster\", \"22\")).put(\"avoidforwardports\", true);\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Enhancement\"),\n+                            SUBCOMPONENT, JSON.of(\"java.io\"),\n+                            RESOLVED_IN_BUILD, JSON.of(\"b07\")\n+                    ));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"21\"));\n+            issue.setProperty(\"priority\", JSON.of(\"1\"));\n+            issue.addLabel(\"test\");\n+            issue.addLabel(\"temporary\");\n+\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The fixVersion should have been set to 22\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(Set.of(\"22\"), fixVersions(updatedIssue));\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());\n+\n+            \/\/ There should be a link\n+            var links = updatedIssue.links();\n+            assertEquals(1, links.size());\n+            var link = links.get(0);\n+            var backport = link.issue().orElseThrow();\n+\n+            \/\/ The backport issue should have the issue's fixVersions\n+            assertEquals(Set.of(\"21\"), fixVersions(backport));\n+            assertEquals(OPEN, backport.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), backport.assignees());\n+\n+            \/\/ Custom properties should also propagate\n+            assertEquals(\"1\", backport.properties().get(\"priority\").asString());\n+            assertEquals(\"java.io\", backport.properties().get(SUBCOMPONENT).asString());\n+            assertFalse(backport.properties().containsKey(RESOLVED_IN_BUILD));\n+\n+            \/\/ Labels should not\n+            assertEquals(0, backport.labelNames().size());\n+        }\n+    }\n+\n+    @Test\n+    void testAvoidForwardportsShouldCreateBackport(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of(\"appendable.txt\"), Set.of(), null);\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.authenticatedUrl());\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\".*aster\", \"21\")).put(\"avoidforwardports\", true);\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Enhancement\"),\n+                            SUBCOMPONENT, JSON.of(\"java.io\"),\n+                            RESOLVED_IN_BUILD, JSON.of(\"b07\")\n+                    ));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"22\"));\n+            issue.setProperty(\"priority\", JSON.of(\"1\"));\n+            issue.addLabel(\"test\");\n+            issue.addLabel(\"temporary\");\n+\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The fixVersion should not have been updated\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(Set.of(\"22\"), fixVersions(updatedIssue));\n+            assertEquals(OPEN, updatedIssue.state());\n+            assertEquals(List.of(), updatedIssue.assignees());\n+\n+            \/\/ There should be a link\n+            var links = updatedIssue.links();\n+            assertEquals(1, links.size());\n+            var link = links.get(0);\n+            var backport = link.issue().orElseThrow();\n+\n+            \/\/ The backport issue should have the repository's fixVersions\n+            assertEquals(Set.of(\"21\"), fixVersions(backport));\n+            assertEquals(RESOLVED, backport.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), backport.assignees());\n+\n+            \/\/ Custom properties should also propagate\n+            assertEquals(\"1\", backport.properties().get(\"priority\").asString());\n+            assertEquals(\"java.io\", backport.properties().get(SUBCOMPONENT).asString());\n+            assertFalse(backport.properties().containsKey(RESOLVED_IN_BUILD));\n+\n+            \/\/ Labels should not\n+            assertEquals(0, backport.labelNames().size());\n+        }\n+    }\n+\n+    @Test\n+    void testAvoidForwardportsShouldUseExistingForwardport(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of(\"appendable.txt\"), Set.of(), null);\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.authenticatedUrl());\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\".*aster\", \"22\")).put(\"avoidforwardports\", true);\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Enhancement\"),\n+                            SUBCOMPONENT, JSON.of(\"java.io\"),\n+                            RESOLVED_IN_BUILD, JSON.of(\"b07\")\n+                    ));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"21\"));\n+            issue.setProperty(\"priority\", JSON.of(\"1\"));\n+            issue.addLabel(\"test\");\n+            issue.addLabel(\"temporary\");\n+\n+            \/\/ Create an explicit \"forwardport\"\n+            var forwardPort = issueProject.createIssue(\"This is a forwardport\", List.of(\"Indeed\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Backport\")));\n+            forwardPort.setProperty(\"fixVersions\", JSON.array().add(\"22\"));\n+\n+            issue.addLink(Link.create(forwardPort, \"backported by\").build());\n+            forwardPort.addLink(Link.create(issue, \"backport of\").build());\n+\n+            \/\/ Commit a fix for the issue\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The fixVersion should not have been updated\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(Set.of(\"21\"), fixVersions(updatedIssue));\n+            assertEquals(OPEN, updatedIssue.state());\n+            assertEquals(List.of(), updatedIssue.assignees());\n+\n+            \/\/ There should still be just a single link\n+            var links = updatedIssue.links();\n+            assertEquals(1, links.size());\n+            var link = links.get(0);\n+            var backport = link.issue().orElseThrow();\n+\n+            \/\/ The forwardport issue should have the repository's fixVersions\n+            assertEquals(Set.of(\"22\"), fixVersions(backport));\n+            assertEquals(RESOLVED, backport.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), backport.assignees());\n+\n+            \/\/ No properties should have propagated\n+            assertFalse(backport.properties().containsKey(SUBCOMPONENT));\n+            assertFalse(backport.properties().containsKey(RESOLVED_IN_BUILD));\n+\n+            \/\/ Not Labels should have propagated\n+            assertEquals(0, backport.labelNames().size());\n+        }\n+    }\n+\n+    @Test\n+    void testAvoidForwardportsShouldUseExistingBackport(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of(\"appendable.txt\"), Set.of(), null);\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.authenticatedUrl());\n+\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var issueProject = credentials.getIssueProject();\n+            var jbsNotifierConfig = JSON.object().put(\"fixversions\", JSON.object().put(\".*aster\", \"21\")).put(\"avoidforwardports\", true);\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Enhancement\"),\n+                            SUBCOMPONENT, JSON.of(\"java.io\"),\n+                            RESOLVED_IN_BUILD, JSON.of(\"b07\")\n+                    ));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"22\"));\n+            issue.setProperty(\"priority\", JSON.of(\"1\"));\n+            issue.addLabel(\"test\");\n+            issue.addLabel(\"temporary\");\n+\n+            \/\/ Create an explicit backport\n+            var backport = issueProject.createIssue(\"This is a backport\", List.of(\"Indeed\"),\n+                    Map.of(\"issuetype\", JSON.of(\"Backport\")));\n+            backport.setProperty(\"fixVersions\", JSON.array().add(\"21\"));\n+\n+            issue.addLink(Link.create(backport, \"backported by\").build());\n+            backport.addLink(Link.create(issue, \"backport of\").build());\n+\n+            \/\/ Commit a fix for the issue\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The fixVersion should not have been updated\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+            assertEquals(Set.of(\"22\"), fixVersions(updatedIssue));\n+            assertEquals(OPEN, updatedIssue.state());\n+            assertEquals(List.of(), updatedIssue.assignees());\n+\n+            \/\/ There should still be just a single link\n+            var links = updatedIssue.links();\n+            assertEquals(1, links.size());\n+            var link = links.get(0);\n+            var updatedBackport = link.issue().orElseThrow();\n+\n+            \/\/ The backport issue should have the repository's fixVersions\n+            assertEquals(Set.of(\"21\"), fixVersions(updatedBackport));\n+            assertEquals(RESOLVED, updatedBackport.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedBackport.assignees());\n+\n+            \/\/ No properties should have propagated\n+            assertFalse(updatedBackport.properties().containsKey(SUBCOMPONENT));\n+            assertFalse(updatedBackport.properties().containsKey(RESOLVED_IN_BUILD));\n+\n+            \/\/ Not Labels should have propagated\n+            assertEquals(0, updatedBackport.labelNames().size());\n+        }\n+    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":260,"deletions":0,"binary":false,"changes":260,"status":"modified"}]}