{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,2 @@\n-            if (lastComment.author().equals(pr.repository().forge().currentUser()) && lastComment.body().contains(NOTICE_MARKER)) {\n+            if (lastComment.author().equals(pr.repository().forge().currentUser()) && lastComment.body().contains(NOTICE_MARKER)\n+                    && !lastComment.createdAt().isBefore(pr.lastTouchedTime())) {\n@@ -161,1 +162,1 @@\n-        var latestAction = Stream.of(Stream.of(pr.createdAt()),\n+        var latestAction = Stream.of(Stream.of(pr.createdAt(), pr.lastTouchedTime()),\n","filename":"bots\/bridgekeeper\/src\/main\/java\/org\/openjdk\/skara\/bots\/bridgekeeper\/PullRequestPrunerBot.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,1 @@\n+import org.openjdk.skara.issuetracker.Issue;\n@@ -75,2 +76,11 @@\n-            \/\/ Post a comment as ignored User\n-            ignoredUserPr.addComment(\"It should be ignored\");\n+            \/\/ Add a commit to the pr\n+            var editHash2 = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash2, author.authenticatedUrl(), \"edit\", true);\n+            TestBotRunner.runPeriodicItems(bot);\n+            \/\/ Make sure the timeout expires again\n+            Thread.sleep(100);\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertEquals(Issue.State.OPEN, pr.store().state());\n+            assertEquals(4, pr.comments().size());\n+            assertTrue(pr.comments().get(3).body().contains(\"will be automatically closed if\"));\n+\n@@ -78,0 +88,1 @@\n+            pr.makeDraft();\n@@ -80,0 +91,5 @@\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertEquals(Issue.State.OPEN, pr.store().state());\n+            assertEquals(5, pr.comments().size());\n+            assertTrue(pr.comments().get(4).body().contains(\"will be automatically closed if\"));\n+\n@@ -81,0 +97,12 @@\n+            pr.makeNotDraft();\n+            \/\/ Make sure the timeout expires again\n+            Thread.sleep(100);\n+            TestBotRunner.runPeriodicItems(bot);\n+            assertEquals(Issue.State.OPEN, pr.store().state());\n+            assertEquals(6, pr.comments().size());\n+            assertTrue(pr.comments().get(5).body().contains(\"will be automatically closed if\"));\n+\n+            \/\/ Post a comment as ignored User\n+            ignoredUserPr.addComment(\"It should be ignored\");\n+            \/\/ Make sure the timeout expires again\n+            Thread.sleep(100);\n","filename":"bots\/bridgekeeper\/src\/test\/java\/org\/openjdk\/skara\/bots\/bridgekeeper\/PullRequestPrunerBotTests.java","additions":31,"deletions":3,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -340,0 +340,5 @@\n+\n+    @Override\n+    public ZonedDateTime lastTouchedTime() {\n+        return null;\n+    }\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryPullRequest.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -246,0 +246,6 @@\n+    \/**\n+     * Returns the last time of the pull request touched by user\n+     * Valid Touch includes \"mark as ready\", \"convert to draft\", \"reopen\", \"commit\"\n+     *\/\n+    ZonedDateTime lastTouchedTime();\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -705,1 +705,2 @@\n-        var lastMarkedAsDraftTime = request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")                .execute().stream()\n+        var lastMarkedAsDraftTime = request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")\n+                .execute().stream()\n@@ -825,0 +826,16 @@\n+\n+    @Override\n+    public ZonedDateTime lastTouchedTime() {\n+        Set<String> relevantEvents = Set.of(\"committed\", \"reopened\", \"ready_for_review\", \"convert_to_draft\");\n+\n+        return request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/timeline\")\n+                .execute().stream()\n+                .map(JSONValue::asObject)\n+                .filter(obj -> obj.contains(\"event\"))\n+                .filter(obj -> relevantEvents.contains(obj.get(\"event\").asString()))\n+                .map(obj -> obj.get(\"event\").asString().equals(\"committed\") ? obj.get(\"committer\").get(\"date\").asString() : obj.get(\"created_at\").asString())\n+                .map(ZonedDateTime::parse)\n+                .max(ZonedDateTime::compareTo)\n+                .orElseGet(this::createdAt);\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -926,0 +926,26 @@\n+\n+    @Override\n+    public ZonedDateTime lastTouchedTime() {\n+        Set<String> relevantEvents = Set.of(\n+                \"marked this merge request as **ready**\",\n+                \"marked this merge request as **draft**\"\n+        );\n+        \/\/ Get relevant note timestamps\n+        Stream<ZonedDateTime> noteTimes = request.get(\"notes\")\n+                .execute().stream()\n+                .map(JSONValue::asObject)\n+                .filter(note -> relevantEvents.contains(note.get(\"body\").asString()))\n+                .map(note -> ZonedDateTime.parse(note.get(\"created_at\").asString()));\n+\n+        \/\/ Get commit dates\n+        Stream<ZonedDateTime> commitTimes = request.get(\"commits\")\n+                .execute().stream()\n+                .map(JSONValue::asObject)\n+                .map(commit -> ZonedDateTime.parse(commit.get(\"committed_date\").asString()));\n+\n+        \/\/ Combine and get latest time\n+        return Stream.concat(noteTimes, commitTimes)\n+                .max(ZonedDateTime::compareTo)\n+                .orElseGet(this::createdAt);\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -512,0 +512,11 @@\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\", \"github.repository\", \"github.prId\"})\n+    void testLastCommitTime() {\n+        var githubRepoOpt = githubHost.repository(props.get(\"github.repository\"));\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+\n+        var pr = githubRepo.pullRequest(props.get(\"github.prId\"));\n+        var lastTouchedTime = pr.lastTouchedTime();\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubIntegrationTests.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -411,0 +411,10 @@\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+            \"gitlab.repository\", \"gitlab.merge.request.id\"})\n+    void testLastCommitTIME() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+\n+        var pr = gitLabRepo.pullRequest(props.get(\"gitlab.merge.request.id\"));\n+        var lastTouchedTime = pr.lastTouchedTime();\n+    }\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabIntegrationTests.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -167,0 +167,1 @@\n+        store.setLastTouchedTime(ZonedDateTime.now());\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssue.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+    private ZonedDateTime lastTouchedTime = created;\n@@ -129,0 +130,8 @@\n+    public void setLastTouchedTime(ZonedDateTime lastTouchedTime) {\n+        this.lastTouchedTime = lastTouchedTime;\n+    }\n+\n+    public ZonedDateTime lastTouchedTime(){\n+        return lastTouchedTime;\n+    }\n+\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestIssueStore.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -361,0 +361,6 @@\n+\n+    \/\/ For TestPullRequest, we control the lastUpdate timestamp, so it won't be spurious\n+    @Override\n+    public ZonedDateTime lastTouchedTime() {\n+        return store().lastTouchedTime();\n+    }\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -83,0 +83,1 @@\n+                setLastTouchedTime(ZonedDateTime.now());\n@@ -141,0 +142,2 @@\n+        setLastUpdate(ZonedDateTime.now());\n+        setLastTouchedTime(ZonedDateTime.now());\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequestStore.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"}]}