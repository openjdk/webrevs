{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import static org.openjdk.skara.bots.pr.CheckRun.syncLabels;\n@@ -76,1 +75,1 @@\n-            var labels =  Arrays.stream(argumentMatcher.group(2).split(\"[\\\\s,]+\")).collect(Collectors.toList());\n+            var labels = Arrays.stream(argumentMatcher.group(2).split(\"[\\\\s,]+\")).collect(Collectors.toList());\n@@ -91,1 +90,0 @@\n-            upgradeLabelsToGroups(pr, bot, currentLabels);\n@@ -123,1 +121,0 @@\n-            upgradeLabelsToGroups(pr, bot, currentLabels);\n@@ -155,2 +152,1 @@\n-     * Updates to currentLabels are performed immediately after each label addition, so group checks always\n-     * reflect the latest state after any modifications.\n+     * Updates to currentLabels are performed immediately after each label addition.\n@@ -161,18 +157,4 @@\n-                var groups = bot.labelConfiguration().groupLabels(label);\n-                \/\/ The group labels already set in this pr\n-                Set<String> commonLabels = currentLabels.stream()\n-                        .filter(groups::contains)\n-                        .collect(Collectors.toSet());\n-                \/\/ No group labels are set\n-                if (commonLabels.isEmpty()) {\n-                    pr.addLabel(label);\n-                    currentLabels.add(label);\n-                    reply.println(LabelTracker.addLabelMarker(label));\n-                    reply.println(\"The `\" + label + \"` label was successfully added.\");\n-                } else {\n-                    reply.println(LabelTracker.addLabelMarker(label));\n-                    reply.println(\"The \" + commonLabels.stream()\n-                            .map(l -> \"`\" + l + \"`\")\n-                            .collect(Collectors.joining(\", \"))\n-                            + \" group label\" + (commonLabels.size() > 1 ? \"s were\" : \" was\") + \" already applied, so `\" + label + \"` label will not be added.\");\n-                }\n+                pr.addLabel(label);\n+                currentLabels.add(label);\n+                reply.println(LabelTracker.addLabelMarker(label));\n+                reply.println(\"The `\" + label + \"` label was successfully added.\");\n@@ -202,7 +184,0 @@\n-    private void upgradeLabelsToGroups(PullRequest pr, PullRequestBot bot, Set<String> currentLabels) {\n-        Set<String> oldLabels = new HashSet<>(currentLabels);\n-        Set<String> newLabels = new HashSet<>(currentLabels);\n-        newLabels = bot.labelConfiguration().upgradeLabelsToGroups(newLabels);\n-        syncLabels(pr, oldLabels, newLabels, log);\n-    }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelCommand.java","additions":7,"deletions":32,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -149,1 +149,0 @@\n-                    newLabels.addAll(newLabelsNeedToBeAdded);\n@@ -151,1 +150,11 @@\n-                    newLabels = bot.labelConfiguration().upgradeLabelsToGroups(newLabels);\n+                    \/\/ Check if there is any associated group label already set, if not, add this label to new labels\n+                    for (var label : newLabelsNeedToBeAdded) {\n+                        var groups = bot.labelConfiguration().groupLabels(label);\n+                        \/\/ The group labels already set in this pr\n+                        Set<String> commonLabels = oldLabels.stream()\n+                                .filter(groups::contains)\n+                                .collect(Collectors.toSet());\n+                        if (commonLabels.isEmpty()) {\n+                            newLabels.add(label);\n+                        }\n+                    }\n@@ -179,1 +188,0 @@\n-                newLabels = bot.labelConfiguration().upgradeLabelsToGroups(newLabels);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerWorkItem.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -108,2 +108,2 @@\n-            \/\/ Since group label is added, 1 should be removed\n-            assertFalse(pr.store().labelNames().contains(\"1\"));\n+            assertTrue(pr.store().labelNames().contains(\"group\"));\n+            assertTrue(pr.store().labelNames().contains(\"1\"));\n@@ -193,1 +193,1 @@\n-            assertEquals(Set.of(\"group\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"1\", \"group\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n@@ -198,6 +198,1 @@\n-            assertEquals(Set.of(\"group\", \"group2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n-\n-            pr.addComment(\"\/label add 1\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-            assertLastCommentContains(pr, \"The `group2`, `group` group labels were already applied, so `1` label will not be added.\");\n-            assertEquals(Set.of(\"group\", \"group2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"1\", \"group\", \"group2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n@@ -246,1 +241,1 @@\n-            assertEquals(Set.of(\"group\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"1\", \"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n@@ -250,1 +245,1 @@\n-            \/\/ Add another file to trigger a group match\n+            \/\/ Add another file to trigger label 2\n@@ -257,1 +252,1 @@\n-            assertEquals(Set.of(\"group\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"1\", \"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n@@ -262,3 +257,3 @@\n-            assertLastCommentContains(pr, \"The `group` label was already applied.\");\n-            assertLastCommentContains(pr, \"The `group` group label was already applied, so `2` label will not be added.\");\n-            assertEquals(Set.of(\"group\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            assertLastCommentContains(pr, \"The `group` label was successfully added.\");\n+            assertLastCommentContains(pr, \"The `2` label was already applied.\");\n+            assertEquals(Set.of(\"1\", \"2\", \"group\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n@@ -539,1 +534,1 @@\n-            assertEquals(Set.of(\"group\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"1\", \"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n@@ -546,1 +541,1 @@\n-            assertLastCommentContains(pr, \"The `group` label was successfully removed.\");\n+            assertLastCommentContains(pr, \"The `group` label was not set.\");\n@@ -548,1 +543,1 @@\n-            assertEquals(Set.of(), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"1\", \"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n@@ -556,1 +551,1 @@\n-            assertEquals(Set.of(\"rfr\", \"group\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"1\", \"2\", \"rfr\", \"group\"), new HashSet<>(pr.store().labelNames()));\n@@ -563,1 +558,1 @@\n-            assertLastCommentContains(pr,\"The `group` group label was already applied, so `2` label will not be added.\");\n+            assertLastCommentContains(pr,\"The `2` label was already applied.\");\n@@ -565,1 +560,1 @@\n-            assertEquals(Set.of(), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"1\", \"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n@@ -573,3 +568,3 @@\n-            assertLastCommentContains(pr,\"The `group` group label was already applied, so `1` label will not be added.\");\n-            assertLastCommentContains(pr,\"The `2` label was not set.\");\n-            assertEquals(Set.of(\"rfr\", \"group\"), new HashSet<>(pr.store().labelNames()));\n+            assertLastCommentContains(pr,\"The `1` label was already applied\");\n+            assertLastCommentContains(pr,\"The `2` label was successfully removed.\");\n+            assertEquals(Set.of(\"1\", \"rfr\", \"group\"), new HashSet<>(pr.store().labelNames()));\n@@ -583,1 +578,1 @@\n-            assertEquals(Set.of(\"rfr\", \"group\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"1\", \"rfr\", \"group\"), new HashSet<>(pr.store().labelNames()));\n@@ -591,1 +586,1 @@\n-            assertEquals(Set.of(\"rfr\", \"group\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"1\", \"rfr\", \"group\"), new HashSet<>(pr.store().labelNames()));\n@@ -604,1 +599,1 @@\n-            assertEquals(Set.of(\"rfr\", \"group\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"1\", \"rfr\", \"group\"), new HashSet<>(pr.store().labelNames()));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTests.java","additions":22,"deletions":27,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -361,0 +361,1 @@\n+            \/\/ Add cpp and hpp together should add group label\n@@ -366,1 +367,6 @@\n-            var addHash = localRepo.commit(\"add cpp file\", \"duke\", \"duke@openjdk.org\");\n+            var test1Hpp = localRepo.root().resolve(\"test1.hpp\");\n+            try (var output = Files.newBufferedWriter(test1Hpp)) {\n+                output.append(\"test\");\n+            }\n+            localRepo.add(test1Hpp);\n+            var addHash = localRepo.commit(\"add cpp,hpp file\", \"duke\", \"duke@openjdk.org\");\n@@ -369,1 +375,17 @@\n-            assertEquals(Set.of(\"group1\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"group1\", \"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+\n+            \/\/ Add another Cpp file, since \"group1\" label is already added, the bot shouldn't add \"1\" label\n+            var test2Cpp = localRepo.root().resolve(\"test2.cpp\");\n+            try (var output = Files.newBufferedWriter(test2Cpp)) {\n+                output.append(\"test\");\n+            }\n+            localRepo.add(test2Cpp);\n+            addHash = localRepo.commit(\"add cpp2 file\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(addHash, author.authenticatedUrl(), \"edit\", true);\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertEquals(Set.of(\"group1\", \"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+\n+            \/\/ But user should still be able to add \"1\" label manually\n+            pr.addComment(\"\/label 1\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertEquals(Set.of(\"group1\", \"1\", \"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n@@ -381,1 +403,1 @@\n-            assertEquals(Set.of(\"group1\", \"rfr\", \"3\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"group1\", \"1\", \"2\", \"rfr\", \"3\"), new HashSet<>(pr.store().labelNames()));\n@@ -453,2 +475,2 @@\n-            \/\/ After adding cpp file, \"1\" should be added and the labels should be upgraded to \"group1\"\n-            assertEquals(Set.of(\"group1\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            \/\/ After adding cpp file, \"1\" should be added\n+            assertEquals(Set.of(\"1\", \"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerTests.java","additions":28,"deletions":6,"binary":false,"changes":34,"status":"modified"}]}