{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1236,0 +1236,9 @@\n+                var commits = localRepo.commitMetadata(localRepo.mergeBase(targetHash, pr.headHash()), pr.headHash(), true);\n+                isJCheckConfUpdatedInMergePR = commits.stream().anyMatch(c -> {\n+                    try {\n+                        return isFileUpdated(Path.of(\".jcheck\", \"conf\"), c.hash());\n+                    } catch (IOException e) {\n+                        throw new UncheckedIOException(e);\n+                    }\n+                });\n+\n@@ -1238,8 +1247,0 @@\n-                    var commits = localRepo.commitMetadata(localRepo.mergeBase(targetHash, pr.headHash()), pr.headHash(), true);\n-                    isJCheckConfUpdatedInMergePR = commits.stream().anyMatch(c -> {\n-                        try {\n-                            return isFileUpdated(Path.of(\".jcheck\", \"conf\"), c.hash());\n-                        } catch (IOException e) {\n-                            throw new UncheckedIOException(e);\n-                        }\n-                    });\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -227,0 +227,90 @@\n+\n+    @Test\n+    void runJCheckTwiceInMergePR(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator1 = credentials.getHostedRepository();\n+            var integrator2 = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator1.forge().currentUser().id())\n+                    .addReviewer(integrator2.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator1).censusRepo(censusBuilder.build())\n+                    .reviewMerge(MergePullRequestReviewConfiguration.JCHECK).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make more changes in another branch\n+\n+            var checkConf = localRepoFolder.resolve(\".jcheck\/conf\");\n+            try (var output = Files.newBufferedWriter(checkConf)) {\n+                output.append(\"[general]\\n\");\n+                output.append(\"project=test\\n\");\n+                output.append(\"jbs=tstprj\\n\");\n+                output.append(\"\\n\");\n+                output.append(\"[checks]\\n\");\n+                output.append(\"error=\");\n+                output.append(String.join(\",\", Set.of(\"author\", \"reviewers\", \"whitespace\")));\n+                output.append(\"\\n\\n\");\n+                output.append(\"[census]\\n\");\n+                output.append(\"version=0\\n\");\n+                output.append(\"domain=openjdk.org\\n\");\n+                output.append(\"\\n\");\n+                output.append(\"[checks \\\"whitespace\\\"]\\n\");\n+                output.append(\"files=.*\\\\.txt\\n\");\n+                output.append(\"\\n\");\n+                output.append(\"[checks \\\"reviewers\\\"]\\n\");\n+                output.append(\"reviewers=2\\n\");\n+                output.append(\"merge=check\");\n+            }\n+            localRepo.add(checkConf);\n+            var otherHash1 = localRepo.commit(\"add conf to master\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(otherHash1, author.authenticatedUrl(), \"other_\/-1.2\");\n+\n+            var otherHash2 = CheckableRepository.appendAndCommit(localRepo, \"Second change in other_\/-1.2\",\n+                    \"Second other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash2, author.authenticatedUrl(), \"other_\/-1.2\");\n+\n+            \/\/ Go back to the original master\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var unrelated = Files.writeString(localRepo.root().resolve(\"unrelated.txt\"), \"Unrelated\", StandardCharsets.UTF_8);\n+            localRepo.add(unrelated);\n+            var updatedMaster = localRepo.commit(\"Unrelated\", \"some\", \"some@one\");\n+            localRepo.merge(otherHash2);\n+            localRepo.push(updatedMaster, author.authenticatedUrl(), \"master\");\n+\n+            var mergeHash = localRepo.commit(\"Merge commit\", \"some\", \"some@one\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + author.name() + \":other_\/-1.2\");\n+\n+            \/\/ Let the bot check the status\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ pr should not be ready, because JCheck conf updated in source branch\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 2) (failed with updated jcheck configuration in pull request)\"));\n+\n+            \/\/ Approve it as another user\n+            var approvalPr1 = integrator1.pullRequest(pr.id());\n+            approvalPr1.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 1, need at least 2)\"));\n+\n+            var approvalPr2 = integrator2.pullRequest(pr.id());\n+            approvalPr2.addReview(Review.Verdict.APPROVED, \"Approved\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+            assertFalse(pr.store().body().contains(\"Too few reviewers with at least role reviewer found\"));\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/MergeTests.java","additions":91,"deletions":1,"binary":false,"changes":92,"status":"modified"}]}