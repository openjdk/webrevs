{"files":[{"patch":"@@ -194,0 +194,12 @@\n+    void addNote(Hash hash,\n+                 List<String> note,\n+                 String authorName,\n+                 String authorEmail,\n+                 String committerName,\n+                 String committerEmail) throws IOException;\n+    default void addNote(Hash hash, List<String> note, String authorName, String authorEmail) throws IOException {\n+        addNote(hash, note, authorName, authorEmail, authorName, authorEmail);\n+    }\n+    List<String> notes(Hash hash) throws IOException;\n+    void pushNotes(URI uri) throws IOException;\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Repository.java","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1773,0 +1773,40 @@\n+\n+    @Override\n+    public void addNote(Hash hash,\n+                        List<String> note,\n+                        String authorName,\n+                        String authorEmail,\n+                        String committerName,\n+                        String committerEmail) throws IOException {\n+        var existing = notes(hash);\n+        if (!existing.isEmpty()) {\n+            throw new IllegalStateException(\"A note already exists for \" + hash.hex());\n+        }\n+\n+        var cmd = Process.capture(\"git\", \"notes\", \"add\", \"-m\", String.join(\"\\n\", note), hash.hex())\n+                         .workdir(dir)\n+                         .environ(currentEnv)\n+                         .environ(\"GIT_AUTHOR_NAME\", authorName)\n+                         .environ(\"GIT_AUTHOR_EMAIL\", authorEmail)\n+                         .environ(\"GIT_COMMITTER_NAME\", committerName)\n+                         .environ(\"GIT_COMMITTER_EMAIL\", committerEmail);\n+        try (var p = cmd.execute()) {\n+            await(p);\n+        }\n+    }\n+\n+    @Override\n+    public List<String> notes(Hash hash) throws IOException {\n+        try (var p = capture(\"git\", \"notes\", \"show\", hash.hex())) {\n+            var res = p.await();\n+            if (res.status() != 0) {\n+                return List.of();\n+            }\n+            return res.stdout();\n+        }\n+    }\n+\n+    @Override\n+    public void pushNotes(URI uri) throws IOException {\n+        push(\"refs\/notes\/*:refs\/notes\/*\", uri);\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1558,0 +1558,20 @@\n+\n+    @Override\n+    public void addNote(Hash hash,\n+                        List<String> note,\n+                        String authorName,\n+                        String authorEmail,\n+                        String committerName,\n+                        String committerEmail) throws IOException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public List<String> notes(Hash hash) throws IOException {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void pushNotes(URI uri) throws IOException {\n+        throw new UnsupportedOperationException();\n+    }\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -3041,0 +3041,49 @@\n+\n+    @Test\n+    void testNotes() throws IOException, InterruptedException {\n+        try (var dir = new TemporaryDirectory()) {\n+            var repo = TestableRepository.init(dir.path(), VCS.GIT);\n+            var readme = dir.path().resolve(\"README\");\n+            Files.write(readme, List.of(\"Hello, readme!\"));\n+\n+            repo.add(readme);\n+            var head = repo.commit(\"Add README\", \"author\", \"author@openjdk.org\");\n+\n+            \/\/ No notes by default\n+            assertEquals(List.of(), repo.notes(head));\n+\n+            \/\/ Add a new note\n+            var note = List.of(\"A notice\");\n+            repo.addNote(head, note, \"duke\", \"duke@openjdk.org\");\n+            assertEquals(note, repo.notes(head));\n+        }\n+    }\n+\n+    @Test\n+    void testThrowsExceptionOnOverwritingExistingNote() throws IOException, InterruptedException {\n+        try (var dir = new TemporaryDirectory()) {\n+            var repo = TestableRepository.init(dir.path(), VCS.GIT);\n+            var readme = dir.path().resolve(\"README\");\n+            Files.write(readme, List.of(\"Hello, readme!\"));\n+\n+            repo.add(readme);\n+            var head = repo.commit(\"Add README\", \"author\", \"author@openjdk.org\");\n+\n+            \/\/ No notes by default\n+            assertEquals(List.of(), repo.notes(head));\n+\n+            \/\/ Add a new note\n+            var note = List.of(\"A notice\");\n+            repo.addNote(head, note, \"duke\", \"duke@openjdk.org\");\n+            assertEquals(note, repo.notes(head));\n+\n+            \/\/ Cannot add an additional note\n+            assertThrows(IllegalStateException.class, () -> {\n+                try {\n+                    repo.addNote(head, List.of(\"Another notice\"), \"Duke\", \"duke@openjdk.org\");\n+                } catch (IOException e) {\n+                    throw new RuntimeException(e);\n+                }\n+            });\n+        }\n+    }\n","filename":"vcs\/src\/test\/java\/org\/openjdk\/skara\/vcs\/RepositoryTests.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"}]}