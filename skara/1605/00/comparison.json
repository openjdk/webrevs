{"files":[{"patch":"@@ -480,1 +480,9 @@\n-        var commit = pr.repository().forge().search(hash, true);\n+        var repoName = checkablePullRequest.findOriginalBackportRepo();\n+        if (repoName == null) {\n+            return Optional.empty();\n+        }\n+        var repo = pr.repository().forge().repository(repoName);\n+        if (repo.isEmpty()) {\n+            throw new IllegalStateException(\"Backport comment for PR \" + pr.id() + \" contains bad repo name: \" + repoName);\n+        }\n+        var commit = repo.get().commit(hash, true);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -527,3 +527,5 @@\n-                var metadata = pr.repository().forge().search(hash);\n-                if (metadata.isPresent()) {\n-                    var message = CommitMessageParsers.v1.parse(metadata.get().message());\n+                var forge = pr.repository().forge();\n+                var repoName = forge.search(hash);\n+                if (repoName.isPresent()) {\n+                    var metadata = forge.repository(repoName.get()).flatMap(repository -> repository.commit(hash));\n+                    var message = CommitMessageParsers.v1.parse(metadata.orElseThrow().message());\n@@ -553,0 +555,1 @@\n+                    comment.add(\"<!-- repo \" + repoName.get() + \" -->\\n\");\n@@ -574,1 +577,0 @@\n-                    var botUser = pr.repository().forge().currentUser();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,0 +44,1 @@\n+    private static final Pattern BACKPORT_REPO_PATTERN = Pattern.compile(\"<!-- repo (.+) -->\");\n@@ -314,0 +315,4 @@\n+    String findOriginalBackportRepo() {\n+        return findOriginalBackportRepo(pr, comments);\n+    }\n+\n@@ -327,0 +332,13 @@\n+    static String findOriginalBackportRepo(PullRequest pr, List<Comment> comments) {\n+        var botUser = pr.repository().forge().currentUser();\n+        return comments\n+                .stream()\n+                .filter(c -> c.author().equals(botUser))\n+                .flatMap(c -> Stream.of(c.body().split(\"\\n\")))\n+                .map(BACKPORT_REPO_PATTERN::matcher)\n+                .filter(Matcher::find)\n+                .reduce((first, second) -> second)\n+                .map(l -> l.group(1))\n+                .orElse(null);\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckablePullRequest.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n+    public Optional<String> search(Hash hash, boolean includeDiffs) {\n","filename":"bots\/tester\/src\/test\/java\/org\/openjdk\/skara\/bots\/tester\/InMemoryHost.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,1 @@\n-     * @return Commit instance if found, otherwise empty\n+     * @return Repository name if found, otherwise empty\n@@ -52,2 +52,2 @@\n-    Optional<HostedCommit> search(Hash hash, boolean includeDiffs);\n-    default Optional<HostedCommit> search(Hash hash) {\n+    Optional<String> search(Hash hash, boolean includeDiffs);\n+    default Optional<String> search(Hash hash) {\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/Forge.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,1 +82,1 @@\n-    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n+    public Optional<String> search(Hash hash, boolean includeDiffs) {\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/bitbucket\/BitbucketHost.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -446,1 +446,1 @@\n-    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n+    public Optional<String> search(Hash hash, boolean includeDiffs) {\n@@ -460,1 +460,1 @@\n-        var shortestName = items.stream()\n+        return items.stream()\n@@ -463,1 +463,0 @@\n-        return shortestName.flatMap(this::repository).flatMap(r -> r.commit(hash, includeDiffs));\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubHost.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import java.util.stream.Collectors;\n@@ -238,2 +237,1 @@\n-    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n-        var hex = hash.hex();\n+    public Optional<String> search(Hash hash, boolean includeDiffs) {\n@@ -250,1 +248,1 @@\n-                                  .collect(Collectors.toList());\n+                                  .toList();\n@@ -255,1 +253,1 @@\n-                    return commit;\n+                    return Optional.of(project.name());\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabHost.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -238,1 +238,1 @@\n-    void test() {\n+    void testGeneratingUrl() {\n@@ -296,2 +296,7 @@\n-        var commit = pr.repository().forge().search(new Hash(settings.getProperty(\"github.commitHash\")), true);\n-        var backportDiff = commit.get().parentDiffs().get(0);\n+        var hash = new Hash(settings.getProperty(\"github.commitHash\"));\n+        var repoName = pr.repository().forge().search(hash, true);\n+        assertTrue(repoName.isPresent());\n+        var repository = pr.repository().forge().repository(repoName.get());\n+        assertTrue(repository.isPresent());\n+        var commit = repository.get().commit(hash, true);\n+        var backportDiff = commit.orElseThrow().parentDiffs().get(0);\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.util.Arrays;\n@@ -64,1 +65,1 @@\n-        gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+        gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Arrays.asList(settings.getProperty(\"gitlab.group\").split(\",\")));\n@@ -256,1 +257,6 @@\n-        var commit = pr.repository().forge().search(new Hash(settings.getProperty(\"gitlab.commitHash\")), true);\n+        var hash = new Hash(settings.getProperty(\"gitlab.commitHash\"));\n+        var repoName = pr.repository().forge().search(hash, true);\n+        assertTrue(repoName.isPresent());\n+        var repository = pr.repository().forge().repository(repoName.get());\n+        assertTrue(repository.isPresent());\n+        var commit = repository.get().commit(hash, true);\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -187,1 +187,1 @@\n-    public Optional<HostedCommit> search(Hash hash, boolean includeDiffs) {\n+    public Optional<String> search(Hash hash, boolean includeDiffs) {\n@@ -192,1 +192,1 @@\n-                return commit;\n+                return Optional.of(repo.name());\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestHost.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}