{"files":[{"patch":"@@ -52,0 +52,1 @@\n+    private final List<String> refspecs;\n@@ -54,1 +55,1 @@\n-        this(storage, from, to, List.of(), true, false);\n+        this(storage, from, to, List.of(), true, false, List.of());\n@@ -58,1 +59,1 @@\n-              boolean includeTags, boolean onlyTags) {\n+              boolean includeTags, boolean onlyTags, List<String> refspecs) {\n@@ -65,0 +66,1 @@\n+        this.refspecs = refspecs;\n@@ -106,1 +108,1 @@\n-            repo.fetchAll(from.authenticatedUrl(), includeTags || onlyTags);\n+            repo.fetchAll(from.authenticatedUrl(), includeTags || onlyTags || !refspecs.isEmpty());\n@@ -113,1 +115,1 @@\n-            } else {\n+            } else if (!branchPatterns.isEmpty()) {\n@@ -126,0 +128,5 @@\n+            } else if (!refspecs.isEmpty()) {\n+                for (var refspec : refspecs) {\n+                    log.info(\"Pushing using refspec \" + refspec + \" to \" + to.name());\n+                    repo.push(refspec, to.authenticatedUrl());\n+                }\n@@ -136,1 +143,13 @@\n-        if (branchPatterns.isEmpty()) {\n+        if (!refspecs.isEmpty()) {\n+            name += \" (\" + String.join(\",\", refspecs) + \")\";\n+        } else {\n+            if (branchPatterns.isEmpty()) {\n+                if (onlyTags) {\n+                    name += \" ()\";\n+                } else {\n+                    name += \" (*)\";\n+                }\n+            } else {\n+                var branchPatterns = this.branchPatterns.stream().map(Pattern::toString).collect(Collectors.toList());\n+                name += \" (\" + String.join(\",\", branchPatterns) + \")\";\n+            }\n@@ -138,1 +157,3 @@\n-                name += \" ()\";\n+                name += \" [tags only]\";\n+            } else if (includeTags) {\n+                name += \" [tags included]\";\n@@ -140,1 +161,1 @@\n-                name += \" (*)\";\n+                name += \" [tags excluded]\";\n@@ -142,10 +163,0 @@\n-        } else {\n-            var branchPatterns = this.branchPatterns.stream().map(Pattern::toString).collect(Collectors.toList());\n-            name += \" (\" + String.join(\",\", branchPatterns) + \")\";\n-        }\n-        if (onlyTags) {\n-            name += \" [tags only]\";\n-        } else if (includeTags) {\n-            name += \" [tags included]\";\n-        } else {\n-            name += \" [tags excluded]\";\n@@ -187,0 +198,4 @@\n+\n+    public List<String> getRefspecs() {\n+        return refspecs;\n+    }\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBot.java","additions":32,"deletions":17,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -63,0 +63,14 @@\n+            List<String> refspecs;\n+            if (repo.contains(\"refspecs\")) {\n+                var refspecsElement = repo.get(\"refspecs\");\n+                if (refspecsElement.isArray()) {\n+                    refspecs = refspecsElement.asArray().stream()\n+                            .map(JSONValue::asString)\n+                            .toList();\n+                } else {\n+                    refspecs = List.of(refspecsElement.asString());\n+                }\n+            } else {\n+                refspecs = List.of();\n+            }\n+\n@@ -65,0 +79,3 @@\n+                if (!refspecs.isEmpty()) {\n+                    throw new IllegalStateException(\"Cannot combine refspecs and branches\");\n+                }\n@@ -82,1 +99,1 @@\n-            var includeTags = branchPatterns.isEmpty();\n+            var includeTags = branchPatterns.isEmpty() && refspecs.isEmpty();\n@@ -99,0 +116,3 @@\n+            if ((onlyTags || includeTags) && !refspecs.isEmpty()) {\n+                throw new IllegalStateException(\"Cannot combine refspecs and tags\");\n+            }\n@@ -101,1 +121,1 @@\n-            bots.add(new MirrorBot(storage, fromRepo, toRepo, branchPatterns, includeTags, onlyTags));\n+            bots.add(new MirrorBot(storage, fromRepo, toRepo, branchPatterns, includeTags, onlyTags, refspecs));\n","filename":"bots\/mirror\/src\/main\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactory.java","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -255,0 +255,105 @@\n+\n+    @Test\n+    public void testThrowsWithRefspecsAndTags() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"refspecs\": \"refs\/foo\",\n+                          \"tags\": \"only\"\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            assertThrows(IllegalStateException.class, () -> testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig));\n+        }\n+    }\n+\n+    @Test\n+    public void testThrowsWithRefspecsAndBranches() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"refspecs\": \"refs\/foo\",\n+                          \"branches\": \"master\"\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            assertThrows(IllegalStateException.class, () -> testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig));\n+        }\n+    }\n+\n+    @Test\n+    public void testCreateWithRefspecs() {\n+        try (var tempFolder = new TemporaryDirectory()) {\n+            String jsonString = \"\"\"\n+                    {\n+                      \"repositories\": [\n+                        {\n+                          \"from\": \"from1\",\n+                          \"to\": \"to1\",\n+                          \"refspecs\": \"refs\/foo\",\n+                        },\n+                        {\n+                          \"from\": \"from2\",\n+                          \"to\": \"to2\",\n+                          \"refspecs\": [\n+                            \"refs\/foo\",\n+                            \"refs\/bar\"\n+                          ]\n+                        }\n+                      ]\n+                    }\n+                    \"\"\";\n+            var jsonConfig = JWCC.parse(jsonString).asObject();\n+\n+            var testBotFactory = TestBotFactory.newBuilder()\n+                    .addHostedRepository(\"from1\", new TestHostedRepository(\"from1\"))\n+                    .addHostedRepository(\"from2\", new TestHostedRepository(\"from2\"))\n+                    .addHostedRepository(\"to1\", new TestHostedRepository(\"to1\"))\n+                    .addHostedRepository(\"to2\", new TestHostedRepository(\"to2\"))\n+                    .storagePath(tempFolder.path().resolve(\"storage\"))\n+                    .build();\n+\n+            var bots = testBotFactory.createBots(MirrorBotFactory.NAME, jsonConfig);\n+            assertEquals(2, bots.size());\n+\n+            MirrorBot mirrorBot1 = (MirrorBot) bots.get(0);\n+            assertEquals(\"MirrorBot@from1->to1 (refs\/foo)\", mirrorBot1.toString());\n+            assertFalse(mirrorBot1.isIncludeTags());\n+            assertFalse(mirrorBot1.isOnlyTags());\n+            assertEquals(List.of(), mirrorBot1.getBranchPatterns());\n+            assertEquals(List.of(\"refs\/foo\"), mirrorBot1.getRefspecs());\n+\n+            MirrorBot mirrorBot2 = (MirrorBot) bots.get(1);\n+            assertEquals(\"MirrorBot@from2->to2 (refs\/foo,refs\/bar)\", mirrorBot2.toString());\n+            assertFalse(mirrorBot2.isIncludeTags());\n+            assertFalse(mirrorBot2.isOnlyTags());\n+            assertEquals(List.of(), mirrorBot2.getBranchPatterns());\n+            assertEquals(List.of(\"refs\/foo\", \"refs\/bar\"), mirrorBot2.getRefspecs());\n+        }\n+    }\n","filename":"bots\/mirror\/src\/test\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotFactoryTest.java","additions":105,"deletions":0,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -219,1 +219,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), true, false);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), true, false, List.of());\n@@ -287,1 +287,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), false, false);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), false, false, List.of());\n@@ -396,1 +396,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), false, false);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"master\")), false, false, List.of());\n@@ -444,1 +444,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"f.*\")), false, false);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(Pattern.compile(\"f.*\")), false, false, List.of());\n@@ -531,1 +531,1 @@\n-            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(), true, true);\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(), true, true, List.of());\n@@ -571,0 +571,91 @@\n+\n+    @Test\n+    void mirrorRefspecs() throws IOException {\n+        try (var temp = new TemporaryDirectory()) {\n+            var host = TestHost.createNew(List.of(HostUser.create(0, \"duke\", \"J. Duke\")));\n+\n+            var fromDir = temp.path().resolve(\"from.git\");\n+            var fromLocalRepo = TestableRepository.init(fromDir, VCS.GIT);\n+            var fromHostedRepo = new TestHostedRepository(host, \"test\", fromLocalRepo);\n+\n+            var toDir = temp.path().resolve(\"to.git\");\n+            var toLocalRepo = TestableRepository.init(toDir, VCS.GIT);\n+            var gitConfig = toDir.resolve(\".git\").resolve(\"config\");\n+            Files.write(gitConfig, List.of(\"[receive]\", \"denyCurrentBranch = ignore\"),\n+                    StandardOpenOption.APPEND);\n+            var toHostedRepo = new TestHostedRepository(host, \"test-mirror\", toLocalRepo);\n+\n+            var newFile = fromDir.resolve(\"this-file-cannot-exist.txt\");\n+            Files.writeString(newFile, \"Hello world\\n\");\n+            fromLocalRepo.add(newFile);\n+            var newHash = fromLocalRepo.commit(\"An additional commit\", \"duke\", \"duke@openjdk.org\");\n+            var fromCommits = fromLocalRepo.commits().asList();\n+            assertEquals(1, fromCommits.size());\n+            assertEquals(newHash, fromCommits.get(0).hash());\n+\n+            var toCommits = toLocalRepo.commits().asList();\n+            assertEquals(0, toCommits.size());\n+\n+            var storage = temp.path().resolve(\"storage\");\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(), false, false,\n+                    List.of(\"refs\/heads\/master:refs\/heads\/master\"));\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            toCommits = toLocalRepo.commits().asList();\n+            assertEquals(1, toCommits.size());\n+            assertEquals(newHash, toCommits.get(0).hash());\n+        }\n+    }\n+\n+    @Test\n+    void mirrorMultipleRefspecs() throws IOException {\n+        try (var temp = new TemporaryDirectory()) {\n+            var host = TestHost.createNew(List.of(HostUser.create(0, \"duke\", \"J. Duke\")));\n+\n+            var fromDir = temp.path().resolve(\"from.git\");\n+            var fromLocalRepo = TestableRepository.init(fromDir, VCS.GIT);\n+            var fromHostedRepo = new TestHostedRepository(host, \"test\", fromLocalRepo);\n+\n+            var toDir = temp.path().resolve(\"to.git\");\n+            var toLocalRepo = TestableRepository.init(toDir, VCS.GIT);\n+            var gitConfig = toDir.resolve(\".git\").resolve(\"config\");\n+            Files.write(gitConfig, List.of(\"[receive]\", \"denyCurrentBranch = ignore\"),\n+                    StandardOpenOption.APPEND);\n+            var toHostedRepo = new TestHostedRepository(host, \"test-mirror\", toLocalRepo);\n+\n+            var newFile = fromDir.resolve(\"this-file-cannot-exist.txt\");\n+            Files.writeString(newFile, \"Hello world\\n\");\n+            fromLocalRepo.add(newFile);\n+            var first = fromLocalRepo.commit(\"An additional commit\", \"duke\", \"duke@openjdk.org\");\n+            var featureBranch = fromLocalRepo.branch(first, \"feature\");\n+            fromLocalRepo.checkout(featureBranch, false);\n+            assertEquals(Optional.of(featureBranch), fromLocalRepo.currentBranch());\n+\n+            Files.writeString(newFile, \"Hello again\\n\", StandardOpenOption.APPEND);\n+            fromLocalRepo.add(newFile);\n+            var second = fromLocalRepo.commit(\"An additional commit\", \"duke\", \"duke@openjdk.org\");\n+\n+            assertEquals(Optional.of(first), fromLocalRepo.resolve(\"master\"));\n+            assertEquals(Optional.of(second), fromLocalRepo.resolve(\"feature\"));\n+\n+            fromLocalRepo.tag(first, \"firstTag\", \"add first tag\", \"duke\", \"duk@openjdk.org\");\n+            fromLocalRepo.tag(second, \"secondTag\", \"add second tag\", \"duke\", \"duk@openjdk.org\");\n+\n+            var fromCommits = fromLocalRepo.commits().asList();\n+            assertEquals(2, fromCommits.size());\n+\n+            var toCommits = toLocalRepo.commits().asList();\n+            assertEquals(0, toCommits.size());\n+\n+            var storage = temp.path().resolve(\"storage\");\n+            var bot = new MirrorBot(storage, fromHostedRepo, toHostedRepo, List.of(), false, false,\n+                    List.of(\"refs\/heads\/m*:refs\/heads\/m*\", \"refs\/tags\/s*:refs\/tags\/s*\"));\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            toCommits = toLocalRepo.commits().asList();\n+            assertEquals(2, toCommits.size());\n+            assertEquals(second, toCommits.get(0).hash());\n+            assertEquals(List.of(new Branch(\"master\")), toLocalRepo.branches());\n+            assertEquals(List.of(new Tag(\"secondTag\")), toLocalRepo.tags());\n+        }\n+    }\n","filename":"bots\/mirror\/src\/test\/java\/org\/openjdk\/skara\/bots\/mirror\/MirrorBotTests.java","additions":96,"deletions":5,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -74,0 +74,1 @@\n+    void push(String refspec, URI uri) throws IOException;\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/Repository.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -652,0 +652,7 @@\n+    @Override\n+    public void push(String refspec, URI uri) throws IOException {\n+        try (var p = capture(\"git\", \"push\", uri.toString(), refspec)) {\n+            await(p);\n+        }\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/git\/GitRepository.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -606,0 +606,5 @@\n+    @Override\n+    public void push(String refspec, URI uri) throws IOException {\n+        throw new RuntimeException(\"Refspec not supported with Mercurial\");\n+    }\n+\n","filename":"vcs\/src\/main\/java\/org\/openjdk\/skara\/vcs\/hg\/HgRepository.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}