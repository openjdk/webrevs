{"files":[{"patch":"@@ -119,1 +119,2 @@\n-            var tag = localRepo.tag(commit.hash(), tagName, message, contributor.username(), email);\n+            var name = contributor.fullName().isPresent() ? contributor.fullName().get() : contributor.username();\n+            var tag = localRepo.tag(commit.hash(), tagName, message, name, email);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/TagCommand.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import org.openjdk.skara.vcs.Author;\n@@ -307,0 +308,49 @@\n+\n+    @Test\n+    void metadata(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                                           .addAuthor(author.forge().currentUser().id())\n+                                           .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var bot = PullRequestBot.newBuilder()\n+                                    .repo(author)\n+                                    .integrators(Set.of(author.forge().currentUser().username()))\n+                                    .censusRepo(censusBuilder.build())\n+                                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                                    .seedStorage(seedFolder)\n+                                    .forks(Map.of(author.name(), author))\n+                                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Add a tag command\n+            author.addCommitComment(masterHash, \"\/skara tag v1.0\");\n+            TestBotRunner.runPeriodicItems(bot);\n+\n+            var recentCommitComments = author.recentCommitComments();\n+            assertEquals(2, recentCommitComments.size());\n+            var botReply = recentCommitComments.get(0);\n+            assertTrue(botReply.body().contains(\"tag\"));\n+            assertTrue(botReply.body().contains(\"was successfully created\"));\n+\n+            var localAuthorRepoDir = tempFolder.path().resolve(\"author\");\n+            var localAuthorRepo = Repository.clone(author.authenticatedUrl(), localAuthorRepoDir);\n+            var tags = localAuthorRepo.tags();\n+            assertEquals(List.of(new Tag(\"v1.0\")), tags);\n+\n+            var tag = localAuthorRepo.annotate(tags.get(0));\n+            assertTrue(tag.isPresent());\n+            assertEquals(masterHash, tag.get().target());\n+            assertEquals(\"v1.0\", tag.get().name());\n+            assertEquals(\"Added tag v1.0 for changeset \" + masterHash.abbreviate(), tag.get().message());\n+            assertEquals(Author.fromString(\"Generated Author 1 <integrationauthor1@openjdk.org>\"), tag.get().author());\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/TagCommitCommandTests.java","additions":50,"deletions":0,"binary":false,"changes":50,"status":"modified"}]}