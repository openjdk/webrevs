{"files":[{"patch":"@@ -324,30 +324,28 @@\n-                    if (requestedVersion != null) {\n-                        var altFixedVersionIssue = findAltFixedVersionIssue(issue, branch);\n-                        if (altFixedVersionIssue.isPresent()) {\n-                            log.info(\"Found an already fixed backport \" + altFixedVersionIssue.get().id() + \" for \" + issue.id()\n-                                    + \" with fixVersion \" + Backports.mainFixVersion(altFixedVersionIssue.get()).orElseThrow());\n-                            issue = altFixedVersionIssue.get();\n-                            \/\/ Do not update fixVersion\n-                            requestedVersion = null;\n-                        } else {\n-                            var fixVersion = JdkVersion.parse(requestedVersion).orElseThrow();\n-                            var existing = Backports.findIssue(issue, fixVersion);\n-                            if (existing.isEmpty()) {\n-                                var issueFixVersion = Backports.mainFixVersion(issue);\n-                                try {\n-                                    if (issue.isOpen() && avoidForwardports && issueFixVersion.isPresent() && fixVersion.compareTo(issueFixVersion.get()) > 0) {\n-                                        log.info(\"Avoiding 'forwardport', creating new backport for \" + issue.id() + \" with fixVersion \" + issueFixVersion.get().raw());\n-                                        Backports.createBackport(issue, issueFixVersion.get().raw(), username.orElse(null), defaultSecurity(branch));\n-                                    } else {\n-                                        log.info(\"Creating new backport for \" + issue.id() + \" with fixVersion \" + requestedVersion);\n-                                        issue = Backports.createBackport(issue, requestedVersion, username.orElse(null), defaultSecurity(branch));\n-                                    }\n-                                } catch (UncheckedRestException e) {\n-                                    existing = Backports.findIssue(issue, fixVersion);\n-                                    if (existing.isPresent()) {\n-                                        log.info(\"Race condition occurred while creating backport issue, returning the existing backport for \" + issue.id() + \" and requested fixVersion \"\n-                                                + requestedVersion + \" \" + existing.get().id());\n-                                        issue = existing.get();\n-                                    } else {\n-                                        throw e;\n-                                    }\n+                    var altFixedVersionIssue = findAltFixedVersionIssue(issue, branch);\n+                    if (altFixedVersionIssue.isPresent()) {\n+                        log.info(\"Found an already fixed backport \" + altFixedVersionIssue.get().id() + \" for \" + issue.id()\n+                                + \" with fixVersion \" + Backports.mainFixVersion(altFixedVersionIssue.get()).orElseThrow());\n+                        issue = altFixedVersionIssue.get();\n+                        \/\/ Do not update fixVersion\n+                        requestedVersion = null;\n+                    } else if (requestedVersion != null) {\n+                        var fixVersion = JdkVersion.parse(requestedVersion).orElseThrow();\n+                        var existing = Backports.findIssue(issue, fixVersion);\n+                        if (existing.isEmpty()) {\n+                            var issueFixVersion = Backports.mainFixVersion(issue);\n+                            try {\n+                                if (issue.isOpen() && avoidForwardports && issueFixVersion.isPresent() && fixVersion.compareTo(issueFixVersion.get()) > 0) {\n+                                    log.info(\"Avoiding 'forwardport', creating new backport for \" + issue.id() + \" with fixVersion \" + issueFixVersion.get().raw());\n+                                    Backports.createBackport(issue, issueFixVersion.get().raw(), username.orElse(null), defaultSecurity(branch));\n+                                } else {\n+                                    log.info(\"Creating new backport for \" + issue.id() + \" with fixVersion \" + requestedVersion);\n+                                    issue = Backports.createBackport(issue, requestedVersion, username.orElse(null), defaultSecurity(branch));\n+                                }\n+                            } catch (UncheckedRestException e) {\n+                                existing = Backports.findIssue(issue, fixVersion);\n+                                if (existing.isPresent()) {\n+                                    log.info(\"Race condition occurred while creating backport issue, returning the existing backport for \" + issue.id() + \" and requested fixVersion \"\n+                                            + requestedVersion + \" \" + existing.get().id());\n+                                    issue = existing.get();\n+                                } else {\n+                                    throw e;\n@@ -355,4 +353,0 @@\n-                            } else {\n-                                log.info(\"Found existing backport for \" + issue.id() + \" and requested fixVersion \"\n-                                        + requestedVersion + \" \" + existing.get().id());\n-                                issue = existing.get();\n@@ -360,0 +354,4 @@\n+                        } else {\n+                            log.info(\"Found existing backport for \" + issue.id() + \" and requested fixVersion \"\n+                                    + requestedVersion + \" \" + existing.get().id());\n+                            issue = existing.get();\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":32,"deletions":34,"binary":false,"changes":66,"status":"modified"}]}