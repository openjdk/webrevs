{"files":[{"patch":"@@ -46,1 +46,0 @@\n-import java.util.regex.Pattern;\n@@ -81,1 +80,0 @@\n-    private static final Pattern LABEL_COMMIT_PATTERN = Pattern.compile(\"<!-- PullRequest Bot label commit '(.*?)' -->\");\n@@ -243,1 +241,1 @@\n-    private List<String> botSpecificChecks(boolean isCleanBackport) throws IOException {\n+    private List<String> botSpecificChecks(boolean isCleanBackport) {\n@@ -272,1 +270,1 @@\n-            \/\/ If the pr is already auto labelled\n+            \/\/ If the pr is already auto labelled, check if the pull request is associated with at least one component\n@@ -274,24 +272,1 @@\n-                \/\/ Update PR labels when new files are touched\n-                var labelComment = findComment(LabelerWorkItem.INITIAL_LABEL_MESSAGE);\n-                if (labelComment.isPresent()) {\n-                    var line = labelComment.get().body().lines()\n-                            .map(LABEL_COMMIT_PATTERN::matcher)\n-                            .filter(Matcher::find)\n-                            .findFirst();\n-                    if (line.isPresent()) {\n-                        var evaluatedCommitHash = line.get().group(1);\n-                        var changedFiles = PullRequestUtils.changedFiles(pr, localRepo, new Hash(evaluatedCommitHash));\n-                        var newLabelsNeedToBeAdded = workItem.bot.labelConfiguration().label(changedFiles);\n-                        newLabels.addAll(newLabelsNeedToBeAdded);\n-                        var upgradedLabels = workItem.bot.labelConfiguration().upgradeLabelsToGroups(newLabels);\n-                        newLabels.addAll(upgradedLabels);\n-                        newLabels.removeIf(label -> !upgradedLabels.contains(label));\n-                    }\n-                    pr.updateComment(labelComment.get().id(), labelComment.get().body().replaceAll(\n-                            \"(<!-- PullRequest Bot label commit ')[^']*(' -->)\",\n-                            \"$1\" + pr.headHash().toString() + \"$2\"\n-                    ));\n-                }\n-\n-                \/\/ Check if the pull request is associated with at least one component\n-                var existingAllowed = new HashSet<>(newLabels);\n+                var existingAllowed = new HashSet<>(pr.labelNames());\n@@ -1510,1 +1485,0 @@\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":3,"deletions":29,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+import org.openjdk.skara.vcs.Hash;\n@@ -34,0 +35,3 @@\n+import java.util.logging.Logger;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -39,0 +43,2 @@\n+    protected static final Pattern LABEL_COMMIT_PATTERN = Pattern.compile(\"<!-- PullRequest Bot label commit '(.*?)' -->\");\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.pr\");\n@@ -126,1 +132,3 @@\n-        if (bot.isAutoLabelled(pr)) {\n+        \/\/ If no label configuration, return early\n+        if (bot.labelConfiguration().allowed().isEmpty()) {\n+            bot.setAutoLabelled(pr);\n@@ -130,1 +138,2 @@\n-        if (bot.labelConfiguration().allowed().isEmpty()) {\n+        \/\/ If the label comment can be found, mark the pr as auto labelled\n+        if (findComment(prComments(), INITIAL_LABEL_MESSAGE).isPresent()) {\n@@ -132,0 +141,55 @@\n+        }\n+\n+        \/\/ Updating labels when new files are touched\n+        if (bot.isAutoLabelled(pr)) {\n+            try {\n+                var oldLabels = new HashSet<>(pr.labelNames());\n+                var newLabels = new HashSet<>(pr.labelNames());\n+\n+                var path = scratchArea.get(pr.repository());\n+                var seedPath = bot.seedStorage().orElse(scratchArea.getSeeds());\n+                var hostedRepositoryPool = new HostedRepositoryPool(seedPath);\n+                var localRepo = PullRequestUtils.materialize(hostedRepositoryPool, pr, path);\n+\n+                var labelComment = findComment(prComments(), INITIAL_LABEL_MESSAGE);\n+\n+                if (labelComment.isPresent()) {\n+                    var line = labelComment.get().body().lines()\n+                            .map(LABEL_COMMIT_PATTERN::matcher)\n+                            .filter(Matcher::find)\n+                            .findFirst();\n+\n+                    if (line.isPresent()) {\n+                        var evaluatedCommitHash = line.get().group(1);\n+                        var changedFiles = PullRequestUtils.changedFiles(pr, localRepo, new Hash(evaluatedCommitHash));\n+                        var newLabelsNeedToBeAdded = bot.labelConfiguration().label(changedFiles);\n+                        newLabels.addAll(newLabelsNeedToBeAdded);\n+\n+                        var upgradedLabels = bot.labelConfiguration().upgradeLabelsToGroups(newLabels);\n+                        newLabels.addAll(upgradedLabels);\n+                        newLabels.removeIf(label -> !upgradedLabels.contains(label));\n+                    }\n+\n+                    for (var newLabel : newLabels) {\n+                        if (!oldLabels.contains(newLabel)) {\n+                            log.info(\"Adding label \" + newLabel);\n+                            pr.addLabel(newLabel);\n+                        }\n+                    }\n+\n+                    for (var oldLabel : oldLabels) {\n+                        if (!newLabels.contains(oldLabel)) {\n+                            log.info(\"Removing label \" + oldLabel);\n+                            pr.removeLabel(oldLabel);\n+                        }\n+                    }\n+\n+                    pr.updateComment(labelComment.get().id(), labelComment.get().body().replaceAll(\n+                            \"(<!-- PullRequest Bot label commit ')[^']*(' -->)\",\n+                            \"$1\" + pr.headHash().toString() + \"$2\"\n+                    ));\n+                }\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+            \/\/ No need to return CheckWorkItem, if there is any label added, in the next round of CheckWorkItem, it will re-evaluate the pr\n@@ -135,0 +199,1 @@\n+        \/\/ Initial auto labeling\n@@ -136,1 +201,1 @@\n-        var labelNames = pr.labelNames();\n+        var labelNames = new HashSet<>(pr.labelNames());\n@@ -172,1 +237,0 @@\n-            updateLabelMessage(comments, labelsToAdd, pr.headHash().toString(), true);\n@@ -181,0 +245,2 @@\n+\n+            updateLabelMessage(comments, labelsToAdd, pr.headHash().toString(), true);\n@@ -187,1 +253,1 @@\n-    private Collection<WorkItem> needsRfrCheck(List<String> labelNames) {\n+    private Collection<WorkItem> needsRfrCheck(Set<String> labelNames) {\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerWorkItem.java","additions":72,"deletions":6,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -191,4 +191,3 @@\n-            if (!bot.isAutoLabelled(pr) && !pr.isClosed()) {\n-                \/\/ When all commands are processed, it's time to check labels\n-                return List.of(new LabelerWorkItem(bot, prId, errorHandler, triggerUpdatedAt));\n-            } else {\n+            \/\/ If there is no label configuration, don't generate LabelerWorkItem\n+            if (bot.labelConfiguration().allowed().isEmpty()) {\n+                bot.setAutoLabelled(pr);\n@@ -197,0 +196,6 @@\n+\n+            if (!pr.isClosed()) {\n+                return List.of(new LabelerWorkItem(bot, prId, errorHandler, triggerUpdatedAt));\n+            }\n+\n+            return List.of();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.time.ZonedDateTime;\n@@ -185,0 +184,2 @@\n+            \/\/ After label \"1\" is added, in the next CheckWorkItem, rfr should be added\n+            TestBotRunner.runPeriodicItems(prBot);\n@@ -597,2 +598,0 @@\n-\n-\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTests.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}