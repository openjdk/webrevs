{"files":[{"patch":"@@ -49,0 +49,1 @@\n+import static org.openjdk.skara.bots.pr.LabelerWorkItem.INITIAL_LABEL_MESSAGE;\n@@ -271,1 +272,1 @@\n-            if (workItem.bot.isAutoLabelled(pr)) {\n+            if (findComment(INITIAL_LABEL_MESSAGE).isPresent()) {\n@@ -1028,0 +1029,4 @@\n+        return findComment(comments, marker, pr);\n+    }\n+\n+    static Optional<Comment> findComment(List<Comment> comments, String marker, PullRequest pr) {\n@@ -1030,3 +1035,3 @@\n-                       .filter(comment -> comment.author().equals(self))\n-                       .filter(comment -> comment.body().contains(marker))\n-                       .findAny();\n+                .filter(comment -> comment.author().equals(self))\n+                .filter(comment -> comment.body().contains(marker))\n+                .findAny();\n@@ -1578,0 +1583,9 @@\n+        syncLabels(pr, labels, newLabels, log);\n+\n+        \/\/ After updating the PR, rethrow any exception to automatically retry on transient errors\n+        if (checkException != null) {\n+            throw new RuntimeException(\"Exception during jcheck\", checkException);\n+        }\n+    }\n+\n+    static void syncLabels(PullRequest pr, Set<String> oldLabels, Set<String> newLabels, Logger log) {\n@@ -1579,1 +1593,1 @@\n-            if (!labels.contains(newLabel)) {\n+            if (!oldLabels.contains(newLabel)) {\n@@ -1584,1 +1598,1 @@\n-        for (var oldLabel : labels) {\n+        for (var oldLabel : oldLabels) {\n@@ -1590,5 +1604,0 @@\n-\n-        \/\/ After updating the PR, rethrow any exception to automatically retry on transient errors\n-        if (checkException != null) {\n-            throw new RuntimeException(\"Exception during jcheck\", checkException);\n-        }\n@@ -1597,0 +1606,1 @@\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.logging.Logger;\n@@ -34,0 +35,1 @@\n+import static org.openjdk.skara.bots.pr.CheckRun.syncLabels;\n@@ -37,1 +39,1 @@\n-\n+    private static final Logger log = Logger.getLogger(\"org.openjdk.skara.bots.pr\");\n@@ -85,1 +87,1 @@\n-                addLabels(labels, currentLabels, pr, reply);\n+                addLabels(labels, currentLabels, pr, reply, bot);\n@@ -89,0 +91,1 @@\n+            upgradeLabelsToGroups(pr, bot);\n@@ -118,1 +121,1 @@\n-            addLabels(labelsToAdd, currentLabels, pr, reply);\n+            addLabels(labelsToAdd, currentLabels, pr, reply, bot);\n@@ -120,0 +123,1 @@\n+            upgradeLabelsToGroups(pr, bot);\n@@ -149,1 +153,1 @@\n-    private void addLabels(List<String> labelsToAdd,Set<String> currentLabels, PullRequest pr, PrintWriter reply) {\n+    private void addLabels(List<String> labelsToAdd, Set<String> currentLabels, PullRequest pr, PrintWriter reply, PullRequestBot bot) {\n@@ -152,3 +156,9 @@\n-                pr.addLabel(label);\n-                reply.println(LabelTracker.addLabelMarker(label));\n-                reply.println(\"The `\" + label + \"` label was successfully added.\");\n+                var groupLabel = bot.labelConfiguration().groupLabel(label);\n+                if (groupLabel.isEmpty()) {\n+                    pr.addLabel(label);\n+                    reply.println(LabelTracker.addLabelMarker(label));\n+                    reply.println(\"The `\" + label + \"` label was successfully added.\");\n+                } else {\n+                    reply.println(LabelTracker.addLabelMarker(label));\n+                    reply.println(\"The `\" + groupLabel.get() + \"` group label was already applied, so `\" + label + \"` label will not be added.\");\n+                }\n@@ -173,0 +183,7 @@\n+    private void upgradeLabelsToGroups(PullRequest pr, PullRequestBot bot) {\n+        Set<String> oldLabels = new HashSet<>(pr.labelNames());\n+        Set<String> newLabels = new HashSet<>(pr.labelNames());\n+        newLabels = bot.labelConfiguration().upgradeLabelsToGroups(newLabels);\n+        syncLabels(pr, oldLabels, newLabels, log);\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelCommand.java","additions":24,"deletions":7,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+\n@@ -40,0 +41,3 @@\n+import static org.openjdk.skara.bots.pr.CheckRun.findComment;\n+import static org.openjdk.skara.bots.pr.CheckRun.syncLabels;\n+\n@@ -44,0 +48,1 @@\n+    private static final String AUTO_LABEL_ADDITIONAL_COMMENT_MARKER = \"<!-- PullRequest Bot auto label additional comment '%s' -->\";\n@@ -47,1 +52,1 @@\n-            ZonedDateTime prUpdatedAt) {\n+                    ZonedDateTime prUpdatedAt) {\n@@ -61,7 +66,0 @@\n-    static Optional<Comment> findComment(List<Comment> comments, String marker, PullRequest pr) {\n-        var self = pr.repository().forge().currentUser();\n-        return comments.stream()\n-                .filter(comment -> comment.author().equals(self))\n-                .filter(comment -> comment.body().contains(marker))\n-                .findAny();\n-    }\n@@ -69,1 +67,1 @@\n-    private void updateLabelMessage(List<Comment> comments, List<String> newLabels, String commitHash, boolean autoLabeled) {\n+    private void updateLabelMessage(List<Comment> comments, List<String> newLabels, String commitHash) {\n@@ -81,38 +79,18 @@\n-        if (autoLabeled) {\n-            if (newLabels.isEmpty()) {\n-                message.append(\"To determine the appropriate audience for reviewing this pull request, one or more \");\n-                message.append(\"labels corresponding to different subsystems will normally be applied automatically. \");\n-                message.append(\"However, no automatic labelling rule matches the changes in this pull request. \");\n-                message.append(\"In order to have an \\\"RFR\\\" email sent to the correct mailing list, you will \");\n-                message.append(\"need to add one or more applicable labels manually using the \");\n-                message.append(\"[\/label](https:\/\/wiki.openjdk.org\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/label)\");\n-                message.append(\" pull request command.\\n\\n\");\n-                message.append(\"<details>\\n\");\n-                message.append(\"<summary>Applicable Labels<\/summary>\\n\");\n-                message.append(\"<br>\\n\");\n-                message.append(\"\\n\");\n-                bot.labelConfiguration().allowed()\n-                        .stream()\n-                        .sorted()\n-                        .forEach(label -> message.append(\"- `\" + label + \"`\\n\"));\n-                message.append(\"\\n\");\n-                message.append(\"<\/details>\");\n-            } else {\n-                message.append(\"The following label\");\n-                if (newLabels.size() > 1) {\n-                    message.append(\"s\");\n-                }\n-                message.append(\" will be automatically applied to this pull request:\\n\\n\");\n-                newLabels.stream()\n-                        .sorted()\n-                        .forEach(label -> message.append(\"- `\" + label + \"`\\n\"));\n-                message.append(\"\\n\");\n-                message.append(\"When this pull request is ready to be reviewed, an \\\"RFR\\\" email will be sent to the \");\n-                message.append(\"corresponding mailing list\");\n-                if (newLabels.size() > 1) {\n-                    message.append(\"s\");\n-                }\n-                message.append(\". If you would like to change these labels, use the \");\n-                message.append(\"[\/label](https:\/\/wiki.openjdk.org\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/label)\");\n-                message.append(\" pull request command.\");\n-            }\n+        if (newLabels.isEmpty()) {\n+            message.append(\"To determine the appropriate audience for reviewing this pull request, one or more \");\n+            message.append(\"labels corresponding to different subsystems will normally be applied automatically. \");\n+            message.append(\"However, no automatic labelling rule matches the changes in this pull request. \");\n+            message.append(\"In order to have an \\\"RFR\\\" email sent to the correct mailing list, you will \");\n+            message.append(\"need to add one or more applicable labels manually using the \");\n+            message.append(\"[\/label](https:\/\/wiki.openjdk.org\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/label)\");\n+            message.append(\" pull request command.\\n\\n\");\n+            message.append(\"<details>\\n\");\n+            message.append(\"<summary>Applicable Labels<\/summary>\\n\");\n+            message.append(\"<br>\\n\");\n+            message.append(\"\\n\");\n+            bot.labelConfiguration().allowed()\n+                    .stream()\n+                    .sorted()\n+                    .forEach(label -> message.append(\"- `\" + label + \"`\\n\"));\n+            message.append(\"\\n\");\n+            message.append(\"<\/details>\");\n@@ -120,1 +98,17 @@\n-            message.append(\"A manual label command was issued before auto-labeling, so auto-labeling was skipped.\");\n+            message.append(\"The following label\");\n+            if (newLabels.size() > 1) {\n+                message.append(\"s\");\n+            }\n+            message.append(\" will be automatically applied to this pull request:\\n\\n\");\n+            newLabels.stream()\n+                    .sorted()\n+                    .forEach(label -> message.append(\"- `\" + label + \"`\\n\"));\n+            message.append(\"\\n\");\n+            message.append(\"When this pull request is ready to be reviewed, an \\\"RFR\\\" email will be sent to the \");\n+            message.append(\"corresponding mailing list\");\n+            if (newLabels.size() > 1) {\n+                message.append(\"s\");\n+            }\n+            message.append(\". If you would like to change these labels, use the \");\n+            message.append(\"[\/label](https:\/\/wiki.openjdk.org\/display\/SKARA\/Pull+Request+Commands#PullRequestCommands-\/label)\");\n+            message.append(\" pull request command.\");\n@@ -134,1 +128,0 @@\n-            bot.setAutoLabelled(pr);\n@@ -138,4 +131,4 @@\n-        \/\/ If the label comment can be found, mark the pr as auto labelled\n-        if (findComment(prComments(), INITIAL_LABEL_MESSAGE, pr).isPresent()) {\n-            bot.setAutoLabelled(pr);\n-        }\n+        var comments = prComments();\n+        var initialLabelComment = findComment(comments, INITIAL_LABEL_MESSAGE, pr);\n+        Set<String> oldLabels = new HashSet<>(pr.labelNames());\n+        Set<String> newLabels = new HashSet<>(pr.labelNames());\n@@ -143,2 +136,2 @@\n-        \/\/ Updating labels when new files are touched\n-        if (bot.isAutoLabelled(pr)) {\n+        \/\/ If the initial label comment can be found,Updating labels when new files are touched\n+        if (initialLabelComment.isPresent()) {\n@@ -146,2 +139,0 @@\n-                var oldLabels = new HashSet<>(pr.labelNames());\n-                var newLabels = new HashSet<>(pr.labelNames());\n@@ -149,9 +140,6 @@\n-                var labelComment = findComment(prComments(), INITIAL_LABEL_MESSAGE, pr);\n-\n-                if (labelComment.isPresent()) {\n-                    var autoLabeledHashOpt = autoLabeledHash(prComments(), pr);\n-                    if (autoLabeledHashOpt.isPresent()) {\n-                        var evaluatedCommitHash = autoLabeledHashOpt.get();\n-                        var changedFiles = PullRequestUtils.changedFiles(pr, localRepo, new Hash(evaluatedCommitHash));\n-                        var newLabelsNeedToBeAdded = bot.labelConfiguration().label(changedFiles);\n-                        newLabels.addAll(newLabelsNeedToBeAdded);\n+                var autoLabeledHashOpt = autoLabeledHash(comments, pr);\n+                if (autoLabeledHashOpt.isPresent()) {\n+                    var evaluatedCommitHash = autoLabeledHashOpt.get();\n+                    var changedFiles = PullRequestUtils.changedFiles(pr, localRepo, new Hash(evaluatedCommitHash));\n+                    var newLabelsNeedToBeAdded = bot.labelConfiguration().label(changedFiles);\n+                    newLabels.addAll(newLabelsNeedToBeAdded);\n@@ -159,3 +147,1 @@\n-                        var upgradedLabels = bot.labelConfiguration().upgradeLabelsToGroups(newLabels);\n-                        newLabels.addAll(upgradedLabels);\n-                        newLabels.removeIf(label -> !upgradedLabels.contains(label));\n+                    newLabels = bot.labelConfiguration().upgradeLabelsToGroups(newLabels);\n@@ -163,6 +149,1 @@\n-                        for (var newLabel : newLabels) {\n-                            if (!oldLabels.contains(newLabel)) {\n-                                log.info(\"Adding label \" + newLabel);\n-                                pr.addLabel(newLabel);\n-                            }\n-                        }\n+                    syncLabels(pr, oldLabels, newLabels, log);\n@@ -170,14 +151,4 @@\n-                        for (var oldLabel : oldLabels) {\n-                            if (!newLabels.contains(oldLabel)) {\n-                                log.info(\"Removing label \" + oldLabel);\n-                                pr.removeLabel(oldLabel);\n-                            }\n-                        }\n-\n-                        pr.updateComment(labelComment.get().id(), labelComment.get().body().replaceAll(\n-                                \"(<!-- PullRequest Bot label commit ')[^']*(' -->)\",\n-                                \"$1\" + pr.headHash().toString() + \"$2\"));\n-                    } else {\n-                        \/\/ If auto label comment is present but auto label hash isn't present, mark the headHash as handled.\n-                        pr.updateComment(labelComment.get().id(),\n-                                labelComment.get().body() + \"\\n\" + String.format(LABEL_COMMIT_MARKER, pr.headHash().toString()));\n+                    \/\/ The labels actually added\n+                    newLabels.removeAll(oldLabels);\n+                    if (!newLabels.isEmpty()) {\n+                        addLabelAutoUpdateAdditionalComment(comments, new ArrayList<>(newLabels), pr.headHash().hex());\n@@ -185,0 +156,4 @@\n+\n+                    pr.updateComment(initialLabelComment.get().id(), initialLabelComment.get().body().replaceAll(\n+                            \"(<!-- PullRequest Bot label commit ')[^']*(' -->)\",\n+                            \"$1\" + pr.headHash().toString() + \"$2\"));\n@@ -186,1 +161,3 @@\n-                    log.severe(\"This pr is marked as auto labeled but no auto label comment found, pr id: \" + pr.id());\n+                    \/\/ If auto label comment is present but auto label hash isn't present, mark the headHash as handled.\n+                    pr.updateComment(initialLabelComment.get().id(),\n+                            initialLabelComment.get().body() + \"\\n\" + String.format(LABEL_COMMIT_MARKER, pr.headHash().toString()));\n@@ -196,21 +173,0 @@\n-        var comments = prComments();\n-        var labelNames = new HashSet<>(pr.labelNames());\n-        var manuallyAdded = LabelTracker.currentAdded(pr.repository().forge().currentUser(), comments);\n-        var manuallyRemoved = LabelTracker.currentRemoved(pr.repository().forge().currentUser(), comments);\n-\n-        \/\/ If a manual label command has been issued before we have done any labeling,\n-        \/\/ that is considered to be a request to override any automatic labelling\n-        if (manuallyAdded.size() > 0 || manuallyRemoved.size() > 0) {\n-            bot.setAutoLabelled(pr);\n-            updateLabelMessage(comments, List.of(), pr.headHash().toString(), false);\n-            return needsRfrCheck(labelNames);\n-        }\n-\n-        \/\/ If the PR already has one of the allowed labels, that is also considered to override automatic labelling\n-        var existingAllowed = new HashSet<>(labelNames);\n-        existingAllowed.retainAll(bot.labelConfiguration().allowed());\n-        if (!existingAllowed.isEmpty()) {\n-            bot.setAutoLabelled(pr);\n-            return needsRfrCheck(labelNames);\n-        }\n-\n@@ -219,21 +175,5 @@\n-            var newLabels = getLabels(localRepo);\n-            var currentLabels = pr.labelNames().stream()\n-                                  .filter(key -> bot.labelConfiguration().allowed().contains(key))\n-                                  .collect(Collectors.toSet());\n-\n-\n-            \/\/ Add all labels not already set that are not manually removed\n-            var labelsToAdd = newLabels.stream()\n-                     .filter(label -> !currentLabels.contains(label))\n-                     .filter(label -> !manuallyRemoved.contains(label))\n-                                       .collect(Collectors.toList());\n-            labelsToAdd.forEach(pr::addLabel);\n-\n-            \/\/ Remove set labels no longer present unless it has been manually added\n-            currentLabels.stream()\n-                         .filter(label -> !newLabels.contains(label))\n-                         .filter(label -> !manuallyAdded.contains(label))\n-                         .forEach(pr::removeLabel);\n-            bot.setAutoLabelled(pr);\n-\n-            updateLabelMessage(comments, labelsToAdd, pr.headHash().toString(), true);\n+            var labelsToAdd = getLabels(localRepo);\n+            newLabels.addAll(labelsToAdd);\n+            newLabels = bot.labelConfiguration().upgradeLabelsToGroups(newLabels);\n+            syncLabels(pr, oldLabels, newLabels, log);\n+            updateLabelMessage(comments, new ArrayList<>(labelsToAdd), pr.headHash().toString());\n@@ -243,1 +183,23 @@\n-        return needsRfrCheck(labelNames);\n+        return needsRfrCheck(newLabels);\n+    }\n+\n+    void addLabelAutoUpdateAdditionalComment(List<Comment> comments, List<String> labelsAdded, String commitHash) {\n+        if (findComment(comments, String.format(AUTO_LABEL_ADDITIONAL_COMMENT_MARKER, commitHash), pr).isPresent()) {\n+            \/\/ Only add the comment once\n+            return;\n+        }\n+        var message = new StringBuilder();\n+        message.append(\"@\");\n+        message.append(pr.author().username());\n+        message.append(\" \");\n+        if (!labelsAdded.isEmpty()) {\n+            Collections.sort(labelsAdded);\n+            message.append(labelsAdded.stream()\n+                    .map(label -> \"`\" + label + \"`\")\n+                    .collect(Collectors.joining(\", \")));\n+            message.append(labelsAdded.size() == 1 ? \" has\" : \" have\");\n+            message.append(\" been added to this pr based on the files touched in your new commit(s).\");\n+        }\n+        message.append(\"\\n\");\n+        message.append(String.format(AUTO_LABEL_ADDITIONAL_COMMENT_MARKER, commitHash));\n+        pr.addComment(message.toString());\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerWorkItem.java","additions":95,"deletions":133,"binary":false,"changes":228,"status":"modified"},{"patch":"@@ -61,1 +61,0 @@\n-    private final Set<String> autoLabelled;\n@@ -143,1 +142,0 @@\n-        autoLabelled = new HashSet<>();\n@@ -371,12 +369,0 @@\n-    public boolean isAutoLabelled(PullRequest pr) {\n-        synchronized (autoLabelled) {\n-            return autoLabelled.contains(pr.id());\n-        }\n-    }\n-\n-    public void setAutoLabelled(PullRequest pr) {\n-        synchronized (autoLabelled) {\n-            autoLabelled.add(pr.id());\n-        }\n-    }\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -193,1 +193,0 @@\n-                bot.setAutoLabelled(pr);\n@@ -197,4 +196,0 @@\n-            if (!bot.isAutoLabelled(pr)) {\n-                return List.of(new LabelerWorkItem(bot, prId, errorHandler, triggerUpdatedAt));\n-            }\n-\n@@ -261,3 +256,0 @@\n-            if (command.name().equals(\"label\") || command.name().equals(\"cc\")) {\n-                return List.of(CheckWorkItem.fromWorkItem(bot, prId, errorHandler, triggerUpdatedAt), new LabelerWorkItem(bot, prId, errorHandler, triggerUpdatedAt));\n-            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestCommandWorkItem.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -277,1 +277,1 @@\n-            assertTrue(pr.labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/ApprovalAndApproveCommandTests.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-            \/\/ The bot will not add any label automatically\n+            \/\/ Although manually added label 1, the auto labeling should still happen\n@@ -234,2 +234,2 @@\n-            assertLastCommentContains(pr, \"A manual label command was issued before auto-labeling, so auto-labeling was skipped.\");\n-            assertEquals(Set.of(\"1\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            assertLastCommentContains(pr, \"The following label will be automatically applied to this pull request:\");\n+            assertEquals(Set.of(\"group\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n@@ -245,1 +245,0 @@\n-            \/\/ The bot will still not do any automatic labelling\n@@ -247,1 +246,1 @@\n-            assertEquals(Set.of(\"1\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            assertEquals(Set.of(\"group\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n@@ -252,1 +251,1 @@\n-            assertLastCommentContains(pr, \"The `group` label was successfully added.\");\n+            assertLastCommentContains(pr, \"The `group` label was already applied.\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTests.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-            assertEquals(Set.of(), new HashSet<>(pr.labelNames()));\n+            assertEquals(Set.of(), new HashSet<>(pr.store().labelNames()));\n@@ -122,1 +122,1 @@\n-            assertEquals(Set.of(\"rfr\", \"test1\"), new HashSet<>(pr.labelNames()));\n+            assertEquals(Set.of(\"rfr\", \"test1\"), new HashSet<>(pr.store().labelNames()));\n@@ -173,1 +173,1 @@\n-            assertEquals(Set.of(\"rfr\", \"test1\"), new HashSet<>(pr.labelNames()));\n+            assertEquals(Set.of(\"rfr\", \"test1\"), new HashSet<>(pr.store().labelNames()));\n@@ -215,1 +215,1 @@\n-            \/\/ Issue a manual label command\n+            \/\/ Issue a manual label command, this shouldn't affect the auto labeling\n@@ -219,1 +219,1 @@\n-            \/\/ Check the status - there should still only be a test2 label\n+            \/\/ Check the status - there should be test1 and test2\n@@ -221,1 +221,1 @@\n-            assertEquals(Set.of(\"rfr\", \"test2\"), new HashSet<>(pr.labelNames()));\n+            assertEquals(Set.of(\"rfr\", \"test2\", \"test1\"), new HashSet<>(pr.store().labelNames()));\n@@ -263,1 +263,1 @@\n-            \/\/ Manually set a label\n+            \/\/ Manually set a label shouldn't affect auto labeling\n@@ -266,1 +266,1 @@\n-            \/\/ Check the status - there should still only be a test2 label\n+            \/\/ Check the status - there should be test1 and test2\n@@ -268,1 +268,1 @@\n-            assertEquals(Set.of(\"rfr\", \"test2\"), new HashSet<>(pr.labelNames()));\n+            assertEquals(Set.of(\"rfr\", \"test2\", \"test1\"), new HashSet<>(pr.store().labelNames()));\n@@ -315,1 +315,1 @@\n-            assertEquals(Set.of(\"rfr\", \"test1\", \"test42\"), new HashSet<>(pr.labelNames()));\n+            assertEquals(Set.of(\"rfr\", \"test1\", \"test42\"), new HashSet<>(pr.store().labelNames()));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerTests.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.util.Optional;\n@@ -33,0 +34,1 @@\n+    Optional<String> groupLabel(String label);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfiguration.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import java.util.Optional;\n@@ -78,0 +79,5 @@\n+\n+    @Override\n+    public Optional<String> groupLabel(String label) {\n+        return labelConfiguration().groupLabel(label);\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationHostedRepository.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -170,0 +170,9 @@\n+\n+    public Optional<String> groupLabel(String label) {\n+        for (var group : groups.entrySet()) {\n+            if (group.getValue().contains(label)) {\n+                return Optional.of(group.getKey());\n+            }\n+        }\n+        return Optional.empty();\n+    }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/LabelConfigurationJson.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -54,1 +54,0 @@\n-    private List<Label> labels;\n@@ -319,13 +318,0 @@\n-    \/**\n-     * Mimic GitHub\/GitLab where the labels are fetched lazily and cached.\n-     * In GitLabMergeRequest, the labels are actually part of the main json, but\n-     * are still re-fetched once on the first call to labels().\n-     *\/\n-    @Override\n-    public List<Label> labels() {\n-        if (labels == null) {\n-            labels = store().labels().keySet().stream().map(Label::new).collect(Collectors.toList());\n-        }\n-        return labels;\n-    }\n-\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestPullRequest.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"}]}