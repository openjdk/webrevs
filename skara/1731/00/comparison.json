{"files":[{"patch":"@@ -79,91 +79,93 @@\n-        if (bot.checkContributorStatusForBackportCommand() && censusInstance.contributor(command.user()).isEmpty()) {\n-            printInvalidUserWarning(bot, reply);\n-            return;\n-        }\n-\n-        if (pr.isClosed() && !pr.labelNames().contains(\"integrated\")) {\n-            reply.println(\"`\/backport` command can not be used in a closed but not integrated pull request\");\n-            return;\n-        }\n-\n-        var args = command.args();\n-        if (args.isBlank()) {\n-            showHelpInPR(reply);\n-            return;\n-        }\n-\n-        var parts = args.split(\" \");\n-\n-        \/\/ Preprocess args to support \"repo:branch\" argument\n-        if (parts[0].equals(\"disable\")) {\n-            if (parts.length == 2 && parts[1].contains(\":\")) {\n-                List<String> tempList = new ArrayList<>();\n-                tempList.add(\"disable\");\n-                tempList.addAll(Arrays.asList(parts[1].split(\":\")));\n-                parts = tempList.toArray(new String[0]);\n-            }\n-        } else {\n-            if (parts.length == 1 && parts[0].contains(\":\")) {\n-                parts = parts[0].split(\":\");\n-            }\n-        }\n-\n-        boolean argIsValid = parts[0].equals(\"disable\") ? parts.length == 2 || parts.length == 3 : parts.length <= 2;\n-        if (!argIsValid) {\n-            showHelpInPR(reply);\n-            return;\n-        }\n-\n-        if (parts[0].equals(\"disable\")) {\n-            \/\/ Remove label\n-            var targetRepo = getTargetRepo(bot, parts[1], reply);\n-            if (targetRepo == null) {\n-                return;\n-            }\n-            var targetRepoName = targetRepo.name();\n-\n-            var targetBranch = getTargetBranch(parts, 2, targetRepo, reply);\n-            if (targetBranch == null) {\n-                return;\n-            }\n-            var targetBranchName = targetBranch.name();\n-\n-            var backportLabel = generateBackportLabel(targetRepoName, targetBranchName);\n-            if (pr.labelNames().contains(backportLabel)) {\n-                labelsToRemove.add(backportLabel);\n-                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was successfully disabled.\");\n-            } else {\n-                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was already disabled.\");\n-            }\n-        } else {\n-            \/\/ Get target repo\n-            var targetRepo = getTargetRepo(bot, parts[0], reply);\n-            if (targetRepo == null) {\n-                return;\n-            }\n-            var targetRepoName = targetRepo.name();\n-\n-            \/\/ Get target branch\n-            var targetBranch = getTargetBranch(parts, 1, targetRepo, reply);\n-            if (targetBranch == null) {\n-                return;\n-            }\n-            var targetBranchName = targetBranch.name();\n-\n-            if (!targetRepo.canCreatePullRequest(command.user())) {\n-                reply.println(INSUFFICIENT_ACCESS_WARNING);\n-                return;\n-            }\n-\n-            \/\/ Add label\n-            var backportLabel = generateBackportLabel(targetRepoName, targetBranchName);\n-            if (pr.labelNames().contains(backportLabel)) {\n-                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` has already been enabled.\");\n-            } else {\n-                labelsToAdd.add(backportLabel);\n-                reply.print(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was successfully enabled and will be performed once this pull request has been integrated.\");\n-                reply.println(\" Further instructions will be provided at that time.\");\n-                reply.println(\"<!-- add backport \" + targetRepoName + \":\" + targetBranchName + \" -->\");\n-                reply.println(\"<!-- \" + command.user().username() + \" -->\");\n-            }\n-        }\n+        reply.println(\"The command `backport` can only be used in a pull request that has been integrated.\");\n+\n+\/\/        if (bot.checkContributorStatusForBackportCommand() && censusInstance.contributor(command.user()).isEmpty()) {\n+\/\/            printInvalidUserWarning(bot, reply);\n+\/\/            return;\n+\/\/        }\n+\/\/\n+\/\/        if (pr.isClosed() && !pr.labelNames().contains(\"integrated\")) {\n+\/\/            reply.println(\"`\/backport` command can not be used in a closed but not integrated pull request\");\n+\/\/            return;\n+\/\/        }\n+\/\/\n+\/\/        var args = command.args();\n+\/\/        if (args.isBlank()) {\n+\/\/            showHelpInPR(reply);\n+\/\/            return;\n+\/\/        }\n+\/\/\n+\/\/        var parts = args.split(\" \");\n+\/\/\n+\/\/        \/\/ Preprocess args to support \"repo:branch\" argument\n+\/\/        if (parts[0].equals(\"disable\")) {\n+\/\/            if (parts.length == 2 && parts[1].contains(\":\")) {\n+\/\/                List<String> tempList = new ArrayList<>();\n+\/\/                tempList.add(\"disable\");\n+\/\/                tempList.addAll(Arrays.asList(parts[1].split(\":\")));\n+\/\/                parts = tempList.toArray(new String[0]);\n+\/\/            }\n+\/\/        } else {\n+\/\/            if (parts.length == 1 && parts[0].contains(\":\")) {\n+\/\/                parts = parts[0].split(\":\");\n+\/\/            }\n+\/\/        }\n+\/\/\n+\/\/        boolean argIsValid = parts[0].equals(\"disable\") ? parts.length == 2 || parts.length == 3 : parts.length <= 2;\n+\/\/        if (!argIsValid) {\n+\/\/            showHelpInPR(reply);\n+\/\/            return;\n+\/\/        }\n+\/\/\n+\/\/        if (parts[0].equals(\"disable\")) {\n+\/\/            \/\/ Remove label\n+\/\/            var targetRepo = getTargetRepo(bot, parts[1], reply);\n+\/\/            if (targetRepo == null) {\n+\/\/                return;\n+\/\/            }\n+\/\/            var targetRepoName = targetRepo.name();\n+\/\/\n+\/\/            var targetBranch = getTargetBranch(parts, 2, targetRepo, reply);\n+\/\/            if (targetBranch == null) {\n+\/\/                return;\n+\/\/            }\n+\/\/            var targetBranchName = targetBranch.name();\n+\/\/\n+\/\/            var backportLabel = generateBackportLabel(targetRepoName, targetBranchName);\n+\/\/            if (pr.labelNames().contains(backportLabel)) {\n+\/\/                labelsToRemove.add(backportLabel);\n+\/\/                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was successfully disabled.\");\n+\/\/            } else {\n+\/\/                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was already disabled.\");\n+\/\/            }\n+\/\/        } else {\n+\/\/            \/\/ Get target repo\n+\/\/            var targetRepo = getTargetRepo(bot, parts[0], reply);\n+\/\/            if (targetRepo == null) {\n+\/\/                return;\n+\/\/            }\n+\/\/            var targetRepoName = targetRepo.name();\n+\/\/\n+\/\/            \/\/ Get target branch\n+\/\/            var targetBranch = getTargetBranch(parts, 1, targetRepo, reply);\n+\/\/            if (targetBranch == null) {\n+\/\/                return;\n+\/\/            }\n+\/\/            var targetBranchName = targetBranch.name();\n+\/\/\n+\/\/            if (!targetRepo.canCreatePullRequest(command.user())) {\n+\/\/                reply.println(INSUFFICIENT_ACCESS_WARNING);\n+\/\/                return;\n+\/\/            }\n+\/\/\n+\/\/            \/\/ Add label\n+\/\/            var backportLabel = generateBackportLabel(targetRepoName, targetBranchName);\n+\/\/            if (pr.labelNames().contains(backportLabel)) {\n+\/\/                reply.println(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` has already been enabled.\");\n+\/\/            } else {\n+\/\/                labelsToAdd.add(backportLabel);\n+\/\/                reply.print(\"Backport for repo `\" + targetRepoName + \"` on branch `\" + targetBranchName + \"` was successfully enabled and will be performed once this pull request has been integrated.\");\n+\/\/                reply.println(\" Further instructions will be provided at that time.\");\n+\/\/                reply.println(\"<!-- add backport \" + targetRepoName + \":\" + targetBranchName + \" -->\");\n+\/\/                reply.println(\"<!-- \" + command.user().username() + \" -->\");\n+\/\/            }\n+\/\/        }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/BackportCommand.java","additions":93,"deletions":91,"binary":false,"changes":184,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import org.junit.jupiter.api.Disabled;\n@@ -38,0 +39,1 @@\n+@Disabled\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/BackportPRCommandTests.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,1 +133,2 @@\n-            PullRequestAsserts.assertLastCommentContains(pr, \"Backport for repo `jdk17u-dev` on branch `master` was successfully enabled\");\n+\/\/            PullRequestAsserts.assertLastCommentContains(pr, \"Backport for repo `jdk17u-dev` on branch `master` was successfully enabled\");\n+            PullRequestAsserts.assertLastCommentContains(pr, \"The command `backport` can only be used in a pull request that has been integrated.\");\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CommitCommandTests.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}