{"files":[{"patch":"@@ -55,1 +55,0 @@\n-    private final JbsBackport jbsBackport;\n@@ -93,1 +92,1 @@\n-                  JbsBackport jbsBackport, boolean prOnly, boolean repoOnly, String buildName,\n+                  boolean prOnly, boolean repoOnly, String buildName,\n@@ -105,1 +104,0 @@\n-        this.jbsBackport = jbsBackport;\n@@ -310,1 +308,1 @@\n-                                    issue = jbsBackport.createBackport(issue, requestedVersion, username.orElse(null), defaultSecurity(branch));\n+                                    issue = Backports.createBackport(issue, requestedVersion, username.orElse(null), defaultSecurity(branch));\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -164,1 +164,0 @@\n-        var jbsBackport = new JbsBackport(issueProject.issueTracker());\n@@ -166,1 +165,1 @@\n-                setFixVersion, fixVersions, altFixVersions, jbsBackport, prOnly,\n+                setFixVersion, fixVersions, altFixVersions, prOnly,\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.notify.issue;\n-\n-import org.openjdk.skara.issuetracker.*;\n-import org.openjdk.skara.json.JSON;\n-import org.openjdk.skara.network.*;\n-\n-import java.net.URI;\n-import java.util.*;\n-import java.util.stream.Collectors;\n-\n-public class JbsBackport {\n-    private final IssueTracker.CustomEndpoint backportEndpoint;\n-\n-    JbsBackport(IssueTracker tracker) {\n-        this.backportEndpoint = tracker.lookupCustomEndpoint(\"\/rest\/jbs\/1.0\/backport\/\").orElseThrow(() ->\n-            new IllegalArgumentException(\"Issue tracker does not support backport endpoint\")\n-        );\n-    }\n-\n-    IssueTrackerIssue createBackport(IssueTrackerIssue primary, String fixVersion, String assignee, String defaultSecurity) {\n-        var body = JSON.object()\n-                       .put(\"parentIssueKey\", primary.id())\n-                       .put(\"fixVersion\", fixVersion);\n-\n-        if (assignee != null) {\n-            body = body.put(\"assignee\", assignee);\n-        }\n-\n-        if (primary.properties().containsKey(\"security\")) {\n-            body = body.put(\"level\", primary.properties().get(\"security\").asString());\n-        } else if (defaultSecurity != null) {\n-            body = body.put(\"level\", defaultSecurity);\n-        }\n-\n-        var response = backportEndpoint.post()\n-                                       .body(body)\n-                                       .execute();\n-        var issue = primary.project().issue(response.get(\"key\").asString()).orElseThrow();\n-\n-        \/\/ The backport should not have any labels set - if it does, clear them\n-        var labels = issue.labelNames();\n-        if (!labels.isEmpty()) {\n-            issue.setLabels(List.of());\n-        }\n-\n-        return issue;\n-    }\n-}\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsBackport.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"},{"patch":"@@ -1,76 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.bots.notify.issue;\n-\n-import org.openjdk.skara.host.Credential;\n-import org.openjdk.skara.issuetracker.IssueTracker;\n-import org.openjdk.skara.issuetracker.IssueTrackerFactory;\n-import org.openjdk.skara.json.JSON;\n-import org.openjdk.skara.json.JSONObject;\n-import org.openjdk.skara.json.JSONValue;\n-import org.openjdk.skara.network.URIBuilder;\n-import org.openjdk.skara.proxy.HttpProxy;\n-import org.openjdk.skara.test.TestProperties;\n-import org.openjdk.skara.test.EnabledIfTestProperties;\n-\n-import java.util.*;\n-\n-import org.junit.jupiter.api.BeforeAll;\n-import org.junit.jupiter.api.Test;\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-\n-class JbsBackportIntegrationTests {\n-    private static TestProperties props;\n-    private static IssueTracker tracker;\n-\n-    @BeforeAll\n-    static void beforeAll() {\n-        props = TestProperties.load();\n-        if (props.contains(\"jira.uri\", \"jira.pat\")) {\n-            var factory = IssueTrackerFactory.getIssueTrackerFactories().stream().filter(f -> f.name().equals(\"jira\")).findFirst();\n-            if (factory.isEmpty()) {\n-                throw new IllegalStateException(\"'jira.uri' and 'jira.pat' has been configured but could not find IssueTrackerFactory for 'jira'\");\n-            }\n-            HttpProxy.setup();\n-            var uri = URIBuilder.base(props.get(\"jira.uri\")).build();\n-            var credential = new Credential(\"\", \"Bearer \" + props.get(\"jira.pat\"));\n-            tracker = factory.get().create(uri, credential, new JSONObject());\n-        }\n-    }\n-\n-    @Test\n-    @EnabledIfTestProperties({\"jira.uri\", \"jira.pat\"})\n-    void testBackportCreation() {\n-        var project = tracker.project(\"SKARA\");\n-        var issue = project.createIssue(\"Issue to backport\", List.of(\"This is just a test issue for testing backport\"), new HashMap<String, JSONValue>());\n-\n-        var jbsBackport = new JbsBackport(tracker);\n-        var backport = jbsBackport.createBackport(issue, \"1.0\", \"duke\", null);\n-        assertNotEquals(issue.id(), backport.id());\n-        var backportOfLink = backport.links().stream().filter(l -> l.relationship().equals(Optional.of(\"backport of\"))).findFirst();\n-        assertTrue(backportOfLink.isPresent());\n-        assertTrue(backportOfLink.get().issue().isPresent());\n-        assertEquals(issue.id(), backportOfLink.get().issue().get().id());\n-    }\n-}\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/JbsBackportIntegrationTests.java","additions":0,"deletions":76,"binary":false,"changes":76,"status":"deleted"},{"patch":"@@ -28,0 +28,2 @@\n+        requires 'org.openjdk.skara.network'\n+        requires 'org.openjdk.skara.proxy'\n@@ -38,0 +40,2 @@\n+    testImplementation project(':network')\n+    testImplementation project(':proxy')\n","filename":"jbs\/build.gradle","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import org.openjdk.skara.json.JSON;\n@@ -543,0 +544,43 @@\n+\n+    public static IssueTrackerIssue createBackport(IssueTrackerIssue primary, String fixVersion) {\n+        return createBackport(primary, fixVersion, null);\n+    }\n+\n+    public static IssueTrackerIssue createBackport(IssueTrackerIssue primary, String fixVersion, String assignee) {\n+        return createBackport(primary, fixVersion, assignee, null);\n+    }\n+\n+    public static IssueTrackerIssue createBackport(IssueTrackerIssue primary, String fixVersion, String assignee, String defaultSecurity) {\n+        var backportEndpoint = primary.project()\n+                                      .issueTracker()\n+                                      .lookupCustomEndpoint(\"\/rest\/jbs\/1.0\/backport\/\")\n+                                      .orElseThrow(() ->\n+            new IllegalArgumentException(\"Issue tracker does not support backport endpoint\")\n+        );\n+        var body = JSON.object()\n+                       .put(\"parentIssueKey\", primary.id())\n+                       .put(\"fixVersion\", fixVersion);\n+\n+        if (assignee != null) {\n+            body = body.put(\"assignee\", assignee);\n+        }\n+\n+        if (primary.properties().containsKey(\"security\")) {\n+            body = body.put(\"level\", primary.properties().get(\"security\").asString());\n+        } else if (defaultSecurity != null) {\n+            body = body.put(\"level\", defaultSecurity);\n+        }\n+\n+        var response = backportEndpoint.post()\n+                                       .body(body)\n+                                       .execute();\n+        var issue = primary.project().issue(response.get(\"key\").asString()).orElseThrow();\n+\n+        \/\/ The backport should not have any labels set - if it does, clear them\n+        var labels = issue.labelNames();\n+        if (!labels.isEmpty()) {\n+            issue.setLabels(List.of());\n+        }\n+\n+        return issue;\n+    }\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.jbs;\n+\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.issuetracker.IssueTracker;\n+import org.openjdk.skara.issuetracker.IssueTrackerFactory;\n+import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.json.JSONObject;\n+import org.openjdk.skara.json.JSONValue;\n+import org.openjdk.skara.network.URIBuilder;\n+import org.openjdk.skara.proxy.HttpProxy;\n+import org.openjdk.skara.test.TestProperties;\n+import org.openjdk.skara.test.EnabledIfTestProperties;\n+\n+import java.util.*;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\n+class BackportsIntegrationTests {\n+    private static TestProperties props;\n+    private static IssueTracker tracker;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        props = TestProperties.load();\n+        if (props.contains(\"jbs.uri\", \"jbs.pat\")) {\n+            var factory = IssueTrackerFactory.getIssueTrackerFactories().stream().filter(f -> f.name().equals(\"jira\")).findFirst();\n+            if (factory.isEmpty()) {\n+                throw new IllegalStateException(\"'jbs.uri' and 'jbs.pat' has been configured but could not find IssueTrackerFactory for 'jira'\");\n+            }\n+            HttpProxy.setup();\n+            var uri = URIBuilder.base(props.get(\"jbs.uri\")).build();\n+            var credential = new Credential(\"\", \"Bearer \" + props.get(\"jbs.pat\"));\n+            tracker = factory.get().create(uri, credential, new JSONObject());\n+        }\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"jbs.uri\", \"jbs.pat\"})\n+    void testBackportCreation() {\n+        var project = tracker.project(\"SKARA\");\n+        var issue = project.createIssue(\"Issue to backport\", List.of(\"This is just a test issue for testing backport\"), new HashMap<String, JSONValue>());\n+\n+        var backport = Backports.createBackport(issue, \"1.0\", \"duke\", null);\n+        assertEquals(JSON.of(\"Backport\"), backport.properties().get(\"issuetype\"));\n+        assertEquals(JSON.array().add(\"1.0\"), backport.properties().get(\"fixVersions\"));\n+        assertNotEquals(issue.id(), backport.id());\n+\n+        var backportOfLink = backport.links().stream().filter(l -> l.relationship().equals(Optional.of(\"backport of\"))).findFirst();\n+        assertTrue(backportOfLink.isPresent());\n+        assertTrue(backportOfLink.get().issue().isPresent());\n+        assertEquals(issue.id(), backportOfLink.get().issue().get().id());\n+\n+        issue = project.issue(issue.id()).orElseThrow();\n+        var backportedByLink = issue.links().stream().filter(l -> l.relationship().equals(Optional.of(\"backported by\"))).findFirst();\n+        assertTrue(backportedByLink.isPresent());\n+        assertTrue(backportedByLink.get().issue().isPresent());\n+        assertEquals(backport.id(), backportedByLink.get().issue().get().id());\n+    }\n+}\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/BackportsIntegrationTests.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"}]}