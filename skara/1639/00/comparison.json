{"files":[{"patch":"@@ -83,0 +83,1 @@\n+    private final boolean reviewersCommandIssued;\n@@ -106,0 +107,6 @@\n+        this.reviewersCommandIssued = ReviewersTracker.additionalRequiredReviewers(pr.repository().forge().currentUser(), comments).isPresent();\n+\n+        \/\/ If reviewers command is issued, enable reviewers check for merge pull requests\n+        if (reviewersCommandIssued) {\n+            reviewMerge = MergePullRequestReviewConfiguration.ALWAYS;\n+        }\n@@ -1368,2 +1375,0 @@\n-            var reviewersCommandIssued = ReviewersTracker.additionalRequiredReviewers(pr.repository().forge().currentUser(), comments).isPresent();\n-\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -227,0 +227,68 @@\n+    @Test\n+    void branchMergeWithReviewersCommand(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addCommitter(author.forge().currentUser().id())\n+                    .addReviewer(integrator.forge().currentUser().id());\n+            var mergeBot = PullRequestBot.newBuilder().repo(integrator).censusRepo(censusBuilder.build()).build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make more changes in another branch\n+            var otherHash1 = CheckableRepository.appendAndCommit(localRepo, \"First change in other_\/-1.2\",\n+                    \"First other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash1, author.authenticatedUrl(), \"other_\/-1.2\", true);\n+            var otherHash2 = CheckableRepository.appendAndCommit(localRepo, \"Second change in other_\/-1.2\",\n+                    \"Second other_\/-1.2\\n\\nReviewed-by: integrationreviewer2\");\n+            localRepo.push(otherHash2, author.authenticatedUrl(), \"other_\/-1.2\");\n+\n+            \/\/ Go back to the original master\n+            localRepo.checkout(masterHash, true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var unrelated = Files.writeString(localRepo.root().resolve(\"unrelated.txt\"), \"Unrelated\", StandardCharsets.UTF_8);\n+            localRepo.add(unrelated);\n+            var updatedMaster = localRepo.commit(\"Unrelated\", \"some\", \"some@one\");\n+            localRepo.merge(otherHash2);\n+            localRepo.push(updatedMaster, author.authenticatedUrl(), \"master\");\n+\n+            var mergeHash = localRepo.commit(\"Merge commit\", \"some\", \"some@one\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"Merge \" + author.name() + \":other_\/-1.2\");\n+\n+            pr.addComment(\"\/reviewers 1\");\n+\n+            \/\/ Let the bot check the status\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            assertTrue(pr.store().labelNames().contains(\"clean\"));\n+            assertFalse(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"[ ] Change must be properly reviewed (1 review required, with at least 1 [Reviewer](https:\/\/openjdk.org\/bylaws#reviewer))\"));\n+\n+            \/\/ Approve it\n+            var reviewerPr = integrator.pullRequest(pr.id());\n+            reviewerPr.addReview(Review.Verdict.APPROVED, \"LGTM\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+            assertTrue(pr.store().labelNames().contains(\"ready\"));\n+            assertTrue(pr.store().body().contains(\"[x] Change must be properly reviewed (1 review required, with at least 1 [Reviewer](https:\/\/openjdk.org\/bylaws#reviewer))\"));\n+\n+            \/\/ Push it\n+            pr.addComment(\"\/integrate\");\n+            TestBotRunner.runPeriodicItems(mergeBot);\n+\n+            \/\/ The bot should reply with an ok message\n+            var pushed = pr.comments().stream()\n+                    .filter(comment -> comment.body().contains(\"Pushed as commit\"))\n+                    .count();\n+            assertEquals(1, pushed);\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/MergeTests.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"modified"}]}