{"files":[{"patch":"@@ -155,1 +155,1 @@\n-        var latestAction = List.of(Stream.of(pr.createdAt()),\n+        var latestAction = Stream.of(Stream.of(pr.createdAt()),\n@@ -160,2 +160,2 @@\n-                                   pr.reviewComments().stream()\n-                                     .map(Comment::updatedAt)).stream()\n+                                   pr.reviewCommentsAsComments().stream()\n+                                     .map(Comment::updatedAt))\n","filename":"bots\/bridgekeeper\/src\/main\/java\/org\/openjdk\/skara\/bots\/bridgekeeper\/PullRequestPrunerBot.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -79,0 +79,9 @@\n+    \/**\n+     * Get all file specific comments but potentially without file location data.\n+     * This may save computation and I\/O time if constructing that data is expensive.\n+     * @return\n+     *\/\n+    default List<? extends Comment> reviewCommentsAsComments() {\n+        return reviewComments();\n+    }\n+\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequest.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -87,28 +87,29 @@\n-        var reviews = request.get(\"pulls\/\" + json.get(\"number\").toString() + \"\/reviews\").execute().stream()\n-                             .map(JSONValue::asObject)\n-                             .filter(obj -> !(obj.get(\"state\").asString().equals(\"COMMENTED\") && obj.get(\"body\").asString().isEmpty()))\n-                             .map(obj -> {\n-                                 var reviewer = host.parseUserField(obj);\n-                                 var commitId = obj.get(\"commit_id\");\n-                                 Hash hash = null;\n-                                 if (commitId != null) {\n-                                     hash = new Hash(commitId.asString());\n-                                 }\n-                                 Review.Verdict verdict;\n-                                 switch (obj.get(\"state\").asString()) {\n-                                     case \"APPROVED\":\n-                                         verdict = Review.Verdict.APPROVED;\n-                                         break;\n-                                     case \"CHANGES_REQUESTED\":\n-                                         verdict = Review.Verdict.DISAPPROVED;\n-                                         break;\n-                                     default:\n-                                         verdict = Review.Verdict.NONE;\n-                                         break;\n-                                 }\n-                                 var id = obj.get(\"id\").asInt();\n-                                 var body = obj.get(\"body\").asString();\n-                                 var createdAt = ZonedDateTime.parse(obj.get(\"submitted_at\").asString());\n-                                 return new Review(createdAt, reviewer, verdict, hash, id, body, currentTargetRef);\n-                             })\n-                             .collect(Collectors.toList());\n+        var reviews = request.get(\"pulls\/\" + json.get(\"number\").toString() + \"\/reviews\")\n+                .param(\"per_page\", \"100\").execute().stream()\n+                .map(JSONValue::asObject)\n+                .filter(obj -> !(obj.get(\"state\").asString().equals(\"COMMENTED\") && obj.get(\"body\").asString().isEmpty()))\n+                .map(obj -> {\n+                    var reviewer = host.parseUserField(obj);\n+                    var commitId = obj.get(\"commit_id\");\n+                    Hash hash = null;\n+                    if (commitId != null) {\n+                        hash = new Hash(commitId.asString());\n+                    }\n+                    Review.Verdict verdict;\n+                    switch (obj.get(\"state\").asString()) {\n+                        case \"APPROVED\":\n+                            verdict = Review.Verdict.APPROVED;\n+                            break;\n+                        case \"CHANGES_REQUESTED\":\n+                            verdict = Review.Verdict.DISAPPROVED;\n+                            break;\n+                        default:\n+                            verdict = Review.Verdict.NONE;\n+                            break;\n+                    }\n+                    var id = obj.get(\"id\").asInt();\n+                    var body = obj.get(\"body\").asString();\n+                    var createdAt = ZonedDateTime.parse(obj.get(\"submitted_at\").asString());\n+                    return new Review(createdAt, reviewer, verdict, hash, id, body, currentTargetRef);\n+                })\n+                .collect(Collectors.toList());\n@@ -189,1 +190,1 @@\n-    private ReviewComment parseReviewComment(ReviewComment parent, JSONObject reviewJson) {\n+    private ReviewComment parseReviewComment(ReviewComment parent, JSONObject reviewJson, boolean includeLocationData) {\n@@ -201,1 +202,1 @@\n-        if (reviewJson.get(\"side\").asString().equals(\"LEFT\")) {\n+        if (includeLocationData && reviewJson.get(\"side\").asString().equals(\"LEFT\")) {\n@@ -248,1 +249,1 @@\n-        return parseReviewComment(null, response.asObject());\n+        return parseReviewComment(null, response.asObject(), true);\n@@ -259,1 +260,1 @@\n-        return parseReviewComment(parent, response.asObject());\n+        return parseReviewComment(parent, response.asObject(), true);\n@@ -262,2 +263,1 @@\n-    @Override\n-    public List<ReviewComment> reviewComments() {\n+    public List<ReviewComment> reviewComments(boolean includeLocationData) {\n@@ -265,3 +265,4 @@\n-        var reviewComments = request.get(\"pulls\/\" + json.get(\"number\").toString() + \"\/comments\").execute().stream()\n-                                    .map(JSONValue::asObject)\n-                                    .collect(Collectors.toList());\n+        var reviewComments = request.get(\"pulls\/\" + json.get(\"number\").toString() + \"\/comments\")\n+                .param(\"per_page\", \"100\").execute().stream()\n+                .map(JSONValue::asObject)\n+                .collect(Collectors.toList());\n@@ -275,1 +276,1 @@\n-            var comment = parseReviewComment(parent, reviewComment);\n+            var comment = parseReviewComment(parent, reviewComment, includeLocationData);\n@@ -283,0 +284,10 @@\n+    @Override\n+    public List<ReviewComment> reviewComments() {\n+        return reviewComments(true);\n+    }\n+\n+    @Override\n+    public List<? extends Comment> reviewCommentsAsComments() {\n+        return reviewComments(false);\n+    }\n+\n@@ -351,1 +362,2 @@\n-        return request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/comments\").execute().stream()\n+        return request.get(\"issues\/\" + json.get(\"number\").toString() + \"\/comments\")\n+                .param(\"per_page\", \"100\").execute().stream()\n@@ -386,1 +398,1 @@\n-            return parseReviewComment(null, reviewComment.asObject());\n+            return parseReviewComment(null, reviewComment.asObject(), false);\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/github\/GitHubPullRequest.java","additions":52,"deletions":40,"binary":false,"changes":92,"status":"modified"}]}