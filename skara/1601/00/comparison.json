{"files":[{"patch":"@@ -258,1 +258,1 @@\n-            var uncachedUri = uriBuilder.setQuery(Map.of(\"nocache\", UUID.randomUUID().toString())).build();\n+            var uncachedUri = uriBuilder.setQuery(Map.of(\"nocache\", List.of(UUID.randomUUID().toString()))).build();\n","filename":"bots\/mlbridge\/src\/main\/java\/org\/openjdk\/skara\/bots\/mlbridge\/WebrevStorage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -648,1 +648,1 @@\n-                         .setQuery(Map.of(\"start_sha\", base.hex()))\n+                         .setQuery(Map.of(\"start_sha\", List.of(base.hex())))\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabMergeRequest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -227,0 +227,4 @@\n+        public HttpRequest build() {\n+            return RestRequest.this.build(this);\n+        }\n+\n@@ -405,1 +409,8 @@\n-            uriBuilder.setQuery(params.stream().collect(Collectors.toMap(param -> param.key, param -> param.value)));\n+            var query = new LinkedHashMap<String, List<String>>();\n+            for (var param : params) {\n+                if (!query.containsKey(param.key)) {\n+                    query.put(param.key, new ArrayList<String>());\n+                }\n+                query.get(param.key).add(param.value);\n+            }\n+            uriBuilder.setQuery(query);\n@@ -487,0 +498,6 @@\n+    private HttpRequest build(QueryBuilder queryBuilder) {\n+        var request = createRequest(queryBuilder.queryType, queryBuilder.endpoint, queryBuilder.composedBody(),\n+                queryBuilder.params, queryBuilder.headers, queryBuilder.isJSON(), queryBuilder.sha256Header);\n+        return request.build();\n+    }\n+\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/RestRequest.java","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import java.io.UnsupportedEncodingException;\n+import java.nio.charset.StandardCharsets;\n@@ -27,1 +27,1 @@\n-import java.util.Map;\n+import java.util.*;\n@@ -145,1 +145,1 @@\n-    public URIBuilder setQuery(Map<String, String> parameters) {\n+    public URIBuilder setQuery(Map<String, List<String>> parameters) {\n@@ -147,6 +147,5 @@\n-                .map(p -> {\n-                    try {\n-                        return URLEncoder.encode(p.getKey(), \"UTF-8\") + \"=\" + URLEncoder.encode(p.getValue(), \"UTF-8\");\n-                    } catch (UnsupportedEncodingException e) {\n-                        throw new RuntimeException(\"Cannot find UTF-8\");\n-                    }\n+                .flatMap(p -> {\n+                    var key = URLEncoder.encode(p.getKey(), StandardCharsets.UTF_8);\n+                    return p.getValue()\n+                            .stream()\n+                            .map(v -> key + \"=\" + URLEncoder.encode(v, StandardCharsets.UTF_8));\n","filename":"network\/src\/main\/java\/org\/openjdk\/skara\/network\/URIBuilder.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -380,0 +380,32 @@\n+\n+    @Test\n+    void multipleParamsWithSameKey() throws IOException {\n+        try (var receiver = new RestReceiver()) {\n+            var restRequest = new RestRequest(receiver.getEndpoint());\n+            var httpRequest = restRequest.get(\"\/test\").param(\"k\", \"v1\").param(\"k\", \"v2\").build();\n+            assertEquals(\"k=v1&k=v2\", httpRequest.uri().getQuery());\n+        }\n+    }\n+\n+    @Test\n+    void multipleParamsWithMultipleKeys() throws IOException {\n+        try (var receiver = new RestReceiver()) {\n+            var restRequest = new RestRequest(receiver.getEndpoint());\n+            var httpRequest = restRequest.get(\"\/test\").param(\"k1\", \"v1\").param(\"k2\", \"v2\").build();\n+            assertEquals(\"k1=v1&k2=v2\", httpRequest.uri().getQuery());\n+        }\n+    }\n+\n+    @Test\n+    void multipleParamsWithMultipleKeysWithMultipleValues() throws IOException {\n+        try (var receiver = new RestReceiver()) {\n+            var restRequest = new RestRequest(receiver.getEndpoint());\n+            var httpRequest = restRequest.get(\"\/test\")\n+                                         .param(\"k1\", \"v1\")\n+                                         .param(\"k1\", \"v2\")\n+                                         .param(\"k2\", \"v3\")\n+                                         .param(\"k2\", \"v4\")\n+                                         .build();\n+            assertEquals(\"k1=v1&k1=v2&k2=v3&k2=v4\", httpRequest.uri().getQuery());\n+        }\n+    }\n","filename":"network\/src\/test\/java\/org\/openjdk\/skara\/network\/RestRequestTests.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import java.util.*;\n+\n@@ -78,0 +80,25 @@\n+\n+    @Test\n+    void multipleParamsWithSameKey() {\n+        var params = Map.of(\"key\", List.of(\"v1\", \"v2\"));\n+        var uri = URIBuilder.base(validHost).setQuery(params).build();\n+        assertEquals(\"key=v1&key=v2\", uri.getQuery());\n+    }\n+\n+    @Test\n+    void multipleParamsWithDifferentKeys() {\n+        var params = new LinkedHashMap<String, List<String>>();\n+        params.put(\"k1\", List.of(\"v1\", \"v2\"));\n+        params.put(\"k2\", List.of(\"v3\", \"v4\"));\n+        var uri = URIBuilder.base(validHost).setQuery(params).build();\n+        assertEquals(\"k1=v1&k1=v2&k2=v3&k2=v4\", uri.getQuery());\n+    }\n+\n+    @Test\n+    void singleKeyAndValue() {\n+        var params = Map.of(\n+            \"k1\", List.of(\"v1\")\n+        );\n+        var uri = URIBuilder.base(validHost).setQuery(params).build();\n+        assertEquals(\"k1=v1\", uri.getQuery());\n+    }\n","filename":"network\/src\/test\/java\/org\/openjdk\/skara\/network\/URIBuilderTests.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}