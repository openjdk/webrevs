{"files":[{"patch":"@@ -79,0 +79,1 @@\n+    private static final Path JCHECK_CONF_PATH = Path.of(\".jcheck\", \"conf\");\n@@ -1247,8 +1248,3 @@\n-                var commits = localRepo.commitMetadata(localRepo.mergeBase(targetHash, pr.headHash()), pr.headHash(), true);\n-                isJCheckConfUpdatedInMergePR = commits.stream().anyMatch(c -> {\n-                    try {\n-                        return isFileUpdated(Path.of(\".jcheck\", \"conf\"), c.hash());\n-                    } catch (IOException e) {\n-                        throw new UncheckedIOException(e);\n-                    }\n-                });\n+                var mergeBaseHash = localRepo.mergeBase(targetHash, pr.headHash());\n+                var commits = localRepo.commitMetadata(mergeBaseHash, pr.headHash(), true);\n+                isJCheckConfUpdatedInMergePR = isFileUpdated(JCHECK_CONF_PATH, mergeBaseHash, pr.headHash());\n@@ -1321,1 +1317,1 @@\n-                    (isFileUpdated(Path.of(\".jcheck\", \"conf\"), localHash) || isJCheckConfUpdatedInMergePR)) {\n+                        (isFileUpdated(JCHECK_CONF_PATH, localRepo.mergeBase(pr.headHash(), targetHash), pr.headHash()) || isJCheckConfUpdatedInMergePR)) {\n@@ -1337,1 +1333,1 @@\n-            var confFile = localRepo.lines(Path.of(\".jcheck\", \"conf\"), localHash);\n+            var confFile = localRepo.lines(JCHECK_CONF_PATH, localHash);\n@@ -1479,7 +1475,2 @@\n-    private boolean isFileUpdated(Path filename, Hash hash) throws IOException {\n-        return !localRepo.files(hash, filename).isEmpty() &&\n-                localRepo.commits(hash.hex(), 1).stream()\n-                        .anyMatch(commit -> commit.parentDiffs().stream()\n-                                .anyMatch(diff -> diff.patches().stream()\n-                                        .anyMatch(patch -> (patch.source().path().isPresent() && patch.source().path().get().equals(filename))\n-                                                || ((patch.target().path().isPresent() && patch.target().path().get().equals(filename))))));\n+    private boolean isFileUpdated(Path filename, Hash from, Hash to) throws IOException {\n+        return !localRepo.diff(from, to, List.of(filename)).patches().isEmpty();\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":8,"deletions":17,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2848,0 +2848,60 @@\n+    @Test\n+    void testNotRunJcheckTwice(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addAuthor(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+            var seedFolder = tempFolder.path().resolve(\"seed\");\n+            var checkBot = PullRequestBot.newBuilder()\n+                    .repo(author)\n+                    .censusRepo(censusBuilder.build())\n+                    .censusLink(\"https:\/\/census.com\/{{contributor}}-profile\")\n+                    .seedStorage(seedFolder)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            \/\/ set the .jcheck\/conf without whitespace check\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType(), Path.of(\"appendable.txt\"), Set.of(\"author\", \"reviewers\"), \"0.1\");\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR, add a line with whitespace issue\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"An additional line\\r\\n\");\n+            localRepo.push(editHash, author.authenticatedUrl(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n+\n+            \/\/ Check the status\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ Verify that the check succeeded\n+            var checks = pr.checks(editHash);\n+            assertEquals(1, checks.size());\n+            var check = checks.get(\"jcheck\");\n+            assertEquals(CheckStatus.SUCCESS, check.status());\n+            \/\/ pr body should not have the process for whitespace\n+            assertFalse(pr.store().body().contains(\"whitespace\"));\n+\n+            localRepo.checkout(masterHash);\n+            \/\/ Add whitespace check to .jcheck\/conf\n+            var checkConf = tempFolder.path().resolve(\".jcheck\/conf\");\n+            writeToCheckConf(checkConf);\n+            localRepo.add(checkConf);\n+            var updateHash = localRepo.commit(\"enable whitespace issue check\", \"testauthor\", \"ta@none.none\");\n+            localRepo.push(updateHash, author.authenticatedUrl(), \"master\", true);\n+            CheckableRepository.appendAndCommit(localRepo, \"An additional line1\\r\\n\");\n+            CheckableRepository.appendAndCommit(localRepo, \"An additional line2\\r\\n\");\n+            updateHash = CheckableRepository.appendAndCommit(localRepo, \"An additional line3\\r\\n\");\n+            localRepo.push(updateHash, author.authenticatedUrl(), \"master\", true);\n+\n+            TestBotRunner.runPeriodicItems(checkBot);\n+\n+            \/\/ pr body should not have the integrationBlocker for whitespace and reviewer check\n+            assertFalse(pr.store().body().contains(\"Whitespace errors (failed with updated jcheck configuration in pull request)\"));\n+            assertFalse(pr.store().body().contains(\"Too few reviewers with at least role reviewer found (have 0, need at least 1) (failed with updated jcheck configuration in pull request)\"));\n+        }\n+    }\n+\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"modified"}]}