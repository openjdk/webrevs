{"files":[{"patch":"@@ -34,1 +34,1 @@\n-manual-test-settings.properties\n+test.properties\n","filename":".gitignore","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.forge.github.GitHubApplication;\n+import org.openjdk.skara.forge.github.GitHubHost;\n+import org.openjdk.skara.forge.gitlab.GitLabHost;\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.issuetracker.Label;\n+import org.openjdk.skara.network.URIBuilder;\n+import org.openjdk.skara.proxy.HttpProxy;\n+import org.openjdk.skara.test.TestProperties;\n+import org.openjdk.skara.test.EnabledIfTestProperties;\n+\n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Set;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class ForgeIntegrationTests {\n+    private static TestProperties props;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        HttpProxy.setup();\n+        props = TestProperties.load();\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.app.id\", \"github.app.installation\", \"github.app.key.file\", \"github.repository\"})\n+    void gitHubLabels() throws IOException {\n+        var uri = URIBuilder.base(\"https:\/\/github.com\/\").build();\n+        var id = props.get(\"github.app.id\");\n+        var installation = props.get(\"github.app.installation\");\n+        var keyFile = Paths.get(props.get(\"github.app.key.file\"));\n+\n+        var keyContents = Files.readString(keyFile, StandardCharsets.UTF_8);\n+        var app = new GitHubApplication(keyContents, id, installation);\n+        var gitHubHost = new GitHubHost(uri, app, null, null, null, Set.of());\n+\n+        var repo = gitHubHost.repository(props.get(\"github.repository\")).orElseThrow();\n+\n+        verifyLabels(repo, true);\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.uri\", \"gitlab.user\", \"gitlab.pat\", \"gitlab.repository\"})\n+    void gitLabLabels() throws IOException {\n+        var uri = URIBuilder.base(props.get(\"gitlab.uri\")).build();\n+        var user = props.get(\"gitlab.user\");\n+        var pat = props.get(\"gitlab.pat\");\n+        var credential = new Credential(user, pat);\n+\n+        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n+\n+        var repo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+\n+        verifyLabels(repo, false);\n+    }\n+\n+    private void verifyLabels(HostedRepository repo, boolean supportsDeleteDescription) {\n+        var labels = repo.labels();\n+        var labelName = \"skara-test-label\";\n+        var label1 = new Label(labelName, \"bar\");\n+        \/\/ If the label is already there\n+        if (labels.stream().anyMatch(l -> l.name().equals(labelName))) {\n+            repo.deleteLabel(label1);\n+        }\n+        repo.addLabel(label1);\n+        labels = repo.labels();\n+        assertTrue(labels.contains(label1));\n+\n+        var label2 = new Label(labelName, \"new description\");\n+        repo.updateLabel(label2);\n+        labels = repo.labels();\n+        assertTrue(labels.contains(label2));\n+        assertFalse(labels.contains(label1));\n+\n+        var label3 = new Label(labelName, null);\n+        if (supportsDeleteDescription) {\n+            repo.updateLabel(label3);\n+            labels = repo.labels();\n+            assertTrue(labels.contains(label3));\n+            assertFalse(labels.contains(label2));\n+            assertFalse(labels.contains(label1));\n+        }\n+\n+        repo.deleteLabel(label3);\n+        labels = repo.labels();\n+        assertFalse(labels.contains(label3));\n+        assertFalse(labels.contains(label2));\n+        assertFalse(labels.contains(label1));\n+    }\n+}\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/ForgeIntegrationTests.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -1,124 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.forge;\n-\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n-import org.openjdk.skara.forge.github.GitHubApplication;\n-import org.openjdk.skara.forge.github.GitHubHost;\n-import org.openjdk.skara.forge.gitlab.GitLabHost;\n-import org.openjdk.skara.host.Credential;\n-import org.openjdk.skara.issuetracker.Label;\n-import org.openjdk.skara.network.URIBuilder;\n-import org.openjdk.skara.proxy.HttpProxy;\n-import org.openjdk.skara.test.ManualTestSettings;\n-\n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n-import java.nio.file.Files;\n-import java.nio.file.Paths;\n-import java.util.List;\n-import java.util.Set;\n-\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertTrue;\n-\n-\/**\n- * This class contains manual tests for interactions with different forges\n- * (GitHub and GitLab). To be able to run them, you need to provide a\n- * properties file with the necessary connection details for running these\n- * tests. See ManualTestSettings.\n- *\n- * To be able to run the tests, you need to remove or comment out the @Disabled\n- * annotation first.\n- *\/\n-@Disabled(\"Manual\")\n-public class ManualForgeTests {\n-\n-    @Test\n-    void gitHubLabels() throws IOException {\n-        HttpProxy.setup();\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var uri = URIBuilder.base(\"https:\/\/github.com\/\").build();\n-        var id = settings.getProperty(\"github.app.id\");\n-        var installation = settings.getProperty(\"github.app.installation\");\n-        var keyFile = Paths.get(settings.getProperty(\"github.app.key.file\"));\n-\n-        var keyContents = Files.readString(keyFile, StandardCharsets.UTF_8);\n-        var app = new GitHubApplication(keyContents, id, installation);\n-        var gitHubHost = new GitHubHost(uri, app, null, null, null, Set.of());\n-\n-        var repo = gitHubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n-\n-        verifyLabels(repo, true);\n-    }\n-\n-    @Test\n-    void gitLabLabels() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        var user = settings.getProperty(\"gitlab.user\");\n-        var pat = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(user, pat);\n-\n-        var gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, List.of());\n-\n-        var repo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-\n-        verifyLabels(repo, false);\n-    }\n-\n-    private void verifyLabels(HostedRepository repo, boolean supportsDeleteDescription) {\n-        var labels = repo.labels();\n-        var labelName = \"skara-test-label\";\n-        var label1 = new Label(labelName, \"bar\");\n-        \/\/ If the label is already there\n-        if (labels.stream().anyMatch(l -> l.name().equals(labelName))) {\n-            repo.deleteLabel(label1);\n-        }\n-        repo.addLabel(label1);\n-        labels = repo.labels();\n-        assertTrue(labels.contains(label1));\n-\n-        var label2 = new Label(labelName, \"new description\");\n-        repo.updateLabel(label2);\n-        labels = repo.labels();\n-        assertTrue(labels.contains(label2));\n-        assertFalse(labels.contains(label1));\n-\n-        var label3 = new Label(labelName, null);\n-        if (supportsDeleteDescription) {\n-            repo.updateLabel(label3);\n-            labels = repo.labels();\n-            assertTrue(labels.contains(label3));\n-            assertFalse(labels.contains(label2));\n-            assertFalse(labels.contains(label1));\n-        }\n-\n-        repo.deleteLabel(label3);\n-        labels = repo.labels();\n-        assertFalse(labels.contains(label3));\n-        assertFalse(labels.contains(label2));\n-        assertFalse(labels.contains(label1));\n-    }\n-}\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/ManualForgeTests.java","additions":0,"deletions":124,"binary":false,"changes":124,"status":"deleted"},{"patch":"@@ -0,0 +1,417 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge.github;\n+\n+import java.time.Duration;\n+import java.util.Properties;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.forge.Forge;\n+import org.openjdk.skara.forge.HostedRepository;\n+import org.openjdk.skara.forge.MemberState;\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.json.JSON;\n+import org.openjdk.skara.network.URIBuilder;\n+import org.openjdk.skara.proxy.HttpProxy;\n+import org.openjdk.skara.test.TestProperties;\n+import org.openjdk.skara.test.EnabledIfTestProperties;\n+import org.openjdk.skara.vcs.Branch;\n+import org.openjdk.skara.vcs.Diff;\n+import org.openjdk.skara.vcs.DiffComparator;\n+import org.openjdk.skara.vcs.Hash;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.api.Assumptions.assumeTrue;\n+\n+class GitHubIntegrationTests {\n+    private static final String GITHUB_REST_URI = \"https:\/\/github.com\";\n+    private static Forge githubHost;\n+    private static TestProperties props;\n+\n+    @BeforeAll\n+    static void beforeAll() throws IOException {\n+        props = TestProperties.load();\n+        if (props.contains(\"github.user\", \"github.pat\")) {\n+            HttpProxy.setup();\n+            \/\/ Here use the OAuth2 token. To use a GitHub App, please see ManualForgeTests#gitHubLabels.\n+            var username = props.get(\"github.user\");\n+            var token = props.get(\"github.pat\");\n+            var credential = new Credential(username, token);\n+            var uri = URIBuilder.base(GITHUB_REST_URI).build();\n+            githubHost = new GitHubForgeFactory().create(uri, credential, null);\n+        }\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\"})\n+    void testDiffEqual() throws IOException {\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/jfx\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+\n+        \/\/ Test the files number of a PR\n+        var prDiffLittle = testDiffOfPullRequest(githubRepo, \"756\", 2);\n+        var prDiffMiddle = testDiffOfPullRequest(githubRepo, \"764\", 105);\n+        var prDiffLarge = testDiffOfPullRequest(githubRepo, \"723\", 3000); \/\/ Only 3000 files return\n+\n+        \/\/ Test the file number of a commit\n+        var commitDiffLittle = testDiffOfCommit(githubRepo, new Hash(\"eb7fa5dd1c0911bca15576060691d884d29895a1\"), 2);\n+        var commitDiffMiddle = testDiffOfCommit(githubRepo, new Hash(\"b0f2521219efc1b0d0c45088736d5105712bc2c9\"), 105);\n+        var commitDiffLarge = testDiffOfCommit(githubRepo, new Hash(\"6f28d912024495278c4c35ab054bc2aab480b3e4\"), 3000); \/\/ Only 3000 files return\n+\n+        \/\/ Test whether the diff is equal.\n+        assertTrue(DiffComparator.areFuzzyEqual(commitDiffLittle, prDiffLittle));\n+        assertTrue(DiffComparator.areFuzzyEqual(commitDiffMiddle, prDiffMiddle));\n+        assertTrue(DiffComparator.areFuzzyEqual(commitDiffLarge, prDiffLarge));\n+    }\n+\n+    Diff testDiffOfPullRequest(HostedRepository githubRepo, String prId, int expectedPatchesSize) {\n+        var pr = githubRepo.pullRequest(prId);\n+        var diff = pr.diff();\n+        assertEquals(expectedPatchesSize, diff.patches().size());\n+        return diff;\n+    }\n+\n+    Diff testDiffOfCommit(HostedRepository githubRepo, Hash hash, int expectedPatchesSize) {\n+        var commit = githubRepo.commit(hash);\n+        assumeTrue(commit.isPresent());\n+        assertEquals(1, commit.get().parentDiffs().size());\n+        assertEquals(expectedPatchesSize, commit.get().parentDiffs().get(0).patches().size());\n+        return commit.get().parentDiffs().get(0);\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\"})\n+    void testLastForcePushTime() {\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var pr = githubRepo.pullRequest(\"96\");\n+        var lastForcePushTime = pr.lastForcePushTime();\n+        assertEquals(\"2022-05-29T10:32:43Z\", lastForcePushTime.get().toString());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\"})\n+    void testFindIntegratedCommitHash() {\n+        var playgroundRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(playgroundRepoOpt.isPresent());\n+        var playgroundRepo = playgroundRepoOpt.get();\n+        var playgroundPr = playgroundRepo.pullRequest(\"96\");\n+        var playgroundHashOpt = playgroundPr.findIntegratedCommitHash();\n+        assertTrue(playgroundHashOpt.isEmpty());\n+        \/\/ `43336822` is the id of the `openjdk` bot(a GitHub App).\n+        playgroundHashOpt = playgroundPr.findIntegratedCommitHash(List.of(\"43336822\"));\n+        assertTrue(playgroundHashOpt.isEmpty());\n+\n+        var jdkRepoOpt = githubHost.repository(\"openjdk\/jdk\");\n+        assumeTrue(jdkRepoOpt.isPresent());\n+        var jdkRepo = jdkRepoOpt.get();\n+        var jdkPr = jdkRepo.pullRequest(\"8648\");\n+        var jdkHashOpt = jdkPr.findIntegratedCommitHash();\n+        assertTrue(jdkHashOpt.isEmpty());\n+        \/\/ `43336822` is the id of the `openjdk` bot(a GitHub App).\n+        jdkHashOpt = jdkPr.findIntegratedCommitHash(List.of(\"43336822\"));\n+        assertTrue(jdkHashOpt.isPresent());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\"})\n+    void testOversizeComment() {\n+        var testRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(testRepoOpt.isPresent());\n+        var testRepo = testRepoOpt.get();\n+        var testPr = testRepo.pullRequest(\"99\");\n+\n+        \/\/ Test add comment\n+        Comment comment = testPr.addComment(\"1\".repeat(1_000_000));\n+        assertTrue(comment.body().contains(\"...\"));\n+        assertTrue(comment.body().contains(\"1\"));\n+\n+        \/\/ Test update comment\n+        Comment updateComment = testPr.updateComment(comment.id(), \"2\".repeat(2_000_000));\n+        assertTrue(updateComment.body().contains(\"...\"));\n+        assertTrue(updateComment.body().contains(\"2\"));\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\"})\n+    void testForcePushTimeWhenPRInDraft() {\n+        var testRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(testRepoOpt.isPresent());\n+        var testRepo = testRepoOpt.get();\n+        var testPr = (GitHubPullRequest) testRepo.pullRequest(\"107\");\n+\n+        \/\/ Won't get the force push time when if the force push is during draft period\n+        assertEquals(Optional.empty(), testPr.lastForcePushTime());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\",\n+                              \"github.repository\", \"github.repository.branch\"})\n+    void fileContentsNonExisting() {\n+        var gitHubRepo = githubHost.repository(props.get(\"github.repository\")).orElseThrow();\n+        var branch = new Branch(props.get(\"github.repository.branch\"));\n+        var fileName = \"testfile-that-does-not-exist.txt\";\n+        var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+        assertTrue(returnedContents.isEmpty());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\",\n+                              \"github.repository\", \"github.repository.branch\"})\n+    void writeFileContents() {\n+        var gitHubRepo = githubHost.repository(props.get(\"github.repository\")).orElseThrow();\n+        var branch = new Branch(props.get(\"github.repository.branch\"));\n+\n+        var fileName = \"testfile.txt\";\n+\n+        \/\/ Create new file\n+        {\n+            var fileContent = \"File content\";\n+            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"First commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Update file\n+        {\n+            var fileContent = \"New file content\";\n+            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Second commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Make the file huge\n+        {\n+            var fileContent = \"a\".repeat(1024 * 1024 * 10);\n+            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Third commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n+            assertTrue(returnedContents.isPresent());\n+            assertEquals(fileContent.length(), returnedContents.get().length());\n+            assertTrue(fileContent.equals(returnedContents.get()),\n+                    \"Diff for huge file contents, printing first 50 chars of each '\"\n+                    + fileContent.substring(0, 50) + \"' '\" + returnedContents.get().substring(0, 50) + \"'\");\n+        }\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\"})\n+    void testLastMarkedAsDraftTime() {\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var pr = githubRepo.pullRequest(\"129\");\n+        var lastMarkedAsDraftTime = pr.lastMarkedAsDraftTime();\n+        assertEquals(\"2023-02-11T11:51:12Z\", lastMarkedAsDraftTime.get().toString());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\"})\n+    void testClosedBy() {\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var pr = githubRepo.pullRequest(\"96\");\n+        var user = pr.closedBy();\n+        assertEquals(\"lgxbslgx\", user.get().username());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\"})\n+    void testGeneratingUrl() {\n+        var username = props.get(\"github.user\");\n+        var token = props.get(\"github.pat\");\n+        var credential = new Credential(username, token);\n+        var uri = URIBuilder.base(GITHUB_REST_URI).build();\n+        var configuration = JSON.object().put(\"weburl\", JSON.object().put(\"pattern\", \"^https:\/\/github.com\/openjdk\/(.*)$\").put(\"replacement\", \"https:\/\/git.openjdk.org\/$1\"));\n+        var githubHost = new GitHubForgeFactory().create(uri, credential, configuration);\n+\n+        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var pr = githubRepo.pullRequest(\"129\");\n+\n+        var labelComment = pr.comments().stream()\n+                .filter(comment -> comment.body().contains(\"The following label will be automatically applied to this pull request:\"))\n+                .findFirst()\n+                .get();\n+        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#issuecomment-1426703897\", pr.commentUrl(labelComment).toString());\n+\n+        var reviewComment = pr.reviewComments().get(0);\n+        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#discussion_r1108931186\", pr.reviewCommentUrl(reviewComment).toString());\n+\n+        var review = pr.reviews().get(0);\n+        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#pullrequestreview-1302142525\", pr.reviewUrl(review).toString());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\", \"github.repository\"})\n+    void testDeleteDeployKey() {\n+        var githubRepoOpt = githubHost.repository(props.get(\"github.repository\"));\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        githubRepo.deleteDeployKeys(Duration.ofHours(24));\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\",\n+                              \"github.repository\", \"github.repository.branch\", \"github.user2\"})\n+    void restrictPushAccess() {\n+        var gitHubRepo = githubHost.repository(props.get(\"github.repository\")).orElseThrow();\n+        var branch = new Branch(props.get(\"github.repository.branch\"));\n+        var user = githubHost.user(props.get(\"github.user2\")).orElseThrow();\n+        gitHubRepo.restrictPushAccess(branch, user);\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\", \"github.repository\"})\n+    void testDeployKeyTitles() {\n+        var githubRepoOpt = githubHost.repository(props.get(\"github.repository\"));\n+        assumeTrue(githubRepoOpt.isPresent());\n+        var githubRepo = githubRepoOpt.get();\n+        var expiredDeployKeys = githubRepo.deployKeyTitles(Duration.ofMinutes(5));\n+        assertTrue(expiredDeployKeys.contains(\"Test1\"));\n+        assertTrue(expiredDeployKeys.contains(\"Test2\"));\n+    }\n+\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\",\n+                              \"github.repository\", \"github.prId\", \"github.commitHash\"})\n+    void testBackportCleanIgnoreCopyRight() {\n+        var gitHubRepo = githubHost.repository(props.get(\"github.repository\")).orElseThrow();\n+\n+        var pr = gitHubRepo.pullRequest(props.get(\"github.prId\"));\n+        var hash = new Hash(props.get(\"github.commitHash\"));\n+        var repoName = pr.repository().forge().search(hash, true);\n+        assertTrue(repoName.isPresent());\n+        var repository = pr.repository().forge().repository(repoName.get());\n+        assertTrue(repository.isPresent());\n+        var commit = repository.get().commit(hash, true);\n+        var backportDiff = commit.orElseThrow().parentDiffs().get(0);\n+        var prDiff = pr.diff();\n+        var isClean = DiffComparator.areFuzzyEqual(backportDiff, prDiff);\n+        assertTrue(isClean);\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\",\n+                              \"github.repository\", \"github.repository.branch\"})\n+    void testDefaultBranchName() {\n+        var gitHubRepo = githubHost.repository(props.get(\"github.repository\")).orElseThrow();\n+        assertEquals(props.get(\"github.repository.branch\"), gitHubRepo.defaultBranchName());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\", \"github.repository\"})\n+    void testCollaborators() {\n+        var gitHubRepo = githubHost.repository(props.get(\"github.repository\")).orElseThrow();\n+        var collaborators = gitHubRepo.collaborators();\n+        assertNotNull(collaborators);\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\"})\n+    void testGetUser() {\n+        var userName = props.get(\"github.user\");\n+        var userByName = githubHost.user(userName).orElseThrow();\n+        var userById = githubHost.userById(userByName.id()).orElseThrow();\n+        assertEquals(userByName, userById);\n+    }\n+\n+    \/**\n+     * Expects\n+     * github.group: Name of GitHub organization with at least one member\n+     *\/\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\", \"github.group\"})\n+    void testGroupMembers() {\n+        var groupName = props.get(\"github.group\");\n+        var membersList = githubHost.groupMembers(groupName);\n+        assertNotNull(membersList);\n+        assertNotEquals(0, membersList.size());\n+    }\n+\n+    \/**\n+     * Expects:\n+     * github.group: Name of GitHub organization\n+     * github.group.member: Name of user which is a member of the organization\n+     * github.group.notmember: Name of user which is not a member of the organization\n+     *\/\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\",\n+                              \"github.group\", \"github.group.member\", \"github.group.notmember\"})\n+    void testGroupMemberState() {\n+        var groupName = props.get(\"github.group\");\n+        var memberName = props.get(\"github.group.member\");\n+        var notMemberName = props.get(\"github.group.notmember\");\n+        var member = githubHost.user(memberName).orElseThrow();\n+        var notMember = githubHost.user(notMemberName).orElseThrow();\n+        assertEquals(MemberState.ACTIVE, githubHost.groupMemberState(groupName, member));\n+        assertEquals(MemberState.MISSING, githubHost.groupMemberState(groupName, notMember));\n+    }\n+\n+    \/**\n+     * Expects:\n+     * github.group: Name of GitHub organization\n+     * github.group.user: Name of user which may or may not be a member already,\n+     *                    but cannot be an owner\n+     *\/\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\",\n+                              \"github.group\", \"github.group.user\"})\n+    void testAddGroupMember() {\n+        var groupName = props.get(\"github.group\");\n+        var userName = props.get(\"github.group.user\");\n+        var user = githubHost.user(userName).orElseThrow();\n+        githubHost.addGroupMember(groupName, user);\n+        assertNotEquals(MemberState.MISSING, githubHost.groupMemberState(groupName, user));\n+    }\n+\n+    \/**\n+     * Expects:\n+     * github.collaborators.repository: Github repository where user has admin access\n+     * github.collaborators.user: User not currently a collaborator in repository\n+     *\/\n+    @Test\n+    @EnabledIfTestProperties({\"github.user\", \"github.pat\",\n+                              \"github.collaborators.repository\", \"github.collaborators.user\"})\n+    void addRemoveCollaborator() {\n+        var gitHubRepo = githubHost.repository(props.get(\"github.collaborators.repository\")).orElseThrow();\n+        var userName = props.get(\"github.collaborators.user\");\n+        var user = gitHubRepo.forge().user(userName).orElseThrow();\n+        gitHubRepo.addCollaborator(user, false);\n+        \/\/ On Github, the user has to accept an invitation before becoming a collaborator\n+        \/\/ so we cannot verify automatically here.\n+        gitHubRepo.removeCollaborator(user);\n+    }\n+}\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubIntegrationTests.java","additions":417,"deletions":0,"binary":false,"changes":417,"status":"added"},{"patch":"@@ -1,388 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.forge.github;\n-\n-import java.time.Duration;\n-import java.util.Properties;\n-import org.junit.jupiter.api.*;\n-import org.openjdk.skara.forge.Forge;\n-import org.openjdk.skara.forge.HostedRepository;\n-import org.openjdk.skara.forge.MemberState;\n-import org.openjdk.skara.host.Credential;\n-import org.openjdk.skara.issuetracker.Comment;\n-import org.openjdk.skara.json.JSON;\n-import org.openjdk.skara.network.URIBuilder;\n-import org.openjdk.skara.proxy.HttpProxy;\n-import org.openjdk.skara.test.ManualTestSettings;\n-import org.openjdk.skara.vcs.Branch;\n-import org.openjdk.skara.vcs.Diff;\n-import org.openjdk.skara.vcs.DiffComparator;\n-import org.openjdk.skara.vcs.Hash;\n-\n-import java.io.IOException;\n-import java.util.List;\n-import java.util.Optional;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-import static org.junit.jupiter.api.Assumptions.assumeTrue;\n-\n-\/**\n- * To be able to run the tests, you need to remove or comment out the @Disabled annotation first.\n- *\/\n-@Disabled(\"Manual\")\n-public class GitHubRestApiTests {\n-    private static final String GITHUB_REST_URI = \"https:\/\/github.com\";\n-    Forge githubHost;\n-    private Properties settings;\n-\n-    @BeforeEach\n-    void setupHost() throws IOException {\n-        HttpProxy.setup();\n-        settings = ManualTestSettings.loadManualTestSettings();\n-        \/\/ Here use the OAuth2 token. To use a GitHub App, please see ManualForgeTests#gitHubLabels.\n-        var username = settings.getProperty(\"github.user\");\n-        var token = settings.getProperty(\"github.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(GITHUB_REST_URI).build();\n-        githubHost = new GitHubForgeFactory().create(uri, credential, null);\n-    }\n-\n-    @Test\n-    void testDiffEqual() throws IOException {\n-        var githubRepoOpt = githubHost.repository(\"openjdk\/jfx\");\n-        assumeTrue(githubRepoOpt.isPresent());\n-        var githubRepo = githubRepoOpt.get();\n-\n-        \/\/ Test the files number of a PR\n-        var prDiffLittle = testDiffOfPullRequest(githubRepo, \"756\", 2);\n-        var prDiffMiddle = testDiffOfPullRequest(githubRepo, \"764\", 105);\n-        var prDiffLarge = testDiffOfPullRequest(githubRepo, \"723\", 3000); \/\/ Only 3000 files return\n-\n-        \/\/ Test the file number of a commit\n-        var commitDiffLittle = testDiffOfCommit(githubRepo, new Hash(\"eb7fa5dd1c0911bca15576060691d884d29895a1\"), 2);\n-        var commitDiffMiddle = testDiffOfCommit(githubRepo, new Hash(\"b0f2521219efc1b0d0c45088736d5105712bc2c9\"), 105);\n-        var commitDiffLarge = testDiffOfCommit(githubRepo, new Hash(\"6f28d912024495278c4c35ab054bc2aab480b3e4\"), 3000); \/\/ Only 3000 files return\n-\n-        \/\/ Test whether the diff is equal.\n-        assertTrue(DiffComparator.areFuzzyEqual(commitDiffLittle, prDiffLittle));\n-        assertTrue(DiffComparator.areFuzzyEqual(commitDiffMiddle, prDiffMiddle));\n-        assertTrue(DiffComparator.areFuzzyEqual(commitDiffLarge, prDiffLarge));\n-    }\n-\n-    Diff testDiffOfPullRequest(HostedRepository githubRepo, String prId, int expectedPatchesSize) {\n-        var pr = githubRepo.pullRequest(prId);\n-        var diff = pr.diff();\n-        assertEquals(expectedPatchesSize, diff.patches().size());\n-        return diff;\n-    }\n-\n-    Diff testDiffOfCommit(HostedRepository githubRepo, Hash hash, int expectedPatchesSize) {\n-        var commit = githubRepo.commit(hash);\n-        assumeTrue(commit.isPresent());\n-        assertEquals(1, commit.get().parentDiffs().size());\n-        assertEquals(expectedPatchesSize, commit.get().parentDiffs().get(0).patches().size());\n-        return commit.get().parentDiffs().get(0);\n-    }\n-\n-    @Test\n-    void testLastForcePushTime() {\n-        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n-        assumeTrue(githubRepoOpt.isPresent());\n-        var githubRepo = githubRepoOpt.get();\n-        var pr = githubRepo.pullRequest(\"96\");\n-        var lastForcePushTime = pr.lastForcePushTime();\n-        assertEquals(\"2022-05-29T10:32:43Z\", lastForcePushTime.get().toString());\n-    }\n-\n-    @Test\n-    void testFindIntegratedCommitHash() {\n-        var playgroundRepoOpt = githubHost.repository(\"openjdk\/playground\");\n-        assumeTrue(playgroundRepoOpt.isPresent());\n-        var playgroundRepo = playgroundRepoOpt.get();\n-        var playgroundPr = playgroundRepo.pullRequest(\"96\");\n-        var playgroundHashOpt = playgroundPr.findIntegratedCommitHash();\n-        assertTrue(playgroundHashOpt.isEmpty());\n-        \/\/ `43336822` is the id of the `openjdk` bot(a GitHub App).\n-        playgroundHashOpt = playgroundPr.findIntegratedCommitHash(List.of(\"43336822\"));\n-        assertTrue(playgroundHashOpt.isEmpty());\n-\n-        var jdkRepoOpt = githubHost.repository(\"openjdk\/jdk\");\n-        assumeTrue(jdkRepoOpt.isPresent());\n-        var jdkRepo = jdkRepoOpt.get();\n-        var jdkPr = jdkRepo.pullRequest(\"8648\");\n-        var jdkHashOpt = jdkPr.findIntegratedCommitHash();\n-        assertTrue(jdkHashOpt.isEmpty());\n-        \/\/ `43336822` is the id of the `openjdk` bot(a GitHub App).\n-        jdkHashOpt = jdkPr.findIntegratedCommitHash(List.of(\"43336822\"));\n-        assertTrue(jdkHashOpt.isPresent());\n-    }\n-\n-    @Test\n-    void testOversizeComment() {\n-        var testRepoOpt = githubHost.repository(\"openjdk\/playground\");\n-        assumeTrue(testRepoOpt.isPresent());\n-        var testRepo = testRepoOpt.get();\n-        var testPr = testRepo.pullRequest(\"99\");\n-\n-        \/\/ Test add comment\n-        Comment comment = testPr.addComment(\"1\".repeat(1_000_000));\n-        assertTrue(comment.body().contains(\"...\"));\n-        assertTrue(comment.body().contains(\"1\"));\n-\n-        \/\/ Test update comment\n-        Comment updateComment = testPr.updateComment(comment.id(), \"2\".repeat(2_000_000));\n-        assertTrue(updateComment.body().contains(\"...\"));\n-        assertTrue(updateComment.body().contains(\"2\"));\n-    }\n-\n-    @Test\n-    void testForcePushTimeWhenPRInDraft() {\n-        var testRepoOpt = githubHost.repository(\"openjdk\/playground\");\n-        assumeTrue(testRepoOpt.isPresent());\n-        var testRepo = testRepoOpt.get();\n-        var testPr = (GitHubPullRequest) testRepo.pullRequest(\"107\");\n-\n-        \/\/ Won't get the force push time when if the force push is during draft period\n-        assertEquals(Optional.empty(), testPr.lastForcePushTime());\n-    }\n-\n-    @Test\n-    void fileContentsNonExisting() {\n-        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n-        var branch = new Branch(settings.getProperty(\"github.repository.branch\"));\n-        var fileName = \"testfile-that-does-not-exist.txt\";\n-        var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n-        assertTrue(returnedContents.isEmpty());\n-    }\n-\n-    @Test\n-    void writeFileContents() {\n-        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n-        var branch = new Branch(settings.getProperty(\"github.repository.branch\"));\n-\n-        var fileName = \"testfile.txt\";\n-\n-        \/\/ Create new file\n-        {\n-            var fileContent = \"File content\";\n-            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n-                    \"First commit message\", \"Duke\", \"duke@openjdk.org\");\n-            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n-            assertEquals(fileContent, returnedContents.orElseThrow());\n-        }\n-\n-        \/\/ Update file\n-        {\n-            var fileContent = \"New file content\";\n-            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n-                    \"Second commit message\", \"Duke\", \"duke@openjdk.org\");\n-            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n-            assertEquals(fileContent, returnedContents.orElseThrow());\n-        }\n-\n-        \/\/ Make the file huge\n-        {\n-            var fileContent = \"a\".repeat(1024 * 1024 * 10);\n-            gitHubRepo.writeFileContents(fileName, fileContent, branch,\n-                    \"Third commit message\", \"Duke\", \"duke@openjdk.org\");\n-            var returnedContents = gitHubRepo.fileContents(fileName, branch.name());\n-            assertTrue(returnedContents.isPresent());\n-            assertEquals(fileContent.length(), returnedContents.get().length());\n-            assertTrue(fileContent.equals(returnedContents.get()),\n-                    \"Diff for huge file contents, printing first 50 chars of each '\"\n-                    + fileContent.substring(0, 50) + \"' '\" + returnedContents.get().substring(0, 50) + \"'\");\n-        }\n-    }\n-\n-    @Test\n-    void testLastMarkedAsDraftTime() {\n-        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n-        assumeTrue(githubRepoOpt.isPresent());\n-        var githubRepo = githubRepoOpt.get();\n-        var pr = githubRepo.pullRequest(\"129\");\n-        var lastMarkedAsDraftTime = pr.lastMarkedAsDraftTime();\n-        assertEquals(\"2023-02-11T11:51:12Z\", lastMarkedAsDraftTime.get().toString());\n-    }\n-\n-    @Test\n-    void testClosedBy() {\n-        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n-        assumeTrue(githubRepoOpt.isPresent());\n-        var githubRepo = githubRepoOpt.get();\n-        var pr = githubRepo.pullRequest(\"96\");\n-        var user = pr.closedBy();\n-        assertEquals(\"lgxbslgx\", user.get().username());\n-    }\n-\n-    @Test\n-    void testGeneratingUrl() {\n-        var username = settings.getProperty(\"github.user\");\n-        var token = settings.getProperty(\"github.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(GITHUB_REST_URI).build();\n-        var configuration = JSON.object().put(\"weburl\", JSON.object().put(\"pattern\", \"^https:\/\/github.com\/openjdk\/(.*)$\").put(\"replacement\", \"https:\/\/git.openjdk.org\/$1\"));\n-        var githubHost = new GitHubForgeFactory().create(uri, credential, configuration);\n-\n-        var githubRepoOpt = githubHost.repository(\"openjdk\/playground\");\n-        assumeTrue(githubRepoOpt.isPresent());\n-        var githubRepo = githubRepoOpt.get();\n-        var pr = githubRepo.pullRequest(\"129\");\n-\n-        var labelComment = pr.comments().stream()\n-                .filter(comment -> comment.body().contains(\"The following label will be automatically applied to this pull request:\"))\n-                .findFirst()\n-                .get();\n-        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#issuecomment-1426703897\", pr.commentUrl(labelComment).toString());\n-\n-        var reviewComment = pr.reviewComments().get(0);\n-        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#discussion_r1108931186\", pr.reviewCommentUrl(reviewComment).toString());\n-\n-        var review = pr.reviews().get(0);\n-        assertEquals(\"https:\/\/git.openjdk.org\/playground\/pull\/129#pullrequestreview-1302142525\", pr.reviewUrl(review).toString());\n-    }\n-\n-    @Test\n-    void testDeleteDeployKey() {\n-        var githubRepoOpt = githubHost.repository(\"zhaosongzs\/Test\");\n-        assumeTrue(githubRepoOpt.isPresent());\n-        var githubRepo = githubRepoOpt.get();\n-        githubRepo.deleteDeployKeys(Duration.ofHours(24));\n-    }\n-\n-    @Test\n-    void restrictPushAccess() {\n-        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n-        var branch = new Branch(settings.getProperty(\"github.repository.branch\"));\n-        var user = githubHost.user(settings.getProperty(\"github.user2\")).orElseThrow();\n-        gitHubRepo.restrictPushAccess(branch, user);\n-    }\n-\n-    @Test\n-    void testDeployKeyTitles() {\n-        var githubRepoOpt = githubHost.repository(\"zhaosongzs\/Test\");\n-        assumeTrue(githubRepoOpt.isPresent());\n-        var githubRepo = githubRepoOpt.get();\n-        var expiredDeployKeys = githubRepo.deployKeyTitles(Duration.ofMinutes(5));\n-        assertTrue(expiredDeployKeys.contains(\"Test1\"));\n-        assertTrue(expiredDeployKeys.contains(\"Test2\"));\n-    }\n-\n-\n-    @Test\n-    void testBackportCleanIgnoreCopyRight() {\n-        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n-\n-        var pr = gitHubRepo.pullRequest(settings.getProperty(\"github.prId\"));\n-        var hash = new Hash(settings.getProperty(\"github.commitHash\"));\n-        var repoName = pr.repository().forge().search(hash, true);\n-        assertTrue(repoName.isPresent());\n-        var repository = pr.repository().forge().repository(repoName.get());\n-        assertTrue(repository.isPresent());\n-        var commit = repository.get().commit(hash, true);\n-        var backportDiff = commit.orElseThrow().parentDiffs().get(0);\n-        var prDiff = pr.diff();\n-        var isClean = DiffComparator.areFuzzyEqual(backportDiff, prDiff);\n-        assertTrue(isClean);\n-    }\n-\n-    @Test\n-    void testDefaultBranchName() {\n-        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n-        assertEquals(settings.getProperty(\"github.repository.branch\"), gitHubRepo.defaultBranchName());\n-    }\n-\n-    @Test\n-    void testCollaborators() {\n-        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.repository\")).orElseThrow();\n-        var collaborators = gitHubRepo.collaborators();\n-        assertNotNull(collaborators);\n-    }\n-\n-    @Test\n-    void testGetUser() {\n-        var userName = settings.getProperty(\"github.user\");\n-        var userByName = githubHost.user(userName).orElseThrow();\n-        var userById = githubHost.userById(userByName.id()).orElseThrow();\n-        assertEquals(userByName, userById);\n-    }\n-\n-    \/**\n-     * Expects\n-     * github.group: Name of GitHub organization with at least one member\n-     *\/\n-    @Test\n-    void testGroupMembers() {\n-        var groupName = settings.getProperty(\"github.group\");\n-        var membersList = githubHost.groupMembers(groupName);\n-        assertNotNull(membersList);\n-        assertNotEquals(0, membersList.size());\n-    }\n-\n-    \/**\n-     * Expects:\n-     * github.group: Name of GitHub organization\n-     * github.group.member: Name of user which is a member of the organization\n-     * github.group.notmember: Name of user which is not a member of the organization\n-     *\/\n-    @Test\n-    void testGroupMemberState() {\n-        var groupName = settings.getProperty(\"github.group\");\n-        var memberName = settings.getProperty(\"github.group.member\");\n-        var notMemberName = settings.getProperty(\"github.group.notmember\");\n-        var member = githubHost.user(memberName).orElseThrow();\n-        var notMember = githubHost.user(notMemberName).orElseThrow();\n-        assertEquals(MemberState.ACTIVE, githubHost.groupMemberState(groupName, member));\n-        assertEquals(MemberState.MISSING, githubHost.groupMemberState(groupName, notMember));\n-    }\n-\n-    \/**\n-     * Expects:\n-     * github.group: Name of GitHub organization\n-     * github.group.user: Name of user which may or may not be a member already,\n-     *                    but cannot be an owner\n-     *\/\n-    @Test\n-    void testAddGroupMember() {\n-        var groupName = settings.getProperty(\"github.group\");\n-        var userName = settings.getProperty(\"github.group.user\");\n-        var user = githubHost.user(userName).orElseThrow();\n-        githubHost.addGroupMember(groupName, user);\n-        assertNotEquals(MemberState.MISSING, githubHost.groupMemberState(groupName, user));\n-    }\n-\n-    \/**\n-     * Expects:\n-     * github.collaborators.repository: Github repository where user has admin access\n-     * github.collaborators.user: User not currently a collaborator in repository\n-     *\/\n-    @Test\n-    void addRemoveCollaborator() {\n-        var gitHubRepo = githubHost.repository(settings.getProperty(\"github.collaborators.repository\")).orElseThrow();\n-        var userName = settings.getProperty(\"github.collaborators.user\");\n-        var user = gitHubRepo.forge().user(userName).orElseThrow();\n-        gitHubRepo.addCollaborator(user, false);\n-        \/\/ On Github, the user has to accept an invitation before becoming a collaborator\n-        \/\/ so we cannot verify automatically here.\n-        gitHubRepo.removeCollaborator(user);\n-    }\n-}\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/github\/GitHubRestApiTests.java","additions":0,"deletions":388,"binary":false,"changes":388,"status":"deleted"},{"patch":"@@ -0,0 +1,393 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.forge.gitlab;\n+\n+import java.nio.file.Path;\n+import java.time.ZonedDateTime;\n+import java.util.Arrays;\n+import java.util.Properties;\n+import java.util.Set;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.openjdk.skara.host.Credential;\n+import org.openjdk.skara.issuetracker.Comment;\n+import org.openjdk.skara.network.URIBuilder;\n+import org.openjdk.skara.test.TemporaryDirectory;\n+import org.openjdk.skara.test.TestProperties;\n+import org.openjdk.skara.test.EnabledIfTestProperties;\n+import org.openjdk.skara.vcs.Branch;\n+import org.openjdk.skara.vcs.DiffComparator;\n+import org.openjdk.skara.vcs.Hash;\n+\n+import java.io.IOException;\n+import java.time.Duration;\n+import java.util.List;\n+import org.openjdk.skara.vcs.git.GitRepository;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class GitLabIntegrationTests {\n+    private static TestProperties props;\n+    private static GitLabHost gitLabHost;\n+\n+    @BeforeAll\n+    static void beforeAll() throws IOException {\n+        props = TestProperties.load();\n+        if (props.contains(\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\")) {\n+            var username = props.get(\"gitlab.user\");\n+            var token = props.get(\"gitlab.pat\");\n+            var credential = new Credential(username, token);\n+            var uri = URIBuilder.base(props.get(\"gitlab.uri\")).build();\n+            gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Arrays.asList(props.get(\"gitlab.group\").split(\",\")));\n+        }\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\", \"gitlab.merge.request.id\", \"gitlab.review.hash\"})\n+    void testReviews() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var gitLabMergeRequest = gitLabRepo.pullRequest(props.get(\"gitlab.merge.request.id\"));\n+\n+        var reviewList = gitLabMergeRequest.reviews();\n+        var actualHash = reviewList.get(0).hash().orElse(new Hash(\"\"));\n+        assertEquals(props.get(\"gitlab.review.hash\"), actualHash.hex());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\", \"gitlab.merge.request.id\",\n+                              \"gitlab.version.hash\", \"gitlab.version.url\",\n+                              \"gitlab.nonversion.hash\", \"gitlab.nonversion.url\"})\n+    void testFilesUrl() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var gitLabMergeRequest = gitLabRepo.pullRequest(props.get(\"gitlab.merge.request.id\"));\n+\n+        \/\/ Test a version hash\n+        var versionUrl = gitLabMergeRequest.filesUrl(new Hash(props.get(\"gitlab.version.hash\")));\n+        assertEquals(props.get(\"gitlab.version.url\"), versionUrl.toString());\n+\n+        \/\/ Test a non-version hash\n+        var nonVersionUrl = gitLabMergeRequest.filesUrl(new Hash(props.get(\"gitlab.nonversion.hash\")));\n+        assertEquals(props.get(\"gitlab.nonversion.url\"), nonVersionUrl.toString());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\", \"gitlab.merge.request.id\"})\n+    void testLabels() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var gitLabMergeRequest = gitLabRepo.pullRequest(props.get(\"gitlab.merge.request.id\"));\n+\n+        \/\/ Get the labels\n+        var labels = gitLabMergeRequest.labelNames();\n+        assertEquals(1, labels.size());\n+        assertEquals(\"test\", labels.get(0));\n+\n+        \/\/ Add a label\n+        gitLabMergeRequest.addLabel(\"test1\");\n+        labels = gitLabMergeRequest.labelNames();\n+        assertEquals(2, labels.size());\n+        assertEquals(\"test\", labels.get(0));\n+        assertEquals(\"test1\", labels.get(1));\n+\n+        \/\/ Remove a label\n+        gitLabMergeRequest.removeLabel(\"test1\");\n+        labels = gitLabMergeRequest.labelNames();\n+        assertEquals(1, labels.size());\n+        assertEquals(\"test\", labels.get(0));\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\", \"gitlab.merge.request.id\"})\n+    void testOversizeComment() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var gitLabMergeRequest = gitLabRepo.pullRequest(props.get(\"gitlab.merge.request.id\"));\n+\n+        \/\/ Test add comment\n+        Comment comment = gitLabMergeRequest.addComment(\"1\".repeat(1_000_000));\n+        assertTrue(comment.body().contains(\"...\"));\n+        assertTrue(comment.body().contains(\"1\"));\n+\n+        \/\/ Test update comment\n+        Comment updateComment = gitLabMergeRequest.updateComment(comment.id(), \"2\".repeat(2_000_000));\n+        assertTrue(updateComment.body().contains(\"...\"));\n+        assertTrue(updateComment.body().contains(\"2\"));\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\", \"gitlab.repository.branch\"})\n+    void fileContentsNonExisting() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var branch = new Branch(props.get(\"gitlab.repository.branch\"));\n+\n+        var fileName = \"testfile-that-does-not-exist.txt\";\n+        var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+        assertTrue(returnedContents.isEmpty());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\", \"gitlab.repository.branch\"})\n+    void writeFileContents() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var branch = new Branch(props.get(\"gitlab.repository.branch\"));\n+\n+        var fileName = \"testfile.txt\";\n+\n+        \/\/ Create new file\n+        {\n+            var fileContent = \"File content\";\n+            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"First commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Update file\n+        {\n+            var fileContent = \"New file content\";\n+            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Second commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+\n+        \/\/ Make the file huge\n+        {\n+            var fileContent = \"a\".repeat(1024 * 1024 * 10);\n+            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n+                    \"Third commit message\", \"Duke\", \"duke@openjdk.org\");\n+            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n+            assertEquals(fileContent, returnedContents.orElseThrow());\n+        }\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\"})\n+    void branchProtection() throws IOException {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var branchName = \"pr\/4711\";\n+\n+        gitLabRepo.protectBranchPattern(branchName);\n+        \/\/ Don't fail on repeated invocations\n+        gitLabRepo.protectBranchPattern(branchName);\n+\n+        try (var tempDir = new TemporaryDirectory()) {\n+            var localRepoDir = tempDir.path().resolve(\"local\");\n+            var localRepo = GitRepository.clone(gitLabRepo.authenticatedUrl(), localRepoDir, false, null);\n+            var head = localRepo.head();\n+            localRepo.push(head, gitLabRepo.authenticatedUrl(), branchName, true);\n+\n+            gitLabRepo.unprotectBranchPattern(branchName);\n+            \/\/ Don't fail on repeated invocations\n+            gitLabRepo.unprotectBranchPattern(branchName);\n+\n+            gitLabRepo.deleteBranch(branchName);\n+        }\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\", \"gitlab.merge.request.id\"})\n+    void testLastMarkedAsDraftTime() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var gitLabMergeRequest = gitLabRepo.pullRequest(props.get(\"gitlab.merge.request.id\"));\n+\n+        var lastMarkedAsDraftTime = gitLabMergeRequest.lastMarkedAsDraftTime();\n+        assertEquals(\"2023-02-11T08:43:52.408Z\", lastMarkedAsDraftTime.orElseThrow().toString());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\", \"gitlab.targetRef\", \"gitlab.sourceRef\"})\n+    void testDraftMR() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+\n+        var gitLabMergeRequest = gitLabRepo.createPullRequest(gitLabRepo, props.get(\"gitlab.targetRef\"),\n+                props.get(\"gitlab.sourceRef\"), \"Test\", List.of(\"test\"), true);\n+        assertTrue(gitLabMergeRequest.isDraft());\n+        assertEquals(\"Draft: Test\", gitLabMergeRequest.title());\n+\n+        gitLabMergeRequest.makeNotDraft();\n+        gitLabMergeRequest = gitLabRepo.pullRequest(gitLabMergeRequest.id());\n+        assertFalse(gitLabMergeRequest.isDraft());\n+        assertEquals(\"Test\", gitLabMergeRequest.title());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\", \"gitlab.merge.request.id\", \"comment_html_url\",\n+                              \"reviewComment_html_url\", \"review_html_url\"})\n+    void testHtmlUrl() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var gitLabMergeRequest = gitLabRepo.pullRequest(props.get(\"gitlab.merge.request.id\"));\n+\n+        var comment = gitLabMergeRequest.comments().get(0);\n+        assertEquals(props.get(\"comment_html_url\"), gitLabMergeRequest.commentUrl(comment).toString());\n+\n+        var reviewComment = gitLabMergeRequest.reviewComments().get(0);\n+        assertEquals(props.get(\"reviewComment_html_url\"), gitLabMergeRequest.reviewCommentUrl(reviewComment).toString());\n+\n+        var review = gitLabMergeRequest.reviews().get(0);\n+        assertEquals(props.get(\"review_html_url\"), gitLabMergeRequest.reviewUrl(review).toString());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\"})\n+    void testDeleteDeployKey() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        gitLabRepo.deleteDeployKeys(Duration.ofHours(24));\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\"})\n+    void testDeployKeyTitles() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var expiredDeployKeys = gitLabRepo.deployKeyTitles(Duration.ofMinutes(5));\n+        assertTrue(expiredDeployKeys.contains(\"test1\"));\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\", \"gitlab.prId\", \"gitlab.commitHash\"})\n+    void testBackportCleanIgnoreCopyRight() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+\n+        var pr = gitLabRepo.pullRequest(props.get(\"gitlab.prId\"));\n+        var hash = new Hash(props.get(\"gitlab.commitHash\"));\n+        var repoName = pr.repository().forge().search(hash, true);\n+        assertTrue(repoName.isPresent());\n+        var repository = pr.repository().forge().repository(repoName.get());\n+        assertTrue(repository.isPresent());\n+        var commit = repository.get().commit(hash, true);\n+        var backportDiff = commit.orElseThrow().parentDiffs().get(0);\n+        var prDiff = pr.diff();\n+        var isClean = DiffComparator.areFuzzyEqual(backportDiff, prDiff);\n+        assertTrue(isClean);\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"commit.comments.gitlab.repository\", \"commit.comments.hash\"})\n+    void testCommitComments() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"commit.comments.gitlab.repository\")).orElseThrow();\n+        var commitHash = new Hash(props.get(\"commit.comments.hash\"));\n+\n+        var comments = gitLabRepo.commitComments(commitHash);\n+\n+        assertFalse(comments.isEmpty());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"commit.comments.gitlab.repository\", \"commit.comments.local.repository\"})\n+    void testRecentCommitComments() throws IOException {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"commit.comments.gitlab.repository\")).orElseThrow();\n+\n+        var localRepo = GitRepository.get(Path.of(props.get(\"commit.comments.local.repository\"))).orElseThrow();\n+\n+        var comments = gitLabRepo.recentCommitComments(localRepo, Set.of(), List.of(new Branch(\"master\")),\n+                ZonedDateTime.now().minus(Duration.ofDays(4)));\n+\n+        assertFalse(comments.isEmpty());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\", \"gitlab.repository.branch\"})\n+    void testDefaultBranchName() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        assertEquals(props.get(\"gitlab.repository.branch\"), gitLabRepo.defaultBranchName());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.user\"})\n+    void testGetUser() {\n+        var userName = props.get(\"gitlab.user\");\n+        var userByName = gitLabHost.user(userName).orElseThrow();\n+        var userById = gitLabHost.userById(userByName.id()).orElseThrow();\n+        assertEquals(userByName, userById);\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.repository\"})\n+    void testCollaborators() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.repository\")).orElseThrow();\n+        var collaborators = gitLabRepo.collaborators();\n+        assertNotNull(collaborators);\n+    }\n+\n+    \/**\n+     * Expects:\n+     * gitlab.collaborators.repository: GitLab repository where user has admin access\n+     * gitlab.collaborators.user: User not currently a collaborator in repository\n+     *\/\n+    @Test\n+    @EnabledIfTestProperties({\"gitlab.user\", \"gitlab.pat\", \"gitlab.uri\", \"gitlab.group\",\n+                              \"gitlab.collaborators.repository\", \"gitlab.collaborators.user\"})\n+    void addRemoveCollaborator() {\n+        var gitLabRepo = gitLabHost.repository(props.get(\"gitlab.collaborators.repository\")).orElseThrow();\n+        var userName = props.get(\"gitlab.collaborators.user\");\n+        var user = gitLabRepo.forge().user(userName).orElseThrow();\n+        gitLabRepo.addCollaborator(user, false);\n+        {\n+            var collaborators = gitLabRepo.collaborators();\n+            var collaborator = collaborators.stream()\n+                    .filter(c -> c.user().username().equals(userName))\n+                    .findAny().orElseThrow();\n+            assertFalse(collaborator.canPush());\n+        }\n+        gitLabRepo.removeCollaborator(user);\n+        {\n+            var collaborators = gitLabRepo.collaborators();\n+            var collaborator = collaborators.stream()\n+                    .filter(c -> c.user().username().equals(userName))\n+                    .findAny();\n+            assertTrue(collaborator.isEmpty());\n+        }\n+        gitLabRepo.addCollaborator(user, true);\n+        {\n+            var collaborators = gitLabRepo.collaborators();\n+            var collaborator = collaborators.stream()\n+                    .filter(c -> c.user().username().equals(userName))\n+                    .findAny().orElseThrow();\n+            assertTrue(collaborator.canPush());\n+        }\n+        gitLabRepo.removeCollaborator(user);\n+        {\n+            var collaborators = gitLabRepo.collaborators();\n+            var collaborator = collaborators.stream()\n+                    .filter(c -> c.user().username().equals(userName))\n+                    .findAny();\n+            assertTrue(collaborator.isEmpty());\n+        }\n+    }\n+}\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabIntegrationTests.java","additions":393,"deletions":0,"binary":false,"changes":393,"status":"added"},{"patch":"@@ -1,355 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.forge.gitlab;\n-\n-import java.nio.file.Path;\n-import java.time.ZonedDateTime;\n-import java.util.Arrays;\n-import java.util.Properties;\n-import java.util.Set;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n-import org.openjdk.skara.host.Credential;\n-import org.openjdk.skara.issuetracker.Comment;\n-import org.openjdk.skara.network.URIBuilder;\n-import org.openjdk.skara.test.ManualTestSettings;\n-import org.openjdk.skara.test.TemporaryDirectory;\n-import org.openjdk.skara.vcs.Branch;\n-import org.openjdk.skara.vcs.DiffComparator;\n-import org.openjdk.skara.vcs.Hash;\n-\n-import java.io.IOException;\n-import java.time.Duration;\n-import java.util.List;\n-import org.openjdk.skara.vcs.git.GitRepository;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-\n-\/**\n- * To be able to run the tests, you need to remove or comment out the @Disabled annotation first.\n- *\/\n-@Disabled(\"Manual\")\n-public class GitLabRestApiTest {\n-\n-    private GitLabHost gitLabHost;\n-    private Properties settings;\n-\n-    @BeforeEach\n-    void setupGitLab() throws IOException {\n-        settings = ManualTestSettings.loadManualTestSettings();\n-        var username = settings.getProperty(\"gitlab.user\");\n-        var token = settings.getProperty(\"gitlab.pat\");\n-        var credential = new Credential(username, token);\n-        var uri = URIBuilder.base(settings.getProperty(\"gitlab.uri\")).build();\n-        gitLabHost = new GitLabHost(\"gitlab\", uri, false, credential, Arrays.asList(settings.getProperty(\"gitlab.group\").split(\",\")));\n-    }\n-\n-    @Test\n-    void testReviews() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        var gitLabMergeRequest = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.merge.request.id\"));\n-\n-        var reviewList = gitLabMergeRequest.reviews();\n-        var actualHash = reviewList.get(0).hash().orElse(new Hash(\"\"));\n-        assertEquals(settings.getProperty(\"gitlab.review.hash\"), actualHash.hex());\n-    }\n-\n-    @Test\n-    void testFilesUrl() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        var gitLabMergeRequest = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.merge.request.id\"));\n-\n-        \/\/ Test a version hash\n-        var versionUrl = gitLabMergeRequest.filesUrl(new Hash(settings.getProperty(\"gitlab.version.hash\")));\n-        assertEquals(settings.getProperty(\"gitlab.version.url\"), versionUrl.toString());\n-\n-        \/\/ Test a non-version hash\n-        var nonVersionUrl = gitLabMergeRequest.filesUrl(new Hash(settings.getProperty(\"gitlab.nonversion.hash\")));\n-        assertEquals(settings.getProperty(\"gitlab.nonversion.url\"), nonVersionUrl.toString());\n-    }\n-\n-    @Test\n-    void testLabels() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        var gitLabMergeRequest = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.merge.request.id\"));\n-\n-        \/\/ Get the labels\n-        var labels = gitLabMergeRequest.labelNames();\n-        assertEquals(1, labels.size());\n-        assertEquals(\"test\", labels.get(0));\n-\n-        \/\/ Add a label\n-        gitLabMergeRequest.addLabel(\"test1\");\n-        labels = gitLabMergeRequest.labelNames();\n-        assertEquals(2, labels.size());\n-        assertEquals(\"test\", labels.get(0));\n-        assertEquals(\"test1\", labels.get(1));\n-\n-        \/\/ Remove a label\n-        gitLabMergeRequest.removeLabel(\"test1\");\n-        labels = gitLabMergeRequest.labelNames();\n-        assertEquals(1, labels.size());\n-        assertEquals(\"test\", labels.get(0));\n-    }\n-\n-    @Test\n-    void testOversizeComment() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        var gitLabMergeRequest = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.merge.request.id\"));\n-\n-        \/\/ Test add comment\n-        Comment comment = gitLabMergeRequest.addComment(\"1\".repeat(1_000_000));\n-        assertTrue(comment.body().contains(\"...\"));\n-        assertTrue(comment.body().contains(\"1\"));\n-\n-        \/\/ Test update comment\n-        Comment updateComment = gitLabMergeRequest.updateComment(comment.id(), \"2\".repeat(2_000_000));\n-        assertTrue(updateComment.body().contains(\"...\"));\n-        assertTrue(updateComment.body().contains(\"2\"));\n-    }\n-\n-    @Test\n-    void fileContentsNonExisting() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        var branch = new Branch(settings.getProperty(\"gitlab.repository.branch\"));\n-\n-        var fileName = \"testfile-that-does-not-exist.txt\";\n-        var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n-        assertTrue(returnedContents.isEmpty());\n-    }\n-\n-    @Test\n-    void writeFileContents() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        var branch = new Branch(settings.getProperty(\"gitlab.repository.branch\"));\n-\n-        var fileName = \"testfile.txt\";\n-\n-        \/\/ Create new file\n-        {\n-            var fileContent = \"File content\";\n-            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n-                    \"First commit message\", \"Duke\", \"duke@openjdk.org\");\n-            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n-            assertEquals(fileContent, returnedContents.orElseThrow());\n-        }\n-\n-        \/\/ Update file\n-        {\n-            var fileContent = \"New file content\";\n-            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n-                    \"Second commit message\", \"Duke\", \"duke@openjdk.org\");\n-            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n-            assertEquals(fileContent, returnedContents.orElseThrow());\n-        }\n-\n-        \/\/ Make the file huge\n-        {\n-            var fileContent = \"a\".repeat(1024 * 1024 * 10);\n-            gitLabRepo.writeFileContents(fileName, fileContent, branch,\n-                    \"Third commit message\", \"Duke\", \"duke@openjdk.org\");\n-            var returnedContents = gitLabRepo.fileContents(fileName, branch.name());\n-            assertEquals(fileContent, returnedContents.orElseThrow());\n-        }\n-    }\n-\n-    @Test\n-    void branchProtection() throws IOException {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        var branchName = \"pr\/4711\";\n-\n-        gitLabRepo.protectBranchPattern(branchName);\n-        \/\/ Don't fail on repeated invocations\n-        gitLabRepo.protectBranchPattern(branchName);\n-\n-        try (var tempDir = new TemporaryDirectory()) {\n-            var localRepoDir = tempDir.path().resolve(\"local\");\n-            var localRepo = GitRepository.clone(gitLabRepo.authenticatedUrl(), localRepoDir, false, null);\n-            var head = localRepo.head();\n-            localRepo.push(head, gitLabRepo.authenticatedUrl(), branchName, true);\n-\n-            gitLabRepo.unprotectBranchPattern(branchName);\n-            \/\/ Don't fail on repeated invocations\n-            gitLabRepo.unprotectBranchPattern(branchName);\n-\n-            gitLabRepo.deleteBranch(branchName);\n-        }\n-    }\n-\n-    @Test\n-    void testLastMarkedAsDraftTime() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        var gitLabMergeRequest = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.merge.request.id\"));\n-\n-        var lastMarkedAsDraftTime = gitLabMergeRequest.lastMarkedAsDraftTime();\n-        assertEquals(\"2023-02-11T08:43:52.408Z\", lastMarkedAsDraftTime.orElseThrow().toString());\n-    }\n-\n-    @Test\n-    void testDraftMR() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-\n-        var gitLabMergeRequest = gitLabRepo.createPullRequest(gitLabRepo, settings.getProperty(\"gitlab.targetRef\"),\n-                settings.getProperty(\"gitlab.sourceRef\"), \"Test\", List.of(\"test\"), true);\n-        assertTrue(gitLabMergeRequest.isDraft());\n-        assertEquals(\"Draft: Test\", gitLabMergeRequest.title());\n-\n-        gitLabMergeRequest.makeNotDraft();\n-        gitLabMergeRequest = gitLabRepo.pullRequest(gitLabMergeRequest.id());\n-        assertFalse(gitLabMergeRequest.isDraft());\n-        assertEquals(\"Test\", gitLabMergeRequest.title());\n-    }\n-\n-    @Test\n-    void testHtmlUrl() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        var gitLabMergeRequest = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.merge.request.id\"));\n-\n-        var comment = gitLabMergeRequest.comments().get(0);\n-        assertEquals(settings.getProperty(\"comment_html_url\"), gitLabMergeRequest.commentUrl(comment).toString());\n-\n-        var reviewComment = gitLabMergeRequest.reviewComments().get(0);\n-        assertEquals(settings.getProperty(\"reviewComment_html_url\"), gitLabMergeRequest.reviewCommentUrl(reviewComment).toString());\n-\n-        var review = gitLabMergeRequest.reviews().get(0);\n-        assertEquals(settings.getProperty(\"review_html_url\"), gitLabMergeRequest.reviewUrl(review).toString());\n-    }\n-\n-    @Test\n-    void testDeleteDeployKey() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        gitLabRepo.deleteDeployKeys(Duration.ofHours(24));\n-    }\n-\n-    @Test\n-    void testDeployKeyTitles() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        var expiredDeployKeys = gitLabRepo.deployKeyTitles(Duration.ofMinutes(5));\n-        assertTrue(expiredDeployKeys.contains(\"test1\"));\n-    }\n-\n-    @Test\n-    void testBackportCleanIgnoreCopyRight() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-\n-        var pr = gitLabRepo.pullRequest(settings.getProperty(\"gitlab.prId\"));\n-        var hash = new Hash(settings.getProperty(\"gitlab.commitHash\"));\n-        var repoName = pr.repository().forge().search(hash, true);\n-        assertTrue(repoName.isPresent());\n-        var repository = pr.repository().forge().repository(repoName.get());\n-        assertTrue(repository.isPresent());\n-        var commit = repository.get().commit(hash, true);\n-        var backportDiff = commit.orElseThrow().parentDiffs().get(0);\n-        var prDiff = pr.diff();\n-        var isClean = DiffComparator.areFuzzyEqual(backportDiff, prDiff);\n-        assertTrue(isClean);\n-    }\n-\n-    @Test\n-    void testCommitComments() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"commit.comments.gitlab.repository\")).orElseThrow();\n-        var commitHash = new Hash(settings.getProperty(\"commit.comments.hash\"));\n-\n-        var comments = gitLabRepo.commitComments(commitHash);\n-\n-        assertFalse(comments.isEmpty());\n-    }\n-\n-    @Test\n-    void testRecentCommitComments() throws IOException {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"commit.comments.gitlab.repository\")).orElseThrow();\n-\n-        var localRepo = GitRepository.get(Path.of(settings.getProperty(\"commit.comments.local.repository\"))).orElseThrow();\n-\n-        var comments = gitLabRepo.recentCommitComments(localRepo, Set.of(), List.of(new Branch(\"master\")),\n-                ZonedDateTime.now().minus(Duration.ofDays(4)));\n-\n-        assertFalse(comments.isEmpty());\n-    }\n-\n-    @Test\n-    void testDefaultBranchName() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        assertEquals(settings.getProperty(\"gitlab.repository.branch\"), gitLabRepo.defaultBranchName());\n-    }\n-\n-    @Test\n-    void testGetUser() {\n-        var userName = settings.getProperty(\"gitlab.user\");\n-        var userByName = gitLabHost.user(userName).orElseThrow();\n-        var userById = gitLabHost.userById(userByName.id()).orElseThrow();\n-        assertEquals(userByName, userById);\n-    }\n-\n-    @Test\n-    void testCollaborators() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.repository\")).orElseThrow();\n-        var collaborators = gitLabRepo.collaborators();\n-        assertNotNull(collaborators);\n-    }\n-\n-    \/**\n-     * Expects:\n-     * github.collaborators.repository: Github repository where user has admin access\n-     * github.collaborators.user: User not currently a collaborator in repository\n-     *\/\n-    @Test\n-    void addRemoveCollaborator() {\n-        var gitLabRepo = gitLabHost.repository(settings.getProperty(\"gitlab.collaborators.repository\")).orElseThrow();\n-        var userName = settings.getProperty(\"gitlab.collaborators.user\");\n-        var user = gitLabRepo.forge().user(userName).orElseThrow();\n-        gitLabRepo.addCollaborator(user, false);\n-        {\n-            var collaborators = gitLabRepo.collaborators();\n-            var collaborator = collaborators.stream()\n-                    .filter(c -> c.user().username().equals(userName))\n-                    .findAny().orElseThrow();\n-            assertFalse(collaborator.canPush());\n-        }\n-        gitLabRepo.removeCollaborator(user);\n-        {\n-            var collaborators = gitLabRepo.collaborators();\n-            var collaborator = collaborators.stream()\n-                    .filter(c -> c.user().username().equals(userName))\n-                    .findAny();\n-            assertTrue(collaborator.isEmpty());\n-        }\n-        gitLabRepo.addCollaborator(user, true);\n-        {\n-            var collaborators = gitLabRepo.collaborators();\n-            var collaborator = collaborators.stream()\n-                    .filter(c -> c.user().username().equals(userName))\n-                    .findAny().orElseThrow();\n-            assertTrue(collaborator.canPush());\n-        }\n-        gitLabRepo.removeCollaborator(user);\n-        {\n-            var collaborators = gitLabRepo.collaborators();\n-            var collaborator = collaborators.stream()\n-                    .filter(c -> c.user().username().equals(userName))\n-                    .findAny();\n-            assertTrue(collaborator.isEmpty());\n-        }\n-    }\n-}\n","filename":"forge\/src\/test\/java\/org\/openjdk\/skara\/forge\/gitlab\/GitLabRestApiTest.java","additions":0,"deletions":355,"binary":false,"changes":355,"status":"deleted"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.issuetracker.jira;\n+\n+import java.net.URI;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledIf;\n+import org.openjdk.skara.issuetracker.Issue;\n+import org.openjdk.skara.issuetracker.IssueTracker;\n+import org.openjdk.skara.network.URIBuilder;\n+import org.openjdk.skara.proxy.HttpProxy;\n+import org.openjdk.skara.test.TestProperties;\n+import org.openjdk.skara.test.EnabledIfTestProperties;\n+\n+import java.io.IOException;\n+import java.util.Properties;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.openjdk.skara.issuetracker.jira.JiraProject.JEP_NUMBER;\n+\n+class JiraIntegrationTests {\n+    private static TestProperties props;\n+    private static IssueTracker tracker;\n+\n+    @BeforeAll\n+    static void beforeAll() {\n+        props = TestProperties.load();\n+        if (props.contains(\"jira.uri\", \"jira.pat\")) {\n+            HttpProxy.setup();\n+            var uri = URIBuilder.base(props.get(\"jira.uri\")).build();\n+            tracker = new JiraIssueTrackerFactory().createWithPat(uri, \"Bearer \" + props.get(\"jira.pat\"));\n+        }\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"jira.uri\", \"jira.pat\"})\n+    void testJepIssue() {\n+        var project = tracker.project(\"JDK\");\n+\n+        \/\/ Test a closed JEP. Note: all the JEPs may be changed to state `Closed` in the end.\n+        var closedJepOpt = project.jepIssue(\"421\");\n+        assertTrue(closedJepOpt.isPresent());\n+        var closedJep = closedJepOpt.get();\n+        assertEquals(\"Closed\", closedJep.status());\n+        assertEquals(\"Delivered\", closedJep.resolution().orElseThrow());\n+        assertEquals(\"JEP\", closedJep.properties().get(\"issuetype\").asString());\n+        assertEquals(\"421\", closedJep.properties().get(JEP_NUMBER).asString());\n+\n+        \/\/ Test a non-existing JEP (large JEP number).\n+        var nonExistingJepOpt = project.jepIssue(\"100000000000\");\n+        assertTrue(nonExistingJepOpt.isEmpty());\n+\n+        \/\/ Test the wrong JEP (number with alphabet).\n+        var wrongNumberJepOpt = project.jepIssue(\"JDK-123\");\n+        assertTrue(wrongNumberJepOpt.isEmpty());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"jira.uri\", \"jira.pat\", \"jira.project\", \"jira.issue\"})\n+    void testClosingIssue() {\n+        var project = tracker.project(props.get(\"jira.project\"));\n+        var issueId = props.get(\"jira.issue\");\n+\n+        var issue = project.issue(issueId).orElseThrow();\n+        assertNotEquals(Issue.State.CLOSED, issue.state());\n+        issue.setState(Issue.State.CLOSED);\n+\n+        var issue2 = project.issue(issueId).orElseThrow();\n+        assertEquals(Issue.State.CLOSED, issue2.state());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"jira.uri\", \"jira.pat\", \"jira.project\", \"jira.issue\"})\n+    void testIssueEquals() throws IOException {\n+        var project = tracker.project(props.get(\"jira.project\"));\n+        var issueId = props.get(\"jira.issue\");\n+\n+        var issue = project.issue(issueId).orElseThrow();\n+        var issue2 = project.issue(issueId).orElseThrow();\n+\n+        assertEquals(issue, issue2);\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"jira.uri\", \"jira.pat\", \"jira.user.active\"})\n+    void testUserActive() {\n+        var activeUserId = props.get(\"jira.user.active\");\n+        var activeUser = tracker.user(activeUserId).orElseThrow();\n+        assertTrue(activeUser.active());\n+    }\n+\n+    @Test\n+    @EnabledIfTestProperties({\"jira.uri\", \"jira.pat\", \"jira.user.inactive\"})\n+    void testUserInactive() {\n+        var inactiveUserId = props.get(\"jira.user.inactive\");\n+        var inactiveUser = tracker.user(inactiveUserId).orElseThrow();\n+        assertFalse(inactiveUser.active());\n+    }\n+}\n","filename":"issuetracker\/src\/test\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraIntegrationTests.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.issuetracker.jira;\n-\n-import java.net.URI;\n-import org.junit.jupiter.api.BeforeEach;\n-import org.junit.jupiter.api.Disabled;\n-import org.junit.jupiter.api.Test;\n-import org.openjdk.skara.issuetracker.Issue;\n-import org.openjdk.skara.issuetracker.IssueTracker;\n-import org.openjdk.skara.network.URIBuilder;\n-import org.openjdk.skara.proxy.HttpProxy;\n-import org.openjdk.skara.test.ManualTestSettings;\n-\n-import java.io.IOException;\n-import java.util.Properties;\n-\n-import static org.junit.jupiter.api.Assertions.*;\n-import static org.openjdk.skara.issuetracker.jira.JiraProject.JEP_NUMBER;\n-\n-\/**\n- * To be able to run the tests, you need to remove or comment out the @Disabled\n- * annotation first.\n- *\/\n-@Disabled(\"Manual\")\n-public class JiraProjectTests {\n-\n-    private URI jiraUri;\n-    private Properties settings;\n-\n-    @BeforeEach\n-    void setupJira() throws IOException {\n-        HttpProxy.setup();\n-        settings = ManualTestSettings.loadManualTestSettings();\n-        jiraUri = URIBuilder.base(settings.getProperty(\"jira.uri\")).build();\n-    }\n-\n-    private IssueTracker authenticatedJiraHost() {\n-        var pat = settings.getProperty(\"jira.pat\");\n-        return new JiraIssueTrackerFactory().createWithPat(jiraUri, \"Bearer \" + pat);\n-    }\n-\n-    private IssueTracker jiraHost() {\n-        return new JiraIssueTrackerFactory().create(jiraUri, null, null);\n-    }\n-\n-    @Test\n-    void testJepIssue() {\n-        var jiraHost = jiraHost();\n-        var jiraProject = jiraHost.project(\"JDK\");\n-\n-        \/\/ Test a closed JEP. Note: all the JEPs may be changed to state `Closed` in the end.\n-        var closedJepOpt = jiraProject.jepIssue(\"421\");\n-        assertTrue(closedJepOpt.isPresent());\n-        var closedJep = closedJepOpt.get();\n-        assertEquals(\"Closed\", closedJep.status());\n-        assertEquals(\"Delivered\", closedJep.resolution().orElseThrow());\n-        assertEquals(\"JEP\", closedJep.properties().get(\"issuetype\").asString());\n-        assertEquals(\"421\", closedJep.properties().get(JEP_NUMBER).asString());\n-\n-        \/\/ Test a non-existing JEP (large JEP number).\n-        var nonExistingJepOpt = jiraProject.jepIssue(\"100000000000\");\n-        assertTrue(nonExistingJepOpt.isEmpty());\n-\n-        \/\/ Test the wrong JEP (number with alphabet).\n-        var wrongNumberJepOpt = jiraProject.jepIssue(\"JDK-123\");\n-        assertTrue(wrongNumberJepOpt.isEmpty());\n-    }\n-\n-    @Test\n-    void testClosingIssue() {\n-        var projectId = settings.getProperty(\"jira.project\");\n-        var issueId = settings.getProperty(\"jira.issue\");\n-        var jiraHost = authenticatedJiraHost();\n-        var jiraProject = jiraHost.project(projectId);\n-        var jiraIssue = jiraProject.issue(issueId).orElseThrow();\n-        assertNotEquals(Issue.State.CLOSED, jiraIssue.state());\n-        jiraIssue.setState(Issue.State.CLOSED);\n-        var jiraIssue2 = jiraProject.issue(issueId).orElseThrow();\n-        assertEquals(Issue.State.CLOSED, jiraIssue2.state());\n-    }\n-\n-    @Test\n-    void testIssueEquals() throws IOException {\n-        var settings = ManualTestSettings.loadManualTestSettings();\n-        var project = settings.getProperty(\"jira.project\");\n-        var issueId = settings.getProperty(\"jira.issue\");\n-        var jiraHost = authenticatedJiraHost();\n-        var jiraProject = jiraHost.project(project);\n-\n-        var issue = jiraProject.issue(issueId).orElseThrow();\n-        var issue2 = jiraProject.issue(issueId).orElseThrow();\n-\n-        assertEquals(issue, issue2);\n-    }\n-\n-    @Test\n-    void testUserActive() {\n-        var jiraHost = authenticatedJiraHost();\n-        var activeUserId = settings.getProperty(\"jira.user.active\");\n-        var activeUser = jiraHost.user(activeUserId).orElseThrow();\n-        assertTrue(activeUser.active());\n-\n-        var inactiveUserId = settings.getProperty(\"jira.user.inactive\");\n-        var inactiveUser = jiraHost.user(inactiveUserId).orElseThrow();\n-        assertFalse(inactiveUser.active());\n-    }\n-}\n","filename":"issuetracker\/src\/test\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProjectTests.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.test;\n+\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import java.lang.annotation.ElementType;\n+import java.util.ArrayList;\n+\n+import org.junit.jupiter.api.extension.ConditionEvaluationResult;\n+import org.junit.jupiter.api.extension.ExecutionCondition;\n+import org.junit.jupiter.api.extension.ExtensionContext;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+@Retention(RetentionPolicy.RUNTIME)\n+@Target(ElementType.METHOD)\n+@ExtendWith(EnabledIfTestProperties.EnabledIfTestPropertiesCondition.class)\n+public @interface EnabledIfTestProperties {\n+    String[] value() default \"\";\n+    class EnabledIfTestPropertiesCondition implements ExecutionCondition {\n+        @Override\n+        public ConditionEvaluationResult evaluateExecutionCondition(ExtensionContext context) {\n+            var props = TestProperties.load();\n+            if (!props.arePresent()) {\n+                return ConditionEvaluationResult.disabled(\"No '\" + TestProperties.FILENAME + \"' file found\");\n+            }\n+            var annotation = context.getTestMethod().orElseThrow().getAnnotation(EnabledIfTestProperties.class);\n+            var missing = new ArrayList<String>();\n+            for (var val : annotation.value()) {\n+                if (!props.contains(val)) {\n+                    missing.add(val);\n+                }\n+            }\n+            if (!missing.isEmpty()) {\n+                return ConditionEvaluationResult.disabled(\"Missing the following keys in the \" + TestProperties.FILENAME +\n+                                                          \" file: \" + String.join(\", \", missing));\n+            }\n+            return ConditionEvaluationResult.enabled(\"All required properties are present in the file \" + TestProperties.FILENAME);\n+        }\n+    }\n+}\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/EnabledIfTestProperties.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package org.openjdk.skara.test;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.file.*;\n-import java.util.Properties;\n-\n-\/**\n- * This class provides settings for manual tests which the user provides\n- * through the manual-test-settings.properties file in the root of the project.\n- *\/\n-public class ManualTestSettings {\n-\n-    public static final String MANUAL_TEST_SETTINGS_FILE = \"manual-test-settings.properties\";\n-\n-    public static Properties loadManualTestSettings() throws IOException {\n-        var dir = Paths.get(\".\").toAbsolutePath();\n-        Path file = dir.resolve(MANUAL_TEST_SETTINGS_FILE);\n-        while (!Files.exists(file)) {\n-            dir = dir.getParent();\n-            if (!Files.isDirectory(dir)) {\n-                throw new RuntimeException(\"Could not find \" + MANUAL_TEST_SETTINGS_FILE);\n-            }\n-            file = dir.resolve(MANUAL_TEST_SETTINGS_FILE);\n-        }\n-        var properties = new Properties();\n-        try (InputStream in = Files.newInputStream(file)) {\n-            properties.load(in);\n-        }\n-        return properties;\n-    }\n-}\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/ManualTestSettings.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.skara.test;\n+\n+import java.io.*;\n+import java.nio.file.*;\n+import java.util.Properties;\n+\n+public class TestProperties {\n+    private static Properties PROPERTIES;\n+    private static Path FILE;\n+\n+    static final String FILENAME = \"test.properties\";\n+\n+    private TestProperties() {\n+    }\n+\n+    private static Path findFileUpToRoot(String filename) {\n+        var dir = Path.of(\".\").toAbsolutePath();\n+        var f = dir.resolve(filename);\n+        while (!Files.exists(f)) {\n+            dir = dir.getParent();\n+            if (dir == null) {\n+                return null;\n+            }\n+            f = dir.resolve(filename);\n+        }\n+        return f;\n+    }\n+\n+    private static Properties load(Path f) throws IOException {\n+        var properties = new Properties();\n+        try (InputStream in = Files.newInputStream(f)) {\n+            properties.load(in);\n+        }\n+        if (properties.getProperty(\"properties.include\") != null) {\n+            var includedFile = Path.of(properties.getProperty(\"properties.include\"));\n+            if (!includedFile.isAbsolute()) {\n+                throw new IOException(\"Cannot use relative paths for including properties: \" + includedFile);\n+            }\n+            var included = load(includedFile);\n+            for (var key : included.keySet()) {\n+                \/\/ Allow included properties to be overridden\n+                if (properties.getProperty((String) key) == null) {\n+                    properties.setProperty((String) key, included.getProperty((String) key));\n+                }\n+            }\n+        }\n+        return properties;\n+    }\n+\n+    public static TestProperties load() {\n+        \/\/ Only load properties once (no need to use locking, races are benign)\n+        if (PROPERTIES != null) {\n+            return new TestProperties();\n+        }\n+\n+        FILE = findFileUpToRoot(FILENAME);\n+        if (FILE == null) {\n+            return new TestProperties();\n+        }\n+        try {\n+            PROPERTIES = load(FILE);\n+            return new TestProperties();\n+        } catch (IOException e) {\n+            throw new UncheckedIOException(e);\n+        }\n+    }\n+\n+    public boolean arePresent() {\n+        return PROPERTIES != null;\n+    }\n+\n+    public String get(String key) {\n+        if (!arePresent()) {\n+            throw new IllegalStateException(\"Test properties have not been loaded\");\n+        }\n+        if (!contains(key)) {\n+            throw new IllegalArgumentException(\"Could not find key '\" + key + \"' in: \" + FILE);\n+        }\n+        return PROPERTIES.getProperty(key);\n+    }\n+\n+    public boolean contains(String... keys) {\n+        if (!arePresent()) {\n+            return false;\n+        }\n+\n+        for (var key : keys) {\n+            if (PROPERTIES.getProperty(key) == null) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+}\n","filename":"test\/src\/main\/java\/org\/openjdk\/skara\/test\/TestProperties.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}