{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import static org.openjdk.skara.bots.pr.CheckRun.CSR_PROCESS_LINK;\n@@ -43,1 +44,1 @@\n-        writer.println(\"usage: `\/csr [needed|unneeded]`, requires that the issue the pull request refers to links to an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request.\");\n+        writer.println(\"usage: `\/csr [needed|unneeded]`, requires that the issue the pull request refers to links to an approved [CSR](\" + CSR_PROCESS_LINK + \") request.\");\n@@ -48,2 +49,2 @@\n-                      \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n-                      \"is needed for this pull request.\");\n+                \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n+                \"is needed for this pull request.\");\n@@ -55,2 +56,2 @@\n-                      \"[JBS](https:\/\/bugs.openjdk.org) to be able to link it to a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request. To refer this pull request to \" +\n-                      \"an issue in JBS, please update the title of this pull request to just the issue ID.\");\n+                \"[JBS](https:\/\/bugs.openjdk.org) to be able to link it to a [CSR](\" + CSR_PROCESS_LINK + \") request. To refer this pull request to \" +\n+                \"an issue in JBS, please update the title of this pull request to just the issue ID.\");\n@@ -60,1 +61,1 @@\n-        writer.println(\"@\" + pr.author().username() + \" please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request, \" +\n+        writer.println(\"@\" + pr.author().username() + \" please create a [CSR](\" + CSR_PROCESS_LINK + \") request, \" +\n@@ -66,1 +67,1 @@\n-        writer.println(\"@\" + pr.author().username() + \" please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request for issue \" +\n+        writer.println(\"@\" + pr.author().username() + \" please create a [CSR](\" + CSR_PROCESS_LINK + \") request for issue \" +\n@@ -72,1 +73,1 @@\n-        writer.println(\"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+        writer.println(\"determined that a [CSR](\" + CSR_PROCESS_LINK + \") request \" +\n@@ -129,1 +130,1 @@\n-            reply.println(\"an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+            reply.println(\"an approved [CSR](\" + CSR_PROCESS_LINK + \") request \" +\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommand.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -76,0 +76,1 @@\n+    private static final String BACKPORT_CSR_MARKER = \"<!-- PullRequestBot backport csr comment -->\";\n@@ -77,0 +78,1 @@\n+    protected static final String CSR_PROCESS_LINK = \"https:\/\/wiki.openjdk.org\/display\/csr\/Main\";\n@@ -168,1 +170,1 @@\n-    private Map<String, IssueTrackerIssue> issueToCsrMap(Map<Issue, Optional<IssueTrackerIssue>> regularIssuesMap, JdkVersion version) {\n+    private Map<String, IssueTrackerIssue> issueToCsrMap(Map<String, List<Link>> issueToCsrLinksMap, JdkVersion version) {\n@@ -173,5 +175,7 @@\n-        for (var issue : regularIssuesMap.values()) {\n-            if (issue.isPresent()) {\n-                var csrIssue = Backports.findCsr(issue.get(), version);\n-                csrIssue.ifPresent(csr -> csrIssueMap.put(issue.get().id(), csr));\n-            }\n+        for (var entry : issueToCsrLinksMap.entrySet()) {\n+            var csrList = entry.getValue().stream()\n+                    .map(Link::issue)\n+                    .filter(Optional::isPresent)\n+                    .map(Optional::get)\n+                    .toList();\n+            Backports.findClosestIssue(csrList, version).ifPresent(csr -> csrIssueMap.put(entry.getKey(), csr));\n@@ -297,1 +301,1 @@\n-        if (csrIssues.isEmpty() && pr.labelNames().contains(\"csr\")) {\n+        if (csrIssues.isEmpty() && newLabels.contains(\"csr\")) {\n@@ -756,1 +760,1 @@\n-                            if (!pr.labelNames().contains(\"backport\") &&\n+                            if (!newLabels.contains(\"backport\") &&\n@@ -1350,1 +1354,2 @@\n-            var issueToCsrMap = issueToCsrMap(regularIssuesMap, version);\n+            var issueToCsrLinksMap = issueToCsrLinksMap(regularIssuesMap);\n+            var issueToCsrMap = issueToCsrMap(issueToCsrLinksMap, version);\n@@ -1352,3 +1357,0 @@\n-            if (needUpdateAdditionalProgresses) {\n-                additionalProgresses = botSpecificProgresses(regularIssuesMap, csrIssues, jepIssue, version);\n-            }\n@@ -1359,0 +1361,7 @@\n+            \/\/ In a backport PR, Check if one of associated issues has a resolved CSR for a different fixVersion\n+            updateBackportCSRLabel(issueToCsrLinksMap, issueToCsrMap);\n+\n+            if (needUpdateAdditionalProgresses) {\n+                additionalProgresses = botSpecificProgresses(regularIssuesMap, csrIssues, jepIssue, version);\n+            }\n+\n@@ -1509,1 +1518,1 @@\n-                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                if (!newLabels.contains(CSR_LABEL)) {\n@@ -1522,1 +1531,1 @@\n-                if (!pr.labelNames().contains(CSR_LABEL)) {\n+                if (!newLabels.contains(CSR_LABEL)) {\n@@ -1538,1 +1547,1 @@\n-                } else if (!pr.labelNames().contains(CSR_LABEL)) {\n+                } else if (!newLabels.contains(CSR_LABEL)) {\n@@ -1550,1 +1559,1 @@\n-        if (notExistingUnresolvedCSR && (!isCSRNeeded(comments) || existingApprovedCSR) && pr.labelNames().contains(CSR_LABEL)) {\n+        if (notExistingUnresolvedCSR && (!isCSRNeeded(comments) || existingApprovedCSR) && newLabels.contains(CSR_LABEL)) {\n@@ -1556,0 +1565,26 @@\n+    private void updateBackportCSRLabel(Map<String, List<Link>> issueToCsrLinksMap, Map<String, IssueTrackerIssue> issueToCsrMap) {\n+        if (newLabels.contains(\"backport\") && !newLabels.contains(\"csr\") && issueToCsrMap.isEmpty() && !isCSRManuallyUnneeded(comments)) {\n+            boolean hasResolvedCSR = issueToCsrLinksMap.values().stream()\n+                    .flatMap(List::stream)\n+                    .map(Link::issue)\n+                    .filter(Optional::isPresent)\n+                    .map(Optional::get)\n+                    .anyMatch(csrIssue -> csrIssue.state() == org.openjdk.skara.issuetracker.Issue.State.CLOSED &&\n+                            csrIssue.resolution().map(res -> res.equals(\"Approved\")).orElse(false));\n+\n+            if (hasResolvedCSR) {\n+                newLabels.add(\"csr\");\n+                var existing = findComment(BACKPORT_CSR_MARKER);\n+                if (existing.isPresent()) {\n+                    return;\n+                }\n+                pr.addComment(\"At least one of the issues associated with this backport has a resolved \" +\n+                        \"[CSR](\" + CSR_PROCESS_LINK + \") for a different version. As this means that this \" +\n+                        \"backport may also need a CSR, the `csr` label is being added to this pull request \" +\n+                        \"to signal this potential requirement. The command `\/csr unneeded` can be used to \" +\n+                        \"remove the label in case a CSR is not needed.\" +\n+                        BACKPORT_CSR_MARKER);\n+            }\n+        }\n+    }\n+\n@@ -1569,0 +1604,13 @@\n+    private boolean isCSRManuallyUnneeded(List<Comment> comments) {\n+        for (int i = comments.size() - 1; i >= 0; i--) {\n+            var comment = comments.get(i);\n+            if (comment.body().contains(CSR_NEEDED_MARKER)) {\n+                return false;\n+            }\n+            if (comment.body().contains(CSR_UNNEEDED_MARKER)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n@@ -1597,0 +1645,14 @@\n+    private Map<String, List<Link>> issueToCsrLinksMap(Map<Issue, Optional<IssueTrackerIssue>> regularIssuesMap) {\n+        Map<String, List<Link>> issueToCsrLinksMap = new HashMap<>();\n+        for (var issue : regularIssuesMap.values()) {\n+            if (issue.isPresent()) {\n+                Backports.csrLink(issue.get())\n+                        .ifPresent(link -> issueToCsrLinksMap.computeIfAbsent(issue.get().id(), k -> new ArrayList<>()).add(link));\n+                for (var backportIssue : Backports.findBackports(issue.get(), false)) {\n+                    Backports.csrLink(backportIssue)\n+                            .ifPresent(backportCsrlink -> issueToCsrLinksMap.computeIfAbsent(issue.get().id(), k -> new ArrayList<>()).add(backportCsrlink));\n+                }\n+            }\n+        }\n+        return issueToCsrLinksMap;\n+    }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":78,"deletions":16,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import static org.openjdk.skara.bots.pr.CheckRun.CSR_PROCESS_LINK;\n@@ -84,1 +85,1 @@\n-                                          \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                                          \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n@@ -95,1 +96,1 @@\n-            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+            assertLastCommentContains(pr, \"determined that a [CSR](\" + CSR_PROCESS_LINK + \") request \" +\n@@ -107,1 +108,1 @@\n-                                          \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                                          \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n@@ -209,1 +210,1 @@\n-                                          \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) \" +\n+                                          \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") \" +\n@@ -277,1 +278,1 @@\n-                                          \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                                          \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n@@ -341,1 +342,1 @@\n-                                          \"to an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request.\");\n+                                          \"to an approved [CSR](\" + CSR_PROCESS_LINK + \") request.\");\n@@ -387,1 +388,1 @@\n-                                          \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) \" +\n+                                          \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") \" +\n@@ -390,1 +391,1 @@\n-            assertLastCommentContains(pr, \"to be able to link it to a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request. To refer this pull request to an issue in JBS\");\n+            assertLastCommentContains(pr, \"to be able to link it to a [CSR](\" + CSR_PROCESS_LINK + \") request. To refer this pull request to an issue in JBS\");\n@@ -437,1 +438,1 @@\n-                                          \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                                          \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n@@ -508,1 +509,1 @@\n-            assertLastCommentContains(pr, \"an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request is already required for this pull request.\");\n+            assertLastCommentContains(pr, \"an approved [CSR](\" + CSR_PROCESS_LINK + \") request is already required for this pull request.\");\n@@ -534,1 +535,1 @@\n-            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+            assertLastCommentContains(pr, \"determined that a [CSR](\" + CSR_PROCESS_LINK + \") request \" +\n@@ -594,1 +595,1 @@\n-            assertLastCommentContains(pr, \"an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request is already required for this pull request.\");\n+            assertLastCommentContains(pr, \"an approved [CSR](\" + CSR_PROCESS_LINK + \") request is already required for this pull request.\");\n@@ -620,1 +621,1 @@\n-            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+            assertLastCommentContains(pr, \"determined that a [CSR](\" + CSR_PROCESS_LINK + \") request \" +\n@@ -662,1 +663,1 @@\n-                                          \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                                          \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n@@ -723,1 +724,1 @@\n-                                          \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                                          \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n@@ -778,1 +779,1 @@\n-                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n@@ -850,0 +851,8 @@\n+            \/\/ \"csr\" label should be added automatically because the main issue has a resolved CSR\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertEquals(3 ,pr.store().comments().size());\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion (No fixVersion in .jcheck\/conf) to be approved (needs to be created)\"));\n+            assertLastCommentContains(pr, \"this backport may also need a CSR\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertEquals(3 ,pr.store().comments().size());\n+\n@@ -855,6 +864,2 @@\n-            assertLastCommentContains(pr, \"has indicated that a \" +\n-                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n-                    \"is needed for this pull request.\");\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request\");\n-            assertLastCommentContains(pr, \"with the correct fix version\");\n-            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            assertLastCommentContains(pr, \"@user1 an approved [CSR](\" + CSR_PROCESS_LINK + \") request is already required for this pull request.\");\n+\n@@ -866,1 +871,1 @@\n-            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+            assertLastCommentContains(pr, \"determined that a [CSR](\" + CSR_PROCESS_LINK + \") request \" +\n@@ -869,0 +874,6 @@\n+            \/\/ Run pr bot again, \"csr\" label should not be added because reviewer issued \"\/csr unneeded\"\n+            assertEquals(7 ,pr.store().comments().size());\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertEquals(7 ,pr.store().comments().size());\n+\n@@ -886,6 +897,2 @@\n-            assertLastCommentContains(pr, \"has indicated that a \" +\n-                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n-                    \"is needed for this pull request.\");\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request\");\n-            assertLastCommentContains(pr, \"with the correct fix version\");\n-            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            assertLastCommentContains(pr, \"@user1 an approved [CSR](\" + CSR_PROCESS_LINK + \") request is already required for this pull request.\");\n+\n@@ -897,1 +904,1 @@\n-            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+            assertLastCommentContains(pr, \"determined that a [CSR](\" + CSR_PROCESS_LINK + \") request \" +\n@@ -917,6 +924,2 @@\n-            assertLastCommentContains(pr, \"has indicated that a \" +\n-                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n-                    \"is needed for this pull request.\");\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request\");\n-            assertLastCommentContains(pr, \"with the correct fix version\");\n-            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            assertLastCommentContains(pr, \"@user1 an approved [CSR](\" + CSR_PROCESS_LINK + \") request is already required for this pull request.\");\n+\n@@ -928,1 +931,1 @@\n-            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+            assertLastCommentContains(pr, \"determined that a [CSR](\" + CSR_PROCESS_LINK + \") request \" +\n@@ -964,6 +967,2 @@\n-            assertLastCommentContains(pr, \"has indicated that a \" +\n-                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n-                    \"is needed for this pull request.\");\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request\");\n-            assertLastCommentContains(pr, \"with the correct fix version\");\n-            assertLastCommentContains(pr, \"This pull request cannot be integrated until the CSR request is approved.\");\n+            assertLastCommentContains(pr, \"@user1 an approved [CSR](\" + CSR_PROCESS_LINK + \") request is already required for this pull request.\");\n+\n@@ -975,1 +974,1 @@\n-            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+            assertLastCommentContains(pr, \"determined that a [CSR](\" + CSR_PROCESS_LINK + \") request \" +\n@@ -991,1 +990,1 @@\n-            assertLastCommentContains(pr, \"an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request is already required for this pull request.\");\n+            assertLastCommentContains(pr, \"an approved [CSR](\" + CSR_PROCESS_LINK + \") request is already required for this pull request.\");\n@@ -1020,1 +1019,1 @@\n-            assertLastCommentContains(pr, \"an approved [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request is already required for this pull request.\");\n+            assertLastCommentContains(pr, \"an approved [CSR](\" + CSR_PROCESS_LINK + \") request is already required for this pull request.\");\n@@ -1030,1 +1029,1 @@\n-            assertLastCommentContains(pr, \"determined that a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request \" +\n+            assertLastCommentContains(pr, \"determined that a [CSR](\" + CSR_PROCESS_LINK + \") request \" +\n@@ -1039,1 +1038,1 @@\n-                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n@@ -1041,1 +1040,1 @@\n-            assertLastCommentContains(pr, \"please create a [CSR](https:\/\/wiki.openjdk.org\/display\/csr\/Main) request\");\n+            assertLastCommentContains(pr, \"please create a [CSR](\" + CSR_PROCESS_LINK + \") request\");\n@@ -1105,1 +1104,1 @@\n-                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n@@ -1147,1 +1146,1 @@\n-                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n@@ -1278,1 +1277,1 @@\n-                    \"[compatibility and specification](https:\/\/wiki.openjdk.org\/display\/csr\/Main) (CSR) request \" +\n+                    \"[compatibility and specification](\" + CSR_PROCESS_LINK + \") (CSR) request \" +\n@@ -1285,0 +1284,113 @@\n+\n+    @Test\n+    void testBackportCsrLabel(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var bot = credentials.getHostedRepository();\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(author.forge().currentUser().id())\n+                    .addReviewer(reviewer.forge().currentUser().id());\n+\n+            var issue = issueProject.createIssue(\"This is the primary issue\", List.of(), Map.of());\n+            issue.setState(Issue.State.CLOSED);\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+\n+            var csr = issueProject.createIssue(\"This is the primary CSR\", List.of(), Map.of());\n+            csr.setState(Issue.State.CLOSED);\n+            csr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            csr.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+            csr.setProperty(\"resolution\", JSON.object().put(\"name\", \"Approved\"));\n+            issue.addLink(Link.create(csr, \"csr for\").build());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .enableCsr(true)\n+                    .censusRepo(censusBuilder.build())\n+                    .issueProject(issueProject)\n+                    .issuePRMap(issuePRMap)\n+                    .build();\n+            var csrIssueBot = new CSRIssueBot(issueProject, List.of(author), Map.of(bot.name(), prBot), issuePRMap);\n+\n+            \/\/ Run issue prBot once to initialize lastUpdatedAt\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Push a commit to the jdk18 branch\n+            var jdk18Branch = localRepo.branch(masterHash, \"jdk18\");\n+            localRepo.checkout(jdk18Branch);\n+            var newFile = localRepo.root().resolve(\"a_new_file.txt\");\n+            Files.writeString(newFile, \"a_new_file\");\n+            localRepo.add(newFile);\n+            var issueNumber = issue.id().split(\"-\")[1];\n+            var commitMessage = issueNumber + \": This is the primary issue\\n\\nReviewed-by: integrationreviewer2\";\n+            var commitHash = localRepo.commit(commitMessage, \"integrationcommitter1\", \"integrationcommitter1@openjdk.org\");\n+            localRepo.push(commitHash, author.authenticatedUrl(), \"jdk18\", true);\n+\n+            \/\/ Create a backport issue whose fix version is 17\n+            var backportIssue = issueProject.createIssue(\"This is the backport issue\", List.of(), Map.of());\n+            backportIssue.setProperty(\"issuetype\", JSON.of(\"Backport\"));\n+            backportIssue.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            backportIssue.setState(Issue.State.OPEN);\n+            issue.addLink(Link.create(backportIssue, \"backported by\").build());\n+\n+            \/\/ Create a backport CSR whose fix version is 17.\n+            var backportCsr = issueProject.createIssue(\"This is the backport CSR\", List.of(), Map.of());\n+            backportCsr.setProperty(\"issuetype\", JSON.of(\"CSR\"));\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"17\"));\n+            backportCsr.setState(Issue.State.OPEN);\n+            backportIssue.addLink(Link.create(backportCsr, \"csr for\").build());\n+\n+            \/\/ Set the `version` in `.jcheck\/conf` as 17 which is an available version.\n+            localRepo.checkout(localRepo.defaultBranch());\n+            var defaultConf = Files.readString(localRepo.root().resolve(\".jcheck\/conf\"), StandardCharsets.UTF_8);\n+            var newConf = defaultConf.replace(\"version=0.1\", \"version=17\");\n+            Files.writeString(localRepo.root().resolve(\".jcheck\/conf\"), newConf, StandardCharsets.UTF_8);\n+            localRepo.add(localRepo.root().resolve(\".jcheck\/conf\"));\n+            var confHash = localRepo.commit(\"Set the version as 17\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(confHash, author.authenticatedUrl(), \"master\", true);\n+            createBackport(localRepo, author, confHash, \"edit1\");\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit1\", \"Backport \" + commitHash);\n+            PullRequestUtils.postPullRequestLinkComment(issue, pr);\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires CSR request [TEST-4](http:\/\/localhost\/project\/testTEST-4) to be approved\"));\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            \/\/ The bot shouldn't post backport csr comment because there is a backport csr\n+            assertTrue(pr.store().comments().stream().noneMatch(comment -> comment.body().contains(\"this backport may also need a CSR\")));\n+\n+            \/\/ Change the fixVersion of the backportCSR\n+            backportCsr.setProperty(\"fixVersions\", JSON.array().add(\"19\"));\n+            TestBotRunner.runPeriodicItems(csrIssueBot);\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().body().contains(\"- [ ] Change requires a CSR request matching fixVersion 17 to be approved (needs to be created)\"));\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            \/\/ The bot shouldn't post backport csr comment because csr label is still there\n+            assertTrue(pr.store().comments().stream().noneMatch(comment -> comment.body().contains(\"this backport may also need a CSR\")));\n+\n+            \/\/ Use '\/csr unneeded'\n+            var prAsReviewer = reviewer.pullRequest(pr.id());\n+            prAsReviewer.addComment(\"\/csr unneeded\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().labelNames().contains(\"csr\"));\n+            \/\/ The bot shouldn't post backport csr comment because csr label has been removed by command\n+            assertTrue(pr.store().comments().stream().noneMatch(comment -> comment.body().contains(\"this backport may also need a CSR\")));\n+\n+            \/\/ Require CSR again\n+            prAsReviewer.addComment(\"\/csr\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().labelNames().contains(\"csr\"));\n+            \/\/ The bot shouldn't post backport csr comment because csr label has been added by command\n+            assertTrue(pr.store().comments().stream().noneMatch(comment -> comment.body().contains(\"this backport may also need a CSR\")));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CSRCommandTests.java","additions":164,"deletions":52,"binary":false,"changes":216,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -319,1 +319,1 @@\n-    private static Optional<Link> csrLink(IssueTrackerIssue issue) {\n+    public static Optional<Link> csrLink(IssueTrackerIssue issue) {\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/Backports.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}