{"files":[{"patch":"@@ -170,1 +170,1 @@\n-    private Map<String, IssueTrackerIssue> issueToCsrMap(Map<String, List<Link>> issueToCsrLinksMap, JdkVersion version) {\n+    private Map<String, IssueTrackerIssue> issueToCsrMap(Map<String, List<IssueTrackerIssue>> issueToAllCsrsMap, JdkVersion version) {\n@@ -175,6 +175,2 @@\n-        for (var entry : issueToCsrLinksMap.entrySet()) {\n-            var csrList = entry.getValue().stream()\n-                    .map(Link::issue)\n-                    .filter(Optional::isPresent)\n-                    .map(Optional::get)\n-                    .toList();\n+        for (var entry : issueToAllCsrsMap.entrySet()) {\n+            var csrList = entry.getValue();\n@@ -1354,2 +1350,2 @@\n-            var issueToAllCsrLinksMap = issueToCsrLinksMap(regularIssuesMap);\n-            var issueToCsrMap = issueToCsrMap(issueToAllCsrLinksMap, version);\n+            var issueToAllCsrsMap = issueToAllCsrsMap(regularIssuesMap);\n+            var issueToCsrMap = issueToCsrMap(issueToAllCsrsMap, version);\n@@ -1362,1 +1358,1 @@\n-            updateBackportCSRLabel(issueToAllCsrLinksMap, issueToCsrMap);\n+            updateBackportCSRLabel(issueToAllCsrsMap, issueToCsrMap);\n@@ -1565,1 +1561,1 @@\n-    private void updateBackportCSRLabel(Map<String, List<Link>> issueToCsrLinksMap, Map<String, IssueTrackerIssue> issueToCsrMap) {\n+    private void updateBackportCSRLabel(Map<String, List<IssueTrackerIssue>> issueToAllCsrsMap, Map<String, IssueTrackerIssue> issueToCsrMap) {\n@@ -1567,1 +1563,1 @@\n-            boolean hasResolvedCSR = issueToCsrLinksMap.values().stream()\n+            boolean hasResolvedCSR = issueToAllCsrsMap.values().stream()\n@@ -1569,3 +1565,0 @@\n-                    .map(Link::issue)\n-                    .filter(Optional::isPresent)\n-                    .map(Optional::get)\n@@ -1649,12 +1642,20 @@\n-        Map<String, List<Link>> issueToCsrLinksMap = new HashMap<>();\n-        for (var issue : regularIssuesMap.values()) {\n-            if (issue.isPresent()) {\n-                Backports.csrLink(issue.get())\n-                        .ifPresent(link -> issueToCsrLinksMap.computeIfAbsent(issue.get().id(), k -> new ArrayList<>()).add(link));\n-                for (var backportIssue : Backports.findBackports(issue.get(), false)) {\n-                    Backports.csrLink(backportIssue)\n-                            .ifPresent(backportCsrlink -> issueToCsrLinksMap.computeIfAbsent(issue.get().id(), k -> new ArrayList<>()).add(backportCsrlink));\n-                }\n-            }\n-        }\n-        return issueToCsrLinksMap;\n+        Map<String, List<IssueTrackerIssue>> issueToAllCsrsMap = new HashMap<>();\n+        regularIssuesMap.values().stream()\n+                .filter(Optional::isPresent)\n+                .map(Optional::get)\n+                .forEach(issue -> {\n+                    Backports.csrLink(issue)\n+                            .flatMap(Link::issue)\n+                            .ifPresent(csr -> issueToAllCsrsMap.computeIfAbsent(issue.id(), k -> new ArrayList<>()).add(csr));\n+\n+                    Backports.findBackports(issue, false).stream()\n+                            .map(Backports::csrLink)\n+                            .filter(Optional::isPresent)\n+                            .map(Optional::get)\n+                            .map(Link::issue)\n+                            .filter(Optional::isPresent)\n+                            .map(Optional::get)\n+                            .forEach(backportCsr -> issueToAllCsrsMap.computeIfAbsent(issue.id(), k -> new ArrayList<>()).add(backportCsr));\n+\n+                });\n+        return issueToAllCsrsMap;\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":28,"deletions":27,"binary":false,"changes":55,"status":"modified"}]}