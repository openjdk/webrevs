{"files":[{"patch":"@@ -653,1 +653,1 @@\n-            IssueTrackerIssue jepIssue, Collection<IssueTrackerIssue> csrIssues) {\n+            IssueTrackerIssue jepIssue, Collection<IssueTrackerIssue> csrIssues, JdkVersion version) {\n@@ -730,0 +730,10 @@\n+                        if (!workItem.bot.fixVersionOverride() && issueTrackerIssue.get().isOpen()\n+                                && version != null && issueType != null && PRIMARY_TYPES.contains(issueType.asString())) {\n+                            var existing = Backports.findIssue(issueTrackerIssue.get(), version);\n+                            if (existing.isEmpty()) {\n+                                var fixVersions = Backports.fixVersions(issueTrackerIssue.get());\n+                                progressBody.append(\"(⚠️ The fixVersion in this issue is \" + fixVersions +\n+                                        \" but the fixVersion in .jcheck\/conf is \" + version.raw() + \", \" +\n+                                        \"a new backport will be created when this pr is integrated.)\");\n+                            }\n+                        }\n@@ -1322,1 +1332,1 @@\n-                    reviewNeeded, regularIssuesMap, jepIssue, issueToCsrMap.values());\n+                    reviewNeeded, regularIssuesMap, jepIssue, issueToCsrMap.values(), version);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckRun.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import org.openjdk.skara.json.JSONValue;\n@@ -217,0 +218,6 @@\n+                            if (properties.get(\"fixVersions\") != null) {\n+                                issueData.append(properties.get(\"fixVersions\").stream()\n+                                        .map(JSONValue::asString)\n+                                        .sorted()\n+                                        .toList());\n+                            }\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/CheckWorkItem.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+    private final boolean fixVersionOverride;\n@@ -96,1 +97,1 @@\n-                   Map<String, List<PRRecord>> issuePRMap, Approval approval) {\n+                   Map<String, List<PRRecord>> issuePRMap, Approval approval, boolean fixVersionOverride) {\n@@ -132,0 +133,1 @@\n+        this.fixVersionOverride = fixVersionOverride;\n@@ -400,0 +402,4 @@\n+    public boolean fixVersionOverride() {\n+        return fixVersionOverride;\n+    }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBot.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+    private boolean fixVersionOverride = false;\n@@ -248,0 +249,5 @@\n+    public PullRequestBotBuilder fixVersionOverride(boolean fixVersionOverride) {\n+        this.fixVersionOverride = fixVersionOverride;\n+        return this;\n+    }\n+\n@@ -254,1 +260,1 @@\n-                mergeSources, jcheckMerge, enableBackport, issuePRMap, approval);\n+                mergeSources, jcheckMerge, enableBackport, issuePRMap, approval, fixVersionOverride);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -247,0 +247,4 @@\n+            if (repo.value().contains(\"fixVersionOverride\")) {\n+                botBuilder.fixVersionOverride(repo.value().get(\"fixVersionOverride\").asBoolean());\n+            }\n+\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/PullRequestBotFactory.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2038,1 +2038,1 @@\n-            issue.setState(Issue.State.OPEN);\n+            issue.setState(Issue.State.CLOSED);\n@@ -3120,0 +3120,103 @@\n+\n+    @Test\n+    void fixVersionNotMatch(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"priority\", JSON.of(\"4\"));\n+            issue.setState(Issue.State.OPEN);\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build())\n+                    .issuePRMap(issuePRMap)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"1\");\n+\n+\n+            \/\/ Populate the projects repository\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().body().contains(\"(⚠️ The fixVersion in this issue is [18] but the fixVersion in .jcheck\/conf is 0.1, a new backport will be created when this pr is integrated.)\"));\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"0.1\"));\n+            pr.store().setBody(\"update\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().body().contains(\"(⚠️ The fixVersion\"));\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"0.1\").add(\"0.2\"));\n+            pr.store().setBody(\"update\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertTrue(pr.store().body().contains(\"(⚠️ The fixVersion in this issue is [0.1, 0.2] but the fixVersion in .jcheck\/conf is 0.1, a new backport will be created when this pr is integrated.)\"));\n+\n+\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"tbd\"));\n+            pr.store().setBody(\"update\");\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().body().contains(\"(⚠️ The fixVersion\"));\n+        }\n+    }\n+\n+    @Test\n+    void fixVersionOverride(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var reviewer = credentials.getHostedRepository();\n+            var bot = credentials.getHostedRepository();\n+            var issueProject = credentials.getIssueProject();\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(), Map.of());\n+            issue.setProperty(\"issuetype\", JSON.of(\"Bug\"));\n+            issue.setProperty(\"priority\", JSON.of(\"4\"));\n+            issue.setState(Issue.State.OPEN);\n+            issue.setProperty(\"fixVersions\", JSON.array().add(\"18\"));\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(reviewer.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            Map<String, List<PRRecord>> issuePRMap = new HashMap<>();\n+\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(bot)\n+                    .issueProject(issueProject)\n+                    .censusRepo(censusBuilder.build())\n+                    .issuePRMap(issuePRMap)\n+                    .fixVersionOverride(true)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"refs\/heads\/edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"1\");\n+\n+\n+            \/\/ Populate the projects repository\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertFalse(pr.store().body().contains(\"(⚠️ The fixVersion\"));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":104,"deletions":1,"binary":false,"changes":105,"status":"modified"}]}