{"files":[{"patch":"@@ -3449,1 +3449,1 @@\n-            assertTrue(pr.store().body().contains(\"Found trailing period in issue title for `2: this is an issue2 etc.`\"));\n+            assertFalse(pr.store().body().contains(\"Found trailing period in issue title for `2: this is an issue2 etc.`\"));\n@@ -3458,1 +3458,1 @@\n-            assertTrue(pr.store().body().contains(\"Found trailing period in issue title for `2: This is an issue2 etc.`\"));\n+            assertFalse(pr.store().body().contains(\"Found trailing period in issue title for `2: This is an issue2 etc.`\"));\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/CheckTests.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import java.util.List;\n@@ -32,0 +33,1 @@\n+import java.util.regex.Pattern;\n@@ -35,0 +37,3 @@\n+    private final static List<String> VALID_WORD_WITH_TRAILING_PERIOD = List.of(\"et al.\", \"etc.\", \"...\");\n+    private final static List<String> EXECUTABLE_NAMES = List.of(\"javac\", \"dpkg\");\n+    private final static Pattern FILE_OR_FUNCTION_PATTERN = Pattern.compile(\".*[()\/._:].*\");\n@@ -51,1 +56,1 @@\n-            if (issue.description().endsWith(\".\")) {\n+            if (hasTrailingPeriod(issue.description())) {\n@@ -54,1 +59,1 @@\n-            if (Character.isLowerCase(issue.description().charAt(0))) {\n+            if (hasLeadingLowerCaseLetter(issue.description())) {\n@@ -74,0 +79,29 @@\n+    private boolean hasTrailingPeriod(String description) {\n+        if (!description.endsWith(\".\")) {\n+            return false;\n+        }\n+        for (String phrase : VALID_WORD_WITH_TRAILING_PERIOD) {\n+            if (description.endsWith(phrase)) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+\n+    private boolean hasLeadingLowerCaseLetter(String description) {\n+        if (Character.isUpperCase(description.charAt(0))) {\n+            return false;\n+        }\n+        var firstWord = description.split(\" \")[0];\n+        \/\/ If first word is valid executable name, ignore it\n+        for (String name : EXECUTABLE_NAMES) {\n+            if (firstWord.equals(name)) {\n+                return false;\n+            }\n+        }\n+        \/\/ If first word contains special character, it's very likely a reference to file or function, ignore it\n+        if (FILE_OR_FUNCTION_PATTERN.matcher(firstWord).matches()) {\n+            return false;\n+        }\n+        return true;\n+    }\n","filename":"jcheck\/src\/main\/java\/org\/openjdk\/skara\/jcheck\/IssuesTitleCheck.java","additions":36,"deletions":2,"binary":false,"changes":38,"status":"modified"}]}