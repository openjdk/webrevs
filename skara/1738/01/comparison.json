{"files":[{"patch":"@@ -91,1 +91,5 @@\n-    private boolean avoidForwardports;\n+    private final boolean avoidForwardports;\n+\n+    \/\/ If true, allow multiple values in the Fix Versions field instead of using\n+    \/\/ backport records for every additional fix version.\n+    private final boolean multiFixVersions;\n@@ -98,1 +102,2 @@\n-                  boolean tagMatchPrefix, List<BranchSecurity> defaultSecurity, boolean avoidForwardports) {\n+                  boolean tagMatchPrefix, List<BranchSecurity> defaultSecurity, boolean avoidForwardports,\n+                  boolean multiFixVersions) {\n@@ -120,0 +125,1 @@\n+        this.multiFixVersions = multiFixVersions;\n@@ -341,20 +347,22 @@\n-                        var fixVersion = JdkVersion.parse(requestedVersion).orElseThrow();\n-                        var existing = Backports.findIssue(issue, fixVersion);\n-                        if (existing.isEmpty()) {\n-                            var issueFixVersion = Backports.mainFixVersion(issue);\n-                            try {\n-                                if (issue.isOpen() && avoidForwardports && issueFixVersion.isPresent() && fixVersion.compareTo(issueFixVersion.get()) > 0) {\n-                                    log.info(\"Avoiding 'forwardport', creating new backport for \" + issue.id() + \" with fixVersion \" + issueFixVersion.get().raw());\n-                                    Backports.createBackport(issue, issueFixVersion.get().raw(), username.orElse(null), defaultSecurity(branch));\n-                                } else {\n-                                    log.info(\"Creating new backport for \" + issue.id() + \" with fixVersion \" + requestedVersion);\n-                                    issue = Backports.createBackport(issue, requestedVersion, username.orElse(null), defaultSecurity(branch));\n-                                }\n-                            } catch (UncheckedRestException e) {\n-                                existing = Backports.findIssue(issue, fixVersion);\n-                                if (existing.isPresent()) {\n-                                    log.info(\"Race condition occurred while creating backport issue, returning the existing backport for \" + issue.id() + \" and requested fixVersion \"\n-                                            + requestedVersion + \" \" + existing.get().id());\n-                                    issue = existing.get();\n-                                } else {\n-                                    throw e;\n+                        if (!multiFixVersions) {\n+                            var fixVersion = JdkVersion.parse(requestedVersion).orElseThrow();\n+                            var existing = Backports.findIssue(issue, fixVersion);\n+                            if (existing.isEmpty()) {\n+                                var issueFixVersion = Backports.mainFixVersion(issue);\n+                                try {\n+                                    if (issue.isOpen() && avoidForwardports && issueFixVersion.isPresent() && fixVersion.compareTo(issueFixVersion.get()) > 0) {\n+                                        log.info(\"Avoiding 'forwardport', creating new backport for \" + issue.id() + \" with fixVersion \" + issueFixVersion.get().raw());\n+                                        Backports.createBackport(issue, issueFixVersion.get().raw(), username.orElse(null), defaultSecurity(branch));\n+                                    } else {\n+                                        log.info(\"Creating new backport for \" + issue.id() + \" with fixVersion \" + requestedVersion);\n+                                        issue = Backports.createBackport(issue, requestedVersion, username.orElse(null), defaultSecurity(branch));\n+                                    }\n+                                } catch (UncheckedRestException e) {\n+                                    existing = Backports.findIssue(issue, fixVersion);\n+                                    if (existing.isPresent()) {\n+                                        log.info(\"Race condition occurred while creating backport issue, returning the existing backport for \" + issue.id() + \" and requested fixVersion \"\n+                                                + requestedVersion + \" \" + existing.get().id());\n+                                        issue = existing.get();\n+                                    } else {\n+                                        throw e;\n+                                    }\n@@ -362,0 +370,4 @@\n+                            } else {\n+                                log.info(\"Found existing backport for \" + issue.id() + \" and requested fixVersion \"\n+                                        + requestedVersion + \" \" + existing.get().id());\n+                                issue = existing.get();\n@@ -363,4 +375,0 @@\n-                        } else {\n-                            log.info(\"Found existing backport for \" + issue.id() + \" and requested fixVersion \"\n-                                    + requestedVersion + \" \" + existing.get().id());\n-                            issue = existing.get();\n@@ -407,2 +415,11 @@\n-                        log.info(\"Setting fixVersion for \" + issue.id() + \" to \" + requestedVersion);\n-                        issue.setProperty(\"fixVersions\", JSON.array().add(requestedVersion));\n+                        if (multiFixVersions) {\n+                            var currentFixVersions = Backports.fixVersions(issue);\n+                            log.info(\"Adding fixVersion \" + requestedVersion + \" to \" + issue.id() + \" current: \" + currentFixVersions);\n+                            var jsonFixVersions = JSON.array();\n+                            currentFixVersions.forEach(jsonFixVersions::add);\n+                            jsonFixVersions.add(requestedVersion);\n+                            issue.setProperty(\"fixVersions\", jsonFixVersions);\n+                        } else {\n+                            log.info(\"Setting fixVersion for \" + issue.id() + \" to \" + requestedVersion);\n+                            issue.setProperty(\"fixVersions\", JSON.array().add(requestedVersion));\n+                        }\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifier.java","additions":45,"deletions":28,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -54,0 +54,1 @@\n+    private boolean multiFixVersions = false;\n@@ -161,0 +162,5 @@\n+    public IssueNotifierBuilder multiFixVersions(boolean multiFixVersions) {\n+        this.multiFixVersions = multiFixVersions;\n+        return this;\n+    }\n+\n@@ -173,1 +179,1 @@\n-                resolve, tagIgnoreOpt, tagMatchPrefix, defaultSecurity, avoidForwardports);\n+                resolve, tagIgnoreOpt, tagMatchPrefix, defaultSecurity, avoidForwardports, multiFixVersions);\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierBuilder.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -142,0 +142,4 @@\n+        if (notifierConfiguration.contains(\"multifixversions\")) {\n+            builder.multiFixVersions(notifierConfiguration.get(\"multifixversions\").asBoolean());\n+        }\n+\n","filename":"bots\/notify\/src\/main\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierFactory.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -119,1 +119,2 @@\n-                            \"resolve\": false\n+                            \"resolve\": false,\n+                            \"multifixversions\": true,\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/NotifyBotFactoryTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2640,0 +2640,63 @@\n+\n+    @Test\n+    void testIssueMultipleFixVersions(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+                var tempFolder = new TemporaryDirectory()) {\n+\n+            var repo = credentials.getHostedRepository();\n+            var repoFolder = tempFolder.path().resolve(\"repo\");\n+            var localRepo = CheckableRepository.init(repoFolder, repo.repositoryType(), Path.of(\"file.txt\"), Set.of(), null);\n+            credentials.commitLock(localRepo);\n+            localRepo.pushAll(repo.authenticatedUrl());\n+\n+            var issueProject = credentials.getIssueProject();\n+            var storageFolder = tempFolder.path().resolve(\"storage\");\n+            var jbsNotifierConfig = JSON.object()\n+                    .put(\"fixversions\", JSON.object()\n+                            .put(\"other\", \"branch-foo1\")\n+                            .put(\"other2\", \"branch-foo2\"))\n+                    .put(\"multifixversions\", true);\n+            var notifyBot = testBotBuilder(repo, issueProject, storageFolder, jbsNotifierConfig).create(\"notify\", JSON.object());\n+\n+            \/\/ Initialize state for all active branches\n+            localRepo.push(\"master:other\", repo.authenticatedUrl());\n+            localRepo.push(\"master:other2\", repo.authenticatedUrl());\n+\n+            \/\/ Initialize history\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ Create an issue and commit a fix\n+            var authorEmailAddress = issueProject.issueTracker().currentUser().username() + \"@openjdk.org\";\n+            var issue = issueProject.createIssue(\"This is an issue\", List.of(\"Indeed\"), Map.of(\"issuetype\", JSON.of(\"Enhancement\")));\n+            var editHash = CheckableRepository.appendAndCommit(localRepo, \"Another line\", issue.id() + \": Fix that issue\", \"Duke\", authorEmailAddress);\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"master\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            \/\/ The changeset should be reflected in a comment\n+            var updatedIssue = issueProject.issue(issue.id()).orElseThrow();\n+\n+            var comments = updatedIssue.comments();\n+            assertEquals(1, comments.size());\n+            var comment = comments.get(0);\n+            assertTrue(comment.body().contains(editHash.toString()));\n+\n+            \/\/ As well as a fixVersion and a resolved in build\n+            assertEquals(Set.of(), fixVersions(updatedIssue));\n+\n+            \/\/ The issue should be assigned and resolved\n+            assertEquals(RESOLVED, updatedIssue.state());\n+            assertEquals(List.of(issueProject.issueTracker().currentUser()), updatedIssue.assignees());\n+\n+            \/\/ Push to a branch with a fixVersion config\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"other2\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            assertEquals(Set.of(\"branch-foo2\"), fixVersions(updatedIssue));\n+\n+            \/\/ Push to the other branch with a fixVersion config\n+            localRepo.push(editHash, repo.authenticatedUrl(), \"other\");\n+            TestBotRunner.runPeriodicItems(notifyBot);\n+\n+            assertEquals(Set.of(\"branch-foo2\", \"branch-foo1\"), fixVersions(updatedIssue));\n+        }\n+    }\n","filename":"bots\/notify\/src\/test\/java\/org\/openjdk\/skara\/bots\/notify\/issue\/IssueNotifierTests.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    private final static Pattern projectRepoPattern = Pattern.compile(\"repo-([a-z0-9]*)\");\n+    private final static Pattern projectRepoPattern = Pattern.compile(\"(repo|branch)-([a-z0-9]*)\");\n@@ -86,3 +86,2 @@\n-                var project = matcher.group(1);\n-                finalComponents.add(\"repo\");\n-                finalComponents.add(project);\n+                finalComponents.add(matcher.group(1));\n+                finalComponents.add(matcher.group(2));\n","filename":"jbs\/src\/main\/java\/org\/openjdk\/skara\/jbs\/JdkVersion.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -159,0 +159,6 @@\n+\n+    @Test\n+    void teamBranch() {\n+        assertEquals(List.of(\"branch\", \"foo\"), from(\"branch-foo\").components());\n+        assertTrue(from(\"20\").compareTo(from(\"branch-foo\")) < 0);\n+    }\n","filename":"jbs\/src\/test\/java\/org\/openjdk\/skara\/jbs\/JdkVersionTests.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}