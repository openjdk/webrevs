{"files":[{"patch":"@@ -62,1 +62,1 @@\n-        var files = PullRequestUtils.changedFiles(pr, localRepo);\n+        var files = PullRequestUtils.changedFilesIgnoringMerges(pr, localRepo);\n@@ -147,1 +147,1 @@\n-                    var changedFiles = PullRequestUtils.changedFiles(pr, localRepo, new Hash(evaluatedCommitHash));\n+                    var changedFiles = PullRequestUtils.changedFilesIgnoringMerges(pr, localRepo, new Hash(evaluatedCommitHash));\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerWorkItem.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -607,65 +607,0 @@\n-\n-    @Test\n-    void autoAdjustLabel(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var integrator = credentials.getHostedRepository();\n-\n-            var censusBuilder = credentials.getCensusBuilder()\n-                    .addReviewer(integrator.forge().currentUser().id())\n-                    .addCommitter(author.forge().currentUser().id());\n-            var labelConfiguration = LabelConfigurationJson.builder()\n-                    .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n-                    .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n-                    .addMatchers(\"3\", List.of(Pattern.compile(\"txt$\")))\n-                    .addGroup(\"group1\", List.of(\"1\", \"2\"))\n-                    .addExtra(\"extra\")\n-                    .build();\n-            var prBot = PullRequestBot.newBuilder()\n-                    .repo(integrator)\n-                    .censusRepo(censusBuilder.build())\n-                    .labelConfiguration(labelConfiguration)\n-                    .build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n-            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType(), Path.of(\"test.hpp\"));\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n-\n-            \/\/ The bot should have applied one label automatically\n-            TestBotRunner.runPeriodicItems(prBot);\n-            assertEquals(Set.of(\"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n-            assertLastCommentContains(pr, \"The following label will be automatically applied\");\n-            assertLastCommentContains(pr, \"`2`\");\n-\n-            var test1Cpp = localRepo.root().resolve(\"test1.cpp\");\n-            try (var output = Files.newBufferedWriter(test1Cpp)) {\n-                output.append(\"test\");\n-            }\n-            localRepo.add(test1Cpp);\n-            var addHash = localRepo.commit(\"add cpp file\", \"duke\", \"duke@openjdk.org\");\n-            localRepo.push(addHash, author.authenticatedUrl(), \"edit\", true);\n-            TestBotRunner.runPeriodicItems(prBot);\n-            assertEquals(Set.of(\"group1\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n-\n-            \/\/ Simulate force-push.\n-            localRepo.checkout(editHash);\n-            var test1txt = localRepo.root().resolve(\"test1.txt\");\n-            try (var output = Files.newBufferedWriter(test1txt)) {\n-                output.append(\"test\");\n-            }\n-            localRepo.add(test1txt);\n-            var forcePushHash = localRepo.commit(\"add txt file\", \"duke\", \"duke@openjdk.org\");\n-            localRepo.push(forcePushHash, author.authenticatedUrl(), \"edit\", true);\n-            TestBotRunner.runPeriodicItems(prBot);\n-            assertEquals(Set.of(\"group1\", \"rfr\", \"3\"), new HashSet<>(pr.store().labelNames()));\n-        }\n-    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelTests.java","additions":0,"deletions":65,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import java.nio.file.Path;\n@@ -318,0 +319,138 @@\n+\n+    @Test\n+    void autoAdjustLabel(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                    .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                    .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n+                    .addMatchers(\"3\", List.of(Pattern.compile(\"txt$\")))\n+                    .addGroup(\"group1\", List.of(\"1\", \"2\"))\n+                    .addExtra(\"extra\")\n+                    .build();\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .labelConfiguration(labelConfiguration)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType(), Path.of(\"test.hpp\"));\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+\n+            \/\/ The bot should have applied one label automatically\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertEquals(Set.of(\"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            assertLastCommentContains(pr, \"The following label will be automatically applied\");\n+            assertLastCommentContains(pr, \"`2`\");\n+\n+            var test1Cpp = localRepo.root().resolve(\"test1.cpp\");\n+            try (var output = Files.newBufferedWriter(test1Cpp)) {\n+                output.append(\"test\");\n+            }\n+            localRepo.add(test1Cpp);\n+            var addHash = localRepo.commit(\"add cpp file\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(addHash, author.authenticatedUrl(), \"edit\", true);\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertEquals(Set.of(\"group1\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+\n+            \/\/ Simulate force-push.\n+            localRepo.checkout(editHash);\n+            var test1txt = localRepo.root().resolve(\"test1.txt\");\n+            try (var output = Files.newBufferedWriter(test1txt)) {\n+                output.append(\"test\");\n+            }\n+            localRepo.add(test1txt);\n+            var forcePushHash = localRepo.commit(\"add txt file\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(forcePushHash, author.authenticatedUrl(), \"edit\", true);\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertEquals(Set.of(\"group1\", \"rfr\", \"3\"), new HashSet<>(pr.store().labelNames()));\n+        }\n+    }\n+\n+    @Test\n+    void autoAdjustLabelWithMerge(TestInfo testInfo) throws IOException {\n+        try (var credentials = new HostCredentials(testInfo);\n+             var tempFolder = new TemporaryDirectory()) {\n+            var author = credentials.getHostedRepository();\n+            var integrator = credentials.getHostedRepository();\n+\n+            var censusBuilder = credentials.getCensusBuilder()\n+                    .addReviewer(integrator.forge().currentUser().id())\n+                    .addCommitter(author.forge().currentUser().id());\n+            var labelConfiguration = LabelConfigurationJson.builder()\n+                    .addMatchers(\"1\", List.of(Pattern.compile(\"cpp$\")))\n+                    .addMatchers(\"2\", List.of(Pattern.compile(\"hpp$\")))\n+                    .addMatchers(\"3\", List.of(Pattern.compile(\"txt$\")))\n+                    .addGroup(\"group1\", List.of(\"1\", \"2\"))\n+                    .addExtra(\"extra\")\n+                    .build();\n+            var prBot = PullRequestBot.newBuilder()\n+                    .repo(integrator)\n+                    .censusRepo(censusBuilder.build())\n+                    .labelConfiguration(labelConfiguration)\n+                    .build();\n+\n+            \/\/ Populate the projects repository\n+            var localRepoFolder = tempFolder.path().resolve(\"localrepo\");\n+            var localRepo = CheckableRepository.init(localRepoFolder, author.repositoryType(), Path.of(\"test.hpp\"));\n+            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n+            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n+            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            \/\/ Make a change with a corresponding PR\n+            var editHash = CheckableRepository.appendAndCommit(localRepo);\n+            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n+            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"123: This is a pull request\");\n+\n+            \/\/ The bot should have applied one label automatically\n+            TestBotRunner.runPeriodicItems(prBot);\n+            assertEquals(Set.of(\"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+            assertLastCommentContains(pr, \"The following label will be automatically applied\");\n+            assertLastCommentContains(pr, \"`2`\");\n+\n+            \/\/ Update the target branch\n+            localRepo.checkout(masterHash);\n+            var txtFile = localRepo.root().resolve(\"unrelated.txt\");\n+            Files.writeString(txtFile, \"Hello\");\n+            localRepo.add(txtFile);\n+            var updatedMasterHash = localRepo.commit(\"add txt file\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(updatedMasterHash, author.authenticatedUrl(), \"master\", true);\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ Change to master branch shouldn't change labels\n+            assertEquals(Set.of(\"2\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+\n+            \/\/ Merge master into edit\n+            localRepo.checkout(editHash);\n+            localRepo.merge(updatedMasterHash);\n+            var mergeHash = localRepo.commit(\"merge master\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(mergeHash, author.authenticatedUrl(), \"edit\", true);\n+            \/\/ Add cpp file\n+            localRepo.checkout(mergeHash);\n+            var cppFile = localRepo.root().resolve(\"test.cpp\");\n+            Files.writeString(cppFile, \"Hello cpp\");\n+            localRepo.add(cppFile);\n+            var updatedEditHash = localRepo.commit(\"add cpp file\", \"duke\", \"duke@openjdk.org\");\n+            localRepo.push(updatedEditHash, author.authenticatedUrl(), \"edit\", true);\n+\n+            TestBotRunner.runPeriodicItems(prBot);\n+            \/\/ The commit brought in by merge shouldn't affect labels, so \"3\" shouldn't be added\n+            \/\/ After adding cpp file, \"1\" should be added and the labels should be upgraded to \"group1\"\n+            assertEquals(Set.of(\"group1\", \"rfr\"), new HashSet<>(pr.store().labelNames()));\n+        }\n+    }\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/LabelerTests.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"modified"},{"patch":"@@ -195,0 +195,1 @@\n+     * This method ignores merge commits and all the commits brought in by merges.\n@@ -196,2 +197,2 @@\n-    public static Set<Path> changedFiles(PullRequest pr, Repository localRepo) throws IOException {\n-        return changedFilesBetween(localRepo, baseHash(pr, localRepo), pr.headHash());\n+    public static Set<Path> changedFilesIgnoringMerges(PullRequest pr, Repository localRepo) throws IOException {\n+        return changedFilesIgnoringMergesBetween(localRepo, baseHash(pr, localRepo), pr.headHash());\n@@ -202,0 +203,1 @@\n+     * This method ignores merge commits and all the commits brought in by merges.\n@@ -203,1 +205,1 @@\n-    public static Set<Path> changedFiles(PullRequest pr, Repository localRepo, Hash commitHash) throws IOException {\n+    public static Set<Path> changedFilesIgnoringMerges(PullRequest pr, Repository localRepo, Hash commitHash) throws IOException {\n@@ -206,1 +208,1 @@\n-            return changedFiles(pr, localRepo);\n+            return changedFilesIgnoringMerges(pr, localRepo);\n@@ -208,1 +210,1 @@\n-        return changedFilesBetween(localRepo, commitHash, pr.headHash());\n+        return changedFilesIgnoringMergesBetween(localRepo, commitHash, pr.headHash());\n@@ -211,9 +213,16 @@\n-    private static Set<Path> changedFilesBetween(Repository localRepo, Hash from, Hash to) throws IOException {\n-        var ret = new HashSet<Path>();\n-        var changes = localRepo.diff(from, to);\n-        for (var patch : changes.patches()) {\n-            if (patch.status().isDeleted() || patch.status().isRenamed()) {\n-                patch.source().path().ifPresent(ret::add);\n-            }\n-            if (!patch.status().isDeleted()) {\n-                patch.target().path().ifPresent(ret::add);\n+    private static Set<Path> changedFilesIgnoringMergesBetween(Repository localRepo, Hash from, Hash to) throws IOException {\n+        Set<Path> changesFiles = new HashSet<>();\n+        Optional<Commit> current = localRepo.lookup(to);\n+        while (current.isPresent() && !current.get().hash().equals(from)) {\n+            List<Hash> parents = current.get().parents();\n+            if (!parents.isEmpty()) {\n+                Hash parent = parents.getFirst();\n+                if (parents.size() == 1) {\n+                    var changes = localRepo.diff(parent, current.get().hash());\n+                    for (var patch : changes.patches()) {\n+                        addPatchFiles(changesFiles, patch);\n+                    }\n+                }\n+                current = localRepo.lookup(parent);\n+            } else {\n+                break;\n@@ -222,1 +231,10 @@\n-        return ret;\n+        return changesFiles;\n+    }\n+\n+    private static void addPatchFiles(Set<Path> ret, Patch patch) {\n+        if (patch.status().isDeleted() || patch.status().isRenamed()) {\n+            patch.source().path().ifPresent(ret::add);\n+        }\n+        if (!patch.status().isDeleted()) {\n+            patch.target().path().ifPresent(ret::add);\n+        }\n","filename":"forge\/src\/main\/java\/org\/openjdk\/skara\/forge\/PullRequestUtils.java","additions":33,"deletions":15,"binary":false,"changes":48,"status":"modified"}]}