{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,0 @@\n-        reply.println(\" * `\/\" + name + \" create [PX] <component>\/[subcomponent]\");\n@@ -71,2 +70,0 @@\n-        reply.println(\" * `\/\" + name + \" create hotspot\/jfr\");\n-        reply.println(\" * `\/\" + name + \" create P4 core-libs\/java.nio\");\n@@ -80,1 +77,1 @@\n-    private static final Pattern SUBCOMMAND_PATTERN = Pattern.compile(\"^(add|remove|delete|create|(?:[A-Za-z]+-)?[0-9]+:?)[ ,]?.*$\");\n+    private static final Pattern SUBCOMMAND_PATTERN = Pattern.compile(\"^(add|remove|delete|(?:[A-Za-z]+-)?[0-9]+:?)[ ,]?.*$\");\n@@ -213,59 +210,0 @@\n-    private void createIssue(PullRequestBot bot, PullRequest pr, String args, CensusInstance censusInstance, HostUser author, PrintWriter reply) {\n-        if (!censusInstance.isAuthor(author)) {\n-            reply.println(\"Only [Authors](https:\/\/openjdk.org\/bylaws#author) are allowed to create issues.\");\n-            return;\n-        }\n-\n-        var currentTitleIssue = Issue.fromString(pr.title());\n-        if (currentTitleIssue.isPresent()) {\n-            reply.println(\"The PR title already references an issue (`\" + currentTitleIssue.get().shortId() + \"`) - will not create a new one.\");\n-            return;\n-        }\n-\n-        var argSplit = new LinkedList<>(Arrays.asList(args.split(\"(?:\\\\s+|\/)\")));\n-        argSplit.pollFirst();\n-\n-        String priority = null;\n-        String subComponent = null;\n-\n-        \/\/ First argument can be a priority\n-        var next = argSplit.pollFirst();\n-        if (next != null && next.matches(\"^[pP]\\\\d$\")) {\n-            priority = next.substring(1);\n-            next = argSplit.pollFirst();\n-        }\n-\n-        \/\/ Next argument is the mandatory component name\n-        if (next == null) {\n-            showHelp(reply);\n-            return;\n-        }\n-        var component = next;\n-        next = argSplit.pollFirst();\n-\n-        \/\/ Finally there can be a subcomponent present\n-        if (next != null) {\n-            subComponent = next;\n-        }\n-\n-        var properties = new HashMap<String, JSONValue>();\n-        properties.put(\"components\", JSON.array().add(JSON.of(component)));\n-        if (subComponent != null) {\n-            properties.put(SUBCOMPONENT, JSON.of(subComponent));\n-        }\n-        if (priority != null) {\n-            properties.put(\"priority\", JSON.of(priority));\n-        }\n-        properties.put(\"issuetype\", JSON.of(\"enhancement\"));\n-\n-        var bodyText = PullRequestBody.parse(pr).bodyText();\n-        try {\n-            var issue = bot.issueProject().createIssue(pr.title(), bodyText.lines().collect(Collectors.toList()), properties);\n-            reply.println(\"The issue `\" + issue.id() + \"` was successfully created - the title of this PR will be updated to reference it. \");\n-            var shortId = issue.id().contains(\"-\") ? issue.id().split(\"-\", 2)[1] : issue.id();\n-            pr.setTitle(shortId + \": \" + issue.title());\n-        } catch (RuntimeException e) {\n-            reply.println(\"An error occurred when attempting to create an issue: \" + e.getMessage());\n-        }\n-    }\n-\n@@ -295,2 +233,0 @@\n-            } else if (args.startsWith(\"create\")) {\n-                createIssue(bot, pr, args, censusInstance, command.user(), reply);\n","filename":"bots\/pr\/src\/main\/java\/org\/openjdk\/skara\/bots\/pr\/IssueCommand.java","additions":2,"deletions":66,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -541,113 +541,0 @@\n-    @Test\n-    void createIssue(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var integrator = credentials.getHostedRepository();\n-            var issues = credentials.getIssueProject();\n-\n-            var censusBuilder = credentials.getCensusBuilder()\n-                                           .addAuthor(author.forge().currentUser().id());\n-            var prBot = PullRequestBot.newBuilder()\n-                    .repo(integrator)\n-                    .censusRepo(censusBuilder.build())\n-                    .issueProject(issues)\n-                    .issuePRMap(new HashMap<>())\n-                    .build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n-            pr.setBody(\"This is the body\");\n-\n-            \/\/ Create an issue\n-            pr.addComment(\"\/issue create hotspot\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ Verify it\n-            var issue = issueFromLastComment(pr, issues);\n-            assertEquals(\"This is a pull request\", issue.title());\n-            assertEquals(\"hotspot\", issue.properties().get(\"components\").asArray().get(0).asString());\n-            assertEquals(\"This is the body\", issue.body());\n-\n-            var updatedPr = author.pullRequest(pr.id());\n-            var issueNr = issue.id().split(\"-\", 2)[1];\n-            assertEquals(issueNr + \": This is a pull request\", updatedPr.title());\n-        }\n-    }\n-\n-    @Test\n-    void createIssueParameterized(TestInfo testInfo) throws IOException {\n-        try (var credentials = new HostCredentials(testInfo);\n-             var tempFolder = new TemporaryDirectory()) {\n-            var author = credentials.getHostedRepository();\n-            var integrator = credentials.getHostedRepository();\n-            var issues = credentials.getIssueProject();\n-\n-            var censusBuilder = credentials.getCensusBuilder()\n-                                           .addAuthor(author.forge().currentUser().id());\n-            var prBot = PullRequestBot.newBuilder()\n-                    .repo(integrator)\n-                    .censusRepo(censusBuilder.build())\n-                    .issueProject(issues)\n-                    .issuePRMap(new HashMap<>())\n-                    .build();\n-\n-            \/\/ Populate the projects repository\n-            var localRepo = CheckableRepository.init(tempFolder.path(), author.repositoryType());\n-            var masterHash = localRepo.resolve(\"master\").orElseThrow();\n-            assertFalse(CheckableRepository.hasBeenEdited(localRepo));\n-            localRepo.push(masterHash, author.authenticatedUrl(), \"master\", true);\n-\n-            \/\/ Make a change with a corresponding PR\n-            var editHash = CheckableRepository.appendAndCommit(localRepo);\n-            localRepo.push(editHash, author.authenticatedUrl(), \"edit\", true);\n-            var pr = credentials.createPullRequest(author, \"master\", \"edit\", \"This is a pull request\");\n-\n-            \/\/ Create an issue\n-            pr.addComment(\"\/issue create P2 hotspot\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ Verify it\n-            var issue = issueFromLastComment(pr, issues);\n-            assertEquals(\"This is a pull request\", issue.title());\n-            assertEquals(\"hotspot\", issue.properties().get(\"components\").asArray().get(0).asString());\n-            assertEquals(\"2\", issue.properties().get(\"priority\").asString());\n-\n-            \/\/ Reset and try some more\n-            pr.setTitle(\"This is another pull request\");\n-\n-            \/\/ Create an issue\n-            pr.addComment(\"\/issue create P4 hotspot\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ Verify it\n-            issue = issueFromLastComment(pr, issues);\n-            assertEquals(\"This is another pull request\", issue.title());\n-            assertEquals(\"hotspot\", issue.properties().get(\"components\").asArray().get(0).asString());\n-            assertEquals(\"4\", issue.properties().get(\"priority\").asString());\n-            assertEquals(\"enhancement\", issue.properties().get(\"issuetype\").asString().toLowerCase());\n-\n-            \/\/ Reset and try some more\n-            pr.setTitle(\"This is yet another pull request\");\n-\n-            \/\/ Create an issue\n-            pr.addComment(\"\/issue create core-libs\/java.io\");\n-            TestBotRunner.runPeriodicItems(prBot);\n-\n-            \/\/ Verify it\n-            issue = issueFromLastComment(pr, issues);\n-            assertEquals(\"This is yet another pull request\", issue.title());\n-            assertEquals(\"core-libs\", issue.properties().get(\"components\").asArray().get(0).asString());\n-            assertEquals(\"enhancement\", issue.properties().get(\"issuetype\").asString().toLowerCase());\n-            assertEquals(\"java.io\", issue.properties().get(SUBCOMPONENT).asString());\n-        }\n-    }\n-\n","filename":"bots\/pr\/src\/test\/java\/org\/openjdk\/skara\/bots\/pr\/IssueTests.java","additions":0,"deletions":113,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,4 +55,0 @@\n-        Switch.shortcut(\"\")\n-              .fullname(\"create\")\n-              .helptext(\"Create an issue for this pull request\")\n-              .optional(),\n@@ -97,14 +93,0 @@\n-        } else if (arguments.contains(\"create\")) {\n-            if (!arguments.contains(\"component\")) {\n-                System.err.println(\"error: no component specified, use --component\");\n-                System.exit(1);\n-            }\n-            var component = ForgeUtils.getOption(\"component\", arguments);\n-            var prio = ForgeUtils.getOption(\"priority\", arguments, \"4\");\n-            if (!List.of(\"1\", \"2\", \"3\", \"4\", \"5\").contains(prio)) {\n-                System.err.println(\"error: unsupported priority: \" + prio);\n-                System.err.println(\"       Supported priorities are: 1,2,3,4,5\");\n-                System.exit(1);\n-            }\n-            var comment = pr.addComment(\"\/issue create P\" + prio + \" \" + component);\n-            showReply(awaitReplyTo(pr, comment));\n@@ -112,1 +94,1 @@\n-            System.err.println(\"error: must use either --add, --remove or --create\");\n+            System.err.println(\"error: must use either --add or --remove\");\n","filename":"cli\/src\/main\/java\/org\/openjdk\/skara\/cli\/pr\/GitPrIssue.java","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-        private final String securityLevel;\n@@ -43,1 +42,1 @@\n-        private BackportEndpoint(RestRequest request, String securityLevel) {\n+        private BackportEndpoint(RestRequest request) {\n@@ -45,1 +44,0 @@\n-            this.securityLevel = securityLevel;\n@@ -78,4 +76,0 @@\n-            if (securityLevel != null) {\n-                body = body.contains(\"level\") ? body : body.asObject().put(\"level\", securityLevel);\n-            }\n-\n@@ -91,1 +85,0 @@\n-    private final String securityLevel;\n@@ -101,1 +94,0 @@\n-        this.securityLevel = null;\n@@ -120,1 +112,0 @@\n-        this.securityLevel = null;\n@@ -134,1 +125,1 @@\n-        this(uri, jiraVault, null, null);\n+        this(uri, jiraVault, null);\n@@ -137,1 +128,1 @@\n-    JiraHost(URI uri, JiraVault jiraVault, String visibilityRole, String securityLevel) {\n+    JiraHost(URI uri, JiraVault jiraVault, String visibilityRole) {\n@@ -140,1 +131,0 @@\n-        this.securityLevel = securityLevel;\n@@ -161,1 +151,1 @@\n-            case BACKPORT_ENDPOINT_PATH -> new BackportEndpoint(backportRequest, securityLevel);\n+            case BACKPORT_ENDPOINT_PATH -> new BackportEndpoint(backportRequest);\n@@ -171,4 +161,0 @@\n-    Optional<String> securityLevel() {\n-        return Optional.ofNullable(securityLevel);\n-    }\n-\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraHost.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-        needSecurity = jiraProject.jiraHost().securityLevel().isPresent();\n+        this.needSecurity = jiraProject.jiraHost().visibilityRole().isPresent();\n@@ -90,1 +90,1 @@\n-            log.warning(\"Issue title does not support setting a security level - ignoring\");\n+            log.warning(\"Issue title does not support setting a visibility role - ignoring\");\n@@ -93,0 +93,1 @@\n+\n@@ -111,1 +112,1 @@\n-            log.warning(\"Issue body does not support setting a security level - ignoring\");\n+            log.warning(\"Issue body does not support setting a visibility role - ignoring\");\n@@ -114,0 +115,1 @@\n+\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraIssue.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,1 @@\n-                    return new JiraHost(uri, jiraVault, configuration.get(\"visibility\").asString(), configuration.get(\"security\").asString());\n+                    return new JiraHost(uri, jiraVault, configuration.get(\"visibility\").asString());\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraIssueTrackerFactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -390,2 +390,0 @@\n-        jiraHost.securityLevel().ifPresent(securityLevel -> fields.put(\"security\", JSON.object()\n-                                                                                       .put(\"id\", securityLevel)));\n","filename":"issuetracker\/src\/main\/java\/org\/openjdk\/skara\/issuetracker\/jira\/JiraProject.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}