{"files":[{"patch":"@@ -27,1 +27,0 @@\n-import com.sun.tdk.jcov.Instr;\n@@ -29,3 +28,0 @@\n-import com.sun.tdk.jcov.instrument.DataRoot;\n-import com.sun.tdk.jcov.instrument.InstrumentationOptions;\n-import com.sun.tdk.jcov.instrument.Util;\n@@ -39,1 +35,0 @@\n-import java.nio.file.Paths;\n@@ -45,5 +40,1 @@\n-public class BasicReportTest {\n-    Path test_dir;\n-    Path template;\n-    Path result;\n-    int method_slot = -1;\n+public class BasicReportTest extends ReportTest {\n@@ -53,26 +44,1 @@\n-        System.setProperty(\"jcov.selftest\", \"true\");\n-\n-        Path data_dir = Paths.get(System.getProperty(\"user.dir\"));\n-\n-        \/\/clear\n-        test_dir = data_dir.resolve(\"instr_test\");\n-        System.out.println(\"test dir = \" + test_dir);\n-        Util.rmRF(test_dir);\n-\n-        \/\/prepare bytecode\n-        List<Path> classFiles = new Util(test_dir).copyBytecode(BasicUserCode.class.getName());\n-\n-        \/\/instrument\n-        template = test_dir.resolve(\"template.xml\");\n-        List<String> params = new ArrayList<>();\n-        params.add(\"-t\");\n-        params.add(template.toString());\n-        params.add(classFiles.get(0).toString());\n-        new Instr().run(params.toArray(new String[0]));\n-\n-        \/\/run\n-        new Util(test_dir).runClass(BasicUserCode.class, new String[] {});\n-\n-        \/\/save coverage\n-        result = test_dir.resolve(\"result.xml\");\n-        DataRoot.getInstance(0).write(result.toString(), InstrumentationOptions.MERGE.OVERWRITE);\n+        setup(BasicUserCode.class, BasicUserCode.class.getName());\n@@ -112,1 +78,1 @@\n-        Util.rmRF(test_dir);\n+        super.tearDown();\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/BasicReportTest.java","additions":3,"deletions":37,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.report;\n+\n+public class RecordContainer {\n+    public record Point(int x, int y) {}\n+    public static void main(String[] args) {\n+        System.out.println(new Point(0, 0).x);\n+        System.out.println(new Point(0, 0).y);\n+    }\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/RecordContainer.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.report;\n+\n+import com.sun.tdk.jcov.RepGen;\n+import com.sun.tdk.jcov.instrument.Util;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n+\n+public class RecordContainerTest extends ReportTest {\n+    @BeforeClass\n+    void setup() throws Exception {\n+        String[] copyClasses = {RecordContainer.class.getName(), RecordContainer.class.getName() + \"$Point\"};\n+        setup(RecordContainer.class, copyClasses);\n+        \/\/prepare original bytecode\n+        List<Path> classFiles = new Util(test_dir).copyBytecode(copyClasses);\n+    }\n+\n+    @Test\n+    void textReport() throws IOException {\n+        Path report = test_dir.resolve(\"report.javap\");\n+        List<String> params = new ArrayList<>();\n+        params.add(\"-javap\");\n+        params.add(test_dir.toString());\n+        params.add(\"-o\");\n+        params.add(report.toString());\n+        params.add(result.toString());\n+        new RepGen().run(params.toArray(new String[0]));\n+        assertTrue(Files.isDirectory(report));\n+        Path classHtml = report.resolve(RecordContainer.class.getName().replace('.', '\/') +\n+                \"$Point.html\");\n+        assertFalse(Files.readAllLines(classHtml).stream().anyMatch(l -> {\n+            if (l.matches(\".*<b>-\\\\d*<\/b>%\\\\(-\\\\d*\/\\\\d*\\\\).*\")) {\n+                System.err.println(\"Found some negative coverage:\");\n+                System.err.println(l);\n+                return true;\n+            } else return false;\n+        }));\n+    }\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/RecordContainerTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.report;\n+\n+import com.sun.tdk.jcov.Instr;\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import com.sun.tdk.jcov.instrument.InstrumentationOptions;\n+import com.sun.tdk.jcov.instrument.Util;\n+import org.testng.annotations.BeforeClass;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+public class ReportTest {\n+    protected Path test_dir;\n+    protected Path template;\n+    protected Path result;\n+\n+    public void setup(Class runClass, String... copyClasses) throws Exception {\n+        System.setProperty(\"jcov.selftest\", \"true\");\n+\n+        Path data_dir = Paths.get(System.getProperty(\"user.dir\"));\n+\n+        \/\/clear\n+        test_dir = data_dir.resolve(\"instr_test\");\n+        System.out.println(\"test dir = \" + test_dir);\n+        Util.rmRF(test_dir);\n+\n+        \/\/prepare bytecode\n+        List<Path> classFiles = new Util(test_dir).copyBytecode(copyClasses);\n+\n+        \/\/instrument\n+        template = test_dir.resolve(\"template.xml\");\n+        List<String> params = new ArrayList<>();\n+        params.add(\"-t\");\n+        params.add(template.toString());\n+        params.addAll(classFiles.stream().map(Path::toString).collect(Collectors.toSet()));\n+        new Instr().run(params.toArray(new String[0]));\n+\n+        \/\/run\n+        new Util(test_dir).runClass(runClass, new String[] {});\n+\n+        \/\/save coverage\n+        result = test_dir.resolve(\"result.xml\");\n+        DataRoot.getInstance(0).write(result.toString(), InstrumentationOptions.MERGE.OVERWRITE);\n+    }\n+    public void tearDown() throws IOException {\n+        Util.rmRF(test_dir);\n+    }\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/ReportTest.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}