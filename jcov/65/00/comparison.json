{"files":[{"patch":"@@ -26,1 +26,1 @@\n-build.number = 14\n+build.number = 15\n","filename":"build\/release.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -151,2 +151,0 @@\n-            } else if (wasHit && !isHit) {\n-                --covered;\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/LineCoverage.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024 Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -59,2 +59,8 @@\n-    public MethodCoverage(DataMethod method, boolean countBlocks) {\n-        this(method, countBlocks, null, null);\n+    \/**\n+     * Creates a new MethodCoverage instance for the given DataMethod.\n+     *\n+     * @param method the DataMethod for which to create the MethodCoverage instance\n+     * @param isJavapCoverage a boolean indicating whether the coverage is based on Javap output\n+     *\/\n+    public MethodCoverage(DataMethod method, boolean isJavapCoverage) {\n+        this(method, isJavapCoverage, null, null);\n@@ -64,1 +70,1 @@\n-     * <p> Creates new MethodCoverage instance <\/p>\n+     * <p> Creates a new MethodCoverage instance for the given DataMethod. <\/p>\n@@ -66,1 +72,4 @@\n-     * @param method\n+     * @param method the DataMethod for which to create the MethodCoverage instance\n+     * @param isJavapCoverage a boolean indicating whether the coverage is based on Javap output\n+     * @param ancFilters an array of AncFilter objects used to filter out certain blocks or branches\n+     * @param ancReason a string representing the reason for excluding certain blocks or branches\n@@ -68,1 +77,1 @@\n-    public MethodCoverage(DataMethod method, boolean javapCoverage, AncFilter[] ancFilters, String ancReason) {\n+    public MethodCoverage(DataMethod method, boolean isJavapCoverage, AncFilter[] ancFilters, String ancReason) {\n@@ -83,1 +92,1 @@\n-        if( !javapCoverage ) {\n+        if( !isJavapCoverage ) {\n@@ -89,1 +98,6 @@\n-     * Sets the line coverage for the method.\n+     * Sets the line coverage for the method based on the line table information\n+     * associated with the underlying DataMethod. It processes the line table\n+     * and updates the line coverage accordingly. If an item is covered, it\n+     * marks the corresponding lines as hit. If an item is not covered and is\n+     * marked as 'in Anc' (Ancillary), it marks the corresponding lines as\n+     * ancillary. It also sets the source line for each item if not already set.\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/report\/MethodCoverage.java","additions":22,"deletions":8,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.report;\n+\n+public class CoverageTarget {\n+\n+    public static void main(String[] args) {\n+        CoverageTarget target = new CoverageTarget();\n+\n+        target.testBranching(5);\n+        target.testLoop(3);\n+        target.testSwitch(\"c\");\n+        target.testExceptionHandling(true);\n+        target.testTryWithResources();\n+        target.useLambda(() -> \"Lambda result\");\n+        System.out.println(\"Inner: \" + target.new InnerClass().compute());\n+    }\n+\n+    public int testBranching(int x) {\n+        if (x > 10) {\n+            return x * 2;\n+        } else if (x > 5) {\n+            return x + 10;\n+        } else {\n+            return x - 1;\n+        }\n+    }\n+\n+    public int testLoop(int n) {\n+        int result = 0;\n+        for (int i = 0; i < n; i++) {\n+            if (i % 2 == 0) {\n+                result += i;\n+            } else {\n+                result -= i;\n+            }\n+        }\n+        int i = 0;\n+        while (i < 2) {\n+            result += i;\n+            i++;\n+        }\n+        return result;\n+    }\n+\n+    public String testSwitch(String input) {\n+        switch (input) {\n+            case \"a\":\n+                return \"A\";\n+            case \"b\":\n+                return \"B\";\n+            case \"c\":\n+                return \"C\";\n+            default:\n+                return \"Unknown\";\n+        }\n+    }\n+\n+    public String testExceptionHandling(boolean shouldThrow) {\n+        try {\n+            if (shouldThrow) {\n+                throw new IllegalArgumentException(\"Test exception\");\n+            }\n+            return \"No exception\";\n+        } catch (IllegalArgumentException e) {\n+            return \"Caught: \" + e.getMessage();\n+        } finally {\n+            System.out.println(\"In finally block\");\n+        }\n+    }\n+\n+    public String testTryWithResources() {\n+        try (DummyResource res = new DummyResource()) {\n+            res.use();\n+            return \"Resource used\";\n+        } catch (Exception e) {\n+            return \"Exception during resource use\";\n+        }\n+    }\n+\n+    public String useLambda(Supplier<String> supplier) {\n+        return supplier.get();\n+    }\n+\n+    public class InnerClass {\n+        public int compute() {\n+            return 42;\n+        }\n+    }\n+\n+    static class DummyResource implements AutoCloseable {\n+        public void use() {\n+            System.out.println(\"Using resource\");\n+        }\n+\n+        @Override\n+        public void close() {\n+            System.out.println(\"Closing resource\");\n+        }\n+    }\n+\n+    @FunctionalInterface\n+    public interface Supplier<T> {\n+        T get();\n+    }\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/CoverageTarget.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.report;\n+\n+import com.sun.tdk.jcov.RepGen;\n+import com.sun.tdk.jcov.instrument.Util;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import static org.testng.Assert.assertTrue;\n+\n+public class CoverageTargetTest extends ReportTest {\n+\n+    private String testClassName = CoverageTarget.class.getName();\n+\n+    @BeforeClass\n+    void setup() throws Exception {\n+        String[] copyClasses = {testClassName,\n+                testClassName + \"$DummyResource\",\n+                testClassName + \"$InnerClass\",\n+                testClassName + \"$Supplier\"};\n+        setup(CoverageTarget.class, copyClasses);\n+        \/\/prepare original bytecode\n+        new Util(test_dir).copyBytecode(copyClasses);\n+    }\n+\n+    @Test\n+    void plainReport() throws IOException {\n+        Path report = test_dir.resolve(\"report.plain\");\n+        List<String> params = new ArrayList<>();\n+        params.add(\"-o\");\n+        params.add(report.toString());\n+        params.add(result.toString());\n+        new RepGen().run(params.toArray(new String[0]));\n+        assertTrue(Files.isDirectory(report));\n+        Path classHtml = report.resolve(testClassName.replace('.', '\/') + \".html\");\n+        assertTrue(Files.readAllLines(classHtml).stream().anyMatch(l -> l.contains(\"<b>84<\/b>%(42\/50)\")));\n+    }\n+\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/report\/CoverageTargetTest.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}