{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,2 @@\n+import java.io.FileOutputStream;\n+import java.io.OutputStream;\n@@ -43,0 +45,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -44,0 +48,3 @@\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n@@ -70,5 +77,17 @@\n-                    ByteArrayOutputStream os = new ByteArrayOutputStream();\n-                    XmlContext ctx = new XmlContext(os, root.getParams());\n-                    ctx.setSkipNotCoveredClasses(agentdata);\n-                    root.xmlGen(ctx);\n-                    ctx.close();\n+\n+                    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+                    OutputStream os;\n+                    if (filename.endsWith(\".xml.zip\")) {\n+                        String xmlName = new File(filename).getName();\n+                        xmlName = xmlName.substring(0, xmlName.length() - \".zip\".length());\n+                        ZipOutputStream zos = new ZipOutputStream(baos);\n+                        zos.putNextEntry(new ZipEntry(xmlName));\n+                        os = zos;\n+                    } else os = baos;\n+\n+                    try (os) {\n+                        XmlContext ctx = new XmlContext(os, root.getParams());\n+                        ctx.setSkipNotCoveredClasses(agentdata);\n+                        root.xmlGen(ctx);\n+                        ctx.close();\n+                    }\n@@ -77,1 +96,2 @@\n-                    channel.write(ByteBuffer.wrap(os.toByteArray()));\n+                    channel.write(ByteBuffer.wrap(baos.toByteArray()));\n+\n","filename":"src\/classes\/com\/sun\/tdk\/jcov\/runtime\/JCovXMLFileSaver.java","additions":27,"deletions":7,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1,112 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package com.sun.tdk.jcov.instrument;\n-\n-import com.sun.tdk.jcov.Instr;\n-import com.sun.tdk.jcov.Merger;\n-import com.sun.tdk.jcov.data.FileFormatException;\n-import com.sun.tdk.jcov.instrument.DataRoot;\n-import com.sun.tdk.jcov.instrument.Util;\n-import com.sun.tdk.jcov.instrument.instr.UserCode;\n-import com.sun.tdk.jcov.io.Reader;\n-import org.testng.annotations.AfterClass;\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.Test;\n-\n-import java.io.IOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.stream.Collectors;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipOutputStream;\n-\n-import static org.testng.Assert.assertEquals;\n-\n-public class ReadZipTest {\n-    Path test_dir;\n-    Path template;\n-    Path template_zip;\n-    int method_slot = -1;\n-    @BeforeClass\n-    public void clean() throws IOException {\n-        System.setProperty(\"jcov.selftest\", \"true\");\n-        Path data_dir = Paths.get(System.getProperty(\"user.dir\"));\n-        test_dir = data_dir.resolve(\"instr_test\");\n-        System.out.println(\"test dir = \" + test_dir);\n-        Util.rmRF(test_dir);\n-        template = test_dir.resolve(\"template.xml\");\n-        template_zip = test_dir.resolve(\"template.xml.zip\");\n-    }\n-    @Test\n-    public void instrument() throws IOException, InterruptedException, FileFormatException {\n-        List<String> params = new ArrayList<>();\n-        params.add(\"-t\");\n-        params.add(template.toString());\n-        params.add(new Util(test_dir).copyBytecode(UserCode.class.getName()).get(0).toString());\n-        System.out.println(\"Running Instr with\");\n-        params.forEach(System.out::println);\n-        new Instr().run(params.toArray(new String[0]));\n-        try (var out = new ZipOutputStream(Files.newOutputStream(template_zip))) {\n-            out.putNextEntry(new ZipEntry(\"template.xml\"));\n-            out.write(Files.readAllBytes(template));\n-        }\n-        compare(Reader.readXML(template_zip.toString()), Reader.readXML(template.toString()));\n-    }\n-\n-    @Test(dependsOnMethods = \"instrument\")\n-    void merge() throws FileFormatException {\n-        var template_merge = test_dir.resolve(\"template_merge.xml\");\n-        List<String> params = new ArrayList<>();\n-        params.add(\"-o\");\n-        params.add(template_merge.toString());\n-        params.add(template_zip.toString());\n-        params.add(template.toString());\n-        System.out.println(\"Running Merger with\");\n-        params.forEach(System.out::println);\n-        new Merger().run(params.toArray(new String[0]));\n-        compare(Reader.readXML(template_merge.toString()), Reader.readXML(template.toString()));\n-    }\n-\n-    private void compare(DataRoot one, DataRoot another) {\n-        var methods = one.getClasses().stream()\n-                .flatMap(c -> c.getMethods().stream().map(m -> c.getName() + \".\" + m.getName() + m.getVmSignature()))\n-                .sorted().collect(Collectors.toList());\n-        var otherMethods = another.getClasses().stream()\n-                .flatMap(c -> c.getMethods().stream().map(m -> c.getName() + \".\" + m.getName() + m.getVmSignature()))\n-                .sorted().collect(Collectors.toList());\n-        assertEquals(methods.size(), otherMethods.size());\n-        for (int i = 0; i < methods.size(); i++) {\n-            assertEquals(methods.get(i), otherMethods.get(i));\n-        }\n-    }\n-\n-    @AfterClass\n-    public void tearDown() throws IOException {\n-        Util.rmRF(test_dir);\n-    }\n-}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/ReadZipTest.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"deleted"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package com.sun.tdk.jcov.instrument;\n+\n+import com.sun.tdk.jcov.Instr;\n+import com.sun.tdk.jcov.Merger;\n+import com.sun.tdk.jcov.data.FileFormatException;\n+import com.sun.tdk.jcov.instrument.DataRoot;\n+import com.sun.tdk.jcov.instrument.Util;\n+import com.sun.tdk.jcov.instrument.instr.UserCode;\n+import com.sun.tdk.jcov.io.Reader;\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+public class ZipTest {\n+    Path test_dir;\n+    Path template;\n+    Path template_zip;\n+    int method_slot = -1;\n+    @BeforeClass\n+    public void clean() throws IOException {\n+        System.setProperty(\"jcov.selftest\", \"true\");\n+        Path data_dir = Paths.get(System.getProperty(\"user.dir\"));\n+        test_dir = data_dir.resolve(\"instr_test\");\n+        System.out.println(\"test dir = \" + test_dir);\n+        Util.rmRF(test_dir);\n+        template = test_dir.resolve(\"template.xml\");\n+        template_zip = test_dir.resolve(\"template.xml.zip\");\n+    }\n+    @Test\n+    public void instrument() throws IOException, InterruptedException, FileFormatException {\n+        List<String> params = new ArrayList<>();\n+        params.add(\"-t\");\n+        params.add(template.toString());\n+        params.add(new Util(test_dir).copyBytecode(UserCode.class.getName()).get(0).toString());\n+        System.out.println(\"Running Instr with\");\n+        params.forEach(System.out::println);\n+        new Instr().run(params.toArray(new String[0]));\n+        try (var out = new ZipOutputStream(Files.newOutputStream(template_zip))) {\n+            out.putNextEntry(new ZipEntry(\"template.xml\"));\n+            out.write(Files.readAllBytes(template));\n+        }\n+        compare(Reader.readXML(template_zip.toString()), Reader.readXML(template.toString()));\n+    }\n+\n+    private void merge(Collection<Path> input, Path output) {\n+        List<String> params = new ArrayList<>();\n+        params.add(\"-o\");\n+        params.add(output.toString());\n+        input.forEach(i -> params.add(i.toString()));\n+        System.out.println(\"Running Merger with\");\n+        params.forEach(System.out::println);\n+        new Merger().run(params.toArray(new String[0]));\n+    }\n+\n+    @Test(dependsOnMethods = \"instrument\")\n+    void merge() throws FileFormatException {\n+        var template_merge = test_dir.resolve(\"template_merge.xml\");\n+        merge(List.of(template, template_zip), template_merge);\n+        compare(Reader.readXML(template_merge.toString()), Reader.readXML(template.toString()));\n+        var template_merge_zip = test_dir.resolve(\"template_merge.xml.zip\");\n+        merge(List.of(template, template_zip), template_merge_zip);\n+        compare(Reader.readXML(template_merge_zip.toString()), Reader.readXML(template.toString()));\n+    }\n+\n+    private void compare(DataRoot one, DataRoot another) {\n+        var methods = one.getClasses().stream()\n+                .flatMap(c -> c.getMethods().stream().map(m -> c.getName() + \".\" + m.getName() + m.getVmSignature()))\n+                .sorted().collect(Collectors.toList());\n+        var otherMethods = another.getClasses().stream()\n+                .flatMap(c -> c.getMethods().stream().map(m -> c.getName() + \".\" + m.getName() + m.getVmSignature()))\n+                .sorted().collect(Collectors.toList());\n+        assertEquals(methods.size(), otherMethods.size());\n+        for (int i = 0; i < methods.size(); i++) {\n+            assertEquals(methods.get(i), otherMethods.get(i));\n+        }\n+    }\n+\n+    @AfterClass\n+    public void tearDown() throws IOException {\n+        Util.rmRF(test_dir);\n+    }\n+}\n","filename":"test\/unit\/com\/sun\/tdk\/jcov\/instrument\/ZipTest.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"}]}