{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -102,1 +102,1 @@\n-                        var newLineCoverage = new MethodCoverage(newMethod, true).getLineCoverage();\n+                        var newLineCoverage = new MethodCoverage(newMethod, false).getLineCoverage();\n@@ -104,1 +104,1 @@\n-                                new MethodCoverage(oldMethod, true).getLineCoverage() : null;\n+                                new MethodCoverage(oldMethod, false).getLineCoverage() : null;\n@@ -116,1 +116,1 @@\n-                                        new MethodCoverage(oldMethod, true).getLineCoverage()) : null;\n+                                        new MethodCoverage(oldMethod, false).getLineCoverage()) : null;\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/jcov\/JCovCoverageComparison.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-            var lc = new MethodCoverage(m, true).getLineCoverage();\n+            var lc = new MethodCoverage(m, false).getLineCoverage();\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/jcov\/JCovLineCoverage.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -112,1 +112,1 @@\n-        var lc = new MethodCoverage(m, true).getLineCoverage();\n+        var lc = new MethodCoverage(m, false).getLineCoverage();\n@@ -133,2 +133,0 @@\n-            var lt = method.getLineTable();\n-            var mc = new MethodCoverage(method, true);\n","filename":"plugins\/coverage_reports\/src\/openjdk\/codetools\/jcov\/report\/jcov\/JCovMethodCoverageComparison.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"","filename":"plugins\/coverage_reports\/test\/TEST.ROOT","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/unit\/TEST.ROOT","status":"copied"},{"patch":"@@ -48,1 +48,2 @@\n-        coverage = new JCovLineCoverage(DataRoot.read(GitDifFilterTest.cp(xmlName).toString()), new SourceHierarchy() {\n+        DataRoot data = DataRoot.read(GitDifFilterTest.cp(xmlName).toString());\n+        coverage = new JCovLineCoverage(data, new SourceHierarchy() {\n","filename":"plugins\/coverage_reports\/test\/openjdk\/codetools\/jcov\/report\/jcov\/JCovLoadTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"","filename":"plugins\/simple_methods_anc\/test\/TEST.ROOT","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/unit\/TEST.ROOT","status":"copied"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025 Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,2 @@\n+import org.testng.annotations.AfterClass;\n+import org.testng.annotations.BeforeClass;\n@@ -29,1 +31,0 @@\n-import static org.testng.Assert.assertFalse;\n@@ -33,1 +34,1 @@\n-import java.io.IOException;\n+import java.io.*;\n@@ -35,2 +36,2 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n+import java.nio.file.*;\n+import java.nio.file.attribute.BasicFileAttributes;\n@@ -38,0 +39,3 @@\n+import java.util.List;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n@@ -41,0 +45,42 @@\n+    Path classesDir;\n+    Path classesJar;\n+    @BeforeClass\n+    void copyByteCode() throws IOException {\n+        List<Class> testClasses =\n+                List.of(DelegatorsTest.class, EmptyMethodsTest.class,\n+                        GettersTest.class, Scanner.class, SettersTest.class, ThrowersTest.class);\n+        classesDir = Files.createTempDirectory(MainTest.class.getName());\n+        testClasses.forEach(c -> {\n+            String fn = c.getName().replace('.', '\/') + \".class\";\n+            try (var in = c.getClassLoader()\n+                    .getResourceAsStream(fn)) {\n+                Path newFile = classesDir.resolve(fn);\n+                Files.createDirectories(newFile.getParent());\n+                Files.copy(in, newFile);\n+            } catch (IOException e) {\n+                throw new UncheckedIOException(e);\n+            }\n+        });\n+        classesJar = Files.createTempFile(MainTest.class.getName(), \".jar\");\n+        try (var jar = new JarOutputStream(Files.newOutputStream(classesJar))) {\n+            testClasses.forEach(c -> {\n+                String fn = c.getName().replace('.', '\/') + \".class\";\n+                try {\n+                    jar.putNextEntry(new JarEntry(fn));\n+                    try (BufferedInputStream in = new BufferedInputStream(c.getClassLoader().getResourceAsStream(fn))) {\n+                        byte[] buffer = new byte[1024];\n+                        while (true) {\n+                            int count = in.read(buffer);\n+                            if (count == -1)\n+                                break;\n+                            jar.write(buffer, 0, count);\n+                        }\n+                        jar.closeEntry();\n+                    }\n+                } catch (IOException e) {\n+                    throw new UncheckedIOException(e);\n+                }\n+            });\n+        }\n+    }\n+\n@@ -71,1 +117,0 @@\n-        String dir = System.getProperty(\"test.classes\");\n@@ -76,1 +121,1 @@\n-                \"file:\/\/\" + dir\n+                \"file:\/\/\" + classesDir\n@@ -85,1 +130,0 @@\n-        String jar = System.getProperty(\"test.jar\");\n@@ -90,1 +134,1 @@\n-                \"jar:file:\" + jar});\n+                \"jar:file:\" + classesJar});\n@@ -116,1 +160,0 @@\n-        String dir = System.getProperty(\"test.classes\");\n@@ -124,1 +167,1 @@\n-                \"file:\/\/\" + dir\n+                \"file:\/\/\" + classesDir\n@@ -133,0 +176,30 @@\n+\n+    @AfterClass\n+    void deleteByteCode() throws IOException {\n+        if (Files.exists(classesDir))\n+            Files.walkFileTree(classesDir, new FileVisitor<Path>() {\n+                @Override\n+                public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {\n+                    return FileVisitResult.CONTINUE;\n+                }\n+\n+                @Override\n+                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                    Files.delete(file);\n+                    return FileVisitResult.CONTINUE;\n+                }\n+\n+                @Override\n+                public FileVisitResult visitFileFailed(Path file, IOException exc) throws IOException {\n+                    return FileVisitResult.TERMINATE;\n+                }\n+\n+                @Override\n+                public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {\n+                    Files.delete(dir);\n+                    return FileVisitResult.CONTINUE;\n+                }\n+            });\n+        if (Files.exists(classesJar))\n+            Files.delete(classesJar);\n+    }\n","filename":"plugins\/simple_methods_anc\/test\/openjdk\/jcov\/filter\/simplemethods\/MainTest.java","additions":84,"deletions":11,"binary":false,"changes":95,"status":"modified"}]}