{"files":[{"patch":"@@ -826,13 +826,0 @@\n-    \/**\n-     * A convenience method that moves the mouse in multiple steps\n-     * from its current location to the destination point with a\n-     * 2 pixel step-length and a 20-millisecond delay.\n-     *\n-     * @param   dest    Destination point\n-     * @see     #glide(int, int)\n-     * @since   25\n-     *\/\n-    public void glide(Point dest) {\n-        glide(dest.x, dest.y);\n-    }\n-\n@@ -855,14 +842,0 @@\n-    \/**\n-     * A convenience method that moves the mouse in multiple\n-     * steps from source point to the destination point with a\n-     * 2 pixel step-length and a 20-millisecond delay.\n-     *\n-     * @param   src     Source point\n-     * @param   dest    Destination point\n-     * @see     #glide(int, int, int, int, int, int)\n-     * @since   25\n-     *\/\n-    public void glide(Point src, Point dest) {\n-        glide(src.x, src.y, dest.x, dest.y, DEFAULT_STEP_LENGTH, DEFAULT_STEP_DELAY);\n-    }\n-\n@@ -957,26 +930,0 @@\n-\n-    \/**\n-     * Types given array of characters one by one\n-     *\n-     * @param   symbols Array of characters to type\n-     * @throws  IllegalThreadStateException if called on the AWT event dispatching thread\n-     * @see     #type(char)\n-     * @since   25\n-     *\/\n-    public synchronized void type(char[] symbols) {\n-        for (int i = 0; i < symbols.length; i++) {\n-            type(symbols[i]);\n-        }\n-    }\n-\n-    \/**\n-     * Types given string\n-     *\n-     * @param   s   String to type\n-     * @throws  IllegalThreadStateException if called on the AWT event dispatching thread\n-     * @see     #type(char[])\n-     * @since   25\n-     *\/\n-    public synchronized void type(String s) {\n-        type(s.toCharArray());\n-    }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Robot.java","additions":0,"deletions":53,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-            robot.glide(new Point(0, 0), ttf1Center);\n+            robot.glide(0, 0, ttf1Center.x, ttf1Center.y);\n","filename":"test\/jdk\/java\/awt\/datatransfer\/Independence\/IndependenceAWTTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-            robot.glide(new Point(0, 0), ttf1Center);\n+            robot.glide(0, 0, ttf1Center.x, ttf1Center.y);\n","filename":"test\/jdk\/java\/awt\/datatransfer\/Independence\/IndependenceSwingTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -226,1 +226,1 @@\n-            robot.glide(origin, center);\n+            robot.glide(origin.x, origin.y, center.x, center.y);\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/ExtendedModifiersTest\/ExtendedModifiersTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -191,1 +191,1 @@\n-            robot.glide(origin, center);\n+            robot.glide(origin.x, origin.y, center.x, center.y);\n","filename":"test\/jdk\/java\/awt\/event\/KeyEvent\/KeyMaskTest\/KeyMaskTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-            robot.glide(origin, center);\n+            robot.glide(origin.x, origin.y, center.x, center.y);\n","filename":"test\/jdk\/java\/awt\/event\/MouseEvent\/MouseButtonsTest\/MouseButtonsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-        robot.glide(button2Origin, button2Center);\n+        robot.glide(button2Origin.x, button2Origin.y, button2Center.x, button2Center.y);\n","filename":"test\/jdk\/javax\/swing\/reliability\/TaskUndJFrameProperties.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}