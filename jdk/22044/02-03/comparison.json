{"files":[{"patch":"@@ -119,3 +119,0 @@\n-    private static int DEFAULT_SPEED = 20;       \/\/ Speed for mouse glide and click\n-    private static int DEFAULT_STEP_LENGTH = 2;  \/\/ Step length (in pixels) for mouse glide\n-\n@@ -124,0 +121,3 @@\n+    public final static int DEFAULT_STEP_DELAY = 20;       \/\/ Speed for mouse glide and click\n+    public final static int DEFAULT_STEP_LENGTH = 2;  \/\/ Step length (in pixels) for mouse glide\n+\n@@ -770,3 +770,4 @@\n-     * Clicks mouse button(s) by calling {@link java.awt.Robot#mousePress(int)} and\n-     * {@link java.awt.Robot#mouseRelease(int)} methods\n-     *\n+     * A convenience method that simulates clicking a mouse button by calling mousePress\n+     * and mouseRelease. Invokes waitForIdle with a default delay of 20ms after mousePress\n+     * and mouseRelease calls. For specifics on valid inputs please see\n+     * {@link java.awt.Robot#mousePress(int)}.\n@@ -788,1 +789,1 @@\n-     * @since   24\n+     * @since   25\n@@ -792,1 +793,1 @@\n-        waitForIdle(DEFAULT_SPEED);\n+        waitForIdle(DEFAULT_STEP_DELAY);\n@@ -794,1 +795,1 @@\n-        waitForIdle();\n+        waitForIdle(DEFAULT_STEP_DELAY);\n@@ -798,9 +799,1 @@\n-     * Clicks mouse button 1\n-     *\n-     * @throws  IllegalArgumentException if the {@code buttons} mask contains the mask for\n-     *          extra mouse button and support for extended mouse buttons is\n-     *          {@link Toolkit#areExtraMouseButtonsEnabled() disabled} by Java\n-     * @throws  IllegalArgumentException if the {@code buttons} mask contains the mask for\n-     *          extra mouse button that does not exist on the mouse and support for extended\n-     *          mouse buttons is {@link Toolkit#areExtraMouseButtonsEnabled() enabled}\n-     *          by Java\n+     * A convenience method that clicks mouse button 1.\n@@ -809,1 +802,1 @@\n-     * @since   24\n+     * @since   25\n@@ -816,3 +809,2 @@\n-     * Waits until all events currently on the event queue have been processed with given\n-     * delay after syncing threads. It uses more advanced method of synchronizing threads\n-     * unlike {@link java.awt.Robot#waitForIdle()}\n+     * A convenience method that calls waitForIdle then waits an additional specified\n+     * {@code delayValue} time in milliseconds.\n@@ -822,1 +814,1 @@\n-     * @throws  sun.awt.SunToolkit.IllegalThreadException if called on the AWT event\n+     * @throws  IllegalThreadStateException if called on the AWT event\n@@ -824,1 +816,3 @@\n-     * @since   24\n+     * @throws  IllegalArgumentException if {@code delayValue} is not between {@code 0}\n+     *          and {@code 60,000} milliseconds inclusive\n+     * @since   25\n@@ -832,2 +826,3 @@\n-     * Move the mouse in multiple steps from where it is\n-     * now to the destination coordinates.\n+     * A convenience method that moves the mouse in multiple\n+     * steps from its current location to the destination coordinates\n+     * with a 2 pixel step-length and a 20-millisecond delay.\n@@ -839,1 +834,1 @@\n-     * @since   24\n+     * @since   25\n@@ -847,2 +842,3 @@\n-     * Move the mouse in multiple steps from where it is\n-     * now to the destination point.\n+     * A convenience method that moves the mouse in multiple steps\n+     * from its current location to the destination point with a\n+     * 2 pixel step-length and a 20-millisecond delay.\n@@ -853,1 +849,1 @@\n-     * @since   24\n+     * @since   25\n@@ -860,2 +856,3 @@\n-     * Move the mouse in multiple steps from source coordinates\n-     * to the destination coordinates.\n+     * A convenience method that moves the mouse in multiple steps\n+     * from source coordinates to the destination coordinates with\n+     * a 2 pixel step-length and a 20-millisecond delay.\n@@ -869,1 +866,1 @@\n-     * @since   24\n+     * @since   25\n@@ -872,1 +869,1 @@\n-        glide(fromX, fromY, toX, toY, DEFAULT_STEP_LENGTH, DEFAULT_SPEED);\n+        glide(fromX, fromY, toX, toY, DEFAULT_STEP_LENGTH, DEFAULT_STEP_DELAY);\n@@ -876,2 +873,3 @@\n-     * Move the mouse in multiple steps from source point to the\n-     * destination point with default speed and step length.\n+     * A convenience method that moves the mouse in multiple\n+     * steps from source point to the destination point with a\n+     * 2 pixel step-length and a 20-millisecond delay.\n@@ -883,1 +881,1 @@\n-     * @since   24\n+     * @since   25\n@@ -886,1 +884,1 @@\n-        glide(src.x, src.y, dest.x, dest.y, DEFAULT_STEP_LENGTH, DEFAULT_SPEED);\n+        glide(src.x, src.y, dest.x, dest.y, DEFAULT_STEP_LENGTH, DEFAULT_STEP_DELAY);\n@@ -890,10 +888,15 @@\n-     * Move the mouse in multiple steps from source point to the\n-     * destination point with given speed and step length.\n-     *\n-     * @param   srcX        Source point x cordinate\n-     * @param   srcY        Source point y cordinate\n-     * @param   destX       Destination point x cordinate\n-     * @param   destY       Destination point y cordinate\n-     * @param   stepLength  Approximate length of one step\n-     * @param   speed       Delay between steps.\n-     *\n+     * A convenience method that moves the mouse in multiple\n+     * steps from source point to the destination point with\n+     * given step-length and delay.\n+     *\n+     * @param   srcX        Source point x coordinate\n+     * @param   srcY        Source point y coordinate\n+     * @param   destX       Destination point x coordinate\n+     * @param   destY       Destination point y coordinate\n+     * @param   stepLength  Preferred length of one step in pixels\n+     * @param   stepDelay   Delay between steps in milliseconds\n+     *\n+     * @throws  IllegalArgumentException if {@code stepLength} is a negative value or\n+     *          greater than the distance between source and destination points\n+     * @throws  IllegalArgumentException if {@code stepDelay} is not between {@code 0}\n+     *          and {@code 60,000} milliseconds inclusive\n@@ -902,1 +905,1 @@\n-     * @since   24\n+     * @since   25\n@@ -904,1 +907,1 @@\n-    public void glide(int srcX, int srcY, int destX, int destY, int stepLength, int speed) {\n+    public void glide(int srcX, int srcY, int destX, int destY, int stepLength, int stepDelay) {\n@@ -928,1 +931,1 @@\n-            delay(speed);\n+            delay(stepDelay);\n@@ -937,1 +940,2 @@\n-     * Successively presses and releases a given key.\n+     * A convenience method that simulates typing a key by calling keyPress and keyRelease.\n+     * Invokes waitForIdle with a default delay of 20ms after keyPress and keyRelease calls.\n@@ -943,1 +947,1 @@\n-     * @param   keycode Key to press (e.g. {@code KeyEvent.VK_A})\n+     * @param   keycode Key to type (e.g. {@code KeyEvent.VK_A})\n@@ -950,1 +954,1 @@\n-     * @since   24\n+     * @since   25\n@@ -952,1 +956,1 @@\n-    public void type(int keycode) {\n+    public synchronized void type(int keycode) {\n@@ -954,1 +958,1 @@\n-        waitForIdle(DEFAULT_SPEED);\n+        waitForIdle(DEFAULT_STEP_DELAY);\n@@ -956,1 +960,1 @@\n-        waitForIdle(DEFAULT_SPEED);\n+        waitForIdle(DEFAULT_STEP_DELAY);\n@@ -962,1 +966,1 @@\n-     * @param   c   Character to be typed (e.g. {@code 'a'})\n+     * @param   c   Character to type (e.g. {@code 'a'})\n@@ -966,1 +970,1 @@\n-     * @since   24\n+     * @since   25\n@@ -968,1 +972,1 @@\n-    public void type(char c) {\n+    public synchronized void type(char c) {\n@@ -975,1 +979,1 @@\n-     * @param   symbols Array of characters to be typed\n+     * @param   symbols Array of characters to type\n@@ -978,1 +982,1 @@\n-     * @since   24\n+     * @since   25\n@@ -980,1 +984,1 @@\n-    public void type(char[] symbols) {\n+    public synchronized void type(char[] symbols) {\n@@ -989,1 +993,1 @@\n-     * @param   s   String to be typed\n+     * @param   s   String to type\n@@ -992,1 +996,1 @@\n-     * @since   24\n+     * @since   25\n@@ -994,1 +998,1 @@\n-    public void type(String s) {\n+    public synchronized void type(String s) {\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Robot.java","additions":70,"deletions":66,"binary":false,"changes":136,"status":"modified"}]}