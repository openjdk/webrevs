{"files":[{"patch":"@@ -139,3 +139,0 @@\n-    private int stepDelay = DEFAULT_STEP_DELAY;\n-    private int stepLength = DEFAULT_STEP_LENGTH;\n-\n@@ -850,2 +847,2 @@\n-     * {@link #mouseMove(int, int) mouseMove} with a {@link #getGlideStepLength() step-length}\n-     * and {@link #getGlideStepDelay() step-delay}.\n+     * {@link #mouseMove(int, int) mouseMove} with a default {@link #DEFAULT_STEP_LENGTH step-length}\n+     * and {@link #DEFAULT_STEP_DELAY step-delay}.\n@@ -858,3 +855,3 @@\n-     * @see     #getGlideStepLength\n-     * @see     #getGlideStepDelay\n-     * @see     #glide(int, int, int, int)\n+     * @see     #DEFAULT_STEP_LENGTH\n+     * @see     #DEFAULT_STEP_DELAY\n+     * @see     #glide(int, int, int, int, int, int)\n@@ -868,0 +865,22 @@\n+    \/**\n+     * A convenience method that moves the mouse in multiple steps\n+     * from source coordinates to the destination coordinates. Invokes\n+     * {@link #mouseMove(int, int) mouseMove} with a default {@link #DEFAULT_STEP_LENGTH step-length}\n+     * and {@link #DEFAULT_STEP_DELAY step-delay}.\n+     *\n+     * @param   fromX   Source point x coordinate\n+     * @param   fromY   Source point y coordinate\n+     * @param   toX     Destination point x coordinate\n+     * @param   toY     Destination point y coordinate\n+     *\n+     * @throws  IllegalThreadStateException if called on the AWT event dispatching\n+     *          thread and {@code isAutoWaitForIdle} would return true\n+     * @see     #DEFAULT_STEP_LENGTH\n+     * @see     #DEFAULT_STEP_DELAY\n+     * @see     #glide(int, int, int, int, int, int)\n+     * @since   26\n+     *\/\n+    public void glide(int fromX, int fromY, int toX, int toY) {\n+        glide(fromX, fromY, toX, toY, DEFAULT_STEP_LENGTH, DEFAULT_STEP_DELAY);\n+    }\n+\n@@ -870,3 +889,2 @@\n-     * steps from the source coordinates to the destination coordinates. Invokes\n-     * {@link #mouseMove(int, int) mouseMove} with a {@link #getGlideStepLength() step-length}\n-     * and {@link #getGlideStepDelay() step-delay}.\n+     * steps from source point to the destination point with a\n+     * given {@code stepLength} and {@code stepDelay}.\n@@ -874,4 +892,6 @@\n-     * @param   srcX   Source point x coordinate\n-     * @param   srcY   Source point y coordinate\n-     * @param   destX  Destination point x coordinate\n-     * @param   destY  Destination point y coordinate\n+     * @param   srcX        Source point x coordinate\n+     * @param   srcY        Source point y coordinate\n+     * @param   destX       Destination point x coordinate\n+     * @param   destY       Destination point y coordinate\n+     * @param   stepLength  Preferred length of one step in pixels\n+     * @param   stepDelay   Delay between steps in milliseconds\n@@ -879,2 +899,3 @@\n-     * @throws  IllegalArgumentException if {@code stepLength} is greater than the distance\n-     *          between source and destination points\n+     * @throws  IllegalArgumentException if {@code stepLength} is not greater than zero\n+     * @throws  IllegalArgumentException if {@code stepDelay} is not between {@code 0}\n+     *          and {@code 60,000} milliseconds inclusive\n@@ -883,2 +904,0 @@\n-     * @see     #getGlideStepLength\n-     * @see     #getGlideStepDelay\n@@ -889,1 +908,8 @@\n-    public void glide(int srcX, int srcY, int destX, int destY) {\n+    public void glide(int srcX, int srcY, int destX, int destY, int stepLength, int stepDelay) {\n+        if (stepLength <= 0) {\n+            throw new IllegalArgumentException(\"Step length must be greater than zero\");\n+        }\n+        if (stepDelay <= 0 || stepDelay > 60000) {\n+            throw new IllegalArgumentException(\"Step delay must be between 0 and 60,000 milliseconds\");\n+        }\n+\n@@ -923,57 +949,0 @@\n-    \/**\n-     * Gets the current step-length of {@link #glide(int, int, int, int) glide}.\n-     * The initial value is {@link #DEFAULT_STEP_LENGTH}.\n-     *\n-     * @return  Current step-length of {@link #glide(int, int, int, int) glide}\n-     * @see     #glide(int, int, int, int)\n-     * @since   26\n-     *\/\n-    public int getGlideStepLength() {\n-        return stepLength;\n-    }\n-\n-    \/**\n-     * Sets the step-length of {@link #glide(int, int, int, int) glide}.\n-     *\n-     * @param   stepLength   Step-length in pixels for {@link #glide(int, int, int, int) glide}\n-     *\n-     * @throws  IllegalArgumentException if {@code stepLength} is not greater than zero\n-     * @see     #glide(int, int, int, int)\n-     * @since   26\n-     *\/\n-    public void setGlideStepLength(int stepLength) {\n-        if (stepLength <= 0) {\n-            throw new IllegalArgumentException(\"Step-length must be greater than zero\");\n-        }\n-        this.stepLength = stepLength;\n-    }\n-\n-    \/**\n-     * Gets the current step-delay in milliseconds of {@link #glide(int, int, int, int) glide}.\n-     * The initial value is {@link #DEFAULT_STEP_DELAY}.\n-     *\n-     * @return  Current step-delay of {@link #glide(int, int, int, int) glide}\n-     * @see     #glide(int, int, int, int)\n-     * @since   26\n-     *\/\n-    public int getGlideStepDelay() {\n-        return stepDelay;\n-    }\n-\n-    \/**\n-     * Sets the step-delay in milliseconds of {@link #glide(int, int, int, int) glide}.\n-     *\n-     * @param   stepDelay   Step-delay in milliseconds for {@link #glide(int, int, int, int) glide}\n-     *\n-     * @throws  IllegalArgumentException if {@code stepDelay} is not between {@code 0}\n-     *          and {@code 60,000} milliseconds inclusive\n-     * @see     #glide(int, int, int, int)\n-     * @since   26\n-     *\/\n-    public void setGlideStepDelay(int stepDelay) {\n-        if (stepDelay < 0 || stepDelay > 60000) {\n-            throw new IllegalArgumentException(\"Step delay must be between 0 and 60,000\");\n-        }\n-        this.stepDelay = stepDelay;\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Robot.java","additions":46,"deletions":77,"binary":false,"changes":123,"status":"modified"}]}