{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-\/**\n+\/*\n@@ -29,0 +29,1 @@\n+ * @library \/test\/lib\n@@ -31,1 +32,0 @@\n- * @compile --enable-preview -source ${jdk.version} ClassFileVersionTest.java\n@@ -35,0 +35,2 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n@@ -37,0 +39,2 @@\n+import jdk.test.lib.ByteCodeLoader;\n+\n@@ -39,7 +43,0 @@\n-    \/*\n-     * Include a use of a preview API so that the minor class file\n-     * version of the class file for this class gets set during\n-     * compilation. If a particular class becomes non-preview, any\n-     * currently preview class can be substituted in.\n-     *\/\n-    private static final Class<?> PREVIEW_API = java.lang.ScopedValue.class;\n@@ -72,2 +69,4 @@\n-        \/\/ ClassFileVersionTest use preview features so its minor version should be 0xFFFF\n-        testIt(ClassFileVersionTest.class, (~LOWER_16) | latestMajor);\n+\n+        Class<?> previewClass = ByteCodeLoader.load(\"PreviewClass\", ClassFile.of().build(ClassDesc.of(\"PreviewClass\"),\n+                clb -> clb.withVersion(ClassFile.latestMajorVersion(), ClassFile.PREVIEW_MINOR_VERSION)));\n+        testIt(previewClass, (~LOWER_16) | latestMajor);\n","filename":"test\/hotspot\/jtreg\/runtime\/ClassFile\/ClassFileVersionTest.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"}]}