{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -487,1 +487,1 @@\n-    \/\/ Instruction version, refer to opcode\n+    \/\/ Instruction version, refer to opcode, trusted\n@@ -496,4 +496,3 @@\n-    \/\/ Shortcut version, refer to and validate slot\n-    private void writeLocalVar(int bytecode, int slot) {\n-        \/\/ TODO validation like (slot & 0xFFFF) == slot\n-        if (slot < 256) {\n+    \/\/ local var access, not a trusted write method, needs slot validation\n+    private void localAccess(int bytecode, int slot) {\n+        if ((slot & ~0xFF) == 0) {\n@@ -502,0 +501,1 @@\n+            BytecodeHelpers.validateSlot(slot);\n@@ -992,1 +992,1 @@\n-            writeLocalVar(ALOAD, slot);\n+            localAccess(ALOAD, slot);\n@@ -1020,1 +1020,1 @@\n-            writeLocalVar(ASTORE, slot);\n+            localAccess(ASTORE, slot);\n@@ -1103,1 +1103,1 @@\n-            writeLocalVar(DLOAD, slot);\n+            localAccess(DLOAD, slot);\n@@ -1137,1 +1137,1 @@\n-            writeLocalVar(DSTORE, slot);\n+            localAccess(DSTORE, slot);\n@@ -1249,1 +1249,1 @@\n-            writeLocalVar(FLOAD, slot);\n+            localAccess(FLOAD, slot);\n@@ -1283,1 +1283,1 @@\n-            writeLocalVar(FSTORE, slot);\n+            localAccess(FSTORE, slot);\n@@ -1509,1 +1509,1 @@\n-            writeLocalVar(ILOAD, slot);\n+            localAccess(ILOAD, slot);\n@@ -1609,1 +1609,1 @@\n-            writeLocalVar(ISTORE, slot);\n+            localAccess(ISTORE, slot);\n@@ -1704,1 +1704,1 @@\n-            writeLocalVar(LLOAD, slot);\n+            localAccess(LLOAD, slot);\n@@ -1756,1 +1756,1 @@\n-            writeLocalVar(LSTORE, slot);\n+            localAccess(LSTORE, slot);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import java.lang.constant.ClassDesc;\n+import java.lang.reflect.Parameter;\n@@ -36,0 +38,1 @@\n+import java.util.function.Consumer;\n@@ -42,0 +45,1 @@\n+import static java.lang.classfile.ClassFile.ACC_STATIC;\n@@ -113,1 +117,3 @@\n-                \/\/check(fails, () -> execute(cob -> fac.accept(cob, i)));\n+                if (fails) {\n+                    ensureFailFast(i, cob -> fac.accept(cob, i));\n+                }\n@@ -118,2 +124,4 @@\n-                \/\/check(fails, () -> execute(cob -> cob.loadLocal(tk, i)));\n-                \/\/check(fails, () -> execute(cob -> cob.storeLocal(tk, i)));\n+                if (fails) {\n+                    ensureFailFast(i, cob -> cob.loadLocal(tk, i));\n+                    ensureFailFast(i, cob -> cob.storeLocal(tk, i));\n+                }\n@@ -123,1 +131,3 @@\n-            \/\/check(fails, () -> execute(cob -> cob.iinc(i, 1)));\n+            if (fails) {\n+                ensureFailFast(i, cob -> cob.iinc(i, 1));\n+            }\n@@ -153,0 +163,25 @@\n+    \/\/ CodeBuilder can fail with IAE due to other reasons, so we cannot check\n+    \/\/ \"success\" but can ensure things fail fast\n+    static void ensureFailFast(int value, Consumer<CodeBuilder> action) {\n+        \/\/ Can fail with AssertionError instead of IAE\n+        Consumer<CodeBuilder> checkedAction = cob -> {\n+            action.accept(cob);\n+            fail(\"Bad slot access did not fail fast: \"  + value);\n+        };\n+        var cf = ClassFile.of();\n+        CodeTransform noopCodeTransform = CodeBuilder::with;\n+        \/\/ Direct builders\n+        assertThrows(IllegalArgumentException.class, () -> cf.build(ClassDesc.of(\"Test\"), clb -> clb\n+                .withMethodBody(\"test\", MTD_void, ACC_STATIC, checkedAction)));\n+        \/\/ Chained builders\n+        assertThrows(IllegalArgumentException.class, () -> cf.build(ClassDesc.of(\"Test\"), clb -> clb\n+                .withMethodBody(\"test\", MTD_void, ACC_STATIC, cob -> cob\n+                        .transforming(CodeTransform.ACCEPT_ALL, checkedAction))));\n+        var classTemplate = cf.build(ClassDesc.of(\"Test\"), clb -> clb\n+                .withMethodBody(\"test\", MTD_void, ACC_STATIC, CodeBuilder::return_));\n+        \/\/ Indirect builders\n+        assertThrows(IllegalArgumentException.class, () -> cf.transformClass(cf.parse(classTemplate),\n+                ClassTransform.transformingMethodBodies(CodeTransform.endHandler(checkedAction)\n+                        .andThen(noopCodeTransform))));\n+    }\n+\n@@ -166,2 +201,4 @@\n-        assertThrows(IllegalArgumentException.class, () -> IncrementInstruction.of(0, Short.MAX_VALUE + 1));\n-        assertThrows(IllegalArgumentException.class, () -> IncrementInstruction.of(0, Short.MIN_VALUE - 1));\n+        for (int i : new int[] {Short.MIN_VALUE - 1, Short.MAX_VALUE + 1}) {\n+            assertThrows(IllegalArgumentException.class, () -> IncrementInstruction.of(0, i));\n+            ensureFailFast(i, cob -> cob.iinc(0, i));\n+        }\n","filename":"test\/jdk\/jdk\/classfile\/InstructionValidationTest.java","additions":44,"deletions":7,"binary":false,"changes":51,"status":"modified"}]}