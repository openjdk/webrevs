{"files":[{"patch":"@@ -399,2 +399,2 @@\n-                            cob.loadLocal(TypeKind.from(argType), cob.parameterSlot(i));\n-                            cob.putfield(pool.fieldRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(argNames[i], argDescs[i])));\n+                            cob.loadLocal(TypeKind.from(argType), cob.parameterSlot(i))\n+                               .putfield(pool.fieldRefEntry(lambdaClassEntry, pool.nameAndTypeEntry(argNames[i], argDescs[i])));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -894,4 +894,3 @@\n-        cob.goto_w(L_done);\n-\n-        \/\/ L_fallback:\n-        cob.labelBinding(L_fallback);\n+        cob.goto_w(L_done)\n+           \/\/ L_fallback:\n+           .labelBinding(L_fallback);\n@@ -948,4 +947,3 @@\n-        cob.exceptionCatch(L_startBlock, L_endBlock, L_handler, CD_Throwable);\n-\n-        \/\/ Normal case\n-        cob.labelBinding(L_startBlock);\n+        cob.exceptionCatch(L_startBlock, L_endBlock, L_handler, CD_Throwable)\n+           \/\/ Normal case\n+           .labelBinding(L_startBlock);\n@@ -955,9 +953,7 @@\n-        cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", methodDesc(type.basicType()));\n-        cob.labelBinding(L_endBlock);\n-        cob.goto_w(L_done);\n-\n-        \/\/ Exceptional case\n-        cob.labelBinding(L_handler);\n-\n-        \/\/ Check exception's type\n-        cob.dup();\n+        cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", methodDesc(type.basicType()))\n+           .labelBinding(L_endBlock)\n+           .goto_w(L_done)\n+           \/\/ Exceptional case\n+           .labelBinding(L_handler)\n+           \/\/ Check exception's type\n+           .dup();\n@@ -966,2 +962,2 @@\n-        cob.swap();\n-        cob.invokevirtual(CD_Class, \"isInstance\", MTD_boolean_Object);\n+        cob.swap()\n+           .invokevirtual(CD_Class, \"isInstance\", MTD_boolean_Object);\n@@ -977,7 +973,5 @@\n-        cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", methodDesc(catcherType.basicType()));\n-        cob.goto_w(L_done);\n-\n-        cob.labelBinding(L_rethrow);\n-        cob.athrow();\n-\n-        cob.labelBinding(L_done);\n+        cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", methodDesc(catcherType.basicType()))\n+           .goto_w(L_done)\n+           .labelBinding(L_rethrow)\n+           .athrow()\n+           .labelBinding(L_done);\n@@ -1078,2 +1072,2 @@\n-        cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", methodDesc(type.basicType()));\n-        cob.labelBinding(lTo);\n+        cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", methodDesc(type.basicType()))\n+           .labelBinding(lTo);\n@@ -1087,1 +1081,1 @@\n-        cob.loadConstant(null);\n+        cob.aconst_null();\n@@ -1092,6 +1086,5 @@\n-        cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", cleanupDesc);\n-        cob.goto_w(lDone);\n-\n-        \/\/ CATCH:\n-        cob.labelBinding(lCatch);\n-        cob.dup();\n+        cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", cleanupDesc)\n+           .goto_w(lDone)\n+           \/\/ CATCH:\n+           .labelBinding(lCatch)\n+           .dup();\n@@ -1110,4 +1103,3 @@\n-        cob.athrow();\n-\n-        \/\/ DONE:\n-        cob.labelBinding(lDone);\n+        cob.athrow()\n+           \/\/ DONE:\n+           .labelBinding(lDone);\n@@ -1150,3 +1142,2 @@\n-        cob.tableswitch(0, numCases - 1, defaultLabel, cases);\n-\n-        cob.labelBinding(defaultLabel);\n+        cob.tableswitch(0, numCases - 1, defaultLabel, cases)\n+           .labelBinding(defaultLabel);\n@@ -1155,2 +1146,2 @@\n-        cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", caseDescriptor);\n-        cob.goto_(endLabel);\n+        cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", caseDescriptor)\n+           .goto_(endLabel);\n@@ -1162,2 +1153,2 @@\n-            cob.loadConstant(i);\n-            cob.aaload();\n+            cob.loadConstant(i)\n+               .aaload();\n@@ -1167,3 +1158,2 @@\n-            cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", caseDescriptor);\n-\n-            cob.goto_(endLabel);\n+            cob.invokevirtual(CD_MethodHandle, \"invokeBasic\", caseDescriptor)\n+               .goto_(endLabel);\n@@ -1338,4 +1328,3 @@\n-            cob.goto_w(lDone);\n-\n-            \/\/ this is the beginning of the next loop clause\n-            cob.labelBinding(lNext);\n+            cob.goto_w(lDone)\n+               \/\/ this is the beginning of the next loop clause\n+               .labelBinding(lNext);\n@@ -1344,4 +1333,3 @@\n-        cob.goto_w(lLoop);\n-\n-        \/\/ DONE:\n-        cob.labelBinding(lDone);\n+        cob.goto_w(lLoop)\n+           \/\/ DONE:\n+           .labelBinding(lDone);\n@@ -1373,2 +1361,2 @@\n-        cob.loadConstant(clause);\n-        cob.aaload();\n+        cob.loadConstant(clause)\n+           .aaload();\n@@ -1388,2 +1376,2 @@\n-        cob.loadConstant(which - 1);\n-        cob.aaload();\n+        cob.loadConstant(which - 1)\n+           .aaload();\n@@ -1522,2 +1510,2 @@\n-                                cob.loadConstant(invokerType.parameterCount());\n-                                cob.anewarray(CD_Object);\n+                                cob.loadConstant(invokerType.parameterCount())\n+                                   .anewarray(CD_Object);\n@@ -1528,2 +1516,2 @@\n-                                    cob.dup();\n-                                    cob.loadConstant(i);\n+                                    cob.dup()\n+                                       .loadConstant(i);\n@@ -1595,3 +1583,3 @@\n-                                    cob.aload(1);\n-                                    cob.loadConstant(i);\n-                                    cob.aaload();\n+                                    cob.aload(1)\n+                                       .loadConstant(i)\n+                                       .aaload();\n@@ -1648,3 +1636,3 @@\n-                    cob.ldc(os.toString());\n-                    cob.pop();\n-                    cob.return_();\n+                    cob.ldc(os.toString())\n+                       .pop()\n+                       .return_();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":59,"deletions":71,"binary":false,"changes":130,"status":"modified"},{"patch":"@@ -376,7 +376,6 @@\n-            clb.withSuperclass(CD_Object);\n-            clb.withFlags(ACC_FINAL | ACC_SYNTHETIC);\n-            clb.withInterfaceSymbols(ifaceDesc);\n-\n-            \/\/ static and instance fields\n-            clb.withField(TYPE_NAME, CD_Class, ACC_PRIVATE | ACC_STATIC | ACC_FINAL);\n-            clb.withField(TARGET_NAME, CD_MethodHandle, ACC_PRIVATE | ACC_FINAL);\n+            clb.withSuperclass(CD_Object)\n+               .withFlags(ACC_FINAL | ACC_SYNTHETIC)\n+               .withInterfaceSymbols(ifaceDesc)\n+               \/\/ static and instance fields\n+               .withField(TYPE_NAME, CD_Class, ACC_PRIVATE | ACC_STATIC | ACC_FINAL)\n+               .withField(TARGET_NAME, CD_MethodHandle, ACC_PRIVATE | ACC_FINAL);\n@@ -389,3 +388,3 @@\n-                cob.loadConstant(ifaceDesc);\n-                cob.putstatic(proxyDesc, TYPE_NAME, CD_Class);\n-                cob.return_();\n+                cob.loadConstant(ifaceDesc)\n+                   .putstatic(proxyDesc, TYPE_NAME, CD_Class)\n+                   .return_();\n@@ -396,11 +395,9 @@\n-                cob.aload(0);\n-                cob.invokespecial(CD_Object, INIT_NAME, MTD_void);\n-\n-                \/\/ call ensureOriginalLookup to verify the given Lookup has access\n-                cob.aload(1);\n-                cob.invokestatic(proxyDesc, \"ensureOriginalLookup\", MTD_void_Lookup);\n-\n-                \/\/ this.target = target;\n-                cob.aload(0);\n-                cob.aload(2);\n-                cob.putfield(proxyDesc, TARGET_NAME, CD_MethodHandle);\n+                cob.aload(0)\n+                   .invokespecial(CD_Object, INIT_NAME, MTD_void)\n+                   \/\/ call ensureOriginalLookup to verify the given Lookup has access\n+                   .aload(1)\n+                   .invokestatic(proxyDesc, ENSURE_ORIGINAL_LOOKUP, MTD_void_Lookup)\n+                   \/\/ this.target = target;\n+                   .aload(0)\n+                   .aload(2)\n+                   .putfield(proxyDesc, TARGET_NAME, CD_MethodHandle);\n@@ -411,5 +408,5 @@\n-                    cob.aload(0);\n-                    cob.aload(3);\n-                    cob.loadConstant(mi.desc);\n-                    cob.invokevirtual(CD_MethodHandle, \"asType\", MTD_MethodHandle_MethodType);\n-                    cob.putfield(proxyDesc, mi.fieldName, CD_MethodHandle);\n+                    cob.aload(0)\n+                       .aload(3)\n+                       .loadConstant(mi.desc)\n+                       .invokevirtual(CD_MethodHandle, \"asType\", MTD_MethodHandle_MethodType)\n+                       .putfield(proxyDesc, mi.fieldName, CD_MethodHandle);\n@@ -428,20 +425,20 @@\n-                cob.aload(0);\n-                cob.invokevirtual(CD_MethodHandles_Lookup, \"lookupClass\", MTD_Class);\n-                cob.loadConstant(proxyDesc);\n-                cob.if_acmpne(failLabel);\n-                \/\/ check original access\n-                cob.aload(0);\n-                cob.invokevirtual(CD_MethodHandles_Lookup, \"lookupModes\", MTD_int);\n-                cob.loadConstant(Lookup.ORIGINAL);\n-                cob.iand();\n-                cob.ifeq(failLabel);\n-                \/\/ success\n-                cob.return_();\n-                \/\/ throw exception\n-                cob.labelBinding(failLabel);\n-                cob.new_(CD_IllegalAccessException);\n-                cob.dup();\n-                cob.aload(0); \/\/ lookup\n-                cob.invokevirtual(CD_Object, \"toString\", MTD_String);\n-                cob.invokespecial(CD_IllegalAccessException, INIT_NAME, MTD_void_String);\n-                cob.athrow();\n+                cob.aload(0)\n+                   .invokevirtual(CD_MethodHandles_Lookup, \"lookupClass\", MTD_Class)\n+                   .loadConstant(proxyDesc)\n+                   .if_acmpne(failLabel)\n+                   \/\/ check original access\n+                   .aload(0)\n+                   .invokevirtual(CD_MethodHandles_Lookup, \"lookupModes\", MTD_int)\n+                   .loadConstant(Lookup.ORIGINAL)\n+                   .iand()\n+                   .ifeq(failLabel)\n+                   \/\/ success\n+                   .return_()\n+                   \/\/ throw exception\n+                   .labelBinding(failLabel)\n+                   .new_(CD_IllegalAccessException)\n+                   .dup()\n+                   .aload(0) \/\/ lookup\n+                   .invokevirtual(CD_Object, \"toString\", MTD_String)\n+                   .invokespecial(CD_IllegalAccessException, INIT_NAME, MTD_void_String)\n+                   .athrow();\n@@ -456,2 +453,2 @@\n-                                    bcb.aload(0);\n-                                    bcb.getfield(proxyDesc, mi.fieldName, CD_MethodHandle);\n+                                    bcb.aload(0)\n+                                       .getfield(proxyDesc, mi.fieldName, CD_MethodHandle);\n@@ -462,2 +459,2 @@\n-                                    bcb.invokevirtual(CD_MethodHandle, \"invokeExact\", mi.desc);\n-                                    bcb.return_(TypeKind.from(mi.desc.returnType()));\n+                                    bcb.invokevirtual(CD_MethodHandle, \"invokeExact\", mi.desc)\n+                                       .return_(TypeKind.from(mi.desc.returnType()));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":47,"deletions":50,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.constant.ConstantDescs;\n@@ -58,0 +57,1 @@\n+import static java.lang.constant.ConstantDescs.*;\n@@ -89,7 +89,7 @@\n-            MethodTypeDescImpl.ofValidated(ConstantDescs.CD_int, ConstantDescs.CD_int, ConstantDescs.CD_int);\n-    private static final MethodTypeDesc MTD_TYPE_SWITCH = MethodTypeDescImpl.ofValidated(ConstantDescs.CD_int,\n-            ConstantDescs.CD_Object,\n-            ConstantDescs.CD_int);\n-    private static final MethodTypeDesc MTD_TYPE_SWITCH_EXTRA = MethodTypeDescImpl.ofValidated(ConstantDescs.CD_int,\n-            ConstantDescs.CD_Object,\n-            ConstantDescs.CD_int,\n+            MethodTypeDescImpl.ofValidated(CD_int, CD_int, CD_int);\n+    private static final MethodTypeDesc MTD_TYPE_SWITCH = MethodTypeDescImpl.ofValidated(CD_int,\n+            CD_Object,\n+            CD_int);\n+    private static final MethodTypeDesc MTD_TYPE_SWITCH_EXTRA = MethodTypeDescImpl.ofValidated(CD_int,\n+            CD_Object,\n+            CD_int,\n@@ -97,1 +97,1 @@\n-            ConstantDescs.CD_List);\n+            CD_List);\n@@ -487,5 +487,5 @@\n-            cb.iload(RESTART_IDX);\n-            cb.loadConstant(labelConstants.length + 1);\n-            cb.invokestatic(CD_Objects, \"checkIndex\", CHECK_INDEX_DESCRIPTOR);\n-            cb.pop();\n-            cb.aload(SELECTOR_OBJ);\n+            cb.iload(RESTART_IDX)\n+              .loadConstant(labelConstants.length + 1)\n+              .invokestatic(CD_Objects, \"checkIndex\", CHECK_INDEX_DESCRIPTOR)\n+              .pop()\n+              .aload(SELECTOR_OBJ);\n@@ -493,4 +493,4 @@\n-            cb.ifnonnull(nonNullLabel);\n-            cb.iconst_m1();\n-            cb.ireturn();\n-            cb.labelBinding(nonNullLabel);\n+            cb.ifnonnull(nonNullLabel)\n+              .iconst_m1()\n+              .ireturn()\n+              .labelBinding(nonNullLabel);\n@@ -499,1 +499,1 @@\n-                        .ireturn();\n+                  .ireturn();\n@@ -538,3 +538,3 @@\n-                            cb.aload(SELECTOR_OBJ);\n-                            cb.instanceOf(Wrapper.forBasicType(classLabel).wrapperClassDescriptor());\n-                            cb.ifeq(next);\n+                            cb.aload(SELECTOR_OBJ)\n+                              .instanceOf(Wrapper.forBasicType(classLabel).wrapperClassDescriptor())\n+                              .ifeq(next);\n@@ -545,2 +545,2 @@\n-                            cb.aload(SELECTOR_OBJ);\n-                            cb.instanceOf(ConstantDescs.CD_Number);\n+                            cb.aload(SELECTOR_OBJ)\n+                              .instanceOf(CD_Number);\n@@ -553,2 +553,2 @@\n-                            cb.aload(SELECTOR_OBJ);\n-                            cb.checkcast(ConstantDescs.CD_Number);\n+                            cb.aload(SELECTOR_OBJ)\n+                              .checkcast(CD_Number);\n@@ -556,1 +556,1 @@\n-                                cb.invokevirtual(ConstantDescs.CD_Number,\n+                                cb.invokevirtual(CD_Number,\n@@ -558,1 +558,1 @@\n-                                        MethodTypeDesc.of(ConstantDescs.CD_long));\n+                                        MethodTypeDesc.of(CD_long));\n@@ -560,1 +560,1 @@\n-                                cb.invokevirtual(ConstantDescs.CD_Number,\n+                                cb.invokevirtual(CD_Number,\n@@ -562,1 +562,1 @@\n-                                        MethodTypeDesc.of(ConstantDescs.CD_float));\n+                                        MethodTypeDesc.of(CD_float));\n@@ -564,1 +564,1 @@\n-                                cb.invokevirtual(ConstantDescs.CD_Number,\n+                                cb.invokevirtual(CD_Number,\n@@ -566,1 +566,1 @@\n-                                        MethodTypeDesc.of(ConstantDescs.CD_double));\n+                                        MethodTypeDesc.of(CD_double));\n@@ -569,1 +569,1 @@\n-                                cb.invokevirtual(ConstantDescs.CD_Number,\n+                                cb.invokevirtual(CD_Number,\n@@ -571,9 +571,9 @@\n-                                        MethodTypeDesc.of(ConstantDescs.CD_int));\n-                                cb.goto_(compare);\n-                                cb.labelBinding(notNumber);\n-                                cb.aload(SELECTOR_OBJ);\n-                                cb.instanceOf(ConstantDescs.CD_Character);\n-                                cb.ifeq(next);\n-                                cb.aload(SELECTOR_OBJ);\n-                                cb.checkcast(ConstantDescs.CD_Character);\n-                                cb.invokevirtual(ConstantDescs.CD_Character,\n+                                        MethodTypeDesc.of(CD_int))\n+                                  .goto_(compare)\n+                                  .labelBinding(notNumber)\n+                                  .aload(SELECTOR_OBJ)\n+                                  .instanceOf(CD_Character)\n+                                  .ifeq(next)\n+                                  .aload(SELECTOR_OBJ)\n+                                  .checkcast(CD_Character)\n+                                  .invokevirtual(CD_Character,\n@@ -581,2 +581,2 @@\n-                                        MethodTypeDesc.of(ConstantDescs.CD_char));\n-                                cb.labelBinding(compare);\n+                                        MethodTypeDesc.of(CD_char))\n+                                  .labelBinding(compare);\n@@ -589,2 +589,2 @@\n-                                    MethodTypeDesc.of(ConstantDescs.CD_boolean, classDesc(typePair.from)));\n-                            cb.ifeq(next);\n+                                    MethodTypeDesc.of(CD_boolean, classDesc(typePair.from)))\n+                              .ifeq(next);\n@@ -595,3 +595,3 @@\n-                            cb.aload(SELECTOR_OBJ);\n-                            cb.instanceOf(classLabelConstableOpt.orElseThrow());\n-                            cb.ifeq(next);\n+                            cb.aload(SELECTOR_OBJ)\n+                              .instanceOf(classLabelConstableOpt.orElseThrow())\n+                              .ifeq(next);\n@@ -599,3 +599,3 @@\n-                            cb.aload(EXTRA_CLASS_LABELS);\n-                            cb.loadConstant(extraClassLabels.size());\n-                            cb.invokeinterface(ConstantDescs.CD_List,\n+                            cb.aload(EXTRA_CLASS_LABELS)\n+                              .loadConstant(extraClassLabels.size())\n+                              .invokeinterface(CD_List,\n@@ -603,5 +603,5 @@\n-                                    MethodTypeDesc.of(ConstantDescs.CD_Object,\n-                                            ConstantDescs.CD_int));\n-                            cb.checkcast(ConstantDescs.CD_Class);\n-                            cb.aload(SELECTOR_OBJ);\n-                            cb.invokevirtual(ConstantDescs.CD_Class,\n+                                    MethodTypeDesc.of(CD_Object,\n+                                            CD_int))\n+                              .checkcast(CD_Class)\n+                              .aload(SELECTOR_OBJ)\n+                              .invokevirtual(CD_Class,\n@@ -609,3 +609,3 @@\n-                                    MethodTypeDesc.of(ConstantDescs.CD_boolean,\n-                                            ConstantDescs.CD_Object));\n-                            cb.ifeq(next);\n+                                    MethodTypeDesc.of(CD_boolean,\n+                                            CD_Object))\n+                              .ifeq(next);\n@@ -618,3 +618,3 @@\n-                    cb.aload(ENUM_CACHE);\n-                    cb.loadConstant(enumIdx);\n-                    cb.invokestatic(ConstantDescs.CD_Integer,\n+                    cb.aload(ENUM_CACHE)\n+                      .loadConstant(enumIdx)\n+                      .invokestatic(CD_Integer,\n@@ -622,4 +622,4 @@\n-                            MethodTypeDesc.of(ConstantDescs.CD_Integer,\n-                                    ConstantDescs.CD_int));\n-                    cb.aload(SELECTOR_OBJ);\n-                    cb.invokeinterface(CD_BiPredicate,\n+                            MethodTypeDesc.of(CD_Integer,\n+                                    CD_int))\n+                      .aload(SELECTOR_OBJ)\n+                      .invokeinterface(CD_BiPredicate,\n@@ -627,4 +627,4 @@\n-                            MethodTypeDesc.of(ConstantDescs.CD_boolean,\n-                                    ConstantDescs.CD_Object,\n-                                    ConstantDescs.CD_Object));\n-                    cb.ifeq(next);\n+                            MethodTypeDesc.of(CD_boolean,\n+                                    CD_Object,\n+                                    CD_Object))\n+                      .ifeq(next);\n@@ -632,3 +632,3 @@\n-                    cb.ldc(stringLabel);\n-                    cb.aload(SELECTOR_OBJ);\n-                    cb.invokevirtual(ConstantDescs.CD_Object,\n+                    cb.ldc(stringLabel)\n+                      .aload(SELECTOR_OBJ)\n+                      .invokevirtual(CD_Object,\n@@ -636,3 +636,3 @@\n-                            MethodTypeDesc.of(ConstantDescs.CD_boolean,\n-                                    ConstantDescs.CD_Object));\n-                    cb.ifeq(next);\n+                            MethodTypeDesc.of(CD_boolean,\n+                                    CD_Object))\n+                      .ifeq(next);\n@@ -642,6 +642,6 @@\n-                    cb.aload(SELECTOR_OBJ);\n-                    cb.instanceOf(ConstantDescs.CD_Number);\n-                    cb.ifeq(notNumber);\n-                    cb.aload(SELECTOR_OBJ);\n-                    cb.checkcast(ConstantDescs.CD_Number);\n-                    cb.invokevirtual(ConstantDescs.CD_Number,\n+                    cb.aload(SELECTOR_OBJ)\n+                      .instanceOf(CD_Number)\n+                      .ifeq(notNumber)\n+                      .aload(SELECTOR_OBJ)\n+                      .checkcast(CD_Number)\n+                      .invokevirtual(CD_Number,\n@@ -649,9 +649,9 @@\n-                            MethodTypeDesc.of(ConstantDescs.CD_int));\n-                    cb.goto_(compare);\n-                    cb.labelBinding(notNumber);\n-                    cb.aload(SELECTOR_OBJ);\n-                    cb.instanceOf(ConstantDescs.CD_Character);\n-                    cb.ifeq(next);\n-                    cb.aload(SELECTOR_OBJ);\n-                    cb.checkcast(ConstantDescs.CD_Character);\n-                    cb.invokevirtual(ConstantDescs.CD_Character,\n+                            MethodTypeDesc.of(CD_int))\n+                      .goto_(compare)\n+                      .labelBinding(notNumber)\n+                      .aload(SELECTOR_OBJ)\n+                      .instanceOf(CD_Character)\n+                      .ifeq(next)\n+                      .aload(SELECTOR_OBJ)\n+                      .checkcast(CD_Character)\n+                      .invokevirtual(CD_Character,\n@@ -659,2 +659,2 @@\n-                            MethodTypeDesc.of(ConstantDescs.CD_char));\n-                    cb.labelBinding(compare);\n+                            MethodTypeDesc.of(CD_char))\n+                      .labelBinding(compare)\n@@ -662,2 +662,2 @@\n-                    cb.loadConstant(integerLabel);\n-                    cb.if_icmpne(next);\n+                      .loadConstant(integerLabel)\n+                      .if_icmpne(next);\n@@ -677,3 +677,3 @@\n-                                    caseLabelWrapper.basicClassDescriptor()));\n-                    cb.aload(SELECTOR_OBJ);\n-                    cb.invokevirtual(ConstantDescs.CD_Object,\n+                                    caseLabelWrapper.basicClassDescriptor()))\n+                      .aload(SELECTOR_OBJ)\n+                      .invokevirtual(CD_Object,\n@@ -681,3 +681,3 @@\n-                            MethodTypeDesc.of(ConstantDescs.CD_boolean,\n-                                    ConstantDescs.CD_Object));\n-                    cb.ifeq(next);\n+                            MethodTypeDesc.of(CD_boolean,\n+                                    CD_Object))\n+                      .ifeq(next);\n@@ -688,2 +688,2 @@\n-                cb.loadConstant(idx);\n-                cb.ireturn();\n+                cb.loadConstant(idx)\n+                  .ireturn();\n@@ -691,3 +691,3 @@\n-            cb.labelBinding(dflt);\n-            cb.loadConstant(labelConstants.length);\n-            cb.ireturn();\n+            cb.labelBinding(dflt)\n+              .loadConstant(labelConstants.length)\n+              .ireturn();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":107,"deletions":107,"binary":false,"changes":214,"status":"modified"},{"patch":"@@ -196,5 +196,4 @@\n-            clb.withFlags(ACC_PUBLIC + ACC_FINAL + ACC_SUPER);\n-            clb.withSuperclass(CD_Object);\n-            clb.withVersion(CLASSFILE_VERSION, 0);\n-\n-            clb.withMethodBody(METHOD_NAME, methodTypeDesc(callerMethodType), ACC_PUBLIC | ACC_STATIC,\n+            clb.withFlags(ACC_PUBLIC + ACC_FINAL + ACC_SUPER)\n+               .withSuperclass(CD_Object)\n+               .withVersion(CLASSFILE_VERSION, 0)\n+               .withMethodBody(METHOD_NAME, methodTypeDesc(callerMethodType), ACC_PUBLIC | ACC_STATIC,\n@@ -278,2 +277,2 @@\n-                    cb.loadConstant(null);\n-                    cb.storeLocal(REFERENCE, scopeLocal); \/\/ need to initialize all scope locals here in case an exception occurs\n+                    cb.aconst_null()\n+                      .astore(scopeLocal); \/\/ need to initialize all scope locals here in case an exception occurs\n@@ -288,2 +287,2 @@\n-            cb.loadConstant(callingSequence.allocationSize());\n-            cb.invokestatic(CD_SharedUtils, \"newBoundedArena\", MTD_NEW_BOUNDED_ARENA);\n+            cb.loadConstant(callingSequence.allocationSize())\n+              .invokestatic(CD_SharedUtils, \"newBoundedArena\", MTD_NEW_BOUNDED_ARENA);\n@@ -296,1 +295,1 @@\n-        cb.storeLocal(REFERENCE, contextIdx);\n+        cb.astore(contextIdx);\n@@ -304,1 +303,1 @@\n-            cb.storeLocal(REFERENCE, returnBufferIdx);\n+            cb.astore(returnBufferIdx);\n@@ -327,1 +326,1 @@\n-                    cb.loadLocal(REFERENCE, returnBufferIdx);\n+                    cb.aload(returnBufferIdx);\n@@ -343,1 +342,1 @@\n-                    cb.storeLocal(REFERENCE, returnBufferIdx);\n+                    cb.astore(returnBufferIdx);\n@@ -358,1 +357,1 @@\n-            cb.loadLocal(REFERENCE, 0); \/\/ load target arg\n+            cb.aload(0); \/\/ load target arg\n@@ -499,2 +498,2 @@\n-        cb.checkcast(CD_AbstractMemorySegmentImpl);\n-        cb.invokevirtual(CD_AbstractMemorySegmentImpl, \"sessionImpl\", MTD_SESSION_IMPL);\n+        cb.checkcast(CD_AbstractMemorySegmentImpl)\n+          .invokevirtual(CD_AbstractMemorySegmentImpl, \"sessionImpl\", MTD_SESSION_IMPL);\n@@ -508,3 +507,3 @@\n-            cb.dup(); \/\/ dup for comparison\n-            cb.loadLocal(REFERENCE, scopeSlots[i]);\n-            cb.if_acmpeq(skipAcquire);\n+            cb.dup() \/\/ dup for comparison\n+              .aload(scopeSlots[i])\n+              .if_acmpeq(skipAcquire);\n@@ -517,2 +516,2 @@\n-        cb.invokevirtual(CD_MemorySessionImpl, \"acquire0\", MTD_ACQUIRE0); \/\/ call acquire on the other\n-        cb.storeLocal(REFERENCE, nextScopeLocal); \/\/ store off one to release later\n+        cb.invokevirtual(CD_MemorySessionImpl, \"acquire0\", MTD_ACQUIRE0) \/\/ call acquire on the other\n+          .astore(nextScopeLocal); \/\/ store off one to release later\n@@ -521,4 +520,3 @@\n-            cb.goto_(end);\n-\n-            cb.labelBinding(skipAcquire);\n-            cb.pop(); \/\/ drop scope\n+            cb.goto_(end)\n+              .labelBinding(skipAcquire)\n+              .pop(); \/\/ drop scope\n@@ -532,4 +530,4 @@\n-            cb.loadLocal(REFERENCE, scopeLocal);\n-            cb.ifThen(Opcode.IFNONNULL, ifCb -> {\n-                ifCb.loadLocal(REFERENCE, scopeLocal);\n-                ifCb.invokevirtual(CD_MemorySessionImpl, \"release0\", MTD_RELEASE0);\n+            cb.aload(scopeLocal)\n+              .ifThen(Opcode.IFNONNULL, ifCb -> {\n+                ifCb.aload(scopeLocal)\n+                    .invokevirtual(CD_MemorySessionImpl, \"release0\", MTD_RELEASE0);\n@@ -554,4 +552,4 @@\n-        cb.loadLocal(REFERENCE, contextIdx);\n-        cb.checkcast(CD_Arena);\n-        cb.invokeinterface(CD_Arena, \"scope\", MTD_SCOPE);\n-        cb.checkcast(CD_MemorySessionImpl);\n+        cb.aload(contextIdx)\n+          .checkcast(CD_Arena)\n+          .invokeinterface(CD_Arena, \"scope\", MTD_SCOPE)\n+          .checkcast(CD_MemorySessionImpl);\n@@ -562,1 +560,1 @@\n-        cb.loadLocal(REFERENCE, contextIdx);\n+        cb.aload(contextIdx);\n@@ -567,3 +565,3 @@\n-        cb.loadLocal(REFERENCE, contextIdx);\n-        cb.checkcast(CD_Arena);\n-        cb.invokeinterface(CD_Arena, \"close\", MTD_CLOSE);\n+        cb.aload(contextIdx)\n+          .checkcast(CD_Arena)\n+          .invokeinterface(CD_Arena, \"close\", MTD_CLOSE);\n@@ -574,2 +572,2 @@\n-        cb.loadConstant(boxAddress.size());\n-        cb.loadConstant(boxAddress.align());\n+        cb.loadConstant(boxAddress.size())\n+          .loadConstant(boxAddress.align());\n@@ -588,1 +586,1 @@\n-            cb.loadLocal(REFERENCE, returnAllocatorIdx);\n+            cb.aload(returnAllocatorIdx);\n@@ -610,2 +608,2 @@\n-            cb.loadConstant(offset);\n-            cb.loadLocal(storeTypeKind, valueIdx);\n+            cb.loadConstant(offset)\n+              .loadLocal(storeTypeKind, valueIdx);\n@@ -622,1 +620,1 @@\n-            cb.storeLocal(LONG, longValueIdx);\n+            cb.lstore(longValueIdx);\n@@ -624,1 +622,1 @@\n-            cb.storeLocal(REFERENCE, writeAddrIdx);\n+            cb.astore(writeAddrIdx);\n@@ -651,3 +649,3 @@\n-                cb.loadLocal(LONG, longValueIdx);\n-                cb.loadConstant(mask);\n-                cb.land();\n+                cb.lload(longValueIdx)\n+                  .loadConstant(mask)\n+                  .land();\n@@ -655,2 +653,2 @@\n-                    cb.loadConstant(shiftAmount);\n-                    cb.lushr();\n+                    cb.loadConstant(shiftAmount)\n+                      .lushr();\n@@ -661,1 +659,1 @@\n-                cb.storeLocal(chunkStoreTypeKind, chunkIdx);\n+                cb.storeLocal(chunkStoreTypeKind, chunkIdx)\n@@ -665,1 +663,1 @@\n-                cb.loadLocal(REFERENCE, writeAddrIdx);\n+                  .aload(writeAddrIdx);\n@@ -668,2 +666,2 @@\n-                cb.loadConstant(writeOffset);\n-                cb.loadLocal(chunkStoreTypeKind, chunkIdx);\n+                cb.loadConstant(writeOffset)\n+                  .loadLocal(chunkStoreTypeKind, chunkIdx);\n@@ -697,1 +695,1 @@\n-                cb.loadLocal(REFERENCE, returnBufferIdx);\n+                cb.aload(returnBufferIdx);\n@@ -699,2 +697,2 @@\n-                cb.loadConstant(retBufOffset);\n-                cb.loadLocal(storeTypeKind, valueIdx);\n+                cb.loadConstant(retBufOffset)\n+                  .loadLocal(storeTypeKind, valueIdx);\n@@ -717,1 +715,1 @@\n-                cb.loadLocal(REFERENCE, returnBufferIdx);\n+                cb.aload(returnBufferIdx);\n@@ -739,2 +737,2 @@\n-        cb.loadConstant(shiftLeft.shiftAmount() * Byte.SIZE);\n-        cb.lshl();\n+        cb.loadConstant(shiftLeft.shiftAmount() * Byte.SIZE)\n+          .lshl();\n@@ -746,2 +744,2 @@\n-        cb.loadConstant(shiftRight.shiftAmount() * Byte.SIZE);\n-        cb.lushr();\n+        cb.loadConstant(shiftRight.shiftAmount() * Byte.SIZE)\n+          .lushr();\n@@ -761,5 +759,4 @@\n-                cb.loadConstant(0xFF);\n-                cb.iand();\n-\n-                \/\/ convert to boolean\n-                cb.invokestatic(CD_Utils, \"byteToBoolean\", MTD_BYTE_TO_BOOLEAN);\n+                cb.loadConstant(0xFF)\n+                  .iand()\n+                  \/\/ convert to boolean\n+                  .invokestatic(CD_Utils, \"byteToBoolean\", MTD_BYTE_TO_BOOLEAN);\n@@ -785,2 +782,2 @@\n-        cb.checkcast(CD_AbstractMemorySegmentImpl);\n-        cb.invokevirtual(CD_AbstractMemorySegmentImpl, \"unsafeGetBase\", MTD_UNSAFE_GET_BASE);\n+        cb.checkcast(CD_AbstractMemorySegmentImpl)\n+          .invokevirtual(CD_AbstractMemorySegmentImpl, \"unsafeGetBase\", MTD_UNSAFE_GET_BASE);\n@@ -794,2 +791,2 @@\n-            cb.dup();\n-            cb.invokestatic(CD_SharedUtils, \"checkNative\", MTD_CHECK_NATIVE);\n+            cb.dup()\n+              .invokestatic(CD_SharedUtils, \"checkNative\", MTD_CHECK_NATIVE);\n@@ -797,2 +794,2 @@\n-        cb.checkcast(CD_AbstractMemorySegmentImpl);\n-        cb.invokevirtual(CD_AbstractMemorySegmentImpl, \"unsafeGetOffset\", MTD_UNSAFE_GET_OFFSET);\n+        cb.checkcast(CD_AbstractMemorySegmentImpl)\n+          .invokevirtual(CD_AbstractMemorySegmentImpl, \"unsafeGetOffset\", MTD_UNSAFE_GET_OFFSET);\n@@ -818,3 +815,2 @@\n-            cb.storeLocal(REFERENCE, readAddrIdx);\n-\n-            cb.loadConstant(0L); \/\/ result\n+            cb.astore(readAddrIdx)\n+              .loadConstant(0L); \/\/ result\n@@ -822,1 +818,1 @@\n-            cb.storeLocal(LONG, resultIdx);\n+            cb.lstore(resultIdx);\n@@ -851,1 +847,1 @@\n-                cb.loadLocal(REFERENCE, readAddrIdx);\n+                cb.aload(readAddrIdx);\n@@ -855,3 +851,3 @@\n-                cb.loadConstant(readOffset);\n-                cb.invokeinterface(CD_MemorySegment, \"get\", descriptor);\n-                cb.invokestatic(toULongHolder, \"toUnsignedLong\", toULongDescriptor);\n+                cb.loadConstant(readOffset)\n+                  .invokeinterface(CD_MemorySegment, \"get\", descriptor)\n+                  .invokestatic(toULongHolder, \"toUnsignedLong\", toULongDescriptor);\n@@ -862,2 +858,2 @@\n-                    cb.loadConstant(shiftAmount);\n-                    cb.lshl();\n+                    cb.loadConstant(shiftAmount)\n+                      .lshl();\n@@ -866,3 +862,3 @@\n-                cb.loadLocal(LONG, resultIdx);\n-                cb.lor();\n-                cb.storeLocal(LONG, resultIdx);\n+                cb.lload(resultIdx)\n+                  .lor()\n+                  .lstore(resultIdx);\n@@ -874,1 +870,1 @@\n-            cb.loadLocal(LONG, resultIdx);\n+            cb.lload(resultIdx);\n@@ -901,6 +897,5 @@\n-        cb.storeLocal(REFERENCE, storeIdx);\n-        cb.loadConstant(0L);\n-        cb.loadConstant(size);\n-        cb.invokestatic(CD_MemorySegment, \"copy\", MTD_COPY, true);\n-\n-        cb.loadLocal(REFERENCE, storeIdx);\n+        cb.astore(storeIdx)\n+          .loadConstant(0L)\n+          .loadConstant(size)\n+          .invokestatic(CD_MemorySegment, \"copy\", MTD_COPY, true)\n+          .aload(storeIdx);\n@@ -911,3 +906,3 @@\n-        cb.loadConstant(size);\n-        cb.loadConstant(alignment);\n-        cb.invokeinterface(CD_SegmentAllocator, \"allocate\", MTD_ALLOCATE);\n+        cb.loadConstant(size)\n+          .loadConstant(alignment)\n+          .invokeinterface(CD_SegmentAllocator, \"allocate\", MTD_ALLOCATE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BindingSpecializer.java","additions":90,"deletions":95,"binary":false,"changes":185,"status":"modified"}]}