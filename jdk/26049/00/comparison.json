{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,2 @@\n+import java.util.concurrent.CountDownLatch;\n+\n@@ -64,3 +66,6 @@\n-        bufferTest(sv.port());\n-        if (sv.finish(8000) == 0)\n-            throw new Exception(\"Failed: Length = \" + testSize);\n+        System.err.println(\"waiting for server to be ready, before initiating test\");\n+        sv.waitToStartTest();\n+        int serverPort = sv.port();\n+        System.err.println(\"initiating test against server port \" + serverPort);\n+        bufferTest(serverPort);\n+        sv.awaitFinish();\n@@ -88,2 +93,2 @@\n-        InetAddress lh = InetAddress.getLocalHost();\n-        InetSocketAddress isa = new InetSocketAddress(lh, port);\n+        InetAddress loopback = InetAddress.getLoopbackAddress();\n+        InetSocketAddress isa = new InetSocketAddress(loopback, port);\n@@ -124,0 +129,1 @@\n+        final CountDownLatch connAcceptLatch = new CountDownLatch(1);\n@@ -128,1 +134,2 @@\n-            this.ssc = ServerSocketChannel.open().bind(new InetSocketAddress(0));\n+            InetAddress loopback = InetAddress.getLoopbackAddress();\n+            this.ssc = ServerSocketChannel.open().bind(new InetSocketAddress(loopback, 0));\n@@ -135,0 +142,1 @@\n+        @Override\n@@ -139,0 +147,6 @@\n+        \/\/ await for the server to be ready to accept the\n+        \/\/ connections from the client\/test\n+        private void waitToStartTest() throws InterruptedException {\n+            this.connAcceptLatch.await();\n+        }\n+\n@@ -160,1 +174,1 @@\n-\n+                connAcceptLatch.countDown();\n@@ -212,0 +226,1 @@\n+                System.err.println(\"closing \" + ssc);\n@@ -213,1 +228,2 @@\n-                if (sc != null)\n+                if (sc != null) {\n+                    System.err.println(\"closing \" + sc);\n@@ -215,0 +231,1 @@\n+                }\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/VectorIO.java","additions":26,"deletions":9,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -88,0 +88,23 @@\n+    \/**\n+     * Awaits the completion of this {@code Thread} and throws any failures\n+     * that may have occurred during the execution of this {@code Thread}'s task\n+     *\n+     * @throws InterruptedException if the wait was interrupted\n+     * @throws Exception any failure that may have occurred during the TestThread's execution\n+     *\/\n+    public final void awaitFinish() throws Exception {\n+        try {\n+            join();\n+        } catch (InterruptedException ie) {\n+            \/\/ we ignore interruption of only the main thread because the main thread\n+            \/\/ is always interrupted by this TestThread upon failure of the Thread's task\n+            if (Thread.currentThread() != main) {\n+                throw ie;\n+            }\n+        }\n+        if (this.failure != null) {\n+            throw failure;\n+        }\n+    }\n+\n+    @Override\n","filename":"test\/jdk\/java\/nio\/channels\/TestThread.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"}]}