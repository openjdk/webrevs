{"files":[{"patch":"@@ -2220,1 +2220,2 @@\n-  if (in1->Opcode() != Op_VectorMaskCmp && in1->Opcode() != Op_VectorMaskCast) {\n+  if (in2->Opcode() == Op_VectorMaskCmp ||\n+      (in2->Opcode() == Op_VectorMaskCast && in2->in(1)->Opcode() == Op_VectorMaskCmp)) {\n@@ -2230,0 +2231,3 @@\n+  if (in2->Opcode() == Op_VectorMaskCast) {\n+    in2 = in2->in(1);\n+  }\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -159,0 +159,4 @@\n+    interface VectorMaskOperator {\n+        public VectorMask apply(VectorMask m1);\n+    }\n+\n@@ -160,1 +164,1 @@\n-    public static void testCompareMaskNotByte(VectorOperators.Comparison op) {\n+    public static void testCompareMaskNotByte(VectorOperators.Comparison op, VectorMaskOperator func) {\n@@ -164,1 +168,1 @@\n-        m1.not().intoArray(mr, 0);\n+        func.apply(m1).intoArray(mr, 0);\n@@ -172,1 +176,1 @@\n-    public static void testCompareMaskNotShort(VectorOperators.Comparison op) {\n+    public static void testCompareMaskNotShort(VectorOperators.Comparison op, VectorMaskOperator func) {\n@@ -176,1 +180,1 @@\n-        m1.not().intoArray(mr, 0);\n+        func.apply(m1).intoArray(mr, 0);\n@@ -184,1 +188,1 @@\n-    public static void testCompareMaskNotInt(VectorOperators.Comparison op) {\n+    public static void testCompareMaskNotInt(VectorOperators.Comparison op, VectorMaskOperator func) {\n@@ -188,1 +192,1 @@\n-        m1.not().intoArray(mr, 0);\n+        func.apply(m1).intoArray(mr, 0);\n@@ -196,1 +200,1 @@\n-    public static void testCompareMaskNotLong(VectorOperators.Comparison op) {\n+    public static void testCompareMaskNotLong(VectorOperators.Comparison op, VectorMaskOperator func) {\n@@ -200,1 +204,1 @@\n-        m1.not().intoArray(mr, 0);\n+        func.apply(m1).intoArray(mr, 0);\n@@ -208,1 +212,1 @@\n-    public static void testCompareMaskNotFloat(VectorOperators.Comparison op, float[] a, float[] b) {\n+    public static void testCompareMaskNotFloat(VectorOperators.Comparison op, float[] a, float[] b, VectorMaskOperator func) {\n@@ -212,1 +216,1 @@\n-        m1.not().intoArray(mr, 0);\n+        func.apply(m1).intoArray(mr, 0);\n@@ -220,1 +224,1 @@\n-    public static void testCompareMaskNotDouble(VectorOperators.Comparison op, double[] a, double[] b) {\n+    public static void testCompareMaskNotDouble(VectorOperators.Comparison op, double[] a, double[] b, VectorMaskOperator func) {\n@@ -224,1 +228,1 @@\n-        m1.not().intoArray(mr, 0);\n+        func.apply(m1).intoArray(mr, 0);\n@@ -236,1 +240,2 @@\n-        testCompareMaskNotByte(VectorOperators.EQ);\n+        testCompareMaskNotByte(VectorOperators.EQ, m -> m.not());\n+        testCompareMaskNotByte(VectorOperators.EQ, m -> m.xor(B_SPECIES.maskAll(true)));\n@@ -243,1 +248,2 @@\n-        testCompareMaskNotByte(VectorOperators.NE);\n+        testCompareMaskNotByte(VectorOperators.NE, m -> m.not());\n+        testCompareMaskNotByte(VectorOperators.NE, m -> m.xor(B_SPECIES.maskAll(true)));\n@@ -250,1 +256,2 @@\n-        testCompareMaskNotByte(VectorOperators.LT);\n+        testCompareMaskNotByte(VectorOperators.LT, m -> m.not());\n+        testCompareMaskNotByte(VectorOperators.LT, m -> m.xor(B_SPECIES.maskAll(true)));\n@@ -257,1 +264,2 @@\n-        testCompareMaskNotByte(VectorOperators.GT);\n+        testCompareMaskNotByte(VectorOperators.GT, m -> m.not());\n+        testCompareMaskNotByte(VectorOperators.GT, m -> m.xor(B_SPECIES.maskAll(true)));\n@@ -264,1 +272,2 @@\n-        testCompareMaskNotByte(VectorOperators.LE);\n+        testCompareMaskNotByte(VectorOperators.LE, m -> m.not());\n+        testCompareMaskNotByte(VectorOperators.LE, m -> m.xor(B_SPECIES.maskAll(true)));\n@@ -271,1 +280,2 @@\n-        testCompareMaskNotByte(VectorOperators.GE);\n+        testCompareMaskNotByte(VectorOperators.GE, m -> m.not());\n+        testCompareMaskNotByte(VectorOperators.GE, m -> m.xor(B_SPECIES.maskAll(true)));\n@@ -278,1 +288,2 @@\n-        testCompareMaskNotByte(VectorOperators.ULT);\n+        testCompareMaskNotByte(VectorOperators.ULT, m -> m.not());\n+        testCompareMaskNotByte(VectorOperators.ULT, m -> m.xor(B_SPECIES.maskAll(true)));\n@@ -285,1 +296,2 @@\n-        testCompareMaskNotByte(VectorOperators.UGT);\n+        testCompareMaskNotByte(VectorOperators.UGT, m -> m.not());\n+        testCompareMaskNotByte(VectorOperators.UGT, m -> m.xor(B_SPECIES.maskAll(true)));\n@@ -292,1 +304,2 @@\n-        testCompareMaskNotByte(VectorOperators.ULE);\n+        testCompareMaskNotByte(VectorOperators.ULE, m -> m.not());\n+        testCompareMaskNotByte(VectorOperators.ULE, m -> m.xor(B_SPECIES.maskAll(true)));\n@@ -299,1 +312,2 @@\n-        testCompareMaskNotByte(VectorOperators.UGE);\n+        testCompareMaskNotByte(VectorOperators.UGE, m -> m.not());\n+        testCompareMaskNotByte(VectorOperators.UGE, m -> m.xor(B_SPECIES.maskAll(true)));\n@@ -307,1 +321,2 @@\n-        testCompareMaskNotShort(VectorOperators.EQ);\n+        testCompareMaskNotShort(VectorOperators.EQ, m -> m.not());\n+        testCompareMaskNotShort(VectorOperators.EQ, m -> m.xor(S_SPECIES.maskAll(true)));\n@@ -314,1 +329,2 @@\n-        testCompareMaskNotShort(VectorOperators.NE);\n+        testCompareMaskNotShort(VectorOperators.NE, m -> m.not());\n+        testCompareMaskNotShort(VectorOperators.NE, m -> m.xor(S_SPECIES.maskAll(true)));\n@@ -321,1 +337,2 @@\n-        testCompareMaskNotShort(VectorOperators.LT);\n+        testCompareMaskNotShort(VectorOperators.LT, m -> m.not());\n+        testCompareMaskNotShort(VectorOperators.LT, m -> m.xor(S_SPECIES.maskAll(true)));\n@@ -328,1 +345,2 @@\n-        testCompareMaskNotShort(VectorOperators.GT);\n+        testCompareMaskNotShort(VectorOperators.GT, m -> m.not());\n+        testCompareMaskNotShort(VectorOperators.GT, m -> m.xor(S_SPECIES.maskAll(true)));\n@@ -335,1 +353,2 @@\n-        testCompareMaskNotShort(VectorOperators.LE);\n+        testCompareMaskNotShort(VectorOperators.LE, m -> m.not());\n+        testCompareMaskNotShort(VectorOperators.LE, m -> m.xor(S_SPECIES.maskAll(true)));\n@@ -342,1 +361,2 @@\n-        testCompareMaskNotShort(VectorOperators.GE);\n+        testCompareMaskNotShort(VectorOperators.GE, m -> m.not());\n+        testCompareMaskNotShort(VectorOperators.GE, m -> m.xor(S_SPECIES.maskAll(true)));\n@@ -349,1 +369,2 @@\n-        testCompareMaskNotShort(VectorOperators.ULT);\n+        testCompareMaskNotShort(VectorOperators.ULT, m -> m.not());\n+        testCompareMaskNotShort(VectorOperators.ULT, m -> m.xor(S_SPECIES.maskAll(true)));\n@@ -356,1 +377,2 @@\n-        testCompareMaskNotShort(VectorOperators.UGT);\n+        testCompareMaskNotShort(VectorOperators.UGT, m -> m.not());\n+        testCompareMaskNotShort(VectorOperators.UGT, m -> m.xor(S_SPECIES.maskAll(true)));\n@@ -363,1 +385,2 @@\n-        testCompareMaskNotShort(VectorOperators.ULE);\n+        testCompareMaskNotShort(VectorOperators.ULE, m -> m.not());\n+        testCompareMaskNotShort(VectorOperators.ULE, m -> m.xor(S_SPECIES.maskAll(true)));\n@@ -370,1 +393,2 @@\n-        testCompareMaskNotShort(VectorOperators.UGE);\n+        testCompareMaskNotShort(VectorOperators.UGE, m -> m.not());\n+        testCompareMaskNotShort(VectorOperators.UGE, m -> m.xor(S_SPECIES.maskAll(true)));\n@@ -378,1 +402,2 @@\n-        testCompareMaskNotInt(VectorOperators.EQ);\n+        testCompareMaskNotInt(VectorOperators.EQ, m -> m.not());\n+        testCompareMaskNotInt(VectorOperators.EQ, m -> m.xor(I_SPECIES.maskAll(true)));\n@@ -385,1 +410,2 @@\n-        testCompareMaskNotInt(VectorOperators.NE);\n+        testCompareMaskNotInt(VectorOperators.NE, m -> m.not());\n+        testCompareMaskNotInt(VectorOperators.NE, m -> m.xor(I_SPECIES.maskAll(true)));\n@@ -392,1 +418,2 @@\n-        testCompareMaskNotInt(VectorOperators.LT);\n+        testCompareMaskNotInt(VectorOperators.LT, m -> m.not());\n+        testCompareMaskNotInt(VectorOperators.LT, m -> m.xor(I_SPECIES.maskAll(true)));\n@@ -399,1 +426,2 @@\n-        testCompareMaskNotInt(VectorOperators.GT);\n+        testCompareMaskNotInt(VectorOperators.GT, m -> m.not());\n+        testCompareMaskNotInt(VectorOperators.GT, m -> m.xor(I_SPECIES.maskAll(true)));\n@@ -406,1 +434,2 @@\n-        testCompareMaskNotInt(VectorOperators.LE);\n+        testCompareMaskNotInt(VectorOperators.LE, m -> m.not());\n+        testCompareMaskNotInt(VectorOperators.LE, m -> m.xor(I_SPECIES.maskAll(true)));\n@@ -413,1 +442,2 @@\n-        testCompareMaskNotInt(VectorOperators.GE);\n+        testCompareMaskNotInt(VectorOperators.GE, m -> m.not());\n+        testCompareMaskNotInt(VectorOperators.GE, m -> m.xor(I_SPECIES.maskAll(true)));\n@@ -420,1 +450,2 @@\n-        testCompareMaskNotInt(VectorOperators.ULT);\n+        testCompareMaskNotInt(VectorOperators.ULT, m -> m.not());\n+        testCompareMaskNotInt(VectorOperators.ULT, m -> m.xor(I_SPECIES.maskAll(true)));\n@@ -427,1 +458,2 @@\n-        testCompareMaskNotInt(VectorOperators.UGT);\n+        testCompareMaskNotInt(VectorOperators.UGT, m -> m.not());\n+        testCompareMaskNotInt(VectorOperators.UGT, m -> m.xor(I_SPECIES.maskAll(true)));\n@@ -434,1 +466,2 @@\n-        testCompareMaskNotInt(VectorOperators.ULE);\n+        testCompareMaskNotInt(VectorOperators.ULE, m -> m.not());\n+        testCompareMaskNotInt(VectorOperators.ULE, m -> m.xor(I_SPECIES.maskAll(true)));\n@@ -441,1 +474,2 @@\n-        testCompareMaskNotInt(VectorOperators.UGE);\n+        testCompareMaskNotInt(VectorOperators.UGE, m -> m.not());\n+        testCompareMaskNotInt(VectorOperators.UGE, m -> m.xor(I_SPECIES.maskAll(true)));\n@@ -449,1 +483,2 @@\n-        testCompareMaskNotLong(VectorOperators.EQ);\n+        testCompareMaskNotLong(VectorOperators.EQ, m -> m.not());\n+        testCompareMaskNotLong(VectorOperators.EQ, m -> m.xor(L_SPECIES.maskAll(true)));\n@@ -456,1 +491,2 @@\n-        testCompareMaskNotLong(VectorOperators.NE);\n+        testCompareMaskNotLong(VectorOperators.NE, m -> m.not());\n+        testCompareMaskNotLong(VectorOperators.NE, m -> m.xor(L_SPECIES.maskAll(true)));\n@@ -463,1 +499,2 @@\n-        testCompareMaskNotLong(VectorOperators.LT);\n+        testCompareMaskNotLong(VectorOperators.LT, m -> m.not());\n+        testCompareMaskNotLong(VectorOperators.LT, m -> m.xor(L_SPECIES.maskAll(true)));\n@@ -470,1 +507,2 @@\n-        testCompareMaskNotLong(VectorOperators.GT);\n+        testCompareMaskNotLong(VectorOperators.GT, m -> m.not());\n+        testCompareMaskNotLong(VectorOperators.GT, m -> m.xor(L_SPECIES.maskAll(true)));\n@@ -477,1 +515,2 @@\n-        testCompareMaskNotLong(VectorOperators.LE);\n+        testCompareMaskNotLong(VectorOperators.LE, m -> m.not());\n+        testCompareMaskNotLong(VectorOperators.LE, m -> m.xor(L_SPECIES.maskAll(true)));\n@@ -484,1 +523,2 @@\n-        testCompareMaskNotLong(VectorOperators.GE);\n+        testCompareMaskNotLong(VectorOperators.GE, m -> m.not());\n+        testCompareMaskNotLong(VectorOperators.GE, m -> m.xor(L_SPECIES.maskAll(true)));\n@@ -491,1 +531,2 @@\n-        testCompareMaskNotLong(VectorOperators.ULT);\n+        testCompareMaskNotLong(VectorOperators.ULT, m -> m.not());\n+        testCompareMaskNotLong(VectorOperators.ULT, m -> m.xor(L_SPECIES.maskAll(true)));\n@@ -498,1 +539,2 @@\n-        testCompareMaskNotLong(VectorOperators.UGT);\n+        testCompareMaskNotLong(VectorOperators.UGT, m -> m.not());\n+        testCompareMaskNotLong(VectorOperators.UGT, m -> m.xor(L_SPECIES.maskAll(true)));\n@@ -505,1 +547,2 @@\n-        testCompareMaskNotLong(VectorOperators.ULE);\n+        testCompareMaskNotLong(VectorOperators.ULE, m -> m.not());\n+        testCompareMaskNotLong(VectorOperators.ULE, m -> m.xor(L_SPECIES.maskAll(true)));\n@@ -512,1 +555,2 @@\n-        testCompareMaskNotLong(VectorOperators.UGE);\n+        testCompareMaskNotLong(VectorOperators.UGE, m -> m.not());\n+        testCompareMaskNotLong(VectorOperators.UGE, m -> m.xor(L_SPECIES.maskAll(true)));\n@@ -519,1 +563,2 @@\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fb);\n+        testCompareMaskNotFloat(VectorOperators.EQ, fa, fb, m -> m.not());\n+        testCompareMaskNotFloat(VectorOperators.EQ, fa, fb, m -> m.xor(F_SPECIES.maskAll(true)));\n@@ -526,1 +571,2 @@\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fb);\n+        testCompareMaskNotFloat(VectorOperators.NE, fa, fb, m -> m.not());\n+        testCompareMaskNotFloat(VectorOperators.NE, fa, fb, m -> m.xor(F_SPECIES.maskAll(true)));\n@@ -533,1 +579,2 @@\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fnan);\n+        testCompareMaskNotFloat(VectorOperators.EQ, fa, fnan, m -> m.not());\n+        testCompareMaskNotFloat(VectorOperators.EQ, fa, fnan, m -> m.xor(F_SPECIES.maskAll(true)));\n@@ -540,1 +587,2 @@\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fnan);\n+        testCompareMaskNotFloat(VectorOperators.NE, fa, fnan, m -> m.not());\n+        testCompareMaskNotFloat(VectorOperators.NE, fa, fnan, m -> m.xor(F_SPECIES.maskAll(true)));\n@@ -547,1 +595,2 @@\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fpinf);\n+        testCompareMaskNotFloat(VectorOperators.EQ, fa, fpinf, m -> m.not());\n+        testCompareMaskNotFloat(VectorOperators.EQ, fa, fpinf, m -> m.xor(F_SPECIES.maskAll(true)));\n@@ -554,1 +603,2 @@\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fpinf);\n+        testCompareMaskNotFloat(VectorOperators.NE, fa, fpinf, m -> m.not());\n+        testCompareMaskNotFloat(VectorOperators.NE, fa, fpinf, m -> m.xor(F_SPECIES.maskAll(true)));\n@@ -561,1 +611,2 @@\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fninf);\n+        testCompareMaskNotFloat(VectorOperators.EQ, fa, fninf, m -> m.not());\n+        testCompareMaskNotFloat(VectorOperators.EQ, fa, fninf, m -> m.xor(F_SPECIES.maskAll(true)));\n@@ -568,1 +619,2 @@\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fninf);\n+        testCompareMaskNotFloat(VectorOperators.NE, fa, fninf, m -> m.not());\n+        testCompareMaskNotFloat(VectorOperators.NE, fa, fninf, m -> m.xor(F_SPECIES.maskAll(true)));\n@@ -575,1 +627,2 @@\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, db);\n+        testCompareMaskNotDouble(VectorOperators.EQ, da, db, m -> m.not());\n+        testCompareMaskNotDouble(VectorOperators.EQ, da, db, m -> m.xor(D_SPECIES.maskAll(true)));\n@@ -582,1 +635,2 @@\n-        testCompareMaskNotDouble(VectorOperators.NE, da, db);\n+        testCompareMaskNotDouble(VectorOperators.NE, da, db, m -> m.not());\n+        testCompareMaskNotDouble(VectorOperators.NE, da, db, m -> m.xor(D_SPECIES.maskAll(true)));\n@@ -589,1 +643,2 @@\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, dnan);\n+        testCompareMaskNotDouble(VectorOperators.EQ, da, dnan, m -> m.not());\n+        testCompareMaskNotDouble(VectorOperators.EQ, da, dnan, m -> m.xor(D_SPECIES.maskAll(true)));\n@@ -596,1 +651,2 @@\n-        testCompareMaskNotDouble(VectorOperators.NE, da, dnan);\n+        testCompareMaskNotDouble(VectorOperators.NE, da, dnan, m -> m.not());\n+        testCompareMaskNotDouble(VectorOperators.NE, da, dnan, m -> m.xor(D_SPECIES.maskAll(true)));\n@@ -603,1 +659,2 @@\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, dpinf);\n+        testCompareMaskNotDouble(VectorOperators.EQ, da, dpinf, m -> m.not());\n+        testCompareMaskNotDouble(VectorOperators.EQ, da, dpinf, m -> m.xor(D_SPECIES.maskAll(true)));\n@@ -610,1 +667,2 @@\n-        testCompareMaskNotDouble(VectorOperators.NE, da, dpinf);\n+        testCompareMaskNotDouble(VectorOperators.NE, da, dpinf, m -> m.not());\n+        testCompareMaskNotDouble(VectorOperators.NE, da, dpinf, m -> m.xor(D_SPECIES.maskAll(true)));\n@@ -617,1 +675,2 @@\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, dninf);\n+        testCompareMaskNotDouble(VectorOperators.EQ, da, dninf, m -> m.not());\n+        testCompareMaskNotDouble(VectorOperators.EQ, da, dninf, m -> m.xor(D_SPECIES.maskAll(true)));\n@@ -624,1 +683,2 @@\n-        testCompareMaskNotDouble(VectorOperators.NE, da, dninf);\n+        testCompareMaskNotDouble(VectorOperators.NE, da, dninf, m -> m.not());\n+        testCompareMaskNotDouble(VectorOperators.NE, da, dninf, m -> m.xor(D_SPECIES.maskAll(true)));\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCompareNotTest.java","additions":128,"deletions":68,"binary":false,"changes":196,"status":"modified"},{"patch":"@@ -40,1 +40,2 @@\n-    private static final int ARRAYLEN = 4096;\n+    @Param({\"4096\"})\n+    private int ARRAYLEN;\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskCompareNotBenchmark.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}