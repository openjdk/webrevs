{"files":[{"patch":"@@ -2166,3 +2166,3 @@\n-\/\/ Returns whether (XorV (VectorMaskCmp) -1) can be optimized by performing the\n-\/\/ inverse of a comparison operation.\n-bool VectorMaskCmpNode::predicate_can_be_inverted() {\n+\/\/ Returns whether (XorV (VectorMaskCmp) -1) can be optimized by negating the\n+\/\/ comparison operation.\n+bool VectorMaskCmpNode::predicate_can_be_negated() {\n@@ -2212,2 +2212,3 @@\n-  \/\/ Transformations for predicated IRs are not supported for now.\n-  if (is_predicated_vector() || in1->is_predicated_vector() ||\n+  \/\/ Transformations for predicated vectors are not supported for now.\n+  if (is_predicated_vector() ||\n+      in1->is_predicated_vector() ||\n@@ -2218,1 +2219,1 @@\n-  \/\/ XorV\/XorVMask is commutative, swap VectorMaskCmp\/Op_VectorMaskCast to in1.\n+  \/\/ XorV\/XorVMask is commutative, swap VectorMaskCmp\/VectorMaskCast to in1.\n@@ -2224,4 +2225,4 @@\n-  const TypeVect* vmcast_vt = nullptr;\n-  if (in1->Opcode() == Op_VectorMaskCast && in1->outcnt() == 1 &&\n-      in1->in(1)->Opcode() == Op_VectorMaskCmp) {\n-    vmcast_vt = in1->as_Vector()->vect_type();\n+  const TypeVect* vector_mask_cast_vt = nullptr;\n+  \/\/ in1 should be single used, otherwise the optimization may be unprofitable.\n+  if (in1->Opcode() == Op_VectorMaskCast && in1->outcnt() == 1 && in1->in(1)->Opcode() == Op_VectorMaskCmp) {\n+    vector_mask_cast_vt = in1->as_Vector()->vect_type();\n@@ -2230,5 +2231,4 @@\n-  if (in2->Opcode() == Op_VectorMaskCast) {\n-    in2 = in2->in(1);\n-  }\n-  if (in1->Opcode() != Op_VectorMaskCmp || in1->outcnt() > 1 ||\n-      !((VectorMaskCmpNode*) in1)->predicate_can_be_inverted() ||\n+\n+  if (in1->Opcode() != Op_VectorMaskCmp ||\n+      in1->outcnt() > 1 ||\n+      !((VectorMaskCmpNode*) in1)->predicate_can_be_negated() ||\n@@ -2239,6 +2239,1 @@\n-  \/\/ This is the same with BoolTest::negate(), but we can't call it with a\n-  \/\/ BoolTest object because the comparison may be unsigned comparison, but\n-  \/\/ BoolTest doesn't support unsigned comparisons.\n-  BoolTest::mask neg_cond =\n-      (BoolTest::mask) (((VectorMaskCmpNode*) in1)->get_predicate() ^ 4);\n-\n+  BoolTest::mask neg_cond = (BoolTest::mask) (((VectorMaskCmpNode*) in1)->get_negative_predicate());\n@@ -2247,1 +2242,1 @@\n-  Node* vmcmp = new VectorMaskCmpNode(neg_cond, in1->in(1), in1->in(2),\n+  Node* res = new VectorMaskCmpNode(neg_cond, in1->in(1), in1->in(2),\n@@ -2249,2 +2244,2 @@\n-  if (vmcast_vt != nullptr) {\n-    \/\/ We optimized out an VectorMaskCast, and in order to ensure type\n+  if (vector_mask_cast_vt != nullptr) {\n+    \/\/ We optimized out a VectorMaskCast, and in order to ensure type\n@@ -2252,2 +2247,2 @@\n-    \/\/ empty for types with the same size.\n-    vmcmp = new VectorMaskCastNode(phase->transform(vmcmp), vmcast_vt);\n+    \/\/ a no-op (identity function) for types with the same size.\n+    res = new VectorMaskCastNode(phase->transform(res), vector_mask_cast_vt);\n@@ -2255,1 +2250,1 @@\n-  return vmcmp;\n+  return res;\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":22,"deletions":27,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -1688,1 +1688,1 @@\n-  bool predicate_can_be_inverted();\n+  bool predicate_can_be_negated();\n@@ -1690,0 +1690,3 @@\n+  \/\/ This is the same with BoolTest::negate(), but BoolTest doesn't support\n+  \/\/ unsigned comparison. However _predicate can be unsigned comparison.\n+  BoolTest::mask get_negative_predicate() { return BoolTest::mask(_predicate ^ 4); }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2229,0 +2229,10 @@\n+    public static final String VECTOR_MASK_CMP_B = VECTOR_PREFIX + \"VECTOR_MASK_CMP_B\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_MASK_CMP_B, \"VectorMaskCmp\", TYPE_BYTE);\n+    }\n+\n+    public static final String VECTOR_MASK_CMP_S = VECTOR_PREFIX + \"VECTOR_MASK_CMP_S\" + POSTFIX;\n+    static {\n+        vectorNode(VECTOR_MASK_CMP_S, \"VectorMaskCmp\", TYPE_SHORT);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,1 +136,1 @@\n-        return nodeRegex.replaceAll(IRNode.IS_REPLACED, \"vector[A-Za-z]<\" + type + \",\" + sizeRegex + \">\");\n+        return nodeRegex.replaceAll(IRNode.IS_REPLACED, \"vector([A-Za-z]|mask)<\" + type + \",\" + sizeRegex + \">\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/checkattribute\/parsing\/RawIRNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,6 +44,6 @@\n-    private static final VectorSpecies<Byte> B_SPECIES = ByteVector.SPECIES_MAX;\n-    private static final VectorSpecies<Short> S_SPECIES = ShortVector.SPECIES_MAX;\n-    private static final VectorSpecies<Integer> I_SPECIES = IntVector.SPECIES_MAX;\n-    private static final VectorSpecies<Long> L_SPECIES = LongVector.SPECIES_MAX;\n-    private static final VectorSpecies<Float> F_SPECIES = FloatVector.SPECIES_MAX;\n-    private static final VectorSpecies<Double> D_SPECIES = DoubleVector.SPECIES_MAX;\n+    private static final VectorSpecies<Byte> B_SPECIES = VectorSpecies.ofLargestShape(byte.class);\n+    private static final VectorSpecies<Short> S_SPECIES = VectorSpecies.ofLargestShape(short.class);\n+    private static final VectorSpecies<Integer> I_SPECIES = VectorSpecies.ofLargestShape(int.class);\n+    private static final VectorSpecies<Long> L_SPECIES = VectorSpecies.ofLargestShape(long.class);\n+    private static final VectorSpecies<Float> F_SPECIES = VectorSpecies.ofLargestShape(float.class);\n+    private static final VectorSpecies<Double> D_SPECIES = VectorSpecies.ofLargestShape(double.class);\n@@ -93,2 +93,3 @@\n-        Generator<Integer> iGen = RD.uniformInts(Integer.MIN_VALUE, Integer.MAX_VALUE);\n-        Generator<Long> lGen = RD.uniformLongs(Long.MIN_VALUE, Long.MAX_VALUE);\n+        Generator<Integer> iGen = RD.ints();\n+        Generator<Long> lGen = RD.longs();\n+        \/\/ Use uniform generators for floating point numbers not to generate NaN values.\n@@ -121,2 +122,1 @@\n-            return Integer.compareUnsigned(Byte.toUnsignedInt(a.byteValue()),\n-                    Byte.toUnsignedInt(b.byteValue()));\n+            return Integer.compareUnsigned(Byte.toUnsignedInt(a.byteValue()), Byte.toUnsignedInt(b.byteValue()));\n@@ -124,2 +124,1 @@\n-            return Integer.compareUnsigned(Short.toUnsignedInt(a.shortValue()),\n-                    Short.toUnsignedInt(b.shortValue()));\n+            return Integer.compareUnsigned(Short.toUnsignedInt(a.shortValue()), Short.toUnsignedInt(b.shortValue()));\n@@ -134,2 +133,1 @@\n-    public static <T extends Number & Comparable<T>> void verifyResults(T a, T b, boolean r,\n-            VectorOperators.Comparison op) {\n+    public static <T extends Number & Comparable<T>> void verifyResults(T a, T b, boolean r, VectorOperators.Comparison op) {\n@@ -137,0 +135,2 @@\n+            \/\/ For floating point numbers, a is not NaN, b may be NaN. If b is NaN,\n+            \/\/ a.compareTo(b) will return 1, 1 != 0 is true, r is expected to be true.\n@@ -139,0 +139,2 @@\n+            \/\/ For floating point numbers, a is not NaN, b may be NaN. If b is NaN,\n+            \/\/ a.compareTo(b) will return 1, 1 == 0 is false, r is expected to be false.\n@@ -237,1 +239,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n@@ -245,1 +247,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n@@ -253,1 +255,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n@@ -261,1 +263,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n@@ -269,1 +271,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n@@ -277,1 +279,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n@@ -285,1 +287,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n@@ -293,1 +295,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n@@ -301,1 +303,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n@@ -309,1 +311,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n@@ -318,1 +320,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n@@ -326,1 +328,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n@@ -334,1 +336,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n@@ -342,1 +344,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n@@ -350,1 +352,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n@@ -358,1 +360,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n@@ -366,1 +368,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n@@ -374,1 +376,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n@@ -382,1 +384,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n@@ -390,1 +392,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n@@ -399,1 +401,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n@@ -407,1 +409,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n@@ -415,1 +417,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n@@ -423,1 +425,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n@@ -431,1 +433,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n@@ -439,1 +441,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n@@ -447,1 +449,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n@@ -455,1 +457,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n@@ -463,1 +465,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n@@ -471,1 +473,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n@@ -480,2 +482,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -488,2 +490,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -496,2 +498,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -504,2 +506,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -512,2 +514,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -520,2 +522,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -528,2 +530,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -536,2 +538,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -544,2 +546,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -552,2 +554,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -560,1 +562,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n@@ -568,1 +570,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n@@ -576,1 +578,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n@@ -584,1 +586,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n@@ -592,1 +594,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n@@ -600,1 +602,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n@@ -608,1 +610,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n@@ -616,1 +618,1 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n@@ -624,2 +626,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -632,2 +634,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -640,2 +642,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -648,2 +650,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -656,2 +658,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -664,2 +666,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -672,2 +674,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n@@ -680,2 +682,2 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n+        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCompareNotTest.java","additions":90,"deletions":88,"binary":false,"changes":178,"status":"modified"}]}