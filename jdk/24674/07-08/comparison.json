{"files":[{"patch":"@@ -1220,5 +1220,1 @@\n-    \/\/ Condition for removing an unnecessary not() following a compare(...)\n-    \/\/ operation. The predecessor of n (this XorV or XorVMask) may also be used\n-    \/\/ by a useless VectorBox node which will later be eliminated by\n-    \/\/ RemoveUseless. Return true to ensure that subgraph transformations are\n-    \/\/ performed on n.\n+    \/\/ Condition for XorVMask(VectorMaskCmp(x,y,cond), MaskAll(true)) ==> VectorMaskCmp(x,y,ncond)\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -331,1 +331,1 @@\n-  mask negate( ) const { return mask(_test^4); }\n+  mask negate( ) const { return negate_mask(_test); }\n@@ -333,1 +333,1 @@\n-  static mask negate_mask(mask btm) { return mask(btm^4); }\n+  static mask negate_mask(mask btm) { return mask(btm ^ 4); }\n","filename":"src\/hotspot\/share\/opto\/subnode.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2200,0 +2200,4 @@\n+\/\/ (XorV (VectorMaskCast (VectorMaskCmp src1 src2 cond)) (Replicate -1))\n+\/\/    => (VectorMaskCast (VectorMaskCmp src1 src2 ncond))\n+\/\/ (XorVMask (VectorMaskCast (VectorMaskCmp src1 src2 cond)) (MaskAll m1))\n+\/\/    => (VectorMaskCast (VectorMaskCmp src1 src2 ncond))\n@@ -2220,2 +2224,1 @@\n-  if (in2->Opcode() == Op_VectorMaskCmp ||\n-      (in2->Opcode() == Op_VectorMaskCast && in2->in(1)->Opcode() == Op_VectorMaskCmp)) {\n+  if (VectorNode::is_all_ones_vector(in1)) {\n@@ -2225,4 +2228,8 @@\n-  const TypeVect* vector_mask_cast_vt = nullptr;\n-  \/\/ in1 should be single used, otherwise the optimization may be unprofitable.\n-  if (in1->Opcode() == Op_VectorMaskCast && in1->outcnt() == 1 && in1->in(1)->Opcode() == Op_VectorMaskCmp) {\n-    vector_mask_cast_vt = in1->as_Vector()->vect_type();\n+  bool with_vector_mask_cast = false;\n+  \/\/ VectorMaskCast and VectorMaskCmp should only have a single use,\n+  \/\/ otherwise the optimization may be unprofitable.\n+  if (in1->Opcode() == Op_VectorMaskCast) {\n+    if (in1->outcnt() != 1) {\n+      return nullptr;\n+    }\n+    with_vector_mask_cast = true;\n@@ -2231,1 +2238,0 @@\n-\n@@ -2233,2 +2239,2 @@\n-      in1->outcnt() > 1 ||\n-      !((VectorMaskCmpNode*) in1)->predicate_can_be_negated() ||\n+      in1->outcnt() != 1 ||\n+      !(in1->as_VectorMaskCmp())->predicate_can_be_negated() ||\n@@ -2239,1 +2245,1 @@\n-  BoolTest::mask neg_cond = BoolTest::negate_mask(((VectorMaskCmpNode*) in1)->get_predicate());\n+  BoolTest::mask neg_cond = BoolTest::negate_mask((in1->as_VectorMaskCmp())->get_predicate());\n@@ -2242,7 +2248,4 @@\n-  Node* res = new VectorMaskCmpNode(neg_cond, in1->in(1), in1->in(2),\n-                                      predicate_node, vt);\n-  if (vector_mask_cast_vt != nullptr) {\n-    \/\/ We optimized out a VectorMaskCast, and in order to ensure type\n-    \/\/ correctness, we need to regenerate one. VectorMaskCast will be encoded as\n-    \/\/ a no-op (identity function) for types with the same size.\n-    res = new VectorMaskCastNode(phase->transform(res), vector_mask_cast_vt);\n+  Node* res = new VectorMaskCmpNode(neg_cond, in1->in(1), in1->in(2), predicate_node, vt);\n+  if (with_vector_mask_cast) {\n+    \/\/ We optimized out a VectorMaskCast, regenerate one to ensure type correctness.\n+    res = new VectorMaskCastNode(phase->transform(res), vect_type());\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2250,10 +2250,0 @@\n-    public static final String VECTOR_MASK_CMP_B = VECTOR_PREFIX + \"VECTOR_MASK_CMP_B\" + POSTFIX;\n-    static {\n-        vectorNode(VECTOR_MASK_CMP_B, \"VectorMaskCmp\", TYPE_BYTE);\n-    }\n-\n-    public static final String VECTOR_MASK_CMP_S = VECTOR_PREFIX + \"VECTOR_MASK_CMP_S\" + POSTFIX;\n-    static {\n-        vectorNode(VECTOR_MASK_CMP_S, \"VectorMaskCmp\", TYPE_SHORT);\n-    }\n-\n@@ -2280,0 +2270,5 @@\n+    public static final String VECTOR_MASK_CMP = PREFIX + \"VECTOR_MASK_CMP\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(VECTOR_MASK_CMP, \"VectorMaskCmp\");\n+    }\n+\n@@ -2690,0 +2685,5 @@\n+    public static final String XOR_V = PREFIX + \"XOR_V\" + POSTFIX;\n+    static {\n+        beforeMatchingNameRegex(XOR_V, \"XorV\");\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -136,1 +136,1 @@\n-        return nodeRegex.replaceAll(IRNode.IS_REPLACED, \"vector([A-Za-z]|mask)<\" + type + \",\" + sizeRegex + \">\");\n+        return nodeRegex.replaceAll(IRNode.IS_REPLACED, \"vector[A-Za-z]<\" + type + \",\" + sizeRegex + \">\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/checkattribute\/parsing\/RawIRNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import compiler.lib.ir_framework.*;\n@@ -28,0 +27,1 @@\n+import compiler.lib.ir_framework.*;\n@@ -44,0 +44,1 @@\n+\n@@ -50,0 +51,7 @@\n+\n+    \/\/ Vector species for vector mask cast operation between int and long types,\n+    \/\/ they must have the same number of elements.\n+    \/\/ For other types, use a vector species of the specified width.\n+    private static final VectorSpecies<Long> L_SPECIES_FOR_CAST = VectorSpecies.ofLargestShape(long.class);\n+    private static final VectorSpecies<Integer> I_SPECIES_FOR_CAST = VectorSpecies.of(int.class, VectorShape.forBitSize(L_SPECIES_FOR_CAST.vectorBitSize() \/ 2));\n+\n@@ -58,0 +66,1 @@\n+    private static int[] ic;\n@@ -79,0 +88,1 @@\n+        ic = new int[LENGTH];\n@@ -129,0 +139,2 @@\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported type for unsigned comparison: \" + a.getClass() + \", \" + b.getClass());\n@@ -130,1 +142,0 @@\n-        return 0;\n@@ -133,1 +144,1 @@\n-    public static <T extends Number & Comparable<T>> void verifyResults(T a, T b, boolean r, VectorOperators.Comparison op) {\n+    public static <T extends Number & Comparable<T>> void compareResults(T a, T b, boolean r, VectorOperators.Comparison op) {\n@@ -158,0 +169,44 @@\n+        } else {\n+            throw new IllegalArgumentException(\"Unknown comparison operator: \" + op);\n+        }\n+    }\n+\n+    @DontInline\n+    public static void verifyResultsByte(VectorSpecies<Byte> vs, VectorOperators.Comparison op) {\n+        for (int i = 0; i < vs.length(); i++) {\n+            compareResults(ba[i], bb[i], mr[i], op);\n+        }\n+    }\n+\n+    @DontInline\n+    public static void verifyResultsShort(VectorSpecies<Short> vs, VectorOperators.Comparison op) {\n+        for (int i = 0; i < vs.length(); i++) {\n+            compareResults(sa[i], sb[i], mr[i], op);\n+        }\n+    }\n+\n+    @DontInline\n+    public static void verifyResultsInt(VectorSpecies<Integer> vs, VectorOperators.Comparison op) {\n+        for (int i = 0; i < vs.length(); i++) {\n+            compareResults(ia[i], ib[i], mr[i], op);\n+        }\n+    }\n+\n+    @DontInline\n+    public static void verifyResultsLong(VectorSpecies<Long> vs, VectorOperators.Comparison op) {\n+        for (int i = 0; i < vs.length(); i++) {\n+            compareResults(la[i], lb[i], mr[i], op);\n+        }\n+    }\n+\n+    @DontInline\n+    public static void verifyResultsFloat(VectorSpecies<Float> vs, VectorOperators.Comparison op, float[] a, float[] b) {\n+        for (int i = 0; i < vs.length(); i++) {\n+            compareResults(a[i], b[i], mr[i], op);\n+        }\n+    }\n+\n+    @DontInline\n+    public static void verifyResultsDouble(VectorSpecies<Double> vs, VectorOperators.Comparison op, double[] a, double[] b) {\n+        for (int i = 0; i < vs.length(); i++) {\n+            compareResults(a[i], b[i], mr[i], op);\n@@ -162,1 +217,1 @@\n-        public VectorMask apply(VectorMask m1);\n+        public VectorMask apply(VectorMask m);\n@@ -166,9 +221,5 @@\n-    public static void testCompareMaskNotByte(VectorOperators.Comparison op, VectorMaskOperator func) {\n-        ByteVector av = ByteVector.fromArray(B_SPECIES, ba, 0);\n-        ByteVector bv = ByteVector.fromArray(B_SPECIES, bb, 0);\n-        VectorMask<Byte> m1 = av.compare(op, bv);\n-        func.apply(m1).intoArray(mr, 0);\n-\n-        for (int i = 0; i < B_SPECIES.length(); i++) {\n-            verifyResults(ba[i], bb[i], mr[i], op);\n-        }\n+    public static void testCompareMaskNotByte(VectorSpecies<Byte> vs, VectorOperators.Comparison op, VectorMaskOperator func) {\n+        ByteVector av = ByteVector.fromArray(vs, ba, 0);\n+        ByteVector bv = ByteVector.fromArray(vs, bb, 0);\n+        VectorMask<Byte> m = av.compare(op, bv);\n+        func.apply(m).intoArray(mr, 0);\n@@ -178,9 +229,5 @@\n-    public static void testCompareMaskNotShort(VectorOperators.Comparison op, VectorMaskOperator func) {\n-        ShortVector av = ShortVector.fromArray(S_SPECIES, sa, 0);\n-        ShortVector bv = ShortVector.fromArray(S_SPECIES, sb, 0);\n-        VectorMask<Short> m1 = av.compare(op, bv);\n-        func.apply(m1).intoArray(mr, 0);\n-\n-        for (int i = 0; i < S_SPECIES.length(); i++) {\n-            verifyResults(sa[i], sb[i], mr[i], op);\n-        }\n+    public static void testCompareMaskNotShort(VectorSpecies<Short> vs, VectorOperators.Comparison op, VectorMaskOperator func) {\n+        ShortVector av = ShortVector.fromArray(vs, sa, 0);\n+        ShortVector bv = ShortVector.fromArray(vs, sb, 0);\n+        VectorMask<Short> m = av.compare(op, bv);\n+        func.apply(m).intoArray(mr, 0);\n@@ -190,9 +237,5 @@\n-    public static void testCompareMaskNotInt(VectorOperators.Comparison op, VectorMaskOperator func) {\n-        IntVector av = IntVector.fromArray(I_SPECIES, ia, 0);\n-        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n-        VectorMask<Integer> m1 = av.compare(op, bv);\n-        func.apply(m1).intoArray(mr, 0);\n-\n-        for (int i = 0; i < I_SPECIES.length(); i++) {\n-            verifyResults(ia[i], ib[i], mr[i], op);\n-        }\n+    public static void testCompareMaskNotInt(VectorSpecies<Integer> vs, VectorOperators.Comparison op, VectorMaskOperator func) {\n+        IntVector av = IntVector.fromArray(vs, ia, 0);\n+        IntVector bv = IntVector.fromArray(vs, ib, 0);\n+        VectorMask<Integer> m = av.compare(op, bv);\n+        func.apply(m).intoArray(mr, 0);\n@@ -202,9 +245,5 @@\n-    public static void testCompareMaskNotLong(VectorOperators.Comparison op, VectorMaskOperator func) {\n-        LongVector av = LongVector.fromArray(L_SPECIES, la, 0);\n-        LongVector bv = LongVector.fromArray(L_SPECIES, lb, 0);\n-        VectorMask<Long> m1 = av.compare(op, bv);\n-        func.apply(m1).intoArray(mr, 0);\n-\n-        for (int i = 0; i < L_SPECIES.length(); i++) {\n-            verifyResults(la[i], lb[i], mr[i], op);\n-        }\n+    public static void testCompareMaskNotLong(VectorSpecies<Long> vs, VectorOperators.Comparison op, VectorMaskOperator func) {\n+        LongVector av = LongVector.fromArray(vs, la, 0);\n+        LongVector bv = LongVector.fromArray(vs, lb, 0);\n+        VectorMask<Long> m = av.compare(op, bv);\n+        func.apply(m).intoArray(mr, 0);\n@@ -214,9 +253,5 @@\n-    public static void testCompareMaskNotFloat(VectorOperators.Comparison op, float[] a, float[] b, VectorMaskOperator func) {\n-        FloatVector av = FloatVector.fromArray(F_SPECIES, a, 0);\n-        FloatVector bv = FloatVector.fromArray(F_SPECIES, b, 0);\n-        VectorMask<Float> m1 = av.compare(op, bv);\n-        func.apply(m1).intoArray(mr, 0);\n-\n-        for (int i = 0; i < F_SPECIES.length(); i++) {\n-            verifyResults(a[i], b[i], mr[i], op);\n-        }\n+    public static void testCompareMaskNotFloat(VectorSpecies<Float> vs, VectorOperators.Comparison op, float[] a, float[] b, VectorMaskOperator func) {\n+        FloatVector av = FloatVector.fromArray(vs, a, 0);\n+        FloatVector bv = FloatVector.fromArray(vs, b, 0);\n+        VectorMask<Float> m = av.compare(op, bv);\n+        func.apply(m).intoArray(mr, 0);\n@@ -226,9 +261,5 @@\n-    public static void testCompareMaskNotDouble(VectorOperators.Comparison op, double[] a, double[] b, VectorMaskOperator func) {\n-        DoubleVector av = DoubleVector.fromArray(D_SPECIES, a, 0);\n-        DoubleVector bv = DoubleVector.fromArray(D_SPECIES, b, 0);\n-        VectorMask<Double> m1 = av.compare(op, bv);\n-        func.apply(m1).intoArray(mr, 0);\n-\n-        for (int i = 0; i < D_SPECIES.length(); i++) {\n-            verifyResults(a[i], b[i], mr[i], op);\n-        }\n+    public static void testCompareMaskNotDouble(VectorSpecies<Double> vs, VectorOperators.Comparison op, double[] a, double[] b, VectorMaskOperator func) {\n+        DoubleVector av = DoubleVector.fromArray(vs, a, 0);\n+        DoubleVector bv = DoubleVector.fromArray(vs, b, 0);\n+        VectorMask<Double> m = av.compare(op, bv);\n+        func.apply(m).intoArray(mr, 0);\n@@ -238,0 +269,1 @@\n+\n@@ -239,2 +271,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -242,2 +276,7 @@\n-        testCompareMaskNotByte(VectorOperators.EQ, m -> m.not());\n-        testCompareMaskNotByte(VectorOperators.EQ, m -> m.xor(B_SPECIES.maskAll(true)));\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.EQ, (m) -> { return m.not(); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.EQ);\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.EQ, (m) -> { return B_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.EQ);\n+\n+        testCompareMaskNotByte(ByteVector.SPECIES_64, VectorOperators.EQ, (m) -> { return m.cast(ShortVector.SPECIES_128).not(); });\n+        verifyResultsByte(ByteVector.SPECIES_64, VectorOperators.EQ);\n@@ -247,2 +286,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -250,2 +291,7 @@\n-        testCompareMaskNotByte(VectorOperators.NE, m -> m.not());\n-        testCompareMaskNotByte(VectorOperators.NE, m -> m.xor(B_SPECIES.maskAll(true)));\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.NE, (m) -> { return m.not(); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.NE);\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.NE, (m) -> { return B_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.NE);\n+\n+        testCompareMaskNotByte(ByteVector.SPECIES_64, VectorOperators.NE, (m) -> { return m.cast(ShortVector.SPECIES_128).not(); });\n+        verifyResultsByte(ByteVector.SPECIES_64, VectorOperators.NE);\n@@ -255,2 +301,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -258,2 +306,7 @@\n-        testCompareMaskNotByte(VectorOperators.LT, m -> m.not());\n-        testCompareMaskNotByte(VectorOperators.LT, m -> m.xor(B_SPECIES.maskAll(true)));\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.LT, (m) -> { return m.not(); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.LT);\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.LT, (m) -> { return B_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.LT);\n+\n+        testCompareMaskNotByte(ByteVector.SPECIES_64, VectorOperators.LT, (m) -> { return m.cast(ShortVector.SPECIES_128).not(); });\n+        verifyResultsByte(ByteVector.SPECIES_64, VectorOperators.LT);\n@@ -263,2 +316,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -266,2 +321,7 @@\n-        testCompareMaskNotByte(VectorOperators.GT, m -> m.not());\n-        testCompareMaskNotByte(VectorOperators.GT, m -> m.xor(B_SPECIES.maskAll(true)));\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.GT, (m) -> { return m.not(); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.GT);\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.GT, (m) -> { return B_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.GT);\n+\n+        testCompareMaskNotByte(ByteVector.SPECIES_64, VectorOperators.GT, (m) -> { return m.cast(ShortVector.SPECIES_128).not(); });\n+        verifyResultsByte(ByteVector.SPECIES_64, VectorOperators.GT);\n@@ -271,2 +331,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -274,2 +336,7 @@\n-        testCompareMaskNotByte(VectorOperators.LE, m -> m.not());\n-        testCompareMaskNotByte(VectorOperators.LE, m -> m.xor(B_SPECIES.maskAll(true)));\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.LE, (m) -> { return m.not(); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.LE);\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.LE, (m) -> { return B_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.LE);\n+\n+        testCompareMaskNotByte(ByteVector.SPECIES_64, VectorOperators.LE, (m) -> { return m.cast(ShortVector.SPECIES_128).not(); });\n+        verifyResultsByte(ByteVector.SPECIES_64, VectorOperators.LE);\n@@ -279,2 +346,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -282,2 +351,7 @@\n-        testCompareMaskNotByte(VectorOperators.GE, m -> m.not());\n-        testCompareMaskNotByte(VectorOperators.GE, m -> m.xor(B_SPECIES.maskAll(true)));\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.GE, (m) -> { return m.not(); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.GE);\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.GE, (m) -> { return B_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.GE);\n+\n+        testCompareMaskNotByte(ByteVector.SPECIES_64, VectorOperators.GE, (m) -> { return m.cast(ShortVector.SPECIES_128).not(); });\n+        verifyResultsByte(ByteVector.SPECIES_64, VectorOperators.GE);\n@@ -287,2 +361,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -290,2 +366,7 @@\n-        testCompareMaskNotByte(VectorOperators.ULT, m -> m.not());\n-        testCompareMaskNotByte(VectorOperators.ULT, m -> m.xor(B_SPECIES.maskAll(true)));\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.ULT, (m) -> { return m.not(); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.ULT);\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.ULT, (m) -> { return B_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.ULT);\n+\n+        testCompareMaskNotByte(ByteVector.SPECIES_64, VectorOperators.ULT, (m) -> { return m.cast(ShortVector.SPECIES_128).not(); });\n+        verifyResultsByte(ByteVector.SPECIES_64, VectorOperators.ULT);\n@@ -295,2 +376,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -298,2 +381,7 @@\n-        testCompareMaskNotByte(VectorOperators.UGT, m -> m.not());\n-        testCompareMaskNotByte(VectorOperators.UGT, m -> m.xor(B_SPECIES.maskAll(true)));\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.UGT, (m) -> { return m.not(); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.UGT);\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.UGT, (m) -> { return B_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.UGT);\n+\n+        testCompareMaskNotByte(ByteVector.SPECIES_64, VectorOperators.UGT, (m) -> { return m.cast(ShortVector.SPECIES_128).not(); });\n+        verifyResultsByte(ByteVector.SPECIES_64, VectorOperators.UGT);\n@@ -303,2 +391,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -306,2 +396,7 @@\n-        testCompareMaskNotByte(VectorOperators.ULE, m -> m.not());\n-        testCompareMaskNotByte(VectorOperators.ULE, m -> m.xor(B_SPECIES.maskAll(true)));\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.ULE, (m) -> { return m.not(); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.ULE);\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.ULE, (m) -> { return B_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.ULE);\n+\n+        testCompareMaskNotByte(ByteVector.SPECIES_64, VectorOperators.ULE, (m) -> { return m.cast(ShortVector.SPECIES_128).not(); });\n+        verifyResultsByte(ByteVector.SPECIES_64, VectorOperators.ULE);\n@@ -311,2 +406,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VB, \"= 0\", IRNode.VECTOR_MASK_CMP_B, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -314,2 +411,7 @@\n-        testCompareMaskNotByte(VectorOperators.UGE, m -> m.not());\n-        testCompareMaskNotByte(VectorOperators.UGE, m -> m.xor(B_SPECIES.maskAll(true)));\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.UGE, (m) -> { return m.not(); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.UGE);\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.UGE, (m) -> { return B_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.UGE);\n+\n+        testCompareMaskNotByte(ByteVector.SPECIES_64, VectorOperators.UGE, (m) -> { return m.cast(ShortVector.SPECIES_128).not(); });\n+        verifyResultsByte(ByteVector.SPECIES_64, VectorOperators.UGE);\n@@ -320,2 +422,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -323,2 +427,9 @@\n-        testCompareMaskNotShort(VectorOperators.EQ, m -> m.not());\n-        testCompareMaskNotShort(VectorOperators.EQ, m -> m.xor(S_SPECIES.maskAll(true)));\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.EQ, (m) -> { return m.not(); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.EQ);\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.EQ, (m) -> { return S_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.EQ);\n+\n+        testCompareMaskNotShort(ShortVector.SPECIES_64, VectorOperators.EQ, (m) -> { return IntVector.SPECIES_128.maskAll(true).xor(m.cast(IntVector.SPECIES_128)); });\n+        verifyResultsShort(ShortVector.SPECIES_64, VectorOperators.EQ);\n+        testCompareMaskNotShort(ShortVector.SPECIES_128, VectorOperators.EQ, (m) -> { return m.cast(ByteVector.SPECIES_64).not(); });\n+        verifyResultsShort(ShortVector.SPECIES_128, VectorOperators.EQ);\n@@ -328,2 +439,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -331,2 +444,9 @@\n-        testCompareMaskNotShort(VectorOperators.NE, m -> m.not());\n-        testCompareMaskNotShort(VectorOperators.NE, m -> m.xor(S_SPECIES.maskAll(true)));\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.NE, (m) -> { return m.not(); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.NE);\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.NE, (m) -> { return S_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.NE);\n+\n+        testCompareMaskNotShort(ShortVector.SPECIES_64, VectorOperators.NE, (m) -> { return IntVector.SPECIES_128.maskAll(true).xor(m.cast(IntVector.SPECIES_128)); });\n+        verifyResultsShort(ShortVector.SPECIES_64, VectorOperators.NE);\n+        testCompareMaskNotShort(ShortVector.SPECIES_128, VectorOperators.NE, (m) -> { return m.cast(ByteVector.SPECIES_64).not(); });\n+        verifyResultsShort(ShortVector.SPECIES_128, VectorOperators.NE);\n@@ -336,2 +456,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -339,2 +461,9 @@\n-        testCompareMaskNotShort(VectorOperators.LT, m -> m.not());\n-        testCompareMaskNotShort(VectorOperators.LT, m -> m.xor(S_SPECIES.maskAll(true)));\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.LT, (m) -> { return m.not(); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.LT);\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.LT, (m) -> { return S_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.LT);\n+\n+        testCompareMaskNotShort(ShortVector.SPECIES_64, VectorOperators.LT, (m) -> { return IntVector.SPECIES_128.maskAll(true).xor(m.cast(IntVector.SPECIES_128)); });\n+        verifyResultsShort(ShortVector.SPECIES_64, VectorOperators.LT);\n+        testCompareMaskNotShort(ShortVector.SPECIES_128, VectorOperators.LT, (m) -> { return m.cast(ByteVector.SPECIES_64).not(); });\n+        verifyResultsShort(ShortVector.SPECIES_128, VectorOperators.LT);\n@@ -344,2 +473,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -347,2 +478,9 @@\n-        testCompareMaskNotShort(VectorOperators.GT, m -> m.not());\n-        testCompareMaskNotShort(VectorOperators.GT, m -> m.xor(S_SPECIES.maskAll(true)));\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.GT, (m) -> { return m.not(); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.GT);\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.GT, (m) -> { return S_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.GT);\n+\n+        testCompareMaskNotShort(ShortVector.SPECIES_64, VectorOperators.GT, (m) -> { return IntVector.SPECIES_128.maskAll(true).xor(m.cast(IntVector.SPECIES_128)); });\n+        verifyResultsShort(ShortVector.SPECIES_64, VectorOperators.GT);\n+        testCompareMaskNotShort(ShortVector.SPECIES_128, VectorOperators.GT, (m) -> { return m.cast(ByteVector.SPECIES_64).not(); });\n+        verifyResultsShort(ShortVector.SPECIES_128, VectorOperators.GT);\n@@ -352,2 +490,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -355,2 +495,9 @@\n-        testCompareMaskNotShort(VectorOperators.LE, m -> m.not());\n-        testCompareMaskNotShort(VectorOperators.LE, m -> m.xor(S_SPECIES.maskAll(true)));\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.LE, (m) -> { return m.not(); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.LE);\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.LE, (m) -> { return S_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.LE);\n+\n+        testCompareMaskNotShort(ShortVector.SPECIES_64, VectorOperators.LE, (m) -> { return IntVector.SPECIES_128.maskAll(true).xor(m.cast(IntVector.SPECIES_128)); });\n+        verifyResultsShort(ShortVector.SPECIES_64, VectorOperators.LE);\n+        testCompareMaskNotShort(ShortVector.SPECIES_128, VectorOperators.LE, (m) -> { return m.cast(ByteVector.SPECIES_64).not(); });\n+        verifyResultsShort(ShortVector.SPECIES_128, VectorOperators.LE);\n@@ -360,2 +507,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -363,2 +512,9 @@\n-        testCompareMaskNotShort(VectorOperators.GE, m -> m.not());\n-        testCompareMaskNotShort(VectorOperators.GE, m -> m.xor(S_SPECIES.maskAll(true)));\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.GE, (m) -> { return m.not(); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.GE);\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.GE, (m) -> { return S_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.GE);\n+\n+        testCompareMaskNotShort(ShortVector.SPECIES_64, VectorOperators.GE, (m) -> { return IntVector.SPECIES_128.maskAll(true).xor(m.cast(IntVector.SPECIES_128)); });\n+        verifyResultsShort(ShortVector.SPECIES_64, VectorOperators.GE);\n+        testCompareMaskNotShort(ShortVector.SPECIES_128, VectorOperators.GE, (m) -> { return m.cast(ByteVector.SPECIES_64).not(); });\n+        verifyResultsShort(ShortVector.SPECIES_128, VectorOperators.GE);\n@@ -368,2 +524,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -371,2 +529,9 @@\n-        testCompareMaskNotShort(VectorOperators.ULT, m -> m.not());\n-        testCompareMaskNotShort(VectorOperators.ULT, m -> m.xor(S_SPECIES.maskAll(true)));\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.ULT, (m) -> { return m.not(); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.ULT);\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.ULT, (m) -> { return S_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.ULT);\n+\n+        testCompareMaskNotShort(ShortVector.SPECIES_64, VectorOperators.ULT, (m) -> { return IntVector.SPECIES_128.maskAll(true).xor(m.cast(IntVector.SPECIES_128)); });\n+        verifyResultsShort(ShortVector.SPECIES_64, VectorOperators.ULT);\n+        testCompareMaskNotShort(ShortVector.SPECIES_128, VectorOperators.ULT, (m) -> { return m.cast(ByteVector.SPECIES_64).not(); });\n+        verifyResultsShort(ShortVector.SPECIES_128, VectorOperators.ULT);\n@@ -376,2 +541,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -379,2 +546,9 @@\n-        testCompareMaskNotShort(VectorOperators.UGT, m -> m.not());\n-        testCompareMaskNotShort(VectorOperators.UGT, m -> m.xor(S_SPECIES.maskAll(true)));\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.UGT, (m) -> { return m.not(); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.UGT);\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.UGT, (m) -> { return S_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.UGT);\n+\n+        testCompareMaskNotShort(ShortVector.SPECIES_64, VectorOperators.UGT, (m) -> { return IntVector.SPECIES_128.maskAll(true).xor(m.cast(IntVector.SPECIES_128)); });\n+        verifyResultsShort(ShortVector.SPECIES_64, VectorOperators.UGT);\n+        testCompareMaskNotShort(ShortVector.SPECIES_128, VectorOperators.UGT, (m) -> { return m.cast(ByteVector.SPECIES_64).not(); });\n+        verifyResultsShort(ShortVector.SPECIES_128, VectorOperators.UGT);\n@@ -384,2 +558,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -387,2 +563,9 @@\n-        testCompareMaskNotShort(VectorOperators.ULE, m -> m.not());\n-        testCompareMaskNotShort(VectorOperators.ULE, m -> m.xor(S_SPECIES.maskAll(true)));\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.ULE, (m) -> { return m.not(); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.ULE);\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.ULE, (m) -> { return S_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.ULE);\n+\n+        testCompareMaskNotShort(ShortVector.SPECIES_64, VectorOperators.ULE, (m) -> { return IntVector.SPECIES_128.maskAll(true).xor(m.cast(IntVector.SPECIES_128)); });\n+        verifyResultsShort(ShortVector.SPECIES_64, VectorOperators.ULE);\n+        testCompareMaskNotShort(ShortVector.SPECIES_128, VectorOperators.ULE, (m) -> { return m.cast(ByteVector.SPECIES_64).not(); });\n+        verifyResultsShort(ShortVector.SPECIES_128, VectorOperators.ULE);\n@@ -392,2 +575,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VS, \"= 0\", IRNode.VECTOR_MASK_CMP_S, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -395,2 +580,9 @@\n-        testCompareMaskNotShort(VectorOperators.UGE, m -> m.not());\n-        testCompareMaskNotShort(VectorOperators.UGE, m -> m.xor(S_SPECIES.maskAll(true)));\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.UGE, (m) -> { return m.not(); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.UGE);\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.UGE, (m) -> { return S_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.UGE);\n+\n+        testCompareMaskNotShort(ShortVector.SPECIES_64, VectorOperators.UGE, (m) -> { return IntVector.SPECIES_128.maskAll(true).xor(m.cast(IntVector.SPECIES_128)); });\n+        verifyResultsShort(ShortVector.SPECIES_64, VectorOperators.UGE);\n+        testCompareMaskNotShort(ShortVector.SPECIES_128, VectorOperators.UGE, (m) -> { return m.cast(ByteVector.SPECIES_64).not(); });\n+        verifyResultsShort(ShortVector.SPECIES_128, VectorOperators.UGE);\n@@ -401,2 +593,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -404,2 +598,9 @@\n-        testCompareMaskNotInt(VectorOperators.EQ, m -> m.not());\n-        testCompareMaskNotInt(VectorOperators.EQ, m -> m.xor(I_SPECIES.maskAll(true)));\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.EQ, (m) -> { return m.not(); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.EQ);\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.EQ, (m) -> { return I_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.EQ);\n+\n+        testCompareMaskNotInt(I_SPECIES_FOR_CAST, VectorOperators.EQ, (m) -> { return L_SPECIES_FOR_CAST.maskAll(true).xor(m.cast(L_SPECIES_FOR_CAST)); });\n+        verifyResultsInt(I_SPECIES_FOR_CAST, VectorOperators.EQ);\n+        testCompareMaskNotInt(IntVector.SPECIES_128, VectorOperators.EQ, (m) -> { return m.cast(ShortVector.SPECIES_64).not(); });\n+        verifyResultsInt(IntVector.SPECIES_128, VectorOperators.EQ);\n@@ -409,2 +610,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -412,2 +615,9 @@\n-        testCompareMaskNotInt(VectorOperators.NE, m -> m.not());\n-        testCompareMaskNotInt(VectorOperators.NE, m -> m.xor(I_SPECIES.maskAll(true)));\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.NE, (m) -> { return m.not(); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.NE);\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.NE, (m) -> { return I_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.NE);\n+\n+        testCompareMaskNotInt(I_SPECIES_FOR_CAST, VectorOperators.NE, (m) -> { return L_SPECIES_FOR_CAST.maskAll(true).xor(m.cast(L_SPECIES_FOR_CAST)); });\n+        verifyResultsInt(I_SPECIES_FOR_CAST, VectorOperators.NE);\n+        testCompareMaskNotInt(IntVector.SPECIES_128, VectorOperators.NE, (m) -> { return m.cast(ShortVector.SPECIES_64).not(); });\n+        verifyResultsInt(IntVector.SPECIES_128, VectorOperators.NE);\n@@ -417,2 +627,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -420,2 +632,9 @@\n-        testCompareMaskNotInt(VectorOperators.LT, m -> m.not());\n-        testCompareMaskNotInt(VectorOperators.LT, m -> m.xor(I_SPECIES.maskAll(true)));\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.LT, (m) -> { return m.not(); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.LT);\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.LT, (m) -> { return I_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.LT);\n+\n+        testCompareMaskNotInt(I_SPECIES_FOR_CAST, VectorOperators.LT, (m) -> { return L_SPECIES_FOR_CAST.maskAll(true).xor(m.cast(L_SPECIES_FOR_CAST)); });\n+        verifyResultsInt(I_SPECIES_FOR_CAST, VectorOperators.LT);\n+        testCompareMaskNotInt(IntVector.SPECIES_128, VectorOperators.LT, (m) -> { return m.cast(ShortVector.SPECIES_64).not(); });\n+        verifyResultsInt(IntVector.SPECIES_128, VectorOperators.LT);\n@@ -425,2 +644,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -428,2 +649,9 @@\n-        testCompareMaskNotInt(VectorOperators.GT, m -> m.not());\n-        testCompareMaskNotInt(VectorOperators.GT, m -> m.xor(I_SPECIES.maskAll(true)));\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.GT, (m) -> { return m.not(); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.GT);\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.GT, (m) -> { return I_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.GT);\n+\n+        testCompareMaskNotInt(I_SPECIES_FOR_CAST, VectorOperators.GT, (m) -> { return L_SPECIES_FOR_CAST.maskAll(true).xor(m.cast(L_SPECIES_FOR_CAST)); });\n+        verifyResultsInt(I_SPECIES_FOR_CAST, VectorOperators.GT);\n+        testCompareMaskNotInt(IntVector.SPECIES_128, VectorOperators.GT, (m) -> { return m.cast(ShortVector.SPECIES_64).not(); });\n+        verifyResultsInt(IntVector.SPECIES_128, VectorOperators.GT);\n@@ -433,2 +661,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -436,2 +666,9 @@\n-        testCompareMaskNotInt(VectorOperators.LE, m -> m.not());\n-        testCompareMaskNotInt(VectorOperators.LE, m -> m.xor(I_SPECIES.maskAll(true)));\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.LE, (m) -> { return m.not(); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.LE);\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.LE, (m) -> { return I_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.LE);\n+\n+        testCompareMaskNotInt(I_SPECIES_FOR_CAST, VectorOperators.LE, (m) -> { return L_SPECIES_FOR_CAST.maskAll(true).xor(m.cast(L_SPECIES_FOR_CAST)); });\n+        verifyResultsInt(I_SPECIES_FOR_CAST, VectorOperators.LE);\n+        testCompareMaskNotInt(IntVector.SPECIES_128, VectorOperators.LE, (m) -> { return m.cast(ShortVector.SPECIES_64).not(); });\n+        verifyResultsInt(IntVector.SPECIES_128, VectorOperators.LE);\n@@ -441,2 +678,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -444,2 +683,9 @@\n-        testCompareMaskNotInt(VectorOperators.GE, m -> m.not());\n-        testCompareMaskNotInt(VectorOperators.GE, m -> m.xor(I_SPECIES.maskAll(true)));\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.GE, (m) -> { return m.not(); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.GE);\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.GE, (m) -> { return I_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.GE);\n+\n+        testCompareMaskNotInt(I_SPECIES_FOR_CAST, VectorOperators.GE, (m) -> { return L_SPECIES_FOR_CAST.maskAll(true).xor(m.cast(L_SPECIES_FOR_CAST)); });\n+        verifyResultsInt(I_SPECIES_FOR_CAST, VectorOperators.GE);\n+        testCompareMaskNotInt(IntVector.SPECIES_128, VectorOperators.GE, (m) -> { return m.cast(ShortVector.SPECIES_64).not(); });\n+        verifyResultsInt(IntVector.SPECIES_128, VectorOperators.GE);\n@@ -449,2 +695,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -452,2 +700,9 @@\n-        testCompareMaskNotInt(VectorOperators.ULT, m -> m.not());\n-        testCompareMaskNotInt(VectorOperators.ULT, m -> m.xor(I_SPECIES.maskAll(true)));\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.ULT, (m) -> { return m.not(); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.ULT);\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.ULT, (m) -> { return I_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.ULT);\n+\n+        testCompareMaskNotInt(I_SPECIES_FOR_CAST, VectorOperators.ULT, (m) -> { return L_SPECIES_FOR_CAST.maskAll(true).xor(m.cast(L_SPECIES_FOR_CAST)); });\n+        verifyResultsInt(I_SPECIES_FOR_CAST, VectorOperators.ULT);\n+        testCompareMaskNotInt(IntVector.SPECIES_128, VectorOperators.ULT, (m) -> { return m.cast(ShortVector.SPECIES_64).not(); });\n+        verifyResultsInt(IntVector.SPECIES_128, VectorOperators.ULT);\n@@ -457,2 +712,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -460,2 +717,9 @@\n-        testCompareMaskNotInt(VectorOperators.UGT, m -> m.not());\n-        testCompareMaskNotInt(VectorOperators.UGT, m -> m.xor(I_SPECIES.maskAll(true)));\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.UGT, (m) -> { return m.not(); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.UGT);\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.UGT, (m) -> { return I_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.UGT);\n+\n+        testCompareMaskNotInt(I_SPECIES_FOR_CAST, VectorOperators.UGT, (m) -> { return L_SPECIES_FOR_CAST.maskAll(true).xor(m.cast(L_SPECIES_FOR_CAST)); });\n+        verifyResultsInt(I_SPECIES_FOR_CAST, VectorOperators.UGT);\n+        testCompareMaskNotInt(IntVector.SPECIES_128, VectorOperators.UGT, (m) -> { return m.cast(ShortVector.SPECIES_64).not(); });\n+        verifyResultsInt(IntVector.SPECIES_128, VectorOperators.UGT);\n@@ -465,2 +729,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -468,2 +734,9 @@\n-        testCompareMaskNotInt(VectorOperators.ULE, m -> m.not());\n-        testCompareMaskNotInt(VectorOperators.ULE, m -> m.xor(I_SPECIES.maskAll(true)));\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.ULE, (m) -> { return m.not(); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.ULE);\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.ULE, (m) -> { return I_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.ULE);\n+\n+        testCompareMaskNotInt(I_SPECIES_FOR_CAST, VectorOperators.ULE, (m) -> { return L_SPECIES_FOR_CAST.maskAll(true).xor(m.cast(L_SPECIES_FOR_CAST)); });\n+        verifyResultsInt(I_SPECIES_FOR_CAST, VectorOperators.ULE);\n+        testCompareMaskNotInt(IntVector.SPECIES_128, VectorOperators.ULE, (m) -> { return m.cast(ShortVector.SPECIES_64).not(); });\n+        verifyResultsInt(IntVector.SPECIES_128, VectorOperators.ULE);\n@@ -473,2 +746,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_I, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 4\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -476,2 +751,9 @@\n-        testCompareMaskNotInt(VectorOperators.UGE, m -> m.not());\n-        testCompareMaskNotInt(VectorOperators.UGE, m -> m.xor(I_SPECIES.maskAll(true)));\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.UGE, (m) -> { return m.not(); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.UGE);\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.UGE, (m) -> { return I_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.UGE);\n+\n+        testCompareMaskNotInt(I_SPECIES_FOR_CAST, VectorOperators.UGE, (m) -> { return L_SPECIES_FOR_CAST.maskAll(true).xor(m.cast(L_SPECIES_FOR_CAST)); });\n+        verifyResultsInt(I_SPECIES_FOR_CAST, VectorOperators.UGE);\n+        testCompareMaskNotInt(IntVector.SPECIES_128, VectorOperators.UGE, (m) -> { return m.cast(ShortVector.SPECIES_64).not(); });\n+        verifyResultsInt(IntVector.SPECIES_128, VectorOperators.UGE);\n@@ -482,2 +764,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -485,2 +769,7 @@\n-        testCompareMaskNotLong(VectorOperators.EQ, m -> m.not());\n-        testCompareMaskNotLong(VectorOperators.EQ, m -> m.xor(L_SPECIES.maskAll(true)));\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.EQ, (m) -> { return m.not(); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.EQ);\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.EQ, (m) -> { return L_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.EQ);\n+\n+        testCompareMaskNotLong(L_SPECIES_FOR_CAST, VectorOperators.EQ, (m) -> { return m.cast(I_SPECIES_FOR_CAST).not(); });\n+        verifyResultsLong(L_SPECIES_FOR_CAST, VectorOperators.EQ);\n@@ -490,2 +779,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -493,2 +784,7 @@\n-        testCompareMaskNotLong(VectorOperators.NE, m -> m.not());\n-        testCompareMaskNotLong(VectorOperators.NE, m -> m.xor(L_SPECIES.maskAll(true)));\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.NE, (m) -> { return m.not(); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.NE);\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.NE, (m) -> { return L_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.NE);\n+\n+        testCompareMaskNotLong(L_SPECIES_FOR_CAST, VectorOperators.NE, (m) -> { return m.cast(I_SPECIES_FOR_CAST).not(); });\n+        verifyResultsLong(L_SPECIES_FOR_CAST, VectorOperators.NE);\n@@ -498,2 +794,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -501,2 +799,7 @@\n-        testCompareMaskNotLong(VectorOperators.LT, m -> m.not());\n-        testCompareMaskNotLong(VectorOperators.LT, m -> m.xor(L_SPECIES.maskAll(true)));\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.LT, (m) -> { return m.not(); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.LT);\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.LT, (m) -> { return L_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.LT);\n+\n+        testCompareMaskNotLong(L_SPECIES_FOR_CAST, VectorOperators.LT, (m) -> { return m.cast(I_SPECIES_FOR_CAST).not(); });\n+        verifyResultsLong(L_SPECIES_FOR_CAST, VectorOperators.LT);\n@@ -506,2 +809,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -509,2 +814,7 @@\n-        testCompareMaskNotLong(VectorOperators.GT, m -> m.not());\n-        testCompareMaskNotLong(VectorOperators.GT, m -> m.xor(L_SPECIES.maskAll(true)));\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.GT, (m) -> { return m.not(); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.GT);\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.GT, (m) -> { return L_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.GT);\n+\n+        testCompareMaskNotLong(L_SPECIES_FOR_CAST, VectorOperators.GT, (m) -> { return m.cast(I_SPECIES_FOR_CAST).not(); });\n+        verifyResultsLong(L_SPECIES_FOR_CAST, VectorOperators.GT);\n@@ -514,2 +824,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -517,2 +829,7 @@\n-        testCompareMaskNotLong(VectorOperators.LE, m -> m.not());\n-        testCompareMaskNotLong(VectorOperators.LE, m -> m.xor(L_SPECIES.maskAll(true)));\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.LE, (m) -> { return m.not(); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.LE);\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.LE, (m) -> { return L_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.LE);\n+\n+        testCompareMaskNotLong(L_SPECIES_FOR_CAST, VectorOperators.LE, (m) -> { return m.cast(I_SPECIES_FOR_CAST).not(); });\n+        verifyResultsLong(L_SPECIES_FOR_CAST, VectorOperators.LE);\n@@ -522,2 +839,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -525,2 +844,7 @@\n-        testCompareMaskNotLong(VectorOperators.GE, m -> m.not());\n-        testCompareMaskNotLong(VectorOperators.GE, m -> m.xor(L_SPECIES.maskAll(true)));\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.GE, (m) -> { return m.not(); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.GE);\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.GE, (m) -> { return L_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.GE);\n+\n+        testCompareMaskNotLong(L_SPECIES_FOR_CAST, VectorOperators.GE, (m) -> { return m.cast(I_SPECIES_FOR_CAST).not(); });\n+        verifyResultsLong(L_SPECIES_FOR_CAST, VectorOperators.GE);\n@@ -530,2 +854,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -533,2 +859,7 @@\n-        testCompareMaskNotLong(VectorOperators.ULT, m -> m.not());\n-        testCompareMaskNotLong(VectorOperators.ULT, m -> m.xor(L_SPECIES.maskAll(true)));\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.ULT, (m) -> { return m.not(); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.ULT);\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.ULT, (m) -> { return L_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.ULT);\n+\n+        testCompareMaskNotLong(L_SPECIES_FOR_CAST, VectorOperators.ULT, (m) -> { return m.cast(I_SPECIES_FOR_CAST).not(); });\n+        verifyResultsLong(L_SPECIES_FOR_CAST, VectorOperators.ULT);\n@@ -538,2 +869,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -541,2 +874,7 @@\n-        testCompareMaskNotLong(VectorOperators.UGT, m -> m.not());\n-        testCompareMaskNotLong(VectorOperators.UGT, m -> m.xor(L_SPECIES.maskAll(true)));\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.UGT, (m) -> { return m.not(); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.UGT);\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.UGT, (m) -> { return L_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.UGT);\n+\n+        testCompareMaskNotLong(L_SPECIES_FOR_CAST, VectorOperators.UGT, (m) -> { return m.cast(I_SPECIES_FOR_CAST).not(); });\n+        verifyResultsLong(L_SPECIES_FOR_CAST, VectorOperators.UGT);\n@@ -546,2 +884,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -549,2 +889,7 @@\n-        testCompareMaskNotLong(VectorOperators.ULE, m -> m.not());\n-        testCompareMaskNotLong(VectorOperators.ULE, m -> m.xor(L_SPECIES.maskAll(true)));\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.ULE, (m) -> { return m.not(); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.ULE);\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.ULE, (m) -> { return L_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.ULE);\n+\n+        testCompareMaskNotLong(L_SPECIES_FOR_CAST, VectorOperators.ULE, (m) -> { return m.cast(I_SPECIES_FOR_CAST).not(); });\n+        verifyResultsLong(L_SPECIES_FOR_CAST, VectorOperators.ULE);\n@@ -554,2 +899,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_L, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -557,2 +904,7 @@\n-        testCompareMaskNotLong(VectorOperators.UGE, m -> m.not());\n-        testCompareMaskNotLong(VectorOperators.UGE, m -> m.xor(L_SPECIES.maskAll(true)));\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.UGE, (m) -> { return m.not(); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.UGE);\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.UGE, (m) -> { return L_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.UGE);\n+\n+        testCompareMaskNotLong(L_SPECIES_FOR_CAST, VectorOperators.UGE, (m) -> { return m.cast(I_SPECIES_FOR_CAST).not(); });\n+        verifyResultsLong(L_SPECIES_FOR_CAST, VectorOperators.UGE);\n@@ -562,2 +914,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -565,2 +919,4 @@\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fb, m -> m.not());\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fb, m -> m.xor(F_SPECIES.maskAll(true)));\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.EQ, fa, fb, (m) -> { return m.not(); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.EQ, fa, fb);\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.EQ, fa, fb, (m) -> { return F_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.EQ, fa, fb);\n@@ -570,2 +926,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VI, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -573,2 +931,4 @@\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fb, m -> m.not());\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fb, m -> m.xor(F_SPECIES.maskAll(true)));\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.NE, fa, fb, (m) -> { return m.not(); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.NE, fa, fb);\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.NE, fa, fb, (m) -> { return F_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.NE, fa, fb);\n@@ -578,2 +938,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -581,2 +943,4 @@\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fnan, m -> m.not());\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fnan, m -> m.xor(F_SPECIES.maskAll(true)));\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.EQ, fa, fnan, (m) -> { return m.not(); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.EQ, fa, fnan);\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.EQ, fa, fnan, (m) -> { return F_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.EQ, fa, fnan);\n@@ -586,2 +950,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -589,2 +955,4 @@\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fnan, m -> m.not());\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fnan, m -> m.xor(F_SPECIES.maskAll(true)));\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.NE, fa, fnan, (m) -> { return m.not(); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.NE, fa, fnan);\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.NE, fa, fnan, (m) -> { return F_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.NE, fa, fnan);\n@@ -594,2 +962,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -597,2 +967,4 @@\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fpinf, m -> m.not());\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fpinf, m -> m.xor(F_SPECIES.maskAll(true)));\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.EQ, fa, fpinf, (m) -> { return m.not(); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.EQ, fa, fpinf);\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.EQ, fa, fpinf, (m) -> { return F_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.EQ, fa, fpinf);\n@@ -602,2 +974,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -605,2 +979,4 @@\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fpinf, m -> m.not());\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fpinf, m -> m.xor(F_SPECIES.maskAll(true)));\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.NE, fa, fpinf, (m) -> { return m.not(); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.NE, fa, fpinf);\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.NE, fa, fpinf, (m) -> { return F_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.NE, fa, fpinf);\n@@ -610,2 +986,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -613,2 +991,4 @@\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fninf, m -> m.not());\n-        testCompareMaskNotFloat(VectorOperators.EQ, fa, fninf, m -> m.xor(F_SPECIES.maskAll(true)));\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.EQ, fa, fninf, (m) -> { return m.not(); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.EQ, fa, fninf);\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.EQ, fa, fninf, (m) -> { return F_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.EQ, fa, fninf);\n@@ -618,2 +998,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_F, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx\", \"true\", \"rvv\", \"true\" })\n@@ -621,2 +1003,4 @@\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fninf, m -> m.not());\n-        testCompareMaskNotFloat(VectorOperators.NE, fa, fninf, m -> m.xor(F_SPECIES.maskAll(true)));\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.NE, fa, fninf, (m) -> { return m.not(); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.NE, fa, fninf);\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.NE, fa, fninf, (m) -> { return F_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.NE, fa, fninf);\n@@ -626,2 +1010,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -629,2 +1015,4 @@\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, db, m -> m.not());\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, db, m -> m.xor(D_SPECIES.maskAll(true)));\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.EQ, da, db, (m) -> { return m.not(); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.EQ, da, db);\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.EQ, da, db, (m) -> { return D_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.EQ, da, db);\n@@ -634,2 +1022,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -637,2 +1027,4 @@\n-        testCompareMaskNotDouble(VectorOperators.NE, da, db, m -> m.not());\n-        testCompareMaskNotDouble(VectorOperators.NE, da, db, m -> m.xor(D_SPECIES.maskAll(true)));\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.NE, da, db, (m) -> { return m.not(); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.NE, da, db);\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.NE, da, db, (m) -> { return D_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.NE, da, db);\n@@ -642,2 +1034,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -645,2 +1039,4 @@\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, dnan, m -> m.not());\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, dnan, m -> m.xor(D_SPECIES.maskAll(true)));\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.EQ, da, dnan, (m) -> { return m.not(); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.EQ, da, dnan);\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.EQ, da, dnan, (m) -> { return D_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.EQ, da, dnan);\n@@ -650,2 +1046,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -653,2 +1051,4 @@\n-        testCompareMaskNotDouble(VectorOperators.NE, da, dnan, m -> m.not());\n-        testCompareMaskNotDouble(VectorOperators.NE, da, dnan, m -> m.xor(D_SPECIES.maskAll(true)));\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.NE, da, dnan, (m) -> { return m.not(); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.NE, da, dnan);\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.NE, da, dnan, (m) -> { return D_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.NE, da, dnan);\n@@ -658,2 +1058,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -661,2 +1063,4 @@\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, dpinf, m -> m.not());\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, dpinf, m -> m.xor(D_SPECIES.maskAll(true)));\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.EQ, da, dpinf, (m) -> { return m.not(); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.EQ, da, dpinf);\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.EQ, da, dpinf, (m) -> { return D_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.EQ, da, dpinf);\n@@ -666,2 +1070,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -669,2 +1075,4 @@\n-        testCompareMaskNotDouble(VectorOperators.NE, da, dpinf, m -> m.not());\n-        testCompareMaskNotDouble(VectorOperators.NE, da, dpinf, m -> m.xor(D_SPECIES.maskAll(true)));\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.NE, da, dpinf, (m) -> { return m.not(); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.NE, da, dpinf);\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.NE, da, dpinf, (m) -> { return D_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.NE, da, dpinf);\n@@ -674,2 +1082,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -677,2 +1087,4 @@\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, dninf, m -> m.not());\n-        testCompareMaskNotDouble(VectorOperators.EQ, da, dninf, m -> m.xor(D_SPECIES.maskAll(true)));\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.EQ, da, dninf, (m) -> { return m.not(); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.EQ, da, dninf);\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.EQ, da, dninf, (m) -> { return D_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.EQ, da, dninf);\n@@ -682,2 +1094,4 @@\n-    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\", IRNode.XOR_VL, \"= 0\", IRNode.VECTOR_MASK_CMP_D, \"= 2\" },\n-        applyIfCPUFeatureOr = {\"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\"})\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 0\",\n+                   IRNode.XOR_V, \"= 0\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"asimd\", \"true\", \"avx2\", \"true\", \"rvv\", \"true\" })\n@@ -685,2 +1099,152 @@\n-        testCompareMaskNotDouble(VectorOperators.NE, da, dninf, m -> m.not());\n-        testCompareMaskNotDouble(VectorOperators.NE, da, dninf, m -> m.xor(D_SPECIES.maskAll(true)));\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.NE, da, dninf, (m) -> { return m.not(); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.NE, da, dninf);\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.NE, da, dninf, (m) -> { return D_SPECIES.maskAll(true).xor(m); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.NE, da, dninf);\n+    }\n+\n+    \/\/ negative tests\n+\n+    @Test\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"sve\", \"true\", \"avx512\", \"true\", \"rvv\", \"true\"  })\n+    @IR(counts = { IRNode.XOR_V, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureAnd = { \"asimd\", \"true\", \"sve\", \"false\" })\n+    @IR(counts = { IRNode.XOR_V, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureAnd = { \"avx2\", \"true\" })\n+    public static void testCompareMaskNotByteNegative() {\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.EQ, (m) -> {\n+            \/\/ The vector mask is used multiple times.\n+            ic[0] = m.trueCount();\n+            return m.not();\n+        });\n+        verifyResultsByte(B_SPECIES, VectorOperators.EQ);\n+\n+        \/\/ One of the operands of XOR is not all ones vector.\n+        testCompareMaskNotByte(B_SPECIES, VectorOperators.EQ, (m) -> { return B_SPECIES.maskAll(false).xor(m); });\n+        verifyResultsByte(B_SPECIES, VectorOperators.NE);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"sve\", \"true\", \"avx512\", \"true\", \"rvv\", \"true\"  })\n+    @IR(counts = { IRNode.XOR_V, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureAnd = { \"asimd\", \"true\", \"sve\", \"false\" })\n+    @IR(counts = { IRNode.XOR_V, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureAnd = { \"avx2\", \"true\" })\n+    public static void testCompareMaskNotShortNegative() {\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.EQ, (m) -> {\n+            \/\/ The vector mask is used multiple times.\n+            ic[0] = m.trueCount();\n+            return m.not();\n+        });\n+        verifyResultsShort(S_SPECIES, VectorOperators.EQ);\n+\n+        \/\/ One of the operands of XOR is not all ones vector.\n+        testCompareMaskNotShort(S_SPECIES, VectorOperators.EQ, (m) -> { return S_SPECIES.maskAll(false).xor(m); });\n+        verifyResultsShort(S_SPECIES, VectorOperators.NE);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"sve\", \"true\", \"avx512\", \"true\", \"rvv\", \"true\"  })\n+    @IR(counts = { IRNode.XOR_V, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureAnd = { \"asimd\", \"true\", \"sve\", \"false\" })\n+    @IR(counts = { IRNode.XOR_V, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureAnd = { \"avx2\", \"true\" })\n+    public static void testCompareMaskNotIntNegative() {\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.EQ, (m) -> {\n+            \/\/ The vector mask is used multiple times.\n+            ic[0] = m.trueCount();\n+            return m.not();\n+        });\n+        verifyResultsInt(I_SPECIES, VectorOperators.EQ);\n+\n+        \/\/ One of the operands of XOR is not all ones vector.\n+        testCompareMaskNotInt(I_SPECIES, VectorOperators.EQ, (m) -> { return I_SPECIES.maskAll(false).xor(m); });\n+        verifyResultsInt(I_SPECIES, VectorOperators.NE);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureOr = { \"sve\", \"true\", \"avx512\", \"true\", \"rvv\", \"true\"  })\n+    @IR(counts = { IRNode.XOR_V, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureAnd = { \"asimd\", \"true\", \"sve\", \"false\" })\n+    @IR(counts = { IRNode.XOR_V, \"= 2\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 2\" },\n+        applyIfCPUFeatureAnd = { \"avx2\", \"true\" })\n+    public static void testCompareMaskNotLongNegative() {\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.EQ, (m) -> {\n+            \/\/ The vector mask is used multiple times.\n+            ic[0] = m.trueCount();\n+            return m.not();\n+        });\n+        verifyResultsLong(L_SPECIES, VectorOperators.EQ);\n+\n+        \/\/ One of the operands of XOR is not all ones vector.\n+        testCompareMaskNotLong(L_SPECIES, VectorOperators.EQ, (m) -> { return L_SPECIES.maskAll(false).xor(m); });\n+        verifyResultsLong(L_SPECIES, VectorOperators.NE);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 3\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"sve\", \"true\", \"avx512\", \"true\", \"rvv\", \"true\"  })\n+    @IR(counts = { IRNode.XOR_V, \"= 3\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureAnd = { \"asimd\", \"true\", \"sve\", \"false\" })\n+    @IR(counts = { IRNode.XOR_V, \"= 3\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureAnd = { \"avx2\", \"true\" })\n+    public static void testCompareMaskNotFloatNegative() {\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.EQ, fa, fb, (m) -> {\n+            \/\/ The vector mask is used multiple times.\n+            ic[0] = m.trueCount();\n+            return m.not();\n+        });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.EQ, fa, fb);\n+\n+        \/\/ One of the operands of XOR is not all ones vector.\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.EQ, fa, fb, (m) -> { return F_SPECIES.maskAll(false).xor(m); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.NE, fa, fb);\n+\n+        \/\/ Float vectors use the LT comparison.\n+        testCompareMaskNotFloat(F_SPECIES, VectorOperators.LT, fa, fb, (m) -> { return m.not(); });\n+        verifyResultsFloat(F_SPECIES, VectorOperators.LT, fa, fb);\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.XOR_V_MASK, \"= 3\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureOr = { \"sve\", \"true\", \"avx512\", \"true\", \"rvv\", \"true\"  })\n+    @IR(counts = { IRNode.XOR_V, \"= 3\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureAnd = { \"asimd\", \"true\", \"sve\", \"false\" })\n+    @IR(counts = { IRNode.XOR_V, \"= 3\",\n+                   IRNode.VECTOR_MASK_CMP, \"= 3\" },\n+        applyIfCPUFeatureAnd = { \"avx2\", \"true\" })\n+    public static void testCompareMaskNotDoubleNegative() {\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.EQ, da, db, (m) -> {\n+            \/\/ The vector mask is used multiple times.\n+            ic[0] = m.trueCount();\n+            return m.not();\n+        });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.EQ, da, db);\n+\n+        \/\/ One of the operands of XOR is not all ones vector.\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.EQ, da, db, (m) -> { return D_SPECIES.maskAll(false).xor(m); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.NE, da, db);\n+\n+        \/\/ Double vectors use the LT comparison.\n+        testCompareMaskNotDouble(D_SPECIES, VectorOperators.LT, da, db, (m) -> { return m.not(); });\n+        verifyResultsDouble(D_SPECIES, VectorOperators.LT, da, db);\n@@ -691,3 +1255,3 @@\n-        testFramework.addFlags(\"--add-modules=jdk.incubator.vector\");\n-        testFramework.setDefaultWarmup(10000);\n-        testFramework.start();\n+        testFramework.setDefaultWarmup(5000)\n+                     .addFlags(\"--add-modules=jdk.incubator.vector\")\n+                     .start();\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorMaskCompareNotTest.java","additions":849,"deletions":285,"binary":false,"changes":1134,"status":"modified"}]}