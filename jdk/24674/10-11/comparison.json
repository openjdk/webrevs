{"files":[{"patch":"@@ -2348,1 +2348,1 @@\n-      !(in1->as_VectorMaskCmp())->predicate_can_be_negated() ||\n+      !in1->as_VectorMaskCmp()->predicate_can_be_negated() ||\n@@ -2379,2 +2379,2 @@\n-  if (res == nullptr) {\n-    res = VectorNode::Ideal(phase, can_reshape);\n+  if (res != nullptr) {\n+    return res;\n@@ -2382,1 +2382,1 @@\n-  return res;\n+  return VectorNode::Ideal(phase, can_reshape);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irrule\/checkattribute\/parsing\/RawIRNode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.lang.invoke.*;\n@@ -38,2 +39,2 @@\n-@Fork(jvmArgs = { \"--add-modules=jdk.incubator.vector\" })\n-public class MaskCompareNotBenchmark {\n+@Fork(value = 2, jvmArgs = { \"--add-modules=jdk.incubator.vector\" })\n+public abstract class MaskCompareNotBenchmark {\n@@ -41,2 +42,4 @@\n-    private int ARRAYLEN;\n-    private static Random r = new Random();\n+    protected int ARRAYLEN;\n+\n+    \/\/ Abstract method to get comparison operator from subclasses\n+    protected abstract String getComparisonOperatorName();\n@@ -44,6 +47,5 @@\n-    private static final VectorSpecies<Byte> B_SPECIES = ByteVector.SPECIES_MAX;\n-    private static final VectorSpecies<Short> S_SPECIES = ShortVector.SPECIES_MAX;\n-    private static final VectorSpecies<Integer> I_SPECIES = IntVector.SPECIES_MAX;\n-    private static final VectorSpecies<Long> L_SPECIES = LongVector.SPECIES_MAX;\n-    private static final VectorSpecies<Float> F_SPECIES = FloatVector.SPECIES_MAX;\n-    private static final VectorSpecies<Double> D_SPECIES = DoubleVector.SPECIES_MAX;\n+    \/\/ To get compile-time constants for comparison operation\n+    static final MutableCallSite MUTABLE_COMPARISON_CONSTANT = new MutableCallSite(MethodType.methodType(VectorOperators.Comparison.class));\n+    static final MethodHandle MUTABLE_COMPARISON_CONSTANT_HANDLE = MUTABLE_COMPARISON_CONSTANT.dynamicInvoker();\n+\n+    private static Random r = new Random();\n@@ -51,13 +53,20 @@\n-    boolean[] mr;\n-    byte[] ba;\n-    byte[] bb;\n-    short[] sa;\n-    short[] sb;\n-    int[] ia;\n-    int[] ib;\n-    long[] la;\n-    long[] lb;\n-    float[] fa;\n-    float[] fb;\n-    double[] da;\n-    double[] db;\n+    protected static final VectorSpecies<Byte> B_SPECIES = ByteVector.SPECIES_MAX;\n+    protected static final VectorSpecies<Short> S_SPECIES = ShortVector.SPECIES_MAX;\n+    protected static final VectorSpecies<Integer> I_SPECIES = IntVector.SPECIES_MAX;\n+    protected static final VectorSpecies<Long> L_SPECIES = LongVector.SPECIES_MAX;\n+    protected static final VectorSpecies<Float> F_SPECIES = FloatVector.SPECIES_MAX;\n+    protected static final VectorSpecies<Double> D_SPECIES = DoubleVector.SPECIES_MAX;\n+\n+    protected boolean[] mr;\n+    protected byte[] ba;\n+    protected byte[] bb;\n+    protected short[] sa;\n+    protected short[] sb;\n+    protected int[] ia;\n+    protected int[] ib;\n+    protected long[] la;\n+    protected long[] lb;\n+    protected float[] fa;\n+    protected float[] fb;\n+    protected double[] da;\n+    protected double[] db;\n@@ -66,1 +75,1 @@\n-    public void init() {\n+    public void init() throws Throwable {\n@@ -96,1 +105,0 @@\n-    }\n@@ -98,8 +106,3 @@\n-    @CompilerControl(CompilerControl.Mode.INLINE)\n-    private void testCompareMaskNotByte(VectorOperators.Comparison op) {\n-        ByteVector bv = ByteVector.fromArray(B_SPECIES, bb, 0);\n-        for (int j = 0; j < ARRAYLEN; j += B_SPECIES.length()) {\n-            ByteVector av = ByteVector.fromArray(B_SPECIES, ba, j);\n-            VectorMask<Byte> m = av.compare(op, bv).not();\n-            m.intoArray(mr, j);\n-        }\n+        VectorOperators.Comparison comparisonOp = getComparisonOperator(getComparisonOperatorName());\n+        MethodHandle constant = MethodHandles.constant(VectorOperators.Comparison.class, comparisonOp);\n+        MUTABLE_COMPARISON_CONSTANT.setTarget(constant);\n@@ -109,6 +112,13 @@\n-    private void testCompareMaskNotShort(VectorOperators.Comparison op) {\n-        ShortVector bv = ShortVector.fromArray(S_SPECIES, sb, 0);\n-        for (int j = 0; j < ARRAYLEN; j += S_SPECIES.length()) {\n-            ShortVector av = ShortVector.fromArray(S_SPECIES, sa, j);\n-            VectorMask<Short> m = av.compare(op, bv).not();\n-            m.intoArray(mr, j);\n+    private static VectorOperators.Comparison getComparisonOperator(String op) {\n+        switch (op) {\n+            case \"EQ\": return VectorOperators.EQ;\n+            case \"NE\": return VectorOperators.NE;\n+            case \"LT\": return VectorOperators.LT;\n+            case \"LE\": return VectorOperators.LE;\n+            case \"GT\": return VectorOperators.GT;\n+            case \"GE\": return VectorOperators.GE;\n+            case \"ULT\": return VectorOperators.ULT;\n+            case \"ULE\": return VectorOperators.ULE;\n+            case \"UGT\": return VectorOperators.UGT;\n+            case \"UGE\": return VectorOperators.UGE;\n+            default: throw new IllegalArgumentException(\"Unknown comparison operator: \" + op);\n@@ -119,7 +129,2 @@\n-    private void testCompareMaskNotInt(VectorOperators.Comparison op) {\n-        IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n-        for (int j = 0; j < ARRAYLEN; j += I_SPECIES.length()) {\n-            IntVector av = IntVector.fromArray(I_SPECIES, ia, j);\n-            VectorMask<Integer> m = av.compare(op, bv).not();\n-            m.intoArray(mr, j);\n-        }\n+    protected VectorOperators.Comparison comparison_con() throws Throwable {\n+        return (VectorOperators.Comparison) MUTABLE_COMPARISON_CONSTANT_HANDLE.invokeExact();\n@@ -128,9 +133,4 @@\n-    @CompilerControl(CompilerControl.Mode.INLINE)\n-    private void testCompareMaskNotLong(VectorOperators.Comparison op) {\n-        LongVector bv = LongVector.fromArray(L_SPECIES, lb, 0);\n-        for (int j = 0; j < ARRAYLEN; j += L_SPECIES.length()) {\n-            LongVector av = LongVector.fromArray(L_SPECIES, la, j);\n-            VectorMask<Long> m = av.compare(op, bv).not();\n-            m.intoArray(mr, j);\n-        }\n-    }\n+    \/\/ Subclasses with different comparison operators\n+    public static class IntegerComparisons extends MaskCompareNotBenchmark {\n+        @Param({\"EQ\", \"NE\", \"LT\", \"LE\", \"GT\", \"GE\", \"ULT\", \"ULE\", \"UGT\", \"UGE\"})\n+        public String COMPARISON_OP;\n@@ -138,7 +138,3 @@\n-    @CompilerControl(CompilerControl.Mode.INLINE)\n-    private void testCompareMaskNotFloat(VectorOperators.Comparison op) {\n-        FloatVector bv = FloatVector.fromArray(F_SPECIES, fb, 0);\n-        for (int j = 0; j < ARRAYLEN; j += F_SPECIES.length()) {\n-            FloatVector av = FloatVector.fromArray(F_SPECIES, fa, j);\n-            VectorMask<Float> m = av.compare(op, bv).not();\n-            m.intoArray(mr, j);\n+        @Override\n+        protected String getComparisonOperatorName() {\n+            return COMPARISON_OP;\n@@ -146,1 +142,0 @@\n-    }\n@@ -148,7 +143,9 @@\n-    @CompilerControl(CompilerControl.Mode.INLINE)\n-    private void testCompareMaskNotDouble(VectorOperators.Comparison op) {\n-        DoubleVector bv = DoubleVector.fromArray(D_SPECIES, db, 0);\n-        for (int j = 0; j < ARRAYLEN; j += D_SPECIES.length()) {\n-            DoubleVector av = DoubleVector.fromArray(D_SPECIES, da, j);\n-            VectorMask<Double> m = av.compare(op, bv).not();\n-            m.intoArray(mr, j);\n+        @Benchmark\n+        public void testCompareMaskNotByte() throws Throwable {\n+            VectorOperators.Comparison op = comparison_con();\n+            ByteVector bv = ByteVector.fromArray(B_SPECIES, bb, 0);\n+            for (int j = 0; j < ARRAYLEN; j += B_SPECIES.length()) {\n+                ByteVector av = ByteVector.fromArray(B_SPECIES, ba, j);\n+                VectorMask<Byte> m = av.compare(op, bv).not();\n+                m.intoArray(mr, j);\n+            }\n@@ -156,151 +153,0 @@\n-    }\n-\n-    @Benchmark\n-    public void testCompareEQMaskNotByte() {\n-        testCompareMaskNotByte(VectorOperators.EQ);\n-    }\n-\n-    @Benchmark\n-    public void testCompareNEMaskNotByte() {\n-        testCompareMaskNotByte(VectorOperators.NE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareLTMaskNotByte() {\n-        testCompareMaskNotByte(VectorOperators.LT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareGTMaskNotByte() {\n-        testCompareMaskNotByte(VectorOperators.GT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareLEMaskNotByte() {\n-        testCompareMaskNotByte(VectorOperators.LE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareGEMaskNotByte() {\n-        testCompareMaskNotByte(VectorOperators.GE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareULTMaskNotByte() {\n-        testCompareMaskNotByte(VectorOperators.ULT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareUGTMaskNotByte() {\n-        testCompareMaskNotByte(VectorOperators.UGT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareULEMaskNotByte() {\n-        testCompareMaskNotByte(VectorOperators.ULE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareUGEMaskNotByte() {\n-        testCompareMaskNotByte(VectorOperators.UGE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareEQMaskNotShort() {\n-        testCompareMaskNotShort(VectorOperators.EQ);\n-    }\n-\n-    @Benchmark\n-    public void testCompareNEMaskNotShort() {\n-        testCompareMaskNotShort(VectorOperators.NE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareLTMaskNotShort() {\n-        testCompareMaskNotShort(VectorOperators.LT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareGTMaskNotShort() {\n-        testCompareMaskNotShort(VectorOperators.GT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareLEMaskNotShort() {\n-        testCompareMaskNotShort(VectorOperators.LE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareGEMaskNotShort() {\n-        testCompareMaskNotShort(VectorOperators.GE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareULTMaskNotShort() {\n-        testCompareMaskNotShort(VectorOperators.ULT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareUGTMaskNotShort() {\n-        testCompareMaskNotShort(VectorOperators.UGT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareULEMaskNotShort() {\n-        testCompareMaskNotShort(VectorOperators.ULE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareUGEMaskNotShort() {\n-        testCompareMaskNotShort(VectorOperators.UGE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareEQMaskNotInt() {\n-        testCompareMaskNotInt(VectorOperators.EQ);\n-    }\n-\n-    @Benchmark\n-    public void testCompareNEMaskNotInt() {\n-        testCompareMaskNotInt(VectorOperators.NE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareLTMaskNotInt() {\n-        testCompareMaskNotInt(VectorOperators.LT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareGTMaskNotInt() {\n-        testCompareMaskNotInt(VectorOperators.GT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareLEMaskNotInt() {\n-        testCompareMaskNotInt(VectorOperators.LE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareGEMaskNotInt() {\n-        testCompareMaskNotInt(VectorOperators.GE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareULTMaskNotInt() {\n-        testCompareMaskNotInt(VectorOperators.ULT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareUGTMaskNotInt() {\n-        testCompareMaskNotInt(VectorOperators.UGT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareULEMaskNotInt() {\n-        testCompareMaskNotInt(VectorOperators.ULE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareUGEMaskNotInt() {\n-        testCompareMaskNotInt(VectorOperators.UGE);\n-    }\n@@ -308,39 +154,10 @@\n-    @Benchmark\n-    public void testCompareEQMaskNotLong() {\n-        testCompareMaskNotLong(VectorOperators.EQ);\n-    }\n-\n-    @Benchmark\n-    public void testCompareNEMaskNotLong() {\n-        testCompareMaskNotLong(VectorOperators.NE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareLTMaskNotLong() {\n-        testCompareMaskNotLong(VectorOperators.LT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareGTMaskNotLong() {\n-        testCompareMaskNotLong(VectorOperators.GT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareLEMaskNotLong() {\n-        testCompareMaskNotLong(VectorOperators.LE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareGEMaskNotLong() {\n-        testCompareMaskNotLong(VectorOperators.GE);\n-    }\n-\n-    @Benchmark\n-    public void testCompareULTMaskNotLong() {\n-        testCompareMaskNotLong(VectorOperators.ULT);\n-    }\n-\n-    @Benchmark\n-    public void testCompareUGTMaskNotLong() {\n-        testCompareMaskNotLong(VectorOperators.UGT);\n-    }\n+        @Benchmark\n+        public void testCompareMaskNotShort() throws Throwable {\n+            VectorOperators.Comparison op = comparison_con();\n+            ShortVector bv = ShortVector.fromArray(S_SPECIES, sb, 0);\n+            for (int j = 0; j < ARRAYLEN; j += S_SPECIES.length()) {\n+                ShortVector av = ShortVector.fromArray(S_SPECIES, sa, j);\n+                VectorMask<Short> m = av.compare(op, bv).not();\n+                m.intoArray(mr, j);\n+            }\n+        }\n@@ -348,4 +165,10 @@\n-    @Benchmark\n-    public void testCompareULEMaskNotLong() {\n-        testCompareMaskNotLong(VectorOperators.ULE);\n-    }\n+        @Benchmark\n+        public void testCompareMaskNotInt() throws Throwable {\n+            VectorOperators.Comparison op = comparison_con();\n+            IntVector bv = IntVector.fromArray(I_SPECIES, ib, 0);\n+            for (int j = 0; j < ARRAYLEN; j += I_SPECIES.length()) {\n+                IntVector av = IntVector.fromArray(I_SPECIES, ia, j);\n+                VectorMask<Integer> m = av.compare(op, bv).not();\n+                m.intoArray(mr, j);\n+            }\n+        }\n@@ -353,3 +176,10 @@\n-    @Benchmark\n-    public void testCompareUGEMaskNotLong() {\n-        testCompareMaskNotLong(VectorOperators.UGE);\n+        @Benchmark\n+        public void testCompareMaskNotLong() throws Throwable {\n+            VectorOperators.Comparison op = comparison_con();\n+            LongVector bv = LongVector.fromArray(L_SPECIES, lb, 0);\n+            for (int j = 0; j < ARRAYLEN; j += L_SPECIES.length()) {\n+                LongVector av = LongVector.fromArray(L_SPECIES, la, j);\n+                VectorMask<Long> m = av.compare(op, bv).not();\n+                m.intoArray(mr, j);\n+            }\n+        }\n@@ -358,4 +188,4 @@\n-    @Benchmark\n-    public void testCompareEQMaskNotFloat() {\n-        testCompareMaskNotFloat(VectorOperators.EQ);\n-    }\n+    public static class FloatingPointComparisons extends MaskCompareNotBenchmark {\n+        \/\/ \"ULT\", \"ULE\", \"UGT\", \"UGE\" are not supported for floating point types\n+        @Param({\"EQ\", \"NE\", \"LT\", \"LE\", \"GT\", \"GE\"})\n+        public String COMPARISON_OP;\n@@ -363,4 +193,4 @@\n-    @Benchmark\n-    public void testCompareNEMaskNotFloat() {\n-        testCompareMaskNotFloat(VectorOperators.NE);\n-    }\n+        @Override\n+        protected String getComparisonOperatorName() {\n+            return COMPARISON_OP;\n+        }\n@@ -368,4 +198,10 @@\n-    @Benchmark\n-    public void testCompareEQMaskNotDouble() {\n-        testCompareMaskNotDouble(VectorOperators.EQ);\n-    }\n+        @Benchmark\n+        public void testCompareMaskNotFloat() throws Throwable {\n+            VectorOperators.Comparison op = comparison_con();\n+            FloatVector bv = FloatVector.fromArray(F_SPECIES, fb, 0);\n+            for (int j = 0; j < ARRAYLEN; j += F_SPECIES.length()) {\n+                FloatVector av = FloatVector.fromArray(F_SPECIES, fa, j);\n+                VectorMask<Float> m = av.compare(op, bv).not();\n+                m.intoArray(mr, j);\n+            }\n+        }\n@@ -373,3 +209,10 @@\n-    @Benchmark\n-    public void testCompareNEMaskNotDouble() {\n-        testCompareMaskNotDouble(VectorOperators.NE);\n+        @Benchmark\n+        public void testCompareMaskNotDouble() throws Throwable {\n+            VectorOperators.Comparison op = comparison_con();\n+            DoubleVector bv = DoubleVector.fromArray(D_SPECIES, db, 0);\n+            for (int j = 0; j < ARRAYLEN; j += D_SPECIES.length()) {\n+                DoubleVector av = DoubleVector.fromArray(D_SPECIES, da, j);\n+                VectorMask<Double> m = av.compare(op, bv).not();\n+                m.intoArray(mr, j);\n+            }\n+        }\n","filename":"test\/micro\/org\/openjdk\/bench\/jdk\/incubator\/vector\/MaskCompareNotBenchmark.java","additions":125,"deletions":282,"binary":false,"changes":407,"status":"modified"}]}