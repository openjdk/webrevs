{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8337109\n+ * @bug 8337109 8349369\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/checks\/jdkCheckLinks.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,1 @@\n-            Files.walkFileTree(directory, new SimpleFileVisitor<Path>() {\n+            Files.walkFileTree(directory, new SimpleFileVisitor<>() {\n@@ -49,1 +49,1 @@\n-                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {\n+                public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) {\n@@ -56,1 +56,1 @@\n-                public FileVisitResult postVisitDirectory(Path dir, IOException exc) throws IOException {\n+                public FileVisitResult postVisitDirectory(Path dir, IOException exc) {\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/FileProcessor.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -223,4 +223,1 @@\n-        return duplicateIds == 0\n-                && missingIds == 0\n-                && missingFiles == 0\n-                && badSchemes == 0;\n+        return log.noErrors() && (missingFiles == 0);\n@@ -231,6 +228,3 @@\n-        report();\n-        if (!isOK()) {\n-            throw new RuntimeException(\n-                    \"LinkChecker encountered errors. Duplicate IDs: \"\n-                            + duplicateIds + \", Missing IDs: \" + missingIds\n-                            + \", Missing Files: \" + missingFiles + \", Bad Schemes: \" + badSchemes);\n+        if (!log.noErrors()) {\n+            report();\n+            throw new RuntimeException(\"LinkChecker encountered errors; see log above.\");\n@@ -279,0 +273,5 @@\n+                if (!Files.exists(p)) {\n+                    log.log(currFile, line, \"missing file reference: \" + log.relativize(p));\n+                    return;\n+                }\n+\n@@ -395,1 +394,1 @@\n-                throw new IllegalStateException(\"Adding ID after file has been\");\n+                throw new IllegalStateException(\"Adding ID after file has been checked\");\n@@ -416,1 +415,3 @@\n-                        log.log(log.relativize(from), line, \"id not found: \" + this.pathOrURI + \"#\" + name);\n+                        log.log(log.relativize(from), line,\n+                                \"id not found: \" + this.pathOrURI + \"#\" + name);\n+                        LinkChecker.this.missingIds++;\n@@ -432,1 +433,2 @@\n-                        log.log(log.relativize(ref.path), ref.line, \"id not found: \" + this.pathOrURI + \"#\" + name);\n+                        log.log(log.relativize(ref.path), ref.line,\n+                                \"id not found: \" + this.pathOrURI + \"#\" + name);\n","filename":"test\/docs\/jdk\/javadoc\/doccheck\/doccheckutils\/checkers\/LinkChecker.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"}]}