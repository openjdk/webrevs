{"files":[{"patch":"@@ -215,0 +215,1 @@\n+  typedef uint32_t EnumValueType;\n@@ -216,1 +217,1 @@\n-  volatile ShenandoahSharedValue value;\n+  volatile EnumValueType value;\n@@ -225,2 +226,2 @@\n-    assert (v < (sizeof(ShenandoahSharedValue) * CHAR_MAX), \"sanity\");\n-    Atomic::release_store_fence(&value, (ShenandoahSharedValue)v);\n+    assert (v < (sizeof(EnumValueType) * CHAR_MAX), \"sanity\");\n+    Atomic::release_store_fence(&value, (EnumValueType)v);\n@@ -235,2 +236,2 @@\n-    assert (new_value < (sizeof(ShenandoahSharedValue) * CHAR_MAX), \"sanity\");\n-    return (T)Atomic::cmpxchg(&value, (ShenandoahSharedValue)expected, (ShenandoahSharedValue)new_value);\n+    assert (new_value < (sizeof(EnumValueType) * CHAR_MAX), \"sanity\");\n+    return (T)Atomic::cmpxchg(&value, (EnumValueType)expected, (EnumValueType)new_value);\n@@ -241,2 +242,2 @@\n-    assert (new_value < (sizeof(ShenandoahSharedValue) * CHAR_MAX), \"sanity\");\n-    return (T)Atomic::XchgUsingCmpxchg<1>()(&value, (ShenandoahSharedValue)new_value, atomic_memory_order::memory_order_conservative);\n+    assert (new_value < (sizeof(EnumValueType) * CHAR_MAX), \"sanity\");\n+    return (T)Atomic::xchg(&value, (EnumValueType)new_value);\n@@ -245,1 +246,1 @@\n-  volatile ShenandoahSharedValue* addr_of() {\n+  volatile EnumValueType* addr_of() {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSharedVariables.hpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"}]}