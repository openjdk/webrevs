{"files":[{"patch":"@@ -2174,2 +2174,2 @@\n-  jbyte prev = _cancelled_gc.cmpxchg(cause, GCCause::_no_gc);\n-  return prev == GCCause::_no_gc;\n+  const jbyte prev = _cancelled_gc.xchg(cause);\n+  return prev == GCCause::_no_gc || prev == GCCause::_shenandoah_concurrent_gc;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -215,0 +215,1 @@\n+  typedef uint32_t EnumValueType;\n@@ -216,1 +217,1 @@\n-  volatile ShenandoahSharedValue value;\n+  volatile EnumValueType value;\n@@ -225,2 +226,2 @@\n-    assert (v < (sizeof(ShenandoahSharedValue) * CHAR_MAX), \"sanity\");\n-    Atomic::release_store_fence(&value, (ShenandoahSharedValue)v);\n+    assert (v < (sizeof(EnumValueType) * CHAR_MAX), \"sanity\");\n+    Atomic::release_store_fence(&value, (EnumValueType)v);\n@@ -235,2 +236,2 @@\n-    assert (new_value < (sizeof(ShenandoahSharedValue) * CHAR_MAX), \"sanity\");\n-    return (T)Atomic::cmpxchg(&value, (ShenandoahSharedValue)expected, (ShenandoahSharedValue)new_value);\n+    assert (new_value < (sizeof(EnumValueType) * CHAR_MAX), \"sanity\");\n+    return (T)Atomic::cmpxchg(&value, (EnumValueType)expected, (EnumValueType)new_value);\n@@ -239,1 +240,7 @@\n-  volatile ShenandoahSharedValue* addr_of() {\n+  T xchg(T new_value) {\n+    assert (new_value >= 0, \"sanity\");\n+    assert (new_value < (sizeof(EnumValueType) * CHAR_MAX), \"sanity\");\n+    return (T)Atomic::xchg(&value, (EnumValueType)new_value);\n+  }\n+\n+  volatile EnumValueType* addr_of() {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSharedVariables.hpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"}]}