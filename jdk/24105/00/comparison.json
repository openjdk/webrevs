{"files":[{"patch":"@@ -2143,2 +2143,2 @@\n-  jbyte prev = _cancelled_gc.cmpxchg(cause, GCCause::_no_gc);\n-  return prev == GCCause::_no_gc;\n+  const jbyte prev = _cancelled_gc.xchg(cause);\n+  return prev == GCCause::_no_gc || prev == GCCause::_shenandoah_concurrent_gc;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -239,0 +239,7 @@\n+  T xchg(T new_value) {\n+    assert (new_value >= 0, \"sanity\");\n+    assert (new_value < (sizeof(ShenandoahSharedValue) * CHAR_MAX), \"sanity\");\n+    \/\/ Hmm, no platform template specialization defined for exchanging one byte... (up cast to intptr is workaround).\n+    return (T)Atomic::xchg((intptr_t*)&value, (intptr_t)new_value);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSharedVariables.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}