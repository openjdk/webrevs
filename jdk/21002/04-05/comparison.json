{"files":[{"patch":"@@ -56,0 +56,2 @@\n+import static java.lang.invoke.MethodHandleNatives.Constants.NESTMATE_CLASS;\n+import static java.lang.invoke.MethodHandleNatives.Constants.STRONG_LOADER_LINK;\n@@ -80,2 +82,0 @@\n-    private static final MethodHandles.Lookup.ClassOption[] LAMBDA_CLASS_OPTIONS = { NESTMATE, STRONG };\n-\n@@ -353,1 +353,1 @@\n-            return caller.makeHiddenClassDefiner(lambdaClassName, classBytes, lambdaProxyClassFileDumper, LAMBDA_CLASS_OPTIONS)\n+            return caller.makeHiddenClassDefiner(lambdaClassName, classBytes, lambdaProxyClassFileDumper, NESTMATE_CLASS | STRONG_LOADER_LINK)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+import static java.lang.invoke.MethodHandleNatives.Constants.NESTMATE_CLASS;\n@@ -1046,1 +1047,0 @@\n-        private static final Lookup.ClassOption[] INVOKER_CLASS_OPTIONS = { NESTMATE };\n@@ -1115,1 +1115,1 @@\n-                        .makeHiddenClassDefiner(name, INJECTED_INVOKER_TEMPLATE, dumper(), INVOKER_CLASS_OPTIONS)\n+                        .makeHiddenClassDefiner(name, INJECTED_INVOKER_TEMPLATE, dumper(), NESTMATE_CLASS)\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1912,0 +1912,3 @@\n+                    if ((flags & cp.flag) != 0) {\n+                        throw new IllegalArgumentException(\"Duplicate ClassOption \" + cp);\n+                    }\n@@ -1916,2 +1919,0 @@\n-\n-            private static final ClassOption[] NO_OPTIONS = new ClassOption[0];\n@@ -2131,4 +2132,1 @@\n-\n-            \/\/ Disallow null and duplicate options\n-            Set.of(options);\n-\n+            int flags = ClassOption.optionsToFlag(options);\n@@ -2140,1 +2138,1 @@\n-            return makeHiddenClassDefiner(bytes.clone(), false, options).defineClassAsLookup(initialize);\n+            return makeHiddenClassDefiner(bytes.clone(), false, flags).defineClassAsLookup(initialize);\n@@ -2221,2 +2219,1 @@\n-            \/\/ Disallow null and duplicate options\n-            Set.of(options);\n+            int flags = ClassOption.optionsToFlag(options);\n@@ -2229,1 +2226,1 @@\n-            return makeHiddenClassDefiner(bytes.clone(), false, options)\n+            return makeHiddenClassDefiner(bytes.clone(), false, flags)\n@@ -2375,1 +2372,1 @@\n-            return makeHiddenClassDefiner(cf, false, dumper, ClassOption.NO_OPTIONS);\n+            return makeHiddenClassDefiner(cf, false, dumper, 0);\n@@ -2387,1 +2384,1 @@\n-         * @param options class options\n+         * @param flags   class option flag mask\n@@ -2396,1 +2393,1 @@\n-                                                    ClassOption[] options) {\n+                                                    int flags) {\n@@ -2398,1 +2395,1 @@\n-            return makeHiddenClassDefiner(cf, accessVmAnnotations, defaultDumper(), options);\n+            return makeHiddenClassDefiner(cf, accessVmAnnotations, defaultDumper(), flags);\n@@ -2413,1 +2410,1 @@\n-            return makeHiddenClassDefiner(ClassFile.newInstanceNoCheck(name, bytes), false, dumper, ClassOption.NO_OPTIONS);\n+            return makeHiddenClassDefiner(ClassFile.newInstanceNoCheck(name, bytes), false, dumper, 0);\n@@ -2422,1 +2419,1 @@\n-         * @param options class options\n+         * @param flags   class options flag mask\n@@ -2426,1 +2423,1 @@\n-        ClassDefiner makeHiddenClassDefiner(String name, byte[] bytes, ClassFileDumper dumper, ClassOption... options) {\n+        ClassDefiner makeHiddenClassDefiner(String name, byte[] bytes, ClassFileDumper dumper, int flags) {\n@@ -2429,1 +2426,1 @@\n-            return makeHiddenClassDefiner(ClassFile.newInstanceNoCheck(name, bytes), false, dumper, options);\n+            return makeHiddenClassDefiner(ClassFile.newInstanceNoCheck(name, bytes), false, dumper, flags);\n@@ -2437,1 +2434,1 @@\n-         * @param options class options\n+         * @param flags class option flag mask\n@@ -2444,2 +2441,2 @@\n-                                                    ClassOption[] options) {\n-            int flags = HIDDEN_CLASS | ClassOption.optionsToFlag(options);\n+                                                    int flags) {\n+            flags |= HIDDEN_CLASS;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":18,"deletions":21,"binary":false,"changes":39,"status":"modified"}]}