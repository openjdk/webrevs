{"files":[{"patch":"@@ -723,0 +723,1 @@\n+  HeapShared::delete_tables_with_raw_oops();\n","filename":"src\/hotspot\/share\/cds\/aotMetaspace.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -98,0 +98,5 @@\n+void ArchiveHeapWriter::delete_tables_with_raw_oops() {\n+  delete _source_objs;\n+  _source_objs = nullptr;\n+}\n+\n@@ -148,1 +153,1 @@\n-  HeapShared::CachedOopInfo* p = HeapShared::archived_object_cache()->get(src_obj);\n+  HeapShared::CachedOopInfo* p = HeapShared::get_cached_oop_info(src_obj);\n@@ -157,3 +162,3 @@\n-  oop* p = _buffer_offset_to_source_obj_table->get(buffered_address_to_offset(buffered_addr));\n-  if (p != nullptr) {\n-    return *p;\n+  OopHandle* oh = _buffer_offset_to_source_obj_table->get(buffered_address_to_offset(buffered_addr));\n+  if (oh != nullptr) {\n+    return oh->resolve();\n@@ -359,1 +364,1 @@\n-    HeapShared::CachedOopInfo* info = HeapShared::archived_object_cache()->get(src_obj);\n+    HeapShared::CachedOopInfo* info = HeapShared::get_cached_oop_info(src_obj);\n@@ -364,1 +369,2 @@\n-    _buffer_offset_to_source_obj_table->put_when_absent(buffer_offset, src_obj);\n+    OopHandle handle(Universe::vm_global(), src_obj);\n+    _buffer_offset_to_source_obj_table->put_when_absent(buffer_offset, handle);\n@@ -699,1 +705,1 @@\n-    HeapShared::CachedOopInfo* info = HeapShared::archived_object_cache()->get(src_obj);\n+    HeapShared::CachedOopInfo* info = HeapShared::get_cached_oop_info(src_obj);\n@@ -761,1 +767,1 @@\n-    HeapShared::CachedOopInfo* p = HeapShared::archived_object_cache()->get(src_obj);\n+    HeapShared::CachedOopInfo* p = HeapShared::get_cached_oop_info(src_obj);\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":14,"deletions":8,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -155,1 +155,1 @@\n-  typedef ResizeableHashTable<size_t, oop,\n+  typedef ResizeableHashTable<size_t, OopHandle,\n@@ -230,0 +230,1 @@\n+  static void delete_tables_with_raw_oops();\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n@@ -276,1 +277,2 @@\n-inline bool CDSHeapVerifier::do_entry(oop& orig_obj, HeapShared::CachedOopInfo& value) {\n+inline bool CDSHeapVerifier::do_entry(OopHandle& orig_obj_handle, HeapShared::CachedOopInfo& value) {\n+  oop orig_obj = orig_obj_handle.resolve();\n@@ -326,1 +328,1 @@\n-  HeapShared::CachedOopInfo* info = HeapShared::archived_object_cache()->get(orig_obj);\n+  HeapShared::CachedOopInfo* info = HeapShared::get_cached_oop_info(orig_obj);\n@@ -360,1 +362,1 @@\n-    HeapShared::CachedOopInfo* ref = HeapShared::archived_object_cache()->get(info->orig_referrer());\n+    HeapShared::CachedOopInfo* ref = HeapShared::get_cached_oop_info(info->orig_referrer());\n","filename":"src\/hotspot\/share\/cds\/cdsHeapVerifier.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"oops\/oopHandle.hpp\"\n@@ -83,1 +84,1 @@\n-  inline bool do_entry(oop& orig_obj, HeapShared::CachedOopInfo& value);\n+  inline bool do_entry(OopHandle& orig_obj, HeapShared::CachedOopInfo& value);\n","filename":"src\/hotspot\/share\/cds\/cdsHeapVerifier.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+#include \"oops\/oopHandle.inline.hpp\"\n@@ -162,0 +163,4 @@\n+oop HeapShared::CachedOopInfo::orig_referrer() const {\n+  return _orig_referrer.resolve();\n+}\n+\n@@ -163,0 +168,2 @@\n+  assert(SafepointSynchronize::is_at_safepoint() ||\n+         JavaThread::current()->is_in_no_safepoint_scope(), \"sanity\");\n@@ -168,0 +175,17 @@\n+unsigned int HeapShared::oop_handle_hash_raw(const OopHandle& oh) {\n+  return oop_hash(oh.resolve());\n+}\n+\n+unsigned int HeapShared::oop_handle_hash(const OopHandle& oh) {\n+  oop o = oh.resolve();\n+  if (o == nullptr) {\n+    return 0;\n+  } else {\n+    return o->identity_hash();\n+  }\n+}\n+\n+bool HeapShared::oop_handle_equals(const OopHandle& a, const OopHandle& b) {\n+  return a.resolve() == b.resolve();\n+}\n+\n@@ -219,1 +243,2 @@\n-  return archived_object_cache()->get(obj) != nullptr;\n+  OopHandle oh(&obj);\n+  return archived_object_cache()->get(oh) != nullptr;\n@@ -306,1 +331,3 @@\n-    archived_object_cache()->put_when_absent(obj, info);\n+\n+    OopHandle oh(Universe::vm_global(), obj);\n+    archived_object_cache()->put_when_absent(oh, info);\n@@ -639,1 +666,2 @@\n-  CachedOopInfo* info = archived_object_cache()->get(src_obj);\n+  OopHandle oh(&src_obj);\n+  CachedOopInfo* info = archived_object_cache()->get(oh);\n@@ -646,1 +674,2 @@\n-  CachedOopInfo* info = archived_object_cache()->get(src_obj);\n+  OopHandle oh(&src_obj);\n+  CachedOopInfo* info = archived_object_cache()->get(oh);\n@@ -1456,1 +1485,1 @@\n-  return CachedOopInfo(referrer, points_to_oops_checker.result());\n+  return CachedOopInfo(OopHandle(Universe::vm_global(), referrer), points_to_oops_checker.result());\n@@ -2099,0 +2128,12 @@\n+\/\/ These tables should be used only within the CDS safepoint, so\n+\/\/ delete them before we exit the safepoint. Otherwise the table will\n+\/\/ contain bad oops after a GC.\n+void HeapShared::delete_tables_with_raw_oops() {\n+  assert(_seen_objects_table == nullptr, \"should have been deleted\");\n+\n+  delete _dumped_interned_strings;\n+  _dumped_interned_strings = nullptr;\n+\n+  ArchiveHeapWriter::delete_tables_with_raw_oops();\n+}\n+\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":46,"deletions":5,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -170,0 +170,3 @@\n+  static unsigned oop_handle_hash(OopHandle const& oh);\n+  static unsigned oop_handle_hash_raw(OopHandle const& oh);\n+  static bool oop_handle_equals(const OopHandle& a, const OopHandle& b);\n@@ -178,1 +181,1 @@\n-    oop _orig_referrer;\n+    OopHandle _orig_referrer;\n@@ -189,1 +192,1 @@\n-    CachedOopInfo(oop orig_referrer, bool has_oop_pointers)\n+    CachedOopInfo(OopHandle orig_referrer, bool has_oop_pointers)\n@@ -194,1 +197,1 @@\n-    oop orig_referrer()             const { return _orig_referrer;   }\n+    oop orig_referrer() const;\n@@ -205,1 +208,1 @@\n-  typedef ResizeableHashTable<oop, CachedOopInfo,\n+  typedef ResizeableHashTable<OopHandle, CachedOopInfo,\n@@ -208,1 +211,2 @@\n-      HeapShared::oop_hash> ArchivedObjectCache;\n+      HeapShared::oop_handle_hash_raw,\n+      HeapShared::oop_handle_equals> ArchivedObjectCache;\n@@ -381,0 +385,5 @@\n+  static CachedOopInfo* get_cached_oop_info(oop orig_obj) {\n+    OopHandle oh(&orig_obj);\n+    return _archived_object_cache->get(oh);\n+  }\n+\n@@ -438,0 +447,1 @@\n+  static void delete_tables_with_raw_oops() NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"}]}