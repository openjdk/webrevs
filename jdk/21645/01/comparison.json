{"files":[{"patch":"@@ -1129,22 +1129,5 @@\n-        String language, region, script, country, variant;\n-        language = StaticProperty.USER_LANGUAGE;\n-        \/\/ for compatibility, check for old user.region property\n-        region = StaticProperty.USER_REGION;\n-        if (!region.isEmpty()) {\n-            \/\/ region can be of form country, country_variant, or _variant\n-            int i = region.indexOf('_');\n-            if (i >= 0) {\n-                country = region.substring(0, i);\n-                variant = region.substring(i + 1);\n-            } else {\n-                country = region;\n-                variant = \"\";\n-            }\n-            script = \"\";\n-        } else {\n-            script = StaticProperty.USER_SCRIPT;\n-            country = StaticProperty.USER_COUNTRY;\n-            variant = StaticProperty.USER_VARIANT;\n-        }\n-\n-        return getInstance(language, script, country, variant,\n+        return getInstance(\n+                StaticProperty.USER_LANGUAGE,\n+                StaticProperty.USER_SCRIPT,\n+                StaticProperty.USER_COUNTRY,\n+                StaticProperty.USER_VARIANT,\n","filename":"src\/java.base\/share\/classes\/java\/util\/Locale.java","additions":5,"deletions":22,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -101,1 +101,18 @@\n-        USER_SCRIPT = getProperty(props, \"user.script\", \"\");\n+        \/\/ for compatibility, check for old user.region property\n+        USER_REGION = getProperty(props, \"user.region\", \"\");\n+        if (!USER_REGION.isEmpty()) {\n+            \/\/ region can be of form country, country_variant, or _variant\n+            int i = USER_REGION.indexOf('_');\n+            if (i >= 0) {\n+                USER_COUNTRY = USER_REGION.substring(0, i);\n+                USER_VARIANT = USER_REGION.substring(i + 1);\n+            } else {\n+                USER_COUNTRY = USER_REGION;\n+                USER_VARIANT = \"\";\n+            }\n+            USER_SCRIPT = \"\";\n+        } else {\n+            USER_SCRIPT = getProperty(props, \"user.script\", \"\");\n+            USER_COUNTRY = getProperty(props, \"user.country\", \"\");\n+            USER_VARIANT = getProperty(props, \"user.variant\", \"\");\n+        }\n@@ -104,1 +121,0 @@\n-        USER_COUNTRY = getProperty(props, \"user.country\", \"\");\n@@ -107,1 +123,0 @@\n-        USER_VARIANT = getProperty(props, \"user.variant\", \"\");\n@@ -113,1 +128,0 @@\n-        USER_REGION = getProperty(props, \"user.region\", \"\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/StaticProperty.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8342582\n+ * @summary Test if \"user.region\" system property successfully overrides\n+ *          other locale related system properties at startup\n+ * @modules jdk.localedata\n+ * @run junit\/othervm\n+ *      -Duser.region=DE\n+ *      -Duser.language=en\n+ *      -Duser.script=Latn\n+ *      -Duser.country=US\n+ *      -Duser.variant=FOO UserRegionTest\n+ * @run junit\/othervm\n+ *      -Duser.region=DE_POSIX\n+ *      -Duser.language=en\n+ *      -Duser.script=Latn\n+ *      -Duser.country=US\n+ *      -Duser.variant=FOO UserRegionTest\n+ * @run junit\/othervm\n+ *      -Duser.region=_POSIX\n+ *      -Duser.language=en\n+ *      -Duser.script=Latn\n+ *      -Duser.country=US\n+ *      -Duser.variant=FOO UserRegionTest\n+ *\/\n+\n+import java.util.Locale;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class UserRegionTest {\n+    @Test\n+    public void testDefaultLocale() {\n+        var region = System.getProperty(\"user.region\").split(\"_\");\n+        var expected = Locale.of(System.getProperty(\"user.language\"),\n+                region[0], region.length > 1 ? region[1] : \"\");\n+        assertEquals(expected, Locale.getDefault());\n+        assertEquals(expected, Locale.getDefault(Locale.Category.FORMAT));\n+        assertEquals(expected, Locale.getDefault(Locale.Category.DISPLAY));\n+    }\n+\n+    @Test\n+    public void testNumberFormat() {\n+        var country = Locale.getDefault().getCountry();\n+        if (country.equals(\"DE\")) {\n+            assertEquals(\"0,50000\", String.format(\"%.5f\", 0.5f));\n+        } else {\n+            assertEquals(\"0.50000\", String.format(\"%.5f\", 0.5f));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/UserRegionTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"}]}