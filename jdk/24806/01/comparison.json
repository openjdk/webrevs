{"files":[{"patch":"@@ -260,0 +260,3 @@\n+java\/awt\/Clipboard\/PasteNullToTextComponentsTest.java 8234140 macosx-all,windows-all\n+java\/awt\/Clipboard\/NoOwnerNoTargetsTest.java 8234140 macosx-all\n+java\/awt\/Clipboard\/LostOwnershipChainTest\/SystemClipboard2ProcTest.java 8234140 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,104 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4177171 4180145 4180148\n+ * @summary Can't copy to clipboard\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ClipRWTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.TextField;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+\n+public class ClipRWTest {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            1. Type some text in the text field and press Copy Text.\n+            2. Switch to a _native_ application (e.g. Notepad) and paste the text in\n+            3. Verify the text that is pasted matches what you typed in the Java window\n+            4. In the native app, type some new text and copy it\n+            5. Switch back to the test frame and press Paste Text\n+            6. Verify the text that is pasted matches what you typed in the native app\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"ClipRWTest Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(ClipFrame::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static class ClipFrame extends Frame {\n+        TextField   field =new TextField(50);\n+        Button      copyText = new Button(\"Copy Text\");\n+        Button      pasteText = new Button(\"Paste Text\");\n+        Clipboard   clipboard;\n+\n+        public ClipFrame() {\n+            super(\"ClipRWTest 4177171\");\n+            setLayout(new FlowLayout());\n+\n+            clipboard = getToolkit().getSystemClipboard();\n+\n+            add(field);\n+            add(copyText);\n+            add(pasteText);\n+\n+            copyText.addActionListener(\n+                    ev -> {\n+                        String text = field.getText();\n+                        try {\n+                            clipboard.setContents(new StringSelection(text), null);\n+                        } catch (Exception ex) {\n+                            ex.printStackTrace();\n+                        }\n+                    }\n+            );\n+\n+            pasteText.addActionListener(\n+                    ev -> {\n+                        String text = \"\";\n+                        try {\n+                            text = (String) clipboard.getContents(null)\n+                                    .getTransferData(DataFlavor.stringFlavor);\n+                        } catch (Exception ex) {\n+                            ex.printStackTrace();\n+                        }\n+                        field.setText(text);\n+                    }\n+            );\n+\n+            pack();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/ClipRWTest.java","additions":104,"deletions":0,"binary":false,"changes":104,"status":"added"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4683804\n+ * @summary Tests that in ClipboardOwner.lostOwnership() Clipboard.getContents()\n+ *          returns actual contents of the clipboard and Clipboard.setContents()\n+ *          can set contents of the clipboard and its owner. The clipboard is\n+ *          the system clipboard and the owners of the clipboard are in\n+ *          2 different processes.\n+ * @key headful\n+ * @library \/test\/lib\n+ * @run main SystemClipboard2ProcTest\n+*\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class SystemClipboard2ProcTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        SystemClipboardOwner.run();\n+\n+        if (SystemClipboardOwner.failed) {\n+            throw new RuntimeException(\"test failed: can not get actual \" +\n+                    \"contents of the clipboard or set owner of the clipboard\");\n+        } else {\n+            System.err.println(\"test passed\");\n+        }\n+    }\n+}\n+\n+class SystemClipboardOwner implements ClipboardOwner {\n+    static volatile boolean failed;\n+\n+    private static final Object LOCK = new Object();\n+\n+    private static final int CHAIN_LENGTH = 5;\n+    private final static Clipboard clipboard =\n+        Toolkit.getDefaultToolkit().getSystemClipboard();\n+\n+    private int m, id;\n+\n+    public SystemClipboardOwner(int m) { this.m = m; id = m; }\n+\n+    public void lostOwnership(Clipboard cb, Transferable contents) {\n+        System.err.println(id + \" lost clipboard ownership\");\n+\n+        Transferable t = getClipboardContents(cb, null);\n+        \/\/ for test passing if t.getTransferData() will throw an exception\n+        String msg = \"\" + (m + 1);\n+        try {\n+            msg = (String)t.getTransferData(DataFlavor.stringFlavor);\n+        } catch (Exception e) {\n+            System.err.println(id + \" can't getTransferData: \" + e);\n+        }\n+        System.err.println(id + \" Clipboard.getContents(): \" + msg);\n+        if (!msg.equals(\"\" + (m + 1))) {\n+            failed = true;\n+            System.err.println(\"Clipboard.getContents() returned incorrect contents!\");\n+        }\n+\n+        m += 2;\n+        if (m <= CHAIN_LENGTH) {\n+            System.err.println(id + \" Clipboard.setContents(): \" + m);\n+            setClipboardContents(cb, new StringSelection(m + \"\"), this);\n+        }\n+        if (m >= CHAIN_LENGTH) {\n+            synchronized (LOCK) {\n+                LOCK.notifyAll();\n+            }\n+        }\n+    }\n+\n+    public static void run() throws Exception {\n+        SystemClipboardOwner cbo1 = new SystemClipboardOwner(0);\n+        System.err.println(cbo1.m + \" Clipboard.setContents(): \" + cbo1.m);\n+        setClipboardContents(clipboard, new StringSelection(cbo1.m + \"\"),\n+                             cbo1);\n+\n+        ProcessBuilder pb = ProcessTools\n+                .createTestJavaProcessBuilder(SystemClipboardOwner.class.getName());\n+\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n+        }\n+\n+        outputAnalyzer.shouldHaveExitValue(0);\n+\n+        if (cbo1.m < CHAIN_LENGTH) {\n+            failed = true;\n+            System.err.println(\"chain of calls of lostOwnership() broken!\");\n+        }\n+    }\n+\n+    public static void main(String[] args) throws InterruptedException {\n+        SystemClipboardOwner cbo2 = new SystemClipboardOwner(1);\n+        System.err.println(cbo2.m + \" Clipboard.setContents(): \" + cbo2.m);\n+        synchronized (LOCK) {\n+            setClipboardContents(clipboard, new StringSelection(cbo2.m + \"\"),\n+                                 cbo2);\n+            LOCK.wait();\n+        }\n+    }\n+\n+    private static void setClipboardContents(Clipboard cb,\n+                                             Transferable contents,\n+                                             ClipboardOwner owner) {\n+        synchronized (cb) {\n+            boolean set = false;\n+            while (!set) {\n+                try {\n+                    cb.setContents(contents, owner);\n+                    set = true;\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+\n+    private static Transferable getClipboardContents(Clipboard cb,\n+                                                     Object requestor) {\n+        synchronized (cb) {\n+            while (true) {\n+                try {\n+                    Transferable t = cb.getContents(requestor);\n+                    return t;\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/LostOwnershipChainTest\/SystemClipboard2ProcTest.java","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"},{"patch":"@@ -0,0 +1,130 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4655996\n+ * @summary tests that getting the system clipboard contents doesn't cause\n+ *          IOException if there is no clipboard owner or the owner doesn't\n+ *          export any target types\n+ * @key headful\n+ * @library \/test\/lib\n+ * @run main NoOwnerNoTargetsTest\n+ *\/\n+\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.DataFlavor;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.datatransfer.UnsupportedFlavorException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class NoOwnerNoTargetsTest implements ClipboardOwner {\n+\n+    final Clipboard clipboard =\n+        Toolkit.getDefaultToolkit().getSystemClipboard();\n+    public static final int CLIPBOARD_DELAY = 1000;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length > 0) {\n+            NoOwnerNoTargetsTest test = new NoOwnerNoTargetsTest();\n+            test.execute();\n+            return;\n+        }\n+\n+        new NoOwnerNoTargetsTest().start();\n+    }\n+\n+    public void execute() {\n+        final ClipboardOwner clipboardOwner = new ClipboardOwner() {\n+                public void lostOwnership(Clipboard clip,\n+                                          Transferable contents) {\n+                    System.exit(0);\n+                }\n+            };\n+        final Transferable emptyTransferable = new Transferable() {\n+                public DataFlavor[] getTransferDataFlavors() {\n+                    return new DataFlavor[0];\n+                }\n+                public boolean isDataFlavorSupported(DataFlavor df) {\n+                    return false;\n+                }\n+                public Object getTransferData(DataFlavor df)\n+                  throws UnsupportedFlavorException {\n+                    throw new UnsupportedFlavorException(df);\n+                }\n+            };\n+\n+        clipboard.setContents(emptyTransferable, clipboardOwner);\n+        final Object o = new Object();\n+        synchronized (o) {\n+            try {\n+                o.wait();\n+            } catch (InterruptedException ie) {\n+                ie.printStackTrace();\n+            }\n+        }\n+    }\n+\n+    public void start() throws Exception {\n+        clipboard.getContents(null);\n+\n+        Transferable transferable = new StringSelection(\"TEXT\");\n+        clipboard.setContents(transferable, this);\n+\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                NoOwnerNoTargetsTest.class.getName(),\n+                \"child\"\n+        );\n+\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n+\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n+        }\n+\n+        outputAnalyzer.shouldHaveExitValue(0);\n+    }\n+\n+    public void lostOwnership(Clipboard clip, Transferable contents) {\n+        final Transferable transferable = new StringSelection(\"TEXT\");\n+        final Runnable r = () -> {\n+            try {\n+                Thread.sleep(CLIPBOARD_DELAY);\n+            } catch (InterruptedException e) {\n+                e.printStackTrace();\n+            }\n+            clipboard.getContents(null);\n+            clipboard.setContents(transferable, null);\n+        };\n+        final Thread t = new Thread(r);\n+        t.start();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/NoOwnerNoTargetsTest.java","additions":130,"deletions":0,"binary":false,"changes":130,"status":"added"},{"patch":"@@ -0,0 +1,228 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4401853\n+ * @summary Tests that pasting null to TextArea and TextField on Solaris\/Linux\n+ *          removes selected text; doing it on Windows to TextArea does nothing,\n+ *          to TextField removes selected text.\n+ * @key headful\n+ * @run main PasteNullToTextComponentsTest\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.TextArea;\n+import java.awt.TextComponent;\n+import java.awt.TextField;\n+import java.awt.Toolkit;\n+import java.awt.datatransfer.Clipboard;\n+import java.awt.datatransfer.ClipboardOwner;\n+import java.awt.datatransfer.StringSelection;\n+import java.awt.datatransfer.Transferable;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.FocusListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.KeyEvent;\n+\n+public class PasteNullToTextComponentsTest {\n+\n+    private static final int NATIVE_EVENT_PROCESSING_TIMEOUT = 500;\n+    private static final int WAIT_TIMEOUT = 3000;\n+\n+    private boolean failed;\n+\n+    private static final boolean isOSWindows =\n+            System.getProperty(\"os.name\").startsWith(\"Windows\");\n+\n+    private final Object LOCK = new Object();\n+\n+    private Robot robot;\n+\n+    private Frame frame;\n+    private TextArea ta;\n+    private TextField tf;\n+    private Component initialFocusComp;\n+\n+    private final String beg = \"a\";\n+    private final String sel = \"b\";\n+    private final String end = \"c\";\n+    private final String text = beg + sel + end;\n+    private final String begEnd = beg + end;\n+\n+    private boolean initialFocusGained;\n+\n+    public void init() {\n+        ta = new TextArea(text, 3, text.length() + 3);\n+        tf = new TextField(text, text.length() + 3);\n+        initialFocusComp = new Button(\"Initially focused button\");\n+\n+        frame = new Frame();\n+        frame.add(initialFocusComp, BorderLayout.NORTH);\n+        frame.add(ta, BorderLayout.CENTER);\n+        frame.add(tf, BorderLayout.SOUTH);\n+        frame.setSize(200, 200);\n+\n+        FocusListener fl = new FocusAdapter() {\n+            public void focusGained(FocusEvent e) {\n+                System.out.println(e + \"; source class=\" + e.getSource().getClass());\n+                synchronized (LOCK) {\n+                    TextComponent tc = (TextComponent) e.getComponent();\n+                    tc.select(1, 2);\n+                    robot.keyPress(KeyEvent.VK_CONTROL);\n+                    robot.keyPress(KeyEvent.VK_V);\n+                    robot.keyRelease(KeyEvent.VK_V);\n+                    robot.keyRelease(KeyEvent.VK_CONTROL);\n+                    tc.removeFocusListener(this);\n+                    LOCK.notifyAll();\n+                }\n+            }\n+        };\n+        ta.addFocusListener(fl);\n+        tf.addFocusListener(fl);\n+\n+        initialFocusComp.addFocusListener(new FocusAdapter() {\n+            public void focusGained(FocusEvent e) {\n+                System.out.println(e + \"; source class=\" + e.getSource().getClass());\n+                synchronized (LOCK) {\n+                    initialFocusGained = true;\n+                    LOCK.notifyAll();\n+                }\n+            }\n+        });\n+\n+        setClipboardContents(Toolkit.getDefaultToolkit().getSystemClipboard(),\n+                new StringSelection(null), null);\n+\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+\n+    public void start() throws Exception {\n+        robot = new Robot();\n+        robot.waitForIdle();\n+        robot.delay(500);\n+\n+        Point iniFocusPoint = initialFocusComp.getLocationOnScreen();\n+        synchronized (LOCK) {\n+            if (!initialFocusGained) {\n+                robot.mouseMove(iniFocusPoint.x + 3, iniFocusPoint.y + 3);\n+                robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+                robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+                LOCK.wait(WAIT_TIMEOUT);\n+            }\n+        }\n+\n+        initialFocusComp.requestFocusInWindow();\n+        robot.waitForIdle();\n+\n+        synchronized (LOCK) {\n+            ta.requestFocusInWindow();\n+            LOCK.wait(WAIT_TIMEOUT);\n+        }\n+\n+        \/\/ wait until native control process key event (C^V)\n+        robot.waitForIdle();\n+        robot.delay(NATIVE_EVENT_PROCESSING_TIMEOUT);\n+\n+        synchronized (LOCK) {\n+            tf.requestFocusInWindow();\n+            LOCK.wait(WAIT_TIMEOUT);\n+        }\n+\n+        \/\/ wait until native control process key event (C^V)\n+        robot.waitForIdle();\n+        robot.delay(NATIVE_EVENT_PROCESSING_TIMEOUT);\n+\n+        String taText = ta.getText();\n+        String tfText = tf.getText();\n+\n+        System.err.println(\"TextArea text=\" + taText +\n+                \" TextField text=\" + tfText);\n+\n+        boolean taSelDeleted = begEnd.equals(taText);\n+        boolean taSelRemained = text.equals(taText);\n+        boolean tfSelDeleted = begEnd.equals(tfText);\n+\n+        System.out.println(\"taSelDeleted = \" + taSelDeleted);\n+        System.out.println(\"taSelRemained = \" + taSelRemained);\n+        System.out.println(\"tfSelDeleted = \" + tfSelDeleted);\n+\n+        if (isOSWindows\n+                ? !(taSelRemained && tfSelDeleted)\n+                : !(taSelDeleted && tfSelDeleted)) {\n+            failed = true;\n+        }\n+\n+        if (!initialFocusGained) {\n+            System.err.println(\"Initial component did not gain focus\");\n+            failed = false;\n+        }\n+\n+        if (failed) {\n+            throw new RuntimeException(\"test failed: wrong behavior of text \" +\n+                    \"component on pasting null\");\n+        } else {\n+            System.err.println(\"test passed\");\n+        }\n+    }\n+\n+\n+    private static void setClipboardContents(Clipboard cb,\n+                                             Transferable contents,\n+                                             ClipboardOwner owner) {\n+        synchronized (cb) {\n+            boolean set = false;\n+            while (!set) {\n+                try {\n+                    cb.setContents(contents, owner);\n+                    set = true;\n+                } catch (IllegalStateException ise) {\n+                    try { Thread.sleep(100); }\n+                    catch (InterruptedException e) { e.printStackTrace(); }\n+                }\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        PasteNullToTextComponentsTest app = new PasteNullToTextComponentsTest();\n+        try {\n+            EventQueue.invokeAndWait(app::init);\n+            app.start();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (app.frame != null) {\n+                    app.frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Clipboard\/PasteNullToTextComponentsTest.java","additions":228,"deletions":0,"binary":false,"changes":228,"status":"added"}]}