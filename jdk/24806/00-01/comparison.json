{"files":[{"patch":"@@ -33,0 +33,1 @@\n+ * @library \/test\/lib\n@@ -42,3 +43,0 @@\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.IOException;\n@@ -46,0 +44,4 @@\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -109,0 +111,2 @@\n+        ProcessBuilder pb = ProcessTools\n+                .createTestJavaProcessBuilder(SystemClipboardOwner.class.getName());\n@@ -110,15 +114,2 @@\n-        String javaPath = System.getProperty(\"java.home\", \"\");\n-\n-        Process process = new ProcessBuilder(\n-                javaPath + File.separator + \"bin\" + File.separator + \"java\",\n-                \"-cp\", System.getProperty(\"test.classes\", \".\"),\n-                \"SystemClipboardOwner\"\n-        ).start();\n-\n-        ProcessResults pres = ProcessResults.doWaitFor(process, 15);\n-\n-        if (!pres.stderr.isEmpty()) {\n-            System.err.println(\"========= Child VM System.err ========\");\n-            System.err.print(pres.stderr);\n-            System.err.println(\"======================================\");\n-        }\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n@@ -126,4 +117,2 @@\n-        if (!pres.stdout.isEmpty()) {\n-            System.err.println(\"========= Child VM System.out ========\");\n-            System.err.print(pres.stdout);\n-            System.err.println(\"======================================\");\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n@@ -132,3 +121,1 @@\n-        if (pres.exitValue != 0) {\n-            throw new Error(\"child process exitValue: \" + pres.exitValue);\n-        }\n+        outputAnalyzer.shouldHaveExitValue(0);\n@@ -142,1 +129,0 @@\n-\n@@ -153,1 +139,0 @@\n-\n@@ -185,61 +170,0 @@\n-\n-}\n-\n-class ProcessResults {\n-    public int exitValue = -1;\n-    public String stdout;\n-    public String stderr;\n-\n-    public static ProcessResults doWaitFor(Process p, int timeoutSeconds)\n-            throws Exception {\n-        ProcessResults pres = new ProcessResults();\n-\n-        InReader in = new InReader(\"I\", p.inputReader());\n-        InReader err = new InReader(\"E\", p.errorReader());\n-\n-        in.start();\n-        err.start();\n-\n-        try {\n-            if (p.waitFor(timeoutSeconds, TimeUnit.SECONDS)) {\n-                pres.exitValue = p.exitValue();\n-            } else {\n-                System.err.println(\"Process timed out\");\n-                p.destroyForcibly();\n-            }\n-        } finally {\n-            in.join(500);\n-            err.join(500);\n-        }\n-\n-        pres.stdout = in.output.toString();\n-        pres.stderr = err.output.toString();\n-\n-        return pres;\n-    }\n-\n-    static class InReader extends Thread {\n-        private final String prefix;\n-        private final BufferedReader reader;\n-        private final StringBuffer output = new StringBuffer();\n-\n-        public InReader(String prefix, BufferedReader reader) {\n-            this.prefix = prefix;\n-            this.reader = reader;\n-        }\n-\n-        @Override\n-        public void run() {\n-            String line;\n-            try {\n-                while ((line = reader.readLine()) != null) {\n-                    System.out.printf(\"> %s: %s\\n\", prefix, line);\n-                    output.append(line).append(System.lineSeparator());\n-                }\n-            } catch (IOException e) {\n-                System.out.printf(\"> %s: %s\\n\", prefix, e);\n-                output.append(\"Error reading: \")\n-                        .append(e).append(System.lineSeparator());\n-            }\n-        }\n-    }\n","filename":"test\/jdk\/java\/awt\/Clipboard\/LostOwnershipChainTest\/SystemClipboard2ProcTest.java","additions":12,"deletions":88,"binary":false,"changes":100,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @library \/test\/lib\n@@ -41,5 +42,0 @@\n-import java.io.BufferedReader;\n-import java.io.File;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n@@ -47,0 +43,4 @@\n+import java.util.concurrent.TimeoutException;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n@@ -98,2 +98,0 @@\n-        String javaPath = System.getProperty(\"java.home\", \"\");\n-\n@@ -103,18 +101,4 @@\n-        Process process = new ProcessBuilder(\n-                javaPath + File.separator + \"bin\" + File.separator + \"java\",\n-                \"-cp\", System.getProperty(\"test.classes\", \".\"),\n-                \"NoOwnerNoTargetsTest\", \"child\"\n-        ).start();\n-\n-        ProcessResults pres = ProcessResults.doWaitFor(process, 15);\n-        System.out.println(\"Child returned: \" + pres.exitValue);\n-\n-        InputStream errorStream = process.getErrorStream();\n-        System.err.println(\"========= Child process stderr ========\");\n-        try {\n-            dumpStream(errorStream, System.err);\n-            System.err.println(\"=======================================\");\n-        } catch (IOException ioe) {\n-            System.err.println(\"=======================================\");\n-            ioe.printStackTrace();\n-        }\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                NoOwnerNoTargetsTest.class.getName(),\n+                \"child\"\n+        );\n@@ -122,9 +106,2 @@\n-        InputStream outputStream = process.getInputStream();\n-        System.out.println(\"========= Child process stdout ========\");\n-        try {\n-            dumpStream(outputStream, System.out);\n-            System.out.println(\"=======================================\");\n-        } catch (IOException ioe) {\n-            System.out.println(\"=======================================\");\n-            ioe.printStackTrace();\n-        }\n+        Process process = ProcessTools.startProcess(\"Child\", pb);\n+        OutputAnalyzer outputAnalyzer = new OutputAnalyzer(process);\n@@ -132,3 +109,2 @@\n-        if (pres.exitValue != 0) {\n-            throw new RuntimeException(\"Child process returned non-zero exit value \"\n-                    + pres.exitValue);\n+        if (!process.waitFor(15, TimeUnit.SECONDS)) {\n+            throw new TimeoutException(\"Timed out waiting for Child\");\n@@ -136,0 +112,2 @@\n+\n+        outputAnalyzer.shouldHaveExitValue(0);\n@@ -152,11 +130,0 @@\n-\n-    public void dumpStream(InputStream in, OutputStream out)\n-      throws IOException {\n-        int count = in.available();\n-        while (count > 0) {\n-            byte[] b = new byte[count];\n-            in.read(b);\n-            out.write(b);\n-            count = in.available();\n-        }\n-    }\n@@ -164,61 +131,0 @@\n-\n-class ProcessResults {\n-    public int exitValue = -1;\n-    public String stdout;\n-    public String stderr;\n-\n-    public static ProcessResults doWaitFor(Process p, int timeoutSeconds)\n-            throws Exception {\n-        ProcessResults pres = new ProcessResults();\n-\n-        InReader in = new InReader(\"I\", p.inputReader());\n-        InReader err = new InReader(\"E\", p.errorReader());\n-\n-        in.start();\n-        err.start();\n-\n-        try {\n-            if (p.waitFor(timeoutSeconds, TimeUnit.SECONDS)) {\n-                pres.exitValue = p.exitValue();\n-            } else {\n-                System.err.println(\"Process timed out\");\n-                p.destroyForcibly();\n-            }\n-        } finally {\n-            in.join(500);\n-            err.join(500);\n-        }\n-\n-        pres.stdout = in.output.toString();\n-        pres.stderr = err.output.toString();\n-\n-        return pres;\n-    }\n-\n-    static class InReader extends Thread {\n-        private final String prefix;\n-        private final BufferedReader reader;\n-        private final StringBuffer output = new StringBuffer();\n-\n-        public InReader(String prefix, BufferedReader reader) {\n-            this.prefix = prefix;\n-            this.reader = reader;\n-        }\n-\n-        @Override\n-        public void run() {\n-            String line;\n-            try {\n-                while ((line = reader.readLine()) != null) {\n-                    System.out.printf(\"> %s: %s\\n\", prefix, line);\n-                    output.append(line).append(System.lineSeparator());\n-                }\n-            } catch (IOException e) {\n-                System.out.printf(\"> %s: %s\\n\", prefix, e);\n-                output.append(\"Error reading: \")\n-                        .append(e).append(System.lineSeparator());\n-            }\n-        }\n-    }\n-}\n-\n","filename":"test\/jdk\/java\/awt\/Clipboard\/NoOwnerNoTargetsTest.java","additions":15,"deletions":109,"binary":false,"changes":124,"status":"modified"}]}