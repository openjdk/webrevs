{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,0 +38,4 @@\n+import java.util.stream.Stream;\n+\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n@@ -479,0 +483,26 @@\n+\n+    \/* Method is used by the LocaleProviders* related tests to launch a\n+     * LocaleProviders test method with the appropriate LocaleProvider (e.g. CLDR,\n+     * COMPAT, ETC.)\n+     *\/\n+    static void testRun(String prefList, String methodName, String... params) throws Throwable {\n+\n+        List<String> command = List.of(\n+                \"-ea\", \"-esa\",\n+                \"-cp\", Utils.TEST_CLASS_PATH,\n+                \/\/ Required for LocaleProvidersLogger\n+                \"-Djava.util.logging.config.class=LocaleProviders$LogConfig\",\n+                \"-Djava.locale.providers=\" + prefList,\n+                \"--add-exports=java.base\/sun.util.locale.provider=ALL-UNNAMED\",\n+                \"LocaleProviders\", methodName);\n+\n+        \/\/ Build process with arguments, if required by the method\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                Stream.concat(command.stream(), Stream.of(params)).toList());\n+\n+        \/\/ Evaluate process status\n+        int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n+        if (exitCode != 0) {\n+            throw new RuntimeException(\"Unexpected exit code: \" + exitCode);\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleProviders.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8228465 8232871 8257964\n+ * @summary Test any Calendar Locale provider related issues\n+ * @library \/test\/lib\n+ * @build LocaleProviders\n+ * @modules java.base\/sun.util.locale.provider\n+ * @run junit\/othervm LocaleProvidersCalendar\n+ * @run junit\/othervm -Duser.language=en -Duser.country=GB LocaleProvidersCalendar\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.EnabledIfSystemProperty;\n+\n+import static org.junit.jupiter.api.condition.OS.MAC;\n+import static org.junit.jupiter.api.condition.OS.WINDOWS;\n+\n+public class LocaleProvidersCalendar {\n+\n+    \/*\n+     * 8228465 (Windows only): Ensure correct ERA display name under HOST Windows\n+     *\/\n+    @Test\n+    @EnabledOnOs(WINDOWS)\n+    public void gregCalEraHost() throws Throwable {\n+        LocaleProviders.testRun(\"HOST\", \"bug8228465Test\");\n+    }\n+\n+    \/*\n+     * 8232871 (macOS only): Ensure correct Japanese calendar values under\n+     * HOST Mac.\n+     *\/\n+    @Test\n+    @EnabledOnOs(MAC)\n+    public void japaneseCalValuesHost() throws Throwable {\n+        LocaleProviders.testRun(\"HOST\", \"bug8232871Test\");\n+    }\n+\n+    \/*\n+     * 8257964 (macOS\/Windows only): Ensure correct Calendar::getMinimalDaysInFirstWeek\n+     * value under HOST Windows \/ Mac. Only runs under GB country.\n+     *\/\n+    @Test\n+    @EnabledOnOs({WINDOWS, MAC})\n+    @EnabledIfSystemProperty(named = \"user.language\", matches = \"en\")\n+    @EnabledIfSystemProperty(named = \"user.country\", matches = \"GB\")\n+    public void minDaysFirstWeekHost() throws Throwable {\n+        LocaleProviders.testRun(\"HOST\", \"bug8257964Test\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleProvidersCalendar.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8248695\n+ * @summary Test any java.time.DateTimeFormatter Locale provider related issues\n+ * @library \/test\/lib\n+ * @build LocaleProviders\n+ * @modules java.base\/sun.util.locale.provider\n+ * @run junit\/othervm LocaleProvidersDateTimeFormatter\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class LocaleProvidersDateTimeFormatter {\n+\n+    \/*\n+     * 8248695: Ensure DateTimeFormatter::ofLocalizedDate does not throw exception\n+     * under HOST (date only pattern leaks time field)\n+     *\/\n+    @Test\n+    public void dateOnlyJavaTimePattern() throws Throwable {\n+        LocaleProviders.testRun(\"HOST\", \"bug8248695Test\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleProvidersDateTimeFormatter.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 7198834 8001440 8013086 8013903 8027289 8232860\n+ * @summary Test any java.text.Format Locale provider related issues\n+ * @library \/test\/lib\n+ * @build LocaleProviders\n+ *        providersrc.spi.src.tznp\n+ *        providersrc.spi.src.tznp8013086\n+ * @modules java.base\/sun.util.locale.provider\n+ * @run junit\/othervm LocaleProvidersFormat\n+ * @run junit\/othervm -Duser.language=zh -Duser.country=CN LocaleProvidersFormat\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledIfSystemProperty;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+\n+import static org.junit.jupiter.api.condition.OS.MAC;\n+import static org.junit.jupiter.api.condition.OS.WINDOWS;\n+\n+public class LocaleProvidersFormat {\n+\n+    \/*\n+     * 7198834: Ensure under Windows\/HOST, adapter does not append an extra space for date patterns.\n+     *\/\n+    @Test\n+    @EnabledOnOs(WINDOWS)\n+    public void dateFormatExtraSpace() throws Throwable {\n+        LocaleProviders.testRun(\"HOST\", \"bug7198834Test\");\n+    }\n+\n+    \/*\n+     * 8001440: Ensure under CLDR, when number extension of the language\n+     * tag is invalid, test program does not throw exception when calling\n+     * NumberFormat::format.\n+     *\/\n+    @Test\n+    public void formatWithInvalidLocaleExtension() throws Throwable {\n+        LocaleProviders.testRun(\"CLDR\", \"bug8001440Test\");\n+    }\n+\n+    \/*\n+     * 8013086: Ensure a custom TimeZoneNameProvider does not cause an NPE\n+     * in simpleDateFormat, as SimpleDateFormat::matchZoneString expects the\n+     * name array is fully filled with non-null names.\n+     *\/\n+    @Test\n+    public void simpleDateFormatWithTZNProvider() throws Throwable {\n+        LocaleProviders.testRun(\"JRE,SPI\", \"bug8013086Test\", \"ja\", \"JP\");\n+        LocaleProviders.testRun(\"COMPAT,SPI\", \"bug8013086Test\", \"ja\", \"JP\");\n+    }\n+\n+    \/*\n+     * 8013903 (Windows only): Ensure HOST adapter with Japanese locale produces\n+     * the correct Japanese era, month, day names.\n+     *\/\n+    @Test\n+    @EnabledOnOs(WINDOWS)\n+    public void windowsJapaneseDateFields() throws Throwable {\n+        LocaleProviders.testRun(\"HOST,JRE\", \"bug8013903Test\");\n+        LocaleProviders.testRun(\"HOST\", \"bug8013903Test\");\n+        LocaleProviders.testRun(\"HOST,COMPAT\", \"bug8013903Test\");\n+    }\n+\n+    \/*\n+     * 8027289: Ensure if system format locale is zh_CN, the Window's currency\n+     * symbol under HOST provider is \\u00A5, the yen (yuan) sign.\n+     *\/\n+    @Test\n+    @EnabledOnOs(WINDOWS)\n+    @EnabledIfSystemProperty(named = \"user.language\", matches = \"zh\")\n+    @EnabledIfSystemProperty(named = \"user.country\", matches = \"CN\")\n+    public void windowsChineseCurrencySymbol() throws Throwable {\n+        LocaleProviders.testRun(\"JRE,HOST\", \"bug8027289Test\", \"FFE5\");\n+        LocaleProviders.testRun(\"COMPAT,HOST\", \"bug8027289Test\", \"FFE5\");\n+        LocaleProviders.testRun(\"HOST\", \"bug8027289Test\", \"00A5\");\n+    }\n+\n+    \/*\n+     * 8232860 (macOS\/Windows only): Ensure the Host adapter returns the number\n+     * pattern for number\/integer instances, which require optional fraction digits.\n+     *\/\n+    @Test\n+    @EnabledOnOs({WINDOWS, MAC})\n+    public void hostOptionalFracDigits() throws Throwable {\n+        LocaleProviders.testRun(\"HOST\", \"bug8232860Test\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleProvidersFormat.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8245241 8246721 8261919\n+ * @summary Test the Locale provider preference is logged\n+ * @library \/test\/lib\n+ * @build LocaleProviders\n+ * @modules java.base\/sun.util.locale.provider\n+ * @run junit\/othervm -Djdk.lang.Process.allowAmbiguousCommands=false LocaleProvidersLogger\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class LocaleProvidersLogger {\n+\n+    \/*\n+     * 8245241 8246721 8261919: Ensure if an incorrect system property for locale providers is set,\n+     * it should be logged and presented to the user. The option\n+     * jdk.lang.Process.allowAmbiguousCommands=false is needed for properly escaping\n+     * double quotes in the string argument.\n+     *\/\n+    @Test\n+    public void logIncorrectLocaleProvider() throws Throwable {\n+        LocaleProviders.testRun(\"FOO\", \"bug8245241Test\",\n+                \"Invalid locale provider adapter \\\"FOO\\\" ignored.\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleProvidersLogger.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,6 +26,5 @@\n- * @bug 6336885 7196799 7197573 7198834 8000245 8000615 8001440 8008577\n- *      8010666 8013086 8013233 8013903 8015960 8028771 8054482 8062006\n- *      8150432 8215913 8220227 8228465 8232871 8232860 8236495 8245241\n- *      8246721 8248695 8257964 8261919\n- * @summary tests for \"java.locale.providers\" system property\n- * @requires vm.flagless\n+ * @bug 6336885 7196799 7197573 8008577 8010666 8013233 8015960 8028771\n+ *      8054482 8062006 8150432 8215913 8220227 8236495\n+ * @summary General Locale provider test (ex: adapter loading). See the\n+ *          other LocaleProviders* test classes for more specific tests (ex:\n+ *          java.text.Format related bugs).\n@@ -34,5 +33,2 @@\n- *        providersrc.spi.src.tznp\n- *        providersrc.spi.src.tznp8013086\n- * @modules java.base\/sun.util.locale\n- *          java.base\/sun.util.locale.provider\n- * @run main\/othervm -Djdk.lang.Process.allowAmbiguousCommands=false LocaleProvidersRun\n+ * @modules java.base\/sun.util.locale.provider\n+ * @run junit\/othervm LocaleProvidersRun\n@@ -42,0 +38,1 @@\n+import java.util.stream.Stream;\n@@ -43,2 +40,8 @@\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.Utils;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.DisabledIfSystemProperty;\n+import org.junit.jupiter.api.condition.EnabledIfSystemProperty;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -46,0 +49,7 @@\n+import static org.junit.jupiter.api.condition.OS.WINDOWS;\n+\n+\/*\n+ * Note: If this test launches too many JVMs, consider increasing timeout.\n+ * As the LocaleProvider is set during java startup time, this test and the subclasses\n+ * will always have to launch a separate JVM for testing of different providers.\n+ *\/\n@@ -47,7 +57,0 @@\n-    public static void main(String[] args) throws Throwable {\n-        \/\/get the platform default locales\n-        Locale platDefLoc = Locale.getDefault(Locale.Category.DISPLAY);\n-        String defLang = platDefLoc.getLanguage();\n-        String defCtry = platDefLoc.getCountry();\n-        System.out.println(\"DEFLANG = \" + defLang);\n-        System.out.println(\"DEFCTRY = \" + defCtry);\n@@ -55,0 +58,9 @@\n+    private static String defLang;\n+    private static String defCtry;\n+    private static String defFmtLang;\n+    private static String defFmtCtry;\n+\n+    \/\/ Get the system default locale values. Used to decide param values for tests.\n+    @BeforeAll\n+    static void setUp() {\n+        Locale platDefLoc = Locale.getDefault(Locale.Category.DISPLAY);\n@@ -56,8 +68,28 @@\n-        String defFmtLang = platDefFormat.getLanguage();\n-        String defFmtCtry = platDefFormat.getCountry();\n-        System.out.println(\"DEFFMTLANG = \" + defFmtLang);\n-        System.out.println(\"DEFFMTCTRY = \" + defFmtCtry);\n-\n-        \/\/Run Test\n-        \/\/testing HOST is selected for the default locale,\n-        \/\/ if specified on Windows or MacOSX\n+        defLang = platDefLoc.getLanguage();\n+        defCtry = platDefLoc.getCountry();\n+        defFmtLang = platDefFormat.getLanguage();\n+        defFmtCtry = platDefFormat.getCountry();\n+\n+        \/\/ Print out system defaults for diagnostic purposes\n+        System.out.printf(\"DEFLANG = %s, DEFCTRY = %s, DEFFMTLANG = %s, DEFFMTCTRY = %s\",\n+                defLang, defCtry, defFmtLang, defFmtCtry);\n+    }\n+\n+    \/*\n+     * Test the adapter loading logic in LocaleProviderAdapter.\n+     * Ensures that correct fallbacks are implemented.\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource\n+    public void adapterTest(String prefList, String param1,\n+                            String param2, String param3) throws Throwable {\n+        LocaleProviders.testRun(prefList, \"adapterTest\", param1, param2, param3);\n+    }\n+\n+    \/*\n+     * Data provider which only launches against the LocaleProvider::adapterTest\n+     * method. The arguments are dictated based off the operating system\/platform\n+     * Locale. Tests against variety of provider orders.\n+     *\/\n+    private static Stream<Arguments> adapterTest() {\n+        \/\/ Testing HOST is selected for the default locale if specified on Windows or MacOSX\n@@ -66,1 +98,1 @@\n-        if(osName.startsWith(\"Windows\") || osName.startsWith(\"Mac\")) {\n+        if (osName.startsWith(\"Windows\") || osName.startsWith(\"Mac\")) {\n@@ -69,1 +101,0 @@\n-        testRun(\"HOST,JRE\", \"adapterTest\", param1, defLang, defCtry);\n@@ -71,2 +102,2 @@\n-        \/\/testing HOST is NOT selected for the non-default locale, if specified\n-        \/\/Try to find the locale JRE supports which is not the platform default\n+        \/\/ Testing HOST is NOT selected for the non-default locale, if specified\n+        \/\/ try to find the locale JRE supports which is not the platform default\n@@ -76,1 +107,1 @@\n-        if (!defLang.equals(\"en\") && !defFmtLang.equals(\"en\")){\n+        if (!defLang.equals(\"en\") && !defFmtLang.equals(\"en\")) {\n@@ -79,1 +110,1 @@\n-        } else if(!defLang.equals(\"ja\") && !defFmtLang.equals(\"ja\")){\n+        } else if (!defLang.equals(\"ja\") && !defFmtLang.equals(\"ja\")) {\n@@ -86,66 +117,0 @@\n-        testRun(\"HOST,JRE\", \"adapterTest\", \"JRE\", param2, param3);\n-\n-        \/\/testing SPI is NOT selected, as there is none.\n-        testRun(\"SPI,JRE\", \"adapterTest\", \"JRE\", \"en\", \"US\");\n-        testRun(\"SPI,COMPAT\", \"adapterTest\", \"JRE\", \"en\", \"US\");\n-\n-        \/\/testing the order, variant #1. This assumes en_GB DateFormat data are\n-        \/\/ available both in JRE & CLDR\n-        testRun(\"CLDR,JRE\", \"adapterTest\", \"CLDR\", \"en\", \"GB\");\n-        testRun(\"CLDR,COMPAT\", \"adapterTest\", \"CLDR\", \"en\", \"GB\");\n-\n-        \/\/testing the order, variant #2. This assumes en_GB DateFormat data are\n-        \/\/ available both in JRE & CLDR\n-        testRun(\"JRE,CLDR\", \"adapterTest\", \"JRE\", \"en\", \"GB\");\n-        testRun(\"COMPAT,CLDR\", \"adapterTest\", \"JRE\", \"en\", \"GB\");\n-\n-        \/\/testing the order, variant #3 for non-existent locale in JRE\n-        \/\/ assuming \"haw\" is not in JRE.\n-        testRun(\"JRE,CLDR\", \"adapterTest\", \"CLDR\", \"haw\", \"\");\n-        testRun(\"COMPAT,CLDR\", \"adapterTest\", \"CLDR\", \"haw\", \"\");\n-\n-        \/\/testing the order, variant #4 for the bug 7196799. CLDR's \"zh\" data\n-        \/\/ should be used in \"zh_CN\"\n-        testRun(\"CLDR\", \"adapterTest\", \"CLDR\", \"zh\", \"CN\");\n-\n-        \/\/testing FALLBACK provider. SPI and invalid one cases.\n-        testRun(\"SPI\", \"adapterTest\", \"FALLBACK\", \"en\", \"US\");\n-        testRun(\"FOO\", \"adapterTest\", \"CLDR\", \"en\", \"US\");\n-        testRun(\"BAR,SPI\", \"adapterTest\", \"FALLBACK\", \"en\", \"US\");\n-\n-        \/\/testing 7198834 fix.\n-        testRun(\"HOST\", \"bug7198834Test\", \"\", \"\", \"\");\n-\n-        \/\/testing 8000245 fix.\n-        testRun(\"JRE\", \"tzNameTest\", \"Europe\/Moscow\", \"\", \"\");\n-        testRun(\"COMPAT\", \"tzNameTest\", \"Europe\/Moscow\", \"\", \"\");\n-\n-        \/\/testing 8000615 fix.\n-        testRun(\"JRE\", \"tzNameTest\", \"America\/Los_Angeles\", \"\", \"\");\n-        testRun(\"COMPAT\", \"tzNameTest\", \"America\/Los_Angeles\", \"\", \"\");\n-\n-        \/\/testing 8001440 fix.\n-        testRun(\"CLDR\", \"bug8001440Test\", \"\", \"\", \"\");\n-\n-        \/\/testing 8010666 fix.\n-        if (defLang.equals(\"en\")) {\n-            testRun(\"HOST\", \"bug8010666Test\", \"\", \"\", \"\");\n-        }\n-\n-        \/\/testing 8013086 fix.\n-        testRun(\"JRE,SPI\", \"bug8013086Test\", \"ja\", \"JP\", \"\");\n-        testRun(\"COMPAT,SPI\", \"bug8013086Test\", \"ja\", \"JP\", \"\");\n-\n-        \/\/testing 8013903 fix. (Windows only)\n-        testRun(\"HOST,JRE\", \"bug8013903Test\", \"\", \"\", \"\");\n-        testRun(\"HOST\", \"bug8013903Test\", \"\", \"\", \"\");\n-        testRun(\"HOST,COMPAT\", \"bug8013903Test\", \"\", \"\", \"\");\n-\n-        \/\/testing 8027289 fix, if the platform format default is zh_CN\n-        \/\/ this assumes Windows' currency symbol for zh_CN is \\u00A5, the yen\n-        \/\/ (yuan) sign.\n-        if (defFmtLang.equals(\"zh\") && defFmtCtry.equals(\"CN\")) {\n-            testRun(\"JRE,HOST\", \"bug8027289Test\", \"FFE5\", \"\", \"\");\n-            testRun(\"COMPAT,HOST\", \"bug8027289Test\", \"FFE5\", \"\", \"\");\n-            testRun(\"HOST\", \"bug8027289Test\", \"00A5\", \"\", \"\");\n-        }\n@@ -153,22 +118,33 @@\n-        \/\/testing 8220227 fix. (Windows only)\n-        if (!defLang.equals(\"en\")) {\n-            testRun(\"HOST\", \"bug8220227Test\", \"\", \"\", \"\");\n-        }\n-\n-        \/\/testing 8228465 fix. (Windows only)\n-        testRun(\"HOST\", \"bug8228465Test\", \"\", \"\", \"\");\n-\n-        \/\/testing 8232871 fix. (macOS only)\n-        testRun(\"HOST\", \"bug8232871Test\", \"\", \"\", \"\");\n-\n-        \/\/testing 8232860 fix. (macOS\/Windows only)\n-        testRun(\"HOST\", \"bug8232860Test\", \"\", \"\", \"\");\n-\n-        \/\/testing 8245241 fix.\n-        \/\/jdk.lang.Process.allowAmbiguousCommands=false is needed for properly escaping\n-        \/\/double quotes in the string argument.\n-        testRun(\"FOO\", \"bug8245241Test\",\n-            \"Invalid locale provider adapter \\\"FOO\\\" ignored.\", \"\", \"\");\n-\n-        \/\/testing 8248695 fix.\n-        testRun(\"HOST\", \"bug8248695Test\", \"\", \"\", \"\");\n+        return Stream.of(\n+                Arguments.of(\"HOST,JRE\", param1, defLang, defCtry),\n+                Arguments.of(\"HOST,JRE\", \"JRE\", param2, param3),\n+\n+                \/\/ Testing SPI is NOT selected, as there is none.\n+                Arguments.of(\"SPI,JRE\", \"JRE\", \"en\", \"US\"),\n+                Arguments.of(\"SPI,COMPAT\", \"JRE\", \"en\", \"US\"),\n+\n+                \/\/ Testing the order, variant #1. This assumes en_GB DateFormat data are\n+                \/\/ available both in JRE & CLDR\n+                Arguments.of(\"CLDR,JRE\", \"CLDR\", \"en\", \"GB\"),\n+                Arguments.of(\"CLDR,COMPAT\", \"CLDR\", \"en\", \"GB\"),\n+\n+                \/\/ Testing the order, variant #2. This assumes en_GB DateFormat data are\n+                \/\/ available both in JRE & CLDR\n+                Arguments.of(\"JRE,CLDR\", \"JRE\", \"en\", \"GB\"),\n+                Arguments.of(\"COMPAT,CLDR\", \"JRE\", \"en\", \"GB\"),\n+\n+                \/\/ Testing the order, variant #3 for non-existent locale in JRE\n+                \/\/ assuming \"haw\" is not in JRE.\n+                Arguments.of(\"JRE,CLDR\", \"CLDR\", \"haw\", \"\"),\n+                Arguments.of(\"COMPAT,CLDR\", \"CLDR\", \"haw\", \"\"),\n+\n+                \/\/ Testing the order, variant #4 for the bug 7196799. CLDR's \"zh\" data\n+                \/\/ should be used in \"zh_CN\"\n+                Arguments.of(\"CLDR\", \"CLDR\", \"zh\", \"CN\"),\n+\n+                \/\/ Testing FALLBACK provider. SPI and invalid one cases.\n+                Arguments.of(\"SPI\", \"FALLBACK\", \"en\", \"US\"),\n+                Arguments.of(\"FOO\", \"CLDR\", \"en\", \"US\"),\n+                Arguments.of(\"BAR,SPI\", \"FALLBACK\", \"en\", \"US\")\n+            );\n+    }\n@@ -176,2 +152,9 @@\n-        \/\/testing 8257964 fix. (macOS\/Windows only)\n-        testRun(\"HOST\", \"bug8257964Test\", \"\", \"\", \"\");\n+    \/*\n+     * 8010666: Test to ensure correct implementation of Currency\/LocaleNameProvider\n+     * in HOST Windows provider (English locale)\n+     *\/\n+    @Test\n+    @EnabledOnOs(WINDOWS)\n+    @EnabledIfSystemProperty(named = \"user.language\", matches = \"en\")\n+    public void currencyNameProviderWindowsHost() throws Throwable {\n+        LocaleProviders.testRun(\"HOST\", \"bug8010666Test\");\n@@ -180,16 +163,9 @@\n-    private static void testRun(String prefList, String methodName,\n-            String param1, String param2, String param3) throws Throwable {\n-\n-        \/\/ Build process (without VM flags)\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-                \"-ea\", \"-esa\",\n-                \"-cp\", Utils.TEST_CLASS_PATH,\n-                \"-Djava.util.logging.config.class=LocaleProviders$LogConfig\",\n-                \"-Djava.locale.providers=\" + prefList,\n-                \"--add-exports=java.base\/sun.util.locale.provider=ALL-UNNAMED\",\n-                \"LocaleProviders\", methodName, param1, param2, param3);\n-        \/\/ Evaluate process status\n-        int exitCode = ProcessTools.executeCommand(pb).getExitValue();\n-        if (exitCode != 0) {\n-            throw new RuntimeException(\"Unexpected exit code: \" + exitCode);\n-        }\n+    \/*\n+     * 8220227: Ensure Locale::getDisplayCountry does not display error message\n+     * under HOST Windows (non-english locale)\n+     *\/\n+    @Test\n+    @EnabledOnOs(WINDOWS)\n+    @DisabledIfSystemProperty(named = \"user.language\", matches = \"en\")\n+    public void nonEnglishDisplayCountryHost() throws Throwable {\n+        LocaleProviders.testRun(\"HOST\", \"bug8220227Test\");\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleProvidersRun.java","additions":117,"deletions":141,"binary":false,"changes":258,"status":"modified"},{"patch":"@@ -0,0 +1,51 @@\n+\/*\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8000245 8000615\n+ * @summary Test any TimeZone Locale provider related issues\n+ * @library \/test\/lib\n+ * @build LocaleProviders\n+ *        providersrc.spi.src.tznp\n+ *        providersrc.spi.src.tznp8013086\n+ * @modules java.base\/sun.util.locale.provider\n+ * @run junit\/othervm LocaleProvidersTimeZone\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+public class LocaleProvidersTimeZone {\n+\n+    \/*\n+     * 8000245 and 8000615: Ensure preference is followed, even with a custom\n+     * SPI defined.\n+     *\/\n+    @Test\n+    public void timeZoneWithCustomProvider() throws Throwable {\n+        LocaleProviders.testRun(\"JRE\", \"tzNameTest\", \"Europe\/Moscow\");\n+        LocaleProviders.testRun(\"COMPAT\", \"tzNameTest\", \"Europe\/Moscow\");\n+        LocaleProviders.testRun(\"JRE\", \"tzNameTest\", \"America\/Los_Angeles\");\n+        LocaleProviders.testRun(\"COMPAT\", \"tzNameTest\", \"America\/Los_Angeles\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/Locale\/LocaleProvidersTimeZone.java","additions":51,"deletions":0,"binary":false,"changes":51,"status":"added"}]}