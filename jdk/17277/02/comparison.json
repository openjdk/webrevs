{"files":[{"patch":"@@ -190,1 +190,1 @@\n-    ICStub* stub = ICStub_from_destination_address(stub_address());\n+    ICStub* stub = ICStub::from_destination_address(stub_address());\n","filename":"src\/hotspot\/share\/code\/compiledIC.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-    assert(this == ICStub_from_destination_address(ic->stub_address()), \"wrong owner of ic buffer\");\n+    assert(this == ICStub::from_destination_address(ic->stub_address()), \"wrong owner of ic buffer\");\n@@ -149,5 +149,0 @@\n-ICStub* InlineCacheBuffer::new_ic_stub() {\n-  return (ICStub*)buffer()->request_committed(ic_stub_code_size());\n-}\n-\n-\n@@ -213,1 +208,1 @@\n-  ICStub* ic_stub = new_ic_stub();\n+  ICStub* ic_stub = (ICStub*) buffer()->request_committed(ic_stub_code_size());\n@@ -222,0 +217,9 @@\n+#ifdef ASSERT\n+  {\n+    ICStub* rev_stub = ICStub::from_destination_address(ic_stub->code_begin());\n+    assert(ic_stub == rev_stub,\n+           \"ICStub mapping is reversible: stub=\" PTR_FORMAT \", code=\" PTR_FORMAT \", rev_stub=\" PTR_FORMAT,\n+           p2i(ic_stub), p2i(ic_stub->code_begin()), p2i(rev_stub));\n+  }\n+#endif\n+\n@@ -224,1 +228,1 @@\n-    ICStub* old_stub = ICStub_from_destination_address(ic->stub_address());\n+    ICStub* old_stub = ICStub::from_destination_address(ic->stub_address());\n@@ -237,1 +241,1 @@\n-  ICStub* stub = ICStub_from_destination_address(ic->stub_address());\n+  ICStub* stub = ICStub::from_destination_address(ic->stub_address());\n@@ -243,1 +247,1 @@\n-  ICStub* stub = ICStub_from_destination_address(ic->stub_address());\n+  ICStub* stub = ICStub::from_destination_address(ic->stub_address());\n","filename":"src\/hotspot\/share\/code\/icBuffer.cpp","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -65,3 +65,14 @@\n-  \/\/ ICStub_from_destination_address looks up Stub* address from code entry address,\n-  \/\/ which unfortunately means the stub head should be at the same alignment as the code.\n-  static  int alignment()                        { return CodeEntryAlignment; }\n+  \/\/ To be cautious, we want to make sure that each ICStub is in a separate instruction\n+  \/\/ cache line. This would allow for piggybacking on instruction cache coherency on\n+  \/\/ some architectures to order the updates to ICStub and setting the destination to\n+  \/\/ the ICStub. Note that cache line size might be larger than CodeEntryAlignment\n+  \/\/ that is normal alignment for CodeBlobs.\n+  static int alignment()                         { return DEFAULT_CACHE_LINE_SIZE; }\n+\n+  \/\/ Aligning the code section is normally done for performance reasons, which is not\n+  \/\/ required for ICStubs, as these stubs are transitional. Setting code alignment\n+  \/\/ to CodeEntryAlignment would waste a lot of memory in ICBuffer. Aligning to\n+  \/\/ word size should be enough. This also offsets the costs of aligning the entire\n+  \/\/ ICStub to cache line (see above), as smaller code alignment would allow ICStub\n+  \/\/ to fit a _single_ cache line.\n+  static int code_alignment()                    { return HeapWordSize; }\n@@ -74,1 +85,1 @@\n-  address code_begin() const                     { return align_up((address)this + sizeof(ICStub), CodeEntryAlignment); }\n+  address code_begin() const                     { return align_up((address)this + sizeof(ICStub), code_alignment()); }\n@@ -91,1 +102,7 @@\n-  friend ICStub* ICStub_from_destination_address(address destination_address);\n+  static inline ICStub* from_destination_address(address destination_address) {\n+    ICStub* stub = (ICStub*) align_down(destination_address - sizeof(ICStub), alignment());\n+#ifdef ASSERT\n+    stub->verify();\n+#endif\n+    return stub;\n+  }\n@@ -94,9 +111,0 @@\n-\/\/ ICStub Creation\n-inline ICStub* ICStub_from_destination_address(address destination_address) {\n-  ICStub* stub = (ICStub*) (destination_address - align_up(sizeof(ICStub), CodeEntryAlignment));\n-  #ifdef ASSERT\n-  stub->verify();\n-  #endif\n-  return stub;\n-}\n-\n@@ -154,2 +162,0 @@\n-  static ICStub* new_ic_stub();\n-\n","filename":"src\/hotspot\/share\/code\/icBuffer.hpp","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -76,3 +76,9 @@\n-  _buffer_size     = blob->content_size();\n-  _buffer_limit    = blob->content_size();\n-  _stub_buffer     = blob->content_begin();\n+\n+  \/\/ The code blob alignment can be smaller than the requested stub alignment.\n+  \/\/ Make sure we put the stubs at their requested alignment by aligning the buffer base and limits.\n+  address aligned_start = align_up(blob->content_begin(), stub_alignment());\n+  address aligned_end = align_down(blob->content_end(), stub_alignment());\n+  int aligned_size = aligned_end - aligned_start;\n+  _buffer_size     = aligned_size;\n+  _buffer_limit    = aligned_size;\n+  _stub_buffer     = aligned_start;\n@@ -97,2 +103,5 @@\n-  _buffer_size = blob->content_size();\n-  _buffer_limit = blob->content_size();\n+  address aligned_start = align_up(blob->content_begin(), stub_alignment());\n+  address aligned_end = align_down(blob->content_end(), stub_alignment());\n+  int aligned_size = aligned_end - aligned_start;\n+  _buffer_size = aligned_size;\n+  _buffer_limit = aligned_size;\n","filename":"src\/hotspot\/share\/code\/stubs.cpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-\/\/ code_begin -->|--------|    |       <--- aligned by CodeEntryAlignment\n+\/\/ code_begin -->|--------|    |       <--- aligned by code_alignment()\n@@ -102,0 +102,1 @@\n+  virtual int     code_alignment() const                   = 0; \/\/ computes the code alignment\n@@ -130,0 +131,1 @@\n+    virtual int     code_alignment() const                 { return stub::code_alignment(); }      \\\n@@ -157,0 +159,1 @@\n+  void  check_stub_align(Stub* s) const          { assert(((intptr_t)s) % stub_alignment() == 0, \"incorrect stub alignment\"); }\n@@ -159,1 +162,1 @@\n-  Stub* stub_at(int i) const                     { check_index(i); return (Stub*)(_stub_buffer + i); }\n+  Stub* stub_at(int i) const                     { check_index(i); Stub* s = (Stub*)(_stub_buffer + i); check_stub_align(s); return s; }\n","filename":"src\/hotspot\/share\/code\/stubs.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+  static  int code_alignment()                   { return CodeEntryAlignment; }\n@@ -65,1 +66,1 @@\n-  address code_begin() const                     { return align_up((address)this + sizeof(InterpreterCodelet), CodeEntryAlignment); }\n+  address code_begin() const                     { return align_up((address)this + sizeof(InterpreterCodelet), code_alignment()); }\n","filename":"src\/hotspot\/share\/interpreter\/interpreter.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}