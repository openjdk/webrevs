{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.javac.PreviewFeature;\n@@ -148,0 +149,60 @@\n+    \/**\n+     * Writes a string representation of the specified object to this console's\n+     * output stream, terminates the line and then flushes the console.\n+     *\n+     * <p> The string representation of the specified object is obtained as if\n+     * by calling {@link String#valueOf(Object)}.\n+     *\n+     * @param  obj\n+     *         An object whose string representation is to be written.\n+     *\n+     * @return  This console\n+     *\n+     * @since 23\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n+    public Console println(Object obj) {\n+        throw newUnsupportedOperationException();\n+    }\n+\n+    \/**\n+     * Writes a string representation of the specified object to this console's\n+     * output stream and then flushes the console.\n+     *\n+     * <p> The string representation of the specified object is obtained as if\n+     * by calling {@link String#valueOf(Object)}.\n+     *\n+     * @param  obj\n+     *         An object whose string representation is to be written.\n+     *\n+     * @return  This console\n+     *\n+     * @since 23\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n+    public Console print(Object obj) {\n+        throw newUnsupportedOperationException();\n+    }\n+\n+    \/**\n+     * Writes a prompt as if by calling {@code print}, then reads a single line\n+     * of text from this console.\n+     *\n+     * @param  prompt\n+     *         A prompt string.\n+     *\n+     * @throws IOError\n+     *         If an I\/O error occurs.\n+     *\n+     * @return  A string containing the line read from the console, not\n+     *          including any line-termination characters, or {@code null}\n+     *          if an end of stream has been reached without having read\n+     *          any characters.\n+     *\n+     * @since 23\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n+    public String readln(String prompt) {\n+        throw newUnsupportedOperationException();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":61,"deletions":0,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.io;\n+\n+import jdk.internal.javac.PreviewFeature;\n+\n+\/**\n+ * A collection of static convenience methods that provide access to\n+ * {@linkplain System#console() system console} for implicitly declared classes.\n+ *\n+ * <p> Each of this class' methods throws {@link IOError} if the system console\n+ * is {@code null}; otherwise, the effect is as if a similarly-named method\n+ * had been called on that console.\n+ *\n+ * @since 23\n+ *\/\n+@PreviewFeature(feature = PreviewFeature.Feature.IMPLICIT_CLASSES)\n+public class IO {\n+\n+    private IO() {\n+        throw new Error(\"no instances\");\n+    }\n+\n+    \/**\n+     * Writes a string representation of the specified object to the system\n+     * console, terminates the line and then flushes that console.\n+     *\n+     * If {@code System.console()} returns {@code null}, throws {@code IOError}.\n+     * Otherwise, the effect is as if {@link Console#println(Object) println(obj)}\n+     * had been called on {@code System.console()}.\n+     *\n+     * @param obj the object to print\n+     *\/\n+    public static void println(Object obj) {\n+        con().println(obj);\n+    }\n+\n+    \/**\n+     * Writes a string representation of the specified object to the system\n+     * console and then flushes that console.\n+     *\n+     * If {@code System.console()} returns {@code null}, throws {@code IOError}.\n+     * Otherwise, the effect is as if {@link Console#print(Object) print(obj)}\n+     * had been called on {@code System.console()}.\n+     *\n+     * @param obj the object to print\n+     *\/\n+    public static void print(Object obj) {\n+        con().print(obj);\n+    }\n+\n+    \/**\n+     * Writes a prompt as if by calling {@code print}, then reads a single line\n+     * of text from the system console.\n+     *\n+     * If {@code System.console()} returns {@code null}, throws {@code IOError}.\n+     * Otherwise, the effect is as if {@link Console#readln(String) readln(prompt)}\n+     * had been called on {@code System.console()}.\n+     *\n+     * @param prompt the prompt string\n+     *\n+     * @return a string containing the line read from the system console, not\n+     * including any line-termination characters. Returns {@code null} if an\n+     * end of stream has been reached without having read any characters.\n+     *\/\n+    public static String readln(String prompt) {\n+        return con().readln(prompt);\n+    }\n+\n+    private static Console con() {\n+        var con = System.console();\n+        if (con != null) {\n+            return con;\n+        } else {\n+            throw new IOError(null);\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/io\/IO.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -82,0 +82,36 @@\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Console println(Object obj) {\n+        synchronized (writeLock) {\n+            delegate.println(obj);\n+        }\n+        return this;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\/\n+    @Override\n+    public Console print(Object obj) {\n+        synchronized (writeLock) {\n+            delegate.print(obj);\n+        }\n+        return this;\n+    }\n+\n+    \/**\n+     * {@inheritDoc}\n+     *\n+     * @throws IOError {@inheritDoc}\n+     *\/\n+    @Override\n+    public String readln(String prompt) {\n+        synchronized (writeLock) {\n+            synchronized (readLock) {\n+                return delegate.readln(prompt);\n+            }\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/ProxyingConsole.java","additions":37,"deletions":1,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,3 @@\n+    JdkConsole println(Object obj);\n+    JdkConsole print(Object obj);\n+    String readln(String prompt);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsole.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,0 +59,35 @@\n+    @Override\n+    public JdkConsole println(Object obj) {\n+        pw.println(obj);\n+        \/\/ automatic flushing covers println\n+        return this;\n+    }\n+\n+    @Override\n+    public JdkConsole print(Object obj) {\n+        pw.print(obj);\n+        pw.flush(); \/\/ automatic flushing does not cover print\n+        return this;\n+    }\n+\n+    @Override\n+    public String readln(String prompt) {\n+        String line = null;\n+        synchronized (writeLock) {\n+            synchronized(readLock) {\n+                if (!prompt.isEmpty()) {\n+                    pw.print(prompt);\n+                    pw.flush(); \/\/ automatic flushing does not cover print\n+                }\n+                try {\n+                    char[] ca = readline(false);\n+                    if (ca != null)\n+                        line = new String(ca);\n+                } catch (IOException x) {\n+                    throw new IOError(x);\n+                }\n+            }\n+        }\n+        return line;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleImpl.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -86,0 +86,24 @@\n+        @Override\n+        public JdkConsole println(Object obj) {\n+            writer().println(obj);\n+            writer().flush();\n+            return this;\n+        }\n+\n+        @Override\n+        public JdkConsole print(Object obj) {\n+            writer().print(obj);\n+            writer().flush();\n+            return this;\n+        }\n+\n+        @Override\n+        public String readln(String prompt) {\n+            try {\n+                initJLineIfNeeded();\n+                return jline.readLine(prompt);\n+            } catch (EndOfFileException eofe) {\n+                return null;\n+            }\n+        }\n+\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/JdkConsoleProviderImpl.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,0 +192,40 @@\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        public JdkConsole println(Object obj) {\n+            writer().println(obj);\n+            writer().flush();\n+            return this;\n+        }\n+\n+        \/**\n+         * {@inheritDoc}\n+         *\/\n+        @Override\n+        public JdkConsole print(Object obj) {\n+            writer().print(obj);\n+            writer().flush();\n+            return this;\n+        }\n+\n+        \/**\n+         * {@inheritDoc}\n+         *\n+         * @throws IOError {@inheritDoc}\n+         *\/\n+        @Override\n+        public String readln(String prompt) {\n+            try {\n+                return sendAndReceive(() -> {\n+                    remoteInput.write(Task.READ_LINE.ordinal());\n+                    char[] chars = prompt.toCharArray();\n+                    sendChars(chars, 0, chars.length);\n+                    char[] line = readChars();\n+                    return new String(line);\n+                });\n+            } catch (IOException ex) {\n+                throw new IOError(ex);\n+            }\n+        }\n+\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/execution\/impl\/ConsoleImpl.java","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -0,0 +1,153 @@\n+\/*\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jtreg.SkippedException;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.api.condition.OS;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+\n+\/*\n+ * @test\n+ * @bug 8305457\n+ * @summary java.io.IO tests\n+ * @library \/test\/lib\n+ * @run junit IO\n+ *\/\n+public class IO {\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"println\", \"print\"})\n+    public void printTest(String mode) throws Exception {\n+        var file = Path.of(System.getProperty(\"test.src\", \".\"), \"Output.java\")\n+                .toAbsolutePath().toString();\n+        var pb = ProcessTools.createTestJavaProcessBuilder(\"--enable-preview\", file, mode);\n+        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+        assertEquals(0, output.getExitValue());\n+        output.reportDiagnosticSummary();\n+        String out = output.getOutput();\n+        \/\/ The first half of the output is produced by Console, the second\n+        \/\/ half is produced by IO: those halves must match.\n+        \/\/ Executing Console and IO in the same VM (as opposed to\n+        \/\/ consecutive VM runs, which are cleaner) to be able to compare string\n+        \/\/ representation of objects.\n+        assertFalse(out.isBlank());\n+        assertEquals(out.substring(0, out.length() \/ 2),\n+                out.substring(out.length() \/ 2));\n+    }\n+\n+    \/*\n+     * Unlike printTest, which tests a _default_ console that is normally\n+     * jdk.internal.org.jline.JdkConsoleProviderImpl, this test tests\n+     * jdk.internal.io.JdkConsoleImpl. Those console implementations operate\n+     * in different conditions and, thus, are tested separately.\n+     *\n+     * To test jdk.internal.io.JdkConsoleImpl one needs to ensure that both\n+     * conditions are met:\n+     *\n+     *   - a non-existent console provider is requested\n+     *   - isatty is true\n+     *\n+     * To achieve isatty, the test currently uses the EXPECT(1) Unix command,\n+     * which does not work for Windows. Later, a library like pty4j or JPty\n+     * might be used instead EXPECT, to cover both Unix and Windows.\n+     *\/\n+    @ParameterizedTest\n+    @EnabledOnOs({OS.LINUX, OS.MAC})\n+    @ValueSource(strings = {\"println\", \"print\"})\n+    public void outputTestInteractive(String mode) throws Exception {\n+        var expect = Paths.get(\"\/usr\/bin\/expect\"); \/\/ os-specific path\n+        if (!Files.exists(expect) || !Files.isExecutable(expect)) {\n+            throw new SkippedException(\"'\" + expect + \"' not found\");\n+        }\n+        var testSrc = System.getProperty(\"test.src\", \".\");\n+        OutputAnalyzer output = ProcessTools.executeProcess(\n+                \"expect\",\n+                Path.of(testSrc, \"output.exp\").toAbsolutePath().toString(),\n+                System.getProperty(\"test.jdk\") + \"\/bin\/java\",\n+                \"--enable-preview\",\n+                \"-Djdk.console=gibberish\",\n+                Path.of(testSrc, \"Output.java\").toAbsolutePath().toString(),\n+                mode);\n+        assertEquals(0, output.getExitValue());\n+        output.reportDiagnosticSummary();\n+        String out = output.getOutput();\n+        \/\/ The first half of the output is produced by Console, the second\n+        \/\/ half is produced by IO: those halves must match.\n+        \/\/ Executing Console and IO in the same VM (as opposed to\n+        \/\/ consecutive VM runs, which are cleaner) to be able to compare string\n+        \/\/ representation of objects.\n+        assertFalse(out.isBlank());\n+        assertEquals(out.substring(0, out.length() \/ 2),\n+                out.substring(out.length() \/ 2));\n+    }\n+\n+    \/*\n+     * This tests simulates terminal interaction (isatty), to check that the\n+     * prompt is output.\n+     *\n+     * To simulate a terminal, the test currently uses the EXPECT(1) Unix\n+     * command, which does not work for Windows. Later, a library like pty4j\n+     * or JPty might be used instead EXPECT, to cover both Unix and Windows.\n+     *\/\n+    @Test\n+    @EnabledOnOs({OS.LINUX, OS.MAC})\n+    public void inputTestInteractive() throws Exception {\n+        var expect = Paths.get(\"\/usr\/bin\/expect\"); \/\/ os-specific path\n+        if (!Files.exists(expect) || !Files.isExecutable(expect)) {\n+            throw new SkippedException(\"'\" + expect + \"' not found\");\n+        }\n+        var testSrc = System.getProperty(\"test.src\", \".\");\n+        OutputAnalyzer output = ProcessTools.executeProcess(\n+                \"expect\",\n+                Path.of(testSrc, \"input.exp\").toAbsolutePath().toString(),\n+                System.getProperty(\"test.jdk\") + \"\/bin\/java\",\n+                \"--enable-preview\",\n+                Path.of(testSrc, \"Input.java\").toAbsolutePath().toString());\n+        output.reportDiagnosticSummary();\n+        assertEquals(0, output.getExitValue());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"println\", \"print\", \"input\"})\n+    public void nullConsole(String method) throws Exception {\n+        var file = Path.of(System.getProperty(\"test.src\", \".\"), \"Methods.java\")\n+                .toAbsolutePath().toString();\n+        var pb = ProcessTools.createTestJavaProcessBuilder(\"-Djdk.console=gibberish\",\n+                \"--enable-preview\", file, method);\n+        OutputAnalyzer output = ProcessTools.executeProcess(pb);\n+        output.reportDiagnosticSummary();\n+        assertEquals(1, output.getExitValue());\n+        output.shouldContain(\"Exception in thread \\\"main\\\" java.io.IOError\");\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/IO\/IO.java","additions":153,"deletions":0,"binary":false,"changes":153,"status":"added"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+\n+import static java.io.IO.readln;\n+\n+public class Input {\n+\n+    public static void main(String[] args) throws IOException {\n+        System.out.print(readln(\"?\"));\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/IO\/Input.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static java.io.IO.*;\n+\n+public class Methods {\n+\n+    public static void main(String[] args) {\n+        switch (args[0]) {\n+            case \"println\" -> println(\"hello\");\n+            case \"print\" -> print(\"hello\");\n+            case \"input\" -> readln(\"hello\");\n+            default -> throw new IllegalArgumentException(args[0]);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/IO\/Methods.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import static java.io.IO.*;\n+import java.util.function.Consumer;\n+\n+public class Output {\n+\n+    private static final Object[] OBJECTS = {\n+            null,\n+            false,\n+            (byte) 1,\n+            (short) 2,\n+            'a',\n+            3,\n+            4L,\n+            5f,\n+            6d,\n+            new Object(),\n+            \"%s\", \/\/ to test that print(ln) does not interpret its argument as a format string\n+            new char[]{'a'},\n+    };\n+\n+    public static void main(String[] args) {\n+        switch (args[0]) {\n+            case \"print\" -> {\n+                printObjects(obj -> System.console().format(\"%s\", obj).flush());\n+                printObjects(obj -> print(obj));\n+            }\n+            case \"println\" -> {\n+                printObjects(obj -> System.console().format(\"%s%n\", obj).flush());\n+                printObjects(obj -> println(obj));\n+            }\n+            default -> throw new IllegalArgumentException();\n+        }\n+    }\n+\n+    private static void printObjects(Consumer<Object> printer) {\n+        for (var obj : OBJECTS) {\n+            printer.accept(obj);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/IO\/Output.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+set java [lrange $argv 0 0]\n+set opts [lrange $argv 1 1]\n+set file [lrange $argv 2 2]\n+\n+spawn $java $opts $file\n+expect {\n+    -exact \"?\" {\n+        send \"hello\\r\"\n+    }\n+    timeout {\n+        puts \"timeout\"; exit 1\n+    }\n+}\n+expect eof\n","filename":"test\/jdk\/java\/io\/IO\/input.exp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,38 @@\n+#\n+# Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+#\n+# This code is free software; you can redistribute it and\/or modify it\n+# under the terms of the GNU General Public License version 2 only, as\n+# published by the Free Software Foundation.\n+#\n+# This code is distributed in the hope that it will be useful, but WITHOUT\n+# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+# version 2 for more details (a copy is included in the LICENSE file that\n+# accompanied this code).\n+#\n+# You should have received a copy of the GNU General Public License version\n+# 2 along with this work; if not, write to the Free Software Foundation,\n+# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+#\n+# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+# or visit www.oracle.com if you need additional information or have any\n+# questions.\n+#\n+\n+################################################################################\n+# This script does not expect\/verify anything and is only used to simulate tty #\n+################################################################################\n+\n+set java [lrange $argv 0 0]\n+set opt1 [lrange $argv 1 1]\n+set opt2 [lrange $argv 2 2]\n+set opt3 [lrange $argv 3 3]\n+set file [lrange $argv 4 4]\n+\n+# Use `noecho` below, otherwise, expect will output the expanded \"spawn ...\"\n+# command, which will interfere with asserting output from the java test\n+\n+spawn -noecho $java $opt1 $opt2 $opt3 $file\n+expect eof\n","filename":"test\/jdk\/java\/io\/IO\/output.exp","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"}]}