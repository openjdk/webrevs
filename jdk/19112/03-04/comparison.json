{"files":[{"patch":"@@ -158,1 +158,2 @@\n-     *         An object whose string representation is to be written.\n+     *         An object whose string representation is to be written,\n+     *         may be {@code null}.\n@@ -177,1 +178,2 @@\n-     *         An object whose string representation is to be written.\n+     *         An object whose string representation is to be written,\n+     *         may be {@code null}.\n@@ -193,1 +195,1 @@\n-     *         A prompt string.\n+     *         A prompt string, may be {@code null}.\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -54,2 +54,1 @@\n-     * If {@code System.console()} returns {@code null}, throws {@code IOError}.\n-     * Otherwise, the effect is as if {@link Console#println(Object) println(obj)}\n+     * <p> The effect is as if {@link Console#println(Object) println(obj)}\n@@ -58,1 +57,4 @@\n-     * @param obj the object to print\n+     * @param obj the object to print, may be {@code null}\n+     *\n+     * @throws IOError if {@code System.console()} returns {@code null},\n+     *                 or if an I\/O error occurs\n@@ -68,2 +70,1 @@\n-     * If {@code System.console()} returns {@code null}, throws {@code IOError}.\n-     * Otherwise, the effect is as if {@link Console#print(Object) print(obj)}\n+     * <p> The effect is as if {@link Console#print(Object) print(obj)}\n@@ -72,1 +73,4 @@\n-     * @param obj the object to print\n+     * @param obj the object to print, may be {@code null}\n+     *\n+     * @throws IOError if {@code System.console()} returns {@code null},\n+     *                 or if an I\/O error occurs\n@@ -82,2 +86,1 @@\n-     * If {@code System.console()} returns {@code null}, throws {@code IOError}.\n-     * Otherwise, the effect is as if {@link Console#readln(String) readln(prompt)}\n+     * <p> The effect is as if {@link Console#readln(String) readln(prompt)}\n@@ -86,1 +89,1 @@\n-     * @param prompt the prompt string\n+     * @param prompt the prompt string, may be {@code null}\n@@ -91,0 +94,3 @@\n+     *\n+     * @throws IOError if {@code System.console()} returns {@code null},\n+     *                 or if an I\/O error occurs\n","filename":"src\/java.base\/share\/classes\/java\/io\/IO.java","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -78,4 +78,2 @@\n-                if (!prompt.isEmpty()) {\n-                    pw.print(prompt);\n-                    pw.flush(); \/\/ automatic flushing does not cover print\n-                }\n+                pw.print(prompt);\n+                pw.flush(); \/\/ automatic flushing does not cover print\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/io\/JdkConsoleImpl.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -104,1 +104,1 @@\n-                return jline.readLine(prompt);\n+                return jline.readLine(prompt == null ? \"null\" : prompt);\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/JdkConsoleProviderImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,2 @@\n+import java.util.ArrayList;\n+import java.util.stream.Stream;\n@@ -31,1 +33,0 @@\n-import org.junit.jupiter.api.Test;\n@@ -35,0 +36,2 @@\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -124,1 +127,2 @@\n-    @Test\n+    @ParameterizedTest\n+    @MethodSource(\"args\")\n@@ -126,1 +130,1 @@\n-    public void inputTestInteractive() throws Exception {\n+    public void inputTestInteractive(String console, String prompt) throws Exception {\n@@ -132,6 +136,11 @@\n-        OutputAnalyzer output = ProcessTools.executeProcess(\n-                \"expect\",\n-                Path.of(testSrc, \"input.exp\").toAbsolutePath().toString(),\n-                System.getProperty(\"test.jdk\") + \"\/bin\/java\",\n-                \"--enable-preview\",\n-                Path.of(testSrc, \"Input.java\").toAbsolutePath().toString());\n+        var command = new ArrayList<String>();\n+        command.add(\"expect\");\n+        command.add(Path.of(testSrc, \"input.exp\").toAbsolutePath().toString());\n+        command.add(System.getProperty(\"test.jdk\") + \"\/bin\/java\");\n+        command.add(\"--enable-preview\");\n+        if (console != null)\n+            command.add(\"-Djdk.console=\" + console);\n+        command.add(Path.of(testSrc, \"Input.java\").toAbsolutePath().toString());\n+        command.add(prompt == null ? \"0\" : \"1\");\n+        command.add(String.valueOf(prompt));\n+        OutputAnalyzer output = ProcessTools.executeProcess(command.toArray(new String[]{}));\n@@ -142,0 +151,7 @@\n+    public static Stream<Arguments> args() {\n+        \/\/ TODO: add %s and maybe %%s after 8331535 has been fixed\n+        \/\/ cross product: consoles x prompts\n+        return Stream.of(null, \"gibberish\").flatMap(console -> Stream.of(null, \"?\")\n+                .map(prompt -> new String[]{console, prompt}).map(Arguments::of));\n+    }\n+\n","filename":"test\/jdk\/java\/io\/IO\/IO.java","additions":25,"deletions":9,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -31,1 +31,4 @@\n-        System.out.print(readln(\"?\"));\n+        if (args[0].equals(\"0\"))\n+            System.out.print(readln(null));\n+        else\n+            System.out.print(readln(args[1]));\n","filename":"test\/jdk\/java\/io\/IO\/Input.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -24,3 +24,1 @@\n-set java [lrange $argv 0 0]\n-set opts [lrange $argv 1 1]\n-set file [lrange $argv 2 2]\n+set prompt [lindex $argv $argc-1]\n@@ -28,1 +26,1 @@\n-spawn $java $opts $file\n+spawn {*}$argv\n@@ -30,1 +28,1 @@\n-    -exact \"?\" {\n+    -exact \"$prompt\" {\n","filename":"test\/jdk\/java\/io\/IO\/input.exp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,6 +28,0 @@\n-set java [lrange $argv 0 0]\n-set opt1 [lrange $argv 1 1]\n-set opt2 [lrange $argv 2 2]\n-set opt3 [lrange $argv 3 3]\n-set file [lrange $argv 4 4]\n-\n@@ -37,1 +31,1 @@\n-spawn -noecho $java $opt1 $opt2 $opt3 $file\n+spawn -noecho {*}$argv\n","filename":"test\/jdk\/java\/io\/IO\/output.exp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"}]}