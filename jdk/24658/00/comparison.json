{"files":[{"patch":"@@ -40,4 +40,8 @@\n-\/\/ A second static function `cmp(const IntrusiveRBNode* a, const IntrusiveRBNode* b)`\n-\/\/ used for `verify_self` and other extra validation can optionally be provided. This should return:\n-\/\/     - true if a < b\n-\/\/     - false otherwise\n+\/\/ Additional static functions used for extra validation can optionally be provided:\n+\/\/   `cmp(K a, K b)` which returns:\n+\/\/       - an int < 0 when a < b\n+\/\/       - an int == 0 when a == b\n+\/\/       - an int > 0 when a > b\n+\/\/   `cmp(const IntrusiveRBNode* a, const IntrusiveRBNode* b)` which returns:\n+\/\/       - true if a < b\n+\/\/       - false otherwise\n@@ -51,1 +55,1 @@\n-\/\/ COMPARATOR must have one of the static functions `cmp(K a, K b)` or `cmp(K a, const RBNode<K, V>* b)` which returns:\n+\/\/ COMPARATOR must have a static function `cmp(K a, K b)` which returns:\n@@ -201,1 +205,1 @@\n-  static constexpr bool IsKeyComparator = has_cmp_type<CMP, int, K, K>::value;\n+  static constexpr bool HasKeyComparator = has_cmp_type<CMP, int, K, K>::value;\n@@ -204,1 +208,1 @@\n-  static constexpr bool IsNodeComparator = has_cmp_type<CMP, int, K, const NodeType*>::value;\n+  static constexpr bool HasNodeComparator = has_cmp_type<CMP, int, K, const NodeType*>::value;\n@@ -209,1 +213,1 @@\n-  template <typename CMP = COMPARATOR, ENABLE_IF(IsKeyComparator<CMP>)>\n+  template <typename CMP = COMPARATOR, ENABLE_IF(HasKeyComparator<CMP> && !HasNodeComparator<CMP>)>\n@@ -214,1 +218,1 @@\n-  template <typename CMP = COMPARATOR, ENABLE_IF(IsNodeComparator<CMP>)>\n+  template <typename CMP = COMPARATOR, ENABLE_IF(HasNodeComparator<CMP>)>\n@@ -229,13 +233,3 @@\n-  template <typename CMP = COMPARATOR, ENABLE_IF(IsKeyComparator<CMP>)>\n-  void assert_leq(const K& a, const NodeType* b) const {\n-    assert(COMPARATOR::cmp(a, b->key()) <= 0, \"key not <= node\");\n-  }\n-\n-  template <typename CMP = COMPARATOR, ENABLE_IF(IsNodeComparator<CMP>)>\n-  void assert_leq(const K& a, const NodeType* b) const {\n-    assert(COMPARATOR::cmp(a, b) <= 0, \"key not <= node\");\n-  }\n-\n-  template <typename CMP = COMPARATOR, ENABLE_IF(IsKeyComparator<CMP>)>\n-  void assert_geq(const K& a, const NodeType* b) const {\n-    assert(COMPARATOR::cmp(a, b->key()) >= 0, \"key not >= node\");\n+  template <typename CMP = COMPARATOR, ENABLE_IF(!HasKeyComparator<CMP>)>\n+  bool key_leq(K a, K b) const {\n+    return true;\n@@ -244,3 +238,3 @@\n-  template <typename CMP = COMPARATOR, ENABLE_IF(IsNodeComparator<CMP>)>\n-  void assert_geq(const K& a, const NodeType* b) const {\n-    assert(COMPARATOR::cmp(a, b) >= 0, \"key not >= node\");\n+  template <typename CMP = COMPARATOR, ENABLE_IF(HasKeyComparator<CMP>)>\n+  bool key_leq(K a, K b) const {\n+    return COMPARATOR::cmp(a, b) <= 0;\n@@ -275,1 +269,1 @@\n-    static_assert(IsKeyComparator<COMPARATOR> || IsNodeComparator<COMPARATOR>,\n+    static_assert(HasKeyComparator<COMPARATOR> || HasNodeComparator<COMPARATOR>,\n@@ -428,1 +422,1 @@\n-  template <typename CMP = COMPARATOR, ENABLE_IF(IsKeyComparator<CMP> && !HasNodeVerifier<CMP>)>\n+  template <typename CMP = COMPARATOR, ENABLE_IF(HasKeyComparator<CMP> && !HasNodeVerifier<CMP>)>\n@@ -433,1 +427,1 @@\n-  template <typename CMP = COMPARATOR, ENABLE_IF(IsNodeComparator<CMP> && !HasNodeVerifier<CMP>)>\n+  template <typename CMP = COMPARATOR, ENABLE_IF(HasNodeComparator<CMP> && !HasKeyComparator<CMP> && !HasNodeVerifier<CMP>)>\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":22,"deletions":28,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -553,1 +553,1 @@\n-    assert(cmp((const NodeType*)new_node, (const NodeType*)new_node->_parent), \"new node not < parent\");\n+    assert(cmp((const NodeType*)new_node, (const NodeType*)new_node->parent()), \"new node not < parent\");\n@@ -555,1 +555,1 @@\n-    assert(cmp((const NodeType*)new_node->_parent, (const NodeType*)new_node->_right), \"new node not > parent\");\n+    assert(cmp((const NodeType*)new_node->parent(), (const NodeType*)new_node), \"new node not > parent\");\n@@ -609,0 +609,1 @@\n+  assert(key_leq(from, to), \"from must be less or equal to to\");\n@@ -618,7 +619,0 @@\n-  if (start != nullptr) {\n-    assert_leq(from, start);\n-    assert_geq(to, start);\n-  } else {\n-    assert(end == nullptr, \"end node found but not start node\");\n-  }\n-\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+  using RBTreeIntNode = RBNode<int, int>;\n+\n@@ -40,0 +42,4 @@\n+\n+    static bool cmp(const RBTreeIntNode* a, const RBTreeIntNode* b) {\n+      return a->key() < b->key();\n+    }\n@@ -76,1 +82,0 @@\n-  using RBTreeIntNode = RBNode<int, int>;\n@@ -96,0 +101,4 @@\n+    static int cmp(int a, int b) {\n+      return a - b;\n+    }\n+\n@@ -303,0 +312,36 @@\n+  void test_visit_outside_range() {\n+    RBTreeInt rbtree;\n+    using Node = RBTreeIntNode;\n+\n+    rbtree.upsert(2, 0);\n+    rbtree.upsert(5, 0);\n+\n+    rbtree.visit_range_in_order(0, 0, [&](const Node* x) {\n+      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n+    });\n+    rbtree.visit_range_in_order(0, 1, [&](const Node* x) {\n+      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n+    });\n+    rbtree.visit_range_in_order(1, 1, [&](const Node* x) {\n+      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n+    });\n+    rbtree.visit_range_in_order(3, 3, [&](const Node* x) {\n+      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n+    });\n+    rbtree.visit_range_in_order(3, 4, [&](const Node* x) {\n+      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n+    });\n+    rbtree.visit_range_in_order(4, 4, [&](const Node* x) {\n+      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n+    });\n+    rbtree.visit_range_in_order(6,6, [&](const Node* x) {\n+      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n+    });\n+    rbtree.visit_range_in_order(6, 7, [&](const Node* x) {\n+      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n+    });\n+    rbtree.visit_range_in_order(7, 7, [&](const Node* x) {\n+      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n+    });\n+  }\n+\n@@ -805,0 +850,4 @@\n+TEST_VM_F(RBTreeTest, TestVisitOutsideRange) {\n+  this->test_visit_outside_range();\n+}\n+\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":50,"deletions":1,"binary":false,"changes":51,"status":"modified"}]}