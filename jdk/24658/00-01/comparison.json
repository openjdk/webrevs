{"files":[{"patch":"@@ -553,1 +553,1 @@\n-    assert(cmp((const NodeType*)new_node, (const NodeType*)new_node->parent()), \"new node not < parent\");\n+    assert(cmp(static_cast<const NodeType*>(new_node), static_cast<const NodeType*>(new_node->parent())), \"new node not < parent\");\n@@ -555,1 +555,1 @@\n-    assert(cmp((const NodeType*)new_node->parent(), (const NodeType*)new_node), \"new node not > parent\");\n+    assert(cmp(static_cast<const NodeType*>(new_node->parent()), static_cast<const NodeType*>(new_node)), \"new node not > parent\");\n@@ -561,1 +561,1 @@\n-    assert(cmp((const NodeType*)new_node->_left, (const NodeType*)new_node), \"left child not < new node\");\n+    assert(cmp(static_cast<const NodeType*>(new_node->_left), static_cast<const NodeType*>(new_node)), \"left child not < new node\");\n@@ -565,1 +565,1 @@\n-    assert(cmp((const NodeType*)new_node, (const NodeType*)new_node->_right), \"right child not > new node\");\n+    assert(cmp(static_cast<const NodeType*>(new_node), static_cast<const NodeType*>(new_node->_right)), \"right child not > new node\");\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -319,27 +319,8 @@\n-    rbtree.visit_range_in_order(0, 0, [&](const Node* x) {\n-      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n-    });\n-    rbtree.visit_range_in_order(0, 1, [&](const Node* x) {\n-      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n-    });\n-    rbtree.visit_range_in_order(1, 1, [&](const Node* x) {\n-      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n-    });\n-    rbtree.visit_range_in_order(3, 3, [&](const Node* x) {\n-      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n-    });\n-    rbtree.visit_range_in_order(3, 4, [&](const Node* x) {\n-      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n-    });\n-    rbtree.visit_range_in_order(4, 4, [&](const Node* x) {\n-      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n-    });\n-    rbtree.visit_range_in_order(6,6, [&](const Node* x) {\n-      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n-    });\n-    rbtree.visit_range_in_order(6, 7, [&](const Node* x) {\n-      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n-    });\n-    rbtree.visit_range_in_order(7, 7, [&](const Node* x) {\n-      EXPECT_TRUE(false) << \"Range should not visit nodes\";\n-    });\n+    constexpr int test_cases[9][2] = {{0, 0}, {0, 1}, {1, 1}, {3, 3}, {3, 4},\n+                                      {4, 4}, {6, 6}, {6, 7}, {7, 7}};\n+\n+    for (const int (&test_case)[2] : test_cases) {\n+      rbtree.visit_range_in_order(test_case[0], test_case[1], [&](const Node* x) {\n+        FAIL() << \"Range should not visit nodes\";\n+      });\n+    }\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":8,"deletions":27,"binary":false,"changes":35,"status":"modified"}]}