{"files":[{"patch":"@@ -2940,1 +2940,1 @@\n-            if (ex == null && f != null && !f.isDone())\n+            if (f != null && !f.isDone())\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CompletableFuture.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,49 @@\n+\/*\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8303742\n+ * @summary CompletableFuture.orTimeout can leak memory if completed exceptionally\n+ * @run junit\/othervm -Xmx128m CompletableFutureOrTimeoutExceptionallyTest\n+ *\/\n+\n+import java.time.Duration;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.junit.jupiter.api.Test;\n+\n+class CompletableFutureOrTimeoutExceptionallyTest {\n+    \/**\n+     * Test that orTimeout task is cancelled if the CompletableFuture is completed Exceptionally\n+     *\/\n+    @Test\n+    void testOrTimeoutWithCompleteExceptionallyDoesNotLeak() throws Exception {\n+        var startTime = System.currentTimeMillis();\n+        var testRunTime = Duration.ofSeconds(10).toMillis();\n+        while ((System.currentTimeMillis() - startTime) < testRunTime) {\n+            new CompletableFuture<>().orTimeout(12, TimeUnit.HOURS).completeExceptionally(new RuntimeException(\"This is fine\"));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/concurrent\/CompletableFuture\/CompletableFutureOrTimeoutExceptionallyTest.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"added"}]}