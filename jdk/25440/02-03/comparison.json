{"files":[{"patch":"@@ -2549,1 +2549,1 @@\n-  if (type == TypeInt::SHORT || type == TypeInt::CHAR) {\n+  if (type->isa_int() == TypeInt::SHORT || type->isa_int() == TypeInt::CHAR) {\n@@ -2557,0 +2557,1 @@\n+  \/\/ Can be truncated:\n@@ -2568,0 +2569,2 @@\n+  \/\/ While shifts have subword vectorized forms, they require knowing the precise type of input loads so they are\n+  \/\/ considered non-truncating.\n@@ -2572,0 +2575,1 @@\n+  \/\/ Cannot be truncated:\n@@ -2585,1 +2589,1 @@\n-    break;\n+    return false;\n@@ -2587,1 +2591,4 @@\n-    assert(false, \"Unexpected node: %s\", NodeClassNames[in->Opcode()]);\n+    \/\/ If this assert it hit, that means that we need to determine if the node can be safely truncated,\n+    \/\/ and then add it to the list of truncating nodes or the list of non-truncating ones just above.\n+    \/\/ In product, we just return false, which is always correct.\n+    assert(false, \"Unexpected node in SuperWord truncation: %s\", NodeClassNames[in->Opcode()]);\n","filename":"src\/hotspot\/share\/opto\/superword.cpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"}]}