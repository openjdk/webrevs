{"files":[{"patch":"@@ -138,1 +138,1 @@\n-    if (mask->Opcode() == Op_LShiftI && phase->type(mask->in(1))->is_int()->is_con()) {\n+    if (mask->Opcode() == Op_LShiftI && phase->type(mask->in(1))->isa_int() && phase->type(mask->in(1))->is_int()->is_con()) {\n@@ -156,1 +156,1 @@\n-    if (mask->Opcode() == Op_LShiftL && phase->type(mask->in(1))->is_long()->is_con()) {\n+    if (mask->Opcode() == Op_LShiftL && phase->type(mask->in(1))->isa_long() && phase->type(mask->in(1))->is_long()->is_con()) {\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8351645\n+ * @summary C2: ExpandBitsNode::Ideal hits assert because of TOP input\n+ * @library \/test\/lib \/\n+ * @run driver compiler.intrinsics.TestCompressExpandTopInput\n+ *\/\n+\n+package compiler.intrinsics;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.verify.*;\n+import java.util.stream.IntStream;\n+import java.util.stream.LongStream;\n+\n+public class TestCompressExpandTopInput {\n+\n+    public static int [] array_I0 = IntStream.range(0, 10000).toArray();\n+    public static int [] array_I1 = IntStream.range(10000, 20000).toArray();\n+    public static long [] array_L0 = LongStream.range(0, 10000).toArray();\n+    public static long [] array_L1 = LongStream.range(10000, 20000).toArray();\n+\n+    public static int oneI = 1;\n+    public static long oneL = 1L;\n+\n+    public static long [] GOLD_COMPRESS_LONG = testCompressBitsLong();\n+    public static long [] GOLD_EXPAND_LONG = testExpandBitsLong();\n+    public static int [] GOLD_COMPRESS_INT = testCompressBitsInt();\n+    public static int [] GOLD_EXPAND_INT = testExpandBitsInt();\n+\n+    @Test\n+    public static long[] testExpandBitsLong() {\n+        long[] out = new long[10000];\n+        for (int i = 0; i < out.length; i++) {\n+            long y = array_L0[i] % oneL;\n+            long x = (array_L1[i] | 4294967298L) << -7640610671680100954L;\n+            out[i] = Long.expand(y, x);\n+        }\n+        return out;\n+    }\n+\n+    @Check(test=\"testExpandBitsLong\")\n+    public static void checkExpandBitsLong(long [] actual) {\n+        for (int i = 0; i < GOLD_EXPAND_LONG.length; i++) {\n+            Verify.checkEQ(GOLD_EXPAND_LONG[i], actual[i]);\n+        }\n+    }\n+\n+    @Test\n+    public static long[] testCompressBitsLong() {\n+        long[] out = new long[10000];\n+        for (int i = 0; i < out.length; i++) {\n+            long y = array_L0[i] % oneL;\n+            long x = (array_L1[i] | 4294967298L) << -7640610671680100954L;\n+            out[i] = Long.compress(y, x);\n+        }\n+        return out;\n+    }\n+\n+    @Check(test=\"testCompressBitsLong\")\n+    public static void checkCompressBitsLong(long [] actual) {\n+        for (int i = 0; i < GOLD_COMPRESS_LONG.length; i++) {\n+            Verify.checkEQ(GOLD_COMPRESS_LONG[i], actual[i]);\n+        }\n+    }\n+\n+    @Test\n+    public static int[] testExpandBitsInt() {\n+        int[] out = new int[10000];\n+        for (int i = 0; i < out.length; i++) {\n+            int y = array_I0[i] % oneI;\n+            int x = (array_I1[i] | 22949672) << -76406101;\n+            out[i] = Integer.expand(y, x);\n+        }\n+        return out;\n+    }\n+\n+    @Check(test=\"testExpandBitsInt\")\n+    public static void checkExpandBitsInt(int [] actual) {\n+        for (int i = 0; i < GOLD_EXPAND_INT.length; i++) {\n+            Verify.checkEQ(GOLD_EXPAND_INT[i], actual[i]);\n+        }\n+    }\n+\n+    @Test\n+    public static int[] testCompressBitsInt() {\n+        int[] out = new int[10000];\n+        for (int i = 0; i < out.length; i++) {\n+            int y = array_I0[i] % oneI;\n+            int x = (array_I1[i] | 429497) << -764061068;\n+            out[i] = Integer.compress(y, x);\n+        }\n+        return out;\n+    }\n+\n+    @Check(test=\"testCompressBitsInt\")\n+    public static void checkCompressBitsInt(int [] actual) {\n+        for (int i = 0; i < GOLD_COMPRESS_INT.length; i++) {\n+            Verify.checkEQ(GOLD_COMPRESS_INT[i], actual[i]);\n+        }\n+    }\n+\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"-XX:+StressIGVN\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestCompressExpandTopInput.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -1,70 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8351645\n- * @summary C2: ExpandBitsNode::Ideal hits assert because of TOP input\n- * @run main\/othervm -Xbatch -Xmx128m compiler.intrinsics.Test8351645\n- *\/\n-\n-package compiler.intrinsics;\n-\n-public class Test8351645 {\n-    public static long[] array_0 = fill(new long[10000]);\n-    public static long[] array_2 = fill(new long[10000]);\n-\n-    public static long[] fill(long[] a) {\n-        for (int i = 0; i < a.length; i++) {\n-            a[i] = 1;\n-        }\n-        return a;\n-    }\n-\n-    public static long one = 1L;\n-\n-    static final long[] GOLD = test();\n-\n-    public static long[] test() {\n-        long[] out = new long[10000];\n-        for (int i = 0; i < out.length; i++) {\n-            long y = array_0[i] % one;\n-            long x = (array_2[i] | 4294967298L) << -7640610671680100954L;\n-            out[i] = Long.expand(y, x);\n-        }\n-        return out;\n-    }\n-\n-    public static void main(String[] args) {\n-        for (int i = 0; i < 10_000; i++) {\n-            test();\n-        }\n-\n-        long[] res = test();\n-        for (int i = 0; i < 10_000; i++) {\n-            if (res[i] != GOLD[i]) {\n-                throw new RuntimeException(\"value mismatch: \" + res[i] + \" vs \" + GOLD[i]);\n-            }\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/Test8351645.java","additions":0,"deletions":70,"binary":false,"changes":70,"status":"deleted"}]}