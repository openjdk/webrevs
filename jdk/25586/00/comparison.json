{"files":[{"patch":"@@ -196,1 +196,1 @@\n-    if (mask->Opcode() == Op_LShiftI && phase->type(mask->in(1))->is_int()->is_con()) {\n+    if (mask->Opcode() == Op_LShiftI && phase->type(mask->in(1))->isa_int() && phase->type(mask->in(1))->is_int()->is_con()) {\n@@ -213,1 +213,1 @@\n-    if (mask->Opcode() == Op_LShiftL && phase->type(mask->in(1))->is_long()->is_con()) {\n+    if (mask->Opcode() == Op_LShiftL && phase->type(mask->in(1))->isa_long() && phase->type(mask->in(1))->is_long()->is_con()) {\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8351645\n+ * @summary C2: ExpandBitsNode::Ideal hits assert because of TOP input\n+ * @run main\/othervm -Xbatch -Xmx128m compiler.intrinsics.Test8351645\n+ *\/\n+\n+package compiler.intrinsics;\n+\n+public class Test8351645 {\n+    public static long[] array_0 = fill(new long[10000]);\n+    public static long[] array_2 = fill(new long[10000]);\n+\n+    public static long[] fill(long[] a) {\n+        for (int i = 0; i < a.length; i++) {\n+            a[i] = 1;\n+        }\n+        return a;\n+    }\n+\n+    public static long one = 1L;\n+\n+    static final long[] GOLD = test();\n+\n+    public static long[] test() {\n+        long[] out = new long[10000];\n+        for (int i = 0; i < out.length; i++) {\n+            long y = array_0[i] % one;\n+            long x = (array_2[i] | 4294967298L) << -7640610671680100954L;\n+            out[i] = Long.expand(y, x);\n+        }\n+        return out;\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10_000; i++) {\n+            test();\n+        }\n+\n+        long[] res = test();\n+        for (int i = 0; i < 10_000; i++) {\n+            if (res[i] != GOLD[i]) {\n+                throw new RuntimeException(\"value mismatch: \" + res[i] + \" vs \" + GOLD[i]);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/Test8351645.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"}]}