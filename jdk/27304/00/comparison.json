{"files":[{"patch":"@@ -1079,5 +1079,0 @@\n-\n-  if (AllowArchivingWithJavaAgent) {\n-    aot_log_warning(aot)(\"This %s was created with AllowArchivingWithJavaAgent. It should be used \"\n-            \"for testing purposes only and should not be used in a production environment\", CDSConfig::type_of_archive_being_loaded());\n-  }\n","filename":"src\/hotspot\/share\/cds\/aotMetaspace.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -473,4 +473,0 @@\n-\n-  \/\/ This is an old flag used by CDS regression testing only. It doesn't apply\n-  \/\/ to the AOT workflow.\n-  FLAG_SET_ERGO(AllowArchivingWithJavaAgent, false);\n@@ -719,7 +715,0 @@\n-  if (is_dumping_classic_static_archive() && AOTClassLinking) {\n-    if (JvmtiAgentList::disable_agent_list()) {\n-      FLAG_SET_ERGO(AllowArchivingWithJavaAgent, false);\n-      log_warning(cds)(\"Disabled all JVMTI agents with -Xshare:dump -XX:+AOTClassLinking\");\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -66,4 +66,0 @@\n-  product(bool, AllowArchivingWithJavaAgent, false, DIAGNOSTIC,             \\\n-          \"Allow Java agent to be run with CDS dumping (not applicable\"     \\\n-          \" to AOT\")                                                        \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/cds\/cds_globals.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -399,5 +399,0 @@\n-    if (AllowArchivingWithJavaAgent) {\n-      aot_log_warning(aot)(\"This %s was created with AllowArchivingWithJavaAgent. It should be used \"\n-                       \"for testing purposes only and should not be used in a production environment\",\n-                       CDSConfig::type_of_archive_being_loaded());\n-    }\n","filename":"src\/hotspot\/share\/cds\/dynamicArchive.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -262,1 +262,0 @@\n-  _allow_archiving_with_java_agent = AllowArchivingWithJavaAgent;\n@@ -319,1 +318,0 @@\n-  st->print_cr(\"- allow_archiving_with_java_agent:%d\", _allow_archiving_with_java_agent);\n@@ -2054,15 +2052,0 @@\n-  \/\/ Java agents are allowed during run time. Therefore, the following condition is not\n-  \/\/ checked: (!_allow_archiving_with_java_agent && AllowArchivingWithJavaAgent)\n-  \/\/ Note: _allow_archiving_with_java_agent is set in the shared archive during dump time\n-  \/\/ while AllowArchivingWithJavaAgent is set during the current run.\n-  if (_allow_archiving_with_java_agent && !AllowArchivingWithJavaAgent) {\n-    AOTMetaspace::report_loading_error(\"The setting of the AllowArchivingWithJavaAgent is different \"\n-                                          \"from the setting in the %s.\", file_type);\n-    return false;\n-  }\n-\n-  if (_allow_archiving_with_java_agent) {\n-    aot_log_warning(aot)(\"This %s was created with AllowArchivingWithJavaAgent. It should be used \"\n-            \"for testing purposes only and should not be used in a production environment\", file_type);\n-  }\n-\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -138,1 +138,0 @@\n-  bool   _allow_archiving_with_java_agent; \/\/ setting of the AllowArchivingWithJavaAgent option\n","filename":"src\/hotspot\/share\/cds\/filemap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1309,18 +1309,0 @@\n-\n-#if INCLUDE_CDS_JAVA_HEAP\n-  if (CDSConfig::is_dumping_heap() && AllowArchivingWithJavaAgent && result->defined_by_boot_loader() &&\n-      classpath_index < 0 && redefined) {\n-    \/\/ When dumping the heap (which happens only during static dump), classes for the built-in\n-    \/\/ loaders are always loaded from known locations (jimage, classpath or modulepath),\n-    \/\/ so classpath_index should always be >= 0.\n-    \/\/ The only exception is when a java agent is used during dump time (for testing\n-    \/\/ purposes only). If a class is transformed by the agent, the AOTClassLocation of\n-    \/\/ this class may point to an unknown location. This may break heap object archiving,\n-    \/\/ which requires all the boot classes to be from known locations. This is an\n-    \/\/ uncommon scenario (even in test cases). Let's simply disable heap object archiving.\n-    ResourceMark rm;\n-    log_warning(aot)(\"heap objects cannot be written because class %s maybe modified by ClassFileLoadHook.\",\n-                     result->external_name());\n-    CDSConfig::disable_heap_dumping();\n-  }\n-#endif \/\/ INCLUDE_CDS_JAVA_HEAP\n","filename":"src\/hotspot\/share\/classfile\/classLoader.cpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -579,2 +579,0 @@\n-\/\/ CDS dumping does not support native JVMTI agent.\n-\/\/ CDS dumping supports Java agent if the AllowArchivingWithJavaAgent diagnostic option is specified.\n@@ -584,1 +582,1 @@\n-    \/\/ Agents are completely disabled when -XX:AOTMode=create\n+    \/\/ Agents are completely disabled when -XX:AOTMode=create (see cdsConfig.cpp)\n@@ -586,12 +584,3 @@\n-    return;\n-  }\n-\n-  \/\/ This is classic CDS limitations -- we disallow agents by default. They can be used\n-  \/\/ with -XX:+AllowArchivingWithJavaAgent, but that should be used for diagnostic purposes only.\n-  assert(agent != nullptr, \"invariant\");\n-  if (!agent->is_instrument_lib()) {\n-    vm_exit_during_cds_dumping(\"CDS dumping does not support native JVMTI agent, name\", agent->name());\n-  }\n-  if (!AllowArchivingWithJavaAgent) {\n-    vm_exit_during_cds_dumping(\n-      \"Must enable AllowArchivingWithJavaAgent in order to run Java agent during CDS dumping\");\n+  } else if (CDSConfig::is_dumping_classic_static_archive() || CDSConfig::is_dumping_dynamic_archive()) {\n+    \/\/ Classic CDS (static or dynamic dump). Disallow agents.\n+    vm_exit_during_cds_dumping(\"JVMTI agents are not allowed when dumping CDS archives\");\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgent.cpp","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -430,3 +430,0 @@\n- -runtime\/cds\/appcds\/javaldr\/ExceptionDuringDumpAtObjectsInitPhase.java \\\n- -runtime\/cds\/appcds\/javaldr\/GCSharedStringsDuringDump.java \\\n- -runtime\/cds\/appcds\/javaldr\/LockDuringDump.java \\\n@@ -454,1 +451,0 @@\n- -runtime\/cds\/appcds\/LambdaWithJavaAgent.java \\\n@@ -498,1 +494,0 @@\n-  runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/DumpingWithJavaAgent.java \\\n@@ -547,1 +542,0 @@\n- -runtime\/cds\/appcds\/dynamicArchive\/RedefineCallerClassTest.java \\\n@@ -549,3 +543,0 @@\n- -runtime\/cds\/appcds\/javaldr\/ExceptionDuringDumpAtObjectsInitPhase.java \\\n- -runtime\/cds\/appcds\/javaldr\/GCDuringDump.java \\\n- -runtime\/cds\/appcds\/javaldr\/LockDuringDump.java \\\n@@ -567,1 +558,0 @@\n- -runtime\/cds\/appcds\/LambdaWithJavaAgent.java \\\n","filename":"test\/hotspot\/jtreg\/TEST.groups","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1,95 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8276126\n- * @summary Test static dumping with java agent transforming a class loaded\n- *          by the boot class loader.\n- * @requires vm.cds.write.archived.java.heap\n- * @requires vm.jvmti\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @compile test-classes\/Hello.java\n- * @compile test-classes\/TransformBootClass.java\n- * @run driver LambdaWithJavaAgent\n- *\/\n-\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class LambdaWithJavaAgent {\n-\n-    public static String agentClasses[] = {\n-        TransformBootClass.class.getName(),\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-        String mainClass = Hello.class.getName();\n-        String namePrefix = \"lambda-with-java-agent\";\n-        JarBuilder.build(namePrefix, mainClass);\n-\n-        String appJar = TestCommon.getTestJar(namePrefix + \".jar\");\n-        String classList = namePrefix + \".list\";\n-        String archiveName = namePrefix + \".jsa\";\n-\n-        String agentJar =\n-            ClassFileInstaller.writeJar(\"TransformBootClass.jar\",\n-                                        ClassFileInstaller.Manifest.fromSourceFile(\"test-classes\/TransformBootClass.mf\"),\n-                                        agentClasses);\n-        String useJavaAgent = \"-javaagent:\" + agentJar + \"=jdk\/internal\/math\/FDBigInteger\";\n-\n-        \/\/ dump class list\n-        CDSTestUtils.dumpClassList(classList, \"-cp\", appJar, mainClass);\n-\n-        \/\/ create archive with the class list\n-        CDSOptions opts = (new CDSOptions())\n-            .addPrefix(\"-XX:ExtraSharedClassListFile=\" + classList,\n-                       \"-cp\", appJar,\n-                       \"-XX:+UnlockDiagnosticVMOptions\",\n-                       \"-XX:+AllowArchivingWithJavaAgent\",\n-                       useJavaAgent,\n-                       \"-Xlog:class+load,cds+class=debug,aot,cds\")\n-            .setArchiveName(archiveName);\n-        OutputAnalyzer output = CDSTestUtils.createArchiveAndCheck(opts);\n-        output.shouldContain(\"heap objects cannot be written because class jdk.internal.math.FDBigInteger maybe modified by ClassFileLoadHook\")\n-              .shouldContain(\"Skipping jdk\/internal\/math\/FDBigInteger: Unsupported location\")\n-              .shouldMatch(\".class.load.*jdk.internal.math.FDBigInteger.*source.*modules\");\n-\n-        \/\/ run with archive\n-        CDSOptions runOpts = (new CDSOptions())\n-            .addPrefix(\"-cp\", appJar, \"-Xlog:class+load=debug,aot=debug,cds=debug,class+path=debug\",\n-                       \"-XX:+UnlockDiagnosticVMOptions\",\n-                       \"-XX:+AllowArchivingWithJavaAgent\",\n-                       useJavaAgent)\n-            .setArchiveName(archiveName)\n-            .setUseVersion(false)\n-            .addSuffix(mainClass);\n-        output = CDSTestUtils.runWithArchive(runOpts);\n-        TestCommon.checkExecReturn(output, 0, true,\n-            \"Hello source: shared objects file\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/LambdaWithJavaAgent.java","additions":0,"deletions":95,"binary":false,"changes":95,"status":"deleted"},{"patch":"@@ -1,80 +0,0 @@\n-\/*\n- * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8323950\n- * @summary Transforming an interface of an archived lambda proxy class should not\n- *          crash the VM. The lambda proxy class should be regenerated during runtime.\n- * @requires vm.cds\n- * @requires vm.cds.default.archive.available\n- * @requires vm.jvmti\n- * @requires vm.flagless\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @compile test-classes\/SimpleTest.java\n- * @compile test-classes\/TransformBootClass.java\n- * @run driver TransformInterfaceOfLambda\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class TransformInterfaceOfLambda {\n-\n-    public static String agentClasses[] = {\n-        TransformBootClass.class.getName(),\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-        String mainClass = SimpleTest.class.getName();\n-        String namePrefix = \"transform-interface-of-lambda\";\n-        JarBuilder.build(namePrefix, mainClass);\n-\n-        String appJar = TestCommon.getTestJar(namePrefix + \".jar\");\n-\n-        String agentJar =\n-            ClassFileInstaller.writeJar(\"TransformBootClass.jar\",\n-                                        ClassFileInstaller.Manifest.fromSourceFile(\"test-classes\/TransformBootClass.mf\"),\n-                                        agentClasses);\n-        String useJavaAgent = \"-javaagent:\" + agentJar + \"=java\/util\/function\/IntFunction\";\n-\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n-            \"-cp\", appJar, \"-Xlog:class+load,cds=debug\",\n-            \"-XX:+UnlockDiagnosticVMOptions\",\n-            \"-XX:+AllowArchivingWithJavaAgent\",\n-            useJavaAgent,\n-            mainClass);\n-        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n-        System.out.println(out.getStdout());\n-        out.shouldHaveExitValue(0)\n-           \/\/ the class loaded by the SimpleTest should be from the archive\n-           .shouldContain(\"[class,load] java.text.SimpleDateFormat source: shared objects file\")\n-           \/\/ the IntFunction is the interface which is being transformed. The\n-           \/\/ interface is a super type of the following lambda proxy class.\n-           .shouldContain(\"Transforming class java\/util\/function\/IntFunction\")\n-           \/\/ the lambda proxy class should be regenerated\n-           .shouldMatch(\".class.load.*sun.util.locale.provider.LocaleProviderAdapter[$][$]Lambda\/0x.*source:.*sun.util.locale.provider.LocaleProviderAdapter\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TransformInterfaceOfLambda.java","additions":0,"deletions":80,"binary":false,"changes":80,"status":"deleted"},{"patch":"@@ -29,1 +29,1 @@\n- * @summary -javaagent should be disabled with -Xshare:dump -XX:+AOTClassLinking\n+ * @summary -javaagent is not allowed when creating static CDS archive\n@@ -37,0 +37,12 @@\n+\/**\n+ * @test id=dynamic\n+ * @bug 8362561\n+ * @summary -javaagent is not allowed when creating dynamic CDS archive\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build JavaAgent JavaAgentTransformer Util\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar app.jar JavaAgentApp JavaAgentApp$ShouldBeTransformed\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. JavaAgent DYNAMIC\n+ *\/\n+\n@@ -67,1 +79,7 @@\n-        new Tester().run(args);\n+        Tester t = new Tester();\n+        if (args[0].equals(\"STATIC\") || args[0].equals(\"DYNAMIC\")) {\n+            \/\/ Some child processes may have non-zero exits. These are checked by\n+            \/\/ checkExecutionForStaticWorkflow() and checkExecutionForDynamicWorkflow\n+            t.setCheckExitValue(false);\n+        }\n+        t.run(args);\n@@ -83,2 +101,0 @@\n-                \"-XX:+UnlockDiagnosticVMOptions\",\n-                \"-XX:+AllowArchivingWithJavaAgent\",\n@@ -102,1 +118,1 @@\n-            } else {\n+            } else if (isStaticWorkflow()) {\n@@ -104,0 +120,2 @@\n+            } else {\n+                checkExecutionForDynamicWorkflow(out, runMode);\n@@ -136,0 +154,4 @@\n+            case RunMode.TRAINING:\n+                out.shouldContain(agentPremainFinished);\n+                out.shouldHaveExitValue(0);\n+                break;\n@@ -137,2 +159,19 @@\n-                out.shouldContain(\"Disabled all JVMTI agents with -Xshare:dump -XX:+AOTClassLinking\");\n-                out.shouldNotContain(agentPremainFinished);\n+                out.shouldContain(\"JVMTI agents are not allowed when dumping CDS archives\");\n+                out.shouldNotHaveExitValue(0);\n+                break;\n+            case RunMode.PRODUCTION:\n+                out.shouldContain(\"Unable to use shared archive: invalid archive\");\n+                out.shouldNotHaveExitValue(0);\n+                break;\n+            }\n+        }\n+\n+        public void checkExecutionForDynamicWorkflow(OutputAnalyzer out, RunMode runMode) throws Exception {\n+            switch (runMode) {\n+            case RunMode.DUMP_DYNAMIC:\n+                out.shouldContain(\"JVMTI agents are not allowed when dumping CDS archives\");\n+                out.shouldNotHaveExitValue(0);\n+                break;\n+            case RunMode.PRODUCTION:\n+                out.shouldContain(\"Unable to use shared archive: invalid archive\");\n+                out.shouldNotHaveExitValue(0);\n@@ -140,2 +179,0 @@\n-            default:\n-                out.shouldContain(agentPremainFinished);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/JavaAgent.java","additions":46,"deletions":9,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8276184\n- * @summary If the caller class is redefined during dump time, the caller class\n- *          and its lambda proxy class should not be archived.\n- * @requires vm.cds\n- * @requires vm.jvmti\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- *          \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/test-classes\n- * @build jdk.test.whitebox.WhiteBox OldProvider\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run driver RedefineClassHelper\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -Xbootclasspath\/a:. RedefineCallerClassTest\n- *\/\n-\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class RedefineCallerClassTest extends DynamicArchiveTestBase {\n-    static String mainClass = RedefineCallerClass.class.getName();\n-\n-    static String providerClass = OldProvider.class.getName();\n-\n-    static String sharedClasses[] = {\n-        mainClass,\n-        \"SimpleLambda\", \/\/ caller class will be redefined in RedefineCallerClass\n-        providerClass,  \/\/ inteface with class file major version < 50\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler\",\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$FileManagerWrapper\",\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$FileManagerWrapper$1\",\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$SourceFile\",\n-        \"jdk\/test\/lib\/compiler\/InMemoryJavaCompiler$ClassFile\"\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-        runTest(RedefineCallerClassTest::test);\n-    }\n-\n-    static void test() throws Exception {\n-        String topArchiveName = getNewArchiveName();\n-        String appJar = ClassFileInstaller.writeJar(\"redefine_caller_class.jar\", sharedClasses);\n-\n-        String[] mainArgs = {\n-            \"redefineCaller\", \/\/ redefine caller class only\n-            \"useOldInf\",      \/\/ use old interface only\n-            \"both\"            \/\/ both of the above\n-        };\n-\n-        for (String mainArg : mainArgs) {\n-            String[] options = {\n-                \"-Xlog:class+load,cds\",\n-                \"-XX:+UnlockDiagnosticVMOptions\",\n-                \"-XX:+AllowArchivingWithJavaAgent\",\n-                \"-javaagent:redefineagent.jar\",\n-                \"-cp\", appJar, mainClass, mainArg\n-            };\n-\n-            dump(topArchiveName, options)\n-                .assertNormalExit(output -> {\n-                    output.shouldHaveExitValue(0);\n-                    if (mainArg.equals(\"both\") || mainArg.equals(\"useOldInf\")) {\n-                        output.shouldContain(\"Skipping OldProvider: Old class has been linked\")\n-                              .shouldMatch(\"Skipping.SimpleLambda[$][$]Lambda.*0x.*:.*Old.class.has.been.linked\");\n-                    }\n-                    if (mainArg.equals(\"both\") || mainArg.equals(\"redefineCaller\")) {\n-                        output.shouldContain(\"Skipping SimpleLambda: Has been redefined\");\n-                    }\n-                });\n-\n-            run(topArchiveName, options)\n-                .assertNormalExit(output -> {\n-                    output.shouldHaveExitValue(0)\n-                          .shouldContain(\"RedefineCallerClass source: shared objects file (top)\")\n-                          .shouldMatch(\".class.load. SimpleLambda[$][$]Lambda.*\/0x.*source:.*SimpleLambda\");\n-                    if (mainArg.equals(\"both\") || mainArg.equals(\"useOldInf\")) {\n-                        output.shouldMatch(\".class.load. OldProvider.source:.*redefine_caller_class.jar\");\n-                    }\n-                    if (mainArg.equals(\"both\") || mainArg.equals(\"redefineCaller\")) {\n-                        output.shouldMatch(\".class.load. SimpleLambda.source:.*redefine_caller_class.jar\");\n-                    }\n-                });\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/dynamicArchive\/RedefineCallerClassTest.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"},{"patch":"@@ -1,87 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary Out of memory When dumping the CDS archive\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @requires vm.cds.write.archived.java.heap\n- * @requires vm.jvmti\n- * @run driver ExceptionDuringDumpAtObjectsInitPhase\n- *\/\n-\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class ExceptionDuringDumpAtObjectsInitPhase {\n-    public static String appClasses[] = {\n-        Hello.class.getName(),\n-    };\n-    public static String agentClasses[] = {\n-        GCDuringDumpTransformer.class.getName(),\n-        GCDuringDumpTransformer.MyCleaner.class.getName(),\n-    };\n-\n-    public static void main(String[] args) throws Throwable {\n-        String agentJar =\n-            ClassFileInstaller.writeJar(\"GCDuringDumpTransformer.jar\",\n-                                        ClassFileInstaller.Manifest.fromSourceFile(\"GCDuringDumpTransformer.mf\"),\n-                                        agentClasses);\n-\n-        String appJar =\n-            ClassFileInstaller.writeJar(\"GCDuringDumpApp.jar\", appClasses);\n-\n-        String gcLog = Boolean.getBoolean(\"test.cds.verbose.gc\") ?\n-            \"-Xlog:gc*=info,gc+region=trace,gc+alloc+region=debug\" : \"-showversion\";\n-\n-        \/\/ 1. Test with exception\n-        System.out.println(\"1. Exception during dump\");\n-        TestCommon.dump(appJar,\n-                        TestCommon.list(Hello.class.getName()),\n-                        \"-XX:+UnlockDiagnosticVMOptions\",\n-                        \"-XX:+AllowArchivingWithJavaAgent\",\n-                        \"-javaagent:\" + agentJar,\n-                        \"-Xlog:cds,class+load\",\n-                        \"-Xmx32m\",\n-                        \"-Dtest.with.exception=true\",\n-                        gcLog).shouldNotHaveExitValue(0)\n-                              .shouldContain(\"Preload Warning: Cannot find jdk\/internal\/math\/FDBigInteger\")\n-                              .shouldContain(\"Unexpected exception, use -Xlog:aot,cds,exceptions=trace for detail\");\n-\n-        \/\/ 2. Test with OOM\n-        System.out.println(\"2. OOM during dump\");\n-        TestCommon.dump(appJar,\n-                        TestCommon.list(Hello.class.getName()),\n-                        \"-XX:+UnlockDiagnosticVMOptions\",\n-                        \"-XX:+AllowArchivingWithJavaAgent\",\n-                        \"-javaagent:\" + agentJar,\n-                        \"-Dtest.with.oom=true\",\n-                        \"-Xlog:cds,class+load\",\n-                        \"-Xmx12M\",\n-                        gcLog).shouldNotHaveExitValue(0)\n-                              .shouldContain(\"Out of memory. Please run with a larger Java heap, current MaxHeapSize\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/ExceptionDuringDumpAtObjectsInitPhase.java","additions":0,"deletions":87,"binary":false,"changes":87,"status":"deleted"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary When dumping the CDS archive, try to cause garbage collection while classes are being loaded.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @requires vm.cds\n- * @requires vm.jvmti\n- * @run driver GCDuringDump\n- *\/\n-\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class GCDuringDump {\n-    public static String appClasses[] = {\n-        Hello.class.getName(),\n-    };\n-    public static String agentClasses[] = {\n-        GCDuringDumpTransformer.class.getName(),\n-        GCDuringDumpTransformer.MyCleaner.class.getName(),\n-    };\n-\n-    public static void main(String[] args) throws Throwable {\n-        String agentJar =\n-            ClassFileInstaller.writeJar(\"GCDuringDumpTransformer.jar\",\n-                                        ClassFileInstaller.Manifest.fromSourceFile(\"GCDuringDumpTransformer.mf\"),\n-                                        agentClasses);\n-\n-        String appJar =\n-            ClassFileInstaller.writeJar(\"GCDuringDumpApp.jar\", appClasses);\n-\n-        String gcLog = Boolean.getBoolean(\"test.cds.verbose.gc\") ?\n-            \"-Xlog:gc*=info,gc+region=trace,gc+alloc+region=debug\" : \"-showversion\";\n-\n-        for (int i=0; i<3; i++) {\n-            \/\/ i = 0 -- run without agent = no extra GCs\n-            \/\/ i = 1 -- run with agent = cause extra GCs\n-            \/\/ i = 2 -- run with agent = cause extra GCs + use java.lang.ref.Cleaner\n-\n-            String extraArg = (i == 0) ? \"-showversion\" : \"-javaagent:\" + agentJar;\n-            String extraOption = (i == 0) ? \"-showversion\" : \"-XX:+AllowArchivingWithJavaAgent\";\n-            String extraOption2 = (i != 2) ? \"-showversion\" : \"-Dtest.with.cleaner=true\";\n-\n-            TestCommon.testDump(appJar, TestCommon.list(Hello.class.getName()),\n-                                \"-XX:+UnlockDiagnosticVMOptions\", extraOption, extraOption2,\n-                                \"-Xlog:exceptions=trace\",\n-                                extraArg, \"-Xmx32m\", gcLog);\n-\n-            TestCommon.run(\n-                \"-cp\", appJar,\n-                \"-Xmx32m\",\n-                \"-Xlog:cds=info\",\n-                \"-XX:+UnlockDiagnosticVMOptions\", extraOption,\n-                gcLog,\n-                Hello.class.getName())\n-              .assertNormalExit();\n-        }\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/GCDuringDump.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,130 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary Similar to GCDuringDumping.java, this test adds the -XX:SharedArchiveConfigFile\n- *          option for testing the interaction with GC and shared strings.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @requires vm.cds.write.archived.java.heap\n- * @requires vm.jvmti\n- * @build jdk.test.whitebox.WhiteBox\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n- * @run driver\/timeout=480 GCSharedStringsDuringDump\n- *\/\n-\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.OutputStreamWriter;\n-import java.io.PrintWriter;\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.cds.CDSTestUtils;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class GCSharedStringsDuringDump {\n-    static {\n-        \/\/ EpsilonGC will run out of memory.\n-        CDSOptions.disableRuntimePrefixForEpsilonGC();\n-    }\n-    public static String appClasses[] = {\n-        GCSharedStringsDuringDumpWb.class.getName(),\n-    };\n-    public static String agentClasses[] = {\n-        GCDuringDumpTransformer.class.getName(),\n-    };\n-\n-    public static void main(String[] args) throws Throwable {\n-        String agentJar =\n-            ClassFileInstaller.writeJar(\"GCDuringDumpTransformer.jar\",\n-                                        ClassFileInstaller.Manifest.fromSourceFile(\"GCDuringDumpTransformer.mf\"),\n-                                        agentClasses);\n-\n-        String appJar =\n-            ClassFileInstaller.writeJar(\"GCSharedStringsDuringDumpApp.jar\", appClasses);\n-\n-        String gcLog = Boolean.getBoolean(\"test.cds.verbose.gc\") ?\n-            \"-Xlog:gc*=info,gc+region=trace,gc+alloc+region=debug\" : \"-showversion\";\n-\n-        String sharedArchiveCfgFile =\n-            CDSTestUtils.getOutputDir() + File.separator + \"GCSharedStringDuringDump_gen.txt\";\n-        try (FileOutputStream fos = new FileOutputStream(sharedArchiveCfgFile)) {\n-            PrintWriter out = new PrintWriter(new OutputStreamWriter(fos));\n-            out.println(\"VERSION: 1.0\");\n-            out.println(\"@SECTION: String\");\n-            out.println(\"31: shared_test_string_unique_14325\");\n-            for (int i=0; i<100000; i++) {\n-                String s = \"generated_string \" + i;\n-                out.println(s.length() + \": \" + s);\n-            }\n-            out.close();\n-        }\n-\n-        JarBuilder.build(true, \"WhiteBox\", \"jdk\/test\/whitebox\/WhiteBox\");\n-        String whiteBoxJar = TestCommon.getTestJar(\"WhiteBox.jar\");\n-        String bootClassPath = \"-Xbootclasspath\/a:\" + whiteBoxJar;\n-\n-        for (int i=0; i<2; i++) {\n-            \/\/ i = 0 -- run without agent = no extra GCs\n-            \/\/ i = 1 -- run with agent = cause extra GCs\n-\n-            String extraArg = (i == 0) ? \"-showversion\" : \"-javaagent:\" + agentJar;\n-            String extraOption = (i == 0) ? \"-showversion\" : \"-XX:+AllowArchivingWithJavaAgent\";\n-            OutputAnalyzer output = TestCommon.dump(\n-                                appJar, TestCommon.list(GCSharedStringsDuringDumpWb.class.getName()),\n-                                bootClassPath, extraArg, \"-Xmx32m\", gcLog,\n-                                \"-XX:SharedArchiveConfigFile=\" + sharedArchiveCfgFile,\n-                                \"-XX:+UnlockDiagnosticVMOptions\", extraOption);\n-\n-            if (output.getStdout().contains(\"Too many string space regions\") ||\n-                output.getStderr().contains(\"Unable to write archive heap memory regions\") ||\n-                output.getStdout().contains(\"Try increasing NewSize\") ||\n-                !output.getStdout().contains(\"oa0 space:\") ||\n-                output.getExitValue() != 0) {\n-                \/\/ Try again with larger heap and NewSize, this should increase the\n-                \/\/ G1 heap region size to 2M\n-                TestCommon.testDump(\n-                    appJar, TestCommon.list(GCSharedStringsDuringDumpWb.class.getName()),\n-                    bootClassPath, extraArg, \"-Xmx8g\", \"-XX:NewSize=8m\", gcLog,\n-                    \"-XX:SharedArchiveConfigFile=\" + sharedArchiveCfgFile,\n-                    \"-XX:+UnlockDiagnosticVMOptions\", extraOption);\n-            }\n-\n-            TestCommon.run(\n-                \"-cp\", appJar,\n-                bootClassPath,\n-                extraArg,\n-                \"-Xlog:cds=info,class+path=info\",\n-                \"-Xmx32m\",\n-                \"-Xlog:cds=info\",\n-                \"-XX:+UnlockDiagnosticVMOptions\",\n-                extraOption,\n-                \"-XX:+WhiteBoxAPI\",\n-                gcLog,\n-                GCSharedStringsDuringDumpWb.class.getName())\n-              .assertNormalExit();\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/GCSharedStringsDuringDump.java","additions":0,"deletions":130,"binary":false,"changes":130,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8249276\n- * @summary When dumping the CDS archive, try to lock some objects. These objects should be archived\n- *          without the locking bits in the markWord.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- * @requires vm.cds\n- * @requires vm.jvmti\n- * @modules java.instrument\n- * @run driver LockDuringDump\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class LockDuringDump {\n-    public static String appClasses[] = {\n-        LockDuringDumpApp.class.getName(),\n-    };\n-    public static String agentClasses[] = {\n-        LockDuringDumpAgent.class.getName(),\n-    };\n-\n-    private static final String MANIFEST =\n-        \"Manifest-Version: 1.0\\nPremain-Class: LockDuringDumpAgent\\n\";\n-\n-    public static void main(String[] args) throws Throwable {\n-        String agentJar =\n-            ClassFileInstaller.writeJar(\"LockDuringDumpAgent.jar\",\n-                                        ClassFileInstaller.Manifest.fromString(MANIFEST),\n-                                        agentClasses);\n-\n-        String appJar =\n-            ClassFileInstaller.writeJar(\"LockDuringDumpApp.jar\", appClasses);\n-\n-        for (int i = 0; i < 3; i++) {\n-            \/\/ i = 0 -- dump without agent\n-            \/\/ i = 1 -- dump with agent\n-\n-            String agentArg   = (i == 0) ? \"-showversion\" : \"-javaagent:\" + agentJar;\n-            String agentArg2  = (i == 0) ? \"-showversion\" : \"-XX:+AllowArchivingWithJavaAgent\";\n-\n-            OutputAnalyzer out =\n-                TestCommon.testDump(appJar, TestCommon.list(LockDuringDumpApp.class.getName()),\n-                                    \"-XX:+UnlockDiagnosticVMOptions\",\n-                                    agentArg, agentArg2);\n-            if (i != 0 && !out.getStdout().contains(\"LockDuringDumpAgent timeout\")) {\n-                out.shouldContain(\"Let's hold the lock on the literal string\");\n-            }\n-\n-            TestCommon.run(\n-                \"-cp\", appJar,\n-                \"-XX:+UnlockDiagnosticVMOptions\", agentArg2,\n-                LockDuringDumpApp.class.getName())\n-              .assertNormalExit(\"I am able to lock the literal string\");\n-        }\n-    }\n-}\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/javaldr\/LockDuringDump.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/\/ Application which loads BoundMethodHandle species classes like the following:\n-\/\/ java\/lang\/invoke\/BoundMethodHandle$Species_LLLL\n-import java.lang.management.ManagementFactory;\n-\n-public class AppWithBMH {\n-  public static void main(String[] args) {\n-    System.out.println(\"Hello world!\");\n-    ManagementFactory.getGarbageCollectorMXBeans();\n-  }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/AppWithBMH.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -1,129 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-\/*\n- * @test\n- * @summary CDS dumping with java agent.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @requires vm.cds\n- * @requires vm.jvmti\n- * @build SimpleAgent Hello AppWithBMH\n- * @run main\/othervm DumpingWithJavaAgent\n- *\/\n-\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class DumpingWithJavaAgent {\n-    public static String appClasses[] = {\n-        \"Hello\",\n-        \"AppWithBMH\",\n-    };\n-    public static String agentClasses[] = {\n-        \"SimpleAgent\",\n-        \"SimpleAgent$1\"\n-    };\n-\n-    public static String warningMessages[] = {\n-        \"This shared archive file was created with AllowArchivingWithJavaAgent\",\n-        \"It should be used for testing purposes only and should not be used in a production environment\",\n-    };\n-\n-    public static String errorMessage =\n-        \"The setting of the AllowArchivingWithJavaAgent is different from the setting in the shared archive file.\";\n-\n-    public static String diagnosticOption = \"-XX:+AllowArchivingWithJavaAgent\";\n-\n-    public static void main(String[] args) throws Throwable {\n-        String agentJar =\n-            ClassFileInstaller.writeJar(\"SimpleAgent.jar\",\n-                                        ClassFileInstaller.Manifest.fromSourceFile(\"SimpleAgent.mf\"),\n-                                        agentClasses);\n-\n-        String appJar =\n-            ClassFileInstaller.writeJar(\"DumpingWithJavaAgent.jar\", appClasses);\n-\n-        \/\/ CDS dumping with a java agent performing class transformation on BoundMethodHandle$Species classes\n-        OutputAnalyzer output = TestCommon.testDump(appJar, TestCommon.list(\"AppWithBMH\"),\n-            \"-XX:+UnlockDiagnosticVMOptions\", diagnosticOption,\n-            \"-javaagent:\" + agentJar + \"=doTransform\",\n-            \"AppWithBMH\");\n-        TestCommon.checkDump(output);\n-        output.shouldContain(warningMessages[0]);\n-        output.shouldContain(warningMessages[1]);\n-        output.shouldContain(\"inside SimpleAgent\");\n-\n-        \/\/ CDS dumping with a java agent with the AllowArchvingWithJavaAgent diagnostic option.\n-        output = TestCommon.testDump(appJar, TestCommon.list(\"Hello\"),\n-            \"-XX:+UnlockDiagnosticVMOptions\", diagnosticOption,\n-            \"-javaagent:\" + agentJar);\n-        TestCommon.checkDump(output);\n-        output.shouldContain(warningMessages[0]);\n-        output.shouldContain(warningMessages[1]);\n-        output.shouldContain(\"inside SimpleAgent\");\n-\n-        \/\/ Using the archive with the AllowArchvingWithJavaAgent diagnostic option.\n-        output = TestCommon.exec(\n-            appJar,\n-            \"-Xlog:class+load=trace\",\n-            \"-XX:+UnlockDiagnosticVMOptions\", diagnosticOption,\n-            \"Hello\");\n-        if (!TestCommon.isUnableToMap(output)) {\n-            output.shouldHaveExitValue(0);\n-            output.shouldContain(warningMessages[0]);\n-            output.shouldContain(warningMessages[1]);\n-            output.shouldContain(\"[class,load] Hello source: shared objects file\");\n-        }\n-\n-        \/\/ Using the archive with -Xshare:on without the diagnostic option.\n-        \/\/ VM should exit with an error message.\n-        output = TestCommon.exec(\n-            appJar,\n-            \"Hello\");\n-        output.shouldHaveExitValue(1);\n-        output.shouldContain(errorMessage);\n-\n-        \/\/ Using the archive with -Xshare:auto without the diagnostic option.\n-        \/\/ VM should continue execution with a warning message. The archive\n-        \/\/ will not be used.\n-        output = TestCommon.execAuto(\n-            \"-cp\", appJar,\n-            \"-Xlog:class+load=trace,cds=info\",\n-            \"Hello\");\n-        if (!TestCommon.isUnableToMap(output)) {\n-            output.shouldHaveExitValue(0);\n-            output.shouldContain(errorMessage);\n-            output.shouldMatch(\".class.load.* Hello source:.*DumpingWithJavaAgent.jar\");\n-\n-        \/\/ CDS dumping with a java agent without the AllowArchvingWithJavaAgent diagnostic option.\n-        \/\/ VM will exit with an error message.\n-        output = TestCommon.dump(appJar, TestCommon.list(\"Hello\"),\n-            \"-javaagent:\" + agentJar);\n-        }\n-        output.shouldContain(\"Must enable AllowArchivingWithJavaAgent in order to run Java agent during CDS dumping\")\n-            .shouldHaveExitValue(1);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/DumpingWithJavaAgent.java","additions":0,"deletions":129,"binary":false,"changes":129,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @summary CDS dumping with JVMTI agent.\n- * @requires vm.cds\n- * @requires vm.jvmti\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n- * @compile ..\/..\/test-classes\/Hello.java\n- * @run main\/othervm\/native DumpingWithJvmtiAgent\n- *\/\n-\n-import java.io.File;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-public class DumpingWithJvmtiAgent {\n-    private static final String AGENT_LIB_ONLOAD = \"AddToSystemCLSearchOnLoad\";\n-\n-    public static void main(String[] args) throws Exception {\n-        String appJar = JarBuilder.getOrCreateHelloJar();\n-\n-        \/\/ CDS dump with a JVMTI agent with the AllowArchivingWithJavaAgent option.\n-        \/\/ vm should exit with an error message.\n-        OutputAnalyzer out = TestCommon.dump(\n-           appJar,\n-           TestCommon.list(\"Hello\"),\n-           \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+AllowArchivingWithJavaAgent\",\n-           \"-agentlib:\" + AGENT_LIB_ONLOAD + \"=\" + appJar,\n-           \"-Djava.library.path=\" + System.getProperty(\"java.library.path\"));\n-        out.shouldContain(\"CDS dumping does not support native JVMTI agent, name: \" + AGENT_LIB_ONLOAD)\n-           .shouldHaveExitValue(1);\n-\n-        \/\/ CDS dump with a JVMTI agent without the AllowArchivingWithJavaAgent option.\n-        \/\/ vm should exit with an error message.\n-        out = TestCommon.dump(\n-           appJar,\n-           TestCommon.list(\"Hello\"),\n-           \"-agentlib:\" + AGENT_LIB_ONLOAD + \"=\" + appJar,\n-           \"-Djava.library.path=\" + System.getProperty(\"java.library.path\"));\n-        out.shouldContain(\"CDS dumping does not support native JVMTI agent, name: \" + AGENT_LIB_ONLOAD)\n-           .shouldHaveExitValue(1);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/DumpingWithJvmtiAgent.java","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,61 +0,0 @@\n-\/*\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\/*\n- * @test\n- * @bug 8261090\n- * @summary Dump old class with java agent.\n- * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n- * @requires vm.cds\n- * @requires vm.jvmti\n- * @compile ..\/..\/test-classes\/OldSuper.jasm\n- * @compile SimpleAgent.java\n- * @run main\/othervm OldClassWithJavaAgent\n- *\/\n-\n-import jdk.test.lib.cds.CDSOptions;\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.helpers.ClassFileInstaller;\n-\n-public class OldClassWithJavaAgent {\n-    public static String appClasses[] = {\"OldSuper\"};\n-    public static String agentClasses[] = {\"SimpleAgent\"};\n-    public static String diagnosticOption = \"-XX:+AllowArchivingWithJavaAgent\";\n-    public static void main(String[] args) throws Throwable {\n-        String agentJar =\n-            ClassFileInstaller.writeJar(\"SimpleAgent.jar\",\n-                                        ClassFileInstaller.Manifest.fromSourceFile(\"SimpleAgent.mf\"),\n-                                        agentClasses);\n-\n-        String appJar =\n-            ClassFileInstaller.writeJar(\"OldClassWithJavaAgent.jar\", appClasses);\n-        OutputAnalyzer output = TestCommon.testDump(appJar, TestCommon.list(\"OldSuper\"),\n-            \"-Xlog:cds=debug,class+load\",\n-            \"-XX:+UnlockDiagnosticVMOptions\", diagnosticOption,\n-            \"-javaagent:\" + agentJar + \"=OldSuper\");\n-\n-        \/\/ The java agent will load and link the class. We will skip old classes\n-        \/\/ which have been linked during CDS dump.\n-        output.shouldContain(\"Skipping OldSuper: Old class has been linked\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/OldClassWithJavaAgent.java","additions":0,"deletions":61,"binary":false,"changes":61,"status":"deleted"},{"patch":"@@ -1,52 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-import java.lang.instrument.ClassFileTransformer;\n-import java.lang.instrument.Instrumentation;\n-import java.security.ProtectionDomain;\n-import java.util.Arrays;\n-\n-public class SimpleAgent {\n-    public static void premain(String agentArg, Instrumentation instrumentation) throws Exception {\n-        System.out.println(\"inside SimpleAgent\");\n-        if (agentArg == null) return;\n-        if (agentArg.equals(\"OldSuper\")) {\n-            \/\/ Only load the class if the test requires it.\n-            Class<?> cls = Class.forName(\"OldSuper\", true, ClassLoader.getSystemClassLoader());\n-        } else if (agentArg.equals(\"doTransform\")) {\n-            ClassFileTransformer transformer = new ClassFileTransformer() {\n-            @Override\n-            public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain, byte[] classfileBuffer) {\n-                if (loader == SimpleAgent.class.getClassLoader()) {\n-                    \/\/ Transform only classes loaded by the apploader.\n-                    System.out.printf(\"%n Transforming %s\", className);\n-                    return Arrays.copyOf(classfileBuffer, classfileBuffer.length);\n-                } else {\n-                    return null;\n-                }\n-               }\n-             };\n-             instrumentation.addTransformer(transformer);\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/SimpleAgent.java","additions":0,"deletions":52,"binary":false,"changes":52,"status":"deleted"},{"patch":"@@ -1,2 +0,0 @@\n-Manifest-Version: 1.0\n-Premain-Class: SimpleAgent\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/SimpleAgent.mf","additions":0,"deletions":2,"binary":false,"changes":2,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#include <stdio.h>\n-#include <string.h>\n-#include <jvmti.h>\n-\n-#ifdef __cplusplus\n-extern \"C\" {\n-#endif\n-\n-    static jvmtiEnv *jvmti = NULL;\n-\n-    JNIEXPORT jint JNICALL Agent_OnLoad(JavaVM *jvm, char *options, void *reserved) {\n-        int err = (*jvm)->GetEnv(jvm, (void**) &jvmti, JVMTI_VERSION_9);\n-        if (err != JNI_OK) {\n-            return JNI_ERR;\n-        }\n-        err = (*jvmti)->AddToSystemClassLoaderSearch(jvmti, (const char*)options);\n-        if (err != JVMTI_ERROR_NONE) {\n-            return JNI_ERR;\n-        }\n-        return JNI_OK;\n-    }\n-\n-#ifdef __cplusplus\n-}\n-#endif\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/dumpingWithAgent\/libAddToSystemCLSearchOnLoad.c","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,1 +70,0 @@\n-                \"-XX:+AllowArchivingWithJavaAgent\",\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jvmti\/redefineClasses\/OldClassAndRedefineClass.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}