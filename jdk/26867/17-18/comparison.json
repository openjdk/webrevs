{"files":[{"patch":"@@ -726,31 +726,0 @@\n-\/\/ For tracking usage based on allocations, it should be the case that:\n-\/\/ * The sum of regions::used == heap::used\n-\/\/ * The sum of a generation's regions::used == generation::used\n-\/\/ * The sum of a generation's humongous regions::free == generation::humongous_waste\n-\/\/ These invariants are checked by the verifier on GC safepoints.\n-\/\/\n-\/\/ Additional notes:\n-\/\/ * When a mutator's allocation request causes a region to be retired, the\n-\/\/   free memory left in that region is considered waste. It does not contribute\n-\/\/   to the usage, but it _does_ contribute to allocation rate.\n-\/\/ * The bottom of a PLAB must be aligned on card size. In some cases this will\n-\/\/   require padding in front of the PLAB (a filler object). Because this padding\n-\/\/   is included in the region's used memory we include the padding in the usage\n-\/\/   accounting as waste.\n-\/\/ * Mutator allocations are used to compute an allocation rate.\n-\/\/ * There are three sources of waste:\n-\/\/  1. The padding used to align a PLAB on card size\n-\/\/  2. Region's free is less than minimum TLAB size and is retired\n-\/\/  3. The unused portion of memory in the last region of a humongous object\n-void ShenandoahHeap::increase_used(const ShenandoahAllocRequest& req) {\n-  size_t actual_bytes = req.actual_size() * HeapWordSize;\n-  size_t wasted_bytes = req.waste() * HeapWordSize;\n-  ShenandoahGeneration* generation = generation_for(req.affiliation());\n-\n-  if (req.is_gc_alloc()) {\n-    assert(wasted_bytes == 0 || req.type() == ShenandoahAllocRequest::_alloc_plab, \"Only PLABs have waste\");\n-  } else {\n-    assert(req.is_mutator_alloc(), \"Expected mutator alloc here\");\n-  }\n-}\n-\n@@ -1005,4 +974,0 @@\n-  \/\/ This is called regardless of the outcome of the allocation to account\n-  \/\/ for any waste created by retiring regions with this request.\n-  increase_used(req);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":0,"deletions":35,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -234,2 +234,0 @@\n-  void increase_used(const ShenandoahAllocRequest& req);\n-\n@@ -237,5 +235,0 @@\n-  void increase_used(ShenandoahGeneration* generation, size_t bytes);\n-  void decrease_used(ShenandoahGeneration* generation, size_t bytes);\n-  void increase_humongous_waste(ShenandoahGeneration* generation, size_t bytes);\n-  void decrease_humongous_waste(ShenandoahGeneration* generation, size_t bytes);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}