{"files":[{"patch":"@@ -931,0 +931,12 @@\n+\n+size_t ShenandoahGeneration::bytes_allocated_since_gc_start() const {\n+  assert(_type == ShenandoahGenerationType::NON_GEN, \"OO sanity\");\n+  assert(!ShenandoahHeap::heap()->mode()->is_generational(), \"NON_GEN implies not generational\");\n+  return _free_set->get_bytes_allocated_since_gc_start();\n+}\n+\n+size_t ShenandoahGeneration::get_affiliated_region_count() const {\n+  assert(_type == ShenandoahGenerationType::NON_GEN, \"OO sanity\");\n+  return _free_set->global_affiliated_regions();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -134,0 +134,1 @@\n+  virtual size_t get_affiliated_region_count() const;\n@@ -149,13 +150,1 @@\n-  size_t bytes_allocated_since_gc_start() const override {\n-    if (_type == ShenandoahGenerationType::YOUNG) {\n-      size_t result = _free_set->get_bytes_allocated_since_gc_start();\n-      return result;\n-    } else if (_type == ShenandoahGenerationType::NON_GEN) {\n-      assert(!ShenandoahHeap::heap()->mode()->is_generational(), \"NON_GEN implies not generational\");\n-      size_t result = _free_set->get_bytes_allocated_since_gc_start();\n-      return result;\n-    } else {\n-      size_t result = 0;\n-      return result;\n-    }\n-  }\n+  virtual size_t bytes_allocated_since_gc_start() const override;\n@@ -222,18 +211,0 @@\n-  size_t get_affiliated_region_count() const {\n-    size_t result;\n-    switch (_type) {\n-    case ShenandoahGenerationType::OLD:\n-      result = _free_set->old_affiliated_regions();\n-      break;\n-    case ShenandoahGenerationType::YOUNG:\n-      result = _free_set->young_affiliated_regions();\n-      break;\n-    case ShenandoahGenerationType::GLOBAL:\n-    case ShenandoahGenerationType::NON_GEN:\n-    default:\n-      result = _free_set->global_affiliated_regions();\n-      break;\n-    }\n-    return result;\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":2,"deletions":31,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -53,0 +53,20 @@\n+size_t ShenandoahGlobalGeneration::bytes_allocated_since_gc_start() const {\n+#ifdef ASSERT\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  bool is_generational = heap->mode()->is_generational();\n+  assert((is_generational && (type() == ShenandoahGenerationType::GLOBAL)) ||\n+         (!is_generational && (type() == ShenandoahGenerationType::NON_GEN)), \"OO sanity\");\n+#endif\n+  return _free_set->get_bytes_allocated_since_gc_start();\n+}\n+\n+size_t ShenandoahGlobalGeneration::get_affiliated_region_count() const {\n+#ifdef ASSERT\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  bool is_generational = heap->mode()->is_generational();\n+  assert((is_generational && (type() == ShenandoahGenerationType::GLOBAL)) ||\n+         (!is_generational && (type() == ShenandoahGenerationType::NON_GEN)), \"OO sanity\");\n+#endif\n+  return _free_set->global_affiliated_regions();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+  size_t bytes_allocated_since_gc_start() const override;\n+  size_t get_affiliated_region_count() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -837,0 +837,12 @@\n+\n+size_t ShenandoahOldGeneration::bytes_allocated_since_gc_start() const {\n+  assert(type() == ShenandoahGenerationType::OLD, \"OO sanity\");\n+  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"NON_GEN implies not generational\");\n+  return 0;\n+}\n+\n+size_t ShenandoahOldGeneration::get_affiliated_region_count() const {\n+  assert(type() == ShenandoahGenerationType::OLD, \"OO sanity\");\n+  return _free_set->old_affiliated_regions();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -330,0 +330,2 @@\n+  size_t bytes_allocated_since_gc_start() const override;\n+  size_t get_affiliated_region_count() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -103,0 +103,11 @@\n+size_t ShenandoahYoungGeneration::bytes_allocated_since_gc_start() const {\n+  assert(type() == ShenandoahGenerationType::YOUNG, \"OO sanity\");\n+  assert(ShenandoahHeap::heap()->mode()->is_generational(), \"Young implies generational\");\n+  return _free_set->get_bytes_allocated_since_gc_start();\n+}\n+\n+size_t ShenandoahYoungGeneration::get_affiliated_region_count() const {\n+  assert(type() == ShenandoahGenerationType::YOUNG, \"OO sanity\");\n+  return _free_set->young_affiliated_regions();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -77,0 +77,3 @@\n+  size_t bytes_allocated_since_gc_start() const override;\n+  size_t get_affiliated_region_count() const override;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}