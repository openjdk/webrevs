{"files":[{"patch":"@@ -954,14 +954,2 @@\n-  size_t total_regions;\n-  switch (_type) {\n-  case ShenandoahGenerationType::OLD:\n-    total_regions = _free_set->total_old_regions();\n-    break;\n-  case ShenandoahGenerationType::YOUNG:\n-    total_regions = _free_set->total_young_regions();\n-    break;\n-  case ShenandoahGenerationType::GLOBAL:\n-  case ShenandoahGenerationType::NON_GEN:\n-  default:\n-    total_regions = _free_set->total_global_regions();\n-    break;\n-  }\n+  assert(_type == ShenandoahGenerationType::NON_GEN, \"OO sanity\");\n+  size_t total_regions = _free_set->total_global_regions();\n@@ -972,15 +960,2 @@\n-  size_t free_regions;\n-  switch (_type) {\n-  case ShenandoahGenerationType::OLD:\n-    free_regions = _free_set->old_unaffiliated_regions();\n-    break;\n-  case ShenandoahGenerationType::YOUNG:\n-    free_regions = _free_set->young_unaffiliated_regions();\n-    break;\n-  case ShenandoahGenerationType::GLOBAL:\n-  case ShenandoahGenerationType::NON_GEN:\n-  default:\n-    free_regions = _free_set->global_unaffiliated_regions();\n-    break;\n-  }\n-  return free_regions;\n+  assert(_type == ShenandoahGenerationType::NON_GEN, \"OO sanity\");\n+  return _free_set->global_unaffiliated_regions();\n@@ -990,14 +965,2 @@\n-  size_t used_regions;\n-  switch (_type) {\n-  case ShenandoahGenerationType::OLD:\n-    used_regions = _free_set->old_affiliated_regions();\n-    break;\n-  case ShenandoahGenerationType::YOUNG:\n-    used_regions = _free_set->young_affiliated_regions();\n-    break;\n-  case ShenandoahGenerationType::GLOBAL:\n-  case ShenandoahGenerationType::NON_GEN:\n-  default:\n-    used_regions = _free_set->global_affiliated_regions();\n-    break;\n-  }\n+  assert(_type == ShenandoahGenerationType::NON_GEN, \"OO sanity\");\n+  size_t used_regions = _free_set->global_affiliated_regions();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":6,"deletions":43,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -128,2 +128,2 @@\n-  size_t max_capacity() const override;\n-\n+  virtual size_t bytes_allocated_since_gc_start() const override;\n+  virtual size_t used() const override;\n@@ -132,0 +132,1 @@\n+  virtual size_t get_humongous_waste() const;\n@@ -133,1 +134,0 @@\n-  virtual size_t used() const override;\n@@ -135,0 +135,1 @@\n+  virtual size_t max_capacity() const override;\n@@ -138,5 +139,0 @@\n-  size_t used_including_humongous_waste() const {\n-    \/\/ In the current implementation, used() includes humongous waste\n-    size_t result = used();\n-    return result;\n-  }\n@@ -150,2 +146,0 @@\n-  virtual size_t bytes_allocated_since_gc_start() const override;\n-\n@@ -211,2 +205,0 @@\n-  virtual size_t get_humongous_waste() const;\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":4,"deletions":12,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  assert(generation->used_including_humongous_waste() <= generation->used_regions_size(),\n+  assert(generation->used() <= generation->used_regions_size(),\n@@ -87,1 +87,1 @@\n-  old->set_live_bytes_after_last_mark(old->used_including_humongous_waste());\n+  old->set_live_bytes_after_last_mark(old->used());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -40,1 +40,18 @@\n-  return ShenandoahHeap::heap()->max_capacity();\n+#ifdef ASSERT\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  bool is_generational = heap->mode()->is_generational();\n+  assert((is_generational && (type() == ShenandoahGenerationType::GLOBAL)) ||\n+         (!is_generational && (type() == ShenandoahGenerationType::NON_GEN)), \"OO sanity\");\n+#endif\n+  size_t total_regions = _free_set->total_global_regions();\n+  return total_regions * ShenandoahHeapRegion::region_size_bytes();\n+}\n+\n+size_t ShenandoahGlobalGeneration::free_unaffiliated_regions() const {\n+#ifdef ASSERT\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  bool is_generational = heap->mode()->is_generational();\n+  assert((is_generational && (type() == ShenandoahGenerationType::GLOBAL)) ||\n+         (!is_generational && (type() == ShenandoahGenerationType::NON_GEN)), \"OO sanity\");\n+#endif\n+  return _free_set->global_unaffiliated_regions();\n@@ -95,1 +112,8 @@\n-  return ShenandoahHeap::heap()->capacity();\n+#ifdef ASSERT\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  bool is_generational = heap->mode()->is_generational();\n+  assert((is_generational && (type() == ShenandoahGenerationType::GLOBAL)) ||\n+         (!is_generational && (type() == ShenandoahGenerationType::NON_GEN)), \"OO sanity\");\n+#endif\n+  size_t used_regions = _free_set->global_affiliated_regions();\n+  return used_regions * ShenandoahHeapRegion::region_size_bytes();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":26,"deletions":2,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -41,1 +41,0 @@\n-  size_t used() const override;\n@@ -43,3 +42,1 @@\n-  size_t get_affiliated_region_count() const override;\n-  size_t get_humongous_waste() const override;\n-  size_t max_capacity() const override;\n+  size_t used() const override;\n@@ -48,0 +45,5 @@\n+  size_t get_humongous_waste() const override;\n+  size_t free_unaffiliated_regions() const override;\n+  size_t get_affiliated_region_count() const override;\n+  size_t max_capacity() const override;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,1 @@\n+\n@@ -857,0 +858,17 @@\n+\n+size_t ShenandoahOldGeneration::used_regions_size() const {\n+  assert(type() == ShenandoahGenerationType::OLD, \"OO sanity\");\n+  size_t used_regions = _free_set->old_affiliated_regions();\n+  return used_regions * ShenandoahHeapRegion::region_size_bytes();\n+}\n+\n+size_t ShenandoahOldGeneration::max_capacity() const {\n+  assert(type() == ShenandoahGenerationType::OLD, \"OO sanity\");\n+  size_t total_regions = _free_set->total_old_regions();\n+  return total_regions * ShenandoahHeapRegion::region_size_bytes();\n+}\n+\n+size_t ShenandoahOldGeneration::free_unaffiliated_regions() const {\n+  assert(type() == ShenandoahGenerationType::OLD, \"OO sanity\");\n+  return _free_set->old_unaffiliated_regions();\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -329,1 +329,0 @@\n-  size_t used() const override;\n@@ -331,2 +330,1 @@\n-  size_t get_affiliated_region_count() const override;\n-  size_t get_humongous_waste() const override;\n+  size_t used() const override;\n@@ -334,0 +332,5 @@\n+  size_t used_regions_size() const override;\n+  size_t get_humongous_waste() const override;\n+  size_t free_unaffiliated_regions() const override;\n+  size_t get_affiliated_region_count() const override;\n+  size_t max_capacity() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -124,0 +124,17 @@\n+size_t ShenandoahYoungGeneration::used_regions_size() const {\n+  assert(type() == ShenandoahGenerationType::YOUNG, \"OO sanity\");\n+  size_t used_regions = _free_set->young_affiliated_regions();\n+  return used_regions * ShenandoahHeapRegion::region_size_bytes();\n+}\n+\n+size_t ShenandoahYoungGeneration::max_capacity() const {\n+  assert(type() == ShenandoahGenerationType::YOUNG, \"OO sanity\");\n+  size_t total_regions = _free_set->total_young_regions();\n+  return total_regions * ShenandoahHeapRegion::region_size_bytes();\n+}\n+\n+size_t ShenandoahYoungGeneration::free_unaffiliated_regions() const {\n+  assert(type() == ShenandoahGenerationType::YOUNG, \"OO sanity\");\n+  return _free_set->young_unaffiliated_regions();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-  size_t used() const override;\n@@ -78,2 +77,1 @@\n-  size_t get_affiliated_region_count() const override;\n-  size_t get_humongous_waste() const override;\n+  size_t used() const override;\n@@ -81,0 +79,5 @@\n+  size_t used_regions_size() const override;\n+  size_t get_humongous_waste() const override;\n+  size_t free_unaffiliated_regions() const override;\n+  size_t get_affiliated_region_count() const override;\n+  size_t max_capacity() const override;\n@@ -83,2 +86,0 @@\n-\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"}]}