{"files":[{"patch":"@@ -110,3 +110,4 @@\n-  bool is_young() const  { return _type == YOUNG; }\n-  bool is_old() const    { return _type == OLD; }\n-  bool is_global() const { return _type == GLOBAL || _type == NON_GEN; }\n+  inline bool is_young() const                 { return _type == YOUNG; }\n+  inline bool is_old() const                   { return _type == OLD; }\n+  inline bool is_global() const                { return _type == GLOBAL || _type == NON_GEN; }\n+  inline ShenandoahGenerationType type() const { return _type; }\n@@ -119,2 +120,0 @@\n-  inline ShenandoahGenerationType type() const { return _type; }\n-\n@@ -134,16 +133,3 @@\n-  size_t used() const override {\n-    size_t result;\n-    switch (_type) {\n-    case ShenandoahGenerationType::OLD:\n-      result = _free_set->old_used();\n-      break;\n-    case ShenandoahGenerationType::YOUNG:\n-      result = _free_set->young_used();\n-      break;\n-    case ShenandoahGenerationType::GLOBAL:\n-    case ShenandoahGenerationType::NON_GEN:\n-    default:\n-      result = _free_set->global_used();\n-      break;\n-    }\n-    return result;\n+  virtual size_t used() const override {\n+    assert(_type == ShenandoahGenerationType::NON_GEN, \"OO sanity\");\n+    return _free_set->global_used();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":7,"deletions":21,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -41,0 +41,10 @@\n+  size_t used() const override {\n+#ifdef ASSERT\n+    ShenandoahHeap* heap = ShenandoahHeap::heap();\n+    bool is_generational = heap->mode()->is_generational();\n+    assert((is_generational && (type() == ShenandoahGenerationType::GLOBAL)) ||\n+           (!is_generational && (type() == ShenandoahGenerationType::NON_GEN)), \"OO sanity\");\n+#endif\n+    return _free_set->global_used();\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -329,0 +329,5 @@\n+  size_t used() const override {\n+    assert(type() == ShenandoahGenerationType::OLD, \"OO sanity\");\n+    return _free_set->old_used();\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -76,0 +76,5 @@\n+  size_t used() const override {\n+    assert(type() == ShenandoahGenerationType::YOUNG, \"OO sanity\");\n+    return _free_set->young_used();\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -164,1 +164,1 @@\n-        long mem = count * (16 + 4 * size + ANTICIPATED_HUMONGOUS_WASTE_PER_ARRAY);n\n+        long mem = count * (16 + 4 * size + ANTICIPATED_HUMONGOUS_WASTE_PER_ARRAY);\n","filename":"test\/hotspot\/jtreg\/gc\/shenandoah\/mxbeans\/TestChurnNotifications.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}