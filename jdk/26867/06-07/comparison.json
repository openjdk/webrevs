{"files":[{"patch":"@@ -926,0 +926,5 @@\n+size_t ShenandoahGeneration::used() const {\n+  assert(_type == ShenandoahGenerationType::NON_GEN, \"OO sanity\");\n+  return _free_set->global_used();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -133,4 +133,1 @@\n-  virtual size_t used() const override {\n-    assert(_type == ShenandoahGenerationType::NON_GEN, \"OO sanity\");\n-    return _free_set->global_used();\n-  }\n+  virtual size_t used() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -43,0 +43,10 @@\n+size_t ShenandoahGlobalGeneration::used() const {\n+#ifdef ASSERT\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  bool is_generational = heap->mode()->is_generational();\n+  assert((is_generational && (type() == ShenandoahGenerationType::GLOBAL)) ||\n+         (!is_generational && (type() == ShenandoahGenerationType::NON_GEN)), \"OO sanity\");\n+#endif\n+  return _free_set->global_used();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,10 +41,1 @@\n-  size_t used() const override {\n-#ifdef ASSERT\n-    ShenandoahHeap* heap = ShenandoahHeap::heap();\n-    bool is_generational = heap->mode()->is_generational();\n-    assert((is_generational && (type() == ShenandoahGenerationType::GLOBAL)) ||\n-           (!is_generational && (type() == ShenandoahGenerationType::NON_GEN)), \"OO sanity\");\n-#endif\n-    return _free_set->global_used();\n-  }\n-\n+  size_t used() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -832,0 +832,5 @@\n+\n+size_t ShenandoahOldGeneration::used() const {\n+  assert(type() == ShenandoahGenerationType::OLD, \"OO sanity\");\n+  return _free_set->old_used();\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -329,5 +329,1 @@\n-  size_t used() const override {\n-    assert(type() == ShenandoahGenerationType::OLD, \"OO sanity\");\n-    return _free_set->old_used();\n-  }\n-\n+  size_t used() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -98,0 +98,5 @@\n+size_t ShenandoahYoungGeneration::used() const {\n+  assert(type() == ShenandoahGenerationType::YOUNG, \"OO sanity\");\n+  return _free_set->young_used();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -76,5 +76,1 @@\n-  size_t used() const override {\n-    assert(type() == ShenandoahGenerationType::YOUNG, \"OO sanity\");\n-    return _free_set->young_used();\n-  }\n-\n+  size_t used() const override;\n@@ -83,1 +79,0 @@\n-  \/\/ Do not override available_with_reserve() because that needs to see memory reserved for Collector\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"}]}