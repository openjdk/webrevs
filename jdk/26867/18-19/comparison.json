{"files":[{"patch":"@@ -869,2 +869,1 @@\n-                                           uint max_workers,\n-                                           size_t max_capacity) :\n+                                           uint max_workers) :\n@@ -874,3 +873,1 @@\n-  _affiliated_region_count(0), _humongous_waste(0), _evacuation_reserve(0),\n-  _used(0),\n-  _max_capacity(max_capacity),\n+  _evacuation_reserve(0),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -55,10 +55,0 @@\n-  volatile size_t _affiliated_region_count;\n-\n-  \/\/ How much free memory is left in the last region of humongous objects.\n-  \/\/ This is _not_ included in used, but it _is_ deducted from available,\n-  \/\/ which gives the heuristics a more accurate view of how much memory remains\n-  \/\/ for allocation. This figure is also included the heap status logging.\n-  \/\/ The units are bytes. The value is only changed on a safepoint or under the\n-  \/\/ heap lock.\n-  size_t _humongous_waste;\n-\n@@ -69,4 +59,0 @@\n-  \/\/ Usage\n-\n-  volatile size_t _used;\n-  size_t _max_capacity;\n@@ -106,2 +92,1 @@\n-                       uint max_workers,\n-                       size_t max_capacity);\n+                       uint max_workers);\n@@ -128,1 +113,1 @@\n-  virtual size_t bytes_allocated_since_gc_start() const = 0;\n+  virtual size_t bytes_allocated_since_gc_start() const override = 0;\n@@ -131,1 +116,1 @@\n-    virtual size_t used_regions_size() const = 0;\n+  virtual size_t used_regions_size() const = 0;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":3,"deletions":18,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -118,2 +118,2 @@\n-  _young_generation = new ShenandoahYoungGeneration(max_workers(), max_capacity_young);\n-  _old_generation = new ShenandoahOldGeneration(max_workers(), max_capacity_old);\n+  _young_generation = new ShenandoahYoungGeneration(max_workers());\n+  _old_generation = new ShenandoahOldGeneration(max_workers());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,2 +35,2 @@\n-  ShenandoahGlobalGeneration(bool generational, uint max_queues, size_t max_capacity)\n-  : ShenandoahGeneration(generational ? GLOBAL : NON_GEN, max_queues, max_capacity) {\n+  ShenandoahGlobalGeneration(bool generational, uint max_queues)\n+  : ShenandoahGeneration(generational ? GLOBAL : NON_GEN, max_queues) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -529,1 +529,1 @@\n-  _global_generation = new ShenandoahGlobalGeneration(mode()->is_generational(), max_workers(), max_capacity());\n+  _global_generation = new ShenandoahGlobalGeneration(mode()->is_generational(), max_workers());\n@@ -2684,1 +2684,0 @@\n-  assert(max_capacity() <= ShenandoahHeap::heap()->max_capacity(), \"sanity\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -199,2 +199,2 @@\n-ShenandoahOldGeneration::ShenandoahOldGeneration(uint max_queues, size_t max_capacity)\n-  : ShenandoahGeneration(OLD, max_queues, max_capacity),\n+ShenandoahOldGeneration::ShenandoahOldGeneration(uint max_queues)\n+  : ShenandoahGeneration(OLD, max_queues),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-  ShenandoahOldGeneration(uint max_queues, size_t max_capacity);\n+  ShenandoahOldGeneration(uint max_queues);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -498,1 +498,1 @@\n-  private:\n+private:\n@@ -593,1 +593,1 @@\n-  private:\n+private:\n@@ -601,1 +601,1 @@\n-  public:\n+public:\n@@ -676,1 +676,1 @@\n-  public:\n+public:\n@@ -799,1 +799,1 @@\n-  private:\n+private:\n@@ -803,1 +803,1 @@\n-  public:\n+public:\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,2 +33,2 @@\n-ShenandoahYoungGeneration::ShenandoahYoungGeneration(uint max_queues, size_t max_capacity) :\n-  ShenandoahGeneration(YOUNG, max_queues, max_capacity),\n+ShenandoahYoungGeneration::ShenandoahYoungGeneration(uint max_queues) :\n+  ShenandoahGeneration(YOUNG, max_queues),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  ShenandoahYoungGeneration(uint max_queues, size_t max_capacity);\n+  ShenandoahYoungGeneration(uint max_queues);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-  volatile_nonstatic_field(ShenandoahGeneration, _used,            size_t)                            \\\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/vmStructs_shenandoah.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}