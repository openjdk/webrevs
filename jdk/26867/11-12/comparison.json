{"files":[{"patch":"@@ -54,2 +54,2 @@\n-  index_type _idx;\n-  index_type _end;\n+  idx_t _idx;\n+  idx_t _end;\n@@ -74,1 +74,1 @@\n-  index_type current() const {\n+  idx_t current() const {\n@@ -78,1 +78,1 @@\n-  index_type next() {\n+  idx_t next() {\n@@ -86,2 +86,2 @@\n-  index_type _idx;\n-  index_type _end;\n+  idx_t _idx;\n+  idx_t _end;\n@@ -106,1 +106,1 @@\n-  index_type current() const {\n+  idx_t current() const {\n@@ -110,1 +110,1 @@\n-  index_type next() {\n+  idx_t next() {\n@@ -140,6 +140,6 @@\n-void ShenandoahRegionPartitions::dump_bitmap_range(index_type start_region_idx, index_type end_region_idx) const {\n-  assert((start_region_idx >= 0) && (start_region_idx < (index_type) _max), \"precondition\");\n-  assert((end_region_idx >= 0) && (end_region_idx < (index_type) _max), \"precondition\");\n-  index_type aligned_start = _membership[int(ShenandoahFreeSetPartitionId::Mutator)].aligned_index(start_region_idx);\n-  index_type aligned_end = _membership[int(ShenandoahFreeSetPartitionId::Mutator)].aligned_index(end_region_idx);\n-  index_type alignment = _membership[int(ShenandoahFreeSetPartitionId::Mutator)].alignment();\n+void ShenandoahRegionPartitions::dump_bitmap_range(idx_t start_region_idx, idx_t end_region_idx) const {\n+  assert((start_region_idx >= 0) && (start_region_idx < (idx_t) _max), \"precondition\");\n+  assert((end_region_idx >= 0) && (end_region_idx < (idx_t) _max), \"precondition\");\n+  idx_t aligned_start = _membership[int(ShenandoahFreeSetPartitionId::Mutator)].aligned_index(start_region_idx);\n+  idx_t aligned_end = _membership[int(ShenandoahFreeSetPartitionId::Mutator)].aligned_index(end_region_idx);\n+  idx_t alignment = _membership[int(ShenandoahFreeSetPartitionId::Mutator)].alignment();\n@@ -152,3 +152,3 @@\n-void ShenandoahRegionPartitions::dump_bitmap_row(index_type region_idx) const {\n-  assert((region_idx >= 0) && (region_idx < (index_type) _max), \"precondition\");\n-  index_type aligned_idx = _membership[int(ShenandoahFreeSetPartitionId::Mutator)].aligned_index(region_idx);\n+void ShenandoahRegionPartitions::dump_bitmap_row(idx_t region_idx) const {\n+  assert((region_idx >= 0) && (region_idx < (idx_t) _max), \"precondition\");\n+  idx_t aligned_idx = _membership[int(ShenandoahFreeSetPartitionId::Mutator)].aligned_index(region_idx);\n@@ -301,1 +301,1 @@\n-inline index_type ShenandoahRegionPartitions::leftmost(ShenandoahFreeSetPartitionId which_partition) const {\n+inline idx_t ShenandoahRegionPartitions::leftmost(ShenandoahFreeSetPartitionId which_partition) const {\n@@ -303,1 +303,1 @@\n-  index_type idx = _leftmosts[int(which_partition)];\n+  idx_t idx = _leftmosts[int(which_partition)];\n@@ -314,1 +314,1 @@\n-inline index_type ShenandoahRegionPartitions::rightmost(ShenandoahFreeSetPartitionId which_partition) const {\n+inline idx_t ShenandoahRegionPartitions::rightmost(ShenandoahFreeSetPartitionId which_partition) const {\n@@ -316,1 +316,1 @@\n-  index_type idx = _rightmosts[int(which_partition)];\n+  idx_t idx = _rightmosts[int(which_partition)];\n@@ -346,2 +346,2 @@\n-void ShenandoahRegionPartitions::establish_mutator_intervals(index_type mutator_leftmost, index_type mutator_rightmost,\n-                                                             index_type mutator_leftmost_empty, index_type mutator_rightmost_empty,\n+void ShenandoahRegionPartitions::establish_mutator_intervals(idx_t mutator_leftmost, idx_t mutator_rightmost,\n+                                                             idx_t mutator_leftmost_empty, idx_t mutator_rightmost_empty,\n@@ -381,4 +381,4 @@\n-void ShenandoahRegionPartitions::establish_old_collector_intervals(index_type old_collector_leftmost,\n-                                                                   index_type old_collector_rightmost,\n-                                                                   index_type old_collector_leftmost_empty,\n-                                                                   index_type old_collector_rightmost_empty,\n+void ShenandoahRegionPartitions::establish_old_collector_intervals(idx_t old_collector_leftmost,\n+                                                                   idx_t old_collector_rightmost,\n+                                                                   idx_t old_collector_leftmost_empty,\n+                                                                   idx_t old_collector_rightmost_empty,\n@@ -518,1 +518,1 @@\n-  ShenandoahFreeSetPartitionId partition, index_type low_idx, index_type high_idx, size_t num_regions) {\n+  ShenandoahFreeSetPartitionId partition, idx_t low_idx, idx_t high_idx, size_t num_regions) {\n@@ -570,2 +570,2 @@\n-void ShenandoahRegionPartitions::establish_interval(ShenandoahFreeSetPartitionId partition, index_type low_idx,\n-                                                    index_type high_idx, index_type low_empty_idx, index_type high_empty_idx) {\n+void ShenandoahRegionPartitions::establish_interval(ShenandoahFreeSetPartitionId partition, idx_t low_idx,\n+                                                    idx_t high_idx, idx_t low_empty_idx, idx_t high_empty_idx) {\n@@ -595,1 +595,1 @@\n-                                                                             index_type idx) {\n+                                                                             idx_t idx) {\n@@ -601,2 +601,2 @@\n-expand_interval_if_range_modifies_either_boundary(ShenandoahFreeSetPartitionId partition, index_type low_idx, index_type high_idx,\n-                                                  index_type low_empty_idx, index_type high_empty_idx) {\n+expand_interval_if_range_modifies_either_boundary(ShenandoahFreeSetPartitionId partition, idx_t low_idx, idx_t high_idx,\n+                                                  idx_t low_empty_idx, idx_t high_empty_idx) {\n@@ -618,1 +618,1 @@\n-                                                                      index_type idx, size_t region_available) {\n+                                                                      idx_t idx, size_t region_available) {\n@@ -636,1 +636,1 @@\n-  ShenandoahFreeSetPartitionId partition, index_type low_idx, index_type high_idx) {\n+  ShenandoahFreeSetPartitionId partition, idx_t low_idx, idx_t high_idx) {\n@@ -643,1 +643,1 @@\n-  for (index_type idx = low_idx; idx <= high_idx; idx++) {\n+  for (idx_t idx = low_idx; idx <= high_idx; idx++) {\n@@ -658,1 +658,1 @@\n-                                                         index_type idx, size_t used_bytes) {\n+                                                         idx_t idx, size_t used_bytes) {\n@@ -690,1 +690,1 @@\n-void ShenandoahRegionPartitions::make_free(index_type idx, ShenandoahFreeSetPartitionId which_partition, size_t available) {\n+void ShenandoahRegionPartitions::make_free(idx_t idx, ShenandoahFreeSetPartitionId which_partition, size_t available) {\n@@ -719,1 +719,1 @@\n-move_from_partition_to_partition_with_deferred_accounting(index_type idx, ShenandoahFreeSetPartitionId orig_partition,\n+move_from_partition_to_partition_with_deferred_accounting(idx_t idx, ShenandoahFreeSetPartitionId orig_partition,\n@@ -761,1 +761,1 @@\n-void ShenandoahRegionPartitions::move_from_partition_to_partition(index_type idx, ShenandoahFreeSetPartitionId orig_partition,\n+void ShenandoahRegionPartitions::move_from_partition_to_partition(idx_t idx, ShenandoahFreeSetPartitionId orig_partition,\n@@ -785,1 +785,1 @@\n-const char* ShenandoahRegionPartitions::partition_membership_name(index_type idx) const {\n+const char* ShenandoahRegionPartitions::partition_membership_name(idx_t idx) const {\n@@ -790,1 +790,1 @@\n-inline bool ShenandoahRegionPartitions::partition_id_matches(index_type idx, ShenandoahFreeSetPartitionId test_partition) const {\n+inline bool ShenandoahRegionPartitions::partition_id_matches(idx_t idx, ShenandoahFreeSetPartitionId test_partition) const {\n@@ -803,4 +803,4 @@\n-inline index_type ShenandoahRegionPartitions::find_index_of_next_available_region(\n-  ShenandoahFreeSetPartitionId which_partition, index_type start_index) const {\n-  index_type rightmost_idx = rightmost(which_partition);\n-  index_type leftmost_idx = leftmost(which_partition);\n+inline idx_t ShenandoahRegionPartitions::find_index_of_next_available_region(\n+  ShenandoahFreeSetPartitionId which_partition, idx_t start_index) const {\n+  idx_t rightmost_idx = rightmost(which_partition);\n+  idx_t leftmost_idx = leftmost(which_partition);\n@@ -811,1 +811,1 @@\n-  index_type result = _membership[int(which_partition)].find_first_set_bit(start_index, rightmost_idx + 1);\n+  idx_t result = _membership[int(which_partition)].find_first_set_bit(start_index, rightmost_idx + 1);\n@@ -819,4 +819,4 @@\n-inline index_type ShenandoahRegionPartitions::find_index_of_previous_available_region(\n-  ShenandoahFreeSetPartitionId which_partition, index_type last_index) const {\n-  index_type rightmost_idx = rightmost(which_partition);\n-  index_type leftmost_idx = leftmost(which_partition);\n+inline idx_t ShenandoahRegionPartitions::find_index_of_previous_available_region(\n+  ShenandoahFreeSetPartitionId which_partition, idx_t last_index) const {\n+  idx_t rightmost_idx = rightmost(which_partition);\n+  idx_t leftmost_idx = leftmost(which_partition);\n@@ -828,1 +828,1 @@\n-  index_type result = _membership[int(which_partition)].find_last_set_bit(-1, last_index);\n+  idx_t result = _membership[int(which_partition)].find_last_set_bit(-1, last_index);\n@@ -836,4 +836,4 @@\n-inline index_type ShenandoahRegionPartitions::find_index_of_next_available_cluster_of_regions(\n-  ShenandoahFreeSetPartitionId which_partition, index_type start_index, size_t cluster_size) const {\n-  index_type rightmost_idx = rightmost(which_partition);\n-  index_type leftmost_idx = leftmost(which_partition);\n+inline idx_t ShenandoahRegionPartitions::find_index_of_next_available_cluster_of_regions(\n+  ShenandoahFreeSetPartitionId which_partition, idx_t start_index, size_t cluster_size) const {\n+  idx_t rightmost_idx = rightmost(which_partition);\n+  idx_t leftmost_idx = leftmost(which_partition);\n@@ -841,1 +841,1 @@\n-  index_type result =\n+  idx_t result =\n@@ -850,3 +850,3 @@\n-inline index_type ShenandoahRegionPartitions::find_index_of_previous_available_cluster_of_regions(\n-  ShenandoahFreeSetPartitionId which_partition, index_type last_index, size_t cluster_size) const {\n-  index_type leftmost_idx = leftmost(which_partition);\n+inline idx_t ShenandoahRegionPartitions::find_index_of_previous_available_cluster_of_regions(\n+  ShenandoahFreeSetPartitionId which_partition, idx_t last_index, size_t cluster_size) const {\n+  idx_t leftmost_idx = leftmost(which_partition);\n@@ -855,1 +855,1 @@\n-  index_type result = _membership[int(which_partition)].find_last_consecutive_set_bits(leftmost_idx - 1, last_index, cluster_size);\n+  idx_t result = _membership[int(which_partition)].find_last_consecutive_set_bits(leftmost_idx - 1, last_index, cluster_size);\n@@ -863,1 +863,1 @@\n-index_type ShenandoahRegionPartitions::leftmost_empty(ShenandoahFreeSetPartitionId which_partition) {\n+idx_t ShenandoahRegionPartitions::leftmost_empty(ShenandoahFreeSetPartitionId which_partition) {\n@@ -865,1 +865,1 @@\n-  index_type max_regions = _max;\n+  idx_t max_regions = _max;\n@@ -869,1 +869,1 @@\n-  for (index_type idx = find_index_of_next_available_region(which_partition, _leftmosts_empty[int(which_partition)]);\n+  for (idx_t idx = find_index_of_next_available_region(which_partition, _leftmosts_empty[int(which_partition)]);\n@@ -883,1 +883,1 @@\n-index_type ShenandoahRegionPartitions::rightmost_empty(ShenandoahFreeSetPartitionId which_partition) {\n+idx_t ShenandoahRegionPartitions::rightmost_empty(ShenandoahFreeSetPartitionId which_partition) {\n@@ -888,1 +888,1 @@\n-  for (index_type idx = find_index_of_previous_available_region(which_partition, _rightmosts_empty[int(which_partition)]);\n+  for (idx_t idx = find_index_of_previous_available_region(which_partition, _rightmosts_empty[int(which_partition)]);\n@@ -918,4 +918,4 @@\n-  index_type leftmosts[UIntNumPartitions];\n-  index_type rightmosts[UIntNumPartitions];\n-  index_type empty_leftmosts[UIntNumPartitions];\n-  index_type empty_rightmosts[UIntNumPartitions];\n+  idx_t leftmosts[UIntNumPartitions];\n+  idx_t rightmosts[UIntNumPartitions];\n+  idx_t empty_leftmosts[UIntNumPartitions];\n+  idx_t empty_rightmosts[UIntNumPartitions];\n@@ -934,1 +934,1 @@\n-  for (index_type i = 0; i < _max; i++) {\n+  for (idx_t i = 0; i < _max; i++) {\n@@ -1021,2 +1021,2 @@\n-  index_type beg_off = leftmosts[int(ShenandoahFreeSetPartitionId::Mutator)];\n-  index_type end_off = rightmosts[int(ShenandoahFreeSetPartitionId::Mutator)];\n+  idx_t beg_off = leftmosts[int(ShenandoahFreeSetPartitionId::Mutator)];\n+  idx_t end_off = rightmosts[int(ShenandoahFreeSetPartitionId::Mutator)];\n@@ -1284,1 +1284,1 @@\n-  for (index_type idx = iterator.current(); iterator.has_next(); idx = iterator.next()) {\n+  for (idx_t idx = iterator.current(); iterator.has_next(); idx = iterator.next()) {\n@@ -1369,1 +1369,1 @@\n-    index_type non_empty_on_left = (_partitions.leftmost_empty(ShenandoahFreeSetPartitionId::Mutator)\n+    idx_t non_empty_on_left = (_partitions.leftmost_empty(ShenandoahFreeSetPartitionId::Mutator)\n@@ -1371,1 +1371,1 @@\n-    index_type non_empty_on_right = (_partitions.rightmost(ShenandoahFreeSetPartitionId::Mutator)\n+    idx_t non_empty_on_right = (_partitions.rightmost(ShenandoahFreeSetPartitionId::Mutator)\n@@ -1380,1 +1380,1 @@\n-  for (index_type idx = iterator.current(); iterator.has_next(); idx = iterator.next()) {\n+  for (idx_t idx = iterator.current(); iterator.has_next(); idx = iterator.next()) {\n@@ -1449,1 +1449,1 @@\n-  for (index_type idx = iterator.current(); iterator.has_next(); idx = iterator.next()) {\n+  for (idx_t idx = iterator.current(); iterator.has_next(); idx = iterator.next()) {\n@@ -1726,1 +1726,1 @@\n-  index_type num = ShenandoahHeapRegion::required_regions(words_size * HeapWordSize);\n+  idx_t num = ShenandoahHeapRegion::required_regions(words_size * HeapWordSize);\n@@ -1732,1 +1732,1 @@\n-  if (num > (index_type) _partitions.count(ShenandoahFreeSetPartitionId::Mutator)) {\n+  if (num > (idx_t) _partitions.count(ShenandoahFreeSetPartitionId::Mutator)) {\n@@ -1736,3 +1736,3 @@\n-  index_type start_range = _partitions.leftmost_empty(ShenandoahFreeSetPartitionId::Mutator);\n-  index_type end_range = _partitions.rightmost_empty(ShenandoahFreeSetPartitionId::Mutator) + 1;\n-  index_type last_possible_start = end_range - num;\n+  idx_t start_range = _partitions.leftmost_empty(ShenandoahFreeSetPartitionId::Mutator);\n+  idx_t end_range = _partitions.rightmost_empty(ShenandoahFreeSetPartitionId::Mutator) + 1;\n+  idx_t last_possible_start = end_range - num;\n@@ -1742,1 +1742,1 @@\n-  index_type beg = _partitions.find_index_of_next_available_cluster_of_regions(ShenandoahFreeSetPartitionId::Mutator,\n+  idx_t beg = _partitions.find_index_of_next_available_cluster_of_regions(ShenandoahFreeSetPartitionId::Mutator,\n@@ -1748,1 +1748,1 @@\n-  index_type end = beg;\n+  idx_t end = beg;\n@@ -1756,1 +1756,1 @@\n-      index_type slide_delta = end + 1 - beg;\n+      idx_t slide_delta = end + 1 - beg;\n@@ -1761,1 +1761,1 @@\n-      for (index_type span_end = beg + num; slide_delta > 0; slide_delta--) {\n+      for (idx_t span_end = beg + num; slide_delta > 0; slide_delta--) {\n@@ -1795,1 +1795,1 @@\n-    for (index_type i = beg; i <= end; i++) {\n+    for (idx_t i = beg; i <= end; i++) {\n@@ -1820,1 +1820,1 @@\n-    for (index_type i = beg; i <= end; i++) {\n+    for (idx_t i = beg; i <= end; i++) {\n@@ -2044,1 +2044,1 @@\n-    index_type unusable_trash = -1;\n+    idx_t unusable_trash = -1;\n@@ -2317,2 +2317,2 @@\n-  index_type rightmost_idx = (mutator_leftmost == max_regions)? -1: (index_type) mutator_rightmost;\n-  index_type rightmost_empty_idx = (mutator_leftmost_empty == max_regions)? -1: (index_type) mutator_rightmost_empty;\n+  idx_t rightmost_idx = (mutator_leftmost == max_regions)? -1: (idx_t) mutator_rightmost;\n+  idx_t rightmost_empty_idx = (mutator_leftmost_empty == max_regions)? -1: (idx_t) mutator_rightmost_empty;\n@@ -2323,2 +2323,2 @@\n-  rightmost_idx = (old_collector_leftmost == max_regions)? -1: (index_type) old_collector_rightmost;\n-  rightmost_empty_idx = (old_collector_leftmost_empty == max_regions)? -1: (index_type) old_collector_rightmost_empty;\n+  rightmost_idx = (old_collector_leftmost == max_regions)? -1: (idx_t) old_collector_rightmost;\n+  rightmost_empty_idx = (old_collector_leftmost_empty == max_regions)? -1: (idx_t) old_collector_rightmost_empty;\n@@ -2393,4 +2393,4 @@\n-  index_type source_low_idx = _partitions.max();\n-  index_type source_high_idx = -1;\n-  index_type dest_low_idx = _partitions.max();\n-  index_type dest_high_idx = -1;\n+  idx_t source_low_idx = _partitions.max();\n+  idx_t source_high_idx = -1;\n+  idx_t dest_low_idx = _partitions.max();\n+  idx_t dest_high_idx = -1;\n@@ -2398,1 +2398,1 @@\n-  for (index_type idx = iterator.current(); transferred_regions < num_regions && iterator.has_next(); idx = iterator.next()) {\n+  for (idx_t idx = iterator.current(); transferred_regions < num_regions && iterator.has_next(); idx = iterator.next()) {\n@@ -2472,4 +2472,4 @@\n-  index_type collector_low_idx = _partitions.max();\n-  index_type collector_high_idx = -1;\n-  index_type mutator_low_idx = _partitions.max();\n-  index_type mutator_high_idx = -1;\n+  idx_t collector_low_idx = _partitions.max();\n+  idx_t collector_high_idx = -1;\n+  idx_t mutator_low_idx = _partitions.max();\n+  idx_t mutator_high_idx = -1;\n@@ -2477,1 +2477,1 @@\n-  for (index_type idx = iterator.current(); transferred_regions < max_xfer_regions && iterator.has_next(); idx = iterator.next()) {\n+  for (idx_t idx = iterator.current(); transferred_regions < max_xfer_regions && iterator.has_next(); idx = iterator.next()) {\n@@ -2540,4 +2540,4 @@\n-  index_type collector_low_idx = _partitions.max();\n-  index_type collector_high_idx = -1;\n-  index_type mutator_low_idx = _partitions.max();\n-  index_type mutator_high_idx = -1;\n+  idx_t collector_low_idx = _partitions.max();\n+  idx_t collector_high_idx = -1;\n+  idx_t mutator_low_idx = _partitions.max();\n+  idx_t mutator_high_idx = -1;\n@@ -2546,1 +2546,1 @@\n-  for (index_type idx = iterator.current(); transferred_regions < max_xfer_regions && iterator.has_next(); idx = iterator.next()) {\n+  for (idx_t idx = iterator.current(); transferred_regions < max_xfer_regions && iterator.has_next(); idx = iterator.next()) {\n@@ -2801,4 +2801,4 @@\n-  index_type mutator_low_idx = _partitions.max();\n-  index_type mutator_high_idx = -1;\n-  index_type mutator_empty_low_idx = _partitions.max();\n-  index_type mutator_empty_high_idx = -1;\n+  idx_t mutator_low_idx = _partitions.max();\n+  idx_t mutator_high_idx = -1;\n+  idx_t mutator_empty_low_idx = _partitions.max();\n+  idx_t mutator_empty_high_idx = -1;\n@@ -2806,4 +2806,4 @@\n-  index_type collector_low_idx = _partitions.max();\n-  index_type collector_high_idx = -1;\n-  index_type collector_empty_low_idx = _partitions.max();\n-  index_type collector_empty_high_idx = -1;\n+  idx_t collector_low_idx = _partitions.max();\n+  idx_t collector_high_idx = -1;\n+  idx_t collector_empty_low_idx = _partitions.max();\n+  idx_t collector_empty_high_idx = -1;\n@@ -2811,4 +2811,4 @@\n-  index_type old_collector_low_idx = _partitions.max();\n-  index_type old_collector_high_idx = -1;\n-  index_type old_collector_empty_low_idx = _partitions.max();\n-  index_type old_collector_empty_high_idx = -1;\n+  idx_t old_collector_low_idx = _partitions.max();\n+  idx_t old_collector_high_idx = -1;\n+  idx_t old_collector_empty_low_idx = _partitions.max();\n+  idx_t old_collector_empty_high_idx = -1;\n@@ -2827,1 +2827,1 @@\n-    index_type idx = i - 1;\n+    idx_t idx = i - 1;\n@@ -3042,3 +3042,3 @@\n-  index_type left_idx = _partitions.leftmost(ShenandoahFreeSetPartitionId::OldCollector);\n-  index_type right_idx = _partitions.rightmost(ShenandoahFreeSetPartitionId::OldCollector);\n-  index_type middle = (left_idx + right_idx) \/ 2;\n+  idx_t left_idx = _partitions.leftmost(ShenandoahFreeSetPartitionId::OldCollector);\n+  idx_t right_idx = _partitions.rightmost(ShenandoahFreeSetPartitionId::OldCollector);\n+  idx_t middle = (left_idx + right_idx) \/ 2;\n@@ -3048,1 +3048,1 @@\n-  for (index_type index = left_idx; index < middle; index++) {\n+  for (idx_t index = left_idx; index < middle; index++) {\n@@ -3054,1 +3054,1 @@\n-  for (index_type index = middle; index <= right_idx; index++) {\n+  for (idx_t index = middle; index <= right_idx; index++) {\n@@ -3156,1 +3156,1 @@\n-      index_type last_idx = 0;\n+      idx_t last_idx = 0;\n@@ -3166,1 +3166,1 @@\n-      for (index_type idx = _partitions.leftmost(ShenandoahFreeSetPartitionId::Mutator);\n+      for (idx_t idx = _partitions.leftmost(ShenandoahFreeSetPartitionId::Mutator);\n@@ -3232,1 +3232,1 @@\n-      for (index_type idx = _partitions.leftmost(ShenandoahFreeSetPartitionId::Collector);\n+      for (idx_t idx = _partitions.leftmost(ShenandoahFreeSetPartitionId::Collector);\n@@ -3253,1 +3253,1 @@\n-      for (index_type idx = _partitions.leftmost(ShenandoahFreeSetPartitionId::OldCollector);\n+      for (idx_t idx = _partitions.leftmost(ShenandoahFreeSetPartitionId::OldCollector);\n@@ -3321,1 +3321,1 @@\n-  for (index_type index = mutator.current(); mutator.has_next(); index = mutator.next()) {\n+  for (idx_t index = mutator.current(); mutator.has_next(); index = mutator.next()) {\n@@ -3327,1 +3327,1 @@\n-  for (index_type index = collector.current(); collector.has_next(); index = collector.next()) {\n+  for (idx_t index = collector.current(); collector.has_next(); index = collector.next()) {\n@@ -3333,1 +3333,1 @@\n-    for (index_type index = _partitions.leftmost(ShenandoahFreeSetPartitionId::OldCollector);\n+    for (idx_t index = _partitions.leftmost(ShenandoahFreeSetPartitionId::OldCollector);\n@@ -3347,1 +3347,1 @@\n-  for (index_type index = iterator.current(); iterator.has_next(); index = iterator.next()) {\n+  for (idx_t index = iterator.current(); iterator.has_next(); index = iterator.next()) {\n@@ -3363,1 +3363,1 @@\n-  index_type last_idx = 0;\n+  idx_t last_idx = 0;\n@@ -3369,1 +3369,1 @@\n-  for (index_type index = iterator.current(); iterator.has_next(); index = iterator.next()) {\n+  for (idx_t index = iterator.current(); iterator.has_next(); index = iterator.next()) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":137,"deletions":137,"binary":false,"changes":274,"status":"modified"},{"patch":"@@ -52,0 +52,2 @@\n+using idx_t = ShenandoahSimpleBitMap::idx_t;\n+\n@@ -60,1 +62,1 @@\n-  const index_type _max;           \/\/ The maximum number of heap regions\n+  const idx_t _max;           \/\/ The maximum number of heap regions\n@@ -69,2 +71,2 @@\n-  index_type _leftmosts[UIntNumPartitions];\n-  index_type _rightmosts[UIntNumPartitions];\n+  idx_t _leftmosts[UIntNumPartitions];\n+  idx_t _rightmosts[UIntNumPartitions];\n@@ -76,2 +78,2 @@\n-  index_type _leftmosts_empty[UIntNumPartitions];\n-  index_type _rightmosts_empty[UIntNumPartitions];\n+  idx_t _leftmosts_empty[UIntNumPartitions];\n+  idx_t _rightmosts_empty[UIntNumPartitions];\n@@ -134,2 +136,2 @@\n-  void dump_bitmap_row(index_type region_idx) const;\n-  void dump_bitmap_range(index_type start_region_idx, index_type end_region_idx) const;\n+  void dump_bitmap_row(idx_t region_idx) const;\n+  void dump_bitmap_range(idx_t start_region_idx, idx_t end_region_idx) const;\n@@ -144,1 +146,1 @@\n-  inline index_type max() const { return _max; }\n+  inline idx_t max() const { return _max; }\n@@ -167,2 +169,2 @@\n-  void establish_mutator_intervals(index_type mutator_leftmost, index_type mutator_rightmost,\n-                                   index_type mutator_leftmost_empty, index_type mutator_rightmost_empty,\n+  void establish_mutator_intervals(idx_t mutator_leftmost, idx_t mutator_rightmost,\n+                                   idx_t mutator_leftmost_empty, idx_t mutator_rightmost_empty,\n@@ -175,2 +177,2 @@\n-  void establish_old_collector_intervals(index_type old_collector_leftmost, index_type old_collector_rightmost,\n-                                         index_type old_collector_leftmost_empty, index_type old_collector_rightmost_empty,\n+  void establish_old_collector_intervals(idx_t old_collector_leftmost, idx_t old_collector_rightmost,\n+                                         idx_t old_collector_leftmost_empty, idx_t old_collector_rightmost_empty,\n@@ -181,2 +183,2 @@\n-  void establish_interval(ShenandoahFreeSetPartitionId partition, index_type low_idx, index_type high_idx,\n-                          index_type low_empty_idx, index_type high_empty_idx);\n+  void establish_interval(ShenandoahFreeSetPartitionId partition, idx_t low_idx, idx_t high_idx,\n+                          idx_t low_empty_idx, idx_t high_empty_idx);\n@@ -185,1 +187,1 @@\n-  inline void shrink_interval_if_boundary_modified(ShenandoahFreeSetPartitionId partition, index_type idx);\n+  inline void shrink_interval_if_boundary_modified(ShenandoahFreeSetPartitionId partition, idx_t idx);\n@@ -189,1 +191,1 @@\n-                                                         index_type low_idx, index_type high_idx, size_t num_regions);\n+                                                         idx_t low_idx, idx_t high_idx, size_t num_regions);\n@@ -191,1 +193,1 @@\n-  void expand_interval_if_boundary_modified(ShenandoahFreeSetPartitionId partition, index_type idx, size_t capacity);\n+  void expand_interval_if_boundary_modified(ShenandoahFreeSetPartitionId partition, idx_t idx, size_t capacity);\n@@ -193,2 +195,2 @@\n-                                                         index_type low_idx, index_type high_idx,\n-                                                         index_type low_empty_idx, index_type high_empty_idx);\n+                                                         idx_t low_idx, idx_t high_idx,\n+                                                         idx_t low_empty_idx, idx_t high_empty_idx);\n@@ -200,1 +202,1 @@\n-  size_t retire_from_partition(ShenandoahFreeSetPartitionId p, index_type idx, size_t used_bytes);\n+  size_t retire_from_partition(ShenandoahFreeSetPartitionId p, idx_t idx, size_t used_bytes);\n@@ -205,1 +207,1 @@\n-  void retire_range_from_partition(ShenandoahFreeSetPartitionId partition, index_type low_idx, index_type high_idx);\n+  void retire_range_from_partition(ShenandoahFreeSetPartitionId partition, idx_t low_idx, idx_t high_idx);\n@@ -210,1 +212,1 @@\n-  void make_free(index_type idx, ShenandoahFreeSetPartitionId which_partition, size_t region_capacity);\n+  void make_free(idx_t idx, ShenandoahFreeSetPartitionId which_partition, size_t region_capacity);\n@@ -214,1 +216,1 @@\n-  size_t move_from_partition_to_partition_with_deferred_accounting(index_type idx, ShenandoahFreeSetPartitionId orig_partition,\n+  size_t move_from_partition_to_partition_with_deferred_accounting(idx_t idx, ShenandoahFreeSetPartitionId orig_partition,\n@@ -219,1 +221,1 @@\n-  void move_from_partition_to_partition(index_type idx, ShenandoahFreeSetPartitionId orig_partition,\n+  void move_from_partition_to_partition(idx_t idx, ShenandoahFreeSetPartitionId orig_partition,\n@@ -225,1 +227,1 @@\n-  const char* partition_membership_name(index_type idx) const;\n+  const char* partition_membership_name(idx_t idx) const;\n@@ -228,2 +230,2 @@\n-  inline index_type find_index_of_next_available_region(ShenandoahFreeSetPartitionId which_partition,\n-                                                        index_type start_index) const;\n+  inline idx_t find_index_of_next_available_region(ShenandoahFreeSetPartitionId which_partition,\n+                                                        idx_t start_index) const;\n@@ -232,2 +234,2 @@\n-  inline index_type find_index_of_previous_available_region(ShenandoahFreeSetPartitionId which_partition,\n-                                                            index_type last_index) const;\n+  inline idx_t find_index_of_previous_available_region(ShenandoahFreeSetPartitionId which_partition,\n+                                                            idx_t last_index) const;\n@@ -236,2 +238,2 @@\n-  inline index_type find_index_of_next_available_cluster_of_regions(ShenandoahFreeSetPartitionId which_partition,\n-                                                               index_type start_index, size_t cluster_size) const;\n+  inline idx_t find_index_of_next_available_cluster_of_regions(ShenandoahFreeSetPartitionId which_partition,\n+                                                               idx_t start_index, size_t cluster_size) const;\n@@ -240,2 +242,2 @@\n-  inline index_type find_index_of_previous_available_cluster_of_regions(ShenandoahFreeSetPartitionId which_partition,\n-                                                                   index_type last_index, size_t cluster_size) const;\n+  inline idx_t find_index_of_previous_available_cluster_of_regions(ShenandoahFreeSetPartitionId which_partition,\n+                                                                   idx_t last_index, size_t cluster_size) const;\n@@ -243,1 +245,1 @@\n-  inline bool in_free_set(ShenandoahFreeSetPartitionId which_partition, index_type idx) const {\n+  inline bool in_free_set(ShenandoahFreeSetPartitionId which_partition, idx_t idx) const {\n@@ -249,1 +251,1 @@\n-  inline ShenandoahFreeSetPartitionId membership(index_type idx) const {\n+  inline ShenandoahFreeSetPartitionId membership(idx_t idx) const {\n@@ -264,1 +266,1 @@\n-  inline bool partition_id_matches(index_type idx, ShenandoahFreeSetPartitionId which_partition) const;\n+  inline bool partition_id_matches(idx_t idx, ShenandoahFreeSetPartitionId which_partition) const;\n@@ -276,4 +278,4 @@\n-  inline index_type leftmost(ShenandoahFreeSetPartitionId which_partition) const;\n-  inline index_type rightmost(ShenandoahFreeSetPartitionId which_partition) const;\n-  index_type leftmost_empty(ShenandoahFreeSetPartitionId which_partition);\n-  index_type rightmost_empty(ShenandoahFreeSetPartitionId which_partition);\n+  inline idx_t leftmost(ShenandoahFreeSetPartitionId which_partition) const;\n+  inline idx_t rightmost(ShenandoahFreeSetPartitionId which_partition) const;\n+  idx_t leftmost_empty(ShenandoahFreeSetPartitionId which_partition);\n+  idx_t rightmost_empty(ShenandoahFreeSetPartitionId which_partition);\n@@ -351,1 +353,1 @@\n-           partition_membership_name(index_type(which_partition)));\n+           partition_membership_name(idx_t(which_partition)));\n@@ -374,1 +376,1 @@\n-           partition_membership_name(index_type(which_partition)));\n+           partition_membership_name(idx_t(which_partition)));\n@@ -438,0 +440,1 @@\n+using idx_t = ShenandoahSimpleBitMap::idx_t;\n@@ -645,1 +648,1 @@\n-                                                                index_type low_idx, index_type high_idx, size_t num_regions) {\n+                                                                idx_t low_idx, idx_t high_idx, size_t num_regions) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.hpp","additions":46,"deletions":43,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -42,0 +42,2 @@\n+using idx_t = ShenandoahSimpleBitMap::idx_t;\n+\n@@ -543,1 +545,1 @@\n-  const index_type num_regions = heap->num_regions();\n+  const idx_t num_regions = heap->num_regions();\n@@ -551,4 +553,4 @@\n-  index_type pip_low_collector_idx = freeset->max_regions();\n-  index_type pip_high_collector_idx = -1;\n-  index_type pip_low_mutator_idx = freeset->max_regions();\n-  index_type pip_high_mutator_idx = -1;\n+  idx_t pip_low_collector_idx = freeset->max_regions();\n+  idx_t pip_high_collector_idx = -1;\n+  idx_t pip_low_mutator_idx = freeset->max_regions();\n+  idx_t pip_high_mutator_idx = -1;\n@@ -564,1 +566,1 @@\n-  for (index_type i = 0; i < num_regions; i++) {\n+  for (idx_t i = 0; i < num_regions; i++) {\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  typedef size_t idx_t;         \/\/ Type used for bit and word indices.\n+  typedef size_t idx_t;        \/\/ Type used for bit and word indices.\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-ShenandoahSimpleBitMap::ShenandoahSimpleBitMap(index_type num_bits) :\n+ShenandoahSimpleBitMap::ShenandoahSimpleBitMap(idx_t num_bits) :\n@@ -42,1 +42,1 @@\n-size_t ShenandoahSimpleBitMap::count_leading_ones(index_type start_idx) const {\n+size_t ShenandoahSimpleBitMap::count_leading_ones(idx_t start_idx) const {\n@@ -69,1 +69,1 @@\n-size_t ShenandoahSimpleBitMap::count_trailing_ones(index_type last_idx) const {\n+size_t ShenandoahSimpleBitMap::count_trailing_ones(idx_t last_idx) const {\n@@ -96,1 +96,1 @@\n-bool ShenandoahSimpleBitMap::is_forward_consecutive_ones(index_type start_idx, index_type count) const {\n+bool ShenandoahSimpleBitMap::is_forward_consecutive_ones(idx_t start_idx, idx_t count) const {\n@@ -100,1 +100,1 @@\n-    assert(start_idx + count <= (index_type) _num_bits, \"precondition\");\n+    assert(start_idx + count <= (idx_t) _num_bits, \"precondition\");\n@@ -126,1 +126,1 @@\n-bool ShenandoahSimpleBitMap::is_backward_consecutive_ones(index_type last_idx, index_type count) const {\n+bool ShenandoahSimpleBitMap::is_backward_consecutive_ones(idx_t last_idx, idx_t count) const {\n@@ -155,1 +155,1 @@\n-index_type ShenandoahSimpleBitMap::find_first_consecutive_set_bits(index_type beg, index_type end, size_t num_bits) const {\n+idx_t ShenandoahSimpleBitMap::find_first_consecutive_set_bits(idx_t beg, idx_t end, size_t num_bits) const {\n@@ -159,1 +159,1 @@\n-  index_type start_boundary = end - num_bits;\n+  idx_t start_boundary = end - num_bits;\n@@ -234,1 +234,1 @@\n-index_type ShenandoahSimpleBitMap::find_last_consecutive_set_bits(const index_type beg, index_type end, const size_t num_bits) const {\n+idx_t ShenandoahSimpleBitMap::find_last_consecutive_set_bits(const idx_t beg, idx_t end, const size_t num_bits) const {\n@@ -239,1 +239,1 @@\n-  index_type last_boundary = beg + num_bits;\n+  idx_t last_boundary = beg + num_bits;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-\/\/ index_type is defined here as ssize_t.  In src\/hotspot\/share\/utiliities\/bitMap.hpp, idx is defined as size_t.\n+\/\/ idx_t is defined here as ssize_t.  In src\/hotspot\/share\/utiliities\/bitMap.hpp, idx is defined as size_t.\n@@ -41,1 +41,1 @@\n-\/\/ The API and internal implementation of ShenandoahSimpleBitMap and ShenandoahRegionPartitions use index_type to\n+\/\/ The API and internal implementation of ShenandoahSimpleBitMap and ShenandoahRegionPartitions use idx_t to\n@@ -48,2 +48,0 @@\n-typedef ssize_t index_type;\n-\n@@ -55,1 +53,4 @@\n-  const index_type _num_bits;\n+public:\n+  typedef ssize_t idx_t;\n+private:\n+  const idx_t _num_bits;\n@@ -60,1 +61,1 @@\n-  ShenandoahSimpleBitMap(index_type num_bits);\n+  ShenandoahSimpleBitMap(idx_t num_bits);\n@@ -74,1 +75,1 @@\n-  size_t count_leading_ones(index_type start_idx) const;\n+  size_t count_leading_ones(idx_t start_idx) const;\n@@ -78,1 +79,1 @@\n-  size_t count_trailing_ones(index_type last_idx) const;\n+  size_t count_trailing_ones(idx_t last_idx) const;\n@@ -80,2 +81,2 @@\n-  bool is_forward_consecutive_ones(index_type start_idx, index_type count) const;\n-  bool is_backward_consecutive_ones(index_type last_idx, index_type count) const;\n+  bool is_forward_consecutive_ones(idx_t start_idx, idx_t count) const;\n+  bool is_backward_consecutive_ones(idx_t last_idx, idx_t count) const;\n@@ -87,1 +88,1 @@\n-  inline index_type aligned_index(index_type idx) const {\n+  inline idx_t aligned_index(idx_t idx) const {\n@@ -89,1 +90,1 @@\n-    index_type array_idx = idx & ~(BitsPerWord - 1);\n+    idx_t array_idx = idx & ~(BitsPerWord - 1);\n@@ -93,1 +94,1 @@\n-  inline constexpr index_type alignment() const {\n+  inline constexpr idx_t alignment() const {\n@@ -98,1 +99,1 @@\n-  inline index_type size() const {\n+  inline idx_t size() const {\n@@ -103,1 +104,1 @@\n-  inline uintx bits_at(index_type idx) const {\n+  inline uintx bits_at(idx_t idx) const {\n@@ -105,1 +106,1 @@\n-    index_type array_idx = idx >> LogBitsPerWord;\n+    idx_t array_idx = idx >> LogBitsPerWord;\n@@ -109,1 +110,1 @@\n-  inline void set_bit(index_type idx) {\n+  inline void set_bit(idx_t idx) {\n@@ -117,1 +118,1 @@\n-  inline void clear_bit(index_type idx) {\n+  inline void clear_bit(idx_t idx) {\n@@ -125,1 +126,1 @@\n-  inline bool is_set(index_type idx) const {\n+  inline bool is_set(idx_t idx) const {\n@@ -135,1 +136,1 @@\n-  inline index_type find_first_set_bit(index_type beg) const;\n+  inline idx_t find_first_set_bit(idx_t beg) const;\n@@ -139,1 +140,1 @@\n-  inline index_type find_first_set_bit(index_type beg, index_type end) const;\n+  inline idx_t find_first_set_bit(idx_t beg, idx_t end) const;\n@@ -143,1 +144,1 @@\n-  inline index_type find_last_set_bit(index_type end) const;\n+  inline idx_t find_last_set_bit(idx_t end) const;\n@@ -147,1 +148,1 @@\n-  inline index_type find_last_set_bit(index_type beg, index_type end) const;\n+  inline idx_t find_last_set_bit(idx_t beg, idx_t end) const;\n@@ -152,1 +153,1 @@\n-  inline index_type find_first_consecutive_set_bits(index_type beg, size_t num_bits) const;\n+  inline idx_t find_first_consecutive_set_bits(idx_t beg, size_t num_bits) const;\n@@ -157,1 +158,1 @@\n-  index_type find_first_consecutive_set_bits(index_type beg, index_type end, size_t num_bits) const;\n+  idx_t find_first_consecutive_set_bits(idx_t beg, idx_t end, size_t num_bits) const;\n@@ -162,1 +163,1 @@\n-  inline index_type find_last_consecutive_set_bits(index_type end, size_t num_bits) const;\n+  inline idx_t find_last_consecutive_set_bits(idx_t end, size_t num_bits) const;\n@@ -167,1 +168,1 @@\n-  index_type find_last_consecutive_set_bits(index_type beg, index_type end, size_t num_bits) const;\n+  idx_t find_last_consecutive_set_bits(idx_t beg, idx_t end, size_t num_bits) const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.hpp","additions":28,"deletions":27,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+using idx_t = ShenandoahSimpleBitMap::idx_t;\n+\n@@ -37,1 +39,1 @@\n-inline index_type ShenandoahSimpleBitMap::find_first_set_bit(index_type beg, index_type end) const {\n+inline idx_t ShenandoahSimpleBitMap::find_first_set_bit(idx_t beg, idx_t end) const {\n@@ -52,1 +54,1 @@\n-      index_type candidate_result = (array_idx * BitsPerWord) + bit_number + first_set_bit;\n+      idx_t candidate_result = (array_idx * BitsPerWord) + bit_number + first_set_bit;\n@@ -62,1 +64,1 @@\n-inline index_type ShenandoahSimpleBitMap::find_first_set_bit(index_type beg) const {\n+inline idx_t ShenandoahSimpleBitMap::find_first_set_bit(idx_t beg) const {\n@@ -67,1 +69,1 @@\n-inline index_type ShenandoahSimpleBitMap::find_last_set_bit(index_type beg, index_type end) const {\n+inline idx_t ShenandoahSimpleBitMap::find_last_set_bit(idx_t beg, idx_t end) const {\n@@ -71,1 +73,1 @@\n-    index_type array_idx = end >> LogBitsPerWord;\n+    idx_t array_idx = end >> LogBitsPerWord;\n@@ -82,1 +84,1 @@\n-      index_type candidate_result = array_idx * BitsPerWord + (bit_number - first_set_bit);\n+      idx_t candidate_result = array_idx * BitsPerWord + (bit_number - first_set_bit);\n@@ -92,1 +94,1 @@\n-inline index_type ShenandoahSimpleBitMap::find_last_set_bit(index_type end) const {\n+inline idx_t ShenandoahSimpleBitMap::find_last_set_bit(idx_t end) const {\n@@ -97,1 +99,1 @@\n-inline index_type ShenandoahSimpleBitMap::find_first_consecutive_set_bits(index_type beg, size_t num_bits) const {\n+inline idx_t ShenandoahSimpleBitMap::find_first_consecutive_set_bits(idx_t beg, size_t num_bits) const {\n@@ -102,1 +104,1 @@\n-inline index_type ShenandoahSimpleBitMap::find_last_consecutive_set_bits(index_type end, size_t num_bits) const {\n+inline idx_t ShenandoahSimpleBitMap::find_last_consecutive_set_bits(idx_t end, size_t num_bits) const {\n@@ -104,1 +106,1 @@\n-  return find_last_consecutive_set_bits((index_type) -1, end, num_bits);\n+  return find_last_consecutive_set_bits((idx_t) -1, end, num_bits);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.inline.hpp","additions":12,"deletions":10,"binary":false,"changes":22,"status":"modified"}]}