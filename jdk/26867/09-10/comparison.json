{"files":[{"patch":"@@ -949,15 +949,2 @@\n-  size_t result;\n-  switch (_type) {\n-    case ShenandoahGenerationType::OLD:\n-      result = _free_set->old_affiliated_regions();\n-      break;\n-    case ShenandoahGenerationType::YOUNG:\n-      result = _free_set->young_affiliated_regions();\n-      break;\n-    case ShenandoahGenerationType::GLOBAL:\n-    case ShenandoahGenerationType::NON_GEN:\n-    default:\n-      result = _free_set->global_affiliated_regions();\n-      break;\n-  }\n-  return result;\n+  assert(_type == ShenandoahGenerationType::NON_GEN, \"OO sanity\");\n+  return _free_set->global_affiliated_regions();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":2,"deletions":15,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -85,3 +85,7 @@\n-  ShenandoahGenerationalHeap* heap = ShenandoahGenerationalHeap::heap();\n-  assert(heap->mode()->is_generational(), \"Region usage accounting is only for generational mode\");\n-  return heap->old_generation()->used_regions() + heap->young_generation()->used_regions();\n+#ifdef ASSERT\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  bool is_generational = heap->mode()->is_generational();\n+  assert((is_generational && (type() == ShenandoahGenerationType::GLOBAL)) ||\n+         (!is_generational && (type() == ShenandoahGenerationType::NON_GEN)), \"OO sanity\");\n+#endif\n+  return _free_set->global_affiliated_regions();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGlobalGeneration.cpp","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -850,1 +850,0 @@\n-  assert(type() == ShenandoahGenerationType::OLD, \"OO sanity\");\n@@ -854,2 +853,4 @@\n-\n-\n+size_t ShenandoahOldGeneration::used_regions() const {\n+  assert(type() == ShenandoahGenerationType::OLD, \"OO sanity\");\n+  return _free_set->old_affiliated_regions();\n+}\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -333,0 +333,1 @@\n+  size_t used_regions() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -119,0 +119,5 @@\n+size_t ShenandoahYoungGeneration::used_regions() const {\n+  assert(type() == ShenandoahGenerationType::YOUNG, \"OO sanity\");\n+  return _free_set->young_affiliated_regions();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -80,0 +80,1 @@\n+  size_t used_regions() const override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahYoungGeneration.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}