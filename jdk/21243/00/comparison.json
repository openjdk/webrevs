{"files":[{"patch":"@@ -804,1 +804,9 @@\n-            writer.writeLocalVar(op, slot);\n+            int slot = this.slot;\n+            switch (op) {\n+                case ALOAD -> writer.aload(slot);\n+                case ILOAD -> writer.iload(slot);\n+                case LLOAD -> writer.lload(slot);\n+                case FLOAD -> writer.fload(slot);\n+                case DLOAD -> writer.dload(slot);\n+                default    -> throw new AssertionError();\n+            }\n@@ -835,1 +843,9 @@\n-            writer.writeLocalVar(op, slot);\n+            int slot = this.slot;\n+            switch (op) {\n+                case ASTORE -> writer.astore(slot);\n+                case ISTORE -> writer.istore(slot);\n+                case LSTORE -> writer.lstore(slot);\n+                case FSTORE -> writer.fstore(slot);\n+                case DSTORE -> writer.dstore(slot);\n+                default    -> throw new AssertionError();\n+            }\n@@ -1433,1 +1449,5 @@\n-            writer.writeLocalVar(op, slot);\n+            switch (op) {\n+                case RET   -> writer.ret(slot);\n+                case RET_W -> writer.retW(slot);\n+                default    -> throw new AssertionError();\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -58,1 +58,2 @@\n-        for (Attribute<?> a : attributes)\n+        for (int i = 0; i < attributes.size(); i++) {\n+            Attribute<?> a = attributes.get(i);\n@@ -60,1 +61,2 @@\n-                return (A)a;\n+                return (A) a;\n+        }\n@@ -65,2 +67,2 @@\n-        for (Attribute<?> a : attributes)\n-            if (a.attributeMapper() == am)\n+        for (int i = 0; i < attributes.size(); i++) {\n+            if (attributes.get(i).attributeMapper() == am)\n@@ -68,0 +70,1 @@\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AttributeHolder.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -114,0 +114,41 @@\n+    @ForceInline\n+    public void writeU2(int x1, int x2) {\n+        reserveSpace(2);\n+        byte[] elems = this.elems;\n+        int offset = this.offset;\n+        elems[offset    ] = (byte) x1;\n+        elems[offset + 1] = (byte) x2;\n+        this.offset = offset + 2;\n+    }\n+\n+    public void writeU3(int u1, int u2) {\n+        reserveSpace(3);\n+        byte[] elems = this.elems;\n+        int offset = this.offset;\n+        elems[offset    ] = (byte) u1;\n+        elems[offset + 1] = (byte) (u2 >> 8);\n+        elems[offset + 2] = (byte) u2;\n+        this.offset = offset + 3;\n+    }\n+\n+    public void writeU3(int x1, int x2, int x3) {\n+        reserveSpace(3);\n+        byte[] elems = this.elems;\n+        int offset = this.offset;\n+        elems[offset    ] = (byte) x1;\n+        elems[offset + 1] = (byte) x2;\n+        elems[offset + 2] = (byte) x3;\n+        this.offset = offset + 3;\n+    }\n+\n+    public void writeU4(int x1, int x2) {\n+        reserveSpace(4);\n+        byte[] elems = this.elems;\n+        int offset = this.offset;\n+        elems[offset    ] = (byte) (x1 >> 8);\n+        elems[offset + 1] = (byte) x1;\n+        elems[offset + 2] = (byte) (x2 >> 8);\n+        elems[offset + 3] = (byte) x2;\n+        this.offset = offset + 4;\n+    }\n+\n@@ -297,0 +338,8 @@\n+    public void writeIndex(int bytecode, PoolEntry entry) {\n+        int idx = AbstractPoolEntry.maybeClone(constantPool, entry).index();\n+        if (idx < 1 || idx > Character.MAX_VALUE)\n+            throw invalidIndex(idx, entry);\n+        writeU3(bytecode, idx);\n+    }\n+\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":49,"deletions":0,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -198,0 +198,11 @@\n+    public static int returnBytecode(TypeKind tk) {\n+        return switch (tk) {\n+            case BYTE, SHORT, INT, CHAR, BOOLEAN -> IRETURN;\n+            case FLOAT -> FRETURN;\n+            case LONG -> LRETURN;\n+            case DOUBLE -> DRETURN;\n+            case REFERENCE -> ARETURN;\n+            case VOID -> RETURN;\n+        };\n+    }\n+\n@@ -212,0 +223,14 @@\n+    public static int arrayLoadBytecode(TypeKind tk) {\n+        return switch (tk) {\n+            case BYTE, BOOLEAN -> BALOAD;\n+            case SHORT -> SALOAD;\n+            case INT -> IALOAD;\n+            case FLOAT -> FALOAD;\n+            case LONG -> LALOAD;\n+            case DOUBLE -> DALOAD;\n+            case REFERENCE -> AALOAD;\n+            case CHAR -> CALOAD;\n+            case VOID -> throw new IllegalArgumentException(\"void not an allowable array type\");\n+        };\n+    }\n+\n@@ -226,0 +251,14 @@\n+    public static int arrayStoreBytecode(TypeKind tk) {\n+        return switch (tk) {\n+            case BYTE, BOOLEAN -> BASTORE;\n+            case SHORT -> SASTORE;\n+            case INT -> IASTORE;\n+            case FLOAT -> FASTORE;\n+            case LONG -> LASTORE;\n+            case DOUBLE -> DASTORE;\n+            case REFERENCE -> AASTORE;\n+            case CHAR -> CASTORE;\n+            case VOID -> throw new IllegalArgumentException(\"void not an allowable array type\");\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":39,"deletions":0,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n@@ -65,1 +67,1 @@\n-import static java.lang.classfile.Opcode.*;\n+import static java.lang.classfile.ClassFile.*;\n@@ -211,2 +213,1 @@\n-                buf.writeU2(startPc);\n-                buf.writeU2(endPc);\n+                buf.writeU4(startPc, endPc);\n@@ -248,2 +249,1 @@\n-                                b.writeU2(start);\n-                                b.writeU2(end - 1);\n+                                b.writeU4(start, end - 1);\n@@ -318,2 +318,1 @@\n-                    buf.writeU2(originalAttribute.maxStack());\n-                    buf.writeU2(originalAttribute.maxLocals());\n+                    buf.writeU4(originalAttribute.maxStack(), originalAttribute.maxLocals());\n@@ -322,2 +321,1 @@\n-                    buf.writeU2(cntr.maxStack());\n-                    buf.writeU2(cntr.maxLocals());\n+                    buf.writeU4(cntr.maxStack(), cntr.maxLocals());\n@@ -332,2 +330,1 @@\n-                buf.writeU2(gen.maxStack());\n-                buf.writeU2(gen.maxLocals());\n+                buf.writeU4(gen.maxStack(), gen.maxLocals());\n@@ -408,2 +405,1 @@\n-                buf.writeU2(lastPc);\n-                buf.writeU2(lastLine);\n+                buf.writeU4(lastPc, lastLine);\n@@ -474,0 +470,14 @@\n+    private void writeLabelOffset(int nBytes, int instructionPc, Label label, int targetBci) {\n+        if (targetBci == -1) {\n+            int pc = bytecodesBufWriter.skip(nBytes);\n+            if (deferredLabels == null)\n+                deferredLabels = new ArrayList<>();\n+            deferredLabels.add(new DeferredLabel(pc, nBytes, instructionPc, label));\n+        }\n+        else {\n+            int branchOffset = targetBci - instructionPc;\n+            if (nBytes == 2 && (short)branchOffset != branchOffset) throw new LabelOverflowException();\n+            bytecodesBufWriter.writeIntBytes(nBytes, branchOffset);\n+        }\n+    }\n+\n@@ -497,10 +507,0 @@\n-    public void writeLocalVar(Opcode opcode, int localVar) {\n-        writeBytecode(opcode);\n-        switch (opcode.sizeIfFixed()) {\n-            case 1 -> { }\n-            case 2 -> bytecodesBufWriter.writeU1(localVar);\n-            case 4 -> bytecodesBufWriter.writeU2(localVar);\n-            default -> throw new IllegalArgumentException(\"Unexpected instruction size: \" + opcode);\n-        }\n-    }\n-\n@@ -508,7 +508,2 @@\n-        Opcode opcode = (slot < 256 && val < 128 && val > -127)\n-                        ? IINC\n-                        : IINC_W;\n-        writeBytecode(opcode);\n-        if (opcode.isWide()) {\n-            bytecodesBufWriter.writeU2(slot);\n-            bytecodesBufWriter.writeU2(val);\n+        if ((slot < 256 && val < 128 && val > -127)) {\n+            bytecodesBufWriter.writeU3(IINC, slot, val);\n@@ -516,2 +511,2 @@\n-            bytecodesBufWriter.writeU1(slot);\n-            bytecodesBufWriter.writeU1(val);\n+            bytecodesBufWriter.writeU2(WIDE, IINC);\n+            bytecodesBufWriter.writeU4(slot, val);\n@@ -529,2 +524,2 @@\n-            if (op == GOTO) {\n-                writeBytecode(GOTO_W);\n+            if (op == Opcode.GOTO) {\n+                bytecodesBufWriter.writeU1(GOTO_W);\n@@ -532,2 +527,2 @@\n-            } else if (op == JSR) {\n-                writeBytecode(JSR_W);\n+            } else if (op == Opcode.JSR) {\n+                bytecodesBufWriter.writeU1(JSR_W);\n@@ -539,1 +534,1 @@\n-                writeBytecode(GOTO_W);\n+                bytecodesBufWriter.writeU1(GOTO_W);\n@@ -551,1 +546,1 @@\n-        writeBytecode(LOOKUPSWITCH);\n+        bytecodesBufWriter.writeU1(LOOKUPSWITCH);\n@@ -572,1 +567,1 @@\n-        writeBytecode(TABLESWITCH);\n+        bytecodesBufWriter.writeU1(TABLESWITCH);\n@@ -589,2 +584,1 @@\n-        writeBytecode(opcode);\n-        bytecodesBufWriter.writeIndex(ref);\n+        bytecodesBufWriter.writeIndex(opcode.bytecode(), ref);\n@@ -594,2 +588,1 @@\n-        writeBytecode(opcode);\n-        bytecodesBufWriter.writeIndex(ref);\n+        bytecodesBufWriter.writeIndex(opcode.bytecode(), ref);\n@@ -601,4 +594,2 @@\n-        writeBytecode(opcode);\n-        bytecodesBufWriter.writeIndex(ref);\n-        bytecodesBufWriter.writeU1(count);\n-        bytecodesBufWriter.writeU1(0);\n+        bytecodesBufWriter.writeIndex(opcode.bytecode(), ref);\n+        bytecodesBufWriter.writeU2(count << 8);\n@@ -608,2 +599,1 @@\n-        writeBytecode(INVOKEDYNAMIC);\n-        bytecodesBufWriter.writeIndex(ref);\n+        bytecodesBufWriter.writeIndex(INVOKEDYNAMIC, ref);\n@@ -614,2 +604,1 @@\n-        writeBytecode(NEW);\n-        bytecodesBufWriter.writeIndex(type);\n+        bytecodesBufWriter.writeIndex(NEW, type);\n@@ -619,2 +608,1 @@\n-        writeBytecode(NEWARRAY);\n-        bytecodesBufWriter.writeU1(newArrayCode);\n+        bytecodesBufWriter.writeU2(NEWARRAY, newArrayCode);\n@@ -624,2 +612,1 @@\n-        writeBytecode(ANEWARRAY);\n-        bytecodesBufWriter.writeIndex(type);\n+        bytecodesBufWriter.writeIndex(ANEWARRAY, type);\n@@ -629,2 +616,1 @@\n-        writeBytecode(MULTIANEWARRAY);\n-        bytecodesBufWriter.writeIndex(type);\n+        bytecodesBufWriter.writeIndex(MULTIANEWARRAY, type);\n@@ -635,2 +621,1 @@\n-        writeBytecode(opcode);\n-        bytecodesBufWriter.writeIndex(type);\n+        bytecodesBufWriter.writeIndex(opcode.bytecode(), type);\n@@ -652,1 +637,0 @@\n-        Opcode op = opcode;\n@@ -654,1 +638,1 @@\n-            op = LDC2_W;\n+            opcode = Opcode.LDC2_W;\n@@ -656,1 +640,1 @@\n-            op = LDC_W;\n+            opcode = Opcode.LDC_W;\n@@ -658,2 +642,2 @@\n-        writeBytecode(op);\n-        if (op.sizeIfFixed() == 3) {\n+        bytecodesBufWriter.writeU1(opcode.bytecode());\n+        if (opcode.sizeIfFixed() == 3) {\n@@ -678,1 +662,5 @@\n-        else if (context == mruParent) {\n+        return labelToBci(context, lab);\n+    }\n+\n+    private int labelToBci(LabelContext context, LabelImpl lab) {\n+        if (context == mruParent) {\n@@ -789,0 +777,6 @@\n+    @Override\n+    public CodeBuilder return_() {\n+        bytecodesBufWriter.writeU1(RETURN);\n+        return this;\n+    }\n+\n@@ -791,1 +785,13 @@\n-        writeBytecode(BytecodeHelpers.returnOpcode(tk));\n+        bytecodesBufWriter.writeU1(returnBytecode(tk));\n+        return this;\n+    }\n+\n+    public CodeBuilder ret(int slot) {\n+        bytecodesBufWriter.writeU1(RET);\n+        bytecodesBufWriter.writeU1(slot);\n+        return this;\n+    }\n+\n+    public CodeBuilder retW(int slot) {\n+        bytecodesBufWriter.writeU2(WIDE, RET);\n+        bytecodesBufWriter.writeU2(slot);\n@@ -797,1 +803,22 @@\n-        writeLocalVar(BytecodeHelpers.storeOpcode(tk, slot), slot);\n+        return switch (tk) {\n+            case INT, SHORT, BYTE, CHAR, BOOLEAN\n+                           -> istore(slot);\n+            case LONG      -> lstore(slot);\n+            case DOUBLE    -> dstore(slot);\n+            case FLOAT     -> fstore(slot);\n+            case REFERENCE -> astore(slot);\n+            case VOID      -> throw new IllegalArgumentException(\"void\");\n+        };\n+    }\n+\n+    private void withLocal(int bytecode, int slot) {\n+        if (slot < 256) {\n+            bytecodesBufWriter.writeU2(bytecode, slot);\n+        } else {\n+            bytecodesBufWriter.writeU4((WIDE << 8) | bytecode, slot);\n+        }\n+    }\n+\n+    @Override\n+    public CodeBuilder labelBinding(Label label) {\n+        ((LabelImpl) label).writeTo(this);\n@@ -803,2 +830,9 @@\n-        writeLocalVar(BytecodeHelpers.loadOpcode(tk, slot), slot);\n-        return this;\n+        return switch (tk) {\n+            case INT, SHORT, BYTE, CHAR, BOOLEAN\n+                           -> iload(slot);\n+            case LONG      -> lload(slot);\n+            case DOUBLE    -> dload(slot);\n+            case FLOAT     -> fload(slot);\n+            case REFERENCE -> aload(slot);\n+            case VOID      -> throw new IllegalArgumentException(\"void\");\n+        };\n@@ -809,1 +843,1 @@\n-        if (opcode == INVOKEINTERFACE) {\n+        if (opcode == Opcode.INVOKEINTERFACE) {\n@@ -818,0 +852,24 @@\n+    @Override\n+    public CodeBuilder invokespecial(ClassDesc owner, String name, MethodTypeDesc type) {\n+        bytecodesBufWriter.writeIndex(INVOKESPECIAL, constantPool().methodRefEntry(owner, name, type));\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder invokestatic(ClassDesc owner, String name, MethodTypeDesc type) {\n+        bytecodesBufWriter.writeIndex(INVOKESTATIC, constantPool().methodRefEntry(owner, name, type));\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder invokevirtual(ClassDesc owner, String name, MethodTypeDesc type) {\n+        bytecodesBufWriter.writeIndex(INVOKEVIRTUAL, constantPool().methodRefEntry(owner, name, type));\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder getfield(ClassDesc owner, String name, ClassDesc type) {\n+        bytecodesBufWriter.writeIndex(GETFIELD, constantPool().fieldRefEntry(owner, name, type));\n+        return this;\n+    }\n+\n@@ -820,1 +878,1 @@\n-        writeFieldAccess(opcode, ref);\n+        bytecodesBufWriter.writeIndex(opcode.bytecode(), ref);\n@@ -826,1 +884,1 @@\n-        writeBytecode(BytecodeHelpers.arrayLoadOpcode(tk));\n+        bytecodesBufWriter.writeU1(BytecodeHelpers.arrayLoadBytecode(tk));\n@@ -832,1 +890,1 @@\n-        writeBytecode(BytecodeHelpers.arrayStoreOpcode(tk));\n+        bytecodesBufWriter.writeU1(BytecodeHelpers.arrayStoreBytecode(tk));\n@@ -844,1 +902,1 @@\n-        writeBytecode(NOP);\n+        bytecodesBufWriter.writeU1(NOP);\n@@ -850,1 +908,1 @@\n-        writeBytecode(ACONST_NULL);\n+        bytecodesBufWriter.writeU1(ACONST_NULL);\n@@ -856,1 +914,5 @@\n-        writeLocalVar(BytecodeHelpers.aload(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(ALOAD_0 + slot);\n+        } else {\n+            withLocal(ALOAD, slot);\n+        }\n@@ -868,1 +930,7 @@\n-        writeBytecode(ARRAYLENGTH);\n+        bytecodesBufWriter.writeU1(ARRAYLENGTH);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder areturn() {\n+        bytecodesBufWriter.writeU1(ARETURN);\n@@ -874,1 +942,5 @@\n-        writeLocalVar(BytecodeHelpers.astore(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(ASTORE_0 + slot);\n+        } else {\n+            withLocal(ASTORE, slot);\n+        }\n@@ -880,1 +952,1 @@\n-        writeBytecode(ATHROW);\n+        bytecodesBufWriter.writeU1(ATHROW);\n@@ -887,1 +959,1 @@\n-        writeArgumentConstant(BIPUSH, b);\n+        bytecodesBufWriter.writeU2(BIPUSH, b);\n@@ -893,1 +965,1 @@\n-        writeTypeCheck(CHECKCAST, type);\n+        bytecodesBufWriter.writeIndex(CHECKCAST, type);\n@@ -899,1 +971,1 @@\n-        writeBytecode(D2F);\n+        bytecodesBufWriter.writeU1(D2F);\n@@ -905,1 +977,1 @@\n-        writeBytecode(D2I);\n+        bytecodesBufWriter.writeU1(D2I);\n@@ -911,1 +983,1 @@\n-        writeBytecode(D2L);\n+        bytecodesBufWriter.writeU1(D2L);\n@@ -917,1 +989,1 @@\n-        writeBytecode(DADD);\n+        bytecodesBufWriter.writeU1(DADD);\n@@ -923,1 +995,1 @@\n-        writeBytecode(DCMPG);\n+        bytecodesBufWriter.writeU1(DCMPG);\n@@ -929,1 +1001,1 @@\n-        writeBytecode(DCMPL);\n+        bytecodesBufWriter.writeU1(DCMPL);\n@@ -935,1 +1007,1 @@\n-        writeBytecode(DCONST_0);\n+        bytecodesBufWriter.writeU1(DCONST_0);\n@@ -941,1 +1013,1 @@\n-        writeBytecode(DCONST_1);\n+        bytecodesBufWriter.writeU1(DCONST_1);\n@@ -947,1 +1019,1 @@\n-        writeBytecode(DDIV);\n+        bytecodesBufWriter.writeU1(DDIV);\n@@ -953,1 +1025,5 @@\n-        writeLocalVar(BytecodeHelpers.dload(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(DLOAD_0 + slot);\n+        } else {\n+            withLocal(DLOAD, slot);\n+        }\n@@ -959,1 +1035,1 @@\n-        writeBytecode(DMUL);\n+        bytecodesBufWriter.writeU1(DMUL);\n@@ -965,1 +1041,1 @@\n-        writeBytecode(DNEG);\n+        bytecodesBufWriter.writeU1(DNEG);\n@@ -971,1 +1047,7 @@\n-        writeBytecode(DREM);\n+        bytecodesBufWriter.writeU1(DREM);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder dreturn() {\n+        bytecodesBufWriter.writeU1(DRETURN);\n@@ -977,1 +1059,5 @@\n-        writeLocalVar(BytecodeHelpers.dstore(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(DSTORE_0 + slot);\n+        } else {\n+            withLocal(DSTORE, slot);\n+        }\n@@ -983,1 +1069,1 @@\n-        writeBytecode(DSUB);\n+        bytecodesBufWriter.writeU1(DSUB);\n@@ -989,1 +1075,1 @@\n-        writeBytecode(DUP);\n+        bytecodesBufWriter.writeU1(DUP);\n@@ -995,1 +1081,1 @@\n-        writeBytecode(DUP2);\n+        bytecodesBufWriter.writeU1(DUP2);\n@@ -1001,1 +1087,1 @@\n-        writeBytecode(DUP2_X1);\n+        bytecodesBufWriter.writeU1(DUP2_X1);\n@@ -1007,1 +1093,1 @@\n-        writeBytecode(DUP2_X2);\n+        bytecodesBufWriter.writeU1(DUP2_X2);\n@@ -1013,1 +1099,1 @@\n-        writeBytecode(DUP_X1);\n+        bytecodesBufWriter.writeU1(DUP_X1);\n@@ -1019,1 +1105,1 @@\n-        writeBytecode(DUP_X2);\n+        bytecodesBufWriter.writeU1(DUP_X2);\n@@ -1025,1 +1111,1 @@\n-        writeBytecode(F2D);\n+        bytecodesBufWriter.writeU1(F2D);\n@@ -1031,1 +1117,1 @@\n-        writeBytecode(F2I);\n+        bytecodesBufWriter.writeU1(F2I);\n@@ -1037,1 +1123,1 @@\n-        writeBytecode(F2L);\n+        bytecodesBufWriter.writeU1(F2L);\n@@ -1043,1 +1129,1 @@\n-        writeBytecode(FADD);\n+        bytecodesBufWriter.writeU1(FADD);\n@@ -1049,1 +1135,1 @@\n-        writeBytecode(FCMPG);\n+        bytecodesBufWriter.writeU1(FCMPG);\n@@ -1055,1 +1141,1 @@\n-        writeBytecode(FCMPL);\n+        bytecodesBufWriter.writeU1(FCMPL);\n@@ -1061,1 +1147,1 @@\n-        writeBytecode(FCONST_0);\n+        bytecodesBufWriter.writeU1(FCONST_0);\n@@ -1067,1 +1153,1 @@\n-        writeBytecode(FCONST_1);\n+        bytecodesBufWriter.writeU1(FCONST_1);\n@@ -1073,1 +1159,1 @@\n-        writeBytecode(FCONST_2);\n+        bytecodesBufWriter.writeU1(FCONST_2);\n@@ -1079,1 +1165,1 @@\n-        writeBytecode(FDIV);\n+        bytecodesBufWriter.writeU1(FDIV);\n@@ -1085,1 +1171,5 @@\n-        writeLocalVar(BytecodeHelpers.fload(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(FLOAD_0 + slot);\n+        } else {\n+            withLocal(FLOAD, slot);\n+        }\n@@ -1091,1 +1181,1 @@\n-        writeBytecode(FMUL);\n+        bytecodesBufWriter.writeU1(FMUL);\n@@ -1097,1 +1187,1 @@\n-        writeBytecode(FNEG);\n+        bytecodesBufWriter.writeU1(FNEG);\n@@ -1103,1 +1193,7 @@\n-        writeBytecode(FREM);\n+        bytecodesBufWriter.writeU1(FREM);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder freturn() {\n+        bytecodesBufWriter.writeU1(FRETURN);\n@@ -1109,1 +1205,5 @@\n-        writeLocalVar(BytecodeHelpers.fstore(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(FSTORE_0 + slot);\n+        } else {\n+            withLocal(FSTORE, slot);\n+        }\n@@ -1115,1 +1215,25 @@\n-        writeBytecode(FSUB);\n+        bytecodesBufWriter.writeU1(FSUB);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder getstatic(ClassDesc owner, String name, ClassDesc type) {\n+        bytecodesBufWriter.writeIndex(GETSTATIC, constantPool().fieldRefEntry(owner, name, type));\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder goto_(Label target) {\n+        int instructionPc = curPc();\n+        int targetBci = labelToBci(target);\n+        \/\/transform short-opcode forward jumps if enforced, and backward jumps if enabled and overflowing\n+        if ((targetBci == -1\n+                ? transformFwdJumps\n+                : (transformBackJumps\n+                && targetBci - instructionPc < Short.MIN_VALUE))) {\n+            bytecodesBufWriter.writeU2(GOTO_W);\n+            writeLabelOffset(4, instructionPc, target, targetBci);\n+        } else {\n+            bytecodesBufWriter.writeU1(GOTO);\n+            writeLabelOffset(2, instructionPc, target, targetBci);\n+        }\n@@ -1121,1 +1245,1 @@\n-        writeBytecode(I2B);\n+        bytecodesBufWriter.writeU1(I2B);\n@@ -1127,1 +1251,1 @@\n-        writeBytecode(I2C);\n+        bytecodesBufWriter.writeU1(I2C);\n@@ -1133,1 +1257,1 @@\n-        writeBytecode(I2D);\n+        bytecodesBufWriter.writeU1(I2D);\n@@ -1139,1 +1263,1 @@\n-        writeBytecode(I2F);\n+        bytecodesBufWriter.writeU1(I2F);\n@@ -1145,1 +1269,1 @@\n-        writeBytecode(I2L);\n+        bytecodesBufWriter.writeU1(I2L);\n@@ -1151,1 +1275,1 @@\n-        writeBytecode(I2S);\n+        bytecodesBufWriter.writeU1(I2S);\n@@ -1157,1 +1281,1 @@\n-        writeBytecode(IADD);\n+        bytecodesBufWriter.writeU1(IADD);\n@@ -1163,1 +1287,1 @@\n-        writeBytecode(IAND);\n+        bytecodesBufWriter.writeU1(IAND);\n@@ -1169,1 +1293,1 @@\n-        writeBytecode(ICONST_0);\n+        bytecodesBufWriter.writeU1(ICONST_0);\n@@ -1175,1 +1299,1 @@\n-        writeBytecode(ICONST_1);\n+        bytecodesBufWriter.writeU1(ICONST_1);\n@@ -1181,1 +1305,1 @@\n-        writeBytecode(ICONST_2);\n+        bytecodesBufWriter.writeU1(ICONST_2);\n@@ -1187,1 +1311,1 @@\n-        writeBytecode(ICONST_3);\n+        bytecodesBufWriter.writeU1(ICONST_3);\n@@ -1193,1 +1317,1 @@\n-        writeBytecode(ICONST_4);\n+        bytecodesBufWriter.writeU1(ICONST_4);\n@@ -1199,1 +1323,1 @@\n-        writeBytecode(ICONST_5);\n+        bytecodesBufWriter.writeU1(ICONST_5);\n@@ -1205,1 +1329,1 @@\n-        writeBytecode(ICONST_M1);\n+        bytecodesBufWriter.writeU1(ICONST_M1);\n@@ -1211,1 +1335,1 @@\n-        writeBytecode(IDIV);\n+        bytecodesBufWriter.writeU1(IDIV);\n@@ -1223,1 +1347,5 @@\n-        writeLocalVar(BytecodeHelpers.iload(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(ILOAD_0 + slot);\n+        } else {\n+            withLocal(ILOAD, slot);\n+        }\n@@ -1229,1 +1357,1 @@\n-        writeBytecode(IMUL);\n+        bytecodesBufWriter.writeU1(IMUL);\n@@ -1235,1 +1363,1 @@\n-        writeBytecode(INEG);\n+        bytecodesBufWriter.writeU1(INEG);\n@@ -1241,1 +1369,1 @@\n-        writeTypeCheck(INSTANCEOF, target);\n+        bytecodesBufWriter.writeIndex(INSTANCEOF, target);\n@@ -1253,1 +1381,1 @@\n-        writeInvokeInterface(INVOKEINTERFACE, ref, Util.parameterSlots(ref.typeSymbol()) + 1);\n+        writeInvokeInterface(Opcode.INVOKEINTERFACE, ref, Util.parameterSlots(ref.typeSymbol()) + 1);\n@@ -1259,1 +1387,1 @@\n-        writeInvokeNormal(INVOKESPECIAL, ref);\n+        bytecodesBufWriter.writeIndex(INVOKESPECIAL, ref);\n@@ -1265,1 +1393,1 @@\n-        writeInvokeNormal(INVOKESPECIAL, ref);\n+        bytecodesBufWriter.writeIndex(INVOKESPECIAL, ref);\n@@ -1271,1 +1399,1 @@\n-        writeInvokeNormal(INVOKESTATIC, ref);\n+        bytecodesBufWriter.writeIndex(INVOKESTATIC, ref);\n@@ -1277,1 +1405,1 @@\n-        writeInvokeNormal(INVOKESTATIC, ref);\n+        bytecodesBufWriter.writeIndex(INVOKESTATIC, ref);\n@@ -1283,1 +1411,1 @@\n-        writeInvokeNormal(INVOKEVIRTUAL, ref);\n+        bytecodesBufWriter.writeIndex(INVOKEVIRTUAL, ref);\n@@ -1289,1 +1417,1 @@\n-        writeBytecode(IOR);\n+        bytecodesBufWriter.writeU1(IOR);\n@@ -1295,1 +1423,7 @@\n-        writeBytecode(IREM);\n+        bytecodesBufWriter.writeU1(IREM);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder ireturn() {\n+        bytecodesBufWriter.writeU1(IRETURN);\n@@ -1301,1 +1435,1 @@\n-        writeBytecode(ISHL);\n+        bytecodesBufWriter.writeU1(ISHL);\n@@ -1307,1 +1441,1 @@\n-        writeBytecode(ISHR);\n+        bytecodesBufWriter.writeU1(ISHR);\n@@ -1313,1 +1447,5 @@\n-        writeLocalVar(BytecodeHelpers.istore(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(ISTORE_0 + slot);\n+        } else {\n+            withLocal(ISTORE, slot);\n+        }\n@@ -1319,1 +1457,1 @@\n-        writeBytecode(ISUB);\n+        bytecodesBufWriter.writeU1(ISUB);\n@@ -1325,1 +1463,1 @@\n-        writeBytecode(IUSHR);\n+        bytecodesBufWriter.writeU1(IUSHR);\n@@ -1331,1 +1469,1 @@\n-        writeBytecode(IXOR);\n+        bytecodesBufWriter.writeU1(IXOR);\n@@ -1343,1 +1481,1 @@\n-        writeBytecode(L2D);\n+        bytecodesBufWriter.writeU1(L2D);\n@@ -1349,1 +1487,1 @@\n-        writeBytecode(L2F);\n+        bytecodesBufWriter.writeU1(L2F);\n@@ -1355,1 +1493,1 @@\n-        writeBytecode(L2I);\n+        bytecodesBufWriter.writeU1(L2I);\n@@ -1361,1 +1499,1 @@\n-        writeBytecode(LADD);\n+        bytecodesBufWriter.writeU1(LADD);\n@@ -1367,1 +1505,1 @@\n-        writeBytecode(LAND);\n+        bytecodesBufWriter.writeU1(LAND);\n@@ -1373,1 +1511,1 @@\n-        writeBytecode(LCMP);\n+        bytecodesBufWriter.writeU1(LCMP);\n@@ -1379,1 +1517,1 @@\n-        writeBytecode(LCONST_0);\n+        bytecodesBufWriter.writeU1(LCONST_0);\n@@ -1385,1 +1523,1 @@\n-        writeBytecode(LCONST_1);\n+        bytecodesBufWriter.writeU1(LCONST_1);\n@@ -1397,1 +1535,1 @@\n-        writeBytecode(LDIV);\n+        bytecodesBufWriter.writeU1(LDIV);\n@@ -1403,1 +1541,5 @@\n-        writeLocalVar(BytecodeHelpers.lload(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(LLOAD_0 + slot);\n+        } else {\n+            withLocal(LLOAD, slot);\n+        }\n@@ -1409,1 +1551,1 @@\n-        writeBytecode(LMUL);\n+        bytecodesBufWriter.writeU1(LMUL);\n@@ -1415,1 +1557,1 @@\n-        writeBytecode(LNEG);\n+        bytecodesBufWriter.writeU1(LNEG);\n@@ -1421,1 +1563,1 @@\n-        writeBytecode(LOR);\n+        bytecodesBufWriter.writeU1(LOR);\n@@ -1427,1 +1569,7 @@\n-        writeBytecode(LREM);\n+        bytecodesBufWriter.writeU1(LREM);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder lreturn() {\n+        bytecodesBufWriter.writeU1(LRETURN);\n@@ -1433,1 +1581,1 @@\n-        writeBytecode(LSHL);\n+        bytecodesBufWriter.writeU1(LSHL);\n@@ -1439,1 +1587,1 @@\n-        writeBytecode(LSHR);\n+        bytecodesBufWriter.writeU1(LSHR);\n@@ -1445,1 +1593,5 @@\n-        writeLocalVar(BytecodeHelpers.lstore(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(LSTORE_0 + slot);\n+        } else {\n+            withLocal(LSTORE, slot);\n+        }\n@@ -1451,1 +1603,1 @@\n-        writeBytecode(LSUB);\n+        bytecodesBufWriter.writeU1(LSUB);\n@@ -1457,1 +1609,1 @@\n-        writeBytecode(LUSHR);\n+        bytecodesBufWriter.writeU1(LUSHR);\n@@ -1463,1 +1615,1 @@\n-        writeBytecode(LXOR);\n+        bytecodesBufWriter.writeU1(LXOR);\n@@ -1469,1 +1621,1 @@\n-        writeBytecode(MONITORENTER);\n+        bytecodesBufWriter.writeU1(MONITORENTER);\n@@ -1475,1 +1627,1 @@\n-        writeBytecode(MONITOREXIT);\n+        bytecodesBufWriter.writeU1(MONITOREXIT);\n@@ -1502,1 +1654,1 @@\n-        writeBytecode(POP);\n+        bytecodesBufWriter.writeU1(POP);\n@@ -1508,1 +1660,1 @@\n-        writeBytecode(POP2);\n+        bytecodesBufWriter.writeU1(POP2);\n@@ -1515,1 +1667,1 @@\n-        writeArgumentConstant(SIPUSH, s);\n+        bytecodesBufWriter.writeU3(SIPUSH, s);\n@@ -1521,1 +1673,1 @@\n-        writeBytecode(SWAP);\n+        bytecodesBufWriter.writeU1(SWAP);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":330,"deletions":178,"binary":false,"changes":508,"status":"modified"},{"patch":"@@ -1202,1 +1202,3 @@\n-        void writeTo(BufWriter out, Frame prevFrame, ConstantPoolBuilder cp) {\n+        void writeTo(BufWriterImpl out, Frame prevFrame, ConstantPoolBuilder cp) {\n+            int localsSize = this.localsSize;\n+            int stackSize = this.stackSize;\n@@ -1211,2 +1213,1 @@\n-                        out.writeU1(251 + diffLocalsSize);\n-                        out.writeU2(offsetDelta);\n+                        out.writeU3(251 + diffLocalsSize, offsetDelta);\n@@ -1221,2 +1222,1 @@\n-                    out.writeU1(247);\n-                    out.writeU2(offsetDelta);\n+                    out.writeU3(247, offsetDelta);\n@@ -1228,2 +1228,1 @@\n-            out.writeU1(255);\n-            out.writeU2(offsetDelta);\n+            out.writeU3(255, offsetDelta);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}