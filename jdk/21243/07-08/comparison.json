{"files":[{"patch":"@@ -281,0 +281,23 @@\n+    public static int reverseBranchOpcode(int bytecode) {\n+        return switch (bytecode) {\n+            case IFEQ -> IFNE;\n+            case IFNE -> IFEQ;\n+            case IFLT -> IFGE;\n+            case IFGE -> IFLT;\n+            case IFGT -> IFLE;\n+            case IFLE -> IFGT;\n+            case IF_ICMPEQ -> IF_ICMPNE;\n+            case IF_ICMPNE -> IF_ICMPEQ;\n+            case IF_ICMPLT -> IF_ICMPGE;\n+            case IF_ICMPGE -> IF_ICMPLT;\n+            case IF_ICMPGT -> IF_ICMPLE;\n+            case IF_ICMPLE -> IF_ICMPGT;\n+            case IF_ACMPEQ -> IF_ACMPNE;\n+            case IF_ACMPNE -> IF_ACMPEQ;\n+            case IFNULL -> IFNONNULL;\n+            case IFNONNULL -> IFNULL;\n+            default -> throw new IllegalArgumentException(\n+                    String.format(\"Wrong opcode kind specified; found %d, expected %s\", bytecode, Opcode.Kind.BRANCH));\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -543,0 +543,8 @@\n+        if (op.sizeIfFixed() == 3) {\n+            writeBranchSizeFixed3(op.bytecode(), target);\n+        } else {\n+            writeBranchW(op, target);\n+        }\n+    }\n+\n+    private void writeBranchSizeFixed3(int bytecode, Label target) {\n@@ -545,1 +553,0 @@\n-        boolean sizeFixed3 = op.sizeIfFixed() == 3;\n@@ -547,1 +554,1 @@\n-        if (sizeFixed3 && (targetBci == -1\n+        if (targetBci == -1\n@@ -549,2 +556,2 @@\n-                : (transformBackJumps && targetBci - instructionPc < Short.MIN_VALUE))) {\n-            writeBranchTransform(op, target, instructionPc, targetBci);\n+                : (transformBackJumps && targetBci - instructionPc < Short.MIN_VALUE)) {\n+            writeBranchTransform(bytecode, target, instructionPc, targetBci);\n@@ -552,2 +559,2 @@\n-            writeBytecode(op);\n-            writeLabelOffset(sizeFixed3 ? 2 : 4, instructionPc, target, targetBci);\n+            bytecodesBufWriter.writeU1(bytecode);\n+            writeLabelOffset(2, instructionPc, target, targetBci);\n@@ -557,2 +564,8 @@\n-    private void writeBranchTransform(Opcode op, Label target, int instructionPc, int targetBci) {\n-        if (op == Opcode.GOTO) {\n+    private void writeBranchW(Opcode op, Label target) {\n+        int instructionPc = curPc();\n+        writeBytecode(op);\n+        writeLabelOffset(4, instructionPc, target, labelToBci(target));\n+    }\n+\n+    private void writeBranchTransform(int bytecode, Label target, int instructionPc, int targetBci) {\n+        if (bytecode == GOTO) {\n@@ -561,1 +574,1 @@\n-        } else if (op == Opcode.JSR) {\n+        } else if (bytecode == JSR) {\n@@ -565,1 +578,1 @@\n-            writeBytecode(BytecodeHelpers.reverseBranchOpcode(op));\n+            bytecodesBufWriter.writeU1(BytecodeHelpers.reverseBranchOpcode(bytecode));\n@@ -1256,13 +1269,1 @@\n-        int instructionPc = curPc();\n-        int targetBci = labelToBci(target);\n-        \/\/transform short-opcode forward jumps if enforced, and backward jumps if enabled and overflowing\n-        if ((targetBci == -1\n-                ? transformFwdJumps\n-                : (transformBackJumps\n-                && targetBci - instructionPc < Short.MIN_VALUE))) {\n-            bytecodesBufWriter.writeU2(GOTO_W);\n-            writeLabelOffset(4, instructionPc, target, targetBci);\n-        } else {\n-            bytecodesBufWriter.writeU1(GOTO);\n-            writeLabelOffset(2, instructionPc, target, targetBci);\n-        }\n+        writeBranchSizeFixed3(GOTO, target);\n@@ -1368,0 +1369,96 @@\n+    @Override\n+    public CodeBuilder if_acmpeq(Label target) {\n+        writeBranchSizeFixed3(IF_ACMPEQ, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder if_acmpne(Label target) {\n+        writeBranchSizeFixed3(IF_ACMPNE, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder if_icmpeq(Label target) {\n+        writeBranchSizeFixed3(IF_ICMPEQ, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder if_icmpge(Label target) {\n+        writeBranchSizeFixed3(IF_ICMPGE, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder if_icmpgt(Label target) {\n+        writeBranchSizeFixed3(IF_ICMPGT, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder if_icmple(Label target) {\n+        writeBranchSizeFixed3(IF_ICMPLE, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder if_icmplt(Label target) {\n+        writeBranchSizeFixed3(IF_ICMPLT, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder if_icmpne(Label target) {\n+        writeBranchSizeFixed3(IF_ICMPNE, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder ifnonnull(Label target) {\n+        writeBranchSizeFixed3(IFNONNULL, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder ifnull(Label target) {\n+        writeBranchSizeFixed3(IFNULL, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder ifeq(Label target) {\n+        writeBranchSizeFixed3(IFEQ, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder ifge(Label target) {\n+        writeBranchSizeFixed3(IFGE, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder ifgt(Label target) {\n+        writeBranchSizeFixed3(IFGT, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder ifle(Label target) {\n+        writeBranchSizeFixed3(IFLE, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder iflt(Label target) {\n+        writeBranchSizeFixed3(IFLT, target);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder ifne(Label target) {\n+        writeBranchSizeFixed3(IFNE, target);\n+        return this;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":120,"deletions":23,"binary":false,"changes":143,"status":"modified"}]}