{"files":[{"patch":"@@ -804,1 +804,6 @@\n-            writer.writeLocalVar(op, slot);\n+            var op = this.op;\n+            if (op.sizeIfFixed() == 1) {\n+                writer.writeBytecode(op);\n+            } else {\n+                writer.writeLocalVar(op, slot);\n+            }\n@@ -835,1 +840,6 @@\n-            writer.writeLocalVar(op, slot);\n+            var op = this.op;\n+            if (op.sizeIfFixed() == 1) {\n+                writer.writeBytecode(op);\n+            } else {\n+                writer.writeLocalVar(op, slot);\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -58,1 +58,2 @@\n-        for (Attribute<?> a : attributes)\n+        for (int i = 0; i < attributes.size(); i++) {\n+            Attribute<?> a = attributes.get(i);\n@@ -60,1 +61,2 @@\n-                return (A)a;\n+                return (A) a;\n+        }\n@@ -65,2 +67,2 @@\n-        for (Attribute<?> a : attributes)\n-            if (a.attributeMapper() == am)\n+        for (int i = 0; i < attributes.size(); i++) {\n+            if (attributes.get(i).attributeMapper() == am)\n@@ -68,0 +70,1 @@\n+        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AttributeHolder.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -114,0 +114,52 @@\n+    @ForceInline\n+    public void writeU1U1(int x1, int x2) {\n+        reserveSpace(2);\n+        byte[] elems = this.elems;\n+        int offset = this.offset;\n+        elems[offset    ] = (byte) x1;\n+        elems[offset + 1] = (byte) x2;\n+        this.offset = offset + 2;\n+    }\n+\n+    public void writeU1U2(int u1, int u2) {\n+        reserveSpace(3);\n+        byte[] elems = this.elems;\n+        int offset = this.offset;\n+        elems[offset    ] = (byte) u1;\n+        elems[offset + 1] = (byte) (u2 >> 8);\n+        elems[offset + 2] = (byte) u2;\n+        this.offset = offset + 3;\n+    }\n+\n+    public void writeU1U1U1(int x1, int x2, int x3) {\n+        reserveSpace(3);\n+        byte[] elems = this.elems;\n+        int offset = this.offset;\n+        elems[offset    ] = (byte) x1;\n+        elems[offset + 1] = (byte) x2;\n+        elems[offset + 2] = (byte) x3;\n+        this.offset = offset + 3;\n+    }\n+\n+    public void writeU1U1U2(int x1, int x2, int x3) {\n+        reserveSpace(4);\n+        byte[] elems = this.elems;\n+        int offset = this.offset;\n+        elems[offset    ] = (byte) x1;\n+        elems[offset + 1] = (byte) x2;\n+        elems[offset + 2] = (byte) (x3 >> 8);\n+        elems[offset + 3] = (byte) x3;\n+        this.offset = offset + 4;\n+    }\n+\n+    public void writeU2U2(int x1, int x2) {\n+        reserveSpace(4);\n+        byte[] elems = this.elems;\n+        int offset = this.offset;\n+        elems[offset    ] = (byte) (x1 >> 8);\n+        elems[offset + 1] = (byte) x1;\n+        elems[offset + 2] = (byte) (x2 >> 8);\n+        elems[offset + 3] = (byte) x2;\n+        this.offset = offset + 4;\n+    }\n+\n@@ -288,3 +340,1 @@\n-    @ForceInline\n-    @Override\n-    public void writeIndex(PoolEntry entry) {\n+    public int cpIndex(PoolEntry entry) {\n@@ -294,1 +344,11 @@\n-        writeU2(idx);\n+        return idx;\n+    }\n+\n+    @ForceInline\n+    @Override\n+    public void writeIndex(PoolEntry entry) {\n+        writeU2(cpIndex(entry));\n+    }\n+\n+    public void writeIndex(int bytecode, PoolEntry entry) {\n+        writeU1U2(bytecode, cpIndex(entry));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufWriterImpl.java","additions":64,"deletions":4,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -198,0 +198,5 @@\n+    public static int returnBytecode(TypeKind tk) {\n+        int kind = Math.max(0, tk.ordinal() - 4); \/\/ BYTE, SHORT, CHAR, BOOLEAN becomes INT\n+        return IRETURN + kind;\n+    }\n+\n@@ -212,0 +217,14 @@\n+    public static int arrayLoadBytecode(TypeKind tk) {\n+        return switch (tk) {\n+            case BYTE, BOOLEAN -> BALOAD;\n+            case SHORT -> SALOAD;\n+            case INT -> IALOAD;\n+            case FLOAT -> FALOAD;\n+            case LONG -> LALOAD;\n+            case DOUBLE -> DALOAD;\n+            case REFERENCE -> AALOAD;\n+            case CHAR -> CALOAD;\n+            case VOID -> throw new IllegalArgumentException(\"void not an allowable array type\");\n+        };\n+    }\n+\n@@ -226,0 +245,14 @@\n+    public static int arrayStoreBytecode(TypeKind tk) {\n+        return switch (tk) {\n+            case BYTE, BOOLEAN -> BASTORE;\n+            case SHORT -> SASTORE;\n+            case INT -> IASTORE;\n+            case FLOAT -> FASTORE;\n+            case LONG -> LASTORE;\n+            case DOUBLE -> DASTORE;\n+            case REFERENCE -> AASTORE;\n+            case CHAR -> CASTORE;\n+            case VOID -> throw new IllegalArgumentException(\"void not an allowable array type\");\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":33,"deletions":0,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n@@ -55,1 +57,0 @@\n-import java.lang.constant.ConstantDesc;\n@@ -57,0 +58,1 @@\n+import java.util.Arrays;\n@@ -65,2 +67,0 @@\n-import static java.lang.classfile.Opcode.*;\n-\n@@ -68,0 +68,1 @@\n+import static jdk.internal.classfile.impl.RawBytecodeHelper.*;\n@@ -72,1 +73,7 @@\n-    private final List<CharacterRange> characterRanges = new ArrayList<>();\n+    private static final CharacterRange[] EMPTY_CHARACTER_RANGE = new CharacterRange[0];\n+    private static final DeferredLabel[] EMPTY_LABEL_ARRAY = new DeferredLabel[0];\n+    private static final LocalVariable[] EMPTY_LOCAL_VARIABLE_ARRAY = new LocalVariable[0];\n+    private static final LocalVariableType[] EMPTY_LOCAL_VARIABLE_TYPE_ARRAY = new LocalVariableType[0];\n+    private static final AbstractPseudoInstruction.ExceptionCatchImpl[] EMPTY_HANDLER_ARRAY = new AbstractPseudoInstruction.ExceptionCatchImpl[0];\n+    private static final DeferredLabel[] EMPTY_DEFERRED_LABEL_ARRAY = new DeferredLabel[0];\n+\n@@ -74,2 +81,6 @@\n-    private final List<LocalVariable> localVariables = new ArrayList<>();\n-    private final List<LocalVariableType> localVariableTypes = new ArrayList<>();\n+    private CharacterRange[] characterRanges = EMPTY_CHARACTER_RANGE;\n+    private LocalVariable[] localVariables = EMPTY_LOCAL_VARIABLE_ARRAY;\n+    private LocalVariableType[] localVariableTypes = EMPTY_LOCAL_VARIABLE_TYPE_ARRAY;\n+    private int characterRangesCount = 0;\n+    private int localVariablesCount = 0;\n+    private int localVariableTypesCount = 0;\n@@ -86,1 +97,2 @@\n-    List<DeferredLabel> deferredLabels;\n+    private DeferredLabel[] deferredLabels = EMPTY_DEFERRED_LABEL_ARRAY;\n+    private int deferredLabelsCount = 0;\n@@ -211,2 +223,1 @@\n-                buf.writeU2(startPc);\n-                buf.writeU2(endPc);\n+                buf.writeU2U2(startPc, endPc);\n@@ -230,1 +241,1 @@\n-            if (!characterRanges.isEmpty()) {\n+            if (characterRangesCount > 0) {\n@@ -236,1 +247,1 @@\n-                        int crSize = characterRanges.size();\n+                        int crSize = characterRangesCount;\n@@ -238,1 +249,2 @@\n-                        for (CharacterRange cr : characterRanges) {\n+                        for (int i = 0; i < characterRangesCount; i++) {\n+                            CharacterRange cr = characterRanges[i];\n@@ -248,2 +260,1 @@\n-                                b.writeU2(start);\n-                                b.writeU2(end - 1);\n+                                b.writeU2U2(start, end - 1);\n@@ -255,1 +266,1 @@\n-                        if (crSize < characterRanges.size())\n+                        if (crSize < characterRangesCount)\n@@ -262,1 +273,1 @@\n-            if (!localVariables.isEmpty()) {\n+            if (localVariablesCount > 0) {\n@@ -267,1 +278,1 @@\n-                        int lvSize = localVariables.size();\n+                        int lvSize = localVariablesCount;\n@@ -269,1 +280,2 @@\n-                        for (LocalVariable l : localVariables) {\n+                        for (int i = 0; i < localVariablesCount; i++) {\n+                            LocalVariable l = localVariables[i];\n@@ -278,1 +290,1 @@\n-                        if (lvSize < localVariables.size())\n+                        if (lvSize < localVariablesCount)\n@@ -285,1 +297,1 @@\n-            if (!localVariableTypes.isEmpty()) {\n+            if (localVariableTypesCount > 0) {\n@@ -290,3 +302,4 @@\n-                        int lvtSize = localVariableTypes.size();\n-                        b.writeU2(localVariableTypes.size());\n-                        for (LocalVariableType l : localVariableTypes) {\n+                        int lvtSize = localVariableTypesCount;\n+                        b.writeU2(lvtSize);\n+                        for (int i = 0; i < localVariableTypesCount; i++) {\n+                            LocalVariableType l = localVariableTypes[i];\n@@ -301,1 +314,1 @@\n-                        if (lvtSize < localVariableTypes.size())\n+                        if (lvtSize < localVariableTypesCount)\n@@ -318,2 +331,1 @@\n-                    buf.writeU2(originalAttribute.maxStack());\n-                    buf.writeU2(originalAttribute.maxLocals());\n+                    buf.writeU2U2(originalAttribute.maxStack(), originalAttribute.maxLocals());\n@@ -322,2 +334,1 @@\n-                    buf.writeU2(cntr.maxStack());\n-                    buf.writeU2(cntr.maxLocals());\n+                    buf.writeU2U2(cntr.maxStack(), cntr.maxLocals());\n@@ -332,2 +343,1 @@\n-                buf.writeU2(gen.maxStack());\n-                buf.writeU2(gen.maxLocals());\n+                buf.writeU2U2(gen.maxStack(), gen.maxLocals());\n@@ -408,2 +418,1 @@\n-                buf.writeU2(lastPc);\n-                buf.writeU2(lastLine);\n+                buf.writeU2U2(lastPc, lastLine);\n@@ -463,3 +472,13 @@\n-            if (deferredLabels == null)\n-                deferredLabels = new ArrayList<>();\n-            deferredLabels.add(new DeferredLabel(pc, nBytes, instructionPc, label));\n+            addLabel(new DeferredLabel(pc, nBytes, instructionPc, label));\n+        }\n+        else {\n+            int branchOffset = targetBci - instructionPc;\n+            if (nBytes == 2 && (short)branchOffset != branchOffset) throw new LabelOverflowException();\n+            bytecodesBufWriter.writeIntBytes(nBytes, branchOffset);\n+        }\n+    }\n+\n+    private void writeLabelOffset(int nBytes, int instructionPc, Label label, int targetBci) {\n+        if (targetBci == -1) {\n+            int pc = bytecodesBufWriter.skip(nBytes);\n+            addLabel(new DeferredLabel(pc, nBytes, instructionPc, label));\n@@ -475,10 +494,9 @@\n-        if (deferredLabels != null) {\n-            for (DeferredLabel dl : deferredLabels) {\n-                int branchOffset = labelToBci(dl.label) - dl.instructionPc;\n-                if (dl.size == 2) {\n-                    if ((short)branchOffset != branchOffset) throw new LabelOverflowException();\n-                    bytecodesBufWriter.patchU2(dl.labelPc, branchOffset);\n-                } else {\n-                    assert dl.size == 4;\n-                    bytecodesBufWriter.patchInt(dl.labelPc, branchOffset);\n-                }\n+        for (int i = 0; i < deferredLabelsCount; i++) {\n+            DeferredLabel dl = deferredLabels[i];\n+            int branchOffset = labelToBci(dl.label) - dl.instructionPc;\n+            if (dl.size == 2) {\n+                if ((short) branchOffset != branchOffset) throw new LabelOverflowException();\n+                bytecodesBufWriter.patchU2(dl.labelPc, branchOffset);\n+            } else {\n+                assert dl.size == 4;\n+                bytecodesBufWriter.patchInt(dl.labelPc, branchOffset);\n@@ -492,0 +510,6 @@\n+        assert !opcode.isWide();\n+        bytecodesBufWriter.writeU1(opcode.bytecode());\n+    }\n+\n+    \/\/ Instruction version, refer to opcode\n+    public void writeLocalVar(Opcode opcode, int slot) {\n@@ -493,1 +517,1 @@\n-            bytecodesBufWriter.writeU2(opcode.bytecode());\n+            bytecodesBufWriter.writeU2U2(opcode.bytecode(), slot);\n@@ -495,1 +519,1 @@\n-            bytecodesBufWriter.writeU1(opcode.bytecode());\n+            bytecodesBufWriter.writeU1U1(opcode.bytecode(), slot);\n@@ -499,7 +523,7 @@\n-    public void writeLocalVar(Opcode opcode, int localVar) {\n-        writeBytecode(opcode);\n-        switch (opcode.sizeIfFixed()) {\n-            case 1 -> { }\n-            case 2 -> bytecodesBufWriter.writeU1(localVar);\n-            case 4 -> bytecodesBufWriter.writeU2(localVar);\n-            default -> throw new IllegalArgumentException(\"Unexpected instruction size: \" + opcode);\n+    \/\/ Shortcut version, refer to and validate slot\n+    private void writeLocalVar(int bytecode, int slot) {\n+        \/\/ TODO validation like (slot & 0xFFFF) == slot\n+        if (slot < 256) {\n+            bytecodesBufWriter.writeU1U1(bytecode, slot);\n+        } else {\n+            bytecodesBufWriter.writeU1U1U2(WIDE, bytecode, slot);\n@@ -510,7 +534,2 @@\n-        Opcode opcode = (slot < 256 && val < 128 && val > -127)\n-                        ? IINC\n-                        : IINC_W;\n-        writeBytecode(opcode);\n-        if (opcode.isWide()) {\n-            bytecodesBufWriter.writeU2(slot);\n-            bytecodesBufWriter.writeU2(val);\n+        if ((slot < 256 && val < 128 && val > -127)) {\n+            bytecodesBufWriter.writeU1U1U1(IINC, slot, val);\n@@ -518,2 +537,2 @@\n-            bytecodesBufWriter.writeU1(slot);\n-            bytecodesBufWriter.writeU1(val);\n+            bytecodesBufWriter.writeU1U1(WIDE, IINC);\n+            bytecodesBufWriter.writeU2U2(slot, val);\n@@ -526,0 +545,1 @@\n+        boolean sizeFixed3 = op.sizeIfFixed() == 3;\n@@ -527,18 +547,4 @@\n-        if (op.sizeIfFixed() == 3 && (targetBci == -1\n-                                      ? transformFwdJumps\n-                                      : (transformBackJumps\n-                                         && targetBci - instructionPc < Short.MIN_VALUE))) {\n-            if (op == GOTO) {\n-                writeBytecode(GOTO_W);\n-                writeLabelOffset(4, instructionPc, target);\n-            } else if (op == JSR) {\n-                writeBytecode(JSR_W);\n-                writeLabelOffset(4, instructionPc, target);\n-            } else {\n-                writeBytecode(BytecodeHelpers.reverseBranchOpcode(op));\n-                Label bypassJump = newLabel();\n-                writeLabelOffset(2, instructionPc, bypassJump);\n-                writeBytecode(GOTO_W);\n-                writeLabelOffset(4, instructionPc + 3, target);\n-                labelBinding(bypassJump);\n-            }\n+        if (sizeFixed3 && (targetBci == -1\n+                ? transformFwdJumps\n+                : (transformBackJumps && targetBci - instructionPc < Short.MIN_VALUE))) {\n+            writeBranchTransform(op, target, instructionPc, targetBci);\n@@ -547,1 +553,18 @@\n-            writeLabelOffset(op.sizeIfFixed() == 3 ? 2 : 4, instructionPc, target);\n+            writeLabelOffset(sizeFixed3 ? 2 : 4, instructionPc, target, targetBci);\n+        }\n+    }\n+\n+    private void writeBranchTransform(Opcode op, Label target, int instructionPc, int targetBci) {\n+        if (op == Opcode.GOTO) {\n+            bytecodesBufWriter.writeU1(GOTO_W);\n+            writeLabelOffset(4, instructionPc, target, targetBci);\n+        } else if (op == Opcode.JSR) {\n+            bytecodesBufWriter.writeU1(JSR_W);\n+            writeLabelOffset(4, instructionPc, target, targetBci);\n+        } else {\n+            writeBytecode(BytecodeHelpers.reverseBranchOpcode(op));\n+            Label bypassJump = newLabel();\n+            writeLabelOffset(2, instructionPc, bypassJump);\n+            bytecodesBufWriter.writeU1(GOTO_W);\n+            writeLabelOffset(4, instructionPc + 3, target);\n+            labelBinding(bypassJump);\n@@ -553,1 +576,1 @@\n-        writeBytecode(LOOKUPSWITCH);\n+        bytecodesBufWriter.writeU1(LOOKUPSWITCH);\n@@ -574,1 +597,1 @@\n-        writeBytecode(TABLESWITCH);\n+        bytecodesBufWriter.writeU1(TABLESWITCH);\n@@ -591,2 +614,1 @@\n-        writeBytecode(opcode);\n-        bytecodesBufWriter.writeIndex(ref);\n+        bytecodesBufWriter.writeIndex(opcode.bytecode(), ref);\n@@ -596,2 +618,1 @@\n-        writeBytecode(opcode);\n-        bytecodesBufWriter.writeIndex(ref);\n+        bytecodesBufWriter.writeIndex(opcode.bytecode(), ref);\n@@ -603,4 +624,2 @@\n-        writeBytecode(opcode);\n-        bytecodesBufWriter.writeIndex(ref);\n-        bytecodesBufWriter.writeU1(count);\n-        bytecodesBufWriter.writeU1(0);\n+        bytecodesBufWriter.writeIndex(opcode.bytecode(), ref);\n+        bytecodesBufWriter.writeU1U1(count, 0);\n@@ -610,2 +629,1 @@\n-        writeBytecode(INVOKEDYNAMIC);\n-        bytecodesBufWriter.writeIndex(ref);\n+        bytecodesBufWriter.writeIndex(INVOKEDYNAMIC, ref);\n@@ -616,2 +634,1 @@\n-        writeBytecode(NEW);\n-        bytecodesBufWriter.writeIndex(type);\n+        bytecodesBufWriter.writeIndex(NEW, type);\n@@ -621,2 +638,1 @@\n-        writeBytecode(NEWARRAY);\n-        bytecodesBufWriter.writeU1(newArrayCode);\n+        bytecodesBufWriter.writeU1U1(NEWARRAY, newArrayCode);\n@@ -626,2 +642,1 @@\n-        writeBytecode(ANEWARRAY);\n-        bytecodesBufWriter.writeIndex(type);\n+        bytecodesBufWriter.writeIndex(ANEWARRAY, type);\n@@ -631,2 +646,1 @@\n-        writeBytecode(MULTIANEWARRAY);\n-        bytecodesBufWriter.writeIndex(type);\n+        bytecodesBufWriter.writeIndex(MULTIANEWARRAY, type);\n@@ -637,2 +651,1 @@\n-        writeBytecode(opcode);\n-        bytecodesBufWriter.writeIndex(type);\n+        bytecodesBufWriter.writeIndex(opcode.bytecode(), type);\n@@ -642,1 +655,0 @@\n-        writeBytecode(opcode);\n@@ -644,1 +656,1 @@\n-            bytecodesBufWriter.writeU2(value);\n+            bytecodesBufWriter.writeU1U2(opcode.bytecode(), value);\n@@ -646,1 +658,1 @@\n-            bytecodesBufWriter.writeU1(value);\n+            bytecodesBufWriter.writeU1U1(opcode.bytecode(), value);\n@@ -654,1 +666,0 @@\n-        Opcode op = opcode;\n@@ -656,1 +667,1 @@\n-            op = LDC2_W;\n+            opcode = Opcode.LDC2_W;\n@@ -658,1 +669,1 @@\n-            op = LDC_W;\n+            opcode = Opcode.LDC_W;\n@@ -660,2 +671,2 @@\n-        writeBytecode(op);\n-        if (op.sizeIfFixed() == 3) {\n+        bytecodesBufWriter.writeU1(opcode.bytecode());\n+        if (opcode.sizeIfFixed() == 3) {\n@@ -680,1 +691,5 @@\n-        else if (context == mruParent) {\n+        return labelToBci(context, lab);\n+    }\n+\n+    private int labelToBci(LabelContext context, LabelImpl lab) {\n+        if (context == mruParent) {\n@@ -754,1 +769,13 @@\n-        characterRanges.add(element);\n+        if (characterRangesCount >= characterRanges.length) {\n+            int newCapacity = characterRangesCount + 8;\n+            this.characterRanges = Arrays.copyOf(characterRanges, newCapacity);\n+        }\n+        characterRanges[characterRangesCount++] = element;\n+    }\n+\n+    public void addLabel(DeferredLabel label) {\n+        if (deferredLabelsCount >= deferredLabels.length) {\n+            int newCapacity = deferredLabelsCount + 8;\n+            this.deferredLabels = Arrays.copyOf(deferredLabels, newCapacity);\n+        }\n+        deferredLabels[deferredLabelsCount++] = label;\n@@ -766,1 +793,5 @@\n-        localVariables.add(element);\n+        if (localVariablesCount >= localVariables.length) {\n+            int newCapacity = localVariablesCount + 8;\n+            this.localVariables = Arrays.copyOf(localVariables, newCapacity);\n+        }\n+        localVariables[localVariablesCount++] = element;\n@@ -770,1 +801,5 @@\n-        localVariableTypes.add(element);\n+        if (localVariableTypesCount >= localVariableTypes.length) {\n+            int newCapacity = localVariableTypesCount + 8;\n+            this.localVariableTypes = Arrays.copyOf(localVariableTypes, newCapacity);\n+        }\n+        localVariableTypes[localVariableTypesCount++] = element;\n@@ -791,0 +826,6 @@\n+    @Override\n+    public CodeBuilder return_() {\n+        bytecodesBufWriter.writeU1(RETURN);\n+        return this;\n+    }\n+\n@@ -793,1 +834,1 @@\n-        writeBytecode(BytecodeHelpers.returnOpcode(tk));\n+        bytecodesBufWriter.writeU1(returnBytecode(tk));\n@@ -799,1 +840,14 @@\n-        writeLocalVar(BytecodeHelpers.storeOpcode(tk, slot), slot);\n+        return switch (tk) {\n+            case INT, SHORT, BYTE, CHAR, BOOLEAN\n+                           -> istore(slot);\n+            case LONG      -> lstore(slot);\n+            case DOUBLE    -> dstore(slot);\n+            case FLOAT     -> fstore(slot);\n+            case REFERENCE -> astore(slot);\n+            case VOID      -> throw new IllegalArgumentException(\"void\");\n+        };\n+    }\n+\n+    @Override\n+    public CodeBuilder labelBinding(Label label) {\n+        ((LabelImpl) label).writeTo(this);\n@@ -805,2 +859,9 @@\n-        writeLocalVar(BytecodeHelpers.loadOpcode(tk, slot), slot);\n-        return this;\n+        return switch (tk) {\n+            case INT, SHORT, BYTE, CHAR, BOOLEAN\n+                           -> iload(slot);\n+            case LONG      -> lload(slot);\n+            case DOUBLE    -> dload(slot);\n+            case FLOAT     -> fload(slot);\n+            case REFERENCE -> aload(slot);\n+            case VOID      -> throw new IllegalArgumentException(\"void\");\n+        };\n@@ -811,1 +872,1 @@\n-        if (opcode == INVOKEINTERFACE) {\n+        if (opcode == Opcode.INVOKEINTERFACE) {\n@@ -820,0 +881,24 @@\n+    @Override\n+    public CodeBuilder invokespecial(ClassDesc owner, String name, MethodTypeDesc type) {\n+        bytecodesBufWriter.writeIndex(INVOKESPECIAL, constantPool().methodRefEntry(owner, name, type));\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder invokestatic(ClassDesc owner, String name, MethodTypeDesc type) {\n+        bytecodesBufWriter.writeIndex(INVOKESTATIC, constantPool().methodRefEntry(owner, name, type));\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder invokevirtual(ClassDesc owner, String name, MethodTypeDesc type) {\n+        bytecodesBufWriter.writeIndex(INVOKEVIRTUAL, constantPool().methodRefEntry(owner, name, type));\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder getfield(ClassDesc owner, String name, ClassDesc type) {\n+        bytecodesBufWriter.writeIndex(GETFIELD, constantPool().fieldRefEntry(owner, name, type));\n+        return this;\n+    }\n+\n@@ -822,1 +907,1 @@\n-        writeFieldAccess(opcode, ref);\n+        bytecodesBufWriter.writeIndex(opcode.bytecode(), ref);\n@@ -828,1 +913,1 @@\n-        writeBytecode(BytecodeHelpers.arrayLoadOpcode(tk));\n+        bytecodesBufWriter.writeU1(BytecodeHelpers.arrayLoadBytecode(tk));\n@@ -834,1 +919,1 @@\n-        writeBytecode(BytecodeHelpers.arrayStoreOpcode(tk));\n+        bytecodesBufWriter.writeU1(BytecodeHelpers.arrayStoreBytecode(tk));\n@@ -846,1 +931,1 @@\n-        writeBytecode(NOP);\n+        bytecodesBufWriter.writeU1(NOP);\n@@ -852,1 +937,1 @@\n-        writeBytecode(ACONST_NULL);\n+        bytecodesBufWriter.writeU1(ACONST_NULL);\n@@ -858,1 +943,5 @@\n-        writeLocalVar(BytecodeHelpers.aload(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(ALOAD_0 + slot);\n+        } else {\n+            writeLocalVar(ALOAD, slot);\n+        }\n@@ -870,1 +959,7 @@\n-        writeBytecode(ARRAYLENGTH);\n+        bytecodesBufWriter.writeU1(ARRAYLENGTH);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder areturn() {\n+        bytecodesBufWriter.writeU1(ARETURN);\n@@ -876,1 +971,5 @@\n-        writeLocalVar(BytecodeHelpers.astore(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(ASTORE_0 + slot);\n+        } else {\n+            writeLocalVar(ASTORE, slot);\n+        }\n@@ -882,1 +981,1 @@\n-        writeBytecode(ATHROW);\n+        bytecodesBufWriter.writeU1(ATHROW);\n@@ -889,1 +988,1 @@\n-        writeArgumentConstant(BIPUSH, b);\n+        bytecodesBufWriter.writeU1U1(BIPUSH, b);\n@@ -895,1 +994,1 @@\n-        writeTypeCheck(CHECKCAST, type);\n+        bytecodesBufWriter.writeIndex(CHECKCAST, type);\n@@ -901,1 +1000,1 @@\n-        writeBytecode(D2F);\n+        bytecodesBufWriter.writeU1(D2F);\n@@ -907,1 +1006,1 @@\n-        writeBytecode(D2I);\n+        bytecodesBufWriter.writeU1(D2I);\n@@ -913,1 +1012,1 @@\n-        writeBytecode(D2L);\n+        bytecodesBufWriter.writeU1(D2L);\n@@ -919,1 +1018,1 @@\n-        writeBytecode(DADD);\n+        bytecodesBufWriter.writeU1(DADD);\n@@ -925,1 +1024,1 @@\n-        writeBytecode(DCMPG);\n+        bytecodesBufWriter.writeU1(DCMPG);\n@@ -931,1 +1030,1 @@\n-        writeBytecode(DCMPL);\n+        bytecodesBufWriter.writeU1(DCMPL);\n@@ -937,1 +1036,1 @@\n-        writeBytecode(DCONST_0);\n+        bytecodesBufWriter.writeU1(DCONST_0);\n@@ -943,1 +1042,1 @@\n-        writeBytecode(DCONST_1);\n+        bytecodesBufWriter.writeU1(DCONST_1);\n@@ -949,1 +1048,1 @@\n-        writeBytecode(DDIV);\n+        bytecodesBufWriter.writeU1(DDIV);\n@@ -955,1 +1054,5 @@\n-        writeLocalVar(BytecodeHelpers.dload(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(DLOAD_0 + slot);\n+        } else {\n+            writeLocalVar(DLOAD, slot);\n+        }\n@@ -961,1 +1064,1 @@\n-        writeBytecode(DMUL);\n+        bytecodesBufWriter.writeU1(DMUL);\n@@ -967,1 +1070,1 @@\n-        writeBytecode(DNEG);\n+        bytecodesBufWriter.writeU1(DNEG);\n@@ -973,1 +1076,7 @@\n-        writeBytecode(DREM);\n+        bytecodesBufWriter.writeU1(DREM);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder dreturn() {\n+        bytecodesBufWriter.writeU1(DRETURN);\n@@ -979,1 +1088,5 @@\n-        writeLocalVar(BytecodeHelpers.dstore(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(DSTORE_0 + slot);\n+        } else {\n+            writeLocalVar(DSTORE, slot);\n+        }\n@@ -985,1 +1098,1 @@\n-        writeBytecode(DSUB);\n+        bytecodesBufWriter.writeU1(DSUB);\n@@ -991,1 +1104,1 @@\n-        writeBytecode(DUP);\n+        bytecodesBufWriter.writeU1(DUP);\n@@ -997,1 +1110,1 @@\n-        writeBytecode(DUP2);\n+        bytecodesBufWriter.writeU1(DUP2);\n@@ -1003,1 +1116,1 @@\n-        writeBytecode(DUP2_X1);\n+        bytecodesBufWriter.writeU1(DUP2_X1);\n@@ -1009,1 +1122,1 @@\n-        writeBytecode(DUP2_X2);\n+        bytecodesBufWriter.writeU1(DUP2_X2);\n@@ -1015,1 +1128,1 @@\n-        writeBytecode(DUP_X1);\n+        bytecodesBufWriter.writeU1(DUP_X1);\n@@ -1021,1 +1134,1 @@\n-        writeBytecode(DUP_X2);\n+        bytecodesBufWriter.writeU1(DUP_X2);\n@@ -1027,1 +1140,1 @@\n-        writeBytecode(F2D);\n+        bytecodesBufWriter.writeU1(F2D);\n@@ -1033,1 +1146,1 @@\n-        writeBytecode(F2I);\n+        bytecodesBufWriter.writeU1(F2I);\n@@ -1039,1 +1152,1 @@\n-        writeBytecode(F2L);\n+        bytecodesBufWriter.writeU1(F2L);\n@@ -1045,1 +1158,1 @@\n-        writeBytecode(FADD);\n+        bytecodesBufWriter.writeU1(FADD);\n@@ -1051,1 +1164,1 @@\n-        writeBytecode(FCMPG);\n+        bytecodesBufWriter.writeU1(FCMPG);\n@@ -1057,1 +1170,1 @@\n-        writeBytecode(FCMPL);\n+        bytecodesBufWriter.writeU1(FCMPL);\n@@ -1063,1 +1176,1 @@\n-        writeBytecode(FCONST_0);\n+        bytecodesBufWriter.writeU1(FCONST_0);\n@@ -1069,1 +1182,1 @@\n-        writeBytecode(FCONST_1);\n+        bytecodesBufWriter.writeU1(FCONST_1);\n@@ -1075,1 +1188,1 @@\n-        writeBytecode(FCONST_2);\n+        bytecodesBufWriter.writeU1(FCONST_2);\n@@ -1081,1 +1194,1 @@\n-        writeBytecode(FDIV);\n+        bytecodesBufWriter.writeU1(FDIV);\n@@ -1087,1 +1200,5 @@\n-        writeLocalVar(BytecodeHelpers.fload(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(FLOAD_0 + slot);\n+        } else {\n+            writeLocalVar(FLOAD, slot);\n+        }\n@@ -1093,1 +1210,1 @@\n-        writeBytecode(FMUL);\n+        bytecodesBufWriter.writeU1(FMUL);\n@@ -1099,1 +1216,1 @@\n-        writeBytecode(FNEG);\n+        bytecodesBufWriter.writeU1(FNEG);\n@@ -1105,1 +1222,7 @@\n-        writeBytecode(FREM);\n+        bytecodesBufWriter.writeU1(FREM);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder freturn() {\n+        bytecodesBufWriter.writeU1(FRETURN);\n@@ -1111,1 +1234,5 @@\n-        writeLocalVar(BytecodeHelpers.fstore(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(FSTORE_0 + slot);\n+        } else {\n+            writeLocalVar(FSTORE, slot);\n+        }\n@@ -1117,1 +1244,25 @@\n-        writeBytecode(FSUB);\n+        bytecodesBufWriter.writeU1(FSUB);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder getstatic(ClassDesc owner, String name, ClassDesc type) {\n+        bytecodesBufWriter.writeIndex(GETSTATIC, constantPool().fieldRefEntry(owner, name, type));\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder goto_(Label target) {\n+        int instructionPc = curPc();\n+        int targetBci = labelToBci(target);\n+        \/\/transform short-opcode forward jumps if enforced, and backward jumps if enabled and overflowing\n+        if ((targetBci == -1\n+                ? transformFwdJumps\n+                : (transformBackJumps\n+                && targetBci - instructionPc < Short.MIN_VALUE))) {\n+            bytecodesBufWriter.writeU2(GOTO_W);\n+            writeLabelOffset(4, instructionPc, target, targetBci);\n+        } else {\n+            bytecodesBufWriter.writeU1(GOTO);\n+            writeLabelOffset(2, instructionPc, target, targetBci);\n+        }\n@@ -1123,1 +1274,1 @@\n-        writeBytecode(I2B);\n+        bytecodesBufWriter.writeU1(I2B);\n@@ -1129,1 +1280,1 @@\n-        writeBytecode(I2C);\n+        bytecodesBufWriter.writeU1(I2C);\n@@ -1135,1 +1286,1 @@\n-        writeBytecode(I2D);\n+        bytecodesBufWriter.writeU1(I2D);\n@@ -1141,1 +1292,1 @@\n-        writeBytecode(I2F);\n+        bytecodesBufWriter.writeU1(I2F);\n@@ -1147,1 +1298,1 @@\n-        writeBytecode(I2L);\n+        bytecodesBufWriter.writeU1(I2L);\n@@ -1153,1 +1304,1 @@\n-        writeBytecode(I2S);\n+        bytecodesBufWriter.writeU1(I2S);\n@@ -1159,1 +1310,1 @@\n-        writeBytecode(IADD);\n+        bytecodesBufWriter.writeU1(IADD);\n@@ -1165,1 +1316,1 @@\n-        writeBytecode(IAND);\n+        bytecodesBufWriter.writeU1(IAND);\n@@ -1171,1 +1322,1 @@\n-        writeBytecode(ICONST_0);\n+        bytecodesBufWriter.writeU1(ICONST_0);\n@@ -1177,1 +1328,1 @@\n-        writeBytecode(ICONST_1);\n+        bytecodesBufWriter.writeU1(ICONST_1);\n@@ -1183,1 +1334,1 @@\n-        writeBytecode(ICONST_2);\n+        bytecodesBufWriter.writeU1(ICONST_2);\n@@ -1189,1 +1340,1 @@\n-        writeBytecode(ICONST_3);\n+        bytecodesBufWriter.writeU1(ICONST_3);\n@@ -1195,1 +1346,1 @@\n-        writeBytecode(ICONST_4);\n+        bytecodesBufWriter.writeU1(ICONST_4);\n@@ -1201,1 +1352,1 @@\n-        writeBytecode(ICONST_5);\n+        bytecodesBufWriter.writeU1(ICONST_5);\n@@ -1207,1 +1358,1 @@\n-        writeBytecode(ICONST_M1);\n+        bytecodesBufWriter.writeU1(ICONST_M1);\n@@ -1213,1 +1364,1 @@\n-        writeBytecode(IDIV);\n+        bytecodesBufWriter.writeU1(IDIV);\n@@ -1225,1 +1376,5 @@\n-        writeLocalVar(BytecodeHelpers.iload(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(ILOAD_0 + slot);\n+        } else {\n+            writeLocalVar(ILOAD, slot);\n+        }\n@@ -1231,1 +1386,1 @@\n-        writeBytecode(IMUL);\n+        bytecodesBufWriter.writeU1(IMUL);\n@@ -1237,1 +1392,1 @@\n-        writeBytecode(INEG);\n+        bytecodesBufWriter.writeU1(INEG);\n@@ -1243,1 +1398,1 @@\n-        writeTypeCheck(INSTANCEOF, target);\n+        bytecodesBufWriter.writeIndex(INSTANCEOF, target);\n@@ -1255,1 +1410,1 @@\n-        writeInvokeInterface(INVOKEINTERFACE, ref, Util.parameterSlots(ref.typeSymbol()) + 1);\n+        writeInvokeInterface(Opcode.INVOKEINTERFACE, ref, Util.parameterSlots(ref.typeSymbol()) + 1);\n@@ -1261,1 +1416,1 @@\n-        writeInvokeNormal(INVOKESPECIAL, ref);\n+        bytecodesBufWriter.writeIndex(INVOKESPECIAL, ref);\n@@ -1267,1 +1422,1 @@\n-        writeInvokeNormal(INVOKESPECIAL, ref);\n+        bytecodesBufWriter.writeIndex(INVOKESPECIAL, ref);\n@@ -1273,1 +1428,1 @@\n-        writeInvokeNormal(INVOKESTATIC, ref);\n+        bytecodesBufWriter.writeIndex(INVOKESTATIC, ref);\n@@ -1279,1 +1434,1 @@\n-        writeInvokeNormal(INVOKESTATIC, ref);\n+        bytecodesBufWriter.writeIndex(INVOKESTATIC, ref);\n@@ -1285,1 +1440,1 @@\n-        writeInvokeNormal(INVOKEVIRTUAL, ref);\n+        bytecodesBufWriter.writeIndex(INVOKEVIRTUAL, ref);\n@@ -1291,1 +1446,1 @@\n-        writeBytecode(IOR);\n+        bytecodesBufWriter.writeU1(IOR);\n@@ -1297,1 +1452,7 @@\n-        writeBytecode(IREM);\n+        bytecodesBufWriter.writeU1(IREM);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder ireturn() {\n+        bytecodesBufWriter.writeU1(IRETURN);\n@@ -1303,1 +1464,1 @@\n-        writeBytecode(ISHL);\n+        bytecodesBufWriter.writeU1(ISHL);\n@@ -1309,1 +1470,1 @@\n-        writeBytecode(ISHR);\n+        bytecodesBufWriter.writeU1(ISHR);\n@@ -1315,1 +1476,5 @@\n-        writeLocalVar(BytecodeHelpers.istore(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(ISTORE_0 + slot);\n+        } else {\n+            writeLocalVar(ISTORE, slot);\n+        }\n@@ -1321,1 +1486,1 @@\n-        writeBytecode(ISUB);\n+        bytecodesBufWriter.writeU1(ISUB);\n@@ -1327,1 +1492,1 @@\n-        writeBytecode(IUSHR);\n+        bytecodesBufWriter.writeU1(IUSHR);\n@@ -1333,1 +1498,1 @@\n-        writeBytecode(IXOR);\n+        bytecodesBufWriter.writeU1(IXOR);\n@@ -1345,1 +1510,1 @@\n-        writeBytecode(L2D);\n+        bytecodesBufWriter.writeU1(L2D);\n@@ -1351,1 +1516,1 @@\n-        writeBytecode(L2F);\n+        bytecodesBufWriter.writeU1(L2F);\n@@ -1357,1 +1522,1 @@\n-        writeBytecode(L2I);\n+        bytecodesBufWriter.writeU1(L2I);\n@@ -1363,1 +1528,1 @@\n-        writeBytecode(LADD);\n+        bytecodesBufWriter.writeU1(LADD);\n@@ -1369,1 +1534,1 @@\n-        writeBytecode(LAND);\n+        bytecodesBufWriter.writeU1(LAND);\n@@ -1375,1 +1540,1 @@\n-        writeBytecode(LCMP);\n+        bytecodesBufWriter.writeU1(LCMP);\n@@ -1381,1 +1546,1 @@\n-        writeBytecode(LCONST_0);\n+        bytecodesBufWriter.writeU1(LCONST_0);\n@@ -1387,1 +1552,1 @@\n-        writeBytecode(LCONST_1);\n+        bytecodesBufWriter.writeU1(LCONST_1);\n@@ -1399,1 +1564,1 @@\n-        writeBytecode(LDIV);\n+        bytecodesBufWriter.writeU1(LDIV);\n@@ -1405,1 +1570,5 @@\n-        writeLocalVar(BytecodeHelpers.lload(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(LLOAD_0 + slot);\n+        } else {\n+            writeLocalVar(LLOAD, slot);\n+        }\n@@ -1411,1 +1580,1 @@\n-        writeBytecode(LMUL);\n+        bytecodesBufWriter.writeU1(LMUL);\n@@ -1417,1 +1586,1 @@\n-        writeBytecode(LNEG);\n+        bytecodesBufWriter.writeU1(LNEG);\n@@ -1423,1 +1592,1 @@\n-        writeBytecode(LOR);\n+        bytecodesBufWriter.writeU1(LOR);\n@@ -1429,1 +1598,7 @@\n-        writeBytecode(LREM);\n+        bytecodesBufWriter.writeU1(LREM);\n+        return this;\n+    }\n+\n+    @Override\n+    public CodeBuilder lreturn() {\n+        bytecodesBufWriter.writeU1(LRETURN);\n@@ -1435,1 +1610,1 @@\n-        writeBytecode(LSHL);\n+        bytecodesBufWriter.writeU1(LSHL);\n@@ -1441,1 +1616,1 @@\n-        writeBytecode(LSHR);\n+        bytecodesBufWriter.writeU1(LSHR);\n@@ -1447,1 +1622,5 @@\n-        writeLocalVar(BytecodeHelpers.lstore(slot), slot);\n+        if (slot >= 0 && slot <= 3) {\n+            bytecodesBufWriter.writeU1(LSTORE_0 + slot);\n+        } else {\n+            writeLocalVar(LSTORE, slot);\n+        }\n@@ -1453,1 +1632,1 @@\n-        writeBytecode(LSUB);\n+        bytecodesBufWriter.writeU1(LSUB);\n@@ -1459,1 +1638,1 @@\n-        writeBytecode(LUSHR);\n+        bytecodesBufWriter.writeU1(LUSHR);\n@@ -1465,1 +1644,1 @@\n-        writeBytecode(LXOR);\n+        bytecodesBufWriter.writeU1(LXOR);\n@@ -1471,1 +1650,1 @@\n-        writeBytecode(MONITORENTER);\n+        bytecodesBufWriter.writeU1(MONITORENTER);\n@@ -1477,1 +1656,1 @@\n-        writeBytecode(MONITOREXIT);\n+        bytecodesBufWriter.writeU1(MONITOREXIT);\n@@ -1504,1 +1683,1 @@\n-        writeBytecode(POP);\n+        bytecodesBufWriter.writeU1(POP);\n@@ -1510,1 +1689,1 @@\n-        writeBytecode(POP2);\n+        bytecodesBufWriter.writeU1(POP2);\n@@ -1517,1 +1696,1 @@\n-        writeArgumentConstant(SIPUSH, s);\n+        bytecodesBufWriter.writeU1U2(SIPUSH, s);\n@@ -1523,1 +1702,1 @@\n-        writeBytecode(SWAP);\n+        bytecodesBufWriter.writeU1(SWAP);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":408,"deletions":229,"binary":false,"changes":637,"status":"modified"},{"patch":"@@ -1203,1 +1203,3 @@\n-        void writeTo(BufWriter out, Frame prevFrame, ConstantPoolBuilder cp) {\n+        void writeTo(BufWriterImpl out, Frame prevFrame, ConstantPoolBuilder cp) {\n+            int localsSize = this.localsSize;\n+            int stackSize = this.stackSize;\n@@ -1212,2 +1214,1 @@\n-                        out.writeU1(251 + diffLocalsSize);\n-                        out.writeU2(offsetDelta);\n+                        out.writeU1U2(251 + diffLocalsSize, offsetDelta);\n@@ -1222,2 +1223,1 @@\n-                    out.writeU1(247);\n-                    out.writeU2(offsetDelta);\n+                    out.writeU1U2(247, offsetDelta);\n@@ -1229,2 +1229,1 @@\n-            out.writeU1(255);\n-            out.writeU2(offsetDelta);\n+            out.writeU1U2(255, offsetDelta);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}