{"files":[{"patch":"@@ -87,1 +87,1 @@\n-    private final boolean transformFwdJumps, transformBackJumps;\n+    private final boolean transformDeferredJumps, transformKnownJumps;\n@@ -132,1 +132,1 @@\n-                              boolean transformFwdJumps) {\n+                              boolean transformDeferredJumps) {\n@@ -136,2 +136,2 @@\n-        this.transformFwdJumps = transformFwdJumps;\n-        this.transformBackJumps = context.fixShortJumps();\n+        this.transformDeferredJumps = transformDeferredJumps;\n+        this.transformKnownJumps = context.fixShortJumps();\n@@ -471,22 +471,0 @@\n-    private void writeLabelOffset4(int instructionPc, Label label, int targetBci) {\n-        if (targetBci == -1) {\n-            int pc = bytecodesBufWriter.skip(4);\n-            addLabel(new DeferredLabel(pc, 4, instructionPc, label));\n-        }\n-        else {\n-            bytecodesBufWriter.writeInt(targetBci - instructionPc);\n-        }\n-    }\n-\n-    private void writeLabelOffset2(int instructionPc, Label label, int targetBci) {\n-        if (targetBci == -1) {\n-            int pc = bytecodesBufWriter.skip(2);\n-            addLabel(new DeferredLabel(pc, 2, instructionPc, label));\n-        }\n-        else {\n-            int branchOffset = targetBci - instructionPc;\n-            if ((short)branchOffset != branchOffset) throw new LabelOverflowException();\n-            bytecodesBufWriter.writeU2(branchOffset);\n-        }\n-    }\n-\n@@ -544,1 +522,1 @@\n-            writeBranchSizeFixed3(op.bytecode(), target);\n+            writeShortJump(op.bytecode(), target);\n@@ -546,1 +524,1 @@\n-            writeBranchW(op, target);\n+            writeLongJump(op.bytecode(), target);\n@@ -550,1 +528,18 @@\n-    private void writeBranchSizeFixed3(int bytecode, Label target) {\n+    private void writeLongLabelOffset(int instructionPc, Label label) {\n+        int targetBci = labelToBci(label);\n+\n+        \/\/ algebraic union of jump | (instructionPc, target), distinguished by null == target.\n+        int jumpOrInstructionPc;\n+        Label nullOrTarget;\n+        if (targetBci == -1) {\n+            jumpOrInstructionPc = instructionPc;\n+            nullOrTarget = label;\n+        } else {\n+            jumpOrInstructionPc = targetBci - instructionPc;\n+            nullOrTarget = null;\n+        }\n+\n+        writeParsedLongLabel(jumpOrInstructionPc, nullOrTarget);\n+    }\n+\n+    private void writeShortJump(int bytecode, Label target) {\n@@ -553,0 +548,12 @@\n+\n+        \/\/ algebraic union of jump | (instructionPc, target), distinguished by null == target.\n+        int jumpOrInstructionPc;\n+        Label nullOrTarget;\n+        if (targetBci == -1) {\n+            jumpOrInstructionPc = instructionPc;\n+            nullOrTarget = target;\n+        } else {\n+            jumpOrInstructionPc = targetBci - instructionPc;\n+            nullOrTarget = null;\n+        }\n+\n@@ -554,4 +561,2 @@\n-        if (targetBci == -1\n-                ? transformFwdJumps\n-                : (transformBackJumps && targetBci - instructionPc < Short.MIN_VALUE)) {\n-            writeBranchTransform(bytecode, target, instructionPc, targetBci);\n+        if (transformDeferredJumps || transformKnownJumps && nullOrTarget == null && jumpOrInstructionPc < Short.MIN_VALUE) {\n+            fixShortJump(bytecode, jumpOrInstructionPc, nullOrTarget);\n@@ -560,1 +565,1 @@\n-            writeLabelOffset2(instructionPc, target, targetBci);\n+            writeParsedShortLabel(jumpOrInstructionPc, nullOrTarget);\n@@ -564,1 +569,1 @@\n-    private void writeBranchW(Opcode op, Label target) {\n+    private void writeLongJump(int bytecode, Label target) {\n@@ -566,2 +571,2 @@\n-        writeBytecode(op);\n-        writeLabelOffset4(instructionPc, target, labelToBci(target));\n+        bytecodesBufWriter.writeU1(bytecode);\n+        writeLongLabelOffset(instructionPc, target);\n@@ -570,1 +575,1 @@\n-    private void writeBranchTransform(int bytecode, Label target, int instructionPc, int targetBci) {\n+    private void fixShortJump(int bytecode, int jumpOrInstructionPc, Label nullOrTarget) {\n@@ -573,1 +578,1 @@\n-            writeLabelOffset4(instructionPc, target, targetBci);\n+            writeParsedLongLabel(jumpOrInstructionPc, nullOrTarget);\n@@ -576,1 +581,1 @@\n-            writeLabelOffset4(instructionPc, target, targetBci);\n+            writeParsedLongLabel(jumpOrInstructionPc, nullOrTarget);\n@@ -578,6 +583,30 @@\n-            bytecodesBufWriter.writeU1(BytecodeHelpers.reverseBranchOpcode(bytecode));\n-            Label bypassJump = newLabel();\n-            writeLabelOffset2(instructionPc, bypassJump, labelToBci(bypassJump));\n-            bytecodesBufWriter.writeU1(GOTO_W);\n-            writeLabelOffset4(instructionPc + 3, target, labelToBci(target));\n-            labelBinding(bypassJump);\n+            bytecodesBufWriter.writeU1U2(\n+                    BytecodeHelpers.reverseBranchOpcode(bytecode),   \/\/ u1\n+                    8); \/\/ u1 + s2 + u1 + s4                         \/\/ s2\n+            bytecodesBufWriter.writeU1(GOTO_W);                      \/\/ u1\n+            if (nullOrTarget == null) {\n+                jumpOrInstructionPc -= 3; \/\/ jump -= 3;\n+            } else {\n+                jumpOrInstructionPc += 3; \/\/ instructionPc += 3;\n+            }\n+            writeParsedLongLabel(jumpOrInstructionPc, nullOrTarget); \/\/ s4\n+        }\n+    }\n+\n+    private void writeParsedShortLabel(int jumpOrInstructionPc, Label nullOrTarget) {\n+        if (nullOrTarget == null) {\n+            if ((short) jumpOrInstructionPc != jumpOrInstructionPc)\n+                throw new LabelOverflowException();\n+            bytecodesBufWriter.writeU2(jumpOrInstructionPc);\n+        } else {\n+            int pc = bytecodesBufWriter.skip(2);\n+            addLabel(new DeferredLabel(pc, 2, jumpOrInstructionPc, nullOrTarget));\n+        }\n+    }\n+\n+    private void writeParsedLongLabel(int jumpOrInstructionPc, Label nullOrTarget) {\n+        if (nullOrTarget == null) {\n+            bytecodesBufWriter.writeInt(jumpOrInstructionPc);\n+        } else {\n+            int pc = bytecodesBufWriter.skip(4);\n+            addLabel(new DeferredLabel(pc, 4, jumpOrInstructionPc, nullOrTarget));\n@@ -593,1 +622,1 @@\n-        writeLabelOffset4(instructionPc, defaultTarget, labelToBci(defaultTarget));\n+        writeLongLabelOffset(instructionPc, defaultTarget);\n@@ -605,1 +634,1 @@\n-            writeLabelOffset4(instructionPc, target, labelToBci(target));\n+            writeLongLabelOffset(instructionPc, target);\n@@ -615,1 +644,1 @@\n-        writeLabelOffset4(instructionPc, defaultTarget, labelToBci(defaultTarget));\n+        writeLongLabelOffset(instructionPc, defaultTarget);\n@@ -623,1 +652,0 @@\n-            \/\/ writeLabelOffset(4, instructionPc, caseMap.getOrDefault((int)l, defaultTarget));\n@@ -625,1 +653,1 @@\n-            writeLabelOffset4(instructionPc, target, labelToBci(target));\n+            writeLongLabelOffset(instructionPc, target);\n@@ -1276,1 +1304,1 @@\n-        writeBranchSizeFixed3(GOTO, target);\n+        writeShortJump(GOTO, target);\n@@ -1378,1 +1406,1 @@\n-        writeBranchSizeFixed3(IF_ACMPEQ, target);\n+        writeShortJump(IF_ACMPEQ, target);\n@@ -1384,1 +1412,1 @@\n-        writeBranchSizeFixed3(IF_ACMPNE, target);\n+        writeShortJump(IF_ACMPNE, target);\n@@ -1390,1 +1418,1 @@\n-        writeBranchSizeFixed3(IF_ICMPEQ, target);\n+        writeShortJump(IF_ICMPEQ, target);\n@@ -1396,1 +1424,1 @@\n-        writeBranchSizeFixed3(IF_ICMPGE, target);\n+        writeShortJump(IF_ICMPGE, target);\n@@ -1402,1 +1430,1 @@\n-        writeBranchSizeFixed3(IF_ICMPGT, target);\n+        writeShortJump(IF_ICMPGT, target);\n@@ -1408,1 +1436,1 @@\n-        writeBranchSizeFixed3(IF_ICMPLE, target);\n+        writeShortJump(IF_ICMPLE, target);\n@@ -1414,1 +1442,1 @@\n-        writeBranchSizeFixed3(IF_ICMPLT, target);\n+        writeShortJump(IF_ICMPLT, target);\n@@ -1420,1 +1448,1 @@\n-        writeBranchSizeFixed3(IF_ICMPNE, target);\n+        writeShortJump(IF_ICMPNE, target);\n@@ -1426,1 +1454,1 @@\n-        writeBranchSizeFixed3(IFNONNULL, target);\n+        writeShortJump(IFNONNULL, target);\n@@ -1432,1 +1460,1 @@\n-        writeBranchSizeFixed3(IFNULL, target);\n+        writeShortJump(IFNULL, target);\n@@ -1438,1 +1466,1 @@\n-        writeBranchSizeFixed3(IFEQ, target);\n+        writeShortJump(IFEQ, target);\n@@ -1444,1 +1472,1 @@\n-        writeBranchSizeFixed3(IFGE, target);\n+        writeShortJump(IFGE, target);\n@@ -1450,1 +1478,1 @@\n-        writeBranchSizeFixed3(IFGT, target);\n+        writeShortJump(IFGT, target);\n@@ -1456,1 +1484,1 @@\n-        writeBranchSizeFixed3(IFLE, target);\n+        writeShortJump(IFLE, target);\n@@ -1462,1 +1490,1 @@\n-        writeBranchSizeFixed3(IFLT, target);\n+        writeShortJump(IFLT, target);\n@@ -1468,1 +1496,1 @@\n-        writeBranchSizeFixed3(IFNE, target);\n+        writeShortJump(IFNE, target);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":96,"deletions":68,"binary":false,"changes":164,"status":"modified"},{"patch":"@@ -116,0 +116,1 @@\n+        var data = this.data;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/EntryMap.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -89,1 +89,1 @@\n-            throw new ConstantPoolException(\"Bad CP index: \" + index);\n+            throw badCP(index);\n@@ -95,1 +95,1 @@\n-            throw new ConstantPoolException(\"Unusable CP index: \" + index);\n+            throw unusableCP(index);\n@@ -100,0 +100,8 @@\n+    private static ConstantPoolException badCP(int index) {\n+        return new ConstantPoolException(\"Bad CP index: \" + index);\n+    }\n+\n+    private static ConstantPoolException unusableCP(int index) {\n+        return new ConstantPoolException(\"Unusable CP index: \" + index);\n+    }\n+\n@@ -166,0 +174,2 @@\n+        int parentSize = this.parentSize;\n+        var map = this.map;\n@@ -167,1 +177,1 @@\n-            map = new EntryMap(Math.max(size, 1024), .75f);\n+            this.map = map = new EntryMap(Math.max(size, 1024), .75f);\n@@ -204,0 +214,2 @@\n+        int bsmSize = this.bsmSize;\n+        var bsmMap = this.bsmMap;\n@@ -205,1 +217,1 @@\n-            bsmMap = new EntryMap(Math.max(bsmSize, 16), .75f);\n+            this.bsmMap = bsmMap = new EntryMap(Math.max(bsmSize, 16), .75f);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"}]}