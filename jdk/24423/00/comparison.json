{"files":[{"patch":"@@ -550,23 +550,0 @@\n-\n-    \/\/ Used when limbs a could overflow by one modulus.\n-    @ForceInline\n-    protected void reducePositive(long[] a) {\n-        long aa0 = a[0];\n-        long aa1 = a[1] + (aa0>>BITS_PER_LIMB);\n-        long aa2 = a[2] + (aa1>>BITS_PER_LIMB);\n-        long aa3 = a[3] + (aa2>>BITS_PER_LIMB);\n-        long aa4 = a[4] + (aa3>>BITS_PER_LIMB);\n-\n-        long c0 = a[0] - modulus[0];\n-        long c1 = a[1] - modulus[1] + (c0 >> BITS_PER_LIMB);\n-        long c2 = a[2] - modulus[2] + (c1 >> BITS_PER_LIMB);\n-        long c3 = a[3] - modulus[3] + (c2 >> BITS_PER_LIMB);\n-        long c4 = a[4] - modulus[4] + (c3 >> BITS_PER_LIMB);\n-        long mask = c4 >> BITS_PER_LIMB; \/\/ Signed shift!\n-\n-        a[0] = ((aa0 & mask) | (c0 & ~mask)) & LIMB_MASK;\n-        a[1] = ((aa1 & mask) | (c1 & ~mask)) & LIMB_MASK;\n-        a[2] = ((aa2 & mask) | (c2 & ~mask)) & LIMB_MASK;\n-        a[3] = ((aa3 & mask) | (c3 & ~mask)) & LIMB_MASK;\n-        a[4] = ((aa4 & mask) | (c4 & ~mask));\n-    }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/math\/intpoly\/MontgomeryIntegerPolynomialP256.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"}]}