{"files":[{"patch":"","filename":"src\/hotspot\/os_cpu\/windows_aarch64\/threadCritical_windows_aarch64.cpp","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/hotspot\/os\/windows\/threadCritical_windows.cpp","status":"renamed"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"runtime\/atomic.hpp\"\n+#include \"runtime\/javaThread.hpp\"\n+#include \"runtime\/threadCritical.hpp\"\n+\n+\/\/ OS-includes here\n+# include <windows.h>\n+# include <winbase.h>\n+\n+\/\/\n+\/\/ See threadCritical.hpp for details of this class.\n+\/\/\n+\n+static bool initialized = false;\n+static int lock_count = -1;\n+static HANDLE lock_event;\n+static DWORD lock_owner = -1;\n+\n+\/\/\n+\/\/ Note that Microsoft's critical region code contains a race\n+\/\/ condition, and is not suitable for use. A thread holding the\n+\/\/ critical section cannot safely suspend a thread attempting\n+\/\/ to enter the critical region. The failure mode is that both\n+\/\/ threads are permanently suspended.\n+\/\/\n+\/\/ I experiemented with the use of ordinary windows mutex objects\n+\/\/ and found them ~30 times slower than the critical region code.\n+\/\/\n+\n+ThreadCritical::ThreadCritical() {\n+  DWORD current_thread = GetCurrentThreadId();\n+\n+  if (lock_owner != current_thread) {\n+    \/\/ Grab the lock before doing anything.\n+    while (Atomic::cmpxchg(&lock_count, -1, 0) != -1) {\n+      if (initialized) {\n+        DWORD ret = WaitForSingleObject(lock_event,  INFINITE);\n+        assert(ret == WAIT_OBJECT_0, \"unexpected return value from WaitForSingleObject\");\n+      }\n+    }\n+\n+    \/\/ Make sure the event object is allocated.\n+    if (!initialized) {\n+      \/\/ Locking will not work correctly unless this is autoreset.\n+      lock_event = CreateEvent(NULL, false, false, NULL);\n+      initialized = true;\n+    }\n+\n+    assert(lock_owner == -1, \"Lock acquired illegally.\");\n+    lock_owner = current_thread;\n+  } else {\n+    \/\/ Atomicity isn't required. Bump the recursion count.\n+    lock_count++;\n+  }\n+\n+  assert(lock_owner == GetCurrentThreadId(), \"Lock acquired illegally.\");\n+}\n+\n+ThreadCritical::~ThreadCritical() {\n+  assert(lock_owner == GetCurrentThreadId(), \"unlock attempt by wrong thread\");\n+  assert(lock_count >= 0, \"Attempt to unlock when already unlocked\");\n+\n+  if (lock_count == 0) {\n+    \/\/ We're going to unlock\n+    lock_owner = -1;\n+    lock_count = -1;\n+    \/\/ No lost wakeups, lock_event stays signaled until reset.\n+    DWORD ret = SetEvent(lock_event);\n+    assert(ret != 0, \"unexpected return value from SetEvent\");\n+  } else {\n+    \/\/ Just unwinding a recursive lock;\n+    lock_count--;\n+  }\n+}\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/threadCritical_windows_x86.cpp","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}