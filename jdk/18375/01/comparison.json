{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -413,1 +413,1 @@\n-\/\/ service thread of pending cleanup work.  It must be lock-free because\n+\/\/ ServiceThread of pending cleanup work.  It must be lock-free because\n@@ -708,1 +708,1 @@\n-      \/\/ some.  And the service thread will drain the entire deferred list\n+      \/\/ some.  And the ServiceThread will drain the entire deferred list\n@@ -883,5 +883,1 @@\n-\/\/\n-\/\/ We don't want cleanup work to linger indefinitely, but we also don't want\n-\/\/ to run the service thread too often.  We're also very limited in what we\n-\/\/ can do in a release operation, where cleanup work is created.\n-\/\/\n+\n@@ -890,1 +886,1 @@\n-\/\/ request state.  A safepoint cleanup task notifies the service thread when\n+\/\/ request state. The ServiceThread checks at timed intervals if\n@@ -892,3 +888,2 @@\n-\/\/ request state.  But that notification is deferred if the service thread\n-\/\/ has run recently, and we also avoid duplicate notifications.  The service\n-\/\/ thread updates the timestamp and resets the state flags on every iteration.\n+\/\/ request state.  We don't want to run empty block cleanup too often in the\n+\/\/ face of frequent explicit ServiceThread wakeups, hence the defer period.\n@@ -899,2 +894,2 @@\n-\/\/ Flag for avoiding duplicate notifications.\n-static bool needs_cleanup_triggered = false;\n+\/\/ Time after which a cleanup is permitted.\n+static jlong cleanup_permit_time = 0;\n@@ -902,17 +897,3 @@\n-\/\/ Time after which a notification can be made.\n-static jlong cleanup_trigger_permit_time = 0;\n-\n-\/\/ Minimum time since last service thread check before notification is\n-\/\/ permitted.  The value of 500ms was an arbitrary choice; frequent, but not\n-\/\/ too frequent.\n-const jlong cleanup_trigger_defer_period = 500 * NANOSECS_PER_MILLISEC;\n-\n-void OopStorage::trigger_cleanup_if_needed() {\n-  MonitorLocker ml(Service_lock, Monitor::_no_safepoint_check_flag);\n-  if (Atomic::load(&needs_cleanup_requested) &&\n-      !needs_cleanup_triggered &&\n-      (os::javaTimeNanos() > cleanup_trigger_permit_time)) {\n-    needs_cleanup_triggered = true;\n-    ml.notify_all();\n-  }\n-}\n+\/\/ Minimum time between ServiceThread cleanups.\n+\/\/ The value of 500ms was an arbitrary choice; frequent, but not too frequent.\n+const jlong cleanup_defer_period = 500 * NANOSECS_PER_MILLISEC;\n@@ -922,7 +903,12 @@\n-  cleanup_trigger_permit_time =\n-    os::javaTimeNanos() + cleanup_trigger_defer_period;\n-  needs_cleanup_triggered = false;\n-  \/\/ Set the request flag false and return its old value.\n-  \/\/ Needs to be atomic to avoid dropping a concurrent request.\n-  \/\/ Can't use Atomic::xchg, which may not support bool.\n-  return Atomic::cmpxchg(&needs_cleanup_requested, true, false);\n+\n+  if (Atomic::load_acquire(&needs_cleanup_requested) &&\n+      os::javaTimeNanos() > cleanup_permit_time) {\n+    cleanup_permit_time =\n+      os::javaTimeNanos() + cleanup_defer_period;\n+    \/\/ Set the request flag false and return its old value.\n+    \/\/ Needs to be atomic to avoid dropping a concurrent request.\n+    Atomic::release_store(&needs_cleanup_requested, false);\n+    return true;\n+  } else {\n+    return false;\n+  }\n@@ -931,2 +917,2 @@\n-\/\/ Record that cleanup is needed, without notifying the Service thread.\n-\/\/ Used by release(), where we can't lock even Service_lock.\n+\/\/ Record that cleanup is needed, without notifying the Service thread, because\n+\/\/ we can't lock the Service_lock.  Used by release().\n@@ -934,2 +920,2 @@\n-  \/\/ Set local flag first, else service thread could wake up and miss\n-  \/\/ the request.  This order may instead (rarely) unnecessarily notify.\n+  \/\/ Set local flag first, else ServiceThread could wake up and miss\n+  \/\/ the request.\n@@ -941,3 +927,2 @@\n-  \/\/ Service thread might have oopstorage work, but not for this object.\n-  \/\/ Check for deferred updates even though that's not a service thread\n-  \/\/ trigger; since we're here, we might as well process them.\n+  \/\/ ServiceThread might have oopstorage work, but not for this object.\n+  \/\/ But check for deferred updates, which might provide cleanup work.\n@@ -989,1 +974,1 @@\n-        \/\/ service thread.  Instead, iteration completion notifies.\n+        \/\/ ServiceThread.  Instead, iteration completion notifies.\n@@ -1002,3 +987,2 @@\n-  \/\/ cause the service thread to loop, giving other subtasks an\n-  \/\/ opportunity to run too.  There's no need for a notification,\n-  \/\/ because we are part of the service thread (unless gtesting).\n+  \/\/ cause the ServiceThread to loop, giving other subtasks an\n+  \/\/ opportunity to run too.\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":33,"deletions":49,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n- Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -687,11 +687,0 @@\n-  <Event name=\"SafepointCleanup\" category=\"Java Virtual Machine, Runtime, Safepoint\" label=\"Safepoint Cleanup\" description=\"Safepointing begin running cleanup tasks\"\n-    thread=\"true\">\n-    <Field type=\"ulong\" name=\"safepointId\" label=\"Safepoint Identifier\" relation=\"SafepointId\" \/>\n-  <\/Event>\n-\n-  <Event name=\"SafepointCleanupTask\" category=\"Java Virtual Machine, Runtime, Safepoint\" label=\"Safepoint Cleanup Task\" description=\"Safepointing begin running cleanup tasks\"\n-    thread=\"true\">\n-    <Field type=\"ulong\" name=\"safepointId\" label=\"Safepoint Identifier\" relation=\"SafepointId\" \/>\n-    <Field type=\"string\" name=\"name\" label=\"Task Name\" description=\"The task name\" \/>\n-  <\/Event>\n-\n","filename":"src\/hotspot\/share\/jfr\/metadata\/metadata.xml","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1285,0 +1285,5 @@\n+  product(intx, ServiceThreadCleanupInterval, 1000, DIAGNOSTIC,             \\\n+          \"Wake the ServiceThread to do periodic cleanup checks\"            \\\n+          \"(0 means none)\")                                                 \\\n+          range(0, max_jint)                                                \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -83,6 +83,0 @@\n-static void post_safepoint_cleanup_event(EventSafepointCleanup& event, uint64_t safepoint_id) {\n-  if (event.should_commit()) {\n-    event.set_safepointId(safepoint_id);\n-    event.commit();\n-  }\n-}\n@@ -104,10 +98,0 @@\n-static void post_safepoint_cleanup_task_event(EventSafepointCleanupTask& event,\n-                                              uint64_t safepoint_id,\n-                                              const char* name) {\n-  if (event.should_commit()) {\n-    event.set_safepointId(safepoint_id);\n-    event.set_name(name);\n-    event.commit();\n-  }\n-}\n-\n@@ -438,6 +422,0 @@\n-  \/\/ We do the safepoint cleanup first since a GC related safepoint\n-  \/\/ needs cleanup to be completed before running the GC op.\n-  EventSafepointCleanup cleanup_event;\n-  do_cleanup_tasks();\n-  post_safepoint_cleanup_event(cleanup_event, _safepoint_id);\n-\n@@ -445,1 +423,0 @@\n-  SafepointTracing::cleanup();\n@@ -510,62 +487,0 @@\n-class ParallelCleanupTask : public WorkerTask {\n-private:\n-  SubTasksDone _subtasks;\n-\n-  class Tracer {\n-  private:\n-    const char*               _name;\n-    EventSafepointCleanupTask _event;\n-    TraceTime                 _timer;\n-\n-  public:\n-    Tracer(const char* name) :\n-        _name(name),\n-        _event(),\n-        _timer(name, TRACETIME_LOG(Info, safepoint, cleanup)) {}\n-    ~Tracer() {\n-      post_safepoint_cleanup_task_event(_event, SafepointSynchronize::safepoint_id(), _name);\n-    }\n-  };\n-\n-public:\n-  ParallelCleanupTask() :\n-    WorkerTask(\"Parallel Safepoint Cleanup\"),\n-    _subtasks(SafepointSynchronize::SAFEPOINT_CLEANUP_NUM_TASKS) {}\n-\n-  uint expected_num_workers() const {\n-    uint workers = 0;\n-\n-    return MAX2<uint>(1, workers);\n-  }\n-\n-  void work(uint worker_id) {\n-    if (_subtasks.try_claim_task(SafepointSynchronize::SAFEPOINT_CLEANUP_REQUEST_OOPSTORAGE_CLEANUP)) {\n-      \/\/ Don't bother reporting event or time for this very short operation.\n-      \/\/ To have any utility we'd also want to report whether needed.\n-      OopStorage::trigger_cleanup_if_needed();\n-    }\n-\n-    _subtasks.all_tasks_claimed();\n-  }\n-};\n-\n-\/\/ Various cleaning tasks that should be done periodically at safepoints.\n-void SafepointSynchronize::do_cleanup_tasks() {\n-\n-  TraceTime timer(\"safepoint cleanup tasks\", TRACETIME_LOG(Info, safepoint, cleanup));\n-\n-  CollectedHeap* heap = Universe::heap();\n-  assert(heap != nullptr, \"heap not initialized yet?\");\n-  ParallelCleanupTask cleanup;\n-  WorkerThreads* cleanup_workers = heap->safepoint_workers();\n-  const uint expected_num_workers = cleanup.expected_num_workers();\n-  if (cleanup_workers != nullptr && expected_num_workers > 1) {\n-    \/\/ Parallel cleanup using GC provided thread pool.\n-    const uint num_workers = MIN2(expected_num_workers, cleanup_workers->active_workers());\n-    cleanup_workers->run_task(&cleanup, num_workers);\n-  } else {\n-    \/\/ Serial cleanup using VMThread.\n-    cleanup.work(0);\n-  }\n-}\n-\n@@ -949,1 +864,0 @@\n-jlong SafepointTracing::_last_safepoint_cleanup_time_ns = 0;\n@@ -957,1 +871,0 @@\n-jlong     SafepointTracing::_max_cleanup_time = 0;\n@@ -973,1 +886,1 @@\n-            \"[ time:       sync    cleanup       vmop      total ]\");\n+            \"[ time:       sync    vmop      total ]\");\n@@ -1002,2 +915,1 @@\n-           INT64_FORMAT_W(10) \" \" INT64_FORMAT_W(10) \" \"\n-           INT64_FORMAT_W(10) \" \" INT64_FORMAT_W(10) \" ]\",\n+           INT64_FORMAT_W(10) \" \" INT64_FORMAT_W(10) \" \" INT64_FORMAT_W(10) \" ]\",\n@@ -1005,2 +917,1 @@\n-           (int64_t)(_last_safepoint_cleanup_time_ns - _last_safepoint_sync_time_ns),\n-           (int64_t)(_last_safepoint_end_time_ns - _last_safepoint_cleanup_time_ns),\n+           (int64_t)(_last_safepoint_end_time_ns - _last_safepoint_sync_time_ns),\n@@ -1027,2 +938,0 @@\n-  log_info(safepoint, stats)(\"Maximum cleanup time  \" INT64_FORMAT\" ns\",\n-                              (int64_t)(_max_cleanup_time));\n@@ -1041,1 +950,0 @@\n-  _last_safepoint_cleanup_time_ns = 0;\n@@ -1057,4 +965,0 @@\n-void SafepointTracing::cleanup() {\n-  _last_safepoint_cleanup_time_ns = os::javaTimeNanos();\n-}\n-\n@@ -1067,3 +971,0 @@\n-  if (_max_cleanup_time < (_last_safepoint_cleanup_time_ns - _last_safepoint_sync_time_ns)) {\n-    _max_cleanup_time = _last_safepoint_cleanup_time_ns - _last_safepoint_sync_time_ns;\n-  }\n@@ -1081,1 +982,0 @@\n-     \"Cleanup: \" JLONG_FORMAT \" ns, \"\n@@ -1087,2 +987,1 @@\n-      _last_safepoint_cleanup_time_ns - _last_safepoint_sync_time_ns,\n-      _last_safepoint_end_time_ns     - _last_safepoint_cleanup_time_ns,\n+      _last_safepoint_end_time_ns     - _last_safepoint_sync_time_ns,\n","filename":"src\/hotspot\/share\/runtime\/safepoint.cpp","additions":4,"deletions":105,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -71,7 +71,0 @@\n-  \/\/ The enums are listed in the order of the tasks when done serially.\n-  enum SafepointCleanupTasks {\n-    SAFEPOINT_CLEANUP_REQUEST_OOPSTORAGE_CLEANUP,\n-    \/\/ Leave this one last.\n-    SAFEPOINT_CLEANUP_NUM_TASKS\n-  };\n-\n@@ -158,2 +151,0 @@\n-  static void do_cleanup_tasks();\n-\n@@ -242,1 +233,0 @@\n-  static jlong _last_safepoint_cleanup_time_ns;\n@@ -254,1 +244,0 @@\n-  static jlong     _max_cleanup_time;\n@@ -265,1 +254,0 @@\n-  static void cleanup();\n","filename":"src\/hotspot\/share\/runtime\/safepoint.hpp","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -129,2 +129,3 @@\n-        \/\/ Wait until notified that there is some work to do.\n-        ml.wait();\n+        \/\/ Wait until notified that there is some work to do or timer expires.\n+        \/\/ Some cleanup requests don't notify the ServiceThread so work needs to be done at periodic intervals.\n+        ml.wait(ServiceThreadCleanupInterval);\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-; Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+; Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -528,1 +528,1 @@\n-                   'State Syncronization', 'Cleanup',\n+                   'State Syncronization',\n@@ -531,1 +531,1 @@\n-                   S.duration, C.duration,\n+                   S.duration,\n@@ -534,1 +534,1 @@\n-              SafepointCleanup AS C, SafepointStateSynchronization AS S\n+              SafepointStateSynchronization AS S\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/query\/view.ini","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -203,10 +203,0 @@\n-    <event name=\"jdk.SafepointCleanup\">\n-      <setting name=\"enabled\">false<\/setting>\n-      <setting name=\"threshold\">10 ms<\/setting>\n-    <\/event>\n-\n-    <event name=\"jdk.SafepointCleanupTask\">\n-      <setting name=\"enabled\">false<\/setting>\n-      <setting name=\"threshold\">10 ms<\/setting>\n-    <\/event>\n-\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/default.jfc","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -203,10 +203,0 @@\n-    <event name=\"jdk.SafepointCleanup\">\n-      <setting name=\"enabled\">false<\/setting>\n-      <setting name=\"threshold\">0 ms<\/setting>\n-    <\/event>\n-\n-    <event name=\"jdk.SafepointCleanupTask\">\n-      <setting name=\"enabled\">false<\/setting>\n-      <setting name=\"threshold\">0 ms<\/setting>\n-    <\/event>\n-\n","filename":"src\/jdk.jfr\/share\/conf\/jfr\/profile.jfc","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,1 @@\n-                                                                   \"-Xlog:gc*,stringtable*=debug:gc.log\",\n+                                                                   \"-Xlog:gc*,stringtable*=debug,oopstorage+blocks=debug:gc.log\",\n","filename":"test\/hotspot\/jtreg\/gc\/stress\/TestReclaimStringsLeaksMemory.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,67 +0,0 @@\n-\/*\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8149991\n- * @summary safepoint+cleanup=info should have output from the code\n- * @requires vm.flagless\n- * @library \/test\/lib\n- * @modules java.base\/jdk.internal.misc\n- *          java.management\n- * @run driver SafepointCleanupTest\n- *\/\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-\n-public class SafepointCleanupTest {\n-    static void analyzeOutputOn(ProcessBuilder pb) throws Exception {\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldContain(\"[safepoint,cleanup]\");\n-        output.shouldContain(\"safepoint cleanup tasks\");\n-        output.shouldHaveExitValue(0);\n-    }\n-\n-    static void analyzeOutputOff(ProcessBuilder pb) throws Exception {\n-        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n-        output.shouldNotContain(\"[safepoint,cleanup]\");\n-        output.shouldHaveExitValue(0);\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:safepoint+cleanup=info\",\n-                                                                             InnerClass.class.getName());\n-        analyzeOutputOn(pb);\n-\n-        pb = ProcessTools.createLimitedTestJavaProcessBuilder(\"-Xlog:safepoint+cleanup=off\",\n-                                                              InnerClass.class.getName());\n-        analyzeOutputOff(pb);\n-    }\n-\n-    public static class InnerClass {\n-        public static void main(String[] args) throws Exception {\n-            System.out.println(\"Safepoint Cleanup test\");\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/runtime\/logging\/SafepointCleanupTest.java","additions":0,"deletions":67,"binary":false,"changes":67,"status":"deleted"},{"patch":"@@ -59,2 +59,1 @@\n-            \"UnsignedIntFlag\", \"UnsignedIntFlagChanged\", \"DoubleFlagChanged\",\n-            \"SafepointCleanupTask\")\n+            \"UnsignedIntFlag\", \"UnsignedIntFlagChanged\", \"DoubleFlagChanged\")\n","filename":"test\/jdk\/jdk\/jfr\/event\/metadata\/TestLookForUntestedEvents.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-        EventNames.SafepointCleanup,\n","filename":"test\/jdk\/jdk\/jfr\/event\/runtime\/TestSafepointEvents.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,2 +68,0 @@\n-    public static final String SafepointCleanup = PREFIX + \"SafepointCleanup\";\n-    public static final String SafepointCleanupTask = PREFIX + \"SafepointCleanupTask\";\n","filename":"test\/lib\/jdk\/test\/lib\/jfr\/EventNames.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}