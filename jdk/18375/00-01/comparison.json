{"files":[{"patch":"@@ -894,1 +894,1 @@\n-\/\/ Time after which a notification can be made.\n+\/\/ Time after which a cleanup is permitted.\n@@ -897,1 +897,1 @@\n-\/\/ Minimum time since last ServiceThread check before cleanup is permitted.\n+\/\/ Minimum time between ServiceThread cleanups.\n@@ -904,1 +904,2 @@\n-  if (Atomic::load(&needs_cleanup_requested) && os::javaTimeNanos() > cleanup_permit_time) {\n+  if (Atomic::load_acquire(&needs_cleanup_requested) &&\n+      os::javaTimeNanos() > cleanup_permit_time) {\n@@ -920,1 +921,1 @@\n-  \/\/ the request.  This order may instead (rarely) unnecessarily notify.\n+  \/\/ the request.\n@@ -926,3 +927,2 @@\n-  \/\/ Service thread might have oopstorage work, but not for this object.\n-  \/\/ Check for deferred updates even though that's not a ServiceThread\n-  \/\/ cleanup; since we're here, we might as well process them.\n+  \/\/ ServiceThread might have oopstorage work, but not for this object.\n+  \/\/ But check for deferred updates, which might provide cleanup work.\n@@ -988,2 +988,1 @@\n-  \/\/ opportunity to run too. There's no need for a notification,\n-  \/\/ because we are part of the service thread (unless gtesting).\n+  \/\/ opportunity to run too.\n","filename":"src\/hotspot\/share\/gc\/shared\/oopStorage.cpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -130,1 +130,1 @@\n-        \/\/ OopStorage work needs to be done at periodic intervals.\n+        \/\/ Some cleanup requests don't notify the ServiceThread so work needs to be done at periodic intervals.\n","filename":"src\/hotspot\/share\/runtime\/serviceThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}