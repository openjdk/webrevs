{"files":[{"patch":"@@ -36,1 +36,0 @@\n-import sun.security.x509.GeneralNameInterface;\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/Builder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -398,12 +398,4 @@\n-     * 3) Issuer is a descendant of a trusted subject (in order of\n-     *    number of links to the trusted subject)\n-     *    a) Issuer: ou=E,ou=D,ou=C,o=B,c=A        [links=1]\n-     *    b) Issuer: ou=F,ou=E,ou=D,ou=C,ou=B,c=A  [links=2]\n-     *\n-     * 4) Issuer is an ancestor of a trusted subject (in order of number of\n-     *    links to the trusted subject)\n-     *    a) Issuer: ou=C,o=B,c=A [links=1]\n-     *    b) Issuer: o=B,c=A      [links=2]\n-     *\n-     * 5) Issuer is in the same namespace as a trusted subject (in order of\n-     *    number of links to the trusted subject)\n+     * 3) Issuer is in the same namespace as a trusted subject (in order of\n+     *    number of links to the trusted subject). If the last RDN of the\n+     *    common ancestor is geographical, then it is skipped and the next\n+     *    trusted certificate is checked.\n@@ -412,0 +404,1 @@\n+     *    c) Issuer: ou=H,o=D,c=A\t[skipped, only geographical c=A is same]\n@@ -413,8 +406,1 @@\n-     * 6) Issuer is an ancestor of certificate subject (in order of number\n-     *    of links to the certificate subject)\n-     *    a) Issuer:  ou=K,o=J,c=A\n-     *       Subject: ou=L,ou=K,o=J,c=A\n-     *    b) Issuer:  o=J,c=A\n-     *       Subject: ou=L,ou=K,0=J,c=A\n-     *\n-     * 7) Any other certificates\n+     * 4) Any other certificates\n@@ -514,0 +500,3 @@\n+            \/\/ Note that we stop searching if we find a trust anchor that\n+            \/\/ has a common non-geographical ancestor on the basis that there\n+            \/\/ is a good chance that this path is the one we want.\n@@ -516,4 +505,5 @@\n-                List<RDN> tAo1 = commonAncestor(tSubjectName, cIssuer1Name);\n-                List<RDN> tAo2 = commonAncestor(tSubjectName, cIssuer2Name);\n-                if (tAo1 == null && tAo2 == null) {\n-                    \/\/ continue checking other trust anchors\n+                int d1 = distanceToCommonAncestor(tSubjectName, cIssuer1Name);\n+                int d2 = distanceToCommonAncestor(tSubjectName, cIssuer2Name);\n+                if (d1 == -1 && d2 == -1) {\n+                    \/\/ neither cert has a common non-geographical ancestor with\n+                    \/\/ trust anchor, so continue checking other trust anchors\n@@ -522,4 +512,5 @@\n-                if (tAo1 != null) {\n-                    if (tAo2 != null) {\n-                        int hopsTto1 = cIssuer1Name.size() - tAo1.size();\n-                        int hopsTto2 = cIssuer2Name.size() - tAo2.size();\n+                if (d1 != -1) {\n+                    if (d2 != -1) {\n+                        \/\/ both certs share a common non-geographical ancestor\n+                        \/\/ with trust anchor. Prefer the one that is closer\n+                        \/\/ to the trust anchor.\n@@ -527,2 +518,2 @@\n-                            debug.println(METHOD_NME +\" hopsTto1: \" + hopsTto1);\n-                            debug.println(METHOD_NME +\" hopsTto2: \" + hopsTto2);\n+                            debug.println(METHOD_NME +\" cert1 links: \" + d1);\n+                            debug.println(METHOD_NME +\" cert2 links: \" + d2);\n@@ -530,1 +521,1 @@\n-                        return (hopsTto1 > hopsTto2) ? 1 : -1;\n+                        return (d1 > d2) ? 1 : -1;\n@@ -532,0 +523,2 @@\n+                        \/\/ cert1 shares a common non-geographical ancestor with\n+                        \/\/ trust anchor, so it is preferred.\n@@ -534,1 +527,3 @@\n-                } else if (tAo2 != null) {\n+                } else if (d2 != -1) {\n+                    \/\/ cert2 shares a common non-geographical ancestor with\n+                    \/\/ trust anchor, so it is preferred.\n@@ -549,2 +544,2 @@\n-     * Return the common non-geographical ancestor of two X500Names as a\n-     * List of RDN.\n+     * Returns the distance (number of RDNs) from the issuer's DN to the\n+     * common non-geographical ancestor of the trust anchor and issuer's DN.\n@@ -552,3 +547,3 @@\n-     * @param first the first X500Name\n-     * @param second the second X500Name\n-     * @return the common ancestor or null if none or an attribute of the\n+     * @param anchor the anchor's DN\n+     * @param issuer the issuer's DN\n+     * @return the distance or -1 if no common ancestor or an attribute of the\n@@ -557,4 +552,4 @@\n-    public static List<RDN> commonAncestor(X500Name first, X500Name second) {\n-        List<RDN> firstRdns = first.rdns();\n-        List<RDN> secondRdns = second.rdns();\n-        int minLen = Math.min(firstRdns.size(), secondRdns.size());\n+    private static int distanceToCommonAncestor(X500Name anchor, X500Name issuer) {\n+        List<RDN> anchorRdns = anchor.rdns();\n+        List<RDN> issuerRdns = issuer.rdns();\n+        int minLen = Math.min(anchorRdns.size(), issuerRdns.size());\n@@ -562,1 +557,1 @@\n-            return null;\n+            return -1;\n@@ -568,2 +563,2 @@\n-            RDN rdn = firstRdns.get(i);\n-            if (!rdn.equals(secondRdns.get(i))) {\n+            RDN rdn = anchorRdns.get(i);\n+            if (!rdn.equals(issuerRdns.get(i))) {\n@@ -571,1 +566,1 @@\n-                    return null;\n+                    return -1;\n@@ -579,1 +574,1 @@\n-        RDN lastRDN = firstRdns.get(i - 1);\n+        RDN lastRDN = anchorRdns.get(i - 1);\n@@ -586,1 +581,1 @@\n-                return null;\n+                return -1;\n@@ -590,1 +585,1 @@\n-        return firstRdns.subList(0, i);\n+        return issuer.size() - anchorRdns.subList(0, i).size();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/ForwardBuilder.java","additions":43,"deletions":48,"binary":false,"changes":91,"status":"modified"}]}