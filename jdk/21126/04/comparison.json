{"files":[{"patch":"@@ -430,0 +430,1 @@\n+java\/awt\/Mouse\/MouseClickCount.java 8017182 macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Label;\n+import java.awt.Rectangle;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 4473671\n+ * @summary Test to verify GraphicsEnvironment.getDefaultScreenDevice always\n+ *          returning first screen\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DefaultScreenDeviceTest\n+ *\/\n+\n+public class DefaultScreenDeviceTest {\n+    private static Frame testFrame;\n+\n+    public static void main(String[] args) throws Exception {\n+        GraphicsEnvironment ge = GraphicsEnvironment.\n+                getLocalGraphicsEnvironment();\n+        GraphicsDevice[] gds = ge.getScreenDevices();\n+        if (gds.length < 2) {\n+            System.out.println(\"Test requires at least 2 displays\");\n+            return;\n+        }\n+\n+        String INSTRUCTIONS = \"\"\"\n+                1. The test is for systems which allows primary display\n+                   selection in multiscreen systems.\n+                   Set the system primary screen to be the rightmost\n+                   (i.e. the right screen in two screen configuration)\n+                   This can be done by going to OS Display Settings\n+                   selecting the screen and checking the 'Use this device\n+                   as primary monitor' checkbox.\n+                2. When done, click on 'Frame on Primary Screen' button and\n+                   see where the frame will pop up\n+                3. If Primary Frame pops up on the primary display,\n+                   the test passed, otherwise it failed\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static List<Frame> initialize() {\n+        Frame frame = new Frame(\"Default screen device test\");\n+        GraphicsConfiguration gc =\n+                GraphicsEnvironment.getLocalGraphicsEnvironment().\n+                        getDefaultScreenDevice().getDefaultConfiguration();\n+\n+        testFrame = new Frame(\"Primary screen frame\", gc);\n+        frame.setLayout(new BorderLayout());\n+        frame.setSize(200, 200);\n+\n+        Button b = new Button(\"Frame on Primary Screen\");\n+        b.addActionListener(e -> {\n+            if (testFrame != null) {\n+                testFrame.setVisible(false);\n+                testFrame.dispose();\n+            }\n+\n+            testFrame.addWindowListener(new WindowAdapter() {\n+                public void windowClosing(WindowEvent e1) {\n+                    testFrame.setVisible(false);\n+                    testFrame.dispose();\n+                }\n+            });\n+            testFrame.add(new Label(\"This frame should be on the primary screen\"));\n+            testFrame.setBackground(Color.red);\n+            testFrame.pack();\n+            Rectangle rect = gc.getBounds();\n+            testFrame.setLocation(rect.x + 100, rect.y + 100);\n+            testFrame.setVisible(true);\n+        });\n+        frame.add(b);\n+        return List.of(testFrame, frame);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/GraphicsEnvironment\/DefaultScreenDeviceTest.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Event;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.TextArea;\n+\n+\/*\n+ * @test\n+ * @bug 4092370\n+ * @summary Test to verify double click\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DoubleClickTest\n+ *\/\n+\n+public class DoubleClickTest {\n+    static TextArea ta = new TextArea(\"\", 10, 40);\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Double click on the red area.\n+                2. Verify that the event reports click_count > 1 on\n+                   Double-Click. If click_count shows only 1 for every\n+                   Double-Clicks then test FAILS, else test PASS.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"Double-click Test\");\n+        frame.setLayout(new BorderLayout());\n+        frame.add(\"East\", new MyPanel(ta));\n+        frame.add(\"West\", ta);\n+        frame.setSize(200, 200);\n+        return frame;\n+    }\n+}\n+\n+class MyPanel extends Panel {\n+    TextArea ta;\n+\n+    MyPanel(TextArea ta) {\n+        this.ta = ta;\n+        setBackground(Color.red);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(50, 50);\n+    }\n+\n+\n+    public boolean mouseDown(Event event, int x, int y) {\n+        ta.append(\"event click count= \" + event.clickCount + \"\\n\");\n+        return false;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Mouse\/DoubleClickTest.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 4199397\n+ * @summary Test to mouse click count\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MouseClickCount\n+ *\/\n+\n+public class MouseClickCount {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Clicking on Frame panel quickly will produce clickCount larger than 1\n+                   in the TextArea the count is printed for each mouse click\n+                2. Verify that a left-button click followed by a right button click quickly\n+                   will not generate 1, 2, i.e. it's not considered a double clicking.\n+                 \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(initialize())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame initialize() {\n+        Frame f = new Frame(\"Mouse Click Count Test\");\n+        final TextArea ta = new TextArea();\n+        f.add(\"South\", ta);\n+        f.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent e) {\n+                if (e.getClickCount() == 1) ta.append(\"\\n1\");\n+                else ta.append(\", \" + e.getClickCount());\n+            }\n+        });\n+        f.setSize(300, 500);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Mouse\/MouseClickCount.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @bug 4141361\n+ * @summary Test to Ensures that mouse enter \/ exit is delivered to a new\n+ *          frame or component during a drag\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MouseDragEnterExitTest\n+ *\/\n+\n+public class MouseDragEnterExitTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                Click on the blue frame, drag to the white frame, and back\n+                You should get enter\/exit messages for the frames when dragging\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(MouseEvents.initialize())\n+                .logArea(8)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class MouseEvents extends Frame {\n+    static int WITH_WIDGET = 0;\n+\n+    public MouseEvents(int mode) {\n+        super(\"Mouse Drag Enter\/Exit Test\");\n+        setSize(300, 300);\n+\n+        addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseEntered(MouseEvent e) {\n+                PassFailJFrame.log(\"Frame MOUSE_ENTERED\" + \": \" + \" \" +\n+                        e.getX() + \" \" + e.getY());\n+            }\n+\n+            @Override\n+            public void mouseExited(MouseEvent e) {\n+                PassFailJFrame.log(\"Frame MOUSE_EXITED\" + \": \" + \" \" +\n+                        e.getX() + \" \" + e.getY());\n+            }\n+        });\n+\n+        if (mode == WITH_WIDGET) {\n+            setLayout(new BorderLayout());\n+            add(\"Center\", new SimplePanel());\n+        }\n+    }\n+\n+    public static List<Frame> initialize() {\n+        MouseEvents m = new MouseEvents(MouseEvents.WITH_WIDGET);\n+        m.setLocation(500, 300);\n+        MouseEvents t = new MouseEvents(MouseEvents.WITH_WIDGET + 1);\n+        t.setLocation(200, 200);\n+        return List.of(m, t);\n+    }\n+}\n+\n+class SimplePanel extends Panel {\n+    public SimplePanel() {\n+        super();\n+        setName(\"Test Panel\");\n+        addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseEntered(MouseEvent e) {\n+                PassFailJFrame.log(\"Panel MOUSE_ENTERED\" + \": \" + \" \" +\n+                        e.getX() + \" \" + e.getY());\n+            }\n+\n+            @Override\n+            public void mouseExited(MouseEvent e) {\n+                PassFailJFrame.log(\"Panel MOUSE_EXITED\" + \": \" + \" \" +\n+                        e.getX() + \" \" + e.getY());\n+            }\n+        });\n+        setSize(100, 100);\n+        setBackground(Color.blue);\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Mouse\/MouseDragEnterExitTest.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,215 @@\n+\/*\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Canvas;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.MouseListener;\n+import java.awt.event.MouseMotionAdapter;\n+import java.awt.event.MouseMotionListener;\n+\n+\/*\n+ * @test\n+ * @bug 4035189\n+ * @summary Test to verify that Drag events go to wrong component\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual MouseDragTest\n+ *\/\n+\n+class HeavySquare extends Canvas {\n+    private final Color colorNormal;\n+    private boolean gotADragEvent;\n+\n+    public HeavySquare(Color color) {\n+        colorNormal = color;\n+        setBackground(colorNormal);\n+        new MouseChecker(this);\n+        addMouseMotionListener(new DragAdapter());\n+        addMouseListener(new PressReleaseAdapter());\n+    }\n+\n+    class DragAdapter extends MouseMotionAdapter {\n+        public void mouseDragged(MouseEvent ev) {\n+            if (gotADragEvent)\n+                return;\n+\n+            Point mousePt = ev.getPoint();\n+            Dimension csize = getSize();\n+            boolean inBounds =\n+                    (mousePt.x >= 0 && mousePt.x <= csize.width &&\n+                            mousePt.y >= 0 && mousePt.y <= csize.height);\n+            if (!inBounds) {\n+                setBackground(Color.green);\n+            }\n+            gotADragEvent = true;\n+        }\n+    }\n+\n+    class PressReleaseAdapter extends MouseAdapter {\n+        public void mousePressed(MouseEvent ev) {\n+            gotADragEvent = false;\n+        }\n+\n+        public void mouseReleased(MouseEvent ev) {\n+            setBackground(colorNormal);\n+        }\n+    }\n+\n+    public Dimension preferredSize() {\n+        return new Dimension(50, 50);\n+    }\n+}\n+\n+class MouseFrame extends Frame {\n+    public MouseFrame() {\n+        super(\"MouseDragTest\");\n+        new MouseChecker(this);\n+        setLayout(new FlowLayout());\n+        add(new HeavySquare(Color.red));\n+        add(new HeavySquare(Color.blue));\n+        setBounds(new Rectangle(20, 20, 400, 300));\n+    }\n+}\n+\n+public class MouseDragTest {\n+    static Frame TestFrame;\n+\n+    public MouseDragTest() {\n+        TestFrame = new MouseFrame();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. A frame with two boxes will appear. Click and drag _very_ quickly\n+                   off one of the components. You will know you were quick enough\n+                   when the component you dragged off of turns green\n+                2. Repeat this several times on both boxes, ensuring you get them\n+                   to turn green. The components should revert to their original\n+                   color when you release the mouse\n+                3. The test FAILS if the component doesn't revert to original\n+                   color, else PASS.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(35)\n+                .testUI(new MouseFrame())\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n+\n+class MouseChecker implements MouseListener, MouseMotionListener {\n+    private boolean isPressed = false;\n+    private MouseEvent evPrev = null;\n+    private MouseEvent evPrevPrev = null;\n+\n+    public MouseChecker(Component comp) {\n+        comp.addMouseListener(this);\n+        comp.addMouseMotionListener(this);\n+    }\n+\n+    private void recordEv(MouseEvent ev) {\n+        evPrevPrev = evPrev;\n+        evPrev = ev;\n+    }\n+\n+    private synchronized void failure(String str) {\n+        PassFailJFrame.forceFail(\"Test Failed : \"+str);\n+    }\n+\n+    public void mouseClicked(MouseEvent ev) {\n+        if (!(evPrev.getID() == MouseEvent.MOUSE_RELEASED &&\n+                evPrevPrev.getID() == MouseEvent.MOUSE_PRESSED)) {\n+            failure(\"Got mouse click without press\/release preceding.\");\n+        }\n+        recordEv(ev);\n+    }\n+\n+    public void mousePressed(MouseEvent ev) {\n+        recordEv(ev);\n+        if (isPressed) {\n+            failure(\"Got two mouse presses without a release.\");\n+        }\n+        isPressed = true;\n+    }\n+\n+    public void mouseReleased(MouseEvent ev) {\n+        recordEv(ev);\n+        if (!isPressed) {\n+            failure(\"Got mouse release without being pressed.\");\n+        }\n+        isPressed = false;\n+    }\n+\n+    public void mouseEntered(MouseEvent ev) {\n+        recordEv(ev);\n+        Point mousePt = ev.getPoint();\n+        Component comp = (Component) ev.getSource();\n+        Dimension size = comp.getSize();\n+        boolean inBounds =\n+                (mousePt.x >= 0 && mousePt.x <= size.width &&\n+                        mousePt.y >= 0 && mousePt.y <= size.height);\n+\n+        if (!inBounds) {\n+            failure(\"Got mouse entered, but mouse not inside component.\");\n+        }\n+    }\n+\n+    public void mouseExited(MouseEvent ev) {\n+        recordEv(ev);\n+        Point mousePt = ev.getPoint();\n+        Component comp = (Component) ev.getSource();\n+        if (comp instanceof Frame) {\n+            return;\n+        }\n+        Dimension size = comp.getSize();\n+        boolean isOnChild = (comp != comp.getComponentAt(mousePt));\n+        boolean inBounds =\n+                (mousePt.x >= 0 && mousePt.x <= size.width &&\n+                        mousePt.y >= 0 && mousePt.y <= size.height);\n+        if (!isOnChild && inBounds) {\n+            failure(\"Got mouse exit, but mouse still inside component.\");\n+        }\n+    }\n+\n+    public void mouseDragged(MouseEvent ev) {\n+        recordEv(ev);\n+        if (!isPressed) {\n+            failure(\"Got drag without a press first.\");\n+        }\n+    }\n+\n+    public void mouseMoved(MouseEvent ev) {\n+        recordEv(ev);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Mouse\/MouseDragTest.java","additions":215,"deletions":0,"binary":false,"changes":215,"status":"added"}]}