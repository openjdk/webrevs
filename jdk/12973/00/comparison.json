{"files":[{"patch":"@@ -366,1 +366,1 @@\n-  uint lowest_current = (uint)-1;\n+  uint lowest_current = UINT_MAX;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-    size_t const NoPage = ~(size_t)0;\n+    size_t const NoPage = SIZE_MAX;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionToSpaceMapper.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-size_t CollectedHeap::_lab_alignment_reserve = ~(size_t)0;\n+size_t CollectedHeap::_lab_alignment_reserve = SIZE_MAX;\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -317,1 +317,1 @@\n-    assert(_lab_alignment_reserve != ~(size_t)0, \"uninitialized\");\n+    assert(_lab_alignment_reserve != SIZE_MAX, \"uninitialized\");\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  static const uint UNDEFINED = (uint)-1;\n+  static const uint UNDEFINED = UINT_MAX;\n","filename":"src\/hotspot\/share\/gc\/shared\/gcId.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-  return (size_t)-1;\n+  return SIZE_MAX;\n","filename":"src\/hotspot\/share\/gc\/shared\/workerDataArray.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-            (chunklevel::is_valid_level(level()) ? chunklevel::word_size_for_level(level()) : (size_t)-1),\n+            (chunklevel::is_valid_level(level()) ? chunklevel::word_size_for_level(level()) : SIZE_MAX),\n","filename":"src\/hotspot\/share\/memory\/metaspace\/metachunk.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -121,2 +121,0 @@\n-#define SIZE_T_MAX_VALUE ((size_t) -1)\n-\n@@ -350,1 +348,1 @@\n-    jlong size_t_max_value = (jlong) SIZE_T_MAX_VALUE;\n+    jlong size_t_max_value = (jlong)SIZE_MAX;\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1888,1 +1888,1 @@\n-  product(size_t, ArrayAllocatorMallocLimit, (size_t)-1, EXPERIMENTAL,      \\\n+  product(size_t, ArrayAllocatorMallocLimit, SIZE_MAX, EXPERIMENTAL,        \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1821,1 +1821,1 @@\n-  os::print_memory_mappings(nullptr, (size_t)-1, st);\n+  os::print_memory_mappings(nullptr, SIZE_MAX, st);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-      MemoryUsage usage(u.init_size(), u.used(), u.committed(), (size_t)-1);\n+      MemoryUsage usage(u.init_size(), u.used(), u.committed(), MemoryUsage::undefined_size());\n","filename":"src\/hotspot\/share\/services\/gcNotifier.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1916,1 +1916,1 @@\n-      MemoryUsage usage(u.init_size(), u.used(), u.committed(), (size_t)-1);\n+      MemoryUsage usage(u.init_size(), u.used(), u.committed(), MemoryUsage::undefined_size());\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -66,1 +66,1 @@\n-  static size_t undefined_size() { return (size_t) -1; }\n+  static size_t undefined_size() { return SIZE_MAX; }\n","filename":"src\/hotspot\/share\/services\/memoryUsage.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}