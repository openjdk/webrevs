{"files":[{"patch":"@@ -65,1 +65,1 @@\n-  CgroupV1Controller* cpuacct = nullptr;\n+  CgroupV1CpuacctController* cpuacct = nullptr;\n@@ -108,0 +108,1 @@\n+    CgroupV2CpuacctController* cpuacct = new CgroupV2CpuacctController(cpu);\n@@ -110,1 +111,1 @@\n-    return new CgroupV2Subsystem(memory, cpu, mem_other);\n+    return new CgroupV2Subsystem(memory, cpu, cpuacct, mem_other);\n@@ -153,1 +154,1 @@\n-        cpuacct = new CgroupV1Controller(info._root_mount_path, info._mount_path, info._read_only);\n+        cpuacct = new CgroupV1CpuacctController(CgroupV1Controller(info._root_mount_path, info._mount_path, info._read_only));\n@@ -859,0 +860,4 @@\n+jlong CgroupSubsystem::memory_throttle_limit_in_bytes() {\n+  return memory_controller()->controller()->memory_throttle_limit_in_bytes();\n+}\n+\n@@ -887,0 +892,4 @@\n+jlong CgroupSubsystem::cpu_usage_in_micros() {\n+  return cpuacct_controller()->cpu_usage_in_micros();\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -219,0 +219,12 @@\n+\/\/ Pure virtual class representing version agnostic CPU accounting controllers\n+class CgroupCpuacctController: public CHeapObj<mtInternal> {\n+  public:\n+    virtual jlong cpu_usage_in_micros() = 0;\n+    virtual bool needs_hierarchy_adjustment() = 0;\n+    virtual bool is_read_only() = 0;\n+    virtual const char* subsystem_path() = 0;\n+    virtual void set_subsystem_path(const char* cgroup_path) = 0;\n+    virtual const char* mount_point() = 0;\n+    virtual const char* cgroup_path() = 0;\n+};\n+\n@@ -227,0 +239,1 @@\n+    virtual jlong memory_throttle_limit_in_bytes() = 0;\n@@ -253,0 +266,1 @@\n+    virtual CgroupCpuacctController* cpuacct_controller() = 0;\n@@ -258,0 +272,2 @@\n+    jlong cpu_usage_in_micros();\n+\n@@ -262,0 +278,1 @@\n+    jlong memory_throttle_limit_in_bytes();\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.hpp","additions":18,"deletions":1,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -251,0 +251,6 @@\n+jlong CgroupV1MemoryController::memory_throttle_limit_in_bytes() {\n+  \/\/ Log this string at trace level so as to make tests happy.\n+  log_trace(os, container)(\"Memory Throttle Limit is not supported.\");\n+  return OSCONTAINER_ERROR; \/\/ not supported\n+}\n+\n@@ -254,1 +260,1 @@\n-                      CgroupV1Controller* cpuacct,\n+                      CgroupV1CpuacctController* cpuacct,\n@@ -419,0 +425,7 @@\n+jlong CgroupV1CpuacctController::cpu_usage_in_micros() {\n+  julong cpu_usage;\n+  CONTAINER_READ_NUMBER_CHECKED(reader(), \"\/cpuacct.usage\", \"CPU Usage\", cpu_usage);\n+  \/\/ Output is in nanoseconds, convert to microseconds.\n+  return (jlong)cpu_usage \/ 1000;\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.cpp","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,0 +85,1 @@\n+    jlong memory_throttle_limit_in_bytes() override;\n@@ -143,0 +144,29 @@\n+class CgroupV1CpuacctController final : public CgroupCpuacctController {\n+\n+  private:\n+    CgroupV1Controller _reader;\n+    CgroupV1Controller* reader() { return &_reader; }\n+  public:\n+    jlong cpu_usage_in_micros() override;\n+    void set_subsystem_path(const char *cgroup_path) override {\n+      reader()->set_subsystem_path(cgroup_path);\n+    }\n+    bool is_read_only() override {\n+      return reader()->is_read_only();\n+    }\n+    const char* subsystem_path() override {\n+      return reader()->subsystem_path();\n+    }\n+    const char* mount_point() override {\n+      return reader()->mount_point();\n+    }\n+    bool needs_hierarchy_adjustment() override {\n+      return reader()->needs_hierarchy_adjustment();\n+    }\n+    const char* cgroup_path() override { return reader()->cgroup_path(); }\n+\n+  public:\n+    CgroupV1CpuacctController(const CgroupV1Controller& reader) : _reader(reader) {\n+    }\n+};\n+\n@@ -148,1 +178,1 @@\n-                      CgroupV1Controller* cpuacct,\n+                      CgroupV1CpuacctController* cpuacct,\n@@ -168,0 +198,1 @@\n+    CgroupCpuacctController* cpuacct_controller() { return _cpuacct; }\n@@ -174,1 +205,1 @@\n-    CgroupV1Controller* _cpuacct = nullptr;\n+    CgroupV1CpuacctController* _cpuacct = nullptr;\n","filename":"src\/hotspot\/os\/linux\/cgroupV1Subsystem_linux.hpp","additions":34,"deletions":3,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,0 +118,1 @@\n+                                     CgroupV2CpuacctController* cpuacct,\n@@ -123,0 +125,1 @@\n+  _cpuacct = cpuacct;\n@@ -155,0 +158,11 @@\n+jlong CgroupV2CpuController::cpu_usage_in_micros() {\n+  julong cpu_usage;\n+  bool is_ok = reader()->read_numerical_key_value(\"\/cpu.stat\", \"usage_usec\", &cpu_usage);\n+  if (!is_ok) {\n+    log_trace(os, container)(\"CPU Usage failed: %d\", OSCONTAINER_ERROR);\n+    return OSCONTAINER_ERROR;\n+  }\n+  log_trace(os, container)(\"CPU Usage is: \" JULONG_FORMAT, cpu_usage);\n+  return (jlong)cpu_usage;\n+}\n+\n@@ -176,0 +190,6 @@\n+jlong CgroupV2MemoryController::memory_throttle_limit_in_bytes() {\n+  jlong mem_throttle_limit;\n+  CONTAINER_READ_NUMBER_CHECKED_MAX(reader(), \"\/memory.high\", \"Memory Throttle Limit\", mem_throttle_limit);\n+  return mem_throttle_limit;\n+}\n+\n@@ -177,3 +197,3 @@\n-  \/\/ Log this string at trace level so as to make tests happy.\n-  log_trace(os, container)(\"Maximum Memory Usage is not supported.\");\n-  return OSCONTAINER_ERROR; \/\/ not supported\n+  julong mem_max_usage;\n+  CONTAINER_READ_NUMBER_CHECKED(reader(), \"\/memory.peak\", \"Maximum Memory Usage\", mem_max_usage);\n+  return mem_max_usage;\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.cpp","additions":23,"deletions":3,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +65,28 @@\n+    jlong cpu_usage_in_micros();\n+    bool is_read_only() override {\n+      return reader()->is_read_only();\n+    }\n+    const char* subsystem_path() override {\n+      return reader()->subsystem_path();\n+    }\n+    bool needs_hierarchy_adjustment() override {\n+      return reader()->needs_hierarchy_adjustment();\n+    }\n+    void set_subsystem_path(const char* cgroup_path) override {\n+      reader()->set_subsystem_path(cgroup_path);\n+    }\n+    const char* mount_point() override { return reader()->mount_point(); }\n+    const char* cgroup_path() override { return reader()->cgroup_path(); }\n+};\n+\n+class CgroupV2CpuacctController: public CgroupCpuacctController {\n+  private:\n+    CgroupV2CpuController* _reader;\n+    CgroupV2CpuController* reader() { return _reader; }\n+  public:\n+    CgroupV2CpuacctController(CgroupV2CpuController* reader) : _reader(reader) {\n+    }\n+    \/\/ In cgroup v2, cpu usage is a part of the cpu controller.\n+    jlong cpu_usage_in_micros() override {\n+      return reader()->cpu_usage_in_micros();\n+    }\n@@ -92,0 +121,1 @@\n+    jlong memory_throttle_limit_in_bytes() override;\n@@ -121,0 +151,2 @@\n+    CgroupCpuacctController* _cpuacct = nullptr;\n+\n@@ -126,0 +158,1 @@\n+                      CgroupV2CpuacctController* cpuacct,\n@@ -140,0 +173,1 @@\n+    CgroupCpuacctController* cpuacct_controller() override { return _cpuacct; };\n","filename":"src\/hotspot\/os\/linux\/cgroupV2Subsystem_linux.hpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,0 +125,5 @@\n+jlong OSContainer::memory_throttle_limit_in_bytes() {\n+  assert(cgroup_subsystem != nullptr, \"cgroup subsystem not available\");\n+  return cgroup_subsystem->memory_throttle_limit_in_bytes();\n+}\n+\n@@ -180,0 +185,5 @@\n+jlong OSContainer::cpu_usage_in_micros() {\n+  assert(cgroup_subsystem != nullptr, \"cgroup subsystem not available\");\n+  return cgroup_subsystem->cpu_usage_in_micros();\n+}\n+\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,0 +57,1 @@\n+  static jlong memory_throttle_limit_in_bytes();\n@@ -72,0 +73,2 @@\n+  static jlong cpu_usage_in_micros();\n+\n","filename":"src\/hotspot\/os\/linux\/osContainer_linux.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2491,0 +2491,8 @@\n+  jlong j = OSContainer::cpu_usage_in_micros();\n+  st->print(\"cpu_usage_in_micros: \");\n+  if (j >= 0) {\n+    st->print_cr(JLONG_FORMAT, j);\n+  } else {\n+    st->print_cr(\"%s\", j == OSCONTAINER_ERROR ? \"not supported\" : \"no usage\");\n+  }\n+\n@@ -2494,0 +2502,1 @@\n+  OSContainer::print_container_helper(st, OSContainer::memory_throttle_limit_in_bytes(), \"memory_throttle_limit_in_bytes\");\n@@ -2501,1 +2510,1 @@\n-  jlong j = OSContainer::pids_max();\n+  j = OSContainer::pids_max();\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -113,0 +113,1 @@\n+            \"CPU Usage\",\n@@ -116,0 +117,1 @@\n+            \"Memory Throttle Limit\",\n","filename":"test\/hotspot\/jtreg\/containers\/docker\/TestMisc.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}