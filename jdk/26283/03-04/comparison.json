{"files":[{"patch":"@@ -2476,0 +2476,4 @@\n+bool Matcher::should_attempt_register_biasing(int mopc) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1079,0 +1079,4 @@\n+bool Matcher::should_attempt_register_biasing(int mopc) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2393,0 +2393,4 @@\n+bool Matcher::should_attempt_register_biasing(int mopc) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2065,0 +2065,4 @@\n+bool Matcher::should_attempt_register_biasing(int mopc) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1896,0 +1896,4 @@\n+bool Matcher::should_attempt_register_biasing(int mopc) {\n+  return false;\n+}\n+\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -437,0 +437,64 @@\n+bool Matcher::should_attempt_register_biasing(int mopc) {\n+  switch(mopc) {\n+    default:\n+      return false;\n+    case addI_rReg_ndd_rule:\n+    case addI_rReg_rReg_imm_ndd_rule:\n+    case addI_rReg_rReg_mem_ndd_rule:\n+    case addL_rReg_ndd_rule:\n+    case addL_rReg_rReg_imm_ndd_rule:\n+    case andI_rReg_ndd_rule:\n+    case andI_rReg_rReg_imm_ndd_rule:\n+    case andI_rReg_rReg_mem_ndd_rule:\n+    case andL_rReg_ndd_rule:\n+    case andL_rReg_rReg_imm_ndd_rule:\n+    case decI_rReg_ndd_rule:\n+    case decL_rReg_ndd_rule:\n+    case incI_rReg_ndd_rule:\n+    case incL_rReg_ndd_rule:\n+    case mulI_rReg_ndd_rule:\n+    case mulI_rReg_rReg_mem_ndd_rule:\n+    case mulL_rReg_ndd_rule:\n+    case mulL_rReg_rReg_mem_ndd_rule:\n+    case negI_rReg_2_ndd_rule:\n+    case negI_rReg_ndd_rule:\n+    case negL_rReg_2_ndd_rule:\n+    case negL_rReg_ndd_rule:\n+    case orI_rReg_imm_rReg_ndd_rule:\n+    case orI_rReg_ndd_rule:\n+    case orI_rReg_rReg_imm_ndd_rule:\n+    case orI_rReg_rReg_mem_ndd_rule:\n+    case orL_rReg_imm_rReg_ndd_rule:\n+    case orL_rReg_ndd_rule:\n+    case orL_rReg_rReg_imm_ndd_rule:\n+    case orL_rReg_rReg_mem_ndd_rule:\n+    case rolI_rReg_Var_ndd_rule:\n+    case rolL_rReg_Var_ndd_rule:\n+    case rorI_rReg_Var_ndd_rule:\n+    case rorL_rReg_Var_ndd_rule:\n+    case salI_rReg_immI2_ndd_rule:\n+    case salI_rReg_imm_ndd_rule:\n+    case salL_rReg_immI2_ndd_rule:\n+    case salL_rReg_imm_ndd_rule:\n+    case sarI_rReg_imm_ndd_rule:\n+    case sarL_rReg_imm_ndd_rule:\n+    case shrI_rReg_imm_ndd_rule:\n+    case shrL_rReg_imm_ndd_rule:\n+    case subI_rReg_ndd_rule:\n+    case subI_rReg_rReg_imm_ndd_rule:\n+    case subI_rReg_rReg_mem_ndd_rule:\n+    case subL_rReg_ndd_rule:\n+    case subL_rReg_rReg_imm_ndd_rule:\n+    case subL_rReg_rReg_mem_ndd_rule:\n+    case xorI_rReg_im1_ndd_rule:\n+    case xorI_rReg_ndd_rule:\n+    case xorI_rReg_rReg_imm_ndd_rule:\n+    case xorI_rReg_rReg_mem_ndd_rule:\n+    case xorL_rReg_im1_ndd_rule:\n+    case xorL_rReg_ndd_rule:\n+    case xorL_rReg_rReg_mem_ndd_rule:\n+      assert(VM_Version::supports_apx_f(), \"\");\n+      return true;\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -1683,8 +1683,10 @@\n-    if (mdef != nullptr && mdef->req() > 1) {\n-      Node* in1 = mdef->in(mdef->oper_input_base());\n-      if (in1 != nullptr) {\n-        uint lrin1 = _lrg_map.find(in1);\n-        \/\/ If a def does not interfere with first input's def,\n-        \/\/ then bias its color towards its input's def.\n-        if (lrin1 != 0 && lrg->_copy_bias == 0 && _ifg->test_edge_sq(lidx, lrin1) == 0) {\n-          lrg->_copy_bias = lrin1;\n+    if (mdef != nullptr && Matcher::should_attempt_register_biasing(mdef->Opcode())) {\n+      if (mdef->req() > 1) {\n+        Node* in1 = mdef->in(mdef->oper_input_base());\n+        if (in1 != nullptr) {\n+          uint lrin1 = _lrg_map.find(in1);\n+          \/\/ If a def does not interfere with first input's def,\n+          \/\/ then bias its color towards its input's def.\n+          if (lrin1 != 0 && lrg->_copy_bias == 0 && _ifg->test_edge_sq(lidx, lrin1) == 0) {\n+            lrg->_copy_bias = lrin1;\n+          }\n@@ -1693,1 +1695,0 @@\n-    }\n@@ -1695,8 +1696,9 @@\n-    if (is_commutative_oper(mdef) && mdef->req() > 2) {\n-      Node* in2 = mdef->in(mdef->oper_input_base() + 1);\n-      if (in2 != nullptr) {\n-        uint lrin2 = _lrg_map.find(in2);\n-        \/\/ If a def does not interfere with second input's def,\n-        \/\/ then bias its color towards its input's def.\n-        if (lrin2 != 0 && lrg->_copy_bias2 == 0 && _ifg->test_edge_sq(lidx, lrin2) == 0) {\n-          lrg->_copy_bias2 = lrin2;\n+      if (is_commutative_oper(mdef) && mdef->req() > 2) {\n+        Node* in2 = mdef->in(mdef->oper_input_base() + 1);\n+        if (in2 != nullptr) {\n+          uint lrin2 = _lrg_map.find(in2);\n+          \/\/ If a def does not interfere with second input's def,\n+          \/\/ then bias its color towards its input's def.\n+          if (lrin2 != 0 && lrg->_copy_bias2 == 0 && _ifg->test_edge_sq(lidx, lrin2) == 0) {\n+            lrg->_copy_bias2 = lrin2;\n+          }\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":19,"deletions":17,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -509,0 +509,2 @@\n+  static bool should_attempt_register_biasing(int mopc);\n+\n","filename":"src\/hotspot\/share\/opto\/matcher.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -306,1 +306,1 @@\n-    @IR(counts = {IRNode.MEM_TO_REG_SPILL_COPY, \"=3\"},\n+    @IR(counts = {IRNode.MEM_TO_REG_SPILL_COPY, \"=4\"},\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestRedundantLea.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}