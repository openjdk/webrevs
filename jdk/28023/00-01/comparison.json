{"files":[{"patch":"@@ -40,1 +40,1 @@\n- * @run junit BridgeMethods\n+ * @run junit BridgeMethodsTest\n@@ -42,1 +42,1 @@\n-public class BridgeMethods {\n+public class BridgeMethodsTest {\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/BridgeMethodsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/BridgeMethods.java","status":"renamed"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Proxy;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/*\n+ * @test\n+ * @bug 8370839\n+ * @summary Behavior of methods whose signature has package-private\n+ *          class or interfaces but the proxy interface is public\n+ * @run junit NonPublicSignaturesTest\n+ *\/\n+public class NonPublicSignaturesTest {\n+    enum Internal { INSTANCE }\n+\n+    public interface InternalParameter {\n+        void call(Internal parameter);\n+    }\n+\n+    @Test\n+    void testNonPublicParameter() throws Throwable {\n+        \/\/ Creation should be successful\n+        InternalParameter instance = (InternalParameter) Proxy.newProxyInstance(\n+                InternalParameter.class.getClassLoader(),\n+                new Class[] { InternalParameter.class },\n+                (_, _, _) -> null);\n+        instance.call(null);\n+        instance.call(Internal.INSTANCE);\n+    }\n+\n+    public interface InternalReturn {\n+        Internal call();\n+    }\n+\n+    @Test\n+    void testNonPublicReturn() throws Throwable {\n+        AtomicReference<Internal> returnValue = new AtomicReference<>();\n+        \/\/ Creation should be successful\n+        InternalReturn instance = (InternalReturn) Proxy.newProxyInstance(\n+                InternalReturn.class.getClassLoader(),\n+                new Class[] { InternalReturn.class },\n+                (_, _, _) -> returnValue.get());\n+        \/\/ checkcast does not perform access check for null\n+        returnValue.set(null);\n+        instance.call();\n+        \/\/ checkcast fails - proxy class cannot access the return type\n+        returnValue.set(Internal.INSTANCE);\n+        assertThrows(IllegalAccessError.class, instance::call);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/NonPublicSignaturesTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -39,1 +39,1 @@\n- * @run junit ProtectedObjectMethods\n+ * @run junit ProtectedObjectMethodsTest\n@@ -41,1 +41,1 @@\n-public class ProtectedObjectMethods {\n+public class ProtectedObjectMethodsTest {\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/ProtectedObjectMethodsTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/ProtectedObjectMethods.java","status":"renamed"}]}