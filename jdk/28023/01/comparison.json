{"files":[{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Method;\n+import java.lang.reflect.Proxy;\n+import java.lang.reflect.UndeclaredThrowableException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.function.Consumer;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/*\n+ * @test\n+ * @bug 8370839\n+ * @summary Behavior of bridge methods in interfaces\n+ * @run junit BridgeMethodsTest\n+ *\/\n+public class BridgeMethodsTest {\n+\n+    interface StringCallable extends Callable<String> {\n+        @Override\n+        String call(); \/\/ throws no exception\n+    }\n+\n+    \/\/ Does not duplicate with Object::clone so it is not proxied\n+    @Test\n+    void testExceptionTypes() throws Throwable {\n+        class MyException extends Exception {}\n+        var instance = Proxy.newProxyInstance(StringCallable.class.getClassLoader(),\n+                new Class[] { StringCallable.class }, (_, _, _) -> { throw new MyException(); });\n+        \/\/ The exception can't be thrown through StringCallable.call which has no throws\n+        var undeclared = assertThrows(UndeclaredThrowableException.class, () -> ((StringCallable) instance).call());\n+        assertInstanceOf(MyException.class, undeclared.getCause());\n+        \/\/ But it can be thrown through Callable.call which permits Exception\n+        assertThrows(MyException.class, () -> ((Callable<?>) instance).call());\n+    }\n+\n+    interface SpecificConsumer extends Consumer<String> {\n+        @Override\n+        void accept(String s);\n+    }\n+\n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    void testMethodObjects() throws Throwable {\n+        List<Method> methods = new ArrayList<>();\n+        var instance = Proxy.newProxyInstance(SpecificConsumer.class.getClassLoader(),\n+                new Class[] { SpecificConsumer.class }, (_, m, _) -> methods.add(m));\n+        ((Consumer<Object>) instance).accept(null);\n+        ((SpecificConsumer) instance).accept(null);\n+        assertEquals(2, methods.size());\n+        \/\/ invocation handler gets different method due to covariant parameter types\n+        assertNotEquals(methods.getFirst(), methods.getLast());\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/BridgeMethodsTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,75 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Proxy;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/*\n+ * @test\n+ * @bug 8370839\n+ * @summary Behavior of methods whose signature has package-private\n+ *          class or interfaces but the proxy interface is public\n+ * @run junit NonPublicSignaturesTest\n+ *\/\n+public class NonPublicSignaturesTest {\n+    enum Internal { INSTANCE }\n+\n+    public interface InternalParameter {\n+        void call(Internal parameter);\n+    }\n+\n+    @Test\n+    void testNonPublicParameter() throws Throwable {\n+        \/\/ Creation should be successful\n+        InternalParameter instance = (InternalParameter) Proxy.newProxyInstance(\n+                InternalParameter.class.getClassLoader(),\n+                new Class[] { InternalParameter.class },\n+                (_, _, _) -> null);\n+        instance.call(null);\n+        instance.call(Internal.INSTANCE);\n+    }\n+\n+    public interface InternalReturn {\n+        Internal call();\n+    }\n+\n+    @Test\n+    void testNonPublicReturn() throws Throwable {\n+        AtomicReference<Internal> returnValue = new AtomicReference<>();\n+        \/\/ Creation should be successful\n+        InternalReturn instance = (InternalReturn) Proxy.newProxyInstance(\n+                InternalReturn.class.getClassLoader(),\n+                new Class[] { InternalReturn.class },\n+                (_, _, _) -> returnValue.get());\n+        \/\/ checkcast does not perform access check for null\n+        returnValue.set(null);\n+        instance.call();\n+        \/\/ checkcast fails - proxy class cannot access the return type\n+        returnValue.set(Internal.INSTANCE);\n+        assertThrows(IllegalAccessError.class, instance::call);\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/NonPublicSignaturesTest.java","additions":75,"deletions":0,"binary":false,"changes":75,"status":"added"},{"patch":"@@ -0,0 +1,151 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.reflect.Proxy;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/*\n+ * @test\n+ * @bug 8370839\n+ * @summary Behavior of protected methods in java.lang.Object\n+ * @modules java.base\/java.lang:+open\n+ * @run junit ProtectedObjectMethodsTest\n+ *\/\n+public class ProtectedObjectMethodsTest {\n+\n+    static final MethodHandle OBJECT_CLONE;\n+    static final MethodHandle OBJECT_FINALIZE;\n+\n+    static {\n+        try {\n+            var lookup = MethodHandles.privateLookupIn(Object.class, MethodHandles.lookup());\n+            OBJECT_CLONE = lookup.findVirtual(Object.class, \"clone\", MethodType.methodType(Object.class));\n+            OBJECT_FINALIZE = lookup.findVirtual(Object.class, \"finalize\", MethodType.methodType(void.class));\n+        } catch (ReflectiveOperationException ex) {\n+            throw new ExceptionInInitializerError(ex);\n+        }\n+    }\n+\n+    interface FakeClone {\n+        FakeClone clone();\n+    }\n+\n+    interface TrueClone {\n+        Object clone();\n+    }\n+\n+    interface PrimitiveClone {\n+        int clone();\n+    }\n+\n+    \/\/ Does not duplicate with Object::clone so it is not proxied\n+    @Test\n+    void testDistinctClone() throws Throwable {\n+        {\n+            var fake = (FakeClone) Proxy.newProxyInstance(FakeClone.class.getClassLoader(), new Class[] { FakeClone.class }, (p, _, _) -> p);\n+            assertSame(fake, fake.clone());\n+            assertThrows(CloneNotSupportedException.class, () -> {\n+                var _ = (Object) OBJECT_CLONE.invoke((Object) fake);\n+            });\n+        }\n+\n+        {\n+            var fake = (FakeClone) Proxy.newProxyInstance(FakeClone.class.getClassLoader(), new Class[] { FakeClone.class, Cloneable.class }, (p, _, _) -> p);\n+            assertSame(fake, fake.clone());\n+            var fakeClone = (Object) OBJECT_CLONE.invoke((Object) fake);\n+            assertNotSame(fake, fakeClone);\n+            assertSame(fake.getClass(), fakeClone.getClass());\n+            assertSame(fakeClone, ((FakeClone) fakeClone).clone());\n+        }\n+\n+        {\n+            var instance = (PrimitiveClone) Proxy.newProxyInstance(PrimitiveClone.class.getClassLoader(), new Class[] { PrimitiveClone.class }, (_, _, _) -> 42);\n+            assertEquals(42, instance.clone());\n+            assertThrows(CloneNotSupportedException.class, () -> {\n+                var _ = (Object) OBJECT_CLONE.invoke((Object) instance);\n+            });\n+        }\n+\n+        {\n+            var instance = (PrimitiveClone) Proxy.newProxyInstance(PrimitiveClone.class.getClassLoader(), new Class[] { PrimitiveClone.class, Cloneable.class }, (_, _, _) -> 76);\n+            assertEquals(76, instance.clone());\n+            var clone = (Object) OBJECT_CLONE.invoke((Object) instance);\n+            assertNotSame(instance, clone);\n+            assertSame(instance.getClass(), clone.getClass());\n+            assertEquals(76, ((PrimitiveClone) clone).clone());\n+        }\n+    }\n+\n+    \/\/ Duplicates with Object::clone so it is proxied\n+    @Test\n+    void testDuplicateClone() throws Throwable {\n+        {\n+            \/\/ TrueClone::clone accidentally overrides Object::clone\n+            var instance = (TrueClone) Proxy.newProxyInstance(TrueClone.class.getClassLoader(), new Class[] { TrueClone.class }, (p, _, _) -> p);\n+            assertSame(instance, instance.clone());\n+            assertSame(instance, (Object) OBJECT_CLONE.invoke((Object) instance));\n+        }\n+\n+        {\n+            \/\/ Use the TrueClone to bridge Object::clone and FakeClone::clone\n+            var instance = Proxy.newProxyInstance(TrueClone.class.getClassLoader(), new Class[] { TrueClone.class, FakeClone.class }, (p, _, _) -> p);\n+            assertSame(instance, ((FakeClone) instance).clone());\n+            assertSame(instance, ((TrueClone) instance).clone());\n+            assertSame(instance, (Object) OBJECT_CLONE.invoke((Object) instance));\n+        }\n+    }\n+\n+    interface FalseFinalize {\n+        int finalize();\n+    }\n+\n+    interface TrueFinalize {\n+        void finalize();\n+    }\n+\n+    @Test\n+    void testDistinctFinalize() throws Throwable {\n+        AtomicInteger invokeCount = new AtomicInteger();\n+        var instance = Proxy.newProxyInstance(FalseFinalize.class.getClassLoader(), new Class[] { FalseFinalize.class }, (_, _, _) -> invokeCount.incrementAndGet());\n+        OBJECT_FINALIZE.invoke(instance);\n+        assertEquals(0, invokeCount.get());\n+        assertEquals(1, ((FalseFinalize) instance).finalize());\n+    }\n+\n+    @Test\n+    void testDuplicateFinalize() throws Throwable {\n+        AtomicInteger invokeCount = new AtomicInteger();\n+        var instance = Proxy.newProxyInstance(TrueFinalize.class.getClassLoader(), new Class[] { TrueFinalize.class }, (_, _, _) -> invokeCount.incrementAndGet());\n+        OBJECT_FINALIZE.invoke(instance);\n+        assertEquals(1, invokeCount.get());\n+        ((TrueFinalize) instance).finalize();\n+        assertEquals(2, invokeCount.get());\n+    }\n+}\n","filename":"test\/jdk\/java\/lang\/reflect\/Proxy\/ProtectedObjectMethodsTest.java","additions":151,"deletions":0,"binary":false,"changes":151,"status":"added"}]}