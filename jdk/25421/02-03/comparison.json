{"files":[{"patch":"@@ -596,5 +596,2 @@\n-        \/\/ Create a new copy so that input is not modified when returned\n-        dups = new HashSet<>(dups);\n-\n-        if (!dups.add(file)) {\n-            throw new KrbException(\"Recursive include\");\n+        if (!file.isAbsolute()) {\n+            throw new KrbException(\"Profile path not absolute\");\n@@ -605,6 +602,3 @@\n-        if (allConfs.containsKey(file)) {\n-            \/\/ Already parsed. This is allowed.\n-            return;\n-        }\n-        if (!file.isAbsolute()) {\n-            throw new KrbException(\"Profile path not absolute\");\n+\n+        if (!dups.add(file)) {\n+            throw new KrbException(\"Recursive include\");\n@@ -613,2 +607,6 @@\n-        List<String> lines = Files.readAllLines(file);\n-        List<String> content = new ArrayList<>();\n+        try {\n+            if (allConfs.containsKey(file)) {\n+                \/\/ Already parsed. Including a file multiple times is allowed.\n+                \/\/ Just make sure it cannot be recursive.\n+                return;\n+            }\n@@ -616,2 +614,2 @@\n-        \/\/ Add content to map at the beginning to detect duplicates\n-        allConfs.put(file, content);\n+            List<String> lines = Files.readAllLines(file);\n+            List<String> content = new ArrayList<>();\n@@ -619,21 +617,8 @@\n-        boolean inSections = false;\n-        for (String line: lines) {\n-            line = line.trim();\n-            if (line.isEmpty() || line.startsWith(\"#\") || line.startsWith(\";\")) {\n-                continue;\n-            }\n-            if (line.startsWith(\"includedir \")) {\n-                Path dir = Paths.get(\n-                        line.substring(\"includedir \".length()).trim());\n-                try (Stream<Path> files = Files.list(dir)) {\n-                    for (Path p: files.sorted().toList()) {\n-                        if (Files.isDirectory(p)) continue;\n-                        String name = p.getFileName().toString();\n-                        if (name.matches(\"[a-zA-Z0-9_-]+\") ||\n-                                (!name.startsWith(\".\") &&\n-                                        name.endsWith(\".conf\"))) {\n-                            \/\/ if dir is absolute, so is p\n-                            readConfigFileLines(p, dups);\n-                            content.add(\"#include \" + p);\n-                        }\n-                    }\n+            \/\/ Add content to map at the beginning to detect duplicates\n+            allConfs.put(file, content);\n+\n+            boolean inSections = false;\n+            for (String line : lines) {\n+                line = line.trim();\n+                if (line.isEmpty() || line.startsWith(\"#\") || line.startsWith(\";\")) {\n+                    continue;\n@@ -641,13 +626,14 @@\n-            } else if (line.startsWith(\"include \")) {\n-                Path p = Paths.get(line.substring(\"include \".length()).trim());\n-                content.add(\"#include \" + p);\n-                readConfigFileLines(p, dups);\n-            } else {\n-                if (!inSections) {\n-                    if (line.charAt(0) == '[') {\n-                        inSections = true;\n-                        content.add(line);\n-                    } else {\n-                        \/\/ Unsupported directives\n-                        if (DEBUG != null) {\n-                            DEBUG.println(\"Line not in any section: \" + line);\n+                if (line.startsWith(\"includedir \")) {\n+                    Path dir = Paths.get(\n+                            line.substring(\"includedir \".length()).trim());\n+                    try (Stream<Path> files = Files.list(dir)) {\n+                        for (Path p : files.sorted().toList()) {\n+                            if (Files.isDirectory(p)) continue;\n+                            String name = p.getFileName().toString();\n+                            if (name.matches(\"[a-zA-Z0-9_-]+\") ||\n+                                    (!name.startsWith(\".\") &&\n+                                            name.endsWith(\".conf\"))) {\n+                                \/\/ if dir is absolute, so is p\n+                                readConfigFileLines(p, dups);\n+                                content.add(\"#include \" + p);\n+                            }\n@@ -656,0 +642,4 @@\n+                } else if (line.startsWith(\"include \")) {\n+                    Path p = Paths.get(line.substring(\"include \".length()).trim());\n+                    content.add(\"#include \" + p);\n+                    readConfigFileLines(p, dups);\n@@ -657,1 +647,13 @@\n-                    content.add(line);\n+                    if (!inSections) {\n+                        if (line.charAt(0) == '[') {\n+                            inSections = true;\n+                            content.add(line);\n+                        } else {\n+                            \/\/ Unsupported directives\n+                            if (DEBUG != null) {\n+                                DEBUG.println(\"Line not in any section: \" + line);\n+                            }\n+                        }\n+                    } else {\n+                        content.add(line);\n+                    }\n@@ -660,0 +662,2 @@\n+        } finally {\n+            dups.remove(file);\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/Config.java","additions":54,"deletions":50,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -71,0 +71,17 @@\n+\n+        \/\/ It's OK for a file to include another file that has already\n+        \/\/ been included multiple times, as long as it's not on the stack.\n+        \/\/ This proves it's necessary to place \"dups.remove(file)\" in a\n+        \/\/ finally block in Config::readConfigFileLines. This case is\n+        \/\/ not covered by IncludeRandom.java because of the structured\n+        \/\/ include pattern (included always longer than includee) there.\n+        Files.writeString(Path.of(\"krb5.conf\"), String.format(\"\"\"\n+                include %1$s\/sub\n+                include %1$s\/sub\n+                include %1$s\/sub2\n+                \"\"\", cwd));\n+        Files.writeString(Path.of(\"sub\"), \"\");\n+        Files.writeString(Path.of(\"sub2\"), String.format(\"\"\"\n+                include %1$s\/sub\n+                \"\"\", cwd));\n+        Config.refresh();\n","filename":"test\/jdk\/sun\/security\/krb5\/config\/DuplicatedIncludes.java","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"}]}