{"files":[{"patch":"@@ -1445,1 +1445,1 @@\n-        fromAfterLoopPredicationRcToBeforeCCP1(OPAQUE_TEMPLATE_ASSERTION_PREDICATE, \"OpaqueTemplateAssertionPredicate\");\n+        duringLoopOpts(OPAQUE_TEMPLATE_ASSERTION_PREDICATE, \"OpaqueTemplateAssertionPredicate\");\n@@ -2785,2 +2785,2 @@\n-     * Apply {@code regex} on all ideal graph phases starting from {@link CompilePhase#AFTER_LOOP_PREDICATION_RC}\n-     * up to and including {@link CompilePhase#BEFORE_CCP1}\n+     * Apply {@code regex} on all ideal graph phases starting from {@link CompilePhase#BEFORE_LOOP_OPTS}\n+     * up to and including {@link CompilePhase#AFTER_LOOP_OPTS}\n@@ -2788,4 +2788,4 @@\n-    private static void fromAfterLoopPredicationRcToBeforeCCP1(String irNodePlaceholder, String regex) {\n-        IR_NODE_MAPPINGS.put(irNodePlaceholder, new SinglePhaseRangeEntry(CompilePhase.AFTER_BEAUTIFY_LOOPS, regex,\n-                                                                          CompilePhase.AFTER_LOOP_PREDICATION_RC,\n-                                                                          CompilePhase.BEFORE_CCP1));\n+    private static void duringLoopOpts(String irNodePlaceholder, String regex) {\n+        IR_NODE_MAPPINGS.put(irNodePlaceholder, new SinglePhaseRangeEntry(CompilePhase.AFTER_LOOP_OPTS, regex,\n+                                                                          CompilePhase.BEFORE_LOOP_OPTS,\n+                                                                          CompilePhase.AFTER_LOOP_OPTS));\n@@ -2803,1 +2803,1 @@\n-                                                                          CompilePhase.PHASEIDEALLOOP_ITERATIONS));\n+                                                                          CompilePhase.AFTER_LOOP_OPTS));\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}