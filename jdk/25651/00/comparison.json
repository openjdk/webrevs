{"files":[{"patch":"@@ -463,12 +463,3 @@\n-  assert(size > 0, \"sanity\");\n-  bool by_words = true;\n-  if ((size > 2 * HeapWordSize) && (((intptr_t)from | (intptr_t)to) & (HeapWordSize - 1)) == 0) {\n-    \/\/ Use wordwise copies if possible:\n-    Copy::disjoint_words((HeapWord*)from,\n-                         (HeapWord*)to,\n-                         ((size_t)size + HeapWordSize-1) \/ HeapWordSize);\n-  } else {\n-    by_words = false;\n-    Copy::conjoint_jbytes(from, to, (size_t)size);\n-  }\n-  log_trace(aot, codecache)(\"Copied %d bytes as %s from \" INTPTR_FORMAT \" to \" INTPTR_FORMAT, size, (by_words ? \"HeapWord\" : \"bytes\"), p2i(from), p2i(to));\n+  assert((int)size > 0, \"sanity\");\n+  memcpy(to, from, size);\n+  log_trace(aot, codecache)(\"Copied %d bytes from \" INTPTR_FORMAT \" to \" INTPTR_FORMAT, size, p2i(from), p2i(to));\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-                 Pattern p = Pattern.compile(\"narrow_oop_base = 0x(\\\\d+), narrow_oop_shift = (\\\\d)\");\n+                 Pattern p = Pattern.compile(\"narrow_oop_base = 0x([0-9a-fA-F]+), narrow_oop_shift = (\\\\d)\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCode\/AOTCodeCompressedOopsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}