{"files":[{"patch":"@@ -90,0 +90,1 @@\n+    static final String LIKELY_SCRIPT_PREFIX = \"likelyScript.\";\n@@ -117,0 +118,1 @@\n+    static boolean nonlikelyScript;\n@@ -120,0 +122,3 @@\n+    \/\/ \"likelyScript\" map\n+    private static final Map<String, SortedSet<String>> likelyScriptMap = new HashMap<>();\n+\n@@ -178,1 +183,1 @@\n-       \/\/ no instantiation\n+        \/\/ no instantiation\n@@ -478,2 +483,2 @@\n-                .filter(key -> key.startsWith(PARENT_LOCALE_PREFIX))\n-                .forEach(key -> {\n+            .filter(key -> key.startsWith(PARENT_LOCALE_PREFIX))\n+            .forEach(key -> {\n@@ -495,0 +500,10 @@\n+        handlerLikelySubtags.getData().forEach((from, to) -> {\n+            if (!from.contains(\"-\")) { \/\/ look for language-only tag\n+                var script = to.split(\"-\")[1];\n+                var key = LIKELY_SCRIPT_PREFIX + script;\n+                var prev = likelyScriptMap.putIfAbsent(key, new TreeSet<String>(Set.of(from)));\n+                if (prev != null) {\n+                    prev.add(from);\n+                }\n+            }\n+        });\n@@ -564,0 +579,1 @@\n+            metaInfo.putAll(likelyScriptMap);\n@@ -1138,1 +1154,1 @@\n-            Locale p = childToParentLocaleMap.get(l);\n+            Locale p = getParentLocale(l);\n@@ -1155,0 +1171,21 @@\n+    private static Locale getParentLocale(Locale child) {\n+        Locale parent = childToParentLocaleMap.get(child);\n+\n+        \/\/ check non-likely script for root\n+        if (nonlikelyScript && parent == null && child.getCountry().isEmpty()) {\n+            var lang = \" \" + child.getLanguage() + \" \";\n+            var script = child.getScript();\n+\n+            if (!script.isEmpty()) {\n+                parent = likelyScriptMap.entrySet().stream()\n+                    .filter(e -> e.getValue().contains(lang))\n+                    .findAny()\n+                    .map(Map.Entry::getKey)\n+                    .map(likely -> likely.equals(script) ? null : Locale.ROOT)\n+                    .orElse(null);\n+            }\n+        }\n+\n+        return parent;\n+    }\n+\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/CLDRConverter.java","additions":41,"deletions":4,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,1 @@\n+import java.util.stream.Collectors;\n@@ -309,7 +310,6 @@\n-                    private static final Map<String, String> resourceNameToLocales = HashMap.newHashMap(%d);\n-                %s\n-                    static {\n-                \"\"\", CLDRConverter.isBaseModule ? \"cldr\" : \"resources.cldr.provider\",\n-                className, metaInfo.keySet().stream().filter(k -> k.equals(\"AvailableLocales\")).count(),\n-                CLDRConverter.isBaseModule ?\n-                    \"\"\"\n+                \"\"\",\n+                    CLDRConverter.isBaseModule ? \"cldr\" : \"resources.cldr.provider\",\n+                    className);\n+\n+            if (CLDRConverter.isBaseModule) {\n+                out.printf(\"\"\"\n@@ -318,0 +318,3 @@\n+                        static final boolean nonlikelyScript = %s; \/\/ package access from CLDRLocaleProviderAdapter\n+\n+                        static {\n@@ -320,24 +323,11 @@\n-                        CLDRConverter.handlerSupplMeta.getLanguageAliasData().size()) :\n-                    \"\");\n-\n-            for (String key : metaInfo.keySet()) {\n-                if (key.startsWith(CLDRConverter.PARENT_LOCALE_PREFIX)) {\n-                    String parentTag = key.substring(CLDRConverter.PARENT_LOCALE_PREFIX.length());\n-                    if (\"root\".equals(parentTag)) {\n-                        out.printf(\"        parentLocalesMap.put(Locale.ROOT,\\n\");\n-                    } else {\n-                        out.printf(\"        parentLocalesMap.put(Locale.forLanguageTag(\\\"%s\\\"),\\n\",\n-                                   parentTag);\n-                    }\n-                    String[] children = toLocaleList(metaInfo.get(key), true).split(\" \");\n-                    Arrays.sort(children);\n-                    out.printf(\"            new String[] {\\n\" +\n-                               \"                \");\n-                    int count = 0;\n-                    for (int i = 0; i < children.length; i++) {\n-                        String child = children[i];\n-                        out.printf(\"\\\"%s\\\", \", child);\n-                        count += child.length() + 4;\n-                        if (i != children.length - 1 && count > 64) {\n-                            out.printf(\"\\n                \");\n-                            count = 0;\n+                        CLDRConverter.handlerSupplMeta.getLanguageAliasData().size(),\n+                        Boolean.valueOf(CLDRConverter.nonlikelyScript)));\n+\n+                for (String key : metaInfo.keySet()) {\n+                    if (key.startsWith(CLDRConverter.PARENT_LOCALE_PREFIX)) {\n+                        String parentTag = key.substring(CLDRConverter.PARENT_LOCALE_PREFIX.length());\n+                        if (\"root\".equals(parentTag)) {\n+                            out.printf(\"        parentLocalesMap.put(Locale.ROOT,\\n\");\n+                        } else {\n+                            out.printf(\"        parentLocalesMap.put(Locale.forLanguageTag(\\\"%s\\\"),\\n\",\n+                                    parentTag);\n@@ -345,6 +335,1 @@\n-                    }\n-                    out.printf(\"\\n            });\\n\");\n-                } else {\n-                    if (\"AvailableLocales\".equals(key)) {\n-                        out.printf(\"        resourceNameToLocales.put(\\\"%s\\\",\\n\", key);\n-                        out.printf(\"            \\\"%s\\\");\\n\", toLocaleList(applyLanguageAliases(metaInfo.get(key)), false));\n+                        generateStringArray(metaInfo.get(key), out);\n@@ -353,3 +338,3 @@\n-            }\n-            \/\/ for languageAliasMap\n-            if (CLDRConverter.isBaseModule) {\n+                out.println();\n+\n+                \/\/ for languageAliasMap\n@@ -359,1 +344,1 @@\n-            }\n+                out.printf(\"    }\\n\\n\");\n@@ -361,1 +346,1 @@\n-            out.printf(\"    }\\n\\n\");\n+                \/\/ end of static initializer block.\n@@ -363,4 +348,1 @@\n-            \/\/ end of static initializer block.\n-\n-            \/\/ Canonical TZ names for delayed initialization\n-            if (CLDRConverter.isBaseModule) {\n+                \/\/ Delayed initialization section\n@@ -368,2 +350,4 @@\n-                               private static class TZCanonicalIDMapHolder {\n-                                   static final Map<String, String> tzCanonicalIDMap = HashMap.newHashMap(%d);\n+                               private static class CLDRMapHolder {\n+                                   private static final Map<String, String> tzCanonicalIDMap = HashMap.newHashMap(%d);\n+                                   private static final Map<String, String> likelyScriptMap = HashMap.newHashMap(%d);\n+\n@@ -371,1 +355,2 @@\n-                           \"\"\", CLDRConverter.handlerTimeZone.getData().size());\n+                           \"\"\", CLDRConverter.handlerTimeZone.getData().size(),\n+                                metaInfo.keySet().stream().filter(k -> k.startsWith(CLDRConverter.LIKELY_SCRIPT_PREFIX)).count());\n@@ -376,1 +361,1 @@\n-                                ids[0]);\n+                            ids[0]);\n@@ -382,1 +367,12 @@\n-                out.printf(\"        }\\n    }\\n\\n\");\n+                out.println();\n+\n+                \/\/ for likelyScript map\n+                for (String key : metaInfo.keySet()) {\n+                    if (key.startsWith(CLDRConverter.LIKELY_SCRIPT_PREFIX)) {\n+                        \/\/ ensure spaces at the begin\/end for delimiting purposes\n+                        out.printf(\"            likelyScriptMap.put(\\\"%s\\\", \\\"%s\\\");\\n\",\n+                                key.substring(CLDRConverter.LIKELY_SCRIPT_PREFIX.length()),\n+                                \" \" + metaInfo.get(key).stream().collect(Collectors.joining(\" \")) + \" \");\n+                    }\n+                }\n+                out.printf(\"        }\\n    }\\n\");\n@@ -384,0 +380,1 @@\n+            out.println();\n@@ -393,1 +390,1 @@\n-                        return resourceNameToLocales.getOrDefault(category, \"\");\n+                        return \" %s\";\n@@ -395,2 +392,0 @@\n-                    %s\n-                }\n@@ -398,1 +393,4 @@\n-                CLDRConverter.isBaseModule ? \"\"\"\n+                toLocaleList(applyLanguageAliases(metaInfo.get(\"AvailableLocales\")), false));\n+\n+            if(CLDRConverter.isBaseModule) {\n+                out.printf(\"\"\"\n@@ -407,1 +405,1 @@\n-                        return TZCanonicalIDMapHolder.tzCanonicalIDMap;\n+                        return CLDRMapHolder.tzCanonicalIDMap;\n@@ -413,1 +411,8 @@\n-                \"\"\" : \"\");\n+\n+                    \/\/ package access from CLDRLocaleProviderAdapter\n+                    Map<String, String> likelyScriptMap() {\n+                        return CLDRMapHolder.likelyScriptMap;\n+                    }\n+                \"\"\");\n+            }\n+            out.printf(\"}\\n\");\n@@ -417,0 +422,18 @@\n+    private static void generateStringArray(SortedSet<String> set, PrintWriter out) throws IOException {\n+        String[] children = toLocaleList(set, true).split(\" \");\n+        Arrays.sort(children);\n+        out.printf(\"            new String[] {\\n\" +\n+                \"                \");\n+        int count = 0;\n+        for (int i = 0; i < children.length; i++) {\n+            String child = children[i];\n+            out.printf(\"\\\"%s\\\", \", child);\n+            count += child.length() + 4;\n+            if (i != children.length - 1 && count > 64) {\n+                out.printf(\"\\n                \");\n+                count = 0;\n+            }\n+        }\n+        out.printf(\"\\n            });\\n\");\n+    }\n+\n@@ -436,1 +459,3 @@\n-                sb.append(' ');\n+                if (sb.length() > 0) {\n+                    sb.append(' ');\n+                }\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/ResourceBundleGenerator.java","additions":84,"deletions":59,"binary":false,"changes":143,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-    private final Map<String, Object> firstDayMap;\n-    private final Map<String, Object> minDaysMap;\n+    private static final Map<String, Object> firstDayMap = new HashMap<>();\n+    private static final Map<String, Object> minDaysMap = new HashMap<>();\n@@ -67,1 +67,1 @@\n-    private final Map<String, String> parentLocalesMap;\n+    private static final Map<String, String> parentLocalesMap = new HashMap<>();\n@@ -71,1 +71,1 @@\n-    private final Map<String, Map<String, SortedSet<String>>> inputSkeletonMap;\n+    private static final Map<String, Map<String, SortedSet<String>>> inputSkeletonMap = new HashMap<>();\n@@ -76,7 +76,0 @@\n-    SupplementalDataParseHandler() {\n-        firstDayMap = new HashMap<>();\n-        minDaysMap = new HashMap<>();\n-        parentLocalesMap = new HashMap<>();\n-        inputSkeletonMap = new HashMap<>();\n-    }\n-\n@@ -161,0 +154,2 @@\n+                    var parent = attributes.getValue(\"parent\").replaceAll(\"_\", \"-\");\n+\n@@ -162,1 +157,1 @@\n-                        attributes.getValue(\"parent\").replaceAll(\"_\", \"-\"),\n+                        parent,\n@@ -164,0 +159,4 @@\n+\n+                    if (\"root\".equals(parent)) {\n+                        CLDRConverter.nonlikelyScript = \"nonlikelyScript\".equals(attributes.getValue(\"localeRules\"));\n+                    }\n","filename":"make\/jdk\/src\/classes\/build\/tools\/cldrconverter\/SupplementalDataParseHandler.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,0 +262,18 @@\n+\n+            if (parent == null) {\n+                \/\/ check nonlikelyScript locales\n+                if (CLDRBaseLocaleDataMetaInfo.nonlikelyScript && locale.getCountry().isEmpty()) {\n+                    var lang = \" \" + locale.getLanguage() + \" \";\n+                    var script= locale.getScript();\n+                    if (!script.isEmpty()) {\n+                        parent = baseMetaInfo.likelyScriptMap().entrySet().stream()\n+                            .filter(e -> e.getValue().contains(lang))\n+                            .findAny()\n+                            .map(Map.Entry::getKey)\n+                            .map(likely -> likely.equals(script) ? null : Locale.ROOT)\n+                            .orElse(null);\n+                    }\n+                }\n+            }\n+\n+            \/\/ no parent found\n","filename":"src\/java.base\/share\/classes\/sun\/util\/cldr\/CLDRLocaleProviderAdapter.java","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,101 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8329691\n+ * @modules java.base\/sun.util.locale.provider\n+ *          java.base\/sun.util.cldr\n+ * @summary Tests CLDR's `nonlikelyScript` attribute is correctly implemented\n+ *      with the CLDRLocaleProviderAdapter\n+ * @run junit NonLikelyScriptTest\n+ *\/\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import sun.util.cldr.CLDRLocaleProviderAdapter;\n+import sun.util.locale.provider.LocaleProviderAdapter;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+public class NonLikelyScriptTest {\n+    private static final CLDRLocaleProviderAdapter CLDR_LOCALE_PROVIDER_ADAPTER\n+        = (CLDRLocaleProviderAdapter) LocaleProviderAdapter.forType(LocaleProviderAdapter.Type.CLDR);\n+    private static final Locale AZ_ARAB = Locale.forLanguageTag(\"az-Arab\");\n+    private static final Locale AZ_CYRL = Locale.forLanguageTag(\"az-Cyrl\");\n+    private static final Locale AZ_LATN = Locale.forLanguageTag(\"az-Latn\");\n+    private static final Locale AZ_XXXX = Locale.forLanguageTag(\"az-Xxxx\");\n+    private static final Locale RU_LATN = Locale.forLanguageTag(\"ru-Latn\");\n+    private static final Locale RU_CYRL = Locale.forLanguageTag(\"ru-Cyrl\");\n+    private static final Locale RU_XXXX = Locale.forLanguageTag(\"ru-Xxxx\");\n+    private static final Locale EN_LATN = Locale.forLanguageTag(\"en-Latn\");\n+    private static final Locale EN_DSRT = Locale.forLanguageTag(\"en-Dsrt\");\n+    private static final Locale EN_XXXX = Locale.forLanguageTag(\"en-Xxxx\");\n+    private static final Locale ZH_HANT_MO = Locale.forLanguageTag(\"zh-Hant-MO\");\n+    private static final Locale ZH_HANS_SG = Locale.forLanguageTag(\"zh-Hans-SG\");\n+    private static final Locale ZH_HANS = Locale.forLanguageTag(\"zh-Hans\");\n+    private static final Locale ZH_HANT = Locale.forLanguageTag(\"zh-Hant\");\n+    private static final Locale ZH_XXXX = Locale.forLanguageTag(\"zh-Xxxx\");\n+\n+    private static Stream<Arguments> parentLocales() {\n+\n+        return Stream.of(\n+            \/\/ likely script\n+            Arguments.of(AZ_LATN, List.of(AZ_LATN, Locale.of(\"az\"), Locale.ROOT)),\n+            Arguments.of(RU_CYRL, List.of(RU_CYRL, Locale.of(\"ru\"), Locale.ROOT)),\n+            Arguments.of(EN_LATN, List.of(EN_LATN, Locale.ENGLISH, Locale.ROOT)),\n+            Arguments.of(ZH_HANS, List.of(ZH_HANS, Locale.CHINA, Locale.CHINESE, Locale.ROOT)),\n+            Arguments.of(Locale.CHINA, List.of(Locale.forLanguageTag(\"zh-Hans-CN\"), ZH_HANS, Locale.CHINA, Locale.CHINESE, Locale.ROOT)),\n+            Arguments.of(ZH_HANS_SG, List.of(ZH_HANS_SG, ZH_HANS, Locale.forLanguageTag(\"zh-SG\"), Locale.CHINESE, Locale.ROOT)),\n+\n+            \/\/ non-likely script, explicit (as of CLDR 45)\n+            Arguments.of(AZ_ARAB, List.of(AZ_ARAB, Locale.ROOT)),\n+            Arguments.of(AZ_CYRL, List.of(AZ_CYRL, Locale.ROOT)),\n+            Arguments.of(EN_DSRT, List.of(EN_DSRT, Locale.ROOT)),\n+            Arguments.of(ZH_HANT, List.of(ZH_HANT, Locale.ROOT)),\n+            Arguments.of(Locale.TAIWAN, List.of(Locale.forLanguageTag(\"zh-Hant-TW\"), ZH_HANT, Locale.ROOT)),\n+            Arguments.of(ZH_HANT_MO, List.of(ZH_HANT_MO, Locale.forLanguageTag(\"zh-Hant-HK\"), ZH_HANT, Locale.ROOT)),\n+\n+            \/\/ non-likely script, implicit\n+            Arguments.of(AZ_XXXX, List.of(AZ_XXXX, Locale.ROOT)),\n+            Arguments.of(RU_LATN, List.of(RU_LATN, Locale.ROOT)),\n+            Arguments.of(RU_XXXX, List.of(RU_XXXX, Locale.ROOT)),\n+            Arguments.of(EN_XXXX, List.of(EN_XXXX, Locale.ROOT)),\n+            Arguments.of(ZH_XXXX, List.of(ZH_XXXX, Locale.ROOT))\n+        );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"parentLocales\")\n+    public void checkParentLocales(Locale locale, List<Locale> expected) {\n+        var actual = CLDR_LOCALE_PROVIDER_ADAPTER.getCandidateLocales(\"\", locale);\n+        assertEquals(expected, actual);\n+    }\n+}\n","filename":"test\/jdk\/sun\/util\/locale\/provider\/NonLikelyScriptTest.java","additions":101,"deletions":0,"binary":false,"changes":101,"status":"added"}]}