{"files":[{"patch":"@@ -74,0 +74,3 @@\n+  if (FLAG_IS_DEFAULT(G1HeapRegionSize)) {\n+    return G1HeapRegion::max_ergonomics_size();\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -60,0 +60,4 @@\n+size_t G1HeapRegion::max_ergonomics_size() {\n+  return G1HeapRegionBounds::max_ergonomics_size();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -319,0 +319,1 @@\n+  static size_t max_ergonomics_size();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (C) 2025 THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.arguments;\n+\n+\/*\n+ * @test TestG1CompressedOops\n+ * @bug 8354145\n+ * @requires vm.flagless\n+ * @summary Verify that the flag TestG1CompressedOops is updated properly\n+ * @library \/test\/lib\n+ * @library \/\n+ * @run driver gc.arguments.TestG1CompressedOops\n+ *\/\n+\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestG1CompressedOops {\n+\n+  private static void checkG1CompressedOops(String[] flags, boolean expectedValue, int exitValue) throws Exception {\n+    ArrayList<String> flagList = new ArrayList<String>();\n+    flagList.addAll(Arrays.asList(flags));\n+    flagList.add(\"-XX:+UseG1GC\");\n+    flagList.add(\"-XX:+PrintFlagsFinal\");\n+    flagList.add(\"-version\");\n+\n+    OutputAnalyzer output = GCArguments.executeTestJava(flagList);\n+    output.shouldHaveExitValue(exitValue);\n+\n+    if (exitValue == 0) {\n+      String stdout = output.getStdout();\n+      boolean flagValue = getFlagValue(\"UseCompressedOops\", stdout);\n+      if (flagValue != expectedValue) {\n+        throw new RuntimeException(\"Wrong value for UseCompressedOops. Expected \" + expectedValue + \" but got \" + flagValue);\n+      }\n+    }\n+  }\n+\n+  private static boolean getFlagValue(String flag, String where) {\n+      Matcher m = Pattern.compile(flag + \"\\\\s+:?=\\\\s+\\\\D+\").matcher(where);\n+      if (!m.find()) {\n+          throw new RuntimeException(\"Could not find value for flag \" + flag + \" in output string\");\n+      }\n+      String match = m.group();\n+      return match.contains(\"true\");\n+  }\n+\n+  public static void main(String args[]) throws Exception {\n+    checkG1CompressedOops(new String[] { \"-Xmx64m\"   \/* default is 1m *\/        }, true, 0);\n+    checkG1CompressedOops(new String[] { \"-Xmx64m\",  \"-XX:G1HeapRegionSize=2m\"  }, true, 0);\n+    checkG1CompressedOops(new String[] { \"-Xmx32768m\" \/* 32g will turn off the usecompressedoops *\/  }, false, 0);\n+    checkG1CompressedOops(new String[] { \"-Xmx32760m\" }, false, 0);\n+    checkG1CompressedOops(new String[] { \"-Xmx32736m\", \/* 32g - 32m will turn on the usecomppressedoops *\/ }, true, 0);\n+\n+    \/\/ if set G1HeapRegionSize explicitly with -Xmx32736m will turn off the UseCompressedOops\n+    checkG1CompressedOops(new String[] { \"-Xmx32736m\", \"-XX:G1HeapRegionSize=1m\" }, false, 0);\n+    checkG1CompressedOops(new String[] { \"-Xmx32256m\", \"-XX:G1HeapRegionSize=512m\" }, true, 0);\n+  }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/arguments\/TestG1CompressedOops.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}