{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -283,1 +283,1 @@\n-                                            X500Principal prevCertIssuer) {\n+                X500Principal prevCertIssuer) throws CRLException {\n@@ -289,2 +289,8 @@\n-                X500Name issuerDN = (X500Name) names.get(0).getName();\n-                return issuerDN.asX500Principal();\n+                Iterator<GeneralName> itr = names.iterator();\n+                while (itr.hasNext()) {\n+                    if (itr.next().getName() instanceof X500Name issuerDN) {\n+                        return issuerDN.asX500Principal();\n+                    }\n+                }\n+                throw new CRLException(\"Parsing error: CertificateIssuer \"\n+                         + \"field does not contain an X.500 DN\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/X509CRLImpl.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8336665\n+ * @summary Verify that generateCRLs method does not throw ClassCastException.\n+ *          It should throw CRLException instead.\n+ * @library \/test\/lib\n+ *\/\n+import java.security.NoSuchProviderException;\n+import java.security.cert.*;\n+import java.io.ByteArrayInputStream;\n+import java.util.Base64;\n+\n+import jdk.test.lib.Utils;\n+\n+public class UnexpectedCCE {\n+    static CertificateFactory cf = null;\n+\n+    public static void main(String[] av ) throws CertificateException,\n+           NoSuchProviderException {\n+\n+        \/\/ \"class sun.security.x509.OIDName cannot be cast\n+        \/\/ to class sun.security.x509.X500Name\"\n+        byte[] encoded_1 = Base64.getDecoder().decode(\"\"\"\n+            MIIBljCCAVMCAQEwCwYHKoZIzjgEAwUAMC0xEzARBgoJkiaJk\/IsZAEZEwNjb20xFjA\\\n+            UBgoJkiaJjvIsZAEZEwZ0ZXN0Q0EXDTAzMDcxNTE2MjAwNVoXDTAzMDcyMDE2MjAwNV\\\n+            owgdIwUwIBBBcNMDMwNzE1MTYyMDAzWjA\/MD0GA1UdHQEB\/wQzMDGILzETMBEGCgmSJ\\\n+            omT8ixkARkMA2NvbTEYMBYGCgmSJomT8ixkARkTCGNlcnRzUlVTMBICAQMXDTAzMDcx\\\n+            NTE2MjAwNFowUwIBAhcNMDMwNzE1MTYyMDA0WjA\/MD0GA1UdIQEB\/wQzMDEwGAYDVQQ\\\n+            DExEwDyqGMDEUMgAwgDAuRQA1MRYGCgmSJomT8ixkARkTCG15VGVzdENBMBICAQEXDT\\\n+            AzMDcxNTE2MjAwNFqgHzAdMA8GA1UdHAEB\/wQFMAOEAf8wCgYDVR0UAwACAQIwCwYHK\\\n+            oZIzjgEAwUAAzAAMC0CFBaZDryEEOr8Cw7sOAAAAKaDgtHcAhUAkUenJpwYZgS6IPjy\\\n+            AjZG+RfHdO4=\"\"\");\n+\n+        \/\/ \"class sun.security.x509.X400Address cannot be cast\n+        \/\/ to class sun.security.x509.X500Name\"\n+        byte[] encoded_2 = Base64.getDecoder().decode(\"\"\"\n+            MIIBljCCAVMCAQEwCwYHKoZIzjgEAwUAMC0xEzARBgoJkiaJk\/IsZAEZEwNjb20xFjA\\\n+            UBgoJkiaJk\/IsZAEZEwZ0ZXN0J0EXDTAzMDcxNTE2MjAwNVoXDTAzMDcyMDE2MjAwNV\\\n+            owgdIwUwIBBBcNMDMwNzE1MTYyMDA0WjA\/MD0GA1UdHQEB\/wQzMDGkLzETMBEGCgmSJ\\\n+            omT8ixkARkTA2NvbTEYMBYGCgmSJomT8ixkARkTCGNlcnRzUlVTMBICAQMXDTAzMDcx\\\n+            NTE2MjAwNFowUwIBAhcNMDMwNzE1MTYyMDA0WjA\/MD0GA1UdHQEB\/wQzMDGjLzETMBE\\\n+            GCgmSJomT8ixkARkTA2NvGG0wMRYGCgmSJomT8ixkARkTCG15VGVzdENBMBICAQEXDT\\\n+            AzMDcxNTE2MjAwNVqgHzAdMGAGA1UdHAEB\/wQFMAOEAf8wCgYDVR0UBAMCAQIwCwYHK\\\n+            oZIzjgEAwUAAzAAMC0CFBaZDryEEOr8Cw7sJa07gqaDgtHcAhUAkUenJpwYZgS6IPjy\\\n+            AjZG+RfHdO4=\"\"\");\n+\n+        cf = CertificateFactory.getInstance(\"X.509\", \"SUN\");\n+\n+        run(encoded_1);\n+        run(encoded_2);\n+    }\n+\n+    private static void run(byte[] buf) {\n+        Utils.runAndCheckException(\n+                () -> cf.generateCRLs(new ByteArrayInputStream(buf)),\n+                CRLException.class);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/x509\/X509CRLImpl\/UnexpectedCCE.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}