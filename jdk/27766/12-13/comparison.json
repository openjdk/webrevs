{"files":[{"patch":"@@ -30,1 +30,0 @@\n-import org.junit.jupiter.api.Assumptions;\n@@ -34,1 +33,1 @@\n-import java.util.Objects;\n+import java.io.OutputStream;\n@@ -36,3 +35,2 @@\n-import jdk.test.lib.JDKToolLauncher;\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.process.ProcessTools;\n+import java.util.Objects;\n+import jdk.test.lib.dcmd.PidJcmdExecutor;\n@@ -40,0 +38,2 @@\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Utils;\n@@ -60,2 +60,4 @@\n-        \/\/ Wait the process to enter VMStartCallback\n-        child.getInputStream().read();\n+        \/\/ Wait until the process enters VMStartCallback\n+        try (InputStream is = child.getInputStream()) {\n+            is.read();\n+        }\n@@ -66,2 +68,10 @@\n-        child.destroy();\n-        child.waitFor();\n+        try (OutputStream os = child.getOutputStream()) {\n+            os.write(0);\n+        }\n+\n+        if (!child.waitFor(5, TimeUnit.SECONDS)) {\n+            throw new AssertionError(\"Timed out while waiting child process to complete\");\n+        }\n+        if (child.exitValue() != 0) {\n+            throw new AssertionError(\"Expected child exit code to be 0, but was \" + child.exitValue());\n+        }\n@@ -73,1 +83,1 @@\n-            VirtualMachine vm = VirtualMachine.attach(child.pid() + \"\");\n+            VirtualMachine vm = VirtualMachine.attach(String.valueOf(child.pid()));\n@@ -86,14 +96,2 @@\n-        JDKToolLauncher jcmd;\n-        try {\n-            jcmd = JDKToolLauncher.create(\"jcmd\");\n-        } catch (Exception exception) {\n-            Assumptions.abort(\"jcmd wasn't found: \" + exception.getMessage());\n-            return;\n-        }\n-\n-        jcmd.addToolArg(child.pid() + \"\");\n-        jcmd.addToolArg(\"JVMTI.agent_load\");\n-        jcmd.addToolArg(\"some.jar\");\n-\n-        ProcessBuilder pb = new ProcessBuilder(jcmd.getCommand());\n-        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        PidJcmdExecutor executor = new PidJcmdExecutor(String.valueOf(child.pid()));\n+        OutputAnalyzer out = executor.execute(\"JVMTI.agent_load some.jar\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/attach\/EarlyDynamicLoad\/TestEarlyDynamicLoad.java","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -31,3 +31,3 @@\n-    putchar('1');\n-    fflush(stdout);\n-    getchar();\n+  putchar('1');\n+  fflush(stdout);\n+  getchar();\n@@ -37,13 +37,20 @@\n-    jvmtiEnv* jvmti;\n-    if (vm->GetEnv((void**) &jvmti, JVMTI_VERSION_1_0) != 0) {\n-        return 1;\n-    }\n-\n-    jvmtiEventCallbacks callbacks;\n-    memset(&callbacks, 0, sizeof(callbacks));\n-    callbacks.VMStart = VMStartCallback;\n-\n-    jvmti->SetEventCallbacks(&callbacks, sizeof(callbacks));\n-    jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VM_START, nullptr);\n-\n-    return 0;\n+  jvmtiEnv* jvmti;\n+  if (vm->GetEnv((void**) &jvmti, JVMTI_VERSION_1_0) != JVMTI_ERROR_NONE) {\n+    fprintf(stderr, \"JVMTI error occurred during GetEnv call\\n\");\n+    return 1;\n+  }\n+\n+  jvmtiEventCallbacks callbacks;\n+  memset(&callbacks, 0, sizeof(callbacks));\n+  callbacks.VMStart = VMStartCallback;\n+\n+  if (jvmti->SetEventCallbacks(&callbacks, sizeof(callbacks)) != JVMTI_ERROR_NONE) {\n+    fprintf(stderr, \"JVMTI error occurred during SetEventCallbacks call\\n\");\n+    return 1;\n+  }\n+  if (jvmti->SetEventNotificationMode(JVMTI_ENABLE, JVMTI_EVENT_VM_START, nullptr) != JVMTI_ERROR_NONE) {\n+    fprintf(stderr, \"JVMTI error occurred during SetEventNotificationMode call\\n\");\n+    return 1;\n+  }\n+\n+  return 0;\n","filename":"test\/hotspot\/jtreg\/serviceability\/attach\/EarlyDynamicLoad\/libEarlyDynamicLoad.cpp","additions":23,"deletions":16,"binary":false,"changes":39,"status":"modified"}]}