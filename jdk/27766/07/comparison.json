{"files":[{"patch":"@@ -199,0 +199,5 @@\n+  if (JvmtiEnvBase::get_phase() != JVMTI_PHASE_LIVE) {\n+    st->print_cr(\"Dynamic agent loading is only permitted in the live phase\");\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiAgentList.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,62 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestEarlyDynamicLoadAttach\n+ * @summary Test that dynamic attach (via VirtualMachine) fails gracefully when the JVM is not in live phase.\n+ *          The test sets up a callback for VMStart in Agent_OnLoad, which then tries to attach with VirtualMachine.\n+ * @requires vm.jvmti\n+ * @library \/test\/lib\n+ * @run driver TestEarlyDynamicLoadAttach\n+ *\/\n+\n+import com.sun.tools.attach.VirtualMachine;\n+import java.io.File;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.JDKToolFinder;\n+\n+public class TestEarlyDynamicLoadAttach {\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                \"-XX:+StartAttachListener\",\n+                \"-agentpath:\" + Utils.TEST_NATIVE_PATH + File.separator + System.mapLibraryName(\"EarlyDynamicLoad\"),\n+                \"-version\");\n+        String javaPath = JDKToolFinder.getJDKTool(\"java\");\n+        pb.environment().put(\"JAVA_PATH\", javaPath.replace(\"\\\\\", \"\/\"));\n+        pb.environment().put(\"CLASSPATH\", System.getProperty(\"java.class.path\").replace(\"\\\\\", \"\/\"));\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        output.shouldContain(\"Dynamic agent loading is only permitted in the live phase\");\n+    }\n+}\n+\n+class AttachAgent {\n+    public static void main(String... args) throws Exception {\n+        VirtualMachine vm = VirtualMachine.attach(args[0]);\n+        vm.loadAgent(\"some.jar\");\n+        vm.detach();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/EarlyDynamicLoad\/TestEarlyDynamicLoadAttach.java","additions":62,"deletions":0,"binary":false,"changes":62,"status":"added"},{"patch":"@@ -0,0 +1,52 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test TestEarlyDynamicLoadJcmd\n+ * @summary Test that jcmd fails gracefully when the JVM is not in live phase.\n+ *          The test sets up a callback for VMStart in Agent_OnLoad, which then invokes jcmd.\n+ * @requires vm.jvmti\n+ * @library \/test\/lib\n+ * @run driver TestEarlyDynamicLoadJcmd\n+ *\/\n+\n+import java.io.File;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.JDKToolFinder;\n+\n+public class TestEarlyDynamicLoadJcmd {\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\n+                \"-XX:+StartAttachListener\",\n+                \"-agentpath:\" + Utils.TEST_NATIVE_PATH + File.separator + System.mapLibraryName(\"EarlyDynamicLoad\"),\n+                \"-version\");\n+        String jcmdPath = JDKToolFinder.getJDKTool(\"jcmd\");\n+        pb.environment().put(\"JCMD_PATH\", jcmdPath.replace(\"\\\\\", \"\/\"));\n+\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        output.shouldContain(\"Dynamic agent loading is only permitted in the live phase\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/EarlyDynamicLoad\/TestEarlyDynamicLoadJcmd.java","additions":52,"deletions":0,"binary":false,"changes":52,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include <jvmti.h>\n+\n+#include <errno.h>\n+#include <stdlib.h>\n+#include <stdio.h>\n+#include <string.h>\n+#ifdef WINDOWS\n+#include \"process.h\"\n+#define PID() _getpid()\n+#else\n+#include \"unistd.h\"\n+#define PID() getpid()\n+#endif \/\/ WINDOWS\n+\n+static void JNICALL VMStartJcmd(jvmtiEnv* jvmti, JNIEnv* env) {\n+    char cmd[256];\n+    snprintf(cmd, sizeof(cmd), \"%s %d JVMTI.agent_load some.jar\", getenv(\"JCMD_PATH\"), PID());\n+    printf(\"Running jcmd command: '%s'\\n\", cmd);\n+\n+    int res = system(cmd);\n+    if (res == -1) {\n+        printf(\"jcmd call failed: %s\\n\", strerror(errno));\n+    } else {\n+        printf(\"jcmd result = %d\\n\", res);\n+    }\n+}\n+\n+static void JNICALL VMStartAttach(jvmtiEnv* jvmti, JNIEnv* env) {\n+    char cmd[1024];\n+    snprintf(cmd, sizeof(cmd), \"%s -cp %s AttachAgent %d\", getenv(\"JAVA_PATH\"), getenv(\"CLASSPATH\"),\n+                                                           PID());\n+    printf(\"Running attach command: '%s'\\n\", cmd);\n+\n+    int res = system(cmd);\n+    if (res == -1) {\n+        printf(\"attach call failed: %s\\n\", strerror(errno));\n+    } else {\n+        printf(\"attach result = %d\\n\", res);\n+    }\n+}\n+\n+JNIEXPORT int Agent_OnLoad(JavaVM* vm, char* options, void* reserved) {\n+    jvmtiEnv* jvmti;\n+    if ((*vm)->GetEnv(vm, (void**)&jvmti, JVMTI_VERSION_1_0) != 0) {\n+        return 1;\n+    }\n+\n+    jvmtiEventCallbacks callbacks = {0};\n+    if (getenv(\"JCMD_PATH\") != NULL) {\n+        callbacks.VMStart = VMStartJcmd;\n+    } else {\n+        callbacks.VMStart = VMStartAttach;\n+    }\n+\n+    (*jvmti)->SetEventCallbacks(jvmti, &callbacks, sizeof(callbacks));\n+    (*jvmti)->SetEventNotificationMode(jvmti, JVMTI_ENABLE, JVMTI_EVENT_VM_START, NULL);\n+\n+    return 0;\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/EarlyDynamicLoad\/libEarlyDynamicLoad.c","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}