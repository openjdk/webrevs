{"files":[{"patch":"@@ -2407,1 +2407,1 @@\n-  guarantee(!is_gc_active(), \"collection is not reentrant\");\n+  guarantee(!is_stw_gc_active(), \"collection is not reentrant\");\n@@ -2477,1 +2477,1 @@\n-  IsGCActiveMark active_gc_mark;\n+  IsSTWGCActiveMark active_gc_mark;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -757,1 +757,1 @@\n-  \/\/ precondition: !is_gc_active()\n+  \/\/ precondition: !is_stw_gc_active()\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -268,1 +268,1 @@\n-  assert(!is_gc_active(), \"must not pin objects during a GC\");\n+  assert(!is_stw_gc_active(), \"must not pin objects during a GC pause\");\n@@ -277,1 +277,1 @@\n-  assert(!is_gc_active(), \"must not unpin objects during a GC\");\n+  assert(!is_stw_gc_active(), \"must not unpin objects during a GC pause\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  IsGCActiveMark          _active;\n+  IsSTWGCActiveMark       _active;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1567,1 +1567,1 @@\n-  assert(!_g1h->is_gc_active(), \"Only call concurrently\");\n+  assert(!_g1h->is_stw_gc_active(), \"Only call concurrently\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-  IsGCActiveMark x;\n+  IsSTWGCActiveMark x;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1VMOperations.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -462,1 +462,1 @@\n-  assert(!is_gc_active(), \"not reentrant\");\n+  assert(!is_stw_gc_active(), \"not reentrant\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1270,1 +1270,1 @@\n-  assert(!heap->is_gc_active(), \"not reentrant\");\n+  assert(!heap->is_stw_gc_active(), \"not reentrant\");\n@@ -1272,1 +1272,1 @@\n-  IsGCActiveMark mark;\n+  IsSTWGCActiveMark mark;\n@@ -1493,1 +1493,1 @@\n-    assert(ParallelScavengeHeap::heap()->is_gc_active(), \"called outside gc\");\n+    assert(ParallelScavengeHeap::heap()->is_stw_gc_active(), \"called outside gc\");\n@@ -1510,1 +1510,1 @@\n-  assert(ParallelScavengeHeap::heap()->is_gc_active(), \"called outside gc\");\n+  assert(ParallelScavengeHeap::heap()->is_stw_gc_active(), \"called outside gc\");\n@@ -1987,1 +1987,1 @@\n-  assert(ParallelScavengeHeap::heap()->is_gc_active(), \"called outside gc\");\n+  assert(ParallelScavengeHeap::heap()->is_stw_gc_active(), \"called outside gc\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psParallelCompact.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  assert(ParallelScavengeHeap::heap()->is_gc_active(), \"called outside gc\");\n+  assert(ParallelScavengeHeap::heap()->is_stw_gc_active(), \"called outside gc\");\n@@ -118,1 +118,1 @@\n-  assert(ParallelScavengeHeap::heap()->is_gc_active(), \"called outside gc\");\n+  assert(ParallelScavengeHeap::heap()->is_stw_gc_active(), \"called outside gc\");\n@@ -235,1 +235,1 @@\n-  assert(!ParallelScavengeHeap::heap()->is_gc_active(), \"not reentrant\");\n+  assert(!ParallelScavengeHeap::heap()->is_stw_gc_active(), \"not reentrant\");\n@@ -239,1 +239,1 @@\n-  IsGCActiveMark mark;\n+  IsSTWGCActiveMark mark;\n@@ -267,1 +267,1 @@\n-    assert(ParallelScavengeHeap::heap()->is_gc_active(), \"called outside gc\");\n+    assert(ParallelScavengeHeap::heap()->is_stw_gc_active(), \"called outside gc\");\n","filename":"src\/hotspot\/share\/gc\/parallel\/psScavenge.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -487,1 +487,1 @@\n-  guarantee(!is_gc_active(), \"collection is not reentrant\");\n+  guarantee(!is_stw_gc_active(), \"collection is not reentrant\");\n@@ -498,1 +498,1 @@\n-  IsGCActiveMark active_gc_mark;\n+  IsSTWGCActiveMark active_gc_mark;\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-  _is_gc_active(false),\n+  _is_stw_gc_active(false),\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -93,2 +93,2 @@\n-  friend class IsGCActiveMark; \/\/ Block structured external access to _is_gc_active\n-  friend class DisableIsGCActiveMark; \/\/ Disable current IsGCActiveMark\n+  friend class IsSTWGCActiveMark; \/\/ Block structured external access to _is_stw_gc_active\n+  friend class DisableIsSTWGCActiveMark; \/\/ Disable current IsSTWGCActiveMark\n@@ -115,1 +115,1 @@\n-  bool _is_gc_active;\n+  bool _is_stw_gc_active;\n@@ -377,4 +377,2 @@\n-  \/\/ Returns \"true\" iff there is a stop-world GC in progress.  (I assume\n-  \/\/ that it should answer \"false\" for the concurrent part of a concurrent\n-  \/\/ collector -- dld).\n-  bool is_gc_active() const { return _is_gc_active; }\n+  \/\/ Returns \"true\" iff there is a stop-world GC in progress.\n+  bool is_stw_gc_active() const { return _is_stw_gc_active; }\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-\/\/ _is_gc_active state without requiring accessors in CollectedHeap\n+\/\/ _is_stw_gc_active state without requiring accessors in CollectedHeap\n@@ -34,1 +34,1 @@\n-IsGCActiveMark::IsGCActiveMark() {\n+IsSTWGCActiveMark::IsSTWGCActiveMark() {\n@@ -36,2 +36,2 @@\n-  assert(!heap->is_gc_active(), \"Not reentrant\");\n-  heap->_is_gc_active = true;\n+  assert(!heap->is_stw_gc_active(), \"Not reentrant\");\n+  heap->_is_stw_gc_active = true;\n@@ -40,1 +40,1 @@\n-IsGCActiveMark::~IsGCActiveMark() {\n+IsSTWGCActiveMark::~IsSTWGCActiveMark() {\n@@ -42,2 +42,2 @@\n-  assert(heap->is_gc_active(), \"Sanity\");\n-  heap->_is_gc_active = false;\n+  assert(heap->is_stw_gc_active(), \"Sanity\");\n+  heap->_is_stw_gc_active = false;\n@@ -46,1 +46,1 @@\n-DisableIsGCActiveMark::DisableIsGCActiveMark() {\n+DisableIsSTWGCActiveMark::DisableIsSTWGCActiveMark() {\n@@ -48,2 +48,2 @@\n-  assert(heap->is_gc_active(), \"Not reentrant\");\n-  heap->_is_gc_active = false;\n+  assert(heap->is_stw_gc_active(), \"Not reentrant\");\n+  heap->_is_stw_gc_active = false;\n@@ -52,1 +52,1 @@\n-DisableIsGCActiveMark::~DisableIsGCActiveMark() {\n+DisableIsSTWGCActiveMark::~DisableIsSTWGCActiveMark() {\n@@ -54,2 +54,2 @@\n-  assert(!heap->is_gc_active(), \"Sanity\");\n-  heap->_is_gc_active = true;\n+  assert(!heap->is_stw_gc_active(), \"Sanity\");\n+  heap->_is_stw_gc_active = true;\n","filename":"src\/hotspot\/share\/gc\/shared\/isGCActiveMark.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-\/\/ _is_gc_active state without requiring accessors in CollectedHeap\n+\/\/ _is_stw_gc_active state without requiring accessors in CollectedHeap\n@@ -33,1 +33,1 @@\n-class IsGCActiveMark : public StackObj {\n+class IsSTWGCActiveMark : public StackObj {\n@@ -35,2 +35,2 @@\n-  IsGCActiveMark();\n-  ~IsGCActiveMark();\n+  IsSTWGCActiveMark();\n+  ~IsSTWGCActiveMark();\n@@ -39,1 +39,1 @@\n-class DisableIsGCActiveMark : public StackObj {\n+class DisableIsSTWGCActiveMark : public StackObj {\n@@ -41,2 +41,2 @@\n-  DisableIsGCActiveMark();\n-  ~DisableIsGCActiveMark();\n+  DisableIsSTWGCActiveMark();\n+  ~DisableIsSTWGCActiveMark();\n","filename":"src\/hotspot\/share\/gc\/shared\/isGCActiveMark.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -150,1 +150,1 @@\n-  assert(!Universe::heap()->is_gc_active(), \"Allocation during gc not allowed\");\n+  assert(!Universe::heap()->is_stw_gc_active(), \"Allocation during GC pause not allowed\");\n","filename":"src\/hotspot\/share\/gc\/shared\/memAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  nonstatic_field(CollectedHeap,               _is_gc_active,                                 bool)                                  \\\n+  nonstatic_field(CollectedHeap,               _is_stw_gc_active,                             bool)                                  \\\n","filename":"src\/hotspot\/share\/gc\/shared\/vmStructs_gc.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-  const IsGCActiveMark          _is_gc_active_mark;\n+  const IsSTWGCActiveMark       _is_gc_active_mark;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahUtils.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -119,1 +119,1 @@\n-    IsGCActiveMark gc_active_mark;\n+    IsSTWGCActiveMark gc_active_mark;\n","filename":"src\/hotspot\/share\/gc\/x\/xDriver.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -441,1 +441,1 @@\n-    IsGCActiveMark gc_active_mark;\n+    IsSTWGCActiveMark gc_active_mark;\n","filename":"src\/hotspot\/share\/gc\/z\/zGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -487,1 +487,1 @@\n-    DisableIsGCActiveMark mark;\n+    DisableIsSTWGCActiveMark mark;\n","filename":"src\/hotspot\/share\/gc\/z\/zVerify.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -881,1 +881,1 @@\n-  assert(!Universe::heap()->is_gc_active(), \"can't extend the root set during GC\");\n+  assert(!Universe::heap()->is_stw_gc_active(), \"can't extend the root set during GC pause\");\n","filename":"src\/hotspot\/share\/jvmci\/jvmciRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1345,2 +1345,2 @@\n-bool Universe::is_gc_active() {\n-  return heap()->is_gc_active();\n+bool Universe::is_stw_gc_active() {\n+  return heap()->is_stw_gc_active();\n","filename":"src\/hotspot\/share\/memory\/universe.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -298,1 +298,1 @@\n-  DEBUG_ONLY(static bool is_gc_active();)\n+  DEBUG_ONLY(static bool is_stw_gc_active();)\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -315,1 +315,1 @@\n-  if (Universe::heap()->is_gc_active()) {\n+  if (Universe::heap()->is_stw_gc_active()) {\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-  return Universe::heap()->is_gc_active() && is_objArray() && is_forwarded() && (UseParallelGC || UseG1GC);\n+  return Universe::heap()->is_stw_gc_active() && is_objArray() && is_forwarded() && (UseParallelGC || UseG1GC);\n","filename":"src\/hotspot\/share\/oops\/oop.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -605,1 +605,1 @@\n-  if (Universe::heap()->is_gc_active()) {\n+  if (Universe::heap()->is_stw_gc_active()) {\n","filename":"src\/hotspot\/share\/prims\/forte.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-  assert(!Universe::heap()->is_gc_active(), \"can't extend the root set during GC\");\n+  assert(!Universe::heap()->is_stw_gc_active(), \"can't extend the root set during GC pause\");\n@@ -108,1 +108,1 @@\n-  assert(!Universe::heap()->is_gc_active(), \"can't extend the root set during GC\");\n+  assert(!Universe::heap()->is_stw_gc_active(), \"can't extend the root set during GC pause\");\n","filename":"src\/hotspot\/share\/runtime\/jniHandles.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}