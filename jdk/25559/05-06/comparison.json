{"files":[{"patch":"@@ -208,1 +208,0 @@\n-        boolean endOfFile = false;\n@@ -215,1 +214,1 @@\n-                endOfFile = true;\n+                bytesRead = -1;\n@@ -220,6 +219,1 @@\n-            long end = FileReadEvent.timestamp();\n-            long duration = end - start;\n-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n-                FileReadEvent.commit(start, duration, path, bytesRead, endOfFile);\n-            }\n-\n+            FileReadEvent.offer(start, path, bytesRead);\n@@ -246,9 +240,1 @@\n-            long end = FileReadEvent.timestamp();\n-            long duration = end - start;\n-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n-                if (bytesRead < 0) {\n-                    FileReadEvent.commit(start, duration, path, 0L, true);\n-                } else {\n-                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n-                }\n-            }\n+            FileReadEvent.offer(start, path, bytesRead);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileInputStream.java","additions":3,"deletions":17,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -275,5 +275,1 @@\n-            long end = FileWriteEvent.timestamp();\n-            long duration = end - start;\n-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n-                FileWriteEvent.commit(start, duration, path, bytesWritten);\n-            }\n+            FileWriteEvent.offer(start, path, bytesWritten);\n@@ -320,5 +316,1 @@\n-            long end = FileWriteEvent.timestamp();\n-            long duration = end - start;\n-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n-                FileWriteEvent.commit(start, duration, path, bytesWritten);\n-            }\n+            FileWriteEvent.offer(start, path, bytesWritten);\n","filename":"src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -370,1 +370,0 @@\n-        boolean endOfFile = false;\n@@ -376,1 +375,1 @@\n-                endOfFile = true;\n+                bytesRead = -1;\n@@ -381,5 +380,1 @@\n-            long end = FileReadEvent.timestamp();\n-            long duration = end - start;\n-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n-                FileReadEvent.commit(start, duration, path, bytesRead, endOfFile);\n-            }\n+            FileReadEvent.offer(start, path, bytesRead);\n@@ -413,9 +408,1 @@\n-            long end = FileReadEvent.timestamp();\n-            long duration = end - start;\n-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n-                if (bytesRead < 0) {\n-                    FileReadEvent.commit(start, duration, path, 0L, true);\n-                } else {\n-                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n-                }\n-            }\n+            FileReadEvent.offer(start, path, bytesRead);\n@@ -593,5 +580,1 @@\n-            long end = FileWriteEvent.timestamp();\n-            long duration =  end - start;\n-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n-                FileWriteEvent.commit(start, duration, path, bytesWritten);\n-            }\n+            FileWriteEvent.offer(start, path, bytesWritten);\n@@ -636,5 +619,1 @@\n-            long end = FileWriteEvent.timestamp();\n-            long duration = end - start;\n-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n-                FileWriteEvent.commit(start, duration, path, bytesWritten);\n-            }\n+            FileWriteEvent.offer(start, path, bytesWritten);\n","filename":"src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java","additions":5,"deletions":26,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -968,5 +968,1 @@\n-            long end = SocketReadEvent.timestamp();\n-            long duration = end - start;\n-            if (SocketReadEvent.shouldThrottleCommit(duration, end)) {\n-                SocketReadEvent.emit(start, duration, nbytes, parent.getRemoteSocketAddress(), getSoTimeout());\n-            }\n+            SocketReadEvent.offer(start, nbytes, parent.getRemoteSocketAddress(), getSoTimeout());\n@@ -1085,5 +1081,1 @@\n-            long end = SocketWriteEvent.timestamp();\n-            long duration = end - start;\n-            if (SocketWriteEvent.shouldThrottleCommit(duration, end)) {\n-                SocketWriteEvent.emit(start, duration, len, parent.getRemoteSocketAddress());\n-            }\n+            SocketWriteEvent.offer(start, len, parent.getRemoteSocketAddress());\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n+    public static boolean shouldThrottleCommit(long duration, long end) {\n@@ -53,0 +53,22 @@\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time. If the duration meets\n+     * or exceeds the configured value and is not throttled (determined by calling the\n+     * generated method {@link #shouldThrottleCommit(long, long)}), an event will be\n+     * emitted by calling {@link #commit(long, long, String, long, boolean)}\n+     *\n+     * @param start  the start time\n+     * @param path  the path\n+     * @param bytesRead  the number of bytes that were read, or -1 if the end of the file was reached\n+     *\/\n+    public static void offer(long start, String path, long bytesRead) {\n+        long end = timestamp();\n+        long duration = end - start;\n+        if (shouldThrottleCommit(duration, end)) {\n+            boolean endOfFile = bytesRead < 0;\n+            long bytes = endOfFile ? 0 : bytesRead;\n+            commit(start, duration, path, bytes, endOfFile);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/FileReadEvent.java","additions":23,"deletions":1,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n+    public static boolean shouldThrottleCommit(long duration, long end) {\n@@ -52,0 +52,21 @@\n+    \/**\n+     * Helper method to offer the data needed to potentially commit an event.\n+     * The duration of the operation is computed using the current\n+     * timestamp and the given start time. If the duration meets\n+     * or exceeds the configured value and is not throttled (determined by calling the\n+     * generated method {@link #shouldThrottleCommit(long, long)}), an event will be\n+     * emitted by calling {@link #commit(long, long, String, long)}\n+     *\n+     * @param start  the start time\n+     * @param path  the path\n+     * @param bytesRead  the number of bytes that were written, or -1 if the end of the file was reached\n+     *\/\n+    public static void offer(long start, String path, long bytesWritten) {\n+        long end = timestamp();\n+        long duration = end - start;\n+        if (shouldThrottleCommit(duration, end)) {\n+            long bytes = bytesWritten > 0 ? bytesWritten : 0;\n+            commit(start, duration, path, bytes);\n+        }\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/FileWriteEvent.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -77,0 +77,1 @@\n+     * @param end  timestamp at the end of the operation\n@@ -79,1 +80,1 @@\n-    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n+    public static boolean shouldThrottleCommit(long duration, long end) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketReadEvent.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -71,1 +71,2 @@\n-     * @param duration  time in nanoseconds to complete the operation\n+     * @param duration  time to complete the operation\n+     * @param end  timestamp at the end of the operation\n@@ -74,1 +75,1 @@\n-    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n+    public static boolean shouldThrottleCommit(long duration, long end) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketWriteEvent.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -272,9 +272,1 @@\n-            long end = FileReadEvent.timestamp();\n-            long duration = end - start;\n-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n-                if (bytesRead < 0) {\n-                    FileReadEvent.commit(start, duration, path, 0L, true);\n-                } else {\n-                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n-                }\n-            }\n+            FileReadEvent.offer(start, path, bytesRead);\n@@ -336,8 +328,1 @@\n-            long duration = end - start;\n-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n-                if (bytesRead < 0) {\n-                    FileReadEvent.commit(start, duration, path, 0L, true);\n-                } else {\n-                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n-                }\n-            }\n+            FileReadEvent.offer(start, path, bytesRead);\n@@ -389,1 +374,1 @@\n-        int bytesWritten = 0;\n+        int bytes = 0;\n@@ -393,1 +378,1 @@\n-            bytesWritten = implWrite(src);\n+            bytes = implWrite(src);\n@@ -395,6 +380,1 @@\n-            long end = FileWriteEvent.timestamp();\n-            long duration = end - start;\n-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n-                long bytes = bytesWritten > 0 ? bytesWritten : 0;\n-                FileWriteEvent.commit(start, duration, path, bytes);\n-            }\n+            FileWriteEvent.offer(start, path, bytes);\n@@ -402,1 +382,1 @@\n-        return bytesWritten;\n+        return bytes;\n@@ -452,6 +432,1 @@\n-            long end = FileWriteEvent.timestamp();\n-            long duration = end - start;\n-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n-                long bytes = bytesWritten > 0 ? bytesWritten : 0;\n-                FileWriteEvent.commit(start, duration, path, bytes);\n-            }\n+            FileWriteEvent.offer(start, path, bytesWritten);\n@@ -1211,9 +1186,1 @@\n-            long end = FileReadEvent.timestamp();\n-            long duration = end - start;\n-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n-                if (bytesRead < 0) {\n-                    FileReadEvent.commit(start, duration, path, 0L, true);\n-                } else {\n-                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n-                }\n-            }\n+            FileReadEvent.offer(start, path, bytesRead);\n@@ -1284,6 +1251,2 @@\n-            long end = FileWriteEvent.timestamp();\n-            long duration = end - start;\n-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n-                long bytes = bytesWritten > 0 ? bytesWritten : 0;\n-                FileWriteEvent.commit(start, duration, path, bytes);\n-            }\n+            long bytes = bytesWritten > 0 ? bytesWritten : 0;\n+            FileWriteEvent.offer(start, path, bytes);\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":10,"deletions":47,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -0,0 +1,410 @@\n+diff --git a\/src\/java.base\/share\/classes\/java\/io\/FileInputStream.java b\/src\/java.base\/share\/classes\/java\/io\/FileInputStream.java\n+index aec65343384..f112691ebc7 100644\n+--- a\/src\/java.base\/share\/classes\/java\/io\/FileInputStream.java\n++++ b\/src\/java.base\/share\/classes\/java\/io\/FileInputStream.java\n+@@ -205,24 +205,18 @@ public int read() throws IOException {\n+ \n+     private int traceRead0() throws IOException {\n+         int result = 0;\n+-        boolean endOfFile = false;\n+         long bytesRead = 0;\n+         long start = 0;\n+         try {\n+             start = FileReadEvent.timestamp();\n+             result = read0();\n+             if (result < 0) {\n+-                endOfFile = true;\n++                bytesRead = -1;\n+             } else {\n+                 bytesRead = 1;\n+             }\n+         } finally {\n+-            long end = FileReadEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n+-                FileReadEvent.commit(start, duration, path, bytesRead, endOfFile);\n+-            }\n+-\n++            FileReadEvent.offer(start, path, bytesRead);\n+         }\n+         return result;\n+     }\n+@@ -243,15 +237,7 @@ private int traceReadBytes(byte b[], int off, int len) throws IOException {\n+             start = FileReadEvent.timestamp();\n+             bytesRead = readBytes(b, off, len);\n+         } finally {\n+-            long end = FileReadEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n+-                if (bytesRead < 0) {\n+-                    FileReadEvent.commit(start, duration, path, 0L, true);\n+-                } else {\n+-                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n+-                }\n+-            }\n++            FileReadEvent.offer(start, path, bytesRead);\n+         }\n+         return bytesRead;\n+     }\n+diff --git a\/src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java b\/src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java\n+index ebedce2b73e..f44eaee13b1 100644\n+--- a\/src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java\n++++ b\/src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java\n+@@ -272,11 +272,7 @@ private void traceWrite(int b, boolean append) throws IOException {\n+             write(b, append);\n+             bytesWritten = 1;\n+         } finally {\n+-            long end = FileWriteEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n+-                FileWriteEvent.commit(start, duration, path, bytesWritten);\n+-            }\n++            FileWriteEvent.offer(start, path, bytesWritten);\n+         }\n+     }\n+ \n+@@ -317,11 +313,7 @@ private void traceWriteBytes(byte b[], int off, int len, boolean append) throws\n+             writeBytes(b, off, len, append);\n+             bytesWritten = len;\n+         } finally {\n+-            long end = FileWriteEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n+-                FileWriteEvent.commit(start, duration, path, bytesWritten);\n+-            }\n++            FileWriteEvent.offer(start, path, bytesWritten);\n+         }\n+     }\n+ \n+diff --git a\/src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java b\/src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java\n+index 9200022582b..f3a20634d61 100644\n+--- a\/src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java\n++++ b\/src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java\n+@@ -367,22 +367,17 @@ public int read() throws IOException {\n+     private int traceRead0() throws IOException {\n+         int result = 0;\n+         long bytesRead = 0;\n+-        boolean endOfFile = false;\n+         long start = 0;\n+         try {\n+             start = FileReadEvent.timestamp();\n+             result = read0();\n+             if (result < 0) {\n+-                endOfFile = true;\n++                bytesRead = -1;\n+             } else {\n+                 bytesRead = 1;\n+             }\n+         } finally {\n+-            long end = FileReadEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n+-                FileReadEvent.commit(start, duration, path, bytesRead, endOfFile);\n+-            }\n++            FileReadEvent.offer(start, path, bytesRead);\n+         }\n+         return result;\n+     }\n+@@ -410,15 +405,7 @@ private int traceReadBytes0(byte b[], int off, int len) throws IOException {\n+             start = FileReadEvent.timestamp();\n+             bytesRead = readBytes0(b, off, len);\n+         } finally {\n+-            long end = FileReadEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n+-                if (bytesRead < 0) {\n+-                    FileReadEvent.commit(start, duration, path, 0L, true);\n+-                } else {\n+-                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n+-                }\n+-            }\n++            FileReadEvent.offer(start, path, bytesRead);\n+         }\n+         return bytesRead;\n+     }\n+@@ -590,11 +577,7 @@ private void traceImplWrite(int b) throws IOException {\n+             implWrite(b);\n+             bytesWritten = 1;\n+         } finally {\n+-            long end = FileWriteEvent.timestamp();\n+-            long duration =  end - start;\n+-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n+-                FileWriteEvent.commit(start, duration, path, bytesWritten);\n+-            }\n++            FileWriteEvent.offer(start, path, bytesWritten);\n+         }\n+     }\n+ \n+@@ -633,11 +616,7 @@ private void traceImplWriteBytes(byte b[], int off, int len) throws IOException\n+             implWriteBytes(b, off, len);\n+             bytesWritten = len;\n+         } finally {\n+-            long end = FileWriteEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n+-                FileWriteEvent.commit(start, duration, path, bytesWritten);\n+-            }\n++            FileWriteEvent.offer(start, path, bytesWritten);\n+         }\n+     }\n+ \n+diff --git a\/src\/java.base\/share\/classes\/java\/net\/Socket.java b\/src\/java.base\/share\/classes\/java\/net\/Socket.java\n+index 7bd81f361fd..2905a51b402 100644\n+--- a\/src\/java.base\/share\/classes\/java\/net\/Socket.java\n++++ b\/src\/java.base\/share\/classes\/java\/net\/Socket.java\n+@@ -965,11 +965,7 @@ public int read(byte[] b, int off, int len) throws IOException {\n+             }\n+             long start = SocketReadEvent.timestamp();\n+             int nbytes = implRead(b, off, len);\n+-            long end = SocketReadEvent.timestamp();\n+-            long duration = end - start;\n+-            if (SocketReadEvent.shouldThrottleCommit(duration, end)) {\n+-                SocketReadEvent.emit(start, duration, nbytes, parent.getRemoteSocketAddress(), getSoTimeout());\n+-            }\n++            SocketReadEvent.offer(start, nbytes, parent.getRemoteSocketAddress(), getSoTimeout());\n+             return nbytes;\n+         }\n+ \n+@@ -1082,11 +1078,7 @@ public void write(byte[] b, int off, int len) throws IOException {\n+             }\n+             long start = SocketWriteEvent.timestamp();\n+             implWrite(b, off, len);\n+-            long end = SocketWriteEvent.timestamp();\n+-            long duration = end - start;\n+-            if (SocketWriteEvent.shouldThrottleCommit(duration, end)) {\n+-                SocketWriteEvent.emit(start, duration, len, parent.getRemoteSocketAddress());\n+-            }\n++            SocketWriteEvent.offer(start, len, parent.getRemoteSocketAddress());\n+         }\n+ \n+         private void implWrite(byte[] b, int off, int len) throws IOException {\n+diff --git a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileForceEvent.java b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileForceEvent.java\n+index f6dec6c8a5e..fe7c351ca53 100644\n+--- a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileForceEvent.java\n++++ b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileForceEvent.java\n+@@ -43,7 +43,7 @@ public class FileForceEvent extends Event {\n+     \/**\n+      * Helper method to offer the data needed to potentially commit an event.\n+      * The duration of the operation is computed using the current\n+-     * timestamp and the given start time.  If the duration is meets\n++     * timestamp and the given start time. If the duration is meets\n+      * or exceeds the configured value (determined by calling the generated method\n+      * {@link #shouldCommit(long)}), an event will be emitted by calling\n+      * {@link #commit(long, long, String, boolean)}.\n+diff --git a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileReadEvent.java b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileReadEvent.java\n+index 741897d8374..eb711687cc4 100644\n+--- a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileReadEvent.java\n++++ b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileReadEvent.java\n+@@ -45,11 +45,33 @@ public static long timestamp() {\n+         return 0L;\n+     }\n+ \n+-    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n++    static boolean shouldThrottleCommit(long duration, long end) {\n+         \/\/ Generated by JFR\n+         return false;\n+     }\n+ \n++    \/**\n++     * Helper method to offer the data needed to potentially commit an event.\n++     * The duration of the operation is computed using the current\n++     * timestamp and the given start time. If the duration meets\n++     * or exceeds the configured value and is not throttled (determined by calling the\n++     * generated method {@link #shouldThrottleCommit(long, long)}), an event will be\n++     * emitted by calling {@link #commit(long, long, String, long, boolean)}\n++     *\n++     * @param start  the start time\n++     * @param path  the path\n++     * @param bytesRead  the number of bytes that were read, or -1 if the end of the file was reached\n++     *\/\n++    public static void offer(long start, String path, long bytesRead) {\n++        long end = timestamp();\n++        long duration = end - start;\n++        if (shouldThrottleCommit(duration, end)) {\n++            boolean endOfFile = bytesRead < 0;\n++            long bytes = endOfFile ? 0 : bytesRead;\n++            commit(start, duration, path, bytes, endOfFile);\n++        }\n++    }\n++\n+     public static void commit(long start, long duration, String path, long bytesRead, boolean endOfFile) {\n+         \/\/ Generated by JFR\n+     }\n+diff --git a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileWriteEvent.java b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileWriteEvent.java\n+index 80e689c2b9c..8b3d6ab0e5d 100644\n+--- a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileWriteEvent.java\n++++ b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileWriteEvent.java\n+@@ -44,11 +44,32 @@ public static long timestamp() {\n+         return 0L;\n+     }\n+ \n+-    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n++    static boolean shouldThrottleCommit(long duration, long end) {\n+         \/\/ Generated by JFR\n+         return false;\n+     }\n+ \n++    \/**\n++     * Helper method to offer the data needed to potentially commit an event.\n++     * The duration of the operation is computed using the current\n++     * timestamp and the given start time. If the duration meets\n++     * or exceeds the configured value and is not throttled (determined by calling the\n++     * generated method {@link #shouldThrottleCommit(long, long)}), an event will be\n++     * emitted by calling {@link #commit(long, long, String, long)}\n++     *\n++     * @param start  the start time\n++     * @param path  the path\n++     * @param bytesRead  the number of bytes that were written, or -1 if the end of the file was reached\n++     *\/\n++    public static void offer(long start, String path, long bytesWritten) {\n++        long end = timestamp();\n++        long duration = end - start;\n++        if (shouldThrottleCommit(duration, end)) {\n++            long bytes = bytesWritten > 0 ? bytesWritten : 0;\n++            commit(start, duration, path, bytes);\n++        }\n++    }\n++\n+     public static void commit(long start, long duration, String path, long bytesWritten) {\n+         \/\/ Generated by JFR\n+     }\n+diff --git a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketReadEvent.java b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketReadEvent.java\n+index da6d9eec607..48a15214a30 100644\n+--- a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketReadEvent.java\n++++ b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketReadEvent.java\n+@@ -74,9 +74,10 @@ public static void commit(long start, long duration, String host, String address\n+      * of this method is generated automatically if jfr is enabled.\n+      *\n+      * @param duration  time in nanoseconds to complete the operation\n++     * @param end  timestamp at the end of the operation\n+      * @return  true if the event should be commited\n+      *\/\n+-    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n++    static boolean shouldThrottleCommit(long duration, long end) {\n+         \/\/ Generated by JFR\n+         return false;\n+     }\n+diff --git a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketWriteEvent.java b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketWriteEvent.java\n+index d0e0ad2cd04..7b398647198 100644\n+--- a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketWriteEvent.java\n++++ b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketWriteEvent.java\n+@@ -69,9 +69,10 @@ public static void commit(long start, long duration, String host, String address\n+      * of this method is generated automatically if jfr is enabled.\n+      *\n+      * @param duration  time in nanoseconds to complete the operation\n++     * @param end  timestamp at the end of the operation\n+      * @return  true if the event should be commited\n+      *\/\n+-    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n++    static boolean shouldThrottleCommit(long duration, long end) {\n+         \/\/ Generated by JFR\n+         return false;\n+     }\n+diff --git a\/src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java b\/src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java\n+index 56a3a8f1775..ceeea75b0fd 100644\n+--- a\/src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java\n++++ b\/src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java\n+@@ -269,15 +269,7 @@ private int traceImplRead(ByteBuffer dst) throws IOException {\n+             start = FileReadEvent.timestamp();\n+             bytesRead = implRead(dst);\n+         } finally {\n+-            long end = FileReadEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n+-                if (bytesRead < 0) {\n+-                    FileReadEvent.commit(start, duration, path, 0L, true);\n+-                } else {\n+-                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n+-                }\n+-            }\n++            FileReadEvent.offer(start, path, bytesRead);\n+         }\n+         return bytesRead;\n+     }\n+@@ -333,14 +325,7 @@ private long traceImplRead(ByteBuffer[] dsts, int offset, int length) throws IOE\n+             bytesRead = implRead(dsts, offset, length);\n+         } finally {\n+             long end = FileReadEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n+-                if (bytesRead < 0) {\n+-                    FileReadEvent.commit(start, duration, path, 0L, true);\n+-                } else {\n+-                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n+-                }\n+-            }\n++            FileReadEvent.offer(start, path, bytesRead);\n+         }\n+         return bytesRead;\n+     }\n+@@ -386,20 +371,15 @@ private int implWrite(ByteBuffer src) throws IOException {\n+     }\n+ \n+     private int traceImplWrite(ByteBuffer src) throws IOException {\n+-        int bytesWritten = 0;\n++        int bytes = 0;\n+         long start = 0;\n+         try {\n+             start = FileWriteEvent.timestamp();\n+-            bytesWritten = implWrite(src);\n++            bytes = implWrite(src);\n+         } finally {\n+-            long end = FileWriteEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n+-                long bytes = bytesWritten > 0 ? bytesWritten : 0;\n+-                FileWriteEvent.commit(start, duration, path, bytes);\n+-            }\n++            FileWriteEvent.offer(start, path, bytes);\n+         }\n+-        return bytesWritten;\n++        return bytes;\n+     }\n+ \n+     @Override\n+@@ -449,12 +429,7 @@ private long traceImplWrite(ByteBuffer[] srcs, int offset, int length) throws IO\n+             start = FileWriteEvent.timestamp();\n+             bytesWritten = implWrite(srcs, offset, length);\n+         } finally {\n+-            long end = FileWriteEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n+-                long bytes = bytesWritten > 0 ? bytesWritten : 0;\n+-                FileWriteEvent.commit(start, duration, path, bytes);\n+-            }\n++            FileWriteEvent.offer(start, path, bytesWritten);\n+         }\n+         return bytesWritten;\n+     }\n+@@ -1208,15 +1183,7 @@ private int traceImplRead(ByteBuffer dst, long position) throws IOException {\n+             start = FileReadEvent.timestamp();\n+             bytesRead = implRead(dst, position);\n+         } finally {\n+-            long end = FileReadEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n+-                if (bytesRead < 0) {\n+-                    FileReadEvent.commit(start, duration, path, 0L, true);\n+-                } else {\n+-                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n+-                }\n+-            }\n++            FileReadEvent.offer(start, path, bytesRead);\n+         }\n+         return bytesRead;\n+     }\n+@@ -1281,12 +1248,8 @@ private int traceImplWrite(ByteBuffer src, long position) throws IOException {\n+             start = FileWriteEvent.timestamp();\n+             bytesWritten = implWrite(src, position);\n+         } finally {\n+-            long end = FileWriteEvent.timestamp();\n+-            long duration = end - start;\n+-            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n+-                long bytes = bytesWritten > 0 ? bytesWritten : 0;\n+-                FileWriteEvent.commit(start, duration, path, bytes);\n+-            }\n++            long bytes = bytesWritten > 0 ? bytesWritten : 0;\n++            FileWriteEvent.offer(start, path, bytes);\n+         }\n+         return bytesWritten;\n+     }\n","filename":"t.txt","additions":410,"deletions":0,"binary":false,"changes":410,"status":"added"}]}