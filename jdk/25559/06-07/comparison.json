{"files":[{"patch":"@@ -64,2 +64,2 @@\n-    public static final long MASK_THROTTLE              = 1 << 62;\n-    public static final long MASK_THROTTLE_CHECK        = 1 << 63;\n+    public static final long MASK_THROTTLE               = 1 << 62;\n+    public static final long MASK_THROTTLE_CHECK         = 1 << 63;\n@@ -593,1 +593,1 @@\n-            getfield(codeBuilder, eventClassDesc,  ImplicitFields.FIELD_DURATION);\n+            getfield(codeBuilder, eventClassDesc, ImplicitFields.FIELD_DURATION);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1,410 +0,0 @@\n-diff --git a\/src\/java.base\/share\/classes\/java\/io\/FileInputStream.java b\/src\/java.base\/share\/classes\/java\/io\/FileInputStream.java\n-index aec65343384..f112691ebc7 100644\n---- a\/src\/java.base\/share\/classes\/java\/io\/FileInputStream.java\n-+++ b\/src\/java.base\/share\/classes\/java\/io\/FileInputStream.java\n-@@ -205,24 +205,18 @@ public int read() throws IOException {\n- \n-     private int traceRead0() throws IOException {\n-         int result = 0;\n--        boolean endOfFile = false;\n-         long bytesRead = 0;\n-         long start = 0;\n-         try {\n-             start = FileReadEvent.timestamp();\n-             result = read0();\n-             if (result < 0) {\n--                endOfFile = true;\n-+                bytesRead = -1;\n-             } else {\n-                 bytesRead = 1;\n-             }\n-         } finally {\n--            long end = FileReadEvent.timestamp();\n--            long duration = end - start;\n--            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n--                FileReadEvent.commit(start, duration, path, bytesRead, endOfFile);\n--            }\n--\n-+            FileReadEvent.offer(start, path, bytesRead);\n-         }\n-         return result;\n-     }\n-@@ -243,15 +237,7 @@ private int traceReadBytes(byte b[], int off, int len) throws IOException {\n-             start = FileReadEvent.timestamp();\n-             bytesRead = readBytes(b, off, len);\n-         } finally {\n--            long end = FileReadEvent.timestamp();\n--            long duration = end - start;\n--            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n--                if (bytesRead < 0) {\n--                    FileReadEvent.commit(start, duration, path, 0L, true);\n--                } else {\n--                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n--                }\n--            }\n-+            FileReadEvent.offer(start, path, bytesRead);\n-         }\n-         return bytesRead;\n-     }\n-diff --git a\/src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java b\/src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java\n-index ebedce2b73e..f44eaee13b1 100644\n---- a\/src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java\n-+++ b\/src\/java.base\/share\/classes\/java\/io\/FileOutputStream.java\n-@@ -272,11 +272,7 @@ private void traceWrite(int b, boolean append) throws IOException {\n-             write(b, append);\n-             bytesWritten = 1;\n-         } finally {\n--            long end = FileWriteEvent.timestamp();\n--            long duration = end - start;\n--            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n--                FileWriteEvent.commit(start, duration, path, bytesWritten);\n--            }\n-+            FileWriteEvent.offer(start, path, bytesWritten);\n-         }\n-     }\n- \n-@@ -317,11 +313,7 @@ private void traceWriteBytes(byte b[], int off, int len, boolean append) throws\n-             writeBytes(b, off, len, append);\n-             bytesWritten = len;\n-         } finally {\n--            long end = FileWriteEvent.timestamp();\n--            long duration = end - start;\n--            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n--                FileWriteEvent.commit(start, duration, path, bytesWritten);\n--            }\n-+            FileWriteEvent.offer(start, path, bytesWritten);\n-         }\n-     }\n- \n-diff --git a\/src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java b\/src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java\n-index 9200022582b..f3a20634d61 100644\n---- a\/src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java\n-+++ b\/src\/java.base\/share\/classes\/java\/io\/RandomAccessFile.java\n-@@ -367,22 +367,17 @@ public int read() throws IOException {\n-     private int traceRead0() throws IOException {\n-         int result = 0;\n-         long bytesRead = 0;\n--        boolean endOfFile = false;\n-         long start = 0;\n-         try {\n-             start = FileReadEvent.timestamp();\n-             result = read0();\n-             if (result < 0) {\n--                endOfFile = true;\n-+                bytesRead = -1;\n-             } else {\n-                 bytesRead = 1;\n-             }\n-         } finally {\n--            long end = FileReadEvent.timestamp();\n--            long duration = end - start;\n--            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n--                FileReadEvent.commit(start, duration, path, bytesRead, endOfFile);\n--            }\n-+            FileReadEvent.offer(start, path, bytesRead);\n-         }\n-         return result;\n-     }\n-@@ -410,15 +405,7 @@ private int traceReadBytes0(byte b[], int off, int len) throws IOException {\n-             start = FileReadEvent.timestamp();\n-             bytesRead = readBytes0(b, off, len);\n-         } finally {\n--            long end = FileReadEvent.timestamp();\n--            long duration = end - start;\n--            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n--                if (bytesRead < 0) {\n--                    FileReadEvent.commit(start, duration, path, 0L, true);\n--                } else {\n--                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n--                }\n--            }\n-+            FileReadEvent.offer(start, path, bytesRead);\n-         }\n-         return bytesRead;\n-     }\n-@@ -590,11 +577,7 @@ private void traceImplWrite(int b) throws IOException {\n-             implWrite(b);\n-             bytesWritten = 1;\n-         } finally {\n--            long end = FileWriteEvent.timestamp();\n--            long duration =  end - start;\n--            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n--                FileWriteEvent.commit(start, duration, path, bytesWritten);\n--            }\n-+            FileWriteEvent.offer(start, path, bytesWritten);\n-         }\n-     }\n- \n-@@ -633,11 +616,7 @@ private void traceImplWriteBytes(byte b[], int off, int len) throws IOException\n-             implWriteBytes(b, off, len);\n-             bytesWritten = len;\n-         } finally {\n--            long end = FileWriteEvent.timestamp();\n--            long duration = end - start;\n--            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n--                FileWriteEvent.commit(start, duration, path, bytesWritten);\n--            }\n-+            FileWriteEvent.offer(start, path, bytesWritten);\n-         }\n-     }\n- \n-diff --git a\/src\/java.base\/share\/classes\/java\/net\/Socket.java b\/src\/java.base\/share\/classes\/java\/net\/Socket.java\n-index 7bd81f361fd..2905a51b402 100644\n---- a\/src\/java.base\/share\/classes\/java\/net\/Socket.java\n-+++ b\/src\/java.base\/share\/classes\/java\/net\/Socket.java\n-@@ -965,11 +965,7 @@ public int read(byte[] b, int off, int len) throws IOException {\n-             }\n-             long start = SocketReadEvent.timestamp();\n-             int nbytes = implRead(b, off, len);\n--            long end = SocketReadEvent.timestamp();\n--            long duration = end - start;\n--            if (SocketReadEvent.shouldThrottleCommit(duration, end)) {\n--                SocketReadEvent.emit(start, duration, nbytes, parent.getRemoteSocketAddress(), getSoTimeout());\n--            }\n-+            SocketReadEvent.offer(start, nbytes, parent.getRemoteSocketAddress(), getSoTimeout());\n-             return nbytes;\n-         }\n- \n-@@ -1082,11 +1078,7 @@ public void write(byte[] b, int off, int len) throws IOException {\n-             }\n-             long start = SocketWriteEvent.timestamp();\n-             implWrite(b, off, len);\n--            long end = SocketWriteEvent.timestamp();\n--            long duration = end - start;\n--            if (SocketWriteEvent.shouldThrottleCommit(duration, end)) {\n--                SocketWriteEvent.emit(start, duration, len, parent.getRemoteSocketAddress());\n--            }\n-+            SocketWriteEvent.offer(start, len, parent.getRemoteSocketAddress());\n-         }\n- \n-         private void implWrite(byte[] b, int off, int len) throws IOException {\n-diff --git a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileForceEvent.java b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileForceEvent.java\n-index f6dec6c8a5e..fe7c351ca53 100644\n---- a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileForceEvent.java\n-+++ b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileForceEvent.java\n-@@ -43,7 +43,7 @@ public class FileForceEvent extends Event {\n-     \/**\n-      * Helper method to offer the data needed to potentially commit an event.\n-      * The duration of the operation is computed using the current\n--     * timestamp and the given start time.  If the duration is meets\n-+     * timestamp and the given start time. If the duration is meets\n-      * or exceeds the configured value (determined by calling the generated method\n-      * {@link #shouldCommit(long)}), an event will be emitted by calling\n-      * {@link #commit(long, long, String, boolean)}.\n-diff --git a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileReadEvent.java b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileReadEvent.java\n-index 741897d8374..eb711687cc4 100644\n---- a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileReadEvent.java\n-+++ b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileReadEvent.java\n-@@ -45,11 +45,33 @@ public static long timestamp() {\n-         return 0L;\n-     }\n- \n--    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n-+    static boolean shouldThrottleCommit(long duration, long end) {\n-         \/\/ Generated by JFR\n-         return false;\n-     }\n- \n-+    \/**\n-+     * Helper method to offer the data needed to potentially commit an event.\n-+     * The duration of the operation is computed using the current\n-+     * timestamp and the given start time. If the duration meets\n-+     * or exceeds the configured value and is not throttled (determined by calling the\n-+     * generated method {@link #shouldThrottleCommit(long, long)}), an event will be\n-+     * emitted by calling {@link #commit(long, long, String, long, boolean)}\n-+     *\n-+     * @param start  the start time\n-+     * @param path  the path\n-+     * @param bytesRead  the number of bytes that were read, or -1 if the end of the file was reached\n-+     *\/\n-+    public static void offer(long start, String path, long bytesRead) {\n-+        long end = timestamp();\n-+        long duration = end - start;\n-+        if (shouldThrottleCommit(duration, end)) {\n-+            boolean endOfFile = bytesRead < 0;\n-+            long bytes = endOfFile ? 0 : bytesRead;\n-+            commit(start, duration, path, bytes, endOfFile);\n-+        }\n-+    }\n-+\n-     public static void commit(long start, long duration, String path, long bytesRead, boolean endOfFile) {\n-         \/\/ Generated by JFR\n-     }\n-diff --git a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileWriteEvent.java b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileWriteEvent.java\n-index 80e689c2b9c..8b3d6ab0e5d 100644\n---- a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileWriteEvent.java\n-+++ b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/FileWriteEvent.java\n-@@ -44,11 +44,32 @@ public static long timestamp() {\n-         return 0L;\n-     }\n- \n--    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n-+    static boolean shouldThrottleCommit(long duration, long end) {\n-         \/\/ Generated by JFR\n-         return false;\n-     }\n- \n-+    \/**\n-+     * Helper method to offer the data needed to potentially commit an event.\n-+     * The duration of the operation is computed using the current\n-+     * timestamp and the given start time. If the duration meets\n-+     * or exceeds the configured value and is not throttled (determined by calling the\n-+     * generated method {@link #shouldThrottleCommit(long, long)}), an event will be\n-+     * emitted by calling {@link #commit(long, long, String, long)}\n-+     *\n-+     * @param start  the start time\n-+     * @param path  the path\n-+     * @param bytesRead  the number of bytes that were written, or -1 if the end of the file was reached\n-+     *\/\n-+    public static void offer(long start, String path, long bytesWritten) {\n-+        long end = timestamp();\n-+        long duration = end - start;\n-+        if (shouldThrottleCommit(duration, end)) {\n-+            long bytes = bytesWritten > 0 ? bytesWritten : 0;\n-+            commit(start, duration, path, bytes);\n-+        }\n-+    }\n-+\n-     public static void commit(long start, long duration, String path, long bytesWritten) {\n-         \/\/ Generated by JFR\n-     }\n-diff --git a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketReadEvent.java b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketReadEvent.java\n-index da6d9eec607..48a15214a30 100644\n---- a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketReadEvent.java\n-+++ b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketReadEvent.java\n-@@ -74,9 +74,10 @@ public static void commit(long start, long duration, String host, String address\n-      * of this method is generated automatically if jfr is enabled.\n-      *\n-      * @param duration  time in nanoseconds to complete the operation\n-+     * @param end  timestamp at the end of the operation\n-      * @return  true if the event should be commited\n-      *\/\n--    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n-+    static boolean shouldThrottleCommit(long duration, long end) {\n-         \/\/ Generated by JFR\n-         return false;\n-     }\n-diff --git a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketWriteEvent.java b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketWriteEvent.java\n-index d0e0ad2cd04..7b398647198 100644\n---- a\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketWriteEvent.java\n-+++ b\/src\/java.base\/share\/classes\/jdk\/internal\/event\/SocketWriteEvent.java\n-@@ -69,9 +69,10 @@ public static void commit(long start, long duration, String host, String address\n-      * of this method is generated automatically if jfr is enabled.\n-      *\n-      * @param duration  time in nanoseconds to complete the operation\n-+     * @param end  timestamp at the end of the operation\n-      * @return  true if the event should be commited\n-      *\/\n--    public static boolean shouldThrottleCommit(long duration, long timestamp) {\n-+    static boolean shouldThrottleCommit(long duration, long end) {\n-         \/\/ Generated by JFR\n-         return false;\n-     }\n-diff --git a\/src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java b\/src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java\n-index 56a3a8f1775..ceeea75b0fd 100644\n---- a\/src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java\n-+++ b\/src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java\n-@@ -269,15 +269,7 @@ private int traceImplRead(ByteBuffer dst) throws IOException {\n-             start = FileReadEvent.timestamp();\n-             bytesRead = implRead(dst);\n-         } finally {\n--            long end = FileReadEvent.timestamp();\n--            long duration = end - start;\n--            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n--                if (bytesRead < 0) {\n--                    FileReadEvent.commit(start, duration, path, 0L, true);\n--                } else {\n--                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n--                }\n--            }\n-+            FileReadEvent.offer(start, path, bytesRead);\n-         }\n-         return bytesRead;\n-     }\n-@@ -333,14 +325,7 @@ private long traceImplRead(ByteBuffer[] dsts, int offset, int length) throws IOE\n-             bytesRead = implRead(dsts, offset, length);\n-         } finally {\n-             long end = FileReadEvent.timestamp();\n--            long duration = end - start;\n--            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n--                if (bytesRead < 0) {\n--                    FileReadEvent.commit(start, duration, path, 0L, true);\n--                } else {\n--                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n--                }\n--            }\n-+            FileReadEvent.offer(start, path, bytesRead);\n-         }\n-         return bytesRead;\n-     }\n-@@ -386,20 +371,15 @@ private int implWrite(ByteBuffer src) throws IOException {\n-     }\n- \n-     private int traceImplWrite(ByteBuffer src) throws IOException {\n--        int bytesWritten = 0;\n-+        int bytes = 0;\n-         long start = 0;\n-         try {\n-             start = FileWriteEvent.timestamp();\n--            bytesWritten = implWrite(src);\n-+            bytes = implWrite(src);\n-         } finally {\n--            long end = FileWriteEvent.timestamp();\n--            long duration = end - start;\n--            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n--                long bytes = bytesWritten > 0 ? bytesWritten : 0;\n--                FileWriteEvent.commit(start, duration, path, bytes);\n--            }\n-+            FileWriteEvent.offer(start, path, bytes);\n-         }\n--        return bytesWritten;\n-+        return bytes;\n-     }\n- \n-     @Override\n-@@ -449,12 +429,7 @@ private long traceImplWrite(ByteBuffer[] srcs, int offset, int length) throws IO\n-             start = FileWriteEvent.timestamp();\n-             bytesWritten = implWrite(srcs, offset, length);\n-         } finally {\n--            long end = FileWriteEvent.timestamp();\n--            long duration = end - start;\n--            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n--                long bytes = bytesWritten > 0 ? bytesWritten : 0;\n--                FileWriteEvent.commit(start, duration, path, bytes);\n--            }\n-+            FileWriteEvent.offer(start, path, bytesWritten);\n-         }\n-         return bytesWritten;\n-     }\n-@@ -1208,15 +1183,7 @@ private int traceImplRead(ByteBuffer dst, long position) throws IOException {\n-             start = FileReadEvent.timestamp();\n-             bytesRead = implRead(dst, position);\n-         } finally {\n--            long end = FileReadEvent.timestamp();\n--            long duration = end - start;\n--            if (FileReadEvent.shouldThrottleCommit(duration, end)) {\n--                if (bytesRead < 0) {\n--                    FileReadEvent.commit(start, duration, path, 0L, true);\n--                } else {\n--                    FileReadEvent.commit(start, duration, path, bytesRead, false);\n--                }\n--            }\n-+            FileReadEvent.offer(start, path, bytesRead);\n-         }\n-         return bytesRead;\n-     }\n-@@ -1281,12 +1248,8 @@ private int traceImplWrite(ByteBuffer src, long position) throws IOException {\n-             start = FileWriteEvent.timestamp();\n-             bytesWritten = implWrite(src, position);\n-         } finally {\n--            long end = FileWriteEvent.timestamp();\n--            long duration = end - start;\n--            if (FileWriteEvent.shouldThrottleCommit(duration, end)) {\n--                long bytes = bytesWritten > 0 ? bytesWritten : 0;\n--                FileWriteEvent.commit(start, duration, path, bytes);\n--            }\n-+            long bytes = bytesWritten > 0 ? bytesWritten : 0;\n-+            FileWriteEvent.offer(start, path, bytes);\n-         }\n-         return bytesWritten;\n-     }\n","filename":"t.txt","additions":0,"deletions":410,"binary":false,"changes":410,"status":"deleted"},{"patch":"@@ -93,1 +93,1 @@\n-        testSetting(EventNames.FileWrite, \"enabled\", \"threshold\",\"stackTrace\", \"throttle\");\n+        testSetting(EventNames.FileWrite, \"enabled\", \"threshold\", \"stackTrace\", \"throttle\");\n","filename":"test\/jdk\/jdk\/jfr\/api\/recording\/settings\/TestSettingsAvailability.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}