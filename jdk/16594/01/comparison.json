{"files":[{"patch":"@@ -561,0 +561,2 @@\n+        long off = bbAddress + ((long)pos << scaleFactor);\n+        long len = (long)size << scaleFactor;\n@@ -563,15 +565,8 @@\n-                case byte[] __ ->\n-                        new HeapMemorySegmentImpl.OfByte(bbAddress + (pos << scaleFactor), base, size << scaleFactor, readOnly, bufferScope);\n-                case short[] __ ->\n-                        new HeapMemorySegmentImpl.OfShort(bbAddress + (pos << scaleFactor), base, size << scaleFactor, readOnly, bufferScope);\n-                case char[] __ ->\n-                        new HeapMemorySegmentImpl.OfChar(bbAddress + (pos << scaleFactor), base, size << scaleFactor, readOnly, bufferScope);\n-                case int[] __ ->\n-                        new HeapMemorySegmentImpl.OfInt(bbAddress + (pos << scaleFactor), base, size << scaleFactor, readOnly, bufferScope);\n-                case float[] __ ->\n-                        new HeapMemorySegmentImpl.OfFloat(bbAddress + (pos << scaleFactor), base, size << scaleFactor, readOnly, bufferScope);\n-                case long[] __ ->\n-                        new HeapMemorySegmentImpl.OfLong(bbAddress + (pos << scaleFactor), base, size << scaleFactor, readOnly, bufferScope);\n-                case double[] __ ->\n-                        new HeapMemorySegmentImpl.OfDouble(bbAddress + (pos << scaleFactor), base, size << scaleFactor, readOnly, bufferScope);\n-                default -> throw new AssertionError(\"Cannot get here\");\n+                case byte[]   _ -> new HeapMemorySegmentImpl.OfByte(off, base, len, readOnly, bufferScope);\n+                case short[]  _ -> new HeapMemorySegmentImpl.OfShort(off, base, len, readOnly, bufferScope);\n+                case char[]   _ -> new HeapMemorySegmentImpl.OfChar(off, base, len, readOnly, bufferScope);\n+                case int[]    _ -> new HeapMemorySegmentImpl.OfInt(off, base, len, readOnly, bufferScope);\n+                case float[]  _ -> new HeapMemorySegmentImpl.OfFloat(off, base, len, readOnly, bufferScope);\n+                case long[]   _ -> new HeapMemorySegmentImpl.OfLong(off, base, len, readOnly, bufferScope);\n+                case double[] _ -> new HeapMemorySegmentImpl.OfDouble(off, base, len, readOnly, bufferScope);\n+                default         -> throw new AssertionError(\"Cannot get here\");\n@@ -580,1 +575,1 @@\n-            return new NativeMemorySegmentImpl(bbAddress + (pos << scaleFactor), size << scaleFactor, readOnly, bufferScope);\n+            return new NativeMemorySegmentImpl(off, len, readOnly, bufferScope);\n@@ -582,2 +577,1 @@\n-            \/\/ we can ignore scale factor here, a mapped buffer is always a byte buffer, so scaleFactor == 0.\n-            return new MappedMemorySegmentImpl(bbAddress + pos, unmapper, size, readOnly, bufferScope);\n+            return new MappedMemorySegmentImpl(off, unmapper, len, readOnly, bufferScope);\n@@ -724,7 +718,4 @@\n-            case ByteBuffer   __ -> 0;\n-            case CharBuffer   __ -> 1;\n-            case ShortBuffer  __ -> 1;\n-            case IntBuffer    __ -> 2;\n-            case FloatBuffer  __ -> 2;\n-            case LongBuffer   __ -> 3;\n-            case DoubleBuffer __ -> 3;\n+            case ByteBuffer   _                 -> 0;\n+            case CharBuffer   _, ShortBuffer  _ -> 1;\n+            case IntBuffer    _, FloatBuffer  _ -> 2;\n+            case LongBuffer   _, DoubleBuffer _ -> 3;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":16,"deletions":25,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -299,7 +299,7 @@\n-                case byte[]   __ -> BaseAndScale.BYTE;\n-                case char[]   __ -> BaseAndScale.CHAR;\n-                case short[]  __ -> BaseAndScale.SHORT;\n-                case int[]    __ -> BaseAndScale.INT;\n-                case float[]  __ -> BaseAndScale.FLOAT;\n-                case long[]   __ -> BaseAndScale.LONG;\n-                case double[] __ -> BaseAndScale.DOUBLE;\n+                case byte[]   _ -> BaseAndScale.BYTE;\n+                case char[]   _ -> BaseAndScale.CHAR;\n+                case short[]  _ -> BaseAndScale.SHORT;\n+                case int[]    _ -> BaseAndScale.INT;\n+                case float[]  _ -> BaseAndScale.FLOAT;\n+                case long[]   _ -> BaseAndScale.LONG;\n+                case double[] _ -> BaseAndScale.DOUBLE;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-            case GroupLayout           __ ->\n+            case GroupLayout            _ ->\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FallbackLinker.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -223,1 +223,1 @@\n-            case PaddingLayout __ -> {\n+            case PaddingLayout  _ -> {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/x64\/sysv\/TypeClass.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}