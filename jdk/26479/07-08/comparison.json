{"files":[{"patch":"@@ -279,1 +279,1 @@\n-        final Thread thread;\n+        volatile Thread parked; \/\/ Set to this thread when parked, else null\n@@ -282,1 +282,1 @@\n-            seed = (thread = Thread.currentThread()).threadId();\n+            seed = Thread.currentThread().threadId();\n@@ -332,1 +332,0 @@\n-        p.item = item;\n@@ -335,1 +334,2 @@\n-        Object v;                                \/\/ the match\n+        Object offered = null;                   \/\/ for cleanup\n+        Object v = null;\n@@ -347,0 +347,1 @@\n+                    Thread w;\n@@ -349,2 +350,2 @@\n-                    if (i == 0)\n-                        LockSupport.unpark(q.thread);\n+                    if (i == 0 && (w = q.parked) != null)\n+                        LockSupport.unpark(w);\n@@ -368,13 +369,15 @@\n-            else if (ENTRY.compareAndSet(s, null, p)) { \/\/ try offer\n-                boolean tryCancel = false;\n-                for (long ns = 1L;;) {\n-                    if (p.match == null && !tryCancel) {\n-                        if ((deadline != 0L &&\n-                             (ns = deadline - System.nanoTime()) <= 0L) ||\n-                            Thread.currentThread().isInterrupted())\n-                            tryCancel = true;    \/\/ cancel unless match\n-                        else if (ncpu > 1 &&\n-                                 (i != 0 ||      \/\/ check for busy VTs\n-                                  (!ForkJoinWorkerThread.hasKnownQueuedWork()))) {\n-                            for (int j = SPINS; p.match == null && j > 0; --j)\n-                                Thread.onSpinWait();\n+            else {                               \/\/ try offer\n+                if (offered == null)\n+                    offered = p.item = item;\n+                if (ENTRY.compareAndSet(s, null, p)) {\n+                    boolean tryCancel;           \/\/ true if interrupted\n+                    Thread t = Thread.currentThread();\n+                    if (!(tryCancel = t.isInterrupted()) && ncpu > 1 &&\n+                        (i != 0 ||               \/\/ check for busy VTs\n+                         (!ForkJoinWorkerThread.hasKnownQueuedWork()))) {\n+                        for (int j = SPINS; j > 0; --j) {\n+                            if ((v = p.match) != null) {\n+                                MATCH.set(p, null);\n+                                break outer;     \/\/ spin wait\n+                            }\n+                            Thread.onSpinWait();\n@@ -383,13 +386,21 @@\n-                    if ((v = MATCH.getAndSet(p, null)) != null)\n-                        break outer;\n-                    else if (!tryCancel && i == 0) {\n-                        if (deadline == 0L)\n-                            LockSupport.park(this);\n-                        else\n-                            LockSupport.parkNanos(this, ns);\n-                    }\n-                    else if (ENTRY.compareAndSet(s, p, null)) { \/\/ cancel\n-                        boolean interrupted = Thread.interrupted();\n-                        if (interrupted || ns <= 0L) {\n-                            p.item = null;\n-                            if (interrupted)\n+                    for (long ns = 1L;;) {       \/\/ block or cancel offer\n+                        if ((v = p.match) != null) {\n+                            MATCH.set(p, null);\n+                            break outer;\n+                        }\n+                        if (i == 0 && !tryCancel &&\n+                            (deadline == 0L ||\n+                             ((ns = deadline - System.nanoTime()) > 0L))) {\n+                            p.parked = t;        \/\/ emable unpark and recheck\n+                            if (p.match == null) {\n+                                if (deadline == 0L)\n+                                    LockSupport.park(this);\n+                                else\n+                                    LockSupport.parkNanos(this, ns);\n+                                tryCancel = t.isInterrupted();\n+                            }\n+                            p.parked = null;\n+                        }\n+                        else if (ENTRY.compareAndSet(s, p, null)) { \/\/ cancel\n+                            offered = p.item = null;\n+                            if (Thread.interrupted())\n@@ -397,1 +408,1 @@\n-                            else\n+                            if (deadline != 0L && ns <= 0L)\n@@ -399,2 +410,0 @@\n-                        }\n-                        else {\n@@ -410,1 +419,1 @@\n-                            break;\n+                            continue outer;\n@@ -416,1 +425,2 @@\n-        p.item = null;                           \/\/ cleanup\n+        if (offered != null)                     \/\/ cleanup\n+            p.item = null;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/Exchanger.java","additions":47,"deletions":37,"binary":false,"changes":84,"status":"modified"}]}