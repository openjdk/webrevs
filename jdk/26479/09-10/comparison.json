{"files":[{"patch":"@@ -1976,1 +1976,1 @@\n-                scan: for (int j = n; j > 0; --j, i += step) {\n+                scan: for (int j = n << 1; j != 0; --j, i += step) { \/\/ 2 sweeps\n@@ -2030,1 +2030,2 @@\n-            int activePhase = (w.phase += IDLE) + IDLE; \/\/ advance\n+            int inactive = w.phase |= IDLE;     \/\/ set status\n+            int activePhase = inactive + IDLE;  \/\/ phase value when reactivated\n@@ -2042,14 +2043,10 @@\n-                for (int i = 1;;) {             \/\/ scan; stagger origins\n-                    long c;\n-                    WorkQueue q = qs[(activePhase + i) & (n - 1)];\n-                    if ((idle = w.phase - activePhase) == 0)\n-                        break;\n-                    if (q != null && q.top - q.base > 0 &&\n-                        (int)(c = ctl) == activePhase &&\n-                        compareAndSetCtl(c, psp | ((c + RC_UNIT) & UMASK))) {\n-                        w.phase = activePhase;\n-                        idle = 0;               \/\/ possible missed signal\n-                        break;\n-                    }\n-                    if (++i == n) {\n-                        idle = awaitWork(w, activePhase);\n+                for (int i = 1; i < n; ++i) {   \/\/ scan; stagger origins\n+                    WorkQueue q; long c;        \/\/ missed signal check\n+                    if ((q = qs[(activePhase + i) & (n - 1)]) != null &&\n+                        q.top - q.base > 0) {\n+                        if ((idle = w.phase - activePhase) != 0 &&\n+                            (int)(c = ctl) == activePhase &&\n+                            compareAndSetCtl(c, psp | ((c + RC_UNIT) & UMASK))) {\n+                            w.phase = activePhase;\n+                            idle = 0;           \/\/ reactivated\n+                        }                       \/\/ else ineligible or lost race\n@@ -2058,1 +2055,0 @@\n-                    Thread.onSpinWait();        \/\/ reduce memory traffic\n@@ -2060,0 +2056,2 @@\n+                if (idle != 0 && (idle = w.phase - activePhase) != 0)\n+                    idle = awaitWork(w, activePhase, n);\n@@ -2070,0 +2068,1 @@\n+     * @param qsize current size of queues array\n@@ -2072,1 +2071,1 @@\n-    private int awaitWork(WorkQueue w, int activePhase) {\n+    private int awaitWork(WorkQueue w, int activePhase, int qsize) {\n@@ -2074,0 +2073,1 @@\n+        int spins = qsize | (qsize - 1);      \/\/ approx traversal cost\n@@ -2077,1 +2077,1 @@\n-            if ((w.config & CLEAR_TLS) != 0 &&\n+            if ((w.config & CLEAR_TLS) != 0 && \/\/ instanceof check always true\n@@ -2085,11 +2085,12 @@\n-            if ((idle = w.phase - activePhase) != 0) {\n-                for (;;) {\n-                    int trim;\n-                    Thread.interrupted();     \/\/ clear status\n-                    if ((runState & STOP) != 0L)\n-                        break;\n-                    w.parking = 1;            \/\/ enable unpark and recheck\n-                    if ((idle = w.phase - activePhase) != 0)\n-                        U.park(trimmable, deadline);\n-                    w.parking = 0;            \/\/ close unpark window\n-                    if (idle == 0 || (idle = w.phase - activePhase) == 0)\n+            for (;;) {\n+                int s = spins, trim;\n+                Thread.interrupted();         \/\/ clear status\n+                if ((runState & STOP) != 0L)\n+                    break;\n+                while ((idle = w.phase - activePhase) != 0 && --s != 0)\n+                    Thread.onSpinWait();      \/\/ spin before blocking\n+                if (idle == 0)\n+                    break;\n+                if (trimmable &&\n+                    (trim = tryTrim(w, activePhase, deadline)) != 0) {\n+                    if (trim > 0)\n@@ -2097,7 +2098,2 @@\n-                    if (trimmable &&\n-                        (trim = tryTrim(w, activePhase, deadline)) != 0) {\n-                        if (trim > 0)\n-                            break;\n-                        trimmable = false;\n-                        deadline = 0L;\n-                    }\n+                    trimmable = false;\n+                    deadline = 0L;\n@@ -2105,0 +2101,6 @@\n+                w.parking = 1;                \/\/ enable unpark and recheck\n+                if ((idle = w.phase - activePhase) != 0)\n+                    U.park(trimmable, deadline);\n+                w.parking = 0;                \/\/ close unpark window\n+                if (idle == 0 || (idle = w.phase - activePhase) == 0)\n+                    break;\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":39,"deletions":37,"binary":false,"changes":76,"status":"modified"}]}