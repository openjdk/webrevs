{"files":[{"patch":"@@ -1285,0 +1285,1 @@\n+  os::init_random(initial_time_count);\n","filename":"src\/hotspot\/os\/posix\/os_posix.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4340,0 +4340,2 @@\n+\n+  os::init_random((unsigned)os::javaTimeNanos());\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Check os::random randomness\n+ * @library \/test\/lib\n+ * @requires vm.flagless\n+ * @requires vm.debug\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestOsRandom\n+ *\/\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.regex.Pattern;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+public class TestOsRandom {\n+\n+    private final static class Tester {\n+        public static void main(String[] args) {\n+            Object o = new Object();\n+            System.out.println(\"Hash:\" + System.identityHashCode(o));\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Call JVM twice and let it trace out os::random results. We do this via\n+        \/\/ identity hash, whose seed is initialized - with hashCode=5 - with os::random.\n+        \/\/ Values must not repeat.\n+\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(\n+                \"-XX:+UnlockExperimentalVMOptions\", \"-XX:hashCode=5\",\n+                \"-Xmx100M\", Tester.class.getName());\n+\n+        OutputAnalyzer o = new OutputAnalyzer(pb.start());\n+        o.reportDiagnosticSummary();\n+        long l1 = Long.parseLong(o.firstMatch(\"Hash:(\\\\d+).*\", 1));\n+\n+        o = new OutputAnalyzer(pb.start());\n+        o.reportDiagnosticSummary();\n+        long l2 = Long.parseLong(o.firstMatch(\"Hash:(\\\\d+).*\", 1));\n+\n+        if (l1 == l2) {\n+            throw new RuntimeException(\"Random values match?\");\n+        }\n+\n+    }\n+\n+}\n+\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestOsRandom.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"}]}