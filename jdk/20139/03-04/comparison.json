{"files":[{"patch":"@@ -86,1 +86,2 @@\n-    ZStoreBarrierStubC2* const stub = ZStoreBarrierStubC2::create(node, Address(ref_base, disp), rnew_zaddress, rnew_zpointer, is_native, is_atomic);\n+    bool is_nokeepalive = (node->barrier_data() & ZBarrierNoKeepalive) != 0;\n+    ZStoreBarrierStubC2* const stub = ZStoreBarrierStubC2::create(node, Address(ref_base, disp), rnew_zaddress, rnew_zpointer, is_native, is_atomic, is_nokeepalive);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/z_ppc.ad","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -85,1 +85,2 @@\n-    ZStoreBarrierStubC2* const stub = ZStoreBarrierStubC2::create(node, ref_addr, rnew_zaddress, rnew_zpointer, is_native, is_atomic);\n+    bool is_nokeepalive = (node->barrier_data() & ZBarrierNoKeepalive) != 0;\n+    ZStoreBarrierStubC2* const stub = ZStoreBarrierStubC2::create(node, ref_addr, rnew_zaddress, rnew_zpointer, is_native, is_atomic, is_nokeepalive);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/z_riscv.ad","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -94,1 +94,2 @@\n-    ZStoreBarrierStubC2* const stub = ZStoreBarrierStubC2::create(node, ref_addr, rnew_zaddress, rnew_zpointer, is_native, is_atomic);\n+    bool is_nokeepalive = (node->barrier_data() & ZBarrierNoKeepalive) != 0;\n+    ZStoreBarrierStubC2* const stub = ZStoreBarrierStubC2::create(node, ref_addr, rnew_zaddress, rnew_zpointer, is_native, is_atomic, is_nokeepalive);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/z_x86_64.ad","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -409,2 +409,6 @@\n-    \/* Implementation of clear(), overridden for phantom references.\n-     * This method exists only to avoid making clear0() virtual. Making\n+    \/* Implementation of clear(). A simple assignment of the referent field\n+     * won't do for some garbage collectors. There is the override for phantom\n+     * references, which requires different semantics. This method is also\n+     * used by enqueue().\n+     *\n+     * <p>This method exists only to avoid making clear0() virtual. Making\n@@ -418,4 +422,0 @@\n-    \/* Implementation of clear(), also used by enqueue().  A simple\n-     * assignment of the referent field won't do for some garbage\n-     * collectors.\n-     *\/\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}