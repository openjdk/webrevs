{"files":[{"patch":"@@ -471,0 +471,1 @@\n+  do_intrinsic(_Reference_clear0,           java_lang_ref_Reference, clear0_name,    void_method_signature, F_RN)       \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -426,0 +426,1 @@\n+  template(clear0_name,                               \"clear0\")                                    \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -766,0 +766,1 @@\n+  case vmIntrinsics::_Reference_clear0:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -579,0 +579,1 @@\n+  case vmIntrinsics::_Reference_clear0:         return inline_reference_clear0();\n@@ -6835,0 +6836,44 @@\n+\/\/----------------------------inline_reference_refersTo0----------------------------\n+\/\/ void java.lang.ref.Reference.clear0();\n+bool LibraryCallKit::inline_reference_clear0() {\n+  \/\/ This matches the implementation in JVM_ReferenceClear, see the comments there.\n+\n+  \/\/ Get arguments\n+  Node* reference_obj = null_check_receiver();\n+  if (stopped()) return true;\n+\n+  \/\/ Common access parameters\n+  DecoratorSet decorators = IN_HEAP | AS_NO_KEEPALIVE | ON_UNKNOWN_OOP_REF;\n+  Node* referent_field_addr = basic_plus_adr(reference_obj, java_lang_ref_Reference::referent_offset());\n+  const TypePtr* referent_field_addr_type = _gvn.type(referent_field_addr)->isa_ptr();\n+  const Type* val_type = TypeOopPtr::make_from_klass(env()->Object_klass());\n+\n+  Node* referent = access_load_at(reference_obj,\n+                                  referent_field_addr,\n+                                  referent_field_addr_type,\n+                                  val_type,\n+                                  T_OBJECT,\n+                                  decorators);\n+\n+  IdealKit ideal(this);\n+#define __ ideal.\n+  __ if_then(referent, BoolTest::ne, null());\n+    sync_kit(ideal);\n+    access_store_at(reference_obj,\n+                    referent_field_addr,\n+                    referent_field_addr_type,\n+                    null(),\n+                    val_type,\n+                    T_OBJECT,\n+                    decorators);\n+    __ sync_kit(this);\n+  __ end_if();\n+  final_sync(ideal);\n+#undef __\n+\n+  \/\/ Add memory barrier to prevent commoning the accesses in this code,\n+  \/\/ since GC can change the value of referent at any time.\n+  insert_mem_bar(Op_MemBarCPUOrder);\n+\n+  return true;\n+}\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -297,0 +297,1 @@\n+  bool inline_reference_clear0();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -413,0 +413,1 @@\n+    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/\/\n+\/\/ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+\/\/ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\/\/\n+\/\/ This code is free software; you can redistribute it and\/or modify it\n+\/\/ under the terms of the GNU General Public License version 2 only, as\n+\/\/ published by the Free Software Foundation.\n+\/\/\n+\/\/ This code is distributed in the hope that it will be useful, but WITHOUT\n+\/\/ ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+\/\/ FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+\/\/ version 2 for more details (a copy is included in the LICENSE file that\n+\/\/ accompanied this code).\n+\/\/\n+\/\/ You should have received a copy of the GNU General Public License version\n+\/\/ 2 along with this work; if not, write to the Free Software Foundation,\n+\/\/ Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+\/\/\n+\/\/ Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+\/\/ or visit www.oracle.com if you need additional information or have any\n+\/\/ questions.\n+\/\/\n+\/\/\n+package org.openjdk.bench.java.lang.ref;\n+\n+import java.lang.ref.*;\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Fork(3)\n+public class ReferenceClear {\n+\n+    final Reference<Object> soft = new SoftReference<>(new Object());\n+    final Reference<Object> weak = new WeakReference<>(new Object());\n+    final Reference<Object> phantom = new PhantomReference<>(new Object(), null);\n+\n+    @Benchmark\n+    public void soft() {\n+       soft.clear();\n+    }\n+\n+    @Benchmark\n+    public void soft_new(Blackhole bh) {\n+       Object ref = new Object();\n+       bh.consume(ref);\n+       Reference<Object> soft = new SoftReference<>(ref);\n+       soft.clear();\n+    }\n+\n+    @Benchmark\n+    public void weak() {\n+       weak.clear();\n+    }\n+\n+    @Benchmark\n+    public void weak_new(Blackhole bh) {\n+       Object ref = new Object();\n+       bh.consume(ref);\n+       Reference<Object> weak = new WeakReference<>(ref);\n+       weak.clear();\n+    }\n+\n+    @Benchmark\n+    public void phantom() {\n+       phantom.clear();\n+    }\n+\n+    @Benchmark\n+    public void phantom_new(Blackhole bh) {\n+       Object ref = new Object();\n+       bh.consume(ref);\n+       Reference<Object> phantom = new PhantomReference<>(ref, null);\n+       phantom.clear();\n+    }\n+\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ref\/ReferenceClear.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}