{"files":[{"patch":"@@ -95,1 +95,1 @@\n-        if (FontUtilities.isDefaultIgnorable(unicode)) {\n+        if (FontUtilities.isDefaultIgnorable(unicode) || isIgnorableWhitespace(unicode)) {\n@@ -133,0 +133,6 @@\n+    \/\/ Matches behavior in e.g. CMap.getControlCodeGlyph(int, boolean)\n+    \/\/ and RasterPrinterJob.removeControlChars(String)\n+    private static boolean isIgnorableWhitespace(int code) {\n+        return code == 0x0009 || code == 0x000a || code == 0x000d;\n+    }\n+\n@@ -256,1 +262,1 @@\n-                } else if (FontUtilities.isDefaultIgnorable(code)) {\n+                } else if (FontUtilities.isDefaultIgnorable(code) || isIgnorableWhitespace(code)) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/font\/CCharToGlyphMapper.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8350203\n+ * @summary Confirm that a few special whitespace characters are ignored.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.TextAttribute;\n+import java.awt.image.BufferedImage;\n+import java.text.AttributedString;\n+import java.util.Map;\n+\n+public class IgnoredWhitespaceTest {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        BufferedImage image = new BufferedImage(600, 600, BufferedImage.TYPE_BYTE_BINARY);\n+        Graphics2D g2d = image.createGraphics();\n+\n+        Font font = new Font(Font.DIALOG, Font.PLAIN, 40);\n+        test(image, g2d, font);\n+\n+        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n+        test(image, g2d, font);\n+\n+        g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS, RenderingHints.VALUE_FRACTIONALMETRICS_ON);\n+        test(image, g2d, font);\n+\n+        Font kerningFont = font.deriveFont(Map.of(TextAttribute.KERNING, TextAttribute.KERNING_ON));\n+        test(image, g2d, kerningFont);\n+\n+        Font physicalFont = getPhysicalFont(40);\n+        if (physicalFont != null) {\n+            test(image, g2d, physicalFont);\n+        }\n+\n+        g2d.dispose();\n+    }\n+\n+    private static void test(BufferedImage image, Graphics2D g2d, Font font) {\n+        test(image, g2d, font, \"XXXXX\", \"\\t\\t\\t\\t\\tXXXXX\");\n+        test(image, g2d, font, \"XXXXX\", \"\\tX\\tX\\tX\\tX\\tX\\t\");\n+        test(image, g2d, font, \"XXXXX\", \"\\r\\r\\r\\r\\rXXXXX\");\n+        test(image, g2d, font, \"XXXXX\", \"\\rX\\rX\\rX\\rX\\rX\\r\");\n+        test(image, g2d, font, \"XXXXX\", \"\\n\\n\\n\\n\\nXXXXX\");\n+        test(image, g2d, font, \"XXXXX\", \"\\nX\\nX\\nX\\nX\\nX\\n\");\n+    }\n+\n+    private static void test(BufferedImage image, Graphics2D g2d, Font font, String reference, String text) {\n+\n+        g2d.setFont(font);\n+        FontRenderContext frc = g2d.getFontRenderContext();\n+        int w = image.getWidth();\n+        int h = image.getHeight();\n+        int x = w \/ 2;\n+        int y = h \/ 2;\n+\n+        g2d.setColor(Color.WHITE);\n+        g2d.fillRect(0, 0, w, h);\n+        g2d.setColor(Color.BLACK);\n+        g2d.drawString(reference, x, y);\n+        Rectangle expected = findTextBoundingBox(image);\n+\n+        g2d.setColor(Color.WHITE);\n+        g2d.fillRect(0, 0, w, h);\n+        g2d.setColor(Color.BLACK);\n+        g2d.drawString(text, x, y);\n+        Rectangle actual = findTextBoundingBox(image);\n+        assertEqual(expected, actual, text);\n+\n+        g2d.setColor(Color.WHITE);\n+        g2d.fillRect(0, 0, w, h);\n+        g2d.setColor(Color.BLACK);\n+        g2d.drawString(new AttributedString(text, Map.of(TextAttribute.FONT, font)).getIterator(), x, y);\n+        actual = findTextBoundingBox(image);\n+        assertEqual(expected, actual, text);\n+\n+        g2d.setColor(Color.WHITE);\n+        g2d.fillRect(0, 0, w, h);\n+        g2d.setColor(Color.BLACK);\n+        g2d.drawChars(text.toCharArray(), 0, text.length(), x, y);\n+        actual = findTextBoundingBox(image);\n+        assertEqual(expected, actual, text);\n+\n+        g2d.setColor(Color.WHITE);\n+        g2d.fillRect(0, 0, w, h);\n+        g2d.setColor(Color.BLACK);\n+        g2d.drawGlyphVector(font.createGlyphVector(frc, text), x, y);\n+        actual = findTextBoundingBox(image);\n+        assertEqual(expected, actual, text);\n+    }\n+\n+    private static void assertEqual(Rectangle r1, Rectangle r2, String text) {\n+        if (!r1.equals(r2)) {\n+            String escaped = text.replace(\"\\r\", \"\\\\r\").replace(\"\\n\", \"\\\\n\").replace(\"\\t\", \"\\\\t\");\n+            String msg = String.format(\"for text '%s': %s != %s\", escaped, r1.toString(), r2.toString());\n+            throw new RuntimeException(msg);\n+        }\n+    }\n+\n+    private static Font getPhysicalFont(int size) {\n+        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        String[] names = ge.getAvailableFontFamilyNames();\n+        for (String n : names) {\n+            switch (n) {\n+                case Font.DIALOG:\n+                case Font.DIALOG_INPUT:\n+                case Font.SERIF:\n+                case Font.SANS_SERIF:\n+                case Font.MONOSPACED:\n+                     continue;\n+                default:\n+                    Font f = new Font(n, Font.PLAIN, size);\n+                    if (f.canDisplayUpTo(\"AZaz09\") == -1) {\n+                        return f;\n+                    }\n+            }\n+        }\n+        return null;\n+    }\n+\n+    private static Rectangle findTextBoundingBox(BufferedImage image) {\n+        int minX = Integer.MAX_VALUE;\n+        int minY = Integer.MAX_VALUE;\n+        int maxX = Integer.MIN_VALUE;\n+        int maxY = Integer.MIN_VALUE;\n+        int width = image.getWidth();\n+        int height = image.getHeight();\n+        int[] rowPixels = new int[width];\n+        for (int y = 0; y < height; y++) {\n+            image.getRGB(0, y, width, 1, rowPixels, 0, width);\n+            for (int x = 0; x < width; x++) {\n+                boolean white = (rowPixels[x] == -1);\n+                if (!white) {\n+                    if (x < minX) {\n+                        minX = x;\n+                    }\n+                    if (y < minY) {\n+                        minY = y;\n+                    }\n+                    if (x > maxX) {\n+                        maxX = x;\n+                    }\n+                    if (y > maxY) {\n+                        maxY = y;\n+                    }\n+                }\n+            }\n+        }\n+        if (minX != Integer.MAX_VALUE) {\n+            return new Rectangle(minX, minY, maxX - minX, maxY - minY);\n+        } else {\n+            return null;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Graphics2D\/DrawString\/IgnoredWhitespaceTest.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"}]}