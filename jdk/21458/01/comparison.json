{"files":[{"patch":"@@ -45,0 +45,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -491,0 +493,2 @@\n+        requireNonNull(className);\n+        requireNonNull(constantName);\n@@ -509,0 +513,1 @@\n+        requireNonNull(className);\n@@ -525,0 +530,1 @@\n+        requireNonNull(value);\n@@ -541,0 +547,1 @@\n+        requireNonNull(value);\n@@ -557,0 +564,1 @@\n+        requireNonNull(value);\n@@ -573,0 +581,1 @@\n+        requireNonNull(value);\n@@ -589,0 +598,1 @@\n+        requireNonNull(value);\n@@ -605,0 +615,1 @@\n+        requireNonNull(value);\n@@ -621,0 +632,1 @@\n+        requireNonNull(value);\n@@ -637,0 +649,1 @@\n+        requireNonNull(value);\n@@ -653,0 +666,1 @@\n+        requireNonNull(value);\n@@ -670,0 +684,1 @@\n+        requireNonNull(value);\n@@ -787,1 +802,1 @@\n-        throw new IllegalArgumentException(\"Illegal annotation constant value type \" + (value == null ? null : value.getClass()));\n+        throw new IllegalArgumentException(\"Illegal annotation constant value type \" + requireNonNull(value).getClass());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -61,0 +63,1 @@\n+        requireNonNull(attr);\n@@ -79,0 +82,1 @@\n+        requireNonNull(attr);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AttributedElement.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -109,0 +111,1 @@\n+        requireNonNull(other);\n@@ -173,1 +176,1 @@\n-        return new ClassHierarchyImpl.ResourceParsingClassHierarchyResolver(classStreamResolver);\n+        return new ClassHierarchyImpl.ResourceParsingClassHierarchyResolver(requireNonNull(classStreamResolver));\n@@ -184,0 +187,1 @@\n+        requireNonNull(loader);\n@@ -213,0 +217,1 @@\n+        requireNonNull(loader);\n@@ -235,0 +240,1 @@\n+        requireNonNull(lookup);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassHierarchyResolver.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -66,1 +68,1 @@\n-        return new TransformImpl.SupplierClassTransform(supplier);\n+        return new TransformImpl.SupplierClassTransform(requireNonNull(supplier));\n@@ -77,0 +79,1 @@\n+        requireNonNull(finisher);\n@@ -98,0 +101,1 @@\n+        requireNonNull(filter);\n@@ -114,1 +118,1 @@\n-        return new TransformImpl.ClassMethodTransform(xform, filter);\n+        return new TransformImpl.ClassMethodTransform(requireNonNull(xform), requireNonNull(filter));\n@@ -125,1 +129,1 @@\n-        return transformingMethods(mm -> true, xform);\n+        return transformingMethods(_ -> true, xform);\n@@ -160,1 +164,1 @@\n-        return new TransformImpl.ClassFieldTransform(xform, f -> true);\n+        return new TransformImpl.ClassFieldTransform(requireNonNull(xform), _ -> true);\n@@ -172,1 +176,1 @@\n-        return new TransformImpl.ChainedClassTransform(this, t);\n+        return new TransformImpl.ChainedClassTransform(this, requireNonNull(t));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassTransform.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -64,1 +66,1 @@\n-        return new TransformImpl.SupplierCodeTransform(supplier);\n+        return new TransformImpl.SupplierCodeTransform(requireNonNull(supplier));\n@@ -75,0 +77,1 @@\n+        requireNonNull(finisher);\n@@ -97,1 +100,1 @@\n-        return new TransformImpl.ChainedCodeTransform(this, t);\n+        return new TransformImpl.ChainedCodeTransform(this, requireNonNull(t));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeTransform.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -65,1 +67,1 @@\n-        return new TransformImpl.SupplierFieldTransform(supplier);\n+        return new TransformImpl.SupplierFieldTransform(requireNonNull(supplier));\n@@ -76,0 +78,1 @@\n+        requireNonNull(finisher);\n@@ -97,0 +100,1 @@\n+        requireNonNull(filter);\n@@ -112,1 +116,1 @@\n-        return new TransformImpl.ChainedFieldTransform(this, t);\n+        return new TransformImpl.ChainedFieldTransform(this, requireNonNull(t));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldTransform.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -65,0 +67,1 @@\n+        requireNonNull(supplier);\n@@ -76,0 +79,1 @@\n+        requireNonNull(finisher);\n@@ -97,0 +101,1 @@\n+        requireNonNull(filter);\n@@ -111,1 +116,1 @@\n-        return new TransformImpl.MethodCodeTransform(xform);\n+        return new TransformImpl.MethodCodeTransform(requireNonNull(xform));\n@@ -123,1 +128,1 @@\n-        return new TransformImpl.ChainedMethodTransform(this, t);\n+        return new TransformImpl.ChainedMethodTransform(this, requireNonNull(t));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodTransform.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -67,0 +69,1 @@\n+        requireNonNull(classMap);\n@@ -78,1 +81,1 @@\n-        return new ClassRemapperImpl(mapFunction);\n+        return new ClassRemapperImpl(requireNonNull(mapFunction));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/ClassRemapper.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -65,0 +67,1 @@\n+        requireNonNull(map);\n@@ -75,1 +78,1 @@\n-        return new CodeRelabelerImpl(mapFunction);\n+        return new CodeRelabelerImpl(requireNonNull(mapFunction));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/components\/CodeRelabeler.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/DiscontinuedInstruction.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import jdk.internal.loader.ClassLoaders;\n@@ -374,1 +375,2 @@\n-        return ClassFile.of(ClassHierarchyResolverOption.of(ClassHierarchyResolver.ofClassLoading(loader)))\n+        return ClassFile.of(ClassHierarchyResolverOption.of(ClassHierarchyResolver.ofClassLoading(loader == null ?\n+                        ClassLoaders.platformClassLoader() : loader)))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -69,0 +69,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -250,0 +252,3 @@\n+        public SwitchCaseImpl {\n+            requireNonNull(target);\n+        }\n@@ -895,1 +900,1 @@\n-            this.target = target;\n+            this.target = requireNonNull(target);\n@@ -922,1 +927,1 @@\n-            this.defaultTarget = defaultTarget;\n+            this.defaultTarget = requireNonNull(defaultTarget);\n@@ -958,1 +963,1 @@\n-            this.defaultTarget = defaultTarget;\n+            this.defaultTarget = requireNonNull(defaultTarget);\n@@ -1033,1 +1038,1 @@\n-            this.fieldEntry = fieldEntry;\n+            this.fieldEntry = requireNonNull(fieldEntry);\n@@ -1058,1 +1063,1 @@\n-            this.methodEntry = methodEntry;\n+            this.methodEntry = requireNonNull(methodEntry);\n@@ -1098,1 +1103,1 @@\n-            this.indyEntry = indyEntry;\n+            this.indyEntry = requireNonNull(indyEntry);\n@@ -1123,1 +1128,1 @@\n-            this.classEntry = classEntry;\n+            this.classEntry = requireNonNull(classEntry);\n@@ -1148,1 +1153,1 @@\n-            this.typeKind = typeKind;\n+            this.typeKind = requireNonNull(typeKind);\n@@ -1173,1 +1178,1 @@\n-            this.componentTypeEntry = componentTypeEntry;\n+            this.componentTypeEntry = requireNonNull(componentTypeEntry);\n@@ -1200,1 +1205,1 @@\n-            this.arrayTypeEntry = arrayTypeEntry;\n+            this.arrayTypeEntry = requireNonNull(arrayTypeEntry);\n@@ -1258,1 +1263,1 @@\n-            this.typeEntry = typeEntry;\n+            this.typeEntry = requireNonNull(typeEntry);\n@@ -1360,1 +1365,1 @@\n-            this.constant = constant;\n+            this.constant = requireNonNull(constant);\n@@ -1408,1 +1413,1 @@\n-            this.target = target;\n+            this.target = requireNonNull(target);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractInstruction.java","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -59,0 +59,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -442,1 +444,1 @@\n-                    return stringValue.equals(s);\n+                    return stringValue.equals(requireNonNull(s));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -58,3 +60,3 @@\n-            this.handler = handler;\n-            this.tryStart = tryStart;\n-            this.tryEnd = tryEnd;\n+            this.handler = requireNonNull(handler);\n+            this.tryStart = requireNonNull(tryStart);\n+            this.tryEnd = requireNonNull(tryEnd);\n@@ -65,4 +67,1 @@\n-            this.catchTypeEntry = catchTypeEntry.orElse(null);\n-            this.handler = handler;\n-            this.tryStart = tryStart;\n-            this.tryEnd = tryEnd;\n+            this(handler, tryStart, tryEnd, catchTypeEntry.orElse(null));\n@@ -118,2 +117,2 @@\n-            this.startScope = startScope;\n-            this.endScope = endScope;\n+            this.startScope = requireNonNull(startScope);\n+            this.endScope = requireNonNull(endScope);\n@@ -168,4 +167,4 @@\n-            this.name = name;\n-            this.descriptor = descriptor;\n-            this.startScope = startScope;\n-            this.endScope = endScope;\n+            this.name = requireNonNull(name);\n+            this.descriptor = requireNonNull(descriptor);\n+            this.startScope = requireNonNull(startScope);\n+            this.endScope = requireNonNull(endScope);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPseudoInstruction.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -35,0 +37,1 @@\n+        requireNonNull(className);\n@@ -53,0 +56,5 @@\n+        public AnnotationElementImpl {\n+            requireNonNull(name);\n+            requireNonNull(value);\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -83,1 +85,1 @@\n-        parent.with(element);\n+        parent.with(requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BlockCodeBuilderImpl.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -124,1 +126,1 @@\n-        elements.add(element);\n+        elements.add(requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedCodeBuilder.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,0 +37,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -52,2 +54,2 @@\n-        this.name = name;\n-        this.desc = type;\n+        this.name = requireNonNull(name);\n+        this.desc = requireNonNull(type);\n@@ -64,1 +66,1 @@\n-        elements.add(element);\n+        elements.add(requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedFieldBuilder.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -46,0 +46,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -66,2 +68,2 @@\n-        this.name = nameInfo;\n-        this.desc = typeInfo;\n+        this.name = requireNonNull(nameInfo);\n+        this.desc = requireNonNull(typeInfo);\n@@ -74,1 +76,1 @@\n-        elements.add(element);\n+        elements.add(requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import static java.util.Objects.requireNonNull;\n@@ -466,1 +467,1 @@\n-        Objects.requireNonNull(opcode);\n+        requireNonNull(opcode);\n@@ -554,1 +555,1 @@\n-        throw new UnsupportedOperationException(\"not yet: \" + constantValue);\n+        throw new UnsupportedOperationException(\"not yet: \" + requireNonNull(constantValue));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -50,1 +52,1 @@\n-        consumer.accept(element);\n+        consumer.accept(requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedClassBuilder.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,0 +34,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -62,1 +64,1 @@\n-        consumer.accept(element);\n+        consumer.accept(requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedCodeBuilder.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -53,1 +55,1 @@\n-        consumer.accept(element);\n+        consumer.accept(requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedFieldBuilder.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -51,1 +53,1 @@\n-        consumer.accept(element);\n+        consumer.accept(requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedMethodBuilder.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,0 +43,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -126,1 +128,1 @@\n-                throw new IllegalArgumentException(\"Invalid option: \" + o);\n+                throw new IllegalArgumentException(\"Invalid option: \" + requireNonNull(o));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassFileImpl.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-                map.put(e.getKey(), ClassHierarchyInfo.ofClass(e.getValue()));\n+                map.put(requireNonNull(e.getKey()), ClassHierarchyInfo.ofClass(e.getValue()));\n@@ -210,1 +210,1 @@\n-                map.put(i, ClassHierarchyInfo.ofInterface());\n+                map.put(requireNonNull(i), ClassHierarchyInfo.ofInterface());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassHierarchyImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -64,0 +64,1 @@\n+import static java.util.Objects.requireNonNull;\n@@ -567,0 +568,1 @@\n+        requireNonNull(verbosity); \/\/ we are using == checks in implementations\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.constant.ClassDesc;\n@@ -31,3 +30,0 @@\n-import java.lang.constant.MethodTypeDesc;\n-import java.lang.reflect.AccessFlag;\n-import java.util.ArrayList;\n@@ -53,0 +49,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -90,1 +88,1 @@\n-            writeAttribute((CustomAttribute<?>) element);\n+            writeAttribute((CustomAttribute<?>) requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+import static java.util.Objects.requireNonNull;\n@@ -150,1 +151,1 @@\n-            writeAttribute((CustomAttribute<?>) element);\n+            writeAttribute((CustomAttribute<?>) requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -51,2 +53,2 @@\n-        this.name = name;\n-        this.desc = type;\n+        this.name = requireNonNull(name);\n+        this.desc = requireNonNull(type);\n@@ -61,1 +63,1 @@\n-            writeAttribute((CustomAttribute<?>) element);\n+            writeAttribute((CustomAttribute<?>) requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectFieldBuilder.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -58,2 +60,2 @@\n-        this.name = nameInfo;\n-        this.desc = typeInfo;\n+        this.name = requireNonNull(nameInfo);\n+        this.desc = requireNonNull(typeInfo);\n@@ -117,1 +119,1 @@\n-            writeAttribute((CustomAttribute<?>) element);\n+            writeAttribute((CustomAttribute<?>) requireNonNull(element));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import static java.util.Objects.requireNonNull;\n@@ -125,0 +126,1 @@\n+        requireNonNull(other);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,0 +45,1 @@\n+import static java.util.Objects.requireNonNull;\n@@ -252,0 +253,3 @@\n+        public ObjectVerificationTypeInfoImpl {\n+            requireNonNull(className);\n+        }\n@@ -277,0 +281,3 @@\n+        public UninitializedVerificationTypeInfoImpl {\n+            requireNonNull(newTarget);\n+        }\n@@ -299,0 +306,1 @@\n+            requireNonNull(target);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapDecoder.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.util.Objects;\n@@ -40,1 +39,0 @@\n-        Objects.requireNonNull(targetType);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TargetInfoImpl.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+import java.util.Objects;\n@@ -190,0 +191,1 @@\n+        Objects.requireNonNull(constantPool);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -95,0 +95,2 @@\n+import static java.util.Objects.requireNonNull;\n+\n@@ -152,1 +154,1 @@\n-            this.entry = entry;\n+            this.entry = requireNonNull(entry);\n@@ -185,1 +187,1 @@\n-            this.signature = signature;\n+            this.signature = requireNonNull(signature);\n@@ -217,1 +219,1 @@\n-            this.annotationDefault = annotationDefault;\n+            this.annotationDefault = requireNonNull(annotationDefault);\n@@ -232,1 +234,1 @@\n-            this.sourceFile = sourceFile;\n+            this.sourceFile = requireNonNull(sourceFile);\n@@ -297,1 +299,1 @@\n-            this.classEntry = classEntry;\n+            this.classEntry = requireNonNull(classEntry);\n@@ -335,1 +337,1 @@\n-            this.moduleTarget = moduleTarget;\n+            this.moduleTarget = requireNonNull(moduleTarget);\n@@ -351,1 +353,1 @@\n-            this.mainClass = mainClass;\n+            this.mainClass = requireNonNull(mainClass);\n@@ -368,1 +370,1 @@\n-            this.algorithm = algorithm;\n+            this.algorithm = requireNonNull(algorithm);\n@@ -454,1 +456,1 @@\n-            this.hostEntry = hostEntry;\n+            this.hostEntry = requireNonNull(hostEntry);\n@@ -470,1 +472,1 @@\n-            this.idEntry = idEntry;\n+            this.idEntry = requireNonNull(idEntry);\n@@ -486,1 +488,1 @@\n-            this.idEntry = idEntry;\n+            this.idEntry = requireNonNull(idEntry);\n@@ -502,1 +504,1 @@\n-            this.contents = contents;\n+            this.contents = requireNonNull(contents);\n@@ -614,1 +616,7 @@\n-            this.elements = List.copyOf(elements);\n+            \/\/ deep copy\n+            var array = elements.toArray().clone();\n+            for (int i = 0; i < array.length; i++) {\n+                array[i] = List.copyOf((List<?>) array[i]);\n+            }\n+\n+            this.elements = SharedSecrets.getJavaUtilCollectionAccess().listFromTrustedArray(array);\n@@ -687,1 +695,7 @@\n-            implements InnerClassInfo {}\n+            implements InnerClassInfo {\n+        public UnboundInnerClassInfo {\n+            requireNonNull(innerClass);\n+            requireNonNull(outerClass);\n+            requireNonNull(innerName);\n+        }\n+    }\n@@ -696,1 +710,6 @@\n-            implements LocalVariableInfo { }\n+            implements LocalVariableInfo {\n+        public UnboundLocalVariableInfo {\n+            requireNonNull(name);\n+            requireNonNull(type);\n+        }\n+    }\n@@ -702,1 +721,6 @@\n-            implements LocalVariableTypeInfo { }\n+            implements LocalVariableTypeInfo {\n+        public UnboundLocalVariableTypeInfo {\n+            requireNonNull(name);\n+            requireNonNull(signature);\n+        }\n+    }\n@@ -705,1 +729,5 @@\n-            implements MethodParameterInfo {}\n+            implements MethodParameterInfo {\n+        public UnboundMethodParameterInfo {\n+            requireNonNull(name);\n+        }\n+    }\n@@ -711,5 +739,3 @@\n-        public UnboundModuleExportInfo(PackageEntry exportedPackage, int exportsFlagsMask,\n-                                       List<ModuleEntry> exportsTo) {\n-            this.exportedPackage = exportedPackage;\n-            this.exportsFlagsMask = exportsFlagsMask;\n-            this.exportsTo = List.copyOf(exportsTo);\n+        public UnboundModuleExportInfo {\n+            requireNonNull(exportedPackage);\n+            exportsTo = List.copyOf(exportsTo);\n@@ -720,1 +746,6 @@\n-                                        byte[] hash) implements ModuleHashInfo { }\n+                                        byte[] hash) implements ModuleHashInfo {\n+        public UnboundModuleHashInfo {\n+            requireNonNull(moduleName);\n+            requireNonNull(hash);\n+        }\n+    }\n@@ -725,5 +756,3 @@\n-        public UnboundModuleOpenInfo(PackageEntry openedPackage, int opensFlagsMask,\n-                                     List<ModuleEntry> opensTo) {\n-            this.openedPackage = openedPackage;\n-            this.opensFlagsMask = opensFlagsMask;\n-            this.opensTo = List.copyOf(opensTo);\n+        public UnboundModuleOpenInfo {\n+            requireNonNull(openedPackage);\n+            opensTo = List.copyOf(opensTo);\n@@ -736,3 +765,3 @@\n-        public UnboundModuleProvideInfo(ClassEntry provides, List<ClassEntry> providesWith) {\n-            this.provides = provides;\n-            this.providesWith = List.copyOf(providesWith);\n+        public UnboundModuleProvideInfo {\n+            requireNonNull(provides);\n+            providesWith = List.copyOf(providesWith);\n@@ -744,1 +773,6 @@\n-            implements ModuleRequireInfo {}\n+            implements ModuleRequireInfo {\n+        public UnboundModuleRequiresInfo {\n+            requireNonNull(requires);\n+            requireNonNull(requiresVersion);\n+        }\n+    }\n@@ -750,4 +784,4 @@\n-        public UnboundRecordComponentInfo(Utf8Entry name, Utf8Entry descriptor, List<Attribute<?>> attributes) {\n-            this.name = name;\n-            this.descriptor = descriptor;\n-            this.attributes = List.copyOf(attributes);\n+        public UnboundRecordComponentInfo {\n+            requireNonNull(name);\n+            requireNonNull(descriptor);\n+            attributes = List.copyOf(attributes);\n@@ -762,0 +796,1 @@\n+            requireNonNull(targetInfo);\n@@ -763,0 +798,1 @@\n+            requireNonNull(annotation);\n@@ -789,1 +825,1 @@\n-            this.moduleName = moduleName;\n+            this.moduleName = requireNonNull(moduleName);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/UnboundAttribute.java","additions":73,"deletions":37,"binary":false,"changes":110,"status":"modified"}]}