{"files":[{"patch":"@@ -750,2 +750,1 @@\n-        return validateOutput(Stream.of(str)\n-                .map(this::getValue)\n+        Stream.of(str).map(this::getValue)\n@@ -753,1 +752,2 @@\n-                .reduce(TKit.TextStreamVerifier::andThen).get());\n+                .reduce(TKit.TextStreamVerifier::andThen).ifPresent(this::validateOutput);\n+        return this;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -400,0 +400,4 @@\n+    public static boolean isXcodeDevToolsInstalled() {\n+        return Inner.XCODE_DEV_TOOLS_INSTALLED;\n+    }\n+\n@@ -435,0 +439,5 @@\n+    private static final class Inner {\n+        private static final boolean XCODE_DEV_TOOLS_INSTALLED =\n+                Executor.of(\"\/usr\/bin\/xcrun\", \"--help\").executeWithoutExitCodeCheck().getExitCode() == 0;\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n- * @library \/test\/lib\n@@ -52,2 +51,0 @@\n- * @build SigningCheck\n- * @build jtreg.SkippedException\n@@ -56,1 +53,1 @@\n- * @requires (os.family == \"mac\")\n+ * @requires (jpackage.test.MacSignTests == \"run\")\n@@ -59,0 +56,1 @@\n+ *  --jpt-before-run=SigningBase.verifySignTestEnvReady\n@@ -75,2 +73,0 @@\n-        SigningCheck.checkCertificates(certIndex);\n-\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n- * @library \/test\/lib\n@@ -53,2 +52,0 @@\n- * @build SigningCheck\n- * @build jtreg.SkippedException\n@@ -57,1 +54,1 @@\n- * @requires (os.family == \"mac\")\n+ * @requires (jpackage.test.MacSignTests == \"run\")\n@@ -60,0 +57,1 @@\n+ *  --jpt-before-run=SigningBase.verifySignTestEnvReady\n@@ -71,5 +69,1 @@\n-    public void test(String... testArgs) throws Exception {\n-        boolean signAppImage = Boolean.parseBoolean(testArgs[0]);\n-        boolean signingKey = Boolean.parseBoolean(testArgs[1]);\n-\n-        SigningCheck.checkCertificates(SigningBase.DEFAULT_INDEX);\n+    public void test(boolean signAppImage, boolean signingKey) throws Exception {\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTwoStepsTest.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,151 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.util.Collection;\n-import java.util.List;\n-import jdk.jpackage.test.Annotations.Parameters;\n-import jdk.jpackage.test.Annotations.Test;\n-import jdk.jpackage.test.JPackageCommand;\n-import jdk.jpackage.test.TKit;\n-\n-\/*\n- * @test\n- * @summary Test jpackage signing options errors\n- * @library \/test\/jdk\/tools\/jpackage\/helpers\n- * @library \/test\/lib\n- * @library base\n- * @build SigningBase\n- * @build SigningCheck\n- * @build jtreg.SkippedException\n- * @build SigningOptionsTest\n- * @requires (os.family == \"mac\")\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n- *  --jpt-run=SigningOptionsTest\n- *  --jpt-before-run=jdk.jpackage.test.JPackageCommand.useExecutableByDefault\n- *\/\n-\n-\/*\n- * @test\n- * @summary Test jpackage signing options errors\n- * @library \/test\/jdk\/tools\/jpackage\/helpers\n- * @library \/test\/lib\n- * @library base\n- * @build SigningBase\n- * @build SigningCheck\n- * @build jtreg.SkippedException\n- * @build SigningOptionsTest\n- * @requires (os.family == \"mac\")\n- * @run main\/othervm\/timeout=360 -Xmx512m jdk.jpackage.test.Main\n- *  --jpt-run=SigningOptionsTest\n- *  --jpt-before-run=jdk.jpackage.test.JPackageCommand.useToolProviderByDefault\n- *\/\n-\n-public final class SigningOptionsTest {\n-\n-    private final String expectedError;\n-    private final JPackageCommand cmd;\n-\n-    private static final String TEST_DUKE = TKit.TEST_SRC_ROOT.resolve(\n-            \"apps\/dukeplug.png\").toString();\n-\n-    @Parameters\n-    public static Collection<?> input() {\n-        return List.of(new Object[][]{\n-            \/\/ --mac-signing-key-user-name and --mac-app-image-sign-identity\n-            {\"Hello\",\n-                    new String[]{\"--mac-sign\",\n-                                 \"--mac-signing-key-user-name\", \"test-key\",\n-                                 \"--mac-app-image-sign-identity\", \"test-identity\"},\n-                    null,\n-                    \"Mutually exclusive options\",\n-                    Boolean.FALSE},\n-            \/\/ --mac-signing-key-user-name and --mac-installer-sign-identity\n-            {\"Hello\",\n-                    new String[]{\"--mac-sign\",\n-                                 \"--mac-signing-key-user-name\", \"test-key\",\n-                                 \"--mac-installer-sign-identity\", \"test-identity\"},\n-                    null,\n-                    \"Mutually exclusive options\",\n-                    Boolean.FALSE},\n-            \/\/ --mac-installer-sign-identity and --type app-image\n-            {\"Hello\",\n-                    new String[]{\"--mac-sign\",\n-                                 \"--mac-installer-sign-identity\", \"test-identity\"},\n-                    null,\n-                    \"Option [--mac-installer-sign-identity] is not valid with type\",\n-                    Boolean.FALSE},\n-            \/\/ --mac-installer-sign-identity and --type dmg\n-            {\"Hello\",\n-                    new String[]{\"--type\", \"dmg\",\n-                                 \"--mac-sign\",\n-                                 \"--mac-installer-sign-identity\", \"test-identity\"},\n-                    new String[]{\"--type\"},\n-                    \"Option [--mac-installer-sign-identity] is not valid with type\",\n-                    Boolean.FALSE},\n-            \/\/ --app-content and --type app-image\n-            \/\/ JDK-8340802: \"codesign\" may or may not fail if additional\n-            \/\/ content is specified based on macOS version. For example on\n-            \/\/ macOS 15 aarch64 \"codesign\" will not fail with additional content.\n-            \/\/ Since we only need to check that warning is displayed when\n-            \/\/ \"codesign\" fails and \"--app-content\" is provided, lets fail\n-            \/\/ \"codesign\" for some better reason like identity which does not\n-            \/\/ exists.\n-            {\"Hello\",\n-                    new String[]{\"--app-content\", TEST_DUKE,\n-                                 \"--mac-sign\",\n-                                 \"--mac-app-image-sign-identity\", \"test-identity\"},\n-                    null,\n-                    \"\\\"codesign\\\" failed and additional application content\" +\n-                    \" was supplied via the \\\"--app-content\\\" parameter.\",\n-                    Boolean.TRUE},\n-        });\n-    }\n-\n-    public SigningOptionsTest(String javaAppDesc, String[] jpackageArgs,\n-                              String[] removeArgs, String expectedError,\n-                              Boolean checkRequirements) {\n-        this.expectedError = expectedError;\n-\n-        if (checkRequirements) {\n-            SigningCheck.isXcodeDevToolsInstalled();\n-        }\n-\n-        cmd = JPackageCommand.helloAppImage(javaAppDesc)\n-                .saveConsoleOutput(true).dumpOutput(true);\n-        if (jpackageArgs != null) {\n-            cmd.addArguments(jpackageArgs);\n-        } if (removeArgs != null) {\n-            for (String arg : removeArgs) {\n-                cmd.removeArgumentWithValue(arg);\n-            }\n-        }\n-    }\n-\n-    @Test\n-    public void test() {\n-        List<String> output = cmd.execute(1).getOutput();\n-        TKit.assertNotNull(output, \"output is null\");\n-        TKit.assertTextStream(expectedError).apply(output.stream());\n-    }\n-\n-}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningOptionsTest.java","additions":0,"deletions":151,"binary":false,"changes":151,"status":"deleted"},{"patch":"@@ -54,1 +54,0 @@\n- * @library \/test\/lib\n@@ -58,2 +57,0 @@\n- * @build SigningCheck\n- * @build jtreg.SkippedException\n@@ -62,1 +59,1 @@\n- * @requires (os.family == \"mac\")\n+ * @requires (jpackage.test.MacSignTests == \"run\")\n@@ -65,0 +62,1 @@\n+ *  --jpt-before-run=SigningBase.verifySignTestEnvReady\n@@ -106,5 +104,1 @@\n-    public void test(String... testArgs) throws Exception {\n-        boolean signAppImage = Boolean.parseBoolean(testArgs[0]);\n-        boolean signingKey = Boolean.parseBoolean(testArgs[1]);\n-\n-        SigningCheck.checkCertificates(SigningBase.DEFAULT_INDEX);\n+    public void test(boolean signAppImage, boolean signingKey) throws Exception {\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageFromTwoStepAppImageTest.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -52,1 +52,0 @@\n- * @library \/test\/lib\n@@ -56,2 +55,0 @@\n- * @build SigningCheck\n- * @build jtreg.SkippedException\n@@ -60,1 +57,1 @@\n- * @requires (os.family == \"mac\")\n+ * @requires (jpackage.test.MacSignTests == \"run\")\n@@ -63,0 +60,1 @@\n+ *  --jpt-before-run=SigningBase.verifySignTestEnvReady\n@@ -132,2 +130,0 @@\n-        SigningCheck.checkCertificates(certIndex);\n-\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTest.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n- * @library \/test\/lib\n@@ -59,2 +58,0 @@\n- * @build SigningCheck\n- * @build jtreg.SkippedException\n@@ -63,1 +60,1 @@\n- * @requires (os.family == \"mac\")\n+ * @requires (jpackage.test.MacSignTests == \"run\")\n@@ -66,0 +63,1 @@\n+ *  --jpt-before-run=SigningBase.verifySignTestEnvReady\n@@ -110,6 +108,1 @@\n-    public static void test(String... testArgs) throws Exception {\n-        boolean signAppImage = Boolean.parseBoolean(testArgs[0]);\n-        boolean signingKey = Boolean.parseBoolean(testArgs[1]);\n-\n-        SigningCheck.checkCertificates(SigningBase.DEFAULT_INDEX);\n-\n+    public static void test(boolean signAppImage, boolean signingKey) throws Exception {\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTwoStepTest.java","additions":3,"deletions":10,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1,97 +0,0 @@\n-\/*\n- * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.util.List;\n-\n-import jdk.jpackage.test.TKit;\n-import jdk.jpackage.test.Executor;\n-\n-import jdk.jpackage.internal.MacCertificate;\n-\n-public class SigningCheck {\n-\n-    public static void checkCertificates(int certIndex) {\n-        if (!SigningBase.isDevNameDefault()) {\n-            \/\/ Do not validate user supplied certificates.\n-            \/\/ User supplied certs whose trust is set to \"Use System Defaults\"\n-            \/\/ will not be listed as trusted by dump-trust-settings, so we\n-            \/\/ cannot verify them completely.\n-            return;\n-        }\n-\n-        \/\/ Index can be -1 for unsigned tests, but we still skipping test\n-        \/\/ if machine is not configured for signing testing, so default it to\n-        \/\/ SigningBase.DEFAULT_INDEX\n-        if (certIndex <= -1) {\n-            certIndex = SigningBase.DEFAULT_INDEX;\n-        }\n-\n-        String key = MacCertificate.findCertificateKey(null,\n-                        SigningBase.getAppCert(certIndex),\n-                        SigningBase.getKeyChain());\n-        validateCertificate(key);\n-        validateCertificateTrust(SigningBase.getAppCert(certIndex));\n-\n-        key = MacCertificate.findCertificateKey(null,\n-                SigningBase.getInstallerCert(certIndex),\n-                SigningBase.getKeyChain());\n-        validateCertificate(key);\n-        validateCertificateTrust(SigningBase.getInstallerCert(certIndex));\n-    }\n-\n-    private static void validateCertificate(String key) {\n-        if (key != null) {\n-            MacCertificate certificate = new MacCertificate(key);\n-            if (!certificate.isValid()) {\n-                TKit.throwSkippedException(\"Certifcate expired: \" + key);\n-            } else {\n-                return;\n-            }\n-        }\n-\n-        TKit.throwSkippedException(\"Cannot find required certifciates: \" + key);\n-    }\n-\n-    private static void validateCertificateTrust(String name) {\n-        \/\/ Certificates using the default user name must be trusted by user.\n-        List<String> result = new Executor()\n-                .setExecutable(\"\/usr\/bin\/security\")\n-                .addArguments(\"dump-trust-settings\")\n-                .executeWithoutExitCodeCheckAndGetOutput();\n-        result.stream().forEachOrdered(TKit::trace);\n-        TKit.assertTextStream(name)\n-                .predicate((line, what) -> line.trim().endsWith(what))\n-                .orElseThrow(() -> TKit.throwSkippedException(\n-                        \"Certifcate not trusted by current user: \" + name))\n-                .apply(result.stream());\n-    }\n-\n-    public static void isXcodeDevToolsInstalled() {\n-        int code = Executor.of(\"\/usr\/bin\/xcrun\", \"--help\")\n-                .executeWithoutExitCodeCheck().getExitCode();\n-        if (code != 0) {\n-            TKit.throwSkippedException(\"Missing Xcode with command line developer tools\");\n-        }\n-    }\n-\n-}\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningCheck.java","additions":0,"deletions":97,"binary":false,"changes":97,"status":"deleted"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.function.Consumer;\n@@ -49,0 +50,1 @@\n+import jdk.jpackage.test.MacHelper;\n@@ -542,5 +544,2 @@\n-        }).<TestSpec>mapMulti((builder, acc) -> {\n-            \/\/ It should bail out with the same error message regardless of `--mac-sign` option.\n-            acc.accept(builder.create());\n-            acc.accept(builder.addArgs(\"--mac-sign\").create());\n-        }).toList());\n+         \/\/ It should bail out with the same error message regardless of `--mac-sign` option.\n+        }).mapMulti(ErrorTest::duplicateForMacSign).toList());\n@@ -551,1 +550,1 @@\n-        ).map(TestSpec.Builder::create).toList());\n+        ).mapMulti(ErrorTest::duplicateForMacSign).toList());\n@@ -556,1 +555,1 @@\n-        ).map(TestSpec.Builder::nativeType).map(TestSpec.Builder::create).toList());\n+        ).map(TestSpec.Builder::nativeType).mapMulti(ErrorTest::duplicateForMacSign).toList());\n@@ -561,0 +560,42 @@\n+    @Test(ifOS = MACOS)\n+    public static void testAppContentWarning() {\n+        \/\/ --app-content and --type app-image\n+        \/\/ Expect `message.codesign.failed.reason.app.content` message in the log.\n+        \/\/ This is not a fatal error, just a warning.\n+        \/\/ To make jpackage fail, specify invalid signing identity.\n+        final var cmd = JPackageCommand.helloAppImage()\n+                .addArguments(\"--app-content\", TKit.TEST_SRC_ROOT.resolve(\"apps\/dukeplug.png\"))\n+                .addArguments(\"--mac-sign\", \"--mac-app-image-sign-identity\", \"foo\");\n+\n+        final List<CannedFormattedString> expectedStrings = new ArrayList<>();\n+        expectedStrings.add(JPackageStringBundle.MAIN.cannedFormattedString(\"message.codesign.failed.reason.app.content\"));\n+\n+        final var xcodeWarning = JPackageStringBundle.MAIN.cannedFormattedString(\"message.codesign.failed.reason.xcode.tools\");\n+        if (!MacHelper.isXcodeDevToolsInstalled()) {\n+            expectedStrings.add(xcodeWarning);\n+        }\n+\n+        defaultInit(cmd, expectedStrings);\n+\n+        if (MacHelper.isXcodeDevToolsInstalled()) {\n+            \/\/ Check there is no warning about missing xcode command line developer tools.\n+            cmd.validateOutput(TKit.assertTextStream(xcodeWarning.getValue()).negate());\n+        }\n+\n+        cmd.execute(1);\n+    }\n+\n+    private static void duplicate(TestSpec.Builder builder, Consumer<TestSpec> accumulator, Consumer<TestSpec.Builder> mutator) {\n+        accumulator.accept(builder.create());\n+        mutator.accept(builder);\n+        accumulator.accept(builder.create());\n+    }\n+\n+    private static void duplicateAddArgs(TestSpec.Builder builder, Consumer<TestSpec> accumulator, String...args) {\n+        duplicate(builder, accumulator, b -> b.addArgs(args));\n+    }\n+\n+    private static void duplicateForMacSign(TestSpec.Builder builder, Consumer<TestSpec> accumulator) {\n+        duplicateAddArgs(builder, accumulator, \"--mac-sign\");\n+    }\n+\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":48,"deletions":7,"binary":false,"changes":55,"status":"modified"}]}