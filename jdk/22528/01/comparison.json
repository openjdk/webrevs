{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,1 @@\n-    return findClass(env, \"Ljava\/lang\/Module;\");\n+    return findClass(env, \"java\/lang\/Module\");\n@@ -53,0 +53,5 @@\n+    if (JNI_FUNC_PTR(env,ExceptionCheck)(env)) {\n+        JNI_FUNC_PTR(env,ExceptionClear)(env); \/\/ keep -Xcheck:jni happy\n+        ERROR_MESSAGE((\"JNI Exception occurred calling Module.getName()\"));\n+        EXIT_ERROR(AGENT_ERROR_JNI_EXCEPTION, NULL);\n+    }\n@@ -81,0 +86,5 @@\n+    if (JNI_FUNC_PTR(env,ExceptionCheck)(env)) {\n+        JNI_FUNC_PTR(env,ExceptionClear)(env); \/\/ keep -Xcheck:jni happy\n+        ERROR_MESSAGE((\"JNI Exception occurred calling ClassLoader.getClassLoader()\"));\n+        EXIT_ERROR(AGENT_ERROR_JNI_EXCEPTION, NULL);\n+    }\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/ModuleReferenceImpl.c","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -684,11 +684,2 @@\n-    \/* Always restore any exception that was set beforehand.  If\n-     * there is a pending async exception, StopThread will be\n-     * called from threadControl_onEventHandlerExit immediately\n-     * below.  Depending on VM implementation and state, the async\n-     * exception might immediately overwrite the currentException,\n-     * or it might be delayed until later.  *\/\n-    if (currentException != NULL) {\n-        JNI_FUNC_PTR(env,Throw)(env, currentException);\n-    } else {\n-        JNI_FUNC_PTR(env,ExceptionClear)(env);\n-    }\n+    \/* Clear any exception thrown while handling the event. *\/\n+    JNI_FUNC_PTR(env,ExceptionClear)(env);\n@@ -700,1 +691,1 @@\n-        threadControl_onEventHandlerExit(evinfo->ei, thread, eventBag);\n+        threadControl_onEventHandlerExit(evinfo->ei, thread, eventBag, currentException);\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/eventHandler.c","additions":3,"deletions":12,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -341,0 +341,16 @@\n+static void\n+saveGlobalRefHelper(JNIEnv *env, jobject obj, jobject *pobj)\n+{\n+    \/\/ In order to keep -Xcheck:jni happy, we have to clear any pending\n+    \/\/ exception before calling saveGlobalRef(). We also need to restore\n+    \/\/ it for the caller of this function.\n+    jthrowable exception = JNI_FUNC_PTR(env,ExceptionOccurred)(env);\n+    if (exception != NULL) {\n+        JNI_FUNC_PTR(env,ExceptionClear)(env);\n+    }\n+    saveGlobalRef(env, obj, pobj);\n+    if (exception != NULL) {\n+        JNI_FUNC_PTR(env,Throw)(env, exception);\n+    }\n+}\n+\n@@ -352,1 +368,1 @@\n-        saveGlobalRef(env, object, &(request->returnValue.l));\n+        saveGlobalRefHelper(env, object, &(request->returnValue.l));\n@@ -370,1 +386,1 @@\n-            saveGlobalRef(env, object, &(request->returnValue.l));\n+            saveGlobalRefHelper(env, object, &(request->returnValue.l));\n@@ -458,1 +474,1 @@\n-            saveGlobalRef(env, object, &(request->returnValue.l));\n+            saveGlobalRefHelper(env, object, &(request->returnValue.l));\n@@ -548,1 +564,2 @@\n-            saveGlobalRef(env, object, &(request->returnValue.l));\n+            JDI_ASSERT_MSG(JNI_FALSE, \"invokeNonvirtual with Object returned type\");\n+            saveGlobalRefHelper(env, object, &(request->returnValue.l));\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/invoker.c","additions":21,"deletions":4,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2144,1 +2144,1 @@\n-                                 struct bag *eventBag)\n+                                 struct bag *eventBag, jobject currentException)\n@@ -2181,0 +2181,11 @@\n+        if (currentException != NULL) {\n+            \/\/ We need to rethrow the exception that was current when we received the\n+            \/\/ JVMTI event. If there is a pending async exception, StopThread will be\n+            \/\/ called from doPendingTasks() immediately below. Depending on the VM\n+            \/\/ implementation and state, the async exception might immediately overwrite\n+            \/\/ the currentException, or it might be delayed until later.\n+            \/\/\n+            \/\/ Note in order the keep the JNI Checker happy, we had to delay doing this\n+            \/\/ until now. Otherwise there are complaints when JNI IsVirtualThread is called.\n+            JNI_FUNC_PTR(env,Throw)(env, currentException);\n+        }\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/threadControl.c","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,2 +44,1 @@\n-void threadControl_onEventHandlerExit(EventIndex ei, jthread thread, struct bag *);\n-\n+void threadControl_onEventHandlerExit(EventIndex ei, jthread thread, struct bag *, jobject currentException);\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/threadControl.h","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -104,4 +104,0 @@\n-    if (x == NULL) {\n-        ERROR_MESSAGE((\"JDWP Can't find class %s\", name));\n-        EXIT_ERROR(AGENT_ERROR_NULL_POINTER,NULL);\n-    }\n@@ -109,2 +105,3 @@\n-        ERROR_MESSAGE((\"JDWP Exception occurred finding class %s\", name));\n-        EXIT_ERROR(AGENT_ERROR_NULL_POINTER,NULL);\n+        JNI_FUNC_PTR(env,ExceptionClear)(env); \/\/ keep -Xcheck:jni happy\n+        ERROR_MESSAGE((\"JNI Exception occurred finding class %s\", name));\n+        EXIT_ERROR(AGENT_ERROR_JNI_EXCEPTION,NULL);\n@@ -133,5 +130,0 @@\n-    if (method == NULL) {\n-        ERROR_MESSAGE((\"JDWP Can't find method %s with signature %s\",\n-                                name, signature));\n-        EXIT_ERROR(AGENT_ERROR_NULL_POINTER,NULL);\n-    }\n@@ -139,3 +131,4 @@\n-        ERROR_MESSAGE((\"JDWP Exception occurred finding method %s with signature %s\",\n-                                name, signature));\n-        EXIT_ERROR(AGENT_ERROR_NULL_POINTER,NULL);\n+        JNI_FUNC_PTR(env,ExceptionClear)(env); \/\/ keep -Xcheck:jni happy\n+        ERROR_MESSAGE((\"JNI Exception occurred finding method %s with signature %s\",\n+                       name, signature));\n+        EXIT_ERROR(AGENT_ERROR_JNI_EXCEPTION,NULL);\n@@ -164,5 +157,0 @@\n-    if (method == NULL) {\n-        ERROR_MESSAGE((\"JDWP Can't find method %s with signature %s\",\n-                                name, signature));\n-        EXIT_ERROR(AGENT_ERROR_NULL_POINTER,NULL);\n-    }\n@@ -170,0 +158,1 @@\n+        JNI_FUNC_PTR(env,ExceptionClear)(env); \/\/ keep -Xcheck:jni happy\n@@ -171,2 +160,2 @@\n-                                name, signature));\n-        EXIT_ERROR(AGENT_ERROR_NULL_POINTER,NULL);\n+                       name, signature));\n+        EXIT_ERROR(AGENT_ERROR_JNI_EXCEPTION,NULL);\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/util.c","additions":10,"deletions":21,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -119,0 +119,1 @@\n+                return;\n@@ -126,0 +127,3 @@\n+        if (env->ExceptionCheck()) {\n+          return;\n+        }\n@@ -127,1 +131,1 @@\n-        \/\/ wait till JNI local reference can be released (it will heppen then we will leave the method)\n+        \/\/ wait till JNI local reference can be released (it will happen then we will leave the method)\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jni\/JNIreferences.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,4 @@\n+        if (env->ExceptionOccurred()) {\n+                env->ExceptionDescribe();\n+                env->FatalError(\"ERROR: Failed to log message.\");\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jpda\/libNativeMethodsTestThread.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -69,0 +69,1 @@\n+                return;\n@@ -81,0 +82,3 @@\n+        if (env->ExceptionOccurred()) {\n+                return;\n+        }\n@@ -88,0 +92,3 @@\n+        if (env->ExceptionOccurred()) {\n+                return;\n+        }\n@@ -95,0 +102,3 @@\n+        if (env->ExceptionOccurred()) {\n+                return;\n+        }\n@@ -103,0 +113,3 @@\n+        if (env->ExceptionOccurred()) {\n+                return;\n+        }\n@@ -105,0 +118,3 @@\n+        if (env->ExceptionOccurred()) {\n+                return;\n+        }\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/locks\/JNIMonitorLocker.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}