{"files":[{"patch":"@@ -937,1 +937,1 @@\n-BoolNode* VPointer::make_speculative_aliasing_check_with(const VPointer& other) const {\n+BoolNode* VPointer::make_speculative_aliasing_check_with(const VPointer& other, Node* ctrl) const {\n@@ -974,2 +974,2 @@\n-  Node* p1_init = vp1.make_pointer_expression(main_init);\n-  Node* p2_init = vp2.make_pointer_expression(main_init);\n+  Node* p1_init = vp1.make_pointer_expression(main_init, ctrl);\n+  Node* p2_init = vp2.make_pointer_expression(main_init, ctrl);\n@@ -1095,1 +1095,7 @@\n-Node* VPointer::make_pointer_expression(Node* iv_value) const {\n+\/\/ Creates the long pointer expression, evaluated with iv = iv_value.\n+\/\/ Since we are casting pointers to long with CastP2X, we must be careful\n+\/\/ that the values do not cross SafePoints, where the oop could be moved\n+\/\/ by GC, and the already cast value would not be updated, as it is not in\n+\/\/ the oop-map. For this, we must set a ctrl that is late enough, so that we\n+\/\/ cannot cross a SafePoint.\n+Node* VPointer::make_pointer_expression(Node* iv_value, Node* ctrl) const {\n@@ -1101,1 +1107,0 @@\n-  Node* ctrl = phase->get_ctrl(iv_value);\n@@ -1123,1 +1128,3 @@\n-        variable = new CastP2XNode(nullptr, variable);\n+        \/\/ Make sure that ctlr is late enough, so that we do not\n+        \/\/ evaluate the cast before a SafePoint.\n+        variable = new CastP2XNode(ctrl, variable);\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1016,2 +1016,2 @@\n-  Node* make_pointer_expression(Node* iv_value) const;\n-  BoolNode* make_speculative_aliasing_check_with(const VPointer& other) const;\n+  Node* make_pointer_expression(Node* iv_value, Node* ctrl) const;\n+  BoolNode* make_speculative_aliasing_check_with(const VPointer& other, Node* ctrl) const;\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -220,1 +220,1 @@\n-  add_speculative_check(bol_alignment);\n+  add_speculative_check([&] (Node* ctrl) { return bol_alignment; });\n@@ -392,2 +392,3 @@\n-      BoolNode* bol = vp1_union.make_speculative_aliasing_check_with(vp2_union);\n-      add_speculative_check(bol);\n+      add_speculative_check([&] (Node* ctrl) {\n+        return vp1_union.make_speculative_aliasing_check_with(vp2_union, ctrl);\n+      });\n@@ -423,1 +424,7 @@\n-void VTransform::add_speculative_check(BoolNode* bol) {\n+\/\/\n+\/\/ Callback:\n+\/\/   In some cases, we require the ctrl just before the check iff_speculate to\n+\/\/   generate the values required in the check. We pass this ctrl into the\n+\/\/   callback, which is expected to produce the check, i.e. a BoolNode.\n+template<typename Callback>\n+void VTransform::add_speculative_check(Callback callback) {\n@@ -435,0 +442,4 @@\n+\n+  \/\/ Create the check, given the ctrl just before the iff.\n+  BoolNode* bol = callback(iff_speculate->in(0));\n+\n","filename":"src\/hotspot\/share\/opto\/vtransform.cpp","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -258,1 +258,3 @@\n-  void add_speculative_check(BoolNode* bol);\n+\n+  template<typename Callback>\n+  void add_speculative_check(Callback callback);\n","filename":"src\/hotspot\/share\/opto\/vtransform.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test id=all-flags\n+ * @bug 8366490\n+ * @summary Test that we set the ctrl of CastP2X when generating\n+ *          the aliasing runtime check, preventing the CastP2X\n+ *          from floating over a SafePoint that could move the oop,\n+ *          and render the cast value stale.\n+ *\n+ * @run main\/othervm\n+ *      -XX:+IgnoreUnrecognizedVMOptions\n+ *      -XX:CompileCommand=compileonly,*TestAliasingCastP2XCtrl::test\n+ *      -XX:CompileCommand=dontinline,*TestAliasingCastP2XCtrl::allocateArrays\n+ *      -XX:-TieredCompilation\n+ *      -Xbatch\n+ *      -XX:+UseG1GC\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM\n+ *      compiler.loopopts.superword.TestAliasingCastP2XCtrl\n+ *\/\n+\n+\/*\n+ * @test id=fewer-flags\n+ * @bug 8366490\n+ * @run main\/othervm\n+ *      -XX:+IgnoreUnrecognizedVMOptions\n+ *      -XX:CompileCommand=compileonly,*TestAliasingCastP2XCtrl::test\n+ *      -XX:CompileCommand=dontinline,*TestAliasingCastP2XCtrl::allocateArrays\n+ *      -Xbatch\n+ *      -XX:+UnlockDiagnosticVMOptions -XX:+StressGCM\n+ *      compiler.loopopts.superword.TestAliasingCastP2XCtrl\n+ *\/\n+\n+\/*\n+ * @test id=vanilla\n+ * @bug 8366490\n+ * @run driver compiler.loopopts.superword.TestAliasingCastP2XCtrl\n+ *\/\n+\n+package compiler.loopopts.superword;\n+\n+public class TestAliasingCastP2XCtrl {\n+    static final int N = 400;\n+    static boolean flag = false;\n+\n+    static void allocateArrays() {\n+        for (int i = 0; 200_000 > i; ++i) {\n+            int[] a = new int[N];\n+        }\n+        \/\/ Makes GC more likely.\n+        \/\/ Without it I could not reproduce it on slowdebug,\n+        \/\/ but only with fastdebug.\n+        if (flag) { System.gc(); }\n+        flag = !flag;\n+    }\n+\n+    static int[] test() {\n+        int a[] = new int[N];\n+        \/\/ We must make sure that no CastP2X happens before\n+        \/\/ the call below, otherwise we may have an old oop.\n+        allocateArrays();\n+        \/\/ The CastP2X for the aliasing runtime check should\n+        \/\/ only be emitted after the call, to ensure we only\n+        \/\/ deal with oops that are updated if there is a GC\n+        \/\/ that could move our allocated array.\n+\n+        \/\/ Not fully sure why we need the outer loop, but maybe\n+        \/\/ it is needed so that a part of the check is hoisted,\n+        \/\/ and the floats up, over the call if we do not set\n+        \/\/ the ctrl.\n+        for (int k = 0; k < 500; k++) {\n+            for (int i = 1; i < 69; i++) {\n+                \/\/ Aliasing references -> needs runtime check,\n+                \/\/ should always fail.\n+                a[i] =  14;\n+                a[4] -= 14;\n+                \/\/ The range computation for the constant access\n+                \/\/ produces a shape:\n+                \/\/   AddL(CastP2X(a), 0x20)\n+                \/\/ And this shape only depends on a, so it could\n+                \/\/ easily float above the call to allocateArrays\n+                \/\/ if we do not set a ctrl that prevents that.\n+            }\n+        }\n+        return a;\n+    }\n+\n+    public static void main(String[] args) {\n+        int[] gold = test();\n+        for (int r = 0; r < 20; r++) {\n+            int[] a = test();\n+            if (a[4] != gold[4]) {\n+                throw new RuntimeException(\"wrong value \" + gold[4] + \" \" + a[4]);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/superword\/TestAliasingCastP2XCtrl.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}