{"files":[{"patch":"@@ -107,2 +107,2 @@\n-Thread* VMError::_handshake_timed_out_thread = nullptr;\n-Thread* VMError::_safepoint_timed_out_thread = nullptr;\n+Thread* volatile VMError::_handshake_timed_out_thread = nullptr;\n+Thread* volatile VMError::_safepoint_timed_out_thread = nullptr;\n@@ -1342,2 +1342,5 @@\n-  _handshake_timed_out_thread = thread;\n-  OrderAccess::fence();\n+  \/\/ Atomic::replace_if_null() operation is used to discard all possible \n+  \/\/ updates except the 1st one. Those can hypothetically happen\n+  \/\/ if more than one thread times out. \n+  \/\/ The default memory ordering guarantees visibility to other threads.\n+  Atomic::replace_if_null(&_handshake_timed_out_thread, thread);\n@@ -1347,2 +1350,1 @@\n-  _safepoint_timed_out_thread = thread;\n-  OrderAccess::fence();\n+  Atomic::replace_if_null(&_safepoint_timed_out_thread, thread);\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -146,2 +146,2 @@\n-  static Thread* _handshake_timed_out_thread;\n-  static Thread* _safepoint_timed_out_thread;\n+  static Thread* volatile _handshake_timed_out_thread;\n+  static Thread* volatile _safepoint_timed_out_thread;\n","filename":"src\/hotspot\/share\/utilities\/vmError.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}