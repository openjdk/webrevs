{"files":[{"patch":"@@ -353,0 +353,3 @@\n+JNIEXPORT jobject JNICALL\n+JVM_ReferenceGet(JNIEnv *env, jobject ref);\n+\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3034,0 +3034,8 @@\n+JVM_ENTRY(jobject, JVM_ReferenceGet(JNIEnv* env, jobject ref))\n+  oop ref_oop = JNIHandles::resolve_non_null(ref);\n+  \/\/ PhantomReference has its own implementation of get().\n+  assert(!java_lang_ref_Reference::is_phantom(ref_oop), \"precondition\");\n+  oop referent = java_lang_ref_Reference::weak_referent(ref_oop);\n+  return JNIHandles::make_local(THREAD, referent);\n+JVM_END\n+\n@@ -3036,1 +3044,1 @@\n-  \/\/ PhantomReference has it's own implementation of refersTo().\n+  \/\/ PhantomReference has its own implementation of refersTo().\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -357,1 +357,1 @@\n-        return this.referent;\n+        return get0();\n@@ -360,0 +360,5 @@\n+    \/* Implementation of unintrinsified get().  Making get() native may lead\n+     * C2 to sometimes prefer the native implementation over the intrinsic.\n+     *\/\n+    private native T get0();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,6 @@\n+JNIEXPORT jobject JNICALL\n+Java_java_lang_ref_Reference_get0(JNIEnv *env, jobject ref)\n+{\n+    return JVM_ReferenceGet(env, ref);\n+}\n+\n","filename":"src\/java.base\/share\/native\/libjava\/Reference.c","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,177 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc;\n+\n+\/**\n+ * @test\n+ * @bug 8352565\n+ * @summary Determine whether the native method implementation of\n+ * Reference.get() works as expected.  Disable the intrinsic implementation to\n+ * force use of the native method.\n+ * @library \/test\/lib\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\n+ *    -Xbootclasspath\/a:.\n+ *    -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *    -XX:DisableIntrinsic=_Reference_get\n+ *    TestNativeReferenceGet\n+ *\/\n+\n+import jdk.test.whitebox.WhiteBox;\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+public final class TestNativeReferenceGet {\n+\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    private static void gcUntilOld(Object o) {\n+        while (!WB.isObjectInOldGen(o)) {\n+            WB.fullGC();\n+        }\n+    }\n+\n+    private static final class TestObject {\n+        public final int value;\n+\n+        public TestObject(int value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    private static final ReferenceQueue<TestObject> queue =\n+        new ReferenceQueue<TestObject>();\n+\n+    private static final class Ref extends WeakReference<TestObject> {\n+        public Ref(TestObject obj) {\n+            super(obj, queue);\n+        }\n+    }\n+\n+    private static final int NUM_REFS = 100;\n+\n+    private static List<Ref> references = null;\n+    private static List<TestObject> referents = null;\n+\n+    \/\/ Create all the objects used by the test, and ensure they are all in the\n+    \/\/ old generation.\n+    private static void setup() {\n+        references = new ArrayList<Ref>(NUM_REFS);\n+        referents = new ArrayList<TestObject>(NUM_REFS);\n+\n+        for (int i = 0; i < NUM_REFS; ++i) {\n+            TestObject obj = new TestObject(i);\n+            referents.add(obj);\n+            references.add(new Ref(obj));\n+        }\n+\n+        gcUntilOld(references);\n+        gcUntilOld(referents);\n+        for (int i = 0; i < NUM_REFS; ++i) {\n+            gcUntilOld(references.get(i));\n+            gcUntilOld(referents.get(i));\n+        }\n+    }\n+\n+    \/\/ Discard all the strong references.\n+    private static void clearReferents() {\n+        \/\/ Not using List.clear() because it doesn't document null'ing elements.\n+        for (int i = 0; i < NUM_REFS; ++i) {\n+            referents.set(i, null);\n+        }\n+    }\n+\n+    \/\/ Create new strong references from the weak references, by using the\n+    \/\/ native method implementation of Reference.get() and recording the value\n+    \/\/ in references.\n+    private static void strengthenReferents() {\n+        for (int i = 0; i < NUM_REFS; ++i) {\n+            referents.set(i, references.get(i).get());\n+        }\n+    }\n+\n+    private static final long TIMEOUT = 10 * 1000; \/\/ 10 seconds, in millis.\n+\n+    private static void check() {\n+        \/\/ None of the references should have been cleared and enqueued,\n+        \/\/ because we have strong references to all the referents.\n+        try {\n+            if (queue.remove(TIMEOUT) != null) {\n+                throw new RuntimeException(\"Reference enqueued\");\n+            }\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Test interrupted\");\n+        }\n+        \/\/ Check details of expected state.\n+        for (int i = 0; i < NUM_REFS; ++i) {\n+            Ref reference = (Ref) references.get(i);\n+            TestObject referent = reference.get();\n+            if (referent == null) {\n+                throw new RuntimeException(\"Referent not strengthened\");\n+            } else if (referent != referents.get(i)) {\n+                throw new RuntimeException(\n+                    \"Reference referent differs from saved referent: \" + i);\n+            } else if (referent.value != i) {\n+                throw new RuntimeException(\n+                    \"Referent \" + i + \" value: \" + referent.value);\n+            }\n+        }\n+    }\n+\n+    private static void testConcurrent() {\n+        System.out.println(\"Testing concurrent GC\");\n+        try {\n+            WB.concurrentGCAcquireControl();\n+            clearReferents();\n+            WB.concurrentGCRunTo(WB.BEFORE_MARKING_COMPLETED);\n+            strengthenReferents();\n+            WB.concurrentGCRunToIdle();\n+            check();\n+        } finally {\n+            WB.concurrentGCReleaseControl();\n+        }\n+    }\n+\n+    private static void testNonconcurrent() {\n+        System.out.println(\"Testing nonconcurrent GC\");\n+        clearReferents();\n+        strengthenReferents();\n+        WB.fullGC();\n+        check();\n+    }\n+\n+    public static final void main(String[] args) {\n+        setup();\n+        if (WB.supportsConcurrentGCBreakpoints()) {\n+            testConcurrent();\n+        } else {\n+            testNonconcurrent();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/TestNativeReferenceGet.java","additions":177,"deletions":0,"binary":false,"changes":177,"status":"added"}]}