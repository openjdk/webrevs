{"files":[{"patch":"@@ -145,1 +145,1 @@\n-  case vmIntrinsics::_Reference_get:\n+  case vmIntrinsics::_Reference_get0:\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3344,1 +3344,1 @@\n-  case vmIntrinsics::_Reference_get:\n+  case vmIntrinsics::_Reference_get0:\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1188,1 +1188,1 @@\n-void LIRGenerator::do_Reference_get(Intrinsic* x) {\n+void LIRGenerator::do_Reference_get0(Intrinsic* x) {\n@@ -2917,2 +2917,2 @@\n-  case vmIntrinsics::_Reference_get:\n-    do_Reference_get(x);\n+  case vmIntrinsics::_Reference_get0:\n+    do_Reference_get0(x);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-  void do_Reference_get(Intrinsic* x);\n+  void do_Reference_get0(Intrinsic* x);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-  case vmIntrinsics::_Reference_get:\n+  case vmIntrinsics::_Reference_get0:\n@@ -247,1 +247,1 @@\n-    case vmIntrinsics::_Reference_get:\n+    case vmIntrinsics::_Reference_get0:\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-  do_intrinsic(_Reference_get,              java_lang_ref_Reference, get_name,       void_object_signature,    F_R)     \\\n+  do_intrinsic(_Reference_get0,             java_lang_ref_Reference, get0_name,      void_object_signature,    F_RN)    \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -425,1 +425,1 @@\n-  template(get_name,                                  \"get\")                                      \\\n+  template(get0_name,                                 \"get0\")                                     \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -356,0 +356,3 @@\n+JNIEXPORT jobject JNICALL\n+JVM_ReferenceGet(JNIEnv *env, jobject ref);\n+\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-      case vmIntrinsics::_Reference_get:     return java_lang_ref_reference_get;\n+      case vmIntrinsics::_Reference_get0:    return java_lang_ref_reference_get0;\n@@ -213,1 +213,1 @@\n-  case java_lang_ref_reference_get: return vmIntrinsics::_Reference_get;\n+  case java_lang_ref_reference_get0: return vmIntrinsics::_Reference_get0;\n@@ -323,1 +323,1 @@\n-    case java_lang_ref_reference_get          : tty->print(\"java_lang_ref_reference_get\"); break;\n+    case java_lang_ref_reference_get0         : tty->print(\"java_lang_ref_reference_get0\"); break;\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    java_lang_ref_reference_get,                                \/\/ implementation of java.lang.ref.Reference.get()\n+    java_lang_ref_reference_get0,                               \/\/ implementation of java.lang.ref.Reference.get()\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-  method_entry(java_lang_ref_reference_get)\n+  method_entry(java_lang_ref_reference_get0)\n@@ -231,0 +231,1 @@\n+  native_method_entry(java_lang_ref_reference_get0)\n@@ -468,1 +469,1 @@\n-  case Interpreter::java_lang_ref_reference_get\n+  case Interpreter::java_lang_ref_reference_get0\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    method_entry(java_lang_ref_reference_get);\n+    method_entry(java_lang_ref_reference_get0);\n@@ -110,1 +110,1 @@\n-  case Interpreter::java_lang_ref_reference_get\n+  case Interpreter::java_lang_ref_reference_get0\n","filename":"src\/hotspot\/share\/interpreter\/zero\/zeroInterpreterGenerator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -770,1 +770,1 @@\n-  case vmIntrinsics::_Reference_get:\n+  case vmIntrinsics::_Reference_get0:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -786,13 +786,3 @@\n-      if (method()->intrinsic_id() == vmIntrinsics::_Reference_get) {\n-        \/\/ With java.lang.ref.reference.get() we must go through the\n-        \/\/ intrinsic - even when get() is the root\n-        \/\/ method of the compile - so that, if necessary, the value in\n-        \/\/ the referent field of the reference object gets recorded by\n-        \/\/ the pre-barrier code.\n-        cg = find_intrinsic(method(), false);\n-      }\n-      if (cg == nullptr) {\n-        float past_uses = method()->interpreter_invocation_count();\n-        float expected_uses = past_uses;\n-        cg = CallGenerator::for_inline(method(), expected_uses);\n-      }\n+      float past_uses = method()->interpreter_invocation_count();\n+      float expected_uses = past_uses;\n+      cg = CallGenerator::for_inline(method(), expected_uses);\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -567,1 +567,1 @@\n-  case vmIntrinsics::_Reference_get:            return inline_reference_get();\n+  case vmIntrinsics::_Reference_get0:           return inline_reference_get0();\n@@ -6921,1 +6921,1 @@\n-\/\/----------------------------inline_reference_get----------------------------\n+\/\/----------------------------inline_reference_get0----------------------------\n@@ -6923,1 +6923,1 @@\n-bool LibraryCallKit::inline_reference_get() {\n+bool LibraryCallKit::inline_reference_get0() {\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-  bool inline_reference_get();\n+  bool inline_reference_get0();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3043,0 +3043,8 @@\n+JVM_ENTRY(jobject, JVM_ReferenceGet(JNIEnv* env, jobject ref))\n+  oop ref_oop = JNIHandles::resolve_non_null(ref);\n+  \/\/ PhantomReference has its own implementation of get().\n+  assert(!java_lang_ref_Reference::is_phantom(ref_oop), \"precondition\");\n+  oop referent = java_lang_ref_Reference::weak_referent(ref_oop);\n+  return JNIHandles::make_local(THREAD, referent);\n+JVM_END\n+\n@@ -3045,1 +3053,1 @@\n-  \/\/ PhantomReference has it's own implementation of refersTo().\n+  \/\/ PhantomReference has its own implementation of refersTo().\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -360,1 +360,0 @@\n-    @IntrinsicCandidate\n@@ -362,1 +361,1 @@\n-        return this.referent;\n+        return get0();\n@@ -365,0 +364,8 @@\n+    \/* Implementation of get().  This method exists to avoid making get() all\n+     * of virtual, native, and intrinsic candidate. That could have the\n+     * undesirable effect of having the native method used instead of the\n+     * intrinsic when devirtualization fails.\n+     *\/\n+    @IntrinsicCandidate\n+    private native T get0();\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,6 @@\n+JNIEXPORT jobject JNICALL\n+Java_java_lang_ref_Reference_get0(JNIEnv *env, jobject ref)\n+{\n+    return JVM_ReferenceGet(env, ref);\n+}\n+\n","filename":"src\/java.base\/share\/native\/libjava\/Reference.c","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,181 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc;\n+\n+\/**\n+ * @test\n+ * @bug 8352565\n+ * @summary Determine whether the native method implementation of\n+ * Reference.get() works as expected.  Disable the intrinsic implementation to\n+ * force use of the native method.\n+ * @library \/test\/lib\n+ * @modules java.base\/java.lang.ref:open\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm\n+ *    -Xbootclasspath\/a:.\n+ *    -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *    -XX:DisableIntrinsic=_Reference_get0\n+ *    gc.TestNativeReferenceGet\n+ *\/\n+\n+import java.lang.ref.ReferenceQueue;\n+import java.lang.ref.WeakReference;\n+import java.util.ArrayList;\n+import java.util.List;\n+import jdk.test.whitebox.WhiteBox;\n+\n+public final class TestNativeReferenceGet {\n+\n+    private static final WhiteBox WB = WhiteBox.getWhiteBox();\n+\n+    private static void gcUntilOld(Object o) {\n+        while (!WB.isObjectInOldGen(o)) {\n+            WB.fullGC();\n+        }\n+    }\n+\n+    private static final class TestObject {\n+        public final int value;\n+\n+        public TestObject(int value) {\n+            this.value = value;\n+        }\n+    }\n+\n+    private static final ReferenceQueue<TestObject> queue =\n+        new ReferenceQueue<TestObject>();\n+\n+    private static final class Ref extends WeakReference<TestObject> {\n+        public Ref(TestObject obj) {\n+            super(obj, queue);\n+        }\n+    }\n+\n+    private static final int NUM_REFS = 100;\n+\n+    private static List<Ref> references = null;\n+    private static List<TestObject> referents = null;\n+\n+    \/\/ Create all the objects used by the test, and ensure they are all in the\n+    \/\/ old generation.\n+    private static void setup() {\n+        references = new ArrayList<Ref>(NUM_REFS);\n+        referents = new ArrayList<TestObject>(NUM_REFS);\n+\n+        for (int i = 0; i < NUM_REFS; ++i) {\n+            TestObject obj = new TestObject(i);\n+            referents.add(obj);\n+            references.add(new Ref(obj));\n+        }\n+\n+        gcUntilOld(references);\n+        gcUntilOld(referents);\n+        for (int i = 0; i < NUM_REFS; ++i) {\n+            gcUntilOld(references.get(i));\n+            gcUntilOld(referents.get(i));\n+        }\n+    }\n+\n+    \/\/ Discard all the strong references.\n+    private static void dropReferents() {\n+        \/\/ Not using List.clear() because it doesn't document null'ing elements.\n+        for (int i = 0; i < NUM_REFS; ++i) {\n+            referents.set(i, null);\n+        }\n+    }\n+\n+    \/\/ Create new strong references from the weak references, by using the\n+    \/\/ native method implementation of Reference.get() and recording the value\n+    \/\/ in references.\n+    private static void strengthenReferents() {\n+        for (int i = 0; i < NUM_REFS; ++i) {\n+            referents.set(i, references.get(i).get());\n+        }\n+    }\n+\n+    private static void check() {\n+        \/\/ None of the references should have been cleared and enqueued,\n+        \/\/ because we have strong references to all the referents.\n+        try {\n+            while (WB.waitForReferenceProcessing()) {}\n+        } catch (InterruptedException e) {\n+            throw new RuntimeException(\"Test interrupted\");\n+        }\n+        if (queue.poll() != null) {\n+            throw new RuntimeException(\"Reference enqueued\");\n+        }\n+\n+        \/\/ Check details of expected state.\n+        for (int i = 0; i < NUM_REFS; ++i) {\n+            Ref reference = (Ref) references.get(i);\n+            TestObject referent = reference.get();\n+            if (referent == null) {\n+                throw new RuntimeException(\"Referent not strengthened\");\n+            } else if (referent != referents.get(i)) {\n+                throw new RuntimeException(\n+                    \"Reference referent differs from saved referent: \" + i);\n+            } else if (referent.value != i) {\n+                throw new RuntimeException(\n+                    \"Referent \" + i + \" value: \" + referent.value);\n+            }\n+        }\n+    }\n+\n+    private static void testConcurrent() {\n+        System.out.println(\"Testing concurrent GC\");\n+        try {\n+            WB.concurrentGCAcquireControl();\n+            dropReferents();\n+            WB.concurrentGCRunTo(WB.BEFORE_MARKING_COMPLETED);\n+            strengthenReferents();\n+            WB.concurrentGCRunToIdle();\n+            check();\n+        } finally {\n+            WB.concurrentGCReleaseControl();\n+        }\n+    }\n+\n+    private static void testNonconcurrent() {\n+        System.out.println(\"Testing nonconcurrent GC\");\n+        \/\/ A GC between clearing and strengthening will result in test failure.\n+        \/\/ We try to make that unlikely via this immediately preceeding GC.\n+        WB.fullGC();\n+        dropReferents();\n+        strengthenReferents();\n+        WB.fullGC();\n+        check();\n+    }\n+\n+    public static final void main(String[] args) {\n+        setup();\n+        if (WB.supportsConcurrentGCBreakpoints()) {\n+            testConcurrent();\n+        } else {\n+            testNonconcurrent();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/TestNativeReferenceGet.java","additions":181,"deletions":0,"binary":false,"changes":181,"status":"added"}]}