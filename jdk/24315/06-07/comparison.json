{"files":[{"patch":"@@ -145,1 +145,1 @@\n-  case vmIntrinsics::_Reference_get:\n+  case vmIntrinsics::_Reference_get0:\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3344,1 +3344,1 @@\n-  case vmIntrinsics::_Reference_get:\n+  case vmIntrinsics::_Reference_get0:\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1188,1 +1188,1 @@\n-void LIRGenerator::do_Reference_get(Intrinsic* x) {\n+void LIRGenerator::do_Reference_get0(Intrinsic* x) {\n@@ -2917,2 +2917,2 @@\n-  case vmIntrinsics::_Reference_get:\n-    do_Reference_get(x);\n+  case vmIntrinsics::_Reference_get0:\n+    do_Reference_get0(x);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -269,1 +269,1 @@\n-  void do_Reference_get(Intrinsic* x);\n+  void do_Reference_get0(Intrinsic* x);\n","filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-  case vmIntrinsics::_Reference_get:\n+  case vmIntrinsics::_Reference_get0:\n@@ -247,1 +247,1 @@\n-    case vmIntrinsics::_Reference_get:\n+    case vmIntrinsics::_Reference_get0:\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-  do_intrinsic(_Reference_get,              java_lang_ref_Reference, get_name,       void_object_signature,    F_R)     \\\n+  do_intrinsic(_Reference_get0,             java_lang_ref_Reference, get0_name,      void_object_signature,    F_RN)    \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -425,1 +425,1 @@\n-  template(get_name,                                  \"get\")                                      \\\n+  template(get0_name,                                 \"get0\")                                     \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -151,1 +151,1 @@\n-      case vmIntrinsics::_Reference_get:     return java_lang_ref_reference_get;\n+      case vmIntrinsics::_Reference_get0:    return java_lang_ref_reference_get0;\n@@ -213,1 +213,1 @@\n-  case java_lang_ref_reference_get: return vmIntrinsics::_Reference_get;\n+  case java_lang_ref_reference_get0: return vmIntrinsics::_Reference_get0;\n@@ -323,1 +323,1 @@\n-    case java_lang_ref_reference_get          : tty->print(\"java_lang_ref_reference_get\"); break;\n+    case java_lang_ref_reference_get0         : tty->print(\"java_lang_ref_reference_get0\"); break;\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-    java_lang_ref_reference_get,                                \/\/ implementation of java.lang.ref.Reference.get()\n+    java_lang_ref_reference_get0,                                \/\/ implementation of java.lang.ref.Reference.get()\n","filename":"src\/hotspot\/share\/interpreter\/abstractInterpreter.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-  method_entry(java_lang_ref_reference_get)\n+  method_entry(java_lang_ref_reference_get0)\n@@ -468,1 +468,1 @@\n-  case Interpreter::java_lang_ref_reference_get\n+  case Interpreter::java_lang_ref_reference_get0\n","filename":"src\/hotspot\/share\/interpreter\/templateInterpreterGenerator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    method_entry(java_lang_ref_reference_get);\n+    method_entry(java_lang_ref_reference_get0);\n@@ -110,1 +110,1 @@\n-  case Interpreter::java_lang_ref_reference_get\n+  case Interpreter::java_lang_ref_reference_get0\n","filename":"src\/hotspot\/share\/interpreter\/zero\/zeroInterpreterGenerator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -770,1 +770,1 @@\n-  case vmIntrinsics::_Reference_get:\n+  case vmIntrinsics::_Reference_get0:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -786,8 +786,0 @@\n-      if (method()->intrinsic_id() == vmIntrinsics::_Reference_get) {\n-        \/\/ With java.lang.ref.reference.get() we must go through the\n-        \/\/ intrinsic - even when get() is the root\n-        \/\/ method of the compile - so that, if necessary, the value in\n-        \/\/ the referent field of the reference object gets recorded by\n-        \/\/ the pre-barrier code.\n-        cg = find_intrinsic(method(), false);\n-      }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -567,1 +567,1 @@\n-  case vmIntrinsics::_Reference_get:            return inline_reference_get();\n+  case vmIntrinsics::_Reference_get0:           return inline_reference_get0();\n@@ -6917,1 +6917,1 @@\n-\/\/----------------------------inline_reference_get----------------------------\n+\/\/----------------------------inline_reference_get0----------------------------\n@@ -6919,1 +6919,1 @@\n-bool LibraryCallKit::inline_reference_get() {\n+bool LibraryCallKit::inline_reference_get0() {\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -303,1 +303,1 @@\n-  bool inline_reference_get();\n+  bool inline_reference_get0();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -360,1 +360,0 @@\n-    @IntrinsicCandidate\n@@ -365,2 +364,4 @@\n-    \/* Implementation of unintrinsified get().  Making get() native may lead\n-     * C2 to sometimes prefer the native implementation over the intrinsic.\n+    \/* Implementation of get().  This method exists to avoid making get() all\n+     * of virtual, native, and intrinsic candidate. That could have the\n+     * undesirable effect of having the native method used instead of the\n+     * intrinsic when devirtualization fails.\n@@ -368,0 +369,1 @@\n+    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ref\/Reference.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- *    -XX:DisableIntrinsic=_Reference_get\n+ *    -XX:DisableIntrinsic=_Reference_get0\n","filename":"test\/hotspot\/jtreg\/gc\/TestNativeReferenceGet.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}