{"files":[{"patch":"@@ -65,0 +65,70 @@\n+    StateType leqA_state = leqA_n->val().out.type();\n+    StateType new_state = stA.out.type();\n+    \/\/ Table of states and copy_flag permutations. '..' means 'the same as above line'.\n+    \/\/   #  leqA_state new_state  copy_flag   meaning                                 comments                    visibility   VMATree::xxx()\n+    \/\/   1  Reserved   Reserved     true      re-reserving a region                    ?                             private    register_mapping\n+    \/\/   2  Committed     ..         ..       uncommitting a committed region          OK                            private        ..\n+    \/\/   3  Released      ..         ..       reserving a released region              invalid mapping request       private        ..\n+    \/\/   4  Reserved   Committed     ..       committing a reserved region             OK                            public     commit_mapping\n+    \/\/   5  Committed     ..         ..       re-committing a region                   OK                            public         ..\n+    \/\/   6  Released      ..         ..       committing a non-reserved region         invalid mapping request       public         ..\n+    \/\/   7  Reserved   Released      ..       releasing a reserved region              invalid mapping request       private    register_mapping\n+    \/\/   8  Committed     ..         ..       releasing a committed region             invalid mapping request       private        ..\n+    \/\/   9  Released      ..         ..       re-releasing a region                    ?                             private        ..\n+    \/\/  10  Reserved   Reserved     false     re-reserving a region                    split a reserved region       public     reserve_mapping\n+    \/\/  11  Committed     ..         ..       uncommitting a region                    Error                         public         ..\n+    \/\/  12  Released      ..         ..       reserving a released region              OK                            public         ..\n+    \/\/  13  Reserved   Committed     ..       committing a reserved ergion             OK                            public     commit_mapping\n+    \/\/  14  Committed     ..         ..       re-committing a region                   flags should match            public         ..\n+    \/\/  15  Released      ..         ..       committing a non-reserved region         invalid mapping request       public         ..\n+    \/\/  16  Reserved   Released      ..       releasing a reserved region              OK                            private    register_mapping\n+    \/\/  17  Committed     ..         ..       releasing w\/out uncommitting a region    OK                            private        ..\n+    \/\/  18  Released      ..         ..       re-releasing a region                    OK                            private        ..\n+\n+\n+    static int count_6 = 0;\n+    static int count_11 = 0;\n+    static int count_14 = 0;\n+    auto notify = [&](int row_no, const char* str) -> bool {\n+      if (row_no == 6 || row_no == 11 || row_no == 14) {\n+        if (row_no == 6)  { if (count_6++) return true; }\n+        if (row_no == 11) { if (count_11++) return true; }\n+        if (row_no == 14) { if (count_14++) return true; }\n+        tty->print_cr(\"new region \" SIZE_FORMAT \"-\" SIZE_FORMAT, (size_t)A, (size_t)B);\n+        tty->print_cr(\"leqA node \" SIZE_FORMAT \", flag: %d\", (size_t)leqA_n->key(), (int)leqA_n->val().out.flag());\n+        warning(\"%s\", str);\n+        return true;\n+      } else {\n+        fatal(\"%s\", str);\n+        return false;\n+      }\n+      return false;\n+    };\n+    VMATree::SummaryDiff invalid_diff(-1);\n+    if (leqA_state == StateType::Released && new_state == StateType::Reserved && copy_flag) { \/\/ row #3\n+      if (!notify(3, \"Reserving a released region and requesting to copy the flag\") )\n+        return invalid_diff;\n+    }\n+    if (leqA_state == StateType::Released && new_state == StateType::Committed) { \/\/ rows #6 and #15\n+      if (!notify(6, \"Committing a non-reserved region\"))\n+        return invalid_diff;\n+    }\n+    if ((leqA_state == StateType::Reserved || leqA_state == StateType::Committed) &&  \/\/ rows #7 and #8\n+         new_state == StateType::Released && copy_flag) {\n+      if (!notify(7, \"Releasing a region and requesting to copy the flag\"))\n+        return invalid_diff;\n+    }\n+    if (leqA_state == StateType::Committed && new_state == StateType::Reserved && !copy_flag) { \/\/ row #11\n+      if (!notify(11, \"Reserving a committed region is requested\"))\n+        return invalid_diff;\n+    }\n+    if (leqA_state == StateType::Committed && new_state == StateType::Committed && !copy_flag) { \/\/ row #14\n+      if (leqA_n->val().out.flag() != stA.out.flag()) {\n+        if (!notify(14, \"Re-committing a region with a different flag\"))\n+          return invalid_diff;\n+      }\n+    }\n+    if (new_state == StateType::Released && stA.out.flag() != mtNone) {\n+      if (!notify(0, \"Releasng a region with a not mtNone flag\"))\n+      return invalid_diff;\n+    }\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":70,"deletions":0,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -171,0 +171,15 @@\n+    SummaryDiff(int invalid_amount) {\n+      for (int i = 0; i < mt_number_of_types; i++) {\n+        flag[i] = SingleDiff{invalid_amount, invalid_amount};\n+      }\n+    }\n+\n+    bool is_valid(int invalid_amount = -1) {\n+      for (int i = 0; i < mt_number_of_types; i++) {\n+        if (flag[i].reserve != invalid_amount)\n+          return true;\n+        if (flag[i].commit != invalid_amount)\n+          return true;\n+      }\n+      return false;\n+    }\n@@ -173,0 +188,1 @@\n+ private:\n@@ -175,0 +191,1 @@\n+ public:\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -171,0 +171,1 @@\n+\n@@ -195,3 +196,3 @@\n-        if ((size_t)node->key() == 10   ) { EXPECT_EQ(node->val().in.flag(), mtTest) << \"failed at: \" << node->key(); }\n-        if ((size_t)node->key() == 10000) { EXPECT_EQ(node->val().out.flag(), mtNMT) << \"failed at: \" << node->key(); }\n-        if ((size_t)node->key() == 10010) { EXPECT_EQ(node->val().in.flag(), mtNMT) << \"failed at: \" << node->key(); }\n+        if ((size_t)node->key() == 10   ) { EXPECT_EQ(node->val().in.flag(),  mtTest) << \"failed at: \" << node->key(); }\n+        if ((size_t)node->key() == 10000) { EXPECT_EQ(node->val().out.flag(), mtNMT)  << \"failed at: \" << node->key(); }\n+        if ((size_t)node->key() == 10010) { EXPECT_EQ(node->val().in.flag(),  mtNMT)  << \"failed at: \" << node->key(); }\n@@ -365,0 +366,1 @@\n+    tree.reserve_mapping(0, 1024, rd);\n@@ -369,1 +371,1 @@\n-    EXPECT_EQ(768, diff.flag[NMTUtil::flag_to_index(mtTest)].reserve);\n+    EXPECT_EQ(0, diff.flag[NMTUtil::flag_to_index(mtTest)].reserve);\n@@ -500,1 +502,0 @@\n-      simple_diff = tr->reserve(start, size, stack, flag);\n@@ -502,0 +503,2 @@\n+      if (!tree_diff.is_valid()) { i--; continue; }\n+      simple_diff = tr->reserve(start, size, stack, flag);\n@@ -503,1 +506,0 @@\n-      simple_diff = tr->commit(start, size, stack, flag);\n@@ -505,0 +507,2 @@\n+      if (!tree_diff.is_valid()) { i--; continue; }\n+      simple_diff = tr->commit(start, size, stack, flag);\n@@ -506,1 +510,0 @@\n-      simple_diff = tr->release(start, size);\n@@ -508,0 +511,2 @@\n+      if (!tree_diff.is_valid()) { i--; continue; }\n+      simple_diff = tr->release(start, size);\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"}]}