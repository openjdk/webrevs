{"files":[{"patch":"@@ -37,1 +37,1 @@\n-                                               const RegionData& metadata) {\n+                                               const RegionData& metadata, bool copy_flag) {\n@@ -65,0 +65,75 @@\n+    StateType leqA_state = leqA_n->val().out.type();\n+    StateType new_state = stA.out.type();\n+    \/\/ Table of states and copy_flag permutations. '..' means 'the same as above line'.\n+    \/\/   #  leqA_state new_state  copy_flag   meaning                                 comments                    visibility   VMATree::xxx()\n+    \/\/   1  Reserved   Reserved     true      re-reserving a region                    ?                             private    register_mapping\n+    \/\/   2  Committed     ..         ..       uncommitting a committed region          OK                            private        ..\n+    \/\/   3  Released      ..         ..       reserving a released region              invalid mapping request       private        ..\n+    \/\/   4  Reserved   Committed     ..       committing a reserved region             OK                            public     commit_mapping\n+    \/\/   5  Committed     ..         ..       re-committing a region                   OK                            public         ..\n+    \/\/   6  Released      ..         ..       committing a non-reserved region         invalid mapping request       public         ..\n+    \/\/   7  Reserved   Released      ..       releasing a reserved region              invalid mapping request       private    register_mapping\n+    \/\/   8  Committed     ..         ..       releasing a committed region             invalid mapping request       private        ..\n+    \/\/   9  Released      ..         ..       re-releasing a region                    ?                             private        ..\n+    \/\/  10  Reserved   Reserved     false     re-reserving a region                    split a reserved region       public     reserve_mapping\n+    \/\/  11  Committed     ..         ..       uncommitting a region                    Error                         public         ..\n+    \/\/  12  Released      ..         ..       reserving a released region              OK                            public         ..\n+    \/\/  13  Reserved   Committed     ..       committing a reserved ergion             OK                            public     commit_mapping\n+    \/\/  14  Committed     ..         ..       re-committing a region                   flags should match            public         ..\n+    \/\/  15  Released      ..         ..       committing a non-reserved region         invalid mapping request       public         ..\n+    \/\/  16  Reserved   Released      ..       releasing a reserved region              OK                            private    register_mapping\n+    \/\/  17  Committed     ..         ..       releasing w\/out uncommitting a region    OK                            private        ..\n+    \/\/  18  Released      ..         ..       re-releasing a region                    OK                            private        ..\n+\n+\n+    static int count_6 = 0;\n+    static int count_11 = 0;\n+    static int count_14 = 0;\n+    auto notify = [&](int row_no, const char* str) -> bool {\n+      if (row_no == 6 || row_no == 11 || row_no == 14) {\n+        if (row_no == 6)  { if (count_6++) return true; }\n+        if (row_no == 11) { if (count_11++) return true; }\n+        if (row_no == 14) { if (count_14++) return true; }\n+        tty->print_cr(\"new region \" SIZE_FORMAT \"-\" SIZE_FORMAT, (size_t)A, (size_t)B);\n+        tty->print_cr(\"leqA node \" SIZE_FORMAT \", flag: %d\", (size_t)leqA_n->key(), (int)leqA_n->val().out.flag());\n+        warning(\"%s\", str);\n+        return true;\n+      } else {\n+        fatal(\"%s\", str);\n+        return false;\n+      }\n+      return false;\n+    };\n+    VMATree::SummaryDiff invalid_diff(-1);\n+    if (leqA_state == StateType::Released && new_state == StateType::Reserved && copy_flag) { \/\/ row #3\n+      if (!notify(3, \"Reserving a released region and requesting to copy the flag\") )\n+        return invalid_diff;\n+    }\n+    if (leqA_state == StateType::Released && new_state == StateType::Committed) { \/\/ rows #6 and #15\n+      if (!notify(6, \"Committing a non-reserved region\"))\n+        return invalid_diff;\n+    }\n+    if ((leqA_state == StateType::Reserved || leqA_state == StateType::Committed) &&  \/\/ rows #7 and #8\n+         new_state == StateType::Released && copy_flag) {\n+      if (!notify(7, \"Releasing a region and requesting to copy the flag\"))\n+        return invalid_diff;\n+    }\n+    if (leqA_state == StateType::Committed && new_state == StateType::Reserved && !copy_flag) { \/\/ row #11\n+      if (!notify(11, \"Reserving a committed region is requested\"))\n+        return invalid_diff;\n+    }\n+    if (leqA_state == StateType::Committed && new_state == StateType::Committed && !copy_flag) { \/\/ row #14\n+      if (leqA_n->val().out.flag() != stA.out.flag()) {\n+        if (!notify(14, \"Re-committing a region with a different flag\"))\n+          return invalid_diff;\n+      }\n+    }\n+    if (new_state == StateType::Released && stA.out.flag() != mtNone) {\n+      if (!notify(0, \"Releasng a region with a not mtNone flag\"))\n+      return invalid_diff;\n+    }\n+    if (copy_flag) {\n+      MEMFLAGS flag = leqA_n->val().out.flag();\n+      stA.out.set_flag(flag);\n+      stB.in.set_flag(flag);\n+    }\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":76,"deletions":1,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -115,0 +115,3 @@\n+    void set_flag(MEMFLAGS flag) {\n+      type_flag[1] = (uint8_t)flag;\n+    }\n@@ -168,0 +171,15 @@\n+    SummaryDiff(int invalid_amount) {\n+      for (int i = 0; i < mt_number_of_types; i++) {\n+        flag[i] = SingleDiff{invalid_amount, invalid_amount};\n+      }\n+    }\n+\n+    bool is_valid(int invalid_amount = -1) {\n+      for (int i = 0; i < mt_number_of_types; i++) {\n+        if (flag[i].reserve != invalid_amount)\n+          return true;\n+        if (flag[i].commit != invalid_amount)\n+          return true;\n+      }\n+      return false;\n+    }\n@@ -170,1 +188,2 @@\n-  SummaryDiff register_mapping(position A, position B, StateType state, const RegionData& metadata);\n+ private:\n+  SummaryDiff register_mapping(position A, position B, StateType state, const RegionData& metadata, bool copy_flag = false);\n@@ -172,0 +191,1 @@\n+ public:\n@@ -173,1 +193,5 @@\n-    return register_mapping(from, from + sz, StateType::Reserved, metadata);\n+    return register_mapping(from, from + sz, StateType::Reserved, metadata, false);\n+  }\n+\n+  SummaryDiff commit_mapping(position from, position sz, const RegionData& metadata, bool copy_flag = false) {\n+    return register_mapping(from, from + sz, StateType::Committed, metadata, copy_flag);\n@@ -176,2 +200,2 @@\n-  SummaryDiff commit_mapping(position from, position sz, const RegionData& metadata) {\n-    return register_mapping(from, from + sz, StateType::Committed, metadata);\n+  SummaryDiff uncommit_mapping(position from, position sz, const RegionData& metadata) {\n+    return register_mapping(from, from + sz, StateType::Committed, metadata, true);\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":28,"deletions":4,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -171,0 +171,31 @@\n+\n+  void copy_flag_test() {\n+    {\n+      Tree tree;\n+      VMATree::RegionData rd1{ si[0], mtTest };\n+      VMATree::RegionData rd2{ si[1], mtNMT };\n+\n+      tree.reserve_mapping(0, 100, rd1);\n+      tree.commit_mapping(20, 50, rd2, true); \/\/ mtTest flag is to be copied to new nodes, even if it is given as mtNMT.\n+      tree.uncommit_mapping(30, 10, rd2);\/\/ same here.\n+      tree.visit_in_order([&](Node* node) {\n+        if ((size_t)node->key() != 100) {\n+          EXPECT_EQ(node->val().out.flag(), mtTest) << \"failed at: \" << node->key();\n+        }\n+      });\n+    }\n+    {\n+      Tree tree;\n+      VMATree::RegionData rd1{ si[0], mtTest };\n+      VMATree::RegionData rd2{ si[1], mtNMT };\n+\n+      tree.reserve_mapping(0, 10, rd1);\n+      tree.reserve_mapping(10000, 10, rd2);\n+      tree.visit_in_order([&](Node* node) {\n+        if ((size_t)node->key() == 0    ) { EXPECT_EQ(node->val().out.flag(), mtTest) << \"failed at: \" << node->key(); }\n+        if ((size_t)node->key() == 10   ) { EXPECT_EQ(node->val().in.flag(),  mtTest) << \"failed at: \" << node->key(); }\n+        if ((size_t)node->key() == 10000) { EXPECT_EQ(node->val().out.flag(), mtNMT)  << \"failed at: \" << node->key(); }\n+        if ((size_t)node->key() == 10010) { EXPECT_EQ(node->val().in.flag(),  mtNMT)  << \"failed at: \" << node->key(); }\n+      });\n+    }\n+  }\n@@ -196,0 +227,1 @@\n+  copy_flag_test();\n@@ -334,0 +366,1 @@\n+    tree.reserve_mapping(0, 1024, rd);\n@@ -338,1 +371,1 @@\n-    EXPECT_EQ(768, diff.flag[NMTUtil::flag_to_index(mtTest)].reserve);\n+    EXPECT_EQ(0, diff.flag[NMTUtil::flag_to_index(mtTest)].reserve);\n@@ -469,1 +502,0 @@\n-      simple_diff = tr->reserve(start, size, stack, flag);\n@@ -471,0 +503,2 @@\n+      if (!tree_diff.is_valid()) { i--; continue; }\n+      simple_diff = tr->reserve(start, size, stack, flag);\n@@ -472,1 +506,0 @@\n-      simple_diff = tr->commit(start, size, stack, flag);\n@@ -474,0 +507,2 @@\n+      if (!tree_diff.is_valid()) { i--; continue; }\n+      simple_diff = tr->commit(start, size, stack, flag);\n@@ -475,1 +510,0 @@\n-      simple_diff = tr->release(start, size);\n@@ -477,0 +511,2 @@\n+      if (!tree_diff.is_valid()) { i--; continue; }\n+      simple_diff = tr->release(start, size);\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":40,"deletions":4,"binary":false,"changes":44,"status":"modified"}]}