{"files":[{"patch":"@@ -27,0 +27,1 @@\n+#include \"logging\/log.hpp\"\n@@ -37,1 +38,3 @@\n-                                               const RegionData& metadata) {\n+                                               const RegionData& metadata, bool use_flag_inplace) {\n+  assert(!use_flag_inplace || metadata.flag == mtNone,\n+         \"If copying flag then supplied flag should be mtNone, was instead: %s\", NMTUtil::flag_to_name(metadata.flag));\n@@ -58,0 +61,4 @@\n+    assert(!use_flag_inplace, \"Cannot copy the flag if no pre-existing flag exists. From: \" PTR_FORMAT \" To: \" PTR_FORMAT, A, B);\n+    if (use_flag_inplace) {\n+      log_debug(nmt)(\"Cannot copy the flag if no pre-existing flag exists. From: \" PTR_FORMAT \" To: \" PTR_FORMAT, A, B);\n+    }\n@@ -65,0 +72,11 @@\n+    StateType leqA_state = leqA_n->val().out.type();\n+    StateType new_state = stA.out.type();\n+    \/\/ If we specify copy_flag then the new region takes over the current flag instead of the flag in metadata.\n+    \/\/ This is important because the VirtualMemoryTracker API doesn't require supplying the flag for some operations.\n+    if (use_flag_inplace) {\n+      assert(leqA_n->val().out.type() != StateType::Released, \"Should not copy flag of a released region\");\n+      MEMFLAGS flag = leqA_n->val().out.flag();\n+      stA.out.set_flag(flag);\n+      stB.in.set_flag(flag);\n+    }\n+\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":19,"deletions":1,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -115,1 +115,5 @@\n-    const NativeCallStackStorage::StackIndex stack() const {\n+    void set_flag(MEMFLAGS flag) {\n+      type_flag[1] = static_cast<uint8_t>(flag);\n+    }\n+\n+    NativeCallStackStorage::StackIndex stack() const {\n@@ -170,1 +174,2 @@\n-  SummaryDiff register_mapping(position A, position B, StateType state, const RegionData& metadata);\n+ private:\n+  SummaryDiff register_mapping(position A, position B, StateType state, const RegionData& metadata, bool use_flag_inplace = false);\n@@ -172,0 +177,1 @@\n+ public:\n@@ -173,1 +179,5 @@\n-    return register_mapping(from, from + sz, StateType::Reserved, metadata);\n+    return register_mapping(from, from + sz, StateType::Reserved, metadata, false);\n+  }\n+\n+  SummaryDiff commit_mapping(position from, position sz, const RegionData& metadata, bool use_flag_inplace = false) {\n+    return register_mapping(from, from + sz, StateType::Committed, metadata, use_flag_inplace);\n@@ -176,2 +186,2 @@\n-  SummaryDiff commit_mapping(position from, position sz, const RegionData& metadata) {\n-    return register_mapping(from, from + sz, StateType::Committed, metadata);\n+  SummaryDiff uncommit_mapping(position from, position sz, const RegionData& metadata) {\n+    return register_mapping(from, from + sz, StateType::Reserved, metadata, true);\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -174,1 +174,0 @@\n-\n@@ -184,0 +183,17 @@\n+TEST_VM_F(NMTVMATreeTest, UseFlagInplace) {\n+  Tree tree;\n+  VMATree::RegionData rd1(si[0], mtTest);\n+  VMATree::RegionData rd2(si[1], mtNone);\n+  tree.reserve_mapping(0, 100, rd1);\n+  tree.commit_mapping(20, 50, rd2, true);\n+  tree.uncommit_mapping(30, 10, rd2);\n+  tree.visit_in_order([&](Node* node) {\n+    if (node->key() != 100) {\n+      EXPECT_EQ(mtTest, node->val().out.flag()) << \"failed at: \" << node->key();\n+      if (node->key() != 20 && node->key() != 40) {\n+        EXPECT_EQ(VMATree::StateType::Reserved, node->val().out.type());\n+      }\n+    }\n+  });\n+}\n+\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"}]}