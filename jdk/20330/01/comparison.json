{"files":[{"patch":"@@ -37,1 +37,1 @@\n-                                               const RegionData& metadata) {\n+                                               const RegionData& metadata, bool copy_flag) {\n@@ -65,0 +65,5 @@\n+    if (copy_flag) {\n+      MEMFLAGS flag = leqA_n->val().out.flag();\n+      stA.out.set_flag(flag);\n+      stB.in.set_flag(flag);\n+    }\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -115,0 +115,3 @@\n+    void set_flag(MEMFLAGS flag) {\n+      type_flag[1] = (uint8_t)flag;\n+    }\n@@ -170,1 +173,5 @@\n-  SummaryDiff register_mapping(position A, position B, StateType state, const RegionData& metadata);\n+  SummaryDiff register_mapping(position A, position B, StateType state, const RegionData& metadata, bool copy_flag = false);\n+\n+  SummaryDiff reserve_mapping(position from, position sz, const RegionData& metadata, bool copy_flag = false) {\n+    return register_mapping(from, from + sz, StateType::Reserved, metadata, copy_flag);\n+  }\n@@ -172,2 +179,2 @@\n-  SummaryDiff reserve_mapping(position from, position sz, const RegionData& metadata) {\n-    return register_mapping(from, from + sz, StateType::Reserved, metadata);\n+  SummaryDiff commit_mapping(position from, position sz, const RegionData& metadata, bool copy_flag = false) {\n+    return register_mapping(from, from + sz, StateType::Committed, metadata, copy_flag);\n@@ -176,2 +183,2 @@\n-  SummaryDiff commit_mapping(position from, position sz, const RegionData& metadata) {\n-    return register_mapping(from, from + sz, StateType::Committed, metadata);\n+  SummaryDiff uncommit_mapping(position from, position sz, const RegionData& metadata) {\n+    return register_mapping(from, from + sz, StateType::Committed, metadata, true);\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":12,"deletions":5,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -171,0 +171,15 @@\n+  void copy_flag_test() {\n+    Tree tree;\n+    VMATree::RegionData rd1{ si[0], mtTest };\n+    VMATree::RegionData rd2{ si[1], mtNMT };\n+\n+    tree.reserve_mapping(0, 100, rd1);\n+    tree.commit_mapping(20, 50, rd2, true); \/\/ mtTest flag is to be copied to new nodes, even if it is given as mtNMT.\n+    tree.uncommit_mapping(30, 10, rd2);\/\/ same here.\n+    tree.visit_in_order([&](Node* node) {\n+      if ((size_t)node->key() != 100) {\n+        EXPECT_EQ(node->val().out.flag(), mtTest) << \"failed at: \" << node->key();\n+      }\n+    });\n+\n+  }\n@@ -196,0 +211,1 @@\n+  copy_flag_test();\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}