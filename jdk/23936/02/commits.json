[{"commit":{"message":"Use Executor.trace() instead of TKit.trace()"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Executor.java"}],"sha":"3fdf653e537f542ae35fee93d2f80181a59ba2bb"},{"commit":{"message":"Fix typo"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java"}],"sha":"545851473d38368e9301f1c754a58b447bfd9edf"},{"commit":{"message":"Fix Unicode signing certificate index"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningBase.java"}],"sha":"e6ad500c150fa052e60e163ea03693f6ab6e87e0"},{"commit":{"message":"Update copyright year"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningBase.java"}],"sha":"eda0efec3cb26a0719632ff55864b963e9711c5a"},{"commit":{"message":"Give unique descriptions to signing tests"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningAppImageTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/macosx\/base\/SigningBase.java"}],"sha":"3fe3eed412c50b7386b7ae12a4000e377823e067"},{"commit":{"message":"Ignore default runtime if jpackage command line has `--jlink-options` option."},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java"},{"filename":"test\/jdk\/tools\/jpackage\/share\/JLinkOptionsTest.java"}],"sha":"8d728128cd4d559cdd3c665095a90b82a4bb28c4"},{"commit":{"message":"Ran .\/bin\/blessed-modifier-order.sh"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/PackageTestTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestInstance.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java"},{"filename":"test\/jdk\/tools\/jpackage\/junit\/share\/jdk.jpackage\/jdk\/jpackage\/internal\/util\/TokenReplaceTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/linux\/LinuxResourceTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/share\/JavaOptionsEqualsTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/share\/ModulePathTest.java"}],"sha":"dc5974fc054df21fad58174df08774648f781bc0"},{"commit":{"message":"Update copyright year"},"files":[{"filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/DeployParams.java"},{"filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/DottedVersion.java"},{"filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/LauncherData.java"},{"filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/main\/Main.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/CannedFormattedString.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageStringBundle.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Main.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java"},{"filename":"test\/jdk\/tools\/jpackage\/junit\/share\/jdk.jpackage\/jdk\/jpackage\/internal\/DottedVersionTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/macosx\/MacAppStoreJlinkOptionsTest.java"}],"sha":"8e2db234b6580df14b94b29fea5de04d5b29f7d8"},{"commit":{"message":"DeployParams: replace {\"ERR_MissingArgument\", \"--input\"} with \"error.no-input-parameter\" as the error is not missing argument of `--input` parameter, but missing `--input` parameter itself."},"files":[{"filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/DeployParams.java"},{"filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/LauncherData.java"}],"sha":"f810e23ca6a5306626b1b265d72c5869b08df441"},{"commit":{"message":"CommandLine.parse() doesn't throw `java.io.FileNotFoundException` when command file is no found. Instead it throws `java.nio.file.NoSuchFileException`."},"files":[{"filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/main\/Main.java"}],"sha":"656a8a3aecb42bafbefa395d9becbfe141762edd"},{"commit":{"message":"Remove negative tests from AppVersionTest. ErrorTest tests invalid app versions better, it verifies error messages in jpackage output, AppVersionTest doesn't."},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/AppVersionTest.java"}],"sha":"4835cc5ed0e9cb16f6f437ef5f389f4ec8c15535"},{"commit":{"message":"Enhance RuntimePackageTest to test that jpackage can derive package name from the runtime image directory name if `--name` option is not given"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/RuntimePackageTest.java"}],"sha":"cc03a14ba24d0480785722a546ceadc82e6f84e8"},{"commit":{"message":"LinuxResourceTest: use CannedFormattedString"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/linux\/LinuxResourceTest.java"}],"sha":"e853e56e6a7b58fcce48091a512a573407e559bb"},{"commit":{"message":"Make JavaOptionsEqualsTest and JavaOptionsTest work when external fake runtime is used"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/JavaOptionsEqualsTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/share\/JavaOptionsTest.java"}],"sha":"3810b5762b23fd7a6342ce02688e26ba803160f4"},{"commit":{"message":"FileAssociationsTest: use CannedFormattedString"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/FileAssociationsTest.java"}],"sha":"30d42dc046c0536d5425fa3a573905895effbc6d"},{"commit":{"message":"ModulePathTest: use CannedFormattedString to validate error output"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/ModulePathTest.java"}],"sha":"810aac39107b926951c1183533302f1e9386d472"},{"commit":{"message":"NonExistentTest is redundant. It duplicates functionality of ErrorTest and is less strict on analyzing error output"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/NonExistentTest.java"}],"sha":"0c32b276015f1f7767ae051ad0e25c47fd0f4870"},{"commit":{"message":"Better negative testing in MainClassTest"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/MainClassTest.java"}],"sha":"2aa3de51017a6b38d5f101ac336f40eb489452d3"},{"commit":{"message":"Remove redundant MacAppStoreJlinkOptionsTest.testWithoutStripNativeCommands(). It duplicates `ERR_MissingJLinkOptMacAppStore` test case in ErrorTest"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/macosx\/MacAppStoreJlinkOptionsTest.java"}],"sha":"915a15c5c08b01e284ea60d41763fc70e69714cd"},{"commit":{"message":"Remove redundant PredefinedAppImageErrorTest.java. It duplicates ErrorTest test cases: '--mac-sign option is required' -> 'error.app-image.mac-sign.required'; 'Option [--mac-app-store] is not valid' -> 'ERR_InvalidOptionWithAppImageSigning'."},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/PredefinedAppImageErrorTest.java"}],"sha":"d85d67fdbc27acf483e9981ee0465332c9c2fdd9"},{"commit":{"message":"Remove MacAppStoreRuntimeTest.java. The positive test duplicates other tests covering `--runtime-image` option and the negative test duplicates a test in ErrorTest (the one covering ERR_MacAppStoreRuntimeBinExists)"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/macosx\/MacAppStoreRuntimeTest.java"}],"sha":"fefdf4d75d7682040a56be8170ffc05726416c30"},{"commit":{"message":"Test error reported by jpackage when `--temp` arg points to existing non-empty directory"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/BasicTest.java"}],"sha":"a4288bb36ff53552595bb85857e617bb7ec451df"},{"commit":{"message":"Better test coverage for bad app image"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/AppImagePackageTest.java"}],"sha":"5197f614dd761d73f5cab4c3b521058d751fdee4"},{"commit":{"message":"Better testing of DottedVersion: verify exception error messages"},"files":[{"filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/DottedVersion.java"},{"filename":"test\/jdk\/tools\/jpackage\/junit\/share\/jdk.jpackage\/jdk\/jpackage\/internal\/DottedVersionTest.java"}],"sha":"2706c9052d2de5711a10970795244132ded8e582"},{"commit":{"message":"More negative tests"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java"}],"sha":"939846397413c483d4d1728b2fefee6c7856bc66"},{"commit":{"message":"Move token substitution in generic TokenReplace class."},"files":[{"filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/TokenReplace.java"},{"filename":"test\/jdk\/tools\/jpackage\/junit\/share\/jdk.jpackage\/jdk\/jpackage\/internal\/util\/TokenReplaceTest.java"}],"sha":"2838a080cd4dbfe24289276504b5dde931e2e151"},{"commit":{"message":"Make PackageType.getName() public and rename it into PackageType.getType(); Add PackageType.isEnabled(). Make PackageType.isEnabled() and PackageType.isSupported() public."},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers-test\/jdk\/jpackage\/test\/PackageTestTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageType.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java"}],"sha":"185e38a618a0a9fc7e05d9bf04d20619e6019807"},{"commit":{"message":"Support multiple output validators in JPackageCommand"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java"}],"sha":"4fc37b277aa70d8614c1c517a5fc2b00e3f4d9b9"},{"commit":{"message":"Create fake runtime in unique directory"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java"}],"sha":"f2cd6514e1cd2b8c16285f3a88bb59ca24698873"},{"commit":{"message":"JPackageCommand can derive app name from jpackage command line without --name option but with --runtime-image option. Allow to use arguments with CannedFormattedString that get their values from JPackageCommand instance. Make JPackageCommand.validateOutput(CannedFormattedString) more robust and allow it to take an array of canned formatted strings."},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java"}],"sha":"f4381f0750031ac413c45e674cc8ff7c01ac9cd7"},{"commit":{"message":"Make CannedFormattedString a record and add null checks. Add CannedFormattedString.CannedArgument interface to make CannedFormattedString instances provide system-independent test descriptions."},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/CannedFormattedString.java"}],"sha":"e74c14c888582df475c6371602d7d43b39fa33f6"},{"commit":{"message":"Relax constraints on arguments for string formatting in JPackageStringBundle.cannedFormattedString()"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageStringBundle.java"}],"sha":"2ede257d1615c0d1908cd2322b613a6a77fec4c8"},{"commit":{"message":"Add Executor.setEnvVar()"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Executor.java"}],"sha":"ce854a664b1c9e73add751e707d6781817dddc3f"},{"commit":{"message":"Can run launcher verifier with altered environment variables"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/HelloApp.java"}],"sha":"08a2a66ef4a8cbc1257d26992ba5faf504de308e"},{"commit":{"message":"More robust msi unpack when wix4 is used"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/WindowsHelper.java"}],"sha":"c50fc5c52aecb4de3608d8477f2048bd78d481bc"},{"commit":{"message":"TestInstance: escape control characters in test description. Fail running tests if multiple tests have the same description"},"files":[{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Main.java"},{"filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TestInstance.java"}],"sha":"1404e6d899b4ce31eee9c24ee5dcd53fe472beb3"}]