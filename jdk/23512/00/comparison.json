{"files":[{"patch":"@@ -2146,1 +2146,3 @@\n-  return NMethodAccess<AS_NO_KEEPALIVE>::oop_load(oop_addr_at(index));\n+\n+  BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n+  return bs_nm->oop_load_no_keepalive(this, index);\n@@ -2153,1 +2155,3 @@\n-  return NMethodAccess<ON_PHANTOM_OOP_REF>::oop_load(oop_addr_at(index));\n+\n+  BarrierSetNMethod* bs_nm = BarrierSet::barrier_set()->barrier_set_nmethod();\n+  return bs_nm->oop_load_phantom(this, index);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -215,0 +215,8 @@\n+\n+oop BarrierSetNMethod::oop_load_no_keepalive(const nmethod* nm, int index) {\n+  return NativeAccess<AS_NO_KEEPALIVE>::oop_load(nm->oop_addr_at(index));\n+}\n+\n+oop BarrierSetNMethod::oop_load_phantom(const nmethod* nm, int index) {\n+  return NativeAccess<ON_PHANTOM_OOP_REF>::oop_load(nm->oop_addr_at(index));\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"oops\/oopsHierarchy.hpp\"\n@@ -60,0 +61,3 @@\n+  virtual oop oop_load_no_keepalive(const nmethod* nm, int index);\n+  virtual oop oop_load_phantom(const nmethod* nm, int index);\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/barrierSetNMethod.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -476,5 +476,1 @@\n-  if (HasDecorator<decorators, IN_NMETHOD>::value) {\n-    return ZNMethod::load_oop(p, decorators);\n-  } else {\n-    return oop_load_not_in_heap((zpointer*)p);\n-  }\n+  return oop_load_not_in_heap((zpointer*)p);\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSet.inline.hpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,0 +100,8 @@\n+\n+oop ZBarrierSetNMethod::oop_load_no_keepalive(const nmethod* nm, int index) {\n+  return ZNMethod::oop_load_no_keepalive(nm, index);\n+}\n+\n+oop ZBarrierSetNMethod::oop_load_phantom(const nmethod* nm, int index) {\n+  return ZNMethod::oop_load_phantom(nm, index);\n+}\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetNMethod.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,0 +39,3 @@\n+\n+  virtual oop oop_load_no_keepalive(const nmethod* nm, int index);\n+  virtual oop oop_load_phantom(const nmethod* nm, int index);\n","filename":"src\/hotspot\/share\/gc\/z\/zBarrierSetNMethod.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -308,5 +308,13 @@\n-oop ZNMethod::load_oop(oop* p, DecoratorSet decorators) {\n-  assert((decorators & ON_WEAK_OOP_REF) == 0,\n-         \"nmethod oops have phantom strength, not weak\");\n-  nmethod* const nm = CodeCache::find_nmethod((void*)p);\n-  assert(nm != nullptr, \"did not find nmethod\");\n+oop ZNMethod::oop_load_no_keepalive(const nmethod* nm, int index) {\n+  return oop_load(nm, index, false \/* keep_alive *\/);\n+}\n+\n+oop ZNMethod::oop_load_phantom(const nmethod* nm, int index) {\n+  return oop_load(nm, index, true \/* keep_alive *\/);\n+}\n+\n+oop ZNMethod::oop_load(const nmethod* const_nm, int index, bool keep_alive) {\n+  \/\/ The rest of the code is not ready to handle const nmethod, so cast it away\n+  \/\/ until we are more consistent with our const corectness.\n+  nmethod* nm = const_cast<nmethod*>(const_nm);\n+\n@@ -319,1 +327,1 @@\n-    return *p;\n+    return *nm->oop_addr_at(index);\n@@ -322,2 +330,0 @@\n-  const bool keep_alive = (decorators & ON_PHANTOM_OOP_REF) != 0 &&\n-                          (decorators & AS_NO_KEEPALIVE) == 0;\n@@ -327,1 +333,1 @@\n-  zaddress_unsafe obj = *ZUncoloredRoot::cast(p);\n+  zaddress_unsafe obj = *ZUncoloredRoot::cast(nm->oop_addr_at(index));\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.cpp","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -45,0 +45,2 @@\n+  static oop oop_load(const nmethod* nm, int index, bool keep_alive);\n+\n@@ -72,1 +74,3 @@\n-  static oop load_oop(oop* p, DecoratorSet decorators);\n+\n+  static oop oop_load_no_keepalive(const nmethod* nm, int index);\n+  static oop oop_load_phantom(const nmethod* nm, int index);\n","filename":"src\/hotspot\/share\/gc\/z\/zNMethod.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -287,5 +287,0 @@\n-\/\/ Helper for performing accesses in nmethods. These accesses\n-\/\/ may resolve an accessor on a GC barrier set.\n-template <DecoratorSet decorators = DECORATORS_NONE>\n-class NMethodAccess: public Access<IN_NMETHOD | decorators> {};\n-\n@@ -369,1 +364,0 @@\n-    (location_decorators ^ IN_NMETHOD) == 0 ||\n","filename":"src\/hotspot\/share\/oops\/access.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -176,1 +176,0 @@\n-\/\/ * IN_NMETHOD: The access is performed inside of an nmethod.\n@@ -179,2 +178,1 @@\n-const DecoratorSet IN_NMETHOD         = UCONST64(1) << 20;\n-const DecoratorSet IN_DECORATOR_MASK  = IN_HEAP | IN_NATIVE | IN_NMETHOD;\n+const DecoratorSet IN_DECORATOR_MASK  = IN_HEAP | IN_NATIVE;\n@@ -188,3 +186,3 @@\n-const DecoratorSet IS_ARRAY              = UCONST64(1) << 21;\n-const DecoratorSet IS_DEST_UNINITIALIZED = UCONST64(1) << 22;\n-const DecoratorSet IS_NOT_NULL           = UCONST64(1) << 23;\n+const DecoratorSet IS_ARRAY              = UCONST64(1) << 20;\n+const DecoratorSet IS_DEST_UNINITIALIZED = UCONST64(1) << 21;\n+const DecoratorSet IS_NOT_NULL           = UCONST64(1) << 22;\n@@ -202,5 +200,5 @@\n-const DecoratorSet ARRAYCOPY_CHECKCAST            = UCONST64(1) << 24;\n-const DecoratorSet ARRAYCOPY_DISJOINT             = UCONST64(1) << 25;\n-const DecoratorSet ARRAYCOPY_ARRAYOF              = UCONST64(1) << 26;\n-const DecoratorSet ARRAYCOPY_ATOMIC               = UCONST64(1) << 27;\n-const DecoratorSet ARRAYCOPY_ALIGNED              = UCONST64(1) << 28;\n+const DecoratorSet ARRAYCOPY_CHECKCAST            = UCONST64(1) << 23;\n+const DecoratorSet ARRAYCOPY_DISJOINT             = UCONST64(1) << 24;\n+const DecoratorSet ARRAYCOPY_ARRAYOF              = UCONST64(1) << 25;\n+const DecoratorSet ARRAYCOPY_ATOMIC               = UCONST64(1) << 26;\n+const DecoratorSet ARRAYCOPY_ALIGNED              = UCONST64(1) << 27;\n@@ -215,2 +213,2 @@\n-const DecoratorSet ACCESS_READ                    = UCONST64(1) << 29;\n-const DecoratorSet ACCESS_WRITE                   = UCONST64(1) << 30;\n+const DecoratorSet ACCESS_READ                    = UCONST64(1) << 28;\n+const DecoratorSet ACCESS_WRITE                   = UCONST64(1) << 29;\n@@ -219,1 +217,1 @@\n-const DecoratorSet DECORATOR_LAST = UCONST64(1) << 30;\n+const DecoratorSet DECORATOR_LAST = UCONST64(1) << 29;\n","filename":"src\/hotspot\/share\/oops\/accessDecorators.hpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"}]}