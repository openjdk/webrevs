{"files":[{"patch":"@@ -29,0 +29,1 @@\n+* @requires vm.compMode != \"Xint\" & vm.compMode != \"Xcomp\"\n@@ -30,0 +31,3 @@\n+* @library \/test\/lib \/test\/hotspot\/jtreg\n+* @build jdk.test.whitebox.WhiteBox\n+* @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n@@ -31,7 +35,7 @@\n-* @run main\/othervm OSRTest true true true\n-* @run main\/othervm -XX:CompileCommand=inline,*::yield0 OSRTest true true false\n-* @run main\/othervm -XX:CompileCommand=dontinline,*::yield* OSRTest true true false\n-* @run main\/othervm -XX:CompileCommand=exclude,*::bar() OSRTest true false false\n-* @run main\/othervm OSRTest false true true\n-* @run main\/othervm OSRTest false true false\n-* @run main\/othervm -XX:CompileCommand=exclude,*::bar() OSRTest false false false\n+* @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI OSRTest true true true\n+* @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:CompileCommand=inline,*::yield0 OSRTest true true false\n+* @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:CompileCommand=dontinline,*::yield* OSRTest true true false\n+* @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:CompileCommand=exclude,*::bar() OSRTest true false false\n+* @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI OSRTest false true true\n+* @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI OSRTest false true false\n+* @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:CompileCommand=exclude,*::bar() OSRTest false false false\n@@ -44,0 +48,3 @@\n+import java.lang.reflect.Method;\n+import jdk.test.whitebox.WhiteBox;\n+\n@@ -45,0 +52,1 @@\n+    static final WhiteBox wb = WhiteBox.getWhiteBox();\n@@ -46,0 +54,2 @@\n+    static final Method foo = getMethod(\"foo\");\n+    static final Method fooBigFrame = getMethod(\"fooBigFrame\");\n@@ -128,2 +138,3 @@\n-        \/\/ provoke OSR compilation\n-        for (int i = 0; i < 500_000 * fooCallCount; i++) {\n+        \/\/ Provoke OSR compilation. After we verified the method was compiled keep looping\n+        \/\/ until we trigger the _backedge_counter overflow to actually trigger OSR.\n+        for (int i = 0; fooCallCount > 0 && (!wb.isMethodCompiled(foo, true) || i++ < 2_000);) {\n@@ -163,2 +174,3 @@\n-        \/\/ provoke OSR compilation\n-        for (int i = 0; i < 5_000_000 * fooCallCount; i++) {\n+        \/\/ Provoke OSR compilation. After we verified the method was compiled keep looping\n+        \/\/ until we trigger the _backedge_counter overflow to actually trigger OSR.\n+        for (int i = 0; fooCallCount > 0 && (!wb.isMethodCompiled(fooBigFrame, true) || i++ < 2_000);) {\n@@ -217,0 +229,9 @@\n+\n+    static Method getMethod(String method) {\n+        try {\n+            return OSRTest.class.getMethod(method, Object.class, Object.class, Object.class, Object.class, Object.class, Object.class, Object.class, Object.class,\n+                                           Object.class, Object.class, Float.TYPE, Float.TYPE, Float.TYPE, Float.TYPE, Float.TYPE, Float.TYPE, Float.TYPE);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Exception: couldn't found method \" + method + \". \" + e.getMessage());\n+        }\n+    }\n","filename":"test\/jdk\/jdk\/internal\/vm\/Continuation\/OSRTest.java","additions":32,"deletions":11,"binary":false,"changes":43,"status":"modified"}]}