{"files":[{"patch":"@@ -419,2 +419,5 @@\n-  bool is_normal_parse() const  { return _entry_bci == InvocationEntryBci; }\n-  bool is_osr_parse() const     { return _entry_bci != InvocationEntryBci; }\n+  bool is_osr_parse() const {\n+    assert(_entry_bci != UnknownBci, \"uninitialized _entry_bci\");\n+    return _entry_bci != InvocationEntryBci;\n+  }\n+  bool is_normal_parse() const  { return !is_osr_parse(); }\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -404,1 +404,0 @@\n-  _entry_bci = InvocationEntryBci;\n@@ -409,2 +408,3 @@\n-  debug_only(_block_count = -1);\n-  debug_only(_blocks = (Block*)-1);\n+  DEBUG_ONLY(_entry_bci = UnknownBci);\n+  DEBUG_ONLY(_block_count = -1);\n+  DEBUG_ONLY(_blocks = (Block*)-1);\n@@ -414,2 +414,1 @@\n-    JVMState* ilt_caller = is_osr_parse() ? caller->caller() : caller;\n-    InlineTree::find_subtree_from_root(C->ilt(), ilt_caller, parse_method);\n+    InlineTree::find_subtree_from_root(C->ilt(), caller, parse_method);\n@@ -507,1 +506,1 @@\n-    assert(false, \"type flow failed during parsing\");\n+    assert(false, \"type flow analysis failed during parsing\");\n@@ -511,1 +510,1 @@\n-        if (_entry_bci != InvocationEntryBci) {\n+        if (is_osr_parse()) {\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"}]}