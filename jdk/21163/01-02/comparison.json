{"files":[{"patch":"@@ -3263,2 +3263,2 @@\n-TypeInterfaces::TypeInterfaces(const GrowableArray<ciInstanceKlass*>* interfaces)\n-        : Type(Interfaces), _interfaces(interfaces),\n+TypeInterfaces::TypeInterfaces(ciInstanceKlass** interfaces_base, int nb_interfaces)\n+        : Type(Interfaces), _interfaces(interfaces_base, nb_interfaces),\n@@ -3266,1 +3266,1 @@\n-  assert(_interfaces != nullptr, \"no interfaces should be passed as empty list\");\n+  _interfaces.sort(compare);\n@@ -3270,23 +3270,13 @@\n-const TypeInterfaces* TypeInterfaces::make(const GrowableArray<ciInstanceKlass*>* interfaces) {\n-  \/\/ To make sure all memory for the newly created TypeInterfaces can be freed if an identical one exists, we initially\n-  \/\/ create the array of interfaces in the current thread's resource area and have the new TypeInterfaces refer to it.\n-  \/\/ If hashcons() returns an already existing TypeInterfaces, then the just allocated TypeInterfaces was destroyed\n-  \/\/ (it's the last thing allocated in the type arena) and the memory for array of interfaces is reclaimed when this\n-  \/\/ method returns. If hashcons() returns the newly allocated TypeInterfaces, a new array of interfaces is allocated in\n-  \/\/ the type arena and populated with the content of the one in the resource area. The TypeInterfaces object is made to\n-  \/\/ refer to the one in the type area.\n-  ResourceMark rm;\n-  GrowableArray<ciInstanceKlass*> temp_interfaces;\n-  if (interfaces != nullptr) {\n-    for (int i = 0; i < interfaces->length(); ++i) {\n-      temp_interfaces.insert_sorted<compare>(interfaces->at(i));\n-    }\n-  }\n-  TypeInterfaces* result = new TypeInterfaces(&temp_interfaces);\n-  const Type* unique = result->hashcons();\n-  if (unique == result) {\n-    GrowableArray<ciInstanceKlass*>* permanent_interfaces = new(Compile::current()->type_arena()) GrowableArray< ciInstanceKlass*>(Compile::current()->type_arena(), temp_interfaces.length(), 0, nullptr);\n-    for (int i = 0; i < temp_interfaces.length(); ++i) {\n-      permanent_interfaces->push(temp_interfaces.at(i));\n-    }\n-    result->_interfaces = permanent_interfaces;\n+const TypeInterfaces* TypeInterfaces::make(GrowableArray<ciInstanceKlass*>* interfaces) {\n+  \/\/ hashcons() can only delete the last thing that was allocated: to\n+  \/\/ make sure all memory for the newly created TypeInterfaces can be\n+  \/\/ freed if an identical one exists, allocate space for the array of\n+  \/\/ interfaces right after the TypeInterfaces object so that they\n+  \/\/ form a contiguous piece of memory.\n+  int nb_interfaces = interfaces == nullptr ? 0 : interfaces->length();\n+  size_t total_size = sizeof(TypeInterfaces) + nb_interfaces * sizeof(ciInstanceKlass*);\n+\n+  void* allocated_mem = operator new(total_size);\n+  ciInstanceKlass** interfaces_base = (ciInstanceKlass**)((char*)allocated_mem + sizeof(TypeInterfaces));\n+  for (int i = 0; i < nb_interfaces; ++i) {\n+    interfaces_base[i] = interfaces->at(i);\n@@ -3294,1 +3284,2 @@\n-  return (const TypeInterfaces*)unique;\n+  TypeInterfaces* result = ::new (allocated_mem) TypeInterfaces(interfaces_base, nb_interfaces);\n+  return (const TypeInterfaces*)result->hashcons();\n@@ -3312,0 +3303,4 @@\n+int TypeInterfaces::compare(ciInstanceKlass** k1, ciInstanceKlass** k2) {\n+  return compare(*k1, *k2);\n+}\n+\n@@ -3314,1 +3309,1 @@\n-  if (_interfaces->length() != other->_interfaces->length()) {\n+  if (_interfaces.length() != other->_interfaces.length()) {\n@@ -3317,3 +3312,3 @@\n-  for (int i = 0; i < _interfaces->length(); i++) {\n-    ciKlass* k1 = _interfaces->at(i);\n-    ciKlass* k2 = other->_interfaces->at(i);\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    ciKlass* k1 = _interfaces.at(i);\n+    ciKlass* k2 = other->_interfaces.at(i);\n@@ -3330,1 +3325,1 @@\n-  if (_interfaces->length() != interfaces->length()) {\n+  if (_interfaces.length() != interfaces->length()) {\n@@ -3335,1 +3330,1 @@\n-    _interfaces->find_sorted<ciInstanceKlass*, compare>(interfaces->at(i), found);\n+    _interfaces.find_sorted<ciInstanceKlass*, compare>(interfaces->at(i), found);\n@@ -3355,2 +3350,2 @@\n-  for (int i = 0; i < _interfaces->length(); i++) {\n-    ciKlass* k = _interfaces->at(i);\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    ciKlass* k = _interfaces.at(i);\n@@ -3367,1 +3362,1 @@\n-  if (empty()) {\n+  if (_interfaces.length() == 0) {\n@@ -3373,1 +3368,1 @@\n-  interfaces.appendAll(_interfaces);\n+  interfaces.appendAll(&_interfaces);\n@@ -3388,3 +3383,3 @@\n-  for (int i = 1; i < _interfaces->length(); i++) {\n-    ciInstanceKlass* k1 = _interfaces->at(i-1);\n-    ciInstanceKlass* k2 = _interfaces->at(i);\n+  for (int i = 1; i < _interfaces.length(); i++) {\n+    ciInstanceKlass* k1 = _interfaces.at(i-1);\n+    ciInstanceKlass* k2 = _interfaces.at(i);\n@@ -3401,5 +3396,5 @@\n-  while (i < _interfaces->length() || j < other->_interfaces->length()) {\n-    while (i < _interfaces->length() &&\n-           (j >= other->_interfaces->length() ||\n-            compare(_interfaces->at(i), other->_interfaces->at(j)) < 0)) {\n-      result_list.push(_interfaces->at(i));\n+  while (i < _interfaces.length() || j < other->_interfaces.length()) {\n+    while (i < _interfaces.length() &&\n+           (j >= other->_interfaces.length() ||\n+            compare(_interfaces.at(i), other->_interfaces.at(j)) < 0)) {\n+      result_list.push(_interfaces.at(i));\n@@ -3408,4 +3403,4 @@\n-    while (j < other->_interfaces->length() &&\n-           (i >= _interfaces->length() ||\n-            compare(other->_interfaces->at(j), _interfaces->at(i)) < 0)) {\n-      result_list.push(other->_interfaces->at(j));\n+    while (j < other->_interfaces.length() &&\n+           (i >= _interfaces.length() ||\n+            compare(other->_interfaces.at(j), _interfaces.at(i)) < 0)) {\n+      result_list.push(other->_interfaces.at(j));\n@@ -3414,4 +3409,4 @@\n-    if (i < _interfaces->length() &&\n-        j < other->_interfaces->length() &&\n-        _interfaces->at(i) == other->_interfaces->at(j)) {\n-      result_list.push(_interfaces->at(i));\n+    if (i < _interfaces.length() &&\n+        j < other->_interfaces.length() &&\n+        _interfaces.at(i) == other->_interfaces.at(j)) {\n+      result_list.push(_interfaces.at(i));\n@@ -3425,2 +3420,2 @@\n-  for (int i = 0; i < _interfaces->length(); i++) {\n-    assert(result->_interfaces->contains(_interfaces->at(i)), \"missing\");\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    assert(result->_interfaces.contains(_interfaces.at(i)), \"missing\");\n@@ -3428,2 +3423,2 @@\n-  for (int i = 0; i < other->_interfaces->length(); i++) {\n-    assert(result->_interfaces->contains(other->_interfaces->at(i)), \"missing\");\n+  for (int i = 0; i < other->_interfaces.length(); i++) {\n+    assert(result->_interfaces.contains(other->_interfaces.at(i)), \"missing\");\n@@ -3431,2 +3426,2 @@\n-  for (int i = 0; i < result->_interfaces->length(); i++) {\n-    assert(_interfaces->contains(result->_interfaces->at(i)) || other->_interfaces->contains(result->_interfaces->at(i)), \"missing\");\n+  for (int i = 0; i < result->_interfaces.length(); i++) {\n+    assert(_interfaces.contains(result->_interfaces.at(i)) || other->_interfaces.contains(result->_interfaces.at(i)), \"missing\");\n@@ -3442,4 +3437,4 @@\n-  while (i < _interfaces->length() || j < other->_interfaces->length()) {\n-    while (i < _interfaces->length() &&\n-           (j >= other->_interfaces->length() ||\n-            compare(_interfaces->at(i), other->_interfaces->at(j)) < 0)) {\n+  while (i < _interfaces.length() || j < other->_interfaces.length()) {\n+    while (i < _interfaces.length() &&\n+           (j >= other->_interfaces.length() ||\n+            compare(_interfaces.at(i), other->_interfaces.at(j)) < 0)) {\n@@ -3448,3 +3443,3 @@\n-    while (j < other->_interfaces->length() &&\n-           (i >= _interfaces->length() ||\n-            compare(other->_interfaces->at(j), _interfaces->at(i)) < 0)) {\n+    while (j < other->_interfaces.length() &&\n+           (i >= _interfaces.length() ||\n+            compare(other->_interfaces.at(j), _interfaces.at(i)) < 0)) {\n@@ -3453,4 +3448,4 @@\n-    if (i < _interfaces->length() &&\n-        j < other->_interfaces->length() &&\n-        _interfaces->at(i) == other->_interfaces->at(j)) {\n-      result_list.push(_interfaces->at(i));\n+    if (i < _interfaces.length() &&\n+        j < other->_interfaces.length() &&\n+        _interfaces.at(i) == other->_interfaces.at(j)) {\n+      result_list.push(_interfaces.at(i));\n@@ -3464,2 +3459,2 @@\n-  for (int i = 0; i < _interfaces->length(); i++) {\n-    assert(!other->_interfaces->contains(_interfaces->at(i)) || result->_interfaces->contains(_interfaces->at(i)), \"missing\");\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    assert(!other->_interfaces.contains(_interfaces.at(i)) || result->_interfaces.contains(_interfaces.at(i)), \"missing\");\n@@ -3467,2 +3462,2 @@\n-  for (int i = 0; i < other->_interfaces->length(); i++) {\n-    assert(!_interfaces->contains(other->_interfaces->at(i)) || result->_interfaces->contains(other->_interfaces->at(i)), \"missing\");\n+  for (int i = 0; i < other->_interfaces.length(); i++) {\n+    assert(!_interfaces.contains(other->_interfaces.at(i)) || result->_interfaces.contains(other->_interfaces.at(i)), \"missing\");\n@@ -3470,2 +3465,2 @@\n-  for (int i = 0; i < result->_interfaces->length(); i++) {\n-    assert(_interfaces->contains(result->_interfaces->at(i)) && other->_interfaces->contains(result->_interfaces->at(i)), \"missing\");\n+  for (int i = 0; i < result->_interfaces.length(); i++) {\n+    assert(_interfaces.contains(result->_interfaces.at(i)) && other->_interfaces.contains(result->_interfaces.at(i)), \"missing\");\n@@ -3484,1 +3479,1 @@\n-  if (empty()) {\n+  if (_interfaces.length() == 0) {\n@@ -3489,2 +3484,2 @@\n-  for (int i = 0; i < _interfaces->length(); i++) {\n-    ciInstanceKlass* interface = _interfaces->at(i);\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    ciInstanceKlass* interface = _interfaces.at(i);\n@@ -3501,2 +3496,2 @@\n-  for (int i = 0; i < _interfaces->length(); i++) {\n-    ciKlass* interface = _interfaces->at(i);\n+  for (int i = 0; i < _interfaces.length(); i++) {\n+    ciKlass* interface = _interfaces.at(i);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":76,"deletions":81,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -880,1 +880,1 @@\n-  const GrowableArray<ciInstanceKlass*>* _interfaces;\n+  GrowableArrayFromArray<ciInstanceKlass*> _interfaces;\n@@ -891,1 +891,1 @@\n-  TypeInterfaces(const GrowableArray<ciInstanceKlass*>* interfaces);\n+  TypeInterfaces(ciInstanceKlass** interfaces_base, int nb_interfaces);\n@@ -895,1 +895,1 @@\n-  static const TypeInterfaces* make(const GrowableArray<ciInstanceKlass*>* interfaces = nullptr);\n+  static const TypeInterfaces* make(GrowableArray<ciInstanceKlass*>* interfaces = nullptr);\n@@ -906,1 +906,1 @@\n-  bool empty() const { return _interfaces->length() == 0; }\n+  bool empty() const { return _interfaces.length() == 0; }\n@@ -912,0 +912,1 @@\n+  static int compare(ciInstanceKlass** k1, ciInstanceKlass** k2);\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"}]}