{"files":[{"patch":"@@ -3263,2 +3263,2 @@\n-TypeInterfaces::TypeInterfaces()\n-        : Type(Interfaces), _list(Compile::current()->type_arena(), 0, 0, nullptr),\n+TypeInterfaces::TypeInterfaces(const GrowableArray<ciInstanceKlass*>* interfaces)\n+        : Type(Interfaces), _interfaces(interfaces),\n@@ -3266,9 +3266,1 @@\n-  DEBUG_ONLY(_initialized = true);\n-}\n-\n-TypeInterfaces::TypeInterfaces(GrowableArray<ciInstanceKlass*>* interfaces)\n-        : Type(Interfaces), _list(Compile::current()->type_arena(), interfaces->length(), 0, nullptr),\n-          _hash(0), _exact_klass(nullptr) {\n-  for (int i = 0; i < interfaces->length(); i++) {\n-    add(interfaces->at(i));\n-  }\n+  assert(_interfaces != nullptr, \"no interfaces should be passed as empty list\");\n@@ -3278,3 +3270,25 @@\n-const TypeInterfaces* TypeInterfaces::make(GrowableArray<ciInstanceKlass*>* interfaces) {\n-  TypeInterfaces* result = (interfaces == nullptr) ? new TypeInterfaces() : new TypeInterfaces(interfaces);\n-  return (const TypeInterfaces*)result->hashcons();\n+const TypeInterfaces* TypeInterfaces::make(const GrowableArray<ciInstanceKlass*>* interfaces) {\n+  \/\/ To make sure all memory for the newly created TypeInterfaces can be freed if an identical one exists, we initially\n+  \/\/ create the array of interfaces in the current thread's resource area and have the new TypeInterfaces refer to it.\n+  \/\/ If hashcons() returns an already existing TypeInterfaces, then the just allocated TypeInterfaces was destroyed\n+  \/\/ (it's the last thing allocated in the type arena) and the memory for array of interfaces is reclaimed when this\n+  \/\/ method returns. If hashcons() returns the newly allocated TypeInterfaces, a new array of interfaces is allocated in\n+  \/\/ the type arena and populated with the content of the one in the resource area. The TypeInterfaces object is made to\n+  \/\/ refer to the one in the type area.\n+  ResourceMark rm;\n+  GrowableArray<ciInstanceKlass*> temp_interfaces;\n+  if (interfaces != nullptr) {\n+    for (int i = 0; i < interfaces->length(); ++i) {\n+      temp_interfaces.insert_sorted<compare>(interfaces->at(i));\n+    }\n+  }\n+  TypeInterfaces* result = new TypeInterfaces(&temp_interfaces);\n+  const Type* unique = result->hashcons();\n+  if (unique == result) {\n+    GrowableArray<ciInstanceKlass*>* permanent_interfaces = new(Compile::current()->type_arena()) GrowableArray< ciInstanceKlass*>(Compile::current()->type_arena(), temp_interfaces.length(), 0, nullptr);\n+    for (int i = 0; i < temp_interfaces.length(); ++i) {\n+      permanent_interfaces->push(temp_interfaces.at(i));\n+    }\n+    result->_interfaces = permanent_interfaces;\n+  }\n+  return (const TypeInterfaces*)unique;\n@@ -3298,6 +3312,0 @@\n-void TypeInterfaces::add(ciInstanceKlass* interface) {\n-  assert(interface->is_interface(), \"for interfaces only\");\n-  _list.insert_sorted<compare>(interface);\n-  verify();\n-}\n-\n@@ -3306,1 +3314,1 @@\n-  if (_list.length() != other->_list.length()) {\n+  if (_interfaces->length() != other->_interfaces->length()) {\n@@ -3309,3 +3317,3 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    ciKlass* k1 = _list.at(i);\n-    ciKlass* k2 = other->_list.at(i);\n+  for (int i = 0; i < _interfaces->length(); i++) {\n+    ciKlass* k1 = _interfaces->at(i);\n+    ciKlass* k2 = other->_interfaces->at(i);\n@@ -3322,1 +3330,1 @@\n-  if (_list.length() != interfaces->length()) {\n+  if (_interfaces->length() != interfaces->length()) {\n@@ -3327,1 +3335,1 @@\n-    _list.find_sorted<ciInstanceKlass*, compare>(interfaces->at(i), found);\n+    _interfaces->find_sorted<ciInstanceKlass*, compare>(interfaces->at(i), found);\n@@ -3347,2 +3355,2 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    ciKlass* k = _list.at(i);\n+  for (int i = 0; i < _interfaces->length(); i++) {\n+    ciKlass* k = _interfaces->at(i);\n@@ -3359,1 +3367,1 @@\n-  if (_list.length() == 0) {\n+  if (empty()) {\n@@ -3365,1 +3373,1 @@\n-  interfaces.appendAll(&_list);\n+  interfaces.appendAll(_interfaces);\n@@ -3380,3 +3388,3 @@\n-  for (int i = 1; i < _list.length(); i++) {\n-    ciInstanceKlass* k1 = _list.at(i-1);\n-    ciInstanceKlass* k2 = _list.at(i);\n+  for (int i = 1; i < _interfaces->length(); i++) {\n+    ciInstanceKlass* k1 = _interfaces->at(i-1);\n+    ciInstanceKlass* k2 = _interfaces->at(i);\n@@ -3393,5 +3401,5 @@\n-  while (i < _list.length() || j < other->_list.length()) {\n-    while (i < _list.length() &&\n-           (j >= other->_list.length() ||\n-            compare(_list.at(i), other->_list.at(j)) < 0)) {\n-      result_list.push(_list.at(i));\n+  while (i < _interfaces->length() || j < other->_interfaces->length()) {\n+    while (i < _interfaces->length() &&\n+           (j >= other->_interfaces->length() ||\n+            compare(_interfaces->at(i), other->_interfaces->at(j)) < 0)) {\n+      result_list.push(_interfaces->at(i));\n@@ -3400,4 +3408,4 @@\n-    while (j < other->_list.length() &&\n-           (i >= _list.length() ||\n-            compare(other->_list.at(j), _list.at(i)) < 0)) {\n-      result_list.push(other->_list.at(j));\n+    while (j < other->_interfaces->length() &&\n+           (i >= _interfaces->length() ||\n+            compare(other->_interfaces->at(j), _interfaces->at(i)) < 0)) {\n+      result_list.push(other->_interfaces->at(j));\n@@ -3406,4 +3414,4 @@\n-    if (i < _list.length() &&\n-        j < other->_list.length() &&\n-        _list.at(i) == other->_list.at(j)) {\n-      result_list.push(_list.at(i));\n+    if (i < _interfaces->length() &&\n+        j < other->_interfaces->length() &&\n+        _interfaces->at(i) == other->_interfaces->at(j)) {\n+      result_list.push(_interfaces->at(i));\n@@ -3417,2 +3425,2 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    assert(result->_list.contains(_list.at(i)), \"missing\");\n+  for (int i = 0; i < _interfaces->length(); i++) {\n+    assert(result->_interfaces->contains(_interfaces->at(i)), \"missing\");\n@@ -3420,2 +3428,2 @@\n-  for (int i = 0; i < other->_list.length(); i++) {\n-    assert(result->_list.contains(other->_list.at(i)), \"missing\");\n+  for (int i = 0; i < other->_interfaces->length(); i++) {\n+    assert(result->_interfaces->contains(other->_interfaces->at(i)), \"missing\");\n@@ -3423,2 +3431,2 @@\n-  for (int i = 0; i < result->_list.length(); i++) {\n-    assert(_list.contains(result->_list.at(i)) || other->_list.contains(result->_list.at(i)), \"missing\");\n+  for (int i = 0; i < result->_interfaces->length(); i++) {\n+    assert(_interfaces->contains(result->_interfaces->at(i)) || other->_interfaces->contains(result->_interfaces->at(i)), \"missing\");\n@@ -3434,4 +3442,4 @@\n-  while (i < _list.length() || j < other->_list.length()) {\n-    while (i < _list.length() &&\n-           (j >= other->_list.length() ||\n-            compare(_list.at(i), other->_list.at(j)) < 0)) {\n+  while (i < _interfaces->length() || j < other->_interfaces->length()) {\n+    while (i < _interfaces->length() &&\n+           (j >= other->_interfaces->length() ||\n+            compare(_interfaces->at(i), other->_interfaces->at(j)) < 0)) {\n@@ -3440,3 +3448,3 @@\n-    while (j < other->_list.length() &&\n-           (i >= _list.length() ||\n-            compare(other->_list.at(j), _list.at(i)) < 0)) {\n+    while (j < other->_interfaces->length() &&\n+           (i >= _interfaces->length() ||\n+            compare(other->_interfaces->at(j), _interfaces->at(i)) < 0)) {\n@@ -3445,4 +3453,4 @@\n-    if (i < _list.length() &&\n-        j < other->_list.length() &&\n-        _list.at(i) == other->_list.at(j)) {\n-      result_list.push(_list.at(i));\n+    if (i < _interfaces->length() &&\n+        j < other->_interfaces->length() &&\n+        _interfaces->at(i) == other->_interfaces->at(j)) {\n+      result_list.push(_interfaces->at(i));\n@@ -3456,2 +3464,2 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    assert(!other->_list.contains(_list.at(i)) || result->_list.contains(_list.at(i)), \"missing\");\n+  for (int i = 0; i < _interfaces->length(); i++) {\n+    assert(!other->_interfaces->contains(_interfaces->at(i)) || result->_interfaces->contains(_interfaces->at(i)), \"missing\");\n@@ -3459,2 +3467,2 @@\n-  for (int i = 0; i < other->_list.length(); i++) {\n-    assert(!_list.contains(other->_list.at(i)) || result->_list.contains(other->_list.at(i)), \"missing\");\n+  for (int i = 0; i < other->_interfaces->length(); i++) {\n+    assert(!_interfaces->contains(other->_interfaces->at(i)) || result->_interfaces->contains(other->_interfaces->at(i)), \"missing\");\n@@ -3462,2 +3470,2 @@\n-  for (int i = 0; i < result->_list.length(); i++) {\n-    assert(_list.contains(result->_list.at(i)) && other->_list.contains(result->_list.at(i)), \"missing\");\n+  for (int i = 0; i < result->_interfaces->length(); i++) {\n+    assert(_interfaces->contains(result->_interfaces->at(i)) && other->_interfaces->contains(result->_interfaces->at(i)), \"missing\");\n@@ -3476,1 +3484,1 @@\n-  if (_list.length() == 0) {\n+  if (empty()) {\n@@ -3481,2 +3489,2 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    ciInstanceKlass* interface = _list.at(i);\n+  for (int i = 0; i < _interfaces->length(); i++) {\n+    ciInstanceKlass* interface = _interfaces->at(i);\n@@ -3493,2 +3501,2 @@\n-  for (int i = 0; i < _list.length(); i++) {\n-    ciKlass* interface = _list.at(i);\n+  for (int i = 0; i < _interfaces->length(); i++) {\n+    ciKlass* interface = _interfaces->at(i);\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":82,"deletions":74,"binary":false,"changes":156,"status":"modified"},{"patch":"@@ -880,1 +880,1 @@\n-  GrowableArray<ciInstanceKlass*> _list;\n+  const GrowableArray<ciInstanceKlass*>* _interfaces;\n@@ -887,1 +887,0 @@\n-  void add(ciInstanceKlass* interface);\n@@ -891,2 +890,2 @@\n-  TypeInterfaces();\n-  TypeInterfaces(GrowableArray<ciInstanceKlass*>* interfaces);\n+\n+  TypeInterfaces(const GrowableArray<ciInstanceKlass*>* interfaces);\n@@ -896,1 +895,1 @@\n-  static const TypeInterfaces* make(GrowableArray<ciInstanceKlass*>* interfaces = nullptr);\n+  static const TypeInterfaces* make(const GrowableArray<ciInstanceKlass*>* interfaces = nullptr);\n@@ -907,1 +906,1 @@\n-  bool empty() const { return _list.length() == 0; }\n+  bool empty() const { return _interfaces->length() == 0; }\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"}]}