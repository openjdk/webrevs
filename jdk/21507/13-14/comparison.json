{"files":[{"patch":"@@ -1997,2 +1997,2 @@\n-                        for (int m = cap - 1, pb = -1;;) { \/\/ track progress\n-                            ForkJoinTask<?> t; int b; long k;\n+                        for (int m = cap - 1, pb = -1, b = q.base;;) {\n+                            ForkJoinTask<?> t; long k;\n@@ -2000,7 +2000,4 @@\n-                                a, k = slotOffset(m & (b = q.base)));\n-                            if (q.base != b)              \/\/ inconsistent\n-                                ;\n-                            else if (t == null) {\n-                                if (a[b & m] == null &&\n-                                    a[(b + 1) & m] == null &&\n-                                    a[(b + 2) & m] == null) {\n+                                a, k = slotOffset(m & b));\n+                            if (b != (b = q.base) || t == null ||\n+                                !U.compareAndSetReference(a, k, t, null)) {\n+                                if (a[b & m] == null) {\n@@ -2009,5 +2006,8 @@\n-                                    break;                \/\/ probably empty\n-                                }\n-                                if (pb == (pb = b)) {\n-                                    rescan = true;        \/\/ stalled; reorder scan\n-                                    break scan;\n+                                    if (a[(b + 1) & m] == null &&\n+                                        a[(b + 2) & m] == null) {\n+                                        break;            \/\/ probably empty\n+                                    }\n+                                    if (pb == (pb = b)) { \/\/ track progress\n+                                        rescan = true;    \/\/ stalled; reorder scan\n+                                        break scan;\n+                                    }\n@@ -2016,1 +2016,2 @@\n-                            else if (U.compareAndSetReference(a, k, t, null)) {\n+                            else {\n+                                boolean propagate;\n@@ -2021,4 +2022,5 @@\n-                                boolean propagate = (src != (src = j)) ||\n-                                    t.getClass().getSuperclass() ==\n-                                    interruptibleTaskClass;\n-                                if (propagate && a[nb & m] != null)\n+                                if (propagate =\n+                                    ((src != (src = j) ||\n+                                      t.getClass().getSuperclass() ==\n+                                      interruptibleTaskClass) &&\n+                                     a[nb & m] != null))\n@@ -2027,1 +2029,1 @@\n-                                if (!propagate && q.base != nb)\n+                                if ((b = q.base) != nb && !propagate)\n@@ -2030,2 +2032,0 @@\n-                            else if (rescan)\n-                                break scan;              \/\/ collision during run\n@@ -2765,0 +2765,1 @@\n+            e = runState;\n@@ -2766,1 +2767,1 @@\n-        if ((runState & STOP) != 0L)\n+        if ((e & (STOP | TERMINATED)) == STOP) {\n@@ -2768,8 +2769,9 @@\n-        if (((e = runState) & (STOP | TERMINATED)) == STOP && ctl == 0L) {\n-            e |= TERMINATED;\n-            if ((getAndBitwiseOrRunState(TERMINATED) & TERMINATED) == 0L) {\n-                CountDownLatch done; SharedThreadContainer ctr;\n-                if ((done = termination) != null)\n-                    done.countDown();\n-                if ((ctr = container) != null)\n-                    ctr.close();\n+            if (((e = runState) & (STOP | TERMINATED)) == STOP && ctl == 0L) {\n+                e |= TERMINATED;\n+                if ((getAndBitwiseOrRunState(TERMINATED) & TERMINATED) == 0L) {\n+                    CountDownLatch done; SharedThreadContainer ctr;\n+                    if ((done = termination) != null)\n+                        done.countDown();\n+                    if ((ctr = container) != null)\n+                        ctr.close();\n+                }\n@@ -2782,3 +2784,3 @@\n-     * Scans queues (with start index based on thread id to stagger\n-     * traversals), cancelling tasks until empty or interference (in\n-     * which case one or more other threads will finish cancellation).\n+     * Scans queues in a psuedorandom order based on thread id,\n+     * cancelling tasks until empty or interference (in which case one\n+     * or more other threads will finish cancellation).\n@@ -2789,1 +2791,2 @@\n-        WorkQueue[] qs = queues;             \/\/ stagger traversals\n+        int step = (r >>> 16) | 1;                \/\/ randomize traversals\n+        WorkQueue[] qs = queues;\n@@ -2791,1 +2794,1 @@\n-        for (int l = n; l > 0; --l, ++r) {\n+        for (int l = n; l > 0; --l, r += step) {\n@@ -2800,1 +2803,1 @@\n-                    if (q.base != b)                   \/\/ inconsistent\n+                    if (q.base != b)               \/\/ inconsistent\n@@ -2802,2 +2805,4 @@\n-                    else if (t == null || !U.compareAndSetReference(a, k, t, null))\n-                        break;                         \/\/ empty or contended\n+                    else if (t == null)\n+                        break;                     \/\/ apparently empty\n+                    else if (!U.compareAndSetReference(a, k, t, null))\n+                        break;                     \/\/ contended\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":44,"deletions":39,"binary":false,"changes":83,"status":"modified"}]}