{"files":[{"patch":"@@ -844,4 +844,5 @@\n-     * to any user-defined ThreadGroup, and clear all ThreadLocals\n-     * after executing any top-level task.  The associated mechanics\n-     * may be JVM-dependent and must access particular Thread class\n-     * fields to achieve this effect.\n+     * to any user-defined ThreadGroup, and clear all ThreadLocals and\n+     * reset the ContextClassLoader before (re)activating to execute\n+     * top-level task.  The associated mechanics may be JVM-dependent\n+     * and must access particular Thread class fields to achieve this\n+     * effect.\n@@ -1464,2 +1465,1 @@\n-        final void topLevelExec(ForkJoinTask<?> task, int cfg) {\n-            int fifo = cfg & FIFO;\n+        final void topLevelExec(ForkJoinTask<?> task, int fifo) {\n@@ -1470,2 +1470,0 @@\n-            if ((cfg & CLEAR_TLS) != 0)\n-                ThreadLocalRandom.eraseThreadLocals(Thread.currentThread());\n@@ -2002,1 +2000,1 @@\n-            int cfg = w.config, nsteals = 0, src = -1;\n+            int fifo = w.config & FIFO, nsteals = 0, src = -1;\n@@ -2045,1 +2043,1 @@\n-                                w.topLevelExec(t, cfg);\n+                                w.topLevelExec(t, fifo);\n@@ -2108,1 +2106,3 @@\n-            long deadline;                     \/\/ for idle timeouts\n+            ForkJoinWorkerThread t; long deadline;\n+            if ((w.config & CLEAR_TLS) != 0 && (t = w.owner) != null)\n+                t.resetThreadLocals();          \/\/ clear before reactivate\n@@ -4062,9 +4062,1 @@\n-        JLA = SharedSecrets.getJavaLangAccess();\n-        defaultForkJoinWorkerThreadFactory =\n-            new DefaultForkJoinWorkerThreadFactory();\n-        @SuppressWarnings(\"removal\")\n-        ForkJoinPool p = common = (System.getSecurityManager() == null) ?\n-            new ForkJoinPool((byte)0) :\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                    public ForkJoinPool run() {\n-                        return new ForkJoinPool((byte)0); }});\n+        Class<?> dep = LockSupport.class; \/\/ ensure loaded\n@@ -4072,0 +4064,1 @@\n+        JLA = SharedSecrets.getJavaLangAccess();\n@@ -4082,1 +4075,8 @@\n-        Class<?> dep = LockSupport.class; \/\/ ensure loaded\n+        defaultForkJoinWorkerThreadFactory =\n+            new DefaultForkJoinWorkerThreadFactory();\n+        @SuppressWarnings(\"removal\")\n+        ForkJoinPool p = common = (System.getSecurityManager() == null) ?\n+            new ForkJoinPool((byte)0) :\n+            AccessController.doPrivileged(new PrivilegedAction<>() {\n+                    public ForkJoinPool run() {\n+                        return new ForkJoinPool((byte)0); }});\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -228,0 +229,19 @@\n+\n+    \/**\n+     * Clears ThreadLocals, and if necessary resets ContextClassLoader\n+     *\/\n+     final void resetThreadLocals() {\n+         if (U.getReference(this, THREADLOCALS) != null)\n+             U.putReference(this, THREADLOCALS, null);\n+         if (U.getReference(this, INHERITABLETHREADLOCALS) != null)\n+             U.putReference(this, INHERITABLETHREADLOCALS, null);\n+         if ((this instanceof InnocuousForkJoinWorkerThread) &&\n+             ((InnocuousForkJoinWorkerThread)this).needCCLReset())\n+             super.setContextClassLoader(ClassLoader.getSystemClassLoader());\n+     }\n+\n+    private static final Unsafe U = Unsafe.getUnsafe();\n+    private static final long THREADLOCALS\n+        = U.objectFieldOffset(Thread.class, \"threadLocals\");\n+    private static final long INHERITABLETHREADLOCALS\n+        = U.objectFieldOffset(Thread.class, \"inheritableThreadLocals\");\n@@ -239,0 +259,1 @@\n+        private boolean resetCCL;\n@@ -247,0 +268,1 @@\n+        @SuppressWarnings(\"removal\")\n@@ -248,1 +270,2 @@\n-            if (cl != null && ClassLoader.getSystemClassLoader() != cl)\n+            if (System.getSecurityManager() != null &&\n+                cl != null && ClassLoader.getSystemClassLoader() != cl)\n@@ -250,0 +273,9 @@\n+            resetCCL = true;\n+            super.setContextClassLoader(cl);\n+        }\n+\n+        final boolean needCCLReset() { \/\/ get and clear\n+            boolean needReset;\n+            if (needReset = resetCCL)\n+                resetCCL = false;\n+            return needReset;\n@@ -258,0 +290,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinWorkerThread.java","additions":34,"deletions":1,"binary":false,"changes":35,"status":"modified"}]}