{"files":[{"patch":"@@ -305,1 +305,1 @@\n-     *    CAS succeeds\n+     *    CAS succeeds.\n@@ -854,1 +854,1 @@\n-     * exceptions is preferred to throwing InterruptedExeptions,\n+     * exceptions is preferred to throwing InterruptedExceptions,\n@@ -1270,4 +1270,12 @@\n-            int s = top++, b = base, m, cap, room; ForkJoinTask<?>[] a;\n-            if ((a = array) == null || (cap = a.length) <= 0 ||\n-                (room = (m = cap - 1) - (s - b)) < 0) {\n-                top = s;                          \/\/ back out\n+            int s = top, b = base, m, cap, room; ForkJoinTask<?>[] a;\n+            if ((a = array) != null && (cap = a.length) > 0) { \/\/ else disabled\n+                if ((room = (m = cap - 1) - (s - b)) >= 0) {\n+                    top = s + 1;\n+                    long pos = slotOffset(m & s);\n+                    if (!internal)\n+                        U.putReference(a, pos, task);       \/\/ inside lock\n+                    else\n+                        U.getAndSetReference(a, pos, task); \/\/ fully fenced\n+                    if (room == 0)                          \/\/ resize\n+                        growArray(a, cap, s);\n+                }\n@@ -1276,1 +1284,4 @@\n-                throw new RejectedExecutionException(\"Queue capacity exceeded\");\n+                if (room < 0)\n+                    throw new RejectedExecutionException(\"Queue capacity exceeded\");\n+                else if ((room == 0 || a[m & (s - 1)] == null) && pool != null)\n+                    pool.signalWork(); \/\/ may have appeared empty\n@@ -1278,11 +1289,0 @@\n-            long k = slotOffset(m & s), pk = slotOffset(m & (s - 1));\n-            if (!internal)\n-                U.putReference(a, k, task);       \/\/ inside lock\n-            else\n-                U.getAndSetReference(a, k, task); \/\/ fully fenced\n-            if (room == 0)                        \/\/ resize\n-                growArray(a, cap, s);\n-            if (!internal)\n-                unlockPhase();\n-            if ((room == 0 || U.getReference(a, pk) == null) && pool != null)\n-                pool.signalWork();                \/\/ may have appeared empty\n@@ -1968,2 +1968,2 @@\n-            int cfg = w.config, nsteals = 0, src = -1;\n-            for (;;) {\n+            int cfg = w.config, nsteals = 0;\n+            for (boolean taken = false;;) {\n@@ -1980,6 +1980,4 @@\n-                        for (int pb = -1, b; ; pb = b) {  \/\/ track progress\n-                            ForkJoinTask<?> t; int nb; long k, nk;\n-                            t = (ForkJoinTask<?>)U.getReferenceAcquire(\n-                                a, k = slotOffset((cap - 1) & (b = q.base)));\n-                            Object u = U.getReference(    \/\/ next slot\n-                                a, nk = slotOffset((cap - 1) & (nb = b + 1)));\n+                        for (int m = cap - 1, pb = -1, b; ; pb = b) {\n+                            long k = slotOffset((b = q.base) & m);\n+                            ForkJoinTask<?> t = (ForkJoinTask<?>)\n+                                U.getReferenceAcquire(a, k);\n@@ -1989,2 +1987,6 @@\n-                                if (u == null && q.top - b <= 0)\n-                                    break;                \/\/ empty\n+                                if (rescan)\n+                                    break;                \/\/ will revisit\n+                                if (a[b & m] == null &&\n+                                    a[(b + 1) & m] == null &&\n+                                    a[(b + 2) & m] == null)\n+                                    break;                \/\/ probably empty\n@@ -1992,1 +1994,1 @@\n-                                    rescan = true;        \/\/ stalled; revisit\n+                                    rescan = true;        \/\/ stalled; reorder scan\n@@ -1997,1 +1999,1 @@\n-                                q.base = nb;\n+                                q.base = b + 1;\n@@ -2000,3 +2002,6 @@\n-                                rescan = true;\n-                                if (src != (src = j) &&\n-                                    U.getReferenceVolatile(a, nk) != null)\n+                                boolean propagated = taken;\n+                                rescan = taken = true;\n+                                if ((!propagated ||\n+                                     ((j & 1) == 0) && t instanceof\n+                                     ForkJoinTask.InterruptibleTask) &&\n+                                    a[(b + 1) & m] != null)\n@@ -2010,1 +2015,1 @@\n-                    src = -1;\n+                    taken = false;\n@@ -2039,2 +2044,2 @@\n-        for (int steps = Math.max(n << 1, SPIN_WAITS), found = 0, i = 0; ; ++i) {\n-            WorkQueue q;                      \/\/ interleave spins and rechecks\n+        for (int k = Math.max(n << 1, SPIN_WAITS), checks = 2;;) {\n+            WorkQueue q; int j;               \/\/ interleave spins and rechecks\n@@ -2043,1 +2048,1 @@\n-            if (i >= steps)\n+            if (--k < 0)\n@@ -2046,3 +2051,2 @@\n-            if (found != 2 && (i & n) != 0 && (i & 1) == 0 &&\n-                (q = qs[i & (n - 1)]) != null &&\n-                q.top - q.base > 0 && ++found == 2)\n+            if (checks != 0 && ((j = k & (n - 1)) & 1) == 0 &&\n+                (q = qs[j]) != null && q.top - q.base > 0 && --checks == 0)\n@@ -2279,1 +2283,1 @@\n-                                    w.source = j;\n+                                    w.source = j;    \/\/ volatile write\n@@ -2433,1 +2437,1 @@\n-                                w.source = j;\n+                                w.source = j; \/\/ volatile write\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":46,"deletions":42,"binary":false,"changes":88,"status":"modified"}]}