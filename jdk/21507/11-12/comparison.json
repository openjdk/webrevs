{"files":[{"patch":"@@ -1830,1 +1830,1 @@\n-            dropWaiters();\n+            releaseAll();\n@@ -1914,1 +1914,1 @@\n-     * Releases and drops all waiting workers. Called only during shutdown.\n+     * Releases all waiting workers. Called only during shutdown.\n@@ -1918,2 +1918,3 @@\n-    private long dropWaiters() {\n-        for (long c = ctl;;) {\n+    private long releaseAll() {\n+        long c = ctl;\n+        for (;;) {\n@@ -1923,1 +1924,1 @@\n-                return c;\n+                break;\n@@ -1925,2 +1926,2 @@\n-                          c, (v.stackPred & LMASK) | (UMASK & (c - TC_UNIT))))) {\n-                v.source = DROPPED;\n+                          c, ((UMASK & (c + RC_UNIT)) | (c & TC_MASK) |\n+                              (v.stackPred & LMASK))))) {\n@@ -1932,0 +1933,1 @@\n+        return c;\n@@ -2753,2 +2755,6 @@\n-            if ((e & STOP) != 0L && (dropWaiters() & RC_MASK) != 0L && now)\n-                interruptAll();\n+            if ((e & STOP) != 0L) {\n+                releaseAll();\n+                if (now)\n+                    interruptAll();\n+                e = runState;\n+            }\n@@ -2757,12 +2763,10 @@\n-            if ((ctl & RC_MASK) != 0L) {         \/\/ unless all inactive\n-                int r = (int)Thread.currentThread().threadId();\n-                WorkQueue[] qs = queues;         \/\/ stagger traversals\n-                int n = (qs == null) ? 0 : qs.length;\n-                for (int l = n; l > 0; --l, ++r) {\n-                    WorkQueue q; ForkJoinTask<?> t;\n-                    if ((q = qs[r & (n - 1)]) != null) {\n-                        while (q.source != DROPPED && (t = q.poll()) != null) {\n-                            try {\n-                                t.cancel(false);\n-                            } catch (Throwable ignore) {\n-                            }\n+            int r = (int)Thread.currentThread().threadId();\n+            WorkQueue[] qs = queues;             \/\/ stagger traversals\n+            int n = (qs == null) ? 0 : qs.length;\n+            for (int l = n; l > 0; --l, ++r) {\n+                WorkQueue q; ForkJoinTask<?> t;\n+                if ((q = qs[r & (n - 1)]) != null) {\n+                    while (q.source != DROPPED && (t = q.poll()) != null) {\n+                        try {\n+                            t.cancel(false);\n+                        } catch (Throwable ignore) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinPool.java","additions":25,"deletions":21,"binary":false,"changes":46,"status":"modified"}]}