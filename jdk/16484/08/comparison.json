{"files":[{"patch":"@@ -1151,2 +1151,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -1605,1 +1605,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -1660,2 +1660,1 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1677,2 +1676,1 @@\n-  void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc*) const {\n-    C2_MacroAssembler _masm(&cbuf);\n+  void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc*) const {\n@@ -1700,1 +1698,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -1754,1 +1752,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1756,1 +1754,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1805,1 +1802,1 @@\n-      bs->nmethod_entry_barrier(&_masm, slow_path, continuation, guard);\n+      bs->nmethod_entry_barrier(masm, slow_path, continuation, guard);\n@@ -1813,1 +1810,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -1867,1 +1864,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1869,1 +1866,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1941,1 +1937,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n@@ -1974,2 +1970,1 @@\n-    if (ireg == Op_VecA && cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (ireg == Op_VecA && masm) {\n@@ -1994,1 +1989,1 @@\n-    } else if (cbuf) {\n+    } else if (masm) {\n@@ -1996,1 +1991,0 @@\n-      C2_MacroAssembler _masm(cbuf);\n@@ -2023,2 +2017,1 @@\n-  } else if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n+  } else if (masm) {\n@@ -2032,1 +2025,0 @@\n-            C2_MacroAssembler _masm(cbuf);\n@@ -2160,2 +2152,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, nullptr);\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation(masm, ra_, false, nullptr);\n@@ -2179,3 +2171,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -2220,1 +2210,1 @@\n-void MachUEPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachUEPNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const\n@@ -2222,2 +2212,0 @@\n-  \/\/ This is the unverified entry point.\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2237,1 +2225,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler* masm)\n@@ -2243,1 +2231,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2257,1 +2244,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm)\n@@ -2261,1 +2248,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2680,1 +2666,0 @@\n-  C2_MacroAssembler _masm(&cbuf);                                       \\\n@@ -2725,1 +2710,1 @@\n-  static void loadStore(C2_MacroAssembler masm, mem_insn insn,\n+  static void loadStore(C2_MacroAssembler* masm, mem_insn insn,\n@@ -2735,1 +2720,1 @@\n-      addr = masm.legitimize_address(addr, size_in_memory, rscratch1);\n+      addr = __ legitimize_address(addr, size_in_memory, rscratch1);\n@@ -2737,1 +2722,1 @@\n-    (masm.*insn)(reg, addr);\n+    (masm->*insn)(reg, addr);\n@@ -2740,1 +2725,1 @@\n-  static void loadStore(C2_MacroAssembler masm, mem_float_insn insn,\n+  static void loadStore(C2_MacroAssembler* masm, mem_float_insn insn,\n@@ -2763,2 +2748,2 @@\n-      addr = masm.legitimize_address(addr, size_in_memory, rscratch1);\n-      (masm.*insn)(reg, addr);\n+      addr = __ legitimize_address(addr, size_in_memory, rscratch1);\n+      (masm->*insn)(reg, addr);\n@@ -2767,1 +2752,1 @@\n-      (masm.*insn)(reg, Address(base, as_Register(index), scale));\n+      (masm->*insn)(reg, Address(base, as_Register(index), scale));\n@@ -2771,1 +2756,1 @@\n-  static void loadStore(C2_MacroAssembler masm, mem_vector_insn insn,\n+  static void loadStore(C2_MacroAssembler* masm, mem_vector_insn insn,\n@@ -2776,1 +2761,1 @@\n-      (masm.*insn)(reg, T, Address(base, disp));\n+      (masm->*insn)(reg, T, Address(base, disp));\n@@ -2779,1 +2764,1 @@\n-      (masm.*insn)(reg, T, Address(base, as_Register(index), Address::lsl(size)));\n+      (masm->*insn)(reg, T, Address(base, as_Register(index), Address::lsl(size)));\n@@ -2824,1 +2809,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2834,1 +2818,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsbw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsbw, dst_reg, $mem->opcode(),\n@@ -2842,1 +2826,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsb, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsb, dst_reg, $mem->opcode(),\n@@ -2850,1 +2834,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n@@ -2858,1 +2842,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n@@ -2866,1 +2850,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrshw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrshw, dst_reg, $mem->opcode(),\n@@ -2874,1 +2858,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsh, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsh, dst_reg, $mem->opcode(),\n@@ -2882,1 +2866,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n@@ -2890,1 +2874,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n@@ -2898,1 +2882,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n@@ -2906,1 +2890,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n@@ -2914,1 +2898,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsw, dst_reg, $mem->opcode(),\n@@ -2922,1 +2906,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, $mem->opcode(),\n@@ -2930,1 +2914,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrs, dst_reg, $mem->opcode(),\n@@ -2938,1 +2922,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrd, dst_reg, $mem->opcode(),\n@@ -2946,1 +2930,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strb, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strb, src_reg, $mem->opcode(),\n@@ -2953,2 +2937,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::strb, zr, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strb, zr, $mem->opcode(),\n@@ -2962,1 +2945,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strh, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strh, src_reg, $mem->opcode(),\n@@ -2969,2 +2952,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::strh, zr, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strh, zr, $mem->opcode(),\n@@ -2978,1 +2960,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strw, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strw, src_reg, $mem->opcode(),\n@@ -2985,2 +2967,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::strw, zr, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strw, zr, $mem->opcode(),\n@@ -2997,1 +2978,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -3002,1 +2982,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::str, src_reg, $mem->opcode(),\n@@ -3009,2 +2989,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::str, zr, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::str, zr, $mem->opcode(),\n@@ -3018,1 +2997,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strs, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strs, src_reg, $mem->opcode(),\n@@ -3026,1 +3005,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strd, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strd, src_reg, $mem->opcode(),\n@@ -3033,1 +3012,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -3035,1 +3013,1 @@\n-      loadStore(_masm, &MacroAssembler::strb, zr, $mem->opcode(),\n+      loadStore(masm, &MacroAssembler::strb, zr, $mem->opcode(),\n@@ -3044,1 +3022,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::H,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::H,\n@@ -3050,1 +3028,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::S,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::S,\n@@ -3056,1 +3034,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::D,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::D,\n@@ -3062,1 +3040,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::Q,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::Q,\n@@ -3068,1 +3046,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::H,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::H,\n@@ -3074,1 +3052,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::S,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::S,\n@@ -3080,1 +3058,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::D,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::D,\n@@ -3086,1 +3064,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::Q,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::Q,\n@@ -3202,1 +3180,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -3218,1 +3195,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -3228,1 +3204,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -3239,1 +3214,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3268,1 +3242,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3298,1 +3271,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3306,1 +3278,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3314,1 +3285,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3322,1 +3292,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3335,1 +3304,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3343,1 +3311,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3351,1 +3318,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3359,1 +3325,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3368,1 +3333,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3376,1 +3340,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3397,1 +3360,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3408,1 +3370,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3419,1 +3380,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3445,1 +3405,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3451,1 +3410,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3457,1 +3415,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3462,1 +3419,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3475,1 +3431,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3481,1 +3436,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3496,1 +3450,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3510,1 +3463,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3524,1 +3476,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3532,1 +3483,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3540,1 +3490,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3548,1 +3497,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3558,1 +3506,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3565,1 +3512,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3576,1 +3522,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3584,1 +3529,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3591,1 +3535,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3606,1 +3549,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3614,1 +3556,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3621,1 +3562,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3628,1 +3568,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3634,1 +3573,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3640,1 +3578,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3646,1 +3583,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3652,1 +3588,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3665,1 +3600,0 @@\n-     C2_MacroAssembler _masm(&cbuf);\n@@ -3676,2 +3610,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3693,1 +3625,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -3704,1 +3636,1 @@\n-        cbuf.shared_stub_to_interp_for(_method, call - cbuf.insts_begin());\n+        __ code()->shared_stub_to_interp_for(_method, call - __ begin());\n@@ -3707,1 +3639,1 @@\n-        address stub = CompiledDirectCall::emit_to_interp_stub(cbuf, call);\n+        address stub = CompiledStaticCall::emit_to_interp_stub(masm, call);\n@@ -3724,2 +3656,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    int method_index = resolved_method_index(cbuf);\n+    int method_index = resolved_method_index(masm);\n@@ -3738,1 +3669,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3746,2 +3676,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3778,1 +3706,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3783,1 +3710,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3793,1 +3719,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3799,1 +3724,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -4568,1 +4492,1 @@\n-\/\/ Null Pointer Immediate\n+\/\/ nullptr Pointer Immediate\n@@ -4676,1 +4600,1 @@\n-\/\/ Narrow Null Pointer Immediate\n+\/\/ Narrow nullptr Pointer Immediate\n@@ -6771,1 +6695,1 @@\n-  format %{ \"mov  $dst, $con\\t# null pointer\" %}\n+  format %{ \"mov  $dst, $con\\t# nullptr ptr\" %}\n@@ -6785,1 +6709,1 @@\n-  format %{ \"mov  $dst, $con\\t# null pointer\" %}\n+  format %{ \"mov  $dst, $con\\t# nullptr ptr\" %}\n@@ -6827,1 +6751,1 @@\n-  format %{ \"mov  $dst, $con\\t# compressed null pointer\" %}\n+  format %{ \"mov  $dst, $con\\t# compressed nullptr ptr\" %}\n@@ -7738,1 +7662,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, tmp_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrs, tmp_reg, $mem->opcode(),\n@@ -7779,1 +7703,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, tmp_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrd, tmp_reg, $mem->opcode(),\n@@ -16873,1 +16797,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n@@ -16910,1 +16834,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n@@ -16947,1 +16871,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n@@ -16985,1 +16909,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":78,"deletions":154,"binary":false,"changes":232,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  static void loadStoreA_predicated(C2_MacroAssembler masm, bool is_store, FloatRegister reg,\n+  static void loadStoreA_predicated(C2_MacroAssembler* masm, bool is_store, FloatRegister reg,\n@@ -122,1 +122,1 @@\n-      (masm.*insn)(reg, Assembler::elemType_to_regVariant(vector_elem_bt), pg, Address(base, imm4));\n+      (masm->*insn)(reg, Assembler::elemType_to_regVariant(vector_elem_bt), pg, Address(base, imm4));\n@@ -425,1 +425,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ false,\n+    loadStoreA_predicated(masm, \/* is_store *\/ false,\n@@ -442,1 +442,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ true,\n+    loadStoreA_predicated(masm, \/* is_store *\/ true,\n@@ -457,1 +457,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ false, $dst$$FloatRegister,\n+    loadStoreA_predicated(masm, \/* is_store *\/ false, $dst$$FloatRegister,\n@@ -470,1 +470,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ true, $src$$FloatRegister,\n+    loadStoreA_predicated(masm, \/* is_store *\/ true, $src$$FloatRegister,\n@@ -4932,1 +4932,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -4953,1 +4953,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -4980,1 +4980,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -5008,1 +5008,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -5033,1 +5033,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -5055,1 +5055,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -5081,1 +5081,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -5108,1 +5108,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  static void loadStoreA_predicated(C2_MacroAssembler masm, bool is_store, FloatRegister reg,\n+  static void loadStoreA_predicated(C2_MacroAssembler* masm, bool is_store, FloatRegister reg,\n@@ -112,1 +112,1 @@\n-      (masm.*insn)(reg, Assembler::elemType_to_regVariant(vector_elem_bt), pg, Address(base, imm4));\n+      (masm->*insn)(reg, Assembler::elemType_to_regVariant(vector_elem_bt), pg, Address(base, imm4));\n@@ -364,1 +364,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ false,\n+    loadStoreA_predicated(masm, \/* is_store *\/ false,\n@@ -381,1 +381,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ true,\n+    loadStoreA_predicated(masm, \/* is_store *\/ true,\n@@ -396,1 +396,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ false, $dst$$FloatRegister,\n+    loadStoreA_predicated(masm, \/* is_store *\/ false, $dst$$FloatRegister,\n@@ -409,1 +409,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ true, $src$$FloatRegister,\n+    loadStoreA_predicated(masm, \/* is_store *\/ true, $src$$FloatRegister,\n@@ -3324,1 +3324,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -3345,1 +3345,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -3372,1 +3372,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -3400,1 +3400,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -3425,1 +3425,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -3447,1 +3447,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -3473,1 +3473,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -3500,1 +3500,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-    $4choose(C2_MacroAssembler(&cbuf), $1_reg,$2,$mem->opcode(),\n+    $4choose(masm, $1_reg,$2,$mem->opcode(),\n@@ -62,2 +62,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    choose(_masm,zr,$2,$mem->opcode(),\n+    choose(masm,zr,$2,$mem->opcode(),\n@@ -75,1 +74,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -88,1 +86,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -90,1 +87,1 @@\n-      loadStore(_masm, &MacroAssembler::strb, zr, $mem->opcode(),\n+      loadStore(masm, &MacroAssembler::strb, zr, $mem->opcode(),\n","filename":"src\/hotspot\/cpu\/aarch64\/ad_encode.m4","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -37,4 +37,4 @@\n-#define __ _masm.\n-address CompiledDirectCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n-  precond(cbuf.stubs()->start() != badAddress);\n-  precond(cbuf.stubs()->end() != badAddress);\n+#define __ masm->\n+address CompiledDirectCall::emit_to_interp_stub(MacroAssembler *masm, address mark) {\n+  precond(__ code()->stubs()->start() != badAddress);\n+  precond(__ code()->stubs()->end() != badAddress);\n@@ -48,1 +48,1 @@\n-    mark = cbuf.insts_mark();  \/\/ Get mark within main instrs section.\n+    mark = __ inst_mark();  \/\/ Get mark within main instrs section.\n@@ -51,4 +51,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/compiledIC_aarch64.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -36,1 +35,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -41,1 +40,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -45,1 +43,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -80,1 +78,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ false, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ false, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n@@ -118,1 +116,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ true, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ true, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n@@ -134,1 +132,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -150,1 +148,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -167,1 +165,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -184,1 +182,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -202,1 +200,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -219,1 +217,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -238,1 +236,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -257,1 +255,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoah_aarch64.ad","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,1 @@\n-static void x_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n+static void x_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n@@ -45,1 +45,1 @@\n-static void x_load_barrier_slow_path(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+static void x_load_barrier_slow_path(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n@@ -67,1 +67,1 @@\n-    x_load_barrier(_masm, this, ref_addr, $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, ref_addr, $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n@@ -86,1 +86,1 @@\n-    x_load_barrier(_masm, this, Address($mem$$Register), $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address($mem$$Register), $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n@@ -113,1 +113,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/);\n@@ -145,1 +145,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/ );\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/ );\n@@ -174,1 +174,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n@@ -202,1 +202,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n@@ -223,1 +223,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n@@ -240,1 +240,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/x\/x_aarch64.ad","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-static void z_color(MacroAssembler& _masm, const MachNode* node, Register dst, Register src) {\n+static void z_color(MacroAssembler* masm, const MachNode* node, Register dst, Register src) {\n@@ -43,1 +43,1 @@\n-static void z_uncolor(MacroAssembler& _masm, const MachNode* node, Register ref) {\n+static void z_uncolor(MacroAssembler* masm, const MachNode* node, Register ref) {\n@@ -47,1 +47,1 @@\n-static void z_keep_alive_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+static void z_keep_alive_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n@@ -53,1 +53,1 @@\n-  z_uncolor(_masm, node, ref);\n+  z_uncolor(masm, node, ref);\n@@ -57,2 +57,2 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -64,1 +64,1 @@\n-    z_keep_alive_load_barrier(_masm, node, ref_addr, ref, tmp);\n+    z_keep_alive_load_barrier(masm, node, ref_addr, ref, tmp);\n@@ -69,1 +69,1 @@\n-    z_uncolor(_masm, node, ref);\n+    z_uncolor(masm, node, ref);\n@@ -84,1 +84,1 @@\n-  z_uncolor(_masm, node, ref);\n+  z_uncolor(masm, node, ref);\n@@ -88,2 +88,2 @@\n-static void z_store_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, Register tmp, bool is_atomic) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_store_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, Register tmp, bool is_atomic) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -91,1 +91,1 @@\n-    z_color(_masm, node, rnew_zpointer, rnew_zaddress);\n+    z_color(masm, node, rnew_zpointer, rnew_zaddress);\n@@ -96,1 +96,1 @@\n-    bs_asm->store_barrier_fast(&_masm, ref_addr, rnew_zaddress, rnew_zpointer, tmp, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n+    bs_asm->store_barrier_fast(masm, ref_addr, rnew_zaddress, rnew_zpointer, tmp, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n@@ -116,1 +116,1 @@\n-    z_load_barrier(_masm, this, ref_addr, $dst$$Register, rscratch1);\n+    z_load_barrier(masm, this, ref_addr, $dst$$Register, rscratch1);\n@@ -136,1 +136,1 @@\n-    z_load_barrier(_masm, this, ref_addr, $dst$$Register, rscratch1);\n+    z_load_barrier(masm, this, ref_addr, $dst$$Register, rscratch1);\n@@ -153,1 +153,1 @@\n-    z_store_barrier(_masm, this, ref_addr, $src$$Register, $tmp$$Register, rscratch2, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, ref_addr, $src$$Register, $tmp$$Register, rscratch2, false \/* is_atomic *\/);\n@@ -170,1 +170,1 @@\n-    z_store_barrier(_masm, this, ref_addr, $src$$Register, $tmp$$Register, rscratch2, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, ref_addr, $src$$Register, $tmp$$Register, rscratch2, false \/* is_atomic *\/);\n@@ -190,2 +190,2 @@\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register);\n@@ -214,2 +214,2 @@\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register);\n@@ -238,2 +238,2 @@\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register);\n@@ -242,1 +242,1 @@\n-    z_uncolor(_masm, this, $res$$Register);\n+    z_uncolor(masm, this, $res$$Register);\n@@ -261,2 +261,2 @@\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register);\n@@ -265,1 +265,1 @@\n-    z_uncolor(_masm, this, $res$$Register);\n+    z_uncolor(masm, this, $res$$Register);\n@@ -281,1 +281,1 @@\n-    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, rscratch2, true \/* is_atomic *\/);\n@@ -283,1 +283,1 @@\n-    z_uncolor(_masm, this, $prev$$Register);\n+    z_uncolor(masm, this, $prev$$Register);\n@@ -299,1 +299,1 @@\n-    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, rscratch2, true \/* is_atomic *\/);\n@@ -301,1 +301,1 @@\n-    z_uncolor(_masm, this, $prev$$Register);\n+    z_uncolor(masm, this, $prev$$Register);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1111,2 +1111,1 @@\n-    CodeBuffer* cbuf = masm->code_section()->outer();\n-    address stub = CompiledDirectCall::emit_to_interp_stub(*cbuf, tr_call);\n+    address stub = CompiledDirectCall::emit_to_interp_stub(masm, tr_call);\n@@ -1176,2 +1175,1 @@\n-  CodeBuffer* cbuf = masm->code_section()->outer();\n-  address stub = CompiledDirectCall::emit_to_interp_stub(*cbuf, tr_call);\n+  address stub = CompiledDirectCall::emit_to_interp_stub(masm, tr_call);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -108,2 +108,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -141,1 +141,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -162,2 +162,1 @@\n-void emit_break(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_break(C2_MacroAssembler *masm) {\n@@ -173,2 +172,2 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  emit_break(cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  emit_break(masm);\n@@ -182,2 +181,1 @@\n-void emit_nop(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_nop(C2_MacroAssembler *masm) {\n@@ -188,1 +186,1 @@\n-void emit_call_reloc(CodeBuffer &cbuf, const MachCallNode *n, MachOper *m, RelocationHolder const& rspec) {\n+void emit_call_reloc(C2_MacroAssembler *masm, const MachCallNode *n, MachOper *m, RelocationHolder const& rspec) {\n@@ -190,2 +188,1 @@\n-  int call_site_offset = cbuf.insts()->mark_off();\n-  C2_MacroAssembler _masm(&cbuf);\n+  int call_site_offset = __ code()->insts()->mark_off();\n@@ -213,2 +210,2 @@\n-void emit_lo(CodeBuffer &cbuf, int val) {  }\n-void emit_hi(CodeBuffer &cbuf, int val) {  }\n+void emit_lo(C2_MacroAssembler *masm, int val) {  }\n+void emit_hi(C2_MacroAssembler *masm, int val) {  }\n@@ -235,1 +232,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -238,1 +235,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -306,1 +302,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -308,1 +304,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -337,1 +332,1 @@\n-    bs->nmethod_entry_barrier(&_masm);\n+    bs->nmethod_entry_barrier(masm);\n@@ -341,1 +336,1 @@\n-  if (strcmp(cbuf.name(), \"Compile::Fill_buffer\") == 0) {\n+  if (strcmp(__ code()->name(), \"Compile::Fill_buffer\") == 0) {\n@@ -382,2 +377,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -433,1 +427,1 @@\n-uint MachSpillCopyNode::implementation( CodeBuffer *cbuf,\n+uint MachSpillCopyNode::implementation( C2_MacroAssembler *masm,\n@@ -466,2 +460,0 @@\n-  C2_MacroAssembler _masm(cbuf);\n-\n@@ -473,1 +465,1 @@\n-    if (cbuf && !is_memoryfp(offset)) {\n+    if (masm && !is_memoryfp(offset)) {\n@@ -483,1 +475,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -491,1 +483,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -510,1 +502,1 @@\n-    if (cbuf) {\n+    if (masm) {\n@@ -525,1 +517,1 @@\n-    if (cbuf && !is_memoryI(offset)) {\n+    if (masm && !is_memoryI(offset)) {\n@@ -531,1 +523,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -541,1 +533,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -557,1 +549,1 @@\n-    if (cbuf && !is_memoryI(offset)) {\n+    if (masm && !is_memoryI(offset)) {\n@@ -563,1 +555,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -573,1 +565,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -590,1 +582,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -601,1 +593,1 @@\n-    if (cbuf) {\n+    if (masm) {\n@@ -616,1 +608,1 @@\n-    if (cbuf && !is_memoryfp(offset)) {\n+    if (masm && !is_memoryfp(offset)) {\n@@ -623,1 +615,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -633,1 +625,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -649,1 +641,1 @@\n-    if (cbuf && !is_memoryfp(offset)) {\n+    if (masm && !is_memoryfp(offset)) {\n@@ -656,1 +648,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -666,1 +658,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -686,1 +678,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -696,1 +688,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -715,1 +707,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -725,1 +717,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -749,1 +741,1 @@\n-    if (cbuf) {\n+    if (masm) {\n@@ -766,1 +758,1 @@\n-    if (cbuf && !is_memoryP(offset)) {\n+    if (masm && !is_memoryP(offset)) {\n@@ -770,1 +762,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -785,1 +777,1 @@\n-    if (cbuf && !is_memoryP(offset)) {\n+    if (masm && !is_memoryP(offset)) {\n@@ -789,1 +781,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -807,1 +799,1 @@\n-  implementation(nullptr, ra_, false, st );\n+  implementation( nullptr, ra_, false, st );\n@@ -811,2 +803,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation( &cbuf, ra_, false, nullptr );\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation( masm, ra_, false, nullptr );\n@@ -826,2 +818,1 @@\n-void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc * ) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc * ) const {\n@@ -847,2 +838,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -878,2 +868,1 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachUEPNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -891,3 +880,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler* masm) {\n@@ -912,1 +899,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm) {\n@@ -915,2 +902,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n-\n@@ -1217,1 +1202,1 @@\n-    emit_call_reloc(cbuf, as_MachCall(), $meth, runtime_call_Relocation::spec());\n+    emit_call_reloc(masm, as_MachCall(), $meth, runtime_call_Relocation::spec());\n@@ -1225,1 +1210,1 @@\n-      emit_call_reloc(cbuf, as_MachCall(), $meth, runtime_call_Relocation::spec());\n+      emit_call_reloc(masm, as_MachCall(), $meth, runtime_call_Relocation::spec());\n@@ -1227,1 +1212,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -1230,1 +1215,1 @@\n-      emit_call_reloc(cbuf, as_MachCall(), $meth, rspec);\n+      emit_call_reloc(masm, as_MachCall(), $meth, rspec);\n@@ -1233,1 +1218,1 @@\n-      address stub = CompiledDirectCall::emit_to_interp_stub(cbuf);\n+      address stub = CompiledDirectCall::emit_to_interp_stub(masm);\n@@ -1243,3 +1228,2 @@\n-    address mark = cbuf.insts()->mark();\n-    debug_only(int off0 = cbuf.insts_size());\n-    C2_MacroAssembler _masm(&cbuf);\n+    address mark = __ inst_mark();\n+    debug_only(int off0 = __ offset());\n@@ -1249,1 +1233,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = __ offset());\n@@ -1252,1 +1236,1 @@\n-    cbuf.insts()->set_mark(mark);\n+    __ set_inst_mark(mark);\n@@ -1257,3 +1241,2 @@\n-    address mark = cbuf.insts()->mark();\n-    debug_only(int off0 = cbuf.insts_size());\n-    C2_MacroAssembler _masm(&cbuf);\n+    address mark = __ inst_mark();\n+    debug_only(int off0 = __ offset());\n@@ -1263,1 +1246,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = __ offset());\n@@ -1266,1 +1249,1 @@\n-    cbuf.insts()->set_mark(mark);\n+    __ set_inst_mark(mark);\n@@ -1270,1 +1253,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1275,1 +1257,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1284,1 +1265,1 @@\n-    int method_index = resolved_method_index(cbuf);\n+    int method_index = resolved_method_index(masm);\n@@ -1286,1 +1267,1 @@\n-    emit_call_reloc(cbuf, as_MachCall(), $meth, RelocationHolder::none);\n+    emit_call_reloc(masm, as_MachCall(), $meth, RelocationHolder::none);\n@@ -1303,1 +1284,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1320,1 +1300,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1335,1 +1314,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1427,1 +1405,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1489,1 +1466,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1889,0 +1865,30 @@\n+\/\/ Pointer Immediate\n+operand immN()\n+%{\n+  match(ConN);\n+\n+  op_cost(10);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+operand immNKlass()\n+%{\n+  match(ConNKlass);\n+\n+  op_cost(10);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n+\/\/ nullptr Pointer Immediate\n+operand immN0()\n+%{\n+  predicate(n->get_narrowcon() == 0);\n+  match(ConN);\n+\n+  op_cost(0);\n+  format %{ %}\n+  interface(CONST_INTER);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":97,"deletions":91,"binary":false,"changes":188,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -39,1 +39,1 @@\n-address CompiledDirectCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n+address CompiledDirectCall::emit_to_interp_stub(MacroAssembler *masm, address mark) {\n@@ -46,1 +46,1 @@\n-    mark = cbuf.insts_mark();  \/\/ get mark within main instrs section\n+    mark = __ inst_mark();  \/\/ get mark within main instrs section\n@@ -49,2 +49,0 @@\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/arm\/compiledIC_arm.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -80,2 +80,2 @@\n-#define __ _masm.\n-address CompiledDirectCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark\/* = nullptr*\/) {\n+#define __ masm->\n+address CompiledDirectCall::emit_to_interp_stub(MacroAssembler *masm, address mark\/* = nullptr*\/) {\n@@ -85,1 +85,1 @@\n-    mark = cbuf.insts_mark();\n+    mark = __ inst_mark();\n@@ -88,4 +88,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/ppc\/compiledIC_ppc.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        &_masm,\n+        masm,\n@@ -68,1 +68,1 @@\n-        &_masm,\n+        masm,\n@@ -89,1 +89,1 @@\n-        &_masm,\n+        masm,\n@@ -115,1 +115,1 @@\n-        &_masm,\n+        masm,\n@@ -140,1 +140,1 @@\n-        &_masm,\n+        masm,\n@@ -160,1 +160,1 @@\n-        &_masm,\n+        masm,\n@@ -180,1 +180,1 @@\n-        &_masm,\n+        masm,\n@@ -205,1 +205,1 @@\n-        &_masm,\n+        masm,\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoah_ppc.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-static void x_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref,\n+static void x_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref,\n@@ -48,1 +48,1 @@\n-static void x_load_barrier_slow_path(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref,\n+static void x_load_barrier_slow_path(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref,\n@@ -55,1 +55,1 @@\n-static void x_compare_and_swap(MacroAssembler& _masm, const MachNode* node,\n+static void x_compare_and_swap(MacroAssembler* masm, const MachNode* node,\n@@ -73,1 +73,1 @@\n-    x_load_barrier_slow_path(_masm, node, Address(mem), tmp_xchg, res \/* used as tmp *\/);\n+    x_load_barrier_slow_path(masm, node, Address(mem), tmp_xchg, res \/* used as tmp *\/);\n@@ -92,1 +92,1 @@\n-static void x_compare_and_exchange(MacroAssembler& _masm, const MachNode* node,\n+static void x_compare_and_exchange(MacroAssembler* masm, const MachNode* node,\n@@ -107,1 +107,1 @@\n-    x_load_barrier_slow_path(_masm, node, Address(mem), res, tmp);\n+    x_load_barrier_slow_path(masm, node, Address(mem), res, tmp);\n@@ -141,1 +141,1 @@\n-    x_load_barrier(_masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n+    x_load_barrier(masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n@@ -159,1 +159,1 @@\n-    x_load_barrier(_masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n+    x_load_barrier(masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n@@ -178,1 +178,1 @@\n-    x_compare_and_swap(_masm, this,\n+    x_compare_and_swap(masm, this,\n@@ -196,1 +196,1 @@\n-    x_compare_and_swap(_masm, this,\n+    x_compare_and_swap(masm, this,\n@@ -214,1 +214,1 @@\n-    x_compare_and_swap(_masm, this,\n+    x_compare_and_swap(masm, this,\n@@ -232,1 +232,1 @@\n-    x_compare_and_swap(_masm, this,\n+    x_compare_and_swap(masm, this,\n@@ -253,1 +253,1 @@\n-    x_compare_and_exchange(_masm, this,\n+    x_compare_and_exchange(masm, this,\n@@ -273,1 +273,1 @@\n-    x_compare_and_exchange(_masm, this,\n+    x_compare_and_exchange(masm, this,\n@@ -289,1 +289,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, (intptr_t) 0), $res$$Register, $tmp$$Register, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, (intptr_t) 0), $res$$Register, $tmp$$Register, barrier_data());\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/x\/x_ppc.ad","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-static void z_color(MacroAssembler& _masm, Register dst, Register src) {\n+static void z_color(MacroAssembler* masm, Register dst, Register src) {\n@@ -50,1 +50,1 @@\n-static void z_uncolor(MacroAssembler& _masm, Register ref) {\n+static void z_uncolor(MacroAssembler* masm, Register ref) {\n@@ -54,1 +54,1 @@\n-static void check_color(MacroAssembler& _masm, Register ref, bool on_non_strong) {\n+static void check_color(MacroAssembler* masm, Register ref, bool on_non_strong) {\n@@ -61,2 +61,2 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -64,1 +64,1 @@\n-    z_uncolor(_masm, ref);\n+    z_uncolor(masm, ref);\n@@ -70,1 +70,1 @@\n-    check_color(_masm, ref, on_non_strong);\n+    check_color(masm, ref, on_non_strong);\n@@ -75,1 +75,1 @@\n-    z_uncolor(_masm, ref);\n+    z_uncolor(masm, ref);\n@@ -80,2 +80,2 @@\n-static void z_store_barrier(MacroAssembler& _masm, const MachNode* node, Register ref_base, intptr_t disp, Register rnew_zaddress, Register rnew_zpointer, bool is_atomic) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_store_barrier(MacroAssembler* masm, const MachNode* node, Register ref_base, intptr_t disp, Register rnew_zaddress, Register rnew_zpointer, bool is_atomic) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -83,1 +83,1 @@\n-    z_color(_masm, rnew_zpointer, rnew_zaddress);\n+    z_color(masm, rnew_zpointer, rnew_zaddress);\n@@ -88,1 +88,1 @@\n-    bs_asm->store_barrier_fast(&_masm, ref_base, disp, rnew_zaddress, rnew_zpointer, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n+    bs_asm->store_barrier_fast(masm, ref_base, disp, rnew_zaddress, rnew_zpointer, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n@@ -92,1 +92,1 @@\n-static void z_compare_and_swap(MacroAssembler& _masm, const MachNode* node,\n+static void z_compare_and_swap(MacroAssembler* masm, const MachNode* node,\n@@ -97,2 +97,2 @@\n-  z_store_barrier(_masm, node, mem, 0, newval, rnew_zpointer, true \/* is_atomic *\/);\n-  z_color(_masm, rold_zpointer, oldval);\n+  z_store_barrier(masm, node, mem, 0, newval, rnew_zpointer, true \/* is_atomic *\/);\n+  z_color(masm, rold_zpointer, oldval);\n@@ -114,1 +114,1 @@\n-static void z_compare_and_exchange(MacroAssembler& _masm, const MachNode* node,\n+static void z_compare_and_exchange(MacroAssembler* masm, const MachNode* node,\n@@ -119,2 +119,2 @@\n-  z_store_barrier(_masm, node, mem, 0, newval, rnew_zpointer, true \/* is_atomic *\/);\n-  z_color(_masm, rold_zpointer, oldval);\n+  z_store_barrier(masm, node, mem, 0, newval, rnew_zpointer, true \/* is_atomic *\/);\n+  z_color(masm, rold_zpointer, oldval);\n@@ -124,1 +124,1 @@\n-  z_uncolor(_masm, res);\n+  z_uncolor(masm, res);\n@@ -152,1 +152,1 @@\n-    z_load_barrier(_masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register);\n+    z_load_barrier(masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register);\n@@ -170,1 +170,1 @@\n-    z_load_barrier(_masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register);\n+    z_load_barrier(masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register);\n@@ -189,1 +189,1 @@\n-    z_store_barrier(_masm, this, $mem$$base$$Register, $mem$$disp, $src$$Register, $tmp$$Register, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, $mem$$base$$Register, $mem$$disp, $src$$Register, $tmp$$Register, false \/* is_atomic *\/);\n@@ -203,1 +203,1 @@\n-    z_store_barrier(_masm, this, $mem$$base$$Register, $mem$$disp, noreg, $tmp$$Register, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, $mem$$base$$Register, $mem$$disp, noreg, $tmp$$Register, false \/* is_atomic *\/);\n@@ -220,1 +220,1 @@\n-    z_compare_and_swap(_masm, this,\n+    z_compare_and_swap(masm, this,\n@@ -239,1 +239,1 @@\n-    z_compare_and_swap(_masm, this,\n+    z_compare_and_swap(masm, this,\n@@ -260,1 +260,1 @@\n-    z_compare_and_exchange(_masm, this,\n+    z_compare_and_exchange(masm, this,\n@@ -280,1 +280,1 @@\n-    z_compare_and_exchange(_masm, this,\n+    z_compare_and_exchange(masm, this,\n@@ -296,1 +296,1 @@\n-    z_store_barrier(_masm, this, $mem$$Register, 0, $newval$$Register, rnew_zpointer, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, $mem$$Register, 0, $newval$$Register, rnew_zpointer, true \/* is_atomic *\/);\n@@ -298,1 +298,1 @@\n-    z_uncolor(_masm, result);\n+    z_uncolor(masm, result);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/z_ppc.ad","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -1082,1 +1082,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -1192,2 +1192,1 @@\n-void emit_break(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_break(C2_MacroAssembler *masm) {\n@@ -1203,2 +1202,2 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  emit_break(cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  emit_break(masm);\n@@ -1213,2 +1212,1 @@\n-void emit_nop(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_nop(C2_MacroAssembler *masm) {\n@@ -1218,3 +1216,3 @@\n-static inline void emit_long(CodeBuffer &cbuf, int value) {\n-  *((int*)(cbuf.insts_end())) = value;\n-  cbuf.set_insts_end(cbuf.insts_end() + BytesPerInstWord);\n+static inline void emit_long(C2_MacroAssembler *masm, int value) {\n+  *((int*)(__ pc())) = value;\n+  __ set_inst_end(__ pc() + BytesPerInstWord);\n@@ -1240,1 +1238,1 @@\n-  static void emit_trampoline_stub(C2_MacroAssembler &_masm, int destination_toc_offset, int insts_call_instruction_offset);\n+  static void emit_trampoline_stub(C2_MacroAssembler *masm, int destination_toc_offset, int insts_call_instruction_offset);\n@@ -1271,1 +1269,1 @@\n-void CallStubImpl::emit_trampoline_stub(C2_MacroAssembler &_masm, int destination_toc_offset, int insts_call_instruction_offset) {\n+void CallStubImpl::emit_trampoline_stub(C2_MacroAssembler *masm, int destination_toc_offset, int insts_call_instruction_offset) {\n@@ -1302,1 +1300,1 @@\n-EmitCallOffsets emit_call_with_trampoline_stub(C2_MacroAssembler &_masm, address entry_point, relocInfo::relocType rtype) {\n+EmitCallOffsets emit_call_with_trampoline_stub(C2_MacroAssembler *masm, address entry_point, relocInfo::relocType rtype) {\n@@ -1319,1 +1317,1 @@\n-  CallStubImpl::emit_trampoline_stub(_masm, entry_point_toc_offset, offsets.insts_call_instruction_offset);\n+  CallStubImpl::emit_trampoline_stub(masm, entry_point_toc_offset, offsets.insts_call_instruction_offset);\n@@ -1369,1 +1367,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -1407,1 +1405,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1409,1 +1407,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1559,1 +1556,1 @@\n-    bs->nmethod_entry_barrier(&_masm, push_frame_temp);\n+    bs->nmethod_entry_barrier(masm, push_frame_temp);\n@@ -1562,1 +1559,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -1591,1 +1588,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1593,1 +1590,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1671,1 +1667,1 @@\n-static int ld_st_helper(CodeBuffer *cbuf, const char *op_str, uint opcode, int reg, int offset,\n+static int ld_st_helper(C2_MacroAssembler *masm, const char *op_str, uint opcode, int reg, int offset,\n@@ -1684,1 +1680,1 @@\n-  if (cbuf) {\n+  if (masm) {\n@@ -1689,1 +1685,1 @@\n-    emit_long(*cbuf, opcode | Assembler::rt(Matcher::_regEncode[reg]) | d | Assembler::ra(R1_SP));\n+    emit_long(masm, opcode | Assembler::rt(Matcher::_regEncode[reg]) | d | Assembler::ra(R1_SP));\n@@ -1702,1 +1698,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n@@ -1732,2 +1728,1 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n+      if (masm) {\n@@ -1745,2 +1740,1 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n+      if (masm) {\n@@ -1756,2 +1750,1 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n+      if (masm) {\n@@ -1767,2 +1760,1 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n+      if (masm) {\n@@ -1787,3 +1779,3 @@\n-      size += ld_st_helper(cbuf, \"LD  \", Assembler::LD_OPCODE,  R0_num, src_offset, !do_size, C, st);\n-      if (!cbuf && !do_size) st->print(\"\\n\\t\");\n-      size += ld_st_helper(cbuf, \"STD \", Assembler::STD_OPCODE, R0_num, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LD  \", Assembler::LD_OPCODE,  R0_num, src_offset, !do_size, C, st);\n+      if (!masm && !do_size) st->print(\"\\n\\t\");\n+      size += ld_st_helper(masm, \"STD \", Assembler::STD_OPCODE, R0_num, dst_offset, !do_size, C, st);\n@@ -1791,3 +1783,3 @@\n-      size += ld_st_helper(cbuf, \"LWZ \", Assembler::LWZ_OPCODE, R0_num, src_offset, !do_size, C, st);\n-      if (!cbuf && !do_size) st->print(\"\\n\\t\");\n-      size += ld_st_helper(cbuf, \"STW \", Assembler::STW_OPCODE, R0_num, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LWZ \", Assembler::LWZ_OPCODE, R0_num, src_offset, !do_size, C, st);\n+      if (!masm && !do_size) st->print(\"\\n\\t\");\n+      size += ld_st_helper(masm, \"STW \", Assembler::STW_OPCODE, R0_num, dst_offset, !do_size, C, st);\n@@ -1811,2 +1803,1 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n+      if (masm) {\n@@ -1835,1 +1826,1 @@\n-      size += ld_st_helper(cbuf, \"STD \", Assembler::STD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STD \", Assembler::STD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1837,1 +1828,1 @@\n-      size += ld_st_helper(cbuf, \"STW \", Assembler::STW_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STW \", Assembler::STW_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1848,1 +1839,1 @@\n-      size += ld_st_helper(cbuf, \"LD  \", Assembler::LD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LD  \", Assembler::LD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1850,1 +1841,1 @@\n-      size += ld_st_helper(cbuf, \"LWZ \", Assembler::LWZ_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LWZ \", Assembler::LWZ_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1857,2 +1848,1 @@\n-    if (cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (masm) {\n@@ -1877,1 +1867,1 @@\n-      size += ld_st_helper(cbuf, \"STFD\", Assembler::STFD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STFD\", Assembler::STFD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1879,1 +1869,1 @@\n-      size += ld_st_helper(cbuf, \"STFS\", Assembler::STFS_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STFS\", Assembler::STFS_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1890,1 +1880,1 @@\n-      size += ld_st_helper(cbuf, \"LFD \", Assembler::LFD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LFD \", Assembler::LFD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1892,1 +1882,1 @@\n-      size += ld_st_helper(cbuf, \"LFS \", Assembler::LFS_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LFS \", Assembler::LFS_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1917,2 +1907,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, nullptr);\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation(masm, ra_, false, nullptr);\n@@ -1931,2 +1921,1 @@\n-void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *) const {\n@@ -1952,3 +1941,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1977,1 +1964,1 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachUEPNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1979,2 +1966,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2000,2 +1985,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -2026,3 +2011,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler *masm) {\n@@ -2046,3 +2029,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm) {\n@@ -2424,1 +2405,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2430,1 +2410,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2437,1 +2416,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2444,1 +2422,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2452,2 +2429,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2460,2 +2435,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2469,2 +2442,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2477,2 +2448,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2486,1 +2455,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2495,1 +2463,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2505,1 +2472,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2511,2 +2477,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2534,3 +2498,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2768,2 +2729,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2802,2 +2761,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2938,1 +2895,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2944,1 +2900,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2952,1 +2907,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2958,1 +2912,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3157,2 +3110,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3170,2 +3121,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3183,1 +3132,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3188,3 +3136,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3200,3 +3145,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3212,2 +3154,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3222,2 +3162,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3231,2 +3169,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3260,2 +3196,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3336,1 +3270,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3390,2 +3323,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3396,1 +3327,1 @@\n-      emit_call_with_trampoline_stub(_masm, entry_point, relocInfo::runtime_call_type);\n+      emit_call_with_trampoline_stub(masm, entry_point, relocInfo::runtime_call_type);\n@@ -3416,1 +3347,1 @@\n-      CallStubImpl::emit_trampoline_stub(_masm, entry_point_toc_offset, start_offset);\n+      CallStubImpl::emit_trampoline_stub(masm, entry_point_toc_offset, start_offset);\n@@ -3418,1 +3349,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -3426,1 +3357,1 @@\n-      cbuf.set_insts_mark();\n+      __ set_inst_mark();\n@@ -3430,1 +3361,2 @@\n-      address stub = CompiledDirectCall::emit_to_interp_stub(cbuf);\n+      address stub = CompiledDirectCall::emit_to_interp_stub(masm);\n+      __ clear_inst_mark();\n@@ -3441,3 +3373,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3453,1 +3382,1 @@\n-      CallStubImpl::emit_trampoline_stub(_masm, entry_point_const_toc_offset, __ offset());\n+      CallStubImpl::emit_trampoline_stub(masm, entry_point_const_toc_offset, __ offset());\n@@ -3469,1 +3398,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -3544,1 +3473,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3567,1 +3495,1 @@\n-      emit_call_with_trampoline_stub(_masm, (address)$meth$$method, relocInfo::none);\n+      emit_call_with_trampoline_stub(masm, (address)$meth$$method, relocInfo::none);\n@@ -3598,2 +3526,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3633,1 +3559,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -4088,1 +4013,1 @@\n-\/\/ Null Pointer Immediate\n+\/\/ nullptr Pointer Immediate\n@@ -14584,1 +14509,1 @@\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -14586,0 +14511,1 @@\n+    __ clear_inst_mark();\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":62,"deletions":136,"binary":false,"changes":198,"status":"modified"},{"patch":"@@ -1763,2 +1763,1 @@\n-    CodeBuffer* cbuf = masm->code_section()->outer();\n-    stub = CompiledDirectCall::emit_to_interp_stub(*cbuf, c2i_call_pc);\n+    stub = CompiledDirectCall::emit_to_interp_stub(masm, c2i_call_pc);\n@@ -1856,2 +1855,1 @@\n-  CodeBuffer* cbuf = masm->code_section()->outer();\n-  stub = CompiledDirectCall::emit_to_interp_stub(*cbuf, call_pc);\n+  stub = CompiledDirectCall::emit_to_interp_stub(masm, call_pc);\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,4 +38,4 @@\n-#define __ _masm.\n-address CompiledDirectCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n-  precond(cbuf.stubs()->start() != badAddress);\n-  precond(cbuf.stubs()->end() != badAddress);\n+#define __ masm->\n+address CompiledDirectCall::emit_to_interp_stub(MacroAssembler *masm, address mark) {\n+  precond(__ code()->stubs()->start() != badAddress);\n+  precond(__ code()->stubs()->end() != badAddress);\n@@ -48,1 +48,1 @@\n-    mark = cbuf.insts_mark();  \/\/ Get mark within main instrs section.\n+    mark = __ inst_mark();  \/\/ Get mark within main instrs section.\n@@ -51,4 +51,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/compiledIC_riscv.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -65,1 +65,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -87,1 +87,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -109,1 +109,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -129,1 +129,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -149,1 +149,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -171,1 +171,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -192,1 +192,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -213,1 +213,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -233,1 +233,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -256,1 +256,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -279,1 +279,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoah_riscv.ad","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,1 @@\n-static void x_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, int barrier_data) {\n+static void x_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, int barrier_data) {\n@@ -46,1 +46,1 @@\n-static void x_load_barrier_slow_path(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+static void x_load_barrier_slow_path(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n@@ -68,1 +68,1 @@\n-    x_load_barrier(_masm, this, ref_addr, $dst$$Register, $tmp$$Register \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, ref_addr, $dst$$Register, $tmp$$Register \/* tmp *\/, barrier_data());\n@@ -97,1 +97,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $tmp$$Register \/* ref *\/, $res$$Register \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), $tmp$$Register \/* ref *\/, $res$$Register \/* tmp *\/);\n@@ -131,1 +131,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $tmp$$Register \/* ref *\/, $res$$Register \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), $tmp$$Register \/* ref *\/, $res$$Register \/* tmp *\/);\n@@ -160,1 +160,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, $tmp$$Register \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, $tmp$$Register \/* tmp *\/);\n@@ -188,1 +188,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, $tmp$$Register \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, $tmp$$Register \/* tmp *\/);\n@@ -209,1 +209,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, $tmp$$Register \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, $tmp$$Register \/* tmp *\/, barrier_data());\n@@ -226,1 +226,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, $tmp$$Register \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, $tmp$$Register \/* tmp *\/, barrier_data());\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/x\/x_riscv.ad","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-static void z_color(MacroAssembler& _masm, const MachNode* node, Register dst, Register src, Register tmp) {\n+static void z_color(MacroAssembler* masm, const MachNode* node, Register dst, Register src, Register tmp) {\n@@ -46,1 +46,1 @@\n-static void z_uncolor(MacroAssembler& _masm, const MachNode* node, Register ref) {\n+static void z_uncolor(MacroAssembler* masm, const MachNode* node, Register ref) {\n@@ -50,1 +50,1 @@\n-static void check_color(MacroAssembler& _masm, Register ref, bool on_non_strong, Register result) {\n+static void check_color(MacroAssembler* masm, Register ref, bool on_non_strong, Register result) {\n@@ -59,1 +59,1 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+static void z_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n@@ -65,1 +65,1 @@\n-    z_uncolor(_masm, node, ref);\n+    z_uncolor(masm, node, ref);\n@@ -71,1 +71,1 @@\n-  check_color(_masm, ref, on_non_strong, tmp);\n+  check_color(masm, ref, on_non_strong, tmp);\n@@ -76,1 +76,1 @@\n-  z_uncolor(_masm, node, ref);\n+  z_uncolor(masm, node, ref);\n@@ -80,1 +80,1 @@\n-static void z_store_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, Register tmp, bool is_atomic) {\n+static void z_store_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, Register tmp, bool is_atomic) {\n@@ -82,1 +82,1 @@\n-    z_color(_masm, node, rnew_zpointer, rnew_zaddress, tmp);\n+    z_color(masm, node, rnew_zpointer, rnew_zaddress, tmp);\n@@ -87,1 +87,1 @@\n-    bs_asm->store_barrier_fast(&_masm, ref_addr, rnew_zaddress, rnew_zpointer, tmp, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n+    bs_asm->store_barrier_fast(masm, ref_addr, rnew_zaddress, rnew_zpointer, tmp, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n@@ -106,1 +106,1 @@\n-    z_load_barrier(_masm, this, ref_addr, $dst$$Register, $tmp$$Register);\n+    z_load_barrier(masm, this, ref_addr, $dst$$Register, $tmp$$Register);\n@@ -123,1 +123,1 @@\n-    z_store_barrier(_masm, this, ref_addr, $src$$Register, $tmp1$$Register, $tmp2$$Register, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, ref_addr, $src$$Register, $tmp1$$Register, $tmp2$$Register, false \/* is_atomic *\/);\n@@ -144,2 +144,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n@@ -167,2 +167,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n@@ -188,2 +188,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n@@ -191,1 +191,1 @@\n-    z_uncolor(_masm, this, $res$$Register);\n+    z_uncolor(masm, this, $res$$Register);\n@@ -210,2 +210,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, $tmp1$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, $tmp1$$Register, true \/* is_atomic *\/);\n@@ -213,1 +213,1 @@\n-    z_uncolor(_masm, this, $res$$Register);\n+    z_uncolor(masm, this, $res$$Register);\n@@ -229,1 +229,1 @@\n-    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, $tmp$$Register, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, $tmp$$Register, true \/* is_atomic *\/);\n@@ -231,1 +231,1 @@\n-    z_uncolor(_masm, this, $prev$$Register);\n+    z_uncolor(masm, this, $prev$$Register);\n@@ -247,1 +247,1 @@\n-    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, $tmp$$Register, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, $tmp$$Register, true \/* is_atomic *\/);\n@@ -249,1 +249,1 @@\n-    z_uncolor(_masm, this, $prev$$Register);\n+    z_uncolor(masm, this, $prev$$Register);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/z_riscv.ad","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1063,2 +1063,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -1210,1 +1210,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -1294,2 +1294,1 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1311,3 +1310,2 @@\n-  void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc*) const {\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::CompressibleRegion cr(&_masm); \/\/ nops shall be 2-byte under RVC for alignment purposes.\n+  void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc*) const {\n+    Assembler::CompressibleRegion cr(masm); \/\/ nops shall be 2-byte under RVC for alignment purposes.\n@@ -1335,1 +1333,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -1379,1 +1377,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1382,1 +1380,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1390,1 +1387,1 @@\n-    Assembler::IncompressibleRegion ir(&_masm);  \/\/ keep the nop as 4 bytes for patching.\n+    Assembler::IncompressibleRegion ir(masm);  \/\/ keep the nop as 4 bytes for patching.\n@@ -1434,1 +1431,1 @@\n-      bs->nmethod_entry_barrier(&_masm, slow_path, continuation, guard);\n+      bs->nmethod_entry_barrier(masm, slow_path, continuation, guard);\n@@ -1442,1 +1439,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -1493,1 +1490,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1496,1 +1493,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1570,1 +1566,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n@@ -1604,2 +1600,1 @@\n-    if (ireg == Op_VecA && cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (ireg == Op_VecA && masm) {\n@@ -1623,2 +1618,1 @@\n-    } else if (bottom_type()->isa_vectmask() && cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    } else if (bottom_type()->isa_vectmask() && masm) {\n@@ -1643,2 +1637,1 @@\n-  } else if (cbuf != nullptr) {\n-    C2_MacroAssembler _masm(cbuf);\n+  } else if (masm != nullptr) {\n@@ -1756,2 +1749,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, nullptr);\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation(masm, ra_, false, nullptr);\n@@ -1776,3 +1769,2 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-  Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see BoxLockNode::size()\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see BoxLockNode::size()\n@@ -1823,1 +1815,1 @@\n-void MachUEPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachUEPNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const\n@@ -1826,1 +1818,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1845,1 +1836,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler* masm)\n@@ -1851,1 +1842,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1865,1 +1855,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm)\n@@ -1867,3 +1857,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a handler.\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2204,1 +2191,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2211,1 +2197,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2230,1 +2215,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2236,1 +2220,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2241,1 +2224,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2254,1 +2236,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2260,1 +2241,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2273,1 +2253,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2280,1 +2259,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2287,1 +2265,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2294,1 +2271,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2301,1 +2277,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2308,1 +2283,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2317,1 +2291,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2323,1 +2296,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2347,1 +2319,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2366,2 +2337,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n+    Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see ret_addr_offset\n@@ -2385,1 +2355,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -2397,1 +2367,1 @@\n-        cbuf.shared_stub_to_interp_for(_method, call - cbuf.insts_begin());\n+        __ code()->shared_stub_to_interp_for(_method, call - (__ begin()));\n@@ -2400,1 +2370,1 @@\n-        address stub = CompiledDirectCall::emit_to_interp_stub(cbuf, call);\n+        address stub = CompiledDirectCall::emit_to_interp_stub(masm, call);\n@@ -2412,3 +2382,2 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n-    int method_index = resolved_method_index(cbuf);\n+    Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see ret_addr_offset\n+    int method_index = resolved_method_index(masm);\n@@ -2425,1 +2394,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2433,2 +2401,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n+    Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see ret_addr_offset\n@@ -2466,1 +2433,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2474,1 +2440,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2482,1 +2447,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2490,1 +2454,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2498,1 +2461,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2506,1 +2468,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2514,1 +2475,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2522,1 +2482,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2530,1 +2489,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2536,1 +2494,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2546,1 +2503,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2551,1 +2507,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":30,"deletions":75,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  static void loadStore(C2_MacroAssembler masm, bool is_store,\n+  static void loadStore(C2_MacroAssembler* masm, bool is_store,\n@@ -37,1 +37,1 @@\n-    masm.vsetvli_helper(bt, vector_length);\n+    __ vsetvli_helper(bt, vector_length);\n@@ -40,1 +40,1 @@\n-      masm.vsex_v(reg, base, sew, vm);\n+      __ vsex_v(reg, base, sew, vm);\n@@ -43,1 +43,1 @@\n-        masm.vxor_vv(reg, reg, reg);\n+        __ vxor_vv(reg, reg, reg);\n@@ -45,1 +45,1 @@\n-      masm.vlex_v(reg, base, sew, vm);\n+      __ vlex_v(reg, base, sew, vm);\n@@ -111,1 +111,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), false, dst_reg,\n+    loadStore(masm, false, dst_reg,\n@@ -123,1 +123,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), true, src_reg,\n+    loadStore(masm, true, src_reg,\n@@ -3157,1 +3157,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), false, dst_reg,\n+    loadStore(masm, false, dst_reg,\n@@ -3169,1 +3169,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), true, src_reg,\n+    loadStore(masm, true, src_reg,\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -977,2 +977,1 @@\n-    CodeBuffer* cbuf = masm->code_section()->outer();\n-    address stub = CompiledDirectCall::emit_to_interp_stub(*cbuf, tr_call);\n+    address stub = CompiledDirectCall::emit_to_interp_stub(masm, tr_call);\n@@ -1043,2 +1042,1 @@\n-  CodeBuffer* cbuf = masm->code_section()->outer();\n-  address stub = CompiledDirectCall::emit_to_interp_stub(*cbuf, tr_call);\n+  address stub = CompiledDirectCall::emit_to_interp_stub(masm, tr_call);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -42,1 +42,1 @@\n-address CompiledDirectCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark\/* = nullptr*\/) {\n+address CompiledDirectCall::emit_to_interp_stub(MacroAssembler *masm, address mark\/* = nullptr*\/) {\n@@ -48,1 +48,1 @@\n-    mark = cbuf.insts_mark();\n+    mark = __ inst_mark();\n@@ -52,4 +52,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/s390\/compiledIC_s390.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -587,1 +587,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -669,2 +669,1 @@\n-void emit_nop(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_nop(C2_MacroAssembler *masm) {\n@@ -675,2 +674,1 @@\n-void emit_break(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_break(C2_MacroAssembler *masm) {\n@@ -686,2 +684,2 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  emit_break(cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  emit_break(masm);\n@@ -694,2 +692,1 @@\n-static inline void z_emit16(CodeBuffer &cbuf, long value) {\n-  C2_MacroAssembler _masm(&cbuf);\n+static inline void z_emit16(C2_MacroAssembler *masm, long value) {\n@@ -699,2 +696,1 @@\n-static inline void z_emit32(CodeBuffer &cbuf, long value) {\n-  C2_MacroAssembler _masm(&cbuf);\n+static inline void z_emit32(C2_MacroAssembler *masm, long value) {\n@@ -704,2 +700,1 @@\n-static inline void z_emit48(CodeBuffer &cbuf, long value) {\n-  C2_MacroAssembler _masm(&cbuf);\n+static inline void z_emit48(C2_MacroAssembler *masm, long value) {\n@@ -709,1 +704,1 @@\n-static inline unsigned int z_emit_inst(CodeBuffer &cbuf, long value) {\n+static inline unsigned int z_emit_inst(C2_MacroAssembler *masm, long value) {\n@@ -715,1 +710,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -721,3 +715,1 @@\n-static inline void z_assert_aligned(CodeBuffer &cbuf, int disp, Register index, Register base, int alignment) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+static inline void z_assert_aligned(C2_MacroAssembler *masm, int disp, Register index, Register base, int alignment) {\n@@ -730,1 +722,1 @@\n-int emit_call_reloc(C2_MacroAssembler &_masm, intptr_t entry_point, relocInfo::relocType rtype,\n+int emit_call_reloc(C2_MacroAssembler *masm, intptr_t entry_point, relocInfo::relocType rtype,\n@@ -761,1 +753,1 @@\n-static int emit_call_reloc(C2_MacroAssembler &_masm, intptr_t entry_point, RelocationHolder const& rspec) {\n+static int emit_call_reloc(C2_MacroAssembler *masm, intptr_t entry_point, RelocationHolder const& rspec) {\n@@ -793,2 +785,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -844,1 +835,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -846,1 +837,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -895,1 +885,1 @@\n-    bs->nmethod_entry_barrier(&_masm);\n+    bs->nmethod_entry_barrier(masm);\n@@ -898,1 +888,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -924,2 +914,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -993,1 +982,1 @@\n-static unsigned int z_ld_st_helper(CodeBuffer *cbuf, const char *op_str, unsigned long opcode,\n+static unsigned int z_ld_st_helper(C2_MacroAssembler *masm, const char *op_str, unsigned long opcode,\n@@ -996,1 +985,1 @@\n-  if (cbuf) {\n+  if (masm) {\n@@ -998,1 +987,1 @@\n-      return z_emit_inst(*cbuf, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 48) |\n+      return z_emit_inst(masm, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 48) |\n@@ -1001,1 +990,1 @@\n-      return z_emit_inst(*cbuf, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 32) |\n+      return z_emit_inst(masm, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 32) |\n@@ -1014,3 +1003,2 @@\n-static unsigned int z_mvc_helper(CodeBuffer *cbuf, int len, int dst_off, int src_off, bool do_print, outputStream *os) {\n-  if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n+static unsigned int z_mvc_helper(C2_MacroAssembler *masm, int len, int dst_off, int src_off, bool do_print, outputStream *os) {\n+  if (masm) {\n@@ -1029,1 +1017,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *os) const {\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *os) const {\n@@ -1069,1 +1057,1 @@\n-      return z_mvc_helper(cbuf, is64 ? 8 : 4, dst_offset, src_offset, print, os);\n+      return z_mvc_helper(masm, is64 ? 8 : 4, dst_offset, src_offset, print, os);\n@@ -1074,2 +1062,2 @@\n-      return z_ld_st_helper(cbuf, \"LG  \", LG_ZOPC, r0, src_offset, print, os) +\n-             z_ld_st_helper(cbuf, \"STG \", STG_ZOPC, r0, dst_offset, print, os);\n+      return z_ld_st_helper(masm, \"LG  \", LG_ZOPC, r0, src_offset, print, os) +\n+             z_ld_st_helper(masm, \"STG \", STG_ZOPC, r0, dst_offset, print, os);\n@@ -1078,2 +1066,2 @@\n-    return z_ld_st_helper(cbuf, \"LY   \", LY_ZOPC, r0, src_offset, print, os) +\n-           z_ld_st_helper(cbuf, \"STY  \", STY_ZOPC, r0, dst_offset, print, os);\n+    return z_ld_st_helper(masm, \"LY   \", LY_ZOPC, r0, src_offset, print, os) +\n+           z_ld_st_helper(masm, \"STY  \", STY_ZOPC, r0, dst_offset, print, os);\n@@ -1089,2 +1077,1 @@\n-    if (cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (masm) {\n@@ -1111,1 +1098,1 @@\n-      return z_ld_st_helper(cbuf, \"STG \", STG_ZOPC, src_lo, dst_offset, print, os);\n+      return z_ld_st_helper(masm, \"STG \", STG_ZOPC, src_lo, dst_offset, print, os);\n@@ -1118,1 +1105,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, src_lo, dst_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, src_lo, dst_offset, print, os);\n@@ -1131,1 +1118,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, dst_lo, src_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, dst_lo, src_offset, print, os);\n@@ -1136,2 +1123,1 @@\n-    if (cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (masm) {\n@@ -1160,1 +1146,1 @@\n-      return z_ld_st_helper(cbuf, mnemo, opc, src_lo, dst_offset, print, os);\n+      return z_ld_st_helper(masm, mnemo, opc, src_lo, dst_offset, print, os);\n@@ -1166,1 +1152,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, src_lo, dst_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, src_lo, dst_offset, print, os);\n@@ -1177,1 +1163,1 @@\n-      return z_ld_st_helper(cbuf, mnemo, opc, dst_lo, src_offset, print, os);\n+      return z_ld_st_helper(masm, mnemo, opc, dst_lo, src_offset, print, os);\n@@ -1183,1 +1169,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, dst_lo, src_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, dst_lo, src_offset, print, os);\n@@ -1219,2 +1205,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, nullptr);\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation(masm, ra_, false, nullptr);\n@@ -1235,3 +1221,1 @@\n-void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc * ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc * ra_) const {\n@@ -1240,1 +1224,1 @@\n-    rem_space = cbuf.insts()->remaining();\n+    rem_space = __ code()->insts()->remaining();\n@@ -1252,1 +1236,1 @@\n-      int rem_space2 = cbuf.insts()->remaining();\n+      int rem_space2 = __ code()->insts()->remaining();\n@@ -1275,3 +1259,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1343,1 +1325,1 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachUEPNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1345,1 +1327,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1363,2 +1344,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -1402,1 +1383,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer &cbuf) {\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler *masm) {\n@@ -1404,1 +1385,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1425,2 +1405,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm) {\n@@ -1704,1 +1683,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1710,1 +1688,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1718,1 +1695,1 @@\n-    z_emit16(cbuf, $primary |\n+    z_emit16(masm, $primary |\n@@ -1725,1 +1702,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1732,1 +1709,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1740,1 +1717,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1747,1 +1724,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1754,1 +1731,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1762,1 +1739,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1769,1 +1746,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1775,1 +1752,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1782,1 +1759,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1791,1 +1768,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1800,1 +1777,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1807,1 +1784,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1815,1 +1792,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1828,1 +1805,1 @@\n-    z_emit_inst(cbuf, $primary |\n+    z_emit_inst(masm, $primary |\n@@ -1835,1 +1812,1 @@\n-    z_emit_inst(cbuf, $primary |\n+    z_emit_inst(masm, $primary |\n@@ -1846,1 +1823,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1852,1 +1829,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1864,1 +1841,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1870,1 +1847,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1884,1 +1861,1 @@\n-      z_emit_inst(cbuf, $secondary |\n+      z_emit_inst(masm, $secondary |\n@@ -1890,1 +1867,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1896,1 +1873,0 @@\n-        C2_MacroAssembler _masm(&cbuf);\n@@ -1899,1 +1875,1 @@\n-        z_emit_inst(cbuf, $secondary |\n+        z_emit_inst(masm, $secondary |\n@@ -1908,1 +1884,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1921,1 +1896,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1934,1 +1908,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1947,1 +1920,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1960,1 +1932,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1984,1 +1955,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2010,1 +1980,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2035,1 +2004,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2062,2 +2030,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2090,1 +2056,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2094,1 +2059,1 @@\n-      ret_offset = emit_call_reloc(_masm, $meth$$method,\n+      ret_offset = emit_call_reloc(masm, $meth$$method,\n@@ -2097,1 +2062,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -2099,1 +2064,1 @@\n-        ret_offset = emit_call_reloc(_masm, $meth$$method,\n+        ret_offset = emit_call_reloc(masm, $meth$$method,\n@@ -2102,1 +2067,1 @@\n-        ret_offset = emit_call_reloc(_masm, $meth$$method,\n+        ret_offset = emit_call_reloc(masm, $meth$$method,\n@@ -2109,1 +2074,1 @@\n-      address stub = CompiledDirectCall::emit_to_interp_stub(cbuf);\n+      address stub = CompiledDirectCall::emit_to_interp_stub(masm);\n@@ -2111,0 +2076,1 @@\n+        __ clear_inst_mark();\n@@ -2115,0 +2081,2 @@\n+\n+    __ clear_inst_mark();\n@@ -2119,1 +2087,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2137,1 +2104,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -2141,1 +2108,2 @@\n-      ret_off += emit_call_reloc(_masm, $meth$$method, relocInfo::none, ra_);\n+      ret_off += emit_call_reloc(masm, $meth$$method, relocInfo::none, ra_);\n+      __ clear_inst_mark();\n@@ -2174,1 +2142,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2195,1 +2162,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2212,1 +2178,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2229,1 +2194,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2238,1 +2202,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2247,1 +2210,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2263,1 +2225,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -9561,1 +9522,1 @@\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -9564,0 +9525,1 @@\n+    __ clear_inst_mark();\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":85,"deletions":123,"binary":false,"changes":208,"status":"modified"},{"patch":"@@ -4255,0 +4255,1 @@\n+  InstructionMark im(this);\n@@ -4263,0 +4264,1 @@\n+  InstructionMark im(this);\n@@ -4698,0 +4700,1 @@\n+  InstructionMark im(this);\n@@ -4715,0 +4718,1 @@\n+  InstructionMark im(this);\n@@ -4732,0 +4736,1 @@\n+  InstructionMark im(this);\n@@ -4749,0 +4754,1 @@\n+  InstructionMark im(this);\n@@ -4766,0 +4772,1 @@\n+  InstructionMark im(this);\n@@ -4790,0 +4797,1 @@\n+  InstructionMark im(this);\n@@ -4814,0 +4822,1 @@\n+  InstructionMark im(this);\n@@ -4831,0 +4840,1 @@\n+  InstructionMark im(this);\n@@ -13321,0 +13331,1 @@\n+  InstructionMark im(this);\n@@ -13326,0 +13337,1 @@\n+  InstructionMark im(this);\n@@ -13331,0 +13343,1 @@\n+  InstructionMark im(this);\n@@ -13336,0 +13349,1 @@\n+  InstructionMark im(this);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-#define __ _masm.\n+#define __ _masm->\n@@ -123,1 +123,1 @@\n-IntelJccErratumAlignment::IntelJccErratumAlignment(MacroAssembler& masm, int jcc_size) :\n+IntelJccErratumAlignment::IntelJccErratumAlignment(MacroAssembler* masm, int jcc_size) :\n","filename":"src\/hotspot\/cpu\/x86\/c2_intelJccErratum_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-  MacroAssembler& _masm;\n+  MacroAssembler* _masm;\n@@ -63,1 +63,1 @@\n-  IntelJccErratumAlignment(MacroAssembler& masm, int jcc_size);\n+  IntelJccErratumAlignment(MacroAssembler* masm, int jcc_size);\n","filename":"src\/hotspot\/cpu\/x86\/c2_intelJccErratum_x86.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-#define __ _masm.\n-address CompiledDirectCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n+#define __ masm->\n+address CompiledDirectCall::emit_to_interp_stub(MacroAssembler *masm, address mark) {\n@@ -45,1 +45,1 @@\n-    mark = cbuf.insts_mark();  \/\/ Get mark within main instrs section.\n+    mark = __ inst_mark();  \/\/ Get mark within main instrs section.\n@@ -48,4 +48,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/x86\/compiledIC_x86.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n@@ -64,1 +64,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoah_x86_32.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n@@ -64,1 +64,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n@@ -83,1 +83,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n@@ -104,1 +104,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoah_x86_64.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-extern void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+extern void vec_spill_helper(C2_MacroAssembler *masm, bool is_load,\n@@ -440,1 +440,2 @@\n-    vec_spill_helper(__ code(), false \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n+    C2_MacroAssembler c2_masm(__ code());\n+    vec_spill_helper(&c2_masm, false \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n@@ -446,1 +447,2 @@\n-    vec_spill_helper(__ code(), true \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n+    C2_MacroAssembler c2_masm(__ code());\n+    vec_spill_helper(&c2_masm, true \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/x\/xBarrierSetAssembler_x86.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-\/\/ Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+\/\/ Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,1 @@\n-static void x_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n+static void x_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n@@ -42,1 +42,1 @@\n-    IntelJccErratumAlignment intel_alignment(_masm, 10 \/* jcc_size *\/);\n+    IntelJccErratumAlignment intel_alignment(masm, 10 \/* jcc_size *\/);\n@@ -49,1 +49,1 @@\n-static void x_load_barrier_cmpxchg(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, Label& good) {\n+static void x_load_barrier_cmpxchg(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, Label& good) {\n@@ -52,1 +52,1 @@\n-    IntelJccErratumAlignment intel_alignment(_masm, 10 \/* jcc_size *\/);\n+    IntelJccErratumAlignment intel_alignment(masm, 10 \/* jcc_size *\/);\n@@ -57,1 +57,1 @@\n-    IntelJccErratumAlignment intel_alignment(_masm, 5 \/* jcc_size *\/);\n+    IntelJccErratumAlignment intel_alignment(masm, 5 \/* jcc_size *\/);\n@@ -63,1 +63,1 @@\n-static void x_cmpxchg_common(MacroAssembler& _masm, const MachNode* node, Register mem_reg, Register newval, Register tmp) {\n+static void x_cmpxchg_common(MacroAssembler* masm, const MachNode* node, Register mem_reg, Register newval, Register tmp) {\n@@ -76,1 +76,1 @@\n-    x_load_barrier_cmpxchg(_masm, node, mem, rax, tmp, good);\n+    x_load_barrier_cmpxchg(masm, node, mem, rax, tmp, good);\n@@ -99,1 +99,1 @@\n-    x_load_barrier(_masm, this, $mem$$Address, $dst$$Register, noreg \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, $mem$$Address, $dst$$Register, noreg \/* tmp *\/, barrier_data());\n@@ -115,1 +115,1 @@\n-    x_cmpxchg_common(_masm, this, $mem$$Register, $newval$$Register, $tmp$$Register);\n+    x_cmpxchg_common(masm, this, $mem$$Register, $newval$$Register, $tmp$$Register);\n@@ -134,1 +134,1 @@\n-    x_cmpxchg_common(_masm, this, $mem$$Register, $newval$$Register, $tmp$$Register);\n+    x_cmpxchg_common(masm, this, $mem$$Register, $newval$$Register, $tmp$$Register);\n@@ -154,1 +154,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $newval$$Register, noreg \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, 0), $newval$$Register, noreg \/* tmp *\/, barrier_data());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/x\/x_x86_64.ad","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -359,1 +359,1 @@\n-  IntelJccErratumAlignment intel_alignment(*masm, size);\n+  IntelJccErratumAlignment intel_alignment(masm, size);\n@@ -1187,1 +1187,1 @@\n-extern void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+extern void vec_spill_helper(C2_MacroAssembler *masm, bool is_load,\n@@ -1249,1 +1249,2 @@\n-    vec_spill_helper(__ code(), false \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n+    C2_MacroAssembler c2_masm(__ code());\n+    vec_spill_helper(&c2_masm, false \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n@@ -1255,1 +1256,2 @@\n-    vec_spill_helper(__ code(), true \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n+    C2_MacroAssembler c2_masm(__ code());\n+    vec_spill_helper(&c2_masm, true \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-static void z_color(MacroAssembler& _masm, const MachNode* node, Register ref) {\n+static void z_color(MacroAssembler* masm, const MachNode* node, Register ref) {\n@@ -44,1 +44,1 @@\n-static void z_uncolor(MacroAssembler& _masm, const MachNode* node, Register ref) {\n+static void z_uncolor(MacroAssembler* masm, const MachNode* node, Register ref) {\n@@ -49,1 +49,1 @@\n-static void z_keep_alive_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref) {\n+static void z_keep_alive_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref) {\n@@ -56,1 +56,1 @@\n-  z_uncolor(_masm, node, ref);\n+  z_uncolor(masm, node, ref);\n@@ -61,2 +61,2 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -68,1 +68,1 @@\n-    z_keep_alive_load_barrier(_masm, node, ref_addr, ref);\n+    z_keep_alive_load_barrier(masm, node, ref_addr, ref);\n@@ -72,1 +72,1 @@\n-  z_uncolor(_masm, node, ref);\n+  z_uncolor(masm, node, ref);\n@@ -78,1 +78,1 @@\n-    IntelJccErratumAlignment intel_alignment(_masm, 6);\n+    IntelJccErratumAlignment intel_alignment(masm, 6);\n@@ -84,2 +84,2 @@\n-static void z_store_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, bool is_atomic) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_store_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, bool is_atomic) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -90,1 +90,1 @@\n-      z_color(_masm, node, rnew_zpointer);\n+      z_color(masm, node, rnew_zpointer);\n@@ -96,1 +96,1 @@\n-    bs_asm->store_barrier_fast(&_masm, ref_addr, rnew_zaddress, rnew_zpointer, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n+    bs_asm->store_barrier_fast(masm, ref_addr, rnew_zaddress, rnew_zpointer, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n@@ -127,1 +127,1 @@\n-    z_load_barrier(_masm, this, $mem$$Address, $dst$$Register);\n+    z_load_barrier(masm, this, $mem$$Address, $dst$$Register);\n@@ -159,1 +159,1 @@\n-    z_store_barrier(_masm, this, $mem$$Address, $src$$Register, $tmp$$Register, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, $mem$$Address, $src$$Register, $tmp$$Register, false \/* is_atomic *\/);\n@@ -175,1 +175,1 @@\n-    z_store_barrier(_masm, this, $mem$$Address, noreg, $tmp$$Register, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, $mem$$Address, noreg, $tmp$$Register, false \/* is_atomic *\/);\n@@ -197,2 +197,2 @@\n-    z_store_barrier(_masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval$$Register);\n+    z_store_barrier(masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval$$Register);\n@@ -201,1 +201,1 @@\n-    z_uncolor(_masm, this, $oldval$$Register);\n+    z_uncolor(masm, this, $oldval$$Register);\n@@ -221,2 +221,2 @@\n-    z_store_barrier(_masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval$$Register);\n+    z_store_barrier(masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval$$Register);\n@@ -242,1 +242,1 @@\n-    z_store_barrier(_masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n@@ -245,1 +245,1 @@\n-    z_uncolor(_masm, this, $newval$$Register);\n+    z_uncolor(masm, this, $newval$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/z_x86_64.ad","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1444,2 +1444,1 @@\n-    CodeBuffer* cbuf = masm->code_section()->outer();\n-    address stub = CompiledDirectCall::emit_to_interp_stub(*cbuf, __ pc());\n+    address stub = CompiledDirectCall::emit_to_interp_stub(masm, __ pc());\n@@ -1481,2 +1480,1 @@\n-  CodeBuffer* cbuf = masm->code_section()->outer();\n-  address stub = CompiledDirectCall::emit_to_interp_stub(*cbuf, __ pc());\n+  address stub = CompiledDirectCall::emit_to_interp_stub(masm, __ pc());\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1190,2 +1190,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -1309,1 +1309,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf) {\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler* masm) {\n@@ -1313,1 +1313,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1327,1 +1326,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm) {\n@@ -1331,1 +1330,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2527,1 +2525,1 @@\n-static void vec_mov_helper(CodeBuffer *cbuf, int src_lo, int dst_lo,\n+static void vec_mov_helper(C2_MacroAssembler *masm, int src_lo, int dst_lo,\n@@ -2533,2 +2531,1 @@\n-  if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -2585,1 +2582,1 @@\n-void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+void vec_spill_helper(C2_MacroAssembler *masm, bool is_load,\n@@ -2587,2 +2584,1 @@\n-  if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -2746,2 +2742,1 @@\n-  void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc*) const {\n-    C2_MacroAssembler _masm(&cbuf);\n+  void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc*) const {\n@@ -2761,2 +2756,1 @@\n-  void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc* ra_) const {\n-    C2_MacroAssembler _masm(&cbuf);\n+  void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc* ra_) const {\n@@ -2775,1 +2769,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -340,1 +340,1 @@\n-void emit_rm(CodeBuffer &cbuf, int f1, int f2, int f3) {\n+void emit_rm(C2_MacroAssembler *masm, int f1, int f2, int f3) {\n@@ -342,1 +342,1 @@\n-  cbuf.insts()->emit_int8(c);\n+  __ emit_int8(c);\n@@ -346,1 +346,1 @@\n-void emit_cc(CodeBuffer &cbuf, int f1, int f2) {\n+void emit_cc(C2_MacroAssembler *masm, int f1, int f2) {\n@@ -348,1 +348,1 @@\n-  cbuf.insts()->emit_int8(c);\n+  __ emit_int8(c);\n@@ -352,2 +352,2 @@\n-void emit_opcode(CodeBuffer &cbuf, int code) {\n-  cbuf.insts()->emit_int8((unsigned char) code);\n+void emit_opcode(C2_MacroAssembler *masm, int code) {\n+  __ emit_int8((unsigned char) code);\n@@ -357,3 +357,3 @@\n-void emit_opcode(CodeBuffer &cbuf, int code, relocInfo::relocType reloc, int offset = 0) {\n-  cbuf.relocate(cbuf.insts_mark() + offset, reloc);\n-  emit_opcode(cbuf, code);\n+void emit_opcode(C2_MacroAssembler *masm, int code, relocInfo::relocType reloc, int offset = 0) {\n+  __ relocate(__ inst_mark() + offset, reloc);\n+  emit_opcode(masm, code);\n@@ -363,2 +363,2 @@\n-void emit_d8(CodeBuffer &cbuf, int d8) {\n-  cbuf.insts()->emit_int8((unsigned char) d8);\n+void emit_d8(C2_MacroAssembler *masm, int d8) {\n+  __ emit_int8((unsigned char) d8);\n@@ -368,2 +368,2 @@\n-void emit_d16(CodeBuffer &cbuf, int d16) {\n-  cbuf.insts()->emit_int16(d16);\n+void emit_d16(C2_MacroAssembler *masm, int d16) {\n+  __ emit_int16(d16);\n@@ -373,2 +373,2 @@\n-void emit_d32(CodeBuffer &cbuf, int d32) {\n-  cbuf.insts()->emit_int32(d32);\n+void emit_d32(C2_MacroAssembler *masm, int d32) {\n+  __ emit_int32(d32);\n@@ -378,1 +378,1 @@\n-void emit_d32_reloc(CodeBuffer &cbuf, int d32, relocInfo::relocType reloc,\n+void emit_d32_reloc(C2_MacroAssembler *masm, int d32, relocInfo::relocType reloc,\n@@ -380,2 +380,2 @@\n-  cbuf.relocate(cbuf.insts_mark(), reloc, format);\n-  cbuf.insts()->emit_int32(d32);\n+  __ relocate(__ inst_mark(), reloc, format);\n+  __ emit_int32(d32);\n@@ -385,1 +385,1 @@\n-void emit_d32_reloc(CodeBuffer &cbuf, int d32, RelocationHolder const& rspec,\n+void emit_d32_reloc(C2_MacroAssembler *masm, int d32, RelocationHolder const& rspec,\n@@ -392,2 +392,2 @@\n-  cbuf.relocate(cbuf.insts_mark(), rspec, format);\n-  cbuf.insts()->emit_int32(d32);\n+  __ relocate(__ inst_mark(), rspec, format);\n+  __ emit_int32(d32);\n@@ -397,2 +397,2 @@\n-void store_to_stackslot(CodeBuffer &cbuf, int opcode, int rm_field, int disp) {\n-  emit_opcode( cbuf, opcode );               \/\/ (e.g., FILD   [ESP+src])\n+void store_to_stackslot(C2_MacroAssembler *masm, int opcode, int rm_field, int disp) {\n+  emit_opcode( masm, opcode );               \/\/ (e.g., FILD   [ESP+src])\n@@ -400,3 +400,3 @@\n-    emit_rm( cbuf, 0x01, rm_field, ESP_enc );  \/\/ R\/M byte\n-    emit_rm( cbuf, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n-    emit_d8 (cbuf, disp);     \/\/ Displacement  \/\/ R\/M byte\n+    emit_rm( masm, 0x01, rm_field, ESP_enc );  \/\/ R\/M byte\n+    emit_rm( masm, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n+    emit_d8 (masm, disp);     \/\/ Displacement  \/\/ R\/M byte\n@@ -404,3 +404,3 @@\n-    emit_rm( cbuf, 0x02, rm_field, ESP_enc );  \/\/ R\/M byte\n-    emit_rm( cbuf, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n-    emit_d32(cbuf, disp);     \/\/ Displacement  \/\/ R\/M byte\n+    emit_rm( masm, 0x02, rm_field, ESP_enc );  \/\/ R\/M byte\n+    emit_rm( masm, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n+    emit_d32(masm, disp);     \/\/ Displacement  \/\/ R\/M byte\n@@ -411,1 +411,1 @@\n-void encode_RegMem( CodeBuffer &cbuf, int reg_encoding, int base, int index, int scale, int displace, relocInfo::relocType disp_reloc ) {\n+void encode_RegMem( C2_MacroAssembler *masm, int reg_encoding, int base, int index, int scale, int displace, relocInfo::relocType disp_reloc ) {\n@@ -417,1 +417,1 @@\n-      emit_rm(cbuf, 0x0, reg_encoding, base);\n+      emit_rm(masm, 0x0, reg_encoding, base);\n@@ -422,2 +422,2 @@\n-        emit_rm(cbuf, 0x1, reg_encoding, base);\n-        emit_d8(cbuf, displace);\n+        emit_rm(masm, 0x1, reg_encoding, base);\n+        emit_d8(masm, displace);\n@@ -427,1 +427,1 @@\n-          emit_rm(cbuf, 0x0, reg_encoding, 0x5);\n+          emit_rm(masm, 0x0, reg_encoding, 0x5);\n@@ -430,1 +430,1 @@\n-            emit_d32_reloc(cbuf, displace, disp_reloc, 1);\n+            emit_d32_reloc(masm, displace, disp_reloc, 1);\n@@ -432,1 +432,1 @@\n-            emit_d32      (cbuf, displace);\n+            emit_d32      (masm, displace);\n@@ -436,1 +436,1 @@\n-          emit_rm(cbuf, 0x2, reg_encoding, base);\n+          emit_rm(masm, 0x2, reg_encoding, base);\n@@ -438,1 +438,1 @@\n-            emit_d32_reloc(cbuf, displace, disp_reloc, 1);\n+            emit_d32_reloc(masm, displace, disp_reloc, 1);\n@@ -440,1 +440,1 @@\n-            emit_d32      (cbuf, displace);\n+            emit_d32      (masm, displace);\n@@ -449,2 +449,2 @@\n-      emit_rm(cbuf, 0x0, reg_encoding, 0x4);\n-      emit_rm(cbuf, scale, index, base);\n+      emit_rm(masm, 0x0, reg_encoding, 0x4);\n+      emit_rm(masm, scale, index, base);\n@@ -455,3 +455,3 @@\n-        emit_rm(cbuf, 0x1, reg_encoding, 0x4);\n-        emit_rm(cbuf, scale, index, base);\n-        emit_d8(cbuf, displace);\n+        emit_rm(masm, 0x1, reg_encoding, 0x4);\n+        emit_rm(masm, scale, index, base);\n+        emit_d8(masm, displace);\n@@ -461,2 +461,2 @@\n-          emit_rm(cbuf, 0x2, reg_encoding, 0x4);\n-          emit_rm(cbuf, scale, index, 0x04);\n+          emit_rm(masm, 0x2, reg_encoding, 0x4);\n+          emit_rm(masm, scale, index, 0x04);\n@@ -464,2 +464,2 @@\n-          emit_rm(cbuf, 0x2, reg_encoding, 0x4);\n-          emit_rm(cbuf, scale, index, base);\n+          emit_rm(masm, 0x2, reg_encoding, 0x4);\n+          emit_rm(masm, scale, index, base);\n@@ -468,1 +468,1 @@\n-          emit_d32_reloc(cbuf, displace, disp_reloc, 1);\n+          emit_d32_reloc(masm, displace, disp_reloc, 1);\n@@ -470,1 +470,1 @@\n-          emit_d32      (cbuf, displace);\n+          emit_d32      (masm, displace);\n@@ -478,1 +478,1 @@\n-void encode_Copy( CodeBuffer &cbuf, int dst_encoding, int src_encoding ) {\n+void encode_Copy( C2_MacroAssembler *masm, int dst_encoding, int src_encoding ) {\n@@ -482,2 +482,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, dst_encoding, src_encoding );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, dst_encoding, src_encoding );\n@@ -487,1 +487,1 @@\n-void emit_cmpfp_fixup(MacroAssembler& _masm) {\n+void emit_cmpfp_fixup(MacroAssembler* masm) {\n@@ -507,1 +507,1 @@\n-static void emit_cmpfp3(MacroAssembler& _masm, Register dst) {\n+static void emit_cmpfp3(MacroAssembler* masm, Register dst) {\n@@ -530,1 +530,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -610,1 +610,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -612,1 +612,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -619,1 +618,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -667,1 +666,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -669,1 +668,0 @@\n-  MacroAssembler _masm(&cbuf);\n@@ -674,1 +672,1 @@\n-    _masm.vzeroupper();\n+    __ vzeroupper();\n@@ -678,1 +676,1 @@\n-    _masm.fldcw(ExternalAddress(StubRoutines::x86::addr_fpu_cntrl_wrd_std()));\n+    __ fldcw(ExternalAddress(StubRoutines::x86::addr_fpu_cntrl_wrd_std()));\n@@ -689,3 +687,3 @@\n-    emit_opcode(cbuf, 0x81); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d32(cbuf, framesize);\n+    emit_opcode(masm, 0x81); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d32(masm, framesize);\n@@ -693,3 +691,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, framesize);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, framesize);\n@@ -698,1 +696,1 @@\n-  emit_opcode(cbuf, 0x58 | EBP_enc);\n+  emit_opcode(masm, 0x58 | EBP_enc);\n@@ -706,1 +704,0 @@\n-    MacroAssembler masm(&cbuf);\n@@ -715,0 +712,1 @@\n+    __ set_inst_mark();\n@@ -716,0 +714,1 @@\n+    __ clear_inst_mark();\n@@ -752,1 +751,1 @@\n-static int impl_helper( CodeBuffer *cbuf, bool do_size, bool is_load, int offset, int reg,\n+static int impl_helper( C2_MacroAssembler *masm, bool do_size, bool is_load, int offset, int reg,\n@@ -754,3 +753,5 @@\n-  if( cbuf ) {\n-    emit_opcode  (*cbuf, opcode );\n-    encode_RegMem(*cbuf, Matcher::_regEncode[reg], ESP_enc, 0x4, 0, offset, relocInfo::none);\n+  if( masm ) {\n+    masm->set_inst_mark();\n+    emit_opcode  (masm, opcode );\n+    encode_RegMem(masm, Matcher::_regEncode[reg], ESP_enc, 0x4, 0, offset, relocInfo::none);\n+    masm->clear_inst_mark();\n@@ -773,1 +774,1 @@\n-static int impl_x_helper( CodeBuffer *cbuf, bool do_size, bool is_load,\n+static int impl_x_helper( C2_MacroAssembler *masm, bool do_size, bool is_load,\n@@ -781,2 +782,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -785,1 +785,1 @@\n-    _masm.set_managed();\n+    __ set_managed();\n@@ -832,1 +832,1 @@\n-static int impl_movx_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int dst_lo,\n+static int impl_movx_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int dst_lo,\n@@ -834,2 +834,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -837,1 +836,1 @@\n-    _masm.set_managed();\n+    __ set_managed();\n@@ -871,1 +870,1 @@\n-static int impl_movgpr2x_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int dst_lo,\n+static int impl_movgpr2x_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int dst_lo,\n@@ -874,2 +873,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -877,1 +875,1 @@\n-    _masm.set_managed();\n+    __ set_managed();\n@@ -889,1 +887,1 @@\n-static int impl_movx2gpr_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int dst_lo,\n+static int impl_movx2gpr_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int dst_lo,\n@@ -892,2 +890,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -895,1 +892,1 @@\n-    _masm.set_managed();\n+    __ set_managed();\n@@ -906,4 +903,4 @@\n-static int impl_mov_helper( CodeBuffer *cbuf, bool do_size, int src, int dst, int size, outputStream* st ) {\n-  if( cbuf ) {\n-    emit_opcode(*cbuf, 0x8B );\n-    emit_rm    (*cbuf, 0x3, Matcher::_regEncode[dst], Matcher::_regEncode[src] );\n+static int impl_mov_helper( C2_MacroAssembler *masm, bool do_size, int src, int dst, int size, outputStream* st ) {\n+  if( masm ) {\n+    emit_opcode(masm, 0x8B );\n+    emit_rm    (masm, 0x3, Matcher::_regEncode[dst], Matcher::_regEncode[src] );\n@@ -919,1 +916,1 @@\n-static int impl_fp_store_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int src_hi, int dst_lo, int dst_hi,\n+static int impl_fp_store_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int src_hi, int dst_lo, int dst_hi,\n@@ -922,3 +919,3 @@\n-    if( cbuf ) {\n-      emit_opcode( *cbuf, 0xD9 );  \/\/ FLD (i.e., push it)\n-      emit_d8( *cbuf, 0xC0-1+Matcher::_regEncode[src_lo] );\n+    if( masm ) {\n+      emit_opcode( masm, 0xD9 );  \/\/ FLD (i.e., push it)\n+      emit_d8( masm, 0xC0-1+Matcher::_regEncode[src_lo] );\n@@ -946,1 +943,1 @@\n-  return impl_helper(cbuf,do_size,false,offset,st_op,op,op_str,size, st);\n+  return impl_helper(masm,do_size,false,offset,st_op,op,op_str,size, st);\n@@ -950,1 +947,1 @@\n-static void vec_mov_helper(CodeBuffer *cbuf, int src_lo, int dst_lo,\n+static void vec_mov_helper(C2_MacroAssembler *masm, int src_lo, int dst_lo,\n@@ -953,1 +950,1 @@\n-void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+void vec_spill_helper(C2_MacroAssembler *masm, bool is_load,\n@@ -956,1 +953,1 @@\n-static void vec_stack_to_stack_helper(CodeBuffer *cbuf, int src_offset,\n+static void vec_stack_to_stack_helper(C2_MacroAssembler *masm, int src_offset,\n@@ -958,2 +955,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -1035,1 +1031,1 @@\n-uint MachSpillCopyNode::implementation( CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const {\n+uint MachSpillCopyNode::implementation( C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const {\n@@ -1064,1 +1060,1 @@\n-      vec_stack_to_stack_helper(cbuf, src_offset, dst_offset, ireg, st);\n+      vec_stack_to_stack_helper(masm, src_offset, dst_offset, ireg, st);\n@@ -1066,1 +1062,1 @@\n-      vec_mov_helper(cbuf, src_first, dst_first, src_second, dst_second, ireg, st);\n+      vec_mov_helper(masm, src_first, dst_first, src_second, dst_second, ireg, st);\n@@ -1069,1 +1065,1 @@\n-      vec_spill_helper(cbuf, false, stack_offset, src_first, ireg, st);\n+      vec_spill_helper(masm, false, stack_offset, src_first, ireg, st);\n@@ -1072,1 +1068,1 @@\n-      vec_spill_helper(cbuf, true,  stack_offset, dst_first, ireg, st);\n+      vec_spill_helper(masm, true,  stack_offset, dst_first, ireg, st);\n@@ -1084,2 +1080,2 @@\n-      size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n-      size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n+      size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n+      size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n@@ -1089,2 +1085,2 @@\n-    size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_first),ESI_num,0xFF,\"PUSH  \",size, st);\n-    size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_first),EAX_num,0x8F,\"POP   \",size, st);\n+    size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_first),ESI_num,0xFF,\"PUSH  \",size, st);\n+    size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_first),EAX_num,0x8F,\"POP   \",size, st);\n@@ -1092,2 +1088,2 @@\n-      size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n-      size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n+      size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n+      size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n@@ -1101,1 +1097,1 @@\n-    size = impl_mov_helper(cbuf,do_size,src_first,dst_first,size, st);\n+    size = impl_mov_helper(masm,do_size,src_first,dst_first,size, st);\n@@ -1105,1 +1101,1 @@\n-    size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_first),src_first,0x89,\"MOV \",size, st);\n+    size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_first),src_first,0x89,\"MOV \",size, st);\n@@ -1109,1 +1105,1 @@\n-    size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_first),dst_first,0x8B,\"MOV \",size, st);\n+    size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_first),dst_first,0x8B,\"MOV \",size, st);\n@@ -1115,1 +1111,1 @@\n-    return impl_movgpr2x_helper(cbuf,do_size,src_first,dst_first,src_second, dst_second, size, st);\n+    return impl_movgpr2x_helper(masm,do_size,src_first,dst_first,src_second, dst_second, size, st);\n@@ -1122,1 +1118,1 @@\n-    if( cbuf ) {\n+    if( masm ) {\n@@ -1129,4 +1125,4 @@\n-        emit_opcode  (*cbuf, 0xD9 );           \/\/ FLD    ST(i)\n-        emit_d8      (*cbuf, 0xC0+Matcher::_regEncode[src_first]-1 );\n-        emit_opcode  (*cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-        emit_d8      (*cbuf, 0xD8+Matcher::_regEncode[dst_first] );\n+        emit_opcode  (masm, 0xD9 );           \/\/ FLD    ST(i)\n+        emit_d8      (masm, 0xC0+Matcher::_regEncode[src_first]-1 );\n+        emit_opcode  (masm, 0xDD );           \/\/ FSTP   ST(i)\n+        emit_d8      (masm, 0xD8+Matcher::_regEncode[dst_first] );\n@@ -1134,2 +1130,2 @@\n-        emit_opcode  (*cbuf, 0xDD );           \/\/ FST    ST(i)\n-        emit_d8      (*cbuf, 0xD0+Matcher::_regEncode[dst_first]-1 );\n+        emit_opcode  (masm, 0xDD );           \/\/ FST    ST(i)\n+        emit_d8      (masm, 0xD0+Matcher::_regEncode[dst_first]-1 );\n@@ -1149,1 +1145,1 @@\n-    return impl_fp_store_helper(cbuf,do_size,src_first,src_second,dst_first,dst_second,ra_->reg2offset(dst_first),size, st);\n+    return impl_fp_store_helper(masm,do_size,src_first,src_second,dst_first,dst_second,ra_->reg2offset(dst_first),size, st);\n@@ -1165,5 +1161,7 @@\n-    if( cbuf ) {\n-      emit_opcode  (*cbuf, op );\n-      encode_RegMem(*cbuf, 0x0, ESP_enc, 0x4, 0, offset, relocInfo::none);\n-      emit_opcode  (*cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-      emit_d8      (*cbuf, 0xD8+Matcher::_regEncode[dst_first] );\n+    if( masm ) {\n+      masm->set_inst_mark();\n+      emit_opcode  (masm, op );\n+      encode_RegMem(masm, 0x0, ESP_enc, 0x4, 0, offset, relocInfo::none);\n+      emit_opcode  (masm, 0xDD );           \/\/ FSTP   ST(i)\n+      emit_d8      (masm, 0xD8+Matcher::_regEncode[dst_first] );\n+      masm->clear_inst_mark();\n@@ -1185,1 +1183,1 @@\n-    return impl_movx_helper(cbuf,do_size,src_first,dst_first,src_second, dst_second, size, st);\n+    return impl_movx_helper(masm,do_size,src_first,dst_first,src_second, dst_second, size, st);\n@@ -1192,1 +1190,1 @@\n-    return impl_movx2gpr_helper(cbuf,do_size,src_first,dst_first,src_second, dst_second, size, st);\n+    return impl_movx2gpr_helper(masm,do_size,src_first,dst_first,src_second, dst_second, size, st);\n@@ -1197,1 +1195,1 @@\n-    return impl_x_helper(cbuf,do_size,false,ra_->reg2offset(dst_first), src_first, src_second, size, st);\n+    return impl_x_helper(masm,do_size,false,ra_->reg2offset(dst_first), src_first, src_second, size, st);\n@@ -1202,1 +1200,1 @@\n-    return impl_x_helper(cbuf,do_size,true ,ra_->reg2offset(src_first),dst_first, dst_second, size, st);\n+    return impl_x_helper(masm,do_size,true ,ra_->reg2offset(src_first),dst_first, dst_second, size, st);\n@@ -1209,5 +1207,5 @@\n-    if( cbuf ) {\n-      emit_opcode(*cbuf,0x8D);  \/\/ LEA  ESP,[ESP-8]\n-      emit_rm(*cbuf, 0x1, ESP_enc, 0x04);\n-      emit_rm(*cbuf, 0x0, 0x04, ESP_enc);\n-      emit_d8(*cbuf,0xF8);\n+    if( masm ) {\n+      emit_opcode(masm,0x8D);  \/\/ LEA  ESP,[ESP-8]\n+      emit_rm(masm, 0x1, ESP_enc, 0x04);\n+      emit_rm(masm, 0x0, 0x04, ESP_enc);\n+      emit_d8(masm,0xF8);\n@@ -1222,1 +1220,1 @@\n-    size = impl_fp_store_helper(cbuf,do_size,src_first,src_second,dst_first,dst_second,0,size, st);\n+    size = impl_fp_store_helper(masm,do_size,src_first,src_second,dst_first,dst_second,0,size, st);\n@@ -1225,1 +1223,1 @@\n-    size = impl_x_helper(cbuf,do_size,true ,0,dst_first, dst_second, size, st);\n+    size = impl_x_helper(masm,do_size,true ,0,dst_first, dst_second, size, st);\n@@ -1227,5 +1225,5 @@\n-    if( cbuf ) {\n-      emit_opcode(*cbuf,0x8D);  \/\/ LEA  ESP,[ESP+8]\n-      emit_rm(*cbuf, 0x1, ESP_enc, 0x04);\n-      emit_rm(*cbuf, 0x0, 0x04, ESP_enc);\n-      emit_d8(*cbuf,0x08);\n+    if( masm ) {\n+      emit_opcode(masm,0x8D);  \/\/ LEA  ESP,[ESP+8]\n+      emit_rm(masm, 0x1, ESP_enc, 0x04);\n+      emit_rm(masm, 0x0, 0x04, ESP_enc);\n+      emit_d8(masm,0x08);\n@@ -1247,2 +1245,1 @@\n-    if (cbuf != nullptr) {\n-      MacroAssembler _masm(cbuf);\n+    if (masm != nullptr) {\n@@ -1262,2 +1259,1 @@\n-    if (cbuf != nullptr) {\n-      MacroAssembler _masm(cbuf);\n+    if (masm != nullptr) {\n@@ -1286,2 +1282,1 @@\n-    if (cbuf != nullptr) {\n-      MacroAssembler _masm(cbuf);\n+    if (masm != nullptr) {\n@@ -1307,1 +1302,1 @@\n-    return impl_mov_helper(cbuf,do_size,src_second,dst_second,size, st);\n+    return impl_mov_helper(masm,do_size,src_second,dst_second,size, st);\n@@ -1311,1 +1306,1 @@\n-    return impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_second),src_second,0x89,\"MOV \",size, st);\n+    return impl_helper(masm,do_size,false,ra_->reg2offset(dst_second),src_second,0x89,\"MOV \",size, st);\n@@ -1315,1 +1310,1 @@\n-    return impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_second),dst_second,0x8B,\"MOV \",size, st);\n+    return impl_helper(masm,do_size,true ,ra_->reg2offset(src_second),dst_second,0x8B,\"MOV \",size, st);\n@@ -1327,2 +1322,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation( &cbuf, ra_, false, nullptr );\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation( masm, ra_, false, nullptr );\n@@ -1345,1 +1340,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1349,4 +1344,4 @@\n-    emit_opcode(cbuf, 0x8D);      \/\/ LEA  reg,[SP+offset]\n-    emit_rm(cbuf, 0x2, reg, 0x04);\n-    emit_rm(cbuf, 0x0, 0x04, ESP_enc);\n-    emit_d32(cbuf, offset);\n+    emit_opcode(masm, 0x8D);      \/\/ LEA  reg,[SP+offset]\n+    emit_rm(masm, 0x2, reg, 0x04);\n+    emit_rm(masm, 0x0, 0x04, ESP_enc);\n+    emit_d32(masm, offset);\n@@ -1355,4 +1350,4 @@\n-    emit_opcode(cbuf, 0x8D);      \/\/ LEA  reg,[SP+offset]\n-    emit_rm(cbuf, 0x1, reg, 0x04);\n-    emit_rm(cbuf, 0x0, 0x04, ESP_enc);\n-    emit_d8(cbuf, offset);\n+    emit_opcode(masm, 0x8D);      \/\/ LEA  reg,[SP+offset]\n+    emit_rm(masm, 0x1, reg, 0x04);\n+    emit_rm(masm, 0x0, 0x04, ESP_enc);\n+    emit_d8(masm, offset);\n@@ -1384,3 +1379,2 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  MacroAssembler masm(&cbuf);\n-  masm.ic_check(CodeEntryAlignment);\n+void MachUEPNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  __ ic_check(CodeEntryAlignment);\n@@ -1531,0 +1525,12 @@\n+  \/\/ Set instruction mark in MacroAssembler. This is used only in\n+  \/\/ instructions that emit bytes directly to the CodeBuffer wraped\n+  \/\/ in the MacroAssembler. Should go away once all \"instruct\" are\n+  \/\/ patched to emit bytes only using methods in MacroAssembler.\n+  enc_class SetInstMark %{\n+    __ set_inst_mark();\n+  %}\n+\n+  enc_class ClearInstMark %{\n+    __ clear_inst_mark();\n+  %}\n+\n@@ -1533,1 +1539,1 @@\n-    emit_opcode(cbuf, $primary);\n+    emit_opcode(masm, $primary);\n@@ -1538,1 +1544,1 @@\n-    emit_opcode(cbuf, $secondary);\n+    emit_opcode(masm, $secondary);\n@@ -1543,1 +1549,1 @@\n-    emit_opcode(cbuf, $d8$$constant);\n+    emit_opcode(masm, $d8$$constant);\n@@ -1547,1 +1553,1 @@\n-    emit_opcode(cbuf,0x66);\n+    emit_opcode(masm,0x66);\n@@ -1551,1 +1557,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1555,2 +1561,2 @@\n-    emit_opcode(cbuf,$opcode$$constant);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,$opcode$$constant);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1560,2 +1566,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg ); \/\/ 0xB8+ rd   -- MOV r32  ,imm32\n-    emit_d32   ( cbuf, 0x0  );             \/\/                         imm32==0x0\n+    emit_opcode( masm, 0xB8 + $dst$$reg ); \/\/ 0xB8+ rd   -- MOV r32  ,imm32\n+    emit_d32   ( masm, 0x0  );             \/\/                         imm32==0x0\n@@ -1588,11 +1594,11 @@\n-    emit_opcode(cbuf,0x81); emit_d8(cbuf,0xF8);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x00);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x80);                     \/\/ cmp rax,80000000h\n-    emit_opcode(cbuf,0x0F); emit_d8(cbuf,0x85);\n-    emit_opcode(cbuf,0x0B); emit_d8(cbuf,0x00);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x00);                     \/\/ jne normal_case\n-    emit_opcode(cbuf,0x33); emit_d8(cbuf,0xD2);                     \/\/ xor rdx,edx\n-    emit_opcode(cbuf,0x83); emit_d8(cbuf,0xF9); emit_d8(cbuf,0xFF); \/\/ cmp rcx,0FFh\n-    emit_opcode(cbuf,0x0F); emit_d8(cbuf,0x84);\n-    emit_opcode(cbuf,0x03); emit_d8(cbuf,0x00);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x00);                     \/\/ je done\n+    emit_opcode(masm,0x81); emit_d8(masm,0xF8);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x00);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x80);                     \/\/ cmp rax,80000000h\n+    emit_opcode(masm,0x0F); emit_d8(masm,0x85);\n+    emit_opcode(masm,0x0B); emit_d8(masm,0x00);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x00);                     \/\/ jne normal_case\n+    emit_opcode(masm,0x33); emit_d8(masm,0xD2);                     \/\/ xor rdx,edx\n+    emit_opcode(masm,0x83); emit_d8(masm,0xF9); emit_d8(masm,0xFF); \/\/ cmp rcx,0FFh\n+    emit_opcode(masm,0x0F); emit_d8(masm,0x84);\n+    emit_opcode(masm,0x03); emit_d8(masm,0x00);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x00);                     \/\/ je done\n@@ -1600,1 +1606,1 @@\n-    emit_opcode(cbuf,0x99);                                         \/\/ cdq\n+    emit_opcode(masm,0x99);                                         \/\/ cdq\n@@ -1607,1 +1613,1 @@\n-    emit_opcode(cbuf, $opcode$$constant + $reg$$reg);\n+    emit_opcode(masm, $opcode$$constant + $reg$$reg);\n@@ -1615,1 +1621,1 @@\n-      emit_opcode(cbuf, $primary | 0x02);\n+      emit_opcode(masm, $primary | 0x02);\n@@ -1618,1 +1624,1 @@\n-      emit_opcode(cbuf, $primary);\n+      emit_opcode(masm, $primary);\n@@ -1626,1 +1632,1 @@\n-      emit_opcode(cbuf, $primary | 0x02);    }\n+      emit_opcode(masm, $primary | 0x02);    }\n@@ -1628,1 +1634,1 @@\n-      emit_opcode(cbuf, $primary);\n+      emit_opcode(masm, $primary);\n@@ -1631,1 +1637,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n+    emit_rm(masm, 0x3, $secondary, $dst$$reg);\n@@ -1649,1 +1655,1 @@\n-    emit_opcode(cbuf, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n+    emit_opcode(masm, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n@@ -1651,3 +1657,3 @@\n-    emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n-    if ((con >= -128) && (con <= 127)) emit_d8 (cbuf,con);\n-    else                               emit_d32(cbuf,con);\n+    emit_rm(masm, 0x3, $secondary, $dst$$reg);\n+    if ((con >= -128) && (con <= 127)) emit_d8 (masm,con);\n+    else                               emit_d32(masm,con);\n@@ -1660,1 +1666,1 @@\n-    emit_opcode(cbuf, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n+    emit_opcode(masm, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n@@ -1662,3 +1668,3 @@\n-    emit_rm(cbuf, 0x3, $tertiary, HIGH_FROM_LOW_ENC($dst$$reg));\n-    if ((con >= -128) && (con <= 127)) emit_d8 (cbuf,con);\n-    else                               emit_d32(cbuf,con);\n+    emit_rm(masm, 0x3, $tertiary, HIGH_FROM_LOW_ENC($dst$$reg));\n+    if ((con >= -128) && (con <= 127)) emit_d8 (masm,con);\n+    else                               emit_d32(masm,con);\n@@ -1668,1 +1674,1 @@\n-    emit_cc(cbuf, $secondary, $dst$$reg );\n+    emit_cc(masm, $secondary, $dst$$reg );\n@@ -1675,2 +1681,2 @@\n-    emit_opcode(cbuf, 0x0F);\n-    emit_cc(cbuf, 0xC8, destlo);\n+    emit_opcode(masm, 0x0F);\n+    emit_cc(masm, 0xC8, destlo);\n@@ -1678,2 +1684,2 @@\n-    emit_opcode(cbuf, 0x0F);\n-    emit_cc(cbuf, 0xC8, desthi);\n+    emit_opcode(masm, 0x0F);\n+    emit_cc(masm, 0xC8, desthi);\n@@ -1681,2 +1687,2 @@\n-    emit_opcode(cbuf, 0x87);\n-    emit_rm(cbuf, 0x3, destlo, desthi);\n+    emit_opcode(masm, 0x87);\n+    emit_rm(masm, 0x3, destlo, desthi);\n@@ -1686,1 +1692,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $div$$reg );\n+    emit_rm(masm, 0x3, $secondary, $div$$reg );\n@@ -1691,1 +1697,1 @@\n-    emit_cc(cbuf, $secondary, $cop$$cmpcode);\n+    emit_cc(masm, $secondary, $cop$$cmpcode);\n@@ -1696,2 +1702,2 @@\n-    emit_d8(cbuf, op >> 8 );\n-    emit_d8(cbuf, op & 255);\n+    emit_d8(masm, op >> 8 );\n+    emit_d8(masm, op & 255);\n@@ -1703,2 +1709,2 @@\n-    emit_cc( cbuf, 0x70, ($cop$$cmpcode^1) );\n-    emit_d8( cbuf, $brOffs$$constant );\n+    emit_cc( masm, 0x70, ($cop$$cmpcode^1) );\n+    emit_d8( masm, $brOffs$$constant );\n@@ -1714,1 +1720,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1725,2 +1730,1 @@\n-    MacroAssembler masm(&cbuf);\n-    int start = masm.offset();\n+    int start = __ offset();\n@@ -1729,1 +1733,1 @@\n-        masm.verify_FPU(0, \"must be empty in SSE2+ mode\");\n+        __ verify_FPU(0, \"must be empty in SSE2+ mode\");\n@@ -1734,1 +1738,1 @@\n-      masm.empty_FPU_stack();\n+      __ empty_FPU_stack();\n@@ -1737,1 +1741,1 @@\n-      sizeof_FFree_Float_Stack_All = masm.offset() - start;\n+      sizeof_FFree_Float_Stack_All = __ offset() - start;\n@@ -1739,1 +1743,1 @@\n-      assert(masm.offset() - start == sizeof_FFree_Float_Stack_All, \"wrong size\");\n+      assert(__ offset() - start == sizeof_FFree_Float_Stack_All, \"wrong size\");\n@@ -1745,2 +1749,1 @@\n-      MacroAssembler masm(&cbuf);\n-      masm.verify_FPU( -3, \"Returning from Runtime Leaf call\");\n+      __ verify_FPU( -3, \"Returning from Runtime Leaf call\");\n@@ -1752,2 +1755,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -1756,1 +1758,1 @@\n-    emit_d32_reloc(cbuf, ($meth$$method - (int)(cbuf.insts_end()) - 4),\n+    emit_d32_reloc(masm, ($meth$$method - (int)(__ pc()) - 4),\n@@ -1758,0 +1760,1 @@\n+    __ clear_inst_mark();\n@@ -1761,1 +1764,0 @@\n-      MacroAssembler _masm(&cbuf);\n@@ -1786,1 +1788,1 @@\n-    debug_only(int off0 = cbuf.insts_size());\n+    debug_only(int off0 = __ offset());\n@@ -1788,1 +1790,0 @@\n-      MacroAssembler _masm(&cbuf);\n@@ -1793,1 +1794,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1795,1 +1795,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = __ offset());\n@@ -1802,2 +1802,1 @@\n-      MacroAssembler masm(&cbuf);\n-      masm.fldcw(ExternalAddress(StubRoutines::x86::addr_fpu_cntrl_wrd_24()));\n+      __ fldcw(ExternalAddress(StubRoutines::x86::addr_fpu_cntrl_wrd_24()));\n@@ -1810,2 +1809,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -1815,1 +1813,1 @@\n-      emit_d32_reloc(cbuf, ($meth$$method - (int)(cbuf.insts_end()) - 4),\n+      emit_d32_reloc(masm, ($meth$$method - (int)(__ pc()) - 4),\n@@ -1818,0 +1816,1 @@\n+      __ clear_inst_mark();\n@@ -1820,1 +1819,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -1823,1 +1822,1 @@\n-      emit_d32_reloc(cbuf, ($meth$$method - (int)(cbuf.insts_end()) - 4),\n+      emit_d32_reloc(masm, ($meth$$method - (int)(__ pc()) - 4),\n@@ -1826,1 +1825,1 @@\n-      address mark = cbuf.insts_mark();\n+      address mark = __ inst_mark();\n@@ -1830,1 +1829,2 @@\n-        cbuf.shared_stub_to_interp_for(_method, cbuf.insts()->mark_off());\n+        __ code()->shared_stub_to_interp_for(_method, __ code()->insts()->mark_off());\n+        __ clear_inst_mark();\n@@ -1833,1 +1833,2 @@\n-        address stub = CompiledDirectCall::emit_to_interp_stub(cbuf, mark);\n+        address stub = CompiledDirectCall::emit_to_interp_stub(masm, mark);\n+        __ clear_inst_mark();\n@@ -1843,2 +1844,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    __ ic_call((address)$meth$$method, resolved_method_index(cbuf));\n+    __ ic_call((address)$meth$$method, resolved_method_index(masm));\n@@ -1853,2 +1853,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -1856,2 +1855,3 @@\n-    emit_rm(cbuf, 0x01, $secondary, EAX_enc );  \/\/ R\/M byte\n-    emit_d8(cbuf, disp);             \/\/ Displacement\n+    emit_rm(masm, 0x01, $secondary, EAX_enc );  \/\/ R\/M byte\n+    emit_d8(masm, disp);             \/\/ Displacement\n+    __ clear_inst_mark();\n@@ -1861,26 +1861,0 @@\n-\/\/   Following encoding is no longer used, but may be restored if calling\n-\/\/   convention changes significantly.\n-\/\/   Became: Xor_Reg(EBP), Java_To_Runtime( labl )\n-\/\/\n-\/\/   enc_class Java_Interpreter_Call (label labl) %{    \/\/ JAVA INTERPRETER CALL\n-\/\/     \/\/ int ic_reg     = Matcher::inline_cache_reg();\n-\/\/     \/\/ int ic_encode  = Matcher::_regEncode[ic_reg];\n-\/\/     \/\/ int imo_reg    = Matcher::interpreter_method_reg();\n-\/\/     \/\/ int imo_encode = Matcher::_regEncode[imo_reg];\n-\/\/\n-\/\/     \/\/ \/\/ Interpreter expects method_ptr in EBX, currently a callee-saved register,\n-\/\/     \/\/ \/\/ so we load it immediately before the call\n-\/\/     \/\/ emit_opcode(cbuf, 0x8B);                     \/\/ MOV    imo_reg,ic_reg  # method_ptr\n-\/\/     \/\/ emit_rm(cbuf, 0x03, imo_encode, ic_encode ); \/\/ R\/M byte\n-\/\/\n-\/\/     \/\/ xor rbp,ebp\n-\/\/     emit_opcode(cbuf, 0x33);\n-\/\/     emit_rm(cbuf, 0x3, EBP_enc, EBP_enc);\n-\/\/\n-\/\/     \/\/ CALL to interpreter.\n-\/\/     cbuf.set_insts_mark();\n-\/\/     $$$emit8$primary;\n-\/\/     emit_d32_reloc(cbuf, ($labl$$label - (int)(cbuf.insts_end()) - 4),\n-\/\/                 runtime_call_Relocation::spec(), RELOC_IMM32 );\n-\/\/   %}\n-\n@@ -1889,1 +1863,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n+    emit_rm(masm, 0x3, $secondary, $dst$$reg);\n@@ -1896,1 +1870,1 @@\n-    emit_opcode(cbuf, 0xB8 + $dst$$reg);\n+    emit_opcode(masm, 0xB8 + $dst$$reg);\n@@ -1903,1 +1877,1 @@\n-    emit_opcode(cbuf, $primary + $dst$$reg);\n+    emit_opcode(masm, $primary + $dst$$reg);\n@@ -1914,2 +1888,2 @@\n-      emit_opcode(cbuf, 0x33);\n-      emit_rm(cbuf, 0x3, dst_enc, dst_enc);\n+      emit_opcode(masm, 0x33);\n+      emit_rm(masm, 0x3, dst_enc, dst_enc);\n@@ -1917,2 +1891,2 @@\n-      emit_opcode(cbuf, $primary + dst_enc);\n-      emit_d32(cbuf, src_con);\n+      emit_opcode(masm, $primary + dst_enc);\n+      emit_d32(masm, src_con);\n@@ -1929,2 +1903,2 @@\n-      emit_opcode(cbuf, 0x33);\n-      emit_rm(cbuf, 0x3, dst_enc, dst_enc);\n+      emit_opcode(masm, 0x33);\n+      emit_rm(masm, 0x3, dst_enc, dst_enc);\n@@ -1932,2 +1906,2 @@\n-      emit_opcode(cbuf, $primary + dst_enc);\n-      emit_d32(cbuf, src_con);\n+      emit_opcode(masm, $primary + dst_enc);\n+      emit_d32(masm, src_con);\n@@ -1940,1 +1914,1 @@\n-    encode_Copy( cbuf, $dst$$reg, $src$$reg );\n+    encode_Copy( masm, $dst$$reg, $src$$reg );\n@@ -1944,1 +1918,1 @@\n-    encode_Copy( cbuf, $dst$$reg, $src$$reg );\n+    encode_Copy( masm, $dst$$reg, $src$$reg );\n@@ -1948,1 +1922,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1953,1 +1927,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1958,1 +1932,1 @@\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg));\n@@ -1962,1 +1936,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1966,1 +1940,1 @@\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg));\n@@ -1970,1 +1944,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($src$$reg));\n@@ -1982,1 +1956,1 @@\n-    emit_d32(cbuf, jf_as_bits);\n+    emit_d32(masm, jf_as_bits);\n@@ -1989,1 +1963,1 @@\n-    emit_d32(cbuf, jf_as_bits);\n+    emit_d32(masm, jf_as_bits);\n@@ -1998,1 +1972,1 @@\n-    emit_d32(cbuf,$src$$constant);\n+    emit_d32(masm,$src$$constant);\n@@ -2003,2 +1977,2 @@\n-    emit_rm(cbuf, 0x00, $t1$$reg, 0x05 );\n-    emit_d32(cbuf, 0x00);\n+    emit_rm(masm, 0x00, $t1$$reg, 0x05 );\n+    emit_d32(masm, 0x00);\n@@ -2008,1 +1982,1 @@\n-    emit_opcode(cbuf,0xF0);         \/\/ [Lock]\n+    emit_opcode(masm,0xF0);         \/\/ [Lock]\n@@ -2019,2 +1993,2 @@\n-    emit_opcode(cbuf,0x87);\n-    emit_opcode(cbuf,0xD9);\n+    emit_opcode(masm,0x87);\n+    emit_opcode(masm,0xD9);\n@@ -2022,1 +1996,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2024,3 +1998,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xC7);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xC7);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2028,2 +2002,2 @@\n-    emit_opcode(cbuf,0x87);\n-    emit_opcode(cbuf,0xD9);\n+    emit_opcode(masm,0x87);\n+    emit_opcode(masm,0xD9);\n@@ -2034,1 +2008,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2037,3 +2011,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xB1);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xB1);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2044,1 +2018,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2047,3 +2021,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xB0);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xB0);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2054,1 +2028,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2057,1 +2031,1 @@\n-    emit_opcode(cbuf, 0x66);\n+    emit_opcode(masm, 0x66);\n@@ -2060,3 +2034,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xB1);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xB1);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2069,2 +2043,2 @@\n-    emit_opcode( cbuf, 0xB8 + res_encoding);\n-    emit_d32( cbuf, 0 );\n+    emit_opcode( masm, 0xB8 + res_encoding);\n+    emit_d32( masm, 0 );\n@@ -2072,2 +2046,2 @@\n-    emit_opcode(cbuf,0x75);\n-    emit_d8(cbuf, 5 );\n+    emit_opcode(masm,0x75);\n+    emit_d8(masm, 5 );\n@@ -2075,2 +2049,2 @@\n-    emit_opcode( cbuf, 0xB8 + res_encoding);\n-    emit_d32( cbuf, 1 );\n+    emit_opcode( masm, 0xB8 + res_encoding);\n+    emit_d32( masm, 1 );\n@@ -2080,4 +2054,0 @@\n-  enc_class set_instruction_start( ) %{\n-    cbuf.set_insts_mark();            \/\/ Mark start of opcode for reloc info in mem operand\n-  %}\n-\n@@ -2091,1 +2061,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n@@ -2101,1 +2071,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, relocInfo::none);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, relocInfo::none);\n@@ -2108,7 +2078,7 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,$tertiary);\n-    emit_rm(cbuf, 0x3, r1, r2);\n-    emit_d8(cbuf,$cnt$$constant);\n-    emit_d8(cbuf,$primary);\n-    emit_rm(cbuf, 0x3, $secondary, r1);\n-    emit_d8(cbuf,$cnt$$constant);\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,$tertiary);\n+    emit_rm(masm, 0x3, r1, r2);\n+    emit_d8(masm,$cnt$$constant);\n+    emit_d8(masm,$primary);\n+    emit_rm(masm, 0x3, $secondary, r1);\n+    emit_d8(masm,$cnt$$constant);\n@@ -2118,2 +2088,2 @@\n-    emit_opcode( cbuf, 0x8B ); \/\/ Move\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_opcode( masm, 0x8B ); \/\/ Move\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg));\n@@ -2121,3 +2091,3 @@\n-      emit_d8(cbuf,$primary);\n-      emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n-      emit_d8(cbuf,$cnt$$constant-32);\n+      emit_d8(masm,$primary);\n+      emit_rm(masm, 0x3, $secondary, $dst$$reg);\n+      emit_d8(masm,$cnt$$constant-32);\n@@ -2125,3 +2095,3 @@\n-    emit_d8(cbuf,$primary);\n-    emit_rm(cbuf, 0x3, $secondary, HIGH_FROM_LOW_ENC($dst$$reg));\n-    emit_d8(cbuf,31);\n+    emit_d8(masm,$primary);\n+    emit_rm(masm, 0x3, $secondary, HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_d8(masm,31);\n@@ -2135,2 +2105,2 @@\n-    emit_opcode( cbuf, 0x8B ); \/\/ Move r1,r2\n-    emit_rm(cbuf, 0x3, r1, r2);\n+    emit_opcode( masm, 0x8B ); \/\/ Move r1,r2\n+    emit_rm(masm, 0x3, r1, r2);\n@@ -2138,3 +2108,3 @@\n-      emit_opcode(cbuf,$primary);\n-      emit_rm(cbuf, 0x3, $secondary, r1);\n-      emit_d8(cbuf,$cnt$$constant-32);\n+      emit_opcode(masm,$primary);\n+      emit_rm(masm, 0x3, $secondary, r1);\n+      emit_d8(masm,$cnt$$constant-32);\n@@ -2142,2 +2112,2 @@\n-    emit_opcode(cbuf,0x33);  \/\/ XOR r2,r2\n-    emit_rm(cbuf, 0x3, r2, r2);\n+    emit_opcode(masm,0x33);  \/\/ XOR r2,r2\n+    emit_rm(masm, 0x3, r2, r2);\n@@ -2149,1 +2119,1 @@\n-    emit_opcode(cbuf,$opcode$$constant);\n+    emit_opcode(masm,$opcode$$constant);\n@@ -2156,1 +2126,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n@@ -2171,1 +2141,1 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, relocInfo::none);\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, relocInfo::none);\n@@ -2181,1 +2151,1 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n@@ -2191,1 +2161,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n@@ -2196,2 +2166,2 @@\n-    emit_opcode(cbuf,0x3B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x3B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2199,2 +2169,2 @@\n-    emit_opcode(cbuf,0x7C);\n-    emit_d8(cbuf,2);\n+    emit_opcode(masm,0x7C);\n+    emit_d8(masm,2);\n@@ -2202,2 +2172,2 @@\n-    emit_opcode(cbuf,0x8B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x8B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2208,2 +2178,2 @@\n-    emit_opcode(cbuf,0x3B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x3B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2211,2 +2181,2 @@\n-    emit_opcode(cbuf,0x7F);\n-    emit_d8(cbuf,2);\n+    emit_opcode(masm,0x7F);\n+    emit_d8(masm,2);\n@@ -2214,2 +2184,2 @@\n-    emit_opcode(cbuf,0x8B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x8B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2229,2 +2199,2 @@\n-      emit_opcode( cbuf, 0xD9 ); \/\/ FLD (i.e., push it)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 ); \/\/ FLD (i.e., push it)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2232,3 +2202,4 @@\n-    cbuf.set_insts_mark();       \/\/ Mark start of opcode for reloc info in mem operand\n-    emit_opcode(cbuf,$primary);\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    __ set_inst_mark();       \/\/ Mark start of opcode for reloc info in mem operand\n+    emit_opcode(masm,$primary);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n+    __ clear_inst_mark();\n@@ -2239,2 +2210,2 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0x03, $dst$$reg );\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0x03, $dst$$reg );\n@@ -2245,3 +2216,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0x9C);\n-    emit_rm( cbuf, 0x3, 0x4, $dst$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0x9C);\n+    emit_rm( masm, 0x3, 0x4, $dst$$reg );\n@@ -2254,2 +2225,2 @@\n-    emit_opcode(cbuf,0x2B);\n-    emit_rm(cbuf, 0x3, $p$$reg, $q$$reg);\n+    emit_opcode(masm,0x2B);\n+    emit_rm(masm, 0x3, $p$$reg, $q$$reg);\n@@ -2257,2 +2228,2 @@\n-    emit_opcode(cbuf,0x1B);\n-    emit_rm(cbuf, 0x3, tmpReg, tmpReg);\n+    emit_opcode(masm,0x1B);\n+    emit_rm(masm, 0x3, tmpReg, tmpReg);\n@@ -2260,2 +2231,2 @@\n-    emit_opcode(cbuf,0x23);\n-    emit_rm(cbuf, 0x3, tmpReg, $y$$reg);\n+    emit_opcode(masm,0x23);\n+    emit_rm(masm, 0x3, tmpReg, $y$$reg);\n@@ -2263,2 +2234,2 @@\n-    emit_opcode(cbuf,0x03);\n-    emit_rm(cbuf, 0x3, $p$$reg, tmpReg);\n+    emit_opcode(masm,0x03);\n+    emit_rm(masm, 0x3, $p$$reg, tmpReg);\n@@ -2269,3 +2240,3 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0, ECX_enc);\n-    emit_d32(cbuf,0x20);\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0, ECX_enc);\n+    emit_d32(masm,0x20);\n@@ -2273,2 +2244,2 @@\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, 0x04);\n+    emit_opcode(masm, 0x74);\n+    emit_d8(masm, 0x04);\n@@ -2276,2 +2247,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg );\n@@ -2279,2 +2250,2 @@\n-    emit_opcode(cbuf, 0x33);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $dst$$reg);\n+    emit_opcode(masm, 0x33);\n+    emit_rm(masm, 0x3, $dst$$reg, $dst$$reg);\n@@ -2283,3 +2254,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xA5);\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xA5);\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg));\n@@ -2287,2 +2258,2 @@\n-    emit_opcode(cbuf,0xD3);\n-    emit_rm(cbuf, 0x3, 0x4, $dst$$reg );\n+    emit_opcode(masm,0xD3);\n+    emit_rm(masm, 0x3, 0x4, $dst$$reg );\n@@ -2293,3 +2264,3 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0, ECX_enc);\n-    emit_d32(cbuf,0x20);\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0, ECX_enc);\n+    emit_d32(masm,0x20);\n@@ -2297,2 +2268,2 @@\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, 0x04);\n+    emit_opcode(masm, 0x74);\n+    emit_d8(masm, 0x04);\n@@ -2300,2 +2271,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2303,2 +2274,2 @@\n-    emit_opcode(cbuf, 0x33);\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_opcode(masm, 0x33);\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($dst$$reg));\n@@ -2307,3 +2278,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xAD);\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg);\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xAD);\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg);\n@@ -2311,2 +2282,2 @@\n-    emit_opcode(cbuf,0xD3);\n-    emit_rm(cbuf, 0x3, 0x5, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode(masm,0xD3);\n+    emit_rm(masm, 0x3, 0x5, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2317,3 +2288,3 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0, ECX_enc);\n-    emit_d32(cbuf,0x20);\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0, ECX_enc);\n+    emit_d32(masm,0x20);\n@@ -2321,2 +2292,2 @@\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, 0x05);\n+    emit_opcode(masm, 0x74);\n+    emit_d8(masm, 0x05);\n@@ -2324,2 +2295,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2327,3 +2298,3 @@\n-    emit_opcode(cbuf, 0xC1);\n-    emit_rm(cbuf, 0x3, 7, HIGH_FROM_LOW_ENC($dst$$reg) );\n-    emit_d8(cbuf, 0x1F );\n+    emit_opcode(masm, 0xC1);\n+    emit_rm(masm, 0x3, 7, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_d8(masm, 0x1F );\n@@ -2332,3 +2303,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xAD);\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg);\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xAD);\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg);\n@@ -2336,2 +2307,2 @@\n-    emit_opcode(cbuf,0xD3);\n-    emit_rm(cbuf, 0x3, 0x7, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode(masm,0xD3);\n+    emit_rm(masm, 0x3, 0x7, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2345,1 +2316,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $src$$reg );\n+    emit_rm(masm, 0x3, $secondary, $src$$reg );\n@@ -2350,2 +2321,2 @@\n-    emit_opcode( cbuf, 0xDD );\n-    emit_d8( cbuf, 0xD8 );\n+    emit_opcode( masm, 0xDD );\n+    emit_d8( masm, 0xD8 );\n@@ -2356,2 +2327,2 @@\n-    emit_opcode( cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-    emit_d8( cbuf, 0xD8+$dst$$reg );\n+    emit_opcode( masm, 0xDD );           \/\/ FSTP   ST(i)\n+    emit_d8( masm, 0xD8+$dst$$reg );\n@@ -2361,2 +2332,2 @@\n-    emit_opcode( cbuf, 0xD9 );\n-    emit_d8( cbuf, 0xC0-1+$dst$$reg );   \/\/ FLD ST(i-1)\n+    emit_opcode( masm, 0xD9 );\n+    emit_d8( masm, 0xC0-1+$dst$$reg );   \/\/ FLD ST(i-1)\n@@ -2366,5 +2337,5 @@\n-    emit_opcode( cbuf, 0xDB );           \/\/ FLD m80real\n-    emit_opcode( cbuf, 0x2D );\n-    emit_d32( cbuf, (int)StubRoutines::x86::addr_fpu_subnormal_bias1() );\n-    emit_opcode( cbuf, 0xDE );           \/\/ FMULP ST(dst), ST0\n-    emit_opcode( cbuf, 0xC8+$dst$$reg );\n+    emit_opcode( masm, 0xDB );           \/\/ FLD m80real\n+    emit_opcode( masm, 0x2D );\n+    emit_d32( masm, (int)StubRoutines::x86::addr_fpu_subnormal_bias1() );\n+    emit_opcode( masm, 0xDE );           \/\/ FMULP ST(dst), ST0\n+    emit_opcode( masm, 0xC8+$dst$$reg );\n@@ -2374,5 +2345,5 @@\n-    emit_opcode( cbuf, 0xDB );           \/\/ FLD m80real\n-    emit_opcode( cbuf, 0x2D );\n-    emit_d32( cbuf, (int)StubRoutines::x86::addr_fpu_subnormal_bias2() );\n-    emit_opcode( cbuf, 0xDE );           \/\/ FMULP ST(dst), ST0\n-    emit_opcode( cbuf, 0xC8+$dst$$reg );\n+    emit_opcode( masm, 0xDB );           \/\/ FLD m80real\n+    emit_opcode( masm, 0x2D );\n+    emit_d32( masm, (int)StubRoutines::x86::addr_fpu_subnormal_bias2() );\n+    emit_opcode( masm, 0xDE );           \/\/ FMULP ST(dst), ST0\n+    emit_opcode( masm, 0xC8+$dst$$reg );\n@@ -2383,1 +2354,1 @@\n-    store_to_stackslot( cbuf, $primary, $src$$reg, $dst$$disp );\n+    store_to_stackslot( masm, $primary, $src$$reg, $dst$$disp );\n@@ -2389,3 +2360,3 @@\n-    emit_rm( cbuf, 0x02, $src$$reg, ESP_enc );   \/\/ R\/M byte\n-    emit_rm( cbuf, 0x00, ESP_enc, ESP_enc);          \/\/ SIB byte\n-    emit_d32(cbuf, $dst$$disp);   \/\/ Displacement\n+    emit_rm( masm, 0x02, $src$$reg, ESP_enc );   \/\/ R\/M byte\n+    emit_rm( masm, 0x00, ESP_enc, ESP_enc);          \/\/ SIB byte\n+    emit_d32(masm, $dst$$disp);   \/\/ Displacement\n@@ -2396,1 +2367,1 @@\n-    store_to_stackslot( cbuf, $primary, $secondary, $src$$disp );\n+    store_to_stackslot( masm, $primary, $secondary, $src$$disp );\n@@ -2401,1 +2372,1 @@\n-    store_to_stackslot( cbuf, 0xD9, 0x03, $dst$$disp );\n+    store_to_stackslot( masm, 0xD9, 0x03, $dst$$disp );\n@@ -2407,1 +2378,1 @@\n-    store_to_stackslot( cbuf, 0xDD, 0x03, $dst$$disp );\n+    store_to_stackslot( masm, 0xDD, 0x03, $dst$$disp );\n@@ -2411,2 +2382,2 @@\n-    emit_opcode( cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-    emit_d8( cbuf, 0xD8+$dst$$reg );\n+    emit_opcode( masm, 0xDD );           \/\/ FSTP   ST(i)\n+    emit_d8( masm, 0xD8+$dst$$reg );\n@@ -2416,2 +2387,2 @@\n-    emit_opcode( cbuf, 0xD9 );           \/\/ FLD    ST(i-1)\n-    emit_d8( cbuf, 0xC0-1+$dst$$reg );\n+    emit_opcode( masm, 0xD9 );           \/\/ FLD    ST(i-1)\n+    emit_d8( masm, 0xC0-1+$dst$$reg );\n@@ -2424,2 +2395,2 @@\n-      emit_opcode( cbuf, 0xD9 );         \/\/ FLD    ST(i-1)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 );         \/\/ FLD    ST(i-1)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2428,1 +2399,1 @@\n-    store_to_stackslot( cbuf, 0xD9, pop, $dst$$disp ); \/\/ FST<P>_S  [ESP+dst]\n+    store_to_stackslot( masm, 0xD9, pop, $dst$$disp ); \/\/ FST<P>_S  [ESP+dst]\n@@ -2435,2 +2406,2 @@\n-      emit_opcode( cbuf, 0xD9 );         \/\/ FLD    ST(i-1)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 );         \/\/ FLD    ST(i-1)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2439,1 +2410,1 @@\n-    store_to_stackslot( cbuf, 0xDD, pop, $dst$$disp ); \/\/ FST<P>_D  [ESP+dst]\n+    store_to_stackslot( masm, 0xDD, pop, $dst$$disp ); \/\/ FST<P>_D  [ESP+dst]\n@@ -2446,2 +2417,2 @@\n-      emit_opcode( cbuf, 0xD9 );         \/\/ FLD    ST(src-1)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 );         \/\/ FLD    ST(src-1)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2450,2 +2421,2 @@\n-    emit_opcode( cbuf, 0xDD );\n-    emit_d8( cbuf, pop+$dst$$reg );      \/\/ FST<P> ST(i)\n+    emit_opcode( masm, 0xDD );\n+    emit_d8( masm, pop+$dst$$reg );      \/\/ FST<P> ST(i)\n@@ -2457,2 +2428,2 @@\n-    emit_opcode( cbuf, 0xD9 );\n-    emit_d8( cbuf, 0xC0-1+$dst$$reg );\n+    emit_opcode( masm, 0xD9 );\n+    emit_d8( masm, 0xC0-1+$dst$$reg );\n@@ -2461,2 +2432,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF7);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF7);\n@@ -2465,2 +2436,2 @@\n-      emit_opcode(cbuf, 0xD9);\n-      emit_d8(cbuf, 0xC8-1+$src$$reg );\n+      emit_opcode(masm, 0xD9);\n+      emit_d8(masm, 0xC8-1+$src$$reg );\n@@ -2468,2 +2439,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF6);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF6);\n@@ -2474,1 +2445,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2483,1 +2453,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2492,1 +2461,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2499,1 +2467,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2506,1 +2473,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2513,1 +2479,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2518,1 +2483,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2523,1 +2487,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2531,2 +2494,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF7);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF7);\n@@ -2534,2 +2497,2 @@\n-      emit_opcode(cbuf, 0xD9);\n-      emit_d8(cbuf, 0xC8-1+$src$$reg );\n+      emit_opcode(masm, 0xD9);\n+      emit_d8(masm, 0xC8-1+$src$$reg );\n@@ -2537,2 +2500,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF6);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF6);\n@@ -2540,4 +2503,0 @@\n-    \/\/ \/\/ following asm replaced with Pop_Reg_F or Pop_Mem_F\n-    \/\/ \/\/ FSTP   FPR$dst$$reg\n-    \/\/ emit_opcode( cbuf, 0xDD );\n-    \/\/ emit_d8( cbuf, 0xD8+$dst$$reg );\n@@ -2548,2 +2507,2 @@\n-    emit_opcode( cbuf, 0xDF );\n-    emit_opcode( cbuf, 0xE0 );\n+    emit_opcode( masm, 0xDF );\n+    emit_opcode( masm, 0xE0 );\n@@ -2551,1 +2510,1 @@\n-    emit_opcode( cbuf, 0x9E );\n+    emit_opcode( masm, 0x9E );\n@@ -2553,2 +2512,2 @@\n-    emit_opcode( cbuf, 0x7B );\n-    emit_opcode( cbuf, 0x05 );\n+    emit_opcode( masm, 0x7B );\n+    emit_opcode( masm, 0x05 );\n@@ -2561,2 +2520,2 @@\n-    emit_opcode( cbuf, 0xD9 );\n-    emit_opcode( cbuf, 0xF8 );\n+    emit_opcode( masm, 0xD9 );\n+    emit_opcode( masm, 0xF8 );\n@@ -2564,1 +2523,1 @@\n-    emit_opcode( cbuf, 0x9b );\n+    emit_opcode( masm, 0x9b );\n@@ -2566,2 +2525,2 @@\n-    emit_opcode( cbuf, 0xDF );\n-    emit_opcode( cbuf, 0xE0 );\n+    emit_opcode( masm, 0xDF );\n+    emit_opcode( masm, 0xE0 );\n@@ -2569,1 +2528,1 @@\n-    emit_opcode( cbuf, 0x9E );\n+    emit_opcode( masm, 0x9E );\n@@ -2571,6 +2530,6 @@\n-    emit_opcode( cbuf, 0x0F );\n-    emit_opcode( cbuf, 0x8A );\n-    emit_opcode( cbuf, 0xF4 );\n-    emit_opcode( cbuf, 0xFF );\n-    emit_opcode( cbuf, 0xFF );\n-    emit_opcode( cbuf, 0xFF );\n+    emit_opcode( masm, 0x0F );\n+    emit_opcode( masm, 0x8A );\n+    emit_opcode( masm, 0xF4 );\n+    emit_opcode( masm, 0xFF );\n+    emit_opcode( masm, 0xFF );\n+    emit_opcode( masm, 0xFF );\n@@ -2581,2 +2540,2 @@\n-    emit_opcode( cbuf, 0xDF);\n-    emit_opcode( cbuf, 0xE0);\n+    emit_opcode( masm, 0xDF);\n+    emit_opcode( masm, 0xE0);\n@@ -2584,3 +2543,3 @@\n-    emit_opcode( cbuf, 0x66 );   \/\/ operand-size prefix for 16-bit immediate\n-    emit_opcode( cbuf, 0xA9 );\n-    emit_d16   ( cbuf, 0x0400 );\n+    emit_opcode( masm, 0x66 );   \/\/ operand-size prefix for 16-bit immediate\n+    emit_opcode( masm, 0xA9 );\n+    emit_d16   ( masm, 0x0400 );\n@@ -2589,2 +2548,2 @@\n-    \/\/ emit_opcode( cbuf, 0xA9 );\n-    \/\/ emit_d32   ( cbuf, 0x00000400 );\n+    \/\/ emit_opcode( masm, 0xA9 );\n+    \/\/ emit_d32   ( masm, 0x00000400 );\n@@ -2593,2 +2552,2 @@\n-    emit_opcode( cbuf, 0x74 );\n-    emit_d8    ( cbuf, 0x02 );\n+    emit_opcode( masm, 0x74 );\n+    emit_d8    ( masm, 0x02 );\n@@ -2596,2 +2555,2 @@\n-    emit_opcode( cbuf, 0xB4 );\n-    emit_d8    ( cbuf, 0x01 );\n+    emit_opcode( masm, 0xB4 );\n+    emit_d8    ( masm, 0x01 );\n@@ -2599,1 +2558,1 @@\n-    emit_opcode( cbuf, 0x9E);\n+    emit_opcode( masm, 0x9E);\n@@ -2606,2 +2565,2 @@\n-    emit_opcode( cbuf, 0x7B );\n-    emit_d8    ( cbuf, 0x03 );\n+    emit_opcode( masm, 0x7B );\n+    emit_d8    ( masm, 0x03 );\n@@ -2609,2 +2568,2 @@\n-    emit_opcode( cbuf, 0xB4 );\n-    emit_d8    ( cbuf, 0x01 );\n+    emit_opcode( masm, 0xB4 );\n+    emit_d8    ( masm, 0x01 );\n@@ -2612,1 +2571,1 @@\n-    emit_opcode( cbuf, 0x9E);\n+    emit_opcode( masm, 0x9E);\n@@ -2614,1 +2573,1 @@\n-    emit_opcode( cbuf, 0x90);\n+    emit_opcode( masm, 0x90);\n@@ -2634,2 +2593,2 @@\n-    emit_opcode( cbuf, 0xDF);\n-    emit_opcode( cbuf, 0xE0);\n+    emit_opcode( masm, 0xDF);\n+    emit_opcode( masm, 0xE0);\n@@ -2637,1 +2596,1 @@\n-    emit_opcode( cbuf, 0x9E);\n+    emit_opcode( masm, 0x9E);\n@@ -2639,2 +2598,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, -1 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, -1 );\n@@ -2642,2 +2601,2 @@\n-    emit_opcode( cbuf, 0x7A );\n-    emit_d8    ( cbuf, 0x13 );\n+    emit_opcode( masm, 0x7A );\n+    emit_d8    ( masm, 0x13 );\n@@ -2645,2 +2604,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, -1 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, -1 );\n@@ -2648,2 +2607,2 @@\n-    emit_opcode( cbuf, 0x72 );\n-    emit_d8    ( cbuf, 0x0C );\n+    emit_opcode( masm, 0x72 );\n+    emit_d8    ( masm, 0x0C );\n@@ -2651,2 +2610,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, 0 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, 0 );\n@@ -2654,2 +2613,2 @@\n-    emit_opcode( cbuf, 0x74 );\n-    emit_d8    ( cbuf, 0x05 );\n+    emit_opcode( masm, 0x74 );\n+    emit_d8    ( masm, 0x05 );\n@@ -2657,2 +2616,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, 1 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, 1 );\n@@ -2666,2 +2625,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($src1$$reg), HIGH_FROM_LOW_ENC($src2$$reg) );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($src1$$reg), HIGH_FROM_LOW_ENC($src2$$reg) );\n@@ -2669,2 +2628,2 @@\n-    emit_opcode(cbuf,0x75);\n-    emit_d8(cbuf, 2 );\n+    emit_opcode(masm,0x75);\n+    emit_d8(masm, 2 );\n@@ -2672,2 +2631,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $src1$$reg, $src2$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $src1$$reg, $src2$$reg );\n@@ -2681,1 +2640,1 @@\n-    encode_Copy( cbuf, dst_encoding  , src_encoding );\n+    encode_Copy( masm, dst_encoding  , src_encoding );\n@@ -2683,1 +2642,1 @@\n-    encode_Copy( cbuf, HIGH_FROM_LOW_ENC(dst_encoding), src_encoding );\n+    encode_Copy( masm, HIGH_FROM_LOW_ENC(dst_encoding), src_encoding );\n@@ -2685,3 +2644,3 @@\n-    emit_opcode( cbuf, 0xC1 );\n-    emit_rm(cbuf, 0x3, 7, HIGH_FROM_LOW_ENC(dst_encoding) );\n-    emit_d8(cbuf, 0x1F );\n+    emit_opcode( masm, 0xC1 );\n+    emit_rm(masm, 0x3, 7, HIGH_FROM_LOW_ENC(dst_encoding) );\n+    emit_d8(masm, 0x1F );\n@@ -2692,1 +2651,1 @@\n-    emit_opcode(cbuf, 0x50+HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_opcode(masm, 0x50+HIGH_FROM_LOW_ENC($src$$reg));\n@@ -2694,1 +2653,1 @@\n-    emit_opcode(cbuf, 0x50+$src$$reg  );\n+    emit_opcode(masm, 0x50+$src$$reg  );\n@@ -2696,4 +2655,4 @@\n-    emit_opcode(cbuf,0xdf);\n-    emit_d8(cbuf, 0x6C);\n-    emit_d8(cbuf, 0x24);\n-    emit_d8(cbuf, 0x00);\n+    emit_opcode(masm,0xdf);\n+    emit_d8(masm, 0x6C);\n+    emit_d8(masm, 0x24);\n+    emit_d8(masm, 0x00);\n@@ -2701,3 +2660,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #8\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, 0x8);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #8\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, 0x8);\n@@ -2708,2 +2667,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x5, $src1$$reg );\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x5, $src1$$reg );\n@@ -2713,3 +2672,3 @@\n-      emit_opcode(cbuf, 0xC1);\n-      emit_rm(cbuf, 0x3, 7, $dst$$reg );\n-      emit_d8(cbuf, shift_count);\n+      emit_opcode(masm, 0xC1);\n+      emit_rm(masm, 0x3, 7, $dst$$reg );\n+      emit_d8(masm, shift_count);\n@@ -2722,1 +2681,1 @@\n-    emit_opcode(cbuf, 0x50+HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_opcode(masm, 0x50+HIGH_FROM_LOW_ENC($src$$reg));\n@@ -2724,1 +2683,1 @@\n-    emit_opcode(cbuf, 0x50+$src$$reg  );\n+    emit_opcode(masm, 0x50+$src$$reg  );\n@@ -2726,4 +2685,4 @@\n-    emit_opcode(cbuf,0xdf);\n-    emit_d8(cbuf, 0x6C);\n-    emit_d8(cbuf, 0x24);\n-    emit_d8(cbuf, 0x00);\n+    emit_opcode(masm,0xdf);\n+    emit_d8(masm, 0x6C);\n+    emit_d8(masm, 0x24);\n+    emit_d8(masm, 0x00);\n@@ -2735,2 +2694,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x5, $src$$reg);\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x5, $src$$reg);\n@@ -2742,2 +2701,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x4, $src$$reg);\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x4, $src$$reg);\n@@ -2750,1 +2709,1 @@\n-    encode_Copy( cbuf, $tmp$$reg, $src$$reg );\n+    encode_Copy( masm, $tmp$$reg, $src$$reg );\n@@ -2752,3 +2711,3 @@\n-    emit_opcode( cbuf, 0x0F );\n-    emit_opcode( cbuf, 0xAF );\n-    emit_rm( cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode( masm, 0x0F );\n+    emit_opcode( masm, 0xAF );\n+    emit_rm( masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2756,1 +2715,1 @@\n-    encode_Copy( cbuf, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg) );\n+    encode_Copy( masm, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg) );\n@@ -2758,3 +2717,3 @@\n-    emit_opcode( cbuf, 0x0F );\n-    emit_opcode( cbuf, 0xAF );\n-    emit_rm( cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg );\n+    emit_opcode( masm, 0x0F );\n+    emit_opcode( masm, 0xAF );\n+    emit_rm( masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg );\n@@ -2762,2 +2721,2 @@\n-    emit_opcode( cbuf, 0x03 );\n-    emit_rm( cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode( masm, 0x03 );\n+    emit_rm( masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2765,2 +2724,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x4, $src$$reg );\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x4, $src$$reg );\n@@ -2768,2 +2727,2 @@\n-    emit_opcode( cbuf, 0x03 );\n-    emit_rm( cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $tmp$$reg );\n+    emit_opcode( masm, 0x03 );\n+    emit_rm( masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $tmp$$reg );\n@@ -2776,3 +2735,3 @@\n-    emit_opcode( cbuf, 0x6B );\n-    emit_rm( cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n-    emit_d8( cbuf, (int)$src$$constant );\n+    emit_opcode( masm, 0x6B );\n+    emit_rm( masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_d8( masm, (int)$src$$constant );\n@@ -2780,2 +2739,2 @@\n-    emit_opcode(cbuf, 0xB8 + EDX_enc);\n-    emit_d32( cbuf, (int)$src$$constant );\n+    emit_opcode(masm, 0xB8 + EDX_enc);\n+    emit_d32( masm, (int)$src$$constant );\n@@ -2783,2 +2742,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x4, EDX_enc );\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x4, EDX_enc );\n@@ -2786,2 +2745,2 @@\n-    emit_opcode( cbuf, 0x03 );\n-    emit_rm( cbuf, 0x3, EDX_enc, $tmp$$reg );\n+    emit_opcode( masm, 0x03 );\n+    emit_rm( masm, 0x3, EDX_enc, $tmp$$reg );\n@@ -2792,1 +2751,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW_ENC(0x50+$src1$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW_ENC(0x50+$src1$$reg) );\n@@ -2794,1 +2753,1 @@\n-    emit_opcode(cbuf,               0x50+$src1$$reg  );\n+    emit_opcode(masm,               0x50+$src1$$reg  );\n@@ -2796,1 +2755,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW_ENC(0x50+$src2$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW_ENC(0x50+$src2$$reg) );\n@@ -2798,1 +2757,1 @@\n-    emit_opcode(cbuf,               0x50+$src2$$reg  );\n+    emit_opcode(masm,               0x50+$src2$$reg  );\n@@ -2800,4 +2759,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (CAST_FROM_FN_PTR(address, SharedRuntime::ldiv) - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (CAST_FROM_FN_PTR(address, SharedRuntime::ldiv) - __ pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -2806,3 +2765,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, 4*4);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, 4*4);\n@@ -2813,1 +2772,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW_ENC(0x50+$src1$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW_ENC(0x50+$src1$$reg) );\n@@ -2815,1 +2774,1 @@\n-    emit_opcode(cbuf,               0x50+$src1$$reg  );\n+    emit_opcode(masm,               0x50+$src1$$reg  );\n@@ -2817,1 +2776,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW_ENC(0x50+$src2$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW_ENC(0x50+$src2$$reg) );\n@@ -2819,1 +2778,1 @@\n-    emit_opcode(cbuf,               0x50+$src2$$reg  );\n+    emit_opcode(masm,               0x50+$src2$$reg  );\n@@ -2821,4 +2780,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (CAST_FROM_FN_PTR(address, SharedRuntime::lrem ) - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (CAST_FROM_FN_PTR(address, SharedRuntime::lrem ) - __ pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -2827,3 +2786,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, 4*4);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, 4*4);\n@@ -2834,2 +2793,2 @@\n-    emit_opcode(cbuf, 0x8B);\n-    emit_rm(cbuf, 0x3, $tmp$$reg, $src$$reg);\n+    emit_opcode(masm, 0x8B);\n+    emit_rm(masm, 0x3, $tmp$$reg, $src$$reg);\n@@ -2837,2 +2796,2 @@\n-    emit_opcode(cbuf, 0x0B);\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_opcode(masm, 0x0B);\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src$$reg));\n@@ -2843,2 +2802,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $src1$$reg, $src2$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $src1$$reg, $src2$$reg );\n@@ -2846,2 +2805,2 @@\n-    emit_cc(cbuf, 0x70, 0x5);\n-    emit_d8(cbuf,2);\n+    emit_cc(masm, 0x70, 0x5);\n+    emit_d8(masm,2);\n@@ -2849,2 +2808,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($src1$$reg), HIGH_FROM_LOW_ENC($src2$$reg) );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($src1$$reg), HIGH_FROM_LOW_ENC($src2$$reg) );\n@@ -2855,2 +2814,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $src1$$reg, $src2$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $src1$$reg, $src2$$reg );\n@@ -2858,2 +2817,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src1$$reg) );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src1$$reg) );\n@@ -2861,2 +2820,2 @@\n-    emit_opcode( cbuf, 0x1B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src2$$reg) );\n+    emit_opcode( masm, 0x1B );\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src2$$reg) );\n@@ -2867,2 +2826,2 @@\n-    emit_opcode(cbuf,0x33);  \/\/ XOR\n-    emit_rm(cbuf,0x3, $tmp$$reg, $tmp$$reg);\n+    emit_opcode(masm,0x33);  \/\/ XOR\n+    emit_rm(masm,0x3, $tmp$$reg, $tmp$$reg);\n@@ -2870,2 +2829,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, $src$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $tmp$$reg, $src$$reg );\n@@ -2873,2 +2832,2 @@\n-    emit_opcode( cbuf, 0x1B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src$$reg) );\n+    emit_opcode( masm, 0x1B );\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src$$reg) );\n@@ -2879,7 +2838,7 @@\n-    emit_opcode(cbuf,0xF7);    \/\/ NEG hi\n-    emit_rm    (cbuf,0x3, 0x3, HIGH_FROM_LOW_ENC($dst$$reg));\n-    emit_opcode(cbuf,0xF7);    \/\/ NEG lo\n-    emit_rm    (cbuf,0x3, 0x3,               $dst$$reg );\n-    emit_opcode(cbuf,0x83);    \/\/ SBB hi,0\n-    emit_rm    (cbuf,0x3, 0x3, HIGH_FROM_LOW_ENC($dst$$reg));\n-    emit_d8    (cbuf,0 );\n+    emit_opcode(masm,0xF7);    \/\/ NEG hi\n+    emit_rm    (masm,0x3, 0x3, HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_opcode(masm,0xF7);    \/\/ NEG lo\n+    emit_rm    (masm,0x3, 0x3,               $dst$$reg );\n+    emit_opcode(masm,0x83);    \/\/ SBB hi,0\n+    emit_rm    (masm,0x3, 0x3, HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_d8    (masm,0 );\n@@ -2889,1 +2848,1 @@\n-    emit_opcode(cbuf,0x5A);\n+    emit_opcode(masm,0x5A);\n@@ -2893,4 +2852,3 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf, 0xE9);        \/\/ jmp    entry\n-    emit_d32_reloc(cbuf, (int)OptoRuntime::rethrow_stub() - ((int)cbuf.insts_end())-4,\n+    __ set_inst_mark();\n+    emit_opcode(masm, 0xE9);        \/\/ jmp    entry\n+    emit_d32_reloc(masm, (int)OptoRuntime::rethrow_stub() - ((int)__ pc())-4,\n@@ -2898,0 +2856,1 @@\n+    __ clear_inst_mark();\n@@ -2915,3 +2874,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW  trunc\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32(cbuf,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW  trunc\n+    emit_opcode(masm,0x2D);\n+    emit_d32(masm,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n@@ -2919,3 +2878,3 @@\n-    emit_opcode(cbuf,0x83);            \/\/ SUB ESP,4\n-    emit_opcode(cbuf,0xEC);\n-    emit_d8(cbuf,0x04);\n+    emit_opcode(masm,0x83);            \/\/ SUB ESP,4\n+    emit_opcode(masm,0xEC);\n+    emit_d8(masm,0x04);\n@@ -2924,3 +2883,3 @@\n-    emit_opcode(cbuf,0xDB);            \/\/ FISTP [ESP]\n-    emit_opcode(cbuf,0x1C);\n-    emit_d8(cbuf,0x24);\n+    emit_opcode(masm,0xDB);            \/\/ FISTP [ESP]\n+    emit_opcode(masm,0x1C);\n+    emit_d8(masm,0x24);\n@@ -2928,3 +2887,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW   std\/24-bit mode\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32( cbuf, Compile::current()->in_24_bit_fp_mode()\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW   std\/24-bit mode\n+    emit_opcode(masm,0x2D);\n+    emit_d32( masm, Compile::current()->in_24_bit_fp_mode()\n@@ -2935,5 +2894,5 @@\n-    emit_opcode(cbuf,0x58);       \/\/ POP EAX\n-    emit_opcode(cbuf,0x3D);       \/\/ CMP EAX,imm\n-    emit_d32   (cbuf,0x80000000); \/\/         0x80000000\n-    emit_opcode(cbuf,0x75);       \/\/ JNE around_slow_call\n-    emit_d8    (cbuf,0x07);       \/\/ Size of slow_call\n+    emit_opcode(masm,0x58);       \/\/ POP EAX\n+    emit_opcode(masm,0x3D);       \/\/ CMP EAX,imm\n+    emit_d32   (masm,0x80000000); \/\/         0x80000000\n+    emit_opcode(masm,0x75);       \/\/ JNE around_slow_call\n+    emit_d8    (masm,0x07);       \/\/ Size of slow_call\n@@ -2941,2 +2900,2 @@\n-    emit_opcode(cbuf,0xD9 );      \/\/ FLD     ST(i)\n-    emit_d8    (cbuf,0xC0-1+$src$$reg );\n+    emit_opcode(masm,0xD9 );      \/\/ FLD     ST(i)\n+    emit_d8    (masm,0xC0-1+$src$$reg );\n@@ -2944,4 +2903,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (StubRoutines::x86::d2i_wrapper() - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (StubRoutines::x86::d2i_wrapper() - __ pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -2953,3 +2912,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW  trunc\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32(cbuf,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW  trunc\n+    emit_opcode(masm,0x2D);\n+    emit_d32(masm,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n@@ -2957,3 +2916,3 @@\n-    emit_opcode(cbuf,0x83);            \/\/ SUB ESP,8\n-    emit_opcode(cbuf,0xEC);\n-    emit_d8(cbuf,0x08);\n+    emit_opcode(masm,0x83);            \/\/ SUB ESP,8\n+    emit_opcode(masm,0xEC);\n+    emit_d8(masm,0x08);\n@@ -2962,3 +2921,3 @@\n-    emit_opcode(cbuf,0xDF);            \/\/ FISTP [ESP]\n-    emit_opcode(cbuf,0x3C);\n-    emit_d8(cbuf,0x24);\n+    emit_opcode(masm,0xDF);            \/\/ FISTP [ESP]\n+    emit_opcode(masm,0x3C);\n+    emit_d8(masm,0x24);\n@@ -2966,3 +2925,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW   std\/24-bit mode\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32( cbuf, Compile::current()->in_24_bit_fp_mode()\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW   std\/24-bit mode\n+    emit_opcode(masm,0x2D);\n+    emit_d32( masm, Compile::current()->in_24_bit_fp_mode()\n@@ -2973,11 +2932,11 @@\n-    emit_opcode(cbuf,0x58);       \/\/ POP EAX\n-    emit_opcode(cbuf,0x5A);       \/\/ POP EDX\n-    emit_opcode(cbuf,0x81);       \/\/ CMP EDX,imm\n-    emit_d8    (cbuf,0xFA);       \/\/ rdx\n-    emit_d32   (cbuf,0x80000000); \/\/         0x80000000\n-    emit_opcode(cbuf,0x75);       \/\/ JNE around_slow_call\n-    emit_d8    (cbuf,0x07+4);     \/\/ Size of slow_call\n-    emit_opcode(cbuf,0x85);       \/\/ TEST EAX,EAX\n-    emit_opcode(cbuf,0xC0);       \/\/ 2\/rax,\/rax,\n-    emit_opcode(cbuf,0x75);       \/\/ JNE around_slow_call\n-    emit_d8    (cbuf,0x07);       \/\/ Size of slow_call\n+    emit_opcode(masm,0x58);       \/\/ POP EAX\n+    emit_opcode(masm,0x5A);       \/\/ POP EDX\n+    emit_opcode(masm,0x81);       \/\/ CMP EDX,imm\n+    emit_d8    (masm,0xFA);       \/\/ rdx\n+    emit_d32   (masm,0x80000000); \/\/         0x80000000\n+    emit_opcode(masm,0x75);       \/\/ JNE around_slow_call\n+    emit_d8    (masm,0x07+4);     \/\/ Size of slow_call\n+    emit_opcode(masm,0x85);       \/\/ TEST EAX,EAX\n+    emit_opcode(masm,0xC0);       \/\/ 2\/rax,\/rax,\n+    emit_opcode(masm,0x75);       \/\/ JNE around_slow_call\n+    emit_d8    (masm,0x07);       \/\/ Size of slow_call\n@@ -2985,2 +2944,2 @@\n-    emit_opcode(cbuf,0xD9 );      \/\/ FLD     ST(i)\n-    emit_d8    (cbuf,0xC0-1+$src$$reg );\n+    emit_opcode(masm,0xD9 );      \/\/ FLD     ST(i)\n+    emit_d8    (masm,0xC0-1+$src$$reg );\n@@ -2988,4 +2947,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (StubRoutines::x86::d2l_wrapper() - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (StubRoutines::x86::d2l_wrapper() - __ pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -2999,2 +2958,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC8 + $src1$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC8 + $src1$$reg);\n@@ -3005,2 +2964,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC0 + $src2$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC0 + $src2$$reg);\n@@ -3012,2 +2971,2 @@\n-    emit_opcode(cbuf, 0xDE);\n-    emit_opcode(cbuf, 0xC0 + $src2$$reg);\n+    emit_opcode(masm, 0xDE);\n+    emit_opcode(masm, 0xC0 + $src2$$reg);\n@@ -3019,2 +2978,2 @@\n-      emit_opcode(cbuf, 0xD8);\n-      emit_opcode(cbuf, 0xE0 + $src1$$reg);\n+      emit_opcode(masm, 0xD8);\n+      emit_opcode(masm, 0xE0 + $src1$$reg);\n@@ -3023,2 +2982,2 @@\n-      emit_opcode(cbuf, 0xD8);\n-      emit_opcode(cbuf, 0xF0 + $src2$$reg);\n+      emit_opcode(masm, 0xD8);\n+      emit_opcode(masm, 0xF0 + $src2$$reg);\n@@ -3030,2 +2989,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC0 + $src1$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC0 + $src1$$reg);\n@@ -3034,2 +2993,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC8 + $src2$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC8 + $src2$$reg);\n@@ -3042,2 +3001,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC0 + $src1$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC0 + $src1$$reg);\n@@ -3046,2 +3005,2 @@\n-    emit_opcode(cbuf, 0xDE);\n-    emit_opcode(cbuf, 0xC8 + $src2$$reg);\n+    emit_opcode(masm, 0xDE);\n+    emit_opcode(masm, 0xC8 + $src2$$reg);\n@@ -3052,1 +3011,1 @@\n-    emit_opcode(cbuf,0xDF);\n+    emit_opcode(masm,0xDF);\n@@ -3059,2 +3018,2 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n-    store_to_stackslot( cbuf, 0x0DF, 0x07, $dst$$disp );\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    store_to_stackslot( masm, 0x0DF, 0x07, $dst$$disp );\n@@ -3068,3 +3027,3 @@\n-    store_to_stackslot( cbuf, 0x0DF, 0x05, $src$$disp );\n-    cbuf.set_insts_mark();            \/\/ Mark start of FIST in case $mem has an oop\n-    emit_opcode(cbuf,0xDF);\n+    store_to_stackslot( masm, 0x0DF, 0x05, $src$$disp );\n+    __ set_inst_mark();            \/\/ Mark start of FIST in case $mem has an oop\n+    emit_opcode(masm,0xDF);\n@@ -3077,1 +3036,2 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    __ clear_inst_mark();\n@@ -5757,1 +5717,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5769,1 +5729,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5780,1 +5740,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5793,2 +5753,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_DPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -5843,2 +5803,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_FPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -5855,1 +5815,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5865,1 +5825,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5875,1 +5835,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5885,1 +5845,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5895,1 +5855,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5904,1 +5864,1 @@\n-  ins_encode( LdImmI(dst, src) );\n+  ins_encode( SetInstMark, LdImmI(dst, src), ClearInstMark );\n@@ -5925,1 +5885,1 @@\n-  ins_encode( LdImmP(dst, src) );\n+  ins_encode( SetInstMark, LdImmP(dst, src), ClearInstMark );\n@@ -6083,1 +6043,1 @@\n-  ins_encode( OpcP, RegMem(dst,src));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,src), ClearInstMark);\n@@ -6094,1 +6054,1 @@\n-  ins_encode( OpcP, RegMem( dst, src ), OpcS, RegMem_Hi( dst, src ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src ), OpcS, RegMem_Hi( dst, src ), ClearInstMark );\n@@ -6105,1 +6065,1 @@\n-  ins_encode( OpcP, RegMem(dst,src));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,src), ClearInstMark);\n@@ -6117,2 +6077,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_FPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -6130,2 +6090,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_DPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -6205,1 +6165,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6216,1 +6176,1 @@\n-  ins_encode( OpcS, OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcS, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6227,1 +6187,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6240,1 +6200,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ), OpcS, RegMem_Hi( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), OpcS, RegMem_Hi( src, mem ), ClearInstMark );\n@@ -6268,1 +6228,1 @@\n-  ins_encode( OpcP, RegMem( EAX, mem ), enc_storeL_volatile(mem,src));\n+  ins_encode( SetInstMark, OpcP, RegMem( EAX, mem ), enc_storeL_volatile(mem,src), ClearInstMark);\n@@ -6315,1 +6275,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6326,1 +6286,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con32(src), ClearInstMark);\n@@ -6338,1 +6298,1 @@\n-  ins_encode( SizePrefix, OpcP, RMopc_Mem(0x00,mem),  Con16( src ));\n+  ins_encode( SetInstMark, SizePrefix, OpcP, RMopc_Mem(0x00,mem), Con16(src), ClearInstMark);\n@@ -6350,1 +6310,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con32( src ), ClearInstMark);\n@@ -6361,1 +6321,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con8or32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con8or32(src), ClearInstMark);\n@@ -6372,1 +6332,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con8or32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con8or32(src), ClearInstMark);\n@@ -6471,1 +6431,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32FPR_as_bits( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),  Con32FPR_as_bits(src), ClearInstMark);\n@@ -6483,1 +6443,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32F_as_bits( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),  Con32F_as_bits(src), ClearInstMark);\n@@ -6517,1 +6477,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ), ClearInstMark );\n@@ -6692,1 +6652,1 @@\n-  ins_encode( enc_cmov(cop), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cop), RegMem( dst, src ), ClearInstMark );\n@@ -6703,1 +6663,1 @@\n-  ins_encode( enc_cmov(cop), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cop), RegMem( dst, src ), ClearInstMark );\n@@ -7001,1 +6961,1 @@\n-  ins_encode( OpcP, RegLea( dst, src0, src1 ) );\n+  ins_encode( SetInstMark, OpcP, RegLea( dst, src0, src1 ), ClearInstMark );\n@@ -7011,1 +6971,1 @@\n-  ins_encode( OpcP, RegLea( dst, src0, src1 ) );\n+  ins_encode( SetInstMark, OpcP, RegLea( dst, src0, src1 ), ClearInstMark );\n@@ -7056,1 +7016,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -7067,1 +7027,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -7079,1 +7039,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(0x00,dst), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(0x00,dst), Con8or32(src), ClearInstMark );\n@@ -7090,1 +7050,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,dst), ClearInstMark);\n@@ -7101,1 +7061,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x01,dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x01,dst), ClearInstMark);\n@@ -7423,1 +7383,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -7434,1 +7394,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -7540,1 +7500,1 @@\n-  ins_encode( OpcSE(imm), RegMem( dst, src ), Con8or32( imm ) );\n+  ins_encode( SetInstMark, OpcSE(imm), RegMem( dst, src ), Con8or32( imm ), ClearInstMark );\n@@ -7552,1 +7512,1 @@\n-  ins_encode( OpcS, OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcS, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -7957,1 +7917,1 @@\n-  ins_encode( OpcP, RMopc_Mem(secondary,dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(secondary,dst), ClearInstMark );\n@@ -7980,1 +7940,1 @@\n-  ins_encode( OpcP, RMopc_Mem(secondary, dst ), Con8or32( shift ) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(secondary, dst ), Con8or32(shift), ClearInstMark );\n@@ -8096,1 +8056,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -8108,1 +8068,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -8121,1 +8081,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32(src), ClearInstMark );\n@@ -8287,1 +8247,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -8299,1 +8259,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -8312,1 +8272,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32(src), ClearInstMark );\n@@ -8494,1 +8454,1 @@\n-  ins_encode( OpcP, RegMem(dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem(dst, src), ClearInstMark );\n@@ -8506,1 +8466,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -8518,1 +8478,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32(src), ClearInstMark );\n@@ -8804,1 +8764,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -8839,1 +8799,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -8882,1 +8842,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -9120,1 +9080,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -9166,1 +9126,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -9448,1 +9408,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -9477,1 +9437,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -9508,1 +9468,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -9528,1 +9488,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -9570,2 +9530,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -9632,2 +9592,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -9647,4 +9607,5 @@\n-  ins_encode( Opcode(0xDD), RMopc_Mem(0x00,dst),\n-              Opcode(0xD8), RegOpc(src),\n-              set_instruction_start,\n-              Opcode(0xDD), RMopc_Mem(0x03,dst) );\n+  ins_encode( SetInstMark, Opcode(0xDD), RMopc_Mem(0x00,dst),\n+              Opcode(0xD8), RegOpc(src), ClearInstMark,\n+              SetInstMark,\n+              Opcode(0xDD), RMopc_Mem(0x03,dst),\n+              ClearInstMark);\n@@ -9755,2 +9716,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -9770,1 +9731,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,mem),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,mem),\n@@ -9772,1 +9733,1 @@\n-              Pop_Reg_DPR(dst) );\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -10031,1 +9992,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -10060,1 +10021,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -10091,1 +10052,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -10111,1 +10072,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -10197,1 +10158,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10199,1 +10160,1 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst), ClearInstMark );\n@@ -10211,2 +10172,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -10224,1 +10185,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src1),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src1),\n@@ -10226,1 +10187,1 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst), ClearInstMark );\n@@ -10238,2 +10199,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n-              set_instruction_start,\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10241,1 +10201,2 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst),\n+              ClearInstMark);\n@@ -10252,2 +10213,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n-              set_instruction_start,\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10255,1 +10215,2 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst),\n+              ClearInstMark);\n@@ -10331,1 +10292,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10333,1 +10294,1 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst), ClearInstMark );\n@@ -10345,1 +10306,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10347,1 +10308,1 @@\n-              Pop_Reg_FPR(dst) );\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -10358,2 +10319,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n-              set_instruction_start,\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10361,1 +10321,2 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst),\n+              ClearInstMark );\n@@ -10409,1 +10370,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,mem1),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,mem1),\n@@ -10411,1 +10372,1 @@\n-              Pop_Reg_FPR(dst) );\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -10427,1 +10388,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem1),\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem1),\n@@ -10430,1 +10391,1 @@\n-              Pop_Reg_FPR(dst) );\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -10969,2 +10930,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_DPR(dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_DPR(dst), ClearInstMark);\n@@ -11007,2 +10968,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Mem_FPR(dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Mem_FPR(dst), ClearInstMark);\n@@ -11031,2 +10992,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_FPR(dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_FPR(dst), ClearInstMark);\n@@ -11230,2 +11191,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_FPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -11269,1 +11230,1 @@\n-  ins_encode( OpcP, RegMem(dst,src), OpcS, RegMem_Hi(dst,src));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,src), OpcS, RegMem_Hi(dst,src), ClearInstMark);\n@@ -11320,1 +11281,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ), ClearInstMark );\n@@ -11334,2 +11295,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_DPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -12249,1 +12210,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12277,1 +12238,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -12308,1 +12269,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12346,1 +12307,1 @@\n-  ins_encode( OpcSErm( op1, op2 ), Con8or32( op2 ) );\n+  ins_encode( SetInstMark, OpcSErm( op1, op2 ), Con8or32( op2 ), ClearInstMark );\n@@ -12357,1 +12318,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12380,1 +12341,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12405,1 +12366,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,op), Con_d32(0xFFFFFFFF) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,op), Con_d32(0xFFFFFFFF), ClearInstMark );\n@@ -12973,1 +12934,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src), ClearInstMark );\n@@ -13012,1 +12973,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem( dst, src ), ClearInstMark );\n@@ -13182,1 +13143,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src), ClearInstMark );\n@@ -13203,1 +13164,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem( dst, src ), ClearInstMark );\n@@ -13383,1 +13344,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src), ClearInstMark );\n@@ -13422,1 +13383,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem( dst, src ), ClearInstMark );\n@@ -13769,0 +13730,1 @@\n+    __ set_inst_mark();\n@@ -13770,0 +13732,1 @@\n+    __ clear_inst_mark();\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":840,"deletions":877,"binary":false,"changes":1717,"status":"modified"},{"patch":"@@ -361,1 +361,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -522,1 +522,1 @@\n-static void emit_cmpfp_fixup(MacroAssembler& _masm) {\n+static void emit_cmpfp_fixup(MacroAssembler* masm) {\n@@ -542,1 +542,1 @@\n-static void emit_cmpfp3(MacroAssembler& _masm, Register dst) {\n+static void emit_cmpfp3(MacroAssembler* masm, Register dst) {\n@@ -561,1 +561,1 @@\n-static void emit_fp_min_max(MacroAssembler& _masm, XMMRegister dst,\n+static void emit_fp_min_max(MacroAssembler* masm, XMMRegister dst,\n@@ -646,1 +646,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -722,1 +722,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -724,1 +724,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -746,1 +745,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -798,1 +797,1 @@\n-void MachEpilogNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachEpilogNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const\n@@ -801,1 +800,0 @@\n-  MacroAssembler _masm(&cbuf);\n@@ -828,1 +826,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -884,1 +881,1 @@\n-static void vec_mov_helper(CodeBuffer *cbuf, int src_lo, int dst_lo,\n+static void vec_mov_helper(C2_MacroAssembler *masm, int src_lo, int dst_lo,\n@@ -887,1 +884,1 @@\n-void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+void vec_spill_helper(C2_MacroAssembler *masm, bool is_load,\n@@ -890,1 +887,1 @@\n-static void vec_stack_to_stack_helper(CodeBuffer *cbuf, int src_offset,\n+static void vec_stack_to_stack_helper(C2_MacroAssembler *masm, int src_offset,\n@@ -892,2 +889,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -969,1 +965,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer* cbuf,\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler* masm,\n@@ -973,1 +969,1 @@\n-  assert(cbuf != nullptr || st  != nullptr, \"sanity\");\n+  assert(masm != nullptr || st  != nullptr, \"sanity\");\n@@ -1000,1 +996,1 @@\n-      vec_stack_to_stack_helper(cbuf, src_offset, dst_offset, ireg, st);\n+      vec_stack_to_stack_helper(masm, src_offset, dst_offset, ireg, st);\n@@ -1002,1 +998,1 @@\n-      vec_mov_helper(cbuf, src_first, dst_first, src_second, dst_second, ireg, st);\n+      vec_mov_helper(masm, src_first, dst_first, src_second, dst_second, ireg, st);\n@@ -1005,1 +1001,1 @@\n-      vec_spill_helper(cbuf, false, stack_offset, src_first, ireg, st);\n+      vec_spill_helper(masm, false, stack_offset, src_first, ireg, st);\n@@ -1008,1 +1004,1 @@\n-      vec_spill_helper(cbuf, true,  stack_offset, dst_first, ireg, st);\n+      vec_spill_helper(masm, true,  stack_offset, dst_first, ireg, st);\n@@ -1024,2 +1020,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1042,2 +1037,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1065,2 +1059,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1080,2 +1073,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1098,2 +1090,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1114,2 +1105,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1132,2 +1122,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1153,2 +1142,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1168,2 +1156,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1185,2 +1172,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1201,2 +1187,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1219,2 +1204,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1233,2 +1217,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1249,2 +1232,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1271,2 +1253,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1286,2 +1267,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1303,2 +1283,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1317,2 +1296,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1334,2 +1312,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1349,2 +1326,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1373,2 +1349,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1389,2 +1364,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1406,2 +1380,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1435,2 +1408,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, nullptr);\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation(masm, ra_, false, nullptr);\n@@ -1454,1 +1427,1 @@\n-void BoxLockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void BoxLockNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const\n@@ -1459,2 +1432,1 @@\n-  MacroAssembler masm(&cbuf);\n-  masm.lea(as_Register(reg), Address(rsp, offset));\n+  __ lea(as_Register(reg), Address(rsp, offset));\n@@ -1484,1 +1456,1 @@\n-void MachUEPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachUEPNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const\n@@ -1486,2 +1458,1 @@\n-  MacroAssembler masm(&cbuf);\n-  masm.ic_check(InteriorEntryAlignment);\n+  __ ic_check(InteriorEntryAlignment);\n@@ -1666,1 +1637,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1722,1 +1692,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1764,1 +1733,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1775,1 +1743,1 @@\n-    debug_only(int off0 = cbuf.insts_size());\n+    debug_only(int off0 = __ offset());\n@@ -1780,1 +1748,0 @@\n-      MacroAssembler _masm(&cbuf);\n@@ -1783,1 +1750,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = __ offset());\n@@ -1789,1 +1756,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1800,2 +1766,0 @@\n-    MacroAssembler _masm(&cbuf);\n-\n@@ -1810,1 +1774,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -1819,1 +1783,1 @@\n-        cbuf.shared_stub_to_interp_for(_method, call_offset);\n+        __ code()->shared_stub_to_interp_for(_method, call_offset);\n@@ -1822,1 +1786,2 @@\n-        address stub = CompiledDirectCall::emit_to_interp_stub(cbuf, mark);\n+        address stub = CompiledDirectCall::emit_to_interp_stub(masm, mark);\n+        __ clear_inst_mark();\n@@ -1833,2 +1798,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    __ ic_call((address)$meth$$method, resolved_method_index(cbuf));\n+    __ ic_call((address)$meth$$method, resolved_method_index(masm));\n@@ -4354,1 +4318,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -4379,1 +4343,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -4404,1 +4368,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -4429,1 +4393,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -9735,1 +9699,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -9786,1 +9750,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -9839,1 +9803,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -9860,1 +9824,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -9880,1 +9844,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -9901,1 +9865,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -9922,1 +9886,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -9942,1 +9906,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":66,"deletions":102,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_ZERO_C2_MACROASSEMBLER_ZERO_HPP\n+#define CPU_ZERO_C2_MACROASSEMBLER_ZERO_HPP\n+\n+\/\/ C2_MacroAssembler contains high-level macros for C2\n+\n+#endif \/\/ CPU_ZERO_C2_MACROASSEMBLER_ZERO_HPP\n","filename":"src\/hotspot\/cpu\/zero\/c2_MacroAssembler_zero.hpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -45,1 +45,1 @@\n-address CompiledDirectCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n+address CompiledDirectCall::emit_to_interp_stub(MacroAssembler *masm, address mark) {\n","filename":"src\/hotspot\/cpu\/zero\/compiledIC_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2899,8 +2899,0 @@\n-  if (!inst._is_postalloc_expand) {\n-    \/\/ Define a MacroAssembler instance for use by the encoding.  The\n-    \/\/ name is chosen to match the __ idiom used for assembly in other\n-    \/\/ parts of hotspot and assumes the existence of the standard\n-    \/\/ #define __ _masm.\n-    encoding->add_code(\"    C2_MacroAssembler _masm(&cbuf);\\n\");\n-  }\n-\n","filename":"src\/hotspot\/share\/adlc\/adlparse.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1905,1 +1905,1 @@\n-\/\/ (1) void  ___Node::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+\/\/ (1) void  ___Node::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -2304,1 +2304,1 @@\n-        fprintf( _fp, \"emit_%s(cbuf, \", d32_hi_lo );\n+        fprintf( _fp, \"emit_%s(masm, \", d32_hi_lo );\n@@ -2318,1 +2318,1 @@\n-        fprintf(_fp,\"emit_%s_reloc(cbuf, \", d32_hi_lo );\n+        fprintf(_fp,\"emit_%s_reloc(masm, \", d32_hi_lo );\n@@ -2325,1 +2325,1 @@\n-        fprintf(_fp,\"  emit_%s(cbuf, \", d32_hi_lo);\n+        fprintf(_fp,\"  emit_%s(masm, \", d32_hi_lo);\n@@ -2331,1 +2331,1 @@\n-      fprintf(_fp,\"emit_d16(cbuf, \");\n+      fprintf(_fp,\"emit_d16(masm, \");\n@@ -2337,1 +2337,1 @@\n-      fprintf(_fp,\"emit_d8(cbuf, \");\n+      fprintf(_fp,\"emit_d8(masm, \");\n@@ -2678,1 +2678,1 @@\n-  fprintf(fp, \"void %sNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\\n\", inst._ident);\n+  fprintf(fp, \"void %sNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\\n\", inst._ident);\n@@ -2688,3 +2688,0 @@\n-  \/\/ Save current instruction's starting address (helps with relocation).\n-  fprintf(fp, \"  cbuf.set_insts_mark();\\n\");\n-\n@@ -2693,1 +2690,1 @@\n-    fprintf(fp, \"  ra_->C->output()->constant_table().fill_jump_table(cbuf, (MachConstantNode*) this, _index2label);\\n\");\n+    fprintf(fp, \"  ra_->C->output()->constant_table().fill_jump_table(masm, (MachConstantNode*) this, _index2label);\\n\");\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1632,1 +1632,1 @@\n-        fprintf(fp,\"  virtual void           emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\\n\");\n+        fprintf(fp,\"  virtual void           emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\\n\");\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -369,0 +369,1 @@\n+  address       begin()        const   { return code_section()->start(); }\n@@ -377,4 +378,5 @@\n-  address       inst_mark() const { return code_section()->mark();       }\n-  void      set_inst_mark()       {        code_section()->set_mark();   }\n-  void    clear_inst_mark()       {        code_section()->clear_mark(); }\n-\n+  address       inst_mark() const         { return code_section()->mark();          }\n+  void      set_inst_mark()               {        code_section()->set_mark();      }\n+  void      set_inst_mark(address addr)   {        code_section()->set_mark(addr);  }\n+  void    clear_inst_mark()               {        code_section()->clear_mark();    }\n+  void set_inst_end(address addr)         {        code_section()->set_end(addr);   }\n@@ -392,0 +394,6 @@\n+  void relocate(address addr, relocInfo::relocType rtype, int format = 0) {\n+    code_section()->relocate(addr, rtype, format);\n+  }\n+  void relocate(address addr, RelocationHolder const& rspec, int format = 0) {\n+    code_section()->relocate(addr, rspec, format);\n+  }\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"opto\/c2_MacroAssembler.hpp\"\n@@ -188,1 +189,1 @@\n-  static address emit_to_interp_stub(CodeBuffer &cbuf, address mark = nullptr);\n+  static address emit_to_interp_stub(MacroAssembler *masm, address mark = nullptr);\n","filename":"src\/hotspot\/share\/code\/compiledIC.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1246,1 +1246,2 @@\n-      if (CompiledDirectCall::emit_to_interp_stub(buffer, _instructions->start() + pc_offset) == nullptr) {\n+      MacroAssembler masm(&buffer);\n+      if (CompiledDirectCall::emit_to_interp_stub(&masm, _instructions->start() + pc_offset) == nullptr) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,2 +36,1 @@\n-void C2CodeStubList::emit(CodeBuffer& cb) {\n-  C2_MacroAssembler masm(&cb);\n+void C2CodeStubList::emit(C2_MacroAssembler& masm) {\n@@ -42,1 +41,1 @@\n-    if (cb.insts()->maybe_expand_to_ensure_remaining(max_size) && cb.blob() == nullptr) {\n+    if (masm.code()->insts()->maybe_expand_to_ensure_remaining(max_size) && masm.code()->blob() == nullptr) {\n@@ -47,1 +46,1 @@\n-    DEBUG_ONLY(int size_before = cb.insts_size();)\n+    DEBUG_ONLY(int size_before = masm.offset();)\n@@ -51,1 +50,1 @@\n-    DEBUG_ONLY(int actual_size = cb.insts_size() - size_before;)\n+    DEBUG_ONLY(int actual_size = masm.offset() - size_before;)\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  void emit(CodeBuffer& cb);\n+  void emit(C2_MacroAssembler& masm);\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -690,1 +690,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const { }\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const { }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,2 +147,1 @@\n-bool ConstantTable::emit(CodeBuffer& cb) const {\n-  MacroAssembler _masm(&cb);\n+bool ConstantTable::emit(C2_MacroAssembler* masm) const {\n@@ -153,1 +152,1 @@\n-      constant_addr = _masm.array_constant(con.type(), con.get_array(), con.alignment());\n+      constant_addr = masm->array_constant(con.type(), con.get_array(), con.alignment());\n@@ -156,4 +155,4 @@\n-      case T_INT:    constant_addr = _masm.int_constant(   con.get_jint()   ); break;\n-      case T_LONG:   constant_addr = _masm.long_constant(  con.get_jlong()  ); break;\n-      case T_FLOAT:  constant_addr = _masm.float_constant( con.get_jfloat() ); break;\n-      case T_DOUBLE: constant_addr = _masm.double_constant(con.get_jdouble()); break;\n+      case T_INT:    constant_addr = masm->int_constant(   con.get_jint()   ); break;\n+      case T_LONG:   constant_addr = masm->long_constant(  con.get_jlong()  ); break;\n+      case T_FLOAT:  constant_addr = masm->float_constant( con.get_jfloat() ); break;\n+      case T_DOUBLE: constant_addr = masm->double_constant(con.get_jdouble()); break;\n@@ -162,2 +161,2 @@\n-        int oop_index = _masm.oop_recorder()->find_index(obj);\n-        constant_addr = _masm.address_constant((address) obj, oop_Relocation::spec(oop_index));\n+        int oop_index = masm->oop_recorder()->find_index(obj);\n+        constant_addr = masm->address_constant((address) obj, oop_Relocation::spec(oop_index));\n@@ -168,1 +167,1 @@\n-        constant_addr = _masm.address_constant(addr);\n+        constant_addr = masm->address_constant(addr);\n@@ -178,1 +177,1 @@\n-        constant_addr = _masm.address_constant(dummy);\n+        constant_addr = masm->address_constant(dummy);\n@@ -182,2 +181,2 @@\n-        assert((constant_addr - _masm.code()->consts()->start()) == con.offset(),\n-              \"must be: %d == %d\", (int)(constant_addr - _masm.code()->consts()->start()), (int)(con.offset()));\n+        assert((constant_addr - masm->code()->consts()->start()) == con.offset(),\n+              \"must be: %d == %d\", (int)(constant_addr - masm->code()->consts()->start()), (int)(con.offset()));\n@@ -188,1 +187,1 @@\n-          last_addr = _masm.address_constant(dummy + j);\n+          last_addr = masm->address_constant(dummy + j);\n@@ -194,1 +193,1 @@\n-        address start = _masm.code()->consts()->start();\n+        address start = masm->code()->consts()->start();\n@@ -206,2 +205,2 @@\n-        int metadata_index = _masm.oop_recorder()->find_index(obj);\n-        constant_addr = _masm.address_constant((address) obj, metadata_Relocation::spec(metadata_index));\n+        int metadata_index = masm->oop_recorder()->find_index(obj);\n+        constant_addr = masm->address_constant((address) obj, metadata_Relocation::spec(metadata_index));\n@@ -217,2 +216,2 @@\n-    assert((constant_addr - _masm.code()->consts()->start()) == con.offset(),\n-            \"must be: %d == %d\", (int)(constant_addr - _masm.code()->consts()->start()), (int)(con.offset()));\n+    assert((constant_addr - masm->code()->consts()->start()) == con.offset(),\n+            \"must be: %d == %d\", (int)(constant_addr - masm->code()->consts()->start()), (int)(con.offset()));\n@@ -295,1 +294,1 @@\n-void ConstantTable::fill_jump_table(CodeBuffer& cb, MachConstantNode* n, GrowableArray<Label*> labels) const {\n+void ConstantTable::fill_jump_table(C2_MacroAssembler* masm, MachConstantNode* n, GrowableArray<Label*> labels) const {\n@@ -307,2 +306,1 @@\n-  MacroAssembler _masm(&cb);\n-  address* jump_table_base = (address*) (_masm.code()->consts()->start() + offset);\n+  address* jump_table_base = (address*) (masm->code()->consts()->start() + offset);\n@@ -313,2 +311,2 @@\n-    *constant_addr = cb.consts()->target(*labels.at(i), (address) constant_addr);\n-    cb.consts()->relocate((address) constant_addr, relocInfo::internal_word_type);\n+    *constant_addr = masm->code()->consts()->target(*labels.at(i), (address) constant_addr);\n+    masm->code()->consts()->relocate((address) constant_addr, relocInfo::internal_word_type);\n","filename":"src\/hotspot\/share\/opto\/constantTable.cpp","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-class CodeBuffer;\n@@ -34,0 +33,1 @@\n+class C2_MacroAssembler;\n@@ -142,1 +142,1 @@\n-  bool emit(CodeBuffer& cb) const;\n+  bool emit(C2_MacroAssembler* masm) const;\n@@ -175,1 +175,1 @@\n-  void     fill_jump_table(CodeBuffer& cb, MachConstantNode* n, GrowableArray<Label*> labels) const;\n+  void     fill_jump_table(C2_MacroAssembler* masm, MachConstantNode* n, GrowableArray<Label*> labels) const;\n","filename":"src\/hotspot\/share\/opto\/constantTable.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n","filename":"src\/hotspot\/share\/opto\/locknode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-void MachNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -607,1 +607,1 @@\n-void MachNullCheckNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachNullCheckNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n","filename":"src\/hotspot\/share\/opto\/machnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"opto\/c2_MacroAssembler.hpp\"\n@@ -37,1 +38,0 @@\n-class CodeBuffer;\n@@ -287,2 +287,2 @@\n-  \/\/ Emit bytes into cbuf\n-  virtual void  emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  \/\/ Emit bytes using C2_MacroAssembler\n+  virtual void  emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -424,1 +424,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -450,1 +450,1 @@\n-  virtual void emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const;\n+  virtual void emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const;\n@@ -501,1 +501,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -515,1 +515,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -530,1 +530,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -555,1 +555,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -613,1 +613,1 @@\n-  uint implementation( CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const;\n+  uint implementation( C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const;\n@@ -615,1 +615,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -678,1 +678,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const { }\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const { }\n@@ -718,1 +718,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -949,1 +949,1 @@\n-  int resolved_method_index(CodeBuffer &cbuf) const {\n+  int resolved_method_index(C2_MacroAssembler *masm) const {\n@@ -955,1 +955,1 @@\n-      return cbuf.oop_recorder()->find_index(_method->constant_encoding());\n+      return masm->code()->oop_recorder()->find_index(_method->constant_encoding());\n@@ -1060,1 +1060,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {}\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {}\n","filename":"src\/hotspot\/share\/opto\/machnode.hpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1095,2 +1095,2 @@\n-\/\/ Emit bytes starting at parameter 'ptr'.\n-void Node::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {}\n+\/\/ Emit bytes using C2_MacroAssembler\n+void Node::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {}\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -190,0 +190,1 @@\n+class C2_MacroAssembler;\n@@ -1172,3 +1173,2 @@\n-  \/\/ Emit bytes starting at parameter 'ptr'\n-  \/\/ Bump 'ptr' by the number of output bytes\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  \/\/ Emit bytes using C2_MacroAssembler\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -366,1 +366,2 @@\n-  fill_buffer(cb, blk_starts);\n+  C2_MacroAssembler masm(cb);\n+  fill_buffer(&masm, blk_starts);\n@@ -1371,1 +1372,1 @@\n-void PhaseOutput::fill_buffer(CodeBuffer* cb, uint* blk_starts) {\n+void PhaseOutput::fill_buffer(C2_MacroAssembler* masm, uint* blk_starts) {\n@@ -1427,1 +1428,1 @@\n-    if (!constant_table().emit(*cb)) {\n+    if (!constant_table().emit(masm)) {\n@@ -1450,1 +1451,1 @@\n-      cb->flush_bundle(true);\n+      masm->code()->flush_bundle(true);\n@@ -1457,1 +1458,1 @@\n-      MacroAssembler(cb).block_comment(st.freeze());\n+      masm->block_comment(st.freeze());\n@@ -1467,1 +1468,1 @@\n-    MacroAssembler(cb).bind(blk_labels[block->_pre_order]);\n+    masm->bind(blk_labels[block->_pre_order]);\n@@ -1491,1 +1492,1 @@\n-        cb->flush_bundle(false);\n+        masm->code()->flush_bundle(false);\n@@ -1502,2 +1503,2 @@\n-          cb->flush_bundle(true);\n-          current_offset = cb->insts_size();\n+          masm->code()->flush_bundle(true);\n+          current_offset = masm->offset();\n@@ -1530,2 +1531,2 @@\n-          cb->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n-          if ((cb->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n+          masm->code()->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n+          if ((masm->code()->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n@@ -1535,3 +1536,3 @@\n-          nop->emit(*cb, C->regalloc());\n-          cb->flush_bundle(true);\n-          current_offset = cb->insts_size();\n+          nop->emit(masm, C->regalloc());\n+          masm->code()->flush_bundle(true);\n+          current_offset = masm->offset();\n@@ -1615,3 +1616,3 @@\n-                nop->emit(*cb, C->regalloc());\n-                cb->flush_bundle(true);\n-                current_offset = cb->insts_size();\n+                nop->emit(masm, C->regalloc());\n+                masm->code()->flush_bundle(true);\n+                current_offset = masm->offset();\n@@ -1682,2 +1683,2 @@\n-      cb->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n-      if ((cb->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n+      masm->code()->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n+      if ((masm->code()->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n@@ -1691,1 +1692,1 @@\n-        node_offsets[n->_idx] = cb->insts_size();\n+        node_offsets[n->_idx] = masm->offset();\n@@ -1697,3 +1698,3 @@\n-      DEBUG_ONLY(uint instr_offset = cb->insts_size());\n-      n->emit(*cb, C->regalloc());\n-      current_offset = cb->insts_size();\n+      DEBUG_ONLY(uint instr_offset = masm->offset());\n+      n->emit(masm, C->regalloc());\n+      current_offset = masm->offset();\n@@ -1718,1 +1719,1 @@\n-        Disassembler::decode(cb->insts_begin() + instr_offset, cb->insts_begin() + current_offset + 1, tty);\n+        Disassembler::decode(masm->code()->insts_begin() + instr_offset, masm->code()->insts_begin() + current_offset + 1, tty);\n@@ -1749,1 +1750,1 @@\n-        cb->set_insts_end(cb->insts_end() - Pipeline::instr_unit_size());\n+        masm->code()->set_insts_end(masm->code()->insts_end() - Pipeline::instr_unit_size());\n@@ -1754,1 +1755,1 @@\n-          node_offsets[delay_slot->_idx] = cb->insts_size();\n+          node_offsets[delay_slot->_idx] = masm->offset();\n@@ -1776,1 +1777,1 @@\n-        delay_slot->emit(*cb, C->regalloc());\n+        delay_slot->emit(masm, C->regalloc());\n@@ -1793,2 +1794,2 @@\n-        nop->emit(*cb, C->regalloc());\n-        current_offset = cb->insts_size();\n+        nop->emit(masm, C->regalloc());\n+        current_offset = masm->offset();\n@@ -1812,1 +1813,1 @@\n-  MacroAssembler(cb).bind( blk_labels[nblocks] );\n+  masm->bind( blk_labels[nblocks] );\n@@ -1830,1 +1831,1 @@\n-  if (!cb->finalize_stubs()) {\n+  if (!masm->code()->finalize_stubs()) {\n@@ -1836,1 +1837,1 @@\n-  bs->emit_stubs(*cb);\n+  bs->emit_stubs(*masm->code());\n@@ -1840,1 +1841,2 @@\n-  _stub_list.emit(*cb);\n+  assert(masm->inst_mark() == nullptr, \"should be.\");\n+  _stub_list.emit(*masm);\n@@ -1845,1 +1847,1 @@\n-  Scheduling::increment_method_size(cb->insts_size());\n+  Scheduling::increment_method_size(masm->offset());\n@@ -1856,1 +1858,1 @@\n-    _code_offsets.set_value(CodeOffsets::Exceptions, HandlerImpl::emit_exception_handler(*cb));\n+    _code_offsets.set_value(CodeOffsets::Exceptions, HandlerImpl::emit_exception_handler(masm));\n@@ -1861,1 +1863,1 @@\n-    _code_offsets.set_value(CodeOffsets::Deopt, HandlerImpl::emit_deopt_handler(*cb));\n+    _code_offsets.set_value(CodeOffsets::Deopt, HandlerImpl::emit_deopt_handler(masm));\n@@ -1867,1 +1869,1 @@\n-      _code_offsets.set_value(CodeOffsets::DeoptMH, HandlerImpl::emit_deopt_handler(*cb));\n+      _code_offsets.set_value(CodeOffsets::DeoptMH, HandlerImpl::emit_deopt_handler(masm));\n@@ -1872,1 +1874,1 @@\n-  if ((cb->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n+  if ((masm->code()->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n@@ -3360,0 +3362,2 @@\n+  C2_MacroAssembler masm(&buf);\n+  masm.bind(fakeL);\n@@ -3361,2 +3365,0 @@\n-    MacroAssembler masm(&buf);\n-    masm.bind(fakeL);\n@@ -3366,1 +3368,1 @@\n-  n->emit(buf, C->regalloc());\n+  n->emit(&masm, C->regalloc());\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":43,"deletions":41,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-  void fill_buffer(CodeBuffer* cb, uint* blk_starts);\n+  void fill_buffer(C2_MacroAssembler* masm, uint* blk_starts);\n","filename":"src\/hotspot\/share\/opto\/output.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}