{"files":[{"patch":"@@ -1151,2 +1151,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -1240,1 +1240,1 @@\n-    if (UseCompressedOops && (CompressedOops::ptrs_base() != NULL)) {\n+    if (UseCompressedOops && (CompressedOops::ptrs_base() != nullptr)) {\n@@ -1584,1 +1584,1 @@\n-  return st->trailing_membar() != NULL;\n+  return st->trailing_membar() != nullptr;\n@@ -1596,1 +1596,1 @@\n-    assert(ldst->trailing_membar() != NULL, \"expected trailing membar\");\n+    assert(ldst->trailing_membar() != nullptr, \"expected trailing membar\");\n@@ -1598,1 +1598,1 @@\n-    return ldst->trailing_membar() != NULL;\n+    return ldst->trailing_membar() != nullptr;\n@@ -1605,1 +1605,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -1660,2 +1660,1 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1677,2 +1676,1 @@\n-  void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc*) const {\n-    C2_MacroAssembler _masm(&cbuf);\n+  void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc*) const {\n@@ -1700,1 +1698,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -1737,1 +1735,1 @@\n-  if (C->stub_function() == NULL && BarrierSet::barrier_set()->barrier_set_nmethod() != NULL) {\n+  if (C->stub_function() == nullptr && BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n@@ -1754,1 +1752,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1756,1 +1754,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1786,1 +1783,1 @@\n-  if (C->stub_function() == NULL) {\n+  if (C->stub_function() == nullptr) {\n@@ -1788,1 +1785,1 @@\n-    if (BarrierSet::barrier_set()->barrier_set_nmethod() != NULL) {\n+    if (BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n@@ -1805,1 +1802,1 @@\n-      bs->nmethod_entry_barrier(&_masm, slow_path, continuation, guard);\n+      bs->nmethod_entry_barrier(masm, slow_path, continuation, guard);\n@@ -1813,1 +1810,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -1867,1 +1864,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1869,1 +1866,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1941,1 +1937,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n@@ -1974,2 +1970,1 @@\n-    if (ireg == Op_VecA && cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (ireg == Op_VecA && masm) {\n@@ -1994,1 +1989,1 @@\n-    } else if (cbuf) {\n+    } else if (masm) {\n@@ -1996,1 +1991,0 @@\n-      C2_MacroAssembler _masm(cbuf);\n@@ -2023,2 +2017,1 @@\n-  } else if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n+  } else if (masm) {\n@@ -2032,1 +2025,0 @@\n-            C2_MacroAssembler _masm(cbuf);\n@@ -2156,1 +2148,1 @@\n-    implementation(NULL, ra_, false, st);\n+    implementation(nullptr, ra_, false, st);\n@@ -2160,2 +2152,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, NULL);\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation(masm, ra_, false, nullptr);\n@@ -2179,3 +2171,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -2220,1 +2210,1 @@\n-void MachUEPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachUEPNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const\n@@ -2223,2 +2213,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2244,1 +2232,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler* masm)\n@@ -2250,1 +2238,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2252,1 +2239,1 @@\n-  if (base == NULL) {\n+  if (base == nullptr) {\n@@ -2264,1 +2251,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm)\n@@ -2268,1 +2255,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -2270,1 +2256,1 @@\n-  if (base == NULL) {\n+  if (base == nullptr) {\n@@ -2413,1 +2399,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2586,1 +2572,1 @@\n-  if (n == NULL || m == NULL) {\n+  if (n == nullptr || m == nullptr) {\n@@ -2627,1 +2613,1 @@\n-  if (n != NULL && m != NULL) {\n+  if (n != nullptr && m != nullptr) {\n@@ -2687,1 +2673,0 @@\n-  C2_MacroAssembler _masm(&cbuf);                                       \\\n@@ -2732,1 +2717,1 @@\n-  static void loadStore(C2_MacroAssembler masm, mem_insn insn,\n+  static void loadStore(C2_MacroAssembler* masm, mem_insn insn,\n@@ -2746,1 +2731,1 @@\n-      addr = masm.legitimize_address(addr, size_in_memory, rscratch1);\n+      addr = __ legitimize_address(addr, size_in_memory, rscratch1);\n@@ -2748,1 +2733,1 @@\n-    (masm.*insn)(reg, addr);\n+    (masm->*insn)(reg, addr);\n@@ -2751,1 +2736,1 @@\n-  static void loadStore(C2_MacroAssembler masm, mem_float_insn insn,\n+  static void loadStore(C2_MacroAssembler* masm, mem_float_insn insn,\n@@ -2774,2 +2759,2 @@\n-      addr = masm.legitimize_address(addr, size_in_memory, rscratch1);\n-      (masm.*insn)(reg, addr);\n+      addr = __ legitimize_address(addr, size_in_memory, rscratch1);\n+      (masm->*insn)(reg, addr);\n@@ -2778,1 +2763,1 @@\n-      (masm.*insn)(reg, Address(base, as_Register(index), scale));\n+      (masm->*insn)(reg, Address(base, as_Register(index), scale));\n@@ -2782,1 +2767,1 @@\n-  static void loadStore(C2_MacroAssembler masm, mem_vector_insn insn,\n+  static void loadStore(C2_MacroAssembler* masm, mem_vector_insn insn,\n@@ -2787,1 +2772,1 @@\n-      (masm.*insn)(reg, T, Address(base, disp));\n+      (masm->*insn)(reg, T, Address(base, disp));\n@@ -2790,1 +2775,1 @@\n-      (masm.*insn)(reg, T, Address(base, as_Register(index), Address::lsl(size)));\n+      (masm->*insn)(reg, T, Address(base, as_Register(index), Address::lsl(size)));\n@@ -2835,1 +2820,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2845,1 +2829,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsbw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsbw, dst_reg, $mem->opcode(),\n@@ -2853,1 +2837,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsb, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsb, dst_reg, $mem->opcode(),\n@@ -2861,1 +2845,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n@@ -2869,1 +2853,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrb, dst_reg, $mem->opcode(),\n@@ -2877,1 +2861,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrshw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrshw, dst_reg, $mem->opcode(),\n@@ -2885,1 +2869,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsh, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsh, dst_reg, $mem->opcode(),\n@@ -2893,1 +2877,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n@@ -2901,1 +2885,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrh, dst_reg, $mem->opcode(),\n@@ -2909,1 +2893,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n@@ -2917,1 +2901,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrw, dst_reg, $mem->opcode(),\n@@ -2925,1 +2909,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrsw, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrsw, dst_reg, $mem->opcode(),\n@@ -2933,1 +2917,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, $mem->opcode(),\n@@ -2941,1 +2925,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrs, dst_reg, $mem->opcode(),\n@@ -2949,1 +2933,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, dst_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrd, dst_reg, $mem->opcode(),\n@@ -2957,1 +2941,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strb, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strb, src_reg, $mem->opcode(),\n@@ -2964,2 +2948,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::strb, zr, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strb, zr, $mem->opcode(),\n@@ -2973,1 +2956,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strh, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strh, src_reg, $mem->opcode(),\n@@ -2980,2 +2963,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::strh, zr, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strh, zr, $mem->opcode(),\n@@ -2989,1 +2971,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strw, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strw, src_reg, $mem->opcode(),\n@@ -2996,2 +2978,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::strw, zr, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strw, zr, $mem->opcode(),\n@@ -3008,1 +2989,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -3013,1 +2993,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::str, src_reg, $mem->opcode(),\n@@ -3020,2 +3000,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    loadStore(_masm, &MacroAssembler::str, zr, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::str, zr, $mem->opcode(),\n@@ -3029,1 +3008,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strs, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strs, src_reg, $mem->opcode(),\n@@ -3037,1 +3016,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::strd, src_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::strd, src_reg, $mem->opcode(),\n@@ -3044,1 +3023,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -3046,1 +3024,1 @@\n-      loadStore(_masm, &MacroAssembler::strb, zr, $mem->opcode(),\n+      loadStore(masm, &MacroAssembler::strb, zr, $mem->opcode(),\n@@ -3055,1 +3033,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::H,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::H,\n@@ -3061,1 +3039,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::S,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::S,\n@@ -3067,1 +3045,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::D,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::D,\n@@ -3073,1 +3051,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldr, dst_reg, MacroAssembler::Q,\n+    loadStore(masm, &MacroAssembler::ldr, dst_reg, MacroAssembler::Q,\n@@ -3079,1 +3057,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::H,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::H,\n@@ -3085,1 +3063,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::S,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::S,\n@@ -3091,1 +3069,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::D,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::D,\n@@ -3097,1 +3075,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::str, src_reg, MacroAssembler::Q,\n+    loadStore(masm, &MacroAssembler::str, src_reg, MacroAssembler::Q,\n@@ -3213,1 +3191,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -3229,1 +3206,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -3239,1 +3215,0 @@\n-      C2_MacroAssembler _masm(&cbuf);\n@@ -3250,1 +3225,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3279,1 +3253,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3309,1 +3282,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3317,1 +3289,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3325,1 +3296,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3333,1 +3303,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3346,1 +3315,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3354,1 +3322,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3362,1 +3329,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3370,1 +3336,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3379,1 +3344,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3387,1 +3351,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3408,1 +3371,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3419,1 +3381,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3430,1 +3391,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3433,1 +3393,1 @@\n-    if (con == NULL || con == (address)1) {\n+    if (con == nullptr || con == (address)1) {\n@@ -3456,1 +3416,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3462,1 +3421,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3468,1 +3426,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3473,1 +3430,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3476,1 +3432,1 @@\n-    if (con == NULL) {\n+    if (con == nullptr) {\n@@ -3486,1 +3442,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3492,1 +3447,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3495,1 +3449,1 @@\n-    if (con == NULL) {\n+    if (con == nullptr) {\n@@ -3507,1 +3461,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3521,1 +3474,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3535,1 +3487,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3543,1 +3494,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3551,1 +3501,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3559,1 +3508,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3569,1 +3517,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3576,1 +3523,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3587,1 +3533,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3595,1 +3540,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3602,1 +3546,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3617,1 +3560,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3625,1 +3567,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3632,1 +3573,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3639,1 +3579,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3645,1 +3584,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3651,1 +3589,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3657,1 +3594,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3663,1 +3599,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3676,1 +3611,0 @@\n-     C2_MacroAssembler _masm(&cbuf);\n@@ -3678,1 +3612,1 @@\n-                                     NULL, &miss,\n+                                     nullptr, &miss,\n@@ -3687,2 +3621,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3694,1 +3626,1 @@\n-      if (call == NULL) {\n+      if (call == nullptr) {\n@@ -3704,1 +3636,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -3708,1 +3640,1 @@\n-      if (call == NULL) {\n+      if (call == nullptr) {\n@@ -3715,1 +3647,1 @@\n-        cbuf.shared_stub_to_interp_for(_method, call - cbuf.insts_begin());\n+        __ code()->shared_stub_to_interp_for(_method, call - __ begin());\n@@ -3718,2 +3650,2 @@\n-        address stub = CompiledStaticCall::emit_to_interp_stub(cbuf, call);\n-        if (stub == NULL) {\n+        address stub = CompiledStaticCall::emit_to_interp_stub(masm, call);\n+        if (stub == nullptr) {\n@@ -3735,2 +3667,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    int method_index = resolved_method_index(cbuf);\n+    int method_index = resolved_method_index(masm);\n@@ -3738,1 +3669,1 @@\n-    if (call == NULL) {\n+    if (call == nullptr) {\n@@ -3749,1 +3680,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3757,2 +3687,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3767,1 +3695,1 @@\n-      if (call == NULL) {\n+      if (call == nullptr) {\n@@ -3789,1 +3717,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3794,1 +3721,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3804,1 +3730,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3810,1 +3735,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -4666,1 +4590,1 @@\n-\/\/ NULL Pointer Immediate\n+\/\/ nullptr Pointer Immediate\n@@ -4798,1 +4722,1 @@\n-\/\/ Narrow NULL Pointer Immediate\n+\/\/ Narrow nullptr Pointer Immediate\n@@ -7222,1 +7146,1 @@\n-  format %{ \"mov  $dst, $con\\t# NULL ptr\" %}\n+  format %{ \"mov  $dst, $con\\t# nullptr ptr\" %}\n@@ -7236,1 +7160,1 @@\n-  format %{ \"mov  $dst, $con\\t# NULL ptr\" %}\n+  format %{ \"mov  $dst, $con\\t# nullptr ptr\" %}\n@@ -7278,1 +7202,1 @@\n-  format %{ \"mov  $dst, $con\\t# compressed NULL ptr\" %}\n+  format %{ \"mov  $dst, $con\\t# compressed nullptr ptr\" %}\n@@ -8189,1 +8113,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, tmp_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrs, tmp_reg, $mem->opcode(),\n@@ -8230,1 +8154,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, tmp_reg, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrd, tmp_reg, $mem->opcode(),\n@@ -15241,1 +15165,1 @@\n-    if (tpc == NULL) {\n+    if (tpc == nullptr) {\n@@ -15262,1 +15186,1 @@\n-    if (tpc == NULL) {\n+    if (tpc == nullptr) {\n@@ -17127,1 +17051,1 @@\n-    if (tpc == NULL) {\n+    if (tpc == nullptr) {\n@@ -17152,1 +17076,1 @@\n-    if (tpc == NULL) {\n+    if (tpc == nullptr) {\n@@ -17167,1 +17091,1 @@\n-    if (tpc == NULL) {\n+    if (tpc == nullptr) {\n@@ -17210,1 +17134,1 @@\n-    if (tpc == NULL) {\n+    if (tpc == nullptr) {\n@@ -17291,1 +17215,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n@@ -17328,1 +17252,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n@@ -17365,1 +17289,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrs, $tsrc$$FloatRegister, $mem->opcode(),\n@@ -17403,1 +17327,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n+    loadStore(masm, &MacroAssembler::ldrd, $tsrc$$FloatRegister, $mem->opcode(),\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":106,"deletions":182,"binary":false,"changes":288,"status":"modified"},{"patch":"@@ -97,1 +97,1 @@\n-  static void loadStoreA_predicated(C2_MacroAssembler masm, bool is_store, FloatRegister reg,\n+  static void loadStoreA_predicated(C2_MacroAssembler* masm, bool is_store, FloatRegister reg,\n@@ -122,1 +122,1 @@\n-      (masm.*insn)(reg, Assembler::elemType_to_regVariant(vector_elem_bt), pg, Address(base, imm4));\n+      (masm->*insn)(reg, Assembler::elemType_to_regVariant(vector_elem_bt), pg, Address(base, imm4));\n@@ -425,1 +425,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ false,\n+    loadStoreA_predicated(masm, \/* is_store *\/ false,\n@@ -442,1 +442,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ true,\n+    loadStoreA_predicated(masm, \/* is_store *\/ true,\n@@ -457,1 +457,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ false, $dst$$FloatRegister,\n+    loadStoreA_predicated(masm, \/* is_store *\/ false, $dst$$FloatRegister,\n@@ -470,1 +470,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ true, $src$$FloatRegister,\n+    loadStoreA_predicated(masm, \/* is_store *\/ true, $src$$FloatRegister,\n@@ -4870,1 +4870,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -4891,1 +4891,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -4918,1 +4918,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -4946,1 +4946,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -4971,1 +4971,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -4993,1 +4993,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -5019,1 +5019,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -5046,1 +5046,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-  static void loadStoreA_predicated(C2_MacroAssembler masm, bool is_store, FloatRegister reg,\n+  static void loadStoreA_predicated(C2_MacroAssembler* masm, bool is_store, FloatRegister reg,\n@@ -364,1 +364,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ false,\n+    loadStoreA_predicated(masm, \/* is_store *\/ false,\n@@ -381,1 +381,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ true,\n+    loadStoreA_predicated(masm, \/* is_store *\/ true,\n@@ -396,1 +396,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ false, $dst$$FloatRegister,\n+    loadStoreA_predicated(masm, \/* is_store *\/ false, $dst$$FloatRegister,\n@@ -409,1 +409,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), \/* is_store *\/ true, $src$$FloatRegister,\n+    loadStoreA_predicated(masm, \/* is_store *\/ true, $src$$FloatRegister,\n@@ -3297,1 +3297,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -3318,1 +3318,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -3345,1 +3345,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -3373,1 +3373,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), false, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, false, $tmp$$FloatRegister,\n@@ -3398,1 +3398,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -3420,1 +3420,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -3446,1 +3446,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n@@ -3473,1 +3473,1 @@\n-    loadStoreA_predicated(C2_MacroAssembler(&cbuf), true, $tmp$$FloatRegister,\n+    loadStoreA_predicated(masm, true, $tmp$$FloatRegister,\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -37,4 +37,4 @@\n-#define __ _masm.\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n-  precond(cbuf.stubs()->start() != badAddress);\n-  precond(cbuf.stubs()->end() != badAddress);\n+#define __ masm->\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler *masm, address mark) {\n+  precond(__ code()->stubs()->start() != badAddress);\n+  precond(__ code()->stubs()->end() != badAddress);\n@@ -48,1 +48,1 @@\n-    mark = cbuf.insts_mark();  \/\/ Get mark within main instrs section.\n+    mark = __ inst_mark();  \/\/ Get mark within main instrs section.\n@@ -51,4 +51,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/aarch64\/compiledIC_aarch64.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -36,1 +35,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -41,1 +40,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -45,1 +43,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -80,1 +78,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ false, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ false, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n@@ -118,1 +116,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ true, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register, \/*acquire*\/ true, \/*release*\/ true, \/*is_cae*\/ false, $res$$Register);\n@@ -134,1 +132,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -150,1 +148,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -167,1 +165,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -184,1 +182,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -202,1 +200,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -219,1 +217,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -238,1 +236,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -257,1 +255,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shenandoah\/shenandoah_aarch64.ad","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-static void x_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n+static void x_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n@@ -45,1 +45,1 @@\n-static void x_load_barrier_slow_path(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+static void x_load_barrier_slow_path(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n@@ -67,1 +67,1 @@\n-    x_load_barrier(_masm, this, ref_addr, $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, ref_addr, $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n@@ -86,1 +86,1 @@\n-    x_load_barrier(_masm, this, Address($mem$$Register), $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address($mem$$Register), $dst$$Register, rscratch2 \/* tmp *\/, barrier_data());\n@@ -113,1 +113,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/);\n@@ -145,1 +145,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/ );\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), rscratch2 \/* ref *\/, rscratch1 \/* tmp *\/ );\n@@ -174,1 +174,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n@@ -202,1 +202,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, rscratch1 \/* tmp *\/);\n@@ -223,1 +223,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n@@ -240,1 +240,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, rscratch2 \/* tmp *\/, barrier_data());\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/x\/x_aarch64.ad","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-static void z_color(MacroAssembler& _masm, const MachNode* node, Register dst, Register src) {\n+static void z_color(MacroAssembler* masm, const MachNode* node, Register dst, Register src) {\n@@ -43,1 +43,1 @@\n-static void z_uncolor(MacroAssembler& _masm, const MachNode* node, Register ref) {\n+static void z_uncolor(MacroAssembler* masm, const MachNode* node, Register ref) {\n@@ -47,1 +47,1 @@\n-static void z_keep_alive_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+static void z_keep_alive_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n@@ -53,1 +53,1 @@\n-  z_uncolor(_masm, node, ref);\n+  z_uncolor(masm, node, ref);\n@@ -57,2 +57,2 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -64,1 +64,1 @@\n-    z_keep_alive_load_barrier(_masm, node, ref_addr, ref, tmp);\n+    z_keep_alive_load_barrier(masm, node, ref_addr, ref, tmp);\n@@ -69,1 +69,1 @@\n-    z_uncolor(_masm, node, ref);\n+    z_uncolor(masm, node, ref);\n@@ -84,1 +84,1 @@\n-  z_uncolor(_masm, node, ref);\n+  z_uncolor(masm, node, ref);\n@@ -88,2 +88,2 @@\n-static void z_store_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, Register tmp, bool is_atomic) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_store_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, Register tmp, bool is_atomic) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -91,1 +91,1 @@\n-    z_color(_masm, node, rnew_zpointer, rnew_zaddress);\n+    z_color(masm, node, rnew_zpointer, rnew_zaddress);\n@@ -96,1 +96,1 @@\n-    bs_asm->store_barrier_fast(&_masm, ref_addr, rnew_zaddress, rnew_zpointer, tmp, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n+    bs_asm->store_barrier_fast(masm, ref_addr, rnew_zaddress, rnew_zpointer, tmp, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n@@ -116,1 +116,1 @@\n-    z_load_barrier(_masm, this, ref_addr, $dst$$Register, rscratch1);\n+    z_load_barrier(masm, this, ref_addr, $dst$$Register, rscratch1);\n@@ -136,1 +136,1 @@\n-    z_load_barrier(_masm, this, ref_addr, $dst$$Register, rscratch1);\n+    z_load_barrier(masm, this, ref_addr, $dst$$Register, rscratch1);\n@@ -153,1 +153,1 @@\n-    z_store_barrier(_masm, this, ref_addr, $src$$Register, $tmp$$Register, rscratch2, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, ref_addr, $src$$Register, $tmp$$Register, rscratch2, false \/* is_atomic *\/);\n@@ -170,1 +170,1 @@\n-    z_store_barrier(_masm, this, ref_addr, $src$$Register, $tmp$$Register, rscratch2, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, ref_addr, $src$$Register, $tmp$$Register, rscratch2, false \/* is_atomic *\/);\n@@ -190,2 +190,2 @@\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register);\n@@ -214,2 +214,2 @@\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register);\n@@ -238,2 +238,2 @@\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register);\n@@ -242,1 +242,1 @@\n-    z_uncolor(_masm, this, $res$$Register);\n+    z_uncolor(masm, this, $res$$Register);\n@@ -261,2 +261,2 @@\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register);\n@@ -265,1 +265,1 @@\n-    z_uncolor(_masm, this, $res$$Register);\n+    z_uncolor(masm, this, $res$$Register);\n@@ -281,1 +281,1 @@\n-    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, rscratch2, true \/* is_atomic *\/);\n@@ -283,1 +283,1 @@\n-    z_uncolor(_masm, this, $prev$$Register);\n+    z_uncolor(masm, this, $prev$$Register);\n@@ -299,1 +299,1 @@\n-    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, rscratch2, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, rscratch2, true \/* is_atomic *\/);\n@@ -301,1 +301,1 @@\n-    z_uncolor(_masm, this, $prev$$Register);\n+    z_uncolor(masm, this, $prev$$Register);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -1116,2 +1116,1 @@\n-    CodeBuffer* cbuf = masm->code_section()->outer();\n-    address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    address stub = CompiledStaticCall::emit_to_interp_stub(masm, tr_call);\n@@ -1181,2 +1180,1 @@\n-  CodeBuffer* cbuf = masm->code_section()->outer();\n-  address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  address stub = CompiledStaticCall::emit_to_interp_stub(masm, tr_call);\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -108,2 +108,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -141,1 +141,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -162,2 +162,1 @@\n-void emit_break(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_break(C2_MacroAssembler *masm) {\n@@ -173,2 +172,2 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  emit_break(cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  emit_break(masm);\n@@ -182,2 +181,1 @@\n-void emit_nop(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_nop(C2_MacroAssembler *masm) {\n@@ -188,1 +186,1 @@\n-void emit_call_reloc(CodeBuffer &cbuf, const MachCallNode *n, MachOper *m, RelocationHolder const& rspec) {\n+void emit_call_reloc(C2_MacroAssembler *masm, const MachCallNode *n, MachOper *m, RelocationHolder const& rspec) {\n@@ -190,2 +188,1 @@\n-  int call_site_offset = cbuf.insts()->mark_off();\n-  C2_MacroAssembler _masm(&cbuf);\n+  int call_site_offset = __ code()->insts()->mark_off();\n@@ -198,1 +195,1 @@\n-  assert(target != NULL, \"need real address\");\n+  assert(target != nullptr, \"need real address\");\n@@ -213,2 +210,2 @@\n-void emit_lo(CodeBuffer &cbuf, int val) {  }\n-void emit_hi(CodeBuffer &cbuf, int val) {  }\n+void emit_lo(C2_MacroAssembler *masm, int val) {  }\n+void emit_hi(C2_MacroAssembler *masm, int val) {  }\n@@ -235,1 +232,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -238,1 +235,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -293,1 +289,1 @@\n-  if (C->stub_function() == NULL && BarrierSet::barrier_set()->barrier_set_nmethod() != NULL) {\n+  if (C->stub_function() == nullptr && BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n@@ -306,1 +302,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -308,1 +304,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -335,1 +330,1 @@\n-  if (C->stub_function() == NULL) {\n+  if (C->stub_function() == nullptr) {\n@@ -337,1 +332,1 @@\n-    bs->nmethod_entry_barrier(&_masm);\n+    bs->nmethod_entry_barrier(masm);\n@@ -341,1 +336,1 @@\n-  if (strcmp(cbuf.name(), \"Compile::Fill_buffer\") == 0) {\n+  if (strcmp(__ code()->name(), \"Compile::Fill_buffer\") == 0) {\n@@ -382,2 +377,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -433,1 +427,1 @@\n-uint MachSpillCopyNode::implementation( CodeBuffer *cbuf,\n+uint MachSpillCopyNode::implementation( C2_MacroAssembler *masm,\n@@ -457,1 +451,1 @@\n-  if (bottom_type()->isa_vect() != NULL) {\n+  if (bottom_type()->isa_vect() != nullptr) {\n@@ -466,2 +460,0 @@\n-  C2_MacroAssembler _masm(cbuf);\n-\n@@ -473,1 +465,1 @@\n-    if (cbuf && !is_memoryfp(offset)) {\n+    if (masm && !is_memoryfp(offset)) {\n@@ -483,1 +475,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -491,1 +483,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -510,1 +502,1 @@\n-    if (cbuf) {\n+    if (masm) {\n@@ -525,1 +517,1 @@\n-    if (cbuf && !is_memoryI(offset)) {\n+    if (masm && !is_memoryI(offset)) {\n@@ -531,1 +523,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -541,1 +533,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -557,1 +549,1 @@\n-    if (cbuf && !is_memoryI(offset)) {\n+    if (masm && !is_memoryI(offset)) {\n@@ -563,1 +555,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -573,1 +565,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -590,1 +582,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -601,1 +593,1 @@\n-    if (cbuf) {\n+    if (masm) {\n@@ -616,1 +608,1 @@\n-    if (cbuf && !is_memoryfp(offset)) {\n+    if (masm && !is_memoryfp(offset)) {\n@@ -623,1 +615,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -633,1 +625,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -649,1 +641,1 @@\n-    if (cbuf && !is_memoryfp(offset)) {\n+    if (masm && !is_memoryfp(offset)) {\n@@ -656,1 +648,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -666,1 +658,1 @@\n-        if (cbuf) {\n+        if (masm) {\n@@ -686,1 +678,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -696,1 +688,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -715,1 +707,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -725,1 +717,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -749,1 +741,1 @@\n-    if (cbuf) {\n+    if (masm) {\n@@ -766,1 +758,1 @@\n-    if (cbuf && !is_memoryP(offset)) {\n+    if (masm && !is_memoryP(offset)) {\n@@ -770,1 +762,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -785,1 +777,1 @@\n-    if (cbuf && !is_memoryP(offset)) {\n+    if (masm && !is_memoryP(offset)) {\n@@ -789,1 +781,1 @@\n-      if (cbuf) {\n+      if (masm) {\n@@ -807,1 +799,1 @@\n-  implementation( NULL, ra_, false, st );\n+  implementation( nullptr, ra_, false, st );\n@@ -811,2 +803,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation( &cbuf, ra_, false, NULL );\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation( masm, ra_, false, nullptr );\n@@ -816,1 +808,1 @@\n-  return implementation( NULL, ra_, true, NULL );\n+  return implementation( nullptr, ra_, true, nullptr );\n@@ -826,2 +818,1 @@\n-void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc * ) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc * ) const {\n@@ -847,2 +838,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -883,2 +873,1 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachUEPNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -902,3 +891,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler* masm) {\n@@ -906,1 +893,1 @@\n-  if (base == NULL) {\n+  if (base == nullptr) {\n@@ -923,1 +910,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm) {\n@@ -926,2 +913,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n-\n@@ -929,1 +914,1 @@\n-  if (base == NULL) {\n+  if (base == nullptr) {\n@@ -1029,1 +1014,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1033,1 +1018,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1097,1 +1082,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1228,1 +1213,1 @@\n-    emit_call_reloc(cbuf, as_MachCall(), $meth, runtime_call_Relocation::spec());\n+    emit_call_reloc(masm, as_MachCall(), $meth, runtime_call_Relocation::spec());\n@@ -1236,1 +1221,1 @@\n-      emit_call_reloc(cbuf, as_MachCall(), $meth, runtime_call_Relocation::spec());\n+      emit_call_reloc(masm, as_MachCall(), $meth, runtime_call_Relocation::spec());\n@@ -1238,1 +1223,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -1241,1 +1226,1 @@\n-      emit_call_reloc(cbuf, as_MachCall(), $meth, rspec);\n+      emit_call_reloc(masm, as_MachCall(), $meth, rspec);\n@@ -1244,2 +1229,2 @@\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n-      if (stub == NULL) {\n+      address stub = CompiledStaticCall::emit_to_interp_stub(masm);\n+      if (stub == nullptr) {\n@@ -1254,3 +1239,2 @@\n-    address mark = cbuf.insts()->mark();\n-    debug_only(int off0 = cbuf.insts_size());\n-    C2_MacroAssembler _masm(&cbuf);\n+    address mark = __ inst_mark();\n+    debug_only(int off0 = __ offset());\n@@ -1260,1 +1244,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = __ offset());\n@@ -1263,1 +1247,1 @@\n-    cbuf.insts()->set_mark(mark);\n+    __ set_inst_mark(mark);\n@@ -1268,3 +1252,2 @@\n-    address mark = cbuf.insts()->mark();\n-    debug_only(int off0 = cbuf.insts_size());\n-    C2_MacroAssembler _masm(&cbuf);\n+    address mark = __ inst_mark();\n+    debug_only(int off0 = __ offset());\n@@ -1274,1 +1257,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = __ offset());\n@@ -1277,1 +1260,1 @@\n-    cbuf.insts()->set_mark(mark);\n+    __ set_inst_mark(mark);\n@@ -1281,1 +1264,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1286,1 +1268,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1295,1 +1276,1 @@\n-    int method_index = resolved_method_index(cbuf);\n+    int method_index = resolved_method_index(masm);\n@@ -1297,1 +1278,1 @@\n-    emit_call_reloc(cbuf, as_MachCall(), $meth, RelocationHolder::none);\n+    emit_call_reloc(masm, as_MachCall(), $meth, RelocationHolder::none);\n@@ -1314,1 +1295,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1331,1 +1311,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1346,1 +1325,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1438,1 +1416,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1500,1 +1477,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1990,1 +1966,1 @@\n-\/\/ NULL Pointer Immediate\n+\/\/ nullptr Pointer Immediate\n","filename":"src\/hotspot\/cpu\/arm\/arm.ad","additions":79,"deletions":103,"binary":false,"changes":182,"status":"modified"},{"patch":"@@ -434,1 +434,1 @@\n-  bool far = (_method == NULL) ? maybe_far_call(this) : !cache_reachable();\n+  bool far = (_method == nullptr) ? maybe_far_call(this) : !cache_reachable();\n","filename":"src\/hotspot\/cpu\/arm\/arm_32.ad","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -39,1 +39,1 @@\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler *masm, address mark) {\n@@ -46,1 +46,1 @@\n-    mark = cbuf.insts_mark();  \/\/ get mark within main instrs section\n+    mark = __ inst_mark();  \/\/ get mark within main instrs section\n@@ -49,2 +49,0 @@\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/arm\/compiledIC_arm.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -81,2 +81,2 @@\n-#define __ _masm.\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark\/* = nullptr*\/) {\n+#define __ masm->\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler *masm, address mark\/* = nullptr*\/) {\n@@ -86,1 +86,1 @@\n-    mark = cbuf.insts_mark();\n+    mark = __ inst_mark();\n@@ -89,4 +89,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/ppc\/compiledIC_ppc.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-        &_masm,\n+        masm,\n@@ -68,1 +68,1 @@\n-        &_masm,\n+        masm,\n@@ -89,1 +89,1 @@\n-        &_masm,\n+        masm,\n@@ -115,1 +115,1 @@\n-        &_masm,\n+        masm,\n@@ -140,1 +140,1 @@\n-        &_masm,\n+        masm,\n@@ -160,1 +160,1 @@\n-        &_masm,\n+        masm,\n@@ -180,1 +180,1 @@\n-        &_masm,\n+        masm,\n@@ -205,1 +205,1 @@\n-        &_masm,\n+        masm,\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/shenandoah\/shenandoah_ppc.ad","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-static void x_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref,\n+static void x_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref,\n@@ -48,1 +48,1 @@\n-static void x_load_barrier_slow_path(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref,\n+static void x_load_barrier_slow_path(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref,\n@@ -55,1 +55,1 @@\n-static void x_compare_and_swap(MacroAssembler& _masm, const MachNode* node,\n+static void x_compare_and_swap(MacroAssembler* masm, const MachNode* node,\n@@ -73,1 +73,1 @@\n-    x_load_barrier_slow_path(_masm, node, Address(mem), tmp_xchg, res \/* used as tmp *\/);\n+    x_load_barrier_slow_path(masm, node, Address(mem), tmp_xchg, res \/* used as tmp *\/);\n@@ -92,1 +92,1 @@\n-static void x_compare_and_exchange(MacroAssembler& _masm, const MachNode* node,\n+static void x_compare_and_exchange(MacroAssembler* masm, const MachNode* node,\n@@ -107,1 +107,1 @@\n-    x_load_barrier_slow_path(_masm, node, Address(mem), res, tmp);\n+    x_load_barrier_slow_path(masm, node, Address(mem), res, tmp);\n@@ -141,1 +141,1 @@\n-    x_load_barrier(_masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n+    x_load_barrier(masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n@@ -159,1 +159,1 @@\n-    x_load_barrier(_masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n+    x_load_barrier(masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register, $tmp$$Register, barrier_data());\n@@ -178,1 +178,1 @@\n-    x_compare_and_swap(_masm, this,\n+    x_compare_and_swap(masm, this,\n@@ -196,1 +196,1 @@\n-    x_compare_and_swap(_masm, this,\n+    x_compare_and_swap(masm, this,\n@@ -214,1 +214,1 @@\n-    x_compare_and_swap(_masm, this,\n+    x_compare_and_swap(masm, this,\n@@ -232,1 +232,1 @@\n-    x_compare_and_swap(_masm, this,\n+    x_compare_and_swap(masm, this,\n@@ -253,1 +253,1 @@\n-    x_compare_and_exchange(_masm, this,\n+    x_compare_and_exchange(masm, this,\n@@ -273,1 +273,1 @@\n-    x_compare_and_exchange(_masm, this,\n+    x_compare_and_exchange(masm, this,\n@@ -289,1 +289,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, (intptr_t) 0), $res$$Register, $tmp$$Register, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, (intptr_t) 0), $res$$Register, $tmp$$Register, barrier_data());\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/x\/x_ppc.ad","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-static void z_color(MacroAssembler& _masm, Register dst, Register src) {\n+static void z_color(MacroAssembler* masm, Register dst, Register src) {\n@@ -50,1 +50,1 @@\n-static void z_uncolor(MacroAssembler& _masm, Register ref) {\n+static void z_uncolor(MacroAssembler* masm, Register ref) {\n@@ -54,1 +54,1 @@\n-static void check_color(MacroAssembler& _masm, Register ref, bool on_non_strong) {\n+static void check_color(MacroAssembler* masm, Register ref, bool on_non_strong) {\n@@ -61,2 +61,2 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -64,1 +64,1 @@\n-    z_uncolor(_masm, ref);\n+    z_uncolor(masm, ref);\n@@ -70,1 +70,1 @@\n-    check_color(_masm, ref, on_non_strong);\n+    check_color(masm, ref, on_non_strong);\n@@ -75,1 +75,1 @@\n-    z_uncolor(_masm, ref);\n+    z_uncolor(masm, ref);\n@@ -80,2 +80,2 @@\n-static void z_store_barrier(MacroAssembler& _masm, const MachNode* node, Register ref_base, intptr_t disp, Register rnew_zaddress, Register rnew_zpointer, bool is_atomic) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_store_barrier(MacroAssembler* masm, const MachNode* node, Register ref_base, intptr_t disp, Register rnew_zaddress, Register rnew_zpointer, bool is_atomic) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -83,1 +83,1 @@\n-    z_color(_masm, rnew_zpointer, rnew_zaddress);\n+    z_color(masm, rnew_zpointer, rnew_zaddress);\n@@ -88,1 +88,1 @@\n-    bs_asm->store_barrier_fast(&_masm, ref_base, disp, rnew_zaddress, rnew_zpointer, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n+    bs_asm->store_barrier_fast(masm, ref_base, disp, rnew_zaddress, rnew_zpointer, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n@@ -92,1 +92,1 @@\n-static void z_compare_and_swap(MacroAssembler& _masm, const MachNode* node,\n+static void z_compare_and_swap(MacroAssembler* masm, const MachNode* node,\n@@ -97,2 +97,2 @@\n-  z_store_barrier(_masm, node, mem, 0, newval, rnew_zpointer, true \/* is_atomic *\/);\n-  z_color(_masm, rold_zpointer, oldval);\n+  z_store_barrier(masm, node, mem, 0, newval, rnew_zpointer, true \/* is_atomic *\/);\n+  z_color(masm, rold_zpointer, oldval);\n@@ -114,1 +114,1 @@\n-static void z_compare_and_exchange(MacroAssembler& _masm, const MachNode* node,\n+static void z_compare_and_exchange(MacroAssembler* masm, const MachNode* node,\n@@ -119,2 +119,2 @@\n-  z_store_barrier(_masm, node, mem, 0, newval, rnew_zpointer, true \/* is_atomic *\/);\n-  z_color(_masm, rold_zpointer, oldval);\n+  z_store_barrier(masm, node, mem, 0, newval, rnew_zpointer, true \/* is_atomic *\/);\n+  z_color(masm, rold_zpointer, oldval);\n@@ -124,1 +124,1 @@\n-  z_uncolor(_masm, res);\n+  z_uncolor(masm, res);\n@@ -152,1 +152,1 @@\n-    z_load_barrier(_masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register);\n+    z_load_barrier(masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register);\n@@ -170,1 +170,1 @@\n-    z_load_barrier(_masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register);\n+    z_load_barrier(masm, this, Address($mem$$base$$Register, $mem$$disp), $dst$$Register);\n@@ -189,1 +189,1 @@\n-    z_store_barrier(_masm, this, $mem$$base$$Register, $mem$$disp, $src$$Register, $tmp$$Register, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, $mem$$base$$Register, $mem$$disp, $src$$Register, $tmp$$Register, false \/* is_atomic *\/);\n@@ -203,1 +203,1 @@\n-    z_store_barrier(_masm, this, $mem$$base$$Register, $mem$$disp, noreg, $tmp$$Register, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, $mem$$base$$Register, $mem$$disp, noreg, $tmp$$Register, false \/* is_atomic *\/);\n@@ -220,1 +220,1 @@\n-    z_compare_and_swap(_masm, this,\n+    z_compare_and_swap(masm, this,\n@@ -239,1 +239,1 @@\n-    z_compare_and_swap(_masm, this,\n+    z_compare_and_swap(masm, this,\n@@ -260,1 +260,1 @@\n-    z_compare_and_exchange(_masm, this,\n+    z_compare_and_exchange(masm, this,\n@@ -280,1 +280,1 @@\n-    z_compare_and_exchange(_masm, this,\n+    z_compare_and_exchange(masm, this,\n@@ -296,1 +296,1 @@\n-    z_store_barrier(_masm, this, $mem$$Register, 0, $newval$$Register, rnew_zpointer, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, $mem$$Register, 0, $newval$$Register, rnew_zpointer, true \/* is_atomic *\/);\n@@ -298,1 +298,1 @@\n-    z_uncolor(_masm, result);\n+    z_uncolor(masm, result);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/z_ppc.ad","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -1029,1 +1029,1 @@\n-  const Node *mba = NULL;\n+  const Node *mba = nullptr;\n@@ -1046,1 +1046,1 @@\n-  Node *mem_proj = NULL;\n+  Node *mem_proj = nullptr;\n@@ -1082,1 +1082,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -1192,2 +1192,1 @@\n-void emit_break(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_break(C2_MacroAssembler *masm) {\n@@ -1203,2 +1202,2 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  emit_break(cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  emit_break(masm);\n@@ -1213,2 +1212,1 @@\n-void emit_nop(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_nop(C2_MacroAssembler *masm) {\n@@ -1218,3 +1216,3 @@\n-static inline void emit_long(CodeBuffer &cbuf, int value) {\n-  *((int*)(cbuf.insts_end())) = value;\n-  cbuf.set_insts_end(cbuf.insts_end() + BytesPerInstWord);\n+static inline void emit_long(C2_MacroAssembler *masm, int value) {\n+  *((int*)(__ pc())) = value;\n+  __ set_inst_end(__ pc() + BytesPerInstWord);\n@@ -1240,1 +1238,1 @@\n-  static void emit_trampoline_stub(C2_MacroAssembler &_masm, int destination_toc_offset, int insts_call_instruction_offset);\n+  static void emit_trampoline_stub(C2_MacroAssembler *masm, int destination_toc_offset, int insts_call_instruction_offset);\n@@ -1271,1 +1269,1 @@\n-void CallStubImpl::emit_trampoline_stub(C2_MacroAssembler &_masm, int destination_toc_offset, int insts_call_instruction_offset) {\n+void CallStubImpl::emit_trampoline_stub(C2_MacroAssembler *masm, int destination_toc_offset, int insts_call_instruction_offset) {\n@@ -1273,1 +1271,1 @@\n-  if (stub == NULL) {\n+  if (stub == nullptr) {\n@@ -1302,1 +1300,1 @@\n-EmitCallOffsets emit_call_with_trampoline_stub(C2_MacroAssembler &_masm, address entry_point, relocInfo::relocType rtype) {\n+EmitCallOffsets emit_call_with_trampoline_stub(C2_MacroAssembler *masm, address entry_point, relocInfo::relocType rtype) {\n@@ -1308,1 +1306,1 @@\n-  if (entry_point == NULL) entry_point = __ pc();\n+  if (entry_point == nullptr) entry_point = __ pc();\n@@ -1312,1 +1310,1 @@\n-  if (entry_point_toc_addr == NULL) {\n+  if (entry_point_toc_addr == nullptr) {\n@@ -1319,1 +1317,1 @@\n-  CallStubImpl::emit_trampoline_stub(_masm, entry_point_toc_offset, offsets.insts_call_instruction_offset);\n+  CallStubImpl::emit_trampoline_stub(masm, entry_point_toc_offset, offsets.insts_call_instruction_offset);\n@@ -1358,2 +1356,2 @@\n-  m1->add_req(NULL);\n-  m2->add_req(NULL, m1);\n+  m1->add_req(nullptr);\n+  m2->add_req(nullptr, m1);\n@@ -1369,1 +1367,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -1401,1 +1399,1 @@\n-  if (C->stub_function() == NULL) {\n+  if (C->stub_function() == nullptr) {\n@@ -1407,1 +1405,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1409,1 +1407,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1557,1 +1554,1 @@\n-  if (C->stub_function() == NULL) {\n+  if (C->stub_function() == nullptr) {\n@@ -1559,1 +1556,1 @@\n-    bs->nmethod_entry_barrier(&_masm, push_frame_temp);\n+    bs->nmethod_entry_barrier(masm, push_frame_temp);\n@@ -1562,1 +1559,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -1591,1 +1588,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1593,1 +1590,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1671,1 +1667,1 @@\n-static int ld_st_helper(CodeBuffer *cbuf, const char *op_str, uint opcode, int reg, int offset,\n+static int ld_st_helper(C2_MacroAssembler *masm, const char *op_str, uint opcode, int reg, int offset,\n@@ -1684,1 +1680,1 @@\n-  if (cbuf) {\n+  if (masm) {\n@@ -1689,1 +1685,1 @@\n-    emit_long(*cbuf, opcode | Assembler::rt(Matcher::_regEncode[reg]) | d | Assembler::ra(R1_SP));\n+    emit_long(masm, opcode | Assembler::rt(Matcher::_regEncode[reg]) | d | Assembler::ra(R1_SP));\n@@ -1702,1 +1698,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n@@ -1727,1 +1723,1 @@\n-  if (bottom_type()->isa_vect() != NULL && ideal_reg() == Op_VecX) {\n+  if (bottom_type()->isa_vect() != nullptr && ideal_reg() == Op_VecX) {\n@@ -1732,2 +1728,1 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n+      if (masm) {\n@@ -1745,2 +1740,1 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n+      if (masm) {\n@@ -1756,2 +1750,1 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n+      if (masm) {\n@@ -1767,2 +1760,1 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n+      if (masm) {\n@@ -1787,3 +1779,3 @@\n-      size += ld_st_helper(cbuf, \"LD  \", Assembler::LD_OPCODE,  R0_num, src_offset, !do_size, C, st);\n-      if (!cbuf && !do_size) st->print(\"\\n\\t\");\n-      size += ld_st_helper(cbuf, \"STD \", Assembler::STD_OPCODE, R0_num, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LD  \", Assembler::LD_OPCODE,  R0_num, src_offset, !do_size, C, st);\n+      if (!masm && !do_size) st->print(\"\\n\\t\");\n+      size += ld_st_helper(masm, \"STD \", Assembler::STD_OPCODE, R0_num, dst_offset, !do_size, C, st);\n@@ -1791,3 +1783,3 @@\n-      size += ld_st_helper(cbuf, \"LWZ \", Assembler::LWZ_OPCODE, R0_num, src_offset, !do_size, C, st);\n-      if (!cbuf && !do_size) st->print(\"\\n\\t\");\n-      size += ld_st_helper(cbuf, \"STW \", Assembler::STW_OPCODE, R0_num, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LWZ \", Assembler::LWZ_OPCODE, R0_num, src_offset, !do_size, C, st);\n+      if (!masm && !do_size) st->print(\"\\n\\t\");\n+      size += ld_st_helper(masm, \"STW \", Assembler::STW_OPCODE, R0_num, dst_offset, !do_size, C, st);\n@@ -1811,2 +1803,1 @@\n-      if (cbuf) {\n-        C2_MacroAssembler _masm(cbuf);\n+      if (masm) {\n@@ -1835,1 +1826,1 @@\n-      size += ld_st_helper(cbuf, \"STD \", Assembler::STD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STD \", Assembler::STD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1837,1 +1828,1 @@\n-      size += ld_st_helper(cbuf, \"STW \", Assembler::STW_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STW \", Assembler::STW_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1848,1 +1839,1 @@\n-      size += ld_st_helper(cbuf, \"LD  \", Assembler::LD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LD  \", Assembler::LD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1850,1 +1841,1 @@\n-      size += ld_st_helper(cbuf, \"LWZ \", Assembler::LWZ_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LWZ \", Assembler::LWZ_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1857,2 +1848,1 @@\n-    if (cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (masm) {\n@@ -1877,1 +1867,1 @@\n-      size += ld_st_helper(cbuf, \"STFD\", Assembler::STFD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STFD\", Assembler::STFD_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1879,1 +1869,1 @@\n-      size += ld_st_helper(cbuf, \"STFS\", Assembler::STFS_OPCODE, src_lo, dst_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"STFS\", Assembler::STFS_OPCODE, src_lo, dst_offset, !do_size, C, st);\n@@ -1890,1 +1880,1 @@\n-      size += ld_st_helper(cbuf, \"LFD \", Assembler::LFD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LFD \", Assembler::LFD_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1892,1 +1882,1 @@\n-      size += ld_st_helper(cbuf, \"LFS \", Assembler::LFS_OPCODE, dst_lo, src_offset, !do_size, C, st);\n+      size += ld_st_helper(masm, \"LFS \", Assembler::LFS_OPCODE, dst_lo, src_offset, !do_size, C, st);\n@@ -1913,1 +1903,1 @@\n-    implementation(NULL, ra_, false, st);\n+    implementation(nullptr, ra_, false, st);\n@@ -1917,2 +1907,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, NULL);\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation(masm, ra_, false, nullptr);\n@@ -1922,1 +1912,1 @@\n-  return implementation(NULL, ra_, true, NULL);\n+  return implementation(nullptr, ra_, true, nullptr);\n@@ -1931,2 +1921,1 @@\n-void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *) const {\n@@ -1952,3 +1941,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1977,4 +1964,1 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  \/\/ This is the unverified entry point.\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void MachUEPNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1988,1 +1972,1 @@\n-  \/\/ Check for NULL argument if we don't have implicit null checks.\n+  \/\/ Check for nullptr argument if we don't have implicit null checks.\n@@ -2002,1 +1986,1 @@\n-  \/\/ Assume argument is not NULL, load klass from receiver.\n+  \/\/ Assume argument is not nullptr, load klass from receiver.\n@@ -2035,2 +2019,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -2061,3 +2045,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler *masm) {\n@@ -2065,1 +2047,1 @@\n-  if (base == NULL) return 0; \/\/ CodeBuffer::expand failed\n+  if (base == nullptr) return 0; \/\/ CodeBuffer::expand failed\n@@ -2078,3 +2060,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm) {\n@@ -2082,1 +2062,1 @@\n-  if (base == NULL) return 0; \/\/ CodeBuffer::expand failed\n+  if (base == nullptr) return 0; \/\/ CodeBuffer::expand failed\n@@ -2196,1 +2176,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2200,1 +2180,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2278,1 +2258,1 @@\n-  assert(CompressedOops::base() == NULL && CompressedOops::shift() == 0,\n+  assert(CompressedOops::base() == nullptr && CompressedOops::shift() == 0,\n@@ -2289,1 +2269,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2453,1 +2433,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2459,1 +2438,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2466,1 +2444,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2473,1 +2450,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2481,2 +2457,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2489,2 +2463,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2498,2 +2470,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2506,2 +2476,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2515,1 +2483,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2524,1 +2491,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2534,1 +2500,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2540,2 +2505,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2548,1 +2511,1 @@\n-    if (const_toc_addr == NULL) {\n+    if (const_toc_addr == nullptr) {\n@@ -2563,3 +2526,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2571,1 +2531,1 @@\n-      if (const_toc_addr == NULL) {\n+      if (const_toc_addr == nullptr) {\n@@ -2610,2 +2570,2 @@\n-    m1->add_req(NULL, toc);\n-    m2->add_req(NULL, m1);\n+    m1->add_req(nullptr, toc);\n+    m2->add_req(nullptr, m1);\n@@ -2635,1 +2595,1 @@\n-    nodes._small = NULL;\n+    nodes._small = nullptr;\n@@ -2642,1 +2602,1 @@\n-    m2->add_req(NULL, toc);\n+    m2->add_req(nullptr, toc);\n@@ -2656,2 +2616,2 @@\n-    nodes._large_hi = NULL;\n-    nodes._large_lo = NULL;\n+    nodes._large_hi = nullptr;\n+    nodes._large_lo = nullptr;\n@@ -2690,4 +2650,4 @@\n-    m1->add_req(NULL, toc);\n-    m2->add_req(NULL, m1);\n-    m3->add_req(NULL, m2);\n-    m4->add_req(NULL, m3);\n+    m1->add_req(nullptr, toc);\n+    m2->add_req(nullptr, m1);\n+    m3->add_req(nullptr, m2);\n+    m4->add_req(nullptr, m3);\n@@ -2730,1 +2690,1 @@\n-    nodes._small = NULL;\n+    nodes._small = nullptr;\n@@ -2739,1 +2699,1 @@\n-    m2->add_req(NULL, toc);\n+    m2->add_req(nullptr, toc);\n@@ -2763,2 +2723,2 @@\n-    nodes._large_hi = NULL;\n-    nodes._large_lo = NULL;\n+    nodes._large_hi = nullptr;\n+    nodes._large_lo = nullptr;\n@@ -2797,2 +2757,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2818,1 +2776,1 @@\n-    if (const_toc_addr == NULL) {\n+    if (const_toc_addr == nullptr) {\n@@ -2829,2 +2787,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2849,1 +2805,1 @@\n-      if (const_toc_addr == NULL) {\n+      if (const_toc_addr == nullptr) {\n@@ -2873,2 +2829,2 @@\n-      m1->add_req(NULL, n_toc);\n-      m2->add_req(NULL, m1);\n+      m1->add_req(nullptr, n_toc);\n+      m2->add_req(nullptr, m1);\n@@ -2899,1 +2855,1 @@\n-      m2->add_req(NULL, n_toc);\n+      m2->add_req(nullptr, n_toc);\n@@ -2926,1 +2882,1 @@\n-    m2->add_req(NULL, n_toc);\n+    m2->add_req(nullptr, n_toc);\n@@ -2950,1 +2906,1 @@\n-    m2->add_req(NULL, n_toc);\n+    m2->add_req(nullptr, n_toc);\n@@ -2963,1 +2919,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2969,1 +2924,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2977,1 +2931,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2983,1 +2936,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3182,2 +3134,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3195,2 +3145,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3208,1 +3156,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3213,3 +3160,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3225,3 +3169,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3237,2 +3178,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3247,2 +3186,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3256,2 +3193,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3261,1 +3196,1 @@\n-    \/\/ `p' is `NULL' when this encoding class is used only to\n+    \/\/ `p' is `nullptr' when this encoding class is used only to\n@@ -3263,1 +3198,1 @@\n-    Label& l = (NULL == p)? d : *(p);\n+    Label& l = (nullptr == p)? d : *(p);\n@@ -3285,2 +3220,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3290,1 +3223,1 @@\n-    \/\/ `p' is `NULL' when this encoding class is used only to\n+    \/\/ `p' is `nullptr' when this encoding class is used only to\n@@ -3292,1 +3225,1 @@\n-    Label& l = (NULL == p)? d : *(p);\n+    Label& l = (nullptr == p)? d : *(p);\n@@ -3361,1 +3294,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3415,2 +3347,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3421,1 +3351,1 @@\n-      emit_call_with_trampoline_stub(_masm, entry_point, relocInfo::runtime_call_type);\n+      emit_call_with_trampoline_stub(masm, entry_point, relocInfo::runtime_call_type);\n@@ -3434,1 +3364,1 @@\n-      if (entry_point_toc_addr == NULL) {\n+      if (entry_point_toc_addr == nullptr) {\n@@ -3441,1 +3371,1 @@\n-      CallStubImpl::emit_trampoline_stub(_masm, entry_point_toc_offset, start_offset);\n+      CallStubImpl::emit_trampoline_stub(masm, entry_point_toc_offset, start_offset);\n@@ -3443,1 +3373,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -3451,1 +3381,1 @@\n-      cbuf.set_insts_mark();\n+      __ set_inst_mark();\n@@ -3455,2 +3385,3 @@\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n-      if (stub == NULL) {\n+      address stub = CompiledStaticCall::emit_to_interp_stub(masm);\n+      __ clear_inst_mark();\n+      if (stub == nullptr) {\n@@ -3466,3 +3397,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -3473,1 +3401,1 @@\n-      if (entry_point_const == NULL) {\n+      if (entry_point_const == nullptr) {\n@@ -3478,1 +3406,1 @@\n-      CallStubImpl::emit_trampoline_stub(_masm, entry_point_const_toc_offset, __ offset());\n+      CallStubImpl::emit_trampoline_stub(masm, entry_point_const_toc_offset, __ offset());\n@@ -3482,2 +3410,2 @@\n-      assert((_load_ic_hi_node != NULL && _load_ic_node == NULL) ||\n-             (_load_ic_hi_node == NULL && _load_ic_node != NULL),\n+      assert((_load_ic_hi_node != nullptr && _load_ic_node == nullptr) ||\n+             (_load_ic_hi_node == nullptr && _load_ic_node != nullptr),\n@@ -3485,2 +3413,2 @@\n-      assert((_load_ic_hi_node != NULL && _load_ic_hi_node->_cbuf_insts_offset != -1) ||\n-             (_load_ic_node != NULL    && _load_ic_node->_cbuf_insts_offset != -1),\n+      assert((_load_ic_hi_node != nullptr && _load_ic_hi_node->_cbuf_insts_offset != -1) ||\n+             (_load_ic_node != nullptr    && _load_ic_node->_cbuf_insts_offset != -1),\n@@ -3488,1 +3416,1 @@\n-      const int virtual_call_oop_addr_offset = _load_ic_hi_node != NULL\n+      const int virtual_call_oop_addr_offset = _load_ic_hi_node != nullptr\n@@ -3494,1 +3422,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -3569,1 +3497,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3592,1 +3519,1 @@\n-      emit_call_with_trampoline_stub(_masm, (address)$meth$$method, relocInfo::none);\n+      emit_call_with_trampoline_stub(masm, (address)$meth$$method, relocInfo::none);\n@@ -3623,2 +3550,0 @@\n-\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3628,1 +3553,1 @@\n-    address entry= !($meth$$method) ? NULL : (address)$meth$$method;\n+    address entry= !($meth$$method) ? nullptr : (address)$meth$$method;\n@@ -3658,1 +3583,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -3685,1 +3609,1 @@\n-    if (fd->env() != NULL) {\n+    if (fd->env() != nullptr) {\n@@ -3689,3 +3613,3 @@\n-      loadConLNodes_Env._large_hi = NULL;\n-      loadConLNodes_Env._large_lo = NULL;\n-      loadConLNodes_Env._small    = NULL;\n+      loadConLNodes_Env._large_hi = nullptr;\n+      loadConLNodes_Env._large_lo = nullptr;\n+      loadConLNodes_Env._small    = nullptr;\n@@ -3705,1 +3629,1 @@\n-    assert(loadConLNodes_Entry._last != NULL, \"entry must exist\");\n+    assert(loadConLNodes_Entry._last != nullptr, \"entry must exist\");\n@@ -3725,1 +3649,1 @@\n-    call->_jvms        = NULL;\n+    call->_jvms        = nullptr;\n@@ -3829,1 +3753,1 @@\n-            (ideal_reg == Op_RegN && CompressedOops::base() == NULL && CompressedOops::shift() == 0),\n+            (ideal_reg == Op_RegN && CompressedOops::base() == nullptr && CompressedOops::shift() == 0),\n@@ -3840,1 +3764,1 @@\n-            (ideal_reg == Op_RegN && CompressedOops::base() == NULL && CompressedOops::shift() == 0),\n+            (ideal_reg == Op_RegN && CompressedOops::base() == nullptr && CompressedOops::shift() == 0),\n@@ -4113,1 +4037,1 @@\n-\/\/ NULL Pointer Immediate\n+\/\/ nullptr Pointer Immediate\n@@ -4685,1 +4609,1 @@\n-  predicate(CompressedKlassPointers::base() == NULL && CompressedKlassPointers::shift() == 0);\n+  predicate(CompressedKlassPointers::base() == nullptr && CompressedKlassPointers::shift() == 0);\n@@ -4754,1 +4678,1 @@\n-  predicate(CompressedKlassPointers::base() == NULL && CompressedKlassPointers::shift() == 0);\n+  predicate(CompressedKlassPointers::base() == nullptr && CompressedKlassPointers::shift() == 0);\n@@ -4783,1 +4707,1 @@\n-  predicate(CompressedKlassPointers::base() == NULL && CompressedKlassPointers::shift() == 0);\n+  predicate(CompressedKlassPointers::base() == nullptr && CompressedKlassPointers::shift() == 0);\n@@ -4812,1 +4736,1 @@\n-  predicate(CompressedKlassPointers::base() == NULL && CompressedKlassPointers::shift() == 0);\n+  predicate(CompressedKlassPointers::base() == nullptr && CompressedKlassPointers::shift() == 0);\n@@ -5547,1 +5471,1 @@\n-  predicate(CompressedKlassPointers::base() == NULL && CompressedKlassPointers::shift() == 0 &&\n+  predicate(CompressedKlassPointers::base() == nullptr && CompressedKlassPointers::shift() == 0 &&\n@@ -5957,1 +5881,1 @@\n-\/\/ Load NULL as compressed oop.\n+\/\/ Load nullptr as compressed oop.\n@@ -6048,3 +5972,3 @@\n-    m1->add_req(NULL);\n-    m2->add_req(NULL, m1);\n-    m3->add_req(NULL, m2);\n+    m1->add_req(nullptr);\n+    m2->add_req(nullptr, m1);\n+    m3->add_req(nullptr, m2);\n@@ -6126,1 +6050,1 @@\n-    m1->add_req(NULL);\n+    m1->add_req(nullptr);\n@@ -6136,1 +6060,1 @@\n-      m2->add_req(NULL, m1);\n+      m2->add_req(nullptr, m1);\n@@ -6145,1 +6069,1 @@\n-    m3->add_req(NULL, m2);\n+    m3->add_req(nullptr, m2);\n@@ -6246,1 +6170,1 @@\n-    if (float_address == NULL) {\n+    if (float_address == nullptr) {\n@@ -6270,1 +6194,1 @@\n-    if (float_address == NULL) {\n+    if (float_address == nullptr) {\n@@ -6308,1 +6232,1 @@\n-    if (float_address == NULL) {\n+    if (float_address == nullptr) {\n@@ -6333,1 +6257,1 @@\n-    if (float_address == NULL) {\n+    if (float_address == nullptr) {\n@@ -6635,1 +6559,1 @@\n-            \"SUB     $dst, $src1, heapbase \\t\/\/ encode: subtract base if != NULL\\n\"\n+            \"SUB     $dst, $src1, heapbase \\t\/\/ encode: subtract base if != nullptr\\n\"\n@@ -6704,1 +6628,1 @@\n-  format %{ \"SRDI    $dst, $src, #3 \\t\/\/ encodeP, $src != NULL\" %}\n+  format %{ \"SRDI    $dst, $src, #3 \\t\/\/ encodeP, $src != nullptr\" %}\n@@ -6765,1 +6689,1 @@\n-            \"ADD     $dst, $src, heapbase \\t\/\/ DecodeN: add oop base if $src != NULL\\n\"\n+            \"ADD     $dst, $src, heapbase \\t\/\/ DecodeN: add oop base if $src != nullptr\\n\"\n@@ -6853,1 +6777,1 @@\n-    n1->add_req(NULL);\n+    n1->add_req(nullptr);\n@@ -6885,1 +6809,1 @@\n-    n1->add_req(NULL);\n+    n1->add_req(nullptr);\n@@ -6932,1 +6856,1 @@\n-  format %{ \"DecodeN $dst, $src \\t\/\/ $src != NULL, postalloc expanded\" %}\n+  format %{ \"DecodeN $dst, $src \\t\/\/ $src != nullptr, postalloc expanded\" %}\n@@ -7089,1 +7013,1 @@\n-  format %{ \"DecodeNKlass $dst =  $base + ($src << 3) \\t\/\/ $src != NULL, postalloc expanded\" %}\n+  format %{ \"DecodeNKlass $dst =  $base + ($src << 3) \\t\/\/ $src != nullptr, postalloc expanded\" %}\n@@ -7118,1 +7042,1 @@\n-  \/\/format %{ \"DecodeNKlass $dst, $src \\t\/\/ $src != NULL, expanded\" %}\n+  \/\/format %{ \"DecodeNKlass $dst, $src \\t\/\/ $src != nullptr, expanded\" %}\n@@ -7605,1 +7529,1 @@\n-                $res$$Register, NULL, true);\n+                $res$$Register, nullptr, true);\n@@ -7624,1 +7548,1 @@\n-                $res$$Register, NULL, true);\n+                $res$$Register, nullptr, true);\n@@ -7818,1 +7742,1 @@\n-                MacroAssembler::cmpxchgx_hint_atomic_update(), $res$$Register, NULL, true, \/*weak*\/ true);\n+                MacroAssembler::cmpxchgx_hint_atomic_update(), $res$$Register, nullptr, true, \/*weak*\/ true);\n@@ -7834,1 +7758,1 @@\n-                MacroAssembler::cmpxchgx_hint_atomic_update(), $res$$Register, NULL, true, \/*weak*\/ true);\n+                MacroAssembler::cmpxchgx_hint_atomic_update(), $res$$Register, nullptr, true, \/*weak*\/ true);\n@@ -7848,1 +7772,1 @@\n-                MacroAssembler::cmpxchgx_hint_atomic_update(), $res$$Register, NULL, true, \/*weak*\/ true);\n+                MacroAssembler::cmpxchgx_hint_atomic_update(), $res$$Register, nullptr, true, \/*weak*\/ true);\n@@ -7864,1 +7788,1 @@\n-                MacroAssembler::cmpxchgx_hint_atomic_update(), $res$$Register, NULL, true, \/*weak*\/ true);\n+                MacroAssembler::cmpxchgx_hint_atomic_update(), $res$$Register, nullptr, true, \/*weak*\/ true);\n@@ -8084,1 +8008,1 @@\n-                noreg, NULL, true);\n+                noreg, nullptr, true);\n@@ -8098,1 +8022,1 @@\n-                noreg, NULL, true);\n+                noreg, nullptr, true);\n@@ -8119,1 +8043,1 @@\n-                noreg, NULL, true);\n+                noreg, nullptr, true);\n@@ -8134,1 +8058,1 @@\n-                noreg, NULL, true);\n+                noreg, nullptr, true);\n@@ -12046,1 +11970,1 @@\n-     \/\/ `p' is `NULL' when this encoding class is used only to\n+     \/\/ `p' is `nullptr' when this encoding class is used only to\n@@ -12048,1 +11972,1 @@\n-     Label& l = (NULL == p)? d : *(p);\n+     Label& l = (nullptr == p)? d : *(p);\n@@ -12142,1 +12066,1 @@\n-                                     $tmp_klass$$Register, NULL, $result$$Register);\n+                                     $tmp_klass$$Register, nullptr, $result$$Register);\n@@ -12673,1 +12597,1 @@\n-                      $needle$$Register, NULL, $needlecnt$$Register, 0,  \/\/ needlecnt not constant.\n+                      $needle$$Register, nullptr, $needlecnt$$Register, 0,  \/\/ needlecnt not constant.\n@@ -12694,1 +12618,1 @@\n-                      $needle$$Register, NULL, $needlecnt$$Register, 0,  \/\/ needlecnt not constant.\n+                      $needle$$Register, nullptr, $needlecnt$$Register, 0,  \/\/ needlecnt not constant.\n@@ -12715,1 +12639,1 @@\n-                      $needle$$Register, NULL, $needlecnt$$Register, 0,  \/\/ needlecnt not constant.\n+                      $needle$$Register, nullptr, $needlecnt$$Register, 0,  \/\/ needlecnt not constant.\n@@ -14619,1 +14543,1 @@\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -14621,0 +14545,1 @@\n+    __ clear_inst_mark();\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":166,"deletions":241,"binary":false,"changes":407,"status":"modified"},{"patch":"@@ -1800,2 +1800,1 @@\n-    CodeBuffer* cbuf = masm->code_section()->outer();\n-    stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, c2i_call_pc);\n+    stub = CompiledStaticCall::emit_to_interp_stub(masm, c2i_call_pc);\n@@ -1893,2 +1892,1 @@\n-  CodeBuffer* cbuf = masm->code_section()->outer();\n-  stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, call_pc);\n+  stub = CompiledStaticCall::emit_to_interp_stub(masm, call_pc);\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,4 +38,4 @@\n-#define __ _masm.\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n-  precond(cbuf.stubs()->start() != badAddress);\n-  precond(cbuf.stubs()->end() != badAddress);\n+#define __ masm->\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler *masm, address mark) {\n+  precond(__ code()->stubs()->start() != badAddress);\n+  precond(__ code()->stubs()->end() != badAddress);\n@@ -48,1 +48,1 @@\n-    mark = cbuf.insts_mark();  \/\/ Get mark within main instrs section.\n+    mark = __ inst_mark();  \/\/ Get mark within main instrs section.\n@@ -51,4 +51,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/compiledIC_riscv.cpp","additions":5,"deletions":9,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -65,1 +65,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -87,1 +87,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -109,1 +109,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -129,1 +129,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -149,1 +149,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -171,1 +171,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -192,1 +192,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -213,1 +213,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -233,1 +233,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -256,1 +256,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n@@ -279,1 +279,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm, $mem$$Register, tmp, $newval$$Register,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm, $mem$$Register, tmp, $newval$$Register,\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shenandoah\/shenandoah_riscv.ad","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-static void x_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, int barrier_data) {\n+static void x_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, int barrier_data) {\n@@ -46,1 +46,1 @@\n-static void x_load_barrier_slow_path(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+static void x_load_barrier_slow_path(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n@@ -68,1 +68,1 @@\n-    x_load_barrier(_masm, this, ref_addr, $dst$$Register, t0 \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, ref_addr, $dst$$Register, t0 \/* tmp *\/, barrier_data());\n@@ -99,1 +99,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), t0 \/* ref *\/, t1 \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), t0 \/* ref *\/, t1 \/* tmp *\/);\n@@ -135,1 +135,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), t0 \/* ref *\/, t1 \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), t0 \/* ref *\/, t1 \/* tmp *\/);\n@@ -164,1 +164,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, t0 \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, t0 \/* tmp *\/);\n@@ -192,1 +192,1 @@\n-      x_load_barrier_slow_path(_masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, t0 \/* tmp *\/);\n+      x_load_barrier_slow_path(masm, this, Address($mem$$Register), $res$$Register \/* ref *\/, t0 \/* tmp *\/);\n@@ -213,1 +213,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, t0 \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, t0 \/* tmp *\/, barrier_data());\n@@ -230,1 +230,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $prev$$Register, t0 \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, 0), $prev$$Register, t0 \/* tmp *\/, barrier_data());\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/x\/x_riscv.ad","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-static void z_color(MacroAssembler& _masm, const MachNode* node, Register dst, Register src, Register tmp) {\n+static void z_color(MacroAssembler* masm, const MachNode* node, Register dst, Register src, Register tmp) {\n@@ -46,1 +46,1 @@\n-static void z_uncolor(MacroAssembler& _masm, const MachNode* node, Register ref) {\n+static void z_uncolor(MacroAssembler* masm, const MachNode* node, Register ref) {\n@@ -50,1 +50,1 @@\n-static void check_color(MacroAssembler& _masm, Register ref, bool on_non_strong, Register result) {\n+static void check_color(MacroAssembler* masm, Register ref, bool on_non_strong, Register result) {\n@@ -59,1 +59,1 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n+static void z_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp) {\n@@ -65,1 +65,1 @@\n-    z_uncolor(_masm, node, ref);\n+    z_uncolor(masm, node, ref);\n@@ -71,1 +71,1 @@\n-  check_color(_masm, ref, on_non_strong, tmp);\n+  check_color(masm, ref, on_non_strong, tmp);\n@@ -76,1 +76,1 @@\n-  z_uncolor(_masm, node, ref);\n+  z_uncolor(masm, node, ref);\n@@ -80,1 +80,1 @@\n-static void z_store_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, Register tmp, bool is_atomic) {\n+static void z_store_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, Register tmp, bool is_atomic) {\n@@ -82,1 +82,1 @@\n-    z_color(_masm, node, rnew_zpointer, rnew_zaddress, t0);\n+    z_color(masm, node, rnew_zpointer, rnew_zaddress, t0);\n@@ -87,1 +87,1 @@\n-    bs_asm->store_barrier_fast(&_masm, ref_addr, rnew_zaddress, rnew_zpointer, tmp, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n+    bs_asm->store_barrier_fast(masm, ref_addr, rnew_zaddress, rnew_zpointer, tmp, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n@@ -106,1 +106,1 @@\n-    z_load_barrier(_masm, this, ref_addr, $dst$$Register, t0);\n+    z_load_barrier(masm, this, ref_addr, $dst$$Register, t0);\n@@ -123,1 +123,1 @@\n-    z_store_barrier(_masm, this, ref_addr, $src$$Register, $tmp$$Register, t1, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, ref_addr, $src$$Register, $tmp$$Register, t1, false \/* is_atomic *\/);\n@@ -143,2 +143,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n@@ -165,2 +165,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n@@ -185,2 +185,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n@@ -188,1 +188,1 @@\n-    z_uncolor(_masm, this, $res$$Register);\n+    z_uncolor(masm, this, $res$$Register);\n@@ -206,2 +206,2 @@\n-    z_color(_masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n-    z_store_barrier(_masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval_tmp$$Register, $oldval$$Register, t0);\n+    z_store_barrier(masm, this, ref_addr, $newval$$Register, $newval_tmp$$Register, t1, true \/* is_atomic *\/);\n@@ -209,1 +209,1 @@\n-    z_uncolor(_masm, this, $res$$Register);\n+    z_uncolor(masm, this, $res$$Register);\n@@ -225,1 +225,1 @@\n-    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, t1, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, t1, true \/* is_atomic *\/);\n@@ -227,1 +227,1 @@\n-    z_uncolor(_masm, this, $prev$$Register);\n+    z_uncolor(masm, this, $prev$$Register);\n@@ -243,1 +243,1 @@\n-    z_store_barrier(_masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, t1, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, Address($mem$$Register), $newv$$Register, $prev$$Register, t1, true \/* is_atomic *\/);\n@@ -245,1 +245,1 @@\n-    z_uncolor(_masm, this, $prev$$Register);\n+    z_uncolor(masm, this, $prev$$Register);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/z\/z_riscv.ad","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -1062,2 +1062,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -1198,1 +1198,1 @@\n-  assert(n != NULL && is_CAS(n->Opcode(), true), \"expecting a compare and swap\");\n+  assert(n != nullptr && is_CAS(n->Opcode(), true), \"expecting a compare and swap\");\n@@ -1201,2 +1201,2 @@\n-  if (n != NULL && is_CAS(n->Opcode(), false)) {\n-    assert(ldst != NULL && ldst->trailing_membar() != NULL, \"expected trailing membar\");\n+  if (n != nullptr && is_CAS(n->Opcode(), false)) {\n+    assert(ldst != nullptr && ldst->trailing_membar() != nullptr, \"expected trailing membar\");\n@@ -1204,1 +1204,1 @@\n-    return ldst != NULL && ldst->trailing_membar() != NULL;\n+    return ldst != nullptr && ldst->trailing_membar() != nullptr;\n@@ -1209,1 +1209,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -1249,1 +1249,1 @@\n-  if (cb != NULL) {\n+  if (cb != nullptr) {\n@@ -1288,1 +1288,1 @@\n-  assert_cond(st != NULL);\n+  assert_cond(st != nullptr);\n@@ -1293,2 +1293,1 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1310,3 +1309,2 @@\n-  void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc*) const {\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::CompressibleRegion cr(&_masm); \/\/ nops shall be 2-byte under RVC for alignment purposes.\n+  void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc*) const {\n+    Assembler::CompressibleRegion cr(masm); \/\/ nops shall be 2-byte under RVC for alignment purposes.\n@@ -1334,1 +1332,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -1344,1 +1342,1 @@\n-  assert_cond(st != NULL);\n+  assert_cond(st != nullptr);\n@@ -1351,1 +1349,1 @@\n-  assert_cond(st != NULL && ra_ != NULL);\n+  assert_cond(st != nullptr && ra_ != nullptr);\n@@ -1365,1 +1363,1 @@\n-  if (C->stub_function() == NULL && BarrierSet::barrier_set()->barrier_set_nmethod() != NULL) {\n+  if (C->stub_function() == nullptr && BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n@@ -1378,2 +1376,2 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  assert_cond(ra_ != NULL);\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  assert_cond(ra_ != nullptr);\n@@ -1381,1 +1379,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1389,1 +1386,1 @@\n-    Assembler::IncompressibleRegion ir(&_masm);  \/\/ keep the nop as 4 bytes for patching.\n+    Assembler::IncompressibleRegion ir(masm);  \/\/ keep the nop as 4 bytes for patching.\n@@ -1394,1 +1391,1 @@\n-  assert_cond(C != NULL);\n+  assert_cond(C != nullptr);\n@@ -1414,1 +1411,1 @@\n-  if (C->stub_function() == NULL) {\n+  if (C->stub_function() == nullptr) {\n@@ -1416,1 +1413,1 @@\n-    if (BarrierSet::barrier_set()->barrier_set_nmethod() != NULL) {\n+    if (BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n@@ -1433,1 +1430,1 @@\n-      bs->nmethod_entry_barrier(&_masm, slow_path, continuation, guard);\n+      bs->nmethod_entry_barrier(masm, slow_path, continuation, guard);\n@@ -1441,1 +1438,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -1453,1 +1450,1 @@\n-  assert_cond(ra_ != NULL);\n+  assert_cond(ra_ != nullptr);\n@@ -1467,1 +1464,1 @@\n-  assert_cond(st != NULL && ra_ != NULL);\n+  assert_cond(st != nullptr && ra_ != nullptr);\n@@ -1469,1 +1466,1 @@\n-  assert_cond(C != NULL);\n+  assert_cond(C != nullptr);\n@@ -1492,2 +1489,2 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  assert_cond(ra_ != NULL);\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  assert_cond(ra_ != nullptr);\n@@ -1495,2 +1492,1 @@\n-  C2_MacroAssembler _masm(&cbuf);\n-  assert_cond(C != NULL);\n+  assert_cond(C != nullptr);\n@@ -1519,1 +1515,1 @@\n-  assert_cond(ra_ != NULL);\n+  assert_cond(ra_ != nullptr);\n@@ -1569,2 +1565,2 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n-  assert_cond(ra_ != NULL);\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *st) const {\n+  assert_cond(ra_ != nullptr);\n@@ -1601,1 +1597,1 @@\n-  if (bottom_type()->isa_vect() != NULL) {\n+  if (bottom_type()->isa_vect() != nullptr) {\n@@ -1603,2 +1599,1 @@\n-    if (ireg == Op_VecA && cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (ireg == Op_VecA && masm) {\n@@ -1622,2 +1617,1 @@\n-    } else if (bottom_type()->isa_vectmask() && cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    } else if (bottom_type()->isa_vectmask() && masm) {\n@@ -1642,2 +1636,1 @@\n-  } else if (cbuf != NULL) {\n-    C2_MacroAssembler _masm(cbuf);\n+  } else if (masm != nullptr) {\n@@ -1713,1 +1706,1 @@\n-  if (st != NULL) {\n+  if (st != nullptr) {\n@@ -1747,1 +1740,1 @@\n-  if (ra_ == NULL) {\n+  if (ra_ == nullptr) {\n@@ -1750,1 +1743,1 @@\n-    implementation(NULL, ra_, false, st);\n+    implementation(nullptr, ra_, false, st);\n@@ -1755,2 +1748,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, NULL);\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation(masm, ra_, false, nullptr);\n@@ -1767,1 +1760,1 @@\n-  assert_cond(ra_ != NULL && st != NULL);\n+  assert_cond(ra_ != nullptr && st != nullptr);\n@@ -1775,3 +1768,2 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-  Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see BoxLockNode::size()\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see BoxLockNode::size()\n@@ -1779,1 +1771,1 @@\n-  assert_cond(ra_ != NULL);\n+  assert_cond(ra_ != nullptr);\n@@ -1807,1 +1799,1 @@\n-  assert_cond(st != NULL);\n+  assert_cond(st != nullptr);\n@@ -1823,1 +1815,1 @@\n-void MachUEPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachUEPNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const\n@@ -1825,3 +1817,0 @@\n-  \/\/ This is the unverified entry point.\n-  C2_MacroAssembler _masm(&cbuf);\n-\n@@ -1840,1 +1829,1 @@\n-  assert_cond(ra_ != NULL);\n+  assert_cond(ra_ != nullptr);\n@@ -1849,1 +1838,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler* masm)\n@@ -1855,3 +1844,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a handler.\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1859,1 +1845,1 @@\n-  if (base == NULL) {\n+  if (base == nullptr) {\n@@ -1871,1 +1857,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf)\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm)\n@@ -1873,3 +1859,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a handler.\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1877,1 +1860,1 @@\n-  if (base == NULL) {\n+  if (base == nullptr) {\n@@ -2038,1 +2021,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2141,1 +2124,1 @@\n-  assert_cond(addp != NULL);\n+  assert_cond(addp != nullptr);\n@@ -2144,1 +2127,1 @@\n-    if (u != NULL && u->is_Mem()) {\n+    if (u != nullptr && u->is_Mem()) {\n@@ -2157,1 +2140,1 @@\n-  assert_cond(m != NULL);\n+  assert_cond(m != nullptr);\n@@ -2206,1 +2189,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2213,1 +2195,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2216,1 +2197,1 @@\n-    if (con == NULL || con == (address)1) {\n+    if (con == nullptr || con == (address)1) {\n@@ -2232,1 +2213,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2238,1 +2218,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2243,1 +2222,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2246,1 +2224,1 @@\n-    if (con == NULL) {\n+    if (con == nullptr) {\n@@ -2256,1 +2234,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2262,1 +2239,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2265,1 +2241,1 @@\n-    if (con == NULL) {\n+    if (con == nullptr) {\n@@ -2275,1 +2251,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2282,1 +2257,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2289,1 +2263,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2296,1 +2269,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2303,1 +2275,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2310,1 +2281,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2319,1 +2289,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2325,1 +2294,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2349,1 +2317,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2351,1 +2318,1 @@\n-                                     NULL, &miss);\n+                                     nullptr, &miss);\n@@ -2368,2 +2335,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n+    Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see ret_addr_offset\n@@ -2372,2 +2338,2 @@\n-    address call = NULL;\n-    assert_cond(addr != NULL);\n+    address call = nullptr;\n+    assert_cond(addr != nullptr);\n@@ -2377,1 +2343,1 @@\n-      if (call == NULL) {\n+      if (call == nullptr) {\n@@ -2382,1 +2348,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -2386,1 +2352,1 @@\n-      if (call == NULL) {\n+      if (call == nullptr) {\n@@ -2394,1 +2360,1 @@\n-        cbuf.shared_stub_to_interp_for(_method, call - cbuf.insts_begin());\n+        __ code()->shared_stub_to_interp_for(_method, call - (__ begin()));\n@@ -2397,2 +2363,2 @@\n-        address stub = CompiledStaticCall::emit_to_interp_stub(cbuf, call);\n-        if (stub == NULL) {\n+        address stub = CompiledStaticCall::emit_to_interp_stub(masm, call);\n+        if (stub == nullptr) {\n@@ -2409,3 +2375,2 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n-    int method_index = resolved_method_index(cbuf);\n+    Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see ret_addr_offset\n+    int method_index = resolved_method_index(masm);\n@@ -2413,1 +2378,1 @@\n-    if (call == NULL) {\n+    if (call == nullptr) {\n@@ -2422,1 +2387,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2430,2 +2394,1 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-    Assembler::IncompressibleRegion ir(&_masm);  \/\/ Fixed length: see ret_addr_offset\n+    Assembler::IncompressibleRegion ir(masm);  \/\/ Fixed length: see ret_addr_offset\n@@ -2439,1 +2402,1 @@\n-    if (cb != NULL) {\n+    if (cb != nullptr) {\n@@ -2441,1 +2404,1 @@\n-      if (call == NULL) {\n+      if (call == nullptr) {\n@@ -2463,1 +2426,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2471,1 +2433,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2479,1 +2440,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2487,1 +2447,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2495,1 +2454,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2503,1 +2461,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2511,1 +2468,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2519,1 +2475,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2527,1 +2482,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2533,1 +2487,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2543,1 +2496,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2548,1 +2500,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2889,1 +2840,1 @@\n-\/\/ NULL Pointer Immediate\n+\/\/ nullptr Pointer Immediate\n@@ -3010,1 +2961,1 @@\n-\/\/ Narrow NULL Pointer Immediate\n+\/\/ Narrow nullptr Pointer Immediate\n@@ -4888,1 +4839,1 @@\n-  format %{ \"mv  $dst, $con\\t# NULL ptr, #@loadConP0\" %}\n+  format %{ \"mv  $dst, $con\\t# nullptr ptr, #@loadConP0\" %}\n@@ -4939,1 +4890,1 @@\n-  format %{ \"mv  $dst, $con\\t# compressed NULL ptr, #@loadConN0\" %}\n+  format %{ \"mv  $dst, $con\\t# compressed nullptr ptr, #@loadConN0\" %}\n@@ -10274,1 +10225,1 @@\n-    if (tpc == NULL) {\n+    if (tpc == nullptr) {\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":81,"deletions":130,"binary":false,"changes":211,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-  static void loadStore(C2_MacroAssembler masm, bool is_store,\n+  static void loadStore(C2_MacroAssembler* masm, bool is_store,\n@@ -37,1 +37,1 @@\n-    masm.vsetvli_helper(bt, vector_length);\n+    __ vsetvli_helper(bt, vector_length);\n@@ -40,1 +40,1 @@\n-      masm.vsex_v(reg, base, sew, vm);\n+      __ vsex_v(reg, base, sew, vm);\n@@ -43,1 +43,1 @@\n-        masm.vxor_vv(reg, reg, reg);\n+        __ vxor_vv(reg, reg, reg);\n@@ -45,1 +45,1 @@\n-      masm.vlex_v(reg, base, sew, vm);\n+      __ vlex_v(reg, base, sew, vm);\n@@ -108,1 +108,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), false, dst_reg,\n+    loadStore(masm, false, dst_reg,\n@@ -120,1 +120,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), true, src_reg,\n+    loadStore(masm, true, src_reg,\n@@ -3171,1 +3171,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), false, dst_reg,\n+    loadStore(masm, false, dst_reg,\n@@ -3183,1 +3183,1 @@\n-    loadStore(C2_MacroAssembler(&cbuf), true, src_reg,\n+    loadStore(masm, true, src_reg,\n@@ -3220,1 +3220,1 @@\n-      __ integer_extend_v(as_VectorRegister($dst$$reg), bt, \n+      __ integer_extend_v(as_VectorRegister($dst$$reg), bt,\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -988,2 +988,1 @@\n-    CodeBuffer* cbuf = masm->code_section()->outer();\n-    address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+    address stub = CompiledStaticCall::emit_to_interp_stub(masm, tr_call);\n@@ -1054,2 +1053,1 @@\n-  CodeBuffer* cbuf = masm->code_section()->outer();\n-  address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, tr_call);\n+  address stub = CompiledStaticCall::emit_to_interp_stub(masm, tr_call);\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -43,1 +43,1 @@\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark\/* = nullptr*\/) {\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler *masm, address mark\/* = nullptr*\/) {\n@@ -49,1 +49,1 @@\n-    mark = cbuf.insts_mark();\n+    mark = __ inst_mark();\n@@ -53,4 +53,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/s390\/compiledIC_s390.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -587,1 +587,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -669,2 +669,1 @@\n-void emit_nop(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_nop(C2_MacroAssembler *masm) {\n@@ -675,2 +674,1 @@\n-void emit_break(CodeBuffer &cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+void emit_break(C2_MacroAssembler *masm) {\n@@ -686,2 +684,2 @@\n-void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  emit_break(cbuf);\n+void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  emit_break(masm);\n@@ -694,2 +692,1 @@\n-static inline void z_emit16(CodeBuffer &cbuf, long value) {\n-  C2_MacroAssembler _masm(&cbuf);\n+static inline void z_emit16(C2_MacroAssembler *masm, long value) {\n@@ -699,2 +696,1 @@\n-static inline void z_emit32(CodeBuffer &cbuf, long value) {\n-  C2_MacroAssembler _masm(&cbuf);\n+static inline void z_emit32(C2_MacroAssembler *masm, long value) {\n@@ -704,2 +700,1 @@\n-static inline void z_emit48(CodeBuffer &cbuf, long value) {\n-  C2_MacroAssembler _masm(&cbuf);\n+static inline void z_emit48(C2_MacroAssembler *masm, long value) {\n@@ -709,1 +704,1 @@\n-static inline unsigned int z_emit_inst(CodeBuffer &cbuf, long value) {\n+static inline unsigned int z_emit_inst(C2_MacroAssembler *masm, long value) {\n@@ -715,1 +710,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -721,3 +715,1 @@\n-static inline void z_assert_aligned(CodeBuffer &cbuf, int disp, Register index, Register base, int alignment) {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+static inline void z_assert_aligned(C2_MacroAssembler *masm, int disp, Register index, Register base, int alignment) {\n@@ -730,1 +722,1 @@\n-int emit_call_reloc(C2_MacroAssembler &_masm, intptr_t entry_point, relocInfo::relocType rtype,\n+int emit_call_reloc(C2_MacroAssembler *masm, intptr_t entry_point, relocInfo::relocType rtype,\n@@ -743,1 +735,1 @@\n-    if (call_addr == NULL) {\n+    if (call_addr == nullptr) {\n@@ -761,1 +753,1 @@\n-static int emit_call_reloc(C2_MacroAssembler &_masm, intptr_t entry_point, RelocationHolder const& rspec) {\n+static int emit_call_reloc(C2_MacroAssembler *masm, intptr_t entry_point, RelocationHolder const& rspec) {\n@@ -793,2 +785,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -838,1 +829,1 @@\n-  if (C->stub_function() == NULL) {\n+  if (C->stub_function() == nullptr) {\n@@ -844,1 +835,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -846,1 +837,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -893,1 +883,1 @@\n-  if (C->stub_function() == NULL) {\n+  if (C->stub_function() == nullptr) {\n@@ -895,1 +885,1 @@\n-    bs->nmethod_entry_barrier(&_masm);\n+    bs->nmethod_entry_barrier(masm);\n@@ -898,1 +888,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -924,2 +914,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -993,1 +982,1 @@\n-static unsigned int z_ld_st_helper(CodeBuffer *cbuf, const char *op_str, unsigned long opcode,\n+static unsigned int z_ld_st_helper(C2_MacroAssembler *masm, const char *op_str, unsigned long opcode,\n@@ -996,1 +985,1 @@\n-  if (cbuf) {\n+  if (masm) {\n@@ -998,1 +987,1 @@\n-      return z_emit_inst(*cbuf, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 48) |\n+      return z_emit_inst(masm, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 48) |\n@@ -1001,1 +990,1 @@\n-      return z_emit_inst(*cbuf, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 32) |\n+      return z_emit_inst(masm, opcode | Assembler::reg(Matcher::_regEncode[reg], 8, 32) |\n@@ -1014,3 +1003,2 @@\n-static unsigned int z_mvc_helper(CodeBuffer *cbuf, int len, int dst_off, int src_off, bool do_print, outputStream *os) {\n-  if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n+static unsigned int z_mvc_helper(C2_MacroAssembler *masm, int len, int dst_off, int src_off, bool do_print, outputStream *os) {\n+  if (masm) {\n@@ -1029,1 +1017,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream *os) const {\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream *os) const {\n@@ -1059,1 +1047,1 @@\n-  const char   *mnemo = NULL;\n+  const char   *mnemo = nullptr;\n@@ -1069,1 +1057,1 @@\n-      return z_mvc_helper(cbuf, is64 ? 8 : 4, dst_offset, src_offset, print, os);\n+      return z_mvc_helper(masm, is64 ? 8 : 4, dst_offset, src_offset, print, os);\n@@ -1074,2 +1062,2 @@\n-      return z_ld_st_helper(cbuf, \"LG  \", LG_ZOPC, r0, src_offset, print, os) +\n-             z_ld_st_helper(cbuf, \"STG \", STG_ZOPC, r0, dst_offset, print, os);\n+      return z_ld_st_helper(masm, \"LG  \", LG_ZOPC, r0, src_offset, print, os) +\n+             z_ld_st_helper(masm, \"STG \", STG_ZOPC, r0, dst_offset, print, os);\n@@ -1078,2 +1066,2 @@\n-    return z_ld_st_helper(cbuf, \"LY   \", LY_ZOPC, r0, src_offset, print, os) +\n-           z_ld_st_helper(cbuf, \"STY  \", STY_ZOPC, r0, dst_offset, print, os);\n+    return z_ld_st_helper(masm, \"LY   \", LY_ZOPC, r0, src_offset, print, os) +\n+           z_ld_st_helper(masm, \"STY  \", STY_ZOPC, r0, dst_offset, print, os);\n@@ -1089,2 +1077,1 @@\n-    if (cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (masm) {\n@@ -1111,1 +1098,1 @@\n-      return z_ld_st_helper(cbuf, \"STG \", STG_ZOPC, src_lo, dst_offset, print, os);\n+      return z_ld_st_helper(masm, \"STG \", STG_ZOPC, src_lo, dst_offset, print, os);\n@@ -1118,1 +1105,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, src_lo, dst_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, src_lo, dst_offset, print, os);\n@@ -1131,1 +1118,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, dst_lo, src_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, dst_lo, src_offset, print, os);\n@@ -1136,2 +1123,1 @@\n-    if (cbuf) {\n-      C2_MacroAssembler _masm(cbuf);\n+    if (masm) {\n@@ -1160,1 +1146,1 @@\n-      return z_ld_st_helper(cbuf, mnemo, opc, src_lo, dst_offset, print, os);\n+      return z_ld_st_helper(masm, mnemo, opc, src_lo, dst_offset, print, os);\n@@ -1166,1 +1152,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, src_lo, dst_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, src_lo, dst_offset, print, os);\n@@ -1177,1 +1163,1 @@\n-      return z_ld_st_helper(cbuf, mnemo, opc, dst_lo, src_offset, print, os);\n+      return z_ld_st_helper(masm, mnemo, opc, dst_lo, src_offset, print, os);\n@@ -1183,1 +1169,1 @@\n-    return z_ld_st_helper(cbuf, mnemo, opc, dst_lo, src_offset, print, os);\n+    return z_ld_st_helper(masm, mnemo, opc, dst_lo, src_offset, print, os);\n@@ -1202,1 +1188,1 @@\n-    implementation(NULL, ra_, false, os);\n+    implementation(nullptr, ra_, false, os);\n@@ -1219,2 +1205,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, NULL);\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation(masm, ra_, false, nullptr);\n@@ -1224,1 +1210,1 @@\n-  return implementation(NULL, ra_, true, NULL);\n+  return implementation(nullptr, ra_, true, nullptr);\n@@ -1235,3 +1221,1 @@\n-void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc * ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc * ra_) const {\n@@ -1240,1 +1224,1 @@\n-    rem_space = cbuf.insts()->remaining();\n+    rem_space = __ code()->insts()->remaining();\n@@ -1252,1 +1236,1 @@\n-      int rem_space2 = cbuf.insts()->remaining();\n+      int rem_space2 = __ code()->insts()->remaining();\n@@ -1275,3 +1259,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n-\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1343,2 +1325,1 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  C2_MacroAssembler _masm(&cbuf);\n+void MachUEPNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1405,2 +1386,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -1444,1 +1425,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer &cbuf) {\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler *masm) {\n@@ -1446,1 +1427,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1449,1 +1429,1 @@\n-  if (base == NULL) {\n+  if (base == nullptr) {\n@@ -1466,2 +1446,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n-  C2_MacroAssembler _masm(&cbuf);\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm) {\n@@ -1470,1 +1449,1 @@\n-  if (base == NULL) {\n+  if (base == nullptr) {\n@@ -1536,1 +1515,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1540,1 +1519,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1605,1 +1584,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -1744,1 +1723,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1750,1 +1728,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1758,1 +1735,1 @@\n-    z_emit16(cbuf, $primary |\n+    z_emit16(masm, $primary |\n@@ -1765,1 +1742,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1772,1 +1749,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1780,1 +1757,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1787,1 +1764,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1794,1 +1771,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1802,1 +1779,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1809,1 +1786,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1815,1 +1792,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1822,1 +1799,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1831,1 +1808,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1840,1 +1817,1 @@\n-    z_emit32(cbuf, $primary |\n+    z_emit32(masm, $primary |\n@@ -1847,1 +1824,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1855,1 +1832,1 @@\n-    z_emit48(cbuf, $primary |\n+    z_emit48(masm, $primary |\n@@ -1868,1 +1845,1 @@\n-    z_emit_inst(cbuf, $primary |\n+    z_emit_inst(masm, $primary |\n@@ -1875,1 +1852,1 @@\n-    z_emit_inst(cbuf, $primary |\n+    z_emit_inst(masm, $primary |\n@@ -1886,1 +1863,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1892,1 +1869,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1904,1 +1881,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1910,1 +1887,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1924,1 +1901,1 @@\n-      z_emit_inst(cbuf, $secondary |\n+      z_emit_inst(masm, $secondary |\n@@ -1930,1 +1907,1 @@\n-      z_emit_inst(cbuf, $primary |\n+      z_emit_inst(masm, $primary |\n@@ -1936,1 +1913,0 @@\n-        C2_MacroAssembler _masm(&cbuf);\n@@ -1939,1 +1915,1 @@\n-        z_emit_inst(cbuf, $secondary |\n+        z_emit_inst(masm, $secondary |\n@@ -1948,1 +1924,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1951,1 +1926,1 @@\n-    \/\/ 'p' is `NULL' when this encoding class is used only to\n+    \/\/ 'p' is `nullptr' when this encoding class is used only to\n@@ -1956,1 +1931,1 @@\n-    Label& l = (NULL == p) ? d : *(p);\n+    Label& l = (nullptr == p) ? d : *(p);\n@@ -1961,1 +1936,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1964,1 +1938,1 @@\n-    \/\/ 'p' is `NULL' when this encoding class is used only to\n+    \/\/ 'p' is `nullptr' when this encoding class is used only to\n@@ -1969,1 +1943,1 @@\n-    Label& l = (NULL == p) ? d : *(p);\n+    Label& l = (nullptr == p) ? d : *(p);\n@@ -1974,1 +1948,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1977,1 +1950,1 @@\n-    \/\/ 'p' is `NULL' when this encoding class is used only to\n+    \/\/ 'p' is `nullptr' when this encoding class is used only to\n@@ -1982,1 +1955,1 @@\n-    Label& l = (NULL == p) ? d : *(p);\n+    Label& l = (nullptr == p) ? d : *(p);\n@@ -1987,1 +1960,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -1990,1 +1962,1 @@\n-    \/\/ 'p' is `NULL' when this encoding class is used only to\n+    \/\/ 'p' is `nullptr' when this encoding class is used only to\n@@ -1995,1 +1967,1 @@\n-    Label& l = (NULL == p) ? d : *(p);\n+    Label& l = (nullptr == p) ? d : *(p);\n@@ -2000,1 +1972,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2003,1 +1974,1 @@\n-    \/\/ 'p' is `NULL' when this encoding class is used only to\n+    \/\/ 'p' is `nullptr' when this encoding class is used only to\n@@ -2008,1 +1979,1 @@\n-    Label& l = (NULL == p) ? d : *(p);\n+    Label& l = (nullptr == p) ? d : *(p);\n@@ -2024,1 +1995,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2027,1 +1997,1 @@\n-    \/\/ 'p' is `NULL' when this encoding class is used only to\n+    \/\/ 'p' is `nullptr' when this encoding class is used only to\n@@ -2032,1 +2002,1 @@\n-    Label& l = (NULL == p) ? d : *(p);\n+    Label& l = (nullptr == p) ? d : *(p);\n@@ -2050,1 +2020,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2053,1 +2022,1 @@\n-    \/\/ 'p' is `NULL' when this encoding class is used only to\n+    \/\/ 'p' is `nullptr' when this encoding class is used only to\n@@ -2058,1 +2027,1 @@\n-    Label& l = (NULL == p) ? d : *(p);\n+    Label& l = (nullptr == p) ? d : *(p);\n@@ -2075,1 +2044,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2078,1 +2046,1 @@\n-    \/\/ 'p' is `NULL' when this encoding class is used only to\n+    \/\/ 'p' is `nullptr' when this encoding class is used only to\n@@ -2083,1 +2051,1 @@\n-    Label& l = (NULL == p) ? d : *(p);\n+    Label& l = (nullptr == p) ? d : *(p);\n@@ -2102,2 +2070,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n-\n@@ -2115,1 +2081,1 @@\n-    if (call_addr == NULL) {\n+    if (call_addr == nullptr) {\n@@ -2130,1 +2096,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2134,1 +2099,1 @@\n-      ret_offset = emit_call_reloc(_masm, $meth$$method,\n+      ret_offset = emit_call_reloc(masm, $meth$$method,\n@@ -2137,1 +2102,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -2139,1 +2104,1 @@\n-        ret_offset = emit_call_reloc(_masm, $meth$$method,\n+        ret_offset = emit_call_reloc(masm, $meth$$method,\n@@ -2142,1 +2107,1 @@\n-        ret_offset = emit_call_reloc(_masm, $meth$$method,\n+        ret_offset = emit_call_reloc(masm, $meth$$method,\n@@ -2146,1 +2111,1 @@\n-    assert(__ inst_mark() != NULL, \"emit_call_reloc must set_inst_mark()\");\n+    assert(__ inst_mark() != nullptr, \"emit_call_reloc must set_inst_mark()\");\n@@ -2149,2 +2114,3 @@\n-      address stub = CompiledStaticCall::emit_to_interp_stub(cbuf);\n-      if (stub == NULL) {\n+      address stub = CompiledStaticCall::emit_to_interp_stub(masm);\n+      if (stub == nullptr) {\n+        __ clear_inst_mark();\n@@ -2155,0 +2121,2 @@\n+\n+    __ clear_inst_mark();\n@@ -2159,1 +2127,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2165,1 +2132,1 @@\n-      address virtual_call_oop_addr = NULL;\n+      address virtual_call_oop_addr = nullptr;\n@@ -2177,1 +2144,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -2181,1 +2148,2 @@\n-      ret_off += emit_call_reloc(_masm, $meth$$method, relocInfo::none, ra_);\n+      ret_off += emit_call_reloc(masm, $meth$$method, relocInfo::none, ra_);\n+      __ clear_inst_mark();\n@@ -2214,1 +2182,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2235,1 +2202,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2252,1 +2218,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2269,1 +2234,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2278,1 +2242,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2287,1 +2250,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2303,1 +2265,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -2932,1 +2893,1 @@\n-\/\/ Pointer Immediate: NULL\n+\/\/ Pointer Immediate: nullptr\n@@ -2969,1 +2930,1 @@\n-\/\/ Narrow NULL Pointer Immediate\n+\/\/ Narrow nullptr Pointer Immediate\n@@ -3386,1 +3347,1 @@\n-  predicate(CompressedOops::shift() == 0 && _leaf->as_EncodeP()->in(0) == NULL);\n+  predicate(CompressedOops::shift() == 0 && _leaf->as_EncodeP()->in(0) == nullptr);\n@@ -3394,2 +3355,2 @@\n-  predicate(CompressedOops::base() == NULL && CompressedOops::shift() == 0 &&\n-            _leaf->as_DecodeN()->in(0) == NULL);\n+  predicate(CompressedOops::base() == nullptr && CompressedOops::shift() == 0 &&\n+            _leaf->as_DecodeN()->in(0) == nullptr);\n@@ -4239,1 +4200,1 @@\n-    if (long_address == NULL) {\n+    if (long_address == nullptr) {\n@@ -4295,1 +4256,1 @@\n-      if (const_toc_addr == NULL) {\n+      if (const_toc_addr == nullptr) {\n@@ -4302,1 +4263,1 @@\n-      if (long_address == NULL) {\n+      if (long_address == nullptr) {\n@@ -4317,1 +4278,1 @@\n-  format %{ \"XGR     $dst,$dst\\t # NULL ptr\" %}\n+  format %{ \"XGR     $dst,$dst\\t # nullptr ptr\" %}\n@@ -4663,1 +4624,1 @@\n-  predicate(false && (CompressedOops::base()==NULL)&&(CompressedOops::shift()==0));\n+  predicate(false && (CompressedOops::base()==nullptr)&&(CompressedOops::shift()==0));\n@@ -4674,1 +4635,1 @@\n-  predicate(false && (CompressedKlassPointers::base()==NULL)&&(CompressedKlassPointers::shift()==0));\n+  predicate(false && (CompressedKlassPointers::base()==nullptr)&&(CompressedKlassPointers::shift()==0));\n@@ -4702,1 +4663,1 @@\n-  predicate(CompressedOops::base() == NULL || !ExpandLoadingBaseDecode);\n+  predicate(CompressedOops::base() == nullptr || !ExpandLoadingBaseDecode);\n@@ -4726,1 +4687,1 @@\n-            (CompressedOops::base()== NULL || !ExpandLoadingBaseDecode_NN));\n+            (CompressedOops::base()== nullptr || !ExpandLoadingBaseDecode_NN));\n@@ -4752,1 +4713,1 @@\n-    format %{ \"decodeN  $dst = ($src == 0) ? NULL : ($src << 3) + $base + pow2_offset\\t # (decode cOop)\" %}\n+    format %{ \"decodeN  $dst = ($src == 0) ? nullptr : ($src << 3) + $base + pow2_offset\\t # (decode cOop)\" %}\n@@ -4777,1 +4738,1 @@\n-  predicate(CompressedOops::base() != NULL && ExpandLoadingBaseDecode);\n+  predicate(CompressedOops::base() != nullptr && ExpandLoadingBaseDecode);\n@@ -4793,1 +4754,1 @@\n-            CompressedOops::base() != NULL && ExpandLoadingBaseDecode_NN);\n+            CompressedOops::base() != nullptr && ExpandLoadingBaseDecode_NN);\n@@ -6072,1 +6033,1 @@\n-  predicate( PreferLAoverADD && CompressedOops::base() == NULL && CompressedOops::shift() == 0);\n+  predicate( PreferLAoverADD && CompressedOops::base() == nullptr && CompressedOops::shift() == 0);\n@@ -6094,1 +6055,1 @@\n-  predicate( PreferLAoverADD && CompressedOops::base() == NULL && CompressedOops::shift() == 0);\n+  predicate( PreferLAoverADD && CompressedOops::base() == nullptr && CompressedOops::shift() == 0);\n@@ -8430,1 +8391,1 @@\n-  predicate(CompressedOops::base() == NULL && CompressedOops::shift() == 0);\n+  predicate(CompressedOops::base() == nullptr && CompressedOops::shift() == 0);\n@@ -9720,1 +9681,1 @@\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -9723,0 +9684,1 @@\n+    __ clear_inst_mark();\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":135,"deletions":173,"binary":false,"changes":308,"status":"modified"},{"patch":"@@ -4226,0 +4226,1 @@\n+  InstructionMark im(this);\n@@ -4234,0 +4235,1 @@\n+  InstructionMark im(this);\n@@ -4669,0 +4671,1 @@\n+  InstructionMark im(this);\n@@ -4686,0 +4689,1 @@\n+  InstructionMark im(this);\n@@ -4703,0 +4707,1 @@\n+  InstructionMark im(this);\n@@ -4720,0 +4725,1 @@\n+  InstructionMark im(this);\n@@ -4737,0 +4743,1 @@\n+  InstructionMark im(this);\n@@ -4761,0 +4768,1 @@\n+  InstructionMark im(this);\n@@ -4785,0 +4793,1 @@\n+  InstructionMark im(this);\n@@ -4802,0 +4811,1 @@\n+  InstructionMark im(this);\n@@ -13224,0 +13234,1 @@\n+  InstructionMark im(this);\n@@ -13229,0 +13240,1 @@\n+  InstructionMark im(this);\n@@ -13234,0 +13246,1 @@\n+  InstructionMark im(this);\n@@ -13239,0 +13252,1 @@\n+  InstructionMark im(this);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-#define __ _masm.\n+#define __ _masm->\n@@ -123,1 +123,1 @@\n-IntelJccErratumAlignment::IntelJccErratumAlignment(MacroAssembler& masm, int jcc_size) :\n+IntelJccErratumAlignment::IntelJccErratumAlignment(MacroAssembler* masm, int jcc_size) :\n","filename":"src\/hotspot\/cpu\/x86\/c2_intelJccErratum_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -57,1 +57,1 @@\n-  MacroAssembler& _masm;\n+  MacroAssembler* _masm;\n@@ -63,1 +63,1 @@\n-  IntelJccErratumAlignment(MacroAssembler& masm, int jcc_size);\n+  IntelJccErratumAlignment(MacroAssembler* masm, int jcc_size);\n","filename":"src\/hotspot\/cpu\/x86\/c2_intelJccErratum_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-#define __ _masm.\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n+#define __ masm->\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler *masm, address mark) {\n@@ -45,1 +45,1 @@\n-    mark = cbuf.insts_mark();  \/\/ Get mark within main instrs section.\n+    mark = __ inst_mark();  \/\/ Get mark within main instrs section.\n@@ -48,4 +48,0 @@\n-  \/\/ Note that the code buffer's insts_mark is always relative to insts.\n-  \/\/ That's why we must use the macroassembler to generate a stub.\n-  MacroAssembler _masm(&cbuf);\n-\n","filename":"src\/hotspot\/cpu\/x86\/compiledIC_x86.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n@@ -64,1 +64,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoah_x86_32.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n@@ -65,1 +65,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n@@ -84,1 +84,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n@@ -106,1 +106,1 @@\n-    ShenandoahBarrierSet::assembler()->cmpxchg_oop(&_masm,\n+    ShenandoahBarrierSet::assembler()->cmpxchg_oop(masm,\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shenandoah\/shenandoah_x86_64.ad","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -378,1 +378,1 @@\n-extern void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+extern void vec_spill_helper(C2_MacroAssembler *masm, bool is_load,\n@@ -440,1 +440,2 @@\n-    vec_spill_helper(__ code(), false \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n+    C2_MacroAssembler c2_masm(__ code());\n+    vec_spill_helper(&c2_masm, false \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n@@ -446,1 +447,2 @@\n-    vec_spill_helper(__ code(), true \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n+    C2_MacroAssembler c2_masm(__ code());\n+    vec_spill_helper(&c2_masm, true \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/x\/xBarrierSetAssembler_x86.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-static void x_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n+static void x_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, uint8_t barrier_data) {\n@@ -42,1 +42,1 @@\n-    IntelJccErratumAlignment intel_alignment(_masm, 10 \/* jcc_size *\/);\n+    IntelJccErratumAlignment intel_alignment(masm, 10 \/* jcc_size *\/);\n@@ -49,1 +49,1 @@\n-static void x_load_barrier_cmpxchg(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, Label& good) {\n+static void x_load_barrier_cmpxchg(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref, Register tmp, Label& good) {\n@@ -52,1 +52,1 @@\n-    IntelJccErratumAlignment intel_alignment(_masm, 10 \/* jcc_size *\/);\n+    IntelJccErratumAlignment intel_alignment(masm, 10 \/* jcc_size *\/);\n@@ -57,1 +57,1 @@\n-    IntelJccErratumAlignment intel_alignment(_masm, 5 \/* jcc_size *\/);\n+    IntelJccErratumAlignment intel_alignment(masm, 5 \/* jcc_size *\/);\n@@ -63,1 +63,1 @@\n-static void x_cmpxchg_common(MacroAssembler& _masm, const MachNode* node, Register mem_reg, Register newval, Register tmp) {\n+static void x_cmpxchg_common(MacroAssembler* masm, const MachNode* node, Register mem_reg, Register newval, Register tmp) {\n@@ -76,1 +76,1 @@\n-    x_load_barrier_cmpxchg(_masm, node, mem, rax, tmp, good);\n+    x_load_barrier_cmpxchg(masm, node, mem, rax, tmp, good);\n@@ -99,1 +99,1 @@\n-    x_load_barrier(_masm, this, $mem$$Address, $dst$$Register, noreg \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, $mem$$Address, $dst$$Register, noreg \/* tmp *\/, barrier_data());\n@@ -115,1 +115,1 @@\n-    x_cmpxchg_common(_masm, this, $mem$$Register, $newval$$Register, $tmp$$Register);\n+    x_cmpxchg_common(masm, this, $mem$$Register, $newval$$Register, $tmp$$Register);\n@@ -134,1 +134,1 @@\n-    x_cmpxchg_common(_masm, this, $mem$$Register, $newval$$Register, $tmp$$Register);\n+    x_cmpxchg_common(masm, this, $mem$$Register, $newval$$Register, $tmp$$Register);\n@@ -154,1 +154,1 @@\n-    x_load_barrier(_masm, this, Address(noreg, 0), $newval$$Register, noreg \/* tmp *\/, barrier_data());\n+    x_load_barrier(masm, this, Address(noreg, 0), $newval$$Register, noreg \/* tmp *\/, barrier_data());\n","filename":"src\/hotspot\/cpu\/x86\/gc\/x\/x_x86_64.ad","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -359,1 +359,1 @@\n-  IntelJccErratumAlignment intel_alignment(*masm, size);\n+  IntelJccErratumAlignment intel_alignment(masm, size);\n@@ -1187,1 +1187,1 @@\n-extern void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+extern void vec_spill_helper(C2_MacroAssembler *masm, bool is_load,\n@@ -1249,1 +1249,2 @@\n-    vec_spill_helper(__ code(), false \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n+    C2_MacroAssembler c2_masm(__ code());\n+    vec_spill_helper(&c2_masm, false \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n@@ -1255,1 +1256,2 @@\n-    vec_spill_helper(__ code(), true \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n+    C2_MacroAssembler c2_masm(__ code());\n+    vec_spill_helper(&c2_masm, true \/* is_load *\/, _spill_offset, opto_reg, ideal_reg, tty);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-static void z_color(MacroAssembler& _masm, const MachNode* node, Register ref) {\n+static void z_color(MacroAssembler* masm, const MachNode* node, Register ref) {\n@@ -44,1 +44,1 @@\n-static void z_uncolor(MacroAssembler& _masm, const MachNode* node, Register ref) {\n+static void z_uncolor(MacroAssembler* masm, const MachNode* node, Register ref) {\n@@ -49,1 +49,1 @@\n-static void z_keep_alive_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref) {\n+static void z_keep_alive_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref) {\n@@ -56,1 +56,1 @@\n-  z_uncolor(_masm, node, ref);\n+  z_uncolor(masm, node, ref);\n@@ -61,2 +61,2 @@\n-static void z_load_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register ref) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_load_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register ref) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -68,1 +68,1 @@\n-    z_keep_alive_load_barrier(_masm, node, ref_addr, ref);\n+    z_keep_alive_load_barrier(masm, node, ref_addr, ref);\n@@ -72,1 +72,1 @@\n-  z_uncolor(_masm, node, ref);\n+  z_uncolor(masm, node, ref);\n@@ -78,1 +78,1 @@\n-    IntelJccErratumAlignment intel_alignment(_masm, 6);\n+    IntelJccErratumAlignment intel_alignment(masm, 6);\n@@ -84,2 +84,2 @@\n-static void z_store_barrier(MacroAssembler& _masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, bool is_atomic) {\n-  Assembler::InlineSkippedInstructionsCounter skipped_counter(&_masm);\n+static void z_store_barrier(MacroAssembler* masm, const MachNode* node, Address ref_addr, Register rnew_zaddress, Register rnew_zpointer, bool is_atomic) {\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -90,1 +90,1 @@\n-      z_color(_masm, node, rnew_zpointer);\n+      z_color(masm, node, rnew_zpointer);\n@@ -96,1 +96,1 @@\n-    bs_asm->store_barrier_fast(&_masm, ref_addr, rnew_zaddress, rnew_zpointer, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n+    bs_asm->store_barrier_fast(masm, ref_addr, rnew_zaddress, rnew_zpointer, true \/* in_nmethod *\/, is_atomic, *stub->entry(), *stub->continuation());\n@@ -115,1 +115,1 @@\n-    z_load_barrier(_masm, this, $mem$$Address, $dst$$Register);\n+    z_load_barrier(masm, this, $mem$$Address, $dst$$Register);\n@@ -147,1 +147,1 @@\n-    z_store_barrier(_masm, this, $mem$$Address, $src$$Register, $tmp$$Register, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, $mem$$Address, $src$$Register, $tmp$$Register, false \/* is_atomic *\/);\n@@ -163,1 +163,1 @@\n-    z_store_barrier(_masm, this, $mem$$Address, noreg, $tmp$$Register, false \/* is_atomic *\/);\n+    z_store_barrier(masm, this, $mem$$Address, noreg, $tmp$$Register, false \/* is_atomic *\/);\n@@ -185,2 +185,2 @@\n-    z_store_barrier(_masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval$$Register);\n+    z_store_barrier(masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval$$Register);\n@@ -189,1 +189,1 @@\n-    z_uncolor(_masm, this, $oldval$$Register);\n+    z_uncolor(masm, this, $oldval$$Register);\n@@ -209,2 +209,2 @@\n-    z_store_barrier(_masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n-    z_color(_masm, this, $oldval$$Register);\n+    z_store_barrier(masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n+    z_color(masm, this, $oldval$$Register);\n@@ -230,1 +230,1 @@\n-    z_store_barrier(_masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n+    z_store_barrier(masm, this, mem_addr, $newval$$Register, $tmp$$Register, true \/* is_atomic *\/);\n@@ -233,1 +233,1 @@\n-    z_uncolor(_masm, this, $newval$$Register);\n+    z_uncolor(masm, this, $newval$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/z_x86_64.ad","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1448,2 +1448,1 @@\n-    CodeBuffer* cbuf = masm->code_section()->outer();\n-    address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, __ pc());\n+    address stub = CompiledStaticCall::emit_to_interp_stub(masm, __ pc());\n@@ -1485,2 +1484,1 @@\n-  CodeBuffer* cbuf = masm->code_section()->outer();\n-  address stub = CompiledStaticCall::emit_to_interp_stub(*cbuf, __ pc());\n+  address stub = CompiledStaticCall::emit_to_interp_stub(masm, __ pc());\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1190,2 +1190,2 @@\n-  static int emit_exception_handler(CodeBuffer &cbuf);\n-  static int emit_deopt_handler(CodeBuffer& cbuf);\n+  static int emit_exception_handler(C2_MacroAssembler *masm);\n+  static int emit_deopt_handler(C2_MacroAssembler* masm);\n@@ -1309,1 +1309,1 @@\n-int HandlerImpl::emit_exception_handler(CodeBuffer& cbuf) {\n+int HandlerImpl::emit_exception_handler(C2_MacroAssembler* masm) {\n@@ -1313,1 +1313,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1315,1 +1314,1 @@\n-  if (base == NULL) {\n+  if (base == nullptr) {\n@@ -1327,1 +1326,1 @@\n-int HandlerImpl::emit_deopt_handler(CodeBuffer& cbuf) {\n+int HandlerImpl::emit_deopt_handler(C2_MacroAssembler* masm) {\n@@ -1331,1 +1330,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -1333,1 +1331,1 @@\n-  if (base == NULL) {\n+  if (base == nullptr) {\n@@ -2192,1 +2190,1 @@\n-  return NULL;\n+  return nullptr;\n@@ -2361,1 +2359,1 @@\n-    if (n->in(1) == NULL || n->in(2) == NULL) {\n+    if (n->in(1) == nullptr || n->in(2) == nullptr) {\n@@ -2428,1 +2426,1 @@\n-  if (n != NULL && m != NULL) {\n+  if (n != nullptr && m != nullptr) {\n@@ -2535,1 +2533,1 @@\n-static void vec_mov_helper(CodeBuffer *cbuf, int src_lo, int dst_lo,\n+static void vec_mov_helper(C2_MacroAssembler *masm, int src_lo, int dst_lo,\n@@ -2541,2 +2539,1 @@\n-  if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -2593,1 +2590,1 @@\n-void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+void vec_spill_helper(C2_MacroAssembler *masm, bool is_load,\n@@ -2595,2 +2592,1 @@\n-  if (cbuf) {\n-    C2_MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -2754,2 +2750,1 @@\n-  void MachNopNode::emit(CodeBuffer &cbuf, PhaseRegAlloc*) const {\n-    C2_MacroAssembler _masm(&cbuf);\n+  void MachNopNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc*) const {\n@@ -2769,2 +2764,1 @@\n-  void MachBreakpointNode::emit(CodeBuffer &cbuf, PhaseRegAlloc* ra_) const {\n-    C2_MacroAssembler _masm(&cbuf);\n+  void MachBreakpointNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc* ra_) const {\n@@ -2783,1 +2777,0 @@\n-    C2_MacroAssembler _masm(&cbuf);\n@@ -7464,1 +7457,1 @@\n-  predicate(n->bottom_type()->isa_vectmask() == NULL &&\n+  predicate(n->bottom_type()->isa_vectmask() == nullptr &&\n@@ -7484,1 +7477,1 @@\n-            n->bottom_type()->isa_vectmask() == NULL &&\n+            n->bottom_type()->isa_vectmask() == nullptr &&\n@@ -7524,1 +7517,1 @@\n-  predicate(n->bottom_type()->isa_vectmask() == NULL &&\n+  predicate(n->bottom_type()->isa_vectmask() == nullptr &&\n@@ -7544,1 +7537,1 @@\n-  predicate(n->bottom_type()->isa_vectmask() == NULL &&\n+  predicate(n->bottom_type()->isa_vectmask() == nullptr &&\n@@ -7565,1 +7558,1 @@\n-  predicate(n->bottom_type()->isa_vectmask() == NULL &&\n+  predicate(n->bottom_type()->isa_vectmask() == nullptr &&\n@@ -7592,1 +7585,1 @@\n-  predicate((n->bottom_type()->isa_vectmask() == NULL &&\n+  predicate((n->bottom_type()->isa_vectmask() == nullptr &&\n@@ -7808,1 +7801,1 @@\n-            n->in(2)->bottom_type()->isa_vectmask() == NULL &&\n+            n->in(2)->bottom_type()->isa_vectmask() == nullptr &&\n@@ -7822,1 +7815,1 @@\n-            n->in(2)->bottom_type()->isa_vectmask() == NULL &&\n+            n->in(2)->bottom_type()->isa_vectmask() == nullptr &&\n@@ -7836,1 +7829,1 @@\n-            n->in(2)->bottom_type()->isa_vectmask() == NULL);\n+            n->in(2)->bottom_type()->isa_vectmask() == nullptr);\n@@ -8053,1 +8046,1 @@\n-  predicate(n->bottom_type()->isa_vectmask() == NULL && !VM_Version::supports_avx512vlbw());\n+  predicate(n->bottom_type()->isa_vectmask() == nullptr && !VM_Version::supports_avx512vlbw());\n@@ -8093,1 +8086,1 @@\n-  predicate(Matcher::vector_length(n) < 64 && n->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  predicate(Matcher::vector_length(n) < 64 && n->in(1)->bottom_type()->isa_vectmask() == nullptr);\n@@ -8111,1 +8104,1 @@\n-  predicate(Matcher::vector_length(n) <= 16 && n->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  predicate(Matcher::vector_length(n) <= 16 && n->in(1)->bottom_type()->isa_vectmask() == nullptr);\n@@ -8134,1 +8127,1 @@\n-  predicate(UseAVX <= 2 && Matcher::vector_length(n) <= 8 && n->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  predicate(UseAVX <= 2 && Matcher::vector_length(n) <= 8 && n->in(1)->bottom_type()->isa_vectmask() == nullptr);\n@@ -8194,1 +8187,1 @@\n-  predicate(UseAVX > 2 && n->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  predicate(UseAVX > 2 && n->in(1)->bottom_type()->isa_vectmask() == nullptr);\n@@ -8210,1 +8203,1 @@\n-  predicate(UseAVX > 2 && n->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  predicate(UseAVX > 2 && n->in(1)->bottom_type()->isa_vectmask() == nullptr);\n@@ -9032,1 +9025,1 @@\n-  predicate(n->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  predicate(n->in(1)->bottom_type()->isa_vectmask() == nullptr);\n@@ -9048,1 +9041,1 @@\n-  predicate(n->in(1)->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  predicate(n->in(1)->in(1)->bottom_type()->isa_vectmask() == nullptr);\n@@ -9081,1 +9074,1 @@\n-  predicate(n->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  predicate(n->in(1)->bottom_type()->isa_vectmask() == nullptr);\n@@ -9097,1 +9090,1 @@\n-  predicate(n->in(1)->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  predicate(n->in(1)->in(1)->bottom_type()->isa_vectmask() == nullptr);\n@@ -9131,1 +9124,1 @@\n-  predicate(n->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  predicate(n->in(1)->bottom_type()->isa_vectmask() == nullptr);\n@@ -9148,1 +9141,1 @@\n-  predicate(n->in(1)->in(1)->bottom_type()->isa_vectmask() == NULL);\n+  predicate(n->in(1)->in(1)->bottom_type()->isa_vectmask() == nullptr);\n@@ -9985,1 +9978,1 @@\n-  predicate(n->bottom_type()->isa_vectmask() == NULL && Matcher::vector_length(n) <= 8);\n+  predicate(n->bottom_type()->isa_vectmask() == nullptr && Matcher::vector_length(n) <= 8);\n@@ -10000,1 +9993,1 @@\n-  predicate(n->bottom_type()->isa_vectmask() == NULL && Matcher::vector_length(n) > 8);\n+  predicate(n->bottom_type()->isa_vectmask() == nullptr && Matcher::vector_length(n) > 8);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":38,"deletions":45,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -255,1 +255,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -340,1 +340,1 @@\n-void emit_rm(CodeBuffer &cbuf, int f1, int f2, int f3) {\n+void emit_rm(C2_MacroAssembler *masm, int f1, int f2, int f3) {\n@@ -342,1 +342,1 @@\n-  cbuf.insts()->emit_int8(c);\n+  __ emit_int8(c);\n@@ -346,1 +346,1 @@\n-void emit_cc(CodeBuffer &cbuf, int f1, int f2) {\n+void emit_cc(C2_MacroAssembler *masm, int f1, int f2) {\n@@ -348,1 +348,1 @@\n-  cbuf.insts()->emit_int8(c);\n+  __ emit_int8(c);\n@@ -352,2 +352,2 @@\n-void emit_opcode(CodeBuffer &cbuf, int code) {\n-  cbuf.insts()->emit_int8((unsigned char) code);\n+void emit_opcode(C2_MacroAssembler *masm, int code) {\n+  __ emit_int8((unsigned char) code);\n@@ -357,3 +357,3 @@\n-void emit_opcode(CodeBuffer &cbuf, int code, relocInfo::relocType reloc, int offset = 0) {\n-  cbuf.relocate(cbuf.insts_mark() + offset, reloc);\n-  emit_opcode(cbuf, code);\n+void emit_opcode(C2_MacroAssembler *masm, int code, relocInfo::relocType reloc, int offset = 0) {\n+  __ relocate(__ inst_mark() + offset, reloc);\n+  emit_opcode(masm, code);\n@@ -363,2 +363,2 @@\n-void emit_d8(CodeBuffer &cbuf, int d8) {\n-  cbuf.insts()->emit_int8((unsigned char) d8);\n+void emit_d8(C2_MacroAssembler *masm, int d8) {\n+  __ emit_int8((unsigned char) d8);\n@@ -368,2 +368,2 @@\n-void emit_d16(CodeBuffer &cbuf, int d16) {\n-  cbuf.insts()->emit_int16(d16);\n+void emit_d16(C2_MacroAssembler *masm, int d16) {\n+  __ emit_int16(d16);\n@@ -373,2 +373,2 @@\n-void emit_d32(CodeBuffer &cbuf, int d32) {\n-  cbuf.insts()->emit_int32(d32);\n+void emit_d32(C2_MacroAssembler *masm, int d32) {\n+  __ emit_int32(d32);\n@@ -378,1 +378,1 @@\n-void emit_d32_reloc(CodeBuffer &cbuf, int d32, relocInfo::relocType reloc,\n+void emit_d32_reloc(C2_MacroAssembler *masm, int d32, relocInfo::relocType reloc,\n@@ -380,2 +380,2 @@\n-  cbuf.relocate(cbuf.insts_mark(), reloc, format);\n-  cbuf.insts()->emit_int32(d32);\n+  __ relocate(__ inst_mark(), reloc, format);\n+  __ emit_int32(d32);\n@@ -385,1 +385,1 @@\n-void emit_d32_reloc(CodeBuffer &cbuf, int d32, RelocationHolder const& rspec,\n+void emit_d32_reloc(C2_MacroAssembler *masm, int d32, RelocationHolder const& rspec,\n@@ -392,2 +392,2 @@\n-  cbuf.relocate(cbuf.insts_mark(), rspec, format);\n-  cbuf.insts()->emit_int32(d32);\n+  __ relocate(__ inst_mark(), rspec, format);\n+  __ emit_int32(d32);\n@@ -397,2 +397,2 @@\n-void store_to_stackslot(CodeBuffer &cbuf, int opcode, int rm_field, int disp) {\n-  emit_opcode( cbuf, opcode );               \/\/ (e.g., FILD   [ESP+src])\n+void store_to_stackslot(C2_MacroAssembler *masm, int opcode, int rm_field, int disp) {\n+  emit_opcode( masm, opcode );               \/\/ (e.g., FILD   [ESP+src])\n@@ -400,3 +400,3 @@\n-    emit_rm( cbuf, 0x01, rm_field, ESP_enc );  \/\/ R\/M byte\n-    emit_rm( cbuf, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n-    emit_d8 (cbuf, disp);     \/\/ Displacement  \/\/ R\/M byte\n+    emit_rm( masm, 0x01, rm_field, ESP_enc );  \/\/ R\/M byte\n+    emit_rm( masm, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n+    emit_d8 (masm, disp);     \/\/ Displacement  \/\/ R\/M byte\n@@ -404,3 +404,3 @@\n-    emit_rm( cbuf, 0x02, rm_field, ESP_enc );  \/\/ R\/M byte\n-    emit_rm( cbuf, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n-    emit_d32(cbuf, disp);     \/\/ Displacement  \/\/ R\/M byte\n+    emit_rm( masm, 0x02, rm_field, ESP_enc );  \/\/ R\/M byte\n+    emit_rm( masm, 0x00, ESP_enc, ESP_enc);    \/\/ SIB byte\n+    emit_d32(masm, disp);     \/\/ Displacement  \/\/ R\/M byte\n@@ -411,1 +411,1 @@\n-void encode_RegMem( CodeBuffer &cbuf, int reg_encoding, int base, int index, int scale, int displace, relocInfo::relocType disp_reloc ) {\n+void encode_RegMem( C2_MacroAssembler *masm, int reg_encoding, int base, int index, int scale, int displace, relocInfo::relocType disp_reloc ) {\n@@ -417,1 +417,1 @@\n-      emit_rm(cbuf, 0x0, reg_encoding, base);\n+      emit_rm(masm, 0x0, reg_encoding, base);\n@@ -422,2 +422,2 @@\n-        emit_rm(cbuf, 0x1, reg_encoding, base);\n-        emit_d8(cbuf, displace);\n+        emit_rm(masm, 0x1, reg_encoding, base);\n+        emit_d8(masm, displace);\n@@ -427,1 +427,1 @@\n-          emit_rm(cbuf, 0x0, reg_encoding, 0x5);\n+          emit_rm(masm, 0x0, reg_encoding, 0x5);\n@@ -430,1 +430,1 @@\n-            emit_d32_reloc(cbuf, displace, disp_reloc, 1);\n+            emit_d32_reloc(masm, displace, disp_reloc, 1);\n@@ -432,1 +432,1 @@\n-            emit_d32      (cbuf, displace);\n+            emit_d32      (masm, displace);\n@@ -436,1 +436,1 @@\n-          emit_rm(cbuf, 0x2, reg_encoding, base);\n+          emit_rm(masm, 0x2, reg_encoding, base);\n@@ -438,1 +438,1 @@\n-            emit_d32_reloc(cbuf, displace, disp_reloc, 1);\n+            emit_d32_reloc(masm, displace, disp_reloc, 1);\n@@ -440,1 +440,1 @@\n-            emit_d32      (cbuf, displace);\n+            emit_d32      (masm, displace);\n@@ -449,2 +449,2 @@\n-      emit_rm(cbuf, 0x0, reg_encoding, 0x4);\n-      emit_rm(cbuf, scale, index, base);\n+      emit_rm(masm, 0x0, reg_encoding, 0x4);\n+      emit_rm(masm, scale, index, base);\n@@ -455,3 +455,3 @@\n-        emit_rm(cbuf, 0x1, reg_encoding, 0x4);\n-        emit_rm(cbuf, scale, index, base);\n-        emit_d8(cbuf, displace);\n+        emit_rm(masm, 0x1, reg_encoding, 0x4);\n+        emit_rm(masm, scale, index, base);\n+        emit_d8(masm, displace);\n@@ -461,2 +461,2 @@\n-          emit_rm(cbuf, 0x2, reg_encoding, 0x4);\n-          emit_rm(cbuf, scale, index, 0x04);\n+          emit_rm(masm, 0x2, reg_encoding, 0x4);\n+          emit_rm(masm, scale, index, 0x04);\n@@ -464,2 +464,2 @@\n-          emit_rm(cbuf, 0x2, reg_encoding, 0x4);\n-          emit_rm(cbuf, scale, index, base);\n+          emit_rm(masm, 0x2, reg_encoding, 0x4);\n+          emit_rm(masm, scale, index, base);\n@@ -468,1 +468,1 @@\n-          emit_d32_reloc(cbuf, displace, disp_reloc, 1);\n+          emit_d32_reloc(masm, displace, disp_reloc, 1);\n@@ -470,1 +470,1 @@\n-          emit_d32      (cbuf, displace);\n+          emit_d32      (masm, displace);\n@@ -478,1 +478,1 @@\n-void encode_Copy( CodeBuffer &cbuf, int dst_encoding, int src_encoding ) {\n+void encode_Copy( C2_MacroAssembler *masm, int dst_encoding, int src_encoding ) {\n@@ -482,2 +482,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, dst_encoding, src_encoding );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, dst_encoding, src_encoding );\n@@ -487,1 +487,1 @@\n-void emit_cmpfp_fixup(MacroAssembler& _masm) {\n+void emit_cmpfp_fixup(MacroAssembler* masm) {\n@@ -507,1 +507,1 @@\n-void emit_cmpfp3(MacroAssembler& _masm, Register dst) {\n+void emit_cmpfp3(MacroAssembler* masm, Register dst) {\n@@ -530,1 +530,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -610,1 +610,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -612,1 +612,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -617,1 +616,1 @@\n-  __ verified_entry(framesize, C->output()->need_stack_bang(bangsize)?bangsize:0, C->in_24_bit_fp_mode(), C->stub_function() != NULL);\n+  __ verified_entry(framesize, C->output()->need_stack_bang(bangsize)?bangsize:0, C->in_24_bit_fp_mode(), C->stub_function() != nullptr);\n@@ -619,1 +618,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -667,1 +666,1 @@\n-void MachEpilogNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachEpilogNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -669,1 +668,0 @@\n-  MacroAssembler _masm(&cbuf);\n@@ -674,1 +672,1 @@\n-    _masm.vzeroupper();\n+    __ vzeroupper();\n@@ -678,1 +676,1 @@\n-    _masm.fldcw(ExternalAddress(StubRoutines::x86::addr_fpu_cntrl_wrd_std()));\n+    __ fldcw(ExternalAddress(StubRoutines::x86::addr_fpu_cntrl_wrd_std()));\n@@ -689,3 +687,3 @@\n-    emit_opcode(cbuf, 0x81); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d32(cbuf, framesize);\n+    emit_opcode(masm, 0x81); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d32(masm, framesize);\n@@ -693,3 +691,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, framesize);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, framesize);\n@@ -698,1 +696,1 @@\n-  emit_opcode(cbuf, 0x58 | EBP_enc);\n+  emit_opcode(masm, 0x58 | EBP_enc);\n@@ -706,1 +704,0 @@\n-    MacroAssembler masm(&cbuf);\n@@ -715,0 +712,1 @@\n+    __ set_inst_mark();\n@@ -716,0 +714,1 @@\n+    __ clear_inst_mark();\n@@ -752,1 +751,1 @@\n-static int impl_helper( CodeBuffer *cbuf, bool do_size, bool is_load, int offset, int reg,\n+static int impl_helper( C2_MacroAssembler *masm, bool do_size, bool is_load, int offset, int reg,\n@@ -754,3 +753,5 @@\n-  if( cbuf ) {\n-    emit_opcode  (*cbuf, opcode );\n-    encode_RegMem(*cbuf, Matcher::_regEncode[reg], ESP_enc, 0x4, 0, offset, relocInfo::none);\n+  if( masm ) {\n+    masm->set_inst_mark();\n+    emit_opcode  (masm, opcode );\n+    encode_RegMem(masm, Matcher::_regEncode[reg], ESP_enc, 0x4, 0, offset, relocInfo::none);\n+    masm->clear_inst_mark();\n@@ -773,1 +774,1 @@\n-static int impl_x_helper( CodeBuffer *cbuf, bool do_size, bool is_load,\n+static int impl_x_helper( C2_MacroAssembler *masm, bool do_size, bool is_load,\n@@ -781,2 +782,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -785,1 +785,1 @@\n-    _masm.set_managed();\n+    __ set_managed();\n@@ -832,1 +832,1 @@\n-static int impl_movx_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int dst_lo,\n+static int impl_movx_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int dst_lo,\n@@ -834,2 +834,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -837,1 +836,1 @@\n-    _masm.set_managed();\n+    __ set_managed();\n@@ -871,1 +870,1 @@\n-static int impl_movgpr2x_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int dst_lo,\n+static int impl_movgpr2x_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int dst_lo,\n@@ -874,2 +873,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -877,1 +875,1 @@\n-    _masm.set_managed();\n+    __ set_managed();\n@@ -889,1 +887,1 @@\n-static int impl_movx2gpr_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int dst_lo,\n+static int impl_movx2gpr_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int dst_lo,\n@@ -892,2 +890,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -895,1 +892,1 @@\n-    _masm.set_managed();\n+    __ set_managed();\n@@ -906,4 +903,4 @@\n-static int impl_mov_helper( CodeBuffer *cbuf, bool do_size, int src, int dst, int size, outputStream* st ) {\n-  if( cbuf ) {\n-    emit_opcode(*cbuf, 0x8B );\n-    emit_rm    (*cbuf, 0x3, Matcher::_regEncode[dst], Matcher::_regEncode[src] );\n+static int impl_mov_helper( C2_MacroAssembler *masm, bool do_size, int src, int dst, int size, outputStream* st ) {\n+  if( masm ) {\n+    emit_opcode(masm, 0x8B );\n+    emit_rm    (masm, 0x3, Matcher::_regEncode[dst], Matcher::_regEncode[src] );\n@@ -919,1 +916,1 @@\n-static int impl_fp_store_helper( CodeBuffer *cbuf, bool do_size, int src_lo, int src_hi, int dst_lo, int dst_hi,\n+static int impl_fp_store_helper( C2_MacroAssembler *masm, bool do_size, int src_lo, int src_hi, int dst_lo, int dst_hi,\n@@ -922,3 +919,3 @@\n-    if( cbuf ) {\n-      emit_opcode( *cbuf, 0xD9 );  \/\/ FLD (i.e., push it)\n-      emit_d8( *cbuf, 0xC0-1+Matcher::_regEncode[src_lo] );\n+    if( masm ) {\n+      emit_opcode( masm, 0xD9 );  \/\/ FLD (i.e., push it)\n+      emit_d8( masm, 0xC0-1+Matcher::_regEncode[src_lo] );\n@@ -946,1 +943,1 @@\n-  return impl_helper(cbuf,do_size,false,offset,st_op,op,op_str,size, st);\n+  return impl_helper(masm,do_size,false,offset,st_op,op,op_str,size, st);\n@@ -950,1 +947,1 @@\n-static void vec_mov_helper(CodeBuffer *cbuf, int src_lo, int dst_lo,\n+static void vec_mov_helper(C2_MacroAssembler *masm, int src_lo, int dst_lo,\n@@ -953,1 +950,1 @@\n-void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+void vec_spill_helper(C2_MacroAssembler *masm, bool is_load,\n@@ -956,1 +953,1 @@\n-static void vec_stack_to_stack_helper(CodeBuffer *cbuf, int src_offset,\n+static void vec_stack_to_stack_helper(C2_MacroAssembler *masm, int src_offset,\n@@ -958,2 +955,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -1035,1 +1031,1 @@\n-uint MachSpillCopyNode::implementation( CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const {\n+uint MachSpillCopyNode::implementation( C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const {\n@@ -1055,1 +1051,1 @@\n-  if (bottom_type()->isa_vect() != NULL && bottom_type()->isa_vectmask() == NULL) {\n+  if (bottom_type()->isa_vect() != nullptr && bottom_type()->isa_vectmask() == nullptr) {\n@@ -1064,1 +1060,1 @@\n-      vec_stack_to_stack_helper(cbuf, src_offset, dst_offset, ireg, st);\n+      vec_stack_to_stack_helper(masm, src_offset, dst_offset, ireg, st);\n@@ -1066,1 +1062,1 @@\n-      vec_mov_helper(cbuf, src_first, dst_first, src_second, dst_second, ireg, st);\n+      vec_mov_helper(masm, src_first, dst_first, src_second, dst_second, ireg, st);\n@@ -1069,1 +1065,1 @@\n-      vec_spill_helper(cbuf, false, stack_offset, src_first, ireg, st);\n+      vec_spill_helper(masm, false, stack_offset, src_first, ireg, st);\n@@ -1072,1 +1068,1 @@\n-      vec_spill_helper(cbuf, true,  stack_offset, dst_first, ireg, st);\n+      vec_spill_helper(masm, true,  stack_offset, dst_first, ireg, st);\n@@ -1084,2 +1080,2 @@\n-      size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n-      size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n+      size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n+      size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n@@ -1089,2 +1085,2 @@\n-    size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_first),ESI_num,0xFF,\"PUSH  \",size, st);\n-    size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_first),EAX_num,0x8F,\"POP   \",size, st);\n+    size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_first),ESI_num,0xFF,\"PUSH  \",size, st);\n+    size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_first),EAX_num,0x8F,\"POP   \",size, st);\n@@ -1092,2 +1088,2 @@\n-      size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n-      size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n+      size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_second),ESI_num,0xFF,\"PUSH  \",size, st);\n+      size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_second),EAX_num,0x8F,\"POP   \",size, st);\n@@ -1101,1 +1097,1 @@\n-    size = impl_mov_helper(cbuf,do_size,src_first,dst_first,size, st);\n+    size = impl_mov_helper(masm,do_size,src_first,dst_first,size, st);\n@@ -1105,1 +1101,1 @@\n-    size = impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_first),src_first,0x89,\"MOV \",size, st);\n+    size = impl_helper(masm,do_size,false,ra_->reg2offset(dst_first),src_first,0x89,\"MOV \",size, st);\n@@ -1109,1 +1105,1 @@\n-    size = impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_first),dst_first,0x8B,\"MOV \",size, st);\n+    size = impl_helper(masm,do_size,true ,ra_->reg2offset(src_first),dst_first,0x8B,\"MOV \",size, st);\n@@ -1115,1 +1111,1 @@\n-    return impl_movgpr2x_helper(cbuf,do_size,src_first,dst_first,src_second, dst_second, size, st);\n+    return impl_movgpr2x_helper(masm,do_size,src_first,dst_first,src_second, dst_second, size, st);\n@@ -1122,1 +1118,1 @@\n-    if( cbuf ) {\n+    if( masm ) {\n@@ -1129,4 +1125,4 @@\n-        emit_opcode  (*cbuf, 0xD9 );           \/\/ FLD    ST(i)\n-        emit_d8      (*cbuf, 0xC0+Matcher::_regEncode[src_first]-1 );\n-        emit_opcode  (*cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-        emit_d8      (*cbuf, 0xD8+Matcher::_regEncode[dst_first] );\n+        emit_opcode  (masm, 0xD9 );           \/\/ FLD    ST(i)\n+        emit_d8      (masm, 0xC0+Matcher::_regEncode[src_first]-1 );\n+        emit_opcode  (masm, 0xDD );           \/\/ FSTP   ST(i)\n+        emit_d8      (masm, 0xD8+Matcher::_regEncode[dst_first] );\n@@ -1134,2 +1130,2 @@\n-        emit_opcode  (*cbuf, 0xDD );           \/\/ FST    ST(i)\n-        emit_d8      (*cbuf, 0xD0+Matcher::_regEncode[dst_first]-1 );\n+        emit_opcode  (masm, 0xDD );           \/\/ FST    ST(i)\n+        emit_d8      (masm, 0xD0+Matcher::_regEncode[dst_first]-1 );\n@@ -1149,1 +1145,1 @@\n-    return impl_fp_store_helper(cbuf,do_size,src_first,src_second,dst_first,dst_second,ra_->reg2offset(dst_first),size, st);\n+    return impl_fp_store_helper(masm,do_size,src_first,src_second,dst_first,dst_second,ra_->reg2offset(dst_first),size, st);\n@@ -1165,5 +1161,7 @@\n-    if( cbuf ) {\n-      emit_opcode  (*cbuf, op );\n-      encode_RegMem(*cbuf, 0x0, ESP_enc, 0x4, 0, offset, relocInfo::none);\n-      emit_opcode  (*cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-      emit_d8      (*cbuf, 0xD8+Matcher::_regEncode[dst_first] );\n+    if( masm ) {\n+      masm->set_inst_mark();\n+      emit_opcode  (masm, op );\n+      encode_RegMem(masm, 0x0, ESP_enc, 0x4, 0, offset, relocInfo::none);\n+      emit_opcode  (masm, 0xDD );           \/\/ FSTP   ST(i)\n+      emit_d8      (masm, 0xD8+Matcher::_regEncode[dst_first] );\n+      masm->clear_inst_mark();\n@@ -1185,1 +1183,1 @@\n-    return impl_movx_helper(cbuf,do_size,src_first,dst_first,src_second, dst_second, size, st);\n+    return impl_movx_helper(masm,do_size,src_first,dst_first,src_second, dst_second, size, st);\n@@ -1192,1 +1190,1 @@\n-    return impl_movx2gpr_helper(cbuf,do_size,src_first,dst_first,src_second, dst_second, size, st);\n+    return impl_movx2gpr_helper(masm,do_size,src_first,dst_first,src_second, dst_second, size, st);\n@@ -1197,1 +1195,1 @@\n-    return impl_x_helper(cbuf,do_size,false,ra_->reg2offset(dst_first), src_first, src_second, size, st);\n+    return impl_x_helper(masm,do_size,false,ra_->reg2offset(dst_first), src_first, src_second, size, st);\n@@ -1202,1 +1200,1 @@\n-    return impl_x_helper(cbuf,do_size,true ,ra_->reg2offset(src_first),dst_first, dst_second, size, st);\n+    return impl_x_helper(masm,do_size,true ,ra_->reg2offset(src_first),dst_first, dst_second, size, st);\n@@ -1209,5 +1207,5 @@\n-    if( cbuf ) {\n-      emit_opcode(*cbuf,0x8D);  \/\/ LEA  ESP,[ESP-8]\n-      emit_rm(*cbuf, 0x1, ESP_enc, 0x04);\n-      emit_rm(*cbuf, 0x0, 0x04, ESP_enc);\n-      emit_d8(*cbuf,0xF8);\n+    if( masm ) {\n+      emit_opcode(masm,0x8D);  \/\/ LEA  ESP,[ESP-8]\n+      emit_rm(masm, 0x1, ESP_enc, 0x04);\n+      emit_rm(masm, 0x0, 0x04, ESP_enc);\n+      emit_d8(masm,0xF8);\n@@ -1222,1 +1220,1 @@\n-    size = impl_fp_store_helper(cbuf,do_size,src_first,src_second,dst_first,dst_second,0,size, st);\n+    size = impl_fp_store_helper(masm,do_size,src_first,src_second,dst_first,dst_second,0,size, st);\n@@ -1225,1 +1223,1 @@\n-    size = impl_x_helper(cbuf,do_size,true ,0,dst_first, dst_second, size, st);\n+    size = impl_x_helper(masm,do_size,true ,0,dst_first, dst_second, size, st);\n@@ -1227,5 +1225,5 @@\n-    if( cbuf ) {\n-      emit_opcode(*cbuf,0x8D);  \/\/ LEA  ESP,[ESP+8]\n-      emit_rm(*cbuf, 0x1, ESP_enc, 0x04);\n-      emit_rm(*cbuf, 0x0, 0x04, ESP_enc);\n-      emit_d8(*cbuf,0x08);\n+    if( masm ) {\n+      emit_opcode(masm,0x8D);  \/\/ LEA  ESP,[ESP+8]\n+      emit_rm(masm, 0x1, ESP_enc, 0x04);\n+      emit_rm(masm, 0x0, 0x04, ESP_enc);\n+      emit_d8(masm,0x08);\n@@ -1247,2 +1245,1 @@\n-    if (cbuf != nullptr) {\n-      MacroAssembler _masm(cbuf);\n+    if (masm != nullptr) {\n@@ -1262,2 +1259,1 @@\n-    if (cbuf != nullptr) {\n-      MacroAssembler _masm(cbuf);\n+    if (masm != nullptr) {\n@@ -1286,2 +1282,1 @@\n-    if (cbuf != nullptr) {\n-      MacroAssembler _masm(cbuf);\n+    if (masm != nullptr) {\n@@ -1307,1 +1302,1 @@\n-    return impl_mov_helper(cbuf,do_size,src_second,dst_second,size, st);\n+    return impl_mov_helper(masm,do_size,src_second,dst_second,size, st);\n@@ -1311,1 +1306,1 @@\n-    return impl_helper(cbuf,do_size,false,ra_->reg2offset(dst_second),src_second,0x89,\"MOV \",size, st);\n+    return impl_helper(masm,do_size,false,ra_->reg2offset(dst_second),src_second,0x89,\"MOV \",size, st);\n@@ -1315,1 +1310,1 @@\n-    return impl_helper(cbuf,do_size,true ,ra_->reg2offset(src_second),dst_second,0x8B,\"MOV \",size, st);\n+    return impl_helper(masm,do_size,true ,ra_->reg2offset(src_second),dst_second,0x8B,\"MOV \",size, st);\n@@ -1323,1 +1318,1 @@\n-  implementation( NULL, ra_, false, st );\n+  implementation( nullptr, ra_, false, st );\n@@ -1327,2 +1322,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation( &cbuf, ra_, false, NULL );\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation( masm, ra_, false, nullptr );\n@@ -1345,1 +1340,1 @@\n-void BoxLockNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void BoxLockNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1349,4 +1344,4 @@\n-    emit_opcode(cbuf, 0x8D);      \/\/ LEA  reg,[SP+offset]\n-    emit_rm(cbuf, 0x2, reg, 0x04);\n-    emit_rm(cbuf, 0x0, 0x04, ESP_enc);\n-    emit_d32(cbuf, offset);\n+    emit_opcode(masm, 0x8D);      \/\/ LEA  reg,[SP+offset]\n+    emit_rm(masm, 0x2, reg, 0x04);\n+    emit_rm(masm, 0x0, 0x04, ESP_enc);\n+    emit_d32(masm, offset);\n@@ -1355,4 +1350,4 @@\n-    emit_opcode(cbuf, 0x8D);      \/\/ LEA  reg,[SP+offset]\n-    emit_rm(cbuf, 0x1, reg, 0x04);\n-    emit_rm(cbuf, 0x0, 0x04, ESP_enc);\n-    emit_d8(cbuf, offset);\n+    emit_opcode(masm, 0x8D);      \/\/ LEA  reg,[SP+offset]\n+    emit_rm(masm, 0x1, reg, 0x04);\n+    emit_rm(masm, 0x0, 0x04, ESP_enc);\n+    emit_d8(masm, offset);\n@@ -1384,2 +1379,1 @@\n-void MachUEPNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  MacroAssembler masm(&cbuf);\n+void MachUEPNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -1387,1 +1381,1 @@\n-  uint insts_size = cbuf.insts_size();\n+  uint insts_size = __ offset();\n@@ -1389,2 +1383,2 @@\n-  masm.cmpptr(rax, Address(rcx, oopDesc::klass_offset_in_bytes()));\n-  masm.jump_cc(Assembler::notEqual,\n+  __ cmpptr(rax, Address(rcx, oopDesc::klass_offset_in_bytes()));\n+  __ jump_cc(Assembler::notEqual,\n@@ -1397,1 +1391,1 @@\n-  masm.nop(nops_cnt);\n+  __ nop(nops_cnt);\n@@ -1399,1 +1393,1 @@\n-  assert(cbuf.insts_size() - insts_size == size(ra_), \"checking code size of inline cache node\");\n+  assert(__ offset() - insts_size == size(ra_), \"checking code size of inline cache node\");\n@@ -1543,0 +1537,12 @@\n+  \/\/ Set instruction mark in MacroAssembler. This is used only in\n+  \/\/ instructions that emit bytes directly to the CodeBuffer wraped\n+  \/\/ in the MacroAssembler. Should go away once all \"instruct\" are\n+  \/\/ patched to emit bytes only using methods in MacroAssembler.\n+  enc_class SetInstMark %{\n+    __ set_inst_mark();\n+  %}\n+\n+  enc_class ClearInstMark %{\n+    __ clear_inst_mark();\n+  %}\n+\n@@ -1545,1 +1551,1 @@\n-    emit_opcode(cbuf, $primary);\n+    emit_opcode(masm, $primary);\n@@ -1550,1 +1556,1 @@\n-    emit_opcode(cbuf, $secondary);\n+    emit_opcode(masm, $secondary);\n@@ -1555,1 +1561,1 @@\n-    emit_opcode(cbuf, $d8$$constant);\n+    emit_opcode(masm, $d8$$constant);\n@@ -1559,1 +1565,1 @@\n-    emit_opcode(cbuf,0x66);\n+    emit_opcode(masm,0x66);\n@@ -1563,1 +1569,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1567,2 +1573,2 @@\n-    emit_opcode(cbuf,$opcode$$constant);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,$opcode$$constant);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1572,2 +1578,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg ); \/\/ 0xB8+ rd   -- MOV r32  ,imm32\n-    emit_d32   ( cbuf, 0x0  );             \/\/                         imm32==0x0\n+    emit_opcode( masm, 0xB8 + $dst$$reg ); \/\/ 0xB8+ rd   -- MOV r32  ,imm32\n+    emit_d32   ( masm, 0x0  );             \/\/                         imm32==0x0\n@@ -1600,11 +1606,11 @@\n-    emit_opcode(cbuf,0x81); emit_d8(cbuf,0xF8);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x00);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x80);                     \/\/ cmp rax,80000000h\n-    emit_opcode(cbuf,0x0F); emit_d8(cbuf,0x85);\n-    emit_opcode(cbuf,0x0B); emit_d8(cbuf,0x00);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x00);                     \/\/ jne normal_case\n-    emit_opcode(cbuf,0x33); emit_d8(cbuf,0xD2);                     \/\/ xor rdx,edx\n-    emit_opcode(cbuf,0x83); emit_d8(cbuf,0xF9); emit_d8(cbuf,0xFF); \/\/ cmp rcx,0FFh\n-    emit_opcode(cbuf,0x0F); emit_d8(cbuf,0x84);\n-    emit_opcode(cbuf,0x03); emit_d8(cbuf,0x00);\n-    emit_opcode(cbuf,0x00); emit_d8(cbuf,0x00);                     \/\/ je done\n+    emit_opcode(masm,0x81); emit_d8(masm,0xF8);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x00);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x80);                     \/\/ cmp rax,80000000h\n+    emit_opcode(masm,0x0F); emit_d8(masm,0x85);\n+    emit_opcode(masm,0x0B); emit_d8(masm,0x00);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x00);                     \/\/ jne normal_case\n+    emit_opcode(masm,0x33); emit_d8(masm,0xD2);                     \/\/ xor rdx,edx\n+    emit_opcode(masm,0x83); emit_d8(masm,0xF9); emit_d8(masm,0xFF); \/\/ cmp rcx,0FFh\n+    emit_opcode(masm,0x0F); emit_d8(masm,0x84);\n+    emit_opcode(masm,0x03); emit_d8(masm,0x00);\n+    emit_opcode(masm,0x00); emit_d8(masm,0x00);                     \/\/ je done\n@@ -1612,1 +1618,1 @@\n-    emit_opcode(cbuf,0x99);                                         \/\/ cdq\n+    emit_opcode(masm,0x99);                                         \/\/ cdq\n@@ -1619,1 +1625,1 @@\n-    emit_opcode(cbuf, $opcode$$constant + $reg$$reg);\n+    emit_opcode(masm, $opcode$$constant + $reg$$reg);\n@@ -1627,1 +1633,1 @@\n-      emit_opcode(cbuf, $primary | 0x02);\n+      emit_opcode(masm, $primary | 0x02);\n@@ -1630,1 +1636,1 @@\n-      emit_opcode(cbuf, $primary);\n+      emit_opcode(masm, $primary);\n@@ -1638,1 +1644,1 @@\n-      emit_opcode(cbuf, $primary | 0x02);    }\n+      emit_opcode(masm, $primary | 0x02);    }\n@@ -1640,1 +1646,1 @@\n-      emit_opcode(cbuf, $primary);\n+      emit_opcode(masm, $primary);\n@@ -1643,1 +1649,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n+    emit_rm(masm, 0x3, $secondary, $dst$$reg);\n@@ -1661,1 +1667,1 @@\n-    emit_opcode(cbuf, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n+    emit_opcode(masm, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n@@ -1663,3 +1669,3 @@\n-    emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n-    if ((con >= -128) && (con <= 127)) emit_d8 (cbuf,con);\n-    else                               emit_d32(cbuf,con);\n+    emit_rm(masm, 0x3, $secondary, $dst$$reg);\n+    if ((con >= -128) && (con <= 127)) emit_d8 (masm,con);\n+    else                               emit_d32(masm,con);\n@@ -1672,1 +1678,1 @@\n-    emit_opcode(cbuf, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n+    emit_opcode(masm, ((con >= -128) && (con <= 127)) ? ($primary | 0x02) : $primary);\n@@ -1674,3 +1680,3 @@\n-    emit_rm(cbuf, 0x3, $tertiary, HIGH_FROM_LOW_ENC($dst$$reg));\n-    if ((con >= -128) && (con <= 127)) emit_d8 (cbuf,con);\n-    else                               emit_d32(cbuf,con);\n+    emit_rm(masm, 0x3, $tertiary, HIGH_FROM_LOW_ENC($dst$$reg));\n+    if ((con >= -128) && (con <= 127)) emit_d8 (masm,con);\n+    else                               emit_d32(masm,con);\n@@ -1680,1 +1686,1 @@\n-    emit_cc(cbuf, $secondary, $dst$$reg );\n+    emit_cc(masm, $secondary, $dst$$reg );\n@@ -1687,2 +1693,2 @@\n-    emit_opcode(cbuf, 0x0F);\n-    emit_cc(cbuf, 0xC8, destlo);\n+    emit_opcode(masm, 0x0F);\n+    emit_cc(masm, 0xC8, destlo);\n@@ -1690,2 +1696,2 @@\n-    emit_opcode(cbuf, 0x0F);\n-    emit_cc(cbuf, 0xC8, desthi);\n+    emit_opcode(masm, 0x0F);\n+    emit_cc(masm, 0xC8, desthi);\n@@ -1693,2 +1699,2 @@\n-    emit_opcode(cbuf, 0x87);\n-    emit_rm(cbuf, 0x3, destlo, desthi);\n+    emit_opcode(masm, 0x87);\n+    emit_rm(masm, 0x3, destlo, desthi);\n@@ -1698,1 +1704,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $div$$reg );\n+    emit_rm(masm, 0x3, $secondary, $div$$reg );\n@@ -1703,1 +1709,1 @@\n-    emit_cc(cbuf, $secondary, $cop$$cmpcode);\n+    emit_cc(masm, $secondary, $cop$$cmpcode);\n@@ -1708,2 +1714,2 @@\n-    emit_d8(cbuf, op >> 8 );\n-    emit_d8(cbuf, op & 255);\n+    emit_d8(masm, op >> 8 );\n+    emit_d8(masm, op & 255);\n@@ -1715,2 +1721,2 @@\n-    emit_cc( cbuf, 0x70, ($cop$$cmpcode^1) );\n-    emit_d8( cbuf, $brOffs$$constant );\n+    emit_cc( masm, 0x70, ($cop$$cmpcode^1) );\n+    emit_d8( masm, $brOffs$$constant );\n@@ -1726,1 +1732,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1728,1 +1733,1 @@\n-                                     NULL, &miss,\n+                                     nullptr, &miss,\n@@ -1737,2 +1742,1 @@\n-    MacroAssembler masm(&cbuf);\n-    int start = masm.offset();\n+    int start = __ offset();\n@@ -1741,1 +1745,1 @@\n-        masm.verify_FPU(0, \"must be empty in SSE2+ mode\");\n+        __ verify_FPU(0, \"must be empty in SSE2+ mode\");\n@@ -1746,1 +1750,1 @@\n-      masm.empty_FPU_stack();\n+      __ empty_FPU_stack();\n@@ -1749,1 +1753,1 @@\n-      sizeof_FFree_Float_Stack_All = masm.offset() - start;\n+      sizeof_FFree_Float_Stack_All = __ offset() - start;\n@@ -1751,1 +1755,1 @@\n-      assert(masm.offset() - start == sizeof_FFree_Float_Stack_All, \"wrong size\");\n+      assert(__ offset() - start == sizeof_FFree_Float_Stack_All, \"wrong size\");\n@@ -1757,2 +1761,1 @@\n-      MacroAssembler masm(&cbuf);\n-      masm.verify_FPU( -3, \"Returning from Runtime Leaf call\");\n+      __ verify_FPU( -3, \"Returning from Runtime Leaf call\");\n@@ -1764,2 +1767,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -1768,1 +1770,1 @@\n-    emit_d32_reloc(cbuf, ($meth$$method - (int)(cbuf.insts_end()) - 4),\n+    emit_d32_reloc(masm, ($meth$$method - (int)(__ pc()) - 4),\n@@ -1770,0 +1772,1 @@\n+    __ clear_inst_mark();\n@@ -1773,1 +1776,0 @@\n-      MacroAssembler _masm(&cbuf);\n@@ -1798,1 +1800,1 @@\n-    debug_only(int off0 = cbuf.insts_size());\n+    debug_only(int off0 = __ offset());\n@@ -1800,1 +1802,0 @@\n-      MacroAssembler _masm(&cbuf);\n@@ -1805,1 +1806,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1807,1 +1807,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = __ offset());\n@@ -1814,2 +1814,1 @@\n-      MacroAssembler masm(&cbuf);\n-      masm.fldcw(ExternalAddress(StubRoutines::x86::addr_fpu_cntrl_wrd_24()));\n+      __ fldcw(ExternalAddress(StubRoutines::x86::addr_fpu_cntrl_wrd_24()));\n@@ -1822,2 +1821,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -1827,1 +1825,1 @@\n-      emit_d32_reloc(cbuf, ($meth$$method - (int)(cbuf.insts_end()) - 4),\n+      emit_d32_reloc(masm, ($meth$$method - (int)(__ pc()) - 4),\n@@ -1830,0 +1828,1 @@\n+      __ clear_inst_mark();\n@@ -1832,1 +1831,1 @@\n-      int method_index = resolved_method_index(cbuf);\n+      int method_index = resolved_method_index(masm);\n@@ -1835,1 +1834,1 @@\n-      emit_d32_reloc(cbuf, ($meth$$method - (int)(cbuf.insts_end()) - 4),\n+      emit_d32_reloc(masm, ($meth$$method - (int)(__ pc()) - 4),\n@@ -1838,1 +1837,1 @@\n-      address mark = cbuf.insts_mark();\n+      address mark = __ inst_mark();\n@@ -1842,1 +1841,2 @@\n-        cbuf.shared_stub_to_interp_for(_method, cbuf.insts()->mark_off());\n+        __ code()->shared_stub_to_interp_for(_method, __ code()->insts()->mark_off());\n+        __ clear_inst_mark();\n@@ -1845,2 +1845,3 @@\n-        address stub = CompiledStaticCall::emit_to_interp_stub(cbuf, mark);\n-        if (stub == NULL) {\n+        address stub = CompiledStaticCall::emit_to_interp_stub(masm, mark);\n+        __ clear_inst_mark();\n+        if (stub == nullptr) {\n@@ -1855,2 +1856,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    __ ic_call((address)$meth$$method, resolved_method_index(cbuf));\n+    __ ic_call((address)$meth$$method, resolved_method_index(masm));\n@@ -1865,2 +1865,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n+    __ set_inst_mark();\n@@ -1868,2 +1867,3 @@\n-    emit_rm(cbuf, 0x01, $secondary, EAX_enc );  \/\/ R\/M byte\n-    emit_d8(cbuf, disp);             \/\/ Displacement\n+    emit_rm(masm, 0x01, $secondary, EAX_enc );  \/\/ R\/M byte\n+    emit_d8(masm, disp);             \/\/ Displacement\n+    __ clear_inst_mark();\n@@ -1873,26 +1873,0 @@\n-\/\/   Following encoding is no longer used, but may be restored if calling\n-\/\/   convention changes significantly.\n-\/\/   Became: Xor_Reg(EBP), Java_To_Runtime( labl )\n-\/\/\n-\/\/   enc_class Java_Interpreter_Call (label labl) %{    \/\/ JAVA INTERPRETER CALL\n-\/\/     \/\/ int ic_reg     = Matcher::inline_cache_reg();\n-\/\/     \/\/ int ic_encode  = Matcher::_regEncode[ic_reg];\n-\/\/     \/\/ int imo_reg    = Matcher::interpreter_method_reg();\n-\/\/     \/\/ int imo_encode = Matcher::_regEncode[imo_reg];\n-\/\/\n-\/\/     \/\/ \/\/ Interpreter expects method_ptr in EBX, currently a callee-saved register,\n-\/\/     \/\/ \/\/ so we load it immediately before the call\n-\/\/     \/\/ emit_opcode(cbuf, 0x8B);                     \/\/ MOV    imo_reg,ic_reg  # method_ptr\n-\/\/     \/\/ emit_rm(cbuf, 0x03, imo_encode, ic_encode ); \/\/ R\/M byte\n-\/\/\n-\/\/     \/\/ xor rbp,ebp\n-\/\/     emit_opcode(cbuf, 0x33);\n-\/\/     emit_rm(cbuf, 0x3, EBP_enc, EBP_enc);\n-\/\/\n-\/\/     \/\/ CALL to interpreter.\n-\/\/     cbuf.set_insts_mark();\n-\/\/     $$$emit8$primary;\n-\/\/     emit_d32_reloc(cbuf, ($labl$$label - (int)(cbuf.insts_end()) - 4),\n-\/\/                 runtime_call_Relocation::spec(), RELOC_IMM32 );\n-\/\/   %}\n-\n@@ -1901,1 +1875,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n+    emit_rm(masm, 0x3, $secondary, $dst$$reg);\n@@ -1908,1 +1882,1 @@\n-    emit_opcode(cbuf, 0xB8 + $dst$$reg);\n+    emit_opcode(masm, 0xB8 + $dst$$reg);\n@@ -1915,1 +1889,1 @@\n-    emit_opcode(cbuf, $primary + $dst$$reg);\n+    emit_opcode(masm, $primary + $dst$$reg);\n@@ -1926,2 +1900,2 @@\n-      emit_opcode(cbuf, 0x33);\n-      emit_rm(cbuf, 0x3, dst_enc, dst_enc);\n+      emit_opcode(masm, 0x33);\n+      emit_rm(masm, 0x3, dst_enc, dst_enc);\n@@ -1929,2 +1903,2 @@\n-      emit_opcode(cbuf, $primary + dst_enc);\n-      emit_d32(cbuf, src_con);\n+      emit_opcode(masm, $primary + dst_enc);\n+      emit_d32(masm, src_con);\n@@ -1941,2 +1915,2 @@\n-      emit_opcode(cbuf, 0x33);\n-      emit_rm(cbuf, 0x3, dst_enc, dst_enc);\n+      emit_opcode(masm, 0x33);\n+      emit_rm(masm, 0x3, dst_enc, dst_enc);\n@@ -1944,2 +1918,2 @@\n-      emit_opcode(cbuf, $primary + dst_enc);\n-      emit_d32(cbuf, src_con);\n+      emit_opcode(masm, $primary + dst_enc);\n+      emit_d32(masm, src_con);\n@@ -1952,1 +1926,1 @@\n-    encode_Copy( cbuf, $dst$$reg, $src$$reg );\n+    encode_Copy( masm, $dst$$reg, $src$$reg );\n@@ -1956,1 +1930,1 @@\n-    encode_Copy( cbuf, $dst$$reg, $src$$reg );\n+    encode_Copy( masm, $dst$$reg, $src$$reg );\n@@ -1960,1 +1934,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1965,1 +1939,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1970,1 +1944,1 @@\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg));\n@@ -1974,1 +1948,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -1978,1 +1952,1 @@\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg));\n@@ -1982,1 +1956,1 @@\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($src$$reg));\n@@ -1994,1 +1968,1 @@\n-    emit_d32(cbuf, jf_as_bits);\n+    emit_d32(masm, jf_as_bits);\n@@ -2001,1 +1975,1 @@\n-    emit_d32(cbuf, jf_as_bits);\n+    emit_d32(masm, jf_as_bits);\n@@ -2010,1 +1984,1 @@\n-    emit_d32(cbuf,$src$$constant);\n+    emit_d32(masm,$src$$constant);\n@@ -2015,2 +1989,2 @@\n-    emit_rm(cbuf, 0x00, $t1$$reg, 0x05 );\n-    emit_d32(cbuf, 0x00);\n+    emit_rm(masm, 0x00, $t1$$reg, 0x05 );\n+    emit_d32(masm, 0x00);\n@@ -2020,1 +1994,1 @@\n-    emit_opcode(cbuf,0xF0);         \/\/ [Lock]\n+    emit_opcode(masm,0xF0);         \/\/ [Lock]\n@@ -2031,2 +2005,2 @@\n-    emit_opcode(cbuf,0x87);\n-    emit_opcode(cbuf,0xD9);\n+    emit_opcode(masm,0x87);\n+    emit_opcode(masm,0xD9);\n@@ -2034,1 +2008,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2036,3 +2010,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xC7);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xC7);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2040,2 +2014,2 @@\n-    emit_opcode(cbuf,0x87);\n-    emit_opcode(cbuf,0xD9);\n+    emit_opcode(masm,0x87);\n+    emit_opcode(masm,0xD9);\n@@ -2046,1 +2020,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2049,3 +2023,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xB1);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xB1);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2056,1 +2030,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2059,3 +2033,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xB0);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xB0);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2066,1 +2040,1 @@\n-    emit_opcode(cbuf,0xF0);\n+    emit_opcode(masm,0xF0);\n@@ -2069,1 +2043,1 @@\n-    emit_opcode(cbuf, 0x66);\n+    emit_opcode(masm, 0x66);\n@@ -2072,3 +2046,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xB1);\n-    emit_rm( cbuf, 0x0, 1, $mem_ptr$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xB1);\n+    emit_rm( masm, 0x0, 1, $mem_ptr$$reg );\n@@ -2081,2 +2055,2 @@\n-    emit_opcode( cbuf, 0xB8 + res_encoding);\n-    emit_d32( cbuf, 0 );\n+    emit_opcode( masm, 0xB8 + res_encoding);\n+    emit_d32( masm, 0 );\n@@ -2084,2 +2058,2 @@\n-    emit_opcode(cbuf,0x75);\n-    emit_d8(cbuf, 5 );\n+    emit_opcode(masm,0x75);\n+    emit_d8(masm, 5 );\n@@ -2087,2 +2061,2 @@\n-    emit_opcode( cbuf, 0xB8 + res_encoding);\n-    emit_d32( cbuf, 1 );\n+    emit_opcode( masm, 0xB8 + res_encoding);\n+    emit_d32( masm, 1 );\n@@ -2092,4 +2066,0 @@\n-  enc_class set_instruction_start( ) %{\n-    cbuf.set_insts_mark();            \/\/ Mark start of opcode for reloc info in mem operand\n-  %}\n-\n@@ -2103,1 +2073,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n@@ -2113,1 +2083,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, relocInfo::none);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, relocInfo::none);\n@@ -2120,7 +2090,7 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,$tertiary);\n-    emit_rm(cbuf, 0x3, r1, r2);\n-    emit_d8(cbuf,$cnt$$constant);\n-    emit_d8(cbuf,$primary);\n-    emit_rm(cbuf, 0x3, $secondary, r1);\n-    emit_d8(cbuf,$cnt$$constant);\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,$tertiary);\n+    emit_rm(masm, 0x3, r1, r2);\n+    emit_d8(masm,$cnt$$constant);\n+    emit_d8(masm,$primary);\n+    emit_rm(masm, 0x3, $secondary, r1);\n+    emit_d8(masm,$cnt$$constant);\n@@ -2130,2 +2100,2 @@\n-    emit_opcode( cbuf, 0x8B ); \/\/ Move\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_opcode( masm, 0x8B ); \/\/ Move\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg));\n@@ -2133,3 +2103,3 @@\n-      emit_d8(cbuf,$primary);\n-      emit_rm(cbuf, 0x3, $secondary, $dst$$reg);\n-      emit_d8(cbuf,$cnt$$constant-32);\n+      emit_d8(masm,$primary);\n+      emit_rm(masm, 0x3, $secondary, $dst$$reg);\n+      emit_d8(masm,$cnt$$constant-32);\n@@ -2137,3 +2107,3 @@\n-    emit_d8(cbuf,$primary);\n-    emit_rm(cbuf, 0x3, $secondary, HIGH_FROM_LOW_ENC($dst$$reg));\n-    emit_d8(cbuf,31);\n+    emit_d8(masm,$primary);\n+    emit_rm(masm, 0x3, $secondary, HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_d8(masm,31);\n@@ -2147,2 +2117,2 @@\n-    emit_opcode( cbuf, 0x8B ); \/\/ Move r1,r2\n-    emit_rm(cbuf, 0x3, r1, r2);\n+    emit_opcode( masm, 0x8B ); \/\/ Move r1,r2\n+    emit_rm(masm, 0x3, r1, r2);\n@@ -2150,3 +2120,3 @@\n-      emit_opcode(cbuf,$primary);\n-      emit_rm(cbuf, 0x3, $secondary, r1);\n-      emit_d8(cbuf,$cnt$$constant-32);\n+      emit_opcode(masm,$primary);\n+      emit_rm(masm, 0x3, $secondary, r1);\n+      emit_d8(masm,$cnt$$constant-32);\n@@ -2154,2 +2124,2 @@\n-    emit_opcode(cbuf,0x33);  \/\/ XOR r2,r2\n-    emit_rm(cbuf, 0x3, r2, r2);\n+    emit_opcode(masm,0x33);  \/\/ XOR r2,r2\n+    emit_rm(masm, 0x3, r2, r2);\n@@ -2161,1 +2131,1 @@\n-    emit_opcode(cbuf,$opcode$$constant);\n+    emit_opcode(masm,$opcode$$constant);\n@@ -2168,1 +2138,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n@@ -2183,1 +2153,1 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, relocInfo::none);\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, relocInfo::none);\n@@ -2193,1 +2163,1 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n@@ -2203,1 +2173,1 @@\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n@@ -2208,2 +2178,2 @@\n-    emit_opcode(cbuf,0x3B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x3B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2211,2 +2181,2 @@\n-    emit_opcode(cbuf,0x7C);\n-    emit_d8(cbuf,2);\n+    emit_opcode(masm,0x7C);\n+    emit_d8(masm,2);\n@@ -2214,2 +2184,2 @@\n-    emit_opcode(cbuf,0x8B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x8B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2220,2 +2190,2 @@\n-    emit_opcode(cbuf,0x3B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x3B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2223,2 +2193,2 @@\n-    emit_opcode(cbuf,0x7F);\n-    emit_d8(cbuf,2);\n+    emit_opcode(masm,0x7F);\n+    emit_d8(masm,2);\n@@ -2226,2 +2196,2 @@\n-    emit_opcode(cbuf,0x8B);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $src$$reg);\n+    emit_opcode(masm,0x8B);\n+    emit_rm(masm, 0x3, $dst$$reg, $src$$reg);\n@@ -2241,2 +2211,2 @@\n-      emit_opcode( cbuf, 0xD9 ); \/\/ FLD (i.e., push it)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 ); \/\/ FLD (i.e., push it)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2244,3 +2214,4 @@\n-    cbuf.set_insts_mark();       \/\/ Mark start of opcode for reloc info in mem operand\n-    emit_opcode(cbuf,$primary);\n-    encode_RegMem(cbuf, reg_encoding, base, index, scale, displace, disp_reloc);\n+    __ set_inst_mark();       \/\/ Mark start of opcode for reloc info in mem operand\n+    emit_opcode(masm,$primary);\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace, disp_reloc);\n+    __ clear_inst_mark();\n@@ -2251,2 +2222,2 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0x03, $dst$$reg );\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0x03, $dst$$reg );\n@@ -2257,3 +2228,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0x9C);\n-    emit_rm( cbuf, 0x3, 0x4, $dst$$reg );\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0x9C);\n+    emit_rm( masm, 0x3, 0x4, $dst$$reg );\n@@ -2266,2 +2237,2 @@\n-    emit_opcode(cbuf,0x2B);\n-    emit_rm(cbuf, 0x3, $p$$reg, $q$$reg);\n+    emit_opcode(masm,0x2B);\n+    emit_rm(masm, 0x3, $p$$reg, $q$$reg);\n@@ -2269,2 +2240,2 @@\n-    emit_opcode(cbuf,0x1B);\n-    emit_rm(cbuf, 0x3, tmpReg, tmpReg);\n+    emit_opcode(masm,0x1B);\n+    emit_rm(masm, 0x3, tmpReg, tmpReg);\n@@ -2272,2 +2243,2 @@\n-    emit_opcode(cbuf,0x23);\n-    emit_rm(cbuf, 0x3, tmpReg, $y$$reg);\n+    emit_opcode(masm,0x23);\n+    emit_rm(masm, 0x3, tmpReg, $y$$reg);\n@@ -2275,2 +2246,2 @@\n-    emit_opcode(cbuf,0x03);\n-    emit_rm(cbuf, 0x3, $p$$reg, tmpReg);\n+    emit_opcode(masm,0x03);\n+    emit_rm(masm, 0x3, $p$$reg, tmpReg);\n@@ -2281,3 +2252,3 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0, ECX_enc);\n-    emit_d32(cbuf,0x20);\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0, ECX_enc);\n+    emit_d32(masm,0x20);\n@@ -2285,2 +2256,2 @@\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, 0x04);\n+    emit_opcode(masm, 0x74);\n+    emit_d8(masm, 0x04);\n@@ -2288,2 +2259,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg );\n@@ -2291,2 +2262,2 @@\n-    emit_opcode(cbuf, 0x33);\n-    emit_rm(cbuf, 0x3, $dst$$reg, $dst$$reg);\n+    emit_opcode(masm, 0x33);\n+    emit_rm(masm, 0x3, $dst$$reg, $dst$$reg);\n@@ -2295,3 +2266,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xA5);\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xA5);\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg));\n@@ -2299,2 +2270,2 @@\n-    emit_opcode(cbuf,0xD3);\n-    emit_rm(cbuf, 0x3, 0x4, $dst$$reg );\n+    emit_opcode(masm,0xD3);\n+    emit_rm(masm, 0x3, 0x4, $dst$$reg );\n@@ -2305,3 +2276,3 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0, ECX_enc);\n-    emit_d32(cbuf,0x20);\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0, ECX_enc);\n+    emit_d32(masm,0x20);\n@@ -2309,2 +2280,2 @@\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, 0x04);\n+    emit_opcode(masm, 0x74);\n+    emit_d8(masm, 0x04);\n@@ -2312,2 +2283,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2315,2 +2286,2 @@\n-    emit_opcode(cbuf, 0x33);\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_opcode(masm, 0x33);\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($dst$$reg));\n@@ -2319,3 +2290,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xAD);\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg);\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xAD);\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg);\n@@ -2323,2 +2294,2 @@\n-    emit_opcode(cbuf,0xD3);\n-    emit_rm(cbuf, 0x3, 0x5, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode(masm,0xD3);\n+    emit_rm(masm, 0x3, 0x5, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2329,3 +2300,3 @@\n-    emit_opcode(cbuf,0xF7);\n-    emit_rm(cbuf, 0x3, 0, ECX_enc);\n-    emit_d32(cbuf,0x20);\n+    emit_opcode(masm,0xF7);\n+    emit_rm(masm, 0x3, 0, ECX_enc);\n+    emit_d32(masm,0x20);\n@@ -2333,2 +2304,2 @@\n-    emit_opcode(cbuf, 0x74);\n-    emit_d8(cbuf, 0x05);\n+    emit_opcode(masm, 0x74);\n+    emit_d8(masm, 0x05);\n@@ -2336,2 +2307,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, $dst$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2339,3 +2310,3 @@\n-    emit_opcode(cbuf, 0xC1);\n-    emit_rm(cbuf, 0x3, 7, HIGH_FROM_LOW_ENC($dst$$reg) );\n-    emit_d8(cbuf, 0x1F );\n+    emit_opcode(masm, 0xC1);\n+    emit_rm(masm, 0x3, 7, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_d8(masm, 0x1F );\n@@ -2344,3 +2315,3 @@\n-    emit_opcode(cbuf,0x0F);\n-    emit_opcode(cbuf,0xAD);\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg);\n+    emit_opcode(masm,0x0F);\n+    emit_opcode(masm,0xAD);\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg);\n@@ -2348,2 +2319,2 @@\n-    emit_opcode(cbuf,0xD3);\n-    emit_rm(cbuf, 0x3, 0x7, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode(masm,0xD3);\n+    emit_rm(masm, 0x3, 0x7, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2357,1 +2328,1 @@\n-    emit_rm(cbuf, 0x3, $secondary, $src$$reg );\n+    emit_rm(masm, 0x3, $secondary, $src$$reg );\n@@ -2362,2 +2333,2 @@\n-    emit_opcode( cbuf, 0xDD );\n-    emit_d8( cbuf, 0xD8 );\n+    emit_opcode( masm, 0xDD );\n+    emit_d8( masm, 0xD8 );\n@@ -2368,2 +2339,2 @@\n-    emit_opcode( cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-    emit_d8( cbuf, 0xD8+$dst$$reg );\n+    emit_opcode( masm, 0xDD );           \/\/ FSTP   ST(i)\n+    emit_d8( masm, 0xD8+$dst$$reg );\n@@ -2373,2 +2344,2 @@\n-    emit_opcode( cbuf, 0xD9 );\n-    emit_d8( cbuf, 0xC0-1+$dst$$reg );   \/\/ FLD ST(i-1)\n+    emit_opcode( masm, 0xD9 );\n+    emit_d8( masm, 0xC0-1+$dst$$reg );   \/\/ FLD ST(i-1)\n@@ -2378,5 +2349,5 @@\n-    emit_opcode( cbuf, 0xDB );           \/\/ FLD m80real\n-    emit_opcode( cbuf, 0x2D );\n-    emit_d32( cbuf, (int)StubRoutines::x86::addr_fpu_subnormal_bias1() );\n-    emit_opcode( cbuf, 0xDE );           \/\/ FMULP ST(dst), ST0\n-    emit_opcode( cbuf, 0xC8+$dst$$reg );\n+    emit_opcode( masm, 0xDB );           \/\/ FLD m80real\n+    emit_opcode( masm, 0x2D );\n+    emit_d32( masm, (int)StubRoutines::x86::addr_fpu_subnormal_bias1() );\n+    emit_opcode( masm, 0xDE );           \/\/ FMULP ST(dst), ST0\n+    emit_opcode( masm, 0xC8+$dst$$reg );\n@@ -2386,5 +2357,5 @@\n-    emit_opcode( cbuf, 0xDB );           \/\/ FLD m80real\n-    emit_opcode( cbuf, 0x2D );\n-    emit_d32( cbuf, (int)StubRoutines::x86::addr_fpu_subnormal_bias2() );\n-    emit_opcode( cbuf, 0xDE );           \/\/ FMULP ST(dst), ST0\n-    emit_opcode( cbuf, 0xC8+$dst$$reg );\n+    emit_opcode( masm, 0xDB );           \/\/ FLD m80real\n+    emit_opcode( masm, 0x2D );\n+    emit_d32( masm, (int)StubRoutines::x86::addr_fpu_subnormal_bias2() );\n+    emit_opcode( masm, 0xDE );           \/\/ FMULP ST(dst), ST0\n+    emit_opcode( masm, 0xC8+$dst$$reg );\n@@ -2395,1 +2366,1 @@\n-    store_to_stackslot( cbuf, $primary, $src$$reg, $dst$$disp );\n+    store_to_stackslot( masm, $primary, $src$$reg, $dst$$disp );\n@@ -2401,3 +2372,3 @@\n-    emit_rm( cbuf, 0x02, $src$$reg, ESP_enc );   \/\/ R\/M byte\n-    emit_rm( cbuf, 0x00, ESP_enc, ESP_enc);          \/\/ SIB byte\n-    emit_d32(cbuf, $dst$$disp);   \/\/ Displacement\n+    emit_rm( masm, 0x02, $src$$reg, ESP_enc );   \/\/ R\/M byte\n+    emit_rm( masm, 0x00, ESP_enc, ESP_enc);          \/\/ SIB byte\n+    emit_d32(masm, $dst$$disp);   \/\/ Displacement\n@@ -2408,1 +2379,1 @@\n-    store_to_stackslot( cbuf, $primary, $secondary, $src$$disp );\n+    store_to_stackslot( masm, $primary, $secondary, $src$$disp );\n@@ -2413,1 +2384,1 @@\n-    store_to_stackslot( cbuf, 0xD9, 0x03, $dst$$disp );\n+    store_to_stackslot( masm, 0xD9, 0x03, $dst$$disp );\n@@ -2419,1 +2390,1 @@\n-    store_to_stackslot( cbuf, 0xDD, 0x03, $dst$$disp );\n+    store_to_stackslot( masm, 0xDD, 0x03, $dst$$disp );\n@@ -2423,2 +2394,2 @@\n-    emit_opcode( cbuf, 0xDD );           \/\/ FSTP   ST(i)\n-    emit_d8( cbuf, 0xD8+$dst$$reg );\n+    emit_opcode( masm, 0xDD );           \/\/ FSTP   ST(i)\n+    emit_d8( masm, 0xD8+$dst$$reg );\n@@ -2428,2 +2399,2 @@\n-    emit_opcode( cbuf, 0xD9 );           \/\/ FLD    ST(i-1)\n-    emit_d8( cbuf, 0xC0-1+$dst$$reg );\n+    emit_opcode( masm, 0xD9 );           \/\/ FLD    ST(i-1)\n+    emit_d8( masm, 0xC0-1+$dst$$reg );\n@@ -2436,2 +2407,2 @@\n-      emit_opcode( cbuf, 0xD9 );         \/\/ FLD    ST(i-1)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 );         \/\/ FLD    ST(i-1)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2440,1 +2411,1 @@\n-    store_to_stackslot( cbuf, 0xD9, pop, $dst$$disp ); \/\/ FST<P>_S  [ESP+dst]\n+    store_to_stackslot( masm, 0xD9, pop, $dst$$disp ); \/\/ FST<P>_S  [ESP+dst]\n@@ -2447,2 +2418,2 @@\n-      emit_opcode( cbuf, 0xD9 );         \/\/ FLD    ST(i-1)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 );         \/\/ FLD    ST(i-1)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2451,1 +2422,1 @@\n-    store_to_stackslot( cbuf, 0xDD, pop, $dst$$disp ); \/\/ FST<P>_D  [ESP+dst]\n+    store_to_stackslot( masm, 0xDD, pop, $dst$$disp ); \/\/ FST<P>_D  [ESP+dst]\n@@ -2458,2 +2429,2 @@\n-      emit_opcode( cbuf, 0xD9 );         \/\/ FLD    ST(src-1)\n-      emit_d8( cbuf, 0xC0-1+$src$$reg );\n+      emit_opcode( masm, 0xD9 );         \/\/ FLD    ST(src-1)\n+      emit_d8( masm, 0xC0-1+$src$$reg );\n@@ -2462,2 +2433,2 @@\n-    emit_opcode( cbuf, 0xDD );\n-    emit_d8( cbuf, pop+$dst$$reg );      \/\/ FST<P> ST(i)\n+    emit_opcode( masm, 0xDD );\n+    emit_d8( masm, pop+$dst$$reg );      \/\/ FST<P> ST(i)\n@@ -2469,2 +2440,2 @@\n-    emit_opcode( cbuf, 0xD9 );\n-    emit_d8( cbuf, 0xC0-1+$dst$$reg );\n+    emit_opcode( masm, 0xD9 );\n+    emit_d8( masm, 0xC0-1+$dst$$reg );\n@@ -2473,2 +2444,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF7);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF7);\n@@ -2477,2 +2448,2 @@\n-      emit_opcode(cbuf, 0xD9);\n-      emit_d8(cbuf, 0xC8-1+$src$$reg );\n+      emit_opcode(masm, 0xD9);\n+      emit_d8(masm, 0xC8-1+$src$$reg );\n@@ -2480,2 +2451,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF6);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF6);\n@@ -2486,1 +2457,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2495,1 +2465,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2504,1 +2473,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2511,1 +2479,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2518,1 +2485,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2525,1 +2491,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2530,1 +2495,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2535,1 +2499,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -2543,2 +2506,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF7);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF7);\n@@ -2546,2 +2509,2 @@\n-      emit_opcode(cbuf, 0xD9);\n-      emit_d8(cbuf, 0xC8-1+$src$$reg );\n+      emit_opcode(masm, 0xD9);\n+      emit_d8(masm, 0xC8-1+$src$$reg );\n@@ -2549,2 +2512,2 @@\n-      emit_opcode (cbuf, 0xD9);\n-      emit_opcode (cbuf, 0xF6);\n+      emit_opcode (masm, 0xD9);\n+      emit_opcode (masm, 0xF6);\n@@ -2552,4 +2515,0 @@\n-    \/\/ \/\/ following asm replaced with Pop_Reg_F or Pop_Mem_F\n-    \/\/ \/\/ FSTP   FPR$dst$$reg\n-    \/\/ emit_opcode( cbuf, 0xDD );\n-    \/\/ emit_d8( cbuf, 0xD8+$dst$$reg );\n@@ -2560,2 +2519,2 @@\n-    emit_opcode( cbuf, 0xDF );\n-    emit_opcode( cbuf, 0xE0 );\n+    emit_opcode( masm, 0xDF );\n+    emit_opcode( masm, 0xE0 );\n@@ -2563,1 +2522,1 @@\n-    emit_opcode( cbuf, 0x9E );\n+    emit_opcode( masm, 0x9E );\n@@ -2565,2 +2524,2 @@\n-    emit_opcode( cbuf, 0x7B );\n-    emit_opcode( cbuf, 0x05 );\n+    emit_opcode( masm, 0x7B );\n+    emit_opcode( masm, 0x05 );\n@@ -2573,2 +2532,2 @@\n-    emit_opcode( cbuf, 0xD9 );\n-    emit_opcode( cbuf, 0xF8 );\n+    emit_opcode( masm, 0xD9 );\n+    emit_opcode( masm, 0xF8 );\n@@ -2576,1 +2535,1 @@\n-    emit_opcode( cbuf, 0x9b );\n+    emit_opcode( masm, 0x9b );\n@@ -2578,2 +2537,2 @@\n-    emit_opcode( cbuf, 0xDF );\n-    emit_opcode( cbuf, 0xE0 );\n+    emit_opcode( masm, 0xDF );\n+    emit_opcode( masm, 0xE0 );\n@@ -2581,1 +2540,1 @@\n-    emit_opcode( cbuf, 0x9E );\n+    emit_opcode( masm, 0x9E );\n@@ -2583,6 +2542,6 @@\n-    emit_opcode( cbuf, 0x0F );\n-    emit_opcode( cbuf, 0x8A );\n-    emit_opcode( cbuf, 0xF4 );\n-    emit_opcode( cbuf, 0xFF );\n-    emit_opcode( cbuf, 0xFF );\n-    emit_opcode( cbuf, 0xFF );\n+    emit_opcode( masm, 0x0F );\n+    emit_opcode( masm, 0x8A );\n+    emit_opcode( masm, 0xF4 );\n+    emit_opcode( masm, 0xFF );\n+    emit_opcode( masm, 0xFF );\n+    emit_opcode( masm, 0xFF );\n@@ -2593,2 +2552,2 @@\n-    emit_opcode( cbuf, 0xDF);\n-    emit_opcode( cbuf, 0xE0);\n+    emit_opcode( masm, 0xDF);\n+    emit_opcode( masm, 0xE0);\n@@ -2596,3 +2555,3 @@\n-    emit_opcode( cbuf, 0x66 );   \/\/ operand-size prefix for 16-bit immediate\n-    emit_opcode( cbuf, 0xA9 );\n-    emit_d16   ( cbuf, 0x0400 );\n+    emit_opcode( masm, 0x66 );   \/\/ operand-size prefix for 16-bit immediate\n+    emit_opcode( masm, 0xA9 );\n+    emit_d16   ( masm, 0x0400 );\n@@ -2601,2 +2560,2 @@\n-    \/\/ emit_opcode( cbuf, 0xA9 );\n-    \/\/ emit_d32   ( cbuf, 0x00000400 );\n+    \/\/ emit_opcode( masm, 0xA9 );\n+    \/\/ emit_d32   ( masm, 0x00000400 );\n@@ -2605,2 +2564,2 @@\n-    emit_opcode( cbuf, 0x74 );\n-    emit_d8    ( cbuf, 0x02 );\n+    emit_opcode( masm, 0x74 );\n+    emit_d8    ( masm, 0x02 );\n@@ -2608,2 +2567,2 @@\n-    emit_opcode( cbuf, 0xB4 );\n-    emit_d8    ( cbuf, 0x01 );\n+    emit_opcode( masm, 0xB4 );\n+    emit_d8    ( masm, 0x01 );\n@@ -2611,1 +2570,1 @@\n-    emit_opcode( cbuf, 0x9E);\n+    emit_opcode( masm, 0x9E);\n@@ -2618,2 +2577,2 @@\n-    emit_opcode( cbuf, 0x7B );\n-    emit_d8    ( cbuf, 0x03 );\n+    emit_opcode( masm, 0x7B );\n+    emit_d8    ( masm, 0x03 );\n@@ -2621,2 +2580,2 @@\n-    emit_opcode( cbuf, 0xB4 );\n-    emit_d8    ( cbuf, 0x01 );\n+    emit_opcode( masm, 0xB4 );\n+    emit_d8    ( masm, 0x01 );\n@@ -2624,1 +2583,1 @@\n-    emit_opcode( cbuf, 0x9E);\n+    emit_opcode( masm, 0x9E);\n@@ -2626,1 +2585,1 @@\n-    emit_opcode( cbuf, 0x90);\n+    emit_opcode( masm, 0x90);\n@@ -2646,2 +2605,2 @@\n-    emit_opcode( cbuf, 0xDF);\n-    emit_opcode( cbuf, 0xE0);\n+    emit_opcode( masm, 0xDF);\n+    emit_opcode( masm, 0xE0);\n@@ -2649,1 +2608,1 @@\n-    emit_opcode( cbuf, 0x9E);\n+    emit_opcode( masm, 0x9E);\n@@ -2651,2 +2610,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, -1 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, -1 );\n@@ -2654,2 +2613,2 @@\n-    emit_opcode( cbuf, 0x7A );\n-    emit_d8    ( cbuf, 0x13 );\n+    emit_opcode( masm, 0x7A );\n+    emit_d8    ( masm, 0x13 );\n@@ -2657,2 +2616,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, -1 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, -1 );\n@@ -2660,2 +2619,2 @@\n-    emit_opcode( cbuf, 0x72 );\n-    emit_d8    ( cbuf, 0x0C );\n+    emit_opcode( masm, 0x72 );\n+    emit_d8    ( masm, 0x0C );\n@@ -2663,2 +2622,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, 0 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, 0 );\n@@ -2666,2 +2625,2 @@\n-    emit_opcode( cbuf, 0x74 );\n-    emit_d8    ( cbuf, 0x05 );\n+    emit_opcode( masm, 0x74 );\n+    emit_d8    ( masm, 0x05 );\n@@ -2669,2 +2628,2 @@\n-    emit_opcode( cbuf, 0xB8 + $dst$$reg);\n-    emit_d32( cbuf, 1 );\n+    emit_opcode( masm, 0xB8 + $dst$$reg);\n+    emit_d32( masm, 1 );\n@@ -2678,2 +2637,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($src1$$reg), HIGH_FROM_LOW_ENC($src2$$reg) );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($src1$$reg), HIGH_FROM_LOW_ENC($src2$$reg) );\n@@ -2681,2 +2640,2 @@\n-    emit_opcode(cbuf,0x75);\n-    emit_d8(cbuf, 2 );\n+    emit_opcode(masm,0x75);\n+    emit_d8(masm, 2 );\n@@ -2684,2 +2643,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $src1$$reg, $src2$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $src1$$reg, $src2$$reg );\n@@ -2693,1 +2652,1 @@\n-    encode_Copy( cbuf, dst_encoding  , src_encoding );\n+    encode_Copy( masm, dst_encoding  , src_encoding );\n@@ -2695,1 +2654,1 @@\n-    encode_Copy( cbuf, HIGH_FROM_LOW_ENC(dst_encoding), src_encoding );\n+    encode_Copy( masm, HIGH_FROM_LOW_ENC(dst_encoding), src_encoding );\n@@ -2697,3 +2656,3 @@\n-    emit_opcode( cbuf, 0xC1 );\n-    emit_rm(cbuf, 0x3, 7, HIGH_FROM_LOW_ENC(dst_encoding) );\n-    emit_d8(cbuf, 0x1F );\n+    emit_opcode( masm, 0xC1 );\n+    emit_rm(masm, 0x3, 7, HIGH_FROM_LOW_ENC(dst_encoding) );\n+    emit_d8(masm, 0x1F );\n@@ -2704,1 +2663,1 @@\n-    emit_opcode(cbuf, 0x50+HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_opcode(masm, 0x50+HIGH_FROM_LOW_ENC($src$$reg));\n@@ -2706,1 +2665,1 @@\n-    emit_opcode(cbuf, 0x50+$src$$reg  );\n+    emit_opcode(masm, 0x50+$src$$reg  );\n@@ -2708,4 +2667,4 @@\n-    emit_opcode(cbuf,0xdf);\n-    emit_d8(cbuf, 0x6C);\n-    emit_d8(cbuf, 0x24);\n-    emit_d8(cbuf, 0x00);\n+    emit_opcode(masm,0xdf);\n+    emit_d8(masm, 0x6C);\n+    emit_d8(masm, 0x24);\n+    emit_d8(masm, 0x00);\n@@ -2713,3 +2672,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #8\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, 0x8);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #8\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, 0x8);\n@@ -2720,2 +2679,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x5, $src1$$reg );\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x5, $src1$$reg );\n@@ -2725,3 +2684,3 @@\n-      emit_opcode(cbuf, 0xC1);\n-      emit_rm(cbuf, 0x3, 7, $dst$$reg );\n-      emit_d8(cbuf, shift_count);\n+      emit_opcode(masm, 0xC1);\n+      emit_rm(masm, 0x3, 7, $dst$$reg );\n+      emit_d8(masm, shift_count);\n@@ -2734,1 +2693,1 @@\n-    emit_opcode(cbuf, 0x50+HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_opcode(masm, 0x50+HIGH_FROM_LOW_ENC($src$$reg));\n@@ -2736,1 +2695,1 @@\n-    emit_opcode(cbuf, 0x50+$src$$reg  );\n+    emit_opcode(masm, 0x50+$src$$reg  );\n@@ -2738,4 +2697,4 @@\n-    emit_opcode(cbuf,0xdf);\n-    emit_d8(cbuf, 0x6C);\n-    emit_d8(cbuf, 0x24);\n-    emit_d8(cbuf, 0x00);\n+    emit_opcode(masm,0xdf);\n+    emit_d8(masm, 0x6C);\n+    emit_d8(masm, 0x24);\n+    emit_d8(masm, 0x00);\n@@ -2747,2 +2706,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x5, $src$$reg);\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x5, $src$$reg);\n@@ -2754,2 +2713,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x4, $src$$reg);\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x4, $src$$reg);\n@@ -2762,1 +2721,1 @@\n-    encode_Copy( cbuf, $tmp$$reg, $src$$reg );\n+    encode_Copy( masm, $tmp$$reg, $src$$reg );\n@@ -2764,3 +2723,3 @@\n-    emit_opcode( cbuf, 0x0F );\n-    emit_opcode( cbuf, 0xAF );\n-    emit_rm( cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode( masm, 0x0F );\n+    emit_opcode( masm, 0xAF );\n+    emit_rm( masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2768,1 +2727,1 @@\n-    encode_Copy( cbuf, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg) );\n+    encode_Copy( masm, HIGH_FROM_LOW_ENC($dst$$reg), HIGH_FROM_LOW_ENC($src$$reg) );\n@@ -2770,3 +2729,3 @@\n-    emit_opcode( cbuf, 0x0F );\n-    emit_opcode( cbuf, 0xAF );\n-    emit_rm( cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg );\n+    emit_opcode( masm, 0x0F );\n+    emit_opcode( masm, 0xAF );\n+    emit_rm( masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $dst$$reg );\n@@ -2774,2 +2733,2 @@\n-    emit_opcode( cbuf, 0x03 );\n-    emit_rm( cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_opcode( masm, 0x03 );\n+    emit_rm( masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n@@ -2777,2 +2736,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x4, $src$$reg );\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x4, $src$$reg );\n@@ -2780,2 +2739,2 @@\n-    emit_opcode( cbuf, 0x03 );\n-    emit_rm( cbuf, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $tmp$$reg );\n+    emit_opcode( masm, 0x03 );\n+    emit_rm( masm, 0x3, HIGH_FROM_LOW_ENC($dst$$reg), $tmp$$reg );\n@@ -2788,3 +2747,3 @@\n-    emit_opcode( cbuf, 0x6B );\n-    emit_rm( cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n-    emit_d8( cbuf, (int)$src$$constant );\n+    emit_opcode( masm, 0x6B );\n+    emit_rm( masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($dst$$reg) );\n+    emit_d8( masm, (int)$src$$constant );\n@@ -2792,2 +2751,2 @@\n-    emit_opcode(cbuf, 0xB8 + EDX_enc);\n-    emit_d32( cbuf, (int)$src$$constant );\n+    emit_opcode(masm, 0xB8 + EDX_enc);\n+    emit_d32( masm, (int)$src$$constant );\n@@ -2795,2 +2754,2 @@\n-    emit_opcode( cbuf, 0xF7 );\n-    emit_rm( cbuf, 0x3, 0x4, EDX_enc );\n+    emit_opcode( masm, 0xF7 );\n+    emit_rm( masm, 0x3, 0x4, EDX_enc );\n@@ -2798,2 +2757,2 @@\n-    emit_opcode( cbuf, 0x03 );\n-    emit_rm( cbuf, 0x3, EDX_enc, $tmp$$reg );\n+    emit_opcode( masm, 0x03 );\n+    emit_rm( masm, 0x3, EDX_enc, $tmp$$reg );\n@@ -2804,1 +2763,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW_ENC(0x50+$src1$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW_ENC(0x50+$src1$$reg) );\n@@ -2806,1 +2765,1 @@\n-    emit_opcode(cbuf,               0x50+$src1$$reg  );\n+    emit_opcode(masm,               0x50+$src1$$reg  );\n@@ -2808,1 +2767,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW_ENC(0x50+$src2$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW_ENC(0x50+$src2$$reg) );\n@@ -2810,1 +2769,1 @@\n-    emit_opcode(cbuf,               0x50+$src2$$reg  );\n+    emit_opcode(masm,               0x50+$src2$$reg  );\n@@ -2812,4 +2771,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (CAST_FROM_FN_PTR(address, SharedRuntime::ldiv) - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (CAST_FROM_FN_PTR(address, SharedRuntime::ldiv) - __ pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -2818,3 +2777,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, 4*4);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, 4*4);\n@@ -2825,1 +2784,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW_ENC(0x50+$src1$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW_ENC(0x50+$src1$$reg) );\n@@ -2827,1 +2786,1 @@\n-    emit_opcode(cbuf,               0x50+$src1$$reg  );\n+    emit_opcode(masm,               0x50+$src1$$reg  );\n@@ -2829,1 +2788,1 @@\n-    emit_opcode(cbuf, HIGH_FROM_LOW_ENC(0x50+$src2$$reg) );\n+    emit_opcode(masm, HIGH_FROM_LOW_ENC(0x50+$src2$$reg) );\n@@ -2831,1 +2790,1 @@\n-    emit_opcode(cbuf,               0x50+$src2$$reg  );\n+    emit_opcode(masm,               0x50+$src2$$reg  );\n@@ -2833,4 +2792,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (CAST_FROM_FN_PTR(address, SharedRuntime::lrem ) - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (CAST_FROM_FN_PTR(address, SharedRuntime::lrem ) - __ pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -2839,3 +2798,3 @@\n-    emit_opcode(cbuf, 0x83); \/\/ add  SP, #framesize\n-    emit_rm(cbuf, 0x3, 0x00, ESP_enc);\n-    emit_d8(cbuf, 4*4);\n+    emit_opcode(masm, 0x83); \/\/ add  SP, #framesize\n+    emit_rm(masm, 0x3, 0x00, ESP_enc);\n+    emit_d8(masm, 4*4);\n@@ -2846,2 +2805,2 @@\n-    emit_opcode(cbuf, 0x8B);\n-    emit_rm(cbuf, 0x3, $tmp$$reg, $src$$reg);\n+    emit_opcode(masm, 0x8B);\n+    emit_rm(masm, 0x3, $tmp$$reg, $src$$reg);\n@@ -2849,2 +2808,2 @@\n-    emit_opcode(cbuf, 0x0B);\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src$$reg));\n+    emit_opcode(masm, 0x0B);\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src$$reg));\n@@ -2855,2 +2814,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $src1$$reg, $src2$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $src1$$reg, $src2$$reg );\n@@ -2858,2 +2817,2 @@\n-    emit_cc(cbuf, 0x70, 0x5);\n-    emit_d8(cbuf,2);\n+    emit_cc(masm, 0x70, 0x5);\n+    emit_d8(masm,2);\n@@ -2861,2 +2820,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, HIGH_FROM_LOW_ENC($src1$$reg), HIGH_FROM_LOW_ENC($src2$$reg) );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, HIGH_FROM_LOW_ENC($src1$$reg), HIGH_FROM_LOW_ENC($src2$$reg) );\n@@ -2867,2 +2826,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $src1$$reg, $src2$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $src1$$reg, $src2$$reg );\n@@ -2870,2 +2829,2 @@\n-    emit_opcode( cbuf, 0x8B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src1$$reg) );\n+    emit_opcode( masm, 0x8B );\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src1$$reg) );\n@@ -2873,2 +2832,2 @@\n-    emit_opcode( cbuf, 0x1B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src2$$reg) );\n+    emit_opcode( masm, 0x1B );\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src2$$reg) );\n@@ -2879,2 +2838,2 @@\n-    emit_opcode(cbuf,0x33);  \/\/ XOR\n-    emit_rm(cbuf,0x3, $tmp$$reg, $tmp$$reg);\n+    emit_opcode(masm,0x33);  \/\/ XOR\n+    emit_rm(masm,0x3, $tmp$$reg, $tmp$$reg);\n@@ -2882,2 +2841,2 @@\n-    emit_opcode( cbuf, 0x3B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, $src$$reg );\n+    emit_opcode( masm, 0x3B );\n+    emit_rm(masm, 0x3, $tmp$$reg, $src$$reg );\n@@ -2885,2 +2844,2 @@\n-    emit_opcode( cbuf, 0x1B );\n-    emit_rm(cbuf, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src$$reg) );\n+    emit_opcode( masm, 0x1B );\n+    emit_rm(masm, 0x3, $tmp$$reg, HIGH_FROM_LOW_ENC($src$$reg) );\n@@ -2891,7 +2850,7 @@\n-    emit_opcode(cbuf,0xF7);    \/\/ NEG hi\n-    emit_rm    (cbuf,0x3, 0x3, HIGH_FROM_LOW_ENC($dst$$reg));\n-    emit_opcode(cbuf,0xF7);    \/\/ NEG lo\n-    emit_rm    (cbuf,0x3, 0x3,               $dst$$reg );\n-    emit_opcode(cbuf,0x83);    \/\/ SBB hi,0\n-    emit_rm    (cbuf,0x3, 0x3, HIGH_FROM_LOW_ENC($dst$$reg));\n-    emit_d8    (cbuf,0 );\n+    emit_opcode(masm,0xF7);    \/\/ NEG hi\n+    emit_rm    (masm,0x3, 0x3, HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_opcode(masm,0xF7);    \/\/ NEG lo\n+    emit_rm    (masm,0x3, 0x3,               $dst$$reg );\n+    emit_opcode(masm,0x83);    \/\/ SBB hi,0\n+    emit_rm    (masm,0x3, 0x3, HIGH_FROM_LOW_ENC($dst$$reg));\n+    emit_d8    (masm,0 );\n@@ -2901,1 +2860,1 @@\n-    emit_opcode(cbuf,0x5A);\n+    emit_opcode(masm,0x5A);\n@@ -2905,4 +2864,3 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf, 0xE9);        \/\/ jmp    entry\n-    emit_d32_reloc(cbuf, (int)OptoRuntime::rethrow_stub() - ((int)cbuf.insts_end())-4,\n+    __ set_inst_mark();\n+    emit_opcode(masm, 0xE9);        \/\/ jmp    entry\n+    emit_d32_reloc(masm, (int)OptoRuntime::rethrow_stub() - ((int)__ pc())-4,\n@@ -2910,0 +2868,1 @@\n+    __ clear_inst_mark();\n@@ -2927,3 +2886,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW  trunc\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32(cbuf,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW  trunc\n+    emit_opcode(masm,0x2D);\n+    emit_d32(masm,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n@@ -2931,3 +2890,3 @@\n-    emit_opcode(cbuf,0x83);            \/\/ SUB ESP,4\n-    emit_opcode(cbuf,0xEC);\n-    emit_d8(cbuf,0x04);\n+    emit_opcode(masm,0x83);            \/\/ SUB ESP,4\n+    emit_opcode(masm,0xEC);\n+    emit_d8(masm,0x04);\n@@ -2936,3 +2895,3 @@\n-    emit_opcode(cbuf,0xDB);            \/\/ FISTP [ESP]\n-    emit_opcode(cbuf,0x1C);\n-    emit_d8(cbuf,0x24);\n+    emit_opcode(masm,0xDB);            \/\/ FISTP [ESP]\n+    emit_opcode(masm,0x1C);\n+    emit_d8(masm,0x24);\n@@ -2940,3 +2899,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW   std\/24-bit mode\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32( cbuf, Compile::current()->in_24_bit_fp_mode()\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW   std\/24-bit mode\n+    emit_opcode(masm,0x2D);\n+    emit_d32( masm, Compile::current()->in_24_bit_fp_mode()\n@@ -2947,5 +2906,5 @@\n-    emit_opcode(cbuf,0x58);       \/\/ POP EAX\n-    emit_opcode(cbuf,0x3D);       \/\/ CMP EAX,imm\n-    emit_d32   (cbuf,0x80000000); \/\/         0x80000000\n-    emit_opcode(cbuf,0x75);       \/\/ JNE around_slow_call\n-    emit_d8    (cbuf,0x07);       \/\/ Size of slow_call\n+    emit_opcode(masm,0x58);       \/\/ POP EAX\n+    emit_opcode(masm,0x3D);       \/\/ CMP EAX,imm\n+    emit_d32   (masm,0x80000000); \/\/         0x80000000\n+    emit_opcode(masm,0x75);       \/\/ JNE around_slow_call\n+    emit_d8    (masm,0x07);       \/\/ Size of slow_call\n@@ -2953,2 +2912,2 @@\n-    emit_opcode(cbuf,0xD9 );      \/\/ FLD     ST(i)\n-    emit_d8    (cbuf,0xC0-1+$src$$reg );\n+    emit_opcode(masm,0xD9 );      \/\/ FLD     ST(i)\n+    emit_d8    (masm,0xC0-1+$src$$reg );\n@@ -2956,4 +2915,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (StubRoutines::x86::d2i_wrapper() - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (StubRoutines::x86::d2i_wrapper() - __ pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -2965,3 +2924,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW  trunc\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32(cbuf,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW  trunc\n+    emit_opcode(masm,0x2D);\n+    emit_d32(masm,(int)StubRoutines::x86::addr_fpu_cntrl_wrd_trunc());\n@@ -2969,3 +2928,3 @@\n-    emit_opcode(cbuf,0x83);            \/\/ SUB ESP,8\n-    emit_opcode(cbuf,0xEC);\n-    emit_d8(cbuf,0x08);\n+    emit_opcode(masm,0x83);            \/\/ SUB ESP,8\n+    emit_opcode(masm,0xEC);\n+    emit_d8(masm,0x08);\n@@ -2974,3 +2933,3 @@\n-    emit_opcode(cbuf,0xDF);            \/\/ FISTP [ESP]\n-    emit_opcode(cbuf,0x3C);\n-    emit_d8(cbuf,0x24);\n+    emit_opcode(masm,0xDF);            \/\/ FISTP [ESP]\n+    emit_opcode(masm,0x3C);\n+    emit_d8(masm,0x24);\n@@ -2978,3 +2937,3 @@\n-    emit_opcode(cbuf,0xD9);            \/\/ FLDCW   std\/24-bit mode\n-    emit_opcode(cbuf,0x2D);\n-    emit_d32( cbuf, Compile::current()->in_24_bit_fp_mode()\n+    emit_opcode(masm,0xD9);            \/\/ FLDCW   std\/24-bit mode\n+    emit_opcode(masm,0x2D);\n+    emit_d32( masm, Compile::current()->in_24_bit_fp_mode()\n@@ -2985,11 +2944,11 @@\n-    emit_opcode(cbuf,0x58);       \/\/ POP EAX\n-    emit_opcode(cbuf,0x5A);       \/\/ POP EDX\n-    emit_opcode(cbuf,0x81);       \/\/ CMP EDX,imm\n-    emit_d8    (cbuf,0xFA);       \/\/ rdx\n-    emit_d32   (cbuf,0x80000000); \/\/         0x80000000\n-    emit_opcode(cbuf,0x75);       \/\/ JNE around_slow_call\n-    emit_d8    (cbuf,0x07+4);     \/\/ Size of slow_call\n-    emit_opcode(cbuf,0x85);       \/\/ TEST EAX,EAX\n-    emit_opcode(cbuf,0xC0);       \/\/ 2\/rax,\/rax,\n-    emit_opcode(cbuf,0x75);       \/\/ JNE around_slow_call\n-    emit_d8    (cbuf,0x07);       \/\/ Size of slow_call\n+    emit_opcode(masm,0x58);       \/\/ POP EAX\n+    emit_opcode(masm,0x5A);       \/\/ POP EDX\n+    emit_opcode(masm,0x81);       \/\/ CMP EDX,imm\n+    emit_d8    (masm,0xFA);       \/\/ rdx\n+    emit_d32   (masm,0x80000000); \/\/         0x80000000\n+    emit_opcode(masm,0x75);       \/\/ JNE around_slow_call\n+    emit_d8    (masm,0x07+4);     \/\/ Size of slow_call\n+    emit_opcode(masm,0x85);       \/\/ TEST EAX,EAX\n+    emit_opcode(masm,0xC0);       \/\/ 2\/rax,\/rax,\n+    emit_opcode(masm,0x75);       \/\/ JNE around_slow_call\n+    emit_d8    (masm,0x07);       \/\/ Size of slow_call\n@@ -2997,2 +2956,2 @@\n-    emit_opcode(cbuf,0xD9 );      \/\/ FLD     ST(i)\n-    emit_d8    (cbuf,0xC0-1+$src$$reg );\n+    emit_opcode(masm,0xD9 );      \/\/ FLD     ST(i)\n+    emit_d8    (masm,0xC0-1+$src$$reg );\n@@ -3000,4 +2959,4 @@\n-    MacroAssembler _masm(&cbuf);\n-    cbuf.set_insts_mark();\n-    emit_opcode(cbuf,0xE8);       \/\/ Call into runtime\n-    emit_d32_reloc(cbuf, (StubRoutines::x86::d2l_wrapper() - cbuf.insts_end()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ set_inst_mark();\n+    emit_opcode(masm,0xE8);       \/\/ Call into runtime\n+    emit_d32_reloc(masm, (StubRoutines::x86::d2l_wrapper() - __ pc()) - 4, runtime_call_Relocation::spec(), RELOC_IMM32 );\n+    __ clear_inst_mark();\n@@ -3011,2 +2970,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC8 + $src1$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC8 + $src1$$reg);\n@@ -3017,2 +2976,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC0 + $src2$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC0 + $src2$$reg);\n@@ -3024,2 +2983,2 @@\n-    emit_opcode(cbuf, 0xDE);\n-    emit_opcode(cbuf, 0xC0 + $src2$$reg);\n+    emit_opcode(masm, 0xDE);\n+    emit_opcode(masm, 0xC0 + $src2$$reg);\n@@ -3031,2 +2990,2 @@\n-      emit_opcode(cbuf, 0xD8);\n-      emit_opcode(cbuf, 0xE0 + $src1$$reg);\n+      emit_opcode(masm, 0xD8);\n+      emit_opcode(masm, 0xE0 + $src1$$reg);\n@@ -3035,2 +2994,2 @@\n-      emit_opcode(cbuf, 0xD8);\n-      emit_opcode(cbuf, 0xF0 + $src2$$reg);\n+      emit_opcode(masm, 0xD8);\n+      emit_opcode(masm, 0xF0 + $src2$$reg);\n@@ -3042,2 +3001,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC0 + $src1$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC0 + $src1$$reg);\n@@ -3046,2 +3005,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC8 + $src2$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC8 + $src2$$reg);\n@@ -3054,2 +3013,2 @@\n-    emit_opcode(cbuf, 0xD8);\n-    emit_opcode(cbuf, 0xC0 + $src1$$reg);\n+    emit_opcode(masm, 0xD8);\n+    emit_opcode(masm, 0xC0 + $src1$$reg);\n@@ -3058,2 +3017,2 @@\n-    emit_opcode(cbuf, 0xDE);\n-    emit_opcode(cbuf, 0xC8 + $src2$$reg);\n+    emit_opcode(masm, 0xDE);\n+    emit_opcode(masm, 0xC8 + $src2$$reg);\n@@ -3064,1 +3023,1 @@\n-    emit_opcode(cbuf,0xDF);\n+    emit_opcode(masm,0xDF);\n@@ -3071,2 +3030,2 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n-    store_to_stackslot( cbuf, 0x0DF, 0x07, $dst$$disp );\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    store_to_stackslot( masm, 0x0DF, 0x07, $dst$$disp );\n@@ -3080,3 +3039,3 @@\n-    store_to_stackslot( cbuf, 0x0DF, 0x05, $src$$disp );\n-    cbuf.set_insts_mark();            \/\/ Mark start of FIST in case $mem has an oop\n-    emit_opcode(cbuf,0xDF);\n+    store_to_stackslot( masm, 0x0DF, 0x05, $src$$disp );\n+    __ set_inst_mark();            \/\/ Mark start of FIST in case $mem has an oop\n+    emit_opcode(masm,0xDF);\n@@ -3089,1 +3048,2 @@\n-    encode_RegMem(cbuf, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace, disp_reloc);\n+    __ clear_inst_mark();\n@@ -3399,1 +3359,1 @@\n-\/\/ NULL Pointer Immediate\n+\/\/ nullptr Pointer Immediate\n@@ -5864,1 +5824,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5876,1 +5836,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5887,1 +5847,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5900,2 +5860,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_DPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -5950,2 +5910,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_FPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -5962,1 +5922,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5972,1 +5932,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5982,1 +5942,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -5992,1 +5952,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -6002,1 +5962,1 @@\n-  ins_encode( OpcP, RegMem(dst,mem));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,mem), ClearInstMark);\n@@ -6011,1 +5971,1 @@\n-  ins_encode( LdImmI(dst, src) );\n+  ins_encode( SetInstMark, LdImmI(dst, src), ClearInstMark );\n@@ -6032,1 +5992,1 @@\n-  ins_encode( LdImmP(dst, src) );\n+  ins_encode( SetInstMark, LdImmP(dst, src), ClearInstMark );\n@@ -6190,1 +6150,1 @@\n-  ins_encode( OpcP, RegMem(dst,src));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,src), ClearInstMark);\n@@ -6201,1 +6161,1 @@\n-  ins_encode( OpcP, RegMem( dst, src ), OpcS, RegMem_Hi( dst, src ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src ), OpcS, RegMem_Hi( dst, src ), ClearInstMark );\n@@ -6212,1 +6172,1 @@\n-  ins_encode( OpcP, RegMem(dst,src));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,src), ClearInstMark);\n@@ -6224,2 +6184,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_FPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -6237,2 +6197,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_DPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -6312,1 +6272,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6323,1 +6283,1 @@\n-  ins_encode( OpcS, OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcS, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6334,1 +6294,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6347,1 +6307,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ), OpcS, RegMem_Hi( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), OpcS, RegMem_Hi( src, mem ), ClearInstMark );\n@@ -6375,1 +6335,1 @@\n-  ins_encode( OpcP, RegMem( EAX, mem ), enc_storeL_volatile(mem,src));\n+  ins_encode( SetInstMark, OpcP, RegMem( EAX, mem ), enc_storeL_volatile(mem,src), ClearInstMark);\n@@ -6422,1 +6382,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -6433,1 +6393,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con32(src), ClearInstMark);\n@@ -6445,1 +6405,1 @@\n-  ins_encode( SizePrefix, OpcP, RMopc_Mem(0x00,mem),  Con16( src ));\n+  ins_encode( SetInstMark, SizePrefix, OpcP, RMopc_Mem(0x00,mem), Con16(src), ClearInstMark);\n@@ -6457,1 +6417,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con32( src ), ClearInstMark);\n@@ -6468,1 +6428,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con8or32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con8or32(src), ClearInstMark);\n@@ -6479,1 +6439,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con8or32( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem), Con8or32(src), ClearInstMark);\n@@ -6578,1 +6538,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32FPR_as_bits( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),  Con32FPR_as_bits(src), ClearInstMark);\n@@ -6590,1 +6550,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),  Con32F_as_bits( src ));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),  Con32F_as_bits(src), ClearInstMark);\n@@ -6624,1 +6584,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ), ClearInstMark );\n@@ -6799,1 +6759,1 @@\n-  ins_encode( enc_cmov(cop), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cop), RegMem( dst, src ), ClearInstMark );\n@@ -6810,1 +6770,1 @@\n-  ins_encode( enc_cmov(cop), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cop), RegMem( dst, src ), ClearInstMark );\n@@ -7108,1 +7068,1 @@\n-  ins_encode( OpcP, RegLea( dst, src0, src1 ) );\n+  ins_encode( SetInstMark, OpcP, RegLea( dst, src0, src1 ), ClearInstMark );\n@@ -7118,1 +7078,1 @@\n-  ins_encode( OpcP, RegLea( dst, src0, src1 ) );\n+  ins_encode( SetInstMark, OpcP, RegLea( dst, src0, src1 ), ClearInstMark );\n@@ -7163,1 +7123,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -7174,1 +7134,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -7186,1 +7146,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(0x00,dst), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(0x00,dst), Con8or32(src), ClearInstMark );\n@@ -7197,1 +7157,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,dst), ClearInstMark);\n@@ -7208,1 +7168,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x01,dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x01,dst), ClearInstMark);\n@@ -7532,1 +7492,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -7543,1 +7503,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -7649,1 +7609,1 @@\n-  ins_encode( OpcSE(imm), RegMem( dst, src ), Con8or32( imm ) );\n+  ins_encode( SetInstMark, OpcSE(imm), RegMem( dst, src ), Con8or32( imm ), ClearInstMark );\n@@ -7661,1 +7621,1 @@\n-  ins_encode( OpcS, OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcS, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -8066,1 +8026,1 @@\n-  ins_encode( OpcP, RMopc_Mem(secondary,dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(secondary,dst), ClearInstMark );\n@@ -8089,1 +8049,1 @@\n-  ins_encode( OpcP, RMopc_Mem(secondary, dst ), Con8or32( shift ) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(secondary, dst ), Con8or32(shift), ClearInstMark );\n@@ -8205,1 +8165,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -8217,1 +8177,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -8230,1 +8190,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32(src), ClearInstMark );\n@@ -8396,1 +8356,1 @@\n-  ins_encode( OpcP, RegMem( dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, src), ClearInstMark );\n@@ -8408,1 +8368,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -8421,1 +8381,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32(src), ClearInstMark );\n@@ -8603,1 +8563,1 @@\n-  ins_encode( OpcP, RegMem(dst, src) );\n+  ins_encode( SetInstMark, OpcP, RegMem(dst, src), ClearInstMark );\n@@ -8615,1 +8575,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), ClearInstMark );\n@@ -8627,1 +8587,1 @@\n-  ins_encode( OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32( src ) );\n+  ins_encode( SetInstMark, OpcSE( src ), RMopc_Mem(secondary, dst ), Con8or32(src), ClearInstMark );\n@@ -8913,1 +8873,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -8948,1 +8908,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -8991,1 +8951,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -9229,1 +9189,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -9275,1 +9235,1 @@\n-  ins_encode( OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem) );\n+  ins_encode( SetInstMark, OpcP, RegMem( dst, mem), OpcS, RegMem_Hi(dst,mem), ClearInstMark );\n@@ -9557,1 +9517,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -9586,1 +9546,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -9617,1 +9577,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -9637,1 +9597,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -9679,2 +9639,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -9741,2 +9701,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -9756,4 +9716,5 @@\n-  ins_encode( Opcode(0xDD), RMopc_Mem(0x00,dst),\n-              Opcode(0xD8), RegOpc(src),\n-              set_instruction_start,\n-              Opcode(0xDD), RMopc_Mem(0x03,dst) );\n+  ins_encode( SetInstMark, Opcode(0xDD), RMopc_Mem(0x00,dst),\n+              Opcode(0xD8), RegOpc(src), ClearInstMark,\n+              SetInstMark,\n+              Opcode(0xDD), RMopc_Mem(0x03,dst),\n+              ClearInstMark);\n@@ -9864,2 +9825,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -9879,1 +9840,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,mem),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,mem),\n@@ -9881,1 +9842,1 @@\n-              Pop_Reg_DPR(dst) );\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -10140,1 +10101,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -10169,1 +10130,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -10200,1 +10161,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -10220,1 +10181,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -10306,1 +10267,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10308,1 +10269,1 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst), ClearInstMark );\n@@ -10320,2 +10281,2 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src),\n-              OpcP, RegOpc(dst) );\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src),\n+              OpcP, RegOpc(dst), ClearInstMark );\n@@ -10333,1 +10294,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src1),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src1),\n@@ -10335,1 +10296,1 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst), ClearInstMark );\n@@ -10347,2 +10308,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n-              set_instruction_start,\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10350,1 +10310,2 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst),\n+              ClearInstMark);\n@@ -10361,2 +10322,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n-              set_instruction_start,\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10364,1 +10324,2 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst),\n+              ClearInstMark);\n@@ -10440,1 +10401,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10442,1 +10403,1 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst), ClearInstMark );\n@@ -10454,1 +10415,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10456,1 +10417,1 @@\n-              Pop_Reg_FPR(dst) );\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -10467,2 +10428,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,src2),\n-              set_instruction_start,\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,src2),\n@@ -10470,1 +10430,2 @@\n-              Pop_Mem_FPR(dst) );\n+              Pop_Mem_FPR(dst),\n+              ClearInstMark );\n@@ -10518,1 +10479,1 @@\n-  ins_encode( Opcode(tertiary), RMopc_Mem(0x00,mem1),\n+  ins_encode( SetInstMark, Opcode(tertiary), RMopc_Mem(0x00,mem1),\n@@ -10520,1 +10481,1 @@\n-              Pop_Reg_FPR(dst) );\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -10536,1 +10497,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem1),\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem1),\n@@ -10539,1 +10500,1 @@\n-              Pop_Reg_FPR(dst) );\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -11078,2 +11039,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_DPR(dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_DPR(dst), ClearInstMark);\n@@ -11116,2 +11077,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Mem_FPR(dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Mem_FPR(dst), ClearInstMark);\n@@ -11140,2 +11101,2 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,mem),\n-              Pop_Reg_FPR(dst));\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,mem),\n+              Pop_Reg_FPR(dst), ClearInstMark);\n@@ -11339,2 +11300,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_FPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_FPR(dst), ClearInstMark );\n@@ -11378,1 +11339,1 @@\n-  ins_encode( OpcP, RegMem(dst,src), OpcS, RegMem_Hi(dst,src));\n+  ins_encode( SetInstMark, OpcP, RegMem(dst,src), OpcS, RegMem_Hi(dst,src), ClearInstMark);\n@@ -11429,1 +11390,1 @@\n-  ins_encode( OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, dst ), OpcS, RegMem_Hi( src, dst ), ClearInstMark );\n@@ -11443,2 +11404,2 @@\n-  ins_encode( OpcP, RMopc_Mem_no_oop(0x00,src),\n-              Pop_Reg_DPR(dst) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem_no_oop(0x00,src),\n+              Pop_Reg_DPR(dst), ClearInstMark );\n@@ -12358,1 +12319,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12386,1 +12347,1 @@\n-  ins_encode( OpcP, RegMem( src, mem ) );\n+  ins_encode( SetInstMark, OpcP, RegMem( src, mem ), ClearInstMark );\n@@ -12417,1 +12378,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12455,1 +12416,1 @@\n-  ins_encode( OpcSErm( op1, op2 ), Con8or32( op2 ) );\n+  ins_encode( SetInstMark, OpcSErm( op1, op2 ), Con8or32( op2 ), ClearInstMark );\n@@ -12466,1 +12427,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12489,1 +12450,1 @@\n-  ins_encode( OpcP, RegMem( op1, op2) );\n+  ins_encode( SetInstMark, OpcP, RegMem( op1, op2), ClearInstMark );\n@@ -12514,1 +12475,1 @@\n-  ins_encode( OpcP, RMopc_Mem(0x00,op), Con_d32(0xFFFFFFFF) );\n+  ins_encode( SetInstMark, OpcP, RMopc_Mem(0x00,op), Con_d32(0xFFFFFFFF), ClearInstMark );\n@@ -13082,1 +13043,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src), ClearInstMark );\n@@ -13121,1 +13082,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem( dst, src ), ClearInstMark );\n@@ -13291,1 +13252,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src), ClearInstMark );\n@@ -13312,1 +13273,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem( dst, src ), ClearInstMark );\n@@ -13492,1 +13453,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem(dst, src), enc_cmov(cmp), RegMem_Hi(dst, src), ClearInstMark );\n@@ -13531,1 +13492,1 @@\n-  ins_encode( enc_cmov(cmp), RegMem( dst, src ) );\n+  ins_encode( SetInstMark, enc_cmov(cmp), RegMem( dst, src ), ClearInstMark );\n@@ -13851,0 +13812,1 @@\n+    __ set_inst_mark();\n@@ -13852,0 +13814,1 @@\n+    __ clear_inst_mark();\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":850,"deletions":887,"binary":false,"changes":1737,"status":"modified"},{"patch":"@@ -361,1 +361,1 @@\n-#define __ _masm.\n+#define __ masm->\n@@ -521,0 +521,184 @@\n+<<<<<<< HEAD\n+\/\/ EMIT_RM()\n+void emit_rm(C2_MacroAssembler *masm, int f1, int f2, int f3) {\n+  unsigned char c = (unsigned char) ((f1 << 6) | (f2 << 3) | f3);\n+  __ emit_int8(c);\n+}\n+\n+\/\/ EMIT_CC()\n+void emit_cc(C2_MacroAssembler *masm, int f1, int f2) {\n+  unsigned char c = (unsigned char) (f1 | f2);\n+  __ emit_int8(c);\n+}\n+\n+\/\/ EMIT_OPCODE()\n+void emit_opcode(C2_MacroAssembler *masm, int code) {\n+  __ emit_int8((unsigned char) code);\n+}\n+\n+\/\/ EMIT_OPCODE() w\/ relocation information\n+void emit_opcode(C2_MacroAssembler *masm,\n+                 int code, relocInfo::relocType reloc, int offset, int format)\n+{\n+  __ relocate(__ inst_mark() + offset, reloc, format);\n+  emit_opcode(masm, code);\n+}\n+\n+\/\/ EMIT_D8()\n+void emit_d8(C2_MacroAssembler *masm, int d8) {\n+  __ emit_int8((unsigned char) d8);\n+}\n+\n+\/\/ EMIT_D16()\n+void emit_d16(C2_MacroAssembler *masm, int d16) {\n+  __ emit_int16(d16);\n+}\n+\n+\/\/ EMIT_D32()\n+void emit_d32(C2_MacroAssembler *masm, int d32) {\n+  __ emit_int32(d32);\n+}\n+\n+\/\/ EMIT_D64()\n+void emit_d64(C2_MacroAssembler *masm, int64_t d64) {\n+  __ emit_int64(d64);\n+}\n+\n+\/\/ emit 32 bit value and construct relocation entry from relocInfo::relocType\n+void emit_d32_reloc(C2_MacroAssembler* masm,\n+                    int d32,\n+                    relocInfo::relocType reloc,\n+                    int format)\n+{\n+  assert(reloc != relocInfo::external_word_type, \"use 2-arg emit_d32_reloc\");\n+  __ relocate(__ inst_mark(), reloc, format);\n+  __ emit_int32(d32);\n+}\n+\n+\/\/ emit 32 bit value and construct relocation entry from RelocationHolder\n+void emit_d32_reloc(C2_MacroAssembler* masm, int d32, RelocationHolder const& rspec, int format) {\n+#ifdef ASSERT\n+  if (rspec.reloc()->type() == relocInfo::oop_type &&\n+      d32 != 0 && d32 != (intptr_t) Universe::non_oop_word()) {\n+    assert(Universe::heap()->is_in((address)(intptr_t)d32), \"should be real oop\");\n+    assert(oopDesc::is_oop(cast_to_oop((intptr_t)d32)), \"cannot embed broken oops in code\");\n+  }\n+#endif\n+  __ relocate(__ inst_mark(), rspec, format);\n+  __ emit_int32(d32);\n+}\n+\n+void emit_d32_reloc(C2_MacroAssembler* masm, address addr) {\n+  address next_ip = __ pc() + 4;\n+  emit_d32_reloc(masm, (int) (addr - next_ip),\n+                 external_word_Relocation::spec(addr),\n+                 RELOC_DISP32);\n+}\n+\n+\n+\/\/ emit 64 bit value and construct relocation entry from relocInfo::relocType\n+void emit_d64_reloc(C2_MacroAssembler* masm, int64_t d64, relocInfo::relocType reloc, int format) {\n+  __ relocate(__ inst_mark(), reloc, format);\n+  __ emit_int64(d64);\n+}\n+\n+\/\/ emit 64 bit value and construct relocation entry from RelocationHolder\n+void emit_d64_reloc(C2_MacroAssembler* masm, int64_t d64, RelocationHolder const& rspec, int format) {\n+#ifdef ASSERT\n+  if (rspec.reloc()->type() == relocInfo::oop_type &&\n+      d64 != 0 && d64 != (int64_t) Universe::non_oop_word()) {\n+    assert(Universe::heap()->is_in((address)d64), \"should be real oop\");\n+    assert(oopDesc::is_oop(cast_to_oop(d64)), \"cannot embed broken oops in code\");\n+  }\n+#endif\n+  __ relocate(__ inst_mark(), rspec, format);\n+  __ emit_int64(d64);\n+}\n+\n+\/\/ Access stack slot for load or store\n+void store_to_stackslot(C2_MacroAssembler *masm, int opcode, int rm_field, int disp)\n+{\n+  emit_opcode(masm, opcode);                  \/\/ (e.g., FILD   [RSP+src])\n+  if (-0x80 <= disp && disp < 0x80) {\n+    emit_rm(masm, 0x01, rm_field, RSP_enc);   \/\/ R\/M byte\n+    emit_rm(masm, 0x00, RSP_enc, RSP_enc);    \/\/ SIB byte\n+    emit_d8(masm, disp);     \/\/ Displacement  \/\/ R\/M byte\n+  } else {\n+    emit_rm(masm, 0x02, rm_field, RSP_enc);   \/\/ R\/M byte\n+    emit_rm(masm, 0x00, RSP_enc, RSP_enc);    \/\/ SIB byte\n+    emit_d32(masm, disp);     \/\/ Displacement \/\/ R\/M byte\n+  }\n+}\n+\n+   \/\/ rRegI ereg, memory mem) %{    \/\/ emit_reg_mem\n+void encode_RegMem(C2_MacroAssembler *masm,\n+                   int reg,\n+                   int base, int index, int scale, int disp, relocInfo::relocType disp_reloc)\n+{\n+  assert(disp_reloc == relocInfo::none, \"cannot have disp\");\n+  int regenc = reg & 7;\n+  int baseenc = base & 7;\n+  int indexenc = index & 7;\n+\n+  \/\/ There is no index & no scale, use form without SIB byte\n+  if (index == 0x4 && scale == 0 && base != RSP_enc && base != R12_enc) {\n+    \/\/ If no displacement, mode is 0x0; unless base is [RBP] or [R13]\n+    if (disp == 0 && base != RBP_enc && base != R13_enc) {\n+      emit_rm(masm, 0x0, regenc, baseenc); \/\/ *\n+    } else if (-0x80 <= disp && disp < 0x80 && disp_reloc == relocInfo::none) {\n+      \/\/ If 8-bit displacement, mode 0x1\n+      emit_rm(masm, 0x1, regenc, baseenc); \/\/ *\n+      emit_d8(masm, disp);\n+    } else {\n+      \/\/ If 32-bit displacement\n+      if (base == -1) { \/\/ Special flag for absolute address\n+        emit_rm(masm, 0x0, regenc, 0x5); \/\/ *\n+        if (disp_reloc != relocInfo::none) {\n+          emit_d32_reloc(masm, disp, relocInfo::oop_type, RELOC_DISP32);\n+        } else {\n+          emit_d32(masm, disp);\n+        }\n+      } else {\n+        \/\/ Normal base + offset\n+        emit_rm(masm, 0x2, regenc, baseenc); \/\/ *\n+        if (disp_reloc != relocInfo::none) {\n+          emit_d32_reloc(masm, disp, relocInfo::oop_type, RELOC_DISP32);\n+        } else {\n+          emit_d32(masm, disp);\n+        }\n+      }\n+    }\n+  } else {\n+    \/\/ Else, encode with the SIB byte\n+    \/\/ If no displacement, mode is 0x0; unless base is [RBP] or [R13]\n+    if (disp == 0 && base != RBP_enc && base != R13_enc) {\n+      \/\/ If no displacement\n+      emit_rm(masm, 0x0, regenc, 0x4); \/\/ *\n+      emit_rm(masm, scale, indexenc, baseenc);\n+    } else {\n+      if (-0x80 <= disp && disp < 0x80 && disp_reloc == relocInfo::none) {\n+        \/\/ If 8-bit displacement, mode 0x1\n+        emit_rm(masm, 0x1, regenc, 0x4); \/\/ *\n+        emit_rm(masm, scale, indexenc, baseenc);\n+        emit_d8(masm, disp);\n+      } else {\n+        \/\/ If 32-bit displacement\n+        if (base == 0x04 ) {\n+          emit_rm(masm, 0x2, regenc, 0x4);\n+          emit_rm(masm, scale, indexenc, 0x04); \/\/ XXX is this valid???\n+        } else {\n+          emit_rm(masm, 0x2, regenc, 0x4);\n+          emit_rm(masm, scale, indexenc, baseenc); \/\/ *\n+        }\n+        if (disp_reloc != relocInfo::none) {\n+          emit_d32_reloc(masm, disp, relocInfo::oop_type, RELOC_DISP32);\n+        } else {\n+          emit_d32(masm, disp);\n+        }\n+      }\n+    }\n+  }\n+}\n+\n+=======\n+>>>>>>> origin\/master\n@@ -522,1 +706,1 @@\n-void emit_cmpfp_fixup(MacroAssembler& _masm) {\n+void emit_cmpfp_fixup(MacroAssembler* masm) {\n@@ -542,1 +726,1 @@\n-void emit_cmpfp3(MacroAssembler& _masm, Register dst) {\n+void emit_cmpfp3(MacroAssembler* masm, Register dst) {\n@@ -561,1 +745,1 @@\n-void emit_fp_min_max(MacroAssembler& _masm, XMMRegister dst,\n+void emit_fp_min_max(MacroAssembler* masm, XMMRegister dst,\n@@ -646,1 +830,1 @@\n-void MachConstantBaseNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\n+void MachConstantBaseNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\n@@ -709,1 +893,1 @@\n-  if (C->stub_function() != NULL && BarrierSet::barrier_set()->barrier_set_nmethod() != NULL) {\n+  if (C->stub_function() != nullptr && BarrierSet::barrier_set()->barrier_set_nmethod() != nullptr) {\n@@ -722,1 +906,1 @@\n-void MachPrologNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachPrologNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -724,1 +908,0 @@\n-  C2_MacroAssembler _masm(&cbuf);\n@@ -744,1 +927,1 @@\n-  __ verified_entry(framesize, C->output()->need_stack_bang(bangsize)?bangsize:0, false, C->stub_function() != NULL);\n+  __ verified_entry(framesize, C->output()->need_stack_bang(bangsize)?bangsize:0, false, C->stub_function() != nullptr);\n@@ -746,1 +929,1 @@\n-  C->output()->set_frame_complete(cbuf.insts_size());\n+  C->output()->set_frame_complete(__ offset());\n@@ -798,1 +981,1 @@\n-void MachEpilogNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachEpilogNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const\n@@ -801,1 +984,0 @@\n-  MacroAssembler _masm(&cbuf);\n@@ -818,0 +1000,16 @@\n+<<<<<<< HEAD\n+    emit_opcode(masm, Assembler::REX_W);\n+    if (framesize < 0x80) {\n+      emit_opcode(masm, 0x83); \/\/ addq rsp, #framesize\n+      emit_rm(masm, 0x3, 0x00, RSP_enc);\n+      emit_d8(masm, framesize);\n+    } else {\n+      emit_opcode(masm, 0x81); \/\/ addq rsp, #framesize\n+      emit_rm(masm, 0x3, 0x00, RSP_enc);\n+      emit_d32(masm, framesize);\n+    }\n+  }\n+\n+  \/\/ popq rbp\n+  emit_opcode(masm, 0x58 | RBP_enc);\n+=======\n@@ -822,0 +1020,1 @@\n+>>>>>>> origin\/master\n@@ -828,1 +1027,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -884,1 +1082,1 @@\n-static void vec_mov_helper(CodeBuffer *cbuf, int src_lo, int dst_lo,\n+static void vec_mov_helper(C2_MacroAssembler *masm, int src_lo, int dst_lo,\n@@ -887,1 +1085,1 @@\n-void vec_spill_helper(CodeBuffer *cbuf, bool is_load,\n+void vec_spill_helper(C2_MacroAssembler *masm, bool is_load,\n@@ -890,1 +1088,1 @@\n-static void vec_stack_to_stack_helper(CodeBuffer *cbuf, int src_offset,\n+static void vec_stack_to_stack_helper(C2_MacroAssembler *masm, int src_offset,\n@@ -892,2 +1090,1 @@\n-  if (cbuf) {\n-    MacroAssembler _masm(cbuf);\n+  if (masm) {\n@@ -969,1 +1166,1 @@\n-uint MachSpillCopyNode::implementation(CodeBuffer* cbuf,\n+uint MachSpillCopyNode::implementation(C2_MacroAssembler* masm,\n@@ -973,1 +1170,1 @@\n-  assert(cbuf != NULL || st  != NULL, \"sanity\");\n+  assert(masm != nullptr || st  != nullptr, \"sanity\");\n@@ -992,1 +1189,1 @@\n-  if (bottom_type()->isa_vect() != NULL && bottom_type()->isa_vectmask() == NULL) {\n+  if (bottom_type()->isa_vect() != nullptr && bottom_type()->isa_vectmask() == nullptr) {\n@@ -1000,1 +1197,1 @@\n-      vec_stack_to_stack_helper(cbuf, src_offset, dst_offset, ireg, st);\n+      vec_stack_to_stack_helper(masm, src_offset, dst_offset, ireg, st);\n@@ -1002,1 +1199,1 @@\n-      vec_mov_helper(cbuf, src_first, dst_first, src_second, dst_second, ireg, st);\n+      vec_mov_helper(masm, src_first, dst_first, src_second, dst_second, ireg, st);\n@@ -1005,1 +1202,1 @@\n-      vec_spill_helper(cbuf, false, stack_offset, src_first, ireg, st);\n+      vec_spill_helper(masm, false, stack_offset, src_first, ireg, st);\n@@ -1008,1 +1205,1 @@\n-      vec_spill_helper(cbuf, true,  stack_offset, dst_first, ireg, st);\n+      vec_spill_helper(masm, true,  stack_offset, dst_first, ireg, st);\n@@ -1024,2 +1221,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1042,2 +1238,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1065,2 +1260,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1080,2 +1274,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1098,2 +1291,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1114,2 +1306,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1132,2 +1323,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1153,2 +1343,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1168,2 +1357,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1185,2 +1373,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1201,2 +1388,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1219,2 +1405,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1233,2 +1418,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1249,2 +1433,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1271,2 +1454,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1286,2 +1468,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1303,2 +1484,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1317,2 +1497,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1334,2 +1513,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1349,2 +1527,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1373,2 +1550,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1389,2 +1565,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1406,2 +1581,1 @@\n-        if (cbuf) {\n-          MacroAssembler _masm(cbuf);\n+        if (masm) {\n@@ -1431,1 +1605,1 @@\n-  implementation(NULL, ra_, false, st);\n+  implementation(nullptr, ra_, false, st);\n@@ -1435,2 +1609,2 @@\n-void MachSpillCopyNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n-  implementation(&cbuf, ra_, false, NULL);\n+void MachSpillCopyNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n+  implementation(masm, ra_, false, nullptr);\n@@ -1454,1 +1628,1 @@\n-void BoxLockNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void BoxLockNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const\n@@ -1458,0 +1632,15 @@\n+<<<<<<< HEAD\n+  if (offset >= 0x80) {\n+    emit_opcode(masm, reg < 8 ? Assembler::REX_W : Assembler::REX_WR);\n+    emit_opcode(masm, 0x8D); \/\/ LEA  reg,[SP+offset]\n+    emit_rm(masm, 0x2, reg & 7, 0x04);\n+    emit_rm(masm, 0x0, 0x04, RSP_enc);\n+    emit_d32(masm, offset);\n+  } else {\n+    emit_opcode(masm, reg < 8 ? Assembler::REX_W : Assembler::REX_WR);\n+    emit_opcode(masm, 0x8D); \/\/ LEA  reg,[SP+offset]\n+    emit_rm(masm, 0x1, reg & 7, 0x04);\n+    emit_rm(masm, 0x0, 0x04, RSP_enc);\n+    emit_d8(masm, offset);\n+  }\n+=======\n@@ -1461,0 +1650,1 @@\n+>>>>>>> origin\/master\n@@ -1486,1 +1676,1 @@\n-void MachUEPNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const\n+void MachUEPNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const\n@@ -1488,2 +1678,1 @@\n-  MacroAssembler masm(&cbuf);\n-  uint insts_size = cbuf.insts_size();\n+  uint insts_size = __ offset();\n@@ -1491,2 +1680,2 @@\n-    masm.load_klass(rscratch1, j_rarg0, rscratch2);\n-    masm.cmpptr(rax, rscratch1);\n+    __ load_klass(rscratch1, j_rarg0, rscratch2);\n+    __ cmpptr(rax, rscratch1);\n@@ -1494,1 +1683,1 @@\n-    masm.cmpptr(rax, Address(j_rarg0, oopDesc::klass_offset_in_bytes()));\n+    __ cmpptr(rax, Address(j_rarg0, oopDesc::klass_offset_in_bytes()));\n@@ -1497,1 +1686,1 @@\n-  masm.jump_cc(Assembler::notEqual, RuntimeAddress(SharedRuntime::get_ic_miss_stub()));\n+  __ jump_cc(Assembler::notEqual, RuntimeAddress(SharedRuntime::get_ic_miss_stub()));\n@@ -1501,1 +1690,1 @@\n-  int nops_cnt = 4 - ((cbuf.insts_size() - insts_size) & 0x3);\n+  int nops_cnt = 4 - ((__ offset() - insts_size) & 0x3);\n@@ -1508,1 +1697,1 @@\n-    masm.nop(nops_cnt);\n+    __ nop(nops_cnt);\n@@ -1659,0 +1848,69 @@\n+<<<<<<< HEAD\n+  \/\/ Build emit functions for each basic byte or larger field in the\n+  \/\/ intel encoding scheme (opcode, rm, sib, immediate), and call them\n+  \/\/ from C++ code in the enc_class source block.  Emit functions will\n+  \/\/ live in the main source block for now.  In future, we can\n+  \/\/ generalize this by adding a syntax that specifies the sizes of\n+  \/\/ fields in an order, so that the adlc can build the emit functions\n+  \/\/ automagically\n+\n+  \/\/ Set instruction mark in MacroAssembler. This is used only in\n+  \/\/ instructions that emit bytes directly to the CodeBuffer wraped\n+  \/\/ in the MacroAssembler. Should go away once all \"instruct\" are\n+  \/\/ patched to emit bytes only using methods in MacroAssembler.\n+  enc_class SetInstMark %{\n+    __ set_inst_mark();\n+  %}\n+\n+  enc_class ClearInstMark %{\n+    __ clear_inst_mark();\n+  %}\n+\n+  \/\/ Emit primary opcode\n+  enc_class OpcP\n+  %{\n+    emit_opcode(masm, $primary);\n+  %}\n+\n+  \/\/ Emit secondary opcode\n+  enc_class OpcS\n+  %{\n+    emit_opcode(masm, $secondary);\n+  %}\n+\n+  \/\/ Emit tertiary opcode\n+  enc_class OpcT\n+  %{\n+    emit_opcode(masm, $tertiary);\n+  %}\n+\n+  \/\/ Emit opcode directly\n+  enc_class Opcode(immI d8)\n+  %{\n+    emit_opcode(masm, $d8$$constant);\n+  %}\n+\n+  \/\/ Emit size prefix\n+  enc_class SizePrefix\n+  %{\n+    emit_opcode(masm, 0x66);\n+  %}\n+\n+  enc_class reg(rRegI reg)\n+  %{\n+    emit_rm(masm, 0x3, 0, $reg$$reg & 7);\n+  %}\n+\n+  enc_class reg_reg(rRegI dst, rRegI src)\n+  %{\n+    emit_rm(masm, 0x3, $dst$$reg & 7, $src$$reg & 7);\n+  %}\n+\n+  enc_class opc_reg_reg(immI opcode, rRegI dst, rRegI src)\n+  %{\n+    emit_opcode(masm, $opcode$$constant);\n+    emit_rm(masm, 0x3, $dst$$reg & 7, $src$$reg & 7);\n+  %}\n+\n+=======\n+>>>>>>> origin\/master\n@@ -1687,1 +1945,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1743,1 +2000,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1776,0 +2032,94 @@\n+<<<<<<< HEAD\n+  \/\/ Opcde enc_class for 8\/32 bit immediate instructions with sign-extension\n+  enc_class OpcSE(immI imm)\n+  %{\n+    \/\/ Emit primary opcode and set sign-extend bit\n+    \/\/ Check for 8-bit immediate, and set sign extend bit in opcode\n+    if (-0x80 <= $imm$$constant && $imm$$constant < 0x80) {\n+      emit_opcode(masm, $primary | 0x02);\n+    } else {\n+      \/\/ 32-bit immediate\n+      emit_opcode(masm, $primary);\n+    }\n+  %}\n+\n+  enc_class OpcSErm(rRegI dst, immI imm)\n+  %{\n+    \/\/ OpcSEr\/m\n+    int dstenc = $dst$$reg;\n+    if (dstenc >= 8) {\n+      emit_opcode(masm, Assembler::REX_B);\n+      dstenc -= 8;\n+    }\n+    \/\/ Emit primary opcode and set sign-extend bit\n+    \/\/ Check for 8-bit immediate, and set sign extend bit in opcode\n+    if (-0x80 <= $imm$$constant && $imm$$constant < 0x80) {\n+      emit_opcode(masm, $primary | 0x02);\n+    } else {\n+      \/\/ 32-bit immediate\n+      emit_opcode(masm, $primary);\n+    }\n+    \/\/ Emit r\/m byte with secondary opcode, after primary opcode.\n+    emit_rm(masm, 0x3, $secondary, dstenc);\n+  %}\n+\n+  enc_class OpcSErm_wide(rRegL dst, immI imm)\n+  %{\n+    \/\/ OpcSEr\/m\n+    int dstenc = $dst$$reg;\n+    if (dstenc < 8) {\n+      emit_opcode(masm, Assembler::REX_W);\n+    } else {\n+      emit_opcode(masm, Assembler::REX_WB);\n+      dstenc -= 8;\n+    }\n+    \/\/ Emit primary opcode and set sign-extend bit\n+    \/\/ Check for 8-bit immediate, and set sign extend bit in opcode\n+    if (-0x80 <= $imm$$constant && $imm$$constant < 0x80) {\n+      emit_opcode(masm, $primary | 0x02);\n+    } else {\n+      \/\/ 32-bit immediate\n+      emit_opcode(masm, $primary);\n+    }\n+    \/\/ Emit r\/m byte with secondary opcode, after primary opcode.\n+    emit_rm(masm, 0x3, $secondary, dstenc);\n+  %}\n+\n+  enc_class Con8or32(immI imm)\n+  %{\n+    \/\/ Check for 8-bit immediate, and set sign extend bit in opcode\n+    if (-0x80 <= $imm$$constant && $imm$$constant < 0x80) {\n+      $$$emit8$imm$$constant;\n+    } else {\n+      \/\/ 32-bit immediate\n+      $$$emit32$imm$$constant;\n+    }\n+  %}\n+\n+  enc_class opc2_reg(rRegI dst)\n+  %{\n+    \/\/ BSWAP\n+    emit_cc(masm, $secondary, $dst$$reg);\n+  %}\n+\n+  enc_class opc3_reg(rRegI dst)\n+  %{\n+    \/\/ BSWAP\n+    emit_cc(masm, $tertiary, $dst$$reg);\n+  %}\n+\n+  enc_class reg_opc(rRegI div)\n+  %{\n+    \/\/ INC, DEC, IDIV, IMOD, JMP indirect, ...\n+    emit_rm(masm, 0x3, $secondary, $div$$reg & 7);\n+  %}\n+\n+  enc_class enc_cmov(cmpOp cop)\n+  %{\n+    \/\/ CMOV\n+    $$$emit8$primary;\n+    emit_cc(masm, $secondary, $cop$$cmpcode);\n+  %}\n+\n+=======\n+>>>>>>> origin\/master\n@@ -1785,1 +2135,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1787,1 +2136,1 @@\n-                                     NULL, &miss,\n+                                     nullptr, &miss,\n@@ -1796,1 +2145,1 @@\n-    debug_only(int off0 = cbuf.insts_size());\n+    debug_only(int off0 = __ offset());\n@@ -1801,1 +2150,0 @@\n-      MacroAssembler _masm(&cbuf);\n@@ -1804,1 +2152,1 @@\n-    debug_only(int off1 = cbuf.insts_size());\n+    debug_only(int off1 = __ offset());\n@@ -1810,1 +2158,0 @@\n-    MacroAssembler _masm(&cbuf);\n@@ -1843,2 +2190,3 @@\n-        address stub = CompiledStaticCall::emit_to_interp_stub(cbuf, mark);\n-        if (stub == NULL) {\n+        address stub = CompiledStaticCall::emit_to_interp_stub(masm, mark);\n+        __ clear_inst_mark();\n+        if (stub == nullptr) {\n@@ -1854,2 +2202,1 @@\n-    MacroAssembler _masm(&cbuf);\n-    __ ic_call((address)$meth$$method, resolved_method_index(cbuf));\n+    __ ic_call((address)$meth$$method, resolved_method_index(masm));\n@@ -1859,0 +2206,525 @@\n+<<<<<<< HEAD\n+  enc_class reg_opc_imm(rRegI dst, immI8 shift)\n+  %{\n+    \/\/ SAL, SAR, SHR\n+    int dstenc = $dst$$reg;\n+    if (dstenc >= 8) {\n+      emit_opcode(masm, Assembler::REX_B);\n+      dstenc -= 8;\n+    }\n+    $$$emit8$primary;\n+    emit_rm(masm, 0x3, $secondary, dstenc);\n+    $$$emit8$shift$$constant;\n+  %}\n+\n+  enc_class reg_opc_imm_wide(rRegL dst, immI8 shift)\n+  %{\n+    \/\/ SAL, SAR, SHR\n+    int dstenc = $dst$$reg;\n+    if (dstenc < 8) {\n+      emit_opcode(masm, Assembler::REX_W);\n+    } else {\n+      emit_opcode(masm, Assembler::REX_WB);\n+      dstenc -= 8;\n+    }\n+    $$$emit8$primary;\n+    emit_rm(masm, 0x3, $secondary, dstenc);\n+    $$$emit8$shift$$constant;\n+  %}\n+\n+  enc_class load_immI(rRegI dst, immI src)\n+  %{\n+    int dstenc = $dst$$reg;\n+    if (dstenc >= 8) {\n+      emit_opcode(masm, Assembler::REX_B);\n+      dstenc -= 8;\n+    }\n+    emit_opcode(masm, 0xB8 | dstenc);\n+    $$$emit32$src$$constant;\n+  %}\n+\n+  enc_class load_immL(rRegL dst, immL src)\n+  %{\n+    int dstenc = $dst$$reg;\n+    if (dstenc < 8) {\n+      emit_opcode(masm, Assembler::REX_W);\n+    } else {\n+      emit_opcode(masm, Assembler::REX_WB);\n+      dstenc -= 8;\n+    }\n+    emit_opcode(masm, 0xB8 | dstenc);\n+    emit_d64(masm, $src$$constant);\n+  %}\n+\n+  enc_class load_immUL32(rRegL dst, immUL32 src)\n+  %{\n+    \/\/ same as load_immI, but this time we care about zeroes in the high word\n+    int dstenc = $dst$$reg;\n+    if (dstenc >= 8) {\n+      emit_opcode(masm, Assembler::REX_B);\n+      dstenc -= 8;\n+    }\n+    emit_opcode(masm, 0xB8 | dstenc);\n+    $$$emit32$src$$constant;\n+  %}\n+\n+  enc_class load_immL32(rRegL dst, immL32 src)\n+  %{\n+    int dstenc = $dst$$reg;\n+    if (dstenc < 8) {\n+      emit_opcode(masm, Assembler::REX_W);\n+    } else {\n+      emit_opcode(masm, Assembler::REX_WB);\n+      dstenc -= 8;\n+    }\n+    emit_opcode(masm, 0xC7);\n+    emit_rm(masm, 0x03, 0x00, dstenc);\n+    $$$emit32$src$$constant;\n+  %}\n+\n+  enc_class load_immP31(rRegP dst, immP32 src)\n+  %{\n+    \/\/ same as load_immI, but this time we care about zeroes in the high word\n+    int dstenc = $dst$$reg;\n+    if (dstenc >= 8) {\n+      emit_opcode(masm, Assembler::REX_B);\n+      dstenc -= 8;\n+    }\n+    emit_opcode(masm, 0xB8 | dstenc);\n+    $$$emit32$src$$constant;\n+  %}\n+\n+  enc_class load_immP(rRegP dst, immP src)\n+  %{\n+    int dstenc = $dst$$reg;\n+    if (dstenc < 8) {\n+      emit_opcode(masm, Assembler::REX_W);\n+    } else {\n+      emit_opcode(masm, Assembler::REX_WB);\n+      dstenc -= 8;\n+    }\n+    emit_opcode(masm, 0xB8 | dstenc);\n+    \/\/ This next line should be generated from ADLC\n+    if ($src->constant_reloc() != relocInfo::none) {\n+      emit_d64_reloc(masm, $src$$constant, $src->constant_reloc(), RELOC_IMM64);\n+    } else {\n+      emit_d64(masm, $src$$constant);\n+    }\n+  %}\n+\n+  enc_class Con32(immI src)\n+  %{\n+    \/\/ Output immediate\n+    $$$emit32$src$$constant;\n+  %}\n+\n+  enc_class Con32F_as_bits(immF src)\n+  %{\n+    \/\/ Output Float immediate bits\n+    jfloat jf = $src$$constant;\n+    jint jf_as_bits = jint_cast(jf);\n+    emit_d32(masm, jf_as_bits);\n+  %}\n+\n+  enc_class Con16(immI src)\n+  %{\n+    \/\/ Output immediate\n+    $$$emit16$src$$constant;\n+  %}\n+\n+  \/\/ How is this different from Con32??? XXX\n+  enc_class Con_d32(immI src)\n+  %{\n+    emit_d32(masm,$src$$constant);\n+  %}\n+\n+  enc_class conmemref (rRegP t1) %{    \/\/ Con32(storeImmI)\n+    \/\/ Output immediate memory reference\n+    emit_rm(masm, 0x00, $t1$$reg, 0x05 );\n+    emit_d32(masm, 0x00);\n+  %}\n+\n+  enc_class lock_prefix()\n+  %{\n+    emit_opcode(masm, 0xF0); \/\/ lock\n+  %}\n+\n+  enc_class REX_mem(memory mem)\n+  %{\n+    if ($mem$$base >= 8) {\n+      if ($mem$$index < 8) {\n+        emit_opcode(masm, Assembler::REX_B);\n+      } else {\n+        emit_opcode(masm, Assembler::REX_XB);\n+      }\n+    } else {\n+      if ($mem$$index >= 8) {\n+        emit_opcode(masm, Assembler::REX_X);\n+      }\n+    }\n+  %}\n+\n+  enc_class REX_mem_wide(memory mem)\n+  %{\n+    if ($mem$$base >= 8) {\n+      if ($mem$$index < 8) {\n+        emit_opcode(masm, Assembler::REX_WB);\n+      } else {\n+        emit_opcode(masm, Assembler::REX_WXB);\n+      }\n+    } else {\n+      if ($mem$$index < 8) {\n+        emit_opcode(masm, Assembler::REX_W);\n+      } else {\n+        emit_opcode(masm, Assembler::REX_WX);\n+      }\n+    }\n+  %}\n+\n+  \/\/ for byte regs\n+  enc_class REX_breg(rRegI reg)\n+  %{\n+    if ($reg$$reg >= 4) {\n+      emit_opcode(masm, $reg$$reg < 8 ? Assembler::REX : Assembler::REX_B);\n+    }\n+  %}\n+\n+  \/\/ for byte regs\n+  enc_class REX_reg_breg(rRegI dst, rRegI src)\n+  %{\n+    if ($dst$$reg < 8) {\n+      if ($src$$reg >= 4) {\n+        emit_opcode(masm, $src$$reg < 8 ? Assembler::REX : Assembler::REX_B);\n+      }\n+    } else {\n+      if ($src$$reg < 8) {\n+        emit_opcode(masm, Assembler::REX_R);\n+      } else {\n+        emit_opcode(masm, Assembler::REX_RB);\n+      }\n+    }\n+  %}\n+\n+  \/\/ for byte regs\n+  enc_class REX_breg_mem(rRegI reg, memory mem)\n+  %{\n+    if ($reg$$reg < 8) {\n+      if ($mem$$base < 8) {\n+        if ($mem$$index >= 8) {\n+          emit_opcode(masm, Assembler::REX_X);\n+        } else if ($reg$$reg >= 4) {\n+          emit_opcode(masm, Assembler::REX);\n+        }\n+      } else {\n+        if ($mem$$index < 8) {\n+          emit_opcode(masm, Assembler::REX_B);\n+        } else {\n+          emit_opcode(masm, Assembler::REX_XB);\n+        }\n+      }\n+    } else {\n+      if ($mem$$base < 8) {\n+        if ($mem$$index < 8) {\n+          emit_opcode(masm, Assembler::REX_R);\n+        } else {\n+          emit_opcode(masm, Assembler::REX_RX);\n+        }\n+      } else {\n+        if ($mem$$index < 8) {\n+          emit_opcode(masm, Assembler::REX_RB);\n+        } else {\n+          emit_opcode(masm, Assembler::REX_RXB);\n+        }\n+      }\n+    }\n+  %}\n+\n+  enc_class REX_reg(rRegI reg)\n+  %{\n+    if ($reg$$reg >= 8) {\n+      emit_opcode(masm, Assembler::REX_B);\n+    }\n+  %}\n+\n+  enc_class REX_reg_wide(rRegI reg)\n+  %{\n+    if ($reg$$reg < 8) {\n+      emit_opcode(masm, Assembler::REX_W);\n+    } else {\n+      emit_opcode(masm, Assembler::REX_WB);\n+    }\n+  %}\n+\n+  enc_class REX_reg_reg(rRegI dst, rRegI src)\n+  %{\n+    if ($dst$$reg < 8) {\n+      if ($src$$reg >= 8) {\n+        emit_opcode(masm, Assembler::REX_B);\n+      }\n+    } else {\n+      if ($src$$reg < 8) {\n+        emit_opcode(masm, Assembler::REX_R);\n+      } else {\n+        emit_opcode(masm, Assembler::REX_RB);\n+      }\n+    }\n+  %}\n+\n+  enc_class REX_reg_reg_wide(rRegI dst, rRegI src)\n+  %{\n+    if ($dst$$reg < 8) {\n+      if ($src$$reg < 8) {\n+        emit_opcode(masm, Assembler::REX_W);\n+      } else {\n+        emit_opcode(masm, Assembler::REX_WB);\n+      }\n+    } else {\n+      if ($src$$reg < 8) {\n+        emit_opcode(masm, Assembler::REX_WR);\n+      } else {\n+        emit_opcode(masm, Assembler::REX_WRB);\n+      }\n+    }\n+  %}\n+\n+  enc_class REX_reg_mem(rRegI reg, memory mem)\n+  %{\n+    if ($reg$$reg < 8) {\n+      if ($mem$$base < 8) {\n+        if ($mem$$index >= 8) {\n+          emit_opcode(masm, Assembler::REX_X);\n+        }\n+      } else {\n+        if ($mem$$index < 8) {\n+          emit_opcode(masm, Assembler::REX_B);\n+        } else {\n+          emit_opcode(masm, Assembler::REX_XB);\n+        }\n+      }\n+    } else {\n+      if ($mem$$base < 8) {\n+        if ($mem$$index < 8) {\n+          emit_opcode(masm, Assembler::REX_R);\n+        } else {\n+          emit_opcode(masm, Assembler::REX_RX);\n+        }\n+      } else {\n+        if ($mem$$index < 8) {\n+          emit_opcode(masm, Assembler::REX_RB);\n+        } else {\n+          emit_opcode(masm, Assembler::REX_RXB);\n+        }\n+      }\n+    }\n+  %}\n+\n+  enc_class REX_reg_mem_wide(rRegL reg, memory mem)\n+  %{\n+    if ($reg$$reg < 8) {\n+      if ($mem$$base < 8) {\n+        if ($mem$$index < 8) {\n+          emit_opcode(masm, Assembler::REX_W);\n+        } else {\n+          emit_opcode(masm, Assembler::REX_WX);\n+        }\n+      } else {\n+        if ($mem$$index < 8) {\n+          emit_opcode(masm, Assembler::REX_WB);\n+        } else {\n+          emit_opcode(masm, Assembler::REX_WXB);\n+        }\n+      }\n+    } else {\n+      if ($mem$$base < 8) {\n+        if ($mem$$index < 8) {\n+          emit_opcode(masm, Assembler::REX_WR);\n+        } else {\n+          emit_opcode(masm, Assembler::REX_WRX);\n+        }\n+      } else {\n+        if ($mem$$index < 8) {\n+          emit_opcode(masm, Assembler::REX_WRB);\n+        } else {\n+          emit_opcode(masm, Assembler::REX_WRXB);\n+        }\n+      }\n+    }\n+  %}\n+\n+  enc_class reg_mem(rRegI ereg, memory mem)\n+  %{\n+    \/\/ High registers handle in encode_RegMem\n+    int reg = $ereg$$reg;\n+    int base = $mem$$base;\n+    int index = $mem$$index;\n+    int scale = $mem$$scale;\n+    int disp = $mem$$disp;\n+    relocInfo::relocType disp_reloc = $mem->disp_reloc();\n+\n+    encode_RegMem(masm, reg, base, index, scale, disp, disp_reloc);\n+  %}\n+\n+  enc_class RM_opc_mem(immI rm_opcode, memory mem)\n+  %{\n+    int rm_byte_opcode = $rm_opcode$$constant;\n+\n+    \/\/ High registers handle in encode_RegMem\n+    int base = $mem$$base;\n+    int index = $mem$$index;\n+    int scale = $mem$$scale;\n+    int displace = $mem$$disp;\n+\n+    relocInfo::relocType disp_reloc = $mem->disp_reloc();       \/\/ disp-as-oop when\n+                                            \/\/ working with static\n+                                            \/\/ globals\n+    encode_RegMem(masm, rm_byte_opcode, base, index, scale, displace,\n+                  disp_reloc);\n+  %}\n+\n+  enc_class reg_lea(rRegI dst, rRegI src0, immI src1)\n+  %{\n+    int reg_encoding = $dst$$reg;\n+    int base         = $src0$$reg;      \/\/ 0xFFFFFFFF indicates no base\n+    int index        = 0x04;            \/\/ 0x04 indicates no index\n+    int scale        = 0x00;            \/\/ 0x00 indicates no scale\n+    int displace     = $src1$$constant; \/\/ 0x00 indicates no displacement\n+    relocInfo::relocType disp_reloc = relocInfo::none;\n+    encode_RegMem(masm, reg_encoding, base, index, scale, displace,\n+                  disp_reloc);\n+  %}\n+\n+  enc_class neg_reg(rRegI dst)\n+  %{\n+    int dstenc = $dst$$reg;\n+    if (dstenc >= 8) {\n+      emit_opcode(masm, Assembler::REX_B);\n+      dstenc -= 8;\n+    }\n+    \/\/ NEG $dst\n+    emit_opcode(masm, 0xF7);\n+    emit_rm(masm, 0x3, 0x03, dstenc);\n+  %}\n+\n+  enc_class neg_reg_wide(rRegI dst)\n+  %{\n+    int dstenc = $dst$$reg;\n+    if (dstenc < 8) {\n+      emit_opcode(masm, Assembler::REX_W);\n+    } else {\n+      emit_opcode(masm, Assembler::REX_WB);\n+      dstenc -= 8;\n+    }\n+    \/\/ NEG $dst\n+    emit_opcode(masm, 0xF7);\n+    emit_rm(masm, 0x3, 0x03, dstenc);\n+  %}\n+\n+  enc_class setLT_reg(rRegI dst)\n+  %{\n+    int dstenc = $dst$$reg;\n+    if (dstenc >= 8) {\n+      emit_opcode(masm, Assembler::REX_B);\n+      dstenc -= 8;\n+    } else if (dstenc >= 4) {\n+      emit_opcode(masm, Assembler::REX);\n+    }\n+    \/\/ SETLT $dst\n+    emit_opcode(masm, 0x0F);\n+    emit_opcode(masm, 0x9C);\n+    emit_rm(masm, 0x3, 0x0, dstenc);\n+  %}\n+\n+  enc_class setNZ_reg(rRegI dst)\n+  %{\n+    int dstenc = $dst$$reg;\n+    if (dstenc >= 8) {\n+      emit_opcode(masm, Assembler::REX_B);\n+      dstenc -= 8;\n+    } else if (dstenc >= 4) {\n+      emit_opcode(masm, Assembler::REX);\n+    }\n+    \/\/ SETNZ $dst\n+    emit_opcode(masm, 0x0F);\n+    emit_opcode(masm, 0x95);\n+    emit_rm(masm, 0x3, 0x0, dstenc);\n+  %}\n+\n+\n+  \/\/ Compare the lonogs and set -1, 0, or 1 into dst\n+  enc_class cmpl3_flag(rRegL src1, rRegL src2, rRegI dst)\n+  %{\n+    int src1enc = $src1$$reg;\n+    int src2enc = $src2$$reg;\n+    int dstenc = $dst$$reg;\n+\n+    \/\/ cmpq $src1, $src2\n+    if (src1enc < 8) {\n+      if (src2enc < 8) {\n+        emit_opcode(masm, Assembler::REX_W);\n+      } else {\n+        emit_opcode(masm, Assembler::REX_WB);\n+      }\n+    } else {\n+      if (src2enc < 8) {\n+        emit_opcode(masm, Assembler::REX_WR);\n+      } else {\n+        emit_opcode(masm, Assembler::REX_WRB);\n+      }\n+    }\n+    emit_opcode(masm, 0x3B);\n+    emit_rm(masm, 0x3, src1enc & 7, src2enc & 7);\n+\n+    \/\/ movl $dst, -1\n+    if (dstenc >= 8) {\n+      emit_opcode(masm, Assembler::REX_B);\n+    }\n+    emit_opcode(masm, 0xB8 | (dstenc & 7));\n+    emit_d32(masm, -1);\n+\n+    \/\/ jl,s done\n+    emit_opcode(masm, 0x7C);\n+    emit_d8(masm, dstenc < 4 ? 0x06 : 0x08);\n+\n+    \/\/ setne $dst\n+    if (dstenc >= 4) {\n+      emit_opcode(masm, dstenc < 8 ? Assembler::REX : Assembler::REX_B);\n+    }\n+    emit_opcode(masm, 0x0F);\n+    emit_opcode(masm, 0x95);\n+    emit_opcode(masm, 0xC0 | (dstenc & 7));\n+\n+    \/\/ movzbl $dst, $dst\n+    if (dstenc >= 4) {\n+      emit_opcode(masm, dstenc < 8 ? Assembler::REX : Assembler::REX_RB);\n+    }\n+    emit_opcode(masm, 0x0F);\n+    emit_opcode(masm, 0xB6);\n+    emit_rm(masm, 0x3, dstenc & 7, dstenc & 7);\n+  %}\n+\n+  enc_class Push_ResultXD(regD dst) %{\n+    __ fstp_d(Address(rsp, 0));\n+    __ movdbl($dst$$XMMRegister, Address(rsp, 0));\n+    __ addptr(rsp, 8);\n+  %}\n+\n+  enc_class Push_SrcXD(regD src) %{\n+    __ subptr(rsp, 8);\n+    __ movdbl(Address(rsp, 0), $src$$XMMRegister);\n+    __ fld_d(Address(rsp, 0));\n+  %}\n+\n+\n+  enc_class enc_rethrow()\n+  %{\n+    __ set_inst_mark();\n+    emit_opcode(masm, 0xE9); \/\/ jmp entry\n+    emit_d32_reloc(masm,\n+                   (int) (OptoRuntime::rethrow_stub() - __ pc() - 4),\n+                   runtime_call_Relocation::spec(),\n+                   RELOC_DISP32);\n+    __ clear_inst_mark();\n+  %}\n+\n+=======\n+>>>>>>> origin\/master\n@@ -2182,1 +3054,1 @@\n-\/\/ NULL Pointer Immediate\n+\/\/ nullptr Pointer Immediate\n@@ -2210,1 +3082,1 @@\n-\/\/ NULL Pointer Immediate\n+\/\/ nullptr Pointer Immediate\n@@ -3124,1 +3996,1 @@\n-\/\/ we can't free r12 even with CompressedOops::base() == NULL.\n+\/\/ we can't free r12 even with CompressedOops::base() == nullptr.\n@@ -4519,1 +5391,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -4555,1 +5427,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -4591,1 +5463,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -4627,1 +5499,1 @@\n-    emit_fp_min_max(_masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n+    emit_fp_min_max(masm, $dst$$XMMRegister, $a$$XMMRegister, $b$$XMMRegister, $xmmt$$XMMRegister, $tmp$$Register,\n@@ -4957,1 +5829,1 @@\n-  format %{ \"xorq    $dst, $src\\t# compressed NULL ptr\" %}\n+  format %{ \"xorq    $dst, $src\\t# compressed nullptr ptr\" %}\n@@ -4971,1 +5843,1 @@\n-    if (con == NULL) {\n+    if (con == nullptr) {\n@@ -4987,1 +5859,1 @@\n-    if (con == NULL) {\n+    if (con == nullptr) {\n@@ -5037,0 +5909,4 @@\n+<<<<<<< HEAD\n+  opcode(0x8B);\n+  ins_encode(SetInstMark, REX_reg_mem(dst, src), OpcP, reg_mem(dst, src), ClearInstMark);\n+=======\n@@ -5040,0 +5916,1 @@\n+>>>>>>> origin\/master\n@@ -5049,0 +5926,4 @@\n+<<<<<<< HEAD\n+  opcode(0x8B);\n+  ins_encode(SetInstMark, REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src), ClearInstMark);\n+=======\n@@ -5052,0 +5933,1 @@\n+>>>>>>> origin\/master\n@@ -5061,0 +5943,4 @@\n+<<<<<<< HEAD\n+  opcode(0x8B);\n+  ins_encode(SetInstMark, REX_reg_mem_wide(dst, src), OpcP, reg_mem(dst, src), ClearInstMark);\n+=======\n@@ -5064,0 +5950,1 @@\n+>>>>>>> origin\/master\n@@ -5213,1 +6100,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL) && n->as_Store()->barrier_data() == 0);\n+  predicate(UseCompressedOops && (CompressedOops::base() == nullptr) && n->as_Store()->barrier_data() == 0);\n@@ -5224,1 +6111,1 @@\n-\/\/ Store NULL Pointer, mark word, or other simple pointer constant.\n+\/\/ Store nullptr Pointer, mark word, or other simple pointer constant.\n@@ -5265,1 +6152,1 @@\n-  predicate(CompressedOops::base() == NULL);\n+  predicate(CompressedOops::base() == nullptr);\n@@ -5284,1 +6171,1 @@\n-    if (con == NULL) {\n+    if (con == nullptr) {\n@@ -5308,1 +6195,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == nullptr));\n@@ -5334,1 +6221,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == nullptr));\n@@ -5360,1 +6247,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == nullptr));\n@@ -5387,1 +6274,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == nullptr));\n@@ -5413,1 +6300,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == nullptr));\n@@ -5452,1 +6339,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == nullptr));\n@@ -5491,1 +6378,1 @@\n-  predicate(!UseCompressedOops || (CompressedOops::base() != NULL));\n+  predicate(!UseCompressedOops || (CompressedOops::base() != nullptr));\n@@ -5504,1 +6391,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL));\n+  predicate(UseCompressedOops && (CompressedOops::base() == nullptr));\n@@ -5521,0 +6408,4 @@\n+<<<<<<< HEAD\n+  opcode(0x89);\n+  ins_encode(SetInstMark, REX_reg_mem(src, dst), OpcP, reg_mem(src, dst), ClearInstMark);\n+=======\n@@ -5524,0 +6415,1 @@\n+>>>>>>> origin\/master\n@@ -5533,0 +6425,4 @@\n+<<<<<<< HEAD\n+  opcode(0x89);\n+  ins_encode(SetInstMark, REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst), ClearInstMark);\n+=======\n@@ -5536,0 +6432,1 @@\n+>>>>>>> origin\/master\n@@ -5545,0 +6442,4 @@\n+<<<<<<< HEAD\n+  opcode(0x89);\n+  ins_encode(SetInstMark, REX_reg_mem_wide(src, dst), OpcP, reg_mem(src, dst), ClearInstMark);\n+=======\n@@ -5548,0 +6449,1 @@\n+>>>>>>> origin\/master\n@@ -7736,0 +8638,4 @@\n+<<<<<<< HEAD\n+  opcode(0x2B);\n+  ins_encode(SetInstMark, REX_reg_reg_wide(dst, src), OpcP, reg_reg(dst, src), ClearInstMark);\n+=======\n@@ -7739,0 +8645,1 @@\n+>>>>>>> origin\/master\n@@ -9935,1 +10842,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -9986,1 +10893,1 @@\n-    emit_cmpfp_fixup(_masm);\n+    emit_cmpfp_fixup(masm);\n@@ -10039,1 +10946,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -10060,1 +10967,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -10080,1 +10987,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -10101,1 +11008,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -10122,1 +11029,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -10142,1 +11049,1 @@\n-    emit_cmpfp3(_masm, $dst$$Register);\n+    emit_cmpfp3(masm, $dst$$Register);\n@@ -11737,1 +12644,1 @@\n-  predicate((!UseCompressedOops || (CompressedOops::base() != NULL)) &&\n+  predicate((!UseCompressedOops || (CompressedOops::base() != nullptr)) &&\n@@ -11751,1 +12658,1 @@\n-  predicate(UseCompressedOops && (CompressedOops::base() == NULL) &&\n+  predicate(UseCompressedOops && (CompressedOops::base() == nullptr) &&\n@@ -11834,1 +12741,1 @@\n-  predicate(CompressedOops::base() != NULL);\n+  predicate(CompressedOops::base() != nullptr);\n@@ -11847,1 +12754,1 @@\n-  predicate(CompressedOops::base() == NULL);\n+  predicate(CompressedOops::base() == nullptr);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":1037,"deletions":130,"binary":false,"changes":1167,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef CPU_ZERO_C2_MACROASSEMBLER_ZERO_HPP\n+#define CPU_ZERO_C2_MACROASSEMBLER_ZERO_HPP\n+\n+\/\/ C2_MacroAssembler contains high-level macros for C2\n+\n+#endif \/\/ CPU_ZERO_C2_MACROASSEMBLER_ZERO_HPP\n","filename":"src\/hotspot\/cpu\/zero\/c2_MacroAssembler_zero.hpp","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -46,1 +46,1 @@\n-address CompiledStaticCall::emit_to_interp_stub(CodeBuffer &cbuf, address mark) {\n+address CompiledStaticCall::emit_to_interp_stub(MacroAssembler *masm, address mark) {\n","filename":"src\/hotspot\/cpu\/zero\/compiledIC_zero.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2899,8 +2899,0 @@\n-  if (!inst._is_postalloc_expand) {\n-    \/\/ Define a MacroAssembler instance for use by the encoding.  The\n-    \/\/ name is chosen to match the __ idiom used for assembly in other\n-    \/\/ parts of hotspot and assumes the existence of the standard\n-    \/\/ #define __ _masm.\n-    encoding->add_code(\"    C2_MacroAssembler _masm(&cbuf);\\n\");\n-  }\n-\n","filename":"src\/hotspot\/share\/adlc\/adlparse.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1905,1 +1905,1 @@\n-\/\/ (1) void  ___Node::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+\/\/ (1) void  ___Node::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -2304,1 +2304,1 @@\n-        fprintf( _fp, \"emit_%s(cbuf, \", d32_hi_lo );\n+        fprintf( _fp, \"emit_%s(masm, \", d32_hi_lo );\n@@ -2318,1 +2318,1 @@\n-        fprintf(_fp,\"emit_%s_reloc(cbuf, \", d32_hi_lo );\n+        fprintf(_fp,\"emit_%s_reloc(masm, \", d32_hi_lo );\n@@ -2325,1 +2325,1 @@\n-        fprintf(_fp,\"  emit_%s(cbuf, \", d32_hi_lo);\n+        fprintf(_fp,\"  emit_%s(masm, \", d32_hi_lo);\n@@ -2331,1 +2331,1 @@\n-      fprintf(_fp,\"emit_d16(cbuf, \");\n+      fprintf(_fp,\"emit_d16(masm, \");\n@@ -2337,1 +2337,1 @@\n-      fprintf(_fp,\"emit_d8(cbuf, \");\n+      fprintf(_fp,\"emit_d8(masm, \");\n@@ -2678,1 +2678,1 @@\n-  fprintf(fp, \"void %sNode::emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const {\\n\", inst._ident);\n+  fprintf(fp, \"void %sNode::emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const {\\n\", inst._ident);\n@@ -2688,3 +2688,0 @@\n-  \/\/ Save current instruction's starting address (helps with relocation).\n-  fprintf(fp, \"  cbuf.set_insts_mark();\\n\");\n-\n@@ -2693,1 +2690,1 @@\n-    fprintf(fp, \"  ra_->C->output()->constant_table().fill_jump_table(cbuf, (MachConstantNode*) this, _index2label);\\n\");\n+    fprintf(fp, \"  ra_->C->output()->constant_table().fill_jump_table(masm, (MachConstantNode*) this, _index2label);\\n\");\n","filename":"src\/hotspot\/share\/adlc\/output_c.cpp","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1632,1 +1632,1 @@\n-        fprintf(fp,\"  virtual void           emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\\n\");\n+        fprintf(fp,\"  virtual void           emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\\n\");\n","filename":"src\/hotspot\/share\/adlc\/output_h.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -368,0 +368,1 @@\n+  address       begin()        const   { return code_section()->start(); }\n@@ -376,4 +377,5 @@\n-  address       inst_mark() const { return code_section()->mark();       }\n-  void      set_inst_mark()       {        code_section()->set_mark();   }\n-  void    clear_inst_mark()       {        code_section()->clear_mark(); }\n-\n+  address       inst_mark() const         { return code_section()->mark();          }\n+  void      set_inst_mark()               {        code_section()->set_mark();      }\n+  void      set_inst_mark(address addr)   {        code_section()->set_mark(addr);  }\n+  void    clear_inst_mark()               {        code_section()->clear_mark();    }\n+  void set_inst_end(address addr)         {        code_section()->set_end(addr);   }\n@@ -391,0 +393,6 @@\n+  void relocate(address addr, relocInfo::relocType rtype, int format = 0) {\n+    code_section()->relocate(addr, rtype, format);\n+  }\n+  void relocate(address addr, RelocationHolder const& rspec, int format = 0) {\n+    code_section()->relocate(addr, rspec, format);\n+  }\n","filename":"src\/hotspot\/share\/asm\/assembler.hpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"opto\/c2_MacroAssembler.hpp\"\n@@ -343,1 +344,1 @@\n-  static address emit_to_interp_stub(CodeBuffer &cbuf, address mark = nullptr);\n+  static address emit_to_interp_stub(MacroAssembler *masm, address mark = nullptr);\n","filename":"src\/hotspot\/share\/code\/compiledIC.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1246,1 +1246,2 @@\n-      if (CompiledStaticCall::emit_to_interp_stub(buffer, _instructions->start() + pc_offset) == nullptr) {\n+      C2_MacroAssembler masm(&buffer);\n+      if (CompiledStaticCall::emit_to_interp_stub(&masm, _instructions->start() + pc_offset) == nullptr) {\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCodeInstaller.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,2 +36,1 @@\n-void C2CodeStubList::emit(CodeBuffer& cb) {\n-  C2_MacroAssembler masm(&cb);\n+void C2CodeStubList::emit(C2_MacroAssembler& masm) {\n@@ -42,1 +41,1 @@\n-    if (cb.insts()->maybe_expand_to_ensure_remaining(max_size) && cb.blob() == nullptr) {\n+    if (masm.code()->insts()->maybe_expand_to_ensure_remaining(max_size) && masm.code()->blob() == nullptr) {\n@@ -47,1 +46,1 @@\n-    DEBUG_ONLY(int size_before = cb.insts_size();)\n+    DEBUG_ONLY(int size_before = masm.offset();)\n@@ -51,1 +50,1 @@\n-    DEBUG_ONLY(int actual_size = cb.insts_size() - size_before;)\n+    DEBUG_ONLY(int actual_size = masm.offset() - size_before;)\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.cpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -71,1 +71,1 @@\n-  void emit(CodeBuffer& cb);\n+  void emit(C2_MacroAssembler& masm);\n","filename":"src\/hotspot\/share\/opto\/c2_CodeStubs.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -685,1 +685,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const { }\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const { }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -147,2 +147,1 @@\n-bool ConstantTable::emit(CodeBuffer& cb) const {\n-  MacroAssembler _masm(&cb);\n+bool ConstantTable::emit(C2_MacroAssembler* masm) const {\n@@ -153,1 +152,1 @@\n-      constant_addr = _masm.array_constant(con.type(), con.get_array(), con.alignment());\n+      constant_addr = masm->array_constant(con.type(), con.get_array(), con.alignment());\n@@ -156,4 +155,4 @@\n-      case T_INT:    constant_addr = _masm.int_constant(   con.get_jint()   ); break;\n-      case T_LONG:   constant_addr = _masm.long_constant(  con.get_jlong()  ); break;\n-      case T_FLOAT:  constant_addr = _masm.float_constant( con.get_jfloat() ); break;\n-      case T_DOUBLE: constant_addr = _masm.double_constant(con.get_jdouble()); break;\n+      case T_INT:    constant_addr = masm->int_constant(   con.get_jint()   ); break;\n+      case T_LONG:   constant_addr = masm->long_constant(  con.get_jlong()  ); break;\n+      case T_FLOAT:  constant_addr = masm->float_constant( con.get_jfloat() ); break;\n+      case T_DOUBLE: constant_addr = masm->double_constant(con.get_jdouble()); break;\n@@ -162,2 +161,2 @@\n-        int oop_index = _masm.oop_recorder()->find_index(obj);\n-        constant_addr = _masm.address_constant((address) obj, oop_Relocation::spec(oop_index));\n+        int oop_index = masm->oop_recorder()->find_index(obj);\n+        constant_addr = masm->address_constant((address) obj, oop_Relocation::spec(oop_index));\n@@ -168,1 +167,1 @@\n-        constant_addr = _masm.address_constant(addr);\n+        constant_addr = masm->address_constant(addr);\n@@ -178,1 +177,1 @@\n-        constant_addr = _masm.address_constant(dummy);\n+        constant_addr = masm->address_constant(dummy);\n@@ -182,2 +181,2 @@\n-        assert((constant_addr - _masm.code()->consts()->start()) == con.offset(),\n-              \"must be: %d == %d\", (int)(constant_addr - _masm.code()->consts()->start()), (int)(con.offset()));\n+        assert((constant_addr - masm->code()->consts()->start()) == con.offset(),\n+              \"must be: %d == %d\", (int)(constant_addr - masm->code()->consts()->start()), (int)(con.offset()));\n@@ -188,1 +187,1 @@\n-          last_addr = _masm.address_constant(dummy + j);\n+          last_addr = masm->address_constant(dummy + j);\n@@ -194,1 +193,1 @@\n-        address start = _masm.code()->consts()->start();\n+        address start = masm->code()->consts()->start();\n@@ -206,2 +205,2 @@\n-        int metadata_index = _masm.oop_recorder()->find_index(obj);\n-        constant_addr = _masm.address_constant((address) obj, metadata_Relocation::spec(metadata_index));\n+        int metadata_index = masm->oop_recorder()->find_index(obj);\n+        constant_addr = masm->address_constant((address) obj, metadata_Relocation::spec(metadata_index));\n@@ -217,2 +216,2 @@\n-    assert((constant_addr - _masm.code()->consts()->start()) == con.offset(),\n-            \"must be: %d == %d\", (int)(constant_addr - _masm.code()->consts()->start()), (int)(con.offset()));\n+    assert((constant_addr - masm->code()->consts()->start()) == con.offset(),\n+            \"must be: %d == %d\", (int)(constant_addr - masm->code()->consts()->start()), (int)(con.offset()));\n@@ -295,1 +294,1 @@\n-void ConstantTable::fill_jump_table(CodeBuffer& cb, MachConstantNode* n, GrowableArray<Label*> labels) const {\n+void ConstantTable::fill_jump_table(C2_MacroAssembler* masm, MachConstantNode* n, GrowableArray<Label*> labels) const {\n@@ -307,2 +306,1 @@\n-  MacroAssembler _masm(&cb);\n-  address* jump_table_base = (address*) (_masm.code()->consts()->start() + offset);\n+  address* jump_table_base = (address*) (masm->code()->consts()->start() + offset);\n@@ -313,2 +311,2 @@\n-    *constant_addr = cb.consts()->target(*labels.at(i), (address) constant_addr);\n-    cb.consts()->relocate((address) constant_addr, relocInfo::internal_word_type);\n+    *constant_addr = masm->code()->consts()->target(*labels.at(i), (address) constant_addr);\n+    masm->code()->consts()->relocate((address) constant_addr, relocInfo::internal_word_type);\n","filename":"src\/hotspot\/share\/opto\/constantTable.cpp","additions":22,"deletions":24,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-class CodeBuffer;\n@@ -34,0 +33,1 @@\n+class C2_MacroAssembler;\n@@ -142,1 +142,1 @@\n-  bool emit(CodeBuffer& cb) const;\n+  bool emit(C2_MacroAssembler* masm) const;\n@@ -175,1 +175,1 @@\n-  void     fill_jump_table(CodeBuffer& cb, MachConstantNode* n, GrowableArray<Label*> labels) const;\n+  void     fill_jump_table(C2_MacroAssembler* masm, MachConstantNode* n, GrowableArray<Label*> labels) const;\n","filename":"src\/hotspot\/share\/opto\/constantTable.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n","filename":"src\/hotspot\/share\/opto\/locknode.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -135,1 +135,1 @@\n-void MachNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n@@ -600,1 +600,1 @@\n-void MachNullCheckNode::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {\n+void MachNullCheckNode::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {\n","filename":"src\/hotspot\/share\/opto\/machnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include \"opto\/c2_MacroAssembler.hpp\"\n@@ -37,1 +38,0 @@\n-class CodeBuffer;\n@@ -287,2 +287,2 @@\n-  \/\/ Emit bytes into cbuf\n-  virtual void  emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  \/\/ Emit bytes using C2_MacroAssembler\n+  virtual void  emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -424,1 +424,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -450,1 +450,1 @@\n-  virtual void emit(CodeBuffer& cbuf, PhaseRegAlloc* ra_) const;\n+  virtual void emit(C2_MacroAssembler* masm, PhaseRegAlloc* ra_) const;\n@@ -501,1 +501,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -515,1 +515,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -530,1 +530,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -555,1 +555,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -613,1 +613,1 @@\n-  uint implementation( CodeBuffer *cbuf, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const;\n+  uint implementation( C2_MacroAssembler *masm, PhaseRegAlloc *ra_, bool do_size, outputStream* st ) const;\n@@ -615,1 +615,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -678,1 +678,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const { }\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const { }\n@@ -718,1 +718,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n@@ -949,1 +949,1 @@\n-  int resolved_method_index(CodeBuffer &cbuf) const {\n+  int resolved_method_index(C2_MacroAssembler *masm) const {\n@@ -955,1 +955,1 @@\n-      return cbuf.oop_recorder()->find_index(_method->constant_encoding());\n+      return masm->code()->oop_recorder()->find_index(_method->constant_encoding());\n@@ -1060,1 +1060,1 @@\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {}\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {}\n","filename":"src\/hotspot\/share\/opto\/machnode.hpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -1095,2 +1095,2 @@\n-\/\/ Emit bytes starting at parameter 'ptr'.\n-void Node::emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const {}\n+\/\/ Emit bytes using C2_MacroAssembler\n+void Node::emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const {}\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -189,0 +189,1 @@\n+class C2_MacroAssembler;\n@@ -1162,3 +1163,2 @@\n-  \/\/ Emit bytes starting at parameter 'ptr'\n-  \/\/ Bump 'ptr' by the number of output bytes\n-  virtual void emit(CodeBuffer &cbuf, PhaseRegAlloc *ra_) const;\n+  \/\/ Emit bytes using C2_MacroAssembler\n+  virtual void emit(C2_MacroAssembler *masm, PhaseRegAlloc *ra_) const;\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -361,1 +361,2 @@\n-  fill_buffer(cb, blk_starts);\n+  C2_MacroAssembler masm(cb);\n+  fill_buffer(&masm, blk_starts);\n@@ -1342,1 +1343,1 @@\n-void PhaseOutput::fill_buffer(CodeBuffer* cb, uint* blk_starts) {\n+void PhaseOutput::fill_buffer(C2_MacroAssembler* masm, uint* blk_starts) {\n@@ -1398,1 +1399,1 @@\n-    if (!constant_table().emit(*cb)) {\n+    if (!constant_table().emit(masm)) {\n@@ -1421,1 +1422,1 @@\n-      cb->flush_bundle(true);\n+      masm->code()->flush_bundle(true);\n@@ -1428,1 +1429,1 @@\n-      MacroAssembler(cb).block_comment(st.freeze());\n+      masm->block_comment(st.freeze());\n@@ -1438,1 +1439,1 @@\n-    MacroAssembler(cb).bind(blk_labels[block->_pre_order]);\n+    masm->bind(blk_labels[block->_pre_order]);\n@@ -1462,1 +1463,1 @@\n-        cb->flush_bundle(false);\n+        masm->code()->flush_bundle(false);\n@@ -1473,2 +1474,2 @@\n-          cb->flush_bundle(true);\n-          current_offset = cb->insts_size();\n+          masm->code()->flush_bundle(true);\n+          current_offset = masm->offset();\n@@ -1501,2 +1502,2 @@\n-          cb->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n-          if ((cb->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n+          masm->code()->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n+          if ((masm->code()->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n@@ -1506,3 +1507,3 @@\n-          nop->emit(*cb, C->regalloc());\n-          cb->flush_bundle(true);\n-          current_offset = cb->insts_size();\n+          nop->emit(masm, C->regalloc());\n+          masm->code()->flush_bundle(true);\n+          current_offset = masm->offset();\n@@ -1586,3 +1587,3 @@\n-                nop->emit(*cb, C->regalloc());\n-                cb->flush_bundle(true);\n-                current_offset = cb->insts_size();\n+                nop->emit(masm, C->regalloc());\n+                masm->code()->flush_bundle(true);\n+                current_offset = masm->offset();\n@@ -1653,2 +1654,2 @@\n-      cb->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n-      if ((cb->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n+      masm->code()->insts()->maybe_expand_to_ensure_remaining(MAX_inst_size);\n+      if ((masm->code()->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n@@ -1662,1 +1663,1 @@\n-        node_offsets[n->_idx] = cb->insts_size();\n+        node_offsets[n->_idx] = masm->offset();\n@@ -1668,3 +1669,3 @@\n-      DEBUG_ONLY(uint instr_offset = cb->insts_size());\n-      n->emit(*cb, C->regalloc());\n-      current_offset = cb->insts_size();\n+      DEBUG_ONLY(uint instr_offset = masm->offset());\n+      n->emit(masm, C->regalloc());\n+      current_offset = masm->offset();\n@@ -1689,1 +1690,1 @@\n-        Disassembler::decode(cb->insts_begin() + instr_offset, cb->insts_begin() + current_offset + 1, tty);\n+        Disassembler::decode(masm->code()->insts_begin() + instr_offset, masm->code()->insts_begin() + current_offset + 1, tty);\n@@ -1720,1 +1721,1 @@\n-        cb->set_insts_end(cb->insts_end() - Pipeline::instr_unit_size());\n+        masm->code()->set_insts_end(masm->code()->insts_end() - Pipeline::instr_unit_size());\n@@ -1725,1 +1726,1 @@\n-          node_offsets[delay_slot->_idx] = cb->insts_size();\n+          node_offsets[delay_slot->_idx] = masm->offset();\n@@ -1747,1 +1748,1 @@\n-        delay_slot->emit(*cb, C->regalloc());\n+        delay_slot->emit(masm, C->regalloc());\n@@ -1764,2 +1765,2 @@\n-        nop->emit(*cb, C->regalloc());\n-        current_offset = cb->insts_size();\n+        nop->emit(masm, C->regalloc());\n+        current_offset = masm->offset();\n@@ -1783,1 +1784,1 @@\n-  MacroAssembler(cb).bind( blk_labels[nblocks] );\n+  masm->bind( blk_labels[nblocks] );\n@@ -1801,1 +1802,1 @@\n-  if (!cb->finalize_stubs()) {\n+  if (!masm->code()->finalize_stubs()) {\n@@ -1807,1 +1808,1 @@\n-  bs->emit_stubs(*cb);\n+  bs->emit_stubs(*masm->code());\n@@ -1811,1 +1812,2 @@\n-  _stub_list.emit(*cb);\n+  assert(masm->inst_mark() == nullptr, \"should be.\");\n+  _stub_list.emit(*masm);\n@@ -1816,1 +1818,1 @@\n-  Scheduling::increment_method_size(cb->insts_size());\n+  Scheduling::increment_method_size(masm->offset());\n@@ -1827,1 +1829,1 @@\n-    _code_offsets.set_value(CodeOffsets::Exceptions, HandlerImpl::emit_exception_handler(*cb));\n+    _code_offsets.set_value(CodeOffsets::Exceptions, HandlerImpl::emit_exception_handler(masm));\n@@ -1832,1 +1834,1 @@\n-    _code_offsets.set_value(CodeOffsets::Deopt, HandlerImpl::emit_deopt_handler(*cb));\n+    _code_offsets.set_value(CodeOffsets::Deopt, HandlerImpl::emit_deopt_handler(masm));\n@@ -1838,1 +1840,1 @@\n-      _code_offsets.set_value(CodeOffsets::DeoptMH, HandlerImpl::emit_deopt_handler(*cb));\n+      _code_offsets.set_value(CodeOffsets::DeoptMH, HandlerImpl::emit_deopt_handler(masm));\n@@ -1843,1 +1845,1 @@\n-  if ((cb->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n+  if ((masm->code()->blob() == nullptr) || (!CompileBroker::should_compile_new_jobs())) {\n@@ -3299,0 +3301,2 @@\n+  C2_MacroAssembler masm(&buf);\n+  masm.bind(fakeL);\n@@ -3300,2 +3304,0 @@\n-    MacroAssembler masm(&buf);\n-    masm.bind(fakeL);\n@@ -3305,1 +3307,1 @@\n-  n->emit(buf, C->regalloc());\n+  n->emit(&masm, C->regalloc());\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":43,"deletions":41,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -157,1 +157,1 @@\n-  void fill_buffer(CodeBuffer* cb, uint* blk_starts);\n+  void fill_buffer(C2_MacroAssembler* masm, uint* blk_starts);\n","filename":"src\/hotspot\/share\/opto\/output.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}