{"files":[{"patch":"@@ -202,0 +202,4 @@\n+  virtual uint hash() const { return Node::hash() + ascii; }\n+  virtual bool cmp(const Node& n) const {\n+    return Node::cmp(n) && ascii == ((EncodeISOArrayNode&)n).is_ascii();\n+  }\n","filename":"src\/hotspot\/share\/opto\/intrinsicnode.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1093,0 +1093,4 @@\n+  virtual uint hash() const { return Node::hash() + _is_large; }\n+  virtual bool cmp(const Node& n) const {\n+    return Node::cmp(n) && _is_large == ((ClearArrayNode&)n).is_large();\n+  }\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -128,0 +128,6 @@\n+  virtual uint hash() const { return Node::hash() + _is_delayed_slow_loop + _useless; }\n+  virtual bool cmp(const Node& n) const {\n+    return Node::cmp(n)\n+           && _is_delayed_slow_loop == ((OpaqueMultiversioningNode&)n).is_delayed_slow_loop()\n+           DEBUG_ONLY(&& _useless == ((OpaqueMultiversioningNode&)n).is_useless());\n+  }\n","filename":"src\/hotspot\/share\/opto\/opaquenode.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"}]}