{"files":[{"patch":"@@ -252,1 +252,1 @@\n-    MutexLocker x(FreeList_lock, Mutex::_no_safepoint_check_flag);\n+    MutexLocker x(G1FreeList_lock, Mutex::_no_safepoint_check_flag);\n@@ -281,1 +281,1 @@\n-    MutexLocker x(FreeList_lock, Mutex::_no_safepoint_check_flag);\n+    MutexLocker x(G1FreeList_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1137,1 +1137,1 @@\n-                FreeList_lock->owned_by_self() || OldSets_lock->owned_by_self(),\n+                G1FreeList_lock->owned_by_self() || G1OldSets_lock->owned_by_self(),\n@@ -1160,1 +1160,1 @@\n-                OldSets_lock->owned_by_self(),\n+                G1OldSets_lock->owned_by_self(),\n@@ -2332,1 +2332,1 @@\n-  MutexLocker x(CGC_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLocker x(G1CGC_lock, Mutex::_no_safepoint_check_flag);\n@@ -2340,1 +2340,1 @@\n-  CGC_lock->notify();\n+  G1CGC_lock->notify();\n@@ -2694,1 +2694,1 @@\n-    MutexLocker x(OldSets_lock, Mutex::_no_safepoint_check_flag);\n+    MutexLocker x(G1OldSets_lock, Mutex::_no_safepoint_check_flag);\n@@ -2704,1 +2704,1 @@\n-    MutexLocker x(FreeList_lock, Mutex::_no_safepoint_check_flag);\n+    MutexLocker x(G1FreeList_lock, Mutex::_no_safepoint_check_flag);\n@@ -2939,1 +2939,1 @@\n-  assert(FreeList_lock->owned_by_self(), \"pre-condition\");\n+  assert(G1FreeList_lock->owned_by_self(), \"pre-condition\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -186,1 +186,1 @@\n-              FreeList_lock->owned_by_self(),\n+              G1FreeList_lock->owned_by_self(),\n@@ -207,1 +207,1 @@\n-              FreeList_lock->owned_by_self(),\n+              G1FreeList_lock->owned_by_self(),\n@@ -210,1 +210,1 @@\n-    guarantee(Uncommit_lock->owned_by_self(),\n+    guarantee(G1Uncommit_lock->owned_by_self(),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CommittedRegionMap.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -167,1 +167,1 @@\n-    MutexLocker x(MarkStackChunkList_lock, Mutex::_no_safepoint_check_flag);\n+    MutexLocker x(G1MarkStackChunkList_lock, Mutex::_no_safepoint_check_flag);\n@@ -296,1 +296,1 @@\n-  MutexLocker x(MarkStackChunkList_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLocker x(G1MarkStackChunkList_lock, Mutex::_no_safepoint_check_flag);\n@@ -302,1 +302,1 @@\n-  MutexLocker x(MarkStackFreeList_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLocker x(G1MarkStackFreeList_lock, Mutex::_no_safepoint_check_flag);\n@@ -315,1 +315,1 @@\n-  MutexLocker x(MarkStackChunkList_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLocker x(G1MarkStackChunkList_lock, Mutex::_no_safepoint_check_flag);\n@@ -324,1 +324,1 @@\n-  MutexLocker x(MarkStackFreeList_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLocker x(G1MarkStackFreeList_lock, Mutex::_no_safepoint_check_flag);\n@@ -435,1 +435,1 @@\n-  MutexLocker x(RootRegionScan_lock, Mutex::_no_safepoint_check_flag);\n+  MutexLocker x(G1RootRegionScan_lock, Mutex::_no_safepoint_check_flag);\n@@ -437,1 +437,1 @@\n-  RootRegionScan_lock->notify_all();\n+  G1RootRegionScan_lock->notify_all();\n@@ -462,1 +462,1 @@\n-    MonitorLocker ml(RootRegionScan_lock, Mutex::_no_safepoint_check_flag);\n+    MonitorLocker ml(G1RootRegionScan_lock, Mutex::_no_safepoint_check_flag);\n@@ -520,1 +520,1 @@\n-  assert(CGC_lock != nullptr, \"CGC_lock must be initialized\");\n+  assert(G1CGC_lock != nullptr, \"CGC_lock must be initialized\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -83,1 +83,1 @@\n-    MonitorLocker ml(CGC_lock, Monitor::_no_safepoint_check_flag);\n+    MonitorLocker ml(G1CGC_lock, Monitor::_no_safepoint_check_flag);\n@@ -146,2 +146,2 @@\n-  MutexLocker ml(CGC_lock, Mutex::_no_safepoint_check_flag);\n-  CGC_lock->notify_all();\n+  MutexLocker ml(G1CGC_lock, Mutex::_no_safepoint_check_flag);\n+  G1CGC_lock->notify_all();\n@@ -151,1 +151,1 @@\n-  MonitorLocker ml(CGC_lock, Mutex::_no_safepoint_check_flag);\n+  MonitorLocker ml(G1CGC_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkThread.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-                FreeList_lock->owned_by_self(), \"master free list MT safety protocol at a safepoint\");\n+                G1FreeList_lock->owned_by_self(), \"master free list MT safety protocol at a safepoint\");\n@@ -291,1 +291,1 @@\n-    MutexLocker uc(Uncommit_lock, Mutex::_no_safepoint_check_flag);\n+    MutexLocker uc(G1Uncommit_lock, Mutex::_no_safepoint_check_flag);\n@@ -377,1 +377,1 @@\n-      MutexLocker uc(Uncommit_lock, Mutex::_no_safepoint_check_flag);\n+      MutexLocker uc(G1Uncommit_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -768,1 +768,1 @@\n-    MutexLocker x(OldSets_lock, Mutex::_no_safepoint_check_flag);\n+    MutexLocker x(G1OldSets_lock, Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -73,1 +73,0 @@\n-Monitor* CGC_lock                     = nullptr;\n@@ -75,5 +74,0 @@\n-Monitor* G1OldGCCount_lock            = nullptr;\n-Mutex*   G1RareEvent_lock             = nullptr;\n-Mutex*   G1DetachedRefinementStats_lock = nullptr;\n-Mutex*   MarkStackFreeList_lock       = nullptr;\n-Mutex*   MarkStackChunkList_lock      = nullptr;\n@@ -106,4 +100,10 @@\n-Mutex*   FreeList_lock                = nullptr;\n-Mutex*   OldSets_lock                 = nullptr;\n-Mutex*   Uncommit_lock                = nullptr;\n-Monitor* RootRegionScan_lock          = nullptr;\n+Monitor* G1CGC_lock                   = nullptr;\n+Mutex*   G1FreeList_lock              = nullptr;\n+Mutex*   G1OldSets_lock               = nullptr;\n+Mutex*   G1Uncommit_lock              = nullptr;\n+Monitor* G1RootRegionScan_lock        = nullptr;\n+Monitor* G1OldGCCount_lock            = nullptr;\n+Mutex*   G1RareEvent_lock             = nullptr;\n+Mutex*   G1DetachedRefinementStats_lock = nullptr;\n+Mutex*   G1MarkStackFreeList_lock     = nullptr;\n+Mutex*   G1MarkStackChunkList_lock    = nullptr;\n@@ -213,1 +213,1 @@\n-    MUTEX_DEFN(CGC_lock                      , PaddedMonitor, nosafepoint);\n+    MUTEX_DEFN(G1CGC_lock                    , PaddedMonitor, nosafepoint);\n@@ -217,4 +217,4 @@\n-    MUTEX_DEFN(FreeList_lock                 , PaddedMutex  , service-1);\n-    MUTEX_DEFN(OldSets_lock                  , PaddedMutex  , nosafepoint);\n-    MUTEX_DEFN(Uncommit_lock                 , PaddedMutex  , service-2);\n-    MUTEX_DEFN(RootRegionScan_lock           , PaddedMonitor, nosafepoint-1);\n+    MUTEX_DEFN(G1FreeList_lock               , PaddedMutex  , service-1);\n+    MUTEX_DEFN(G1OldSets_lock                , PaddedMutex  , nosafepoint);\n+    MUTEX_DEFN(G1Uncommit_lock               , PaddedMutex  , service-2);\n+    MUTEX_DEFN(G1RootRegionScan_lock         , PaddedMonitor, nosafepoint-1);\n@@ -222,2 +222,2 @@\n-    MUTEX_DEFN(MarkStackFreeList_lock        , PaddedMutex  , nosafepoint);\n-    MUTEX_DEFN(MarkStackChunkList_lock       , PaddedMutex  , nosafepoint);\n+    MUTEX_DEFN(G1MarkStackFreeList_lock      , PaddedMutex  , nosafepoint);\n+    MUTEX_DEFN(G1MarkStackChunkList_lock     , PaddedMutex  , nosafepoint);\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -73,2 +73,1 @@\n-extern Monitor* CGC_lock;                        \/\/ used for coordination between\n-                                                 \/\/ fore- & background GC threads.\n+extern Monitor* G1CGC_lock;                      \/\/ used for coordination between fore- & background G1 concurrent GC threads.\n@@ -78,3 +77,3 @@\n-extern Mutex*   G1DetachedRefinementStats_lock;  \/\/ Lock protecting detached refinement stats\n-extern Mutex*   MarkStackFreeList_lock;          \/\/ Protects access to the global mark stack free list.\n-extern Mutex*   MarkStackChunkList_lock;         \/\/ Protects access to the global mark stack chunk list.\n+extern Mutex*   G1DetachedRefinementStats_lock;  \/\/ Lock protecting detached refinement stats for G1.\n+extern Mutex*   G1MarkStackFreeList_lock;        \/\/ Protects access to the G1 global mark stack free list.\n+extern Mutex*   G1MarkStackChunkList_lock;       \/\/ Protects access to the G1 global mark stack chunk list.\n@@ -106,4 +105,4 @@\n-extern Mutex*   FreeList_lock;                   \/\/ protects the free region list during safepoints\n-extern Mutex*   OldSets_lock;                    \/\/ protects the old region sets\n-extern Mutex*   Uncommit_lock;                   \/\/ protects the uncommit list when not at safepoints\n-extern Monitor* RootRegionScan_lock;             \/\/ used to notify that the CM threads have finished scanning the IM snapshot regions\n+extern Mutex*   G1FreeList_lock;                 \/\/ protects the G1 free region list during safepoints\n+extern Mutex*   G1OldSets_lock;                  \/\/ protects the G1 old region sets\n+extern Mutex*   G1Uncommit_lock;                 \/\/ protects the G1 uncommit list when not at safepoints\n+extern Monitor* G1RootRegionScan_lock;           \/\/ used to notify that the G1 CM threads have finished scanning the root regions\n","filename":"src\/hotspot\/share\/runtime\/mutexLocker.hpp","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"}]}