{"files":[{"patch":"@@ -2184,1 +2184,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 2048+pad, 1024);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 2048+pad, 1024);\n@@ -2568,1 +2569,5 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(sharedStubId id, address call_ptr) {\n+  assert((id >= sharedStubId::polling_page_vectors_safepoint_handler_id ||\n+          id <= sharedStubId::polling_page_return_handler_id),\n+         \"expected a polling page stub id\");\n+\n@@ -2574,1 +2579,2 @@\n-  CodeBuffer buffer(\"handler_blob\", 2048, 1024);\n+  const char *name = SharedRuntime::stub_name(id);\n+  CodeBuffer buffer(name, 2048, 1024);\n@@ -2580,2 +2586,2 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n-  RegisterSaver reg_save(poll_type == POLL_AT_VECTOR_LOOP \/* save_vectors *\/);\n+  bool cause_return = (id == sharedStubId::polling_page_return_handler_id);\n+  RegisterSaver reg_save(id == sharedStubId::polling_page_vectors_safepoint_handler_id \/* save_vectors *\/);\n@@ -2693,1 +2699,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(sharedStubId id, address destination) {\n@@ -2695,0 +2701,3 @@\n+  assert((id >= sharedStubId::wrong_method_id &&\n+          id <= sharedStubId::resolve_static_call_id),\n+         \"expected a resolve blob id\");\n@@ -2699,0 +2708,1 @@\n+  const char *name = SharedRuntime::stub_name(id);\n@@ -2790,1 +2800,7 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(sharedStubId id, address runtime_entry) {\n+  assert((id >= sharedStubId::throw_AbstractMethodError_id &&\n+          id <= sharedStubId::throw_delayed_StackOverflowError_id),\n+         \"expected a throw stub id\");\n+\n+  const char *name = SharedRuntime::stub_name(id);\n+\n@@ -2899,1 +2915,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", insts_size, locs_size);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2918,1 +2935,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_write_checkpoint\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n@@ -2937,1 +2954,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", insts_size, locs_size);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2956,1 +2974,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_return_lease\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":29,"deletions":11,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1363,1 +1363,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 1024, 1024);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 1024, 1024);\n@@ -1604,1 +1605,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(sharedStubId id, address call_ptr) {\n@@ -1606,0 +1607,3 @@\n+  assert((id >= sharedStubId::polling_page_vectors_safepoint_handler_id ||\n+          id <= sharedStubId::polling_page_return_handler_id),\n+         \"expected a polling page stub id\");\n@@ -1608,1 +1612,2 @@\n-  CodeBuffer buffer(\"handler_blob\", 256, 256);\n+  const char *name = SharedRuntime::stub_name(id);\n+  CodeBuffer buffer(name, 256, 256);\n@@ -1612,1 +1617,1 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n+  bool cause_return = (id == sharedStubId::polling_page_return_handler_id);\n@@ -1674,1 +1679,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(sharedStubId id, address destination) {\n@@ -1676,0 +1681,3 @@\n+  assert((id >= sharedStubId::wrong_method_id &&\n+          id <= sharedStubId::resolve_static_call_id),\n+         \"expected a resolve blob id\");\n@@ -1678,0 +1686,1 @@\n+  const char *name = SharedRuntime::stub_name(id);\n@@ -1736,1 +1745,7 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(sharedStubId id, address runtime_entry) {\n+  assert((id >= sharedStubId::throw_AbstractMethodError_id &&\n+          id <= sharedStubId::throw_delayed_StackOverflowError_id),\n+         \"expected a throw stub id\");\n+\n+  const char *name = SharedRuntime::stub_name(id);\n+\n@@ -1796,1 +1811,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", 512, 64);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, 512, 64);\n@@ -1821,1 +1837,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n+    RuntimeStub::new_runtime_stub(name,\n@@ -1839,1 +1855,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", 512, 64);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, 512, 64);\n@@ -1861,1 +1878,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n+    RuntimeStub::new_runtime_stub(name,\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2864,1 +2864,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 2048, 1024);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 2048, 1024);\n@@ -3214,1 +3215,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(sharedStubId id, address call_ptr) {\n@@ -3217,0 +3218,3 @@\n+  assert((id >= sharedStubId::polling_page_vectors_safepoint_handler_id ||\n+          id <= sharedStubId::polling_page_return_handler_id),\n+         \"expected a polling page stub id\");\n@@ -3223,1 +3227,2 @@\n-  CodeBuffer buffer(\"handler_blob\", 2048, 1024);\n+  const char *name = SharedRuntime::stub_name(id);\n+  CodeBuffer buffer(name, 2048, 1024);\n@@ -3230,1 +3235,1 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n+  bool cause_return = (id == sharedStubId::polling_page_return_handler_id);\n@@ -3240,1 +3245,1 @@\n-  bool save_vectors = (poll_type == POLL_AT_VECTOR_LOOP);\n+  bool save_vectors = (id == sharedStubId::polling_page_vectors_safepoint_handler_id);\n@@ -3327,1 +3332,4 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(sharedStubId id, address destination) {\n+  assert((id >= sharedStubId::wrong_method_id &&\n+          id <= sharedStubId::resolve_static_call_id),\n+         \"expected a resolve blob id\");\n@@ -3332,0 +3340,1 @@\n+  const char *name = SharedRuntime::stub_name(id);\n@@ -3429,1 +3438,7 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(sharedStubId id, address runtime_entry) {\n+  assert((id >= sharedStubId::throw_AbstractMethodError_id &&\n+          id <= sharedStubId::throw_delayed_StackOverflowError_id),\n+         \"expected a throw stub id\");\n+\n+  const char *name = SharedRuntime::stub_name(id);\n+\n@@ -3752,1 +3767,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", 512, 64);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, 512, 64);\n@@ -3780,2 +3796,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n-                                  &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n@@ -3789,1 +3804,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", 512, 64);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, 512, 64);\n@@ -3815,2 +3831,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n-                                  &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":28,"deletions":13,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -2060,1 +2060,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 2048 + pad, 1024);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 2048 + pad, 1024);\n@@ -2438,1 +2439,5 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(sharedStubId id, address call_ptr) {\n+  assert((id >= sharedStubId::polling_page_vectors_safepoint_handler_id ||\n+          id <= sharedStubId::polling_page_return_handler_id),\n+         \"expected a polling page stub id\");\n+\n@@ -2452,2 +2457,2 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n-  RegisterSaver reg_saver(poll_type == POLL_AT_VECTOR_LOOP \/* save_vectors *\/);\n+  bool cause_return = (id == sharedStubId::polling_page_return_handler_id);\n+  RegisterSaver reg_save(id == sharedStubId::polling_page_vectors_safepoint_handler_id \/* save_vectors *\/);\n@@ -2559,1 +2564,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(sharedStubId id, address destination) {\n@@ -2561,0 +2566,3 @@\n+  assert((id >= sharedStubId::wrong_method_id &&\n+          id <= sharedStubId::resolve_static_call_id),\n+         \"expected a resolve blob id\");\n@@ -2565,0 +2573,1 @@\n+  const char *name = SharedRuntime::stub_name(id);\n@@ -2655,1 +2664,7 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(sharedStubId id, address runtime_entry) {\n+  assert((id >= sharedStubId::throw_AbstractMethodError_id &&\n+          id <= sharedStubId::throw_delayed_StackOverflowError_id),\n+         \"expected a throw stub id\");\n+\n+  const char *name = SharedRuntime::stub_name(id);\n+\n@@ -2762,1 +2777,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", insts_size, locs_size);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2782,1 +2798,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_write_checkpoint\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n@@ -2800,1 +2816,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", insts_size, locs_size);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2819,1 +2836,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_return_lease\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":27,"deletions":10,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2491,1 +2491,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 2048, 1024);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 2048, 1024);\n@@ -2837,1 +2838,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(sharedStubId id, address call_ptr) {\n@@ -2840,0 +2841,3 @@\n+  assert((id >= sharedStubId::polling_page_vectors_safepoint_handler_id ||\n+          id <= sharedStubId::polling_page_return_handler_id),\n+         \"expected a polling page stub id\");\n@@ -2846,1 +2850,2 @@\n-  CodeBuffer buffer(\"handler_blob\", 2048, 1024);\n+  const char *name = SharedRuntime::stub_name(id);\n+  CodeBuffer buffer(name, 2048, 1024);\n@@ -2853,1 +2858,1 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n+  bool cause_return = (id == sharedStubId::polling_page_return_handler_id);\n@@ -2938,1 +2943,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(sharedStubId id, address destination) {\n@@ -2940,0 +2945,3 @@\n+  assert((id >= sharedStubId::wrong_method_id &&\n+          id <= sharedStubId::resolve_static_call_id),\n+         \"expected a resolve blob id\");\n@@ -2944,0 +2952,1 @@\n+  const char *name = SharedRuntime::stub_name(id);\n@@ -3035,1 +3044,6 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(sharedStubId id, address runtime_entry) {\n+  assert((id >= sharedStubId::throw_AbstractMethodError_id &&\n+          id <= sharedStubId::throw_delayed_StackOverflowError_id),\n+         \"expected a throw stub id\");\n+\n+  const char *name = SharedRuntime::stub_name(id);\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":20,"deletions":6,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2065,1 +2065,2 @@\n-  CodeBuffer   buffer(\"deopt_blob\", 1536, 1024);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::deopt_id);\n+  CodeBuffer   buffer(name, 1536, 1024);\n@@ -2406,1 +2407,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(sharedStubId id, address call_ptr) {\n@@ -2413,0 +2414,3 @@\n+  assert((id >= sharedStubId::polling_page_vectors_safepoint_handler_id ||\n+          id <= sharedStubId::polling_page_return_handler_id),\n+         \"expected a polling page stub id\");\n@@ -2420,1 +2424,2 @@\n-  CodeBuffer   buffer(\"handler_blob\", 2048, 1024);\n+  const char *name = SharedRuntime::stub_name(id);\n+  CodeBuffer   buffer(name, 2048, 1024);\n@@ -2426,2 +2431,2 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n-  bool save_vectors = (poll_type == POLL_AT_VECTOR_LOOP);\n+  bool cause_return = (id == sharedStubId::polling_page_return_handler_id);\n+  bool save_vectors = (id == sharedStubId::polling_page_vectors_safepoint_handler_id);\n@@ -2559,1 +2564,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(sharedStubId id, address destination) {\n@@ -2561,0 +2566,3 @@\n+  assert((id >= sharedStubId::wrong_method_id &&\n+          id <= sharedStubId::resolve_static_call_id),\n+         \"expected a resolve blob id\");\n@@ -2565,0 +2573,1 @@\n+  const char *name = SharedRuntime::stub_name(id);\n@@ -2665,1 +2674,6 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(sharedStubId id, address runtime_entry) {\n+  assert((id >= sharedStubId::throw_AbstractMethodError_id &&\n+          id <= sharedStubId::throw_delayed_StackOverflowError_id),\n+         \"expected a throw stub id\");\n+\n+  const char *name = SharedRuntime::stub_name(id);\n@@ -2779,1 +2793,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", insts_size, locs_size);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2798,1 +2813,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_write_checkpoint\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n@@ -2820,1 +2835,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", insts_size, locs_size);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2838,1 +2854,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_return_lease\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":27,"deletions":11,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2626,1 +2626,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 2560+pad, 1024);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 2560+pad, 1024);\n@@ -2984,1 +2985,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(sharedStubId id, address call_ptr) {\n@@ -2987,0 +2988,3 @@\n+  assert((id >= sharedStubId::polling_page_vectors_safepoint_handler_id ||\n+          id <= sharedStubId::polling_page_return_handler_id),\n+         \"expected a polling page stub id\");\n@@ -2993,1 +2997,2 @@\n-  CodeBuffer buffer(\"handler_blob\", 2348, 1024);\n+  const char *name = SharedRuntime::stub_name(id);\n+  CodeBuffer buffer(name, 2348, 1024);\n@@ -2999,2 +3004,2 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n-  bool save_wide_vectors = (poll_type == POLL_AT_VECTOR_LOOP);\n+  bool cause_return = (id == sharedStubId::polling_page_return_handler_id);\n+  bool save_wide_vectors = (id == sharedStubId::polling_page_vectors_safepoint_handler_id);\n@@ -3143,1 +3148,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(sharedStubId id, address destination) {\n@@ -3145,0 +3150,3 @@\n+  assert((id >= sharedStubId::wrong_method_id &&\n+          id <= sharedStubId::resolve_static_call_id),\n+         \"expected a resolve blob id\");\n@@ -3149,0 +3157,1 @@\n+  const char *name = SharedRuntime::stub_name(id);\n@@ -3235,1 +3244,7 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(sharedStubId id, address runtime_entry) {\n+  assert((id >= sharedStubId::throw_AbstractMethodError_id &&\n+          id <= sharedStubId::throw_delayed_StackOverflowError_id),\n+         \"expected a throw stub id\");\n+\n+  const char *name = SharedRuntime::stub_name(id);\n+\n@@ -3594,1 +3609,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", 1024, 64);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, 1024, 64);\n@@ -3619,1 +3635,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n+    RuntimeStub::new_runtime_stub(name,\n@@ -3638,1 +3654,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", 1024, 64);\n+  const char *name = SharedRuntime::stub_name(sharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, 1024, 64);\n@@ -3660,1 +3677,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n+    RuntimeStub::new_runtime_stub(name,\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":28,"deletions":11,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(sharedStubId id, address call_ptr) {\n@@ -112,1 +112,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(sharedStubId id, address destination) {\n@@ -116,1 +116,1 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(sharedStubId id, address runtime_entry) {\n","filename":"src\/hotspot\/cpu\/zero\/sharedRuntime_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,17 +95,0 @@\n-RuntimeStub*        SharedRuntime::_wrong_method_blob;\n-RuntimeStub*        SharedRuntime::_wrong_method_abstract_blob;\n-RuntimeStub*        SharedRuntime::_ic_miss_blob;\n-RuntimeStub*        SharedRuntime::_resolve_opt_virtual_call_blob;\n-RuntimeStub*        SharedRuntime::_resolve_virtual_call_blob;\n-RuntimeStub*        SharedRuntime::_resolve_static_call_blob;\n-\n-DeoptimizationBlob* SharedRuntime::_deopt_blob;\n-SafepointBlob*      SharedRuntime::_polling_page_vectors_safepoint_handler_blob;\n-SafepointBlob*      SharedRuntime::_polling_page_safepoint_handler_blob;\n-SafepointBlob*      SharedRuntime::_polling_page_return_handler_blob;\n-\n-RuntimeStub*        SharedRuntime::_throw_AbstractMethodError_blob;\n-RuntimeStub*        SharedRuntime::_throw_IncompatibleClassChangeError_blob;\n-RuntimeStub*        SharedRuntime::_throw_NullPointerException_at_call_blob;\n-RuntimeStub*        SharedRuntime::_throw_StackOverflowError_blob;\n-RuntimeStub*        SharedRuntime::_throw_delayed_StackOverflowError_blob;\n@@ -113,4 +96,4 @@\n-#if INCLUDE_JFR\n-RuntimeStub*        SharedRuntime::_jfr_write_checkpoint_blob = nullptr;\n-RuntimeStub*        SharedRuntime::_jfr_return_lease_blob = nullptr;\n-#endif\n+#define SHARED_STUB_FIELD_DEFINE(name, type) \\\n+  type        SharedRuntime::BLOB_FIELD_NAME(name);\n+  SHARED_STUBS_DO(SHARED_STUB_FIELD_DEFINE)\n+#undef SHARED_STUB_FIELD_DEFINE\n@@ -120,0 +103,5 @@\n+#define SHARED_STUB_NAME_DECLARE(name, type) \"Shared Runtime \" # name \"_blob\",\n+const char *SharedRuntime::_stub_names[] = {\n+  SHARED_STUBS_DO(SHARED_STUB_NAME_DECLARE)\n+};\n+\n@@ -124,1 +112,1 @@\n-    generate_throw_exception(\"StackOverflowError throw_exception\",\n+    generate_throw_exception(sharedStubId::throw_StackOverflowError_id,\n@@ -129,6 +117,18 @@\n-  _wrong_method_blob                   = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method),          \"wrong_method_stub\");\n-  _wrong_method_abstract_blob          = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method_abstract), \"wrong_method_abstract_stub\");\n-  _ic_miss_blob                        = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method_ic_miss),  \"ic_miss_stub\");\n-  _resolve_opt_virtual_call_blob       = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::resolve_opt_virtual_call_C),   \"resolve_opt_virtual_call\");\n-  _resolve_virtual_call_blob           = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::resolve_virtual_call_C),       \"resolve_virtual_call\");\n-  _resolve_static_call_blob            = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::resolve_static_call_C),        \"resolve_static_call\");\n+  _wrong_method_blob =\n+    generate_resolve_blob(sharedStubId::wrong_method_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method));\n+  _wrong_method_abstract_blob =\n+    generate_resolve_blob(sharedStubId::wrong_method_abstract_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method_abstract));\n+  _ic_miss_blob =\n+    generate_resolve_blob(sharedStubId::ic_miss_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method_ic_miss));\n+  _resolve_opt_virtual_call_blob =\n+    generate_resolve_blob(sharedStubId::resolve_opt_virtual_call_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::resolve_opt_virtual_call_C));\n+  _resolve_virtual_call_blob =\n+    generate_resolve_blob(sharedStubId::resolve_virtual_call_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::resolve_virtual_call_C));\n+  _resolve_static_call_blob =\n+    generate_resolve_blob(sharedStubId::resolve_static_call_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::resolve_static_call_C));\n@@ -137,1 +137,1 @@\n-    generate_throw_exception(\"delayed StackOverflowError throw_exception\",\n+    generate_throw_exception(sharedStubId::throw_delayed_StackOverflowError_id,\n@@ -141,1 +141,1 @@\n-    generate_throw_exception(\"AbstractMethodError throw_exception\",\n+    generate_throw_exception(sharedStubId::throw_AbstractMethodError_id,\n@@ -145,1 +145,1 @@\n-    generate_throw_exception(\"IncompatibleClassChangeError throw_exception\",\n+    generate_throw_exception(sharedStubId::throw_IncompatibleClassChangeError_id,\n@@ -149,1 +149,1 @@\n-    generate_throw_exception(\"NullPointerException at call throw_exception\",\n+    generate_throw_exception(sharedStubId::throw_NullPointerException_at_call_id,\n@@ -158,1 +158,3 @@\n-    _polling_page_vectors_safepoint_handler_blob = generate_handler_blob(CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception), POLL_AT_VECTOR_LOOP);\n+    _polling_page_vectors_safepoint_handler_blob =\n+      generate_handler_blob(sharedStubId::polling_page_vectors_safepoint_handler_id,\n+                            CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception));\n@@ -161,2 +163,6 @@\n-  _polling_page_safepoint_handler_blob = generate_handler_blob(CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception), POLL_AT_LOOP);\n-  _polling_page_return_handler_blob    = generate_handler_blob(CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception), POLL_AT_RETURN);\n+  _polling_page_safepoint_handler_blob =\n+    generate_handler_blob(sharedStubId::polling_page_safepoint_handler_id,\n+                          CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception));\n+  _polling_page_return_handler_blob =\n+    generate_handler_blob(sharedStubId::polling_page_return_handler_id,\n+                          CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception));\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":41,"deletions":35,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/stubDeclarations.hpp\"\n@@ -45,0 +46,10 @@\n+\/\/ define sharedStubId enum tags: wrong_method_id, etc\n+\n+#define SHARED_STUB_ID_ENUM_DECLARE(name, type) STUB_ID_NAME(name),\n+enum class sharedStubId :int {\n+  NO_STUBID = -1,\n+  SHARED_STUBS_DO(SHARED_STUB_ID_ENUM_DECLARE)\n+  NUM_STUBIDS\n+};\n+#undef SHARED_STUB_ID_ENUM_DECLARE\n+\n@@ -49,15 +60,10 @@\n-  \/\/ Shared stub locations\n-\n-  static RuntimeStub*        _wrong_method_blob;\n-  static RuntimeStub*        _wrong_method_abstract_blob;\n-  static RuntimeStub*        _ic_miss_blob;\n-  static RuntimeStub*        _resolve_opt_virtual_call_blob;\n-  static RuntimeStub*        _resolve_virtual_call_blob;\n-  static RuntimeStub*        _resolve_static_call_blob;\n-\n-  static DeoptimizationBlob* _deopt_blob;\n-\n-  static SafepointBlob*      _polling_page_vectors_safepoint_handler_blob;\n-  static SafepointBlob*      _polling_page_safepoint_handler_blob;\n-  static SafepointBlob*      _polling_page_return_handler_blob;\n-\n+  \/\/ Declare shared stub fields\n+#define SHARED_STUB_FIELD_DECLARE(name, type) \\\n+  static type        BLOB_FIELD_NAME(name);\n+  SHARED_STUBS_DO(SHARED_STUB_FIELD_DECLARE)\n+#undef SHARED_STUB_FIELD_DECLARE\n+\n+  \/\/ cont_doYieldStub is not yet folded into the general model for\n+  \/\/ shared stub\/blob handling. It is actually a specially generated\n+  \/\/ native wrapper for a specific native method, as also is it's\n+  \/\/ counterpart the continuation do_enter method.\n@@ -66,11 +72,2 @@\n-  static RuntimeStub*        _throw_AbstractMethodError_blob;\n-  static RuntimeStub*        _throw_IncompatibleClassChangeError_blob;\n-  static RuntimeStub*        _throw_NullPointerException_at_call_blob;\n-  static RuntimeStub*        _throw_StackOverflowError_blob;\n-  static RuntimeStub*        _throw_delayed_StackOverflowError_blob;\n-\n-#if INCLUDE_JFR\n-  static RuntimeStub*        _jfr_write_checkpoint_blob;\n-  static RuntimeStub*        _jfr_return_lease_blob;\n-#endif\n-\n+  \/\/ Stub names indexed by sharedStubId\n+  static const char *_stub_names[];\n@@ -83,4 +80,3 @@\n-  enum { POLL_AT_RETURN,  POLL_AT_LOOP, POLL_AT_VECTOR_LOOP };\n-  static SafepointBlob* generate_handler_blob(address call_ptr, int poll_type);\n-  static RuntimeStub*   generate_resolve_blob(address destination, const char* name);\n-  static RuntimeStub*   generate_throw_exception(const char* name, address runtime_entry);\n+  static SafepointBlob* generate_handler_blob(sharedStubId id, address call_ptr);\n+  static RuntimeStub*   generate_resolve_blob(sharedStubId id, address destination);\n+  static RuntimeStub*   generate_throw_exception(sharedStubId id, address runtime_entry);\n@@ -100,0 +96,5 @@\n+  static const char *stub_name(sharedStubId id) {\n+    assert(id > sharedStubId::NO_STUBID && id < sharedStubId::NUM_STUBIDS, \"stub id out of range\");\n+    return _stub_names[(int)id];\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":31,"deletions":30,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -0,0 +1,170 @@\n+\/*\n+ * Copyright (c) 2024, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_SHAREDRUNTIME_ID_HPP\n+#define SHARE_RUNTIME_SHAREDRUNTIME_ID_HPP\n+\n+#include \"utilities\/macros.hpp\"\n+\n+\/\/ macros for generating definitions and declarations for shared, c1\n+\/\/ and opto blob fields and associated stub ids\n+\n+\/\/ Different shared stubs can have different blob types and may\n+\/\/ include some JFR stubs\n+\/\/\n+\/\/ n.b resolve, handler and throw stubs must remain grouped in the\n+\/\/ same order to allow id values to be range checked\n+\n+#if INCLUDE_JFR\n+\/\/ template(name, type)\n+#define SHARED_JFR_STUBS_DO(template)                                  \\\n+  template(jfr_write_checkpoint, RuntimeStub*)                         \\\n+  template(jfr_return_lease, RuntimeStub*)                             \\\n+\n+#else\n+#define SHARED_JFR_STUBS_DO(TEMPLATE)\n+#endif\n+\n+\/\/ template(name, type)\n+#define SHARED_STUBS_DO(template)                                      \\\n+  template(deopt, DeoptimizationBlob*)                                 \\\n+  \/* resolve stubs *\/                                                  \\\n+  template(wrong_method, RuntimeStub*)                                 \\\n+  template(wrong_method_abstract, RuntimeStub*)                        \\\n+  template(ic_miss, RuntimeStub*)                                      \\\n+  template(resolve_opt_virtual_call, RuntimeStub*)                     \\\n+  template(resolve_virtual_call, RuntimeStub*)                         \\\n+  template(resolve_static_call, RuntimeStub*)                          \\\n+  \/* handler stubs *\/                                                  \\\n+  template(polling_page_vectors_safepoint_handler, SafepointBlob*)     \\\n+  template(polling_page_safepoint_handler, SafepointBlob*)             \\\n+  template(polling_page_return_handler, SafepointBlob*)                \\\n+  \/* throw stubs *\/                                                    \\\n+  template(throw_AbstractMethodError, RuntimeStub*)                    \\\n+  template(throw_IncompatibleClassChangeError, RuntimeStub*)           \\\n+  template(throw_NullPointerException_at_call, RuntimeStub*)           \\\n+  template(throw_StackOverflowError, RuntimeStub*)                     \\\n+  template(throw_delayed_StackOverflowError, RuntimeStub*)             \\\n+  \/* other stubs *\/                                                    \\\n+  SHARED_JFR_STUBS_DO(template)                                        \\\n+\n+\/\/ C1 stubs are always generated in a generic CodeBlob\n+\n+#ifdef COMPILER1\n+\/\/ template(name)\n+#define C1_STUBS_DO(template)                                          \\\n+  template(dtrace_object_alloc)                                        \\\n+  template(unwind_exception)                                           \\\n+  template(forward_exception)                                          \\\n+  template(throw_range_check_failed)       \/* throws ArrayIndexOutOfBoundsException *\/ \\\n+  template(throw_index_exception)          \/* throws IndexOutOfBoundsException *\/ \\\n+  template(throw_div0_exception)                                       \\\n+  template(throw_null_pointer_exception)                               \\\n+  template(register_finalizer)                                         \\\n+  template(new_instance)                                               \\\n+  template(fast_new_instance)                                          \\\n+  template(fast_new_instance_init_check)                               \\\n+  template(new_type_array)                                             \\\n+  template(new_object_array)                                           \\\n+  template(new_multi_array)                                            \\\n+  template(handle_exception_nofpu)         \/* optimized version that does not preserve fpu registers *\/ \\\n+  template(handle_exception)                                           \\\n+  template(handle_exception_from_callee)                               \\\n+  template(throw_array_store_exception)                                \\\n+  template(throw_class_cast_exception)                                 \\\n+  template(throw_incompatible_class_change_error)                      \\\n+  template(slow_subtype_check)                                         \\\n+  template(monitorenter)                                               \\\n+  template(monitorenter_nofpu)             \/* optimized version that does not preserve fpu registers *\/ \\\n+  template(monitorexit)                                                \\\n+  template(monitorexit_nofpu)              \/* optimized version that does not preserve fpu registers *\/ \\\n+  template(deoptimize)                                                 \\\n+  template(access_field_patching)                                      \\\n+  template(load_klass_patching)                                        \\\n+  template(load_mirror_patching)                                       \\\n+  template(load_appendix_patching)                                     \\\n+  template(fpu2long_stub)                                              \\\n+  template(counter_overflow)                                           \\\n+  template(predicate_failed_trap)                                      \\\n+\n+#else\n+#define C1_STUBS_DO(template)\n+#endif\n+\n+\/\/ Opto stubs can have different blob types and may include some JVMTI\n+\/\/ stubs\n+\n+#ifdef COMPILER2\n+\/\/ template(name, type)\n+#if INCLUDE_JVMTI\n+#define OPTO_JVMTI_STUBS_DO(template)                                  \\\n+  template(notify_jvmti_vthread_start, address)                        \\\n+  template(notify_jvmti_vthread_end, address)                          \\\n+  template(notify_jvmti_vthread_mount, address)                        \\\n+  template(notify_jvmti_vthread_unmount, address)                      \\\n+\n+#else\n+#define OPTO_JVMTI_STUBS_DO(template)\n+#endif \/\/ INCLUDE_JVMTI\n+\n+#define OPTO_STUBS_DO(template)                                        \\\n+  template(uncommon_trap, UncommonTrapBlob*)                           \\\n+  template(exception, ExceptionBlob*)                                  \\\n+  template(new_instance_Java, address)                                 \\\n+  template(new_array_Java, address)                                    \\\n+  template(new_array_nozero_Java, address)                             \\\n+  template(multianewarray2_Java, address)                              \\\n+  template(multianewarray3_Java, address)                              \\\n+  template(multianewarray4_Java, address)                              \\\n+  template(multianewarray5_Java, address)                              \\\n+  template(multianewarrayN_Java, address)                              \\\n+  template(complete_monitor_locking_Java, address)                     \\\n+  template(complete_monitor_locking_C , address)                       \\\n+  template(monitor_notify_Java, address)                               \\\n+  template(monitor_notifyAll_Java, address)                            \\\n+  template(rethrow_Java, address)                                      \\\n+  template(slow_arraycopy_Java, address)                               \\\n+  template(register_finalizer_Java, address)                           \\\n+  template(class_init_barrier_Java, address)                           \\\n+  OPTO_JVMTI_STUBS_DO(template)                                        \\\n+\n+#else\n+#define OPTO_STUBS_DO(template)\n+#endif\n+\n+\/\/ generate a stub id enum tag from a name\n+\n+#define STUB_ID_NAME(base) base##_id\n+\n+\/\/ generate a blob id enum tag from a name\n+\n+#define BLOB_ID_NAME(base) base##_id\n+\n+\/\/ generate a blob field name\n+\n+#define BLOB_FIELD_NAME(base) _##base##_blob\n+\n+#endif \/\/ SHARE_RUNTIME_SHAREDRUNTIME_ID_HPP\n+\n","filename":"src\/hotspot\/share\/runtime\/stubDeclarations.hpp","additions":170,"deletions":0,"binary":false,"changes":170,"status":"added"}]}