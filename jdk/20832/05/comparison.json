{"files":[{"patch":"@@ -2184,1 +2184,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 2048+pad, 1024);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 2048+pad, 1024);\n@@ -2568,1 +2569,3 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n+  assert(is_polling_page_id(id), \"expected a polling page stub id\");\n+\n@@ -2574,1 +2577,2 @@\n-  CodeBuffer buffer(\"handler_blob\", 2048, 1024);\n+  const char* name = SharedRuntime::stub_name(id);\n+  CodeBuffer buffer(name, 2048, 1024);\n@@ -2580,2 +2584,2 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n-  RegisterSaver reg_save(poll_type == POLL_AT_VECTOR_LOOP \/* save_vectors *\/);\n+  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n+  RegisterSaver reg_save(id == SharedStubId::polling_page_vectors_safepoint_handler_id \/* save_vectors *\/);\n@@ -2693,1 +2697,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n@@ -2695,0 +2699,1 @@\n+  assert(is_resolve_id(id), \"expected a resolve stub id\");\n@@ -2699,0 +2704,1 @@\n+  const char* name = SharedRuntime::stub_name(id);\n@@ -2790,1 +2796,5 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+  assert(is_throw_id(id), \"expected a throw stub id\");\n+\n+  const char* name = SharedRuntime::stub_name(id);\n+\n@@ -2899,1 +2909,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", insts_size, locs_size);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2918,1 +2929,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_write_checkpoint\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n@@ -2937,1 +2948,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", insts_size, locs_size);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2956,1 +2968,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_return_lease\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1363,1 +1363,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 1024, 1024);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 1024, 1024);\n@@ -1604,1 +1605,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n@@ -1606,0 +1607,1 @@\n+  assert(is_polling_page_id(id), \"expected a polling page stub id\");\n@@ -1608,1 +1610,2 @@\n-  CodeBuffer buffer(\"handler_blob\", 256, 256);\n+  const char* name = SharedRuntime::stub_name(id);\n+  CodeBuffer buffer(name, 256, 256);\n@@ -1612,1 +1615,1 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n+  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n@@ -1674,1 +1677,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n@@ -1676,0 +1679,1 @@\n+  assert(is_resolve_id(id), \"expected a resolve stub id\");\n@@ -1678,0 +1682,1 @@\n+  const char* name = SharedRuntime::stub_name(id);\n@@ -1736,1 +1741,5 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+  assert(is_throw_id(id), \"expected a throw stub id\");\n+\n+  const char* name = SharedRuntime::stub_name(id);\n+\n@@ -1796,1 +1805,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", 512, 64);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, 512, 64);\n@@ -1821,1 +1831,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n+    RuntimeStub::new_runtime_stub(name,\n@@ -1839,1 +1849,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", 512, 64);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, 512, 64);\n@@ -1861,1 +1872,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n+    RuntimeStub::new_runtime_stub(name,\n","filename":"src\/hotspot\/cpu\/arm\/sharedRuntime_arm.cpp","additions":21,"deletions":10,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2864,1 +2864,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 2048, 1024);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 2048, 1024);\n@@ -3214,1 +3215,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n@@ -3217,0 +3218,1 @@\n+  assert(is_polling_page_id(id), \"expected a polling page stub id\");\n@@ -3223,1 +3225,2 @@\n-  CodeBuffer buffer(\"handler_blob\", 2048, 1024);\n+  const char* name = SharedRuntime::stub_name(id);\n+  CodeBuffer buffer(name, 2048, 1024);\n@@ -3230,1 +3233,1 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n+  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n@@ -3240,1 +3243,1 @@\n-  bool save_vectors = (poll_type == POLL_AT_VECTOR_LOOP);\n+  bool save_vectors = (id == SharedStubId::polling_page_vectors_safepoint_handler_id);\n@@ -3327,1 +3330,2 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n+  assert(is_resolve_id(id), \"expected a resolve stub id\");\n@@ -3332,0 +3336,1 @@\n+  const char* name = SharedRuntime::stub_name(id);\n@@ -3429,1 +3434,5 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+  assert(is_throw_id(id), \"expected a throw stub id\");\n+\n+  const char* name = SharedRuntime::stub_name(id);\n+\n@@ -3752,1 +3761,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", 512, 64);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, 512, 64);\n@@ -3780,2 +3790,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n-                                  &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n@@ -3789,1 +3798,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", 512, 64);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, 512, 64);\n@@ -3815,2 +3825,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n-                                  &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n","filename":"src\/hotspot\/cpu\/ppc\/sharedRuntime_ppc.cpp","additions":22,"deletions":13,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2060,1 +2060,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 2048 + pad, 1024);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 2048 + pad, 1024);\n@@ -2438,1 +2439,3 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n+  assert(is_polling_page_id(id), \"expected a polling page stub id\");\n+\n@@ -2445,1 +2448,2 @@\n-  CodeBuffer buffer(\"handler_blob\", 2048, 1024);\n+  const char* name = SharedRuntime::stub_name(id);\n+  CodeBuffer buffer(name, 2048, 1024);\n@@ -2452,2 +2456,2 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n-  RegisterSaver reg_saver(poll_type == POLL_AT_VECTOR_LOOP \/* save_vectors *\/);\n+  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n+  RegisterSaver reg_saver(id == SharedStubId::polling_page_vectors_safepoint_handler_id \/* save_vectors *\/);\n@@ -2559,1 +2563,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n@@ -2561,0 +2565,1 @@\n+  assert(is_resolve_id(id), \"expected a resolve stub id\");\n@@ -2565,0 +2570,1 @@\n+  const char* name = SharedRuntime::stub_name(id);\n@@ -2655,1 +2661,5 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+  assert(is_throw_id(id), \"expected a throw stub id\");\n+\n+  const char* name = SharedRuntime::stub_name(id);\n+\n@@ -2762,1 +2772,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", insts_size, locs_size);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2782,1 +2793,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_write_checkpoint\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n@@ -2800,1 +2811,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", insts_size, locs_size);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2819,1 +2831,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_return_lease\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":23,"deletions":11,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2491,1 +2491,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 2048, 1024);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 2048, 1024);\n@@ -2837,1 +2838,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n@@ -2840,0 +2841,1 @@\n+  assert(is_polling_page_id(id), \"expected a polling page stub id\");\n@@ -2846,1 +2848,2 @@\n-  CodeBuffer buffer(\"handler_blob\", 2048, 1024);\n+  const char* name = SharedRuntime::stub_name(id);\n+  CodeBuffer buffer(name, 2048, 1024);\n@@ -2853,1 +2856,1 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n+  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n@@ -2938,1 +2941,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n@@ -2940,0 +2943,1 @@\n+  assert(is_resolve_id(id), \"expected a resolve stub id\");\n@@ -2944,0 +2948,1 @@\n+  const char* name = SharedRuntime::stub_name(id);\n@@ -3035,1 +3040,4 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+  assert(is_throw_id(id), \"expected a throw stub id\");\n+\n+  const char* name = SharedRuntime::stub_name(id);\n","filename":"src\/hotspot\/cpu\/s390\/sharedRuntime_s390.cpp","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2065,1 +2065,2 @@\n-  CodeBuffer   buffer(\"deopt_blob\", 1536, 1024);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n+  CodeBuffer   buffer(name, 1536, 1024);\n@@ -2406,1 +2407,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n@@ -2413,0 +2414,1 @@\n+  assert(is_polling_page_id(id), \"expected a polling page stub id\");\n@@ -2420,1 +2422,2 @@\n-  CodeBuffer   buffer(\"handler_blob\", 2048, 1024);\n+  const char* name = SharedRuntime::stub_name(id);\n+  CodeBuffer   buffer(name, 2048, 1024);\n@@ -2426,2 +2429,2 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n-  bool save_vectors = (poll_type == POLL_AT_VECTOR_LOOP);\n+  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n+  bool save_vectors = (id == SharedStubId::polling_page_vectors_safepoint_handler_id);\n@@ -2559,1 +2562,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n@@ -2561,0 +2564,1 @@\n+  assert(is_resolve_id(id), \"expected a resolve stub id\");\n@@ -2565,0 +2569,1 @@\n+  const char* name = SharedRuntime::stub_name(id);\n@@ -2665,1 +2670,4 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+  assert(is_throw_id(id), \"expected a throw stub id\");\n+\n+  const char* name = SharedRuntime::stub_name(id);\n@@ -2779,1 +2787,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", insts_size, locs_size);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2798,1 +2807,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_write_checkpoint\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n@@ -2820,1 +2829,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", insts_size, locs_size);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, insts_size, locs_size);\n@@ -2838,1 +2848,1 @@\n-    RuntimeStub::new_runtime_stub(\"jfr_return_lease\", &code, frame_complete,\n+    RuntimeStub::new_runtime_stub(name, &code, frame_complete,\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_32.cpp","additions":21,"deletions":11,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2626,1 +2626,2 @@\n-  CodeBuffer buffer(\"deopt_blob\", 2560+pad, 1024);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::deopt_id);\n+  CodeBuffer buffer(name, 2560+pad, 1024);\n@@ -2984,1 +2985,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n@@ -2987,0 +2988,1 @@\n+  assert(is_polling_page_id(id), \"expected a polling page stub id\");\n@@ -2993,1 +2995,2 @@\n-  CodeBuffer buffer(\"handler_blob\", 2348, 1024);\n+  const char* name = SharedRuntime::stub_name(id);\n+  CodeBuffer buffer(name, 2348, 1024);\n@@ -2999,2 +3002,2 @@\n-  bool cause_return = (poll_type == POLL_AT_RETURN);\n-  bool save_wide_vectors = (poll_type == POLL_AT_VECTOR_LOOP);\n+  bool cause_return = (id == SharedStubId::polling_page_return_handler_id);\n+  bool save_wide_vectors = (id == SharedStubId::polling_page_vectors_safepoint_handler_id);\n@@ -3143,1 +3146,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n@@ -3145,0 +3148,1 @@\n+  assert(is_resolve_id(id), \"expected a resolve stub id\");\n@@ -3149,0 +3153,1 @@\n+  const char* name = SharedRuntime::stub_name(id);\n@@ -3235,1 +3240,5 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n+  assert(is_throw_id(id), \"expected a throw stub id\");\n+\n+  const char* name = SharedRuntime::stub_name(id);\n+\n@@ -3594,1 +3603,2 @@\n-  CodeBuffer code(\"jfr_write_checkpoint\", 1024, 64);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_write_checkpoint_id);\n+  CodeBuffer code(name, 1024, 64);\n@@ -3619,1 +3629,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n+    RuntimeStub::new_runtime_stub(name,\n@@ -3638,1 +3648,2 @@\n-  CodeBuffer code(\"jfr_return_lease\", 1024, 64);\n+  const char* name = SharedRuntime::stub_name(SharedStubId::jfr_return_lease_id);\n+  CodeBuffer code(name, 1024, 64);\n@@ -3660,1 +3671,1 @@\n-    RuntimeStub::new_runtime_stub(code.name(),\n+    RuntimeStub::new_runtime_stub(name,\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":22,"deletions":11,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-SafepointBlob* SharedRuntime::generate_handler_blob(address call_ptr, int poll_type) {\n+SafepointBlob* SharedRuntime::generate_handler_blob(SharedStubId id, address call_ptr) {\n@@ -112,1 +112,1 @@\n-RuntimeStub* SharedRuntime::generate_resolve_blob(address destination, const char* name) {\n+RuntimeStub* SharedRuntime::generate_resolve_blob(SharedStubId id, address destination) {\n@@ -116,1 +116,1 @@\n-RuntimeStub* SharedRuntime::generate_throw_exception(const char* name, address runtime_entry) {\n+RuntimeStub* SharedRuntime::generate_throw_exception(SharedStubId id, address runtime_entry) {\n","filename":"src\/hotspot\/cpu\/zero\/sharedRuntime_zero.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -95,17 +95,0 @@\n-RuntimeStub*        SharedRuntime::_wrong_method_blob;\n-RuntimeStub*        SharedRuntime::_wrong_method_abstract_blob;\n-RuntimeStub*        SharedRuntime::_ic_miss_blob;\n-RuntimeStub*        SharedRuntime::_resolve_opt_virtual_call_blob;\n-RuntimeStub*        SharedRuntime::_resolve_virtual_call_blob;\n-RuntimeStub*        SharedRuntime::_resolve_static_call_blob;\n-\n-DeoptimizationBlob* SharedRuntime::_deopt_blob;\n-SafepointBlob*      SharedRuntime::_polling_page_vectors_safepoint_handler_blob;\n-SafepointBlob*      SharedRuntime::_polling_page_safepoint_handler_blob;\n-SafepointBlob*      SharedRuntime::_polling_page_return_handler_blob;\n-\n-RuntimeStub*        SharedRuntime::_throw_AbstractMethodError_blob;\n-RuntimeStub*        SharedRuntime::_throw_IncompatibleClassChangeError_blob;\n-RuntimeStub*        SharedRuntime::_throw_NullPointerException_at_call_blob;\n-RuntimeStub*        SharedRuntime::_throw_StackOverflowError_blob;\n-RuntimeStub*        SharedRuntime::_throw_delayed_StackOverflowError_blob;\n@@ -113,4 +96,4 @@\n-#if INCLUDE_JFR\n-RuntimeStub*        SharedRuntime::_jfr_write_checkpoint_blob = nullptr;\n-RuntimeStub*        SharedRuntime::_jfr_return_lease_blob = nullptr;\n-#endif\n+#define SHARED_STUB_FIELD_DEFINE(name, type) \\\n+  type        SharedRuntime::BLOB_FIELD_NAME(name);\n+  SHARED_STUBS_DO(SHARED_STUB_FIELD_DEFINE)\n+#undef SHARED_STUB_FIELD_DEFINE\n@@ -120,0 +103,5 @@\n+#define SHARED_STUB_NAME_DECLARE(name, type) \"Shared Runtime \" # name \"_blob\",\n+const char *SharedRuntime::_stub_names[] = {\n+  SHARED_STUBS_DO(SHARED_STUB_NAME_DECLARE)\n+};\n+\n@@ -124,1 +112,1 @@\n-    generate_throw_exception(\"StackOverflowError throw_exception\",\n+    generate_throw_exception(SharedStubId::throw_StackOverflowError_id,\n@@ -129,6 +117,18 @@\n-  _wrong_method_blob                   = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method),          \"wrong_method_stub\");\n-  _wrong_method_abstract_blob          = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method_abstract), \"wrong_method_abstract_stub\");\n-  _ic_miss_blob                        = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method_ic_miss),  \"ic_miss_stub\");\n-  _resolve_opt_virtual_call_blob       = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::resolve_opt_virtual_call_C),   \"resolve_opt_virtual_call\");\n-  _resolve_virtual_call_blob           = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::resolve_virtual_call_C),       \"resolve_virtual_call\");\n-  _resolve_static_call_blob            = generate_resolve_blob(CAST_FROM_FN_PTR(address, SharedRuntime::resolve_static_call_C),        \"resolve_static_call\");\n+  _wrong_method_blob =\n+    generate_resolve_blob(SharedStubId::wrong_method_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method));\n+  _wrong_method_abstract_blob =\n+    generate_resolve_blob(SharedStubId::wrong_method_abstract_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method_abstract));\n+  _ic_miss_blob =\n+    generate_resolve_blob(SharedStubId::ic_miss_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::handle_wrong_method_ic_miss));\n+  _resolve_opt_virtual_call_blob =\n+    generate_resolve_blob(SharedStubId::resolve_opt_virtual_call_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::resolve_opt_virtual_call_C));\n+  _resolve_virtual_call_blob =\n+    generate_resolve_blob(SharedStubId::resolve_virtual_call_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::resolve_virtual_call_C));\n+  _resolve_static_call_blob =\n+    generate_resolve_blob(SharedStubId::resolve_static_call_id,\n+                          CAST_FROM_FN_PTR(address, SharedRuntime::resolve_static_call_C));\n@@ -137,1 +137,1 @@\n-    generate_throw_exception(\"delayed StackOverflowError throw_exception\",\n+    generate_throw_exception(SharedStubId::throw_delayed_StackOverflowError_id,\n@@ -141,1 +141,1 @@\n-    generate_throw_exception(\"AbstractMethodError throw_exception\",\n+    generate_throw_exception(SharedStubId::throw_AbstractMethodError_id,\n@@ -145,1 +145,1 @@\n-    generate_throw_exception(\"IncompatibleClassChangeError throw_exception\",\n+    generate_throw_exception(SharedStubId::throw_IncompatibleClassChangeError_id,\n@@ -149,1 +149,1 @@\n-    generate_throw_exception(\"NullPointerException at call throw_exception\",\n+    generate_throw_exception(SharedStubId::throw_NullPointerException_at_call_id,\n@@ -158,1 +158,3 @@\n-    _polling_page_vectors_safepoint_handler_blob = generate_handler_blob(CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception), POLL_AT_VECTOR_LOOP);\n+    _polling_page_vectors_safepoint_handler_blob =\n+      generate_handler_blob(SharedStubId::polling_page_vectors_safepoint_handler_id,\n+                            CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception));\n@@ -161,2 +163,6 @@\n-  _polling_page_safepoint_handler_blob = generate_handler_blob(CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception), POLL_AT_LOOP);\n-  _polling_page_return_handler_blob    = generate_handler_blob(CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception), POLL_AT_RETURN);\n+  _polling_page_safepoint_handler_blob =\n+    generate_handler_blob(SharedStubId::polling_page_safepoint_handler_id,\n+                          CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception));\n+  _polling_page_return_handler_blob =\n+    generate_handler_blob(SharedStubId::polling_page_return_handler_id,\n+                          CAST_FROM_FN_PTR(address, SafepointSynchronize::handle_polling_page_exception));\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":41,"deletions":35,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"runtime\/stubDeclarations.hpp\"\n@@ -45,0 +46,10 @@\n+\/\/ define SharedStubId enum tags: wrong_method_id, etc\n+\n+#define SHARED_STUB_ID_ENUM_DECLARE(name, type) STUB_ID_NAME(name),\n+enum class SharedStubId :int {\n+  NO_STUBID = -1,\n+  SHARED_STUBS_DO(SHARED_STUB_ID_ENUM_DECLARE)\n+  NUM_STUBIDS\n+};\n+#undef SHARED_STUB_ID_ENUM_DECLARE\n+\n@@ -49,14 +60,28 @@\n-  \/\/ Shared stub locations\n-\n-  static RuntimeStub*        _wrong_method_blob;\n-  static RuntimeStub*        _wrong_method_abstract_blob;\n-  static RuntimeStub*        _ic_miss_blob;\n-  static RuntimeStub*        _resolve_opt_virtual_call_blob;\n-  static RuntimeStub*        _resolve_virtual_call_blob;\n-  static RuntimeStub*        _resolve_static_call_blob;\n-\n-  static DeoptimizationBlob* _deopt_blob;\n-\n-  static SafepointBlob*      _polling_page_vectors_safepoint_handler_blob;\n-  static SafepointBlob*      _polling_page_safepoint_handler_blob;\n-  static SafepointBlob*      _polling_page_return_handler_blob;\n+  \/\/ Declare shared stub fields\n+#define SHARED_STUB_FIELD_DECLARE(name, type) \\\n+  static type        BLOB_FIELD_NAME(name);\n+  SHARED_STUBS_DO(SHARED_STUB_FIELD_DECLARE)\n+#undef SHARED_STUB_FIELD_DECLARE\n+\n+#ifdef ASSERT\n+  static bool is_resolve_id(SharedStubId id) {\n+    return (id == SharedStubId::wrong_method_id ||\n+            id == SharedStubId::wrong_method_abstract_id ||\n+            id == SharedStubId::ic_miss_id ||\n+            id == SharedStubId::resolve_opt_virtual_call_id ||\n+            id == SharedStubId::resolve_virtual_call_id ||\n+            id == SharedStubId::resolve_static_call_id);\n+  }\n+  static bool is_polling_page_id(SharedStubId id) {\n+    return (id == SharedStubId::polling_page_vectors_safepoint_handler_id ||\n+            id == SharedStubId::polling_page_safepoint_handler_id ||\n+            id == SharedStubId::polling_page_return_handler_id);\n+  }\n+  static bool is_throw_id(SharedStubId id) {\n+    return (id == SharedStubId::throw_AbstractMethodError_id ||\n+            id == SharedStubId::throw_IncompatibleClassChangeError_id ||\n+            id == SharedStubId::throw_NullPointerException_at_call_id ||\n+            id == SharedStubId::throw_StackOverflowError_id ||\n+            id == SharedStubId::throw_delayed_StackOverflowError_id);\n+  }\n+#endif\n@@ -64,0 +89,4 @@\n+  \/\/ cont_doYieldStub is not yet folded into the general model for\n+  \/\/ shared stub\/blob handling. It is actually a specially generated\n+  \/\/ native wrapper for a specific native method, as also is it's\n+  \/\/ counterpart the continuation do_enter method.\n@@ -66,10 +95,2 @@\n-  static RuntimeStub*        _throw_AbstractMethodError_blob;\n-  static RuntimeStub*        _throw_IncompatibleClassChangeError_blob;\n-  static RuntimeStub*        _throw_NullPointerException_at_call_blob;\n-  static RuntimeStub*        _throw_StackOverflowError_blob;\n-  static RuntimeStub*        _throw_delayed_StackOverflowError_blob;\n-\n-#if INCLUDE_JFR\n-  static RuntimeStub*        _jfr_write_checkpoint_blob;\n-  static RuntimeStub*        _jfr_return_lease_blob;\n-#endif\n+  \/\/ Stub names indexed by SharedStubId\n+  static const char *_stub_names[];\n@@ -83,4 +104,3 @@\n-  enum { POLL_AT_RETURN,  POLL_AT_LOOP, POLL_AT_VECTOR_LOOP };\n-  static SafepointBlob* generate_handler_blob(address call_ptr, int poll_type);\n-  static RuntimeStub*   generate_resolve_blob(address destination, const char* name);\n-  static RuntimeStub*   generate_throw_exception(const char* name, address runtime_entry);\n+  static SafepointBlob* generate_handler_blob(SharedStubId id, address call_ptr);\n+  static RuntimeStub*   generate_resolve_blob(SharedStubId id, address destination);\n+  static RuntimeStub*   generate_throw_exception(SharedStubId id, address runtime_entry);\n@@ -100,0 +120,5 @@\n+  static const char *stub_name(SharedStubId id) {\n+    assert(id > SharedStubId::NO_STUBID && id < SharedStubId::NUM_STUBIDS, \"stub id out of range\");\n+    return _stub_names[(int)id];\n+  }\n+\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":53,"deletions":28,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_RUNTIME_STUBDECLARATIONS_HPP\n+#define SHARE_RUNTIME_STUBDECLARATIONS_HPP\n+\n+#include \"utilities\/macros.hpp\"\n+\n+\/\/ macros for generating definitions and declarations for shared, c1\n+\/\/ and opto blob fields and associated stub ids\n+\n+\/\/ Different shared stubs can have different blob types and may\n+\/\/ include some JFR stubs\n+\/\/\n+\/\/ n.b resolve, handler and throw stubs must remain grouped in the\n+\/\/ same order to allow id values to be range checked\n+\n+#if INCLUDE_JFR\n+\/\/ do_blob(name, type)\n+#define SHARED_JFR_STUBS_DO(do_blob)                                   \\\n+  do_blob(jfr_write_checkpoint, RuntimeStub*)                          \\\n+  do_blob(jfr_return_lease, RuntimeStub*)                              \\\n+\n+#else\n+#define SHARED_JFR_STUBS_DO(do_blob)\n+#endif\n+\n+\/\/ do_blob(name, type)\n+#define SHARED_STUBS_DO(do_blob)                                       \\\n+  do_blob(deopt, DeoptimizationBlob*)                                  \\\n+  \/* resolve stubs *\/                                                  \\\n+  do_blob(wrong_method, RuntimeStub*)                                  \\\n+  do_blob(wrong_method_abstract, RuntimeStub*)                         \\\n+  do_blob(ic_miss, RuntimeStub*)                                       \\\n+  do_blob(resolve_opt_virtual_call, RuntimeStub*)                      \\\n+  do_blob(resolve_virtual_call, RuntimeStub*)                          \\\n+  do_blob(resolve_static_call, RuntimeStub*)                           \\\n+  \/* handler stubs *\/                                                  \\\n+  do_blob(polling_page_vectors_safepoint_handler, SafepointBlob*)      \\\n+  do_blob(polling_page_safepoint_handler, SafepointBlob*)              \\\n+  do_blob(polling_page_return_handler, SafepointBlob*)                 \\\n+  \/* throw stubs *\/                                                    \\\n+  do_blob(throw_AbstractMethodError, RuntimeStub*)                     \\\n+  do_blob(throw_IncompatibleClassChangeError, RuntimeStub*)            \\\n+  do_blob(throw_NullPointerException_at_call, RuntimeStub*)            \\\n+  do_blob(throw_StackOverflowError, RuntimeStub*)                      \\\n+  do_blob(throw_delayed_StackOverflowError, RuntimeStub*)              \\\n+  \/* other stubs *\/                                                    \\\n+  SHARED_JFR_STUBS_DO(do_blob)                                         \\\n+\n+\/\/ generate a stub id enum tag from a name\n+\n+#define STUB_ID_NAME(base) base##_id\n+\n+\/\/ generate a blob id enum tag from a name\n+\n+#define BLOB_ID_NAME(base) base##_id\n+\n+\/\/ generate a blob field name\n+\n+#define BLOB_FIELD_NAME(base) _##base##_blob\n+\n+#endif \/\/ SHARE_RUNTIME_STUBDECLARATIONS_HPP\n+\n","filename":"src\/hotspot\/share\/runtime\/stubDeclarations.hpp","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"}]}