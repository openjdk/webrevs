{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPrinterJob.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, BELLSOFT. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, BELLSOFT. All rights reserved.\n","filename":"src\/java.desktop\/share\/classes\/sun\/print\/GrayscaleProxyGraphics2D.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/java.desktop\/macosx\/classes\/sun\/print\/GrayscaleProxyGraphics2D.java","status":"renamed"},{"patch":"@@ -1410,1 +1410,1 @@\n-                return attr == Chromaticity.COLOR;\n+                return PrintServiceLookupProvider.isMac() || attr == Chromaticity.COLOR;\n","filename":"src\/java.desktop\/unix\/classes\/sun\/print\/IPPPrintService.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2024, BELLSOFT. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, BELLSOFT. All rights reserved.\n@@ -27,1 +27,1 @@\n-import javax.print.attribute.Attribute;\n+import javax.print.PrintServiceLookup;\n@@ -30,0 +30,1 @@\n+import javax.print.attribute.Size2DSyntax;\n@@ -31,0 +32,1 @@\n+import javax.print.attribute.standard.MediaSize;\n@@ -33,1 +35,4 @@\n-import javax.swing.JDialog;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JList;\n@@ -35,2 +40,2 @@\n-import javax.swing.JTextArea;\n-import javax.swing.SwingUtilities;\n+import javax.swing.ListCellRenderer;\n+import javax.swing.border.EmptyBorder;\n@@ -38,1 +43,0 @@\n-import java.awt.BorderLayout;\n@@ -40,2 +44,1 @@\n-import java.awt.Dialog;\n-import java.awt.FlowLayout;\n+import java.awt.Component;\n@@ -44,0 +47,1 @@\n+import java.awt.GridLayout;\n@@ -49,2 +53,2 @@\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n@@ -56,1 +60,2 @@\n-import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -60,0 +65,2 @@\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -64,0 +71,1 @@\n+ * @run main\/manual MonochromePrintTest\n@@ -68,7 +76,12 @@\n-    private static final long TIMEOUT = 10 * 60_000;\n-    private static volatile boolean testPassed = true;\n-    private static volatile boolean testSkipped = false;\n-    private static volatile boolean testFinished = false;\n-\n-    private static volatile int testCount;\n-    private static volatile int testTotalCount;\n+    private static final String INSTRUCTIONS = \"\"\"\n+           This test checks availability of the monochrome printing\n+           on color printers.\n+           To be able to run this test it is required to have a color\n+           printer configured in your user environment.\n+           Test's steps:\n+             - Choose a printer.\n+             - Press 'Print' button.\n+           Visual inspection of the printed pages is needed.\n+           A passing test will print two pages with\n+           color and grayscale appearances\n+           \"\"\";\n@@ -77,3 +90,3 @@\n-\n-        final Chromaticity[] supportedChromaticity = getSupportedChromaticity();\n-        if (supportedChromaticity == null || supportedChromaticity.length < 2) {\n+        PrintService[] availablePrintServices = getTestablePrintServices();\n+        if (availablePrintServices.length == 0) {\n+            System.out.println(\"Available print services not found\");\n@@ -82,0 +95,8 @@\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testTimeOut(300)\n+                .title(\"Monochrome printing\")\n+                .testUI(createTestWindow(availablePrintServices))\n+                .build()\n+                .awaitAndCheck();\n+    }\n@@ -83,7 +104,14 @@\n-        SwingUtilities.invokeLater(() -> {\n-            testTotalCount = supportedChromaticity.length;\n-            for (Chromaticity chromaticity : supportedChromaticity) {\n-                if (testSkipped) {\n-                    break;\n-                }\n-                testPrint(chromaticity, supportedChromaticity);\n+    private static Window createTestWindow(final PrintService[] availablePrintServices) {\n+        Window frame = new JFrame(\"Choose service to test\");\n+        JPanel pnlMain = new JPanel();\n+        pnlMain.setBorder(new EmptyBorder(5,5,5,5));\n+        pnlMain.setLayout(new GridLayout(3, 1, 5, 5));\n+        JLabel lblServices = new JLabel(\"Available services\");\n+        JComboBox<PrintService> cbServices = new JComboBox<>();\n+        JButton btnPrint = new JButton(\"Print\");\n+        btnPrint.setEnabled(false);\n+        cbServices.setRenderer(new ListCellRenderer<PrintService>() {\n+            @Override\n+            public Component getListCellRendererComponent(JList<? extends PrintService> list, PrintService value,\n+                                                          int index, boolean isSelected, boolean cellHasFocus) {\n+                return new JLabel(value == null ? \"\" : value.getName());\n@@ -91,1 +119,0 @@\n-            testFinished = true;\n@@ -93,6 +120,4 @@\n-\n-        long time = System.currentTimeMillis() + TIMEOUT;\n-\n-        while (System.currentTimeMillis() < time) {\n-            if (!testPassed || testFinished) {\n-                break;\n+        cbServices.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                btnPrint.setEnabled(cbServices.getSelectedItem() != null);\n@@ -100,76 +125,0 @@\n-            Thread.sleep(500);\n-        }\n-\n-        closeDialogs();\n-\n-        if (testSkipped) {\n-            System.out.printf(\"Test is skipped!%n\");\n-            return;\n-        }\n-\n-        if (!testPassed) {\n-            throw new Exception(\"Test failed!\");\n-        }\n-\n-        if (testCount != testTotalCount) {\n-            throw new Exception(\n-                    \"Timeout: \" + testCount + \" tests passed out from \" + testTotalCount);\n-        }\n-    }\n-\n-    private static void testPrint(Chromaticity chromaticity, Chromaticity[] supportedChromaticity) {\n-\n-        String[] instructions = {\n-                \"Two tests will run and it will test all available color apearances:\",\n-                Arrays.toString(supportedChromaticity) + \"supported by the printer.\",\n-                \"\",\n-                \"The test is \" + (testCount + 1) + \" from \" + testTotalCount + \".\",\n-                \"\",\n-                \"On-screen inspection is not possible for this printing-specific\",\n-                \"test therefore its only output is a page printed to the printer\",\n-                \"\",\n-                \"To be able to run this test it is required to have a default\",\n-                \"printer configured in your user environment.\",\n-                \"\",\n-                \" - Press 'Start Test' button.\",\n-                \"   The print dialog should appear.\",\n-                \" - Select 'Appearance' tab.\",\n-                \" - Select '\" + chromaticity + \"' on the 'Color apearance' panel.\",\n-                \" - Press 'Print' button.\",\n-                \"\",\n-                \"Visual inspection of the printed pages is needed.\",\n-                \"\",\n-                \"A passing test will print the page with color appearance '\" + chromaticity + \"'.\",\n-                \"The text, shapes and image should be \" + chromaticity + \".\",\n-                \"The test fails if the page is not printed with required color apearance.\",\n-        };\n-\n-        String title = String.format(\"Print with %s chromaticity test: %d from %d\", chromaticity, testCount + 1, testTotalCount);\n-        final JDialog dialog = new JDialog(null, title, Dialog.ModalityType.DOCUMENT_MODAL);\n-        JTextArea textArea = new JTextArea(String.join(\"\\n\", instructions));\n-        textArea.setEditable(false);\n-        final JButton testButton = new JButton(\"Start Test\");\n-        final JButton skipButton = new JButton(\"Skip Test\");\n-        final JButton passButton = new JButton(\"PASS\");\n-        skipButton.setEnabled(false);\n-        passButton.setEnabled(false);\n-        passButton.addActionListener((e) -> {\n-            pass();\n-            dialog.dispose();\n-        });\n-        skipButton.addActionListener((e) -> {\n-            skip();\n-            dialog.dispose();\n-        });\n-        final JButton failButton = new JButton(\"FAIL\");\n-        failButton.setEnabled(false);\n-        failButton.addActionListener((e) -> {\n-            fail(chromaticity);\n-            dialog.dispose();\n-        });\n-        testButton.addActionListener((e) -> {\n-            testButton.setEnabled(false);\n-            runPrint(chromaticity);\n-            skipButton.setEnabled(true);\n-            passButton.setEnabled(true);\n-            failButton.setEnabled(true);\n@@ -177,12 +126,5 @@\n-\n-        JPanel mainPanel = new JPanel(new BorderLayout());\n-        mainPanel.add(textArea, BorderLayout.CENTER);\n-        JPanel buttonPanel = new JPanel(new FlowLayout());\n-        buttonPanel.add(testButton);\n-        buttonPanel.add(passButton);\n-        buttonPanel.add(failButton);\n-        mainPanel.add(buttonPanel, BorderLayout.SOUTH);\n-        dialog.add(mainPanel);\n-        dialog.pack();\n-        dialog.setVisible(true);\n-        dialog.addWindowListener(new WindowAdapter() {\n+        for (PrintService ps : availablePrintServices) {\n+            cbServices.addItem(ps);\n+        }\n+        lblServices.setLabelFor(cbServices);\n+        btnPrint.addActionListener(new ActionListener() {\n@@ -190,3 +132,7 @@\n-            public void windowClosing(WindowEvent e) {\n-                System.out.println(\"Dialog closing\");\n-                fail(chromaticity);\n+            public void actionPerformed(ActionEvent e) {\n+                PrintService printService = (PrintService) cbServices.getSelectedItem();\n+                if (printService != null) {\n+                    cbServices.setEnabled(false);\n+                    btnPrint.setEnabled(false);\n+                    test(printService);\n+                }\n@@ -195,0 +141,6 @@\n+        pnlMain.add(lblServices);\n+        pnlMain.add(cbServices);\n+        pnlMain.add(btnPrint);\n+        frame.add(pnlMain);\n+        frame.pack();\n+        return frame;\n@@ -197,57 +149,7 @@\n-    private static void print(Chromaticity chromaticity) throws PrinterException {\n-        PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\n-        attr.add(MediaSizeName.ISO_A4);\n-        attr.add(chromaticity);\n-\n-        for (Attribute attribute : attr.toArray()) {\n-            System.out.printf(\"Used print request attribute: %s%n\", attribute);\n-        }\n-\n-        PrinterJob job = PrinterJob.getPrinterJob();\n-        job.setJobName(\"Print with \" + chromaticity);\n-        job.setPrintable(new ChromaticityAttributePrintable(chromaticity));\n-\n-        if (job.printDialog(attr)) {\n-            job.print();\n-        } else {\n-            throw new RuntimeException(\"Test for \" + chromaticity + \" is canceled!\");\n-        }\n-    }\n-\n-    private static void closeDialogs() {\n-        for (Window w : Dialog.getWindows()) {\n-            w.dispose();\n-        }\n-    }\n-\n-    private static void pass() {\n-        testCount++;\n-    }\n-\n-    private static void skip() {\n-        testSkipped = true;\n-    }\n-\n-    private static void fail(Chromaticity chromaticity) {\n-        System.out.printf(\"Failed test: %s\", chromaticity.toString());\n-        testPassed = false;\n-    }\n-\n-    private static Chromaticity[] getSupportedChromaticity() {\n-\n-        PrinterJob printerJob = PrinterJob.getPrinterJob();\n-        PrintService service = printerJob.getPrintService();\n-        if (service == null) {\n-            System.out.printf(\"No print service found.\");\n-            return null;\n-        }\n-\n-        if (!service.isAttributeCategorySupported(Chromaticity.class)) {\n-            System.out.printf(\"Skipping the test as Chromaticity category is not supported for this printer.\");\n-            return null;\n-        }\n-\n-        Object obj = service.getSupportedAttributeValues(Chromaticity.class, null, null);\n-\n-        if (obj instanceof Chromaticity[]) {\n-            return (Chromaticity[]) obj;\n+    private static PrintService[] getTestablePrintServices() {\n+        List<PrintService> testablePrintServices = new ArrayList<>();\n+        for (PrintService ps : PrintServiceLookup.lookupPrintServices(null,null)) {\n+            if (ps.isAttributeValueSupported(Chromaticity.MONOCHROME, null, null) &&\n+                    ps.isAttributeValueSupported(Chromaticity.COLOR, null, null)) {\n+                testablePrintServices.add(ps);\n+            }\n@@ -255,2 +157,1 @@\n-\n-        throw new RuntimeException(\"Chromaticity category is supported but no supported attribute values are returned.\");\n+        return testablePrintServices.toArray(new PrintService[0]);\n@@ -259,1 +160,1 @@\n-    private static void runPrint(Chromaticity chromaticity) {\n+    private static void test(PrintService printService) {\n@@ -261,5 +162,4 @@\n-            print(chromaticity);\n-        } catch (PrinterException e) {\n-            e.printStackTrace();\n-            fail(chromaticity);\n-            closeDialogs();\n+            print(printService, Chromaticity.COLOR);\n+            print(printService, Chromaticity.MONOCHROME);\n+        } catch (PrinterException ex) {\n+            throw new RuntimeException(ex);\n@@ -269,0 +169,10 @@\n+    private static void print(PrintService printService, Chromaticity chromaticity)\n+            throws PrinterException {\n+        PrintRequestAttributeSet attr = new HashPrintRequestAttributeSet();\n+        attr.add(chromaticity);\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setPrintService(printService);\n+        job.setJobName(\"Print with \" + chromaticity);\n+        job.setPrintable(new ChromaticityAttributePrintable(chromaticity));\n+        job.print(attr);\n+    }\n@@ -279,1 +189,1 @@\n-        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {\n+        public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) {\n@@ -290,1 +200,2 @@\n-            BufferedImage bufferdImage = getBufferedImage((int) Math.ceil(pageFormat.getImageableWidth() \/ 3), (int) Math.ceil(pageFormat.getImageableHeight() \/ 7));\n+            BufferedImage bufferdImage = getBufferedImage((int) Math.ceil(pageFormat.getImageableWidth() \/ 3),\n+                    (int) Math.ceil(pageFormat.getImageableHeight() \/ 7));\n@@ -293,1 +204,7 @@\n-            int imh = sy + (int) Math.ceil(pageFormat.getImageableHeight() \/ 7) + 10;\n+            double defaultMediaSizeWidth = MediaSize.getMediaSizeForName(MediaSizeName.ISO_A4)\n+                    .getX(Size2DSyntax.INCH) * 72;\n+            double scale = pageFormat.getWidth() \/ defaultMediaSizeWidth;\n+\n+            final int squareSideLenngth = (int)(50 * scale);\n+            final int offset = (int)(10 * scale);\n+            int imh = sy + (int) Math.ceil(pageFormat.getImageableHeight() \/ 7) + offset;\n@@ -296,2 +213,2 @@\n-            g.drawRect(sx, imh, 50, 50);\n-            imh += 60;\n+            g.drawRect(sx, imh, squareSideLenngth, squareSideLenngth);\n+            imh = imh + squareSideLenngth + offset;\n@@ -300,2 +217,2 @@\n-            g.fillOval(sx, imh, 50, 50);\n-            imh += 60;\n+            g.fillOval(sx, imh, squareSideLenngth, squareSideLenngth);\n+            imh = imh + squareSideLenngth + offset;\n@@ -303,1 +220,2 @@\n-            Paint paint = new LinearGradientPaint(0, 0, 20, 5, new float[]{0.0f, 0.2f, 1.0f},\n+            Paint paint = new LinearGradientPaint(0, 0,\n+                    squareSideLenngth>>1, offset>>1, new float[]{0.0f, 0.2f, 1.0f},\n@@ -306,3 +224,3 @@\n-            g.setStroke(new BasicStroke(50));\n-            g.fillRect(sx, imh + 10, 50, 50);\n-            imh += 60;\n+            g.setStroke(new BasicStroke(squareSideLenngth));\n+            g.fillRect(sx, imh + offset, squareSideLenngth, squareSideLenngth);\n+            imh = imh + squareSideLenngth + offset;\n@@ -310,1 +228,1 @@\n-            paint = new RadialGradientPaint(10, 10, 5, new float[]{0.0f, 0.5f, 1.0f},\n+            paint = new RadialGradientPaint(offset, offset, offset>>1, new float[]{0.0f, 0.5f, 1.0f},\n@@ -313,2 +231,2 @@\n-            g.fillRect(sx, imh + 10, 50, 50);\n-            imh += 60;\n+            g.fillRect(sx, imh + offset, squareSideLenngth, squareSideLenngth);\n+            imh = imh + squareSideLenngth + offset;\n@@ -316,1 +234,1 @@\n-            g.setStroke(new BasicStroke(5));\n+            g.setStroke(new BasicStroke(offset>>1));\n@@ -318,1 +236,1 @@\n-            g.drawString(\"Chromaticity: \" + chromaticity, sx, imh + 30);\n+            g.drawString(\"This page should be \" + chromaticity, sx, imh + squareSideLenngth);\n","filename":"test\/jdk\/javax\/print\/attribute\/MonochromePrintTest.java","additions":126,"deletions":208,"binary":false,"changes":334,"status":"modified"}]}