{"files":[{"patch":"@@ -52,0 +52,1 @@\n+#include \"prims\/jvmtiAgentList.hpp\"\n@@ -1124,0 +1125,25 @@\n+void os::print_jvmti_agent_info(outputStream* st) {\n+#if INCLUDE_JVMTI\n+  \/\/ should return all kinds of JVMTI agents, but no xrun agents\n+  const JvmtiAgentList::Iterator it = JvmtiAgentList::agents();\n+  bool first_agent = true;\n+  while (it.has_next()) {\n+    const JvmtiAgent* agent = it.next();\n+    if (agent != nullptr) {\n+      if (first_agent) st->print_cr(\"JVMTI agents:\");\n+      first_agent = false;\n+      const char* dyninfo = agent->is_dynamic() ? \"dynamic\" : \"\";\n+      const char* instrumentinfo = agent->is_instrument_lib() ? \"instrumentlib\" : \"\";\n+      const char* loadinfo = agent->is_loaded() ? \"loaded\" : \"not loaded\";\n+      const char* initinfo = agent->is_initialized() ? \"initialized\" : \"not initialized\";\n+      const char* optionsinfo = agent->options();\n+      const char* pathinfo = agent->os_lib_path();\n+      if (optionsinfo == nullptr) optionsinfo = \"none\";\n+      if (pathinfo == nullptr) pathinfo = \"none\";\n+      \/\/ jplis output too?\n+      st->print_cr(\"%s path:%s, %s, %s %s %s options:%s\", agent->name(), pathinfo, loadinfo, initinfo, dyninfo, instrumentinfo, optionsinfo);\n+    }\n+  }\n+#endif\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -816,0 +816,1 @@\n+  static void print_jvmti_agent_info(outputStream* st);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1278,0 +1278,6 @@\n+#if INCLUDE_JVMTI\n+  STEP_IF(\"printing jvmti agent info\", _verbose)\n+    os::print_jvmti_agent_info(st);\n+    st->cr();\n+#endif\n+\n@@ -1456,0 +1462,5 @@\n+#if INCLUDE_JVMTI\n+  os::print_jvmti_agent_info(st);\n+  st->cr();\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"}]}