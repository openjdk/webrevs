{"files":[{"patch":"@@ -37,0 +37,2 @@\n+\n+import jdk.internal.classfile.impl.Util;\n@@ -81,1 +83,1 @@\n-        return ClassDesc.ofDescriptor(className().stringValue());\n+        return Util.fieldTypeSymbol(className());\n@@ -118,1 +120,1 @@\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), elements);\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass), elements);\n@@ -128,1 +130,1 @@\n-        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass.descriptorString()), elements);\n+        return of(TemporaryConstantPool.INSTANCE.utf8Entry(annotationClass), elements);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Annotation.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+\n+import jdk.internal.classfile.impl.Util;\n@@ -408,1 +410,1 @@\n-            return ClassDesc.ofDescriptor(className().stringValue());\n+            return Util.fieldTypeSymbol(className());\n@@ -426,1 +428,1 @@\n-            return ClassDesc.ofDescriptor(className().stringValue());\n+            return Util.fieldTypeSymbol(className());\n@@ -455,1 +457,1 @@\n-        return ofEnum(TemporaryConstantPool.INSTANCE.utf8Entry(className.descriptorString()),\n+        return ofEnum(TemporaryConstantPool.INSTANCE.utf8Entry(className),\n@@ -472,1 +474,1 @@\n-        return ofClass(TemporaryConstantPool.INSTANCE.utf8Entry(className.descriptorString()));\n+        return ofClass(TemporaryConstantPool.INSTANCE.utf8Entry(className));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -197,1 +197,3 @@\n-        return withField(name, descriptor, Util.buildingFlags(flags));\n+        return withField(constantPool().utf8Entry(name),\n+                         constantPool().utf8Entry(descriptor),\n+                         flags);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassBuilder.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -772,1 +772,1 @@\n-                             constantPool().utf8Entry(descriptor.descriptorString()),\n+                             constantPool().utf8Entry(descriptor),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.classfile.impl.Util;\n@@ -62,1 +63,1 @@\n-        return ClassDesc.ofDescriptor(fieldType().stringValue());\n+        return Util.fieldTypeSymbol(fieldType());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/FieldModel.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import jdk.internal.classfile.impl.Util;\n@@ -62,1 +63,1 @@\n-        return MethodTypeDesc.ofDescriptor(methodType().stringValue());\n+        return Util.methodTypeSymbol(methodType());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/MethodModel.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.internal.classfile.impl.Util;\n@@ -68,1 +69,1 @@\n-        return ClassDesc.ofDescriptor(type().stringValue());\n+        return Util.fieldTypeSymbol(type());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/LocalVariableInfo.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+import jdk.internal.classfile.impl.Util;\n@@ -61,1 +62,1 @@\n-        return ClassDesc.ofDescriptor(descriptor().stringValue());\n+        return Util.fieldTypeSymbol(descriptor());\n@@ -98,1 +99,1 @@\n-                                                               TemporaryConstantPool.INSTANCE.utf8Entry(descriptor.descriptorString()),\n+                                                               TemporaryConstantPool.INSTANCE.utf8Entry(descriptor),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/attribute\/RecordComponentInfo.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -226,3 +226,1 @@\n-        var ret = (NameAndTypeEntryImpl)nameAndTypeEntry(utf8Entry(name), utf8Entry(type.descriptorString()));\n-        ret.typeSym = type;\n-        return ret;\n+        return nameAndTypeEntry(utf8Entry(name), utf8Entry(type));\n@@ -241,3 +239,1 @@\n-        var ret = (NameAndTypeEntryImpl)nameAndTypeEntry(utf8Entry(name), utf8Entry(type.descriptorString()));\n-        ret.typeSym = type;\n-        return ret;\n+        return nameAndTypeEntry(utf8Entry(name), utf8Entry(type));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.classfile.impl.Util;\n@@ -73,1 +74,1 @@\n-        return ClassDesc.ofDescriptor(type().stringValue());\n+        return Util.fieldTypeSymbol(type());\n@@ -112,1 +113,1 @@\n-                  TemporaryConstantPool.INSTANCE.utf8Entry(descriptor.descriptorString()),\n+                  TemporaryConstantPool.INSTANCE.utf8Entry(descriptor),\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/instruction\/LocalVariable.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,0 +57,1 @@\n+import jdk.internal.vm.annotation.Stable;\n@@ -149,2 +150,2 @@\n-        private int hash;\n-        private int charLen;\n+        private @Stable int hash;\n+        private @Stable int charLen;\n@@ -152,1 +153,1 @@\n-        private char[] chars;\n+        private @Stable char[] chars;\n@@ -154,1 +155,3 @@\n-        private String stringValue;\n+        private @Stable String stringValue;\n+        \/\/ The descriptor symbol, if this is a descriptor\n+        @Stable TypeDescriptor typeSym;\n@@ -190,0 +193,1 @@\n+            this.typeSym = u.typeSym;\n@@ -422,0 +426,16 @@\n+\n+        public ClassDesc fieldTypeSymbol() {\n+            if (typeSym instanceof ClassDesc cd)\n+                return cd;\n+            var ret = ClassDesc.ofDescriptor(stringValue());\n+            typeSym = ret;\n+            return ret;\n+        }\n+\n+        public MethodTypeDesc methodTypeSymbol() {\n+            if (typeSym instanceof MethodTypeDesc mtd)\n+                return mtd;\n+            var ret = MethodTypeDesc.ofDescriptor(stringValue());\n+            typeSym = ret;\n+            return ret;\n+        }\n@@ -588,2 +608,0 @@\n-        public TypeDescriptor typeSym = null;\n-\n@@ -604,16 +622,0 @@\n-        public ClassDesc fieldTypeSymbol() {\n-            if (typeSym instanceof ClassDesc cd) {\n-                return cd;\n-            } else {\n-                return (ClassDesc)(typeSym = ClassDesc.ofDescriptor(ref2.stringValue()));\n-            }\n-        }\n-\n-        public MethodTypeDesc methodTypeSymbol() {\n-            if (typeSym instanceof MethodTypeDesc mtd) {\n-                return mtd;\n-            } else {\n-                return (MethodTypeDesc)(typeSym = MethodTypeDesc.ofDescriptor(ref2.stringValue()));\n-            }\n-        }\n-\n@@ -624,4 +626,0 @@\n-            } else {\n-                var ret = (NameAndTypeEntryImpl)cp.nameAndTypeEntry(ref1, ref2);\n-                ret.typeSym = typeSym;\n-                return ret;\n@@ -629,0 +627,1 @@\n+            return cp.nameAndTypeEntry(ref1, ref2);\n@@ -900,2 +899,0 @@\n-        public MethodTypeDesc sym = null;\n-\n@@ -915,4 +912,0 @@\n-            } else {\n-                var ret = (MethodTypeEntryImpl)cp.methodTypeEntry(ref1);\n-                ret.sym = sym;\n-                return ret;\n@@ -920,0 +913,1 @@\n+            return cp.methodTypeEntry(ref1);\n@@ -924,5 +918,1 @@\n-            var sym = this.sym;\n-            if (sym != null) {\n-                return sym;\n-            }\n-            return this.sym = MethodTypeDesc.ofDescriptor(descriptor().stringValue());\n+            return ref1.methodTypeSymbol();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":27,"deletions":37,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-        return ClassDesc.ofDescriptor(type().stringValue());\n+        return Util.fieldTypeSymbol(type());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BoundLocalVariable.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-    MethodTypeDesc mDesc;\n@@ -105,8 +104,1 @@\n-        if (mDesc == null) {\n-            if (original instanceof MethodInfo mi) {\n-                mDesc = mi.methodTypeSymbol();\n-            } else {\n-                mDesc = MethodTypeDesc.ofDescriptor(methodType().stringValue());\n-            }\n-        }\n-        return mDesc;\n+        return Util.methodTypeSymbol(methodType());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BufferedMethodBuilder.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -82,9 +82,0 @@\n-    @Override\n-    public ClassBuilder withMethod(String name, MethodTypeDesc descriptor, int flags, Consumer<? super MethodBuilder> handler) {\n-        var mb = new BufferedMethodBuilder(terminal.constantPool, terminal.context,\n-                constantPool().utf8Entry(name), constantPool().utf8Entry(descriptor), flags, null);\n-        mb.mDesc = descriptor;\n-        consumer.accept(mb.run(handler).toModel());\n-        return this;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ChainedClassBuilder.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -93,8 +93,0 @@\n-    @Override\n-    public ClassBuilder withField(String name,\n-                                  ClassDesc descriptor,\n-                                  int flags) {\n-        return withField(new DirectFieldBuilder(constantPool, context,\n-                constantPool.utf8Entry(name), constantPool.utf8Entry(descriptor), flags, null));\n-    }\n-\n@@ -133,7 +125,0 @@\n-    @Override\n-    public ClassBuilder withMethod(String name, MethodTypeDesc descriptor, int flags, Consumer<? super MethodBuilder> handler) {\n-        var method = new DirectMethodBuilder(constantPool, context, constantPool.utf8Entry(name), constantPool.utf8Entry(descriptor), flags, null);\n-        method.mDesc = descriptor;\n-        return withMethod(method.run(handler));\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectClassBuilder.java","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-    MethodTypeDesc mDesc;\n@@ -90,8 +89,1 @@\n-        if (mDesc == null) {\n-            if (original instanceof MethodInfo mi) {\n-                mDesc = mi.methodTypeSymbol();\n-            } else {\n-                mDesc = MethodTypeDesc.ofDescriptor(methodType().stringValue());\n-            }\n-        }\n-        return mDesc;\n+        return Util.methodTypeSymbol(methodType());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectMethodBuilder.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-    private MethodTypeDesc mDesc;\n@@ -78,4 +77,1 @@\n-        if (mDesc == null) {\n-            mDesc = MethodTypeDesc.ofDescriptor(methodType().stringValue());\n-        }\n-        return mDesc;\n+        return Util.methodTypeSymbol(methodType());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/MethodImpl.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-import java.lang.constant.ConstantDesc;\n+import java.lang.constant.ClassDesc;\n@@ -410,0 +410,14 @@\n+    @Override\n+    public Utf8Entry utf8Entry(ClassDesc desc) {\n+        var utf8 = utf8Entry(desc.descriptorString());\n+        utf8.typeSym = desc;\n+        return utf8;\n+    }\n+\n+    @Override\n+    public Utf8Entry utf8Entry(MethodTypeDesc desc) {\n+        var utf8 = utf8Entry(desc.descriptorString());\n+        utf8.typeSym = desc;\n+        return utf8;\n+    }\n+\n@@ -492,3 +506,1 @@\n-        var ret = (AbstractPoolEntry.MethodTypeEntryImpl)methodTypeEntry(utf8Entry(descriptor.descriptorString()));\n-        ret.sym = descriptor;\n-        return ret;\n+        return methodTypeEntry(utf8Entry(descriptor));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.classfile.constantpool.Utf8Entry;\n@@ -223,0 +224,8 @@\n+    public static ClassDesc fieldTypeSymbol(Utf8Entry utf8) {\n+        return ((AbstractPoolEntry.Utf8EntryImpl) utf8).fieldTypeSymbol();\n+    }\n+\n+    public static MethodTypeDesc methodTypeSymbol(Utf8Entry utf8) {\n+        return ((AbstractPoolEntry.Utf8EntryImpl) utf8).methodTypeSymbol();\n+    }\n+\n@@ -224,1 +233,1 @@\n-        return ((AbstractPoolEntry.NameAndTypeEntryImpl)nat).fieldTypeSymbol();\n+        return fieldTypeSymbol(nat.type());\n@@ -228,1 +237,1 @@\n-        return ((AbstractPoolEntry.NameAndTypeEntryImpl)nat).methodTypeSymbol();\n+        return methodTypeSymbol(nat.type());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/Util.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"}]}