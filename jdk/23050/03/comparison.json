{"files":[{"patch":"@@ -44,0 +44,1 @@\n+import java.util.Objects;\n@@ -122,1 +123,1 @@\n-        if (task == null) throw new NullPointerException();\n+        Objects.requireNonNull(task, \"task\");\n@@ -134,1 +135,1 @@\n-        if (task == null) throw new NullPointerException();\n+        Objects.requireNonNull(task, \"task\");\n@@ -146,1 +147,1 @@\n-        if (task == null) throw new NullPointerException();\n+        Objects.requireNonNull(task, \"task\");\n@@ -157,3 +158,2 @@\n-        throws InterruptedException, ExecutionException, TimeoutException {\n-        if (tasks == null)\n-            throw new NullPointerException();\n+        throws InterruptedException, ExecutionException, TimeoutException, NullPointerException {\n+        Objects.requireNonNull(tasks, \"tasks\");\n@@ -162,1 +162,1 @@\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"tasks is empty\");\n@@ -264,3 +264,2 @@\n-        throws InterruptedException {\n-        if (tasks == null)\n-            throw new NullPointerException();\n+        throws InterruptedException , NullPointerException {\n+        Objects.requireNonNull(tasks, \"tasks\");\n@@ -297,2 +296,2 @@\n-        if (tasks == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(tasks, \"tasks\");\n+        Objects.requireNonNull(unit, \"unit\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/AbstractExecutorService.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import java.util.Objects;\n+\n@@ -148,2 +150,1 @@\n-        if (executor == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(executor, \"executor\");\n@@ -171,2 +172,2 @@\n-        if (executor == null || completionQueue == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(executor, \"executor\");\n+        Objects.requireNonNull(completionQueue, \"completionQueue\");\n@@ -184,1 +185,1 @@\n-        if (task == null) throw new NullPointerException();\n+        Objects.requireNonNull(task, \"task\");\n@@ -195,1 +196,1 @@\n-        if (task == null) throw new NullPointerException();\n+        Objects.requireNonNull(task, \"task\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ExecutorCompletionService.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -1259,7 +1259,13 @@\n-        if (corePoolSize < 0 ||\n-            maximumPoolSize <= 0 ||\n-            maximumPoolSize < corePoolSize ||\n-            keepAliveTime < 0)\n-            throw new IllegalArgumentException();\n-        if (workQueue == null || threadFactory == null || handler == null)\n-            throw new NullPointerException();\n+        if (corePoolSize < 0) {\n+            throw new IllegalArgumentException(\"corePoolSize must be non-negative\");\n+        } else if (maximumPoolSize <= 0) {\n+            throw new IllegalArgumentException(\"maximumPoolSize must be positive\");\n+        } else if (maximumPoolSize < corePoolSize) {\n+            throw new IllegalArgumentException(\"maximumPoolSize must be greater than or equal to corePoolSize\");\n+        } else if (keepAliveTime < 0) {\n+            throw new IllegalArgumentException(\"keepAliveTime must be non-negative\");\n+        }\n+        Objects.requireNonNull(unit, \"unit\");\n+        Objects.requireNonNull(workQueue, \"workQueue\");\n+        Objects.requireNonNull(threadFactory, \"threadFactory\");\n+        Objects.requireNonNull(handler, \"handler\");\n@@ -1292,2 +1298,1 @@\n-        if (command == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(command, \"command\");\n@@ -1454,2 +1459,1 @@\n-        if (threadFactory == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(threadFactory, \"threadFactory\");\n@@ -1477,2 +1481,1 @@\n-        if (handler == null)\n-            throw new NullPointerException();\n+        Objects.requireNonNull(handler, \"handler\");\n@@ -1506,2 +1509,5 @@\n-        if (corePoolSize < 0 || maximumPoolSize < corePoolSize)\n-            throw new IllegalArgumentException();\n+        if (corePoolSize < 0) {\n+            throw new IllegalArgumentException(\"corePoolSize must be non-negative\");\n+        } else if (corePoolSize > maximumPoolSize) {\n+            throw new IllegalArgumentException(\"corePoolSize must be less than or equal to maximumPoolSize\");\n+        }\n@@ -1631,2 +1637,5 @@\n-        if (maximumPoolSize <= 0 || maximumPoolSize < corePoolSize)\n-            throw new IllegalArgumentException();\n+        if (maximumPoolSize <= 0) {\n+            throw new IllegalArgumentException(\"maximumPoolSize must be positive\");\n+        } else if (maximumPoolSize < corePoolSize) {\n+            throw new IllegalArgumentException(\"maximumPoolSize must be greater than or equal to corePoolSize\");\n+        }\n@@ -1666,1 +1675,1 @@\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"time must be non-negative\");\n@@ -1669,0 +1678,1 @@\n+        Objects.requireNonNull(unit, \"unit\");\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ThreadPoolExecutor.java","additions":28,"deletions":18,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -44,16 +44,1 @@\n-import java.util.concurrent.ArrayBlockingQueue;\n-import java.util.concurrent.BlockingQueue;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.CancellationException;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.ExecutionException;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Future;\n-import java.util.concurrent.FutureTask;\n-import java.util.concurrent.LinkedBlockingQueue;\n-import java.util.concurrent.RejectedExecutionException;\n-import java.util.concurrent.RejectedExecutionHandler;\n-import java.util.concurrent.SynchronousQueue;\n-import java.util.concurrent.ThreadFactory;\n-import java.util.concurrent.ThreadLocalRandom;\n-import java.util.concurrent.ThreadPoolExecutor;\n+import java.util.concurrent.*;\n@@ -69,0 +54,1 @@\n+import org.junit.Assert;\n@@ -307,1 +293,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(\"threadFactory\", success.getMessage());\n+            }\n@@ -367,1 +355,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(\"handler\", success.getMessage());\n+            }\n@@ -740,1 +730,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"corePoolSize must be non-negative\", success.getMessage());\n+        }\n@@ -751,1 +743,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"maximumPoolSize must be positive\", success.getMessage());\n+        }\n@@ -762,1 +756,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"maximumPoolSize must be positive\", success.getMessage());\n+        }\n@@ -773,1 +769,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"keepAliveTime must be non-negative\", success.getMessage());\n+        }\n@@ -784,1 +782,6 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\n+                \"maximumPoolSize must be greater than or equal to corePoolSize\",\n+                success.getMessage()\n+            );\n+        }\n@@ -795,1 +798,3 @@\n-        } catch (NullPointerException success) {}\n+        } catch (NullPointerException success) {\n+            assertEquals(\"workQueue\", success.getMessage());\n+        }\n@@ -807,1 +812,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"corePoolSize must be non-negative\", success.getMessage());\n+        }\n@@ -819,1 +826,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"maximumPoolSize must be positive\", success.getMessage());\n+        }\n@@ -831,1 +840,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"maximumPoolSize must be positive\", success.getMessage());\n+        }\n@@ -843,1 +854,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"keepAliveTime must be non-negative\", success.getMessage());\n+        }\n@@ -855,1 +868,6 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\n+                \"maximumPoolSize must be greater than or equal to corePoolSize\",\n+                success.getMessage()\n+            );\n+        }\n@@ -867,1 +885,3 @@\n-        } catch (NullPointerException success) {}\n+        } catch (NullPointerException success) {\n+            assertEquals(\"workQueue\", success.getMessage());\n+        }\n@@ -879,1 +899,3 @@\n-        } catch (NullPointerException success) {}\n+        } catch (NullPointerException success) {\n+            assertEquals(\"threadFactory\", success.getMessage());\n+        }\n@@ -891,1 +913,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"corePoolSize must be non-negative\", success.getMessage());\n+        }\n@@ -903,1 +927,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"maximumPoolSize must be positive\", success.getMessage());\n+        }\n@@ -915,1 +941,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"maximumPoolSize must be positive\", success.getMessage());\n+        }\n@@ -927,1 +955,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"keepAliveTime must be non-negative\", success.getMessage());\n+        }\n@@ -939,1 +969,6 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\n+                \"maximumPoolSize must be greater than or equal to corePoolSize\",\n+                success.getMessage()\n+            );\n+        }\n@@ -951,1 +986,3 @@\n-        } catch (NullPointerException success) {}\n+        } catch (NullPointerException success) {\n+            assertEquals(\"workQueue\", success.getMessage());\n+        }\n@@ -963,1 +1000,3 @@\n-        } catch (NullPointerException success) {}\n+        } catch (NullPointerException success) {\n+            assertEquals(\"handler\", success.getMessage());\n+        }\n@@ -976,1 +1015,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"corePoolSize must be non-negative\", success.getMessage());\n+        }\n@@ -989,1 +1030,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"maximumPoolSize must be positive\", success.getMessage());\n+        }\n@@ -1002,1 +1045,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"maximumPoolSize must be positive\", success.getMessage());\n+        }\n@@ -1015,1 +1060,3 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\"keepAliveTime must be non-negative\", success.getMessage());\n+        }\n@@ -1028,1 +1075,6 @@\n-        } catch (IllegalArgumentException success) {}\n+        } catch (IllegalArgumentException success) {\n+            assertEquals(\n+                \"maximumPoolSize must be greater than or equal to corePoolSize\",\n+                success.getMessage()\n+            );\n+        }\n@@ -1041,1 +1093,3 @@\n-        } catch (NullPointerException success) {}\n+        } catch (NullPointerException success) {\n+            assertEquals(\"workQueue\", success.getMessage());\n+        }\n@@ -1054,1 +1108,3 @@\n-        } catch (NullPointerException success) {}\n+        } catch (NullPointerException success) {\n+            assertEquals(\"handler\", success.getMessage());\n+        }\n@@ -1067,1 +1123,18 @@\n-        } catch (NullPointerException success) {}\n+        } catch (NullPointerException success) {\n+            assertEquals(\"threadFactory\", success.getMessage());\n+        }\n+    }\n+\n+    \/**\n+     * Constructor throws if unit is null\n+     *\/\n+    public void testConstructorNullPointerException9() {\n+        try {\n+            new ThreadPoolExecutor(1, 2, 1L, (TimeUnit) null,\n+                new ArrayBlockingQueue<Runnable>(10),\n+                new SimpleThreadFactory(),\n+                new NoOpREHandler());\n+            shouldThrow();\n+        } catch (NullPointerException success) {\n+            assertEquals(\"unit\", success.getMessage());\n+        }\n@@ -1231,1 +1304,3 @@\n-            } catch (IllegalArgumentException success) {}\n+            } catch (IllegalArgumentException success) {\n+                assertEquals(\"corePoolSize must be non-negative\", success.getMessage());\n+            }\n@@ -1248,1 +1323,6 @@\n-            } catch (IllegalArgumentException success) {}\n+            } catch (IllegalArgumentException success) {\n+                assertEquals(\n+                    \"maximumPoolSize must be greater than or equal to corePoolSize\",\n+                    success.getMessage()\n+                );\n+            }\n@@ -1265,1 +1345,3 @@\n-            } catch (IllegalArgumentException success) {}\n+            } catch (IllegalArgumentException success) {\n+                assertEquals(\"maximumPoolSize must be positive\", success.getMessage());\n+            }\n@@ -1285,1 +1367,8 @@\n-                } catch (IllegalArgumentException success) {}\n+                } catch (IllegalArgumentException success) {\n+                    assertEquals(\n+                        s == 1\n+                        ? \"maximumPoolSize must be positive\"\n+                        : \"maximumPoolSize must be greater than or equal to corePoolSize\",\n+                        success.getMessage()\n+                    );\n+                }\n@@ -1291,1 +1380,6 @@\n-                } catch (IllegalArgumentException success) {}\n+                } catch (IllegalArgumentException success) {\n+                    assertEquals(\n+                        \"corePoolSize must be less than or equal to maximumPoolSize\",\n+                        success.getMessage()\n+                    );\n+                }\n@@ -1302,1 +1396,1 @@\n-    public void testKeepAliveTimeIllegalArgumentException() {\n+    public void testKeepAliveTimeInvalidLengthIllegalArgumentException() {\n@@ -1311,1 +1405,22 @@\n-            } catch (IllegalArgumentException success) {}\n+            } catch (IllegalArgumentException success) {\n+                assertEquals(\"time must be non-negative\", success.getMessage());\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * setKeepAliveTime throws IllegalArgumentException\n+     * when given a null unit\n+     *\/\n+    public void testKeepAliveTimeNullTimeUnitIllegalArgumentException() {\n+        final ThreadPoolExecutor p =\n+            new ThreadPoolExecutor(2, 3,\n+                LONG_DELAY_MS, MILLISECONDS,\n+                new ArrayBlockingQueue<Runnable>(10));\n+        try (PoolCleaner cleaner = cleaner(p)) {\n+            try {\n+                p.setKeepAliveTime(1, (TimeUnit) null);\n+                shouldThrow();\n+            } catch (NullPointerException success) {\n+                assertEquals(\"unit\", success.getMessage());\n+            }\n@@ -1402,1 +1517,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(\"tasks\", success.getMessage());\n+            }\n@@ -1418,1 +1535,3 @@\n-            } catch (IllegalArgumentException success) {}\n+            } catch (IllegalArgumentException success) {\n+                assertEquals(\"tasks is empty\", success.getMessage());\n+            }\n@@ -1438,1 +1557,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(\"task\", success.getMessage());\n+            }\n@@ -1492,1 +1613,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(\"tasks\", success.getMessage());\n+            }\n@@ -1527,1 +1650,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(null, success.getMessage());\n+            }\n@@ -1584,1 +1709,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(\"tasks\", success.getMessage());\n+            }\n@@ -1602,1 +1729,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(\"Cannot invoke \\\"java.util.concurrent.TimeUnit.toNanos(long)\\\" because \\\"unit\\\" is null\", success.getMessage());\n+            }\n@@ -1619,1 +1748,3 @@\n-            } catch (IllegalArgumentException success) {}\n+            } catch (IllegalArgumentException success) {\n+                assertEquals(\"tasks is empty\", success.getMessage());\n+            }\n@@ -1639,1 +1770,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(\"task\", success.getMessage());\n+            }\n@@ -1697,1 +1830,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(\"tasks\", success.getMessage());\n+            }\n@@ -1715,1 +1850,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(\"unit\", success.getMessage());\n+            }\n@@ -1751,1 +1888,3 @@\n-            } catch (NullPointerException success) {}\n+            } catch (NullPointerException success) {\n+                assertEquals(null, success.getMessage());\n+            }\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ThreadPoolExecutorTest.java","additions":204,"deletions":65,"binary":false,"changes":269,"status":"modified"}]}