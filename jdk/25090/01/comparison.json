{"files":[{"patch":"@@ -549,1 +549,5 @@\n-                    if (unconditionalExactnessCheck(selectorType, classLabel)) {\n+                    if (isNotValidPair(selectorType, caseLabel)){\n+                        cb.goto_(next);\n+                        continue;\n+                    }\n+                    else if (unconditionalExactnessCheck(selectorType, classLabel)) {\n@@ -720,0 +724,5 @@\n+    private static boolean isNotValidPair(Class<?> selectorType, Object caseLabel) {\n+        return (selectorType == boolean.class && caseLabel != boolean.class && caseLabel != Boolean.class) ||\n+               (selectorType != boolean.class && selectorType.isPrimitive() && (caseLabel == boolean.class || caseLabel == Boolean.class));\n+    }\n+\n@@ -772,5 +781,6 @@\n-                ((selectorType.equals(byte.class) && !targetType.equals(char.class)) ||\n-                 (selectorType.equals(short.class) && (selectorWrapper.isStrictSubRangeOf(targetWrapper))) ||\n-                 (selectorType.equals(char.class)  && (selectorWrapper.isStrictSubRangeOf(targetWrapper)))  ||\n-                 (selectorType.equals(int.class)   && (targetType.equals(double.class) || targetType.equals(long.class))) ||\n-                 (selectorType.equals(float.class) && (selectorWrapper.isStrictSubRangeOf(targetWrapper))))) return true;\n+                (targetType.isPrimitive() && selectorType.isPrimitive() &&\n+                    ((selectorType.equals(byte.class) && !targetType.equals(char.class)) ||\n+                     (selectorType.equals(short.class) && (selectorWrapper.isStrictSubRangeOf(targetWrapper))) ||\n+                     (selectorType.equals(char.class)  && (selectorWrapper.isStrictSubRangeOf(targetWrapper)))  ||\n+                     (selectorType.equals(int.class)   && (targetType.equals(double.class) || targetType.equals(long.class))) ||\n+                     (selectorType.equals(float.class) && (selectorWrapper.isStrictSubRangeOf(targetWrapper)))))) return true;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/runtime\/SwitchBootstraps.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -77,0 +77,6 @@\n+    private void testPrimitiveType(Object target, Class<?> targetType, int start, int result, Object... labels) throws Throwable {\n+        MethodType switchType = MethodType.methodType(int.class, targetType, int.class);\n+        MethodHandle indy = ((CallSite) BSM_TYPE_SWITCH.invoke(MethodHandles.lookup(), \"\", switchType, labels)).dynamicInvoker();\n+        assertEquals((int) indy.invoke(target, start), result);\n+    }\n+\n@@ -135,0 +141,12 @@\n+    public void testPrimitiveTypes() throws Throwable {\n+        testPrimitiveType((short) 1, short.class, 0, 1, String.class);\n+        testPrimitiveType((byte) 1, byte.class,0, 1, String.class, byte.class);\n+        testPrimitiveType(true, boolean.class,0, 1, false, boolean.class);\n+        testPrimitiveType(1, int.class,0, 1, String.class);\n+        testPrimitiveType(1, int.class,0, 1, true);\n+        testPrimitiveType(true, boolean.class,0, 1, false);\n+        testPrimitiveType((byte) 1, byte.class,0, 1, boolean.class, byte.class);\n+        testPrimitiveType((byte) 1, byte.class,0, 1, Boolean.class, byte.class);\n+        testPrimitiveType(true, boolean.class,0, 1, String.class, boolean.class);\n+    }\n+\n","filename":"test\/jdk\/java\/lang\/runtime\/SwitchBootstrapsTest.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}