{"files":[{"patch":"@@ -1048,0 +1048,5 @@\n+bool JavaThread::is_lock_owned(address adr) const {\n+  assert(LockingMode != LM_LIGHTWEIGHT, \"should not be called with new lightweight locking\");\n+  return is_in_full_stack(adr);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -675,0 +675,3 @@\n+  \/\/ Fast-locking support (not for LM_LIGHTWEIGHT)\n+  bool is_lock_owned(address adr) const;\n+\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1059,1 +1059,2 @@\n-    } else if (LockingMode == LM_LEGACY && mark.has_locker() && current->is_lock_owned((address)mark.locker())) {\n+    } else if (LockingMode == LM_LEGACY && mark.has_locker()\n+               && JavaThread::cast(current)->is_lock_owned((address)mark.locker())) {\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -530,5 +530,0 @@\n-bool Thread::is_lock_owned(address adr) const {\n-  assert(LockingMode != LM_LIGHTWEIGHT, \"should not be called with new lightweight locking\");\n-  return is_in_full_stack(adr);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -486,3 +486,0 @@\n-  \/\/ Used by fast lock support\n-  virtual bool is_lock_owned(address adr) const;\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"}]}