{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,6 +251,0 @@\n-    \/\/ Traverse the monitor chunks\n-    MonitorChunk* chunk = jt->monitor_chunks();\n-    for (; chunk != nullptr; chunk = chunk->next()) {\n-      chunk->oops_do(&rcl);\n-    }\n-\n","filename":"src\/hotspot\/share\/jfr\/leakprofiler\/checkpoint\/rootResolver.cpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1735,1 +1735,1 @@\n-      array->element(i)->free_monitors(thread);\n+      array->element(i)->free_monitors();\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -433,2 +433,0 @@\n-  _monitor_chunks(nullptr),\n-\n@@ -1052,7 +1050,1 @@\n-  if (Thread::is_lock_owned(adr)) return true;\n-\n-  for (MonitorChunk* chunk = monitor_chunks(); chunk != nullptr; chunk = chunk->next()) {\n-    if (chunk->contains(adr)) return true;\n-  }\n-\n-  return false;\n+  return Thread::is_lock_owned(adr);\n@@ -1069,16 +1061,0 @@\n-void JavaThread::add_monitor_chunk(MonitorChunk* chunk) {\n-  chunk->set_next(monitor_chunks());\n-  set_monitor_chunks(chunk);\n-}\n-\n-void JavaThread::remove_monitor_chunk(MonitorChunk* chunk) {\n-  guarantee(monitor_chunks() != nullptr, \"must be non empty\");\n-  if (monitor_chunks() == chunk) {\n-    set_monitor_chunks(chunk->next());\n-  } else {\n-    MonitorChunk* prev = monitor_chunks();\n-    while (prev->next() != chunk) prev = prev->next();\n-    prev->set_next(chunk->next());\n-  }\n-}\n-\n@@ -1410,7 +1386,0 @@\n-  if (has_last_Java_frame()) {\n-    \/\/ Traverse the monitor chunks\n-    for (MonitorChunk* chunk = monitor_chunks(); chunk != nullptr; chunk = chunk->next()) {\n-      chunk->oops_do(f);\n-    }\n-  }\n-\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":32,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -195,4 +195,0 @@\n-  MonitorChunk* _monitor_chunks;              \/\/ Contains the off stack monitors\n-                                              \/\/ allocated during deoptimization\n-                                              \/\/ and by JNI_MonitorEnter\/Exit\n-\n@@ -880,3 +876,0 @@\n- private:\n-  void set_monitor_chunks(MonitorChunk* monitor_chunks) { _monitor_chunks = monitor_chunks; }\n-\n@@ -884,3 +877,0 @@\n-  MonitorChunk* monitor_chunks() const           { return _monitor_chunks; }\n-  void add_monitor_chunk(MonitorChunk* chunk);\n-  void remove_monitor_chunk(MonitorChunk* chunk);\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-  _next               = nullptr;\n","filename":"src\/hotspot\/share\/runtime\/monitorChunk.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-  MonitorChunk*    _next;\n@@ -47,4 +46,0 @@\n-  \/\/ link operations\n-  MonitorChunk* next() const                { return _next; }\n-  void set_next(MonitorChunk* next)         { _next = next; }\n-\n@@ -57,1 +52,0 @@\n-\n","filename":"src\/hotspot\/share\/runtime\/monitorChunk.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-void vframeArrayElement::free_monitors(JavaThread* jt) {\n+void vframeArrayElement::free_monitors() {\n@@ -55,1 +55,0 @@\n-     jt->remove_monitor_chunk(chunk);\n@@ -88,1 +87,0 @@\n-      vf->thread()->add_monitor_chunk(_monitors);\n@@ -100,0 +98,5 @@\n+\n+          assert(current_thread->is_Java_thread(), \"Must be a JavaThread\");\n+          assert(ObjectSynchronizer::current_thread_holds_lock((JavaThread*) current_thread, Handle(current_thread, dest->obj())),\n+                 \"should be held, before move_to\");\n+\n@@ -101,0 +104,3 @@\n+\n+          assert(ObjectSynchronizer::current_thread_holds_lock((JavaThread*) current_thread, Handle(current_thread, dest->obj())),\n+                 \"should be held, after move_to\");\n@@ -311,0 +317,1 @@\n+    assert(ObjectSynchronizer::current_thread_holds_lock(thread, Handle(thread, src->obj())), \"should be held, before move_to\");\n@@ -312,0 +319,1 @@\n+    assert(ObjectSynchronizer::current_thread_holds_lock(thread, Handle(thread, src->obj())), \"should be held, after move_to\");\n@@ -652,1 +660,0 @@\n-  JavaThread* jt = JavaThread::current();\n@@ -654,1 +661,1 @@\n-     element(index)->free_monitors(jt);\n+     element(index)->free_monitors();\n","filename":"src\/hotspot\/share\/runtime\/vframeArray.cpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-  void free_monitors(JavaThread* jt);\n+  void free_monitors();\n","filename":"src\/hotspot\/share\/runtime\/vframeArray.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}