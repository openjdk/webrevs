{"files":[{"patch":"@@ -353,1 +353,1 @@\n-  CardValue* i_card = start_card;\n+  CardValue* current_card = start_card;\n@@ -355,2 +355,2 @@\n-  while (!is_aligned(i_card, sizeof(Word))) {\n-    if (i_card >= end_card) {\n+  while (!is_aligned(current_card, sizeof(Word))) {\n+    if (current_card >= end_card) {\n@@ -359,2 +359,2 @@\n-    if (is_dirty(i_card)) {\n-      return i_card;\n+    if (is_dirty(current_card)) {\n+      return current_card;\n@@ -362,1 +362,1 @@\n-    ++i_card;\n+    ++current_card;\n@@ -366,3 +366,3 @@\n-  while (i_card + sizeof(Word) <= end_card) {\n-    Word* i_word = reinterpret_cast<Word*>(i_card);\n-    if (*i_word != (Word)clean_card_row_val()) {\n+  while (current_card + sizeof(Word) <= end_card) {\n+    Word* current_word = reinterpret_cast<Word*>(current_card);\n+    if (*current_word != (Word)clean_card_row_val()) {\n@@ -372,1 +372,1 @@\n-    i_card += sizeof(Word);\n+    current_card += sizeof(Word);\n@@ -376,3 +376,3 @@\n-  for (\/* empty *\/; i_card < end_card; ++i_card) {\n-    if (is_dirty(i_card)) {\n-      return i_card;\n+  for (\/* empty *\/; current_card < end_card; ++current_card) {\n+    if (is_dirty(current_card)) {\n+      return current_card;\n@@ -395,3 +395,3 @@\n-  for (CardValue* i_card = start_card; i_card < end_card; \/* empty *\/) {\n-    if (is_dirty(i_card)) {\n-      i_card++;\n+  for (CardValue* current_card = start_card; current_card < end_card; \/* empty *\/) {\n+    if (is_dirty(current_card)) {\n+      current_card++;\n@@ -402,1 +402,1 @@\n-    HeapWord* addr = ct->addr_for(i_card);\n+    HeapWord* addr = ct->addr_for(current_card);\n@@ -406,1 +406,1 @@\n-      return i_card;\n+      return current_card;\n@@ -414,1 +414,1 @@\n-      return i_card;\n+      return current_card;\n@@ -424,1 +424,1 @@\n-    i_card = next_obj_card + 1;\n+    current_card = next_obj_card + 1;\n@@ -482,2 +482,2 @@\n-  for (CardValue* i_card = start_card; i_card < end_card; \/* empty *\/) {\n-    CardValue* const dirty_l = find_first_dirty_card(i_card, end_card);\n+  for (CardValue* current_card = start_card; current_card < end_card; \/* empty *\/) {\n+    CardValue* const dirty_l = find_first_dirty_card(current_card, end_card);\n@@ -519,1 +519,1 @@\n-        i_card = dirty_r + 1;\n+        current_card = dirty_r + 1;\n","filename":"src\/hotspot\/share\/gc\/serial\/cardTableRS.cpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"}]}