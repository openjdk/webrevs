{"files":[{"patch":"@@ -2082,0 +2082,4 @@\n+\/\/ Add vthread to the waiting list if it's not already in it. Multiple threads\n+\/\/ could be trying to add vthread to the list at the same time, so we control\n+\/\/ access with a cmpxchg on onWaitingList. The winner adds vthread to the list.\n+\/\/ Method returns true if we added vthread to the list, false otherwise.\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -711,1 +711,2 @@\n-  if ((thread->has_last_Java_frame() && fr.sp() == thread->last_Java_sp()) JVMTI_ONLY(|| (method()->is_continuation_enter_intrinsic() && thread->on_monitor_waited_event()))) {\n+  if ((thread->has_last_Java_frame() && fr.sp() == thread->last_Java_sp())\n+      JVMTI_ONLY(|| (method()->is_continuation_enter_intrinsic() && thread->on_monitor_waited_event()))) {\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1140,0 +1140,3 @@\n+\/\/ Called from thaw code to resume the monitor operation that caused the vthread\n+\/\/ to be unmounted. Method returns true if the monitor is successfully acquired,\n+\/\/ which marks the end of the monitor operation, otherwise it returns false.\n@@ -1142,0 +1145,1 @@\n+  assert(!has_owner(current), \"\");\n@@ -1938,0 +1942,1 @@\n+\n@@ -2054,1 +2059,0 @@\n-  assert(!has_owner(current), \"invariant\");\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -308,0 +308,4 @@\n+  \/\/ Methods to check and set _succ. The successor is the thread selected\n+  \/\/ from _cxq\/_EntryList by the current owner when releasing the monitor,\n+  \/\/ to run again and re-try acquiring the monitor. It is used to avoid\n+  \/\/ unnecessary wake-ups if there is already a successor set.\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-\/\/ Returns null if DEFLATER_MARKER is observed.\n+\/\/ Returns NO_OWNER if DEFLATER_MARKER is observed.\n@@ -129,2 +129,0 @@\n-\/\/ This accessor is called when we really need to know if the owner\n-\/\/ field == DEFLATER_MARKER and any non-null value won't do the trick.\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.inline.hpp","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -172,1 +172,1 @@\n-  \/\/ ObjectMonitors where owner is set to a stack lock address in thread.\n+  \/\/ ObjectMonitors where the owner is anonymous.\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}