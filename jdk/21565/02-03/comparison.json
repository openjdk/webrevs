{"files":[{"patch":"@@ -2849,15 +2849,6 @@\n-  assert(dst == r10, \"invalid destination register\");\n-  if (L.is_bound()) {\n-    const int inst_size = 7;\n-    address entry = target(L);\n-    int offs = checked_cast<int>((intptr_t)entry - (intptr_t)pc());\n-    emit_int8((unsigned char)0x4C);\n-    emit_int8((unsigned char)0x8D);\n-    emit_int8((unsigned char)0x15);\n-    emit_int32(offs - inst_size);\n-  } else {\n-    InstructionMark im(this);\n-    L.add_patch_at(code(), locator());\n-    emit_int8((unsigned char)0x4C);\n-    emit_int8((unsigned char)0x8D);\n-    emit_int8((unsigned char)0x15);\n+  emit_prefix_and_int8(get_prefixq(Address(), dst), (unsigned char)0x8D);\n+  if (!L.is_bound()) {\n+    \/\/ Patch @0x8D opcode\n+    L.add_patch_at(code(), CodeBuffer::locator(offset() - 1, sect()));\n+    \/\/ Register and [rip+disp] operand\n+    emit_modrm(0b00, raw_encode(dst), 0b101);\n@@ -2865,0 +2856,7 @@\n+  } else {\n+    \/\/ Register and [rip+disp] operand\n+    emit_modrm(0b00, raw_encode(dst), 0b101);\n+    \/\/ Adjust displacement by sizeof lea instruction\n+    int32_t disp = checked_cast<int32_t>(target(L) - (pc() + sizeof(int32_t)));\n+    assert(is_simm32(disp), \"must be 32bit offset [rip+offset]\");\n+    emit_int32(disp);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-        (op == 0x4C && branch[1] == 0x8D && branch[2] == 0x15) \/* lea *\/,\n+        (op == 0x8D) \/* lea *\/,\n@@ -126,1 +126,1 @@\n-      int* disp = (int*) &branch[(op == 0x4C) ? 3 : (op == 0x0F || op == 0xC7) ? 2 : 1];\n+      int* disp = (int*) &branch[(op == 0x0F || op == 0xC7 || op == 0x8D) ? 2 : 1];\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}