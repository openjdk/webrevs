{"files":[{"patch":"@@ -2045,3 +2045,5 @@\n-    \/\/ Not a leaf but we have last_Java_frame setup as we want\n-    \/\/ Force freeze slow path in case we try to preempt. We will pin the\n-    \/\/ vthread to the carrier (see FreezeBase::recurse_freeze_native_frame()).\n+    \/\/ Not a leaf but we have last_Java_frame setup as we want.\n+    \/\/ We don't want to unmount in case of contention since that would complicate preserving\n+    \/\/ the arguments that had already been marshalled into the native convention. So we force\n+    \/\/ the freeze slow path to find this native wrapper frame (see recurse_freeze_native_frame())\n+    \/\/ and pin the vthread. Otherwise the fast path won't find it since we don't walk the stack.\n","filename":"src\/hotspot\/cpu\/aarch64\/sharedRuntime_aarch64.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1936,3 +1936,5 @@\n-    \/\/ Not a leaf but we have last_Java_frame setup as we want\n-    \/\/ Force freeze slow path in case we try to preempt. We will pin the\n-    \/\/ vthread to the carrier (see FreezeBase::recurse_freeze_native_frame()).\n+    \/\/ Not a leaf but we have last_Java_frame setup as we want.\n+    \/\/ We don't want to unmount in case of contention since that would complicate preserving\n+    \/\/ the arguments that had already been marshalled into the native convention. So we force\n+    \/\/ the freeze slow path to find this native wrapper frame (see recurse_freeze_native_frame())\n+    \/\/ and pin the vthread. Otherwise the fast path won't find it since we don't walk the stack.\n","filename":"src\/hotspot\/cpu\/riscv\/sharedRuntime_riscv.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2518,3 +2518,5 @@\n-    \/\/ Not a leaf but we have last_Java_frame setup as we want\n-    \/\/ Force freeze slow path in case we try to preempt. We will pin the\n-    \/\/ vthread to the carrier (see FreezeBase::recurse_freeze_native_frame()).\n+    \/\/ Not a leaf but we have last_Java_frame setup as we want.\n+    \/\/ We don't want to unmount in case of contention since that would complicate preserving\n+    \/\/ the arguments that had already been marshalled into the native convention. So we force\n+    \/\/ the freeze slow path to find this native wrapper frame (see recurse_freeze_native_frame())\n+    \/\/ and pin the vthread. Otherwise the fast path won't find it since we don't walk the stack.\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}