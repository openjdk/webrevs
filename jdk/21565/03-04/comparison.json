{"files":[{"patch":"@@ -2218,1 +2218,1 @@\n-      assert(!mon_acquired || mon->is_owner(_thread), \"invariant\");\n+      assert(!mon_acquired || mon->has_owner(_thread), \"invariant\");\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1673,1 +1673,1 @@\n-          assert(ObjectSynchronizer::read_monitor(thread, obj(), obj->mark())->is_owner(deoptee_thread), \"must be\");\n+          assert(ObjectSynchronizer::read_monitor(thread, obj(), obj->mark())->has_owner(deoptee_thread), \"must be\");\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -247,1 +247,1 @@\n-  assert(this == current() || monitor->is_owner(this), \"only add owned monitors for other threads\");\n+  assert(this == current() || monitor->has_owner(this), \"only add owned monitors for other threads\");\n","filename":"src\/hotspot\/share\/runtime\/javaThread.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -744,1 +744,1 @@\n-  if (monitor->is_owner_anonymous()) {\n+  if (monitor->has_owner_anonymous()) {\n@@ -789,1 +789,1 @@\n-      if (monitor->is_owner_anonymous()) {\n+      if (monitor->has_owner_anonymous()) {\n@@ -837,1 +837,1 @@\n-      if (inf->is_owner_anonymous() &&\n+      if (inf->has_owner_anonymous() &&\n@@ -955,1 +955,1 @@\n-    if (monitor->is_owner_anonymous()) {\n+    if (monitor->has_owner_anonymous()) {\n@@ -1076,1 +1076,1 @@\n-      if (monitor->is_owner_anonymous() && lock_stack.contains(object)) {\n+      if (monitor->has_owner_anonymous() && lock_stack.contains(object)) {\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -281,1 +281,1 @@\n-    _om->clear_succesor();\n+    _om->clear_successor();\n@@ -292,2 +292,2 @@\n-    if (_om->is_succesor(current)) {\n-      _om->clear_succesor();\n+    if (_om->has_successor(current)) {\n+      _om->clear_successor();\n@@ -334,1 +334,1 @@\n-  } else if (prev_owner == owner_for(locking_thread)) {\n+  } else if (prev_owner == owner_from(locking_thread)) {\n@@ -361,1 +361,1 @@\n-  assert(!success || is_owner(locking_thread), \"must be\");\n+  assert(!success || has_owner(locking_thread), \"must be\");\n@@ -397,1 +397,1 @@\n-  assert(is_owner(locking_thread), \"must be\");\n+  assert(has_owner(locking_thread), \"must be\");\n@@ -415,1 +415,1 @@\n-  if (r == TryLockResult::HasOwner && is_owner(current)) {\n+  if (r == TryLockResult::HasOwner && has_owner(current)) {\n@@ -442,1 +442,1 @@\n-    assert(is_owner(current), \"must be current: owner=\" INT64_FORMAT, owner_raw());\n+    assert(has_owner(current), \"must be current: owner=\" INT64_FORMAT, owner_raw());\n@@ -458,2 +458,2 @@\n-  assert(!is_owner(current), \"invariant\");\n-  assert(!is_succesor(current), \"invariant\");\n+  assert(!has_owner(current), \"invariant\");\n+  assert(!has_successor(current), \"invariant\");\n@@ -478,1 +478,1 @@\n-  assert(!is_owner(current), \"must be\");\n+  assert(!has_owner(current), \"must be\");\n@@ -558,1 +558,1 @@\n-        assert(is_owner(current), \"invariant\");\n+        assert(has_owner(current), \"invariant\");\n@@ -571,2 +571,2 @@\n-  assert(is_owner(current), \"invariant\");\n-  assert(!is_succesor(current), \"invariant\");\n+  assert(has_owner(current), \"invariant\");\n+  assert(!has_successor(current), \"invariant\");\n@@ -823,2 +823,2 @@\n-    assert(!is_succesor(current), \"invariant\");\n-    assert(is_owner(current), \"invariant\");\n+    assert(!has_successor(current), \"invariant\");\n+    assert(has_owner(current), \"invariant\");\n@@ -838,2 +838,2 @@\n-    assert(is_owner(current), \"invariant\");\n-    assert(!is_succesor(current), \"invariant\");\n+    assert(has_owner(current), \"invariant\");\n+    assert(!has_successor(current), \"invariant\");\n@@ -844,2 +844,2 @@\n-  assert(!is_succesor(current), \"invariant\");\n-  assert(!is_owner(current), \"invariant\");\n+  assert(!has_successor(current), \"invariant\");\n+  assert(!has_owner(current), \"invariant\");\n@@ -873,2 +873,2 @@\n-      assert(!is_succesor(current), \"invariant\");\n-      assert(is_owner(current), \"invariant\");\n+      assert(!has_successor(current), \"invariant\");\n+      assert(has_owner(current), \"invariant\");\n@@ -909,1 +909,1 @@\n-    assert(!is_owner(current), \"invariant\");\n+    assert(!has_owner(current), \"invariant\");\n@@ -951,1 +951,1 @@\n-    if (is_succesor(current)) clear_succesor();\n+    if (has_successor(current)) clear_successor();\n@@ -965,1 +965,1 @@\n-  assert(is_owner(current), \"invariant\");\n+  assert(has_owner(current), \"invariant\");\n@@ -968,2 +968,2 @@\n-  if (is_succesor(current)) {\n-    clear_succesor();\n+  if (has_successor(current)) {\n+    clear_successor();\n@@ -1016,1 +1016,1 @@\n-    assert(!is_owner(current), \"invariant\");\n+    assert(!has_owner(current), \"invariant\");\n@@ -1052,1 +1052,1 @@\n-    if (is_succesor(current)) clear_succesor();\n+    if (has_successor(current)) clear_successor();\n@@ -1075,1 +1075,1 @@\n-  assert(is_owner(current), \"invariant\");\n+  assert(has_owner(current), \"invariant\");\n@@ -1078,2 +1078,2 @@\n-  if (is_succesor(current)) clear_succesor();\n-  assert(!is_succesor(current), \"invariant\");\n+  if (has_successor(current)) clear_successor();\n+  assert(!has_successor(current), \"invariant\");\n@@ -1092,2 +1092,2 @@\n-    assert(is_owner(current), \"invariant\");\n-    assert(!is_succesor(current), \"invariant\");\n+    assert(has_owner(current), \"invariant\");\n+    assert(!has_successor(current), \"invariant\");\n@@ -1111,2 +1111,2 @@\n-      assert(is_owner(current), \"invariant\");\n-      assert(!is_succesor(current), \"invariant\");\n+      assert(has_owner(current), \"invariant\");\n+      assert(!has_successor(current), \"invariant\");\n@@ -1121,1 +1121,1 @@\n-    assert(is_owner(current), \"invariant\");\n+    assert(has_owner(current), \"invariant\");\n@@ -1123,1 +1123,1 @@\n-    if (is_succesor(current)) clear_succesor();\n+    if (has_successor(current)) clear_successor();\n@@ -1159,1 +1159,1 @@\n-  if (is_succesor(current)) clear_succesor();\n+  if (has_successor(current)) clear_successor();\n@@ -1176,1 +1176,1 @@\n-  assert(is_owner(current), \"invariant\");\n+  assert(has_owner(current), \"invariant\");\n@@ -1179,1 +1179,1 @@\n-  if (is_succesor(current)) clear_succesor();\n+  if (has_successor(current)) clear_successor();\n@@ -1215,1 +1215,1 @@\n-  assert(is_owner(current), \"invariant\");\n+  assert(has_owner(current), \"invariant\");\n@@ -1328,2 +1328,1 @@\n-  int64_t cur = owner_raw();\n-  if (owner_for(current) != cur) {\n+  if (!has_owner(current)) {\n@@ -1364,1 +1363,1 @@\n-    assert(is_owner(current), \"invariant\");\n+    assert(has_owner(current), \"invariant\");\n@@ -1375,1 +1374,1 @@\n-    if ((intptr_t(_EntryList)|intptr_t(_cxq)) == 0 || has_succesor()) {\n+    if ((intptr_t(_EntryList)|intptr_t(_cxq)) == 0 || has_successor()) {\n@@ -1417,1 +1416,1 @@\n-    guarantee(is_owner(current), \"invariant\");\n+    guarantee(has_owner(current), \"invariant\");\n@@ -1482,1 +1481,1 @@\n-    if (has_succesor()) continue;\n+    if (has_successor()) continue;\n@@ -1494,1 +1493,1 @@\n-  assert(is_owner(current), \"invariant\");\n+  assert(has_owner(current), \"invariant\");\n@@ -1508,1 +1507,1 @@\n-    set_succesor(t);\n+    set_successor(t);\n@@ -1513,1 +1512,1 @@\n-    set_succesor(vthread);\n+    set_successor(vthread);\n@@ -1548,3 +1547,2 @@\n-  int64_t cur = owner_raw();\n-  if (owner_for(current) != cur) {\n-    if (LockingMode == LM_LEGACY && is_stack_locker(current)) {\n+  if (!has_owner(current)) {\n+    if (LockingMode == LM_LEGACY && has_stack_locker(current)) {\n@@ -1557,1 +1555,1 @@\n-  guarantee(is_owner(current), \"complete_exit not owner\");\n+  guarantee(has_owner(current), \"complete_exit not owner\");\n@@ -1561,1 +1559,1 @@\n-  guarantee(!is_owner(current), \"invariant\");\n+  guarantee(!has_owner(current), \"invariant\");\n@@ -1585,1 +1583,1 @@\n-  if (cur == owner_for(current)) {\n+  if (cur == owner_from(current)) {\n@@ -1728,1 +1726,1 @@\n-  guarantee(!is_owner(current), \"invariant\");\n+  guarantee(!has_owner(current), \"invariant\");\n@@ -1794,1 +1792,1 @@\n-    if (is_succesor(current)) clear_succesor();\n+    if (has_successor(current)) clear_successor();\n@@ -1808,1 +1806,1 @@\n-      if (node._notified && is_succesor(current)) {\n+      if (node._notified && has_successor(current)) {\n@@ -1834,1 +1832,1 @@\n-    assert(!is_owner(current), \"invariant\");\n+    assert(!has_owner(current), \"invariant\");\n@@ -1853,2 +1851,2 @@\n-    assert(is_owner(current), \"invariant\");\n-    assert(!is_succesor(current), \"invariant\");\n+    assert(has_owner(current), \"invariant\");\n+    assert(!has_successor(current), \"invariant\");\n@@ -1867,2 +1865,2 @@\n-  assert(is_owner(current), \"invariant\");\n-  assert(!is_succesor(current), \"invariant\");\n+  assert(has_owner(current), \"invariant\");\n+  assert(!has_successor(current), \"invariant\");\n@@ -2026,1 +2024,1 @@\n-  guarantee(!is_owner(current), \"invariant\");\n+  guarantee(!has_owner(current), \"invariant\");\n@@ -2067,1 +2065,1 @@\n-  assert(!is_owner(current), \"invariant\");\n+  assert(!has_owner(current), \"invariant\");\n@@ -2246,2 +2244,2 @@\n-  if (!has_succesor()) {\n-    set_succesor(current);\n+  if (!has_successor()) {\n+    set_successor(current);\n@@ -2293,2 +2291,2 @@\n-        if (is_succesor(current)) {\n-          clear_succesor();\n+        if (has_successor(current)) {\n+          clear_successor();\n@@ -2322,2 +2320,2 @@\n-    if (!has_succesor()) {\n-      set_succesor(current);\n+    if (!has_successor()) {\n+      set_successor(current);\n@@ -2332,2 +2330,2 @@\n-  if (is_succesor(current)) {\n-    clear_succesor();\n+  if (has_successor(current)) {\n+    clear_successor();\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":73,"deletions":75,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -43,5 +43,0 @@\n-\/\/ ObjectWaiter serves as a \"proxy\" or surrogate thread.\n-\/\/ TODO-FIXME: Eliminate ObjectWaiter and use the thread-specific\n-\/\/ ParkEvent instead.  Beware, however, that the JVMTI code\n-\/\/ knows about ObjectWaiters, so we'll have to reconcile that code.\n-\/\/ See next_waiter(), first_waiter(), etc.\n@@ -271,1 +266,1 @@\n-    \/\/ TODO-FIXME: assert _owner == null implies _recursions = 0\n+    \/\/ TODO-FIXME: assert _owner == NO_OWNER implies _recursions = 0\n@@ -288,1 +283,1 @@\n-  int64_t   owner() const;  \/\/ Returns null if DEFLATER_MARKER is observed.\n+  int64_t   owner() const;  \/\/ Returns NO_OWNER if DEFLATER_MARKER is observed.\n@@ -291,2 +286,4 @@\n-  static int64_t owner_for(JavaThread* thread);\n-  static int64_t owner_for_oop(oop vthread);\n+  \/\/ These methods return the value we set in _owner when acquiring\n+  \/\/ the monitor with the given thread\/vthread (tid).\n+  static int64_t owner_from(JavaThread* thread);\n+  static int64_t owner_from(oop vthread);\n@@ -298,2 +295,2 @@\n-  \/\/ Clear _owner field; current value must match old_value.\n-  void      release_clear_owner(JavaThread* old_value);\n+  \/\/ Clear _owner field; current value must match thread's tid.\n+  void      release_clear_owner(JavaThread* thread);\n@@ -302,0 +299,1 @@\n+  \/\/ Same as above but uses tid of current as new value.\n@@ -303,1 +301,1 @@\n-  \/\/ Simply set _owner field to current; current value must match basic_lock_p.\n+  \/\/ Set _owner field to tid of current thread; current value must be ANONYMOUS_OWNER.\n@@ -309,0 +307,1 @@\n+  \/\/ Same as above but uses tid of current as new_value.\n@@ -311,5 +310,5 @@\n-  bool      is_succesor(JavaThread* thread);\n-  void      set_succesor(JavaThread* thread);\n-  void      set_succesor(oop vthread);\n-  void      clear_succesor();\n-  bool      has_succesor();\n+  bool      has_successor();\n+  bool      has_successor(JavaThread* thread);\n+  void      set_successor(JavaThread* thread);\n+  void      set_successor(oop vthread);\n+  void      clear_successor();\n@@ -317,1 +316,3 @@\n-  bool is_owner(JavaThread* thread) const { return owner() == owner_for(thread); }\n+  \/\/ Returns true if _owner field == tid of thread, false otherwise.\n+  bool has_owner(JavaThread* thread) const { return owner() == owner_from(thread); }\n+  \/\/ Set _owner field to tid of thread; current value must be NO_OWNER.\n@@ -319,0 +320,1 @@\n+  \/\/ Try to set _owner field from NO_OWNER to tid of thread.\n@@ -323,1 +325,1 @@\n-  bool is_owner_anonymous() const { return owner_raw() == ANONYMOUS_OWNER; }\n+  bool has_owner_anonymous() const { return owner_raw() == ANONYMOUS_OWNER; }\n@@ -331,1 +333,4 @@\n-  bool is_stack_locker(JavaThread* current);\n+  \/\/ Returns true if BasicLock* stored in _stack_locker\n+  \/\/ points to current's stack, false othwerwise.\n+  bool has_stack_locker(JavaThread* current);\n+  \/\/ Get and set _stack_locker.\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":25,"deletions":20,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-inline int64_t ObjectMonitor::owner_for(JavaThread* thread) {\n+inline int64_t ObjectMonitor::owner_from(JavaThread* thread) {\n@@ -48,1 +48,1 @@\n-inline int64_t ObjectMonitor::owner_for_oop(oop vthread) {\n+inline int64_t ObjectMonitor::owner_from(oop vthread) {\n@@ -55,1 +55,1 @@\n-  if (is_owner_anonymous()) {\n+  if (has_owner_anonymous()) {\n@@ -62,1 +62,1 @@\n-    return is_owner(current);\n+    return has_owner(current);\n@@ -128,2 +128,2 @@\n-inline bool ObjectMonitor::is_stack_locker(JavaThread* current) {\n-  return is_owner_anonymous() && current->is_lock_owned((address)stack_locker());\n+inline bool ObjectMonitor::has_stack_locker(JavaThread* current) {\n+  return has_owner_anonymous() && current->is_lock_owned((address)stack_locker());\n@@ -162,1 +162,1 @@\n-  int64_t old_value = owner_for(old_owner);\n+  int64_t old_value = owner_from(old_owner);\n@@ -191,1 +191,1 @@\n-  set_owner_from_raw(old_value, owner_for(current));\n+  set_owner_from_raw(old_value, owner_from(current));\n@@ -194,1 +194,1 @@\n-\/\/ Simply set _owner field to self; current value must match basic_lock_p.\n+\/\/ Simply set _owner to the tid of current. Current owner must be anonymous.\n@@ -199,1 +199,1 @@\n-  assert(is_owner_anonymous(), \"\");\n+  assert(has_owner_anonymous(), \"\");\n@@ -203,1 +203,1 @@\n-  Atomic::store(&_owner, owner_for(current));\n+  Atomic::store(&_owner, owner_from(current));\n@@ -207,1 +207,1 @@\n-                                     p2i(this), p2i(basic_lock_p), owner_for(current));\n+                                     p2i(this), p2i(basic_lock_p), owner_from(current));\n@@ -226,1 +226,1 @@\n-  return try_set_owner_from_raw(old_value, owner_for(current));\n+  return try_set_owner_from_raw(old_value, owner_from(current));\n@@ -229,2 +229,2 @@\n-inline bool ObjectMonitor::is_succesor(JavaThread* thread) {\n-  return owner_for(thread) == Atomic::load(&_succ);\n+inline bool ObjectMonitor::has_successor() {\n+  return Atomic::load(&_succ) != NO_OWNER;\n@@ -233,2 +233,2 @@\n-inline void ObjectMonitor::set_succesor(JavaThread* thread) {\n-  Atomic::store(&_succ, owner_for(thread));\n+inline bool ObjectMonitor::has_successor(JavaThread* thread) {\n+  return owner_from(thread) == Atomic::load(&_succ);\n@@ -237,2 +237,2 @@\n-inline void ObjectMonitor::set_succesor(oop vthread) {\n-  Atomic::store(&_succ, java_lang_Thread::thread_id(vthread));\n+inline void ObjectMonitor::set_successor(JavaThread* thread) {\n+  Atomic::store(&_succ, owner_from(thread));\n@@ -241,2 +241,2 @@\n-inline void ObjectMonitor::clear_succesor() {\n-  Atomic::store(&_succ, NO_OWNER);\n+inline void ObjectMonitor::set_successor(oop vthread) {\n+  Atomic::store(&_succ, java_lang_Thread::thread_id(vthread));\n@@ -245,2 +245,2 @@\n-inline bool ObjectMonitor::has_succesor() {\n-  return Atomic::load(&_succ) != NO_OWNER;\n+inline void ObjectMonitor::clear_successor() {\n+  Atomic::store(&_succ, NO_OWNER);\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.inline.hpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1974,1 +1974,1 @@\n-    assert(!m->is_owner(current), \"must be\");\n+    assert(!m->has_owner(current), \"must be\");\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -364,1 +364,1 @@\n-    if (!mon->is_owner(current)) return false;  \/\/ slow-path for IMS exception\n+    if (!mon->has_owner(current)) return false;  \/\/ slow-path for IMS exception\n@@ -433,1 +433,1 @@\n-    if (m->is_owner(current)) {\n+    if (m->has_owner(current)) {\n@@ -660,1 +660,1 @@\n-  assert(!monitor->is_owner_anonymous(), \"must not be\");\n+  assert(!monitor->has_owner_anonymous(), \"must not be\");\n@@ -1246,1 +1246,1 @@\n-  int64_t key = ObjectMonitor::owner_for(thread);\n+  int64_t key = ObjectMonitor::owner_from(thread);\n@@ -1252,1 +1252,1 @@\n-  int64_t key = ObjectMonitor::owner_for_oop(vthread);\n+  int64_t key = ObjectMonitor::owner_from(vthread);\n@@ -1467,1 +1467,1 @@\n-      if (inf->is_owner_anonymous() && inflating_thread != nullptr) {\n+      if (inf->has_owner_anonymous() && inflating_thread != nullptr) {\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1268,1 +1268,1 @@\n-  if (monitor->is_owner_anonymous()) {\n+  if (monitor->has_owner_anonymous()) {\n@@ -1278,1 +1278,1 @@\n-      if (monitor->is_owner(q)) {\n+      if (monitor->has_owner(q)) {\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -353,1 +353,1 @@\n-    if (monitor->is_owner_anonymous()) {\n+    if (monitor->has_owner_anonymous()) {\n@@ -371,1 +371,1 @@\n-    int64_t key = ObjectMonitor::owner_for(thread);\n+    int64_t key = ObjectMonitor::owner_from(thread);\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}