{"files":[{"patch":"@@ -132,1 +132,1 @@\n-const char* Abstract_VM_Version::_vendor_branding_override = nullptr;\n+const char* Abstract_VM_Version::_vm_vendor = vm_vendor_string;\n@@ -135,1 +135,1 @@\n-  return _vendor_branding_override != nullptr ? _vendor_branding_override : vm_vendor_string;\n+  return _vm_vendor;\n@@ -138,6 +138,2 @@\n-void Abstract_VM_Version::override_vm_vendor(const char* vendor_override) {\n-  if (_vendor_branding_override != nullptr) {\n-    os::free((void *)_vendor_branding_override);\n-  }\n-\n-  _vendor_branding_override = (vendor_override == nullptr) ? nullptr : os::strdup(vendor_override);\n+void Abstract_VM_Version::set_vm_vendor(const char* vm_vendor) {\n+  _vm_vendor = os::strdup(vm_vendor);\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-  static const char*  _vendor_branding_override;\n+  static const char*  _vm_vendor;\n@@ -112,1 +112,1 @@\n-  static void override_vm_vendor(const char* vendor_override);\n+  static void set_vm_vendor(const char* vm_vendor);\n","filename":"src\/hotspot\/share\/runtime\/abstract_vm_version.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -401,1 +401,1 @@\n-    VM_Version::override_vm_vendor(get_java_version_info(ik, vmSymbols::java_runtime_vendor_vm_name()));\n+    VM_Version::set_vm_vendor(get_java_version_info(ik, vmSymbols::java_runtime_vendor_vm_name()));\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -97,1 +97,0 @@\n-    @SuppressWarnings(\"unused\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/VersionProps.java.template","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}