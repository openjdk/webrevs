{"files":[{"patch":"@@ -66,0 +66,2 @@\n+class ObjectMonitorDeflationLogging;\n+\n@@ -87,0 +89,11 @@\n+class ObjectMonitorDeflationSafepointer {\n+  JavaThread* const                    _current;\n+  ObjectMonitorDeflationLogging* const _log;\n+\n+public:\n+  ObjectMonitorDeflationSafepointer(ObjectMonitorDeflationLogging* log)\n+    : _current(JavaThread::current()), _log(log) {}\n+\n+  void block_for_safepoint(const char* op_name, const char* count_name, size_t counter);\n+};\n+\n@@ -89,3 +102,2 @@\n-size_t MonitorList::unlink_deflated(Thread* current, LogStream* ls,\n-                                    elapsedTimer* timer_p,\n-                                    GrowableArray<ObjectMonitor*>* unlinked_list) {\n+size_t MonitorList::unlink_deflated(GrowableArray<ObjectMonitor*>* unlinked_list,\n+                                    ObjectMonitorDeflationSafepointer* safepointer) {\n@@ -133,6 +145,2 @@\n-    if (current->is_Java_thread()) {\n-      \/\/ A JavaThread must check for a safepoint\/handshake and honor it.\n-      ObjectSynchronizer::chk_for_block_req(JavaThread::cast(current), \"unlinking\",\n-                                            \"unlinked_count\", unlinked_count,\n-                                            ls, timer_p);\n-    }\n+    \/\/ Must check for a safepoint\/handshake and honor it.\n+    safepointer->block_for_safepoint(\"unlinking\", \"unlinked_count\", unlinked_count);\n@@ -1508,29 +1516,0 @@\n-void ObjectSynchronizer::chk_for_block_req(JavaThread* current, const char* op_name,\n-                                           const char* cnt_name, size_t cnt,\n-                                           LogStream* ls, elapsedTimer* timer_p) {\n-  if (!SafepointMechanism::should_process(current)) {\n-    return;\n-  }\n-\n-  \/\/ A safepoint\/handshake has started.\n-  if (ls != nullptr) {\n-    timer_p->stop();\n-    ls->print_cr(\"pausing %s: %s=\" SIZE_FORMAT \", in_use_list stats: ceiling=\"\n-                 SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                 op_name, cnt_name, cnt, in_use_list_ceiling(),\n-                 _in_use_list.count(), _in_use_list.max());\n-  }\n-\n-  {\n-    \/\/ Honor block request.\n-    ThreadBlockInVM tbivm(current);\n-  }\n-\n-  if (ls != nullptr) {\n-    ls->print_cr(\"resuming %s: in_use_list stats: ceiling=\" SIZE_FORMAT\n-                 \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT, op_name,\n-                 in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n-    timer_p->start();\n-  }\n-}\n-\n@@ -1540,2 +1519,1 @@\n-size_t ObjectSynchronizer::deflate_monitor_list(Thread* current, LogStream* ls,\n-                                                elapsedTimer* timer_p) {\n+size_t ObjectSynchronizer::deflate_monitor_list(ObjectMonitorDeflationSafepointer* safepointer) {\n@@ -1554,5 +1532,2 @@\n-    if (current->is_Java_thread()) {\n-      \/\/ A JavaThread must check for a safepoint\/handshake and honor it.\n-      chk_for_block_req(JavaThread::cast(current), \"deflation\", \"deflated_count\",\n-                        deflated_count, ls, timer_p);\n-    }\n+    \/\/ Must check for a safepoint\/handshake and honor it.\n+    safepointer->block_for_safepoint(\"deflation\", \"deflated_count\", deflated_count);\n@@ -1594,8 +1569,18 @@\n-\/\/ This function is called by the MonitorDeflationThread to deflate\n-\/\/ ObjectMonitors.\n-size_t ObjectSynchronizer::deflate_idle_monitors() {\n-  Thread* current = Thread::current();\n-  if (current->is_Java_thread()) {\n-    \/\/ The async deflation request has been processed.\n-    _last_async_deflation_time_ns = os::javaTimeNanos();\n-    set_is_async_deflation_requested(false);\n+class ObjectMonitorDeflationLogging {\n+  LogStreamHandle(Debug, monitorinflation) _debug;\n+  LogStreamHandle(Info, monitorinflation)  _info;\n+  LogStream*                               _stream;\n+  elapsedTimer                             _timer;\n+\n+  size_t ceiling() const { return ObjectSynchronizer::in_use_list_ceiling(); }\n+  size_t count() const   { return ObjectSynchronizer::_in_use_list.count(); }\n+  size_t max() const     { return ObjectSynchronizer::_in_use_list.max(); }\n+\n+public:\n+  ObjectMonitorDeflationLogging()\n+    : _debug(), _info(), _stream(nullptr) {\n+    if (_debug.is_enabled()) {\n+      _stream = &_debug;\n+    } else if (_info.is_enabled()) {\n+      _stream = &_info;\n+    }\n@@ -1604,7 +1589,16 @@\n-  LogStreamHandle(Debug, monitorinflation) lsh_debug;\n-  LogStreamHandle(Info, monitorinflation) lsh_info;\n-  LogStream* ls = nullptr;\n-  if (log_is_enabled(Debug, monitorinflation)) {\n-    ls = &lsh_debug;\n-  } else if (log_is_enabled(Info, monitorinflation)) {\n-    ls = &lsh_info;\n+  void begin() {\n+    if (_stream != nullptr) {\n+      _stream->print_cr(\"begin deflating: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                        ceiling(), count(), max());\n+      _timer.start();\n+    }\n+  }\n+\n+  void before_handshake(size_t unlinked_count) {\n+    if (_stream != nullptr) {\n+      _timer.stop();\n+      _stream->print_cr(\"before handshaking: unlinked_count=\" SIZE_FORMAT\n+                        \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\"\n+                        SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                        unlinked_count, ceiling(), count(), max());\n+    }\n@@ -1613,5 +1607,7 @@\n-  elapsedTimer timer;\n-  if (ls != nullptr) {\n-    ls->print_cr(\"begin deflating: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                 in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n-    timer.start();\n+  void after_handshake() {\n+    if (_stream != nullptr) {\n+      _stream->print_cr(\"after handshaking: in_use_list stats: ceiling=\"\n+                        SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                        ceiling(), count(), max());\n+      _timer.start();\n+    }\n@@ -1620,0 +1616,81 @@\n+  void before_blocked(size_t unlinked_count) {\n+    if (_stream != NULL) {\n+      _timer.stop();\n+      _stream->print_cr(\"before setting blocked: unlinked_count=\" SIZE_FORMAT\n+                        \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\"\n+                        SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                        unlinked_count, ceiling(), count(), max());\n+    }\n+  }\n+\n+  void after_blocked() {\n+    if (_stream != NULL) {\n+      _stream->print_cr(\"after setting blocked: in_use_list stats: ceiling=\"\n+                        SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                        ceiling(), count(), max());\n+      _timer.start();\n+    }\n+  }\n+\n+  void end(size_t deflated_count, size_t unlinked_count) {\n+    if (_stream != nullptr) {\n+      _timer.stop();\n+      if (deflated_count != 0 || unlinked_count != 0 || _debug.is_enabled()) {\n+        _stream->print_cr(\"deflated_count=\" SIZE_FORMAT \", {unlinked,deleted}_count=\" SIZE_FORMAT \" monitors in %3.7f secs\",\n+                          deflated_count, unlinked_count, _timer.seconds());\n+      }\n+      _stream->print_cr(\"end deflating: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+                        ceiling(), count(), max());\n+    }\n+  }\n+\n+  void before_block_for_safepoint(const char* op_name, const char* cnt_name, size_t cnt) {\n+    if (_stream != nullptr) {\n+      _timer.stop();\n+      _stream->print_cr(\"pausing %s: %s=\" SIZE_FORMAT \", in_use_list stats: ceiling=\"\n+          SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n+          op_name, cnt_name, cnt, ceiling(), count(), max());\n+    }\n+  }\n+\n+  void after_block_for_safepoint(const char* op_name) {\n+    if (_stream != nullptr) {\n+      _stream->print_cr(\"resuming %s: in_use_list stats: ceiling=\" SIZE_FORMAT\n+          \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT, op_name,\n+          ceiling(), count(), max());\n+      _timer.start();\n+    }\n+  }\n+};\n+\n+void ObjectMonitorDeflationSafepointer::block_for_safepoint(const char* op_name, const char* count_name, size_t counter) {\n+  if (!SafepointMechanism::should_process(_current)) {\n+    return;\n+  }\n+\n+  \/\/ A safepoint\/handshake has started.\n+  _log->before_block_for_safepoint(op_name, count_name, counter);\n+\n+  {\n+    \/\/ Honor block request.\n+    ThreadBlockInVM tbivm(_current);\n+  }\n+\n+  _log->after_block_for_safepoint(op_name);\n+}\n+\n+\/\/ This function is called by the MonitorDeflationThread to deflate\n+\/\/ ObjectMonitors.\n+size_t ObjectSynchronizer::deflate_idle_monitors() {\n+  JavaThread* current = JavaThread::current();\n+  assert(current->is_monitor_deflation_thread(), \"The only monitor deflater\");\n+\n+  \/\/ The async deflation request has been processed.\n+  _last_async_deflation_time_ns = os::javaTimeNanos();\n+  set_is_async_deflation_requested(false);\n+\n+  ObjectMonitorDeflationLogging log;\n+  ObjectMonitorDeflationSafepointer safepointer(&log);\n+\n+  log.begin();\n+\n@@ -1621,1 +1698,3 @@\n-  size_t deflated_count = deflate_monitor_list(current, ls, &timer);\n+  size_t deflated_count = deflate_monitor_list(&safepointer);\n+\n+  \/\/ Unlink the deflated ObjectMonitros from the in-use list.\n@@ -1625,3 +1704,0 @@\n-    \/\/ There are ObjectMonitors that have been deflated.\n-\n-    \/\/ Unlink deflated ObjectMonitors from the in-use list.\n@@ -1630,10 +1706,1 @@\n-    unlinked_count = _in_use_list.unlink_deflated(current, ls, &timer, &delete_list);\n-    if (current->is_monitor_deflation_thread()) {\n-      if (ls != nullptr) {\n-        timer.stop();\n-        ls->print_cr(\"before handshaking: unlinked_count=\" SIZE_FORMAT\n-                     \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\"\n-                     SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                     unlinked_count, in_use_list_ceiling(),\n-                     _in_use_list.count(), _in_use_list.max());\n-      }\n+    unlinked_count = _in_use_list.unlink_deflated(&delete_list, &safepointer);\n@@ -1641,21 +1708,13 @@\n-      \/\/ A JavaThread needs to handshake in order to safely free the\n-      \/\/ ObjectMonitors that were deflated in this cycle.\n-      HandshakeForDeflation hfd_hc;\n-      Handshake::execute(&hfd_hc);\n-      \/\/ Also, we sync and desync GC threads around the handshake, so that they can\n-      \/\/ safely read the mark-word and look-through to the object-monitor, without\n-      \/\/ being afraid that the object-monitor is going away.\n-      VM_RendezvousGCThreads sync_gc;\n-      VMThread::execute(&sync_gc);\n-\n-      if (ls != nullptr) {\n-        ls->print_cr(\"after handshaking: in_use_list stats: ceiling=\"\n-                     SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                     in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n-        timer.start();\n-      }\n-    } else {\n-      \/\/ This is not a monitor deflation thread.\n-      \/\/ No handshake or rendezvous is needed when we are already at safepoint.\n-      assert_at_safepoint();\n-    }\n+    log.before_handshake(unlinked_count);\n+\n+    \/\/ A JavaThread needs to handshake in order to safely free the\n+    \/\/ ObjectMonitors that were deflated in this cycle.\n+    HandshakeForDeflation hfd_hc;\n+    Handshake::execute(&hfd_hc);\n+    \/\/ Also, we sync and desync GC threads around the handshake, so that they can\n+    \/\/ safely read the mark-word and look-through to the object-monitor, without\n+    \/\/ being afraid that the object-monitor is going away.\n+    VM_RendezvousGCThreads sync_gc;\n+    VMThread::execute(&sync_gc);\n+\n+    log.after_handshake();\n@@ -1665,24 +1724,11 @@\n-    if (current->is_Java_thread()) {\n-      if (ls != NULL) {\n-        timer.stop();\n-        ls->print_cr(\"before setting blocked: unlinked_count=\" SIZE_FORMAT\n-                     \", in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\"\n-                     SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                     unlinked_count, in_use_list_ceiling(),\n-                     _in_use_list.count(), _in_use_list.max());\n-      }\n-      \/\/ Mark the calling JavaThread blocked (safepoint safe) while we free\n-      \/\/ the ObjectMonitors so we don't delay safepoints whilst doing that.\n-      ThreadBlockInVM tbivm(JavaThread::cast(current));\n-      if (ls != NULL) {\n-        ls->print_cr(\"after setting blocked: in_use_list stats: ceiling=\"\n-                     SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                     in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n-        timer.start();\n-      }\n-      deleted_count = delete_monitors(&delete_list);\n-      \/\/ ThreadBlockInVM is destroyed here\n-    } else {\n-      \/\/ A non-JavaThread can just free the ObjectMonitors:\n-      deleted_count = delete_monitors(&delete_list);\n-    }\n+\n+    log.before_blocked(unlinked_count);\n+\n+    \/\/ Mark the calling JavaThread blocked (safepoint safe) while we free\n+    \/\/ the ObjectMonitors so we don't delay safepoints whilst doing that.\n+    ThreadBlockInVM tbivm(current);\n+\n+    log.after_blocked();\n+\n+    \/\/ Delete the unlinked ObjectMonitors.\n+    deleted_count = delete_monitors(&delete_list);\n@@ -1690,1 +1736,0 @@\n-  }\n@@ -1692,8 +1737,1 @@\n-  if (ls != nullptr) {\n-    timer.stop();\n-    if (deflated_count != 0 || unlinked_count != 0 || log_is_enabled(Debug, monitorinflation)) {\n-      ls->print_cr(\"deflated_count=\" SIZE_FORMAT \", {unlinked,deleted}_count=\" SIZE_FORMAT \" monitors in %3.7f secs\",\n-                   deflated_count, unlinked_count, timer.seconds());\n-    }\n-    ls->print_cr(\"end deflating: in_use_list stats: ceiling=\" SIZE_FORMAT \", count=\" SIZE_FORMAT \", max=\" SIZE_FORMAT,\n-                 in_use_list_ceiling(), _in_use_list.count(), _in_use_list.max());\n+    \/\/ ThreadBlockInVM is destroyed here\n@@ -1707,0 +1745,2 @@\n+  log.end(deflated_count, unlinked_count);\n+\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":173,"deletions":133,"binary":false,"changes":306,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+class ObjectMonitorDeflationSafepointer;\n@@ -49,2 +50,2 @@\n-  size_t unlink_deflated(Thread* current, LogStream* ls, elapsedTimer* timer_p,\n-                         GrowableArray<ObjectMonitor*>* unlinked_list);\n+  size_t unlink_deflated(GrowableArray<ObjectMonitor*>* unlinked_list,\n+                         ObjectMonitorDeflationSafepointer* safepointer);\n@@ -69,1 +70,1 @@\n-\n+  friend class ObjectMonitorDeflationLogging;\n@@ -150,4 +151,1 @@\n-  static void chk_for_block_req(JavaThread* current, const char* op_name,\n-                                const char* cnt_name, size_t cnt, LogStream* ls,\n-                                elapsedTimer* timer_p);\n-  static size_t deflate_monitor_list(Thread* current, LogStream* ls, elapsedTimer* timer_p);\n+  static size_t deflate_monitor_list(ObjectMonitorDeflationSafepointer* safepointer);\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"}]}