{"files":[{"patch":"@@ -609,0 +609,1 @@\n+    StressIncrementalInlining = false;\n","filename":"src\/hotspot\/share\/compiler\/compilerDefinitions.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,0 +56,3 @@\n+  product(bool, StressIncrementalInlining, false, DIAGNOSTIC,               \\\n+          \"Randomize the incremental inlining decision\")                    \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -435,1 +435,1 @@\n-    assert(!cg->is_late_inline() || cg->is_mh_late_inline() || AlwaysIncrementalInline, \"we're doing late inlining\");\n+    assert(!cg->is_late_inline() || cg->is_mh_late_inline() || AlwaysIncrementalInline || StressIncrementalInlining, \"we're doing late inlining\");\n@@ -557,1 +557,1 @@\n-    assert(!cg->is_late_inline() || cg->is_mh_late_inline() || AlwaysIncrementalInline, \"we're doing late inlining\");\n+    assert(!cg->is_late_inline() || cg->is_mh_late_inline() || AlwaysIncrementalInline || StressIncrementalInlining, \"we're doing late inlining\");\n@@ -992,0 +992,1 @@\n+  bool should_delay = C->should_delay_inlining();\n@@ -993,1 +994,1 @@\n-    if (AlwaysIncrementalInline) {\n+    if (should_delay) {\n@@ -1004,1 +1005,1 @@\n-      (input_not_const || !C->inlining_incrementally() || C->over_inlining_cutoff())) {\n+      (should_delay || input_not_const || !C->inlining_incrementally() || C->over_inlining_cutoff())) {\n","filename":"src\/hotspot\/share\/opto\/callGenerator.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -841,1 +841,1 @@\n-  if (StressLCM || StressGCM || StressIGVN || StressCCP) {\n+  if (StressLCM || StressGCM || StressIGVN || StressCCP || StressIncrementalInlining) {\n@@ -2264,1 +2264,1 @@\n-    if (AlwaysIncrementalInline) {\n+    if (AlwaysIncrementalInline || StressIncrementalInlining) {\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1072,0 +1072,1 @@\n+  bool should_delay_inlining() { return AlwaysIncrementalInline || (StressIncrementalInlining && (random() % 2) == 0); }\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -188,1 +188,1 @@\n-      bool should_delay = AlwaysIncrementalInline;\n+      bool should_delay = C->should_delay_inlining();\n@@ -207,1 +207,3 @@\n-          if (should_delay_string_inlining(callee, jvms)) {\n+          if (should_delay) {\n+            return CallGenerator::for_late_inline(callee, cg);\n+          } else if (should_delay_string_inlining(callee, jvms)) {\n@@ -213,2 +215,0 @@\n-          } else if (should_delay) {\n-            return CallGenerator::for_late_inline(callee, cg);\n","filename":"src\/hotspot\/share\/opto\/doCall.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -71,0 +71,1 @@\n+        commandLineNormal.add(\"-XX:-StressIncrementalInlining\");\n","filename":"test\/hotspot\/jtreg\/compiler\/ciReplay\/TestIncrementalInlining.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n- *                   -XX:-AlwaysIncrementalInline\n+ *                   -XX:-AlwaysIncrementalInline -XX:-StressIncrementalInlining\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/klass\/CastNullCheckDroppingsTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n- *                   -XX:+IgnoreUnrecognizedVMOptions -XX:-AlwaysIncrementalInline\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:-AlwaysIncrementalInline -XX:-StressIncrementalInlining\n","filename":"test\/hotspot\/jtreg\/compiler\/uncommontrap\/Decompile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}