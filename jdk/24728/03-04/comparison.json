{"files":[{"patch":"@@ -79,2 +79,0 @@\n-    private static final int DEFAULT_BUFFER_SIZE = 8192;\n-\n@@ -443,34 +441,0 @@\n-    \/**\n-     * Reads all remaining characters into a string.\n-     *\n-     * <p> This method reads all content including the line separators in\n-     * the middle and\/or at the end. The resulting string will contain line\n-     * separators as they appear in the original content. The method does not\n-     * close this reader nor its underlying stream. If an I\/O error occurs,\n-     * the states of the reader and its underlying stream are unspecified.\n-     *\n-     * @apiNote\n-     * This method is intended for simple cases where it is appropriate and\n-     * convenient to read all lines into a String. It is not intended for\n-     * reading a large number of lines.\n-     *\n-     * @return     a String containing all lines\n-     *\n-     * @throws     IOException       If an I\/O error occurs\n-     * @throws     OutOfMemoryError  If the content is extremely large,\n-     *                               for example larger than {@code 2GB}\n-     *\n-     * @see java.nio.file.Files#readString\n-     *\n-     * @since 25\n-     *\/\n-    public String readString() throws IOException {\n-        StringBuilder result = new StringBuilder();\n-        char[] str = new char[DEFAULT_BUFFER_SIZE];\n-        int n;\n-        while ((n = read(str)) != -1) {\n-            result.append(str, 0, n);\n-        }\n-        return result.toString();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedReader.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -394,0 +394,35 @@\n+\n+    \/**\n+     * Reads all remaining characters into a string.\n+     *\n+     * <p> This method reads all content including the line separators in\n+     * the middle and\/or at the end. The resulting string will contain line\n+     * separators as they appear in the original content. The method does not\n+     * close this reader nor its underlying stream. If an I\/O error occurs,\n+     * the states of the reader and its underlying stream are unspecified.\n+     *\n+     * @apiNote\n+     * This method is intended for simple cases where it is appropriate and\n+     * convenient to read all lines into a String. It is not intended for\n+     * reading a large number of lines.\n+     *\n+     * @return     a String containing all lines\n+     *\n+     * @throws     IOException       If an I\/O error occurs\n+     * @throws     OutOfMemoryError  If the content is extremely large,\n+     *                               for example larger than {@code 2GB}\n+     *\n+     * @see java.nio.file.Files#readString\n+     *\n+     * @since 25\n+     *\/\n+    public String readString() throws IOException {\n+        StringBuilder result = new StringBuilder();\n+        char[] str = new char[TRANSFER_BUFFER_SIZE];\n+        int n;\n+        while ((n = read(str)) != -1) {\n+            result.append(str, 0, n);\n+        }\n+        return result.toString();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"}]}