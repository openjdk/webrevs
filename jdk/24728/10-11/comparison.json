{"files":[{"patch":"@@ -400,3 +400,3 @@\n-     * Reads all remaining lines of text. A line is considered to be terminated\n-     * by any one of a line feed ('\\n'), a carriage return ('\\r'), a carriage\n-     * return followed immediately by a line feed, or by reaching the\n+     * Reads all remaining characters as lines of text. A line is considered to\n+     * be terminated by any one of a line feed ('\\n'), a carriage return ('\\r'),\n+     * a carriage return followed immediately by a line feed, or by reaching the\n@@ -414,2 +414,2 @@\n-     * to read all remaining lines in a single operation. It is not intended for\n-     * reading a large number of lines.\n+     * to read all remaining characters in a single operation. It is not\n+     * intended for reading a large number of characters.\n@@ -417,1 +417,2 @@\n-     * @return     the remaining lines of text as an unmodifiable {@code List}\n+     * @return     the remaining characters as lines of text stored in an\n+     *             unmodifiable {@code List} in the order that they are read\n@@ -426,1 +427,1 @@\n-        return readAllChars().lines();\n+        return readAllChars().lines().toList();\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.io.StringReader;\n@@ -103,0 +104,1 @@\n+        \/\/ BufferedReader implementation\n@@ -111,0 +113,1 @@\n+        assertEquals(linesExpected, lines);\n@@ -112,0 +115,4 @@\n+        \/\/ Reader implementation\n+        try (Reader r = new StringReader(Files.readString(path))) {\n+            lines = r.readAllLines();\n+        }\n","filename":"test\/jdk\/java\/io\/BufferedReader\/ReadAll.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}