{"files":[{"patch":"@@ -409,4 +409,4 @@\n-     * Reads all lines of text. A line is considered to be terminated by any\n-     * one of a line feed ('\\n'), a carriage return ('\\r'), a carriage return\n-     * followed immediately by a line feed, or by reaching the end-of-file\n-     * (EOF).\n+     * Reads all remaining lines of text. A line is considered to be terminated\n+     * by any one of a line feed ('\\n'), a carriage return ('\\r'), a carriage\n+     * return followed immediately by a line feed, or by reaching the\n+     * end-of-file (EOF).\n@@ -419,1 +419,1 @@\n-     * <p> This method is intended for simple cases where it is convenient\n+     * This method is intended for simple cases where it is convenient\n@@ -438,1 +438,1 @@\n-     * Reads all characters into a string.\n+     * Reads all remaining charactersinto a string.\n@@ -459,1 +459,1 @@\n-    public  String readString() throws IOException {\n+    public String readString() throws IOException {\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedReader.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.io.FileWriter;\n@@ -38,0 +37,2 @@\n+import java.nio.ByteBuffer;\n+import java.nio.channels.FileChannel;\n@@ -43,0 +44,3 @@\n+import static java.nio.file.StandardOpenOption.CREATE;\n+import static java.nio.file.StandardOpenOption.WRITE;\n+\n@@ -60,2 +64,2 @@\n-        file = File.createTempFile(\"foo\", \"bar\", new File(\".\"));\n-        path = file.toPath();\n+        path = Files.createTempFile(Path.of(\".\"), \"foo\", \"bar\");\n+        file = path.toFile();\n@@ -66,11 +70,14 @@\n-        FileWriter fw = new FileWriter(file);\n-\n-        int len = 0;\n-        int plen = PHRASE.length();\n-        while (len < size) {\n-            int fromIndex = rnd.nextInt(0, plen \/ 2);\n-            int toIndex = rnd.nextInt(fromIndex, plen);\n-            String str = PHRASE.substring(fromIndex, toIndex);\n-            fw.write(str);\n-            fw.write(System.lineSeparator());\n-            len += toIndex - fromIndex;\n+        try (FileChannel fc = FileChannel.open(path, CREATE, WRITE);) {\n+            int len = 0;\n+            int plen = PHRASE.length();\n+            ByteBuffer lineSeparatorBuf =\n+                ByteBuffer.wrap(System.lineSeparator().getBytes());\n+            while (len < size) {\n+                int fromIndex = rnd.nextInt(0, plen \/ 2);\n+                int toIndex = rnd.nextInt(fromIndex, plen);\n+                String str = PHRASE.substring(fromIndex, toIndex);\n+                ByteBuffer strBuf = ByteBuffer.wrap(str.getBytes());\n+                fc.write(strBuf);\n+                fc.write(lineSeparatorBuf);\n+                len += toIndex - fromIndex;\n+            }\n@@ -78,1 +85,0 @@\n-        fw.close();\n@@ -88,4 +94,5 @@\n-        FileReader fr = new FileReader(file);\n-        BufferedReader br = new BufferedReader(fr);\n-        List<String> lines = br.readAllLines();\n-        br.close();\n+        List<String> lines;\n+        try (FileReader fr = new FileReader(file);\n+             BufferedReader br = new BufferedReader(fr);) {\n+            lines = br.readAllLines();\n+        }\n@@ -100,4 +107,5 @@\n-        FileReader fr = new FileReader(file);\n-        BufferedReader br = new BufferedReader(fr);\n-        String string = br.readString();\n-        br.close();\n+        String string;\n+        try (FileReader fr = new FileReader(file);\n+             BufferedReader br = new BufferedReader(fr);) {\n+            string = br.readString();\n+        }\n","filename":"test\/jdk\/java\/io\/BufferedReader\/ReadAll.java","additions":31,"deletions":23,"binary":false,"changes":54,"status":"modified"}]}