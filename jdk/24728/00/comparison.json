{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -77,0 +79,2 @@\n+    private static final int DEFAULT_BUFFER_SIZE = 8192;\n+\n@@ -397,0 +401,1 @@\n+     * @see #readAllLines\n@@ -403,0 +408,61 @@\n+    \/**\n+     * Reads all lines of text. A line is considered to be terminated by any\n+     * one of a line feed ('\\n'), a carriage return ('\\r'), a carriage return\n+     * followed immediately by a line feed, or by reaching the end-of-file\n+     * (EOF).\n+     *\n+     * <p> This method works as if invoking it were equivalent to evaluating\n+     * the expression:\n+     * <blockquote>{@link #lines()}.toList()<\/blockquote>\n+     *\n+     * @apiNote\n+     * <p> This method is intended for simple cases where it is convenient\n+     * to read all lines in a single operation. It is not intended for\n+     * reading a large number of lines.\n+     *\n+     * @return     the lines of text as a {@code List}; whether the\n+     *             {@code List} is modifiable is implementation dependent,\n+     *             hence not specified\n+     *\n+     * @throws     IOException  If an I\/O error occurs\n+     *\n+     * @see java.nio.file.Files#readAllLines\n+     *\n+     * @since 25\n+     *\/\n+    public List<String> readAllLines() throws IOException {\n+        return lines().toList();\n+    }\n+\n+    \/**\n+     * Reads all characters into a string.\n+     *\n+     * <p> This method reads all content including the line separators in\n+     * the middle and\/or at the end. The resulting string will contain line\n+     * separators as they appear in the original content.\n+     *\n+     * @apiNote\n+     * This method is intended for simple cases where it is appropriate and\n+     * convenient to read all lines into a String. It is not intended for\n+     * reading a large number of lines.\n+     *\n+     * @return     a String containing all lines\n+     *\n+     * @throws     IOException       If an I\/O error occurs\n+     * @throws     OutOfMemoryError  If the content is extremely large,\n+     *                               for example larger than {@code 2GB}\n+     *\n+     * @see java.nio.file.Files#readString\n+     *\n+     * @since 25\n+     *\/\n+    public  String readString() throws IOException {\n+        StringBuilder result = new StringBuilder();\n+        char[] str = new char[DEFAULT_BUFFER_SIZE];\n+        int n;\n+        while ((n = read(str)) != -1) {\n+            result.append(str, 0, n);\n+        }\n+        return result.toString();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedReader.java","additions":67,"deletions":1,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8354724\n+ * @summary Test BufferedReader readAllLines and readString methods\n+ * @library .. \/test\/lib\n+ * @build jdk.test.lib.Platform jdk.test.lib.RandomFactory\n+ * @run junit ReadAll\n+ * @key randomness\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.File;\n+import java.io.FileReader;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.Random;\n+\n+import jdk.test.lib.RandomFactory;\n+\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class ReadAll {\n+    private static final String PHRASE =\n+        \"Ange plein de gaiet√©, connaissez-vous l'angoisse\";\n+\n+    private static File file;\n+    private static Path path;\n+\n+    @BeforeAll\n+    public static void setup() throws IOException {\n+        file = File.createTempFile(\"foo\", \"bar\", new File(\".\"));\n+        path = file.toPath();\n+\n+        Random rnd = RandomFactory.getRandom();\n+        int size = rnd.nextInt(2, 16386);\n+\n+        FileWriter fw = new FileWriter(file);\n+\n+        int len = 0;\n+        int plen = PHRASE.length();\n+        while (len < size) {\n+            int fromIndex = rnd.nextInt(0, plen \/ 2);\n+            int toIndex = rnd.nextInt(fromIndex, plen);\n+            String str = PHRASE.substring(fromIndex, toIndex);\n+            fw.write(str);\n+            fw.write(System.lineSeparator());\n+            len += toIndex - fromIndex;\n+        }\n+        fw.close();\n+    }\n+\n+    @AfterAll\n+    public static void cleanup() throws IOException {\n+        file.delete();\n+    }\n+\n+    @Test\n+    public void readAllLines() throws IOException {\n+        FileReader fr = new FileReader(file);\n+        BufferedReader br = new BufferedReader(fr);\n+        List<String> lines = br.readAllLines();\n+        br.close();\n+\n+        List<String> linesExpected = Files.readAllLines(path);\n+\n+        assertEquals(linesExpected, lines);\n+    }\n+\n+    @Test\n+    public void readString() throws IOException {\n+        FileReader fr = new FileReader(file);\n+        BufferedReader br = new BufferedReader(fr);\n+        String string = br.readString();\n+        br.close();\n+\n+        String stringExpected = Files.readString(path);\n+\n+        assertEquals(stringExpected, string);\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/BufferedReader\/ReadAll.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}