{"files":[{"patch":"@@ -410,3 +410,8 @@\n-     * Reads all remaining characters as lines of text.\n-     * <p>\n-     * A <i>line<\/i> is either a sequence of zero or more characters\n+     * Reads all remaining characters as lines of text. This method blocks until\n+     * all remaining characters have been read and end of stream is detected,\n+     * or an exception is thrown. This method does not close the reader.\n+     *\n+     * <p> When this reader reaches the end of the stream, further\n+     * invocations of this method will return an empty list.\n+     *\n+     * <p> A <i>line<\/i> is either a sequence of zero or more characters\n@@ -416,2 +421,2 @@\n-     * <p>\n-     * A <i>line terminator<\/i> is one of the following:\n+     *\n+     * <p> A <i>line terminator<\/i> is one of the following:\n@@ -423,3 +428,9 @@\n-     * <p>  The method does not close this reader nor its underlying stream.\n-     * If an I\/O error occurs, the states of the reader and its underlying\n-     * stream are unspecified.\n+     * <p> The behavior for the case where the reader is\n+     * <i>asynchronously closed<\/i>, or the thread interrupted during the\n+     * read, is highly input stream specific, and therefore not specified.\n+     *\n+     * <p> If an I\/O error occurs reading from the stream, then it\n+     * may do so after some, but not all, characters have been read.\n+     * Consequently the stream may not be at end of stream and may\n+     * be in an inconsistent state. It is strongly recommended that the reader\n+     * be promptly closed if an I\/O error occurs.\n@@ -430,1 +441,2 @@\n-     * intended for reading a large number of characters, for example, greater than 1G.\n+     * intended for reading a large number of characters, for example,\n+     * greater than {@code 1G}.\n@@ -433,1 +445,2 @@\n-     *             unmodifiable {@code List} of strings in the order they are read\n+     *             unmodifiable {@code List} of {@code String}s in the order\n+     *             they are read\n@@ -436,2 +449,2 @@\n-     * @throws     OutOfMemoryError  If the number of remaining characters exceeds the\n-     *              implementation limit for String.\n+     * @throws     OutOfMemoryError  If the number of remaining characters\n+     *             exceeds the implementation limit for {@code String}.\n@@ -450,1 +463,8 @@\n-     * Reads all remaining characters into a string.\n+     * Reads all remaining characters into a string. This method blocks until\n+     * all remaining characters including all line separators have been read\n+     * and end of stream is detected, or an exception is thrown. The resulting\n+     * string will contain line separators as they appear in the stream. This\n+     * method does not close the reader.\n+     *\n+     * <p> When this reader reaches the end of the stream, further\n+     * invocations of this method will return an empty string.\n@@ -452,3 +472,3 @@\n-     * <p> This method reads all remaining characters including all line separators\n-     * to the end of the stream. The resulting string will contain line\n-     * separators as they appear in the stream.\n+     * <p> The behavior for the case where the reader\n+     * is <i>asynchronously closed<\/i>, or the thread interrupted during the\n+     * read, is highly input stream specific, and therefore not specified.\n@@ -456,3 +476,5 @@\n-     * <p>  The method does not close this reader nor its underlying stream.\n-     * If an I\/O error occurs, the states of the reader and its underlying\n-     * stream are unspecified.\n+     * <p> If an I\/O error occurs reading from the stream, then it\n+     * may do so after some, but not all, characters have been read.\n+     * Consequently the stream may not be at end of stream and may\n+     * be in an inconsistent state. It is strongly recommended that the reader\n+     * be promptly closed if an I\/O error occurs.\n@@ -462,2 +484,3 @@\n-     * convenient to read all remaining characters into a String. It is not\n-     * intended for reading a large number of characters, for example, greater than 1G.\n+     * convenient to read all remaining characters into a {@code String}. It\n+     * is not intended for reading a large number of characters, for example,\n+     * greater than {@code 1G}.\n@@ -465,1 +488,1 @@\n-     * @return     a String containing all remaining characters\n+     * @return     a {@code String} containing all remaining characters\n@@ -468,2 +491,3 @@\n-     * @throws     OutOfMemoryError  If the number of remaining characters exceeds the\n-     *              implementation limit for String.\n+     * @throws     OutOfMemoryError  If the number of remaining characters\n+     *                               exceeds the implementation limit for\n+     *                               {@code String}.\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":48,"deletions":24,"binary":false,"changes":72,"status":"modified"}]}