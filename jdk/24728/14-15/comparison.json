{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.util.List;\n@@ -398,1 +397,0 @@\n-     * @see #readAllLines\n@@ -405,35 +403,0 @@\n-    \/**\n-     * Reads all remaining lines of text. A line is considered to be terminated\n-     * by any one of a line feed ('\\n'), a carriage return ('\\r'), a carriage\n-     * return followed immediately by a line feed, or by reaching the\n-     * end-of-file (EOF).\n-     *\n-     * <p> This method works as if invoking it were equivalent to evaluating\n-     * the expression:\n-     * <blockquote>{@linkplain #lines()}.toList()<\/blockquote>\n-     * The method does not close this reader nor its underlying stream.\n-     * If an I\/O error occurs, the states of the reader and its underlying\n-     * stream are unspecified.\n-     *\n-     * @apiNote\n-     * This method is intended for simple cases where it is convenient\n-     * to read all remaining lines in a single operation. It is not intended for\n-     * reading a large number of lines.\n-     *\n-     * @return     the remaining lines of text as an unmodifiable {@code List}\n-     *\n-     * @throws     IOException  If an I\/O error occurs\n-     *\n-     * @see java.nio.file.Files#readAllLines\n-     *\n-     * @since 25\n-     *\/\n-    public List<String> readAllLines() throws IOException {\n-        try {\n-            return lines().toList();\n-        } catch (UncheckedIOException ue) {\n-            \/\/ the cause cannot be null\n-            throw ue.getCause();\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedReader.java","additions":1,"deletions":38,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -211,1 +211,2 @@\n-            public String readAllChars() throws IOException {\n+            @Override\n+            public String readAllAsString() throws IOException {\n@@ -213,1 +214,8 @@\n-                return cs.toString().substring(next);\n+                String result = cs.toString().substring(next);\n+                next += result.length();\n+                return result;\n+            }\n+\n+            @Override\n+            public List<String> readAllLines() throws IOException {\n+                return readAllAsString().lines().toList();\n@@ -400,0 +408,10 @@\n+    private String readAllCharsAsString() throws IOException {\n+        StringBuilder result = new StringBuilder();\n+        char[] str = new char[TRANSFER_BUFFER_SIZE];\n+        int n;\n+        while ((n = read(str)) != -1) {\n+            result.append(str, 0, n);\n+        }\n+        return result.toString();\n+    }\n+\n@@ -404,1 +422,2 @@\n-     * end-of-file (EOF).\n+     * end-of-stream. There is no empty line following a line terminator at the\n+     * end of a stream.\n@@ -406,4 +425,1 @@\n-     * <p> This method works as if invoking it were equivalent to evaluating\n-     * the expression:\n-     * <blockquote>{@linkplain #readAllChars()}.lines().toList()<\/blockquote>\n-     * The method does not close this reader nor its underlying stream.\n+     * <p>  The method does not close this reader nor its underlying stream.\n@@ -423,0 +439,2 @@\n+     * @see String#lines\n+     * @see #readAllAsString\n@@ -428,1 +446,1 @@\n-        return readAllChars().lines().toList();\n+        return readAllCharsAsString().lines().toList();\n@@ -436,3 +454,5 @@\n-     * separators as they appear in the original content. The method does not\n-     * close this reader nor its underlying stream. If an I\/O error occurs,\n-     * the states of the reader and its underlying stream are unspecified.\n+     * separators as they appear in the original content.\n+     *\n+     * <p>  The method does not close this reader nor its underlying stream.\n+     * If an I\/O error occurs, the states of the reader and its underlying\n+     * stream are unspecified.\n@@ -451,0 +471,1 @@\n+     * @see #readAllLines\n@@ -455,8 +476,2 @@\n-    public String readAllChars() throws IOException {\n-        StringBuilder result = new StringBuilder();\n-        char[] str = new char[TRANSFER_BUFFER_SIZE];\n-        int n;\n-        while ((n = read(str)) != -1) {\n-            result.append(str, 0, n);\n-        }\n-        return result.toString();\n+    public String readAllAsString() throws IOException {\n+        return readAllCharsAsString();\n","filename":"src\/java.base\/share\/classes\/java\/io\/Reader.java","additions":34,"deletions":19,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @summary Test BufferedReader readAllLines and readString methods\n+ * @summary Test Reader readAllLines and readAllAstring methods\n@@ -33,1 +33,0 @@\n-import java.io.BufferedReader;\n@@ -88,1 +87,1 @@\n-        \/\/ BufferedReader implementation\n+        \/\/ Reader implementation\n@@ -90,2 +89,2 @@\n-        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n-            lines = br.readAllLines();\n+        try (FileReader fr = new FileReader(file)) {\n+            lines = fr.readAllLines();\n@@ -98,2 +97,7 @@\n-        \/\/ Reader implementation\n-        try (Reader r = new StringReader(Files.readString(path))) {\n+        \/\/ Reader.of implementation\n+        String stringExpected = Files.readString(path);\n+        int n = rnd.nextInt(stringExpected.length()\/2);\n+        String substringExpected = stringExpected.substring(n);\n+        linesExpected = substringExpected.lines().toList();\n+        try (Reader r = new StringReader(stringExpected)) {\n+            r.skip(n);\n@@ -106,1 +110,1 @@\n-    public void readAllChars() throws IOException {\n+    public void readAllAsString() throws IOException {\n@@ -110,1 +114,1 @@\n-            string = fr.readAllChars();\n+            string = fr.readAllAsString();\n@@ -119,1 +123,1 @@\n-            string = r.readAllChars();\n+            string = r.readAllAsString();\n","filename":"test\/jdk\/java\/io\/BufferedReader\/ReadAll.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"}]}