{"files":[{"patch":"@@ -3212,15 +3212,12 @@\n-\/\/ java_lang_reflect_Method\n-\n-int java_lang_reflect_Method::_clazz_offset;\n-int java_lang_reflect_Method::_name_offset;\n-int java_lang_reflect_Method::_returnType_offset;\n-int java_lang_reflect_Method::_parameterTypes_offset;\n-int java_lang_reflect_Method::_exceptionTypes_offset;\n-int java_lang_reflect_Method::_slot_offset;\n-int java_lang_reflect_Method::_modifiers_offset;\n-int java_lang_reflect_Method::_signature_offset;\n-int java_lang_reflect_Method::_annotations_offset;\n-int java_lang_reflect_Method::_parameter_annotations_offset;\n-int java_lang_reflect_Method::_annotation_default_offset;\n-\n-#define METHOD_FIELDS_DO(macro) \\\n+\/\/ java_lang_reflect_Executable\n+\n+int java_lang_reflect_Executable::_clazz_offset;\n+int java_lang_reflect_Executable::_slot_offset;\n+int java_lang_reflect_Executable::_parameterTypes_offset;\n+int java_lang_reflect_Executable::_exceptionTypes_offset;\n+int java_lang_reflect_Executable::_modifiers_offset;\n+int java_lang_reflect_Executable::_signature_offset;\n+int java_lang_reflect_Executable::_annotations_offset;\n+int java_lang_reflect_Executable::_parameter_annotations_offset;\n+\n+#define EXECUTABLE_FIELDS_DO(macro) \\\n@@ -3228,2 +3225,1 @@\n-  macro(_name_offset,           k, vmSymbols::name_name(),           string_signature,      false); \\\n-  macro(_returnType_offset,     k, vmSymbols::returnType_name(),     class_signature,       false); \\\n+  macro(_slot_offset,           k, vmSymbols::slot_name(),           int_signature,         false); \\\n@@ -3232,1 +3228,0 @@\n-  macro(_slot_offset,           k, vmSymbols::slot_name(),           int_signature,         false); \\\n@@ -3236,2 +3231,1 @@\n-  macro(_parameter_annotations_offset, k, vmSymbols::parameter_annotations_name(), byte_array_signature, false); \\\n-  macro(_annotation_default_offset,    k, vmSymbols::annotation_default_name(),    byte_array_signature, false);\n+  macro(_parameter_annotations_offset, k, vmSymbols::parameter_annotations_name(), byte_array_signature, false);\n@@ -3239,3 +3233,3 @@\n-void java_lang_reflect_Method::compute_offsets() {\n-  InstanceKlass* k = vmClasses::reflect_Method_klass();\n-  METHOD_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n+void java_lang_reflect_Executable::compute_offsets() {\n+  InstanceKlass* k = vmClasses::reflect_Executable_klass();\n+  EXECUTABLE_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n@@ -3245,2 +3239,2 @@\n-void java_lang_reflect_Method::serialize_offsets(SerializeClosure* f) {\n-  METHOD_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n+void java_lang_reflect_Executable::serialize_offsets(SerializeClosure* f) {\n+  EXECUTABLE_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n@@ -3250,7 +3244,2 @@\n-Handle java_lang_reflect_Method::create(TRAPS) {\n-  assert(Universe::is_fully_initialized(), \"Need to find another solution to the reflection problem\");\n-  Klass* klass = vmClasses::reflect_Method_klass();\n-  \/\/ This class is eagerly initialized during VM initialization, since we keep a reference\n-  \/\/ to one of the methods\n-  assert(InstanceKlass::cast(klass)->is_initialized(), \"must be initialized\");\n-  return InstanceKlass::cast(klass)->allocate_instance_handle(THREAD);\n+oop java_lang_reflect_Executable::clazz(oop executable) {\n+  return executable->obj_field(_clazz_offset);\n@@ -3259,2 +3248,2 @@\n-oop java_lang_reflect_Method::clazz(oop reflect) {\n-  return reflect->obj_field(_clazz_offset);\n+void java_lang_reflect_Executable::set_clazz(oop executable, oop value) {\n+   executable->obj_field_put(_clazz_offset, value);\n@@ -3263,2 +3252,2 @@\n-void java_lang_reflect_Method::set_clazz(oop reflect, oop value) {\n-   reflect->obj_field_put(_clazz_offset, value);\n+int java_lang_reflect_Executable::slot(oop executable) {\n+  return executable->int_field(_slot_offset);\n@@ -3267,2 +3256,2 @@\n-int java_lang_reflect_Method::slot(oop reflect) {\n-  return reflect->int_field(_slot_offset);\n+void java_lang_reflect_Executable::set_slot(oop executable, int value) {\n+  executable->int_field_put(_slot_offset, value);\n@@ -3271,14 +3260,2 @@\n-void java_lang_reflect_Method::set_slot(oop reflect, int value) {\n-  reflect->int_field_put(_slot_offset, value);\n-}\n-\n-void java_lang_reflect_Method::set_name(oop method, oop value) {\n-  method->obj_field_put(_name_offset, value);\n-}\n-\n-oop java_lang_reflect_Method::return_type(oop method) {\n-  return method->obj_field(_returnType_offset);\n-}\n-\n-void java_lang_reflect_Method::set_return_type(oop method, oop value) {\n-  method->obj_field_put(_returnType_offset, value);\n+oop java_lang_reflect_Executable::parameter_types(oop executable) {\n+  return executable->obj_field(_parameterTypes_offset);\n@@ -3287,2 +3264,2 @@\n-oop java_lang_reflect_Method::parameter_types(oop method) {\n-  return method->obj_field(_parameterTypes_offset);\n+void java_lang_reflect_Executable::set_parameter_types(oop executable, oop value) {\n+  executable->obj_field_put(_parameterTypes_offset, value);\n@@ -3291,2 +3268,2 @@\n-void java_lang_reflect_Method::set_parameter_types(oop method, oop value) {\n-  method->obj_field_put(_parameterTypes_offset, value);\n+void java_lang_reflect_Executable::set_exception_types(oop executable, oop value) {\n+  executable->obj_field_put(_exceptionTypes_offset, value);\n@@ -3295,2 +3272,2 @@\n-void java_lang_reflect_Method::set_exception_types(oop method, oop value) {\n-  method->obj_field_put(_exceptionTypes_offset, value);\n+void java_lang_reflect_Executable::set_modifiers(oop executable, int value) {\n+  executable->int_field_put(_modifiers_offset, value);\n@@ -3299,2 +3276,2 @@\n-void java_lang_reflect_Method::set_modifiers(oop method, int value) {\n-  method->int_field_put(_modifiers_offset, value);\n+void java_lang_reflect_Executable::set_signature(oop executable, oop value) {\n+  executable->obj_field_put(_signature_offset, value);\n@@ -3303,2 +3280,2 @@\n-void java_lang_reflect_Method::set_signature(oop method, oop value) {\n-  method->obj_field_put(_signature_offset, value);\n+void java_lang_reflect_Executable::set_annotations(oop executable, oop value) {\n+  executable->obj_field_put(_annotations_offset, value);\n@@ -3307,2 +3284,2 @@\n-void java_lang_reflect_Method::set_annotations(oop method, oop value) {\n-  method->obj_field_put(_annotations_offset, value);\n+void java_lang_reflect_Executable::set_parameter_annotations(oop executable, oop value) {\n+  executable->obj_field_put(_parameter_annotations_offset, value);\n@@ -3311,7 +3288,1 @@\n-void java_lang_reflect_Method::set_parameter_annotations(oop method, oop value) {\n-  method->obj_field_put(_parameter_annotations_offset, value);\n-}\n-\n-void java_lang_reflect_Method::set_annotation_default(oop method, oop value) {\n-  method->obj_field_put(_annotation_default_offset, value);\n-}\n+\/\/ java_lang_reflect_Method\n@@ -3319,8 +3290,3 @@\n-int java_lang_reflect_Constructor::_clazz_offset;\n-int java_lang_reflect_Constructor::_parameterTypes_offset;\n-int java_lang_reflect_Constructor::_exceptionTypes_offset;\n-int java_lang_reflect_Constructor::_slot_offset;\n-int java_lang_reflect_Constructor::_modifiers_offset;\n-int java_lang_reflect_Constructor::_signature_offset;\n-int java_lang_reflect_Constructor::_annotations_offset;\n-int java_lang_reflect_Constructor::_parameter_annotations_offset;\n+int java_lang_reflect_Method::_name_offset;\n+int java_lang_reflect_Method::_returnType_offset;\n+int java_lang_reflect_Method::_annotation_default_offset;\n@@ -3328,9 +3294,4 @@\n-#define CONSTRUCTOR_FIELDS_DO(macro) \\\n-  macro(_clazz_offset,          k, vmSymbols::clazz_name(),          class_signature,       false); \\\n-  macro(_parameterTypes_offset, k, vmSymbols::parameterTypes_name(), class_array_signature, false); \\\n-  macro(_exceptionTypes_offset, k, vmSymbols::exceptionTypes_name(), class_array_signature, false); \\\n-  macro(_slot_offset,           k, vmSymbols::slot_name(),           int_signature,         false); \\\n-  macro(_modifiers_offset,      k, vmSymbols::modifiers_name(),      int_signature,         false); \\\n-  macro(_signature_offset,             k, vmSymbols::signature_name(),             string_signature,     false); \\\n-  macro(_annotations_offset,           k, vmSymbols::annotations_name(),           byte_array_signature, false); \\\n-  macro(_parameter_annotations_offset, k, vmSymbols::parameter_annotations_name(), byte_array_signature, false);\n+#define METHOD_FIELDS_DO(macro) \\\n+  macro(_name_offset,           k, vmSymbols::name_name(),           string_signature,      false); \\\n+  macro(_returnType_offset,     k, vmSymbols::returnType_name(),     class_signature,       false); \\\n+  macro(_annotation_default_offset,    k, vmSymbols::annotation_default_name(),    byte_array_signature, false);\n@@ -3338,3 +3299,3 @@\n-void java_lang_reflect_Constructor::compute_offsets() {\n-  InstanceKlass* k = vmClasses::reflect_Constructor_klass();\n-  CONSTRUCTOR_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n+void java_lang_reflect_Method::compute_offsets() {\n+  InstanceKlass* k = vmClasses::reflect_Method_klass();\n+  METHOD_FIELDS_DO(FIELD_COMPUTE_OFFSET);\n@@ -3344,2 +3305,2 @@\n-void java_lang_reflect_Constructor::serialize_offsets(SerializeClosure* f) {\n-  CONSTRUCTOR_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n+void java_lang_reflect_Method::serialize_offsets(SerializeClosure* f) {\n+  METHOD_FIELDS_DO(FIELD_SERIALIZE_OFFSET);\n@@ -3349,1 +3310,1 @@\n-Handle java_lang_reflect_Constructor::create(TRAPS) {\n+Handle java_lang_reflect_Method::create(TRAPS) {\n@@ -3351,22 +3312,5 @@\n-  Symbol* name = vmSymbols::java_lang_reflect_Constructor();\n-  Klass* k = SystemDictionary::resolve_or_fail(name, true, CHECK_NH);\n-  InstanceKlass* ik = InstanceKlass::cast(k);\n-  \/\/ Ensure it is initialized\n-  ik->initialize(CHECK_NH);\n-  return ik->allocate_instance_handle(THREAD);\n-}\n-\n-oop java_lang_reflect_Constructor::clazz(oop reflect) {\n-  return reflect->obj_field(_clazz_offset);\n-}\n-\n-void java_lang_reflect_Constructor::set_clazz(oop reflect, oop value) {\n-   reflect->obj_field_put(_clazz_offset, value);\n-}\n-\n-oop java_lang_reflect_Constructor::parameter_types(oop constructor) {\n-  return constructor->obj_field(_parameterTypes_offset);\n-}\n-\n-void java_lang_reflect_Constructor::set_parameter_types(oop constructor, oop value) {\n-  constructor->obj_field_put(_parameterTypes_offset, value);\n+  Klass* klass = vmClasses::reflect_Method_klass();\n+  \/\/ This class is eagerly initialized during VM initialization, since we keep a reference\n+  \/\/ to one of the methods\n+  assert(InstanceKlass::cast(klass)->is_initialized(), \"must be initialized\");\n+  return InstanceKlass::cast(klass)->allocate_instance_handle(THREAD);\n@@ -3375,2 +3319,2 @@\n-void java_lang_reflect_Constructor::set_exception_types(oop constructor, oop value) {\n-  constructor->obj_field_put(_exceptionTypes_offset, value);\n+void java_lang_reflect_Method::set_name(oop method, oop value) {\n+  method->obj_field_put(_name_offset, value);\n@@ -3379,2 +3323,2 @@\n-int java_lang_reflect_Constructor::slot(oop reflect) {\n-  return reflect->int_field(_slot_offset);\n+oop java_lang_reflect_Method::return_type(oop method) {\n+  return method->obj_field(_returnType_offset);\n@@ -3383,2 +3327,2 @@\n-void java_lang_reflect_Constructor::set_slot(oop reflect, int value) {\n-  reflect->int_field_put(_slot_offset, value);\n+void java_lang_reflect_Method::set_return_type(oop method, oop value) {\n+  method->obj_field_put(_returnType_offset, value);\n@@ -3387,2 +3331,2 @@\n-void java_lang_reflect_Constructor::set_modifiers(oop constructor, int value) {\n-  constructor->int_field_put(_modifiers_offset, value);\n+void java_lang_reflect_Method::set_annotation_default(oop method, oop value) {\n+  method->obj_field_put(_annotation_default_offset, value);\n@@ -3391,3 +3335,1 @@\n-void java_lang_reflect_Constructor::set_signature(oop constructor, oop value) {\n-  constructor->obj_field_put(_signature_offset, value);\n-}\n+\/\/ java_lang_reflect_Constructor\n@@ -3395,2 +3337,7 @@\n-void java_lang_reflect_Constructor::set_annotations(oop constructor, oop value) {\n-  constructor->obj_field_put(_annotations_offset, value);\n+Handle java_lang_reflect_Constructor::create(TRAPS) {\n+  assert(Universe::is_fully_initialized(), \"Need to find another solution to the reflection problem\");\n+  Klass* k = vmClasses::reflect_Constructor_klass();\n+  InstanceKlass* ik = InstanceKlass::cast(k);\n+  \/\/ Ensure it is initialized\n+  ik->initialize(CHECK_NH);\n+  return ik->allocate_instance_handle(THREAD);\n@@ -3399,3 +3346,1 @@\n-void java_lang_reflect_Constructor::set_parameter_annotations(oop method, oop value) {\n-  method->obj_field_put(_parameter_annotations_offset, value);\n-}\n+\/\/ java_lang_reflect_Field\n@@ -5325,0 +5270,1 @@\n+  f(java_lang_reflect_Executable) \\\n@@ -5326,1 +5272,0 @@\n-  f(java_lang_reflect_Constructor) \\\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":78,"deletions":133,"binary":false,"changes":211,"status":"modified"},{"patch":"@@ -666,0 +666,1 @@\n+\/\/ Interface to java.lang.reflect.Executable objects\n@@ -667,3 +668,1 @@\n-\/\/ Interface to java.lang.reflect.Method objects\n-\n-class java_lang_reflect_Method : public java_lang_reflect_AccessibleObject {\n+class java_lang_reflect_Executable : public java_lang_reflect_AccessibleObject {\n@@ -674,2 +673,1 @@\n-  static int _name_offset;\n-  static int _returnType_offset;\n+  static int _slot_offset;\n@@ -678,1 +676,0 @@\n-  static int _slot_offset;\n@@ -683,0 +680,33 @@\n+\n+  static void compute_offsets();\n+ public:\n+  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;\n+\n+  \/\/ Accessors\n+  static oop clazz(oop executable);\n+  static void set_clazz(oop executable, oop value);\n+\n+  static int slot(oop executable);\n+  static void set_slot(oop executable, int value);\n+\n+  static oop parameter_types(oop executable);\n+  static void set_parameter_types(oop executable, oop value);\n+\n+  static void set_exception_types(oop executable, oop value);\n+  static void set_modifiers(oop executable, int value);\n+  static void set_signature(oop executable, oop value);\n+  static void set_annotations(oop executable, oop value);\n+  static void set_parameter_annotations(oop executable, oop value);\n+\n+  \/\/ Debugging\n+  friend class JavaClasses;\n+};\n+\n+\/\/ Interface to java.lang.reflect.Method objects\n+\n+class java_lang_reflect_Method : public java_lang_reflect_Executable {\n+ private:\n+  \/\/ Note that to reduce dependencies on the JDK we compute these\n+  \/\/ offsets at run-time.\n+  static int _name_offset;\n+  static int _returnType_offset;\n@@ -693,3 +723,0 @@\n-  static oop clazz(oop reflect);\n-  static void set_clazz(oop reflect, oop value);\n-\n@@ -700,12 +727,0 @@\n-\n-  static oop parameter_types(oop method);\n-  static void set_parameter_types(oop method, oop value);\n-\n-  static int slot(oop reflect);\n-  static void set_slot(oop reflect, int value);\n-\n-  static void set_exception_types(oop method, oop value);\n-  static void set_modifiers(oop method, int value);\n-  static void set_signature(oop method, oop value);\n-  static void set_annotations(oop method, oop value);\n-  static void set_parameter_annotations(oop method, oop value);\n@@ -721,1 +736,1 @@\n-class java_lang_reflect_Constructor : public java_lang_reflect_AccessibleObject {\n+class java_lang_reflect_Constructor : public java_lang_reflect_Executable {\n@@ -725,9 +740,0 @@\n-  static int _clazz_offset;\n-  static int _parameterTypes_offset;\n-  static int _exceptionTypes_offset;\n-  static int _slot_offset;\n-  static int _modifiers_offset;\n-  static int _signature_offset;\n-  static int _annotations_offset;\n-  static int _parameter_annotations_offset;\n-\n@@ -736,1 +742,0 @@\n-  static void serialize_offsets(SerializeClosure* f) NOT_CDS_RETURN;\n@@ -741,16 +746,0 @@\n-  \/\/ Accessors\n-  static oop clazz(oop reflect);\n-  static void set_clazz(oop reflect, oop value);\n-\n-  static oop parameter_types(oop constructor);\n-  static void set_parameter_types(oop constructor, oop value);\n-\n-  static int slot(oop reflect);\n-  static void set_slot(oop reflect, int value);\n-\n-  static void set_exception_types(oop constructor, oop value);\n-  static void set_modifiers(oop constructor, int value);\n-  static void set_signature(oop constructor, oop value);\n-  static void set_annotations(oop constructor, oop value);\n-  static void set_parameter_annotations(oop method, oop value);\n-\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":37,"deletions":48,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,0 +98,1 @@\n+  do_klass(reflect_Executable_klass,                    java_lang_reflect_Executable                          ) \\\n","filename":"src\/hotspot\/share\/classfile\/vmClassMacros.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -112,0 +112,1 @@\n+  template(java_lang_reflect_Executable,              \"java\/lang\/reflect\/Executable\")             \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -68,7 +68,0 @@\n-    private final Class<T>            clazz;\n-    private final int                 slot;\n-    private final Class<?>[]          parameterTypes;\n-    private final Class<?>[]          exceptionTypes;\n-    private final int                 modifiers;\n-    \/\/ Generics and annotations support\n-    private final transient String    signature;\n@@ -76,3 +69,1 @@\n-    private transient volatile ConstructorRepository genericInfo;\n-    private final byte[]              annotations;\n-    private final byte[]              parameterAnnotations;\n+    private volatile ConstructorRepository genericInfo;\n@@ -95,1 +86,1 @@\n-                ConstructorRepository.make(getSignature(),\n+                ConstructorRepository.make(signature,\n@@ -130,8 +121,2 @@\n-        this.clazz = declaringClass;\n-        this.parameterTypes = parameterTypes;\n-        this.exceptionTypes = checkedExceptions;\n-        this.modifiers = modifiers;\n-        this.slot = slot;\n-        this.signature = signature;\n-        this.annotations = annotations;\n-        this.parameterAnnotations = parameterAnnotations;\n+        super(declaringClass, parameterTypes, checkedExceptions, modifiers,\n+                slot, signature, annotations, parameterAnnotations);\n@@ -156,1 +141,1 @@\n-        Constructor<T> res = new Constructor<>(clazz,\n+        Constructor<T> res = new Constructor<>(getDeclaringClass(),\n@@ -202,10 +187,0 @@\n-    @Override\n-    boolean hasGenericInformation() {\n-        return (getSignature() != null);\n-    }\n-\n-    @Override\n-    byte[] getAnnotationBytes() {\n-        return annotations;\n-    }\n-\n@@ -217,0 +192,1 @@\n+    @SuppressWarnings(\"unchecked\")\n@@ -218,1 +194,1 @@\n-        return clazz;\n+        return (Class<T>) super.getDeclaringClass();\n@@ -236,1 +212,1 @@\n-        return modifiers;\n+        return super.getModifiers();\n@@ -247,23 +223,5 @@\n-      if (getSignature() != null) {\n-        return (TypeVariable<Constructor<T>>[])getGenericInfo().getTypeParameters();\n-      } else\n-          return (TypeVariable<Constructor<T>>[])GenericDeclRepository.EMPTY_TYPE_VARS;\n-    }\n-\n-\n-    @Override\n-    Class<?>[] getSharedParameterTypes() {\n-        return parameterTypes;\n-    }\n-\n-    @Override\n-    Class<?>[] getSharedExceptionTypes() {\n-        return exceptionTypes;\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public Class<?>[] getParameterTypes() {\n-        return parameterTypes.length == 0 ? parameterTypes : parameterTypes.clone();\n+        if (signature != null) {\n+            return (TypeVariable<Constructor<T>>[])getGenericInfo().getTypeParameters();\n+        } else {\n+            return (TypeVariable<Constructor<T>>[]) GenericDeclRepository.EMPTY_TYPE_VARS;\n+        }\n@@ -276,1 +234,1 @@\n-    public int getParameterCount() { return parameterTypes.length; }\n+    public int getParameterCount() { return super.getParameterCount(); }\n@@ -290,8 +248,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public Class<?>[] getExceptionTypes() {\n-        return exceptionTypes.length == 0 ? exceptionTypes : exceptionTypes.clone();\n-    }\n-\n@@ -376,1 +326,1 @@\n-        for (Class<?> parameterType : getSharedParameterTypes()) {\n+        for (Class<?> parameterType : parameterTypes) {\n@@ -574,17 +524,0 @@\n-    int getSlot() {\n-        return slot;\n-    }\n-\n-    String getSignature() {\n-        return signature;\n-    }\n-\n-    byte[] getRawAnnotations() {\n-        return annotations;\n-    }\n-\n-    byte[] getRawParameterAnnotations() {\n-        return parameterAnnotations;\n-    }\n-\n-\n@@ -617,1 +550,1 @@\n-        return sharedGetParameterAnnotations(parameterTypes, parameterAnnotations);\n+        return super.getParameterAnnotations();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Constructor.java","additions":16,"deletions":83,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,10 @@\n+    \/\/ all final fields are used by the VM\n+    final Class<?> clazz;\n+    final int slot;\n+    @Stable final Class<?>[] parameterTypes;\n+    @Stable final Class<?>[] exceptionTypes;\n+    final int modifiers;\n+    final String signature;\n+    @Stable final byte[] annotations;\n+    @Stable final byte[] parameterAnnotations;\n+\n@@ -58,6 +68,17 @@\n-    Executable() {}\n-\n-    \/**\n-     * Accessor method to allow code sharing\n-     *\/\n-    abstract byte[] getAnnotationBytes();\n+    Executable(Class<?> declaringClass,\n+               Class<?>[] parameterTypes,\n+               Class<?>[] checkedExceptions,\n+               int modifiers,\n+               int slot,\n+               String signature,\n+               byte[] annotations,\n+               byte[] parameterAnnotations) {\n+        this.clazz = declaringClass;\n+        this.parameterTypes = parameterTypes;\n+        this.exceptionTypes = checkedExceptions;\n+        this.modifiers = modifiers;\n+        this.slot = slot;\n+        this.signature = signature;\n+        this.annotations = annotations;\n+        this.parameterAnnotations = parameterAnnotations;\n+    }\n@@ -68,1 +89,3 @@\n-    abstract boolean hasGenericInformation();\n+    boolean hasGenericInformation() {\n+        return signature != null;\n+    }\n@@ -199,1 +222,3 @@\n-    public abstract Class<?> getDeclaringClass();\n+    public Class<?> getDeclaringClass() {\n+        return clazz;\n+    }\n@@ -211,1 +236,3 @@\n-    public abstract int getModifiers();\n+    public int getModifiers() {\n+        return modifiers;\n+    }\n@@ -244,8 +271,0 @@\n-    \/\/ returns shared array of parameter types - must never give it out\n-    \/\/ to the untrusted code...\n-    abstract Class<?>[] getSharedParameterTypes();\n-\n-    \/\/ returns shared array of exception types - must never give it out\n-    \/\/ to the untrusted code...\n-    abstract Class<?>[] getSharedExceptionTypes();\n-\n@@ -269,1 +288,3 @@\n-    public abstract Class<?>[] getParameterTypes();\n+    public Class<?>[] getParameterTypes() {\n+        return parameterTypes.length == 0 ? parameterTypes : parameterTypes.clone();\n+    }\n@@ -279,1 +300,3 @@\n-    public abstract int getParameterCount();\n+    public int getParameterCount() {\n+        return parameterTypes.length;\n+    }\n@@ -354,1 +377,1 @@\n-            final Type[] nonGenericParamTypes = getSharedParameterTypes();\n+            final Type[] nonGenericParamTypes = parameterTypes;\n@@ -510,1 +533,3 @@\n-    public abstract Class<?>[] getExceptionTypes();\n+    public Class<?>[] getExceptionTypes() {\n+        return exceptionTypes.length == 0 ? exceptionTypes : exceptionTypes.clone();\n+    }\n@@ -601,4 +626,1 @@\n-    public abstract Annotation[][] getParameterAnnotations();\n-\n-    Annotation[][] sharedGetParameterAnnotations(Class<?>[] parameterTypes,\n-                                                 byte[] parameterAnnotations) {\n+    public Annotation[][] getParameterAnnotations() {\n@@ -668,1 +690,1 @@\n-                                getAnnotationBytes(),\n+                                annotations,\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Executable.java","additions":49,"deletions":27,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -73,16 +73,6 @@\n-    private final Class<?>            clazz;\n-    private final int                 slot;\n-    \/\/ This is guaranteed to be interned by the VM in the 1.4\n-    \/\/ reflection implementation\n-    private final String              name;\n-    private final Class<?>            returnType;\n-    private final Class<?>[]          parameterTypes;\n-    private final Class<?>[]          exceptionTypes;\n-    private final int                 modifiers;\n-    \/\/ Generics and annotations support\n-    private final transient String    signature;\n-    \/\/ generic info repository; lazily initialized\n-    private transient volatile MethodRepository genericInfo;\n-    private final byte[]              annotations;\n-    private final byte[]              parameterAnnotations;\n-    private final byte[]              annotationDefault;\n+    \/\/ all final fields are used by the VM\n+    private final String name; \/\/ interned in hotspot\n+    private final Class<?> returnType;\n+    private @Stable final byte[] annotationDefault;\n+\n+    private volatile MethodRepository genericInfo;\n@@ -138,1 +128,2 @@\n-        this.clazz = declaringClass;\n+        super(declaringClass, parameterTypes, checkedExceptions, modifiers,\n+                slot, signature, annotations, parameterAnnotations);\n@@ -140,1 +131,0 @@\n-        this.parameterTypes = parameterTypes;\n@@ -142,6 +132,0 @@\n-        this.exceptionTypes = checkedExceptions;\n-        this.modifiers = modifiers;\n-        this.slot = slot;\n-        this.signature = signature;\n-        this.annotations = annotations;\n-        this.parameterAnnotations = parameterAnnotations;\n@@ -213,10 +197,0 @@\n-    @Override\n-    boolean hasGenericInformation() {\n-        return (getGenericSignature() != null);\n-    }\n-\n-    @Override\n-    byte[] getAnnotationBytes() {\n-        return annotations;\n-    }\n-\n@@ -229,1 +203,1 @@\n-        return clazz;\n+        return super.getDeclaringClass();\n@@ -247,1 +221,1 @@\n-        return modifiers;\n+        return super.getModifiers();\n@@ -305,18 +279,0 @@\n-    @Override\n-    Class<?>[] getSharedParameterTypes() {\n-        return parameterTypes;\n-    }\n-\n-    @Override\n-    Class<?>[] getSharedExceptionTypes() {\n-        return exceptionTypes;\n-    }\n-\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public Class<?>[] getParameterTypes() {\n-        return parameterTypes.length == 0 ? parameterTypes: parameterTypes.clone();\n-    }\n-\n@@ -327,1 +283,1 @@\n-    public int getParameterCount() { return parameterTypes.length; }\n+    public int getParameterCount() { return super.getParameterCount(); }\n@@ -342,8 +298,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n-    @Override\n-    public Class<?>[] getExceptionTypes() {\n-        return exceptionTypes.length == 0 ? exceptionTypes : exceptionTypes.clone();\n-    }\n-\n@@ -445,1 +393,1 @@\n-        for (Class<?> parameterType : getSharedParameterTypes()) {\n+        for (Class<?> parameterType : parameterTypes) {\n@@ -819,1 +767,1 @@\n-        return sharedGetParameterAnnotations(parameterTypes, parameterAnnotations);\n+        return super.getParameterAnnotations();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Method.java","additions":13,"deletions":65,"binary":false,"changes":78,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -237,1 +237,1 @@\n-            tmp = executable.getSharedParameterTypes()[index];\n+            tmp = executable.parameterTypes[index];\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Parameter.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -732,2 +732,2 @@\n-                        addElementTypes(types, m.getSharedParameterTypes());\n-                        addElementTypes(types, m.getSharedExceptionTypes());\n+                        addElementTypes(types, m.parameterTypes);\n+                        addElementTypes(types, m.exceptionTypes);\n@@ -1257,1 +1257,1 @@\n-                        Method m = proxyIntf.getMethod(method.getName(), method.getSharedParameterTypes());\n+                        Method m = proxyIntf.getMethod(method.getName(), method.parameterTypes);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -508,1 +508,1 @@\n-        Class<?>[] exceptionTypes = m.getSharedExceptionTypes();\n+        Class<?>[] exceptionTypes = m.exceptionTypes;\n@@ -529,1 +529,1 @@\n-        sigmethods.add(new ProxyMethod(m, sig, m.getSharedParameterTypes(), returnType,\n+        sigmethods.add(new ProxyMethod(m, sig, m.parameterTypes, returnType,\n@@ -680,2 +680,2 @@\n-                 method.getSharedParameterTypes(), method.getReturnType(),\n-                 method.getSharedExceptionTypes(), method.getDeclaringClass(), methodFieldName);\n+                 method.parameterTypes, method.getReturnType(),\n+                 method.exceptionTypes, method.getDeclaringClass(), methodFieldName);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,1 @@\n-        return c.getSlot();\n+        return c.slot;\n@@ -78,1 +78,1 @@\n-        return c.getSignature();\n+        return c.signature;\n@@ -82,1 +82,1 @@\n-        return c.getRawAnnotations();\n+        return c.annotations;\n@@ -86,1 +86,1 @@\n-        return c.getRawParameterAnnotations();\n+        return c.parameterAnnotations;\n@@ -94,1 +94,1 @@\n-        return ex.getSharedParameterTypes();\n+        return ex.parameterTypes;\n@@ -98,1 +98,1 @@\n-        return ex.getSharedExceptionTypes();\n+        return ex.exceptionTypes;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ReflectAccess.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}