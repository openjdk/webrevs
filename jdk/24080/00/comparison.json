{"files":[{"patch":"@@ -13,0 +13,1 @@\n+import java.nio.file.Path;\n@@ -769,1 +770,5 @@\n-    void editAndAddInBuffer(File file) throws Exception;\n+    default void editAndAddInBuffer(File file) throws Exception {\n+        editAndAddInBuffer(file != null ? file.toPath() : null);\n+    }\n+\n+    void editAndAddInBuffer(Path file) throws Exception;\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/reader\/LineReader.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -22,0 +22,5 @@\n+    public UserInterruptException(Throwable cause) {\n+        super(cause);\n+        this.partialLine = null;\n+    }\n+\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/reader\/UserInterruptException.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+        boolean first = true;\n@@ -68,0 +69,1 @@\n+        commandStyle(reader, sb, true);\n@@ -80,0 +82,4 @@\n+            if (first && Character.isSpaceChar(c)) {\n+                first = false;\n+                commandStyle(reader, sb, false);\n+            }\n@@ -108,0 +114,2 @@\n+\n+    protected void commandStyle(LineReader reader, AttributedStringBuilder sb, boolean enable) {}\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/reader\/impl\/DefaultHighlighter.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -13,1 +13,0 @@\n-import java.io.FileReader;\n@@ -1134,1 +1133,1 @@\n-    public void editAndAddInBuffer(File file) throws Exception {\n+    public void editAndAddInBuffer(Path file) throws Exception {\n@@ -1138,2 +1137,2 @@\n-        Constructor<?> ctor = Class.forName(\"org.jline.builtins.Nano\").getConstructor(Terminal.class, File.class);\n-        Editor editor = (Editor) ctor.newInstance(terminal, new File(file.getParent()));\n+        Constructor<?> ctor = Class.forName(\"org.jline.builtins.Nano\").getConstructor(Terminal.class, Path.class);\n+        Editor editor = (Editor) ctor.newInstance(terminal, file.getParent());\n@@ -1141,1 +1140,1 @@\n-        editor.open(Collections.singletonList(file.getName()));\n+        editor.open(Collections.singletonList(file.getFileName().toString()));\n@@ -1143,1 +1142,1 @@\n-        try (BufferedReader br = new BufferedReader(new FileReader(file))) {\n+        try (BufferedReader br = Files.newBufferedReader(file)) {\n@@ -3532,1 +3531,1 @@\n-        } else if (yankBuffer.length() != 0) {\n+        } else if (!yankBuffer.isEmpty()) {\n@@ -3550,1 +3549,1 @@\n-        } else if (yankBuffer.length() != 0) {\n+        } else if (!yankBuffer.isEmpty()) {\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/reader\/impl\/LineReaderImpl.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -12,0 +12,2 @@\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n@@ -27,0 +29,1 @@\n+    private Map<String, String> descriptions = new HashMap<>();\n@@ -127,0 +130,4 @@\n+        compile(s -> new Candidate(AttributedString.stripAnsi(s), s, null, null, null, null, true));\n+    }\n+\n+    public void compile(Function<String, Candidate> candidateBuilder) {\n@@ -142,1 +149,1 @@\n-        commands = new StringsCompleter(cmds);\n+        commands = new StringsCompleter(cmds.stream().map(candidateBuilder).collect(Collectors.toList()));\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/reader\/impl\/completer\/SystemCompleter.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -203,1 +203,1 @@\n-            path.toFile().delete();\n+            Files.deleteIfExists(path);\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/reader\/impl\/history\/DefaultHistory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -212,0 +212,6 @@\n+    \/**\n+     * Forces the usage of the give terminal provider.\n+     *\n+     * @param provider The {@link TerminalProvider}'s name to use when creating the Terminal.\n+     * @return The builder.\n+     *\/\n@@ -217,0 +223,8 @@\n+    \/**\n+     * Sets the list of providers to try when creating the terminal.\n+     * If not specified, the system property {@link #PROP_PROVIDERS} will be used if set.\n+     * Else, the value {@link #PROP_PROVIDERS_DEFAULT} will be used.\n+     *\n+     * @param providers The list of {@link TerminalProvider}'s names to check when creating the Terminal.\n+     * @return The builder.\n+     *\/\n@@ -222,0 +236,5 @@\n+    \/**\n+     * Enables or disables the {@link #PROP_PROVIDER_JNA}\/{@code jna} terminal provider.\n+     * If not specified, the system property {@link #PROP_JNA} will be used if set.\n+     * If not specified, the provider will be checked.\n+     *\/\n@@ -227,0 +246,5 @@\n+    \/**\n+     * Enables or disables the {@link #PROP_PROVIDER_JANSI}\/{@code jansi} terminal provider.\n+     * If not specified, the system property {@link #PROP_JANSI} will be used if set.\n+     * If not specified, the provider will be checked.\n+     *\/\n@@ -232,0 +256,5 @@\n+    \/**\n+     * Enables or disables the {@link #PROP_PROVIDER_JNI}\/{@code jni} terminal provider.\n+     * If not specified, the system property {@link #PROP_JNI} will be used if set.\n+     * If not specified, the provider will be checked.\n+     *\/\n@@ -237,0 +266,5 @@\n+    \/**\n+     * Enables or disables the {@link #PROP_PROVIDER_EXEC}\/{@code exec} terminal provider.\n+     * If not specified, the system property {@link #PROP_EXEC} will be used if set.\n+     * If not specified, the provider will be checked.\n+     *\/\n@@ -242,0 +276,5 @@\n+    \/**\n+     * Enables or disables the {@link #PROP_PROVIDER_FFM}\/{@code ffm} terminal provider.\n+     * If not specified, the system property {@link #PROP_FFM} will be used if set.\n+     * If not specified, the provider will be checked.\n+     *\/\n@@ -247,0 +286,5 @@\n+    \/**\n+     * Enables or disables the {@link #PROP_PROVIDER_DUMB}\/{@code dumb} terminal provider.\n+     * If not specified, the system property {@link #PROP_DUMB} will be used if set.\n+     * If not specified, the provider will be checked.\n+     *\/\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/terminal\/TerminalBuilder.java","additions":44,"deletions":0,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -97,0 +97,9 @@\n+\n+    @Override\n+    public String toString() {\n+        return getKind() + \"[\" + \"name='\"\n+                + name + '\\'' + \", pty='\"\n+                + pty + '\\'' + \", type='\"\n+                + type + '\\'' + \", size='\"\n+                + getSize() + '\\'' + ']';\n+    }\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/AbstractPosixTerminal.java","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -290,0 +290,8 @@\n+\n+    @Override\n+    public String toString() {\n+        return getKind() + \"[\" + \"name='\"\n+                + name + '\\'' + \", type='\"\n+                + type + '\\'' + \", size='\"\n+                + getSize() + '\\'' + ']';\n+    }\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/AbstractTerminal.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -13,1 +13,1 @@\n-import java.util.ServiceLoader;\n+import java.util.Arrays;\n@@ -27,1 +27,1 @@\n-        diag(System.out);\n+        diag(System.out, Arrays.asList(args).contains(\"--verbose\"));\n@@ -31,0 +31,16 @@\n+        diag(out, true);\n+    }\n+\n+    public static void diag(PrintStream out, boolean verbose) {\n+        new Diag(out, verbose).run();\n+    }\n+\n+    private final PrintStream out;\n+    private final boolean verbose;\n+\n+    public Diag(PrintStream out, boolean verbose) {\n+        this.out = out;\n+        this.verbose = verbose;\n+    }\n+\n+    public void run() {\n@@ -59,1 +75,1 @@\n-            testProvider(out, provider);\n+            testProvider(provider);\n@@ -61,1 +77,1 @@\n-            out.println(\"FFM support not available: \" + t);\n+            error(\"FFM support not available\", t);\n@@ -69,1 +85,1 @@\n-            testProvider(out, provider);\n+            testProvider(provider);\n@@ -71,1 +87,1 @@\n-            out.println(\"JNA support not available: \" + t);\n+            error(\"JNA support not available\", t);\n@@ -79,1 +95,1 @@\n-            testProvider(out, provider);\n+            testProvider(provider);\n@@ -81,1 +97,1 @@\n-            out.println(\"Jansi 2 support not available: \" + t);\n+            error(\"Jansi 2 support not available\", t);\n@@ -89,1 +105,1 @@\n-            testProvider(out, provider);\n+            testProvider(provider);\n@@ -91,1 +107,1 @@\n-            out.println(\"JNI support not available: \" + t);\n+            error(\"JNI support not available\", t);\n@@ -100,1 +116,1 @@\n-            testProvider(out, provider);\n+            testProvider(provider);\n@@ -102,1 +118,6 @@\n-            out.println(\"Exec support not available: \" + t);\n+            error(\"Exec support not available\", t);\n+        }\n+\n+        if (!verbose) {\n+            out.println();\n+            out.println(\"Run with --verbose argument to print stack traces\");\n@@ -106,1 +127,1 @@\n-    private static void testProvider(PrintStream out, TerminalProvider provider) {\n+    private void testProvider(TerminalProvider provider) {\n@@ -111,2 +132,2 @@\n-        } catch (Throwable t2) {\n-            out.println(\"Unable to check stream: \" + t2);\n+        } catch (Throwable t) {\n+            error(\"Unable to check stream\", t);\n@@ -118,2 +139,2 @@\n-        } catch (Throwable t2) {\n-            out.println(\"Unable to check stream names: \" + t2);\n+        } catch (Throwable t) {\n+            error(\"Unable to check stream names\", t);\n@@ -135,3 +156,8 @@\n-                    ForkJoinTask<Integer> t =\n-                            new ForkJoinPool(1).submit(() -> terminal.reader().read(1));\n-                    int r = t.get(1000, TimeUnit.MILLISECONDS);\n+                    ForkJoinPool forkJoinPool = new ForkJoinPool(1);\n+                    try {\n+                        ForkJoinTask<Integer> t =\n+                                forkJoinPool.submit(() -> terminal.reader().read(1));\n+                        t.get(1000, TimeUnit.MILLISECONDS);\n+                    } finally {\n+                        forkJoinPool.shutdown();\n+                    }\n@@ -149,3 +175,2 @@\n-                } catch (Throwable t3) {\n-                    out.println(\"Unable to read from terminal: \" + t3);\n-                    t3.printStackTrace();\n+                } catch (Throwable t2) {\n+                    error(\"Unable to read from terminal\", t2);\n@@ -158,3 +183,2 @@\n-        } catch (Throwable t2) {\n-            out.println(\"Unable to open terminal: \" + t2);\n-            t2.printStackTrace();\n+        } catch (Throwable t) {\n+            error(\"Unable to open terminal\", t);\n@@ -164,2 +188,7 @@\n-    static <S> S load(Class<S> clazz) {\n-        return ServiceLoader.load(clazz, clazz.getClassLoader()).iterator().next();\n+    private void error(String message, Throwable cause) {\n+        if (verbose) {\n+            out.println(message);\n+            cause.printStackTrace(out);\n+        } else {\n+            out.println(message + \": \" + cause);\n+        }\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/Diag.java","additions":57,"deletions":28,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -281,1 +281,1 @@\n-        throw new IOException(\"Unable to parse \" + name);\n+        return 0;\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/exec\/ExecPty.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,3 @@\n+        if (!isSystemStream(systemStream)) {\n+            throw new IOException(\"Not a system stream: \" + systemStream);\n+        }\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/exec\/ExecTerminalProvider.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -22,1 +22,1 @@\n-    public static final int INVALID_HANDLE_VALUE = -1;\n+    public static final long INVALID_HANDLE_VALUE = -1;\n@@ -238,2 +238,2 @@\n-            return (int)\n-                    mh$.invokeExact(hConsoleOutput, lpScrollRectangle.seg, lpClipRectangle.seg, dwDestinationOrigin.seg, lpFill.seg);\n+            return (int) mh$.invokeExact(\n+                    hConsoleOutput, lpScrollRectangle.seg, lpClipRectangle.seg, dwDestinationOrigin.seg, lpFill.seg);\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/ffm\/Kernel32.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -86,1 +86,1 @@\n-                int m = inMode.get(java.lang.foreign.ValueLayout.JAVA_INT, 0);\n+                int m = outMode.get(java.lang.foreign.ValueLayout.JAVA_INT, 0);\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/terminal\/impl\/ffm\/NativeWinSysTerminal.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -222,1 +222,2 @@\n-                    rawPrint(new AttributedString(\" \\b\"));\n+                    rawPrint(' ');\n+                    terminal.puts(Capability.key_backspace);\n@@ -322,1 +323,2 @@\n-                        terminal.writer().write(\" \\b\");\n+                        rawPrint(' ');\n+                        terminal.puts(Capability.key_backspace);\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/utils\/Display.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -25,2 +25,1 @@\n-\/**\n- *\n+\/*\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/utils\/InputStreamReader.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -51,1 +51,2 @@\n-                && terminal.getStringCapability(Capability.cursor_address) != null;\n+                && terminal.getStringCapability(Capability.cursor_address) != null\n+                && isValid(terminal.getSize());\n@@ -60,0 +61,4 @@\n+    private boolean isValid(Size size) {\n+        return size.getRows() > 0 && size.getRows() < 1000 && size.getColumns() > 0 && size.getColumns() < 1000;\n+    }\n+\n@@ -150,0 +155,1 @@\n+            terminal.puts(Capability.cursor_address, scrollRegion, 0);\n","filename":"src\/jdk.internal.le\/share\/classes\/jdk\/internal\/org\/jline\/utils\/Status.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-## JLine v3.26.1\n+## JLine v3.29.0\n","filename":"src\/jdk.internal.le\/share\/legal\/jline.md","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}