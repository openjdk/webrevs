{"files":[{"patch":"@@ -4009,0 +4009,7 @@\n+    } else if (n->is_CallLeaf()) {\n+      \/\/ Runtime calls with narrow memory input (no MergeMem node)\n+      \/\/ get the memory projection\n+      n = n->as_Call()->proj_out_or_null(TypeFunc::Memory);\n+      if (n == nullptr) {\n+        continue;\n+      }\n@@ -4051,1 +4058,1 @@\n-      } else if (use->is_MemBar()) {\n+      } else if (use->is_MemBar() || use->is_CallLeaf()) {\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -4864,0 +4864,22 @@\n+static bool has_wide_mem(PhaseGVN& gvn, Node* addr, Node* base) {\n+  const TypeAryPtr* addr_t = gvn.type(addr)->isa_aryptr();\n+  const Type*       base_t = gvn.type(base);\n+\n+  bool in_native = (base_t == TypePtr::NULL_PTR);\n+  bool in_heap   = !TypePtr::NULL_PTR->higher_equal(base_t);\n+  bool is_mixed  = !in_heap && !in_native;\n+\n+  if (is_mixed) {\n+    return true; \/\/ mixed accesses can touch both on-heap and off-heap memory\n+  }\n+  if (in_heap) {\n+    bool is_prim_array = (addr_t != nullptr) && (addr_t->elem() != Type::BOTTOM);\n+    if (!is_prim_array) {\n+      \/\/ Though Unsafe.copyMemory() ensures at runtime for on-heap accesses that base is a primitive array,\n+      \/\/ there's not enough type information available to determine proper memory slice for it.\n+      return true;\n+    }\n+  }\n+  return false;\n+}\n+\n@@ -4891,0 +4913,15 @@\n+  int flags = RC_LEAF | RC_NO_FP;\n+\n+  const TypePtr* dst_type = TypePtr::BOTTOM;\n+\n+  \/\/ Adjust memory effects of the runtime call based on input values.\n+  if (!has_wide_mem(_gvn, src_addr, src_base) &&\n+      !has_wide_mem(_gvn, dst_addr, dst_base)) {\n+    dst_type = _gvn.type(dst_addr)->is_ptr(); \/\/ narrow out memory\n+\n+    const TypePtr* src_type = _gvn.type(src_addr)->is_ptr();\n+    if (C->get_alias_index(src_type) == C->get_alias_index(dst_type)) {\n+      flags |= RC_NARROW_MEM; \/\/ narrow in memory\n+    }\n+  }\n+\n@@ -4892,1 +4929,1 @@\n-  make_runtime_call(RC_LEAF | RC_NO_FP,\n+  make_runtime_call(flags,\n@@ -4896,1 +4933,1 @@\n-                    TypePtr::BOTTOM,\n+                    dst_type,\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":39,"deletions":2,"binary":false,"changes":41,"status":"modified"}]}