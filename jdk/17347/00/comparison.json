{"files":[{"patch":"@@ -4864,22 +4864,0 @@\n-static bool has_wide_mem(PhaseGVN& gvn, Node* addr, Node* base) {\n-  const TypeAryPtr* addr_t = gvn.type(addr)->isa_aryptr();\n-  const Type*       base_t = gvn.type(base);\n-\n-  bool in_native = (base_t == TypePtr::NULL_PTR);\n-  bool in_heap   = !TypePtr::NULL_PTR->higher_equal(base_t);\n-  bool is_mixed  = !in_heap && !in_native;\n-\n-  if (is_mixed) {\n-    return true; \/\/ mixed accesses can touch both on-heap and off-heap memory\n-  }\n-  if (in_heap) {\n-    bool is_prim_array = (addr_t != nullptr) && (addr_t->elem() != Type::BOTTOM);\n-    if (!is_prim_array) {\n-      \/\/ Though Unsafe.copyMemory() ensures at runtime for on-heap accesses that base is a primitive array,\n-      \/\/ there's not enough type information available to determine proper memory slice for it.\n-      return true;\n-    }\n-  }\n-  return false;\n-}\n-\n@@ -4913,15 +4891,0 @@\n-  int flags = RC_LEAF | RC_NO_FP;\n-\n-  const TypePtr* dst_type = TypePtr::BOTTOM;\n-\n-  \/\/ Adjust memory effects of the runtime call based on input values.\n-  if (!has_wide_mem(_gvn, src_addr, src_base) &&\n-      !has_wide_mem(_gvn, dst_addr, dst_base)) {\n-    dst_type = _gvn.type(dst_addr)->is_ptr(); \/\/ narrow out memory\n-\n-    const TypePtr* src_type = _gvn.type(src_addr)->is_ptr();\n-    if (C->get_alias_index(src_type) == C->get_alias_index(dst_type)) {\n-      flags |= RC_NARROW_MEM; \/\/ narrow in memory\n-    }\n-  }\n-\n@@ -4929,1 +4892,1 @@\n-  make_runtime_call(flags,\n+  make_runtime_call(RC_LEAF | RC_NO_FP,\n@@ -4933,1 +4896,1 @@\n-                    dst_type,\n+                    TypePtr::BOTTOM,\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":2,"deletions":39,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,67 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8316756\n+ * @summary Test UNSAFE.copyMemory in combination with Escape Analysis\n+ * @library \/test\/lib\n+ *\n+ * @modules java.base\/jdk.internal.misc\n+ *\n+ * @run main\/othervm -XX:-TieredCompilation -Xbatch -XX:CompileCommand=quiet -XX:CompileCommand=compileonly,compiler.unsafe.UnsafeArrayCopy::test\n+ *                   compiler.unsafe.UnsafeArrayCopy\n+ *\/\n+\n+package compiler.unsafe;\n+\n+import java.lang.reflect.*;\n+import java.util.*;\n+\n+import jdk.internal.misc.Unsafe;\n+\n+\n+public class UnsafeArrayCopy {\n+\n+    private static Unsafe UNSAFE = Unsafe.getUnsafe();\n+\n+    static long SRC_BASE = UNSAFE.allocateMemory(4);\n+    static long DST_BASE = UNSAFE.allocateMemory(4);\n+\n+    static class MyClass {\n+        int x;\n+    }\n+\n+    static int test() {\n+        MyClass obj = new MyClass(); \/\/ Non-escaping to trigger Escape Analysis\n+        UNSAFE.copyMemory(null, SRC_BASE, null, DST_BASE, 4);\n+        obj.x = 42;\n+        return obj.x;\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 50_000; ++i) {\n+            test();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/unsafe\/UnsafeArrayCopy.java","additions":67,"deletions":0,"binary":false,"changes":67,"status":"added"}]}