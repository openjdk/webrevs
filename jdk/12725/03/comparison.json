{"files":[{"patch":"@@ -1909,1 +1909,1 @@\n-    __ cmgt($dst$$FloatRegister, __ T2D, $src1$$FloatRegister, $src2$$FloatRegister);\n+    __ cm(Assembler::GT, $dst$$FloatRegister, __ T2D, $src1$$FloatRegister, $src2$$FloatRegister);\n@@ -1996,1 +1996,1 @@\n-    __ cmgt($dst$$FloatRegister, __ T2D, $src1$$FloatRegister, $src2$$FloatRegister);\n+    __ cm(Assembler::GT, $dst$$FloatRegister, __ T2D, $src1$$FloatRegister, $src2$$FloatRegister);\n@@ -5131,0 +5131,1 @@\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -5134,2 +5135,1 @@\n-                    $src2$$FloatRegister, (int)($cond$$constant),\n-                    \/* isQ *\/ length_in_bytes == 16);\n+                    $src2$$FloatRegister, condition, \/* isQ *\/ length_in_bytes == 16);\n@@ -5201,0 +5201,1 @@\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -5205,1 +5206,1 @@\n-                   $src2$$FloatRegister, (int)($cond$$constant));\n+                   $src2$$FloatRegister, condition);\n@@ -5217,0 +5218,1 @@\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -5219,1 +5221,1 @@\n-                   $src2$$FloatRegister, (int)($cond$$constant));\n+                   $src2$$FloatRegister, condition);\n@@ -5879,0 +5881,1 @@\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -5883,2 +5886,1 @@\n-                    $src2$$FloatRegister, (int)($cond$$constant),\n-                    \/* isQ *\/ length_in_bytes == 16);\n+                    $src2$$FloatRegister, condition, \/* isQ *\/ length_in_bytes == 16);\n@@ -5900,0 +5902,1 @@\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -5903,1 +5906,1 @@\n-                   $src2$$FloatRegister, (int)($cond$$constant));\n+                   $src2$$FloatRegister, condition);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector.ad","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1004,1 +1004,1 @@\n-    __ cmgt($dst$$FloatRegister, __ T2D, $src1$$FloatRegister, $src2$$FloatRegister);\n+    __ cm(Assembler::GT, $dst$$FloatRegister, __ T2D, $src1$$FloatRegister, $src2$$FloatRegister);\n@@ -3547,0 +3547,1 @@\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -3550,2 +3551,1 @@\n-                    $src2$$FloatRegister, (int)($cond$$constant),\n-                    \/* isQ *\/ length_in_bytes == 16);\n+                    $src2$$FloatRegister, condition, \/* isQ *\/ length_in_bytes == 16);\n@@ -3598,0 +3598,1 @@\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -3602,1 +3603,1 @@\n-                   $src2$$FloatRegister, (int)($cond$$constant));\n+                   $src2$$FloatRegister, condition);\n@@ -3614,0 +3615,1 @@\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -3616,1 +3618,1 @@\n-                   $src2$$FloatRegister, (int)($cond$$constant));\n+                   $src2$$FloatRegister, condition);\n@@ -4232,0 +4234,1 @@\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -4236,2 +4239,1 @@\n-                    $src2$$FloatRegister, (int)($cond$$constant),\n-                    \/* isQ *\/ length_in_bytes == 16);\n+                    $src2$$FloatRegister, condition, \/* isQ *\/ length_in_bytes == 16);\n@@ -4253,0 +4255,1 @@\n+    Assembler::Condition condition = to_assembler_cond((BoolTest::mask)$cond$$constant);\n@@ -4256,1 +4259,1 @@\n-                   $src2$$FloatRegister, (int)($cond$$constant));\n+                   $src2$$FloatRegister, condition);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64_vector_ad.m4","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2623,5 +2623,0 @@\n-  INSN(cmeq,   1, 0b100011, true);  \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n-  INSN(cmgt,   0, 0b001101, true);  \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n-  INSN(cmge,   0, 0b001111, true);  \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n-  INSN(cmhi,   1, 0b001101, true);  \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n-  INSN(cmhs,   1, 0b001111, true);  \/\/ accepted arrangements: T8B, T16B, T4H, T8H, T2S, T4S, T2D\n@@ -2733,3 +2728,0 @@\n-  INSN(fcmeq, 0, 0, 0b111001);\n-  INSN(fcmgt, 1, 1, 0b111001);\n-  INSN(fcmge, 1, 0, 0b111001);\n@@ -3187,0 +3179,40 @@\n+  \/\/ AdvSIMD vector compare\n+  void cm(Condition cond, FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, FloatRegister Vm) {\n+    starti;\n+    assert(T != T1Q && T != T1D, \"incorrect arrangement\");\n+    int cond_op;\n+    switch (cond) {\n+      case EQ: cond_op = 0b110001; break;\n+      case GT: cond_op = 0b000110; break;\n+      case GE: cond_op = 0b000111; break;\n+      case HI: cond_op = 0b100110; break;\n+      case HS: cond_op = 0b100111; break;\n+      default:\n+        ShouldNotReachHere();\n+        break;\n+    }\n+\n+    f(0, 31), f((int)T & 1, 30), f((cond_op >> 5) & 1, 29);\n+    f(0b01110, 28, 24), f((int)T >> 1, 23, 22), f(1, 21), rf(Vm, 16);\n+    f(cond_op & 0b11111, 15, 11), f(1, 10), rf(Vn, 5), rf(Vd, 0);\n+  }\n+\n+  \/\/ AdvSIMD Floating-point vector compare\n+  void fcm(Condition cond, FloatRegister Vd, SIMD_Arrangement T, FloatRegister Vn, FloatRegister Vm) {\n+    starti;\n+    assert(T == T2S || T == T4S || T == T2D, \"invalid arrangement\");\n+    int cond_op;\n+    switch (cond) {\n+      case EQ: cond_op = 0b00; break;\n+      case GT: cond_op = 0b11; break;\n+      case GE: cond_op = 0b10; break;\n+      default:\n+        ShouldNotReachHere();\n+        break;\n+    }\n+\n+    f(0, 31), f((int)T & 1, 30), f((cond_op >> 1) & 1, 29);\n+    f(0b01110, 28, 24), f(cond_op & 1, 23), f(T == T2D ? 1 : 0, 22);\n+    f(1, 21), rf(Vm, 16), f(0b111001, 15, 10), rf(Vn, 5), rf(Vd, 0);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/assembler_aarch64.hpp","additions":40,"deletions":8,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -921,1 +921,1 @@\n-                                     FloatRegister src2, int cond, bool isQ) {\n+                                     FloatRegister src2, Condition cond, bool isQ) {\n@@ -923,16 +923,14 @@\n-  if (bt == T_FLOAT || bt == T_DOUBLE) {\n-    switch (cond) {\n-      case BoolTest::eq: fcmeq(dst, size, src1, src2); break;\n-      case BoolTest::ne: {\n-        fcmeq(dst, size, src1, src2);\n-        notr(dst, isQ ? T16B : T8B, dst);\n-        break;\n-      }\n-      case BoolTest::ge: fcmge(dst, size, src1, src2); break;\n-      case BoolTest::gt: fcmgt(dst, size, src1, src2); break;\n-      case BoolTest::le: fcmge(dst, size, src2, src1); break;\n-      case BoolTest::lt: fcmgt(dst, size, src2, src1); break;\n-      default:\n-        assert(false, \"unsupported\");\n-        ShouldNotReachHere();\n-    }\n+  FloatRegister zn = src1, zm = src2;\n+  bool needs_negation = false;\n+  switch (cond) {\n+    case LT: cond = GT; zn = src2; zm = src1; break;\n+    case LE: cond = GE; zn = src2; zm = src1; break;\n+    case LO: cond = HI; zn = src2; zm = src1; break;\n+    case LS: cond = HS; zn = src2; zm = src1; break;\n+    case NE: cond = EQ; needs_negation = true; break;\n+    default:\n+      break;\n+  }\n+\n+  if (is_floating_point_type(bt)) {\n+    fcm(cond, dst, size, zn, zm);\n@@ -940,19 +938,5 @@\n-    switch (cond) {\n-      case BoolTest::eq: cmeq(dst, size, src1, src2); break;\n-      case BoolTest::ne: {\n-        cmeq(dst, size, src1, src2);\n-        notr(dst, isQ ? T16B : T8B, dst);\n-        break;\n-      }\n-      case BoolTest::ge: cmge(dst, size, src1, src2); break;\n-      case BoolTest::gt: cmgt(dst, size, src1, src2); break;\n-      case BoolTest::le: cmge(dst, size, src2, src1); break;\n-      case BoolTest::lt: cmgt(dst, size, src2, src1); break;\n-      case BoolTest::uge: cmhs(dst, size, src1, src2); break;\n-      case BoolTest::ugt: cmhi(dst, size, src1, src2); break;\n-      case BoolTest::ult: cmhi(dst, size, src2, src1); break;\n-      case BoolTest::ule: cmhs(dst, size, src2, src1); break;\n-      default:\n-        assert(false, \"unsupported\");\n-        ShouldNotReachHere();\n-    }\n+    cm(cond, dst, size, zn, zm);\n+  }\n+\n+  if (needs_negation) {\n+    notr(dst, isQ ? T16B : T8B, dst);\n@@ -1128,1 +1112,1 @@\n-                                    FloatRegister zn, FloatRegister zm, int cond) {\n+                                    FloatRegister zn, FloatRegister zm, Condition cond) {\n@@ -1131,2 +1115,0 @@\n-  \/\/ Convert the original BoolTest condition to Assembler::condition.\n-  Condition condition;\n@@ -1134,6 +1116,4 @@\n-    case BoolTest::eq: condition = Assembler::EQ; break;\n-    case BoolTest::ne: condition = Assembler::NE; break;\n-    case BoolTest::le: z1 = zm; z2 = zn; condition = Assembler::GE; break;\n-    case BoolTest::ge: condition = Assembler::GE; break;\n-    case BoolTest::lt: z1 = zm; z2 = zn; condition = Assembler::GT; break;\n-    case BoolTest::gt: condition = Assembler::GT; break;\n+    case LE: z1 = zm; z2 = zn; cond = GE; break;\n+    case LT: z1 = zm; z2 = zn; cond = GT; break;\n+    case LO: z1 = zm; z2 = zn; cond = HI; break;\n+    case LS: z1 = zm; z2 = zn; cond = HS; break;\n@@ -1141,2 +1121,1 @@\n-      assert(false, \"unsupported compare condition\");\n-      ShouldNotReachHere();\n+      break;\n@@ -1146,2 +1125,2 @@\n-  if (bt == T_FLOAT || bt == T_DOUBLE) {\n-    sve_fcm(condition, pd, size, pg, z1, z2);\n+  if (is_floating_point_type(bt)) {\n+    sve_fcm(cond, pd, size, pg, z1, z2);\n@@ -1150,1 +1129,1 @@\n-    sve_cmp(condition, pd, size, pg, z1, z2);\n+    sve_cmp(cond, pd, size, pg, z1, z2);\n@@ -1982,1 +1961,1 @@\n-  cmhs(tmp3, T, tmp3, tmp2);\n+  cm(HS, tmp3, T, tmp3, tmp2);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.cpp","additions":30,"deletions":51,"binary":false,"changes":81,"status":"modified"},{"patch":"@@ -80,1 +80,1 @@\n-                    FloatRegister src2, int cond, bool isQ);\n+                    FloatRegister src2, Condition cond, bool isQ);\n@@ -86,1 +86,1 @@\n-                   FloatRegister zn, FloatRegister zm, int cond);\n+                   FloatRegister zn, FloatRegister zm, Condition cond);\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_MacroAssembler_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,2 +148,1 @@\n-    \/\/ Not supported on SVE yet.\n-    return !UseSVE;\n+    return true;\n","filename":"src\/hotspot\/cpu\/aarch64\/matcher_aarch64.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -6415,4 +6415,4 @@\n-    __ cmhi(decH0, arrangement, decL0, v27);\n-    __ cmhi(decH1, arrangement, decL1, v27);\n-    __ cmhi(decH2, arrangement, decL2, v27);\n-    __ cmhi(decH3, arrangement, decL3, v27);\n+    __ cm(Assembler::HI, decH0, arrangement, decL0, v27);\n+    __ cm(Assembler::HI, decH1, arrangement, decL1, v27);\n+    __ cm(Assembler::HI, decH2, arrangement, decL2, v27);\n+    __ cm(Assembler::HI, decH3, arrangement, decL3, v27);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1388,0 +1388,24 @@\n+class NEONVectorCompare(ThreeRegNEONOp):\n+    def __init__(self, args):\n+        self._name, self.arrangement, self.condition = args\n+        self.insname = self._name + (self.condition).lower()\n+\n+    def cstr(self):\n+        return (\"%s(%s, %s, %s, %s, %s);\"\n+                % (\"__ \" + self._name,\n+                   \"Assembler::\" + self.condition,\n+                   self._firstSIMDreg,\n+                   \"__ T\" + self.arrangement,\n+                   self._firstSIMDreg.nextReg(),\n+                   self._firstSIMDreg.nextReg().nextReg()))\n+\n+    def astr(self):\n+        return (\"%s\\t%s.%s, %s.%s, %s.%s\"\n+                % (self.insname,\n+                   self._firstSIMDreg,\n+                   self.arrangement,\n+                   self._firstSIMDreg.nextReg(),\n+                   self.arrangement,\n+                   self._firstSIMDreg.nextReg().nextReg(),\n+                   self.arrangement))\n+\n@@ -1696,26 +1720,0 @@\n-          [\"cmeq\", \"cmeq\", \"8B\"], [\"cmeq\", \"cmeq\", \"16B\"],\n-          [\"cmeq\", \"cmeq\", \"4H\"], [\"cmeq\", \"cmeq\", \"8H\"],\n-          [\"cmeq\", \"cmeq\", \"2S\"], [\"cmeq\", \"cmeq\", \"4S\"],\n-          [\"cmeq\", \"cmeq\", \"2D\"],\n-          [\"fcmeq\", \"fcmeq\", \"2S\"], [\"fcmeq\", \"fcmeq\", \"4S\"],\n-          [\"fcmeq\", \"fcmeq\", \"2D\"],\n-          [\"cmgt\", \"cmgt\", \"8B\"], [\"cmgt\", \"cmgt\", \"16B\"],\n-          [\"cmgt\", \"cmgt\", \"4H\"], [\"cmgt\", \"cmgt\", \"8H\"],\n-          [\"cmgt\", \"cmgt\", \"2S\"], [\"cmgt\", \"cmgt\", \"4S\"],\n-          [\"cmgt\", \"cmgt\", \"2D\"],\n-          [\"cmhi\", \"cmhi\", \"8B\"], [\"cmhi\", \"cmhi\", \"16B\"],\n-          [\"cmhi\", \"cmhi\", \"4H\"], [\"cmhi\", \"cmhi\", \"8H\"],\n-          [\"cmhi\", \"cmhi\", \"2S\"], [\"cmhi\", \"cmhi\", \"4S\"],\n-          [\"cmhi\", \"cmhi\", \"2D\"],\n-          [\"cmhs\", \"cmhs\", \"8B\"], [\"cmhs\", \"cmhs\", \"16B\"],\n-          [\"cmhs\", \"cmhs\", \"4H\"], [\"cmhs\", \"cmhs\", \"8H\"],\n-          [\"cmhs\", \"cmhs\", \"2S\"], [\"cmhs\", \"cmhs\", \"4S\"],\n-          [\"cmhs\", \"cmhs\", \"2D\"],\n-          [\"fcmgt\", \"fcmgt\", \"2S\"], [\"fcmgt\", \"fcmgt\", \"4S\"],\n-          [\"fcmgt\", \"fcmgt\", \"2D\"],\n-          [\"cmge\", \"cmge\", \"8B\"], [\"cmge\", \"cmge\", \"16B\"],\n-          [\"cmge\", \"cmge\", \"4H\"], [\"cmge\", \"cmge\", \"8H\"],\n-          [\"cmge\", \"cmge\", \"2S\"], [\"cmge\", \"cmge\", \"4S\"],\n-          [\"cmge\", \"cmge\", \"2D\"],\n-          [\"fcmge\", \"fcmge\", \"2S\"], [\"fcmge\", \"fcmge\", \"4S\"],\n-          [\"fcmge\", \"fcmge\", \"2D\"],\n@@ -1726,0 +1724,16 @@\n+neonVectorCompareInstructionPrefix = ['cm', 'fcm']\n+neonIntegerVectorCompareConditions = ['GT', 'GE', 'EQ', 'HI', 'HS']\n+neonFloatVectorCompareConditions = ['EQ', 'GT', 'GE']\n+neonIntegerArrangement = ['8B', '16B', '4H', '8H', '2S', '4S', '2D']\n+neonFloatArrangement = ['2S', '4S', '2D']\n+neonVectorCompareArgs = []\n+for pre in neonVectorCompareInstructionPrefix:\n+    conditions = neonFloatVectorCompareConditions if pre == 'fcm' else neonIntegerVectorCompareConditions\n+    arrangements = neonFloatArrangement if pre == 'fcm' else neonIntegerArrangement\n+    for condition in conditions:\n+        for currentArrangement in arrangements:\n+            currentArgs = [pre, currentArrangement, condition]\n+            neonVectorCompareArgs.append(currentArgs)\n+\n+generate(NEONVectorCompare, neonVectorCompareArgs)\n+\n","filename":"test\/hotspot\/gtest\/aarch64\/aarch64-asmtest.py","additions":40,"deletions":26,"binary":false,"changes":66,"status":"modified"},{"patch":"@@ -751,47 +751,49 @@\n-    __ cmeq(v29, __ T8B, v30, v31);                    \/\/       cmeq    v29.8B, v30.8B, v31.8B\n-    __ cmeq(v3, __ T16B, v4, v5);                      \/\/       cmeq    v3.16B, v4.16B, v5.16B\n-    __ cmeq(v10, __ T4H, v11, v12);                    \/\/       cmeq    v10.4H, v11.4H, v12.4H\n-    __ cmeq(v22, __ T8H, v23, v24);                    \/\/       cmeq    v22.8H, v23.8H, v24.8H\n-    __ cmeq(v10, __ T2S, v11, v12);                    \/\/       cmeq    v10.2S, v11.2S, v12.2S\n-    __ cmeq(v4, __ T4S, v5, v6);                       \/\/       cmeq    v4.4S, v5.4S, v6.4S\n-    __ cmeq(v17, __ T2D, v18, v19);                    \/\/       cmeq    v17.2D, v18.2D, v19.2D\n-    __ fcmeq(v1, __ T2S, v2, v3);                      \/\/       fcmeq   v1.2S, v2.2S, v3.2S\n-    __ fcmeq(v11, __ T4S, v12, v13);                   \/\/       fcmeq   v11.4S, v12.4S, v13.4S\n-    __ fcmeq(v7, __ T2D, v8, v9);                      \/\/       fcmeq   v7.2D, v8.2D, v9.2D\n-    __ cmgt(v10, __ T8B, v11, v12);                    \/\/       cmgt    v10.8B, v11.8B, v12.8B\n-    __ cmgt(v15, __ T16B, v16, v17);                   \/\/       cmgt    v15.16B, v16.16B, v17.16B\n-    __ cmgt(v16, __ T4H, v17, v18);                    \/\/       cmgt    v16.4H, v17.4H, v18.4H\n-    __ cmgt(v2, __ T8H, v3, v4);                       \/\/       cmgt    v2.8H, v3.8H, v4.8H\n-    __ cmgt(v9, __ T2S, v10, v11);                     \/\/       cmgt    v9.2S, v10.2S, v11.2S\n-    __ cmgt(v11, __ T4S, v12, v13);                    \/\/       cmgt    v11.4S, v12.4S, v13.4S\n-    __ cmgt(v12, __ T2D, v13, v14);                    \/\/       cmgt    v12.2D, v13.2D, v14.2D\n-    __ cmhi(v14, __ T8B, v15, v16);                    \/\/       cmhi    v14.8B, v15.8B, v16.8B\n-    __ cmhi(v13, __ T16B, v14, v15);                   \/\/       cmhi    v13.16B, v14.16B, v15.16B\n-    __ cmhi(v2, __ T4H, v3, v4);                       \/\/       cmhi    v2.4H, v3.4H, v4.4H\n-    __ cmhi(v6, __ T8H, v7, v8);                       \/\/       cmhi    v6.8H, v7.8H, v8.8H\n-    __ cmhi(v19, __ T2S, v20, v21);                    \/\/       cmhi    v19.2S, v20.2S, v21.2S\n-    __ cmhi(v25, __ T4S, v26, v27);                    \/\/       cmhi    v25.4S, v26.4S, v27.4S\n-    __ cmhi(v15, __ T2D, v16, v17);                    \/\/       cmhi    v15.2D, v16.2D, v17.2D\n-    __ cmhs(v4, __ T8B, v5, v6);                       \/\/       cmhs    v4.8B, v5.8B, v6.8B\n-    __ cmhs(v2, __ T16B, v3, v4);                      \/\/       cmhs    v2.16B, v3.16B, v4.16B\n-    __ cmhs(v4, __ T4H, v5, v6);                       \/\/       cmhs    v4.4H, v5.4H, v6.4H\n-    __ cmhs(v11, __ T8H, v12, v13);                    \/\/       cmhs    v11.8H, v12.8H, v13.8H\n-    __ cmhs(v17, __ T2S, v18, v19);                    \/\/       cmhs    v17.2S, v18.2S, v19.2S\n-    __ cmhs(v20, __ T4S, v21, v22);                    \/\/       cmhs    v20.4S, v21.4S, v22.4S\n-    __ cmhs(v16, __ T2D, v17, v18);                    \/\/       cmhs    v16.2D, v17.2D, v18.2D\n-    __ fcmgt(v17, __ T2S, v18, v19);                   \/\/       fcmgt   v17.2S, v18.2S, v19.2S\n-    __ fcmgt(v10, __ T4S, v11, v12);                   \/\/       fcmgt   v10.4S, v11.4S, v12.4S\n-    __ fcmgt(v20, __ T2D, v21, v22);                   \/\/       fcmgt   v20.2D, v21.2D, v22.2D\n-    __ cmge(v22, __ T8B, v23, v24);                    \/\/       cmge    v22.8B, v23.8B, v24.8B\n-    __ cmge(v12, __ T16B, v13, v14);                   \/\/       cmge    v12.16B, v13.16B, v14.16B\n-    __ cmge(v25, __ T4H, v26, v27);                    \/\/       cmge    v25.4H, v26.4H, v27.4H\n-    __ cmge(v23, __ T8H, v24, v25);                    \/\/       cmge    v23.8H, v24.8H, v25.8H\n-    __ cmge(v28, __ T2S, v29, v30);                    \/\/       cmge    v28.2S, v29.2S, v30.2S\n-    __ cmge(v14, __ T4S, v15, v16);                    \/\/       cmge    v14.4S, v15.4S, v16.4S\n-    __ cmge(v10, __ T2D, v11, v12);                    \/\/       cmge    v10.2D, v11.2D, v12.2D\n-    __ fcmge(v24, __ T2S, v25, v26);                   \/\/       fcmge   v24.2S, v25.2S, v26.2S\n-    __ fcmge(v1, __ T4S, v2, v3);                      \/\/       fcmge   v1.4S, v2.4S, v3.4S\n-    __ fcmge(v11, __ T2D, v12, v13);                   \/\/       fcmge   v11.2D, v12.2D, v13.2D\n-    __ facgt(v30, __ T2S, v31, v0);                    \/\/       facgt   v30.2S, v31.2S, v0.2S\n-    __ facgt(v10, __ T4S, v11, v12);                   \/\/       facgt   v10.4S, v11.4S, v12.4S\n-    __ facgt(v15, __ T2D, v16, v17);                   \/\/       facgt   v15.2D, v16.2D, v17.2D\n+    __ facgt(v29, __ T2S, v30, v31);                   \/\/       facgt   v29.2S, v30.2S, v31.2S\n+    __ facgt(v3, __ T4S, v4, v5);                      \/\/       facgt   v3.4S, v4.4S, v5.4S\n+    __ facgt(v10, __ T2D, v11, v12);                   \/\/       facgt   v10.2D, v11.2D, v12.2D\n+\n+\/\/ NEONVectorCompare\n+    __ cm(Assembler::GT, v22, __ T8B, v23, v24);       \/\/       cmgt    v22.8B, v23.8B, v24.8B\n+    __ cm(Assembler::GT, v10, __ T16B, v11, v12);      \/\/       cmgt    v10.16B, v11.16B, v12.16B\n+    __ cm(Assembler::GT, v4, __ T4H, v5, v6);          \/\/       cmgt    v4.4H, v5.4H, v6.4H\n+    __ cm(Assembler::GT, v17, __ T8H, v18, v19);       \/\/       cmgt    v17.8H, v18.8H, v19.8H\n+    __ cm(Assembler::GT, v1, __ T2S, v2, v3);          \/\/       cmgt    v1.2S, v2.2S, v3.2S\n+    __ cm(Assembler::GT, v11, __ T4S, v12, v13);       \/\/       cmgt    v11.4S, v12.4S, v13.4S\n+    __ cm(Assembler::GT, v7, __ T2D, v8, v9);          \/\/       cmgt    v7.2D, v8.2D, v9.2D\n+    __ cm(Assembler::GE, v10, __ T8B, v11, v12);       \/\/       cmge    v10.8B, v11.8B, v12.8B\n+    __ cm(Assembler::GE, v15, __ T16B, v16, v17);      \/\/       cmge    v15.16B, v16.16B, v17.16B\n+    __ cm(Assembler::GE, v16, __ T4H, v17, v18);       \/\/       cmge    v16.4H, v17.4H, v18.4H\n+    __ cm(Assembler::GE, v2, __ T8H, v3, v4);          \/\/       cmge    v2.8H, v3.8H, v4.8H\n+    __ cm(Assembler::GE, v9, __ T2S, v10, v11);        \/\/       cmge    v9.2S, v10.2S, v11.2S\n+    __ cm(Assembler::GE, v11, __ T4S, v12, v13);       \/\/       cmge    v11.4S, v12.4S, v13.4S\n+    __ cm(Assembler::GE, v12, __ T2D, v13, v14);       \/\/       cmge    v12.2D, v13.2D, v14.2D\n+    __ cm(Assembler::EQ, v14, __ T8B, v15, v16);       \/\/       cmeq    v14.8B, v15.8B, v16.8B\n+    __ cm(Assembler::EQ, v13, __ T16B, v14, v15);      \/\/       cmeq    v13.16B, v14.16B, v15.16B\n+    __ cm(Assembler::EQ, v2, __ T4H, v3, v4);          \/\/       cmeq    v2.4H, v3.4H, v4.4H\n+    __ cm(Assembler::EQ, v6, __ T8H, v7, v8);          \/\/       cmeq    v6.8H, v7.8H, v8.8H\n+    __ cm(Assembler::EQ, v19, __ T2S, v20, v21);       \/\/       cmeq    v19.2S, v20.2S, v21.2S\n+    __ cm(Assembler::EQ, v25, __ T4S, v26, v27);       \/\/       cmeq    v25.4S, v26.4S, v27.4S\n+    __ cm(Assembler::EQ, v15, __ T2D, v16, v17);       \/\/       cmeq    v15.2D, v16.2D, v17.2D\n+    __ cm(Assembler::HI, v4, __ T8B, v5, v6);          \/\/       cmhi    v4.8B, v5.8B, v6.8B\n+    __ cm(Assembler::HI, v2, __ T16B, v3, v4);         \/\/       cmhi    v2.16B, v3.16B, v4.16B\n+    __ cm(Assembler::HI, v4, __ T4H, v5, v6);          \/\/       cmhi    v4.4H, v5.4H, v6.4H\n+    __ cm(Assembler::HI, v11, __ T8H, v12, v13);       \/\/       cmhi    v11.8H, v12.8H, v13.8H\n+    __ cm(Assembler::HI, v17, __ T2S, v18, v19);       \/\/       cmhi    v17.2S, v18.2S, v19.2S\n+    __ cm(Assembler::HI, v20, __ T4S, v21, v22);       \/\/       cmhi    v20.4S, v21.4S, v22.4S\n+    __ cm(Assembler::HI, v16, __ T2D, v17, v18);       \/\/       cmhi    v16.2D, v17.2D, v18.2D\n+    __ cm(Assembler::HS, v17, __ T8B, v18, v19);       \/\/       cmhs    v17.8B, v18.8B, v19.8B\n+    __ cm(Assembler::HS, v10, __ T16B, v11, v12);      \/\/       cmhs    v10.16B, v11.16B, v12.16B\n+    __ cm(Assembler::HS, v20, __ T4H, v21, v22);       \/\/       cmhs    v20.4H, v21.4H, v22.4H\n+    __ cm(Assembler::HS, v22, __ T8H, v23, v24);       \/\/       cmhs    v22.8H, v23.8H, v24.8H\n+    __ cm(Assembler::HS, v12, __ T2S, v13, v14);       \/\/       cmhs    v12.2S, v13.2S, v14.2S\n+    __ cm(Assembler::HS, v25, __ T4S, v26, v27);       \/\/       cmhs    v25.4S, v26.4S, v27.4S\n+    __ cm(Assembler::HS, v23, __ T2D, v24, v25);       \/\/       cmhs    v23.2D, v24.2D, v25.2D\n+    __ fcm(Assembler::EQ, v28, __ T2S, v29, v30);      \/\/       fcmeq   v28.2S, v29.2S, v30.2S\n+    __ fcm(Assembler::EQ, v14, __ T4S, v15, v16);      \/\/       fcmeq   v14.4S, v15.4S, v16.4S\n+    __ fcm(Assembler::EQ, v10, __ T2D, v11, v12);      \/\/       fcmeq   v10.2D, v11.2D, v12.2D\n+    __ fcm(Assembler::GT, v24, __ T2S, v25, v26);      \/\/       fcmgt   v24.2S, v25.2S, v26.2S\n+    __ fcm(Assembler::GT, v1, __ T4S, v2, v3);         \/\/       fcmgt   v1.4S, v2.4S, v3.4S\n+    __ fcm(Assembler::GT, v11, __ T2D, v12, v13);      \/\/       fcmgt   v11.2D, v12.2D, v13.2D\n+    __ fcm(Assembler::GE, v30, __ T2S, v31, v0);       \/\/       fcmge   v30.2S, v31.2S, v0.2S\n+    __ fcm(Assembler::GE, v10, __ T4S, v11, v12);      \/\/       fcmge   v10.4S, v11.4S, v12.4S\n+    __ fcm(Assembler::GE, v15, __ T2D, v16, v17);      \/\/       fcmge   v15.2D, v16.2D, v17.2D\n@@ -1432,12 +1434,12 @@\n-    0x2e3f8fdd,     0x6e258c83,     0x2e6c8d6a,     0x6e788ef6,\n-    0x2eac8d6a,     0x6ea68ca4,     0x6ef38e51,     0x0e23e441,\n-    0x4e2de58b,     0x4e69e507,     0x0e2c356a,     0x4e31360f,\n-    0x0e723630,     0x4e643462,     0x0eab3549,     0x4ead358b,\n-    0x4eee35ac,     0x2e3035ee,     0x6e2f35cd,     0x2e643462,\n-    0x6e6834e6,     0x2eb53693,     0x6ebb3759,     0x6ef1360f,\n-    0x2e263ca4,     0x6e243c62,     0x2e663ca4,     0x6e6d3d8b,\n-    0x2eb33e51,     0x6eb63eb4,     0x6ef23e30,     0x2eb3e651,\n-    0x6eace56a,     0x6ef6e6b4,     0x0e383ef6,     0x4e2e3dac,\n-    0x0e7b3f59,     0x4e793f17,     0x0ebe3fbc,     0x4eb03dee,\n-    0x4eec3d6a,     0x2e3ae738,     0x6e23e441,     0x6e6de58b,\n-    0x2ea0effe,     0x6eaced6a,     0x6ef1ee0f,     0x65922c43,\n+    0x2ebfefdd,     0x6ea5ec83,     0x6eeced6a,     0x0e3836f6,\n+    0x4e2c356a,     0x0e6634a4,     0x4e733651,     0x0ea33441,\n+    0x4ead358b,     0x4ee93507,     0x0e2c3d6a,     0x4e313e0f,\n+    0x0e723e30,     0x4e643c62,     0x0eab3d49,     0x4ead3d8b,\n+    0x4eee3dac,     0x2e308dee,     0x6e2f8dcd,     0x2e648c62,\n+    0x6e688ce6,     0x2eb58e93,     0x6ebb8f59,     0x6ef18e0f,\n+    0x2e2634a4,     0x6e243462,     0x2e6634a4,     0x6e6d358b,\n+    0x2eb33651,     0x6eb636b4,     0x6ef23630,     0x2e333e51,\n+    0x6e2c3d6a,     0x2e763eb4,     0x6e783ef6,     0x2eae3dac,\n+    0x6ebb3f59,     0x6ef93f17,     0x0e3ee7bc,     0x4e30e5ee,\n+    0x4e6ce56a,     0x2ebae738,     0x6ea3e441,     0x6eede58b,\n+    0x2e20e7fe,     0x6e2ce56a,     0x6e71e60f,     0x65922c43,\n","filename":"test\/hotspot\/gtest\/aarch64\/asmtest.out.h","additions":61,"deletions":59,"binary":false,"changes":120,"status":"modified"}]}