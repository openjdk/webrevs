{"files":[{"patch":"@@ -137,1 +137,1 @@\n-int G1CollectionSetCandidateInfo::compare_gc_efficiency(G1CollectionSetCandidateInfo* ci1, G1CollectionSetCandidateInfo* ci2) {\n+int G1CollectionSetCandidateInfo::compare_region_gc_efficiency(G1CollectionSetCandidateInfo* ci1, G1CollectionSetCandidateInfo* ci2) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  static int compare_gc_efficiency(G1CollectionSetCandidateInfo* ci1, G1CollectionSetCandidateInfo* ci2);\n+  static int compare_region_gc_efficiency(G1CollectionSetCandidateInfo* ci1, G1CollectionSetCandidateInfo* ci2);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-      qsort(_data, _cur_claim_idx, sizeof(_data[0]), (_sort_Fn)G1CollectionSetCandidateInfo::compare_gc_efficiency);\n+      qsort(_data, _cur_claim_idx, sizeof(_data[0]), (_sort_Fn)G1CollectionSetCandidateInfo::compare_region_gc_efficiency);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1291,1 +1291,2 @@\n-        hr->note_end_of_marking(_cm->top_at_mark_start(hr), _cm->live_bytes(hr->hrm_index()), _cm->incoming_refs(hr->hrm_index()));\n+        uint region_idx = hr->hrm_index();\n+        hr->note_end_of_marking(_cm->top_at_mark_start(hr), _cm->live_bytes(region_idx), _cm->incoming_refs(region_idx));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -565,1 +565,1 @@\n-\n+  \/\/ Approximate number of incoming references found during marking.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -346,1 +346,1 @@\n-  double merge_scan_time_ms = p->predict_merge_scan_time(_incoming_refs); \/\/ We use _incoming_refs as an estimate for remset cards\n+  double merge_scan_time_ms = p->predict_merge_scan_time(_incoming_refs); \/\/ We use the number of incoming references as an estimate for remset cards.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -350,1 +350,1 @@\n-  \/\/ GC Efficiency for collecting this region based on the time estimate in\n+  \/\/ GC efficiency for collecting this region based on the time estimate in\n@@ -368,2 +368,2 @@\n-  \/\/ Notify the region that concurrent marking has finished. Passes TAMS and the number of\n-  \/\/ bytes marked between bottom and TAMS.\n+  \/\/ Notify the region that concurrent marking has finished. Passes TAMS, the number of\n+  \/\/ bytes marked between bottom and TAMS, and the estimate for incoming references.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-\/\/ This includes\n+\/\/ These include:\n@@ -38,2 +38,4 @@\n-\/\/ to tams. This is an exact measure.\n-\/\/ The code corrects later for the live data between tams and top.\n+\/\/   to tams. This is an exact measure. The code corrects later for the live data\n+\/\/   between tams and top.\n+\/\/ * the number of incoming references found during marking. This is an approximate\n+\/\/   value because we do not mark through all objects.\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionMarkStatsCache.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"}]}