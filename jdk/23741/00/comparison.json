{"files":[{"patch":"@@ -849,0 +849,8 @@\n+  if (SystemDictionaryShared::should_be_excluded(ik)) {\n+    if (log_is_enabled(Warning, cds, resolve)) {\n+      ResourceMark rm;\n+      log_warning(cds, resolve)(\"Cannot aot-resolve constants for %s because it is excluded\", ik->external_name());\n+    }\n+    return;\n+  }\n+\n","filename":"src\/hotspot\/share\/cds\/classListParser.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test id=static Lambda expressions in excluded classes shouldn't be resolved during the assembly phase.\n+ * @bug 8349888\n+ * @requires vm.cds.supports.aot.class.linking\n+ * @requires vm.gc.Epsilon\n+ * @comment work around JDK-8345635\n+ * @requires !vm.jvmci.enabled\n+ * @library \/test\/jdk\/lib\/testlibrary \/test\/lib\n+ * @build LambdaInExcludedClass\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller LambdaInExcludedClassApp\n+ * @run driver LambdaInExcludedClass STATIC\n+ *\/\n+\n+import jdk.test.lib.cds.CDSAppTester;\n+import jdk.test.lib.helpers.ClassFileInstaller;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class LambdaInExcludedClass {\n+    static final String mainClass = \"LambdaInExcludedClassApp\";\n+\n+    public static void main(String[] args) throws Exception {\n+        Tester t = new Tester();\n+        t.run(args);\n+    }\n+\n+    static class Tester extends CDSAppTester {\n+        public Tester() {\n+            super(mainClass);\n+        }\n+\n+        @Override\n+        public String classpath(RunMode runMode) {\n+            \/\/ Using \".\" as the classpath allows the LambdaInExcludedClassApp to be loaded in\n+            \/\/ the assembly phase, but this class will be excluded from the AOT cache.\n+            return \".\";\n+        }\n+\n+        @Override\n+        public String[] vmArgs(RunMode runMode) {\n+            return new String[] {\n+                \"-XX:+AOTClassLinking\",\n+                \"-XX:+UnlockExperimentalVMOptions\",\n+                \"-XX:+UseEpsilonGC\",\n+            };\n+        }\n+\n+        @Override\n+        public String[] appCommandLine(RunMode runMode) {\n+            return new String[] {\n+                mainClass,\n+            };\n+        }\n+\n+        @Override\n+        public void checkExecution(OutputAnalyzer out, RunMode runMode) throws Exception {\n+            if (runMode == RunMode.DUMP_STATIC) {\n+                out.shouldContain(\"Skipping LambdaInExcludedClassApp: Unsupported location\");\n+                out.shouldContain(\"Cannot aot-resolve constants for LambdaInExcludedClassApp because it is excluded\");\n+            } else {\n+                out.shouldContain(\"Hello LambdaInExcludedClassApp\");\n+            }\n+        }\n+    }\n+}\n+\n+class LambdaInExcludedClassApp {\n+    public static void main(String args[]) throws Exception {\n+        \/\/ LambdaInExcludedClassApp is excluded, so aot-linking of lambda call sites\n+        \/\/ should not happen for this class. Otherwise Epsilon GC may crash due\n+        \/\/ to 8349888.\n+        Runnable r = LambdaInExcludedClassApp::doit;\n+        r.run();\n+    }\n+\n+    static void doit() {\n+        System.out.println(\"Hello LambdaInExcludedClassApp\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotClassLinking\/LambdaInExcludedClass.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"}]}