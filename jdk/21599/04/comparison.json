{"files":[{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#ifdef COMPILER2\n+#include \"opto\/node.hpp\"\n+#include \"opto\/phaseX.hpp\"\n+\n+Node* PhaseLowering::lower_node_platform(Node* n) {\n+  return nullptr;\n+}\n+\n+bool PhaseLowering::should_lower() {\n+  return false;\n+}\n+#endif \/\/ COMPILER2\n","filename":"src\/hotspot\/cpu\/aarch64\/c2_lowering_aarch64.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#ifdef COMPILER2\n+#include \"opto\/node.hpp\"\n+#include \"opto\/phaseX.hpp\"\n+\n+Node* PhaseLowering::lower_node_platform(Node* n) {\n+  return nullptr;\n+}\n+\n+bool PhaseLowering::should_lower() {\n+  return false;\n+}\n+#endif \/\/ COMPILER2\n","filename":"src\/hotspot\/cpu\/arm\/c2_lowering_arm.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#ifdef COMPILER2\n+#include \"opto\/node.hpp\"\n+#include \"opto\/phaseX.hpp\"\n+\n+Node* PhaseLowering::lower_node_platform(Node* n) {\n+  return nullptr;\n+}\n+\n+bool PhaseLowering::should_lower() {\n+  return false;\n+}\n+#endif \/\/ COMPILER2\n","filename":"src\/hotspot\/cpu\/ppc\/c2_lowering_ppc.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#ifdef COMPILER2\n+#include \"opto\/node.hpp\"\n+#include \"opto\/phaseX.hpp\"\n+\n+Node* PhaseLowering::lower_node_platform(Node* n) {\n+  return nullptr;\n+}\n+\n+bool PhaseLowering::should_lower() {\n+  return false;\n+}\n+#endif \/\/ COMPILER2\n","filename":"src\/hotspot\/cpu\/riscv\/c2_lowering_riscv.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#ifdef COMPILER2\n+#include \"opto\/node.hpp\"\n+#include \"opto\/phaseX.hpp\"\n+\n+Node* PhaseLowering::lower_node_platform(Node* n) {\n+  return nullptr;\n+}\n+\n+bool PhaseLowering::should_lower() {\n+  return false;\n+}\n+#endif \/\/ COMPILER2\n","filename":"src\/hotspot\/cpu\/s390\/c2_lowering_s390.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#ifdef COMPILER2\n+#include \"opto\/node.hpp\"\n+#include \"opto\/phaseX.hpp\"\n+\n+Node* PhaseLowering::lower_node_platform(Node* n) {\n+  return nullptr;\n+}\n+\n+bool PhaseLowering::should_lower() {\n+  return false;\n+}\n+#endif \/\/ COMPILER2\n","filename":"src\/hotspot\/cpu\/x86\/c2_lowering_x86.cpp","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -2484,0 +2484,10 @@\n+\n+  \/\/ Lower nodes and match backend-specific patterns with Ideal nodes.\n+  {\n+    TracePhase tp(_t_lower);\n+\n+    PhaseLowering lower(&igvn);\n+    lower.lower();\n+\n+    print_method(PHASE_AFTER_LOWERING, 2);\n+  }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -157,0 +157,1 @@\n+class PhaseLowering;\n@@ -1112,0 +1113,5 @@\n+  \/\/ Return an Idealized node only during PhaseLowering.\n+  virtual Node* LoweredIdeal(PhaseLowering* phase) {\n+    return nullptr;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -100,0 +100,1 @@\n+    tty->print_cr (\"         Lowering:            %7.3f s\", timers[_t_lower].seconds());\n","filename":"src\/hotspot\/share\/opto\/phase.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -61,0 +61,1 @@\n+    Lower,                            \/\/ Backend-dependent Ideal node lowering\n@@ -91,0 +92,1 @@\n+    f(     _t_lower,                 \"lower\")                    \\\n","filename":"src\/hotspot\/share\/opto\/phase.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2288,0 +2288,34 @@\n+Node* PhaseLowering::apply_ideal(Node* k, bool can_reshape) {\n+  Node* lowered = lower_node(k);\n+  if (lowered != nullptr) {\n+    return lowered;\n+  }\n+\n+  \/\/ Run the lowered Ideal method to continue doing transformations on the node, while avoiding existing ideal transforms\n+  \/\/ that may undo the changes done during lowering.\n+\n+  return k->LoweredIdeal(this);\n+}\n+\n+Node* PhaseLowering::lower_node(Node* n) {\n+  \/\/ Apply shared lowering transforms\n+\n+  \/\/ Apply backend-specific lowering transforms\n+  return lower_node_platform(n);\n+}\n+\n+void PhaseLowering::lower() {\n+  if (!should_lower()) {\n+    return;\n+  }\n+\n+  \/\/ Worklist should be empty before lowering\n+  _worklist.ensure_empty();\n+\n+  C->identify_useful_nodes(_worklist);\n+\n+  optimize();\n+\n+  \/\/ Worklist should be empty after lowering\n+  _worklist.ensure_empty();\n+}\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":34,"deletions":0,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -427,1 +427,1 @@\n-  Node* apply_ideal(Node* i, bool can_reshape);\n+  virtual Node* apply_ideal(Node* i, bool can_reshape);\n@@ -701,0 +701,20 @@\n+\/\/ Phase for lowering common Ideal nodes into machine-specific Ideal nodes and identifying complex patterns before\n+\/\/ the platform matcher.\n+class PhaseLowering : public PhaseIterGVN {\n+public:\n+  PhaseLowering(PhaseIterGVN* igvn) : PhaseIterGVN(igvn) {};\n+\n+  virtual Node* apply_ideal(Node* i, bool can_reshape);\n+\n+  \/\/ Return a lowered version of the input node, or nullptr if no lowering took place.\n+  Node* lower_node(Node* in);\n+\n+  \/\/ Version of lower_node implemented by backends, called by lower_node.\n+  Node* lower_node_platform(Node* in);\n+\n+  bool should_lower();\n+\n+  \/\/ Main function to lower all nodes in the graph.\n+  void lower();\n+};\n+\n","filename":"src\/hotspot\/share\/opto\/phaseX.hpp","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -92,0 +92,1 @@\n+  flags(AFTER_LOWERING,                 \"After Lowering\") \\\n","filename":"src\/hotspot\/share\/opto\/phasetype.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -102,0 +102,1 @@\n+    AFTER_LOWERING(\"After Lowering\"),\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/CompilePhase.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}