{"files":[{"patch":"@@ -55,2 +55,2 @@\n-\/**\n- * @test\n+\/*\n+ * @test id=Poly\n@@ -65,0 +65,11 @@\n+ *\/\n+\n+\/*\n+ * @test id=PolyDoDash\n+ * @bug 8191814\n+ * @summary Verifies that Marlin rendering generates the same\n+ * images with and without clipping optimization with all possible\n+ * stroke (cap\/join) and\/or dashes or fill modes (EO rules)\n+ * for paths made of either 9 lines, 4 quads, 2 cubics (random)\n+ * Note: Use the argument -slow to run more intensive tests (too much time)\n+ *\n@@ -66,0 +77,11 @@\n+ *\/\n+\n+\/*\n+ * @test id=Cubic\n+ * @bug 8191814\n+ * @summary Verifies that Marlin rendering generates the same\n+ * images with and without clipping optimization with all possible\n+ * stroke (cap\/join) and\/or dashes or fill modes (EO rules)\n+ * for paths made of either 9 lines, 4 quads, 2 cubics (random)\n+ * Note: Use the argument -slow to run more intensive tests (too much time)\n+ *\n@@ -67,0 +89,11 @@\n+ *\/\n+\n+\/*\n+ * @test id=CubicDoDash\n+ * @bug 8191814\n+ * @summary Verifies that Marlin rendering generates the same\n+ * images with and without clipping optimization with all possible\n+ * stroke (cap\/join) and\/or dashes or fill modes (EO rules)\n+ * for paths made of either 9 lines, 4 quads, 2 cubics (random)\n+ * Note: Use the argument -slow to run more intensive tests (too much time)\n+ *\n@@ -68,1 +101,1 @@\n-*\/\n+ *\/\n","filename":"test\/jdk\/sun\/java2d\/marlin\/ClipShapeTest.java","additions":36,"deletions":3,"binary":false,"changes":39,"status":"modified"}]}