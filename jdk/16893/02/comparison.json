{"files":[{"patch":"@@ -210,0 +210,10 @@\n+            \/\/ 'tmp' is null if and only if 'out' is trusted\n+            byte[] tmp;\n+            if (out.getClass().getPackageName().equals(\"java.io\") &&\n+                (out instanceof ByteArrayOutputStream ||\n+                 out instanceof FileOutputStream ||\n+                 out instanceof PipedOutputStream))\n+                tmp = null;\n+            else\n+                tmp = new byte[Integer.min(len, MAX_TRANSFER_SIZE)];\n+\n@@ -213,1 +223,6 @@\n-                out.write(buf, pos, nbyte);\n+                \/\/ if 'out' is not trusted, transfer via a temporary buffer\n+                if (tmp != null) {\n+                    System.arraycopy(buf, pos, tmp, 0, nbyte);\n+                    out.write(tmp, 0, nbyte);\n+                } else\n+                    out.write(buf, pos, nbyte);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ByteArrayInputStream.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8321053\n+ * @summary Verify ByteArrayInputStream.buf is used directly by\n+ *          ByteArrayInputStream.transferTo only when its OutputStream\n+ *          parameter is trusted\n+ * @key randomness\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Random;\n+\n+public class TransferToTrusted {\n+    private static final Random RND = new Random(System.nanoTime());\n+\n+    private static class UntrustedOutputStream extends OutputStream {\n+        UntrustedOutputStream() {\n+            super();\n+        }\n+\n+        @Override\n+        public void write(byte[] b, int off, int len) throws IOException {\n+            Objects.checkFromIndexSize(off, len, b.length);\n+            byte[] tmp = new byte[len];\n+            RND.nextBytes(tmp);\n+            System.arraycopy(tmp, 0, b, off, len);\n+        }\n+\n+        @Override\n+        public void write(int b) throws IOException {\n+            write(new byte[] {(byte)b});\n+        }\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        byte[] buf = new byte[RND.nextInt(1025)];\n+        System.out.println(\"buf.length: \" + buf.length);\n+        RND.nextBytes(buf);\n+        byte[] dup = Arrays.copyOf(buf, buf.length);\n+\n+        ByteArrayInputStream bais = new ByteArrayInputStream(dup);\n+        bais.mark(dup.length);\n+\n+        OutputStream[] outputStreams = new OutputStream[] {\n+            new ByteArrayOutputStream(),\n+            new UntrustedOutputStream()\n+        };\n+\n+        for (OutputStream out : outputStreams) {\n+            System.err.println(\"out: \" + out.getClass().getName());\n+\n+            bais.transferTo(out);\n+            bais.reset();\n+            try {\n+                if (!Arrays.equals(buf, bais.readAllBytes()))\n+                    throw new RuntimeException(\"Internal buffer was modified\");\n+            } finally {\n+                out.close();\n+            }\n+            bais.reset();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/ByteArrayInputStream\/TransferToTrusted.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}