{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -760,4 +760,0 @@\n-                byte[] derEncodedKeyarray =\n-                        new DerOutputStream()\n-                                .putOctetString(keyArray)\n-                                .toByteArray();\n@@ -765,1 +761,1 @@\n-                        8 * derEncodedKeyarray.length, derEncodedKeyarray));\n+                        8 * keyArray.length, keyArray));\n@@ -786,2 +782,9 @@\n-            if ((keyArray[0] != DerValue.tag_OctetString) || (keyArray[1] != keyArray.length -2)) {\n-                throw new InvalidKeyException(\"Bad X509Key\");\n+            \/\/ Check less than minimum length to make sure this method works as expected\n+            if (keyArray.length < 12) {\n+                throw new InvalidKeyException(\"LMS public key is too short\");\n+            }\n+            if (keyArray[0] == DerValue.tag_OctetString\n+                    && keyArray[1] == keyArray.length - 2) {\n+                \/\/ pre-8347596 format that has an inner OCTET STRING.\n+                keyArray = Arrays.copyOfRange(keyArray, 2, keyArray.length);\n+                setKey(new BitArray(keyArray.length * 8, keyArray));\n@@ -789,2 +792,2 @@\n-            L = LMSUtils.fourBytesToInt(keyArray, 2);\n-            lmsPublicKey = new LMSPublicKey(keyArray, 6, true);\n+            L = LMSUtils.fourBytesToInt(keyArray, 0);\n+            lmsPublicKey = new LMSPublicKey(keyArray, 4, true);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/HSS.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -406,1 +406,1 @@\n-            byte[] rawKey = new DerValue(val.data.getBitString()).getOctetString();\n+            byte[] rawKey = val.data.getBitString();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8298127\n+ * @bug 8298127 8347596\n@@ -43,0 +43,1 @@\n+import jdk.test.lib.Asserts;\n@@ -64,3 +65,1 @@\n-        if (!serializeTest()) {\n-            throw new RuntimeException(\"serializeTest failed\");\n-        }\n+        serializeTest();\n@@ -91,1 +90,1 @@\n-    static boolean serializeTest() throws Exception {\n+    static void serializeTest() throws Exception {\n@@ -109,1 +108,13 @@\n-        var keyBits = new DerOutputStream().putOctetString(pk).toByteArray();\n+        \/\/ Encoding without inner OCTET STRING\n+        var pk0 = makeKey(oid, pk);\n+        \/\/ Encoding with inner OCTET STRING\n+        var pk1 = makeKey(oid, new DerOutputStream().putOctetString(pk).toByteArray());\n+        Asserts.assertEquals(pk0, pk1);\n+\n+        PublicKey pk2 = (PublicKey) SerializationUtils\n+                .deserialize(SerializationUtils.serialize(pk1));\n+        Asserts.assertEquals(pk1, pk2);\n+    }\n+\n+    static PublicKey makeKey(ObjectIdentifier oid, byte[] keyBits)\n+            throws Exception {\n@@ -118,5 +129,1 @@\n-        var pk1 = KeyFactory.getInstance(ALG).generatePublic(x509KeySpec);\n-\n-        PublicKey pk2 = (PublicKey) SerializationUtils\n-                .deserialize(SerializationUtils.serialize(pk1));\n-        return pk2.equals(pk1);\n+        return KeyFactory.getInstance(ALG).generatePublic(x509KeySpec);\n","filename":"test\/jdk\/sun\/security\/provider\/hss\/TestHSS.java","additions":19,"deletions":12,"binary":false,"changes":31,"status":"modified"}]}