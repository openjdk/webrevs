{"files":[{"patch":"@@ -49,1 +49,3 @@\n-  uintx time_since_last_gc = (uintx)g1h->time_since_last_collection().milliseconds();\n+  uintx time_since_last_gc = G1PeriodicGCCheckWholeHeap ?\n+          (uintx)g1h->millis_since_last_whole_heap_examined() :\n+          (uintx)g1h->time_since_last_collection().milliseconds();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1PeriodicGCTask.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -294,0 +294,5 @@\n+  product(bool, G1PeriodicGCCheckWholeHeap, false,                          \\\n+          \"Check for recent whole heap GC instead of any recent GC for \"    \\\n+          \"periodic GC triggers. Enabling this would trigger periodic GC \"  \\\n+          \"even when young GCs happened recently.\")                         \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,240 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package gc.g1;\n+\n+\/**\n+ * @test id=young-only\n+ * @requires vm.gc.G1 & vm.flagless\n+ * @library \/test\/lib \/\n+ * @run driver gc.g1.TestPeriodicCollectionWholeHeap young-only\n+ *\/\n+\n+\/**\n+ * @test id=young-only-whole\n+ * @requires vm.gc.G1 & vm.flagless\n+ * @library \/test\/lib \/\n+ * @run driver gc.g1.TestPeriodicCollectionWholeHeap young-only-whole\n+ *\/\n+\n+\/**\n+ * @test id=concurrent\n+ * @requires vm.gc.G1 & vm.flagless\n+ * @library \/test\/lib \/\n+ * @run driver gc.g1.TestPeriodicCollectionWholeHeap concurrent\n+ *\/\n+\n+\/**\n+ * @test id=concurrent-whole\n+ * @requires vm.gc.G1 & vm.flagless\n+ * @library \/test\/lib \/\n+ * @run driver gc.g1.TestPeriodicCollectionWholeHeap concurrent-whole\n+ *\/\n+\n+\/**\n+ * @test id=full\n+ * @requires vm.gc.G1 & vm.flagless\n+ * @library \/test\/lib \/\n+ * @run driver gc.g1.TestPeriodicCollectionWholeHeap full\n+ *\/\n+\n+\/**\n+ * @test id=full-whole\n+ * @requires vm.gc.G1 & vm.flagless\n+ * @library \/test\/lib \/\n+ * @run driver gc.g1.TestPeriodicCollectionWholeHeap full-whole\n+ *\/\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import jdk.test.lib.Platform;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestPeriodicCollectionWholeHeap {\n+\n+    public static void main(String[] args) throws Exception {\n+        String mode = args[0];\n+\n+        List<String> commonOpts = Arrays.asList(\n+            \"-XX:+UseG1GC\",\n+            \"-XX:+G1PeriodicGCInvokesConcurrent\",\n+            \"-Xms128M\",\n+            \"-Xmx128M\",\n+            \"-Xlog:gc*,gc+periodic\",\n+            Workload.class.getName()\n+        );\n+\n+        final String MSG_YOUNG = \"Pause Young\";\n+        final String MSG_PERIODIC = \"(Concurrent Start) (G1 Periodic Collection)\";\n+        final String MSG_CONCURRENT = \"(Concurrent Start) (System.gc())\";\n+        final String MSG_FULL = \"Pause Full (System.gc())\";\n+\n+        switch(mode) {\n+\n+            \/\/ Young GC should prevent periodic GC to start.\n+            case \"young-only\": {\n+                List<String> opts = new ArrayList<>();\n+                opts.add(\"-XX:G1PeriodicGCInterval=3000\");\n+                opts.add(\"-XX:-G1PeriodicGCCheckWholeHeap\");\n+                opts.addAll(commonOpts);\n+\n+                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(opts);\n+                OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+                output.shouldContain(MSG_YOUNG);\n+                output.shouldNotContain(MSG_CONCURRENT);\n+                output.shouldNotContain(MSG_FULL);\n+                output.shouldNotContain(MSG_PERIODIC);\n+\n+                break;\n+            }\n+\n+            \/\/ Young GC should not prevent periodic GC to start.\n+            case \"young-only-whole\": {\n+                List<String> opts = new ArrayList<>();\n+                opts.add(\"-XX:G1PeriodicGCInterval=3000\");\n+                opts.add(\"-XX:+G1PeriodicGCCheckWholeHeap\");\n+                opts.addAll(commonOpts);\n+\n+                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(opts);\n+                OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+                output.shouldContain(MSG_YOUNG);\n+                output.shouldNotContain(MSG_CONCURRENT);\n+                output.shouldNotContain(MSG_FULL);\n+                output.shouldContain(MSG_PERIODIC);\n+\n+                break;\n+            }\n+\n+            \/\/ Periodic GC should not start when concurrent GCs are running frequently.\n+            case \"concurrent\": {\n+                List<String> opts = new ArrayList<>();\n+                opts.add(\"-XX:G1PeriodicGCInterval=3000\");\n+                opts.add(\"-XX:+ExplicitGCInvokesConcurrent\");\n+                opts.add(\"-XX:-G1PeriodicGCCheckWholeHeap\");\n+                opts.addAll(commonOpts);\n+                opts.add(\"1000\");\n+\n+                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(opts);\n+                OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+                output.shouldContain(MSG_YOUNG);\n+                output.shouldContain(MSG_CONCURRENT);\n+                output.shouldNotContain(MSG_FULL);\n+                output.shouldNotContain(MSG_PERIODIC);\n+\n+                break;\n+            }\n+\n+            \/\/ Periodic GC should not start when concurrent GCs are running frequently.\n+            case \"concurrent-whole\": {\n+                List<String> opts = new ArrayList<>();\n+                opts.add(\"-XX:G1PeriodicGCInterval=3000\");\n+                opts.add(\"-XX:+ExplicitGCInvokesConcurrent\");\n+                opts.add(\"-XX:+G1PeriodicGCCheckWholeHeap\");\n+                opts.addAll(commonOpts);\n+                opts.add(\"1000\");\n+\n+                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(opts);\n+                OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+                output.shouldContain(MSG_YOUNG);\n+                output.shouldContain(MSG_CONCURRENT);\n+                output.shouldNotContain(MSG_FULL);\n+                output.shouldNotContain(MSG_PERIODIC);\n+\n+                break;\n+            }\n+\n+            \/\/ Periodic GC should not start when Full GCs are running frequently.\n+            case \"full\": {\n+                List<String> opts = new ArrayList<>();\n+                opts.add(\"-XX:G1PeriodicGCInterval=3000\");\n+                opts.add(\"-XX:-ExplicitGCInvokesConcurrent\");\n+                opts.add(\"-XX:-G1PeriodicGCCheckWholeHeap\");\n+                opts.addAll(commonOpts);\n+                opts.add(\"1000\");\n+\n+                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(opts);\n+                OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+                output.shouldContain(MSG_YOUNG);\n+                output.shouldNotContain(MSG_CONCURRENT);\n+                output.shouldContain(MSG_FULL);\n+                output.shouldNotContain(MSG_PERIODIC);\n+\n+                break;\n+            }\n+\n+            \/\/ Periodic GC should not start when Full GCs are running frequently.\n+            case \"full-whole\": {\n+                List<String> opts = new ArrayList<>();\n+                opts.add(\"-XX:G1PeriodicGCInterval=3000\");\n+                opts.add(\"-XX:-ExplicitGCInvokesConcurrent\");\n+                opts.add(\"-XX:+G1PeriodicGCCheckWholeHeap\");\n+                opts.addAll(commonOpts);\n+                opts.add(\"1000\");\n+\n+                ProcessBuilder pb = ProcessTools.createJavaProcessBuilder(opts);\n+                OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+\n+                output.shouldContain(MSG_YOUNG);\n+                output.shouldNotContain(MSG_CONCURRENT);\n+                output.shouldContain(MSG_FULL);\n+                output.shouldNotContain(MSG_PERIODIC);\n+\n+                break;\n+            }\n+\n+            default:\n+                throw new IllegalArgumentException(\"Unknown test mode: \" + mode);\n+        }\n+    }\n+\n+    public static class Workload {\n+        static Object sink;\n+\n+        public static void main(String... args) {\n+            final long gcEachMs = (args.length > 0) ? Integer.parseInt(args[0]) : Integer.MAX_VALUE;\n+\n+            long nextGCAt = System.nanoTime() + gcEachMs * 1_000_000L;\n+            long stopAt = System.nanoTime() + 10_000_000_000L;\n+\n+            while (true) {\n+                long now = System.nanoTime();\n+                if (now >= stopAt) return;\n+\n+                sink = new byte[16];\n+                if (now >= nextGCAt) {\n+                    System.gc();\n+                    nextGCAt = now + gcEachMs;\n+                }\n+            }\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestPeriodicCollectionWholeHeap.java","additions":240,"deletions":0,"binary":false,"changes":240,"status":"added"}]}