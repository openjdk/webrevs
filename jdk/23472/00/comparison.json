{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-    .icns .scpt .wxs .wxl .wxi .ico .bmp .tiff .service .xsl\n+    .icns .scpt .wxs .wxl .wxi .wxf .ico .bmp .tiff .service .xsl\n","filename":"make\/modules\/jdk.jpackage\/Java.gmk","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -664,0 +664,6 @@\n+`os-condition.wxf`\n+\n+:   WiX project file with the condition to block installation on older versions of Windows\n+\n+    Default resource is *os-condition.wxf*\n+\n","filename":"src\/jdk.jpackage\/share\/man\/jpackage.md","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,205 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.internal;\n+\n+import static jdk.jpackage.internal.WinMsiBundler.WIN_APP_IMAGE;\n+\n+import java.io.BufferedInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.UncheckedIOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HexFormat;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import jdk.jpackage.internal.util.XmlConsumer;\n+\n+\n+\/**\n+ * WiX Condition to block\/allow installation based on OS version.\n+ *\/\n+record OSVersionCondition(WindowsVersion version) {\n+\n+    static OSVersionCondition createFromAppImage(ApplicationLayout appLayout, Map<String, ? super Object> params) {\n+        Objects.requireNonNull(appLayout);\n+\n+        final List<Path> executables = new ArrayList<>();\n+\n+        if (!StandardBundlerParam.isRuntimeInstaller(params)) {\n+            final var launcherName = StandardBundlerParam.APP_NAME.fetchFrom(params);\n+            executables.add(appLayout.launchersDirectory().resolve(launcherName + \".exe\"));\n+        }\n+\n+        executables.add(appLayout.runtimeDirectory().resolve(\"bin\\\\java.dll\"));\n+\n+        final var lowestOsVersion = executables.stream()\n+                .filter(Files::isRegularFile)\n+                .map(WindowsVersion::getExecutableOSVersion)\n+                \/\/ Order by version, with the higher version first\n+                .sorted(WindowsVersion.descendingOrder())\n+                .findFirst().orElseGet(() -> {\n+                    \/\/ No java.dll, no launchers, it is either a highly customized or messed up app image.\n+                    \/\/ Let it install on Windows NT\/95 or newer.\n+                    return new WindowsVersion(4, 0);\n+                });\n+\n+        return new OSVersionCondition(lowestOsVersion);\n+    }\n+\n+    record WindowsVersion(int majorOSVersion, int minorOSVersion) {\n+\n+        WindowsVersion {\n+            if (majorOSVersion <= 0) {\n+                throw new IllegalArgumentException(\"Invalid major version\");\n+            }\n+\n+            if (minorOSVersion < 0) {\n+                throw new IllegalArgumentException(\"Invalid minor version\");\n+            }\n+        }\n+\n+        static WindowsVersion getExecutableOSVersion(Path executable) {\n+            try (final var fin = Files.newInputStream(executable);\n+                    final var in = new BufferedInputStream(fin)) {\n+                \/\/ Skip all but \"e_lfanew\" fields of DOS stub (https:\/\/wiki.osdev.org\/PE#DOS_Stub)\n+                in.skipNBytes(64 - 4);\n+\n+                final int peHeaderOffset = read32BitLE(in);\n+                if (peHeaderOffset <= 0) {\n+                    throw new IOException(\"Invalid PE header offset\");\n+                }\n+\n+                \/\/ Move to PE header\n+                in.skip(peHeaderOffset - 64);\n+\n+                \/\/ Read \"mMagic\" field (aka PE signature), (https:\/\/wiki.osdev.org\/PE#PE_header)\n+                final byte[] peSignature = in.readNBytes(4);\n+                if (peSignature.length != 4) {\n+                    throw notEnoughBytes();\n+                }\n+\n+                if (peSignature[0] != 'P' || peSignature[1] != 'E' || peSignature[2] != 0 || peSignature[3] != 0) {\n+                    throw new IOException(String.format(\"Invalid PE signature: %s\", HexFormat.of().formatHex(peSignature)));\n+                }\n+\n+                \/\/ Read size of optional PE header from \"mSizeOfOptionalHeader\" field (https:\/\/wiki.osdev.org\/PE#PE_header)\n+                in.skip(16);\n+                final int sizeOfOptionalHeader = read16BitLE(in);\n+                if (sizeOfOptionalHeader < (40 + 4)) {\n+                    throw new IOException(\"Invalid PE optional header size\");\n+                }\n+\n+                \/\/ Skip PE header\n+                in.skip(2);\n+\n+                \/\/ Skip all fields of Optional PE header until \"mMajorOperatingSystemVersion\" field (https:\/\/wiki.osdev.org\/PE#Optional_header)\n+                in.skip(40);\n+\n+                final int mMajorOperatingSystemVersion = read16BitLE(in);\n+                final int mMinorOperatingSystemVersion = read16BitLE(in);\n+\n+                return new WindowsVersion(mMajorOperatingSystemVersion, mMinorOperatingSystemVersion);\n+            } catch (IOException ex) {\n+                throw new UncheckedIOException(ex);\n+            }\n+        }\n+\n+        static Comparator<WindowsVersion> descendingOrder() {\n+            return Comparator.comparing(WindowsVersion::majorOSVersion).thenComparing(WindowsVersion::minorOSVersion).reversed();\n+        }\n+\n+        private static int read16BitLE(InputStream in) throws IOException {\n+            byte buffer[] = new byte[2];\n+            if (buffer.length != in.read(buffer)) {\n+                throw notEnoughBytes();\n+            }\n+\n+            return ((buffer[0] & 0xFF) | ((buffer[1] & 0xFF) << 8));\n+        }\n+\n+        private static int read32BitLE(InputStream in) throws IOException {\n+            byte buffer[] = new byte[4];\n+            if (buffer.length != in.read(buffer)) {\n+                throw notEnoughBytes();\n+            }\n+\n+            return ((buffer[0] & 0xFF) | ((buffer[1] & 0xFF) << 8) |\n+                    ((buffer[2] & 0xFF) << 16) | ((buffer[3] & 0xFF) << 24));\n+        }\n+\n+        private static IOException notEnoughBytes() {\n+            return new IOException(\"Invalid PE file\");\n+        }\n+    }\n+\n+    int msiVersionNumber() {\n+        return version.majorOSVersion() * 100 + version.minorOSVersion();\n+    }\n+\n+    String msiVersionString() {\n+        return String.valueOf(msiVersionNumber());\n+    }\n+\n+    static WixFragmentBuilder createWixFragmentBuilder() {\n+        final var builder = new WixFragmentBuilder() {\n+            @Override\n+            protected Collection<XmlConsumer> getFragmentWriters() {\n+                return Collections.emptyList();\n+            }\n+\n+            @Override\n+            void initFromParams(Map<String, ? super Object> params) {\n+                super.initFromParams(params);\n+\n+                final Path appImageRoot = WIN_APP_IMAGE.fetchFrom(params);\n+\n+                ApplicationLayout appImageLayout;\n+                if (StandardBundlerParam.isRuntimeInstaller(params)) {\n+                    appImageLayout = ApplicationLayout.javaRuntime();\n+                } else {\n+                    appImageLayout = ApplicationLayout.platformAppImage();\n+                }\n+\n+                appImageLayout = appImageLayout.resolveAt(appImageRoot);\n+\n+                final var cond = OSVersionCondition.createFromAppImage(appImageLayout, params);\n+\n+                setWixVariable(\"JpExecutableMajorOSVersion\", String.valueOf(cond.version().majorOSVersion));\n+                setWixVariable(\"JpExecutableMinorOSVersion\", String.valueOf(cond.version().minorOSVersion));\n+                setWixVariable(\"JpExecutableOSVersion\", String.valueOf(cond.msiVersionString()));\n+            }\n+        };\n+\n+        builder.setDefaultResourceName(\"os-condition.wxf\");\n+\n+        return builder;\n+    }\n+}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/OSVersionCondition.java","additions":205,"deletions":0,"binary":false,"changes":205,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -230,1 +230,2 @@\n-                Map.entry(\"ui.wxf\", new WixUiFragmentBuilder())\n+                Map.entry(\"ui.wxf\", new WixUiFragmentBuilder()),\n+                Map.entry(\"os-condition.wxf\", OSVersionCondition.createWixFragmentBuilder())\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WinMsiBundler.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,1 +41,0 @@\n-import jdk.jpackage.internal.OverridableResource.Source;\n@@ -65,0 +64,4 @@\n+    final void setDefaultResourceName(String v) {\n+        defaultResourceName = v;\n+    }\n+\n@@ -69,2 +72,1 @@\n-        fragmentResource = createResource(outputFileName, params).setSourceOrder(\n-                Source.ResourceDir);\n+        fragmentResource = createResource(defaultResourceName, params).setPublicName(outputFileName);\n@@ -85,1 +87,4 @@\n-        if (fragmentResource.saveToFile(fragmentPath) == null) {\n+        final var src = fragmentResource.saveToStream(null);\n+        if (src == null) {\n+            \/\/ There is no predefined resource for the fragment.\n+            \/\/ The fragment should be built in the format matching the version of the WiX Toolkit.\n@@ -93,0 +98,5 @@\n+        } else {\n+            \/\/ Fragment is picked from the resource. May require conversion.\n+            final var resourceGroup = new ResourceGroup(getWixType());\n+            resourceGroup.addResource(fragmentResource, fragmentPath);\n+            resourceGroup.saveResources();\n@@ -240,0 +250,1 @@\n+    private String defaultResourceName;\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/WixFragmentBuilder.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -18,0 +18,2 @@\n+\r\n+  <String Id=\"OsConditionMessage\">[ProductName][ProductVersion] is not supported on this version of Windows<\/String>\r\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/MsiInstallerStrings_de.wxl","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -18,0 +18,2 @@\n+\n+  <String Id=\"OsConditionMessage\">[ProductName][ProductVersion] is not supported on this version of Windows<\/String>\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/MsiInstallerStrings_en.wxl","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -18,0 +18,2 @@\n+\r\n+  <String Id=\"OsConditionMessage\">[ProductName][ProductVersion] is not supported on this version of Windows<\/String>\r\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/MsiInstallerStrings_ja.wxl","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -18,0 +18,2 @@\n+\r\n+  <String Id=\"OsConditionMessage\">[ProductName][ProductVersion] is not supported on this version of Windows<\/String>\r\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/MsiInstallerStrings_zh_CN.wxl","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,0 +79,1 @@\n+      <ComponentGroupRef Id=\"FragmentOsCondition\"\/>\n@@ -126,0 +127,1 @@\n+      <LaunchConditions Before=\"AppSearch\"\/>\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/main.wxs","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<!--\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+-->\n+\n+<Wix xmlns=\"http:\/\/schemas.microsoft.com\/wix\/2006\/wi\">\n+  <Fragment>\n+    <Condition Message=\"!(loc.OsConditionMessage)\">\n+      <![CDATA[Installed OR (VersionNT >= $(var.JpExecutableOSVersion))]]>\n+    <\/Condition>\n+    <!--\n+      Fragment contents must be referenced. Otherwise, the fragment will be ignored.\n+      Use empty component group as an anchor for the reference.\n+    -->\n+    <ComponentGroup Id=\"FragmentOsCondition\"\/>\n+  <\/Fragment>\n+<\/Wix>\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/os-condition.wxf","additions":40,"deletions":0,"binary":false,"changes":40,"status":"added"},{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,0 +76,13 @@\n+  <!--\n+    From <Condition Message=\"foo\">Bar<\/Condition> to <Launch Message=\"foo\" Condition=\"Bar\"\/>\n+  -->\n+  <xsl:template match=\"wix3:Condition\">\n+    <xsl:element name=\"Launch\" namespace=\"http:\/\/wixtoolset.org\/schemas\/v4\/wxs\">\n+      <xsl:attribute name=\"Condition\">\n+        <xsl:value-of select=\"text()\"\/>\n+      <\/xsl:attribute>\n+      <xsl:apply-templates select=\"@*\"\/>\n+    <\/xsl:element>\n+  <\/xsl:template>\n+\n+\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/wix3-to-wix4-conv.xsl","additions":14,"deletions":1,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -0,0 +1,79 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jpackage.internal;\n+\n+import static jdk.jpackage.internal.OSVersionCondition.WindowsVersion.getExecutableOSVersion;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.condition.OS.WINDOWS;\n+\n+import java.nio.file.Path;\n+import java.util.List;\n+import java.util.stream.Stream;\n+import jdk.jpackage.internal.OSVersionCondition.WindowsVersion;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.condition.EnabledOnOs;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+\n+public class ExecutableOSVersionTest {\n+\n+    @Test\n+    @EnabledOnOs(WINDOWS)\n+    public void testWindowsVersionGetExecutableOSVersion() {\n+        final var javaHome = Path.of(System.getProperty(\"java.home\"));\n+\n+        final var javaExeVer = getExecutableOSVersion(javaHome.resolve(\"bin\/java.exe\"));\n+\n+        assertTrue(javaExeVer.majorOSVersion() > 0);\n+        assertTrue(javaExeVer.minorOSVersion() >= 0);\n+\n+        final var javaDllVer = getExecutableOSVersion(javaHome.resolve(\"bin\/java.dll\"));\n+\n+        assertEquals(javaExeVer, javaDllVer);\n+    }\n+\n+    @ParameterizedTest\n+    @EnabledOnOs(WINDOWS)\n+    @MethodSource\n+    public void testWindowsVersionDescendingOrder(List<WindowsVersion> unsorted, WindowsVersion expectedFirst) {\n+        final var actualFirst = unsorted.stream().sorted(WindowsVersion.descendingOrder()).findFirst().orElseThrow();\n+        assertEquals(expectedFirst, actualFirst);\n+    }\n+\n+    public static Stream<Object[]> testWindowsVersionDescendingOrder() {\n+        return Stream.<Object[]>of(\n+                new Object[] { List.of(wver(5, 0), wver(5, 1), wver(4, 9)), wver(5, 1) },\n+                new Object[] { List.of(wver(5, 0)), wver(5, 0) },\n+                new Object[] { List.of(wver(5, 1), wver(5, 1), wver(5, 0)), wver(5, 1) },\n+                new Object[] { List.of(wver(3, 11), wver(4, 8), wver(5, 6)), wver(5, 6) },\n+                new Object[] { List.of(wver(3, 11), wver(3, 9), wver(3, 13)), wver(3, 13) }\n+        );\n+    }\n+\n+    private final static WindowsVersion wver(int major, int minor) {\n+        return new WindowsVersion(major, minor);\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/junit\/windows\/jdk.jpackage\/jdk\/jpackage\/internal\/ExecutableOSVersionTest.java","additions":79,"deletions":0,"binary":false,"changes":79,"status":"added"},{"patch":"@@ -0,0 +1,29 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @summary Test function reading OS version from PE file\n+ * @requires (os.family == \"windows\")\n+ * @compile\/module=jdk.jpackage jdk\/jpackage\/internal\/ExecutableOSVersionTest.java\n+ * @run junit jdk.jpackage\/jdk.jpackage.internal.ExecutableOSVersionTest\n+ *\/\n","filename":"test\/jdk\/tools\/jpackage\/junit\/windows\/junit.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"added"}]}