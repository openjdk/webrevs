{"files":[{"patch":"@@ -473,3 +473,0 @@\n-# This test fails on macOS 14\n-java\/awt\/Choice\/SelectNewItemTest\/SelectNewItemTest.java 8324782 macosx-all\n-\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,134 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n-  @test\n-  @bug 4902933 8197810\n-  @summary Test that selecting the current item doesnot send an ItemEvent\n-  @key headful\n-  @run main SelectCurrentItemTest\n-*\/\n-\n-import java.awt.Choice;\n-import java.awt.Robot;\n-import java.awt.Frame;\n-import java.awt.BorderLayout;\n-import java.awt.AWTException;\n-import java.awt.Point;\n-import java.awt.Dimension;\n-import java.awt.event.InputEvent;\n-import java.awt.event.ItemListener;\n-import java.awt.event.WindowListener;\n-import java.awt.event.ItemEvent;\n-import java.awt.event.WindowEvent;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-public class SelectCurrentItemTest implements ItemListener, WindowListener {\n-    \/\/Declare things used in the test, like buttons and labels here\n-    private Frame frame;\n-    private Choice theChoice;\n-    private Robot robot;\n-\n-    private CountDownLatch latch = new CountDownLatch(1);\n-    private volatile boolean passed = true;\n-\n-    private void init()\n-    {\n-        try {\n-            robot = new Robot();\n-            robot.setAutoDelay(500);\n-        } catch (AWTException e) {\n-            throw new RuntimeException(\"Unable to create Robot. Test fails.\");\n-        }\n-\n-        frame = new Frame(\"SelectCurrentItemTest\");\n-        frame.setLayout(new BorderLayout());\n-        theChoice = new Choice();\n-        for (int i = 0; i < 10; i++) {\n-            theChoice.add(new String(\"Choice Item \" + i));\n-        }\n-        theChoice.addItemListener(this);\n-        frame.add(theChoice);\n-        frame.addWindowListener(this);\n-\n-        frame.setLocation(1,20);\n-        robot.mouseMove(10, 30);\n-        frame.pack();\n-        frame.setVisible(true);\n-    }\n-\n-    public static void main(String... args) {\n-        SelectCurrentItemTest test = new SelectCurrentItemTest();\n-        test.init();\n-        try {\n-            test.latch.await(12000, TimeUnit.MILLISECONDS);\n-        } catch (InterruptedException e) {}\n-        test.robot.waitForIdle();\n-\n-        try {\n-            if (!test.passed) {\n-                throw new RuntimeException(\"TEST FAILED.\");\n-            }\n-        } finally {\n-            test.frame.dispose();\n-        }\n-    }\n-\n-    private void run() {\n-        try {Thread.sleep(1000);} catch (InterruptedException e){}\n-        \/\/ get loc of Choice on screen\n-        Point loc = theChoice.getLocationOnScreen();\n-        \/\/ get bounds of Choice\n-        Dimension size = theChoice.getSize();\n-        robot.mouseMove(loc.x + size.width - 10, loc.y + size.height \/ 2);\n-\n-        robot.setAutoDelay(250);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-\n-        robot.delay(1000);\n-\n-        robot.mouseMove(loc.x + size.width \/ 2, loc.y + size.height);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-        robot.waitForIdle();\n-        latch.countDown();\n-    }\n-\n-    @Override public void itemStateChanged(ItemEvent e) {\n-        System.out.println(\"ItemEvent received.  Test fails\");\n-        passed = false;\n-    }\n-\n-    @Override public void windowOpened(WindowEvent e) {\n-        System.out.println(\"windowActivated()\");\n-        (new Thread(this::run)).start();\n-    }\n-\n-    @Override public void windowActivated(WindowEvent e) {}\n-    @Override public void windowDeactivated(WindowEvent e) {}\n-    @Override public void windowClosed(WindowEvent e) {}\n-    @Override public void windowClosing(WindowEvent e) {}\n-    @Override public void windowIconified(WindowEvent e) {}\n-    @Override public void windowDeiconified(WindowEvent e) {}\n-}\n","filename":"test\/jdk\/java\/awt\/Choice\/SelectCurrentItemTest\/SelectCurrentItemTest.java","additions":0,"deletions":134,"binary":false,"changes":134,"status":"deleted"},{"patch":"@@ -0,0 +1,207 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\/*\n+ * @test\n+ * @bug 4902933 8197810\n+ * @summary Test that selecting the current item does not send an ItemEvent\n+ * @key headful\n+ * @run main SelectCurrentItemTest\n+*\/\n+public class SelectCurrentItemTest\n+        extends WindowAdapter\n+        implements ItemListener {\n+    private static Frame frame;\n+    private static Choice choice;\n+\n+    private final Robot robot;\n+\n+    private final CountDownLatch windowOpened = new CountDownLatch(1);\n+    private final CountDownLatch mouseClicked = new CountDownLatch(1);\n+\n+    protected final CountDownLatch itemStateChanged = new CountDownLatch(1);\n+\n+    protected SelectCurrentItemTest() throws AWTException {\n+        robot = new Robot();\n+        robot.setAutoDelay(250);\n+    }\n+\n+    private void createUI() {\n+        frame = new Frame(getClass().getName());\n+        frame.setLayout(new BorderLayout());\n+\n+        choice = new Choice();\n+        for (int i = 0; i < 10; i++) {\n+            choice.add(\"Choice Item \" + i);\n+        }\n+        choice.addItemListener(this);\n+        choice.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                System.out.println(\"mouseClicked()\");\n+                mouseClicked.countDown();\n+            }\n+        });\n+\n+        frame.add(choice, BorderLayout.CENTER);\n+\n+        frame.addWindowListener(this);\n+\n+        frame.setLocationRelativeTo(null);\n+        frame.setResizable(false);\n+        frame.pack();\n+        frame.setVisible(true);\n+    }\n+\n+    protected final void runTest()\n+            throws InterruptedException, InvocationTargetException {\n+        try {\n+           doTest();\n+        } finally {\n+            EventQueue.invokeAndWait(this::dispose);\n+        }\n+    }\n+\n+    private void doTest()\n+            throws InterruptedException, InvocationTargetException {\n+        EventQueue.invokeAndWait(this::createUI);\n+\n+        if (!windowOpened.await(2, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Frame is not open in time\");\n+        }\n+        robot.waitForIdle();\n+\n+        final int initialIndex = getSelectedIndex();\n+\n+        final Rectangle choiceRect = getChoiceRect();\n+\n+        \/\/ Open the choice popup\n+        robot.mouseMove(choiceRect.x + choiceRect.width - 10,\n+                        choiceRect.y + choiceRect.height \/ 2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        if (!mouseClicked.await(500, TimeUnit.MILLISECONDS)) {\n+            throw new RuntimeException(\"Mouse is not clicked in time\");\n+        }\n+        robot.waitForIdle();\n+\n+        \/\/ Click an item in the choice popup\n+        final Point pt = getClickLocation(choiceRect);\n+        robot.mouseMove(pt.x, pt.y);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        robot.waitForIdle();\n+\n+        checkItemStateChanged();\n+\n+        final int currentIndex = getSelectedIndex();\n+        System.out.println(\"initialIndex = \" + initialIndex);\n+        System.out.println(\"currentIndex = \" + currentIndex);\n+        checkSelectedIndex(initialIndex, currentIndex);\n+    }\n+\n+    protected void checkItemStateChanged() throws InterruptedException {\n+        if (itemStateChanged.await(500, TimeUnit.MILLISECONDS)) {\n+            throw new RuntimeException(\"ItemEvent is received but unexpected\");\n+        }\n+    }\n+\n+    protected void checkSelectedIndex(final int initialIndex,\n+                                      final int currentIndex) {\n+        if (initialIndex != currentIndex) {\n+            throw new RuntimeException(\"Selected index in Choice should not change\");\n+        }\n+    }\n+\n+    \/**\n+     * {@return the location for clicking choice popup to select an item}\n+     * @param choiceRect the bounds of the Choice component\n+     *\/\n+    protected Point getClickLocation(final Rectangle choiceRect) {\n+        \/\/ Click on the first item in the popup, it's the selected item\n+        return new Point(choiceRect.x + choiceRect.width \/ 2,\n+                         choiceRect.y + choiceRect.height + 3);\n+    }\n+\n+    private int getSelectedIndex()\n+            throws InterruptedException, InvocationTargetException {\n+        AtomicInteger index = new AtomicInteger();\n+        EventQueue.invokeAndWait(() -> index.set(choice.getSelectedIndex()));\n+        return index.get();\n+    }\n+\n+    private Rectangle getChoiceRect()\n+            throws InterruptedException, InvocationTargetException {\n+        AtomicReference<Rectangle> rect = new AtomicReference<>();\n+        EventQueue.invokeAndWait(\n+                () -> rect.set(new Rectangle(choice.getLocationOnScreen(),\n+                                             choice.getSize())));\n+        return rect.get();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new SelectCurrentItemTest().runTest();\n+    }\n+\n+    private void dispose() {\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n+    }\n+\n+    @Override\n+    public final void itemStateChanged(ItemEvent e) {\n+        System.out.println(\"itemStateChanged: \" + e);\n+        itemStateChanged.countDown();\n+    }\n+\n+    @Override\n+    public final void windowOpened(WindowEvent e) {\n+        System.out.println(\"windowActivated()\");\n+        windowOpened.countDown();\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/SelectItem\/SelectCurrentItemTest.java","additions":207,"deletions":0,"binary":false,"changes":207,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.AWTException;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.util.concurrent.TimeUnit;\n+\n+\/*\n+ * @test\n+ * @bug 8215921\n+ * @summary Test that selecting a different item does send an ItemEvent\n+ * @key headful\n+ * @run main SelectNewItemTest\n+*\/\n+public final class SelectNewItemTest\n+        extends SelectCurrentItemTest {\n+\n+    private SelectNewItemTest() throws AWTException {\n+        super();\n+    }\n+\n+    @Override\n+    protected void checkItemStateChanged() throws InterruptedException {\n+        if (!itemStateChanged.await(500, TimeUnit.MILLISECONDS)) {\n+            throw new RuntimeException(\"ItemEvent is not received\");\n+        }\n+    }\n+\n+    @Override\n+    protected void checkSelectedIndex(final int initialIndex,\n+                                      final int currentIndex) {\n+        if (initialIndex == currentIndex) {\n+            throw new RuntimeException(\"Selected index in Choice should've changed\");\n+        }\n+    }\n+\n+    @Override\n+    protected Point getClickLocation(final Rectangle choiceRect) {\n+        \/\/ Click a different item the popup, not the first one\n+        return new Point(choiceRect.x + choiceRect.width \/ 2,\n+                         choiceRect.y + choiceRect.height * 3);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new SelectNewItemTest().runTest();\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/SelectItem\/SelectNewItemTest.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -1,180 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n-  @test\n-  @bug 8215921\n-  @summary Test that selecting a different item does send an ItemEvent\n-  @key headful\n-  @run main SelectNewItemTest\n-*\/\n-\n-import java.awt.Choice;\n-import java.awt.Robot;\n-import java.awt.Frame;\n-import java.awt.BorderLayout;\n-import java.awt.AWTException;\n-import java.awt.Point;\n-import java.awt.Dimension;\n-import java.awt.event.InputEvent;\n-import java.awt.event.ItemListener;\n-import java.awt.event.WindowListener;\n-import java.awt.event.ItemEvent;\n-import java.awt.event.WindowEvent;\n-import java.util.concurrent.CountDownLatch;\n-import java.util.concurrent.TimeUnit;\n-\n-public class SelectNewItemTest implements ItemListener, WindowListener {\n-    \/\/Declare things used in the test, like buttons and labels here\n-    private Frame frame;\n-    private Choice theChoice;\n-    private Robot robot;\n-\n-    private CountDownLatch latch = new CountDownLatch(1);\n-    private volatile boolean passed = false;\n-\n-    private void init()\n-    {\n-        try {\n-            robot = new Robot();\n-            robot.setAutoDelay(500);\n-        } catch (AWTException e) {\n-            throw new RuntimeException(\"Unable to create Robot. Test fails.\");\n-        }\n-\n-        frame = new Frame(\"SelectNewItemTest\");\n-        frame.setLayout(new BorderLayout());\n-        theChoice = new Choice();\n-        for (int i = 0; i < 10; i++) {\n-            theChoice.add(new String(\"Choice Item \" + i));\n-        }\n-        theChoice.addItemListener(this);\n-        frame.add(theChoice);\n-        frame.addWindowListener(this);\n-\n-        frame.setLocation(1,20);\n-        frame.setSize(200, 50);\n-        robot.mouseMove(10, 30);\n-        frame.pack();\n-        frame.setVisible(true);\n-    }\n-\n-    public static void main(String... args) {\n-        SelectNewItemTest test = new SelectNewItemTest();\n-        test.init();\n-        try {\n-            test.latch.await(12000, TimeUnit.MILLISECONDS);\n-        } catch (InterruptedException e) {}\n-        test.robot.waitForIdle();\n-\n-        try {\n-            if (!test.passed) {\n-                throw new RuntimeException(\"TEST FAILED.\");\n-            }\n-        } finally {\n-            test.frame.dispose();\n-        }\n-    }\n-\n-    private void run() {\n-        try {\n-            Thread.sleep(1000);\n-\n-            Point loc = theChoice.getLocationOnScreen();\n-            int selectedIndex = theChoice.getSelectedIndex();\n-            Dimension size = theChoice.getSize();\n-\n-            robot.mouseMove(loc.x + size.width - 10, loc.y + size.height \/ 2);\n-\n-            robot.setAutoDelay(250);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-\n-            robot.delay(1000);\n-\n-            \/\/make sure that the mouse moves to a different item, so that\n-            \/\/itemStateChanged is called.\n-            robot.mouseMove(loc.x + size.width \/ 2, loc.y + 3 * size.height);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.waitForIdle();\n-\n-            if (selectedIndex == theChoice.getSelectedIndex())\n-                throw new RuntimeException(\"Test case failed - expected to select\" +\n-                \" a different item than \" + selectedIndex);\n-\n-            selectedIndex = theChoice.getSelectedIndex();\n-            \/\/now click on the same item and make sure that item event is\n-            \/\/not generated.\n-            robot.delay(1000);\n-            robot.mouseMove(loc.x + size.width - 10, loc.y + size.height \/ 2);\n-\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            \/\/Make sure that the popup menu scrolls back to show the index from\n-            \/\/beginning, so that the second mouse click happens on the previously\n-            \/\/selected item.\n-            \/\/For example, on windows, it automatically scrolls the list to show\n-            \/\/the currently selected item just below the choice, which can\n-            \/\/throw off the test.\n-            if (System.getProperty(\"os.name\").toLowerCase().startsWith(\"win\")) {\n-                robot.mouseWheel(-100);\n-            }\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-\n-            robot.delay(1000);\n-            robot.mouseMove(loc.x + size.width \/ 2, loc.y + 3 * size.height);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.waitForIdle();\n-\n-            if (selectedIndex != theChoice.getSelectedIndex())\n-                throw new RuntimeException(\"Test failed. Expected to select the same item \" +\n-                \"located at: \" + selectedIndex + \" but got an item selected at: \" + theChoice.getSelectedIndex());\n-        } catch(InterruptedException e) {\n-            throw new RuntimeException(e.getCause());\n-        } finally {\n-            latch.countDown();\n-        }\n-    }\n-\n-    @Override public void itemStateChanged(ItemEvent e) {\n-        if (!passed) {\n-            System.out.println(\"ItemEvent received.  Test passes\");\n-            passed = true;\n-        } else {\n-            System.out.println(\"ItemEvent received for second click. Test fails\");\n-            passed = false;\n-        }\n-    }\n-\n-    @Override public void windowOpened(WindowEvent e) {\n-        System.out.println(\"windowActivated()\");\n-        (new Thread(this::run)).start();\n-    }\n-\n-    @Override public void windowActivated(WindowEvent e) {}\n-    @Override public void windowDeactivated(WindowEvent e) {}\n-    @Override public void windowClosed(WindowEvent e) {}\n-    @Override public void windowClosing(WindowEvent e) {}\n-    @Override public void windowIconified(WindowEvent e) {}\n-    @Override public void windowDeiconified(WindowEvent e) {}\n-}\n","filename":"test\/jdk\/java\/awt\/Choice\/SelectNewItemTest\/SelectNewItemTest.java","additions":0,"deletions":180,"binary":false,"changes":180,"status":"deleted"}]}