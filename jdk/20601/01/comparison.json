{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,7 +23,0 @@\n-\/*\n-  @test\n-  @bug 4902933 8197810\n-  @summary Test that selecting the current item doesnot send an ItemEvent\n-  @key headful\n-  @run main SelectCurrentItemTest\n-*\/\n@@ -31,0 +24,2 @@\n+import java.awt.AWTException;\n+import java.awt.BorderLayout;\n@@ -32,1 +27,1 @@\n-import java.awt.Robot;\n+import java.awt.EventQueue;\n@@ -34,4 +29,2 @@\n-import java.awt.BorderLayout;\n-import java.awt.AWTException;\n-import java.awt.Point;\n-import java.awt.Dimension;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n@@ -39,2 +32,0 @@\n-import java.awt.event.ItemListener;\n-import java.awt.event.WindowListener;\n@@ -42,0 +33,4 @@\n+import java.awt.event.ItemListener;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.awt.event.WindowAdapter;\n@@ -45,0 +40,14 @@\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+\/*\n+ * @test\n+ * @bug 4902933 8197810\n+ * @summary Test that selecting the current item does not send an ItemEvent\n+ * @key headful\n+ * @run main SelectCurrentItemTest\n+ *\/\n+public final class SelectCurrentItemTest\n+        extends WindowAdapter\n+        implements ItemListener {\n+    private static Frame frame;\n+    private static Choice choice;\n@@ -46,5 +55,1 @@\n-public class SelectCurrentItemTest implements ItemListener, WindowListener {\n-    \/\/Declare things used in the test, like buttons and labels here\n-    private Frame frame;\n-    private Choice theChoice;\n-    private Robot robot;\n+    private final Robot robot;\n@@ -52,2 +57,2 @@\n-    private CountDownLatch latch = new CountDownLatch(1);\n-    private volatile boolean passed = true;\n+    private final CountDownLatch windowOpened = new CountDownLatch(1);\n+    private final CountDownLatch mouseClicked = new CountDownLatch(1);\n@@ -55,8 +60,6 @@\n-    private void init()\n-    {\n-        try {\n-            robot = new Robot();\n-            robot.setAutoDelay(500);\n-        } catch (AWTException e) {\n-            throw new RuntimeException(\"Unable to create Robot. Test fails.\");\n-        }\n+    private volatile boolean itemStateChanged;\n+\n+    private SelectCurrentItemTest() throws AWTException {\n+        robot = new Robot();\n+        robot.setAutoDelay(500);\n+    }\n@@ -64,0 +67,1 @@\n+    private void createUI() {\n@@ -66,1 +70,2 @@\n-        theChoice = new Choice();\n+\n+        choice = new Choice();\n@@ -68,1 +73,1 @@\n-            theChoice.add(new String(\"Choice Item \" + i));\n+            choice.add(\"Choice Item \" + i);\n@@ -70,2 +75,11 @@\n-        theChoice.addItemListener(this);\n-        frame.add(theChoice);\n+        choice.addItemListener(this);\n+        choice.addMouseListener(new MouseAdapter() {\n+            @Override\n+            public void mouseClicked(MouseEvent e) {\n+                System.out.println(\"mouseClicked()\");\n+                mouseClicked.countDown();\n+            }\n+        });\n+\n+        frame.add(choice, BorderLayout.CENTER);\n+\n@@ -74,2 +88,2 @@\n-        frame.setLocation(1,20);\n-        robot.mouseMove(10, 30);\n+        frame.setLocationRelativeTo(null);\n+        frame.setResizable(false);\n@@ -80,7 +94,2 @@\n-    public static void main(String... args) {\n-        SelectCurrentItemTest test = new SelectCurrentItemTest();\n-        test.init();\n-        try {\n-            test.latch.await(12000, TimeUnit.MILLISECONDS);\n-        } catch (InterruptedException e) {}\n-        test.robot.waitForIdle();\n+    private void runTest() throws Exception {\n+        EventQueue.invokeAndWait(this::createUI);\n@@ -88,6 +97,2 @@\n-        try {\n-            if (!test.passed) {\n-                throw new RuntimeException(\"TEST FAILED.\");\n-            }\n-        } finally {\n-            test.frame.dispose();\n+        if (!windowOpened.await(2, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Frame is not open in time\");\n@@ -95,1 +100,1 @@\n-    }\n+        robot.waitForIdle();\n@@ -97,7 +102,5 @@\n-    private void run() {\n-        try {Thread.sleep(1000);} catch (InterruptedException e){}\n-        \/\/ get loc of Choice on screen\n-        Point loc = theChoice.getLocationOnScreen();\n-        \/\/ get bounds of Choice\n-        Dimension size = theChoice.getSize();\n-        robot.mouseMove(loc.x + size.width - 10, loc.y + size.height \/ 2);\n+        Rectangle choiceRect = getChoiceRect();\n+        robot.mouseMove(choiceRect.x + choiceRect.width - 10,\n+                        choiceRect.y + choiceRect.height \/ 2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -105,3 +108,4 @@\n-        robot.setAutoDelay(250);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n+        if (!mouseClicked.await(2, TimeUnit.SECONDS)) {\n+            throw new RuntimeException(\"Mouse is not clicked in time\");\n+        }\n+        robot.waitForIdle();\n@@ -109,1 +113,4 @@\n-        robot.delay(1000);\n+        robot.mouseMove(choiceRect.x + choiceRect.width \/ 2,\n+                        choiceRect.y + choiceRect.height + 2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -111,3 +118,0 @@\n-        robot.mouseMove(loc.x + size.width \/ 2, loc.y + size.height);\n-        robot.mousePress(InputEvent.BUTTON1_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_MASK);\n@@ -115,1 +119,26 @@\n-        latch.countDown();\n+\n+        if (itemStateChanged) {\n+            throw new RuntimeException(\"Test failed: itemStateChanged is called\");\n+        }\n+    }\n+\n+    private Rectangle getChoiceRect() throws Exception {\n+        AtomicReference<Rectangle> rect = new AtomicReference<>();\n+        EventQueue.invokeAndWait(\n+                () -> rect.set(new Rectangle(choice.getLocationOnScreen(),\n+                                             choice.getSize())));\n+        return rect.get();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        try {\n+            new SelectCurrentItemTest().runTest();\n+        } finally {\n+            EventQueue.invokeAndWait(SelectCurrentItemTest::dispose);\n+        }\n+    }\n+\n+    private static void dispose() {\n+        if (frame != null) {\n+            frame.dispose();\n+        }\n@@ -118,1 +147,2 @@\n-    @Override public void itemStateChanged(ItemEvent e) {\n+    @Override\n+    public void itemStateChanged(ItemEvent e) {\n@@ -120,1 +150,1 @@\n-        passed = false;\n+        itemStateChanged = true;\n@@ -123,1 +153,2 @@\n-    @Override public void windowOpened(WindowEvent e) {\n+    @Override\n+    public void windowOpened(WindowEvent e) {\n@@ -125,1 +156,1 @@\n-        (new Thread(this::run)).start();\n+        windowOpened.countDown();\n@@ -128,6 +159,0 @@\n-    @Override public void windowActivated(WindowEvent e) {}\n-    @Override public void windowDeactivated(WindowEvent e) {}\n-    @Override public void windowClosed(WindowEvent e) {}\n-    @Override public void windowClosing(WindowEvent e) {}\n-    @Override public void windowIconified(WindowEvent e) {}\n-    @Override public void windowDeiconified(WindowEvent e) {}\n","filename":"test\/jdk\/java\/awt\/Choice\/SelectCurrentItemTest\/SelectCurrentItemTest.java","additions":100,"deletions":75,"binary":false,"changes":175,"status":"modified"}]}