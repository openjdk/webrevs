{"files":[{"patch":"@@ -82,2 +82,57 @@\n- * Provides a framework for manual tests to display test instructions and\n- * Pass\/Fail buttons.\n+ * A framework for manual tests to display test instructions and\n+ * <i>Pass<\/i> \/ <i>Fail<\/i> buttons. The framework automatically\n+ * creates a frame to display the instructions, provides buttons\n+ * to select the test result, and handles test timeout.\n+ *\n+ * <p id=\"timeOutTimer\">\n+ * The instruction UI frame displays a timer at the top which indicates\n+ * how much time is left. The timer can be paused using the <i>Pause<\/i>\n+ * button to the right of the time; the title of the button changes to\n+ * <i>Resume<\/i>. To resume the timer, use the <i>Resume<\/i> button.\n+ *\n+ * <p id=\"instructionText\">\n+ * In the center, the instruction UI frame displays instructions for the\n+ * tester. The instructions can be either plain text or HTML. If the\n+ * text of the instructions starts with {@code \"<html>\"}, the\n+ * instructions are displayed as HTML, as supported by Swing, which\n+ * provides richer formatting options.\n+ * <p>\n+ * The instructions are displayed in a text component with word-wrapping\n+ * so that there's no horizontal scroll bar. If the text doesn't fit, a\n+ * vertical scroll bar is shown. Use {@code rows} and {@code columns}\n+ * parameters to change the size of this text component.\n+ * If possible, choose the number of rows and columns so that\n+ * the instructions fit and no scroll bars are shown.\n+ *\n+ * <p id=\"passFailButtons\">\n+ * At the bottom, the instruction UI frame displays the\n+ * <i>Pass<\/i> and <i>Fail<\/i> buttons. The tester clicks either <i>Pass<\/i>\n+ * or <i>Fail<\/i> button to finish the test. When the tester clicks the\n+ * <i>Fail<\/i> button, the framework displays a dialog box prompting for\n+ * a reason why the test fails. The tester enters the reason and clicks\n+ * <i>OK<\/i> to close the dialog and fail the test,\n+ * or simply closes the dialog to fail the test without providing any reason.\n+ *\n+ * <p id=\"screenCapture\">\n+ * If you enable the screenshot feature, a <i>Screenshot<\/i> button is\n+ * added  to the right of the <i>Fail<\/i> button. The tester can choose either\n+ * <i>Capture Full Screen<\/i> (default) or <i>Capture Frames<\/i> and click the\n+ * <i>Screenshot<\/i> button to take a screenshot.\n+ * If there are multiple screens, screenshots of each screen are created.\n+ * If the tester selects the <i>Capture Frames<\/i> mode, screenshots of all\n+ * the windows or frames registered in the {@code PassFailJFrame} framework\n+ * are created.\n+ *\n+ * <p id=\"logArea\">\n+ * If you enable a log area, the instruction UI frame adds a text component\n+ * to display log messages below the buttons.\n+ * Use {@link #log(String) log}, {@link #logSet(String) logSet}\n+ * and {@link #logClear() logClear} static methods of {@code PassFailJFrame}\n+ * to add or clear messages from the log area.\n+ *\n+ * <p id=\"awaitTestResult\">\n+ * After you create an instance of {@code PassFailJFrame}, call the\n+ * {@link #awaitAndCheck() awaitAndCheck} method to stop the current thread\n+ * (usually the main thread) and wait until the tester clicks\n+ * either <i>Pass<\/i> or <i>Fail<\/i> button,\n+ * or until the test times out.\n@@ -85,3 +140,6 @@\n- * Instructions for the user can be either plain text or HTML as supported\n- * by Swing. If the instructions start with {@code <html>}, the\n- * instructions are displayed as HTML.\n+ * The call to the {@code awaitAndCheck} method is usually the last\n+ * statement in the {@code main} method of your test.\n+ * If the test fails, an exception is thrown to signal the failure to jtreg.\n+ * The test fails if the tester clicks the <i>Fail<\/i> button,\n+ * if the timeout occurs,\n+ * or if any window or frame is closed.\n@@ -89,0 +147,4 @@\n+ * Before returning from {@code awaitAndCheck}, the framework disposes of\n+ * all the windows and frames.\n+ *\n+ * <h2 id=\"sampleManualTest\">Sample Manual Test<\/h2>\n@@ -90,1 +152,1 @@\n- * <pre>{@code\n+ * {@snippet id='sampleManualTestCode' lang='java':\n@@ -98,1 +160,1 @@\n- *                       .testUI(() -> createTestUI())\n+ *                       .testUI(SampleManualTest::createTestUI)\n@@ -109,1 +171,1 @@\n- * }<\/pre>\n+ * }\n@@ -111,2 +173,4 @@\n- * The above example uses the {@link Builder Builder} to set the parameters of\n- * the instruction frame. It is the recommended way.\n+ * The above example uses the {@link Builder Builder} class to set\n+ * the parameters of the instruction frame.\n+ * It is <em>the recommended way<\/em>.\n+ *\n@@ -114,3 +178,15 @@\n- * The framework will create instruction UI, it will call\n- * the provided {@code createTestUI} on the Event Dispatch Thread (EDT),\n- * and it will automatically position the test UI and make it visible.\n+ * The framework will create an instruction UI frame, it will call\n+ * the provided {@code createTestUI} on the Event Dispatch Thread (<dfn>EDT<\/dfn>),\n+ * and it will automatically position the test UI frame and make it visible.\n+ *\n+ * <p id=\"jtregTagsForTest\">\n+ * Add the following jtreg tags before the test class declaration\n+ * {@snippet :\n+ * \/*\n+ *  * @test\n+ *  * @summary Sample manual test\n+ *  * @library \/java\/awt\/regtesthelpers\n+ *  * @build PassFailJFrame\n+ *  * @run main\/manual SampleManualTest\n+ * }\n+ * and the closing comment tag <code>*&#47;<\/code>.\n@@ -118,0 +194,28 @@\n+ * The {@code @library} tag points to the location of the\n+ * {@code PassFailJFrame} class in the source code;\n+ * the {@code @build} tag makes jtreg compile the {@code PassFailJFrame} class,\n+ * and finally the {@code @run} tag specifies it is a manual\n+ * test and the class to run.\n+ *\n+ * <h2 id=\"usingBuilder\">Using {@code Builder}<\/h2>\n+ * Use methods of the {@link Builder Builder} class to set or change\n+ * parameters of {@code PassFailJFrame} and its instruction UI:\n+ * <ul>\n+ *     <li>{@link Builder#title(String) title} sets\n+ *         the title of the instruction UI\n+ *         (the default is {@value #TITLE});<\/li>\n+ *     <li>{@link Builder#testTimeOut(long) testTimeOut} sets\n+ *         the timeout of the test\n+ *         (the default is {@value #TEST_TIMEOUT});<\/li>\n+ *     <li>{@link Builder#rows(int) rows} and\n+ *         {@link Builder#columns(int) columns} control the size\n+ *         the text component which displays the instructions\n+ *         (the default number of rows is the number of lines in the text\n+ *         of the instructions,\n+ *         the default number of columns is {@value #COLUMNS});<\/li>\n+ *     <li>{@link Builder#logArea() logArea} adds a log area;<\/li>\n+ *     <li>{@link Builder#screenCapture() screenCapture}\n+ *         enables screenshots.<\/li>\n+ * <\/ul>\n+ *\n+ * <h3 id=\"builderTestUI\">Using {@code testUI} and {@code splitUI}<\/h3>\n@@ -122,4 +226,7 @@\n- * For simple test UI, use {@code Builder.splitUI}, or explicitly\n- * {@code Builder.splitUIRight} or {@code Builder.splitUIBottom} with\n- * a {@code PanelCreator}. The framework will call the provided\n- * {@code createUIPanel} to create the component with test UI and\n+ * For simple test UI, use {@link Builder#splitUI(PanelCreator) splitUI},\n+ * or explicitly\n+ * {@link Builder#splitUIRight(PanelCreator) splitUIRight} or\n+ * {@link Builder#splitUIBottom(PanelCreator) splitUIBottom} with\n+ * a {@link PanelCreator PanelCreator}.\n+ * The framework will call the provided\n+ * {@code createUIPanel} method to create the component with test UI and\n@@ -129,0 +236,3 @@\n+ * Note: <em>support for multiple windows is incomplete<\/em>.\n+ *\n+ * <h2 id=\"obsoleteSampleTest\">Obsolete Sample Test<\/h2>\n@@ -133,2 +243,2 @@\n- * <pre>{@code\n- * public class SampleOldManualTest {\n+ * {@snippet id='obsoleteSampleTestCode' lang='java':\n+ * public class ObsoleteManualTest {\n@@ -141,1 +251,1 @@\n- *         SwingUtilities.invokeAndWait(() -> createTestUI());\n+ *         SwingUtilities.invokeAndWait(ObsoleteManualTest::createTestUI);\n@@ -154,1 +264,1 @@\n- * }<\/pre>\n+ * }\n@@ -156,9 +266,21 @@\n- * Use methods of the {@code Builder} class or constructors of the\n- * {@code PassFailJFrame} class to control other parameters:\n- * <ul>\n- *     <li>the title of the instruction UI,<\/li>\n- *     <li>the timeout of the test,<\/li>\n- *     <li>the size of the instruction UI via rows and columns, and<\/li>\n- *     <li>to add a log area,<\/li>\n- *     <li>to enable screenshots.<\/li>\n- * <\/ul>\n+ * This sample uses {@link #PassFailJFrame(String) a constructor} of\n+ * {@code PassFailJFrame} to create its instance,\n+ * there are several overloads provided which allow changing other parameters.\n+ * <p>\n+ * When you use the constructors, you have to explicitly create\n+ * your test UI window on EDT. After you create the window,\n+ * you need to register it with the framework using\n+ * {@link #addTestWindow(Window) addTestWindow}\n+ * to ensure the window is disposed of when the test completes.\n+ * Before showing the window, you have to call\n+ * {@link #positionTestWindow(Window, Position) positionTestWindow}\n+ * to position the test window near the instruction UI frame provided\n+ * by the framework. And finally you have to explicitly show the test UI\n+ * window by calling {@code setVisible(true)}.\n+ * <p>\n+ * To avoid the complexity, use the {@link Builder Builder} class\n+ * which provides a streamlined way to configure and create an\n+ * instance of {@code PassFailJFrame}.\n+ * <p>\n+ * Consider updating tests which use {@code PassFailJFrame} constructors to\n+ * use the builder pattern.\n@@ -457,1 +579,5 @@\n-        main.add(new JScrollPane(text), BorderLayout.CENTER);\n+        JPanel textPanel = new JPanel(new BorderLayout());\n+        textPanel.setBorder(createEmptyBorder(4, 0, 0, 0));\n+        textPanel.add(new JScrollPane(text), BorderLayout.CENTER);\n+\n+        main.add(textPanel, BorderLayout.CENTER);\n@@ -738,1 +864,1 @@\n-        JButton capture = new JButton(\"ScreenShot\");\n+        JButton capture = new JButton(\"Screenshot\");\n@@ -750,1 +876,1 @@\n-        WINDOWS(\"Capture Individual Frame\");\n+        WINDOWS(\"Capture Frames\");\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":159,"deletions":33,"binary":false,"changes":192,"status":"modified"}]}