{"files":[{"patch":"@@ -707,2 +707,2 @@\n-     * Returns a new memory segment that has the same address and scope as this segment,\n-     * but with the provided size.\n+     * Returns a new memory segment that has the same address, scope, and\n+     * read-only state as this segment, but with the provided size.\n@@ -724,9 +724,9 @@\n-     * Returns a new memory segment with the same address and size as this segment, but\n-     * with the provided scope. As such, the returned segment cannot be accessed after\n-     * the provided arena has been closed. Moreover, the returned segment can be\n-     * accessed compatibly with the confinement restrictions associated with the provided\n-     * arena: that is, if the provided arena is a {@linkplain Arena#ofConfined() confined arena},\n-     * the returned segment can only be accessed by the arena's owner thread, regardless\n-     * of the confinement restrictions associated with this segment. In other words, this\n-     * method returns a segment that behaves as if it had been allocated using the\n-     * provided arena.\n+     * Returns a new memory segment with the same address, size, and read-only state as\n+     * this segment, but with the provided scope. As such, the returned segment cannot be\n+     * accessed after the provided arena has been closed. Moreover, the returned segment\n+     * can be accessed compatibly with the confinement restrictions associated with the\n+     * provided arena: that is, if the provided arena is a\n+     * {@linkplain Arena#ofConfined() confined arena}, the returned segment can only be\n+     * accessed by the arena's owner thread, regardless of the confinement restrictions\n+     * associated with this segment. In other words, this method returns a segment that\n+     * behaves as if it had been allocated using the provided arena.\n@@ -769,9 +769,9 @@\n-     * Returns a new segment with the same address as this segment, but with the provided\n-     * size and scope. As such, the returned segment cannot be accessed after the\n-     * provided arena has been closed. Moreover, if the returned segment can be accessed\n-     * compatibly with the confinement restrictions associated with the provided arena:\n-     * that is, if the provided arena is a {@linkplain Arena#ofConfined() confined arena},\n-     * the returned segment can only be accessed by the arena's owner thread, regardless\n-     * of the confinement restrictions associated with this segment. In other words,\n-     * this method returns a segment that behaves as if it had been allocated using the\n-     * provided arena.\n+     * Returns a new segment with the same address and read-only state as this segment,\n+     * but with the provided size and scope. As such, the returned segment cannot be\n+     * accessed after the provided arena has been closed. Moreover, if the returned\n+     * segment can be accessed compatibly with the confinement restrictions associated\n+     * with the provided arena: that is, if the provided arena is a\n+     * {@linkplain Arena#ofConfined() confined arena}, the returned segment can only be\n+     * accessed by the arena's owner thread, regardless of the confinement restrictions\n+     * associated with this segment. In other words, this method returns a segment that\n+     * behaves as if it had been allocated using the provided arena.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -162,1 +162,1 @@\n-                (MemorySessionImpl)scope, action);\n+                (MemorySessionImpl)scope, readOnly, action);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,5 @@\n-    public static MemorySegment makeNativeSegmentUnchecked(long min, long byteSize, MemorySessionImpl sessionImpl, Runnable action) {\n+    public static MemorySegment makeNativeSegmentUnchecked(long min,\n+                                                           long byteSize,\n+                                                           MemorySessionImpl sessionImpl,\n+                                                           boolean readOnly,\n+                                                           Runnable action) {\n@@ -67,1 +71,1 @@\n-        return new NativeMemorySegmentImpl(min, byteSize, false, sessionImpl);\n+        return new NativeMemorySegmentImpl(min, byteSize, readOnly, sessionImpl);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/SegmentFactories.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-import static java.lang.foreign.ValueLayout.JAVA_LONG;\n@@ -386,1 +385,6 @@\n-            assertEquals(MemorySegment.ofAddress(42).reinterpret(arena, s -> counter.incrementAndGet()).scope(), arena.scope());\n+            assertEquals(MemorySegment.ofAddress(42).reinterpret(arena, _ -> counter.incrementAndGet()).scope(), arena.scope());\n+            \/\/ check read-only state\n+            assertFalse(MemorySegment.ofAddress(42).reinterpret(100).isReadOnly());\n+            assertTrue(MemorySegment.ofAddress(42).asReadOnly().reinterpret(100).isReadOnly());\n+            assertTrue(MemorySegment.ofAddress(42).asReadOnly().reinterpret(100, Arena.ofAuto(), null).isReadOnly());\n+            assertTrue(MemorySegment.ofAddress(42).asReadOnly().reinterpret(arena, _ -> counter.incrementAndGet()).isReadOnly());\n@@ -388,1 +392,1 @@\n-        assertEquals(counter.get(), 2);\n+        assertEquals(counter.get(), 3);\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}