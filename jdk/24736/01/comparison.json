{"files":[{"patch":"@@ -796,0 +796,1 @@\n+java\/awt\/font\/GlyphVector\/TestGlyphVectorLayout.java 8354987 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Font;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+\n+\/*\n+ * @test\n+ * @bug 4935871\n+ * @summary Check that correct type faces are used regardless of bold\/italic styles\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual\/othervm -Duser.language=ja -Duser.country=JP BoldItalicFontTest\n+ *\/\n+\n+public class BoldItalicFontTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                This test is reproduced with a non-English user locale only.\n+                All the letters \"X\" in the first line should be in serif font.\n+                All the letters \"X\" in the second line should be in sans-serif font.\n+\n+                If so, press Pass, else press Fail.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(BoldItalicFontTest::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        String[] faces = { Font.SERIF, Font.SANS_SERIF };\n+        int[] styles = { 0, Font.BOLD, Font.ITALIC, Font.BOLD | Font.ITALIC };\n+\n+        Frame f = new Frame(\"BoldItalicFontTest Test UI\");\n+        f.setLayout(new GridLayout(faces.length, styles.length));\n+        for (int fn = 0; fn < faces.length; fn++) {\n+            for (int sn = 0; sn < styles.length; sn++) {\n+                Label l = new Label(\"X\");\n+                Font f1 = new Font(faces[fn], styles[sn], 36);\n+                l.setFont(f1);\n+                f.add(l);\n+            }\n+        }\n+        f.setSize(300, 300);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/BoldItalicFontTest.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2002, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.font.GlyphVector;\n+import java.awt.font.FontRenderContext;\n+import java.awt.geom.AffineTransform;\n+import java.awt.geom.Rectangle2D;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4615017\n+ * @summary Display two GlyphVectors, and ensure they are of the same length.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestGlyphVectorLayout\n+ *\/\n+\n+public class TestGlyphVectorLayout extends JPanel {\n+    private final Font font;\n+    private final FontRenderContext frc;\n+    private final String text;\n+\n+    private GlyphVector aftergv;\n+    private Rectangle pbounds;\n+    private Rectangle2D vbounds;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                Two lines of text should appear, the top one with boxes\n+                (red and blue) around it.\n+                The two lines should be of the same length, and the boxes around the\n+                top line should 'fit' the text with no empty space between the end\n+                of the text and the box.\n+\n+                Pass the test if this is true.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(TestGlyphVectorLayout::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private TestGlyphVectorLayout() {\n+        setBackground(Color.WHITE);\n+        font = new Font(Font.DIALOG, Font.PLAIN, 24);\n+        frc = new FontRenderContext(null, false, false);\n+        text = \"this is a test of glyph vector\";\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(550, 150);\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        super.paint(g);\n+        Graphics2D g2d = (Graphics2D) g;\n+\n+        float x = 50;\n+        float y = 50;\n+        AffineTransform oldtx = g2d.getTransform();\n+        g2d.translate(x, y);\n+        g2d.scale(1.5, 1.5);\n+\n+        g2d.setRenderingHint(RenderingHints.KEY_FRACTIONALMETRICS,\n+                             RenderingHints.VALUE_FRACTIONALMETRICS_OFF);\n+        g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,\n+                             RenderingHints.VALUE_TEXT_ANTIALIAS_OFF);\n+\n+        g2d.setColor(Color.BLACK);\n+\n+        GlyphVector gv = font.createGlyphVector(frc, text); \/\/ new each time\n+        g2d.drawGlyphVector(gv, 0, 0);\n+\n+        if (vbounds == null) {\n+            vbounds = gv.getVisualBounds();\n+            pbounds = gv.getPixelBounds(g2d.getFontRenderContext(), 0, 0);\n+            aftergv = gv;\n+        }\n+        g2d.drawGlyphVector(aftergv, 0, 30);\n+\n+        g2d.setColor(Color.BLUE);\n+        g2d.draw(vbounds);\n+\n+        g2d.setTransform(oldtx);\n+        g2d.setColor(Color.RED);\n+        g2d.draw(pbounds);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/GlyphVector\/TestGlyphVectorLayout.java","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Font;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.font.GlyphVector;\n+import java.awt.font.FontRenderContext;\n+import java.awt.geom.Point2D;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4180379\n+ * @summary set the positions of glyphs in the GlyphVector to other than\n+ *          their default x, y positions, and verify that the rendered glyphs are\n+ *          in the new positions, not the default positions.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestSetGlyphPositions\n+ *\/\n+\n+public class TestSetGlyphPositions extends JPanel {\n+    GlyphVector gv = null;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+            'TopLeft text and >' should appear towards the top left of the frame,\n+            and '< and BottomRight text' should appear towards the bottom right.\n+\n+            There should be some space between the '>' and '<' symbols, both vertically\n+            and horizontally.\n+\n+            Pass the test if this is true.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(TestSetGlyphPositions::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public TestSetGlyphPositions() {\n+        setBackground(Color.WHITE);\n+        setSize(550, 150);\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(550, 150);\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        super.paint(g);\n+        Graphics2D g2d = (Graphics2D) g;\n+\n+        if (gv == null) {\n+            Font font = new Font(Font.DIALOG, Font.PLAIN, 36);\n+            FontRenderContext frc = g2d.getFontRenderContext();\n+            String str = \"TopLeft><BottomRight\";\n+\n+            gv = font.createGlyphVector(frc, str);\n+            for (int i = str.indexOf(\"<\"); i < gv.getNumGlyphs(); ++i) {\n+                Point2D loc = gv.getGlyphPosition(i);\n+                loc.setLocation(loc.getX() + 50, loc.getY() + 50);\n+                gv.setGlyphPosition(i, loc);\n+            }\n+        }\n+        g2d.drawGlyphVector(gv, 50f, 50f);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/GlyphVector\/TestSetGlyphPositions.java","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.text.AttributedString;\n+import java.awt.font.TextAttribute;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4188328\n+ * @summary In this bug, a text string is displayed rotated. Without the\n+ *          fix, on Windows, the string was not displayed (boxes were\n+ *          displayed which denote an unprintable character). On Solaris\n+ *          2.5.1, the characters were displayed, but not rotated. Now\n+ *          on all platforms, the string is displayed correctly rotated.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual RotateTest1\n+ *\/\n+\n+public class RotateTest1 extends JPanel {\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                In this test, a text string is displayed rotated.\n+\n+                Without the fix, on Windows, the string was not displayed\n+                (boxes were displayed which denote an unprintable character).\n+\n+                On Solaris 2.5.1, the characters were displayed, but not rotated.\n+\n+                Now on all platforms, the string is displayed rotated.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(RotateTest1::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public RotateTest1() {\n+        setBackground(Color.WHITE);\n+        setDoubleBuffered(true);\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(400, 520);\n+    }\n+\n+    @Override\n+    public void paint(Graphics g) {\n+        Graphics2D g2d = (Graphics2D) g;\n+        Dimension d = getSize();\n+\n+        g.setColor(getBackground());\n+        g.fillRect(0, 0, d.width, d.height);\n+\n+        \/\/ start java2d test code\n+        paintRotatedTextTest(g2d);\n+    }\n+\n+    private void paintRotatedTextTest(Graphics2D g2d) {\n+        AttributedString testString =\n+                new AttributedString(\"This is some text. Blablablabla\");\n+        testString.addAttribute(TextAttribute.SIZE, 32f);\n+\n+        g2d.setPaint(Color.BLACK);\n+        g2d.rotate(Math.PI \/ 3);\n+        g2d.drawString(testString.getIterator(), 100.0f, 10.0f);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/Rotate\/RotateTest1.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,199 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ *\n+ * Copyright 1999 IBM Corp.  All Rights Reserved.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.Image;\n+import java.awt.Shape;\n+import java.text.AttributedString;\n+import java.awt.font.FontRenderContext;\n+import java.awt.font.GraphicAttribute;\n+import java.awt.font.ImageGraphicAttribute;\n+import java.awt.font.ShapeGraphicAttribute;\n+import java.awt.font.TextLayout;\n+import java.awt.font.TextAttribute;\n+import java.awt.geom.Rectangle2D;\n+import java.awt.image.BufferedImage;\n+\n+import javax.swing.JPanel;\n+\n+\/*\n+ * @test\n+ * @bug 4202637\n+ * @summary This test ensures that graphics in a TextLayout are positioned correctly.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TestGraphicPlacement\n+ *\/\n+\n+public class TestGraphicPlacement extends JPanel {\n+    private static final int GRAPHIC_COUNT = 5;\n+    private static final float BASE_SIZE = 5;\n+    private static final boolean SHAPE = false;\n+    private static final boolean IMAGE = true;\n+\n+    private final AttributedString[] strings;\n+\n+    public static void main(String[] args) throws Exception {\n+        final String INSTRUCTIONS = \"\"\"\n+                This test has text strings enclosed in boxes, in each box there is\n+                a sequence of square graphics to the right of the text string.\n+\n+                This test is concerned with the placement of these graphics relative\n+                to the text string.\n+\n+                Squares after 'TOP' should be placed in the top-right corner of the\n+                box with their tops aligned to the top of the box.\n+\n+                Graphics after 'BOTTOM' should be placed in the bottom-right corner of its\n+                box with their bottoms aligned to the bottom of the box.\n+\n+                Graphics after 'BASELINE' should have their tops (not bottoms) aligned to\n+                the baseline of the text.\n+\n+                If all these are true, pass the test.\"\"\";\n+\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(TestGraphicPlacement::new)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public TestGraphicPlacement() {\n+        setBackground(Color.WHITE);\n+\n+        strings = new AttributedString[]{\n+                makeString(GraphicAttribute.TOP_ALIGNMENT, SHAPE),\n+                makeString(GraphicAttribute.BOTTOM_ALIGNMENT, SHAPE),\n+                makeString(GraphicAttribute.ROMAN_BASELINE, SHAPE),\n+                makeString(GraphicAttribute.TOP_ALIGNMENT, IMAGE),\n+                makeString(GraphicAttribute.BOTTOM_ALIGNMENT, IMAGE),\n+                makeString(GraphicAttribute.ROMAN_BASELINE, IMAGE),\n+        };\n+    }\n+\n+    @Override\n+    public Dimension getPreferredSize() {\n+        return new Dimension(350, 450);\n+    }\n+\n+    private Image makeImage(int size) {\n+        Image img = new BufferedImage(size, size, BufferedImage.TYPE_INT_RGB);\n+        Graphics2D g2d = (Graphics2D) img.getGraphics();\n+        g2d.setColor(Color.BLUE);\n+        g2d.fillRect(0, 0, size, size);\n+        g2d.setColor(Color.RED);\n+        g2d.drawRect(0, 0, size - 1, size - 1);\n+        return img;\n+    }\n+\n+    \/**\n+     * Create an AttributedString with a descriptive word (TOP, BOTTOM,\n+     * or BASELINE) and several graphics of varying sizes following the\n+     * word.\n+     *\n+     * @param alignment the alignment of the graphics\n+     * @param image     whether to create Shape or Image graphics\n+     *\/\n+    private AttributedString makeString(int alignment, boolean image) {\n+        String name;\n+        if (alignment == GraphicAttribute.TOP_ALIGNMENT) {\n+            name = \"TOP\";\n+        } else if (alignment == GraphicAttribute.BOTTOM_ALIGNMENT) {\n+            name = \"BOTTOM\";\n+        } else {\n+            name = \"BASELINE\";\n+        }\n+\n+        \/\/ Append the Unicode graphic replacement character to the name.\n+        String nameWithUnicode = name.concat(\"\\uFFFC\".repeat(GRAPHIC_COUNT));\n+\n+        AttributedString as = new AttributedString(nameWithUnicode);\n+\n+        \/\/ Make the descriptive text large.\n+        as.addAttribute(TextAttribute.SIZE, 48f, 0, name.length());\n+\n+        \/\/ Add the graphic attributes to the end of the AttributedString.\n+        for (int i = 0; i < GRAPHIC_COUNT; i++) {\n+\n+            float size = (i + 1) * BASE_SIZE;\n+            GraphicAttribute attribute;\n+\n+            if (image == IMAGE) {\n+                Image img = makeImage((int) size);\n+                attribute = new ImageGraphicAttribute(img, alignment);\n+            } else {\n+                Shape shape = new Rectangle2D.Float(0, 0, size, size);\n+                attribute = new ShapeGraphicAttribute(shape,\n+                                                      alignment,\n+                                                      ShapeGraphicAttribute.STROKE);\n+            }\n+\n+            as.addAttribute(TextAttribute.CHAR_REPLACEMENT,\n+                    attribute,\n+                    i + name.length(),\n+                    i + name.length() + 1);\n+        }\n+\n+        return as;\n+    }\n+\n+    \/**\n+     * Draw each AttributedString, with a bounding box enclosing\n+     * the string.\n+     *\/\n+    @Override\n+    public void paint(Graphics g) {\n+        super.paint(g);\n+        Graphics2D g2d = (Graphics2D) g;\n+        FontRenderContext frc = g2d.getFontRenderContext();\n+\n+        final float drawX = 20;\n+        float drawY = 20;\n+\n+        for (int i = 0; i < strings.length; i++) {\n+            TextLayout layout = new TextLayout(strings[i].getIterator(), frc);\n+            float ascent = layout.getAscent();\n+            drawY += ascent;\n+\n+            Rectangle2D boundsRect = new Rectangle2D.Float(drawX,\n+                    drawY - ascent,\n+                    layout.getAdvance(),\n+                    ascent + layout.getDescent());\n+            g2d.draw(boundsRect);\n+            layout.draw(g2d, drawX, drawY);\n+            drawY += layout.getDescent() + layout.getLeading();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/font\/TestGraphicPlacement.java","additions":199,"deletions":0,"binary":false,"changes":199,"status":"added"}]}