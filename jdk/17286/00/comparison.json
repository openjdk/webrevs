{"files":[{"patch":"@@ -33,1 +33,1 @@\n-import java.util.Collections;\n+import java.util.Comparator;\n@@ -44,0 +44,1 @@\n+import java.util.function.ToIntFunction;\n@@ -989,4 +990,1 @@\n-            if (deferredDiagnosticHandler != null) {\n-                deferredDiagnosticHandler.reportDeferredDiagnostics();\n-                log.popDiagnosticHandler(deferredDiagnosticHandler);\n-            }\n+            reportDeferredDiagnosticAndClearHandler();\n@@ -1199,2 +1197,1 @@\n-                deferredDiagnosticHandler.reportDeferredDiagnostics();\n-                log.popDiagnosticHandler(deferredDiagnosticHandler);\n+                reportDeferredDiagnosticAndClearHandler();\n@@ -1236,2 +1233,1 @@\n-                    deferredDiagnosticHandler.reportDeferredDiagnostics();\n-                    log.popDiagnosticHandler(deferredDiagnosticHandler);\n+                    reportDeferredDiagnosticAndClearHandler();\n@@ -1271,2 +1267,1 @@\n-                        deferredDiagnosticHandler.reportDeferredDiagnostics();\n-                        log.popDiagnosticHandler(deferredDiagnosticHandler);\n+                        reportDeferredDiagnosticAndClearHandler();\n@@ -1289,4 +1284,1 @@\n-            if (deferredDiagnosticHandler != null) {\n-                deferredDiagnosticHandler.reportDeferredDiagnostics();\n-                log.popDiagnosticHandler(deferredDiagnosticHandler);\n-            }\n+            reportDeferredDiagnosticAndClearHandler();\n@@ -1862,0 +1854,12 @@\n+    public void reportDeferredDiagnosticAndClearHandler() {\n+        if (deferredDiagnosticHandler != null) {\n+            ToIntFunction<JCDiagnostic> diagValue =\n+                    d -> d.isFlagSet(RECOVERABLE) ? 1 : 0;\n+            Comparator<JCDiagnostic> compareDiags =\n+                    (d1, d2) -> diagValue.applyAsInt(d1) - diagValue.applyAsInt(d2);\n+            deferredDiagnosticHandler.reportDeferredDiagnostics(compareDiags);\n+            log.popDiagnosticHandler(deferredDiagnosticHandler);\n+            deferredDiagnosticHandler = null;\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":19,"deletions":15,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -1271,3 +1271,1 @@\n-                deferredDiagnosticHandler.reportDeferredDiagnostics();\n-                log.popDiagnosticHandler(deferredDiagnosticHandler);\n-                compiler.setDeferredDiagnosticHandler(null);\n+                compiler.reportDeferredDiagnosticAndClearHandler();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Comparator;\n@@ -175,0 +176,10 @@\n+\n+        \/** Report selected deferred diagnostics. *\/\n+        public void reportDeferredDiagnostics(Comparator<JCDiagnostic> order) {\n+            JCDiagnostic[] diags = deferred.toArray(s -> new JCDiagnostic[s]);\n+            Arrays.sort(diags, order);\n+            for (JCDiagnostic d : diags) {\n+                prev.report(d);\n+            }\n+            deferred = null; \/\/ prevent accidental ongoing use\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,110 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8323057\n+ * @summary javac should print not-recoverable errors before recoverable errors\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *          jdk.compiler\/com.sun.tools.javac.main\n+ * @build toolbox.TestRunner toolbox.ToolBox TestErrorOrder\n+ * @run main TestErrorOrder\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.annotation.processing.AbstractProcessor;\n+import javax.annotation.processing.RoundEnvironment;\n+import javax.annotation.processing.SupportedAnnotationTypes;\n+import javax.lang.model.SourceVersion;\n+import javax.lang.model.element.TypeElement;\n+\n+import toolbox.JavacTask;\n+import toolbox.Task;\n+import toolbox.Task.Expect;\n+import toolbox.TestRunner;\n+import toolbox.TestRunner.Test;\n+import toolbox.ToolBox;\n+\n+public class TestErrorOrder extends TestRunner {\n+    public static void main(String... args) throws Exception {\n+        new TestErrorOrder().runTests(m -> new Object[] { Paths.get(m.getName()) });\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+\n+    public TestErrorOrder() {\n+        super(System.err);\n+    }\n+\n+    @Test\n+    public void testErrorsAfter(Path outerBase) throws Exception {\n+        Path src = outerBase.resolve(\"src\");\n+        tb.writeJavaFiles(src,\n+                          \"package t;\\n\" +\n+                          \"public class T {\\n\" +\n+                          \"    public void test(Undefined u) { }\\n\" +\n+                          \"    \\n\" +\n+                          \"    @SuppressWarnings(\\\"\\\")\\n\" +\n+                          \"    @SuppressWarnings(\\\"\\\")\\n\" +\n+                          \"    public void test() { }\\n\" +\n+                          \"}\");\n+        Path classes = outerBase.resolve(\"classes\");\n+        Files.createDirectories(classes);\n+        List<String> actual = new JavacTask(tb)\n+                .outdir(classes.toString())\n+                .options(\"-XDrawDiagnostics\",\n+                         \"-processor\", \"TestErrorOrder$P\",\n+                         \"-processorpath\", System.getProperty(\"test.classes\"))\n+                .files(tb.findJavaFiles(src))\n+                .run(Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+        List<String> expected = List.of(\n+                \"T.java:6:5: compiler.err.duplicate.annotation.missing.container: java.lang.SuppressWarnings\",\n+                \"T.java:3:22: compiler.err.cant.resolve.location: kindname.class, Undefined, , , (compiler.misc.location: kindname.class, t.T, null)\",\n+                \"2 errors\"\n+        );\n+\n+        tb.checkEqual(expected, actual);\n+    }\n+\n+    @SupportedAnnotationTypes(\"*\")\n+    public static class P extends AbstractProcessor {\n+        @Override\n+        public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {\n+            return false;\n+        }\n+\n+        @Override\n+        public SourceVersion getSupportedSourceVersion() {\n+            return SourceVersion.latest();\n+        }\n+    }\n+\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/errors\/TestErrorOrder.java","additions":110,"deletions":0,"binary":false,"changes":110,"status":"added"}]}