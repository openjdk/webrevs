{"files":[{"patch":"@@ -352,0 +352,4 @@\n+            \/\/ Adjust popup location to match popup for non-editable without border\n+            if (!comboBox.isEditable()) {\n+                r.y += (comboBoxInsets.top + comboBoxInsets.bottom) \/ 2;\n+            }\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaComboBoxPopup.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.awt.GridLayout;\n@@ -52,4 +53,5 @@\n-    private static JComboBox cb1, cb2;\n-    private static String lafName, cb1Str, cb2Str;\n-    private static Point cb1Point, cb2Point;\n-    private static int cb1Width, cb1Height, cb2Width, cb2Height;\n+    private static JComboBox cb1, cb2, cb3, cb4;\n+    private static String lafName, cb1Str, cb2Str, cb3Str, cb4Str;\n+    private static Point cb1Point, cb2Point, cb3Point, cb4Point;\n+    private static int cb1Width, cb1Height, cb2Width, cb2Height,\n+            cb3Width, cb3Height, cb4Width, cb4Height;\n@@ -67,52 +69,86 @@\n-        lafName = laf.getName();\n-        SwingUtilities.invokeAndWait(() -> {\n-            setLookAndFeel(laf);\n-            panel = new JPanel();\n-            String[] comboStrings = {\"One\", \"Two\", \"Three\"};\n-            cb1 = new JComboBox(comboStrings);\n-            cb1.setEditable(true);\n-            cb1.setBorder(BorderFactory.createTitledBorder(\n-                    \"Editable JComboBox\"));\n-\n-            cb2 = new JComboBox(comboStrings);\n-            cb2.setEditable(true);\n-\n-            panel.add(cb1);\n-            panel.add(cb2);\n-\n-            \/\/ Change starting selection to check if the position of the\n-            \/\/ first selection item is in the correct position on screen.\n-            cb1.setSelectedIndex(1);\n-            cb2.setSelectedIndex(1);\n-\n-            frame = new JFrame();\n-            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n-            frame.add(panel);\n-            frame.pack();\n-            frame.setLocationRelativeTo(null);\n-            frame.setVisible(true);\n-        });\n-\n-        robot.delay(1000);\n-        robot.waitForIdle();\n-\n-        SwingUtilities.invokeAndWait(() -> {\n-            cb1Point = cb1.getLocationOnScreen();\n-            cb1Width = cb1.getWidth();\n-            cb1Height = cb1.getHeight();\n-            cb2Point = cb2.getLocationOnScreen();\n-            cb2Width = cb2.getWidth();\n-            cb2Height = cb2.getHeight();\n-        });\n-\n-        runTestOnComboBox(cb1Point, cb1Width, cb1Height);\n-        runTestOnComboBox(cb2Point, cb2Width, cb2Height);\n-\n-        SwingUtilities.invokeAndWait(() -> {\n-            cb1Str = cb1.getSelectedItem().toString();\n-            cb2Str = cb2.getSelectedItem().toString();\n-        });\n-\n-        checkSelection(cb1Str, cb2Str);\n-\n-        SwingUtilities.invokeAndWait(() -> frame.dispose());\n+            try {\n+                lafName = laf.getName();\n+                SwingUtilities.invokeAndWait(() -> {\n+                    setLookAndFeel(laf);\n+                    panel = new JPanel();\n+                    GridLayout gridLayout = new GridLayout(2, 2);\n+                    panel.setLayout(gridLayout);\n+                    String[] comboStrings = {\"One\", \"Two\", \"Three\"};\n+\n+                    cb1 = new JComboBox(comboStrings);\n+                    cb1.setEditable(true);\n+                    cb1.setBorder(BorderFactory.createTitledBorder(\n+                            \"Editable JComboBox\"));\n+\n+                    cb2 = new JComboBox(comboStrings);\n+                    cb2.setEditable(true);\n+\n+                    cb3 = new JComboBox(comboStrings);\n+                    cb3.setEditable(false);\n+                    cb3.setBorder(BorderFactory.createTitledBorder(\n+                            \"Non-editable JComboBox\"));\n+\n+                    cb4 = new JComboBox(comboStrings);\n+                    cb4.setEditable(false);\n+\n+                    if (lafName.contains(\"Mac\")) {\n+                        \/\/ By default, non-editable ComboBoxes don't appear\n+                        \/\/ underneath unless this is explicitly set\n+                        cb3.putClientProperty(\"JComboBox.isPopDown\", Boolean.TRUE);\n+                        cb4.putClientProperty(\"JComboBox.isPopDown\", Boolean.TRUE);\n+                    }\n+\n+                    panel.add(cb1);\n+                    panel.add(cb2);\n+                    panel.add(cb3);\n+                    panel.add(cb4);\n+\n+                    \/\/ Change starting selection to check if the position of the\n+                    \/\/ first selection item is in the correct position on screen.\n+                    cb1.setSelectedIndex(1);\n+                    cb2.setSelectedIndex(1);\n+                    cb3.setSelectedIndex(1);\n+                    cb4.setSelectedIndex(1);\n+\n+                    frame = new JFrame();\n+                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                    frame.add(panel);\n+                    frame.pack();\n+                    frame.setLocationRelativeTo(null);\n+                    frame.setVisible(true);\n+                });\n+\n+                robot.delay(1000);\n+                robot.waitForIdle();\n+\n+                SwingUtilities.invokeAndWait(() -> {\n+                    cb1Point = cb1.getLocationOnScreen();\n+                    cb1Width = cb1.getWidth();\n+                    cb1Height = cb1.getHeight();\n+                    cb2Point = cb2.getLocationOnScreen();\n+                    cb2Width = cb2.getWidth();\n+                    cb2Height = cb2.getHeight();\n+                    cb3Point = cb3.getLocationOnScreen();\n+                    cb3Width = cb3.getWidth();\n+                    cb3Height = cb3.getHeight();\n+                    cb4Point = cb4.getLocationOnScreen();\n+                    cb4Width = cb4.getWidth();\n+                    cb4Height = cb4.getHeight();\n+                });\n+\n+                runTestOnComboBox(cb1Point, cb1Width, cb1Height);\n+                runTestOnComboBox(cb2Point, cb2Width, cb2Height);\n+                runTestOnComboBox(cb3Point, cb3Width, cb3Height);\n+                runTestOnComboBox(cb4Point, cb4Width, cb4Height);\n+\n+                SwingUtilities.invokeAndWait(() -> {\n+                    cb1Str = cb1.getSelectedItem().toString();\n+                    cb2Str = cb2.getSelectedItem().toString();\n+                    cb3Str = cb3.getSelectedItem().toString();\n+                    cb4Str = cb4.getSelectedItem().toString();\n+                });\n+\n+                checkSelection(cb1Str, cb2Str, cb3Str, cb4Str);\n+            } finally {\n+                SwingUtilities.invokeAndWait(() -> frame.dispose());\n+            }\n@@ -133,4 +169,22 @@\n-    private static void runTestOnComboBox(Point p, int width, int height) throws IOException {\n-        robot.mouseMove(p.x + width - BUTTON_OFFSET, p.y + (height \/ 2) + POPUP_OFFSET);\n-        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    private static void runTestOnComboBox(Point p, int width, int height) {\n+        if (lafName.equals(\"Mac OS X\")) {\n+            robot.mouseMove(p.x + width - BUTTON_OFFSET,\n+                    p.y + (height \/ 2) + POPUP_OFFSET);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.mouseMove(p.x + (width \/ 2) - BUTTON_OFFSET,\n+                    p.y + height + POPUP_OFFSET - 8);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        } else {\n+            robot.mouseMove(p.x + width - BUTTON_OFFSET,\n+                    p.y + (height \/ 2) + POPUP_OFFSET);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            robot.mouseMove(p.x + (width \/ 2) - BUTTON_OFFSET,\n+                    p.y + height + POPUP_OFFSET);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        }\n@@ -138,4 +192,0 @@\n-        robot.mouseMove(p.x + (width \/ 2) - BUTTON_OFFSET,\n-                p.y + height + POPUP_OFFSET);\n-        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -144,2 +194,4 @@\n-    private static void checkSelection(String s1, String s2) {\n-        if (s1.equals(\"One\") && s2.equals(\"One\")) {\n+    private static void checkSelection(String s1, String s2,\n+                                       String s3, String s4) {\n+        if (s1.equals(\"One\") && s2.equals(\"One\")\n+                && s3.equals(\"One\") && s4.equals(\"One\")) {\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/EditableComboBoxPopupPos.java","additions":118,"deletions":66,"binary":false,"changes":184,"status":"modified"}]}