{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -188,0 +188,6 @@\n+        int popupBoundsY = comboBox.getBounds().height;\n+        if (comboBox.isEditable() && comboBox.getBorder() != null) {\n+            Insets inset = comboBox.getBorder().getBorderInsets(comboBox);\n+            popupBoundsY += inset.top + inset.bottom;\n+        }\n+\n@@ -189,1 +195,1 @@\n-        final Rectangle popupBounds = computePopupBounds(0, comboBox.getBounds().height, popupSize.width, popupSize.height);\n+        final Rectangle popupBounds = computePopupBounds(0, popupBoundsY, popupSize.width, popupSize.height);\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaComboBoxPopup.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @key headful\n+ * @bug 8302558\n+ * @summary Tests if the Popup from an editable ComboBox with a border\n+ *          is in the correct position\n+ * @run main EditableComboBoxPopupPos\n+ *\/\n+\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.BorderFactory;\n+import javax.swing.JComboBox;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+public class EditableComboBoxPopupPos {\n+    private static Robot robot;\n+    private static JFrame frame;\n+    private static JPanel panel;\n+    private static JComboBox cb1, cb2;\n+    private static String lafName;\n+\n+    private static final int BUTTON_OFFSET = 10;\n+    private static final int POPUP_OFFSET = 5;\n+\n+    public static void main(String[] args) throws InterruptedException, InvocationTargetException {\n+        try {\n+            robot = new Robot();\n+            robot.setAutoDelay(100);\n+            robot.setAutoWaitForIdle(true);\n+\n+            for (UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {\n+                lafName = laf.getName().equals(\"CDE\/Motif\") ? \"Motif\" : laf.getName();\n+                SwingUtilities.invokeAndWait(() -> {\n+                    setLookAndFeel(laf);\n+                    panel = new JPanel();\n+                    String[] comboStrings = {\"One\", \"Two\", \"Three\"};\n+                    cb1 = new JComboBox(comboStrings);\n+                    cb1.setEditable(true);\n+                    cb1.setBorder(BorderFactory.createTitledBorder(\n+                            \"Editable JComboBox\"));\n+\n+                    cb2 = new JComboBox(comboStrings);\n+                    cb2.setEditable(true);\n+\n+                    panel.add(cb1);\n+                    panel.add(cb2);\n+\n+                    frame = new JFrame();\n+                    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+                    frame.add(panel);\n+                    frame.pack();\n+                    frame.setLocationRelativeTo(null);\n+                    frame.setVisible(true);\n+                });\n+\n+                \/\/ Change starting selection to check if the position of the\n+                \/\/ first selection item is in the correct position on screen.\n+                cb1.setSelectedIndex(1);\n+                cb2.setSelectedIndex(1);\n+\n+                runTestOnComboBox(cb1);\n+                runTestOnComboBox(cb2);\n+\n+                checkSelection(cb1, cb2);\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> frame.dispose());\n+        }\n+    }\n+\n+    private static void setLookAndFeel(UIManager.LookAndFeelInfo laf) {\n+        try {\n+            UIManager.setLookAndFeel(laf.getClassName());\n+        } catch (UnsupportedLookAndFeelException ignored){\n+            System.out.println(\"Unsupported LookAndFeel: \" + laf.getClassName());\n+        } catch (ClassNotFoundException | InstantiationException |\n+                IllegalAccessException e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    private static void runTestOnComboBox(JComboBox cb) {\n+        robot.mouseMove(cb.getLocationOnScreen().x + cb.getWidth()\n+                - BUTTON_OFFSET, cb.getLocationOnScreen().y\n+                + POPUP_OFFSET);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseMove(cb.getLocationOnScreen().x\n+                        + (cb.getWidth() \/ 2) - BUTTON_OFFSET,\n+                cb.getLocationOnScreen().y + cb.getHeight()\n+                        + POPUP_OFFSET);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+    }\n+\n+    private static void checkSelection(JComboBox c1, JComboBox c2)\n+            throws InterruptedException, InvocationTargetException {\n+        if (c1.getSelectedItem().toString().equals(\"One\")\n+                && c2.getSelectedItem().toString().equals(\"One\")) {\n+            System.out.println(lafName + \" Passed\");\n+            SwingUtilities.invokeAndWait(() -> frame.dispose());\n+        } else {\n+            SwingUtilities.invokeAndWait(() -> frame.dispose());\n+            throw new RuntimeException(lafName + \" Failed\");\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JComboBox\/EditableComboBoxPopupPos.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"}]}