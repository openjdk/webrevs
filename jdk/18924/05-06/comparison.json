{"files":[{"patch":"@@ -1607,1 +1607,1 @@\n-        addEngine(\"KDF\",                                true,\n+        addEngine(\"KDF\",                                false,\n","filename":"src\/java.base\/share\/classes\/java\/security\/Provider.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,3 +46,3 @@\n- * of methods.  Key derivation algorithm names follow a naming convention\n- * of <I>algorithm<\/I>\/<I>PRF<\/I>.  The algorithm field is the KDF algorithm\n- * (e.g. HKDF, TLS-PRF, PBKDF2, etc.), while the PRF specifier identifies the\n+ * of methods.  Key derivation algorithm names follow a naming convention of\n+ * <I>algorithm<\/I>\/<I>PRF<\/I>.  The algorithm field is the KDF algorithm (e.g.\n+ * HKDF, TLS-PRF, PBKDF2, etc.), while the PRF specifier identifies the\n@@ -108,1 +108,12 @@\n-        this.lock = new Object();\n+        \/\/ the lock is not needed, because the Spi will already be set in\n+        \/\/ chooseProvider\n+        lock = null;\n+    }\n+\n+    private KDF(Service s, Iterator<Service> t, String algorithm,\n+                AlgorithmParameterSpec algParameterSpec) {\n+        firstService = s;\n+        serviceIterator = t;\n+        this.algorithm = algorithm;\n+        this.algorithmParameterSpec = algParameterSpec;\n+        lock = new Object();\n@@ -115,2 +126,1 @@\n-     * {@code getInstance} calls that created this {@code KDF}\n-     * object.\n+     * {@code getInstance} calls that created this {@code KDF} object.\n@@ -130,0 +140,1 @@\n+        chooseFirstProvider();\n@@ -143,1 +154,3 @@\n-     *     the specified algorithm.\n+     *     the specified algorithm\n+     * @throws NullPointerException\n+     *     if the algorithm is {@code null}\n@@ -172,1 +185,1 @@\n-     *     the specified algorithm.\n+     *     the specified algorithm\n@@ -175,1 +188,3 @@\n-     *     list.\n+     *     list\n+     * @throws NullPointerException\n+     *     if the algorithm is {@code null}\n@@ -205,1 +220,3 @@\n-     *     the specified algorithm.\n+     *     the specified algorithm\n+     * @throws NullPointerException\n+     *     if the algorithm is {@code null}\n@@ -235,1 +252,1 @@\n-     *     the specified algorithm.\n+     *     the specified algorithm\n@@ -238,0 +255,2 @@\n+     * @throws NullPointerException\n+     *     if the algorithm is {@code null}\n@@ -243,8 +262,6 @@\n-        try {\n-            Instance instance = GetInstance.getInstance(\"KDF\", KDFSpi.class,\n-                                                        algorithm,\n-                                                        algParameterSpec);\n-            if (!JceSecurity.canUseProvider(instance.provider)) {\n-                String msg = \"JCE cannot authenticate the provider \"\n-                             + instance.provider.getName();\n-                throw new SecurityException(msg);\n+        \/\/ make sure there is at least one service from a signed provider\n+        Iterator<Service> t = GetInstance.getServices(\"KDF\", algorithm);\n+        while (t.hasNext()) {\n+            Service s = t.next();\n+            if (!JceSecurity.canUseProvider(s.getProvider())) {\n+                continue;\n@@ -252,6 +269,1 @@\n-            return new KDF((KDFSpi) instance.impl, instance.provider, algorithm,\n-                           algParameterSpec);\n-\n-        } catch (NoSuchAlgorithmException nsae) {\n-            throw new NoSuchAlgorithmException(\n-                \"Algorithm \" + algorithm + \" not available\", nsae);\n+            return new KDF(s, t, algorithm, algParameterSpec);\n@@ -259,0 +271,2 @@\n+        throw new NoSuchAlgorithmException\n+                  (\"Algorithm \" + algorithm + \" not available\");\n@@ -280,1 +294,1 @@\n-     *     list.\n+     *     list\n@@ -283,0 +297,2 @@\n+     * @throws NullPointerException\n+     *     if the algorithm is {@code null}\n@@ -325,1 +341,1 @@\n-     *     the specified algorithm.\n+     *     the specified algorithm\n@@ -328,0 +344,2 @@\n+     * @throws NullPointerException\n+     *     if the algorithm is {@code null}\n@@ -364,1 +382,1 @@\n-     * KDF output and according to the derivation parameters.\n+     * KDF output and according to the derivation parameters\n@@ -373,1 +391,1 @@\n-     *     provided at initialization have been processed.\n+     *     provided at initialization have been processed\n@@ -380,2 +398,39 @@\n-        chooseFirstProvider();\n-        return spi.engineDeriveKey(alg, kdfParameterSpec);\n+        synchronized (lock) {\n+            if (spi != null) {\n+                return spi.engineDeriveKey(alg, kdfParameterSpec);\n+            }\n+            Exception lastException = null;\n+            while ((firstService != null) || serviceIterator.hasNext()) {\n+                Service s;\n+                if (firstService != null) {\n+                    s = firstService;\n+                    firstService = null;\n+                } else {\n+                    s = serviceIterator.next();\n+                }\n+                if (!JceSecurity.canUseProvider(s.getProvider())) {\n+                    continue;\n+                }\n+                try {\n+                    KDFSpi spi = (KDFSpi)s.newInstance(algorithmParameterSpec);\n+                    provider = s.getProvider();\n+                    this.spi = spi;\n+                    firstService = null;\n+                    serviceIterator = null;\n+                    return spi.engineDeriveKey(alg, kdfParameterSpec);\n+                } catch (Exception e) {\n+                    if (lastException == null) {\n+                        lastException = e;\n+                    }\n+                }\n+            }\n+            \/\/ no working provider found, fail\n+            if(lastException instanceof InvalidParameterSpecException) {\n+                throw (InvalidParameterSpecException) lastException;\n+            }\n+            if (lastException instanceof RuntimeException) {\n+                throw (RuntimeException)lastException;\n+            }\n+        }\n+        \/\/ should never reach here\n+        return null;\n@@ -394,1 +449,1 @@\n-     * of output from the key derivation function.\n+     * of output from the key derivation function\n@@ -398,1 +453,1 @@\n-     *     is of a type other than \"data\".\n+     *     is of a type other than \"data\"\n@@ -402,1 +457,1 @@\n-     *     objects have been processed.\n+     *     objects have been processed\n@@ -408,2 +463,39 @@\n-        chooseFirstProvider();\n-        return spi.engineDeriveData(kdfParameterSpec);\n+        synchronized (lock) {\n+            if (spi != null) {\n+                return spi.engineDeriveData(kdfParameterSpec);\n+            }\n+            Exception lastException = null;\n+            while ((firstService != null) || serviceIterator.hasNext()) {\n+                Service s;\n+                if (firstService != null) {\n+                    s = firstService;\n+                    firstService = null;\n+                } else {\n+                    s = serviceIterator.next();\n+                }\n+                if (!JceSecurity.canUseProvider(s.getProvider())) {\n+                    continue;\n+                }\n+                try {\n+                    KDFSpi spi = (KDFSpi)s.newInstance(algorithmParameterSpec);\n+                    provider = s.getProvider();\n+                    this.spi = spi;\n+                    firstService = null;\n+                    serviceIterator = null;\n+                    return spi.engineDeriveData(kdfParameterSpec);\n+                } catch (Exception e) {\n+                    if (lastException == null) {\n+                        lastException = e;\n+                    }\n+                }\n+            }\n+            \/\/ no working provider found, fail\n+            if(lastException instanceof InvalidParameterSpecException) {\n+                throw (InvalidParameterSpecException) lastException;\n+            }\n+            if (lastException instanceof RuntimeException) {\n+                throw (RuntimeException)lastException;\n+            }\n+        }\n+        \/\/ should never reach here\n+        return null;\n@@ -463,1 +555,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":128,"deletions":37,"binary":false,"changes":165,"status":"modified"}]}