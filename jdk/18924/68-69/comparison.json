{"files":[{"patch":"@@ -141,1 +141,1 @@\n-                throw new InvalidParameterSpecException(\n+                throw (InvalidParameterSpecException) new InvalidParameterSpecException(\n@@ -143,1 +143,1 @@\n-                    + \" single keys\");\n+                    + \" single keys\").initCause(ike);\n@@ -150,1 +150,1 @@\n-                throw new InvalidParameterSpecException(\n+                throw (InvalidParameterSpecException) new InvalidParameterSpecException(\n@@ -152,1 +152,1 @@\n-                    + \"key or salt material\");\n+                    + \"key or salt material\").initCause(ike);\n@@ -172,4 +172,3 @@\n-                throw new InvalidParameterSpecException(\"Requested length \" +\n-                                                        \"exceeds maximum \"\n-                                                        + \"allowed key stream\"\n-                                                        + \" length\");\n+                throw new InvalidParameterSpecException(\n+                    \"Requested length exceeds maximum allowed key stream \"\n+                    + \"length\");\n@@ -182,1 +181,1 @@\n-                throw new InvalidParameterSpecException(\n+                throw (InvalidParameterSpecException) new InvalidParameterSpecException(\n@@ -184,1 +183,1 @@\n-                    + \"key material\");\n+                    + \"key material\").initCause(ike);\n@@ -202,1 +201,1 @@\n-                throw new InvalidParameterSpecException(\n+                throw (InvalidParameterSpecException) new InvalidParameterSpecException(\n@@ -204,1 +203,1 @@\n-                    + \" single keys\");\n+                    + \" single keys\").initCause(ike);\n@@ -212,4 +211,3 @@\n-                throw new InvalidParameterSpecException(\"Requested length \" +\n-                                                        \"exceeds maximum \"\n-                                                        + \"allowed key stream\"\n-                                                        + \" length\");\n+                throw new InvalidParameterSpecException(\n+                    \"Requested length exceeds maximum allowed key stream \"\n+                    + \"length\");\n@@ -219,4 +217,2 @@\n-                byte[] extractResult = hkdfExtract(inputKeyMaterial,\n-                                                   (salt\n-                                                    == null) ? null :\n-                                                       salt.getEncoded());\n+                byte[] extractResult = hkdfExtract(inputKeyMaterial, (salt\n+                                                                      == null) ? null : salt.getEncoded());\n@@ -227,1 +223,1 @@\n-                throw new InvalidParameterSpecException(\n+                throw (InvalidParameterSpecException) new InvalidParameterSpecException(\n@@ -229,1 +225,1 @@\n-                    + \"the given key or salt material\");\n+                    + \"the given key or salt material\").initCause(ike);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HkdfKeyDerivation.java","additions":18,"deletions":22,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -47,1 +47,0 @@\n- * <p>\n@@ -75,1 +74,1 @@\n-     * Derive a key, returned as a {@code SecretKey}.\n+     * Derives a key, returned as a {@code SecretKey}.\n@@ -77,2 +76,2 @@\n-     * The {@code deriveKey} method may be called multiple times once a\n-     * {@code KDF} object is initialized.\n+     * The {@code deriveKey} method may be called multiple times on a particular\n+     * {@code KDF} instance.\n@@ -81,1 +80,2 @@\n-     * performing the derive is not selected until the method is called.\n+     * performing the derive is not selected until the method is called. Once a\n+     * provider is selected, it cannot be changed.\n@@ -84,1 +84,2 @@\n-     *     the algorithm of the resultant key object (may not be {@code null})\n+     *     the algorithm of the resultant {@code SecretKey} object (may not be\n+     *     {@code null})\n@@ -86,1 +87,1 @@\n-     *     derivation parameters (may not be {@code null})\n+     *     derivation parameters\n@@ -89,1 +90,1 @@\n-     *     KDF output and according to the derivation parameters.\n+     *     KDF output and according to the derivation parameters\n@@ -93,2 +94,1 @@\n-     *     invalid or incorrect for the type of key to be derived, or specifies\n-     *     a type of output that is not a key (e.g. raw data)\n+     *     invalid or incorrect for the type of key to be derived\n@@ -103,1 +103,1 @@\n-     * Obtain raw data from a key derivation function.\n+     * Obtains raw data from a key derivation function.\n@@ -105,2 +105,2 @@\n-     * The {@code deriveData} method may be called multiple times once a\n-     * {@code KDF} object is initialized.\n+     * The {@code deriveData} method may be called multiple times on a\n+     * particular {@code KDF} instance.\n@@ -109,1 +109,2 @@\n-     * performing the derive is not selected until the method is called.\n+     * performing the derive is not selected until the method is called. Once a\n+     * provider is selected, it cannot be changed.\n@@ -112,1 +113,1 @@\n-     *     derivation parameters (may not be {@code null})\n+     *     derivation parameters\n@@ -114,3 +115,3 @@\n-     * @return a byte array whose length matches the length field in the\n-     *     processed {@code KDFParameterSpec} and containing the next bytes of\n-     *     output from the key derivation function.\n+     * @return a byte array whose length matches the specified length in the\n+     *     processed {@code KDFParameterSpec} and containing the output from the\n+     *     key derivation function\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDFSpi.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"}]}