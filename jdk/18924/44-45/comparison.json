{"files":[{"patch":"@@ -49,3 +49,3 @@\n- * This class implements the HKDF-Extract and HKDF-Expand functions from RFC 5869.  This\n- * implementation provides the complete Extract-then-Expand HKDF function as well as Extract-only\n- * and Expand-only variants.\n+ * This class implements the HKDF-Extract and HKDF-Expand functions from RFC\n+ * 5869.  This implementation provides the complete Extract-then-Expand HKDF\n+ * function as well as Extract-only and Expand-only variants.\n@@ -55,16 +55,2 @@\n-    protected Mac hmacObj;\n-    protected int hmacLen;\n-    protected String hmacAlgName;\n-    protected List<SecretKey> ikms;\n-    protected List<SecretKey> salts;\n-    protected SecretKey initialKeyMaterial;\n-    protected SecretKey salt;\n-    protected SecretKey pseudoRandomKey;\n-    protected byte[] info;\n-    protected int length;\n-\n-    protected enum HKDF_TYPE {\n-        EXTRACT, EXPAND, EXTRACTEXPAND\n-    }\n-\n-    protected HKDF_TYPE hkdfType;\n+    protected final int hmacLen;\n+    protected final String hmacAlgName;\n@@ -79,1 +65,2 @@\n-     *     if the initialization parameters are inappropriate for this {@code KDFSpi}\n+     *     if the initialization parameters are inappropriate for this\n+     *     {@code KDFSpi}\n@@ -81,1 +68,2 @@\n-    HkdfKeyDerivation(AlgorithmParameterSpec algParameterSpec)\n+    HkdfKeyDerivation(String hmacAlgName, int hmacLen,\n+                      AlgorithmParameterSpec algParameterSpec)\n@@ -84,0 +72,2 @@\n+        this.hmacAlgName = hmacAlgName;\n+        this.hmacLen = hmacLen;\n@@ -97,1 +87,2 @@\n-    protected SecretKey engineDeriveKey(String alg, KDFParameterSpec kdfParameterSpec)\n+    protected SecretKey engineDeriveKey(String alg,\n+                                        KDFParameterSpec kdfParameterSpec)\n@@ -100,5 +91,4 @@\n-        try {\n-            \/\/ set up the HMAC instance\n-            hmacLen = setupHMAC(hmacAlgName);\n-        } catch (NoSuchAlgorithmException nsae) {\n-            throw new ProviderException(nsae);\n+        if (alg == null || alg.isEmpty()) {\n+            throw new InvalidParameterSpecException(\n+                \"the algorithm for the resultant SecretKey may not be null or\"\n+                + \" empty\");\n@@ -107,13 +97,1 @@\n-        \/\/ inspect KDFParameterSpec object\n-        inspectKDFParameterSpec(kdfParameterSpec);\n-\n-        if (hkdfType == HKDF_TYPE.EXTRACT) {\n-            \/\/ perform extract\n-            try {\n-                byte[] extractResult = hkdfExtract(initialKeyMaterial,\n-                                                   (salt == null) ? null : salt.getEncoded());\n-                return new SecretKeySpec(extractResult, alg);\n-            } catch (InvalidKeyException ike) {\n-                throw new InvalidParameterSpecException(\n-                    \"an HKDF Extract could not be initialized with the given key or salt material\");\n-            }\n+        return new SecretKeySpec(engineDeriveData(kdfParameterSpec), alg);\n@@ -121,27 +99,0 @@\n-        } else if (hkdfType == HKDF_TYPE.EXPAND) {\n-            \/\/ perform expand\n-            try {\n-                byte[] expandResult = hkdfExpand(this.pseudoRandomKey, this.info, this.length);\n-                return new SecretKeySpec(expandResult, 0, this.length, alg);\n-            } catch (InvalidKeyException ike) {\n-                throw new InvalidParameterSpecException(\n-                    \"an HKDF Expand could not be initialized with the given key material\");\n-            }\n-\n-        } else if (hkdfType == HKDF_TYPE.EXTRACTEXPAND) {\n-            \/\/ perform extract and then expand\n-            try {\n-                byte[] extractResult = hkdfExtract(initialKeyMaterial,\n-                                                   (salt == null) ? null : salt.getEncoded());\n-                this.pseudoRandomKey = new SecretKeySpec(extractResult, alg);\n-                byte[] expandResult = hkdfExpand(this.pseudoRandomKey, this.info, this.length);\n-                return new SecretKeySpec(expandResult, 0, this.length, alg);\n-            } catch (InvalidKeyException ike) {\n-                throw new InvalidParameterSpecException(\n-                    \"an HKDF ExtractExpand could not be initialized with the given key or salt \"\n-                    + \"material\");\n-            }\n-        }\n-\n-        throw new InvalidParameterSpecException(\n-            \"an HKDF could not be initialized with the given KDFParameterSpec\");\n@@ -164,26 +115,17 @@\n-\n-        try {\n-            \/\/ set up the HMAC instance\n-            hmacLen = setupHMAC(hmacAlgName);\n-        } catch (NoSuchAlgorithmException nsae) {\n-            throw new ProviderException(nsae);\n-        }\n-\n-        \/\/ inspect KDFParameterSpec object\n-        inspectKDFParameterSpec(kdfParameterSpec);\n-\n-        if (hkdfType == HKDF_TYPE.EXTRACT) {\n-            \/\/ perform extract\n-            try {\n-                return hkdfExtract(initialKeyMaterial, (salt == null) ? null : salt.getEncoded());\n-            } catch (InvalidKeyException ike) {\n-                throw new InvalidParameterSpecException(\n-                    \"an HKDF Extract could not be initialized with the given key or salt material\");\n-            }\n-\n-        } else if (hkdfType == HKDF_TYPE.EXPAND) {\n-            \/\/ perform expand\n-            try {\n-                return Arrays.copyOf(hkdfExpand(this.pseudoRandomKey, this.info, this.length),\n-                                     this.length);\n-            } catch (InvalidKeyException ike) {\n+        List<SecretKey> ikms;\n+        List<SecretKey> salts;\n+        SecretKey initialKeyMaterial;\n+        SecretKey salt;\n+        SecretKey pseudoRandomKey;\n+        byte[] info;\n+        int length;\n+        \/\/ A switch would be nicer, but we may need to backport this before\n+        \/\/ JDK 17\n+        \/\/ Also, JEP 305 came out in JDK 14, so we can't declare a variable\n+        \/\/ in instanceof either\n+        if (kdfParameterSpec instanceof HKDFParameterSpec.Extract) {\n+            HKDFParameterSpec.Extract anExtract =\n+                (HKDFParameterSpec.Extract) kdfParameterSpec;\n+            ikms = anExtract.ikms();\n+            salts = anExtract.salts();\n+            if (isNullOrEmpty(ikms) && isNullOrEmpty(salts)) {\n@@ -191,1 +133,2 @@\n-                    \"an HKDF Expand could not be initialized with the given key material\");\n+                    \"IKM and salt cannot both be null or empty for \"\n+                    + \"HKDFParameterSpec.Extract\");\n@@ -193,3 +136,3 @@\n-\n-        } else if (hkdfType == HKDF_TYPE.EXTRACTEXPAND) {\n-            \/\/ perform extract and then expand\n+            \/\/ we should be able to combine these Lists of keys into single\n+            \/\/ SecretKey Objects,\n+            \/\/ unless we were passed something bogus or an unexportable P11 key\n@@ -197,5 +140,2 @@\n-                byte[] extractResult = hkdfExtract(initialKeyMaterial,\n-                                                   (salt == null) ? null : salt.getEncoded());\n-                this.pseudoRandomKey = new SecretKeySpec(extractResult, \"RAW\");\n-                return Arrays.copyOf(hkdfExpand(this.pseudoRandomKey, this.info, this.length),\n-                                     this.length);\n+                initialKeyMaterial = consolidateKeyMaterial(ikms);\n+                salt = consolidateKeyMaterial(salts);\n@@ -204,25 +144,2 @@\n-                    \"an HKDF ExtractExpand could not be initialized with the given key or salt \"\n-                    + \"material\");\n-            }\n-        }\n-\n-        throw new InvalidParameterSpecException(\n-            \"an HKDF could not be initialized with the given KDFParameterSpec\");\n-    }\n-\n-    protected int setupHMAC(String hmacAlgName) throws NoSuchAlgorithmException {\n-        hmacObj = Mac.getInstance(hmacAlgName);\n-        return hmacObj.getMacLength();\n-    }\n-\n-    protected void inspectKDFParameterSpec(KDFParameterSpec kdfParameterSpec)\n-        throws InvalidParameterSpecException {\n-        \/\/ A switch would be nicer, but we may need to backport this before JDK 17\n-        \/\/ Also, JEP 305 came out in JDK 14, so we can't declare a variable in instanceof either\n-        if (kdfParameterSpec instanceof HKDFParameterSpec.Extract) {\n-            HKDFParameterSpec.Extract anExtract = (HKDFParameterSpec.Extract) kdfParameterSpec;\n-            this.ikms = anExtract.ikms();\n-            this.salts = anExtract.salts();\n-            if (isNullOrEmpty(ikms) && isNullOrEmpty(salts)) {\n-                throw new InvalidParameterSpecException(\n-                    \"IKM and salt cannot both be null or empty for HKDFParameterSpec.Extract\");\n+                    \"Issue encountered when combining ikm or salt values into\"\n+                    + \" single keys\");\n@@ -230,2 +147,1 @@\n-            \/\/ we should be able to combine these Lists of keys into single SecretKey Objects,\n-            \/\/ unless we were passed something bogus or an unexportable P11 key\n+            \/\/ perform extract\n@@ -233,2 +149,2 @@\n-                this.initialKeyMaterial = consolidateKeyMaterial(ikms);\n-                this.salt = consolidateKeyMaterial(salts);\n+                return hkdfExtract(initialKeyMaterial,\n+                                   (salt == null) ? null : salt.getEncoded());\n@@ -237,1 +153,6 @@\n-                    \"Issue encountered when combining ikm or salt values into single keys\");\n+                    \"an HKDF Extract could not be initialized with the given \"\n+                    + \"key or salt material\");\n+            } catch (NoSuchAlgorithmException nsae) {\n+                \/\/ This is bubbling up from the getInstance of the Mac\/Hmac.\n+                \/\/ Since we're defining these values internally, it should be\n+                \/\/ safe to \"eat\" this NSAE.\n@@ -239,1 +160,0 @@\n-            hkdfType = HKDF_TYPE.EXTRACT;\n@@ -241,1 +161,2 @@\n-            HKDFParameterSpec.Expand anExpand = (HKDFParameterSpec.Expand) kdfParameterSpec;\n+            HKDFParameterSpec.Expand anExpand =\n+                (HKDFParameterSpec.Expand) kdfParameterSpec;\n@@ -253,1 +174,2 @@\n-                throw new InvalidParameterSpecException(\"length cannot be <= 0\");\n+                throw new InvalidParameterSpecException(\n+                    \"length cannot be <= 0\");\n@@ -257,1 +179,16 @@\n-                                                        \"exceeds maximum allowed key stream length\");\n+                                                        \"exceeds maximum \"\n+                                                        + \"allowed key stream\"\n+                                                        + \" length\");\n+            }\n+            \/\/ perform expand\n+            try {\n+                return Arrays.copyOf(hkdfExpand(pseudoRandomKey, info, length),\n+                                     length);\n+            } catch (InvalidKeyException ike) {\n+                throw new InvalidParameterSpecException(\n+                    \"an HKDF Expand could not be initialized with the given \"\n+                    + \"key material\");\n+            } catch (NoSuchAlgorithmException nsae) {\n+                \/\/ This is bubbling up from the getInstance of the Mac\/Hmac.\n+                \/\/ Since we're defining these values internally, it should be\n+                \/\/ safe to \"eat\" this NSAE.\n@@ -259,1 +196,0 @@\n-            hkdfType = HKDF_TYPE.EXPAND;\n@@ -267,1 +203,2 @@\n-                    \"IKM and salt cannot both be null for HKDFParameterSpec.ExtractExpand\");\n+                    \"IKM and salt cannot both be null for HKDFParameterSpec\"\n+                    + \".ExtractExpand\");\n@@ -269,1 +206,2 @@\n-            \/\/ we should be able to combine these Lists of keys into single SecretKey Objects,\n+            \/\/ we should be able to combine these Lists of keys into single\n+            \/\/ SecretKey Objects,\n@@ -272,2 +210,2 @@\n-                this.initialKeyMaterial = consolidateKeyMaterial(ikms);\n-                this.salt = consolidateKeyMaterial(salts);\n+                initialKeyMaterial = consolidateKeyMaterial(ikms);\n+                salt = consolidateKeyMaterial(salts);\n@@ -276,1 +214,2 @@\n-                    \"Issue encountered when combining ikm or salt values into single keys\");\n+                    \"Issue encountered when combining ikm or salt values into\"\n+                    + \" single keys\");\n@@ -284,1 +223,2 @@\n-                throw new InvalidParameterSpecException(\"length cannot be <= 0\");\n+                throw new InvalidParameterSpecException(\n+                    \"length cannot be <= 0\");\n@@ -288,1 +228,22 @@\n-                                                        \"exceeds maximum allowed key stream length\");\n+                                                        \"exceeds maximum \"\n+                                                        + \"allowed key stream\"\n+                                                        + \" length\");\n+            }\n+            \/\/ perform extract and then expand\n+            try {\n+                byte[] extractResult = hkdfExtract(initialKeyMaterial,\n+                                                   (salt\n+                                                    == null) ? null :\n+                                                       salt.getEncoded());\n+                pseudoRandomKey = new SecretKeySpec(extractResult, \"RAW\");\n+                return Arrays.copyOf(hkdfExpand(pseudoRandomKey, info, length),\n+                                     length);\n+            } catch (InvalidKeyException ike) {\n+                throw new InvalidParameterSpecException(\n+                    \"an HKDF ExtractExpand could not be initialized with the \"\n+                    + \"given key or salt \"\n+                    + \"material\");\n+            } catch (NoSuchAlgorithmException nsae) {\n+                \/\/ This is bubbling up from the getInstance of the Mac\/Hmac.\n+                \/\/ Since we're defining these values internally, it should be\n+                \/\/ safe to \"eat\" this NSAE.\n@@ -290,4 +251,0 @@\n-            hkdfType = HKDF_TYPE.EXTRACTEXPAND;\n-        } else {\n-            throw new InvalidParameterSpecException(\n-                \"The KDFParameterSpec object was not of a recognized type\");\n@@ -295,0 +252,2 @@\n+        throw new InvalidParameterSpecException(\n+            \"an HKDF could not be initialized with the given KDFParameterSpec\");\n@@ -301,1 +260,2 @@\n-    private SecretKey consolidateKeyMaterial(List<SecretKey> keys) throws InvalidKeyException {\n+    private SecretKey consolidateKeyMaterial(List<SecretKey> keys)\n+        throws InvalidKeyException {\n@@ -313,1 +273,2 @@\n-                    System.arraycopy(workItemBytes, 0, bb, bb.length - workItemBytes.length,\n+                    System.arraycopy(workItemBytes, 0, bb,\n+                                     bb.length - workItemBytes.length,\n@@ -329,2 +290,2 @@\n-     *     the salt value used for HKDF-Extract.  If no salt is to be used a {@code null} value\n-     *     should be provided.\n+     *     the salt value used for HKDF-Extract.  If no salt is to be used a\n+     *     {@code null} value should be provided.\n@@ -335,1 +296,2 @@\n-     *     if an invalid salt was provided through the {@code HkdfParameterSpec}\n+     *     if an invalid salt was provided through the\n+     *     {@code HkdfParameterSpec}\n@@ -337,1 +299,2 @@\n-    protected byte[] hkdfExtract(SecretKey inputKey, byte[] salt) throws InvalidKeyException {\n+    protected byte[] hkdfExtract(SecretKey inputKey, byte[] salt)\n+        throws InvalidKeyException, NoSuchAlgorithmException {\n@@ -342,0 +305,1 @@\n+        Mac hmacObj = Mac.getInstance(hmacAlgName);\n@@ -348,2 +312,3 @@\n-     * Perform the HMAC-Expand operation.  At the end of the operation, the keyStream instance\n-     * variable will contain the complete KDF output based on the input values and desired length.\n+     * Perform the HMAC-Expand operation.  At the end of the operation, the\n+     * keyStream instance variable will contain the complete KDF output based on\n+     * the input values and desired length.\n@@ -354,2 +319,2 @@\n-     *     optional context and application specific information or {@code null} if no info data is\n-     *     provided.\n+     *     optional context and application specific information or {@code null}\n+     *     if no info data is provided.\n@@ -359,3 +324,4 @@\n-     * @return a byte array containing the complete KDF output.  This will be at least as long as\n-     * the requested length in the {@code outLen} parameter, but will be rounded up to the nearest\n-     * multiple of the HMAC output length.\n+     * @return a byte array containing the complete KDF output.  This will be at\n+     *     least as long as the requested length in the {@code outLen}\n+     *     parameter, but will be rounded up to the nearest multiple of the HMAC\n+     *     output length.\n@@ -364,2 +330,2 @@\n-     *     if an invalid key was provided through the {@code HkdfParameterSpec} or derived during\n-     *     the generation of the PRK.\n+     *     if an invalid key was provided through the {@code HkdfParameterSpec}\n+     *     or derived during the generation of the PRK.\n@@ -367,1 +333,2 @@\n-    protected byte[] hkdfExpand(SecretKey prk, byte[] info, int outLen) throws InvalidKeyException {\n+    protected byte[] hkdfExpand(SecretKey prk, byte[] info, int outLen)\n+        throws InvalidKeyException, NoSuchAlgorithmException {\n@@ -369,0 +336,1 @@\n+        Mac hmacObj = Mac.getInstance(hmacAlgName);\n@@ -389,1 +357,2 @@\n-                hmacObj.update(kdfOutput, Math.max(0, offset - hmacLen), tLength);\n+                hmacObj.update(kdfOutput, Math.max(0, offset - hmacLen),\n+                               tLength);\n@@ -409,3 +378,3 @@\n-            throws InvalidAlgorithmParameterException {\n-            super(algParameterSpec);\n-            hmacAlgName = \"HmacSHA256\";\n+            throws InvalidAlgorithmParameterException,\n+                   NoSuchAlgorithmException {\n+            super(\"HmacSHA256\", 32, algParameterSpec);\n@@ -417,3 +386,3 @@\n-            throws InvalidAlgorithmParameterException {\n-            super(algParameterSpec);\n-            hmacAlgName = \"HmacSHA384\";\n+            throws InvalidAlgorithmParameterException,\n+                   NoSuchAlgorithmException {\n+            super(\"HmacSHA384\", 48, algParameterSpec);\n@@ -425,3 +394,3 @@\n-            throws InvalidAlgorithmParameterException {\n-            super(algParameterSpec);\n-            hmacAlgName = \"HmacSHA512\";\n+            throws InvalidAlgorithmParameterException,\n+                   NoSuchAlgorithmException {\n+            super(\"HmacSHA512\", 64, algParameterSpec);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/HkdfKeyDerivation.java","additions":143,"deletions":174,"binary":false,"changes":317,"status":"modified"}]}