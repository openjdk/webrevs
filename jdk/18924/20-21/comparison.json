{"files":[{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/TestHKDF.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+ * @enablePreview\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/TestHKDFInitialization.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,116 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331008\n+ * @library \/test\/lib \/test\/jdk\/security\/unsignedjce\n+ * @build java.base\/javax.crypto.ProviderVerifier\n+ * @run main Delayed\n+ * @summary delayed provider selection\n+ * @enablePreview\n+ *\/\n+import jdk.test.lib.Asserts;\n+\n+import javax.crypto.KDF;\n+import javax.crypto.KDFSpi;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.KDFParameterSpec;\n+import java.security.InvalidAlgorithmParameterException;\n+import java.security.Provider;\n+import java.security.Security;\n+import java.security.spec.AlgorithmParameterSpec;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.security.spec.NamedParameterSpec;\n+import java.util.Objects;\n+\n+public class Delayed {\n+    public static void main(String[] args) throws Exception {\n+        Security.addProvider(new Provider1());\n+        Security.addProvider(new Provider2());\n+        Security.addProvider(new Provider3());\n+        KDF kdf;\n+\n+        kdf = KDF.getInstance(\"X\", NamedParameterSpec.X448);\n+        kdf.deriveData(new KDFParameterSpec() {});\n+        Asserts.assertEquals(kdf.getProviderName(), \"P1\");\n+\n+        kdf = KDF.getInstance(\"X\");\n+        kdf.deriveData(new KDFParameterSpec() {});\n+        Asserts.assertEquals(kdf.getProviderName(), \"P2\");\n+\n+        kdf = KDF.getInstance(\"X\");\n+        kdf.deriveData(null);\n+        Asserts.assertEquals(kdf.getProviderName(), \"P3\");\n+    }\n+    public static class Provider1 extends Provider {\n+        public Provider1() {\n+            super(\"P1\", \"1\", \"1\");\n+            put(\"KDF.X\", KDF1.class.getName());\n+        }\n+    }\n+    public static class KDF1 extends KDF0 {\n+        public KDF1(AlgorithmParameterSpec e) throws InvalidAlgorithmParameterException {\n+            super(Objects.requireNonNull(e));\n+        }\n+    }\n+    public static class Provider2 extends Provider {\n+        public Provider2() {\n+            super(\"P2\", \"1\", \"1\");\n+            put(\"KDF.X\", KDF2.class.getName());\n+        }\n+    }\n+    public static class KDF2 extends KDF0 {\n+        public KDF2(AlgorithmParameterSpec e) throws InvalidAlgorithmParameterException {\n+            super(null);\n+        }\n+        @Override\n+        protected byte[] engineDeriveData(KDFParameterSpec kdfParameterSpec) throws InvalidParameterSpecException {\n+            Objects.requireNonNull(kdfParameterSpec);\n+            return null;\n+        }\n+    }\n+    public static class Provider3 extends Provider {\n+        public Provider3() {\n+            super(\"P3\", \"1\", \"1\");\n+            put(\"KDF.X\", KDF3.class.getName());\n+        }\n+    }\n+    public static class KDF3 extends KDF0 {\n+        public KDF3(AlgorithmParameterSpec e) throws InvalidAlgorithmParameterException {\n+            super(null);\n+        }\n+    }\n+\n+    public abstract static class KDF0 extends KDFSpi {\n+        public KDF0(AlgorithmParameterSpec a) throws InvalidAlgorithmParameterException {\n+            super(a);\n+        }\n+        protected SecretKey engineDeriveKey(String alg, KDFParameterSpec kdfParameterSpec) throws InvalidParameterSpecException {\n+            return null;\n+        }\n+        protected byte[] engineDeriveData(KDFParameterSpec kdfParameterSpec) throws InvalidParameterSpecException {\n+            return new byte[0];\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/KDF\/Delayed.java","additions":116,"deletions":0,"binary":false,"changes":116,"status":"added"},{"patch":"@@ -0,0 +1,73 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331008\n+ * @summary basic HKDF operations\n+ * @enablePreview\n+ *\/\n+\n+import javax.crypto.KDF;\n+import javax.crypto.spec.HKDFParameterSpec;\n+import java.util.Arrays;\n+import java.util.HexFormat;\n+\n+public class Functions {\n+    public static void main(String[] args) throws Exception {\n+        var ikm = HexFormat.of().parseHex(\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\");\n+        var salt = HexFormat.of().parseHex(\"000102030405060708090a0b0c\");\n+        var info = HexFormat.of().parseHex(\"f0f1f2f3f4f5f6f7f8f9\");\n+        var len = 42;\n+\n+        var kdf = KDF.getInstance(\"HKDFWithHmacSHA256\");\n+        var expectedPrk = HexFormat.of().parseHex(\"077709362c2e32df0ddc3f0dc47bba6390b6c73bb50f9c3122ec844ad7c2b3e5\");\n+        var expectedOkm = HexFormat.of().parseHex(\"3cb25f25faacd57a90434f64d0362f2a2d2d0a90cf1a5a4c5db02d56ecc4c5bf34007208d5b887185865\");\n+\n+        var extractOnly = HKDFParameterSpec.extract().addIKM(ikm).addSalt(salt).extractOnly();\n+        var prk = kdf.deriveKey(\"PRK\", extractOnly);\n+        var expandOnly = HKDFParameterSpec.expand(prk, info, len);\n+        var okm1 = kdf.deriveKey(\"OKM\", expandOnly);\n+        var extractAndExpand = HKDFParameterSpec.extract().addIKM(ikm).addSalt(salt).andExpand(info, len);\n+        var okm2 = kdf.deriveKey(\"OKM\", extractAndExpand);\n+\n+        if (!Arrays.equals(prk.getEncoded(), expectedPrk)) {\n+            throw new Exception();\n+        }\n+        if (!Arrays.equals(okm1.getEncoded(), expectedOkm)) {\n+            throw new Exception();\n+        }\n+        if (!Arrays.equals(okm2.getEncoded(), expectedOkm)) {\n+            throw new Exception();\n+        }\n+\n+\/\/        test(HKDFParameterSpec.extract().extractOnly());\n+\/\/        test(HKDFParameterSpec.extract().andExpand(new byte[0], 32));\n+        test(HKDFParameterSpec.extract().addIKM(ikm).addSalt(new byte[0]).extractOnly());\n+    }\n+\n+    static void test(HKDFParameterSpec p) throws Exception {\n+        var kdf = KDF.getInstance(\"HKDFWithHmacSHA256\");\n+        System.out.println(HexFormat.of().formatHex(kdf.deriveData(p)));\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/KDF\/Functions.java","additions":73,"deletions":0,"binary":false,"changes":73,"status":"added"},{"patch":"","filename":"test\/jdk\/security\/unsignedjce\/java.base\/javax\/crypto\/ProviderVerifier.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"src\/java.base\/share\/classes\/javax\/crypto\/ProviderVerifier.java","status":"copied"}]}