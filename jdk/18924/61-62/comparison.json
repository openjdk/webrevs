{"files":[{"patch":"@@ -59,1 +59,1 @@\n- *             HKDFParameterSpec.extract()\n+ *             HKDFParameterSpec.buildExtract()\n@@ -61,1 +61,1 @@\n- *                              .addSalt(salt).andExpand(info, 42);\n+ *                              .addSalt(salt).thenExpand(info, 42);\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/KDF.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,37 @@\n+ * <p>\n+ * In the Extract-Only and Extract-then-Expand cases, the {@code addIKM} and\n+ * {@code addSalt} methods may be called repeatedly (and chained). This provides\n+ * for use-cases where a {@code SecretKey} may reside on an HSM and not be\n+ * exportable. The caller may wish to provide a label (or other components) of\n+ * the IKM without having access to the portion stored on the HSM. The same\n+ * feature is available for salts.\n+ * <p>\n+ * The above feature is particularly useful for \"labeled\" HKDF Extract used in\n+ * TLS 1.3 and HPKE, where the IKM consists of concatenated components, which\n+ * may include both byte arrays and (possibly non-extractable) secret keys.\n+ * <p>\n+ * Examples:\n+ * {@snippet lang = java:\n+ *\n+ * KDFParameterSpec kdfParameterSpec =\n+ *             HKDFParameterSpec.buildExtract()\n+ *                              .addIKM(ikmPart1)\n+ *                              .addIKM(ikmPart2)\n+ *                              .addSalt(salt).extractOnly();\n+ *\n+ *\n+ *}\n+ * {@snippet lang = java:\n+ *\n+ * KDFParameterSpec kdfParameterSpec = HKDFParameterSpec.expandOnly(prk,\n+ * info, 32);\n+ *\n+ *}\n+ * {@snippet lang = java:\n+ *\n+ * KDFParameterSpec kdfParameterSpec =\n+ *             HKDFParameterSpec.buildExtract()\n+ *                              .addIKM(ikm)\n+ *                              .addSalt(salt).thenExpand(info, 42);\n+ *\n+ *}\n@@ -97,0 +134,2 @@\n+         * Adds input key material to the builder.\n+         * <p>\n@@ -100,1 +139,1 @@\n-         * values or creates a new list if there are none yet.\n+         * values or creates a new list if there is none yet.\n@@ -104,0 +143,3 @@\n+         * <p>\n+         * An implementation should concatenate the input key materials into\n+         * a single value once all components are available.\n@@ -123,0 +165,2 @@\n+         * Adds input key material to the builder.\n+         * <p>\n@@ -126,1 +170,1 @@\n-         * values or creates a new list if there are none yet.\n+         * values or creates a new list if there is none yet.\n@@ -130,0 +174,3 @@\n+         * <p>\n+         * An implementation should concatenate the input key materials into\n+         * a single value once all components are available.\n@@ -151,0 +198,2 @@\n+         * Adds a salt to the builder.\n+         * <p>\n@@ -154,1 +203,1 @@\n-         * creates a new list if there are none yet.\n+         * creates a new list if there is none yet.\n@@ -158,0 +207,3 @@\n+         * <p>\n+         * An implementation should concatenate the salt into\n+         * a single value once all components are available.\n@@ -177,0 +229,2 @@\n+         * Adds a salt to the builder.\n+         * <p>\n@@ -180,1 +234,1 @@\n-         * creates a new list if there are none yet.\n+         * creates a new list if there is none yet.\n@@ -184,0 +238,2 @@\n+         * An implementation should concatenate the salt into\n+         * a single value once all components are available.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/spec\/HKDFParameterSpec.java","additions":60,"deletions":4,"binary":false,"changes":64,"status":"modified"}]}