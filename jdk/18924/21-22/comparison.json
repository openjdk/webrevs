{"files":[{"patch":"@@ -27,0 +27,1 @@\n+ * @run main TestHKDF\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/TestHKDF.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ * @run main TestHKDFInitialization\n@@ -65,2 +66,0 @@\n-        kdfHkdf.deriveKey(\"AES\", kdfParameterSpec);\n-\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/TestHKDFInitialization.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331008\n+ * @library \/test\/lib\n+ * @run testng Threading\n+ * @summary multi-threading test for KDF\n+ * @enablePreview\n+ *\/\n+\n+import org.testng.annotations.BeforeClass;\n+\n+import javax.crypto.KDF;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.HKDFParameterSpec;\n+import javax.crypto.spec.KDFParameterSpec;\n+import java.math.BigInteger;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.spec.InvalidParameterSpecException;\n+import java.util.HexFormat;\n+\n+public class Threading {\n+    KDF kdfUnderTest;\n+    byte[] ikm = new BigInteger(\"0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b0b\",\n+                                16).toByteArray();\n+    byte[] salt = new BigInteger(\"000102030405060708090a0b0c\",\n+                                 16).toByteArray();\n+    byte[] info = new BigInteger(\"f0f1f2f3f4f5f6f7f8f9\", 16).toByteArray();\n+    KDFParameterSpec kdfParameterSpec = HKDFParameterSpec.extractExpand(\n+        HKDFParameterSpec.extract().addIKM(ikm).addSalt(salt).extractOnly(),\n+        info, 42);\n+    String expectedResult =\n+        \"666b33562ebc5e2f041774192e0534efca06f82a5fca17ec8c6ae1b9f5466adba1d77d06480567ddd2d1\";\n+\n+    @BeforeClass\n+    public void setUp() throws NoSuchAlgorithmException {\n+        kdfUnderTest = KDF.getInstance(\"HKDFWithHmacSHA256\");\n+    }\n+\n+    @Test(threadPoolSize = 50, invocationCount = 10000, timeOut = 10)\n+    public void testDeriveKey() throws InvalidParameterSpecException {\n+        SecretKey result = kdfUnderTest.deriveKey(\"AES\", kdfParameterSpec);\n+        assert (HexFormat.of().formatHex(result.getEncoded()).equals(\n+            expectedResult));\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/KDF\/Threading.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}