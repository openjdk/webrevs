{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import java.io.InputStream;\n-import java.io.OutputStream;\n@@ -29,1 +27,0 @@\n-import java.net.URI;\n@@ -31,2 +28,0 @@\n-import java.nio.file.FileSystemNotFoundException;\n-import java.nio.file.Files;\n@@ -34,2 +29,0 @@\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n@@ -37,4 +30,1 @@\n-import com.sun.net.httpserver.Headers;\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n+import com.sun.net.httpserver.*;\n@@ -47,1 +37,0 @@\n-    private ExecutorService executor;\n@@ -49,3 +38,0 @@\n-    private final String context;\n-    private final String docRoot;\n-    private final InetSocketAddress inetSocketAddress;\n@@ -53,6 +39,2 @@\n-    public SimpleHttpServer(final InetSocketAddress inetSocketAddress, final String context, final String docRoot)\n-            throws IOException {\n-        this.inetSocketAddress = inetSocketAddress;\n-        this.context = context;\n-        this.docRoot = docRoot;\n-        httpServer = HttpServer.create();\n+    public SimpleHttpServer(final InetSocketAddress inetSocketAddress, final String context, final String docRoot) {\n+        httpServer = SimpleFileServer.createFileServer(inetSocketAddress, Path.of(docRoot), SimpleFileServer.OutputLevel.INFO);\n@@ -62,5 +44,0 @@\n-        MyHttpHandler handler = new MyHttpHandler(docRoot);\n-        httpServer.bind(inetSocketAddress, 0);\n-        httpServer.createContext(context, handler);\n-        executor = Executors.newCachedThreadPool();\n-        httpServer.setExecutor(executor);\n@@ -74,1 +51,0 @@\n-        executor.shutdown();\n@@ -84,68 +60,0 @@\n-\n-    class MyHttpHandler implements HttpHandler {\n-        private final URI rootUri;\n-\n-        MyHttpHandler(final String docroot) {\n-            rootUri = Path.of(docroot).toUri().normalize();\n-        }\n-\n-        public void handle(final HttpExchange t) throws IOException {\n-            try (InputStream is = t.getRequestBody()) {\n-                is.readAllBytes();\n-                Headers rMap = t.getResponseHeaders();\n-                try (OutputStream os = t.getResponseBody()) {\n-                    URI uri = t.getRequestURI();\n-                    String path = uri.getRawPath();\n-                    assert path.isEmpty() || path.startsWith(\"\/\");\n-                    Path fPath;\n-                    try {\n-                        uri = URI.create(\"file:\/\/\" + rootUri.getRawPath() + path).normalize();\n-                        fPath = Path.of(uri);\n-                    } catch (IllegalArgumentException | FileSystemNotFoundException ex) {\n-                        ex.printStackTrace();\n-                        notfound(t, path);\n-                        return;\n-                    }\n-                    byte[] bytes = Files.readAllBytes(fPath);\n-                    String method = t.getRequestMethod();\n-                    if (method.equals(\"HEAD\")) {\n-                        rMap.set(\"Content-Length\", Long.toString(bytes.length));\n-                        t.sendResponseHeaders(200, -1);\n-                        t.close();\n-                    } else if (!method.equals(\"GET\")) {\n-                        t.sendResponseHeaders(405, -1);\n-                        t.close();\n-                        return;\n-                    }\n-                    if (path.endsWith(\".html\") || path.endsWith(\".htm\")) {\n-                        rMap.set(\"Content-Type\", \"text\/html\");\n-                    } else {\n-                        rMap.set(\"Content-Type\", \"text\/plain\");\n-                    }\n-                    t.sendResponseHeaders(200, bytes.length);\n-                    os.write(bytes);\n-                }\n-            }\n-        }\n-        void moved(final HttpExchange t) throws IOException {\n-            Headers req = t.getRequestHeaders();\n-            Headers map = t.getResponseHeaders();\n-            URI uri = t.getRequestURI();\n-            String host = req.getFirst(\"Host\");\n-            String location = \"http:\/\/\" + host + uri.getPath() + \"\/\";\n-            map.set(\"Content-Type\", \"text\/html\");\n-            map.set(\"Location\", location);\n-            t.sendResponseHeaders(301, -1);\n-            t.close();\n-        }\n-        void notfound(final HttpExchange t, final String p) throws IOException {\n-            t.getResponseHeaders().set(\"Content-Type\", \"text\/html\");\n-            t.sendResponseHeaders(404, 0);\n-            try (OutputStream os = t.getResponseBody()) {\n-                String s = \"<h2>File not found<\/h2>\";\n-                s = s + p + \"<p>\";\n-                os.write(s.getBytes());\n-            }\n-            t.close();\n-        }\n-    }\n","filename":"test\/lib\/jdk\/test\/lib\/net\/SimpleHttpServer.java","additions":4,"deletions":96,"binary":false,"changes":100,"status":"modified"}]}