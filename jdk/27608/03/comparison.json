{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,0 +41,2 @@\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n@@ -52,0 +54,3 @@\n+import com.sun.net.httpserver.HttpServer;\n+import com.sun.net.httpserver.SimpleFileServer;\n+import jdk.test.lib.net.URIBuilder;\n@@ -59,1 +64,0 @@\n-import jdk.test.lib.net.SimpleHttpServer;\n@@ -65,1 +69,0 @@\n- * @build jdk.test.lib.net.SimpleHttpServer\n@@ -84,2 +87,1 @@\n-    static final String TESTCONTEXT = REMOTE_FILE_LOCATION;  \/\/mapped to local file path\n-    private SimpleHttpServer httpserver;\n+    private HttpServer httpserver;\n@@ -87,0 +89,1 @@\n+    private ExecutorService executor;\n@@ -95,1 +98,4 @@\n-        httpserver = new SimpleHttpServer(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), TESTCONTEXT, DOCROOT);\n+        httpserver = SimpleFileServer.createFileServer(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0),\n+                Path.of(DOCROOT), SimpleFileServer.OutputLevel.INFO);\n+        executor = Executors.newCachedThreadPool();\n+        httpserver.setExecutor(executor);\n@@ -97,1 +103,5 @@\n-        remoteFilePath = httpserver.getAddress() + REMOTE_FILE_LOCATION;\n+        remoteFilePath = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .host(httpserver.getAddress().getAddress())\n+                .port(httpserver.getAddress().getPort())\n+                .build().toString() + REMOTE_FILE_LOCATION;\n@@ -103,1 +113,2 @@\n-            httpserver.stop();\n+            httpserver.stop(0);\n+            executor.shutdown();\n","filename":"test\/jaxp\/javax\/xml\/jaxp\/unittest\/catalog\/CatalogFileInputTest.java","additions":19,"deletions":8,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1,71 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.util.concurrent.*;\n-import java.util.logging.*;\n-import java.io.*;\n-import java.net.*;\n-\n-import com.sun.net.httpserver.*;\n-\n-\/**\n- * Implements a basic static content HTTP server\n- * which understands text\/html, text\/plain content types\n- *\n- * Must be given an abs pathname to the document root.\n- * Directory listings together with text + html files\n- * can be served.\n- *\n- * File Server created on files sub-path\n- *\n- * Echo server created on echo sub-path\n- *\/\n-public class SimpleFileServer {\n-\n-    public static void main (String[] args) throws Exception {\n-        if (args.length != 3) {\n-            System.out.println (\"usage: java FileServerHandler rootDir port logfilename\");\n-            System.exit(1);\n-        }\n-        Logger logger = Logger.getLogger(\"com.sun.net.httpserver\");\n-        ConsoleHandler ch = new ConsoleHandler();\n-        logger.setLevel(Level.ALL);\n-        ch.setLevel(Level.ALL);\n-        logger.addHandler(ch);\n-\n-        String rootDir = args[0];\n-        int port = Integer.parseInt (args[1]);\n-        String logfile = args[2];\n-        HttpServer server = HttpServer.create (new InetSocketAddress (port), 0);\n-        HttpHandler h = new FileServerHandler (rootDir);\n-        HttpHandler h1 = new EchoHandler ();\n-\n-        HttpContext c = server.createContext (\"\/files\", h);\n-        c.getFilters().add (new LogFilter (new File (logfile)));\n-        HttpContext c1 = server.createContext (\"\/echo\", h1);\n-        c.getFilters().add (new LogFilter (new File (logfile)));\n-        c1.getFilters().add (new LogFilter (new File (logfile)));\n-        server.setExecutor (Executors.newCachedThreadPool());\n-        server.start ();\n-    }\n-}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/SimpleFileServer.java","additions":0,"deletions":71,"binary":false,"changes":71,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n- *          jdk.httpserver\n@@ -33,1 +32,0 @@\n- *        jdk.test.lib.net.SimpleHttpServer\n@@ -54,0 +52,3 @@\n+import java.nio.file.Path;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n@@ -55,1 +56,2 @@\n-import jdk.test.lib.net.SimpleHttpServer;\n+import com.sun.net.httpserver.HttpServer;\n+import com.sun.net.httpserver.SimpleFileServer;\n@@ -62,1 +64,2 @@\n-    private SimpleHttpServer server;\n+    private HttpServer server;\n+    private ExecutorService executor;\n@@ -67,2 +70,4 @@\n-        server = new SimpleHttpServer(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), TESTCONTEXT,\n-                System.getProperty(\"user.dir\", \".\"));\n+        server = SimpleFileServer.createFileServer(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0),\n+                Path.of(System.getProperty(\"user.dir\", \".\")), SimpleFileServer.OutputLevel.INFO);\n+        executor = Executors.newCachedThreadPool();\n+        server.setExecutor(executor);\n@@ -76,1 +81,1 @@\n-                URIBuilder.newBuilder().scheme(\"http\").port(server.getPort()).loopback()\n+                URIBuilder.newBuilder().scheme(\"http\").port(server.getAddress().getPort()).loopback()\n@@ -87,2 +92,4 @@\n-        if (server != null)\n-            server.stop();\n+        if (server != null) {\n+            server.stop(0);\n+            executor.shutdown();\n+        }\n","filename":"test\/jdk\/java\/util\/jar\/JarFile\/mrjar\/MultiReleaseJarHttpProperties.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n- *          jdk.httpserver\n@@ -33,1 +32,0 @@\n- *        jdk.test.lib.net.SimpleHttpServer\n@@ -54,0 +52,1 @@\n+import java.nio.file.Path;\n@@ -56,0 +55,2 @@\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n@@ -58,1 +59,2 @@\n-import jdk.test.lib.net.SimpleHttpServer;\n+import com.sun.net.httpserver.HttpServer;\n+import com.sun.net.httpserver.SimpleFileServer;\n@@ -71,2 +73,2 @@\n-    static final String TESTCONTEXT = \"\/multi-release.jar\";\n-    SimpleHttpServer server;\n+    HttpServer server;\n+    ExecutorService executor;\n@@ -81,1 +83,4 @@\n-        server = new SimpleHttpServer(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), TESTCONTEXT, System.getProperty(\"user.dir\", \".\"));\n+        server = SimpleFileServer.createFileServer(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0),\n+                Path.of(System.getProperty(\"user.dir\", \".\")), SimpleFileServer.OutputLevel.INFO);\n+        executor = Executors.newCachedThreadPool();\n+        server.setExecutor(executor);\n@@ -89,1 +94,3 @@\n-            server.stop();\n+            server.stop(0);\n+            executor.shutdown();\n+\n@@ -179,2 +186,2 @@\n-                {\"http\", toHttpJarURL(server.getPort(), \"\/multi-release.jar\", \"!\/\")},\n-                {\"http\", URIBuilder.newBuilder().scheme(\"http\").port(server.getPort())\n+                {\"http\", toHttpJarURL(server.getAddress().getPort(), \"\/multi-release.jar\", \"!\/\")},\n+                {\"http\", URIBuilder.newBuilder().scheme(\"http\").port(server.getAddress().getPort())\n","filename":"test\/jdk\/sun\/net\/www\/protocol\/jar\/MultiReleaseJarURLConnection.java","additions":17,"deletions":10,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1,152 +0,0 @@\n-\/*\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package jdk.test.lib.net;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.OutputStream;\n-import java.net.InetSocketAddress;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import java.nio.file.FileSystemNotFoundException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.concurrent.ExecutorService;\n-import java.util.concurrent.Executors;\n-\n-import com.sun.net.httpserver.Headers;\n-import com.sun.net.httpserver.HttpExchange;\n-import com.sun.net.httpserver.HttpHandler;\n-import com.sun.net.httpserver.HttpServer;\n-\n-\/**\n- * A simple HTTP Server.\n- **\/\n-public class SimpleHttpServer {\n-    private final HttpServer httpServer;\n-    private ExecutorService executor;\n-    private String address;\n-    private final String context;\n-    private final String docRoot;\n-    private final InetSocketAddress inetSocketAddress;\n-\n-    public SimpleHttpServer(final InetSocketAddress inetSocketAddress, final String context, final String docRoot)\n-            throws IOException {\n-        this.inetSocketAddress = inetSocketAddress;\n-        this.context = context;\n-        this.docRoot = docRoot;\n-        httpServer = HttpServer.create();\n-    }\n-\n-    public void start() throws IOException, URISyntaxException {\n-        MyHttpHandler handler = new MyHttpHandler(docRoot);\n-        httpServer.bind(inetSocketAddress, 0);\n-        httpServer.createContext(context, handler);\n-        executor = Executors.newCachedThreadPool();\n-        httpServer.setExecutor(executor);\n-        httpServer.start();\n-        address = \"http:\" + URIBuilder.newBuilder().host(httpServer.getAddress().getAddress()).\n-                port(httpServer.getAddress().getPort()).build().toString();\n-    }\n-\n-    public void stop() {\n-        httpServer.stop(0);\n-        executor.shutdown();\n-    }\n-\n-    public String getAddress() {\n-        return address;\n-    }\n-\n-    public int getPort() {\n-        return httpServer.getAddress().getPort();\n-    }\n-\n-    class MyHttpHandler implements HttpHandler {\n-        private final URI rootUri;\n-\n-        MyHttpHandler(final String docroot) {\n-            rootUri = Path.of(docroot).toUri().normalize();\n-        }\n-\n-        public void handle(final HttpExchange t) throws IOException {\n-            try (InputStream is = t.getRequestBody()) {\n-                is.readAllBytes();\n-                Headers rMap = t.getResponseHeaders();\n-                try (OutputStream os = t.getResponseBody()) {\n-                    URI uri = t.getRequestURI();\n-                    String path = uri.getRawPath();\n-                    assert path.isEmpty() || path.startsWith(\"\/\");\n-                    Path fPath;\n-                    try {\n-                        uri = URI.create(\"file:\/\/\" + rootUri.getRawPath() + path).normalize();\n-                        fPath = Path.of(uri);\n-                    } catch (IllegalArgumentException | FileSystemNotFoundException ex) {\n-                        ex.printStackTrace();\n-                        notfound(t, path);\n-                        return;\n-                    }\n-                    byte[] bytes = Files.readAllBytes(fPath);\n-                    String method = t.getRequestMethod();\n-                    if (method.equals(\"HEAD\")) {\n-                        rMap.set(\"Content-Length\", Long.toString(bytes.length));\n-                        t.sendResponseHeaders(200, -1);\n-                        t.close();\n-                    } else if (!method.equals(\"GET\")) {\n-                        t.sendResponseHeaders(405, -1);\n-                        t.close();\n-                        return;\n-                    }\n-                    if (path.endsWith(\".html\") || path.endsWith(\".htm\")) {\n-                        rMap.set(\"Content-Type\", \"text\/html\");\n-                    } else {\n-                        rMap.set(\"Content-Type\", \"text\/plain\");\n-                    }\n-                    t.sendResponseHeaders(200, bytes.length);\n-                    os.write(bytes);\n-                }\n-            }\n-        }\n-        void moved(final HttpExchange t) throws IOException {\n-            Headers req = t.getRequestHeaders();\n-            Headers map = t.getResponseHeaders();\n-            URI uri = t.getRequestURI();\n-            String host = req.getFirst(\"Host\");\n-            String location = \"http:\/\/\" + host + uri.getPath() + \"\/\";\n-            map.set(\"Content-Type\", \"text\/html\");\n-            map.set(\"Location\", location);\n-            t.sendResponseHeaders(301, -1);\n-            t.close();\n-        }\n-        void notfound(final HttpExchange t, final String p) throws IOException {\n-            t.getResponseHeaders().set(\"Content-Type\", \"text\/html\");\n-            t.sendResponseHeaders(404, 0);\n-            try (OutputStream os = t.getResponseBody()) {\n-                String s = \"<h2>File not found<\/h2>\";\n-                s = s + p + \"<p>\";\n-                os.write(s.getBytes());\n-            }\n-            t.close();\n-        }\n-    }\n-}\n","filename":"test\/lib\/jdk\/test\/lib\/net\/SimpleHttpServer.java","additions":0,"deletions":152,"binary":false,"changes":152,"status":"deleted"}]}