{"files":[{"patch":"@@ -67,1 +67,0 @@\n-import sun.security.util.SecurityConstants;\n@@ -360,6 +359,0 @@\n-\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkCreateClassLoader();\n-        }\n@@ -1738,1 +1731,0 @@\n-    @CallerSensitive\n@@ -1740,10 +1732,0 @@\n-        if (parent == null)\n-            return null;\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            \/\/ Check access to the parent class loader\n-            \/\/ If the caller's class loader is same as this class loader,\n-            \/\/ permission check is performed.\n-            checkClassLoaderPermission(parent, Reflection.getCallerClass());\n-        }\n@@ -1777,1 +1759,0 @@\n-    @CallerSensitive\n@@ -1779,7 +1760,1 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        ClassLoader loader = getBuiltinPlatformClassLoader();\n-        if (sm != null) {\n-            checkClassLoaderPermission(loader, Reflection.getCallerClass());\n-        }\n-        return loader;\n+        return getBuiltinPlatformClassLoader();\n@@ -1856,1 +1831,0 @@\n-    @CallerSensitive\n@@ -1870,5 +1844,0 @@\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null) {\n-                    checkClassLoaderPermission(scl, Reflection.getCallerClass());\n-                }\n@@ -1905,2 +1874,0 @@\n-\n-        \/\/ All are privileged frames.  No need to call doPrivileged.\n@@ -1933,30 +1900,0 @@\n-    \/\/ Returns true if the specified class loader can be found in this class\n-    \/\/ loader's delegation chain.\n-    boolean isAncestor(ClassLoader cl) {\n-        ClassLoader acl = this;\n-        do {\n-            acl = acl.parent;\n-            if (cl == acl) {\n-                return true;\n-            }\n-        } while (acl != null);\n-        return false;\n-    }\n-\n-    \/\/ Tests if class loader access requires \"getClassLoader\" permission\n-    \/\/ check.  A class loader 'from' can access class loader 'to' if\n-    \/\/ class loader 'from' is same as class loader 'to' or an ancestor\n-    \/\/ of 'to'.  The class loader in a system domain can access\n-    \/\/ any class loader.\n-    private static boolean needsClassLoaderPermissionCheck(ClassLoader from,\n-                                                           ClassLoader to)\n-    {\n-        if (from == to)\n-            return false;\n-\n-        if (from == null)\n-            return false;\n-\n-        return !to.isAncestor(from);\n-    }\n-\n@@ -1973,17 +1910,0 @@\n-    \/*\n-     * Checks RuntimePermission(\"getClassLoader\") permission\n-     * if caller's class loader is not null and caller's class loader\n-     * is not the same as or an ancestor of the given cl argument.\n-     *\/\n-    static void checkClassLoaderPermission(ClassLoader cl, Class<?> caller) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            \/\/ caller can be null if the VM is requesting it\n-            ClassLoader ccl = getClassLoader(caller);\n-            if (needsClassLoaderPermissionCheck(ccl, cl)) {\n-                sm.checkPermission(SecurityConstants.GET_CLASSLOADER_PERMISSION);\n-            }\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":1,"deletions":81,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -146,1 +144,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -148,10 +145,1 @@\n-        if (System.getSecurityManager() == null) {\n-            BootLoader.getNativeLibraries().loadLibrary(name);\n-        } else {\n-            AccessController.doPrivileged(new java.security.PrivilegedAction<>() {\n-                public Void run() {\n-                    BootLoader.getNativeLibraries().loadLibrary(name);\n-                    return null;\n-                }\n-            });\n-        }\n+        getNativeLibraries().loadLibrary(name);\n@@ -297,1 +285,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -299,11 +286,7 @@\n-            return AccessController.doPrivileged(new PrivilegedAction<>() {\n-                public URL run() {\n-                    Path path = Path.of(location);\n-                    if (Files.isRegularFile(path)) {\n-                        try {\n-                            return path.toUri().toURL();\n-                        } catch (MalformedURLException e) {}\n-                    }\n-                    return null;\n-                }\n-            });\n+            Path path = Path.of(location);\n+            if (Files.isRegularFile(path)) {\n+                try {\n+                    return path.toUri().toURL();\n+                } catch (MalformedURLException e) {}\n+            }\n+            return null;\n@@ -316,1 +299,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -318,11 +300,7 @@\n-            return AccessController.doPrivileged(new PrivilegedAction<>() {\n-                public Manifest run() {\n-                    Path jar = Path.of(location);\n-                    try (InputStream in = Files.newInputStream(jar);\n-                         JarInputStream jis = new JarInputStream(in, false)) {\n-                        return jis.getManifest();\n-                    } catch (IOException e) {\n-                        return null;\n-                    }\n-                }\n-            });\n+            Path jar = Path.of(location);\n+            try (InputStream in = Files.newInputStream(jar);\n+                 JarInputStream jis = new JarInputStream(in, false)) {\n+                return jis.getManifest();\n+            } catch (IOException e) {\n+                return null;\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/BootLoader.java","additions":15,"deletions":37,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.security.AccessController;\n@@ -41,4 +40,0 @@\n-import java.security.PermissionCollection;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -65,1 +60,0 @@\n-import sun.security.util.LazyCodeSourcePermissionCollection;\n@@ -284,1 +278,1 @@\n-        return checkURL(url);  \/\/ check access before returning\n+        return url;\n@@ -291,1 +285,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -295,11 +288,7 @@\n-        \/\/ Need URL to resource when running with a security manager so that\n-        \/\/ the right permission check is done.\n-        if (System.getSecurityManager() != null || mn == null) {\n-            URL url = findResource(mn, name);\n-            return (url != null) ? url.openStream() : null;\n-        }\n-\n-        \/\/ find in module defined to this loader, no security manager\n-        ModuleReference mref = nameToModule.get(mn);\n-        if (mref != null) {\n-            return moduleReaderFor(mref).open(name).orElse(null);\n+        InputStream in = null;\n+        if (mn != null) {\n+            \/\/ find in module defined to this loader\n+            ModuleReference mref = nameToModule.get(mn);\n+            if (mref != null) {\n+                in = moduleReaderFor(mref).open(name).orElse(null);\n+            }\n@@ -307,1 +296,4 @@\n-            return null;\n+            URL url = findResource(name);\n+            if (url != null) {\n+                in = url.openStream();\n+            }\n@@ -309,0 +301,1 @@\n+        return in;\n@@ -345,1 +338,1 @@\n-                        return checkURL(url); \/\/ check access before returning\n+                        return url;\n@@ -355,2 +348,1 @@\n-        URL url = findResourceOnClassPath(name);\n-        return checkURL(url);\n+        return findResourceOnClassPath(name);\n@@ -386,1 +378,0 @@\n-                url = checkURL(url);\n@@ -409,1 +400,1 @@\n-                        next = checkURL(e.nextElement());\n+                        next = e.nextElement();\n@@ -439,1 +430,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -456,24 +446,14 @@\n-        List<URL> urls;\n-        try {\n-            urls = AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<>() {\n-                    @Override\n-                    public List<URL> run() throws IOException {\n-                        List<URL> result = null;\n-                        for (ModuleReference mref : nameToModule.values()) {\n-                            URI u = moduleReaderFor(mref).find(name).orElse(null);\n-                            if (u != null) {\n-                                try {\n-                                    if (result == null)\n-                                        result = new ArrayList<>();\n-                                    result.add(u.toURL());\n-                                } catch (MalformedURLException |\n-                                         IllegalArgumentException e) {\n-                                }\n-                            }\n-                        }\n-                        return (result != null) ? result : Collections.emptyList();\n-                    }\n-                });\n-        } catch (PrivilegedActionException pae) {\n-            throw (IOException) pae.getCause();\n+        List<URL> urls = null;\n+        for (ModuleReference mref : nameToModule.values()) {\n+            URI u = moduleReaderFor(mref).find(name).orElse(null);\n+            if (u != null) {\n+                try {\n+                    if (urls == null)\n+                        urls = new ArrayList<>();\n+                    urls.add(u.toURL());\n+                } catch (MalformedURLException | IllegalArgumentException e) {\n+                }\n+            }\n+        }\n+        if (urls == null) {\n+            urls = List.of();\n@@ -493,1 +473,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -495,15 +474,1 @@\n-        URI u;\n-        if (System.getSecurityManager() == null) {\n-            u = moduleReaderFor(mref).find(name).orElse(null);\n-        } else {\n-            try {\n-                u = AccessController.doPrivileged(new PrivilegedExceptionAction<> () {\n-                    @Override\n-                    public URI run() throws IOException {\n-                        return moduleReaderFor(mref).find(name).orElse(null);\n-                    }\n-                });\n-            } catch (PrivilegedActionException pae) {\n-                throw (IOException) pae.getCause();\n-            }\n-        }\n+        URI u = moduleReaderFor(mref).find(name).orElse(null);\n@@ -518,12 +483,0 @@\n-    \/**\n-     * Returns the URL to a resource in a module. Returns {@code null} if not found\n-     * or an I\/O error occurs.\n-     *\/\n-    private URL findResourceOrNull(ModuleReference mref, String name) {\n-        try {\n-            return findResource(mref, name);\n-        } catch (IOException ignore) {\n-            return null;\n-        }\n-    }\n-\n@@ -533,1 +486,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -536,6 +488,1 @@\n-            if (System.getSecurityManager() == null) {\n-                return ucp.findResource(name, false);\n-            } else {\n-                PrivilegedAction<URL> pa = () -> ucp.findResource(name, false);\n-                return AccessController.doPrivileged(pa);\n-            }\n+            return ucp.findResource(name, false);\n@@ -551,1 +498,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -554,7 +500,1 @@\n-            if (System.getSecurityManager() == null) {\n-                return ucp.findResources(name, false);\n-            } else {\n-                PrivilegedAction<Enumeration<URL>> pa;\n-                pa = () -> ucp.findResources(name, false);\n-                return AccessController.doPrivileged(pa);\n-            }\n+            return ucp.findResources(name, false);\n@@ -738,1 +678,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -740,6 +679,1 @@\n-        if (System.getSecurityManager() == null) {\n-            return defineClass(cn, loadedModule);\n-        } else {\n-            PrivilegedAction<Class<?>> pa = () -> defineClass(cn, loadedModule);\n-            return AccessController.doPrivileged(pa);\n-        }\n+        return defineClass(cn, loadedModule);\n@@ -753,1 +687,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -756,8 +689,6 @@\n-        if (System.getSecurityManager() == null) {\n-            Resource res = ucp.getResource(path, false);\n-            if (res != null) {\n-                try {\n-                    return defineClass(cn, res);\n-                } catch (IOException ioe) {\n-                    \/\/ TBD on how I\/O errors should be propagated\n-                }\n+        Resource res = ucp.getResource(path, false);\n+        if (res != null) {\n+            try {\n+                return defineClass(cn, res);\n+            } catch (IOException ioe) {\n+                \/\/ TBD on how I\/O errors should be propagated\n@@ -765,17 +696,0 @@\n-            return null;\n-        } else {\n-            \/\/ avoid use of lambda here\n-            PrivilegedAction<Class<?>> pa = new PrivilegedAction<>() {\n-                public Class<?> run() {\n-                    Resource res = ucp.getResource(path, false);\n-                    if (res != null) {\n-                        try {\n-                            return defineClass(cn, res);\n-                        } catch (IOException ioe) {\n-                            \/\/ TBD on how I\/O errors should be propagated\n-                        }\n-                    }\n-                    return null;\n-                }\n-            };\n-            return AccessController.doPrivileged(pa);\n@@ -783,0 +697,1 @@\n+        return null;\n@@ -1001,10 +916,0 @@\n-    \/\/ -- permissions\n-\n-    \/**\n-     * Returns the permissions for the given CodeSource.\n-     *\/\n-    @Override\n-    protected PermissionCollection getPermissions(CodeSource cs) {\n-        return new LazyCodeSourcePermissionCollection(super.getPermissions(cs), cs);\n-    }\n-\n@@ -1075,8 +980,0 @@\n-    \/**\n-     * Checks access to the given URL. We use URLClassPath for consistent\n-     * checking with java.net.URLClassLoader.\n-     *\/\n-    private static URL checkURL(URL url) {\n-        return URLClassPath.checkURL(url);\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/BuiltinClassLoader.java","additions":41,"deletions":144,"binary":false,"changes":185,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.security.CodeSource;\n-import java.security.PermissionCollection;\n@@ -173,25 +171,0 @@\n-        @Override\n-        protected Class<?> loadClass(String cn, boolean resolve)\n-            throws ClassNotFoundException\n-        {\n-            \/\/ for compatibility reasons, say where restricted package list has\n-            \/\/ been updated to list API packages in the unnamed module.\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                int i = cn.lastIndexOf('.');\n-                if (i != -1) {\n-                    sm.checkPackageAccess(cn.substring(0, i));\n-                }\n-            }\n-\n-            return super.loadClass(cn, resolve);\n-        }\n-\n-        @Override\n-        protected PermissionCollection getPermissions(CodeSource cs) {\n-            PermissionCollection perms = super.getPermissions(cs);\n-            perms.add(new RuntimePermission(\"exitVM\"));\n-            return perms;\n-        }\n-\n@@ -210,0 +183,1 @@\n+        @Override\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/ClassLoaders.java","additions":2,"deletions":28,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.io.File;\n-import java.io.FilePermission;\n@@ -40,2 +38,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -44,5 +40,0 @@\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -113,4 +104,0 @@\n-    \/\/ ACC used when loading classes and resources\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc;\n-\n@@ -122,1 +109,0 @@\n-        private final URL url;          \/\/ may be null\n@@ -133,1 +119,0 @@\n-            this.url = url;\n@@ -139,1 +124,0 @@\n-        URL location() { return url; }\n@@ -148,1 +132,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -167,2 +150,0 @@\n-\n-        this.acc = AccessController.getContext();\n@@ -178,1 +159,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -200,2 +180,0 @@\n-\n-        this.acc = AccessController.getContext();\n@@ -329,1 +307,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -338,21 +315,2 @@\n-        try {\n-            url = AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<URL>() {\n-                    @Override\n-                    public URL run() throws IOException {\n-                        Optional<URI> ouri = moduleReaderFor(mref).find(name);\n-                        if (ouri.isPresent()) {\n-                            try {\n-                                return ouri.get().toURL();\n-                            } catch (MalformedURLException |\n-                                     IllegalArgumentException e) { }\n-                        }\n-                        return null;\n-                    }\n-                });\n-        } catch (PrivilegedActionException pae) {\n-            throw (IOException) pae.getCause();\n-        }\n-\n-        \/\/ check access with permissions restricted by ACC\n-        if (url != null && System.getSecurityManager() != null) {\n+        Optional<URI> ouri = moduleReaderFor(mref).find(name);\n+        if (ouri.isPresent()) {\n@@ -360,11 +318,2 @@\n-                URL urlToCheck = url;\n-                url = AccessController.doPrivileged(\n-                    new PrivilegedExceptionAction<URL>() {\n-                        @Override\n-                        public URL run() throws IOException {\n-                            return URLClassPath.checkURL(urlToCheck);\n-                        }\n-                    }, acc);\n-            } catch (PrivilegedActionException pae) {\n-                url = null;\n-            }\n+                url = ouri.get().toURL();\n+            } catch (MalformedURLException | IllegalArgumentException e) { }\n@@ -372,1 +321,0 @@\n-\n@@ -528,9 +476,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            String pn = packageName(cn);\n-            if (!pn.isEmpty()) {\n-                sm.checkPackageAccess(pn);\n-            }\n-        }\n-\n@@ -587,1 +526,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -589,11 +527,0 @@\n-        PrivilegedAction<Class<?>> pa = () -> defineClass(cn, loadedModule);\n-        return AccessController.doPrivileged(pa, acc);\n-    }\n-\n-    \/**\n-     * Defines the given binary class name to the VM, loading the class\n-     * bytes from the given module.\n-     *\n-     * @return the resulting Class or {@code null} if an I\/O error occurs\n-     *\/\n-    private Class<?> defineClass(String cn, LoadedModule loadedModule) {\n@@ -623,34 +550,0 @@\n-\n-    \/\/ -- permissions\n-\n-    \/**\n-     * Returns the permissions for the given CodeSource.\n-     *\/\n-    @Override\n-    protected PermissionCollection getPermissions(CodeSource cs) {\n-        PermissionCollection perms = super.getPermissions(cs);\n-\n-        URL url = cs.getLocation();\n-        if (url == null)\n-            return perms;\n-\n-        \/\/ add the permission to access the resource\n-        try {\n-            Permission p = url.openConnection().getPermission();\n-            if (p != null) {\n-                \/\/ for directories then need recursive access\n-                if (p instanceof FilePermission) {\n-                    String path = p.getName();\n-                    if (path.endsWith(File.separator)) {\n-                        path += \"-\";\n-                        p = new FilePermission(path, \"read\");\n-                    }\n-                }\n-                perms.add(p);\n-            }\n-        } catch (IOException ioe) { }\n-\n-        return perms;\n-    }\n-\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/Loader.java","additions":5,"deletions":112,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -117,1 +117,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -123,13 +122,6 @@\n-            name = AccessController.doPrivileged(new PrivilegedAction<>() {\n-                    public String run() {\n-                        try {\n-                            if (loadLibraryOnlyIfPresent && !file.exists()) {\n-                                return null;\n-                            }\n-                            return file.getCanonicalPath();\n-                        } catch (IOException e) {\n-                            return null;\n-                        }\n-                    }\n-                });\n-            if (name == null) {\n+            try {\n+                if (loadLibraryOnlyIfPresent && !file.exists()) {\n+                    return null;\n+                }\n+                name = file.getCanonicalPath();\n+            } catch (IOException e) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/NativeLibraries.java","additions":7,"deletions":15,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -81,1 +79,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -83,10 +80,4 @@\n-        String name = AccessController.doPrivileged(new PrivilegedAction<>() {\n-            public String run() {\n-                try {\n-                    return path.toRealPath().toString();\n-                } catch (IOException e) {\n-                    return null;\n-                }\n-            }\n-        });\n-        if (name == null) {\n+        String name;\n+        try {\n+            name = path.toRealPath().toString();\n+        } catch (IOException e) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/RawNativeLibraries.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"}]}