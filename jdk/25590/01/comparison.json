{"files":[{"patch":"@@ -1466,2 +1466,1 @@\n-    Klass* byteArrayArrayKlass = TypeArrayKlass::cast(Universe::byteArrayKlass())->array_klass(CHECK_(JVMCIObject()));\n-    objArrayOop result = ObjArrayKlass::cast(byteArrayArrayKlass) ->allocate(length, CHECK_(JVMCIObject()));\n+    objArrayOop result = oopFactory::new_objArray(Universe::byteArrayKlass(), length, CHECK_(JVMCIObject()));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  return Universe::boolArrayKlass()->allocate(length, THREAD);\n+  return Universe::boolArrayKlass()->allocate_instance(length, THREAD);\n@@ -47,1 +47,1 @@\n-  return Universe::charArrayKlass()->allocate(length, THREAD);\n+  return Universe::charArrayKlass()->allocate_instance(length, THREAD);\n@@ -51,1 +51,1 @@\n-  return Universe::floatArrayKlass()->allocate(length, THREAD);\n+  return Universe::floatArrayKlass()->allocate_instance(length, THREAD);\n@@ -55,1 +55,1 @@\n-  return Universe::doubleArrayKlass()->allocate(length, THREAD);\n+  return Universe::doubleArrayKlass()->allocate_instance(length, THREAD);\n@@ -59,1 +59,1 @@\n-  return Universe::byteArrayKlass()->allocate(length, THREAD);\n+  return Universe::byteArrayKlass()->allocate_instance(length, THREAD);\n@@ -63,1 +63,1 @@\n-  return Universe::shortArrayKlass()->allocate(length, THREAD);\n+  return Universe::shortArrayKlass()->allocate_instance(length, THREAD);\n@@ -67,1 +67,1 @@\n-  return Universe::intArrayKlass()->allocate(length, THREAD);\n+  return Universe::intArrayKlass()->allocate_instance(length, THREAD);\n@@ -71,1 +71,1 @@\n-  return Universe::longArrayKlass()->allocate(length, THREAD);\n+  return Universe::longArrayKlass()->allocate_instance(length, THREAD);\n@@ -77,1 +77,1 @@\n-  return Universe::objectArrayKlass()->allocate(length, THREAD);\n+  return Universe::objectArrayKlass()->allocate_instance(length, THREAD);\n@@ -91,1 +91,1 @@\n-  return klass->allocate(length, THREAD);\n+  return klass->allocate_instance(length, THREAD);\n","filename":"src\/hotspot\/share\/memory\/oopFactory.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-ObjArrayKlass* ObjArrayKlass::allocate(ClassLoaderData* loader_data, int n, Klass* k, Symbol* name, TRAPS) {\n+ObjArrayKlass* ObjArrayKlass::allocate_klass(ClassLoaderData* loader_data, int n, Klass* k, Symbol* name, TRAPS) {\n@@ -103,1 +103,1 @@\n-  ObjArrayKlass* oak = ObjArrayKlass::allocate(loader_data, n, element_klass, name, CHECK_NULL);\n+  ObjArrayKlass* oak = ObjArrayKlass::allocate_klass(loader_data, n, element_klass, name, CHECK_NULL);\n@@ -152,1 +152,1 @@\n-objArrayOop ObjArrayKlass::allocate(int length, TRAPS) {\n+objArrayOop ObjArrayKlass::allocate_instance(int length, TRAPS) {\n@@ -163,1 +163,1 @@\n-  objArrayOop array = allocate(length, CHECK_NULL);\n+  objArrayOop array = allocate_instance(length, CHECK_NULL);\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-  friend class VMStructs;\n+  friend class Deoptimization;\n@@ -38,0 +38,2 @@\n+  friend class oopFactory;\n+  friend class VMStructs;\n@@ -50,1 +52,3 @@\n-  static ObjArrayKlass* allocate(ClassLoaderData* loader_data, int n, Klass* k, Symbol* name, TRAPS);\n+  static ObjArrayKlass* allocate_klass(ClassLoaderData* loader_data, int n, Klass* k, Symbol* name, TRAPS);\n+\n+  objArrayOop allocate_instance(int length, TRAPS);\n@@ -81,1 +85,0 @@\n-  objArrayOop allocate(int length, TRAPS);\n","filename":"src\/hotspot\/share\/oops\/objArrayKlass.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  TypeArrayKlass* ak = TypeArrayKlass::allocate(null_loader_data, type, sym, CHECK_NULL);\n+  TypeArrayKlass* ak = TypeArrayKlass::allocate_klass(null_loader_data, type, sym, CHECK_NULL);\n@@ -68,1 +68,1 @@\n-TypeArrayKlass* TypeArrayKlass::allocate(ClassLoaderData* loader_data, BasicType type, Symbol* name, TRAPS) {\n+TypeArrayKlass* TypeArrayKlass::allocate_klass(ClassLoaderData* loader_data, BasicType type, Symbol* name, TRAPS) {\n@@ -104,1 +104,1 @@\n-  return allocate(length, THREAD);\n+  return allocate_instance(length, THREAD);\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,0 +36,2 @@\n+  friend class Deoptimization;\n+  friend class oopFactory;\n@@ -46,1 +48,4 @@\n-  static TypeArrayKlass* allocate(ClassLoaderData* loader_data, BasicType type, Symbol* name, TRAPS);\n+  static TypeArrayKlass* allocate_klass(ClassLoaderData* loader_data, BasicType type, Symbol* name, TRAPS);\n+\n+  typeArrayOop allocate_common(int length, bool do_zero, TRAPS);\n+  typeArrayOop allocate_instance(int length, TRAPS) { return allocate_common(length, true, THREAD); }\n@@ -69,2 +74,0 @@\n-  typeArrayOop allocate_common(int length, bool do_zero, TRAPS);\n-  typeArrayOop allocate(int length, TRAPS) { return allocate_common(length, true, THREAD); }\n","filename":"src\/hotspot\/share\/oops\/typeArrayKlass.hpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2288,3 +2288,5 @@\n-  Klass* ak = ek->array_klass(CHECK_NULL);\n-  ObjArrayKlass::cast(ak)->initialize(CHECK_NULL);\n-  objArrayOop result = ObjArrayKlass::cast(ak)->allocate(length, CHECK_NULL);\n+\n+  \/\/ Make sure bottom_klass is initialized.\n+  ek->initialize(CHECK_NULL);\n+  objArrayOop result = oopFactory::new_objArray(ek, length, CHECK_NULL);\n+\n","filename":"src\/hotspot\/share\/prims\/jni.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+#include \"memory\/oopFactory.hpp\"\n@@ -112,3 +113,1 @@\n-  TypeArrayKlass* tak = Universe::typeArrayKlass(elem_bt);\n-\n-  typeArrayOop arr = tak->allocate(num_elem, CHECK_NH); \/\/ safepoint\n+  typeArrayOop arr = oopFactory::new_typeArray(elem_bt, num_elem, CHECK_NH); \/\/ safepoint\n","filename":"src\/hotspot\/share\/prims\/vectorSupport.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1277,1 +1277,1 @@\n-      obj = ak->allocate(len, THREAD);\n+      obj = ak->allocate_instance(len, THREAD);\n@@ -1281,1 +1281,1 @@\n-      obj = ak->allocate(sv->field_size(), THREAD);\n+      obj = ak->allocate_instance(sv->field_size(), THREAD);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -323,0 +323,8 @@\n+\n+\/\/ Conversion\n+static BasicType basic_type_mirror_to_basic_type(oop basic_type_mirror) {\n+  assert(java_lang_Class::is_primitive(basic_type_mirror),\n+    \"just checking\");\n+  return java_lang_Class::primitive_type(basic_type_mirror);\n+}\n+\n@@ -324,2 +332,1 @@\n-  assert(java_lang_Class::is_primitive(basic_type_mirror), \"just checking\");\n-  BasicType type = java_lang_Class::primitive_type(basic_type_mirror);\n+  BasicType type = basic_type_mirror_to_basic_type(basic_type_mirror);\n@@ -342,2 +349,5 @@\n-    Klass* tak = basic_type_mirror_to_arrayklass(element_mirror, CHECK_NULL);\n-    return TypeArrayKlass::cast(tak)->allocate(length, THREAD);\n+    BasicType type = basic_type_mirror_to_basic_type(element_mirror);\n+    if (type == T_VOID) {\n+      THROW_NULL(vmSymbols::java_lang_IllegalArgumentException());\n+    }\n+    return oopFactory::new_typeArray(type, length, CHECK_NULL);\n@@ -910,7 +920,0 @@\n-\/\/ Conversion\n-static BasicType basic_type_mirror_to_basic_type(oop basic_type_mirror) {\n-  assert(java_lang_Class::is_primitive(basic_type_mirror),\n-    \"just checking\");\n-  return java_lang_Class::primitive_type(basic_type_mirror);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/reflection.cpp","additions":14,"deletions":11,"binary":false,"changes":25,"status":"modified"}]}