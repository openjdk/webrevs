{"files":[{"patch":"@@ -202,3 +202,3 @@\n-\/\/   If the thread (F) that removes itself from the end of the list\n-\/\/   hasn't got any prev pointer, we just set the tail pointer to\n-\/\/   null, see 5) and 6) below.\n+\/\/   At some point in time the thread (F) that wants to remove itself\n+\/\/   from the end of the list, will not have any prev pointer, see 5)\n+\/\/   below.\n@@ -209,2 +209,3 @@\n-\/\/      6)  entry_list       ->I->H->G->null\n-\/\/          entry_list_tail  ->null\n+\/\/   To resolve this we just start walking from the entry_list head\n+\/\/   again, forming a new doubly linked list, before removing the\n+\/\/   thread (F), see 6) and 7) below.\n@@ -212,3 +213,2 @@\n-\/\/   Next time we need to find the successor and the tail is null, we\n-\/\/   just start walking from the entry_list head again, forming a new\n-\/\/   doubly linked list, see 7) below.\n+\/\/      6)  entry_list       ->I<=>H<=>G<=>F->null\n+\/\/          entry_list_tail  --------------^\n@@ -1532,2 +1532,2 @@\n-      \/\/ release the lock \"O\".  T2 resumes immediately after the ST of null into\n-      \/\/ _owner, above.  T2 notices that the entry_list is populated, so it\n+      \/\/ release the lock \"O\".  T1 resumes immediately after the ST of null into\n+      \/\/ _owner, above.  T1 notices that the entry_list is populated, so it\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}