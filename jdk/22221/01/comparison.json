{"files":[{"patch":"@@ -40,17 +40,0 @@\n-\n-AWT_ICONPATH := $(MODULE_SRC)\/share\/classes\/sun\/awt\/resources\n-\n-GENSRC_AWT_ICONS_SRC += \\\n-    $(AWT_ICONPATH)\/security-icon-bw16.png \\\n-    $(AWT_ICONPATH)\/security-icon-interim16.png \\\n-    $(AWT_ICONPATH)\/security-icon-yellow16.png \\\n-    $(AWT_ICONPATH)\/security-icon-bw24.png \\\n-    $(AWT_ICONPATH)\/security-icon-interim24.png \\\n-    $(AWT_ICONPATH)\/security-icon-yellow24.png \\\n-    $(AWT_ICONPATH)\/security-icon-bw32.png \\\n-    $(AWT_ICONPATH)\/security-icon-interim32.png \\\n-    $(AWT_ICONPATH)\/security-icon-yellow32.png \\\n-    $(AWT_ICONPATH)\/security-icon-bw48.png \\\n-    $(AWT_ICONPATH)\/security-icon-interim48.png \\\n-    $(AWT_ICONPATH)\/security-icon-yellow48.png\n-\n","filename":"make\/modules\/java.desktop\/gensrc\/GensrcIcons.gmk","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1117,7 +1117,1 @@\n-                if ( zoomWindow.getWarningString() != null )\n-                  \/\/\/ If this is not opened as a \"secure\" window,\n-                  \/\/\/ it has a banner below the zoom dialog which makes it look really BAD\n-                  \/\/\/ So enlarge it by a bit\n-                  zoomWindow.setSize( zoomAreaWidth + 1, zoomAreaHeight + 20 );\n-                else\n-                  zoomWindow.setSize( zoomAreaWidth + 1, zoomAreaHeight + 1 );\n+                zoomWindow.setSize( zoomAreaWidth + 1, zoomAreaHeight + 1 );\n","filename":"src\/demo\/share\/jfc\/Font2DTest\/FontPanel.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -60,7 +60,0 @@\n-        if (from != null) {\n-            from.updateSecurityWarningVisibility();\n-        }\n-\n-        if (to != null) {\n-            to.updateSecurityWarningVisibility();\n-        }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWKeyboardFocusManagerPeer.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -429,3 +429,0 @@\n-    protected abstract SecurityWarningWindow createSecurityWarning(\n-            Window ownerWindow, LWWindowPeer ownerPeer);\n-\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWToolkit.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -149,2 +149,0 @@\n-    private final SecurityWarningWindow warningWindow;\n-\n@@ -200,12 +198,0 @@\n-        \/\/ Init warning window(for applets)\n-        SecurityWarningWindow warn = null;\n-        if (target.getWarningString() != null) {\n-            \/\/ accessSystemTray permission allows to display TrayIcon, TrayIcon tooltip\n-            \/\/ and TrayIcon balloon windows without a warning window.\n-            if (!AWTAccessor.getWindowAccessor().isTrayIconWindow(target)) {\n-                LWToolkit toolkit = (LWToolkit)Toolkit.getDefaultToolkit();\n-                warn = toolkit.createSecurityWarning(target, this);\n-            }\n-        }\n-\n-        warningWindow = warn;\n@@ -277,3 +263,0 @@\n-        if (warningWindow != null) {\n-            warningWindow.dispose();\n-        }\n@@ -297,3 +280,0 @@\n-        if (!visible && warningWindow != null) {\n-            warningWindow.setVisible(false, false);\n-        }\n@@ -558,13 +538,0 @@\n-    @Override\n-    public void repositionSecurityWarning() {\n-        if (warningWindow != null) {\n-            ComponentAccessor compAccessor = AWTAccessor.getComponentAccessor();\n-            Window target = getTarget();\n-            int x = compAccessor.getX(target);\n-            int y = compAccessor.getY(target);\n-            int width = compAccessor.getWidth(target);\n-            int height = compAccessor.getHeight(target);\n-            warningWindow.reposition(x, y, width, height);\n-        }\n-    }\n-\n@@ -756,1 +723,0 @@\n-        repositionSecurityWarning();\n@@ -994,2 +960,0 @@\n-        updateSecurityWarningVisibility();\n-\n@@ -1007,2 +971,0 @@\n-        updateSecurityWarningVisibility();\n-\n@@ -1097,1 +1059,0 @@\n-        updateSecurityWarningVisibility();\n@@ -1458,1 +1419,0 @@\n-        updateSecurityWarningVisibility();\n@@ -1464,1 +1424,0 @@\n-        updateSecurityWarningVisibility();\n@@ -1499,27 +1458,0 @@\n-    public void updateSecurityWarningVisibility() {\n-        if (warningWindow == null) {\n-            return;\n-        }\n-\n-        if (!isVisible()) {\n-            return; \/\/ The warning window should already be hidden.\n-        }\n-\n-        boolean show = false;\n-\n-        if (!platformWindow.isFullScreenMode()) {\n-            if (isVisible()) {\n-                if (LWKeyboardFocusManagerPeer.getInstance().getCurrentFocusedWindow() ==\n-                        getTarget()) {\n-                    show = true;\n-                }\n-\n-                if (platformWindow.isUnderMouse() || warningWindow.isUnderMouse()) {\n-                    show = true;\n-                }\n-            }\n-        }\n-\n-        warningWindow.setVisible(show, true);\n-    }\n-\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWWindowPeer.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -1,35 +0,0 @@\n-\/*\n- * Copyright (c) 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.lwawt;\n-\n-public interface SecurityWarningWindow extends PlatformWindow {\n-    \/**\n-     * @param x,y,w,h coordinates of the untrusted window\n-     *\/\n-    public void reposition(int x, int y, int w, int h);\n-\n-    public void setVisible(boolean visible, boolean doSchedule);\n-}\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/SecurityWarningWindow.java","additions":0,"deletions":35,"binary":false,"changes":35,"status":"deleted"},{"patch":"@@ -198,4 +198,0 @@\n-    @Override\n-    public void repositionSecurityWarning() {\n-    }\n-\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CFileDialog.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -368,1 +368,1 @@\n-        if (peer != null) { \/\/ Not applicable to CWarningWindow\n+        if (peer != null) {\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CPlatformWindow.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,475 +0,0 @@\n-\/*\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.lwawt.macosx;\n-\n-import sun.awt.AWTAccessor;\n-import sun.awt.IconInfo;\n-import sun.java2d.SunGraphics2D;\n-import sun.java2d.SurfaceData;\n-import sun.java2d.metal.MTLLayer;\n-import sun.java2d.opengl.CGLLayer;\n-import sun.lwawt.LWWindowPeer;\n-import sun.lwawt.PlatformEventNotifier;\n-import sun.lwawt.SecurityWarningWindow;\n-\n-import java.awt.*;\n-import java.awt.event.MouseEvent;\n-import java.awt.geom.Point2D;\n-import java.lang.ref.WeakReference;\n-\n-public final class CWarningWindow extends CPlatformWindow\n-        implements SecurityWarningWindow, PlatformEventNotifier {\n-\n-    private static class Lock {}\n-    private final Lock lock = new Lock();\n-\n-    private static final int SHOWING_DELAY = 300;\n-    private static final int HIDING_DELAY = 2000;\n-\n-    private Rectangle bounds = new Rectangle();\n-    private final WeakReference<LWWindowPeer> ownerPeer;\n-    private final Window ownerWindow;\n-\n-    \/**\n-     * Animation stage.\n-     *\/\n-    private volatile int currentIcon;\n-\n-    \/* -1 - uninitialized.\n-     * 0 - 16x16\n-     * 1 - 24x24\n-     * 2 - 32x32\n-     * 3 - 48x48\n-     *\/\n-    private int currentSize = -1;\n-    private static IconInfo[][] icons;\n-    private static IconInfo getSecurityIconInfo(int size, int num) {\n-        synchronized (CWarningWindow.class) {\n-            if (icons == null) {\n-                icons = new IconInfo[4][3];\n-                icons[0][0] = new IconInfo(sun.awt.AWTIcon32_security_icon_bw16_png.security_icon_bw16_png);\n-                icons[0][1] = new IconInfo(sun.awt.AWTIcon32_security_icon_interim16_png.security_icon_interim16_png);\n-                icons[0][2] = new IconInfo(sun.awt.AWTIcon32_security_icon_yellow16_png.security_icon_yellow16_png);\n-                icons[1][0] = new IconInfo(sun.awt.AWTIcon32_security_icon_bw24_png.security_icon_bw24_png);\n-                icons[1][1] = new IconInfo(sun.awt.AWTIcon32_security_icon_interim24_png.security_icon_interim24_png);\n-                icons[1][2] = new IconInfo(sun.awt.AWTIcon32_security_icon_yellow24_png.security_icon_yellow24_png);\n-                icons[2][0] = new IconInfo(sun.awt.AWTIcon32_security_icon_bw32_png.security_icon_bw32_png);\n-                icons[2][1] = new IconInfo(sun.awt.AWTIcon32_security_icon_interim32_png.security_icon_interim32_png);\n-                icons[2][2] = new IconInfo(sun.awt.AWTIcon32_security_icon_yellow32_png.security_icon_yellow32_png);\n-                icons[3][0] = new IconInfo(sun.awt.AWTIcon32_security_icon_bw48_png.security_icon_bw48_png);\n-                icons[3][1] = new IconInfo(sun.awt.AWTIcon32_security_icon_interim48_png.security_icon_interim48_png);\n-                icons[3][2] = new IconInfo(sun.awt.AWTIcon32_security_icon_yellow48_png.security_icon_yellow48_png);\n-            }\n-        }\n-        final int sizeIndex = size % icons.length;\n-        return icons[sizeIndex][num % icons[sizeIndex].length];\n-    }\n-\n-    public CWarningWindow(final Window _ownerWindow, final LWWindowPeer _ownerPeer) {\n-        super();\n-\n-        this.ownerPeer = new WeakReference<>(_ownerPeer);\n-        this.ownerWindow = _ownerWindow;\n-\n-        initialize(null, null, _ownerPeer.getPlatformWindow());\n-\n-        setOpaque(false);\n-\n-        String warningString = ownerWindow.getWarningString();\n-        if (warningString != null) {\n-            contentView.setToolTip(ownerWindow.getWarningString());\n-        }\n-\n-        updateIconSize();\n-    }\n-\n-    \/**\n-     * @param x,y,w,h coordinates of the untrusted window\n-     *\/\n-    public void reposition(int x, int y, int w, int h) {\n-        final Point2D point = AWTAccessor.getWindowAccessor().\n-                calculateSecurityWarningPosition(ownerWindow, x, y, w, h);\n-        setBounds((int)point.getX(), (int)point.getY(), getWidth(), getHeight());\n-    }\n-\n-    public void setVisible(boolean visible, boolean doSchedule) {\n-        synchronized (taskLock) {\n-            cancelTasks();\n-\n-            if (visible) {\n-                if (isVisible()) {\n-                    currentIcon = 0;\n-                } else {\n-                    currentIcon = 2;\n-                }\n-\n-                showHideTask = new ShowingTask();\n-                LWCToolkit.performOnMainThreadAfterDelay(showHideTask, 50);\n-            } else {\n-                if (!isVisible()) {\n-                    return;\n-                }\n-\n-                showHideTask = new HidingTask();\n-                if (doSchedule) {\n-                    LWCToolkit.performOnMainThreadAfterDelay(showHideTask, HIDING_DELAY);\n-                } else {\n-                    LWCToolkit.performOnMainThreadAfterDelay(showHideTask, 50);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void notifyIconify(boolean iconify) {\n-    }\n-\n-    @Override\n-    public void notifyZoom(boolean isZoomed) {\n-    }\n-\n-    @Override\n-    public void notifyExpose(final Rectangle r) {\n-        repaint();\n-    }\n-\n-    @Override\n-    public void notifyReshape(int x, int y, int w, int h) {\n-    }\n-\n-    @Override\n-    public void notifyUpdateCursor() {\n-    }\n-\n-    @Override\n-    public void notifyActivation(boolean activation, LWWindowPeer opposite) {\n-    }\n-\n-    @Override\n-    public void notifyNCMouseDown() {\n-    }\n-\n-    @Override\n-    public void notifyMouseEvent(int id, long when, int button, int x, int y,\n-                                 int absX, int absY, int modifiers,\n-                                 int clickCount, boolean popupTrigger,\n-                                 byte[] bdata) {\n-        LWWindowPeer peer = ownerPeer.get();\n-        if (id == MouseEvent.MOUSE_EXITED) {\n-            if (peer != null) {\n-                peer.updateSecurityWarningVisibility();\n-            }\n-        } else if(id == MouseEvent.MOUSE_ENTERED) {\n-            if (peer != null) {\n-                peer.updateSecurityWarningVisibility();\n-            }\n-        }\n-    }\n-\n-    public Rectangle getBounds() {\n-        synchronized (lock) {\n-            return bounds.getBounds();\n-        }\n-    }\n-\n-    @Override\n-    public boolean isVisible() {\n-        synchronized (lock) {\n-            return visible;\n-        }\n-    }\n-\n-    @Override\n-    public void setVisible(boolean visible) {\n-        synchronized (lock) {\n-            execute(ptr -> {\n-                \/\/ Actually show or hide the window\n-                if (visible) {\n-                    CWrapper.NSWindow.orderFront(ptr);\n-                } else {\n-                    CWrapper.NSWindow.orderOut(ptr);\n-                }\n-            });\n-\n-            this.visible = visible;\n-\n-            \/\/ Manage parent-child relationship when showing\n-            if (visible) {\n-                \/\/ Order myself above my parent\n-                if (owner != null && owner.isVisible()) {\n-                    owner.execute(ownerPtr -> {\n-                        execute(ptr -> {\n-                            CWrapper.NSWindow.orderWindow(ptr,\n-                                                          CWrapper.NSWindow.NSWindowAbove,\n-                                                          ownerPtr);\n-                        });\n-                    });\n-\n-                    \/\/ do not allow security warning to be obscured by other windows\n-                    applyWindowLevel(ownerWindow);\n-                }\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void notifyMouseWheelEvent(long when, int x, int y, int absX,\n-                                      int absY, int modifiers, int scrollType,\n-                                      int scrollAmount, int wheelRotation,\n-                                      double preciseWheelRotation,\n-                                      byte[] bdata) {\n-    }\n-\n-    @Override\n-    public void notifyKeyEvent(int id, long when, int modifiers, int keyCode,\n-                               char keyChar, int keyLocation, int jextendedkeyCode) {\n-    }\n-\n-    protected int getInitialStyleBits() {\n-        int styleBits = 0;\n-        CPlatformWindow.SET(styleBits, CPlatformWindow.UTILITY, true);\n-        return styleBits;\n-    }\n-\n-    protected void deliverMoveResizeEvent(int x, int y, int width, int height,\n-                                          boolean byUser) {\n-\n-        boolean isResize;\n-        synchronized (lock) {\n-            isResize = (bounds.width != width || bounds.height != height);\n-            bounds = new Rectangle(x, y, width, height);\n-        }\n-\n-        if (isResize) {\n-            replaceSurface();\n-        }\n-\n-        super.deliverMoveResizeEvent(x, y, width, height, byUser);\n-    }\n-\n-    protected CPlatformResponder createPlatformResponder() {\n-        return new CPlatformResponder(this, false);\n-    }\n-\n-    CPlatformView createContentView() {\n-        return new CPlatformView() {\n-            public GraphicsConfiguration getGraphicsConfiguration() {\n-                LWWindowPeer peer = ownerPeer.get();\n-                return peer.getGraphicsConfiguration();\n-            }\n-\n-            public Rectangle getBounds() {\n-                return CWarningWindow.this.getBounds();\n-            }\n-\n-            public CGLLayer createCGLayer() {\n-                return new CGLLayer(null) {\n-                    public Rectangle getBounds() {\n-                        return CWarningWindow.this.getBounds();\n-                    }\n-\n-                    public GraphicsConfiguration getGraphicsConfiguration() {\n-                        LWWindowPeer peer = ownerPeer.get();\n-                        return peer.getGraphicsConfiguration();\n-                    }\n-\n-                    public boolean isOpaque() {\n-                        return false;\n-                    }\n-                };\n-            }\n-            public MTLLayer createMTLLayer() {\n-                return new MTLLayer(null) {\n-                    public Rectangle getBounds() {\n-                        return CWarningWindow.this.getBounds();\n-                    }\n-\n-                    public GraphicsConfiguration getGraphicsConfiguration() {\n-                        LWWindowPeer peer = ownerPeer.get();\n-                        return peer.getGraphicsConfiguration();\n-                    }\n-\n-                    public boolean isOpaque() {\n-                        return false;\n-                    }\n-                };\n-            }\n-\n-        };\n-    }\n-\n-    @Override\n-    public void dispose() {\n-        cancelTasks();\n-        SurfaceData surfaceData = contentView.getSurfaceData();\n-        if (surfaceData != null) {\n-            surfaceData.invalidate();\n-        }\n-        super.dispose();\n-    }\n-\n-    private void cancelTasks() {\n-        synchronized (taskLock) {\n-            if (showHideTask != null) {\n-                showHideTask.cancel();\n-                showHideTask = null;\n-            }\n-        }\n-    }\n-\n-    private void updateIconSize() {\n-        int newSize = -1;\n-\n-        if (ownerWindow != null) {\n-            Insets insets = ownerWindow.getInsets();\n-            int max = Math.max(insets.top, Math.max(insets.bottom,\n-                    Math.max(insets.left, insets.right)));\n-            if (max < 24) {\n-                newSize = 0;\n-            } else if (max < 32) {\n-                newSize = 1;\n-            } else if (max < 48) {\n-                newSize = 2;\n-            } else {\n-                newSize = 3;\n-            }\n-        }\n-        \/\/ Make sure we have a valid size\n-        if (newSize == -1) {\n-            newSize = 0;\n-        }\n-\n-        synchronized (lock) {\n-            if (newSize != currentSize) {\n-                currentSize = newSize;\n-                IconInfo ico = getSecurityIconInfo(currentSize, 0);\n-                AWTAccessor.getWindowAccessor().setSecurityWarningSize(\n-                    ownerWindow, ico.getWidth(), ico.getHeight());\n-            }\n-        }\n-    }\n-\n-    private Graphics getGraphics() {\n-        SurfaceData sd = contentView.getSurfaceData();\n-        if (ownerWindow == null || sd == null) {\n-            return null;\n-        }\n-\n-        return new SunGraphics2D(sd, SystemColor.windowText, SystemColor.window,\n-                                 ownerWindow.getFont());\n-    }\n-\n-\n-    private void repaint() {\n-        final Graphics g = getGraphics();\n-        if (g != null) {\n-            try {\n-                ((Graphics2D) g).setComposite(AlphaComposite.Src);\n-                g.drawImage(getSecurityIconInfo().getImage(), 0, 0, null);\n-            } finally {\n-                g.dispose();\n-            }\n-        }\n-    }\n-\n-    private void replaceSurface() {\n-        SurfaceData oldData = contentView.getSurfaceData();\n-\n-        replaceSurfaceData();\n-\n-        if (oldData != null && oldData != contentView.getSurfaceData()) {\n-            oldData.flush();\n-        }\n-    }\n-\n-    private int getWidth() {\n-        return getSecurityIconInfo().getWidth();\n-    }\n-\n-    private int getHeight() {\n-        return getSecurityIconInfo().getHeight();\n-    }\n-\n-    private IconInfo getSecurityIconInfo() {\n-        return getSecurityIconInfo(currentSize, currentIcon);\n-    }\n-\n-    private final Lock taskLock = new Lock();\n-    private CancelableRunnable showHideTask;\n-\n-    private abstract static class CancelableRunnable implements Runnable {\n-        private volatile boolean perform = true;\n-\n-        public final void cancel() {\n-            perform = false;\n-        }\n-\n-        @Override\n-        public final void run() {\n-            if (perform) {\n-                perform();\n-            }\n-        }\n-\n-        public abstract void perform();\n-    }\n-\n-    private class HidingTask extends CancelableRunnable {\n-        @Override\n-        public void perform() {\n-            synchronized (lock) {\n-                setVisible(false);\n-            }\n-\n-            synchronized (taskLock) {\n-                showHideTask = null;\n-            }\n-        }\n-    }\n-\n-    private class ShowingTask extends CancelableRunnable {\n-        @Override\n-        public void perform() {\n-            synchronized (lock) {\n-                if (!isVisible()) {\n-                    setVisible(true);\n-                }\n-                repaint();\n-            }\n-\n-            synchronized (taskLock) {\n-                if (currentIcon > 0) {\n-                    currentIcon--;\n-                    showHideTask = new ShowingTask();\n-                    LWCToolkit.performOnMainThreadAfterDelay(showHideTask, SHOWING_DELAY);\n-                } else {\n-                    showHideTask = null;\n-                }\n-            }\n-        }\n-    }\n-}\n-\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/CWarningWindow.java","additions":0,"deletions":475,"binary":false,"changes":475,"status":"deleted"},{"patch":"@@ -122,1 +122,0 @@\n-import sun.lwawt.SecurityWarningWindow;\n@@ -315,6 +314,0 @@\n-    @Override\n-    protected SecurityWarningWindow createSecurityWarning(Window ownerWindow,\n-                                                          LWWindowPeer ownerPeer) {\n-        return new CWarningWindow(ownerWindow, ownerPeer);\n-    }\n-\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/macosx\/LWCToolkit.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -381,16 +381,0 @@\n-\n-    \/**\n-     * Calls to the security manager's {@code checkPermission} method with an\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")} permission. This\n-     * permission is needed, because we cannot add a security warning icon to\n-     * the windows of the external native application.\n-     *\/\n-    private void checkAWTPermission() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new AWTPermission(\n-                    \"showWindowWithoutWarningBanner\"));\n-        }\n-    }\n-\n@@ -414,1 +398,0 @@\n-        checkAWTPermission();\n@@ -437,1 +420,0 @@\n-        checkAWTPermission();\n@@ -496,1 +478,0 @@\n-        checkAWTPermission();\n@@ -513,1 +494,0 @@\n-        checkAWTPermission();\n@@ -551,1 +531,0 @@\n-        checkAWTPermission();\n@@ -863,1 +842,0 @@\n-        checkAWTPermission();\n@@ -906,1 +884,0 @@\n-        checkAWTPermission();\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Desktop.java","additions":0,"deletions":23,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -213,12 +213,0 @@\n-    \/**\n-     * This represents the warning message that is\n-     * to be displayed in a non secure window. ie :\n-     * a window that has a security manager installed that denies\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}.\n-     * This message can be displayed anywhere in the window.\n-     *\n-     * @serial\n-     * @see #getWarningString\n-     *\/\n-    String      warningString;\n-\n@@ -402,7 +390,0 @@\n-    \/**\n-     * These fields are initialized in the native peer code\n-     * or via AWTAccessor's WindowAccessor.\n-     *\/\n-    private transient volatile int securityWarningWidth;\n-    private transient volatile int securityWarningHeight;\n-\n@@ -432,4 +413,0 @@\n-     * If there is a security manager, then it is invoked to check\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}\n-     * to determine whether or not the window must be displayed with\n-     * a warning banner.\n@@ -536,4 +513,0 @@\n-     * If there is a security manager set, it is invoked to check\n-     * {@code AWTPermission(\"showWindowWithoutWarningBanner\")}.\n-     * If that check fails with a {@code SecurityException} then a warning\n-     * banner is created.\n@@ -1366,1 +1339,2 @@\n-     * so this method always returns {@code null}.\n+     * so this method always returns {@code null} and may be\n+     * removed in a future release.\n@@ -1368,0 +1342,1 @@\n+     * @deprecated since JDK 24\n@@ -1369,0 +1344,1 @@\n+    @Deprecated(since=\"24\", forRemoval=true)\n@@ -1370,1 +1346,1 @@\n-        return warningString;\n+        return null;\n@@ -3080,3 +3056,0 @@\n-         this.securityWarningWidth = 0;\n-         this.securityWarningHeight = 0;\n-\n@@ -3983,45 +3956,0 @@\n-    \/**\n-     * Calculate the position of the security warning.\n-     *\n-     * This method gets the window location\/size as reported by the native\n-     * system since the locally cached values may represent outdated data.\n-     *\n-     * The method is used from the native code, or via AWTAccessor.\n-     *\n-     * NOTE: this method is invoked on the toolkit thread, and therefore is not\n-     * supposed to become public\/user-overridable.\n-     *\/\n-    private Point2D calculateSecurityWarningPosition(double x, double y,\n-            double w, double h)\n-    {\n-         \/\/ The desired location for the security warning\n-        double wx = x + w * RIGHT_ALIGNMENT + 2.0;\n-        double wy = y + h * TOP_ALIGNMENT + 0.0;\n-\n-        \/\/ First, make sure the warning is not too far from the window bounds\n-        wx = Window.limit(wx,\n-                x - securityWarningWidth - 2,\n-                x + w + 2);\n-        wy = Window.limit(wy,\n-                y - securityWarningHeight - 2,\n-                y + h + 2);\n-\n-        \/\/ Now make sure the warning window is visible on the screen\n-        GraphicsConfiguration graphicsConfig =\n-            getGraphicsConfiguration_NoClientCode();\n-        Rectangle screenBounds = graphicsConfig.getBounds();\n-        Insets screenInsets =\n-            Toolkit.getDefaultToolkit().getScreenInsets(graphicsConfig);\n-\n-        wx = Window.limit(wx,\n-                screenBounds.x + screenInsets.left,\n-                screenBounds.x + screenBounds.width - screenInsets.right\n-                - securityWarningWidth);\n-        wy = Window.limit(wy,\n-                screenBounds.y + screenInsets.top,\n-                screenBounds.y + screenBounds.height - screenInsets.bottom\n-                - securityWarningHeight);\n-\n-        return new Point2D.Double(wx, wy);\n-    }\n-\n@@ -4034,12 +3962,0 @@\n-            public void setSecurityWarningSize(Window window, int width, int height)\n-            {\n-                window.securityWarningWidth = width;\n-                window.securityWarningHeight = height;\n-            }\n-\n-            public Point2D calculateSecurityWarningPosition(Window window,\n-                    double x, double y, double w, double h)\n-            {\n-                return window.calculateSecurityWarningPosition(x, y, w, h);\n-            }\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Window.java","additions":5,"deletions":89,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -117,5 +117,0 @@\n-    \/**\n-     * Instructs the peer to update the position of the security warning.\n-     *\/\n-    void repositionSecurityWarning();\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/peer\/WindowPeer.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1865,3 +1865,3 @@\n-     * Since an internal frame is always secure (since it's fully\n-     * contained within a window that might need a warning string)\n-     * this method always returns <code>null<\/code>.\n+     * This method always returns <code>null<\/code>.\n+     * Warning strings are no longer applicable, even to top-level\n+     * windows, so this method may be removed in a future release\n@@ -1870,0 +1870,1 @@\n+     * @deprecated since JDK 24\n@@ -1871,0 +1872,1 @@\n+    @Deprecated(since=\"24\", forRemoval=true)\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JInternalFrame.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -308,11 +308,0 @@\n-        \/**\n-         * Set the size of the security warning.\n-         *\/\n-        void setSecurityWarningSize(Window w, int width, int height);\n-\n-        \/** Request to recalculate the new position of the security warning for\n-         * the given window size\/location as reported by the native system.\n-         *\/\n-        Point2D calculateSecurityWarningPosition(Window window,\n-                double x, double y, double w, double h);\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/AWTAccessor.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -36,3 +36,0 @@\n-    public static final AWTPermission TOPLEVEL_WINDOW_PERMISSION =\n-        new AWTPermission(\"showWindowWithoutWarningBanner\");\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/AWTPermissions.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -593,3 +593,0 @@\n-        public void repositionSecurityWarning() {\n-        }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/EmbeddedFrame.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-bw16.png","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-bw24.png","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-bw32.png","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-bw48.png","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-interim16.png","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-interim24.png","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-interim32.png","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-interim48.png","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-yellow16.png","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-yellow24.png","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-yellow32.png","binary":true,"status":"deleted"},{"filename":"src\/java.desktop\/share\/classes\/sun\/awt\/resources\/security-icon-yellow48.png","binary":true,"status":"deleted"},{"patch":"@@ -115,3 +115,0 @@\n-        if (warningWindow != null) {\n-            warningWindow.toFront();\n-        }\n@@ -846,1 +843,0 @@\n-        repositionSecurityWarning();\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XDecoratedPeer.java","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,7 +82,0 @@\n-\n-        if (from != null) {\n-            from.updateSecurityWarningVisibility();\n-        }\n-        if (to != null) {\n-            to.updateSecurityWarningVisibility();\n-        }\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XKeyboardFocusManagerPeer.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,416 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package sun.awt.X11;\n-\n-import java.awt.*;\n-import java.awt.geom.Point2D;\n-import java.lang.ref.WeakReference;\n-\n-import sun.awt.IconInfo;\n-import sun.awt.AWTAccessor;\n-import sun.awt.SunToolkit;\n-\n-class XWarningWindow extends XWindow {\n-    private static final int SHOWING_DELAY = 330;\n-    private static final int HIDING_DELAY = 2000;\n-\n-    private final Window ownerWindow;\n-    private WeakReference<XWindowPeer> ownerPeer;\n-    private long parentWindow;\n-\n-    private static final String OWNER = \"OWNER\";\n-    private InfoWindow.Tooltip tooltip;\n-\n-    \/**\n-     * Animation stage.\n-     *\/\n-    private volatile int currentIcon;\n-\n-    \/* -1 - uninitialized.\n-     * 0 - 16x16\n-     * 1 - 24x24\n-     * 2 - 32x32\n-     * 3 - 48x48\n-     *\/\n-    private int currentSize = -1;\n-    private static IconInfo[][] icons;\n-    private static IconInfo getSecurityIconInfo(int size, int num) {\n-        synchronized (XWarningWindow.class) {\n-            if (icons == null) {\n-                icons = new IconInfo[4][3];\n-                if (XlibWrapper.dataModel == 32) {\n-                    icons[0][0] = new IconInfo(sun.awt.AWTIcon32_security_icon_bw16_png.security_icon_bw16_png);\n-                    icons[0][1] = new IconInfo(sun.awt.AWTIcon32_security_icon_interim16_png.security_icon_interim16_png);\n-                    icons[0][2] = new IconInfo(sun.awt.AWTIcon32_security_icon_yellow16_png.security_icon_yellow16_png);\n-                    icons[1][0] = new IconInfo(sun.awt.AWTIcon32_security_icon_bw24_png.security_icon_bw24_png);\n-                    icons[1][1] = new IconInfo(sun.awt.AWTIcon32_security_icon_interim24_png.security_icon_interim24_png);\n-                    icons[1][2] = new IconInfo(sun.awt.AWTIcon32_security_icon_yellow24_png.security_icon_yellow24_png);\n-                    icons[2][0] = new IconInfo(sun.awt.AWTIcon32_security_icon_bw32_png.security_icon_bw32_png);\n-                    icons[2][1] = new IconInfo(sun.awt.AWTIcon32_security_icon_interim32_png.security_icon_interim32_png);\n-                    icons[2][2] = new IconInfo(sun.awt.AWTIcon32_security_icon_yellow32_png.security_icon_yellow32_png);\n-                    icons[3][0] = new IconInfo(sun.awt.AWTIcon32_security_icon_bw48_png.security_icon_bw48_png);\n-                    icons[3][1] = new IconInfo(sun.awt.AWTIcon32_security_icon_interim48_png.security_icon_interim48_png);\n-                    icons[3][2] = new IconInfo(sun.awt.AWTIcon32_security_icon_yellow48_png.security_icon_yellow48_png);\n-                } else {\n-                    icons[0][0] = new IconInfo(sun.awt.AWTIcon64_security_icon_bw16_png.security_icon_bw16_png);\n-                    icons[0][1] = new IconInfo(sun.awt.AWTIcon64_security_icon_interim16_png.security_icon_interim16_png);\n-                    icons[0][2] = new IconInfo(sun.awt.AWTIcon64_security_icon_yellow16_png.security_icon_yellow16_png);\n-                    icons[1][0] = new IconInfo(sun.awt.AWTIcon64_security_icon_bw24_png.security_icon_bw24_png);\n-                    icons[1][1] = new IconInfo(sun.awt.AWTIcon64_security_icon_interim24_png.security_icon_interim24_png);\n-                    icons[1][2] = new IconInfo(sun.awt.AWTIcon64_security_icon_yellow24_png.security_icon_yellow24_png);\n-                    icons[2][0] = new IconInfo(sun.awt.AWTIcon64_security_icon_bw32_png.security_icon_bw32_png);\n-                    icons[2][1] = new IconInfo(sun.awt.AWTIcon64_security_icon_interim32_png.security_icon_interim32_png);\n-                    icons[2][2] = new IconInfo(sun.awt.AWTIcon64_security_icon_yellow32_png.security_icon_yellow32_png);\n-                    icons[3][0] = new IconInfo(sun.awt.AWTIcon64_security_icon_bw48_png.security_icon_bw48_png);\n-                    icons[3][1] = new IconInfo(sun.awt.AWTIcon64_security_icon_interim48_png.security_icon_interim48_png);\n-                    icons[3][2] = new IconInfo(sun.awt.AWTIcon64_security_icon_yellow48_png.security_icon_yellow48_png);\n-                }\n-            }\n-        }\n-        final int sizeIndex = size % icons.length;\n-        return icons[sizeIndex][num % icons[sizeIndex].length];\n-    }\n-\n-    private void updateIconSize() {\n-        int newSize = -1;\n-\n-        if (ownerWindow != null) {\n-            Insets insets = ownerWindow.getInsets();\n-            int max = Math.max(insets.top, Math.max(insets.bottom,\n-                        Math.max(insets.left, insets.right)));\n-            if (max < 24) {\n-                newSize = 0;\n-            } else if (max < 32) {\n-                newSize = 1;\n-            } else if (max < 48) {\n-                newSize = 2;\n-            } else {\n-                newSize = 3;\n-            }\n-        }\n-        \/\/ Make sure we have a valid size\n-        if (newSize == -1) {\n-            newSize = 0;\n-        }\n-\n-        \/\/ Note: this is not the most wise solution to use awtLock here,\n-        \/\/ this should have been sync'ed with the stateLock. However,\n-        \/\/ the awtLock must be taken first (see XBaseWindow.getStateLock()),\n-        \/\/ and we need the awtLock anyway to update the shape of the icon.\n-        \/\/ So it's easier to use just one lock instead.\n-        XToolkit.awtLock();\n-        try {\n-            if (newSize != currentSize) {\n-                currentSize = newSize;\n-                IconInfo ico = getSecurityIconInfo(currentSize, 0);\n-                XlibWrapper.SetBitmapShape(XToolkit.getDisplay(), getWindow(),\n-                        ico.getWidth(), ico.getHeight(), ico.getIntData());\n-                AWTAccessor.getWindowAccessor().setSecurityWarningSize(\n-                        ownerWindow, ico.getWidth(), ico.getHeight());\n-            }\n-        } finally {\n-            XToolkit.awtUnlock();\n-        }\n-    }\n-\n-    private IconInfo getSecurityIconInfo() {\n-        updateIconSize();\n-        return getSecurityIconInfo(currentSize, currentIcon);\n-    }\n-\n-    XWarningWindow(final Window ownerWindow, long parentWindow, XWindowPeer ownerPeer) {\n-        super(new XCreateWindowParams(new Object[] {\n-                        TARGET, ownerWindow,\n-                        OWNER, Long.valueOf(parentWindow)\n-        }));\n-        this.ownerWindow = ownerWindow;\n-        this.parentWindow = parentWindow;\n-        this.tooltip = new InfoWindow.Tooltip(null, getTarget(),\n-                new InfoWindow.Tooltip.LiveArguments() {\n-                    public boolean isDisposed() {\n-                        return XWarningWindow.this.isDisposed();\n-                    }\n-                    public Rectangle getBounds() {\n-                        return XWarningWindow.this.getBounds();\n-                    }\n-                    public String getTooltipString() {\n-                        return XWarningWindow.this.ownerWindow.getWarningString();\n-                    }\n-                });\n-        this.ownerPeer = new WeakReference<XWindowPeer>(ownerPeer);\n-    }\n-\n-    private void requestNoTaskbar() {\n-        XNETProtocol netProtocol = XWM.getWM().getNETProtocol();\n-        if (netProtocol != null) {\n-            netProtocol.requestState(this, netProtocol.XA_NET_WM_STATE_SKIP_TASKBAR, true);\n-        }\n-    }\n-\n-    @Override\n-    void postInit(XCreateWindowParams params) {\n-        super.postInit(params);\n-        XToolkit.awtLock();\n-        try {\n-            XWM.setMotifDecor(this, false, 0, 0);\n-            XWM.setOLDecor(this, false, 0);\n-\n-            long parentWindow = ((Long)params.get(OWNER)).longValue();\n-            XlibWrapper.XSetTransientFor(XToolkit.getDisplay(),\n-                    getWindow(), parentWindow);\n-\n-            XWMHints hints = getWMHints();\n-            hints.set_flags(hints.get_flags() | (int)XUtilConstants.InputHint | (int)XUtilConstants.StateHint);\n-            hints.set_input(false);\n-            hints.set_initial_state(XUtilConstants.NormalState);\n-            XlibWrapper.XSetWMHints(XToolkit.getDisplay(), getWindow(), hints.pData);\n-\n-            initWMProtocols();\n-            requestNoTaskbar();\n-        } finally {\n-            XToolkit.awtUnlock();\n-        }\n-    }\n-\n-    \/**\n-     * @param x,y,w,h coordinates of the untrusted window\n-     *\/\n-    public void reposition(int x, int y, int w, int h) {\n-        Point2D point = AWTAccessor.getWindowAccessor().\n-            calculateSecurityWarningPosition(ownerWindow,\n-                x, y, w, h);\n-        reshape((int)point.getX(), (int)point.getY(), getWidth(), getHeight());\n-    }\n-\n-    protected String getWMName() {\n-        return \"Warning window\";\n-    }\n-\n-    public Graphics getGraphics() {\n-        if ((surfaceData == null) || (ownerWindow == null)) return null;\n-        return getGraphics(surfaceData,\n-                                 getColor(),\n-                                 getBackground(),\n-                                 getFont());\n-    }\n-    void paint(Graphics g, int x, int y, int width, int height) {\n-        g.drawImage(getSecurityIconInfo().getImage(), 0, 0, null);\n-    }\n-\n-    String getWarningString() {\n-        return ownerWindow.getWarningString();\n-    }\n-\n-    int getWidth() {\n-        return getSecurityIconInfo().getWidth();\n-    }\n-\n-    int getHeight() {\n-        return getSecurityIconInfo().getHeight();\n-    }\n-\n-    Color getBackground() {\n-        return SystemColor.window;\n-    }\n-    Color getColor() {\n-        return Color.black;\n-    }\n-    Font getFont () {\n-        return ownerWindow.getFont();\n-    }\n-\n-    @Override\n-    public void repaint() {\n-        final Rectangle bounds = getBounds();\n-        final Graphics g = getGraphics();\n-        if (g != null) {\n-            try {\n-                paint(g, 0, 0, bounds.width, bounds.height);\n-            } finally {\n-                g.dispose();\n-            }\n-        }\n-    }\n-    @Override\n-    public void handleExposeEvent(XEvent xev) {\n-        super.handleExposeEvent(xev);\n-\n-        XExposeEvent xe = xev.get_xexpose();\n-        final int x = scaleDown(xe.get_x());\n-        final int y = scaleDown(xe.get_y());\n-        final int width = scaleDown(xe.get_width());\n-        final int height = scaleDown(xe.get_height());\n-        SunToolkit.executeOnEventHandlerThread(target,\n-                new Runnable() {\n-                    public void run() {\n-                        final Graphics g = getGraphics();\n-                        if (g != null) {\n-                            try {\n-                                paint(g, x, y, width, height);\n-                            } finally {\n-                                g.dispose();\n-                            }\n-                        }\n-                    }\n-                });\n-    }\n-\n-    @Override\n-    protected boolean isEventDisabled(XEvent e) {\n-        return true;\n-    }\n-\n-    \/** Send a synthetic UnmapNotify in order to withdraw the window.\n-     *\/\n-    private void withdraw() {\n-        XEvent req = new XEvent();\n-        try {\n-            long root;\n-            XToolkit.awtLock();\n-            try {\n-                root = XlibWrapper.RootWindow(XToolkit.getDisplay(), getScreenNumber());\n-            }\n-            finally {\n-                XToolkit.awtUnlock();\n-            }\n-\n-            req.set_type(XConstants.UnmapNotify);\n-\n-            XUnmapEvent umev = req.get_xunmap();\n-\n-            umev.set_event(root);\n-            umev.set_window(getWindow());\n-            umev.set_from_configure(false);\n-\n-            XToolkit.awtLock();\n-            try {\n-                XlibWrapper.XSendEvent(XToolkit.getDisplay(),\n-                        root,\n-                        false,\n-                        XConstants.SubstructureRedirectMask | XConstants.SubstructureNotifyMask,\n-                        req.pData);\n-            }\n-            finally {\n-                XToolkit.awtUnlock();\n-            }\n-        } finally {\n-            req.dispose();\n-        }\n-    }\n-\n-    @Override\n-    protected void stateChanged(long time, int oldState, int newState) {\n-        if (newState == XUtilConstants.IconicState) {\n-            super.xSetVisible(false);\n-            withdraw();\n-        }\n-    }\n-\n-    @Override\n-    protected void setMouseAbove(boolean above) {\n-        super.setMouseAbove(above);\n-        XWindowPeer p = ownerPeer.get();\n-        if (p != null) {\n-            p.updateSecurityWarningVisibility();\n-        }\n-    }\n-\n-    @Override\n-    protected void enterNotify(long window) {\n-        super.enterNotify(window);\n-        if (window == getWindow()) {\n-            tooltip.enter();\n-        }\n-    }\n-\n-    @Override\n-    protected void leaveNotify(long window) {\n-        super.leaveNotify(window);\n-        if (window == getWindow()) {\n-            tooltip.exit();\n-        }\n-    }\n-\n-    @Override\n-    public void xSetVisible(boolean visible) {\n-        super.xSetVisible(visible);\n-\n-        \/\/ The _NET_WM_STATE_SKIP_TASKBAR got reset upon hiding\/showing,\n-        \/\/ so we request it every time whenever we change the visibility.\n-        requestNoTaskbar();\n-    }\n-\n-    private final Runnable hidingTask = new Runnable() {\n-        public void run() {\n-            xSetVisible(false);\n-        }\n-    };\n-\n-    private final Runnable showingTask = new Runnable() {\n-        public void run() {\n-            if (!isVisible()) {\n-                xSetVisible(true);\n-                updateIconSize();\n-                XWindowPeer peer = ownerPeer.get();\n-                if (peer != null) {\n-                    peer.repositionSecurityWarning();\n-                }\n-            }\n-            repaint();\n-            if (currentIcon > 0) {\n-                currentIcon--;\n-                XToolkit.schedule(showingTask, SHOWING_DELAY);\n-            }\n-        }\n-    };\n-\n-    public void setSecurityWarningVisible(boolean visible, boolean doSchedule) {\n-        if (visible) {\n-            XToolkit.remove(hidingTask);\n-            XToolkit.remove(showingTask);\n-            if (isVisible()) {\n-                currentIcon = 0;\n-            } else {\n-                currentIcon = 3;\n-            }\n-            if (doSchedule) {\n-                XToolkit.schedule(showingTask, 1);\n-            } else {\n-                showingTask.run();\n-            }\n-        } else {\n-            XToolkit.remove(showingTask);\n-            XToolkit.remove(hidingTask);\n-            if (!isVisible()) {\n-                return;\n-            }\n-            if (doSchedule) {\n-                XToolkit.schedule(hidingTask, HIDING_DELAY);\n-            } else {\n-                hidingTask.run();\n-            }\n-        }\n-    }\n-}\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XWarningWindow.java","additions":0,"deletions":416,"binary":false,"changes":416,"status":"deleted"},{"patch":"@@ -84,1 +84,0 @@\n-    XWarningWindow warningWindow;\n@@ -282,9 +281,0 @@\n-         \/\/ Init warning window(for applets)\n-        if (((Window)target).getWarningString() != null) {\n-            \/\/ accessSystemTray permission allows to display TrayIcon, TrayIcon tooltip\n-            \/\/ and TrayIcon balloon windows without a warning window.\n-            if (!AWTAccessor.getWindowAccessor().isTrayIconWindow((Window)target)) {\n-                warningWindow = new XWarningWindow((Window)target, getWindow(), this);\n-            }\n-        }\n-\n@@ -507,3 +497,0 @@\n-            if (isMoved || isResized) {\n-                repositionSecurityWarning();\n-            }\n@@ -828,1 +815,0 @@\n-        repositionSecurityWarning();\n@@ -1122,3 +1108,0 @@\n-        if (!vis && warningWindow != null) {\n-            warningWindow.setSecurityWarningVisible(false, false);\n-        }\n@@ -1174,1 +1157,0 @@\n-        repositionSecurityWarning();\n@@ -1183,3 +1165,0 @@\n-    boolean hasWarningWindow() {\n-        return ((Window)target).getWarningString() != null;\n-    }\n@@ -1197,19 +1176,0 @@\n-    public void repositionSecurityWarning() {\n-        \/\/ NOTE: On KWin if the window\/border snapping option is enabled,\n-        \/\/ the Java window may be swinging while it's being moved.\n-        \/\/ This doesn't make the application unusable though looks quite ugly.\n-        \/\/ Probably we need to find some hint to assign to our Security\n-        \/\/ Warning window in order to exclude it from the snapping option.\n-        \/\/ We are not currently aware of existence of such a property.\n-        if (warningWindow != null) {\n-            \/\/ We can't use the coordinates stored in the XBaseWindow since\n-            \/\/ they are zeros for decorated frames.\n-            ComponentAccessor compAccessor = AWTAccessor.getComponentAccessor();\n-            int x = compAccessor.getX(target);\n-            int y = compAccessor.getY(target);\n-            int width = compAccessor.getWidth(target);\n-            int height = compAccessor.getHeight(target);\n-            warningWindow.reposition(x, y, width, height);\n-        }\n-    }\n-\n@@ -1219,1 +1179,0 @@\n-        updateSecurityWarningVisibility();\n@@ -1225,34 +1184,0 @@\n-        updateSecurityWarningVisibility();\n-    }\n-\n-    public void updateSecurityWarningVisibility() {\n-        if (warningWindow == null) {\n-            return;\n-        }\n-\n-        if (!isVisible()) {\n-            return; \/\/ The warning window should already be hidden.\n-        }\n-\n-        boolean show = false;\n-\n-        if (!isFullScreenExclusiveMode()) {\n-            int state = getWMState();\n-\n-            \/\/ getWMState() always returns 0 (Withdrawn) for simple windows. Hence\n-            \/\/ we ignore the state for such windows.\n-            if (isVisible() && (state == XUtilConstants.NormalState || isSimpleWindow())) {\n-                if (XKeyboardFocusManagerPeer.getInstance().getCurrentFocusedWindow() ==\n-                        getTarget())\n-                {\n-                    show = true;\n-                }\n-\n-                if (isMouseAbove() || warningWindow.isMouseAbove())\n-                {\n-                    show = true;\n-                }\n-            }\n-        }\n-\n-        warningWindow.setSecurityWarningVisible(show, true);\n@@ -1287,4 +1212,0 @@\n-        if (warningWindow != null) {\n-            warningWindow.destroy();\n-        }\n-\n@@ -1320,1 +1241,0 @@\n-        repositionSecurityWarning();\n@@ -1501,2 +1421,0 @@\n-\n-        updateSecurityWarningVisibility();\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11\/XWindowPeer.java","additions":0,"deletions":82,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -654,4 +654,0 @@\n-     private boolean hasWarningWindow() {\n-         return ((Window)target).getWarningString() != null;\n-     }\n-\n@@ -662,3 +658,0 @@\n-     @Override\n-     public native void repositionSecurityWarning();\n-\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/windows\/WWindowPeer.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -913,3 +913,0 @@\n-    if (currentWmSizeState == SIZE_MINIMIZED) {\n-        UpdateSecurityWarningVisibility();\n-    }\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Frame.cpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1441,18 +1441,0 @@\n-\n-            if (fw) {\n-                fw->UpdateSecurityWarningVisibility();\n-            }\n-            \/\/ ... however, because we use GA_ROOT, we may find the warningIcon\n-            \/\/ which is not a Java windows.\n-            if (AwtWindow::IsWarningWindow(hwnd)) {\n-                hwnd = ::GetParent(hwnd);\n-                if (hwnd) {\n-                    tw = (AwtWindow*)AwtComponent::GetComponent(hwnd);\n-                }\n-                tk.m_lastWindowUnderMouse = hwnd;\n-            }\n-            if (tw) {\n-                tw->UpdateSecurityWarningVisibility();\n-            }\n-\n-\n@@ -1912,42 +1894,0 @@\n-\/\/ The icon at index 0 must be gray. See AwtWindow::GetSecurityWarningIcon()\n-HICON AwtToolkit::GetSecurityWarningIcon(UINT index, UINT w, UINT h)\n-{\n-    \/\/Note: should not exceed 10 because of the current implementation.\n-    static const int securityWarningIconCounter = 3;\n-\n-    static HICON securityWarningIcon[securityWarningIconCounter]      = {NULL, NULL, NULL};\n-    static UINT securityWarningIconWidth[securityWarningIconCounter]  = {0, 0, 0};\n-    static UINT securityWarningIconHeight[securityWarningIconCounter] = {0, 0, 0};\n-\n-    index = AwtToolkit::CalculateWave(index, securityWarningIconCounter);\n-\n-    if (securityWarningIcon[index] == NULL ||\n-            w != securityWarningIconWidth[index] ||\n-            h != securityWarningIconHeight[index])\n-    {\n-        if (securityWarningIcon[index] != NULL)\n-        {\n-            ::DestroyIcon(securityWarningIcon[index]);\n-        }\n-\n-        static const wchar_t securityWarningIconName[] = L\"SECURITY_WARNING_\";\n-        wchar_t iconResourceName[sizeof(securityWarningIconName) + 2];\n-        ::ZeroMemory(iconResourceName, sizeof(iconResourceName));\n-        wcscpy(iconResourceName, securityWarningIconName);\n-\n-        wchar_t strIndex[2];\n-        ::ZeroMemory(strIndex, sizeof(strIndex));\n-        strIndex[0] = L'0' + index;\n-\n-        wcscat(iconResourceName, strIndex);\n-\n-        securityWarningIcon[index] = (HICON)::LoadImage(GetModuleHandle(),\n-                iconResourceName,\n-                IMAGE_ICON, w, h, LR_DEFAULTCOLOR);\n-        securityWarningIconWidth[index] = w;\n-        securityWarningIconHeight[index] = h;\n-    }\n-\n-    return securityWarningIcon[index];\n-}\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Toolkit.cpp","additions":0,"deletions":60,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -397,2 +397,0 @@\n-    HICON GetSecurityWarningIcon(UINT index, UINT w, UINT h);\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Toolkit.h","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -140,4 +140,0 @@\n-\/\/ struct for _RepositionSecurityWarning() method\n-struct RepositionSecurityWarningStruct {\n-    jobject window;\n-};\n@@ -159,1 +155,0 @@\n-jfieldID AwtWindow::warningStringID;\n@@ -162,2 +157,0 @@\n-jfieldID AwtWindow::securityWarningWidthID;\n-jfieldID AwtWindow::securityWarningHeightID;\n@@ -168,2 +161,0 @@\n-jmethodID AwtWindow::getWarningStringMID;\n-jmethodID AwtWindow::calculateSecurityWarningPositionMID;\n@@ -176,1 +167,0 @@\n-UINT AwtWindow::untrustedWindowsCounter = 0;\n@@ -192,1 +182,0 @@\n-    VERIFY(::SetRectEmpty(&m_warningRect));\n@@ -211,5 +200,0 @@\n-\n-    warningString = NULL;\n-    warningWindow = NULL;\n-    securityTooltipWindow = NULL;\n-    securityWarningAnimationStage = 0;\n@@ -235,3 +219,0 @@\n-    if (warningString != NULL) {\n-        delete [] warningString;\n-    }\n@@ -358,13 +339,0 @@\n-void AwtWindow::RepositionSecurityWarning(JNIEnv *env)\n-{\n-    RECT rect;\n-    CalculateWarningWindowBounds(env, &rect);\n-\n-    ::SetWindowPos(warningWindow, IsAlwaysOnTop() ? HWND_TOPMOST : HWND_NOTOPMOST,\n-            rect.left, rect.top,\n-            rect.right - rect.left, rect.bottom - rect.top,\n-            SWP_ASYNCWINDOWPOS | SWP_NOACTIVATE |\n-            SWP_NOOWNERZORDER\n-            );\n-}\n-\n@@ -388,13 +356,0 @@\n-    \/\/ Reposition the warning window\n-    if (IsUntrusted() && warningWindow != NULL) {\n-        if (wp->flags & SWP_HIDEWINDOW) {\n-            UpdateSecurityWarningVisibility();\n-        }\n-\n-        RepositionSecurityWarning((JNIEnv *)JNU_GetEnv(jvm, JNI_VERSION_1_2));\n-\n-        if (wp->flags & SWP_SHOWWINDOW) {\n-            UpdateSecurityWarningVisibility();\n-        }\n-    }\n-\n@@ -427,10 +382,0 @@\n-bool AwtWindow::IsWarningWindow(HWND hWnd)\n-{\n-    const UINT len = 128;\n-    TCHAR windowClassName[len];\n-\n-    ::RealGetWindowClass(hWnd, windowClassName, len);\n-    return 0 == _tcsncmp(windowClassName,\n-            AwtWindow::GetWarningWindowClassName(), len);\n-}\n-\n@@ -443,7 +388,1 @@\n-        if (comp == NULL) {\n-            \/\/ Check if it's a security warning icon\n-            \/\/ See: 5091224, 6181725, 6732583\n-            if (AwtWindow::IsWarningWindow(hWnd)) {\n-                return 1;\n-            }\n-        } else {\n+        if (comp != NULL) {\n@@ -464,15 +403,0 @@\n-void AwtWindow::InitSecurityWarningSize(JNIEnv *env)\n-{\n-    warningWindowWidth = ::GetSystemMetrics(SM_CXSMICON);\n-    warningWindowHeight = ::GetSystemMetrics(SM_CYSMICON);\n-\n-    jobject target = GetTarget(env);\n-\n-    env->SetIntField(target, AwtWindow::securityWarningWidthID,\n-            warningWindowWidth);\n-    env->SetIntField(target, AwtWindow::securityWarningHeightID,\n-            warningWindowHeight);\n-\n-    env->DeleteLocalRef(target);\n-}\n-\n@@ -488,19 +412,0 @@\n-    \/\/ Retrieve the warning string\n-    \/\/ Note: we need to get it before CreateHWnd() happens because\n-    \/\/ the isUntrusted() method may be invoked while the HWND\n-    \/\/ is being created in response to some window messages.\n-    jobject target = env->GetObjectField(peer, AwtObject::targetID);\n-    jstring javaWarningString =\n-        (jstring)env->CallObjectMethod(target, AwtWindow::getWarningStringMID);\n-\n-    if (javaWarningString != NULL) {\n-        size_t length = env->GetStringLength(javaWarningString) + 1;\n-        warningString = new WCHAR[length];\n-        env->GetStringRegion(javaWarningString, 0,\n-                static_cast<jsize>(length - 1), reinterpret_cast<jchar*>(warningString));\n-        warningString[length-1] = L'\\0';\n-\n-        env->DeleteLocalRef(javaWarningString);\n-    }\n-    env->DeleteLocalRef(target);\n-\n@@ -520,113 +425,0 @@\n-\n-    \/\/ Now we need to create the warning window.\n-    CreateWarningWindow(env);\n-}\n-\n-void AwtWindow::CreateWarningWindow(JNIEnv *env)\n-{\n-    if (!IsUntrusted()) {\n-        return;\n-    }\n-\n-    if (++AwtWindow::untrustedWindowsCounter == 1) {\n-        AwtToolkit::GetInstance().InstallMouseLowLevelHook();\n-    }\n-\n-    InitSecurityWarningSize(env);\n-\n-    RECT rect;\n-    CalculateWarningWindowBounds(env, &rect);\n-\n-    RegisterWarningWindowClass();\n-    warningWindow = ::CreateWindowEx(\n-            WS_EX_NOACTIVATE,\n-            GetWarningWindowClassName(),\n-            warningString,\n-            WS_POPUP,\n-            rect.left, rect.top,\n-            rect.right - rect.left, rect.bottom - rect.top,\n-            GetHWnd(), \/\/ owner\n-            NULL, \/\/ menu\n-            AwtToolkit::GetInstance().GetModuleHandle(),\n-            NULL \/\/ lParam\n-            );\n-    if (warningWindow == NULL) {\n-        \/\/XXX: actually this is bad... We didn't manage to create the window.\n-        return;\n-    }\n-\n-    HICON hIcon = GetSecurityWarningIcon();\n-\n-    ICONINFO ii;\n-    ::GetIconInfo(hIcon, &ii);\n-\n-    \/\/Note: we assume that every security icon has exactly the same shape.\n-    HRGN rgn = BitmapUtil::BitmapToRgn(ii.hbmColor);\n-    if (rgn) {\n-        ::SetWindowRgn(warningWindow, rgn, TRUE);\n-    }\n-\n-    \/\/ Now we need to create the tooltip control for this window.\n-    if (!ComCtl32Util::GetInstance().IsToolTipControlInitialized()) {\n-        return;\n-    }\n-\n-    securityTooltipWindow = ::CreateWindowEx(\n-            WS_EX_TOPMOST,\n-            TOOLTIPS_CLASS,\n-            NULL,\n-            WS_POPUP | TTS_NOPREFIX | TTS_ALWAYSTIP,\n-            CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT, CW_USEDEFAULT,\n-            warningWindow,\n-            NULL,\n-            AwtToolkit::GetInstance().GetModuleHandle(),\n-            NULL\n-            );\n-\n-    ::SetWindowPos(securityTooltipWindow,\n-            HWND_TOPMOST, 0, 0, 0, 0,\n-            SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE);\n-\n-\n-    \/\/ We currently don't expect changing the size of the window,\n-    \/\/ hence we may not care of updating the TOOL position\/size.\n-    ::GetClientRect(warningWindow, &rect);\n-\n-    TOOLINFO ti;\n-\n-    ti.cbSize = sizeof(ti);\n-    ti.uFlags = TTF_SUBCLASS;\n-    ti.hwnd = warningWindow;\n-    ti.hinst = AwtToolkit::GetInstance().GetModuleHandle();\n-    ti.uId = 0;\n-    ti.lpszText = warningString;\n-    ti.rect.left = rect.left;\n-    ti.rect.top = rect.top;\n-    ti.rect.right = rect.right;\n-    ti.rect.bottom = rect.bottom;\n-\n-    ::SendMessage(securityTooltipWindow, TTM_ADDTOOL,\n-            0, (LPARAM) (LPTOOLINFO) &ti);\n-}\n-\n-void AwtWindow::DestroyWarningWindow()\n-{\n-    if (!IsUntrusted()) {\n-        return;\n-    }\n-    if (--AwtWindow::untrustedWindowsCounter == 0) {\n-        AwtToolkit::GetInstance().UninstallMouseLowLevelHook();\n-    }\n-    if (warningWindow != NULL) {\n-        \/\/ Note that the warningWindow is an owned window, and hence\n-        \/\/ it would be destroyed automatically. However, the window\n-        \/\/ class may only be unregistered if there's no any single\n-        \/\/ window left using this class. Thus, we're destroying the\n-        \/\/ warning window manually. Note that the tooltip window\n-        \/\/ will be destroyed automatically because it's an owned\n-        \/\/ window as well.\n-        ::DestroyWindow(warningWindow);\n-        warningWindow = NULL;\n-        securityTooltipWindow = NULL;\n-        UnregisterWarningWindowClass();\n-    }\n@@ -637,1 +429,0 @@\n-    DestroyWarningWindow();\n@@ -641,203 +432,0 @@\n-LPCTSTR AwtWindow::GetWarningWindowClassName()\n-{\n-    return TEXT(\"SunAwtWarningWindow\");\n-}\n-\n-void AwtWindow::FillWarningWindowClassInfo(WNDCLASS *lpwc)\n-{\n-    lpwc->style         = 0L;\n-    lpwc->lpfnWndProc   = (WNDPROC)WarningWindowProc;\n-    lpwc->cbClsExtra    = 0;\n-    lpwc->cbWndExtra    = 0;\n-    lpwc->hInstance     = AwtToolkit::GetInstance().GetModuleHandle(),\n-    lpwc->hIcon         = AwtToolkit::GetInstance().GetAwtIcon();\n-    lpwc->hCursor       = ::LoadCursor(NULL, IDC_ARROW);\n-    lpwc->hbrBackground = NULL;\n-    lpwc->lpszMenuName  = NULL;\n-    lpwc->lpszClassName = AwtWindow::GetWarningWindowClassName();\n-}\n-\n-void AwtWindow::RegisterWarningWindowClass()\n-{\n-    WNDCLASS  wc;\n-\n-    ::ZeroMemory(&wc, sizeof(wc));\n-\n-    if (!::GetClassInfo(AwtToolkit::GetInstance().GetModuleHandle(),\n-                        AwtWindow::GetWarningWindowClassName(), &wc))\n-    {\n-        AwtWindow::FillWarningWindowClassInfo(&wc);\n-        ATOM atom = ::RegisterClass(&wc);\n-        DASSERT(atom != 0);\n-    }\n-}\n-\n-void AwtWindow::UnregisterWarningWindowClass()\n-{\n-    ::UnregisterClass(AwtWindow::GetWarningWindowClassName(), AwtToolkit::GetInstance().GetModuleHandle());\n-}\n-\n-HICON AwtWindow::GetSecurityWarningIcon()\n-{\n-    \/\/ It is assumed that the icon at index 0 is gray\n-    const UINT index = securityAnimationKind == akShow ?\n-        securityWarningAnimationStage : 0;\n-    HICON ico = AwtToolkit::GetInstance().GetSecurityWarningIcon(index,\n-            warningWindowWidth, warningWindowHeight);\n-    return ico;\n-}\n-\n-\/\/ This function calculates the bounds of the warning window and stores them\n-\/\/ into the RECT structure pointed by the argument rect.\n-void AwtWindow::CalculateWarningWindowBounds(JNIEnv *env, LPRECT rect)\n-{\n-    RECT windowBounds;\n-    AwtToolkit::GetWindowRect(GetHWnd(), &windowBounds);\n-\n-    jobject target = GetTarget(env);\n-    jobject point2D = env->CallObjectMethod(target,\n-            calculateSecurityWarningPositionMID,\n-            (jdouble)windowBounds.left, (jdouble)windowBounds.top,\n-            (jdouble)(windowBounds.right - windowBounds.left),\n-            (jdouble)(windowBounds.bottom - windowBounds.top));\n-    env->DeleteLocalRef(target);\n-\n-    static jclass point2DClassID = NULL;\n-    static jmethodID point2DGetXMID = NULL;\n-    static jmethodID point2DGetYMID = NULL;\n-\n-    if (point2DClassID == NULL) {\n-        jclass point2DClassIDLocal = env->FindClass(\"java\/awt\/geom\/Point2D\");\n-        if (point2DClassIDLocal == NULL) {\n-            env->DeleteLocalRef(point2D);\n-            return;\n-        }\n-        point2DClassID = (jclass)env->NewGlobalRef(point2DClassIDLocal);\n-        env->DeleteLocalRef(point2DClassIDLocal);\n-    }\n-\n-    if (point2DGetXMID == NULL) {\n-        point2DGetXMID = env->GetMethodID(point2DClassID, \"getX\", \"()D\");\n-        if (point2DGetXMID == NULL) {\n-            env->DeleteLocalRef(point2D);\n-            return;\n-        }\n-    }\n-    if (point2DGetYMID == NULL) {\n-        point2DGetYMID = env->GetMethodID(point2DClassID, \"getY\", \"()D\");\n-        if (point2DGetYMID == NULL) {\n-            env->DeleteLocalRef(point2D);\n-            return;\n-        }\n-    }\n-\n-\n-    int x = (int)env->CallDoubleMethod(point2D, point2DGetXMID);\n-    int y = (int)env->CallDoubleMethod(point2D, point2DGetYMID);\n-\n-    env->DeleteLocalRef(point2D);\n-\n-    rect->left = x;\n-    rect->top = y;\n-    rect->right = rect->left + warningWindowWidth;\n-    rect->bottom = rect->top + warningWindowHeight;\n-}\n-\n-LRESULT CALLBACK AwtWindow::WarningWindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)\n-{\n-    switch (uMsg) {\n-        case WM_PAINT:\n-            PaintWarningWindow(hwnd);\n-            return 0;\n-\n-        case WM_MOUSEACTIVATE:\n-            {\n-                \/\/ Retrieve the owner of the warning window.\n-                HWND javaWindow = ::GetParent(hwnd);\n-                if (javaWindow) {\n-                    \/\/ If the window is blocked by a modal dialog, substitute\n-                    \/\/ its handle with the topmost blocker.\n-                    HWND topmostBlocker = GetTopmostModalBlocker(javaWindow);\n-                    if (::IsWindow(topmostBlocker)) {\n-                        javaWindow = topmostBlocker;\n-                    }\n-\n-                    ::BringWindowToTop(javaWindow);\n-\n-                    AwtWindow * window =\n-                        (AwtWindow*)AwtComponent::GetComponent(javaWindow);\n-                    if (window == NULL) {\n-                        \/\/ Quite unlikely to go into here, but it's way better\n-                        \/\/ than getting a crash.\n-                        ::SetForegroundWindow(javaWindow);\n-                    } else {\n-                        \/\/ Activate the window if it is focusable and inactive\n-                        if (window->IsFocusableWindow() &&\n-                                javaWindow != ::GetActiveWindow()) {\n-                            ::SetForegroundWindow(javaWindow);\n-                        } else {\n-                            \/\/ ...otherwise just start the animation.\n-                            window->StartSecurityAnimation(akShow);\n-                        }\n-                    }\n-\n-                    \/\/ In every case if there's a top-most blocker, we need to\n-                    \/\/ enable modal animation.\n-                    if (::IsWindow(topmostBlocker)) {\n-                        AwtDialog::AnimateModalBlocker(topmostBlocker);\n-                    }\n-                }\n-                return MA_NOACTIVATEANDEAT;\n-            }\n-    }\n-    return ::DefWindowProc(hwnd, uMsg, wParam, lParam);\n-}\n-\n-void AwtWindow::PaintWarningWindow(HWND warningWindow)\n-{\n-    RECT updateRect;\n-\n-    if (!::GetUpdateRect(warningWindow, &updateRect, FALSE)) {\n-        \/\/ got nothing to update\n-        return;\n-    }\n-\n-    PAINTSTRUCT ps;\n-    HDC hdc = ::BeginPaint(warningWindow, &ps);\n-    if (hdc == NULL) {\n-        \/\/ indicates an error\n-        return;\n-    }\n-\n-    PaintWarningWindow(warningWindow, hdc);\n-\n-    ::EndPaint(warningWindow, &ps);\n-}\n-\n-void AwtWindow::PaintWarningWindow(HWND warningWindow, HDC hdc)\n-{\n-    HWND javaWindow = ::GetParent(warningWindow);\n-\n-    AwtWindow * window = (AwtWindow*)AwtComponent::GetComponent(javaWindow);\n-    if (window == NULL) {\n-        return;\n-    }\n-\n-    ::DrawIconEx(hdc, 0, 0, window->GetSecurityWarningIcon(),\n-            window->warningWindowWidth, window->warningWindowHeight,\n-            0, NULL, DI_NORMAL);\n-}\n-\n-static const UINT_PTR IDT_AWT_SECURITYANIMATION = 0x102;\n-\n-\/\/ Approximately 6 times a second. 0.75 seconds total.\n-static const UINT securityAnimationTimerElapse = 150;\n-static const UINT securityAnimationMaxIterations = 5;\n-\n-void AwtWindow::RepaintWarningWindow()\n-{\n-    HDC hdc = ::GetDC(warningWindow);\n-    PaintWarningWindow(warningWindow, hdc);\n-    ::ReleaseDC(warningWindow, hdc);\n-}\n-\n@@ -857,62 +445,0 @@\n-void AwtWindow::StartSecurityAnimation(AnimationKind kind)\n-{\n-    if (!IsUntrusted()) {\n-        return;\n-    }\n-    if (warningWindow == NULL) {\n-        return;\n-    }\n-\n-    securityAnimationKind = kind;\n-\n-    securityWarningAnimationStage = 1;\n-    ::SetTimer(GetHWnd(), IDT_AWT_SECURITYANIMATION,\n-            securityAnimationTimerElapse, NULL);\n-\n-    if (securityAnimationKind == akShow) {\n-        ::SetWindowPos(warningWindow,\n-                IsAlwaysOnTop() ? HWND_TOPMOST : HWND_NOTOPMOST,\n-                0, 0, 0, 0,\n-                SWP_NOACTIVATE | SWP_NOSIZE | SWP_NOMOVE |\n-                SWP_SHOWWINDOW | SWP_NOOWNERZORDER);\n-\n-        ::SetLayeredWindowAttributes(warningWindow, RGB(0, 0, 0),\n-                0xFF, LWA_ALPHA);\n-        AwtWindow::SetLayered(warningWindow, false);\n-        ::RedrawWindow(warningWindow, NULL, NULL,\n-                RDW_ERASE | RDW_INVALIDATE | RDW_FRAME | RDW_ALLCHILDREN);\n-    } else if (securityAnimationKind == akPreHide) {\n-        \/\/ Pre-hiding means fading-out. We have to make the window layered.\n-        \/\/ Note: Some VNC clients do not support layered windows, hence\n-        \/\/ we dynamically turn it on and off. See 6805231.\n-        AwtWindow::SetLayered(warningWindow, true);\n-    }\n-}\n-\n-void AwtWindow::StopSecurityAnimation()\n-{\n-    if (!IsUntrusted()) {\n-        return;\n-    }\n-    if (warningWindow == NULL) {\n-        return;\n-    }\n-\n-    securityWarningAnimationStage = 0;\n-    ::KillTimer(GetHWnd(), IDT_AWT_SECURITYANIMATION);\n-\n-    switch (securityAnimationKind) {\n-        case akHide:\n-        case akPreHide:\n-            ::SetWindowPos(warningWindow, HWND_NOTOPMOST, 0, 0, 0, 0,\n-                    SWP_NOACTIVATE | SWP_NOSIZE | SWP_NOMOVE |\n-                    SWP_HIDEWINDOW | SWP_NOOWNERZORDER);\n-            break;\n-        case akShow:\n-            RepaintWarningWindow();\n-            break;\n-    }\n-\n-    securityAnimationKind = akNone;\n-}\n-\n@@ -921,77 +447,1 @@\n-    if (timerID != IDT_AWT_SECURITYANIMATION) {\n-        return mrPassAlong;\n-    }\n-\n-    if (securityWarningAnimationStage == 0) {\n-        return mrConsume;\n-    }\n-\n-    securityWarningAnimationStage++;\n-    if (securityWarningAnimationStage >= securityAnimationMaxIterations) {\n-        if (securityAnimationKind == akPreHide) {\n-            \/\/ chain real hiding\n-            StartSecurityAnimation(akHide);\n-        } else {\n-            StopSecurityAnimation();\n-        }\n-    } else {\n-        switch (securityAnimationKind) {\n-            case akHide:\n-                {\n-                    BYTE opacity = ((int)0xFF *\n-                            (securityAnimationMaxIterations -\n-                             securityWarningAnimationStage)) \/\n-                        securityAnimationMaxIterations;\n-                    ::SetLayeredWindowAttributes(warningWindow,\n-                            RGB(0, 0, 0), opacity, LWA_ALPHA);\n-                }\n-                break;\n-            case akShow:\n-            case akNone: \/\/ quite unlikely, but quite safe\n-                RepaintWarningWindow();\n-                break;\n-        }\n-    }\n-\n-    return mrConsume;\n-}\n-\n-\/\/ The security warning is visible if:\n-\/\/    1. The window has the keyboard window focus, OR\n-\/\/    2. The mouse pointer is located within the window bounds,\n-\/\/       or within the security warning icon.\n-void AwtWindow::UpdateSecurityWarningVisibility()\n-{\n-    if (!IsUntrusted()) {\n-        return;\n-    }\n-    if (warningWindow == NULL) {\n-        return;\n-    }\n-\n-    bool show = false;\n-\n-    if (IsVisible() && currentWmSizeState != SIZE_MINIMIZED &&\n-            !isFullScreenExclusiveMode())\n-    {\n-        if (AwtComponent::GetFocusedWindow() == GetHWnd()) {\n-            show = true;\n-        }\n-\n-        HWND hwnd = AwtToolkit::GetInstance().GetWindowUnderMouse();\n-        if (hwnd == GetHWnd()) {\n-            show = true;\n-        }\n-        if (hwnd == warningWindow) {\n-            show = true;\n-        }\n-    }\n-\n-    if (show && (!::IsWindowVisible(warningWindow) ||\n-                securityAnimationKind == akHide ||\n-                securityAnimationKind == akPreHide)) {\n-        StartSecurityAnimation(akShow);\n-    }\n-    if (!show && ::IsWindowVisible(warningWindow)) {\n-        StartSecurityAnimation(akPreHide);\n-    }\n+    return mrPassAlong;\n@@ -1002,44 +452,0 @@\n-    AwtWindow * fw = (AwtWindow *)AwtComponent::GetComponent(from);\n-    AwtWindow * tw = (AwtWindow *)AwtComponent::GetComponent(to);\n-\n-    if (fw != NULL) {\n-        fw->UpdateSecurityWarningVisibility();\n-    }\n-    if (tw != NULL) {\n-        tw->UpdateSecurityWarningVisibility();\n-\n-        \/\/ Flash on receiving the keyboard focus even if the warning\n-        \/\/ has already been shown (e.g. by hovering with the mouse)\n-        tw->StartSecurityAnimation(akShow);\n-    }\n-}\n-\n-void AwtWindow::_RepositionSecurityWarning(void* param)\n-{\n-    JNIEnv *env = (JNIEnv *)JNU_GetEnv(jvm, JNI_VERSION_1_2);\n-\n-    RepositionSecurityWarningStruct *rsws =\n-        static_cast<RepositionSecurityWarningStruct *>(param);\n-    jobject self = rsws->window;\n-\n-    AwtWindow *window = NULL;\n-\n-    if (self == NULL) {\n-        env->ExceptionClear();\n-        JNU_ThrowNullPointerException(env, \"self\");\n-        delete rsws;\n-        return;\n-    } else {\n-        window = (AwtWindow *)JNI_GET_PDATA(self);\n-        if (window == NULL) {\n-            THROW_NULL_PDATA_IF_NOT_DESTROYED(self);\n-            env->DeleteGlobalRef(self);\n-            delete rsws;\n-            return;\n-        }\n-    }\n-\n-    window->RepositionSecurityWarning(env);\n-\n-    env->DeleteGlobalRef(self);\n-    delete rsws;\n@@ -1922,1 +1328,0 @@\n-        UpdateSecurityWarningVisibility();\n@@ -3359,2 +2764,0 @@\n-    CHECK_NULL(AwtWindow::warningStringID =\n-        env->GetFieldID(cls, \"warningString\", \"Ljava\/lang\/String;\"));\n@@ -3363,6 +2766,0 @@\n-    CHECK_NULL(AwtWindow::securityWarningWidthID =\n-        env->GetFieldID(cls, \"securityWarningWidth\", \"I\"));\n-    CHECK_NULL(AwtWindow::securityWarningHeightID =\n-        env->GetFieldID(cls, \"securityWarningHeight\", \"I\"));\n-    CHECK_NULL(AwtWindow::getWarningStringMID =\n-        env->GetMethodID(cls, \"getWarningString\", \"()Ljava\/lang\/String;\"));\n@@ -3371,2 +2768,0 @@\n-    CHECK_NULL(AwtWindow::calculateSecurityWarningPositionMID =\n-        env->GetMethodID(cls, \"calculateSecurityWarningPosition\", \"(DDDD)Ljava\/awt\/geom\/Point2D;\"));\n@@ -4019,22 +3414,0 @@\n-\/*\n- * Class:     sun_awt_windows_WWindowPeer\n- * Method:    repositionSecurityWarning\n- * Signature: ()V\n- *\/\n-JNIEXPORT void JNICALL\n-Java_sun_awt_windows_WWindowPeer_repositionSecurityWarning(JNIEnv *env,\n-        jobject self)\n-{\n-    TRY;\n-\n-    RepositionSecurityWarningStruct *rsws =\n-        new RepositionSecurityWarningStruct;\n-    rsws->window = env->NewGlobalRef(self);\n-\n-    AwtToolkit::GetInstance().InvokeFunction(\n-            AwtWindow::_RepositionSecurityWarning, rsws);\n-    \/\/ global refs and mds are deleted in _RepositionSecurityWarning\n-\n-    CATCH_BAD_ALLOC;\n-}\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Window.cpp","additions":2,"deletions":629,"binary":false,"changes":631,"status":"modified"},{"patch":"@@ -53,1 +53,0 @@\n-    static jfieldID warningStringID;\n@@ -57,2 +56,0 @@\n-    static jfieldID securityWarningWidthID;\n-    static jfieldID securityWarningHeightID;\n@@ -65,2 +62,0 @@\n-    static jmethodID getWarningStringMID;\n-    static jmethodID calculateSecurityWarningPositionMID;\n@@ -243,1 +238,0 @@\n-    static void _RepositionSecurityWarning(void* param);\n@@ -307,9 +301,0 @@\n-    static UINT untrustedWindowsCounter;\n-\n-    WCHAR * warningString;\n-\n-    \/\/ The warning icon\n-    HWND warningWindow;\n-    \/\/ The tooltip that appears when hovering the icon\n-    HWND securityTooltipWindow;\n-\n@@ -319,33 +304,0 @@\n-    UINT warningWindowWidth;\n-    UINT warningWindowHeight;\n-    void InitSecurityWarningSize(JNIEnv *env);\n-    HICON GetSecurityWarningIcon();\n-\n-    void CreateWarningWindow(JNIEnv *env);\n-    void DestroyWarningWindow();\n-    static LPCTSTR GetWarningWindowClassName();\n-    void FillWarningWindowClassInfo(WNDCLASS *lpwc);\n-    void RegisterWarningWindowClass();\n-    void UnregisterWarningWindowClass();\n-    static LRESULT CALLBACK WarningWindowProc(\n-            HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);\n-\n-    static void PaintWarningWindow(HWND warningWindow);\n-    static void PaintWarningWindow(HWND warningWindow, HDC hdc);\n-    void RepaintWarningWindow();\n-    void CalculateWarningWindowBounds(JNIEnv *env, LPRECT rect);\n-\n-    void AnimateSecurityWarning(bool enable);\n-    UINT securityWarningAnimationStage;\n-\n-    enum AnimationKind {\n-        akNone, akShow, akPreHide, akHide\n-    };\n-\n-    AnimationKind securityAnimationKind;\n-\n-    void StartSecurityAnimation(AnimationKind kind);\n-    void StopSecurityAnimation();\n-\n-    void RepositionSecurityWarning(JNIEnv *env);\n-\n@@ -358,1 +310,0 @@\n-        UpdateSecurityWarningVisibility();\n@@ -366,2 +317,0 @@\n-    void UpdateSecurityWarningVisibility();\n-    static bool IsWarningWindow(HWND hWnd);\n@@ -377,4 +326,0 @@\n-    inline BOOL IsUntrusted() {\n-        return warningString != NULL;\n-    }\n-\n","filename":"src\/java.desktop\/windows\/native\/libawt\/windows\/awt_Window.h","additions":0,"deletions":55,"binary":false,"changes":55,"status":"modified"}]}