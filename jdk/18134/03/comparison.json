{"files":[{"patch":"@@ -177,0 +177,1 @@\n+  _cur_distribute_log_buffers_time_ms = 0.0;\n@@ -462,0 +463,1 @@\n+  debug_time(\"Distribute Log Buffers\", _cur_distribute_log_buffers_time_ms);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -184,0 +184,2 @@\n+  double _cur_distribute_log_buffers_time_ms;\n+\n@@ -307,0 +309,4 @@\n+  void record_distribute_log_buffers_time_ms(double ms) {\n+    _cur_distribute_log_buffers_time_ms += ms;\n+  }\n+\n@@ -379,0 +385,4 @@\n+  double cur_distribute_log_buffers_time_ms() {\n+    return _cur_distribute_log_buffers_time_ms;\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -777,0 +777,4 @@\n+\n+  double merge_logged_cards_time = average_time_ms(G1GCPhaseTimes::MergeLB) +\n+                                   phase_times()->cur_distribute_log_buffers_time_ms();\n+\n@@ -786,1 +790,1 @@\n-    return all_cards_processing_time + average_time_ms(G1GCPhaseTimes::MergeLB);\n+    return all_cards_processing_time + merge_logged_cards_time;\n@@ -788,1 +792,1 @@\n-  return (all_cards_processing_time * logged_dirty_cards \/ scan_heap_roots_cards) + average_time_ms(G1GCPhaseTimes::MergeLB);\n+  return (all_cards_processing_time * logged_dirty_cards \/ scan_heap_roots_cards) + merge_logged_cards_time;\n@@ -877,0 +881,1 @@\n+                                    p->cur_distribute_log_buffers_time_ms() +\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1261,1 +1261,1 @@\n-  HeapRegionClaimer _hr_claimer;\n+  uint _num_workers;\n@@ -1263,1 +1263,1 @@\n-  BufferNode::Stack _dirty_card_buffers;\n+  BufferNode::Stack* _dirty_card_buffers;\n@@ -1270,3 +1270,6 @@\n-    while (BufferNode* node = _dirty_card_buffers.pop()) {\n-      cl->apply_to_buffer(node, worker_id);\n-      dcqs.deallocate_buffer(node);\n+    for (uint i = 0; i < _num_workers; i++) {\n+      uint index = (worker_id + i) % _num_workers;\n+      while (BufferNode* node = _dirty_card_buffers[index].pop()) {\n+        cl->apply_to_buffer(node, worker_id);\n+        dcqs.deallocate_buffer(node);\n+      }\n@@ -1279,1 +1282,1 @@\n-    _hr_claimer(num_workers),\n+    _num_workers(num_workers),\n@@ -1281,1 +1284,1 @@\n-    _dirty_card_buffers(),\n+    _dirty_card_buffers(nullptr),\n@@ -1286,0 +1289,7 @@\n+      Ticks start = Ticks::now();\n+\n+      _dirty_card_buffers = NEW_C_HEAP_ARRAY(BufferNode::Stack, num_workers, mtGC);\n+      for (uint i = 0; i < num_workers; i++) {\n+        new (&_dirty_card_buffers[i]) BufferNode::Stack();\n+      }\n+\n@@ -1288,2 +1298,24 @@\n-      if (buffers._entry_count != 0) {\n-        _dirty_card_buffers.prepend(*buffers._head, *buffers._tail);\n+\n+      size_t num_buffers = (buffers._entry_count \/ G1UpdateBufferSize);\n+      size_t buffers_per_thread = MAX2(num_buffers \/ num_workers, (size_t)1);\n+\n+      BufferNode* head = buffers._head;\n+      BufferNode* tail = head;\n+\n+      uint worker = 0;\n+      while (tail != nullptr) {\n+        size_t count = 0;\n+        BufferNode* cur = tail->next();\n+\n+        while (count < buffers_per_thread && cur != nullptr) {\n+          tail = cur;\n+          cur = tail->next();\n+          count++;\n+        }\n+\n+        tail->set_next(nullptr);\n+        _dirty_card_buffers[worker++ % num_workers].prepend(*head, *tail);\n+\n+        assert(cur != nullptr || tail == buffers._tail, \"Must be\");\n+        head = cur;\n+        tail = cur;\n@@ -1291,0 +1323,3 @@\n+\n+      Tickspan total = Ticks::now() - start;\n+      G1CollectedHeap::heap()->phase_times()->record_distribute_log_buffers_time_ms(total.seconds() * 1000.0);\n@@ -1294,0 +1329,9 @@\n+  ~G1MergeHeapRootsTask() {\n+    if (_dirty_card_buffers != nullptr) {\n+      using Stack = BufferNode::Stack;\n+      for (uint i = 0; i < _num_workers; i++) {\n+        _dirty_card_buffers[i].~Stack();\n+      }\n+      FREE_C_HEAP_ARRAY(Stack, _dirty_card_buffers);\n+    }\n+  }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":53,"deletions":9,"binary":false,"changes":62,"status":"modified"}]}