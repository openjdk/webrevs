{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -72,0 +74,2 @@\n+                \/\/ weed off stray datagrams\n+                if (ip.getPort() != dst.getPort()) continue;\n@@ -114,3 +118,26 @@\n-            DatagramChannel dc = DatagramChannel.open();\n-            ds = dc.socket();\n-            ds.bind(new InetSocketAddress(0));\n+            int attempts = 0;\n+            DatagramChannel toclose = null;\n+            while (true) {\n+                DatagramChannel dc = DatagramChannel.open();\n+                ds = dc.socket();\n+                if (Platform.isOSX() && dst.getAddress().isLoopbackAddress()) {\n+                    \/\/ avoid binding to the wildcard on macOS if possible, in order to limit\n+                    \/\/ potential port conflict issues\n+                    ds.bind(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0));\n+                } else {\n+                    ds.bind(new InetSocketAddress(0));\n+                }\n+                \/\/ on some systems it may be possible to bind two sockets\n+                \/\/ to the same port if one of them is bound to the wildcard,\n+                \/\/ if that happens, try again...\n+                if (ds.getLocalPort() == dst.getPort()) {\n+                    if (toclose != null) toclose.close();\n+                    toclose = dc;\n+                    if (++attempts == 10) {\n+                        throw new AssertionError(\"Couldn't allocate port for client socket\");\n+                    }\n+                    continue;\n+                }\n+                if (toclose != null) toclose.close();\n+                break;\n+            }\n@@ -119,1 +146,2 @@\n-        out.println(\"socket: \" + ds);\n+        out.println(\"socket: \" + ds + \" bound to src: \"\n+                + ds.getLocalSocketAddress() + \", dst: \" + dst);\n@@ -144,1 +172,1 @@\n-                = TestServers.UdpEchoServer.startNewServer(100)) {\n+                = TestServers.UdpEchoServer.startNewServer(100, InetAddress.getLoopbackAddress())) {\n","filename":"test\/jdk\/java\/nio\/channels\/DatagramChannel\/AdaptorBasic.java","additions":34,"deletions":6,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -500,0 +500,1 @@\n+        protected final InetAddress bindAddress; \/\/local address to bind to; can be null.\n@@ -512,0 +513,12 @@\n+            this(linger, null);\n+        }\n+\n+        \/**\n+         * Creates a new abstract UDP server.\n+         *\n+         * @param linger the amount of time the server should wait before\n+         *          responding to requests.\n+         * @param bindAddress the address to bind to. If {@code null}, will\n+         *                    bind to InetAddress.getLocalHost();\n+         *\/\n+        protected AbstractUdpServer(long linger, InetAddress bindAddress) {\n@@ -513,0 +526,1 @@\n+            this.bindAddress = bindAddress;\n@@ -577,0 +591,1 @@\n+            InetAddress lh = bindAddress == null ? InetAddress.getLocalHost() : bindAddress;\n@@ -578,1 +593,1 @@\n-                    newDatagramSocket(0, InetAddress.getLocalHost());\n+                    newDatagramSocket(0, lh);\n@@ -762,1 +777,5 @@\n-            super(linger);\n+            this(linger, null);\n+        }\n+\n+        public UdpEchoServer(long linger, InetAddress bindAddress) {\n+            super(linger, bindAddress);\n@@ -798,1 +817,5 @@\n-            final UdpEchoServer echoServer = new UdpEchoServer(linger);\n+            return startNewServer(0, InetAddress.getLocalHost());\n+        }\n+\n+        public static UdpEchoServer startNewServer(long linger, InetAddress bindAddress) throws IOException {\n+            final UdpEchoServer echoServer = new UdpEchoServer(linger, bindAddress);\n","filename":"test\/jdk\/java\/nio\/channels\/TestServers.java","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"}]}