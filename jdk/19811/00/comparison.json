{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.util.concurrent.atomic.AtomicInteger;\n@@ -146,17 +147,27 @@\n-        CyclicBarrier barrier = new CyclicBarrier(THREAD_COUNT + 1);\n-\n-        try (Recording r = new Recording()) {\n-            r.start();\n-            List<Emitter> emitters = new ArrayList<>();\n-            for (int i = 0; i < THREAD_COUNT; i++) {\n-                Emitter e = new Emitter(barrier);\n-                e.start();\n-                emitters.add(e);\n-            }\n-            \/\/ Thread buffers should now have one event each\n-            barrier.await();\n-            \/\/ Add another event to each thread buffer, so\n-            \/\/ events are bound to come out of order when they\n-            \/\/ are flushed\n-            for (Emitter e : emitters) {\n-                e.join();\n+        while (true) {\n+            CyclicBarrier barrier = new CyclicBarrier(THREAD_COUNT + 1);\n+            try (Recording r = new Recording()) {\n+                r.start();\n+                List<Emitter> emitters = new ArrayList<>();\n+                for (int i = 0; i < THREAD_COUNT; i++) {\n+                    Emitter e = new Emitter(barrier);\n+                    e.start();\n+                    emitters.add(e);\n+                }\n+                \/\/ Thread buffers should now have one event each\n+                barrier.await();\n+                \/\/ Add another event to each thread buffer, so\n+                \/\/ events are bound to come out of order when they\n+                \/\/ are flushed\n+                for (Emitter e : emitters) {\n+                    e.join();\n+                }\n+                r.stop();\n+                Path p = Utils.createTempFile(\"recording\", \".jfr\");\n+                r.dump(p);\n+                \/\/ Order is only guaranteed within a segment.\n+                int segments = countSegments(p);\n+                if (segments < 2) {\n+                    return p;\n+                }\n+                System.out.println(\"File contains more than one segment (\" + segments + \"). Retrying.\");\n@@ -164,4 +175,9 @@\n-            r.stop();\n-            Path p = Utils.createTempFile(\"recording\", \".jfr\");\n-            r.dump(p);\n-            return p;\n+        }\n+    }\n+\n+    private static int countSegments(Path file) throws Exception {\n+        AtomicInteger segments = new AtomicInteger();\n+        try (EventStream es = EventStream.openFile(file)) {\n+            es.onFlush(segments::incrementAndGet);\n+            es.start();\n+            return segments.get();\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/filestream\/TestOrdered.java","additions":37,"deletions":21,"binary":false,"changes":58,"status":"modified"}]}