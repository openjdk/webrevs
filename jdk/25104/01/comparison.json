{"files":[{"patch":"@@ -755,2 +755,13 @@\n-bool SystemDictionaryShared::add_verification_constraint(InstanceKlass* k, Symbol* name,\n-         Symbol* from_name, bool from_field_is_protected, bool from_is_array, bool from_is_object) {\n+\/\/ Called from VerificationType::is_reference_assignable_from() before performing the assignability check of\n+\/\/     T1 must be assignable from T2\n+\/\/ Where:\n+\/\/     L is the class loader of <k>\n+\/\/     T1 is the type resolved by L using the name <name>\n+\/\/     T2 is the type resolved by L using the name <from_name>\n+\/\/\n+\/\/ The meaning of (*skip_assignability_check):\n+\/\/     true:  is_reference_assignable_from() should SKIP the assignability check\n+\/\/     false: is_reference_assignable_from() should COMPLETE the assignability check\n+void SystemDictionaryShared::add_verification_constraint(InstanceKlass* k, Symbol* name,\n+         Symbol* from_name, bool from_field_is_protected, bool from_is_array, bool from_is_object,\n+         bool* skip_assignability_check) {\n@@ -762,5 +773,15 @@\n-  if (CDSConfig::is_dumping_dynamic_archive()) {\n-    \/\/ For dynamic dumping, we can resolve all the constraint classes for all class loaders during\n-    \/\/ the initial run prior to creating the archive before vm exit. We will also perform verification\n-    \/\/ check when running with the archive.\n-    return false;\n+  if (CDSConfig::is_dumping_classic_static_archive() && !is_builtin(k)) {\n+    \/\/ This applies ONLY to the \"classic\" CDS static dump, which reads the list of\n+    \/\/ unregistered classes (those intended for custom class loaders) from the classlist\n+    \/\/ and loads them using jdk.internal.misc.CDS$UnregisteredClassLoader.\n+    \/\/\n+    \/\/ When the classlist contains an unregistered class k, the supertypes of k are also\n+    \/\/ recorded in the classlist. However, the classlist does not contain information about\n+    \/\/ any class X that's not a supertype of k but is needed in the verification of k.\n+    \/\/ As a result, CDS$UnregisteredClassLoader will not know how to resolve X.\n+    \/\/\n+    \/\/ Therefore, we tell the verifier to refrain from resolving X. Instead, X is recorded\n+    \/\/ (symbolically) in the verification constraints of k. In the production run,\n+    \/\/ when k is loaded, we will go through its verification constraints and resolve X to complete\n+    \/\/ the is_reference_assignable_from() checks.\n+    *skip_assignability_check = true;\n@@ -768,10 +789,3 @@\n-    if (is_builtin(k)) {\n-      \/\/ For builtin class loaders, we can try to complete the verification check at dump time,\n-      \/\/ because we can resolve all the constraint classes. We will also perform verification check\n-      \/\/ when running with the archive.\n-      return false;\n-    } else {\n-      \/\/ For non-builtin class loaders, we cannot complete the verification check at dump time,\n-      \/\/ because at dump time we don't know how to resolve classes for such loaders.\n-      return true;\n-    }\n+    \/\/ In all other cases, we are using an *actual* class loader to load k, so it should be able\n+    \/\/ to resolve any types that are needed for the verification of k.\n+    *skip_assignability_check = false;\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.cpp","additions":31,"deletions":17,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-  static bool add_verification_constraint(InstanceKlass* k, Symbol* name,\n+  static void add_verification_constraint(InstanceKlass* k, Symbol* name,\n@@ -238,1 +238,2 @@\n-                  bool from_is_array, bool from_is_object) NOT_CDS_RETURN_(false);\n+                  bool from_is_array, bool from_is_object,\n+                  bool* skip_assignability_check);\n","filename":"src\/hotspot\/share\/classfile\/systemDictionaryShared.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -109,0 +109,1 @@\n+#if INCLUDE_CDS\n@@ -110,1 +111,2 @@\n-      if (SystemDictionaryShared::add_verification_constraint(klass,\n+      bool skip_assignability_check = false;\n+      SystemDictionaryShared::add_verification_constraint(klass,\n@@ -112,3 +114,4 @@\n-              from.is_object())) {\n-        \/\/ If add_verification_constraint() returns true, the resolution\/check should be\n-        \/\/ delayed until runtime.\n+              from.is_object(), &skip_assignability_check);\n+      if (skip_assignability_check) {\n+        \/\/ We are not able to resolve name() or from.name(). The actual assignability check\n+        \/\/ will be delayed until runtime.\n@@ -118,1 +121,1 @@\n-\n+#endif\n","filename":"src\/hotspot\/share\/classfile\/verificationType.cpp","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,1 +32,2 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\n+ * @build ReturnIntegerAsString\n@@ -35,1 +36,1 @@\n- * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar AppWithCustomLoaders$MyLoadeeA AppWithCustomLoaders$MyLoadeeB\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller -jar cust.jar AppWithCustomLoaders$MyLoadeeA AppWithCustomLoaders$MyLoadeeB ReturnIntegerAsString\n@@ -53,1 +54,2 @@\n-                       .shouldMatch(\"cds,class.*array \\\\[LAppWithCustomLoaders[$]MyLoadeeA;\");\n+                       .shouldMatch(\"cds,class.*array \\\\[LAppWithCustomLoaders[$]MyLoadeeA;\")\n+                       .shouldNotMatch(\"cds,class.* ReturnIntegerAsString\");\n@@ -72,0 +74,10 @@\n+        \/\/ Test 2: VerificationType::is_reference_assignable_from() cannot be skipped (JDK-8356407)\n+        try {\n+            Class bad = loader.loadClass(\"ReturnIntegerAsString\");\n+            Object o = bad.newInstance(); \/\/ force verification\n+            System.out.println(\"Expected String but got: \" + o.toString().getClass());\n+            throw new RuntimeException(\"VerifyError expected but not thrown\");\n+        } catch (VerifyError ve) {\n+            System.out.println(\"Expected: \" + ve);\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/aotCache\/AOTCacheSupportForCustomLoaders.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\n+\/*\n+\n+class ReturnIntegerAsString {\n+    String doit() {\n+        return new Integer(1);\n+    }\n+}\n+\n+*\/\n+\n+public super class ReturnIntegerAsString\n+    version 60:0\n+{\n+  public Method \"<init>\":\"()V\"\n+    stack 1 locals 1\n+  {\n+        aload_0;\n+        invokespecial    Method java\/lang\/Object.\"<init>\":\"()V\";\n+        return;\n+  }\n+  public Method toString:\"()Ljava\/lang\/String;\"\n+    stack 3 locals 2\n+  {\n+        new              class java\/lang\/Integer;\n+        dup;\n+        iconst_1;\n+        invokespecial    Method java\/lang\/Integer.\"<init>\":\"(I)V\";\n+        areturn;\n+  }\n+\n+} \/\/ end Class ReturnIntegerAsString\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/test-classes\/ReturnIntegerAsString.jasm","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}