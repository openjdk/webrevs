{"files":[{"patch":"@@ -1813,0 +1813,6 @@\n+        if (event.getSource() instanceof JToggleButton tb) {\n+            commandO = action.getValue(Action.SELECTED_KEY);\n+            if (commandO != null) {\n+                tb.setSelected(!tb.isSelected());\n+            }\n+        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingUtilities.java","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,133 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @key headful\n+ * @bug 6817009\n+ * @summary Verifies that Action.SELECTED_KEY is not toggled when key binding is used\n+   @run main TestSelectedKey\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.KeyEvent;\n+import java.beans.PropertyChangeEvent;\n+import java.beans.PropertyChangeListener;\n+import java.awt.Robot;\n+\n+import javax.swing.SwingUtilities;\n+import javax.swing.JLabel;\n+import javax.swing.AbstractAction;\n+import javax.swing.Action;\n+import javax.swing.Box;\n+import javax.swing.BoxLayout;\n+import javax.swing.KeyStroke;\n+import javax.swing.JToolBar;\n+import javax.swing.JToggleButton;\n+import javax.swing.JPopupMenu;\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JFrame;\n+import javax.swing.InputMap;\n+import javax.swing.JComponent;\n+import javax.swing.ActionMap;\n+\n+public class TestSelectedKey {\n+    private static Robot robot;\n+    private static JFrame frame;\n+    private static boolean toggled = false;\n+\n+    public static void main(String[] args) throws Exception {\n+        robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> createGUI());\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.keyPress(KeyEvent.VK_Z);\n+            robot.keyRelease(KeyEvent.VK_Z);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            if (!toggled) {\n+                throw new RuntimeException(\"JToggleButton not toggled via accelerator key\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createGUI() {\n+        final JLabel label = new JLabel(\"Toggle me actions 0\");\n+        final JLabel selected = new JLabel(\"Toggle me selected: false\");\n+        AbstractAction action = new AbstractAction(\"Toggle me\") {\n+            private int count = 0;\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                label.setText(\"Toggle me actions \" + (++count));\n+            }\n+        };\n+        action.addPropertyChangeListener(new PropertyChangeListener() {\n+            public void propertyChange(PropertyChangeEvent evt) {\n+                if (Action.SELECTED_KEY.equals(evt.getPropertyName())) {\n+                    selected.setText(\"Toggle me selected: \" + evt.getNewValue());\n+                    toggled = (boolean)evt.getNewValue();\n+                }\n+            }\n+        });\n+        action.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke(KeyEvent.VK_Z, KeyEvent.CTRL_DOWN_MASK));\n+        \/\/ need to set manually or won't be updated by Swing\n+        action.putValue(Action.SELECTED_KEY, Boolean.FALSE);\n+\n+        Box labels = new Box(BoxLayout.PAGE_AXIS);\n+        labels.add(label);\n+        labels.add(selected);\n+\n+        JToolBar toolBar = new JToolBar();\n+        toolBar.add(new JToggleButton(action));\n+\n+        JPopupMenu popupMenu = new JPopupMenu();\n+        popupMenu.add(new JCheckBoxMenuItem(action));\n+        labels.setComponentPopupMenu(popupMenu);\n+\n+        frame = new JFrame(\"Test Action.SELECTED_KEY\");\n+        frame.getContentPane().add(toolBar, BorderLayout.PAGE_START);\n+        frame.getContentPane().add(labels, BorderLayout.CENTER);\n+\n+        InputMap inputMap = frame.getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);\n+        ActionMap actionMap = frame.getRootPane().getActionMap();\n+        inputMap.put((KeyStroke) action.getValue(Action.ACCELERATOR_KEY), \"toggleAction\");\n+        actionMap.put(\"toggleAction\", action);\n+\n+        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);\n+        frame.setPreferredSize(new Dimension(400, 200));\n+        frame.pack();\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JToggleButton\/TestSelectedKey.java","additions":133,"deletions":0,"binary":false,"changes":133,"status":"added"}]}