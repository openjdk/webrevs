{"files":[{"patch":"@@ -666,1 +666,1 @@\n-     * Returns true if this class satisfies two conditions:\n+     * Returns true if this class satisfies the following conditions:\n@@ -668,3 +668,4 @@\n-     * <li>the reference to {@code byte[]} is not kept within the class<\/li>\n-     * <li>the argument of {@link OutputStream#write(byte[])}} and {@link OutputStream#write(byte[], int, int)}} is not modified within the methods<\/li>\n-     * <li>the {@code byte[]} is not read outside of the given bounds<\/li>\n+     * <li>does not retain a reference to the {@code byte[]}<\/li>\n+     * <li>does not leak a reference to the {@code byte[]} to non-trusted classes<\/li>\n+     * <li>does not modify the contents of the {@code byte[]}<\/li>\n+     * <li>{@code OutputStream.write(byte[], int, int)} write does not read the contents outside of the offset\/length bounds<\/li>\n@@ -674,2 +675,0 @@\n-     * @see java.io.ByteArrayInputStream#transferTo(OutputStream)\n-     * @see java.io.BufferedInputStream#implTransferTo(OutputStream)\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedInputStream.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,2 +28,0 @@\n-import java.util.zip.CRC32;\n-import java.util.zip.CheckedOutputStream;\n@@ -111,9 +109,0 @@\n-\n-    private static void checkedOutputStream(BufferedInputStream bis, byte[] buf) throws IOException {\n-        var cos = new CheckedOutputStream(new ByteArrayOutputStream(LENGTH), new CRC32());\n-        bis.transferTo(cos);\n-        bis.reset();\n-        if (!Arrays.equals(buf, bis.readAllBytes())) {\n-            throw new RuntimeException(\"Internal buffer has been modified\");\n-        }\n-    }\n","filename":"test\/jdk\/java\/io\/BufferedInputStream\/TransferToTrusted.java","additions":0,"deletions":11,"binary":false,"changes":11,"status":"modified"}]}