{"files":[{"patch":"@@ -0,0 +1,80 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8320971\n+ * @summary Verify BufferedInputStream.buf is used directly by\n+ *          BufferedInputStream.implTransferTo() only when its OutputStream\n+ *          parameter is trusted\n+ * @key randomness\n+ *\/\n+\n+import java.io.*;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Random;\n+public class TransferToTrusted {\n+    private static final Random RND = new Random(System.nanoTime());\n+\n+    private static class UntrustedOutputStream extends OutputStream {\n+        UntrustedOutputStream() {\n+            super();\n+        }\n+\n+        @Override\n+        public void write(byte[] b, int off, int len) {\n+            Objects.checkFromIndexSize(off, len, b.length);\n+            byte[] tmp = new byte[len];\n+            RND.nextBytes(tmp);\n+            System.arraycopy(tmp, 0, b, off, len);\n+        }\n+\n+        @Override\n+        public void write(int b) throws IOException {\n+            write(new byte[] {(byte)b});\n+        }\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        byte[] buf = new byte[128];\n+        RND.nextBytes(buf);\n+        byte[] dup = Arrays.copyOf(buf, buf.length);\n+\n+        var bis = new BufferedInputStream(new ByteArrayInputStream(dup));\n+        bis.mark(dup.length);\n+\n+        var baos = new ByteArrayOutputStream();\n+        bis.transferTo(baos);\n+        bis.reset();\n+        if (!Arrays.equals(buf, bis.readAllBytes()))\n+            throw new RuntimeException(\"Internal buffer has been modified\");\n+\n+        bis.reset();\n+        var out = new UntrustedOutputStream();\n+        bis.transferTo(out);\n+        bis.reset();\n+        if (!Arrays.equals(buf, bis.readAllBytes()))\n+            throw new RuntimeException(\"Internal buffer has been modified\");\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/io\/BufferedInputStream\/TransferToTrusted.java","additions":80,"deletions":0,"binary":false,"changes":80,"status":"added"}]}