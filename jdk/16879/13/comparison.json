{"files":[{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation. Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.io;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.FileOutputStream;\n+import java.io.OutputStream;\n+import java.io.PipedOutputStream;\n+import java.util.zip.CheckedOutputStream;\n+\n+\/**\n+ * Utility class for IO streams\n+ *\/\n+public final class IOStreams {\n+\n+    \/**\n+     * Returns true if this class satisfies two conditions:\n+     * <ul>\n+     * <li>the reference to {@code byte[]} is not kept within the class<\/li>\n+     * <li>the argument of {@link OutputStream#write(byte[])}} and {@link OutputStream#write(byte[], int, int)}} is not modified within the methods<\/li>\n+     * <li>the {@code byte[]} is not read outside of the given bounds<\/li>\n+     * <\/ul>\n+     *\n+     * @return true if this class is trusted\n+     * @see java.io.ByteArrayInputStream#transferTo(OutputStream)\n+     * @see java.io.BufferedInputStream#implTransferTo(OutputStream)\n+     *\/\n+    public static boolean isTrusted(OutputStream os) {\n+        var clazz = os.getClass();\n+        return clazz == ByteArrayOutputStream.class\n+                || clazz == FileOutputStream.class\n+                || clazz == PipedOutputStream.class\n+                || clazz == CheckedOutputStream.class;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/io\/IOStreams.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.io.IOStreams;\n@@ -646,3 +647,7 @@\n-                \/\/ Prevent poisoning and leaking of buf\n-                byte[] buffer = Arrays.copyOfRange(getBufIfOpen(), pos, count);\n-                out.write(buffer);\n+                if (IOStreams.isTrusted(out)) {\n+                    out.write(getBufIfOpen(), pos, count);\n+                } else {\n+                    \/\/ Prevent poisoning and leaking of buf\n+                    byte[] buffer = Arrays.copyOfRange(getBufIfOpen(), pos, count);\n+                    out.write(buffer);\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedInputStream.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import com.sun.io.IOStreams;\n@@ -212,4 +213,1 @@\n-            Class<?> outClass = out.getClass();\n-            if (outClass == ByteArrayOutputStream.class ||\n-                outClass == FileOutputStream.class ||\n-                outClass == PipedOutputStream.class)\n+            if (IOStreams.isTrusted(out))\n","filename":"src\/java.base\/share\/classes\/java\/io\/ByteArrayInputStream.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,120 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.*;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.Random;\n+import java.util.zip.CRC32;\n+import java.util.zip.CheckedOutputStream;\n+\n+\/*\n+ * @test\n+ * @bug 8320971\n+ * @summary Verify BufferedInputStream.buf is used directly by\n+ *          BufferedInputStream.implTransferTo() only when its OutputStream\n+ *          parameter is trusted\n+ * @key randomness\n+ *\/\n+public class TransferToTrusted {\n+\n+    private static final int LENGTH = 128;\n+    private static final Random RND = new Random(System.nanoTime());\n+\n+    private static final class UntrustedOutputStream extends OutputStream {\n+\n+        UntrustedOutputStream() {\n+            super();\n+        }\n+\n+        @Override\n+        public void write(byte[] b, int off, int len) {\n+            Objects.checkFromIndexSize(off, len, b.length);\n+            byte[] tmp = new byte[len];\n+            RND.nextBytes(tmp);\n+            System.arraycopy(tmp, 0, b, off, len);\n+        }\n+\n+        @Override\n+        public void write(int b) throws IOException {\n+            write(new byte[]{(byte) b});\n+        }\n+    }\n+\n+    public static void main(String[] args) throws IOException {\n+        byte[] buf = new byte[LENGTH];\n+        RND.nextBytes(buf);\n+        byte[] dup = Arrays.copyOf(buf, buf.length);\n+\n+        var bis = new BufferedInputStream(new ByteArrayInputStream(dup));\n+        bis.mark(dup.length);\n+\n+        byteArrayOutputStream(bis, buf);\n+        fileOutputStream(bis, buf);\n+        pipedOutputStream(bis, buf);\n+\n+        bis.reset();\n+        var out = new UntrustedOutputStream();\n+        bis.transferTo(out);\n+        bis.reset();\n+        if (!Arrays.equals(buf, bis.readAllBytes())) {\n+            throw new RuntimeException(\"Internal buffer has been modified\");\n+        }\n+    }\n+\n+    private static void byteArrayOutputStream(BufferedInputStream bis, byte[] buf) throws IOException {\n+        var baos = new ByteArrayOutputStream();\n+        bis.transferTo(baos);\n+        bis.reset();\n+        if (!Arrays.equals(buf, bis.readAllBytes())) {\n+            throw new RuntimeException(\"Internal buffer has been modified\");\n+        }\n+    }\n+\n+    private static void fileOutputStream(BufferedInputStream bis, byte[] buf) throws IOException {\n+        var fos = new FileOutputStream(File.createTempFile(TransferToTrusted.class.getName(), null));\n+        bis.transferTo(fos);\n+        bis.reset();\n+        if (!Arrays.equals(buf, bis.readAllBytes())) {\n+            throw new RuntimeException(\"Internal buffer has been modified\");\n+        }\n+    }\n+\n+    private static void pipedOutputStream(BufferedInputStream bis, byte[] buf) throws IOException {\n+        var pos = new PipedOutputStream(new PipedInputStream(LENGTH));\n+        bis.transferTo(pos);\n+        bis.reset();\n+        if (!Arrays.equals(buf, bis.readAllBytes())) {\n+            throw new RuntimeException(\"Internal buffer has been modified\");\n+        }\n+    }\n+\n+    private static void checkedOutputStream(BufferedInputStream bis, byte[] buf) throws IOException {\n+        var cos = new CheckedOutputStream(new ByteArrayOutputStream(LENGTH), new CRC32());\n+        bis.transferTo(cos);\n+        bis.reset();\n+        if (!Arrays.equals(buf, bis.readAllBytes())) {\n+            throw new RuntimeException(\"Internal buffer has been modified\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/BufferedInputStream\/TransferToTrusted.java","additions":120,"deletions":0,"binary":false,"changes":120,"status":"added"}]}