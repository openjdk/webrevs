{"files":[{"patch":"@@ -1,58 +0,0 @@\n-\/*\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation. Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.io;\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.FileOutputStream;\n-import java.io.OutputStream;\n-import java.io.PipedOutputStream;\n-import java.util.zip.CheckedOutputStream;\n-\n-\/**\n- * Utility class for IO streams\n- *\/\n-public final class IOStreams {\n-\n-    \/**\n-     * Returns true if this class satisfies two conditions:\n-     * <ul>\n-     * <li>the reference to {@code byte[]} is not kept within the class<\/li>\n-     * <li>the argument of {@link OutputStream#write(byte[])}} and {@link OutputStream#write(byte[], int, int)}} is not modified within the methods<\/li>\n-     * <li>the {@code byte[]} is not read outside of the given bounds<\/li>\n-     * <\/ul>\n-     *\n-     * @return true if this class is trusted\n-     * @see java.io.ByteArrayInputStream#transferTo(OutputStream)\n-     * @see java.io.BufferedInputStream#implTransferTo(OutputStream)\n-     *\/\n-    public static boolean isTrusted(OutputStream os) {\n-        var clazz = os.getClass();\n-        return clazz == ByteArrayOutputStream.class\n-                || clazz == FileOutputStream.class\n-                || clazz == PipedOutputStream.class\n-                || clazz == CheckedOutputStream.class;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/com\/sun\/io\/IOStreams.java","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.io.IOStreams;\n@@ -647,1 +646,1 @@\n-                if (IOStreams.isTrusted(out)) {\n+                if (isTrusted(out)) {\n@@ -666,0 +665,19 @@\n+    \/**\n+     * Returns true if this class satisfies two conditions:\n+     * <ul>\n+     * <li>the reference to {@code byte[]} is not kept within the class<\/li>\n+     * <li>the argument of {@link OutputStream#write(byte[])}} and {@link OutputStream#write(byte[], int, int)}} is not modified within the methods<\/li>\n+     * <li>the {@code byte[]} is not read outside of the given bounds<\/li>\n+     * <\/ul>\n+     *\n+     * @return true if this class is trusted\n+     * @see java.io.ByteArrayInputStream#transferTo(OutputStream)\n+     * @see java.io.BufferedInputStream#implTransferTo(OutputStream)\n+     *\/\n+    private static boolean isTrusted(OutputStream os) {\n+        var clazz = os.getClass();\n+        return clazz == ByteArrayOutputStream.class\n+                || clazz == FileOutputStream.class\n+                || clazz == PipedOutputStream.class;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/io\/BufferedInputStream.java","additions":20,"deletions":2,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import com.sun.io.IOStreams;\n@@ -213,1 +212,4 @@\n-            if (IOStreams.isTrusted(out))\n+            Class<?> outClass = out.getClass();\n+            if (outClass == ByteArrayOutputStream.class ||\n+                outClass == FileOutputStream.class ||\n+                outClass == PipedOutputStream.class)\n","filename":"src\/java.base\/share\/classes\/java\/io\/ByteArrayInputStream.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}