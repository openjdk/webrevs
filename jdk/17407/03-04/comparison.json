{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n@@ -1644,35 +1644,0 @@\n-        new Command(\"testdebuginfodecode\", \"testdebuginfodecode\", false) {\n-            \/**\n-             * Exercise the decoding of the debug info in nmethods.\n-             *\/\n-            public void doit(Tokens t) {\n-                if (t.countTokens() != 0) {\n-                    usage();\n-                } else {\n-                    CodeCacheVisitor v = new CodeCacheVisitor() {\n-                        Throwable throwable;\n-                        public void prologue(Address start, Address end) {\n-                        }\n-                        public void visit(CodeBlob blob) {\n-                            if (throwable != null) {\n-                                \/\/ Only report the first failure.\n-                                return;\n-                            }\n-                            if (blob instanceof NMethod) {\n-                                NMethod nm = (NMethod) blob;\n-                                try {\n-                                    nm.decodeAllScopeDescs();\n-                                } catch (Throwable t) {\n-                                    out.println(\"Exception while decoding debug info for \" + blob);\n-                                    throwable = t;\n-                                    throw t;\n-                                }\n-                            }\n-                        }\n-                        public void epilogue() {\n-                        }\n-                    };\n-                    VM.getVM().getCodeCache().iterate(v);\n-                }\n-            }\n-        },\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":1,"deletions":36,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1,68 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import jdk.test.lib.apps.LingeredApp;\n-import jtreg.SkippedException;\n-\n-\/**\n- * @test\n- * @bug 8318682\n- * @summary Test clhsdb 'testdebuginfodecode' command\n- * @requires vm.hasSA\n- * @library \/test\/lib\n- * @run main\/othervm\/timeout=2400 -Xmx1g -Xcomp ClhsdbTestDebugInfodDecode\n- *\/\n-\n-public class ClhsdbTestDebugInfodDecode {\n-\n-    public static void main(String[] args) throws Exception {\n-        System.out.println(\"Starting ClhsdbTestDebugInfodDecode test\");\n-\n-        LingeredAppWithEnum theApp = null;\n-        try {\n-            ClhsdbLauncher test = new ClhsdbLauncher();\n-\n-            theApp = new LingeredAppWithEnum();\n-            LingeredApp.startApp(theApp);\n-            System.out.println(\"Started LingeredAppWithEnum with pid \" + theApp.getPid());\n-\n-            List<String> cmds = List.of(\"testdebuginfodecode\");\n-\n-            \/\/ sun.jvm.hotspot.utilities.AssertionFailure is caught by the harness so it's not\n-            \/\/ necessary to include extra filters here.\n-            Map<String, List<String>> expStrMap = new HashMap<>();\n-            Map<String, List<String>> unExpStrMap = new HashMap<>();\n-            test.run(theApp.getPid(), cmds, expStrMap, unExpStrMap);\n-        } catch (SkippedException se) {\n-            throw se;\n-        } catch (Exception ex) {\n-            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n-        } finally {\n-            LingeredApp.stopApp(theApp);\n-        }\n-        System.out.println(\"Test PASSED\");\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbTestDebugInfodDecode.java","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import sun.jvm.hotspot.HotSpotAgent;\n+import sun.jvm.hotspot.code.CodeCacheVisitor;\n+import sun.jvm.hotspot.code.CodeBlob;\n+import sun.jvm.hotspot.code.NMethod;\n+import sun.jvm.hotspot.debugger.Address;\n+import sun.jvm.hotspot.runtime.VM;\n+\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.SA.SATestUtils;\n+\n+\/**\n+ * @test\n+ * @bug 8318682\n+ * @summary Test decoding debug info for all nmethods in the code cache\n+ * @requires vm.hasSA\n+ * @library \/test\/lib\n+ * @modules jdk.hotspot.agent\/sun.jvm.hotspot\n+ *          jdk.hotspot.agent\/sun.jvm.hotspot.code\n+ *          jdk.hotspot.agent\/sun.jvm.hotspot.debugger\n+ *          jdk.hotspot.agent\/sun.jvm.hotspot.runtime\n+ * @run main\/othervm\/timeout=2400 -Xmx1g -Xcomp TestDebugInfoDecode\n+ *\/\n+\n+public class TestDebugInfoDecode {\n+\n+    private static LingeredApp theApp = null;\n+\n+    private static void checkDecode(String pid) throws Exception {\n+        HotSpotAgent agent = new HotSpotAgent();\n+\n+        try {\n+            agent.attach(Integer.parseInt(pid));\n+\n+            CodeCacheVisitor v = new CodeCacheVisitor() {\n+                    Throwable throwable;\n+                    public void prologue(Address start, Address end) {\n+                    }\n+                    public void visit(CodeBlob blob) {\n+                        if (throwable != null) {\n+                            \/\/ Only report the first failure.\n+                            return;\n+                        }\n+                        if (blob instanceof NMethod) {\n+                            NMethod nm = (NMethod) blob;\n+                            try {\n+                                nm.decodeAllScopeDescs();\n+                            } catch (Throwable t) {\n+                                System.err.println(\"Exception while decoding debug info for \" + blob);\n+                                throwable = t;\n+                                throw t;\n+                            }\n+                        }\n+                    }\n+                    public void epilogue() {\n+                    }\n+                };\n+            VM.getVM().getCodeCache().iterate(v);\n+        } finally {\n+            agent.detach();\n+        }\n+    }\n+\n+    private static void createAnotherToAttach(long lingeredAppPid) throws Exception {\n+        \/\/ Start a new process to attach to the lingered app\n+        ProcessBuilder processBuilder = ProcessTools.createLimitedTestJavaProcessBuilder(\n+            \"--add-modules=jdk.hotspot.agent\",\n+            \"--add-exports=jdk.hotspot.agent\/sun.jvm.hotspot=ALL-UNNAMED\",\n+            \"--add-exports=jdk.hotspot.agent\/sun.jvm.hotspot.code=ALL-UNNAMED\",\n+            \"--add-exports=jdk.hotspot.agent\/sun.jvm.hotspot.debugger=ALL-UNNAMED\",\n+            \"--add-exports=jdk.hotspot.agent\/sun.jvm.hotspot.runtime=ALL-UNNAMED\",\n+            \"TestDebugInfoDecode\",\n+            Long.toString(lingeredAppPid)\n+        );\n+        SATestUtils.addPrivilegesIfNeeded(processBuilder);\n+        OutputAnalyzer SAOutput = ProcessTools.executeProcess(processBuilder);\n+        SAOutput.shouldHaveExitValue(0);\n+        System.out.println(SAOutput.getOutput());\n+    }\n+\n+    public static void main (String... args) throws Exception {\n+        SATestUtils.skipIfCannotAttach(); \/\/ throws SkippedException if attach not expected to work.\n+        if (args == null || args.length == 0) {\n+            try {\n+                theApp = new LingeredApp();\n+                LingeredApp.startApp(theApp);\n+                createAnotherToAttach(theApp.getPid());\n+            } finally {\n+                LingeredApp.stopApp(theApp);\n+            }\n+        } else {\n+            checkDecode(args[0]);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestDebugInfoDecode.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"}]}