{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1644,0 +1644,35 @@\n+        new Command(\"testdebuginfodecode\", \"testdebuginfodecode\", false) {\n+            \/**\n+             * Exercise the decoding of the debug info in nmethods.\n+             *\/\n+            public void doit(Tokens t) {\n+                if (t.countTokens() != 0) {\n+                    usage();\n+                } else {\n+                    CodeCacheVisitor v = new CodeCacheVisitor() {\n+                        Throwable throwable;\n+                        public void prologue(Address start, Address end) {\n+                        }\n+                        public void visit(CodeBlob blob) {\n+                            if (throwable != null) {\n+                                \/\/ Only report the first failure.\n+                                return;\n+                            }\n+                            if (blob instanceof NMethod) {\n+                                NMethod nm = (NMethod)  blob;\n+                                try {\n+                                    nm.decodeAllScopeDescs();\n+                                } catch (Throwable t) {\n+                                    out.println(\"Exception while decoding debug info for \" + blob);\n+                                    throwable = t;\n+                                    throw t;\n+                                }\n+                            }\n+                        }\n+                        public void epilogue() {\n+                        }\n+                    };\n+                    VM.getVM().getCodeCache().iterate(v);\n+                }\n+            }\n+        },\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/CommandProcessor.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,0 +94,3 @@\n+         if (arch.equals(\"x86_64\")) {\n+            arch = \"amd64\";\n+         }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/asm\/Disassembler.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -77,0 +77,16 @@\n+  ScopeValue readObjectMergeValue() {\n+    int id = readInt();\n+    if (Assert.ASSERTS_ENABLED) {\n+      Assert.that(objectPool != null, \"object pool does not exist\");\n+      for (Iterator itr = objectPool.iterator(); itr.hasNext();) {\n+        ObjectValue ov = (ObjectValue) itr.next();\n+        Assert.that(ov.id() != id, \"should not be read twice\");\n+      }\n+    }\n+    ObjectValue result = new ObjectMergeValue(id);\n+    \/\/ Cache the object since an object field could reference it.\n+    objectPool.add(result);\n+    result.readObject(this);\n+    return result;\n+  }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/DebugInfoReadStream.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -0,0 +1,38 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.code;\n+\n+import java.io.PrintStream;\n+\n+\/** A placeholder value that has no concrete meaning other than helping constructing\n+ * other values.\n+ *\/\n+public class MarkerValue extends ScopeValue {\n+    public boolean isMarker() { return true; }\n+\n+    public void printOn(PrintStream tty) {\n+        tty.print(\"marker\");\n+    }\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/MarkerValue.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -181,1 +181,1 @@\n-      Assert.that(index > 0 && index <= getOopsLength(), \"must be a valid non-zero index\");\n+      Assert.that(index > 0 && index <= getOopsLength(), \"must be a valid non-zero index: \" + index);\n@@ -190,1 +190,1 @@\n-      Assert.that(index > 0 && index <= getMetadataLength(), \"must be a valid non-zero index\");\n+      Assert.that(index > 0 && index <= getMetadataLength(), \"must be a valid non-zero index: \" + index);\n@@ -280,0 +280,13 @@\n+  \/**\n+   * Attempt to decode all the debug info in this nmethod.  This is intended purely for testing.\n+   *\/\n+  public void decodeAllScopeDescs() {\n+    for (Address p = scopesPCsBegin(); p.lessThan(scopesPCsEnd()); p = p.addOffsetTo(pcDescSize)) {\n+      PCDesc pd = new PCDesc(p);\n+      if (pd.getPCOffset()  == -1) {\n+        break;\n+      }\n+      ScopeDesc sd = new ScopeDesc(this, pd.getScopeDecodeOffset(), pd.getObjDecodeOffset(), pd.getReexecute());\n+    }\n+  }\n+\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/NMethod.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+package sun.jvm.hotspot.code;\n+\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+class ObjectMergeValue extends ObjectValue {\n+\n+    private ScopeValue selector;\n+    private ScopeValue mergePointer;\n+    private List<ScopeValue> possibleObjects;\n+\n+    public ObjectMergeValue(int id) {\n+        super(id);\n+    }\n+\n+    public boolean isObjectMerge() { return true; }\n+\n+    void readObject(DebugInfoReadStream stream) {\n+        selector = ScopeValue.readFrom(stream);\n+        mergePointer = ScopeValue.readFrom(stream);\n+        possibleObjects = new ArrayList<>();\n+        int length = stream.readInt();\n+        for (int i = 0; i < length; i++) {\n+            ScopeValue val = readFrom(stream);\n+            possibleObjects.add(val);\n+        }\n+    }\n+\n+    @Override\n+    public void printOn(PrintStream tty) {\n+        tty.print(\"merge_obj[\" + id + \"]\");\n+        tty.print(\" selector=\\\"\");\n+        selector.printOn(tty);\n+        tty.print(\"\\\"\");\n+\n+        tty.print(\" merge_pointer=\\\"\");\n+        mergePointer.printOn(tty);\n+        tty.print(\"\\\"\");\n+\n+        tty.print(\", candidate_objs=[\" + ((ObjectValue) possibleObjects.get(0)).id);\n+        for (int i = 1; i < possibleObjects.size(); i++) {\n+            tty.print(\",\" + ((ObjectValue) possibleObjects.get(i)).id);\n+        }\n+        tty.print(\"]\");\n+    }\n+}\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/ObjectMergeValue.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,1 +36,2 @@\n-  private int              id;\n+  protected final int      id;\n+  private boolean          isRoot;\n@@ -64,0 +65,1 @@\n+    isRoot = stream.readBoolean();\n@@ -65,1 +67,1 @@\n-    Assert.that(klass.isConstantOop(), \"should be constant klass oop\");\n+    Assert.that(klass.isConstantOop(), \"should be constant klass oop: \" + klass);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/ObjectValue.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2009, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -54,0 +55,3 @@\n+  static final int AUTO_BOX_OBJECT_CODE = 7;\n+  static final int MARKER_CODE = 8;\n+  static final int OBJECT_MERGE_CODE = 9;\n@@ -61,0 +65,2 @@\n+  public boolean isMarker()         { return false; }\n+  public boolean isObjectMerge()    { return false; }\n@@ -75,0 +81,4 @@\n+    case AUTO_BOX_OBJECT_CODE:\n+      \/\/ The C++ code handles these 2 cases separately because the autobox case needs\n+      \/\/ some extra state during deoptimization.  That's not required to display the\n+      \/\/ information so treat it like a normal object value.\n@@ -78,0 +88,4 @@\n+    case MARKER_CODE:\n+      return new MarkerValue();\n+    case OBJECT_MERGE_CODE:\n+      return stream.readObjectMergeValue();\n@@ -85,0 +99,7 @@\n+\n+  public String toString() {\n+    ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+    PrintStream ps = new PrintStream(baos, true, StandardCharsets.UTF_8);\n+    printOn(ps);\n+    return baos.toString(StandardCharsets.UTF_8);\n+  }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/ScopeValue.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -320,4 +320,0 @@\n-    if (Assert.ASSERTS_ENABLED) {\n-        Assert.that(0 <= bci && bci < getCodeSize(),\n-                    \"illegal bci(\" + bci + \") codeSize(\" + getCodeSize() + \")\");\n-    }\n@@ -326,1 +322,1 @@\n-    if (hasLineNumberTable()) {\n+    if (0 <= bci && bci < getCodeSize() && hasLineNumberTable()) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/oops\/ConstMethod.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -152,0 +152,1 @@\n+        oa.shouldNotMatch(\"sun.jvm.hotspot.utilities.AssertionFailure\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbLauncher.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import jdk.test.lib.apps.LingeredApp;\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8318682\n+ * @summary Test clhsdb 'testdebuginfodecode' command\n+ * @requires vm.hasSA\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:CompileThresholdScaling=0.01 -XX:CompileCommand=compileonly,compiler.c2.HeapDumper::testIt -XX:CompileCommand=exclude,compiler.c2.HeapDumper::dummy ClhsdbTestAllocationMerge\n+ *\/\n+\n+public class ClhsdbTestAllocationMerge {\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"Starting ClhsdbTestDebugInfodDecode test\");\n+\n+        LingeredApp theApp = null;\n+        try {\n+            ClhsdbLauncher test = new ClhsdbLauncher();\n+\n+            theApp = new LingeredAppWithAllocationMerge();\n+            LingeredApp.startApp(theApp);\n+            System.out.println(\"Started LingeredAppWithAllocationMerge with pid \" + theApp.getPid());\n+\n+            List<String> cmds = List.of(\"jstack -v\");\n+\n+            \/\/ sun.jvm.hotspot.utilities.AssertionFailure is caught by the harness so it's not\n+            \/\/ necessary to include extra filters here.\n+            Map<String, List<String>> expStrMap = new HashMap<>();\n+            Map<String, List<String>> unExpStrMap = new HashMap<>();\n+            test.run(theApp.getPid(), cmds, expStrMap, unExpStrMap);\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            LingeredApp.stopApp(theApp);\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbTestAllocationMerge.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import jdk.test.lib.apps.LingeredApp;\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8318682\n+ * @summary Test clhsdb 'testdebuginfodecode' command\n+ * @requires vm.hasSA\n+ * @library \/test\/lib\n+ * @run main\/othervm\/timeout=2400 -Xmx1g -Xcomp ClhsdbTestDebugInfodDecode\n+ *\/\n+\n+public class ClhsdbTestDebugInfodDecode {\n+\n+    public static void main(String[] args) throws Exception {\n+        System.out.println(\"Starting ClhsdbTestDebugInfodDecode test\");\n+\n+        LingeredAppWithEnum theApp = null;\n+        try {\n+            ClhsdbLauncher test = new ClhsdbLauncher();\n+\n+            theApp = new LingeredAppWithEnum();\n+            LingeredApp.startApp(theApp);\n+            System.out.println(\"Started LingeredAppWithEnum with pid \" + theApp.getPid());\n+\n+            List<String> cmds = List.of(\"testdebuginfodecode\");\n+\n+            \/\/ sun.jvm.hotspot.utilities.AssertionFailure is caught by the harness so it's not\n+            \/\/ necessary to include extra filters here.\n+            Map<String, List<String>> expStrMap = new HashMap<>();\n+            Map<String, List<String>> unExpStrMap = new HashMap<>();\n+            test.run(theApp.getPid(), cmds, expStrMap, unExpStrMap);\n+        } catch (SkippedException se) {\n+            throw se;\n+        } catch (Exception ex) {\n+            throw new RuntimeException(\"Test ERROR \" + ex, ex);\n+        } finally {\n+            LingeredApp.stopApp(theApp);\n+        }\n+        System.out.println(\"Test PASSED\");\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/ClhsdbTestDebugInfodDecode.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.apps.LingeredApp;\n+\n+\/\/ Derived from test\/hotspot\/jtreg\/compiler\/c2\/TestReduceAllocationAndHeapDump.java\n+public class LingeredAppWithAllocationMerge extends LingeredApp {\n+    \/\/ Helper class\n+    static class Point {\n+        public int x;\n+\n+        public Point(int xx) {\n+            this.x = xx;\n+        }\n+    }\n+\n+\n+    public static Point p = new Point(0);\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 5000; i++) {\n+            testIt(i, args);\n+        }\n+    }\n+\n+    public static void testIt(int i, String[] args) {\n+        Point p = (i % 2 == 0) ? new Point(i) : new Point(i);\n+\n+        dummy(i, args);\n+\n+        if (i < 5000) {\n+            dummy(i, args);\n+        } else {\n+            dummy(p.x + i, args);\n+        }\n+    }\n+\n+    public static void dummy(int x, String[] args) {\n+        if (x > 4900) {\n+            LingeredApp.main(args);\n+            throw new InternalError(\"should never return\");\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/LingeredAppWithAllocationMerge.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"}]}