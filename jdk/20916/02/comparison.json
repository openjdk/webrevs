{"files":[{"patch":"@@ -228,2 +228,2 @@\n-            return Boolean.parseBoolean(provider.getProperty(\n-                    \"SecureRandom.\" + algorithm + \" ThreadSafe\", \"false\"));\n+            Service service = provider.getService(\"SecureRandom\", algorithm);\n+            return Boolean.parseBoolean(service.getAttribute(\"ThreadSafe\"));\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecureRandom.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,0 +24,3 @@\n+import static jdk.test.lib.Utils.runAndCheckException;\n+\n+import java.lang.Override;\n@@ -27,0 +30,1 @@\n+import java.util.List;\n@@ -31,1 +35,2 @@\n- * @bug 7004967\n+ * @library \/test\/lib\n+ * @bug 7004967 8329754\n@@ -34,0 +39,1 @@\n+\n@@ -38,6 +44,10 @@\n-        try {\n-            NoSync.test(SecureRandom.getInstance(\"S2\", p), 5, 5);\n-            throw new Exception(\"Failed\");\n-        } catch (RuntimeException re) {\n-            \/\/ Good\n-        }\n+        NoSync.test(SecureRandom.getInstance(\"AliasS1\", p), 5, 5);\n+\n+        runAndCheckException(\n+                () -> NoSync.test(SecureRandom.getInstance(\"S2\", p), 5, 5),\n+                RuntimeException.class);\n+\n+        runAndCheckException(\n+                () -> NoSync.test(SecureRandom.getInstance(\"AliasS2\", p), 5, 5),\n+                RuntimeException.class);\n+\n@@ -45,6 +55,9 @@\n-        try {\n-            NoSync.test(SecureRandom.getInstance(\"S4\", p), 5, 5);\n-            throw new Exception(\"Failed\");\n-        } catch (RuntimeException re) {\n-            \/\/ Good\n-        }\n+        NoSync.test(SecureRandom.getInstance(\"AliasS3\", p), 5, 5);\n+\n+        runAndCheckException(\n+                () -> NoSync.test(SecureRandom.getInstance(\"S4\", p), 5, 5),\n+                RuntimeException.class);\n+\n+        runAndCheckException(\n+                () -> NoSync.test(SecureRandom.getInstance(\"AliasS4\", p), 5, 5),\n+                RuntimeException.class);\n@@ -61,0 +74,3 @@\n+            \/\/ Good. Alias of S1, should pass because S1 is not marked as ThreadSafe\n+            put(\"Alg.alias.SecureRandom.AliasS1\", \"S1\");\n+\n@@ -65,0 +81,3 @@\n+            \/\/Bad. Alias of S2, should fail because S2 is marked as ThreadSafe\n+            put(\"alg.Alias.SecureRandom.AliasS2\", \"S2\");\n+\n@@ -67,1 +86,1 @@\n-                    S.class.getName(), null, null));\n+                    S.class.getName(), List.of(\"AliasS3\"), null));\n@@ -71,1 +90,1 @@\n-                    S.class.getName(), null, Map.of(\"ThreadSafe\", \"true\")));\n+                    S.class.getName(), List.of(\"AliasS4\"), Map.of(\"ThreadSafe\", \"true\")));\n@@ -77,1 +96,2 @@\n-        @java.lang.Override\n+\n+        @Override\n@@ -83,0 +103,1 @@\n+\n","filename":"test\/jdk\/java\/security\/SecureRandom\/ThreadSafe.java","additions":37,"deletions":16,"binary":false,"changes":53,"status":"modified"}]}