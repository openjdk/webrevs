{"files":[{"patch":"@@ -1715,13 +1715,4 @@\n-  if (commit_limit % BytesPerWord != 0) {\n-    THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(),\n-                err_msg(\"WB_CreateMetaspaceTestContext: commit_limit \" JLONG_FORMAT\n-                        \" is not a multiple of the system word byte size %d\",\n-                        commit_limit, BytesPerWord));\n-  }\n-  if (reserve_limit % BytesPerWord != 0) {\n-    THROW_MSG_0(\n-        vmSymbols::java_lang_IllegalArgumentException(),\n-        err_msg(\"WB_CreateMetaspaceTestContext: reserve_limit \" JLONG_FORMAT\n-                \" is not a multiple of the system word byte size %d\",\n-                commit_limit, BytesPerWord));\n-  }\n+  assert(is_aligned(commit_limit, BytesPerWord),\n+         \"WB_CreateMetaspaceTestContext: commit_limit is not a multiple of the system word byte size\");\n+  assert(is_aligned(reserve_limit, BytesPerWord),\n+         \"WB_CreateMetaspaceTestContext: reserve_limit is not a multiple of the system word byte size\");\n@@ -1769,6 +1760,2 @@\n-  if (size % BytesPerWord != 0) {\n-    THROW_MSG_0(vmSymbols::java_lang_IllegalArgumentException(),\n-                err_msg(\"WB_AllocateFromMetaspaceTestArena: size \" JLONG_FORMAT\n-                        \" is not a multiple of the system word byte size %d\",\n-                        size, BytesPerWord));\n-  }\n+  assert(is_aligned(size, BytesPerWord),\n+         \"WB_AllocateFromMetaspaceTestArena: size is not a multiple of the system word byte size\");\n@@ -1781,6 +1768,2 @@\n-  if (size % BytesPerWord != 0) {\n-    THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(),\n-              err_msg(\"WB_DeallocateToMetaspaceTestArena: size \" JLONG_FORMAT\n-                      \" is not a multiple of the system word byte size %d\",\n-                      size, BytesPerWord));\n-  }\n+  assert(is_aligned(size, BytesPerWord),\n+         \"WB_DeallocateToMetaspaceTestArena: size is not a multiple of the system word byte size\");\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":8,"deletions":25,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-        expectedMaxCommitted += Settings.ROOT_CHUNK_WORD_SIZE;\n+        expectedMaxCommitted += Settings.ROOT_CHUNK_WORD_SIZE * Settings.WORD_SIZE;\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+import jdk.test.lib.Unit;\n+\n@@ -52,1 +54,0 @@\n-        final long wordSize = Settings.WORD_SIZE;\n@@ -54,2 +55,2 @@\n-        MetaspaceTestArena arena1 = context.createArena(false, 1024 * 1024 * 4 * wordSize);\n-        MetaspaceTestArena arena2 = context.createArena(true,1024 * 1024 * 4 * wordSize);\n+        MetaspaceTestArena arena1 = context.createArena(false, 32L * Unit.valueOf(\"M\").size());\n+        MetaspaceTestArena arena2 = context.createArena(true, 32L * Unit.valueOf(\"M\").size());\n@@ -57,2 +58,2 @@\n-        Allocation a1 = arena1.allocate(100 * wordSize);\n-        Allocation a2 = arena2.allocate(100 * wordSize);\n+        Allocation a1 = arena1.allocate(800);\n+        Allocation a2 = arena2.allocate(800);\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocation.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -93,0 +93,2 @@\n+import jdk.test.lib.Unit;\n+\n@@ -97,2 +99,2 @@\n-        final long wordSize = Settings.WORD_SIZE;\n-        final long testAllocationCeiling = 1024 * 1024 * 8 * wordSize; \/\/ 8m words = 64M on 64bit\n+        final long testAllocationCeiling = 64L * Unit.valueOf(\"M\").size();\n+\n@@ -104,1 +106,1 @@\n-            long commitLimit = (i == 1) ? 1024 * 256 * wordSize: 0;\n+            long commitLimit = (i == 1) ? 2 * Unit.valueOf(\"M\").size() : 0;\n@@ -108,1 +110,1 @@\n-            long reserveLimit = (i == 2) ? Settings.ROOT_CHUNK_WORD_SIZE * 2 * wordSize: 0;\n+            long reserveLimit = (i == 2) ? Settings.ROOT_CHUNK_WORD_SIZE * 16: 0;\n@@ -118,1 +120,1 @@\n-            MetaspaceTestOneArenaManyThreads test = new MetaspaceTestOneArenaManyThreads(context, testAllocationCeiling * wordSize, numThreads, seconds);\n+            MetaspaceTestOneArenaManyThreads test = new MetaspaceTestOneArenaManyThreads(context, testAllocationCeiling, numThreads, seconds);\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT1.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -93,0 +93,2 @@\n+import jdk.test.lib.Unit;\n+\n@@ -97,2 +99,1 @@\n-        final long wordSize = Settings.WORD_SIZE;\n-        final long testAllocationCeiling = 1024 * 1024 * 6 * wordSize; \/\/ 8m words = 64M on 64bit\n+        final long testAllocationCeiling = 48L * Unit.valueOf(\"M\").size();\n@@ -104,1 +105,1 @@\n-            long commitLimit = (i == 1) ? 1024 * 256 * wordSize : 0;\n+            long commitLimit = (i == 1) ? 2L * Unit.valueOf(\"M\").size() : 0;\n@@ -107,1 +108,1 @@\n-            long reserveLimit = (i == 2) ? Settings.ROOT_CHUNK_WORD_SIZE * 2 * wordSize: 0;\n+            long reserveLimit = (i == 2) ? Settings.ROOT_CHUNK_WORD_SIZE * 16: 0;\n@@ -117,1 +118,1 @@\n-            MetaspaceTestManyArenasManyThreads test = new MetaspaceTestManyArenasManyThreads(context, testAllocationCeiling * wordSize, numThreads, seconds);\n+            MetaspaceTestManyArenasManyThreads test = new MetaspaceTestManyArenasManyThreads(context, testAllocationCeiling, numThreads, seconds);\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT2.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib;\n+\n+public enum Unit {\n+    B(1), K(1024), M(1024 * 1024), G(1024 * 1024 * 1024);\n+    public final long size;\n+    Unit(long size) {\n+        this.size = size;\n+    }\n+    public long size() {\n+        return size;\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/Unit.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"}]}