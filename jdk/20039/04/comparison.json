{"files":[{"patch":"@@ -1720,0 +1720,4 @@\n+  assert(is_aligned(commit_limit, BytesPerWord),\n+         \"WB_CreateMetaspaceTestContext: commit_limit is not a multiple of the system word byte size\");\n+  assert(is_aligned(reserve_limit, BytesPerWord),\n+         \"WB_CreateMetaspaceTestContext: reserve_limit is not a multiple of the system word byte size\");\n@@ -1721,1 +1725,2 @@\n-      new metaspace::MetaspaceTestContext(\"whitebox-metaspace-context\", (size_t) commit_limit, (size_t) reserve_limit);\n+      new metaspace::MetaspaceTestContext(\"whitebox-metaspace-context\", (size_t) commit_limit \/ BytesPerWord,\n+                                          (size_t) reserve_limit \/ BytesPerWord);\n@@ -1739,1 +1744,1 @@\n-WB_ENTRY(jlong, WB_GetTotalCommittedWordsInMetaspaceTestContext(JNIEnv* env, jobject wb, jlong context))\n+WB_ENTRY(jlong, WB_GetTotalCommittedBytesInMetaspaceTestContext(JNIEnv* env, jobject wb, jlong context))\n@@ -1741,1 +1746,1 @@\n-  return context0->committed_words();\n+  return (jlong)context0->committed_words() * BytesPerWord;\n@@ -1744,1 +1749,1 @@\n-WB_ENTRY(jlong, WB_GetTotalUsedWordsInMetaspaceTestContext(JNIEnv* env, jobject wb, jlong context))\n+WB_ENTRY(jlong, WB_GetTotalUsedBytesInMetaspaceTestContext(JNIEnv* env, jobject wb, jlong context))\n@@ -1746,1 +1751,1 @@\n-  return context0->used_words();\n+  return (jlong)context0->used_words() * BytesPerWord;\n@@ -1759,3 +1764,5 @@\n-WB_ENTRY(jlong, WB_AllocateFromMetaspaceTestArena(JNIEnv* env, jobject wb, jlong arena, jlong word_size))\n-  metaspace::MetaspaceTestArena* arena0 = (metaspace::MetaspaceTestArena*) arena;\n-  MetaWord* p = arena0->allocate((size_t) word_size);\n+WB_ENTRY(jlong, WB_AllocateFromMetaspaceTestArena(JNIEnv* env, jobject wb, jlong arena, jlong size))\n+  assert(is_aligned(size, BytesPerWord),\n+         \"WB_AllocateFromMetaspaceTestArena: size is not a multiple of the system word byte size\");\n+  metaspace::MetaspaceTestArena *arena0 = (metaspace::MetaspaceTestArena *)arena;\n+  MetaWord *p = arena0->allocate((size_t) size \/ BytesPerWord);\n@@ -1765,1 +1772,3 @@\n-WB_ENTRY(void, WB_DeallocateToMetaspaceTestArena(JNIEnv* env, jobject wb, jlong arena, jlong p, jlong word_size))\n+WB_ENTRY(void, WB_DeallocateToMetaspaceTestArena(JNIEnv* env, jobject wb, jlong arena, jlong p, jlong size))\n+  assert(is_aligned(size, BytesPerWord),\n+         \"WB_DeallocateToMetaspaceTestArena: size is not a multiple of the system word byte size\");\n@@ -1767,1 +1776,1 @@\n-  arena0->deallocate((MetaWord*)p, (size_t) word_size);\n+  arena0->deallocate((MetaWord*)p, (size_t) size \/ BytesPerWord);\n@@ -1774,0 +1783,8 @@\n+WB_ENTRY(jlong, WB_WordSize(JNIEnv* env))\n+  return (jlong)BytesPerWord;\n+WB_END\n+\n+WB_ENTRY(jlong, WB_RootChunkWordSize(JNIEnv* env))\n+  return (jlong)Metaspace::reserve_alignment_words();\n+WB_END\n+\n@@ -2955,2 +2972,2 @@\n-  {CC\"getTotalCommittedWordsInMetaspaceTestContext\", CC\"(J)J\",(void*)&WB_GetTotalCommittedWordsInMetaspaceTestContext},\n-  {CC\"getTotalUsedWordsInMetaspaceTestContext\", CC\"(J)J\", (void*)&WB_GetTotalUsedWordsInMetaspaceTestContext},\n+  {CC\"getTotalCommittedBytesInMetaspaceTestContext\", CC\"(J)J\",(void*)&WB_GetTotalCommittedBytesInMetaspaceTestContext},\n+  {CC\"getTotalUsedBytesInMetaspaceTestContext\", CC\"(J)J\", (void*)&WB_GetTotalUsedBytesInMetaspaceTestContext},\n@@ -2976,0 +2993,2 @@\n+  {CC\"wordSize\", CC\"()J\",                             (void*)&WB_WordSize},\n+  {CC\"rootChunkWordSize\", CC\"()J\",                    (void*)&WB_RootChunkWordSize}\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":31,"deletions":12,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-    public long word_size;\n+    public long size;\n@@ -31,1 +31,1 @@\n-    public Allocation(long p, long word_size) {\n+    public Allocation(long p, long size) {\n@@ -33,1 +33,1 @@\n-        this.word_size = word_size;\n+        this.size = size;\n@@ -44,1 +44,1 @@\n-                \", word_size=\" + word_size +\n+                \", size=\" + size +\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/Allocation.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,0 +46,3 @@\n+    \/**\n+     * Returns random allocation size measured in words\n+     *\/\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/AllocationProfile.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,2 +34,2 @@\n-    \/\/ Number and word size of allocations\n-    long allocatedWords = 0;\n+    \/\/ Number and byte size of allocations\n+    long allocatedBytes = 0;\n@@ -37,1 +37,1 @@\n-    long deallocatedWords = 0;\n+    long deallocatedBytes = 0;\n@@ -42,1 +42,1 @@\n-        return (allocatedWords - deallocatedWords) > allocationCeiling;\n+        return (allocatedBytes - deallocatedBytes) > allocationCeiling;\n@@ -45,1 +45,1 @@\n-    private synchronized void accountAllocation(long words) {\n+    private synchronized void accountAllocation(long size) {\n@@ -47,1 +47,1 @@\n-        allocatedWords += words;\n+        allocatedBytes += size;\n@@ -50,1 +50,1 @@\n-    private synchronized void accountDeallocation(long words) {\n+    private synchronized void accountDeallocation(long size) {\n@@ -52,1 +52,1 @@\n-        deallocatedWords += words;\n+        deallocatedBytes += size;\n@@ -60,1 +60,1 @@\n-    public Allocation allocate(long words) {\n+    public Allocation allocate(long size) {\n@@ -66,1 +66,1 @@\n-        long p = wb.allocateFromMetaspaceTestArena(arena, words);\n+        long p = wb.allocateFromMetaspaceTestArena(arena, size);\n@@ -71,1 +71,1 @@\n-            accountAllocation(words);\n+            accountAllocation(size);\n@@ -73,1 +73,1 @@\n-        return new Allocation(p, words);\n+        return new Allocation(p, size);\n@@ -78,2 +78,2 @@\n-        wb.deallocateToMetaspaceTestArena(arena, a.p, a.word_size);\n-        accountDeallocation(a.word_size);\n+        wb.deallocateToMetaspaceTestArena(arena, a.p, a.size);\n+        accountDeallocation(a.size);\n@@ -84,2 +84,2 @@\n-    public Allocation allocate_expect_success(long words) {\n-        Allocation a = allocate(words);\n+    public Allocation allocate_expect_success(long size) {\n+        Allocation a = allocate(size);\n@@ -87,1 +87,1 @@\n-            throw new RuntimeException(\"Allocation failed (\" + words + \")\");\n+            throw new RuntimeException(\"Allocation failed (\" + size + \")\");\n@@ -92,2 +92,2 @@\n-    public void allocate_expect_failure(long words) {\n-        Allocation a = allocate(words);\n+    public void allocate_expect_failure(long size) {\n+        Allocation a = allocate(size);\n@@ -95,1 +95,1 @@\n-            throw new RuntimeException(\"Allocation failed (\" + words + \")\");\n+            throw new RuntimeException(\"Allocation failed (\" + size + \")\");\n@@ -107,1 +107,1 @@\n-                \", allocatedWords=\" + allocatedWords +\n+                \", allocatedBytes=\" + allocatedBytes +\n@@ -109,1 +109,1 @@\n-                \", deallocatedWords=\" + deallocatedWords +\n+                \", deallocatedBytes=\" + deallocatedBytes +\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestArena.java","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-    long allocatedWords;\n+    long allocatedBytes;\n@@ -44,1 +44,1 @@\n-    long deallocatedWords;\n+    long deallocatedBytes;\n@@ -104,1 +104,1 @@\n-    public long committedWords() {\n+    public long committedBytes() {\n@@ -108,1 +108,1 @@\n-            l = wb.getTotalCommittedWordsInMetaspaceTestContext(context);\n+            l = wb.getTotalCommittedBytesInMetaspaceTestContext(context);\n@@ -113,1 +113,1 @@\n-    public long usedWords() {\n+    public long usedBytes() {\n@@ -117,1 +117,1 @@\n-            l = wb.getTotalUsedWordsInMetaspaceTestContext(context);\n+            l = wb.getTotalUsedBytesInMetaspaceTestContext(context);\n@@ -127,1 +127,1 @@\n-        allocatedWords = deallocatedWords = numAllocated = numDeallocated = 0;\n+        allocatedBytes = deallocatedBytes = numAllocated = numDeallocated = 0;\n@@ -129,2 +129,2 @@\n-            allocatedWords += a.allocatedWords;\n-            deallocatedWords += a.deallocatedWords;\n+            allocatedBytes += a.allocatedBytes;\n+            deallocatedBytes += a.deallocatedBytes;\n@@ -162,2 +162,2 @@\n-        long usageMeasured = usedWords();\n-        long committedMeasured = committedWords();\n+        long usageMeasured = usedBytes();\n+        long committedMeasured = committedBytes();\n@@ -165,1 +165,1 @@\n-        System.out.println(\"context used words \" + usageMeasured + \", committed words \" + committedMeasured\n+        System.out.println(\"context used bytes \" + usageMeasured + \", committed bytes \" + committedMeasured\n@@ -172,1 +172,1 @@\n-        if (deallocatedWords > allocatedWords) {\n+        if (deallocatedBytes > allocatedBytes) {\n@@ -186,1 +186,1 @@\n-        long expectedMinUsage = allocatedWords - deallocatedWords;\n+        long expectedMinUsage = allocatedBytes - deallocatedBytes;\n@@ -192,1 +192,1 @@\n-        long expectedMaxUsage = allocatedWords;\n+        long expectedMaxUsage = allocatedBytes;\n@@ -202,1 +202,1 @@\n-        expectedMaxUsage += (numAllocated * 3);\n+        expectedMaxUsage += (numAllocated * 3 * Settings.WORD_SIZE);\n@@ -207,1 +207,1 @@\n-        long overheadPerArena = 1024 * 1024 * numLiveArenas();\n+        long overheadPerArena = 1024 * 1024 * numLiveArenas() * Settings.WORD_SIZE;\n@@ -232,1 +232,1 @@\n-        expectedMaxCommitted += Settings.rootChunkWordSize;\n+        expectedMaxCommitted += Settings.ROOT_CHUNK_WORD_SIZE * Settings.WORD_SIZE;\n@@ -250,1 +250,1 @@\n-                \", allocatedWords=\" + allocatedWords +\n+                \", allocatedBytes=\" + allocatedBytes +\n@@ -252,1 +252,1 @@\n-                \", deallocatedWords=\" + deallocatedWords +\n+                \", deallocatedBytes=\" + deallocatedBytes +\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestContext.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n-    \/\/ Total *word* size we allow for the test to allocation. The test may overshoot this a bit, but should not by much.\n+    \/\/ Total *byte* size we allow for the test to allocation. The test may overshoot this a bit, but should not by much.\n@@ -80,2 +80,2 @@\n-        if (context.committedWords() > 0) {\n-            throw new RuntimeException(\"Expected no committed words after purging empty metaspace context (was: \" + context.committedWords() + \")\");\n+        if (context.committedBytes() > 0) {\n+            throw new RuntimeException(\"Expected no committed bytes after purging empty metaspace context (was: \" + context.committedBytes() + \")\");\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/MetaspaceTestWithThreads.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import jdk.test.whitebox.WhiteBox;\n+\n@@ -64,2 +66,2 @@\n-        long word_size = profile.randomAllocationSize();\n-        Allocation a = arena.allocate(word_size);\n+        long words = profile.randomAllocationSize();\n+        Allocation a = arena.allocate(words * Settings.WORD_SIZE);\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/RandomAllocator.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,2 +30,2 @@\n-    final static long rootChunkWordSize = 2048 * 1024;\n-\n+    final static long ROOT_CHUNK_WORD_SIZE = WhiteBox.getWhiteBox().rootChunkWordSize();\n+    final static long WORD_SIZE = WhiteBox.getWhiteBox().wordSize();\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/Settings.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -48,0 +48,2 @@\n+import jdk.test.lib.Unit;\n+\n@@ -53,2 +55,2 @@\n-        MetaspaceTestArena arena1 = context.createArena(false, 1024 * 1024 * 4);\n-        MetaspaceTestArena arena2 = context.createArena(true,1024 * 1024 * 4);\n+        MetaspaceTestArena arena1 = context.createArena(false, 32L * Unit.M.size());\n+        MetaspaceTestArena arena2 = context.createArena(true, 32L * Unit.M.size());\n@@ -56,2 +58,2 @@\n-        Allocation a1 = arena1.allocate(100);\n-        Allocation a2 = arena2.allocate(100);\n+        Allocation a1 = arena1.allocate(800);\n+        Allocation a2 = arena2.allocate(800);\n@@ -59,2 +61,2 @@\n-        long used = context.usedWords();\n-        long committed = context.committedWords();\n+        long used = context.usedBytes();\n+        long committed = context.committedBytes();\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocation.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * or commit limit (mimimcking MaxMetaspaceSize).\n+ * or commit limit (mimicking MaxMetaspaceSize).\n@@ -37,1 +37,1 @@\n- * and aggessive) as well as one run with allocation guards enabled.\n+ * and aggressive) as well as one run with allocation guards enabled.\n@@ -93,0 +93,2 @@\n+import jdk.test.lib.Unit;\n+\n@@ -97,1 +99,2 @@\n-        final long testAllocationCeiling = 1024 * 1024 * 8; \/\/ 8m words = 64M on 64bit\n+        final long testAllocationCeiling = 64L * Unit.M.size();\n+\n@@ -103,1 +106,1 @@\n-            long commitLimit = (i == 1) ? 1024 * 256 : 0;\n+            long commitLimit = (i == 1) ? 2 * Unit.M.size() : 0;\n@@ -106,2 +109,2 @@\n-            \/\/  (512K on 64bit, 1M on 32bit)\n-            long reserveLimit = (i == 2) ? Settings.rootChunkWordSize * 2 : 0;\n+            \/\/  (16 MB)\n+            long reserveLimit = (i == 2) ? Settings.ROOT_CHUNK_WORD_SIZE * 16: 0;\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT1.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- * or commit limit (mimimcking MaxMetaspaceSize).\n+ * or commit limit (mimicking MaxMetaspaceSize).\n@@ -37,1 +37,1 @@\n- * and aggessive) as well as one run with allocation guards enabled.\n+ * and aggressive) as well as one run with allocation guards enabled.\n@@ -93,0 +93,2 @@\n+import jdk.test.lib.Unit;\n+\n@@ -97,1 +99,1 @@\n-        final long testAllocationCeiling = 1024 * 1024 * 6; \/\/ 8m words = 64M on 64bit\n+        final long testAllocationCeiling = 48L * Unit.M.size();\n@@ -103,1 +105,1 @@\n-            long commitLimit = (i == 1) ? 1024 * 256 : 0;\n+            long commitLimit = (i == 1) ? 2L * Unit.M.size() : 0;\n@@ -106,1 +108,1 @@\n-            long reserveLimit = (i == 2) ? Settings.rootChunkWordSize * 2 : 0;\n+            long reserveLimit = (i == 2) ? Settings.ROOT_CHUNK_WORD_SIZE * 16: 0;\n","filename":"test\/hotspot\/jtreg\/runtime\/Metaspace\/elastic\/TestMetaspaceAllocationMT2.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,36 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.test.lib;\n+\n+public enum Unit {\n+    B(1), K(1024), M(1024 * 1024), G(1024 * 1024 * 1024);\n+    public final long size;\n+    Unit(long size) {\n+        this.size = size;\n+    }\n+    public long size() {\n+        return size;\n+    }\n+}\n","filename":"test\/lib\/jdk\/test\/lib\/Unit.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"added"},{"patch":"@@ -543,2 +543,2 @@\n-  public native long getTotalCommittedWordsInMetaspaceTestContext(long context);\n-  public native long getTotalUsedWordsInMetaspaceTestContext(long context);\n+  public native long getTotalCommittedBytesInMetaspaceTestContext(long context);\n+  public native long getTotalUsedBytesInMetaspaceTestContext(long context);\n@@ -547,2 +547,2 @@\n-  public native long allocateFromMetaspaceTestArena(long arena, long word_size);\n-  public native void deallocateToMetaspaceTestArena(long arena, long p, long word_size);\n+  public native long allocateFromMetaspaceTestArena(long arena, long size);\n+  public native void deallocateToMetaspaceTestArena(long arena, long p, long size);\n@@ -552,0 +552,4 @@\n+  \/\/ Word size measured in bytes\n+  public native long wordSize();\n+  public native long rootChunkWordSize();\n+\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}