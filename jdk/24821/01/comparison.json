{"files":[{"patch":"@@ -38,1 +38,3 @@\n-import java.lang.reflect.Field;\n+import jdk.internal.misc.Unsafe;\n+\n+import java.lang.invoke.VarHandle;\n@@ -179,0 +181,2 @@\n+            \/\/ Needed to ensure safe publication of setMap()\n+            VarHandle.releaseFence();\n@@ -530,7 +534,6 @@\n-        try {\n-            Field mapField = ConcurrentSkipListSet.class.getDeclaredField(\"m\");\n-            mapField.setAccessible(true);\n-            mapField.set(this, map);\n-        } catch (IllegalAccessException | NoSuchFieldException e) {\n-            throw new Error(e);\n-        }\n+        final Unsafe U = Unsafe.getUnsafe();\n+        U.putReference(\n+            this,\n+            U.objectFieldOffset(ConcurrentSkipListSet.class, \"m\"),\n+            map\n+        );\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ConcurrentSkipListSet.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import java.lang.reflect.Field;\n@@ -60,0 +59,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -2098,7 +2098,6 @@\n-        try {\n-            Field lockField = CopyOnWriteArrayList.class.getDeclaredField(\"lock\");\n-            lockField.setAccessible(true);\n-            lockField.set(this, new Object());\n-        } catch (IllegalAccessException | NoSuchFieldException e) {\n-            throw new Error(e);\n-        }\n+        final Unsafe U = Unsafe.getUnsafe();\n+        U.putReference(\n+            this,\n+            U.objectFieldOffset(CopyOnWriteArrayList.class, \"lock\"),\n+            new Object()\n+        );\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/CopyOnWriteArrayList.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import jdk.internal.misc.Unsafe;\n+\n@@ -41,1 +43,0 @@\n-import java.lang.reflect.Field;\n@@ -333,1 +334,0 @@\n-        try {\n@@ -335,6 +335,6 @@\n-            Field arrayField = AtomicReferenceArray.class.getDeclaredField(\"array\");\n-            arrayField.setAccessible(true);\n-            arrayField.set(this, a);\n-        } catch (NoSuchFieldException | IllegalAccessException e) {\n-            throw new Error(e);\n-        }\n+        final Unsafe U = Unsafe.getUnsafe();\n+        U.putReference(\n+            this,\n+            U.objectFieldOffset(AtomicReferenceArray.class, \"array\"),\n+            a\n+        );\n@@ -526,1 +526,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/atomic\/AtomicReferenceArray.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"}]}