{"files":[{"patch":"@@ -865,0 +865,8 @@\n+                if (debug != null) {\n+                    debug.println(\"WARNING: JCEKS uses outdated cryptographic \"\n+                            + \"algorithms and will be removed in a future \"\n+                            + \"release. Migrate to PKCS12 using:\\n\"\n+                            + \"keytool -importkeystore -srckeystore <keystore> \"\n+                            + \"-destkeystore <keystore> -deststoretype pkcs12\");\n+                }\n+\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/JceKeyStore.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -832,13 +832,0 @@\n-    private static void outdatedKeyStoreLog(String type) {\n-        if (type != null && kdebug != null &&\n-                (type.equalsIgnoreCase(\"JKS\") ||\n-                type.equalsIgnoreCase(\"JCEKS\"))) {\n-            kdebug.println(\"WARNING: \" + type.toUpperCase(Locale.ROOT) +\n-                    \" uses outdated cryptographic algorithm and\" +\n-                    \" will be removed in a future release.\" +\n-                    \" Migrate to PKCS12 using:\\n\" +\n-                    \"keytool -importkeystore -srckeystore <keystore>\" +\n-                    \" -destkeystore <keystore> -deststoretype pkcs12\");\n-        }\n-    }\n-\n@@ -902,1 +889,0 @@\n-            outdatedKeyStoreLog(type);\n@@ -968,1 +954,0 @@\n-            outdatedKeyStoreLog(type);\n@@ -1030,1 +1015,0 @@\n-            outdatedKeyStoreLog(type);\n@@ -1910,2 +1894,0 @@\n-\n-                outdatedKeyStoreLog(keystore.getType());\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStore.java","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -793,0 +793,12 @@\n+            if (debug != null) {\n+                String type = this.getClass().getSimpleName().\n+                        toUpperCase(Locale.ROOT);\n+                if (type.equals(\"JKS\")){\n+                    debug.println(\"WARNING: JKS uses outdated cryptographic \"\n+                            + \"algorithms and will be removed in a future \"\n+                            + \"release. Migrate to PKCS12 using:\\n\"\n+                            + \"keytool -importkeystore -srckeystore <keystore> \"\n+                            + \"-destkeystore <keystore> -deststoretype pkcs12\");\n+                }\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/JavaKeyStore.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -170,1 +170,0 @@\n-    String realStoreType;\n@@ -244,1 +243,1 @@\n-    private boolean outdatedFormat = false;\n+    private boolean weakKeyStore = false;\n@@ -1487,1 +1486,1 @@\n-        if (outdatedFormat) {\n+        if (weakKeyStore) {\n@@ -1489,2 +1488,2 @@\n-                    \"outdated.storetype.warning\"),\n-                    realStoreType, keystore));\n+                    \"jks.storetype.warning\"),\n+                    store.getType(), keystore));\n@@ -2411,10 +2410,0 @@\n-            File storeFile = new File(keyStoreName);\n-            if (storeFile.isFile()) {\n-                KeyStore keyStore = KeyStore.getInstance(storeFile, storepass);\n-                realStoreType = keyStore.getType();\n-                if (realStoreType.equalsIgnoreCase(\"JKS\")\n-                        || realStoreType.equalsIgnoreCase(\"JCEKS\")) {\n-                    outdatedFormat = true;\n-                }\n-            }\n-\n@@ -2443,0 +2432,4 @@\n+                    if (store.getType().equalsIgnoreCase(\"JKS\")\n+                            || store.getType().equalsIgnoreCase(\"JCEKS\")) {\n+                        weakKeyStore = true;\n+                    }\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":8,"deletions":15,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -225,1 +225,1 @@\n-outdated.storetype.warning=%1$s uses outdated cryptographic algorithms and will be removed in a future release. Migrate to PKCS12 using:\\n\\\n+jks.storetype.warning=%1$s uses outdated cryptographic algorithms and will be removed in a future release. Migrate to PKCS12 using:\\n\\\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/resources\/jarsigner.properties","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,152 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.io.ByteArrayOutputStream;\n-import java.io.File;\n-import java.io.FileOutputStream;\n-import java.io.PrintStream;\n-import java.security.KeyStore;\n-import java.security.Provider;\n-import java.security.Security;\n-import java.util.Locale;\n-\n-\/*\n- * @test\n- * @bug 8353749\n- * @summary Check warnings for JKS and JCEKS KeyStore\n- * @run main\/othervm -Djava.security.debug=keystore TestOutdatedKeyStore\n- *\/\n-\n-public class TestOutdatedKeyStore {\n-\n-    private static final String[] KS_TYPES = {\n-            \"jks\", \"jceks\"\n-    };\n-\n-    private static final String KS_WARNING1 =\n-            \"uses outdated cryptographic algorithm and will be removed \" +\n-            \"in a future release. Migrate to PKCS12 using:\";\n-\n-    private static final String KS_WARNING2=\n-            \"keytool -importkeystore -srckeystore <keystore> \" +\n-            \"-destkeystore <keystore> -deststoretype pkcs12\";\n-\n-    public static void main(String[] args) throws Exception {\n-        for (String type : KS_TYPES) {\n-            testGetInstance1(type);\n-            testGetInstance2(type);\n-            testGetInstance3(type);\n-            testGetInstance4(type);\n-            testGetInstance5(type);\n-        }\n-        System.out.println(\"All tests completed.\");\n-    }\n-\n-    \/\/ Test getInstance(String type)\n-    private static void testGetInstance1(String type) throws Exception {\n-        System.out.println(\"Test getInstance(String type) with type: \"\n-                + type);\n-        checkWarnings(type, () -> {\n-            KeyStore ks = KeyStore.getInstance(type);\n-        });\n-    }\n-\n-    \/\/ Test getInstance(String type, String provider)\n-    private static void testGetInstance2(String type) throws Exception {\n-        System.out.println(\"Test getInstance(String type, String provider) with type: \"\n-                + type);\n-        String provider = Security.getProviders(\"KeyStore.\" + type)[0].getName();\n-        checkWarnings(type, () -> {\n-            KeyStore ks = KeyStore.getInstance(type, provider);\n-        });\n-    }\n-\n-    \/\/ Test getInstance(String type, Provider provider)\n-    private static void testGetInstance3(String type) throws Exception {\n-        System.out.println(\"Test getInstance(String type, Provider provider) with type: \"\n-                + type);\n-        Provider provider = Security.getProviders(\"KeyStore.\" + type)[0];\n-        checkWarnings(type, () -> {\n-            KeyStore ks = KeyStore.getInstance(type, provider);\n-        });\n-    }\n-\n-    \/\/ Test getInstance(File file, char[] password)\n-    private static void testGetInstance4(String type) throws Exception {\n-        System.out.println(\"Test getInstance(File file, char[] password) with type: \"\n-                + type);\n-        File ksFile = createKeystore(type);\n-        checkWarnings(type, () -> {\n-            KeyStore ks = KeyStore.getInstance(ksFile, \"changeit\".toCharArray());\n-        });\n-    }\n-\n-    \/\/ Test getInstance(File file, LoadStoreParameter param)\n-    private static void testGetInstance5(String type) throws Exception {\n-        System.out.println(\"Test getInstance(File file, LoadStoreParameter param) with type: \"\n-                + type);\n-        File ksFile = createKeystore(type);\n-        KeyStore.LoadStoreParameter param = new KeyStore.LoadStoreParameter() {\n-            @Override\n-            public KeyStore.ProtectionParameter getProtectionParameter() {\n-                return new KeyStore.PasswordProtection(\"changeit\".toCharArray());\n-            }\n-        };\n-        checkWarnings(type, () -> {\n-            KeyStore ks = KeyStore.getInstance(ksFile, param);\n-        });\n-    }\n-\n-    private static File createKeystore(String type) throws Exception {\n-        File ksFile = File.createTempFile(\"kstore\", \".tmp\");\n-        ksFile.deleteOnExit();\n-        KeyStore ks = KeyStore.getInstance(type);\n-        ks.load(null, null);\n-        try (FileOutputStream fos = new FileOutputStream(ksFile)) {\n-            ks.store(fos, \"changeit\".toCharArray());\n-        }\n-        return ksFile;\n-    }\n-\n-    private static void checkWarnings(String type, RunnableWithException r) throws Exception {\n-        ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n-        PrintStream origErr = System.err;\n-        try {\n-            System.setErr(new PrintStream(bOut));\n-            r.run();\n-        } finally {\n-            System.setErr(origErr);\n-        }\n-\n-        String msg = bOut.toString();\n-        if (!msg.contains(\"WARNING: \" + type.toUpperCase(Locale.ROOT)) ||\n-                !msg.contains(KS_WARNING1) ||\n-                !msg.contains(KS_WARNING2)) {\n-            throw new RuntimeException(\"Expected warning not found for \" + type + \":\\n\" + msg);\n-        }\n-    }\n-\n-    interface RunnableWithException {\n-        void run() throws Exception;\n-    }\n-}\n","filename":"test\/jdk\/java\/security\/KeyStore\/TestOutdatedKeyStore.java","additions":0,"deletions":152,"binary":false,"changes":152,"status":"deleted"},{"patch":"@@ -28,1 +28,1 @@\n- *         JKS and JCEKS keystore\n+ *         JKS and JCEKS keystore with java.security.debug=keystore\n@@ -33,0 +33,4 @@\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.io.PrintStream;\n+import java.util.Locale;\n@@ -39,0 +43,8 @@\n+    private static final String KS_WARNING1 =\n+            \"uses outdated cryptographic algorithms and will be removed \" +\n+            \"in a future release. Migrate to PKCS12 using:\";\n+\n+    private static final String KS_WARNING2=\n+            \"keytool -importkeystore -srckeystore <keystore> \" +\n+            \"-destkeystore <keystore> -deststoretype pkcs12\";\n+\n@@ -44,2 +56,13 @@\n-            String KS_WARNING = type + \" uses outdated cryptographic algorithms and \" +\n-                    \"will be removed in a future release. Migrate to PKCS12 using:\";\n+            String cmdWarning = type + \" \" + KS_WARNING1;\n+\n+            checkWarnings(type, () -> {\n+                SecurityTools.keytool(String.format(\n+                        \"-genkeypair -keystore %s -storetype %s -storepass changeit \" +\n+                        \"-keypass changeit -keyalg ec -alias a1 -dname CN=me \" +\n+                        \"-J-Djava.security.debug=keystore\",\n+                        ksFile, type.toLowerCase()))\n+                        .shouldContain(\"Warning:\")\n+                        .shouldContain(cmdWarning)\n+                        .shouldContain(KS_WARNING2)\n+                        .shouldHaveExitValue(0);\n+            });\n@@ -47,9 +70,12 @@\n-            SecurityTools.keytool(String.format(\n-                    \"-genkeypair -keystore %s -storetype %s -storepass changeit \" +\n-                    \"-keypass changeit -keyalg ec -alias a1 -dname CN=me\",\n-                    ksFile, type.toLowerCase()))\n-                    .shouldContain(\"Warning:\")\n-                    .shouldContain(KS_WARNING)\n-                    .shouldMatch(\"keytool -importkeystore -srckeystore.\" +\n-                            \"*-destkeystore.*-deststoretype pkcs12\")\n-                    .shouldHaveExitValue(0);\n+            JarUtils.createJarFile(Path.of(\"unsigned.jar\"), Path.of(\".\"), Path.of(ksFile));\n+            checkWarnings(type, () -> {\n+                SecurityTools.jarsigner(String.format(\n+                        \"-keystore %s -storetype %s -storepass changeit -signedjar signed.jar \" +\n+                        \"unsigned.jar a1 \" +\n+                        \"-J-Djava.security.debug=keystore\",\n+                        ksFile, type.toLowerCase()))\n+                        .shouldContain(\"Warning:\")\n+                        .shouldContain(cmdWarning)\n+                        .shouldContain(KS_WARNING2)\n+                        .shouldHaveExitValue(0);\n+            });\n@@ -57,2 +83,12 @@\n-            JarUtils.createJarFile(Path.of(\"unsigned.jar\"), Path.of(\".\"),\n-                    Path.of(ksFile));\n+            checkWarnings(type, () -> {\n+                SecurityTools.jarsigner(String.format(\n+                        \"-verify -keystore %s -storetype %s -storepass changeit signed.jar \" +\n+                        \"-J-Djava.security.debug=keystore\",\n+                        ksFile, type.toLowerCase()))\n+                        .shouldContain(\"Warning:\")\n+                        .shouldContain(cmdWarning)\n+                        .shouldContain(KS_WARNING2)\n+                        .shouldHaveExitValue(0);\n+            });\n+        }\n+    }\n@@ -60,9 +96,4 @@\n-            SecurityTools.jarsigner(String.format(\n-                    \"-keystore %s -storetype %s -storepass changeit -signedjar signed.jar \" +\n-                    \"unsigned.jar a1\",\n-                    ksFile, type.toLowerCase()))\n-                    .shouldContain(\"Warning:\")\n-                    .shouldContain(KS_WARNING)\n-                    .shouldMatch(\"keytool -importkeystore -srckeystore.\" +\n-                            \"*-destkeystore.*-deststoretype pkcs12\")\n-                    .shouldHaveExitValue(0);\n+    private static void checkWarnings(String type, RunnableWithException r) throws Exception {\n+        ByteArrayOutputStream bOut = new ByteArrayOutputStream();\n+        PrintStream origErr = System.err;\n+        PrintStream origOut = System.out;\n@@ -70,8 +101,8 @@\n-            SecurityTools.jarsigner(String.format(\n-                    \"-verify -keystore %s -storetype %s -storepass changeit signed.jar\",\n-                    ksFile, type.toLowerCase()))\n-                    .shouldContain(\"Warning:\")\n-                    .shouldContain(KS_WARNING)\n-                    .shouldMatch(\"keytool -importkeystore -srckeystore.\" +\n-                            \"*-destkeystore.*-deststoretype pkcs12\")\n-                    .shouldHaveExitValue(0);\n+        try {\n+            PrintStream pStream = new PrintStream(bOut);\n+            System.setErr(pStream);\n+            System.setOut(pStream);\n+            r.run();\n+        } finally {\n+            System.setErr(origErr);\n+            System.setOut(origOut);\n@@ -79,0 +110,13 @@\n+\n+        String msg = bOut.toString();\n+        if (!msg.contains(\"WARNING: \" + type.toUpperCase(Locale.ROOT)) ||\n+                !msg.contains(KS_WARNING1) ||\n+                !msg.contains(KS_WARNING2) ||\n+                !msg.contains(\"Warning:\")) {\n+            throw new RuntimeException(\"Expected warning not found for \" + type + \":\\n\" + msg);\n+        }\n+    }\n+\n+    @FunctionalInterface\n+    interface RunnableWithException {\n+        void run() throws Exception;\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/OutdatedKeyStoreWarning.java","additions":75,"deletions":31,"binary":false,"changes":106,"status":"modified"}]}