{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import static compiler.lib.verify.Verify.*;\n@@ -37,0 +38,1 @@\n+ * @bug 8345845\n@@ -44,1 +46,0 @@\n- * @requires os.arch != \"riscv64\" | vm.cpu.features ~= \".*zbb.*\"\n@@ -47,0 +48,11 @@\n+\/*\n+ * @test\n+ * @bug 8345845\n+ * @summary Test merging of consecutive loads\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ *\n+ * @run main compiler.c2.TestMergeLoads unaligned StressIGVN\n+ * @run main compiler.c2.TestMergeLoads aligned StressIGVN\n+ *\n+ *\/\n@@ -58,1 +70,1 @@\n-        Object[] run(boolean isWarmUp, int rnd);\n+        Object run(boolean isWarmUp, int rnd);\n@@ -67,4 +79,7 @@\n-        switch (args[0]) {\n-            case \"aligned\"     -> { framework.addFlags(\"-XX:-UseUnalignedAccesses\"); }\n-            case \"unaligned\"   -> { framework.addFlags(\"-XX:+UseUnalignedAccesses\"); }\n-            default -> { throw new RuntimeException(\"Test argument not recognized: \" + args[0]); }\n+        for (String arg: args) {\n+            switch (args[0]) {\n+                case \"aligned\"     -> { framework.addFlags(\"-XX:-UseUnalignedAccesses\"); }\n+                case \"unaligned\"   -> { framework.addFlags(\"-XX:+UseUnalignedAccesses\"); }\n+                case \"StressIGVN\"   -> { framework.addFlags(\"-XX:+StressIGVN\"); }\n+                default -> { throw new RuntimeException(\"Test argument not recognized: \" + args[0]); }\n+            }\n@@ -82,0 +97,2 @@\n+        testGroups.get(\"test1\").put(\"test1d\", (_,_) -> { return test1d(aB.clone()); });\n+        testGroups.get(\"test1\").put(\"test1e\", (_,_) -> { return test1e(aB.clone()); });\n@@ -89,0 +106,2 @@\n+        testGroups.get(\"test2\").put(\"test2d\", (_,_) -> { return test2d(aB.clone()); });\n+        testGroups.get(\"test2\").put(\"test2e\", (_,_) -> { return test2e(aB.clone()); });\n@@ -151,0 +170,3 @@\n+                 \"test1d\",\n+                 \"test1e\",\n+\n@@ -154,0 +176,3 @@\n+                 \"test2d\",\n+                 \"test2e\",\n+\n@@ -157,0 +182,1 @@\n+\n@@ -160,0 +186,1 @@\n+\n@@ -162,0 +189,1 @@\n+\n@@ -164,0 +192,1 @@\n+\n@@ -166,0 +195,1 @@\n+\n@@ -182,1 +212,1 @@\n-                Object[] gold = null;\n+                Object gold = null;\n@@ -187,1 +217,1 @@\n-                    Object[] result = test.run(info.isWarmUp(), iter);\n+                    Object result = test.run(info.isWarmUp(), iter);\n@@ -192,1 +222,1 @@\n-                        verify(\"group \" + group_name + \", gold \" + gold_name + \", test \" + name, gold, result);\n+                        checkEQ(gold, result, \"group \" + group_name + \", gold \" + gold_name + \", test \" + name);\n@@ -199,81 +229,0 @@\n-    static void verify(String name, Object[] gold, Object[] result) {\n-        if (gold.length != result.length) {\n-            throw new RuntimeException(\"verify \" + name + \": not the same number of outputs: gold.length = \" +\n-                                       gold.length + \", result.length = \" + result.length);\n-        }\n-        for (int i = 0; i < gold.length; i++) {\n-            Object g = gold[i];\n-            Object r = result[i];\n-            if (g.getClass() != r.getClass() || !g.getClass().isArray() || !r.getClass().isArray()) {\n-                throw new RuntimeException(\"verify \" + name + \": must both be array of same type:\" +\n-                                           \" gold[\" + i + \"].getClass() = \" + g.getClass().getSimpleName() +\n-                                           \" result[\" + i + \"].getClass() = \" + r.getClass().getSimpleName());\n-            }\n-            if (g == r) {\n-                throw new RuntimeException(\"verify \" + name + \": should be two separate arrays (with identical content):\" +\n-                                           \" gold[\" + i + \"] == result[\" + i + \"]\");\n-            }\n-            if (Array.getLength(g) != Array.getLength(r)) {\n-                    throw new RuntimeException(\"verify \" + name + \": arrays must have same length:\" +\n-                                           \" gold[\" + i + \"].length = \" + Array.getLength(g) +\n-                                           \" result[\" + i + \"].length = \" + Array.getLength(r));\n-            }\n-            Class c = g.getClass().getComponentType();\n-            if (c == byte.class) {\n-                verifyB(name, i, (byte[])g, (byte[])r);\n-            } else if (c == short.class) {\n-                verifyS(name, i, (short[])g, (short[])r);\n-            } else if (c == int.class) {\n-                verifyI(name, i, (int[])g, (int[])r);\n-            } else if (c == long.class) {\n-                verifyL(name, i, (long[])g, (long[])r);\n-            } else {\n-                throw new RuntimeException(\"verify \" + name + \": array type not supported for verify:\" +\n-                                       \" gold[\" + i + \"].getClass() = \" + g.getClass().getSimpleName() +\n-                                       \" result[\" + i + \"].getClass() = \" + r.getClass().getSimpleName());\n-            }\n-        }\n-    }\n-\n-    static void verifyB(String name, int i, byte[] g, byte[] r) {\n-        for (int j = 0; j < g.length; j++) {\n-            if (g[j] != r[j]) {\n-                throw new RuntimeException(\"verify \" + name + \": arrays must have same content:\" +\n-                                           \" gold[\" + i + \"][\" + j + \"] = \" + g[j] +\n-                                           \" = \" + String.format(\"%02X\", g[j] & 0xFF) +\n-                                           \" result[\" + i + \"][\" + j + \"] = \" + r[j] +\n-                                           \" = \" + String.format(\"%02X\", r[j] & 0xFF));\n-            }\n-        }\n-    }\n-\n-    static void verifyS(String name, int i, short[] g, short[] r) {\n-        for (int j = 0; j < g.length; j++) {\n-            if (g[j] != r[j]) {\n-                throw new RuntimeException(\"verify \" + name + \": arrays must have same content:\" +\n-                                           \" gold[\" + i + \"][\" + j + \"] = \" + g[j] +\n-                                           \" result[\" + i + \"][\" + j + \"] = \" + r[j]);\n-            }\n-        }\n-    }\n-\n-    static void verifyI(String name, int i, int[] g, int[] r) {\n-        for (int j = 0; j < g.length; j++) {\n-            if (g[j] != r[j]) {\n-                throw new RuntimeException(\"verify \" + name + \": arrays must have same content:\" +\n-                                           \" gold[\" + i + \"][\" + j + \"] = \" + g[j] +\n-                                           \" result[\" + i + \"][\" + j + \"] = \" + r[j]);\n-            }\n-        }\n-    }\n-\n-    static void verifyL(String name, int i, long[] g, long[] r) {\n-        for (int j = 0; j < g.length; j++) {\n-            if (g[j] != r[j]) {\n-                throw new RuntimeException(\"verify \" + name + \": arrays must have same content:\" +\n-                                           \" gold[\" + i + \"][\" + j + \"] = \" + g[j] +\n-                                           \" result[\" + i + \"][\" + j + \"] = \" + r[j]);\n-            }\n-        }\n-    }\n-\n@@ -284,7 +233,5 @@\n-    static Object[] test1R(byte[] a) {\n-      int i1 = (a[0] & 0xff)         |\n-              ((a[1] & 0xff) << 8 )  |\n-              ((a[2] & 0xff) << 16)  |\n-              ((a[3] & 0xff) << 24);\n-      int[] ret = {i1};\n-      return new Object[]{ret};\n+    static int test1R(byte[] a) {\n+      return  (a[0] & 0xff)         |\n+             ((a[1] & 0xff) << 8 )  |\n+             ((a[2] & 0xff) << 16)  |\n+             ((a[3] & 0xff) << 24);\n@@ -294,1 +241,8 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+        },\n@@ -297,2 +251,9 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n-                  IRNode.REVERSE_BYTES_I, \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I,  \"1\"\n+        },\n@@ -301,7 +262,5 @@\n-    static Object[] test1a(byte[] a) {\n-      int i1 = (a[0] & 0xff)         |\n-              ((a[1] & 0xff) << 8 )  |\n-              ((a[2] & 0xff) << 16)  |\n-              ((a[3] & 0xff) << 24);\n-      int[] ret = {i1};\n-      return new Object[]{ret};\n+    static int test1a(byte[] a) {\n+      return  (a[0] & 0xff)         |\n+             ((a[1] & 0xff) << 8 )  |\n+             ((a[2] & 0xff) << 16)  |\n+             ((a[3] & 0xff) << 24);\n@@ -311,1 +270,8 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+        },\n@@ -313,4 +279,31 @@\n-    static Object[] test1b(byte[] a) {\n-      int i1 = UNSAFE.getIntUnaligned(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET, \/* big-endian *\/ false);\n-      int[] ret = {i1};\n-      return new Object[]{ret};\n+    static int test1b(byte[] a) {\n+      return UNSAFE.getIntUnaligned(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET, \/* big-endian *\/ false);\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+        },\n+        applyIf = {\"UseUnalignedAccesses\", \"true\"},\n+        applyIfPlatformAnd = {\"little-endian\", \"true\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I,  \"1\"\n+        },\n+        applyIf = {\"UseUnalignedAccesses\", \"true\"},\n+        applyIfPlatform = {\"big-endian\", \"true\"})\n+    static int test1c(byte[] a) {\n+      return (UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 0) & 0xff)        |\n+            ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 1) & 0xff) << 8 ) |\n+            ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 2) & 0xff) << 16) |\n+            ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 3) & 0xff) << 24);\n@@ -320,1 +313,8 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+        },\n@@ -323,2 +323,9 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n-                  IRNode.REVERSE_BYTES_I, \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I,  \"1\"\n+        },\n@@ -327,7 +334,34 @@\n-    static Object[] test1c(byte[] a) {\n-      int i1 =  (UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 0) & 0xff)        |\n-               ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 1) & 0xff) << 8 ) |\n-               ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 2) & 0xff) << 16) |\n-               ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 3) & 0xff) << 24);\n-      int[] ret = {i1};\n-      return new Object[]{ret};\n+    static int test1d(byte[] a) {\n+      return ((a[3] & 0xff) << 24) |\n+              (a[0] & 0xff)        |\n+             ((a[2] & 0xff) << 16) |\n+             ((a[1] & 0xff) << 8 );\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+        },\n+        applyIf = {\"UseUnalignedAccesses\", \"true\"},\n+        applyIfPlatformAnd = {\"little-endian\", \"true\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I,  \"1\"\n+        },\n+        applyIf = {\"UseUnalignedAccesses\", \"true\"},\n+        applyIfPlatform = {\"big-endian\", \"true\"})\n+    static int test1e(byte[] a) {\n+      return ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 1) & 0xff) << 8 ) |\n+             ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 3) & 0xff) << 24) |\n+             ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 2) & 0xff) << 16) |\n+              (UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 0) & 0xff);\n@@ -340,11 +374,9 @@\n-    static Object[] test2R(byte[] a) {\n-      long i1 =  ((long)(a[0] & 0xff)       )|\n-                (((long)(a[1] & 0xff)) << 8 )|\n-                (((long)(a[2] & 0xff)) << 16)|\n-                (((long)(a[3] & 0xff)) << 24)|\n-                (((long)(a[4] & 0xff)) << 32)|\n-                (((long)(a[5] & 0xff)) << 40)|\n-                (((long)(a[6] & 0xff)) << 48)|\n-                (((long)(a[7] & 0xff)) << 56);\n-      long[] ret = {i1};\n-      return new Object[]{ret};\n+    static long test2R(byte[] a) {\n+      return ((long)(a[0] & 0xff)       )|\n+            (((long)(a[1] & 0xff)) << 8 )|\n+            (((long)(a[2] & 0xff)) << 16)|\n+            (((long)(a[3] & 0xff)) << 24)|\n+            (((long)(a[4] & 0xff)) << 32)|\n+            (((long)(a[5] & 0xff)) << 40)|\n+            (((long)(a[6] & 0xff)) << 48)|\n+            (((long)(a[7] & 0xff)) << 56);\n@@ -354,1 +386,8 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+        },\n@@ -357,2 +396,9 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n-                  IRNode.REVERSE_BYTES_L, \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.REVERSE_BYTES_L, \"1\"\n+        },\n@@ -361,11 +407,9 @@\n-    static Object[] test2a(byte[] a) {\n-      long i1 =  ((long)(a[0] & 0xff)       )|\n-                (((long)(a[1] & 0xff)) << 8 )|\n-                (((long)(a[2] & 0xff)) << 16)|\n-                (((long)(a[3] & 0xff)) << 24)|\n-                (((long)(a[4] & 0xff)) << 32)|\n-                (((long)(a[5] & 0xff)) << 40)|\n-                (((long)(a[6] & 0xff)) << 48)|\n-                (((long)(a[7] & 0xff)) << 56);\n-      long[] ret = {i1};\n-      return new Object[]{ret};\n+    static long test2a(byte[] a) {\n+      return ((long)(a[0] & 0xff)       )|\n+            (((long)(a[1] & 0xff)) << 8 )|\n+            (((long)(a[2] & 0xff)) << 16)|\n+            (((long)(a[3] & 0xff)) << 24)|\n+            (((long)(a[4] & 0xff)) << 32)|\n+            (((long)(a[5] & 0xff)) << 40)|\n+            (((long)(a[6] & 0xff)) << 48)|\n+            (((long)(a[7] & 0xff)) << 56);\n@@ -375,1 +419,8 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+        },\n@@ -377,4 +428,2 @@\n-    static Object[] test2b(byte[] a) {\n-      long i1 = UNSAFE.getLongUnaligned(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET, \/* big-endian *\/ false);\n-      long[] ret = {i1};\n-      return new Object[]{ret};\n+    static long test2b(byte[] a) {\n+      return UNSAFE.getLongUnaligned(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET, \/* big-endian *\/ false);\n@@ -384,1 +433,8 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+        },\n@@ -387,2 +443,9 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n-                  IRNode.REVERSE_BYTES_L, \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.REVERSE_BYTES_L, \"1\"\n+        },\n@@ -391,11 +454,75 @@\n-    static Object[] test2c(byte[] a) {\n-      long i1 = ((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 0) & 0xff)       )|\n-               (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 1) & 0xff)) << 8 )|\n-               (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 2) & 0xff)) << 16)|\n-               (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 3) & 0xff)) << 24)|\n-               (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 4) & 0xff)) << 32)|\n-               (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 5) & 0xff)) << 40)|\n-               (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 6) & 0xff)) << 48)|\n-               (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 7) & 0xff)) << 56);\n-      long[] ret = {i1};\n-      return new Object[]{ret};\n+    static long test2c(byte[] a) {\n+      return ((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 0) & 0xff)       )|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 1) & 0xff)) << 8 )|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 2) & 0xff)) << 16)|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 3) & 0xff)) << 24)|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 4) & 0xff)) << 32)|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 5) & 0xff)) << 40)|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 6) & 0xff)) << 48)|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 7) & 0xff)) << 56);\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+        },\n+        applyIf = {\"UseUnalignedAccesses\", \"true\"},\n+        applyIfPlatformAnd = {\"little-endian\", \"true\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.REVERSE_BYTES_L, \"1\"\n+        },\n+        applyIf = {\"UseUnalignedAccesses\", \"true\"},\n+        applyIfPlatformAnd = {\"big-endian\", \"true\"})\n+    static long test2d(byte[] a) {\n+      return (((long)(a[3] & 0xff)) << 24)|\n+             (((long)(a[6] & 0xff)) << 48)|\n+             (((long)(a[2] & 0xff)) << 16)|\n+             (((long)(a[1] & 0xff)) << 8 )|\n+             (((long)(a[4] & 0xff)) << 32)|\n+              ((long)(a[0] & 0xff)       )|\n+             (((long)(a[5] & 0xff)) << 40)|\n+             (((long)(a[7] & 0xff)) << 56);\n+    }\n+\n+    @Test\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+        },\n+        applyIf = {\"UseUnalignedAccesses\", \"true\"},\n+        applyIfPlatformAnd = {\"little-endian\", \"true\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.REVERSE_BYTES_L, \"1\"\n+        },\n+        applyIf = {\"UseUnalignedAccesses\", \"true\"},\n+        applyIfPlatform = {\"big-endian\", \"true\"})\n+    static long test2e(byte[] a) {\n+      return ((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 0) & 0xff)       )|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 7) & 0xff)) << 56)|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 3) & 0xff)) << 24)|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 5) & 0xff)) << 40)|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 4) & 0xff)) << 32)|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 2) & 0xff)) << 16)|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 6) & 0xff)) << 48)|\n+            (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 1) & 0xff)) << 8 );\n@@ -408,7 +535,5 @@\n-    static Object[] test3R(byte[] a) {\n-      int i1 = ((a[0] & 0xff) << 24) |\n-               ((a[1] & 0xff) << 16) |\n-               ((a[2] & 0xff) <<  8) |\n-                (a[3] & 0xff);\n-      int[] ret = {i1};\n-      return new Object[]{ret};\n+    static int test3R(byte[] a) {\n+      return ((a[0] & 0xff) << 24) |\n+             ((a[1] & 0xff) << 16) |\n+             ((a[2] & 0xff) <<  8) |\n+              (a[3] & 0xff);\n@@ -418,2 +543,9 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n-                  IRNode.REVERSE_BYTES_I, \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I, \"1\"\n+        },\n@@ -421,2 +553,32 @@\n-        applyIfPlatformAnd = {\"little-endian\", \"true\"})\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+        applyIfPlatformAnd = {\"little-endian\", \"true\", \"riscv64\", \"false\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I, \"1\"\n+        },\n+        applyIfPlatform   = {\"riscv64\", \"true\"},\n+        applyIfAnd = {\"UseUnalignedAccesses\", \"true\", \"UseZbb\", \"true\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"3\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I, \"0\"\n+        },\n+        applyIfPlatform   = {\"riscv64\", \"true\"},\n+        applyIfAnd = {\"UseUnalignedAccesses\", \"true\", \"UseZbb\", \"false\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I, \"0\"\n+        },\n@@ -425,7 +587,5 @@\n-    static Object[] test3a(byte[] a) {\n-      int i1 = ((a[0] & 0xff) << 24) |\n-               ((a[1] & 0xff) << 16) |\n-               ((a[2] & 0xff) <<  8) |\n-                (a[3] & 0xff);\n-      int[] ret = {i1};\n-      return new Object[]{ret};\n+    static int test3a(byte[] a) {\n+      return ((a[0] & 0xff) << 24) |\n+             ((a[1] & 0xff) << 16) |\n+             ((a[2] & 0xff) <<  8) |\n+              (a[3] & 0xff);\n@@ -435,1 +595,8 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\"\n+        },\n@@ -437,4 +604,2 @@\n-    static Object[] test3b(byte[] a) {\n-      int i1 = UNSAFE.getIntUnaligned(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET, \/* big-endian *\/ true);\n-      int[] ret = {i1};\n-      return new Object[]{ret};\n+    static int test3b(byte[] a) {\n+      return UNSAFE.getIntUnaligned(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET, \/* big-endian *\/ true);\n@@ -444,2 +609,9 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n-                  IRNode.REVERSE_BYTES_I, \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I, \"1\"\n+        },\n@@ -447,2 +619,32 @@\n-        applyIfPlatformAnd = {\"little-endian\", \"true\"})\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+        applyIfPlatformAnd = {\"little-endian\", \"true\", \"riscv64\", \"false\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I, \"1\"\n+        },\n+        applyIfPlatform   = {\"riscv64\", \"true\"},\n+        applyIfAnd = {\"UseUnalignedAccesses\", \"true\", \"UseZbb\", \"true\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"3\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I, \"0\"\n+        },\n+        applyIfPlatform   = {\"riscv64\", \"true\"},\n+        applyIfAnd = {\"UseUnalignedAccesses\", \"true\", \"UseZbb\", \"false\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_I, \"0\"\n+        },\n@@ -451,7 +653,5 @@\n-    static Object[] test3c(byte[] a) {\n-      int i1 = ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 0) & 0xff) << 24) |\n-               ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 1) & 0xff) << 16) |\n-               ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 2) & 0xff) <<  8) |\n-                (UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 3) & 0xff);\n-      int[] ret = {i1};\n-      return new Object[]{ret};\n+    static int test3c(byte[] a) {\n+      return ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 0) & 0xff) << 24) |\n+             ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 1) & 0xff) << 16) |\n+             ((UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 2) & 0xff) <<  8) |\n+              (UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 3) & 0xff);\n@@ -464,11 +664,9 @@\n-    static Object[] test4R(byte[] a) {\n-      long i1 = (((long)(a[0] & 0xff)) << 56)|\n-                (((long)(a[1] & 0xff)) << 48)|\n-                (((long)(a[2] & 0xff)) << 40)|\n-                (((long)(a[3] & 0xff)) << 32)|\n-                (((long)(a[4] & 0xff)) << 24)|\n-                (((long)(a[5] & 0xff)) << 16)|\n-                (((long)(a[6] & 0xff)) <<  8)|\n-                 ((long)(a[7] & 0xff));\n-      long[] ret = {i1};\n-      return new Object[]{ret};\n+    static long test4R(byte[] a) {\n+      return (((long)(a[0] & 0xff)) << 56)|\n+             (((long)(a[1] & 0xff)) << 48)|\n+             (((long)(a[2] & 0xff)) << 40)|\n+             (((long)(a[3] & 0xff)) << 32)|\n+             (((long)(a[4] & 0xff)) << 24)|\n+             (((long)(a[5] & 0xff)) << 16)|\n+             (((long)(a[6] & 0xff)) <<  8)|\n+              ((long)(a[7] & 0xff));\n@@ -478,2 +676,9 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n-                  IRNode.REVERSE_BYTES_L, \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.REVERSE_BYTES_L, \"1\"\n+        },\n@@ -481,2 +686,32 @@\n-        applyIfPlatformAnd = {\"little-endian\", \"true\"})\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+        applyIfPlatformAnd = {\"little-endian\", \"true\", \"riscv64\", \"false\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.REVERSE_BYTES_L, \"1\"\n+        },\n+        applyIfPlatform   = {\"riscv64\", \"true\"},\n+        applyIfAnd = {\"UseUnalignedAccesses\", \"true\", \"UseZbb\", \"true\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"8\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_L, \"0\"\n+        },\n+        applyIfPlatform   = {\"riscv64\", \"true\"},\n+        applyIfAnd = {\"UseUnalignedAccesses\", \"true\", \"UseZbb\", \"false\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.REVERSE_BYTES_L, \"0\"\n+        },\n@@ -484,12 +719,10 @@\n-        applyIfPlatformAnd = {\"big-endian\", \"true\"})\n-    static Object[] test4a(byte[] a) {\n-      long i1 = (((long)(a[0] & 0xff)) << 56)|\n-                (((long)(a[1] & 0xff)) << 48)|\n-                (((long)(a[2] & 0xff)) << 40)|\n-                (((long)(a[3] & 0xff)) << 32)|\n-                (((long)(a[4] & 0xff)) << 24)|\n-                (((long)(a[5] & 0xff)) << 16)|\n-                (((long)(a[6] & 0xff)) <<  8)|\n-                 ((long)(a[7] & 0xff));\n-      long[] ret = {i1};\n-      return new Object[]{ret};\n+        applyIfPlatform = {\"big-endian\", \"true\"})\n+    static long test4a(byte[] a) {\n+      return (((long)(a[0] & 0xff)) << 56)|\n+             (((long)(a[1] & 0xff)) << 48)|\n+             (((long)(a[2] & 0xff)) << 40)|\n+             (((long)(a[3] & 0xff)) << 32)|\n+             (((long)(a[4] & 0xff)) << 24)|\n+             (((long)(a[5] & 0xff)) << 16)|\n+             (((long)(a[6] & 0xff)) <<  8)|\n+              ((long)(a[7] & 0xff));\n@@ -499,6 +732,10 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n-        applyIf = {\"UseUnalignedAccesses\", \"true\"})\n-    static Object[] test4b(byte[] a) {\n-      long i1 = UNSAFE.getLongUnaligned(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET, \/* big-endian *\/ true);\n-      long[] ret = {i1};\n-      return new Object[]{ret};\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"\n+        })\n+    static long test4b(byte[] a) {\n+      return UNSAFE.getLongUnaligned(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET, \/* big-endian *\/ true);\n@@ -508,2 +745,9 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n-                  IRNode.REVERSE_BYTES_L, \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.REVERSE_BYTES_L, \"1\"\n+        },\n@@ -511,2 +755,32 @@\n-        applyIfPlatformAnd = {\"little-endian\", \"true\"})\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+        applyIfPlatformAnd = {\"little-endian\", \"true\", \"riscv64\", \"false\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.REVERSE_BYTES_L, \"1\"\n+        },\n+        applyIfPlatform   = {\"riscv64\", \"true\"},\n+        applyIfAnd = {\"UseUnalignedAccesses\", \"true\", \"UseZbb\", \"true\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"8\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.REVERSE_BYTES_L, \"0\"\n+        },\n+        applyIfPlatform   = {\"riscv64\", \"true\"},\n+        applyIfAnd = {\"UseUnalignedAccesses\", \"true\", \"UseZbb\", \"false\"})\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_I_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.REVERSE_BYTES_L, \"0\"\n+        },\n@@ -515,11 +789,9 @@\n-    static Object[] test4c(byte[] a) {\n-      long i1 = (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 0) & 0xff)) << 56)|\n-                (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 1) & 0xff)) << 48)|\n-                (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 2) & 0xff)) << 40)|\n-                (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 3) & 0xff)) << 32)|\n-                (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 4) & 0xff)) << 24)|\n-                (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 5) & 0xff)) << 16)|\n-                (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 6) & 0xff)) <<  8)|\n-                 ((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 7) & 0xff));\n-      long[] ret = {i1};\n-      return new Object[]{ret};\n+    static long test4c(byte[] a) {\n+      return (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 0) & 0xff)) << 56)|\n+             (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 1) & 0xff)) << 48)|\n+             (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 2) & 0xff)) << 40)|\n+             (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 3) & 0xff)) << 32)|\n+             (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 4) & 0xff)) << 24)|\n+             (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 5) & 0xff)) << 16)|\n+             (((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 6) & 0xff)) <<  8)|\n+              ((long)(UNSAFE.getByte(a, UNSAFE.ARRAY_BYTE_BASE_OFFSET + 7) & 0xff));\n@@ -532,1 +804,1 @@\n-    static Object[] test5R(char[] a) {\n+    static int[] test5R(char[] a) {\n@@ -537,2 +809,1 @@\n-      int[] ret = {i1, i2};\n-      return new Object[]{ret};\n+      return new int[]{i1, i2};\n@@ -542,1 +813,8 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"2\",\n+          IRNode.LOAD_I_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\"\n+        },\n@@ -544,1 +822,1 @@\n-    static Object[] test5a(char[] a) {\n+    static int[] test5a(char[] a) {\n@@ -550,2 +828,1 @@\n-      int[] ret = {i1, i2};\n-      return new Object[]{ret};\n+      return new int[]{i1, i2};\n@@ -555,1 +832,8 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"2\",\n+          IRNode.LOAD_I_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\"\n+        },\n@@ -557,1 +841,1 @@\n-    static Object[] test5b(char[] a) {\n+    static int[] test5b(char[] a) {\n@@ -563,2 +847,1 @@\n-      int[] ret = {i1,i2};\n-      return new Object[]{ret};\n+      return new int[]{i1, i2};\n@@ -571,1 +854,1 @@\n-    static Object[] test6R(char[] a) {\n+    static long[] test6R(char[] a) {\n@@ -580,2 +863,1 @@\n-      long[] ret = {i1, i2};\n-      return new Object[]{ret};\n+      return new long[] {i1, i2};\n@@ -585,1 +867,8 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"4\",\n+          IRNode.LOAD_I_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"\n+        },\n@@ -587,1 +876,1 @@\n-    static Object[] test6a(char[] a) {\n+    static long[] test6a(char[] a) {\n@@ -597,2 +886,1 @@\n-      long[] ret = {i1, i2};\n-      return new Object[]{ret};\n+      return new long[] {i1, i2};\n@@ -602,1 +890,8 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"4\",\n+          IRNode.LOAD_I_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"char\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"\n+        },\n@@ -604,1 +899,1 @@\n-    static Object[] test6b(char[] a) {\n+    static long[] test6b(char[] a) {\n@@ -614,2 +909,1 @@\n-      long[] ret = {i1,i2};\n-      return new Object[]{ret};\n+      return new long[] {i1, i2};\n@@ -622,1 +916,1 @@\n-    static Object[] test7R(short[] a) {\n+    static int[] test7R(short[] a) {\n@@ -627,2 +921,1 @@\n-      int[] ret = {i1, i2};\n-      return new Object[]{ret};\n+      return new int[] {i1, i2};\n@@ -632,1 +925,8 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_US_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_I_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\"\n+        },\n@@ -634,1 +934,1 @@\n-    static Object[] test7a(short[] a) {\n+    static int[] test7a(short[] a) {\n@@ -640,2 +940,1 @@\n-      int[] ret = {i1, i2};\n-      return new Object[]{ret};\n+      return new int[] {i1, i2};\n@@ -645,1 +944,8 @@\n-    @IR(counts = {IRNode.LOAD_I_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_US_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_I_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\",\n+          IRNode.LOAD_L_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\"\n+        },\n@@ -647,1 +953,1 @@\n-    static Object[] test7b(short[] a) {\n+    static int[] test7b(short[] a) {\n@@ -653,2 +959,1 @@\n-      int[] ret = {i1,i2};\n-      return new Object[]{ret};\n+      return new int[] {i1, i2};\n@@ -661,1 +966,1 @@\n-    static Object[] test8R(short[] a) {\n+    static long[] test8R(short[] a) {\n@@ -670,2 +975,1 @@\n-      long[] ret = {i1, i2};\n-      return new Object[]{ret};\n+      return new long[] {i1, i2};\n@@ -675,1 +979,8 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"4\",\n+          IRNode.LOAD_I_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"\n+        },\n@@ -677,1 +988,1 @@\n-    static Object[] test8a(short[] a) {\n+    static long[] test8a(short[] a) {\n@@ -687,2 +998,1 @@\n-      long[] ret = {i1, i2};\n-      return new Object[]{ret};\n+      return new long[] {i1, i2};\n@@ -692,1 +1002,8 @@\n-    @IR(counts = {IRNode.LOAD_L_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"},\n+    @IR(counts = {\n+          IRNode.LOAD_B_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_UB_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_S_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_US_OF_CLASS, \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"4\",\n+          IRNode.LOAD_I_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n+          IRNode.LOAD_L_OF_CLASS,  \"short\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"1\"\n+        },\n@@ -694,1 +1011,1 @@\n-    static Object[] test8b(short[] a) {\n+    static long[] test8b(short[] a) {\n@@ -704,2 +1021,1 @@\n-      long[] ret = {i1,i2};\n-      return new Object[]{ret};\n+      return new long[] {i1, i2};\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestMergeLoads.java","additions":608,"deletions":292,"binary":false,"changes":900,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-    AFTER_MERGE_STORES(\"After Merge Stores\"),\n+    AFTER_MERGE_MEMOPS(\"After Merge Memops\"),\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/CompilePhase.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-    private static void checkEQ(Object a, Object b, String context) {\n+    public static void checkEQ(Object a, Object b, String context) {\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/verify\/Verify.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}