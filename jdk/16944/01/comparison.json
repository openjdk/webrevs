{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import java.nio.file.FileSystems;\n@@ -286,1 +287,2 @@\n-     * @throws IllegalArgumentException if {@code path} does not point to a valid library\n+     * @throws IllegalArgumentException if {@code path} is not in the default file system\n+     *         or if {@code path} does not point to a valid library\n@@ -295,0 +297,3 @@\n+        if (!(path.getFileSystem() == FileSystems.getDefault())) {\n+            throw new IllegalArgumentException(\"Path not in default file system: \" + path);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/SymbolLookup.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+import java.io.IOException;\n@@ -29,0 +30,4 @@\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n@@ -30,0 +35,1 @@\n+import java.util.HashMap;\n@@ -94,0 +100,30 @@\n+    @Test\n+    void testLoadLibraryNonDefaultFileSystem() throws URISyntaxException, IOException {\n+        try (FileSystem customFs = fsFromJarOfClass(org.testng.annotations.Test.class)) {\n+            try (Arena arena = Arena.ofConfined()) {\n+                Path p = customFs.getPath(\".\");\n+                try {\n+                    SymbolLookup.libraryLookup(p, arena);\n+                } catch (IllegalArgumentException iae) {\n+                    assertTrue(iae.getMessage().contains(\"not in default file system\"));\n+                }\n+            }\n+        }\n+    }\n+\n+    private static FileSystem fsFromJarOfClass(Class<?> clazz) throws URISyntaxException, IOException {\n+        String name = clazz.getName();\n+        final int lastDot = name.lastIndexOf('.');\n+        if (lastDot != -1) {\n+            name = name.substring(lastDot + 1);\n+        }\n+        URI uri = clazz.getResource(name + \".class\").toURI();\n+        if (uri.getScheme().equals(\"jar\")) {\n+            final String[] parts = uri.toString().split(\"!\");\n+            if (parts.length == 2) {\n+                return FileSystems.newFileSystem(URI.create(parts[0]), new HashMap<>());\n+            }\n+        }\n+        throw new AssertionError(\"Unable to create file system from \" + clazz);\n+    }\n+\n","filename":"test\/jdk\/java\/foreign\/LibraryLookupTest.java","additions":36,"deletions":0,"binary":false,"changes":36,"status":"modified"}]}