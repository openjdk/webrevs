{"files":[{"patch":"@@ -29,3 +29,0 @@\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n@@ -133,1 +130,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -135,8 +131,1 @@\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"accessSystemModules\"));\n-            PrivilegedAction<ModuleFinder> pa = SystemModuleFinders::ofSystem;\n-            return AccessController.doPrivileged(pa);\n-        } else {\n-            return SystemModuleFinders.ofSystem();\n-        }\n+        return SystemModuleFinders.ofSystem();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ModuleFinder.java","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -373,8 +373,0 @@\n-\n-            \/\/ when running with a security manager then check that the caller\n-            \/\/ has access to the directory.\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                boolean unused = Files.isDirectory(dir);\n-            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleReferences.java","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -158,3 +156,1 @@\n-        PrivilegedAction<ClassLoader> pa = m::getClassLoader;\n-        @SuppressWarnings(\"removal\")\n-        ClassLoader loader = AccessController.doPrivileged(pa);\n+        ClassLoader loader = m.getClassLoader();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/Modules.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,2 +41,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -211,15 +209,1 @@\n-        ModuleFinder f = ModulePath.of(ModuleBootstrap.patcher(), dir);\n-        return new ModuleFinder() {\n-            @SuppressWarnings(\"removal\")\n-            @Override\n-            public Optional<ModuleReference> find(String name) {\n-                PrivilegedAction<Optional<ModuleReference>> pa = () -> f.find(name);\n-                return AccessController.doPrivileged(pa);\n-            }\n-            @SuppressWarnings(\"removal\")\n-            @Override\n-            public Set<ModuleReference> findAll() {\n-                PrivilegedAction<Set<ModuleReference>> pa = f::findAll;\n-                return AccessController.doPrivileged(pa);\n-            }\n-        };\n+        return ModulePath.of(ModuleBootstrap.patcher(), dir);\n@@ -317,1 +301,1 @@\n-                return new SystemModuleReader(mn, uri);\n+                return new SystemModuleReader(mn);\n@@ -381,2 +365,0 @@\n-     *\n-     * @apiNote This class must be loaded before a security manager is set.\n@@ -399,19 +381,1 @@\n-        \/**\n-         * If there is a security manager set then check permission to\n-         * connect to the run-time image.\n-         *\/\n-        private static void checkPermissionToConnect(URI uri) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                try {\n-                    URLConnection uc = uri.toURL().openConnection();\n-                    sm.checkPermission(uc.getPermission());\n-                } catch (IOException ioe) {\n-                    throw new UncheckedIOException(ioe);\n-                }\n-            }\n-        }\n-\n-        SystemModuleReader(String module, URI uri) {\n-            checkPermissionToConnect(uri);\n+        SystemModuleReader(String module) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/SystemModuleFinders.java","additions":4,"deletions":40,"binary":false,"changes":44,"status":"modified"}]}