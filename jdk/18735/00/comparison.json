{"files":[{"patch":"@@ -823,1 +823,1 @@\n-int os::random() {\n+int os::random(volatile unsigned* seedptr) {\n@@ -826,3 +826,3 @@\n-    unsigned int seed = _rand_seed;\n-    unsigned int rand = next_random(seed);\n-    if (Atomic::cmpxchg(&_rand_seed, seed, rand, memory_order_relaxed) == seed) {\n+    unsigned seed = *seedptr;\n+    unsigned rand = next_random(seed);\n+    if (Atomic::cmpxchg(seedptr, seed, rand, memory_order_relaxed) == seed) {\n@@ -834,0 +834,4 @@\n+int os::random() {\n+  return os::random(&_rand_seed);\n+}\n+\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -927,1 +927,4 @@\n-  static int random();                     \/\/ return 32bit pseudorandom number\n+  static int random();                            \/\/ return 32bit pseudorandom number. Uses CAS on internal static seed.\n+  static void init_random(unsigned int initval);  \/\/ initialize internal static seed\n+\n+  static int random(volatile unsigned* seedptr);  \/\/ return 32bit pseudorandom number. Uses CAS on given seed location.\n@@ -929,1 +932,0 @@\n-  static void init_random(unsigned int initval);    \/\/ initialize random sequence\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -60,0 +60,2 @@\n+volatile unsigned Thread::_hashseed = 0;\n+\n@@ -106,1 +108,2 @@\n-  _hashStateX = os::random();\n+  assert(_hashseed != 0, \"ihash seed must be initialized before the first thread starts.\");\n+  _hashStateX = os::random(&_hashseed);\n@@ -604,0 +607,5 @@\n+\n+void Thread::init_hashseed(unsigned seed) {\n+  assert(_hashseed == 0, \"call just once\");\n+  _hashseed = seed;\n+}\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -625,0 +625,6 @@\n+ private:\n+  static volatile unsigned _hashseed;\n+\n+ public:\n+  static void init_hashseed(unsigned seed);\n+\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -511,0 +511,7 @@\n+  \/\/ Initialize ihash seed\n+  const unsigned seed =\n+      CDSConfig::is_dumping_archive() ?\n+          0x12345678 : \/\/ when dumping, use a constant seed to keep archive generation reproducible\n+          (unsigned) MAX2(1, os::random());\n+  Thread::init_hashseed(seed);\n+\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}