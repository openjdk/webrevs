{"files":[{"patch":"@@ -823,1 +823,1 @@\n-int os::random(volatile unsigned* seedptr) {\n+int os::random() {\n@@ -826,3 +826,3 @@\n-    unsigned seed = *seedptr;\n-    unsigned rand = next_random(seed);\n-    if (Atomic::cmpxchg(seedptr, seed, rand, memory_order_relaxed) == seed) {\n+    unsigned int seed = _rand_seed;\n+    unsigned int rand = next_random(seed);\n+    if (Atomic::cmpxchg(&_rand_seed, seed, rand, memory_order_relaxed) == seed) {\n@@ -834,4 +834,0 @@\n-int os::random() {\n-  return os::random(&_rand_seed);\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -927,4 +927,1 @@\n-  static int random();                            \/\/ return 32bit pseudorandom number. Uses CAS on internal static seed.\n-  static void init_random(unsigned int initval);  \/\/ initialize internal static seed\n-\n-  static int random(volatile unsigned* seedptr);  \/\/ return 32bit pseudorandom number. Uses CAS on given seed location.\n+  static int random();                     \/\/ return 32bit pseudorandom number\n@@ -932,0 +929,1 @@\n+  static void init_random(unsigned int initval);    \/\/ initialize random sequence\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -984,9 +984,1 @@\n-    unsigned t = current->_hashStateX;\n-    t ^= (t << 11);\n-    current->_hashStateX = current->_hashStateY;\n-    current->_hashStateY = current->_hashStateZ;\n-    current->_hashStateZ = current->_hashStateW;\n-    unsigned v = current->_hashStateW;\n-    v = (v ^ (v >> 19)) ^ (t ^ (t >> 8));\n-    current->_hashStateW = v;\n-    value = v;\n+    value = current->_hashState.next_random();\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":1,"deletions":9,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -60,2 +61,0 @@\n-volatile unsigned Thread::_hashseed = 0;\n-\n@@ -107,7 +106,0 @@\n-  \/\/ thread-specific hashCode stream generator state - Marsaglia shift-xor form\n-  assert(_hashseed != 0, \"ihash seed must be initialized before the first thread starts.\");\n-  _hashStateX = os::random(&_hashseed);\n-  _hashStateY = 842502087;\n-  _hashStateZ = 0x8767;    \/\/ (int)(3579807591LL & 0xffff) ;\n-  _hashStateW = 273326509;\n-\n@@ -608,3 +600,22 @@\n-void Thread::init_hashseed(unsigned seed) {\n-  assert(_hashseed == 0, \"call just once\");\n-  _hashseed = seed;\n+Thread::MarsagliaShiftRNG::MarsagliaShiftRNG() :\n+  _W(0), _X(0), _Y(0), _Z(0), _inited(false) {}\n+\n+unsigned Thread::MarsagliaShiftRNG::next_random() {\n+  if (!_inited) {\n+    _inited = true;\n+    _X = CDSConfig::is_dumping_archive() ?\n+         0x12345678 : \/\/ when dumping, use a constant seed to keep archive generation reproducible\n+         (unsigned) MAX2(1, os::random());\n+    _Y = 842502087;\n+    _Z = 0x8767;    \/\/ (int)(3579807591LL & 0xffff) ;\n+    _W = 273326509;\n+  }\n+  unsigned t = _X;\n+  t ^= (t << 11);\n+  _X = _Y;\n+  _Y = _Z;\n+  _Z = _W;\n+  unsigned v = _W;\n+  v = (v ^ (v >> 19)) ^ (t ^ (t >> 8));\n+  _W = v;\n+  return v;\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":23,"deletions":12,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -620,10 +620,9 @@\n-  jint _hashStateW;                           \/\/ Marsaglia Shift-XOR thread-local RNG\n-  jint _hashStateX;                           \/\/ thread-specific hashCode generator state\n-  jint _hashStateY;\n-  jint _hashStateZ;\n-\n- private:\n-  static volatile unsigned _hashseed;\n-\n- public:\n-  static void init_hashseed(unsigned seed);\n+  \/\/ Marsaglia Shift-XOR thread-local RNG for identity_hash\n+  class MarsagliaShiftRNG {\n+    jint _W, _X, _Y, _Z;\n+    bool _inited;\n+  public:\n+    MarsagliaShiftRNG();\n+    unsigned next_random();\n+  };\n+  MarsagliaShiftRNG _hashState;\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -511,7 +511,0 @@\n-  \/\/ Initialize ihash seed\n-  const unsigned seed =\n-      CDSConfig::is_dumping_archive() ?\n-          0x12345678 : \/\/ when dumping, use a constant seed to keep archive generation reproducible\n-          (unsigned) MAX2(1, os::random());\n-  Thread::init_hashseed(seed);\n-\n","filename":"src\/hotspot\/share\/runtime\/threads.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}