{"files":[{"patch":"@@ -533,4 +533,2 @@\n-  \/\/ in the shared heap. This also has the side effect of pre-initializing the\n-  \/\/ identity_hash for all shared objects, so they are less likely to be written\n-  \/\/ into during run time, increasing the potential of memory sharing.\n-  if (src_obj != nullptr) {\n+  \/\/ in the shared heap.\n+  if (src_obj != nullptr && !src_obj->fast_no_hash_check()) {\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -281,6 +281,0 @@\n-\n-    \/\/ The archived objects are discovered in a predictable order. Compute\n-    \/\/ their identity_hash() as soon as we see them. This ensures that the\n-    \/\/ the identity_hash in the object header will have a predictable value,\n-    \/\/ making the archive reproducible.\n-    obj->identity_hash();\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -944,0 +945,13 @@\n+#ifdef ASSERT\n+static Thread* volatile cds_dump_java_thread = nullptr;\n+static bool runs_on_one_thread_only () {\n+  Thread* const t = Atomic::load(&cds_dump_java_thread);\n+  Thread* const cur = Thread::current();\n+  if (t == nullptr) {\n+    Atomic::cmpxchg(&cds_dump_java_thread, t, cur);\n+    return true;\n+  }\n+  return t == cur;\n+}\n+#endif\n+\n@@ -993,0 +1007,6 @@\n+#ifdef ASSERT\n+    \/\/ Verify that during CDS dumping, only a single thread\n+    \/\/ ever calls ihash\n+    assert(!CDSConfig::is_dumping_archive() || runs_on_one_thread_only(),\n+        \"Only one thread should generate ihash during CDS dumps\");\n+#endif\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+#include \"cds\/cdsConfig.hpp\"\n@@ -106,1 +107,4 @@\n-  _hashStateX = os::random();\n+  \/\/ If we are dumping, keep ihashes constant. Note that during dumping we only\n+  \/\/ ever run one java thread, and no other thread should generate ihashes either,\n+  \/\/ so using a constant seed should work fine.\n+  _hashStateX = CDSConfig::is_dumping_archive() ? 0x12345678 : os::random();\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}