{"files":[{"patch":"@@ -316,1 +316,1 @@\n-            \/\/ reset current status byte to 0 (invalid value).\n+            \/\/ reset current running status byte to 0 (invalid value).\n@@ -319,1 +319,1 @@\n-            int status = 0;\n+            int runningStatus = 0;\n@@ -336,0 +336,1 @@\n+                int status;\n@@ -338,0 +339,5 @@\n+\n+                    \/\/ update running status (only for channel messages)\n+                    if ((status & 0xF0) != 0xF0) {\n+                        runningStatus = status;\n+                    }\n@@ -339,1 +345,2 @@\n-                    data1 = byteValue;\n+                    status = runningStatus;\n+                    data1  = byteValue;\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/media\/sound\/StandardMidiFileReader.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.ByteArrayInputStream;\n+\n+import javax.sound.midi.MidiSystem;\n+import javax.sound.midi.Sequence;\n+import javax.sound.midi.Track;\n+\n+\/**\n+ * @test\n+ * @bug 8319598\n+ * @summary SMFParser bug with running status, interrupted by Meta or SysEx messages\n+ *\/\n+public class SMFInterruptedRunningStatus {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        byte[][] files = new byte[][] {SMF_1, SMF_2, SMF_3};\n+        for (int i = 0; i < files.length; i++) {\n+            Sequence seq = MidiSystem.getSequence(new ByteArrayInputStream(files[i]));\n+            testSequence(seq, i + 1);\n+        }\n+\n+        \/\/ no exception thrown, all files have been parsed correctly\n+        System.out.println(\"Test passed\");\n+    }\n+\n+    private static void testSequence(Sequence seq, int fileNumber) {\n+\n+        \/\/ check number of tracks and number of events\n+        Track[] tracks = seq.getTracks();\n+        if (1 != tracks.length) {\n+            throw new RuntimeException(\"file number \" + fileNumber + \" fails (incorrect number of tracks: \" + tracks.length + \")\");\n+        }\n+        Track track = tracks[0];\n+        if (7 != track.size()) {\n+            throw new RuntimeException(\"file number \" + fileNumber + \" fails (incorrect number of events: \" + track.size() + \")\");\n+        }\n+\n+        \/\/ check status byte of each message\n+        int[] expectedStatusBytes = new int[] {0x90, 0xFF, 0x90, 0x90, 0x90, 0xFF, 0xFF};\n+        for (int i = 0; i < expectedStatusBytes.length; i++) {\n+            int expected = expectedStatusBytes[i];\n+            if (expected != track.get(i).getMessage().getStatus()) {\n+                throw new RuntimeException(\"file number \" + fileNumber + \" fails (wrong status byte in event \" + i + \")\");\n+            }\n+        }\n+    }\n+\n+    \/\/ MIDI file without running status - should work equally before and after the bugfix\n+    private static final byte[] SMF_1 = {\n+        0x4D, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x01, 0x00, (byte) 0x80, \/\/ file header\n+        0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x24,                                            \/\/ track header\n+        0x00, (byte) 0x90, 0x3C, 0x7F,                         \/\/ delta time + Note-ON (C)\n+        0x40, (byte) 0xFF, 0x01, 0x04, 0x54, 0x65, 0x73, 0x74, \/\/ delta time + META message (text)\n+        0x20, (byte) 0x90, 0x3C, 0x00,                         \/\/ delta time + Note-OFF (C)\n+        0x20, (byte) 0x90, 0x3E, 0x7F,                         \/\/ delta time + Note-ON (D)\n+        0x60, (byte) 0x90, 0x3E, 0x00,                         \/\/ delta time + Note-OFF (D)\n+        0x20, (byte) 0xFF, 0x01, 0x04, 0x54, 0x65, 0x73, 0x74, \/\/ delta time + META message (text)\n+        0x00, (byte) 0xFF, 0x2F, 0x00                          \/\/ delta time + META message (end of track)\n+    };\n+\n+    \/\/ MIDI file with running status, interrupted by a META message - failed before the bugfix\n+    private static final byte[] SMF_2 = {\n+        0x4D, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x01, 0x00, (byte) 0x80, \/\/ file header\n+        0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x21,                                            \/\/ track header\n+        0x00, (byte) 0x90, 0x3C, 0x7F,                         \/\/ delta time + Note-ON (C)\n+        0x40, (byte) 0xFF, 0x01, 0x04, 0x54, 0x65, 0x73, 0x74, \/\/ delta time + META message (interruptor)\n+        0x20,              0x3C, 0x00,                         \/\/ delta time + Note-OFF (C) - running status\n+        0x20,              0x3E, 0x7F,                         \/\/ delta time + Note-ON (D) - running status\n+        0x60,              0x3E, 0x00,                         \/\/ delta time + Note-OFF (D) - running status\n+        0x20, (byte) 0xFF, 0x01, 0x04, 0x54, 0x65, 0x73, 0x74, \/\/ delta time + META message (text)\n+        0x00, (byte) 0xFF, 0x2F, 0x00                          \/\/ delta time + META message (end of track)\n+    };\n+\n+    \/\/ MIDI file with running status, interrupted by a META message - succeeded before the bugfix\n+    \/\/ but with wrong interpretation of the data\n+    private static final byte[] SMF_3 = {\n+        0x4D, 0x54, 0x68, 0x64, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0x00, 0x01, 0x00, (byte) 0x80, \/\/ file header\n+        0x4D, 0x54, 0x72, 0x6B, 0x00, 0x00, 0x00, 0x21,                                            \/\/ track header\n+        0x00, (byte) 0x90, 0x3C, 0x7F,                         \/\/ delta time + Note-ON (C)\n+        0x40, (byte) 0xFF, 0x01, 0x04, 0x54, 0x65, 0x73, 0x74, \/\/ delta time + META message (interruptor)\n+        0x20,              0x3C, 0x00,                         \/\/ delta time + Note-OFF (C) - running status\n+        0x0D,              0x3E, 0x7F,                         \/\/ delta time + Note-ON (D) - running status\n+        0x60,              0x3E, 0x00,                         \/\/ delta time + Note-OFF (D) - running status\n+        0x20, (byte) 0xFF, 0x01, 0x04, 0x54, 0x65, 0x73, 0x74, \/\/ delta time + META message (text)\n+        0x00, (byte) 0xFF, 0x2F, 0x00                          \/\/ delta time + META message (end of track)\n+    };\n+}\n+\n","filename":"test\/jdk\/javax\/sound\/midi\/File\/SMFInterruptedRunningStatus.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"}]}