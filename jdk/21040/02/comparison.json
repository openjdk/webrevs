{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -320,1 +320,1 @@\n-                argmap.put(\"dcmd.arg.type\", arginfo.getType());\n+                argmap.put(\"dcmd.arg.type\", sanitiseType(arginfo.getType()));\n@@ -338,0 +338,16 @@\n+    \/\/ Type names that will be published in dcmd.arg.type:\n+    private static final String [] publicTypes = new String [] { \"INT\", \"STRING\", \"BOOLEAN\", \"STRING SET\", \"MEMORY SIZE\", \"NANOTIME\" };\n+\n+    private static final String sanitiseType(String typeName) {\n+        \/\/ For any typeName not in the set to be made public, return \"STRING\".\n+        if (typeName == null) {\n+            return null;\n+        }\n+        for (String t : publicTypes) {\n+            if (typeName.equals(t)) {\n+                return t;\n+            }\n+        }\n+        return \"STRING\";\n+    }\n+\n","filename":"src\/jdk.management\/share\/classes\/com\/sun\/management\/internal\/DiagnosticCommandImpl.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug     7150256\n+ * @bug     7150256 8338603\n@@ -71,0 +71,1 @@\n+            int operationFailures = 0;\n@@ -72,1 +73,1 @@\n-                printOperation(opInfo[i]);\n+                operationFailures += printOperation(opInfo[i]);\n@@ -75,0 +76,3 @@\n+            if (operationFailures > 0) {\n+                throw new RuntimeException(\"FAILED.  \" + operationFailures + \" operations found with non-standard parameter types.\");\n+            }\n@@ -86,1 +90,6 @@\n-    static void printOperation(MBeanOperationInfo info) {\n+    \/**\n+     * Print an Operation, and check for any non-standard parameter types.\n+     * Return the number of failed parameters, so the caller can signal to fail the test.\n+     *\/\n+    static int printOperation(MBeanOperationInfo info) {\n+        int failures = 0;\n@@ -103,2 +112,10 @@\n-                        System.out.println(\"\\t\\t\\t\"+desc3.getFieldNames()[k]+\"=\"\n-                                           +desc3.getFieldValue(desc3.getFieldNames()[k]));\n+                        String fieldName3 = desc3.getFieldNames()[k];\n+                        Object fieldValue3 = desc3.getFieldValue(fieldName3);\n+                        System.out.print(\"\\t\\t\\t\" + fieldName3 + \"=\" + fieldValue3);\n+                        if (fieldName3.equals(\"dcmd.arg.type\")) {\n+                            if (!isPublicType((String) fieldValue3)) {\n+                                System.out.print(\"\\t** FAILED ** not a standard type\");\n+                                failures++;\n+                            }\n+                        }\n+                        System.out.println();\n@@ -112,0 +129,17 @@\n+        return failures;\n+    }\n+\n+    \/\/ Knowledge of the implementation-dependent types in DiagnosticCommandImpl, seen by applications\/users\n+    \/\/ (see the DiagnosticCommandMBean Descriptor, field \"dcmd.arg.type\").\n+    private static final String [] publicTypes = new String [] { \"INT\", \"STRING\", \"BOOLEAN\", \"STRING SET\", \"MEMORY SIZE\", \"NANOTIME\" };\n+\n+    private static final boolean isPublicType(String typeName) {\n+        if (typeName == null) {\n+            return false;\n+        }\n+        for (String t : publicTypes) {\n+            if (typeName.equals(t)) {\n+                return true;\n+            }\n+        }\n+        return false;\n","filename":"test\/jdk\/com\/sun\/management\/DiagnosticCommandMBean\/DcmdMBeanTest.java","additions":40,"deletions":6,"binary":false,"changes":46,"status":"modified"}]}