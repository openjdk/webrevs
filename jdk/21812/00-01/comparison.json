{"files":[{"patch":"@@ -1029,1 +1029,2 @@\n-  \/\/ Do a quick check first without taking the lock. The later ones are more expensive.\n+  \/\/ Quick check if we already have enough compiler threads without taking the lock.\n+  \/\/ Numbers may change concurrently, so we read them again after we have the lock.\n@@ -1031,1 +1032,1 @@\n-    old_c2_count = _compilers[1]->num_compiler_threads();\n+    old_c2_count = get_c2_thread_count();\n@@ -1035,1 +1036,1 @@\n-    old_c1_count = _compilers[0]->num_compiler_threads();\n+    old_c1_count = get_c1_thread_count();\n@@ -1040,0 +1041,1 @@\n+  \/\/ Now, we do the more expensive operations.\n@@ -1042,2 +1044,2 @@\n-  size_t available_cc_np  = CodeCache::unallocated_capacity(CodeBlobType::MethodNonProfiled),\n-         available_cc_p   = CodeCache::unallocated_capacity(CodeBlobType::MethodProfiled);\n+  size_t available_cc_np = CodeCache::unallocated_capacity(CodeBlobType::MethodNonProfiled),\n+         available_cc_p  = CodeCache::unallocated_capacity(CodeBlobType::MethodProfiled);\n@@ -1045,1 +1047,1 @@\n-  \/\/ Only do attempt to start additional threads if the lock is free.\n+  \/\/ Only attempt to start additional threads if the lock is free.\n@@ -1049,1 +1051,1 @@\n-    old_c2_count = _compilers[1]->num_compiler_threads();\n+    old_c2_count = get_c2_thread_count();\n@@ -1087,1 +1089,1 @@\n-        if (_compilers[1]->num_compiler_threads() != i) break;\n+        if (get_c2_thread_count() != i) break;\n@@ -1110,1 +1112,1 @@\n-    old_c1_count = _compilers[0]->num_compiler_threads();\n+    old_c1_count = get_c1_thread_count();\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-  int _size;\n+  volatile int _size;\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}