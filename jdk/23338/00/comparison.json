{"files":[{"patch":"@@ -1,130 +0,0 @@\n-\/*\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.util;\n-\n-import jdk.internal.access.JavaLangAccess;\n-import jdk.internal.access.SharedSecrets;\n-import jdk.internal.vm.annotation.Stable;\n-\n-\/**\n- * Digits class for octal digits.\n- *\n- * @since 21\n- *\/\n-public final class OctalDigits {\n-    private static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n-\n-    @Stable\n-    private static final short[] DIGITS;\n-\n-    static {\n-        short[] digits = new short[8 * 8];\n-\n-        for (int i = 0; i < 8; i++) {\n-            short lo = (short) (i + '0');\n-\n-            for (int j = 0; j < 8; j++) {\n-                short hi = (short) ((j + '0') << 8);\n-                digits[(i << 3) + j] = (short) (hi | lo);\n-            }\n-        }\n-\n-        DIGITS = digits;\n-    }\n-\n-    \/**\n-     * Constructor.\n-     *\/\n-    private OctalDigits() {\n-    }\n-\n-    \/**\n-     * Insert digits for long value in buffer from high index to low index.\n-     *\n-     * @param value      value to convert\n-     * @param index      insert point + 1\n-     * @param buffer     byte buffer to copy into\n-     *\n-     * @return the last index used\n-     *\/\n-    public static int getCharsLatin1(long value, int index, byte[] buffer){\n-        while ((value & ~0x3F) != 0) {\n-            int digits = DIGITS[((int) value) & 0x3F];\n-            value >>>= 6;\n-            buffer[--index] = (byte) (digits >> 8);\n-            buffer[--index] = (byte) (digits & 0xFF);\n-        }\n-\n-        int digits = DIGITS[(int) (value & 0x3F)];\n-        buffer[--index] = (byte) (digits >> 8);\n-\n-        if (7 < value) {\n-            buffer[--index] = (byte) (digits & 0xFF);\n-        }\n-\n-        return index;\n-    }\n-\n-\n-    \/**\n-     * This is a variant of {@link OctalDigits#getCharsLatin1(long, int, byte[])}, but for\n-     * UTF-16 coder.\n-     *\n-     * @param value      value to convert\n-     * @param index      insert point + 1\n-     * @param buffer     byte buffer to copy into\n-     *\n-     * @return the last index used\n-     *\/\n-    public static int getCharsUTF16(long value, int index, byte[] buffer){\n-        while ((value & ~0x3F) != 0) {\n-            int pair = (int) DIGITS[((int) value) & 0x3F];\n-            JLA.putCharUTF16(buffer, --index, pair >> 8);\n-            JLA.putCharUTF16(buffer, --index, pair & 0xFF);\n-            value >>>= 6;\n-        }\n-\n-        int digits = DIGITS[(int) (value & 0x3F)];\n-        JLA.putCharUTF16(buffer, --index, digits >> 8);\n-\n-        if (7 < value) {\n-            JLA.putCharUTF16(buffer, --index, digits & 0xFF);\n-        }\n-\n-        return index;\n-    }\n-\n-    \/**\n-     * Calculate the number of digits required to represent the long.\n-     *\n-     * @param value value to convert\n-     *\n-     * @return number of digits\n-     *\/\n-    public static int stringSize(long value) {\n-        return value == 0 ? 1 : ((66 - Long.numberOfLeadingZeros(value)) \/ 3);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/OctalDigits.java","additions":0,"deletions":130,"binary":false,"changes":130,"status":"deleted"}]}