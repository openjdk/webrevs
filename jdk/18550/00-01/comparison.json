{"files":[{"patch":"@@ -0,0 +1,135 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JEditorPane;\n+import javax.swing.text.View;\n+import javax.swing.text.html.CSS;\n+\n+\/*\n+ * @test\n+ * @bug 8326734\n+ * @summary Tests different combinations of setting 'line-through'\n+ * @run main HTMLStrikeOnly\n+ *\/\n+public class HTMLStrikeOnly {\n+    private static final String HTML = \"\"\"\n+            <!DOCTYPE html>\n+            <html lang=\"en\">\n+            <head>\n+                <meta charset=\"UTF-8\">\n+                <title>line-through<\/title>\n+                <style>\n+                    .lineThrough   { text-decoration: line-through }\n+                <\/style>\n+            <\/head>\n+            <body>\n+            <p><s><span style='text-decoration: line-through'>line-through?<\/span><\/s><\/p>\n+            <p><strike><span style='text-decoration: line-through'>line-through?<\/span><\/strike><\/p>\n+            <p><span style='text-decoration: line-through'><s>line-through?<\/s><\/span><\/p>\n+            <p><span style='text-decoration: line-through'><strike>line-through?<\/strike><\/span><\/p>\n+\n+            <p><s><span class=\"lineThrough\">line-through?<\/span><\/s><\/p>\n+            <p><strike><span class=\"lineThrough\">line-through?<\/span><\/strike><\/p>\n+            <p><span class=\"lineThrough\"><s>line-through?<\/s><\/span><\/p>\n+            <p><span class=\"lineThrough\"><strike>line-through?<\/strike><\/span><\/p>\n+\n+            <p style='text-decoration: line-through'><s>line-through?<\/s><\/p>\n+            <p style='text-decoration: line-through'><strike>line-through?<\/strike><\/p>\n+            <p style='text-decoration: line-through'><span style='text-decoration: line-through'>line-through?<\/span><\/p>\n+\n+            <p class=\"lineThrough\"><s>line-through<\/s><\/p>\n+            <p class=\"lineThrough\"><strike>line-through<\/strike><\/p>\n+            <p class=\"lineThrough\"><span style='text-decoration: line-through'>line-through<\/span><\/p>\n+            <p class=\"lineThrough\"><span class=\"lineThrough\">line-through<\/span><\/p>\n+            <\/body>\n+            <\/html>\n+            \"\"\";\n+    public static void main(String[] args) {\n+        final JEditorPane html = new JEditorPane(\"text\/html\", HTML);\n+        html.setEditable(false);\n+\n+        final Dimension size = html.getPreferredSize();\n+        html.setSize(size);\n+\n+        BufferedImage image = new BufferedImage(size.width, size.height,\n+                                                BufferedImage.TYPE_INT_RGB);\n+        Graphics g = image.createGraphics();\n+        \/\/ Paint the editor pane to ensure all views are created\n+        html.paint(g);\n+        g.dispose();\n+\n+        int errorCount = 0;\n+        String firstError = null;\n+\n+        System.out.println(\"----- Views -----\");\n+        final View bodyView = html.getUI()\n+                                  .getRootView(html)\n+                                  .getView(1)\n+                                  .getView(1);\n+        for (int i = 0; i < bodyView.getViewCount(); i++) {\n+            View pView = bodyView.getView(i);\n+            View contentView = getContentView(pView);\n+\n+            String decoration =\n+                    contentView.getAttributes()\n+                               .getAttribute(CSS.Attribute.TEXT_DECORATION)\n+                               .toString();\n+\n+            System.out.println(i + \": \" + decoration);\n+            if (!decoration.contains(\"line-through\")\n+                || decoration.contains(\"underline\")) {\n+                errorCount++;\n+                if (firstError == null) {\n+                    firstError = \"Line \" + i + \": \" + decoration;\n+                }\n+            }\n+        }\n+\n+        if (errorCount > 0) {\n+            saveImage(image);\n+            throw new RuntimeException(errorCount + \" error(s) found, \"\n+                                       + \"the first one: \" + firstError);\n+        }\n+    }\n+\n+    private static View getContentView(View parent) {\n+        View view = parent.getView(0);\n+        return view.getViewCount() > 0\n+               ? getContentView(view)\n+               : view;\n+    }\n+\n+    private static void saveImage(BufferedImage image) {\n+        try {\n+            ImageIO.write(image, \"png\",\n+                          new File(\"html.png\"));\n+        } catch (IOException ignored) { }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLDocument\/HTMLStrikeOnly.java","additions":135,"deletions":0,"binary":false,"changes":135,"status":"added"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+\n+import javax.imageio.ImageIO;\n+import javax.swing.JEditorPane;\n+import javax.swing.text.View;\n+import javax.swing.text.html.CSS;\n+\n+\/*\n+ * @test\n+ * @bug 8326734\n+ * @summary Tests different combinations of setting 'underline'\n+ * @run main HTMLUnderlineOnly\n+ *\/\n+public class HTMLUnderlineOnly {\n+    private static final String HTML = \"\"\"\n+            <!DOCTYPE html>\n+            <html lang=\"en\">\n+            <head>\n+                <meta charset=\"UTF-8\">\n+                <title>underline<\/title>\n+                <style>\n+                    .underline   { text-decoration: underline }\n+                <\/style>\n+            <\/head>\n+            <body>\n+            <p><u><span style='text-decoration: underline'>underline?<\/span><\/u><\/p>\n+            <p><span style='text-decoration: underline'><u>underline?<\/u><\/span><\/p>\n+\n+            <p><u><span class=\"underline\">underline?<\/span><\/u><\/p>\n+            <p><span class=\"underline\"><u>underline?<\/u><\/span><\/p>\n+\n+            <p style='text-decoration: underline'><u>underline?<\/u><\/p>\n+            <p style='text-decoration: underline'><span style='text-decoration: underline'>underline?<\/span><\/p>\n+\n+            <p class=\"underline\"><u>underline<\/u><\/p>\n+            <p class=\"underline\"><span style='text-decoration: underline'>underline<\/span><\/p>\n+            <p class=\"underline\"><span class=\"underline\">underline<\/span><\/p>\n+            <\/body>\n+            <\/html>\n+            \"\"\";\n+    public static void main(String[] args) {\n+        final JEditorPane html = new JEditorPane(\"text\/html\", HTML);\n+        html.setEditable(false);\n+\n+        final Dimension size = html.getPreferredSize();\n+        html.setSize(size);\n+\n+        BufferedImage image = new BufferedImage(size.width, size.height,\n+                                                BufferedImage.TYPE_INT_RGB);\n+        Graphics g = image.createGraphics();\n+        \/\/ Paint the editor pane to ensure all views are created\n+        html.paint(g);\n+        g.dispose();\n+\n+        int errorCount = 0;\n+        String firstError = null;\n+\n+        System.out.println(\"----- Views -----\");\n+        final View bodyView = html.getUI()\n+                                  .getRootView(html)\n+                                  .getView(1)\n+                                  .getView(1);\n+        for (int i = 0; i < bodyView.getViewCount(); i++) {\n+            View pView = bodyView.getView(i);\n+            View contentView = getContentView(pView);\n+\n+            String decoration =\n+                    contentView.getAttributes()\n+                               .getAttribute(CSS.Attribute.TEXT_DECORATION)\n+                               .toString();\n+\n+            System.out.println(i + \": \" + decoration);\n+            if (!decoration.contains(\"underline\")\n+                || decoration.contains(\"line-through\")) {\n+                errorCount++;\n+                if (firstError == null) {\n+                    firstError = \"Line \" + i + \": \" + decoration;\n+                }\n+            }\n+        }\n+\n+        if (errorCount > 0) {\n+            saveImage(image);\n+            throw new RuntimeException(errorCount + \" error(s) found, \"\n+                                       + \"the first one: \" + firstError);\n+        }\n+    }\n+\n+    private static View getContentView(View parent) {\n+        View view = parent.getView(0);\n+        return view.getViewCount() > 0\n+               ? getContentView(view)\n+               : view;\n+    }\n+\n+    private static void saveImage(BufferedImage image) {\n+        try {\n+            ImageIO.write(image, \"png\",\n+                          new File(\"html.png\"));\n+        } catch (IOException ignored) { }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLDocument\/HTMLUnderlineOnly.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n- * @bug 8323801\n+ * @bug 8323801 8326734\n","filename":"test\/jdk\/javax\/swing\/text\/html\/HTMLDocument\/HTMLUnderlineStrike.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}