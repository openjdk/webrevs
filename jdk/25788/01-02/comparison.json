{"files":[{"patch":"@@ -47,2 +47,2 @@\n-    private static final boolean LEGACY_EQUALS =\n-        Boolean.getBoolean(\"jdk.io.File.legacyEquals\");\n+    private static final boolean NIO_COMPATIBLE_EQUALS =\n+        Boolean.getBoolean(\"jdk.io.File.windowsUseNIOStyleEquals\");\n@@ -641,20 +641,20 @@\n-        \/\/ Use legacy pathname comparison if property is set\n-        if (LEGACY_EQUALS)\n-            return f1.getPath().compareToIgnoreCase(f2.getPath());\n-\n-        \/\/ Compare pathname strings as in sun.nio.fs.WindowsPath.compareTo\n-        String s1 = f1.getPath();\n-        String s2 = f2.getPath();\n-        int n1 = s1.length();\n-        int n2 = s2.length();\n-        int min = Math.min(n1, n2);\n-        for (int i = 0; i < min; i++) {\n-            char c1 = s1.charAt(i);\n-            char c2 = s2.charAt(i);\n-             if (c1 != c2) {\n-                 c1 = Character.toUpperCase(c1);\n-                 c2 = Character.toUpperCase(c2);\n-                 if (c1 != c2) {\n-                     return c1 - c2;\n-                 }\n-             }\n+        \/\/ If property is set, compare pathname strings as in\n+        \/\/ sun.nio.fs.WindowsPath.compareTo\n+        if (NIO_COMPATIBLE_EQUALS) {\n+            String s1 = f1.getPath();\n+            String s2 = f2.getPath();\n+            int n1 = s1.length();\n+            int n2 = s2.length();\n+            int min = Math.min(n1, n2);\n+            for (int i = 0; i < min; i++) {\n+                char c1 = s1.charAt(i);\n+                char c2 = s2.charAt(i);\n+                if (c1 != c2) {\n+                    c1 = Character.toUpperCase(c1);\n+                    c2 = Character.toUpperCase(c2);\n+                    if (c1 != c2) {\n+                        return c1 - c2;\n+                    }\n+                }\n+            }\n+            return n1 - n2;\n@@ -662,1 +662,3 @@\n-        return n1 - n2;\n+\n+        \/\/ If property is not set, use legacy pathname comparison\n+        return f1.getPath().compareToIgnoreCase(f2.getPath());\n","filename":"src\/java.base\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":25,"deletions":23,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+        File latinLowerI   = new File(\"i\");\n@@ -50,2 +51,1 @@\n-        boolean shouldBeEqual= smallDotlessI.equals(latinCapitalI);\n-        if (!shouldBeEqual)\n+        if (!smallDotlessI.equals(latinCapitalI))\n@@ -53,0 +53,2 @@\n+        if (!smallDotlessI.equals(latinLowerI))\n+            throw new Exception(\"Small dotless \\\"i\\\" does not equal \\\"i\\\"\");\n@@ -54,3 +56,4 @@\n-        boolean legacyEquals = Boolean.getBoolean(\"jdk.io.File.legacyEquals\");\n-        boolean shouldNotBeEqual = largeDotfullI.equals(latinCapitalI);\n-        if (shouldNotBeEqual && !legacyEquals)\n+        boolean legacyEquals = !Boolean.getBoolean(\"jdk.io.File.windowsUseNIOStyleEquals\");\n+\n+        boolean shouldNotBeEqualUpper = largeDotfullI.equals(latinCapitalI);\n+        if (shouldNotBeEqualUpper && !legacyEquals)\n@@ -58,1 +61,1 @@\n-        else if (!shouldNotBeEqual && legacyEquals)\n+        else if (!shouldNotBeEqualUpper && legacyEquals)\n@@ -60,0 +63,6 @@\n+\n+        boolean shouldNotBeEqualLower = largeDotfullI.equals(latinLowerI);\n+        if (shouldNotBeEqualLower && !legacyEquals)\n+            throw new Exception(\"Large dotted \\\"I\\\" equals \\\"i\\\"\");\n+        else if (!shouldNotBeEqualLower && legacyEquals)\n+            throw new Exception(\"Large dotted \\\"I\\\" does not equal \\\"i\\\"\");\n","filename":"test\/jdk\/java\/io\/File\/CompareTo.java","additions":15,"deletions":6,"binary":false,"changes":21,"status":"modified"}]}