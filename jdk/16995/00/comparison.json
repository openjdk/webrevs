{"files":[{"patch":"@@ -17089,17 +17089,1 @@\n-                     $result$$Register, $cnt$$Register, 1);\n-  %}\n-  ins_pipe(pipe_class_memory);\n-%}\n-\n-instruct string_equalsU(iRegP_R1 str1, iRegP_R3 str2, iRegI_R4 cnt,\n-                        iRegI_R0 result, rFlagsReg cr)\n-%{\n-  predicate(((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU);\n-  match(Set result (StrEquals (Binary str1 str2) cnt));\n-  effect(USE_KILL str1, USE_KILL str2, USE_KILL cnt, KILL cr);\n-\n-  format %{ \"String Equals $str1,$str2,$cnt -> $result\" %}\n-  ins_encode %{\n-    \/\/ Count is in 8-bit bytes; non-Compact chars are 16 bits.\n-    __ string_equals($str1$$Register, $str2$$Register,\n-                     $result$$Register, $cnt$$Register, 2);\n+                     $result$$Register, $cnt$$Register);\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -5325,1 +5325,0 @@\n-\/\/ elem_size is the element size in bytes: either 1 or 2.\n@@ -5332,1 +5331,1 @@\n-                                   Register result, Register cnt1, int elem_size)\n+                                   Register result, Register cnt1)\n@@ -5339,1 +5338,0 @@\n-  assert(elem_size == 1 || elem_size == 2, \"must be 2 or 1 byte\");\n@@ -5344,1 +5342,0 @@\n-    const char kind = (elem_size == 2) ? 'U' : 'L';\n@@ -5346,1 +5343,1 @@\n-    snprintf(comment, sizeof comment, \"{string_equals%c\", kind);\n+    snprintf(comment, sizeof comment, \"{string_equalsL\");\n@@ -5394,2 +5391,1 @@\n-  if (elem_size == 1) { \/\/ Only needed when comparing 1-byte elements\n-    tbz(cnt1, 0, SAME); \/\/ 0-1 bytes left.\n+  tbz(cnt1, 0, SAME); \/\/ 0-1 bytes left.\n@@ -5397,5 +5393,4 @@\n-      ldrb(tmp1, a1);\n-      ldrb(tmp2, a2);\n-      eorw(tmp1, tmp1, tmp2);\n-      cbnzw(tmp1, DONE);\n-    }\n+    ldrb(tmp1, a1);\n+    ldrb(tmp2, a2);\n+    eorw(tmp1, tmp1, tmp2);\n+    cbnzw(tmp1, DONE);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":7,"deletions":12,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1402,2 +1402,1 @@\n-  void string_equals(Register a1, Register a2, Register result, Register cnt1,\n-                     int elem_size);\n+  void string_equals(Register a1, Register a2, Register result, Register cnt1);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -12321,15 +12321,0 @@\n-instruct string_equalsU(rarg1RegP str1, rarg2RegP str2, rarg3RegI cnt, iRegIdst result,\n-                        iRegIdst tmp, regCTR ctr, flagsRegCR0 cr0) %{\n-  predicate(((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU);\n-  match(Set result (StrEquals (Binary str1 str2) cnt));\n-  effect(TEMP_DEF result, USE_KILL str1, USE_KILL str2, USE_KILL cnt, TEMP tmp, KILL ctr, KILL cr0);\n-  ins_cost(300);\n-  format %{ \"String Equals char[]  $str1,$str2,$cnt -> $result \\t\/\/ KILL $tmp\" %}\n-  ins_encode %{\n-    __ array_equals(false, $str1$$Register, $str2$$Register,\n-                    $cnt$$Register, $tmp$$Register,\n-                    $result$$Register, false \/* byte *\/);\n-  %}\n-  ins_pipe(pipe_class_default);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/ppc\/ppc.ad","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1361,1 +1361,0 @@\n-\/\/ elem_size is the element size in bytes: either 1 or 2.\n@@ -1370,1 +1369,1 @@\n-                                      Register result, Register cnt1, int elem_size)\n+                                      Register result, Register cnt1)\n@@ -1376,1 +1375,0 @@\n-  assert(elem_size == 1 || elem_size == 2, \"must be 2 or 1 byte\");\n@@ -1442,9 +1440,7 @@\n-  if (elem_size == 1) { \/\/ Only needed when comparing 1-byte elements\n-    \/\/ 0-1 bytes left.\n-    test_bit(tmp1, cnt1, 0);\n-    beqz(tmp1, SAME);\n-    {\n-      lbu(tmp1, Address(a1, 0));\n-      lbu(tmp2, Address(a2, 0));\n-      bne(tmp1, tmp2, DONE);\n-    }\n+  \/\/ 0-1 bytes left.\n+  test_bit(tmp1, cnt1, 0);\n+  beqz(tmp1, SAME);\n+  {\n+    lbu(tmp1, Address(a1, 0));\n+    lbu(tmp2, Address(a2, 0));\n+    bne(tmp1, tmp2, DONE);\n@@ -1780,1 +1776,1 @@\n-void C2_MacroAssembler::string_equals_v(Register a1, Register a2, Register result, Register cnt, int elem_size) {\n+void C2_MacroAssembler::string_equals_v(Register a1, Register a2, Register result, Register cnt) {\n@@ -1789,5 +1785,1 @@\n-  if (elem_size == 2) {\n-    srli(cnt, cnt, 1);\n-  }\n-\n-  element_compare(a1, a2, result, cnt, tmp1, tmp2, v2, v4, v2, elem_size == 1, DONE);\n+  element_compare(a1, a2, result, cnt, tmp1, tmp2, v2, v4, v2, true, DONE);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":10,"deletions":18,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -86,2 +86,1 @@\n-                     Register result, Register cnt1,\n-                     int elem_size);\n+                     Register result, Register cnt1);\n@@ -176,2 +175,1 @@\n-                       Register result, Register cnt1,\n-                       int elem_size);\n+                       Register result, Register cnt1);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -10319,17 +10319,1 @@\n-                     $result$$Register, $cnt$$Register, 1);\n-  %}\n-  ins_pipe(pipe_class_memory);\n-%}\n-\n-instruct string_equalsU(iRegP_R11 str1, iRegP_R13 str2, iRegI_R14 cnt,\n-                        iRegI_R10 result, rFlagsReg cr)\n-%{\n-  predicate(!UseRVV && ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU);\n-  match(Set result (StrEquals (Binary str1 str2) cnt));\n-  effect(USE_KILL str1, USE_KILL str2, USE_KILL cnt, KILL cr);\n-\n-  format %{ \"String Equals $str1, $str2, $cnt -> $result\\t#@string_equalsU\" %}\n-  ins_encode %{\n-    \/\/ Count is in 8-bit bytes; non-Compact chars are 16 bits.\n-    __ string_equals($str1$$Register, $str2$$Register,\n-                     $result$$Register, $cnt$$Register, 2);\n+                     $result$$Register, $cnt$$Register);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2617,18 +2617,1 @@\n-                       $result$$Register, $cnt$$Register, 1);\n-  %}\n-  ins_pipe(pipe_class_memory);\n-%}\n-\n-instruct vstring_equalsU(iRegP_R11 str1, iRegP_R13 str2, iRegI_R14 cnt,\n-                         iRegI_R10 result, vReg_V2 v2,\n-                         vReg_V3 v3, vReg_V4 v4, vReg_V5 v5, rFlagsReg cr)\n-%{\n-  predicate(UseRVV && ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU);\n-  match(Set result (StrEquals (Binary str1 str2) cnt));\n-  effect(USE_KILL str1, USE_KILL str2, USE_KILL cnt, TEMP v2, TEMP v3, TEMP v4, TEMP v5, KILL cr);\n-\n-  format %{ \"String Equals $str1, $str2, $cnt -> $result\\t#@string_equalsU\" %}\n-  ins_encode %{\n-    \/\/ Count is in 8-bit bytes; non-Compact chars are 16 bits.\n-    __ string_equals_v($str1$$Register, $str2$$Register,\n-                       $result$$Register, $cnt$$Register, 2);\n+                       $result$$Register, $cnt$$Register);\n@@ -3220,1 +3203,1 @@\n-      __ integer_extend_v(as_VectorRegister($dst$$reg), bt, \n+      __ integer_extend_v(as_VectorRegister($dst$$reg), bt,\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -9846,14 +9846,0 @@\n-instruct string_equalsU(iRegP str1, iRegP str2, iRegI cnt, iRegI result, roddRegL oddReg, revenRegL evenReg, flagsReg cr) %{\n-  match(Set result (StrEquals (Binary str1 str2) cnt));\n-  effect(TEMP oddReg, TEMP evenReg, KILL cr); \/\/ R0, R1 are killed, too.\n-  predicate(((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU || ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::none);\n-  ins_cost(300);\n-  format %{ \"String Equals char[] $str1,$str2,$cnt -> $result\" %}\n-  ins_encode %{\n-    __ array_equals(false, $str1$$Register, $str2$$Register,\n-                    $cnt$$Register, $oddReg$$Register, $evenReg$$Register,\n-                    $result$$Register, false \/* byte *\/);\n-  %}\n-  ins_pipe(pipe_class_dummy);\n-%}\n-\n@@ -9863,1 +9849,1 @@\n-  predicate(((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::LL || ((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::UU);\n+  predicate(((StrEqualsNode*)n)->encoding() == StrIntrinsicNode::LL);\n","filename":"src\/hotspot\/cpu\/s390\/s390.ad","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -225,1 +225,0 @@\n-    case vmIntrinsics::_equalsU:\n@@ -535,1 +534,0 @@\n-  case vmIntrinsics::_equalsU:\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -405,1 +405,0 @@\n-  do_intrinsic(_equalsU,                  java_lang_StringUTF16, equals_name, equalsB_signature,                 F_S)   \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -240,1 +240,0 @@\n-  case vmIntrinsics::_equalsU:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -314,1 +314,0 @@\n-  case vmIntrinsics::_equalsU:                  return inline_string_equals(StrIntrinsicNode::UU);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -460,14 +460,0 @@\n-    public static boolean equals(byte[] value, byte[] other) {\n-        if (value.length == other.length) {\n-            int len = value.length >> 1;\n-            for (int i = 0; i < len; i++) {\n-                if (getChar(value, i) != getChar(other, i)) {\n-                    return false;\n-                }\n-            }\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-    @IntrinsicCandidate\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"}]}