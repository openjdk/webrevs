{"files":[{"patch":"@@ -536,1 +536,1 @@\n-                String desktopFileName = queryMimeTypeDefaultHandler(mimeType);\n+                String desktopFileName = queryMimeTypeDefaultHandler(mimeType).orElse(null);\n@@ -560,1 +560,1 @@\n-                String desktopFileName = queryMimeTypeDefaultHandler(fa.getMime());\n+                String desktopFileName = queryMimeTypeDefaultHandler(fa.getMime()).orElse(null);\n@@ -587,1 +587,1 @@\n-    private static String queryMimeTypeDefaultHandler(String mimeType) {\n+    private static Optional<String> queryMimeTypeDefaultHandler(String mimeType) {\n@@ -589,1 +589,1 @@\n-                .executeAndGetFirstLineOfOutput();\n+                .discardStderr().saveFirstLineOfOutput().execute().findFirstLineOfOutput();\n@@ -711,1 +711,1 @@\n-    };\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-import java.util.ListIterator;\n@@ -368,4 +367,7 @@\n-            handlers = Stream.of(tests)\n-                    .map(PackageTest::createPackageTypeHandlers)\n-                    .flatMap(List<Consumer<Action>>::stream)\n-                    .collect(Collectors.toUnmodifiableList());\n+            typeHandlers = Stream.of(PackageType.values()).map(type -> {\n+                return Map.entry(type, Stream.of(tests).map(test -> {\n+                    return test.createPackageTypeHandler(type);\n+                }).filter(Optional::isPresent).map(Optional::orElseThrow).toList());\n+            }).filter(e -> {\n+                return !e.getValue().isEmpty();\n+            }).collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));\n@@ -376,3 +378,10 @@\n-            if (Set.of(action).contains(Action.UNINSTALL)) {\n-                ListIterator<Consumer<Action>> listIterator = handlers.listIterator(\n-                        handlers.size());\n+            typeHandlers.entrySet().stream()\n+                    .sorted(Comparator.comparing(Map.Entry::getKey))\n+                    .map(Map.Entry::getValue).forEachOrdered(handlers -> {\n+                        runAction(handlers, List.of(action));\n+                    });\n+        }\n+\n+        private static void runAction(List<Consumer<Action>> handlers, List<Action> actions) {\n+            if (actions.contains(Action.UNINSTALL)) {\n+                final var listIterator = handlers.listIterator(handlers.size());\n@@ -380,2 +389,2 @@\n-                    var handler = listIterator.previous();\n-                    List.of(action).forEach(handler::accept);\n+                    final var handler = listIterator.previous();\n+                    actions.forEach(handler::accept);\n@@ -384,1 +393,1 @@\n-                handlers.forEach(handler -> List.of(action).forEach(handler::accept));\n+                handlers.forEach(handler -> actions.forEach(handler::accept));\n@@ -388,1 +397,1 @@\n-        private final List<Consumer<Action>> handlers;\n+        private final Map<PackageType, List<Consumer<Action>>> typeHandlers;\n@@ -458,0 +467,7 @@\n+    private Optional<Consumer<Action>> createPackageTypeHandler(PackageType type) {\n+        Objects.requireNonNull(type);\n+        return Optional.ofNullable(handlers.get(type)).filter(Predicate.not(Handler::isVoid)).map(h -> {\n+            return createPackageTypeHandler(type, h);\n+        });\n+    }\n+\n@@ -462,6 +478,5 @@\n-        return handlers.entrySet().stream()\n-                .filter(entry -> !entry.getValue().isVoid())\n-                .sorted(Comparator.comparing(Map.Entry::getKey))\n-                .map(entry -> {\n-                    return  createPackageTypeHandler(entry.getKey(), entry.getValue());\n-                }).toList();\n+        return Stream.of(PackageType.values()).sorted()\n+                .map(this::createPackageTypeHandler)\n+                .filter(Optional::isPresent)\n+                .map(Optional::orElseThrow)\n+                .toList();\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":33,"deletions":18,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-        STRING_ARRY(PListReader::queryArrayValue);\n+        STRING_ARRAY(PListReader::queryArrayValue);\n@@ -101,1 +101,1 @@\n-                    queryType(QueryType.STRING_ARRY);\n+                    queryType(QueryType.STRING_ARRAY);\n@@ -199,1 +199,1 @@\n-            case STRING_ARRY -> {\n+            case STRING_ARRAY -> {\n@@ -233,1 +233,1 @@\n-                testSpec(QueryType.STRING_ARRY).xml(\"<key>foo<\/key><Array\/>\").create(),\n+                testSpec(QueryType.STRING_ARRAY).xml(\"<key>foo<\/key><Array\/>\").create(),\n","filename":"test\/jdk\/tools\/jpackage\/junit\/share\/jdk.jpackage\/jdk\/jpackage\/internal\/util\/PListReaderTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -63,0 +63,1 @@\n+    @Test\n","filename":"test\/jdk\/tools\/jpackage\/junit\/share\/jdk.jpackage\/jdk\/jpackage\/internal\/util\/PathGroupTest.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,0 +100,6 @@\n+        \/\/ When MSI package is unpacked and not installed, empty directories are not created.\n+        final boolean emptyDirSupported = !(PackageType.WINDOWS.contains(cmd.packageType()) && cmd.isPackageUnpacked());\n+        validateDirTree(cmd, emptyDirSupported);\n+    }\n+\n+    private static void validateDirTree(JPackageCommand cmd, boolean emptyDirSupported) {\n@@ -106,1 +112,1 @@\n-            } else if (!PackageType.WINDOWS.contains(cmd.packageType())) {\n+            } else if (emptyDirSupported) {\n@@ -109,1 +115,0 @@\n-                \/\/ MSI packages don't support empty folders\n","filename":"test\/jdk\/tools\/jpackage\/share\/EmptyFolderTest.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -24,0 +24,1 @@\n+import java.io.IOException;\n@@ -26,1 +27,0 @@\n-import jdk.jpackage.test.TKit;\n@@ -28,0 +28,1 @@\n+import jdk.jpackage.test.Executor;\n@@ -30,1 +31,1 @@\n-import jdk.jpackage.test.Executor;\n+import jdk.jpackage.test.TKit;\n@@ -46,4 +47,8 @@\n-    public static void test() throws Exception {\n-        final Path workDir = TKit.createTempDirectory(\"runtime\").resolve(\"data\");\n-        final Path jlinkOutputDir = workDir.resolve(\"temp.runtime\");\n-        Files.createDirectories(jlinkOutputDir.getParent());\n+    public static void test() throws IOException {\n+\n+        JPackageCommand cmd = JPackageCommand.helloAppImage();\n+\n+        if (JPackageCommand.DEFAULT_RUNTIME_IMAGE == null) {\n+            final Path workDir = TKit.createTempDirectory(\"runtime\").resolve(\"data\");\n+            final Path jlinkOutputDir = workDir.resolve(\"temp.runtime\");\n+            Files.createDirectories(jlinkOutputDir.getParent());\n@@ -51,11 +56,11 @@\n-        new Executor()\n-        .setToolProvider(JavaTool.JLINK)\n-        .dumpOutput()\n-        .addArguments(\n-                \"--output\", jlinkOutputDir.toString(),\n-                \"--add-modules\", \"java.desktop\",\n-                \"--strip-debug\",\n-                \"--no-header-files\",\n-                \"--no-man-pages\",\n-                \"--strip-native-commands\")\n-        .execute();\n+            new Executor()\n+            .setToolProvider(JavaTool.JLINK)\n+            .dumpOutput()\n+            .addArguments(\n+                    \"--output\", jlinkOutputDir.toString(),\n+                    \"--add-modules\", \"java.desktop\",\n+                    \"--strip-debug\",\n+                    \"--no-header-files\",\n+                    \"--no-man-pages\",\n+                    \"--strip-native-commands\")\n+            .execute();\n@@ -63,2 +68,2 @@\n-        JPackageCommand cmd = JPackageCommand.helloAppImage()\n-            .setArgumentValue(\"--runtime-image\", jlinkOutputDir.toString());\n+            cmd.setArgumentValue(\"--runtime-image\", jlinkOutputDir.toString());\n+        }\n@@ -69,0 +74,18 @@\n+    @Test\n+    public static void testStrippedFiles() throws IOException {\n+        final var cmd = JPackageCommand.helloAppImage().setFakeRuntime();\n+\n+        final var runtimePath = Path.of(cmd.executePrerequisiteActions().getArgumentValue(\"--runtime-image\"));\n+\n+        Files.createDirectories(runtimePath.resolve(\"jmods\"));\n+        Files.createDirectories(runtimePath.resolve(\"lib\"));\n+        Files.createFile(runtimePath.resolve(\"lib\/src.zip\"));\n+        Files.createFile(runtimePath.resolve(\"src.zip\"));\n+\n+        (new JPackageCommand()).addArguments(cmd.getAllArguments()).executeAndAssertHelloAppImageCreated();\n+\n+        final var appRuntimeDir = cmd.appLayout().runtimeHomeDirectory();\n+        TKit.assertPathExists(appRuntimeDir.resolve(\"jmods\"), false);\n+        TKit.assertPathExists(appRuntimeDir.resolve(\"lib\/src.zip\"), false);\n+        TKit.assertPathExists(appRuntimeDir.resolve(\"src.zip\"), false);\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimeImageTest.java","additions":42,"deletions":19,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import static jdk.internal.util.OperatingSystem.LINUX;\n@@ -84,1 +85,1 @@\n-        init(PackageType.NATIVE).run();\n+        init().run();\n@@ -87,1 +88,1 @@\n-    @Test\n+    @Test(ifOS = LINUX)\n@@ -91,2 +92,2 @@\n-        init(PackageType.LINUX)\n-        .addInitializer(cmd -> cmd.addArguments(\"--install-dir\", \"\/usr\"))\n+        init()\n+        .addInitializer(cmd -> cmd.addArguments(\"--install-dir\", installDir))\n@@ -99,1 +100,1 @@\n-        init(PackageType.NATIVE)\n+        init()\n@@ -108,1 +109,1 @@\n-    private static PackageTest init(Set<PackageType> types) {\n+    private static PackageTest init() {\n@@ -110,1 +111,0 @@\n-        .forTypes(types)\n@@ -169,2 +169,1 @@\n-        })\n-        .forTypes(types);\n+        });\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimePackageTest.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"}]}