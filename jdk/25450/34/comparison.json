{"files":[{"patch":"@@ -172,1 +172,1 @@\n-julong    os::Aix::_physical_memory = 0;\n+size_t    os::Aix::_physical_memory = 0;\n@@ -257,2 +257,2 @@\n-julong os::free_memory() {\n-  return Aix::available_memory();\n+bool os::free_memory(size_t& value) {\n+  return Aix::available_memory(value);\n@@ -261,2 +261,2 @@\n-julong os::available_memory() {\n-  return Aix::available_memory();\n+bool os::available_memory(size_t& value) {\n+  return Aix::available_memory(value);\n@@ -265,1 +265,1 @@\n-julong os::Aix::available_memory() {\n+bool os::Aix::available_memory(size_t& value) {\n@@ -268,1 +268,2 @@\n-    return mi.real_free;\n+    value = static_cast<size_t>(mi.real_free);\n+    return true;\n@@ -270,1 +271,1 @@\n-    return ULONG_MAX;\n+    return false;\n@@ -274,1 +275,1 @@\n-jlong os::total_swap_space() {\n+bool os::total_swap_space(size_t& value) {\n@@ -277,1 +278,1 @@\n-    return -1;\n+    return false;\n@@ -279,1 +280,2 @@\n-  return (jlong)(memory_info.pgsp_total * 4 * K);\n+  value = static_cast<size_t>(memory_info.pgsp_total * 4 * K);\n+  return true;\n@@ -282,1 +284,1 @@\n-jlong os::free_swap_space() {\n+bool os::free_swap_space(size_t& value) {\n@@ -285,1 +287,1 @@\n-    return -1;\n+    return false;\n@@ -287,1 +289,2 @@\n-  return (jlong)(memory_info.pgsp_free * 4 * K);\n+  value = static_cast<size_t>(memory_info.pgsp_free * 4 * K);\n+  return true;\n@@ -290,1 +293,1 @@\n-julong os::physical_memory() {\n+size_t os::physical_memory() {\n@@ -329,1 +332,1 @@\n-  _physical_memory = (julong) mi.real_total;\n+  _physical_memory = static_cast<size_t>(mi.real_total);\n@@ -2196,1 +2199,1 @@\n-  trcVerbose(\"physical memory: %lu\", Aix::_physical_memory);\n+  trcVerbose(\"physical memory: %zu\", Aix::_physical_memory);\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":20,"deletions":17,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  static julong _physical_memory;\n+  static size_t _physical_memory;\n@@ -57,3 +57,3 @@\n-  static julong available_memory();\n-  static julong free_memory();\n-  static julong physical_memory() { return _physical_memory; }\n+  static bool available_memory(size_t& value);\n+  static bool free_memory(size_t& value);\n+  static size_t physical_memory() { return _physical_memory; }\n","filename":"src\/hotspot\/os\/aix\/os_aix.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -117,1 +117,1 @@\n-julong os::Bsd::_physical_memory = 0;\n+size_t os::Bsd::_physical_memory = 0;\n@@ -136,2 +136,2 @@\n-julong os::available_memory() {\n-  return Bsd::available_memory();\n+bool os::available_memory(size_t& value) {\n+  return Bsd::available_memory(value);\n@@ -140,2 +140,2 @@\n-julong os::free_memory() {\n-  return Bsd::available_memory();\n+bool os::free_memory(size_t& value) {\n+  return Bsd::available_memory(value);\n@@ -147,2 +147,2 @@\n-julong os::Bsd::available_memory() {\n-  uint64_t available = physical_memory() >> 2;\n+bool os::Bsd::available_memory(size_t& value) {\n+  uint64_t available = static_cast<uint64_t>(physical_memory() >> 2);\n@@ -159,0 +159,2 @@\n+  } else {\n+    return false;\n@@ -161,1 +163,2 @@\n-  return available;\n+  value = static_cast<size_t>(available);\n+  return true;\n@@ -180,1 +183,1 @@\n-jlong os::total_swap_space() {\n+bool os::total_swap_space(size_t& value) {\n@@ -185,1 +188,1 @@\n-    return -1;\n+    return false;\n@@ -187,1 +190,2 @@\n-  return (jlong)vmusage.xsu_total;\n+  value = static_cast<size_t>(vmusage.xsu_total);\n+  return true;\n@@ -189,1 +193,1 @@\n-  return -1;\n+  return false;\n@@ -193,1 +197,1 @@\n-jlong os::free_swap_space() {\n+bool os::free_swap_space(size_t& value) {\n@@ -198,1 +202,1 @@\n-    return -1;\n+    return false;\n@@ -200,1 +204,2 @@\n-  return (jlong)vmusage.xsu_avail;\n+  value = static_cast<size_t>(vmusage.xsu_avail);\n+  return true;\n@@ -202,1 +207,1 @@\n-  return -1;\n+  return false;\n@@ -206,1 +211,1 @@\n-julong os::physical_memory() {\n+size_t os::physical_memory() {\n@@ -284,1 +289,1 @@\n-    _physical_memory = mem_val;\n+    _physical_memory = static_cast<size_t>(mem_val);\n@@ -295,1 +300,1 @@\n-    _physical_memory = MIN2(_physical_memory, (julong)limits.rlim_cur);\n+    _physical_memory = MIN2(_physical_memory, static_cast<size_t>(limits.rlim_cur));\n@@ -1467,5 +1472,7 @@\n-\n-  st->print(\", physical \" UINT64_FORMAT \"k\",\n-            os::physical_memory() >> 10);\n-  st->print(\"(\" UINT64_FORMAT \"k free)\",\n-            os::available_memory() >> 10);\n+  size_t phys_mem = os::physical_memory();\n+  st->print(\", physical %zuk\",\n+            phys_mem >> 10);\n+  size_t avail_mem = 0;\n+  (void)os::available_memory(avail_mem);\n+  st->print(\"(%zuk free)\",\n+            avail_mem >> 10);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":31,"deletions":24,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  static julong _physical_memory;\n+  static size_t _physical_memory;\n@@ -48,3 +48,3 @@\n-  static julong available_memory();\n-  static julong free_memory();\n-  static julong physical_memory() { return _physical_memory; }\n+  static bool available_memory(size_t& value);\n+  static bool free_memory(size_t& value);\n+  static size_t physical_memory() { return _physical_memory; }\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -673,2 +673,2 @@\n-  jlong phys_mem = os::Linux::physical_memory();\n-  log_trace(os, container)(\"total physical memory: \" JLONG_FORMAT, phys_mem);\n+  julong phys_mem = static_cast<julong>(os::Linux::physical_memory());\n+  log_trace(os, container)(\"total physical memory: \" JULONG_FORMAT, phys_mem);\n@@ -844,1 +844,1 @@\n-  julong phys_mem = os::Linux::physical_memory();\n+  julong phys_mem = static_cast<julong>(os::Linux::physical_memory());\n@@ -850,1 +850,1 @@\n-  julong phys_mem = os::Linux::physical_memory();\n+  julong phys_mem = static_cast<julong>(os::Linux::physical_memory());\n@@ -856,1 +856,1 @@\n-  julong phys_mem = os::Linux::physical_memory();\n+  julong phys_mem = static_cast<julong>(os::Linux::physical_memory());\n@@ -897,1 +897,1 @@\n-  julong phys_mem = os::Linux::physical_memory();\n+  julong phys_mem = static_cast<julong>(os::Linux::physical_memory());\n","filename":"src\/hotspot\/os\/linux\/cgroupSubsystem_linux.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -68,1 +68,1 @@\n-  julong phys_mem = os::Linux::physical_memory();\n+  julong phys_mem = static_cast<julong>(os::Linux::physical_memory());\n","filename":"src\/hotspot\/os\/linux\/cgroupUtil_linux.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -160,1 +160,1 @@\n-julong os::Linux::_physical_memory = 0;\n+size_t os::Linux::_physical_memory = 0;\n@@ -235,2 +235,2 @@\n-julong os::available_memory() {\n-  return Linux::available_memory();\n+bool os::available_memory(size_t& value) {\n+  return Linux::available_memory(value);\n@@ -239,1 +239,1 @@\n-julong os::Linux::available_memory() {\n+bool os::Linux::available_memory(size_t& value) {\n@@ -243,1 +243,2 @@\n-    return avail_mem;\n+    value = static_cast<size_t>(avail_mem);\n+    return true;\n@@ -258,1 +259,5 @@\n-    avail_mem = free_memory();\n+    size_t free_mem = 0;\n+    if (!free_memory(free_mem)) {\n+      return false;\n+    }\n+    avail_mem = static_cast<julong>(free_mem);\n@@ -261,1 +266,2 @@\n-  return avail_mem;\n+  value = static_cast<size_t>(avail_mem);\n+  return true;\n@@ -264,2 +270,2 @@\n-julong os::free_memory() {\n-  return Linux::free_memory();\n+bool os::free_memory(size_t& value) {\n+  return Linux::free_memory(value);\n@@ -268,1 +274,1 @@\n-julong os::Linux::free_memory() {\n+bool os::Linux::free_memory(size_t& value) {\n@@ -274,1 +280,2 @@\n-    return free_mem;\n+    value = static_cast<size_t>(free_mem);\n+    return true;\n@@ -277,1 +284,4 @@\n-  sysinfo(&si);\n+  int ret = sysinfo(&si);\n+  if (ret != 0) {\n+    return false;\n+  }\n@@ -280,1 +290,2 @@\n-  return free_mem;\n+  value = static_cast<size_t>(free_mem);\n+  return true;\n@@ -283,1 +294,1 @@\n-jlong os::total_swap_space() {\n+bool os::total_swap_space(size_t& value) {\n@@ -285,2 +296,5 @@\n-    if (OSContainer::memory_limit_in_bytes() > 0) {\n-      return (jlong)(OSContainer::memory_and_swap_limit_in_bytes() - OSContainer::memory_limit_in_bytes());\n+    jlong memory_and_swap_limit_in_bytes = OSContainer::memory_and_swap_limit_in_bytes();\n+    jlong memory_limit_in_bytes = OSContainer::memory_limit_in_bytes();\n+    if (memory_limit_in_bytes > 0 && memory_and_swap_limit_in_bytes > 0) {\n+      value = static_cast<size_t>(memory_and_swap_limit_in_bytes - memory_limit_in_bytes);\n+      return true;\n@@ -288,1 +302,1 @@\n-  }\n+  } \/\/ fallback to the host swap space if the container did return the unbound value of -1\n@@ -292,1 +306,2 @@\n-    return -1;\n+    assert(false, \"sysinfo failed in total_swap_space(): %s\", os::strerror(errno));\n+    return false;\n@@ -294,1 +309,2 @@\n-  return  (jlong)(si.totalswap * si.mem_unit);\n+  value = static_cast<size_t>(si.totalswap * si.mem_unit);\n+  return true;\n@@ -297,1 +313,1 @@\n-static jlong host_free_swap() {\n+static bool host_free_swap_f(size_t& value) {\n@@ -301,1 +317,2 @@\n-    return -1;\n+    assert(false, \"sysinfo failed in host_free_swap_f(): %s\", os::strerror(errno));\n+    return false;\n@@ -303,1 +320,2 @@\n-  return (jlong)(si.freeswap * si.mem_unit);\n+  value = static_cast<size_t>(si.freeswap * si.mem_unit);\n+  return true;\n@@ -306,1 +324,1 @@\n-jlong os::free_swap_space() {\n+bool os::free_swap_space(size_t& value) {\n@@ -309,2 +327,6 @@\n-  jlong host_free_swap_val = MIN2(os::total_swap_space(), host_free_swap());\n-  assert(host_free_swap_val >= 0, \"sysinfo failed?\");\n+  size_t total_swap_space = 0;\n+  size_t host_free_swap = 0;\n+  if (!os::total_swap_space(total_swap_space) || !host_free_swap_f(host_free_swap)) {\n+    return false;\n+  }\n+  size_t host_free_swap_val = MIN2(total_swap_space, host_free_swap);\n@@ -317,1 +339,2 @@\n-        return 0;\n+        value = 0;\n+        return true;\n@@ -325,1 +348,2 @@\n-          return free_swap >= 0 ? free_swap : 0;\n+          value = free_swap >= 0 ? static_cast<size_t>(free_swap) : 0;\n+          return true;\n@@ -331,1 +355,1 @@\n-                            \" container_mem_limit=\" JLONG_FORMAT \" returning host value: \" JLONG_FORMAT,\n+                            \" container_mem_limit=\" JLONG_FORMAT \" returning host value: %zu\",\n@@ -334,1 +358,2 @@\n-  return host_free_swap_val;\n+  value = host_free_swap_val;\n+  return true;\n@@ -337,2 +362,1 @@\n-julong os::physical_memory() {\n-  jlong phys_mem = 0;\n+size_t os::physical_memory() {\n@@ -343,1 +367,1 @@\n-      return mem_limit;\n+      return static_cast<size_t>(mem_limit);\n@@ -347,2 +371,2 @@\n-  phys_mem = Linux::physical_memory();\n-  log_trace(os)(\"total system memory: \" JLONG_FORMAT, phys_mem);\n+  size_t phys_mem = Linux::physical_memory();\n+  log_trace(os)(\"total system memory: %zu\", phys_mem);\n@@ -523,1 +547,1 @@\n-  _physical_memory = (julong)sysconf(_SC_PHYS_PAGES) * (julong)sysconf(_SC_PAGESIZE);\n+  _physical_memory = static_cast<size_t>(sysconf(_SC_PHYS_PAGES)) * static_cast<size_t>(sysconf(_SC_PAGESIZE));\n@@ -2551,5 +2575,7 @@\n-\n-  st->print(\", physical \" UINT64_FORMAT \"k\",\n-            os::physical_memory() >> 10);\n-  st->print(\"(\" UINT64_FORMAT \"k free)\",\n-            os::available_memory() >> 10);\n+  size_t phys_mem = physical_memory();\n+  st->print(\", physical %zuk\",\n+            phys_mem >> 10);\n+  size_t avail_mem = 0;\n+  (void)os::available_memory(avail_mem);\n+  st->print(\"(%zuk free)\",\n+            avail_mem >> 10);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":66,"deletions":40,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  static julong _physical_memory;\n+  static size_t _physical_memory;\n@@ -56,2 +56,2 @@\n-  static julong available_memory();\n-  static julong free_memory();\n+  static bool available_memory(size_t& value);\n+  static bool free_memory(size_t& value);\n@@ -120,1 +120,1 @@\n-  static julong physical_memory() { return _physical_memory; }\n+  static size_t physical_memory() { return _physical_memory; }\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -851,2 +851,2 @@\n-julong os::available_memory() {\n-  return win32::available_memory();\n+bool os::available_memory(size_t& value) {\n+  return win32::available_memory(value);\n@@ -855,2 +855,2 @@\n-julong os::free_memory() {\n-  return win32::available_memory();\n+bool os::free_memory(size_t& value) {\n+  return win32::available_memory(value);\n@@ -859,1 +859,1 @@\n-julong os::win32::available_memory() {\n+bool os::win32::available_memory(size_t& value) {\n@@ -864,3 +864,8 @@\n-  GlobalMemoryStatusEx(&ms);\n-\n-  return (julong)ms.ullAvailPhys;\n+  BOOL res = GlobalMemoryStatusEx(&ms);\n+  if (res == TRUE) {\n+    value = static_cast<size_t>(ms.ullAvailPhys);\n+    return true;\n+  } else {\n+    assert(false, \"GlobalMemoryStatusEx failed in os::win32::available_memory(): %lu\", ::GetLastError());\n+    return false;\n+  }\n@@ -869,1 +874,1 @@\n-jlong os::total_swap_space() {\n+bool os::total_swap_space(size_t& value) {\n@@ -872,2 +877,8 @@\n-  GlobalMemoryStatusEx(&ms);\n-  return (jlong) ms.ullTotalPageFile;\n+  BOOL res = GlobalMemoryStatusEx(&ms);\n+  if (res == TRUE) {\n+    value = static_cast<size_t>(ms.ullTotalPageFile);\n+    return true;\n+  } else {\n+    assert(false, \"GlobalMemoryStatusEx failed in os::total_swap_space(): %lu\", ::GetLastError());\n+    return false;\n+  }\n@@ -876,1 +887,1 @@\n-jlong os::free_swap_space() {\n+bool os::free_swap_space(size_t& value) {\n@@ -879,2 +890,8 @@\n-  GlobalMemoryStatusEx(&ms);\n-  return (jlong) ms.ullAvailPageFile;\n+  BOOL res = GlobalMemoryStatusEx(&ms);\n+  if (res == TRUE) {\n+    value = static_cast<size_t>(ms.ullAvailPageFile);\n+    return true;\n+  } else {\n+    assert(false, \"GlobalMemoryStatusEx failed in os::free_swap_space(): %lu\", ::GetLastError());\n+    return false;\n+  }\n@@ -883,1 +900,1 @@\n-julong os::physical_memory() {\n+size_t os::physical_memory() {\n@@ -3951,1 +3968,1 @@\n-julong os::win32::_physical_memory           = 0;\n+size_t os::win32::_physical_memory           = 0;\n@@ -4181,2 +4198,5 @@\n-  GlobalMemoryStatusEx(&ms);\n-  _physical_memory = ms.ullTotalPhys;\n+  BOOL res = GlobalMemoryStatusEx(&ms);\n+  if (res != TRUE) {\n+    assert(false, \"GlobalMemoryStatusEx failed in os::win32::initialize_system_info(): %lu\", ::GetLastError());\n+  }\n+  _physical_memory = static_cast<size_t>(ms.ullTotalPhys);\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":38,"deletions":18,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-  static julong _physical_memory;\n+  static size_t _physical_memory;\n@@ -105,3 +105,3 @@\n-  static julong available_memory();\n-  static julong free_memory();\n-  static julong physical_memory() { return _physical_memory; }\n+  static bool available_memory(size_t& value);\n+  static bool free_memory(size_t& value);\n+  static size_t physical_memory() { return _physical_memory; }\n","filename":"src\/hotspot\/os\/windows\/os_windows.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1062,1 +1062,3 @@\n-  julong free_memory = os::free_memory();\n+  size_t free_memory = 0;\n+  \/\/ Return value ignored - defaulting to 0 on failure.\n+  (void)os::free_memory(free_memory);\n","filename":"src\/hotspot\/share\/compiler\/compileBroker.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,3 +65,2 @@\n-  julong memory = os::physical_memory();\n-  log_info_p(gc, init)(\"Memory: \" JULONG_FORMAT \"%s\",\n-                       byte_size_in_proper_unit(memory), proper_unit_for_byte_size(memory));\n+  size_t memory = os::physical_memory();\n+  log_info_p(gc, init)(\"Memory: \" PROPERFMT, PROPERFMTARGS(memory));\n","filename":"src\/hotspot\/share\/gc\/shared\/gcInitLogger.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,1 +34,2 @@\n-  log_info_p(gc, init)(\"Memory: \" JULONG_FORMAT \"M\", os::physical_memory() \/ M);\n+  const size_t memory = os::physical_memory();\n+  log_info_p(gc, init)(\"Memory: \" PROPERFMT, PROPERFMTARGS(memory));\n","filename":"src\/hotspot\/share\/gc\/z\/zLargePages.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -415,1 +415,1 @@\n-  return os::Linux::physical_memory();\n+  return static_cast<jlong>(os::Linux::physical_memory());\n@@ -417,1 +417,1 @@\n-  return os::physical_memory();\n+  return static_cast<jlong>(os::physical_memory());\n@@ -426,1 +426,4 @@\n-  return os::total_swap_space();\n+  size_t total_swap_space = 0;\n+  \/\/ Return value ignored - defaulting to 0 on failure.\n+  (void)os::total_swap_space(total_swap_space);\n+  return static_cast<jlong>(total_swap_space);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -531,1 +531,1 @@\n-  u8 totalPhysicalMemory = os::physical_memory();\n+  u8 totalPhysicalMemory = static_cast<u8>(os::physical_memory());\n@@ -534,1 +534,4 @@\n-  event.set_usedSize(totalPhysicalMemory - os::available_memory());\n+  size_t avail_mem = 0;\n+  \/\/ Return value ignored - defaulting to 0 on failure.\n+  (void)os::available_memory(avail_mem);\n+  event.set_usedSize(totalPhysicalMemory - static_cast<u8>(avail_mem));\n@@ -540,2 +543,8 @@\n-  event.set_totalSize(os::total_swap_space());\n-  event.set_freeSize(os::free_swap_space());\n+  size_t total_swap_space = 0;\n+  \/\/ Return value ignored - defaulting to 0 on failure.\n+  (void)os::total_swap_space(total_swap_space);\n+  event.set_totalSize(static_cast<s8>(total_swap_space));\n+  size_t free_swap_space = 0;\n+  \/\/ Return value ignored - defaulting to 0 on failure.\n+  (void)os::free_swap_space(free_swap_space);\n+  event.set_freeSize(static_cast<s8>(free_swap_space));\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -1361,1 +1361,3 @@\n-\n+    size_t avail_mem = 0;\n+    \/\/ Return value ignored - defaulting to 0 on failure.\n+    (void)os::available_memory(avail_mem);\n@@ -1363,2 +1365,2 @@\n-      (\"loading name=%s kind=%d (avail_mem=\" UINT64_FORMAT \"K)\",\n-       the_class->external_name(), _class_load_kind, os::available_memory() >> 10);\n+      (\"loading name=%s kind=%d (avail_mem=%zuK)\",\n+       the_class->external_name(), _class_load_kind, avail_mem >> 10);\n@@ -1528,1 +1530,2 @@\n-\n+    \/\/ Return value ignored - defaulting to 0 on failure.\n+    (void)os::available_memory(avail_mem);\n@@ -1530,1 +1533,1 @@\n-      (\"loaded name=%s (avail_mem=\" UINT64_FORMAT \"K)\", the_class->external_name(), os::available_memory() >> 10);\n+      (\"loaded name=%s (avail_mem=%zuK)\", the_class->external_name(), avail_mem >> 10);\n@@ -4438,0 +4441,3 @@\n+    size_t avail_mem = 0;\n+    \/\/ Return value ignored - defaulting to 0 on failure.\n+    (void)os::available_memory(avail_mem);\n@@ -4439,2 +4445,2 @@\n-      (\"redefined name=%s, count=%d (avail_mem=\" UINT64_FORMAT \"K)\",\n-       the_class->external_name(), java_lang_Class::classRedefinedCount(the_class->java_mirror()), os::available_memory() >> 10);\n+      (\"redefined name=%s, count=%d (avail_mem=%zuK)\",\n+       the_class->external_name(), java_lang_Class::classRedefinedCount(the_class->java_mirror()), avail_mem >> 10);\n","filename":"src\/hotspot\/share\/prims\/jvmtiRedefineClasses.cpp","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2508,2 +2508,2 @@\n-  LINUX_ONLY(return os::Linux::physical_memory();)\n-  return os::physical_memory();\n+  LINUX_ONLY(return static_cast<jlong>(os::Linux::physical_memory());)\n+  return static_cast<jlong>(os::physical_memory());\n@@ -2514,1 +2514,4 @@\n-  return os::available_memory();\n+  size_t avail_mem = 0;\n+  \/\/ Return value ignored - defaulting to 0 on failure.\n+  (void)os::available_memory(avail_mem);\n+  return static_cast<jlong>(avail_mem);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1520,1 +1520,1 @@\n-      phys_mem = os::physical_memory();\n+      phys_mem = static_cast<julong>(os::physical_memory());\n@@ -1526,1 +1526,1 @@\n-    phys_mem = FLAG_IS_DEFAULT(MaxRAM) ? MIN2(os::physical_memory(), (julong)MaxRAM)\n+    phys_mem = FLAG_IS_DEFAULT(MaxRAM) ? MIN2(static_cast<julong>(os::physical_memory()), (julong)MaxRAM)\n@@ -1648,1 +1648,2 @@\n-  julong total_memory = os::physical_memory();\n+  size_t phys_mem = os::physical_memory();\n+  julong total_memory = static_cast<julong>(phys_mem);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1186,1 +1186,2 @@\n-  size_t mem = physical_memory()\/G;\n+  size_t phys_mem = physical_memory();\n+  size_t mem = phys_mem\/G;\n@@ -1188,1 +1189,1 @@\n-    mem = physical_memory()\/M;\n+    mem = phys_mem\/M;\n@@ -1943,1 +1944,1 @@\n-\n+  size_t phys_mem = os::physical_memory();\n@@ -1946,1 +1947,1 @@\n-      (os::physical_memory() >= (server_memory - missing_memory))) {\n+      (phys_mem >= (server_memory - missing_memory))) {\n@@ -2205,1 +2206,1 @@\n-julong os::used_memory() {\n+bool os::used_memory(size_t& value) {\n@@ -2210,1 +2211,4 @@\n-      return mem_usage;\n+      value = static_cast<size_t>(mem_usage);\n+      return true;\n+    } else {\n+      return false;\n@@ -2214,1 +2218,6 @@\n-  return os::physical_memory() - os::available_memory();\n+  size_t avail_mem = 0;\n+  \/\/ Return value ignored - defaulting to 0 on failure.\n+  (void)os::available_memory(avail_mem);\n+  size_t phys_mem = os::physical_memory();\n+  value = phys_mem - avail_mem;\n+  return true;\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -335,3 +335,3 @@\n-  static julong available_memory();\n-  static julong used_memory();\n-  static julong free_memory();\n+  ATTRIBUTE_NODISCARD static bool available_memory(size_t& value);\n+  ATTRIBUTE_NODISCARD static bool used_memory(size_t& value);\n+  ATTRIBUTE_NODISCARD static bool free_memory(size_t& value);\n@@ -339,2 +339,2 @@\n-  static jlong total_swap_space();\n-  static jlong free_swap_space();\n+  ATTRIBUTE_NODISCARD static bool total_swap_space(size_t& value);\n+  ATTRIBUTE_NODISCARD static bool free_swap_space(size_t& value);\n@@ -342,1 +342,1 @@\n-  static julong physical_memory();\n+  static size_t physical_memory();\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2615,1 +2615,4 @@\n-    julong max_threads = os::free_memory() \/ (20 * M);\n+    size_t free_memory = 0;\n+    \/\/ Return value ignored - defaulting to 0 on failure.\n+    (void)os::free_memory(free_memory);\n+    julong max_threads = free_memory \/ (20 * M);\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -978,1 +978,1 @@\n-    return os::physical_memory();\n+    return static_cast<jlong>(os::physical_memory());\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,0 +59,3 @@\n+\/\/ Dummy placeholder for use of [[nodiscard]]\n+#define ATTRIBUTE_NODISCARD\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"}]}