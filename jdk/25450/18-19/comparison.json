{"files":[{"patch":"@@ -293,8 +293,2 @@\n-bool os::physical_memory(size_t& value) {\n-  size_t phys_mem = Aix::physical_memory();\n-  if (phys_mem == std::numeric_limits<size_t>::max()) {\n-    \/\/ os::Aix::get_meminfo failed\n-    return false;\n-  }\n-  value = phys_mem;\n-  return true;\n+void os::physical_memory(size_t& value) {\n+  value = Aix::physical_memory();\n@@ -335,7 +329,1 @@\n-  if (!os::Aix::get_meminfo(&mi)) {\n-    assert(false, \"os::Aix::get_meminfo failed.\");\n-    \/\/ to propagate error\n-    _physical_memory = std::numeric_limits<size_t>::max();\n-  } else {\n-    _physical_memory = static_cast<size_t>(mi.real_total);\n-  }\n+  _physical_memory = static_cast<size_t>(mi.real_total);\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":3,"deletions":15,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-bool os::physical_memory(size_t& value) {\n+void os::physical_memory(size_t& value) {\n@@ -213,1 +213,0 @@\n-  return true;\n@@ -1474,1 +1473,1 @@\n-  (void)os::physical_memory(phys_mem);\n+  os::physical_memory(phys_mem);\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -295,1 +295,1 @@\n-  if (OSContainer::is_containerized()) {\n+  if (OSContainer::is_containerized() && OSContainer::memory_and_swap_limit_in_bytes() > 0) {\n@@ -300,1 +300,1 @@\n-  }\n+  } \/\/ fallback to the host swap space if the container did return the unbound value of -1\n@@ -361,1 +361,1 @@\n-bool os::physical_memory(size_t& value) {\n+void os::physical_memory(size_t& value) {\n@@ -367,1 +367,0 @@\n-      return true;\n@@ -374,1 +373,0 @@\n-  return true;\n@@ -2577,1 +2575,1 @@\n-  (void)os::physical_memory(phys_mem);\n+  os::physical_memory(phys_mem);\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -897,8 +897,2 @@\n-bool os::physical_memory(size_t& value) {\n-  size_t phys_mem = win32::physical_memory();\n-  if (phys_mem == std::numeric_limits<size_t>::max()) {\n-    \/\/ indication that GlobalMemoryStatusEx failed\n-    return false;\n-  }\n-  value = phys_mem;\n-  return true;\n+void os::physical_memory(size_t& value) {\n+  value = win32::physical_memory();\n@@ -4164,6 +4158,2 @@\n-  if (!res) {\n-    \/\/ to indicate that GlobalMemoryStatusEx failed\n-    _physical_memory = std::numeric_limits<size_t>::max();\n-  } else {\n-    _physical_memory = static_cast<size_t>(ms.ullTotalPhys);\n-  }\n+  _physical_memory = static_cast<size_t>(ms.ullTotalPhys);\n+  \n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":4,"deletions":14,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -66,5 +66,2 @@\n-  if (os::physical_memory(memory)) {\n-    log_info_p(gc, init)(\"Memory: %zu%s\", byte_size_in_proper_unit(memory), proper_unit_for_byte_size(memory));\n-  } else {\n-    log_info_p(gc, init)(\"Memory: NA\");\n-  }\n+  os::physical_memory(memory);\n+  log_info_p(gc, init)(\"Memory: %zu%s\", byte_size_in_proper_unit(memory), proper_unit_for_byte_size(memory));\n","filename":"src\/hotspot\/share\/gc\/shared\/gcInitLogger.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -35,5 +35,2 @@\n-  if (os::physical_memory(memory)) {\n-    log_info_p(gc, init)(\"Memory: %zu%s\", byte_size_in_proper_unit(memory), proper_unit_for_byte_size(memory));\n-  } else {\n-    log_info_p(gc, init)(\"Memory: NA\");\n-  }\n+  os::physical_memory(memory);\n+  log_info_p(gc, init)(\"Memory: %zu%s\", byte_size_in_proper_unit(memory), proper_unit_for_byte_size(memory));\n","filename":"src\/hotspot\/share\/gc\/z\/zLargePages.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -418,2 +418,1 @@\n-  \/\/ Return value ignored - defaulting to 0 on failure.\n-  (void)os::physical_memory(phys_mem);\n+  os::physical_memory(phys_mem);\n","filename":"src\/hotspot\/share\/jfr\/jni\/jfrJniMethod.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -532,1 +532,1 @@\n-  (void)os::physical_memory(phys_mem);\n+  os::physical_memory(phys_mem);\n","filename":"src\/hotspot\/share\/jfr\/periodic\/jfrPeriodic.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2516,2 +2516,1 @@\n-  \/\/ Return value ignored - defaulting to 0 on failure\n-  (void)os::physical_memory(phys_mem);\n+  os::physical_memory(phys_mem);\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1524,1 +1524,1 @@\n-      (void)os::physical_memory(physical_mem_val);\n+      os::physical_memory(physical_mem_val);\n@@ -1531,1 +1531,1 @@\n-    (void)os::physical_memory(physical_mem_val);\n+    os::physical_memory(physical_mem_val);\n@@ -1655,2 +1655,1 @@\n-  \/\/ Return value ignored - defaulting to 0 on failure\n-  (void)os::physical_memory(phys_mem);\n+  os::physical_memory(phys_mem);\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1187,1 +1187,1 @@\n-  (void)physical_memory(phys_mem);\n+  physical_memory(phys_mem);\n@@ -1946,1 +1946,1 @@\n-  (void)os::physical_memory(phys_mem);\n+  os::physical_memory(phys_mem);\n@@ -2224,2 +2224,1 @@\n-  \/\/ Return value ignored - defaulting to 0 on failure\n-  (void)os::physical_memory(phys_mem);\n+  os::physical_memory(phys_mem);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -342,4 +342,1 @@\n-  \/\/ This method can return false on Windows and AIX. On Linux and BSD the reported value is\n-  \/\/ obtained by a system call in initialize_system_info() after a proper check. If that check\n-  \/\/ fails, a fatal VM error is reported.\n-  static bool physical_memory(size_t& value);\n+  static void physical_memory(size_t& value);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -980,2 +980,1 @@\n-      \/\/ Return value ignored - defaulting to 0 on failure\n-      (void)os::physical_memory(phys_mem);\n+      os::physical_memory(phys_mem);\n","filename":"src\/hotspot\/share\/services\/management.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}