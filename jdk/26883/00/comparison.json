{"files":[{"patch":"@@ -1991,0 +1991,1 @@\n+  INSN(vnsrl_wi, 0b1010111, 0b011, 0b101100);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2497,2 +2497,3 @@\n-  \/\/ preserve the payloads of non-canonical NaNs.\n-  __ vnsra_wi(dst, src, 13, Assembler::v0_t);\n+  \/\/ preserve the sign bit and exponent.\n+  __ vnsra_wi(dst, src, 26, Assembler::v0_t);\n+  __ vsll_vi(dst, dst, 10, Assembler::v0_t);\n@@ -2500,3 +2501,7 @@\n-  \/\/ preserve the sign bit.\n-  __ vnsra_wi(tmp, src, 26, Assembler::v0_t);\n-  __ vsll_vi(tmp, tmp, 10, Assembler::v0_t);\n+  \/\/ Preserve high order bit of float NaN in the\n+  \/\/ binary16 result NaN (tenth bit); OR in remaining\n+  \/\/ bits into lower 9 bits of binary 16 significand.\n+  \/\/\n+  \/\/ Check j.l.Float.floatToFloat16 for more information.\n+  \/\/ 10 bits\n+  __ vnsrl_wi(tmp, src, 13, Assembler::v0_t);\n@@ -2504,4 +2509,11 @@\n-  __ vor_vx(tmp, tmp, t0, Assembler::v0_t);\n-\n-  \/\/ get the result by merging sign bit and payloads of preserved non-canonical NaNs.\n-  __ vand_vv(dst, dst, tmp, Assembler::v0_t);\n+  __ vand_vx(tmp, tmp, t0, Assembler::v0_t);\n+  __ vor_vv(dst, dst, tmp, Assembler::v0_t);\n+  \/\/ 9 bits\n+  __ vnsrl_wi(tmp, src, 4, Assembler::v0_t);\n+  __ mv(t0, 0x1ff);\n+  __ vand_vx(tmp, tmp, t0, Assembler::v0_t);\n+  __ vor_vv(dst, dst, tmp, Assembler::v0_t);\n+  \/\/ 4 bits\n+  __ vnsrl_wi(tmp, src, 0, Assembler::v0_t);\n+  __ vand_vi(tmp, tmp, 0xf, Assembler::v0_t);\n+  __ vor_vv(dst, dst, tmp, Assembler::v0_t);\n@@ -2514,2 +2526,2 @@\n-void C2_MacroAssembler::float_to_float16_v(VectorRegister dst, VectorRegister src, VectorRegister vtmp,\n-                                           Register tmp, uint vector_length) {\n+void C2_MacroAssembler::float_to_float16_v(VectorRegister dst, VectorRegister src,\n+                                           VectorRegister vtmp, Register tmp, uint vector_length) {\n@@ -2519,1 +2531,1 @@\n-              (dst, src, vtmp, 28, float_to_float16_v_slow_path);\n+              (dst, src, vtmp, 56, float_to_float16_v_slow_path);\n@@ -2526,1 +2538,1 @@\n-  \/\/ replace v_fclass with vmseq_vv as performance optimization.\n+  \/\/ replace v_fclass with vmfne_vv as performance optimization.\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":25,"deletions":13,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @key randomness\n@@ -40,0 +41,1 @@\n+import java.util.Random;\n@@ -43,0 +45,1 @@\n+import jdk.test.lib.Utils;\n@@ -82,0 +85,1 @@\n+        Random rand = Utils.getRandomInstance();\n@@ -88,2 +92,3 @@\n-            if (i%39 == 0) {\n-                int x = 0x7f800000 + ((i\/39) << 13);\n+            if (i%3 == 0) {\n+                int shift = rand.nextInt(13+1);\n+                int x = 0x7f800000 + ((i\/39) << shift);\n@@ -131,1 +136,2 @@\n-        String msg = \"floatToFloat16 wrong result: idx: \" + idx + \", \\t\" + f +\n+        String msg = \"floatToFloat16 wrong result: idx: \" + idx +\n+                     \", \\t\" + f + \", hex: \" + Integer.toHexString(Float.floatToRawIntBits(f)) +\n@@ -170,1 +176,1 @@\n-            if (i%39 == 0) {\n+            if (i%3 == 0) {\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorization\/TestFloatConversionsVectorNaN.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"}]}