{"files":[{"patch":"@@ -412,0 +412,3 @@\n+    if (endpos < ZIP64_LOCHDR) {\n+        return -1;\n+    }\n@@ -574,0 +577,2 @@\n+    jlong cenlen64, cenoff64, centot64;\n+    unsigned char end64buf[ZIP64_ENDHDR];\n@@ -601,7 +606,13 @@\n-    if (cenlen == ZIP64_MAGICVAL || cenoff == ZIP64_MAGICVAL ||\n-        total == ZIP64_MAGICCOUNT) {\n-        unsigned char end64buf[ZIP64_ENDHDR];\n-        if ((end64pos = findEND64(zip, end64buf, endpos)) != -1) {\n-            cenlen = ZIP64_ENDSIZ(end64buf);\n-            cenoff = ZIP64_ENDOFF(end64buf);\n-            total = (jint)ZIP64_ENDTOT(end64buf);\n+    if ((end64pos = findEND64(zip, end64buf, endpos)) != -1) {\n+        \/\/ end64 candidate found,\n+        cenlen64 = ZIP64_ENDSIZ(end64buf);\n+        cenoff64 = ZIP64_ENDOFF(end64buf);\n+        centot64 = ZIP64_ENDTOT(end64buf);\n+        \/\/ double-check\n+        if ((cenlen64 == cenlen || cenlen == ZIP64_MAGICVAL) &&\n+            (cenoff64 == cenoff || cenoff == ZIP64_MAGICVAL) &&\n+            (centot64 == total || total == ZIP64_MAGICCOUNT)) {\n+            \/\/ to use the end64 values\n+            cenlen = cenlen64;\n+            cenoff = cenoff64;\n+            total = (jint)centot64;\n","filename":"src\/java.base\/share\/native\/libzip\/zip_util.c","additions":18,"deletions":7,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,108 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * BootClassPathZipFileCreator is a driver that writes to disk\n+ * multiple ZIP files each containing a single class file.\n+ * BootClassPathZipFileTest is invoked on each of the ZIP files to\n+ * confirm proper bootstrap class path handling of various ZIP\n+ * features.  File descriptions are as follows:\n+ * <ul>\n+ *   <li>NonZip64.zip: This ZIP file has no ZIP64 extensions.  It\n+ *   validates that 8334048 did not break bootstrap class path\n+ *   handling of non-ZIP64 ZIP files.<\/li>\n+ *   <li>TotalMagicZip64.zip: This ZIP file has ZIP64 extensions added\n+ *   due to the total number of entries (files added) reaching 65535,\n+ *   the maximum number expressible in the 16-bit \"total entries\"\n+ *   field of the central directory header (CEN).  It validates that\n+ *   8334048 did not break bootstrap class path handling of ZIP files\n+ *   containing ZIP64 magic values.<\/li>\n+ *   <li>NoMagicZip64.zip: Without 8334048's zip_util.c fix, when this\n+ *   ZIP file is specified on the bootstrap class path, HotSpot does\n+ *   not find the class file it contains.  The ZIP file has ZIP64\n+ *   extensions but does not have any magic values in its central\n+ *   directory header; prior to 8334048, zip_util.c failed to\n+ *   recognize as valid such ZIP files.<\/li>\n+ * <\/ul>\n+ *\/\n+\n+import java.net.URI;\n+import java.nio.file.FileSystem;\n+import java.nio.file.FileSystems;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.HashMap;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+\n+public class BootClassPathZipFileCreator {\n+\n+    static final String CLASS_NAME = \"Test8334048\";\n+    private static final String CLASS_FILE = CLASS_NAME + \".class\";\n+    private static final int ZIP64_MAGICCOUNT = 0xFFFF;\n+    private static byte[] classBytes;\n+\n+    private static void createClassBytes() {\n+        String code = \"class \" + CLASS_NAME + \"{}\";\n+        classBytes = new InMemoryJavaCompiler().compile(CLASS_NAME, code);\n+    }\n+\n+    static Path zipPath(String basename) {\n+        return Paths.get(System.getProperty(\"test.classes\",\n+                                            System.getProperty(\"user.dir\")),\n+                         basename);\n+    }\n+\n+    private static void createZip(String type) throws Exception {\n+        HashMap<String, Object> env = new HashMap<>();\n+        env.put(\"create\", \"true\");\n+        if (type.equals(\"NoMagicZip64\")) {\n+            env.put(\"forceZIP64End\", \"true\");\n+        }\n+        Path zip = zipPath(type + \".zip\");\n+        \/\/ Delete any existing ZIP file.\n+        Files.deleteIfExists(zip);\n+        \/\/ Create ZIP file.\n+        URI uri = URI.create(\"jar:\" + zip.toUri());\n+        FileSystem fs = FileSystems.newFileSystem(uri, env);\n+        if (type.equals(\"TotalMagicZip64\")) {\n+            byte[] empty = { };\n+            for (int i = 0; i < ZIP64_MAGICCOUNT - 1; i++) {\n+                Files.write(fs.getPath(\"\" + i), empty);\n+            }\n+            \/\/ CLASS_FILE is the 65535th file, pushing the end central\n+            \/\/ header's \"total entries\" field to 0xffff, also known as\n+            \/\/ ZIP64_MAGICCOUNT.\n+        }\n+        Files.write(fs.getPath(CLASS_FILE), classBytes);\n+        fs.close();\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        createClassBytes();\n+        createZip(\"NonZip64\");\n+        createZip(\"TotalMagicZip64\");\n+        createZip(\"NoMagicZip64\");\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/BootClassPathZipFileCreator.java","additions":108,"deletions":0,"binary":false,"changes":108,"status":"added"},{"patch":"@@ -0,0 +1,56 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8334048\n+ * @summary -Xbootclasspath can not read some ZIP64 ZIP files\n+ * @library \/test\/lib\n+ * @run driver BootClassPathZipFileCreator\n+ * @run main\/othervm -Xbootclasspath\/a:${test.classes}\/NonZip64.zip\n+ *       BootClassPathZipFileTest NonZip64.zip\n+ * @run main\/othervm -Xbootclasspath\/a:${test.classes}\/TotalMagicZip64.zip\n+ *       BootClassPathZipFileTest TotalMagicZip64.zip\n+ * @run main\/othervm -Xbootclasspath\/a:${test.classes}\/NoMagicZip64.zip\n+ *       BootClassPathZipFileTest NoMagicZip64.zip\n+ *\/\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class BootClassPathZipFileTest {\n+\n+    public static void main(String[] args) throws Exception {\n+        ClassLoader loader = BootClassPathZipFileTest.class.getClassLoader();\n+        \/\/ Ensure the ZIP file exists, otherwise the failure signature of\n+        \/\/ the ZIP file not existing is the same as the ZIP file not being\n+        \/\/ readable, that is, ClassNotFoundException on CLASS_NAME.\n+        Path zip = BootClassPathZipFileCreator.zipPath(args[0]);\n+        if (!Files.exists(zip)) {\n+            throw new RuntimeException(zip + \" does not exist\");\n+        }\n+        Class c = loader.loadClass(BootClassPathZipFileCreator.CLASS_NAME);\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/BootClassPathZipFileTest.java","additions":56,"deletions":0,"binary":false,"changes":56,"status":"added"}]}