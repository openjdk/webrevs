{"files":[{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4151444\n+ * @summary The maximize button acts like the restore button\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4151444\n+*\/\n+\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JLayeredPane;\n+import javax.swing.UIManager;\n+\n+\n+public class bug4151444 {\n+\n+    private static JFrame frame;\n+    private static JInternalFrame interFrame;\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+       - maximize the internal frame\n+       - then minimize the internal frame\n+       - then maximize the internal frame again\n+       - Check whether internal frame is maximized\n+       - Test will fail automatically even if \"Pass\" is pressed\n+         if internal frame is not maximized.\"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());\n+\n+        PassFailJFrame pfj = PassFailJFrame.builder()\n+                .title(\"bug4151444 Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(bug4151444::createTestUI)\n+                .build();\n+        try {\n+            pfj.awaitAndCheck();\n+        } finally {\n+            if (!interFrame.isMaximum()) {\n+                throw new RuntimeException (\"Test failed. The maximize button acts like the restore button\");\n+            }\n+        }\n+    }\n+\n+    private static JFrame createTestUI() {\n+        JFrame frame = new JFrame(\"bug4151444 frame\");\n+        JDesktopPane desktop = new JDesktopPane();\n+        frame.setContentPane(desktop);\n+        interFrame = new JInternalFrame(\n+            \"Internal frame\", true, true, true, true);\n+        desktop.add(interFrame, JLayeredPane.DEFAULT_LAYER);\n+        interFrame.setBounds(0, 0, 200, 100);\n+        interFrame.setVisible(true);\n+        frame.setSize(300, 200);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/bug4151444.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4215380\n+ * @summary Internal Frame should get focus\n+ * @key headful\n+ * @run main bug4215380\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Dimension;\n+import java.awt.event.InputEvent;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import javax.swing.JButton;\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.JLayeredPane;\n+import javax.swing.JPanel;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4215380 {\n+\n+    private static String button;\n+    private static JButton b;\n+    private static JFrame frame;\n+    private static JInternalFrame jif;\n+    private static volatile Point loc;\n+    private static volatile Dimension size;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"bug4215380\");\n+                JDesktopPane desktop = new JDesktopPane();\n+                frame.add(desktop, BorderLayout.CENTER);\n+\n+                jif = iFrame(1);\n+                desktop.add(jif, JLayeredPane.DEFAULT_LAYER);\n+                desktop.add(iFrame(2), JLayeredPane.DEFAULT_LAYER);\n+                frame.setSize(200, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                loc = b.getLocationOnScreen();\n+                size = b.getSize();\n+            });\n+            robot.mouseMove(loc.x + size.width \/ 2, loc.y + size.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(500);\n+            if (!(jif.isSelected()) && !button.equals(\"Frame 1\")) {\n+                throw new RuntimeException(\"Internal frame \\\"Frame 1\\\" should be selected...\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static JInternalFrame iFrame(int i) {\n+        JInternalFrame frame = new JInternalFrame(\"Frame \" + i);\n+        JPanel panel = new JPanel();\n+        JButton bt = new JButton(\"Button \" + i);\n+        if (i == 1) {\n+            b = bt;\n+        }\n+        bt.addActionListener(e -> button = ((JButton)e.getSource()).getText());\n+\n+        panel.add(bt);\n+\n+        frame.getContentPane().add(panel);\n+        frame.setBounds(10, i * 80 - 70, 120, 90);\n+        frame.setVisible(true);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/bug4215380.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4321312\n+ * @summary Verifies no Exception thrown from BasicInternalFrameUI$BorderListener\n+ * @key headful\n+ * @run main bug4321312\n+ *\/\n+\n+import java.awt.Dimension;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseEvent;\n+import java.awt.Point;\n+import java.awt.Robot;\n+\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.SwingUtilities;\n+import javax.swing.UIManager;\n+import javax.swing.UnsupportedLookAndFeelException;\n+\n+public class bug4321312 {\n+\n+    private static JFrame frame;\n+    private static MyInternalFrame jif;\n+    private static volatile Point loc;\n+    private static volatile Dimension size;\n+\n+    static boolean fails;\n+    static Exception exc;\n+\n+    private static synchronized boolean isFails() {\n+        return fails;\n+    }\n+\n+    private static synchronized void setFails(Exception e) {\n+        fails = true;\n+        exc = e;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                try {\n+                    UIManager.setLookAndFeel(\n+                            \"com.sun.java.swing.plaf.motif.MotifLookAndFeel\");\n+                } catch (ClassNotFoundException | InstantiationException\n+                         | UnsupportedLookAndFeelException\n+                         | IllegalAccessException e) {\n+                    throw new RuntimeException(e);\n+                }\n+\n+                frame = new JFrame(\"bug4321312\");\n+                JDesktopPane jdp = new JDesktopPane();\n+                frame.add(jdp);\n+\n+                jif = new MyInternalFrame(\"Internal Frame\", true);\n+                jdp.add(jif);\n+                jif.setSize(150, 150);\n+                jif.setVisible(true);\n+\n+                frame.setSize(200, 200);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                loc = jif.getLocationOnScreen();\n+                size = jif.getSize();\n+            });\n+            robot.mouseMove(loc.x + size.width \/ 2, loc.y + size.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            if (isFails()) {\n+                throw new RuntimeException(exc);\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    static class MyInternalFrame extends JInternalFrame {\n+        MyInternalFrame(String str, boolean b) {\n+            super(str, b);\n+        }\n+\n+        protected void processMouseEvent(MouseEvent e) {\n+            try {\n+                super.processMouseEvent(e);\n+            } catch (Exception exc) {\n+                setFails(exc);\n+            }\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/bug4321312.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -0,0 +1,109 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4322726\n+ * @summary Tests that JInternalFrame throws ArrayIndexOutOfBoundsException when Control-F4 pressed\n+ * @key headful\n+ * @run main bug4322726\n+ *\/\n+\n+import java.awt.event.KeyEvent;\n+import java.awt.Robot;\n+\n+import javax.swing.JDesktopPane;\n+import javax.swing.JFrame;\n+import javax.swing.JInternalFrame;\n+import javax.swing.KeyStroke;\n+import javax.swing.SwingUtilities;\n+import java.beans.PropertyVetoException;\n+\n+public class bug4322726 {\n+\n+    private static JFrame frame;\n+    private static JInternalFrame internalFrame;\n+    private static volatile boolean failed;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                frame = new JFrame(\"bug4322726\");\n+                frame.setSize(600, 400);\n+                TestDesktopPane desktopPane = new TestDesktopPane();\n+                frame.setContentPane(desktopPane);\n+                internalFrame = new JInternalFrame();\n+                internalFrame.setClosable(true);\n+                internalFrame.setMaximizable(true);\n+                internalFrame.setIconifiable(true);\n+                internalFrame.setResizable(true);\n+                internalFrame.setTitle(\"Internal Frame\");\n+                internalFrame.setSize(300, 200);\n+                internalFrame.setVisible(true);\n+                desktopPane.add(internalFrame);\n+\n+                frame.setSize(400, 400);\n+                frame.setLocationRelativeTo(null);\n+                frame.setVisible(true);\n+            });\n+            robot.waitForIdle();\n+            robot.delay(1000);\n+            SwingUtilities.invokeAndWait(() -> {\n+                try {\n+                    internalFrame.setSelected(true);\n+                } catch (PropertyVetoException e) {\n+                    throw new RuntimeException(\"PropertyVetoException thrown\");\n+                }\n+            });\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            robot.keyPress(KeyEvent.VK_CONTROL);\n+            robot.keyPress(KeyEvent.VK_F4);\n+            robot.keyRelease(KeyEvent.VK_F4);\n+            robot.keyRelease(KeyEvent.VK_CONTROL);\n+            robot.waitForIdle();\n+            robot.delay(200);\n+            if (failed) {\n+                throw new RuntimeException(\"Failed: index is out of bounds\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (frame != null) {\n+                    frame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    static class TestDesktopPane extends JDesktopPane {\n+        protected boolean processKeyBinding(KeyStroke ks, KeyEvent e, int condition, boolean pressed) {\n+            try {\n+                return super.processKeyBinding(ks, e, condition, pressed);\n+            } catch (ArrayIndexOutOfBoundsException ex) {\n+                failed = true;\n+            }\n+            return failed;\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JInternalFrame\/bug4322726.java","additions":109,"deletions":0,"binary":false,"changes":109,"status":"added"}]}