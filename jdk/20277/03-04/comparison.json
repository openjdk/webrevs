{"files":[{"patch":"@@ -44,10 +44,8 @@\n-  private:\n-    const char*  _log_message;\n-    Ticks _start;\n-\n-  public:\n-    GCLockerTimingDebugLogger(const char* log_message) :\n-      _log_message(log_message) {\n-        assert(_log_message != nullptr, \"GC locker debug message must be set.\");\n-        _start = Ticks::now();\n-      }\n+  const char* _log_message;\n+  Ticks _start;\n+\n+public:\n+  GCLockerTimingDebugLogger(const char* log_message) : _log_message(log_message) {\n+    assert(_log_message != nullptr, \"GC locker debug message must be set.\");\n+    _start = Ticks::now();\n+  }\n@@ -55,1 +53,4 @@\n-    ~GCLockerTimingDebugLogger() {\n+  ~GCLockerTimingDebugLogger() {\n+    Log(gc, jni) log;\n+    if (log.is_debug()) {\n+      ResourceMark rm; \/\/ JavaThread::name() allocates to convert to UTF8\n@@ -57,5 +58,1 @@\n-      Log(gc, jni) log;\n-      if (log.is_debug()) {\n-        ResourceMark rm; \/\/ JavaThread::name() allocates to convert to UTF8\n-        log.debug(\"%s Resumed after \" UINT64_FORMAT \"ms. Thread \\\"%s\\\".\", _log_message, elapsed_time.milliseconds(), Thread::current()->name());\n-      }\n+      log.debug(\"%s Resumed after \" UINT64_FORMAT \"ms. Thread \\\"%s\\\".\", _log_message, elapsed_time.milliseconds(), Thread::current()->name());\n@@ -63,0 +60,1 @@\n+  }\n@@ -158,1 +156,0 @@\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLocker.cpp","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"}]}