{"files":[{"patch":"@@ -36,0 +36,1 @@\n+#include \"utilities\/ticks.hpp\"\n@@ -41,0 +42,23 @@\n+\/\/ GCLockerTimingDebugLogger tracks specific timing information for GC lock waits.\n+class GCLockerTimingDebugLogger : public StackObj {\n+  private:\n+    const char*  _log_message;\n+    Ticks _start;\n+\n+  public:\n+    GCLockerTimingDebugLogger(const char* log_message) :\n+      _log_message(log_message) {\n+        assert(_log_message != nullptr, \"GC locker debug message must be set.\");\n+        _start = Ticks::now();\n+      }\n+\n+    ~GCLockerTimingDebugLogger() {\n+      const Tickspan elapsed_time = Ticks::now() - _start;\n+      Log(gc, jni) log;\n+      if (log.is_debug()) {\n+        ResourceMark rm; \/\/ JavaThread::name() allocates to convert to UTF8\n+        log.debug(\"%s Resumed after \" UINT64_FORMAT \"ms. Thread \\\"%s\\\".\", _log_message, elapsed_time.milliseconds(), Thread::current()->name());\n+      }\n+    }\n+};\n+\n@@ -117,0 +141,1 @@\n+    GCLockerTimingDebugLogger logger(\"Thread stalled by JNI critical section.\");\n@@ -130,0 +155,4 @@\n+  if (needs_gc()) {\n+    log_debug_jni(\"Blocking thread as there is a pending GC request\");\n+  }\n+\n@@ -131,0 +160,1 @@\n+    GCLockerTimingDebugLogger logger(\"Thread blocked to enter critical region.\");\n@@ -151,0 +181,1 @@\n+  log_debug_jni(\"Thread exiting critical region.\");\n@@ -164,1 +195,1 @@\n-      log_debug_jni(\"Performing GC after exiting critical section.\");\n+      log_debug_jni(\"Last thread exiting. Performing GC after exiting critical section.\");\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLocker.cpp","additions":32,"deletions":1,"binary":false,"changes":33,"status":"modified"}]}