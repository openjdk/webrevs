{"files":[{"patch":"@@ -92,8 +92,0 @@\n-void GCLocker::log_debug_jni(const char* msg, const elapsedTimer elapsed_timer) {\n-  Log(gc, jni) log;\n-  if (log.is_debug()) {\n-    ResourceMark rm; \/\/ JavaThread::name() allocates to convert to UTF8\n-    log.debug(\"%s \" JLONG_FORMAT \"ms. Thread \\\"%s\\\" %d locked.\", msg, elapsed_timer.milliseconds(), Thread::current()->name(), _jni_lock_count);\n-  }\n-}\n-\n@@ -124,3 +116,0 @@\n-  elapsedTimer elapsed_timer;\n-  elapsed_timer.start();\n-\n@@ -129,0 +118,1 @@\n+    GCLockerTimingDebugLogger logger(\"Thread stalled by JNI critical section.\");\n@@ -131,3 +121,0 @@\n-\n-  elapsed_timer.stop();\n-  log_debug_jni(\"Resuming thread after allocation stall due to JNI critical section after\", elapsed_timer);\n@@ -148,2 +135,1 @@\n-  elapsedTimer elapsed_timer;\n-  elapsed_timer.start();\n+\n@@ -151,0 +137,1 @@\n+    GCLockerTimingDebugLogger logger(\"Thread blocked to enter critical region.\");\n@@ -161,2 +148,0 @@\n-  elapsed_timer.stop();\n-  log_debug_jni(\"Thread unblocked to enter critical region after\", elapsed_timer);\n@@ -194,0 +179,15 @@\n+\n+GCLockerTimingDebugLogger::GCLockerTimingDebugLogger(const char* log_message) :\n+  _log_message(log_message) {\n+  assert(_log_message != nullptr, \"GC locker debug message must be set.\");\n+  _start = Ticks::now();\n+}\n+\n+GCLockerTimingDebugLogger::~GCLockerTimingDebugLogger() {\n+  const Tickspan elapsed_time = Ticks::now() - _start;\n+  Log(gc, jni) log;\n+  if (log.is_debug()) {\n+    ResourceMark rm; \/\/ JavaThread::name() allocates to convert to UTF8\n+    log.debug(\"%s Resumed after \" JLONG_FORMAT \"ms. Thread \\\"%s\\\".\", _log_message, elapsed_time.milliseconds(), Thread::current()->name());\n+  }\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLocker.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-  static void log_debug_jni(const char* msg, const elapsedTimer elapsed_timer);\n@@ -155,0 +154,13 @@\n+\n+\/*\n+ * GCLockerTimingDebugLogger tracks specific timing information for GC lock waits.\n+ *\/\n+class GCLockerTimingDebugLogger : public StackObj {\n+private:\n+  const char*  _log_message;\n+  Ticks _start;\n+\n+public:\n+  GCLockerTimingDebugLogger(const char* log_message);\n+  ~GCLockerTimingDebugLogger();\n+};\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/gc\/shared\/gcLocker.hpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"}]}