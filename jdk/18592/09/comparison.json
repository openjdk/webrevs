{"files":[{"patch":"@@ -81,0 +81,1 @@\n+#include \"utilities\/tuple.hpp\"\n@@ -179,1 +180,2 @@\n-\n+long os::Linux::kernel_version_major = -1;\n+long os::Linux::kernel_version_minor = -1;\n@@ -2969,0 +2971,9 @@\n+\/\/ Define MADV_POPULATE_READ here so we can build HotSpot on old systems.\n+#define MADV_POPULATE_READ_value 22\n+#ifndef MADV_POPULATE_READ\n+  #define MADV_POPULATE_READ MADV_POPULATE_READ_value\n+#else\n+  \/\/ Sanity-check our assumed default value if we build with a new enough libc.\n+  STATIC_ASSERT(MADV_POPULATE_READ == MADV_POPULATE_READ_value);\n+#endif\n+\n@@ -2978,0 +2989,18 @@\n+\/\/ Define MADV_DONTNEED_LOCKED here so we can build HotSpot on old systems.\n+#define MADV_DONTNEED_LOCKED_value 24\n+#ifndef MADV_DONTNEED_LOCKED\n+  #define MADV_DONTNEED_LOCKED MADV_DONTNEED_LOCKED_value\n+#else\n+  \/\/ Sanity-check our assumed default value if we build with a new enough libc.\n+  STATIC_ASSERT(MADV_DONTNEED_LOCKED == MADV_DONTNEED_LOCKED_value);\n+#endif\n+\n+\/\/ Define MADV_COLLAPSE here so we can build HotSpot on old systems.\n+#define MADV_COLLAPSE_value 25\n+#ifndef MADV_COLLAPSE\n+  #define MADV_COLLAPSE MADV_COLLAPSE_value\n+#else\n+  \/\/ Sanity-check our assumed default value if we build with a new enough libc.\n+  STATIC_ASSERT(MADV_COLLAPSE == MADV_COLLAPSE_value);\n+#endif\n+\n@@ -2988,0 +3017,21 @@\n+\/\/ Guard newer madv numbers by checking kernel versions, as downstream kernels\n+\/\/ might use the numbers as unexpected behaviors.\n+bool os::Linux::can_use_madvise_flag(int advice) {\n+  static constexpr Tuple<int, long, long> adviceVersions[] = {\n+    { MADV_POPULATE_READ,   5, 14 },\n+    { MADV_POPULATE_WRITE,  5, 14 },\n+    { MADV_DONTNEED_LOCKED, 5, 18 },\n+    { MADV_COLLAPSE,        6,  1 }\n+  };\n+\n+  for (auto &t : adviceVersions) {\n+    if (advice == t.get<0>()) {\n+      return kernel_version_major > t.get<1>() ||\n+        (kernel_version_major == t.get<1>() &&\n+         kernel_version_minor >= t.get<2>());\n+    }\n+  }\n+\n+  return true;\n+}\n+\n@@ -3038,0 +3088,12 @@\n+  if (HugePages::thp_mode() != THPMode::always && !UseTransparentHugePages) {\n+    \/\/ No THP. Use the platform-independent pretouch memory code.\n+    return page_size;\n+  }\n+\n+  if (!UseMadvPopulateWrite) {\n+    \/\/ Use small pages with the platform-independent pretouch memory code.\n+    \/\/ When using THP, we need to always pre-touch using small pages as the\n+    \/\/ OS will initially always use small pages.\n+    return os::vm_page_size();\n+  }\n+\n@@ -3039,18 +3101,3 @@\n-  \/\/ Use madvise to pretouch on Linux when THP is used, and fallback to the\n-  \/\/ common method if unsupported. THP can form right after madvise rather than\n-  \/\/ being assembled later.\n-  if (HugePages::thp_mode() == THPMode::always || UseTransparentHugePages) {\n-    int err = 0;\n-    if (UseMadvPopulateWrite &&\n-        ::madvise(first, len, MADV_POPULATE_WRITE) == -1) {\n-      err = errno;\n-    }\n-    if (!UseMadvPopulateWrite || err == EINVAL) { \/\/ Not to use or not supported\n-      \/\/ When using THP we need to always pre-touch using small pages as the\n-      \/\/ OS will initially always use small pages.\n-      return os::vm_page_size();\n-    } else if (err != 0) {\n-      log_info(gc, os)(\"::madvise(\" PTR_FORMAT \", \" SIZE_FORMAT \", %d) failed; \"\n-                       \"error='%s' (errno=%d)\", p2i(first), len,\n-                       MADV_POPULATE_WRITE, os::strerror(err), err);\n-    }\n+  if (::madvise(first, len, MADV_POPULATE_WRITE) != -1) {\n+    \/\/ Succeeded\n+    \/\/ 0 signals not to run the platform-independent pretouch memory code.\n@@ -3059,1 +3106,10 @@\n-  return page_size;\n+\n+  int err = errno;\n+  log_debug(gc, os)(\"Called madvise(\" PTR_FORMAT \", \" SIZE_FORMAT \", %d):\"\n+                    \" error='%s' (errno=%d), when THPMode::always=%d and\"\n+                    \" UseTransparentHugePages=%d\",\n+                    p2i(first), len, MADV_POPULATE_WRITE, os::strerror(err),\n+                    err, (int)(HugePages::thp_mode() == THPMode::always),\n+                    (int)UseTransparentHugePages);\n+\n+  return os::vm_page_size();\n@@ -4519,2 +4575,1 @@\n-  \/\/ Check the availability of MADV_POPULATE_WRITE.\n-  FLAG_SET_DEFAULT(UseMadvPopulateWrite, (::madvise(0, 0, MADV_POPULATE_WRITE) == 0));\n+  Linux::kernel_version(&Linux::kernel_version_major, &Linux::kernel_version_minor);\n@@ -4798,0 +4853,17 @@\n+  \/\/ Check the availability of MADV_POPULATE_WRITE.\n+  if (UseMadvPopulateWrite) {\n+    \/\/ Some downstream kernels recognize MADV_POPULATE_WRITE (23) as another\n+    \/\/ advice, so the check of versions is required here.\n+    \/\/ See https:\/\/github.com\/oracle\/linux-uek\/issues\/23\n+    bool supportMadvPopulateWrite =\n+      (Linux::can_use_madvise_flag(MADV_POPULATE_WRITE) &&\n+       (::madvise(0, 0, MADV_POPULATE_WRITE) == 0));\n+    if (!supportMadvPopulateWrite) {\n+      if (!FLAG_IS_DEFAULT(UseMadvPopulateWrite)) {\n+        warning(\"Platform does not support MADV_POPULATE_WRITE, \"\n+                \"disabling using it to pretouch (-XX:-UseMadvPopulateWrite)\");\n+      }\n+      FLAG_SET_ERGO(UseMadvPopulateWrite, false);\n+    }\n+  }\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":94,"deletions":22,"binary":false,"changes":116,"status":"modified"},{"patch":"@@ -46,0 +46,3 @@\n+  static long kernel_version_major;\n+  static long kernel_version_minor;\n+\n@@ -196,0 +199,2 @@\n+  static bool can_use_madvise_flag(int advice);\n+\n","filename":"src\/hotspot\/os\/linux\/os_linux.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-gc\/parallel\/TestAlwaysPreTouchBehavior.java 8325218 linux-all\n@@ -114,1 +113,0 @@\n-runtime\/Thread\/TestAlwaysPreTouchStacks.java 8324781 linux-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}