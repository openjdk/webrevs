{"files":[{"patch":"@@ -318,4 +318,1 @@\n-         * <p>This is the only public API by which anything outside this class can access\n-         * {@code Node} instances either directly, or by resolving symbolic links.\n-         *\n-         * <p>Note also that there is no reentrant calling back to this method from within\n+         * <p>Note that there is no reentrant calling back to this method from within\n@@ -333,0 +330,2 @@\n+                    \/\/ This may preform two lookups, one for a directory (in\n+                    \/\/ \/modules\/...) and one for a non-prefixed resource.\n@@ -352,0 +351,3 @@\n+         *\n+         * <p>Note that there is no reentrant calling back to this method from within\n+         * the node handling code.\n@@ -353,1 +355,1 @@\n-        synchronized Node findResourceNode(String moduleName, String resourcePath) {\n+        Node findResourceNode(String moduleName, String resourcePath) {\n@@ -356,1 +358,3 @@\n-            if (moduleName.contains(\"\/\") || resourcePath.startsWith(\"\/\")) {\n+            \/\/ Use indexOf() instead of contains(\"\/\") or startsWith(\"\/\") for\n+            \/\/ performance.\n+            if (moduleName.indexOf('\/') >= 0 || resourcePath.indexOf('\/') == 0) {\n@@ -361,6 +365,12 @@\n-            Node node = nodes.get(nodeName);\n-            if (node == null) {\n-                ImageLocation loc = findLocation(jimageName);\n-                if (loc != null && isResource(loc)) {\n-                    node = newResource(nodeName, loc);\n-                    nodes.put(node.getName(), node);\n+            \/\/ Synchronize as tightly as possible to reduce locking contention.\n+            synchronized (this) {\n+                Node node = nodes.get(nodeName);\n+                if (node == null) {\n+                    ImageLocation loc = findLocation(jimageName);\n+                    if (loc != null && isResource(loc)) {\n+                        node = newResource(nodeName, loc);\n+                        nodes.put(node.getName(), node);\n+                    }\n+                    return node;\n+                } else {\n+                    return node.isResource() ? node : null;\n@@ -368,3 +378,0 @@\n-                return node;\n-            } else {\n-                return node.isResource() ? node : null;\n@@ -375,1 +382,1 @@\n-        synchronized boolean containsResource(String moduleName, String resourcePath) {\n+        boolean containsResource(String moduleName, String resourcePath) {\n@@ -378,2 +385,4 @@\n-            \/\/ an ImageLocation.\n-            if (moduleName.contains(\"\/\") || resourcePath.startsWith(\"\/\")) {\n+            \/\/ an ImageLocation. This also means it doesn't need synchronization.\n+            \/\/ Use indexOf() instead of contains(\"\/\") or startsWith(\"\/\") for\n+            \/\/ performance.\n+            if (moduleName.indexOf('\/') >= 0 || resourcePath.indexOf('\/') == 0) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReader.java","additions":27,"deletions":18,"binary":false,"changes":45,"status":"modified"}]}