{"files":[{"patch":"@@ -51,0 +51,1 @@\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -132,1 +133,1 @@\n-    public void testResourceNodes_present(String modName, String resPath) throws IOException {\n+    public void testResource_present(String modName, String resPath) throws IOException {\n@@ -143,1 +144,0 @@\n-    \/\/ Important to ensure we cannot be fooled.\n@@ -157,5 +157,1 @@\n-            \/\/ Don't permit module names to contain paths.\n-            \"modfoo\/com\/bar:One.class\",\n-            \"modfoo\/com:bar\/One.class\",\n-            \"modules\/modfoo\/com:foo\/Alpha.class\",\n-            \/\/ Or module names\/paths to be empty.\n+            \/\/ Empty module names\/paths do not find resources.\n@@ -164,1 +160,1 @@\n-    public void testFindResourceNode_absent(String modName, String resPath) throws IOException {\n+    public void testResource_absent(String modName, String resPath) throws IOException {\n@@ -177,0 +173,14 @@\n+    @ParameterizedTest\n+    @CsvSource(delimiter = ':', value = {\n+            \/\/ Don't permit module names to contain paths.\n+            \"modfoo\/com\/bar:One.class\",\n+            \"modfoo\/com:bar\/One.class\",\n+            \"modules\/modfoo\/com:foo\/Alpha.class\",\n+    })\n+    public void testResource_invalid(String modName, String resPath) throws IOException {\n+        try (ImageReader reader = ImageReader.open(image)) {\n+            assertThrows(IllegalArgumentException.class, () -> reader.containsResource(modName, resPath));\n+            assertThrows(IllegalArgumentException.class, () -> reader.findResourceNode(modName, resPath));\n+        }\n+    }\n+\n","filename":"test\/jdk\/jdk\/internal\/jimage\/ImageReaderTest.java","additions":18,"deletions":8,"binary":false,"changes":26,"status":"modified"}]}