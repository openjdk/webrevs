{"files":[{"patch":"@@ -358,3 +358,1 @@\n-            \/\/ Use indexOf() instead of contains(\"\/\") or startsWith(\"\/\") for\n-            \/\/ performance.\n-            if (moduleName.indexOf('\/') >= 0 || resourcePath.indexOf('\/') == 0) {\n+            if (moduleName.indexOf('\/') >= 0) {\n@@ -385,3 +383,1 @@\n-            \/\/ Use indexOf() instead of contains(\"\/\") or startsWith(\"\/\") for\n-            \/\/ performance.\n-            if (moduleName.indexOf('\/') >= 0 || resourcePath.indexOf('\/') == 0) {\n+            if (moduleName.indexOf('\/') >= 0) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/jimage\/ImageReader.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -134,2 +134,9 @@\n-            assertNotNull(reader.findResourceNode(parts[0], parts[1]));\n-            assertTrue(reader.containsResource(parts[0], parts[1]));\n+            String modName = parts[0];\n+            String resPath = parts[1];\n+\n+            assertNotNull(reader.findResourceNode(modName, resPath));\n+            assertTrue(reader.containsResource(modName, resPath));\n+\n+            String canonicalNodeName = \"\/modules\/\" + modName + \"\/\" + resPath;\n+            Node node = reader.findNode(canonicalNodeName);\n+            assertTrue(node != null && node.isResource());\n@@ -147,0 +154,3 @@\n+            \/\/ Directories are not returned.\n+            \"modfoo:com\/foo\",\n+            \"modbar:com\/bar\",\n@@ -159,2 +169,11 @@\n-            assertNull(reader.findResourceNode(parts[0], parts[1]));\n-            assertFalse(reader.containsResource(parts[0], parts[1]));\n+            String modName = parts[0];\n+            String resPath = parts[1];\n+\n+            assertNull(reader.findResourceNode(modName, resPath));\n+            assertFalse(reader.containsResource(modName, resPath));\n+\n+            \/\/ Non-existent resources names should either not be found,\n+            \/\/ or (in the case of directory nodes) not be resources.\n+            String canonicalNodeName = \"\/modules\/\" + modName + \"\/\" + resPath;\n+            Node node = reader.findNode(canonicalNodeName);\n+            assertTrue(node == null || !node.isResource());\n","filename":"test\/jdk\/jdk\/internal\/jimage\/ImageReaderTest.java","additions":23,"deletions":4,"binary":false,"changes":27,"status":"modified"}]}