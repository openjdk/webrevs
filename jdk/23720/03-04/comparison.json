{"files":[{"patch":"@@ -1556,2 +1556,2 @@\n-            public VarHandle memorySegmentViewHandle(Class<?> carrier, MemoryLayout enclosing, long alignmentMask, ByteOrder order, boolean noStride, long offset) {\n-                return VarHandles.memorySegmentViewHandle(carrier, enclosing, alignmentMask, noStride, offset, order);\n+            public VarHandle memorySegmentViewHandle(Class<?> carrier, MemoryLayout enclosing, long alignmentMask, ByteOrder order, boolean constantOffset, long offset) {\n+                return VarHandles.memorySegmentViewHandle(carrier, enclosing, alignmentMask, constantOffset, offset, order);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -308,2 +308,2 @@\n-     * @param noStride if access path to this element has no stride; we can use fixed offset if there is none\n-     * @param offset the fixed offset, if there is no strides\n+     * @param constantOffset if access path has a constant offset value, i.e. it has no strides\n+     * @param offset the constant offset, if there is one\n@@ -314,1 +314,1 @@\n-                                             boolean noStride, long offset, ByteOrder byteOrder) {\n+                                             boolean constantOffset, long offset, ByteOrder byteOrder) {\n@@ -324,1 +324,1 @@\n-            form = VarHandleSegmentAsBytes.selectForm(alignmentMask, noStride);\n+            form = VarHandleSegmentAsBytes.selectForm(alignmentMask, constantOffset);\n@@ -326,1 +326,1 @@\n-            form = VarHandleSegmentAsChars.selectForm(alignmentMask, noStride);\n+            form = VarHandleSegmentAsChars.selectForm(alignmentMask, constantOffset);\n@@ -328,1 +328,1 @@\n-            form = VarHandleSegmentAsShorts.selectForm(alignmentMask, noStride);\n+            form = VarHandleSegmentAsShorts.selectForm(alignmentMask, constantOffset);\n@@ -330,1 +330,1 @@\n-            form = VarHandleSegmentAsInts.selectForm(alignmentMask, noStride);\n+            form = VarHandleSegmentAsInts.selectForm(alignmentMask, constantOffset);\n@@ -332,1 +332,1 @@\n-            form = VarHandleSegmentAsFloats.selectForm(alignmentMask, noStride);\n+            form = VarHandleSegmentAsFloats.selectForm(alignmentMask, constantOffset);\n@@ -334,1 +334,1 @@\n-            form = VarHandleSegmentAsLongs.selectForm(alignmentMask, noStride);\n+            form = VarHandleSegmentAsLongs.selectForm(alignmentMask, constantOffset);\n@@ -336,1 +336,1 @@\n-            form = VarHandleSegmentAsDoubles.selectForm(alignmentMask, noStride);\n+            form = VarHandleSegmentAsDoubles.selectForm(alignmentMask, constantOffset);\n@@ -338,1 +338,1 @@\n-            form = VarHandleSegmentAsBooleans.selectForm(alignmentMask, noStride);\n+            form = VarHandleSegmentAsBooleans.selectForm(alignmentMask, constantOffset);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/VarHandles.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-final class VarHandleSegmentAs$Type$s {\n+{#if[byte]?final:sealed} class VarHandleSegmentAs$Type$s {\n@@ -42,1 +42,1 @@\n-    static VarForm selectForm(long alignmentMask, boolean noStride) {\n+    static VarForm selectForm(long alignmentMask, boolean constantOffset) {\n@@ -44,1 +44,1 @@\n-        return noStride ? Unaligned.FORM : Unaligned.OFFSET_FORM;\n+        return constantOffset ? CONSTANT_OFFSET_FORM : TAKE_OFFSET_FORM;\n@@ -47,2 +47,2 @@\n-                (noStride ? Unaligned.FORM : Unaligned.OFFSET_FORM) :\n-                (noStride ? Aligned.FORM : Aligned.OFFSET_FORM);\n+                (constantOffset ? CONSTANT_OFFSET_FORM : TAKE_OFFSET_FORM) :\n+                (constantOffset ? VarHandleSegmentAs$Type$sAligned.CONSTANT_OFFSET_FORM : VarHandleSegmentAs$Type$sAligned.TAKE_OFFSET_FORM);\n@@ -52,1 +52,2 @@\n-    static {#if[byte]?final:sealed} class Unaligned {\n+    static final VarForm CONSTANT_OFFSET_FORM = new VarForm(VarHandleSegmentAs$Type$s.class, MemorySegment.class, $type$.class, long.class);\n+    static final VarForm TAKE_OFFSET_FORM = new VarForm(VarHandleSegmentAs$Type$s.class, MemorySegment.class, $type$.class, long.class, long.class);\n@@ -54,2 +55,1 @@\n-        static final VarForm FORM = new VarForm(Unaligned.class, MemorySegment.class, $type$.class, long.class);\n-        static final VarForm OFFSET_FORM = new VarForm(Unaligned.class, MemorySegment.class, $type$.class, long.class, long.class);\n+    VarHandleSegmentAs$Type$s() { throw new AssertionError(); }\n@@ -57,6 +57,4 @@\n-        Unaligned() { throw new AssertionError(); }\n-\n-        @ForceInline\n-        static $type$ get(VarHandle ob, Object obb, long base) {\n-            return get(ob, obb, base, ((SegmentVarHandle) ob).offset);\n-        }\n+    @ForceInline\n+    static $type$ get(VarHandle ob, Object obb, long base) {\n+        return get(ob, obb, base, ((SegmentVarHandle) ob).offset);\n+    }\n@@ -64,4 +62,4 @@\n-        @ForceInline\n-        static $type$ get(VarHandle ob, Object obb, long base, long offset) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, true);\n+    @ForceInline\n+    static $type$ get(VarHandle ob, Object obb, long base, long offset) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, true);\n@@ -69,5 +67,5 @@\n-            $rawType$ rawValue = SCOPED_MEMORY_ACCESS.get$RawType$Unaligned(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    handle.be);\n-            return $Type$.$rawType$BitsTo$Type$(rawValue);\n+        $rawType$ rawValue = SCOPED_MEMORY_ACCESS.get$RawType$Unaligned(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                handle.be);\n+        return $Type$.$rawType$BitsTo$Type$(rawValue);\n@@ -76,3 +74,3 @@\n-            return SCOPED_MEMORY_ACCESS.get$Type$(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset));\n+        return SCOPED_MEMORY_ACCESS.get$Type$(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset));\n@@ -80,4 +78,4 @@\n-            return SCOPED_MEMORY_ACCESS.get$Type$Unaligned(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    handle.be);\n+        return SCOPED_MEMORY_ACCESS.get$Type$Unaligned(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                handle.be);\n@@ -86,1 +84,1 @@\n-        }\n+    }\n@@ -88,4 +86,4 @@\n-        @ForceInline\n-        static void set(VarHandle ob, Object obb, long base, $type$ value) {\n-            set(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static void set(VarHandle ob, Object obb, long base, $type$ value) {\n+        set(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -93,4 +91,4 @@\n-        @ForceInline\n-        static void set(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static void set(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -98,5 +96,5 @@\n-            SCOPED_MEMORY_ACCESS.put$RawType$Unaligned(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    $Type$.$type$ToRaw$RawType$Bits(value),\n-                    handle.be);\n+        SCOPED_MEMORY_ACCESS.put$RawType$Unaligned(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                $Type$.$type$ToRaw$RawType$Bits(value),\n+                handle.be);\n@@ -105,4 +103,4 @@\n-            SCOPED_MEMORY_ACCESS.put$Type$(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    value);\n+        SCOPED_MEMORY_ACCESS.put$Type$(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                value);\n@@ -110,5 +108,5 @@\n-            SCOPED_MEMORY_ACCESS.put$Type$Unaligned(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    value,\n-                    handle.be);\n+        SCOPED_MEMORY_ACCESS.put$Type$Unaligned(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                value,\n+                handle.be);\n@@ -117,2 +115,0 @@\n-        }\n-#if[!byte]\n@@ -120,0 +116,2 @@\n+#if[!byte]\n+}\n@@ -121,1 +119,2 @@\n-    static final class Aligned extends Unaligned {\n+\/\/ This class must be accessed through non-aligned VarHandleSegmentAs$Type$s\n+final class VarHandleSegmentAs$Type$sAligned extends VarHandleSegmentAs$Type$s {\n@@ -123,2 +122,2 @@\n-        static final VarForm FORM = new VarForm(Aligned.class, Unaligned.FORM);\n-        static final VarForm OFFSET_FORM = new VarForm(Aligned.class, Unaligned.OFFSET_FORM);\n+    static final VarForm CONSTANT_OFFSET_FORM = new VarForm(VarHandleSegmentAs$Type$sAligned.class, VarHandleSegmentAs$Type$s.CONSTANT_OFFSET_FORM);\n+    static final VarForm TAKE_OFFSET_FORM = new VarForm(VarHandleSegmentAs$Type$sAligned.class, VarHandleSegmentAs$Type$s.TAKE_OFFSET_FORM);\n@@ -126,1 +125,1 @@\n-        Aligned() { throw new AssertionError(); }\n+    VarHandleSegmentAs$Type$sAligned() { throw new AssertionError(); }\n@@ -130,5 +129,5 @@\n-        @ForceInline\n-        static $rawType$ convEndian(boolean big, $type$ v) {\n-            $rawType$ rv = $Type$.$type$ToRaw$RawType$Bits(v);\n-            return big == BE ? rv : $RawBoxType$.reverseBytes(rv);\n-        }\n+    @ForceInline\n+    static $rawType$ convEndian(boolean big, $type$ v) {\n+        $rawType$ rv = $Type$.$type$ToRaw$RawType$Bits(v);\n+        return big == BE ? rv : $RawBoxType$.reverseBytes(rv);\n+    }\n@@ -136,5 +135,5 @@\n-        @ForceInline\n-        static $type$ convEndian(boolean big, $rawType$ rv) {\n-            rv = big == BE ? rv : $RawBoxType$.reverseBytes(rv);\n-            return $Type$.$rawType$BitsTo$Type$(rv);\n-        }\n+    @ForceInline\n+    static $type$ convEndian(boolean big, $rawType$ rv) {\n+        rv = big == BE ? rv : $RawBoxType$.reverseBytes(rv);\n+        return $Type$.$rawType$BitsTo$Type$(rv);\n+    }\n@@ -143,4 +142,4 @@\n-        @ForceInline\n-        static $type$ convEndian(boolean big, $type$ n) {\n-            return n;\n-        }\n+    @ForceInline\n+    static $type$ convEndian(boolean big, $type$ n) {\n+        return n;\n+    }\n@@ -148,4 +147,4 @@\n-        @ForceInline\n-        static $type$ convEndian(boolean big, $type$ n) {\n-            return big == BE ? n : $BoxType$.reverseBytes(n);\n-        }\n+    @ForceInline\n+    static $type$ convEndian(boolean big, $type$ n) {\n+        return big == BE ? n : $BoxType$.reverseBytes(n);\n+    }\n@@ -155,4 +154,4 @@\n-        @ForceInline\n-        static $type$ getVolatile(VarHandle ob, Object obb, long base) {\n-            return getVolatile(ob, obb, base, ((SegmentVarHandle) ob).offset);\n-        }\n+    @ForceInline\n+    static $type$ getVolatile(VarHandle ob, Object obb, long base) {\n+        return getVolatile(ob, obb, base, ((SegmentVarHandle) ob).offset);\n+    }\n@@ -160,9 +159,9 @@\n-        @ForceInline\n-        static $type$ getVolatile(VarHandle ob, Object obb, long base, long offset) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, true);\n-            return convEndian(handle.be,\n-                              SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),\n-                                      bb.unsafeGetBase(),\n-                                      offset(bb, base, offset)));\n-        }\n+    @ForceInline\n+    static $type$ getVolatile(VarHandle ob, Object obb, long base, long offset) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, true);\n+        return convEndian(handle.be,\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),\n+                                  bb.unsafeGetBase(),\n+                                  offset(bb, base, offset)));\n+    }\n@@ -170,4 +169,4 @@\n-        @ForceInline\n-        static void setVolatile(VarHandle ob, Object obb, long base, $type$ value) {\n-            setVolatile(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static void setVolatile(VarHandle ob, Object obb, long base, $type$ value) {\n+        setVolatile(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -175,9 +174,9 @@\n-        @ForceInline\n-        static void setVolatile(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            SCOPED_MEMORY_ACCESS.put$RawType$Volatile(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    convEndian(handle.be, value));\n-        }\n+    @ForceInline\n+    static void setVolatile(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        SCOPED_MEMORY_ACCESS.put$RawType$Volatile(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                convEndian(handle.be, value));\n+    }\n@@ -185,4 +184,4 @@\n-        @ForceInline\n-        static $type$ getAcquire(VarHandle ob, Object obb, long base) {\n-            return getAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset);\n-        }\n+    @ForceInline\n+    static $type$ getAcquire(VarHandle ob, Object obb, long base) {\n+        return getAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset);\n+    }\n@@ -190,9 +189,9 @@\n-        @ForceInline\n-        static $type$ getAcquire(VarHandle ob, Object obb, long base, long offset) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, true);\n-            return convEndian(handle.be,\n-                              SCOPED_MEMORY_ACCESS.get$RawType$Acquire(bb.sessionImpl(),\n-                                      bb.unsafeGetBase(),\n-                                      offset(bb, base, offset)));\n-        }\n+    @ForceInline\n+    static $type$ getAcquire(VarHandle ob, Object obb, long base, long offset) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, true);\n+        return convEndian(handle.be,\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Acquire(bb.sessionImpl(),\n+                                  bb.unsafeGetBase(),\n+                                  offset(bb, base, offset)));\n+    }\n@@ -200,4 +199,4 @@\n-        @ForceInline\n-        static void setRelease(VarHandle ob, Object obb, long base, $type$ value) {\n-            setRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static void setRelease(VarHandle ob, Object obb, long base, $type$ value) {\n+        setRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -205,9 +204,9 @@\n-        @ForceInline\n-        static void setRelease(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            SCOPED_MEMORY_ACCESS.put$RawType$Release(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    convEndian(handle.be, value));\n-        }\n+    @ForceInline\n+    static void setRelease(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        SCOPED_MEMORY_ACCESS.put$RawType$Release(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                convEndian(handle.be, value));\n+    }\n@@ -215,4 +214,4 @@\n-        @ForceInline\n-        static $type$ getOpaque(VarHandle ob, Object obb, long base) {\n-            return getOpaque(ob, obb, base, ((SegmentVarHandle) ob).offset);\n-        }\n+    @ForceInline\n+    static $type$ getOpaque(VarHandle ob, Object obb, long base) {\n+        return getOpaque(ob, obb, base, ((SegmentVarHandle) ob).offset);\n+    }\n@@ -220,9 +219,9 @@\n-        @ForceInline\n-        static $type$ getOpaque(VarHandle ob, Object obb, long base, long offset) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, true);\n-            return convEndian(handle.be,\n-                              SCOPED_MEMORY_ACCESS.get$RawType$Opaque(bb.sessionImpl(),\n-                                      bb.unsafeGetBase(),\n-                                      offset(bb, base, offset)));\n-        }\n+    @ForceInline\n+    static $type$ getOpaque(VarHandle ob, Object obb, long base, long offset) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, true);\n+        return convEndian(handle.be,\n+                          SCOPED_MEMORY_ACCESS.get$RawType$Opaque(bb.sessionImpl(),\n+                                  bb.unsafeGetBase(),\n+                                  offset(bb, base, offset)));\n+    }\n@@ -230,4 +229,4 @@\n-        @ForceInline\n-        static void setOpaque(VarHandle ob, Object obb, long base, $type$ value) {\n-            setOpaque(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static void setOpaque(VarHandle ob, Object obb, long base, $type$ value) {\n+        setOpaque(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -235,9 +234,9 @@\n-        @ForceInline\n-        static void setOpaque(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            SCOPED_MEMORY_ACCESS.put$RawType$Opaque(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    convEndian(handle.be, value));\n-        }\n+    @ForceInline\n+    static void setOpaque(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        SCOPED_MEMORY_ACCESS.put$RawType$Opaque(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                convEndian(handle.be, value));\n+    }\n@@ -246,4 +245,4 @@\n-        @ForceInline\n-        static boolean compareAndSet(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n-            return compareAndSet(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n-        }\n+    @ForceInline\n+    static boolean compareAndSet(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n+        return compareAndSet(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n+    }\n@@ -251,9 +250,9 @@\n-        @ForceInline\n-        static boolean compareAndSet(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            return SCOPED_MEMORY_ACCESS.compareAndSet$RawType$(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-        }\n+    @ForceInline\n+    static boolean compareAndSet(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        return SCOPED_MEMORY_ACCESS.compareAndSet$RawType$(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                convEndian(handle.be, expected), convEndian(handle.be, value));\n+    }\n@@ -261,4 +260,4 @@\n-        @ForceInline\n-        static $type$ compareAndExchange(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n-            return compareAndExchange(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n-        }\n+    @ForceInline\n+    static $type$ compareAndExchange(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n+        return compareAndExchange(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n+    }\n@@ -266,10 +265,10 @@\n-        @ForceInline\n-        static $type$ compareAndExchange(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            return convEndian(handle.be,\n-                              SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$(bb.sessionImpl(),\n-                                      bb.unsafeGetBase(),\n-                                      offset(bb, base, offset),\n-                                      convEndian(handle.be, expected), convEndian(handle.be, value)));\n-        }\n+    @ForceInline\n+    static $type$ compareAndExchange(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        return convEndian(handle.be,\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$(bb.sessionImpl(),\n+                                  bb.unsafeGetBase(),\n+                                  offset(bb, base, offset),\n+                                  convEndian(handle.be, expected), convEndian(handle.be, value)));\n+    }\n@@ -277,4 +276,4 @@\n-        @ForceInline\n-        static $type$ compareAndExchangeAcquire(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n-            return compareAndExchangeAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n-        }\n+    @ForceInline\n+    static $type$ compareAndExchangeAcquire(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n+        return compareAndExchangeAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n+    }\n@@ -282,10 +281,10 @@\n-        @ForceInline\n-        static $type$ compareAndExchangeAcquire(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            return convEndian(handle.be,\n-                              SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Acquire(bb.sessionImpl(),\n-                                      bb.unsafeGetBase(),\n-                                      offset(bb, base, offset),\n-                                      convEndian(handle.be, expected), convEndian(handle.be, value)));\n-        }\n+    @ForceInline\n+    static $type$ compareAndExchangeAcquire(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        return convEndian(handle.be,\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Acquire(bb.sessionImpl(),\n+                                  bb.unsafeGetBase(),\n+                                  offset(bb, base, offset),\n+                                  convEndian(handle.be, expected), convEndian(handle.be, value)));\n+    }\n@@ -293,4 +292,4 @@\n-        @ForceInline\n-        static $type$ compareAndExchangeRelease(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n-            return compareAndExchangeRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n-        }\n+    @ForceInline\n+    static $type$ compareAndExchangeRelease(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n+        return compareAndExchangeRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n+    }\n@@ -298,10 +297,10 @@\n-        @ForceInline\n-        static $type$ compareAndExchangeRelease(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            return convEndian(handle.be,\n-                              SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Release(bb.sessionImpl(),\n-                                      bb.unsafeGetBase(),\n-                                      offset(bb, base, offset),\n-                                      convEndian(handle.be, expected), convEndian(handle.be, value)));\n-        }\n+    @ForceInline\n+    static $type$ compareAndExchangeRelease(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        return convEndian(handle.be,\n+                          SCOPED_MEMORY_ACCESS.compareAndExchange$RawType$Release(bb.sessionImpl(),\n+                                  bb.unsafeGetBase(),\n+                                  offset(bb, base, offset),\n+                                  convEndian(handle.be, expected), convEndian(handle.be, value)));\n+    }\n@@ -309,4 +308,4 @@\n-        @ForceInline\n-        static boolean weakCompareAndSetPlain(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n-            return weakCompareAndSetPlain(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n-        }\n+    @ForceInline\n+    static boolean weakCompareAndSetPlain(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n+        return weakCompareAndSetPlain(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n+    }\n@@ -314,9 +313,9 @@\n-        @ForceInline\n-        static boolean weakCompareAndSetPlain(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Plain(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-        }\n+    @ForceInline\n+    static boolean weakCompareAndSetPlain(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Plain(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                convEndian(handle.be, expected), convEndian(handle.be, value));\n+    }\n@@ -324,4 +323,4 @@\n-        @ForceInline\n-        static boolean weakCompareAndSet(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n-            return weakCompareAndSet(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n-        }\n+    @ForceInline\n+    static boolean weakCompareAndSet(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n+        return weakCompareAndSet(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n+    }\n@@ -329,9 +328,9 @@\n-        @ForceInline\n-        static boolean weakCompareAndSet(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-        }\n+    @ForceInline\n+    static boolean weakCompareAndSet(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                convEndian(handle.be, expected), convEndian(handle.be, value));\n+    }\n@@ -339,4 +338,4 @@\n-        @ForceInline\n-        static boolean weakCompareAndSetAcquire(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n-            return weakCompareAndSetAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n-        }\n+    @ForceInline\n+    static boolean weakCompareAndSetAcquire(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n+        return weakCompareAndSetAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n+    }\n@@ -344,9 +343,9 @@\n-        @ForceInline\n-        static boolean weakCompareAndSetAcquire(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Acquire(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-        }\n+    @ForceInline\n+    static boolean weakCompareAndSetAcquire(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Acquire(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                convEndian(handle.be, expected), convEndian(handle.be, value));\n+    }\n@@ -354,4 +353,4 @@\n-        @ForceInline\n-        static boolean weakCompareAndSetRelease(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n-            return weakCompareAndSetRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n-        }\n+    @ForceInline\n+    static boolean weakCompareAndSetRelease(VarHandle ob, Object obb, long base, $type$ expected, $type$ value) {\n+        return weakCompareAndSetRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, expected, value);\n+    }\n@@ -359,9 +358,9 @@\n-        @ForceInline\n-        static boolean weakCompareAndSetRelease(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Release(bb.sessionImpl(),\n-                    bb.unsafeGetBase(),\n-                    offset(bb, base, offset),\n-                    convEndian(handle.be, expected), convEndian(handle.be, value));\n-        }\n+    @ForceInline\n+    static boolean weakCompareAndSetRelease(VarHandle ob, Object obb, long base, long offset, $type$ expected, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        return SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$Release(bb.sessionImpl(),\n+                bb.unsafeGetBase(),\n+                offset(bb, base, offset),\n+                convEndian(handle.be, expected), convEndian(handle.be, value));\n+    }\n@@ -369,4 +368,4 @@\n-        @ForceInline\n-        static $type$ getAndSet(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndSet(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndSet(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndSet(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -374,10 +373,10 @@\n-        @ForceInline\n-        static $type$ getAndSet(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            return convEndian(handle.be,\n-                              SCOPED_MEMORY_ACCESS.getAndSet$RawType$(bb.sessionImpl(),\n-                                      bb.unsafeGetBase(),\n-                                      offset(bb, base, offset),\n-                                      convEndian(handle.be, value)));\n-        }\n+    @ForceInline\n+    static $type$ getAndSet(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        return convEndian(handle.be,\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$(bb.sessionImpl(),\n+                                  bb.unsafeGetBase(),\n+                                  offset(bb, base, offset),\n+                                  convEndian(handle.be, value)));\n+    }\n@@ -385,4 +384,4 @@\n-        @ForceInline\n-        static $type$ getAndSetAcquire(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndSetAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndSetAcquire(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndSetAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -390,10 +389,10 @@\n-        @ForceInline\n-        static $type$ getAndSetAcquire(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            return convEndian(handle.be,\n-                              SCOPED_MEMORY_ACCESS.getAndSet$RawType$Acquire(bb.sessionImpl(),\n-                                      bb.unsafeGetBase(),\n-                                      offset(bb, base, offset),\n-                                      convEndian(handle.be, value)));\n-        }\n+    @ForceInline\n+    static $type$ getAndSetAcquire(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        return convEndian(handle.be,\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Acquire(bb.sessionImpl(),\n+                                  bb.unsafeGetBase(),\n+                                  offset(bb, base, offset),\n+                                  convEndian(handle.be, value)));\n+    }\n@@ -401,4 +400,4 @@\n-        @ForceInline\n-        static $type$ getAndSetRelease(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndSetRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndSetRelease(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndSetRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -406,10 +405,10 @@\n-        @ForceInline\n-        static $type$ getAndSetRelease(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n-            return convEndian(handle.be,\n-                              SCOPED_MEMORY_ACCESS.getAndSet$RawType$Release(bb.sessionImpl(),\n-                                      bb.unsafeGetBase(),\n-                                      offset(bb, base, offset),\n-                                      convEndian(handle.be, value)));\n-        }\n+    @ForceInline\n+    static $type$ getAndSetRelease(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+        return convEndian(handle.be,\n+                          SCOPED_MEMORY_ACCESS.getAndSet$RawType$Release(bb.sessionImpl(),\n+                                  bb.unsafeGetBase(),\n+                                  offset(bb, base, offset),\n+                                  convEndian(handle.be, value)));\n+    }\n@@ -419,4 +418,4 @@\n-        @ForceInline\n-        static $type$ getAndAdd(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndAdd(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndAdd(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndAdd(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -424,4 +423,4 @@\n-        @ForceInline\n-        static $type$ getAndAdd(VarHandle ob, Object obb, long base, long offset, $type$ delta) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndAdd(VarHandle ob, Object obb, long base, long offset, $type$ delta) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -429,1 +428,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -431,4 +430,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        delta);\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    delta);\n@@ -436,4 +435,2 @@\n-            } else {\n-                return getAndAddConvEndianWithCAS(bb, offset(bb, base, offset), delta);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndAddConvEndianWithCAS(bb, offset(bb, base, offset), delta);\n@@ -441,0 +438,2 @@\n+#end[byte]\n+    }\n@@ -442,4 +441,4 @@\n-        @ForceInline\n-        static $type$ getAndAddAcquire(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndAddAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndAddAcquire(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndAddAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -447,4 +446,4 @@\n-        @ForceInline\n-        static $type$ getAndAddAcquire(VarHandle ob, Object obb, long base, long offset, $type$ delta) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndAddAcquire(VarHandle ob, Object obb, long base, long offset, $type$ delta) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -452,1 +451,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -454,4 +453,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Acquire(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        delta);\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Acquire(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    delta);\n@@ -459,4 +458,2 @@\n-            } else {\n-                return getAndAddConvEndianWithCAS(bb, offset(bb, base, offset), delta);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndAddConvEndianWithCAS(bb, offset(bb, base, offset), delta);\n@@ -464,0 +461,2 @@\n+#end[byte]\n+    }\n@@ -465,4 +464,4 @@\n-        @ForceInline\n-        static $type$ getAndAddRelease(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndAddRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndAddRelease(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndAddRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -470,4 +469,4 @@\n-        @ForceInline\n-        static $type$ getAndAddRelease(VarHandle ob, Object obb, long base, long offset, $type$ delta) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndAddRelease(VarHandle ob, Object obb, long base, long offset, $type$ delta) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -475,1 +474,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -477,4 +476,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Release(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        delta);\n+            return SCOPED_MEMORY_ACCESS.getAndAdd$RawType$Release(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    delta);\n@@ -482,4 +481,2 @@\n-            } else {\n-                return getAndAddConvEndianWithCAS(bb, offset(bb, base, offset), delta);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndAddConvEndianWithCAS(bb, offset(bb, base, offset), delta);\n@@ -487,0 +484,2 @@\n+#end[byte]\n+    }\n@@ -489,11 +488,11 @@\n-        @ForceInline\n-        static $type$ getAndAddConvEndianWithCAS(AbstractMemorySegmentImpl  bb, long offset, $type$ delta) {\n-            $type$ nativeExpectedValue, expectedValue;\n-            Object base = bb.unsafeGetBase();\n-            do {\n-                nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n-                expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n-            } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n-                    nativeExpectedValue, $RawBoxType$.reverseBytes({#if[ShorterThanInt]?($type$) }(expectedValue + delta))));\n-            return expectedValue;\n-        }\n+    @ForceInline\n+    static $type$ getAndAddConvEndianWithCAS(AbstractMemorySegmentImpl  bb, long offset, $type$ delta) {\n+        $type$ nativeExpectedValue, expectedValue;\n+        Object base = bb.unsafeGetBase();\n+        do {\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+                nativeExpectedValue, $RawBoxType$.reverseBytes({#if[ShorterThanInt]?($type$) }(expectedValue + delta))));\n+        return expectedValue;\n+    }\n@@ -504,4 +503,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseOr(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndBitwiseOr(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseOr(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndBitwiseOr(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -509,4 +508,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseOr(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndBitwiseOr(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -514,1 +513,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -516,4 +515,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        value);\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    value);\n@@ -521,4 +520,2 @@\n-            } else {\n-                return getAndBitwiseOrConvEndianWithCAS(bb, offset(bb, base, offset), value);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndBitwiseOrConvEndianWithCAS(bb, offset(bb, base, offset), value);\n@@ -526,0 +523,2 @@\n+#end[byte]\n+    }\n@@ -527,4 +526,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseOrRelease(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndBitwiseOrRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseOrRelease(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndBitwiseOrRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -532,4 +531,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseOrRelease(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndBitwiseOrRelease(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -537,1 +536,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -539,4 +538,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Release(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        value);\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Release(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    value);\n@@ -544,4 +543,2 @@\n-            } else {\n-                return getAndBitwiseOrConvEndianWithCAS(bb, offset(bb, base, offset), value);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndBitwiseOrConvEndianWithCAS(bb, offset(bb, base, offset), value);\n@@ -549,0 +546,2 @@\n+#end[byte]\n+    }\n@@ -550,4 +549,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseOrAcquire(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndBitwiseOrAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseOrAcquire(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndBitwiseOrAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -555,4 +554,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseOrAcquire(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndBitwiseOrAcquire(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -560,1 +559,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -562,4 +561,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Acquire(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        value);\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseOr$RawType$Acquire(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    value);\n@@ -567,4 +566,2 @@\n-            } else {\n-                return getAndBitwiseOrConvEndianWithCAS(bb, offset(bb, base, offset), value);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndBitwiseOrConvEndianWithCAS(bb, offset(bb, base, offset), value);\n@@ -572,0 +569,2 @@\n+#end[byte]\n+    }\n@@ -574,11 +573,11 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseOrConvEndianWithCAS(AbstractMemorySegmentImpl  bb, long offset, $type$ value) {\n-            $type$ nativeExpectedValue, expectedValue;\n-            Object base = bb.unsafeGetBase();\n-            do {\n-                nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n-                expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n-            } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n-                    nativeExpectedValue, $RawBoxType$.reverseBytes({#if[ShorterThanInt]?($type$) }(expectedValue | value))));\n-            return expectedValue;\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseOrConvEndianWithCAS(AbstractMemorySegmentImpl  bb, long offset, $type$ value) {\n+        $type$ nativeExpectedValue, expectedValue;\n+        Object base = bb.unsafeGetBase();\n+        do {\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+                nativeExpectedValue, $RawBoxType$.reverseBytes({#if[ShorterThanInt]?($type$) }(expectedValue | value))));\n+        return expectedValue;\n+    }\n@@ -587,4 +586,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseAnd(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndBitwiseAnd(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseAnd(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndBitwiseAnd(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -592,4 +591,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseAnd(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndBitwiseAnd(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -597,1 +596,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -599,4 +598,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        value);\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    value);\n@@ -604,4 +603,2 @@\n-            } else {\n-                return getAndBitwiseAndConvEndianWithCAS(bb, offset(bb, base, offset), value);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndBitwiseAndConvEndianWithCAS(bb, offset(bb, base, offset), value);\n@@ -609,0 +606,2 @@\n+#end[byte]\n+    }\n@@ -610,4 +609,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseAndRelease(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndBitwiseAndRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseAndRelease(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndBitwiseAndRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -615,4 +614,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseAndRelease(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndBitwiseAndRelease(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -620,1 +619,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -622,4 +621,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Release(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        value);\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Release(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    value);\n@@ -627,4 +626,2 @@\n-            } else {\n-                return getAndBitwiseAndConvEndianWithCAS(bb, offset(bb, base, offset), value);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndBitwiseAndConvEndianWithCAS(bb, offset(bb, base, offset), value);\n@@ -632,0 +629,2 @@\n+#end[byte]\n+    }\n@@ -633,4 +632,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseAndAcquire(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndBitwiseAndAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseAndAcquire(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndBitwiseAndAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -639,4 +638,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseAndAcquire(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndBitwiseAndAcquire(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -644,1 +643,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -646,4 +645,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Acquire(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        value);\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseAnd$RawType$Acquire(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    value);\n@@ -651,4 +650,2 @@\n-            } else {\n-                return getAndBitwiseAndConvEndianWithCAS(bb, offset(bb, base, offset), value);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndBitwiseAndConvEndianWithCAS(bb, offset(bb, base, offset), value);\n@@ -656,0 +653,2 @@\n+#end[byte]\n+    }\n@@ -658,11 +657,11 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseAndConvEndianWithCAS(AbstractMemorySegmentImpl  bb, long offset, $type$ value) {\n-            $type$ nativeExpectedValue, expectedValue;\n-            Object base = bb.unsafeGetBase();\n-            do {\n-                nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n-                expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n-            } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n-                    nativeExpectedValue, $RawBoxType$.reverseBytes({#if[ShorterThanInt]?($type$) }(expectedValue & value))));\n-            return expectedValue;\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseAndConvEndianWithCAS(AbstractMemorySegmentImpl  bb, long offset, $type$ value) {\n+        $type$ nativeExpectedValue, expectedValue;\n+        Object base = bb.unsafeGetBase();\n+        do {\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+                nativeExpectedValue, $RawBoxType$.reverseBytes({#if[ShorterThanInt]?($type$) }(expectedValue & value))));\n+        return expectedValue;\n+    }\n@@ -671,4 +670,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseXor(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndBitwiseXor(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseXor(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndBitwiseXor(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -676,4 +675,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseXor(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndBitwiseXor(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -681,1 +680,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -683,4 +682,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        value);\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    value);\n@@ -688,4 +687,2 @@\n-            } else {\n-                return getAndBitwiseXorConvEndianWithCAS(bb, offset(bb, base, offset), value);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndBitwiseXorConvEndianWithCAS(bb, offset(bb, base, offset), value);\n@@ -693,0 +690,2 @@\n+#end[byte]\n+    }\n@@ -694,4 +693,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseXorRelease(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndBitwiseXorRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseXorRelease(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndBitwiseXorRelease(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -699,4 +698,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseXorRelease(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndBitwiseXorRelease(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -704,1 +703,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -706,4 +705,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Release(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        value);\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Release(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    value);\n@@ -711,4 +710,2 @@\n-            } else {\n-                return getAndBitwiseXorConvEndianWithCAS(bb, offset(bb, base, offset), value);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndBitwiseXorConvEndianWithCAS(bb, offset(bb, base, offset), value);\n@@ -716,0 +713,2 @@\n+#end[byte]\n+    }\n@@ -717,4 +716,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseXorAcquire(VarHandle ob, Object obb, long base, $type$ value) {\n-            return getAndBitwiseXorAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseXorAcquire(VarHandle ob, Object obb, long base, $type$ value) {\n+        return getAndBitwiseXorAcquire(ob, obb, base, ((SegmentVarHandle) ob).offset, value);\n+    }\n@@ -722,4 +721,4 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseXorAcquire(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n-            SegmentVarHandle handle = (SegmentVarHandle)ob;\n-            AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n+    @ForceInline\n+    static $type$ getAndBitwiseXorAcquire(VarHandle ob, Object obb, long base, long offset, $type$ value) {\n+        SegmentVarHandle handle = (SegmentVarHandle)ob;\n+        AbstractMemorySegmentImpl bb = handle.checkSegment(obb, base, false);\n@@ -727,1 +726,1 @@\n-            if (handle.be == BE) {\n+        if (handle.be == BE) {\n@@ -729,4 +728,4 @@\n-                return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Acquire(bb.sessionImpl(),\n-                        bb.unsafeGetBase(),\n-                        offset(bb, base, offset),\n-                        value);\n+            return SCOPED_MEMORY_ACCESS.getAndBitwiseXor$RawType$Acquire(bb.sessionImpl(),\n+                    bb.unsafeGetBase(),\n+                    offset(bb, base, offset),\n+                    value);\n@@ -734,4 +733,2 @@\n-            } else {\n-                return getAndBitwiseXorConvEndianWithCAS(bb, offset(bb, base, offset), value);\n-            }\n-#end[byte]\n+        } else {\n+            return getAndBitwiseXorConvEndianWithCAS(bb, offset(bb, base, offset), value);\n@@ -739,0 +736,2 @@\n+#end[byte]\n+    }\n@@ -741,11 +740,11 @@\n-        @ForceInline\n-        static $type$ getAndBitwiseXorConvEndianWithCAS(AbstractMemorySegmentImpl  bb, long offset, $type$ value) {\n-            $type$ nativeExpectedValue, expectedValue;\n-            Object base = bb.unsafeGetBase();\n-            do {\n-                nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n-                expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n-            } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n-                    nativeExpectedValue, $RawBoxType$.reverseBytes({#if[ShorterThanInt]?($type$) }(expectedValue ^ value))));\n-            return expectedValue;\n-        }\n+    @ForceInline\n+    static $type$ getAndBitwiseXorConvEndianWithCAS(AbstractMemorySegmentImpl  bb, long offset, $type$ value) {\n+        $type$ nativeExpectedValue, expectedValue;\n+        Object base = bb.unsafeGetBase();\n+        do {\n+            nativeExpectedValue = SCOPED_MEMORY_ACCESS.get$RawType$Volatile(bb.sessionImpl(),base, offset);\n+            expectedValue = $RawBoxType$.reverseBytes(nativeExpectedValue);\n+        } while (!SCOPED_MEMORY_ACCESS.weakCompareAndSet$RawType$(bb.sessionImpl(),base, offset,\n+                nativeExpectedValue, $RawBoxType$.reverseBytes({#if[ShorterThanInt]?($type$) }(expectedValue ^ value))));\n+        return expectedValue;\n+    }\n@@ -754,1 +753,0 @@\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/X-VarHandleSegmentView.java.template","additions":551,"deletions":553,"binary":false,"changes":1104,"status":"modified"},{"patch":"@@ -78,1 +78,1 @@\n-    VarHandle memorySegmentViewHandle(Class<?> carrier, MemoryLayout enclosing, long alignmentMask, ByteOrder order, boolean noStride, long offset);\n+    VarHandle memorySegmentViewHandle(Class<?> carrier, MemoryLayout enclosing, long alignmentMask, ByteOrder order, boolean constantOffset, long offset);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangInvokeAccess.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -209,4 +209,4 @@\n-        boolean noStride = strides.length == 0;\n-        \/\/ (MS, long, long) if any stride, (MS, long) if no stride\n-        VarHandle handle = Utils.makeRawSegmentViewVarHandle(rootLayout(), valueLayout, noStride, offset);\n-        if (!noStride) {\n+        boolean constantOffset = strides.length == 0;\n+        \/\/ (MS, long, long) if non-constant offset, (MS, long) if constant offset\n+        VarHandle handle = Utils.makeRawSegmentViewVarHandle(rootLayout(), valueLayout, constantOffset, offset);\n+        if (!constantOffset) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/LayoutPath.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -110,2 +110,2 @@\n-     * @param noStride if there is no stride, the VH uses the fixed offset instead of taking an offset\n-     * @param offset the offset in case there is no stride\n+     * @param constantOffset if the VH uses a constant offset instead of taking an offset\n+     * @param offset the offset if it is a constant\n@@ -114,1 +114,1 @@\n-    public static VarHandle makeRawSegmentViewVarHandle(MemoryLayout enclosing, ValueLayout layout, boolean noStride, long offset) {\n+    public static VarHandle makeRawSegmentViewVarHandle(MemoryLayout enclosing, ValueLayout layout, boolean constantOffset, long offset) {\n@@ -116,1 +116,1 @@\n-            assert direct.equals(layout) && noStride && offset == 0;\n+            assert direct.equals(layout) && constantOffset && offset == 0;\n@@ -128,1 +128,1 @@\n-        return makeRawSegmentViewVarHandleInternal(enclosing, layout, noStride, offset);\n+        return makeRawSegmentViewVarHandleInternal(enclosing, layout, constantOffset, offset);\n@@ -131,1 +131,1 @@\n-    private static VarHandle makeRawSegmentViewVarHandleInternal(MemoryLayout enclosing, ValueLayout layout, boolean noStride, long offset) {\n+    private static VarHandle makeRawSegmentViewVarHandleInternal(MemoryLayout enclosing, ValueLayout layout, boolean constantOffset, long offset) {\n@@ -138,1 +138,1 @@\n-                enclosing, layout.byteAlignment() - 1, layout.order(), noStride, offset);\n+                enclosing, layout.byteAlignment() - 1, layout.order(), constantOffset, offset);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/Utils.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}