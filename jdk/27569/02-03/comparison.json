{"files":[{"patch":"@@ -40,0 +40,4 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.nio.file.StandardOpenOption;\n@@ -57,5 +61,5 @@\n-    public static final int ARRAY_BUFFER = 0;\n-    public static final int ARRAY_BUFFER_READONLY = 1;\n-    public static final int DIRECT_BUFFER = 2;\n-    public static final int DIRECT_BUFFER_READONLY = 3;\n-\n+    static final int ARRAY_BUFFER = 0;\n+    static final int WRAPPED_BUFFER = 1;\n+    static final int DIRECT_BUFFER = 2;\n+    static final int FOREIGN_BUFFER = 3;\n+    static final int MAPPED_BUFFER = 4;\n@@ -66,8 +70,24 @@\n-                arguments(ARRAY_BUFFER, 0, false),\n-                arguments(ARRAY_BUFFER_READONLY, 0, true),\n-                arguments(DIRECT_BUFFER, 0, false),\n-                arguments(DIRECT_BUFFER_READONLY, 0, false),\n-                arguments(ARRAY_BUFFER, 16, false),\n-                arguments(ARRAY_BUFFER_READONLY, 16, true),\n-                arguments(DIRECT_BUFFER, 16, false),\n-                arguments(DIRECT_BUFFER_READONLY, 16, false)\n+                \/\/ type, readonly, pos, posToLimit\n+                arguments(ARRAY_BUFFER, false, 0, false),\n+                arguments(ARRAY_BUFFER, false, 16, false),\n+                arguments(ARRAY_BUFFER, true, 0, false),\n+                arguments(ARRAY_BUFFER, true, 16, false),\n+\n+                arguments(WRAPPED_BUFFER, false, 0, false),\n+                arguments(WRAPPED_BUFFER, false, 16, false),\n+                arguments(WRAPPED_BUFFER, true, 0, true),\n+                arguments(WRAPPED_BUFFER, true, 16, true),\n+\n+                arguments(DIRECT_BUFFER, false, 0, false),\n+                arguments(DIRECT_BUFFER, false, 16, false),\n+                arguments(DIRECT_BUFFER, true, 0, false),\n+                arguments(DIRECT_BUFFER, true, 16, false),\n+\n+                arguments(FOREIGN_BUFFER, false, 0, false),\n+                arguments(FOREIGN_BUFFER, false, 16, false),\n+                arguments(FOREIGN_BUFFER, true, 0, false),\n+                arguments(FOREIGN_BUFFER, true, 16, false),\n+\n+                \/\/ MapMode.READ_ONLY from READ fc, the bb is readonly\n+                arguments(MAPPED_BUFFER, false, 0, false),\n+                arguments(MAPPED_BUFFER, false, 16, false)\n@@ -77,4 +97,1 @@\n-    @ParameterizedTest()\n-    @MethodSource(\"bufferTypes\")\n-    void testDefineClassWithCustomLoaderByteBuffer(int type, int pos,  boolean posAtLimit) throws Exception {\n-        CustomClassLoader loader = new CustomClassLoader();\n+    static ByteBuffer getByteBufferWithTestClassBytes(int type, int pos) throws Exception {\n@@ -89,4 +106,4 @@\n-                var bb = ByteBuffer.wrap(classBytes).position(pos);\n-                Class<?> clazz = loader.defineClassFromByteBuffer(bb);\n-                assertInvocating(clazz);\n-                assertEquals(posAtLimit, bb.position() == bb.limit());\n+                return ByteBuffer.allocateDirect(classBytes.length)\n+                        .put(classBytes)\n+                        .flip()\n+                        .position(pos);\n@@ -94,5 +111,2 @@\n-            case ARRAY_BUFFER_READONLY -> {\n-                var bb = ByteBuffer.wrap(classBytes).position(pos).asReadOnlyBuffer();\n-                Class<?> clazz = loader.defineClassFromByteBuffer(bb);\n-                assertInvocating(clazz);\n-                assertEquals(posAtLimit, bb.position() == bb.limit());\n+            case WRAPPED_BUFFER -> {\n+                return ByteBuffer.wrap(classBytes).position(pos);\n@@ -101,10 +115,14 @@\n-                try (Arena arena = Arena.ofConfined()) {\n-                    var bb = arena.allocate(classBytes.length)\n-                            .asByteBuffer()\n-                            .put(classBytes)\n-                            .flip()\n-                            .position(pos);\n-                    Class<?> clazz = loader.defineClassFromByteBuffer(bb);\n-                    assertInvocating(clazz);\n-                    assertEquals(posAtLimit, bb.position() == bb.limit());\n-                }\n+                return ByteBuffer\n+                        .allocateDirect(classBytes.length)\n+                        .put(classBytes)\n+                        .flip()\n+                        .position(pos);\n+            }\n+            case FOREIGN_BUFFER -> {\n+                return Arena\n+                        .ofConfined()\n+                        .allocate(classBytes.length)\n+                        .asByteBuffer()\n+                        .put(classBytes)\n+                        .flip()\n+                        .position(pos);\n@@ -112,11 +130,8 @@\n-            case DIRECT_BUFFER_READONLY -> {\n-                try (Arena arena = Arena.ofConfined()) {\n-                    var bb = arena.allocate(classBytes.length)\n-                            .asByteBuffer()\n-                            .put(classBytes)\n-                            .flip()\n-                            .position(pos)\n-                            .asReadOnlyBuffer();\n-                    Class<?> clazz = loader.defineClassFromByteBuffer(bb);\n-                    assertInvocating(clazz);\n-                    assertEquals(posAtLimit, bb.position() == bb.limit());\n+            case MAPPED_BUFFER -> {\n+                Path tempDir = Paths.get(System.getProperty(\"test.classes\", \".\"));\n+                Files.createDirectories(tempDir);\n+                Path tempClassFile = tempDir.resolve(\"DefineClassDirectByteBuffer_Greeting.class\");\n+                Files.write(tempClassFile, classBytes);\n+                try (FileChannel fc = FileChannel.open(tempClassFile, StandardOpenOption.READ)) {\n+                    return fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size())\n+                            .position(pos);\n@@ -126,0 +141,16 @@\n+        return null;\n+    }\n+\n+    @ParameterizedTest()\n+    @MethodSource(\"bufferTypes\")\n+    void testDefineClassWithCustomLoaderByteBuffer(int type, boolean readonly, int pos, boolean posAtLimit)\n+            throws Exception\n+    {\n+        ByteBuffer bb = getByteBufferWithTestClassBytes(type, pos);\n+        if (readonly) {\n+            bb = bb.asReadOnlyBuffer();\n+        }\n+        CustomClassLoader loader = new CustomClassLoader();\n+        Class<?> clazz = loader.defineClassFromByteBuffer(bb);\n+        assertInvocating(clazz);\n+        assertEquals(posAtLimit, bb.position() == bb.limit());\n@@ -133,23 +164,10 @@\n-        if (mode.equals(\"Direct\")) {\n-            \/\/ ffm.arena\n-            try (Arena arena = Arena.ofConfined()) {\n-                var bb = arena.allocate(classBytes.length).asByteBuffer();\n-                bb.put(classBytes).flip();\n-                \/\/ reflectively call protected defineClass(String, ByteBuffer, ProtectionDomain)\n-                Method m = ClassLoader.class.getDeclaredMethod(\n-                        \"defineClass\", String.class, ByteBuffer.class, ProtectionDomain.class\n-                );\n-                m.setAccessible(true);\n-                Class<?> clazz = (Class<?>) m.invoke(builtin, null, bb, null);\n-                assertInvocating(clazz);\n-            }\n-        } else {\n-            var bb = ByteBuffer.wrap(classBytes);\n-            Method m = ClassLoader.class.getDeclaredMethod(\n-                    \"defineClass\", String.class, ByteBuffer.class, ProtectionDomain.class\n-            );\n-            m.setAccessible(true);\n-            Class<?> clazz = (Class<?>) m.invoke(builtin, null, bb, null);\n-            assertInvocating(clazz);\n-        }\n-     }\n+        var bb = getByteBufferWithTestClassBytes(\n+                mode.equals(\"Direct\") ? DIRECT_BUFFER : ARRAY_BUFFER, 0);\n+        \/\/ reflectively call protected defineClass(String, ByteBuffer, ProtectionDomain)\n+        Method m = ClassLoader.class.getDeclaredMethod(\n+                \"defineClass\", String.class, ByteBuffer.class, ProtectionDomain.class\n+        );\n+        m.setAccessible(true);\n+        Class<?> clazz = (Class<?>) m.invoke(builtin, null, bb, null);\n+        assertInvocating(clazz);\n+    }\n@@ -172,3 +190,4 @@\n-            public class Greeting {\n-                public String hello() {\n-                    return \"Hello\";\n+                public class Greeting {\n+                    public String hello() {\n+                        return \"Hello\";\n+                    }\n@@ -176,2 +195,1 @@\n-            }\n-            \"\"\";\n+                \"\"\";\n@@ -180,11 +198,11 @@\n-            cafebabe0000004600110a000200030700040c000500060100106a617661\n-            2f6c616e672f4f626a6563740100063c696e69743e010003282956080008\n-            01000548656c6c6f07000a0100084772656574696e67010004436f646501\n-            000f4c696e654e756d6265725461626c6501000568656c6c6f0100142829\n-            4c6a6176612f6c616e672f537472696e673b01000a536f7572636546696c\n-            6501000d4772656574696e672e6a61766100210009000200000000000200\n-            01000500060001000b0000001d00010001000000052ab70001b100000001\n-            000c000000060001000000010001000d000e0001000b0000001b00010001\n-            000000031207b000000001000c000000060001000000030001000f000000\n-            020010\n-            \"\"\";\n+                cafebabe0000004600110a000200030700040c000500060100106a617661\n+                2f6c616e672f4f626a6563740100063c696e69743e010003282956080008\n+                01000548656c6c6f07000a0100084772656574696e67010004436f646501\n+                000f4c696e654e756d6265725461626c6501000568656c6c6f0100142829\n+                4c6a6176612f6c616e672f537472696e673b01000a536f7572636546696c\n+                6501000d4772656574696e672e6a61766100210009000200000000000200\n+                01000500060001000b0000001d00010001000000052ab70001b100000001\n+                000c000000060001000000010001000d000e0001000b0000001b00010001\n+                000000031207b000000001000c000000060001000000030001000f000000\n+                020010\n+                \"\"\";\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/defineClass\/DefineClassDirectByteBuffer.java","additions":104,"deletions":86,"binary":false,"changes":190,"status":"modified"}]}