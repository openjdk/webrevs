{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.lang.foreign.Arena;\n@@ -36,0 +37,1 @@\n+import java.nio.ByteBuffer;\n@@ -1040,1 +1042,1 @@\n-    protected final Class<?> defineClass(String name, java.nio.ByteBuffer b,\n+    protected final Class<?> defineClass(String name, ByteBuffer b,\n@@ -1060,2 +1062,12 @@\n-        protectionDomain = preDefineClass(name, protectionDomain);\n-        String source = defineClassSourceLocation(protectionDomain);\n+        boolean trusted = this instanceof BuiltinClassLoader;\n+        if (trusted) {\n+            return defineClass(name, b, len, protectionDomain);\n+        } else {\n+            \/\/ make copy from input byte buffer\n+            try (var arena = Arena.ofConfined()) {\n+                ByteBuffer bb = arena.allocate(len).asByteBuffer();\n+                bb.put(0, b, b.position(), len);\n+                return defineClass(name, bb, len, protectionDomain);\n+            }\n+        }\n+    }\n@@ -1063,0 +1075,3 @@\n+    private Class<?> defineClass(String name, ByteBuffer b, int len, ProtectionDomain pb) {\n+        pb = preDefineClass(name, pb);\n+        String source = defineClassSourceLocation(pb);\n@@ -1065,2 +1080,2 @@\n-            Class<?> c = defineClass2(this, name, b, b.position(), len, protectionDomain, source);\n-            postDefineClass(c, protectionDomain);\n+            Class<?> c = defineClass2(this, name, b, b.position(), len, pb, source);\n+            postDefineClass(c, pb);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ClassLoader.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test various cases of passing java.nio.ByteBuffers to defineClass().\n+ * @bug 8365588\n+ *\n+ * @library \/lib\/testlibrary\/java\/lang\n+ * @build DefineClassDirectByteBuffer\n+ * @run junit\/othervm --add-opens java.base\/java.lang=ALL-UNNAMED -Dmode=Direct DefineClassDirectByteBuffer\n+ * @run junit\/othervm --add-opens java.base\/java.lang=ALL-UNNAMED -Dmode=Heap DefineClassDirectByteBuffer\n+ *\/\n+\n+import java.lang.foreign.Arena;\n+import java.lang.reflect.Method;\n+import java.nio.*;\n+import java.nio.channels.*;\n+import java.io.*;\n+import java.security.ProtectionDomain;\n+import java.util.HexFormat;\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class DefineClassDirectByteBuffer {\n+\n+    static String mode = System.getProperty(\"mode\", \"Direct\");\n+\n+    \/\/ -------- untrusted path (custom loader) --------\n+    @Test\n+    void testDefineClassWithCustomLoaderHeapBuffer() throws Exception {\n+        CustomClassLoader loader = new CustomClassLoader();\n+        Class<?> clazz = loader.defineClassFromHeapBuffer();\n+        assertInvocating(clazz);\n+    }\n+\n+    @Test\n+    void testDefineClassWithCustomLoaderDirectBuffer() throws Exception {\n+        CustomClassLoader loader = new CustomClassLoader();\n+        Class<?> clazz = loader.defineClassFromDirectBuffer();\n+        assertInvocating(clazz);\n+    }\n+\n+    \/\/ -------- trusted path (BuiltinClassLoader) --------\n+    @Test\n+    void testDefineClassWithBuiltinLoaderByteBuffer() throws Exception {\n+        var classBytes = getTestClassBytes();\n+        var builtin = ClassLoader.getPlatformClassLoader();\n+        if (mode.equals(\"Direct\")) {\n+            \/\/ ffm.arena\n+            try (Arena arena = Arena.ofConfined()) {\n+                var bb = arena.allocate(classBytes.length).asByteBuffer();\n+                bb.put(classBytes).flip();\n+                \/\/ reflectively call protected defineClass(String, ByteBuffer, ProtectionDomain)\n+                Method m = ClassLoader.class.getDeclaredMethod(\n+                        \"defineClass\", String.class, ByteBuffer.class, ProtectionDomain.class\n+                );\n+                m.setAccessible(true);\n+                Class<?> clazz = (Class<?>) m.invoke(builtin, null, bb, null);\n+                assertInvocating(clazz);\n+            }\n+        } else {\n+            var bb = ByteBuffer.wrap(classBytes);\n+            Method m = ClassLoader.class.getDeclaredMethod(\n+                    \"defineClass\", String.class, ByteBuffer.class, ProtectionDomain.class\n+            );\n+            m.setAccessible(true);\n+            Class<?> clazz = (Class<?>) m.invoke(builtin, null, bb, null);\n+            assertInvocating(clazz);\n+        }\n+     }\n+\n+    \/\/ -------- shared helpers --------\n+    private static void assertInvocating(Class<?> clazz) throws Exception {\n+        var instance = clazz.getDeclaredConstructor().newInstance();\n+        var m = clazz.getMethod(\"hello\");\n+        assertEquals(\"Hello\", m.invoke(instance));\n+    }\n+\n+    private static class CustomClassLoader extends ClassLoader {\n+        Class<?> defineClassFromHeapBuffer() throws Exception {\n+            byte[] classBytes = getTestClassBytes();\n+            ByteBuffer bb = ByteBuffer.wrap(classBytes);\n+            return defineClass(null, bb, null);\n+        }\n+\n+        Class<?> defineClassFromDirectBuffer() throws Exception {\n+            byte[] classBytes = getTestClassBytes();\n+            try (Arena arena = Arena.ofConfined()) {\n+                var bb = arena.allocate(classBytes.length).asByteBuffer();\n+                bb.put(classBytes).flip();\n+                return defineClass(null, bb, null);\n+            }\n+        }\n+    }\n+\n+    private static byte[] getTestClassBytes() throws Exception {\n+        final String source = \"\"\"\n+            public class Greeting {\n+                public String hello() {\n+                    return \"Hello\";\n+                }\n+            }\n+            \"\"\";\n+        \/\/ (externally) compiled content of the above source, represented as hex\n+        final String classBytesHex = \"\"\"\n+            cafebabe0000004600110a000200030700040c000500060100106a617661\n+            2f6c616e672f4f626a6563740100063c696e69743e010003282956080008\n+            01000548656c6c6f07000a0100084772656574696e67010004436f646501\n+            000f4c696e654e756d6265725461626c6501000568656c6c6f0100142829\n+            4c6a6176612f6c616e672f537472696e673b01000a536f7572636546696c\n+            6501000d4772656574696e672e6a61766100210009000200000000000200\n+            01000500060001000b0000001d00010001000000052ab70001b100000001\n+            000c000000060001000000010001000d000e0001000b0000001b00010001\n+            000000031207b000000001000c000000060001000000030001000f000000\n+            020010\n+            \"\"\";\n+        return HexFormat.of().parseHex(classBytesHex.replaceAll(\"\\n\", \"\"));\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/defineClass\/DefineClassDirectByteBuffer.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.lang.foreign.Arena;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.TimeUnit;\n+import java.util.HexFormat;\n+\n+\/**\n+ * Tests java.lang.ClassLoader.defineClass(ByteBuffer)\n+ *\/\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+public class ClassLoaderDefineClass {\n+\n+    private byte[] classBytes;\n+    private ByteBuffer directBuffer;\n+    private ByteBuffer heapBuffer;\n+\n+    @Setup(Level.Iteration)\n+    public void setup() throws Exception {\n+        classBytes = getTestClassBytes();\n+        directBuffer = Arena.ofConfined()\n+            .allocate(classBytes.length)\n+            .asByteBuffer()\n+            .put(classBytes)\n+            .flip();\n+        heapBuffer = ByteBuffer.wrap(classBytes);\n+    }\n+\n+    @Benchmark\n+    public void testDefineClassByteBufferHeap(Blackhole bh) throws Exception {\n+        bh.consume(new DummyClassLoader().defineClassFromHeapBuffer(heapBuffer));\n+    }\n+\n+    @Benchmark\n+    public void testDefineClassByteBufferDirect(Blackhole bh) throws Exception {\n+        bh.consume(new DummyClassLoader().defineClassFromDirectBuffer(directBuffer));\n+    }\n+\n+    private static final class DummyClassLoader extends ClassLoader {\n+\n+        Class<?> defineClassFromHeapBuffer(ByteBuffer bb) throws Exception {\n+            bb.rewind();\n+            return defineClass(null, bb, null);\n+        }\n+\n+        Class<?> defineClassFromDirectBuffer(ByteBuffer bb) throws Exception {\n+            bb.rewind();\n+            return defineClass(null, bb, null);\n+        }\n+    }\n+\n+    private static byte[] getTestClassBytes() throws Exception {\n+        final String source = \"\"\"\n+        public class Greeting {\n+            public String hello() {\n+                return \"Hello\";\n+            }\n+        }\n+        \"\"\";\n+        \/\/ (externally) compiled content of the above source, represented as hex\n+        final String classBytesHex = \"\"\"\n+        cafebabe0000004600110a000200030700040c000500060100106a617661\n+        2f6c616e672f4f626a6563740100063c696e69743e010003282956080008\n+        01000548656c6c6f07000a0100084772656574696e67010004436f646501\n+        000f4c696e654e756d6265725461626c6501000568656c6c6f0100142829\n+        4c6a6176612f6c616e672f537472696e673b01000a536f7572636546696c\n+        6501000d4772656574696e672e6a61766100210009000200000000000200\n+        01000500060001000b0000001d00010001000000052ab70001b100000001\n+        000c000000060001000000010001000d000e0001000b0000001b00010001\n+        000000031207b000000001000c000000060001000000030001000f000000\n+        020010\n+        \"\"\";\n+        return HexFormat.of().parseHex(classBytesHex.replaceAll(\"\\n\", \"\"));\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/ClassLoaderDefineClass.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}