{"files":[{"patch":"@@ -42,0 +42,1 @@\n+import java.util.stream.Stream;\n@@ -44,0 +45,4 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -46,0 +51,1 @@\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n@@ -48,1 +54,1 @@\n-\n+    \/\/ this is for the trusted\/biltin classloader\n@@ -51,0 +57,6 @@\n+    public static final int ARRAY_BUFFER = 0;\n+    public static final int ARRAY_BUFFER_READONLY = 1;\n+    public static final int DIRECT_BUFFER = 2;\n+    public static final int DIRECT_BUFFER_READONLY = 3;\n+\n+\n@@ -52,5 +64,11 @@\n-    @Test\n-    void testDefineClassWithCustomLoaderHeapBuffer() throws Exception {\n-        CustomClassLoader loader = new CustomClassLoader();\n-        Class<?> clazz = loader.defineClassFromHeapBuffer();\n-        assertInvocating(clazz);\n+    static Stream<Arguments> bufferTypes() {\n+        return Stream.of(\n+                arguments(ARRAY_BUFFER, 0, false),\n+                arguments(ARRAY_BUFFER_READONLY, 0, true),\n+                arguments(DIRECT_BUFFER, 0, false),\n+                arguments(DIRECT_BUFFER_READONLY, 0, false),\n+                arguments(ARRAY_BUFFER, 16, false),\n+                arguments(ARRAY_BUFFER_READONLY, 16, true),\n+                arguments(DIRECT_BUFFER, 16, false),\n+                arguments(DIRECT_BUFFER_READONLY, 16, false)\n+        );\n@@ -59,2 +77,3 @@\n-    @Test\n-    void testDefineClassWithCustomLoaderDirectBuffer() throws Exception {\n+    @ParameterizedTest()\n+    @MethodSource(\"bufferTypes\")\n+    void testDefineClassWithCustomLoaderByteBuffer(int type, int pos,  boolean posAtLimit) throws Exception {\n@@ -62,2 +81,45 @@\n-        Class<?> clazz = loader.defineClassFromDirectBuffer();\n-        assertInvocating(clazz);\n+        byte[] classBytes = getTestClassBytes();\n+        if (pos != 0) {\n+            byte[] newBytes = new byte[classBytes.length + pos];\n+            System.arraycopy(classBytes, 0, newBytes, pos, classBytes.length);\n+            classBytes = newBytes;\n+        }\n+        switch (type) {\n+            case ARRAY_BUFFER -> {\n+                var bb = ByteBuffer.wrap(classBytes).position(pos);\n+                Class<?> clazz = loader.defineClassFromByteBuffer(bb);\n+                assertInvocating(clazz);\n+                assertEquals(posAtLimit, bb.position() == bb.limit());\n+            }\n+            case ARRAY_BUFFER_READONLY -> {\n+                var bb = ByteBuffer.wrap(classBytes).position(pos).asReadOnlyBuffer();\n+                Class<?> clazz = loader.defineClassFromByteBuffer(bb);\n+                assertInvocating(clazz);\n+                assertEquals(posAtLimit, bb.position() == bb.limit());\n+            }\n+            case DIRECT_BUFFER -> {\n+                try (Arena arena = Arena.ofConfined()) {\n+                    var bb = arena.allocate(classBytes.length)\n+                            .asByteBuffer()\n+                            .put(classBytes)\n+                            .flip()\n+                            .position(pos);\n+                    Class<?> clazz = loader.defineClassFromByteBuffer(bb);\n+                    assertInvocating(clazz);\n+                    assertEquals(posAtLimit, bb.position() == bb.limit());\n+                }\n+            }\n+            case DIRECT_BUFFER_READONLY -> {\n+                try (Arena arena = Arena.ofConfined()) {\n+                    var bb = arena.allocate(classBytes.length)\n+                            .asByteBuffer()\n+                            .put(classBytes)\n+                            .flip()\n+                            .position(pos)\n+                            .asReadOnlyBuffer();\n+                    Class<?> clazz = loader.defineClassFromByteBuffer(bb);\n+                    assertInvocating(clazz);\n+                    assertEquals(posAtLimit, bb.position() == bb.limit());\n+                }\n+            }\n+        }\n@@ -103,3 +165,1 @@\n-        Class<?> defineClassFromHeapBuffer() throws Exception {\n-            byte[] classBytes = getTestClassBytes();\n-            ByteBuffer bb = ByteBuffer.wrap(classBytes);\n+        Class<?> defineClassFromByteBuffer(ByteBuffer bb) throws Exception {\n@@ -108,9 +168,0 @@\n-\n-        Class<?> defineClassFromDirectBuffer() throws Exception {\n-            byte[] classBytes = getTestClassBytes();\n-            try (Arena arena = Arena.ofConfined()) {\n-                var bb = arena.allocate(classBytes.length).asByteBuffer();\n-                bb.put(classBytes).flip();\n-                return defineClass(null, bb, null);\n-            }\n-        }\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/defineClass\/DefineClassDirectByteBuffer.java","additions":73,"deletions":22,"binary":false,"changes":95,"status":"modified"}]}