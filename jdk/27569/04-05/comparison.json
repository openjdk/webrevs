{"files":[{"patch":"@@ -60,9 +60,1 @@\n-\n-    static final int ARRAY_BUFFER = 0;\n-    static final int WRAPPED_BUFFER = 1;\n-    static final int DIRECT_BUFFER = 2;\n-    static final int MAPPED_BUFFER = 3;\n-    static final int FOREIGN_AUTO_BUFFER = 4;\n-    static final int FOREIGN_CONFINED_BUFFER = 5;\n-    static final int FOREIGN_GLOBAL_BUFFER = 6;\n-    static final int FOREIGN_SHARED_BUFFER = 7;\n+    private static final int CLASSBYTES_OFFSET = 16;\n@@ -71,36 +63,4 @@\n-    static Stream<Arguments> bufferTypes() {\n-        return Stream.of(\n-                \/\/ type, readonly, pos, posToLimit\n-                arguments(ARRAY_BUFFER, false, 0, false),\n-                arguments(ARRAY_BUFFER, false, 16, false),\n-                arguments(ARRAY_BUFFER, true, 0, false),\n-                arguments(ARRAY_BUFFER, true, 16, false),\n-\n-                arguments(WRAPPED_BUFFER, false, 0, false),\n-                arguments(WRAPPED_BUFFER, false, 16, false),\n-                arguments(WRAPPED_BUFFER, true, 0, true),\n-                arguments(WRAPPED_BUFFER, true, 16, true),\n-\n-                arguments(DIRECT_BUFFER, false, 0, false),\n-                arguments(DIRECT_BUFFER, false, 16, false),\n-                arguments(DIRECT_BUFFER, true, 0, false),\n-                arguments(DIRECT_BUFFER, true, 16, false),\n-\n-                \/\/ MapMode.READ_ONLY from READ fc, the bb is readonly\n-                arguments(MAPPED_BUFFER, false, 0, false),\n-                arguments(MAPPED_BUFFER, false, 16, false),\n-\n-                arguments(FOREIGN_AUTO_BUFFER, false, 0, false),\n-                arguments(FOREIGN_AUTO_BUFFER, false, 16, false),\n-                arguments(FOREIGN_AUTO_BUFFER, true, 0, false),\n-                arguments(FOREIGN_AUTO_BUFFER, true, 16, false),\n-\n-                arguments(FOREIGN_CONFINED_BUFFER, false, 0, false),\n-                arguments(FOREIGN_CONFINED_BUFFER, false, 16, false),\n-                arguments(FOREIGN_CONFINED_BUFFER, true, 0, false),\n-                arguments(FOREIGN_CONFINED_BUFFER, true, 16, false),\n-\n-                arguments(FOREIGN_SHARED_BUFFER, false, 0, false),\n-                arguments(FOREIGN_SHARED_BUFFER, false, 16, false),\n-                arguments(FOREIGN_SHARED_BUFFER, true, 0, false),\n-                arguments(FOREIGN_SHARED_BUFFER, true, 16, false),\n+    static Stream<Arguments> bytebuffers() throws Exception {\n+        byte[] classBytes = getTestClassBytes();\n+        byte[] classBytesAtOffset = new byte[classBytes.length + CLASSBYTES_OFFSET];\n+        System.arraycopy(classBytes, 0, classBytesAtOffset, CLASSBYTES_OFFSET, classBytes.length);\n@@ -108,4 +68,182 @@\n-                arguments(FOREIGN_GLOBAL_BUFFER, false, 0, false),\n-                arguments(FOREIGN_GLOBAL_BUFFER, false, 16, false),\n-                arguments(FOREIGN_GLOBAL_BUFFER, true, 0, false),\n-                arguments(FOREIGN_GLOBAL_BUFFER, true, 16, false)\n+        return Stream.of(\n+                \/\/ WRAPPED_BUFFER\n+                arguments(ByteBuffer\n+                                .wrap(classBytes),\n+                        false),\n+                arguments(ByteBuffer\n+                                .wrap(classBytes)\n+                                .asReadOnlyBuffer(),\n+                        true),\n+                arguments(ByteBuffer\n+                                .wrap(classBytesAtOffset)\n+                                .position(CLASSBYTES_OFFSET),\n+                        false),\n+                arguments(ByteBuffer\n+                                .wrap(classBytesAtOffset)\n+                                .position(CLASSBYTES_OFFSET)\n+                                .asReadOnlyBuffer(),\n+                        true),\n+                \/\/ ARRAY_BUFFER\n+                arguments(ByteBuffer\n+                                .allocate(classBytes.length)\n+                                .put(classBytes)\n+                                .flip(),\n+                        false),\n+                arguments(ByteBuffer\n+                                .allocate(classBytes.length)\n+                                .put(classBytes)\n+                                .flip()\n+                        .position(0)\n+                                .asReadOnlyBuffer(),\n+                        true),\n+                arguments(ByteBuffer.allocate(classBytesAtOffset.length)\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET),\n+                        false),\n+                arguments(ByteBuffer.allocate(classBytesAtOffset.length)\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET)\n+                                .asReadOnlyBuffer(),\n+                        true),\n+                \/\/ DIRECT_BUFFER\n+                arguments(ByteBuffer.allocateDirect(classBytes.length)\n+                                .put(classBytes)\n+                                .flip(),\n+                        false),\n+                arguments(ByteBuffer.allocateDirect(classBytes.length)\n+                                .put(classBytes)\n+                                .flip()\n+                                .asReadOnlyBuffer(),\n+                        false),\n+                arguments(ByteBuffer.allocateDirect(classBytesAtOffset.length)\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET),\n+                        false),\n+                arguments(ByteBuffer.allocateDirect(classBytesAtOffset.length)\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET)\n+                                .asReadOnlyBuffer(),\n+                        false),\n+                \/\/ FOREIGN_AUTO_BUFFER\n+                arguments(Arena.ofAuto()\n+                                .allocate(classBytes.length)\n+                                .asByteBuffer()\n+                                .put(classBytes)\n+                                .flip(),\n+                        false),\n+                arguments(Arena.ofAuto()\n+                                .allocate(classBytes.length)\n+                                .asByteBuffer()\n+                                .put(classBytes)\n+                                .flip()\n+                                .asReadOnlyBuffer(),\n+                        false),\n+                arguments(Arena.ofAuto()\n+                                .allocate(classBytesAtOffset.length)\n+                                .asByteBuffer()\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET),\n+                        false),\n+                arguments(Arena.ofAuto()\n+                                .allocate(classBytesAtOffset.length)\n+                                .asByteBuffer()\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET)\n+                                .asReadOnlyBuffer(),\n+                        false),\n+                \/\/ FOREIGN_CONFINED_BUFFER\n+                arguments(Arena.ofConfined()\n+                                .allocate(classBytes.length)\n+                                .asByteBuffer()\n+                                .put(classBytes)\n+                                .flip(),\n+                        false),\n+                arguments(Arena.ofConfined()\n+                                .allocate(classBytes.length)\n+                                .asByteBuffer()\n+                                .put(classBytes)\n+                                .flip()\n+                                .asReadOnlyBuffer(),\n+                        false),\n+                arguments(Arena.ofConfined()\n+                                .allocate(classBytesAtOffset.length)\n+                                .asByteBuffer()\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET),\n+                        false),\n+                arguments(Arena.ofConfined()\n+                                .allocate(classBytesAtOffset.length)\n+                                .asByteBuffer()\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET)\n+                                .asReadOnlyBuffer(),\n+                        false),\n+                \/\/ FOREIGN_GLOBAL_BUFFER\n+                arguments(Arena.global()\n+                                .allocate(classBytes.length)\n+                                .asByteBuffer()\n+                                .put(classBytes)\n+                                .flip(),\n+                        false),\n+                arguments(Arena.global()\n+                                .allocate(classBytes.length)\n+                                .asByteBuffer()\n+                                .put(classBytes)\n+                                .flip()\n+                                .asReadOnlyBuffer(),\n+                        false),\n+                arguments(Arena.global()\n+                                .allocate(classBytesAtOffset.length)\n+                                .asByteBuffer()\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET),\n+                        false),\n+                arguments(Arena.global()\n+                                .allocate(classBytesAtOffset.length)\n+                                .asByteBuffer()\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET)\n+                                .asReadOnlyBuffer(),\n+                        false),\n+                \/\/ FOREIGN_SHARED_BUFFER\n+                arguments(Arena.ofShared()\n+                                .allocate(classBytes.length)\n+                                .asByteBuffer()\n+                                .put(classBytes)\n+                                .flip(),\n+                        false),\n+                arguments(Arena.ofShared()\n+                                .allocate(classBytes.length)\n+                                .asByteBuffer()\n+                                .put(classBytes)\n+                                .flip()\n+                                .asReadOnlyBuffer(),\n+                        false),\n+                arguments(Arena.ofShared()\n+                                .allocate(classBytesAtOffset.length)\n+                                .asByteBuffer()\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET),\n+                        false),\n+                arguments(Arena.ofShared()\n+                                .allocate(classBytesAtOffset.length)\n+                                .asByteBuffer()\n+                                .put(classBytesAtOffset)\n+                                .flip()\n+                                .position(CLASSBYTES_OFFSET)\n+                                .asReadOnlyBuffer(),\n+                        false),\n+                \/\/ MAPPED_BUFFER:  MapMode.READ_ONLY from READ fc, the bb is readonly\n+                arguments(getMappedByteBuffer(classBytes, 0), false),\n+                arguments(getMappedByteBuffer(classBytesAtOffset, CLASSBYTES_OFFSET), false)\n@@ -115,70 +253,8 @@\n-    static ByteBuffer getByteBufferWithTestClassBytes(int type, int pos) throws Exception {\n-        byte[] classBytes = getTestClassBytes();\n-        if (pos != 0) {\n-            byte[] newBytes = new byte[classBytes.length + pos];\n-            System.arraycopy(classBytes, 0, newBytes, pos, classBytes.length);\n-            classBytes = newBytes;\n-        }\n-        switch (type) {\n-            case ARRAY_BUFFER -> {\n-                return ByteBuffer.allocateDirect(classBytes.length)\n-                        .put(classBytes)\n-                        .flip()\n-                        .position(pos);\n-            }\n-            case WRAPPED_BUFFER -> {\n-                return ByteBuffer.wrap(classBytes).position(pos);\n-            }\n-            case DIRECT_BUFFER -> {\n-                return ByteBuffer\n-                        .allocateDirect(classBytes.length)\n-                        .put(classBytes)\n-                        .flip()\n-                        .position(pos);\n-            }\n-            case FOREIGN_AUTO_BUFFER -> {\n-                return Arena\n-                        .ofAuto()\n-                        .allocate(classBytes.length)\n-                        .asByteBuffer()\n-                        .put(classBytes)\n-                        .flip()\n-                        .position(pos);\n-            }\n-            case FOREIGN_CONFINED_BUFFER -> {\n-                return Arena\n-                        .ofConfined()\n-                        .allocate(classBytes.length)\n-                        .asByteBuffer()\n-                        .put(classBytes)\n-                        .flip()\n-                        .position(pos);\n-            }\n-            case FOREIGN_GLOBAL_BUFFER -> {\n-                return Arena\n-                        .global()\n-                        .allocate(classBytes.length)\n-                        .asByteBuffer()\n-                        .put(classBytes)\n-                        .flip()\n-                        .position(pos);\n-            }\n-            case FOREIGN_SHARED_BUFFER -> {\n-                return Arena\n-                        .ofShared()\n-                        .allocate(classBytes.length)\n-                        .asByteBuffer()\n-                        .put(classBytes)\n-                        .flip()\n-                        .position(pos);\n-            }\n-            case MAPPED_BUFFER -> {\n-                Path tempDir = Paths.get(System.getProperty(\"test.classes\", \".\"));\n-                Files.createDirectories(tempDir);\n-                Path tempClassFile = tempDir.resolve(\"DefineClassDirectByteBuffer_Greeting.class\");\n-                Files.write(tempClassFile, classBytes);\n-                try (FileChannel fc = FileChannel.open(tempClassFile, StandardOpenOption.READ)) {\n-                    return fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size())\n-                            .position(pos);\n-                }\n-            }\n+    static ByteBuffer getMappedByteBuffer(byte[] classBytes, int offset) throws Exception {\n+        Path tempDir = Paths.get(System.getProperty(\"test.classes\", \".\"));\n+        Files.createDirectories(tempDir);\n+        Path tempClassFile = tempDir.resolve(\n+                String.format(\"DefineClassDirectByteBuffer_Greeting_%d.class\", offset));\n+        Files.write(tempClassFile, classBytes);\n+        try (FileChannel fc = FileChannel.open(tempClassFile, StandardOpenOption.READ)) {\n+            return fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size()).position(offset);\n@@ -186,1 +262,0 @@\n-        return null;\n@@ -190,8 +265,3 @@\n-    @MethodSource(\"bufferTypes\")\n-    void testDefineClassWithCustomLoaderByteBuffer(int type, boolean readonly, int pos, boolean posAtLimit)\n-            throws Exception\n-    {\n-        ByteBuffer bb = getByteBufferWithTestClassBytes(type, pos);\n-        if (readonly) {\n-            bb = bb.asReadOnlyBuffer();\n-        }\n+    @MethodSource(\"bytebuffers\")\n+    void testDefineClassWithCustomLoaderByteBuffer(ByteBuffer bb, boolean posAtLimit)\n+            throws Exception {\n@@ -209,2 +279,3 @@\n-        var bb = getByteBufferWithTestClassBytes(\n-                mode.equals(\"Direct\") ? DIRECT_BUFFER : ARRAY_BUFFER, 0);\n+        var bb = mode.equals(\"Direct\")\n+                ? ByteBuffer.allocateDirect(classBytes.length).put(classBytes).flip()\n+                : ByteBuffer.allocate(classBytes.length).put(classBytes).flip();\n","filename":"test\/jdk\/java\/lang\/ClassLoader\/defineClass\/DefineClassDirectByteBuffer.java","additions":201,"deletions":130,"binary":false,"changes":331,"status":"modified"}]}