{"files":[{"patch":"@@ -27,0 +27,1 @@\n+ * @enablePreview\n@@ -28,1 +29,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -32,4 +32,0 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.Handle;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n@@ -37,0 +33,3 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.constant.*;\n@@ -46,0 +45,3 @@\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.constant.ConstantDescs.*;\n+\n@@ -48,1 +50,1 @@\n-    static abstract class IndyClassloader extends ClassLoader implements Opcodes {\n+    static abstract class IndyClassloader extends ClassLoader{\n@@ -56,1 +58,1 @@\n-            byte[] b;\n+            byte[] b = new byte[0];\n@@ -63,0 +65,1 @@\n+            assert b != null;\n@@ -77,2 +80,0 @@\n-            ClassWriter cw = new ClassWriter(\n-                    ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);\n@@ -80,2 +81,2 @@\n-                defineIndyBootstrapMethodClass(cw);\n-                return cw.toByteArray();\n+                return defineIndyBootstrapMethodClass();\n+\n@@ -84,2 +85,1 @@\n-                defineIndyCallingClass(cw);\n-                return cw.toByteArray();\n+                return defineIndyCallingClass();\n@@ -90,12 +90,17 @@\n-        void defineIndyCallingClass(ClassWriter cw) {\n-            cw.visit(52, ACC_SUPER | ACC_PUBLIC, INDY_CALLER_CLASS_NAME, null, \"java\/lang\/Object\", null);\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"invoke\", \"()V\", null, null);\n-            mv.visitCode();\n-            Handle h = new Handle(H_INVOKESTATIC,\n-                                  BOOTSTRAP_METHOD_CLASS_NAME, BOOTSTRAP_METHOD_NAME,\n-                                  BOOTSTRAP_METHOD_DESC, false);\n-            mv.visitInvokeDynamicInsn(BOOTSTRAP_METHOD_CLASS_NAME, \"()V\", h);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(0, 0);\n-            mv.visitEnd();\n-            cw.visitEnd();\n+        byte[] defineIndyCallingClass() {\n+                return of().build(ClassDesc.of(INDY_CALLER_CLASS_NAME),\n+                        clb -> clb\n+                                .withVersion(JAVA_8_VERSION, 0)\n+                                .withFlags(ACC_SUPER | ACC_PUBLIC)\n+                                .withSuperclass(CD_Object)\n+                                .withMethodBody(\"invoke\", MethodTypeDesc.of(CD_void), ACC_PUBLIC | ACC_STATIC,\n+                                        cob -> {\n+                                            DirectMethodHandleDesc h = MethodHandleDesc.of(DirectMethodHandleDesc.Kind.STATIC,\n+                                                    ClassDesc.of(BOOTSTRAP_METHOD_CLASS_NAME),\n+                                                    BOOTSTRAP_METHOD_NAME,\n+                                                    BOOTSTRAP_METHOD_DESC);\n+                                            cob.invokedynamic(DynamicCallSiteDesc.of(h, MethodTypeDesc.of(CD_void)));\n+                                            cob.return_();\n+                                        }\n+                                )\n+                );\n@@ -104,9 +109,10 @@\n-        void defineIndyBootstrapMethodClass(ClassWriter cw) {\n-            cw.visit(52, ACC_SUPER | ACC_PUBLIC,\n-                     BOOTSTRAP_METHOD_CLASS_NAME, null, \"java\/lang\/Object\", null);\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC,\n-                                              BOOTSTRAP_METHOD_NAME, BOOTSTRAP_METHOD_DESC, null, null);\n-            mv.visitCode();\n-            defineIndyBootstrapMethodBody(mv);\n-            mv.visitMaxs(0, 0);\n-            mv.visitEnd();\n+        byte[] defineIndyBootstrapMethodClass() {\n+            return of().build(ClassDesc.of(BOOTSTRAP_METHOD_CLASS_NAME),\n+                    clb -> clb\n+                            .withVersion(JAVA_8_VERSION, 0)\n+                            .withFlags(ACC_SUPER | ACC_PUBLIC)\n+                            .withSuperclass(CD_Object)\n+                            .withMethodBody(BOOTSTRAP_METHOD_NAME, MethodTypeDesc.ofDescriptor(BOOTSTRAP_METHOD_DESC), ACC_PUBLIC | ACC_STATIC,\n+                                    this::defineIndyBootstrapMethodBody\n+                            )\n+            );\n@@ -115,3 +121,3 @@\n-        void defineIndyBootstrapMethodBody(MethodVisitor mv) {\n-            mv.visitInsn(ACONST_NULL);\n-            mv.visitInsn(ARETURN);\n+        void defineIndyBootstrapMethodBody(CodeBuilder cob) {\n+            cob.aconst_null();\n+            cob.areturn();\n@@ -191,10 +197,10 @@\n-        void defineIndyBootstrapMethodClass(ClassWriter cw) {\n-            cw.visit(52, ACC_SUPER | ACC_PUBLIC,\n-                     BOOTSTRAP_METHOD_CLASS_NAME, null, \"java\/lang\/Object\", null);\n-            \/\/ Bootstrap method is declared to be private\n-            MethodVisitor mv = cw.visitMethod(ACC_PRIVATE | ACC_STATIC,\n-                                              BOOTSTRAP_METHOD_NAME, BOOTSTRAP_METHOD_DESC, null, null);\n-            mv.visitCode();\n-            defineIndyBootstrapMethodBody(mv);\n-            mv.visitMaxs(0, 0);\n-            mv.visitEnd();\n+        byte[] defineIndyBootstrapMethodClass() {\n+            return ClassFile.of(DeadCodeOption.KEEP_DEAD_CODE).build(ClassDesc.of(BOOTSTRAP_METHOD_CLASS_NAME),\n+                    clb -> clb\n+                            .withVersion(JAVA_8_VERSION, 0)\n+                            .withFlags(ACC_SUPER | ACC_PUBLIC)\n+                            .withSuperclass(CD_Object)\n+                            .withMethodBody(BOOTSTRAP_METHOD_NAME, MethodTypeDesc.ofDescriptor(BOOTSTRAP_METHOD_DESC), ACC_PRIVATE | ACC_STATIC,\n+                                    this::defineIndyBootstrapMethodBody\n+                            )\n+            );\n@@ -211,1 +217,1 @@\n-        void defineIndyBootstrapMethodBody(MethodVisitor mv) {\n+        void defineIndyBootstrapMethodBody(CodeBuilder cob) {\n@@ -214,2 +220,2 @@\n-            mv.visitInsn(ACONST_NULL);\n-            mv.visitInsn(ARETURN);\n+            cob.aconst_null();\n+            cob.areturn();\n@@ -227,1 +233,1 @@\n-        void defineIndyBootstrapMethodBody(MethodVisitor mv) {\n+        void defineIndyBootstrapMethodBody(CodeBuilder cob) {\n@@ -231,3 +237,3 @@\n-            mv.visitMethodInsn(INVOKESTATIC, \"BootstrapMethodErrorTest\",\n-                               \"getCallSite\", \"()Ljava\/lang\/invoke\/CallSite;\", false);\n-            mv.visitInsn(ARETURN);\n+            cob.invokestatic(ClassDesc.of(\"BootstrapMethodErrorTest\"), \"getCallSite\",\n+                             MethodTypeDesc.ofDescriptor(\"()Ljava\/lang\/invoke\/CallSite;\"));\n+            cob.areturn();\n@@ -250,1 +256,1 @@\n-        void defineIndyBootstrapMethodBody(MethodVisitor mv) {\n+        void defineIndyBootstrapMethodBody(CodeBuilder cob) {\n@@ -253,4 +259,4 @@\n-            mv.visitMethodInsn(INVOKESTATIC, \"BootstrapMethodErrorTest\",\n-                               methodName, \"()V\", false);\n-            mv.visitInsn(ACONST_NULL);\n-            mv.visitInsn(ARETURN);\n+            cob.invokestatic(ClassDesc.of(\"BootstrapMethodErrorTest\"), methodName,\n+                             MethodTypeDesc.of(CD_void));\n+            cob.aconst_null();\n+            cob.areturn();\n","filename":"test\/hotspot\/jtreg\/runtime\/invokedynamic\/BootstrapMethodErrorTest.java","additions":65,"deletions":59,"binary":false,"changes":124,"status":"modified"}]}