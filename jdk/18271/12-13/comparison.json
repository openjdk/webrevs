{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024 Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @enablePreview\n@@ -28,2 +29,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc\n@@ -38,1 +38,0 @@\n-import jdk.internal.org.objectweb.asm.*;\n@@ -40,0 +39,3 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.constant.ClassDesc;\n@@ -41,1 +43,3 @@\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.constant.ConstantDescs.*;\n@@ -45,37 +49,31 @@\n-        ClassWriter cw = new ClassWriter(0);\n-        cw.visit(52, ACC_PUBLIC | ACC_SUPER, \"C\", null, \"java\/lang\/Object\", new String[]{\"I\"});\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitVarInsn(ALOAD, 0);\n-            mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"testSpecialIntf\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitVarInsn(ALOAD, 0);\n-            mv.visitMethodInsn(INVOKESPECIAL, \"I\", \"f1\", \"()V\", \/*itf=*\/false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"testStaticIntf\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitMethodInsn(INVOKESTATIC, \"I\", \"f2\", \"()V\", \/*itf=*\/false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"testSpecialClass\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitVarInsn(ALOAD, 0);\n-            mv.visitMethodInsn(INVOKESPECIAL, \"C\", \"f1\", \"()V\", \/*itf=*\/true);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n+        return ClassFile.of(StackMapsOption.DROP_STACK_MAPS).build(ClassDesc.of(\"C\"),\n+                clb -> clb\n+                        .withVersion(JAVA_8_VERSION, 0)\n+                        .withFlags(ACC_PUBLIC | ACC_SUPER)\n+                        .withSuperclass(CD_Object)\n+                        .withInterfaceSymbols(ClassDesc.of(\"I\"))\n+                        .withMethodBody(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                cob -> cob\n+                                        .aload(0)\n+                                        .invokespecial(CD_Object, INIT_NAME, MTD_void)\n+                                        .return_())\n+                        .withMethodBody(\"testSpecialIntf\", MTD_void, ACC_PUBLIC,\n+                                cob -> cob\n+                                        .aload(0)\n+                                        .invokespecial(ClassDesc.of(\"I\"), \"f1\", MTD_void)\n+                                        .return_())\n+                        .withMethodBody(\"testStaticIntf\", MTD_void, ACC_PUBLIC,\n+                                cob -> cob\n+                                        .invokestatic(ClassDesc.of(\"I\"), \"f2\", MTD_void)\n+                                        .return_())\n+                        .withMethodBody(\"testSpecialClass\", MTD_void, ACC_PUBLIC,\n+                                cob -> cob\n+                                        .aload(0)\n+                                        .invokespecial(cob.constantPool().interfaceMethodRefEntry(ClassDesc.of(\"C\"), \"f1\", MTD_void))\n+                                        .return_())\n+                        .withMethodBody(\"f2\", MTD_void, ACC_PUBLIC | ACC_STATIC,\n+                                CodeBuilder::return_)\n+                        .withMethodBody(\"testStaticClass\", MTD_void, ACC_PUBLIC,\n+                                cob -> cob\n+                                        .invokestatic(cob.constantPool().interfaceMethodRefEntry(ClassDesc.of(\"C\"), \"f2\", MTD_void))\n+                                        .return_())\n@@ -83,17 +81,1 @@\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"f2\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(0, 1);\n-            mv.visitEnd();\n-        }\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"testStaticClass\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitMethodInsn(INVOKESTATIC, \"C\", \"f2\", \"()V\", \/*itf=*\/true);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-        cw.visitEnd();\n-        return cw.toByteArray();\n+                );\n@@ -103,18 +85,10 @@\n-        ClassWriter cw = new ClassWriter(0);\n-        cw.visit(52, ACC_PUBLIC | ACC_ABSTRACT | ACC_INTERFACE, \"I\", null, \"java\/lang\/Object\", null);\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"f1\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(0, 1);\n-            mv.visitEnd();\n-        }\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"f2\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(0, 1);\n-            mv.visitEnd();\n-        }\n-        cw.visitEnd();\n-        return cw.toByteArray();\n+        return ClassFile.of().build(ClassDesc.of(\"I\"),\n+                clb -> clb\n+                        .withVersion(JAVA_8_VERSION, 0)\n+                        .withSuperclass(CD_Object)\n+                        .withFlags(ACC_PUBLIC | ACC_ABSTRACT | ACC_INTERFACE)\n+                        .withMethodBody(\"f1\", MTD_void, ACC_PUBLIC,\n+                                CodeBuilder::return_)\n+                        .withMethodBody(\"f2\", MTD_void, ACC_PUBLIC | ACC_STATIC,\n+                                CodeBuilder::return_)\n+        );\n@@ -153,1 +127,0 @@\n-                    continue;\n","filename":"test\/hotspot\/jtreg\/runtime\/ConstantPool\/IntfMethod.java","additions":51,"deletions":78,"binary":false,"changes":129,"status":"modified"}]}