{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @enablePreview\n@@ -28,2 +29,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc\n@@ -35,1 +35,0 @@\n-import jdk.internal.org.objectweb.asm.*;\n@@ -37,0 +36,5 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.DirectMethodHandleDesc;\n+import java.lang.constant.MethodHandleDesc;\n+import java.lang.constant.MethodTypeDesc;\n@@ -38,4 +42,3 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.constant.ConstantDescs.*;\n@@ -45,0 +48,5 @@\n+    private static final ClassDesc CD_System = ClassDesc.of(\"java.lang.System\");\n+    private static final ClassDesc CD_PrintStream = ClassDesc.of(\"java.io.PrintStream\");\n+    private static final ClassDesc CD_LPrintStream = ClassDesc.ofDescriptor(\"Ljava\/io\/PrintStream;\");\n+    private static final ClassDesc CD_MethodHandle = ClassDesc.of(\"java.lang.invoke.MethodHandle\");\n+\n@@ -46,61 +54,41 @@\n-        ClassWriter cw = new ClassWriter(0);\n-        cw.visit(52, ACC_PUBLIC | ACC_SUPER, \"BadInterfaceMethodref\", null, \"java\/lang\/Object\", null);\n-        Handle handle1 =\n-            new Handle(Opcodes.H_INVOKEINTERFACE, \"BadInterfaceMethodref\", \"m\", \"()V\", true);\n-        Handle handle2 =\n-            new Handle(Opcodes.H_INVOKEINTERFACE, \"BadInterfaceMethodref\", \"staticM\", \"()V\", true);\n-\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitVarInsn(ALOAD, 0);\n-            mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"m\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitFieldInsn(GETSTATIC, \"java\/lang\/System\", \"out\", \"Ljava\/io\/PrintStream;\");\n-            mv.visitLdcInsn(\"hello from m\");\n-            mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/io\/PrintStream\", \"println\", \"(Ljava\/lang\/String;)V\", false\/*intf*\/);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(3, 1);\n-            mv.visitEnd();\n-        }\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"staticM\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitFieldInsn(GETSTATIC, \"java\/lang\/System\", \"out\", \"Ljava\/io\/PrintStream;\");\n-            mv.visitLdcInsn(\"hello from staticM\");\n-            mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/io\/PrintStream\", \"println\", \"(Ljava\/lang\/String;)V\", false\/*intf*\/);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(3, 1);\n-            mv.visitEnd();\n-        }\n-\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"runm\", \"()V\", null, null);\n-            mv.visitCode();\n-            \/\/ REF_invokeStatic\n-            mv.visitLdcInsn(handle1);\n-            mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/lang\/invoke\/MethodHandle\", \"invoke\", \"()V\", false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"runStaticM\", \"()V\", null, null);\n-            mv.visitCode();\n-            \/\/ REF_invokeStatic\n-            mv.visitLdcInsn(handle2);\n-            mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/lang\/invoke\/MethodHandle\", \"invoke\", \"()V\", false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-\n-        cw.visitEnd();\n-        return cw.toByteArray();\n+\n+        DirectMethodHandleDesc handle_1 = MethodHandleDesc.of(DirectMethodHandleDesc.Kind.INTERFACE_VIRTUAL,\n+                ClassDesc.of(\"BadInterfaceMethodref\"), \"m\", \"()V\");\n+\n+        DirectMethodHandleDesc handle_2 = MethodHandleDesc.of(DirectMethodHandleDesc.Kind.INTERFACE_VIRTUAL,\n+                ClassDesc.of(\"BadInterfaceMethodref\"), \"staticM\", \"()V\");\n+\n+        return ClassFile.of().build(ClassDesc.of(\"BadInterfaceMethodref\"),\n+                    clb -> clb\n+                            .withVersion(JAVA_8_VERSION, 0)\n+                            .withFlags(ACC_PUBLIC | ACC_SUPER)\n+                            .withSuperclass(CD_Object)\n+                            .withMethodBody(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                    cob -> cob\n+                                            .aload(0)\n+                                            .invokespecial(CD_Object, INIT_NAME, MTD_void)\n+                                            .return_())\n+                            .withMethodBody(\"m\", MTD_void, ACC_PUBLIC,\n+                                    cob -> cob\n+                                            .getstatic(CD_System, \"out\", CD_LPrintStream)\n+                                            .ldc(\"hello from m\")\n+                                            .invokevirtual(CD_PrintStream, \"println\", MethodTypeDesc.of(CD_void, CD_String))\n+                                            .return_())\n+                            .withMethodBody(\"staticM\", MTD_void, ACC_PUBLIC | ACC_STATIC,\n+                                    cob -> cob\n+                                            .getstatic(CD_System, \"out\", CD_LPrintStream)\n+                                            .ldc(\"hello from staticM\")\n+                                            .invokevirtual(CD_PrintStream, \"println\", MethodTypeDesc.of(CD_void, CD_String))\n+                                            .return_())\n+                            .withMethodBody(\"runm\", MTD_void, ACC_PUBLIC | ACC_STATIC,\n+                                    cob -> cob\n+                                            .ldc(handle_1)\n+                                            .invokevirtual(CD_MethodHandle, \"invoke\", MethodTypeDesc.of(CD_void))\n+                                            .return_())\n+                            .withMethodBody(\"runStaticM\", MTD_void, ACC_PUBLIC | ACC_STATIC,\n+                                    cob -> cob\n+                                            .ldc(handle_2)\n+                                            .invokevirtual(CD_MethodHandle, \"invoke\", MethodTypeDesc.of(CD_void))\n+                                            .return_())\n+\n+        );\n@@ -110,24 +98,19 @@\n-        ClassWriter cw = new ClassWriter(0);\n-        cw.visit(52, ACC_PUBLIC | ACC_ABSTRACT | ACC_INTERFACE, \"IBad\", null, \"java\/lang\/Object\", null);\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"m\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitFieldInsn(GETSTATIC, \"java\/lang\/System\", \"out\", \"Ljava\/io\/PrintStream;\");\n-            mv.visitLdcInsn(\"hello from m\");\n-            mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/io\/PrintStream\", \"println\", \"(Ljava\/lang\/String;)V\", false\/*intf*\/);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(3, 1);\n-            mv.visitEnd();\n-        }\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"staticM\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitFieldInsn(GETSTATIC, \"java\/lang\/System\", \"out\", \"Ljava\/io\/PrintStream;\");\n-            mv.visitLdcInsn(\"hello from staticM\");\n-            mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/io\/PrintStream\", \"println\", \"(Ljava\/lang\/String;)V\", false\/*intf*\/);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(3, 1);\n-            mv.visitEnd();\n-        }\n-        cw.visitEnd();\n-        return cw.toByteArray();\n+\n+        return ClassFile.of().build(ClassDesc.of(\"IBad\"),\n+                    clb -> clb\n+                            .withVersion(JAVA_8_VERSION, 0)\n+                            .withFlags(ACC_PUBLIC | ACC_ABSTRACT | ACC_INTERFACE)\n+                            .withSuperclass(CD_Object)\n+                            .withMethodBody(\"m\", MTD_void, ACC_PUBLIC,\n+                                    cob -> cob\n+                                            .getstatic(CD_System, \"out\", CD_LPrintStream)\n+                                            .ldc(\"hello from m\")\n+                                            .invokevirtual(CD_PrintStream, \"println\", MethodTypeDesc.of(CD_void, CD_String))\n+                                            .return_())\n+                            .withMethodBody(\"staticM\", MTD_void, ACC_PUBLIC | ACC_STATIC,\n+                                    cob -> cob\n+                                            .getstatic(CD_System, \"out\", CD_LPrintStream)\n+                                            .ldc(\"hello from staticM\")\n+                                            .invokevirtual(CD_PrintStream, \"println\", MethodTypeDesc.of(CD_void, CD_String))\n+                                            .return_())\n+        );\n@@ -137,41 +120,29 @@\n-        ClassWriter cw = new ClassWriter(0);\n-        cw.visit(52, ACC_PUBLIC | ACC_SUPER,  \"BadMethodref\", null, \"java\/lang\/Object\", new String[]{\"IBad\"});\n-        Handle handle1 =\n-            new Handle(Opcodes.H_INVOKEINTERFACE, \"BadMethodref\", \"m\", \"()V\", true);\n-        Handle handle2 =\n-            new Handle(Opcodes.H_INVOKEINTERFACE, \"BadMethodref\", \"staticM\", \"()V\", true);\n-\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitVarInsn(ALOAD, 0);\n-            mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"runm\", \"()V\", null, null);\n-            mv.visitCode();\n-            \/\/ REF_invokeStatic\n-            mv.visitLdcInsn(handle1);\n-            mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/lang\/invoke\/MethodHandle\", \"invoke\", \"()V\", false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"runStaticM\", \"()V\", null, null);\n-            mv.visitCode();\n-            \/\/ REF_invokeStatic\n-            mv.visitLdcInsn(handle2);\n-            mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/lang\/invoke\/MethodHandle\", \"invoke\", \"()V\", false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-\n-        cw.visitEnd();\n-        return cw.toByteArray();\n+\n+\n+        DirectMethodHandleDesc handle_1 = MethodHandleDesc.of(DirectMethodHandleDesc.Kind.INTERFACE_VIRTUAL,\n+                ClassDesc.of(\"BadMethodref\"), \"m\", \"()V\");\n+        DirectMethodHandleDesc handle_2 = MethodHandleDesc.of(DirectMethodHandleDesc.Kind.INTERFACE_VIRTUAL,\n+                ClassDesc.of(\"BadMethodref\"), \"staticM\", \"()V\");\n+\n+        return ClassFile.of().build(ClassDesc.of(\"BadMethodref\"),\n+                    clb -> clb\n+                            .withVersion(JAVA_8_VERSION, 0)\n+                            .withFlags(ACC_PUBLIC | ACC_SUPER)\n+                            .withSuperclass(CD_Object)\n+                            .withInterfaceSymbols(ClassDesc.of(\"IBad\"))\n+                            .withMethodBody(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                    cob -> cob\n+                                            .aload(0)\n+                                            .invokespecial(CD_Object, INIT_NAME, MTD_void)\n+                                            .return_())\n+                            .withMethodBody(\"runm\", MTD_void, ACC_PUBLIC | ACC_STATIC,\n+                                    cob -> cob\n+                                            .ldc(handle_1)\n+                                            .invokevirtual(CD_MethodHandle, \"invoke\", MethodTypeDesc.of(CD_void))\n+                                            .return_())\n+                            .withMethodBody(\"runStaticM\", MTD_void, ACC_PUBLIC | ACC_STATIC,\n+                                    cob -> cob\n+                                            .ldc(handle_2)\n+                                            .invokevirtual(CD_MethodHandle, \"invoke\", MethodTypeDesc.of(CD_void))\n+                                            .return_())\n+        );\n@@ -181,27 +152,21 @@\n-        ClassWriter cw = new ClassWriter(0);\n-        cw.visit(52, ACC_PUBLIC | ACC_SUPER,  \"InvokeBasicref\", null, \"java\/lang\/Object\", null);\n-        Handle handle =\n-                new Handle(Opcodes.H_INVOKEVIRTUAL, \"java\/lang\/invoke\/MethodHandle\", \"invokeBasic\", \"([Ljava\/lang\/Object;)Ljava\/lang\/Object;\", false);\n-\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitVarInsn(ALOAD, 0);\n-            mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-\n-        {\n-            MethodVisitor mv = cw.visitMethod(ACC_PUBLIC | ACC_STATIC, \"runInvokeBasicM\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitLdcInsn(handle);\n-            mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/lang\/invoke\/MethodHandle\", \"invoke\", \"()V\", false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-\n-        cw.visitEnd();\n-        return cw.toByteArray();\n+\n+        DirectMethodHandleDesc handle = MethodHandleDesc.of(DirectMethodHandleDesc.Kind.VIRTUAL,\n+                ClassDesc.of(\"InvokeBasicref\"), \"runInvokeBasicM\", \"()V\");\n+\n+        return ClassFile.of().build(ClassDesc.of(\"InvokeBasicref\"),\n+                    clb -> clb\n+                            .withVersion(JAVA_8_VERSION, 0)\n+                            .withFlags(ACC_PUBLIC | ACC_SUPER)\n+                            .withSuperclass(CD_Object)\n+                            .withMethodBody(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                    cob -> cob\n+                                            .aload(0)\n+                                            .invokespecial(CD_Object, INIT_NAME, MTD_void)\n+                                            .return_())\n+                            .withMethodBody(\"runInvokeBasicM\", MTD_void, ACC_PUBLIC | ACC_STATIC,\n+                                    cob -> cob\n+                                            .ldc(handle)\n+                                            .invokevirtual(CD_MethodHandle, \"invoke\", MethodTypeDesc.of(CD_void))\n+                                            .return_())\n+        );\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/ConstantPool\/BadMethodHandles.java","additions":126,"deletions":161,"binary":false,"changes":287,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @enablePreview\n@@ -28,1 +29,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -32,0 +32,3 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n@@ -33,3 +36,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.constant.ConstantDescs.*;\n@@ -54,1 +57,1 @@\n-    static class TestClassLoader extends ClassLoader implements Opcodes {\n+    static class TestClassLoader extends ClassLoader{\n@@ -69,2 +72,1 @@\n-            ClassWriter cw = new ClassWriter(0);\n-            MethodVisitor mv;\n+\n@@ -72,10 +74,13 @@\n-               case CLASS_NAME_A:\n-                    cw.visit(52, ACC_SUPER | ACC_PUBLIC, CLASS_NAME_A, null, \"java\/lang\/Object\", null);\n-                    {\n-                        mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-                        mv.visitCode();\n-                        mv.visitVarInsn(ALOAD, 0);\n-                        mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\");\n-                        mv.visitInsn(RETURN);\n-                        mv.visitMaxs(1, 1);\n-                        mv.visitEnd();\n+                case CLASS_NAME_A:\n+                    return ClassFile.of().build(ClassDesc.of(CLASS_NAME_A),\n+                            clb -> clb.withVersion(JAVA_8_VERSION, 0)\n+                                    .withFlags(ACC_PUBLIC | ACC_SUPER)\n+                                    .withSuperclass(CD_Object)\n+                                    .withMethodBody(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                            cob -> cob\n+                                                    .aload(0)\n+                                                    .invokespecial(CD_Object, INIT_NAME, MTD_void)\n+                                                    .return_())\n+                                    .withMethodBody(\"m\", MethodTypeDesc.of(CD_int), ACC_STATIC | ACC_FINAL,\n+                                            cob -> cob.ldc(FAILED).ireturn())\n+                    );\n@@ -83,8 +88,0 @@\n-                        mv = cw.visitMethod(ACC_FINAL | ACC_STATIC, \"m\", \"()I\", null, null);\n-                        mv.visitCode();\n-                        mv.visitLdcInsn(FAILED);\n-                        mv.visitInsn(IRETURN);\n-                        mv.visitMaxs(1, 1);\n-                        mv.visitEnd();\n-                    }\n-                    break;\n@@ -92,19 +89,12 @@\n-                    cw.visit(52, ACC_SUPER | ACC_PUBLIC, CLASS_NAME_B, null, CLASS_NAME_A, null);\n-                    {\n-                        mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-                        mv.visitCode();\n-                        mv.visitVarInsn(ALOAD, 0);\n-                        mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME_A, \"<init>\", \"()V\");\n-                        mv.visitInsn(RETURN);\n-                        mv.visitMaxs(1, 1);\n-                        mv.visitEnd();\n-\n-                        mv = cw.visitMethod(ACC_PUBLIC, \"m\", \"()I\", null, null);\n-                        mv.visitCode();\n-                        mv.visitLdcInsn(EXPECTED);\n-                        mv.visitInsn(IRETURN);\n-                        mv.visitMaxs(1, 1);\n-                        mv.visitEnd();\n-\n-                    }\n-                    break;\n+                    return ClassFile.of().build(ClassDesc.ofInternalName(CLASS_NAME_B),\n+                            clb -> clb.withVersion(JAVA_8_VERSION, 0)\n+                                    .withFlags(ACC_PUBLIC | ACC_SUPER)\n+                                    .withSuperclass(ClassDesc.ofInternalName(CLASS_NAME_A))\n+                                    .withMethodBody(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                            cob -> cob\n+                                                    .aload(0)\n+                                                    .invokespecial(ClassDesc.ofInternalName(CLASS_NAME_A), INIT_NAME, MTD_void)\n+                                                    .return_())\n+                                    .withMethodBody(\"m\", MethodTypeDesc.of(CD_int), ACC_PUBLIC,\n+                                            cob -> cob.ldc(EXPECTED).ireturn())\n+                    );\n@@ -114,3 +104,1 @@\n-            cw.visitEnd();\n-\n-            return cw.toByteArray();\n+            return null;\n","filename":"test\/hotspot\/jtreg\/runtime\/finalStatic\/FinalStatic.java","additions":36,"deletions":48,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,8 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.constant.ConstantDescs.*;\n+\n@@ -35,0 +40,1 @@\n+ * @enablePreview\n@@ -36,2 +42,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc\n@@ -40,1 +45,1 @@\n- * @run driver OverriderMsg\n+ * @run main\/othervm --enable-preview OverriderMsg\n@@ -45,1 +50,1 @@\n-\/\/ asm part of the test creates these two classes:\n+\/\/ ClassFile part of the test creates these two classes:\n@@ -60,2 +65,1 @@\n-        ClassWriter cw = new ClassWriter(0);\n-        MethodVisitor mv;\n+        byte[] bytes;\n@@ -63,1 +67,15 @@\n-        cw.visit(V1_7, ACC_PUBLIC + ACC_SUPER, \"HasFinal\", null, \"java\/lang\/Object\", null);\n+        bytes = ClassFile.of().build(ClassDesc.of(\"HasFinal\"),\n+                    clb -> clb\n+                            .withVersion(JAVA_7_VERSION, 0)\n+                            .withFlags(ACC_PUBLIC | ACC_SUPER)\n+                            .withSuperclass(CD_Object)\n+\n+                            .withMethodBody(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                    cob -> cob\n+                                            .aload(0)\n+                                            .invokespecial(CD_Object, INIT_NAME, MTD_void)\n+                                            .return_())\n+\n+                            .withMethodBody(\"m\", MethodTypeDesc.ofDescriptor(\"(Ljava\/lang\/String;)V\"), ACC_PUBLIC | ACC_FINAL, CodeBuilder::return_)\n+\n+        );\n@@ -65,17 +83,0 @@\n-        {\n-            mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitVarInsn(ALOAD, 0);\n-            mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\");\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-        {\n-            mv = cw.visitMethod(ACC_PUBLIC + ACC_FINAL, \"m\", \"(Ljava\/lang\/String;)V\", null, null);\n-            mv.visitCode();\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(0, 2);\n-            mv.visitEnd();\n-        }\n-        cw.visitEnd();\n@@ -83,1 +84,1 @@\n-             fos.write(cw.toByteArray());\n+             fos.write(bytes);\n@@ -90,28 +91,19 @@\n-        ClassWriter cw = new ClassWriter(0);\n-        MethodVisitor mv;\n-        cw.visit(V1_7, ACC_PUBLIC + ACC_SUPER, \"Overrider\", null, \"HasFinal\", null);\n-\n-        {\n-            mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitVarInsn(ALOAD, 0);\n-            mv.visitMethodInsn(INVOKESPECIAL, \"HasFinal\", \"<init>\", \"()V\");\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-        {\n-            mv = cw.visitMethod(ACC_PUBLIC, \"m\", \"(Ljava\/lang\/String;)V\", null, null);\n-            mv.visitCode();\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(0, 2);\n-            mv.visitEnd();\n-        }\n-        {\n-            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"main\", \"([Ljava\/lang\/String;)V\", null, null);\n-            mv.visitCode();\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(0, 1);\n-            mv.visitEnd();\n-        }\n-        cw.visitEnd();\n+        byte[] bytes;\n+\n+        bytes = ClassFile.of().build(ClassDesc.of(\"Overrider\"),\n+                clb -> clb\n+                        .withVersion(JAVA_7_VERSION, 0)\n+                        .withFlags(ACC_PUBLIC | ACC_SUPER)\n+                        .withSuperclass(ClassDesc.of(\"HasFinal\"))\n+\n+                        .withMethodBody(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                cob -> cob\n+                                        .aload(0)\n+                                        .invokespecial(ClassDesc.ofInternalName(\"HasFinal\"), INIT_NAME, MTD_void)\n+                                        .return_())\n+\n+                        .withMethodBody(\"m\", MethodTypeDesc.ofDescriptor(\"(Ljava\/lang\/String;)V\"), ACC_PUBLIC, CodeBuilder::return_)\n+\n+                        .withMethodBody(\"main\", MethodTypeDesc.ofDescriptor(\"([Ljava\/lang\/String;)V\"), ACC_PUBLIC | ACC_STATIC, CodeBuilder::return_)\n+\n+        );\n@@ -120,1 +112,1 @@\n-             fos.write(cw.toByteArray());\n+             fos.write(bytes);\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/OverriderMsg.java","additions":50,"deletions":58,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,7 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+\n+\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.constant.ConstantDescs.*;\n@@ -34,0 +38,1 @@\n+ * @enablePreview\n@@ -36,2 +41,1 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n- *          java.base\/jdk.internal.misc\n+ * @modules java.base\/jdk.internal.misc\n@@ -40,4 +44,4 @@\n- * @run driver TestMultiANewArray 49\n- * @run driver TestMultiANewArray 50\n- * @run driver TestMultiANewArray 51\n- * @run driver TestMultiANewArray 52\n+ * @run main\/othervm --enable-preview TestMultiANewArray 49\n+ * @run main\/othervm --enable-preview TestMultiANewArray 50\n+ * @run main\/othervm --enable-preview TestMultiANewArray 51\n+ * @run main\/othervm --enable-preview TestMultiANewArray 52\n@@ -58,21 +62,1 @@\n-        ClassWriter cw = new ClassWriter(0);\n-        MethodVisitor mv;\n-\n-        cw.visit(cfv, ACC_PUBLIC + ACC_SUPER, \"ClassFile\", null, \"java\/lang\/Object\", null);\n-        mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-        mv.visitCode();\n-        mv.visitVarInsn(ALOAD, 0);\n-        mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n-        mv.visitInsn(RETURN);\n-        mv.visitMaxs(1, 1);\n-        mv.visitEnd();\n-\n-        mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"main\", \"([Ljava\/lang\/String;)V\", null, null);\n-        mv.visitCode();\n-        mv.visitInsn(ICONST_1);\n-        mv.visitInsn(ICONST_2);\n-        mv.visitMultiANewArrayInsn(\"[I\", 2);\n-        mv.visitVarInsn(ASTORE, 1);\n-        mv.visitInsn(RETURN);\n-        mv.visitMaxs(2, 2);\n-        mv.visitEnd();\n+        byte[] bytes;\n@@ -80,1 +64,19 @@\n-        cw.visitEnd();\n+        bytes = ClassFile.of().build(ClassDesc.of(\"ClassFile\"),\n+                    clb -> clb\n+                            .withVersion(cfv, 0)\n+                            .withSuperclass(CD_Object)\n+                            .withFlags(ACC_PUBLIC | ACC_SUPER)\n+                            .withMethodBody(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                    cob -> cob\n+                                            .aload(0)\n+                                            .invokespecial(CD_Object, INIT_NAME, MTD_void)\n+                                            .return_())\n+                            .withMethodBody(\"main\", MethodTypeDesc.of(CD_void, CD_String.arrayType()), ACC_PUBLIC | ACC_STATIC,\n+                                    cob -> cob\n+                                            .iconst_1()\n+                                            .iconst_2()\n+                                            .multianewarray(CD_int.arrayType(), 2)\n+                                            .astore(1)\n+                                            .return_()\n+                            )\n+        );\n@@ -83,1 +85,1 @@\n-             fos.write(cw.toByteArray());\n+             fos.write(bytes);\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/TestMultiANewArray.java","additions":35,"deletions":33,"binary":false,"changes":68,"status":"modified"}]}