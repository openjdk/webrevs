{"files":[{"patch":"@@ -26,0 +26,3 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n@@ -27,3 +30,2 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import static jdk.internal.org.objectweb.asm.Opcodes.*;\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.constant.ConstantDescs.*;\n@@ -36,0 +38,1 @@\n+ * @enablePreview\n@@ -39,1 +42,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -41,2 +43,3 @@\n- * @run driver TestANewArray 49\n- * @run driver TestANewArray 52\n+ * @run main TestANewArray 49\n+ * @run main TestANewArray 52\n+ *\n@@ -104,3 +107,1 @@\n-    public static byte[] dumpClassFile(int cfv, int testDimension264, String arrayDim) throws Exception {\n-        ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES);\n-        MethodVisitor mv;\n+    public static byte[] dumpClassFile(int cfv, int testDimension264, String arrayType) throws IllegalArgumentException {\n@@ -110,21 +111,16 @@\n-        cw.visit(cfv, ACC_PUBLIC + ACC_SUPER, classCName, null, \"java\/lang\/Object\", null);\n-        {\n-            mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-            mv.visitCode();\n-            mv.visitVarInsn(ALOAD, 0);\n-            mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(1, 1);\n-            mv.visitEnd();\n-        }\n-        {   \/\/ classCName main method\n-            mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"main\", \"([Ljava\/lang\/String;)V\", null, null);\n-            mv.visitCode();\n-            mv.visitIntInsn(BIPUSH, 1);\n-            mv.visitTypeInsn(ANEWARRAY, arrayDim); \/\/ Test ANEWARRAY bytecode with various dimensions\n-            mv.visitInsn(RETURN);\n-            mv.visitMaxs(2, 2);\n-            mv.visitEnd();\n-        }\n-        cw.visitEnd();\n-        return cw.toByteArray();\n+        return ClassFile.of(ClassFile.StackMapsOption.DROP_STACK_MAPS).build(ClassDesc.of(classCName),\n+                    clb -> clb\n+                            .withVersion(cfv, 0)\n+                            .withSuperclass(CD_Object)\n+                            .withFlags(ACC_PUBLIC | ACC_SUPER)\n+                            .withMethodBody(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                    cob -> cob\n+                                            .aload(0)\n+                                            .invokespecial(CD_Object, INIT_NAME, MTD_void)\n+                                            .return_())\n+                            .withMethodBody(\"main\", MethodTypeDesc.of(CD_void, CD_String.arrayType()), ACC_PUBLIC | ACC_STATIC,\n+                                    cob -> cob\n+                                            .bipush(1)\n+                                            .anewarray(cob.constantPool().classEntry(cob.constantPool().utf8Entry(arrayType)))\n+                                            .return_())\n+        );\n","filename":"test\/hotspot\/jtreg\/runtime\/verifier\/TestANewArray.java","additions":26,"deletions":30,"binary":false,"changes":56,"status":"modified"}]}