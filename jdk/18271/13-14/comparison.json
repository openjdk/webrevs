{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+ * @enablePreview\n@@ -31,1 +32,1 @@\n- * @run driver LargeClassTest\n+ * @run main LargeClassTest\n@@ -36,6 +37,5 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.FieldVisitor;\n-import jdk.internal.org.objectweb.asm.Label;\n-import jdk.internal.org.objectweb.asm.AnnotationVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n+\n@@ -45,1 +45,4 @@\n-public class LargeClassTest implements Opcodes {\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.constant.ConstantDescs.*;\n+\n+public class LargeClassTest{\n@@ -56,6 +59,7 @@\n-        ClassWriter cw = new ClassWriter(0);\n-        FieldVisitor fv;\n-        MethodVisitor mv;\n-        AnnotationVisitor av0;\n-\n-        cw.visit(55, ACC_PUBLIC + ACC_SUPER, \"Large\", null, \"java\/lang\/Object\", null);\n+        ClassDesc CD_Large = ClassDesc.of(\"Large\");\n+        ClassDesc CD_Random = ClassDesc.ofInternalName(\"java\/util\/Random\");\n+        ClassDesc CD_System = ClassDesc.ofInternalName(\"java\/lang\/System\");\n+        ClassDesc CD_PrintStream = ClassDesc.ofInternalName(\"java\/io\/PrintStream\");\n+        ClassDesc CD_Thread = ClassDesc.ofInternalName(\"java\/lang\/Thread\");\n+        ClassDesc CD_StackTraceElement = ClassDesc.ofInternalName(\"java\/lang\/StackTraceElement\");\n+        ClassDesc CD_Arrays = ClassDesc.ofInternalName(\"java\/util\/Arrays\");\n@@ -63,80 +67,28 @@\n-        {\n-          mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-          mv.visitCode();\n-          mv.visitVarInsn(ALOAD, 0);\n-          mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\", false);\n-          mv.visitInsn(RETURN);\n-          mv.visitMaxs(1, 1);\n-          mv.visitEnd();\n-        }\n-        {\n-          \/\/ public static void main(String[] args) {\n-          \/\/     Large large = new Large();\n-          \/\/     large.f_1(55);\n-          \/\/ }\n-          mv = cw.visitMethod(ACC_PUBLIC + ACC_STATIC, \"main\", \"([Ljava\/lang\/String;)V\", null, null);\n-          mv.visitCode();\n-          mv.visitTypeInsn(NEW, \"Large\");\n-          mv.visitInsn(DUP);\n-          mv.visitMethodInsn(INVOKESPECIAL, \"Large\", \"<init>\", \"()V\", false);\n-          mv.visitVarInsn(ASTORE, 1);\n-          mv.visitVarInsn(ALOAD, 1);\n-          mv.visitIntInsn(BIPUSH, 55);\n-          mv.visitMethodInsn(INVOKEVIRTUAL, \"Large\", \"f_1\", \"(I)I\", false);\n-          mv.visitInsn(POP);\n-          mv.visitInsn(RETURN);\n-          mv.visitMaxs(2, 2);\n-          mv.visitEnd();\n-        }\n-\n-        \/\/ Write 33560 methods called f_$i\n-        for (int i = 1000; i < 34560; i++)\n-        {\n-          mv = cw.visitMethod(ACC_PUBLIC, \"f_\" + i, \"()V\", null, null);\n-          mv.visitCode();\n-          mv.visitInsn(RETURN);\n-          mv.visitMaxs(0, 1);\n-          mv.visitEnd();\n-        }\n-        {\n-          \/\/ public int f_1(int prior) {\n-          \/\/   int total = prior + new java.util.Random(1).nextInt();\n-          \/\/   return total + f_2(total);\n-          \/\/ }\n-          mv = cw.visitMethod(ACC_PUBLIC, \"f_1\", \"(I)I\", null, null);\n-          mv.visitCode();\n-          mv.visitVarInsn(ILOAD, 1);\n-          mv.visitTypeInsn(NEW, \"java\/util\/Random\");\n-          mv.visitInsn(DUP);\n-          mv.visitInsn(LCONST_1);\n-          mv.visitMethodInsn(INVOKESPECIAL, \"java\/util\/Random\", \"<init>\", \"(J)V\", false);\n-          mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/util\/Random\", \"nextInt\", \"()I\", false);\n-          mv.visitInsn(IADD);\n-          mv.visitVarInsn(ISTORE, 2);\n-          mv.visitVarInsn(ILOAD, 2);\n-          mv.visitVarInsn(ALOAD, 0);\n-          mv.visitVarInsn(ILOAD, 2);\n-          mv.visitMethodInsn(INVOKEVIRTUAL, \"Large\", \"f_2\", \"(I)I\", false);\n-          mv.visitInsn(IADD);\n-          mv.visitInsn(IRETURN);\n-          mv.visitMaxs(5, 3);\n-          mv.visitEnd();\n-        }\n-        {\n-          \/\/ public int f_2(int total) {\n-          \/\/   System.out.println(java.util.Arrays.toString(Thread.currentThread().getStackTrace()));\n-          \/\/   return 10;\n-          \/\/ }\n-          mv = cw.visitMethod(ACC_PUBLIC, \"f_2\", \"(I)I\", null, null);\n-          mv.visitCode();\n-          mv.visitFieldInsn(GETSTATIC, \"java\/lang\/System\", \"out\", \"Ljava\/io\/PrintStream;\");\n-          mv.visitMethodInsn(INVOKESTATIC, \"java\/lang\/Thread\", \"currentThread\", \"()Ljava\/lang\/Thread;\", false);\n-          mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/lang\/Thread\", \"getStackTrace\", \"()[Ljava\/lang\/StackTraceElement;\", false);\n-          mv.visitMethodInsn(INVOKESTATIC, \"java\/util\/Arrays\", \"toString\", \"([Ljava\/lang\/Object;)Ljava\/lang\/String;\", false);\n-          mv.visitMethodInsn(INVOKEVIRTUAL, \"java\/io\/PrintStream\", \"println\", \"(Ljava\/lang\/String;)V\", false);\n-          mv.visitIntInsn(BIPUSH, 10);\n-          mv.visitInsn(IRETURN);\n-          mv.visitMaxs(2, 2);\n-          mv.visitEnd();\n-        }\n-        cw.visitEnd();\n+        byte[] bytes = ClassFile.of().build(CD_Large,\n+                clb -> {\n+                    clb.withVersion(JAVA_11_VERSION, 0);\n+                            clb.withSuperclass(CD_Object);\n+                            clb.withFlags(ACC_PUBLIC | ACC_SUPER);\n+                            clb.withMethodBody(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                    cob -> cob\n+                                            .aload(0)\n+                                            .invokespecial(CD_Object, INIT_NAME, MTD_void)\n+                                            .return_());\n+                    \/\/ public static void main(String[] args) {\n+                    \/\/     Large large = new Large();\n+                    \/\/     large.f_1(55);\n+                    \/\/ }\n+                    clb.withMethodBody(\"main\", MethodTypeDesc.of(CD_void, CD_String.arrayType()), ACC_PUBLIC | ACC_STATIC,\n+                                    cob -> cob\n+                                            .new_(CD_Large)\n+                                            .dup()\n+                                            .invokespecial(CD_Large, INIT_NAME, MTD_void)\n+                                            .astore(1)\n+                                            .aload(1)\n+                                            .bipush(55)\n+                                            .invokevirtual(CD_Large, \"f_1\", MethodTypeDesc.of(CD_int, CD_int))\n+                                            .pop()\n+                                            .return_());\n+                    for (int i = 1000; i < 34560 ; i++) {\n+                        clb.withMethodBody(\"f_\" + i, MethodTypeDesc.of(CD_void), ACC_PUBLIC,\n+                                CodeBuilder::return_);\n@@ -144,0 +96,36 @@\n+                    }\n+                    \/\/ public int f_1(int prior) {\n+                    \/\/   int total = prior + new java.util.Random(1).nextInt();\n+                    \/\/   return total + f_2(total);\n+                    \/\/ }\n+                    clb.withMethodBody(\"f_1\", MethodTypeDesc.of(CD_int, CD_int), ACC_PUBLIC,\n+                            cob -> cob\n+                                    .iload(1)\n+                                    .new_(CD_Random)\n+                                    .dup()\n+                                    .lconst_1()\n+                                    .invokespecial(CD_Random, INIT_NAME, MethodTypeDesc.of(CD_void, CD_long))\n+                                    .invokevirtual(CD_Random, \"nextInt\", MethodTypeDesc.of(CD_int))\n+                                    .iadd()\n+                                    .istore(2)\n+                                    .iload(2)\n+                                    .aload(0)\n+                                    .iload(2)\n+                                    .invokevirtual(CD_Large, \"f_2\", MethodTypeDesc.of(CD_int, CD_int))\n+                                    .iadd()\n+                                    .ireturn());\n+                    \/\/ public int f_2(int total) {\n+                    \/\/   System.out.println(java.util.Arrays.toString(Thread.currentThread().getStackTrace()));\n+                    \/\/   return 10;\n+                    \/\/ }\n+                    clb.withMethodBody(\"f_2\", MethodTypeDesc.of(CD_int, CD_int), ACC_PUBLIC,\n+                            cob -> cob\n+                                    .getstatic(CD_System, \"out\", CD_PrintStream)\n+                                    .invokestatic(CD_Thread, \"currentThread\", MethodTypeDesc.of(CD_Thread))\n+                                    .invokevirtual(CD_Thread, \"getStackTrace\", MethodTypeDesc.of(CD_StackTraceElement.arrayType()))\n+                                    .invokestatic(CD_Arrays, \"toString\", MethodTypeDesc.of(CD_String, CD_Object.arrayType()))\n+                                    .invokevirtual(CD_PrintStream, \"println\", MethodTypeDesc.of(CD_void, CD_String))\n+                                    .bipush(10)\n+                                    .ireturn());\n+                }\n+        );\n@@ -145,1 +133,1 @@\n-          fos.write(cw.toByteArray());\n+          fos.write(bytes);\n","filename":"test\/hotspot\/jtreg\/runtime\/StackTrace\/LargeClassTest.java","additions":84,"deletions":96,"binary":false,"changes":180,"status":"modified"}]}