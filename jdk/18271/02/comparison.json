{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @enablePreview\n@@ -28,1 +29,0 @@\n- * @modules java.base\/jdk.internal.org.objectweb.asm\n@@ -32,0 +32,3 @@\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n+import java.lang.constant.MethodTypeDesc;\n@@ -33,3 +36,3 @@\n-import jdk.internal.org.objectweb.asm.ClassWriter;\n-import jdk.internal.org.objectweb.asm.MethodVisitor;\n-import jdk.internal.org.objectweb.asm.Opcodes;\n+\n+import static java.lang.classfile.ClassFile.*;\n+import static java.lang.constant.ConstantDescs.*;\n@@ -54,1 +57,1 @@\n-    static class TestClassLoader extends ClassLoader implements Opcodes {\n+    static class TestClassLoader extends ClassLoader{\n@@ -69,2 +72,1 @@\n-            ClassWriter cw = new ClassWriter(0);\n-            MethodVisitor mv;\n+            byte[] bytes = null;\n@@ -72,18 +74,16 @@\n-               case CLASS_NAME_A:\n-                    cw.visit(52, ACC_SUPER | ACC_PUBLIC, CLASS_NAME_A, null, \"java\/lang\/Object\", null);\n-                    {\n-                        mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-                        mv.visitCode();\n-                        mv.visitVarInsn(ALOAD, 0);\n-                        mv.visitMethodInsn(INVOKESPECIAL, \"java\/lang\/Object\", \"<init>\", \"()V\");\n-                        mv.visitInsn(RETURN);\n-                        mv.visitMaxs(1, 1);\n-                        mv.visitEnd();\n-\n-                        mv = cw.visitMethod(ACC_FINAL | ACC_STATIC, \"m\", \"()I\", null, null);\n-                        mv.visitCode();\n-                        mv.visitLdcInsn(FAILED);\n-                        mv.visitInsn(IRETURN);\n-                        mv.visitMaxs(1, 1);\n-                        mv.visitEnd();\n-                    }\n+                case CLASS_NAME_A:\n+                    bytes = ClassFile.of().build(ClassDesc.of(CLASS_NAME_A),\n+                            clb -> clb.withVersion(JAVA_8_VERSION, 0)\n+                                    .withFlags(ACC_PUBLIC + ACC_SUPER)\n+                                    .withSuperclass(CD_Object)\n+                                    .withMethod(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                            mb -> mb.withCode(\n+                                                    cob -> cob\n+                                                            .aload(0)\n+                                                            .invokespecial(CD_Object, INIT_NAME, MTD_void)\n+                                                            .return_()))\n+                                    .withMethod(\"m\", MethodTypeDesc.of(CD_int), ACC_FINAL + ACC_STATIC,\n+                                            mb -> mb.withCode(\n+                                                    cob -> cob.ldc(FAILED)\n+                                                            .ireturn()))\n+                    );\n@@ -91,10 +91,0 @@\n-                case CLASS_NAME_B:\n-                    cw.visit(52, ACC_SUPER | ACC_PUBLIC, CLASS_NAME_B, null, CLASS_NAME_A, null);\n-                    {\n-                        mv = cw.visitMethod(ACC_PUBLIC, \"<init>\", \"()V\", null, null);\n-                        mv.visitCode();\n-                        mv.visitVarInsn(ALOAD, 0);\n-                        mv.visitMethodInsn(INVOKESPECIAL, CLASS_NAME_A, \"<init>\", \"()V\");\n-                        mv.visitInsn(RETURN);\n-                        mv.visitMaxs(1, 1);\n-                        mv.visitEnd();\n@@ -102,8 +92,15 @@\n-                        mv = cw.visitMethod(ACC_PUBLIC, \"m\", \"()I\", null, null);\n-                        mv.visitCode();\n-                        mv.visitLdcInsn(EXPECTED);\n-                        mv.visitInsn(IRETURN);\n-                        mv.visitMaxs(1, 1);\n-                        mv.visitEnd();\n-\n-                    }\n+                case CLASS_NAME_B:\n+                    bytes = ClassFile.of().build(ClassDesc.ofInternalName(CLASS_NAME_B),\n+                            clb -> clb.withVersion(JAVA_8_VERSION, 0)\n+                                    .withFlags(ACC_PUBLIC + ACC_SUPER)\n+                                    .withSuperclass(ClassDesc.ofInternalName(CLASS_NAME_A))\n+                                    .withMethod(INIT_NAME, MTD_void, ACC_PUBLIC,\n+                                            mb -> mb.withCode(\n+                                                    cob -> cob.aload(0)\n+                                                            .invokespecial(ClassDesc.ofInternalName(CLASS_NAME_A), INIT_NAME, MTD_void)\n+                                                            .return_()))\n+                                    .withMethod(\"m\", MethodTypeDesc.of(CD_int), ACC_PUBLIC,\n+                                            mb -> mb.withCode(\n+                                                    cob -> cob.ldc(EXPECTED)\n+                                                            .ireturn()))\n+                    );\n@@ -114,1 +111,0 @@\n-            cw.visitEnd();\n@@ -116,1 +112,1 @@\n-            return cw.toByteArray();\n+            return bytes;\n","filename":"test\/hotspot\/jtreg\/runtime\/finalStatic\/FinalStatic.java","additions":42,"deletions":46,"binary":false,"changes":88,"status":"modified"}]}