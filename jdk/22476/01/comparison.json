{"files":[{"patch":"@@ -263,0 +263,74 @@\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+class WeakNarrowCmpxchgTester {\n+ public:\n+  typedef TESTSIZE (*cmpxchg_func)(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result,\n+                                   int64_t scratch0, int64_t scratch1, int64_t scratch2);\n+\n+  static TESTSIZE weak_narrow_cmpxchg(intptr_t addr, TESTSIZE expected, TESTSIZE new_value, TESTSIZE result,\n+                                      int64_t scratch0, int64_t scratch1, int64_t scratch2) {\n+    BufferBlob* bb = BufferBlob::create(\"riscvTest\", 128);\n+    CodeBuffer code(bb);\n+    MacroAssembler _masm(&code);\n+    address entry = _masm.pc();\n+    {\n+       _masm.weak_cmpxchg_narrow_value(\/*addr*\/ c_rarg0, \/*expected*\/ c_rarg1, \/*new_value*\/c_rarg2,\n+                                      ASMSIZE, Assembler::relaxed, Assembler::relaxed,\n+                                      \/*result*\/ c_rarg3, c_rarg4, c_rarg5, c_rarg6); \/* Uses also t0-t1, caller saved *\/\n+      _masm.mv(c_rarg0, c_rarg3);\n+      _masm.ret();\n+    }\n+    _masm.flush(); \/\/ icache invalidate\n+    TESTSIZE ret = ((cmpxchg_func)entry)(addr, expected, new_value, result, scratch0, scratch1, scratch2);\n+    BufferBlob::free(bb);\n+    return ret;\n+  }\n+};\n+\n+template <typename TESTSIZE, Assembler::operand_size ASMSIZE>\n+void run_narrow_cmpxchg_tests() {\n+  \/\/ Assume natural aligned\n+  TESTSIZE data[8];\n+  TESTSIZE ret;\n+  for (int i = 0; i < 7; i++) {\n+    memset(data, -1, sizeof(data));\n+\n+    data[i] = 121;\n+    ret = WeakNarrowCmpxchgTester<TESTSIZE, ASMSIZE>::weak_narrow_cmpxchg((intptr_t)&data[i], 121, 42, \/* result *\/ 67,\n+                                                                          -1, -1, -1);\n+    ASSERT_EQ(ret, 1);\n+    ASSERT_EQ(data[i], 42);\n+\n+    data[i] = 121;\n+    ret = WeakNarrowCmpxchgTester<TESTSIZE, ASMSIZE>::weak_narrow_cmpxchg((intptr_t)&data[i], 120, 42, \/* result *\/ 67,\n+                                                                          -1, -1, -1);\n+    ASSERT_EQ(ret, 0);\n+    ASSERT_EQ(data[i], 121);\n+  }\n+}\n+\n+TEST_VM(RiscV, cmpxchg_weak_int16_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_narrow_cmpxchg_tests<int16_t, Assembler::int16>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_weak_int8_lr_sc) {\n+  bool zacas = UseZacas;\n+  UseZacas = false;\n+  run_narrow_cmpxchg_tests<int8_t, Assembler::int8>();\n+  UseZacas = zacas;\n+}\n+\n+TEST_VM(RiscV, cmpxchg_weak_int16_maybe_zacas) {\n+  if (UseZacas) {\n+    run_narrow_cmpxchg_tests<int16_t, Assembler::int16>();\n+  }\n+}\n+\n+TEST_VM(RiscV, cmpxchg_weak_int8_maybe_zacas) {\n+  if (UseZacas) {\n+    run_narrow_cmpxchg_tests<int8_t, Assembler::int8>();\n+  }\n+}\n+\n","filename":"test\/hotspot\/gtest\/riscv\/test_assembler_riscv.cpp","additions":74,"deletions":0,"binary":false,"changes":74,"status":"modified"}]}