{"files":[{"patch":"@@ -57,1 +57,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_ANNOTATION}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_ANNOTATION}.\n@@ -64,1 +64,1 @@\n-        \/** {@return the annotation} *\/\n+        \/** {@return the annotation value} *\/\n@@ -70,1 +70,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_ARRAY}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_ARRAY}.\n@@ -77,1 +77,7 @@\n-        \/** {@return the values} *\/\n+        \/**\n+         * {@return the array elements of the array value}\n+         *\n+         * @apiNote\n+         * All array elements derived from Java source code have the same type,\n+         * which must not be an array type. ({@jls 9.6.1})\n+         *\/\n@@ -84,2 +90,0 @@\n-     * @param <C> the constant pool entry type\n-     * @param <R> the resolved live constant type\n@@ -90,1 +94,1 @@\n-    sealed interface OfConstant<C extends AnnotationConstantValueEntry, R extends Comparable<R> & Constable>\n+    sealed interface OfConstant\n@@ -103,1 +107,1 @@\n-        C poolEntry();\n+        AnnotationConstantValueEntry poolEntry();\n@@ -110,1 +114,1 @@\n-         * The returned object, despite being {@link Constable}, may not\n+         * The returned object, which may be {@link Constable}, may not\n@@ -117,1 +121,1 @@\n-        R resolvedValue();\n+        Object resolvedValue();\n@@ -122,1 +126,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_STRING}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_STRING}.\n@@ -127,1 +131,1 @@\n-    sealed interface OfString extends OfConstant<Utf8Entry, String>\n+    sealed interface OfString extends OfConstant\n@@ -129,1 +133,5 @@\n-        \/** {@return the constant} *\/\n+        \/** {@return the backing UTF8 entry} *\/\n+        @Override\n+        Utf8Entry poolEntry();\n+\n+        \/** {@return the constant string value} *\/\n@@ -132,0 +140,6 @@\n+        \/**\n+         * {@return the resolved string value}\n+         *\n+         * @implSpec\n+         * This method returns the same as {@link #stringValue()}.\n+         *\/\n@@ -140,1 +154,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_DOUBLE}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_DOUBLE}.\n@@ -145,1 +159,1 @@\n-    sealed interface OfDouble extends OfConstant<DoubleEntry, Double>\n+    sealed interface OfDouble extends OfConstant\n@@ -147,1 +161,5 @@\n-        \/** {@return the constant} *\/\n+        \/** {@return the backing double entry} *\/\n+        @Override\n+        DoubleEntry poolEntry();\n+\n+        \/** {@return the constant double value} *\/\n@@ -150,0 +168,6 @@\n+        \/**\n+         * {@return the resolved double value}\n+         *\n+         * @implSpec\n+         * This method returns the same as {@link #doubleValue()}.\n+         *\/\n@@ -158,1 +182,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_FLOAT}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_FLOAT}.\n@@ -163,1 +187,1 @@\n-    sealed interface OfFloat extends OfConstant<FloatEntry, Float>\n+    sealed interface OfFloat extends OfConstant\n@@ -165,1 +189,5 @@\n-        \/** {@return the constant} *\/\n+        \/** {@return the backing float entry} *\/\n+        @Override\n+        FloatEntry poolEntry();\n+\n+        \/** {@return the constant float value} *\/\n@@ -168,0 +196,6 @@\n+        \/**\n+         * {@return the resolved float value}\n+         *\n+         * @implSpec\n+         * This method returns the same as {@link #floatValue()}.\n+         *\/\n@@ -176,1 +210,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_LONG}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_LONG}.\n@@ -181,1 +215,1 @@\n-    sealed interface OfLong extends OfConstant<LongEntry, Long>\n+    sealed interface OfLong extends OfConstant\n@@ -183,1 +217,5 @@\n-        \/** {@return the constant} *\/\n+        \/** {@return the backing long entry} *\/\n+        @Override\n+        LongEntry poolEntry();\n+\n+        \/** {@return the constant long value} *\/\n@@ -186,0 +224,6 @@\n+        \/**\n+         * {@return the resolved long value}\n+         *\n+         * @implSpec\n+         * This method returns the same as {@link #longValue()}.\n+         *\/\n@@ -194,1 +238,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_INT}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_INT}.\n@@ -199,1 +243,1 @@\n-    sealed interface OfInteger extends OfConstant<IntegerEntry, Integer>\n+    sealed interface OfInteger extends OfConstant\n@@ -201,1 +245,5 @@\n-        \/** {@return the constant} *\/\n+        \/** {@return the backing integer entry} *\/\n+        @Override\n+        IntegerEntry poolEntry();\n+\n+        \/** {@return the constant int value} *\/\n@@ -204,0 +252,6 @@\n+        \/**\n+         * {@return the resolved int value}\n+         *\n+         * @implSpec\n+         * This method returns the same as {@link #intValue()}.\n+         *\/\n@@ -212,1 +266,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_SHORT}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_SHORT}.\n@@ -217,1 +271,1 @@\n-    sealed interface OfShort extends OfConstant<IntegerEntry, Short>\n+    sealed interface OfShort extends OfConstant\n@@ -219,1 +273,8 @@\n-        \/** {@return the constant} *\/\n+        \/** {@return the backing integer entry} *\/\n+        @Override\n+        IntegerEntry poolEntry();\n+\n+        \/**\n+         * {@return the constant short value}\n+         * @jvms 2.11.1 Types and the Java Virtual Machine\n+         *\/\n@@ -222,0 +283,6 @@\n+        \/**\n+         * {@return the resolved short value}\n+         *\n+         * @implSpec\n+         * This method returns the same as {@link #shortValue()}.\n+         *\/\n@@ -230,1 +297,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_CHAR}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_CHAR}.\n@@ -235,1 +302,1 @@\n-    sealed interface OfCharacter extends OfConstant<IntegerEntry, Character>\n+    sealed interface OfCharacter extends OfConstant\n@@ -237,1 +304,8 @@\n-        \/** {@return the constant} *\/\n+        \/** {@return the backing integer entry} *\/\n+        @Override\n+        IntegerEntry poolEntry();\n+\n+        \/**\n+         * {@return the constant char value}\n+         * @jvms 2.11.1 Types and the Java Virtual Machine\n+         *\/\n@@ -240,0 +314,6 @@\n+        \/**\n+         * {@return the resolved char value}\n+         *\n+         * @implSpec\n+         * This method returns the same as {@link #charValue()}.\n+         *\/\n@@ -248,1 +328,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_BYTE}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_BYTE}.\n@@ -253,1 +333,1 @@\n-    sealed interface OfByte extends OfConstant<IntegerEntry, Byte>\n+    sealed interface OfByte extends OfConstant\n@@ -255,1 +335,8 @@\n-        \/** {@return the constant} *\/\n+        \/** {@return the backing integer entry} *\/\n+        @Override\n+        IntegerEntry poolEntry();\n+\n+        \/**\n+         * {@return the constant byte value}\n+         * @jvms 2.11.1 Types and the Java Virtual Machine\n+         *\/\n@@ -258,0 +345,6 @@\n+        \/**\n+         * {@return the resolved byte value}\n+         *\n+         * @implSpec\n+         * This method returns the same as {@link #byteValue()}.\n+         *\/\n@@ -266,1 +359,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_BOOLEAN}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_BOOLEAN}.\n@@ -271,1 +364,1 @@\n-    sealed interface OfBoolean extends OfConstant<IntegerEntry, Boolean>\n+    sealed interface OfBoolean extends OfConstant\n@@ -273,1 +366,8 @@\n-        \/** {@return the constant} *\/\n+        \/** {@return the backing integer entry} *\/\n+        @Override\n+        IntegerEntry poolEntry();\n+\n+        \/**\n+         * {@return the constant boolean value}\n+         * @jvms 2.3.4 The <i>boolean<\/i> Type\n+         *\/\n@@ -276,0 +376,6 @@\n+        \/**\n+         * {@return the resolved boolean value}\n+         *\n+         * @implSpec\n+         * This method returns the same as {@link #booleanValue()}.\n+         *\/\n@@ -284,1 +390,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_CLASS}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_CLASS}.\n@@ -291,1 +397,1 @@\n-        \/** {@return the class name} *\/\n+        \/** {@return the class descriptor string} *\/\n@@ -294,1 +400,1 @@\n-        \/** {@return the class symbol} *\/\n+        \/** {@return the class descriptor} *\/\n@@ -302,1 +408,1 @@\n-     * The tag of this element is {@value ClassFile#AEV_ENUM}.\n+     * The {@linkplain #tag tag} of this element is {@value ClassFile#AEV_ENUM}.\n@@ -309,1 +415,1 @@\n-        \/** {@return the enum class name} *\/\n+        \/** {@return the enum class descriptor string} *\/\n@@ -312,1 +418,1 @@\n-        \/** {@return the enum class symbol} *\/\n+        \/** {@return the enum class descriptor} *\/\n@@ -328,1 +434,1 @@\n-     * @param className the name of the enum class\n+     * @param className the descriptor string of the enum class\n@@ -338,1 +444,1 @@\n-     * @param className the name of the enum class\n+     * @param className the descriptor of the enum class\n@@ -348,1 +454,1 @@\n-     * @param className the name of the enum class\n+     * @param className the descriptor string of the class\n@@ -356,1 +462,1 @@\n-     * @param className the name of the enum class\n+     * @param className the descriptor of the class\n@@ -517,1 +623,1 @@\n-     * @param values the values\n+     * @param values the array elements\n@@ -525,1 +631,1 @@\n-     * @param values the values\n+     * @param values the array elements\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":155,"deletions":49,"binary":false,"changes":204,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.lang.constant.Constable;\n@@ -83,2 +82,1 @@\n-    public sealed interface OfConstantImpl<C extends AnnotationConstantValueEntry, T extends Constable & Comparable<T>>\n-            extends AnnotationValue.OfConstant<C, T>, Util.Writable {\n+    public sealed interface OfConstantImpl extends AnnotationValue.OfConstant, Util.Writable {\n@@ -95,1 +93,1 @@\n-            implements OfConstantImpl<Utf8Entry, String>, AnnotationValue.OfString {\n+            implements OfConstantImpl, AnnotationValue.OfString {\n@@ -109,1 +107,1 @@\n-            implements OfConstantImpl<DoubleEntry, Double>, AnnotationValue.OfDouble {\n+            implements OfConstantImpl, AnnotationValue.OfDouble {\n@@ -123,1 +121,1 @@\n-            implements OfConstantImpl<FloatEntry, Float>, AnnotationValue.OfFloat {\n+            implements OfConstantImpl, AnnotationValue.OfFloat {\n@@ -137,1 +135,1 @@\n-            implements OfConstantImpl<LongEntry, Long>, AnnotationValue.OfLong {\n+            implements OfConstantImpl, AnnotationValue.OfLong {\n@@ -151,1 +149,1 @@\n-            implements OfConstantImpl<IntegerEntry, Integer>, AnnotationValue.OfInteger {\n+            implements OfConstantImpl, AnnotationValue.OfInteger {\n@@ -165,1 +163,1 @@\n-            implements OfConstantImpl<IntegerEntry, Short>, AnnotationValue.OfShort {\n+            implements OfConstantImpl, AnnotationValue.OfShort {\n@@ -179,1 +177,1 @@\n-            implements OfConstantImpl<IntegerEntry, Character>, AnnotationValue.OfCharacter {\n+            implements OfConstantImpl, AnnotationValue.OfCharacter {\n@@ -193,1 +191,1 @@\n-            implements OfConstantImpl<IntegerEntry, Byte>, AnnotationValue.OfByte {\n+            implements OfConstantImpl, AnnotationValue.OfByte {\n@@ -207,1 +205,1 @@\n-            implements OfConstantImpl<IntegerEntry, Boolean>, AnnotationValue.OfBoolean {\n+            implements OfConstantImpl, AnnotationValue.OfBoolean {\n@@ -216,1 +214,1 @@\n-            return poolEntry().intValue() == 1;\n+            return poolEntry().intValue() != 0;\n@@ -223,2 +221,2 @@\n-        public OfArrayImpl(List<AnnotationValue> values) {\n-            this.values = List.copyOf(values);\n+        public OfArrayImpl {\n+            values = List.copyOf(values);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":13,"deletions":15,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -394,1 +394,1 @@\n-            case AnnotationValue.OfConstant<?, ?> oc -> oc;\n+            case AnnotationValue.OfConstant oc -> oc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -420,1 +420,1 @@\n-            case AnnotationValue.OfConstant<?, ?> _, AnnotationValue.OfClass _ -> 2;\n+            case AnnotationValue.OfConstant _, AnnotationValue.OfClass _ -> 2;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/ParserVerifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -229,1 +229,1 @@\n-            case AnnotationValue.OfConstant<?, ?> ev -> {\n+            case AnnotationValue.OfConstant ev -> {\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AnnotationWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-                    if (!(evp.value() instanceof AnnotationValue.OfConstant<?, ?> c))\n+                    if (!(evp.value() instanceof AnnotationValue.OfConstant c))\n@@ -122,1 +122,1 @@\n-                    assertEquals(values.stream().map(v -> ((AnnotationValue.OfConstant<?, ?>) v).poolEntry().constantValue()).collect(toSet()),\n+                    assertEquals(values.stream().map(v -> ((AnnotationValue.OfConstant) v).poolEntry().constantValue()).collect(toSet()),\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1061,1 +1061,1 @@\n-                case AnnotationValue.OfConstant<?, ?> evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n+                case AnnotationValue.OfConstant evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ClassRecord.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}