{"files":[{"patch":"@@ -96,1 +96,1 @@\n-            permits OfString, OfDouble, OfFloat, OfLong, OfInteger, OfShort, OfCharacter, OfByte,\n+            permits OfString, OfDouble, OfFloat, OfLong, OfInt, OfShort, OfChar, OfByte,\n@@ -103,1 +103,1 @@\n-         * For example, {@link OfInteger} and {@link OfCharacter} are both\n+         * For example, {@link OfInt} and {@link OfChar} are both\n@@ -107,1 +107,1 @@\n-        AnnotationConstantValueEntry poolEntry();\n+        AnnotationConstantValueEntry constant();\n@@ -114,1 +114,1 @@\n-         * The returned object, which may be {@link Constable}, may not\n+         * The returned object, despite being {@link Constable}, may not\n@@ -116,4 +116,5 @@\n-         * pool entry for encoding the annotation value in a class file. For example,\n-         * {@link OfCharacter} describes itself as a {@link DynamicConstantPoolEntry},\n-         * but it is actually backed by {@link IntegerEntry} in annotation format.\n-         * Use {@link #poolEntry poolEntry()} for a correct constant pool representation.\n+         * for encoding the annotation value in a class file. For example,\n+         * {@link Character} returned by {@link OfChar} describes itself as a\n+         * {@link DynamicConstantPoolEntry}, but it is actually backed by\n+         * {@link IntegerEntry} in annotation format.\n+         * Use {@link #constant constant()} for a correct constant pool representation.\n@@ -121,1 +122,1 @@\n-        Object resolvedValue();\n+        Constable resolvedValue();\n@@ -135,1 +136,1 @@\n-        Utf8Entry poolEntry();\n+        Utf8Entry constant();\n@@ -163,1 +164,1 @@\n-        DoubleEntry poolEntry();\n+        DoubleEntry constant();\n@@ -191,1 +192,1 @@\n-        FloatEntry poolEntry();\n+        FloatEntry constant();\n@@ -219,1 +220,1 @@\n-        LongEntry poolEntry();\n+        LongEntry constant();\n@@ -243,2 +244,2 @@\n-    sealed interface OfInteger extends OfConstant\n-            permits AnnotationImpl.OfIntegerImpl {\n+    sealed interface OfInt extends OfConstant\n+            permits AnnotationImpl.OfIntImpl {\n@@ -247,1 +248,1 @@\n-        IntegerEntry poolEntry();\n+        IntegerEntry constant();\n@@ -275,1 +276,1 @@\n-        IntegerEntry poolEntry();\n+        IntegerEntry constant();\n@@ -302,2 +303,2 @@\n-    sealed interface OfCharacter extends OfConstant\n-            permits AnnotationImpl.OfCharacterImpl {\n+    sealed interface OfChar extends OfConstant\n+            permits AnnotationImpl.OfCharImpl {\n@@ -306,1 +307,1 @@\n-        IntegerEntry poolEntry();\n+        IntegerEntry constant();\n@@ -337,1 +338,1 @@\n-        IntegerEntry poolEntry();\n+        IntegerEntry constant();\n@@ -368,1 +369,1 @@\n-        IntegerEntry poolEntry();\n+        IntegerEntry constant();\n@@ -536,2 +537,2 @@\n-    static OfInteger ofInt(IntegerEntry value) {\n-        return new AnnotationImpl.OfIntegerImpl(value);\n+    static OfInt ofInt(IntegerEntry value) {\n+        return new AnnotationImpl.OfIntImpl(value);\n@@ -544,1 +545,1 @@\n-    static OfInteger ofInt(int value) {\n+    static OfInt ofInt(int value) {\n@@ -568,2 +569,2 @@\n-    static OfCharacter ofChar(IntegerEntry value) {\n-        return new AnnotationImpl.OfCharacterImpl(value);\n+    static OfChar ofChar(IntegerEntry value) {\n+        return new AnnotationImpl.OfCharImpl(value);\n@@ -576,1 +577,1 @@\n-    static OfCharacter ofChar(char value) {\n+    static OfChar ofChar(char value) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":29,"deletions":28,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n- * in {@link AnnotationValue.OfInteger}.\n+ * in {@link AnnotationValue.OfInt}.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/AnnotationConstantValueEntry.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-            buf.writeIndex(poolEntry());\n+            buf.writeIndex(constant());\n@@ -92,1 +92,1 @@\n-    public record OfStringImpl(Utf8Entry poolEntry)\n+    public record OfStringImpl(Utf8Entry constant)\n@@ -102,1 +102,1 @@\n-            return poolEntry().stringValue();\n+            return constant().stringValue();\n@@ -106,1 +106,1 @@\n-    public record OfDoubleImpl(DoubleEntry poolEntry)\n+    public record OfDoubleImpl(DoubleEntry constant)\n@@ -116,1 +116,1 @@\n-            return poolEntry().doubleValue();\n+            return constant().doubleValue();\n@@ -120,1 +120,1 @@\n-    public record OfFloatImpl(FloatEntry poolEntry)\n+    public record OfFloatImpl(FloatEntry constant)\n@@ -130,1 +130,1 @@\n-            return poolEntry().floatValue();\n+            return constant().floatValue();\n@@ -134,1 +134,1 @@\n-    public record OfLongImpl(LongEntry poolEntry)\n+    public record OfLongImpl(LongEntry constant)\n@@ -144,1 +144,1 @@\n-            return poolEntry().longValue();\n+            return constant().longValue();\n@@ -148,2 +148,2 @@\n-    public record OfIntegerImpl(IntegerEntry poolEntry)\n-            implements OfConstantImpl, AnnotationValue.OfInteger {\n+    public record OfIntImpl(IntegerEntry constant)\n+            implements OfConstantImpl, AnnotationValue.OfInt {\n@@ -158,1 +158,1 @@\n-            return poolEntry().intValue();\n+            return constant().intValue();\n@@ -162,1 +162,1 @@\n-    public record OfShortImpl(IntegerEntry poolEntry)\n+    public record OfShortImpl(IntegerEntry constant)\n@@ -172,1 +172,1 @@\n-            return (short) poolEntry().intValue();\n+            return (short) constant().intValue();\n@@ -176,2 +176,2 @@\n-    public record OfCharacterImpl(IntegerEntry poolEntry)\n-            implements OfConstantImpl, AnnotationValue.OfCharacter {\n+    public record OfCharImpl(IntegerEntry constant)\n+            implements OfConstantImpl, AnnotationValue.OfChar {\n@@ -186,1 +186,1 @@\n-            return (char) poolEntry().intValue();\n+            return (char) constant().intValue();\n@@ -190,1 +190,1 @@\n-    public record OfByteImpl(IntegerEntry poolEntry)\n+    public record OfByteImpl(IntegerEntry constant)\n@@ -200,1 +200,1 @@\n-            return (byte) poolEntry().intValue();\n+            return (byte) constant().intValue();\n@@ -204,1 +204,1 @@\n-    public record OfBooleanImpl(IntegerEntry poolEntry)\n+    public record OfBooleanImpl(IntegerEntry constant)\n@@ -214,1 +214,1 @@\n-            return poolEntry().intValue() != 0;\n+            return constant().intValue() != 0;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-            case AEV_CHAR -> new AnnotationImpl.OfCharacterImpl(classReader.readEntry(p, IntegerEntry.class));\n+            case AEV_CHAR -> new AnnotationImpl.OfCharImpl(classReader.readEntry(p, IntegerEntry.class));\n@@ -66,1 +66,1 @@\n-            case AEV_INT -> new AnnotationImpl.OfIntegerImpl(classReader.readEntry(p, IntegerEntry.class));\n+            case AEV_INT -> new AnnotationImpl.OfIntImpl(classReader.readEntry(p, IntegerEntry.class));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationReader.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -514,1 +514,1 @@\n-            case OfInteger cv -> leafs(\"int\", String.valueOf(cv.intValue()));\n+            case OfInt cv -> leafs(\"int\", String.valueOf(cv.intValue()));\n@@ -516,1 +516,1 @@\n-            case OfCharacter cv -> leafs(\"char\", String.valueOf(cv.charValue()));\n+            case OfChar cv -> leafs(\"char\", String.valueOf(cv.charValue()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n@@ -231,1 +231,1 @@\n-                    var entry = ev.poolEntry();\n+                    var entry = ev.constant();\n@@ -265,1 +265,1 @@\n-                    print(ev.tag() + \"#\" + ev.poolEntry().index());\n+                    print(ev.tag() + \"#\" + ev.constant().index());\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AnnotationWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1061,1 +1061,1 @@\n-                case AnnotationValue.OfConstant evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n+                case AnnotationValue.OfConstant evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.constant()));\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ClassRecord.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-            case AnnotationValue.OfInteger v -> AnnotationValue.of(v.intValue());\n+            case AnnotationValue.OfInt v -> AnnotationValue.of(v.intValue());\n@@ -170,1 +170,1 @@\n-            case AnnotationValue.OfCharacter v -> AnnotationValue.of(v.charValue());\n+            case AnnotationValue.OfChar v -> AnnotationValue.of(v.charValue());\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/RebuildingTransformation.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-                case AnnotationValue.OfCharacter ev -> {\n+                case AnnotationValue.OfChar ev -> {\n@@ -116,1 +116,1 @@\n-                    testCase.checkEquals(((AnnotationValue.OfInteger) element_value).intValue(), Integer.parseInt(values[0]), \"const_value_index\");\n+                    testCase.checkEquals(((AnnotationValue.OfInt) element_value).intValue(), Integer.parseInt(values[0]), \"const_value_index\");\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/AnnotationDefault\/AnnotationDefaultVerifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -126,1 +126,1 @@\n-                    testResult.checkEquals(((AnnotationValue.OfInteger) element_value).intValue(), value, \"const_value_index : \" + value);\n+                    testResult.checkEquals(((AnnotationValue.OfInt) element_value).intValue(), value, \"const_value_index : \" + value);\n@@ -172,2 +172,2 @@\n-            AnnotationValue.OfCharacter ev =\n-                    (AnnotationValue.OfCharacter) element_value;\n+            AnnotationValue.OfChar ev =\n+                    (AnnotationValue.OfChar) element_value;\n","filename":"test\/langtools\/tools\/javac\/classfiles\/attributes\/annotations\/TestAnnotationInfo.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}