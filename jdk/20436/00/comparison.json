{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.lang.classfile.constantpool.DynamicConstantPoolEntry;\n@@ -37,1 +38,1 @@\n-import java.lang.constant.ConstantDesc;\n+import java.lang.constant.Constable;\n@@ -52,4 +53,1 @@\n-public sealed interface AnnotationValue\n-        permits AnnotationValue.OfAnnotation, AnnotationValue.OfArray,\n-                AnnotationValue.OfConstant, AnnotationValue.OfClass,\n-                AnnotationValue.OfEnum {\n+public sealed interface AnnotationValue {\n@@ -58,1 +56,2 @@\n-     * Models an annotation-valued element\n+     * Models an annotation-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_ANNOTATION}.\n@@ -70,1 +69,2 @@\n-     * Models an array-valued element\n+     * Models an array-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_ARRAY}.\n@@ -82,1 +82,1 @@\n-     * Models a constant-valued element\n+     * Models a constant-valued element.\n@@ -84,0 +84,2 @@\n+     * @param <C> the constant pool entry type\n+     * @param <R> the resolved live constant type\n@@ -88,14 +90,33 @@\n-    sealed interface OfConstant extends AnnotationValue\n-            permits AnnotationValue.OfString, AnnotationValue.OfDouble,\n-                    AnnotationValue.OfFloat, AnnotationValue.OfLong,\n-                    AnnotationValue.OfInteger, AnnotationValue.OfShort,\n-                    AnnotationValue.OfCharacter, AnnotationValue.OfByte,\n-                    AnnotationValue.OfBoolean, AnnotationImpl.OfConstantImpl {\n-        \/** {@return the constant} *\/\n-        AnnotationConstantValueEntry constant();\n-        \/** {@return the constant} *\/\n-        ConstantDesc constantValue();\n-    }\n-\n-    \/**\n-     * Models a constant-valued element\n+    sealed interface OfConstant<C extends AnnotationConstantValueEntry, R extends Comparable<R> & Constable>\n+            extends AnnotationValue\n+            permits OfString, OfDouble, OfFloat, OfLong, OfInteger, OfShort, OfCharacter, OfByte,\n+                    OfBoolean, AnnotationImpl.OfConstantImpl {\n+        \/**\n+         * {@return the constant pool entry backing this constant element}\n+         *\n+         * @apiNote\n+         * Different types of constant values may share the same type of entry.\n+         * For example, {@link OfInteger} and {@link OfCharacter} are both\n+         * backed by {@link IntegerEntry}. Use {@link #resolvedValue\n+         * resolvedValue()} for a value of accurate type.\n+         *\/\n+        C poolEntry();\n+\n+        \/**\n+         * {@return the resolved live constant value, as an object} The type of\n+         * the returned value may be a wrapper class or {@link String}.\n+         *\n+         * @apiNote\n+         * The returned object, despite being {@link Constable}, may not\n+         * {@linkplain Constable#describeConstable() describe} the right constant\n+         * pool entry for encoding the annotation value in a class file. For example,\n+         * {@link OfCharacter} describes itself as a {@link DynamicConstantPoolEntry},\n+         * but it is actually backed by {@link IntegerEntry} in annotation format.\n+         * Use {@link #poolEntry poolEntry()} for a correct constant pool representation.\n+         *\/\n+        R resolvedValue();\n+    }\n+\n+    \/**\n+     * Models a string-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_STRING}.\n@@ -106,1 +127,1 @@\n-    sealed interface OfString extends AnnotationValue.OfConstant\n+    sealed interface OfString extends OfConstant<Utf8Entry, String>\n@@ -110,0 +131,5 @@\n+\n+        @Override\n+        default String resolvedValue() {\n+            return stringValue();\n+        }\n@@ -113,1 +139,2 @@\n-     * Models a constant-valued element\n+     * Models a double-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_DOUBLE}.\n@@ -118,1 +145,1 @@\n-    sealed interface OfDouble extends AnnotationValue.OfConstant\n+    sealed interface OfDouble extends OfConstant<DoubleEntry, Double>\n@@ -122,0 +149,5 @@\n+\n+        @Override\n+        default Double resolvedValue() {\n+            return doubleValue();\n+        }\n@@ -125,1 +157,2 @@\n-     * Models a constant-valued element\n+     * Models a float-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_FLOAT}.\n@@ -130,1 +163,1 @@\n-    sealed interface OfFloat extends AnnotationValue.OfConstant\n+    sealed interface OfFloat extends OfConstant<FloatEntry, Float>\n@@ -134,0 +167,5 @@\n+\n+        @Override\n+        default Float resolvedValue() {\n+            return floatValue();\n+        }\n@@ -137,1 +175,2 @@\n-     * Models a constant-valued element\n+     * Models a long-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_LONG}.\n@@ -142,1 +181,1 @@\n-    sealed interface OfLong extends AnnotationValue.OfConstant\n+    sealed interface OfLong extends OfConstant<LongEntry, Long>\n@@ -146,0 +185,5 @@\n+\n+        @Override\n+        default Long resolvedValue() {\n+            return longValue();\n+        }\n@@ -149,1 +193,2 @@\n-     * Models a constant-valued element\n+     * Models an int-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_INT}.\n@@ -154,1 +199,1 @@\n-    sealed interface OfInteger extends AnnotationValue.OfConstant\n+    sealed interface OfInteger extends OfConstant<IntegerEntry, Integer>\n@@ -158,0 +203,5 @@\n+\n+        @Override\n+        default Integer resolvedValue() {\n+            return intValue();\n+        }\n@@ -161,1 +211,2 @@\n-     * Models a constant-valued element\n+     * Models a short-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_SHORT}.\n@@ -166,1 +217,1 @@\n-    sealed interface OfShort extends AnnotationValue.OfConstant\n+    sealed interface OfShort extends OfConstant<IntegerEntry, Short>\n@@ -170,0 +221,5 @@\n+\n+        @Override\n+        default Short resolvedValue() {\n+            return shortValue();\n+        }\n@@ -173,1 +229,2 @@\n-     * Models a constant-valued element\n+     * Models a char-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_CHAR}.\n@@ -178,1 +235,1 @@\n-    sealed interface OfCharacter extends AnnotationValue.OfConstant\n+    sealed interface OfCharacter extends OfConstant<IntegerEntry, Character>\n@@ -182,0 +239,5 @@\n+\n+        @Override\n+        default Character resolvedValue() {\n+            return charValue();\n+        }\n@@ -185,1 +247,2 @@\n-     * Models a constant-valued element\n+     * Models a byte-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_BYTE}.\n@@ -190,1 +253,1 @@\n-    sealed interface OfByte extends AnnotationValue.OfConstant\n+    sealed interface OfByte extends OfConstant<IntegerEntry, Byte>\n@@ -194,0 +257,5 @@\n+\n+        @Override\n+        default Byte resolvedValue() {\n+            return byteValue();\n+        }\n@@ -197,1 +265,2 @@\n-     * Models a constant-valued element\n+     * Models a boolean-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_BOOLEAN}.\n@@ -202,1 +271,1 @@\n-    sealed interface OfBoolean extends AnnotationValue.OfConstant\n+    sealed interface OfBoolean extends OfConstant<IntegerEntry, Boolean>\n@@ -206,0 +275,5 @@\n+\n+        @Override\n+        default Boolean resolvedValue() {\n+            return booleanValue();\n+        }\n@@ -209,1 +283,2 @@\n-     * Models a class-valued element\n+     * Models a class-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_CLASS}.\n@@ -226,1 +301,2 @@\n-     * Models an enum-valued element\n+     * Models an enum-valued element.\n+     * The tag of this element is {@value ClassFile#AEV_ENUM}.\n@@ -290,1 +366,1 @@\n-    static OfConstant ofString(Utf8Entry value) {\n+    static OfString ofString(Utf8Entry value) {\n@@ -298,1 +374,1 @@\n-    static OfConstant ofString(String value) {\n+    static OfString ofString(String value) {\n@@ -306,1 +382,1 @@\n-    static OfConstant ofDouble(DoubleEntry value) {\n+    static OfDouble ofDouble(DoubleEntry value) {\n@@ -314,1 +390,1 @@\n-    static OfConstant ofDouble(double value) {\n+    static OfDouble ofDouble(double value) {\n@@ -322,1 +398,1 @@\n-    static OfConstant ofFloat(FloatEntry value) {\n+    static OfFloat ofFloat(FloatEntry value) {\n@@ -330,1 +406,1 @@\n-    static OfConstant ofFloat(float value) {\n+    static OfFloat ofFloat(float value) {\n@@ -338,1 +414,1 @@\n-    static OfConstant ofLong(LongEntry value) {\n+    static OfLong ofLong(LongEntry value) {\n@@ -346,1 +422,1 @@\n-    static OfConstant ofLong(long value) {\n+    static OfLong ofLong(long value) {\n@@ -354,1 +430,1 @@\n-    static OfConstant ofInt(IntegerEntry value) {\n+    static OfInteger ofInt(IntegerEntry value) {\n@@ -362,1 +438,1 @@\n-    static OfConstant ofInt(int value) {\n+    static OfInteger ofInt(int value) {\n@@ -370,1 +446,1 @@\n-    static OfConstant ofShort(IntegerEntry value) {\n+    static OfShort ofShort(IntegerEntry value) {\n@@ -378,1 +454,1 @@\n-    static OfConstant ofShort(short value) {\n+    static OfShort ofShort(short value) {\n@@ -386,1 +462,1 @@\n-    static OfConstant ofChar(IntegerEntry value) {\n+    static OfCharacter ofChar(IntegerEntry value) {\n@@ -394,1 +470,1 @@\n-    static OfConstant ofChar(char value) {\n+    static OfCharacter ofChar(char value) {\n@@ -402,1 +478,1 @@\n-    static OfConstant ofByte(IntegerEntry value) {\n+    static OfByte ofByte(IntegerEntry value) {\n@@ -410,1 +486,1 @@\n-    static OfConstant ofByte(byte value) {\n+    static OfByte ofByte(byte value) {\n@@ -418,1 +494,1 @@\n-    static OfConstant ofBoolean(IntegerEntry value) {\n+    static OfBoolean ofBoolean(IntegerEntry value) {\n@@ -426,1 +502,1 @@\n-    static OfConstant ofBoolean(boolean value) {\n+    static OfBoolean ofBoolean(boolean value) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/AnnotationValue.java","additions":135,"deletions":59,"binary":false,"changes":194,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+import java.lang.classfile.AnnotationValue;\n@@ -31,2 +32,4 @@\n- * A constant pool entry that may be used as an annotation constant,\n- * which includes the four kinds of primitive constants, and UTF8 constants.\n+ * A constant pool entry that may be used by annotation constant values,\n+ * which includes the four kinds of primitive constants and UTF8 constants.\n+ * These entries are also the only entries that do not refer to other\n+ * constant pool entries.\n@@ -34,0 +37,7 @@\n+ * @apiNote\n+ * An annotation constant value entry alone is not sufficient to determine\n+ * the annotation constant; for example, an {@link IntegerEntry} of {@code 1}\n+ * can mean {@code true} in {@link AnnotationValue.OfBoolean} or {@code 1}\n+ * in {@link AnnotationValue.OfInteger}.\n+ *\n+ * @see AnnotationValue.OfConstant\n@@ -43,1 +53,2 @@\n-     * {@link Long}, {@link Float}, {@link Double}, or {@link String}.\n+     * {@link Long}, {@link Float}, {@link Double} for the primitive constants,\n+     * or {@link String} for UTF8 constants.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/AnnotationConstantValueEntry.java","additions":15,"deletions":4,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -511,19 +511,0 @@\n-    }\n-\n-    \/**\n-     * {@return An {@link AnnotationConstantValueEntry} describing the provided\n-     * constant}  The constant should be an Integer, String, Long, Float,\n-     * Double, ClassDesc (for a Class constant), or MethodTypeDesc (for a MethodType\n-     * constant.)\n-     *\n-     * @param c the constant\n-     *\/\n-    default AnnotationConstantValueEntry annotationConstantValueEntry(ConstantDesc c) {\n-        if (c instanceof Integer i) return intEntry(i);\n-        if (c instanceof String s) return utf8Entry(s);\n-        if (c instanceof Long l) return longEntry(l);\n-        if (c instanceof Float f) return floatEntry(f);\n-        if (c instanceof Double d) return doubleEntry(d);\n-        if (c instanceof ClassDesc cd) return utf8Entry(cd);\n-        if (c instanceof MethodTypeDesc mtd) return utf8Entry(mtd);\n-        throw new IllegalArgumentException(\"Illegal type: \" + (c == null ? null : c.getClass()));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import java.lang.constant.ConstantDesc;\n+import java.lang.constant.Constable;\n@@ -83,6 +83,2 @@\n-    public sealed interface OfConstantImpl extends AnnotationValue.OfConstant, Util.Writable\n-            permits AnnotationImpl.OfStringImpl, AnnotationImpl.OfDoubleImpl,\n-                    AnnotationImpl.OfFloatImpl, AnnotationImpl.OfLongImpl,\n-                    AnnotationImpl.OfIntegerImpl, AnnotationImpl.OfShortImpl,\n-                    AnnotationImpl.OfCharacterImpl, AnnotationImpl.OfByteImpl,\n-                    AnnotationImpl.OfBooleanImpl {\n+    public sealed interface OfConstantImpl<C extends AnnotationConstantValueEntry, T extends Constable & Comparable<T>>\n+            extends AnnotationValue.OfConstant<C, T>, Util.Writable {\n@@ -93,6 +89,1 @@\n-            buf.writeIndex(constant());\n-        }\n-\n-        @Override\n-        default ConstantDesc constantValue() {\n-            return constant().constantValue();\n+            buf.writeIndex(poolEntry());\n@@ -103,2 +94,2 @@\n-    public record OfStringImpl(Utf8Entry constant)\n-            implements AnnotationImpl.OfConstantImpl, AnnotationValue.OfString {\n+    public record OfStringImpl(Utf8Entry poolEntry)\n+            implements OfConstantImpl<Utf8Entry, String>, AnnotationValue.OfString {\n@@ -113,1 +104,1 @@\n-            return constant().stringValue();\n+            return poolEntry().stringValue();\n@@ -117,2 +108,2 @@\n-    public record OfDoubleImpl(DoubleEntry constant)\n-            implements AnnotationImpl.OfConstantImpl, AnnotationValue.OfDouble {\n+    public record OfDoubleImpl(DoubleEntry poolEntry)\n+            implements OfConstantImpl<DoubleEntry, Double>, AnnotationValue.OfDouble {\n@@ -127,1 +118,1 @@\n-            return constant().doubleValue();\n+            return poolEntry().doubleValue();\n@@ -131,2 +122,2 @@\n-    public record OfFloatImpl(FloatEntry constant)\n-            implements AnnotationImpl.OfConstantImpl, AnnotationValue.OfFloat {\n+    public record OfFloatImpl(FloatEntry poolEntry)\n+            implements OfConstantImpl<FloatEntry, Float>, AnnotationValue.OfFloat {\n@@ -141,1 +132,1 @@\n-            return constant().floatValue();\n+            return poolEntry().floatValue();\n@@ -145,2 +136,2 @@\n-    public record OfLongImpl(LongEntry constant)\n-            implements AnnotationImpl.OfConstantImpl, AnnotationValue.OfLong {\n+    public record OfLongImpl(LongEntry poolEntry)\n+            implements OfConstantImpl<LongEntry, Long>, AnnotationValue.OfLong {\n@@ -155,1 +146,1 @@\n-            return constant().longValue();\n+            return poolEntry().longValue();\n@@ -159,2 +150,2 @@\n-    public record OfIntegerImpl(IntegerEntry constant)\n-            implements AnnotationImpl.OfConstantImpl, AnnotationValue.OfInteger {\n+    public record OfIntegerImpl(IntegerEntry poolEntry)\n+            implements OfConstantImpl<IntegerEntry, Integer>, AnnotationValue.OfInteger {\n@@ -169,1 +160,1 @@\n-            return constant().intValue();\n+            return poolEntry().intValue();\n@@ -173,2 +164,2 @@\n-    public record OfShortImpl(IntegerEntry constant)\n-            implements AnnotationImpl.OfConstantImpl, AnnotationValue.OfShort {\n+    public record OfShortImpl(IntegerEntry poolEntry)\n+            implements OfConstantImpl<IntegerEntry, Short>, AnnotationValue.OfShort {\n@@ -183,1 +174,1 @@\n-            return (short)constant().intValue();\n+            return (short) poolEntry().intValue();\n@@ -187,2 +178,2 @@\n-    public record OfCharacterImpl(IntegerEntry constant)\n-            implements AnnotationImpl.OfConstantImpl, AnnotationValue.OfCharacter {\n+    public record OfCharacterImpl(IntegerEntry poolEntry)\n+            implements OfConstantImpl<IntegerEntry, Character>, AnnotationValue.OfCharacter {\n@@ -197,1 +188,1 @@\n-            return (char)constant().intValue();\n+            return (char) poolEntry().intValue();\n@@ -201,2 +192,2 @@\n-    public record OfByteImpl(IntegerEntry constant)\n-            implements AnnotationImpl.OfConstantImpl, AnnotationValue.OfByte {\n+    public record OfByteImpl(IntegerEntry poolEntry)\n+            implements OfConstantImpl<IntegerEntry, Byte>, AnnotationValue.OfByte {\n@@ -211,1 +202,1 @@\n-            return (byte)constant().intValue();\n+            return (byte) poolEntry().intValue();\n@@ -215,2 +206,2 @@\n-    public record OfBooleanImpl(IntegerEntry constant)\n-            implements AnnotationImpl.OfConstantImpl, AnnotationValue.OfBoolean {\n+    public record OfBooleanImpl(IntegerEntry poolEntry)\n+            implements OfConstantImpl<IntegerEntry, Boolean>, AnnotationValue.OfBoolean {\n@@ -225,1 +216,1 @@\n-            return constant().intValue() == 1;\n+            return poolEntry().intValue() == 1;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AnnotationImpl.java","additions":31,"deletions":40,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -510,9 +510,9 @@\n-            case OfString cv -> leafs(\"string\", String.valueOf(cv.constantValue()));\n-            case OfDouble cv -> leafs(\"double\", String.valueOf(cv.constantValue()));\n-            case OfFloat cv -> leafs(\"float\", String.valueOf(cv.constantValue()));\n-            case OfLong cv -> leafs(\"long\", String.valueOf(cv.constantValue()));\n-            case OfInteger cv -> leafs(\"int\", String.valueOf(cv.constantValue()));\n-            case OfShort cv -> leafs(\"short\", String.valueOf(cv.constantValue()));\n-            case OfCharacter cv -> leafs(\"char\", String.valueOf(cv.constantValue()));\n-            case OfByte cv -> leafs(\"byte\", String.valueOf(cv.constantValue()));\n-            case OfBoolean cv -> leafs(\"boolean\", String.valueOf((int)cv.constantValue() != 0));\n+            case OfString cv -> leafs(\"string\", String.valueOf(cv.stringValue()));\n+            case OfDouble cv -> leafs(\"double\", String.valueOf(cv.doubleValue()));\n+            case OfFloat cv -> leafs(\"float\", String.valueOf(cv.floatValue()));\n+            case OfLong cv -> leafs(\"long\", String.valueOf(cv.longValue()));\n+            case OfInteger cv -> leafs(\"int\", String.valueOf(cv.intValue()));\n+            case OfShort cv -> leafs(\"short\", String.valueOf(cv.shortValue()));\n+            case OfCharacter cv -> leafs(\"char\", String.valueOf(cv.charValue()));\n+            case OfByte cv -> leafs(\"byte\", String.valueOf(cv.byteValue()));\n+            case OfBoolean cv -> leafs(\"boolean\", String.valueOf(cv.booleanValue()));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassPrinterImpl.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -394,1 +394,1 @@\n-            case AnnotationValue.OfConstant oc -> oc;\n+            case AnnotationValue.OfConstant<?, ?> oc -> oc;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -420,1 +420,1 @@\n-            case AnnotationValue.OfConstant _, AnnotationValue.OfClass _ -> 2;\n+            case AnnotationValue.OfConstant<?, ?> _, AnnotationValue.OfClass _ -> 2;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/verifier\/ParserVerifier.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -229,1 +229,1 @@\n-            case AnnotationValue.OfConstant ev -> {\n+            case AnnotationValue.OfConstant<?, ?> ev -> {\n@@ -231,1 +231,1 @@\n-                    var entry = ev.constant();\n+                    var entry = ev.poolEntry();\n@@ -265,1 +265,1 @@\n-                    print(ev.tag() + \"#\" + ev.constant().index());\n+                    print(ev.tag() + \"#\" + ev.poolEntry().index());\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/AnnotationWriter.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+\n+import java.lang.constant.ConstantDesc;\n@@ -42,0 +44,2 @@\n+import java.util.stream.Stream;\n+\n@@ -56,1 +60,2 @@\n-    private static Map<String, Object> constants\n+    \/\/ name -> (value, poolValue)\n+    private static final Map<String, Map.Entry<Object, ConstantDesc>> constants\n@@ -58,12 +63,9 @@\n-            new AbstractMap.SimpleImmutableEntry<>(\"i\", 1),\n-            new AbstractMap.SimpleImmutableEntry<>(\"j\", 1L),\n-            new AbstractMap.SimpleImmutableEntry<>(\"s\", 1),\n-            new AbstractMap.SimpleImmutableEntry<>(\"b\", 1),\n-            new AbstractMap.SimpleImmutableEntry<>(\"f\", 1.0f),\n-            new AbstractMap.SimpleImmutableEntry<>(\"d\", 1.0d),\n-            new AbstractMap.SimpleImmutableEntry<>(\"z\", 1),\n-            new AbstractMap.SimpleImmutableEntry<>(\"c\", (int) '1'),\n-            new AbstractMap.SimpleImmutableEntry<>(\"st\", \"1\"),\n-            new AbstractMap.SimpleImmutableEntry<>(\"cl\", ClassDesc.of(\"foo.Bar\")),\n-            new AbstractMap.SimpleImmutableEntry<>(\"en\", E.C),\n-            new AbstractMap.SimpleImmutableEntry<>(\"arr\", new Object[] {1, \"1\", 1.0f})\n+            Map.entry(\"i\", Map.entry(1, 1)),\n+            Map.entry(\"j\", Map.entry(1L, 1L)),\n+            Map.entry(\"s\", Map.entry((short) 1, 1)),\n+            Map.entry(\"b\", Map.entry((byte) 1, 1)),\n+            Map.entry(\"f\", Map.entry(1.0f, 1.0f)),\n+            Map.entry(\"d\", Map.entry(1.0d, 1.0d)),\n+            Map.entry(\"z\", Map.entry(true, 1)),\n+            Map.entry(\"c\", Map.entry('1', (int) '1')),\n+            Map.entry(\"st\", Map.entry(\"1\", \"1\"))\n@@ -72,1 +74,1 @@\n-    private static final List<AnnotationElement> constantElements =\n+    private static final List<AnnotationElement> constantElements = Stream.concat(\n@@ -74,2 +76,8 @@\n-                    .map(e -> AnnotationElement.of(e.getKey(), AnnotationValue.of(e.getValue())))\n-                    .toList();\n+                    .map(e -> Map.entry(e.getKey(), e.getValue().getKey())),\n+            Stream.of(\n+                    Map.entry(\"cl\", ClassDesc.of(\"foo.Bar\")),\n+                    Map.entry(\"en\", E.C),\n+                    Map.entry(\"arr\", new Object[] {1, \"1\", 1.0f})\n+            ))\n+            .map(e -> AnnotationElement.of(e.getKey(), AnnotationValue.of(e.getValue())))\n+            .toList();\n@@ -91,3 +99,6 @@\n-                    assertTrue (evp.value() instanceof AnnotationValue.OfConstant c);\n-                    assertEquals(((AnnotationValue.OfConstant) evp.value()).constantValue(),\n-                                 constants.get(evp.name().stringValue()));\n+                    if (!(evp.value() instanceof AnnotationValue.OfConstant<?, ?> c))\n+                        return fail();\n+                    assertEquals(c.resolvedValue(),\n+                                 constants.get(evp.name().stringValue()).getKey());\n+                    assertEquals(c.poolEntry().constantValue(),\n+                                 constants.get(evp.name().stringValue()).getValue());\n@@ -108,3 +119,4 @@\n-                    assertTrue (evp.value() instanceof AnnotationValue.OfArray);\n-                    List<AnnotationValue> values = ((AnnotationValue.OfArray) evp.value()).values();\n-                    assertEquals(values.stream().map(v -> ((AnnotationValue.OfConstant) v).constant().constantValue()).collect(toSet()),\n+                    if (!(evp.value() instanceof AnnotationValue.OfArray arr))\n+                        return fail();\n+                    List<AnnotationValue> values = arr.values();\n+                    assertEquals(values.stream().map(v -> ((AnnotationValue.OfConstant<?, ?>) v).poolEntry().constantValue()).collect(toSet()),\n","filename":"test\/jdk\/jdk\/classfile\/AnnotationTest.java","additions":34,"deletions":22,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8335927\n@@ -252,1 +253,1 @@\n-                        annotation default: {array: [{boolean: true}, {byte: 12}, {char: 99}, {class: LPhee;}, {double: 1.3}, {enum class: LBoo;, constant name: BOO}, {float: 3.7}, {int: 33}, {long: 3333}, {short: 25}, {string: BOO}, {annotation class: LPhoo;}]}\n+                        annotation default: {array: [{boolean: true}, {byte: 12}, {char: c}, {class: LPhee;}, {double: 1.3}, {enum class: LBoo;, constant name: BOO}, {float: 3.7}, {int: 33}, {long: 3333}, {short: 25}, {string: BOO}, {annotation class: LPhoo;}]}\n@@ -503,1 +504,1 @@\n-                            \"annotation default\": {\"array\": [{\"boolean\": \"true\"}, {\"byte\": \"12\"}, {\"char\": \"99\"}, {\"class\": \"LPhee;\"}, {\"double\": \"1.3\"}, {\"enum class\": \"LBoo;\", \"constant name\": \"BOO\"}, {\"float\": \"3.7\"}, {\"int\": \"33\"}, {\"long\": \"3333\"}, {\"short\": \"25\"}, {\"string\": \"BOO\"}, {\"annotation class\": \"LPhoo;\"}]},\n+                            \"annotation default\": {\"array\": [{\"boolean\": \"true\"}, {\"byte\": \"12\"}, {\"char\": \"c\"}, {\"class\": \"LPhee;\"}, {\"double\": \"1.3\"}, {\"enum class\": \"LBoo;\", \"constant name\": \"BOO\"}, {\"float\": \"3.7\"}, {\"int\": \"33\"}, {\"long\": \"3333\"}, {\"short\": \"25\"}, {\"string\": \"BOO\"}, {\"annotation class\": \"LPhoo;\"}]},\n@@ -759,1 +760,1 @@\n-                            <annotation_default><array><value><boolean>true<\/boolean><\/value><value><byte>12<\/byte><\/value><value><char>99<\/char><\/value><value><class>LPhee;<\/class><\/value><value><double>1.3<\/double><\/value><value><enum_class>LBoo;<\/enum_class><constant_name>BOO<\/constant_name><\/value><value><float>3.7<\/float><\/value><value><int>33<\/int><\/value><value><long>3333<\/long><\/value><value><short>25<\/short><\/value><value><string>BOO<\/string><\/value><value><annotation_class>LPhoo;<\/annotation_class><\/value><\/array><\/annotation_default>\n+                            <annotation_default><array><value><boolean>true<\/boolean><\/value><value><byte>12<\/byte><\/value><value><char>c<\/char><\/value><value><class>LPhee;<\/class><\/value><value><double>1.3<\/double><\/value><value><enum_class>LBoo;<\/enum_class><constant_name>BOO<\/constant_name><\/value><value><float>3.7<\/float><\/value><value><int>33<\/int><\/value><value><long>3333<\/long><\/value><value><short>25<\/short><\/value><value><string>BOO<\/string><\/value><value><annotation_class>LPhoo;<\/annotation_class><\/value><\/array><\/annotation_default>\n@@ -910,1 +911,1 @@\n-        assertArrayEquals(out.toString().trim().split(\" *\\r?\\n\"), expected.trim().split(\"\\n\"));\n+        assertArrayEquals(expected.trim().split(\"\\n\"), out.toString().trim().split(\" *\\r?\\n\"));\n","filename":"test\/jdk\/jdk\/classfile\/ClassPrinterTest.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1061,1 +1061,1 @@\n-                case AnnotationValue.OfConstant evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.constant()));\n+                case AnnotationValue.OfConstant<?, ?> evc -> new EvConstRecord(ev.tag(), ConstantPoolEntryRecord.ofCPEntry(evc.poolEntry()));\n","filename":"test\/jdk\/jdk\/classfile\/helpers\/ClassRecord.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}