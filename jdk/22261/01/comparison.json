{"files":[{"patch":"@@ -64,1 +64,1 @@\n-public final class AppImageFile {\n+final class AppImageFile {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AppImageFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-public class IOUtils {\n+final class IOUtils {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/IOUtils.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-public final class PackageFile {\n+final class PackageFile {\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/PackageFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import jdk.jpackage.internal.IOUtils;\n@@ -34,2 +33,2 @@\n-        String filename = replaceSuffix(IOUtils.getFileName(path), null).toString();\n-        return IOUtils.getFileName(path).toString().substring(filename.length());\n+        String filename = replaceSuffix(path.getFileName(), null).toString();\n+        return path.getFileName().toString().substring(filename.length());\n@@ -40,1 +39,1 @@\n-        String filename = IOUtils.getFileName(path).toString() + suffix;\n+        String filename = path.getFileName().toString() + suffix;\n@@ -46,1 +45,1 @@\n-        String filename = IOUtils.getFileName(path).toString().replaceAll(\"\\\\.[^.]*$\",\n+        String filename = path.getFileName().toString().replaceAll(\"\\\\.[^.]*$\",\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/PathUtils.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-import jdk.jpackage.internal.IOUtils;\n@@ -50,1 +49,1 @@\n-        Files.createDirectories(IOUtils.getParent(dstFile));\n+        Files.createDirectories(dstFile.getParent());\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/util\/XmlUtils.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Map;\n+import java.util.Optional;\n+import javax.xml.xpath.XPath;\n+import javax.xml.xpath.XPathFactory;\n+import jdk.internal.util.OperatingSystem;\n+import jdk.jpackage.internal.util.XmlUtils;\n+import static jdk.jpackage.internal.util.function.ThrowingSupplier.toSupplier;\n+import org.w3c.dom.Document;\n+\n+public record AppImageFile(String mainLauncherName, String mainLauncherClassName,\n+        String version, boolean macSigned, boolean macAppStore) {\n+\n+    public static Path getPathInAppImage(Path appImageDir) {\n+        return ApplicationLayout.platformAppImage()\n+                .resolveAt(appImageDir)\n+                .appDirectory()\n+                .resolve(FILENAME);\n+    }\n+\n+    public AppImageFile(String mainLauncherName, String mainLauncherClassName) {\n+        this(mainLauncherName, mainLauncherClassName, \"1.0\", false, false);\n+    }\n+\n+    public void save(Path appImageDir) throws IOException {\n+        XmlUtils.createXml(getPathInAppImage(appImageDir), xml -> {\n+            xml.writeStartElement(\"jpackage-state\");\n+            xml.writeAttribute(\"version\", getVersion());\n+            xml.writeAttribute(\"platform\", getPlatform());\n+\n+            xml.writeStartElement(\"app-version\");\n+            xml.writeCharacters(version);\n+            xml.writeEndElement();\n+\n+            xml.writeStartElement(\"main-launcher\");\n+            xml.writeCharacters(mainLauncherName);\n+            xml.writeEndElement();\n+\n+            xml.writeStartElement(\"main-class\");\n+            xml.writeCharacters(mainLauncherClassName);\n+            xml.writeEndElement();\n+\n+            xml.writeStartElement(\"signed\");\n+            xml.writeCharacters(Boolean.toString(macSigned));\n+            xml.writeEndElement();\n+\n+            xml.writeStartElement(\"app-store\");\n+            xml.writeCharacters(Boolean.toString(macAppStore));\n+            xml.writeEndElement();\n+        });\n+    }\n+\n+    public static AppImageFile load(Path appImageDir) {\n+        return toSupplier(() -> {\n+            Document doc = XmlUtils.initDocumentBuilder().parse(\n+                    Files.newInputStream(getPathInAppImage(appImageDir)));\n+\n+            XPath xPath = XPathFactory.newInstance().newXPath();\n+\n+            var version = xPath.evaluate(\"\/jpackage-state\/app-version\/text()\", doc);\n+\n+            var mainLauncherName = xPath.evaluate(\n+                    \"\/jpackage-state\/main-launcher\/text()\", doc);\n+\n+            var mainLauncherClassName = xPath.evaluate(\n+                    \"\/jpackage-state\/main-class\/text()\", doc);\n+\n+            var macSigned = Optional.ofNullable(xPath.evaluate(\n+                    \"\/jpackage-state\/signed\/text()\", doc)).map(\n+                            Boolean::parseBoolean).orElse(false);\n+\n+            var macAppStore = Optional.ofNullable(xPath.evaluate(\n+                    \"\/jpackage-state\/app-store\/text()\", doc)).map(\n+                            Boolean::parseBoolean).orElse(false);\n+\n+            return new AppImageFile(mainLauncherName, mainLauncherClassName,\n+                    version, macSigned, macAppStore);\n+\n+        }).get();\n+    }\n+\n+    private static String getVersion() {\n+        return System.getProperty(\"java.version\");\n+    }\n+\n+    private static String getPlatform() {\n+        return PLATFORM_LABELS.get(OperatingSystem.current());\n+    }\n+\n+    private static final String FILENAME = \".jpackage.xml\";\n+\n+    private static final Map<OperatingSystem, String> PLATFORM_LABELS = Map.of(\n+            OperatingSystem.LINUX, \"linux\",\n+            OperatingSystem.WINDOWS, \"windows\",\n+            OperatingSystem.MACOS, \"macOS\");\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/AppImageFile.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,126 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import java.nio.file.Path;\n+import java.util.Optional;\n+\n+public record ApplicationLayout(Path launchersDirectory, Path appDirectory,\n+        Path runtimeDirectory, Path runtimeHomeDirectory, Path appModsDirectory,\n+        Path destktopIntegrationDirectory, Path contentDirectory) {\n+\n+    public ApplicationLayout resolveAt(Path root) {\n+        return new ApplicationLayout(\n+                resolve(root, launchersDirectory),\n+                resolve(root, appDirectory),\n+                resolve(root, runtimeDirectory),\n+                resolve(root, runtimeHomeDirectory),\n+                resolve(root, appModsDirectory),\n+                resolve(root, destktopIntegrationDirectory),\n+                resolve(root, contentDirectory));\n+    }\n+\n+    public static ApplicationLayout linuxAppImage() {\n+        return new ApplicationLayout(\n+                Path.of(\"bin\"),\n+                Path.of(\"lib\/app\"),\n+                Path.of(\"lib\/runtime\"),\n+                Path.of(\"lib\/runtime\"),\n+                Path.of(\"lib\/app\/mods\"),\n+                Path.of(\"lib\"),\n+                Path.of(\"lib\")\n+        );\n+    }\n+\n+    public static ApplicationLayout windowsAppImage() {\n+        return new ApplicationLayout(\n+                Path.of(\"\"),\n+                Path.of(\"app\"),\n+                Path.of(\"runtime\"),\n+                Path.of(\"runtime\"),\n+                Path.of(\"app\/mods\"),\n+                Path.of(\"\"),\n+                Path.of(\"\")\n+        );\n+    }\n+\n+    public static ApplicationLayout macAppImage() {\n+        return new ApplicationLayout(\n+                Path.of(\"Contents\/MacOS\"),\n+                Path.of(\"Contents\/app\"),\n+                Path.of(\"Contents\/runtime\"),\n+                Path.of(\"Contents\/runtime\/Contents\/Home\"),\n+                Path.of(\"Contents\/app\/mods\"),\n+                Path.of(\"Contents\/Resources\"),\n+                Path.of(\"Contents\")\n+        );\n+    }\n+\n+    public static ApplicationLayout platformAppImage() {\n+        if (TKit.isWindows()) {\n+            return windowsAppImage();\n+        }\n+\n+        if (TKit.isLinux()) {\n+            return linuxAppImage();\n+        }\n+\n+        if (TKit.isOSX()) {\n+            return macAppImage();\n+        }\n+\n+        throw new IllegalArgumentException(\"Unknown platform\");\n+    }\n+\n+    public static ApplicationLayout javaRuntime() {\n+        return new ApplicationLayout(\n+                null,\n+                null,\n+                Path.of(\"\"),\n+                null,\n+                null,\n+                null,\n+                null\n+        );\n+    }\n+\n+    public static ApplicationLayout linuxUsrTreePackageImage(Path prefix,\n+            String packageName) {\n+        final Path lib = prefix.resolve(Path.of(\"lib\", packageName));\n+        return new ApplicationLayout(\n+                prefix.resolve(\"bin\"),\n+                lib.resolve(\"app\"),\n+                lib.resolve(\"runtime\"),\n+                lib.resolve(\"runtime\"),\n+                lib.resolve(\"app\/mods\"),\n+                lib,\n+                lib\n+        );\n+    }\n+\n+    private static Path resolve(Path base, Path path) {\n+        return Optional.ofNullable(path).map(base::resolve).orElse(null);\n+    }\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/ApplicationLayout.java","additions":126,"deletions":0,"binary":false,"changes":126,"status":"added"},{"patch":"@@ -25,1 +25,0 @@\n-import java.lang.reflect.InvocationTargetException;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/Functional.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -48,4 +48,0 @@\n-import jdk.jpackage.internal.AppImageFile;\n-import jdk.jpackage.internal.ApplicationLayout;\n-import jdk.jpackage.internal.PackageFile;\n-import jdk.jpackage.internal.util.XmlUtils;\n@@ -160,2 +156,4 @@\n-        return getArgumentValue(argName, (unused) -> defaultValueSupplier.get(),\n-                stringConverter);\n+        return getArgumentValue(argName,\n+                Optional.ofNullable(defaultValueSupplier).map(supplier -> {\n+                    return (Function<JPackageCommand, T>)unused -> supplier.get();\n+                }).orElse(null), stringConverter);\n@@ -220,1 +218,1 @@\n-        String appImage = getArgumentValue(\"--app-image\", () -> null);\n+        String appImage = getArgumentValue(\"--app-image\");\n@@ -222,1 +220,1 @@\n-            String name =  AppImageFile.extractAppName(Path.of(appImage));\n+            String name = AppImageFile.load(Path.of(appImage)).mainLauncherName();\n@@ -236,1 +234,1 @@\n-                installerName = AppImageFile.extractAppName(Path.of(appImage));\n+                installerName = AppImageFile.load(Path.of(appImage)).mainLauncherName();\n@@ -309,36 +307,0 @@\n-    public void createJPackageXMLFile(String mainLauncher, String mainClass)\n-            throws IOException {\n-        Path jpackageXMLFile = AppImageFile.getPathInAppImage(\n-                Optional.ofNullable(getArgumentValue(\"--app-image\")).map(\n-                        Path::of).orElseThrow(() -> {\n-                            return new RuntimeException(\n-                                    \"Error: --app-image expected\");\n-                        }));\n-\n-        XmlUtils.createXml(jpackageXMLFile, xml -> {\n-                xml.writeStartElement(\"jpackage-state\");\n-                xml.writeAttribute(\"version\", AppImageFile.getVersion());\n-                xml.writeAttribute(\"platform\", AppImageFile.getPlatform());\n-\n-                xml.writeStartElement(\"app-version\");\n-                xml.writeCharacters(\"1.0\");\n-                xml.writeEndElement();\n-\n-                xml.writeStartElement(\"main-launcher\");\n-                xml.writeCharacters(mainLauncher);\n-                xml.writeEndElement();\n-\n-                xml.writeStartElement(\"main-class\");\n-                xml.writeCharacters(mainClass);\n-                xml.writeEndElement();\n-\n-                xml.writeStartElement(\"signed\");\n-                xml.writeCharacters(\"false\");\n-                xml.writeEndElement();\n-\n-                xml.writeStartElement(\"app-store\");\n-                xml.writeCharacters(\"false\");\n-                xml.writeEndElement();\n-            });\n-    }\n-\n@@ -938,1 +900,1 @@\n-            appImageDir = Path.of(getArgumentValue(\"--app-image\", () -> null));\n+            appImageDir = Path.of(getArgumentValue(\"--app-image\"));\n@@ -959,1 +921,1 @@\n-                boolean actualValue = aif.isSigned();\n+                boolean actualValue = aif.macSigned();\n@@ -964,1 +926,1 @@\n-                actualValue = aif.isAppStore();\n+                actualValue = aif.macAppStore();\n@@ -978,3 +940,2 @@\n-                String appImage = getArgumentValue(\"--app-image\",\n-                        () -> null);\n-                if (AppImageFile.load(Path.of(appImage)).isSigned()) {\n+                String appImage = getArgumentValue(\"--app-image\");\n+                if (AppImageFile.load(Path.of(appImage)).macSigned()) {\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":12,"deletions":51,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import jdk.jpackage.internal.ApplicationLayout;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/LinuxHelper.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,37 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.jpackage.test;\n+\n+import java.nio.file.Path;\n+\n+public final class PackageFile {\n+\n+    public static Path getPathInAppImage(Path appImageDir) {\n+        return ApplicationLayout.platformAppImage()\n+                .resolveAt(appImageDir)\n+                .appDirectory()\n+                .resolve(FILENAME);\n+    }\n+\n+    private static final String FILENAME = \".package\";\n+}\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageFile.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"added"},{"patch":"@@ -48,1 +48,0 @@\n-import jdk.jpackage.internal.ApplicationLayout;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.jpackage.internal.ApplicationLayout;\n+import jdk.jpackage.test.ApplicationLayout;\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageFromTwoStepAppImageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.jpackage.internal.ApplicationLayout;\n+import jdk.jpackage.test.ApplicationLayout;\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -25,1 +25,1 @@\n-import jdk.jpackage.internal.ApplicationLayout;\n+import jdk.jpackage.test.ApplicationLayout;\n","filename":"test\/jdk\/tools\/jpackage\/macosx\/SigningPackageTwoStepTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import jdk.jpackage.internal.AppImageFile;\n+import jdk.jpackage.test.AppImageFile;\n@@ -90,1 +90,1 @@\n-            cmd.createJPackageXMLFile(\"EmptyAppImagePackageTest\", \"Hello\");\n+            new AppImageFile(\"EmptyAppImagePackageTest\", \"Hello\").save(appImageDir);\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppImagePackageTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import javax.xml.xpath.XPathConstants;\n@@ -31,2 +30,1 @@\n-import javax.xml.xpath.XPathFactory;\n-import jdk.jpackage.internal.AppImageFile;\n+import jdk.jpackage.test.AppImageFile;\n@@ -38,2 +36,0 @@\n-import jdk.jpackage.internal.AppImageFile;\n-import org.w3c.dom.Document;\n@@ -119,4 +115,1 @@\n-        Document xml = AppImageFile.readXml(cmd.outputBundle());\n-        String actualVersion = XPathFactory.newInstance().newXPath().evaluate(\n-                \"\/jpackage-state\/app-version\/text()\", xml, XPathConstants.STRING).toString();\n-\n+        String actualVersion = AppImageFile.load(cmd.outputBundle()).version();\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppVersionTest.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -34,3 +34,3 @@\n-import jdk.jpackage.internal.AppImageFile;\n-import jdk.jpackage.internal.ApplicationLayout;\n-import jdk.jpackage.internal.PackageFile;\n+import jdk.jpackage.test.AppImageFile;\n+import jdk.jpackage.test.ApplicationLayout;\n+import jdk.jpackage.test.PackageFile;\n","filename":"test\/jdk\/tools\/jpackage\/share\/InOutPathTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,3 +32,1 @@\n-import javax.xml.xpath.XPathConstants;\n-import javax.xml.xpath.XPathFactory;\n-import jdk.jpackage.internal.AppImageFile;\n+import jdk.jpackage.test.AppImageFile;\n@@ -38,1 +36,0 @@\n-import jdk.jpackage.test.Annotations.Parameter;\n@@ -45,1 +42,0 @@\n-import org.w3c.dom.Document;\n@@ -108,5 +104,1 @@\n-            Document xml = AppImageFile.readXml(cmd.outputBundle());\n-            String actualVersion = XPathFactory.newInstance().newXPath().evaluate(\n-                    \"\/jpackage-state\/app-version\/text()\", xml,\n-                    XPathConstants.STRING).toString();\n-\n+            String actualVersion = AppImageFile.load(cmd.outputBundle()).version();\n","filename":"test\/jdk\/tools\/jpackage\/share\/ModulePathTest3.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+import jdk.jpackage.test.AppImageFile;\n@@ -114,1 +115,1 @@\n-        cmd.createJPackageXMLFile(\"PredefinedAppImageErrorTest\", \"Hello\");\n+        new AppImageFile(\"PredefinedAppImageErrorTest\", \"Hello\").save(dummyAppFolder);\n","filename":"test\/jdk\/tools\/jpackage\/share\/PredefinedAppImageErrorTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n-import jdk.jpackage.internal.ApplicationLayout;\n+import jdk.jpackage.test.ApplicationLayout;\n","filename":"test\/jdk\/tools\/jpackage\/share\/RuntimeImageSymbolicLinksTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}