{"files":[{"patch":"@@ -364,4 +364,0 @@\n-  \/\/ Prepare regions and collection set. This may ask for the size of humongous\n-  \/\/ objects so it must happen before classes unloaded.\n-  _generation->prepare_regions_and_collection_set(false \/*concurrent*\/);\n-\n@@ -371,0 +367,3 @@\n+  \/\/ Prepare regions and collection set\n+  _generation->prepare_regions_and_collection_set(false \/*concurrent*\/);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -70,31 +70,0 @@\n-\n-class ShenandoahTrashImmediateGarbageClosure: public ShenandoahHeapRegionClosure {\n-private:\n-  ShenandoahHeap* const _heap;\n-  ShenandoahMarkingContext* const _ctx;\n-\n-public:\n-  ShenandoahTrashImmediateGarbageClosure() :\n-    _heap(ShenandoahHeap::heap()),\n-    _ctx(ShenandoahHeap::heap()->global_generation()->complete_marking_context()) {}\n-\n-  void heap_region_do(ShenandoahHeapRegion* r) override {\n-    if (r->is_humongous_start()) {\n-      oop humongous_obj = cast_to_oop(r->bottom());\n-      if (!_ctx->is_marked(humongous_obj)) {\n-        assert(!r->has_live(), \"Region %zu is not marked, should not have live\", r->index());\n-        _heap->trash_humongous_region_at(r);\n-      } else {\n-        assert(r->has_live(), \"Region %zu should have live\", r->index());\n-      }\n-    } else if (r->is_humongous_continuation()) {\n-      \/\/ If we hit continuation, the non-live humongous starts should have been trashed already\n-      assert(r->humongous_start_region()->has_live(), \"Region %zu should have live\", r->index());\n-    } else if (r->is_regular()) {\n-      if (!r->has_live()) {\n-        r->make_trash_immediate();\n-      }\n-    }\n-  }\n-};\n-\n@@ -341,7 +310,0 @@\n-\n-  \/\/ Marking is finished. Reclaim immediate garbage before unloading any classes.\n-  ShenandoahTrashImmediateGarbageClosure trash_immediate_garbage;\n-  ShenandoahExcludeRegionClosure<FREE> cl(&trash_immediate_garbage);\n-  heap->heap_region_iterate(&cl);\n-\n-  \/\/ Weak refs, roots and class unloading\n@@ -591,0 +553,30 @@\n+class ShenandoahTrashImmediateGarbageClosure: public ShenandoahHeapRegionClosure {\n+private:\n+  ShenandoahHeap* const _heap;\n+  ShenandoahMarkingContext* const _ctx;\n+\n+public:\n+  ShenandoahTrashImmediateGarbageClosure() :\n+    _heap(ShenandoahHeap::heap()),\n+    _ctx(ShenandoahHeap::heap()->global_generation()->complete_marking_context()) {}\n+\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n+    if (r->is_humongous_start()) {\n+      oop humongous_obj = cast_to_oop(r->bottom());\n+      if (!_ctx->is_marked(humongous_obj)) {\n+        assert(!r->has_live(), \"Region %zu is not marked, should not have live\", r->index());\n+        _heap->trash_humongous_region_at(r);\n+      } else {\n+        assert(r->has_live(), \"Region %zu should have live\", r->index());\n+      }\n+    } else if (r->is_humongous_continuation()) {\n+      \/\/ If we hit continuation, the non-live humongous starts should have been trashed already\n+      assert(r->humongous_start_region()->has_live(), \"Region %zu should have live\", r->index());\n+    } else if (r->is_regular()) {\n+      if (!r->has_live()) {\n+        r->make_trash_immediate();\n+      }\n+    }\n+  }\n+};\n+\n@@ -744,0 +736,5 @@\n+    \/\/ Trash the immediately collectible regions before computing addresses\n+    ShenandoahTrashImmediateGarbageClosure trash_immediate_garbage;\n+    ShenandoahExcludeRegionClosure<FREE> cl(&trash_immediate_garbage);\n+    heap->heap_region_iterate(&cl);\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":35,"deletions":38,"binary":false,"changes":73,"status":"modified"},{"patch":"@@ -1457,6 +1457,0 @@\n-\n-  oop humongous_obj = cast_to_oop(start->bottom());\n-  size_t size = humongous_obj->size();\n-  size_t required_regions = ShenandoahHeapRegion::required_regions(size * HeapWordSize);\n-  size_t index = start->index() + required_regions - 1;\n-\n@@ -1465,5 +1459,5 @@\n-  for(size_t i = 0; i < required_regions; i++) {\n-    \/\/ Reclaim from tail. Otherwise, assertion fails when printing region to trace log,\n-    \/\/ as it expects that every region belongs to a humongous region starting with a humongous start region.\n-    ShenandoahHeapRegion* region = get_region(index --);\n-\n+  \/\/ Do not try to get the size of this humongous object. STW collections will\n+  \/\/ have already unloaded classes, so the object may have a bad klass pointer.\n+  int regions_trashed = 0;\n+  ShenandoahHeapRegion* region = start;\n+  do {\n@@ -1472,1 +1466,0 @@\n-\n@@ -1474,2 +1467,4 @@\n-  }\n-  return required_regions;\n+    regions_trashed++;\n+    region = get_region(region->index() + 1);\n+  } while (region != nullptr && region->is_humongous_continuation());\n+  return regions_trashed;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"}]}