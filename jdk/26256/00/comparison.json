{"files":[{"patch":"@@ -364,0 +364,4 @@\n+  \/\/ Prepare regions and collection set. This may ask for the size of humongous\n+  \/\/ objects so it must happen before classes unloaded.\n+  _generation->prepare_regions_and_collection_set(false \/*concurrent*\/);\n+\n@@ -367,3 +371,0 @@\n-  \/\/ Prepare regions and collection set\n-  _generation->prepare_regions_and_collection_set(false \/*concurrent*\/);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahDegeneratedGC.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -70,0 +70,31 @@\n+\n+class ShenandoahTrashImmediateGarbageClosure: public ShenandoahHeapRegionClosure {\n+private:\n+  ShenandoahHeap* const _heap;\n+  ShenandoahMarkingContext* const _ctx;\n+\n+public:\n+  ShenandoahTrashImmediateGarbageClosure() :\n+    _heap(ShenandoahHeap::heap()),\n+    _ctx(ShenandoahHeap::heap()->global_generation()->complete_marking_context()) {}\n+\n+  void heap_region_do(ShenandoahHeapRegion* r) override {\n+    if (r->is_humongous_start()) {\n+      oop humongous_obj = cast_to_oop(r->bottom());\n+      if (!_ctx->is_marked(humongous_obj)) {\n+        assert(!r->has_live(), \"Region %zu is not marked, should not have live\", r->index());\n+        _heap->trash_humongous_region_at(r);\n+      } else {\n+        assert(r->has_live(), \"Region %zu should have live\", r->index());\n+      }\n+    } else if (r->is_humongous_continuation()) {\n+      \/\/ If we hit continuation, the non-live humongous starts should have been trashed already\n+      assert(r->humongous_start_region()->has_live(), \"Region %zu should have live\", r->index());\n+    } else if (r->is_regular()) {\n+      if (!r->has_live()) {\n+        r->make_trash_immediate();\n+      }\n+    }\n+  }\n+};\n+\n@@ -310,0 +341,7 @@\n+\n+  \/\/ Marking is finished. Reclaim immediate garbage before unloading any classes.\n+  ShenandoahTrashImmediateGarbageClosure trash_immediate_garbage;\n+  ShenandoahExcludeRegionClosure<FREE> cl(&trash_immediate_garbage);\n+  heap->heap_region_iterate(&cl);\n+\n+  \/\/ Weak refs, roots and class unloading\n@@ -553,30 +591,0 @@\n-class ShenandoahTrashImmediateGarbageClosure: public ShenandoahHeapRegionClosure {\n-private:\n-  ShenandoahHeap* const _heap;\n-  ShenandoahMarkingContext* const _ctx;\n-\n-public:\n-  ShenandoahTrashImmediateGarbageClosure() :\n-    _heap(ShenandoahHeap::heap()),\n-    _ctx(ShenandoahHeap::heap()->global_generation()->complete_marking_context()) {}\n-\n-  void heap_region_do(ShenandoahHeapRegion* r) override {\n-    if (r->is_humongous_start()) {\n-      oop humongous_obj = cast_to_oop(r->bottom());\n-      if (!_ctx->is_marked(humongous_obj)) {\n-        assert(!r->has_live(), \"Region %zu is not marked, should not have live\", r->index());\n-        _heap->trash_humongous_region_at(r);\n-      } else {\n-        assert(r->has_live(), \"Region %zu should have live\", r->index());\n-      }\n-    } else if (r->is_humongous_continuation()) {\n-      \/\/ If we hit continuation, the non-live humongous starts should have been trashed already\n-      assert(r->humongous_start_region()->has_live(), \"Region %zu should have live\", r->index());\n-    } else if (r->is_regular()) {\n-      if (!r->has_live()) {\n-        r->make_trash_immediate();\n-      }\n-    }\n-  }\n-};\n-\n@@ -736,5 +744,0 @@\n-    \/\/ Trash the immediately collectible regions before computing addresses\n-    ShenandoahTrashImmediateGarbageClosure trash_immediate_garbage;\n-    ShenandoahExcludeRegionClosure<FREE> cl(&trash_immediate_garbage);\n-    heap->heap_region_iterate(&cl);\n-\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":38,"deletions":35,"binary":false,"changes":73,"status":"modified"}]}