{"files":[{"patch":"@@ -1457,6 +1457,0 @@\n-\n-  oop humongous_obj = cast_to_oop(start->bottom());\n-  size_t size = humongous_obj->size();\n-  size_t required_regions = ShenandoahHeapRegion::required_regions(size * HeapWordSize);\n-  size_t index = start->index() + required_regions - 1;\n-\n@@ -1465,5 +1459,5 @@\n-  for(size_t i = 0; i < required_regions; i++) {\n-    \/\/ Reclaim from tail. Otherwise, assertion fails when printing region to trace log,\n-    \/\/ as it expects that every region belongs to a humongous region starting with a humongous start region.\n-    ShenandoahHeapRegion* region = get_region(index --);\n-\n+  \/\/ Do not try to get the size of this humongous object. STW collections will\n+  \/\/ have already unloaded classes, so the object may have a bad klass pointer.\n+  int regions_trashed = 0;\n+  ShenandoahHeapRegion* region = start;\n+  do {\n@@ -1472,1 +1466,0 @@\n-\n@@ -1474,2 +1467,4 @@\n-  }\n-  return required_regions;\n+    regions_trashed++;\n+    region = get_region(region->index() + 1);\n+  } while (region != nullptr && region->is_humongous_continuation());\n+  return regions_trashed;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":9,"deletions":14,"binary":false,"changes":23,"status":"modified"}]}