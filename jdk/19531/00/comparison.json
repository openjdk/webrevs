{"files":[{"patch":"@@ -1144,0 +1144,1 @@\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -1162,0 +1163,1 @@\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/zBarrierSetAssembler_aarch64.cpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -890,0 +890,1 @@\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -913,0 +914,1 @@\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/z\/zBarrierSetAssembler_ppc.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1216,0 +1216,1 @@\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n@@ -1235,0 +1236,1 @@\n+  Assembler::InlineSkippedInstructionsCounter skipped_counter(masm);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/z\/zBarrierSetAssembler_x86.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1015,2 +1015,0 @@\n-  \/\/ Record size of code before we generate stubs in instructions section\n-  _main_code_size = _insts.size();\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -430,3 +430,0 @@\n-  \/\/ Size of code without stubs generated at the end of instructions section\n-  csize_t      _main_code_size;\n-\n@@ -463,1 +460,0 @@\n-    _main_code_size  = 0;\n@@ -637,3 +633,0 @@\n-  \/\/ size of code without stubs in instruction section\n-  csize_t main_code_size() const         { return _main_code_size; }\n-\n","filename":"src\/hotspot\/share\/asm\/codeBuffer.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1129,2 +1129,1 @@\n-\/\/ heuristic (e.g. post call nop instructions and GC barriers;\n-\/\/ see InlineSkippedInstructionsCounter).\n+\/\/ heuristic (e.g. post call nop instructions; see InlineSkippedInstructionsCounter)\n@@ -1136,1 +1135,1 @@\n-        int isize = code->inline_insts_size();\n+        int isize = code->insts_end() - code->verified_entry_point() - code->skipped_instructions_size();\n","filename":"src\/hotspot\/share\/ci\/ciMethod.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -134,1 +134,0 @@\n-  uint inline_insts_size;\n@@ -155,1 +154,0 @@\n-    inline_insts_size   += nm->inline_insts_size();\n@@ -190,3 +188,0 @@\n-    if (inline_insts_size != 0) {\n-      tty->print_cr(\"     inline code = %u (%f%%)\", inline_insts_size, (inline_insts_size * 100.0f)\/total_nm_size);\n-    }\n@@ -1262,8 +1257,1 @@\n-  int size = code_buffer->main_code_size();\n-  assert(size >= 0, \"should be initialized\");\n-  \/\/ Use instructions section size if it is 0 (e.g. native wrapper)\n-  if (size == 0) size = code_size(); \/\/ requires _stub_offset to be set\n-  assert(size <= code_size(), \"incorrect size: %d > %d\", size, code_size());\n-  _inline_insts_size = size - _verified_entry_offset\n-                     - code_buffer->total_skipped_instructions_size();\n-  assert(_inline_insts_size >= 0, \"sanity\");\n+  _skipped_instructions_size = code_buffer->total_skipped_instructions_size();\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":13,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -221,1 +221,1 @@\n-  int _inline_insts_size;\n+  int _skipped_instructions_size;\n@@ -593,1 +593,1 @@\n-  int inline_insts_size() const { return _inline_insts_size; }\n+  int skipped_instructions_size () const { return _skipped_instructions_size; }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1326,1 +1326,0 @@\n-  \/\/ GC barrier stubs are generated in code section\n@@ -1328,1 +1327,1 @@\n-  code_req += bs->estimate_stub_size();\n+  stub_req += bs->estimate_stub_size();\n@@ -1337,1 +1336,1 @@\n-  if (StressCodeBuffers) {\n+  if (StressCodeBuffers)\n@@ -1339,1 +1338,1 @@\n-  }\n+\n@@ -1348,4 +1347,3 @@\n-  if (C->has_method_handle_invokes()) {\n-    total_req += deopt_handler_req;        \/\/ deopt MH handler\n-    stub_req  += deopt_handler_req;\n-  }\n+  if (C->has_method_handle_invokes())\n+    total_req += deopt_handler_req;  \/\/ deopt MH handler\n+\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"}]}