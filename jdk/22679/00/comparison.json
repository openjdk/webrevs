{"files":[{"patch":"@@ -2590,4 +2590,0 @@\n-                    } else if (methName == names._super) {\n-                        \/\/ qualifier omitted; check for existence\n-                        \/\/ of an appropriate implicit qualifier.\n-                        checkNewInnerClass(tree.meth.pos(), localEnv, site, true);\n@@ -2601,0 +2597,9 @@\n+                if (tree.meth.hasTag(IDENT)) {\n+                    \/\/ non-qualified super(...) call; check whether explicit constructor\n+                    \/\/ invocation is well-formed. If the super class is an inner class,\n+                    \/\/ make sure that an appropriate implicit qualifier exists. If the super\n+                    \/\/ class is a local class, make sure that the current class is defined\n+                    \/\/ in the same context as the local class.\n+                    checkNewInnerClass(tree.meth.pos(), localEnv, site, true);\n+                }\n+\n@@ -3068,1 +3073,1 @@\n-            boolean isLocal = type.tsym.owner.kind == MTH;\n+            boolean isLocal = type.tsym.owner.kind == VAR || type.tsym.owner.kind == MTH;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -3837,1 +3837,1 @@\n-        Assert.check(owner.kind == MTH);\n+        Assert.check(owner.kind == MTH || owner.kind == VAR);\n@@ -3849,1 +3849,3 @@\n-        return methodNotFound;\n+        return owner.kind == MTH ?\n+                methodNotFound :\n+                varNotFound;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * @bug 8322882\n+ * @bug 8322882 8345953\n@@ -44,0 +44,57 @@\n+\n+    \/\/ local class in switch\n+    static Object bar = switch (foo) {\n+        case Runnable r -> {\n+            Object there = \"\";\n+            class Local {\n+                {\n+                    there.hashCode();\n+                }\n+\n+                static {\n+                    new Local();    \/\/ can't get there from here\n+                }\n+\n+                static Runnable r = () -> {\n+                    new Local();    \/\/ can't get there from here\n+                };\n+            }\n+            yield r;\n+        }\n+    };\n+\n+    \/\/ local class in instance init\n+    {\n+        Object there = \"\";\n+        class Local {\n+            {\n+                there.hashCode();\n+            }\n+\n+            static {\n+                new Local();    \/\/ can't get there from here\n+            }\n+\n+            static Runnable r = () -> {\n+                new Local();    \/\/ can't get there from here\n+            };\n+        }\n+    }\n+\n+    \/\/ local class in static init\n+    static {\n+        Object there = \"\";\n+        class Local {\n+            {\n+                there.hashCode();\n+            }\n+\n+            static {\n+                new Local();    \/\/ can't get there from here\n+            }\n+\n+            static Runnable r = () -> {\n+                new Local();    \/\/ can't get there from here\n+            };\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/LocalFreeVarStaticInstantiate.java","additions":58,"deletions":1,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -5,1 +5,7 @@\n-4 errors\n+LocalFreeVarStaticInstantiate.java:55:21: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticInstantiate.java:59:21: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticInstantiate.java:75:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticInstantiate.java:79:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticInstantiate.java:93:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticInstantiate.java:97:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+10 errors\n","filename":"test\/langtools\/tools\/javac\/LocalFreeVarStaticInstantiate.out","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,161 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8345944\n+ * @summary JEP 492: extending local class in a different static context should not be allowed\n+ * @compile\/fail\/ref=LocalFreeVarStaticSuper.out -XDrawDiagnostics LocalFreeVarStaticSuper.java\n+ *\/\n+\n+class LocalFreeVarStaticSuper {\n+\n+    \/\/ local class in method\n+    static void foo(Object there) {\n+        class Local {\n+            {\n+                there.hashCode();\n+            }\n+\n+            static {\n+                class Sub1 extends Local { }\n+                class Sub2 extends Local {\n+                    Sub2() { }\n+                }\n+                class Sub3 extends Local {\n+                    Sub3() { super(); }\n+                }\n+            }\n+\n+            static Runnable r = () -> {\n+                class Sub1 extends Local { }\n+                class Sub2 extends Local {\n+                    Sub2() { }\n+                }\n+                class Sub3 extends Local {\n+                    Sub3() { super(); }\n+                }\n+            };\n+        }\n+    }\n+\n+    \/\/ local class in lambda\n+    static Runnable foo = () -> {\n+        Object there = \"\";\n+        class Local {\n+            {\n+                there.hashCode();\n+            }\n+\n+            static {\n+                class Sub1 extends Local { }\n+                class Sub2 extends Local {\n+                    Sub2() { }\n+                }\n+                class Sub3 extends Local {\n+                    Sub3() { super(); }\n+                }\n+            }\n+\n+            static Runnable r = () -> {\n+                class Sub1 extends Local { }\n+                class Sub2 extends Local {\n+                    Sub2() { }\n+                }\n+                class Sub3 extends Local {\n+                    Sub3() { super(); }\n+                }\n+            };\n+        }\n+    };\n+\n+    \/\/ local class in switch\n+    static Object bar = switch (foo) {\n+        case Runnable r -> {\n+            Object there = \"\";\n+            class Local {\n+                {\n+                    there.hashCode();\n+                }\n+\n+                static {\n+                    class Sub1 extends Local { }\n+                    class Sub2 extends Local {\n+                        Sub2() { }\n+                    }\n+                    class Sub3 extends Local {\n+                        Sub3() { super(); }\n+                    }\n+                }\n+\n+                static Runnable r = () -> {\n+                    class Sub1 extends Local { }\n+                    class Sub2 extends Local {\n+                        Sub2() { }\n+                    }\n+                    class Sub3 extends Local {\n+                        Sub3() { super(); }\n+                    }\n+                };\n+            }\n+            yield r;\n+        }\n+    };\n+\n+    \/\/ local class in instance init\n+    {\n+        Object there = \"\";\n+        class Local {\n+            {\n+                there.hashCode();\n+            }\n+\n+            static {\n+                class Sub1 extends Local { }\n+                class Sub2 extends Local {\n+                    Sub2() { }\n+                }\n+                class Sub3 extends Local {\n+                    Sub3() { super(); }\n+                }\n+            }\n+\n+            static Runnable r = () -> {\n+                class Sub1 extends Local { }\n+                class Sub2 extends Local {\n+                    Sub2() { }\n+                }\n+                class Sub3 extends Local {\n+                    Sub3() { super(); }\n+                }\n+            };\n+        }\n+    }\n+\n+    \/\/ local class in static init\n+    static {\n+        Object there = \"\";\n+        class Local {\n+            {\n+                there.hashCode();\n+            }\n+\n+            static {\n+                class Sub1 extends Local { }\n+                class Sub2 extends Local {\n+                    Sub2() { }\n+                }\n+                class Sub3 extends Local {\n+                    Sub3() { super(); }\n+                }\n+            }\n+\n+            static Runnable r = () -> {\n+                class Sub1 extends Local { }\n+                class Sub2 extends Local {\n+                    Sub2() { }\n+                }\n+                class Sub3 extends Local {\n+                    Sub3() { super(); }\n+                }\n+            };\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/LocalFreeVarStaticSuper.java","additions":161,"deletions":0,"binary":false,"changes":161,"status":"added"},{"patch":"@@ -0,0 +1,31 @@\n+LocalFreeVarStaticSuper.java:18:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:20:28: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:23:30: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:28:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:30:28: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:33:30: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:48:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:50:28: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:53:30: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:58:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:60:28: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:63:30: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:79:21: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:81:32: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:84:34: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:89:21: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:91:32: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:94:34: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:111:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:113:28: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:116:30: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:121:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:123:28: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:126:30: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:141:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:143:28: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:146:30: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:151:17: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:153:28: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+LocalFreeVarStaticSuper.java:156:30: compiler.err.local.cant.be.inst.static: kindname.class, Local\n+30 errors\n","filename":"test\/langtools\/tools\/javac\/LocalFreeVarStaticSuper.out","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"}]}