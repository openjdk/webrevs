{"files":[{"patch":"@@ -889,5 +889,1 @@\n-  \/\/ Assertions only hold true for Java threads since they call this method under heap lock.\n-  bool const is_java_thread = Thread::current()->is_Java_thread();\n-  if (is_java_thread) {\n-    shenandoah_assert_heaplocked_or_safepoint();\n-  }\n+  shenandoah_assert_heaplocked_or_safepoint();\n@@ -898,5 +894,3 @@\n-  if (is_java_thread) {\n-    assert(ShenandoahHeap::heap()->is_full_gc_in_progress() ||\n-           (used() + _humongous_waste <= affiliated_region_count * ShenandoahHeapRegion::region_size_bytes()),\n-           \"used + humongous cannot exceed regions\");\n-  }\n+  assert(ShenandoahHeap::heap()->is_full_gc_in_progress() ||\n+         (used() + _humongous_waste <= affiliated_region_count * ShenandoahHeapRegion::region_size_bytes()),\n+         \"used + humongous cannot exceed regions\");\n@@ -906,0 +900,4 @@\n+size_t ShenandoahGeneration::decrement_affiliated_region_count_without_lock() {\n+  return Atomic::sub(&_affiliated_region_count, (size_t) 1);\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -222,0 +222,2 @@\n+  \/\/ Same as decrement_affiliated_region_count, but w\/o the need to hold heap lock before being called.\n+  size_t decrement_affiliated_region_count_without_lock();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -622,1 +622,1 @@\n-      generation->decrement_affiliated_region_count();\n+      generation->decrement_affiliated_region_count_without_lock();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}