{"files":[{"patch":"@@ -1045,1 +1045,1 @@\n-bool VectorNode::should_swap_inputs_to_help_global_value_numbering() {\n+bool VectorNode::is_commutative() {\n@@ -1101,1 +1101,1 @@\n-  if (should_swap_inputs_to_help_global_value_numbering()) {\n+  if (is_commutative()) {\n@@ -2194,1 +2194,1 @@\n-static Node* unsigned_min_max_xform(Node* n) {\n+static Node* UMinMaxV_Ideal(Node* n, PhaseGVN* phase, bool can_reshape) {\n@@ -2216,1 +2216,1 @@\n-  if (umin && umax) {\n+  if (umin != nullptr && umax != nullptr) {\n@@ -2218,1 +2218,1 @@\n-         (umin->in(2) == umax->in(1) && umin->in(1) == umax->in(2))) {\n+        (umin->in(2) == umax->in(1) && umin->in(1) == umax->in(2))) {\n@@ -2227,1 +2227,1 @@\n-  return nullptr;\n+  return static_cast<VectorNode*>(n)->VectorNode::Ideal(phase, can_reshape);\n@@ -2231,1 +2231,1 @@\n-  return unsigned_min_max_xform(this);\n+  return UMinMaxV_Ideal(this, phase, can_reshape);\n@@ -2243,1 +2243,1 @@\n-  return unsigned_min_max_xform(this);\n+  return UMinMaxV_Ideal(this, phase, can_reshape);\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-  bool should_swap_inputs_to_help_global_value_numbering();\n+  bool is_commutative();\n@@ -622,3 +622,0 @@\n-  virtual uint hash() const {\n-    return (uintptr_t)in(1) + (uintptr_t)in(2) + Opcode();\n-  }\n@@ -644,3 +641,0 @@\n-  virtual uint hash() const {\n-    return (uintptr_t)in(1) + (uintptr_t)in(2) + Opcode();\n-  }\n","filename":"src\/hotspot\/share\/opto\/vectornode.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1257,1 +1257,1 @@\n-   public static final String UMIN_VB = VECTOR_PREFIX + \"UMIN_VB\" + POSTFIX;\n+    public static final String UMIN_VB = VECTOR_PREFIX + \"UMIN_VB\" + POSTFIX;\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/IRNode.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-* @bug 8338201\n-* @summary Support new unsigned and saturating vector operators in VectorAPI\n+* @bug 8342676\n+* @summary Unsigned Vector Min \/ Max transforms\n@@ -29,1 +29,0 @@\n-* @requires vm.compiler2.enabled\n@@ -109,1 +108,1 @@\n-    @IR(counts = {IRNode.UMAX_VB, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMAX_VB, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -114,3 +113,3 @@\n-                     .lanewise(VectorOperators.UMAX,\n-                               ByteVector.fromArray(bspec, byte_in2, i))\n-                     .intoArray(byte_out, i);\n+                      .lanewise(VectorOperators.UMAX,\n+                                ByteVector.fromArray(bspec, byte_in2, i))\n+                      .intoArray(byte_out, i);\n@@ -132,1 +131,1 @@\n-    @IR(counts = {IRNode.UMAX_VS, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMAX_VS, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -137,3 +136,3 @@\n-                     .lanewise(VectorOperators.UMAX,\n-                               ShortVector.fromArray(sspec, short_in2, i))\n-                     .intoArray(short_out, i);\n+                       .lanewise(VectorOperators.UMAX,\n+                                 ShortVector.fromArray(sspec, short_in2, i))\n+                       .intoArray(short_out, i);\n@@ -155,1 +154,1 @@\n-    @IR(counts = {IRNode.UMAX_VI, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMAX_VI, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -178,1 +177,1 @@\n-    @IR(counts = {IRNode.UMAX_VL, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMAX_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -183,3 +182,3 @@\n-                     .lanewise(VectorOperators.UMAX,\n-                               LongVector.fromArray(lspec, long_in2, i))\n-                     .intoArray(long_out, i);\n+                      .lanewise(VectorOperators.UMAX,\n+                                LongVector.fromArray(lspec, long_in2, i))\n+                      .intoArray(long_out, i);\n@@ -201,1 +200,1 @@\n-    @IR(counts = {IRNode.UMIN_VB, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMIN_VB, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -206,3 +205,3 @@\n-                     .lanewise(VectorOperators.UMIN,\n-                               ByteVector.fromArray(bspec, byte_in2, i))\n-                     .intoArray(byte_out, i);\n+                      .lanewise(VectorOperators.UMIN,\n+                                ByteVector.fromArray(bspec, byte_in2, i))\n+                      .intoArray(byte_out, i);\n@@ -224,1 +223,1 @@\n-    @IR(counts = {IRNode.UMIN_VS, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMIN_VS, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -229,3 +228,3 @@\n-                     .lanewise(VectorOperators.UMIN,\n-                               ShortVector.fromArray(sspec, short_in2, i))\n-                     .intoArray(short_out, i);\n+                       .lanewise(VectorOperators.UMIN,\n+                                 ShortVector.fromArray(sspec, short_in2, i))\n+                       .intoArray(short_out, i);\n@@ -247,1 +246,1 @@\n-    @IR(counts = {IRNode.UMIN_VI, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMIN_VI, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -270,1 +269,1 @@\n-    @IR(counts = {IRNode.UMIN_VL, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMIN_VL, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -275,3 +274,3 @@\n-                     .lanewise(VectorOperators.UMIN,\n-                               LongVector.fromArray(lspec, long_in2, i))\n-                     .intoArray(long_out, i);\n+                      .lanewise(VectorOperators.UMIN,\n+                                LongVector.fromArray(lspec, long_in2, i))\n+                      .intoArray(long_out, i);\n@@ -293,1 +292,1 @@\n-    @IR(counts = {IRNode.UMIN_VI, \" 0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMIN_VI, \" 0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -301,1 +300,1 @@\n-        }\n+       }\n@@ -316,1 +315,1 @@\n-    @IR(counts = {IRNode.UMAX_VI, \" 0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMAX_VI, \" 0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -339,1 +338,1 @@\n-    @IR(counts = {IRNode.UMAX_VI, \" 0 \", IRNode.UMIN_VI, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMAX_VI, \" 0 \", IRNode.UMIN_VI, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -366,1 +365,1 @@\n-    @IR(counts = {IRNode.UMIN_VI, \" 0 \", IRNode.UMAX_VI, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMIN_VI, \" 0 \", IRNode.UMAX_VI, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -372,2 +371,2 @@\n-            \/\/ UMinV (UMinV vec1, vec2) (UMaxV vec1, vec2) => UMinV vec1 vec2\n-            vec1.lanewise(VectorOperators.UMIN, vec2)\n+            \/\/ UMaxV (UMinV vec2, vec1) (UMaxV vec1, vec2) => UMinV vec1 vec2\n+            vec2.lanewise(VectorOperators.UMIN, vec1)\n@@ -384,1 +383,1 @@\n-            int expected = VectorMath.maxUnsigned(VectorMath.minUnsigned(int_in1[i], int_in2[i]),\n+            int expected = VectorMath.maxUnsigned(VectorMath.minUnsigned(int_in2[i], int_in1[i]),\n@@ -393,1 +392,1 @@\n-    @IR(counts = {IRNode.UMAX_VI, \" 0 \", IRNode.UMIN_VI, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMAX_VI, \" 0 \", IRNode.UMIN_VI, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -420,1 +419,1 @@\n-    @IR(counts = {IRNode.UMIN_VI, \" 0 \", IRNode.UMAX_VI, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMIN_VI, \" 0 \", IRNode.UMAX_VI, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -426,2 +425,2 @@\n-            \/\/ UMinV (UMaxV vec1, vec2) (UMaxV vec1, vec2) => UMaxV vec1 vec2\n-            vec1.lanewise(VectorOperators.UMAX, vec2)\n+            \/\/ UMinV (UMaxV vec2, vec1) (UMaxV vec1, vec2) => UMaxV vec1 vec2\n+            vec2.lanewise(VectorOperators.UMAX, vec1)\n@@ -438,1 +437,1 @@\n-            int expected = VectorMath.minUnsigned(VectorMath.maxUnsigned(int_in1[i], int_in2[i]),\n+            int expected = VectorMath.minUnsigned(VectorMath.maxUnsigned(int_in2[i], int_in1[i]),\n@@ -447,1 +446,1 @@\n-    @IR(counts = {IRNode.UMIN_VI, \" 0 \", IRNode.UMAX_VI, \" >0 \"}, applyIf = {\"UseAVX\", \" >0 \"})\n+    @IR(counts = {IRNode.UMIN_VI, \" 0 \", IRNode.UMAX_VI, \" >0 \"}, applyIfCPUFeature = {\"avx\", \"true\"})\n@@ -453,1 +452,1 @@\n-            \/\/ UMinV (UMinV vec1, vec2) (UMaxV vec1, vec2) => UMinV vec1 vec2\n+            \/\/ UMaxV (UMinV vec1, vec2) (UMaxV vec2, vec1) => UMinV vec1 vec2\n@@ -456,1 +455,1 @@\n-                          vec1.lanewise(VectorOperators.UMAX, vec2))\n+                          vec2.lanewise(VectorOperators.UMAX, vec1))\n@@ -466,1 +465,1 @@\n-                                                  VectorMath.maxUnsigned(int_in1[i], int_in2[i]));\n+                                                  VectorMath.maxUnsigned(int_in2[i], int_in1[i]));\n@@ -473,0 +472,1 @@\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorUnsignedMinMaxOperationsTest.java","additions":46,"deletions":46,"binary":false,"changes":92,"status":"modified"}]}