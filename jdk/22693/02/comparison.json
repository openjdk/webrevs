{"files":[{"patch":"@@ -183,1 +183,0 @@\n-  regulator_thread()->stop();\n@@ -185,0 +184,1 @@\n+  regulator_thread()->stop();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -548,1 +548,0 @@\n-  _mmu_tracker(),\n@@ -642,0 +641,2 @@\n+\n+  \/\/ Schedule periodic task to report on gc thread CPU utilization\n@@ -1469,0 +1470,1 @@\n+    log_info(gc)(\"Do control thread\");\n@@ -1473,0 +1475,1 @@\n+    log_info(gc)(\"Do uncommit thread\");\n@@ -1476,0 +1479,1 @@\n+  log_info(gc)(\"Do workers\");\n@@ -1478,0 +1482,1 @@\n+    log_info(gc)(\"Do safepoint workers\");\n@@ -2053,0 +2058,3 @@\n+  \/\/ Step 0a. Stop reporting on gc thread cpu utilization\n+  mmu_tracker()->stop();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -51,1 +51,3 @@\n-    total_time += os::thread_cpu_time(thread);\n+    if (!thread->has_terminated()) {\n+      total_time += os::thread_cpu_time(thread);\n+    }\n@@ -68,1 +70,0 @@\n-  _mmu_periodic_task->disenroll();\n@@ -178,0 +179,4 @@\n+void ShenandoahMmuTracker::stop() const {\n+  _mmu_periodic_task->disenroll();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -104,0 +104,4 @@\n+\n+  \/\/ Unenrolls the periodic task that collects CPU utilization for GC threads. This must happen _before_ the\n+  \/\/ gc threads are stopped and terminated.\n+  void stop() const;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMmuTracker.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}