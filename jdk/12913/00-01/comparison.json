{"files":[{"patch":"@@ -4,0 +4,2 @@\n+STEP 1: UPDATING FILES\n+----------------------\n@@ -7,1 +9,2 @@\n-and even then just the ones we use. Do NOT just copy everything.\n+and even then just the ones we use.\n+IMPORTANT! DO NOT just copy everything.\n@@ -9,13 +12,1 @@\n-So one way to update is to\n-\n-- copy over from the updated harfbuzz the exact same files we already have\n-- it isn't a flat directory so watch out for that\n-- any that are no longer available (copy fails) we remove but these may come\n-  back later if they were actually renamed\n-- look for files in the destination that were NOT updated - perhaps they\n-  are gone in the upstream - or renamed. Remove them if they are really\n-  obsolete, or add their replacements\/renames.\n-- iterate over : build and see what new file is missing that causes a build failure\n-- when this is done we have something buildable\n-- make sure it builds on all supported platforms.\n-- Harfbuzz is not modular so it is not easy,\n+- Harfbuzz is not modular, so the update is not a straightforward process.\n@@ -27,2 +18,2 @@\n-  * but we do use core text support on macOS.\n-  * I really wish that \"src\" were just library source but I expect the authors\n+   * but we do use core text support on macOS.\n+   * I really wish that \"src\" were just library source, but I expect the authors\n@@ -31,1 +22,49 @@\n-- we do not apply any header file changes so this is not an issue\n+So one way to update is to\n+\n+- copy over from the updated harfbuzz the exact same files we already have\n+- it isn't a flat directory so watch out for that.\n+\n+- For files that are no longer available (for which copy fails), we remove such files,\n+  but these may come back later if they were actually renamed.\n+\n+- look for files in the destination that were NOT updated - perhaps they\n+  are removed or renamed in the upstream. Remove them if they are really\n+  obsolete, or add their replacements\/renames.\n+  In IntelliJ IDE:\n+    Newly added files are shown in RED\n+    Modified in BLUE\n+    NOT Updated in WHITE\n+  This feature might be helpful to keep track of new, modified and unchanged files.\n+\n+\n+STEP 2: BUILD CHANGES INCREMENTALLY\n+-----------------------------------\n+- iterate over : build and see what new file is missing that causes a build failure.\n+  Sometimes just running a build does not show up any failures due to stale files.\n+  Clean followed by build would be helpful in this situation.\n+\n+- You might run into compiler warnings that are treated as errors or the requirement\n+  to set certain compiler flags if the build fails on a specific platform.\n+  Check \"COMPILER WARNINGS AND SETTING FLAGS\" section for more details.\n+\n+- when this is done we have something buildable, make sure it builds\n+  on all supported platforms.\n+\n+\n+STEP 3: COMPILER WARNINGS AND SETTING FLAGS\n+-------------------------------------------\n+- Update make parameters in Awt2DLibraries.gmk\n+  Since we don't use configure we need to manually specify the options\n+  we need in the Harfbuzz section of Awt2DLibraries.gmk.\n+  As well as adding new options, we may need to clean up obsolete options.\n+  Note there may be platform variations in the flags.\n+\n+- As with other 3rd party libs we do not fix the code to eliminate compiler\n+  warnings unless they are critical and clearly avoiding a bug. Even then\n+  we'd report it upstream and apply the patch once it is made available.\n+  The usual practice is do just disable the warnings.\n+\n+\n+STEP 4: UPDATING .md FILE\n+-------------------------\n+- we do not apply any header file changes so this is not an issue.\n@@ -34,1 +73,1 @@\n-   src\/java.desktop\/share\/legal\/harfbuzz.md with the new version\n+  src\/java.desktop\/share\/legal\/harfbuzz.md with the new version.\n@@ -36,0 +75,3 @@\n+\n+STEP 5: REPLACE TABS & REMOVE TRAILING SPACES\n+---------------------------------------------\n@@ -39,2 +81,2 @@\n-  To clean up the extra spaces and tabs run the following script at each folder level\n-  within libharfbuzz\n+  To clean up the extra spaces and tabs run the following script at\n+  each folder level within libharfbuzz.\n@@ -42,2 +84,1 @@\n-  (shopt -s nullglob\n-   for f in *.c *.h *.cc *.hh;\n+  for f in *.c *.h *.cc *.hh;\n@@ -45,3 +86,3 @@\n-        # replace tabs with spaces\n-        expand ${f} > ${f}.tmp;\n-        mv ${f}.tmp $f;\n+          # replace tabs with spaces\n+          expand ${f} > ${f}.tmp;\n+          mv ${f}.tmp $f;\n@@ -49,2 +90,3 @@\n-        # fix line endings to LF\n-        sed -i -e 's\/\\r$\/\/g' ${f};\n+          # fix line endings to LF\n+          sed -e 's\/\\r$\/\/g' ${f} > ${f}.tmp;\n+          mv ${f}.tmp $f;\n@@ -52,2 +94,3 @@\n-        # remove trailing spaces\n-        sed -i -e 's\/[ ]* $\/\/g' ${f};\n+          # remove trailing spaces\n+          sed -e 's\/[ ]* $\/\/g' ${f} > ${f}.tmp;\n+          mv ${f}.tmp $f;\n@@ -55,1 +98,0 @@\n-  )\n@@ -57,3 +99,8 @@\n-- test using all the automated jtreg tests on all platforms\n-- do manual verification of Arabic, Hebrew, Thai, Indic against previous releases. \n-  Look for manual related layout jtreg tests and run on Windows,Linux and Mac.\n+\n+STEP 6: TESTING\n+---------------\n+- test using all the automated jtreg tests on all platforms.\n+\n+- do MANUAL verification of Arabic, Hebrew, Thai, Indic against previous releases.\n+  Look for manual related layout jtreg tests (test\/jdk\/java\/awt\/font\/TextLayout)\n+  and run on Windows,Linux and Mac.\n@@ -64,5 +111,5 @@\n-- Update make parameters as needed\n-  Since we don't use configure we need to manually specify the options\n-  we need in the harfbuzz section of Awt2DLibraries.gmk.\n-  As well as adding new options, we may need to clean up obsolete options.\n-  Note there may be platform variations in the flags.\n+  Different unicode combinations can be checked using Font2DTest.\n+  Run Font2DTest, select 'UserText' option for 'Text to use'.\n+  Paste unicodes of different languages (Arabic, Hebrew, Thai, Indic)\n+  and compare the glyphs with previous versions.\n+  It should look the same in both cases.\n@@ -70,3 +117,0 @@\n-- As with other 3rd party libs we do not fix the code to eliminate compiler\n-  warnings unless they are critical and clearly avoiding a bug. Even then\n-  we'd report it upstream. The usual practice is do just disable the warnings\n@@ -74,1 +118,1 @@\n-- Update THIS UPDATING.txt file too if it is outdated.\n\\ No newline at end of file\n+- FINALLY, Do update THIS UPDATING.txt file too if it is outdated.\n","filename":"src\/java.desktop\/share\/native\/libharfbuzz\/UPDATING.txt","additions":86,"deletions":42,"binary":false,"changes":128,"status":"modified"}]}