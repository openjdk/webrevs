{"files":[{"patch":"@@ -145,2 +145,4 @@\n-            int offset = property.indexOf(\"ssl\");\n-            if (offset != -1 && property.indexOf(\"sslctx\", offset) != -1) {\n+            \/\/ remove first occurrence of \"sslctx\" since\n+            \/\/ it interferes with search for \"ssl\"\n+            String modified = property.replaceFirst(\"sslctx\", \"\");\n+            if (modified.contains(\"ssl\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ssl\/SSLLogger.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,172 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8350582\n+ * @library \/test\/lib \/javax\/net\/ssl\/templates ..\/..\/\n+ * @summary javax.net.debug \"ssl\" option parsed incorrectly\n+ * @run junit DebugPropertyValues\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class DebugPropertyValues extends SSLSocketTemplate {\n+\n+    static Path LOG_FILE;\n+\n+    @BeforeAll\n+    static void setup() throws Exception {\n+        LOG_FILE = Path.of(System.getProperty(\"test.classes\"), \"logging.conf\");\n+        Files.writeString(LOG_FILE, \".level = ALL\\n\" +\n+                \"handlers= java.util.logging.ConsoleHandler\\n\" +\n+                \"java.util.logging.ConsoleHandler.level = ALL\\n\");\n+    }\n+\n+    private static Stream<Arguments> patternMatches() {\n+        \/\/ \"Plaintext before ENCRYPTION\" comes from \"ssl:record:plaintext\" option\n+        \/\/ \"handshake, length =\" comes from \"ssl:record\" option\n+        \/\/ \"matching alias:\" comes from ssl:keymanager option\n+        \/\/ \"trigger seeding of SecureRandom\" comes from ssl:sslctx option\n+        \/\/ \"jdk.tls.keyLimits:\" comes from the plain \"ssl\" option\n+        return Stream.of(\n+                \/\/ all should print everything\n+                Arguments.of(List.of(\"-Djavax.net.debug=all\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"adding as trusted certificates\",\n+                                \"supported_versions\"),\n+                        null),\n+                \/\/ ssl should print most details expect verbose details\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ allow expand option for more verbose output\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl,handshake,expand\"),\n+                        List.of(\"\\\"logger\\\".*: \\\"javax.net.ssl\\\",\",\n+                                \"\\\"message\\\".*: \\\"Produced ClientHello handshake message\",\n+                                \"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ filtering on record option, with expand\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:record,expand\"),\n+                        List.of(\"\\\"logger\\\".*: \\\"javax.net.ssl\\\",\",\n+                                \"\\\"message\\\".*: \\\"READ: TLSv1.2 application_data\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"\\\"message\\\".*: \\\"Produced ClientHello handshake message:\")),\n+                \/\/ \"all ssl\" mode only true if \"ssl\" is javax.net.debug value\n+                \/\/ this test is equivalent to ssl:record mode\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl,record\"),\n+                        List.of(\"handshake, length =\",\n+                                \"WRITE:\"),\n+                        List.of(\"matching alias:\",\n+                                \"Plaintext before ENCRYPTION\")),\n+                \/\/ ignore bad sub-option. treat like \"ssl\"\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl,typo\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ ssltypo contains \"ssl\". Treat like \"ssl\"\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssltypo\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"trigger seeding of SecureRandom\",\n+                                \"supported_versions\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ plaintext is valid for record option\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:record:plaintext\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"length =\"),\n+                        List.of(\"matching alias:\")),\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:trustmanager\"),\n+                        List.of(\"adding as trusted certificates\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:sslctx\"),\n+                        List.of(\"trigger seeding of SecureRandom\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ help message test. Should exit without running test\n+                Arguments.of(List.of(\"-Djavax.net.debug=help\"),\n+                        List.of(\"print the help messages\",\n+                                \"debugging can be widened with:\"),\n+                        List.of(\"Plaintext before ENCRYPTION\",\n+                                \"adding as trusted certificates\")),\n+                \/\/ add in javax.net.debug sanity test\n+                Arguments.of(List.of(\"-Djavax.net.debug=ssl:trustmanager\",\n+                                \"-Djava.security.debug=all\"),\n+                        List.of(\"adding as trusted certificates\",\n+                                \"properties: Initial security property:\",\n+                                \"certpath: Cert path validation succeeded\"),\n+                        List.of(\"Plaintext before ENCRYPTION\")),\n+                \/\/ empty invokes System.Logger use\n+                Arguments.of(List.of(\"-Djavax.net.debug\",\n+                        \"-Djava.util.logging.config.file=\" + LOG_FILE),\n+                        List.of(\"FINE: adding as trusted certificates\",\n+                        \"FINE: WRITE: TLSv1.3 application_data\",\n+                        \"supported_versions\"),\n+                        null)\n+                );\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"patternMatches\")\n+    public void checkDebugOutput(List<String> params, List<String> expected,\n+                                 List<String> notExpected) throws Exception {\n+\n+        List<String> args = new ArrayList<>(params);\n+        args.add(\"DebugPropertyValues\");\n+        OutputAnalyzer outputAnalyzer = ProcessTools.executeTestJava(args);\n+        outputAnalyzer.shouldHaveExitValue(0);\n+        if (expected != null) {\n+            for (String s : expected) {\n+                outputAnalyzer.shouldMatch(s);\n+            }\n+        }\n+        if (notExpected != null) {\n+            for (String s : notExpected) {\n+                outputAnalyzer.shouldNotMatch(s);\n+            }\n+        } else {\n+            outputAnalyzer.stderrShouldNotBeEmpty();\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        new DebugPropertyValues().run();\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLLogger\/DebugPropertyValues.java","additions":172,"deletions":0,"binary":false,"changes":172,"status":"added"}]}