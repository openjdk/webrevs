{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,22 +27,2 @@\n- *\n- * @run main\/othervm RemoveJar true true testpkg.Test testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar true true testpkg.Test testpkg.Missing testjar\/\n- * @run main\/othervm RemoveJar true true testpkg.Missing testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar true true testpkg.Missing testpkg.Missing testjar\/\n- *\n- * @run main\/othervm RemoveJar true false testpkg.Test testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar true false testpkg.Test testpkg.Missing testjar\/\n- * @run main\/othervm RemoveJar true false testpkg.Missing testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar true false testpkg.Missing testpkg.Missing testjar\/\n- *\n- * @run main\/othervm RemoveJar false true testpkg.Test testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar false true testpkg.Test testpkg.Missing testjar\/\n- * @run main\/othervm RemoveJar false true testpkg.Missing testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar false true testpkg.Missing testpkg.Missing testjar\/\n- *\n- * @run main\/othervm RemoveJar false false testpkg.Test testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar false false testpkg.Test testpkg.Missing testjar\/\n- * @run main\/othervm RemoveJar false false testpkg.Missing testpkg.Test testjar\/\n- * @run main\/othervm RemoveJar false false testpkg.Missing testpkg.Missing testjar\/\n- *\n- * @run main\/othervm RemoveJar true true testpkg.Test testpkg.Test badpath\n+ * @modules java.base\/sun.net.www.protocol.jar:open\n+ * @run junit\/othervm RemoveJar\n@@ -53,1 +33,5 @@\n-import java.io.ByteArrayOutputStream;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.io.BufferedOutputStream;\n@@ -55,2 +39,2 @@\n-import java.io.PrintStream;\n-import java.io.UncheckedIOException;\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n@@ -62,2 +46,6 @@\n-import java.nio.file.Paths;\n-import java.util.Arrays;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.jar.JarEntry;\n+import java.util.jar.JarOutputStream;\n@@ -65,2 +53,0 @@\n-import java.util.zip.ZipException;\n-import java.util.spi.ToolProvider;\n@@ -68,24 +54,1 @@\n-public class RemoveJar {\n-    private final static String TEST_PKG = \"testpkg\";\n-    private final static String JAR_DIR = \"testjar\/\" + TEST_PKG;\n-    private final static String FILE_NAME = \"testjar.jar\";\n-    private final static ByteArrayOutputStream baos = new ByteArrayOutputStream();\n-    private final static PrintStream out = new PrintStream(baos);\n-    private final static ToolProvider JAR_TOOL = ToolProvider.findFirst(\"jar\")\n-            .orElseThrow(() ->\n-                    new RuntimeException(\"jar tool not found\")\n-            );\n-\n-    private static void buildJar() throws IOException {\n-        \/\/ create dir\n-        mkdir(JAR_DIR);\n-        \/\/ create file\n-        Path path = Paths.get(JAR_DIR);\n-        String src = \"package \" + TEST_PKG + \";\\n\" +\n-                \"class Test {}\\n\";\n-        Files.write(Paths.get(JAR_DIR + \"\/Test.java\"), src.getBytes());\n-        \/\/ compile class\n-        compile(JAR_DIR + \"\/Test.java\");\n-        \/\/ package jar\n-        jar(\"-cf testjar.jar \" + JAR_DIR);\n-    }\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -93,2 +56,1 @@\n-    public static void main(String args[]) throws Exception {\n-        buildJar();\n+public class RemoveJar {\n@@ -96,3 +58,20 @@\n-        URLClassLoader loader = null;\n-        URL url = null;\n-        Path path = Paths.get(FILE_NAME);\n+    \/\/ Provide scenarios for the parameterized test\n+    public static Stream<Arguments> arguments() {\n+        List<Arguments> args = new ArrayList<>();\n+\n+        \/\/ Add all 16 combinations of:\n+        \/\/ useCacheFirst x useCacheSecond x findFirst x findSecond\n+        Set<Boolean> booleans = Set.of(true, false);\n+        for (Boolean useCacheFirst : booleans) {\n+            for (Boolean useCacheSecond : booleans) {\n+                for (Boolean findFirst : booleans) {\n+                    for (Boolean findSecond : booleans) {\n+                        args.add(Arguments.of(useCacheFirst, useCacheSecond, findFirst, findSecond, \"testjar\/\"));\n+                    }\n+                }\n+            }\n+        }\n+        \/\/ One more with a bad path\n+        args.add(Arguments.of(true, true, true, true, \"badpath\"));\n+        return args.stream();\n+    }\n@@ -100,5 +79,30 @@\n-        boolean useCacheFirst = Boolean.parseBoolean(args[0]);\n-        boolean useCacheSecond = Boolean.parseBoolean(args[1]);\n-        String firstClass = args[2];\n-        String secondClass = args[3];\n-        String subPath = args[4];\n+    \/**\n+     * Attempt loading a class, then another with a mix existing and missing class names\n+     * and a mix of URL caching enabled\/disabled for the first and second load.\n+     *\n+     * After each load scenario, the JAR file should always be closed. This is verified\n+     * by deleting it, which will fail of Windows if the JarFile is still open.\n+     *\n+     * @param useCacheFirst use caches for the first class loaded\n+     * @param useCacheSecond use caches for the second class loaded\n+     * @param findFirst true if the first lookup should be successful\n+     * @param findSecond true if the second lookup should be successful\n+     * @param subPath a the directory within the JAR to load classes from\n+     *\n+     * @throws IOException if un unexpected error occurs\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"arguments\")\n+    public void shouldReleaseJarFile(boolean useCacheFirst, boolean useCacheSecond, boolean findFirst, boolean findSecond, String subPath) throws IOException {\n+\n+        \/\/ Sanity check that the JarFileFactory caches are unpopulated\n+        assertEmptyJarFileCache();\n+\n+        String firstClass = findFirst ? \"testpkg.Test\" : \"testpkg.Missing\";\n+        String secondClass = findSecond ? \"testpkg.Test\" : \"testpkg.Missing\";\n+\n+        \/\/ Create JAR and URLClassLoader\n+        Path jar = createJar();\n+        String path = jar.toAbsolutePath().toString();\n+        URL url = new URL(\"jar\", \"\", \"file:\" +path  + \"!\/\" + subPath);\n+        URLClassLoader loader = new URLClassLoader(new URL[]{url});\n@@ -107,10 +111,7 @@\n-            String path_str = path.toUri().toURL().toString();\n-            URLConnection.setDefaultUseCaches(\"jar\", useCacheFirst);\n-\n-            url = new URL(\"jar\", \"\", path_str + \"!\/\" + subPath);\n-            loader = new URLClassLoader(new URL[]{url});\n-\n-            loader.loadClass(firstClass);\n-        } catch (Exception e) {\n-            System.err.println(\"EXCEPTION: \" + e);\n-        }\n+            \/\/ Attempt to load the first class\n+            try {\n+                URLConnection.setDefaultUseCaches(\"jar\", useCacheFirst);\n+                loader.loadClass(firstClass);\n+            } catch (ClassNotFoundException e) {\n+                System.err.println(\"EXCEPTION: \" + e);\n+            }\n@@ -118,5 +119,7 @@\n-        try {\n-            URLConnection.setDefaultUseCaches(\"jar\", useCacheSecond);\n-            loader.loadClass(secondClass);\n-        } catch (Exception e) {\n-            System.err.println(\"EXCEPTION: \" + e);\n+            \/\/ Attempt to load the second class\n+            try {\n+                URLConnection.setDefaultUseCaches(\"jar\", useCacheSecond);\n+                loader.loadClass(secondClass);\n+            } catch (ClassNotFoundException e) {\n+                System.err.println(\"EXCEPTION: \" + e);\n+            }\n@@ -124,0 +127,1 @@\n+            \/\/ Close the URLClassLoader to close its JarFiles\n@@ -125,3 +129,2 @@\n-            Files.delete(path);\n-        }\n-    }\n+            \/\/ Fails on Windows if the JarFile is still kept open\n+            Files.delete(jar);\n@@ -129,13 +132,1 @@\n-    private static Stream<Path> mkpath(String... args) {\n-        return Arrays.stream(args).map(d -> Paths.get(\".\", d.split(\"\/\")));\n-    }\n-\n-    private static void mkdir(String cmdline) {\n-        System.out.println(\"mkdir -p \" + cmdline);\n-        mkpath(cmdline.split(\" +\")).forEach(p -> {\n-            try {\n-                Files.createDirectories(p);\n-            } catch (IOException x) {\n-                throw new UncheckedIOException(x);\n-            }\n-        });\n+        }\n@@ -144,17 +135,15 @@\n-    private static void jar(String cmdline) throws IOException {\n-        System.out.println(\"jar \" + cmdline);\n-        baos.reset();\n-\n-        \/\/ the run method catches IOExceptions, we need to expose them\n-        ByteArrayOutputStream baes = new ByteArrayOutputStream();\n-        PrintStream err = new PrintStream(baes);\n-        PrintStream saveErr = System.err;\n-        System.setErr(err);\n-        int rc = JAR_TOOL.run(out, err, cmdline.split(\" +\"));\n-        System.setErr(saveErr);\n-        if (rc != 0) {\n-            String s = baes.toString();\n-            if (s.startsWith(\"java.util.zip.ZipException: duplicate entry: \")) {\n-                throw new ZipException(s);\n-            }\n-            throw new IOException(s);\n+    \/**\n+     * Create a JAR file containing the class file which is loaded by this test\n+     * @return the path to th JAR file\n+     *\n+     * @throws IOException if un unexpected error occurs\n+     *\/\n+    static Path createJar() throws IOException {\n+        Path jar = Path.of(\"testjar.jar\");\n+        try (var out = new BufferedOutputStream(Files.newOutputStream(jar));\n+             var jo = new JarOutputStream(out)) {\n+            jo.putNextEntry(new JarEntry(\"testpkg\/Test.class\"));\n+            \/\/ Produce a loadable class file\n+            byte[] classBytes = ClassFile.of()\n+                    .build(ClassDesc.of(\"testpkg.Test\"), cb -> {});\n+            jo.write(classBytes);\n@@ -162,0 +151,1 @@\n+        return jar;\n@@ -164,4 +154,12 @@\n-    \/* run javac <args> *\/\n-    private static void compile(String... args) {\n-        if (com.sun.tools.javac.Main.compile(args) != 0) {\n-            throw new RuntimeException(\"javac failed: args=\" + Arrays.toString(args));\n+    \/\/ Assert that JarFileFactory.fileCache and JarFileFactory.urlCache are empty\n+    private void assertEmptyJarFileCache() {\n+        try {\n+            Class<?> clazz = getClass().getClassLoader().loadClass(\"sun.net.www.protocol.jar.JarFileFactory\");\n+            for (var fieldName : Set.of(\"fileCache\", \"urlCache\")) {\n+                var field = clazz.getDeclaredField(fieldName);\n+                field.setAccessible(true);\n+                var map = (Map) field.get(null);\n+                assertEquals(0, map.size(), \"Expected empty cache map for field \" + fieldName);\n+            }\n+        } catch (ClassNotFoundException | IllegalAccessException | NoSuchFieldException e) {\n+            throw new RuntimeException(e);\n","filename":"test\/jdk\/java\/net\/URLClassLoader\/RemoveJar.java","additions":114,"deletions":116,"binary":false,"changes":230,"status":"modified"}]}