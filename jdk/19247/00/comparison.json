{"files":[{"patch":"@@ -0,0 +1,190 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331851\n+ * @summary confirm that Calendar.roll() works correctly with leap year calculations\n+ * @run junit CalendarLeapYearRollTest\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.util.Calendar;\n+import java.util.GregorianCalendar;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import static java.util.Calendar.APRIL;\n+import static java.util.Calendar.DATE;\n+import static java.util.Calendar.DAY_OF_MONTH;\n+import static java.util.Calendar.DAY_OF_WEEK;\n+import static java.util.Calendar.DAY_OF_WEEK_IN_MONTH;\n+import static java.util.Calendar.DAY_OF_YEAR;\n+import static java.util.Calendar.FEBRUARY;\n+import static java.util.Calendar.LONG;\n+import static java.util.Calendar.MARCH;\n+import static java.util.Calendar.MONTH;\n+import static java.util.Calendar.WEEK_OF_YEAR;\n+import static java.util.Calendar.YEAR;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class CalendarLeapYearRollTest {\n+\n+    \/**\n+     * 8331851 Calendar roll for leap year\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"calendarRollSource\")\n+    public void testRollLeapYear(String testName, int calendarDate, int calendarMonth, int calendarYear,\n+                                 int value, int calendarField, int expectedDate, int expectedMonth,\n+                                 int expectedYear) {\n+        Calendar calendar = new GregorianCalendar(calendarYear, calendarMonth, calendarDate);\n+        calendar.roll(calendarField, value);\n+        assertEquals(expectedDate, calendar.get(DATE), testName\n+                + \" Expected \" + expectedDate + \" of \" + expectedMonth + expectedYear + \" but got \" + calendar.getTime());\n+        assertEquals(expectedMonth, calendar.get(MONTH), testName\n+                + \" Expected \" + expectedMonth + \" but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+        assertEquals(expectedYear, calendar.get(YEAR), testName\n+                + \" Expected \" + expectedYear + \" but got \" + calendar.get(YEAR));\n+    }\n+\n+    \/**\n+     * 8331851 Calendar roll up\/down for leap year\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"calendarRollUpDownSource\")\n+    public void testRollUpDownLeapYear(String testName, int calendarDate, int calendarMonth, int calendarYear,\n+                                       int firstValue, int secondValue, int calendarField, int expectedDate,\n+                                       int expectedMonth, int expectedYear) {\n+        Calendar calendar = new GregorianCalendar(calendarYear, calendarMonth, calendarDate);\n+        calendar.roll(calendarField, firstValue);\n+        calendar.roll(calendarField, secondValue);\n+        assertEquals(expectedDate, calendar.get(DATE), testName\n+                + \" Expected \" + expectedDate + \" of \" + expectedMonth + expectedYear + \" but got \" + calendar.getTime());\n+        assertEquals(expectedMonth, calendar.get(MONTH), testName\n+                + \" Expected \" + expectedMonth + \" but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+        assertEquals(expectedYear, calendar.get(YEAR), testName\n+                + \" Expected \" + expectedYear + \" but got \" + calendar.get(YEAR));\n+    }\n+\n+    \/**\n+     * 8331851 Calendar roll boolean for leap year\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"calendarBooleanRollSource\")\n+    public void testBooleanRollLeapYear(String testName, int calendarDate, int calendarMonth, int calendarYear,\n+                                        boolean value, int calendarField, int expectedDate,\n+                                        int expectedMonth, int expectedYear) {\n+        Calendar calendar = new GregorianCalendar(calendarYear, calendarMonth, calendarDate);\n+        calendar.roll(calendarField, value);\n+        assertEquals(expectedDate, calendar.get(DATE), testName\n+                + \" Expected \" + expectedDate + \" of \" + expectedMonth + expectedYear + \" but got \" + calendar.getTime());\n+        assertEquals(expectedMonth, calendar.get(MONTH), testName\n+                + \" Expected \" + expectedMonth + \" but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+        assertEquals(expectedYear, calendar.get(YEAR), testName\n+                + \" Expected \" + expectedYear + \" but got \" + calendar.get(YEAR));\n+    }\n+\n+    \/**\n+     * 8331851 Calendar month and year roll for leap\/non-leap year\n+     *\/\n+    @Test\n+    public void testMonthYearRollUpDownNonLeapYear() {\n+        Calendar calendar = new GregorianCalendar(2024, FEBRUARY, 29);\n+        calendar.roll(MONTH, 1);\n+        calendar.roll(YEAR, -1);\n+        calendar.roll(MONTH, -1);\n+        assertEquals(28, calendar.get(DATE),\n+                \"testMonthYearRollUpDownNonLeapYear Expected 28th of February 2024 but got \" + calendar.getTime());\n+        assertEquals(FEBRUARY, calendar.get(MONTH),\n+                \"testMonthYearRollUpDownNonLeapYear Expected February but got \" + calendar.getDisplayName(MONTH, LONG, Locale.getDefault()));\n+        assertEquals(2023, calendar.get(YEAR),\n+                \"testMonthYearRollUpDownNonLeapYear Expected 2023 but got \" + calendar.get(YEAR));\n+    }\n+\n+    private static Stream<Arguments> calendarRollUpDownSource() {\n+        return Stream.of(\n+                Arguments.of(\"testMonthRollDownUpLeapYearReversed\", 31, MARCH, 2024, -1, 1, MONTH, 29, MARCH, 2024),\n+                Arguments.of(\"testMonthRollUpDownLeapYearReversed\", 29, FEBRUARY, 2024, 1, -1, MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testYearRollUpDownLeapYear\", 29, FEBRUARY, 2024, 1, -1, YEAR, 1, MARCH, 2024),\n+                Arguments.of(\"testFourYearRollUpDownLeapYear\", 29, FEBRUARY, 2024, 4, -4, YEAR, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfYearRollUpDownLeapYear\", 29, FEBRUARY, 2024, 365, -365, DAY_OF_YEAR, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDateRollUpDownLeapYear\", 29, FEBRUARY, 2024, 365, -365, DATE, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testWeekOfYearRollUpDownLeapYear\", 29, FEBRUARY, 2024, 52, -52, WEEK_OF_YEAR, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfMonthRollUpDownLeapYear\", 29, FEBRUARY, 2024, 31, -31, DAY_OF_MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfWeekInMonthRollUpDownLeapYear\", 29, FEBRUARY, 2024, 6, -6, DAY_OF_WEEK_IN_MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfWeekRollUpDownLeapYear\", 29, FEBRUARY, 2024, 6, -6, DAY_OF_WEEK, 29, FEBRUARY, 2024)\n+        );\n+    }\n+\n+    private static Stream<Arguments> calendarRollSource() {\n+        return Stream.of(\n+                Arguments.of(\"testMonthRollUpLeapYear\", 29, FEBRUARY, 2024, 1, MONTH, 29, MARCH, 2024),\n+                Arguments.of(\"testOneMonthRollDownLeapYear\", 31, MARCH, 2024, -1, MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testTwoMonthDownEndOfMonthLeapYear\", 30, APRIL, 2024, -2, MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testTwoMonthDownSameDateLeapYear\", 29, APRIL, 2024, -2, MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testFourYearRollUpLeapYear\", 29, FEBRUARY, 2024, 4, YEAR, 29, FEBRUARY, 2028),\n+                Arguments.of(\"testTwelveMonthRollDownLeapYear\", 29, FEBRUARY, 2024, 12, MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testYearRollUpLeapYear\", 29, FEBRUARY, 2024, 1, YEAR, 1, MARCH, 2025),\n+                Arguments.of(\"testYearRollDownLeapYear\", 29, FEBRUARY, 2024, -1, YEAR, 1, MARCH, 2023),\n+                Arguments.of(\"testDayOfYearRollDownLeapYear\", 29, FEBRUARY, 2024, -1, DAY_OF_YEAR, 28, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfYearRollUpLeapYear\", 29, FEBRUARY, 2024, 1, DAY_OF_YEAR, 1, MARCH, 2024),\n+                Arguments.of(\"testDateRollDownLeapYear\", 29, FEBRUARY, 2024, -1, DATE, 28, FEBRUARY, 2024),\n+                Arguments.of(\"testDateRollUpLeapYear\", 29, FEBRUARY, 2024, 1, DATE, 1, FEBRUARY, 2024),\n+                Arguments.of(\"testWeekOfYearRollUpLeapYear\", 29, FEBRUARY, 2024, 1, WEEK_OF_YEAR, 7, MARCH, 2024),\n+                Arguments.of(\"testWeekOfYearRollDownLeapYear\", 29, FEBRUARY, 2024, -1, WEEK_OF_YEAR, 22, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfMonthRollUpLeapYear\", 29, FEBRUARY, 2024, 1, DAY_OF_MONTH, 1, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfMonthRollDownLeapYear\", 29, FEBRUARY, 2024, -1, DAY_OF_MONTH, 28, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfWeekInMonthRollUpLeapYear\", 29, FEBRUARY, 2024, 1, DAY_OF_WEEK_IN_MONTH, 1, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfWeekInMonthRollDownLeapYear\", 29, FEBRUARY, 2024, -1, DAY_OF_WEEK_IN_MONTH, 22, FEBRUARY, 2024),\n+                Arguments.of(\"testDayOfWeekRollUpLeapYear\", 29, FEBRUARY, 2024, 1, DAY_OF_WEEK, 1, MARCH, 2024),\n+                Arguments.of(\"testDayOfWeekRollDownLeapYear\", 29, FEBRUARY, 2024, -1, DAY_OF_WEEK, 28, FEBRUARY, 2024)\n+        );\n+    }\n+\n+    private static Stream<Arguments> calendarBooleanRollSource() {\n+        return Stream.of(\n+                Arguments.of(\"testBooleanMonthRollDownLeapYear\", 31, MARCH, 2024, false, MONTH, 29, FEBRUARY, 2024),\n+                Arguments.of(\"testBooleanMonthRollUpLeapYear\", 29, FEBRUARY, 2024, true, MONTH, 29, MARCH, 2024),\n+                Arguments.of(\"testBooleanYearRollUpLeapYear\", 29, FEBRUARY, 2024, true, YEAR, 1, MARCH, 2025),\n+                Arguments.of(\"testBooleanYearRollDownLeapYear\", 29, FEBRUARY, 2024, false, YEAR, 1, MARCH, 2023),\n+                Arguments.of(\"testBooleanDayOfYearRollDownLeapYear\", 29, FEBRUARY, 2024, false, DAY_OF_YEAR, 28, FEBRUARY, 2024),\n+                Arguments.of(\"testBooleanDayOfYearRollUpLeapYear\", 29, FEBRUARY, 2024, true, DAY_OF_YEAR, 1, MARCH, 2024),\n+                Arguments.of(\"testBooleanDateRollDownLeapYear\", 29, FEBRUARY, 2024, false, DATE, 28, FEBRUARY, 2024),\n+                Arguments.of(\"testBooleanDateRollUpLeapYear\", 29, FEBRUARY, 2024, true, DATE, 1, FEBRUARY, 2024),\n+                Arguments.of(\"testBooleanWeekOfYearRollUpLeapYear\", 29, FEBRUARY, 2024, true, WEEK_OF_YEAR, 7, MARCH, 2024),\n+                Arguments.of(\"testBooleanWeekOfYearRollDownLeapYear\", 29, FEBRUARY, 2024, false, WEEK_OF_YEAR, 22, FEBRUARY, 2024),\n+                Arguments.of(\"testBooleanDayOfMonthRollUpLeapYear\", 29, FEBRUARY, 2024, true, DAY_OF_MONTH, 1, FEBRUARY, 2024),\n+                Arguments.of(\"testBooleanDayOfMonthRollDownLeapYear\", 29, FEBRUARY, 2024, false, DAY_OF_MONTH, 28, FEBRUARY, 2024),\n+                Arguments.of(\"testBooleanDayOfWeekInMonthRollUpLeapYear\", 29, FEBRUARY, 2024, true, DAY_OF_WEEK_IN_MONTH, 1, FEBRUARY, 2024),\n+                Arguments.of(\"testBooleanDayOfWeekInMonthRollDownLeapYear\", 29, FEBRUARY, 2024, false, DAY_OF_WEEK_IN_MONTH, 22, FEBRUARY, 2024),\n+                Arguments.of(\"testBooleanDayOfWeekRollUpLeapYear\", 29, FEBRUARY, 2024, true, DAY_OF_WEEK, 1, MARCH, 2024),\n+                Arguments.of(\"testBooleanDayOfWeekRollDownLeapYear\", 29, FEBRUARY, 2024, false, DAY_OF_WEEK, 28, FEBRUARY, 2024)\n+        );\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/util\/Calendar\/CalendarLeapYearRollTest.java","additions":190,"deletions":0,"binary":false,"changes":190,"status":"added"}]}