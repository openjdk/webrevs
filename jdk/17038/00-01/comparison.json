{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,11 +24,75 @@\n-import java.util.zip.*;\n-import java.io.File;\n-\n-public class Available\n-{\n-    public static void main (String argv[]) throws Exception {\n-        ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\"),\n-                                          \"input.jar\"));\n-        ZipEntry e = zf.getEntry(\"ReleaseInflater.java\");\n-        if (e.getSize() != zf.getInputStream(e).available()) {\n-            throw new Exception(\"wrong return value of available\");\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+\/*\n+ * @test\n+ * @bug 4401122\n+ * @run junit Available\n+ *\/\n+public class Available {\n+    \/\/ ZIP file produced by this test\n+    private Path zip = Path.of(\"available.zip\");\n+    \/\/ The number of uncompressed bytes to write to the ZIP entry\n+    private static final int EXPECTED_BYTES = 512;\n+\n+    \/**\n+     * Produce a ZIP file containing an entry with byte length\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void setUp() throws IOException {\n+        try (ZipOutputStream zo = new ZipOutputStream(Files.newOutputStream(zip))) {\n+            zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            zo.write(new byte[EXPECTED_BYTES]);\n+        }\n+    }\n+\n+    \/**\n+     * Clean up the ZIP file produced by this test\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * Check that the available() method overriden by the input stream returned by\n+     * ZipFile.getInputStream correctly returns the number of remaining uncompressed bytes\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void shouldReturnRemainingUncompressedBytes() throws IOException {\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            ZipEntry e = zf.getEntry(\"file.txt\");\n+            try (InputStream in = zf.getInputStream(e)) {\n+                \/\/ Initially, available() should return the full uncompressed size of the entry\n+                assertEquals(EXPECTED_BYTES, in.available(),\n+                        \"wrong initial return value of available\");\n+\n+                \/\/ Reading a few bytes should reduce the number of available bytes accordingly\n+                int bytesToRead = 10;\n+                in.read(new byte[bytesToRead]);\n+                assertEquals(EXPECTED_BYTES - bytesToRead, in.available());\n+\n+                \/\/ Reading all remaining bytes should reduce the number of available bytes to zero\n+                in.transferTo(OutputStream.nullOutputStream());\n+                assertEquals(0, in.available());\n+\n+                \/\/ available on a closed input stream should return zero\n+                in.close();\n+                assertEquals(0, in.available());\n+            }\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/Available.java","additions":76,"deletions":12,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+   @run junit CopyJar\n@@ -29,2 +30,15 @@\n-import java.io.*;\n-import java.util.zip.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n@@ -33,11 +47,53 @@\n-    public static void main(String args[]) throws Exception {\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"),\n-                                               \"input.jar\"))) {\n-            ZipEntry ze = zf.getEntry(\"ReleaseInflater.java\");\n-            ZipOutputStream zos = new ZipOutputStream(new ByteArrayOutputStream());\n-            InputStream in = zf.getInputStream(ze);\n-            byte[] b = new byte[128];\n-            int n;\n-            zos.putNextEntry(ze);\n-            while((n = in.read(b)) != -1) {\n-                zos.write(b, 0, n);\n+\n+    \/\/ ZIP file produced by this test\n+    private Path jar = Path.of(\"copy-jar.jar\");\n+\n+    \/**\n+     * Create a sample ZIP file used by this test\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void setUp() throws IOException {\n+        try (JarOutputStream jo = new JarOutputStream(Files.newOutputStream(jar), new Manifest())) {\n+            jo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            jo.write(\"helloworld\".getBytes(StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    \/**\n+     * Clean up the ZIP file produced by this test\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(jar);\n+    }\n+\n+    \/**\n+     * Check that a ZipEntry read by ZipFile.getEntry does not produce\n+     * a CRC value inconsistent with the CRC computed when the entry\n+     * and its content is copied over to a ZipOutputStream\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void copyingZipEntryShouldFailCRCValidation() throws IOException {\n+        try (ZipFile zf = new ZipFile(jar.toFile())) {\n+            ZipEntry ze = zf.getEntry(\"file.txt\");\n+\n+            try (ZipOutputStream zos = new ZipOutputStream(OutputStream.nullOutputStream());\n+                 InputStream in = zf.getInputStream(ze)) {\n+                \/* The original bug mentions that ZipEntry\n+                 * 'loses the correct CRC value read from the CEN directory'.\n+                 * Enable the code below to trigger a ZipException similar to the bug description\n+                 *\/\n+                if (false) {\n+                    \/\/ Reset the CRC, as if a zero value was read from a streaming mode LOC header\n+                    ze.setCrc(0);\n+                    \/\/ Required to set ZipEntry.csizeSet = true\n+                    ze.setCompressedSize(ze.getCompressedSize());\n+                }\n+                zos.putNextEntry(ze);\n+                in.transferTo(zos);\n@@ -45,1 +101,0 @@\n-            zos.close();\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/CopyJar.java","additions":70,"deletions":15,"binary":false,"changes":85,"status":"modified"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 4290060\n-   @summary Check if the zip file is closed before access any\n-            elements in the Enumeration.\n- *\/\n-\n-import java.io.*;\n-import java.util.zip.*;\n-import java.util.Enumeration;\n-\n-public class EnumAfterClose {\n-    public static void main(String args[]) throws Exception {\n-        Enumeration e;\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"),\n-                                               \"input.zip\"))) {\n-            e = zf.entries();\n-        }\n-        \/\/ ensure that the ZipFile is closed before checking the Enumeration\n-        try {\n-            if (e.hasMoreElements()) {\n-                ZipEntry ze = (ZipEntry)e.nextElement();\n-            }\n-        } catch (IllegalStateException ie) {\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/EnumAfterClose.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4290060\n+   @summary Check if the zip file is closed before access any\n+            elements in the Enumeration.\n+   @run junit EnumerateAfterClose\n+ *\/\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Enumeration;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class EnumerateAfterClose {\n+\n+    \/\/ ZIP file used in this test\n+    private Path zip = Path.of(\"enum-after-close.zip\");\n+\n+    \/**\n+     * Create a sample ZIP file for use by this test\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void setUp() throws IOException {\n+        try (OutputStream out = Files.newOutputStream(zip);\n+             ZipOutputStream zo = new ZipOutputStream(out)) {\n+            zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    \/**\n+     * Delete the ZIP file produced by this test\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * Attempting to using a ZipEntry Enumeration after its backing\n+     * ZipFile is closed should throw IllegalStateException.\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void enumeratingAfterCloseShouldThrowISE() throws IOException {\n+        \/\/ Retain a reference to an enumeration backed by a closed ZipFile\n+        Enumeration e;\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            e = zf.entries();\n+        }\n+        \/\/ Using the enumeration after the ZipFile is closed should throw ISE\n+        assertThrows(IllegalStateException.class, () -> {\n+            if (e.hasMoreElements()) {\n+                ZipEntry ze = (ZipEntry)e.nextElement();\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/EnumerateAfterClose.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+   @run junit FinalizeInflater\n@@ -29,2 +30,4 @@\n-import java.io.File;\n-import java.io.InputStream;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n@@ -32,0 +35,5 @@\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -34,0 +42,1 @@\n+import java.util.zip.ZipOutputStream;\n@@ -37,4 +46,39 @@\n-    public static void main(String[] args) throws Throwable {\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"), \"input.zip\")))\n-        {\n-            ZipEntry ze = zf.getEntry(\"ReadZip.java\");\n+    \/\/ ZIP file produced by this test\n+    private Path zip = Path.of(\"finalize-inflater.zip\");\n+\n+    \/**\n+     * Create the sample ZIP used in this test\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void setUp() throws IOException {\n+        try (OutputStream out = Files.newOutputStream(zip);\n+             ZipOutputStream zo = new ZipOutputStream(out)) {\n+            zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            byte[] hello = \"hello\".getBytes(StandardCharsets.UTF_8);\n+            for (int i = 0; i < 100; i++) {\n+                zo.write(hello);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Delete the ZIP file produced by this test\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * A cached Inflater should not be made invalid by finalization\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void shouldNotFinalizeInflaterInPool() throws IOException {\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            ZipEntry ze = zf.getEntry(\"file.txt\");\n@@ -54,6 +98,1 @@\n-        byte[] buffer = new byte[32];\n-        try {\n-            while(is.read(buffer)>0){}\n-        } catch (IOException ioe) {\n-            ioe.printStackTrace();\n-        }\n+        is.readAllBytes();\n@@ -62,1 +101,1 @@\n-    static class Wrapper{\n+    static class Wrapper {\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/FinalizeInflater.java","additions":53,"deletions":14,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+   @run junit GetDirEntry\n@@ -30,2 +31,13 @@\n-import java.io.*;\n-import java.util.zip.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n@@ -34,3 +46,37 @@\n-    public static void main(String args[]) throws Exception {\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"),\n-                                               \"input.jar\"))) {\n+\n+    \/\/ ZIP file produced in this test\n+    private Path zip = Path.of(\"directory-entry.zip\");\n+\n+    \/**\n+     * Create a sample ZIP file containing a directory entry\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void setUp() throws IOException {\n+        try (ZipOutputStream zo = new ZipOutputStream(Files.newOutputStream(zip))) {\n+            ZipEntry e = new ZipEntry(\"META-INF\/\");\n+            e.setMethod(ZipEntry.STORED);\n+            e.setSize(0);\n+            e.setCrc(0);\n+            zo.putNextEntry(e);\n+        }\n+    }\n+\n+    \/**\n+     * Delete the ZIP file produced by this test\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * Verify that the a directory entry like 'META-INF\/' can also be looked\n+     * up using just 'META-INF', that is without the trailing '\/'\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void lookupDirectoryEntryWithoutTrailingSlash() throws IOException {\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            \/\/ Look up 'META-INF\/' using just 'META-INF'\n@@ -38,3 +84,6 @@\n-            if (ze == null) {\n-                throw new Exception(\"failed to find a directory entry\");\n-            }\n+            assertNotNull(ze, \"failed to find a directory entry\");\n+            assertEquals(\"META-INF\/\", ze.getName());\n+            \/\/ Sanity check that 'META-INF\/' can be found\n+            ze = zf.getEntry(\"META-INF\/\");\n+            assertNotNull(ze, \"failed to find a directory entry\");\n+            assertEquals(\"META-INF\/\", ze.getName());\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/GetDirEntry.java","additions":58,"deletions":9,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -51,5 +51,2 @@\n-    \/\/ Binary test vector ZIP used by various tests\n-    private Path inputZip = Path.of(System.getProperty(\"test.src\", \".\"))\n-            .resolve(\"input.zip\");\n-    \/\/ Output file produced during tests\n-    private Path outputZip = Path.of(\"output.zip\");\n+    \/\/ ZIP file produced during tests\n+    private Path zip = Path.of(\"read-zip.zip\");\n@@ -58,1 +55,28 @@\n-     * Make sure we throw NPE calling getEntry or getInputStream with null params\n+     * Create a sample ZIP file for use by tests\n+     * @param name name of the ZIP file to create\n+     * @return a sample ZIP file\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    private Path createZip(String name) throws IOException {\n+        Path zip = Path.of(name);\n+\n+        try (OutputStream out = Files.newOutputStream(zip);\n+             ZipOutputStream zo = new ZipOutputStream(out)) {\n+            zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        return zip;\n+    }\n+\n+    \/**\n+     * Delete the ZIP file produced after each test method\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * Make sure we throw NPE when calling getEntry or getInputStream with null params\n@@ -64,1 +88,2 @@\n-        try (ZipFile zf = new ZipFile(inputZip.toFile())) {\n+        zip = createZip(\"null-params.zip\");\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n@@ -70,1 +95,1 @@\n-            ZipEntry ze = zf.getEntry(\"ReadZip.java\");\n+            ZipEntry ze = zf.getEntry(\"file.txt\");\n@@ -76,1 +101,1 @@\n-     * Read the zip file that has some garbage bytes padded at the end.\n+     * Read the zip file that has some garbage bytes padded at the end\n@@ -82,3 +107,1 @@\n-        Files.copy(inputZip, outputZip, StandardCopyOption.REPLACE_EXISTING);\n-\n-        outputZip.toFile().setWritable(true);\n+        zip = createZip(\"bytes-padded.zip\");\n@@ -87,1 +110,1 @@\n-        try (OutputStream os = Files.newOutputStream(outputZip,\n+        try (OutputStream os = Files.newOutputStream(zip,\n@@ -95,2 +118,2 @@\n-        try (ZipFile zf = new ZipFile(outputZip.toFile())) {\n-            ZipEntry ze = zf.getEntry(\"ReadZip.java\");\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            ZipEntry ze = zf.getEntry(\"file.txt\");\n@@ -102,1 +125,2 @@\n-     * Read a comment from the ZIP file's 'End of Central Directory' header\n+     * Verify that we can read a comment from the ZIP\n+     * file's 'End of Central Directory' header\n@@ -108,2 +132,2 @@\n-        \/\/ Create a zip file with an entry including a comment\n-        try (OutputStream out = Files.newOutputStream(outputZip);\n+        \/\/ Create a zip file with a comment in the 'End of Central Directory' header\n+        try (OutputStream out = Files.newOutputStream(zip);\n@@ -122,1 +146,1 @@\n-        try (ZipFile zf = new ZipFile(outputZip.toFile())) {\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n@@ -138,1 +162,2 @@\n-        try (OutputStream fos = Files.newOutputStream(outputZip);\n+        \/\/ Create a ZIP containing a directory entry\n+        try (OutputStream fos = Files.newOutputStream(zip);\n@@ -145,1 +170,1 @@\n-        try (ZipFile zf = new ZipFile(outputZip.toFile())) {\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n@@ -186,1 +211,1 @@\n-        URI uri = URI.create(\"jar:\" + outputZip.toUri());\n+        URI uri = URI.create(\"jar:\" + zip.toUri());\n@@ -192,1 +217,1 @@\n-        try (ZipFile zf = new ZipFile(outputZip.toFile())) {\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n@@ -216,1 +241,1 @@\n-        Process zip = new ProcessBuilder(\"zip\", outputZip.toString(), \"-\").start();\n+        Process zip = new ProcessBuilder(\"zip\", this.zip.toString(), \"-\").start();\n@@ -221,2 +246,2 @@\n-        if (zip.exitValue() == 0 && Files.exists(outputZip)) {\n-            try (ZipFile zf = new ZipFile(outputZip.toFile())) {\n+        if (zip.exitValue() == 0 && Files.exists(this.zip)) {\n+            try (ZipFile zf = new ZipFile(this.zip.toFile())) {\n@@ -231,7 +256,0 @@\n-    \/*\n-     * Delete the ZIP file produced after each test method\n-     *\/\n-    @AfterEach\n-    public void cleanup() throws IOException {\n-        Files.deleteIfExists(outputZip);\n-    }\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ReadZip.java","additions":51,"deletions":33,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit ReleaseInflater\n@@ -30,2 +31,14 @@\n-import java.io.*;\n-import java.util.zip.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,4 +48,35 @@\n-    public static void main(String[] args) throws Exception {\n-        ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\"),\n-                                          \"input.jar\"));\n-        ZipEntry e = zf.getEntry(\"ReleaseInflater.java\");\n+    \/\/ ZIP file produced in this test\n+    private Path zip = Path.of(\"release-inflater.zip\");\n+\n+    \/**\n+     * Create a sample ZIP file for use by tests\n+     * @param name name of the ZIP file to create\n+     * @return a sample ZIP file\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void setUp() throws IOException {\n+        try (ZipOutputStream zo = new ZipOutputStream(Files.newOutputStream(zip))) {\n+            zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            zo.write(\"helloworld\".getBytes(StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    \/**\n+     * Delete the ZIP and JAR files produced after each test method\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * Verify that the same Inflater is not recycled across input streams\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void recycleInflaterOnlyOnce() throws IOException {\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            ZipEntry e = zf.getEntry(\"file.txt\");\n@@ -40,5 +84,5 @@\n-        InputStream in1 = zf.getInputStream(e);\n-        \/\/ close the stream, the inflater will be released\n-        in1.close();\n-        \/\/ close the stream again, should be no-op\n-        in1.close();\n+            InputStream in1 = zf.getInputStream(e);\n+            \/\/ close the stream, the inflater will be released\n+            in1.close();\n+            \/\/ close the stream again, should be no-op\n+            in1.close();\n@@ -46,3 +90,3 @@\n-        \/\/ create two new streams, allocating inflaters\n-        InputStream in2 = zf.getInputStream(e);\n-        InputStream in3 = zf.getInputStream(e);\n+            \/\/ create two new streams, allocating inflaters\n+            InputStream in2 = zf.getInputStream(e);\n+            InputStream in3 = zf.getInputStream(e);\n@@ -50,3 +94,2 @@\n-        \/\/ check to see if they influence each other\n-        if (in2.read() != in3.read()) {\n-            throw new Exception(\"Stream is corrupted!\");\n+            \/\/ check to see if they influence each other\n+            assertEquals(in2.read(), in3.read(), \"Stream is corrupted!\");\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ReleaseInflater.java","additions":61,"deletions":18,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @run testng StreamZipEntriesTest\n+ * @run junit StreamZipEntriesTest\n@@ -30,1 +30,4 @@\n-import java.io.File;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n@@ -32,3 +35,6 @@\n-import java.lang.Object;\n-import java.lang.System;\n-import java.util.jar.JarFile;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -36,0 +42,3 @@\n+import java.util.jar.JarFile;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n@@ -39,0 +48,1 @@\n+import java.util.zip.ZipOutputStream;\n@@ -40,1 +50,1 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -42,3 +52,0 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n@@ -48,0 +55,50 @@\n+    \/\/ ZIP file produced in this test\n+    private Path zip = Path.of(\"stream.zip\");\n+    \/\/ JAR file produced in this test\n+    private Path jar = Path.of(\"stream.jar\");\n+\n+    \/**\n+     * Create sample ZIP and JAR files used in in this test\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void setUp() throws IOException {\n+\n+        try (OutputStream out = Files.newOutputStream(zip);\n+             ZipOutputStream zo = new ZipOutputStream(out)) {\n+            zo.putNextEntry(new ZipEntry(\"entry1.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+            zo.putNextEntry(new ZipEntry(\"entry2.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        try (OutputStream out = Files.newOutputStream(jar);\n+             ZipOutputStream zo = new ZipOutputStream(out)) {\n+            \/\/ A JAR file may start with a META-INF\/ directory before the manifest\n+            zo.putNextEntry(new ZipEntry(\"META-INF\/\"));\n+            \/\/ Write the manifest\n+            zo.putNextEntry(new ZipEntry(\"META-INF\/MANIFEST.MF\"));\n+            new Manifest().write(zo);\n+\n+            \/\/ Write two regular entries\n+            zo.putNextEntry(new ZipEntry(\"entry1.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+            zo.putNextEntry(new ZipEntry(\"entry2.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    \/**\n+     * Delete the ZIP file produced after each test method\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+        Files.deleteIfExists(jar);\n+    }\n+\n+    \/**\n+     * Verify that ZipFile.stream() produces the expected entries\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n@@ -50,3 +107,13 @@\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"), \"input.zip\"))) {\n-            zf.stream().forEach(e -> assertTrue(e instanceof ZipEntry));\n-            zf.stream().forEach(e -> assertEquals(e.toString(), \"ReadZip.java\"));\n+        Set<String> names = new HashSet<>(Set.of(\"entry1.txt\", \"entry2.txt\"));\n+\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            zf.stream().forEach(e -> {\n+                assertTrue(e instanceof ZipEntry);\n+                String name = e.getName();\n+                assertNotNull(names.remove(name));\n+                String toString = e.toString();\n+                assertEquals(name, toString);\n+            });\n+\n+            \/\/ Check that all expected names were processed\n+            assertTrue(names.isEmpty());\n@@ -54,0 +121,1 @@\n+            \/\/ Check that Stream.toArray produces the expected result\n@@ -55,2 +123,3 @@\n-            assertEquals(1, elements.length);\n-            assertEquals(elements[0].toString(), \"ReadZip.java\");\n+            assertEquals(2, elements.length);\n+            assertEquals(elements[0].toString(), \"entry1.txt\");\n+            assertEquals(elements[1].toString(), \"entry2.txt\");\n@@ -60,0 +129,4 @@\n+    \/**\n+     * Verify that JarFile.stream() produces the expected entries\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n@@ -62,2 +135,7 @@\n-        try (JarFile jf = new JarFile(new File(System.getProperty(\"test.src\", \".\"), \"input.jar\"))) {\n-            jf.stream().forEach(e -> assertTrue(e instanceof JarEntry));\n+        try (JarFile jf = new JarFile(jar.toFile())) {\n+            Set<String> names = new HashSet<>(Set.of(\n+                    \"META-INF\/\",\n+                    \"META-INF\/MANIFEST.MF\",\n+                    \"entry1.txt\",\n+                    \"entry2.txt\"\n+            ));\n@@ -65,0 +143,14 @@\n+            jf.stream().forEach(e -> {\n+                        assertTrue(e instanceof JarEntry);\n+                        String name = e.getName();\n+                        assertNotNull(names.remove(name));\n+                        String toString = e.toString();\n+                        assertEquals(name, toString);\n+                    }\n+            );\n+\n+            \/\/ Check that all expected names were processed\n+            assertTrue(names.isEmpty(), \"Unprocessed entries: \" + names);\n+\n+\n+            \/\/ Check that Stream.toArray produces the expected result\n@@ -66,1 +158,1 @@\n-            assertEquals(3, elements.length);\n+            assertEquals(4, elements.length);\n@@ -69,1 +161,2 @@\n-            assertEquals(elements[2].toString(), \"ReleaseInflater.java\");\n+            assertEquals(elements[2].toString(), \"entry1.txt\");\n+            assertEquals(elements[3].toString(), \"entry2.txt\");\n@@ -73,0 +166,4 @@\n+    \/**\n+     * Calling ZipFile.stream() on a closed ZipFile should throw ISE\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n@@ -75,1 +172,1 @@\n-        ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"), \"input.zip\"));\n+        ZipFile zf = new ZipFile(zip.toFile());\n@@ -77,1 +174,1 @@\n-        try {\n+        assertThrows(IllegalStateException.class, () -> {\n@@ -79,4 +176,1 @@\n-            fail(\"Should have thrown IllegalStateException\");\n-        } catch (IllegalStateException e) {\n-            \/\/ expected;\n-        }\n+        });\n@@ -85,0 +179,4 @@\n+    \/**\n+     * Calling JarFile.stream() on a closed JarFile should throw ISE\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n@@ -87,1 +185,1 @@\n-        JarFile jf = new JarFile(new File(System.getProperty(\"test.src\", \".\"), \"input.jar\"));\n+        JarFile jf = new JarFile(jar.toFile());\n@@ -89,1 +187,1 @@\n-        try {\n+        assertThrows(IllegalStateException.class, () -> {\n@@ -91,4 +189,1 @@\n-            fail(\"Should have thrown IllegalStateException\");\n-        } catch (IllegalStateException e) {\n-            \/\/ expected;\n-        }\n+        });\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/StreamZipEntriesTest.java","additions":126,"deletions":31,"binary":false,"changes":157,"status":"modified"},{"filename":"test\/jdk\/java\/util\/zip\/ZipFile\/input.jar","binary":true,"status":"deleted"},{"filename":"test\/jdk\/java\/util\/zip\/ZipFile\/input.zip","binary":true,"status":"deleted"}]}