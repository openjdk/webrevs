{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-   @key randomness\n@@ -29,0 +28,1 @@\n+   @run junit ReadZip\n@@ -31,1 +31,7 @@\n-import java.io.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n@@ -33,9 +39,2 @@\n-import java.nio.file.Files;\n-import java.nio.file.FileSystem;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.NoSuchFileException;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n-import java.util.List;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.*;\n@@ -43,1 +42,3 @@\n-import java.util.zip.*;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n@@ -46,0 +47,1 @@\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -48,16 +50,0 @@\n-    private static void unreached (Object o)\n-        throws Exception\n-    {\n-        \/\/ Should never get here\n-        throw new Exception (\"Expected exception was not thrown\");\n-    }\n-\n-    public static void main(String args[]) throws Exception {\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"),\n-                                               \"input.zip\"))) {\n-            \/\/ Make sure we throw NPE on null objects\n-            try { unreached (zf.getEntry(null)); }\n-            catch (NullPointerException e) {}\n-\n-            try { unreached (zf.getInputStream(null)); }\n-            catch (NullPointerException e) {}\n@@ -65,0 +51,19 @@\n+    \/\/ Binary test vector ZIP used by various tests\n+    private Path inputZip = Path.of(System.getProperty(\"test.src\", \".\"))\n+            .resolve(\"input.zip\");\n+    \/\/ Output file produced during tests\n+    private Path outputZip = Path.of(\"output.zip\");\n+\n+    \/**\n+     * Make sure we throw NPE calling getEntry or getInputStream with null params\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void nullPointerExceptionOnNullParams() throws IOException {\n+        try (ZipFile zf = new ZipFile(inputZip.toFile())) {\n+\n+            assertThrows(NullPointerException.class, () -> zf.getEntry(null));\n+            assertThrows(NullPointerException.class, () -> zf.getInputStream(null));\n+\n+            \/\/ Sanity check that we can still read an entry\n@@ -66,3 +71,1 @@\n-            if (ze == null) {\n-                throw new Exception(\"cannot read from zip file\");\n-            }\n+            assertNotNull(ze, \"cannot read from zip file\");\n@@ -70,0 +73,1 @@\n+    }\n@@ -71,5 +75,6 @@\n-        \/\/ Make sure we can read the zip file that has some garbage\n-        \/\/ bytes padded at the end.\n-        File newZip = new File(System.getProperty(\"test.dir\", \".\"), \"input2.zip\");\n-        Files.copy(Paths.get(System.getProperty(\"test.src\", \"\"), \"input.zip\"),\n-                   newZip.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+    \/**\n+     * Read the zip file that has some garbage bytes padded at the end.\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void bytesPaddedAtEnd() throws IOException {\n@@ -77,1 +82,3 @@\n-        newZip.setWritable(true);\n+        Files.copy(inputZip, outputZip, StandardCopyOption.REPLACE_EXISTING);\n+\n+        outputZip.toFile().setWritable(true);\n@@ -80,3 +87,6 @@\n-        try (OutputStream os = Files.newOutputStream(newZip.toPath(),\n-                                                     StandardOpenOption.APPEND)) {\n-            os.write(1); os.write(3); os.write(5); os.write(7);\n+        try (OutputStream os = Files.newOutputStream(outputZip,\n+                StandardOpenOption.APPEND)) {\n+            os.write(1);\n+            os.write(3);\n+            os.write(5);\n+            os.write(7);\n@@ -85,1 +95,1 @@\n-        try (ZipFile zf = new ZipFile(newZip)) {\n+        try (ZipFile zf = new ZipFile(outputZip.toFile())) {\n@@ -87,5 +97,22 @@\n-            if (ze == null) {\n-                throw new Exception(\"cannot read from zip file\");\n-            }\n-        } finally {\n-            newZip.delete();\n+            assertNotNull(ze, \"cannot read from zip file\");\n+        }\n+    }\n+\n+    \/**\n+     * Read a comment from the ZIP file's 'End of Central Directory' header\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void readZipFileComment() throws IOException {\n+\n+        \/\/ Create a zip file with an entry including a comment\n+        try (OutputStream out = Files.newOutputStream(outputZip);\n+             ZipOutputStream zos = new ZipOutputStream(out)) {\n+            ZipEntry ze = new ZipEntry(\"ZipEntry\");\n+            zos.putNextEntry(ze);\n+            zos.write(1);\n+            zos.write(2);\n+            zos.write(3);\n+            zos.write(4);\n+            zos.closeEntry();\n+            zos.setComment(\"This is the comment for testing\");\n@@ -95,10 +122,6 @@\n-        try {\n-            try (FileOutputStream fos = new FileOutputStream(newZip);\n-                 ZipOutputStream zos = new ZipOutputStream(fos))\n-            {\n-                ZipEntry ze = new ZipEntry(\"ZipEntry\");\n-                zos.putNextEntry(ze);\n-                zos.write(1); zos.write(2); zos.write(3); zos.write(4);\n-                zos.closeEntry();\n-                zos.setComment(\"This is the comment for testing\");\n-            }\n+        try (ZipFile zf = new ZipFile(outputZip.toFile())) {\n+            ZipEntry ze = zf.getEntry(\"ZipEntry\");\n+            assertNotNull(ze, \"cannot read entry from zip file\");\n+            assertEquals(\"This is the comment for testing\", zf.getComment());\n+        }\n+    }\n@@ -106,9 +129,14 @@\n-            try (ZipFile zf = new ZipFile(newZip)) {\n-                ZipEntry ze = zf.getEntry(\"ZipEntry\");\n-                if (ze == null)\n-                    throw new Exception(\"cannot read entry from zip file\");\n-                if (!\"This is the comment for testing\".equals(zf.getComment()))\n-                    throw new Exception(\"cannot read comment from zip file\");\n-            }\n-        } finally {\n-            newZip.delete();\n+    \/**\n+     * Verify that a directory entry can be found using the\n+     * name 'directory\/' as well as 'directory\/'\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void readDirectoryEntry() throws IOException {\n+\n+        try (OutputStream fos = Files.newOutputStream(outputZip);\n+             ZipOutputStream zos = new ZipOutputStream(fos)) {\n+            ZipEntry ze = new ZipEntry(\"directory\/\");\n+            zos.putNextEntry(ze);\n+            zos.closeEntry();\n@@ -117,8 +145,9 @@\n-        \/\/ Read directory entry\n-        try {\n-            try (FileOutputStream fos = new FileOutputStream(newZip);\n-                 ZipOutputStream zos = new ZipOutputStream(fos))\n-            {\n-                ZipEntry ze = new ZipEntry(\"directory\/\");\n-                zos.putNextEntry(ze);\n-                zos.closeEntry();\n+        try (ZipFile zf = new ZipFile(outputZip.toFile())) {\n+            ZipEntry ze = zf.getEntry(\"directory\/\");\n+            assertNotNull(ze, \"read entry \\\"directory\/\\\" failed\");\n+            assertTrue(ze.isDirectory(), \"read entry \\\"directory\/\\\" failed\");\n+\n+            try (InputStream is = zf.getInputStream(ze)) {\n+                is.available();\n+            } catch (Exception x) {\n+                x.printStackTrace();\n@@ -126,9 +155,0 @@\n-            try (ZipFile zf = new ZipFile(newZip)) {\n-                ZipEntry ze = zf.getEntry(\"directory\/\");\n-                if (ze == null || !ze.isDirectory())\n-                    throw new RuntimeException(\"read entry \\\"directory\/\\\" failed\");\n-                try (InputStream is = zf.getInputStream(ze)) {\n-                    is.available();\n-                } catch (Exception x) {\n-                    x.printStackTrace();\n-                }\n@@ -136,8 +156,7 @@\n-                ze = zf.getEntry(\"directory\");\n-                if (ze == null || !ze.isDirectory())\n-                    throw new RuntimeException(\"read entry \\\"directory\\\" failed\");\n-                try (InputStream is = zf.getInputStream(ze)) {\n-                    is.available();\n-                } catch (Exception x) {\n-                    x.printStackTrace();\n-                }\n+            ze = zf.getEntry(\"directory\");\n+            assertNotNull(ze, \"read entry \\\"directory\\\" failed\");\n+            assertTrue(ze.isDirectory(), \"read entry \\\"directory\\\" failed\");\n+            try (InputStream is = zf.getInputStream(ze)) {\n+                is.available();\n+            } catch (Exception x) {\n+                x.printStackTrace();\n@@ -145,2 +164,0 @@\n-        } finally {\n-            newZip.delete();\n@@ -148,0 +165,1 @@\n+    }\n@@ -149,29 +167,28 @@\n-        \/\/ Throw a FNF exception when read a non-existing zip file\n-        try { unreached (new ZipFile(\n-                             new File(System.getProperty(\"test.src\", \".\"),\n-                                     \"input\"\n-                                      + String.valueOf(new java.util.Random().nextInt())\n-                                      + \".zip\")));\n-        } catch (NoSuchFileException nsfe) {}\n-\n-        \/\/ read a zip file with ZIP64 end\n-        Path path = Paths.get(System.getProperty(\"test.dir\", \"\"), \"end64.zip\");\n-        try {\n-            URI uri = URI.create(\"jar:\" + path.toUri());\n-            Map<String, Object> env = Map.of(\"create\", \"true\", \"forceZIP64End\", \"true\");\n-            try (FileSystem fs = FileSystems.newFileSystem(uri, env)) {\n-                Files.write(fs.getPath(\"hello\"), \"hello\".getBytes());\n-            }\n-            try (ZipFile zf = new ZipFile(path.toFile())) {\n-                if (!\"hello\".equals(new String(zf.getInputStream(new ZipEntry(\"hello\"))\n-                                               .readAllBytes(),\n-                                               US_ASCII)))\n-                    throw new RuntimeException(\"zipfile: read entry failed\");\n-            } catch (IOException x) {\n-                throw new RuntimeException(\"zipfile: zip64 end failed\");\n-            }\n-            try (FileSystem fs = FileSystems.newFileSystem(uri, Map.of())) {\n-                if (!\"hello\".equals(new String(Files.readAllBytes(fs.getPath(\"hello\")))))\n-                    throw new RuntimeException(\"zipfs: read entry failed\");\n-            } catch (IOException x) {\n-                throw new RuntimeException(\"zipfile: zip64 end failed\");\n+    \/**\n+     * Throw a NoSuchFileException exception when reading a non-existing zip file\n+     *\/\n+    @Test\n+    public void nonExistingFile() {\n+        File nonExistingFile = new File(\"non-existing-file-f6804460f.zip\");\n+        assertThrows(NoSuchFileException.class, () ->\n+                new ZipFile(nonExistingFile));\n+    }\n+\n+    \/**\n+     * Read a Zip file with a 'Zip64 End of Central Directory header' which was created\n+     * using ZipFileSystem with the 'forceZIP64End' option.\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void readZip64EndZipFs() throws IOException {\n+\n+        \/\/ Create zip file with Zip64 end\n+        URI uri = URI.create(\"jar:\" + outputZip.toUri());\n+        Map<String, Object> env = Map.of(\"create\", \"true\", \"forceZIP64End\", \"true\");\n+        try (FileSystem fs = FileSystems.newFileSystem(uri, env)) {\n+            Files.write(fs.getPath(\"hello\"), \"hello\".getBytes());\n+        }\n+        \/\/ Read using ZipFile\n+        try (ZipFile zf = new ZipFile(outputZip.toFile())) {\n+            try (InputStream in = zf.getInputStream(zf.getEntry(\"hello\"))) {\n+                assertEquals(\"hello\", new String(in.readAllBytes(), StandardCharsets.US_ASCII));\n@@ -179,2 +196,0 @@\n-        } finally {\n-            Files.deleteIfExists(path);\n@@ -182,0 +197,5 @@\n+        \/\/ Read using ZipFileSystem\n+        try (FileSystem fs = FileSystems.newFileSystem(uri, Map.of())) {\n+            assertEquals(\"hello\", new String(Files.readAllBytes(fs.getPath(\"hello\"))));\n+        }\n+    }\n@@ -183,3 +203,10 @@\n-        \/\/ read a zip file created via \"echo hello | zip dst.zip -\", which uses\n-        \/\/ ZIP64 end record\n-        if (Files.notExists(Paths.get(\"\/usr\/bin\/zip\")))\n+    \/**\n+     * Read a zip file created via \"echo hello | zip dst.zip -\",\n+     * which includes a 'Zip64 End of Central Directory header'\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     * @throws InterruptedException if an unexpected InterruptedException occurs\n+     *\/\n+    @Test\n+    public void readZip64EndZipProcess() throws IOException, InterruptedException {\n+        if (Files.notExists(Paths.get(\"\/usr\/bin\/zip\"))) {\n@@ -187,13 +214,12 @@\n-        try {\n-            Process zip = new ProcessBuilder(\"zip\", path.toString().toString(), \"-\").start();\n-            OutputStream os = zip.getOutputStream();\n-            os.write(\"hello\".getBytes(US_ASCII));\n-            os.close();\n-            zip.waitFor();\n-            if (zip.exitValue() == 0 && Files.exists(path)) {\n-                try (ZipFile zf = new ZipFile(path.toFile())) {\n-                    if (!\"hello\".equals(new String(zf.getInputStream(new ZipEntry(\"-\"))\n-                                                       .readAllBytes())))\n-                        throw new RuntimeException(\"zipfile: read entry failed\");\n-                } catch (IOException x) {\n-                    throw new RuntimeException(\"zipfile: zip64 end failed\");\n+        }\n+\n+        Process zip = new ProcessBuilder(\"zip\", outputZip.toString(), \"-\").start();\n+        OutputStream os = zip.getOutputStream();\n+        os.write(\"hello\".getBytes(US_ASCII));\n+        os.close();\n+        zip.waitFor();\n+        if (zip.exitValue() == 0 && Files.exists(outputZip)) {\n+            try (ZipFile zf = new ZipFile(outputZip.toFile())) {\n+                try (InputStream in = zf.getInputStream(zf.getEntry(\"-\"))) {\n+                    String contents = new String(in.readAllBytes(), StandardCharsets.US_ASCII);\n+                    assertEquals(\"hello\", contents);\n@@ -202,2 +228,0 @@\n-        } finally {\n-            Files.deleteIfExists(path);\n@@ -206,0 +230,8 @@\n+\n+    \/*\n+     * Delete the ZIP file produced after each test method\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(outputZip);\n+    }\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ReadZip.java","additions":174,"deletions":142,"binary":false,"changes":316,"status":"modified"}]}