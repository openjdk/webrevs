{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-   @bug 4241361 4842702 4985614 6646605 5032358 6923692 6233323 8144977 8186464 4401122\n+   @bug 4241361 4842702 4985614 6646605 5032358 6923692 6233323 8144977 8186464 4401122 8322830\n@@ -41,0 +41,1 @@\n+import java.util.Collections;\n@@ -348,0 +349,27 @@\n+\n+    \/**\n+     * Verify that ZipFile can open a ZIP file with zero entries\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void noEntries() throws IOException {\n+        \/\/ Create a ZIP file with no entries\n+        try (ZipOutputStream zo = new ZipOutputStream(Files.newOutputStream(zip))) {\n+        }\n+\n+        \/\/ Open the \"empty\" ZIP file\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            \/\/ Verify size\n+            assertEquals(0, zf.size());\n+\n+            \/\/ Verify entry lookup using ZipFile.getEntry()\n+            assertNull(zf.getEntry(\"file.txt\"));\n+\n+            \/\/ Verify iteration using ZipFile.entries()\n+            assertEquals(Collections.emptyList(), Collections.list(zf.entries()));\n+\n+            \/\/ Verify iteration using ZipFile.stream()\n+            assertEquals(Collections.emptyList(), zf.stream().toList());\n+        }\n+    }\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ReadZip.java","additions":30,"deletions":2,"binary":false,"changes":32,"status":"modified"}]}