{"files":[{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8253952\n@@ -27,1 +28,1 @@\n- * @run main\/othervm CopyZipFile\n+ * @run junit CopyZipFile\n@@ -30,5 +31,5 @@\n-import java.io.File;\n-import java.io.ByteArrayOutputStream;\n-import java.io.FileInputStream;\n-import java.io.FileNotFoundException;\n-import java.io.FileOutputStream;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n@@ -37,0 +38,3 @@\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -40,7 +44,3 @@\n-import java.util.zip.CRC32;\n-import java.util.zip.Deflater;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipException;\n-import java.util.zip.ZipFile;\n-import java.util.zip.ZipInputStream;\n-import java.util.zip.ZipOutputStream;\n+import java.util.zip.*;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -49,2 +49,4 @@\n-    private static final String ZIP_FILE = \"first.zip\";\n-    private static final String TEST_STRING = \"TestTestTest\";\n+    \/\/ ZIP file created in this test\n+    private Path zip = Path.of(\"first.zip\");\n+    \/\/ The content to put in each entry\n+    private static final byte[] TEST_STRING = \"TestTestTest\".getBytes(StandardCharsets.UTF_8);\n@@ -52,4 +54,14 @@\n-    private static void createZip(String zipFile) throws Exception {\n-        File f = new File(zipFile);\n-        f.deleteOnExit();\n-        try (OutputStream os = new FileOutputStream(f);\n+    \/**\n+     * Create the sample ZIP file used in this test, including a STORED entry\n+     * and DEFLATE entries with various compression levels.\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void createZip() throws IOException {\n+        \/\/ By default, ZipOutputStream creates zip files with Local File Headers\n+        \/\/ without size, compressed size and crc values and an extra Data\n+        \/\/ Descriptor (see https:\/\/en.wikipedia.org\/wiki\/Zip_(file_format)\n+        \/\/ after the data belonging to that entry with these values if in the\n+        \/\/ corresponding ZipEntry one of the size, compressedSize or crc fields is\n+        \/\/ equal to '-1' (which is the default for newly created ZipEntries).\n+        try (OutputStream os = Files.newOutputStream(zip) ;\n@@ -58,3 +70,4 @@\n-            zos.putNextEntry(new ZipEntry(\"test1.txt\"));\n-            zos.write(TEST_STRING.getBytes());\n-            zos.closeEntry();\n+            zos.setLevel(Deflater.DEFAULT_COMPRESSION);\n+            zos.putNextEntry(new ZipEntry(\"DEFAULT_COMPRESSION.txt\"));\n+            zos.write(TEST_STRING);\n+\n@@ -63,4 +76,3 @@\n-            ZipEntry ze = new ZipEntry(\"test2.txt\");\n-            int length = TEST_STRING.length();\n-            ze.setSize(length);\n-            ze.setCompressedSize(length);\n+            ZipEntry ze = new ZipEntry(\"STORED.txt\");\n+            ze.setSize(TEST_STRING.length);\n+            ze.setCompressedSize(TEST_STRING.length);\n@@ -68,1 +80,1 @@\n-            crc.update(TEST_STRING.getBytes(\"utf8\"), 0, length);\n+            crc.update(TEST_STRING);\n@@ -71,1 +83,2 @@\n-            zos.write(TEST_STRING.getBytes());\n+            zos.write(TEST_STRING);\n+\n@@ -75,2 +88,3 @@\n-            zos.putNextEntry(new ZipEntry(\"test3.txt\"));\n-            zos.write(TEST_STRING.getBytes());\n+            zos.putNextEntry(new ZipEntry(\"NO_COMPRESSION.txt\"));\n+            zos.write(TEST_STRING);\n+\n@@ -79,2 +93,3 @@\n-            zos.putNextEntry(new ZipEntry(\"test4.txt\"));\n-            zos.write(TEST_STRING.getBytes());\n+            zos.putNextEntry(new ZipEntry(\"BEST_SPEED.txt\"));\n+            zos.write(TEST_STRING);\n+\n@@ -83,2 +98,2 @@\n-            zos.putNextEntry(new ZipEntry(\"test5.txt\"));\n-            zos.write(TEST_STRING.getBytes());\n+            zos.putNextEntry(new ZipEntry(\"BEST_COMPRESSION.txt\"));\n+            zos.write(TEST_STRING);\n@@ -88,22 +103,26 @@\n-    public static void main(String args[]) throws Exception {\n-        \/\/ By default, ZipOutputStream creates zip files with Local File Headers\n-        \/\/ without size, compressedSize and crc values and an extra Data\n-        \/\/ Descriptor (see https:\/\/en.wikipedia.org\/wiki\/Zip_(file_format)\n-        \/\/ after the data belonging to that entry with these values if in the\n-        \/\/ corresponding ZipEntry one of the size, compressedSize or crc fields is\n-        \/\/ equal to '-1' (which is the default for newly created ZipEntries).\n-        createZip(ZIP_FILE);\n-\n-        \/\/ Now read all the entries of the newly generated zip file with a ZipInputStream\n-        \/\/ and copy them to a new zip file with the help of a ZipOutputStream.\n-        \/\/ This only works reliably because the generated zip file has no values for the\n-        \/\/ size, compressedSize and crc values of a zip entry in the local file header and\n-        \/\/ therefore the ZipEntry objects created by ZipOutputStream.getNextEntry() will have\n-        \/\/ all these fields set to '-1'.\n-        ZipEntry entry;\n-        byte[] buf = new byte[512];\n-        try (InputStream is = new FileInputStream(ZIP_FILE);\n-             ZipInputStream zis = new ZipInputStream(is);\n-             OutputStream os = new ByteArrayOutputStream();\n-             ZipOutputStream zos = new ZipOutputStream(os)) {\n-            while((entry = zis.getNextEntry())!=null) {\n+    \/**\n+     * Delete the ZIP file produced by this test\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * Read all entries using ZipInputStream.getNextEntry and copy them\n+     * to a new zip file using ZipOutputStream.putNextEntry. This only works\n+     * reliably because the input zip file has no values for the size, compressedSize\n+     * and crc values of streamed zip entries in the local file header and\n+     * therefore the ZipEntry objects created by ZipOutputStream.getNextEntry\n+     * will have all these fields set to '-1'.\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void copyFromZipInputStreamToZipOutputStream() throws IOException {\n+\n+        try (ZipInputStream zis = new ZipInputStream(Files.newInputStream(zip));\n+             ZipOutputStream zos = new ZipOutputStream(OutputStream.nullOutputStream())) {\n+            ZipEntry entry;\n+            while ((entry = zis.getNextEntry()) != null) {\n@@ -114,5 +133,7 @@\n-                    String.format(\"name=%s, clen=%d, len=%d, crc=%d\",\n-                                  entry.getName(), entry.getCompressedSize(), entry.getSize(), entry.getCrc()));\n-                if (entry.getMethod() == ZipEntry.DEFLATED &&\n-                    (entry.getCompressedSize() != -1 || entry.getSize() != -1 || entry.getCrc() != -1)) {\n-                    throw new Exception(\"'size', 'compressedSize' and 'crc' shouldn't be initialized at this point.\");\n+                        String.format(\"name=%s, clen=%d, len=%d, crc=%d\",\n+                                entry.getName(), entry.getCompressedSize(), entry.getSize(), entry.getCrc()));\n+                if (entry.getMethod() == ZipEntry.DEFLATED) {\n+                    \/\/ Expect size, compressed size and crc to not be initialized at this point\n+                    assertEquals(-1, entry.getCompressedSize());\n+                    assertEquals(-1, entry.getSize());\n+                    assertEquals(-1, entry.getCrc());\n@@ -127,5 +148,6 @@\n-                    String.format(\"name=%s, clen=%d, len=%d, crc=%d\\n\",\n-                                  entry.getName(), entry.getCompressedSize(), entry.getSize(), entry.getCrc()));\n-                if (entry.getCompressedSize() == -1 || entry.getSize() == -1) {\n-                    throw new Exception(\"'size' and 'compressedSize' must be initialized at this point.\");\n-                }\n+                        String.format(\"name=%s, clen=%d, len=%d, crc=%d\\n\",\n+                                entry.getName(), entry.getCompressedSize(), entry.getSize(), entry.getCrc()));\n+                \/\/ Expect size, compressed size and crc to be initialized at this point\n+                assertNotEquals(-1, entry.getCompressedSize());\n+                assertNotEquals(-1, entry.getSize());\n+                assertNotEquals(-1, entry.getCrc());\n@@ -134,0 +156,1 @@\n+    }\n@@ -135,15 +158,21 @@\n-        \/\/ Now we read all the entries of the initially generated zip file with the help\n-        \/\/ of the ZipFile class. The ZipFile class reads all the zip entries from the Central\n-        \/\/ Directory which must have accurate information for size, compressedSize and crc.\n-        \/\/ This means that all ZipEntry objects returned from ZipFile will have correct\n-        \/\/ settings for these fields.\n-        \/\/ If the compression level was different in the initial zip file (which we can't find\n-        \/\/ out any more now because the zip file format doesn't record this information) the\n-        \/\/ size of the re-compressed entry we are writing to the ZipOutputStream might differ\n-        \/\/ from the original compressed size recorded in the ZipEntry. This would result in an\n-        \/\/ \"invalid entry compressed size\" ZipException if ZipOutputStream wouldn't ignore\n-        \/\/ the implicitely set compressed size attribute of ZipEntries read from a ZipFile\n-        \/\/ or ZipInputStream.\n-        try (OutputStream os = new ByteArrayOutputStream();\n-             ZipOutputStream zos = new ZipOutputStream(os);\n-             ZipFile zf = new ZipFile(ZIP_FILE)) {\n+    \/**\n+     * Read all entries using the ZipFile class and copy them to a new zip file\n+     * using ZipOutputStream.putNextEntry.\n+     * The ZipFile class reads all the zip entries from the Central\n+     * Directory, which has accurate information for size, compressedSize and crc.\n+     * This means that all ZipEntry objects returned from ZipFile will have correct\n+     * settings for these fields.\n+     * If the compression level was different in the input zip file (which we can't know\n+     * because the zip file format doesn't record this information), the\n+     * size of the re-compressed entry we are writing to the ZipOutputStream might differ\n+     * from the original compressed size recorded in the ZipEntry. This would result in an\n+     * \"invalid entry compressed size\" ZipException if ZipOutputStream wouldn't ignore\n+     * the implicitely set compressed size attribute of ZipEntries read from a ZipFile\n+     * or ZipInputStream.\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void copyFromZipFileToZipOutputStream() throws IOException {\n+        try (ZipOutputStream zos = new ZipOutputStream(OutputStream.nullOutputStream());\n+             ZipFile zf = new ZipFile(zip.toFile())) {\n+            ZipEntry entry;\n@@ -157,4 +186,5 @@\n-                if (entry.getCompressedSize() == -1 || entry.getSize() == -1) {\n-                    throw new Exception(\"'size' and 'compressedSize' must be initialized at this point.\");\n-                }\n-                InputStream is = zf.getInputStream(entry);\n+                \/\/ Expect size, compressed size and crc to be initialized at this point\n+                assertNotEquals(-1, entry.getCompressedSize());\n+                assertNotEquals(-1, entry.getSize());\n+                assertNotEquals(-1, entry.getCrc());\n+\n@@ -162,1 +192,3 @@\n-                is.transferTo(zos);\n+                try (InputStream is = zf.getInputStream(entry)) {\n+                    is.transferTo(zos);\n+                }\n@@ -166,0 +198,17 @@\n+    }\n+\n+    \/**\n+     * If the compressed size is set explicitly using ZipEntry.setCompressedSize(),\n+     * then the entry will be restreamed with a data descriptor and the compressed size\n+     * recomputed. If the source compression level was different from the target compression\n+     * level, the compressed sizes may differ and a ZipException will be thrown\n+     * when the entry is closed in ZipOutputStream.closeEntry\n+     *\n+     * @throws IOException if an unexpected IOException is thrown\n+     *\/\n+    @Test\n+    public void explicitCompressedSizeWithDifferentCompressionLevels() throws IOException {\n+        try (ZipOutputStream zos = new ZipOutputStream(OutputStream.nullOutputStream());\n+             ZipFile zf = new ZipFile(zip.toFile())) {\n+            \/\/ Be explicit about the default compression level\n+            zos.setLevel(Deflater.DEFAULT_COMPRESSION);\n@@ -167,5 +216,0 @@\n-        \/\/ The compressed size attribute of a ZipEntry shouldn't be ignored if it was set\n-        \/\/ explicitely by calling ZipEntry.setCpompressedSize()\n-        try (OutputStream os = new ByteArrayOutputStream();\n-             ZipOutputStream zos = new ZipOutputStream(os);\n-             ZipFile zf = new ZipFile(ZIP_FILE)) {\n@@ -174,4 +218,8 @@\n-                try {\n-                    entry = entries.nextElement();\n-                    entry.setCompressedSize(entry.getCompressedSize());\n-                    InputStream is = zf.getInputStream(entry);\n+                ZipEntry entry = entries.nextElement();\n+\n+                \/\/ Explicitly setting the compressed size will disable data descriptors\n+                \/\/ and enable validation that the compressed size in the ZipEntry matches the\n+                \/\/ actual compressed size written by ZipOutputStream\n+                entry.setCompressedSize(entry.getCompressedSize());\n+\n+                try (InputStream is = zf.getInputStream(entry)) {\n@@ -180,9 +228,35 @@\n-                    zos.closeEntry();\n-                    if (\"test3.txt\".equals(entry.getName())) {\n-                        throw new Exception(\n-                            \"Should throw a ZipException if ZipEntry.setCpompressedSize() was called.\");\n-                    }\n-                } catch (ZipException ze) {\n-                    if (\"test1.txt\".equals(entry.getName()) || \"test2.txt\".equals(entry.getName())) {\n-                        throw new Exception(\n-                            \"Shouldn't throw a ZipExcpetion for STORED files or files compressed with DEFAULT_COMPRESSION\");\n+                    \/\/ Some compression levels lead to unexpected recompressed sizes when closing the entry\n+                    switch (entry.getName()) {\n+                        case \"DEFAULT_COMPRESSION.txt\" -> {\n+                            \/\/ DEFAULT_COMPRESSION matches expected size\n+                            zos.closeEntry();\n+                        }\n+                        case \"STORED.txt\" -> {\n+                            \/\/ STORED should not throw\n+                            zos.closeEntry();\n+                        }\n+                        case \"NO_COMPRESSION.txt\", \"BEST_SPEED.txt\" -> {\n+                            \/\/ NO_COMPRESSION and BEST_SPEED should lead to an unexpected recompressed size\n+                            ZipException ze = assertThrows(ZipException.class, () -> {\n+                                zos.closeEntry();\n+                            });\n+\n+                            \/\/ Hack to fix and close the offending zip entry with the correct recompressed size.\n+                            \/\/ The exception message is something like:\n+                            \/\/   \"invalid entry compressed size (expected 12 but got 7 bytes)\"\n+                            \/\/ and we need to extract the second integer.\n+                            Pattern cSize = Pattern.compile(\"\\\\d+\");\n+                            Matcher m = cSize.matcher(ze.getMessage());\n+                            m.find();\n+                            m.find();\n+                            entry.setCompressedSize(Integer.parseInt(m.group()));\n+                            zos.closeEntry();\n+                        }\n+                        case \"BEST_COMPRESSION.txt\" -> {\n+                            \/\/ BEST_COMPRESSION produces the same compressed\n+                            \/\/ size as DEFAULT_COMPRESSION for sample content\n+                            zos.closeEntry();\n+                        }\n+                        default -> {\n+                            throw new IllegalArgumentException(\"Unexpected entry \" + entry.getName());\n+                        }\n@@ -190,9 +264,0 @@\n-                    \/\/ Hack to fix and close the offending zip entry with the correct compressed size.\n-                    \/\/ The exception message is something like:\n-                    \/\/   \"invalid entry compressed size (expected 12 but got 7 bytes)\"\n-                    \/\/ and we need to extract the second integer.\n-                    Pattern cSize = Pattern.compile(\"\\\\d+\");\n-                    Matcher m = cSize.matcher(ze.getMessage());\n-                    m.find();\n-                    m.find();\n-                    entry.setCompressedSize(Integer.parseInt(m.group()));\n","filename":"test\/jdk\/java\/util\/zip\/CopyZipFile.java","additions":178,"deletions":113,"binary":false,"changes":291,"status":"modified"},{"patch":"@@ -1,37 +0,0 @@\n-\/*\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.util.zip.*;\n-import java.io.File;\n-\n-public class Available\n-{\n-    public static void main (String argv[]) throws Exception {\n-        ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\"),\n-                                          \"input.jar\"));\n-        ZipEntry e = zf.getEntry(\"ReleaseInflater.java\");\n-        if (e.getSize() != zf.getInputStream(e).available()) {\n-            throw new Exception(\"wrong return value of available\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/Available.java","additions":0,"deletions":37,"binary":false,"changes":37,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test 1.1 99\/06\/01\n-   @bug 4239446\n-   @summary Make sure the ZipEntry fields are correct.\n- *\/\n-\n-import java.io.*;\n-import java.util.zip.*;\n-\n-public class CopyJar {\n-    public static void main(String args[]) throws Exception {\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"),\n-                                               \"input.jar\"))) {\n-            ZipEntry ze = zf.getEntry(\"ReleaseInflater.java\");\n-            ZipOutputStream zos = new ZipOutputStream(new ByteArrayOutputStream());\n-            InputStream in = zf.getInputStream(ze);\n-            byte[] b = new byte[128];\n-            int n;\n-            zos.putNextEntry(ze);\n-            while((n = in.read(b)) != -1) {\n-                zos.write(b, 0, n);\n-            }\n-            zos.close();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/CopyJar.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -1,49 +0,0 @@\n-\/*\n- * Copyright (c) 2000, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 4290060\n-   @summary Check if the zip file is closed before access any\n-            elements in the Enumeration.\n- *\/\n-\n-import java.io.*;\n-import java.util.zip.*;\n-import java.util.Enumeration;\n-\n-public class EnumAfterClose {\n-    public static void main(String args[]) throws Exception {\n-        Enumeration e;\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"),\n-                                               \"input.zip\"))) {\n-            e = zf.entries();\n-        }\n-        \/\/ ensure that the ZipFile is closed before checking the Enumeration\n-        try {\n-            if (e.hasMoreElements()) {\n-                ZipEntry ze = (ZipEntry)e.nextElement();\n-            }\n-        } catch (IllegalStateException ie) {\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/EnumAfterClose.java","additions":0,"deletions":49,"binary":false,"changes":49,"status":"deleted"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 4290060\n+   @summary Check if the zip file is closed before access any\n+            elements in the Enumeration.\n+   @run junit EnumerateAfterClose\n+ *\/\n+\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.Enumeration;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+public class EnumerateAfterClose {\n+\n+    \/\/ ZIP file used in this test\n+    private Path zip = Path.of(\"enum-after-close.zip\");\n+\n+    \/**\n+     * Create a sample ZIP file for use by this test\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void setUp() throws IOException {\n+        try (OutputStream out = Files.newOutputStream(zip);\n+             ZipOutputStream zo = new ZipOutputStream(out)) {\n+            zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    \/**\n+     * Delete the ZIP file produced by this test\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * Attempting to using a ZipEntry Enumeration after its backing\n+     * ZipFile is closed should throw IllegalStateException.\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void enumeratingAfterCloseShouldThrowISE() throws IOException {\n+        \/\/ Retain a reference to an enumeration backed by a closed ZipFile\n+        Enumeration e;\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            e = zf.entries();\n+        }\n+        \/\/ Using the enumeration after the ZipFile is closed should throw ISE\n+        assertThrows(IllegalStateException.class, () -> {\n+            if (e.hasMoreElements()) {\n+                ZipEntry ze = (ZipEntry)e.nextElement();\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/EnumerateAfterClose.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2010, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,0 +27,1 @@\n+   @run junit FinalizeInflater\n@@ -29,2 +30,4 @@\n-import java.io.File;\n-import java.io.InputStream;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n@@ -32,0 +35,5 @@\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -34,0 +42,1 @@\n+import java.util.zip.ZipOutputStream;\n@@ -37,4 +46,39 @@\n-    public static void main(String[] args) throws Throwable {\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"), \"input.zip\")))\n-        {\n-            ZipEntry ze = zf.getEntry(\"ReadZip.java\");\n+    \/\/ ZIP file produced by this test\n+    private Path zip = Path.of(\"finalize-inflater.zip\");\n+\n+    \/**\n+     * Create the sample ZIP used in this test\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void setUp() throws IOException {\n+        try (OutputStream out = Files.newOutputStream(zip);\n+             ZipOutputStream zo = new ZipOutputStream(out)) {\n+            zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            byte[] hello = \"hello\".getBytes(StandardCharsets.UTF_8);\n+            for (int i = 0; i < 100; i++) {\n+                zo.write(hello);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Delete the ZIP file produced by this test\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * A cached Inflater should not be made invalid by finalization\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void shouldNotFinalizeInflaterInPool() throws IOException {\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            ZipEntry ze = zf.getEntry(\"file.txt\");\n@@ -54,6 +98,1 @@\n-        byte[] buffer = new byte[32];\n-        try {\n-            while(is.read(buffer)>0){}\n-        } catch (IOException ioe) {\n-            ioe.printStackTrace();\n-        }\n+        is.readAllBytes();\n@@ -62,1 +101,1 @@\n-    static class Wrapper{\n+    static class Wrapper {\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/FinalizeInflater.java","additions":53,"deletions":14,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 1999, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 4206838\n-   @summary getEntry() will search for a directory\n-            even without an ending '\/'.\n- *\/\n-\n-import java.io.*;\n-import java.util.zip.*;\n-\n-public class GetDirEntry {\n-    public static void main(String args[]) throws Exception {\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"),\n-                                               \"input.jar\"))) {\n-            ZipEntry ze = zf.getEntry(\"META-INF\");\n-            if (ze == null) {\n-                throw new Exception(\"failed to find a directory entry\");\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/GetDirEntry.java","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -1,51 +0,0 @@\n-\/*\n- * Copyright (c) 2002, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n-   @bug 4528128 6846616\n-   @summary Test if reading InputStream of a closed ZipFile crashes VM\n-   @author kladko\n-   *\/\n-\n-\n-import java.util.zip.*;\n-import java.io.*;\n-import java.util.*;\n-\n-public class ReadAfterClose {\n-    public static void main(String[] argv) throws Exception {\n-        InputStream in;\n-        try (ZipFile zf = new ZipFile(\n-                 new File(System.getProperty(\"test.src\",\".\"),\"crash.jar\"))) {\n-            ZipEntry zent = zf.getEntry(\"Test.java\");\n-            in = zf.getInputStream(zent);\n-        }\n-        \/\/ ensure zf is closed at this point\n-        try {\n-            in.read();\n-        } catch (IOException e) {\n-            return;\n-        }\n-        throw new Exception(\"Test failed.\");\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ReadAfterClose.java","additions":0,"deletions":51,"binary":false,"changes":51,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2011, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n-   @bug 4241361 4842702 4985614 6646605 5032358 6923692 6233323 8144977 8186464\n+   @bug 4241361 4842702 4985614 6646605 5032358 6923692 6233323 8144977 8186464 4401122\n@@ -27,1 +27,0 @@\n-   @key randomness\n@@ -29,0 +28,1 @@\n+   @run junit ReadZip\n@@ -31,1 +31,7 @@\n-import java.io.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n@@ -33,9 +39,2 @@\n-import java.nio.file.Files;\n-import java.nio.file.FileSystem;\n-import java.nio.file.FileSystems;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.nio.file.NoSuchFileException;\n-import java.nio.file.StandardCopyOption;\n-import java.nio.file.StandardOpenOption;\n-import java.util.List;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.*;\n@@ -43,1 +42,4 @@\n-import java.util.zip.*;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n@@ -46,0 +48,1 @@\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -48,5 +51,29 @@\n-    private static void unreached (Object o)\n-        throws Exception\n-    {\n-        \/\/ Should never get here\n-        throw new Exception (\"Expected exception was not thrown\");\n+\n+    \/\/ ZIP file produced during tests\n+    private Path zip = Path.of(\"read-zip.zip\");\n+\n+    \/**\n+     * Create a sample ZIP file for use by tests\n+     * @param name name of the ZIP file to create\n+     * @return a sample ZIP file\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    private Path createZip(String name) throws IOException {\n+        Path zip = Path.of(name);\n+\n+        try (OutputStream out = Files.newOutputStream(zip);\n+             ZipOutputStream zo = new ZipOutputStream(out)) {\n+            zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        return zip;\n+    }\n+\n+    \/**\n+     * Delete the ZIP file produced after each test method\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n@@ -55,6 +82,9 @@\n-    public static void main(String args[]) throws Exception {\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"),\n-                                               \"input.zip\"))) {\n-            \/\/ Make sure we throw NPE on null objects\n-            try { unreached (zf.getEntry(null)); }\n-            catch (NullPointerException e) {}\n+    \/**\n+     * Make sure we throw NPE when calling getEntry or getInputStream with null params\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void nullPointerExceptionOnNullParams() throws IOException {\n+        zip = createZip(\"null-params.zip\");\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n@@ -62,2 +92,2 @@\n-            try { unreached (zf.getInputStream(null)); }\n-            catch (NullPointerException e) {}\n+            assertThrows(NullPointerException.class, () -> zf.getEntry(null));\n+            assertThrows(NullPointerException.class, () -> zf.getInputStream(null));\n@@ -65,4 +95,3 @@\n-            ZipEntry ze = zf.getEntry(\"ReadZip.java\");\n-            if (ze == null) {\n-                throw new Exception(\"cannot read from zip file\");\n-            }\n+            \/\/ Sanity check that we can still read an entry\n+            ZipEntry ze = zf.getEntry(\"file.txt\");\n+            assertNotNull(ze, \"cannot read from zip file\");\n@@ -70,0 +99,1 @@\n+    }\n@@ -71,5 +101,6 @@\n-        \/\/ Make sure we can read the zip file that has some garbage\n-        \/\/ bytes padded at the end.\n-        File newZip = new File(System.getProperty(\"test.dir\", \".\"), \"input2.zip\");\n-        Files.copy(Paths.get(System.getProperty(\"test.src\", \"\"), \"input.zip\"),\n-                   newZip.toPath(), StandardCopyOption.REPLACE_EXISTING);\n+    \/**\n+     * Read the zip file that has some garbage bytes padded at the end\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void bytesPaddedAtEnd() throws IOException {\n@@ -77,1 +108,1 @@\n-        newZip.setWritable(true);\n+        zip = createZip(\"bytes-padded.zip\");\n@@ -80,3 +111,6 @@\n-        try (OutputStream os = Files.newOutputStream(newZip.toPath(),\n-                                                     StandardOpenOption.APPEND)) {\n-            os.write(1); os.write(3); os.write(5); os.write(7);\n+        try (OutputStream os = Files.newOutputStream(zip,\n+                StandardOpenOption.APPEND)) {\n+            os.write(1);\n+            os.write(3);\n+            os.write(5);\n+            os.write(7);\n@@ -85,7 +119,25 @@\n-        try (ZipFile zf = new ZipFile(newZip)) {\n-            ZipEntry ze = zf.getEntry(\"ReadZip.java\");\n-            if (ze == null) {\n-                throw new Exception(\"cannot read from zip file\");\n-            }\n-        } finally {\n-            newZip.delete();\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            ZipEntry ze = zf.getEntry(\"file.txt\");\n+            assertNotNull(ze, \"cannot read from zip file\");\n+        }\n+    }\n+\n+    \/**\n+     * Verify that we can read a comment from the ZIP\n+     * file's 'End of Central Directory' header\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void readZipFileComment() throws IOException {\n+\n+        \/\/ Create a zip file with a comment in the 'End of Central Directory' header\n+        try (OutputStream out = Files.newOutputStream(zip);\n+             ZipOutputStream zos = new ZipOutputStream(out)) {\n+            ZipEntry ze = new ZipEntry(\"ZipEntry\");\n+            zos.putNextEntry(ze);\n+            zos.write(1);\n+            zos.write(2);\n+            zos.write(3);\n+            zos.write(4);\n+            zos.closeEntry();\n+            zos.setComment(\"This is the comment for testing\");\n@@ -95,10 +147,6 @@\n-        try {\n-            try (FileOutputStream fos = new FileOutputStream(newZip);\n-                 ZipOutputStream zos = new ZipOutputStream(fos))\n-            {\n-                ZipEntry ze = new ZipEntry(\"ZipEntry\");\n-                zos.putNextEntry(ze);\n-                zos.write(1); zos.write(2); zos.write(3); zos.write(4);\n-                zos.closeEntry();\n-                zos.setComment(\"This is the comment for testing\");\n-            }\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            ZipEntry ze = zf.getEntry(\"ZipEntry\");\n+            assertNotNull(ze, \"cannot read entry from zip file\");\n+            assertEquals(\"This is the comment for testing\", zf.getComment());\n+        }\n+    }\n@@ -106,29 +154,8 @@\n-            try (ZipFile zf = new ZipFile(newZip)) {\n-                ZipEntry ze = zf.getEntry(\"ZipEntry\");\n-                if (ze == null)\n-                    throw new Exception(\"cannot read entry from zip file\");\n-                if (!\"This is the comment for testing\".equals(zf.getComment()))\n-                    throw new Exception(\"cannot read comment from zip file\");\n-            }\n-        } finally {\n-            newZip.delete();\n-        }\n-\n-        \/\/ Read directory entry\n-        try {\n-            try (FileOutputStream fos = new FileOutputStream(newZip);\n-                 ZipOutputStream zos = new ZipOutputStream(fos))\n-            {\n-                ZipEntry ze = new ZipEntry(\"directory\/\");\n-                zos.putNextEntry(ze);\n-                zos.closeEntry();\n-            }\n-            try (ZipFile zf = new ZipFile(newZip)) {\n-                ZipEntry ze = zf.getEntry(\"directory\/\");\n-                if (ze == null || !ze.isDirectory())\n-                    throw new RuntimeException(\"read entry \\\"directory\/\\\" failed\");\n-                try (InputStream is = zf.getInputStream(ze)) {\n-                    is.available();\n-                } catch (Exception x) {\n-                    x.printStackTrace();\n-                }\n+    \/**\n+     * Verify that a directory entry can be found using the\n+     * name 'directory\/' as well as 'directory\/'\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void readDirectoryEntries() throws IOException {\n@@ -136,28 +163,28 @@\n-                ze = zf.getEntry(\"directory\");\n-                if (ze == null || !ze.isDirectory())\n-                    throw new RuntimeException(\"read entry \\\"directory\\\" failed\");\n-                try (InputStream is = zf.getInputStream(ze)) {\n-                    is.available();\n-                } catch (Exception x) {\n-                    x.printStackTrace();\n-                }\n-            }\n-        } finally {\n-            newZip.delete();\n-        }\n-\n-        \/\/ Throw a FNF exception when read a non-existing zip file\n-        try { unreached (new ZipFile(\n-                             new File(System.getProperty(\"test.src\", \".\"),\n-                                     \"input\"\n-                                      + String.valueOf(new java.util.Random().nextInt())\n-                                      + \".zip\")));\n-        } catch (NoSuchFileException nsfe) {}\n-\n-        \/\/ read a zip file with ZIP64 end\n-        Path path = Paths.get(System.getProperty(\"test.dir\", \"\"), \"end64.zip\");\n-        try {\n-            URI uri = URI.create(\"jar:\" + path.toUri());\n-            Map<String, Object> env = Map.of(\"create\", \"true\", \"forceZIP64End\", \"true\");\n-            try (FileSystem fs = FileSystems.newFileSystem(uri, env)) {\n-                Files.write(fs.getPath(\"hello\"), \"hello\".getBytes());\n+        \/\/ Create a ZIP containing some directory entries\n+        try (OutputStream fos = Files.newOutputStream(zip);\n+             ZipOutputStream zos = new ZipOutputStream(fos)) {\n+            \/\/ Add a META-INF directory with STORED compression type\n+            ZipEntry metaInf = new ZipEntry(\"META-INF\/\");\n+            metaInf.setMethod(ZipEntry.STORED);\n+            metaInf.setSize(0);\n+            metaInf.setCrc(0);\n+            zos.putNextEntry(metaInf);\n+\n+            \/\/ Add a regular directory\n+            ZipEntry dir = new ZipEntry(\"directory\/\");\n+            zos.putNextEntry(dir);\n+            zos.closeEntry();\n+        }\n+\n+        \/\/ Verify directory lookups\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            \/\/ Look up 'directory\/' using the full name\n+            ZipEntry ze = zf.getEntry(\"directory\/\");\n+            assertNotNull(ze, \"read entry \\\"directory\/\\\" failed\");\n+            assertTrue(ze.isDirectory(), \"read entry \\\"directory\/\\\" failed\");\n+            assertEquals(\"directory\/\", ze.getName());\n+\n+            try (InputStream is = zf.getInputStream(ze)) {\n+                is.available();\n+            } catch (Exception x) {\n+                x.printStackTrace();\n@@ -165,7 +192,11 @@\n-            try (ZipFile zf = new ZipFile(path.toFile())) {\n-                if (!\"hello\".equals(new String(zf.getInputStream(new ZipEntry(\"hello\"))\n-                                               .readAllBytes(),\n-                                               US_ASCII)))\n-                    throw new RuntimeException(\"zipfile: read entry failed\");\n-            } catch (IOException x) {\n-                throw new RuntimeException(\"zipfile: zip64 end failed\");\n+\n+            \/\/ Look up 'directory\/' without the trailing slash\n+            ze = zf.getEntry(\"directory\");\n+            assertNotNull(ze, \"read entry \\\"directory\\\" failed\");\n+            assertTrue(ze.isDirectory(), \"read entry \\\"directory\\\" failed\");\n+            assertEquals(\"directory\/\", ze.getName());\n+\n+            try (InputStream is = zf.getInputStream(ze)) {\n+                is.available();\n+            } catch (Exception x) {\n+                x.printStackTrace();\n@@ -173,5 +204,36 @@\n-            try (FileSystem fs = FileSystems.newFileSystem(uri, Map.of())) {\n-                if (!\"hello\".equals(new String(Files.readAllBytes(fs.getPath(\"hello\")))))\n-                    throw new RuntimeException(\"zipfs: read entry failed\");\n-            } catch (IOException x) {\n-                throw new RuntimeException(\"zipfile: zip64 end failed\");\n+            \/\/ Sanity check that also META-INF\/ can be looked up with or without the trailing slash\n+            assertNotNull(zf.getEntry(\"META-INF\"));\n+            assertNotNull(zf.getEntry(\"META-INF\/\"));\n+            assertEquals(zf.getEntry(\"META-INF\").getName(),\n+                    zf.getEntry(\"META-INF\/\").getName());\n+        }\n+    }\n+\n+    \/**\n+     * Throw a NoSuchFileException exception when reading a non-existing zip file\n+     *\/\n+    @Test\n+    public void nonExistingFile() {\n+        File nonExistingFile = new File(\"non-existing-file-f6804460f.zip\");\n+        assertThrows(NoSuchFileException.class, () ->\n+                new ZipFile(nonExistingFile));\n+    }\n+\n+    \/**\n+     * Read a Zip file with a 'Zip64 End of Central Directory header' which was created\n+     * using ZipFileSystem with the 'forceZIP64End' option.\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void readZip64EndZipFs() throws IOException {\n+\n+        \/\/ Create zip file with Zip64 end\n+        URI uri = URI.create(\"jar:\" + zip.toUri());\n+        Map<String, Object> env = Map.of(\"create\", \"true\", \"forceZIP64End\", \"true\");\n+        try (FileSystem fs = FileSystems.newFileSystem(uri, env)) {\n+            Files.write(fs.getPath(\"hello\"), \"hello\".getBytes());\n+        }\n+        \/\/ Read using ZipFile\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            try (InputStream in = zf.getInputStream(zf.getEntry(\"hello\"))) {\n+                assertEquals(\"hello\", new String(in.readAllBytes(), StandardCharsets.US_ASCII));\n@@ -179,2 +241,0 @@\n-        } finally {\n-            Files.deleteIfExists(path);\n@@ -182,0 +242,5 @@\n+        \/\/ Read using ZipFileSystem\n+        try (FileSystem fs = FileSystems.newFileSystem(uri, Map.of())) {\n+            assertEquals(\"hello\", new String(Files.readAllBytes(fs.getPath(\"hello\"))));\n+        }\n+    }\n@@ -183,3 +248,10 @@\n-        \/\/ read a zip file created via \"echo hello | zip dst.zip -\", which uses\n-        \/\/ ZIP64 end record\n-        if (Files.notExists(Paths.get(\"\/usr\/bin\/zip\")))\n+    \/**\n+     * Read a zip file created via \"echo hello | zip dst.zip -\",\n+     * which includes a 'Zip64 End of Central Directory header'\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     * @throws InterruptedException if an unexpected InterruptedException occurs\n+     *\/\n+    @Test\n+    public void readZip64EndZipProcess() throws IOException, InterruptedException {\n+        if (Files.notExists(Paths.get(\"\/usr\/bin\/zip\"))) {\n@@ -187,13 +259,12 @@\n-        try {\n-            Process zip = new ProcessBuilder(\"zip\", path.toString().toString(), \"-\").start();\n-            OutputStream os = zip.getOutputStream();\n-            os.write(\"hello\".getBytes(US_ASCII));\n-            os.close();\n-            zip.waitFor();\n-            if (zip.exitValue() == 0 && Files.exists(path)) {\n-                try (ZipFile zf = new ZipFile(path.toFile())) {\n-                    if (!\"hello\".equals(new String(zf.getInputStream(new ZipEntry(\"-\"))\n-                                                       .readAllBytes())))\n-                        throw new RuntimeException(\"zipfile: read entry failed\");\n-                } catch (IOException x) {\n-                    throw new RuntimeException(\"zipfile: zip64 end failed\");\n+        }\n+\n+        Process zip = new ProcessBuilder(\"zip\", this.zip.toString(), \"-\").start();\n+        OutputStream os = zip.getOutputStream();\n+        os.write(\"hello\".getBytes(US_ASCII));\n+        os.close();\n+        zip.waitFor();\n+        if (zip.exitValue() == 0 && Files.exists(this.zip)) {\n+            try (ZipFile zf = new ZipFile(this.zip.toFile())) {\n+                try (InputStream in = zf.getInputStream(zf.getEntry(\"-\"))) {\n+                    String contents = new String(in.readAllBytes(), StandardCharsets.US_ASCII);\n+                    assertEquals(\"hello\", contents);\n@@ -202,2 +273,0 @@\n-        } finally {\n-            Files.deleteIfExists(path);\n@@ -206,1 +275,74 @@\n-}\n+\n+    \/**\n+     * Check that the available() method overriden by the input stream returned by\n+     * ZipFile.getInputStream correctly returns the number of remaining uncompressed bytes\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void availableShouldReturnRemainingUncompressedBytes() throws IOException {\n+        \/\/ The number of uncompressed bytes to write to the sample ZIP entry\n+        final int expectedBytes = 512;\n+\n+        \/\/ Create a sample ZIP with deflated entry of a known uncompressed size\n+        try (ZipOutputStream zo = new ZipOutputStream(Files.newOutputStream(zip))) {\n+            zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            zo.write(new byte[expectedBytes]);\n+        }\n+\n+        \/\/ Verify the behavior of ZipFileInflaterInputStream.available()\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            ZipEntry e = zf.getEntry(\"file.txt\");\n+            try (InputStream in = zf.getInputStream(e)) {\n+                \/\/ Initially, available() should return the full uncompressed size of the entry\n+                assertEquals(expectedBytes, in.available(),\n+                        \"wrong initial return value of available\");\n+\n+                \/\/ Reading a few bytes should reduce the number of available bytes accordingly\n+                int bytesToRead = 10;\n+                in.read(new byte[bytesToRead]);\n+                assertEquals(expectedBytes - bytesToRead, in.available());\n+\n+                \/\/ Reading all remaining bytes should reduce the number of available bytes to zero\n+                in.transferTo(OutputStream.nullOutputStream());\n+                assertEquals(0, in.available());\n+\n+                \/\/ available on a closed input stream should return zero\n+                in.close();\n+                assertEquals(0, in.available());\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Verify that reading an InputStream from a closed ZipFile\n+     * throws IOException as expected and does not crash the VM.\n+     * See bugs: 4528128 6846616\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void readAfterClose() throws IOException {\n+        zip = createZip(\"read-after-close.zip\");\n+        InputStream in;\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            ZipEntry zent = zf.getEntry(\"file.txt\");\n+            in = zf.getInputStream(zent);\n+        }\n+\n+        \/\/ zf is closed at this point\n+        assertThrows(IOException.class,  () -> {\n+            in.read();\n+        });\n+        assertThrows(IOException.class,  () -> {\n+            in.read(new byte[10]);\n+        });\n+        assertThrows(IOException.class,  () -> {\n+            byte[] buf = new byte[10];\n+            in.read(buf, 0, buf.length);\n+        });\n+        assertThrows(IOException.class,  () -> {\n+            in.readAllBytes();\n+        });\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ReadZip.java","additions":289,"deletions":147,"binary":false,"changes":436,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @run junit ReleaseInflater\n@@ -30,2 +31,14 @@\n-import java.io.*;\n-import java.util.zip.*;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -35,4 +48,35 @@\n-    public static void main(String[] args) throws Exception {\n-        ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\"),\n-                                          \"input.jar\"));\n-        ZipEntry e = zf.getEntry(\"ReleaseInflater.java\");\n+    \/\/ ZIP file produced in this test\n+    private Path zip = Path.of(\"release-inflater.zip\");\n+\n+    \/**\n+     * Create a sample ZIP file for use by tests\n+     * @param name name of the ZIP file to create\n+     * @return a sample ZIP file\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void setUp() throws IOException {\n+        try (ZipOutputStream zo = new ZipOutputStream(Files.newOutputStream(zip))) {\n+            zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            zo.write(\"helloworld\".getBytes(StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    \/**\n+     * Delete the ZIP and JAR files produced after each test method\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+    }\n+\n+    \/**\n+     * Verify that the same Inflater is not recycled across input streams\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void recycleInflaterOnlyOnce() throws IOException {\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            ZipEntry e = zf.getEntry(\"file.txt\");\n@@ -40,5 +84,5 @@\n-        InputStream in1 = zf.getInputStream(e);\n-        \/\/ close the stream, the inflater will be released\n-        in1.close();\n-        \/\/ close the stream again, should be no-op\n-        in1.close();\n+            InputStream in1 = zf.getInputStream(e);\n+            \/\/ close the stream, the inflater will be released\n+            in1.close();\n+            \/\/ close the stream again, should be no-op\n+            in1.close();\n@@ -46,3 +90,3 @@\n-        \/\/ create two new streams, allocating inflaters\n-        InputStream in2 = zf.getInputStream(e);\n-        InputStream in3 = zf.getInputStream(e);\n+            \/\/ create two new streams, allocating inflaters\n+            InputStream in2 = zf.getInputStream(e);\n+            InputStream in3 = zf.getInputStream(e);\n@@ -50,3 +94,2 @@\n-        \/\/ check to see if they influence each other\n-        if (in2.read() != in3.read()) {\n-            throw new Exception(\"Stream is corrupted!\");\n+            \/\/ check to see if they influence each other\n+            assertEquals(in2.read(), in3.read(), \"Stream is corrupted!\");\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/ReleaseInflater.java","additions":61,"deletions":18,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @run testng StreamZipEntriesTest\n+ * @run junit StreamZipEntriesTest\n@@ -30,1 +30,4 @@\n-import java.io.File;\n+import org.junit.jupiter.api.AfterEach;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n@@ -32,3 +35,6 @@\n-import java.lang.Object;\n-import java.lang.System;\n-import java.util.jar.JarFile;\n+import java.io.OutputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.HashSet;\n+import java.util.Set;\n@@ -36,0 +42,3 @@\n+import java.util.jar.JarFile;\n+import java.util.jar.JarOutputStream;\n+import java.util.jar.Manifest;\n@@ -39,0 +48,1 @@\n+import java.util.zip.ZipOutputStream;\n@@ -40,1 +50,1 @@\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -42,3 +52,0 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n@@ -48,0 +55,50 @@\n+    \/\/ ZIP file produced in this test\n+    private Path zip = Path.of(\"stream.zip\");\n+    \/\/ JAR file produced in this test\n+    private Path jar = Path.of(\"stream.jar\");\n+\n+    \/**\n+     * Create sample ZIP and JAR files used in in this test\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @BeforeEach\n+    public void setUp() throws IOException {\n+\n+        try (OutputStream out = Files.newOutputStream(zip);\n+             ZipOutputStream zo = new ZipOutputStream(out)) {\n+            zo.putNextEntry(new ZipEntry(\"entry1.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+            zo.putNextEntry(new ZipEntry(\"entry2.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        try (OutputStream out = Files.newOutputStream(jar);\n+             ZipOutputStream zo = new ZipOutputStream(out)) {\n+            \/\/ A JAR file may start with a META-INF\/ directory before the manifest\n+            zo.putNextEntry(new ZipEntry(\"META-INF\/\"));\n+            \/\/ Write the manifest\n+            zo.putNextEntry(new ZipEntry(\"META-INF\/MANIFEST.MF\"));\n+            new Manifest().write(zo);\n+\n+            \/\/ Write two regular entries\n+            zo.putNextEntry(new ZipEntry(\"entry1.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+            zo.putNextEntry(new ZipEntry(\"entry2.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+        }\n+    }\n+\n+    \/**\n+     * Delete the ZIP file produced after each test method\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @AfterEach\n+    public void cleanup() throws IOException {\n+        Files.deleteIfExists(zip);\n+        Files.deleteIfExists(jar);\n+    }\n+\n+    \/**\n+     * Verify that ZipFile.stream() produces the expected entries\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n@@ -50,3 +107,13 @@\n-        try (ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"), \"input.zip\"))) {\n-            zf.stream().forEach(e -> assertTrue(e instanceof ZipEntry));\n-            zf.stream().forEach(e -> assertEquals(e.toString(), \"ReadZip.java\"));\n+        Set<String> names = new HashSet<>(Set.of(\"entry1.txt\", \"entry2.txt\"));\n+\n+        try (ZipFile zf = new ZipFile(zip.toFile())) {\n+            zf.stream().forEach(e -> {\n+                assertTrue(e instanceof ZipEntry);\n+                String name = e.getName();\n+                assertNotNull(names.remove(name));\n+                String toString = e.toString();\n+                assertEquals(name, toString);\n+            });\n+\n+            \/\/ Check that all expected names were processed\n+            assertTrue(names.isEmpty());\n@@ -54,0 +121,1 @@\n+            \/\/ Check that Stream.toArray produces the expected result\n@@ -55,2 +123,3 @@\n-            assertEquals(1, elements.length);\n-            assertEquals(elements[0].toString(), \"ReadZip.java\");\n+            assertEquals(2, elements.length);\n+            assertEquals(elements[0].toString(), \"entry1.txt\");\n+            assertEquals(elements[1].toString(), \"entry2.txt\");\n@@ -60,0 +129,4 @@\n+    \/**\n+     * Verify that JarFile.stream() produces the expected entries\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n@@ -62,2 +135,7 @@\n-        try (JarFile jf = new JarFile(new File(System.getProperty(\"test.src\", \".\"), \"input.jar\"))) {\n-            jf.stream().forEach(e -> assertTrue(e instanceof JarEntry));\n+        try (JarFile jf = new JarFile(jar.toFile())) {\n+            Set<String> names = new HashSet<>(Set.of(\n+                    \"META-INF\/\",\n+                    \"META-INF\/MANIFEST.MF\",\n+                    \"entry1.txt\",\n+                    \"entry2.txt\"\n+            ));\n@@ -65,0 +143,14 @@\n+            jf.stream().forEach(e -> {\n+                        assertTrue(e instanceof JarEntry);\n+                        String name = e.getName();\n+                        assertNotNull(names.remove(name));\n+                        String toString = e.toString();\n+                        assertEquals(name, toString);\n+                    }\n+            );\n+\n+            \/\/ Check that all expected names were processed\n+            assertTrue(names.isEmpty(), \"Unprocessed entries: \" + names);\n+\n+\n+            \/\/ Check that Stream.toArray produces the expected result\n@@ -66,1 +158,1 @@\n-            assertEquals(3, elements.length);\n+            assertEquals(4, elements.length);\n@@ -69,1 +161,2 @@\n-            assertEquals(elements[2].toString(), \"ReleaseInflater.java\");\n+            assertEquals(elements[2].toString(), \"entry1.txt\");\n+            assertEquals(elements[3].toString(), \"entry2.txt\");\n@@ -73,0 +166,4 @@\n+    \/**\n+     * Calling ZipFile.stream() on a closed ZipFile should throw ISE\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n@@ -75,1 +172,1 @@\n-        ZipFile zf = new ZipFile(new File(System.getProperty(\"test.src\", \".\"), \"input.zip\"));\n+        ZipFile zf = new ZipFile(zip.toFile());\n@@ -77,1 +174,1 @@\n-        try {\n+        assertThrows(IllegalStateException.class, () -> {\n@@ -79,4 +176,1 @@\n-            fail(\"Should have thrown IllegalStateException\");\n-        } catch (IllegalStateException e) {\n-            \/\/ expected;\n-        }\n+        });\n@@ -85,0 +179,4 @@\n+    \/**\n+     * Calling JarFile.stream() on a closed JarFile should throw ISE\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n@@ -87,1 +185,1 @@\n-        JarFile jf = new JarFile(new File(System.getProperty(\"test.src\", \".\"), \"input.jar\"));\n+        JarFile jf = new JarFile(jar.toFile());\n@@ -89,1 +187,1 @@\n-        try {\n+        assertThrows(IllegalStateException.class, () -> {\n@@ -91,4 +189,1 @@\n-            fail(\"Should have thrown IllegalStateException\");\n-        } catch (IllegalStateException e) {\n-            \/\/ expected;\n-        }\n+        });\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/StreamZipEntriesTest.java","additions":126,"deletions":31,"binary":false,"changes":157,"status":"modified"},{"filename":"test\/jdk\/java\/util\/zip\/ZipFile\/crash.jar","binary":true,"status":"deleted"},{"filename":"test\/jdk\/java\/util\/zip\/ZipFile\/input.jar","binary":true,"status":"deleted"},{"filename":"test\/jdk\/java\/util\/zip\/ZipFile\/input.zip","binary":true,"status":"deleted"}]}