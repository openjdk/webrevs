{"files":[{"patch":"@@ -549,1 +549,3 @@\n-    ProfileData* pdata = h_method->method_data()->allocate_bci_to_data(current_bci, nullptr);\n+    MethodData* mdo = h_method->method_data();\n+    MutexLocker ml(mdo->extra_data_lock());\n+    ProfileData* pdata = mdo->allocate_bci_to_data(current_bci, nullptr);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1463,1 +1463,0 @@\n-    MutexLocker ml(&_extra_data_lock);\n@@ -1465,1 +1464,3 @@\n-    \/\/ have added extra data entries.\n+    \/\/ have added extra data entries. Do it re-entrant in case\n+    \/\/ we already have the lock further up.\n+    ConditionalMutexLocker ml(extra_data_lock(), !extra_data_lock()->owned_by_self());\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2315,0 +2315,1 @@\n+    assert(extra_data_lock()->owned_by_self(), \"must have lock\");\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1800,0 +1800,1 @@\n+    MutexLocker ml(imm_mdo->extra_data_lock());\n@@ -2497,1 +2498,4 @@\n-    pdata = trap_mdo->allocate_bci_to_data(trap_bci, reason_is_speculate(reason) ? compiled_method : nullptr);\n+    {\n+      MutexLocker ml(trap_mdo->extra_data_lock());\n+      pdata = trap_mdo->allocate_bci_to_data(trap_bci, reason_is_speculate(reason) ? compiled_method : nullptr);\n+    }\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -615,0 +615,1 @@\n+        MutexLocker ml(trap_mdo->extra_data_lock());\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}