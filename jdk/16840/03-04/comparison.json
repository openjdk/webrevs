{"files":[{"patch":"@@ -85,1 +85,1 @@\n-  bool finish() {\n+  bool finish(NoSafepointVerifier* no_safepoint) {\n@@ -90,2 +90,9 @@\n-    \/\/ Holding locks through safepoints is bad practice.\n-    MutexUnlocker mu(_mdo->extra_data_lock());\n+    \/\/ We are currently holding the extra_data_lock and ensuring\n+    \/\/ no safepoint breaks the lock.\n+    _mdo->check_extra_data_locked();\n+    \/\/ We now want to cache some method data. This could cause\n+    \/\/ a safepoint. We temporarily release the lock and allow\n+    \/\/ safepoints, and revert that at the end of the scope:\n+    MutexUnlocker mu(_mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n+    PauseNoSafepointVerifier pause_no_safepoints(no_safepoint);\n+\n@@ -107,1 +114,1 @@\n-void ciMethodData::prepare_metadata() {\n+void ciMethodData::prepare_metadata(NoSafepointVerifier* no_safepoint) {\n@@ -113,7 +120,2 @@\n-    {\n-      \/\/ We hold the extra data lock, so now don't safepoint so we don't\n-      \/\/ give up the lock during cleaning.\n-      NoSafepointVerifier no_safepoint;\n-      mdo->clean_extra_data(&cl);\n-    }\n-    if (cl.finish()) {\n+    mdo->clean_extra_data(&cl);\n+    if (cl.finish(no_safepoint)) {\n@@ -131,1 +133,5 @@\n-  MutexLocker ml(mdo->extra_data_lock());\n+\n+  \/\/ Lock to read ProfileData, and ensure lock is not unintentionally broken by a safepoint\n+  MutexLocker ml(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n+  NoSafepointVerifier no_safepoint;\n+\n@@ -133,1 +139,1 @@\n-  prepare_metadata();\n+  prepare_metadata(&no_safepoint);\n@@ -136,1 +142,0 @@\n-  NoSafepointVerifier no_safepoint;\n@@ -570,1 +575,1 @@\n-    MutexLocker ml(mdo->extra_data_lock());\n+    MutexLocker ml(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n@@ -598,1 +603,1 @@\n-    MutexLocker ml(mdo->extra_data_lock());\n+    MutexLocker ml(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.cpp","additions":21,"deletions":16,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -464,1 +464,1 @@\n-  void prepare_metadata();\n+  void prepare_metadata(NoSafepointVerifier* no_safepoint);\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -595,1 +595,1 @@\n-    MutexLocker ml(mdo->extra_data_lock());\n+    MutexLocker ml(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -553,1 +553,1 @@\n-    MutexLocker ml(mdo->extra_data_lock());\n+    MutexLocker ml(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/interpreter\/interpreterRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1894,1 +1894,1 @@\n-  MutexLocker mu(mdo->extra_data_lock());\n+  MutexLocker mu(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2534,1 +2534,0 @@\n-      ConditionalMutexLocker ml(mdo->extra_data_lock(), !SafepointSynchronize::is_at_safepoint());\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1227,1 +1227,1 @@\n-    _extra_data_lock(Mutex::safepoint-2, \"MDOExtraData_lock\"),\n+    _extra_data_lock(Mutex::nosafepoint, \"MDOExtraData_lock\"),\n@@ -1515,0 +1515,1 @@\n+    \/\/ Mutex::_no_safepoint_check_flag\n@@ -1874,1 +1875,5 @@\n-  \/\/ TODO safe?\n+\n+  \/\/ Lock to modify extra data, and prevent Safepoint from breaking the lock\n+  MutexLocker ml(extra_data_lock(), Mutex::_no_safepoint_check_flag);\n+  NoSafepointVerifier no_safepoint;\n+\n@@ -1884,1 +1889,5 @@\n-  \/\/ TODO safe?\n+\n+  \/\/ Lock to modify extra data, and prevent Safepoint from breaking the lock\n+  MutexLocker ml(extra_data_lock(), Mutex::_no_safepoint_check_flag);\n+  NoSafepointVerifier no_safepoint;\n+\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2287,1 +2287,1 @@\n-                                                   MutexLocker ml(extra_data_lock());\n+                                                   MutexLocker ml(extra_data_lock(), Mutex::_no_safepoint_check_flag);\n@@ -2299,1 +2299,1 @@\n-                                                   MutexLocker ml(extra_data_lock());\n+                                                   MutexLocker ml(extra_data_lock(), Mutex::_no_safepoint_check_flag);\n@@ -2523,1 +2523,3 @@\n-    assert(JavaThread::current()->is_in_no_safepoint_scope(), \"must have NoSafepointVerifier inside lock scope\");\n+    assert(!Thread::current()->is_Java_thread() ||\n+           JavaThread::current()->is_in_no_safepoint_scope(),\n+           \"JavaThread must have NoSafepointVerifier inside lock scope\");\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1229,1 +1229,0 @@\n-    MutexLocker mu(THREAD, mdo->extra_data_lock());\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1801,1 +1801,1 @@\n-    MutexLocker ml(imm_mdo->extra_data_lock());\n+    MutexLocker ml(imm_mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n@@ -2148,1 +2148,1 @@\n-          MutexLocker ml(trap_mdo->extra_data_lock());\n+          MutexLocker ml(trap_mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n@@ -2334,1 +2334,1 @@\n-      MutexLocker ml(trap_mdo->extra_data_lock());\n+      MutexLocker ml(trap_mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/runtime\/deoptimization.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -617,1 +617,1 @@\n-        MutexLocker ml(trap_mdo->extra_data_lock());\n+        MutexLocker ml(trap_mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}