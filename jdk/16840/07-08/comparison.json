{"files":[{"patch":"@@ -196,9 +196,3 @@\n-  \/\/ We are about to lock for tty. But we will want to read the ProfileData\n-  \/\/ of the method. Hence, we must already now take the extra_data_lock, so\n-  \/\/ that we can keep the lock order. We must also prevent the lock from\n-  \/\/ being broken by a safepoint.\n-  MethodData* mdo = method()->method_data();\n-  MutexLocker ml(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n-  NoSafepointVerifier no_safepoint;\n-\n-  ttyLocker ttyl;  \/\/ keep the following output coherent\n+  \/\/ Keep output to st coherent: collect all lines and print at once.\n+  ResourceMark rm;\n+  stringStream ss;\n@@ -206,1 +200,1 @@\n-    method_printer.trace(method, s.bcp(), st);\n+    method_printer.trace(method, s.bcp(), &ss);\n@@ -208,0 +202,1 @@\n+  st->print(\"%s\", ss.as_string());\n@@ -602,4 +597,3 @@\n-    \/\/\/\/ Lock to read ProfileData, and ensure lock is not broken by a safepoint\n-    \/\/MutexLocker ml(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n-    \/\/NoSafepointVerifier no_safepoint;\n-    mdo->check_extra_data_locked();\n+    \/\/ Lock to read ProfileData, and ensure lock is not broken by a safepoint\n+    MutexLocker ml(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n+    NoSafepointVerifier no_safepoint;\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"}]}