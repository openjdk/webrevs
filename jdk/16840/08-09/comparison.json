{"files":[{"patch":"@@ -239,1 +239,1 @@\n-void CodeBlob::print_code() {\n+void CodeBlob::print_code_on(outputStream* st) {\n@@ -241,1 +241,1 @@\n-  Disassembler::decode(this, tty);\n+  Disassembler::decode(this, st);\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-  void print_code();\n+  void print_code_on(outputStream* st);\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -690,6 +690,9 @@\n-    ttyLocker ttyl;\n-    tty->print_cr(\"implicit exception happened at \" INTPTR_FORMAT, p2i(pc));\n-    print();\n-    method()->print_codes();\n-    print_code();\n-    print_pcs();\n+\n+    \/\/ Keep tty output consistent. To avoid ttyLocker, we buffer in stream, and print all at once.\n+    stringStream ss;\n+    ss.print_cr(\"implicit exception happened at \" INTPTR_FORMAT, p2i(pc));\n+    print_on(&ss);\n+    method()->print_codes_on(&ss);\n+    print_code_on(&ss);\n+    print_pcs_on(&ss);\n+    tty->print(\"%s\", ss.as_string()); \/\/ print all at once\n","filename":"src\/hotspot\/share\/code\/compiledMethod.cpp","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -230,1 +230,1 @@\n-  virtual void print_pcs() = 0;\n+  virtual void print_pcs_on(outputStream* st) = 0;\n","filename":"src\/hotspot\/share\/code\/compiledMethod.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1023,1 +1023,1 @@\n-      print_pcs();\n+      print_pcs_on(tty);\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -624,2 +624,1 @@\n-  void print_pcs() { print_pcs_on(tty); }\n-  void print_pcs_on(outputStream* st);\n+  virtual void print_pcs_on(outputStream* st) override final;\n@@ -638,2 +637,1 @@\n-  \/\/ void print_pcs()                             PRODUCT_RETURN;\n-  void print_pcs()                                { return; }\n+  virtual void print_pcs_on(outputStream* st) override final { return; }\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -162,8 +162,10 @@\n-      ttyLocker ttyl;\n-      tty->print_cr(\"Error in fill_from_frame: pc_desc for \"\n-                    INTPTR_FORMAT \" not found or invalid at %d\",\n-                    p2i(_frame.pc()), decode_offset);\n-      nm()->print();\n-      nm()->method()->print_codes();\n-      nm()->print_code();\n-      nm()->print_pcs();\n+      \/\/ Keep tty output consistent. To avoid ttyLocker, we buffer in stream, and print all at once.\n+      stringStream ss;\n+      ss.print_cr(\"Error in fill_from_frame: pc_desc for \"\n+                  INTPTR_FORMAT \" not found or invalid at %d\",\n+                  p2i(_frame.pc()), decode_offset);\n+      nm()->print_on(&ss);\n+      nm()->method()->print_codes_on(&ss);\n+      nm()->print_code_on(&ss);\n+      nm()->print_pcs_on(&ss);\n+      tty->print(\"%s\", ss.as_string()); \/\/ print all at once\n","filename":"src\/hotspot\/share\/runtime\/vframe.inline.hpp","additions":10,"deletions":8,"binary":false,"changes":18,"status":"modified"}]}