{"files":[{"patch":"@@ -196,0 +196,8 @@\n+  \/\/ We are about to lock for tty. But we will want to read the ProfileData\n+  \/\/ of the method. Hence, we must already now take the extra_data_lock, so\n+  \/\/ that we can keep the lock order. We must also prevent the lock from\n+  \/\/ being broken by a safepoint.\n+  MethodData* mdo = method()->method_data();\n+  MutexLocker ml(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n+  NoSafepointVerifier no_safepoint;\n+\n@@ -594,3 +602,4 @@\n-    \/\/ Lock to read ProfileData, and ensure lock is not broken by a safepoint\n-    MutexLocker ml(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n-    NoSafepointVerifier no_safepoint;\n+    \/\/\/\/ Lock to read ProfileData, and ensure lock is not broken by a safepoint\n+    \/\/MutexLocker ml(mdo->extra_data_lock(), Mutex::_no_safepoint_check_flag);\n+    \/\/NoSafepointVerifier no_safepoint;\n+    mdo->check_extra_data_locked();\n","filename":"src\/hotspot\/share\/interpreter\/bytecodeTracer.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -543,1 +543,1 @@\n-void Method::print_invocation_count() {\n+void Method::print_invocation_count(outputStream* st) {\n@@ -545,7 +545,7 @@\n-  if (is_static()) tty->print(\"static \");\n-  if (is_final()) tty->print(\"final \");\n-  if (is_synchronized()) tty->print(\"synchronized \");\n-  if (is_native()) tty->print(\"native \");\n-  tty->print(\"%s::\", method_holder()->external_name());\n-  name()->print_symbol_on(tty);\n-  signature()->print_symbol_on(tty);\n+  if (is_static())       { st->print(\"static \"); }\n+  if (is_final())        { st->print(\"final \"); }\n+  if (is_synchronized()) { st->print(\"synchronized \"); }\n+  if (is_native())       { st->print(\"native \"); }\n+  st->print(\"%s::\", method_holder()->external_name());\n+  name()->print_symbol_on(st);\n+  signature()->print_symbol_on(st);\n@@ -555,1 +555,1 @@\n-    tty->print(\" {%d}\", code_size());\n+    st->print(\" {%d}\", code_size());\n@@ -557,1 +557,1 @@\n-  tty->cr();\n+  st->cr();\n@@ -564,3 +564,3 @@\n-  tty->print_cr (\"  interpreter_invocation_count: \" INT32_FORMAT_W(11), interpreter_invocation_count());\n-  tty->print_cr (\"  invocation_counter:           \" INT32_FORMAT_W(11), invocation_count());\n-  tty->print_cr (\"  backedge_counter:             \" INT32_FORMAT_W(11), backedge_count());\n+  st->print_cr (\"  interpreter_invocation_count: \" INT32_FORMAT_W(11), interpreter_invocation_count());\n+  st->print_cr (\"  invocation_counter:           \" INT32_FORMAT_W(11), invocation_count());\n+  st->print_cr (\"  backedge_counter:             \" INT32_FORMAT_W(11), backedge_count());\n@@ -569,1 +569,1 @@\n-    tty->print_cr (\"  decompile_count:              \" UINT32_FORMAT_W(11), method_data()->decompile_count());\n+    st->print_cr (\"  decompile_count:              \" UINT32_FORMAT_W(11), method_data()->decompile_count());\n@@ -574,1 +574,1 @@\n-    tty->print_cr (\"  compiled_invocation_count:    \" INT64_FORMAT_W(11), compiled_invocation_count());\n+    st->print_cr (\"  compiled_invocation_count:    \" INT64_FORMAT_W(11), compiled_invocation_count());\n","filename":"src\/hotspot\/share\/oops\/method.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -450,1 +450,1 @@\n-  void print_invocation_count();\n+  void print_invocation_count(outputStream* st);\n","filename":"src\/hotspot\/share\/oops\/method.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -133,5 +133,10 @@\n-        ttyLocker ttyl;\n-        tty->print_cr(\"------------------------------------------------------------------------\");\n-        m->print_invocation_count();\n-        tty->print_cr(\"  mdo size: %d bytes\", m->method_data()->size_in_bytes());\n-        tty->cr();\n+\n+        \/\/ Instead of taking tty lock, we collect all lines into a string stream\n+        \/\/ and then print them all at once.\n+        ResourceMark rm2;\n+        stringStream ss;\n+\n+        ss.print_cr(\"------------------------------------------------------------------------\");\n+        m->print_invocation_count(&ss);\n+        ss.print_cr(\"  mdo size: %d bytes\", m->method_data()->size_in_bytes());\n+        ss.cr();\n@@ -140,2 +145,2 @@\n-          tty->fill_to(2);\n-          m->method_data()->parameters_type_data()->print_data_on(tty);\n+          ss.fill_to(2);\n+          m->method_data()->parameters_type_data()->print_data_on(&ss);\n@@ -143,1 +148,2 @@\n-        m->print_codes();\n+        m->print_codes_on(&ss);\n+        tty->print(\"%s\", ss.as_string()); \/\/ print all at once\n@@ -195,1 +201,1 @@\n-    if ((iic + cic) >= (uint64_t)MethodHistogramCutoff) m->print_invocation_count();\n+    if ((iic + cic) >= (uint64_t)MethodHistogramCutoff) m->print_invocation_count(tty);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":15,"deletions":9,"binary":false,"changes":24,"status":"modified"}]}