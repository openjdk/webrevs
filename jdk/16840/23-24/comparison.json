{"files":[{"patch":"@@ -34,0 +34,1 @@\n+#include \"oops\/methodData.inline.hpp\"\n","filename":"src\/hotspot\/share\/ci\/ciMethodData.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1882,0 +1882,13 @@\n+\n+#ifdef ASSERT\n+void MethodData::check_extra_data_locked() const {\n+    \/\/ Cast const away, just to be able to verify the lock\n+    \/\/ Usually we only want non-const accesses on the lock,\n+    \/\/ so this here is an exception.\n+    MethodData* self = (MethodData*)this;\n+    assert(self->extra_data_lock()->owned_by_self(), \"must have lock\");\n+    assert(!Thread::current()->is_Java_thread() ||\n+           JavaThread::current()->is_in_no_safepoint_scope(),\n+           \"JavaThread must have NoSafepointVerifier inside lock scope\");\n+}\n+#endif\n","filename":"src\/hotspot\/share\/oops\/methodData.cpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-#include \"runtime\/mutexLocker.hpp\"\n@@ -2314,7 +2313,1 @@\n-  uint arg_modified(int a)                       { \/\/ Lock and avoid breaking lock with Safepoint\n-                                                   MutexLocker ml(extra_data_lock(), Mutex::_no_safepoint_check_flag);\n-                                                   ArgInfoData *aid = arg_info();\n-                                                   assert(aid != nullptr, \"arg_info must be not null\");\n-                                                   assert(a >= 0 && a < aid->number_of_args(), \"valid argument number\");\n-                                                   return aid->arg_modified(a); }\n-\n+  uint arg_modified(int a);\n@@ -2325,7 +2318,1 @@\n-  void set_arg_modified(int a, uint v)           { \/\/ Lock and avoid breaking lock with Safepoint\n-                                                   MutexLocker ml(extra_data_lock(), Mutex::_no_safepoint_check_flag);\n-                                                   ArgInfoData *aid = arg_info();\n-                                                   assert(aid != nullptr, \"arg_info must be not null\");\n-                                                   assert(a >= 0 && a < aid->number_of_args(), \"valid argument number\");\n-                                                   aid->set_arg_modified(a, v); }\n-\n+  void set_arg_modified(int a, uint v);\n@@ -2542,12 +2529,1 @@\n-  void check_extra_data_locked() const {\n-#ifdef ASSERT\n-    \/\/ Cast const away, just to be able to verify the lock\n-    \/\/ Usually we only want non-const accesses on the lock,\n-    \/\/ so this here is an exception.\n-    MethodData* self = (MethodData*)this;\n-    assert(self->extra_data_lock()->owned_by_self(), \"must have lock\");\n-    assert(!Thread::current()->is_Java_thread() ||\n-           JavaThread::current()->is_in_no_safepoint_scope(),\n-           \"JavaThread must have NoSafepointVerifier inside lock scope\");\n-#endif\n-  }\n+  void check_extra_data_locked() const NOT_DEBUG_RETURN;\n","filename":"src\/hotspot\/share\/oops\/methodData.hpp","additions":3,"deletions":27,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"runtime\/mutexLocker.hpp\"\n@@ -56,0 +57,18 @@\n+inline uint MethodData::arg_modified(int a) {\n+  \/\/ Lock and avoid breaking lock with Safepoint\n+  MutexLocker ml(extra_data_lock(), Mutex::_no_safepoint_check_flag);\n+  ArgInfoData* aid = arg_info();\n+  assert(aid != nullptr, \"arg_info must be not null\");\n+  assert(a >= 0 && a < aid->number_of_args(), \"valid argument number\");\n+  return aid->arg_modified(a);\n+}\n+\n+inline void MethodData::set_arg_modified(int a, uint v) {\n+  \/\/ Lock and avoid breaking lock with Safepoint\n+  MutexLocker ml(extra_data_lock(), Mutex::_no_safepoint_check_flag);\n+  ArgInfoData* aid = arg_info();\n+  assert(aid != nullptr, \"arg_info must be not null\");\n+  assert(a >= 0 && a < aid->number_of_args(), \"valid argument number\");\n+  aid->set_arg_modified(a, v);\n+}\n+\n","filename":"src\/hotspot\/share\/oops\/methodData.inline.hpp","additions":20,"deletions":1,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -66,0 +66,1 @@\n+#include \"oops\/methodData.inline.hpp\"\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}