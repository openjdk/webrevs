{"files":[{"patch":"@@ -42,1 +42,1 @@\n-static PlatformMutex* GlobalChunkPoolMutex = nullptr;\n+static DeferredStatic<PlatformMutex> GlobalChunkPoolMutex;\n@@ -45,1 +45,1 @@\n-  GlobalChunkPoolMutex = new PlatformMutex();\n+  GlobalChunkPoolMutex.initialize();\n@@ -48,3 +48,8 @@\n-ChunkPoolLocker::ChunkPoolLocker() {\n-  assert(GlobalChunkPoolMutex != nullptr, \"must be initialized\");\n-  GlobalChunkPoolMutex->lock();\n+ChunkPoolLocker::ChunkPoolLocker(LockStrategy ls) {\n+  if (ls == LockStrategy::Lock) {\n+    GlobalChunkPoolMutex->lock();\n+    _locked = true;\n+  } else {\n+    precond(ls == LockStrategy::Try);\n+    _locked = GlobalChunkPoolMutex->try_lock();\n+  }\n@@ -54,1 +59,3 @@\n-  GlobalChunkPoolMutex->unlock();\n+  if (_locked) {\n+    GlobalChunkPoolMutex->unlock();\n+  }\n","filename":"src\/hotspot\/share\/memory\/arena.cpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -42,1 +42,5 @@\n-  ChunkPoolLocker();\n+  enum class LockStrategy { Lock, Try };\n+ private:\n+  bool _locked;\n+ public:\n+  ChunkPoolLocker(LockStrategy ls = LockStrategy::Lock);\n","filename":"src\/hotspot\/share\/memory\/arena.hpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -68,1 +68,5 @@\n-  ChunkPoolLocker lock;\n+  ChunkPoolLocker::LockStrategy ls = ChunkPoolLocker::LockStrategy::Lock;\n+  if (VMError::is_error_reported() && VMError::is_error_reported_in_current_thread()) {\n+    ls = ChunkPoolLocker::LockStrategy::Try;\n+  }\n+  ChunkPoolLocker cpl(ls);\n","filename":"src\/hotspot\/share\/nmt\/mallocTracker.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+#include \"utilities\/vmError.hpp\"\n@@ -61,1 +62,5 @@\n-    ChunkPoolLocker lock;\n+    ChunkPoolLocker::LockStrategy ls = ChunkPoolLocker::LockStrategy::Lock;\n+    if (VMError::is_error_reported() && VMError::is_error_reported_in_current_thread()) {\n+      ls = ChunkPoolLocker::LockStrategy::Try;\n+    }\n+    ChunkPoolLocker cpl(ls);\n","filename":"src\/hotspot\/share\/nmt\/nmtUsage.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+#include \"memory\/arena.hpp\"\n@@ -145,0 +146,15 @@\n+static void test_chunkpool_lock() {\n+  if (!MemTracker::enabled()) {\n+    tty->print_cr(\"Skipped\");\n+    return;\n+  }\n+  PrintNMTStatistics = true;\n+  {\n+    ChunkPoolLocker cpl;\n+    char* mem = (char*)os::malloc(100, mtTest);\n+    memset(mem - 16, 0, 100 + 16 + 2);\n+    os::free(mem);\n+  }\n+}\n+DEFINE_TEST(test_chunkpool_lock, COMMON_NMT_HEAP_CORRUPTION_MESSAGE_PREFIX);\n+\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_buffer_overflow_detection.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}