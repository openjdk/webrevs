{"files":[{"patch":"@@ -27,3 +27,6 @@\n- * @summary HttpClient throws NPE in AuthenticationFilter when parsing www-authenticate head\n- *\n- * @run main\/othervm EmptyAuthenticate\n+ * @summary Verifies that empty `WWW-Authenticate` header is correctly parsed\n+ * @library \/test\/jdk\/java\/net\/httpclient\/lib\n+ *          \/test\/lib\n+ * @build jdk.httpclient.test.lib.common.HttpServerAdapters\n+ *        jdk.test.lib.net.SimpleSSLContext\n+ * @run junit EmptyAuthenticate\n@@ -31,1 +34,10 @@\n-import com.sun.net.httpserver.HttpServer;\n+\n+import jdk.httpclient.test.lib.common.HttpServerAdapters;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters.HttpTestHandler;\n+import jdk.httpclient.test.lib.common.HttpServerAdapters.HttpTestServer;\n+import jdk.test.lib.net.SimpleSSLContext;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import javax.net.ssl.SSLContext;\n@@ -33,2 +45,0 @@\n-import java.io.OutputStream;\n-import java.net.InetSocketAddress;\n@@ -36,1 +46,0 @@\n-import java.net.URISyntaxException;\n@@ -38,0 +47,2 @@\n+import java.net.http.HttpClient.Version;\n+import java.net.http.HttpHeaders;\n@@ -40,0 +51,2 @@\n+import java.nio.charset.StandardCharsets;\n+import java.util.stream.Stream;\n@@ -41,18 +54,2 @@\n-public class EmptyAuthenticate {\n-\n-    public static void main(String[] args) throws IOException, URISyntaxException, InterruptedException {\n-        int port = 0;\n-\n-        \/\/start server:\n-        HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);\n-        port = server.getAddress().getPort();\n-        server.createContext(\"\/\", exchange -> {\n-            String response = \"test body\";\n-            \/\/this empty header will make the HttpClient throw NPE\n-            exchange.getResponseHeaders().add(\"www-authenticate\", \"\");\n-            exchange.sendResponseHeaders(401, response.length());\n-            OutputStream os = exchange.getResponseBody();\n-            os.write(response.getBytes());\n-            os.close();\n-        });\n-        server.start();\n+import static java.net.http.HttpClient.Builder.NO_PROXY;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -60,2 +57,7 @@\n-        HttpResponse<String> response = null;\n-        \/\/run client:\n+class EmptyAuthenticate {\n+\n+    private static final SSLContext SSL_CONTEXT = createSslContext();\n+\n+    private static final String WWW_AUTH_HEADER_NAME = \"WWW-Authenticate\";\n+\n+    private static SSLContext createSslContext() {\n@@ -63,11 +65,19 @@\n-            HttpClient httpClient = HttpClient.newHttpClient();\n-            HttpRequest request = HttpRequest.newBuilder(new URI(\"http:\/\/localhost:\" + port + \"\/\")).GET().build();\n-            \/\/this line will throw NPE (wrapped by IOException) when parsing empty www-authenticate response header in AuthenticationFilter:\n-            response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n-            boolean ok = !response.headers().firstValue(\"WWW-Authenticate\").isEmpty();\n-            if (!ok) {\n-                throw new RuntimeException(\"WWW-Authenicate missing\");\n-            }\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-            throw new RuntimeException(\"Test failed\");\n+            return new SimpleSSLContext().get();\n+        } catch (IOException exception) {\n+            throw new RuntimeException(exception);\n+        }\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"args\")\n+    void test(Version version, boolean secure) throws Exception {\n+        HttpTestServer server = createStartedServerRespondingWithEmptyWwwAuthHeader(version, secure);\n+        try (HttpClient client = createClient(version, secure)) {\n+            HttpRequest request = createRequest(server, secure);\n+            HttpResponse<Void> response = client.send(request, HttpResponse.BodyHandlers.discarding());\n+            HttpHeaders responseHeaders = response.headers();\n+            assertEquals(\n+                    \"\",\n+                    responseHeaders.firstValue(WWW_AUTH_HEADER_NAME).orElse(null),\n+                    () -> \"was expecting empty `%s` header in: %s\".formatted(\n+                            WWW_AUTH_HEADER_NAME, responseHeaders.map()));\n@@ -75,1 +85,1 @@\n-            server.stop(0);\n+            server.stop();\n@@ -78,0 +88,53 @@\n+\n+    static Stream<Arguments> args() {\n+        return Stream\n+                .of(Version.HTTP_1_1, Version.HTTP_2)\n+                .flatMap(version -> Stream\n+                        .of(true, false)\n+                        .map(secure -> Arguments.of(version, secure)));\n+    }\n+\n+    private static HttpTestServer createStartedServerRespondingWithEmptyWwwAuthHeader(Version version, boolean secure)\n+            throws IOException {\n+        HttpTestServer server = secure\n+                ? HttpTestServer.create(version, SSL_CONTEXT)\n+                : HttpTestServer.create(version);\n+        HttpTestHandler handler = new ServerHandlerRespondingWithEmptyWwwAuthHeader();\n+        server.addHandler(handler, \"\/\");\n+        server.start();\n+        return server;\n+    }\n+\n+    private static final class ServerHandlerRespondingWithEmptyWwwAuthHeader implements HttpTestHandler {\n+\n+        private int responseIndex = 0;\n+\n+        @Override\n+        public synchronized void handle(HttpServerAdapters.HttpTestExchange exchange) throws IOException {\n+            try (exchange) {\n+                exchange.getResponseHeaders().addHeader(WWW_AUTH_HEADER_NAME, \"\");\n+                byte[] responseBodyBytes = \"test body %d\"\n+                        .formatted(responseIndex)\n+                        .getBytes(StandardCharsets.US_ASCII);\n+                exchange.sendResponseHeaders(401, responseBodyBytes.length);\n+                exchange.getResponseBody().write(responseBodyBytes);\n+            } finally {\n+                responseIndex++;\n+            }\n+        }\n+\n+    }\n+\n+    private static HttpClient createClient(Version version, boolean secure) {\n+        HttpClient.Builder clientBuilder = HttpClient.newBuilder().version(version).proxy(NO_PROXY);\n+        if (secure) {\n+            clientBuilder.sslContext(SSL_CONTEXT);\n+        }\n+        return clientBuilder.build();\n+    }\n+\n+    private static HttpRequest createRequest(HttpTestServer server, boolean secure) {\n+        URI uri = URI.create(\"%s:\/\/%s\/\".formatted(secure ? \"https\" : \"http\", server.serverAuthority()));\n+        return HttpRequest.newBuilder(uri).version(server.getVersion()).GET().build();\n+    }\n+\n","filename":"test\/jdk\/java\/net\/httpclient\/EmptyAuthenticate.java","additions":102,"deletions":39,"binary":false,"changes":141,"status":"modified"}]}