{"files":[{"patch":"@@ -112,6 +112,8 @@\n-                    while (true) {\n-                        try (Arena arena = stack.pushFrame(JAVA_LONG.byteSize(), JAVA_LONG.byteAlignment())) {\n-                            \/\/ Try to assert no two vThreads get allocated the same stack space.\n-                            MemorySegment segment = arena.allocate(JAVA_LONG);\n-                            JAVA_LONG.varHandle().setVolatile(segment, 0L, threadId);\n-                            Assert.assertEquals(threadId, (long) JAVA_LONG.varHandle().getVolatile(segment, 0L));\n+                    while (!Thread.interrupted()) {\n+                        for (int i = 0; i < 1_000_000; i++) {\n+                            try (Arena arena = stack.pushFrame(JAVA_LONG.byteSize(), JAVA_LONG.byteAlignment())) {\n+                                \/\/ Try to assert no two vThreads get allocated the same stack space.\n+                                MemorySegment segment = arena.allocate(JAVA_LONG);\n+                                JAVA_LONG.varHandle().setVolatile(segment, 0L, threadId);\n+                                Assert.assertEquals(threadId, (long) JAVA_LONG.varHandle().getVolatile(segment, 0L));\n+                            }\n@@ -119,0 +121,1 @@\n+                        Thread.yield(); \/\/ make sure the driver thread gets a chance.\n@@ -123,1 +126,4 @@\n-                thread -> Assert.assertTrue(thread.isAlive()));\n+                thread -> {\n+                    Assert.assertTrue(thread.isAlive());\n+                    thread.interrupt();\n+                });\n","filename":"test\/jdk\/java\/foreign\/TestBufferStack.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"}]}