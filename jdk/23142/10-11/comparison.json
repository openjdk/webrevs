{"files":[{"patch":"@@ -40,0 +40,1 @@\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n@@ -44,2 +45,4 @@\n-        BufferStack stack = new BufferStack(256);\n-        try (Arena frame1 = stack.pushFrame(2 * JAVA_INT.byteSize(), JAVA_INT.byteAlignment())) {\n+        int stackSize = 128;\n+        BufferStack stack = new BufferStack(stackSize);\n+        MemorySegment stackSegment;\n+        try (Arena frame1 = stack.pushFrame(3 * JAVA_INT.byteSize(), JAVA_INT.byteAlignment())) {\n@@ -48,1 +51,2 @@\n-            Assert.assertEquals(segment11.byteSize(), 4);\n+            Assert.assertEquals(segment11.scope(), frame1.scope());\n+            Assert.assertEquals(segment11.byteSize(), JAVA_INT.byteSize());\n@@ -50,0 +54,1 @@\n+            stackSegment = segment11.reinterpret(stackSize);\n@@ -52,3 +57,3 @@\n-            Assert.assertEquals(segment12.address(), segment11.address() + 4);\n-            Assert.assertEquals(segment12.byteSize(), 4);\n-            Assert.assertEquals(segment12.scope(), segment11.scope());\n+            Assert.assertEquals(segment12.address(), segment11.address() + JAVA_INT.byteSize());\n+            Assert.assertEquals(segment12.byteSize(), JAVA_INT.byteSize());\n+            Assert.assertEquals(segment12.scope(), frame1.scope());\n@@ -57,2 +62,3 @@\n-            MemorySegment segment21;\n-            try (Arena frame2 = stack.pushFrame(2 * JAVA_INT.byteSize(), JAVA_INT.byteAlignment())) {\n+            MemorySegment segment2;\n+            try (Arena frame2 = stack.pushFrame(JAVA_LONG.byteSize(), JAVA_LONG.byteAlignment())) {\n+                Assert.assertNotEquals(frame2.scope(), frame1.scope());\n@@ -60,11 +66,5 @@\n-                segment21 = frame2.allocate(JAVA_INT);\n-                Assert.assertEquals(segment21.address(), segment12.address() + 4);\n-                Assert.assertEquals(segment21.byteSize(), 4);\n-                Assert.assertNotEquals(segment21.scope(), segment12.scope());\n-                segment21.set(JAVA_INT, 0, 1);\n-\n-                MemorySegment segment22 = frame2.allocate(JAVA_INT);\n-                Assert.assertEquals(segment22.address(), segment21.address() + 4);\n-                Assert.assertEquals(segment22.byteSize(), 4);\n-                Assert.assertEquals(segment22.scope(), segment21.scope());\n-                segment22.set(JAVA_INT, 0, 1);\n+                segment2 = frame2.allocate(JAVA_LONG);\n+                Assert.assertEquals(segment2.address(), segment12.address() + \/*segment12 size + frame 1 spare + alignment constraint*\/ 3 * JAVA_INT.byteSize());\n+                Assert.assertEquals(segment2.byteSize(), JAVA_LONG.byteSize());\n+                Assert.assertEquals(segment2.scope(), frame2.scope());\n+                segment2.set(JAVA_LONG, 0, 1);\n@@ -76,2 +76,2 @@\n-            Assert.assertThrows(IllegalStateException.class, () -> segment21.get(JAVA_INT, 0));\n-            \/\/ A new stack frame allocates at the same location the previous did.\n+            Assert.assertThrows(IllegalStateException.class, () -> segment2.get(JAVA_INT, 0));\n+            \/\/ A new stack frame allocates at the same location (but different scope) as the previous did.\n@@ -79,2 +79,11 @@\n-                MemorySegment segment31 = frame3.allocate(JAVA_INT);\n-                Assert.assertEquals(segment21.address(), segment12.address() + 4);\n+                MemorySegment segment3 = frame3.allocate(JAVA_INT);\n+                Assert.assertEquals(segment3.scope(), frame3.scope());\n+                Assert.assertEquals(segment3.address(), segment12.address() + 2 * JAVA_INT.byteSize());\n+            }\n+\n+            \/\/ Fallback arena behaves like regular stack frame.\n+            MemorySegment outOfStack;\n+            try (Arena hugeFrame = stack.pushFrame(1024, 4)) {\n+                outOfStack = hugeFrame.allocate(4);\n+                Assert.assertEquals(outOfStack.scope(), hugeFrame.scope());\n+                Assert.assertTrue(outOfStack.asOverlappingSlice(stackSegment).isEmpty());\n@@ -82,0 +91,1 @@\n+            Assert.assertThrows(IllegalStateException.class, () -> outOfStack.get(JAVA_INT, 0));\n","filename":"test\/jdk\/java\/foreign\/TestBufferStack.java","additions":33,"deletions":23,"binary":false,"changes":56,"status":"modified"}]}