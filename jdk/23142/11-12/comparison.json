{"files":[{"patch":"@@ -38,0 +38,3 @@\n+import java.time.Duration;\n+import java.util.Arrays;\n+import java.util.stream.IntStream;\n@@ -41,0 +44,1 @@\n+import static java.time.temporal.ChronoUnit.SECONDS;\n@@ -98,0 +102,20 @@\n+\n+    @Test\n+    public void stress() throws InterruptedException {\n+        BufferStack stack = new BufferStack(256);\n+        Thread[] vThreads = IntStream.range(0, 1024).mapToObj(_ ->\n+                Thread.ofVirtual().start(() -> {\n+                    long threadId = Thread.currentThread().threadId();\n+                    while (true) {\n+                        try (Arena arena = stack.pushFrame(JAVA_LONG.byteSize(), JAVA_LONG.byteAlignment())) {\n+                            \/\/ Try to assert no two vThreads get allocated the same stack space.\n+                            MemorySegment segment = arena.allocate(JAVA_LONG);\n+                            JAVA_LONG.varHandle().setVolatile(segment, 0L, threadId);\n+                            Assert.assertEquals(threadId, (long) JAVA_LONG.varHandle().getVolatile(segment, 0L));\n+                        }\n+                    }\n+                })).toArray(Thread[]::new);\n+        Thread.sleep(Duration.of(10, SECONDS));\n+        Arrays.stream(vThreads).forEach(\n+                thread -> Assert.assertTrue(thread.isAlive()));\n+    }\n","filename":"test\/jdk\/java\/foreign\/TestBufferStack.java","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"}]}