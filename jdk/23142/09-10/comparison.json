{"files":[{"patch":"@@ -0,0 +1,24 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n@@ -4,1 +28,1 @@\n-import jdk.internal.misc.TerminatingThreadLocal;\n+import jdk.internal.misc.CarrierThreadLocal;\n@@ -19,1 +43,1 @@\n-    private final TerminatingThreadLocal<PerThread> tl = new TerminatingThreadLocal<>() {\n+    private final ThreadLocal<PerThread> tl = new CarrierThreadLocal<>() {\n@@ -24,5 +48,0 @@\n-\n-        @Override\n-        protected void threadTerminated(PerThread value) {\n-            value.close();\n-        }\n@@ -38,1 +57,0 @@\n-        private final Arena owner = Arena.ofConfined();\n@@ -42,5 +60,1 @@\n-            this.stack = new SlicingAllocator(owner.allocate(size));\n-        }\n-\n-        void close() {\n-            owner.close();\n+            this.stack = new SlicingAllocator(Arena.ofAuto().allocate(size));\n@@ -89,1 +103,0 @@\n-                assertOrder();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BufferStack.java","additions":27,"deletions":14,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @modules java.base\/jdk.internal.foreign.abi\n+ * @run testng TestBufferStack\n+ *\/\n+\n+import jdk.internal.foreign.abi.BufferStack;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n+\n+public class TestBufferStack {\n+    @Test\n+    public void testScopedAllocation() {\n+        BufferStack stack = new BufferStack(256);\n+        try (Arena frame1 = stack.pushFrame(2 * JAVA_INT.byteSize(), JAVA_INT.byteAlignment())) {\n+            \/\/ Segments have expected sizes and are accessible and allocated consecutively in the same scope.\n+            MemorySegment segment11 = frame1.allocate(JAVA_INT);\n+            Assert.assertEquals(segment11.byteSize(), 4);\n+            segment11.set(JAVA_INT, 0, 1);\n+\n+            MemorySegment segment12 = frame1.allocate(JAVA_INT);\n+            Assert.assertEquals(segment12.address(), segment11.address() + 4);\n+            Assert.assertEquals(segment12.byteSize(), 4);\n+            Assert.assertEquals(segment12.scope(), segment11.scope());\n+            segment12.set(JAVA_INT, 0, 1);\n+\n+            MemorySegment segment21;\n+            try (Arena frame2 = stack.pushFrame(2 * JAVA_INT.byteSize(), JAVA_INT.byteAlignment())) {\n+                \/\/ same here, but a new scope.\n+                segment21 = frame2.allocate(JAVA_INT);\n+                Assert.assertEquals(segment21.address(), segment12.address() + 4);\n+                Assert.assertEquals(segment21.byteSize(), 4);\n+                Assert.assertNotEquals(segment21.scope(), segment12.scope());\n+                segment21.set(JAVA_INT, 0, 1);\n+\n+                MemorySegment segment22 = frame2.allocate(JAVA_INT);\n+                Assert.assertEquals(segment22.address(), segment21.address() + 4);\n+                Assert.assertEquals(segment22.byteSize(), 4);\n+                Assert.assertEquals(segment22.scope(), segment21.scope());\n+                segment22.set(JAVA_INT, 0, 1);\n+\n+                \/\/ Frames must be closed in stack order.\n+                Assert.assertThrows(IllegalStateException.class, frame1::close);\n+            }\n+            \/\/ Scope is closed here, inner segments throw.\n+            Assert.assertThrows(IllegalStateException.class, () -> segment21.get(JAVA_INT, 0));\n+            \/\/ A new stack frame allocates at the same location the previous did.\n+            try (Arena frame3 = stack.pushFrame(2 * JAVA_INT.byteSize(), JAVA_INT.byteAlignment())) {\n+                MemorySegment segment31 = frame3.allocate(JAVA_INT);\n+                Assert.assertEquals(segment21.address(), segment12.address() + 4);\n+            }\n+\n+            \/\/ Outer segments are still accessible.\n+            segment11.get(JAVA_INT, 0);\n+            segment12.get(JAVA_INT, 0);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/foreign\/TestBufferStack.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"}]}