{"files":[{"patch":"@@ -81,1 +81,1 @@\n-            private final long tos;\n+            private final long topOfStack;\n@@ -91,1 +91,1 @@\n-                tos = stack.currentOffset();\n+                topOfStack = stack.currentOffset();\n@@ -96,2 +96,2 @@\n-                if (tos != stack.currentOffset())\n-                    throw new IllegalStateException(\"Out of order access: frame not TOS\");\n+                if (topOfStack != stack.currentOffset())\n+                    throw new IllegalStateException(\"Out of order access: frame not top-of-stack\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/BufferStack.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -7,3 +7,1 @@\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n+ * published by the Free Software Foundation.\n@@ -29,0 +27,1 @@\n+ * @build NativeTestHelper TestBufferStack\n@@ -37,0 +36,2 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n@@ -38,0 +39,2 @@\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.invoke.MethodHandle;\n@@ -42,2 +45,2 @@\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-import static java.lang.foreign.ValueLayout.JAVA_LONG;\n+import static java.lang.foreign.MemoryLayout.structLayout;\n+import static java.lang.foreign.ValueLayout.*;\n@@ -46,1 +49,1 @@\n-public class TestBufferStack {\n+public class TestBufferStack extends NativeTestHelper {\n@@ -122,0 +125,26 @@\n+\n+    static {\n+        System.loadLibrary(\"TestBufferStack\");\n+    }\n+\n+    private static final MemoryLayout HVAPoint3D = structLayout(NativeTestHelper.C_DOUBLE, C_DOUBLE, C_DOUBLE);\n+    private static final MemorySegment UPCALL_MH = upcallStub(TestBufferStack.class, \"recurse\", FunctionDescriptor.of(HVAPoint3D, C_INT));\n+    private static final MethodHandle DOWNCALL_MH = downcallHandle(\"recurse\", FunctionDescriptor.of(HVAPoint3D, C_INT, ADDRESS));\n+\n+    public static MemorySegment recurse(int depth) {\n+        try {\n+            return (MemorySegment) DOWNCALL_MH.invokeExact((SegmentAllocator) Arena.ofAuto(), depth, UPCALL_MH);\n+        } catch (Throwable e) {\n+            throw new RuntimeException(e);\n+        }\n+    }\n+\n+    @Test\n+    public void testDeepStack() throws Throwable {\n+        \/\/ Each downcall and upcall require 48 bytes of stack.\n+        \/\/ After five allocations we start falling back.\n+        MemorySegment point = recurse(10);\n+        Assert.assertEquals(point.getAtIndex(C_DOUBLE, 0), 12.0);\n+        Assert.assertEquals(point.getAtIndex(C_DOUBLE, 1), 11.0);\n+        Assert.assertEquals(point.getAtIndex(C_DOUBLE, 2), 10.0);\n+    }\n","filename":"test\/jdk\/java\/foreign\/TestBufferStack.java","additions":35,"deletions":6,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -0,0 +1,39 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"export.h\"\n+\n+typedef struct { double x, y, z; } HVAPoint3D;\n+\n+EXPORT HVAPoint3D recurse(int depth, HVAPoint3D (*cb)(int)) {\n+  if (depth == 0) {\n+    HVAPoint3D result = { 2, 1, 0};\n+    return result;\n+  }\n+\n+  HVAPoint3D result = cb(depth - 1);\n+  result.x += 1;\n+  result.y += 1;\n+  result.z += 1;\n+  return result;\n+}\n","filename":"test\/jdk\/java\/foreign\/libTestBufferStack.c","additions":39,"deletions":0,"binary":false,"changes":39,"status":"added"}]}