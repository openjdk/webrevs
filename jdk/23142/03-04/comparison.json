{"files":[{"patch":"@@ -54,1 +54,1 @@\n-@Fork(value = 1, jvmArgs = {\"-Xlog:gc\", \"--enable-native-access=ALL-UNNAMED\", \"-Djava.library.path=micro\/native\"})\n+@Fork(value = 1, jvmArgs = {\"--enable-native-access=ALL-UNNAMED\", \"-Djava.library.path=micro\/native\"})\n@@ -60,2 +60,2 @@\n-    private static final MethodHandle MH_UNIT_ROTATED_BY_VALUE;\n-    private static final MethodHandle MH_UNIT_ROTATED_BY_PTR;\n+    private static final MethodHandle MH_UNIT_BY_VALUE;\n+    private static final MethodHandle MH_UNIT_BY_PTR;\n@@ -67,3 +67,3 @@\n-        MH_UNIT_ROTATED_BY_VALUE = abi.downcallHandle(\n-                loaderLibs.findOrThrow(\"unit_rotated\"),\n-                FunctionDescriptor.of(POINT_LAYOUT, C_DOUBLE)\n+        MH_UNIT_BY_VALUE = abi.downcallHandle(\n+                loaderLibs.findOrThrow(\"unit\"),\n+                FunctionDescriptor.of(POINT_LAYOUT)\n@@ -71,3 +71,3 @@\n-        MH_UNIT_ROTATED_BY_PTR = abi.downcallHandle(\n-                loaderLibs.findOrThrow(\"unit_rotated_ptr\"),\n-                FunctionDescriptor.ofVoid(ValueLayout.ADDRESS, C_DOUBLE)\n+        MH_UNIT_BY_PTR = abi.downcallHandle(\n+                loaderLibs.findOrThrow(\"unit_ptr\"),\n+                FunctionDescriptor.ofVoid(ValueLayout.ADDRESS)\n@@ -77,2 +77,0 @@\n-    static final int NUM_CIRCLE_POINTS = 100;\n-\n@@ -80,1 +78,1 @@\n-    MemorySegment points = arena.allocate(POINT_LAYOUT, NUM_CIRCLE_POINTS);\n+    MemorySegment point = arena.allocate(POINT_LAYOUT);\n@@ -88,12 +86,4 @@\n-    @OperationsPerInvocation(NUM_CIRCLE_POINTS)\n-    public MemorySegment byValue() throws Throwable {\n-        for (int i = 0; i < NUM_CIRCLE_POINTS; i++) {\n-            double phi = 2 * Math.PI * i \/ NUM_CIRCLE_POINTS;\n-            \/\/ points[i] = unit_rotated(phi);\n-            MemorySegment dest = points.asSlice(i * POINT_LAYOUT.byteSize(), POINT_LAYOUT.byteSize());\n-            MemorySegment unused =\n-                    (MemorySegment) MH_UNIT_ROTATED_BY_VALUE.invokeExact(\n-                            (SegmentAllocator) (_, _) -> dest,\n-                            phi);\n-        }\n-        return points;\n+    public void byValue() throws Throwable {\n+        \/\/ point = unit();\n+        MemorySegment unused = (MemorySegment) MH_UNIT_BY_VALUE.invokeExact(\n+                (SegmentAllocator) (_, _) -> point);\n@@ -103,9 +93,3 @@\n-    @OperationsPerInvocation(NUM_CIRCLE_POINTS)\n-    public MemorySegment byPtr() throws Throwable {\n-        for (int i = 0; i < NUM_CIRCLE_POINTS; i++) {\n-            double phi = 2 * Math.PI * i \/ NUM_CIRCLE_POINTS;\n-            \/\/ unit_rotated_ptr(&points[i], phi);\n-            MemorySegment dest = points.asSlice(i * POINT_LAYOUT.byteSize(), POINT_LAYOUT.byteSize());\n-            MH_UNIT_ROTATED_BY_PTR.invokeExact(dest, phi);\n-        }\n-        return points;\n+    public void byPtr() throws Throwable {\n+        \/\/ unit_ptr(&point);\n+        MH_UNIT_BY_PTR.invokeExact(point);\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadByValue.java","additions":17,"deletions":33,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -25,1 +25,0 @@\n-#include \"math.h\"\n@@ -32,2 +31,2 @@\n-EXPORT DoublePoint unit_rotated(double phi) {\n-    DoublePoint result = { cos(phi), sin(phi) };\n+EXPORT DoublePoint unit() {\n+    DoublePoint result = { 1, 0 };\n@@ -37,2 +36,2 @@\n-EXPORT void unit_rotated_ptr(DoublePoint* out, double phi) {\n-  *out = unit_rotated(phi);\n+EXPORT void unit_ptr(DoublePoint* out) {\n+  *out = unit();\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/libCallOverheadByValue.c","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}