{"files":[{"patch":"@@ -3577,0 +3577,4 @@\n+  if (msg == nullptr && store->as_Mem()->is_mismatched_access()) {\n+    msg = \"mismatched store\";\n+  }\n+\n@@ -3599,1 +3603,2 @@\n-  BasicType t = store->as_Mem()->memory_type();\n+  BasicType t = msg == nullptr ?\n+    store->adr_type()->isa_aryptr()->elem()->array_element_basic_type() : T_VOID;\n@@ -3645,1 +3650,1 @@\n-        if (type2aelembytes(store->as_Mem()->memory_type(), true) != (1 << n->in(2)->get_int())) {\n+        if (type2aelembytes(t, true) != (1 << n->in(2)->get_int())) {\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":7,"deletions":2,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,254 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.loopopts;\n+\n+import java.lang.foreign.*;\n+import java.util.*;\n+import jdk.test.lib.Asserts;\n+import compiler.lib.ir_framework.*;\n+\n+\/**\n+ * @test\n+ * @bug 8351468\n+ * @summary Test replacement of array-filling loops with intrinsic calls in the\n+ *          face of matching and mismatching stores.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.loopopts.TestArrayFillIntrinsic\n+ *\/\n+\n+public class TestArrayFillIntrinsic {\n+\n+    public static void main(String[] args) {\n+        \/\/ Disabling unrolling is necessary for test robustness, otherwise the\n+        \/\/ compiler might decide to unroll the array-filling loop instead of\n+        \/\/ replacing it with an intrinsic call even if OptimizeFill is enabled.\n+        TestFramework.runWithFlags(\"-XX:LoopUnrollLimit=0\", \"-XX:+OptimizeFill\");\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"(arrayof_)?jbyte_fill\", \"1\"})\n+    static void testFillBooleanArray(boolean[] array, boolean val) {\n+        for (int i = 0; i < array.length; i++) {\n+            array[i] = val;\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"(arrayof_)?jbyte_fill\", \"1\"})\n+    static void testFillByteArray(byte[] array, byte val) {\n+        for (int i = 0; i < array.length; i++) {\n+            array[i] = val;\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"(arrayof_)?jshort_fill\", \"1\"})\n+    static void testFillCharArray(char[] array, char val) {\n+        for (int i = 0; i < array.length; i++) {\n+            array[i] = val;\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"(arrayof_)?jshort_fill\", \"1\"})\n+    static void testFillShortArray(short[] array, short val) {\n+        for (int i = 0; i < array.length; i++) {\n+            array[i] = val;\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"(arrayof_)?jint_fill\", \"1\"})\n+    static void testFillIntArray(int[] array, int val) {\n+        for (int i = 0; i < array.length; i++) {\n+            array[i] = val;\n+        }\n+    }\n+\n+    @Test\n+    @IR(applyIfPlatformOr = {\"x64\", \"true\", \"aarch64\", \"true\", \"riscv64\", \"true\"},\n+        counts = {IRNode.CALL_OF, \"(arrayof_)?jint_fill\", \"1\"})\n+    static void testFillFloatArray(float[] array, float val) {\n+        for (int i = 0; i < array.length; i++) {\n+            array[i] = val;\n+        }\n+    }\n+\n+    @Run(test = {\"testFillByteArray\",\n+                 \"testFillBooleanArray\",\n+                 \"testFillCharArray\",\n+                 \"testFillShortArray\",\n+                 \"testFillIntArray\",\n+                 \"testFillFloatArray\"})\n+    public void runPositiveTests() {\n+        Random r = RunInfo.getRandom();\n+        int N = r.ints(1, 1024).findFirst().getAsInt();\n+        {\n+            boolean[] array = new boolean[N];\n+            boolean val = r.nextBoolean();\n+            testFillBooleanArray(array, val);\n+            for (int i = 0; i < array.length; i++) {\n+                Asserts.assertEquals(val, array[i]);\n+            }\n+        }\n+        {\n+            byte[] array = new byte[N];\n+            byte val = (byte)r.nextInt();\n+            testFillByteArray(array, val);\n+            for (int i = 0; i < array.length; i++) {\n+                Asserts.assertEquals(val, array[i]);\n+            }\n+        }\n+        {\n+            char[] array = new char[N];\n+            char val = (char)r.nextInt();\n+            testFillCharArray(array, val);\n+            for (int i = 0; i < array.length; i++) {\n+                Asserts.assertEquals(val, array[i]);\n+            }\n+        }\n+        {\n+            short[] array = new short[N];\n+            short val = (short)r.nextInt();\n+            testFillShortArray(array, val);\n+            for (int i = 0; i < array.length; i++) {\n+                Asserts.assertEquals(val, array[i]);\n+            }\n+        }\n+        {\n+            int[] array = new int[N];\n+            int val = r.nextInt();\n+            testFillIntArray(array, val);\n+            for (int i = 0; i < array.length; i++) {\n+                Asserts.assertEquals(val, array[i]);\n+            }\n+        }\n+        {\n+            float[] array = new float[N];\n+            float val = r.nextFloat();\n+            testFillFloatArray(array, val);\n+            for (int i = 0; i < array.length; i++) {\n+                Asserts.assertEquals(val, array[i]);\n+            }\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.CALL_OF, \"(arrayof_)?.*_fill\"})\n+    static void testFillShortArrayWithByte(MemorySegment array, int n, byte val) {\n+        for (int i = 0; i < n; i++) {\n+            array.setAtIndex(ValueLayout.JAVA_BYTE, i, val);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.CALL_OF, \"(arrayof_)?.*_fill\"})\n+    static void testFillIntArrayWithByte(MemorySegment array, int n, byte val) {\n+        for (int i = 0; i < n; i++) {\n+            array.setAtIndex(ValueLayout.JAVA_BYTE, i, val);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.CALL_OF, \"(arrayof_)?.*_fill\"})\n+    static void testFillIntArrayWithShort(MemorySegment array, int n, short val) {\n+        for (int i = 0; i < n; i++) {\n+            array.setAtIndex(ValueLayout.JAVA_SHORT, i, val);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.CALL_OF, \"(arrayof_)?.*_fill\"})\n+    static void testFillByteArrayWithBoolean(MemorySegment array, int n, boolean val) {\n+        for (int i = 0; i < n; i++) {\n+            array.setAtIndex(ValueLayout.JAVA_BOOLEAN, i, val);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.CALL_OF, \"(arrayof_)?.*_fill\"})\n+    static void testFillShortArrayWithChar(MemorySegment array, int n, char val) {\n+        for (int i = 0; i < n; i++) {\n+            array.setAtIndex(ValueLayout.JAVA_CHAR, i, val);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.CALL_OF, \"(arrayof_)?.*_fill\"})\n+    static void testFillCharArrayWithShort(MemorySegment array, int n, short val) {\n+        for (int i = 0; i < n; i++) {\n+            array.setAtIndex(ValueLayout.JAVA_SHORT, i, val);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.CALL_OF, \"(arrayof_)?.*_fill\"})\n+    static void testFillIntArrayWithFloat(MemorySegment array, int n, float val) {\n+        for (int i = 0; i < n; i++) {\n+            array.setAtIndex(ValueLayout.JAVA_FLOAT, i, val);\n+        }\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.CALL_OF, \"(arrayof_)?.*_fill\"})\n+    static void testFillFloatArrayWithInt(MemorySegment array, int n, int val) {\n+        for (int i = 0; i < n; i++) {\n+            array.setAtIndex(ValueLayout.JAVA_INT, i, val);\n+        }\n+    }\n+\n+    @Run(test = {\"testFillShortArrayWithByte\",\n+                 \"testFillIntArrayWithByte\",\n+                 \"testFillIntArrayWithShort\",\n+                 \"testFillByteArrayWithBoolean\",\n+                 \"testFillShortArrayWithChar\",\n+                 \"testFillCharArrayWithShort\",\n+                 \"testFillIntArrayWithFloat\",\n+                 \"testFillFloatArrayWithInt\"})\n+    public void runTypeMismatchTests() {\n+        Random r = RunInfo.getRandom();\n+        int N = r.ints(1, 1024).findFirst().getAsInt();\n+        testFillShortArrayWithByte(MemorySegment.ofArray(new short[N]), N,\n+                                   (byte)r.nextInt());\n+        testFillIntArrayWithByte(MemorySegment.ofArray(new int[N]), N,\n+                                 (byte)r.nextInt());\n+        testFillIntArrayWithShort(MemorySegment.ofArray(new int[N]), N,\n+                                  (short)r.nextInt());\n+        testFillByteArrayWithBoolean(MemorySegment.ofArray(new byte[N]), N,\n+                                     r.nextBoolean());\n+        testFillShortArrayWithChar(MemorySegment.ofArray(new short[N]), N,\n+                                   (char)r.nextInt());\n+        testFillCharArrayWithShort(MemorySegment.ofArray(new char[N]), N,\n+                                   (short)r.nextInt());\n+        testFillIntArrayWithFloat(MemorySegment.ofArray(new int[N]), N,\n+                                  r.nextFloat());\n+        testFillFloatArrayWithInt(MemorySegment.ofArray(new float[N]), N,\n+                                  r.nextInt());\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestArrayFillIntrinsic.java","additions":254,"deletions":0,"binary":false,"changes":254,"status":"added"}]}