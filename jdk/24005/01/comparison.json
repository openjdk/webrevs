{"files":[{"patch":"@@ -3851,1 +3851,1 @@\n-  BasicType t = store->as_Mem()->memory_type();\n+  BasicType t = store->adr_type()->isa_aryptr()->elem()->array_element_basic_type();\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,212 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.loopopts;\n+\n+import jdk.test.lib.Asserts;\n+\n+\/**\n+ * @test\n+ * @bug 8351468\n+ * @summary Test that loads anti-dependent on array fill intrinsics are\n+ *          scheduled correctly, for different load and array fill types.\n+ *          See detailed comments in testShort() below.\n+ * @requires vm.compiler2.enabled\n+ * @library \/test\/lib\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation\n+ *                   -XX:CompileOnly=compiler.loopopts.TestArrayFillAntiDependence::test*\n+ *                   -XX:CompileCommand=quiet -XX:LoopUnrollLimit=0 -XX:+OptimizeFill\n+ *                   compiler.loopopts.TestArrayFillAntiDependence\n+ * @run main\/othervm compiler.loopopts.TestArrayFillAntiDependence\n+ *\/\n+\n+public class TestArrayFillAntiDependence {\n+\n+    static int N = 10;\n+    static short M = 4;\n+    static boolean BOOLEAN_VAL = true;\n+    static char CHAR_VAL = 42;\n+    static float FLOAT_VAL = 42.0f;\n+    static double DOUBLE_VAL = 42.0;\n+    static byte BYTE_VAL = 42;\n+    static short SHORT_VAL = 42;\n+    static int INT_VAL = 42;\n+    static long LONG_VAL = 42;\n+\n+    static boolean testBoolean(int pos, int samePos) {\n+        assert pos == samePos;\n+        boolean total = false;\n+        boolean[] array = new boolean[N];\n+        array[pos] = BOOLEAN_VAL;\n+        for (int i = 0; i < M; i++) {\n+            total |= array[samePos];\n+            for (int t = 0; t < array.length; t++) {\n+                array[t] = false;\n+            }\n+        }\n+        return total;\n+    }\n+\n+    static char testChar(int pos, int samePos) {\n+        assert pos == samePos;\n+        char total = 0;\n+        char[] array = new char[N];\n+        array[pos] = CHAR_VAL;\n+        for (int i = 0; i < M; i++) {\n+            total += array[samePos];\n+            for (int t = 0; t < array.length; t++) {\n+                array[t] = 0;\n+            }\n+        }\n+        return total;\n+    }\n+\n+    static float testFloat(int pos, int samePos) {\n+        assert pos == samePos;\n+        float total = 0.0f;\n+        float[] array = new float[N];\n+        array[pos] = FLOAT_VAL;\n+        for (int i = 0; i < M; i++) {\n+            total += array[samePos];\n+            for (int t = 0; t < array.length; t++) {\n+                array[t] = 0.0f;\n+            }\n+        }\n+        return total;\n+    }\n+\n+    static double testDouble(int pos, int samePos) {\n+        assert pos == samePos;\n+        double total = 0.0;\n+        double[] array = new double[N];\n+        array[pos] = DOUBLE_VAL;\n+        for (int i = 0; i < M; i++) {\n+            total += array[samePos];\n+            for (int t = 0; t < array.length; t++) {\n+                array[t] = 0.0;\n+            }\n+        }\n+        return total;\n+    }\n+\n+    static byte testByte(int pos, int samePos) {\n+        assert pos == samePos;\n+        byte total = 0;\n+        byte[] array = new byte[N];\n+        array[pos] = BYTE_VAL;\n+        for (int i = 0; i < M; i++) {\n+            total += array[samePos];\n+            for (int t = 0; t < array.length; t++) {\n+                array[t] = 0;\n+            }\n+        }\n+        return total;\n+    }\n+\n+    static short testShort(int pos, int samePos) {\n+        \/\/ This pre-condition is necessary to reproduce the miscompilation, but\n+        \/\/ should not be exploited by C2 for optimization.\n+        assert pos == samePos;\n+        short total = 0;\n+        short[] array = new short[N];\n+        array[pos] = SHORT_VAL;\n+        for (int i = 0; i < M; i++) {\n+            \/\/ This load is wrongly scheduled after the loop below, which is\n+            \/\/ transformed into a call to arrayof_jshort_fill and clears the\n+            \/\/ entire array. As a consequence, the function returns 0 instead of\n+            \/\/ the expected SHORT_VAL.\n+            \/\/ The load is wrongly allowed to be moved beyond the loop\n+            \/\/ (arrayof_jshort_fill call) because their anti-dependence is\n+            \/\/ missed. This is because the call operates on a different memory\n+            \/\/ slice (char[] instead of the expected short[]).\n+            total += array[samePos];\n+            for (int t = 0; t < array.length; t++) {\n+                array[t] = 0;\n+            }\n+        }\n+        return total;\n+    }\n+\n+    static int testInt(int pos, int samePos) {\n+        assert pos == samePos;\n+        int total = 0;\n+        int[] array = new int[N];\n+        array[pos] = INT_VAL;\n+        for (int i = 0; i < M; i++) {\n+            total += array[samePos];\n+            for (int t = 0; t < array.length; t++) {\n+                array[t] = 0;\n+            }\n+        }\n+        return total;\n+    }\n+\n+    static long testLong(int pos, int samePos) {\n+        assert pos == samePos;\n+        long total = 0;\n+        long[] array = new long[N];\n+        array[pos] = LONG_VAL;\n+        for (int i = 0; i < M; i++) {\n+            total += array[samePos];\n+            for (int t = 0; t < array.length; t++) {\n+                array[t] = 0;\n+            }\n+        }\n+        return total;\n+    }\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10_000; i++) {\n+            boolean result = testBoolean(0, 0);\n+            Asserts.assertEquals(BOOLEAN_VAL, result);\n+        }\n+        for (int i = 0; i < 10_000; i++) {\n+            char result = testChar(0, 0);\n+            Asserts.assertEquals(CHAR_VAL, result);\n+        }\n+        for (int i = 0; i < 10_000; i++) {\n+            float result = testFloat(0, 0);\n+            Asserts.assertEquals(FLOAT_VAL, result);\n+        }\n+        for (int i = 0; i < 10_000; i++) {\n+            double result = testDouble(0, 0);\n+            Asserts.assertEquals(DOUBLE_VAL, result);\n+        }\n+        for (int i = 0; i < 10_000; i++) {\n+            byte result = testByte(0, 0);\n+            Asserts.assertEquals(BYTE_VAL, result);\n+        }\n+        for (int i = 0; i < 10_000; i++) {\n+            short result = testShort(0, 0);\n+            Asserts.assertEquals(SHORT_VAL, result);\n+        }\n+        for (int i = 0; i < 10_000; i++) {\n+            int result = testInt(0, 0);\n+            Asserts.assertEquals(INT_VAL, result);\n+        }\n+        for (int i = 0; i < 10_000; i++) {\n+            long result = testLong(0, 0);\n+            Asserts.assertEquals(LONG_VAL, result);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestArrayFillAntiDependence.java","additions":212,"deletions":0,"binary":false,"changes":212,"status":"added"}]}