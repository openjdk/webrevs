{"files":[{"patch":"@@ -643,1 +643,1 @@\n-            (toKeyword(DEFAULT, Collections.emptyMap()));\n+            (toKeyword(DEFAULT, Collections.emptyMap()), true);\n@@ -662,1 +662,1 @@\n-        return toKeywordValueString(toKeyword(RFC1779, oidMap));\n+        return toKeywordValueString(toKeyword(RFC1779, oidMap), false);\n@@ -761,6 +761,0 @@\n-                } else if (debug != null && Debug.isOn(\"ava\")) {\n-\n-                    \/\/ embed non-printable\/non-escaped char\n-                    \/\/ as escaped hex pairs for debugging\n-                    byte[] valueBytes = Character.toString(c).getBytes(UTF_8);\n-                    HexFormat.of().withPrefix(\"\\\\\").withUpperCase().formatHex(sbuffer, valueBytes);\n@@ -891,8 +885,0 @@\n-                } else if (debug != null && Debug.isOn(\"ava\")) {\n-\n-                    \/\/ embed non-printable\/non-escaped char\n-                    \/\/ as escaped hex pairs for debugging\n-\n-                    previousWhite = false;\n-                    byte[] valueBytes = Character.toString(c).getBytes(UTF_8);\n-                    HexFormat.of().withPrefix(\"\\\\\").withUpperCase().formatHex(sbuffer, valueBytes);\n@@ -948,1 +934,1 @@\n-    private String toKeywordValueString(String keyword) {\n+    private String toKeywordValueString(String keyword, Boolean isFromToString) {\n@@ -1022,1 +1008,1 @@\n-                    } else if (debug != null && Debug.isOn(\"ava\")) {\n+                    } else if (debug != null && isFromToString && Debug.isOn(\"ava\")) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AVA.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -0,0 +1,58 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8349890\n+ * @summary Make sure debug with AVA option does not interfere with parsing special characters.\n+ * @modules java.base\/sun.security.x509\n+ * @library \/test\/lib\n+ * @run main\/othervm -Djava.security.debug=x509:ava PrintX500NameInDebugModeWithAvaOption\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import sun.security.x509.X500Name;\n+\n+public class PrintX500NameInDebugModeWithAvaOption {\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        X500Name name = new X500Name(\"cn=john doe + l=ca\\\\+lifornia + l =sf, O=Ñ\");\n+\n+        \/\/Test the name in default String format. This will perform the hex conversion to\n+        \/\/\"\\\\C3\\\\91\" for special character \"Ñ\"\n+        Asserts.assertTrue(name.toString().contains(\"\\\\C3\\\\91\"),\"String does not contain expected value\");\n+\n+        \/\/Test the name in RFC2253 format. This should skip the hex conversion to return\n+        \/\/\"\\u00d1\" for special character \"Ñ\"\n+        Asserts.assertTrue(name.getRFC2253Name().contains(\"\\u00d1\"), \"String does not contain expected value\");\n+\n+        \/\/Test the name in canonical name in RFC2253 format. This should skip the hex conversion to return\n+        \/\/\"n\\u0303\" for special character \"Ñ\"\n+        Asserts.assertTrue(name.getRFC2253CanonicalName().contains(\"n\\u0303\"),\"String does not contain expected value\");\n+\n+\n+        \/\/Test to print name in RFC1779 format. This should skip the hex conversion to print\n+        \/\/\"\\u00d1\" for special character \"Ñ\"\n+        Asserts.assertTrue(name.getRFC1779Name().contains(\"\\u00d1\"),\"String does not contain expected value\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/x509\/X500Name\/PrintX500NameInDebugModeWithAvaOption.java","additions":58,"deletions":0,"binary":false,"changes":58,"status":"added"}]}