{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,3 +28,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -134,9 +131,2 @@\n-            @SuppressWarnings(\"removal\")\n-            Thread thread = AccessController.doPrivileged(new PrivilegedAction<Thread>() {\n-                @Override\n-                public Thread run() {\n-                    Thread t = InnocuousThread.newThread(new BootstrapMessageLoggerTask(owner, r));\n-                    t.setName(\"BootstrapMessageLoggerTask-\"+t.getName());\n-                    return t;\n-                }\n-            }, null, new RuntimePermission(\"enableContextClassLoaderOverride\"));\n+            Thread thread = InnocuousThread.newThread(new BootstrapMessageLoggerTask(owner, r));\n+            thread.setName(\"BootstrapMessageLoggerTask-\" + thread.getName());\n@@ -272,2 +262,0 @@\n-        @SuppressWarnings(\"removal\")\n-        final AccessControlContext acc;\n@@ -282,1 +270,0 @@\n-            this.acc = AccessController.getContext();\n@@ -301,1 +288,0 @@\n-            this.acc = AccessController.getContext();\n@@ -322,1 +308,0 @@\n-            this.acc = AccessController.getContext();\n@@ -343,1 +328,0 @@\n-            this.acc = AccessController.getContext();\n@@ -447,1 +431,1 @@\n-        @SuppressWarnings(\"removal\")\n+\n@@ -449,1 +433,0 @@\n-            final SecurityManager sm = System.getSecurityManager();\n@@ -453,8 +436,1 @@\n-            if (sm == null || log.acc == null) {\n-                BootstrapExecutors.submit(() -> log.log(logger));\n-            } else {\n-                BootstrapExecutors.submit(() ->\n-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                        log.log(logger); return null;\n-                    }, log.acc));\n-            }\n+            BootstrapExecutors.submit(() -> log.log(logger));\n@@ -513,1 +489,1 @@\n-        @SuppressWarnings(\"removal\")\n+\n@@ -515,12 +491,1 @@\n-            final SecurityManager sm = System.getSecurityManager();\n-            if (sm == null || log.acc == null) {\n-                BootstrapExecutors.submit(() -> log.log(logger));\n-            } else {\n-                \/\/ not sure we can actually use lambda here. We may need to create\n-                \/\/ an anonymous class. Although if we reach here, then it means\n-                \/\/ the VM is booted.\n-                BootstrapExecutors.submit(() ->\n-                    AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-                        log.log(logger); return null;\n-                }, log.acc));\n-            }\n+            BootstrapExecutors.submit(() -> log.log(logger));\n@@ -900,7 +865,5 @@\n-        static final LoggingBackend detectedBackend;\n-        static {\n-            detectedBackend = AccessController.doPrivileged(new PrivilegedAction<LoggingBackend>() {\n-                    @Override\n-                    public LoggingBackend run() {\n-                        final Iterator<LoggerFinder> iterator =\n-                            ServiceLoader.load(LoggerFinder.class, ClassLoader.getSystemClassLoader())\n+        static final LoggingBackend detectedBackend = detectBackend();\n+\n+        static LoggingBackend detectBackend() {\n+            final Iterator<LoggerFinder> iterator =\n+                    ServiceLoader.load(LoggerFinder.class, ClassLoader.getSystemClassLoader())\n@@ -908,7 +871,7 @@\n-                        if (iterator.hasNext()) {\n-                            return LoggingBackend.CUSTOM; \/\/ Custom Logger Provider is registered\n-                        }\n-                        \/\/ No custom logger provider: we will be using the default\n-                        \/\/ backend.\n-                        final Iterator<DefaultLoggerFinder> iterator2 =\n-                            ServiceLoader.loadInstalled(DefaultLoggerFinder.class)\n+            if (iterator.hasNext()) {\n+                return LoggingBackend.CUSTOM; \/\/ Custom Logger Provider is registered\n+            }\n+            \/\/ No custom logger provider: we will be using the default\n+            \/\/ backend.\n+            final Iterator<DefaultLoggerFinder> iterator2 =\n+                    ServiceLoader.loadInstalled(DefaultLoggerFinder.class)\n@@ -916,15 +879,12 @@\n-                        if (iterator2.hasNext()) {\n-                            \/\/ LoggingProviderImpl is registered. The default\n-                            \/\/ implementation is java.util.logging\n-                            String cname = System.getProperty(\"java.util.logging.config.class\");\n-                            String fname = System.getProperty(\"java.util.logging.config.file\");\n-                            return (cname != null || fname != null)\n-                                ? LoggingBackend.JUL_WITH_CONFIG\n-                                : LoggingBackend.JUL_DEFAULT;\n-                        } else {\n-                            \/\/ SimpleConsoleLogger is used\n-                            return LoggingBackend.NONE;\n-                        }\n-                    }\n-                });\n-\n+            if (iterator2.hasNext()) {\n+                \/\/ LoggingProviderImpl is registered. The default\n+                \/\/ implementation is java.util.logging\n+                String cname = System.getProperty(\"java.util.logging.config.class\");\n+                String fname = System.getProperty(\"java.util.logging.config.file\");\n+                return (cname != null || fname != null)\n+                        ? LoggingBackend.JUL_WITH_CONFIG\n+                        : LoggingBackend.JUL_DEFAULT;\n+            } else {\n+                \/\/ SimpleConsoleLogger is used\n+                return LoggingBackend.NONE;\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/BootstrapLogger.java","additions":31,"deletions":71,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -73,1 +71,1 @@\n- * Instead they should rely on the static methods defined by {@link\n+ * Instead, they should rely on the static methods defined by {@link\n@@ -84,3 +82,0 @@\n-    static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n-\n@@ -89,2 +84,0 @@\n-     * @throws SecurityException if the calling code does not have the\n-     * {@code RuntimePermission(\"loggerFinder\")}\n@@ -93,5 +86,0 @@\n-        this(checkPermission());\n-    }\n-\n-    private DefaultLoggerFinder(Void unused) {\n-        \/\/ nothing to do.\n@@ -100,8 +88,0 @@\n-    private static Void checkPermission() {\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(LOGGERFINDER_PERMISSION);\n-        }\n-        return null;\n-    }\n@@ -142,1 +122,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -144,8 +123,1 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<>() {\n-            @Override\n-            public Boolean run() {\n-                \/\/ returns true if moduleCL is the platform class loader\n-                \/\/ or one of its ancestors.\n-                return VM.isSystemDomainLoader(m.getClassLoader());\n-            }\n-        });\n+        return VM.isSystemDomainLoader(m.getClassLoader());\n@@ -158,1 +130,0 @@\n-        checkPermission();\n@@ -179,2 +150,0 @@\n-     * @throws SecurityException if the calling code does not have the\n-     * {@code RuntimePermission(\"loggerFinder\")}.\n@@ -183,1 +152,0 @@\n-        checkPermission();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/DefaultLoggerFinder.java","additions":3,"deletions":35,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -47,3 +45,0 @@\n-    static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n-\n@@ -344,1 +339,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -353,4 +347,1 @@\n-            final SecurityManager sm = System.getSecurityManager();\n-            prov = sm == null ? LoggerFinder.getLoggerFinder() :\n-                AccessController.doPrivileged(\n-                        (PrivilegedAction<LoggerFinder>)LoggerFinder::getLoggerFinder);\n+            prov = LoggerFinder.getLoggerFinder();\n@@ -406,1 +397,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -408,9 +398,2 @@\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            return accessLoggerFinder().getLogger(name, module);\n-        } else {\n-            return AccessController.doPrivileged((PrivilegedAction<Logger>)\n-                    () -> {return accessLoggerFinder().getLogger(name, module);},\n-                    null, LOGGERFINDER_PERMISSION);\n-        }\n-    }\n+        return accessLoggerFinder().getLogger(name, module);\n+     }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/LazyLoggers.java","additions":4,"deletions":21,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.io.FilePermission;\n@@ -30,3 +29,0 @@\n-import java.security.AccessController;\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n@@ -40,3 +36,0 @@\n-import sun.security.util.SecurityConstants;\n-import sun.security.action.GetBooleanAction;\n-import sun.security.action.GetPropertyAction;\n@@ -50,7 +43,0 @@\n-    static final Permission CLASSLOADER_PERMISSION =\n-            SecurityConstants.GET_CLASSLOADER_PERMISSION;\n-    static final Permission READ_PERMISSION =\n-            new FilePermission(\"<<ALL FILES>>\",\n-                    SecurityConstants.FILE_READ_ACTION);\n-    public static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n@@ -66,1 +52,1 @@\n-    private static enum ErrorPolicy { ERROR, WARNING, DEBUG, QUIET };\n+    private static enum ErrorPolicy { ERROR, WARNING, DEBUG, QUIET }\n@@ -110,2 +96,1 @@\n-        String errorPolicy =\n-                GetPropertyAction.privilegedGetProperty(\"jdk.logger.finder.error\");\n+        String errorPolicy = System.getProperty(\"jdk.logger.finder.error\");\n@@ -125,2 +110,1 @@\n-        return GetBooleanAction.privilegedGetProperty\n-            (\"jdk.logger.finder.singleton\");\n+        return Boolean.getBoolean(\"jdk.logger.finder.singleton\");\n@@ -129,1 +113,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -131,3 +114,1 @@\n-        final Iterator<System.LoggerFinder> iterator;\n-        if (System.getSecurityManager() == null) {\n-            iterator = ServiceLoader.load(System.LoggerFinder.class,\n+        return ServiceLoader.load(System.LoggerFinder.class,\n@@ -135,9 +116,0 @@\n-        } else {\n-            final PrivilegedAction<Iterator<System.LoggerFinder>> pa =\n-                    () -> ServiceLoader.load(System.LoggerFinder.class,\n-                        ClassLoader.getSystemClassLoader()).iterator();\n-            iterator = AccessController.doPrivileged(pa, null,\n-                        LOGGERFINDER_PERMISSION, CLASSLOADER_PERMISSION,\n-                        READ_PERMISSION);\n-        }\n-        return iterator;\n@@ -222,1 +194,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -224,17 +195,3 @@\n-        final SecurityManager sm = System.getSecurityManager();\n-        final Iterator<DefaultLoggerFinder> iterator;\n-        if (sm == null) {\n-            iterator = ServiceLoader.loadInstalled(DefaultLoggerFinder.class).iterator();\n-        } else {\n-            \/\/ We use limited do privileged here - the minimum set of\n-            \/\/ permissions required to 'see' the META-INF\/services resources\n-            \/\/ seems to be CLASSLOADER_PERMISSION and READ_PERMISSION.\n-            \/\/ Note that do privileged is required because\n-            \/\/ otherwise the SecurityManager will prevent the ServiceLoader\n-            \/\/ from seeing the installed provider.\n-            PrivilegedAction<Iterator<DefaultLoggerFinder>> pa = () ->\n-                    ServiceLoader.loadInstalled(DefaultLoggerFinder.class).iterator();\n-            iterator = AccessController.doPrivileged(pa, null,\n-                    LOGGERFINDER_PERMISSION, CLASSLOADER_PERMISSION,\n-                    READ_PERMISSION);\n-        }\n+        final Iterator<DefaultLoggerFinder> iterator =\n+                ServiceLoader.loadInstalled(DefaultLoggerFinder.class).iterator();\n+\n@@ -259,5 +216,0 @@\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(LOGGERFINDER_PERMISSION);\n-        }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/LoggerFinderLoader.java","additions":8,"deletions":56,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -42,1 +40,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -59,2 +56,1 @@\n-        String levelName = GetPropertyAction\n-                .privilegedGetProperty(\"jdk.system.logger.level\", \"INFO\");\n+        String levelName = System.getProperty(\"jdk.system.logger.level\", \"INFO\");\n@@ -205,1 +201,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -207,10 +202,2 @@\n-        private static final StackWalker WALKER;\n-        static {\n-            final PrivilegedAction<StackWalker> action = new PrivilegedAction<>() {\n-                @Override\n-                public StackWalker run() {\n-                    return StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n-                }\n-            };\n-            WALKER = AccessController.doPrivileged(action);\n-        }\n+        private static final StackWalker WALKER =\n+                StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n@@ -442,2 +429,1 @@\n-            String additionalPkgs =\n-                    GetPropertyAction.privilegedGetProperty(\"jdk.logger.packages\");\n+            String additionalPkgs = System.getProperty(\"jdk.logger.packages\");\n@@ -502,1 +488,1 @@\n-            String format = GetPropertyAction.privilegedGetProperty(key);\n+            String format = System.getProperty(key);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/SimpleConsoleLogger.java","additions":6,"deletions":20,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,1 +81,1 @@\n-        setOutputStreamPrivileged(System.err);\n+        setOutputStream(System.err);\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/ConsoleHandler.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -46,2 +46,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -270,1 +268,0 @@\n-        checkPermission();\n@@ -296,1 +293,1 @@\n-        if (pattern.length() < 1 ) {\n+        if (pattern.isEmpty()) {\n@@ -299,1 +296,0 @@\n-        checkPermission();\n@@ -326,1 +322,1 @@\n-        if (pattern.length() < 1 ) {\n+        if (pattern.isEmpty()) {\n@@ -329,1 +325,0 @@\n-        checkPermission();\n@@ -360,1 +355,1 @@\n-        if (limit < 0 || count < 1 || pattern.length() < 1) {\n+        if (limit < 0 || count < 1 || pattern.isEmpty()) {\n@@ -363,1 +358,0 @@\n-        checkPermission();\n@@ -428,1 +422,1 @@\n-        if (limit < 0 || count < 1 || pattern.length() < 1) {\n+        if (limit < 0 || count < 1 || pattern.isEmpty()) {\n@@ -431,1 +425,0 @@\n-        checkPermission();\n@@ -454,1 +447,0 @@\n-        manager.checkPermission();\n@@ -484,1 +476,1 @@\n-            \/\/ if we ourself already have the file locked.\n+            \/\/ if we ourselves already have the file locked.\n@@ -619,1 +611,1 @@\n-     * @throws IOException\n+     * @throws IOException if an I\/O error occurs\n@@ -699,1 +691,1 @@\n-        if (word.length() > 0) {\n+        if (!word.isEmpty()) {\n@@ -717,15 +709,1 @@\n-    private void rotate() {\n-        if (tryUseLock()) {\n-            try {\n-                rotate0();\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                rotate0();\n-            }\n-        }\n-    }\n-\n-    private void rotate0() {\n+    private synchronized void rotate() {\n@@ -764,16 +742,1 @@\n-    public void publish(LogRecord record) {\n-        if (tryUseLock()) {\n-            try {\n-                publish0(record);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                publish0(record);\n-            }\n-        }\n-\n-    }\n-    @SuppressWarnings(\"removal\")\n-    private void publish0(LogRecord record) {\n+    public synchronized void publish(LogRecord record) {\n@@ -786,12 +749,1 @@\n-            \/\/ We performed access checks in the \"init\" method to make sure\n-            \/\/ we are only initialized from trusted code.  So we assume\n-            \/\/ it is OK to write the target files, even if we are\n-            \/\/ currently being called from untrusted code.\n-            \/\/ So it is safe to raise privilege here.\n-            AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-                @Override\n-                public Object run() {\n-                    rotate();\n-                    return null;\n-                }\n-            });\n+            rotate();\n@@ -805,15 +757,1 @@\n-    public void close() {\n-        if (tryUseLock()) {\n-            try {\n-                close0();\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                close0();\n-            }\n-        }\n-    }\n-\n-    private void close0() throws SecurityException {\n+    public synchronized void close() {\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/FileHandler.java","additions":11,"deletions":73,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -31,3 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.util.concurrent.locks.ReentrantLock;\n@@ -55,0 +52,2 @@\n+\n+    \/\/ ensure log manager is initialized\n@@ -69,1 +68,0 @@\n-    private final ReentrantLock lock;\n@@ -77,13 +75,1 @@\n-    protected Handler() {\n-        lock = initLocking();\n-    }\n-\n-    private ReentrantLock initLocking() {\n-        Class<?> clazz = this.getClass();\n-        ClassLoader loader = clazz.getClassLoader();\n-        if (loader != null && loader != ClassLoader.getPlatformClassLoader()) {\n-            return null;\n-        } else {\n-            return new ReentrantLock();\n-        }\n-    }\n+    protected Handler() { }\n@@ -103,1 +89,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -114,2 +99,2 @@\n-                                    ? manager.getFormatterProperty(cname + \".formatter\", defaultFormatter)\n-                                    : specifiedFormatter;\n+                ? manager.getFormatterProperty(cname + \".formatter\", defaultFormatter)\n+                : specifiedFormatter;\n@@ -118,17 +103,11 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            @Override\n-            public Void run() {\n-                setLevel(level);\n-                setFilter(filter);\n-                setFormatter(formatter);\n-                try {\n-                    setEncoding(encoding);\n-                } catch (Exception ex) {\n-                    try {\n-                        setEncoding(null);\n-                    } catch (Exception ex2) {\n-                        \/\/ doing a setEncoding with null should always work.\n-                        \/\/ assert false;\n-                    }\n-                }\n-                return null;\n+        setLevel(level);\n+        setFilter(filter);\n+        setFormatter(formatter);\n+        try {\n+            setEncoding(encoding);\n+        } catch (Exception ex) {\n+            try {\n+                setEncoding(null);\n+            } catch (Exception ex2) {\n+                \/\/ doing a setEncoding with null should always work.\n+                \/\/ assert false;\n@@ -136,10 +115,1 @@\n-        }, null, LogManager.controlPermission);\n-    }\n-\n-    boolean tryUseLock() {\n-        if (lock == null) return false;\n-        lock.lock();\n-        return true;\n-    }\n-    void unlock() {\n-        lock.unlock();\n+        }\n@@ -186,16 +156,1 @@\n-    public void setFormatter(Formatter newFormatter) {\n-        if (tryUseLock()) {\n-            try {\n-                setFormatter0(newFormatter);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                setFormatter0(newFormatter);\n-            }\n-        }\n-    }\n-\n-    private void setFormatter0(Formatter newFormatter) throws SecurityException {\n-        checkPermission();\n+    public synchronized void setFormatter(Formatter newFormatter) {\n@@ -224,1 +179,1 @@\n-    public void setEncoding(String encoding)\n+    public synchronized void setEncoding(String encoding)\n@@ -226,16 +181,0 @@\n-        if (tryUseLock()) {\n-            try {\n-                setEncoding0(encoding);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                setEncoding0(encoding);\n-            }\n-        }\n-    }\n-\n-    private void setEncoding0(String encoding)\n-                        throws SecurityException, java.io.UnsupportedEncodingException {\n-        checkPermission();\n@@ -273,16 +212,1 @@\n-    public void setFilter(Filter newFilter) {\n-        if (tryUseLock()) {\n-            try {\n-                setFilter0(newFilter);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                setFilter0(newFilter);\n-            }\n-        }\n-    }\n-\n-    private void setFilter0(Filter newFilter) throws SecurityException {\n-        checkPermission();\n+    public synchronized void setFilter(Filter newFilter) {\n@@ -309,16 +233,1 @@\n-    public void setErrorManager(ErrorManager em) {\n-        if (tryUseLock()) {\n-            try {\n-                setErrorManager0(em);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                setErrorManager0(em);\n-            }\n-        }\n-    }\n-\n-    private void setErrorManager0(ErrorManager em) {\n-        checkPermission();\n+    public synchronized void setErrorManager(ErrorManager em) {\n@@ -337,1 +246,0 @@\n-        checkPermission();\n@@ -369,15 +277,1 @@\n-    public void setLevel(Level newLevel) {\n-        if (tryUseLock()) {\n-            try {\n-                setLevel0(newLevel);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                setLevel0(newLevel);\n-            }\n-        }\n-    }\n-\n-    private void setLevel0(Level newLevel) throws SecurityException {\n+    public synchronized void setLevel(Level newLevel) {\n@@ -387,1 +281,0 @@\n-        checkPermission();\n@@ -429,6 +322,0 @@\n-    \/\/ Package-private support method for security checks.\n-    \/\/ We check that the caller has appropriate security privileges\n-    \/\/ to update Handler state and if not throw a SecurityException.\n-    void checkPermission() throws SecurityException {\n-        manager.checkPermission();\n-    }\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/Handler.java","additions":22,"deletions":135,"binary":false,"changes":157,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -623,3 +621,1 @@\n-            PrivilegedAction<ClassLoader> pa = customLevel.getClass()::getClassLoader;\n-            @SuppressWarnings(\"removal\")\n-            final ClassLoader cl = AccessController.doPrivileged(pa);\n+            final ClassLoader cl = customLevel.getClass().getClassLoader();\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/Level.java","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.security.*;\n@@ -42,2 +41,0 @@\n-import jdk.internal.access.JavaAWTAccess;\n-import jdk.internal.access.SharedSecrets;\n@@ -221,30 +218,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final LogManager manager = AccessController.doPrivileged(\n-            new PrivilegedAction<LogManager>() {\n-                @Override\n-                public LogManager run() {\n-                    LogManager mgr = null;\n-                    String cname = null;\n-                    try {\n-                        cname = System.getProperty(\"java.util.logging.manager\");\n-                        if (cname != null) {\n-                            try {\n-                                @SuppressWarnings(\"deprecation\")\n-                                Object tmp = ClassLoader.getSystemClassLoader()\n-                                        .loadClass(cname).newInstance();\n-                                mgr = (LogManager) tmp;\n-                            } catch (ClassNotFoundException ex) {\n-                                @SuppressWarnings(\"deprecation\")\n-                                Object tmp = Thread.currentThread()\n-                                        .getContextClassLoader().loadClass(cname).newInstance();\n-                                mgr = (LogManager) tmp;\n-                            }\n-                        }\n-                    } catch (Exception ex) {\n-                        System.err.println(\"Could not load Logmanager \\\"\" + cname + \"\\\"\");\n-                        ex.printStackTrace();\n-                    }\n-                    if (mgr == null) {\n-                        mgr = new LogManager();\n-                    }\n-                    return mgr;\n+    private static final LogManager manager = initLogManager();\n@@ -252,0 +220,16 @@\n+    private static LogManager initLogManager() {\n+        LogManager mgr = null;\n+        String cname = null;\n+        try {\n+            cname = System.getProperty(\"java.util.logging.manager\");\n+            if (cname != null) {\n+                try {\n+                    @SuppressWarnings(\"deprecation\")\n+                    Object tmp = ClassLoader.getSystemClassLoader()\n+                            .loadClass(cname).newInstance();\n+                    mgr = (LogManager) tmp;\n+                } catch (ClassNotFoundException ex) {\n+                    @SuppressWarnings(\"deprecation\")\n+                    Object tmp = Thread.currentThread()\n+                            .getContextClassLoader().loadClass(cname).newInstance();\n+                    mgr = (LogManager) tmp;\n@@ -253,1 +237,11 @@\n-            });\n+            }\n+        } catch (Exception ex) {\n+            System.err.println(\"Could not load Logmanager \\\"\" + cname + \"\\\"\");\n+            ex.printStackTrace();\n+        }\n+        if (mgr == null) {\n+            mgr = new LogManager();\n+        }\n+        return mgr;\n+    }\n+\n@@ -293,5 +287,0 @@\n-        this(checkSubclassPermissions());\n-    }\n-\n-    private LogManager(Void checked) {\n-\n@@ -307,14 +296,0 @@\n-    private static Void checkSubclassPermissions() {\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            \/\/ These permission will be checked in the LogManager constructor,\n-            \/\/ in order to register the Cleaner() thread as a shutdown hook.\n-            \/\/ Check them here to avoid the penalty of constructing the object\n-            \/\/ etc...\n-            sm.checkPermission(new RuntimePermission(\"shutdownHooks\"));\n-            sm.checkPermission(new RuntimePermission(\"setContextClassLoader\"));\n-        }\n-        return null;\n-    }\n-\n@@ -383,27 +358,2 @@\n-                AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-                    @Override\n-                    public Object run() {\n-                        assert rootLogger == null;\n-                        assert initializedCalled && !initializationDone;\n-\n-                        \/\/ create root logger before reading primordial\n-                        \/\/ configuration - to ensure that it will be added\n-                        \/\/ before the global logger, and not after.\n-                        final Logger root = owner.rootLogger = owner.new RootLogger();\n-\n-                        \/\/ Read configuration.\n-                        owner.readPrimordialConfiguration();\n-\n-                        \/\/ Create and retain Logger for the root of the namespace.\n-                        owner.addLogger(root);\n-\n-                        \/\/ Initialize level if not yet initialized\n-                        if (!root.isLevelInitialized()) {\n-                            root.setLevel(defaultLevel);\n-                        }\n-\n-                        \/\/ Adding the global Logger.\n-                        \/\/ Do not call Logger.getGlobal() here as this might trigger\n-                        \/\/ subtle inter-dependency issues.\n-                        @SuppressWarnings(\"deprecation\")\n-                        final Logger global = Logger.global;\n+                assert rootLogger == null;\n+                assert initializedCalled && !initializationDone;\n@@ -411,6 +361,24 @@\n-                        \/\/ Make sure the global logger will be registered in the\n-                        \/\/ global manager\n-                        owner.addLogger(global);\n-                        return null;\n-                    }\n-                });\n+                \/\/ create root logger before reading primordial\n+                \/\/ configuration - to ensure that it will be added\n+                \/\/ before the global logger, and not after.\n+                final Logger root = owner.rootLogger = owner.new RootLogger();\n+\n+                \/\/ Read configuration.\n+                owner.readPrimordialConfiguration();\n+\n+                \/\/ Create and retain Logger for the root of the namespace.\n+                owner.addLogger(root);\n+\n+                \/\/ Initialize level if not yet initialized\n+                if (!root.isLevelInitialized()) {\n+                    root.setLevel(defaultLevel);\n+                }\n+\n+                \/\/ Adding the global Logger.\n+                \/\/ Do not call Logger.getGlobal() here as this might trigger\n+                \/\/ subtle inter-dependency issues.\n+                @SuppressWarnings(\"deprecation\") final Logger global = Logger.global;\n+\n+                \/\/ Make sure the global logger will be registered in the\n+                \/\/ global manager\n+                owner.addLogger(global);\n@@ -464,23 +432,0 @@\n-\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        JavaAWTAccess javaAwtAccess = SharedSecrets.getJavaAWTAccess();\n-        if (sm != null && javaAwtAccess != null) {\n-            \/\/ for each applet, it has its own LoggerContext isolated from others\n-            final Object ecx = javaAwtAccess.getAppletContext();\n-            if (ecx != null) {\n-                synchronized (javaAwtAccess) {\n-                    \/\/ find the AppContext of the applet code\n-                    \/\/ will be null if we are in the main app context.\n-                    if (contextsMap == null) {\n-                        contextsMap = new WeakHashMap<>();\n-                    }\n-                    context = contextsMap.get(ecx);\n-                    if (context == null) {\n-                        \/\/ Create a new LoggerContext for the applet.\n-                        context = new LoggerContext();\n-                        contextsMap.put(ecx, context);\n-                    }\n-                }\n-            }\n-        }\n@@ -555,1 +500,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -581,8 +525,1 @@\n-            final Logger l = logger;\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                @Override\n-                public Void run() {\n-                    l.mergeWithSystemLogger(sysLogger);\n-                    return null;\n-                }\n-            });\n+            logger.mergeWithSystemLogger(sysLogger);\n@@ -804,1 +741,1 @@\n-                doSetLevel(logger, level);\n+                logger.setLevel(level);\n@@ -829,1 +766,1 @@\n-                doSetParent(logger, parent);\n+               logger.setParent(parent);\n@@ -858,1 +795,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -862,10 +798,4 @@\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                @Override\n-                public Void run() {\n-                    if (logger != owner.rootLogger) {\n-                        boolean useParent = owner.getBooleanProperty(name + \".useParentHandlers\", true);\n-                        if (!useParent) {\n-                            logger.setUseParentHandlers(false);\n-                        }\n-                    }\n-                    return null;\n+            if (logger != owner.rootLogger) {\n+                boolean useParent = owner.getBooleanProperty(name + \".useParentHandlers\", true);\n+                if (!useParent) {\n+                    logger.setUseParentHandlers(false);\n@@ -873,1 +803,1 @@\n-            });\n+            }\n@@ -901,1 +831,1 @@\n-            while (name.length() > 0) {\n+            while (!name.isEmpty()) {\n@@ -964,4 +894,0 @@\n-    \/\/ We need to raise privilege here. All our decisions will\n-    \/\/ be made based on the logging configuration, which can\n-    \/\/ only be modified by trusted code.\n-    @SuppressWarnings(\"removal\")\n@@ -969,10 +895,3 @@\n-                                    final String handlersPropertyName)\n-    {\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            @Override\n-            public Void run() {\n-                setLoggerHandlers(logger, name, handlersPropertyName,\n-                    createLoggerHandlers(name, handlersPropertyName));\n-                return null;\n-            }\n-        });\n+                                    final String handlersPropertyName) {\n+        setLoggerHandlers(logger, name, handlersPropertyName,\n+                createLoggerHandlers(name, handlersPropertyName));\n@@ -1231,39 +1150,0 @@\n-    \/\/ Private method to set a level on a logger.\n-    \/\/ If necessary, we raise privilege before doing the call.\n-    @SuppressWarnings(\"removal\")\n-    private static void doSetLevel(final Logger logger, final Level level) {\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            \/\/ There is no security manager, so things are easy.\n-            logger.setLevel(level);\n-            return;\n-        }\n-        \/\/ There is a security manager.  Raise privilege before\n-        \/\/ calling setLevel.\n-        AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-            @Override\n-            public Object run() {\n-                logger.setLevel(level);\n-                return null;\n-            }});\n-    }\n-\n-    \/\/ Private method to set a parent on a logger.\n-    \/\/ If necessary, we raise privilege before doing the setParent call.\n-    @SuppressWarnings(\"removal\")\n-    private static void doSetParent(final Logger logger, final Logger parent) {\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            \/\/ There is no security manager, so things are easy.\n-            logger.setParent(parent);\n-            return;\n-        }\n-        \/\/ There is a security manager.  Raise privilege before\n-        \/\/ calling setParent.\n-        AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-            @Override\n-            public Object run() {\n-                logger.setParent(parent);\n-                return null;\n-            }});\n-    }\n@@ -1353,1 +1233,0 @@\n-        checkPermission();\n@@ -1386,1 +1265,1 @@\n-    String getConfigurationFileName() throws IOException {\n+    String getConfigurationFileName() {\n@@ -1416,1 +1295,0 @@\n-        checkPermission();\n@@ -1521,1 +1399,1 @@\n-            if (word.length() == 0) {\n+            if (word.isEmpty()) {\n@@ -1556,1 +1434,0 @@\n-        checkPermission();\n@@ -1860,1 +1737,0 @@\n-        checkPermission();\n@@ -2057,1 +1933,0 @@\n-        checkPermission();\n@@ -2413,10 +2288,0 @@\n-    static final Permission controlPermission =\n-            new LoggingPermission(\"control\", null);\n-\n-    void checkPermission() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkPermission(controlPermission);\n-    }\n-\n@@ -2459,1 +2324,1 @@\n-                    doSetParent(logger, parent);\n+                    logger.setParent(parent);\n@@ -2593,11 +2458,0 @@\n-        checkPermission();\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        @SuppressWarnings(\"removal\")\n-        final AccessControlContext acc =\n-                sm == null ? null : AccessController.getContext();\n-        final PrivilegedAction<Void> pa =\n-                acc == null ? null : () -> { r.run() ; return null; };\n-        @SuppressWarnings(\"removal\")\n-        final Runnable pr =\n-                acc == null ? r : () -> AccessController.doPrivileged(pa, acc);\n@@ -2605,1 +2459,1 @@\n-        listeners.putIfAbsent(r, pr);\n+        listeners.putIfAbsent(r, r);\n@@ -2621,1 +2475,0 @@\n-        checkPermission();\n@@ -2655,2 +2508,1 @@\n-        implements LoggingProviderImpl.LogManagerAccess,\n-                   PrivilegedAction<Void> {\n+        implements LoggingProviderImpl.LogManagerAccess {\n@@ -2687,5 +2539,0 @@\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(controlPermission);\n-            }\n@@ -2700,2 +2547,1 @@\n-        @Override\n-        public Void run() {\n+        private void init() {\n@@ -2703,1 +2549,0 @@\n-            return null;\n@@ -2710,7 +2555,1 @@\n-        initStatic();\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private static void initStatic() {\n-        AccessController.doPrivileged(LoggingProviderAccess.INSTANCE, null,\n-                                      controlPermission);\n+        LoggingProviderAccess.INSTANCE.init();\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/LogManager.java","additions":73,"deletions":234,"binary":false,"changes":307,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -770,1 +768,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -772,6 +769,3 @@\n-        private static final StackWalker WALKER;\n-        static {\n-            final PrivilegedAction<StackWalker> action =\n-                () -> StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n-            WALKER = AccessController.doPrivileged(action);\n-        }\n+        private static final StackWalker WALKER =\n+                StackWalker.getInstance(StackWalker.Option.RETAIN_CLASS_REFERENCE);\n+\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/LogRecord.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -582,1 +580,1 @@\n-        checkPermission();\n+        ensureManagerInitialized();\n@@ -617,1 +615,1 @@\n-    private void checkPermission() throws SecurityException {\n+    private void ensureManagerInitialized() {\n@@ -623,1 +621,0 @@\n-            manager.checkPermission();\n@@ -636,11 +633,2 @@\n-        static boolean disableCallerCheck = getBooleanProperty(\"sun.util.logging.disableCallerCheck\");\n-        private static boolean getBooleanProperty(final String key) {\n-            @SuppressWarnings(\"removal\")\n-            String s = AccessController.doPrivileged(new PrivilegedAction<String>() {\n-                @Override\n-                public String run() {\n-                    return System.getProperty(key);\n-                }\n-            });\n-            return Boolean.parseBoolean(s);\n-        }\n+        static boolean disableCallerCheck =\n+                Boolean.getBoolean(\"sun.util.logging.disableCallerCheck\");\n@@ -933,1 +921,1 @@\n-        checkPermission();\n+        ensureManagerInitialized();\n@@ -1993,1 +1981,1 @@\n-        checkPermission();\n+        ensureManagerInitialized();\n@@ -2050,1 +2038,1 @@\n-        checkPermission();\n+        ensureManagerInitialized();\n@@ -2062,1 +2050,1 @@\n-        checkPermission();\n+        ensureManagerInitialized();\n@@ -2094,1 +2082,1 @@\n-        checkPermission();\n+        ensureManagerInitialized();\n@@ -2190,5 +2178,2 @@\n-                        PrivilegedAction<ClassLoader> getModuleClassLoader =\n-                                () -> callerModule.getClassLoader();\n-                        @SuppressWarnings(\"removal\")\n-                        ClassLoader moduleCL =\n-                                AccessController.doPrivileged(getModuleClassLoader);\n+                        ClassLoader moduleCL = callerModule.getClassLoader();\n+\n@@ -2270,1 +2255,1 @@\n-            checkPermission();\n+            ensureManagerInitialized();\n@@ -2303,1 +2288,1 @@\n-        checkPermission();\n+        ensureManagerInitialized();\n@@ -2362,5 +2347,1 @@\n-        \/\/ check permission for all loggers, including anonymous loggers\n-        if (manager == null) {\n-            manager = LogManager.getLogManager();\n-        }\n-        manager.checkPermission();\n+        ensureManagerInitialized();\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/Logger.java","additions":14,"deletions":33,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.security.*;\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/LoggingPermission.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -181,15 +181,1 @@\n-    public void publish(LogRecord record) {\n-        if (tryUseLock()) {\n-            try {\n-                publish0(record);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                publish0(record);\n-            }\n-        }\n-    }\n-\n-    private void publish0(LogRecord record) {\n+    public synchronized void publish(LogRecord record) {\n@@ -217,15 +203,1 @@\n-    public void push() {\n-        if (tryUseLock()) {\n-            try {\n-                push0();\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                push0();\n-            }\n-        }\n-    }\n-\n-    private void push0() {\n+    public synchronized void push() {\n@@ -270,15 +242,1 @@\n-    public void setPushLevel(Level newLevel) {\n-        if (tryUseLock()) {\n-            try {\n-                setPushLevel0(newLevel);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                setPushLevel0(newLevel);\n-            }\n-        }\n-    }\n-\n-    private void setPushLevel0(Level newLevel) throws SecurityException {\n+    public synchronized void setPushLevel(Level newLevel) {\n@@ -288,1 +246,0 @@\n-        checkPermission();\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/MemoryHandler.java","additions":3,"deletions":46,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -149,1 +149,1 @@\n-        setOutputStreamPrivileged(bout);\n+        setOutputStream(bout);\n@@ -156,15 +156,1 @@\n-    public void close() {\n-        if (tryUseLock()) {\n-            try {\n-                close0();\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                close0();\n-            }\n-        }\n-    }\n-\n-    private void close0() throws SecurityException {\n+    public synchronized void close() {\n@@ -189,15 +175,1 @@\n-    public void publish(LogRecord record) {\n-        if (tryUseLock()) {\n-            try {\n-                publish0(record);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                publish0(record);\n-            }\n-        }\n-    }\n-\n-    private void publish0(LogRecord record) {\n+    public synchronized void publish(LogRecord record) {\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/SocketHandler.java","additions":3,"deletions":31,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -102,1 +100,1 @@\n-        setOutputStreamPrivileged(out);\n+        setOutputStream(out);\n@@ -123,15 +121,1 @@\n-    protected void setOutputStream(OutputStream out) {\n-        if (tryUseLock()) {\n-            try {\n-                setOutputStream0(out);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                setOutputStream0(out);\n-            }\n-        }\n-    }\n-\n-    private void setOutputStream0(OutputStream out) throws SecurityException {\n+    protected synchronized void setOutputStream(OutputStream out) {\n@@ -170,1 +154,1 @@\n-    public void setEncoding(String encoding)\n+    public synchronized void setEncoding(String encoding)\n@@ -172,14 +156,0 @@\n-        if (tryUseLock()) {\n-            try {\n-                setEncoding0(encoding);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                setEncoding0(encoding);\n-            }\n-        }\n-    }\n-    private void setEncoding0(String encoding)\n-                        throws SecurityException, java.io.UnsupportedEncodingException {\n@@ -217,16 +187,2 @@\n-    public void publish(LogRecord record) {\n-        if (tryUseLock()) {\n-            try {\n-                publish0(record);\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                publish0(record);\n-            }\n-        }\n-    }\n-\n-    private void publish0(LogRecord record) {\n-        if (!isLoggable(record)) {\n+    public synchronized void publish(LogRecord record) {\n+       if (!isLoggable(record)) {\n@@ -283,15 +239,1 @@\n-    public void flush() {\n-        if (tryUseLock()) {\n-            try {\n-                flush0();\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                flush0();\n-            }\n-        }\n-    }\n-\n-    private void flush0() {\n+    public synchronized void flush() {\n@@ -310,2 +252,1 @@\n-    private void flushAndClose() throws SecurityException {\n-        checkPermission();\n+    private void flushAndClose() {\n@@ -341,12 +282,2 @@\n-    public void close() {\n-        if (tryUseLock()) {\n-            try {\n-                flushAndClose();\n-            } finally {\n-                unlock();\n-            }\n-        } else {\n-            synchronized (this) {\n-                flushAndClose();\n-            }\n-        }\n+    public synchronized void close() {\n+        flushAndClose();\n@@ -355,12 +286,0 @@\n-    \/\/ Package-private support for setting OutputStream\n-    \/\/ with elevated privilege.\n-    @SuppressWarnings(\"removal\")\n-    final void setOutputStreamPrivileged(final OutputStream out) {\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            @Override\n-            public Void run() {\n-                setOutputStream(out);\n-                return null;\n-            }\n-        }, null, LogManager.controlPermission);\n-    }\n","filename":"src\/java.logging\/share\/classes\/java\/util\/logging\/StreamHandler.java","additions":9,"deletions":90,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -38,1 +36,0 @@\n-import java.util.logging.LoggingPermission;\n@@ -80,4 +77,0 @@\n-    static final RuntimePermission LOGGERFINDER_PERMISSION =\n-                new RuntimePermission(\"loggerFinder\");\n-    private static final LoggingPermission LOGGING_CONTROL_PERMISSION =\n-            new LoggingPermission(\"control\", null);\n@@ -87,2 +80,0 @@\n-     * @throws SecurityException if the calling code does not have the\n-     * {@code RuntimePermission(\"loggerFinder\")}.\n@@ -150,2 +141,2 @@\n-        public void log(sun.util.logging.PlatformLogger.Level level, Supplier<String> msgSuppier) {\n-            julLogger.log(toJUL(level), msgSuppier);\n+        public void log(sun.util.logging.PlatformLogger.Level level, Supplier<String> msgSupplier) {\n+            julLogger.log(toJUL(level), msgSupplier);\n@@ -155,2 +146,2 @@\n-        public void log(sun.util.logging.PlatformLogger.Level level, Throwable thrown, Supplier<String> msgSuppier) {\n-            julLogger.log(toJUL(level), thrown, msgSuppier);\n+        public void log(sun.util.logging.PlatformLogger.Level level, Throwable thrown, Supplier<String> msgSupplier) {\n+            julLogger.log(toJUL(level), thrown, msgSupplier);\n@@ -406,1 +397,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -410,8 +400,1 @@\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm == null) {\n-            return logManagerAccess.demandLoggerFor(manager, name, module);\n-        } else {\n-            final PrivilegedAction<java.util.logging.Logger> pa =\n-                    () -> logManagerAccess.demandLoggerFor(manager, name, module);\n-            return AccessController.doPrivileged(pa, null, LOGGING_CONTROL_PERMISSION);\n-        }\n+        return logManagerAccess.demandLoggerFor(manager, name, module);\n@@ -428,2 +411,0 @@\n-     * @throws SecurityException if the calling code doesn't have the\n-     * {@code RuntimePermission(\"loggerFinder\")}.\n@@ -433,5 +414,0 @@\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(LOGGERFINDER_PERMISSION);\n-        }\n@@ -448,6 +424,2 @@\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(LOGGING_CONTROL_PERMISSION);\n-        }\n-        \/\/ Triggers initialization of accessJulLogger if not set.\n+        \/\/ Triggers initialization of logManagerAccess if not set.\n+        LogManagerAccess logManagerAccess = LoggingProviderImpl.logManagerAccess;\n@@ -455,0 +427,1 @@\n+        logManagerAccess = LoggingProviderImpl.logManagerAccess;\n@@ -460,7 +433,2 @@\n-    public static void setLogManagerAccess(LogManagerAccess accesLoggers) {\n-        @SuppressWarnings(\"removal\")\n-        final SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(LOGGING_CONTROL_PERMISSION);\n-        }\n-        logManagerAccess = accesLoggers;\n+    public static void setLogManagerAccess(LogManagerAccess accessLoggers) {\n+        logManagerAccess = accessLoggers;\n","filename":"src\/java.logging\/share\/classes\/sun\/util\/logging\/internal\/LoggingProviderImpl.java","additions":11,"deletions":43,"binary":false,"changes":54,"status":"modified"}]}