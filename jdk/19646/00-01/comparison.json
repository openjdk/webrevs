{"files":[{"patch":"@@ -397,1 +397,1 @@\n-  assert(_goto != nullptr, \"\");\n+  assert(_goto != nullptr || C->failure_is_artificial(), \"\");\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1139,1 +1139,1 @@\n-  assert (!failing_internal(), \"Must not have pending failure. Reason is: %s\", failure_reason());\n+  assert (!failing_internal() || C->failure_is_artificial(), \"Must not have pending failure. Reason is: %s\", failure_reason());\n@@ -2133,1 +2133,1 @@\n-      assert(!failing(), \"inconsistent\");\n+      assert(!failing(true) || failure_is_artificial(), \"inconsistent\");\n@@ -2176,1 +2176,1 @@\n-      assert(!failing(), \"inconsistent\");\n+      assert(!failing(true) || failure_is_artificial(), \"inconsistent\");\n@@ -4402,1 +4402,1 @@\n-    guarantee(!StressBailout || skip, \"should have handled previous failure.\");\n+    assert(!StressBailout || skip, \"should have handled previous failure.\");\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -394,0 +394,2 @@\n+  DEBUG_ONLY(bool       _phase_verify_ideal_loop;) \/\/ Are we in PhaseIdealLoop verification?\n+\n@@ -791,0 +793,6 @@\n+#ifdef ASSERT\n+  bool       phase_verify_ideal_loop() { return _phase_verify_ideal_loop; }\n+  void   set_phase_verify_ideal_loop() { _phase_verify_ideal_loop = true; }\n+  void reset_phase_verify_ideal_loop() { _phase_verify_ideal_loop = false; }\n+#endif\n+\n@@ -839,0 +847,6 @@\n+#ifdef ASSERT\n+    \/\/ Disable for PhaseIdealLoop verification\n+    if (phase_verify_ideal_loop()) {\n+      return false;\n+    }\n+#endif\n@@ -843,4 +857,1 @@\n-    guarantee(0 < invprob, \"domain error\");\n-#ifdef ASSERT\n-    return false; \/\/ debug builds assert on bailouts.\n-#endif\n+    assert(0 < invprob, \"domain error\");\n@@ -854,0 +865,5 @@\n+  bool failure_is_artificial() {\n+    assert(failing_internal(), \"not failing.\");\n+    return C->failure_reason_is(\"StressBailout\");\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1604,1 +1604,1 @@\n-        assert(false, \"local schedule failed\");\n+        assert(C->failure_is_artificial(), \"local schedule failed\");\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    assert(failing() || !has_exceptions(),\n+    assert(failing(true) || !has_exceptions(),\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1199,1 +1199,1 @@\n-      assert(false, \"graph should be schedulable\");\n+      assert(C->failure_is_artificial(), \"graph should be schedulable\");\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4939,1 +4939,1 @@\n-  if (C->failing()) return;\n+  if (C->failing(true)) return;\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1129,0 +1129,1 @@\n+    DEBUG_ONLY(C->set_phase_verify_ideal_loop();)\n@@ -1130,0 +1131,1 @@\n+    DEBUG_ONLY(C->reset_phase_verify_ideal_loop();)\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -398,1 +398,1 @@\n-      assert(_mach_null != nullptr, \"\");\n+      assert(_mach_null != nullptr || C->failure_is_artificial(), \"\"); \/\/ bailouts are handled below.\n@@ -2676,1 +2676,1 @@\n-  assert(!C->failing(), \"already failing.\");\n+  assert(!C->failing(true) || C->failure_is_artificial(), \"already failing.\");\n@@ -2710,1 +2710,1 @@\n-  assert(mspill != nullptr, \"matching failed: %d\", ideal_reg);\n+  assert(mspill != nullptr || C->failure_is_artificial(), \"matching failed: %d\", ideal_reg);\n@@ -2847,1 +2847,1 @@\n-  assert(!C->failing(), \"sanity\");\n+  assert(!C->failing(true) || C->failure_is_artificial(), \"sanity\");\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1694,1 +1694,1 @@\n-      assert(!C->failing(), \"Should not reach here if failing.\");\n+      assert(!C->failing(true) || C->failure_is_artificial(), \"Should not reach here if failing.\");\n@@ -3370,1 +3370,1 @@\n-  assert (!C->failing(), \"Must not have pending failure. Reason is: %s\", C->failure_reason());\n+  assert (!C->failing(true) || C->failure_is_artificial(), \"Must not have pending failure. Reason is: %s\", C->failure_reason());\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -309,1 +309,1 @@\n-      assert(false, \"RA Split failed: attempt to clone node with anti_dependence\");\n+      assert(C->failure_is_artificial(), \"RA Split failed: attempt to clone node with anti_dependence\");\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}