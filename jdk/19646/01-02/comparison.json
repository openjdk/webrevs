{"files":[{"patch":"@@ -71,1 +71,1 @@\n-         \"Perform bailouts randomly at C2 failing() checks\")                \\\n+          \"Perform bailouts randomly at C2 failing() checks\")               \\\n@@ -73,1 +73,1 @@\n-  product(uint, StressBailoutInterval, 100000, DIAGNOSTIC,                  \\\n+  product(uint, StressBailoutProbability, 100000, DIAGNOSTIC,               \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -558,1 +558,1 @@\n-        return;\n+      return;\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -639,0 +639,1 @@\n+                  _stress_seed_is_initialized(false),\n@@ -797,1 +798,1 @@\n-      record_method_not_compilable(ss.as_string(), true);\n+      record_method_not_compilable(ss.as_string() DEBUG_ONLY(COMMA true));\n@@ -920,0 +921,1 @@\n+    _stress_seed_is_initialized(false),\n@@ -4391,1 +4393,1 @@\n-void Compile::record_failure(const char* reason, bool skip) {\n+void Compile::record_failure(const char* reason DEBUG_ONLY(COMMA bool allow_multiple_failures)) {\n@@ -4402,1 +4404,1 @@\n-    assert(!StressBailout || skip, \"should have handled previous failure.\");\n+    assert(!StressBailout || allow_multiple_failures, \"should have handled previous failure.\");\n@@ -5081,0 +5083,1 @@\n+  _stress_seed_is_initialized = true;\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -361,0 +361,1 @@\n+  bool                  _stress_seed_is_initialized; \/\/ True if _stress_seed has been set\n@@ -840,1 +841,1 @@\n-  bool failing(bool skip=false) {\n+  bool failing(bool no_stress_bailout=false) {\n@@ -844,3 +845,0 @@\n-    if (!StressBailout || skip) {\n-      return false;\n-    }\n@@ -853,1 +851,4 @@\n-    return fail_randomly(StressBailoutInterval);\n+    if (StressBailout && !no_stress_bailout) {\n+      return fail_randomly(StressBailoutProbability);\n+    }\n+    return false;\n@@ -858,1 +859,1 @@\n-    if (!_stress_seed || (random() % invprob)) {\n+    if (!_stress_seed_is_initialized || (random() % invprob)) {\n@@ -877,2 +878,2 @@\n-  void record_failure(const char* reason, bool skip=false);\n-  void record_method_not_compilable(const char* reason, bool skip=false) {\n+  void record_failure(const char* reason DEBUG_ONLY(COMMA bool allow_multiple_failures=false));\n+  void record_method_not_compilable(const char* reason DEBUG_ONLY(COMMA bool allow_multiple_failures=false)) {\n@@ -881,1 +882,1 @@\n-    record_failure(reason, skip);\n+    record_failure(reason DEBUG_ONLY(COMMA allow_multiple_failures));\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -1424,1 +1424,1 @@\n-        C->record_method_not_compilable(\"late schedule failed: incorrect graph\", true);\n+        C->record_method_not_compilable(\"late schedule failed: incorrect graph\" DEBUG_ONLY(COMMA true));\n@@ -1605,1 +1605,1 @@\n-        C->record_method_not_compilable(\"local schedule failed\", true);\n+        C->record_method_not_compilable(\"local schedule failed\" DEBUG_ONLY(COMMA true));\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -184,1 +184,1 @@\n-  bool failing(bool skip=false) const { return C->failing(skip); }\n+  bool failing(bool no_stress_bailout=false) const { return C->failing(no_stress_bailout); }\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -416,1 +416,1 @@\n-    C->record_method_not_compilable(ss.as_string(), true);\n+    C->record_method_not_compilable(ss.as_string() DEBUG_ONLY(COMMA true));\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -310,1 +310,1 @@\n-      C->record_method_not_compilable(\"RA Split failed: attempt to clone node with anti_dependence\", true);\n+      C->record_method_not_compilable(\"RA Split failed: attempt to clone node with anti_dependence\" DEBUG_ONLY(COMMA true));\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    static void runTest(int interval) throws Exception {\n+    static void runTest(int invprob) throws Exception {\n@@ -47,1 +47,1 @@\n-                             \"-XX:StressBailoutInterval=\" + interval, \"-version\"};\n+                             \"-XX:StressBailoutProbability=\" + invprob, \"-version\"};\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestStressBailout.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -306,0 +306,2 @@\n+                \"-XX:+StressBailout\",\n+                \"-XX:StressBailoutProbability=1000000\",\n","filename":"test\/hotspot\/jtreg\/testlibrary\/ctw\/src\/sun\/hotspot\/tools\/ctw\/CtwRunner.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}