{"files":[{"patch":"@@ -397,1 +397,4 @@\n-  assert(_goto != nullptr, \"\");\n+  assert(_goto != nullptr || C->failure_is_artificial(), \"\");\n+  if (C->failing()) {\n+    return;\n+  }\n","filename":"src\/hotspot\/share\/opto\/block.cpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -70,0 +70,7 @@\n+  product(bool, StressBailout, false, DIAGNOSTIC,                           \\\n+         \"Perform bailouts randomly at C2 failing() checks\")                \\\n+                                                                            \\\n+  product(uint, StressBailoutInterval, 100000, DIAGNOSTIC,                  \\\n+          \"Stress bailout every n:th time on average\")                      \\\n+          range(1, max_juint)                                               \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/opto\/c2_globals.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -482,0 +482,3 @@\n+    if (C->failing()) {\n+      return;\n+    }\n@@ -554,0 +557,3 @@\n+    if (C->failing()){\n+        return;\n+    }\n","filename":"src\/hotspot\/share\/opto\/chaitin.cpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -797,1 +797,1 @@\n-      record_method_not_compilable(ss.as_string());\n+      record_method_not_compilable(ss.as_string(), true);\n@@ -848,1 +848,1 @@\n-      StressIncrementalInlining || StressMacroExpansion) {\n+      StressIncrementalInlining || StressMacroExpansion || StressBailout) {\n@@ -977,1 +977,1 @@\n-  if (StressLCM || StressGCM) {\n+  if (StressLCM || StressGCM || StressBailout) {\n@@ -1128,1 +1128,1 @@\n-  if (failing())\n+  if (failing(true))\n@@ -1139,1 +1139,1 @@\n-  assert (!failing(), \"Must not have pending failure. Reason is: %s\", failure_reason());\n+  assert (!failing_internal() || C->failure_is_artificial(), \"Must not have pending failure. Reason is: %s\", failure_reason());\n@@ -2133,1 +2133,1 @@\n-      assert(!failing(), \"inconsistent\");\n+      assert(!failing(true) || failure_is_artificial(), \"inconsistent\");\n@@ -2176,1 +2176,1 @@\n-      assert(!failing(), \"inconsistent\");\n+      assert(!failing(true) || failure_is_artificial(), \"inconsistent\");\n@@ -2963,0 +2963,3 @@\n+  if (failing()) {\n+    return;\n+  }\n@@ -4388,1 +4391,1 @@\n-void Compile::record_failure(const char* reason) {\n+void Compile::record_failure(const char* reason, bool skip) {\n@@ -4398,0 +4401,2 @@\n+  } else {\n+    assert(!StressBailout || skip, \"should have handled previous failure.\");\n@@ -4425,1 +4430,1 @@\n-  if (_compile->failing()) return;\n+  if (_compile->failing(true)) return; \/\/ timing code, not stressing bailouts.\n@@ -5203,1 +5208,1 @@\n-  if (failing()) { return; }\n+  if (failing_internal()) { return; } \/\/ failing_internal to not stress bailouts from printing code.\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -394,0 +394,2 @@\n+  DEBUG_ONLY(bool       _phase_verify_ideal_loop;) \/\/ Are we in PhaseIdealLoop verification?\n+\n@@ -791,0 +793,6 @@\n+#ifdef ASSERT\n+  bool       phase_verify_ideal_loop() { return _phase_verify_ideal_loop; }\n+  void   set_phase_verify_ideal_loop() { _phase_verify_ideal_loop = true; }\n+  void reset_phase_verify_ideal_loop() { _phase_verify_ideal_loop = false; }\n+#endif\n+\n@@ -820,1 +828,1 @@\n-  bool        failing() const        {\n+  bool        failing_internal() const {\n@@ -832,0 +840,30 @@\n+  bool failing(bool skip=false) {\n+    if (failing_internal()) {\n+      return true;\n+    }\n+    if (!StressBailout || skip) {\n+      return false;\n+    }\n+#ifdef ASSERT\n+    \/\/ Disable for PhaseIdealLoop verification\n+    if (phase_verify_ideal_loop()) {\n+      return false;\n+    }\n+#endif\n+    return fail_randomly(StressBailoutInterval);\n+  }\n+\n+  bool fail_randomly(uint invprob) {\n+    assert(0 < invprob, \"domain error\");\n+    if (!_stress_seed || (random() % invprob)) {\n+      return false;\n+    }\n+    record_failure(\"StressBailout\");\n+    return true;\n+  }\n+\n+  bool failure_is_artificial() {\n+    assert(failing_internal(), \"not failing.\");\n+    return C->failure_reason_is(\"StressBailout\");\n+  }\n+\n@@ -839,2 +877,2 @@\n-  void record_failure(const char* reason);\n-  void record_method_not_compilable(const char* reason) {\n+  void record_failure(const char* reason, bool skip=false);\n+  void record_method_not_compilable(const char* reason, bool skip=false) {\n@@ -843,1 +881,1 @@\n-    record_failure(reason);\n+    record_failure(reason, skip);\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":42,"deletions":4,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1424,1 +1424,1 @@\n-        C->record_method_not_compilable(\"late schedule failed: incorrect graph\");\n+        C->record_method_not_compilable(\"late schedule failed: incorrect graph\", true);\n@@ -1604,2 +1604,2 @@\n-        assert(false, \"local schedule failed\");\n-        C->record_method_not_compilable(\"local schedule failed\");\n+        assert(C->failure_is_artificial(), \"local schedule failed\");\n+        C->record_method_not_compilable(\"local schedule failed\", true);\n","filename":"src\/hotspot\/share\/opto\/gcm.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -343,1 +343,1 @@\n-  if (failing())  return;  \/\/ dying anyway...\n+  if (failing(true))  return;  \/\/ dying anyway...\n@@ -449,1 +449,1 @@\n-  if (failing()) { stop(); return top(); }\n+  if (failing(true)) { stop(); return top(); }\n@@ -2059,1 +2059,1 @@\n-  if (failing())  stop();\n+  if (failing(true))  stop();\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-    assert(failing() || !has_exceptions(),\n+    assert(failing(true) || !has_exceptions(),\n@@ -184,1 +184,1 @@\n-  bool failing() const { return C->failing(); }\n+  bool failing(bool skip=false) const { return C->failing(skip); }\n","filename":"src\/hotspot\/share\/opto\/graphKit.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1199,1 +1199,1 @@\n-      assert(false, \"graph should be schedulable\");\n+      assert(C->failure_is_artificial(), \"graph should be schedulable\");\n","filename":"src\/hotspot\/share\/opto\/lcm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4939,1 +4939,1 @@\n-  if (C->failing()) return;\n+  if (C->failing(true)) return;\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1129,0 +1129,1 @@\n+    DEBUG_ONLY(C->set_phase_verify_ideal_loop();)\n@@ -1130,0 +1131,1 @@\n+    DEBUG_ONLY(C->reset_phase_verify_ideal_loop();)\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -197,0 +197,3 @@\n+  if (C->failing()) {\n+    return;\n+  }\n@@ -290,0 +293,3 @@\n+    if (C->failing()) {\n+      return;\n+    }\n@@ -294,0 +300,3 @@\n+    if (C->failing()) {\n+      return;\n+    }\n@@ -389,1 +398,1 @@\n-      assert(_mach_null != nullptr, \"\");\n+      assert(_mach_null != nullptr || C->failure_is_artificial(), \"\"); \/\/ bailouts are handled below.\n@@ -407,1 +416,1 @@\n-    C->record_method_not_compilable(ss.as_string());\n+    C->record_method_not_compilable(ss.as_string(), true);\n@@ -1429,0 +1438,3 @@\n+      if (C->failing()) {\n+        return nullptr;\n+      }\n@@ -1433,0 +1445,3 @@\n+      if (C->failing()) {\n+        return nullptr;\n+      }\n@@ -2661,0 +2676,4 @@\n+  assert(!C->failing(true) || C->failure_is_artificial(), \"already failing.\");\n+  if (C->failing()) {\n+    return nullptr;\n+  }\n@@ -2691,1 +2710,4 @@\n-  assert(mspill != nullptr, \"matching failed: %d\", ideal_reg);\n+  assert(mspill != nullptr || C->failure_is_artificial(), \"matching failed: %d\", ideal_reg);\n+  if (C->failing()) {\n+    return nullptr;\n+  }\n@@ -2825,1 +2847,1 @@\n-  assert(!C->failing(), \"sanity\");\n+  assert(!C->failing(true) || C->failure_is_artificial(), \"sanity\");\n","filename":"src\/hotspot\/share\/opto\/matcher.cpp","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1694,1 +1694,1 @@\n-      assert(!C->failing(), \"Should not reach here if failing.\");\n+      assert(!C->failing(true) || C->failure_is_artificial(), \"Should not reach here if failing.\");\n@@ -3370,1 +3370,1 @@\n-  assert (!C->failing(), \"Must not have pending failure. Reason is: %s\", C->failure_reason());\n+  assert (!C->failing(true) || C->failure_is_artificial(), \"Must not have pending failure. Reason is: %s\", C->failure_reason());\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -429,1 +429,1 @@\n-  bool failing()                { return C->failing(); }\n+  bool failing()                { return C->failing(true); } \/\/ might have cascading effects, not stressing bailouts for now.\n","filename":"src\/hotspot\/share\/opto\/parse.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -309,2 +309,2 @@\n-      assert(false, \"RA Split failed: attempt to clone node with anti_dependence\");\n-      C->record_method_not_compilable(\"RA Split failed: attempt to clone node with anti_dependence\");\n+      assert(C->failure_is_artificial(), \"RA Split failed: attempt to clone node with anti_dependence\");\n+      C->record_method_not_compilable(\"RA Split failed: attempt to clone node with anti_dependence\", true);\n","filename":"src\/hotspot\/share\/opto\/reg_split.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.debug;\n+\n+import java.util.Random;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.Utils;\n+\n+\/*\n+ * @test\n+ * @key stress randomness\n+ * @bug 8330157\n+ * @requires vm.compiler2.enabled\n+ * @summary Basic tests for bailout stress flag.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.debug.TestStressBailout\n+ *\/\n+\n+public class TestStressBailout {\n+\n+    static void runTest(int interval) throws Exception {\n+        String[] procArgs = {\"-Xcomp\", \"-XX:-TieredCompilation\",\n+                             \"-XX:+UnlockDiagnosticVMOptions\", \"-XX:+StressBailout\",\n+                             \"-XX:StressBailoutInterval=\" + interval, \"-version\"};\n+        ProcessBuilder pb  = ProcessTools.createLimitedTestJavaProcessBuilder(procArgs);\n+        OutputAnalyzer out = new OutputAnalyzer(pb.start());\n+        out.shouldHaveExitValue(0);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        Random r = Utils.getRandomInstance();\n+        \/\/ Likely bail out on -version, for some low probability value.\n+        runTest(r.nextInt(1, 10));\n+        \/\/ Higher value\n+        runTest(r.nextInt(10, 1_000_000));\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/debug\/TestStressBailout.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}