{"files":[{"patch":"@@ -118,1 +118,1 @@\n-#include \"opto\/matcher.hpp\"\n+#include \"opto\/optoreg.hpp\"\n@@ -706,2 +706,0 @@\n-  unchecked_c2_static_field(Matcher,           _regEncode,                          sizeof(Matcher::_regEncode)) \/* NOTE: no type *\/ \\\n-                                                                                                                                     \\\n@@ -1063,1 +1061,0 @@\n-  declare_c2_toplevel_type(Matcher)                                       \\\n@@ -1287,1 +1284,0 @@\n-  COMPILER2_PRESENT(declare_unsigned_integer_type(node_idx_t))            \\\n@@ -1344,0 +1340,1 @@\n+  declare_preprocessor_constant(\"COMPILER2\", COMPILER2)                   \\\n@@ -1692,6 +1689,0 @@\n-  \/*********************\/                                                 \\\n-  \/* Matcher (C2 only) *\/                                                 \\\n-  \/*********************\/                                                 \\\n-                                                                          \\\n-  declare_c2_preprocessor_constant(\"Matcher::interpreter_frame_pointer_reg\", Matcher::interpreter_frame_pointer_reg()) \\\n-                                                                          \\\n","filename":"src\/hotspot\/share\/runtime\/vmStructs.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -41,3 +41,0 @@\n-  dumpideal -a | id <font color=\"red\">dump ideal graph like debug flag -XX:+PrintIdeal<\/font>\n-  dumpilt -a | id <font color=\"red\">dump inline tree for C2 compilation<\/font>\n-  dumpreplaydata &lt;address&gt; | -a | &lt;thread_id&gt; [&gt;replay.txt] <font color=\"red\">dump replay data into a file<\/font>\n@@ -87,6 +84,0 @@\n-<h3>Compilation Replay<\/h3>\n-<p>\n-When a java process crashes in compiled method, usually a core file is saved.\n-The replay function can reproduce the compiling process in the core.\n-<a href=\"cireplay.html\">cireplay.html<\/a>\n-\n","filename":"src\/jdk.hotspot.agent\/doc\/clhsdb.html","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -68,2 +68,0 @@\n-  protected static       int     matcherInterpreterFramePointerReg;\n-\n@@ -86,5 +84,0 @@\n-    if (VM.getVM().isServerCompiler()) {\n-      matcherInterpreterFramePointerReg =\n-          db.lookupIntConstant(\"Matcher::interpreter_frame_pointer_reg\").intValue();\n-    }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/code\/CodeBlob.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -45,3 +45,1 @@\n-  private static synchronized void initialize(TypeDataBase db) throws WrongTypeException {\n-    Type type      = db.lookupType(\"CompilerThread\");\n-  }\n+  private static synchronized void initialize(TypeDataBase db) throws WrongTypeException { }\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/CompilerThread.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -479,1 +479,1 @@\n-        if (db.lookupType(\"Matcher\", false) != null) {\n+        if (db.lookupIntConstant(\"COMPILER2\") != null) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/VM.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -41,3 +41,0 @@\n-  \/\/ C2 only\n-  public static Address matcherRegEncodeAddr;\n-\n@@ -52,7 +49,1 @@\n-  private static void initialize(TypeDataBase db) {\n-    if (VM.getVM().isServerCompiler()) {\n-      Type type = db.lookupType(\"Matcher\");\n-      Field f = type.getField(\"_regEncode\");\n-      matcherRegEncodeAddr = f.getStaticFieldAddress();\n-    }\n-  }\n+  private static void initialize(TypeDataBase db) { }\n@@ -68,7 +59,0 @@\n-  public int regEncode() {\n-    if (matcherRegEncodeAddr != null) {\n-      return (int) matcherRegEncodeAddr.getCIntegerAt(value, 1, true);\n-    }\n-    return value;\n-  }\n-\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/runtime\/VMReg.java","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"}]}