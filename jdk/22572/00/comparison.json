{"files":[{"patch":"@@ -45,1 +45,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -1831,6 +1830,0 @@\n-    private boolean isCustomSubclass() {\n-        \/\/ Return true if this class is a custom subclass of ObjectInputStream\n-        return getClass().getClassLoader()\n-                    != ObjectInputStream.class.getClassLoader();\n-    }\n-\n@@ -1882,6 +1875,0 @@\n-                \/\/ ReflectUtil.checkProxyPackageAccess makes a test\n-                \/\/ equivalent to isCustomSubclass so there's no need\n-                \/\/ to condition this call to isCustomSubclass == true here.\n-                ReflectUtil.checkProxyPackageAccess(\n-                        getClass().getClassLoader(),\n-                        cl.getInterfaces());\n@@ -1957,1 +1944,0 @@\n-        final boolean checksRequired = isCustomSubclass();\n@@ -1961,2 +1947,0 @@\n-            } else if (checksRequired) {\n-                ReflectUtil.checkPackageAccess(cl);\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectInputStream.java","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -1173,6 +1172,0 @@\n-    private boolean isCustomSubclass() {\n-        \/\/ Return true if this class is a custom subclass of ObjectOutputStream\n-        return getClass().getClassLoader()\n-                   != ObjectOutputStream.class.getClassLoader();\n-    }\n-\n@@ -1196,3 +1189,0 @@\n-        if (isCustomSubclass()) {\n-            ReflectUtil.checkPackageAccess(cl);\n-        }\n@@ -1225,3 +1215,0 @@\n-        if (cl != null && isCustomSubclass()) {\n-            ReflectUtil.checkPackageAccess(cl);\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/io\/ObjectOutputStream.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -63,1 +63,0 @@\n-import java.util.HashSet;\n@@ -94,1 +93,0 @@\n-import sun.reflect.misc.ReflectUtil;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -55,1 +55,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -987,1 +986,1 @@\n-    private static final String PROXY_PACKAGE_PREFIX = ReflectUtil.PROXY_PACKAGE;\n+    private static final String PROXY_PACKAGE_PREFIX = \"com.sun.proxy\";\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/Proxy.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.reflect.Member;\n@@ -44,1 +43,0 @@\n-import sun.reflect.misc.ReflectUtil;\n@@ -138,7 +136,3 @@\n-        if (genericDeclaration instanceof Class<?> c)\n-            ReflectUtil.checkPackageAccess(c);\n-        else if ((genericDeclaration instanceof Method) ||\n-                (genericDeclaration instanceof Constructor))\n-            ReflectUtil.conservativeCheckMemberAccess((Member)genericDeclaration);\n-        else\n-            throw new AssertionError(\"Unexpected kind of GenericDeclaration\");\n+        assert genericDeclaration instanceof Class<?> ||\n+                genericDeclaration instanceof Method ||\n+                genericDeclaration instanceof Constructor : \"Unexpected kind of GenericDeclaration\";\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/generics\/reflectiveObjects\/TypeVariableImpl.java","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,45 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.reflect.misc;\n-\n-import java.lang.reflect.Constructor;\n-\n-public final class ConstructorUtil {\n-\n-    private ConstructorUtil() {\n-    }\n-\n-    public static Constructor<?> getConstructor(Class<?> cls, Class<?>[] params)\n-        throws NoSuchMethodException {\n-        ReflectUtil.checkPackageAccess(cls);\n-        return cls.getConstructor(params);\n-    }\n-\n-    public static Constructor<?>[] getConstructors(Class<?> cls) {\n-        ReflectUtil.checkPackageAccess(cls);\n-        return cls.getConstructors();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/misc\/ConstructorUtil.java","additions":0,"deletions":45,"binary":false,"changes":45,"status":"deleted"},{"patch":"@@ -1,48 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.reflect.misc;\n-\n-import java.lang.reflect.Field;\n-\n-\/*\n- * Create a trampoline class.\n- *\/\n-public final class FieldUtil {\n-\n-    private FieldUtil() {\n-    }\n-\n-    public static Field getField(Class<?> cls, String name)\n-        throws NoSuchFieldException {\n-        ReflectUtil.checkPackageAccess(cls);\n-        return cls.getField(name);\n-    }\n-\n-    public static Field[] getFields(Class<?> cls) {\n-        ReflectUtil.checkPackageAccess(cls);\n-        return cls.getFields();\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/misc\/FieldUtil.java","additions":0,"deletions":48,"binary":false,"changes":48,"status":"deleted"},{"patch":"@@ -82,1 +82,0 @@\n-        ReflectUtil.checkPackageAccess(cls);\n@@ -86,5 +85,0 @@\n-    public static Method[] getMethods(Class<?> cls) {\n-        ReflectUtil.checkPackageAccess(cls);\n-        return cls.getMethods();\n-    }\n-\n@@ -143,1 +137,0 @@\n-        ReflectUtil.checkPackageAccess(name);\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/misc\/MethodUtil.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -28,4 +28,0 @@\n-import java.lang.reflect.Member;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-import java.lang.reflect.Proxy;\n@@ -70,108 +66,0 @@\n-\n-    \/**\n-     * Does nothing.\n-     *\/\n-    public static void conservativeCheckMemberAccess(Member m) {\n-    }\n-\n-    \/**\n-     * Does nothing.\n-     *\/\n-    public static void checkPackageAccess(Class<?> clazz) {\n-    }\n-\n-    \/**\n-     * Does nothing\n-     *\/\n-    public static void checkPackageAccess(String name) {\n-    }\n-\n-    \/**\n-     * Returns true.\n-     *\/\n-    public static boolean isPackageAccessible(Class<?> clazz) {\n-        return true;\n-    }\n-\n-    \/**\n-     * Returns false.\n-     *\/\n-    public static boolean needsPackageAccessCheck(ClassLoader from, ClassLoader to) {\n-        return false;\n-    }\n-\n-    \/**\n-     * Does nothing\n-     *\/\n-    public static void checkProxyPackageAccess(Class<?> clazz) {\n-    }\n-\n-    \/**\n-     * Does nothing.\n-     *\/\n-    public static void checkProxyPackageAccess(ClassLoader ccl,\n-                                               Class<?>... interfaces) {\n-    }\n-\n-    \/\/ Note that bytecode instrumentation tools may exclude 'sun.*'\n-    \/\/ classes but not generated proxy classes and so keep it in com.sun.*\n-    public static final String PROXY_PACKAGE = \"com.sun.proxy\";\n-\n-    \/**\n-     * Test if the given class is a proxy class that implements\n-     * non-public interface.  Such proxy class may be in a non-restricted\n-     * package that bypasses checkPackageAccess.\n-     *\/\n-    public static boolean isNonPublicProxyClass(Class<?> cls) {\n-        if (!Proxy.isProxyClass(cls)) {\n-            return false;\n-        }\n-        return !Modifier.isPublic(cls.getModifiers());\n-    }\n-\n-    \/**\n-     * Check if the given method is a method declared in the proxy interface\n-     * implemented by the given proxy instance.\n-     *\n-     * @param proxy a proxy instance\n-     * @param method an interface method dispatched to a InvocationHandler\n-     *\n-     * @throws IllegalArgumentException if the given proxy or method is invalid.\n-     *\/\n-    public static void checkProxyMethod(Object proxy, Method method) {\n-        \/\/ check if it is a valid proxy instance\n-        if (proxy == null || !Proxy.isProxyClass(proxy.getClass())) {\n-            throw new IllegalArgumentException(\"Not a Proxy instance\");\n-        }\n-        if (Modifier.isStatic(method.getModifiers())) {\n-            throw new IllegalArgumentException(\"Can't handle static method\");\n-        }\n-\n-        Class<?> c = method.getDeclaringClass();\n-        if (c == Object.class) {\n-            String name = method.getName();\n-            if (name.equals(\"hashCode\") || name.equals(\"equals\") || name.equals(\"toString\")) {\n-                return;\n-            }\n-        }\n-\n-        if (isSuperInterface(proxy.getClass(), c)) {\n-            return;\n-        }\n-\n-        \/\/ disallow any method not declared in one of the proxy interfaces\n-        throw new IllegalArgumentException(\"Can't handle: \" + method);\n-    }\n-\n-    private static boolean isSuperInterface(Class<?> c, Class<?> intf) {\n-        for (Class<?> i : c.getInterfaces()) {\n-            if (i == intf) {\n-                return true;\n-            }\n-            if (isSuperInterface(i, intf)) {\n-                return true;\n-            }\n-        }\n-        return false;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/reflect\/misc\/ReflectUtil.java","additions":0,"deletions":112,"binary":false,"changes":112,"status":"modified"},{"patch":"@@ -49,1 +49,0 @@\n-import sun.reflect.misc.ConstructorUtil;\n@@ -684,1 +683,1 @@\n-            return ConstructorUtil.getConstructor(c, params);\n+            return c.getConstructor(params);\n","filename":"src\/java.management\/share\/classes\/com\/sun\/jmx\/mbeanserver\/MBeanInstantiator.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}