{"files":[{"patch":"@@ -122,0 +122,105 @@\n+void BarrierSetAssembler::copy_load_at(MacroAssembler* masm,\n+                                       DecoratorSet decorators,\n+                                       BasicType type,\n+                                       size_t bytes,\n+                                       Register dst1,\n+                                       Register dst2,\n+                                       Address src,\n+                                       Register tmp) {\n+  if (bytes == 1) {\n+    assert(dst2 == noreg, \"invariant\");\n+    __ ldrb(dst1, src);\n+  } else if (bytes == 2) {\n+    assert(dst2 == noreg, \"invariant\");\n+    __ ldrh(dst1, src);\n+  } else if (bytes == 4) {\n+    assert(dst2 == noreg, \"invariant\");\n+    __ ldrw(dst1, src);\n+  } else if (bytes == 8) {\n+    assert(dst2 == noreg, \"invariant\");\n+    __ ldr(dst1, src);\n+  } else if (bytes == 16) {\n+    assert(dst2 != noreg, \"invariant\");\n+    assert(dst2 != dst1, \"invariant\");\n+    __ ldp(dst1, dst2, src);\n+  } else {\n+    \/\/ Not the right size\n+    ShouldNotReachHere();\n+  }\n+  if ((decorators & ARRAYCOPY_CHECKCAST) != 0 && UseCompressedOops) {\n+    __ decode_heap_oop(dst1);\n+  }\n+}\n+\n+void BarrierSetAssembler::copy_store_at(MacroAssembler* masm,\n+                                        DecoratorSet decorators,\n+                                        BasicType type,\n+                                        size_t bytes,\n+                                        Address dst,\n+                                        Register src1,\n+                                        Register src2,\n+                                        Register tmp1,\n+                                        Register tmp2,\n+                                        Register tmp3) {\n+  if ((decorators & ARRAYCOPY_CHECKCAST) != 0 && UseCompressedOops) {\n+    __ encode_heap_oop(src1);\n+  }\n+  if (bytes == 1) {\n+    assert(src2 == noreg, \"invariant\");\n+    __ strb(src1, dst);\n+  } else if (bytes == 2) {\n+    assert(src2 == noreg, \"invariant\");\n+    __ strh(src1, dst);\n+  } else if (bytes == 4) {\n+    assert(src2 == noreg, \"invariant\");\n+    __ strw(src1, dst);\n+  } else if (bytes == 8) {\n+    assert(src2 == noreg, \"invariant\");\n+    __ str(src1, dst);\n+  } else if (bytes == 16) {\n+    assert(src2 != noreg, \"invariant\");\n+    assert(src2 != src1, \"invariant\");\n+    __ stp(src1, src2, dst);\n+  } else {\n+    \/\/ Not the right size\n+    ShouldNotReachHere();\n+  }\n+}\n+\n+void BarrierSetAssembler::copy_load_at(MacroAssembler* masm,\n+                                       DecoratorSet decorators,\n+                                       BasicType type,\n+                                       size_t bytes,\n+                                       FloatRegister dst1,\n+                                       FloatRegister dst2,\n+                                       Address src,\n+                                       Register tmp1,\n+                                       Register tmp2,\n+                                       FloatRegister vec_tmp) {\n+  if (bytes == 32) {\n+    __ ldpq(dst1, dst2, src);\n+  } else {\n+    ShouldNotReachHere();\n+  }\n+}\n+\n+void BarrierSetAssembler::copy_store_at(MacroAssembler* masm,\n+                                        DecoratorSet decorators,\n+                                        BasicType type,\n+                                        size_t bytes,\n+                                        Address dst,\n+                                        FloatRegister src1,\n+                                        FloatRegister src2,\n+                                        Register tmp1,\n+                                        Register tmp2,\n+                                        Register tmp3,\n+                                        FloatRegister vec_tmp1,\n+                                        FloatRegister vec_tmp2,\n+                                        FloatRegister vec_tmp3) {\n+  if (bytes == 32) {\n+    __ stpq(src1, src2, dst);\n+  } else {\n+    ShouldNotReachHere();\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.cpp","additions":105,"deletions":0,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -51,0 +51,46 @@\n+\n+  virtual void copy_load_at(MacroAssembler* masm,\n+                            DecoratorSet decorators,\n+                            BasicType type,\n+                            size_t bytes,\n+                            Register dst1,\n+                            Register dst2,\n+                            Address src,\n+                            Register tmp);\n+\n+  virtual void copy_store_at(MacroAssembler* masm,\n+                             DecoratorSet decorators,\n+                             BasicType type,\n+                             size_t bytes,\n+                             Address dst,\n+                             Register src1,\n+                             Register src2,\n+                             Register tmp1,\n+                             Register tmp2,\n+                             Register tmp3);\n+\n+  virtual void copy_load_at(MacroAssembler* masm,\n+                            DecoratorSet decorators,\n+                            BasicType type,\n+                            size_t bytes,\n+                            FloatRegister dst1,\n+                            FloatRegister dst2,\n+                            Address src,\n+                            Register tmp1,\n+                            Register tmp2,\n+                            FloatRegister vec_tmp);\n+\n+  virtual void copy_store_at(MacroAssembler* masm,\n+                             DecoratorSet decorators,\n+                             BasicType type,\n+                             size_t bytes,\n+                             Address dst,\n+                             FloatRegister src1,\n+                             FloatRegister src2,\n+                             Register tmp1,\n+                             Register tmp2,\n+                             Register tmp3,\n+                             FloatRegister vec_tmp1,\n+                             FloatRegister vec_tmp2,\n+                             FloatRegister vec_tmp3);\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/shared\/barrierSetAssembler_aarch64.hpp","additions":46,"deletions":0,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -712,1 +712,1 @@\n-  void generate_copy_longs(Label &start, Register s, Register d, Register count,\n+  void generate_copy_longs(DecoratorSet decorators, BasicType type, Label &start, Register s, Register d, Register count,\n@@ -718,2 +718,5 @@\n-      t4 = r7, t5 = r10, t6 = r11, t7 = r12;\n-    const Register stride = r13;\n+      t4 = r7, t5 = r11, t6 = r12, t7 = r13;\n+    const Register stride = r14;\n+    const Register gct1 = r8, gct2 = r9, gct3 = r10;\n+    const FloatRegister gcvt1 = v6, gcvt2 = v7, gcvt3 = v8;\n+    BarrierSetAssembler* bs_asm = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -721,2 +724,2 @@\n-    assert_different_registers(rscratch1, t0, t1, t2, t3, t4, t5, t6, t7);\n-    assert_different_registers(s, d, count, rscratch1);\n+    assert_different_registers(rscratch1, rscratch2, t0, t1, t2, t3, t4, t5, t6, t7);\n+    assert_different_registers(s, d, count, rscratch1, rscratch2);\n@@ -760,2 +763,6 @@\n-      __ ldpq(v0, v1, Address(s, 4 * unit));\n-      __ ldpq(v2, v3, Address(__ pre(s, 8 * unit)));\n+      bs_asm->copy_load_at(_masm, decorators, type, 32,\n+                           v0, v1, Address(s, 4 * unit),\n+                           gct1, gct2, gcvt1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 32,\n+                           v2, v3, Address(__ pre(s, 8 * unit)),\n+                           gct1, gct2, gcvt1);\n@@ -763,4 +770,12 @@\n-      __ ldp(t0, t1, Address(s, 2 * unit));\n-      __ ldp(t2, t3, Address(s, 4 * unit));\n-      __ ldp(t4, t5, Address(s, 6 * unit));\n-      __ ldp(t6, t7, Address(__ pre(s, 8 * unit)));\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t0, t1, Address(s, 2 * unit),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t2, t3, Address(s, 4 * unit),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t4, t5, Address(s, 6 * unit),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t6, t7, Address(__ pre(s, 8 * unit)),\n+                           gct1);\n@@ -786,4 +801,12 @@\n-      __ stpq(v0, v1, Address(d, 4 * unit));\n-      __ ldpq(v0, v1, Address(s, 4 * unit));\n-      __ stpq(v2, v3, Address(__ pre(d, 8 * unit)));\n-      __ ldpq(v2, v3, Address(__ pre(s, 8 * unit)));\n+      bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                            Address(d, 4 * unit), v0, v1,\n+                            gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n+      bs_asm->copy_load_at(_masm, decorators, type, 32,\n+                           v0, v1, Address(s, 4 * unit),\n+                           gct1, gct2, gcvt1);\n+      bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                            Address(__ pre(d, 8 * unit)), v2, v3,\n+                            gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n+      bs_asm->copy_load_at(_masm, decorators, type, 32,\n+                           v2, v3, Address(__ pre(s, 8 * unit)),\n+                           gct1, gct2, gcvt1);\n@@ -791,8 +814,24 @@\n-      __ stp(t0, t1, Address(d, 2 * unit));\n-      __ ldp(t0, t1, Address(s, 2 * unit));\n-      __ stp(t2, t3, Address(d, 4 * unit));\n-      __ ldp(t2, t3, Address(s, 4 * unit));\n-      __ stp(t4, t5, Address(d, 6 * unit));\n-      __ ldp(t4, t5, Address(s, 6 * unit));\n-      __ stp(t6, t7, Address(__ pre(d, 8 * unit)));\n-      __ ldp(t6, t7, Address(__ pre(s, 8 * unit)));\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 2 * unit), t0, t1,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t0, t1, Address(s, 2 * unit),\n+                           gct1);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 4 * unit), t2, t3,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t2, t3, Address(s, 4 * unit),\n+                           gct1);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 6 * unit), t4, t5,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t4, t5, Address(s, 6 * unit),\n+                           gct1);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(__ pre(d, 8 * unit)), t6, t7,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t6, t7, Address(__ pre(s, 8 * unit)),\n+                           gct1);\n@@ -807,2 +846,6 @@\n-      __ stpq(v0, v1, Address(d, 4 * unit));\n-      __ stpq(v2, v3, Address(__ pre(d, 8 * unit)));\n+      bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                            Address(d, 4 * unit), v0, v1,\n+                            gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                            Address(__ pre(d, 8 * unit)), v2, v3,\n+                            gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n@@ -810,4 +853,12 @@\n-      __ stp(t0, t1, Address(d, 2 * unit));\n-      __ stp(t2, t3, Address(d, 4 * unit));\n-      __ stp(t4, t5, Address(d, 6 * unit));\n-      __ stp(t6, t7, Address(__ pre(d, 8 * unit)));\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 2 * unit), t0, t1,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 4 * unit), t2, t3,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 6 * unit), t4, t5,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(__ pre(d, 8 * unit)), t6, t7,\n+                            gct1, gct2, gct3);\n@@ -820,2 +871,6 @@\n-        __ ldpq(v0, v1, Address(__ pre(s, 4 * unit)));\n-        __ stpq(v0, v1, Address(__ pre(d, 4 * unit)));\n+        bs_asm->copy_load_at(_masm, decorators, type, 32,\n+                             v0, v1, Address(__ pre(s, 4 * unit)),\n+                             gct1, gct2, gcvt1);\n+        bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                              Address(__ pre(d, 4 * unit)), v0, v1,\n+                              gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n@@ -823,4 +878,12 @@\n-        __ ldp(t0, t1, Address(s, 2 * unit));\n-        __ ldp(t2, t3, Address(__ pre(s, 4 * unit)));\n-        __ stp(t0, t1, Address(d, 2 * unit));\n-        __ stp(t2, t3, Address(__ pre(d, 4 * unit)));\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t0, t1, Address(s, 2 * unit),\n+                             gct1);\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t2, t3, Address(__ pre(s, 4 * unit)),\n+                             gct1);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 2 * unit), t0, t1,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(__ pre(d, 4 * unit)), t2, t3,\n+                              gct1, gct2, gct3);\n@@ -836,2 +899,6 @@\n-      __ ldp(t0, t1, Address(__ adjust(s, 2 * unit, direction == copy_backwards)));\n-      __ stp(t0, t1, Address(__ adjust(d, 2 * unit, direction == copy_backwards)));\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t0, t1, Address(__ adjust(s, 2 * unit, direction == copy_backwards)),\n+                           gct1);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(__ adjust(d, 2 * unit, direction == copy_backwards)), t0, t1,\n+                            gct1, gct2, gct3);\n@@ -896,4 +963,12 @@\n-      __ ldp(t0, t1, Address(s, 2 * unit));\n-      __ ldp(t2, t3, Address(s, 4 * unit));\n-      __ ldp(t4, t5, Address(s, 6 * unit));\n-      __ ldp(t6, t7, Address(__ pre(s, 8 * unit)));\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t0, t1, Address(s, 2 * unit),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t2, t3, Address(s, 4 * unit),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t4, t5, Address(s, 6 * unit),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t6, t7, Address(__ pre(s, 8 * unit)),\n+                           gct1);\n@@ -928,9 +1003,27 @@\n-        __ str(t0, Address(d, 1 * unit));\n-        __ stp(t1, t2, Address(d, 2 * unit));\n-        __ ldp(t0, t1, Address(s, 2 * unit));\n-        __ stp(t3, t4, Address(d, 4 * unit));\n-        __ ldp(t2, t3, Address(s, 4 * unit));\n-        __ stp(t5, t6, Address(d, 6 * unit));\n-        __ ldp(t4, t5, Address(s, 6 * unit));\n-        __ str(t7, Address(__ pre(d, 8 * unit)));\n-        __ ldp(t6, t7, Address(__ pre(s, 8 * unit)));\n+        bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                              Address(d, 1 * unit), t0, noreg,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 2 * unit), t1, t2,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t0, t1, Address(s, 2 * unit),\n+                             gct1);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 4 * unit), t3, t4,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t2, t3, Address(s, 4 * unit),\n+                             gct1);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 6 * unit), t5, t6,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t4, t5, Address(s, 6 * unit),\n+                             gct1);\n+        bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                              Address(__ pre(d, 8 * unit)), t7, noreg,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t6, t7, Address(__ pre(s, 8 * unit)),\n+                             gct1);\n@@ -951,9 +1044,27 @@\n-        __ str(t1, Address(d, 1 * unit));\n-        __ stp(t3, t0, Address(d, 3 * unit));\n-        __ ldp(t0, t1, Address(s, 2 * unit));\n-        __ stp(t5, t2, Address(d, 5 * unit));\n-        __ ldp(t2, t3, Address(s, 4 * unit));\n-        __ stp(t7, t4, Address(d, 7 * unit));\n-        __ ldp(t4, t5, Address(s, 6 * unit));\n-        __ str(t6, Address(__ pre(d, 8 * unit)));\n-        __ ldp(t6, t7, Address(__ pre(s, 8 * unit)));\n+        bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                              Address(d, 1 * unit), t1, noreg,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 3 * unit), t3, t0,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t0, t1, Address(s, 2 * unit),\n+                             gct1);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 5 * unit), t5, t2,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t2, t3, Address(s, 4 * unit),\n+                             gct1);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 7 * unit), t7, t4,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t4, t5, Address(s, 6 * unit),\n+                             gct1);\n+        bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                              Address(__ pre(d, 8 * unit)), t6, noreg,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t6, t7, Address(__ pre(s, 8 * unit)),\n+                             gct1);\n@@ -971,5 +1082,15 @@\n-        __ str(t0, Address(d, 1 * unit));\n-        __ stp(t1, t2, Address(d, 2 * unit));\n-        __ stp(t3, t4, Address(d, 4 * unit));\n-        __ stp(t5, t6, Address(d, 6 * unit));\n-        __ str(t7, Address(__ pre(d, 8 * unit)));\n+        bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                              Address(d, 1 * unit), t0, noreg,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 2 * unit), t1, t2,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 4 * unit), t3, t4,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 6 * unit), t5, t6,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                              Address(__ pre(d, 8 * unit)), t7, noreg,\n+                              gct1, gct2, gct3);\n@@ -977,5 +1098,15 @@\n-        __ str(t1, Address(d, 1 * unit));\n-        __ stp(t3, t0, Address(d, 3 * unit));\n-        __ stp(t5, t2, Address(d, 5 * unit));\n-        __ stp(t7, t4, Address(d, 7 * unit));\n-        __ str(t6, Address(__ pre(d, 8 * unit)));\n+        bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                              Address(d, 1 * unit), t1, noreg,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 3 * unit), t3, t0,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 5 * unit), t5, t2,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(d, 7 * unit), t7, t4,\n+                              gct1, gct2, gct3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                              Address(__ pre(d, 8 * unit)), t6, noreg,\n+                              gct1, gct2, gct3);\n@@ -994,2 +1125,6 @@\n-        __ ldp(t0, t1, Address(s, 2 * unit));\n-        __ ldp(t2, t3, Address(__ pre(s, 4 * unit)));\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t0, t1, Address(s, 2 * unit),\n+                             gct1);\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t2, t3, Address(__ pre(s, 4 * unit)),\n+                             gct1);\n@@ -997,3 +1132,9 @@\n-          __ str(t0, Address(d, 1 * unit));\n-          __ stp(t1, t2, Address(d, 2 * unit));\n-          __ str(t3, Address(__ pre(d, 4 * unit)));\n+          bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                                Address(d, 1 * unit), t0, noreg,\n+                                gct1, gct2, gct3);\n+          bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                                Address(d, 2 * unit), t1, t2,\n+                                gct1, gct2, gct3);\n+          bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                                Address(__ pre(d, 4 * unit)), t3, noreg,\n+                                gct1, gct2, gct3);\n@@ -1001,3 +1142,9 @@\n-          __ str(t1, Address(d, 1 * unit));\n-          __ stp(t3, t0, Address(d, 3 * unit));\n-          __ str(t2, Address(__ pre(d, 4 * unit)));\n+          bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                                Address(d, 1 * unit), t1, noreg,\n+                                gct1, gct2, gct3);\n+          bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                                Address(d, 3 * unit), t3, t0,\n+                                gct1, gct2, gct3);\n+          bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                                Address(__ pre(d, 4 * unit)), t2, noreg,\n+                                gct1, gct2, gct3);\n@@ -1012,1 +1159,3 @@\n-        __ ldp(t0, t1, Address(__ pre(s, 2 * unit)));\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t0, t1, Address(__ pre(s, 2 * unit)),\n+                             gct1);\n@@ -1014,2 +1163,6 @@\n-          __ str(t0, Address(d, 1 * unit));\n-          __ str(t1, Address(__ pre(d, 2 * unit)));\n+          bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                                Address(d, 1 * unit), t0, noreg,\n+                                gct1, gct2, gct3);\n+          bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                                Address(__ pre(d, 2 * unit)), t1, noreg,\n+                                gct1, gct2, gct3);\n@@ -1017,2 +1170,6 @@\n-          __ str(t1, Address(d, 1 * unit));\n-          __ str(t0, Address(__ pre(d, 2 * unit)));\n+          bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                                Address(d, 1 * unit), t1, noreg,\n+                                gct1, gct2, gct3);\n+          bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                                Address(__ pre(d, 2 * unit)), t0, noreg,\n+                                gct1, gct2, gct3);\n@@ -1041,1 +1198,1 @@\n-  void copy_memory_small(Register s, Register d, Register count, Register tmp, int step) {\n+  void copy_memory_small(DecoratorSet decorators, BasicType type, Register s, Register d, Register count, int step) {\n@@ -1045,1 +1202,0 @@\n-    int unit = wordSize * direction;\n@@ -1052,1 +1208,3 @@\n-    const Register t0 = r3, t1 = r4, t2 = r5, t3 = r6;\n+    const Register t0 = r3;\n+    const Register gct1 = r8, gct2 = r9, gct3 = r10;\n+    BarrierSetAssembler* bs_asm = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -1060,2 +1218,6 @@\n-    __ ldr(tmp, Address(__ adjust(s, unit, is_backwards)));\n-    __ str(tmp, Address(__ adjust(d, unit, is_backwards)));\n+    bs_asm->copy_load_at(_masm, decorators, type, 8,\n+                         t0, noreg, Address(__ adjust(s, direction * wordSize, is_backwards)),\n+                         gct1);\n+    bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                          Address(__ adjust(d, direction * wordSize, is_backwards)), t0, noreg,\n+                          gct1, gct2, gct3);\n@@ -1066,2 +1228,2 @@\n-      __ ldrw(tmp, Address(__ adjust(s, sizeof (jint) * direction, is_backwards)));\n-      __ strw(tmp, Address(__ adjust(d, sizeof (jint) * direction, is_backwards)));\n+      __ ldrw(t0, Address(__ adjust(s, sizeof (jint) * direction, is_backwards)));\n+      __ strw(t0, Address(__ adjust(d, sizeof (jint) * direction, is_backwards)));\n@@ -1073,2 +1235,2 @@\n-      __ ldrh(tmp, Address(__ adjust(s, sizeof (jshort) * direction, is_backwards)));\n-      __ strh(tmp, Address(__ adjust(d, sizeof (jshort) * direction, is_backwards)));\n+      __ ldrh(t0, Address(__ adjust(s, sizeof (jshort) * direction, is_backwards)));\n+      __ strh(t0, Address(__ adjust(d, sizeof (jshort) * direction, is_backwards)));\n@@ -1080,2 +1242,2 @@\n-      __ ldrb(tmp, Address(__ adjust(s, sizeof (jbyte) * direction, is_backwards)));\n-      __ strb(tmp, Address(__ adjust(d, sizeof (jbyte) * direction, is_backwards)));\n+      __ ldrb(t0, Address(__ adjust(s, sizeof (jbyte) * direction, is_backwards)));\n+      __ strb(t0, Address(__ adjust(d, sizeof (jbyte) * direction, is_backwards)));\n@@ -1087,0 +1249,2 @@\n+  Label copy_obj_f, copy_obj_b;\n+  Label copy_obj_uninit_f, copy_obj_uninit_b;\n@@ -1095,2 +1259,2 @@\n-  void copy_memory(bool is_aligned, Register s, Register d,\n-                   Register count, Register tmp, int step) {\n+  void copy_memory(DecoratorSet decorators, BasicType type, bool is_aligned,\n+                   Register s, Register d, Register count, int step) {\n@@ -1105,2 +1269,2 @@\n-    const Register t2 = r5, t3 = r6, t4 = r7, t5 = r8;\n-    const Register t6 = r9, t7 = r10, t8 = r11, t9 = r12;\n+    const Register t2 = r5, t3 = r6, t4 = r7, t5 = r11;\n+    const Register t6 = r12, t7 = r13, t8 = r14, t9 = r15;\n@@ -1108,0 +1272,3 @@\n+    const Register gct1 = r8, gct2 = r9, gct3 = r10;\n+    const FloatRegister gcvt1 = v6, gcvt2 = v7, gcvt3 = v8;\n+    BarrierSetAssembler* bs_asm = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -1128,4 +1295,12 @@\n-      __ ldpq(v0, v1, Address(s, 0));\n-      __ ldpq(v2, v3, Address(send, -32));\n-      __ stpq(v0, v1, Address(d, 0));\n-      __ stpq(v2, v3, Address(dend, -32));\n+      bs_asm->copy_load_at(_masm, decorators, type, 32,\n+                           v0, v1, Address(s, 0),\n+                           gct1, gct2, gcvt1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 32,\n+                           v2, v3, Address(send, -32),\n+                           gct1, gct2, gcvt1);\n+      bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                            Address(d, 0), v0, v1,\n+                            gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                            Address(dend, -32), v2, v3,\n+                            gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n@@ -1133,9 +1308,25 @@\n-      __ ldp(t0, t1, Address(s, 0));\n-      __ ldp(t2, t3, Address(s, 16));\n-      __ ldp(t4, t5, Address(send, -32));\n-      __ ldp(t6, t7, Address(send, -16));\n-\n-      __ stp(t0, t1, Address(d, 0));\n-      __ stp(t2, t3, Address(d, 16));\n-      __ stp(t4, t5, Address(dend, -32));\n-      __ stp(t6, t7, Address(dend, -16));\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t0, t1, Address(s, 0),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t2, t3, Address(s, 16),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t4, t5, Address(send, -32),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t6, t7, Address(send, -16),\n+                           gct1);\n+\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 0), t0, t1,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 16), t2, t3,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(dend, -32), t4, t5,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(dend, -16), t6, t7,\n+                            gct1, gct2, gct3);\n@@ -1147,4 +1338,13 @@\n-    __ ldp(t0, t1, Address(s, 0));\n-    __ ldp(t2, t3, Address(send, -16));\n-    __ stp(t0, t1, Address(d, 0));\n-    __ stp(t2, t3, Address(dend, -16));\n+    bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                         t0, t1, Address(s, 0),\n+                         gct1);\n+    bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                         t6, t7, Address(send, -16),\n+                         gct1);\n+\n+    bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                          Address(d, 0), t0, t1,\n+                          gct1, gct2, gct3);\n+    bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                          Address(dend, -16), t6, t7,\n+                          gct1, gct2, gct3);\n@@ -1157,2 +1357,6 @@\n-      __ ldpq(v0, v1, Address(s, 0));\n-      __ ldpq(v2, v3, Address(s, 32));\n+      bs_asm->copy_load_at(_masm, decorators, type, 32,\n+                           v0, v1, Address(s, 0),\n+                           gct1, gct2, gcvt1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 32,\n+                           v2, v3, Address(s, 32),\n+                           gct1, gct2, gcvt1);\n@@ -1170,5 +1374,14 @@\n-        __ ldp(t0, t1, Address(send, -16));\n-\n-        __ stpq(v0, v1, Address(d, 0));\n-        __ stpq(v2, v3, Address(d, 32));\n-        __ stp(t0, t1, Address(dend, -16));\n+        bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                             t0, t1, Address(send, -16),\n+                             gct1);\n+\n+        bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                              Address(d, 0), v0, v1,\n+                              gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n+        bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                              Address(d, 32), v2, v3,\n+                              gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n+\n+        bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                              Address(dend, -16), t0, t1,\n+                              gct1, gct2, gct3);\n@@ -1179,5 +1392,14 @@\n-      __ ldpq(v4, v5, Address(send, -32));\n-\n-      __ stpq(v0, v1, Address(d, 0));\n-      __ stpq(v2, v3, Address(d, 32));\n-      __ stpq(v4, v5, Address(dend, -32));\n+      bs_asm->copy_load_at(_masm, decorators, type, 32,\n+                           v4, v5, Address(send, -32),\n+                           gct1, gct2, gcvt1);\n+\n+      bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                            Address(d, 0), v0, v1,\n+                            gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                            Address(d, 32), v2, v3,\n+                            gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n+\n+      bs_asm->copy_store_at(_masm, decorators, type, 32,\n+                            Address(dend, -32), v4, v5,\n+                            gct1, gct2, gct3, gcvt1, gcvt2, gcvt3);\n@@ -1185,11 +1407,31 @@\n-      __ ldp(t0, t1, Address(s, 0));\n-      __ ldp(t2, t3, Address(s, 16));\n-      __ ldp(t4, t5, Address(s, 32));\n-      __ ldp(t6, t7, Address(s, 48));\n-      __ ldp(t8, t9, Address(send, -16));\n-\n-      __ stp(t0, t1, Address(d, 0));\n-      __ stp(t2, t3, Address(d, 16));\n-      __ stp(t4, t5, Address(d, 32));\n-      __ stp(t6, t7, Address(d, 48));\n-      __ stp(t8, t9, Address(dend, -16));\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t0, t1, Address(s, 0),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t2, t3, Address(s, 16),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t4, t5, Address(s, 32),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t6, t7, Address(s, 48),\n+                           gct1);\n+      bs_asm->copy_load_at(_masm, decorators, type, 16,\n+                           t8, t9, Address(send, -16),\n+                           gct1);\n+\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 0), t0, t1,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 16), t2, t3,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 32), t4, t5,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(d, 48), t6, t7,\n+                            gct1, gct2, gct3);\n+      bs_asm->copy_store_at(_masm, decorators, type, 16,\n+                            Address(dend, -16), t8, t9,\n+                            gct1, gct2, gct3);\n@@ -1205,4 +1447,12 @@\n-    __ ldr(t0, Address(s, 0));\n-    __ ldr(t1, Address(send, -8));\n-    __ str(t0, Address(d, 0));\n-    __ str(t1, Address(dend, -8));\n+    bs_asm->copy_load_at(_masm, decorators, type, 8,\n+                         t0, noreg, Address(s, 0),\n+                         gct1);\n+    bs_asm->copy_load_at(_masm, decorators, type, 8,\n+                         t1, noreg, Address(send, -8),\n+                         gct1);\n+    bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                          Address(d, 0), t0, noreg,\n+                          gct1, gct2, gct3);\n+    bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                          Address(dend, -8), t1, noreg,\n+                          gct1, gct2, gct3);\n@@ -1260,2 +1510,6 @@\n-      __ ldr(tmp, Address(__ adjust(s, direction * wordSize, is_backwards)));\n-      __ str(tmp, Address(__ adjust(d, direction * wordSize, is_backwards)));\n+      bs_asm->copy_load_at(_masm, decorators, type, 8,\n+                           t0, noreg, Address(__ adjust(s, direction * wordSize, is_backwards)),\n+                           gct1);\n+      bs_asm->copy_store_at(_masm, decorators, type, 8,\n+                            Address(__ adjust(d, direction * wordSize, is_backwards)), t0, noreg,\n+                            gct1, gct2, gct3);\n@@ -1265,1 +1519,1 @@\n-        __ andr(rscratch2, s, 2 * wordSize - 1);\n+        __ andr(r15, s, 2 * wordSize - 1);\n@@ -1267,2 +1521,2 @@\n-        __ neg(rscratch2, s);\n-        __ andr(rscratch2, rscratch2, 2 * wordSize - 1);\n+        __ neg(r15, s);\n+        __ andr(r15, r15, 2 * wordSize - 1);\n@@ -1270,2 +1524,2 @@\n-      \/\/ rscratch2 is the byte adjustment needed to align s.\n-      __ cbz(rscratch2, aligned);\n+      \/\/ r15 is the byte adjustment needed to align s.\n+      __ cbz(r15, aligned);\n@@ -1273,2 +1527,2 @@\n-      if (shift)  __ lsr(rscratch2, rscratch2, shift);\n-      __ sub(count, count, rscratch2);\n+      if (shift)  __ lsr(r15, r15, shift);\n+      __ sub(count, count, r15);\n@@ -1286,2 +1540,2 @@\n-        __ sub(s, s, rscratch2);\n-        __ sub(d, d, rscratch2);\n+        __ sub(s, s, r15);\n+        __ sub(d, d, r15);\n@@ -1289,2 +1543,2 @@\n-        __ add(s, s, rscratch2);\n-        __ add(d, d, rscratch2);\n+        __ add(s, s, r15);\n+        __ add(d, d, r15);\n@@ -1293,1 +1547,1 @@\n-      copy_memory_small(s, d, rscratch2, rscratch1, step);\n+      copy_memory_small(decorators, type, s, d, r15, step);\n@@ -1303,5 +1557,18 @@\n-    __ lsr(rscratch2, count, exact_log2(wordSize\/granularity));\n-    if (direction == copy_forwards)\n-      __ bl(copy_f);\n-    else\n-      __ bl(copy_b);\n+    __ lsr(r15, count, exact_log2(wordSize\/granularity));\n+    if (direction == copy_forwards) {\n+      if (type != T_OBJECT) {\n+        __ bl(copy_f);\n+      } else if ((decorators & IS_DEST_UNINITIALIZED) != 0) {\n+        __ bl(copy_obj_uninit_f);\n+      } else {\n+        __ bl(copy_obj_f);\n+      }\n+    } else {\n+      if (type != T_OBJECT) {\n+        __ bl(copy_b);\n+      } else if ((decorators & IS_DEST_UNINITIALIZED) != 0) {\n+        __ bl(copy_obj_uninit_b);\n+      } else {\n+        __ bl(copy_obj_b);\n+      }\n+    }\n@@ -1310,1 +1577,1 @@\n-    copy_memory_small(s, d, count, tmp, step);\n+    copy_memory_small(decorators, type, s, d, count, step);\n@@ -1405,1 +1672,1 @@\n-      copy_memory(aligned, s, d, count, rscratch1, size);\n+      copy_memory(decorators, is_oop ? T_OBJECT : T_BYTE, aligned, s, d, count, size);\n@@ -1476,1 +1743,1 @@\n-      copy_memory(aligned, s, d, count, rscratch1, -size);\n+      copy_memory(decorators, is_oop ? T_OBJECT : T_BYTE, aligned, s, d, count, -size);\n@@ -1767,0 +2034,3 @@\n+    \/\/ Registers used as gc temps (r5, r6, r7 are save-on-call)\n+    const Register gct1 = r5, gct2 = r6, gct3 = r7;\n+\n@@ -1819,0 +2089,1 @@\n+    int element_size = UseCompressedOops ? 4 : 8;\n@@ -1844,1 +2115,3 @@\n-    __ store_heap_oop(__ post(to, UseCompressedOops ? 4 : 8), copied_oop, noreg, noreg, noreg, AS_RAW);  \/\/ store the oop\n+    bs->copy_store_at(_masm, decorators, T_OBJECT, element_size,\n+                      __ post(to, element_size), copied_oop, noreg,\n+                      gct1, gct2, gct3);\n@@ -1850,1 +2123,3 @@\n-    __ load_heap_oop(copied_oop, __ post(from, UseCompressedOops ? 4 : 8), noreg, noreg, AS_RAW); \/\/ load the oop\n+    bs->copy_load_at(_masm, decorators, T_OBJECT, element_size,\n+                     copied_oop, noreg, __ post(from, element_size),\n+                     gct1);\n@@ -2447,2 +2722,8 @@\n-    generate_copy_longs(copy_f, r0, r1, rscratch2, copy_forwards);\n-    generate_copy_longs(copy_b, r0, r1, rscratch2, copy_backwards);\n+    generate_copy_longs(IN_HEAP | IS_ARRAY, T_BYTE, copy_f, r0, r1, r15, copy_forwards);\n+    generate_copy_longs(IN_HEAP | IS_ARRAY, T_BYTE, copy_b, r0, r1, r15, copy_backwards);\n+\n+    generate_copy_longs(IN_HEAP | IS_ARRAY, T_OBJECT, copy_obj_f, r0, r1, r15, copy_forwards);\n+    generate_copy_longs(IN_HEAP | IS_ARRAY, T_OBJECT, copy_obj_b, r0, r1, r15, copy_backwards);\n+\n+    generate_copy_longs(IN_HEAP | IS_ARRAY | IS_DEST_UNINITIALIZED, T_OBJECT, copy_obj_uninit_f, r0, r1, r15, copy_forwards);\n+    generate_copy_longs(IN_HEAP | IS_ARRAY | IS_DEST_UNINITIALIZED, T_OBJECT, copy_obj_uninit_b, r0, r1, r15, copy_backwards);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":448,"deletions":167,"binary":false,"changes":615,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2022, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2023, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -122,0 +122,51 @@\n+void BarrierSetAssembler::copy_load_at(MacroAssembler* masm,\n+                                       DecoratorSet decorators,\n+                                       BasicType type,\n+                                       size_t bytes,\n+                                       Register dst,\n+                                       Address src,\n+                                       Register tmp) {\n+  if (bytes == 1) {\n+    __ lbu(dst, src);\n+  } else if (bytes == 2) {\n+    __ lhu(dst, src);\n+  } else if (bytes == 4) {\n+    __ lwu(dst, src);\n+  } else if (bytes == 8) {\n+    __ ld(dst, src);\n+  } else {\n+    \/\/ Not the right size\n+    ShouldNotReachHere();\n+  }\n+  if ((decorators & ARRAYCOPY_CHECKCAST) != 0 && UseCompressedOops) {\n+    __ decode_heap_oop(dst);\n+  }\n+}\n+\n+void BarrierSetAssembler::copy_store_at(MacroAssembler* masm,\n+                                        DecoratorSet decorators,\n+                                        BasicType type,\n+                                        size_t bytes,\n+                                        Address dst,\n+                                        Register src,\n+                                        Register tmp1,\n+                                        Register tmp2,\n+                                        Register tmp3) {\n+  if ((decorators & ARRAYCOPY_CHECKCAST) != 0 && UseCompressedOops) {\n+    __ encode_heap_oop(src);\n+  }\n+\n+  if (bytes == 1) {\n+    __ sb(src, dst);\n+  } else if (bytes == 2) {\n+    __ sh(src, dst);\n+  } else if (bytes == 4) {\n+    __ sw(src, dst);\n+  } else if (bytes == 8) {\n+    __ sd(src, dst);\n+  } else {\n+    \/\/ Not the right size\n+    ShouldNotReachHere();\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.cpp","additions":52,"deletions":1,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2020, 2021, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2023, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -52,0 +52,21 @@\n+\n+  virtual void copy_load_at(MacroAssembler* masm,\n+                            DecoratorSet decorators,\n+                            BasicType type,\n+                            size_t bytes,\n+                            Register dst,\n+                            Address src,\n+                            Register tmp);\n+\n+  virtual void copy_store_at(MacroAssembler* masm,\n+                             DecoratorSet decorators,\n+                             BasicType type,\n+                             size_t bytes,\n+                             Address dst,\n+                             Register src,\n+                             Register tmp1,\n+                             Register tmp2,\n+                             Register tmp3);\n+\n+  virtual bool supports_rvv_arraycopy() { return true; }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/shared\/barrierSetAssembler_riscv.hpp","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -944,3 +944,4 @@\n-  void copy_memory(bool is_aligned, Register s, Register d,\n-                   Register count, Register tmp, int step) {\n-    if (UseRVV) {\n+  void copy_memory(DecoratorSet decorators, BasicType type, bool is_aligned,\n+                   Register s, Register d, Register count, Register tmp, int step) {\n+    BarrierSetAssembler* bs_asm = BarrierSet::barrier_set()->barrier_set_assembler();\n+    if (UseRVV && (!is_reference_type(type) || bs_asm->supports_rvv_arraycopy())) {\n@@ -954,0 +955,1 @@\n+    const Register gct1 = x28, gct2 = x29, gct3 = t2;\n@@ -958,22 +960,0 @@\n-    copy_insn ld_arr = NULL, st_arr = NULL;\n-    switch (granularity) {\n-      case 1 :\n-        ld_arr = (copy_insn)&MacroAssembler::lbu;\n-        st_arr = (copy_insn)&MacroAssembler::sb;\n-        break;\n-      case 2 :\n-        ld_arr = (copy_insn)&MacroAssembler::lhu;\n-        st_arr = (copy_insn)&MacroAssembler::sh;\n-        break;\n-      case 4 :\n-        ld_arr = (copy_insn)&MacroAssembler::lwu;\n-        st_arr = (copy_insn)&MacroAssembler::sw;\n-        break;\n-      case 8 :\n-        ld_arr = (copy_insn)&MacroAssembler::ld;\n-        st_arr = (copy_insn)&MacroAssembler::sd;\n-        break;\n-      default :\n-        ShouldNotReachHere();\n-    }\n-\n@@ -1011,2 +991,2 @@\n-      (_masm->*ld_arr)(tmp3, Address(src), t0);\n-      (_masm->*st_arr)(tmp3, Address(dst), t0);\n+      bs_asm->copy_load_at(_masm, decorators, type, granularity, tmp3, Address(src), gct1);\n+      bs_asm->copy_store_at(_masm, decorators, type, granularity, Address(dst), tmp3, gct1, gct2, gct3);\n@@ -1031,8 +1011,9 @@\n-    __ ld(tmp3, Address(src));\n-    __ ld(tmp4, Address(src, 8));\n-    __ ld(tmp5, Address(src, 16));\n-    __ ld(tmp6, Address(src, 24));\n-    __ sd(tmp3, Address(dst));\n-    __ sd(tmp4, Address(dst, 8));\n-    __ sd(tmp5, Address(dst, 16));\n-    __ sd(tmp6, Address(dst, 24));\n+    bs_asm->copy_load_at(_masm, decorators, type, 8, tmp3, Address(src), gct1);\n+    bs_asm->copy_load_at(_masm, decorators, type, 8, tmp4, Address(src, 8), gct1);\n+    bs_asm->copy_load_at(_masm, decorators, type, 8, tmp5, Address(src, 16), gct1);\n+    bs_asm->copy_load_at(_masm, decorators, type, 8, tmp6, Address(src, 24), gct1);\n+\n+    bs_asm->copy_store_at(_masm, decorators, type, 8, Address(dst), tmp3, gct1, gct2, gct3);\n+    bs_asm->copy_store_at(_masm, decorators, type, 8, Address(dst, 8), tmp4, gct1, gct2, gct3);\n+    bs_asm->copy_store_at(_masm, decorators, type, 8, Address(dst, 16), tmp5, gct1, gct2, gct3);\n+    bs_asm->copy_store_at(_masm, decorators, type, 8, Address(dst, 24), tmp6, gct1, gct2, gct3);\n@@ -1058,2 +1039,3 @@\n-    __ ld(tmp3, Address(src));\n-    __ sd(tmp3, Address(dst));\n+    bs_asm->copy_load_at(_masm, decorators, type, 8, tmp3, Address(src), gct1);\n+    bs_asm->copy_store_at(_masm, decorators, type, 8, Address(dst), tmp3, gct1, gct2, gct3);\n+\n@@ -1075,2 +1057,4 @@\n-    (_masm->*ld_arr)(tmp3, Address(src), t0);\n-    (_masm->*st_arr)(tmp3, Address(dst), t0);\n+\n+    bs_asm->copy_load_at(_masm, decorators, type, granularity, tmp3, Address(src), gct1);\n+    bs_asm->copy_store_at(_masm, decorators, type, granularity, Address(dst), tmp3, gct1, gct2, gct3);\n+\n@@ -1163,1 +1147,1 @@\n-      copy_memory(aligned, s, d, count, t0, size);\n+      copy_memory(decorators, is_oop ? T_OBJECT : T_BYTE, aligned, s, d, count, t0, size);\n@@ -1214,1 +1198,4 @@\n-    __ bgeu(t0, t1, nooverlap_target);\n+    Label L_continue;\n+    __ bltu(t0, t1, L_continue);\n+    __ j(nooverlap_target);\n+    __ bind(L_continue);\n@@ -1236,1 +1223,1 @@\n-      copy_memory(aligned, s, d, count, t0, -size);\n+      copy_memory(decorators, is_oop ? T_OBJECT : T_BYTE, aligned, s, d, count, t0, -size);\n@@ -1526,0 +1513,3 @@\n+    \/\/ Registers used as gc temps (x15, x16, x17 are save-on-call)\n+    const Register gct1 = x15, gct2 = x16, gct3 = x17;\n+\n@@ -1567,1 +1557,0 @@\n-    bool is_oop = true;\n@@ -1572,0 +1561,3 @@\n+    bool is_oop = true;\n+    int element_size = UseCompressedOops ? 4 : 8;\n+\n@@ -1594,1 +1586,3 @@\n-    __ store_heap_oop(Address(to, 0), copied_oop, noreg, noreg, noreg, AS_RAW); \/\/ store the oop\n+    bs->copy_store_at(_masm, decorators, T_OBJECT, element_size,\n+                      Address(to, 0), copied_oop,\n+                      gct1, gct2, gct3);\n@@ -1601,1 +1595,3 @@\n-    __ load_heap_oop(copied_oop, Address(from, 0), noreg, noreg, AS_RAW); \/\/ load the oop\n+    bs->copy_load_at(_masm, decorators, T_OBJECT, element_size,\n+                     copied_oop, Address(from, 0),\n+                     gct1);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":41,"deletions":45,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -198,0 +198,107 @@\n+void BarrierSetAssembler::copy_load_at(MacroAssembler* masm,\n+                                       DecoratorSet decorators,\n+                                       BasicType type,\n+                                       size_t bytes,\n+                                       Register dst,\n+                                       Address src,\n+                                       Register tmp) {\n+  assert(bytes <= 8, \"can only deal with non-vector registers\");\n+  switch (bytes) {\n+  case 1:\n+    __ movb(dst, src);\n+    break;\n+  case 2:\n+    __ movw(dst, src);\n+    break;\n+  case 4:\n+    __ movl(dst, src);\n+    break;\n+  case 8:\n+#ifdef _LP64\n+    __ movq(dst, src);\n+#else\n+    fatal(\"No support for 8 bytes copy\");\n+#endif\n+    break;\n+  default:\n+    fatal(\"Unexpected size\");\n+  }\n+#ifdef _LP64\n+  if ((decorators & ARRAYCOPY_CHECKCAST) != 0 && UseCompressedOops) {\n+    __ decode_heap_oop(dst);\n+  }\n+#endif\n+}\n+\n+void BarrierSetAssembler::copy_store_at(MacroAssembler* masm,\n+                                        DecoratorSet decorators,\n+                                        BasicType type,\n+                                        size_t bytes,\n+                                        Address dst,\n+                                        Register src,\n+                                        Register tmp) {\n+#ifdef _LP64\n+  if ((decorators & ARRAYCOPY_CHECKCAST) != 0 && UseCompressedOops) {\n+    __ encode_heap_oop(src);\n+  }\n+#endif\n+  assert(bytes <= 8, \"can only deal with non-vector registers\");\n+  switch (bytes) {\n+  case 1:\n+    __ movb(dst, src);\n+    break;\n+  case 2:\n+    __ movw(dst, src);\n+    break;\n+  case 4:\n+    __ movl(dst, src);\n+    break;\n+  case 8:\n+#ifdef _LP64\n+    __ movq(dst, src);\n+#else\n+    fatal(\"No support for 8 bytes copy\");\n+#endif\n+    break;\n+  default:\n+    fatal(\"Unexpected size\");\n+  }\n+}\n+\n+void BarrierSetAssembler::copy_load_at(MacroAssembler* masm,\n+                                       DecoratorSet decorators,\n+                                       BasicType type,\n+                                       size_t bytes,\n+                                       XMMRegister dst,\n+                                       Address src,\n+                                       Register tmp,\n+                                       XMMRegister xmm_tmp) {\n+  assert(bytes > 8, \"can only deal with vector registers\");\n+  if (bytes == 16) {\n+    __ movdqu(dst, src);\n+  } else if (bytes == 32) {\n+    __ vmovdqu(dst, src);\n+  } else {\n+    fatal(\"No support for >32 bytes copy\");\n+  }\n+}\n+\n+void BarrierSetAssembler::copy_store_at(MacroAssembler* masm,\n+                                        DecoratorSet decorators,\n+                                        BasicType type,\n+                                        size_t bytes,\n+                                        Address dst,\n+                                        XMMRegister src,\n+                                        Register tmp1,\n+                                        Register tmp2,\n+                                        XMMRegister xmm_tmp) {\n+  assert(bytes > 8, \"can only deal with vector registers\");\n+  if (bytes == 16) {\n+    __ movdqu(dst, src);\n+  } else if (bytes == 32) {\n+    __ vmovdqu(dst, src);\n+  } else {\n+    fatal(\"No support for >32 bytes copy\");\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.cpp","additions":107,"deletions":0,"binary":false,"changes":107,"status":"modified"},{"patch":"@@ -52,0 +52,40 @@\n+  \/\/ The copy_[load\/store]_at functions are used by arraycopy stubs. Be careful to only use\n+  \/\/ r10 (aka rscratch1) in a context where restore_arg_regs_using_thread has been used instead\n+  \/\/ of the looser setup_arg_regs. Currently this is done when using type T_OBJECT.\n+  virtual void copy_load_at(MacroAssembler* masm,\n+                            DecoratorSet decorators,\n+                            BasicType type,\n+                            size_t bytes,\n+                            Register dst,\n+                            Address src,\n+                            Register tmp);\n+\n+  virtual void copy_store_at(MacroAssembler* masm,\n+                             DecoratorSet decorators,\n+                             BasicType type,\n+                             size_t bytes,\n+                             Address dst,\n+                             Register src,\n+                             Register tmp);\n+\n+  virtual void copy_load_at(MacroAssembler* masm,\n+                            DecoratorSet decorators,\n+                            BasicType type,\n+                            size_t bytes,\n+                            XMMRegister dst,\n+                            Address src,\n+                            Register tmp,\n+                            XMMRegister xmm_tmp);\n+\n+  virtual void copy_store_at(MacroAssembler* masm,\n+                             DecoratorSet decorators,\n+                             BasicType type,\n+                             size_t bytes,\n+                             Address dst,\n+                             XMMRegister src,\n+                             Register tmp1,\n+                             Register tmp2,\n+                             XMMRegister xmm_tmp);\n+\n+  virtual bool supports_avx3_masked_arraycopy() { return true; }\n+\n","filename":"src\/hotspot\/cpu\/x86\/gc\/shared\/barrierSetAssembler_x86.hpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1165,1 +1165,1 @@\n-  if (nargs >= 4)\n+  if (nargs == 4) {\n@@ -1167,0 +1167,1 @@\n+  }\n@@ -1172,1 +1173,1 @@\n-  if (nargs >= 4)\n+  if (nargs == 4) {\n@@ -1174,0 +1175,1 @@\n+  }\n@@ -1195,1 +1197,1 @@\n-void StubGenerator::setup_arg_regs_using_thread() {\n+void StubGenerator::setup_arg_regs_using_thread(int nargs) {\n@@ -1197,0 +1199,1 @@\n+  assert(nargs == 3 || nargs == 4, \"else fix\");\n@@ -1198,0 +1201,3 @@\n+  if (nargs == 4) {\n+    __ mov(rax, r9);       \/\/ r9 is also saved_r15\n+  }\n@@ -1208,0 +1214,3 @@\n+  if (nargs == 4) {\n+    __ mov(rcx, rax); \/\/ c_rarg3 (via rax)\n+  }\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  void setup_arg_regs_using_thread();\n+  void setup_arg_regs_using_thread(int nargs = 3);\n@@ -149,2 +149,4 @@\n-                          Register qword_count, Register to,\n-                          Label& L_copy_bytes, Label& L_copy_8_bytes);\n+                          Register qword_count, Register tmp1,\n+                          Register tmp2, Label& L_copy_bytes,\n+                          Label& L_copy_8_bytes, DecoratorSet decorators,\n+                          BasicType type);\n@@ -154,2 +156,4 @@\n-                           Register qword_count, Register to,\n-                           Label& L_copy_bytes, Label& L_copy_8_bytes);\n+                           Register qword_count, Register tmp1,\n+                           Register tmp2, Label& L_copy_bytes,\n+                           Label& L_copy_8_bytes, DecoratorSet decorators,\n+                           BasicType type);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.hpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-\/\/   to           - scratch\n+\/\/   tmp1         - scratch\n@@ -239,2 +239,5 @@\n-                                       Register qword_count, Register to,\n-                                       Label& L_copy_bytes, Label& L_copy_8_bytes) {\n+                                       Register qword_count, Register tmp1,\n+                                       Register tmp2, Label& L_copy_bytes,\n+                                       Label& L_copy_8_bytes, DecoratorSet decorators,\n+                                       BasicType type) {\n+  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -248,4 +251,13 @@\n-      __ vmovdqu(xmm0, Address(end_from, qword_count, Address::times_8, -56));\n-      __ vmovdqu(Address(end_to, qword_count, Address::times_8, -56), xmm0);\n-      __ vmovdqu(xmm1, Address(end_from, qword_count, Address::times_8, -24));\n-      __ vmovdqu(Address(end_to, qword_count, Address::times_8, -24), xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 32,\n+                       xmm0, Address(end_from, qword_count, Address::times_8, -56),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 32,\n+                        Address(end_to, qword_count, Address::times_8, -56), xmm0,\n+                        tmp1, tmp2, xmm1);\n+\n+      bs->copy_load_at(_masm, decorators, type, 32,\n+                       xmm0, Address(end_from, qword_count, Address::times_8, -24),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 32,\n+                        Address(end_to, qword_count, Address::times_8, -24), xmm0,\n+                        tmp1, tmp2, xmm1);\n@@ -253,8 +265,24 @@\n-      __ movdqu(xmm0, Address(end_from, qword_count, Address::times_8, -56));\n-      __ movdqu(Address(end_to, qword_count, Address::times_8, -56), xmm0);\n-      __ movdqu(xmm1, Address(end_from, qword_count, Address::times_8, -40));\n-      __ movdqu(Address(end_to, qword_count, Address::times_8, -40), xmm1);\n-      __ movdqu(xmm2, Address(end_from, qword_count, Address::times_8, -24));\n-      __ movdqu(Address(end_to, qword_count, Address::times_8, -24), xmm2);\n-      __ movdqu(xmm3, Address(end_from, qword_count, Address::times_8, - 8));\n-      __ movdqu(Address(end_to, qword_count, Address::times_8, - 8), xmm3);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(end_from, qword_count, Address::times_8, -56),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(end_to, qword_count, Address::times_8, -56), xmm0,\n+                        tmp1, tmp2, xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(end_from, qword_count, Address::times_8, -40),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(end_to, qword_count, Address::times_8, -40), xmm0,\n+                        tmp1, tmp2, xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(end_from, qword_count, Address::times_8, -24),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(end_to, qword_count, Address::times_8, -24), xmm0,\n+                        tmp1, tmp2, xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(end_from, qword_count, Address::times_8, -8),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(end_to, qword_count, Address::times_8, -8), xmm0,\n+                        tmp1, tmp2, xmm1);\n@@ -267,1 +295,1 @@\n-    __ jccb(Assembler::greater, L_end);\n+    __ jcc(Assembler::greater, L_end);\n@@ -270,2 +298,6 @@\n-      __ vmovdqu(xmm0, Address(end_from, qword_count, Address::times_8, -24));\n-      __ vmovdqu(Address(end_to, qword_count, Address::times_8, -24), xmm0);\n+      bs->copy_load_at(_masm, decorators, type, 32,\n+                       xmm0, Address(end_from, qword_count, Address::times_8, -24),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 32,\n+                        Address(end_to, qword_count, Address::times_8, -24), xmm0,\n+                        tmp1, tmp2, xmm1);\n@@ -273,4 +305,12 @@\n-      __ movdqu(xmm0, Address(end_from, qword_count, Address::times_8, -24));\n-      __ movdqu(Address(end_to, qword_count, Address::times_8, -24), xmm0);\n-      __ movdqu(xmm1, Address(end_from, qword_count, Address::times_8, - 8));\n-      __ movdqu(Address(end_to, qword_count, Address::times_8, - 8), xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(end_from, qword_count, Address::times_8, -24),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(end_to, qword_count, Address::times_8, -24), xmm0,\n+                        tmp1, tmp2, xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(end_from, qword_count, Address::times_8, -8),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(end_to, qword_count, Address::times_8, -8), xmm0,\n+                        tmp1, tmp2, xmm1);\n@@ -283,8 +323,24 @@\n-    __ movq(to, Address(end_from, qword_count, Address::times_8, -24));\n-    __ movq(Address(end_to, qword_count, Address::times_8, -24), to);\n-    __ movq(to, Address(end_from, qword_count, Address::times_8, -16));\n-    __ movq(Address(end_to, qword_count, Address::times_8, -16), to);\n-    __ movq(to, Address(end_from, qword_count, Address::times_8, - 8));\n-    __ movq(Address(end_to, qword_count, Address::times_8, - 8), to);\n-    __ movq(to, Address(end_from, qword_count, Address::times_8, - 0));\n-    __ movq(Address(end_to, qword_count, Address::times_8, - 0), to);\n+    bs->copy_load_at(_masm, decorators, type, 8,\n+                     tmp1, Address(end_from, qword_count, Address::times_8, -24),\n+                     tmp2);\n+    bs->copy_store_at(_masm, decorators, type, 8,\n+                      Address(end_to, qword_count, Address::times_8, -24), tmp1,\n+                      tmp2);\n+    bs->copy_load_at(_masm, decorators, type, 8,\n+                     tmp1, Address(end_from, qword_count, Address::times_8, -16),\n+                     tmp2);\n+    bs->copy_store_at(_masm, decorators, type, 8,\n+                      Address(end_to, qword_count, Address::times_8, -16), tmp1,\n+                      tmp2);\n+    bs->copy_load_at(_masm, decorators, type, 8,\n+                     tmp1, Address(end_from, qword_count, Address::times_8, -8),\n+                     tmp2);\n+    bs->copy_store_at(_masm, decorators, type, 8,\n+                      Address(end_to, qword_count, Address::times_8, -8), tmp1,\n+                      tmp2);\n+    bs->copy_load_at(_masm, decorators, type, 8,\n+                     tmp1, Address(end_from, qword_count, Address::times_8, 0),\n+                     tmp2);\n+    bs->copy_store_at(_masm, decorators, type, 8,\n+                      Address(end_to, qword_count, Address::times_8, 0), tmp1,\n+                      tmp2);\n@@ -307,1 +363,1 @@\n-\/\/   to           - scratch\n+\/\/   tmp1         - scratch\n@@ -312,2 +368,5 @@\n-                                        Register qword_count, Register to,\n-                                        Label& L_copy_bytes, Label& L_copy_8_bytes) {\n+                                        Register qword_count, Register tmp1,\n+                                        Register tmp2, Label& L_copy_bytes,\n+                                        Label& L_copy_8_bytes, DecoratorSet decorators,\n+                                        BasicType type) {\n+  BarrierSetAssembler* bs = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -321,4 +380,12 @@\n-      __ vmovdqu(xmm0, Address(from, qword_count, Address::times_8, 32));\n-      __ vmovdqu(Address(dest, qword_count, Address::times_8, 32), xmm0);\n-      __ vmovdqu(xmm1, Address(from, qword_count, Address::times_8,  0));\n-      __ vmovdqu(Address(dest, qword_count, Address::times_8,  0), xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 32,\n+                       xmm0, Address(from, qword_count, Address::times_8, 32),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 32,\n+                        Address(dest, qword_count, Address::times_8, 32), xmm0,\n+                        tmp1, tmp2, xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 32,\n+                       xmm0, Address(from, qword_count, Address::times_8, 0),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 32,\n+                        Address(dest, qword_count, Address::times_8, 0), xmm0,\n+                        tmp1, tmp2, xmm1);\n@@ -326,8 +393,24 @@\n-      __ movdqu(xmm0, Address(from, qword_count, Address::times_8, 48));\n-      __ movdqu(Address(dest, qword_count, Address::times_8, 48), xmm0);\n-      __ movdqu(xmm1, Address(from, qword_count, Address::times_8, 32));\n-      __ movdqu(Address(dest, qword_count, Address::times_8, 32), xmm1);\n-      __ movdqu(xmm2, Address(from, qword_count, Address::times_8, 16));\n-      __ movdqu(Address(dest, qword_count, Address::times_8, 16), xmm2);\n-      __ movdqu(xmm3, Address(from, qword_count, Address::times_8,  0));\n-      __ movdqu(Address(dest, qword_count, Address::times_8,  0), xmm3);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(from, qword_count, Address::times_8, 48),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(dest, qword_count, Address::times_8, 48), xmm0,\n+                        tmp1, tmp2, xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(from, qword_count, Address::times_8, 32),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(dest, qword_count, Address::times_8, 32), xmm0,\n+                        tmp1, tmp2, xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(from, qword_count, Address::times_8, 16),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(dest, qword_count, Address::times_8, 16), xmm0,\n+                        tmp1, tmp2, xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(from, qword_count, Address::times_8, 0),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(dest, qword_count, Address::times_8, 0), xmm0,\n+                        tmp1, tmp2, xmm1);\n@@ -341,1 +424,1 @@\n-    __ jccb(Assembler::less, L_end);\n+    __ jcc(Assembler::less, L_end);\n@@ -344,2 +427,6 @@\n-      __ vmovdqu(xmm0, Address(from, qword_count, Address::times_8, 0));\n-      __ vmovdqu(Address(dest, qword_count, Address::times_8, 0), xmm0);\n+      bs->copy_load_at(_masm, decorators, type, 32,\n+                       xmm0, Address(from, qword_count, Address::times_8, 0),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 32,\n+                        Address(dest, qword_count, Address::times_8, 0), xmm0,\n+                        tmp1, tmp2, xmm1);\n@@ -347,4 +434,12 @@\n-      __ movdqu(xmm0, Address(from, qword_count, Address::times_8, 16));\n-      __ movdqu(Address(dest, qword_count, Address::times_8, 16), xmm0);\n-      __ movdqu(xmm1, Address(from, qword_count, Address::times_8,  0));\n-      __ movdqu(Address(dest, qword_count, Address::times_8,  0), xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(from, qword_count, Address::times_8, 16),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(dest, qword_count, Address::times_8, 16), xmm0,\n+                        tmp1, tmp2, xmm1);\n+      bs->copy_load_at(_masm, decorators, type, 16,\n+                       xmm0, Address(from, qword_count, Address::times_8, 0),\n+                       tmp1, xmm1);\n+      bs->copy_store_at(_masm, decorators, type, 16,\n+                        Address(dest, qword_count, Address::times_8, 0), xmm0,\n+                        tmp1, tmp2, xmm1);\n@@ -357,8 +452,24 @@\n-    __ movq(to, Address(from, qword_count, Address::times_8, 24));\n-    __ movq(Address(dest, qword_count, Address::times_8, 24), to);\n-    __ movq(to, Address(from, qword_count, Address::times_8, 16));\n-    __ movq(Address(dest, qword_count, Address::times_8, 16), to);\n-    __ movq(to, Address(from, qword_count, Address::times_8,  8));\n-    __ movq(Address(dest, qword_count, Address::times_8,  8), to);\n-    __ movq(to, Address(from, qword_count, Address::times_8,  0));\n-    __ movq(Address(dest, qword_count, Address::times_8,  0), to);\n+    bs->copy_load_at(_masm, decorators, type, 8,\n+                     tmp1, Address(from, qword_count, Address::times_8, 24),\n+                     tmp2);\n+    bs->copy_store_at(_masm, decorators, type, 8,\n+                      Address(dest, qword_count, Address::times_8, 24), tmp1,\n+                      tmp2);\n+    bs->copy_load_at(_masm, decorators, type, 8,\n+                     tmp1, Address(from, qword_count, Address::times_8, 16),\n+                     tmp2);\n+    bs->copy_store_at(_masm, decorators, type, 8,\n+                      Address(dest, qword_count, Address::times_8, 16), tmp1,\n+                      tmp2);\n+    bs->copy_load_at(_masm, decorators, type, 8,\n+                     tmp1, Address(from, qword_count, Address::times_8, 8),\n+                     tmp2);\n+    bs->copy_store_at(_masm, decorators, type, 8,\n+                      Address(dest, qword_count, Address::times_8, 8), tmp1,\n+                      tmp2);\n+    bs->copy_load_at(_masm, decorators, type, 8,\n+                     tmp1, Address(from, qword_count, Address::times_8, 0),\n+                     tmp2);\n+    bs->copy_store_at(_masm, decorators, type, 8,\n+                      Address(dest, qword_count, Address::times_8, 0), tmp1,\n+                      tmp2);\n@@ -1027,0 +1138,1 @@\n+  DecoratorSet decorators = IN_HEAP | IS_ARRAY | ARRAYCOPY_DISJOINT;\n@@ -1111,1 +1223,1 @@\n-    copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+    copy_bytes_forward(end_from, end_to, qword_count, rax, r10, L_copy_bytes, L_copy_8_bytes, decorators, T_BYTE);\n@@ -1144,0 +1256,1 @@\n+  DecoratorSet decorators = IN_HEAP | IS_ARRAY;\n@@ -1214,1 +1327,1 @@\n-    copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+    copy_bytes_backward(from, to, qword_count, rax, r10, L_copy_bytes, L_copy_8_bytes, decorators, T_BYTE);\n@@ -1257,0 +1370,1 @@\n+  DecoratorSet decorators = IN_HEAP | IS_ARRAY | ARRAYCOPY_DISJOINT;\n@@ -1333,1 +1447,1 @@\n-    copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+    copy_bytes_forward(end_from, end_to, qword_count, rax, r10, L_copy_bytes, L_copy_8_bytes, decorators, T_SHORT);\n@@ -1391,0 +1505,1 @@\n+  DecoratorSet decorators = IN_HEAP | IS_ARRAY;\n@@ -1453,1 +1568,1 @@\n-    copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+    copy_bytes_backward(from, to, qword_count, rax, r10, L_copy_bytes, L_copy_8_bytes, decorators, T_SHORT);\n@@ -1487,0 +1602,1 @@\n+  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -1488,1 +1604,1 @@\n-  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+  if ((!is_oop || bs->supports_avx3_masked_arraycopy()) && VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n@@ -1530,1 +1646,0 @@\n-  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -1573,1 +1688,1 @@\n-    copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+    copy_bytes_forward(end_from, end_to, qword_count, rax, r10, L_copy_bytes, L_copy_8_bytes, decorators, is_oop ? T_OBJECT : T_INT);\n@@ -1599,0 +1714,1 @@\n+  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -1600,1 +1716,1 @@\n-  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+  if ((!is_oop || bs->supports_avx3_masked_arraycopy()) && VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n@@ -1638,1 +1754,0 @@\n-  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -1680,1 +1795,1 @@\n-    copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+    copy_bytes_backward(from, to, qword_count, rax, r10, L_copy_bytes, L_copy_8_bytes, decorators, is_oop ? T_OBJECT : T_INT);\n@@ -1713,0 +1828,1 @@\n+  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -1714,1 +1830,1 @@\n-  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+  if ((!is_oop || bs->supports_avx3_masked_arraycopy()) && VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize >= 32) {\n@@ -1756,1 +1872,0 @@\n-  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -1770,2 +1885,6 @@\n-    __ movq(rax, Address(end_from, qword_count, Address::times_8, 8));\n-    __ movq(Address(end_to, qword_count, Address::times_8, 8), rax);\n+    bs->copy_load_at(_masm, decorators, type, 8,\n+                     rax, Address(end_from, qword_count, Address::times_8, 8),\n+                     r10);\n+    bs->copy_store_at(_masm, decorators, type, 8,\n+                      Address(end_to, qword_count, Address::times_8, 8), rax,\n+                      r10);\n@@ -1790,1 +1909,1 @@\n-    copy_bytes_forward(end_from, end_to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+    copy_bytes_forward(end_from, end_to, qword_count, rax, r10, L_copy_bytes, L_copy_8_bytes, decorators, is_oop ? T_OBJECT : T_LONG);\n@@ -1822,0 +1941,1 @@\n+  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -1823,1 +1943,1 @@\n-  if (VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n+  if ((!is_oop || bs->supports_avx3_masked_arraycopy()) && VM_Version::supports_avx512vlbw() && VM_Version::supports_bmi2() && MaxVectorSize  >= 32) {\n@@ -1861,1 +1981,0 @@\n-  BarrierSetAssembler *bs = BarrierSet::barrier_set()->barrier_set_assembler();\n@@ -1871,2 +1990,6 @@\n-    __ movq(rax, Address(from, qword_count, Address::times_8, -8));\n-    __ movq(Address(to, qword_count, Address::times_8, -8), rax);\n+    bs->copy_load_at(_masm, decorators, type, 8,\n+                     rax, Address(from, qword_count, Address::times_8, -8),\n+                     r10);\n+    bs->copy_store_at(_masm, decorators, type, 8,\n+                      Address(to, qword_count, Address::times_8, -8), rax,\n+                      r10);\n@@ -1891,1 +2014,1 @@\n-    copy_bytes_backward(from, to, qword_count, rax, L_copy_bytes, L_copy_8_bytes);\n+    copy_bytes_backward(from, to, qword_count, rax, r10, L_copy_bytes, L_copy_8_bytes, decorators, is_oop ? T_OBJECT : T_LONG);\n@@ -1990,3 +2113,3 @@\n-  setup_arg_regs(4); \/\/ from => rdi, to => rsi, length => rdx\n-                     \/\/ ckoff => rcx, ckval => r8\n-                     \/\/ r9 and r10 may be used to save non-volatile registers\n+  setup_arg_regs_using_thread(4); \/\/ from => rdi, to => rsi, length => rdx\n+                                  \/\/ ckoff => rcx, ckval => r8\n+                                  \/\/ r9 is used to save r15_thread\n@@ -2055,0 +2178,2 @@\n+  size_t element_size = UseCompressedOops ? 4 : 8;\n+\n@@ -2078,1 +2203,7 @@\n-  __ store_heap_oop(to_element_addr, rax_oop, noreg, noreg, noreg, AS_RAW);  \/\/ store the oop\n+  bs->copy_store_at(_masm,\n+                    decorators,\n+                    type,\n+                    element_size,\n+                    to_element_addr,\n+                    rax_oop,\n+                    r10);\n@@ -2084,1 +2215,7 @@\n-  __ load_heap_oop(rax_oop, from_element_addr, noreg, noreg, AS_RAW); \/\/ load the oop\n+  bs->copy_load_at(_masm,\n+                   decorators,\n+                   type,\n+                   element_size,\n+                   rax_oop,\n+                   from_element_addr,\n+                   r10);\n@@ -2116,1 +2253,1 @@\n-  restore_arg_regs();\n+  restore_arg_regs_using_thread();\n@@ -2532,1 +2669,1 @@\n-    setup_arg_regs(4);\n+    setup_arg_regs_using_thread(4);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_arraycopy.cpp","additions":224,"deletions":87,"binary":false,"changes":311,"status":"modified"}]}