{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +105,0 @@\n-template <typename E, typename UnaryPredicate> class GrowableArrayFilterIterator;\n@@ -844,1 +843,0 @@\n-  template <typename F, typename UnaryPredicate> friend class GrowableArrayFilterIterator;\n@@ -871,50 +869,0 @@\n-\/\/ Custom STL-style iterator to iterate over elements of a GrowableArray that satisfy a given predicate\n-template <typename E, class UnaryPredicate>\n-class GrowableArrayFilterIterator : public StackObj {\n-  friend class GrowableArrayView<E>;\n-\n- private:\n-  const GrowableArrayView<E>* _array; \/\/ GrowableArray we iterate over\n-  int _position;                      \/\/ Current position in the GrowableArray\n-  UnaryPredicate _predicate;          \/\/ Unary predicate the elements of the GrowableArray should satisfy\n-\n- public:\n-  GrowableArrayFilterIterator(const GrowableArrayIterator<E>& begin, UnaryPredicate filter_predicate) :\n-      _array(begin._array), _position(begin._position), _predicate(filter_predicate) {\n-    \/\/ Advance to first element satisfying the predicate\n-    while(_position != _array->length() && !_predicate(_array->at(_position))) {\n-      ++_position;\n-    }\n-  }\n-\n-  GrowableArrayFilterIterator<E, UnaryPredicate>& operator++() {\n-    do {\n-      \/\/ Advance to next element satisfying the predicate\n-      ++_position;\n-    } while(_position != _array->length() && !_predicate(_array->at(_position)));\n-    return *this;\n-  }\n-\n-  E operator*() { return _array->at(_position); }\n-\n-  bool operator==(const GrowableArrayIterator<E>& rhs)  {\n-    assert(_array == rhs._array, \"iterator belongs to different array\");\n-    return _position == rhs._position;\n-  }\n-\n-  bool operator!=(const GrowableArrayIterator<E>& rhs)  {\n-    assert(_array == rhs._array, \"iterator belongs to different array\");\n-    return _position != rhs._position;\n-  }\n-\n-  bool operator==(const GrowableArrayFilterIterator<E, UnaryPredicate>& rhs)  {\n-    assert(_array == rhs._array, \"iterator belongs to different array\");\n-    return _position == rhs._position;\n-  }\n-\n-  bool operator!=(const GrowableArrayFilterIterator<E, UnaryPredicate>& rhs)  {\n-    assert(_array == rhs._array, \"iterator belongs to different array\");\n-    return _position != rhs._position;\n-  }\n-};\n-\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":1,"deletions":53,"binary":false,"changes":54,"status":"modified"}]}