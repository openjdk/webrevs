{"files":[{"patch":"@@ -539,1 +539,2 @@\n-            reportError(\"err.exception.message\", e.getMessage());\n+            Throwable cause = e.getCause();\n+            reportError(\"err.exception.message\", cause != null ? cause.getMessage() : e.getMessage());\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jdeps\/JdepsTask.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8326979\n+ * @run main InvalidModuleDescriptor\n+ * @summary jdeps should print the exception message of the cause of FindException\n+ *          instead of FindException\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.spi.ToolProvider;\n+\n+import static java.nio.file.StandardOpenOption.CREATE_NEW;\n+\n+public class InvalidModuleDescriptor {\n+    private static final Path TEST_CLASSES = Paths.get(System.getProperty(\"test.classes\"));\n+    private static final ToolProvider JDEPS = ToolProvider.findFirst(\"jdeps\").orElseThrow();\n+    private static final ToolProvider JAR = ToolProvider.findFirst(\"jar\").orElseThrow();\n+\n+    public static void main(String... args) throws IOException {\n+        \/\/ create an automatic module with an invalid module descriptor (containing unnamed package)\n+        Path jarFile = Paths.get(\"hi.jar\");\n+        String moduleName = \"hi\";\n+        int rc = createAutomaticModule(jarFile, moduleName);\n+        if (rc != 0) {\n+            throw new RuntimeException(\"Fail to create automatic module\");\n+        }\n+\n+        \/\/ jdeps should fail with an error without stack trace\n+        String expectedError = \"Error: InvalidModuleDescriptor.class found in top-level directory (unnamed package not allowed in module)\";\n+        rc = runJdeps(expectedError, \"--module-path\", jarFile.toString(), \"-m\", moduleName);\n+        if (rc == 0) {\n+            throw new RuntimeException(\"Expected jdeps to fail\");\n+        }\n+    }\n+\n+    \/\/ create an automatic module with an invalid module descriptor\n+    static int createAutomaticModule(Path jarFile, String moduleName) throws IOException {\n+        Path manifest = Paths.get(\"manifest\");\n+        Files.writeString(manifest, \"Automatic-Module-Name: \" + moduleName, CREATE_NEW);\n+        return JAR.run(System.out, System.out, \"--create\", \"--file\", jarFile.toString(),\n+                       \"-m\", manifest.toString(),\n+                       \"-C\", TEST_CLASSES.toString(), \"InvalidModuleDescriptor.class\");\n+    }\n+\n+    static int runJdeps(String expected, String... args) {\n+        StringWriter output = new StringWriter();\n+        StringWriter error = new StringWriter();\n+        try (PrintWriter pwout = new PrintWriter(output);\n+             PrintWriter pwerr = new PrintWriter(error)) {\n+            int rc = JDEPS.run(pwout, pwerr, args);\n+            if (!output.toString().contains(expected)) {\n+                System.out.println(output);\n+                System.out.println(error);\n+                throw new RuntimeException(\"Mismatched output\");\n+            }\n+            return rc;\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/jdeps\/modules\/InvalidModuleDescriptor.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}