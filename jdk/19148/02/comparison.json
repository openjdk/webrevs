{"files":[{"patch":"@@ -551,2 +551,2 @@\n-        } else if (nesting > 0 && load_type->isa_narrowklass()) {\n-          NOT_PRODUCT(if (TraceReduceAllocationMerges) tty->print_cr(\"Can NOT reduce Phi %d on invocation %d. Nested NarrowKlass Load: %s\", n->_idx, _invocation, use_use->Name());)\n+        } else if (load_type->isa_narrowklass() || load_type->isa_klassptr()) {\n+          NOT_PRODUCT(if (TraceReduceAllocationMerges) tty->print_cr(\"Can NOT reduce Phi %d on invocation %d. [Narrow] Klass Load: %s\", n->_idx, _invocation, use_use->Name());)\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,64 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8330795\n+ * @summary Check that Reduce Allocation Merges doesn't crash when CompressedClassPointers\n+ *          is disabled and there is an access to Klass \"field\" through the phi.\n+ * @requires vm.bits == 64 & vm.flagless & vm.compiler2.enabled & vm.opt.final.EliminateAllocations\n+ * @run main\/othervm -XX:CompileCommand=dontinline,*TestReduceAllocationAndLoadKlass*::test\n+ *                   -XX:CompileCommand=compileonly,*TestReduceAllocationAndLoadKlass*::test\n+ *                   -XX:CompileCommand=compileonly,*Shape*::*init*\n+ *                   -XX:CompileCommand=compileonly,*Point*::*init*\n+ *                   -XX:CompileCommand=exclude,*TestReduceAllocationAndLoadKlass*::dummy\n+ *                   -XX:-TieredCompilation\n+ *                   -XX:-UseCompressedClassPointers\n+ *                   -Xbatch\n+ *                   -Xcomp\n+ *                   -server\n+ *                   compiler.c2.TestReduceAllocationAndLoadKlass\n+ *\/\n+\n+package compiler.c2;\n+\n+public class TestReduceAllocationAndLoadKlass {\n+    public static void main(String[] args) {\n+        Point p = new Point();\n+        Line q = new Line();\n+\n+        test(true);\n+        test(false);\n+    }\n+\n+    static Class test(boolean cond) {\n+        Object p = cond ? dummy() : new Line();\n+        return p.getClass();\n+    }\n+\n+    static Point dummy() { return new Point(); }\n+\n+    static class Shape { }\n+    static class Point extends Shape { }\n+    static class Line extends Shape { }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestReduceAllocationAndLoadKlass.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"added"},{"patch":"@@ -34,1 +34,1 @@\n- * @requires vm.debug == true & vm.bits == 64 & vm.compiler2.enabled & vm.opt.final.UseCompressedOops & vm.opt.final.EliminateAllocations\n+ * @requires vm.debug == true & vm.flagless & vm.bits == 64 & vm.compiler2.enabled & vm.opt.final.EliminateAllocations\n@@ -42,9 +42,38 @@\n-        TestFramework.runWithFlags(\"-XX:+UnlockDiagnosticVMOptions\",\n-                                   \"-XX:+ReduceAllocationMerges\",\n-                                   \"-XX:+TraceReduceAllocationMerges\",\n-                                   \"-XX:+DeoptimizeALot\",\n-                                   \"-XX:CompileCommand=inline,*::charAt*\",\n-                                   \"-XX:CompileCommand=inline,*PicturePositions::*\",\n-                                   \"-XX:CompileCommand=inline,*Point::*\",\n-                                   \"-XX:CompileCommand=inline,*Nested::*\",\n-                                   \"-XX:CompileCommand=exclude,*::dummy*\");\n+        TestFramework framework = new TestFramework();\n+\n+        Scenario scenario0 = new Scenario(0, \"-XX:+UnlockDiagnosticVMOptions\",\n+                                             \"-XX:+ReduceAllocationMerges\",\n+                                             \"-XX:+TraceReduceAllocationMerges\",\n+                                             \"-XX:+DeoptimizeALot\",\n+                                             \"-XX:+UseCompressedOops\",\n+                                             \"-XX:+UseCompressedClassPointers\",\n+                                             \"-XX:CompileCommand=inline,*::charAt*\",\n+                                             \"-XX:CompileCommand=inline,*PicturePositions::*\",\n+                                             \"-XX:CompileCommand=inline,*Point::*\",\n+                                             \"-XX:CompileCommand=inline,*Nested::*\",\n+                                             \"-XX:CompileCommand=exclude,*::dummy*\");\n+\n+        Scenario scenario1 = new Scenario(1, \"-XX:+UnlockDiagnosticVMOptions\",\n+                                             \"-XX:+ReduceAllocationMerges\",\n+                                             \"-XX:+TraceReduceAllocationMerges\",\n+                                             \"-XX:+DeoptimizeALot\",\n+                                             \"-XX:+UseCompressedOops\",\n+                                             \"-XX:-UseCompressedClassPointers\",\n+                                             \"-XX:CompileCommand=inline,*::charAt*\",\n+                                             \"-XX:CompileCommand=inline,*PicturePositions::*\",\n+                                             \"-XX:CompileCommand=inline,*Point::*\",\n+                                             \"-XX:CompileCommand=inline,*Nested::*\",\n+                                             \"-XX:CompileCommand=exclude,*::dummy*\");\n+\n+        Scenario scenario2 = new Scenario(2, \"-XX:+UnlockDiagnosticVMOptions\",\n+                                             \"-XX:+ReduceAllocationMerges\",\n+                                             \"-XX:+TraceReduceAllocationMerges\",\n+                                             \"-XX:+DeoptimizeALot\",\n+                                             \"-XX:-UseCompressedOops\",\n+                                             \"-XX:CompileCommand=inline,*::charAt*\",\n+                                             \"-XX:CompileCommand=inline,*PicturePositions::*\",\n+                                             \"-XX:CompileCommand=inline,*Point::*\",\n+                                             \"-XX:CompileCommand=inline,*Nested::*\",\n+                                             \"-XX:CompileCommand=exclude,*::dummy*\");\n+\n+        framework.addScenarios(scenario0, scenario1, scenario2).start();\n@@ -97,1 +126,2 @@\n-                 \"testLoadNarrowKlass_C2\",\n+                 \"testLoadKlassFromCast_C2\",\n+                 \"testLoadKlassFromPhi_C2\",\n@@ -153,1 +183,2 @@\n-        Asserts.assertEQ(testLoadNarrowKlass_Interp(cond1),                         testLoadNarrowKlass_C2(cond1));\n+        Asserts.assertEQ(testLoadKlassFromCast_Interp(cond1),                       testLoadKlassFromCast_C2(cond1));\n+        Asserts.assertEQ(testLoadKlassFromPhi_Interp(cond1),                        testLoadKlassFromPhi_C2(cond1));\n@@ -774,1 +805,2 @@\n-    @IR(counts = { IRNode.ALLOC, \"2\" } )\n+    @IR(counts = { IRNode.ALLOC, \"2\" }, applyIf = {\"UseCompressedOops\", \"true\"} )\n+    @IR(failOn = { IRNode.ALLOC }, applyIf = {\"UseCompressedOops\", \"false\"} )\n@@ -776,2 +808,2 @@\n-    \/\/ be removed because the Phi merging them will have a DecodeN user - which\n-    \/\/ currently isn't supported.\n+    \/\/ be removed, if CompressedOops is enabled, because the Phi merging them will\n+    \/\/ have a DecodeN user - which currently isn't supported.\n@@ -1261,1 +1293,1 @@\n-    Class testLoadNarrowKlass(boolean cond1) {\n+    Class testLoadKlassFromCast(boolean cond1) {\n@@ -1273,3 +1305,2 @@\n-    \/\/ The allocation won't be reduced because we don't support NarrowKlass\n-    \/\/ loads under CastPPs.\n-    Class testLoadNarrowKlass_C2(boolean cond1) { return testLoadNarrowKlass(cond1); }\n+    \/\/ The allocation won't be reduced because we don't support [Narrow]Klass loads\n+    Class testLoadKlassFromCast_C2(boolean cond1) { return testLoadKlassFromCast(cond1); }\n@@ -1278,1 +1309,22 @@\n-    Class testLoadNarrowKlass_Interp(boolean cond1) { return testLoadNarrowKlass(cond1); }\n+    Class testLoadKlassFromCast_Interp(boolean cond1) { return testLoadKlassFromCast(cond1); }\n+\n+    \/\/ -------------------------------------------------------------------------\n+\n+    @ForceInline\n+    Class testLoadKlassFromPhi(boolean cond1) {\n+        Shape p = new Square(20);\n+\n+        if (cond1) {\n+            p = new Circle(10);\n+        }\n+\n+        return p.getClass();\n+    }\n+\n+    @Test\n+    @IR(counts = { IRNode.ALLOC, \"2\" })\n+    \/\/ The allocation won't be reduced because we don't support [Narrow]Klass loads\n+    Class testLoadKlassFromPhi_C2(boolean cond1) { return testLoadKlassFromPhi(cond1); }\n+\n+    @DontCompile\n+    Class testLoadKlassFromPhi_Interp(boolean cond1) { return testLoadKlassFromPhi(cond1); }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/scalarReplacement\/AllocationMergesTests.java","additions":72,"deletions":20,"binary":false,"changes":92,"status":"modified"}]}