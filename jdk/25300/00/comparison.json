{"files":[{"patch":"@@ -25,0 +25,1 @@\n+#include \"attachListener_posix.hpp\"\n@@ -38,1 +39,0 @@\n-#include <sys\/un.h>\n@@ -44,4 +44,0 @@\n-#ifndef UNIX_PATH_MAX\n-#define UNIX_PATH_MAX   sizeof(sockaddr_un::sun_path)\n-#endif\n-\n@@ -64,96 +60,0 @@\n-\/\/ forward reference\n-class PosixAttachOperation;\n-\n-class PosixAttachListener: AllStatic {\n- private:\n-  \/\/ the path to which we bind the UNIX domain socket\n-  static char _path[UNIX_PATH_MAX];\n-  static bool _has_path;\n-\n-  \/\/ the file descriptor for the listening socket\n-  static volatile int _listener;\n-\n-  static bool _atexit_registered;\n-\n- public:\n-  static void set_path(char* path) {\n-    if (path == nullptr) {\n-      _path[0] = '\\0';\n-      _has_path = false;\n-    } else {\n-      strncpy(_path, path, UNIX_PATH_MAX);\n-      _path[UNIX_PATH_MAX-1] = '\\0';\n-      _has_path = true;\n-    }\n-  }\n-\n-  static void set_listener(int s)               { _listener = s; }\n-\n-  \/\/ initialize the listener, returns 0 if okay\n-  static int init();\n-\n-  static char* path()                   { return _path; }\n-  static bool has_path()                { return _has_path; }\n-  static int listener()                 { return _listener; }\n-\n-  static PosixAttachOperation* dequeue();\n-};\n-\n-class SocketChannel : public AttachOperation::RequestReader, public AttachOperation::ReplyWriter {\n-private:\n-  int _socket;\n-public:\n-  SocketChannel(int socket) : _socket(socket) {}\n-  ~SocketChannel() {\n-    close();\n-  }\n-\n-  bool opened() const {\n-    return _socket != -1;\n-  }\n-\n-  void close() {\n-    if (opened()) {\n-      ::shutdown(_socket, SHUT_RDWR);\n-      ::close(_socket);\n-      _socket = -1;\n-    }\n-  }\n-\n-  \/\/ RequestReader\n-  int read(void* buffer, int size) override {\n-    ssize_t n;\n-    RESTARTABLE(::read(_socket, buffer, (size_t)size), n);\n-    return checked_cast<int>(n);\n-  }\n-\n-  \/\/ ReplyWriter\n-  int write(const void* buffer, int size) override {\n-    ssize_t n;\n-    RESTARTABLE(::write(_socket, buffer, size), n);\n-    return checked_cast<int>(n);\n-  }\n-\n-  void flush() override {\n-  }\n-};\n-\n-class PosixAttachOperation: public AttachOperation {\n- private:\n-  \/\/ the connection to the client\n-  SocketChannel _socket_channel;\n-\n- public:\n-  PosixAttachOperation(int socket) : AttachOperation(), _socket_channel(socket) {}\n-\n-  void complete(jint res, bufferedStream* st) override;\n-\n-  ReplyWriter* get_reply_writer() override {\n-    return &_socket_channel;\n-  }\n-\n-  bool read_request() {\n-    return _socket_channel.read_request(this, &_socket_channel);\n-  }\n-};\n-\n","filename":"src\/hotspot\/os\/posix\/attachListener_posix.cpp","additions":1,"deletions":101,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_POSIX_ATTACHLISTENER_POSIX_HPP\n+#define OS_POSIX_ATTACHLISTENER_POSIX_HPP\n+\n+#include \"posixAttachOperation.hpp\"\n+\n+#include <sys\/un.h>\n+\n+#if INCLUDE_SERVICES\n+#ifndef AIX\n+\n+\/\/ forward reference\n+class PosixAttachOperation;\n+\n+#ifndef UNIX_PATH_MAX\n+#define UNIX_PATH_MAX   sizeof(sockaddr_un::sun_path)\n+#endif\n+\n+class PosixAttachListener: AllStatic {\n+ private:\n+  \/\/ the path to which we bind the UNIX domain socket\n+  static char _path[UNIX_PATH_MAX];\n+  static bool _has_path;\n+\n+  \/\/ the file descriptor for the listening socket\n+  static volatile int _listener;\n+\n+  static bool _atexit_registered;\n+\n+ public:\n+  static void set_path(char* path) {\n+    if (path == nullptr) {\n+      _path[0] = '\\0';\n+      _has_path = false;\n+    } else {\n+      strncpy(_path, path, UNIX_PATH_MAX);\n+      _path[UNIX_PATH_MAX-1] = '\\0';\n+      _has_path = true;\n+    }\n+  }\n+\n+  static void set_listener(int s)               { _listener = s; }\n+\n+  \/\/ initialize the listener, returns 0 if okay\n+  static int init();\n+\n+  static char* path()                   { return _path; }\n+  static bool has_path()                { return _has_path; }\n+  static int listener()                 { return _listener; }\n+\n+  static PosixAttachOperation* dequeue();\n+};\n+\n+#endif \/\/ !AIX\n+\n+#endif \/\/ INCLUDE_SERVICES\n+\n+#endif \/\/ OS_POSIX_ATTACHLISTENER_POSIX_HPP\n","filename":"src\/hotspot\/os\/posix\/attachListener_posix.hpp","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -0,0 +1,96 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef OS_POSIX_POSIXATTACHOPERATION_HPP\n+#define OS_POSIX_POSIXATTACHOPERATION_HPP\n+\n+#include \"os_posix.hpp\"\n+#include \"services\/attachListener.hpp\"\n+\n+#if INCLUDE_SERVICES\n+#ifndef AIX\n+\n+class SocketChannel : public AttachOperation::RequestReader, public AttachOperation::ReplyWriter {\n+private:\n+  int _socket;\n+public:\n+  SocketChannel(int socket) : _socket(socket) {}\n+  ~SocketChannel() {\n+    close();\n+  }\n+\n+  bool opened() const {\n+    return _socket != -1;\n+  }\n+\n+  void close() {\n+    if (opened()) {\n+      ::shutdown(_socket, SHUT_RDWR);\n+      ::close(_socket);\n+      _socket = -1;\n+    }\n+  }\n+\n+  \/\/ RequestReader\n+  int read(void* buffer, int size) override {\n+    ssize_t n;\n+    RESTARTABLE(::read(_socket, buffer, (size_t)size), n);\n+    return checked_cast<int>(n);\n+  }\n+\n+  \/\/ ReplyWriter\n+  int write(const void* buffer, int size) override {\n+    ssize_t n;\n+    RESTARTABLE(::write(_socket, buffer, size), n);\n+    return checked_cast<int>(n);\n+  }\n+\n+  void flush() override {\n+  }\n+};\n+\n+class PosixAttachOperation: public AttachOperation {\n+ private:\n+  \/\/ the connection to the client\n+  SocketChannel _socket_channel;\n+\n+ public:\n+  PosixAttachOperation(int socket) : AttachOperation(), _socket_channel(socket) {}\n+\n+  void complete(jint res, bufferedStream* st) override;\n+\n+  ReplyWriter* get_reply_writer() override {\n+    return &_socket_channel;\n+  }\n+\n+  bool read_request() {\n+    return _socket_channel.read_request(this, &_socket_channel);\n+  }\n+};\n+\n+#endif \/\/ !AIX\n+\n+#endif \/\/ INCLUDE_SERVICES\n+\n+#endif \/\/ OS_POSIX_POSIXATTACHOPERATION_HPP\n","filename":"src\/hotspot\/os\/posix\/posixAttachOperation.hpp","additions":96,"deletions":0,"binary":false,"changes":96,"status":"added"}]}