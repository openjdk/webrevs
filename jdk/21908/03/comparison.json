{"files":[{"patch":"@@ -81,7 +81,2 @@\n-    public static MessageDigest getInstance() {\n-        try {\n-            return MessageDigest.getInstance(\"MD4\", md4Provider);\n-        } catch (NoSuchAlgorithmException e) {\n-            \/\/ should never occur\n-            throw new ProviderException(e);\n-        }\n+    public static MessageDigest getInstance() throws NoSuchAlgorithmException {\n+        return MessageDigest.getInstance(\"MD4\", md4Provider);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/MD4.java","additions":2,"deletions":7,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -99,1 +99,1 @@\n-            throw new IllegalArgumentException(e.getMessage());\n+            throw new IllegalArgumentException(\"key creation error\", e);\n","filename":"src\/java.security.jgss\/share\/classes\/javax\/security\/auth\/kerberos\/KeyImpl.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,2 +111,0 @@\n-        } catch (Exception e) {\n-            return null;\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/crypto\/dk\/AesDkCrypto.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,2 +114,0 @@\n-        } catch (Exception e) {\n-            return null;\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/crypto\/dk\/AesSha2DkCrypto.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -92,2 +92,0 @@\n-        } catch (Exception e) {\n-            return null;\n","filename":"src\/java.security.jgss\/share\/classes\/sun\/security\/krb5\/internal\/crypto\/dk\/ArcFourCrypto.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\/*\n+ * @test\n+ * @bug 8343622\n+ * @summary KerberosKey created with null key bytes\n+ * @library \/test\/lib\n+ * @run main\/othervm NullStringToKey\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+\n+import javax.security.auth.kerberos.KerberosKey;\n+import javax.security.auth.kerberos.KerberosPrincipal;\n+import java.security.Security;\n+import java.util.List;\n+\n+public class NullStringToKey {\n+    public static void main(String[] args) throws Exception {\n+\n+        Security.removeProvider(\"SUN\");\n+        Security.removeProvider(\"SunJCE\");\n+\n+        var name = new KerberosPrincipal(\"me@ME.COM\");\n+        var pass = \"password\".toCharArray();\n+        for (var alg : List.of(\n+                \"aes128-cts-hmac-sha1-96\", \"aes256-cts-hmac-sha1-96\",\n+                \"aes128-cts-hmac-sha256-128\", \"aes256-cts-hmac-sha384-192\")) {\n+            System.out.println(alg);\n+            Utils.runAndCheckException(() -> new KerberosKey(name, pass, alg),\n+                    IllegalArgumentException.class);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/krb5\/NullStringToKey.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}