{"files":[{"patch":"@@ -40,2 +40,2 @@\n-public class Operators {\n-    private  Operators(){throw new AssertionError(\"No Operators instances for you\");}\n+public final class Operators {\n+    private Operators(){throw new AssertionError(\"No Operators instances for you\");}\n@@ -73,1 +73,1 @@\n-     * This method wraps the {@code <} operator on {@code int} augments.\n+     * This method wraps the {@code <} operator on {@code int} arguments.\n@@ -78,1 +78,1 @@\n-    public static boolean lessThan(int a, int b) {return a < b;}\n+    public static final boolean lessThan(int a, int b) {return a < b;}\n@@ -85,1 +85,1 @@\n-     * This method wraps the {@code <=} operator on {@code int} augments.\n+     * This method wraps the {@code <=} operator on {@code int} arguments.\n@@ -90,1 +90,1 @@\n-    public static boolean lessThanEqual(int a, int b) {return a <= b;}\n+    public static final boolean lessThanEqual(int a, int b) {return a <= b;}\n@@ -96,1 +96,1 @@\n-     * This method wraps the {@code >} operator on {@code int} augments.\n+     * This method wraps the {@code >} operator on {@code int} arguments.\n@@ -101,1 +101,1 @@\n-    public static boolean greaterThan(int a, int b) {return a > b;}\n+    public static final boolean greaterThan(int a, int b) {return a > b;}\n@@ -108,1 +108,1 @@\n-     * This method wraps the {@code <=} operator on {@code int} augments.\n+     * This method wraps the {@code <=} operator on {@code int} arguments.\n@@ -113,1 +113,1 @@\n-    public static boolean greaterThanEqual(int a, int b) {return a >= b;}\n+    public static final boolean greaterThanEqual(int a, int b) {return a >= b;}\n@@ -121,1 +121,1 @@\n-     * This method wraps the {@code ==} operator on {@code int} augments.\n+     * This method wraps the {@code ==} operator on {@code int} arguments.\n@@ -126,1 +126,1 @@\n-    public static boolean equal(int a, int b) {return a == b;}\n+    public static final boolean equal(int a, int b) {return a == b;}\n@@ -132,1 +132,1 @@\n-     * This method wraps the {@code !=} operator on {@code int} augments.\n+     * This method wraps the {@code !=} operator on {@code int} arguments.\n@@ -137,1 +137,1 @@\n-    public static boolean notEqual(int a, int b) {return a != b;}\n+    public static final boolean notEqual(int a, int b) {return a != b;}\n@@ -145,1 +145,1 @@\n-     * This method wraps the unary {@code +} operator on {@code int} augment.\n+     * This method wraps the unary {@code +} operator on an {@code int} argument.\n@@ -149,1 +149,1 @@\n-    public static int plus(int a) {return +a;} \/\/ Just for completeness; don't need this.\n+    public static final int plus(int a) {return +a;} \/\/ Just for completeness; don't need this.\n@@ -155,1 +155,1 @@\n-     * This method wraps the unary {@code -} operator on {@code int} augment.\n+     * This method wraps the unary {@code -} operator on an {@code int} argument.\n@@ -159,1 +159,1 @@\n-    public static int negate(int a) {return -a;}\n+    public static final int negate(int a) {return -a;}\n@@ -167,1 +167,1 @@\n-     * This method wraps the binary {@code *} operator on {@code int} augments.\n+     * This method wraps the binary {@code *} operator on {@code int} arguments.\n@@ -172,1 +172,1 @@\n-    public static int multiply(int multiplier, int multiplicand) {return multiplier * multiplicand;}\n+    public static final int multiply(int multiplier, int multiplicand) {return multiplier * multiplicand;}\n@@ -178,1 +178,1 @@\n-     * This method wraps the binary {@code \/} operator on {@code int} augments.\n+     * This method wraps the binary {@code \/} operator on {@code int} arguments.\n@@ -183,1 +183,1 @@\n-    public static int divide(int dividend, int divisor) {return dividend \/ divisor;}\n+    public static final int divide(int dividend, int divisor) {return dividend \/ divisor;}\n@@ -189,1 +189,1 @@\n-     * This method wraps the binary {@code %} operator on {@code int} augments.\n+     * This method wraps the binary {@code %} operator on {@code int} arguments.\n@@ -194,1 +194,1 @@\n-    public static int remainder(int dividend, int divisor) {return dividend % divisor;}\n+    public static final int remainder(int dividend, int divisor) {return dividend % divisor;}\n@@ -203,1 +203,1 @@\n-     * This method wraps the binary {@code +} operator on {@code int} augments.\n+     * This method wraps the binary {@code +} operator on {@code int} arguments.\n@@ -208,1 +208,1 @@\n-    public static int add(int addend, int augend) {return addend + augend;}\n+    public static final int add(int addend, int augend) {return addend + augend;}\n@@ -214,1 +214,1 @@\n-     * This method wraps the binary {@code -} operator on {@code int} augments.\n+     * This method wraps the binary {@code -} operator on {@code int} arguments.\n@@ -219,1 +219,1 @@\n-    public static int substract(int minuend, int subtrahend) {return minuend - subtrahend;}\n+    public static final int subtract(int minuend, int subtrahend) {return minuend - subtrahend;}\n@@ -227,1 +227,1 @@\n-     * This method wraps the {@code ++} operator on an {@code int} augment.\n+     * This method wraps the {@code ++} operator on an {@code int} argument.\n@@ -231,1 +231,1 @@\n-    public static int increment(int a) {return a++;}\n+    public static final int increment(int a) {return ++a;}\n@@ -237,1 +237,1 @@\n-     * This method wraps the {@code --} operator on an {@code int} augment.\n+     * This method wraps the {@code --} operator on an {@code int} argument.\n@@ -241,1 +241,1 @@\n-    public static int decrement(int a) {return a--;}\n+    public static final int decrement(int a) {return --a;}\n@@ -249,1 +249,1 @@\n-     * This method wraps the {@code >>} operator on {@code int} augments.\n+     * This method wraps the {@code >>} operator on {@code int} arguments.\n@@ -254,1 +254,1 @@\n-    public static int shiftLeft(int a, int shiftDistance) {return a << shiftDistance;}\n+    public static final int shiftLeft(int a, int shiftDistance) {return a << shiftDistance;}\n@@ -260,1 +260,1 @@\n-     * This method wraps the {@code >>} operator on {@code int} augments.\n+     * This method wraps the {@code >>} operator on {@code int} arguments.\n@@ -265,1 +265,1 @@\n-    public static int shiftRight(int a, int shiftDistance) {return a >> shiftDistance;}\n+    public static final int shiftRight(int a, int shiftDistance) {return a >> shiftDistance;}\n@@ -271,1 +271,1 @@\n-     * This method wraps the {@code >>>} operator on {@code int} augments.\n+     * This method wraps the {@code >>>} operator on {@code int} arguments.\n@@ -276,1 +276,1 @@\n-    public static int shiftRightUnsigned(int a, int shiftDistance) {return a >>> shiftDistance;}\n+    public static final int shiftRightUnsigned(int a, int shiftDistance) {return a >>> shiftDistance;}\n@@ -285,1 +285,1 @@\n-     * This method wraps the {@code ~} operator applied to the {@code int} augment.\n+     * This method wraps the {@code ~} operator applied to the {@code int} argument.\n@@ -289,1 +289,1 @@\n-    public static int complement(int a) {return ~a;}\n+    public static final int complement(int a) {return ~a;}\n@@ -295,1 +295,1 @@\n-     * This method wraps the {@code &} operator on {@code int} augments.\n+     * This method wraps the {@code &} operator on {@code int} arguments.\n@@ -300,1 +300,1 @@\n-    public static int and(int a, int b) {return a & b;}\n+    public static final int and(int a, int b) {return a & b;}\n@@ -306,1 +306,1 @@\n-     * This method wraps the {@code |} operator on {@code int} augments.\n+     * This method wraps the {@code |} operator on {@code int} arguments.\n@@ -311,1 +311,1 @@\n-    public static int or(int a, int b) {return a | b;}\n+    public static final int or(int a, int b) {return a | b;}\n@@ -317,1 +317,1 @@\n-     * This method wraps the {@code ^} operator on {@code int} augments.\n+     * This method wraps the {@code ^} operator on {@code int} arguments.\n@@ -322,1 +322,1 @@\n-    public static int xor(int a, int b) {return a ^ b;}\n+    public static final int xor(int a, int b) {return a ^ b;}\n@@ -335,1 +335,1 @@\n-    public static byte i2b(int a)   {return (byte)  a;}\n+    public static final byte i2b(int a)   {return (byte)  a;}\n@@ -345,1 +345,1 @@\n-    public static char i2c(int a)   {return (char)  a;}\n+    public static final char i2c(int a)   {return (char)  a;}\n@@ -355,1 +355,1 @@\n-    public static double i2d(int a) {return (double)a;}\n+    public static final double i2d(int a) {return (double)a;}\n@@ -365,1 +365,1 @@\n-    public static float i2f(int a)  {return (float) a;}\n+    public static final float i2f(int a)  {return (float) a;}\n@@ -375,1 +375,1 @@\n-    public static long i2l(int a)   {return (long)  a;}\n+    public static final long i2l(int a)   {return (long)  a;}\n@@ -386,1 +386,1 @@\n-    public static int iaload(int[] array, int index) {return array[index];}\n+    public static final int iaload(int[] array, int index) {return array[index];}\n@@ -396,1 +396,1 @@\n-     * @param value the value to store into the aray\n+     * @param value the value to store into the array\n@@ -398,1 +398,1 @@\n-    public static void iastore(int[] array, int index, int value) {array[index] = value; }\n+    public static final void iastore(int[] array, int index, int value) {array[index] = value; }\n@@ -436,1 +436,1 @@\n-     * This method wraps the {@code <} operator on {@code float} augments.\n+     * This method wraps the {@code <} operator on {@code float} arguments.\n@@ -441,1 +441,1 @@\n-    public static boolean lessThan(float a, float b) {return a < b;}\n+    public static final boolean lessThan(float a, float b) {return a < b;}\n@@ -448,1 +448,1 @@\n-     * This method wraps the {@code <=} operator on {@code float} augments.\n+     * This method wraps the {@code <=} operator on {@code float} arguments.\n@@ -453,1 +453,1 @@\n-    public static boolean lessThanEqual(float a, float b) {return a <= b;}\n+    public static final boolean lessThanEqual(float a, float b) {return a <= b;}\n@@ -459,1 +459,1 @@\n-     * This method wraps the {@code >} operator on {@code float} augments.\n+     * This method wraps the {@code >} operator on {@code float} arguments.\n@@ -464,1 +464,1 @@\n-    public static boolean greaterThan(float a, float b) {return a > b;}\n+    public static final boolean greaterThan(float a, float b) {return a > b;}\n@@ -471,1 +471,1 @@\n-     * This method wraps the {@code <=} operator on {@code float} augments.\n+     * This method wraps the {@code <=} operator on {@code float} arguments.\n@@ -476,1 +476,1 @@\n-    public static boolean greaterThanEqual(float a, float b) {return a >= b;}\n+    public static final boolean greaterThanEqual(float a, float b) {return a >= b;}\n@@ -482,1 +482,1 @@\n-     * This method wraps the {@code ==} operator on {@code float} augments.\n+     * This method wraps the {@code ==} operator on {@code float} arguments.\n@@ -487,1 +487,1 @@\n-    public static boolean equal(float a, float b) {return a == b;}\n+    public static final boolean equal(float a, float b) {return a == b;}\n@@ -493,1 +493,1 @@\n-     * This method wraps the {@code !=} operator on {@code float} augments.\n+     * This method wraps the {@code !=} operator on {@code float} arguments.\n@@ -498,1 +498,1 @@\n-    public static boolean notEqual(float a, float b) {return a != b;}\n+    public static final boolean notEqual(float a, float b) {return a != b;}\n@@ -508,1 +508,1 @@\n-     * This method wraps the unary {@code +} operator on {@code float} augment.\n+     * This method wraps the unary {@code +} operator on a {@code float} argument.\n@@ -512,1 +512,1 @@\n-    public static float plus(float a) {return +a;} \/\/ Just for completeness; don't need this.\n+    public static final float plus(float a) {return +a;} \/\/ Just for completeness; don't need this.\n@@ -518,1 +518,1 @@\n-     * This method wraps the unary {@code -} operator on {@code float} augment.\n+     * This method wraps the unary {@code -} operator on a {@code float} argument.\n@@ -522,1 +522,1 @@\n-    public static float negate(float a) {return -a;}\n+    public static final float negate(float a) {return -a;}\n@@ -530,1 +530,1 @@\n-     * This method wraps the binary {@code *} operator on {@code float} augments.\n+     * This method wraps the binary {@code *} operator on {@code float} arguments.\n@@ -535,1 +535,1 @@\n-    public static float multiply(float multiplier, float multiplicand) {return multiplier * multiplicand;}\n+    public static final float multiply(float multiplier, float multiplicand) {return multiplier * multiplicand;}\n@@ -541,1 +541,1 @@\n-     * This method wraps the binary {@code \/} operator on {@code float} augments.\n+     * This method wraps the binary {@code \/} operator on {@code float} arguments.\n@@ -546,1 +546,1 @@\n-    public static float divide(float dividend, float divisor) {return dividend \/ divisor;}\n+    public static final float divide(float dividend, float divisor) {return dividend \/ divisor;}\n@@ -552,1 +552,1 @@\n-     * This method wraps the binary {@code %} operator on {@code float} augments.\n+     * This method wraps the binary {@code %} operator on {@code float} arguments.\n@@ -557,1 +557,1 @@\n-    public static float remainder(float dividend, float divisor) {return dividend % divisor;}\n+    public static final float remainder(float dividend, float divisor) {return dividend % divisor;}\n@@ -566,1 +566,1 @@\n-     * This method wraps the binary {@code +} operator on {@code float} augments.\n+     * This method wraps the binary {@code +} operator on {@code float} arguments.\n@@ -571,1 +571,1 @@\n-    public static float add(float addend, float augend) {return addend + augend;}\n+    public static final float add(float addend, float augend) {return addend + augend;}\n@@ -577,1 +577,1 @@\n-     * This method wraps the binary {@code -} operator on {@code float} augments.\n+     * This method wraps the binary {@code -} operator on {@code float} arguments.\n@@ -582,1 +582,1 @@\n-    public static float substract(float minuend, float subtrahend) {return minuend - subtrahend;}\n+    public static final float subtract(float minuend, float subtrahend) {return minuend - subtrahend;}\n@@ -590,1 +590,1 @@\n-     * This method wraps the {@code ++} operator on an {@code float} augment.\n+     * This method wraps the {@code ++} operator on an {@code float} argument.\n@@ -594,1 +594,1 @@\n-    public static float increment(float a) {return a++;}\n+    public static final float increment(float a) {return ++a;}\n@@ -600,1 +600,1 @@\n-     * This method wraps the {@code --} operator on an {@code float} augment.\n+     * This method wraps the {@code --} operator on an {@code float} argument.\n@@ -604,1 +604,1 @@\n-    public static float decrement(float a) {return a--;}\n+    public static final float decrement(float a) {return --a;}\n@@ -616,1 +616,1 @@\n-    public static double f2d(float a) {return (double)a;}\n+    public static final double f2d(float a) {return (double)a;}\n@@ -626,1 +626,1 @@\n-    public static int f2i(float a)   {return (int)    a;}\n+    public static final int f2i(float a)   {return (int)    a;}\n@@ -636,1 +636,1 @@\n-    public static long f2l(float a)   {return (long)  a;}\n+    public static final long f2l(float a)   {return (long)  a;}\n@@ -646,0 +646,1 @@\n+     * @see MethodHandles#arrayElementGetter(Class<?>)\n@@ -647,1 +648,1 @@\n-    public static float faload(float[] array, int index) {return array[index];}\n+    public static final float faload(float[] array, int index) {return array[index];}\n@@ -657,1 +658,2 @@\n-     * @param value the value to store into the aray\n+     * @param value the value to store into the array\n+     * @see MethodHandles#arrayElementSetter(Class<?>)\n@@ -659,1 +661,1 @@\n-    public static void fastore(float[] array, int index, float value) {array[index] = value; }\n+    public static final void fastore(float[] array, int index, float value) {array[index] = value; }\n@@ -675,0 +677,1 @@\n+     * @see MethodHandles#throwException(Class<?>, Class<? extends Throwable>)\n@@ -676,1 +679,1 @@\n-    public static void athrow(Throwable t) throws Throwable {\n+    public static final void athrow(Throwable t) throws Throwable {\n@@ -698,1 +701,1 @@\n-    public void nop() {return;}\n+    public static final void nop() {return;}\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Operators.java","additions":95,"deletions":92,"binary":false,"changes":187,"status":"modified"}]}