{"files":[{"patch":"@@ -2202,1 +2202,1 @@\n-  AdapterFingerPrint(int total_args_passed, BasicType* sig_bt) {\n+  AdapterFingerPrint(int total_args_passed, BasicType* sig_bt, int len) {\n@@ -2205,1 +2205,2 @@\n-    _length = length(total_args_passed);\n+    assert(len == length(total_args_passed), \"sanity\");\n+    _length = len;\n@@ -2220,1 +2221,1 @@\n-    FreeHeap(this);\n+    ShouldNotCallThis();\n@@ -2227,3 +2228,2 @@\n-  static int compute_size(int total_args_passed, BasicType* sig_bt) {\n-    int len = length(total_args_passed);\n-    return sizeof(AdapterFingerPrint) + (len * sizeof(int));\n+  static int compute_size_in_words(int len) {\n+    return (int)heap_word_size(sizeof(AdapterFingerPrint) + (len * sizeof(int)));\n@@ -2292,2 +2292,5 @@\n-    int size_in_bytes = compute_size(total_args_passed, sig_bt);\n-    return new (size_in_bytes) AdapterFingerPrint(total_args_passed, sig_bt);\n+    int len = length(total_args_passed);\n+    int size_in_bytes = BytesPerWord * compute_size_in_words(len);\n+    AdapterFingerPrint* afp = new (size_in_bytes) AdapterFingerPrint(total_args_passed, sig_bt, len);\n+    assert((afp->size() * BytesPerWord) == size_in_bytes, \"should match\");\n+    return afp;\n@@ -2297,1 +2300,1 @@\n-    fp->~AdapterFingerPrint();\n+    FreeHeap(fp);\n@@ -2421,1 +2424,1 @@\n-  int size() const { return (int)heap_word_size(sizeof(AdapterFingerPrint) + (_length * sizeof(int))); }\n+  int size() const { return compute_size_in_words(_length); }\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -714,0 +714,1 @@\n+    assert(size == BytesPerWord * heap_word_size(sizeof(AdapterHandlerEntry)), \"should match\");\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}