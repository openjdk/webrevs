{"files":[{"patch":"@@ -319,0 +319,4 @@\n+    \/\/ Parse the specified cipher transformation for algorithm and the\n+    \/\/ optional mode and padding. If the transformation contains only\n+    \/\/ algorithm, then only algorithm is returned. Otherwise, the\n+    \/\/ transformation must contain all 3 and they must be non-empty.\n@@ -325,1 +329,1 @@\n-         * array containing the components of a cipher transformation:\n+         * Components of a cipher transformation:\n@@ -327,3 +331,3 @@\n-         * index 0: algorithm component (e.g., AES)\n-         * index 1: feedback component (e.g., CFB)\n-         * index 2: padding component (e.g., PKCS5Padding)\n+         * 1) algorithm component (e.g., AES)\n+         * 2) feedback component (e.g., CFB) - optional\n+         * 3) padding component (e.g., PKCS5Padding) - optional\n@@ -331,1 +335,0 @@\n-        String[] parts = { \"\", \"\", \"\" };\n@@ -340,3 +343,11 @@\n-        if (endIdx == -1) {\n-            \/\/ algorithm\n-            parts[0] = transformation.trim();\n+\n+        boolean algorithmOnly = (endIdx == -1);\n+        String algo = (algorithmOnly ? transformation.trim() :\n+                transformation.substring(0, endIdx).trim());\n+        if (algo.isEmpty()) {\n+            throw new NoSuchAlgorithmException(\"Invalid transformation: \" +\n+                                   \"algorithm not specified-\"\n+                                   + transformation);\n+        }\n+        if (algorithmOnly) { \/\/ done\n+            return new String[] { algo };\n@@ -344,2 +355,1 @@\n-            \/\/ algorithm\/mode\/padding\n-            parts[0] = transformation.substring(0, endIdx).trim();\n+            \/\/ continue parsing mode and padding\n@@ -352,6 +362,6 @@\n-            parts[1] = transformation.substring(startIdx, endIdx).trim();\n-            parts[2] = transformation.substring(endIdx+1).trim();\n-        }\n-        if (parts[0].isEmpty()) {\n-            throw new NoSuchAlgorithmException(\"Invalid transformation: \" +\n-                                   \"algorithm not specified-\"\n+            String mode = transformation.substring(startIdx, endIdx).trim();\n+            String padding = transformation.substring(endIdx+1).trim();\n+            \/\/ ensure mode and padding are specified\n+            if (mode.isEmpty() || padding.isEmpty()) {\n+                throw new NoSuchAlgorithmException(\"Invalid transformation: \" +\n+                                   \"missing mode and\/or padding-\"\n@@ -359,0 +369,2 @@\n+            }\n+            return new String[] { algo, mode, padding };\n@@ -360,1 +372,0 @@\n-        return parts;\n@@ -456,5 +467,1 @@\n-        String alg = parts[0];\n-        String mode = (parts[1].length() == 0 ? null : parts[1]);\n-        String pad = (parts[2].length() == 0 ? null : parts[2]);\n-\n-        if ((mode == null) && (pad == null)) {\n+        if (parts.length == 1) {\n@@ -462,1 +469,1 @@\n-            Transform tr = new Transform(alg, \"\", null, null);\n+            Transform tr = new Transform(parts[0], \"\", null, null);\n@@ -465,1 +472,1 @@\n-            \/\/ Algorithm w\/ at least mode or padding or both\n+            \/\/ Algorithm w\/ both mode and padding\n@@ -467,10 +474,5 @@\n-            if ((mode != null) && (pad != null)) {\n-                list.add(new Transform(alg, \"\/\" + mode + \"\/\" + pad, null, null));\n-            }\n-            if (mode != null) {\n-                list.add(new Transform(alg, \"\/\" + mode, null, pad));\n-            }\n-            if (pad != null) {\n-                list.add(new Transform(alg, \"\/\/\" + pad, mode, null));\n-            }\n-            list.add(new Transform(alg, \"\", mode, pad));\n+            list.add(new Transform(parts[0], \"\/\" + parts[1] + \"\/\" + parts[2],\n+                    null, null));\n+            list.add(new Transform(parts[0], \"\/\" + parts[1], null, parts[2]));\n+            list.add(new Transform(parts[0], \"\/\/\" + parts[2], parts[1], null));\n+            list.add(new Transform(parts[0], \"\", parts[1], parts[2]));\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":36,"deletions":34,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -27,3 +27,3 @@\n- * @bug 8358159\n- * @summary test that the Cipher.getInstance() handles\n- * transformations with empty mode and\/or padding\n+ * @bug 8358159 8359388\n+ * @summary test that the Cipher.getInstance() would reject improper\n+ *     transformations with empty mode and\/or padding.\n@@ -40,1 +40,2 @@\n-        Provider provider = Security.getProvider(System.getProperty(\"test.provider.name\", \"SunJCE\"));\n+        Provider provider = Security.getProvider(\n+                System.getProperty(\"test.provider.name\", \"SunJCE\"));\n@@ -42,8 +43,7 @@\n-        test(\"AES\", provider);\n-        test(\"AES\/ECB\/PKCS5Padding\", provider);\n-        test(\"AES\/\/PKCS5Padding\", provider);        \/\/ Empty mode\n-        test(\"AES\/CBC\/\", provider);                 \/\/ Empty padding\n-        test(\"AES\/ \/NoPadding\", provider);          \/\/ Mode is a space\n-        test(\"AES\/CBC\/ \", provider);                \/\/ Padding is a space\n-        test(\"AES\/ \/ \", provider);                  \/\/ Both mode and padding are spaces\n-        test(\"AES\/\/\", provider);                    \/\/ Both mode and padding are missing\n+        \/\/ transformations w\/ only 2 components\n+        test(\"AES\/\", provider);\n+        test(\"AES\/ \", provider);\n+        test(\"AES\/CBC\", provider);\n+        test(\"PBEWithHmacSHA512\/224AndAES_128\/\", provider);\n+        test(\"PBEWithHmacSHA512\/256AndAES_128\/ \", provider);\n+        test(\"PBEWithHmacSHA512\/224AndAES_128\/CBC\", provider);\n@@ -51,0 +51,17 @@\n+        \/\/ 3-component transformations w\/ empty component(s)\n+        test(\"AES\/\/\", provider);\n+        test(\"AES\/ \/\", provider);\n+        test(\"AES\/\/ \", provider);\n+        test(\"AES\/ \/ \", provider);\n+        test(\"AES\/CBC\/\", provider);\n+        test(\"AES\/CBC\/ \", provider);\n+        test(\"AES\/\/PKCS5Padding\", provider);\n+        test(\"AES\/ \/NoPadding\", provider);\n+        test(\"PBEWithHmacSHA512\/224AndAES_128\/\/\", provider);\n+        test(\"PBEWithHmacSHA512\/224AndAES_128\/ \/\", provider);\n+        test(\"PBEWithHmacSHA512\/224AndAES_128\/\/ \", provider);\n+        test(\"PBEWithHmacSHA512\/224AndAES_128\/ \/ \", provider);\n+        test(\"PBEWithHmacSHA512\/256AndAES_128\/CBC\/\", provider);\n+        test(\"PBEWithHmacSHA512\/256AndAES_128\/CBC\/ \", provider);\n+        test(\"PBEWithHmacSHA512\/256AndAES_128\/\/PKCS5Padding\", provider);\n+        test(\"PBEWithHmacSHA512\/256AndAES_128\/ \/PKCS5Padding\", provider);\n@@ -53,2 +70,9 @@\n-    private static void test(String transformation, Provider provider) throws Exception {\n-        Cipher c = Cipher.getInstance(transformation, provider);\n+    private static void test(String transformation, Provider provider)\n+            throws Exception {\n+        System.out.println(\"Testing \" + transformation);\n+        try {\n+            Cipher c = Cipher.getInstance(transformation, provider);\n+            throw new RuntimeException(\"Expected NSAE not thrown\");\n+        } catch (NoSuchAlgorithmException nsae) {\n+            System.out.println(\"Expected NSAE thrown: \" + nsae.getMessage());\n+        }\n","filename":"test\/jdk\/javax\/crypto\/Cipher\/TestEmptyModePadding.java","additions":38,"deletions":14,"binary":false,"changes":52,"status":"modified"}]}