{"files":[{"patch":"@@ -0,0 +1,90 @@\n+\/*\n+ * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+ * @bug 8272746\n+ * @summary Verifies that ZipFile rejects ZIP files which CEN size does not fit in a Java byte array\n+ * @requires (sun.arch.data.model == \"64\" & os.maxMemory > 8g)\n+ * @run testng\/manual\/othervm -Xmx8g CenSizeTooLarge\n+ *\/\n+\n+import org.testng.annotations.BeforeTest;\n+import org.testng.annotations.Test;\n+\n+import java.io.File;\n+import java.io.BufferedOutputStream;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+import java.time.LocalDateTime;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipException;\n+import java.util.zip.ZipFile;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.testng.Assert.*;\n+\n+public class CenSizeTooLarge {\n+    \/\/ Maximum allowed CEN size allowed by the ZipFile implementation\n+    private static int MAX_CEN_SIZE = Integer.MAX_VALUE - ZipFile.ENDHDR - 1;\n+\n+    \/\/ Zip file to create for testing\n+    private File hugeZipFile;\n+\n+    \/**\n+     * Create a zip file with a CEN size which does not fit within a Java byte array\n+     *\/\n+    @BeforeTest\n+    public void setup() throws IOException {\n+        hugeZipFile = new File(\"cen-too-large.zip\");\n+        hugeZipFile.deleteOnExit();\n+\n+        try (ZipOutputStream zip = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(hugeZipFile)))) {\n+            \/\/ Creating the LocalDataTime once allows faster processing\n+            LocalDateTime time = LocalDateTime.now();\n+            long cenSize = 0;\n+            \/\/ Add entries until MAX_CEN_SIZE is reached\n+            for (int i = 0; cenSize < MAX_CEN_SIZE; i++) {\n+                String name = Integer.toString(i);\n+                ZipEntry entry = new ZipEntry(name);\n+                \/\/ Use STORED for faster processing\n+                entry.setMethod(ZipEntry.STORED);\n+                entry.setSize(0);\n+                entry.setCrc(0);\n+                entry.setTimeLocal(time);\n+                zip.putNextEntry(entry);\n+                \/\/ Calculate current cenSize\n+                cenSize += ZipFile.CENHDR + name.length();\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Validates that a ZipException is thrown with the expected message when\n+     * the ZipFile is initialized with a ZIP whose CEN exeeds {@link #MAX_CEN_SIZE}\n+     *\/\n+    @Test\n+    public void test() {\n+        ZipException ex = expectThrows(ZipException.class, () -> new ZipFile(hugeZipFile));\n+        assertEquals(ex.getMessage(), \"invalid END header (central directory size too large)\");\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/CenSizeTooLarge.java","additions":90,"deletions":0,"binary":false,"changes":90,"status":"added"},{"patch":"@@ -1,89 +0,0 @@\n-\/*\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/* @test\n- * @bug 8272746\n- * @summary ZipFile can't open big file (NegativeArraySizeException)\n- * @requires (sun.arch.data.model == \"64\" & os.maxMemory > 8g)\n- * @run testng\/manual\/othervm -Xmx8g TestTooManyEntries\n- *\/\n-\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-\n-import java.io.File;\n-import java.io.BufferedOutputStream;\n-import java.io.FileOutputStream;\n-import java.io.IOException;\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipException;\n-import java.util.zip.ZipFile;\n-import java.util.zip.ZipOutputStream;\n-import java.util.UUID;\n-\n-import static org.testng.Assert.assertThrows;\n-\n-public class TestTooManyEntries {\n-    \/\/ Number of directories in the zip file\n-    private static final int DIR_COUNT = 25000;\n-    \/\/ Number of entries per directory\n-    private static final int ENTRIES_IN_DIR = 1000;\n-\n-    \/\/ Zip file to create for testing\n-    private File hugeZipFile;\n-\n-    \/**\n-     * Create a zip file and add entries that exceed the CEN limit.\n-     * @throws IOException if an error occurs creating the ZIP File\n-     *\/\n-    @BeforeTest\n-    public void setup() throws IOException {\n-        hugeZipFile = File.createTempFile(\"hugeZip\", \".zip\", new File(\".\"));\n-        hugeZipFile.deleteOnExit();\n-        long startTime = System.currentTimeMillis();\n-        try (ZipOutputStream zip = new ZipOutputStream(new BufferedOutputStream(new FileOutputStream(hugeZipFile)))) {\n-            for (int dirN = 0; dirN < DIR_COUNT; dirN++) {\n-                String dirName = UUID.randomUUID() + \"\/\";\n-                for (int fileN = 0; fileN < ENTRIES_IN_DIR; fileN++) {\n-                    ZipEntry entry = new ZipEntry(dirName + UUID.randomUUID());\n-                    zip.putNextEntry(entry);\n-                    zip.closeEntry(); \/\/ all files are empty\n-                }\n-                if ((dirN + 1) % 1000 == 0) {\n-                    System.out.printf(\"%s \/ %s of entries written, file size is %sMb (%ss)%n\",\n-                            (dirN + 1) * ENTRIES_IN_DIR, DIR_COUNT * ENTRIES_IN_DIR, hugeZipFile.length() \/ 1024 \/ 1024,\n-                            (System.currentTimeMillis() - startTime) \/ 1000);\n-                }\n-            }\n-        }\n-    }\n-\n-    \/**\n-     * Validates that the ZipException is thrown when the ZipFile class\n-     * is initialized with a zip file whose entries exceed the CEN limit.\n-     *\/\n-    @Test\n-    public void test() {\n-        assertThrows(ZipException.class, () -> new ZipFile(hugeZipFile));\n-    }\n-}\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/TestTooManyEntries.java","additions":0,"deletions":89,"binary":false,"changes":89,"status":"deleted"}]}