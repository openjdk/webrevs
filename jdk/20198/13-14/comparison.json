{"files":[{"patch":"@@ -131,2 +131,2 @@\n-      DCmdArgument<FileArgument>* argument =\n-          new DCmdArgument<FileArgument>(name, desc, \"FILE\", mandatory);\n+      DCmdArgument<char*>* argument =\n+          new DCmdArgument<char*>(name, desc, \"FILE\", mandatory);\n","filename":"src\/hotspot\/share\/prims\/wbtestmethods\/parserTests.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -111,4 +111,0 @@\n-void GenDCmdArgument::to_string(FileArgument f, char* buf, size_t len) const {\n-  jio_snprintf(buf, len, \"%s\", (f.get() != nullptr) ? f.get() : \"\");\n-}\n-\n@@ -131,0 +127,2 @@\n+template <> void DCmdArgument<MemorySizeArgument>::destroy_value() { }\n+\n@@ -196,3 +194,12 @@\n-    _value = REALLOC_C_HEAP_ARRAY(char, _value, len + 1, mtInternal);\n-    int n = os::snprintf(_value, len + 1, \"%.*s\", (int)len, str);\n-    assert((size_t)n <= len, \"Unexpected number of characters in string\");\n+    if (strcmp(type(), \"FILE\") == 0) {\n+      _value = REALLOC_C_HEAP_ARRAY(char, _value, JVM_MAXPATHLEN, mtInternal);\n+      if (!Arguments::copy_expand_pid(str, len, _value, JVM_MAXPATHLEN)) {\n+        stringStream error_msg;\n+        error_msg.print(\"File path invalid or too long: %s\", str);\n+        THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), error_msg.base());\n+      }\n+    } else {\n+      _value = REALLOC_C_HEAP_ARRAY(char, _value, len + 1, mtInternal);\n+      int n = os::snprintf(_value, len + 1, \"%.*s\", (int)len, str);\n+      assert((size_t)n <= len, \"Unexpected number of characters in string\");\n+    }\n@@ -355,21 +362,0 @@\n-\n-template <> void DCmdArgument<MemorySizeArgument>::destroy_value() { }\n-\n-template <> void DCmdArgument<FileArgument>::destroy_value() {}\n-\n-template <> void DCmdArgument<FileArgument>::parse_value(const char *str,\n-                                            size_t len, TRAPS) {\n-  if (str != nullptr) {\n-    if (!_value.parse_value(str, len)) {\n-      stringStream error_msg;\n-      error_msg.print(\"File path invalid or too long: %s\", str);\n-      THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), error_msg.base());\n-    }\n-  }\n-}\n-\n-template <> void DCmdArgument<FileArgument>::init_value(TRAPS) {\n-  if (has_default() && _default_string != nullptr) {\n-    this->parse_value(_default_string, strlen(_default_string), THREAD);\n-  }\n-}\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.cpp","additions":14,"deletions":28,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -63,13 +63,0 @@\n-class FileArgument {\n-  private:\n-    char _name[1024];\n-\n-  public:\n-    const char* get() const { return _name; }\n-\n-    \/\/ returns true if parsing succeeded, false if not.\n-    bool parse_value(const char* s, size_t len) {\n-      return Arguments::copy_expand_pid(s, len, _name, sizeof(_name));\n-    }\n-};\n-\n@@ -121,1 +108,0 @@\n-  void to_string(FileArgument f, char* buf, size_t len) const;\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.hpp","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-  dumper.dump(_filename.value().get(), output(), (int)level, _overwrite.value(),\n+  dumper.dump(_filename.value(), output(), (int)level, _overwrite.value(),\n@@ -864,1 +864,1 @@\n-  CodeCache::write_perf_map(_filename.value().get(), output());\n+  CodeCache::write_perf_map(_filename.value(), output());\n@@ -1015,2 +1015,1 @@\n-  FileArgument file_arg = _filename.value();\n-  const char* file = _filename.is_set() ? file_arg.get() : nullptr;\n+  const char* file = _filename.is_set() ? _filename.value() : nullptr;\n@@ -1113,0 +1112,1 @@\n+  char* path = _filepath.value();\n@@ -1115,1 +1115,1 @@\n-  dumpToFile(name, vmSymbols::string_bool_byte_array_signature(), _filepath.value().get(), overwrite, CHECK);\n+  dumpToFile(name, vmSymbols::string_bool_byte_array_signature(), path, overwrite, CHECK);\n@@ -1194,2 +1194,1 @@\n-  FileArgument file_arg = _filename.value();\n-  const char* name = file_arg.get();\n+  const char* name = _filename.value();\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -319,1 +319,1 @@\n-  DCmdArgument<FileArgument> _filename;\n+  DCmdArgument<char*> _filename;\n@@ -402,1 +402,1 @@\n-  DCmdArgument<FileArgument> _filename;    \/\/ file name, optional\n+  DCmdArgument<char*> _filename;    \/\/ file name, optional\n@@ -582,1 +582,1 @@\n-  DCmdArgument<FileArgument> _filename;\n+  DCmdArgument<char*> _filename;\n@@ -940,1 +940,1 @@\n-  DCmdArgument<FileArgument> _filepath;\n+  DCmdArgument<char*> _filepath;\n@@ -1003,1 +1003,1 @@\n-  DCmdArgument<FileArgument> _filename;\n+  DCmdArgument<char*> _filename;\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}