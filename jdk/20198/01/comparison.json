{"files":[{"patch":"@@ -1796,1 +1796,1 @@\n-  char fname[32];\n+  char fname[JVM_MAXPATHLEN];\n@@ -1798,2 +1798,2 @@\n-    jio_snprintf(fname, sizeof(fname), \"\/tmp\/perf-%d.map\", os::current_process_id());\n-    filename = fname;\n+    jio_snprintf(fname, sizeof(fname), \"\/tmp\/perf-%d.map\",\n+                 os::current_process_id());\n@@ -1801,1 +1801,8 @@\n-\n+  \/\/ If the filename contains %p, it will be replaced by the pid.\n+  else if (!Arguments::copy_expand_pid(filename, strlen(filename), fname,\n+                                       JVM_MAXPATHLEN)) {\n+    warning(\"Invalid file path name specified, fall back to default name\");\n+    jio_snprintf(fname, sizeof(fname), \"\/tmp\/perf-%d.map\",\n+                 os::current_process_id());\n+  }\n+  filename = fname;\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -519,0 +519,9 @@\n+  \/\/ If the filename contains %p, it will be replaced by the pid.\n+  char fname[JVM_MAXPATHLEN];\n+  if (!Arguments::copy_expand_pid(_filename.value(), strlen(_filename.value()),\n+                                  fname, JVM_MAXPATHLEN)) {\n+    stringStream msg;\n+    msg.print(\"Invalid file path name specified: %s\", _filename.value());\n+    THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), msg.base());\n+  }\n+\n@@ -523,1 +532,2 @@\n-  dumper.dump(_filename.value(), output(), (int) level, _overwrite.value(), (uint)parallel);\n+  dumper.dump(fname, output(), (int)level, _overwrite.value(),\n+              (uint)parallel);\n@@ -1042,0 +1052,1 @@\n+  char fname[JVM_MAXPATHLEN];\n@@ -1043,1 +1054,7 @@\n-    fileh =  java_lang_String::create_from_str(_filename.value(), CHECK);\n+    \/\/ If the filename contains %p, it will be replaced by the pid.\n+    const char *name = _filename.value();\n+    if (Arguments::copy_expand_pid(name, strlen(name), fname, JVM_MAXPATHLEN)) {\n+      fileh = java_lang_String::create_from_str(fname, CHECK);\n+    } else {\n+      warning(\"Invalid file path name specified, fall back to default name\");\n+    }\n@@ -1116,1 +1133,7 @@\n-  char* path = _filepath.value();\n+  char path[JVM_MAXPATHLEN];\n+  if (!Arguments::copy_expand_pid(_filepath.value(), strlen(_filepath.value()),\n+                                  path, JVM_MAXPATHLEN)) {\n+    stringStream msg;\n+    msg.print(\"Invalid file path name specified: %s\", _filepath.value());\n+    THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), msg.base());\n+  }\n@@ -1198,7 +1221,12 @@\n-  stringStream defaultname;\n-  const char* name = nullptr;\n-  if (_filename.is_set()) {\n-    name = _filename.value();\n-  } else {\n-    defaultname.print(\"vm_memory_map_%d.txt\", os::current_process_id());\n-    name = defaultname.base();\n+  const char *name = nullptr;\n+  char fname[JVM_MAXPATHLEN];\n+  if (!_filename.is_set()) {\n+    jio_snprintf(fname, sizeof(fname), \"vm_memory_map_%d.txt\",\n+                 os::current_process_id());\n+  } else if (!Arguments::copy_expand_pid(_filename.value(),\n+                                        strlen(_filename.value()), fname,\n+                                        JVM_MAXPATHLEN)) {\n+    \/\/ If the filename contains %p, it will be replaced by the pid.\n+    warning(\"Invalid file path name specified, fall back to default name.\");\n+    jio_snprintf(fname, sizeof(fname), \"vm_memory_map_%d.txt\",\n+                 os::current_process_id());\n@@ -1206,0 +1234,1 @@\n+  name = fname;\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":39,"deletions":10,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -193,0 +193,4 @@\n+        if (archiveFileName.contains(\"%p\")) {\n+            archiveFileName = archiveFileName.replace(\"%p\", \"%d\").formatted(pid);\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDumpBase.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,0 +90,7 @@\n+        \/\/ Test static dump with file name containing %p\n+        print2ln(test_count++ + \" Test static dump with given file name containing %p.\");\n+        app = createLingeredApp(\"-cp\", allJars);\n+        pid = app.getPid();\n+        test(\"%p.jsa\", pid, noBoot, EXPECT_PASS, STATIC_MESSAGES);\n+        app.stopApp();\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestStaticDump.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8334492\n+ * @summary Test to verify jcmd accepts %p in output filenames and substitutes for PID\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run main\/othervm TestJcmdPIDSubstitution\n+ *\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class TestJcmdPIDSubstitution {\n+\n+    private static final String FILENAME = \"myfile%p\";\n+\n+    public static void main(String[] args) throws Exception {\n+        verifyOutputFilenames(\"Thread.dump_to_file\", FILENAME);\n+        verifyOutputFilenames(\"GC.heap_dump\", FILENAME);\n+        verifyOutputFilenames(\"Compiler.perfmap\", FILENAME);\n+        verifyOutputFilenames(\"System.dump_map\", \"-F=%s\".formatted(FILENAME));\n+    }\n+\n+    private static void verifyOutputFilenames(String... args) throws Exception {\n+        long pid = ProcessTools.getProcessId();\n+        Path path;\n+        do {\n+            path = Paths.get(\"myfile%d\".formatted(pid));\n+        } while(Files.exists(path));\n+\n+        OutputAnalyzer output = JcmdBase.jcmd(args);\n+        output.shouldHaveExitValue(0);\n+        if (Files.exists(path)) {\n+            Files.delete(path);\n+        } else {\n+            throw new Exception(\"File %s was not created as expected for diagnostic cmd %s\".formatted(path, args[0]));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestJcmdPIDSubstitution.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"}]}