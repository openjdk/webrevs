{"files":[{"patch":"@@ -1793,9 +1793,0 @@\n-\n-  \/\/ Perf expects to find the map file at \/tmp\/perf-<pid>.map\n-  \/\/ if the file name is not specified.\n-  char fname[32];\n-  if (filename == nullptr) {\n-    jio_snprintf(fname, sizeof(fname), \"\/tmp\/perf-%d.map\", os::current_process_id());\n-    filename = fname;\n-  }\n-\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -83,0 +83,4 @@\n+#ifdef LINUX\n+#define DEFAULT_PERFMAP_FILENAME \"\/tmp\/perf-%p.map\"\n+#endif\n+\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -130,0 +130,8 @@\n+   } else if (strcmp(type, \"FILE\") == 0) {\n+      DCmdArgument<char*>* argument =\n+          new DCmdArgument<char*>(name, desc, \"FILE\", mandatory);\n+      if (isarg) {\n+        parser->add_dcmd_argument(argument);\n+      } else {\n+        parser->add_dcmd_option(argument);\n+      }\n","filename":"src\/hotspot\/share\/prims\/wbtestmethods\/parserTests.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -487,1 +487,1 @@\n-    CodeCache::write_perf_map(nullptr, tty);\n+    CodeCache::write_perf_map(DEFAULT_PERFMAP_FILENAME, tty);\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -192,3 +192,12 @@\n-    _value = REALLOC_C_HEAP_ARRAY(char, _value, len + 1, mtInternal);\n-    int n = os::snprintf(_value, len + 1, \"%.*s\", (int)len, str);\n-    assert((size_t)n <= len, \"Unexpected number of characters in string\");\n+    if (strcmp(type(), \"FILE\") == 0) {\n+      _value = REALLOC_C_HEAP_ARRAY(char, _value, JVM_MAXPATHLEN, mtInternal);\n+      if (!Arguments::copy_expand_pid(str, len, _value, JVM_MAXPATHLEN)) {\n+        stringStream error_msg;\n+        error_msg.print(\"File path invalid or too long: %s\", str);\n+        THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(), error_msg.base());\n+      }\n+    } else {\n+      _value = REALLOC_C_HEAP_ARRAY(char, _value, len + 1, mtInternal);\n+      int n = os::snprintf(_value, len + 1, \"%.*s\", (int)len, str);\n+      assert((size_t)n <= len, \"Unexpected number of characters in string\");\n+    }\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.cpp","additions":13,"deletions":4,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+#include \"runtime\/arguments.hpp\"\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -476,1 +476,1 @@\n-  _filename(\"filename\",\"Name of the dump file\", \"STRING\",true),\n+  _filename(\"filename\",\"Name of the dump file\", \"FILE\",true),\n@@ -855,2 +855,0 @@\n-#define DEFAULT_PERFMAP_FILENAME \"\/tmp\/perf-<pid>.map\"\n-\n@@ -859,1 +857,1 @@\n-  _filename(\"filename\", \"Name of the map file\", \"STRING\", false, DEFAULT_PERFMAP_FILENAME)\n+  _filename(\"filename\", \"Name of the map file\", \"FILE\", false, DEFAULT_PERFMAP_FILENAME)\n@@ -865,4 +863,1 @@\n-  \/\/ The check for _filename.is_set() is because we don't want to use\n-  \/\/ DEFAULT_PERFMAP_FILENAME, since it is meant as a description\n-  \/\/ of the default, not the actual default.\n-  CodeCache::write_perf_map(_filename.is_set() ? _filename.value() : nullptr, output());\n+  CodeCache::write_perf_map(_filename.value(), output());\n@@ -1000,1 +995,1 @@\n-#define DEFAULT_CDS_ARCHIVE_FILENAME \"java_pid<pid>_<subcmd>.jsa\"\n+#define DEFAULT_CDS_ARCHIVE_FILENAME \"java_pid%p_<subcmd>.jsa\"\n@@ -1005,1 +1000,1 @@\n-  _filename(\"filename\", \"Name of shared archive to be dumped\", \"STRING\", false,\n+  _filename(\"filename\", \"Name of shared archive to be dumped\", \"FILE\", false,\n@@ -1043,1 +1038,1 @@\n-    fileh =  java_lang_String::create_from_str(_filename.value(), CHECK);\n+    fileh = java_lang_String::create_from_str(file, CHECK);\n@@ -1108,1 +1103,1 @@\n-  _filepath(\"filepath\", \"The file path to the output file\", \"STRING\", true) {\n+  _filepath(\"filepath\", \"The file path to the output file\", \"FILE\", true) {\n@@ -1189,1 +1184,1 @@\n-static constexpr char default_filename[] = \"vm_memory_map_<pid>.txt\";\n+static constexpr char default_filename[] = \"vm_memory_map_%p.txt\";\n@@ -1193,1 +1188,1 @@\n-  _filename(\"-F\", \"file path\", \"STRING\", false, default_filename) {\n+  _filename(\"-F\", \"file path\", \"FILE\", false, default_filename) {\n@@ -1198,8 +1193,1 @@\n-  stringStream defaultname;\n-  const char* name = nullptr;\n-  if (_filename.is_set()) {\n-    name = _filename.value();\n-  } else {\n-    defaultname.print(\"vm_memory_map_%d.txt\", os::current_process_id());\n-    name = defaultname.base();\n-  }\n+  const char* name = _filename.value();\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":10,"deletions":22,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -193,0 +193,4 @@\n+        if (archiveFileName.contains(\"%p\")) {\n+            archiveFileName = archiveFileName.replace(\"%p\", \"%d\").formatted(pid);\n+        }\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestDumpBase.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -90,0 +90,7 @@\n+        \/\/ Test static dump with file name containing %p\n+        print2ln(test_count++ + \" Test static dump with given file name containing %p.\");\n+        app = createLingeredApp(\"-cp\", allJars);\n+        pid = app.getPid();\n+        test(\"%p.jsa\", pid, noBoot, EXPECT_PASS, STATIC_MESSAGES);\n+        app.stopApp();\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/jcmd\/JCmdTestStaticDump.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import jdk.test.lib.process.ProcessTools;\n@@ -52,0 +53,1 @@\n+        testFileName();\n@@ -162,0 +164,27 @@\n+    public void testFileName() throws Exception {\n+        \/\/ --- Testing options\n+        long pid = ProcessTools.getProcessId();\n+\n+        \/\/ Test pid gets injected into %p\n+        String name = \"name\";\n+        DiagnosticCommand arg = new DiagnosticCommand(name,\n+                \"desc\", DiagnosticArgumentType.FILE,\n+                false, null);\n+        DiagnosticCommand[] args = {arg};\n+        parse(name, \"file%d.txt\".formatted(pid), name + \"=file%p.txt\", args);\n+\n+        \/\/ Test custom file name with no %p\n+        parse(name, \"myFile.txt\", name + \"=myFile.txt\", args);\n+\n+        \/\/ --- Testing arguments\n+\n+        \/\/ Test pid gets injected into %p\n+        arg = new DiagnosticCommand(name, \"desc\", DiagnosticArgumentType.FILE, true,\n+                false, null);\n+        args = new DiagnosticCommand[]{arg};\n+        parse(name, \"file%d.txt\".formatted(pid), \"file%p.txt\", args);\n+\n+        \/\/ Test custom file name with no %p\n+        parse(name, \"myFile.txt\", \"myFile.txt\", args);\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/serviceability\/ParserTest.java","additions":30,"deletions":1,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8334492\n+ * @summary Test to verify jcmd accepts %p in output filenames and substitutes for PID\n+ * @library \/test\/lib\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @run driver TestJcmdPIDSubstitution\n+ *\n+ *\/\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+public class TestJcmdPIDSubstitution {\n+\n+    private static final String FILENAME = \"myfile%p\";\n+\n+    public static void main(String[] args) throws Exception {\n+        verifyOutputFilenames(\"Thread.dump_to_file\", FILENAME);\n+        verifyOutputFilenames(\"GC.heap_dump\", FILENAME);\n+        verifyOutputFilenames(\"Compiler.perfmap\", FILENAME);\n+        verifyOutputFilenames(\"System.dump_map\", \"-F=%s\".formatted(FILENAME));\n+    }\n+\n+    private static void verifyOutputFilenames(String... args) throws Exception {\n+        long pid = ProcessTools.getProcessId();\n+        String test_dir = System.getProperty(\"test.dir\", \".\");\n+        Path path = Paths.get(\"%s\/myfile%d\".formatted(test_dir, pid));\n+        OutputAnalyzer output = JcmdBase.jcmd(args);\n+        output.shouldHaveExitValue(0);\n+        if (Files.exists(path)) {\n+            Files.delete(path);\n+        } else {\n+            throw new Exception(\"File %s was not created as expected for diagnostic cmd %s\".formatted(path, args[0]));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/tools\/jcmd\/TestJcmdPIDSubstitution.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-        JLONG, BOOLEAN, STRING, NANOTIME, STRINGARRAY, MEMORYSIZE\n+        JLONG, BOOLEAN, STRING, NANOTIME, STRINGARRAY, MEMORYSIZE, FILE\n","filename":"test\/lib\/jdk\/test\/whitebox\/parser\/DiagnosticCommand.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}