{"files":[{"patch":"@@ -76,5 +76,4 @@\n-   if (strcmp(type, \"STRING\") == 0) {\n-     DCmdArgument<char*>* argument = new DCmdArgument<char*>(\n-     name, desc,\n-     \"STRING\", mandatory, default_value);\n-     if (isarg) {\n+  if (strcmp(type, \"STRING\") == 0) {\n+    DCmdArgument<char*>* argument = new DCmdArgument<char*>(\n+      name, desc, \"STRING\", mandatory, default_value);\n+    if (isarg) {\n@@ -82,1 +81,1 @@\n-     } else {\n+    } else {\n@@ -84,6 +83,5 @@\n-     }\n-   } else if (strcmp(type, \"NANOTIME\") == 0) {\n-     DCmdArgument<NanoTimeArgument>* argument = new DCmdArgument<NanoTimeArgument>(\n-     name, desc,\n-     \"NANOTIME\", mandatory, default_value);\n-     if (isarg) {\n+    }\n+  } else if (strcmp(type, \"NANOTIME\") == 0) {\n+    DCmdArgument<NanoTimeArgument>* argument = new DCmdArgument<NanoTimeArgument>(\n+      name, desc, \"NANOTIME\", mandatory, default_value);\n+    if (isarg) {\n@@ -91,1 +89,1 @@\n-     } else {\n+    } else {\n@@ -93,6 +91,5 @@\n-     }\n-   } else if (strcmp(type, \"JLONG\") == 0) {\n-     DCmdArgument<jlong>* argument = new DCmdArgument<jlong>(\n-     name, desc,\n-     \"JLONG\", mandatory, default_value);\n-     if (isarg) {\n+    }\n+  } else if (strcmp(type, \"JLONG\") == 0) {\n+    DCmdArgument<jlong>* argument = new DCmdArgument<jlong>(\n+      name, desc, \"JLONG\", mandatory, default_value);\n+    if (isarg) {\n@@ -100,1 +97,1 @@\n-     } else {\n+    } else {\n@@ -102,6 +99,5 @@\n-     }\n-   } else if (strcmp(type, \"BOOLEAN\") == 0) {\n-     DCmdArgument<bool>* argument = new DCmdArgument<bool>(\n-     name, desc,\n-     \"BOOLEAN\", mandatory, default_value);\n-     if (isarg) {\n+    }\n+  } else if (strcmp(type, \"BOOLEAN\") == 0) {\n+    DCmdArgument<bool>* argument = new DCmdArgument<bool>(\n+      name, desc, \"BOOLEAN\", mandatory, default_value);\n+    if (isarg) {\n@@ -109,1 +105,1 @@\n-     } else {\n+    } else {\n@@ -111,6 +107,5 @@\n-     }\n-   } else if (strcmp(type, \"MEMORYSIZE\") == 0) {\n-     DCmdArgument<MemorySizeArgument>* argument = new DCmdArgument<MemorySizeArgument>(\n-     name, desc,\n-     \"MEMORY SIZE\", mandatory, default_value);\n-     if (isarg) {\n+    }\n+  } else if (strcmp(type, \"MEMORYSIZE\") == 0) {\n+    DCmdArgument<MemorySizeArgument>* argument = new DCmdArgument<MemorySizeArgument>(\n+      name, desc, \"MEMORY SIZE\", mandatory, default_value);\n+    if (isarg) {\n@@ -118,1 +113,1 @@\n-     } else {\n+    } else {\n@@ -120,6 +115,5 @@\n-     }\n-   } else if (strcmp(type, \"STRINGARRAY\") == 0) {\n-     DCmdArgument<StringArrayArgument*>* argument = new DCmdArgument<StringArrayArgument*>(\n-     name, desc,\n-     \"STRING SET\", mandatory);\n-     if (isarg) {\n+    }\n+  } else if (strcmp(type, \"STRINGARRAY\") == 0) {\n+    DCmdArgument<StringArrayArgument*>* argument = new DCmdArgument<StringArrayArgument*>(\n+      name, desc, \"STRING SET\", mandatory);\n+    if (isarg) {\n@@ -127,1 +121,1 @@\n-     } else {\n+    } else {\n@@ -129,5 +123,5 @@\n-     }\n-   } else if (strcmp(type, \"FILE\") == 0) {\n-     DCmdArgument<FileArgument> *argument =\n-      new DCmdArgument<FileArgument>(name, desc, \"FILE\", mandatory);\n-     if (isarg) {\n+    }\n+  } else if (strcmp(type, \"FILE\") == 0) {\n+    DCmdArgument<FileArgument>* argument = new DCmdArgument<FileArgument>(\n+      name, desc, \"FILE\", mandatory);\n+    if (isarg) {\n@@ -135,1 +129,1 @@\n-     } else {\n+    } else {\n@@ -137,2 +131,2 @@\n-     }\n-   }\n+    }\n+  }\n","filename":"src\/hotspot\/share\/prims\/wbtestmethods\/parserTests.cpp","additions":43,"deletions":49,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-void GenDCmdArgument::to_string(FileArgument f, char *buf, size_t len) const {\n+void GenDCmdArgument::to_string(FileArgument f, char* buf, size_t len) const {\n@@ -358,4 +358,3 @@\n-template <>\n-void DCmdArgument<FileArgument>::parse_value(const char *str, size_t len,\n-                                                   TRAPS) {\n-  if (str == NULL) {\n+template <> void DCmdArgument<FileArgument>::destroy_value() {\n+  if (_value._name != nullptr) {\n+    FREE_C_HEAP_ARRAY(char, _value._name);\n@@ -363,0 +362,7 @@\n+  }\n+}\n+\n+template <> void DCmdArgument<FileArgument>::parse_value(const char *str,\n+                                            size_t len, TRAPS) {\n+  if (str == nullptr) {\n+    destroy_value();\n@@ -364,1 +370,1 @@\n-    _value._name = NEW_C_HEAP_ARRAY(char, JVM_MAXPATHLEN, mtInternal);\n+    _value._name = REALLOC_C_HEAP_ARRAY(char, _value._name, JVM_MAXPATHLEN, mtInternal);\n@@ -366,1 +372,2 @@\n-      fatal(\"Invalid file path: %s\", str);\n+      THROW_MSG(vmSymbols::java_lang_IllegalArgumentException(),\n+                err_msg(\"Invalid file path: %s\", str));\n@@ -372,1 +379,2 @@\n-  if (has_default() && _default_string != NULL) {\n+  _value._name = nullptr;\n+  if (has_default() && _default_string != nullptr) {\n@@ -374,9 +382,0 @@\n-  } else {\n-    _value._name = nullptr;\n-  }\n-}\n-\n-template <> void DCmdArgument<FileArgument>::destroy_value() {\n-  if (_value._name != nullptr) {\n-    FREE_C_HEAP_ARRAY(char, _value._name);\n-    _value._name = nullptr;\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.cpp","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-    char *_name;\n+    char* _name;\n@@ -113,1 +113,1 @@\n-  void to_string(FileArgument f, char *buf, size_t len) const;\n+  void to_string(FileArgument f, char* buf, size_t len) const;\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1195,1 +1195,1 @@\n-  const char *name = _filename.value()._name;\n+  const char* name = _filename.value()._name;\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}