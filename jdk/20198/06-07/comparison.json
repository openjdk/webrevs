{"files":[{"patch":"@@ -76,4 +76,5 @@\n-  if (strcmp(type, \"STRING\") == 0) {\n-    DCmdArgument<char*>* argument = new DCmdArgument<char*>(\n-      name, desc, \"STRING\", mandatory, default_value);\n-    if (isarg) {\n+   if (strcmp(type, \"STRING\") == 0) {\n+     DCmdArgument<char*>* argument = new DCmdArgument<char*>(\n+     name, desc,\n+     \"STRING\", mandatory, default_value);\n+     if (isarg) {\n@@ -81,1 +82,1 @@\n-    } else {\n+     } else {\n@@ -83,5 +84,6 @@\n-    }\n-  } else if (strcmp(type, \"NANOTIME\") == 0) {\n-    DCmdArgument<NanoTimeArgument>* argument = new DCmdArgument<NanoTimeArgument>(\n-      name, desc, \"NANOTIME\", mandatory, default_value);\n-    if (isarg) {\n+     }\n+   } else if (strcmp(type, \"NANOTIME\") == 0) {\n+     DCmdArgument<NanoTimeArgument>* argument = new DCmdArgument<NanoTimeArgument>(\n+     name, desc,\n+     \"NANOTIME\", mandatory, default_value);\n+     if (isarg) {\n@@ -89,1 +91,1 @@\n-    } else {\n+     } else {\n@@ -91,5 +93,6 @@\n-    }\n-  } else if (strcmp(type, \"JLONG\") == 0) {\n-    DCmdArgument<jlong>* argument = new DCmdArgument<jlong>(\n-      name, desc, \"JLONG\", mandatory, default_value);\n-    if (isarg) {\n+     }\n+   } else if (strcmp(type, \"JLONG\") == 0) {\n+     DCmdArgument<jlong>* argument = new DCmdArgument<jlong>(\n+     name, desc,\n+     \"JLONG\", mandatory, default_value);\n+     if (isarg) {\n@@ -97,1 +100,1 @@\n-    } else {\n+     } else {\n@@ -99,5 +102,6 @@\n-    }\n-  } else if (strcmp(type, \"BOOLEAN\") == 0) {\n-    DCmdArgument<bool>* argument = new DCmdArgument<bool>(\n-      name, desc, \"BOOLEAN\", mandatory, default_value);\n-    if (isarg) {\n+     }\n+   } else if (strcmp(type, \"BOOLEAN\") == 0) {\n+     DCmdArgument<bool>* argument = new DCmdArgument<bool>(\n+     name, desc,\n+     \"BOOLEAN\", mandatory, default_value);\n+     if (isarg) {\n@@ -105,1 +109,1 @@\n-    } else {\n+     } else {\n@@ -107,5 +111,6 @@\n-    }\n-  } else if (strcmp(type, \"MEMORYSIZE\") == 0) {\n-    DCmdArgument<MemorySizeArgument>* argument = new DCmdArgument<MemorySizeArgument>(\n-      name, desc, \"MEMORY SIZE\", mandatory, default_value);\n-    if (isarg) {\n+     }\n+   } else if (strcmp(type, \"MEMORYSIZE\") == 0) {\n+     DCmdArgument<MemorySizeArgument>* argument = new DCmdArgument<MemorySizeArgument>(\n+     name, desc,\n+     \"MEMORY SIZE\", mandatory, default_value);\n+     if (isarg) {\n@@ -113,1 +118,1 @@\n-    } else {\n+     } else {\n@@ -115,5 +120,6 @@\n-    }\n-  } else if (strcmp(type, \"STRINGARRAY\") == 0) {\n-    DCmdArgument<StringArrayArgument*>* argument = new DCmdArgument<StringArrayArgument*>(\n-      name, desc, \"STRING SET\", mandatory);\n-    if (isarg) {\n+     }\n+   } else if (strcmp(type, \"STRINGARRAY\") == 0) {\n+     DCmdArgument<StringArrayArgument*>* argument = new DCmdArgument<StringArrayArgument*>(\n+     name, desc,\n+     \"STRING SET\", mandatory);\n+     if (isarg) {\n@@ -121,1 +127,1 @@\n-    } else {\n+     } else {\n@@ -123,10 +129,10 @@\n-    }\n-  } else if (strcmp(type, \"FILE\") == 0) {\n-    DCmdArgument<FileArgument>* argument = new DCmdArgument<FileArgument>(\n-      name, desc, \"FILE\", mandatory);\n-    if (isarg) {\n-      parser->add_dcmd_argument(argument);\n-    } else {\n-      parser->add_dcmd_option(argument);\n-    }\n-  }\n+     }\n+   } else if (strcmp(type, \"FILE\") == 0) {\n+      DCmdArgument<FileArgument>* argument =\n+          new DCmdArgument<FileArgument>(name, desc, \"FILE\", mandatory);\n+      if (isarg) {\n+        parser->add_dcmd_argument(argument);\n+      } else {\n+        parser->add_dcmd_option(argument);\n+      }\n+   }\n","filename":"src\/hotspot\/share\/prims\/wbtestmethods\/parserTests.cpp","additions":51,"deletions":45,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  jio_snprintf(buf, len, \"%s\", (f._name != nullptr) ? f._name : \"\");\n+  jio_snprintf(buf, len, \"%s\", (f.get() != nullptr) ? f.get() : \"\");\n@@ -358,6 +358,1 @@\n-template <> void DCmdArgument<FileArgument>::destroy_value() {\n-  if (_value._name != nullptr) {\n-    FREE_C_HEAP_ARRAY(char, _value._name);\n-    _value._name = nullptr;\n-  }\n-}\n+template <> void DCmdArgument<FileArgument>::destroy_value() {}\n@@ -367,5 +362,2 @@\n-  if (str == nullptr) {\n-    destroy_value();\n-  } else {\n-    _value._name = REALLOC_C_HEAP_ARRAY(char, _value._name, JVM_MAXPATHLEN, mtInternal);\n-    if (!Arguments::copy_expand_pid(str, len, _value._name, JVM_MAXPATHLEN)) {\n+  if (str != nullptr) {\n+    if (!_value.parse_value(str, len)) {\n@@ -380,1 +372,0 @@\n-  _value._name = nullptr;\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.cpp","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -64,0 +64,3 @@\n+  private:\n+    char _name[1024];\n+\n@@ -65,1 +68,6 @@\n-    char* _name;\n+    const char* get() const { return _name; }\n+\n+    \/\/ returns true if parsing succeeded, false if not.\n+    bool parse_value(const char* s, size_t len) {\n+      return Arguments::copy_expand_pid(s, len, _name, sizeof(_name));\n+    }\n","filename":"src\/hotspot\/share\/services\/diagnosticArgument.hpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-  dumper.dump(_filename.value()._name, output(), (int)level, _overwrite.value(),\n+  dumper.dump(_filename.value().get(), output(), (int)level, _overwrite.value(),\n@@ -866,1 +866,1 @@\n-  CodeCache::write_perf_map(_filename.value()._name);\n+  CodeCache::write_perf_map(_filename.value().get());\n@@ -1017,1 +1017,2 @@\n-  const char* file = _filename.is_set() ? _filename.value()._name : nullptr;\n+  FileArgument file_arg = _filename.value();\n+  const char *file = _filename.is_set() ? file_arg.get() : nullptr;\n@@ -1116,1 +1117,1 @@\n-  dumpToFile(name, vmSymbols::string_bool_byte_array_signature(), _filepath.value()._name, overwrite, CHECK);\n+  dumpToFile(name, vmSymbols::string_bool_byte_array_signature(), _filepath.value().get(), overwrite, CHECK);\n@@ -1195,1 +1196,2 @@\n-  const char* name = _filename.value()._name;\n+  FileArgument file_arg = _filename.value();\n+  const char *name = file_arg.get();\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"}]}