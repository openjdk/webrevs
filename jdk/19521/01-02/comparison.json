{"files":[{"patch":"@@ -28,0 +28,1 @@\n+import java.awt.Dimension;\n@@ -34,0 +35,1 @@\n+import java.awt.Point;\n@@ -41,0 +43,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -53,6 +56,10 @@\n-    private static Component[] components;\n-    private static boolean componentHidden = false;\n-    private static boolean componentShown = false;\n-    private static boolean componentMoved = false;\n-    private static boolean componentResized = false;\n-    private static ArrayList<ComponentEvent> events =\n+    private static int DELAY = 500;\n+    private static Robot robot;\n+    private volatile static Component[] components;\n+    private volatile static boolean componentHidden = false;\n+    private volatile static boolean componentShown = false;\n+    private volatile static boolean componentMoved = false;\n+    private volatile static boolean componentResized = false;\n+    private volatile static Point compAt;\n+    private volatile static Dimension compSize;\n+    private volatile static ArrayList<ComponentEvent> events =\n@@ -129,2 +136,1 @@\n-            Robot robot = new Robot();\n-            robot.setAutoDelay(100);\n+            robot = new Robot();\n@@ -134,0 +140,1 @@\n+            robot.delay(DELAY);\n@@ -135,0 +142,1 @@\n+            doTest();\n@@ -136,200 +144,5 @@\n-            robot.mouseMove(\n-                components[0].getLocationOnScreen().x\n-                    + components[0].getSize().width \/ 2,\n-                components[0].getLocationOnScreen().y\n-                    + components[0].getSize().height \/ 2);\n-            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-\n-            \/\/ Hide all components and check if the ComponentEvent is triggered\n-            for (int i = 0; i < components.length; i++) {\n-                Component currentComponent = components[i];\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setVisible(false);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (!componentHidden) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentHidden not triggered for \"\n-                            + currentComponent.getClass());\n-                }\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setVisible(false);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (componentHidden) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentHidden triggered when setVisible(false) \"\n-                            + \"called for a hidden \"\n-                            + components[i].getClass());\n-                }\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setVisible(true);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (!componentShown) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentShown not triggered for \"\n-                            + components[i].getClass());\n-                }\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setVisible(true);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (componentShown) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentShown triggered when setVisible(true) \"\n-                            + \"called for a shown \" + components[i].getClass());\n-                }\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setLocation(\n-                        currentComponent.getLocation().x + 1,\n-                        currentComponent.getLocation().y);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (!componentMoved) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentMoved not triggered for \"\n-                            + components[i].getClass());\n-                }\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setSize(\n-                        currentComponent.getSize().width + 1,\n-                        currentComponent.getSize().height);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (!componentResized) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentResized not triggered for \"\n-                            + components[i].getClass());\n-                }\n-\n-                \/\/ Disable the components and do the same set of operations\n-\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setEnabled(false);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-                robot.waitForIdle();\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setVisible(false);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (!componentHidden) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentHidden not triggered for disabled \"\n-                            + components[i].getClass());\n-                }\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setVisible(false);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (componentHidden) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentHidden triggered when setVisible(false) \"\n-                            + \"called for a hidden disabled \"\n-                            + components[i].getClass());\n-                }\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setVisible(true);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (!componentShown) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentShown not triggered for disabled \"\n-                            + components[i].getClass());\n-                }\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setVisible(true);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (componentShown) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentShown triggered when setVisible(true) \"\n-                            + \"called for a shown disabled \"\n-                            + components[i].getClass());\n-                }\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setLocation(\n-                        currentComponent.getLocation().x - 1,\n-                        currentComponent.getLocation().y);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (!componentMoved) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentMoved not triggered for disabled \"\n-                            + components[i].getClass());\n-                }\n-\n-                resetValues();\n-                EventQueue.invokeAndWait(() -> {\n-                    currentComponent.setSize(\n-                        currentComponent.getSize().width - 1,\n-                        currentComponent.getSize().height);\n-                    frame.invalidate();\n-                    frame.validate();\n-                });\n-\n-                robot.waitForIdle();\n-                if (!componentResized) {\n-                    throw new RuntimeException(\n-                        \"FAIL: ComponentResized not triggered for disabled \"\n-                            + components[i].getClass());\n-                }\n-            }\n+            System.out.println(\"Test PASSED\");\n+        } finally {\n+            EventQueue.invokeAndWait(ComponentEventTest::disposeFrame);\n+        }\n+    }\n@@ -337,4 +150,2 @@\n-            EventQueue.invokeAndWait(() -> {\n-                frame.dispose();\n-                frame.setVisible(true);\n-            });\n+    private static void doTest()\n+        throws InvocationTargetException, InterruptedException {\n@@ -342,1 +153,4 @@\n-            robot.waitForIdle();\n+        EventQueue.invokeAndWait(() -> {\n+            compAt = components[0].getLocationOnScreen();\n+            compSize = components[0].getSize();\n+        });\n@@ -344,4 +158,2 @@\n-            resetValues();\n-            EventQueue.invokeAndWait(() -> {\n-                frame.setExtendedState(Frame.ICONIFIED);\n-            });\n+        robot.mouseMove(compAt.x + compSize.width \/ 2,\n+            compAt.y + compSize.height \/ 2);\n@@ -349,10 +161,2 @@\n-            robot.waitForIdle();\n-            if (componentShown || componentHidden || componentMoved\n-                || componentResized) {\n-                System.err.print(\"Events triggered are: \");\n-                for (int j = 0; j < events.size();\n-                    System.err.print(events.get(j) + \"; \"), j++);\n-                System.err.println(\"\");\n-                throw new RuntimeException(\n-                    \"FAIL: ComponentEvent triggered when frame is iconified\");\n-            }\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n@@ -360,4 +164,4 @@\n-            resetValues();\n-            EventQueue.invokeAndWait(() -> {\n-                frame.setExtendedState(Frame.NORMAL);\n-            });\n+     \/\/ Hide all components and check if the ComponentEvent is triggered\n+        for (int i = 0; i < components.length; i++) {\n+            doTestForComponent(i);\n+        }\n@@ -365,9 +169,22 @@\n-            robot.waitForIdle();\n-            if (componentShown || componentHidden) {\n-                System.err.print(\"Events triggered are: \");\n-                for (int j = 0; j < events.size();\n-                    System.err.print(events.get(j) + \"; \"), j++);\n-                System.err.println(\"\");\n-                throw new RuntimeException(\n-                    \"FAIL: ComponentEvent triggered when frame is set to normal state\");\n-            }\n+        EventQueue.invokeAndWait(() -> {\n+            frame.dispose();\n+            frame.setVisible(true);\n+        });\n+\n+        robot.delay(DELAY);\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            frame.setExtendedState(Frame.ICONIFIED);\n+        });\n+\n+        robot.delay(DELAY);\n+        if (componentShown || componentHidden || componentMoved\n+            || componentResized) {\n+            System.err.print(\"Events triggered are: \");\n+            for (int j = 0; j < events.size();\n+                System.err.print(events.get(j) + \"; \"), j++);\n+            System.err.println(\"\");\n+            throw new RuntimeException(\n+                \"FAIL: ComponentEvent triggered when frame is iconified\");\n+        }\n@@ -375,3 +192,131 @@\n-            System.out.println(\"Test PASSED\");\n-        } finally {\n-            EventQueue.invokeAndWait(ComponentEventTest::disposeFrame);\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            frame.setExtendedState(Frame.NORMAL);\n+        });\n+\n+        robot.delay(DELAY);\n+        if (componentShown || componentHidden) {\n+            System.err.print(\"Events triggered are: \");\n+            for (int j = 0; j < events.size();\n+                System.err.print(events.get(j) + \"; \"), j++);\n+            System.err.println(\"\");\n+            throw new RuntimeException(\n+                \"FAIL: ComponentEvent triggered when frame is set to normal state\");\n+        }\n+    }\n+\n+    private static void doTestForComponent(int i)\n+        throws InvocationTargetException, InterruptedException {\n+        Component currentComponent = components[i];\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setVisible(false);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (!componentHidden) {\n+            throw new RuntimeException(\n+                \"FAIL: ComponentHidden not triggered for \"\n+                    + currentComponent.getClass());\n+        }\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setVisible(false);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (componentHidden) {\n+            throw new RuntimeException(\n+                \"FAIL: ComponentHidden triggered when setVisible(false) \"\n+                    + \"called for a hidden \" + components[i].getClass());\n+        }\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setVisible(true);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (!componentShown) {\n+            throw new RuntimeException(\"FAIL: ComponentShown not triggered for \"\n+                + components[i].getClass());\n+        }\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setVisible(true);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (componentShown) {\n+            throw new RuntimeException(\n+                \"FAIL: ComponentShown triggered when setVisible(true) \"\n+                    + \"called for a shown \" + components[i].getClass());\n+        }\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setLocation(currentComponent.getLocation().x + 1,\n+                currentComponent.getLocation().y);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (!componentMoved) {\n+            throw new RuntimeException(\"FAIL: ComponentMoved not triggered for \"\n+                + components[i].getClass());\n+        }\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setSize(currentComponent.getSize().width + 1,\n+                currentComponent.getSize().height);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (!componentResized) {\n+            throw new RuntimeException(\n+                \"FAIL: ComponentResized not triggered for \"\n+                    + components[i].getClass());\n+        }\n+\n+        \/\/ Disable the components and do the same set of operations\n+\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setEnabled(false);\n+            resetFrame();\n+        });\n+        robot.delay(DELAY);\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setVisible(false);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (!componentHidden) {\n+            throw new RuntimeException(\n+                \"FAIL: ComponentHidden not triggered for disabled \"\n+                    + components[i].getClass());\n+        }\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setVisible(false);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (componentHidden) {\n+            throw new RuntimeException(\n+                \"FAIL: ComponentHidden triggered when setVisible(false) \"\n+                    + \"called for a hidden disabled \"\n+                    + components[i].getClass());\n@@ -379,0 +324,61 @@\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setVisible(true);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (!componentShown) {\n+            throw new RuntimeException(\n+                \"FAIL: ComponentShown not triggered for disabled \"\n+                    + components[i].getClass());\n+        }\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setVisible(true);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (componentShown) {\n+            throw new RuntimeException(\n+                \"FAIL: ComponentShown triggered when setVisible(true) \"\n+                    + \"called for a shown disabled \"\n+                    + components[i].getClass());\n+        }\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setLocation(currentComponent.getLocation().x - 1,\n+                currentComponent.getLocation().y);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (!componentMoved) {\n+            throw new RuntimeException(\n+                \"FAIL: ComponentMoved not triggered for disabled \"\n+                    + components[i].getClass());\n+        }\n+\n+        resetValues();\n+        EventQueue.invokeAndWait(() -> {\n+            currentComponent.setSize(currentComponent.getSize().width - 1,\n+                currentComponent.getSize().height);\n+            resetFrame();\n+        });\n+\n+        robot.delay(DELAY);\n+        if (!componentResized) {\n+            throw new RuntimeException(\n+                \"FAIL: ComponentResized not triggered for disabled \"\n+                    + components[i].getClass());\n+        }\n+\n+    }\n+\n+    private static void resetFrame() {\n+        frame.invalidate();\n+        frame.validate();\n","filename":"test\/jdk\/java\/awt\/event\/ComponentEvent\/ComponentEventTest.java","additions":249,"deletions":243,"binary":false,"changes":492,"status":"modified"}]}