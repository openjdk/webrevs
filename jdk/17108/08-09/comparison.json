{"files":[{"patch":"@@ -28,3 +28,0 @@\n-import jdk.internal.vm.annotation.DontInline;\n-import jdk.internal.vm.annotation.ForceInline;\n-import jdk.internal.vm.annotation.Hidden;\n@@ -40,1 +37,0 @@\n-import java.lang.classfile.constantpool.FieldRefEntry;\n@@ -74,5 +70,5 @@\n-    private static final ClassDesc CD_DMH     = ClassDesc.ofInternalName(\"java\/lang\/invoke\/DirectMethodHandle\");\n-    private static final ClassDesc CD_MHI     = ClassDesc.ofInternalName(\"java\/lang\/invoke\/MethodHandleImpl\");\n-    private static final ClassDesc CD_LF      = ClassDesc.ofInternalName(\"java\/lang\/invoke\/LambdaForm\");\n-    private static final ClassDesc CD_LFN     = ClassDesc.ofInternalName(\"java\/lang\/invoke\/LambdaForm$Name\");\n-    private static final ClassDesc CD_OBJARY  = CD_Object.arrayType();\n+    private static final ClassDesc CD_DMH     = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/DirectMethodHandle;\");\n+    private static final ClassDesc CD_MHI     = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/MethodHandleImpl;\");\n+    private static final ClassDesc CD_LF      = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/LambdaForm;\");\n+    private static final ClassDesc CD_LFN     = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/LambdaForm$Name;\");\n+    private static final ClassDesc CD_OBJARY  = ClassDesc.ofDescriptor(\"[Ljava\/lang\/Object;\");\n@@ -80,1 +76,1 @@\n-    private static final ClassDesc CD_LOOP_CLAUSES = ClassDesc.ofInternalName(\"java\/lang\/invoke\/MethodHandleImpl$LoopClauses\");\n+    private static final ClassDesc CD_LOOP_CLAUSES = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/MethodHandleImpl$LoopClauses;\");\n@@ -82,1 +78,1 @@\n-    private static final ClassDesc CD_MHARY2       = CD_MethodHandle.arrayType(2);\n+    private static final ClassDesc CD_MHARY2       = ClassDesc.ofDescriptor(\"[[Ljava\/lang\/invoke\/MethodHandle;\");\n@@ -92,2 +88,0 @@\n-    private static final FieldRefEntry MRE_LF_names = CP.fieldRefEntry(CD_LF, \"names\", CD_LFN);\n-    private static final FieldRefEntry MRE_MethodHandle_form = CP.fieldRefEntry(CD_MethodHandle, \"form\", CD_LF);\n@@ -96,1 +90,0 @@\n-    private static final MethodRefEntry MRE_MHI_assertSame = CP.methodRefEntry(CD_MHI, \"assertSame\", MethodTypeDesc.of(CD_void, CD_Object, CD_Object));\n@@ -99,1 +92,0 @@\n-    private static final MethodRefEntry MRE_LF_interpretWithArguments = CP.methodRefEntry(CD_LF, \"interpretWithArguments\", MethodTypeDesc.of(CD_Object, CD_Object.arrayType()));\n@@ -555,1 +547,1 @@\n-           .invokestatic(MRE_MHI_assertSame);\n+           .invokestatic(CD_MHI, \"assertSame\", MethodTypeDesc.of(CD_void, CD_Object, CD_Object));\n@@ -559,3 +551,5 @@\n-    private static Annotation annotation(Class<?> cls) {\n-        return Annotation.of(classDesc(cls));\n-    }\n+    static final Annotation DONTINLINE      = Annotation.of(ClassDesc.ofDescriptor(\"Ljdk\/internal\/vm\/annotation\/DontInline;\"));\n+    static final Annotation FORCEINLINE     = Annotation.of(ClassDesc.ofDescriptor(\"Ljdk\/internal\/vm\/annotation\/ForceInline;\"));\n+    static final Annotation HIDDEN          = Annotation.of(ClassDesc.ofDescriptor(\"Ljdk\/internal\/vm\/annotation\/Hidden;\"));\n+    static final Annotation INJECTEDPROFILE = Annotation.of(ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/InjectedProfile;\"));\n+    static final Annotation LF_COMPILED     = Annotation.of(ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/LambdaForm$Compiled;\"));\n@@ -563,5 +557,0 @@\n-    static final Annotation DONTINLINE      = annotation(DontInline.class);\n-    static final Annotation FORCEINLINE     = annotation(ForceInline.class);\n-    static final Annotation HIDDEN          = annotation(Hidden.class);\n-    static final Annotation INJECTEDPROFILE = annotation(InjectedProfile.class);\n-    static final Annotation LF_COMPILED     = annotation(LambdaForm.Compiled.class);\n@@ -754,2 +743,2 @@\n-            cob.getfield(MRE_MethodHandle_form)\n-               .getfield(MRE_LF_names);\n+            cob.getfield(CD_MethodHandle, \"form\", CD_LF)\n+               .getfield(CD_LF, \"names\", CD_LFN);\n@@ -1599,1 +1588,1 @@\n-                                cob.getfield(MRE_MethodHandle_form);\n+                                cob.getfield(CD_MethodHandle, \"form\", CD_LF);\n@@ -1601,1 +1590,1 @@\n-                                cob.invokevirtual(MRE_LF_interpretWithArguments);\n+                                cob.invokevirtual(CD_LF, \"interpretWithArguments\", MethodTypeDesc.of(CD_Object, CD_OBJARY));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":17,"deletions":28,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -1246,8 +1246,8 @@\n-            INT_ARRAY_TYPE = referenceType(CD_int.arrayType()),\n-            BOOLEAN_ARRAY_TYPE = referenceType(CD_boolean.arrayType()),\n-            BYTE_ARRAY_TYPE = referenceType(CD_byte.arrayType()),\n-            CHAR_ARRAY_TYPE = referenceType(CD_char.arrayType()),\n-            SHORT_ARRAY_TYPE = referenceType(CD_short.arrayType()),\n-            LONG_ARRAY_TYPE = referenceType(CD_long.arrayType()),\n-            DOUBLE_ARRAY_TYPE = referenceType(CD_double.arrayType()),\n-            FLOAT_ARRAY_TYPE = referenceType(CD_float.arrayType()),\n+            INT_ARRAY_TYPE = referenceType(ClassDesc.ofDescriptor(\"[I\")),\n+            BOOLEAN_ARRAY_TYPE = referenceType(ClassDesc.ofDescriptor(\"[Z\")),\n+            BYTE_ARRAY_TYPE = referenceType(ClassDesc.ofDescriptor(\"[B\")),\n+            CHAR_ARRAY_TYPE = referenceType(ClassDesc.ofDescriptor(\"[C\")),\n+            SHORT_ARRAY_TYPE = referenceType(ClassDesc.ofDescriptor(\"[S\")),\n+            LONG_ARRAY_TYPE = referenceType(ClassDesc.ofDescriptor(\"[J\")),\n+            DOUBLE_ARRAY_TYPE = referenceType(ClassDesc.ofDescriptor(\"[D\")),\n+            FLOAT_ARRAY_TYPE = referenceType(ClassDesc.ofDescriptor(\"[F\")),\n@@ -1318,2 +1318,2 @@\n-        private static final ClassDesc CD_Cloneable = ClassDesc.of(\"java.lang.Cloneable\");\n-        private static final ClassDesc CD_Serializable = ClassDesc.of(\"java.io.Serializable\");\n+        private static final ClassDesc CD_Cloneable = ClassDesc.ofDescriptor(\"Ljava\/lang\/Cloneable;\");\n+        private static final ClassDesc CD_Serializable = ClassDesc.ofDescriptor(\"Ljava\/io\/Serializable;\");\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}