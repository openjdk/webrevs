{"files":[{"patch":"@@ -44,0 +44,2 @@\n+import jdk.internal.constant.MethodTypeDescImpl;\n+import jdk.internal.constant.ReferenceClassDescImpl;\n@@ -47,0 +49,1 @@\n+import sun.invoke.util.Wrapper;\n@@ -64,2 +67,2 @@\n-    private static final ClassDesc CD_LambdaForm = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/LambdaForm;\");\n-    private static final ClassDesc CD_BoundMethodHandle = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/BoundMethodHandle;\");\n+    private static final ClassDesc CD_LambdaForm = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/invoke\/LambdaForm;\");\n+    private static final ClassDesc CD_BoundMethodHandle = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/invoke\/BoundMethodHandle;\");\n@@ -584,1 +587,1 @@\n-        private final MethodTypeDesc MTD_SPECIES_DATA = MethodTypeDesc.of(CD_SPECIES_DATA);\n+        private final MethodTypeDesc MTD_SPECIES_DATA = MethodTypeDescImpl.ofValidated(CD_SPECIES_DATA);\n@@ -606,1 +609,1 @@\n-        private static final MethodTypeDesc MTD_TRANFORM_HELPER = MethodTypeDesc.of(CD_MethodHandle, CD_int);\n+        private static final MethodTypeDesc MTD_TRANFORM_HELPER = MethodTypeDescImpl.ofValidated(CD_MethodHandle, CD_int);\n@@ -948,1 +951,2 @@\n-        return cls == Object.class ? CD_Object\n+        return cls.isPrimitive() ? Wrapper.forPrimitiveType(cls).classDescriptor()\n+             : cls == Object.class ? CD_Object\n@@ -952,1 +956,1 @@\n-             : ClassDesc.ofDescriptor(cls.descriptorString());\n+             : ReferenceClassDescImpl.ofValidated(cls.descriptorString());\n@@ -956,1 +960,5 @@\n-        return MethodTypeDesc.ofDescriptor(mt.descriptorString());\n+        var params = new ClassDesc[mt.parameterCount()];\n+        for (int i = 0; i < params.length; i++) {\n+            params[i] = classDesc(mt.parameterType(i));\n+        }\n+        return MethodTypeDescImpl.ofValidated(classDesc(mt.returnType()), params);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ClassSpecializer.java","additions":15,"deletions":7,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -55,0 +55,3 @@\n+import jdk.internal.constant.MethodTypeDescImpl;\n+import jdk.internal.constant.ReferenceClassDescImpl;\n+import sun.invoke.util.Wrapper;\n@@ -66,7 +69,7 @@\n-    private static final ClassDesc CD_SERIALIZED_LAMBDA = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/SerializedLambda;\");\n-    private static final ClassDesc CD_NOT_SERIALIZABLE_EXCEPTION = ClassDesc.ofDescriptor(\"Ljava\/io\/NotSerializableException;\");\n-    private static final ClassDesc CD_OBJECTOUTPUTSTREAM = ClassDesc.ofDescriptor(\"Ljava\/io\/ObjectOutputStream;\");\n-    private static final ClassDesc CD_OBJECTINPUTSTREAM = ClassDesc.ofDescriptor(\"Ljava\/io\/ObjectInputStream;\");\n-    private static final MethodTypeDesc MTD_METHOD_WRITE_REPLACE = MethodTypeDesc.of(CD_Object);\n-    private static final MethodTypeDesc MTD_METHOD_WRITE_OBJECT = MethodTypeDesc.of(CD_void, CD_OBJECTOUTPUTSTREAM);\n-    private static final MethodTypeDesc MTD_METHOD_READ_OBJECT = MethodTypeDesc.of(CD_void, CD_OBJECTINPUTSTREAM);\n+    private static final ClassDesc CD_SERIALIZED_LAMBDA = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/invoke\/SerializedLambda;\");\n+    private static final ClassDesc CD_NOT_SERIALIZABLE_EXCEPTION = ReferenceClassDescImpl.ofValidated(\"Ljava\/io\/NotSerializableException;\");\n+    private static final ClassDesc CD_OBJECTOUTPUTSTREAM = ReferenceClassDescImpl.ofValidated(\"Ljava\/io\/ObjectOutputStream;\");\n+    private static final ClassDesc CD_OBJECTINPUTSTREAM = ReferenceClassDescImpl.ofValidated(\"Ljava\/io\/ObjectInputStream;\");\n+    private static final MethodTypeDesc MTD_METHOD_WRITE_REPLACE = MethodTypeDescImpl.ofValidated(CD_Object);\n+    private static final MethodTypeDesc MTD_METHOD_WRITE_OBJECT = MethodTypeDescImpl.ofValidated(CD_void, CD_OBJECTOUTPUTSTREAM);\n+    private static final MethodTypeDesc MTD_METHOD_READ_OBJECT = MethodTypeDescImpl.ofValidated(CD_void, CD_OBJECTINPUTSTREAM);\n@@ -78,2 +81,2 @@\n-    private static final MethodTypeDesc MTD_CTOR_SERIALIZED_LAMBDA = MethodTypeDesc.of(CD_void,\n-            CD_Class, CD_String, CD_String, CD_String, CD_int, CD_String, CD_String, CD_String, CD_String, CD_Object.arrayType());\n+    private static final MethodTypeDesc MTD_CTOR_SERIALIZED_LAMBDA = MethodTypeDescImpl.ofValidated(CD_void,\n+            CD_Class, CD_String, CD_String, CD_String, CD_int, CD_String, CD_String, CD_String, CD_String, ReferenceClassDescImpl.ofValidated(\"[Ljava\/lang\/Object;\"));\n@@ -81,1 +84,1 @@\n-    private static final MethodTypeDesc MTD_CTOR_NOT_SERIALIZABLE_EXCEPTION = MethodTypeDesc.of(CD_void, CD_String);\n+    private static final MethodTypeDesc MTD_CTOR_NOT_SERIALIZABLE_EXCEPTION = MethodTypeDescImpl.ofValidated(CD_void, CD_String);\n@@ -563,2 +566,2 @@\n-        return cls.isHidden() ? ClassDesc.ofInternalName(cls.getName().replace('.', '\/'))\n-                              : classDesc(cls);\n+        return cls.isHidden() ? ReferenceClassDescImpl.ofValidatedBinaryName(cls.getName())\n+                              : ReferenceClassDescImpl.ofValidated(cls.descriptorString());\n@@ -568,1 +571,2 @@\n-        return ClassDesc.ofDescriptor(cls.descriptorString());\n+        return cls.isPrimitive() ? Wrapper.forPrimitiveType(cls).classDescriptor()\n+                                 : ReferenceClassDescImpl.ofValidated(cls.descriptorString());\n@@ -572,1 +576,5 @@\n-        return MethodTypeDesc.ofDescriptor(mt.descriptorString());\n+        var params = new ClassDesc[mt.parameterCount()];\n+        for (int i = 0; i < params.length; i++) {\n+            params[i] = classDesc(mt.parameterType(i));\n+        }\n+        return MethodTypeDescImpl.ofValidated(classDesc(mt.returnType()), params);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":22,"deletions":14,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -54,0 +54,2 @@\n+import jdk.internal.constant.MethodTypeDescImpl;\n+import jdk.internal.constant.ReferenceClassDescImpl;\n@@ -70,10 +72,9 @@\n-    private static final ClassDesc CD_DMH     = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/DirectMethodHandle;\");\n-    private static final ClassDesc CD_MHI     = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/MethodHandleImpl;\");\n-    private static final ClassDesc CD_LF      = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/LambdaForm;\");\n-    private static final ClassDesc CD_LFN     = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/LambdaForm$Name;\");\n-    private static final ClassDesc CD_OBJARY  = ClassDesc.ofDescriptor(\"[Ljava\/lang\/Object;\");\n-\n-    private static final ClassDesc CD_LOOP_CLAUSES = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/MethodHandleImpl$LoopClauses;\");\n-\n-    private static final ClassDesc CD_MHARY2       = ClassDesc.ofDescriptor(\"[[Ljava\/lang\/invoke\/MethodHandle;\");\n-\n+    private static final ClassDesc CD_CasesHolder = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/invoke\/MethodHandleImpl$CasesHolder;\");\n+    private static final ClassDesc CD_DirectMethodHandle = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/invoke\/DirectMethodHandle;\");\n+    private static final ClassDesc CD_MethodHandleImpl = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/invoke\/MethodHandleImpl;\");\n+    private static final ClassDesc CD_LambdaForm = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/invoke\/LambdaForm;\");\n+    private static final ClassDesc CD_LambdaForm_Name = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/invoke\/LambdaForm$Name;\");\n+    private static final ClassDesc CD_Object_array  = ReferenceClassDescImpl.ofValidated(\"[Ljava\/lang\/Object;\");\n+    private static final ClassDesc CD_LoopClauses_array = ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/invoke\/MethodHandleImpl$LoopClauses;\");\n+    private static final ClassDesc CD_MethodHandle_array = ReferenceClassDescImpl.ofValidated(\"[Ljava\/lang\/invoke\/MethodHandle;\");\n+    private static final ClassDesc CD_MethodHandle_array2 = ReferenceClassDescImpl.ofValidated(\"[[Ljava\/lang\/invoke\/MethodHandle;\");\n@@ -86,1 +87,1 @@\n-    private static final ClassEntry CE_OBJARY = CP.classEntry(CD_OBJARY);\n+    private static final ClassEntry CE_OBJARY = CP.classEntry(CD_Object_array);\n@@ -88,4 +89,4 @@\n-    private static final InterfaceMethodRefEntry MRE_List_get = CP.interfaceMethodRefEntry(CD_List, \"get\", MethodTypeDesc.of(CD_Object, CD_int));\n-    private static final MethodRefEntry MRE_MethodHandles_classData = CP.methodRefEntry(CD_MethodHandles, \"classData\", MethodTypeDesc.of(CD_Object, CD_Class));\n-    private static final MethodRefEntry MRE_Class_cast = CP.methodRefEntry(CD_Class, \"cast\", MethodTypeDesc.of(CD_Object, CD_Object));\n-    private static final MethodRefEntry MRE_Class_isInstance = CP.methodRefEntry(CD_Class, \"isInstance\", MethodTypeDesc.of(CD_boolean, CD_Object));\n+    private static final InterfaceMethodRefEntry MRE_List_get = CP.interfaceMethodRefEntry(CD_List, \"get\", MethodTypeDescImpl.ofValidated(CD_Object, CD_int));\n+    private static final MethodRefEntry MRE_MethodHandles_classData = CP.methodRefEntry(CD_MethodHandles, \"classData\", MethodTypeDescImpl.ofValidated(CD_Object, CD_Class));\n+    private static final MethodRefEntry MRE_Class_cast = CP.methodRefEntry(CD_Class, \"cast\", MethodTypeDescImpl.ofValidated(CD_Object, CD_Object));\n+    private static final MethodRefEntry MRE_Class_isInstance = CP.methodRefEntry(CD_Class, \"isInstance\", MethodTypeDescImpl.ofValidated(CD_boolean, CD_Object));\n@@ -235,1 +236,1 @@\n-            desc = CD_LF;\n+            desc = CD_LambdaForm;\n@@ -547,1 +548,1 @@\n-           .invokestatic(CD_MHI, \"assertSame\", MethodTypeDesc.of(CD_void, CD_Object, CD_Object));\n+           .invokestatic(CD_MethodHandleImpl, \"assertSame\", MethodTypeDescImpl.ofValidated(CD_void, CD_Object, CD_Object));\n@@ -551,5 +552,5 @@\n-    static final Annotation DONTINLINE      = Annotation.of(ClassDesc.ofDescriptor(\"Ljdk\/internal\/vm\/annotation\/DontInline;\"));\n-    static final Annotation FORCEINLINE     = Annotation.of(ClassDesc.ofDescriptor(\"Ljdk\/internal\/vm\/annotation\/ForceInline;\"));\n-    static final Annotation HIDDEN          = Annotation.of(ClassDesc.ofDescriptor(\"Ljdk\/internal\/vm\/annotation\/Hidden;\"));\n-    static final Annotation INJECTEDPROFILE = Annotation.of(ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/InjectedProfile;\"));\n-    static final Annotation LF_COMPILED     = Annotation.of(ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/LambdaForm$Compiled;\"));\n+    static final Annotation DONTINLINE      = Annotation.of(ReferenceClassDescImpl.ofValidated(\"Ljdk\/internal\/vm\/annotation\/DontInline;\"));\n+    static final Annotation FORCEINLINE     = Annotation.of(ReferenceClassDescImpl.ofValidated(\"Ljdk\/internal\/vm\/annotation\/ForceInline;\"));\n+    static final Annotation HIDDEN          = Annotation.of(ReferenceClassDescImpl.ofValidated(\"Ljdk\/internal\/vm\/annotation\/Hidden;\"));\n+    static final Annotation INJECTEDPROFILE = Annotation.of(ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/invoke\/InjectedProfile;\"));\n+    static final Annotation LF_COMPILED     = Annotation.of(ReferenceClassDescImpl.ofValidated(\"Ljava\/lang\/invoke\/LambdaForm$Compiled;\"));\n@@ -743,2 +744,2 @@\n-            cob.getfield(CD_MethodHandle, \"form\", CD_LF)\n-               .getfield(CD_LF, \"names\", CD_LFN);\n+            cob.getfield(CD_MethodHandle, \"form\", CD_LambdaForm)\n+               .getfield(CD_LambdaForm, \"names\", CD_LambdaForm_Name);\n@@ -1173,2 +1174,1 @@\n-        cob.getfield(ClassDesc.ofInternalName(\"java\/lang\/invoke\/MethodHandleImpl$CasesHolder\"), \"cases\",\n-                CD_MethodHandle.arrayType());\n+        cob.getfield(CD_CasesHolder, \"cases\", CD_MethodHandle_array);\n@@ -1335,1 +1335,1 @@\n-        cob.getfield(CD_LOOP_CLAUSES, \"clauses\", CD_MHARY2);\n+        cob.getfield(CD_LoopClauses_array, \"clauses\", CD_MethodHandle_array2);\n@@ -1575,1 +1575,1 @@\n-                                cob.getfield(CD_MethodHandle, \"form\", CD_LF);\n+                                cob.getfield(CD_MethodHandle, \"form\", CD_LambdaForm);\n@@ -1577,1 +1577,1 @@\n-                                cob.invokevirtual(CD_LF, \"interpretWithArguments\", MethodTypeDesc.of(CD_Object, CD_OBJARY));\n+                                cob.invokevirtual(CD_LambdaForm, \"interpretWithArguments\", MethodTypeDescImpl.ofValidated(CD_Object, CD_Object_array));\n@@ -1694,2 +1694,3 @@\n-        return cls == MethodHandle.class ? CD_MethodHandle\n-             : cls == DirectMethodHandle.class ? CD_DMH\n+        return cls.isPrimitive() ? Wrapper.forPrimitiveType(cls).classDescriptor()\n+             : cls == MethodHandle.class ? CD_MethodHandle\n+             : cls == DirectMethodHandle.class ? CD_DirectMethodHandle\n@@ -1697,1 +1698,1 @@\n-             : ClassDesc.ofDescriptor(cls.descriptorString());\n+             : ReferenceClassDescImpl.ofValidated(cls.descriptorString());\n@@ -1701,1 +1702,5 @@\n-        return MethodTypeDesc.ofDescriptor(mt.descriptorString());\n+        var params = new ClassDesc[mt.parameterCount()];\n+        for (int i = 0; i < params.length; i++) {\n+            params[i] = classDesc(mt.parameterType(i));\n+        }\n+        return MethodTypeDescImpl.ofValidated(classDesc(mt.returnType()), params);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":38,"deletions":33,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import jdk.internal.constant.MethodTypeDescImpl;\n+import jdk.internal.constant.ReferenceClassDescImpl;\n@@ -43,1 +45,0 @@\n-import java.lang.constant.MethodTypeDesc;\n@@ -1041,2 +1042,4 @@\n-        private static MethodType INVOKER_MT = MethodType.methodType(Object.class, MethodHandle.class, Object[].class);\n-        private static MethodType REFLECT_INVOKER_MT = MethodType.methodType(Object.class, MethodHandle.class, Object.class, Object[].class);\n+\n+        private static final ClassDesc CD_Object_array = ReferenceClassDescImpl.ofValidated(\"[Ljava\/lang\/Object;\");\n+        private static final MethodType INVOKER_MT = MethodType.methodType(Object.class, MethodHandle.class, Object[].class);\n+        private static final MethodType REFLECT_INVOKER_MT = MethodType.methodType(Object.class, MethodHandle.class, Object.class, Object[].class);\n@@ -1269,1 +1272,1 @@\n-            return ClassFile.of().build(ClassDesc.of(\"InjectedInvoker\"), clb -> clb\n+            return ClassFile.of().build(ReferenceClassDescImpl.ofValidated(\"LInjectedInvoker;\"), clb -> clb\n@@ -1273,1 +1276,1 @@\n-                        MethodTypeDesc.of(CD_Object, CD_MethodHandle, CD_Object.arrayType()),\n+                        MethodTypeDescImpl.ofValidated(CD_Object, CD_MethodHandle, CD_Object_array),\n@@ -1277,1 +1280,1 @@\n-                                  .invokevirtual(CD_MethodHandle, \"invokeExact\", MethodTypeDesc.of(CD_Object, CD_Object.arrayType()))\n+                                  .invokevirtual(CD_MethodHandle, \"invokeExact\", MethodTypeDescImpl.ofValidated(CD_Object, CD_Object_array))\n@@ -1281,1 +1284,1 @@\n-                        MethodTypeDesc.of(CD_Object, CD_MethodHandle, CD_Object, CD_Object.arrayType()),\n+                        MethodTypeDescImpl.ofValidated(CD_Object, CD_MethodHandle, CD_Object, CD_Object_array),\n@@ -1286,1 +1289,1 @@\n-                                  .invokevirtual(CD_MethodHandle, \"invokeExact\", MethodTypeDesc.of(CD_Object, CD_Object, CD_Object.arrayType()))\n+                                  .invokevirtual(CD_MethodHandle, \"invokeExact\", MethodTypeDescImpl.ofValidated(CD_Object, CD_Object, CD_Object_array))\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,0 +28,4 @@\n+import java.lang.classfile.ClassHierarchyResolver;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.CodeBuilder;\n+import java.lang.classfile.TypeKind;\n@@ -51,4 +55,1 @@\n-import java.lang.classfile.ClassHierarchyResolver;\n-import java.lang.classfile.ClassFile;\n-import java.lang.classfile.CodeBuilder;\n-import java.lang.classfile.TypeKind;\n+import jdk.internal.constant.MethodTypeDescImpl;\n@@ -341,1 +342,1 @@\n-    private static final MethodTypeDesc MTD_void_Throwable = MethodTypeDesc.of(CD_void, CD_Throwable);\n+    private static final MethodTypeDesc MTD_void_Throwable = MethodTypeDescImpl.ofValidated(CD_void, CD_Throwable);\n@@ -349,6 +350,6 @@\n-    private static final MethodTypeDesc MTD_void_Lookup = MethodTypeDesc.of(CD_void, CD_MethodHandles_Lookup);\n-    private static final MethodTypeDesc MTD_MethodHandle_MethodType = MethodTypeDesc.of(CD_MethodHandle, CD_MethodType);\n-    private static final MethodTypeDesc MTD_Class = MethodTypeDesc.of(CD_Class);\n-    private static final MethodTypeDesc MTD_int = MethodTypeDesc.of(CD_int);\n-    private static final MethodTypeDesc MTD_String = MethodTypeDesc.of(CD_String);\n-    private static final MethodTypeDesc MTD_void_String = MethodTypeDesc.of(CD_void, CD_String);\n+    private static final MethodTypeDesc MTD_void_Lookup = MethodTypeDescImpl.ofValidated(CD_void, CD_MethodHandles_Lookup);\n+    private static final MethodTypeDesc MTD_MethodHandle_MethodType = MethodTypeDescImpl.ofValidated(CD_MethodHandle, CD_MethodType);\n+    private static final MethodTypeDesc MTD_Class = MethodTypeDescImpl.ofValidated(CD_Class);\n+    private static final MethodTypeDesc MTD_int = MethodTypeDescImpl.ofValidated(CD_int);\n+    private static final MethodTypeDesc MTD_String = MethodTypeDescImpl.ofValidated(CD_String);\n+    private static final MethodTypeDesc MTD_void_String = MethodTypeDescImpl.ofValidated(CD_void, CD_String);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleProxies.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.lang.constant.MethodTypeDesc;\n@@ -34,0 +33,3 @@\n+import jdk.internal.constant.MethodTypeDescImpl;\n+import jdk.internal.constant.ReferenceClassDescImpl;\n+import sun.invoke.util.Wrapper;\n@@ -43,1 +45,1 @@\n-            return CP.methodRefEntry(target, \"valueOf\", MethodTypeDesc.of(target, primitive));\n+            return CP.methodRefEntry(target, \"valueOf\", MethodTypeDescImpl.ofValidated(target, primitive));\n@@ -56,1 +58,1 @@\n-            return CP.methodRefEntry(owner, methodName, MethodTypeDesc.of(primitiveTarget));\n+            return CP.methodRefEntry(owner, methodName, MethodTypeDescImpl.ofValidated(primitiveTarget));\n@@ -200,1 +202,2 @@\n-        return cls == Object.class ? CD_Object\n+        return cls.isPrimitive() ? Wrapper.forPrimitiveType(cls).classDescriptor()\n+             : cls == Object.class ? CD_Object\n@@ -202,1 +205,1 @@\n-             : ClassDesc.ofDescriptor(cls.descriptorString());\n+             : ReferenceClassDescImpl.ofValidated(cls.descriptorString());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/TypeConvertingMethodAdapter.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"}]}