{"files":[{"patch":"@@ -43,0 +43,1 @@\n+import jdk.internal.classfile.impl.AbstractPoolEntry.ClassEntryImpl;\n@@ -46,0 +47,1 @@\n+import jdk.internal.classfile.impl.Util;\n@@ -47,0 +49,1 @@\n+import static java.util.Objects.requireNonNull;\n@@ -154,1 +157,8 @@\n-    ClassEntry classEntry(ClassDesc classDesc);\n+    default ClassEntry classEntry(ClassDesc classDesc) {\n+        if (requireNonNull(classDesc).isPrimitive()) {\n+            throw new IllegalArgumentException(\"Cannot be encoded as ClassEntry: \" + classDesc.displayName());\n+        }\n+        ClassEntryImpl ret = (ClassEntryImpl)classEntry(utf8Entry(classDesc.isArray() ? classDesc.descriptorString() : Util.toInternalName(classDesc)));\n+        ret.sym = classDesc;\n+        return ret;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -173,1 +173,1 @@\n-        implMethodClassDesc = classDesc(implClass);\n+        implMethodClassDesc = implClassDesc(implClass);\n@@ -546,1 +546,1 @@\n-    static ClassDesc classDesc(Class<?> cls) {\n+    static ClassDesc implClassDesc(Class<?> cls) {\n@@ -548,1 +548,5 @@\n-                              : ClassDesc.ofDescriptor(cls.descriptorString());\n+                              : classDesc(cls);\n+    }\n+\n+    static ClassDesc classDesc(Class<?> cls) {\n+        return ClassDesc.ofDescriptor(cls.descriptorString());\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":7,"deletions":3,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -359,0 +359,8 @@\n+    private void emitLoadInsn(CodeBuilder cob, TypeKind type, int index) {\n+        cob.loadInstruction(type, localsMap[index]);\n+    }\n+\n+    private void emitStoreInsn(CodeBuilder cob, TypeKind type, int index) {\n+        cob.storeInstruction(type, localsMap[index]);\n+    }\n+\n@@ -449,2 +457,2 @@\n-            cob.dup()\n-               .astore(localsMap[writeBack.index()]);\n+            cob.dup();\n+            emitStoreInsn(cob, TypeKind.ReferenceType, writeBack.index());\n@@ -911,1 +919,1 @@\n-        cob.astore(localsMap[receiver.index()]);  \/\/ store the MH in the receiver slot\n+        emitStoreInsn(cob, TypeKind.ReferenceType, receiver.index());  \/\/ store the MH in the receiver slot\n@@ -923,1 +931,1 @@\n-        cob.astore(localsMap[receiver.index()]);  \/\/ store the MH in the receiver slot\n+        emitStoreInsn(cob, TypeKind.ReferenceType, receiver.index());  \/\/ store the MH in the receiver slot\n@@ -1105,1 +1113,1 @@\n-            cob.storeInstruction(basicReturnType.basicTypeKind(), localsMap[index]);\n+            emitStoreInsn(cob, basicReturnType.basicTypeKind(), index);\n@@ -1110,1 +1118,1 @@\n-            cob.loadInstruction(basicReturnType.basicTypeKind(), localsMap[index]);\n+            emitLoadInsn(cob, basicReturnType.basicTypeKind(), index);\n@@ -1144,11 +1152,5 @@\n-        switch (type) {\n-            case I_TYPE:\n-            case F_TYPE:\n-            case L_TYPE:\n-                return Opcode.POP;\n-            case J_TYPE:\n-            case D_TYPE:\n-                return Opcode.POP2;\n-            default:\n-                throw new InternalError(\"unknown type: \" + type);\n-        }\n+        return switch (type) {\n+            case I_TYPE, F_TYPE, L_TYPE -> Opcode.POP;\n+            case J_TYPE, D_TYPE -> Opcode.POP2;\n+            default -> throw new InternalError(\"unknown type: \" + type);\n+        };\n@@ -1172,1 +1174,1 @@\n-        cob.astore(localsMap[casesLocal]);\n+        emitStoreInsn(cob, TypeKind.ReferenceType, casesLocal);\n@@ -1193,1 +1195,1 @@\n-            cob.aload(localsMap[casesLocal]);\n+            emitLoadInsn(cob, TypeKind.ReferenceType, casesLocal);\n@@ -1332,1 +1334,1 @@\n-        cob.astore(localsMap[clauseDataIndex]);\n+        emitStoreInsn(cob, TypeKind.ReferenceType, clauseDataIndex);\n@@ -1340,1 +1342,1 @@\n-                cob.storeInstruction(BasicType.basicType(cInitType.returnType()).basicTypeKind(), localsMap[firstLoopStateIndex + state]);\n+                emitStoreInsn(cob, BasicType.basicType(cInitType.returnType()).basicTypeKind(), firstLoopStateIndex + state);\n@@ -1358,1 +1360,1 @@\n-                cob.storeInstruction(BasicType.basicType(stepType.returnType()).basicTypeKind(), localsMap[firstLoopStateIndex + state]);\n+                emitStoreInsn(cob, BasicType.basicType(stepType.returnType()).basicTypeKind(), firstLoopStateIndex + state);\n@@ -1410,1 +1412,1 @@\n-                cob.loadInstruction(BasicType.basicType(loopLocalStateTypes[s]).basicTypeKind(), localsMap[firstLoopStateSlot + s]);\n+                emitLoadInsn(cob, BasicType.basicType(loopLocalStateTypes[s]).basicTypeKind(), firstLoopStateSlot + s);\n@@ -1419,1 +1421,1 @@\n-        cob.aload(localsMap[clauseDataSlot]);\n+        emitLoadInsn(cob, TypeKind.ReferenceType, clauseDataSlot);\n@@ -1451,1 +1453,1 @@\n-            cob.loadInstruction(n.type.basicTypeKind(), localsMap[n.index()]);\n+            emitLoadInsn(cob, n.type.basicTypeKind(), n.index());\n@@ -1471,1 +1473,1 @@\n-            cob.storeInstruction(name.type.basicTypeKind(), localsMap[name.index()]);\n+            emitStoreInsn(cob, name.type.basicTypeKind(), name.index());\n@@ -1492,1 +1494,1 @@\n-                cob.loadInstruction(rtype.basicTypeKind(), localsMap[lambdaForm.result]);\n+                emitLoadInsn(cob, rtype.basicTypeKind(), lambdaForm.result);\n@@ -1518,2 +1520,11 @@\n-        if (from != to && from != TypeKind.BooleanType && to != TypeKind.BooleanType) try {\n-            cob.convertInstruction(from, to);\n+        if (from != to && from != TypeKind.BooleanType) try {\n+            switch (to) {\n+                case IntType, LongType, FloatType, DoubleType ->\n+                    cob.convertInstruction(from, to);\n+                case ByteType, ShortType, CharType -> {\n+                    if (from != TypeKind.IntType) {\n+                        cob.convertInstruction(from, TypeKind.IntType);\n+                    }\n+                    cob.convertInstruction(TypeKind.IntType, to);\n+                }\n+            }\n@@ -1562,1 +1573,1 @@\n-                                    cob.loadInstruction(basicType(ptype).basicTypeKind(), localsMap[i]);\n+                                    emitLoadInsn(cob, basicType(ptype).basicTypeKind(), i);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":41,"deletions":30,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -1294,8 +1294,2 @@\n-        try {\n-            var params = new ClassDesc[parameterCount()];\n-            for (int i = 0; i < params.length; i++) {\n-                params[i] = parameterType(i).describeConstable().orElseThrow();\n-            }\n-            return Optional.of(MethodTypeDesc.of(returnType().describeConstable().orElseThrow(), params));\n-        }\n-        catch (NoSuchElementException e) {\n+        var retDesc = returnType().describeConstable();\n+        if (retDesc.isEmpty())\n@@ -1303,0 +1297,10 @@\n+\n+        if (parameterCount() == 0)\n+            return Optional.of(MethodTypeDesc.of(retDesc.get()));\n+\n+        var params = new ClassDesc[parameterCount()];\n+        for (int i = 0; i < params.length; i++) {\n+            var paramDesc = parameterType(i).describeConstable();\n+            if (paramDesc.isEmpty())\n+                return Optional.empty();\n+            params[i] = paramDesc.get();\n@@ -1304,0 +1308,1 @@\n+        return Optional.of(MethodTypeDesc.of(retDesc.get(), params));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodType.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -35,0 +35,9 @@\n+import static sun.invoke.util.Wrapper.BOOLEAN;\n+import static sun.invoke.util.Wrapper.BYTE;\n+import static sun.invoke.util.Wrapper.CHAR;\n+import static sun.invoke.util.Wrapper.DOUBLE;\n+import static sun.invoke.util.Wrapper.FLOAT;\n+import static sun.invoke.util.Wrapper.INT;\n+import static sun.invoke.util.Wrapper.LONG;\n+import static sun.invoke.util.Wrapper.SHORT;\n+import static sun.invoke.util.Wrapper.VOID;\n@@ -67,16 +76,9 @@\n-        return switch (type.getName().length()) {\n-            case 14 -> type == Long.class ? TypeKind.LongType\n-                     : type == Byte.class ? TypeKind.ByteType\n-                     : null;\n-            case 15 -> type == Short.class ? TypeKind.ShortType\n-                     : type == Float.class ? TypeKind.FloatType\n-                     : null;\n-            case 16 -> type == Double.class ? TypeKind.DoubleType\n-                     : null;\n-            case 17 -> type == Integer.class ? TypeKind.IntType\n-                     : type == Boolean.class ? TypeKind.BooleanType\n-                     : null;\n-            case 19 -> type == Character.class ? TypeKind.CharType\n-                     : null;\n-            default -> null;\n-        };\n+        if (type == int.class)     return TypeKind.IntType;\n+        if (type == long.class)    return TypeKind.LongType;\n+        if (type == boolean.class) return TypeKind.BooleanType;\n+        if (type == short.class)   return TypeKind.ShortType;\n+        if (type == byte.class)    return TypeKind.ByteType;\n+        if (type == char.class)    return TypeKind.CharType;\n+        if (type == float.class)   return TypeKind.FloatType;\n+        if (type == double.class)  return TypeKind.DoubleType;\n+        return null;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/TypeConvertingMethodAdapter.java","additions":18,"deletions":16,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -58,3 +58,0 @@\n-import java.lang.constant.ClassDesc;\n-import java.lang.constant.ConstantDescs;\n-import static java.util.Objects.requireNonNull;\n@@ -73,1 +70,0 @@\n-    private ClassEntry objectEntry;\n@@ -377,20 +373,0 @@\n-    @Override\n-    public ClassEntry classEntry(ClassDesc classDesc) {\n-        if (classDesc == ConstantDescs.CD_Object) {\n-            if (objectEntry == null) {\n-                objectEntry = _classEntry(classDesc);\n-            }\n-            return objectEntry;\n-        }\n-        if (requireNonNull(classDesc).isPrimitive()) {\n-            throw new IllegalArgumentException(\"Cannot be encoded as ClassEntry: \" + classDesc.displayName());\n-        }\n-        return _classEntry(classDesc);\n-    }\n-\n-    private ClassEntry _classEntry(ClassDesc classDesc) {\n-        var ret = classEntry(utf8Entry(classDesc.isArray() ? classDesc.descriptorString() : Util.toInternalName(classDesc)));\n-        ret.sym = classDesc;\n-        return ret;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -50,1 +50,0 @@\n-import java.lang.constant.ClassDesc;\n@@ -54,1 +53,0 @@\n-import static java.util.Objects.requireNonNull;\n@@ -92,10 +90,0 @@\n-    @Override\n-    public ClassEntry classEntry(ClassDesc classDesc) {\n-        if (requireNonNull(classDesc).isPrimitive()) {\n-            throw new IllegalArgumentException(\"Cannot be encoded as ClassEntry: \" + classDesc.displayName());\n-        }\n-        var ret = (AbstractPoolEntry.ClassEntryImpl)classEntry(utf8Entry(classDesc.isArray() ? classDesc.descriptorString() : Util.toInternalName(classDesc)));\n-        ret.sym = classDesc;\n-        return ret;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/TemporaryConstantPool.java","additions":0,"deletions":12,"binary":false,"changes":12,"status":"modified"}]}