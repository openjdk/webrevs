{"files":[{"patch":"@@ -173,7 +173,1 @@\n-        return withField(name, descriptor, new Consumer<FieldBuilder>() {\n-            \/\/cannot use lambda here\n-            @Override\n-            public void accept(FieldBuilder fb) {\n-                fb.withFlags(flags);\n-            }\n-        });\n+        return withField(name, descriptor, fb -> fb.withFlags(flags));\n@@ -208,7 +202,1 @@\n-        return withField(name, descriptor, new Consumer<FieldBuilder>() {\n-            \/\/cannot use lambda here\n-            @Override\n-            public void accept(FieldBuilder fb) {\n-                fb.withFlags(flags);\n-            }\n-        });\n+        return withField(name, descriptor, fb -> fb.withFlags(flags));\n@@ -261,7 +249,1 @@\n-        return withMethod(name, descriptor, methodFlags, new Consumer<MethodBuilder>() {\n-            \/\/cannot use lambda here\n-            @Override\n-            public void accept(MethodBuilder mb) {\n-                mb.withCode(handler);\n-            }\n-        });\n+        return withMethod(name, descriptor, methodFlags, mb -> mb.withCode(handler));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/ClassBuilder.java","additions":3,"deletions":21,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -38,0 +38,2 @@\n+import java.lang.classfile.FieldBuilder;\n+import java.lang.classfile.MethodBuilder;\n@@ -45,1 +47,0 @@\n-import java.util.ArrayList;\n@@ -64,5 +65,5 @@\n-    \/\/Serialization support\n-    private static final ClassDesc CD_SERIALIZED_LAMBDA = ClassDesc.ofInternalName(\"java\/lang\/invoke\/SerializedLambda\");\n-    private static final ClassDesc CD_NOT_SERIALIZABLE_EXCEPTION = ClassDesc.ofInternalName(\"java\/io\/NotSerializableException\");\n-    private static final ClassDesc CD_OBJECTOUTPUTSTREAM = ClassDesc.ofInternalName(\"java\/io\/ObjectOutputStream\");\n-    private static final ClassDesc CD_OBJECTINPUTSTREAM = ClassDesc.ofInternalName(\"java\/io\/ObjectInputStream\");\n+    \/\/ Serialization support\n+    private static final ClassDesc CD_SERIALIZED_LAMBDA = ClassDesc.ofDescriptor(\"Ljava\/lang\/invoke\/SerializedLambda;\");\n+    private static final ClassDesc CD_NOT_SERIALIZABLE_EXCEPTION = ClassDesc.ofDescriptor(\"Ljava\/io\/NotSerializableException;\");\n+    private static final ClassDesc CD_OBJECTOUTPUTSTREAM = ClassDesc.ofDescriptor(\"Ljava\/io\/ObjectOutputStream;\");\n+    private static final ClassDesc CD_OBJECTINPUTSTREAM = ClassDesc.ofDescriptor(\"Ljava\/io\/ObjectInputStream;\");\n@@ -85,0 +86,13 @@\n+    \/\/ Static builders to avoid lambdas\n+    record FieldFlags(int flags) implements Consumer<FieldBuilder> {\n+        @Override\n+        public void accept(FieldBuilder fb) {\n+            fb.withFlags(flags);\n+        }\n+    };\n+    record MethodBody(Consumer<CodeBuilder> code) implements Consumer<MethodBuilder> {\n+        @Override\n+        public void accept(MethodBuilder mb) {\n+            mb.withCode(code);\n+        }\n+    };\n@@ -328,1 +342,1 @@\n-                    clb.withField(argNames[i], argDescs[i], ACC_PRIVATE + ACC_FINAL);\n+                    clb.withField(argNames[i], argDescs[i], new FieldFlags(ACC_PRIVATE | ACC_FINAL));\n@@ -338,1 +352,1 @@\n-                clb.withMethodBody(interfaceMethodName,\n+                clb.withMethod(interfaceMethodName,\n@@ -346,1 +360,1 @@\n-                        clb.withMethodBody(interfaceMethodName,\n+                        clb.withMethod(interfaceMethodName,\n@@ -380,1 +394,1 @@\n-        clb.withField(LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor, ACC_PRIVATE | ACC_STATIC | ACC_FINAL);\n+        clb.withField(LAMBDA_INSTANCE_FIELD, lambdaTypeDescriptor, new FieldFlags(ACC_PRIVATE | ACC_STATIC | ACC_FINAL));\n@@ -383,1 +397,1 @@\n-        clb.withMethodBody(CLASS_INIT_NAME, MTD_void, ACC_STATIC, new Consumer<CodeBuilder>() {\n+        clb.withMethod(CLASS_INIT_NAME, MTD_void, ACC_STATIC, new MethodBody(new Consumer<CodeBuilder>() {\n@@ -393,1 +407,1 @@\n-        });\n+        }));\n@@ -401,2 +415,2 @@\n-        clb.withMethodBody(INIT_NAME, constructorTypeDesc, ACC_PRIVATE,\n-                new Consumer<CodeBuilder>() {\n+        clb.withMethod(INIT_NAME, constructorTypeDesc, ACC_PRIVATE,\n+                new MethodBody(new Consumer<CodeBuilder>() {\n@@ -416,1 +430,1 @@\n-                });\n+                }));\n@@ -423,2 +437,2 @@\n-        clb.withMethodBody(NAME_METHOD_WRITE_REPLACE, MTD_METHOD_WRITE_REPLACE, ACC_PRIVATE | ACC_FINAL,\n-                new Consumer<CodeBuilder>() {\n+        clb.withMethod(NAME_METHOD_WRITE_REPLACE, MTD_METHOD_WRITE_REPLACE, ACC_PRIVATE | ACC_FINAL,\n+                new MethodBody(new Consumer<CodeBuilder>() {\n@@ -451,1 +465,1 @@\n-                });\n+                }));\n@@ -458,2 +472,2 @@\n-        clb.withMethodBody(NAME_METHOD_WRITE_OBJECT, MTD_METHOD_WRITE_OBJECT, ACC_PRIVATE + ACC_FINAL,\n-            new Consumer<CodeBuilder>() {\n+        clb.withMethod(NAME_METHOD_WRITE_OBJECT, MTD_METHOD_WRITE_OBJECT, ACC_PRIVATE + ACC_FINAL,\n+            new MethodBody(new Consumer<CodeBuilder>() {\n@@ -468,3 +482,3 @@\n-            });\n-        clb.withMethodBody(NAME_METHOD_READ_OBJECT, MTD_METHOD_READ_OBJECT, ACC_PRIVATE + ACC_FINAL,\n-            new Consumer<CodeBuilder>() {\n+            }));\n+        clb.withMethod(NAME_METHOD_READ_OBJECT, MTD_METHOD_READ_OBJECT, ACC_PRIVATE + ACC_FINAL,\n+            new MethodBody(new Consumer<CodeBuilder>() {\n@@ -479,1 +493,1 @@\n-            });\n+            }));\n@@ -486,2 +500,2 @@\n-    Consumer<CodeBuilder> forwardingMethod(MethodType methodType) {\n-        return new Consumer<CodeBuilder>() {\n+    Consumer<MethodBuilder> forwardingMethod(MethodType methodType) {\n+        return new MethodBody(new Consumer<CodeBuilder>() {\n@@ -522,1 +536,1 @@\n-        };\n+        });\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InnerClassLambdaMetafactory.java","additions":41,"deletions":27,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -98,0 +98,14 @@\n+    \/\/ Static builders to avoid lambdas\n+    private static final Consumer<FieldBuilder> STATIC_FINAL_FIELD = new Consumer<FieldBuilder>() {\n+        @Override\n+        public void accept(FieldBuilder fb) {\n+            fb.withFlags(ACC_STATIC | ACC_FINAL);\n+        }\n+    };\n+    record MethodBody(Consumer<CodeBuilder> code) implements Consumer<MethodBuilder> {\n+        @Override\n+        public void accept(MethodBuilder mb) {\n+            mb.withCode(code);\n+        }\n+    };\n+\n@@ -329,1 +343,1 @@\n-            clb.withField(p.name, p.desc, ACC_STATIC|ACC_FINAL);\n+            clb.withField(p.name, p.desc, STATIC_FINAL_FIELD);\n@@ -332,1 +346,1 @@\n-        clb.withMethodBody(CLASS_INIT_NAME, MTD_void, ACC_STATIC, new Consumer<CodeBuilder>() {\n+        clb.withMethod(CLASS_INIT_NAME, MTD_void, ACC_STATIC, new MethodBody(new Consumer<CodeBuilder>() {\n@@ -356,1 +370,1 @@\n-        });\n+        }));\n@@ -1688,1 +1702,1 @@\n-            clb.withMethodBody(\"dummy\", MTD_void, ACC_STATIC, new Consumer<CodeBuilder>() {\n+            clb.withMethod(\"dummy\", MTD_void, ACC_STATIC, new MethodBody(new Consumer<CodeBuilder>() {\n@@ -1695,1 +1709,1 @@\n-            });\n+            }));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/InvokerBytecodeGenerator.java","additions":19,"deletions":5,"binary":false,"changes":24,"status":"modified"}]}