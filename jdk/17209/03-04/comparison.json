{"files":[{"patch":"@@ -90,2 +90,2 @@\n-     * Check that the exception handling is correct when the\n-     * wrapped stream throws while being closed\n+     * Check that an exception thrown while closing the wrapped\n+     * stream is propagated to the caller without any suppressed exceptions\n@@ -100,0 +100,30 @@\n+        IOException exception = assertThrows(IOException.class, () -> {\n+            try (ZipOutputStream zo = new ZipOutputStream(wrappedStream)) {\n+                zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+                zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+                wrappedStream.failOnClose = true;\n+            }\n+        });\n+\n+        \/\/ Check that we failed with the expected message\n+        assertEquals(WrappedOutputStream.CLOSE_MSG, exception.getMessage());\n+\n+        \/\/ There should be no suppressed exceptions\n+        assertEquals(0, exception.getSuppressed().length);\n+\n+        \/\/ Verify that the wrapped stream was closed once\n+        assertEquals(1, wrappedStream.timesClosed,\n+                \"Expected wrapped output stream to be closed once\");\n+    }\n+\n+    \/**\n+     * Check that if an exception is thrown while closing the wrapped stream,\n+     * then later close attempts will not close the wrapped stream again\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void doubleCloseShouldCloseWrappedStreamOnce() throws IOException {\n+\n+        WrappedOutputStream wrappedStream = new WrappedOutputStream();\n+\n@@ -127,2 +157,4 @@\n-     * Check that the exception handling is correct when the wrapped\n-     * stream throws while calling finish AND while being closed\n+     * Check that when the wrapped stream throws while calling finish\n+     * AND while being closed, then the propagated exception is the one\n+     * from the close operation, with the exception thrown during finish\n+     * added as a suppressed exception.\n@@ -137,1 +169,0 @@\n-\n@@ -163,2 +194,3 @@\n-     * Check that the exception handling is correct when the wrapped stream throws\n-     * the same IOException (identical instance) for write and close operations.\n+     * Check that when the wrapped stream throws the same IOException\n+     * (identical instance) for write and close operations, then no attempt\n+     * is made to add the exception instance to itself as a suppressed exception.\n","filename":"test\/jdk\/java\/util\/zip\/ZipOutputStream\/CloseWrappedStream.java","additions":39,"deletions":7,"binary":false,"changes":46,"status":"modified"}]}