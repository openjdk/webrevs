{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -243,0 +243,1 @@\n+            IOException finishException = null;\n@@ -245,0 +246,3 @@\n+            } catch (IOException ioe){\n+                finishException = ioe;\n+                throw ioe;\n@@ -246,1 +250,1 @@\n-                if (usesDefaultDeflater)\n+                if (usesDefaultDeflater) {\n@@ -248,0 +252,10 @@\n+                }\n+                try {\n+                    out.close();\n+                } catch (IOException ioe) {\n+                    if (finishException != ioe) {\n+                        ioe.addSuppressed(finishException);\n+                    }\n+                    throw ioe;\n+                }\n+                closed = true;\n@@ -249,2 +263,0 @@\n-            out.close();\n-            closed = true;\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/DeflaterOutputStream.java","additions":16,"deletions":4,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -0,0 +1,112 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/* @test\n+   @bug 8313739\n+   @summary Verify that ZipOutputStream closes the wrapped stream even after failed writes\n+   @run junit CloseWrappedStream\n+   *\/\n+\n+import org.junit.jupiter.api.Test;\n+\n+import java.io.*;\n+import java.nio.charset.StandardCharsets;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class CloseWrappedStream {\n+\n+    \/**\n+     * Verify that closing a ZipOutputStream closes the wrapped output stream,\n+     * also when the wrapped stream throws when remaining data is flushed\n+     *\/\n+    @Test\n+    public void closeWrappedStreamAfterFailure()  {\n+        \/\/ A wrapped stream which should be closed even after a write failure\n+        WrappedOutputStream wrappedStream = new WrappedOutputStream();\n+\n+        IOException exception = assertThrows(IOException.class, () -> {\n+            try (ZipOutputStream zo = new ZipOutputStream(wrappedStream)) {\n+                zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+                zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+                \/\/ Make next write throw IOException\n+                wrappedStream.fail = true;\n+            } \/\/ Close throws when deflated data is flushed to wrapped stream\n+        });\n+\n+        \/\/ Sanity check that we failed with the expected message\n+        assertEquals(WrappedOutputStream.MSG, exception.getMessage());\n+        \/\/ Verify that the wrapped stream was closed\n+        assertTrue(wrappedStream.closed, \"Expected wrapped output stream to be closed\");\n+    }\n+\n+    \/**\n+     * Sanity check that the wrapped stream is closed also for the normal case\n+     * where the wrapped stream does not throw\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void closeWrappedStreamNormal() throws IOException {\n+\n+        WrappedOutputStream wrappedStream = new WrappedOutputStream();\n+\n+        try (ZipOutputStream zo = new ZipOutputStream(wrappedStream)) {\n+            zo.putNextEntry(new ZipEntry(\"file.txt\"));\n+            zo.write(\"hello\".getBytes(StandardCharsets.UTF_8));\n+        }\n+\n+        \/\/ Verify that the wrapped stream was closed\n+        assertTrue(wrappedStream.closed, \"Expected wrapped output stream to be closed\");\n+    }\n+\n+    \/**\n+     * Output stream which conditionally throws IOException on writes\n+     * and tracks its close status.\n+     *\/\n+    static class WrappedOutputStream extends FilterOutputStream {\n+        static final String MSG = \"injected failure\";\n+        boolean fail = false;\n+        boolean closed = false;\n+\n+        public WrappedOutputStream() {\n+            super(new ByteArrayOutputStream());\n+        }\n+\n+        @Override\n+        public synchronized void write(byte[] b, int off, int len) throws IOException{\n+            if (fail) {\n+                throw new IOException(MSG);\n+            } else {\n+                super.write(b, off, len);\n+            }\n+        }\n+\n+        @Override\n+        public void close() throws IOException {\n+            closed = true;\n+            super.close();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/util\/zip\/ZipOutputStream\/CloseWrappedStream.java","additions":112,"deletions":0,"binary":false,"changes":112,"status":"added"}]}