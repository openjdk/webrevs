{"files":[{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6405689\n+ * @key headful\n+ * @summary Reg: Painting is not happening properly,\n+ *          when Choice scrollbar gets disappeared after selected item\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual PaintArtefacts\n+*\/\n+\n+import java.awt.Button;\n+import java.awt.Choice;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.ItemEvent;\n+import java.awt.event.ItemListener;\n+\n+public class PaintArtefacts {\n+\n+    static boolean removeItems = true;\n+    private static final String INSTRUCTIONS = \"\"\"\n+        The problem is seen on XToolkit only.\n+        Open the choice and press down or up key several times\n+        until the scrollbar gets disappeared.\n+        At that moment you may see a painting artefacts on dropdown menu\n+        If you see them, press Fail.\n+        If you don't see them press Add\/Remove switch button and\n+        again open the choice and press Up\/Down key several times\n+        until Scrollbar gets appeared back.\n+        If you still don't see any painting artefacts press Pass.\n+        \"\"\";\n+\n+    private static Frame init() {\n+        Frame frame = new Frame(\"Painting Frame\");\n+        Button b = new Button (\"Add\/Remove switch\");\n+        final Choice ch = new Choice();\n+        ch.add(\"Praveen\");\n+        ch.add(\"Mohan\");\n+        ch.add(\"Rakesh\");\n+        ch.add(\"Menon\");\n+        ch.add(\"Girish\");\n+        ch.add(\"Ramachandran\");\n+        ch.add(\"Elancheran\");\n+        ch.add(\"Subramanian\");\n+        ch.add(\"Raju\");\n+        ch.add(\"Pallath\");\n+        ch.add(\"Mayank\");\n+        ch.add(\"Joshi\");\n+        ch.add(\"Sundar\");\n+        ch.add(\"Srinivas\");\n+        ch.add(\"Mandalika\");\n+        ch.add(\"Suresh\");\n+        ch.add(\"Chandar\");\n+        ch.select(1);\n+        frame.setLayout(new FlowLayout());\n+        frame.add(ch);\n+        frame.add(b);\n+        b.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent ae) {\n+                PassFailJFrame.log(ae.toString());\n+                PassFailJFrame.log(\"selected index = \" + ch.getSelectedIndex());\n+                removeItems = !removeItems;\n+            }\n+        });\n+        ch.addItemListener(new ItemListener() {\n+            public void itemStateChanged(ItemEvent ie) {\n+                PassFailJFrame.log(ie.toString());\n+                PassFailJFrame.log(\"selected index = \" + ch.getSelectedIndex());\n+                if (removeItems) {\n+                    PassFailJFrame.log(\"REMOVE : \" + ch.getSelectedIndex());\n+                    ch.remove(ch.getSelectedIndex());\n+                } else {\n+                    PassFailJFrame.log(\"ADD : \"+ch.getSelectedIndex() + \"\/\" + \"new item\");\n+                    ch.add(\"new item\");\n+                }\n+            }\n+        });\n+        frame.setSize(200, 200);\n+\n+        for (int i = 0; i < 5; i++){\n+            ch.remove(ch.getSelectedIndex());\n+        }\n+\n+        return frame;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testUI(PaintArtefacts::init)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/PaintArtefacts.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -0,0 +1,146 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6318746\n+ * @key headful\n+ * @summary REG: File Selection is failing for every second selection made in the FileDlg drop-down, XToolkit\n+*\/\n+\n+import java.awt.Choice;\n+import java.awt.EventQueue;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+public class SelectBetweenPressRelease {\n+    static Frame frame;\n+    static Choice ch;\n+    static Robot r;\n+    static volatile Point loc;\n+    static volatile int selectedIndex;\n+\n+    public static void main(final String[] args) throws Exception {\n+        r = new Robot();\n+        try {\n+            EventQueue.invokeAndWait(() -> init());\n+            r.waitForIdle();\n+            r.delay(1000);\n+            test();\n+        } finally {\n+            EventQueue.invokeAndWait(() -> frame.dispose());\n+        }\n+    }\n+\n+    private static void init() {\n+        frame = new Frame();\n+        ch = new Choice();\n+        ch.add(\"0\");\n+        ch.add(\"1\");\n+        frame.add(ch);\n+\n+        frame.setLayout (new FlowLayout ());\n+\n+        addListener();\n+        frame.setSize (200,200);\n+        frame.setLocationRelativeTo(null);\n+        frame.setVisible(true);\n+        frame.validate();\n+    }\n+\n+\n+    private static void test() throws Exception {\n+        EventQueue.invokeAndWait(() -> ch.select(0));\n+\n+        EventQueue.invokeAndWait(() -> {\n+            loc = ch.getLocationOnScreen();\n+        });\n+        r.delay(1000);\n+        r.waitForIdle();\n+\n+        r.mouseMove(loc.x+ch.getWidth()\/2, loc.y+ch.getHeight()\/2);\n+        r.delay(10);\n+        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(100);\n+        \/\/ This code leads to the bug\n+        EventQueue.invokeAndWait(() -> ch.select(1));\n+        r.delay(100);\n+        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(1000);\n+        r.waitForIdle();\n+\n+        \/\/ 'selected' variable wich stored in the peer still equals 0\n+        \/\/ if the bug is reproducible\n+        \/\/ so the next ISC to the first item by mouse will be ignored\n+\n+        \/\/ try to hit the first item\n+        if(System.getProperty(\"os.name\").startsWith(\"Mac\")) {\n+            r.mouseMove(loc.x + ch.getWidth() \/ 2, loc.y + ch.getHeight() \/ 2);\n+        } else {\n+            r.mouseMove(loc.x + ch.getWidth() \/ 2,\n+                        loc.y + ch.getHeight() * 3 \/ 2);\n+        }\n+        r.delay(10);\n+        r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(100);\n+        r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        r.delay(1000);\n+        r.waitForIdle();\n+\n+        EventQueue.invokeAndWait(() -> {\n+            selectedIndex = ch.getSelectedIndex();\n+        });\n+        if (selectedIndex != 0){\n+            throw new RuntimeException(\"Test failed. ch.getSelectedIndex() = \"+selectedIndex);\n+        }\n+\n+    }\n+\n+    \/\/ just for logging\n+    private static void addListener(){\n+        frame.addMouseListener(\n+            new MouseAdapter(){\n+                public void mousePressed(MouseEvent me){\n+                    System.out.println(me);\n+                }\n+                public void mouseReleased(MouseEvent me){\n+                    System.out.println(me);\n+                }\n+            });\n+        ch.addMouseListener(\n+            new MouseAdapter(){\n+                public void mousePressed(MouseEvent me){\n+                    System.out.println(me);\n+                }\n+                public void mouseReleased(MouseEvent me){\n+                    System.out.println(me);\n+                }\n+            });\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/awt\/Choice\/SelectBetweenPressRelease.java","additions":146,"deletions":0,"binary":false,"changes":146,"status":"added"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5041225\n+ * @key headful\n+ * @summary Tests that we can set a display mode with unknown refresh rate\n+ *          if corresponding system display mode (with equal w\/h\/d) is available.\n+ * @run main DisplayModeNoRefreshTest\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.DisplayMode;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+\n+public class DisplayModeNoRefreshTest extends Frame {\n+\n+    private static DisplayModeNoRefreshTest fs;\n+\n+    private static final GraphicsDevice gd =\n+            GraphicsEnvironment.getLocalGraphicsEnvironment()\n+                               .getDefaultScreenDevice();\n+\n+    private static final DisplayMode origMode = gd.getDisplayMode();\n+\n+    public DisplayModeNoRefreshTest() {\n+        super(\"DisplayModeNoRefreshTest\");\n+        if (!gd.isFullScreenSupported()) {\n+            System.out.println(\"Full Screen is not supported, test considered passed.\");\n+            return;\n+        }\n+        setBackground(Color.green);\n+        gd.setFullScreenWindow(this);\n+        DisplayMode dlMode = getNoRefreshDisplayMode(gd.getDisplayModes());\n+        if (dlMode != null) {\n+            System.out.println(\"Selected Display Mode: \" +\n+                               \" Width \" + dlMode.getWidth() +\n+                               \" Height \" + dlMode.getHeight() +\n+                               \" BitDepth \" + dlMode.getBitDepth() +\n+                               \" Refresh Rate \" + dlMode.getRefreshRate());\n+            try {\n+                gd.setDisplayMode(dlMode);\n+            } catch (IllegalArgumentException ex) {\n+                throw new RuntimeException(\"Test Failed due to IAE\", ex);\n+            }\n+        } else {\n+            System.out.println(\"No suitable display mode available, test considered passed.\");\n+            return;\n+        }\n+\n+        try { Thread.sleep(2000); } catch (InterruptedException e) {}\n+\n+        System.out.println(\"Test Passed.\");\n+    }\n+\n+    public DisplayMode getNoRefreshDisplayMode(DisplayMode dm[]) {\n+        DisplayMode mode = new DisplayMode(640, 480, 32, DisplayMode.REFRESH_RATE_UNKNOWN);\n+        int i = 0;\n+        for (i = 0; i < dm.length; i++) {\n+            if (mode.getWidth() == dm[i].getWidth()\n+                && mode.getHeight() == dm[i].getHeight()\n+                && mode.getBitDepth() == dm[i].getBitDepth()) {\n+                return mode;\n+            }\n+        }\n+        if (dm.length > 0) {\n+            return\n+                new DisplayMode(dm[0].getWidth(), dm[0].getHeight(),\n+                                dm[0].getBitDepth(),\n+                                DisplayMode.REFRESH_RATE_UNKNOWN);\n+        }\n+\n+        return null;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                System.setProperty(\"sun.java2d.noddraw\", \"true\");\n+                fs = new DisplayModeNoRefreshTest();\n+            });\n+        } finally {\n+            gd.setDisplayMode(origMode);\n+            EventQueue.invokeAndWait(() -> {\n+                if (fs != null) {\n+                    fs.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/FullScreen\/DisplayModeNoRefreshTest.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"},{"patch":"@@ -0,0 +1,142 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6444688\n+ * @key printer\n+ * @summary Print an image with an IndexedColorModel with transparent pixel.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual BitmaskImage\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.geom.AffineTransform;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.DataBuffer;\n+import java.awt.image.IndexColorModel;\n+import java.awt.print.PageFormat;\n+import java.awt.print.PrinterJob;\n+import java.awt.print.Printable;\n+import java.awt.print.PrinterException;\n+\n+import static java.awt.print.Printable.NO_SUCH_PAGE;\n+import static java.awt.print.Printable.PAGE_EXISTS;\n+\n+public class BitmaskImage implements Printable, ActionListener {\n+\n+    static int sz = 1000;\n+    BufferedImage bi;\n+\n+    public BitmaskImage() {\n+        int i = 0;\n+        int[] cmap = new int[256];\n+        for (int r = 0; r < 256; r += 51) {\n+            for (int g = 0; g < 256; g += 51) {\n+                for (int b = 0; b < 256; b += 51) {\n+                    cmap[i++] = (0xff << 24) | (r << 16) | (g << 8) | b;\n+                }\n+            }\n+        }\n+\n+        IndexColorModel icm = new\n+            IndexColorModel(8, 256, cmap, 0, true, 253, DataBuffer.TYPE_BYTE);\n+        bi = new BufferedImage(sz, sz, BufferedImage.TYPE_BYTE_INDEXED, icm);\n+        Graphics g = bi.getGraphics();\n+        Graphics2D g2d = (Graphics2D)g;\n+        g.setColor(Color.white);\n+        g.fillRect(0, 0, sz, sz);\n+        g.setColor(Color.black);\n+        int off = sz \/ 20;\n+        int wh = sz \/ 10;\n+        for (int x = off; x < sz; x += wh * 2) {\n+           for (int y = off; y < sz; y += wh * 2) {\n+               g.fillRect(x, y, wh, wh);\n+           }\n+        }\n+    }\n+\n+    public int print(Graphics g, PageFormat pf, int page) throws\n+                                                        PrinterException {\n+\n+        if (page > 0) { \/* We have only one page, and 'page' is zero-based *\/\n+            return NO_SUCH_PAGE;\n+        }\n+\n+        Graphics2D g2d = (Graphics2D)g;\n+        AffineTransform tx = g2d.getTransform();\n+        double sx = tx.getScaleX();\n+        double sy = tx.getScaleY();\n+        g2d.translate(pf.getImageableX(), pf.getImageableY());\n+        g2d.scale(1\/sx, 1\/sx);\n+        g.drawImage(bi, 10, 10, null);\n+\n+        \/* tell the caller that this page is part of the printed document *\/\n+        return PAGE_EXISTS;\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        PrinterJob job = PrinterJob.getPrinterJob();\n+        job.setPrintable(this);\n+        boolean ok = job.printDialog();\n+        if (ok) {\n+            try {\n+                 job.print();\n+            } catch (PrinterException ex) {\n+             \/* The job did not successfully complete *\/\n+            }\n+        }\n+        System.out.println(\"done\");\n+    }\n+\n+    static String INSTRUCTIONS = \"\"\"\n+        Press the \"Print Simple ICM Image\" button and if a printer is available,\n+        choose one in the dialog and click OK to start printing.\n+        This test will print an image which contains a grid of black squares.\n+        If it prints so, press Pass otherwise press Fail.\"\"\";\n+\n+    public static Frame initTest() {\n+        Frame f = new Frame(\"Image Printer\");\n+        Button printButton = new Button(\"Print Simple ICM image...\");\n+        printButton.addActionListener(new BitmaskImage());\n+        f.add(printButton);\n+        f.pack();\n+        return f;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+         PassFailJFrame.builder()\n+                .instructions(INSTRUCTIONS)\n+                .testUI(BitmaskImage::initTest)\n+                .columns(35)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/print\/PrinterJob\/ImagePrinting\/BitmaskImage.java","additions":142,"deletions":0,"binary":false,"changes":142,"status":"added"},{"patch":"@@ -0,0 +1,186 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6436437\n+ * @requires (os.family == \"windows\")\n+ * @summary Test setIconImages() for client-decorated JFrame\n+ * @library ..\/..\/regtesthelpers\n+ * @run main\/manual ClientDecoratedIconTest\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.FlowLayout;\n+import java.awt.Graphics;\n+import java.awt.Image;\n+import java.awt.image.BufferedImage;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JRootPane;\n+import javax.swing.JTextArea;\n+\n+public class ClientDecoratedIconTest extends SwingTestHelper implements ActionListener {\n+    JButton passed;\n+    JButton failed;\n+\n+    java.util.List<Image> icons1;\n+    java.util.List<Image> icons2;\n+    IconFrame frame1;\n+    IconFrame frame2;\n+\n+    Object lock = new Object();\n+    boolean done = false;\n+\n+    protected String getInstructions() {\n+        StringBuilder instructionsStr = new StringBuilder();\n+        instructionsStr.append(\"This tests the functionality of the setIconImages() API\\n\");\n+        instructionsStr.append(\"You will see two JFrames with custom icons1.  Both JFrames should have the same icon: a colored box.\\n\");\n+        instructionsStr.append(\"If either of the JFrames has the default, coffe-cup icon, the test fails.\\n\");\n+        instructionsStr.append(\"If the JFrames DO NOT both have the same colored box as their icon, the test fails.\\n\");\n+        instructionsStr.append(\"If both JFrames DO have the same colored box as their icon, then the test passes.\");\n+        return instructionsStr.toString();\n+    }\n+\n+    protected Component createContentPane() {\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new BorderLayout());\n+        JTextArea instructions = new JTextArea(getInstructions());\n+        panel.add(instructions, BorderLayout.CENTER);\n+\n+        passed = new JButton(\"Icons match (PASS)\");\n+        passed.addActionListener(this);\n+        failed = new JButton(\"Icons don't match (FAIL)\");\n+        failed.addActionListener(this);\n+        JPanel btnPanel = new JPanel();\n+        btnPanel.setLayout(new FlowLayout());\n+        btnPanel.add(passed);\n+        btnPanel.add(failed);\n+        panel.add(btnPanel, BorderLayout.SOUTH);\n+\n+        return panel;\n+    }\n+\n+    public void onEDT10() throws IOException {\n+        Image img1 = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\n+        Graphics g = img1.getGraphics();\n+        g.setColor(Color.green);\n+        g.fillRect(0, 0, 16, 16);\n+        g.dispose();\n+        Image img2 = new BufferedImage(24, 24, BufferedImage.TYPE_INT_ARGB);\n+        g = img2.getGraphics();\n+        g.setColor(Color.magenta);\n+        g.fillRect(0, 0, 24, 24);\n+        g.dispose();\n+        Image img3 = new BufferedImage(32, 32, BufferedImage.TYPE_INT_ARGB);\n+        g = img3.getGraphics();\n+        g.setColor(Color.red);\n+        g.fillRect(0, 0, 32, 32);\n+        g.dispose();\n+        Image img4 = new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB);\n+        g = img4.getGraphics();\n+        g.setColor(Color.blue);\n+        g.fillRect(0, 0, 64, 64);\n+        g.dispose();\n+\n+        icons1 = new ArrayList(4);\n+        icons1.add(img1);\n+        icons1.add(img2);\n+        icons1.add(img3);\n+        icons1.add(img4);\n+\n+        icons2 = new ArrayList(4);\n+        icons2.add(img4);\n+        icons2.add(img3);\n+        icons2.add(img2);\n+        icons2.add(img1);\n+\n+        frame1 = new IconFrame(icons1);\n+        frame2 = new IconFrame(icons2);\n+\n+        frame1.setLocation(50, 250);\n+        frame2.setLocation(275, 250);\n+\n+        frame1.setVisible(true);\n+        frame2.setVisible(true);\n+    }\n+\n+    public void onEDT20() {\n+        waitForCondition(new Runnable() {\n+            public void run() {\n+                while (true) {\n+                    synchronized(lock) {\n+                        if (done) {\n+                            return;\n+                        }\n+                    }\n+                    try {\n+                        Thread.sleep(250);\n+                    }\n+                    catch(InterruptedException e) {}\n+                }\n+            }\n+        });\n+        System.out.println(\"done waiting\");\n+    }\n+\n+    public void onEDT30() {\n+        \/\/ Needed so waitForCondition() has something to wait for :)\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        System.out.println(\"actionPerformed()\");\n+        if (e.getSource() == passed) {\n+            synchronized(lock) {\n+                done = true;\n+            }\n+        }\n+        if (e.getSource() == failed) {\n+            throw new RuntimeException(\"Test Failed\");\n+        }\n+    }\n+\n+    class IconFrame extends JFrame {\n+        public IconFrame(java.util.List<Image> icons) {\n+            super(\"Custom Icon Frame\");\n+            setUndecorated(true);\n+            getRootPane().setWindowDecorationStyle(JRootPane.FRAME);\n+            setIconImages(icons);\n+            setSize(200, 200);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        new ClientDecoratedIconTest().run(args);\n+        System.out.println(\"end of main()\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFrame\/ClientDecoratedIcon\/ClientDecoratedIconTest.java","additions":186,"deletions":0,"binary":false,"changes":186,"status":"added"},{"patch":"@@ -0,0 +1,173 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6436437\n+ * @requires (os.family == \"windows\")\n+ * @summary Test setIconImages() for client-decorated JDialog\n+ * @library ..\/..\/regtesthelpers\n+ * @run main\/manual DialogIconTest\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Component;\n+import java.awt.FlowLayout;\n+import java.awt.Graphics;\n+import java.awt.Frame;\n+import java.awt.Image;\n+import java.awt.image.BufferedImage;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import javax.swing.JButton;\n+import javax.swing.JDialog;\n+import javax.swing.JPanel;\n+import javax.swing.JRootPane;\n+import javax.swing.JTextArea;\n+\n+public class DialogIconTest extends SwingTestHelper implements ActionListener {\n+    JButton passed;\n+    JButton failed;\n+\n+    java.util.List<Image> icons1;\n+    IconDialog dialog1;\n+\n+    Object lock = new Object();\n+    boolean done = false;\n+\n+    protected String getInstructions() {\n+        StringBuilder instructionsStr = new StringBuilder();\n+        instructionsStr.append(\"This tests the functionality of the setIconImages() API\\n\");\n+        instructionsStr.append(\"You will see a client-decorated JDialog.  The JDialog should have a custom icon: a solid-colored box.\\n\");\n+        instructionsStr.append(\"If the JDialog has a colored box for an icon, then the test passes.\\n\");\n+        instructionsStr.append(\"If the JDialog has the default icon, then the test fails.\\n\");\n+        return instructionsStr.toString();\n+    }\n+\n+    protected Component createContentPane() {\n+        JPanel panel = new JPanel();\n+        panel.setLayout(new BorderLayout());\n+        JTextArea instructions = new JTextArea(getInstructions());\n+        panel.add(instructions, BorderLayout.CENTER);\n+\n+        passed = new JButton(\"Solid-color Icon (PASS)\");\n+        passed.addActionListener(this);\n+        failed = new JButton(\"Default Icon (FAIL)\");\n+        failed.addActionListener(this);\n+        JPanel btnPanel = new JPanel();\n+        btnPanel.setLayout(new FlowLayout());\n+        btnPanel.add(passed);\n+        btnPanel.add(failed);\n+        panel.add(btnPanel, BorderLayout.SOUTH);\n+\n+        return panel;\n+    }\n+\n+    public void onEDT10() throws IOException {\n+        Image img1 = new BufferedImage(16, 16, BufferedImage.TYPE_INT_ARGB);\n+        Graphics g = img1.getGraphics();\n+        g.setColor(Color.green);\n+        g.fillRect(0, 0, 16, 16);\n+        g.dispose();\n+        Image img2 = new BufferedImage(24, 24, BufferedImage.TYPE_INT_ARGB);\n+        g = img2.getGraphics();\n+        g.setColor(Color.magenta);\n+        g.fillRect(0, 0, 24, 24);\n+        g.dispose();\n+        Image img3 = new BufferedImage(32, 32, BufferedImage.TYPE_INT_ARGB);\n+        g = img3.getGraphics();\n+        g.setColor(Color.red);\n+        g.fillRect(0, 0, 32, 32);\n+        g.dispose();\n+        Image img4 = new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB);\n+        g = img4.getGraphics();\n+        g.setColor(Color.blue);\n+        g.fillRect(0, 0, 64, 64);\n+        g.dispose();\n+\n+        icons1 = new ArrayList(4);\n+        icons1.add(img1);\n+        icons1.add(img2);\n+        icons1.add(img3);\n+        icons1.add(img4);\n+\n+        dialog1 = new IconDialog(icons1);\n+        dialog1.setLocation(50, 250);\n+        dialog1.setVisible(true);\n+    }\n+\n+    public void onEDT20() {\n+        waitForCondition(new Runnable() {\n+            public void run() {\n+                while (true) {\n+                    synchronized(lock) {\n+                        if (done) {\n+                            return;\n+                        }\n+                    }\n+                    try {\n+                        Thread.sleep(250);\n+                    }\n+                    catch(InterruptedException e) {}\n+                }\n+            }\n+        });\n+        System.out.println(\"done waiting\");\n+    }\n+\n+    public void onEDT30() {\n+        \/\/ Needed so waitForCondition() has something to wait for :)\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        System.out.println(\"actionPerformed()\");\n+        if (e.getSource() == passed) {\n+            synchronized(lock) {\n+                done = true;\n+            }\n+        }\n+        if (e.getSource() == failed) {\n+            throw new RuntimeException(\"Test Failed\");\n+        }\n+    }\n+\n+    class IconDialog extends JDialog {\n+        public IconDialog(java.util.List<Image> icons) {\n+            super((Frame)null, \"Custom Icon Frame\", false);\n+            setUndecorated(true);\n+            getRootPane().setWindowDecorationStyle(JRootPane.FRAME);\n+            setIconImages(icons);\n+            setSize(200, 200);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        new DialogIconTest().run(args);\n+        System.out.println(\"end of main()\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFrame\/ClientDecoratedIcon\/DialogIconTest.java","additions":173,"deletions":0,"binary":false,"changes":173,"status":"added"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2006, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 6425606\n+ * @requires (os.family == \"windows\")\n+ * @summary Test JDialog's inheritance of icons set with JFrame.setIconImages()\n+ * @library ..\/..\/regtesthelpers\n+ * @run main\/manual DialogInheritIcon\n+ *\/\n+\n+import javax.swing.JDialog;\n+\n+public class DialogInheritIcon extends ClientDecoratedIconTest {\n+    JDialog dialog1;\n+    JDialog dialog2;\n+\n+    \/*\n+     * @Override\n+     *\/\n+    protected String getInstructions() {\n+        StringBuilder instructionsStr = new StringBuilder();\n+        instructionsStr.append(\"This tests the functionality of JDialog-inherited icons set using the setIconImages() API.\\n\");\n+        instructionsStr.append(\"You will see two JFrames with custom icons, each with a child JDialog below it.\\n\");\n+        instructionsStr.append(\"Both JDialogs should have the same icon: a colored box.\\n\");\n+        instructionsStr.append(\"If either of the JDialogs has the default, coffe-cup icon, the test fails.\\n\");\n+        instructionsStr.append(\"If the JDialogs DO NOT both have the same colored box as their icon, the test fails.\\n\");\n+        instructionsStr.append(\"If both JDialogs DO have the same colored box as their icon, then the test passes.\\n\");\n+        instructionsStr.append(\"Note: If the JDialog icons don't match the icons of the parent JFrame, that is OK.\");\n+        return instructionsStr.toString();\n+    }\n+\n+    public void onEDT15() {\n+        createDialogs();\n+        dialog1.setVisible(true);\n+        dialog2.setVisible(true);\n+    }\n+\n+    protected void createDialogs() {\n+        dialog1 = new JDialog(frame1, \"Child JDialog 1\", false);\n+        dialog1.setBounds(frame1.getLocation().x, frame1.getLocation().y + frame1.getSize().height + 5, 200, 200);\n+        dialog2 = new JDialog(frame2, \"Child JDialog 2\", false);\n+        dialog2.setBounds(frame2.getLocation().x, frame2.getLocation().y + frame2.getSize().height + 5, 200, 200);\n+    }\n+\n+    public static void main(String[] args) throws Throwable {\n+        new DialogInheritIcon().run(args);\n+        System.out.println(\"end of main()\");\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFrame\/ClientDecoratedIcon\/DialogInheritIcon.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,147 @@\n+\/*\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4532590\n+ * @summary Tests that selection is not painted when highlighter is set to null\n+ * @run main bug4532590\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.image.BufferedImage;\n+import javax.swing.JTextArea;\n+import javax.swing.JTextPane;\n+import javax.swing.text.BadLocationException;\n+import javax.swing.text.DefaultStyledDocument;\n+import javax.swing.text.JTextComponent;\n+import javax.swing.text.SimpleAttributeSet;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4532590 {\n+\n+    static final int SELECTION_START  = 5;\n+    static final int SELECTION_END    = 10;\n+    static final String TEXT          = \"Typein the missing word.\";\n+\n+    static final Color TEXT_FG        = Color.BLACK;\n+    static final Color TEXT_BG        = Color.WHITE;\n+    static final Color SELECTION_FG   = Color.RED;\n+    static final Color SELECTION_BG   = Color.YELLOW;\n+\n+    JTextComponent[] comps;\n+    JTextPane pane;\n+    JTextArea area, warea;\n+\n+    int selFG = SELECTION_FG.getRGB();\n+    int selBG = SELECTION_BG.getRGB();\n+\n+    public bug4532590() throws BadLocationException {\n+        \/\/ text pane\n+        pane = new JTextPane();\n+        pane.setContentType(\"text\/plain\");\n+\n+        \/\/ populate the pane\n+        DefaultStyledDocument dsd = new DefaultStyledDocument();\n+        dsd.insertString(0, \"\\n\" + TEXT + \"\\n\\n\", new SimpleAttributeSet());\n+        pane.setDocument(dsd);\n+\n+        \/\/ text area\n+        area = new JTextArea();\n+        area.setText(\"\\n\" + TEXT);\n+\n+        \/\/ wrapped text area\n+        warea = new JTextArea();\n+        warea.setText(\"\\n\" + TEXT);\n+\n+        comps = new JTextComponent[3];\n+        comps[0] = pane;\n+        comps[1] = area;\n+        comps[2] = warea;\n+    }\n+\n+    void initComp(JTextComponent comp) {\n+        comp.setEditable(false);\n+        comp.setForeground(TEXT_FG);\n+        comp.setBackground(TEXT_BG);\n+        comp.setSelectedTextColor(SELECTION_FG);\n+        comp.setSelectionColor(SELECTION_BG);\n+        comp.setHighlighter(null);\n+        comp.setSize(comp.getPreferredSize());\n+\n+        comp.setSelectionStart(SELECTION_START);\n+        comp.setSelectionEnd(SELECTION_END);\n+        comp.getCaret().setSelectionVisible(true);\n+    }\n+\n+    \/**\n+     * Paint given component on an offscreen buffer\n+     *\/\n+    BufferedImage drawComp(JTextComponent comp) {\n+        int w = comp.getWidth();\n+        int h = comp.getHeight();\n+\n+        BufferedImage img =\n+            new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);\n+        comp.paint(img.createGraphics());\n+        return img;\n+    }\n+\n+    void testComp(JTextComponent comp) {\n+        initComp(comp);\n+        BufferedImage img = drawComp(comp);\n+        int w = img.getWidth(null);\n+        int h = img.getHeight(null);\n+\n+        \/\/ scan the image\n+        \/\/ there should be no SELECTION_FG or SELECTION_BG pixels\n+        for (int i = 0; i < w; i++) {\n+            for (int j = 0; j < h; j++) {\n+                int rgb = img.getRGB(i, j);\n+                if (rgb == selFG) {\n+                    throw new RuntimeException(\n+                                  \"Failed: selection foreground painted\");\n+                } else if (rgb == selBG) {\n+                    throw new RuntimeException(\n+                                  \"Failed: selection background painted\");\n+                }\n+            }\n+        }\n+    }\n+\n+    void test() {\n+        for (int i = 0; i < comps.length; i++) {\n+            testComp(comps[i]);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                new bug4532590().test();\n+            } catch (BadLocationException e) {\n+                throw new RuntimeException(e);\n+            }\n+        });\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/text\/JTextComponent\/bug4532590.java","additions":147,"deletions":0,"binary":false,"changes":147,"status":"added"}]}