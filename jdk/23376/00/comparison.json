{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -220,1 +220,1 @@\n-    protected ML_KEM_KeyPair generateKemKeyPair(byte[] kem_d, byte[] kem_z) {\n+    protected ML_KEM_KeyPair generateKemKeyPair(byte[] kem_d_z) {\n@@ -230,1 +230,1 @@\n-        var kPkeKeyPair = generateK_PkeKeyPair(kem_d);\n+        var kPkeKeyPair = generateK_PkeKeyPair(kem_d_z);\n@@ -249,1 +249,1 @@\n-        System.arraycopy(kem_z, 0, decapsKey,\n+        System.arraycopy(kem_d_z, 32, decapsKey,\n@@ -370,1 +370,1 @@\n-        mlKemG.update(seed);\n+        mlKemG.update(seed, 0, 32);\n@@ -374,0 +374,1 @@\n+        mlKemG.reset();\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,6 @@\n+    public static byte[] seedToExpandedPrivate(String pname, byte[] seed) {\n+        return new ML_KEM(pname).generateKemKeyPair(seed)\n+                .decapsulationKey()\n+                .keyBytes();\n+    }\n+\n@@ -54,1 +60,1 @@\n-            byte[] seed = new byte[32];\n+            byte[] seedAndZ = new byte[64];\n@@ -56,3 +62,1 @@\n-            r.nextBytes(seed);\n-            byte[] z = new byte[32];\n-            r.nextBytes(z);\n+            r.nextBytes(seedAndZ);\n@@ -62,7 +66,2 @@\n-            try {\n-                kp = mlKem.generateKemKeyPair(seed, z);\n-            } finally {\n-                Arrays.fill(seed, (byte)0);\n-                Arrays.fill(z, (byte)0);\n-            }\n-            return new byte[][] {\n+            kp = mlKem.generateKemKeyPair(seedAndZ);\n+            return new byte[][]{\n@@ -70,0 +69,1 @@\n+                    seedAndZ,\n@@ -100,0 +100,9 @@\n+\n+        @Override\n+        protected byte[] implGenAlt(String name, byte[] key) {\n+            if (key.length == 64) {\n+                return seedToExpandedPrivate(name, key);\n+            } else {\n+                return null;\n+            }\n+        }\n@@ -186,1 +195,1 @@\n-            super(\"ML-KEM\", \"ML-KEM-512\", \"ML-KEM-768\", \"ML-KEM-1024\");\n+            super(\"ML-KEM\", new KF(), \"ML-KEM-512\", \"ML-KEM-768\", \"ML-KEM-1024\");\n@@ -190,1 +199,1 @@\n-            super(\"ML-KEM\", name);\n+            super(\"ML-KEM\", new KF(name), name);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/ML_KEM_Impls.java","additions":23,"deletions":14,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import sun.security.util.DerInputStream;\n@@ -42,0 +41,1 @@\n+import java.util.function.BiFunction;\n@@ -53,0 +53,15 @@\n+\/\/\/ Besides the [PKCS8Key#key] field, this class might contain an optional\n+\/\/\/ alternative key stored in [#alt].\n+\/\/\/\n+\/\/\/ 1. If there is only `key`, there is only one private key encoding.\n+\/\/\/ 2. If both `key` and `alt` exist. `key` is used in encoding,\n+\/\/\/    and `alt` is used in calculation.\n+\/\/\/\n+\/\/\/ This allows ML-KEM or ML-DSA to encode the seed used in key pair\n+\/\/\/ generation as the private key. In this case, `alt` will be the\n+\/\/\/ expanded key as described in the FIPS documents. If the seed is\n+\/\/\/ lost, `key` will be the expanded key and `alt` will be null.\n+\/\/\/\n+\/\/\/ For algorithms that do not have this \"alternative\" key format,\n+\/\/\/ only `key` will be included and `alt` must be `null`.\n+\/\/\/\n@@ -60,1 +75,1 @@\n-    private final byte[] rawBytes;\n+    private final byte[] alt;\n@@ -64,3 +79,10 @@\n-    \/\/\/ Ctor from family name, parameter set name, raw key bytes.\n-    \/\/\/ Key bytes won't be cloned, caller must relinquish ownership\n-    public NamedPKCS8Key(String fname, String pname, byte[] rawBytes) {\n+    \/\/\/ Ctor from raw key bytes.\n+    \/\/\/\n+    \/\/\/ `rawBytes` and `alt` won't be cloned, caller\n+    \/\/\/ must relinquish ownership.\n+    \/\/\/\n+    \/\/\/ @param fname family name\n+    \/\/\/ @param pname parameter set name\n+    \/\/\/ @param rawBytes raw key bytes\n+    \/\/\/ @param alt alternative key format, can be `null`.\n+    public NamedPKCS8Key(String fname, String pname, byte[] rawBytes, byte[] alt) {\n@@ -69,0 +91,1 @@\n+        this.alt = alt;\n@@ -74,8 +97,1 @@\n-        this.rawBytes = rawBytes;\n-\n-        DerValue val = new DerValue(DerValue.tag_OctetString, rawBytes);\n-        try {\n-            this.key = val.toByteArray();\n-        } finally {\n-            val.clear();\n-        }\n+        this.key = rawBytes;\n@@ -84,2 +100,12 @@\n-    \/\/\/ Ctor from family name, and PKCS #8 bytes\n-    public NamedPKCS8Key(String fname, byte[] encoded) throws InvalidKeyException {\n+    \/\/\/ Ctor from family name and PKCS #8 encoding\n+    \/\/\/\n+    \/\/\/ @param fname family name\n+    \/\/\/ @param encoded PKCS #8 encoding. It is copied so caller can modify\n+    \/\/\/     it after the method call.\n+    \/\/\/ @param genAlt a function that is able to calculate the alternative\n+    \/\/\/     key from raw key inside `encoded`. In the case of seed\/expanded,\n+    \/\/\/     the function will calculate expanded from seed. If it recognizes\n+    \/\/\/     the input being already the expanded key, it must return `null`.\n+    \/\/\/     If there is no alternative key format, `getAlt` must be `null`.\n+    public NamedPKCS8Key(String fname, byte[] encoded,\n+            BiFunction<String, byte[], byte[]> genAlt) throws InvalidKeyException {\n@@ -88,8 +114,4 @@\n-        try {\n-            paramSpec = new NamedParameterSpec(algid.getName());\n-            if (algid.getEncodedParams() != null) {\n-                throw new InvalidKeyException(\"algorithm identifier has params\");\n-            }\n-            rawBytes = new DerInputStream(key).getOctetString();\n-        } catch (IOException e) {\n-            throw new InvalidKeyException(\"Cannot parse input\", e);\n+        this.alt = genAlt == null ? null : genAlt.apply(algid.getName(), this.key);\n+        paramSpec = new NamedParameterSpec(algid.getName());\n+        if (algid.getEncodedParams() != null) {\n+            throw new InvalidKeyException(\"algorithm identifier has params\");\n@@ -109,1 +131,17 @@\n-        return rawBytes;\n+        return key;\n+    }\n+\n+    \/\/\/ Returns the reference to the key that will be used in computations\n+    \/\/\/ inside `NamedKEM` or `NamedSignature` between `alt` (if exists)\n+    \/\/\/ and `key`.\n+    \/\/\/\n+    \/\/\/ This method currently simply chooses the longer one, where it is the\n+    \/\/\/ expanded format. If the key used in computations is not the longer\n+    \/\/\/ one for an algorithm, consider adding overridable methods to\n+    \/\/\/ `NamedKEM` and `NamedSignature` to extract it.\n+    public byte[] getExpanded() {\n+        if (alt == null) {\n+            return key;\n+        } else {\n+            return alt.length > key.length ? alt : key;\n+        }\n@@ -131,1 +169,0 @@\n-        Arrays.fill(rawBytes, (byte)0);\n@@ -133,0 +170,3 @@\n+        if (alt != null) {\n+            Arrays.fill(alt, (byte)0);\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/NamedPKCS8Key.java","additions":66,"deletions":26,"binary":false,"changes":92,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+\n@@ -31,1 +32,0 @@\n-import java.util.Arrays;\n@@ -35,0 +35,5 @@\n+    public static byte[] seedToExpandedPrivate(String pname, byte[] seed) {\n+        var impl = new ML_DSA(name2int(pname));\n+        return impl.skEncode(impl.generateKeyPairInternal(seed).privateKey());\n+    }\n+\n@@ -78,9 +83,5 @@\n-            try {\n-                return new byte[][]{\n-                        mlDsa.pkEncode(kp.publicKey()),\n-                        mlDsa.skEncode(kp.privateKey())\n-                };\n-            } finally {\n-                kp.privateKey().destroy();\n-                Arrays.fill(seed, (byte)0);\n-            }\n+            return new byte[][]{\n+                    mlDsa.pkEncode(kp.publicKey()),\n+                    seed,\n+                    mlDsa.skEncode(kp.privateKey())\n+            };\n@@ -115,0 +116,9 @@\n+\n+        @Override\n+        protected byte[] implGenAlt(String name, byte[] key) {\n+            if (key.length == 32) {\n+                return seedToExpandedPrivate(name, key);\n+            } else {\n+                return null;\n+            }\n+        }\n@@ -137,1 +147,1 @@\n-            super(\"ML-DSA\", \"ML-DSA-44\", \"ML-DSA-65\", \"ML-DSA-87\");\n+            super(\"ML-DSA\", new KF(), \"ML-DSA-44\", \"ML-DSA-65\", \"ML-DSA-87\");\n@@ -140,1 +150,1 @@\n-            super(\"ML-DSA\", name);\n+            super(\"ML-DSA\", new KF(name), name);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ML_DSA_Impls.java","additions":23,"deletions":13,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-import java.util.Objects;\n@@ -54,0 +53,1 @@\n+    private final NamedKeyFactory fac;\n@@ -58,0 +58,2 @@\n+    \/\/\/ @param fac the `KeyFactory` used to translate foreign keys and\n+    \/\/\/         perform key validation\n@@ -59,1 +61,1 @@\n-    protected NamedKEM(String fname, String... pnames) {\n+    protected NamedKEM(String fname, NamedKeyFactory fac, String... pnames) {\n@@ -68,0 +70,1 @@\n+        this.fac = fac;\n@@ -79,2 +82,1 @@\n-        var nk = (NamedX509Key) new NamedKeyFactory(fname, pnames)\n-                .engineTranslateKey(publicKey);\n+        var nk = (NamedX509Key) fac.engineTranslateKey(publicKey);\n@@ -95,3 +97,2 @@\n-        var nk = (NamedPKCS8Key) new NamedKeyFactory(fname, pnames)\n-                .engineTranslateKey(privateKey);\n-        var sk = nk.getRawBytes();\n+        var nk = (NamedPKCS8Key) fac.engineTranslateKey(privateKey);\n+        var sk = nk.getExpanded();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/NamedKEM.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,0 @@\n-import java.util.Objects;\n@@ -61,1 +60,1 @@\n-public class NamedKeyFactory extends KeyFactorySpi {\n+public abstract class NamedKeyFactory extends KeyFactorySpi {\n@@ -132,6 +131,2 @@\n-                var bytes = rks.getKeyArr();\n-                try {\n-                    return new NamedPKCS8Key(fname, pnames[0], bytes);\n-                } finally {\n-                    Arrays.fill(bytes, (byte) 0);\n-                }\n+                var raw = rks.getKeyArr();\n+                return new NamedPKCS8Key(fname, pnames[0], raw, implGenAlt(pnames[0], raw));\n@@ -144,6 +139,2 @@\n-                var bytes = espec.getEncoded();\n-                try {\n-                    return new NamedPKCS8Key(fname, pnames[0], bytes);\n-                } finally {\n-                    Arrays.fill(bytes, (byte) 0);\n-                }\n+                var raw = espec.getEncoded();\n+                return new NamedPKCS8Key(fname, pnames[0], raw, implGenAlt(pnames[0], raw));\n@@ -160,1 +151,1 @@\n-        var k = new NamedPKCS8Key(fname, bytes);\n+        var k = new NamedPKCS8Key(fname, bytes, this::implGenAlt);\n@@ -263,0 +254,1 @@\n+                var raw = key.getEncoded();\n@@ -264,2 +256,2 @@\n-                        ? new NamedPKCS8Key(fname, name, key.getEncoded())\n-                        : new NamedX509Key(fname, name, key.getEncoded());\n+                        ? new NamedPKCS8Key(fname, name, raw, implGenAlt(name, raw))\n+                        : new NamedX509Key(fname, name, raw);\n@@ -288,0 +280,8 @@\n+\n+    \/\/\/ User-defined function to generate the alternative key inside\n+    \/\/\/ a [NamedPKCS8Key].\n+    \/\/\/\n+    \/\/\/ This method will be called when the key factory is constructing\n+    \/\/\/ a private key. If the input `key` is a seed, the expanded key must\n+    \/\/\/ be returned. If `key` is in expanded format, `null` must be returned.\n+    protected abstract byte[] implGenAlt(String name, byte[] key);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/NamedKeyFactory.java","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,0 @@\n-import java.util.Objects;\n@@ -98,0 +97,7 @@\n+\/\/\/ If the private key of an algorithm can be encoded in two formats, the\n+\/\/\/ encoded format will be the `key` of the `NamedPKCS8Key`, and the other\n+\/\/\/ format will be the `alt` field. When there are two formats (for example,\n+\/\/\/ \"seed\" and \"expanded\"), the [#implGenerateKeyPair] must return the encoding\n+\/\/\/ format as the 2nd element and the other format as the 3rd element. All\n+\/\/\/ calculations inside `NamedKEM` or `NamedSignature` use the \"other\" format.\n+\/\/\/\n@@ -167,1 +173,2 @@\n-                new NamedPKCS8Key(fname, pname, keys[1]));\n+                new NamedPKCS8Key(fname, pname, keys[1],\n+                        keys.length == 2 ? null : keys[2]));\n@@ -174,1 +181,4 @@\n-    \/\/\/ @return public key and private key (in this order) in raw bytes\n+    \/\/\/ @return the public key, the private key, and the alternative\n+    \/\/\/         format of the private key (in this order) in raw bytes.\n+    \/\/\/         If there is no alternative format, the 3rd element\n+    \/\/\/         must be `null` or simply omitted.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/NamedKeyPairGenerator.java","additions":14,"deletions":4,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-import java.util.Objects;\n@@ -54,0 +53,1 @@\n+    private final NamedKeyFactory fac;\n@@ -68,0 +68,2 @@\n+    \/\/\/ @param fac the `KeyFactory` used to translate foreign keys and\n+    \/\/\/         perform key validation\n@@ -69,1 +71,1 @@\n-    protected NamedSignature(String fname, String... pnames) {\n+    protected NamedSignature(String fname, NamedKeyFactory fac, String... pnames) {\n@@ -78,0 +80,1 @@\n+        this.fac = fac;\n@@ -83,2 +86,1 @@\n-        var nk = (NamedX509Key) new NamedKeyFactory(fname, pnames)\n-                .engineTranslateKey(publicKey);\n+        var nk = (NamedX509Key) fac.engineTranslateKey(publicKey);\n@@ -95,2 +97,1 @@\n-        var nk = (NamedPKCS8Key) new NamedKeyFactory(fname, pnames)\n-                .engineTranslateKey(privateKey);\n+        var nk = (NamedPKCS8Key) fac.engineTranslateKey(privateKey);\n@@ -98,1 +99,1 @@\n-        secKey = nk.getRawBytes();\n+        secKey = nk.getExpanded();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/NamedSignature.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,1 +74,2 @@\n-    \/\/\/ Ctor from family name, and X.509 bytes\n+    \/\/\/ Ctor from family name, and X.509 bytes. Input byte array\n+    \/\/\/ is copied. Caller can modify it after the method call.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/NamedX509Key.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,261 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8340327\n- * @modules java.base\/sun.security.x509\n- *          java.base\/sun.security.pkcs\n- *          java.base\/sun.security.provider\n- *          java.base\/sun.security.util\n- * @library \/test\/lib\n- *\/\n-import jdk.test.lib.Asserts;\n-import jdk.test.lib.Utils;\n-import jdk.test.lib.security.SeededSecureRandom;\n-import sun.security.pkcs.NamedPKCS8Key;\n-import sun.security.provider.NamedKeyFactory;\n-import sun.security.provider.NamedKeyPairGenerator;\n-import sun.security.util.RawKeySpec;\n-import sun.security.x509.NamedX509Key;\n-\n-import java.security.*;\n-import java.security.spec.*;\n-\n-public class NamedKeyFactoryTest {\n-\n-    private static final SeededSecureRandom RAND = SeededSecureRandom.one();\n-\n-    public static void main(String[] args) throws Exception {\n-        Security.addProvider(new ProviderImpl());\n-\n-        var g = KeyPairGenerator.getInstance(\"sHA\");\n-        var g2 = KeyPairGenerator.getInstance(\"ShA-256\");\n-        var g5 = KeyPairGenerator.getInstance(\"SHa-512\");\n-        var kf = KeyFactory.getInstance(\"ShA\");\n-        var kf2 = KeyFactory.getInstance(\"Sha-256\");\n-        var kf5 = KeyFactory.getInstance(\"Sha-512\");\n-\n-        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-256\");\n-        checkKeyPair(g2.generateKeyPair(), \"SHA\", \"SHA-256\");\n-        checkKeyPair(g5.generateKeyPair(), \"SHA\", \"SHA-512\");\n-\n-        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-256\");\n-        checkKeyPair(g2.generateKeyPair(), \"SHA\", \"SHA-256\");\n-        checkKeyPair(g5.generateKeyPair(), \"SHA\", \"SHA-512\");\n-\n-        Utils.runAndCheckException(() -> g.initialize(NamedParameterSpec.ED448),\n-                InvalidAlgorithmParameterException.class); \/\/ wrong pname\n-        Utils.runAndCheckException(() -> g.initialize(new NamedParameterSpec(\"SHA-384\")),\n-                InvalidAlgorithmParameterException.class); \/\/ wrong pname\n-\n-        Utils.runAndCheckException(() -> g5.initialize(new NamedParameterSpec(\"SHA-256\")),\n-                InvalidAlgorithmParameterException.class); \/\/ diff pname\n-        g5.initialize(new NamedParameterSpec(\"SHA-512\"));\n-\n-        g.initialize(new NamedParameterSpec(\"sHA-512\"));\n-        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-512\");\n-        g.initialize(new NamedParameterSpec(\"ShA-256\"));\n-        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-256\");\n-\n-        var pk = new NamedX509Key(\"sHa\", \"ShA-256\", RAND.nBytes(2));\n-        var sk = new NamedPKCS8Key(\"sHa\", \"SHa-256\", RAND.nBytes(2));\n-        checkKey(pk, \"sHa\", \"ShA-256\");\n-        checkKey(sk, \"sHa\", \"SHa-256\");\n-\n-        Asserts.assertEquals(\"X.509\", pk.getFormat());\n-        Asserts.assertEquals(\"PKCS#8\", sk.getFormat());\n-\n-        var pkSpec = kf.getKeySpec(pk, X509EncodedKeySpec.class);\n-        var skSpec = kf.getKeySpec(sk, PKCS8EncodedKeySpec.class);\n-\n-        kf2.getKeySpec(pk, X509EncodedKeySpec.class);\n-        kf2.getKeySpec(sk, PKCS8EncodedKeySpec.class);\n-        Utils.runAndCheckException(() -> kf5.getKeySpec(pk, X509EncodedKeySpec.class),\n-                InvalidKeySpecException.class); \/\/ wrong KF\n-        Utils.runAndCheckException(() -> kf5.getKeySpec(sk, PKCS8EncodedKeySpec.class),\n-                InvalidKeySpecException.class);\n-        Utils.runAndCheckException(() -> kf.getKeySpec(pk, PKCS8EncodedKeySpec.class),\n-                InvalidKeySpecException.class); \/\/ wrong KeySpec\n-        Utils.runAndCheckException(() -> kf.getKeySpec(sk, X509EncodedKeySpec.class),\n-                InvalidKeySpecException.class);\n-\n-        checkKey(kf.generatePublic(pkSpec), \"SHA\", \"SHA-256\");\n-        Utils.runAndCheckException(() -> kf.generatePrivate(pkSpec),\n-                InvalidKeySpecException.class);\n-\n-        checkKey(kf.generatePrivate(skSpec), \"SHA\", \"SHA-256\");\n-        Utils.runAndCheckException(() -> kf.generatePublic(skSpec),\n-                InvalidKeySpecException.class);\n-\n-        checkKey(kf2.generatePrivate(skSpec), \"SHA\", \"SHA-256\");\n-        checkKey(kf2.generatePublic(pkSpec), \"SHA\", \"SHA-256\");\n-\n-        Utils.runAndCheckException(() -> kf5.generatePublic(pkSpec),\n-                InvalidKeySpecException.class); \/\/ wrong KF\n-        Utils.runAndCheckException(() -> kf5.generatePublic(skSpec),\n-                InvalidKeySpecException.class);\n-\n-        \/\/ The private RawKeySpec and unnamed RAW EncodedKeySpec\n-        var prk = kf.getKeySpec(pk, RawKeySpec.class);\n-        Asserts.assertEqualsByteArray(prk.getKeyArr(), pk.getRawBytes());\n-        var prk2 = kf.getKeySpec(pk, EncodedKeySpec.class);\n-        Asserts.assertEquals(\"RAW\", prk2.getFormat());\n-        Asserts.assertEqualsByteArray(prk.getKeyArr(), prk2.getEncoded());\n-\n-        Asserts.assertEqualsByteArray(kf2.generatePublic(prk).getEncoded(), pk.getEncoded());\n-        Utils.runAndCheckException(() -> kf.generatePublic(prk), InvalidKeySpecException.class); \/\/ no pname\n-        Asserts.assertEqualsByteArray(kf2.generatePublic(prk2).getEncoded(), pk.getEncoded());\n-        Utils.runAndCheckException(() -> kf.generatePublic(prk2), InvalidKeySpecException.class); \/\/ no pname\n-\n-        var srk = kf.getKeySpec(sk, RawKeySpec.class);\n-        Asserts.assertEqualsByteArray(srk.getKeyArr(), sk.getRawBytes());\n-        var srk2 = kf.getKeySpec(sk, EncodedKeySpec.class);\n-        Asserts.assertEquals(\"RAW\", srk2.getFormat());\n-        Asserts.assertEqualsByteArray(srk2.getEncoded(), sk.getRawBytes());\n-\n-        Asserts.assertEqualsByteArray(kf2.generatePrivate(srk).getEncoded(), sk.getEncoded());\n-        Utils.runAndCheckException(() -> kf.generatePrivate(srk), InvalidKeySpecException.class); \/\/ no pname\n-        Asserts.assertEqualsByteArray(kf2.generatePrivate(srk2).getEncoded(), sk.getEncoded());\n-        Utils.runAndCheckException(() -> kf.generatePrivate(srk2), InvalidKeySpecException.class); \/\/ no pname\n-\n-        var pk1 = new PublicKey() {\n-            public String getAlgorithm() { return \"SHA\"; }\n-            public String getFormat() { return \"RAW\"; }\n-            public byte[] getEncoded() { return RAND.nBytes(2); }\n-        };\n-        var pk2 = new PublicKey() {\n-            public String getAlgorithm() { return \"sHA-256\"; }\n-            public String getFormat() { return \"RAW\"; }\n-            public byte[] getEncoded() { return RAND.nBytes(2); }\n-        };\n-        var pk3 = new PublicKey() {\n-            public String getAlgorithm() { return \"SHA\"; }\n-            public String getFormat() { return \"RAW\"; }\n-            public byte[] getEncoded() { return RAND.nBytes(2); }\n-            public AlgorithmParameterSpec getParams() { return new NamedParameterSpec(\"sHA-256\"); }\n-        };\n-\n-        checkKey(kf2.translateKey(pk1), \"SHA\", \"SHA-256\");\n-        checkKey(kf.translateKey(pk2), \"SHA\", \"SHA-256\");\n-        checkKey(kf.translateKey(pk3), \"SHA\", \"SHA-256\");\n-\n-        Utils.runAndCheckException(() -> kf.translateKey(pk1), InvalidKeyException.class);\n-        Utils.runAndCheckException(() -> kf5.translateKey(pk2), InvalidKeyException.class);\n-        Utils.runAndCheckException(() -> kf5.translateKey(pk3), InvalidKeyException.class);\n-\n-        var sk1 = new PrivateKey() {\n-            public String getAlgorithm() { return \"SHA\"; }\n-            public String getFormat() { return \"RAW\"; }\n-            public byte[] getEncoded() { return RAND.nBytes(2); }\n-        };\n-        var sk2 = new PrivateKey() {\n-            public String getAlgorithm() { return \"sHA-256\"; }\n-            public String getFormat() { return \"RAW\"; }\n-            public byte[] getEncoded() { return RAND.nBytes(2); }\n-        };\n-        var sk3 = new PrivateKey() {\n-            public String getAlgorithm() { return \"SHA\"; }\n-            public String getFormat() { return \"RAW\"; }\n-            public byte[] getEncoded() { return RAND.nBytes(2); }\n-            public AlgorithmParameterSpec getParams() { return new NamedParameterSpec(\"sHA-256\"); }\n-        };\n-\n-        checkKey(kf2.translateKey(sk1), \"SHA\", \"SHA-256\");\n-        checkKey(kf.translateKey(sk2), \"SHA\", \"SHA-256\");\n-        checkKey(kf.translateKey(sk3), \"SHA\", \"SHA-256\");\n-\n-        Utils.runAndCheckException(() -> kf.translateKey(sk1), InvalidKeyException.class);\n-        Utils.runAndCheckException(() -> kf5.translateKey(sk2), InvalidKeyException.class);\n-        Utils.runAndCheckException(() -> kf5.translateKey(sk3), InvalidKeyException.class);\n-    }\n-\n-    static void checkKeyPair(KeyPair kp, String algName, String toString) {\n-        checkKey(kp.getPrivate(), algName, toString);\n-        checkKey(kp.getPublic(), algName, toString);\n-    }\n-\n-    static void checkKey(Key k, String algName, String pname) {\n-        Asserts.assertEquals(algName, k.getAlgorithm());\n-        Asserts.assertTrue(k.toString().contains(pname));\n-        if (k instanceof AsymmetricKey ak && ak.getParams() instanceof NamedParameterSpec nps) {\n-            Asserts.assertEquals(pname, nps.getName());\n-        }\n-    }\n-\n-    \/\/ Provider\n-\n-    public static class ProviderImpl extends Provider {\n-        public ProviderImpl() {\n-            super(\"P\", \"1\", \"...\");\n-            put(\"KeyFactory.SHA\", KF.class.getName());\n-            put(\"KeyFactory.SHA-256\", KF1.class.getName());\n-            put(\"KeyFactory.SHA-512\", KF2.class.getName());\n-            put(\"KeyPairGenerator.SHA\", KPG.class.getName());\n-            put(\"KeyPairGenerator.SHA-256\", KPG1.class.getName());\n-            put(\"KeyPairGenerator.SHA-512\", KPG2.class.getName());\n-        }\n-    }\n-    public static class KF extends NamedKeyFactory {\n-        public KF() {\n-            super(\"SHA\", \"SHA-256\", \"SHA-512\");\n-        }\n-    }\n-    public static class KF1 extends NamedKeyFactory {\n-        public KF1() {\n-            super(\"SHA\", \"SHA-256\");\n-        }\n-    }\n-    public static class KF2 extends NamedKeyFactory {\n-        public KF2() {\n-            super(\"SHA\", \"SHA-512\");\n-        }\n-    }\n-    public static class KPG extends NamedKeyPairGenerator {\n-        public KPG() {\n-            super(\"SHA\", \"SHA-256\", \"SHA-512\");\n-        }\n-\n-        public KPG(String pname) {\n-            super(\"SHA\", pname);\n-        }\n-\n-        @Override\n-        public byte[][] implGenerateKeyPair(String name, SecureRandom sr) {\n-            var out = new byte[2][];\n-            out[0] = RAND.nBytes(name.endsWith(\"256\") ? 2 : 4);\n-            out[1] = RAND.nBytes(name.endsWith(\"256\") ? 2 : 4);\n-            return out;\n-        }\n-    }\n-    public static class KPG1 extends KPG {\n-        public KPG1() {\n-            super(\"SHA-256\");\n-        }\n-    }\n-    public static class KPG2 extends KPG {\n-        public KPG2() {\n-            super(\"SHA-512\");\n-        }\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/provider\/NamedKeyFactoryTest.java","additions":0,"deletions":261,"binary":false,"changes":261,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+ *          java.base\/com.sun.crypto.provider\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/Launcher.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -80,1 +80,2 @@\n-                Asserts.assertEqualsByteArray(toByteArray(c.get(\"sk\").asString()), sk);\n+                Asserts.assertEqualsByteArray(toByteArray(c.get(\"sk\").asString()),\n+                        ML_DSA_Impls.seedToExpandedPrivate(pname, sk));\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/ML_DSA_Test.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -23,0 +23,1 @@\n+import com.sun.crypto.provider.ML_KEM_Impls;\n@@ -74,1 +75,3 @@\n-                Asserts.assertEqualsByteArray(toByteArray(c.get(\"dk\").asString()), sk);\n+                Asserts.assertEqualsByteArray(\n+                        toByteArray(c.get(\"dk\").asString()),\n+                        ML_KEM_Impls.seedToExpandedPrivate(pname, sk));\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/ML_KEM_Test.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8340327\n+ * @bug 8340327 8347938 8347941\n@@ -31,0 +31,1 @@\n+ *          java.base\/sun.security.util\n@@ -43,0 +44,2 @@\n+import sun.security.util.DerOutputStream;\n+import sun.security.util.DerValue;\n@@ -44,0 +47,1 @@\n+import java.io.IOException;\n@@ -69,1 +73,1 @@\n-            super(\"EdDSA\", \"Ed25519\", \"Ed448\");\n+            super(\"EdDSA\", new EdDSAKeyFactory(), \"Ed25519\", \"Ed448\");\n@@ -73,1 +77,1 @@\n-            super(\"EdDSA\", pname);\n+            super(\"EdDSA\", new EdDSAKeyFactory(pname), pname);\n@@ -90,1 +94,5 @@\n-            return getOps(name).sign(plain, sk, msg);\n+            try {\n+                return getOps(name).sign(plain, new DerValue(sk).getOctetString(), msg);\n+            } catch (IOException e) {\n+                throw new SignatureException(e);\n+            }\n@@ -124,0 +132,5 @@\n+\n+        @Override\n+        protected byte[] implGenAlt(String name, byte[] key) {\n+            return null;\n+        }\n@@ -160,1 +173,3 @@\n-            return new byte[][] { encodedPoint, sk };\n+            return new byte[][] {\n+                    encodedPoint,\n+                    new DerOutputStream().putOctetString(sk).toByteArray()};\n","filename":"test\/jdk\/sun\/security\/provider\/named\/NamedEdDSA.java","additions":21,"deletions":6,"binary":false,"changes":27,"previous_filename":"test\/jdk\/sun\/security\/provider\/NamedEdDSA.java","status":"renamed"},{"patch":"@@ -0,0 +1,283 @@\n+\/*\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8340327 8347938 8347941\n+ * @modules java.base\/sun.security.x509\n+ *          java.base\/sun.security.pkcs\n+ *          java.base\/sun.security.provider\n+ *          java.base\/sun.security.util\n+ * @library \/test\/lib\n+ *\/\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.Utils;\n+import jdk.test.lib.security.SeededSecureRandom;\n+import sun.security.pkcs.NamedPKCS8Key;\n+import sun.security.provider.NamedKeyFactory;\n+import sun.security.provider.NamedKeyPairGenerator;\n+import sun.security.util.RawKeySpec;\n+import sun.security.x509.NamedX509Key;\n+\n+import java.security.*;\n+import java.security.spec.*;\n+import java.util.Arrays;\n+\n+public class NamedKeyFactoryTest {\n+\n+    private static final SeededSecureRandom RAND = SeededSecureRandom.one();\n+    private static final byte[] RAW_SK = RAND.nBytes(16);\n+    private static final byte[] RAW_PK = RAND.nBytes(16);\n+\n+    public static void main(String[] args) throws Exception {\n+        Security.addProvider(new ProviderImpl());\n+\n+        var g = KeyPairGenerator.getInstance(\"sHA\");\n+        var g2 = KeyPairGenerator.getInstance(\"ShA-256\");\n+        var g5 = KeyPairGenerator.getInstance(\"SHa-512\");\n+        var kf = KeyFactory.getInstance(\"ShA\");\n+        var kf2 = KeyFactory.getInstance(\"Sha-256\");\n+        var kf5 = KeyFactory.getInstance(\"Sha-512\");\n+\n+        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-256\");\n+        checkKeyPair(g2.generateKeyPair(), \"SHA\", \"SHA-256\");\n+        checkKeyPair(g5.generateKeyPair(), \"SHA\", \"SHA-512\");\n+\n+        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-256\");\n+        checkKeyPair(g2.generateKeyPair(), \"SHA\", \"SHA-256\");\n+        checkKeyPair(g5.generateKeyPair(), \"SHA\", \"SHA-512\");\n+\n+        Utils.runAndCheckException(() -> g.initialize(NamedParameterSpec.ED448),\n+                InvalidAlgorithmParameterException.class); \/\/ wrong pname\n+        Utils.runAndCheckException(() -> g.initialize(new NamedParameterSpec(\"SHA-384\")),\n+                InvalidAlgorithmParameterException.class); \/\/ wrong pname\n+\n+        Utils.runAndCheckException(() -> g5.initialize(new NamedParameterSpec(\"SHA-256\")),\n+                InvalidAlgorithmParameterException.class); \/\/ diff pname\n+        g5.initialize(new NamedParameterSpec(\"SHA-512\"));\n+\n+        g.initialize(new NamedParameterSpec(\"sHA-512\"));\n+        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-512\");\n+        g.initialize(new NamedParameterSpec(\"ShA-256\"));\n+        checkKeyPair(g.generateKeyPair(), \"SHA\", \"SHA-256\");\n+\n+        var pk = new NamedX509Key(\"sHa\", \"ShA-256\", RAW_PK);\n+        var sk = new NamedPKCS8Key(\"sHa\", \"SHa-256\", RAW_SK, null);\n+        checkKey(pk, \"sHa\", \"ShA-256\");\n+        checkKey(sk, \"sHa\", \"SHa-256\");\n+\n+        Asserts.assertEquals(\"X.509\", pk.getFormat());\n+        Asserts.assertEquals(\"PKCS#8\", sk.getFormat());\n+\n+        var pkSpec = kf.getKeySpec(pk, X509EncodedKeySpec.class);\n+        var skSpec = kf.getKeySpec(sk, PKCS8EncodedKeySpec.class);\n+\n+        kf2.getKeySpec(pk, X509EncodedKeySpec.class);\n+        kf2.getKeySpec(sk, PKCS8EncodedKeySpec.class);\n+        Utils.runAndCheckException(() -> kf5.getKeySpec(pk, X509EncodedKeySpec.class),\n+                InvalidKeySpecException.class); \/\/ wrong KF\n+        Utils.runAndCheckException(() -> kf5.getKeySpec(sk, PKCS8EncodedKeySpec.class),\n+                InvalidKeySpecException.class);\n+        Utils.runAndCheckException(() -> kf.getKeySpec(pk, PKCS8EncodedKeySpec.class),\n+                InvalidKeySpecException.class); \/\/ wrong KeySpec\n+        Utils.runAndCheckException(() -> kf.getKeySpec(sk, X509EncodedKeySpec.class),\n+                InvalidKeySpecException.class);\n+\n+        checkKey(kf.generatePublic(pkSpec), \"SHA\", \"SHA-256\");\n+        Utils.runAndCheckException(() -> kf.generatePrivate(pkSpec),\n+                InvalidKeySpecException.class);\n+\n+        checkKey(kf.generatePrivate(skSpec), \"SHA\", \"SHA-256\");\n+        Utils.runAndCheckException(() -> kf.generatePublic(skSpec),\n+                InvalidKeySpecException.class);\n+\n+        checkKey(kf2.generatePrivate(skSpec), \"SHA\", \"SHA-256\");\n+        checkKey(kf2.generatePublic(pkSpec), \"SHA\", \"SHA-256\");\n+\n+        Utils.runAndCheckException(() -> kf5.generatePublic(pkSpec),\n+                InvalidKeySpecException.class); \/\/ wrong KF\n+        Utils.runAndCheckException(() -> kf5.generatePublic(skSpec),\n+                InvalidKeySpecException.class);\n+\n+        \/\/ The private RawKeySpec and unnamed RAW EncodedKeySpec\n+        var prk = kf.getKeySpec(pk, RawKeySpec.class);\n+        Asserts.assertEqualsByteArray(prk.getKeyArr(), pk.getRawBytes());\n+        var prk2 = kf.getKeySpec(pk, EncodedKeySpec.class);\n+        Asserts.assertEquals(\"RAW\", prk2.getFormat());\n+        Asserts.assertEqualsByteArray(prk.getKeyArr(), prk2.getEncoded());\n+\n+        Asserts.assertEqualsByteArray(kf2.generatePublic(prk).getEncoded(), pk.getEncoded());\n+        Utils.runAndCheckException(() -> kf.generatePublic(prk), InvalidKeySpecException.class); \/\/ no pname\n+        Asserts.assertEqualsByteArray(kf2.generatePublic(prk2).getEncoded(), pk.getEncoded());\n+        Utils.runAndCheckException(() -> kf.generatePublic(prk2), InvalidKeySpecException.class); \/\/ no pname\n+\n+        var srk = kf.getKeySpec(sk, RawKeySpec.class);\n+        Asserts.assertEqualsByteArray(srk.getKeyArr(), sk.getRawBytes());\n+        var srk2 = kf.getKeySpec(sk, EncodedKeySpec.class);\n+        Asserts.assertEquals(\"RAW\", srk2.getFormat());\n+        Asserts.assertEqualsByteArray(srk2.getEncoded(), sk.getRawBytes());\n+\n+        checkKey(kf2.generatePrivate(srk), \"SHA\", \"SHA-256\");\n+        Asserts.assertEqualsByteArray(kf2.generatePrivate(srk).getEncoded(), sk.getEncoded());\n+        Utils.runAndCheckException(() -> kf.generatePrivate(srk), InvalidKeySpecException.class); \/\/ no pname\n+        checkKey(kf2.generatePrivate(srk), \"SHA\", \"SHA-256\");\n+        Asserts.assertEqualsByteArray(kf2.generatePrivate(srk2).getEncoded(), sk.getEncoded());\n+        Utils.runAndCheckException(() -> kf.generatePrivate(srk2), InvalidKeySpecException.class); \/\/ no pname\n+\n+        var pk1 = new PublicKey() {\n+            public String getAlgorithm() { return \"SHA\"; }\n+            public String getFormat() { return \"RAW\"; }\n+            public byte[] getEncoded() { return RAW_PK; }\n+        };\n+        var pk2 = new PublicKey() {\n+            public String getAlgorithm() { return \"sHA-256\"; }\n+            public String getFormat() { return \"RAW\"; }\n+            public byte[] getEncoded() { return RAW_PK; }\n+        };\n+        var pk3 = new PublicKey() {\n+            public String getAlgorithm() { return \"SHA\"; }\n+            public String getFormat() { return \"RAW\"; }\n+            public byte[] getEncoded() { return RAW_PK; }\n+            public AlgorithmParameterSpec getParams() { return new NamedParameterSpec(\"sHA-256\"); }\n+        };\n+\n+        checkKey(kf2.translateKey(pk1), \"SHA\", \"SHA-256\");\n+        checkKey(kf.translateKey(pk2), \"SHA\", \"SHA-256\");\n+        checkKey(kf.translateKey(pk3), \"SHA\", \"SHA-256\");\n+\n+        Utils.runAndCheckException(() -> kf.translateKey(pk1), InvalidKeyException.class);\n+        Utils.runAndCheckException(() -> kf5.translateKey(pk2), InvalidKeyException.class);\n+        Utils.runAndCheckException(() -> kf5.translateKey(pk3), InvalidKeyException.class);\n+\n+        var sk1 = new PrivateKey() {\n+            public String getAlgorithm() { return \"SHA\"; }\n+            public String getFormat() { return \"RAW\"; }\n+            public byte[] getEncoded() { return RAW_SK; }\n+        };\n+        var sk2 = new PrivateKey() {\n+            public String getAlgorithm() { return \"sHA-256\"; }\n+            public String getFormat() { return \"RAW\"; }\n+            public byte[] getEncoded() { return RAW_SK; }\n+        };\n+        var sk3 = new PrivateKey() {\n+            public String getAlgorithm() { return \"SHA\"; }\n+            public String getFormat() { return \"RAW\"; }\n+            public byte[] getEncoded() { return RAW_SK; }\n+            public AlgorithmParameterSpec getParams() { return new NamedParameterSpec(\"sHA-256\"); }\n+        };\n+\n+        checkKey(kf2.translateKey(sk1), \"SHA\", \"SHA-256\");\n+        checkKey(kf.translateKey(sk2), \"SHA\", \"SHA-256\");\n+        checkKey(kf.translateKey(sk3), \"SHA\", \"SHA-256\");\n+\n+        Utils.runAndCheckException(() -> kf.translateKey(sk1), InvalidKeyException.class);\n+        Utils.runAndCheckException(() -> kf5.translateKey(sk2), InvalidKeyException.class);\n+        Utils.runAndCheckException(() -> kf5.translateKey(sk3), InvalidKeyException.class);\n+    }\n+\n+    static void checkKeyPair(KeyPair kp, String algName, String toString) {\n+        checkKey(kp.getPrivate(), algName, toString);\n+        checkKey(kp.getPublic(), algName, toString);\n+    }\n+\n+    static void checkKey(Key k, String algName, String pname) {\n+        Asserts.assertEquals(algName, k.getAlgorithm());\n+        Asserts.assertTrue(k.toString().contains(pname));\n+        if (k instanceof AsymmetricKey ak && ak.getParams() instanceof NamedParameterSpec nps) {\n+            Asserts.assertEquals(pname, nps.getName());\n+        }\n+        if (k instanceof NamedPKCS8Key nsk) {\n+            var raw = nsk.getRawBytes();\n+            Asserts.assertEqualsByteArray(Arrays.copyOf(RAW_SK, raw.length), raw);\n+        }\n+        if (k instanceof NamedX509Key npk) {\n+            var raw = npk.getRawBytes();\n+            Asserts.assertEqualsByteArray(Arrays.copyOf(RAW_PK, raw.length), raw);\n+        }\n+    }\n+\n+    \/\/ Provider\n+\n+    public static class ProviderImpl extends Provider {\n+        public ProviderImpl() {\n+            super(\"P\", \"1\", \"...\");\n+            put(\"KeyFactory.SHA\", KF.class.getName());\n+            put(\"KeyFactory.SHA-256\", KF1.class.getName());\n+            put(\"KeyFactory.SHA-512\", KF2.class.getName());\n+            put(\"KeyPairGenerator.SHA\", KPG.class.getName());\n+            put(\"KeyPairGenerator.SHA-256\", KPG1.class.getName());\n+            put(\"KeyPairGenerator.SHA-512\", KPG2.class.getName());\n+        }\n+    }\n+    public static class KF extends NamedKeyFactory {\n+        public KF() {\n+            super(\"SHA\", \"SHA-256\", \"SHA-512\");\n+        }\n+\n+        public KF(String name) {\n+            super(\"SHA\", name);\n+        }\n+\n+        @Override\n+        protected byte[] implGenAlt(String name, byte[] key) {\n+            return null;\n+        }\n+    }\n+    public static class KF1 extends KF {\n+        public KF1() {\n+            super(\"SHA-256\");\n+        }\n+    }\n+    public static class KF2 extends KF {\n+        public KF2() {\n+            super(\"SHA-512\");\n+        }\n+    }\n+    public static class KPG extends NamedKeyPairGenerator {\n+        public KPG() {\n+            super(\"SHA\", \"SHA-256\", \"SHA-512\");\n+        }\n+\n+        public KPG(String pname) {\n+            super(\"SHA\", pname);\n+        }\n+\n+        @Override\n+        public byte[][] implGenerateKeyPair(String name, SecureRandom sr) {\n+            var out = new byte[2][];\n+            out[0] = name.endsWith(\"256\") ? Arrays.copyOf(RAW_PK, 8) : RAW_PK;\n+            out[1] = name.endsWith(\"256\") ? Arrays.copyOf(RAW_SK, 8) : RAW_SK;\n+            return out;\n+        }\n+    }\n+    public static class KPG1 extends KPG {\n+        public KPG1() {\n+            super(\"SHA-256\");\n+        }\n+    }\n+    public static class KPG2 extends KPG {\n+        public KPG2() {\n+            super(\"SHA-512\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/named\/NamedKeyFactoryTest.java","additions":283,"deletions":0,"binary":false,"changes":283,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8347938 8347941\n+ * @modules java.base\/sun.security.pkcs\n+ *          java.base\/sun.security.x509\n+ * @library \/test\/lib\n+ * @summary check the Named***Key behavior\n+ *\/\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.security.SeededSecureRandom;\n+import sun.security.pkcs.NamedPKCS8Key;\n+import sun.security.x509.NamedX509Key;\n+\n+import java.util.Arrays;\n+\n+public class NamedKeys {\n+    public static void main(String[] args) throws Exception {\n+\n+        var r = SeededSecureRandom.one();\n+        var raw = r.nBytes(32);\n+\n+        \/\/ Create a key using raw bytes\n+        var sk = new NamedPKCS8Key(\"ML-DSA\", \"ML-DSA-44\", raw, null);\n+        var enc = sk.getEncoded().clone();\n+\n+        \/\/ The raw bytes array is re-used\n+        Asserts.assertTrue(sk.getRawBytes() == sk.getRawBytes());\n+        \/\/ but the encoding is different\n+        Asserts.assertTrue(sk.getEncoded() != sk.getEncoded());\n+\n+        \/\/ When source change\n+        Arrays.fill(raw, (byte)0);\n+        \/\/ Internal raw bytes also changes\n+        Asserts.assertEqualsByteArray(sk.getRawBytes(), new byte[32]);\n+        \/\/ No guarantee on getEncoded() output, could be cached\n+\n+        \/\/ Create a key using encoding\n+        var sk1 = new NamedPKCS8Key(\"ML-DSA\", enc, null);\n+        var sk2 = new NamedPKCS8Key(\"ML-DSA\", enc, null);\n+        var raw1 = sk1.getRawBytes();\n+        Asserts.assertTrue(raw1 != sk2.getRawBytes());\n+        Asserts.assertTrue(sk1.getEncoded() != sk2.getEncoded());\n+\n+        var encCopy = enc.clone(); \/\/ store a copy\n+        Arrays.fill(enc, (byte)0); \/\/ clean the source and the key unchanged\n+        Asserts.assertEqualsByteArray(encCopy, sk1.getEncoded());\n+\n+        \/\/ Same with public key\n+        \/\/ Create a key using raw bytes\n+        raw = r.nBytes(32);\n+        var pk = new NamedX509Key(\"ML-DSA\", \"ML-DSA-44\", raw);\n+        enc = pk.getEncoded().clone();\n+\n+        \/\/ The raw bytes array is re-used\n+        Asserts.assertTrue(pk.getRawBytes() == pk.getRawBytes());\n+        \/\/ but the encoding is different\n+        Asserts.assertTrue(pk.getEncoded() != pk.getEncoded());\n+\n+        \/\/ When source change\n+        Arrays.fill(raw, (byte)0);\n+        \/\/ Internal raw bytes also changes\n+        Asserts.assertEqualsByteArray(pk.getRawBytes(), new byte[32]);\n+        \/\/ No guarantee on getEncoded() output, could be cached\n+\n+        \/\/ Create a key using encoding\n+        var pk1 = new NamedX509Key(\"ML-DSA\", enc);\n+        var pk2 = new NamedX509Key(\"ML-DSA\", enc);\n+        raw1 = pk1.getRawBytes();\n+        Asserts.assertTrue(raw1 != pk2.getRawBytes());\n+        Asserts.assertTrue(pk1.getEncoded() != pk2.getEncoded());\n+\n+        encCopy = enc.clone(); \/\/ store a copy\n+        Arrays.fill(enc, (byte)0); \/\/ clean the source and the key unchanged\n+        Asserts.assertEqualsByteArray(encCopy, pk1.getEncoded());\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/named\/NamedKeys.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,728 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8347938 8347941\n+ * @library \/test\/lib\n+ * @summary ensure ML-KEM and ML-DSA encodings consistent with\n+ *      draft-ietf-lamps-kyber-certificates-07\n+ *      and draft-ietf-lamps-dilithium-certificates-05\n+ *\/\n+\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.security.FixedSecureRandom;\n+\n+import java.io.ByteArrayInputStream;\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.cert.CertificateFactory;\n+import java.security.spec.NamedParameterSpec;\n+import java.util.Base64;\n+\n+public class Encodings {\n+    public static void main(String[] args) throws Exception {\n+\n+        var seed = new byte[64];\n+        for (var i = 0; i < seed.length; i++) {\n+            seed[i] = (byte)i;\n+        }\n+\n+        KeyPairGenerator g;\n+        KeyPair kp;\n+\n+        \/\/ Data from https:\/\/datatracker.ietf.org\/doc\/html\/draft-ietf-lamps-kyber-certificates-07\n+        g = KeyPairGenerator.getInstance(\"ML-KEM\");\n+        g.initialize(NamedParameterSpec.ML_KEM_512, new FixedSecureRandom(seed));\n+        kp = g.generateKeyPair();\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MFICAQAwCwYJYIZIAWUDBAQBBEAAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRob\n+                        HB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4\/\n+                        \"\"\"), kp.getPrivate().getEncoded());\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MIIDMjALBglghkgBZQMEBAEDggMhADmVgV5ZfRBDVc8pqlMzyTJRhp1bzb5IcST2\n+                        Ari2pmwWxHYWSK12XPXYAGtRXpBafwrAdrDGLvoygVPnylcBaZ8TBfHmvG+QsOSb\n+                        aTUSts6ZKouAFt38GmYsfj+WGcvYad13GvMIlszVkYrGy3dGbF53mZbWf\/mqvJdQ\n+                        Pyx7fi0ADYZFD7GAfKTKvaRlgloxx4mht6SRqzhydl0yDQtxkg+iE8lAk0Frg7gS\n+                        Tmn2XmLLUADcw3qpoP\/3OXDEdy81fSQYnKb1MFVowOI3ajdipoxgXlY8XSCVcuD8\n+                        dTLKKUcpU1VntfxBPF6HktJGRTbMgI+YrddGZPFBVm+QFqkKVBgpqYoEZM5BqLtE\n+                        wtT6PCwglGByjvFKGnxMm5jRIgO0zDUpFgqasteDj3\/2tTrgWqMafWRrevpsRZMl\n+                        JqPDdVYZvplMIRwqMcBbNEeDbLIVC+GCna5rBMVTXP9Ubjkrp5dBFyD5JPSQpaxU\n+                        lfITVtVQt4KmTBaItrZVvMeEIZekNML2Vjtbfwmni8xIgjJ4NWHRb0y6tnVUAAUH\n+                        gVcMZmBLgXrRJSKUc26LAYYaS1p0UZuLb+UUiaUHI5Llh2JscTd2V10zgGocjicy\n+                        r5fCaA9RZmMxxOuLvAQxxPloMtrxs8RVKPuhU\/bHixwZhwKUfM0zdyekb7U7oR3l\n+                        y0GRNGhZUWy2rXJADzzyCbI2rvNaWArIfrPjD6\/WaXPKin3SZ1r0H3oXthQzzRr4\n+                        D3cIhp9mVIhJeYCxrBCgzctjagDthoGzXkKRJMqANQcluF+DperDpKPMFgCQPmUp\n+                        NWC5szblrw1SnawaBIEZMCy3qbzBELlIUb8CEX8ZncSFqFK3Rz8JuDGmgx1bVMC3\n+                        kNIlz2u5LZRiomzbM92lEjx6rw4moLg2Ve6ii\/OoB0clAY\/WuuS2Ac9huqtxp6PT\n+                        UZejQ+dLSicsEl1UCJZCbYW3lY07OKa6mH7DciXHtEzbEt3kU5tKsII2NoPwS\/eg\n+                        nMXEHf6DChsWLgsyQzQ2LwhKFEZ3IzRLrdAA+NjFN8SPmY8FMHzr0e3guBw7xZoG\n+                        WhttY7Js\n+                        \"\"\"), kp.getPublic().getEncoded());\n+\n+        g.initialize(NamedParameterSpec.ML_KEM_768, new FixedSecureRandom(seed));\n+        kp = g.generateKeyPair();\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MFICAQAwCwYJYIZIAWUDBAQCBEAAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRob\n+                        HB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4\/\n+                        \"\"\"), kp.getPrivate().getEncoded());\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MIIEsjALBglghkgBZQMEBAIDggShACmKoQ1CPI3aBp0CvFnmzfA6CWuLPaTKubgM\n+                        pKFJB2cszvHsT68jSgvFt+nUc\/KzEzs7JqHRdctnp4BZGWmcAvdlMbmcX4kYBwS7\n+                        TKRTXFuJcmecZgoHxeUUuHAJyGLrj1FXaV77P8QKne9rgcHMAqJJrk8JStDZvTSF\n+                        wcHGgIBSCnyMYyAyzuc4FU5cUXbAfaVgJHdqQw\/nbqz2ZaP3uDIQIhW8gvEJOcg1\n+                        VwQzao+sHYHkuwSFql18dNa1m75cXpcqDYusQRtVtdVVfNaAoaj3G064a8SMmgUJ\n+                        cxpUvZ1ykLJ5Y+Q3Lcmxmc\/crAsBrNKKYjlREuTENkjWIsSMgjTQFEDozDdskn8j\n+                        pa\/JrAR0xmInTkJFJchVLs47P+JlFt6QG8fVFb3olVjmJslcgLkzQvgBAATznmxs\n+                        lIccXjRMqzlmyDX5qWpZr9McQChrOLHBp4RwurlHUYk0RTzoZzapGfH1ptUQqG9U\n+                        VPw5gMtcdlvSvV97NrFBDWY1yM60fE3aDXaijqyTnHHDAkgEhmxxYmZYRCFjwsIh\n+                        F+UKzvzmN4qYVlIwKk7wws4Mxxa3eW4ray43d9+hrD2iWaMbWptTD4y2OKgaYqww\n+                        GEmrr5WnMBvaMAaJCb\/bfmfbzLs4pVUaJbGjoPaFdIrVdT2IgPABbGJ0hhZjhMVX\n+                        H+I2WQA2TQODEeLYdds2ZoaTK17GAkMKNp6Hpu9cM4eGZXglvUwFes65I+sJNeaQ\n+                        XmO0ztf4CFenc91ksVDSZhLqmsEgUtsgF78YQ8y0sygbaQ3HKK36hcACgbjjwJKH\n+                        M1+Fa0\/CiS9povV5Ia2gGRTECYhmLVd2lmKnhjUbm2ZJPat5WU2YbeIQDWW6D\/Tq\n+                        WLgVONJKRDWiWPrCVASqf0H2WLE4UGXhWNy2ARVzJyD0BFmqrBXkBpU6kKxSmX0c\n+                        zQcAYO\/GXbnmUzVEZ\/rVbscTyG51QMQjrPJmn1L6b0rGiI2HHvPoR8ApqKr7uS4X\n+                        skqgebH0GbphdbRCr7EZCdSla3CgM1soc5IYqnyTSOLDwvPrPRWkHmQXwN2Uv+sh\n+                        QZsxGnuxOhgLvoMyGKmmsXRHzIXyJYWVh6cwdwSay8\/UTQ8CVDjhXRU4Jw1Ybhv4\n+                        MZKpRZz2PA6XL4UpdnmDHs8SFQmFHLg0D28Qew+hoO\/Rs2qBibwIXE9ct4TlU\/Qb\n+                        kY+AOXzhlW94W+43fKmqi+aZitowwmt8PYxrVSVMyWIDsgxCruCsTh67QI5JqeP4\n+                        edCrB4XrcCVCXRMFoimcAV4SDRY7DhlJTOVyU9AkbRgnRcuBl6t0OLPBu3lyvsWj\n+                        BuujVnhVwBRpn+9lrlTHcKDYXBhADPZCrtxmB3e6SxOFAr1aeBL2IfhKSClrmN1D\n+                        IrbxWCi4qPDgCoukSlPDqLFDVxsHQKvVZ9rxzenHnCBLbV4lnRdmoxu7y05qBc9F\n+                        AhdrMBwcL0Ekd1AVe87IXoCbMKTWDXdHzdD1uZqoyCaYdRd5OqqAgKCxJKhVjfcr\n+                        vje3X07btr6CFtbGM\/srIoDiURPYaV5DSBw+6zl+sZJQUim2eiAeqJPD4ssy2ovD\n+                        QvpN6gV4\n+                        \"\"\"), kp.getPublic().getEncoded());\n+\n+        g.initialize(NamedParameterSpec.ML_KEM_1024, new FixedSecureRandom(seed));\n+        kp = g.generateKeyPair();\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MFICAQAwCwYJYIZIAWUDBAQDBEAAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRob\n+                        HB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4\/\n+                        \"\"\"), kp.getPrivate().getEncoded());\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MIIGMjALBglghkgBZQMEBAMDggYhAEuUwpRQERGRgjs1FMmsHqPZglzLhjk6LfsE\n+                        ZU+iGS03v60cSXxlAu7lyoCnO\/zguvWlSohYWkATl6PSMvQmp6+wgrwhpEMXCQ6q\n+                        x1ksLqiKZTxEkeoZOTEzX1LpiaPEzFbZxVNzLVfEcPtBq3WbZdLQREU4L82cTjRK\n+                        ESj6nhHgQ1jhku0BSyMjKn7isi4jcX9EER7jNXU5nDdkbamBPsmyEq\/pTl3FwjMK\n+                        cpTMH0I0ptP7tPFoWriJLASssXzRwXDXsGEbanF2x5TMjGf1X8kjwq0gMQDzZZkY\n+                        gsMCQ9d4E4Q7XsfJZAMiY3BgkuzwDHUWvmTkWYykImwGm7XmfkF1zyKGyN1cSIps\n+                        WGHzG6oL0CaUcOi1Ud07zTjIbBL5zbF2x33ItsAqcB9HiQLIVT9pTA2CcntMSlws\n+                        EEEhKqEnSAi4IRGzd+x1IU6bGXj3YATUE52YYT9LjpjSCve1NAc6UJqVm3p1ZPm0\n+                        DKIYv2GCkyCoUCAXlU0yjXrGx2nsKXAHVuewaFs0DV4RgFlQSkmppQoQGY6xCleE\n+                        Z460J9e0uruVUpM7BiiXlz4TGOrwoOrDdYSmVAGxcD4EKszYN1MUg\/JBytzRwdN4\n+                        EZ5pRCnbGZrIkeTFNDdXCFuzrng2ZzUMRFjZdnLoYegLHSZ5UQ6jpvI2DHekaULH\n+                        oGpVTSKAgMhLR67xTbF2IMsWwGqzChvkzacIK+n4fpwhHEaRY0mluo6qUgHHKUo8\n+                        CIW1O2V0UhCIJexkbJCgRhIyTufQMa\/lNDEyy+9ntu+xpewoCbdzU4znez2LBOsL\n+                        PCJWAR5McWwZqLoHUr9xSSEXZJ8GFcMpD8KaRv3kvVLbkobWAziCRCWcFaesK2QK\n+                        YMwDN2pYQaP7ikc1aPqbGiZyFfNMAWl7Dw5icXXXIQW3cHwpueYUvcM6b2yBipU3\n+                        C0J4gte0dnlqnsbrmTJ0zZsjkagrpF4zk9Lprpchyp1sG5iLWCdxP5CmWF3pQzUo\n+                        wCsDzhC7X3IBOND7tMMMEma5GOUpJd\/hezf5XSK8pU9HWRmshZCYwPDQisWHXvKb\n+                        Vv0UHm7xX3AKC2bzlZXFiBdzc8RmmyG8Bx5MOqXwtKMbYljzXaJKw80px\/IJJBDF\n+                        B4NVsTj7U6a5rm4LnAgkPnuqRcRzduuMfxPUz1Gqc2+jFUDJJB83DaVEv5+cKNml\n+                        fi8qfKlaTktGbmQas7zHat8ROdVnpvErUvOmXn7AquJryqjFWDOwTlmZjryaGTD7\n+                        ttIjPFPSwfi5UY48Lec6Gd7ms4Clsylxz2ThKf1sH6bnXUojRQHpZt06VAr1yPTz\n+                        SmtKJT7ihJJWbV5nxvVYVfywUG+wbBVnRNmgOjGib6lMrRTxV7fzA9B6acdzdo\/L\n+                        TQecCQWXA6DDqU3kuZ6jovFlg9D5Fwo5UNsHtPC8MIApJ\/n3lhtiWYkmNqlQKicF\n+                        MDY3eZ3TRNpFHBz3v2eEDOsweauMa4wZJ\/ZAU8YSRQxFyeYDvBZmbllrNHHhA7bx\n+                        VEdCTRcCIEgRH\/vTfhxnD2TxS4p7MrlMGkm0XdL8OM1SidkQrWNgLPXhMELGSsZ5\n+                        e4n7VRrQjgWpLSAMzLfnEu8jyTEss1DwKatTfihzR\/0wdawQkGp4PxxsB8y4j0Ei\n+                        jEvhxkD3kLXDpdXTynkklddLxGFWJljAesYAJ2uSSrW8m+HwSUy3b4L0YKdICXJm\n+                        M4HhaZlgYdeZhZ7FTU9cpcQRwB2xWXsWWXdmneE6koo0r7rCWP6oxHZCOclCHcMR\n+                        m\/W0dpkgaXgyexxTRe90anmDhB8FbiU0EAqyTU6au9CxfGqVvUw8DkD2nhYSrO6y\n+                        i5kIbJURbnIEJziTOQv0a4mbNihrDr8ZR7uYhPcyyifagrGbXcDMf4iFcUkQiIsj\n+                        EMT5MZ1BCzTmQzuQA+IXa7mVJXRWEG6JUhY7i6WSUwzFqgrrQ605j+npe6pSPXpE\n+                        MWd8PTrwcZ5HXbhcqVr1CJvqvrBbL6q0iWumD4HIhHKle0aoKIJqDN+0RvgYkYLS\n+                        v16sTsHMXer1mcihPkgjVAbRf\/3cg0S2xmmEqGiqkvoCInoIaVDrDIcB7VjcYod2\n+                        uYOILhF1\n+                        \"\"\"), kp.getPublic().getEncoded());\n+\n+        CertificateFactory.getInstance(\"X.509\").generateCertificate(\n+                new ByteArrayInputStream(\"\"\"\n+                        -----BEGIN CERTIFICATE-----\n+                        MIINpDCCBBqgAwIBAgIUFZ\/+byL9XMQsUk32\/V4o0N44808wCwYJYIZIAWUDBAMR\n+                        MCIxDTALBgNVBAoTBElFVEYxETAPBgNVBAMTCExBTVBTIFdHMB4XDTIwMDIwMzA0\n+                        MzIxMFoXDTQwMDEyOTA0MzIxMFowIjENMAsGA1UEChMESUVURjERMA8GA1UEAxMI\n+                        TEFNUFMgV0cwggMyMAsGCWCGSAFlAwQEAQOCAyEAOZWBXll9EENVzymqUzPJMlGG\n+                        nVvNvkhxJPYCuLambBbEdhZIrXZc9dgAa1FekFp\/CsB2sMYu+jKBU+fKVwFpnxMF\n+                        8ea8b5Cw5JtpNRK2zpkqi4AW3fwaZix+P5YZy9hp3Xca8wiWzNWRisbLd0ZsXneZ\n+                        ltZ\/+aq8l1A\/LHt+LQANhkUPsYB8pMq9pGWCWjHHiaG3pJGrOHJ2XTINC3GSD6IT\n+                        yUCTQWuDuBJOafZeYstQANzDeqmg\/\/c5cMR3LzV9JBicpvUwVWjA4jdqN2KmjGBe\n+                        VjxdIJVy4Px1MsopRylTVWe1\/EE8XoeS0kZFNsyAj5it10Zk8UFWb5AWqQpUGCmp\n+                        igRkzkGou0TC1Po8LCCUYHKO8UoafEybmNEiA7TMNSkWCpqy14OPf\/a1OuBaoxp9\n+                        ZGt6+mxFkyUmo8N1Vhm+mUwhHCoxwFs0R4NsshUL4YKdrmsExVNc\/1RuOSunl0EX\n+                        IPkk9JClrFSV8hNW1VC3gqZMFoi2tlW8x4Qhl6Q0wvZWO1t\/CaeLzEiCMng1YdFv\n+                        TLq2dVQABQeBVwxmYEuBetElIpRzbosBhhpLWnRRm4tv5RSJpQcjkuWHYmxxN3ZX\n+                        XTOAahyOJzKvl8JoD1FmYzHE64u8BDHE+Wgy2vGzxFUo+6FT9seLHBmHApR8zTN3\n+                        J6RvtTuhHeXLQZE0aFlRbLatckAPPPIJsjau81pYCsh+s+MPr9Zpc8qKfdJnWvQf\n+                        ehe2FDPNGvgPdwiGn2ZUiEl5gLGsEKDNy2NqAO2GgbNeQpEkyoA1ByW4X4Ol6sOk\n+                        o8wWAJA+ZSk1YLmzNuWvDVKdrBoEgRkwLLepvMEQuUhRvwIRfxmdxIWoUrdHPwm4\n+                        MaaDHVtUwLeQ0iXPa7ktlGKibNsz3aUSPHqvDiaguDZV7qKL86gHRyUBj9a65LYB\n+                        z2G6q3Gno9NRl6ND50tKJywSXVQIlkJthbeVjTs4prqYfsNyJce0TNsS3eRTm0qw\n+                        gjY2g\/BL96CcxcQd\/oMKGxYuCzJDNDYvCEoURncjNEut0AD42MU3xI+ZjwUwfOvR\n+                        7eC4HDvFmgZaG21jsmyjUjBQMA4GA1UdDwEB\/wQEAwIFIDAdBgNVHQ4EFgQUDsWS\n+                        pZcefo2geKhuRnTy+xH26NcwHwYDVR0jBBgwFoAUMpoHsfq7SPUqMJ8RoYmPhI4j\n+                        Iv8wCwYJYIZIAWUDBAMRA4IJdQDcV8LA\/De8Ss6UL3tMcHXKc0iTXaBPPLyoCimW\n+                        KG\/BhZ299qdyg6Qv\/hWMxXfuQLvBIJUiE9boIUvDJH1Bv5q+wBXDM4Pcb585a972\n+                        fB7Lj7rTYwGezp4QRGsn4bMOUHtOS\/9MaD9LAw8XlEDSl69KgN+jN+Cak+PS1Q3O\n+                        u+TpeM2fo304+3vTfHlNiePSNOqkd1pzs2nwVIbQGIWctpF1rIHC7NJ\/XOO3ZsN3\n+                        Cr758OLyAotCdGCRnj16Fhxh1rJ976b6y+Yo96CDMgl22lYPJoihlBekuKc4ugkE\n+                        g4vJEwAtPlMoaogn7XJcWkKIhGKp1M7nG9KvgQxCRvIfRURuDyHaiOAkOayK+Hp6\n+                        4AV02pbYX\/w1X9bW1KOeId42EUQpF2iFu3ilOJi1JmMFyMP8lZZYq\/8fPv3KGZPF\n+                        YJpd6yaA7ReIQaNiFgCMqx7nw\/Zti7sa2a5dor3YqYRjZ8UlJUuYUKxNDde\/u46W\n+                        mIEGSYcynpOiEYbyeWmXW4ye7qhT1Q7bmFPV8Mjzn3rXytzUzUZfrK8j9cHxAozY\n+                        sF7RDuBmauliYfV1jaroCcHrohVTnSSiSMQKV4q6HjKPIpf4qENs4SVh9xkWXdbB\n+                        OaiGgFhsI+sxlDGPRwbKrj6gVcbyFuJIPRL1LylJ2qFXzpzHyfAS3fHFvgv+S0AJ\n+                        DnfNk3OcT7G9jQhESQOkTXA4LqxPI+0c6asvauXlICnN8RdOjraY4+DQL8cYidEi\n+                        SAnXsOKNSzj+b225zdPvfBB\/4eJTtV7VdnQOhETJErofxEWbpA8zobl\/+bu2smdY\n+                        Pg1a83hwVo+HxfkSz1iHW9WT9+iwhnm28RqzLdmmzZGJSfgEFkADriwXUEr+LIkX\n+                        0xeMGvyXxdxv9S6Y6y+n0Al0ql0tzGviVoDqA0xNLU+Mupou5ftDTJj7U1oxIUHj\n+                        HlFeE06+JRoTPbDcl+cBil31SlxuZ1u7cOE33nbPOw0jWDXeA8M5uE3aMQah5VRf\n+                        tZXmdijH4zEN1\/++Q5oJAF1SCTsnTkZ0lk3ZlIfpO0H1sJpINzLlBO04dLlQx2Nc\n+                        NFIExuPsVO7kW1rDLqkh8srBKrdUa\/8ngD3kppXW7iaBhSnUE0N6lrwi5g\/fJbNU\n+                        H0W7r0b31u0KDQ8cNKlK8PZL5pu\/ulJTGZ5Dz4HORwVt2aXQojZfGQ0rashKxes8\n+                        F+Ewgse7NUAt3HqX94+0SWpfpNCVlZknK5XfhZJV08XVZ2TkTDoJ6aBLqua\/a5Xg\n+                        jWTwroAJuB84jx2B1eCeYxjt+3cEaB274XU++H6m5kP\/1QtJ3L1r545NaRQAylZF\n+                        MwCtCTVyAavhrTcrQwhl8rVGAKOlXaCfHSln8y9u26qMHeL9BIP7JeMeZxCYQQ5b\n+                        QxN0WvGmK11W6XG2CTc0qQ0RdUOvfrXTfl5A+I6DS4T2Z26APgkoq2JSQihO3JEg\n+                        S7zknl2NoAummhweGU\/qSPzX+4\/KlxwcCCs8mD8ZkkwhdB5poU4uTES\/eCO+rrm3\n+                        wxLmiIcv2RwNdN8bRkxm35SQCCfc6riit4AxkaRKz5b27FWedfkH9bOgQaQGxm\/v\n+                        5IwGHsFGeQFJyV1pNvo0aB9vvMTL3VZOsoXooxrdlc0kv7jJ9Q6eF8ZAFYXvxnaS\n+                        D+\/OsH1b1+6WCVZIDRzRsMauvaifYUZNMQQ\/CKSkDkFPjBDY5Xca9yZkGl+S+Pzz\n+                        7ODu6y3lvvUk+V6sPKEAS4ejZOocriV75SPfz0WlRZoljJXOm3tKCo6L2e56ntVs\n+                        hRiIBaLG5stQf2EihTSZUf21zNjb15E7KcdbTtr8TE0iJAuVYxBtNRWsVhExOMO\/\n+                        QqXWnHL015pv8Dubwt6iDr8ObCDNOItPtszlNjCz4yN51aGTrHGZ0CJcbcUWqxOm\n+                        W1wrQmnYWUaz1eDahmbnowXshqI8RcGqvzUlZ0\/g6nEbAJZgbk7jozC1VlwOKMM4\n+                        erhkw5mrrpicX3cvP3wl3JyhB6vbAfK4XQH3CfrnK12BhpgG0+9V5DKxTL02f+5m\n+                        ckJI9cZqSYx8rhlDlNbR33kSOY0Ba2RwvmMxhdypd38l5S8oSwTRu5eJ4VrrSeeM\n+                        wiW3gIxLA+o+SD2iFKyafsWLeu+Axx5\/HlIVB+g82dGKkZrrESEvO9LpdlaS+AMW\n+                        9BccbDD2SGE2UZKlK4zx2QwYvnFG\/ZDRjmvQV0dQOxiy0j2l7WHmbedlTTUUd5FU\n+                        0cfSG+cJHnToa\/VRU4mDHvFpnV+AF0dA1s0oemhN5vOqhDzHnKasFFpUDH88mS7K\n+                        gbXELYiHTQEB\/s\/Hr0crjwVQQCbJFe4bBJzhcnwuOcdNUKLmF7MidvoyKYYu20oE\n+                        P6F0\/RoDwS2FW3RyrKeSzlLWnuarfTq84iMaPgKrOl8XNfaSgGRsG3kxGe0s3rVs\n+                        iwzaO8THoCLp6WpEebfucmSCMXtKfVG\/28u\/dvQkz1D0oqTcWqhQiDLqZI3HjdDr\n+                        io44DARVGKAsEvq75Jq91GXP+1R8yejpP1lZU4onX1i0E8DMuVEU85JN+kFXbS83\n+                        6nZHmYhgwj93IvetNiK5cJs2M19LnJj5GrONmPMizoXCIBjzDx0MO\/3CoRF5achF\n+                        p598lYloyvlS1VYhwmLrpFmz0BB9OEepvdq0ZX11XM532I6WIF4lAUh0YEx1FInO\n+                        XJ74LC2uMxa92W6nceJAjiraJKhi4VnURhPa7MUt\/2oA5WY8zzmVGn94UlPsEmPj\n+                        \/nl7vXBVLb9Nojt9AkIO637bT+1wszCvOH8nelnzNDsCBi9B8+mdgzizEN08UKSk\n+                        dCaNbCB86LVeo+umyY5abmgr2NOI7XaSTqWMs7ezemR5AkIUka35LgVIKvZw2WEz\n+                        G3KxZImSviV+XMsakqGTdXof7k1usEcmbJ\/EJLi9ecaxMZKuLjT9sFtNo8uvE\/m1\n+                        1pf4bGnGXgBERGpZsqnm+JNxDDTbD1WntdPpyeF8\/6iXd\/eNiHboV830Olj0dXJ4\n+                        YbTrQBcWbfUeZ8+8gGJ0bgshMtPCrOdYVMAfWfcu7DyFi0tQdtS1pmo5Co+OwLxe\n+                        IyKgwlIYOghCE3r6SBCrx0+sTP0sixV5Refu2JIBkjoywPavmK3+109l1F0BkzST\n+                        fQ1pAwENGx0oLVFdZHB1f4CSlZaiq8Te7AtOfX6Qtba4w8bP1+j2FSVCWGt4goSv\n+                        s7TAwcrR1drv9BRiaH2qytnr8PcAAAAAAAAAAAAAAAAAAAAAFSM2QA==\n+                        -----END CERTIFICATE-----\"\"\".getBytes(StandardCharsets.UTF_8)));\n+\n+        CertificateFactory.getInstance(\"X.509\").generateCertificate(\n+                new ByteArrayInputStream(\"\"\"\n+                        -----BEGIN CERTIFICATE-----\n+                        MIISnTCCBZqgAwIBAgIUFZ\/+byL9XMQsUk32\/V4o0N44808wCwYJYIZIAWUDBAMS\n+                        MCIxDTALBgNVBAoTBElFVEYxETAPBgNVBAMTCExBTVBTIFdHMB4XDTIwMDIwMzA0\n+                        MzIxMFoXDTQwMDEyOTA0MzIxMFowIjENMAsGA1UEChMESUVURjERMA8GA1UEAxMI\n+                        TEFNUFMgV0cwggSyMAsGCWCGSAFlAwQEAgOCBKEAKYqhDUI8jdoGnQK8WebN8DoJ\n+                        a4s9pMq5uAykoUkHZyzO8exPryNKC8W36dRz8rMTOzsmodF1y2engFkZaZwC92Ux\n+                        uZxfiRgHBLtMpFNcW4lyZ5xmCgfF5RS4cAnIYuuPUVdpXvs\/xAqd72uBwcwCokmu\n+                        TwlK0Nm9NIXBwcaAgFIKfIxjIDLO5zgVTlxRdsB9pWAkd2pDD+durPZlo\/e4MhAi\n+                        FbyC8Qk5yDVXBDNqj6wdgeS7BIWqXXx01rWbvlxelyoNi6xBG1W11VV81oChqPcb\n+                        TrhrxIyaBQlzGlS9nXKQsnlj5DctybGZz9ysCwGs0opiOVES5MQ2SNYixIyCNNAU\n+                        QOjMN2ySfyOlr8msBHTGYidOQkUlyFUuzjs\/4mUW3pAbx9UVveiVWOYmyVyAuTNC\n+                        +AEABPOebGyUhxxeNEyrOWbINfmpalmv0xxAKGs4scGnhHC6uUdRiTRFPOhnNqkZ\n+                        8fWm1RCob1RU\/DmAy1x2W9K9X3s2sUENZjXIzrR8TdoNdqKOrJOcccMCSASGbHFi\n+                        ZlhEIWPCwiEX5QrO\/OY3iphWUjAqTvDCzgzHFrd5bitrLjd336GsPaJZoxtam1MP\n+                        jLY4qBpirDAYSauvlacwG9owBokJv9t+Z9vMuzilVRolsaOg9oV0itV1PYiA8AFs\n+                        YnSGFmOExVcf4jZZADZNA4MR4th12zZmhpMrXsYCQwo2noem71wzh4ZleCW9TAV6\n+                        zrkj6wk15pBeY7TO1\/gIV6dz3WSxUNJmEuqawSBS2yAXvxhDzLSzKBtpDccorfqF\n+                        wAKBuOPAkoczX4VrT8KJL2mi9XkhraAZFMQJiGYtV3aWYqeGNRubZkk9q3lZTZht\n+                        4hANZboP9OpYuBU40kpENaJY+sJUBKp\/QfZYsThQZeFY3LYBFXMnIPQEWaqsFeQG\n+                        lTqQrFKZfRzNBwBg78ZdueZTNURn+tVuxxPIbnVAxCOs8mafUvpvSsaIjYce8+hH\n+                        wCmoqvu5LheySqB5sfQZumF1tEKvsRkJ1KVrcKAzWyhzkhiqfJNI4sPC8+s9FaQe\n+                        ZBfA3ZS\/6yFBmzEae7E6GAu+gzIYqaaxdEfMhfIlhZWHpzB3BJrLz9RNDwJUOOFd\n+                        FTgnDVhuG\/gxkqlFnPY8DpcvhSl2eYMezxIVCYUcuDQPbxB7D6Gg79GzaoGJvAhc\n+                        T1y3hOVT9BuRj4A5fOGVb3hb7jd8qaqL5pmK2jDCa3w9jGtVJUzJYgOyDEKu4KxO\n+                        HrtAjkmp4\/h50KsHhetwJUJdEwWiKZwBXhINFjsOGUlM5XJT0CRtGCdFy4GXq3Q4\n+                        s8G7eXK+xaMG66NWeFXAFGmf72WuVMdwoNhcGEAM9kKu3GYHd7pLE4UCvVp4EvYh\n+                        +EpIKWuY3UMitvFYKLio8OAKi6RKU8OosUNXGwdAq9Vn2vHN6cecIEttXiWdF2aj\n+                        G7vLTmoFz0UCF2swHBwvQSR3UBV7zshegJswpNYNd0fN0PW5mqjIJph1F3k6qoCA\n+                        oLEkqFWN9yu+N7dfTtu2voIW1sYz+ysigOJRE9hpXkNIHD7rOX6xklBSKbZ6IB6o\n+                        k8PiyzLai8NC+k3qBXijUjBQMA4GA1UdDwEB\/wQEAwIFIDAdBgNVHQ4EFgQUQry1\n+                        oWf6MwRJYS29gYcFanUY94cwHwYDVR0jBBgwFoAUGwVj480zRhScjJ688jsKTlqQ\n+                        DuowCwYJYIZIAWUDBAMSA4IM7gDya3x1P7gnc\/43+gwI1bbPyLFhkbPTUdbp8wrj\n+                        S6y1IBreYKD5+OSNsHx1sQ+vThL20hYZunwSyzM3ud\/UFZJcpTYE3hLIqWYYlFfD\n+                        KXc9OUYfL4xYtwY9L7NuV9GitoPOZqXGxC8uFBcCPtgXnKKm+2VcUcp3WAdgnW6T\n+                        ohOKPc1JMN1ElgywyAeUKGyVu26WhQxltO\/tD9NyWjjx88GJQB0EAhd+CUx2gJoG\n+                        71QWYaHKKKY2Ap66VvNY8EwfG8xHfd1agWXl+dR7OldlYHAflSrZyczt\/m97CBfT\n+                        gz0q59YrtpgFC6A8f27DOns49\/pcvFrFvnqbrB6olgn4g95w9a+zTjK+0LEOLuZ7\n+                        coxK7G52UM4+zm89rgiV6Lf57E+gq6PIg6VJQzWeNlii8vK2c4D9+ru9DWxrQYIp\n+                        lO011cW7q37cw1UenD7ouG6zd0Rgq5LIaoeQgwngLFoAEGl213xGJ7nFmPKweq6m\n+                        jEWArh8WFdQS8xaArVxh16Qhijpk9aIMRXP8kv7x8ORXIOQkfE2zVQnnjMt7zTO7\n+                        YbKY0ujPJwEga8UsP95V3ApLLNc4S9EIm\/URSL9i1eA5Yf0\/7qZub4512LN3tH9f\n+                        QGr96wtIGKmMmD\/M\/ON86GXWRMvQW8w3DSgi73RuM5WH+IVZ8kRgdwx6ff\/Flbd3\n+                        PXXmxziQd6JdOIDn2JeTaEfZd6MxJ8juknEQTotIzOhSNJ08zcQqkCu0OQIcNMaK\n+                        vzbzEDP+VbiIGxL6n7Y3JRnp+ACA2pWbB5lUl7Ex2OMCO9zrGAL5f98+5RFId7Mz\n+                        2gQOah\/y2FFHVw72TB3XFzyPuThiTSeXW\/sQUMkvGXcb6cgUA25Umuq+tvKuktLt\n+                        H7Rrj13+g+cSgkDMKpHPx2aVTaZ3hchDqQhplLu8adVkjaXldrrU\/le3JYUwZCsL\n+                        4ZCbWfEZeRgq7rVirSSEm8U1psE5mFZ0LqewLz87FKIYmTFVY25Xew+T4O\/BC35P\n+                        k3xp5pP99ShC+0o0YyStQziC2PmNNzjm6xHGYAYas7gyfpqVz93ooN5lg9uMTnLs\n+                        SdAD\/jsumB9nLGFPJ9tNYmL6AbnlBZiBwg2oSuIlSUBTCMFmbt+4QvsgeqjHx7nQ\n+                        Z+oc8x7D3tSiVcf+sTICFRO6br2FF2PHDlTvKudW6ziFLsYWkkNK4K68p4GO983H\n+                        R8pd0uXyhICMHSgriODpHmbTvyV2Vzh9+AKCt8PLiixeKzBL0Q6A2lquMk+cJP8f\n+                        Q4QJL\/TbUJ1B0yy1GVy6oToID+zM7ZUwI85VEqBnwWqA\/UU3pggJg1CjItGrgM9x\n+                        fGkPVjPZ9IjadgB0tgfHZ97gW6YiocaXmu6rrYF6rxYkWDaww9Uq8CQsrv7YRb2Q\n+                        OeLCem1jyo\/98YeMxVxBXZtAqMfgbAd2f0pa9Y3u84OBvdLNIyHXDWgmIhHG4uy1\n+                        6JO6OxdU9qoEyw3s\/8hCAQbQZfEHTsTTbR+ij35PCZHfYOZiFUZozMCSslHSrbIc\n+                        +hmjd5slvDnbuxwCnhJX5dOnWRQtWzbUg4kJFwSven+MCQ6d8CS6RZbEHOwvCD4B\n+                        qIHUaR1+lT9bW8kynPMZk6GdKCvyAEVnf9ka4mIiJrzycqBwwdOTlfKsESviE2yd\n+                        9YyBF3adS6eOKiuE71HJ7h1gnpxQJLtrC0q4y4Rmh9arwDb5nQ7QrF4mG+jUMFLL\n+                        sR8jd+\/QHGmpZ5qhUfxyti2qQOteGjDlXtA2guahqCSX71GUpXLTY3VYisnWzoM\/\n+                        xdoMhKy+maEJ1mOeyrPnmOXh\/mxLWpwcN42QH3u+iktGa66LKNwk5P4+1aSjV62k\n+                        6jWvWAF6bSgr7hhffyt8Nr70HklYQg3NZpo5ivpzYzCJ6r5dm0yuL6pxJg098RYu\n+                        3CfyjyOHB\/FVhx+e9ADQ1I\/NbkGyDvIj\/AqD0TLbG9AyXU968SP3AEmedi3IZLGO\n+                        EtA373hLW\/rnVCa15+3rcLcQACfJwv8VwbIpeZSBh7fZ26KcR2Rj0vV7Qn786ZbK\n+                        6aG9SlHpRCsV6hiQdsCYr1k+X0a7wrRr80fHrCd07vqG\/hl4dbFu\/IhMeQ243K6n\n+                        3FTnHclYDoKaUQCmlOfgp9\/3djAb\/rOVwiPMoXkVS8JAJPa3gazejnITG+W209T1\n+                        ukA+AYvpAR2qd1ysBjZnZxbEswAWKk2z6O\/056\/F1AQaIVRgKBIYzuwE1lLNLNV4\n+                        OgLUZ791oEfjVx\/1QqhgLBd3pY\/U3535OlM8lCURjdMo0EuxsrIY3AxDQHdnSTsw\n+                        EzE6ZDFLCFEKEEw\/iVJul8qKUtFuoqsQMX51A2L1AosbaPzawY6RU2\/BWFqew2A4\n+                        K5Wm5YDwilHYlpBy3+F1ByNUI5+ayXMFwQi0dqpD6QXpuRm38Ze+qy2YKtaAljeJ\n+                        xfcJjdIrx2LiAvKGHO6yMb+JVGliBZr38wS5fJX3sZY1gWE3uG82qMo9ft5ovmoE\n+                        ZMMb4GSBfX8WTyncPmO\/t7\/wv+JbVP\/Hx0yv\/7WWVY1pPoC6boEtY4YrIHve7lxv\n+                        S8NSixJ8ESLzffJZTGc9D\/tDM6FRHobUZItSoFZwHpGGbfOrOD1Q8mWaVj2OxXh7\n+                        nlWrKX+WSZX59sR+Ez4eHejnNXFT2FGWrUfK05+0YooTn\/4jZE\/u8X9tSf\/HJkKb\n+                        NyKoDeJ9lwf60iJFbQNf1zXVc0U3I9y833CvUz3V1XKZoZ6AQXcc5NW+lNpj0CPD\n+                        3Z3tjwYGIdpQopZW6qYk66yektO780fYKdqG3W+0QvFmV25DjKx0DcNXDgs6AXn8\n+                        Dehq70ogiRaqisQuXE0+Qy9MdXwx\/9ytN6m3Th25dNg7PPKuPugbFAg3ev+RuPv0\n+                        a3BwLozRyAIp5VGuG7Iu0E80kAXQixkN3YQpcWhXTsJBfsrFyUVJLejYgX0Xmkj+\n+                        +2pf4+9IRf2nAwqcYRZylt1N0\/x2\/vVy7pz57NIoWGsQ9Vy8HcgK\/rus1PWRhN36\n+                        ic5IoCgko\/ctVpKZfX3Rhhm4qjWXEgzsiMj8\/RhbKC2m\/MobcCNCQUK26fwetMri\n+                        Sq62x3XTyaI4HU5kCQUdXcuaa13UvmFxNKqhKqJSYopCOk+2tP49qewc4dPKebbc\n+                        qYF8kVhpJB5cwifB3ieaRjU66PaTX2AwZNa0k3XrXmql9pQ6h6K7QJ+DucAJn1n0\n+                        FH0XElKBX2ebUC9luqUjHRKeJW\/FDZEijj9ez8ssGMD4Elcut\/qM1hNh1GB0hDN1\n+                        x8yE3KNwHJfs9bQxphoRYnw78rINuwUU9Yild15XLEa9CzUvwmOcwQXku\/X4aVPv\n+                        0qsUnF414LGeySk\/8XUcJewV\/u9EdIm1XvL77iifRaV9CeRu4yEYPn737QCW7j+F\n+                        Ex4WrWbokI54n+SeBuvZ6Jfs\/12lPjFVIsD9MM+YaIVA2846cVJ0Idc+o7MGXK5e\n+                        6p\/2PjlRktXrYPVHrIRP3Ouc2js0IBEK6STubJFbSnAHTSRQqmcxph1BXLf6A1dd\n+                        7dt7R7tKbepBxWKYq5liC9Rqq2oatrbMARH59EWscoEAzZP0L0rio1KPknvM0ZBI\n+                        ibiszAb7sqkh7Hq7EoicirdXTjItOitSQWshGiuiKVqCE0jANM7lFhfO63XsFo7G\n+                        GuOuqQKDJTx+8F5qHs2s7yC4uZDDmMx+pZ36J6Mae5CcyeXVQDgkBZdU47tVCeB0\n+                        7WqaXFAdbJTKVwEkG3PSg9qp8SoDL6c9eQye\/Hk1Z\/vmf1tYHoPg8iJpx0iD\/dEk\n+                        \/73iGZEAr7U7NM\/ldcDxCXO1mfBNSmixq6zp5jJEH9TCo+usT0dQKGW0N1zPyDrH\n+                        0qHWt1xSO0G6FPK4zTyEY\/84z+ecXFvxxynXLYYCm5kEhK06PYiVY5OKOaBe9vma\n+                        qS66MzHNpfjNblJfG9O\/HeiJLJ3vV7\/F3U\/kfxs3PStrMgoXMRt1KBrmIBB3F1xE\n+                        5WCaEONmuYSmJMZPbdkB+7rEsbC4v1cnyE0800BAGNYpVyPyTYbfPBthNEmYsBIV\n+                        KSYuVQ1259Ju69UE22dqnXnorsCZCXWEpmcmRO8\/Gvb0Y7OYFWltDeGLFJRbJ4av\n+                        5dtNm2ZH53uLPi3aYsZU9cyfxh7AcbKSfQlRSVKCj6o0BQ3ZvmBPPOvcsUbUU5oo\n+                        FgCPOse60fvnKhEEO9zEnuU3RObcQPkDQRmMQ3OhibiGzOEOaU6PCEVJ3P+N+lJm\n+                        \/0M2lNaYgaks0kmKoYdEmpLdmdGSCCB6HJ+nIIlwodrM0wK9SZUqkd+kFoGvGf7+\n+                        XkFvmlJbGn4UCaaHOUaDZsFBMiAcMAAcPv9FIM+A9NIjbC2imd0TJf+tLf6tLA6P\n+                        gFHtzTF9yuL8FSI+bbLr9go0PG2SnqPM4RQha4s2OoOvtNkQI2Smvu0AAAAAAAAA\n+                        AAAAAAAAAAAAAAAFDBUZHyU=\n+                        -----END CERTIFICATE-----\"\"\".getBytes(StandardCharsets.UTF_8)));\n+\n+        CertificateFactory.getInstance(\"X.509\").generateCertificate(\n+                new ByteArrayInputStream(\"\"\"\n+                        -----BEGIN CERTIFICATE-----\n+                        MIIZQzCCBxqgAwIBAgIUFZ\/+byL9XMQsUk32\/V4o0N44808wCwYJYIZIAWUDBAMT\n+                        MCIxDTALBgNVBAoTBElFVEYxETAPBgNVBAMTCExBTVBTIFdHMB4XDTIwMDIwMzA0\n+                        MzIxMFoXDTQwMDEyOTA0MzIxMFowIjENMAsGA1UEChMESUVURjERMA8GA1UEAxMI\n+                        TEFNUFMgV0cwggYyMAsGCWCGSAFlAwQEAwOCBiEAS5TClFAREZGCOzUUyaweo9mC\n+                        XMuGOTot+wRlT6IZLTe\/rRxJfGUC7uXKgKc7\/OC69aVKiFhaQBOXo9Iy9Canr7CC\n+                        vCGkQxcJDqrHWSwuqIplPESR6hk5MTNfUumJo8TMVtnFU3MtV8Rw+0GrdZtl0tBE\n+                        RTgvzZxONEoRKPqeEeBDWOGS7QFLIyMqfuKyLiNxf0QRHuM1dTmcN2RtqYE+ybIS\n+                        r+lOXcXCMwpylMwfQjSm0\/u08WhauIksBKyxfNHBcNewYRtqcXbHlMyMZ\/VfySPC\n+                        rSAxAPNlmRiCwwJD13gThDtex8lkAyJjcGCS7PAMdRa+ZORZjKQibAabteZ+QXXP\n+                        IobI3VxIimxYYfMbqgvQJpRw6LVR3TvNOMhsEvnNsXbHfci2wCpwH0eJAshVP2lM\n+                        DYJye0xKXCwQQSEqoSdICLghEbN37HUhTpsZePdgBNQTnZhhP0uOmNIK97U0BzpQ\n+                        mpWbenVk+bQMohi\/YYKTIKhQIBeVTTKNesbHaewpcAdW57BoWzQNXhGAWVBKSaml\n+                        ChAZjrEKV4RnjrQn17S6u5VSkzsGKJeXPhMY6vCg6sN1hKZUAbFwPgQqzNg3UxSD\n+                        8kHK3NHB03gRnmlEKdsZmsiR5MU0N1cIW7OueDZnNQxEWNl2cuhh6AsdJnlRDqOm\n+                        8jYMd6RpQsegalVNIoCAyEtHrvFNsXYgyxbAarMKG+TNpwgr6fh+nCEcRpFjSaW6\n+                        jqpSAccpSjwIhbU7ZXRSEIgl7GRskKBGEjJO59Axr+U0MTLL72e277Gl7CgJt3NT\n+                        jOd7PYsE6ws8IlYBHkxxbBmougdSv3FJIRdknwYVwykPwppG\/eS9UtuShtYDOIJE\n+                        JZwVp6wrZApgzAM3alhBo\/uKRzVo+psaJnIV80wBaXsPDmJxddchBbdwfCm55hS9\n+                        wzpvbIGKlTcLQniC17R2eWqexuuZMnTNmyORqCukXjOT0umulyHKnWwbmItYJ3E\/\n+                        kKZYXelDNSjAKwPOELtfcgE40Pu0wwwSZrkY5Skl3+F7N\/ldIrylT0dZGayFkJjA\n+                        8NCKxYde8ptW\/RQebvFfcAoLZvOVlcWIF3NzxGabIbwHHkw6pfC0oxtiWPNdokrD\n+                        zSnH8gkkEMUHg1WxOPtTprmubgucCCQ+e6pFxHN264x\/E9TPUapzb6MVQMkkHzcN\n+                        pUS\/n5wo2aV+Lyp8qVpOS0ZuZBqzvMdq3xE51Wem8StS86ZefsCq4mvKqMVYM7BO\n+                        WZmOvJoZMPu20iM8U9LB+LlRjjwt5zoZ3uazgKWzKXHPZOEp\/WwfpuddSiNFAelm\n+                        3TpUCvXI9PNKa0olPuKEklZtXmfG9VhV\/LBQb7BsFWdE2aA6MaJvqUytFPFXt\/MD\n+                        0Hppx3N2j8tNB5wJBZcDoMOpTeS5nqOi8WWD0PkXCjlQ2we08LwwgCkn+feWG2JZ\n+                        iSY2qVAqJwUwNjd5ndNE2kUcHPe\/Z4QM6zB5q4xrjBkn9kBTxhJFDEXJ5gO8FmZu\n+                        WWs0ceEDtvFUR0JNFwIgSBEf+9N+HGcPZPFLinsyuUwaSbRd0vw4zVKJ2RCtY2As\n+                        9eEwQsZKxnl7iftVGtCOBaktIAzMt+cS7yPJMSyzUPApq1N+KHNH\/TB1rBCQang\/\n+                        HGwHzLiPQSKMS+HGQPeQtcOl1dPKeSSV10vEYVYmWMB6xgAna5JKtbyb4fBJTLdv\n+                        gvRgp0gJcmYzgeFpmWBh15mFnsVNT1ylxBHAHbFZexZZd2ad4TqSijSvusJY\/qjE\n+                        dkI5yUIdwxGb9bR2mSBpeDJ7HFNF73RqeYOEHwVuJTQQCrJNTpq70LF8apW9TDwO\n+                        QPaeFhKs7rKLmQhslRFucgQnOJM5C\/RriZs2KGsOvxlHu5iE9zLKJ9qCsZtdwMx\/\n+                        iIVxSRCIiyMQxPkxnUELNOZDO5AD4hdruZUldFYQbolSFjuLpZJTDMWqCutDrTmP\n+                        6el7qlI9ekQxZ3w9OvBxnkdduFypWvUIm+q+sFsvqrSJa6YPgciEcqV7RqgogmoM\n+                        37RG+BiRgtK\/XqxOwcxd6vWZyKE+SCNUBtF\/\/dyDRLbGaYSoaKqS+gIieghpUOsM\n+                        hwHtWNxih3a5g4guEXWjUjBQMA4GA1UdDwEB\/wQEAwIFIDAdBgNVHQ4EFgQU2oIY\n+                        LDnr2zUNkE7kvFB7cgQ\/+iMwHwYDVR0jBBgwFoAUiYhnULV8JNs\/wBLmHt5ZdTM3\n+                        N08wCwYJYIZIAWUDBAMTA4ISFAB0Ilvfx69mChnV48hOgGE9RRQLmMKyjFn4sKDx\n+                        FO8grAAsxKw9hdEkv+TKqayLkCkxeDnhL\/HIOnDRXxZ9iVUMcCUrhcerYIIZiUeu\n+                        CJYYHAk0Wv\/eQF+qzT3UNREKdljBD7rlem7wRC7oT6vf304BFsDOQmL3yL3gh8hI\n+                        ycxU5SMh3dH6Gj1wSug91LVBV\/QhLebDixXuKOe\/q5dyNQRk1lI4im5ysGCkGzdq\n+                        UZuanqBYvvE0c1dvvgeG9+qV9ARQOxmOaKYQMENVVA9HbzGV66GUrR19jK9z1bRI\n+                        OSzFCba83oGHKyC9bHCLfvtXFXRxNVlDHGk7dRm2dAOds\/iWJL4cu\/M2O8rWaxIt\n+                        ypfeieyKbr6CQjGzWqQ5lNYC3piMO9Byl6QxvZqBPhFeLbXYc3ZFhk250oz7m+LF\n+                        DpHX0+uf4SROW51EDoo3gN3hQPp9usgYQcfprP\/SpxGmxJ03GaHv\/tFF\/pEwCAT+\n+                        sGPjYGsT14KVNG\/\/guI4cHs9pE6s5Y8lslD1AUjFg8VQlIqF2JCPnaOGyagdEem3\n+                        mazLJ0y2KCnFMhqp3oGaVWXC2LSwyOLe0XKeJWRbuvXQ4Wl81OItyLX86fjol8bO\n+                        nCG83V3w4L3Omizd9SdnBtd6uv+1S6oxEvNcs7+pw6TN\/6EuUaRPhi\/jYr8Zpplq\n+                        JfsCOUoLs6hJLjrD5QMmCCxYCrV76ea6Moyyr1\/0mfElOkkTLMLzKN5p4vqPEdAd\n+                        N5vDAT8g4Yn0MsRPqqK0pXyUA7Ax9ISGuQebeF9rBEtoEIG+bq4wXBWxmG2gQ3Ki\n+                        ctNDS5LUZS23n85pZ8t002IX6fXD3JYtn4UMJEjbSh3+s6WY3A1qG00bLJL4chIq\n+                        +G8mBAZm0\/e0Kxb+H7Y1tWZnTe+pi08fKwRcPTEdHXLKU8bS53e3A851y8cNrGs0\n+                        dNHaDQHjcboFgDhXS4geBY6iwzHGdmfDKcA5mxURP+XUgG6HBLuCYCmx0S5OzP+F\n+                        ZY+bChnR7z0j8bTl4YOOIiaHyh2CW8frGsIlw1tBINezLWa7sr+4rx6C1CK0F2J\/\n+                        IdYIdEMLiL8Yx85wL0q0EufDoc\/HPQRe3hDDtYsex3RMr83osZI+okf+3vtMoLv3\n+                        CJxyZIp8Di65SuZRHZ5KNW\/DGFWGAobRHbS6Va37KTjzysg1VsdM6wqcIYFvOMV\/\n+                        mvUVJ2MbXSawQuwKVMjYeibT8n55S9iL7mcfnivLgl7QNO86vaks8ZRpnZEA+FVS\n+                        QiS0K9eZnBTI7L4bzJKZHgTg0tcd13qZXZtUpQdXxquS63o0lDZs7k5iKx7Xt3Pz\n+                        T1f2y5ADQIrSPJ9Ytw71TubGotB39vkiqwvrF2fl7n\/Ia8aEHp3k6x1OUbOcQ7G7\n+                        PW+sE2mdgy+2FcSlyomFXDent9ayH135V2k87\/YYwtJjt2rFMSRogut01AtKJ\/On\n+                        C1E2X5s5U9FXmeuy1ss\/U6zHZ+VEiSSZlBu1ej6\/yrsCAsu03\/HepXMfbh4NuB4X\n+                        yUTGRYg4rF12nH8ah9Er33b4iYM6zf5JVPRPba+6oDjQHYAjvD+gRF9D5t64PcaQ\n+                        JAA381HRYqtigLpS1NaAD2bUvg2JYsZEkymXs1w+iG8aLBcakJpqmwKazFczcpZJ\n+                        nAfhVAopjRQTyGxyslH+01Kd4ZUiP4LKZCkNrQjsNspIHIaAPMp0kL\/FA03tfGwe\n+                        sZvcvlnJYD7PIrwxCWdIFW24A6yaGKg4xE1NO9oJQWLRNDDY6IyOYf9jw4YNlcG5\n+                        wsJ5IsbUcUckGOPHiRx9IHSiOFewb5KWjQUN79wA9\/w1SWToG2fUSrfUSNhEvsV5\n+                        F+As9EcQvgVGtINulzWWHxfCGbfVHZ8EO35xQG077xcEGMhMz9eNWQR8GdQOLy2k\n+                        QjNlZV9U9pKa5CcVjkBRHPpfsFOMT4qHW6Arv6VoNcTwUuobFtl6DYWTeU\/qrmN3\n+                        e5gM176CKneRS8IoDF8nZeCDCeHAD17g4V9UUKNaeHaVQZ4elvvVwPhZvdrTGoIp\n+                        +VZrYIJqltUCZwvBvsxy6ILzZHCGTLTQwWaHSiaRLVKUPVymXVBnzj2cReDb4pk8\n+                        \/bQu\/03ZSquOub6PTV\/8U7ejb4fXXa6TEWQa2Sao7ziqYIUTfwoPzNfvz4eLFMPw\n+                        j7USnBXe8mV+MOgL2ncK7aobOIyfPwal5IEAA5ovPmY63T1JQGdAoumKTO7NOVb5\n+                        hR\/fXq25OrWf77Df3vlNdi5n1GC7UFXN2FdJ4wJl3X8my5L3sVOtzAWKMAqBLbqN\n+                        cKFKxMvbYI6gBT79Vm9f4LgwGEf9lFQUk3ysP\/uQFwURGGglzPN4GmIrNHPNx5yB\n+                        bUU74kQ8d5KOYmP09S6gyxVd17nau6i4BkxwA69HnIS7RDXfg7kFnrnNvk0ySHFb\n+                        a8YmLTK4n5HEO2KRSoayIjMq5j7CvTZZag\/emL3dSdFsNsnqJclUl5RImlXg5xnv\n+                        nf5x+lXcx7IZ3fBau3yE001C4W+ljlh9EzaRqTt0vT2JuJ\/Mn4iRws\/a7CYdX3+L\n+                        FINsrgkOJwbgUOFZGG\/LShXe1OjPxbVnE0TMl35QqC6tYyY+57lqb1cBc3+ZPmTc\n+                        Q7yOeHfGAhdI7aYRV8Gqt2nx8ZwuhCJRuuxWGYjbpx9StbbVeSmQyQODoUUeXvBR\n+                        7DjFqKVRz3CXFW0j8SMRJiXCk8pQb3J+cbyA2AuXJkBlkIYswLVgH2NT3onbnhO6\n+                        0YbkUiv7d8AARktu1VHDpJWr5JgMSQ05k5b2rqKD0CPHWphapFFyEDBESeLLmnUH\n+                        WXf0aNl7VrYrXYRzEXzUGDf61yUJbBw9gTLMDC8WGHl\/NPth57aZ1Ao\/IB8Ir3z2\n+                        vXABqKz3Byk8klGzEa37tist+sZjN87DhKGjAUcolgoOn8F9p+SAwnLVLMhBo+Yi\n+                        Fpu5hwAIggzYhC+fgH17Oz8m8SEL+o6LUoAtleMZPQCgbSb88CvBZPHBPa3l6+qF\n+                        cORCrafkR7eKWUBCcJejSzUvap2ViqDSnerLHl0cppKvL0B9Jf++DO5RARKhTLdL\n+                        BKCHsfGVWJh+cpePHdMM0Kzax5K46RjbKrK0v7qD5oHfHQOI6RV3oJ\/SXuZr5HRq\n+                        jHgy6quxwksp5w1il324kdoQ+VzaVHNbd7Oyngk8hM1RC2\/HVyE\/8xJjlZUxMolx\n+                        \/D460FpuXdxyuYg7Z46sHNv1o3O7sRiOFXJfOH9wVb6H4PAo3T8kK1HASaA4fXq1\n+                        lj4NGV4eSD0bxDNJv+7uywbUTTKzy5ObF4swVgkfQHtRkGoXZwSTkIGnGw+bwOwO\n+                        GIz2W0T4YZVwbHs6gChn7cCQnqUmrFH+wZn54qY5FDX9ZyGsP2qxeb5zh7GtZx4T\n+                        WjcEkEok2O2YwvteSxYUPM\/5lkol5edy9e5kua8YKEEFue04CghZv37ROQnh5+\/s\n+                        NFZooNTzP7iPDcYuPMYSCpbowrVaRRxu7A3+IK37n9gkB9NMXT4xXizv79ey3gO9\n+                        xrk+2aa8GTC4JEXM3EUjiLIhlQ\/GFLk6xPi0y9\/dX4txmRzGi6DEyi6yfpog2xho\n+                        56zUqHZ2qcKBmEyrKzd99JmDe3Riw9C0Lci3SzKP1DvNQktDerm5TkyhJbOQl5Y5\n+                        fjkksJjUdEvWOGysJHx7GlUZRGPytXgTuXKEZ6oMObXt6+\/lQFdB4117dsamPdl+\n+                        IXyc9FxgwMCyaECP72CuvJwCNRrPEIxlRJAaMPYhalgltqGGFm8vDhyKgfbAyhIv\n+                        OrkH6\/7oOY8V\/9SS6XtRIZD8WpLsxIKhB+spvtFSA3mkgLOw+Vx46CtV+91f5rJd\n+                        HcDAqOMl\/KebHbt0gTKiIncx4ICUS3OcTmF5MEhSxwBHqTGeF2u6w62h9jlpp+JD\n+                        m34hh9A1gH3OwsnBGcBMxb6H23iXNGYZYyWyneIluQTvRT0CnKra8hgm8ONjXK6F\n+                        N8BZepxBL1Bu7TQIH1iYUW5LnQzIEm6eIf\/iaUz6S4RRT042Cek8YWWpkhAf4ko0\n+                        0syLPVpPPxSZMpj2rUKmyOiPxLtHeVhE1QHeUS9YqkjEH9W31g68lzI\/1OwIAPmX\n+                        8\/0W2ehncAXZzcvaqKn3sVF0ntfY6zexcvkWKnQntyrVik6feikCRDym5CguxGzv\n+                        leBp4PVF9kMJ+lbRTCgvu+rAu70sm7HRYkbtvUQzdAkdIQYNGYa5Ah9+y\/oI0vy1\n+                        C4Yz5c5D4XLN6lomHL\/N\/e2A6RPwCa4i5BdVDButLBAiXg8QLeicikPLxmnzVJdV\n+                        hat\/2VgWDPmrW2hOfHgka+S4muOUcxHkLLKz4vIy4H6aUztSnjod5P\/03JrQOm8q\n+                        iBzhOYA9tzOKxNOn8SxlWlJHhT8vb7KX3pT9dKmWqfTPn5gYlnT8rexudJkcX0pY\n+                        Qm9cLNKThdRAwP\/t7Yk9evt6qh7g\/\/\/JMZjKMIHtPE+mL5m\/xiBjGNiA1JkV5\/vl\n+                        55tWqRGoJMv0qgcPvM9IKvUMk65x2gjH5os1fuV52BgVOpcwhbLJEmHG4wd\/IEo9\n+                        GrW7rFFGL4vyUNhxxXsmAsfhYsoSRR\/s3GlX1FwPDxqUw+VS2duVCHYvKDBsZaLP\n+                        Ergt6fDalHKZVTnI2tVGNH3fFpAmBC5V8Iq8thzK4fRK2yF8nGP4HYSWNqQc2P5o\n+                        hB8wvEofpGjitBdNqlujkBMcNsLPPk9ZnUmQ3\/erzFw34b0jTMUBrsfleaG2Kf1S\n+                        9CG6YUiULoMoRh8cPSSrvaGCxfNx9M\/WkaI8JvDsEL19ASBYqu3bOV2bCutPgbfP\n+                        Bd1C6N8fNNzJ7hPSVAqz980TtfmgK+dj4NqhEw5AaVxy4+9IVGt6JhYAT8F\/\/ATK\n+                        xfAe44nD1Bj8UGN+seYwEk7dKaCd703yP6CNu9447k\/3xkvtwcwtL40Kqmza6913\n+                        B64HvQ2GjSaOdIAkaPq1ACy+2OI+S1kIvOTKBemHF3KMJf02+1ZdAhwJ4uJSnGDi\n+                        uVT8svHM779FgIUMZjOmdE8dI7jpRKsw3czgucG2r\/EPYRVa1B8cQd9iq8Xw1\/Ce\n+                        7CbgROAqmfboMupDgA+QEV9Nf2aAwqQTEs6yG5saOtoNiCULXwNmh18RPWhZhKqm\n+                        voXPxnZyZ2VsN3jlcFB2WG5lngf+r\/\/d32QX8ptGQHmETXxIvMmRG2p2TS7PAthx\n+                        T45SNsbL5jNQFysjJQWTlGGYGjNGQJHtqhmiIwpUICoJNymGfYEkrg84QKo7+NdX\n+                        xZFd7HAAw9MdSl1tvkLX+uiFzl+2d\/d+SvAxHD3qDitg\/90tUDLAoAxmaYO3lmFy\n+                        kTuJUMVJLhkavp3LC2Q5K+mgevqlnw4h+sw2lY0a7RVLLnHc6\/FVi\/sC\/Smu1u8u\n+                        019R3unx8faluUtqsRvlxAjtH1feQdIApy5FFp5m8t+Ixpe1QipBTN3Aa+g3bph0\n+                        hWw7u9JgPOja0lIJDDyGwWhyv4iCsII1OSKhHdLn3U34BCQ8nTY2DPqvojpRKg7u\n+                        PVnSPpbAdLnfSU3Z+x4eQZiZLKQ8LwcOnU6+J8S2Mneboj4t8chpblbFqXEX2GDy\n+                        jE6JffIAEtZan8bJyuD9lNJgr4raeyt2rqRLmpoY1Emk5HSioIjsgUTu92FeMp\/b\n+                        YWP6Fc\/rXHoYl5xR5kUW4BtiB+592H\/XdJzPHJQx2kjzS4gh1NH5s0yENMOWYTar\n+                        0HJecZth4BF3SNDzElWcOvGWnMQj\/fpkHgAq+aqXa2UCd4P\/FaEXVUOuxy+vnHwe\n+                        qqigp\/mWD19+DiTyv7WEe+o\/AomHctLyigGFlR2zs3yLXSwNnDJ6YANpgMlEspwS\n+                        3ToM7PbcVC9vDfjKhGdAhvdVT1lr7IU0fYeMVppE6HkoKS6tbsokb9qtbvtvWCfz\n+                        I6342qm7BW6\/SiZEx\/Sl\/DzF8qA3eLHM0xFR2kvHsn+5AB5ucy2ZOJF2W9XuwYSU\n+                        BPoRrmdIWKQYC8\/MD5PtZMqUoEGvHl6jFpfbO6+RP6NakpA+q4Tl4xuDNyeKqOdD\n+                        9+XdE3acWR\/r+JseircGaBDDkpjBElcYgZuLfqKrx1+G5i6t6gWopcNtLmVcuAWv\n+                        HVT854OIkNIUoqfnESODrczb3C5kjJ230df4V156qMbJBwwcJFtzf5ObyO3ycnd\/\n+                        kNggIp4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQIDxcdKS4x\n+                        -----END CERTIFICATE-----\"\"\".getBytes(StandardCharsets.UTF_8)));\n+\n+        \/\/ Data from https:\/\/datatracker.ietf.org\/doc\/html\/draft-ietf-lamps-dilithium-certificates-06\n+        g = KeyPairGenerator.getInstance(\"ML-DSA\");\n+        g.initialize(NamedParameterSpec.ML_DSA_44, new FixedSecureRandom(seed));\n+        kp = g.generateKeyPair();\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MDICAQAwCwYJYIZIAWUDBAMRBCAAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRob\n+                        HB0eHw==\n+                        \"\"\"), kp.getPrivate().getEncoded());\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MIIFMjALBglghkgBZQMEAxEDggUhANeytHJUquDbReeTDUqY0sl9jxOX0Xidr6Fw\n+                        JLMW6b7JT8mUbULxm3mnQTu6oz5xSctC7VEVaTrAQfrLmIretf4OHYYxGEmVtZLD\n+                        l9IpTi4U+QqkFLo4JomaxD9MzKy8JumoMrlRGNXLQzy++WYLABOOCBf2HnYsonTD\n+                        atVU6yKqwRYuSrAay6HjjE79j4C2WzM9D3LlXf5xzpweu5iJ58VhBsD9c4A6Kuz+\n+                        r97XqjyyztpU0SvYzTanjPl1lDtHq9JeiArEUuV0LtHo0agq+oblkMdYwVrk0oQN\n+                        kryhpQkPQElll\/yn2LlRPxob2m6VCqqY3kZ1B9Sk9aTwWZIWWCw1cvYu2okFqzWB\n+                        ZwxKAnd6M+DKcpX9j0\/20aCjp2g9ZfX19\/xg2gI+gmxfkhRMAvfRuhB1mHVT6pNn\n+                        \/NdtmQt\/qZzUWv24g21D5Fn1GH3wWEeXCaAepoNZNfpwRgmQzT3BukAbqUurHd5B\n+                        rGerMxncrKBgSNTE7vJ+4TqcF9BTj0MPLWQtwkFWYN54h32NirxyUjl4wELkKF9D\n+                        GYRsRBJiQpdoRMEOVWuiFbWnGeWdDGsqltOYWQcf3MLN51JKe+2uVOhbMY6FTo\/i\n+                        svPt+slxkSgnCq\/R5QRMOk\/a\/Z\/zH5B4S46ORZYUSg2vWGUR09mWK56pWvGXtOX8\n+                        YPKx7RXeOlvvX4m9x52RBR2bKBbnT6VFMe\/cHL501EiFf0drzVjyHAtlOzt2pOB2\n+                        plWaMCcYVVzGP3SFmqurkl8COGHKjND3utsocfZ9VTJtdFETWtRfShumkRj7ssij\n+                        DuyTku8\/l3Bmya3VxxDMZHsVFNIX2VjHAXw+kP0gwE5nS5BIbpNwoxoAHTL0c5ee\n+                        SQZ0nn5Hf6C3RQj4pfI3gxK4PCW9OIygsP\/3R4uvQrcWZ+2qyXxGsSlkPlhuWwVa\n+                        DCEZRtTzbmdb7Vhg+gQqMV2YJhZNapI3w1pfv0lUkKW9TfJIuVxKrneEtgVnMWas\n+                        QkW1tLCCoJ6TI+YvIHjFt2eDRG3v1zatOjcC1JsImESQCmGDM5e8RBmzDXqXoLOH\n+                        wZEUdMTUG1PjKpd6y28Op122W7OeWecB52lX3vby1EVZwxp3EitSBOO1whnxaIsU\n+                        7QvAuAGz5ugtzUPpwOn0F0TNmBW9G8iCDYuxI\/BPrNGxtoXdWisbjbvz7ZM2cPCV\n+                        oYC08ZLQixC4+rvfzCskUY4y7qCl4MkEyoRHgAg\/OwzS0Li2r2e8NVuUlAJdx7Cn\n+                        j6gOOi2\/61EyiFHWB4GY6Uk2Ua54fsAlH5Irow6fUd9iptcnhM890gU5MXbfoySl\n+                        Er2Ulwo23TSlFKhnkfDrNvAUWwmrZGUbSgMTsplhGiocSIkWJ1mHaKMRQGC6RENI\n+                        bfUVIqHOiLMJhcIW+ObtF43VZ7MEoNTK+6iCooNC8XqaomrljbYwCD0sNY\/fVmw\/\n+                        XWKkKFZ7yeqM6VyqDzVHSwv6jzOaJQq0388gg76O77wQVeGP4VNw7ssmBWbYP\/Br\n+                        IRquxDyim1TM0A+IFaJGXvC0ZRXMfkHzEk8J7\/9zkwmrWLKaFFmgC85QOOk4yWeP\n+                        cusOTuX9quZtn4Vz\/Jf8QrSVn0v4th14Qz6GsDNdbpGRxNi\/SHs5BcEIz9asJLDO\n+                        t9y3z1H4TQ7Wh7lerrHFM8BvDZcCPZKnCCWDe1m6bLfU5WsKh8IDhiro8xW6WSXo\n+                        7e+meTaaIgJ2YVHxapZfn4Hs52zAcLVYaeTbl4TPBcgwsyQsgxI=\n+                        \"\"\"), kp.getPublic().getEncoded());\n+\n+        g.initialize(NamedParameterSpec.ML_DSA_65, new FixedSecureRandom(seed));\n+        kp = g.generateKeyPair();\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MDICAQAwCwYJYIZIAWUDBAMSBCAAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRob\n+                        HB0eHw==\n+                        \"\"\"), kp.getPrivate().getEncoded());\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MIIHsjALBglghkgBZQMEAxIDggehAEhoPZGXjjHrPd24sEc0gtK4il9iWUn9j1il\n+                        YeaWvUwn0Fs427Lt8B5mTv2Bvh6ok2iM5oqi1RxZWPi7xutOie5n0sAyCVTVchLK\n+                        xyKf8dbq8DkovVFRH42I2EdzbH3icw1ZeOVBBxMWCXiGdxG\/VTmgv8TDUMK+Vyuv\n+                        DuLi+xbM\/qCAKNmaxJrrt1k33c4RHNq2L\/886ouiIz0eVvvFxaHnJt5j+t0q8Bax\n+                        GRd\/o9lxotkncXP85VtndFrwt8IdWX2+uT5qMvNBxJpai+noJQiNHyqkUVXWyK4V\n+                        Nn5OsAO4\/feFEHGUlzn5\/\/CQI+r0UQTSqEpFkG7tRnGkTcKNJ5h7tV32np6FYfYa\n+                        gKcmmVA4Zf7Zt+5yqOF6GcQIFE9LKa\/vcDHDpthXFhC0LJ9CEkWojxl+FoErAxFZ\n+                        tluWh+Wz6TTFIlrpinm6c9Kzmdc1EO\/60Z5TuEUPC6j84QEv2Y0mCnSqqhP64kmg\n+                        BrHDT1uguILyY3giL7NvIoPCQ\/D\/618btBSgpw1V49QKVrbLyIrh8Dt7KILZje6i\n+                        jhRcne39jq8c7y7ZSosFD4lk9G0eoNDCpD4N2mGCrb9PbtF1tnQiV4Wb8i86QX7P\n+                        H52JMXteU51YevFrnhMT4EUU\/6ZLqLP\/K4Mh+IEcs\/sCLI9kTnCkuAovv+5gSrtz\n+                        eQkeqObFx038AoNma0DAeThwAoIEoTa\/XalWjreY00kDi9sMEeA0ReeEfLUGnHXP\n+                        KKxgHHeZ2VghDdvLIm5Rr++fHeR7Bzhz1tP5dFa+3ghQgudKKYss1I9LMJMVXzZs\n+                        j6YBxq+FjfoywISRsqKYh\/kDNZSaXW7apnmIKjqV1r9tlwoiH0udPYy\/OEr4GqyV\n+                        4rMpTgR4msg3J6XcBFWflq9B2KBTUW\/u7rxSdG62qygZ4JEIcQ2DXwEfpjBlhyrT\n+                        NNXN\/7KyMQUH6S\/Jk64xfal\/TzCc2vD2ftmdkCFVdgg4SflTskbX\/ts\/22dnmFCl\n+                        rUBOZBR\/t89Pau3dBa+0uDSWjR\/ogBSWDc5dlCI2Um4SpHjWnl++aXAxCzCMBoRQ\n+                        GM\/HsqtDChOmsax7sCzMuz2RGsLxEGhhP74Cm\/3OAs9c04lQ7XLIOUTt+8dWFa+H\n+                        +GTAUfPFVFbFQShjpAwG0dq1Yr3\/BXG408ORe70wCIC7pemYI5uV+pG31kFtTzmL\n+                        OtvNMJg+01krTZ731CNv0A9Q2YqlOiNaxBcnIPd9lhcmcpgM\/o\/3pacCeD7cK6Mb\n+                        IlkBWhEvx\/RoqcL5RkA5AC0w72eLTLeYvBFiFr96mnwYugO3tY\/QdRXTEVBJ02FL\n+                        56B+dEMAdQ3x0sWHUziQWer8PXhczdMcB2SL7cA6XDuK1G0GTVnBPVc3Ryn8TilT\n+                        YuKlGRIEUwQovBUir6KP9f4WVeMEylvIwnrQ4MajndTfKJVsFLOMyTaCzv5AK71e\n+                        gtKcRk5E6103tI\/FaN\/gzG6OFrrqBeUTVZDxkpTnPoNnsCFtu4FQMLneVZE\/CAOc\n+                        QjUcWeVRXdWvjgiaFeYl6Pbe5jk4bEZJfXomMoh3TeWBp96WKbQbRCQUH5ePuDMS\n+                        CO\/ew8bg3jm8VwY\/Pc1sRwNzwIiR6inLx8xtZIO4iJCDrOhqp7UbHCz+birRjZfO\n+                        NvvFbqQvrpfmp6wRSGRHjDZt8eux57EakJhQT9WXW98fSdxwACtjwXOanSY\/utQH\n+                        P2qfbCuK9LTDMqEDoM\/6Xe6y0GLKPCFf02ACa+fFFk9KRCTvdJSIBNZvRkh3Msgg\n+                        LHlUeGR7TqcdYnwIYCTMo1SkHwh3s48Zs3dK0glcjaU7Bp4hx2ri0gB+FnGe1ACA\n+                        0zT32lLp9aWZBDnK8IOpW4M\/Aq0QoIwabQ8mDAByhb1KL0dwOlrvRlKH0lOxisIl\n+                        FDFiEP9WaBSxD4eik9bxmdPDlZmQ0MEmi09Q1fn877vyN70MKLgBgtZll0HxTxC\/\n+                        uyG7oSq2IKojlvVsBoa06pAXmQIkIWsv6K12xKkUju+ahqNjWmqne8Hc+2+6Wad9\n+                        \/am3Uw3AyoZIyNlzc44Burjwi0kF6EqkZBvWAkEM2XUgJl8vIx8rNeFesvoE0r2U\n+                        1ad6uvHg4WEBCpkAh\/W0bqmIsrwFEv2g+pI9rdbEXFMB0JSDZzJltasuEPS6Ug9r\n+                        utVkpcPV4nvbCA99IOEylqMYGVTDnGSclD6+F99cH3quCo\/hJsR3WFpdTWSKDQCL\n+                        avXozTG+aakpbU8\/0l7YbyIeS5P2X1kplnUzYkuSNXUMMHB1ULWFNtEJpxMcWlu+\n+                        SlcVVnwSU0rsdmB2Huu5+uKJHHdFibgOVmrVV93vc2cZa3In6phw7wnd\/seda5MZ\n+                        poebUgXXa\/erpazzOvtZ0X\/FTmg4PWvloI6bZtpT3N4Ai7KUuFgr0TLNzEmVn9vC\n+                        HlJyGIDIrQNSx58DpDu9hMTN\/cbFKQBeHnzZo0mnFoo1Vpul3qgYlo1akUZr1uZO\n+                        IL9iQXGYr8ToHCjdd+1AKCMjmLUvvehryE9HW5AWcQziqrwRoGtNuskB7BbPNlyj\n+                        8tU4E5SKaToPk+ecRspdWm3KPSjKUK0YvRP8pVBZ3ZsYX3n5xHGWpOgbIQS8RgoF\n+                        HgLy6ERP\n+                        \"\"\"), kp.getPublic().getEncoded());\n+\n+        g.initialize(NamedParameterSpec.ML_DSA_87, new FixedSecureRandom(seed));\n+        kp = g.generateKeyPair();\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MDICAQAwCwYJYIZIAWUDBAMTBCAAAQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRob\n+                        HB0eHw==\n+                        \"\"\"), kp.getPrivate().getEncoded());\n+        Asserts.assertEqualsByteArray(Base64.getMimeDecoder().decode(\"\"\"\n+                        MIIKMjALBglghkgBZQMEAxMDggohAJeSvOwvJDBoaoL8zzwvX\/Zl53HXq0G5AljP\n+                        p+kOyXEkpzsyO5uiGrZNdnxDP1pSHv\/hj4bkahiJUsRGfgSLcp5\/xNEV5+SNoYlt\n+                        X+EZsQ3N3vYssweVQHS0IzblKDbeYdqUH4036misgQb6vhkHBnmvYAhTcSD3B5O4\n+                        6pzA5ue3tMmlx0IcYPJEUboekz2xou4Wx5VZ8hs9G4MFhQqkKvuxPx9NW59INfnY\n+                        ffzrFi0O9Kf9xMuhdDzRyHu0ln2hbMh2S2Vp347lvcv\/6aTgV0jm\/fIlr55O63dz\n+                        ti6Phfm1a1SJRVUYRPvYmAakrDab7S0lYQD2iKatXgpwmCbcREnpHiPFUG5kI2Hv\n+                        WjE3EvebxLMYaGHKhaS6sX5\/lD0bijM6o6584WtEDWAY+eBNr1clx\/GpP60aWie2\n+                        eJW9JJqpFoXeIK8yyLfiaMf5aHfQyFABE1pPCo8bgmT6br5aNJ2K7K0aFimczy\/Z\n+                        x7hbrOLO06oSdrph7njtflyltnzdRYqTVAMOaru6v1agojFv7J26g7UdQv0xZ\/Hg\n+                        +QhV1cZlCbIQJl3B5U7ES0O6fPmu8Ri0TYCRLOdRZqZlHhFs6+SSKacGLAmTH3Gr\n+                        0ik\/dvfvwyFbqXgAA35Y5HC9u7Q8GwQ56vecVNk7RKrJ7+n74VGHTPsqZMvuKMxM\n+                        D+d3Xl2HDxwC5bLjxQBMmV8kybd5y3U6J30Ocf1CXra8LKVs4SnbUfcHQPMeY5dr\n+                        UMcxLpeX14xbGsJKX6NHzJFuCoP1w7Z1zTC4Hj+hC5NETgc5dXHM6Yso2lHbkFa8\n+                        coxbCxGB4vvTh7THmrGl\/v7ONxZ693LdrRTrTDmC2lpZ0OnrFz7GMVCRFwAno6te\n+                        9qoSnLhYVye5NYooUB1xOnLz8dsxcUKG+bZAgBOvBgRddVkvwLfdR8c+2cdbEenX\n+                        xp98rfwygKkGLFJzxDvhw0+HRIhkzqe1yX1tMvWb1fJThGU7tcT6pFvqi4lAKEPm\n+                        Rba5Jp4r2YjdrLAzMo\/7BgRQ998IAFPmlpslHodezsMs\/FkoQNaatpp14Gs3nFNd\n+                        lSZrCC9PCckxYrM7DZ9zB6TqqlIQRDf+1m+O4+q71F1nslqBM\/SWRotSuv\/b+tk+\n+                        7xqYGLXkLscieIo9jTUp\/Hd9K6VwgB364B7IgwKDfB+54DVXJ2Re4QRsP5Ffaugt\n+                        rU+2sDVqRlGP\/INBVcO0\/m2vpsyKXM9TxzoISdjUT33PcnVOcOG337RHu070nRpx\n+                        j2Fxu84gCVDgzpJhBrFRo+hx1c5JcxvWZQqbDKly2hxfE21Egg6mODwI87OEzyM4\n+                        54nFE\/YYzFaUpvDO4QRRHh7XxfI6Hr\/YoNuEJFUyQBVtv2IoMbDGQ9HFUbbz96mN\n+                        KbhcLeBaZfphXu4WSVvZBzdnIRW1PpHF2QAozz8ak5U6FT3lO0QITpzP9rc2aTkm\n+                        2u\/rstd6pa1om5LzFoZmnfFtFxXMWPeiz7ct0aUekvglmTp0Aivn6etgVGVEVwlN\n+                        FJKPICFeeyIqxWtRrb7I2L22mDl5p+OiG0S10VGMqX0LUZX1HtaiQ1DIl0fh7epR\n+                        tEjj6RRwVM6SeHPJDbOU2GiI4H3\/F3WT1veeFSMCIErrA74jhq8+JAeL0CixaJ9e\n+                        FHyfRSyM6wLsWcydtjoDV2zur+mCOQI4l9oCNmMKU8Def0NaGYaXkvqzbnueY1dg\n+                        8JBp5kMucAA1rCoCh5\/\/Ch4b7FIgRxk9lOtd8e\/VPuoRRMp4lAhS9eyXJ5BLNm7e\n+                        T14tMx+tX8KC6ixH6SMUJ3HD3XWoc1dIfe+Z5fGOnZ7WI8F10CiIxR+CwHqA1UcW\n+                        s8PCvb4unwqbuq6+tNUpNodkBvXADo5LvQpewFeX5iB8WrbIjxpohCG9BaEU9Nfe\n+                        KsJB+g6L7f9H92Ldy+qpEAT40x6FCVyBBUmUrTgm40S6lgQIEPwLKtHeSM+t4ALG\n+                        LlpJoHMas4NEvBY23xa\/YH1WhV5W1oQAPHGOS62eWgmZefzd7rHEp3ds03o0F8sO\n+                        GE4p75vA6HR1umY74J4Aq1Yut8D3Fl+WmptCQUGYzPG\/8qLI1omkFOznZiknZlaJ\n+                        6U25YeuuxWFcvBp4lcaFGslhQy\/xEY1GB9Mu+dxzLVEzO+S00OMN3qeE7Ki+R+dB\n+                        vpwZYx3EcKUu9NwTpPNjP9Q014fBcJd7QX31mOHQ3eUGu3HW8LwX7HDjsDzcGWXL\n+                        Npk\/YzsEcuUNCSOsbGb98dPmRZzBIfD1+U0J6dvPXWkOIyM4OKC6y3xjjRsmUKQw\n+                        jNFxtoVRJtHaZypu2FqNeMKG+1b0qz0hSXUoBFxjJiyKQq8vmALFO3u4vijnj+C1\n+                        zkX7t6GvGjsoqNlLeJDjyILjm8mOnwrXYCW\/DdLwApjnFBoiaz187kFPYE0eC6VN\n+                        EdX+WLzOpq13rS6MHKrPMkWQFLe5EAGx76itFypSP7jjZbV3Ehv5\/Yiixgwh6CHX\n+                        tqy0elqZXkDKztXCI7j+beXhjp0uWJOu\/rt6rn\/xoUYmDi8RDpOVKCE6ACWjjsea\n+                        q8hhsl68UJpGdMEyqqy34BRvFO\/RHPyvTKpPd1pxbOMl4KQ1pNNJ1yC88TdFCvxF\n+                        BG\/Bofg6nTKXd6cITkqtrnEizpcAWTBSjrPH9\/ESmzcoh6NxFVo7ogGiXL8dy2Tn\n+                        ze4JLDFB+1VQ\/j0N2C6HDleLK0ZQCBgRO49laXc8Z3OFtppCt33Lp6z\/2V\/URS4j\n+                        qqHTfh2iFR6mWNQKNZayesn4Ep3GzwZDdyYktZ9PRhIw30ccomCHw5QtXGaH32CC\n+                        g1k1o\/h8t2Kww7HQ3aSmUzllvvG3uCkuJUwBTQkP7YV8RMGDnGlMCmTj+tkKEfU0\n+                        citu4VdPLhSdVddE3kiHAk4IURQxwGJ1DhbHSrnzJC8ts\/+xKo1hB\/qiKdb2NzsH\n+                        8205MrO9sEwZ3WTq3X+Tw8Vkw1ihyB3PHJwx5bBlaPl1RMF9wVaYxcs4mDqa\/EJ4\n+                        P6p3OlLJ2CYGkL6eMVaqW8FQneo\/aVh2lc1v8XK6g+am2KfWu+u7zaNnJzGYP4m8\n+                        WDHcN8PzxcVvrMaX88sgvV2629cC5UhErC9iaQH+FZ25Pf1Hc9j+c1YrhGwfyFbR\n+                        gCdihA68cteYi951y8pw0xnTLODMAlO7KtRVcj7gx\/RzbObmZlxayjKkgcU4Obwl\n+                        kWewE9BCM5Xuuaqu4yBhSafVUNZ\/xf3+SopcNdJRC2ZDeauPcoVaKvR6vOKmMgSO\n+                        r4nly0qI3rxTpZUQOszk8c\/xis\/wev4etXFqoeQLYxNMOjrpV5+of1Fb4JPC0p22\n+                        1rZck2YeAGNrWScE0JPMZxbCNC6xhT1IyFxjrIooVEYse3fn470erFvKKP+qALXT\n+                        SfilR62HW5aowrKRDJMBMJo\/kTilaTER9Vs8AJypR8Od\/ILZjrHKpKnL6IX3hvqG\n+                        5VvgYiIvi6kKl0BzMmsxISrs4KNKYA==\n+                        \"\"\"), kp.getPublic().getEncoded());\n+\n+        CertificateFactory.getInstance(\"X.509\").generateCertificate(\n+                new ByteArrayInputStream(\"\"\"\n+                        -----BEGIN CERTIFICATE-----\n+                        MIIPlDCCBgqgAwIBAgIUFZ\/+byL9XMQsUk32\/V4o0N44804wCwYJYIZIAWUDBAMR\n+                        MCIxDTALBgNVBAoTBElFVEYxETAPBgNVBAMTCExBTVBTIFdHMB4XDTIwMDIwMzA0\n+                        MzIxMFoXDTQwMDEyOTA0MzIxMFowIjENMAsGA1UEChMESUVURjERMA8GA1UEAxMI\n+                        TEFNUFMgV0cwggUyMAsGCWCGSAFlAwQDEQOCBSEA17K0clSq4NtF55MNSpjSyX2P\n+                        E5fReJ2voXAksxbpvslPyZRtQvGbeadBO7qjPnFJy0LtURVpOsBB+suYit61\/g4d\n+                        hjEYSZW1ksOX0ilOLhT5CqQUujgmiZrEP0zMrLwm6agyuVEY1ctDPL75ZgsAE44I\n+                        F\/YediyidMNq1VTrIqrBFi5KsBrLoeOMTv2PgLZbMz0PcuVd\/nHOnB67mInnxWEG\n+                        wP1zgDoq7P6v3teqPLLO2lTRK9jNNqeM+XWUO0er0l6ICsRS5XQu0ejRqCr6huWQ\n+                        x1jBWuTShA2SvKGlCQ9ASWWX\/KfYuVE\/GhvabpUKqpjeRnUH1KT1pPBZkhZYLDVy\n+                        9i7aiQWrNYFnDEoCd3oz4Mpylf2PT\/bRoKOnaD1l9fX3\/GDaAj6CbF+SFEwC99G6\n+                        EHWYdVPqk2f8122ZC3+pnNRa\/biDbUPkWfUYffBYR5cJoB6mg1k1+nBGCZDNPcG6\n+                        QBupS6sd3kGsZ6szGdysoGBI1MTu8n7hOpwX0FOPQw8tZC3CQVZg3niHfY2KvHJS\n+                        OXjAQuQoX0MZhGxEEmJCl2hEwQ5Va6IVtacZ5Z0MayqW05hZBx\/cws3nUkp77a5U\n+                        6FsxjoVOj+Ky8+36yXGRKCcKr9HlBEw6T9r9n\/MfkHhLjo5FlhRKDa9YZRHT2ZYr\n+                        nqla8Ze05fxg8rHtFd46W+9fib3HnZEFHZsoFudPpUUx79wcvnTUSIV\/R2vNWPIc\n+                        C2U7O3ak4HamVZowJxhVXMY\/dIWaq6uSXwI4YcqM0Pe62yhx9n1VMm10URNa1F9K\n+                        G6aRGPuyyKMO7JOS7z+XcGbJrdXHEMxkexUU0hfZWMcBfD6Q\/SDATmdLkEhuk3Cj\n+                        GgAdMvRzl55JBnSefkd\/oLdFCPil8jeDErg8Jb04jKCw\/\/dHi69CtxZn7arJfEax\n+                        KWQ+WG5bBVoMIRlG1PNuZ1vtWGD6BCoxXZgmFk1qkjfDWl+\/SVSQpb1N8ki5XEqu\n+                        d4S2BWcxZqxCRbW0sIKgnpMj5i8geMW3Z4NEbe\/XNq06NwLUmwiYRJAKYYMzl7xE\n+                        GbMNepegs4fBkRR0xNQbU+Mql3rLbw6nXbZbs55Z5wHnaVfe9vLURVnDGncSK1IE\n+                        47XCGfFoixTtC8C4AbPm6C3NQ+nA6fQXRM2YFb0byIINi7Ej8E+s0bG2hd1aKxuN\n+                        u\/PtkzZw8JWhgLTxktCLELj6u9\/MKyRRjjLuoKXgyQTKhEeACD87DNLQuLavZ7w1\n+                        W5SUAl3HsKePqA46Lb\/rUTKIUdYHgZjpSTZRrnh+wCUfkiujDp9R32Km1yeEzz3S\n+                        BTkxdt+jJKUSvZSXCjbdNKUUqGeR8Os28BRbCatkZRtKAxOymWEaKhxIiRYnWYdo\n+                        oxFAYLpEQ0ht9RUioc6IswmFwhb45u0XjdVnswSg1Mr7qIKig0LxepqiauWNtjAI\n+                        PSw1j99WbD9dYqQoVnvJ6ozpXKoPNUdLC\/qPM5olCrTfzyCDvo7vvBBV4Y\/hU3Du\n+                        yyYFZtg\/8GshGq7EPKKbVMzQD4gVokZe8LRlFcx+QfMSTwnv\/3OTCatYspoUWaAL\n+                        zlA46TjJZ49y6w5O5f2q5m2fhXP8l\/xCtJWfS\/i2HXhDPoawM11ukZHE2L9IezkF\n+                        wQjP1qwksM633LfPUfhNDtaHuV6uscUzwG8NlwI9kqcIJYN7Wbpst9TlawqHwgOG\n+                        KujzFbpZJejt76Z5NpoiAnZhUfFqll+fgeznbMBwtVhp5NuXhM8FyDCzJCyDEqNC\n+                        MEAwDgYDVR0PAQH\/BAQDAgEGMA8GA1UdEwEB\/wQFMAMBAf8wHQYDVR0OBBYEFDKa\n+                        B7H6u0j1KjCfEaGJj4SOIyL\/MAsGCWCGSAFlAwQDEQOCCXUA\/LEt78ExnP4sas0M\n+                        wv\/5uOJwUaNNpxfdLJ4BvQt2ocbrYG\/4Z4K75x7KbP9w2lzUnkTeihk1hrPTK+ok\n+                        QfG\/KnOADj+SKVyGRvQecSunv+Ze77Um\/UJRY+IrMsbwKhtG9hoX+sPEbQZwF4YP\n+                        Kgb6HBontM0zMs7eGWWgca0WBRgZyK2LwfZhRO3lR5xxutrN\/nF9wKta2mRg1J8j\n+                        GuwZ7H6E3lol0NJD2TFc5CcO2EA7NV+hVb4\/8W9ILm71WIwiLApn0YKI7RjG81Io\n+                        zPr3TjgKTvRTkxdjrVjKmelj8R47u\/UMe1Ga7uiSQoIudYQziXPpexmvBKSUywF7\n+                        yU+0cMVTIuqN6iTIbeTx0rzWMwMo4BTF33iroteo+\/fhE0x0vkIPynPqW0IXluD4\n+                        awiwZkZNyML+8GuHCPzcSGkKG63YB\/jmiPWQppUs4PKWbjX+Wsr2pbvsUT0h2b2x\n+                        LB0K\/7jLqEcWzDZvEYCshKNiQ6hhXhFyxDquGmLzrYtN5zdJqZSRU2hxfYutem6i\n+                        WvPL\/cisDHzIY3ATkdABLwLq2FUMw6OGbLx2NllYRRV1vkgvHIpOb6PiUtk1yh7P\n+                        yAYDSE1UxjLFeYmjlCABYWElShY0kNzM2ktlkJszcJSY7e4RPlnldSeSGJ6VTTWy\n+                        y6XEp1f\/0xqYDnJ7HdBAkNE2t+V4+iNMPhap3+MDtSNt+NPNLrH27j+7SdcCtTKL\n+                        KZdk8VcTB\/IIj1eJnNwtLmf4w3Fs5tvOYxbwpEpSgOFhahYD17++K6d7u7mykFd5\n+                        gZN7ydA4YRB\/fFOJS8msLjm5ta8TYWDuU1t9RLFBd7S6qNSOg\/GDNJ5CyyUAv\/fD\n+                        2+gtfiuVWtV7IoUNymNNK8Wrht2f5LlvWrGJQAhKm\/JcUjwwAdENoZgFtUCVHW9W\n+                        UuWt3li4Ta69qXKVn1EdzNuPAdq5AbZyQmEl5GHyT+uv5VV9edGK6G5dASwATca0\n+                        NOWL\/kNWb6T4xkpvBgj5yI2+SvmfHZyiUo+s8hj3Ikt+U+m6zLKp4xB1x37CFdPy\n+                        J\/7+yOcmelsZfNjr9Dps0Nxnijvu+fvhI0KkoVvzHG9yR6h7YXWn\/VOezt8XL4vE\n+                        BcQcuCCj+Bz55rclX1gCGJED6ZhiQO5xvHDgptMzbbYkmuK6PZJzCMzWtFcYrrOi\n+                        jNHLBhtxnjgG71PygYGmoKRVG0fLS4MAcXLAl906fRDl9seI92Y3\/JgCI5VgL\/A3\n+                        3hcFv\/fbYo2wBycYPYmpvZqCI4594sas92nZwyKlqlcIeYVhlu1gbX9HKUZQkH8x\n+                        8J6h7l208b3cA59RcB7BYHlOriftCzyvq1JPcORSEvsk3vHX7iZA8DmKU73rpGQ8\n+                        iAS+4bbEmCAfKEkKss2ub5uFkfip+x3C34\/btT\/msKOr\/t0sTTwtSI4hpmln5OJJ\n+                        P0kwDwd93vJO9jUiztF8f6a8etCg\/NqA9sdRz+7BGPviwAZwDOa+jZ0VvsoJkSax\n+                        ir5Z81E6rR949ZzKery208QzJD8emoXHwkWngyrZzqPguYvPB1fNDNLjdkZl3AnR\n+                        DL\/0ahygOIRrEyrEdHLDPPSzoZYg7s7iW40E1Fs61\/EMNeGDxWWmcXwSeRsJv1ut\n+                        pKxkjnofHFkc9i9RJhhYx5JPBn9JNBUG9obrwLnFTF+DUdEJwRbyMwLEWHzZobU8\n+                        pvYXusxLgcd+0gn0s+siQNJAAlRniKsi0YutSR27k8nQyL0s8Jgl7bybSh\/KbNKG\n+                        T\/643zfGrBMfOtGo5z28CsXszpDlxhEipYS8iaoidwnjURrndCQgR7ukcYv105ul\n+                        K1v8V3S5msyWb4UTndzK5yK6owqRfstmUA6S6HczJ+qkowDpb2t3nMGqQ5+BTzww\n+                        pozM\/bnTVSmLFMGNic+7NltWzRySbxGzc3dxSHHfly4kSocmr53vEewK2DpixrM3\n+                        LJMYZYivUREMaHd4BCoUzjbK9aFs3EXcm6\/Q8tbFzd4k9qDahopVccqiTmaJ4HGb\n+                        szeTqpm5iGJK9okvLy5w4j83oNhHPd\/J6vw8ZqtfYYbME4GYXVtFRb07GpnPQa6E\n+                        aErkAgtVTKptOQyJaO09YaLEbHnAgYFhZ1wQeN0Negn1YqkBC4FBe1yBMdMOre7l\n+                        xV0FhkpMaO2wU0gPl9IrCe9m8aLRT4zcihIdJLVARPsudeLv6Oim3ao259gcum0y\n+                        P1KD1dxwUC\/j6zAtz2Qjt2Q11dLfxqKPA67Go2Dng+\/uaUvbZI0lsPrx2kX0ADsT\n+                        Nf5KoipXLssLwyooz3Ga0dcwjpTv0NE43wT8wx\/OKuAC3cHAS\/s+7Pk+xkypbFXI\n+                        ba8Z6Au7Dq4r03k0fPpgL3KHqpDBWNuxujH9+RN7oGGAjppcGfq4I5tf7i5mNjZQ\n+                        W+SBG7pgsVWibDidCbf7CfWwY6oWi718wtShOYFALIzsYAqeXqdi7raMQGl1T43A\n+                        WiyjbXxh0adG3sqmwVhjtvesFSwZ9v0fMG0CMDQBl3fP6FXmMMaV1O0GWb16zxVK\n+                        4QtIFRQfQGkhXWNAvBPm4F2xb6F2uJUWHnOs9g8Wuhfk3pBtjtfFWJwkaOAOsvp2\n+                        d\/1UtsYop10zwW1EMyYxiUZ16TwvSb3Om4q0mGxHQEY1VkCMouBY680bWxMfw6C4\n+                        rRv98itFqOAHP1Mc1tKCCtUOI\/a1MDQrnI0oLjsxxTnOX2uUzrx2DnuWhPEx3\/w1\n+                        +BxKXZFcDHamuWl6nbPWwrOxbNorC6arGMQSy6h40f6dfixlsCpEh+lBjucRG74S\n+                        TJl8sM82z6akqE8JDOf3yU\/sItuzOLfvNXICbkoMG0EBxMPa6TaxPNtco4UiKOuY\n+                        nkzyIOnH5LGNOQNQCExkxHFRyoZr8TMBEoIcICnZruw1r8gYtB+kFgivIsqKptXC\n+                        tAMhQF\/vdss4YqwYcCV5bDVs90+IMlSalrfuecV0pdwUzvXn6QHVm+4SkKlMEwuY\n+                        wyQiiwPav40S9rIO5tE5gR\/BBndPfo02pGvxXR9\/vZjhRVRkJr3ZaC+lVHSqtsjc\n+                        bVfTh\/nK6lkLYJ\/AwcAK\/3d4SKSIjHmTucj2KIDws4i3QSQ1qh1AABpugNV4zJgm\n+                        J88qqA7oLmNFkyILQW0g0COb500DDBcjPkZkb3p7i5yjrbzEx\/L4BQkKGhstdnmO\n+                        nsLY8P4FBxAZKTJFRlSGipeipr3HGicsMTpNZ3eKqbK4wsTR3fAAAAAAAAAAAAAA\n+                        AAAAABMhMUI=\n+                        -----END CERTIFICATE-----\"\"\".getBytes(StandardCharsets.UTF_8)));\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/pqc\/Encodings.java","additions":728,"deletions":0,"binary":false,"changes":728,"status":"added"},{"patch":"@@ -0,0 +1,122 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8347938 8347941\n+ * @library \/test\/lib\n+ * @modules java.base\/com.sun.crypto.provider\n+ *          java.base\/sun.security.provider\n+ *          java.base\/sun.security.util\n+ * @summary check key reading compatibility\n+ * @run main\/othervm SeedOrExpanded\n+ *\/\n+\n+import com.sun.crypto.provider.ML_KEM_Impls;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.security.FixedSecureRandom;\n+import jdk.test.lib.security.SeededSecureRandom;\n+import sun.security.provider.ML_DSA_Impls;\n+import sun.security.util.DerOutputStream;\n+import sun.security.util.DerValue;\n+import sun.security.util.KnownOIDs;\n+import sun.security.util.ObjectIdentifier;\n+\n+import javax.crypto.KEM;\n+import java.security.KeyFactory;\n+import java.security.KeyPairGenerator;\n+import java.security.Signature;\n+import java.security.spec.PKCS8EncodedKeySpec;\n+import java.util.Arrays;\n+\n+public class SeedOrExpanded {\n+\n+    static final SeededSecureRandom RAND = SeededSecureRandom.one();\n+\n+    public static void main(String[] args) throws Exception {\n+        test(\"ML-KEM-768\");\n+        test(\"ML-DSA-65\");\n+    }\n+\n+    static void test(String alg) throws Exception {\n+\n+        var seed = RAND.nBytes(alg.contains(\"ML-KEM\") ? 64 : 32);\n+        var g = KeyPairGenerator.getInstance(alg);\n+\n+        \/\/ Generation\n+\n+        g.initialize(-1, new FixedSecureRandom(seed));\n+        var kp = g.generateKeyPair();\n+        var kseed = kp.getPrivate().getEncoded();\n+\n+        var ex = alg.contains(\"ML-KEM\")\n+                ? ML_KEM_Impls.seedToExpandedPrivate(alg, seed)\n+                : ML_DSA_Impls.seedToExpandedPrivate(alg, seed);\n+        var kexpanded = new DerOutputStream().write(DerValue.tag_Sequence,\n+                new DerOutputStream().putInteger(0)\n+                        .write(DerValue.tag_Sequence, new DerOutputStream()\n+                                .putOID(ObjectIdentifier.of(KnownOIDs.findMatch(alg))))\n+                        .putOctetString(ex)).toByteArray();\n+\n+        \/\/ Seed encoding is usually shorter than expanded\n+        Asserts.assertTrue(kseed.length < kexpanded.length);\n+        Asserts.assertEqualsByteArray( \/\/ ... and encoding ends with seed\n+                Arrays.copyOfRange(kseed, kseed.length - seed.length, kseed.length),\n+                seed);\n+\n+        \/\/ Key loading\n+\n+        var f = KeyFactory.getInstance(alg);\n+        var sk1 = f.generatePrivate(new PKCS8EncodedKeySpec(kseed));\n+        var sk2 = f.generatePrivate(new PKCS8EncodedKeySpec(kexpanded));\n+        \/\/ Key factory never tries to reformat keys\n+        Asserts.assertEqualsByteArray(sk1.getEncoded(), kseed);\n+        Asserts.assertEqualsByteArray(sk2.getEncoded(), kexpanded);\n+\n+        \/\/ Key using\n+\n+        if (alg.contains(\"ML-KEM\")) {\n+            var kem = KEM.getInstance(\"ML-KEM\");\n+            var e = kem.newEncapsulator(kp.getPublic(), RAND);\n+            var enc = e.encapsulate();\n+            var k1 = kem.newDecapsulator(sk1).decapsulate(enc.encapsulation());\n+            var k2 = kem.newDecapsulator(sk2).decapsulate(enc.encapsulation());\n+            Asserts.assertEqualsByteArray(k1.getEncoded(), k2.getEncoded());\n+            Asserts.assertEqualsByteArray(k1.getEncoded(), enc.key().getEncoded());\n+        } else {\n+            var s = Signature.getInstance(\"ML-DSA\");\n+            var rnd = RAND.nBytes(32); \/\/ randomness for signature generation\n+            var msg = RAND.nBytes(20);\n+            s.initSign(sk1, new FixedSecureRandom(rnd));\n+            s.update(msg);\n+            var sig1 = s.sign();\n+            s.initSign(sk2, new FixedSecureRandom(rnd));\n+            s.update(msg);\n+            var sig2 = s.sign();\n+            Asserts.assertEqualsByteArray(sig1, sig2);\n+            s.initVerify(kp.getPublic());\n+            s.update(msg);\n+            Asserts.assertTrue(s.verify(sig1));\n+        }\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/provider\/pqc\/SeedOrExpanded.java","additions":122,"deletions":0,"binary":false,"changes":122,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -259,0 +259,9 @@\n+        String patchPath = System.getProperty(\"test.patch.path\");\n+        if (patchPath != null) {\n+            try (var subs = Files.newDirectoryStream(Path.of(patchPath))) {\n+                for (var sub : subs) {\n+                    var name = sub.getFileName();\n+                    cmd.add(\"--patch-module=\" + name + \"=\" + sub);\n+                }\n+            }\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/process\/Proc.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}