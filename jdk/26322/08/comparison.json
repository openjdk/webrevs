{"files":[{"patch":"@@ -334,0 +334,1 @@\n+        copyResource(DocPaths.SORT_A_Z_SVG, DocPaths.RESOURCE_FILES.resolve(DocPaths.SORT_A_Z_SVG), true);\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlDoclet.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -123,0 +123,1 @@\n+    static final HtmlId TOC_ORDER_TOGGLE = HtmlId.of(\"toc-lexical-order-toggle\");\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/HtmlIds.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -115,0 +115,10 @@\n+\n+            header.add(Entity.NO_BREAK_SPACE)\n+                    .add(HtmlTree.BUTTON(HtmlStyles.tocSortToggle)\n+                            .setId(HtmlIds.TOC_ORDER_TOGGLE)\n+                            .add(HtmlTree.IMG(writer.pathToRoot.resolve(DocPaths.RESOURCE_FILES)\n+                                            .resolve(DocPaths.SORT_A_Z_SVG),\n+                                    writer.resources.getText(\"doclet.sort_table_of_contents\")\n+                            ))\n+                    );\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/TableOfContents.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -167,0 +167,10 @@\n+    \/**\n+     * The class used for lexical order toggle in the table of contents.\n+     *\/\n+    tocSortToggle,\n+\n+     \/**\n+     * The class used to indicate the state of the lexical sort toggle.\n+     *\/\n+    tocSortIsActive,\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/markup\/HtmlStyles.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -26,0 +26,8 @@\n+const sortLexicalLabel = \"##REPLACE:doclet.Sort_lexicographically##\";\n+const sortSourceLabel  = \"##REPLACE:doclet.Sort_by_source_order##\";\n+const TOC_ALPHA  = \"alpha\";\n+const TOC_SOURCE = \"source\";\n+var origOlOrder = new Map();\n+var origContainerOrder = new Map();\n+var snapshotted = false;\n+\n@@ -412,0 +420,3 @@\n+\n+    snapshotAllOnce();\n+\n@@ -643,0 +654,162 @@\n+\n+    function allTocNavs() {\n+        return Array.from(document.querySelectorAll(\"nav.toc\"));\n+    }\n+\n+    function nestedTocLists(scope) {\n+        const listsToSort = [];\n+        const sectionLinks = scope.querySelectorAll(\"ol.toc-list > li > a\");\n+\n+        sectionLinks.forEach(function(link) {\n+            const href = link.getAttribute(\"href\");\n+            if (href === \"#constructor-detail\" || href === \"#method-detail\"\n+                || href === \"#field-detail\" || href === \"#annotation-interface-element-detail\"\n+                || href === \"#enum-constant-detail\" || href === \"#property-detail\") {\n+                const memberList = link.nextElementSibling;\n+                if (memberList && memberList.tagName === 'OL') {\n+                    listsToSort.push(memberList);\n+                }\n+            }\n+        });\n+\n+        return listsToSort;\n+    }\n+\n+    function textForLi(li) {\n+        return li.querySelector(\":scope > a\").textContent.trim();\n+    }\n+\n+    function alphaCompare(a, b) {\n+        return textForLi(a).localeCompare(textForLi(b), undefined, {\n+            numeric: true,\n+            sensitivity: \"base\"\n+        });\n+    }\n+\n+    function snapshotTocOnce(nav){\n+        nestedTocLists(nav).forEach(function(ol){\n+            if (!origOlOrder.has(ol)) origOlOrder.set(ol, Array.from(ol.children));\n+        });\n+    }\n+    function restoreToc(nav){\n+        nestedTocLists(nav).forEach(function(ol){\n+            var orig = origOlOrder.get(ol);\n+            if (orig) orig.forEach(function(li){ ol.appendChild(li); });\n+        });\n+    }\n+    function sortTocAlpha(nav){\n+        nestedTocLists(nav).forEach(function(ol){\n+            var lis = Array.from(ol.children);\n+            if (lis.length < 2) return;\n+            lis.slice().sort(alphaCompare).forEach(function(li){ ol.appendChild(li); });\n+        });\n+    }\n+\n+    function snapshotAllOnce() {\n+        if (snapshotted) return;\n+        allTocNavs().forEach(snapshotTocOnce);\n+        snapshotted = true;\n+    }\n+\n+    function restoreAllMemberContainers(){\n+        origContainerOrder.forEach(function(kids, container){\n+            kids.forEach(function(ch){ container.appendChild(ch); });\n+        });\n+    }\n+\n+    function reorderMemberDetailsAlpha() {\n+        var sidebarNav = document.querySelector(\".main-grid nav.toc\");\n+        var mainRoot = document.querySelector(\".main-grid main\");\n+        if (!sidebarNav || !mainRoot) return;\n+\n+        var containers = Array.from(\n+            mainRoot.querySelectorAll(\"ul.member-list\")\n+        );\n+\n+        containers.forEach(function(container) {\n+            var links = Array.from(sidebarNav.querySelectorAll(\"a[href^='#']\")).filter(function(a) {\n+                var id = a.getAttribute(\"href\").slice(1);\n+                if (!id) return false;\n+                var target = document.getElementById(decodeURI(id));\n+                return target && container.contains(target);\n+            });\n+            if (links.length < 2) return;\n+\n+            var items = links.map(function(a) {\n+                var id = a.getAttribute(\"href\").slice(1);\n+                var target = document.getElementById(decodeURI(id));\n+                if (!target) return null;\n+                var block = target.closest(\"section.detail, div.detail\") || target;\n+                var li = block.closest(\"li\");\n+                if (li.parentElement !== container) return null;\n+                return {\n+                    node: li,\n+                    text: (a.textContent || \"\").trim()\n+                };\n+            }).filter(Boolean);\n+\n+            if (items.length < 2) return;\n+\n+            if (!origContainerOrder.has(container)) {\n+                origContainerOrder.set(container, Array.from(container.children));\n+            }\n+\n+            items.slice()\n+                .sort(function(x, y) {\n+                    return x.text.localeCompare(y.text, undefined, {\n+                        numeric: true,\n+                        sensitivity: \"base\"\n+                    });\n+                })\n+                .forEach(function(it) {\n+                    container.appendChild(it.node);\n+                });\n+        });\n+    }\n+\n+    function updateToggleButtons(order){\n+        const next = (order === TOC_ALPHA) ? sortSourceLabel : sortLexicalLabel;\n+        document.querySelectorAll(\".toc-sort-toggle\").forEach(function(btn){\n+            btn.setAttribute(\"aria-label\", next);\n+            btn.setAttribute(\"title\", next);\n+            btn.setAttribute(\"aria-pressed\", order === TOC_ALPHA);\n+\n+            if (order === TOC_ALPHA) {\n+                btn.classList.add(\"toc-sort-is-active\");\n+            } else {\n+                btn.classList.remove(\"toc-sort-is-active\");\n+            }\n+\n+            var img = btn.querySelector(\"img\");\n+            if (img) img.alt = next;\n+        });\n+    }\n+\n+    var tocOrder = TOC_SOURCE;\n+    updateToggleButtons(tocOrder);\n+\n+    function applyAlpha(){\n+        snapshotAllOnce();\n+        reorderMemberDetailsAlpha();\n+        allTocNavs().forEach(sortTocAlpha);\n+        initSectionData(); handleScroll();\n+        updateToggleButtons(TOC_ALPHA);\n+        tocOrder = TOC_ALPHA;\n+    }\n+\n+    function applySource(){\n+        snapshotAllOnce();\n+        restoreAllMemberContainers();\n+        allTocNavs().forEach(restoreToc);\n+        initSectionData(); handleScroll();\n+        updateToggleButtons(TOC_SOURCE);\n+        tocOrder = TOC_SOURCE;\n+    }\n+\n+    document.querySelectorAll(\".toc-sort-toggle\").forEach(function(btn) {\n+      btn.addEventListener(\"click\", function() {\n+          if (tocOrder === TOC_SOURCE) applyAlpha(); else applySource();\n+          if (typeof btn.blur === \"function\") btn.blur();\n+      });\n+    });\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/script.js.template","additions":173,"deletions":0,"binary":false,"changes":173,"status":"modified"},{"patch":"@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+ Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+\n+ Licensed under the Universal Permissive License v 1.0 as shown at https:\/\/oss.oracle.com\/licenses\/upl\/\n+-->\n+\n+<svg xmlns=\"http:\/\/www.w3.org\/2000\/svg\" viewBox=\"0 0 32 32\">\n+<line fill=\"none\" stroke=\"#505050\" stroke-width=\"2\" stroke-miterlimit=\"10\" x1=\"23\" y1=\"26.1\" x2=\"23\" y2=\"5\"\/>\n+    <polyline fill=\"none\" stroke=\"#505050\" stroke-width=\"2\" stroke-miterlimit=\"10\" points=\"18.7,21.8 23,26.1 27.3,21.8 \"\/>\n+    <polyline fill=\"none\" stroke=\"#505050\" stroke-width=\"2\" stroke-miterlimit=\"10\" points=\"12,15 12,14 9.1,6 8.9,6 6,14 6,15 \"\/>\n+    <line fill=\"none\" stroke=\"#505050\" stroke-width=\"2\" stroke-miterlimit=\"10\" x1=\"6\" y1=\"12\" x2=\"12\" y2=\"12\"\/>\n+    <polyline fill=\"none\" stroke=\"#505050\" stroke-width=\"2\" stroke-miterlimit=\"10\" points=\"5,18 12,18 12,19 6,25 6,26 13,26 \"\/>\n+<\/svg>\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/sort-a-z.svg","additions":16,"deletions":0,"binary":false,"changes":16,"status":"added"},{"patch":"@@ -696,1 +696,0 @@\n-    border: none;\n@@ -700,0 +699,1 @@\n+    border: 1px solid transparent;\n@@ -1904,0 +1904,5 @@\n+    .top-nav nav.toc .toc-sort-toggle {\n+        background: transparent;\n+        border: 0;\n+        margin-left: 4px;\n+    }\n@@ -1960,0 +1965,27 @@\n+\n+nav.toc div.toc-header input.filter-input {\n+    flex: 1 1 auto;\n+    min-width: 0;\n+}\n+\n+nav.toc div.toc-header .toc-sort-toggle {\n+    flex: 0 0 auto;\n+    position: static;\n+    display: inline-flex;\n+    align-items: center;\n+    padding: .5em;\n+    cursor: pointer;\n+}\n+\n+nav.toc div.toc-header .toc-sort-toggle > img {\n+    width: 22px;\n+    height: 22px;\n+    vertical-align: middle;\n+    filter: var(--icon-filter);\n+}\n+\n+nav.toc div.toc-header .toc-sort-toggle.toc-sort-is-active {\n+    background-color: var(--toc-highlight-color);\n+    border-radius: 4px;\n+}\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/stylesheet.css","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -254,0 +254,2 @@\n+doclet.Sort_lexicographically=Sort member details lexicographically\n+doclet.Sort_by_source_order=Sort member details by source order\n@@ -259,0 +261,1 @@\n+doclet.sort_table_of_contents=Sort member details in lexicographical order\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/resources\/doclets.properties","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -118,0 +118,3 @@\n+    \/** The name of the table of contents toggle icon file. *\/\n+    public static final DocPath SORT_A_Z_SVG = DocPath.create(\"sort-a-z.svg\");\n+\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/toolkit\/util\/DocPaths.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -218,0 +218,1 @@\n+            \"resource-files\/sort-a-z.svg\",\n@@ -268,1 +269,0 @@\n-\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/api\/basic\/APITest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}