{"files":[{"patch":"@@ -129,1 +129,1 @@\n-void FieldLayout::initialize_instance_layout(const InstanceKlass* super_klass) {\n+void FieldLayout::initialize_instance_layout(const InstanceKlass* super_klass, bool& super_ends_with_oop) {\n@@ -131,0 +131,1 @@\n+    super_ends_with_oop = false;\n@@ -137,1 +138,2 @@\n-    bool has_fields = reconstruct_layout(super_klass);\n+    bool super_has_instance_fields = false;\n+    reconstruct_layout(super_klass, super_has_instance_fields, super_ends_with_oop);\n@@ -139,1 +141,1 @@\n-    if (!super_klass->has_contended_annotations() || !has_fields) {\n+    if (!super_klass->has_contended_annotations() || !super_has_instance_fields) {\n@@ -296,2 +298,2 @@\n-bool FieldLayout::reconstruct_layout(const InstanceKlass* ik) {\n-  bool has_instance_fields = false;\n+void FieldLayout::reconstruct_layout(const InstanceKlass* ik, bool& has_instance_fields, bool& ends_with_oop) {\n+  has_instance_fields = ends_with_oop = false;\n@@ -299,0 +301,2 @@\n+  BasicType last_type;\n+  int last_offset = -1;\n@@ -305,0 +309,4 @@\n+      if (fs.offset() > last_offset) {\n+        last_offset = fs.offset();\n+        last_type = type;\n+      }\n@@ -313,0 +321,5 @@\n+  assert(last_offset == -1 || last_offset > 0, \"Sanity\");\n+  if (last_offset > 0 &&\n+      (last_type == BasicType::T_ARRAY || last_type == BasicType::T_OBJECT)) {\n+    ends_with_oop = true;\n+  }\n@@ -326,1 +339,0 @@\n-  return has_instance_fields;\n@@ -519,1 +531,1 @@\n-  _layout->initialize_instance_layout(super_klass);\n+  _layout->initialize_instance_layout(super_klass, _super_ends_with_oop);\n@@ -594,31 +606,0 @@\n-\/\/ Helper function for compute_regular_layout()\n-static bool class_ends_with_oop(const InstanceKlass* ik) {\n-\n-  if (ik == nullptr ||\n-      ik->nonstatic_oop_map_count() == 0) {\n-    return false;\n-  }\n-\n-  fieldDescriptor fd;\n-  int offset = -1;\n-\n-  \/\/ Find last nonstatic field\n-  for (AllFieldStream fs(ik); !fs.done(); fs.next()) {\n-    if (!fs.access_flags().is_static()) {\n-      if (offset < fs.offset()) {\n-        offset = fs.offset();\n-        fd = fs.field_descriptor();\n-      }\n-    }\n-  }\n-\n-  assert(offset == -1 || offset > 0, \"Sanity\");\n-\n-  if (offset > 0) {\n-    const BasicType type = fd.field_type();\n-    return type == T_OBJECT || type == T_NARROWOOP; \/\/ super\n-  }\n-\n-  return false;\n-}\n-\n@@ -649,1 +630,1 @@\n-  if (class_ends_with_oop(_super_klass)) {\n+  if (_super_ends_with_oop) {\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.cpp","additions":20,"deletions":39,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -172,1 +172,1 @@\n-  void initialize_instance_layout(const InstanceKlass* ik);\n+  void initialize_instance_layout(const InstanceKlass* ik, bool& super_ends_with_oop);\n@@ -191,1 +191,1 @@\n-  bool reconstruct_layout(const InstanceKlass* ik);\n+  void reconstruct_layout(const InstanceKlass* ik, bool& has_instance_fields, bool& ends_with_oop);\n@@ -240,0 +240,1 @@\n+  bool _super_ends_with_oop;\n","filename":"src\/hotspot\/share\/classfile\/fieldLayoutBuilder.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -0,0 +1,262 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.internal.misc.Unsafe;\n+import jdk.test.whitebox.WhiteBox;\n+\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+\/*\n+ * @test id=no_coops_no_ccptr_no_coh\n+ * @library \/test\/lib \/\n+ * @requires vm.bits == \"64\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:-UseCompressedOops -XX:-UseCompressedClassPointers -XX:-UseCompactObjectHeaders TestOopMapSizeMinimal\n+ *\/\n+\n+\/*\n+ * @test id=coops_no_ccptr_no_coh\n+ * @library \/test\/lib \/\n+ * @requires vm.bits == \"64\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:+UseCompressedOops -XX:-UseCompressedClassPointers -XX:-UseCompactObjectHeaders TestOopMapSizeMinimal\n+ *\/\n+\n+\/*\n+ * @test id=no_coops_ccptr_no_coh\n+ * @library \/test\/lib \/\n+ * @requires vm.bits == \"64\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:-UseCompressedOops -XX:+UseCompressedClassPointers -XX:-UseCompactObjectHeaders TestOopMapSizeMinimal\n+ *\/\n+\n+\/*\n+ * @test id=coops_ccptr_no_coh\n+ * @library \/test\/lib \/\n+ * @requires vm.bits == \"64\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:+UseCompressedOops -XX:+UseCompressedClassPointers -XX:-UseCompactObjectHeaders TestOopMapSizeMinimal\n+ *\/\n+\n+\/*\n+ * @test id=no_coops_ccptr_coh\n+ * @library \/test\/lib \/\n+ * @requires vm.bits == \"64\"\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI -XX:+UnlockExperimentalVMOptions -XX:-UseCompressedOops -XX:+UseCompactObjectHeaders TestOopMapSizeMinimal\n+ *\/\n+\n+public class TestOopMapSizeMinimal {\n+\n+    public static int OOP_SIZE_IN_BYTES = -1;\n+    public static int HEADER_SIZE_IN_BYTES = -1;\n+\n+    static {\n+        WhiteBox WB = WhiteBox.getWhiteBox();\n+        boolean is_64_bit = System.getProperty(\"sun.arch.data.model\").equals(\"64\");\n+        if (is_64_bit) {\n+            if (System.getProperty(\"java.vm.compressedOopsMode\") == null) {\n+                OOP_SIZE_IN_BYTES = 8;\n+            } else {\n+                OOP_SIZE_IN_BYTES = 4;\n+            }\n+        } else {\n+            OOP_SIZE_IN_BYTES = 4;\n+        }\n+        if (is_64_bit) {\n+            if (WB.getBooleanVMFlag(\"UseCompactObjectHeaders\")) {\n+                HEADER_SIZE_IN_BYTES = 8;\n+            } else if (WB.getBooleanVMFlag(\"UseCompressedClassPointers\")) {\n+                HEADER_SIZE_IN_BYTES = 12;\n+            } else {\n+                HEADER_SIZE_IN_BYTES = 16;\n+            }\n+        } else {\n+            HEADER_SIZE_IN_BYTES = 8;\n+        }\n+    }\n+\n+    public static long alignUp(long value, long alignment) {\n+        return (value + alignment - 1) & ~(alignment - 1);\n+    }\n+\n+    public static long alignForOop(long position) {\n+        return alignUp(position, OOP_SIZE_IN_BYTES);\n+    }\n+\n+    private static final Unsafe U = Unsafe.getUnsafe();\n+\n+    public static class BASE {\n+        int i1;\n+        Object o1;\n+    }\n+\n+    public static class DERIVED1 extends BASE {\n+        int i2;\n+        Object o2;\n+    }\n+\n+    public static class DERIVED2 extends DERIVED1 {\n+        int i3;\n+        Object o3;\n+    }\n+\n+    public static class DERIVED3 extends DERIVED2 {\n+        int i4;\n+        Object o4;\n+    }\n+\n+    static boolean mismatch = false;\n+\n+    private static void checkOffset(Field f, long expectedOffset) {\n+        long realOffset = U.objectFieldOffset(f);\n+        System.out.println(\"Offset for field \" + f.getName() +\n+                \": expected \" + expectedOffset + \", got \" + realOffset + \".\");\n+        if (U.objectFieldOffset(f) != expectedOffset) {\n+            mismatch = true;\n+            System.out.println(\" ... mimatch\");\n+        }\n+    }\n+\n+    private static List<Field> allFieldsOf(Class c) {\n+        ArrayList<Field> l = new ArrayList<>();\n+        while (c != null) {\n+            for (Field f : c.getDeclaredFields()) {\n+                l.add(f);\n+            }\n+            c = c.getSuperclass();\n+        }\n+        return l;\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        System.out.println(\"HEADER_SIZE_IN_BYTES \" + HEADER_SIZE_IN_BYTES + \", OOP_SIZE_IN_BYTES \" + OOP_SIZE_IN_BYTES);\n+\n+        long i1_loc_expected;\n+        long o1_loc_expected;\n+        long o2_loc_expected;\n+        long i2_loc_expected;\n+        long i3_loc_expected;\n+        long o3_loc_expected;\n+        long o4_loc_expected;\n+        long i4_loc_expected;\n+\n+        \/\/ We expect the layouter to reverse order of oop- and non-oop fields\n+        \/\/ when it is useful to minimize the number of oop map entries.\n+        \/\/\n+        \/\/ If we have no gaps, this should be the layout:\n+        \/\/ BASE      i1\n+        \/\/           o1  oopmap entry 1\n+        \/\/ DERIVED1  o2  oopmap entry 1  (reversed order)\n+        \/\/           i2\n+        \/\/ DERIVED3  i3\n+        \/\/           o3  oopmap entry 2\n+        \/\/ DERIVED4  o4  oopmap entry 2  (reversed order)\n+        \/\/           i4\n+\n+        \/\/ There are two combinations that have gaps:\n+        \/\/ -UseCompressedOops + +COH, and -UseCompressedOops + -UseCompressedClassPointers.\n+        \/\/ In both cases there is a gap following i1, and i2 will therefore nestle into that gap.\n+        \/\/ Otherwise the same logic applies.\n+\n+        if (OOP_SIZE_IN_BYTES == 4 ||                               \/\/ oop size == int size\n+            (OOP_SIZE_IN_BYTES == 8 && HEADER_SIZE_IN_BYTES == 12)\n+        ) {\n+            \/\/ No gaps\n+\n+            \/\/ Expected layout for BASE: int, object\n+            i1_loc_expected = HEADER_SIZE_IN_BYTES;\n+            o1_loc_expected = i1_loc_expected + 4;\n+\n+            \/\/ Expected layout for DERIVED1: object, int (to make o2 border o1)\n+            o2_loc_expected = o1_loc_expected + OOP_SIZE_IN_BYTES;\n+            i2_loc_expected = o2_loc_expected + OOP_SIZE_IN_BYTES;\n+\n+            \/\/ Expected layout for DERIVED2: int, object (to trail with oops, for derived classes to nestle against)\n+            i3_loc_expected = i2_loc_expected + 4;\n+            o3_loc_expected = i3_loc_expected + 4;\n+\n+            \/\/ Expected layout for DERIVED3: object, int (to make o4 border o3)\n+            o4_loc_expected = o3_loc_expected + OOP_SIZE_IN_BYTES;\n+            i4_loc_expected = o4_loc_expected + OOP_SIZE_IN_BYTES;\n+\n+        } else if (OOP_SIZE_IN_BYTES == 8) {\n+\n+            \/\/ gap after i1\n+\n+            i1_loc_expected = HEADER_SIZE_IN_BYTES;\n+            o1_loc_expected = i1_loc_expected + 4 + 4; \/\/ + alignment gap\n+\n+            o2_loc_expected = o1_loc_expected + OOP_SIZE_IN_BYTES;\n+            i2_loc_expected = i1_loc_expected + 4; \/\/ into gap following i1\n+\n+            o3_loc_expected = o2_loc_expected + OOP_SIZE_IN_BYTES;\n+            i3_loc_expected = o3_loc_expected + OOP_SIZE_IN_BYTES;\n+\n+            i4_loc_expected = i3_loc_expected + 4;\n+            o4_loc_expected = i4_loc_expected + 4;\n+        } else {\n+            throw new RuntimeException(\"Unexpected\");\n+        }\n+\n+        List<Field> l = allFieldsOf(DERIVED3.class);\n+        for (Field f : l) {\n+            switch (f.getName()) {\n+                case \"i1\" : checkOffset(f, i1_loc_expected); break;\n+                case \"o1\" : checkOffset(f, o1_loc_expected); break;\n+                case \"i2\" : checkOffset(f, i2_loc_expected); break;\n+                case \"o2\" : checkOffset(f, o2_loc_expected); break;\n+                case \"i3\" : checkOffset(f, i3_loc_expected); break;\n+                case \"o3\" : checkOffset(f, o3_loc_expected); break;\n+                case \"i4\" : checkOffset(f, i4_loc_expected); break;\n+                case \"o4\" : checkOffset(f, o4_loc_expected); break;\n+                default: throw new RuntimeException(\"Unexpected\");\n+            }\n+        }\n+        if (mismatch) {\n+            throw new RuntimeException(\"Mismatch!\");\n+        }\n+        System.out.println(\"All good.\");\n+    }\n+\n+}\n+\n","filename":"test\/hotspot\/jtreg\/runtime\/FieldLayout\/TestOopMapSizeMinimal.java","additions":262,"deletions":0,"binary":false,"changes":262,"status":"added"}]}