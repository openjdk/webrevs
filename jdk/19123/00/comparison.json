{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -251,0 +251,5 @@\n+            \/\/ It's not allowed for a Spliterator to report SORTED if not also ORDERED\n+            if ((c & Spliterator.SORTED) != 0 && (c & Spliterator.ORDERED) == 0) {\n+                c &= ~(Spliterator.SORTED);\n+            }\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/stream\/StreamSpliterators.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -608,0 +608,21 @@\n+    @Test\n+    public void testCharacteristicsForSortedUnorderedStreamSpliterators() {\n+        assertValidCombinationOfSortedAndOrdered(\n+            DoubleStream.of(3d,2d,4d,1d,5d).sorted().unordered().spliterator()\n+        );\n+        assertValidCombinationOfSortedAndOrdered(\n+            IntStream.of(3,2,4,1,5).sorted().unordered().spliterator()\n+        );\n+        assertValidCombinationOfSortedAndOrdered(\n+            LongStream.of(3L,2L,4L,1L,5L).sorted().unordered().spliterator()\n+        );\n+        assertValidCombinationOfSortedAndOrdered(\n+            Stream.of(3,2,4,1,5).sorted().unordered().spliterator()\n+        );\n+    }\n+\n+    void assertValidCombinationOfSortedAndOrdered(Spliterator<?> s) {\n+        if (s.hasCharacteristics(Spliterator.SORTED))\n+            Assert.assertTrue(s.hasCharacteristics(Spliterator.ORDERED));\n+    }\n+\n","filename":"test\/jdk\/java\/util\/stream\/test\/org\/openjdk\/tests\/java\/util\/stream\/StreamSpliteratorTest.java","additions":22,"deletions":1,"binary":false,"changes":23,"status":"modified"}]}