{"files":[{"patch":"@@ -4796,0 +4796,14 @@\n+\n+    \/\/ If we have crossed the 3\/4 point of max node limit it's too risky\n+    \/\/ to continue with EA\/SR because we might hit the max node limit.\n+    if (_compile->live_nodes() >= _compile->max_node_limit()*0.75) {\n+      if (_compile->do_reduce_allocation_merges()) {\n+        _compile->record_failure(C2Compiler::retry_no_reduce_allocation_merges());\n+      } else if (_invocation > 0) {\n+        _compile->record_failure(C2Compiler::retry_no_iterative_escape_analysis());\n+      } else {\n+        _compile->record_failure(C2Compiler::retry_no_escape_analysis());\n+      }\n+      return ;\n+    }\n+\n","filename":"src\/hotspot\/share\/opto\/escape.cpp","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,166 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331736\n+ * @summary Check that C2 does not exceed max live node limit when splitting unique types of large allocation merge.\n+ * @library \/test\/lib \/\n+ * @requires vm.debug & vm.flagless & vm.compiler2.enabled & vm.opt.final.EliminateAllocations\n+ * @compile -XDstringConcat=inline TestScalarReplacementMaxLiveNodes.java\n+ * @run main\/othervm -Xbatch -server -XX:-OptimizeStringConcat -XX:-TieredCompilation\n+ *                   -XX:+UnlockDiagnosticVMOptions -XX:+ReduceAllocationMerges\n+ *                   -XX:CompileCommand=dontinline,compiler.c2.TestScalarReplacementMaxLiveNodes::test\n+ *                   -XX:CompileCommand=compileonly,*TestScalarReplacementMaxLiveNodes*::*test*\n+ *                   -XX:CompileCommand=inline,*String*::*\n+ *                   -XX:CompileCommand=dontinline,*StringBuilder*::ensureCapacityInternal\n+ *                   -XX:CompileCommand=dontinline,*String*::substring\n+ *                   -XX:NodeCountInliningCutoff=220000\n+ *                   -XX:DesiredMethodLimit=100000\n+ *                   compiler.c2.TestScalarReplacementMaxLiveNodes\n+ *\/\n+package compiler.c2;\n+\n+public class TestScalarReplacementMaxLiveNodes {\n+    public static void main(String[] args) {\n+        TestScalarReplacementMaxLiveNodes obj = new TestScalarReplacementMaxLiveNodes();\n+\n+        int result = 0;\n+        for (int i = 0; i < 100; i++) {\n+            for (int val = 0; val < 50; val++) {\n+                result += obj.test(val, val+10, val+20, val+30, val+40).length();\n+            }\n+        }\n+\n+        System.out.println(\"Result is: \" + result);\n+    }\n+\n+    public String test(int param1, int param2, int param3, int param4, int param5) {\n+        String a = null, b = null, c = null, d = null, e = null;\n+\n+        if (param1 == 0) {\n+            a = new String(\"first\" + param1);\n+            param1 = (int) Math.cos(param1);\n+        } else if (param1 == 1) {\n+            a = new String(\"second\" + param2);\n+            param1 = (int) Math.cos(param1);\n+        } else if (param1 == 2) {\n+            a = \"\";\n+            param1 = (int) Math.cos(param1);\n+        } else if (param1 == 3) {\n+            b = new String(\"third\" + param2);\n+            param2 = (int) Math.sin(param2);\n+        } else if (param1 == 4) {\n+            b = new String(\"fourth\" + param1);\n+            param2 = (int) Math.sin(param2);\n+        } else if (param1 == 5) {\n+            b = new String(\"fifth\" + param2);\n+            param2 = (int) Math.sin(param2);\n+        }  else if (param1 == 6) {\n+            c = new String(\"sixth\" + param2);\n+            param2 = (int) Math.sin(param2);\n+        } else if (param1 == 7) {\n+            c = new String(\"seventh\" + param2);\n+            param3 = (int) Math.tan(param3);\n+        } else if (param1 == 8) {\n+            c = new String(\"eighth\" + param3);\n+            param3 = (int) Math.tan(param3);\n+        } else if (param1 == 9) {\n+            d = new String(\"nineth\" + param2);\n+            param3 = (int) Math.tan(param3);\n+        } else if (param1 == 10) {\n+            d = \"\";\n+            param3 = (int) Math.tan(param3);\n+        } else if (param1 == 11) {\n+            d = new String(\"tenth\" + param2);\n+            param4 = (int) Math.atan(param1 + param2);\n+        } else if (param1 == 12) {\n+            e = new String(\"eleventh\" + param3);\n+            param4 = (int) Math.atan(param1 + param2);\n+        } else if (param1 == 13) {\n+            e = \"\";\n+            param4 = (int) Math.atan(param1 + param2);\n+        } else if (param1 == 14) {\n+            e = new String(\"twelveth\" + param1);\n+            b = e;\n+        } else if (param1 == 15) {\n+            a = new String(\"thirteenth\" + param2);\n+            param4 = (int) Math.atan(param1 + param2);\n+        }  else if (param1 == 16) {\n+            b = \"\";\n+            param5 = (int) Math.abs(Math.sqrt(param1*param2));\n+        } else if (param1 == 17) {\n+            c = new String(\"fourteenth\" + param2);\n+            param5 = (int) Math.abs(Math.sqrt(param1*param2));\n+        } else if (param1 == 18) {\n+            e = new String(\"fifteenth\" + param3);\n+            param5 = (int) Math.abs(Math.sqrt(param1*param2));\n+        } else if (param1 == 19) {\n+            e = new String(\"sixteenth\" + param2);\n+            a = e;\n+        } else if (param1 == 20) {\n+            a = new String(\"seventeenth\" + param2);\n+            param1 = param2 + param3;\n+        } else if (param1 == 21) {\n+            b = new String(\"eighteenth\" + param2);\n+            c = b;\n+        } else if (param1 == 22) {\n+            c = \"\";\n+            param3 = param4 + param5;\n+        } else if (param1 == 23) {\n+            e = new String(\"nineteenth\" + param3);\n+            param4 = param5 + param1;\n+        } else if (param1 == 24) {\n+            e = new String(\"tweenth\" + param2);\n+        } else if (param1 == 25) {\n+            c = \"\";\n+            param3 = param4 + param5;\n+        }\n+\n+        int val1 = (a != null ?  a.length() :  10) + param1;\n+        int val2 = (b != null ?  b.length() :  20) + param2;\n+        int val3 = (c != null ?  c.length() :  20) + param3;\n+        int val4 = (d != null ?  d.length() :  20) + param4;\n+        int val5 = (e != null ?  e.length() :  20) + param5;\n+\n+        String result = \"Really Really Long String\";\n+        for (int i=0; i<16; i++) {\n+            for (int j=0; j<4; j++) {\n+                val1 += (int) (val1 >= 10 ? Math.sqrt(val1*val2*val3*val4 \/ 10) : i * j * Math.sin(Math.cos(val1)));\n+                val2 += (int) (val2 >= 10 ? Math.sqrt(val1*val2*val3*val4 \/ 20) : i * j * Math.sin(Math.cos(val2)));\n+                val3 += (int) (val3 >= 10 ? Math.sqrt(val1*val2*val3*val4 \/ 30) : i * j * Math.sin(Math.cos(val3)));\n+                val4 += (int) (val4 >= 10 ? Math.sqrt(val1*val2*val3*val4 \/ 40) : i * j * Math.sin(Math.cos(val4)));\n+                val5 += (int) (val5 >= 10 ? Math.sqrt(val1*val2*val3*val4 \/ 50) : i * j * Math.sin(Math.cos(val5)));\n+                int val6 = (int) (val1 + val2 + val3 + val4 + val5);\n+\n+                try {\n+                    result += \"Result is: \" + result.substring(10, 20) + val1;\n+                } catch (IndexOutOfBoundsException except) {\n+                    result += \"Reaally Long String\" + val6;\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestScalarReplacementMaxLiveNodes.java","additions":166,"deletions":0,"binary":false,"changes":166,"status":"added"}]}