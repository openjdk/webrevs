{"files":[{"patch":"@@ -77,2 +77,1 @@\n-                                   \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\",\n-                                   \"-Xbatch\");\n+                                   \"--add-exports\", \"java.base\/jdk.internal.misc=ALL-UNNAMED\");\n@@ -151,2 +150,2 @@\n-        testGroups.get(\"test500\").put(\"test500R\", (w,r) -> { return test500R(aB.clone(), offset1, vL1); });\n-        testGroups.get(\"test500\").put(\"test500a\", (w,r) -> { return test500a(aB.clone(), offset1, vL1); });\n+        testGroups.get(\"test500\").put(\"test500R\", (_,_) -> { return test500R(aB.clone(), offset1, vL1); });\n+        testGroups.get(\"test500\").put(\"test500a\", (_,_) -> { return test500a(aB.clone(), offset1, vL1); });\n@@ -155,3 +154,3 @@\n-        testGroups.get(\"test501\").put(\"test500R\", (w,r) -> { return test500R(aB.clone(), RANGE - 20 + (Math.abs(r) % 30), vL1); });\n-        testGroups.get(\"test501\").put(\"test501a\", (w,r) -> { return test501a(aB.clone(), RANGE - 20 + (Math.abs(r) % 30), vL1); });\n-        \/\/                                                                               +-----------------------------+\n+        testGroups.get(\"test501\").put(\"test500R\", (_,i) -> { return test500R(aB.clone(), RANGE - 20 + (i % 30), vL1); });\n+        testGroups.get(\"test501\").put(\"test501a\", (_,i) -> { return test501a(aB.clone(), RANGE - 20 + (i % 30), vL1); });\n+        \/\/                                                                               +-------------------+\n@@ -161,3 +160,3 @@\n-        testGroups.get(\"test502\").put(\"test500R\", (w,r) -> { return test500R(aB.clone(), w ? offset1 : RANGE - 20 + (Math.abs(r) % 30), vL1); });\n-        testGroups.get(\"test502\").put(\"test502a\", (w,r) -> { return test502a(aB.clone(), w ? offset1 : RANGE - 20 + (Math.abs(r) % 30), vL1); });\n-        \/\/                                                                                   +-----+   +-----------------------------+\n+        testGroups.get(\"test502\").put(\"test500R\", (w,i) -> { return test500R(aB.clone(), w ? offset1 : RANGE - 20 + (i % 30), vL1); });\n+        testGroups.get(\"test502\").put(\"test502a\", (w,i) -> { return test502a(aB.clone(), w ? offset1 : RANGE - 20 + (i % 30), vL1); });\n+        \/\/                                                                                   +-----+   +-------------------+\n@@ -165,1 +164,0 @@\n-        \/\/ This should first trigger optimized compilation (merge strores), and then deopt and compile without merging.\n@@ -168,1 +166,1 @@\n-    @Warmup(10)\n+    @Warmup(100)\n@@ -199,2 +197,3 @@\n-        \/\/ Repeat many times, so that we also have multiple iterations for post-warmup\n-        for (int iter = 0; iter < 100; iter++) {\n+        \/\/ Repeat many times, so that we also have multiple iterations for post-warmup to potentially recompile\n+        int iters = info.isWarmUp() ? 1_000 : 50_000;\n+        for (int iter = 0; iter < iters; iter++) {\n@@ -222,3 +221,0 @@\n-            boolean isWarmUp = info.isWarmUp();\n-            int rnd = RANDOM.nextInt();\n-\n@@ -234,1 +230,1 @@\n-                    Object[] result = test.run(isWarmUp, rnd);\n+                    Object[] result = test.run(info.isWarmUp(), iter);\n@@ -1131,4 +1127,0 @@\n-    @IR(counts = {IRNode.STORE_B_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"8\",\n-                  IRNode.STORE_C_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n-                  IRNode.STORE_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n-                  IRNode.STORE_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\"})\n@@ -1159,4 +1151,0 @@\n-    @IR(counts = {IRNode.STORE_B_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"8\",\n-                  IRNode.STORE_C_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n-                  IRNode.STORE_I_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\",\n-                  IRNode.STORE_L_OF_CLASS, \"byte\\\\\\\\[int:>=0] \\\\\\\\(java\/lang\/Cloneable,java\/io\/Serializable\\\\\\\\)\", \"0\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestMergeStores.java","additions":14,"deletions":26,"binary":false,"changes":40,"status":"modified"}]}