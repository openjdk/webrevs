{"files":[{"patch":"@@ -625,1 +625,0 @@\n-                  _merge_stores_phase(false),\n@@ -917,1 +916,0 @@\n-    _merge_stores_phase(false),\n@@ -935,0 +933,1 @@\n+    _for_post_loop_igvn(comp_arena(), 8, 0, nullptr),\n@@ -2446,10 +2445,0 @@\n-#ifdef VM_LITTLE_ENDIAN\n-  if (MergeStores && UseUnalignedAccesses) {\n-    assert(!C->merge_stores_phase(), \"merge store phase not yet set\");\n-    C->gather_nodes_for_merge_stores(igvn);\n-    C->set_merge_stores_phase(true);\n-    igvn.optimize();\n-    C->set_merge_stores_phase(false);\n-  }\n-#endif\n-\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":1,"deletions":12,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -321,2 +321,0 @@\n-  bool                  _merge_stores_phase;    \/\/ True during merge stores phase\n-\n@@ -790,3 +788,0 @@\n-  bool merge_stores_phase() { return _merge_stores_phase;  }\n-  void set_merge_stores_phase(bool b) { _merge_stores_phase = b;  }\n-\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2764,3 +2764,8 @@\n-  if (phase->C->merge_stores_phase()) {\n-    Node* progress = Ideal_merge_stores(phase);\n-    if (progress != nullptr) { return progress; }\n+#ifdef VM_LITTLE_ENDIAN\n+  if (MergeStores && UseUnalignedAccesses) {\n+    if (phase->C->post_loop_opts_phase()) {\n+      Node* progress = Ideal_merge_stores(phase);\n+      if (progress != nullptr) { return progress; }\n+    } else {\n+      phase->C->record_for_post_loop_opts_igvn(this);\n+    }\n@@ -2768,0 +2773,1 @@\n+#endif\n@@ -3172,4 +3178,7 @@\n-  ArrayPointer array_pointer1 = ArrayPointer::make(s1->in(MemNode::Address));\n-  ArrayPointer array_pointer2 = ArrayPointer::make(s2->in(MemNode::Address));\n-  if (!array_pointer2.is_adjacent_to(array_pointer1, s1->memory_size())) {\n-    return nullptr;\n+  {\n+    ResourceMark rm;\n+    ArrayPointer array_pointer1 = ArrayPointer::make(s1->in(MemNode::Address));\n+    ArrayPointer array_pointer2 = ArrayPointer::make(s2->in(MemNode::Address));\n+    if (!array_pointer2.is_adjacent_to(array_pointer1, s1->memory_size())) {\n+      return nullptr;\n+    }\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":16,"deletions":7,"binary":false,"changes":23,"status":"modified"}]}