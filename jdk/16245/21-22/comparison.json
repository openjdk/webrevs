{"files":[{"patch":"@@ -2892,0 +2892,3 @@\n+  enum CFGStatus { SuccessNoRangeCheck, SuccessWithRangeCheck, Failure };\n+  static CFGStatus cfg_status_for_pair(const StoreNode* use_store, const StoreNode* def_store);\n+\n@@ -3133,0 +3136,45 @@\n+MergePrimitiveArrayStores::CFGStatus MergePrimitiveArrayStores::cfg_status_for_pair(const StoreNode* use_store, const StoreNode* def_store) {\n+  assert(use_store->in(MemNode::Memory) == def_store, \"use-def relationship\");\n+\n+  Node* ctrl_use = use_store->in(MemNode::Control);\n+  Node* ctrl_def = def_store->in(MemNode::Control);\n+  if (ctrl_use == nullptr || ctrl_def == nullptr) {\n+    return CFGStatus::Failure;\n+  }\n+\n+  if (ctrl_use == ctrl_def) {\n+    \/\/ Same ctrl -> no RangeCheck in between.\n+    \/\/ Check: use_store must be the only use of def_store.\n+    if (def_store->outcnt() > 1) {\n+      return CFGStatus::Failure;\n+    }\n+    return CFGStatus::SuccessNoRangeCheck;\n+  }\n+\n+  \/\/ Different ctrl -> could have RangeCheck in between.\n+  \/\/ Check: 1. def_store only has these uses: use_store and MergeMem for uncommon trap, and\n+  \/\/        2. ctrl separated by RangeCheck.\n+  if (def_store->outcnt() != 2) {\n+    return CFGStatus::Failure; \/\/ Cannot have exactly these uses: use_store and MergeMem for uncommon trap.\n+  }\n+  int use_store_out_idx = def_store->raw_out(0) == use_store ? 0 : 1;\n+  Node* merge_mem = def_store->raw_out(1 - use_store_out_idx)->isa_MergeMem();\n+  if (merge_mem == nullptr ||\n+      merge_mem->outcnt() != 1) {\n+    return CFGStatus::Failure; \/\/ Does not have MergeMem for uncommon trap.\n+  }\n+  if (!ctrl_use->is_IfProj() ||\n+      !ctrl_use->in(0)->is_RangeCheck() ||\n+      ctrl_use->in(0)->outcnt() != 2) {\n+    return CFGStatus::Failure; \/\/ Not RangeCheck.\n+  }\n+  ProjNode* other_proj = ctrl_use->as_IfProj()->other_if_proj();\n+  Node* trap = other_proj->is_uncommon_trap_proj(Deoptimization::Reason_range_check);\n+  if (trap != merge_mem->unique_out() ||\n+      ctrl_use->in(0)->in(0) != ctrl_def) {\n+    return CFGStatus::Failure; \/\/ Not RangeCheck with merge_mem leading to uncommon trap.\n+  }\n+\n+  return CFGStatus::SuccessWithRangeCheck;\n+}\n+\n@@ -3186,9 +3234,0 @@\n-  \/\/ Uses should be:\n-  \/\/ 1) the other StoreNode\n-  \/\/ 2) optionally a MergeMem from the uncommon trap\n-  if (def_store->outcnt() > 2) {\n-    return Status::make_failure();\n-  }\n-\n-  StoreNode* use_store = nullptr;\n-  MergeMemNode* merge_mem = nullptr;\n@@ -3196,30 +3235,7 @@\n-    Node* use = def_store->fast_out(i);\n-    if (use_store == nullptr && is_compatible_store(use->isa_Store())) {\n-      use_store = use->as_Store();\n-    } else if (use->is_MergeMem() && merge_mem == nullptr) {\n-      merge_mem = use->as_MergeMem();\n-    } else {\n-      return Status::make_failure();\n-    }\n-  }\n-  if (use_store == nullptr) {\n-    return Status::make_failure();\n-  }\n-  if (merge_mem != nullptr) {\n-    \/\/ Check that merge_mem only leads to the uncommon trap between\n-    \/\/ the two stores.\n-    if (merge_mem->outcnt() != 1) {\n-      return Status::make_failure();\n-    }\n-    Node* ctrl_s1 = use_store->in(MemNode::Control);\n-    Node* ctrl_s2 = def_store->in(MemNode::Control);\n-    if (!ctrl_s1->is_IfProj() ||\n-        !ctrl_s1->in(0)->is_RangeCheck() ||\n-        ctrl_s1->in(0)->outcnt() != 2) {\n-      return Status::make_failure();\n-    }\n-    ProjNode* other_proj = ctrl_s1->as_IfProj()->other_if_proj();\n-    Node* trap = other_proj->is_uncommon_trap_proj(Deoptimization::Reason_range_check);\n-    if (trap != merge_mem->unique_out() ||\n-        ctrl_s1->in(0)->in(0) != ctrl_s2) {\n-      return Status::make_failure();\n+    StoreNode* use_store = def_store->fast_out(i)->isa_Store();\n+    if (is_compatible_store(use_store)) {\n+      CFGStatus cfg_status = cfg_status_for_pair(use_store, def_store);\n+      if (cfg_status == CFGStatus::Failure) {\n+        return Status::make_failure();\n+      }\n+      return Status(use_store, cfg_status == CFGStatus::SuccessWithRangeCheck);\n@@ -3228,3 +3244,1 @@\n-\n-  bool found_range_check = merge_mem != nullptr;\n-  return Status(use_store, found_range_check);\n+  return Status::make_failure();\n@@ -3241,18 +3255,3 @@\n-  \/\/ TODO consider unifying it, maybe it is even necessary for correctness.\n-  \/\/ Check ctrl compatibility\n-  Node* ctrl_use = use_store->in(MemNode::Control);\n-  Node* ctrl_def = def_store->in(MemNode::Control);\n-  if (ctrl_use != ctrl_def) {\n-    \/\/ See if we can bypass a RangeCheck\n-    if (!ctrl_use->is_IfProj() ||\n-        !ctrl_use->in(0)->is_RangeCheck() ||\n-        ctrl_use->in(0)->outcnt() != 2) {\n-      return Status::make_failure();\n-    }\n-    ProjNode* other_proj = ctrl_use->as_IfProj()->other_if_proj();\n-    if (other_proj->is_uncommon_trap_proj(Deoptimization::Reason_range_check) == nullptr ||\n-        ctrl_use->in(0)->in(0) != ctrl_def) {\n-      return Status::make_failure();\n-    }\n-    \/\/ Success, we skipped a RangeCheck.\n-    return Status(def_store, true);\n+  CFGStatus cfg_status = cfg_status_for_pair(use_store, def_store);\n+  if (cfg_status == CFGStatus::Failure) {\n+    return Status::make_failure();\n@@ -3260,3 +3259,1 @@\n-\n-  \/\/ Success, no RangeCheck is in between.\n-  return Status(def_store, false);\n+  return Status(def_store, cfg_status == CFGStatus::SuccessWithRangeCheck);\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":60,"deletions":63,"binary":false,"changes":123,"status":"modified"}]}