{"files":[{"patch":"@@ -2944,0 +2944,8 @@\n+\/\/\n+\/\/ Class to parse array pointers of the form:\n+\/\/ pointer = base + constant_offset + (int_offset << int_offset_shift) + sum(other_offsets)\n+\/\/\n+\/\/ The goal is to check if two such ArrayPointers are adjacent for a load or store.\n+\/\/ Note: we accumulate all constant offsets into constant_offset, even the int constant\n+\/\/       behind the LShiftL(ConvI2L(...)) pattern. TODO overflow\n+\/\/ TODO only works for arrays?\n@@ -2950,2 +2958,2 @@\n-  const Node* _int_offset; \/\/ Offset behind LShiftL and ConvI2L\n-  const jint _int_offset_shift;  \/\/ Shift value for int_offset\n+  const Node* _int_offset;       \/\/ (optional) Offset behind LShiftL and ConvI2L\n+  const jint _int_offset_shift;  \/\/ (optional) Shift value for int_offset\n@@ -2971,1 +2979,0 @@\n-    assert(is_valid == (_int_offset != nullptr), \"have int_offset exactly if valid\");\n@@ -3016,1 +3023,1 @@\n-    \/\/ pointer = base + const_offset + (int_offset << int_offset_shift) + sum(other_offsets)\n+    \/\/ pointer = base + constant_offset + (int_offset << int_offset_shift) + sum(other_offsets)\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,1 +73,1 @@\n-    Map<String, Map<String, TestFunction>> test_groups = new HashMap<String, Map<String, TestFunction>>();\n+    Map<String, Map<String, TestFunction>> testGroups = new HashMap<String, Map<String, TestFunction>>();\n@@ -81,59 +81,59 @@\n-        test_groups.put(\"test1\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test1\").put(\"test1R\", () -> { return test1R(aB.clone()); });\n-        test_groups.get(\"test1\").put(\"test1a\", () -> { return test1a(aB.clone()); });\n-        test_groups.get(\"test1\").put(\"test1b\", () -> { return test1b(aB.clone()); });\n-        test_groups.get(\"test1\").put(\"test1c\", () -> { return test1c(aB.clone()); });\n-        test_groups.get(\"test1\").put(\"test1d\", () -> { return test1d(aB.clone()); });\n-        test_groups.get(\"test1\").put(\"test1e\", () -> { return test1e(aB.clone()); });\n-        test_groups.get(\"test1\").put(\"test1f\", () -> { return test1f(aB.clone()); });\n-        test_groups.get(\"test1\").put(\"test1g\", () -> { return test1g(aB.clone()); });\n-        test_groups.get(\"test1\").put(\"test1h\", () -> { return test1h(aB.clone()); });\n-        test_groups.get(\"test1\").put(\"test1i\", () -> { return test1i(aB.clone()); });\n-\n-        test_groups.put(\"test2\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test2\").put(\"test2R\", () -> { return test2R(aB.clone(), offset1, vL1); });\n-        test_groups.get(\"test2\").put(\"test2a\", () -> { return test2a(aB.clone(), offset1, vL1); });\n-        test_groups.get(\"test2\").put(\"test2b\", () -> { return test2b(aB.clone(), offset1, vL1); });\n-        test_groups.get(\"test2\").put(\"test2c\", () -> { return test2c(aB.clone(), offset1, vL1); });\n-        test_groups.get(\"test2\").put(\"test2d\", () -> { return test2d(aB.clone(), offset1, vL1); });\n-        test_groups.get(\"test2\").put(\"test2e\", () -> { return test2d(aB.clone(), offset1, vL1); });\n-\n-        test_groups.put(\"test3\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test3\").put(\"test3R\", () -> { return test3R(aB.clone(), offset1, vL1); });\n-        test_groups.get(\"test3\").put(\"test3a\", () -> { return test3a(aB.clone(), offset1, vL1); });\n-\n-        test_groups.put(\"test4\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test4\").put(\"test4R\", () -> { return test4R(aB.clone(), offset1, vL1, vI1, vS1, vB1); });\n-        test_groups.get(\"test4\").put(\"test4a\", () -> { return test4a(aB.clone(), offset1, vL1, vI1, vS1, vB1); });\n-\n-        test_groups.put(\"test5\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test5\").put(\"test5R\", () -> { return test5R(aB.clone(), offset1); });\n-        test_groups.get(\"test5\").put(\"test5a\", () -> { return test5a(aB.clone(), offset1); });\n-\n-        test_groups.put(\"test6\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test6\").put(\"test6R\", () -> { return test6R(aB.clone(), bB.clone(), offset1, offset2); });\n-        test_groups.get(\"test6\").put(\"test6a\", () -> { return test6a(aB.clone(), bB.clone(), offset1, offset2); });\n-\n-        test_groups.put(\"test100\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test100\").put(\"test100R\", () -> { return test100R(aS.clone(), offset1); });\n-        test_groups.get(\"test100\").put(\"test100a\", () -> { return test100a(aS.clone(), offset1); });\n-\n-        test_groups.put(\"test101\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test101\").put(\"test101R\", () -> { return test101R(aS.clone(), offset1); });\n-        test_groups.get(\"test101\").put(\"test101a\", () -> { return test101a(aS.clone(), offset1); });\n-\n-        test_groups.put(\"test102\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test102\").put(\"test102R\", () -> { return test102R(aS.clone(), offset1, vL1, vI1, vS1); });\n-        test_groups.get(\"test102\").put(\"test102a\", () -> { return test102a(aS.clone(), offset1, vL1, vI1, vS1); });\n-\n-        test_groups.put(\"test200\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test200\").put(\"test200R\", () -> { return test200R(aI.clone(), offset1); });\n-        test_groups.get(\"test200\").put(\"test200a\", () -> { return test200a(aI.clone(), offset1); });\n-\n-        test_groups.put(\"test201\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test201\").put(\"test201R\", () -> { return test201R(aI.clone(), offset1); });\n-        test_groups.get(\"test201\").put(\"test201a\", () -> { return test201a(aI.clone(), offset1); });\n-\n-        test_groups.put(\"test202\", new HashMap<String,TestFunction>());\n-        test_groups.get(\"test202\").put(\"test202R\", () -> { return test202R(aI.clone(), offset1, vL1, vI1); });\n-        test_groups.get(\"test202\").put(\"test202a\", () -> { return test202a(aI.clone(), offset1, vL1, vI1); });\n+        testGroups.put(\"test1\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test1\").put(\"test1R\", () -> { return test1R(aB.clone()); });\n+        testGroups.get(\"test1\").put(\"test1a\", () -> { return test1a(aB.clone()); });\n+        testGroups.get(\"test1\").put(\"test1b\", () -> { return test1b(aB.clone()); });\n+        testGroups.get(\"test1\").put(\"test1c\", () -> { return test1c(aB.clone()); });\n+        testGroups.get(\"test1\").put(\"test1d\", () -> { return test1d(aB.clone()); });\n+        testGroups.get(\"test1\").put(\"test1e\", () -> { return test1e(aB.clone()); });\n+        testGroups.get(\"test1\").put(\"test1f\", () -> { return test1f(aB.clone()); });\n+        testGroups.get(\"test1\").put(\"test1g\", () -> { return test1g(aB.clone()); });\n+        testGroups.get(\"test1\").put(\"test1h\", () -> { return test1h(aB.clone()); });\n+        testGroups.get(\"test1\").put(\"test1i\", () -> { return test1i(aB.clone()); });\n+\n+        testGroups.put(\"test2\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test2\").put(\"test2R\", () -> { return test2R(aB.clone(), offset1, vL1); });\n+        testGroups.get(\"test2\").put(\"test2a\", () -> { return test2a(aB.clone(), offset1, vL1); });\n+        testGroups.get(\"test2\").put(\"test2b\", () -> { return test2b(aB.clone(), offset1, vL1); });\n+        testGroups.get(\"test2\").put(\"test2c\", () -> { return test2c(aB.clone(), offset1, vL1); });\n+        testGroups.get(\"test2\").put(\"test2d\", () -> { return test2d(aB.clone(), offset1, vL1); });\n+        testGroups.get(\"test2\").put(\"test2e\", () -> { return test2d(aB.clone(), offset1, vL1); });\n+\n+        testGroups.put(\"test3\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test3\").put(\"test3R\", () -> { return test3R(aB.clone(), offset1, vL1); });\n+        testGroups.get(\"test3\").put(\"test3a\", () -> { return test3a(aB.clone(), offset1, vL1); });\n+\n+        testGroups.put(\"test4\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test4\").put(\"test4R\", () -> { return test4R(aB.clone(), offset1, vL1, vI1, vS1, vB1); });\n+        testGroups.get(\"test4\").put(\"test4a\", () -> { return test4a(aB.clone(), offset1, vL1, vI1, vS1, vB1); });\n+\n+        testGroups.put(\"test5\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test5\").put(\"test5R\", () -> { return test5R(aB.clone(), offset1); });\n+        testGroups.get(\"test5\").put(\"test5a\", () -> { return test5a(aB.clone(), offset1); });\n+\n+        testGroups.put(\"test6\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test6\").put(\"test6R\", () -> { return test6R(aB.clone(), bB.clone(), offset1, offset2); });\n+        testGroups.get(\"test6\").put(\"test6a\", () -> { return test6a(aB.clone(), bB.clone(), offset1, offset2); });\n+\n+        testGroups.put(\"test100\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test100\").put(\"test100R\", () -> { return test100R(aS.clone(), offset1); });\n+        testGroups.get(\"test100\").put(\"test100a\", () -> { return test100a(aS.clone(), offset1); });\n+\n+        testGroups.put(\"test101\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test101\").put(\"test101R\", () -> { return test101R(aS.clone(), offset1); });\n+        testGroups.get(\"test101\").put(\"test101a\", () -> { return test101a(aS.clone(), offset1); });\n+\n+        testGroups.put(\"test102\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test102\").put(\"test102R\", () -> { return test102R(aS.clone(), offset1, vL1, vI1, vS1); });\n+        testGroups.get(\"test102\").put(\"test102a\", () -> { return test102a(aS.clone(), offset1, vL1, vI1, vS1); });\n+\n+        testGroups.put(\"test200\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test200\").put(\"test200R\", () -> { return test200R(aI.clone(), offset1); });\n+        testGroups.get(\"test200\").put(\"test200a\", () -> { return test200a(aI.clone(), offset1); });\n+\n+        testGroups.put(\"test201\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test201\").put(\"test201R\", () -> { return test201R(aI.clone(), offset1); });\n+        testGroups.get(\"test201\").put(\"test201a\", () -> { return test201a(aI.clone(), offset1); });\n+\n+        testGroups.put(\"test202\", new HashMap<String,TestFunction>());\n+        testGroups.get(\"test202\").put(\"test202R\", () -> { return test202R(aI.clone(), offset1, vL1, vI1); });\n+        testGroups.get(\"test202\").put(\"test202a\", () -> { return test202a(aI.clone(), offset1, vL1, vI1); });\n@@ -142,0 +142,1 @@\n+    @Warmup(100)\n@@ -189,1 +190,1 @@\n-        for (Map.Entry<String, Map<String,TestFunction>> group_entry : test_groups.entrySet()) {\n+        for (Map.Entry<String, Map<String,TestFunction>> group_entry : testGroups.entrySet()) {\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestMergeStores.java","additions":63,"deletions":62,"binary":false,"changes":125,"status":"modified"}]}