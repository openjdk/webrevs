{"files":[{"patch":"@@ -2881,0 +2881,19 @@\n+\/\/\n+\/\/ Note: For normal array stores, every store at first has a RangeCheck. But they can be removed with:\n+\/\/       - RCE (RangeCheck Elimination): the RangeChecks in the loop are hoisted out and before the loop,\n+\/\/                                       and possibly no RangeChecks remain between the stores.\n+\/\/       - RangeCheck smearing: the earlier RangeChecks are adjusted such that they cover later RangeChecks,\n+\/\/                              and those later RangeChecks can be removed. Example:\n+\/\/\n+\/\/                              RangeCheck[i+0]                         RangeCheck[i+0]\n+\/\/                              StoreB[i+0]                             StoreB[i+0]\n+\/\/                              RangeCheck[i+1]     --> smeared -->     RangeCheck[i+3]\n+\/\/                              StoreB[i+0]                             StoreB[i+1]\n+\/\/                              RangeCheck[i+2]     --> removed\n+\/\/                              StoreB[i+0]                             StoreB[i+2]\n+\/\/                              RangeCheck[i+3]     --> removed\n+\/\/                              StoreB[i+0]                             StoreB[i+3]\n+\/\/\n+\/\/                              Thus, it is a common pattern that in a long chain of adjacent stores there\n+\/\/                              remains exactly one RangeCheck, between the first and the second store.\n+\/\/\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MergeStores.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}