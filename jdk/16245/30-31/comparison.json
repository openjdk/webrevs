{"files":[{"patch":"@@ -2892,0 +2892,7 @@\n+  bool is_compatible_store(const StoreNode* other_store) const;\n+  bool is_adjacent_pair(const StoreNode* use_store, const StoreNode* def_store) const;\n+  bool is_adjacent_input_pair(const Node* n1, const Node* n2, const int memory_size) const;\n+  static bool is_con_RShift(const Node* n, Node const*& base_out, jint& shift_out);\n+  enum CFGStatus { SuccessNoRangeCheck, SuccessWithRangeCheck, Failure };\n+  static CFGStatus cfg_status_for_pair(const StoreNode* use_store, const StoreNode* def_store);\n+\n@@ -2897,0 +2904,3 @@\n+    Status(StoreNode* found_store, bool found_range_check)\n+      : _found_store(found_store), _found_range_check(found_range_check) {}\n+\n@@ -2898,2 +2908,0 @@\n-    Status(StoreNode* found_store, bool found_range_check) : _found_store(found_store), _found_range_check(found_range_check) {}\n-    static Status make_failure() { return Status(nullptr, false); }\n@@ -2902,1 +2910,1 @@\n-  };\n+    static Status make_failure() { return Status(nullptr, false); }\n@@ -2904,6 +2912,7 @@\n-  bool is_compatible_store(const StoreNode* other_store) const;\n-  bool is_adjacent_pair(const StoreNode* use_store, const StoreNode* def_store) const;\n-  bool is_adjacent_input_pair(const Node* n1, const Node* n2, const int memory_size) const;\n-  static bool is_con_RShift(const Node* n, Node const*& base_out, jint& shift_out);\n-  enum CFGStatus { SuccessNoRangeCheck, SuccessWithRangeCheck, Failure };\n-  static CFGStatus cfg_status_for_pair(const StoreNode* use_store, const StoreNode* def_store);\n+    static Status make(StoreNode* found_store, const CFGStatus cfg_status) {\n+      if (cfg_status == CFGStatus::Failure) {\n+        return Status::make_failure();\n+      }\n+      return Status(found_store, cfg_status == CFGStatus::SuccessWithRangeCheck);\n+    }\n+  };\n@@ -2921,0 +2930,2 @@\n+\n+  DEBUG_ONLY( void trace(const Node_List& merge_list, const Node* merged_input_value, const StoreNode* merged_store) const; )\n@@ -2959,12 +2970,1 @@\n-#ifdef ASSERT\n-  if (TraceMergeStores) {\n-    stringStream ss;\n-    ss.print_cr(\"[TraceMergeStores]: Replace\");\n-    for (int i = (int)merge_list.size() - 1; i >= 0; i--) {\n-      merge_list.at(i)->dump(\"\\n\", false, &ss);\n-    }\n-    ss.print_cr(\"[TraceMergeStores]: with\");\n-    merged_store->dump(\"\\n\", false, &ss);\n-    tty->print(\"%s\", ss.as_string());\n-  }\n-#endif\n+  DEBUG_ONLY( if(TraceMergeStores) { trace(merge_list, merged_input_value, merged_store); } )\n@@ -3177,5 +3177,1 @@\n-      CFGStatus cfg_status = cfg_status_for_pair(use_store, def_store);\n-      if (cfg_status == CFGStatus::Failure) {\n-        return Status::make_failure();\n-      }\n-      return Status(use_store, cfg_status == CFGStatus::SuccessWithRangeCheck);\n+      return Status::make(use_store, cfg_status_for_pair(use_store, def_store));\n@@ -3195,5 +3191,1 @@\n-  CFGStatus cfg_status = cfg_status_for_pair(use_store, def_store);\n-  if (cfg_status == CFGStatus::Failure) {\n-    return Status::make_failure();\n-  }\n-  return Status(def_store, cfg_status == CFGStatus::SuccessWithRangeCheck);\n+  return Status::make(def_store, cfg_status_for_pair(use_store, def_store));\n@@ -3337,0 +3329,14 @@\n+#ifdef ASSERT\n+void MergePrimitiveArrayStores::trace(const Node_List& merge_list, const Node* merged_input_value, const StoreNode* merged_store) const {\n+  stringStream ss;\n+  ss.print_cr(\"[TraceMergeStores]: Replace\");\n+  for (int i = (int)merge_list.size() - 1; i >= 0; i--) {\n+    merge_list.at(i)->dump(\"\\n\", false, &ss);\n+  }\n+  ss.print_cr(\"[TraceMergeStores]: with\");\n+  merged_input_value->dump(\"\\n\", false, &ss);\n+  merged_store->dump(\"\\n\", false, &ss);\n+  tty->print(\"%s\", ss.as_string());\n+}\n+#endif\n+\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":37,"deletions":31,"binary":false,"changes":68,"status":"modified"}]}