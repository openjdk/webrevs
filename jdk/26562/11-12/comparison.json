{"files":[{"patch":"@@ -561,1 +561,2 @@\n-static THREAD_LOCAL bool os_bsd_jit_exec_enabled;\n+THREAD_LOCAL bool os::_jit_exec_enabled;\n+\n@@ -565,1 +566,1 @@\n-\/\/ thread-local variable os_bsd_jit_exec_enabled.\n+\/\/ thread-local variable os::_jit_exec_enabled\n@@ -568,1 +569,1 @@\n-  if (exec_enabled != os_bsd_jit_exec_enabled NOT_PRODUCT( || DefaultWXWriteMode == WXWrite)) {\n+  if (exec_enabled != _jit_exec_enabled NOT_PRODUCT( || DefaultWXWriteMode == WXWrite)) {\n@@ -570,1 +571,1 @@\n-    os_bsd_jit_exec_enabled = exec_enabled;\n+    _jit_exec_enabled = exec_enabled;\n@@ -588,1 +589,1 @@\n-void os::thread_wx_enable_write() {\n+void os::thread_wx_enable_write_impl() {\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1096,1 +1096,13 @@\n-  static void thread_wx_enable_write();\n+  static void thread_wx_enable_write_impl();\n+\n+  \/\/ Short circuit write enabling if it's already enabled. This\n+  \/\/ function is executed many times, so it makes sense to inline a\n+  \/\/ small part of it.\n+private:\n+  static THREAD_LOCAL bool _jit_exec_enabled;\n+public:\n+  static void thread_wx_enable_write() {\n+    if (__builtin_expect(_jit_exec_enabled, false)) {\n+      thread_wx_enable_write_impl();\n+    }\n+  }\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-    guarantee(new_mode != WXArmedForWrite, \"need a pointer to heal\");\n","filename":"src\/hotspot\/share\/runtime\/threadWXSetters.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}