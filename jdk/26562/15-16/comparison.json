{"files":[{"patch":"@@ -517,16 +517,4 @@\n-    {\n-      static auto mode = WXArmedForWrite;\n-      if (mode == WXArmedForWrite && cb && StressWXHealing) {\n-        auto p = (uint32_t*)heap->low();\n-        \/\/ auto fp = (fptr)p;\n-        auto fp = (void(*)())p;\n-        {\n-          ThreadWXEnable wx(WXExec, Thread::current());\n-          {\n-            ThreadWXEnable wx(&mode, Thread::current());\n-            p[0] = 0xd65f03c0; \/\/ ret lr\n-            assert (mode == WXWrite, \"checking for a working WX implementation\");\n-          }\n-          fp();\n-        }\n-      }\n+\n+#ifdef MACOS_AARCH64\n+    if (TraceWXHealing) {\n+      ThreadWXEnable::test((address)heap->low());\n@@ -534,0 +522,1 @@\n+#endif \/\/ MACOS_AARCH64\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":5,"deletions":16,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright IBM Corp. 2025 All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"runtime\/javaThread.inline.hpp\"\n+#include \"runtime\/threadWXSetters.inline.hpp\"\n+#include \"utilities\/macros.hpp\"\n+\n+#ifdef MACOS_AARCH64\n+\n+\/\/ Test WX healing. We're going to provoke a signal handler to \"heal\"\n+\/\/ (i.e. rewrite) the mode WXArmedForWrite to WXWrite. Return true iff\n+\/\/ MAP_JIT write protection works as we expect.\n+bool ThreadWXEnable::test(address a) {\n+  bool result = true;\n+  static auto mode = WXArmedForWrite;\n+  if (mode == WXArmedForWrite && a && StressWXHealing) {\n+    auto p = (unsigned int*)a;\n+    \/\/ auto fp = (fptr)p;\n+    auto fp = (void(*)())p;\n+    ThreadWXEnable wx(WXExec, Thread::current());\n+    {\n+      ThreadWXEnable wx(&mode, Thread::current());\n+      p[0] = 0xd65f03c0; \/\/ ret lr\n+      if (mode != WXWrite) {\n+        tty->print_cr(\"WX Healing is not enabled because MAP_JIT write protection does not work on this system.\");\n+        guarantee(pthread_jit_write_protect_supported_np() == false, \"must be\");\n+        result = false;\n+      }\n+    }\n+    fp();\n+  }\n+  return result;\n+}\n+\n+#endif \/\/ MACOS_AARCH64\n","filename":"src\/hotspot\/share\/runtime\/threadWXSetters.cpp","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -83,0 +83,2 @@\n+\n+  static bool test(address p);\n","filename":"src\/hotspot\/share\/runtime\/threadWXSetters.inline.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,4 +46,8 @@\n-        var pattern = Pattern.compile(\"Healing WXMode WXArmedForWrite at 0x[0-9a-f]* to WXWrite  \");\n-        var matches = pattern.matcher(output).results().count();\n-        if (matches < 10) {\n-            throw new RuntimeException(\"Only \" + matches + \" healings in\\n\" + output);\n+        if (Pattern.matches(\"MAP_JIT write protection does not work on this system\", output)) {\n+            System.out.println(\"Test was not run because MAP_JIT write protection does not work on this system\");\n+        } else {\n+            var pattern = Pattern.compile(\"Healing WXMode WXArmedForWrite at 0x[0-9a-f]* to WXWrite  \");\n+            var matches = pattern.matcher(output).results().count();\n+            if (matches < 10) {\n+                throw new RuntimeException(\"Only \" + matches + \" healings in\\n\" + output);\n+            }\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestWXHealing.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"}]}