{"files":[{"patch":"@@ -639,4 +639,9 @@\n-    tty->print_cr(\"### TraceWXHealing is in use\");\n-  }\n-  if (StressWXHealing) {\n-    tty->print_cr(\"### StressWXHealing is in use\");\n+    if (pthread_jit_write_protect_supported_np()) {\n+      tty->print_cr(\"### TraceWXHealing is in use\");\n+      if (StressWXHealing) {\n+        tty->print_cr(\"### StressWXHealing is in use\");\n+      }\n+    } else {\n+      tty->print_cr(\"WX Healing is not in use because MAP_JIT write protection \"\n+                    \"does not work on this system.\");\n+    }\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -517,7 +517,0 @@\n-\n-#ifdef MACOS_AARCH64\n-    if (TraceWXHealing) {\n-      ThreadWXEnable::test((address)heap->low());\n-    }\n-#endif \/\/ MACOS_AARCH64\n-\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1,59 +0,0 @@\n-\/*\n- * Copyright (c) 1997, 2021, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright IBM Corp. 2025 All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#include \"runtime\/javaThread.inline.hpp\"\n-#include \"runtime\/threadWXSetters.inline.hpp\"\n-#include \"utilities\/macros.hpp\"\n-\n-#ifdef MACOS_AARCH64\n-\n-\/\/ Test WX healing. We're going to provoke a signal handler to \"heal\"\n-\/\/ (i.e. rewrite) the mode WXArmedForWrite to WXWrite. Return true iff\n-\/\/ MAP_JIT write protection works as we expect.\n-bool ThreadWXEnable::test(address a) {\n-  bool result = true;\n-  static auto mode = WXArmedForWrite;\n-  if (mode == WXArmedForWrite && a != nullptr && StressWXHealing) {\n-    auto p = (unsigned int*)a;\n-    ThreadWXEnable wx(WXExec, Thread::current());\n-    {\n-      ThreadWXEnable wx(&mode, Thread::current());\n-      \/\/ Write to the provided JIT region\n-      p[0] = 0xd65f03c0; \/\/ ret lr\n-      if (mode != WXWrite) {\n-        guarantee(pthread_jit_write_protect_supported_np() == false, \"must be\");\n-        tty->print_cr(\"WX Healing is not enabled because MAP_JIT write protection does not work on this system.\");\n-        result = false;\n-        mode = WXWrite;\n-      }\n-    }\n-    \/\/ Make sure the newly-compiled code can be executed.\n-    auto fp = (void(*)())p;\n-    fp();\n-  }\n-  return result;\n-}\n-\n-#endif \/\/ MACOS_AARCH64\n","filename":"src\/hotspot\/share\/runtime\/threadWXSetters.cpp","additions":0,"deletions":59,"binary":false,"changes":59,"status":"deleted"},{"patch":"@@ -49,3 +49,3 @@\n-    _prev = javaThread ? javaThread->_cur_wx_enable: nullptr;\n-    _old_mode = _thread ? _thread->enable_wx(*new_mode) : WXWrite;\n-    if (javaThread) {\n+    _prev = javaThread != nullptr ? javaThread->_cur_wx_enable: nullptr;\n+    _old_mode = _thread != nullptr ? _thread->enable_wx(*new_mode) : WXWrite;\n+    if (javaThread != nullptr) {\n@@ -62,2 +62,2 @@\n-    _prev = javaThread ? javaThread->_cur_wx_enable: nullptr;\n-    _old_mode = _thread ? _thread->enable_wx(new_mode) : WXWrite;\n+    _prev = javaThread != nullptr ? javaThread->_cur_wx_enable: nullptr;\n+    _old_mode = _thread != nullptr ? _thread->enable_wx(new_mode) : WXWrite;\n@@ -77,1 +77,1 @@\n-      if (javaThread) {\n+      if (javaThread != nullptr) {\n@@ -79,1 +79,1 @@\n-        javaThread->_cur_wx_mode = _prev ? _prev->_this_wx_mode : nullptr;\n+        javaThread->_cur_wx_mode = _prev != nullptr ? _prev->_this_wx_mode : nullptr;\n","filename":"src\/hotspot\/share\/runtime\/threadWXSetters.inline.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"}]}