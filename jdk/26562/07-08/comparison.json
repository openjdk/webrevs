{"files":[{"patch":"@@ -80,1 +80,0 @@\n-  \/\/ MACOS_AARCH64_ONLY(os::thread_wx_enable_write());\n@@ -137,1 +136,0 @@\n-  \/\/ das(uint64_t(instruction_address()),2);\n","filename":"src\/hotspot\/cpu\/aarch64\/nativeInst_aarch64.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-#ifdef MACOS_W_XOR_X\n+#ifdef MACOS_AARCH64\n@@ -285,4 +285,4 @@\n-    \/\/ Enable WXWrite for the duration of this handler: this function\n-    \/\/ is called by the signal handler at arbitrary point of\n-    \/\/ execution.\n-    ThreadWXEnable wx(WXWrite, thread);\n+    \/\/ There may be cases where code after this point that we call\n+    \/\/ from the signal handler changes WX state, so we protect against\n+    \/\/ that by saving and restoring the state.\n+    ThreadWXEnable wx(thread->get_wx_state(), thread);\n@@ -560,1 +560,1 @@\n-#ifdef MACOS_W_XOR_X\n+#ifdef MACOS_AARCH64\n@@ -594,1 +594,1 @@\n-#endif \/\/ MACOS_W_XOR_X\n+#endif \/\/ MACOS_AARCH64\n","filename":"src\/hotspot\/os_cpu\/bsd_aarch64\/os_bsd_aarch64.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -351,2 +351,1 @@\n-#define JRT_END                                 \\\n-}\n+#define JRT_END }\n","filename":"src\/hotspot\/share\/runtime\/interfaceSupport.inline.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -96,2 +96,0 @@\n-\n-  MACOS_AARCH64_ONLY(_thread->enable_wx(WXExec));\n@@ -104,2 +102,0 @@\n-  MACOS_AARCH64_ONLY(_thread->enable_wx(WXWrite));\n-\n@@ -319,1 +315,0 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec, THREAD));\n@@ -330,1 +325,0 @@\n-  MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec, THREAD));\n@@ -417,11 +411,14 @@\n-      StubRoutines::call_stub()(\n-        (address)&link,\n-        \/\/ (intptr_t*)&(result->_value), \/\/ see NOTE above (compiler problem)\n-        result_val_address,          \/\/ see NOTE above (compiler problem)\n-        result_type,\n-        method(),\n-        entry_point,\n-        parameter_address,\n-        args->size_of_parameters(),\n-        CHECK\n-      );\n+      {\n+        MACOS_AARCH64_ONLY(ThreadWXEnable wx(WXExec, thread));\n+        StubRoutines::call_stub()(\n+          (address)&link,\n+          \/\/ (intptr_t*)&(result->_value), \/\/ see NOTE above (compiler problem)\n+          result_val_address,          \/\/ see NOTE above (compiler problem)\n+          result_type,\n+          method(),\n+          entry_point,\n+          parameter_address,\n+          args->size_of_parameters(),\n+          CHECK\n+        );\n+      }\n","filename":"src\/hotspot\/share\/runtime\/javaCalls.cpp","additions":14,"deletions":17,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -513,1 +513,1 @@\n-#ifdef MACOS_W_XOR_X\n+#ifdef MACOS_AARCH64\n","filename":"src\/hotspot\/share\/runtime\/javaThread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1268,1 +1268,1 @@\n-#ifdef MACOS_W_XOR_X\n+#ifdef MACOS_AARCH64\n","filename":"src\/hotspot\/share\/runtime\/javaThread.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-#ifdef MACOS_W_XOR_X\n+#ifdef MACOS_AARCH64\n@@ -151,1 +151,1 @@\n-#endif \/\/ MACOS_W_XOR_X\n+#endif \/\/ MACOS_AARCH64\n@@ -1092,1 +1092,1 @@\n-#ifdef MACOS_W_XOR_X\n+#ifdef MACOS_AARCH64\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -613,1 +613,1 @@\n-#ifdef MACOS_W_XOR_X\n+#ifdef MACOS_AARCH64\n@@ -627,1 +627,1 @@\n-#endif \/\/ MACOS_W_XOR_X\n+#endif \/\/ MACOS_AARCH64\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#ifdef MACOS_W_XOR_X\n+#ifdef MACOS_AARCH64\n@@ -75,0 +75,3 @@\n+\n+static void dummy() { }\n+\n@@ -81,0 +84,2 @@\n+  \/\/ Side effect: preload base address of libjvm\n+  guarantee(os::address_is_in_vm(CAST_FROM_FN_PTR(address, &dummy)), \"must be\");\n","filename":"src\/hotspot\/share\/runtime\/thread.inline.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#ifdef MACOS_W_XOR_X\n+#ifdef MACOS_AARCH64\n@@ -85,1 +85,1 @@\n-#endif \/\/ MACOS_W_XOR_X\n+#endif \/\/ MACOS_AARCH64\n","filename":"src\/hotspot\/share\/runtime\/threadWXSetters.inline.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -560,1 +560,1 @@\n-#define MACOS_W_XOR_X 1\n+#define MACOS_AARCH64 1\n","filename":"src\/hotspot\/share\/utilities\/macros.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,46 @@\n+\/*\n+ * Copyright (c) 2025 IBM Corporation. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @requires os.family == \"mac\"\n+ * @requires os.arch == \"aarch64\"\n+ * @summary Run shell with -XX:+StressWXHealing. This tests most of\n+ * the triggers for WX mode.\n+ * @library \/test\/lib\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:+TraceWXHealing -XX:+StressWXHealing TestWXHealing\n+ * @run main\/othervm -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:+TraceWXHealing -XX:+StressWXHealing TestWXHealing\n+ *\/\n+\n+import jdk.jshell.tool.*;\n+\n+public class TestWXHealing {\n+\n+    \/\/ There's nothing special about jshell here: we just need an\n+    \/\/ application that does a lot of compilation and class loading.\n+    public static void main(String[] args) throws Throwable {\n+        JavaShellToolBuilder\n+            .builder()\n+            .start();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestWXHealing.java","additions":46,"deletions":0,"binary":false,"changes":46,"status":"added"}]}