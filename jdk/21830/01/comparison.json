{"files":[{"patch":"@@ -123,1 +123,1 @@\n-        validateBinaryClassName(packageName);\n+        validateBinaryPackageName(packageName);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/ClassDesc.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-        ConstantUtils.validateBinaryPackageName(requireNonNull(name));\n+        ConstantUtils.validateBinaryPackageName(name);\n@@ -78,1 +78,1 @@\n-        ConstantUtils.validateInternalPackageName(requireNonNull(name));\n+        ConstantUtils.validateInternalPackageName(name);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/constant\/PackageDesc.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -177,2 +177,3 @@\n-     * Validates the correctness of a binary class name. In particular checks for the presence of\n-     * invalid characters in the name.\n+     * Validates the correctness of a binary class name.\n+     * In particular checks for the presence of invalid characters, empty\n+     * name, consecutive, leading, or trailing {@code .}.\n@@ -186,1 +187,5 @@\n-        for (int i = 0; i < name.length(); i++) {\n+        \/\/ state variable for detection of illegal states, such as:\n+        \/\/ empty unqualified name, consecutive, leading, or trailing separators\n+        int afterSeparator = 0;\n+        int len = name.length();\n+        for (int i = 0; i < len; i++) {\n@@ -188,2 +193,2 @@\n-            if (ch == ';' || ch == '[' || ch == '\/'\n-                    || ch == '.' && (i == 0 || i + 1 == name.length() || name.charAt(i - 1) == '.'))\n+            \/\/ reject ';' or '[' or other form's separator\n+            if (ch == ';' || ch == '[' || ch == '\/')\n@@ -191,0 +196,7 @@\n+            if (ch == '.') {\n+                \/\/ illegal state when received separator indicates consecutive\n+                \/\/ or leading separators\n+                if (i == afterSeparator)\n+                    throw invalidClassName(name);\n+                afterSeparator = i + 1;\n+            }\n@@ -192,0 +204,3 @@\n+        \/\/ reject empty unqualified name or trailing separators\n+        if (len == afterSeparator)\n+            throw invalidClassName(name);\n@@ -197,1 +212,2 @@\n-     * In particular checks for the presence of invalid characters in the name.\n+     * In particular checks for the presence of invalid characters, empty\n+     * name, consecutive, leading, or trailing {@code \/}.\n@@ -205,1 +221,5 @@\n-        for (int i = 0; i < name.length(); i++) {\n+        \/\/ state variable for detection of illegal states, such as:\n+        \/\/ empty unqualified name, consecutive, leading, or trailing separators\n+        int afterSeparator = 0;\n+        int len = name.length();\n+        for (int i = 0; i < len; i++) {\n@@ -207,2 +227,2 @@\n-            if (ch == ';' || ch == '[' || ch == '.'\n-                    || ch == '\/' && (i == 0 || i + 1 == name.length() || name.charAt(i - 1) == '\/'))\n+            \/\/ reject ';' or '[' or other form's separator\n+            if (ch == ';' || ch == '[' || ch == '.')\n@@ -210,0 +230,7 @@\n+            if (ch == '\/') {\n+                \/\/ illegal state when received separator indicates consecutive\n+                \/\/ or leading separators\n+                if (i == afterSeparator)\n+                    throw invalidClassName(name);\n+                afterSeparator = i + 1;\n+            }\n@@ -211,0 +238,3 @@\n+        \/\/ reject empty unqualified name or trailing separators\n+        if (len == afterSeparator)\n+            throw invalidClassName(name);\n@@ -216,2 +246,2 @@\n-     * In particular checks for the presence of invalid characters in the name.\n-     * Empty package name is allowed.\n+     * In particular checks for the presence of invalid characters, consecutive,\n+     * leading, or trailing {@code .}.  Allows empty strings for the unnamed package.\n@@ -225,6 +255,4 @@\n-        for (int i = 0; i < name.length(); i++) {\n-            char ch = name.charAt(i);\n-            if (ch == ';' || ch == '[' || ch == '\/')\n-                throw new IllegalArgumentException(\"Invalid package name: \" + name);\n-        }\n-        return name;\n+        \/\/ the unnamed package + null check\n+        if (name.isEmpty())\n+            return name;\n+        return validateBinaryClassName(name);\n@@ -235,2 +263,2 @@\n-     * In particular checks for the presence of invalid characters in the name.\n-     * Empty package name is allowed.\n+     * In particular checks for the presence of invalid characters, consecutive,\n+     * leading, or trailing {@code \/}.  Allows empty strings for the unnamed package.\n@@ -244,6 +272,4 @@\n-        for (int i = 0; i < name.length(); i++) {\n-            char ch = name.charAt(i);\n-            if (ch == ';' || ch == '[' || ch == '.')\n-                throw new IllegalArgumentException(\"Invalid package name: \" + name);\n-        }\n-        return name;\n+        \/\/ the unnamed package + null check\n+        if (name.isEmpty())\n+            return name;\n+        return validateInternalClassName(name);\n@@ -428,1 +454,1 @@\n-                    boolean legal = false;\n+                    int afterSeparator = index + 1; \/\/ start of internal name\n@@ -430,7 +456,10 @@\n-                        switch (descriptor.charAt(index++)) {\n-                            case ';' -> {\n-                                \/\/ illegal state on parser exit indicates empty unqualified name or trailing '\/'\n-                                return legal ? index - start : 0;\n-                            }\n-                            case '.', '[' -> {\n-                                \/\/ do not permit '.' or '['\n+                        ch = descriptor.charAt(index++);\n+                        if (ch == ';')\n+                            \/\/ reject empty unqualified name or trailing '\/'\n+                            return index == afterSeparator ? 0 : index - start;\n+                        \/\/ reject '.' or '['\n+                        if (ch == '[' || ch == '.')\n+                            return 0;\n+                        if (ch == '\/') {\n+                            \/\/ illegal state when received '\/' indicates '\/\/' or leading '\/'\n+                            if (index == afterSeparator)\n@@ -438,8 +467,1 @@\n-                            }\n-                            case '\/' -> {\n-                                \/\/ illegal state when received '\/' indicates '\/\/' or leading '\/'\n-                                if (!legal) return 0;\n-                                legal = false;\n-                            }\n-                            default ->\n-                                legal = true;\n+                            afterSeparator = index + 1;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/ConstantUtils.java","additions":63,"deletions":41,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -282,1 +282,2 @@\n-                                              \"Ljava.lang.String;\", \"java\/lang\/String\");\n+                                              \"Ljava.lang.String;\", \"java\/lang\/String\", \"L;\",\n+                                              \"La\/\/b;\", \"L\/a;\", \"La\/;\");\n@@ -295,1 +296,1 @@\n-                \"Ljava.lang.String;\", \"java\/lang\/String\");\n+                \"Ljava.lang.String;\", \"java\/lang\/String\", \"\");\n@@ -306,1 +307,1 @@\n-                \"Ljava.lang.String;\", \"java.lang.String\");\n+                \"Ljava.lang.String;\", \"java.lang.String\", \"\");\n","filename":"test\/jdk\/java\/lang\/constant\/ClassDescTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,1 @@\n-    @ValueSource(strings = {\"a\/b.d\", \"a[]\", \"a;\"})\n+    @ValueSource(strings = {\"a\/b.d\", \"a[]\", \"a;\", \"a..b\", \"a.b.\", \".a.b\"})\n@@ -44,1 +44,1 @@\n-    @ValueSource(strings = {\"a\/b.d\", \"a[]\", \"a;\"})\n+    @ValueSource(strings = {\"a\/b.d\", \"a[]\", \"a;\", \"a\/\/b\", \"a\/b\/\", \"\/a\/b\"})\n","filename":"test\/jdk\/java\/lang\/constant\/PackageDescTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}