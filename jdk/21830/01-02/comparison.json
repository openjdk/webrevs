{"files":[{"patch":"@@ -177,3 +177,5 @@\n-     * Validates the correctness of a binary class name.\n-     * In particular checks for the presence of invalid characters, empty\n-     * name, consecutive, leading, or trailing {@code .}.\n+     * Validates the correctness of a path-based name, which is a class or\n+     * interface name or a package name.\n+     * In particular checks for the presence of invalid characters,\n+     * consecutive, leading, or trailing separator char,\n+     * and the empty string for class or interface names.\n@@ -181,4 +183,7 @@\n-     * @param name the class name\n-     * @return the class name passed if valid\n-     * @throws IllegalArgumentException if the class name is invalid\n-     * @throws NullPointerException if class name is {@code null}\n+     * @param name the name\n+     * @param usesSlash {@code true} means {@code \/} is the separator char,\n+     *     otherwise {@code .} is the separator char\n+     * @param allowsEmpty {@code true} means the empty string is a valid name\n+     * @return the name passed if valid\n+     * @throws IllegalArgumentException if the name is invalid\n+     * @throws NullPointerException if name is {@code null}\n@@ -186,3 +191,7 @@\n-    public static String validateBinaryClassName(String name) {\n-        \/\/ state variable for detection of illegal states, such as:\n-        \/\/ empty unqualified name, consecutive, leading, or trailing separators\n+    private static String validatePathBasedName(String name, boolean usesSlash, boolean allowsEmpty) {\n+        int len = name.length();  \/\/ implicit null check\n+        \/\/ empty name special rule\n+        if (allowsEmpty && len == 0)\n+            return name;\n+        \/\/ state variable for detection of illegal states of\n+        \/\/ empty name, consecutive, leading, or trailing separators\n@@ -190,1 +199,0 @@\n-        int len = name.length();\n@@ -193,2 +201,2 @@\n-            \/\/ reject ';' or '[' or other form's separator\n-            if (ch == ';' || ch == '[' || ch == '\/')\n+            \/\/ reject ';' or '['\n+            if (ch == ';' || ch == '[')\n@@ -196,4 +204,6 @@\n-            if (ch == '.') {\n-                \/\/ illegal state when received separator indicates consecutive\n-                \/\/ or leading separators\n-                if (i == afterSeparator)\n+            \/\/ encounter a separator\n+            boolean foundSlash = ch == '\/';\n+            if (foundSlash || ch == '.') {\n+                \/\/ reject the other separator char\n+                \/\/ reject consecutive or leading separators\n+                if (foundSlash != usesSlash || i == afterSeparator)\n@@ -204,1 +214,1 @@\n-        \/\/ reject empty unqualified name or trailing separators\n+        \/\/ reject empty name or trailing separators\n@@ -210,0 +220,14 @@\n+    \/**\n+     * Validates the correctness of a binary class name.\n+     * In particular checks for the presence of invalid characters, empty\n+     * name, consecutive, leading, or trailing {@code .}.\n+     *\n+     * @param name the class name\n+     * @return the class name passed if valid\n+     * @throws IllegalArgumentException if the class name is invalid\n+     * @throws NullPointerException if class name is {@code null}\n+     *\/\n+    public static String validateBinaryClassName(String name) {\n+        return validatePathBasedName(name, false, false);\n+    }\n+\n@@ -221,21 +245,1 @@\n-        \/\/ state variable for detection of illegal states, such as:\n-        \/\/ empty unqualified name, consecutive, leading, or trailing separators\n-        int afterSeparator = 0;\n-        int len = name.length();\n-        for (int i = 0; i < len; i++) {\n-            char ch = name.charAt(i);\n-            \/\/ reject ';' or '[' or other form's separator\n-            if (ch == ';' || ch == '[' || ch == '.')\n-                throw invalidClassName(name);\n-            if (ch == '\/') {\n-                \/\/ illegal state when received separator indicates consecutive\n-                \/\/ or leading separators\n-                if (i == afterSeparator)\n-                    throw invalidClassName(name);\n-                afterSeparator = i + 1;\n-            }\n-        }\n-        \/\/ reject empty unqualified name or trailing separators\n-        if (len == afterSeparator)\n-            throw invalidClassName(name);\n-        return name;\n+        return validatePathBasedName(name, true, false);\n@@ -255,4 +259,1 @@\n-        \/\/ the unnamed package + null check\n-        if (name.isEmpty())\n-            return name;\n-        return validateBinaryClassName(name);\n+        return validatePathBasedName(name, false, true);\n@@ -272,4 +273,1 @@\n-        \/\/ the unnamed package + null check\n-        if (name.isEmpty())\n-            return name;\n-        return validateInternalClassName(name);\n+        return validatePathBasedName(name, true, true);\n@@ -452,2 +450,2 @@\n-                    \/\/ state variable for detection of illegal states, such as:\n-                    \/\/ empty unqualified name, '\/\/', leading '\/', or trailing '\/'\n+                    \/\/ state variable for detection of illegal states of\n+                    \/\/ empty name, '\/\/', leading '\/', or trailing '\/'\n@@ -458,1 +456,1 @@\n-                            \/\/ reject empty unqualified name or trailing '\/'\n+                            \/\/ reject empty name or trailing '\/'\n@@ -461,1 +459,1 @@\n-                        if (ch == '[' || ch == '.')\n+                        if (ch == '.' || ch == '[')\n@@ -464,1 +462,1 @@\n-                            \/\/ illegal state when received '\/' indicates '\/\/' or leading '\/'\n+                            \/\/ reject '\/\/' or leading '\/'\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/constant\/ConstantUtils.java","additions":50,"deletions":52,"binary":false,"changes":102,"status":"modified"}]}