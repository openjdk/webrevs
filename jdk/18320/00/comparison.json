{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1052,1 +1052,1 @@\n-    address start = address(r.start());\n+    address start = address(r.start()); \/\/ start of the current oop inside the buffer\n@@ -1085,1 +1085,1 @@\n-        log_oop_details(heap_info, source_oop);\n+        log_oop_details(heap_info, source_oop, \/*buffered_addr=*\/start);\n@@ -1100,0 +1100,1 @@\n+    address _buffered_addr;\n@@ -1101,2 +1102,2 @@\n-    ArchivedFieldPrinter(ArchiveHeapInfo* heap_info, outputStream* st, oop src_obj) :\n-      _heap_info(heap_info), _st(st), _source_obj(src_obj) {}\n+    ArchivedFieldPrinter(ArchiveHeapInfo* heap_info, outputStream* st, oop src_obj, address buffered_addr) :\n+      _heap_info(heap_info), _st(st), _source_obj(src_obj), _buffered_addr(buffered_addr) {}\n@@ -1117,1 +1118,1 @@\n-          fd->print_on_for(_st, _source_obj); \/\/ name, offset, value\n+          fd->print_on_for(_st, cast_to_oop(_buffered_addr)); \/\/ name, offset, value\n@@ -1149,1 +1150,1 @@\n-  static void log_oop_details(ArchiveHeapInfo* heap_info, oop source_oop) {\n+  static void log_oop_details(ArchiveHeapInfo* heap_info, oop source_oop, address buffered_addr) {\n@@ -1171,1 +1172,1 @@\n-        ArchivedFieldPrinter print_field(heap_info, &st, source_oop);\n+        ArchivedFieldPrinter print_field(heap_info, &st, source_oop, buffered_addr);\n","filename":"src\/hotspot\/share\/cds\/archiveBuilder.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -178,0 +178,4 @@\n+    \/\/ (injected module_entry)\n+    \/\/  - injected 'module_entry' 'J' @16 0 (0x0000000000000000)\n+    static Pattern moduleEntryPattern = Pattern.compile(\"- injected 'module_entry' 'J' @[0-9]+[ ]+([0-9]+)\");\n+\n@@ -221,0 +225,5 @@\n+                    } else if ((m = match(line, moduleEntryPattern)) != null) {\n+                        String value = m.group(1);\n+                        if (!value.equals(\"0\")) {\n+                            throw new RuntimeException(\"module_entry should be 0 but found: \" + line);\n+                        }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/CDSMapReader.java","additions":10,"deletions":1,"binary":false,"changes":11,"status":"modified"}]}