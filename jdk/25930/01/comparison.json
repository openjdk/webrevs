{"files":[{"patch":"@@ -622,2 +622,1 @@\n-void ReferenceProcessor::balance_queues(DiscoveredList ref_lists[])\n-{\n+void ReferenceProcessor::balance_queues(DiscoveredList ref_lists[]) {\n@@ -636,3 +635,4 @@\n-    bool move_all = false;\n-    if (from_idx >= _num_queues) {\n-      move_all = ref_lists[from_idx].length() > 0;\n+    size_t from_len = ref_lists[from_idx].length();\n+    if (from_len == 0) {\n+      \/\/ empty\n+      continue;\n@@ -640,2 +640,7 @@\n-    while ((ref_lists[from_idx].length() > avg_refs) ||\n-           move_all) {\n+\n+    bool move_all = (from_idx >= _num_queues);\n+    size_t remaining_to_move = move_all\n+      ? from_len\n+      : (from_len > avg_refs ? from_len - avg_refs : 0);\n+\n+    while (remaining_to_move > 0) {\n@@ -643,44 +648,23 @@\n-      if (ref_lists[to_idx].length() < avg_refs) {\n-        \/\/ move superfluous refs\n-        size_t refs_to_move;\n-        \/\/ Move all the Ref's if the from queue will not be processed.\n-        if (move_all) {\n-          refs_to_move = MIN2(ref_lists[from_idx].length(),\n-                              avg_refs - ref_lists[to_idx].length());\n-        } else {\n-          refs_to_move = MIN2(ref_lists[from_idx].length() - avg_refs,\n-                              avg_refs - ref_lists[to_idx].length());\n-        }\n-\n-        assert(refs_to_move > 0, \"otherwise the code below will fail\");\n-\n-        oop move_head = ref_lists[from_idx].head();\n-        oop move_tail = move_head;\n-        oop new_head  = move_head;\n-        \/\/ find an element to split the list on\n-        for (size_t j = 0; j < refs_to_move; ++j) {\n-          move_tail = new_head;\n-          new_head = java_lang_ref_Reference::discovered(new_head);\n-        }\n-\n-        \/\/ Add the chain to the to list.\n-        if (ref_lists[to_idx].head() == nullptr) {\n-          \/\/ to list is empty. Make a loop at the end.\n-          java_lang_ref_Reference::set_discovered_raw(move_tail, move_tail);\n-        } else {\n-          java_lang_ref_Reference::set_discovered_raw(move_tail, ref_lists[to_idx].head());\n-        }\n-        ref_lists[to_idx].set_head(move_head);\n-        ref_lists[to_idx].inc_length(refs_to_move);\n-\n-        \/\/ Remove the chain from the from list.\n-        if (move_tail == new_head) {\n-          \/\/ We found the end of the from list.\n-          ref_lists[from_idx].set_head(nullptr);\n-        } else {\n-          ref_lists[from_idx].set_head(new_head);\n-        }\n-        ref_lists[from_idx].dec_length(refs_to_move);\n-        if (ref_lists[from_idx].length() == 0) {\n-          break;\n-        }\n+\n+      size_t to_len = ref_lists[to_idx].length();\n+      if (to_len >= avg_refs) {\n+        \/\/ this list is full enough; move on to next\n+        to_idx++;\n+        continue;\n+      }\n+      size_t refs_to_move = MIN2(remaining_to_move, avg_refs - to_len);\n+      assert(refs_to_move > 0, \"otherwise the code below will fail\");\n+\n+      oop move_head = ref_lists[from_idx].head();\n+      oop move_tail = move_head;\n+      oop new_head  = move_head;\n+      \/\/ find an element to split the list on\n+      for (size_t j = 0; j < refs_to_move; ++j) {\n+        move_tail = new_head;\n+        new_head = java_lang_ref_Reference::discovered(new_head);\n+      }\n+\n+      \/\/ Add the chain to the to list.\n+      if (ref_lists[to_idx].head() == nullptr) {\n+        \/\/ to list is empty. Make a loop at the end.\n+        java_lang_ref_Reference::set_discovered_raw(move_tail, move_tail);\n@@ -688,1 +672,1 @@\n-        to_idx = (to_idx + 1) % _num_queues;\n+        java_lang_ref_Reference::set_discovered_raw(move_tail, ref_lists[to_idx].head());\n@@ -690,0 +674,13 @@\n+      ref_lists[to_idx].set_head(move_head);\n+      ref_lists[to_idx].inc_length(refs_to_move);\n+\n+      \/\/ Remove the chain from the from list.\n+      if (move_tail == new_head) {\n+        \/\/ We found the end of the from list.\n+        ref_lists[from_idx].set_head(nullptr);\n+      } else {\n+        ref_lists[from_idx].set_head(new_head);\n+      }\n+      ref_lists[from_idx].dec_length(refs_to_move);\n+\n+      remaining_to_move -= refs_to_move;\n","filename":"src\/hotspot\/share\/gc\/shared\/referenceProcessor.cpp","additions":49,"deletions":52,"binary":false,"changes":101,"status":"modified"}]}