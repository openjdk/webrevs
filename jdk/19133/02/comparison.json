{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -121,1 +121,1 @@\n-        if (sp == -1 || !auth.substring(0, sp).equals (\"Basic\")) {\n+        if (sp == -1 || !auth.substring(0, sp).equalsIgnoreCase(\"Basic\")) {\n","filename":"src\/jdk.httpserver\/share\/classes\/com\/sun\/net\/httpserver\/BasicAuthenticator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,118 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8144100\n+ * @summary checking token sent by client should be done in case-insensitive manner\n+ * @run main BasicAuthToken\n+ *\/\n+\n+import java.io.BufferedReader;\n+import java.io.BufferedWriter;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.Socket;\n+import java.util.Base64;\n+import com.sun.net.httpserver.Authenticator;\n+import com.sun.net.httpserver.BasicAuthenticator;\n+import com.sun.net.httpserver.HttpServer;\n+\n+public class BasicAuthToken {\n+    private static final String CRLF = \"\\r\\n\";\n+    private static final String someContext = \"\/test\";\n+\n+    public static void main(String[] args) throws Exception {\n+        HttpServer server = server();\n+        try {\n+            client(server.getAddress().getPort());\n+        } finally {\n+            server.stop(0);\n+        }\n+    }\n+\n+    static HttpServer server() throws Exception {\n+        String realm = \"someRealm\";\n+        ServerAuthenticator authenticator = new ServerAuthenticator(realm);\n+        HttpServer server = HttpServer.create(new InetSocketAddress(InetAddress.getLoopbackAddress(), 0), 0);\n+        server.createContext(someContext, exchange -> {\n+            if (authenticator.authenticate(exchange) instanceof Authenticator.Failure) {\n+                exchange.sendResponseHeaders(401, -1);\n+                exchange.close();\n+                return;\n+            }\n+            exchange.sendResponseHeaders(200, -1);\n+            exchange.close();\n+        }).setAuthenticator(authenticator);\n+        server.start();\n+        return server;\n+    }\n+\n+    static void client(int port) throws Exception {\n+        try (Socket socket = new Socket(InetAddress.getLoopbackAddress(), port)) {\n+            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));\n+            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n+            String credentials = \"username:password\";\n+            String encodedCredentials = Base64.getEncoder().encodeToString(credentials.getBytes());\n+            writer.write(\"GET \" + someContext + \" HTTP\/1.1\" + CRLF);\n+            writer.write(\"Host: localhost:\" + port + CRLF);\n+            writer.write(\"User-Agent: Java\/\" + System.getProperty(\"java.version\") + CRLF);\n+            writer.write(\"Authorization: BAsIc \" + encodedCredentials + CRLF);\n+            writer.write(CRLF);\n+            writer.flush();\n+\n+            System.err.println(\"Server response\");\n+            String statusLine = reader.readLine();\n+            System.err.println(statusLine);\n+\n+            if (!statusLine.startsWith(\"HTTP\/1.1 200\")) {\n+                throw new RuntimeException(\"unexpected status line: \" + statusLine);\n+            }\n+            if (!ServerAuthenticator.wasChecked()) {\n+                throw new RuntimeException(\"Authenticator wasn't invoked\");\n+            }\n+        }\n+    }\n+\n+\n+    static class ServerAuthenticator extends BasicAuthenticator {\n+        private static volatile boolean invoked = false;\n+\n+        ServerAuthenticator(String realm) {\n+            super(realm);\n+        }\n+\n+        public static boolean wasChecked() {\n+            return invoked;\n+        }\n+\n+        @Override\n+        public boolean checkCredentials(String username, String password) {\n+            String validUsername = \"username\", validPassword = \"password\";\n+            invoked = true;\n+            return username.equals(validUsername) && password.equals(validPassword);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/BasicAuthToken.java","additions":118,"deletions":0,"binary":false,"changes":118,"status":"added"}]}