{"files":[{"patch":"@@ -13758,1 +13758,0 @@\n-  attributes.reset_is_clear_context();\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1466,1 +1466,1 @@\n-      if (!VM_Version::supports_avx512bw()) {\n+      if (!VM_Version::supports_avx512vlbw()) {\n@@ -1468,1 +1468,1 @@\n-      }\n+      }  \/\/ fallthrough\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx512_fp16.*\" & vm.cpu.features ~= \".*avx512bw.*\")\n+ * @requires (os.simpleArch == \"x64\" & vm.cpu.features ~= \".*avx512_fp16.*\" & vm.cpu.features ~= \".*avx512bw.*\" & vm.cpu.features ~= \".*avx512vl.*\")\n@@ -43,0 +43,1 @@\n+    public static Float16 SRC = Float16.valueOf(Float.MAX_VALUE);\n@@ -57,1 +58,0 @@\n-    @Warmup(1000)\n@@ -59,6 +59,3 @@\n-        for (int i = 0; i < 10000; i++) {\n-            Float16 SRC = Float16.valueOf(i);\n-            RES = testMaxNaNOperands(SRC, Float16.NaN);\n-            if (!RES.equals(Float16.NaN)) {\n-                throw new AssertionError(\"input1 = NaN, input2 = \" + SRC.floatValue() + \", expected = NaN, actual = \" + RES.floatValue());\n-            }\n+        RES = testMaxNaNOperands(SRC, Float16.NaN);\n+        if (!RES.equals(Float16.NaN)) {\n+            throw new AssertionError(\"input1 = \" + SRC.floatValue() + \" input2 = NaN , expected = NaN, actual = \" + RES.floatValue());\n@@ -66,6 +63,3 @@\n-        for (int i = 0; i < 10000; i++) {\n-            Float16 SRC = Float16.valueOf(i);\n-            RES = testMaxNaNOperands(Float16.NaN, SRC);\n-            if (!RES.equals(Float16.NaN)) {\n-                throw new AssertionError(\"input1 = NaN, input2 = \" + SRC.floatValue() + \", expected = NaN, actual = \" + RES.floatValue());\n-            }\n+        RES = testMaxNaNOperands(Float16.NaN, SRC);\n+        if (!RES.equals(Float16.NaN)) {\n+            throw new AssertionError(\"input1 = NaN, input2 = \" + SRC.floatValue() + \", expected = NaN, actual = \" + RES.floatValue());\n@@ -73,5 +67,3 @@\n-        for (int i = 0; i < 10000; i++) {\n-            RES = testMaxNaNOperands(Float16.NaN, Float16.NaN);\n-            if (!RES.equals(Float16.NaN)) {\n-                throw new AssertionError(\"input1 = NaN, input2 = NaN, expected = NaN, actual = \" + RES.floatValue());\n-            }\n+        RES = testMaxNaNOperands(Float16.NaN, Float16.NaN);\n+        if (!RES.equals(Float16.NaN)) {\n+            throw new AssertionError(\"input1 = NaN, input2 = NaN, expected = NaN, actual = \" + RES.floatValue());\n@@ -88,1 +80,0 @@\n-    @Warmup(1000)\n@@ -90,6 +81,3 @@\n-        for (int i = 0; i < 10000; i++) {\n-            Float16 SRC = Float16.valueOf(i);\n-            RES = testMinNaNOperands(SRC, Float16.NaN);\n-            if (!RES.equals(Float16.NaN)) {\n-                throw new AssertionError(\"input1 = NaN, input2 = \" + SRC.floatValue() + \", expected = NaN, actual = \" + RES.floatValue());\n-            }\n+        RES = testMinNaNOperands(SRC, Float16.NaN);\n+        if (!RES.equals(Float16.NaN)) {\n+            throw new AssertionError(\"input1 = \" + SRC.floatValue() + \" input2 = NaN, expected = NaN, actual = \" + RES.floatValue());\n@@ -97,6 +85,3 @@\n-        for (int i = 0; i < 10000; i++) {\n-            Float16 SRC = Float16.valueOf(i);\n-            RES = testMinNaNOperands(Float16.NaN, SRC);\n-            if (!RES.equals(Float16.NaN)) {\n-                throw new AssertionError(\"input1 = NaN, input2 = \" + SRC.floatValue() + \", expected = NaN, actual = \" + RES.floatValue());\n-            }\n+        RES = testMinNaNOperands(Float16.NaN, SRC);\n+        if (!RES.equals(Float16.NaN)) {\n+            throw new AssertionError(\"input1 = NaN, input2 = \" + SRC.floatValue() + \", expected = NaN, actual = \" + RES.floatValue());\n@@ -104,5 +89,3 @@\n-        for (int i = 0; i < 10000; i++) {\n-            RES = testMinNaNOperands(Float16.NaN, Float16.NaN);\n-            if (!RES.equals(Float16.NaN)) {\n-                throw new AssertionError(\"input1 = NaN, input2 = NaN, expected = NaN, actual = \" + RES.floatValue());\n-            }\n+        RES = testMinNaNOperands(Float16.NaN, Float16.NaN);\n+        if (!RES.equals(Float16.NaN)) {\n+            throw new AssertionError(\"input1 = NaN, input2 = NaN, expected = NaN, actual = \" + RES.floatValue());\n@@ -119,1 +102,0 @@\n-    @Warmup(1000)\n@@ -121,5 +103,3 @@\n-        for (int i = 0; i < 10000; i++) {\n-            RES = testMaxZeroOperands(POS_ZERO, NEG_ZERO);\n-            if (!RES.equals(POS_ZERO)) {\n-                throw new AssertionError(\"input1 = +0.0, input2 = -0.0, expected = +0.0, actual = \" + RES.floatValue());\n-            }\n+        RES = testMaxZeroOperands(POS_ZERO, NEG_ZERO);\n+        if (!RES.equals(POS_ZERO)) {\n+            throw new AssertionError(\"input1 = +0.0, input2 = -0.0, expected = +0.0, actual = \" + RES.floatValue());\n@@ -127,6 +107,3 @@\n-        for (int i = 0; i < 10000; i++) {\n-            Float16 SRC = Float16.valueOf(i);\n-            RES = testMaxZeroOperands(NEG_ZERO, POS_ZERO);\n-            if (!RES.equals(POS_ZERO)) {\n-                throw new AssertionError(\"input1 = -0.0, input2 = +0.0, expected = +0.0, actual = \" + RES.floatValue());\n-            }\n+        RES = testMaxZeroOperands(NEG_ZERO, POS_ZERO);\n+        if (!RES.equals(POS_ZERO)) {\n+            throw new AssertionError(\"input1 = -0.0, input2 = +0.0, expected = +0.0, actual = \" + RES.floatValue());\n@@ -134,6 +111,3 @@\n-        for (int i = 0; i < 10000; i++) {\n-            Float16 SRC = Float16.valueOf(i);\n-            RES = testMaxZeroOperands(POS_ZERO, POS_ZERO);\n-            if (!RES.equals(POS_ZERO)) {\n-                throw new AssertionError(\"input1 = +0.0, input2 = +0.0, expected = +0.0, actual = \" + RES.floatValue());\n-            }\n+        RES = testMaxZeroOperands(POS_ZERO, POS_ZERO);\n+        if (!RES.equals(POS_ZERO)) {\n+            throw new AssertionError(\"input1 = +0.0, input2 = +0.0, expected = +0.0, actual = \" + RES.floatValue());\n@@ -141,6 +115,3 @@\n-        for (int i = 0; i < 10000; i++) {\n-            Float16 SRC = Float16.valueOf(i);\n-            RES = testMaxZeroOperands(NEG_ZERO, NEG_ZERO);\n-            if (!RES.equals(NEG_ZERO)) {\n-                throw new AssertionError(\"input1 = -0.0, input2 = -0.0, expected = -0.0, actual = \" + RES.floatValue());\n-            }\n+        RES = testMaxZeroOperands(NEG_ZERO, NEG_ZERO);\n+        if (!RES.equals(NEG_ZERO)) {\n+            throw new AssertionError(\"input1 = -0.0, input2 = -0.0, expected = -0.0, actual = \" + RES.floatValue());\n@@ -157,1 +128,0 @@\n-    @Warmup(1000)\n@@ -159,5 +129,3 @@\n-        for (int i = 0; i < 10000; i++) {\n-            RES = testMinZeroOperands(POS_ZERO, NEG_ZERO);\n-            if (!RES.equals(NEG_ZERO)) {\n-                throw new AssertionError(\"input1 = +0.0, input2 = -0.0, expected = -0.0, actual = \" + RES.floatValue());\n-            }\n+        RES = testMinZeroOperands(POS_ZERO, NEG_ZERO);\n+        if (!RES.equals(NEG_ZERO)) {\n+            throw new AssertionError(\"input1 = +0.0, input2 = -0.0, expected = -0.0, actual = \" + RES.floatValue());\n@@ -165,6 +133,4 @@\n-        for (int i = 0; i < 10000; i++) {\n-            Float16 SRC = Float16.valueOf(i);\n-            RES = testMinZeroOperands(NEG_ZERO, POS_ZERO);\n-            if (!RES.equals(NEG_ZERO)) {\n-                throw new AssertionError(\"input1 = -0.0, input2 = +0.0, expected = -0.0, actual = \" + RES.floatValue());\n-            }\n+\n+        RES = testMinZeroOperands(NEG_ZERO, POS_ZERO);\n+        if (!RES.equals(NEG_ZERO)) {\n+            throw new AssertionError(\"input1 = -0.0, input2 = +0.0, expected = -0.0, actual = \" + RES.floatValue());\n@@ -172,6 +138,4 @@\n-        for (int i = 0; i < 10000; i++) {\n-            Float16 SRC = Float16.valueOf(i);\n-            RES = testMinZeroOperands(POS_ZERO, POS_ZERO);\n-            if (!RES.equals(POS_ZERO)) {\n-                throw new AssertionError(\"input1 = +0.0, input2 = +0.0, expected = +0.0, actual = \" + RES.floatValue());\n-            }\n+\n+        RES = testMinZeroOperands(POS_ZERO, POS_ZERO);\n+        if (!RES.equals(POS_ZERO)) {\n+            throw new AssertionError(\"input1 = +0.0, input2 = +0.0, expected = +0.0, actual = \" + RES.floatValue());\n@@ -179,6 +143,4 @@\n-        for (int i = 0; i < 10000; i++) {\n-            Float16 SRC = Float16.valueOf(i);\n-            RES = testMinZeroOperands(NEG_ZERO, NEG_ZERO);\n-            if (!RES.equals(NEG_ZERO)) {\n-                throw new AssertionError(\"input1 = -0.0, input2 = -0.0, expected = -0.0, actual = \" + RES.floatValue());\n-            }\n+\n+        RES = testMinZeroOperands(NEG_ZERO, NEG_ZERO);\n+        if (!RES.equals(NEG_ZERO)) {\n+            throw new AssertionError(\"input1 = -0.0, input2 = -0.0, expected = -0.0, actual = \" + RES.floatValue());\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/float16\/TestFloat16MaxMinSpecialValues.java","additions":47,"deletions":85,"binary":false,"changes":132,"status":"modified"}]}