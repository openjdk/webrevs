{"files":[{"patch":"@@ -27,0 +27,2 @@\n+import java.util.Random;\n+import jdk.test.lib.*;\n@@ -42,0 +44,17 @@\n+    public static Random rd = Utils.getRandomInstance();\n+\n+    public static Float16 genNaN() {\n+        \/\/ IEEE 754 Half Precision QNaN Format\n+        \/\/ S EEEEE MMMMMMMMMM\n+        \/\/ X 11111 1XXXXXXXXX\n+        short sign = (short)(rd.nextBoolean() ? 1 << 15 : 0);\n+        short significand = (short)rd.nextInt(512);\n+        return Float16.shortBitsToFloat16((short)(sign | 0x7E00 | significand));\n+    }\n+\n+    public static boolean assertionCheck(Float16 actual, Float16 expected) {\n+        if (Float16.isNaN(actual) && Float16.isNaN(expected)) {\n+            return false;\n+        }\n+        return !actual.equals(expected);\n+    }\n@@ -57,11 +76,17 @@\n-        RES = testMaxNaNOperands(SRC, Float16.NaN);\n-        if (!RES.equals(Float16.NaN)) {\n-            throw new AssertionError(\"input1 = \" + SRC.floatValue() + \" input2 = NaN , expected = NaN, actual = \" + RES.floatValue());\n-        }\n-        RES = testMaxNaNOperands(Float16.NaN, SRC);\n-        if (!RES.equals(Float16.NaN)) {\n-            throw new AssertionError(\"input1 = NaN, input2 = \" + SRC.floatValue() + \", expected = NaN, actual = \" + RES.floatValue());\n-        }\n-        RES = testMaxNaNOperands(Float16.NaN, Float16.NaN);\n-        if (!RES.equals(Float16.NaN)) {\n-            throw new AssertionError(\"input1 = NaN, input2 = NaN, expected = NaN, actual = \" + RES.floatValue());\n+        Float16 NAN = null;\n+        for (int i = 0; i < 100; i++) {\n+            NAN = genNaN();\n+            RES = testMaxNaNOperands(SRC, NAN);\n+            if (assertionCheck(RES, NAN)) {\n+                throw new AssertionError(\"input1 = \" + SRC.floatValue() + \" input2 = NaN , expected = NaN, actual = \" + RES.floatValue());\n+            }\n+            NAN = genNaN();\n+            RES = testMaxNaNOperands(NAN, SRC);\n+            if (assertionCheck(RES, NAN)) {\n+                throw new AssertionError(\"input1 = NaN, input2 = \" + SRC.floatValue() + \", expected = NaN, actual = \" + RES.floatValue());\n+            }\n+            NAN = genNaN();\n+            RES = testMaxNaNOperands(NAN, NAN);\n+            if (assertionCheck(RES, NAN)) {\n+                throw new AssertionError(\"input1 = NaN, input2 = NaN, expected = NaN, actual = \" + RES.floatValue());\n+            }\n@@ -79,11 +104,17 @@\n-        RES = testMinNaNOperands(SRC, Float16.NaN);\n-        if (!RES.equals(Float16.NaN)) {\n-            throw new AssertionError(\"input1 = \" + SRC.floatValue() + \" input2 = NaN, expected = NaN, actual = \" + RES.floatValue());\n-        }\n-        RES = testMinNaNOperands(Float16.NaN, SRC);\n-        if (!RES.equals(Float16.NaN)) {\n-            throw new AssertionError(\"input1 = NaN, input2 = \" + SRC.floatValue() + \", expected = NaN, actual = \" + RES.floatValue());\n-        }\n-        RES = testMinNaNOperands(Float16.NaN, Float16.NaN);\n-        if (!RES.equals(Float16.NaN)) {\n-            throw new AssertionError(\"input1 = NaN, input2 = NaN, expected = NaN, actual = \" + RES.floatValue());\n+        Float16 NAN = null;\n+        for (int i = 0; i < 100; i++) {\n+            NAN = genNaN();\n+            RES = testMinNaNOperands(SRC, NAN);\n+            if (assertionCheck(RES, NAN)) {\n+                throw new AssertionError(\"input1 = \" + SRC.floatValue() + \" input2 = NaN, expected = NaN, actual = \" + RES.floatValue());\n+            }\n+            NAN = genNaN();\n+            RES = testMinNaNOperands(NAN, SRC);\n+            if (assertionCheck(RES, NAN)) {\n+                throw new AssertionError(\"input1 = NaN, input2 = \" + SRC.floatValue() + \", expected = NaN, actual = \" + RES.floatValue());\n+            }\n+            NAN = genNaN();\n+            RES = testMinNaNOperands(NAN, NAN);\n+            if (assertionCheck(RES, NAN)) {\n+                throw new AssertionError(\"input1 = NaN, input2 = NaN, expected = NaN, actual = \" + RES.floatValue());\n+            }\n@@ -102,1 +133,1 @@\n-        if (!RES.equals(POS_ZERO)) {\n+        if (assertionCheck(RES, POS_ZERO)) {\n@@ -106,1 +137,1 @@\n-        if (!RES.equals(POS_ZERO)) {\n+        if (assertionCheck(RES, POS_ZERO)) {\n@@ -110,1 +141,1 @@\n-        if (!RES.equals(POS_ZERO)) {\n+        if (assertionCheck(RES, POS_ZERO)) {\n@@ -114,1 +145,1 @@\n-        if (!RES.equals(NEG_ZERO)) {\n+        if (assertionCheck(RES, NEG_ZERO)) {\n@@ -128,1 +159,1 @@\n-        if (!RES.equals(NEG_ZERO)) {\n+        if (assertionCheck(RES, NEG_ZERO)) {\n@@ -133,1 +164,1 @@\n-        if (!RES.equals(NEG_ZERO)) {\n+        if (assertionCheck(RES, NEG_ZERO)) {\n@@ -138,1 +169,1 @@\n-        if (!RES.equals(POS_ZERO)) {\n+        if (assertionCheck(RES, POS_ZERO)) {\n@@ -143,1 +174,1 @@\n-        if (!RES.equals(NEG_ZERO)) {\n+        if (assertionCheck(RES, NEG_ZERO)) {\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/float16\/TestFloat16MaxMinSpecialValues.java","additions":61,"deletions":30,"binary":false,"changes":91,"status":"modified"}]}