{"files":[{"patch":"@@ -1539,4 +1539,1 @@\n-      bool too_many_traps = C->too_many_traps(method(), block()->start(),\n-                                              Deoptimization::Reason_unreached);\n-      assert(StressPrunedExceptionHandlers || !too_many_traps, \"too many traps. missing profiling somewhere?\");\n-      if ((!data.ex_handler_entered() && !too_many_traps) || StressPrunedExceptionHandlers) {\n+      if (!data.ex_handler_entered() || StressPrunedExceptionHandlers) {\n","filename":"src\/hotspot\/share\/opto\/parse1.cpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1501,15 +1501,15 @@\n-static bool monitors_on_stack(JavaThread* thread) {\n-  ContinuationEntry* ce = thread->last_continuation();\n-  RegisterMap map(thread,\n-                  RegisterMap::UpdateMap::include,\n-                  RegisterMap::ProcessFrames::include,\n-                  RegisterMap::WalkContinuation::skip);\n-  map.set_include_argument_oops(false);\n-  for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n-    if ((f.is_interpreted_frame() && ContinuationHelper::InterpretedFrame::is_owning_locks(f)) ||\n-        (f.is_compiled_frame() && ContinuationHelper::CompiledFrame::is_owning_locks(map.thread(), &map, f))) {\n-      return true;\n-    }\n-  }\n-  return false;\n-}\n+\/\/ static bool monitors_on_stack(JavaThread* thread) {\n+\/\/   ContinuationEntry* ce = thread->last_continuation();\n+\/\/   RegisterMap map(thread,\n+\/\/                   RegisterMap::UpdateMap::include,\n+\/\/                   RegisterMap::ProcessFrames::include,\n+\/\/                   RegisterMap::WalkContinuation::skip);\n+\/\/   map.set_include_argument_oops(false);\n+\/\/   for (frame f = thread->last_frame(); Continuation::is_frame_in_continuation(ce, f); f = f.sender(&map)) {\n+\/\/     if ((f.is_interpreted_frame() && ContinuationHelper::InterpretedFrame::is_owning_locks(f)) ||\n+\/\/         (f.is_compiled_frame() && ContinuationHelper::CompiledFrame::is_owning_locks(map.thread(), &map, f))) {\n+\/\/       return true;\n+\/\/     }\n+\/\/   }\n+\/\/   return false;\n+\/\/ }\n","filename":"src\/hotspot\/share\/runtime\/continuationFreezeThaw.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"}]}