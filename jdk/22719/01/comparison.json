{"files":[{"patch":"@@ -572,3 +572,2 @@\n-     * <p> If the endpoint is an unresolved {@link InetSocketAddress}, or the\n-     * connection cannot be established, then the socket is closed, and an\n-     * {@link IOException} is thrown.\n+     * <p> If the connection cannot be established, then the socket is closed,\n+     * and an {@link IOException} is thrown.\n@@ -594,2 +593,2 @@\n-     * @throws  UnknownHostException if the endpoint is an unresolved\n-     *          {@link InetSocketAddress}\n+     * @throws  UnknownHostException if the connection could not be established\n+     *          because the endpoint is an unresolved {@link InetSocketAddress}\n@@ -612,3 +611,2 @@\n-     * <p> If the endpoint is an unresolved {@link InetSocketAddress}, the\n-     * connection cannot be established, or the timeout expires before the\n-     * connection is established, then the socket is closed, and an\n+     * <p> If the connection cannot be established, or the timeout expires\n+     * before the connection is established, then the socket is closed, and an\n@@ -637,2 +635,2 @@\n-     * @throws  UnknownHostException if the endpoint is an unresolved\n-     *          {@link InetSocketAddress}\n+     * @throws  UnknownHostException if the connection could not be established\n+     *          because the endpoint is an unresolved {@link InetSocketAddress}\n@@ -663,6 +661,0 @@\n-        if (epoint.isUnresolved()) {\n-            var uhe = new UnknownHostException(epoint.getHostName());\n-            closeSuppressingExceptions(uhe);\n-            throw uhe;\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/java\/net\/Socket.java","additions":8,"deletions":16,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -25,1 +25,2 @@\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.AfterAll;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -30,1 +31,1 @@\n-import java.net.InetAddress;\n+import java.net.Authenticator;\n@@ -32,0 +33,2 @@\n+import java.net.PasswordAuthentication;\n+import java.net.Proxy;\n@@ -39,0 +42,1 @@\n+import static java.net.InetAddress.getLoopbackAddress;\n@@ -46,1 +50,1 @@\n- * @bug 8343791\n+ * @bug 8343791 8346017\n@@ -48,1 +52,2 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/java\/net\/Socks\n+ * @build SocksServer\n@@ -60,3 +65,30 @@\n-    @Test\n-    void testUnresolvedAddress() {\n-        assertTrue(UNRESOLVED_ADDRESS.isUnresolved());\n+    private static final String SOCKS_AUTH_USERNAME = \"foo\";\n+\n+    private static final String SOCKS_AUTH_PASSWORD = \"bar\";\n+\n+    private static SocksServer SOCKS_SERVER;\n+\n+    private static Proxy SOCKS_PROXY;\n+\n+    @BeforeAll\n+    static void initAuthenticator() {\n+        Authenticator.setDefault(new Authenticator() {\n+            @Override\n+            protected PasswordAuthentication getPasswordAuthentication() {\n+                return new PasswordAuthentication(SOCKS_AUTH_USERNAME, SOCKS_AUTH_PASSWORD.toCharArray());\n+            }\n+        });\n+    }\n+\n+    @BeforeAll\n+    static void initSocksServer() throws IOException {\n+        SOCKS_SERVER = new SocksServer(0);\n+        SOCKS_SERVER.addUser(SOCKS_AUTH_USERNAME, SOCKS_AUTH_PASSWORD);\n+        SOCKS_SERVER.start();\n+        InetSocketAddress proxyAddress = new InetSocketAddress(getLoopbackAddress(), SOCKS_SERVER.getPort());\n+        SOCKS_PROXY = new Proxy(Proxy.Type.SOCKS, proxyAddress);\n+    }\n+\n+    @AfterAll\n+    static void stopSocksServer() {\n+        SOCKS_SERVER.close();\n@@ -70,2 +102,2 @@\n-    void testUnboundSocket(Socket socket) throws IOException {\n-        try (socket) {\n+    void testUnboundSocket(SocketArg socketArg) throws IOException {\n+        try (Socket socket = socketArg.socket) {\n@@ -84,2 +116,2 @@\n-    void testBoundSocket(Socket socket) throws IOException {\n-        try (socket) {\n+    void testBoundSocket(SocketArg socketArg) throws IOException {\n+        try (Socket socket = socketArg.socket) {\n@@ -99,2 +131,3 @@\n-    void testConnectedSocket(Socket socket) throws Throwable {\n-        try (socket; ServerSocket serverSocket = createEphemeralServerSocket()) {\n+    void testConnectedSocket(SocketArg socketArg) throws Throwable {\n+        try (Socket socket = socketArg.socket;\n+             ServerSocket serverSocket = createEphemeralServerSocket()) {\n@@ -115,1 +148,1 @@\n-     * Verifies that an unbound socket is closed when {@code connect()} is invoked using an unresolved address.\n+     * Delegates to {@link #testUnconnectedSocketWithUnresolvedAddress(boolean, SocketArg)} using an unbound socket.\n@@ -119,2 +152,2 @@\n-    void testUnboundSocketWithUnresolvedAddress(Socket socket) throws IOException {\n-        try (socket) {\n+    void testUnboundSocketWithUnresolvedAddress(SocketArg socketArg) throws IOException {\n+        try (Socket socket = socketArg.socket) {\n@@ -123,2 +156,1 @@\n-            assertThrows(UnknownHostException.class, () -> socket.connect(UNRESOLVED_ADDRESS));\n-            assertTrue(socket.isClosed());\n+            testUnconnectedSocketWithUnresolvedAddress(false, socketArg);\n@@ -129,1 +161,1 @@\n-     * Verifies that a bound socket is closed when {@code connect()} is invoked using an unresolved address.\n+     * Delegates to {@link #testUnconnectedSocketWithUnresolvedAddress(boolean, SocketArg)} using a bound socket.\n@@ -133,2 +165,2 @@\n-    void testBoundSocketWithUnresolvedAddress(Socket socket) throws IOException {\n-        try (socket) {\n+    void testBoundSocketWithUnresolvedAddress(SocketArg socketArg) throws IOException {\n+        try (Socket socket = socketArg.socket) {\n@@ -136,2 +168,23 @@\n-            assertTrue(socket.isBound());\n-            assertFalse(socket.isConnected());\n+            testUnconnectedSocketWithUnresolvedAddress(true, socketArg);\n+        }\n+    }\n+\n+    \/**\n+     * Verifies the behaviour of an unconnected socket when {@code connect()} is invoked using an unresolved address.\n+     *\/\n+    private static void testUnconnectedSocketWithUnresolvedAddress(boolean bound, SocketArg socketArg) throws IOException {\n+        Socket socket = socketArg.socket;\n+        assertEquals(bound, socket.isBound());\n+        assertFalse(socket.isConnected());\n+        if (socketArg.proxied) {\n+            try (ServerSocket serverSocket = createEphemeralServerSocket()) {\n+                InetSocketAddress unresolvedAddress =\n+                        InetSocketAddress.createUnresolved(\"localhost\", serverSocket.getLocalPort());\n+                socket.connect(unresolvedAddress);\n+                try (Socket _ = serverSocket.accept()) {\n+                    assertTrue(socket.isBound());\n+                    assertTrue(socket.isConnected());\n+                    assertFalse(socket.isClosed());\n+                }\n+            }\n+        } else {\n@@ -148,2 +201,3 @@\n-    void testConnectedSocketWithUnresolvedAddress(Socket socket) throws Throwable {\n-        try (socket; ServerSocket serverSocket = createEphemeralServerSocket()) {\n+    void testConnectedSocketWithUnresolvedAddress(SocketArg socketArg) throws Throwable {\n+        try (Socket socket = socketArg.socket;\n+             ServerSocket serverSocket = createEphemeralServerSocket()) {\n@@ -154,1 +208,4 @@\n-                assertThrows(IOException.class, () -> socket.connect(UNRESOLVED_ADDRESS));\n+                SocketException exception = assertThrows(\n+                        SocketException.class,\n+                        () -> socket.connect(UNRESOLVED_ADDRESS));\n+                assertEquals(\"Already connected\", exception.getMessage());\n@@ -160,1 +217,1 @@\n-    static List<Socket> sockets() throws Exception {\n+    static List<SocketArg> sockets() throws Exception {\n@@ -162,0 +219,1 @@\n+        Socket proxiedSocket = new Socket(SOCKS_PROXY);\n@@ -164,1 +222,4 @@\n-        return List.of(socket, channelSocket);\n+        return List.of(\n+                new SocketArg(socket, false),\n+                new SocketArg(proxiedSocket, true),\n+                new SocketArg(channelSocket, false));\n@@ -167,0 +228,2 @@\n+    private record SocketArg(Socket socket, boolean proxied) {}\n+\n@@ -168,1 +231,1 @@\n-        return new ServerSocket(0, 0, InetAddress.getLoopbackAddress());\n+        return new ServerSocket(0, 0, getLoopbackAddress());\n","filename":"test\/jdk\/java\/net\/Socket\/ConnectFailTest.java","additions":92,"deletions":29,"binary":false,"changes":121,"status":"modified"}]}