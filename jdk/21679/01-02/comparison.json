{"files":[{"patch":"@@ -818,2 +818,2 @@\n-      initialize_assertion_predicates_for_peeled_loop(new_head->as_CountedLoop(), head->as_CountedLoop(),\n-                                                      first_node_index_in_cloned_loop_body, old_new);\n+    initialize_assertion_predicates_for_peeled_loop(new_head->as_CountedLoop(), head->as_CountedLoop(),\n+                                                    first_node_index_in_cloned_loop_body, old_new);\n@@ -1985,2 +1985,2 @@\n-  AssertionPredicatesForLoop assertion_predicates_for_loop(init, stride, target_loop_entry, this,\n-                                                           _node_in_loop_body);\n+  CreateAssertionPredicatesVisitor create_assertion_predicates_for_loop(init, stride, target_loop_entry, this,\n+                                                                        _node_in_loop_body);\n@@ -1989,3 +1989,3 @@\n-  predicate_iterator.for_each(assertion_predicates_for_loop);\n-  if (assertion_predicates_for_loop.has_created_predicates()) {\n-    IfTrueNode* last_created_predicate_success_proj = assertion_predicates_for_loop.last_created_success_proj();\n+  predicate_iterator.for_each(create_assertion_predicates_for_loop);\n+  if (create_assertion_predicates_for_loop.has_created_predicates()) {\n+    IfTrueNode* last_created_predicate_success_proj = create_assertion_predicates_for_loop.last_created_success_proj();\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -731,2 +731,3 @@\n-\/\/ Keep track of the current Predicate Block by setting '_current_parse_predicate'.\n-void AssertionPredicatesForLoop::visit(const ParsePredicate& parse_predicate) {\n+\/\/ Keep track of whether we are in the correct Predicate Block where Template Assertion Predicates can be found.\n+\/\/ The PredicateIterator will always start at the loop entry and first visits the Loop Limit Check Predicate Block.\n+void CreateAssertionPredicatesVisitor::visit(const ParsePredicate& parse_predicate) {\n@@ -736,1 +737,1 @@\n-    _current_parse_predicate = parse_predicate.tail();\n+    _has_hoisted_check_parse_predicates = true;\n@@ -740,2 +741,2 @@\n-void AssertionPredicatesForLoop::visit(const TemplateAssertionPredicate& template_assertion_predicate) {\n-  if (_current_parse_predicate == nullptr) {\n+void CreateAssertionPredicatesVisitor::visit(const TemplateAssertionPredicate& template_assertion_predicate) {\n+  if (!_has_hoisted_check_parse_predicates) {\n","filename":"src\/hotspot\/share\/opto\/predicates.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -946,1 +946,1 @@\n-class AssertionPredicatesForLoop : public PredicateVisitor {\n+class CreateAssertionPredicatesVisitor : public PredicateVisitor {\n@@ -952,1 +952,1 @@\n-  ParsePredicateSuccessProj* _current_parse_predicate;\n+  bool _has_hoisted_check_parse_predicates;\n@@ -956,2 +956,2 @@\n-  AssertionPredicatesForLoop(Node* init, Node* stride, Node* new_control, PhaseIdealLoop* phase,\n-                             const NodeInLoopBody& node_in_loop_body)\n+  CreateAssertionPredicatesVisitor(Node* init, Node* stride, Node* new_control, PhaseIdealLoop* phase,\n+                                   const NodeInLoopBody& node_in_loop_body)\n@@ -963,1 +963,1 @@\n-        _current_parse_predicate(nullptr),\n+        _has_hoisted_check_parse_predicates(false),\n@@ -965,1 +965,1 @@\n-  NONCOPYABLE(AssertionPredicatesForLoop);\n+  NONCOPYABLE(CreateAssertionPredicatesVisitor);\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}