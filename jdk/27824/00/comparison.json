{"files":[{"patch":"@@ -73,0 +73,7 @@\n+            \/\/\n+            \/\/ Some expressions can throw Exceptions. We have to catch them. In such a case, we return\n+            \/\/ the Exception instead of the value from the expression, and compare the Exceptions.\n+            \/\/\n+            \/\/ Some Expressions do not have a deterministic result. For example, different NaN or\n+            \/\/ precision results from some operators. We only compare the results if we know that the\n+            \/\/ result is deterministically the same.\n@@ -79,3 +86,5 @@\n-                    #returnType v0 = ${primitiveConTest}_compiled();\n-                    #returnType v1 = ${primitiveConTest}_reference();\n-                    Verify.checkEQ(v0, v1);\n+                    Object v0 = ${primitiveConTest}_compiled();\n+                    Object v1 = ${primitiveConTest}_reference();\n+                \"\"\",\n+                expression.info.isResultDeterministic ? \"Verify.checkEQ(v0, v1);\\n\" : \"\",\n+                \"\"\"\n@@ -85,1 +94,2 @@\n-                public static #returnType ${primitiveConTest}_compiled() {\n+                public static Object ${primitiveConTest}_compiled() {\n+                try {\n@@ -87,1 +97,4 @@\n-                \"return \", expressionToken, \";\\n\",\n+                    \"return \", expressionToken, \";\\n\",\n+                    expression.info.exceptions.stream().map(exception ->\n+                        \"} catch (\" + exception + \" e) { return e;\\n\"\n+                    ).toList(),\n@@ -89,0 +102,3 @@\n+                    } finally {\n+                        \/\/ Just so that javac is happy if there are no exceptions to catch.\n+                    }\n@@ -92,1 +108,2 @@\n-                public static #returnType ${primitiveConTest}_reference() {\n+                public static Object ${primitiveConTest}_reference() {\n+                try {\n@@ -94,1 +111,4 @@\n-                \"return \", expressionToken, \";\\n\",\n+                    \"return \", expressionToken, \";\\n\",\n+                    expression.info.exceptions.stream().map(exception ->\n+                        \"} catch (\" + exception + \" e) { return e;\\n\"\n+                    ).toList(),\n@@ -96,0 +116,3 @@\n+                    } finally {\n+                        \/\/ Just so that javac is happy if there are no exceptions to catch.\n+                    }\n","filename":"test\/hotspot\/jtreg\/testlibrary_tests\/template_framework\/examples\/TestExpressions.java","additions":30,"deletions":7,"binary":false,"changes":37,"status":"modified"}]}