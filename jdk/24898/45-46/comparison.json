{"files":[{"patch":"@@ -1962,11 +1962,15 @@\n-                \/\/ Refine the estimate.\n-                long u = sLong;\n-                do {\n-                    sLong = u;\n-                    sToN1 = BigInteger.unsignedLongPow(sLong, n - 1);\n-                    u = ((n - 1) * sLong + Long.divideUnsigned(x, sToN1)) \/ n;\n-                } while (u < sLong); \/\/ Terminate when non-decreasing.\n-\n-                return new MutableBigInteger[] {\n-                        new MutableBigInteger(sLong), new MutableBigInteger(x - sToN1 * sLong)\n-                };\n+                if (BigInteger.bitLengthForLong(sLong) * (n - 1) <= Long.SIZE) {\n+                    \/\/ Refine the estimate.\n+                    long u = sLong;\n+                    do {\n+                        sLong = u;\n+                        sToN1 = BigInteger.unsignedLongPow(sLong, n - 1);\n+                        u = ((n - 1) * sLong + Long.divideUnsigned(x, sToN1)) \/ n;\n+                    } while (u < sLong); \/\/ Terminate when non-decreasing.\n+\n+                    return new MutableBigInteger[] {\n+                            new MutableBigInteger(sLong), new MutableBigInteger(x - sToN1 * sLong)\n+                    };\n+                } else {\n+                    s = new MutableBigInteger(sLong);\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":15,"deletions":11,"binary":false,"changes":26,"status":"modified"}]}