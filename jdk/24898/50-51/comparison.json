{"files":[{"patch":"@@ -2773,1 +2773,8 @@\n-        return n == 1 ? this : (n == 2 ? sqrt() : nthRootAndRemainder(n, false)[0]);\n+        if (n == 1)\n+            return this;\n+\n+        if (n == 2)\n+            return sqrt();\n+\n+        checkRootDegree(n);\n+        return new MutableBigInteger(this.mag).nthRootRem(n)[0].toBigInteger(signum);\n@@ -2795,2 +2802,12 @@\n-        return n == 1 ? new BigInteger[] { this, ZERO }\n-                      : (n == 2 ? sqrtAndRemainder() : nthRootAndRemainder(n, true));\n+        if (n == 1)\n+            return new BigInteger[] { this, ZERO };\n+\n+        if (n == 2)\n+            return sqrtAndRemainder();\n+\n+        checkRootDegree(n);\n+        MutableBigInteger[] rootRem = new MutableBigInteger(this.mag).nthRootRem(n);\n+        return new BigInteger[] {\n+                rootRem[0].toBigInteger(signum),\n+                rootRem[1].toBigInteger(signum)\n+        };\n@@ -2799,4 +2816,1 @@\n-    \/*\n-     * Assume {@code n != 1 && n != 2}\n-     *\/\n-    private BigInteger[] nthRootAndRemainder(int n, boolean needRemainder) {\n+    private void checkRootDegree(int n) {\n@@ -2808,6 +2822,0 @@\n-\n-        MutableBigInteger[] rootRem = new MutableBigInteger(this.mag).nthRootRem(n);\n-        return new BigInteger[] {\n-                rootRem[0].toBigInteger(signum),\n-                needRemainder ? rootRem[1].toBigInteger(signum) : null\n-        };\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigInteger.java","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"}]}