{"files":[{"patch":"@@ -2005,7 +2005,1 @@\n-            MutableBigInteger rToN1 = new MutableBigInteger(r.toBigInteger().pow(n - 1).mag);\n-            MutableBigInteger dividend = new MutableBigInteger();\n-            r.mul(n - 1, dividend);\n-            MutableBigInteger xDivRToN1 = new MutableBigInteger();\n-            x.divide(rToN1, xDivRToN1, false);\n-            dividend.add(xDivRToN1);\n-            dividend.divideOneWord(n, r);\n+            newtonRecurrenceNthRoot(x, r, n, r);\n@@ -2019,7 +2013,1 @@\n-            MutableBigInteger rToN1 = new MutableBigInteger(r.toBigInteger().pow(n - 1).mag);\n-            MutableBigInteger dividend = new MutableBigInteger();\n-            r.mul(n - 1, dividend);\n-            MutableBigInteger xDivRToN1 = new MutableBigInteger();\n-            this.divide(rToN1, xDivRToN1, false);\n-            dividend.add(xDivRToN1);\n-            dividend.divideOneWord(n, r1);\n+            newtonRecurrenceNthRoot(this, r, n, r1);\n@@ -2031,0 +2019,15 @@\n+    \/**\n+     * Computes {@code ((n-1)*r + x\/r^(n-1))\/n} and places the result in {@code res}.\n+     * {@code res} and {@code r} can be the same object.\n+     *\/\n+    private static void newtonRecurrenceNthRoot(\n+            MutableBigInteger x, MutableBigInteger r, int n, MutableBigInteger res) {\n+        MutableBigInteger rToN1 = new MutableBigInteger(r.toBigInteger().pow(n - 1).mag);\n+        MutableBigInteger dividend = new MutableBigInteger();\n+        r.mul(n - 1, dividend);\n+        MutableBigInteger xDivRToN1 = new MutableBigInteger();\n+        x.divide(rToN1, xDivRToN1, false);\n+        dividend.add(xDivRToN1);\n+        dividend.divideOneWord(n, res);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":17,"deletions":14,"binary":false,"changes":31,"status":"modified"}]}