{"files":[{"patch":"@@ -2025,1 +2025,2 @@\n-                \/\/ avoiding to lose more bits than necessary.\n+                \/\/ avoiding to lose more bits (possibly all) than necessary.\n+                \/\/ The instruction rad = Math.nextUp(rad) below ensures rad > 0.0\n@@ -2048,0 +2049,3 @@\n+                    \/\/ The radicand has radExp+1 integer bits, but only\n+                    \/\/ the first Double.PRECISION leftmost bits are correct\n+                    \/\/ We scale the corresponding wrong bits of approx in the fraction part.\n@@ -2051,1 +2055,9 @@\n-                } else { \/\/ Avoid to discard correct fraction bits\n+                } else { \/\/ Save correct fraction bits\n+                    \/* Some correct bits of the radicand are fraction bits.\n+                     * If radExp >= 0, there are (Double.PRECISION - 1) - radExp\n+                     * correct fraction bits in the radicand.\n+                     * If radExp < 0, there are (Double.PRECISION - 1) + |radExp|\n+                     * correct fraction bits in the radicand.\n+                     * We scale the corresponding bits of approx in the integer part,\n+                     * rounding up correctBits for simmetry with then-case.\n+                     *\/\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"}]}