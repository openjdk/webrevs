{"files":[{"patch":"@@ -2002,1 +2002,18 @@\n-            if (bitLength - (sh - shExcess) <= Double.MAX_EXPONENT) {\n+            if (shExcess <= Double.MAX_EXPONENT - Double.PRECISION) {\n+                \/* Let x = this, P = Double.PRECISION, ME = Double.MAX_EXPONENT,\n+                 * bl = bitLength, ex = shExcess\n+                 *\n+                 * We have bl-(sh-ex) = bl-(bl-P-ex) = P + ex,\n+                 * so ex ≤ ME - P ⇔ bl-(sh-ex) ≤ ME.\n+                 *\n+                 * Recalling x < 2^bl:\n+                 * x \/ 2^(sh-ex) ≤ 2^bl \/ 2^(sh-ex) = 2^(bl-(sh-ex)) ≤ 2^ME < Double.MAX_VALUE\n+                 *\n+                 * Thus, x \/ 2^(sh-ex) is in the range of finite doubles.\n+                 * All the more so, this holds for  x >> (sh-ex) ≤ x \/ 2^(sh-ex),\n+                 * which is what is computed below.\n+                 *\n+                 * Noting that ex ≥ 0, we get bl-(sh-ex) = P + ex ≥ P\n+                 * which shows that x >> (sh-ex) has at least P bits of precision,\n+                 * since bl-(sh-ex) is its bit length.\n+                 *\/\n@@ -2006,1 +2023,1 @@\n-            } else { \/\/ this >> (sh - shExcess) could exceed finite double range, may lose precision\n+            } else { \/\/ x >> (sh-ex) could exceed finite double range, may lose precision\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"}]}