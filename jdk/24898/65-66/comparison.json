{"files":[{"patch":"@@ -1985,0 +1985,1 @@\n+                \/\/ Set up the initial estimate of the iteration.\n@@ -1999,1 +2000,0 @@\n-                \/\/ Set up the initial estimate of the iteration.\n@@ -2001,4 +2001,1 @@\n-                long sh = bitLength - Double.PRECISION;\n-                int shExcess = (int) (sh % n);\n-\n-                \/\/ Shift as many bits as possible without losing precision in the significand.\n+                int sh = bitLength - Double.PRECISION;\n@@ -2006,1 +2003,1 @@\n-                 * bl = bitLength, ex = shExcess\n+                 * bl = bitLength, ex = sh % n\n@@ -2019,1 +2016,1 @@\n-                sh -= shExcess; \/\/ Adjust shift to a multiple of n\n+                sh -= sh % n; \/\/ Adjust shift to a multiple of n\n@@ -2021,1 +2018,1 @@\n-                rad = this.toBigInteger().shiftRight((int) sh).doubleValue();\n+                rad = this.toBigInteger().shiftRight(sh).doubleValue();\n@@ -2027,1 +2024,1 @@\n-                rootSh = (int) (sh \/ n);\n+                rootSh = sh \/ n;\n@@ -2037,1 +2034,1 @@\n-                if (n >= Double.PRECISION) {\n+                if (n >= Double.PRECISION) { \/\/ fp arithmetic gives too few correct bits\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":7,"deletions":10,"binary":false,"changes":17,"status":"modified"}]}