{"files":[{"patch":"@@ -1997,9 +1997,0 @@\n-            }\n-        }\n-\n-        \/\/ Refine the estimate, avoiding to compute non-significant bits\n-        final int trailingZeros = this.getLowestSetBit();\n-        int rootShift = (int) (shift \/ n);\n-        for (int rootBits = (int) r.bitLength(); rootShift >= rootBits; rootBits <<= 1) {\n-            r.leftShift(rootBits);\n-            rootShift -= rootBits;\n@@ -2007,6 +1998,16 @@\n-            \/\/ Remove useless bits from the radicand\n-            MutableBigInteger x = new MutableBigInteger(this);\n-            int removedBits = rootShift * n;\n-            x.rightShift(removedBits);\n-            if (removedBits > trailingZeros)\n-                x.add(ONE); \/\/ round up to ensure r is an upper bound of the root\n+                \/\/ Refine the estimate, avoiding to compute non-significant bits\n+                final int trailingZeros = this.getLowestSetBit();\n+                int rootShift = (int) (shift \/ n);\n+                for (int rootBits = (int) r.bitLength(); rootShift >= rootBits; rootBits <<= 1) {\n+                    r.leftShift(rootBits);\n+                    rootShift -= rootBits;\n+\n+                    \/\/ Remove useless bits from the radicand\n+                    MutableBigInteger x = new MutableBigInteger(this);\n+                    int removedBits = rootShift * n;\n+                    x.rightShift(removedBits);\n+                    if (removedBits > trailingZeros)\n+                        x.add(ONE); \/\/ round up to ensure r is an upper bound of the root\n+\n+                    newtonRecurrenceNthRoot(x, r, n, r.toBigInteger().pow(n - 1));\n+                }\n@@ -2014,1 +2015,3 @@\n-            newtonRecurrenceNthRoot(x, r, n, r.toBigInteger().pow(n - 1));\n+                \/\/ Shift the approximate root back into the original range.\n+                r.safeLeftShift(rootShift);\n+            }\n@@ -2017,2 +2020,0 @@\n-        \/\/ Shift the approximate root back into the original range.\n-        r.safeLeftShift(rootShift);\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":19,"deletions":18,"binary":false,"changes":37,"status":"modified"}]}