{"files":[{"patch":"@@ -2060,1 +2060,1 @@\n-                 * using a congruent shifted radicand, in order to avoid computing and\n+                 * using a suitable shifted radicand, in order to avoid computing and\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -463,1 +463,1 @@\n-        for (int i = 0; i < end; i++) {\n+        for (int i = 1; i < end; i++) {\n@@ -508,1 +508,1 @@\n-        int maxExponent = Double.MAX_EXPONENT + 1;\n+        int maxExponent = 256;\n@@ -517,1 +517,1 @@\n-        report(\"nthRoot for 2^N, 2^N - 1 and 2^N + 1, 1 <= N <= Double.MAX_EXPONENT\",\n+        report(\"nthRoot for 2^N, 2^N - 1 and 2^N + 1, 1 <= N <= \" + maxExponent,\n@@ -528,1 +528,1 @@\n-        DoubleStream doubles = random.doubles(SIZE, 0x1p63, Double.MAX_VALUE);\n+        DoubleStream doubles = random.doubles(SIZE, 0x1p63, Math.scalb(1.0, maxExponent));\n@@ -1448,0 +1448,2 @@\n+            nthRoot();\n+            nthRootAndRemainder();\n","filename":"test\/jdk\/java\/math\/BigInteger\/BigIntegerTest.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"}]}