{"files":[{"patch":"@@ -1984,2 +1984,9 @@\n-            final double approx = n == 3 ? Math.cbrt(rad) : Math.pow(rad, Math.nextUp(1.0 \/ n));\n-            r = valueOf(Math.ceil(Math.nextUp(approx)));\n+            double approx = n == 3 ? Math.cbrt(rad) : Math.pow(rad, Math.nextUp(1.0 \/ n));\n+            approx = Math.ceil(Math.nextUp(approx));\n+            if (shift == 0L) {\n+                r = valueOf(approx);\n+            } else {\n+                \/\/ Allocate sufficient space to store the final root\n+                r = new MutableBigInteger(new int[(intLen - 1) \/ n + 1]);\n+                r.copyValue(valueOf(approx));\n+            }\n@@ -2007,1 +2014,1 @@\n-        MutableBigInteger r1 = r;\n+        MutableBigInteger r1 = new MutableBigInteger(new int[r.intLen]);\n@@ -2009,1 +2016,0 @@\n-            r = r1;\n@@ -2011,1 +2017,2 @@\n-        } while (r1.compare(r) < 0); \/\/ Terminate when non-decreasing.\n+            if (r1.compare(r) >= 0) \/\/ Terminate when non-decreasing.\n+                return r;\n@@ -2013,1 +2020,2 @@\n-        return r;\n+            r.copyValue(r1);\n+        } while (true);\n","filename":"src\/java.base\/share\/classes\/java\/math\/MutableBigInteger.java","additions":14,"deletions":6,"binary":false,"changes":20,"status":"modified"}]}