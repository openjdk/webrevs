{"files":[{"patch":"@@ -803,1 +803,1 @@\n-  _ref_processor(new ShenandoahReferenceProcessor(MAX2(max_workers, 1U))),\n+  _ref_processor(new ShenandoahReferenceProcessor(this, MAX2(max_workers, 1U))),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -226,1 +226,1 @@\n-ShenandoahReferenceProcessor::ShenandoahReferenceProcessor(uint max_workers) :\n+ShenandoahReferenceProcessor::ShenandoahReferenceProcessor(ShenandoahGeneration* generation, uint max_workers) :\n@@ -232,1 +232,1 @@\n-  _stats() {\n+  _generation(generation) {\n@@ -314,1 +314,1 @@\n-  if (!heap->is_in_active_generation(referent)) {\n+  if (!_generation->contains(referent)) {\n@@ -332,2 +332,0 @@\n-  shenandoah_assert_mark_complete(raw_referent);\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n@@ -336,1 +334,1 @@\n-    return heap->marking_context()->is_marked(raw_referent);\n+    return _generation->complete_marking_context()->is_marked(raw_referent);\n@@ -338,1 +336,1 @@\n-    return heap->marking_context()->is_marked_strong(raw_referent);\n+    return _generation->complete_marking_context()->is_marked_strong(raw_referent);\n@@ -345,8 +343,0 @@\n-#ifdef ASSERT\n-    auto referent = reference_referent_raw<T>(reference);\n-    auto heap = ShenandoahHeap::heap();\n-    shenandoah_assert_mark_complete(referent);\n-    assert(reference_next<T>(reference) == nullptr, \"Already inactive\");\n-    assert(heap->marking_context()->is_marked(referent), \"only make inactive final refs with alive referents\");\n-#endif\n-\n@@ -357,0 +347,2 @@\n+    assert(reference_next<T>(reference) == nullptr, \"Already inactive\");\n+    assert(_generation->complete_marking_context()->is_marked(reference_referent_raw<T>(reference)), \"only make inactive final refs with alive referents\");\n@@ -446,6 +438,2 @@\n-  if (raw_referent != nullptr) {\n-    ShenandoahHeap* heap = ShenandoahHeap::heap();\n-    ShenandoahHeapRegion* region  = heap->heap_region_containing(raw_referent);\n-    ShenandoahMarkingContext* ctx = heap->generation_for(region->affiliation())->complete_marking_context();\n-    assert(ctx->is_marked(raw_referent), \"only drop references with alive referents\");\n-  }\n+  assert(raw_referent == nullptr || _generation->complete_marking_context()->is_marked(raw_referent),\n+         \"only drop references with alive referents\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":9,"deletions":21,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -143,0 +143,2 @@\n+  ShenandoahGeneration* _generation;\n+\n@@ -175,1 +177,1 @@\n-  ShenandoahReferenceProcessor(uint max_workers);\n+  ShenandoahReferenceProcessor(ShenandoahGeneration* generation, uint max_workers);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"}]}