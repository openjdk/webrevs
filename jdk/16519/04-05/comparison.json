{"files":[{"patch":"@@ -748,0 +748,6 @@\n+                                                                            \\\n+  product(size_t, AsyncMonitorDeflationForThreadDumpLimit, SIZE_MAX, DIAGNOSTIC, \\\n+          \"Let the monitor-collecting mechanism inside VM_ThreadDump \"      \\\n+          \"trigger an asynchronous monitor deflation pass when the number \" \\\n+          \"of monitors have been found to be above this limit\")             \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -343,4 +343,1 @@\n-    \/\/ The caller is interested in the owned ObjectMonitors. This does\n-    \/\/ not include when owner is set to a stack-lock address in thread.\n-    \/\/ This also does not capture unowned ObjectMonitors that cannot be\n-    \/\/ deflated because of a waiter.\n+    assert(monitor->has_owner(), \"Expects only owned monitors\");\n@@ -392,5 +389,2 @@\n-    \/\/ can start to to take time. Be friendly to following thread dumps by\n-    \/\/ telling the MonitorDeflationThread to deflate monitors.\n-    \/\/\n-    \/\/ The limit has been arbitrarily chosen to be were the iteration started\n-    \/\/ to take more then a few milliseconds.\n+    \/\/ can start to take time. Be friendly to following thread dumps by telling\n+    \/\/ the MonitorDeflationThread to deflate monitors.\n@@ -398,2 +392,1 @@\n-    const int DeflateRequestLimit = 100000;\n-    if (monitors_count > DeflateRequestLimit) {\n+    if (monitors_count > AsyncMonitorDeflationForThreadDumpLimit) {\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":4,"deletions":11,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+    public static Object[] monitors = new Object[1000];\n@@ -69,1 +70,1 @@\n-        Object[] monitors = new Object[1000];\n+        monitors = new Object[1000];\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/ConcurrentDeflation.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}