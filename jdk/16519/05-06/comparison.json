{"files":[{"patch":"@@ -748,6 +748,0 @@\n-                                                                            \\\n-  product(size_t, AsyncMonitorDeflationForThreadDumpLimit, SIZE_MAX, DIAGNOSTIC, \\\n-          \"Let the monitor-collecting mechanism inside VM_ThreadDump \"      \\\n-          \"trigger an asynchronous monitor deflation pass when the number \" \\\n-          \"of monitors have been found to be above this limit\")             \\\n-                                                                            \\\n","filename":"src\/hotspot\/share\/runtime\/globals.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1063,1 +1063,2 @@\n-\/\/ Iterate owned ObjectMonitors where the owner `filter` returns true.\n+\/\/ Iterate ObjectMonitors owned by any thread and where the owner `filter`\n+\/\/ returns true.\n@@ -1092,1 +1093,1 @@\n-\/\/ Iterate owned ObjectMonitors.\n+\/\/ Iterate ObjectMonitors owned by any thread.\n@@ -1137,4 +1138,0 @@\n-size_t ObjectSynchronizer::in_use_list_count() {\n-  return _in_use_list.count();\n-}\n-\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.cpp","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -126,1 +126,2 @@\n-  \/\/ Iterate owned ObjectMonitors where the owner `filter` returns true.\n+  \/\/ Iterate ObjectMonitors owned by any thread and where the owner `filter`\n+  \/\/ returns true.\n@@ -134,1 +135,1 @@\n-  \/\/ Iterate owned ObjectMonitors.\n+  \/\/ Iterate ObjectMonitors owned by any thread.\n@@ -149,1 +150,0 @@\n-  static size_t in_use_list_count();\n","filename":"src\/hotspot\/share\/runtime\/synchronizer.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -391,4 +391,6 @@\n-    size_t monitors_count = ObjectSynchronizer::in_use_list_count();\n-    if (monitors_count > AsyncMonitorDeflationForThreadDumpLimit) {\n-      ObjectSynchronizer::request_deflate_idle_monitors();\n-    }\n+    \/\/\n+    \/\/ This is trying to be somewhat backwards compatible with the previous\n+    \/\/ implementation, which performed monitor deflation right here. We might\n+    \/\/ want to reconsider the need to trigger monitor deflation from the thread\n+    \/\/ dumping and instead maybe tweak the deflation heuristics.\n+    ObjectSynchronizer::request_deflate_idle_monitors();\n","filename":"src\/hotspot\/share\/runtime\/vmOperations.cpp","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -70,1 +70,0 @@\n-        monitors = new Object[1000];\n","filename":"test\/hotspot\/jtreg\/runtime\/Monitor\/ConcurrentDeflation.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}