{"files":[{"patch":"@@ -2735,2 +2735,5 @@\n-    address ucm_common_error_exit       =  generate_unsafecopy_common_error_exit();\n-    UnsafeMemoryAccess::set_common_exit_stub_pc(ucm_common_error_exit);\n+    \/\/ generate the common exit first so later stubs can rely on it if\n+    \/\/ they want an UnsafeMemoryAccess exit non-local to the stub\n+    StubRoutines::_unsafecopy_common_exit = generate_unsafecopy_common_error_exit();\n+    \/\/ register the stub as the default exit with class UnsafeMemoryAccess\n+    UnsafeMemoryAccess::set_common_exit_stub_pc(StubRoutines::_unsafecopy_common_exit);\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3004,0 +3004,6 @@\n+    \/\/ generate the common exit first so later stubs can rely on it if\n+    \/\/ they want an UnsafeMemoryAccess exit non-local to the stub\n+    StubRoutines::_unsafecopy_common_exit = generate_unsafecopy_common_error_exit();\n+    \/\/ register the stub as the default exit with class UnsafeMemoryAccess\n+    UnsafeMemoryAccess::set_common_exit_stub_pc(StubRoutines::_unsafecopy_common_exit);\n+\n@@ -3007,3 +3013,0 @@\n-    address ucm_common_error_exit       =  generate_unsafecopy_common_error_exit();\n-    UnsafeMemoryAccess::set_common_exit_stub_pc(ucm_common_error_exit);\n-\n","filename":"src\/hotspot\/cpu\/arm\/stubGenerator_arm.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3274,0 +3274,6 @@\n+    \/\/ generate the common exit first so later stubs can rely on it if\n+    \/\/ they want an UnsafeMemoryAccess exit non-local to the stub\n+    StubRoutines::_unsafecopy_common_exit = generate_unsafecopy_common_error_exit();\n+    \/\/ register the stub as the default exit with class UnsafeMemoryAccess\n+    UnsafeMemoryAccess::set_common_exit_stub_pc(StubRoutines::_unsafecopy_common_exit);\n+\n@@ -3277,3 +3283,0 @@\n-    address ucm_common_error_exit       =  generate_unsafecopy_common_error_exit();\n-    UnsafeMemoryAccess::set_common_exit_stub_pc(ucm_common_error_exit);\n-\n","filename":"src\/hotspot\/cpu\/ppc\/stubGenerator_ppc.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2304,0 +2304,6 @@\n+    \/\/ generate the common exit first so later stubs can rely on it if\n+    \/\/ they want an UnsafeMemoryAccess exit non-local to the stub\n+    StubRoutines::_unsafecopy_common_exit = generate_unsafecopy_common_error_exit();\n+    \/\/ register the stub as the default exit with class UnsafeMemoryAccess\n+    UnsafeMemoryAccess::set_common_exit_stub_pc(StubRoutines::_unsafecopy_common_exit);\n+\n@@ -2307,3 +2313,0 @@\n-    address ucm_common_error_exit     = generate_unsafecopy_common_error_exit();\n-    UnsafeMemoryAccess::set_common_exit_stub_pc(ucm_common_error_exit);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1579,0 +1579,5 @@\n+    \/\/ they want an UnsafeMemoryAccess exit non-local to the stub\n+    StubRoutines::_unsafecopy_common_exit = generate_unsafecopy_common_error_exit();\n+    \/\/ register the stub as the default exit with class UnsafeMemoryAccess\n+    UnsafeMemoryAccess::set_common_exit_stub_pc(StubRoutines::_unsafecopy_common_exit);\n+\n@@ -1582,3 +1587,0 @@\n-    address ucm_common_error_exit       =  generate_unsafecopy_common_error_exit();\n-    UnsafeMemoryAccess::set_common_exit_stub_pc(ucm_common_error_exit);\n-\n","filename":"src\/hotspot\/cpu\/s390\/stubGenerator_s390.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -889,0 +889,3 @@\n+  do_stub(final, unsafecopy_common)                                     \\\n+  do_entry(final, unsafecopy_common, unsafecopy_common_exit,            \\\n+           unsafecopy_common_exit)                                      \\\n","filename":"src\/hotspot\/share\/runtime\/stubDeclarations.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -134,0 +134,29 @@\n+\/\/ Used to retrieve mark regions that lie within a generated stub so\n+\/\/ they can be saved along with the stub and used to reinit the table\n+\/\/ when the stub is reloaded.\n+\n+void UnsafeMemoryAccess::collect_entries(address range_start, address range_end, GrowableArray<address>& entries)\n+{\n+  for (int i = 0; i < _table_length; i++) {\n+    UnsafeMemoryAccess& e = _table[i];\n+    assert((e._start_pc != nullptr &&\n+            e._end_pc != nullptr &&\n+            e._error_exit_pc != nullptr),\n+           \"search for entries found incomplete table entry\");\n+    if (e._start_pc >= range_start && e._end_pc <= range_end) {\n+      assert(((e._error_exit_pc >= range_start &&\n+               e._error_exit_pc <= range_end) ||\n+              e._error_exit_pc == _common_exit_stub_pc),\n+             \"unexpected error exit pc\");\n+      entries.append(e._start_pc);\n+      entries.append(e._end_pc);\n+      \/\/ only return an exit pc when it is within the range of the stub\n+      if (e._error_exit_pc != _common_exit_stub_pc) {\n+        entries.append(e._error_exit_pc);\n+      } else {\n+        \/\/ an address outside the stub must be the common exit stub address\n+        entries.append(nullptr);\n+      }\n+    }\n+  }\n+}\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.cpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -36,0 +36,1 @@\n+#include \"utilities\/growableArray.hpp\"\n@@ -143,0 +144,4 @@\n+  \/\/ Append to entries arrray start, end and exit pcs of all table\n+  \/\/ entries that identify a sub-interval of range (range_start,\n+  \/\/ range_end). Append nullptr if the exit pc is not in the range.\n+  static void collect_entries(address range_start, address range_end, GrowableArray<address>& entries);\n","filename":"src\/hotspot\/share\/runtime\/stubRoutines.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"}]}