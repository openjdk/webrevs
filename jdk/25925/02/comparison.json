{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.util.Map;\n@@ -85,1 +86,1 @@\n-public interface Connection  extends Wrapper, AutoCloseable {\n+public interface Connection extends Wrapper, AutoCloseable {\n@@ -301,3 +302,0 @@\n-    \/\/======================================================================\n-    \/\/ Advanced features:\n-\n@@ -501,1 +499,0 @@\n-\n@@ -629,1 +626,1 @@\n-    java.util.Map<String,Class<?>> getTypeMap() throws SQLException;\n+    Map<String, Class<?>> getTypeMap() throws SQLException;\n@@ -657,1 +654,1 @@\n-    void setTypeMap(java.util.Map<String,Class<?>> map) throws SQLException;\n+    void setTypeMap(Map<String, Class<?>> map) throws SQLException;\n@@ -661,1 +658,0 @@\n-\n@@ -897,1 +893,0 @@\n-\n@@ -1102,81 +1097,81 @@\n-        \/**\n-         * Returns true if the connection has not been closed and is still valid.\n-         * The driver shall submit a query on the connection or use some other\n-         * mechanism that positively verifies the connection is still valid when\n-         * this method is called.\n-         * <p>\n-         * The query submitted by the driver to validate the connection shall be\n-         * executed in the context of the current transaction.\n-         *\n-         * @param timeout The time in seconds to wait for the database operation\n-         *                used to validate the connection to complete.  If the\n-         *                timeout period expires before the operationcompletes,\n-         *                this method returns false.  A value of 0 indicates a\n-         *                timeout is not applied to the database operation.\n-         *\n-         * @return true if the connection is valid, false otherwise\n-         * @throws SQLException if the value supplied for {@code timeout}\n-         * is less than 0\n-         * @since 1.6\n-         *\n-         * @see java.sql.DatabaseMetaData#getClientInfoProperties\n-         *\/\n-         boolean isValid(int timeout) throws SQLException;\n-\n-        \/**\n-         * Sets the value of the client info property specified by name to the\n-         * value specified by value.\n-         * <p>\n-         * Applications may use the {@code DatabaseMetaData.getClientInfoProperties}\n-         * method to determine the client info properties supported by the driver\n-         * and the maximum length that may be specified for each property.\n-         * <p>\n-         * The driver stores the value specified in a suitable location in the\n-         * database.  For example in a special register, session parameter, or\n-         * system table column.  For efficiency the driver may defer setting the\n-         * value in the database until the next time a statement is executed or\n-         * prepared.  Other than storing the client information in the appropriate\n-         * place in the database, these methods shall not alter the behavior of\n-         * the connection in anyway.  The values supplied to these methods are\n-         * used for accounting, diagnostics and debugging purposes only.\n-         * <p>\n-         * The driver shall generate a warning if the client info name specified\n-         * is not recognized by the driver.\n-         * <p>\n-         * If the value specified to this method is greater than the maximum\n-         * length for the property the driver may either truncate the value and\n-         * generate a warning or generate a {@code SQLClientInfoException}.  If the driver\n-         * generates a {@code SQLClientInfoException}, the value specified was not set on the\n-         * connection.\n-         * <p>\n-         * The following are standard client info properties.  Drivers are not\n-         * required to support these properties however if the driver supports a\n-         * client info property that can be described by one of the standard\n-         * properties, the standard property name should be used.\n-         *\n-         * <ul>\n-         * <li>ApplicationName  -       The name of the application currently utilizing\n-         *                                                      the connection<\/li>\n-         * <li>ClientUser               -       The name of the user that the application using\n-         *                                                      the connection is performing work for.  This may\n-         *                                                      not be the same as the user name that was used\n-         *                                                      in establishing the connection.<\/li>\n-         * <li>ClientHostname   -       The hostname of the computer the application\n-         *                                                      using the connection is running on.<\/li>\n-         * <\/ul>\n-         *\n-         * @param name          The name of the client info property to set\n-         * @param value         The value to set the client info property to.  If the\n-         *                                      value is null, the current value of the specified\n-         *                                      property is cleared.\n-         *\n-         * @throws      SQLClientInfoException if the database server returns an error while\n-         *                      setting the client info value on the database server or this method\n-         * is called on a closed connection\n-         *\n-         * @since 1.6\n-         *\/\n-         void setClientInfo(String name, String value)\n-                throws SQLClientInfoException;\n-\n-        \/**\n+    \/**\n+     * Returns true if the connection has not been closed and is still valid.\n+     * The driver shall submit a query on the connection or use some other\n+     * mechanism that positively verifies the connection is still valid when\n+     * this method is called.\n+     * <p>\n+     * The query submitted by the driver to validate the connection shall be\n+     * executed in the context of the current transaction.\n+     *\n+     * @param timeout The time in seconds to wait for the database operation\n+     *                used to validate the connection to complete.  If the\n+     *                timeout period expires before the operationcompletes,\n+     *                this method returns false.  A value of 0 indicates a\n+     *                timeout is not applied to the database operation.\n+     *\n+     * @return true if the connection is valid, false otherwise\n+     * @throws SQLException if the value supplied for {@code timeout}\n+     * is less than 0\n+     * @since 1.6\n+     *\n+     * @see java.sql.DatabaseMetaData#getClientInfoProperties\n+     *\/\n+    boolean isValid(int timeout) throws SQLException;\n+\n+    \/**\n+     * Sets the value of the client info property specified by name to the\n+     * value specified by value.\n+     * <p>\n+     * Applications may use the {@code DatabaseMetaData.getClientInfoProperties}\n+     * method to determine the client info properties supported by the driver\n+     * and the maximum length that may be specified for each property.\n+     * <p>\n+     * The driver stores the value specified in a suitable location in the\n+     * database.  For example in a special register, session parameter, or\n+     * system table column.  For efficiency the driver may defer setting the\n+     * value in the database until the next time a statement is executed or\n+     * prepared.  Other than storing the client information in the appropriate\n+     * place in the database, these methods shall not alter the behavior of\n+     * the connection in anyway.  The values supplied to these methods are\n+     * used for accounting, diagnostics and debugging purposes only.\n+     * <p>\n+     * The driver shall generate a warning if the client info name specified\n+     * is not recognized by the driver.\n+     * <p>\n+     * If the value specified to this method is greater than the maximum\n+     * length for the property the driver may either truncate the value and\n+     * generate a warning or generate a {@code SQLClientInfoException}.  If the driver\n+     * generates a {@code SQLClientInfoException}, the value specified was not set on the\n+     * connection.\n+     * <p>\n+     * The following are standard client info properties.  Drivers are not\n+     * required to support these properties however if the driver supports a\n+     * client info property that can be described by one of the standard\n+     * properties, the standard property name should be used.\n+     *\n+     * <ul>\n+     * <li>ApplicationName -       The name of the application currently utilizing\n+     *                                                      the connection<\/li>\n+     * <li>ClientUser      -       The name of the user that the application using\n+     *                                                      the connection is performing work for.  This may\n+     *                                                      not be the same as the user name that was used\n+     *                                                      in establishing the connection.<\/li>\n+     * <li>ClientHostname  -       The hostname of the computer the application\n+     *                                                      using the connection is running on.<\/li>\n+     * <\/ul>\n+     *\n+     * @param name          The name of the client info property to set\n+     * @param value         The value to set the client info property to.  If the\n+     *                                      value is null, the current value of the specified\n+     *                                      property is cleared.\n+     *\n+     * @throws      SQLClientInfoException if the database server returns an error while\n+     *                      setting the client info value on the database server or this method\n+     * is called on a closed connection\n+     *\n+     * @since 1.6\n+     *\/\n+    void setClientInfo(String name, String value)\n+        throws SQLClientInfoException;\n+\n+    \/**\n@@ -1212,45 +1207,2 @@\n-         void setClientInfo(Properties properties)\n-                throws SQLClientInfoException;\n-\n-        \/**\n-         * Returns the value of the client info property specified by name.  This\n-         * method may return null if the specified client info property has not\n-         * been set and does not have a default value.  This method will also\n-         * return null if the specified client info property name is not supported\n-         * by the driver.\n-         * <p>\n-         * Applications may use the {@code DatabaseMetaData.getClientInfoProperties}\n-         * method to determine the client info properties supported by the driver.\n-         *\n-         * @param name          The name of the client info property to retrieve\n-         *\n-         * @return                      The value of the client info property specified\n-         *\n-         * @throws SQLException         if the database server returns an error when\n-         *                              fetching the client info value from the database\n-         *                              or this method is called on a closed connection\n-         *\n-         * @since 1.6\n-         *\n-         * @see java.sql.DatabaseMetaData#getClientInfoProperties\n-         *\/\n-         String getClientInfo(String name)\n-                throws SQLException;\n-\n-        \/**\n-         * Returns a list containing the name and current value of each client info\n-         * property supported by the driver.  The value of a client info property\n-         * may be null if the property has not been set and does not have a\n-         * default value.\n-         *\n-         * @return      A {@code Properties} object that contains the name and current value of\n-         *                      each of the client info properties supported by the driver.\n-         *\n-         * @throws      SQLException if the database server returns an error when\n-         *                      fetching the client info values from the database\n-         * or this method is called on a closed connection\n-         *\n-         * @since 1.6\n-         *\/\n-         Properties getClientInfo()\n-                throws SQLException;\n+    void setClientInfo(Properties properties)\n+        throws SQLClientInfoException;\n@@ -1258,28 +1210,24 @@\n-\/**\n-  * Factory method for creating Array objects.\n-  *<p>\n-  * <b>Note: <\/b>When {@code createArrayOf} is used to create an array object\n-  * that maps to a primitive data type, then it is implementation-defined\n-  * whether the {@code Array} object is an array of that primitive\n-  * data type or an array of {@code Object}.\n-  * <p>\n-  * <b>Note: <\/b>The JDBC driver is responsible for mapping the elements\n-  * {@code Object} array to the default JDBC SQL type defined in\n-  * java.sql.Types for the given class of {@code Object}. The default\n-  * mapping is specified in Appendix B of the JDBC specification.  If the\n-  * resulting JDBC type is not the appropriate type for the given typeName then\n-  * it is implementation defined whether an {@code SQLException} is\n-  * thrown or the driver supports the resulting conversion.\n-  *\n-  * @param typeName the SQL name of the type the elements of the array map to. The typeName is a\n-  * database-specific name which may be the name of a built-in type, a user-defined type or a standard  SQL type supported by this database. This\n-  *  is the value returned by {@code Array.getBaseTypeName}\n-  * @param elements the elements that populate the returned object\n-  * @return an Array object whose elements map to the specified SQL type\n-  * @throws SQLException if a database error occurs, the JDBC type is not\n-  *  appropriate for the typeName and the conversion is not supported, the typeName is null or this method is called on a closed connection\n-  * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this data type\n-  * @since 1.6\n-  *\/\n- Array createArrayOf(String typeName, Object[] elements) throws\n-SQLException;\n+    \/**\n+     * Returns the value of the client info property specified by name.  This\n+     * method may return null if the specified client info property has not\n+     * been set and does not have a default value.  This method will also\n+     * return null if the specified client info property name is not supported\n+     * by the driver.\n+     * <p>\n+     * Applications may use the {@code DatabaseMetaData.getClientInfoProperties}\n+     * method to determine the client info properties supported by the driver.\n+     *\n+     * @param name          The name of the client info property to retrieve\n+     *\n+     * @return                      The value of the client info property specified\n+     *\n+     * @throws SQLException         if the database server returns an error when\n+     *                              fetching the client info value from the database\n+     *                              or this method is called on a closed connection\n+     *\n+     * @since 1.6\n+     *\n+     * @see java.sql.DatabaseMetaData#getClientInfoProperties\n+     *\/\n+    String getClientInfo(String name)\n+        throws SQLException;\n@@ -1287,16 +1235,61 @@\n-\/**\n-  * Factory method for creating Struct objects.\n-  *\n-  * @param typeName the SQL type name of the SQL structured type that this {@code Struct}\n-  * object maps to. The typeName is the name of  a user-defined type that\n-  * has been defined for this database. It is the value returned by\n-  * {@code Struct.getSQLTypeName}.\n-\n-  * @param attributes the attributes that populate the returned object\n-  * @return a Struct object that maps to the given SQL type and is populated with the given attributes\n-  * @throws SQLException if a database error occurs, the typeName is null or this method is called on a closed connection\n-  * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this data type\n-  * @since 1.6\n-  *\/\n- Struct createStruct(String typeName, Object[] attributes)\n-throws SQLException;\n+    \/**\n+     * Returns a list containing the name and current value of each client info\n+     * property supported by the driver.  The value of a client info property\n+     * may be null if the property has not been set and does not have a\n+     * default value.\n+     *\n+     * @return      A {@code Properties} object that contains the name and current value of\n+     *                      each of the client info properties supported by the driver.\n+     *\n+     * @throws      SQLException if the database server returns an error when\n+     *                      fetching the client info values from the database\n+     * or this method is called on a closed connection\n+     *\n+     * @since 1.6\n+     *\/\n+    Properties getClientInfo()\n+        throws SQLException;\n+\n+    \/**\n+     * Factory method for creating Array objects.\n+     * <p>\n+     * <b>Note: <\/b>When {@code createArrayOf} is used to create an array object\n+     * that maps to a primitive data type, then it is implementation-defined\n+     * whether the {@code Array} object is an array of that primitive\n+     * data type or an array of {@code Object}.\n+     * <p>\n+     * <b>Note: <\/b>The JDBC driver is responsible for mapping the elements\n+     * {@code Object} array to the default JDBC SQL type defined in\n+     * java.sql.Types for the given class of {@code Object}. The default\n+     * mapping is specified in Appendix B of the JDBC specification.  If the\n+     * resulting JDBC type is not the appropriate type for the given typeName then\n+     * it is implementation defined whether an {@code SQLException} is\n+     * thrown or the driver supports the resulting conversion.\n+     *\n+     * @param typeName the SQL name of the type the elements of the array map to. The typeName is a\n+     * database-specific name which may be the name of a built-in type, a user-defined type or a standard  SQL type supported by this database. This\n+     *  is the value returned by {@code Array.getBaseTypeName}\n+     * @param elements the elements that populate the returned object\n+     * @return an Array object whose elements map to the specified SQL type\n+     * @throws SQLException if a database error occurs, the JDBC type is not\n+     *  appropriate for the typeName and the conversion is not supported, the typeName is null or this method is called on a closed connection\n+     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this data type\n+     * @since 1.6\n+     *\/\n+    Array createArrayOf(String typeName, Object[] elements) throws SQLException;\n+\n+    \/**\n+     * Factory method for creating Struct objects.\n+     *\n+     * @param typeName the SQL type name of the SQL structured type that this {@code Struct}\n+     * object maps to. The typeName is the name of  a user-defined type that\n+     * has been defined for this database. It is the value returned by\n+     * {@code Struct.getSQLTypeName}.\n+     *\n+     * @param attributes the attributes that populate the returned object\n+     * @return a Struct object that maps to the given SQL type and is populated with the given attributes\n+     * @throws SQLException if a database error occurs, the typeName is null or this method is called on a closed connection\n+     * @throws SQLFeatureNotSupportedException  if the JDBC driver does not support this data type\n+     * @since 1.6\n+     *\/\n+    Struct createStruct(String typeName, Object[] attributes) throws SQLException;\n@@ -1466,1 +1459,1 @@\n-     \/**\n+    \/**\n@@ -1537,1 +1530,1 @@\n-     *<p>\n+     * <p>\n@@ -1568,1 +1561,1 @@\n-            \/\/ Default method takes no action\n+        \/\/ Default method takes no action\n@@ -1606,2 +1599,2 @@\n-            ShardingKey superShardingKey, int timeout)\n-            throws SQLException {\n+                                          ShardingKey superShardingKey,\n+                                          int timeout) throws SQLException {\n@@ -1641,1 +1634,1 @@\n-            throws SQLException {\n+        throws SQLException {\n@@ -1667,1 +1660,1 @@\n-            throws SQLException {\n+        throws SQLException {\n@@ -1689,2 +1682,1 @@\n-    default void setShardingKey(ShardingKey shardingKey)\n-            throws SQLException {\n+    default void setShardingKey(ShardingKey shardingKey) throws SQLException {\n@@ -1693,0 +1685,1 @@\n+\n","filename":"src\/java.sql\/share\/classes\/java\/sql\/Connection.java","additions":182,"deletions":189,"binary":false,"changes":371,"status":"modified"}]}