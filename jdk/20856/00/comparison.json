{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID is not constant\n@@ -45,28 +44,1 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = -2212731951078526753L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = -1081892073854801359L;\n-\n-    private static final long serialVersionUID;\n-    static {\n-        boolean compat = false;\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK: exception means no compat with 1.0, too bad\n-        }\n-        if (compat)\n-            serialVersionUID = oldSerialVersionUID;\n-        else\n-            serialVersionUID = newSerialVersionUID;\n-    }\n+    private static final long serialVersionUID = -1081892073854801359L;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/ClassAttributeValueExp.java","additions":2,"deletions":30,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID not constant\n@@ -46,24 +45,1 @@\n-    \/* Serial version *\/\n-    private static final long serialVersionUID;\n-    static {\n-        \/* For complicated reasons, the serialVersionUID changed\n-           between JMX 1.0 and JMX 1.1, even though JMX 1.1 did not\n-           have compatibility code for this class.  So the\n-           serialization produced by this class with JMX 1.2 and\n-           jmx.serial.form=1.0 is not the same as that produced by\n-           this class with JMX 1.1 and jmx.serial.form=1.0.  However,\n-           the serialization without that property is the same, and\n-           that is the only form required by JMX 1.2.\n-        *\/\n-        long uid = 8644704819898565848L;\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            if (\"1.0\".equals(form))\n-                uid = 7043855487133450673L;\n-        } catch (Exception e) {\n-            \/\/ OK: exception means no compat with 1.0, too bad\n-        }\n-        serialVersionUID = uid;\n-    }\n+    private static final long serialVersionUID = 8644704819898565848L;\n","filename":"src\/java.management\/share\/classes\/javax\/management\/MBeanAttributeInfo.java","additions":2,"deletions":26,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,1 +56,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID is not constant\n@@ -59,37 +58,1 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = 1716977971058914352L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = -7516092053498031989L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-        new ObjectStreamField(\"message\", String.class),\n-        new ObjectStreamField(\"sequenceNumber\", Long.TYPE),\n-        new ObjectStreamField(\"source\", Object.class),\n-        new ObjectStreamField(\"sourceObjectName\", ObjectName.class),\n-        new ObjectStreamField(\"timeStamp\", Long.TYPE),\n-        new ObjectStreamField(\"type\", String.class),\n-        new ObjectStreamField(\"userData\", Object.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-        new ObjectStreamField(\"message\", String.class),\n-        new ObjectStreamField(\"sequenceNumber\", Long.TYPE),\n-        new ObjectStreamField(\"source\", Object.class),\n-        new ObjectStreamField(\"timeStamp\", Long.TYPE),\n-        new ObjectStreamField(\"type\", String.class),\n-        new ObjectStreamField(\"userData\", Object.class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n+    private static final long serialVersionUID = -7516092053498031989L;\n@@ -111,22 +74,9 @@\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK: exception means no compat with 1.0, too bad\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n-\n+    private static final ObjectStreamField[] serialPersistentFields =\n+    {\n+        new ObjectStreamField(\"message\", String.class),\n+        new ObjectStreamField(\"sequenceNumber\", Long.TYPE),\n+        new ObjectStreamField(\"source\", Object.class),\n+        new ObjectStreamField(\"timeStamp\", Long.TYPE),\n+        new ObjectStreamField(\"type\", String.class),\n+        new ObjectStreamField(\"userData\", Object.class)\n+    };\n@@ -381,16 +331,1 @@\n-        if (compat) {\n-            \/\/ Serializes this instance in the old serial form\n-            \/\/\n-            ObjectOutputStream.PutField fields = out.putFields();\n-            fields.put(\"type\", type);\n-            fields.put(\"sequenceNumber\", sequenceNumber);\n-            fields.put(\"timeStamp\", timeStamp);\n-            fields.put(\"userData\", userData);\n-            fields.put(\"message\", message);\n-            fields.put(\"source\", source);\n-            out.writeFields();\n-        } else {\n-            \/\/ Serializes this instance in the new serial form\n-            \/\/\n-            out.defaultWriteObject();\n-        }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/Notification.java","additions":12,"deletions":77,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID not constant\n@@ -51,29 +50,1 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = -6227876276058904000L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = -4679739485102359104L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-        new ObjectStreamField(\"longVal\", Long.TYPE),\n-        new ObjectStreamField(\"doubleVal\", Double.TYPE),\n-        new ObjectStreamField(\"valIsLong\", Boolean.TYPE)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-        new ObjectStreamField(\"val\", Number.class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n-\n+    private static final long serialVersionUID = -4679739485102359104L;\n@@ -85,1 +56,3 @@\n-    private static final ObjectStreamField[] serialPersistentFields;\n+    private static final ObjectStreamField[] serialPersistentFields = {\n+        new ObjectStreamField(\"val\", Number.class)\n+    };\n@@ -88,22 +61,0 @@\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK: exception means no compat with 1.0, too bad\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n-\n-\n@@ -192,38 +143,1 @@\n-      if (compat)\n-      {\n-        \/\/ Read an object serialized in the old serial form\n-        \/\/\n-        double doubleVal;\n-        long longVal;\n-        boolean isLong;\n-        ObjectInputStream.GetField fields = in.readFields();\n-        doubleVal = fields.get(\"doubleVal\", (double)0);\n-        if (fields.defaulted(\"doubleVal\"))\n-        {\n-          throw new NullPointerException(\"doubleVal\");\n-        }\n-        longVal = fields.get(\"longVal\", (long)0);\n-        if (fields.defaulted(\"longVal\"))\n-        {\n-          throw new NullPointerException(\"longVal\");\n-        }\n-        isLong = fields.get(\"valIsLong\", false);\n-        if (fields.defaulted(\"valIsLong\"))\n-        {\n-          throw new NullPointerException(\"valIsLong\");\n-        }\n-        if (isLong)\n-        {\n-          this.val = longVal;\n-        }\n-        else\n-        {\n-          this.val = doubleVal;\n-        }\n-      }\n-      else\n-      {\n-        \/\/ Read an object serialized in the new serial form\n-        \/\/\n-        in.defaultReadObject();\n-      }\n+      in.defaultReadObject();\n@@ -238,16 +152,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"doubleVal\", doubleValue());\n-        fields.put(\"longVal\", longValue());\n-        fields.put(\"valIsLong\", isLong());\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/NumericValueExp.java","additions":7,"deletions":108,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -225,1 +225,0 @@\n-@SuppressWarnings(\"serial\") \/\/ don't complain serialVersionUID not constant\n@@ -297,51 +296,1 @@\n-    \/\/ Serialization compatibility stuff -------------------->\n-\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = -5467795090068647408L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = 1081892073854801359L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-        new ObjectStreamField(\"domain\", String.class),\n-        new ObjectStreamField(\"propertyList\", Hashtable.class),\n-        new ObjectStreamField(\"propertyListString\", String.class),\n-        new ObjectStreamField(\"canonicalName\", String.class),\n-        new ObjectStreamField(\"pattern\", Boolean.TYPE),\n-        new ObjectStreamField(\"propertyPattern\", Boolean.TYPE)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields = { };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK: exception means no compat with 1.0, too bad\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-\n-    \/\/\n-    \/\/ Serialization compatibility stuff <==============================\n+    private static final long serialVersionUID = 1081892073854801359L;\n@@ -1092,3 +1041,1 @@\n-     *               <li>In the current serial form (value of property\n-     *                   <code>jmx.serial.form<\/code> differs from\n-     *                   <code>1.0<\/code>): the string\n+     *               <li>In the current serial form the string\n@@ -1116,29 +1063,0 @@\n-     *               <li>In the old serial form (value of property\n-     *                   <code>jmx.serial.form<\/code> is\n-     *                   <code>1.0<\/code>): &lt;domain&gt; &lt;propertyList&gt;\n-     *                   &lt;propertyListString&gt; &lt;canonicalName&gt;\n-     *                   &lt;pattern&gt; &lt;propertyPattern&gt;,\n-     *                   where: <ul>\n-     *                            <li>&lt;domain&gt; represents the domain part\n-     *                                of the {@link ObjectName}<\/li>\n-     *                            <li>&lt;propertyList&gt; is the\n-     *                                {@link Hashtable} that contains all the\n-     *                                pairs (key,value) for this\n-     *                                {@link ObjectName}<\/li>\n-     *                            <li>&lt;propertyListString&gt; is the\n-     *                                {@link String} representation of the\n-     *                                list of properties in any order (not\n-     *                                mandatorily a canonical representation)\n-     *                                <\/li>\n-     *                            <li>&lt;canonicalName&gt; is the\n-     *                                {@link String} containing this\n-     *                                {@link ObjectName}'s canonical name<\/li>\n-     *                            <li>&lt;pattern&gt; is a boolean which is\n-     *                                <code>true<\/code> if this\n-     *                                {@link ObjectName} contains a pattern<\/li>\n-     *                            <li>&lt;propertyPattern&gt; is a boolean which\n-     *                                is <code>true<\/code> if this\n-     *                                {@link ObjectName} contains a pattern in\n-     *                                the list of properties<\/li>\n-     *                          <\/ul>\n-     *               <\/li>\n@@ -1151,24 +1069,2 @@\n-        if (compat) {\n-            \/\/ Read an object serialized in the old serial form\n-            \/\/\n-            \/\/in.defaultReadObject();\n-            final ObjectInputStream.GetField fields = in.readFields();\n-            String propListString =\n-                    (String)fields.get(\"propertyListString\", \"\");\n-\n-            \/\/ 6616825: take care of property patterns\n-            final boolean propPattern =\n-                    fields.get(\"propertyPattern\" , false);\n-            if (propPattern) {\n-                propListString =\n-                        (propListString.length()==0?\"*\":(propListString+\",*\"));\n-            }\n-\n-            cn = (String)fields.get(\"domain\", \"default\")+\n-                \":\"+ propListString;\n-        } else {\n-            \/\/ Read an object serialized in the new serial form\n-            \/\/\n-            in.defaultReadObject();\n-            cn = (String)in.readObject();\n-        }\n+        in.defaultReadObject();\n+        cn = (String)in.readObject();\n@@ -1187,3 +1083,1 @@\n-     *               <li>In the current serial form (value of property\n-     *                   <code>jmx.serial.form<\/code> differs from\n-     *                   <code>1.0<\/code>): the string\n+     *               <li>In the current serial form the string\n@@ -1211,29 +1105,0 @@\n-     *               <li>In the old serial form (value of property\n-     *                   <code>jmx.serial.form<\/code> is\n-     *                   <code>1.0<\/code>): &lt;domain&gt; &lt;propertyList&gt;\n-     *                   &lt;propertyListString&gt; &lt;canonicalName&gt;\n-     *                   &lt;pattern&gt; &lt;propertyPattern&gt;,\n-     *                   where: <ul>\n-     *                            <li>&lt;domain&gt; represents the domain part\n-     *                                of the {@link ObjectName}<\/li>\n-     *                            <li>&lt;propertyList&gt; is the\n-     *                                {@link Hashtable} that contains all the\n-     *                                pairs (key,value) for this\n-     *                                {@link ObjectName}<\/li>\n-     *                            <li>&lt;propertyListString&gt; is the\n-     *                                {@link String} representation of the\n-     *                                list of properties in any order (not\n-     *                                mandatorily a canonical representation)\n-     *                                <\/li>\n-     *                            <li>&lt;canonicalName&gt; is the\n-     *                                {@link String} containing this\n-     *                                {@link ObjectName}'s canonical name<\/li>\n-     *                            <li>&lt;pattern&gt; is a boolean which is\n-     *                                <code>true<\/code> if this\n-     *                                {@link ObjectName} contains a pattern<\/li>\n-     *                            <li>&lt;propertyPattern&gt; is a boolean which\n-     *                                is <code>true<\/code> if this\n-     *                                {@link ObjectName} contains a pattern in\n-     *                                the list of properties<\/li>\n-     *                          <\/ul>\n-     *               <\/li>\n@@ -1245,20 +1110,2 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/ Read CR 6441274 before making any changes to this code\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"domain\", _canonicalName.substring(0, getDomainLength()));\n-        fields.put(\"propertyList\", getKeyPropertyList());\n-        fields.put(\"propertyListString\", getKeyPropertyListString());\n-        fields.put(\"canonicalName\", _canonicalName);\n-        fields.put(\"pattern\", (_compressed_storage & (DOMAIN_PATTERN | PROPLIST_PATTERN)) != 0);\n-        fields.put(\"propertyPattern\", isPropertyListPattern());\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-        out.writeObject(getSerializedNameString());\n-      }\n+      out.defaultWriteObject();\n+      out.writeObject(getSerializedNameString());\n","filename":"src\/java.management\/share\/classes\/javax\/management\/ObjectName.java","additions":8,"deletions":161,"binary":false,"changes":169,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID not constant\n@@ -89,21 +88,2 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = 8071560848919417985L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = -6292969195866300415L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"descriptor\", HashMap.class),\n-      new ObjectStreamField(\"currClass\", String.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n+    private static final long serialVersionUID = -6292969195866300415L;\n+    private static final ObjectStreamField[] serialPersistentFields =\n@@ -113,34 +93,0 @@\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n-    \/**\n-     * @serialField descriptor HashMap The collection of fields representing this descriptor\n-     *\/\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static final String serialForm;\n-    static {\n-        serialForm = getForm();\n-        boolean compat = \"1.0\".equals(serialForm);  \/\/ serialForm may be null\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private static String getForm() {\n-        String form = null;\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            return  AccessController.doPrivileged(act);\n-        } catch (Exception e) {\n-            \/\/ OK: No compat with 1.0\n-            return null;\n-        }\n-    }\n-\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n@@ -1289,11 +1235,0 @@\n-    \/* If you set jmx.serial.form to \"1.2.0\" or \"1.2.1\", then we are\n-       bug-compatible with those versions.  Specifically, field names\n-       are forced to lower-case before being written.  This\n-       contradicts the spec, which, though it does not mention\n-       serialization explicitly, does say that the case of field names\n-       is preserved.  But in 1.2.0 and 1.2.1, this requirement was not\n-       met.  Instead, field names in the descriptor map were forced to\n-       lower case.  Those versions expect this to have happened to a\n-       descriptor they deserialize and e.g. getFieldValue will not\n-       find a field whose name is spelt with a different case.\n-    *\/\n@@ -1302,3 +1237,0 @@\n-        boolean compat = \"1.0\".equals(serialForm);\n-        if (compat)\n-            fields.put(\"currClass\", currClass);\n@@ -1318,9 +1250,1 @@\n-        final HashMap<String, Object> descriptor;\n-        if (compat || \"1.2.0\".equals(serialForm) ||\n-                \"1.2.1\".equals(serialForm)) {\n-            descriptor = new HashMap<>();\n-            for (Map.Entry<String, Object> entry : startMap.entrySet())\n-                descriptor.put(entry.getKey().toLowerCase(), entry.getValue());\n-        } else\n-            descriptor = new HashMap<>(startMap);\n-\n+        final HashMap<String, Object> descriptor = new HashMap<>(startMap);\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/DescriptorSupport.java","additions":4,"deletions":80,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID not constant\n@@ -52,22 +51,2 @@\n-\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = 3711724570458346634L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = 1190536278266811217L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"msgStr\", String.class),\n-      new ObjectStreamField(\"relatedExcept\", Exception.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n+    private static final long serialVersionUID = 1190536278266811217L;\n+    private static final ObjectStreamField[] serialPersistentFields =\n@@ -77,27 +56,0 @@\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n-    \/**\n-     * @serialField exception Exception Encapsulated {@link Exception}\n-     *\/\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK: No compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n@@ -159,17 +111,1 @@\n-      if (compat)\n-      {\n-        \/\/ Read an object serialized in the old serial form\n-        \/\/\n-        ObjectInputStream.GetField fields = in.readFields();\n-        exception = (Exception) fields.get(\"relatedExcept\", null);\n-        if (fields.defaulted(\"relatedExcept\"))\n-        {\n-          throw new NullPointerException(\"relatedExcept\");\n-        }\n-      }\n-      else\n-      {\n-        \/\/ Read an object serialized in the new serial form\n-        \/\/\n-        in.defaultReadObject();\n-      }\n+      in.defaultReadObject();\n@@ -184,15 +120,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"relatedExcept\", exception);\n-        fields.put(\"msgStr\", ((exception != null)?exception.getMessage():\"\"));\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/InvalidTargetObjectTypeException.java","additions":5,"deletions":83,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,1 +119,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID is not constant\n@@ -124,52 +123,5 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = 7098036920755973145L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = 6181543027787327345L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"attrDescriptor\", Descriptor.class),\n-      new ObjectStreamField(\"currClass\", String.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"attrDescriptor\", Descriptor.class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n-    \/**\n-     * @serialField attrDescriptor Descriptor The {@link Descriptor}\n-     * containing the metadata corresponding to this attribute\n-     *\/\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK: No compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n+        private static final long serialVersionUID = 6181543027787327345L;\n+        private static final ObjectStreamField[] serialPersistentFields =\n+        {\n+            new ObjectStreamField(\"attrDescriptor\", Descriptor.class)\n+        };\n@@ -511,15 +463,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"attrDescriptor\", attrDescriptor);\n-        fields.put(\"currClass\", currClass);\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/ModelMBeanAttributeInfo.java","additions":7,"deletions":69,"binary":false,"changes":76,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,2 +92,0 @@\n-\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID is not constant\n@@ -98,51 +96,8 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = -4440125391095574518L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = 3862947819818064362L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"consDescriptor\", Descriptor.class),\n-      new ObjectStreamField(\"currClass\", String.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"consDescriptor\", Descriptor.class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n-    \/**\n-     * @serialField consDescriptor Descriptor The {@link Descriptor} containing the metadata for this instance\n-     *\/\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK: No compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n+        private static final long serialVersionUID = 3862947819818064362L;\n+        \/**\n+         * @serialField consDescriptor Descriptor The {@link Descriptor} containing the metadata for this instance\n+         *\/\n+        private static final ObjectStreamField[] serialPersistentFields =\n+        {\n+          new ObjectStreamField(\"consDescriptor\", Descriptor.class)\n+        };\n@@ -467,15 +422,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"consDescriptor\", consDescriptor);\n-        fields.put(\"currClass\", currClass);\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/ModelMBeanConstructorInfo.java","additions":10,"deletions":69,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,0 @@\n-@SuppressWarnings(\"serial\")\n@@ -87,35 +86,1 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = -3944083498453227709L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = -1935722590756516193L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-        new ObjectStreamField(\"modelMBeanDescriptor\", Descriptor.class),\n-                new ObjectStreamField(\"mmbAttributes\", MBeanAttributeInfo[].class),\n-                new ObjectStreamField(\"mmbConstructors\", MBeanConstructorInfo[].class),\n-                new ObjectStreamField(\"mmbNotifications\", MBeanNotificationInfo[].class),\n-                new ObjectStreamField(\"mmbOperations\", MBeanOperationInfo[].class),\n-                new ObjectStreamField(\"currClass\", String.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-        new ObjectStreamField(\"modelMBeanDescriptor\", Descriptor.class),\n-                new ObjectStreamField(\"modelMBeanAttributes\", MBeanAttributeInfo[].class),\n-                new ObjectStreamField(\"modelMBeanConstructors\", MBeanConstructorInfo[].class),\n-                new ObjectStreamField(\"modelMBeanNotifications\", MBeanNotificationInfo[].class),\n-                new ObjectStreamField(\"modelMBeanOperations\", MBeanOperationInfo[].class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n+    private static final long serialVersionUID = -1935722590756516193L;\n@@ -138,21 +103,8 @@\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK: No compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n+    private static final ObjectStreamField[] serialPersistentFields =\n+    {\n+        new ObjectStreamField(\"modelMBeanDescriptor\", Descriptor.class),\n+                new ObjectStreamField(\"modelMBeanAttributes\", MBeanAttributeInfo[].class),\n+                new ObjectStreamField(\"modelMBeanConstructors\", MBeanConstructorInfo[].class),\n+                new ObjectStreamField(\"modelMBeanNotifications\", MBeanNotificationInfo[].class),\n+                new ObjectStreamField(\"modelMBeanOperations\", MBeanOperationInfo[].class)\n+    };\n@@ -960,34 +912,2 @@\n-        if (compat) {\n-            \/\/ Read an object serialized in the old serial form\n-            \/\/\n-            ObjectInputStream.GetField fields = in.readFields();\n-            modelMBeanDescriptor =\n-                    (Descriptor) fields.get(\"modelMBeanDescriptor\", null);\n-            if (fields.defaulted(\"modelMBeanDescriptor\")) {\n-                throw new NullPointerException(\"modelMBeanDescriptor\");\n-            }\n-            modelMBeanAttributes =\n-                    (MBeanAttributeInfo[]) fields.get(\"mmbAttributes\", null);\n-            if (fields.defaulted(\"mmbAttributes\")) {\n-                throw new NullPointerException(\"mmbAttributes\");\n-            }\n-            modelMBeanConstructors =\n-                    (MBeanConstructorInfo[]) fields.get(\"mmbConstructors\", null);\n-            if (fields.defaulted(\"mmbConstructors\")) {\n-                throw new NullPointerException(\"mmbConstructors\");\n-            }\n-            modelMBeanNotifications =\n-                    (MBeanNotificationInfo[]) fields.get(\"mmbNotifications\", null);\n-            if (fields.defaulted(\"mmbNotifications\")) {\n-                throw new NullPointerException(\"mmbNotifications\");\n-            }\n-            modelMBeanOperations =\n-                    (MBeanOperationInfo[]) fields.get(\"mmbOperations\", null);\n-            if (fields.defaulted(\"mmbOperations\")) {\n-                throw new NullPointerException(\"mmbOperations\");\n-            }\n-        } else {\n-            \/\/ Read an object serialized in the new serial form\n-            \/\/\n-            in.defaultReadObject();\n-        }\n+\n+        in.defaultReadObject();\n@@ -1002,16 +922,1 @@\n-        if (compat) {\n-            \/\/ Serializes this instance in the old serial form\n-            \/\/\n-            ObjectOutputStream.PutField fields = out.putFields();\n-            fields.put(\"modelMBeanDescriptor\", modelMBeanDescriptor);\n-            fields.put(\"mmbAttributes\", modelMBeanAttributes);\n-            fields.put(\"mmbConstructors\", modelMBeanConstructors);\n-            fields.put(\"mmbNotifications\", modelMBeanNotifications);\n-            fields.put(\"mmbOperations\", modelMBeanOperations);\n-            fields.put(\"currClass\", currClass);\n-            out.writeFields();\n-        } else {\n-            \/\/ Serializes this instance in the new serial form\n-            \/\/\n-            out.defaultWriteObject();\n-        }\n+        out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/ModelMBeanInfoSupport.java","additions":13,"deletions":108,"binary":false,"changes":121,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,2 +99,0 @@\n-\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID is not constant\n@@ -105,21 +103,2 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form\n-    \/\/ depends on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = -5211564525059047097L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = -7445681389570207141L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"notificationDescriptor\", Descriptor.class),\n-      new ObjectStreamField(\"currClass\", String.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n+    private static final long serialVersionUID = -7445681389570207141L;\n+    private static final ObjectStreamField[] serialPersistentFields =\n@@ -129,28 +108,0 @@\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n-    \/**\n-     * @serialField notificationDescriptor Descriptor The descriptor\n-     *   containing the appropriate metadata for this instance\n-     *\/\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK: No compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n@@ -401,12 +352,1 @@\n-        if (compat) {\n-            \/\/ Serializes this instance in the old serial form\n-            \/\/\n-            ObjectOutputStream.PutField fields = out.putFields();\n-            fields.put(\"notificationDescriptor\", notificationDescriptor);\n-            fields.put(\"currClass\", currClass);\n-            out.writeFields();\n-        } else {\n-            \/\/ Serializes this instance in the new serial form\n-            \/\/\n-            out.defaultWriteObject();\n-        }\n+        out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/ModelMBeanNotificationInfo.java","additions":4,"deletions":64,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,2 +111,0 @@\n-\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID is not constant\n@@ -117,52 +115,9 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = 9087646304346171239L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = 6532732096650090465L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"operationDescriptor\", Descriptor.class),\n-      new ObjectStreamField(\"currClass\", String.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"operationDescriptor\", Descriptor.class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n-    \/**\n-     * @serialField operationDescriptor Descriptor The descriptor\n-     * containing the appropriate metadata for this instance\n-     *\/\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK: No compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n+        private static final long serialVersionUID = 6532732096650090465L;\n+        \/**\n+         * @serialField operationDescriptor Descriptor The descriptor\n+         * containing the appropriate metadata for this instance\n+         *\/\n+        private static final ObjectStreamField[] serialPersistentFields =\n+        {\n+          new ObjectStreamField(\"operationDescriptor\", Descriptor.class)\n+        };\n@@ -518,13 +473,0 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"operationDescriptor\", operationDescriptor);\n-        fields.put(\"currClass\", currClass);\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n@@ -532,1 +474,0 @@\n-      }\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/ModelMBeanOperationInfo.java","additions":10,"deletions":69,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,1 +52,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID not constant\n@@ -56,44 +55,1 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = -7780049316655891976L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = 3176664577895105181L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"msgStr\", String.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-  private static final ObjectStreamField[] newSerialPersistentFields = { };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK: No compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n+    private static final long serialVersionUID = 3176664577895105181L;\n@@ -144,14 +100,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"msgStr\", getMessage());\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/modelmbean\/XMLParseException.java","additions":3,"deletions":60,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID must be constant\n@@ -63,28 +62,1 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = 6001782699077323605L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = 2605900539589789736L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"mySelectObjNameList\", Vector.class),\n-      new ObjectStreamField(\"myDeselectObjNameList\", Vector.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"selectedNames\", List.class),\n-      new ObjectStreamField(\"deselectedNames\", List.class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n+    private static final long serialVersionUID = 2605900539589789736L;\n@@ -105,21 +77,5 @@\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK : Too bad, no compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n+    private static final ObjectStreamField[] serialPersistentFields =\n+    {\n+      new ObjectStreamField(\"selectedNames\", List.class),\n+      new ObjectStreamField(\"deselectedNames\", List.class)\n+    };\n@@ -408,22 +364,1 @@\n-      if (compat)\n-      {\n-        \/\/ Read an object serialized in the old serial form\n-        \/\/\n-        ObjectInputStream.GetField fields = in.readFields();\n-        selectedNames = cast(fields.get(\"mySelectObjNameList\", null));\n-        if (fields.defaulted(\"mySelectObjNameList\"))\n-        {\n-          throw new NullPointerException(\"mySelectObjNameList\");\n-        }\n-        deselectedNames = cast(fields.get(\"myDeselectObjNameList\", null));\n-        if (fields.defaulted(\"myDeselectObjNameList\"))\n-        {\n-          throw new NullPointerException(\"myDeselectObjNameList\");\n-        }\n-      }\n-      else\n-      {\n-        \/\/ Read an object serialized in the new serial form\n-        \/\/\n-        in.defaultReadObject();\n-      }\n+      in.defaultReadObject();\n@@ -438,15 +373,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"mySelectObjNameList\", selectedNames);\n-        fields.put(\"myDeselectObjNameList\", deselectedNames);\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/MBeanServerNotificationFilter.java","additions":9,"deletions":88,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -60,1 +60,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID not constant\n@@ -63,38 +62,1 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = -2126464566505527147L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = -6871117877523310399L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-        new ObjectStreamField(\"myNewRoleValue\", ArrayList.class),\n-        new ObjectStreamField(\"myOldRoleValue\", ArrayList.class),\n-        new ObjectStreamField(\"myRelId\", String.class),\n-        new ObjectStreamField(\"myRelObjName\", ObjectName.class),\n-        new ObjectStreamField(\"myRelTypeName\", String.class),\n-        new ObjectStreamField(\"myRoleName\", String.class),\n-        new ObjectStreamField(\"myUnregMBeanList\", ArrayList.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-        new ObjectStreamField(\"newRoleValue\", List.class),\n-        new ObjectStreamField(\"oldRoleValue\", List.class),\n-        new ObjectStreamField(\"relationId\", String.class),\n-        new ObjectStreamField(\"relationObjName\", ObjectName.class),\n-        new ObjectStreamField(\"relationTypeName\", String.class),\n-        new ObjectStreamField(\"roleName\", String.class),\n-        new ObjectStreamField(\"unregisterMBeanList\", List.class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n+    private static final long serialVersionUID = -6871117877523310399L;\n@@ -118,21 +80,10 @@\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK : Too bad, no compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n+    private static final ObjectStreamField[] serialPersistentFields =\n+    {\n+        new ObjectStreamField(\"newRoleValue\", List.class),\n+        new ObjectStreamField(\"oldRoleValue\", List.class),\n+        new ObjectStreamField(\"relationId\", String.class),\n+        new ObjectStreamField(\"relationObjName\", ObjectName.class),\n+        new ObjectStreamField(\"relationTypeName\", String.class),\n+        new ObjectStreamField(\"roleName\", String.class),\n+        new ObjectStreamField(\"unregisterMBeanList\", List.class)\n+    };\n@@ -544,4 +495,3 @@\n-        if (compat) {\n-            tmpRelationId = (String)fields.get(\"myRelId\", null);\n-            tmpRelationTypeName = (String)fields.get(\"myRelTypeName\", null);\n-            tmpRoleName = (String)fields.get(\"myRoleName\", null);\n+        tmpRelationId = (String)fields.get(\"relationId\", null);\n+        tmpRelationTypeName = (String)fields.get(\"relationTypeName\", null);\n+        tmpRoleName = (String)fields.get(\"roleName\", null);\n@@ -549,15 +499,4 @@\n-            tmpRelationObjName = (ObjectName)fields.get(\"myRelObjName\", null);\n-            tmpNewRoleValue = cast(fields.get(\"myNewRoleValue\", null));\n-            tmpOldRoleValue = cast(fields.get(\"myOldRoleValue\", null));\n-            tmpUnregMBeanList = cast(fields.get(\"myUnregMBeanList\", null));\n-        }\n-        else {\n-            tmpRelationId = (String)fields.get(\"relationId\", null);\n-            tmpRelationTypeName = (String)fields.get(\"relationTypeName\", null);\n-            tmpRoleName = (String)fields.get(\"roleName\", null);\n-\n-            tmpRelationObjName = (ObjectName)fields.get(\"relationObjName\", null);\n-            tmpNewRoleValue = cast(fields.get(\"newRoleValue\", null));\n-            tmpOldRoleValue = cast(fields.get(\"oldRoleValue\", null));\n-            tmpUnregMBeanList = cast(fields.get(\"unregisterMBeanList\", null));\n-        }\n+        tmpRelationObjName = (ObjectName)fields.get(\"relationObjName\", null);\n+        tmpNewRoleValue = cast(fields.get(\"newRoleValue\", null));\n+        tmpOldRoleValue = cast(fields.get(\"oldRoleValue\", null));\n+        tmpUnregMBeanList = cast(fields.get(\"unregisterMBeanList\", null));\n@@ -594,20 +533,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"myNewRoleValue\", newRoleValue);\n-        fields.put(\"myOldRoleValue\", oldRoleValue);\n-        fields.put(\"myRelId\", relationId);\n-        fields.put(\"myRelObjName\", relationObjName);\n-        fields.put(\"myRelTypeName\", relationTypeName);\n-        fields.put(\"myRoleName\",roleName);\n-        fields.put(\"myUnregMBeanList\", unregisterMBeanList);\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RelationNotification.java","additions":20,"deletions":100,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -66,1 +66,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID not constant\n@@ -69,30 +68,1 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = -8179019472410837190L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = 4611072955724144607L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"myTypeName\", String.class),\n-      new ObjectStreamField(\"myRoleName2InfoMap\", HashMap.class),\n-      new ObjectStreamField(\"myIsInRelServFlg\", boolean.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"typeName\", String.class),\n-      new ObjectStreamField(\"roleName2InfoMap\", Map.class),\n-      new ObjectStreamField(\"isInRelationService\", boolean.class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n+    private static final long serialVersionUID = 4611072955724144607L;\n@@ -106,21 +76,6 @@\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK : Too bad, no compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n+    private static final ObjectStreamField[] serialPersistentFields =\n+    {\n+      new ObjectStreamField(\"typeName\", String.class),\n+      new ObjectStreamField(\"roleName2InfoMap\", Map.class),\n+      new ObjectStreamField(\"isInRelationService\", boolean.class)\n+    };\n@@ -424,27 +379,1 @@\n-      if (compat)\n-      {\n-        \/\/ Read an object serialized in the old serial form\n-        \/\/\n-        ObjectInputStream.GetField fields = in.readFields();\n-        typeName = (String) fields.get(\"myTypeName\", null);\n-        if (fields.defaulted(\"myTypeName\"))\n-        {\n-          throw new NullPointerException(\"myTypeName\");\n-        }\n-        roleName2InfoMap = cast(fields.get(\"myRoleName2InfoMap\", null));\n-        if (fields.defaulted(\"myRoleName2InfoMap\"))\n-        {\n-          throw new NullPointerException(\"myRoleName2InfoMap\");\n-        }\n-        isInRelationService = fields.get(\"myIsInRelServFlg\", false);\n-        if (fields.defaulted(\"myIsInRelServFlg\"))\n-        {\n-          throw new NullPointerException(\"myIsInRelServFlg\");\n-        }\n-      }\n-      else\n-      {\n-        \/\/ Read an object serialized in the new serial form\n-        \/\/\n-        in.defaultReadObject();\n-      }\n+      in.defaultReadObject();\n@@ -459,16 +388,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"myTypeName\", typeName);\n-        fields.put(\"myRoleName2InfoMap\", roleName2InfoMap);\n-        fields.put(\"myIsInRelServFlg\", isInRelationService);\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RelationTypeSupport.java","additions":10,"deletions":96,"binary":false,"changes":106,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID not constant\n@@ -57,28 +56,1 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = -1959486389343113026L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = -279985518429862552L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"myName\", String.class),\n-      new ObjectStreamField(\"myObjNameList\", ArrayList.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"name\", String.class),\n-      new ObjectStreamField(\"objectNameList\", List.class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n+    private static final long serialVersionUID = -279985518429862552L;\n@@ -89,21 +61,5 @@\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK : Too bad, no compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n+    private static final ObjectStreamField[] serialPersistentFields =\n+    {\n+      new ObjectStreamField(\"name\", String.class),\n+      new ObjectStreamField(\"objectNameList\", List.class)\n+    };\n@@ -293,22 +249,1 @@\n-      if (compat)\n-      {\n-        \/\/ Read an object serialized in the old serial form\n-        \/\/\n-        ObjectInputStream.GetField fields = in.readFields();\n-        name = (String) fields.get(\"myName\", null);\n-        if (fields.defaulted(\"myName\"))\n-        {\n-          throw new NullPointerException(\"myName\");\n-        }\n-        objectNameList = cast(fields.get(\"myObjNameList\", null));\n-        if (fields.defaulted(\"myObjNameList\"))\n-        {\n-          throw new NullPointerException(\"myObjNameList\");\n-        }\n-      }\n-      else\n-      {\n-        \/\/ Read an object serialized in the new serial form\n-        \/\/\n-        in.defaultReadObject();\n-      }\n+      in.defaultReadObject();\n@@ -323,15 +258,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"myName\", name);\n-        fields.put(\"myObjNameList\", objectNameList);\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/Role.java","additions":9,"deletions":88,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,1 +49,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID not constant\n@@ -52,38 +51,1 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = 7227256952085334351L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = 2504952983494636987L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"myName\", String.class),\n-      new ObjectStreamField(\"myIsReadableFlg\", boolean.class),\n-      new ObjectStreamField(\"myIsWritableFlg\", boolean.class),\n-      new ObjectStreamField(\"myDescription\", String.class),\n-      new ObjectStreamField(\"myMinDegree\", int.class),\n-      new ObjectStreamField(\"myMaxDegree\", int.class),\n-      new ObjectStreamField(\"myRefMBeanClassName\", String.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"name\", String.class),\n-      new ObjectStreamField(\"isReadable\", boolean.class),\n-      new ObjectStreamField(\"isWritable\", boolean.class),\n-      new ObjectStreamField(\"description\", String.class),\n-      new ObjectStreamField(\"minDegree\", int.class),\n-      new ObjectStreamField(\"maxDegree\", int.class),\n-      new ObjectStreamField(\"referencedMBeanClassName\", String.class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n+    private static final long serialVersionUID = 2504952983494636987L;\n@@ -99,21 +61,10 @@\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK : Too bad, no compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n+    private static final ObjectStreamField[] serialPersistentFields =\n+    {\n+      new ObjectStreamField(\"name\", String.class),\n+      new ObjectStreamField(\"isReadable\", boolean.class),\n+      new ObjectStreamField(\"isWritable\", boolean.class),\n+      new ObjectStreamField(\"description\", String.class),\n+      new ObjectStreamField(\"minDegree\", int.class),\n+      new ObjectStreamField(\"maxDegree\", int.class),\n+      new ObjectStreamField(\"referencedMBeanClassName\", String.class)\n+    };\n@@ -533,47 +484,1 @@\n-      if (compat)\n-      {\n-        \/\/ Read an object serialized in the old serial form\n-        \/\/\n-        ObjectInputStream.GetField fields = in.readFields();\n-        name = (String) fields.get(\"myName\", null);\n-        if (fields.defaulted(\"myName\"))\n-        {\n-          throw new NullPointerException(\"myName\");\n-        }\n-        isReadable = fields.get(\"myIsReadableFlg\", false);\n-        if (fields.defaulted(\"myIsReadableFlg\"))\n-        {\n-          throw new NullPointerException(\"myIsReadableFlg\");\n-        }\n-        isWritable = fields.get(\"myIsWritableFlg\", false);\n-        if (fields.defaulted(\"myIsWritableFlg\"))\n-        {\n-          throw new NullPointerException(\"myIsWritableFlg\");\n-        }\n-        description = (String) fields.get(\"myDescription\", null);\n-        if (fields.defaulted(\"myDescription\"))\n-        {\n-          throw new NullPointerException(\"myDescription\");\n-        }\n-        minDegree = fields.get(\"myMinDegree\", 0);\n-        if (fields.defaulted(\"myMinDegree\"))\n-        {\n-          throw new NullPointerException(\"myMinDegree\");\n-        }\n-        maxDegree = fields.get(\"myMaxDegree\", 0);\n-        if (fields.defaulted(\"myMaxDegree\"))\n-        {\n-          throw new NullPointerException(\"myMaxDegree\");\n-        }\n-        referencedMBeanClassName = (String) fields.get(\"myRefMBeanClassName\", null);\n-        if (fields.defaulted(\"myRefMBeanClassName\"))\n-        {\n-          throw new NullPointerException(\"myRefMBeanClassName\");\n-        }\n-      }\n-      else\n-      {\n-        \/\/ Read an object serialized in the new serial form\n-        \/\/\n-        in.defaultReadObject();\n-      }\n+      in.defaultReadObject();\n@@ -588,20 +493,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"myName\", name);\n-        fields.put(\"myIsReadableFlg\", isReadable);\n-        fields.put(\"myIsWritableFlg\", isWritable);\n-        fields.put(\"myDescription\", description);\n-        fields.put(\"myMinDegree\", minDegree);\n-        fields.put(\"myMaxDegree\", maxDegree);\n-        fields.put(\"myRefMBeanClassName\", referencedMBeanClassName);\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RoleInfo.java","additions":14,"deletions":128,"binary":false,"changes":142,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,1 +47,0 @@\n-@SuppressWarnings(\"serial\")\n@@ -50,28 +49,1 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = 3786616013762091099L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = -6304063118040985512L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"myRoleList\", RoleList.class),\n-      new ObjectStreamField(\"myRoleUnresList\", RoleUnresolvedList.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"roleList\", RoleList.class),\n-      new ObjectStreamField(\"unresolvedRoleList\", RoleUnresolvedList.class)\n-    };\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n+    private static final long serialVersionUID = -6304063118040985512L;\n@@ -82,21 +54,5 @@\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK : Too bad, no compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n+    private static final ObjectStreamField[] serialPersistentFields =\n+    {\n+      new ObjectStreamField(\"roleList\", RoleList.class),\n+      new ObjectStreamField(\"unresolvedRoleList\", RoleUnresolvedList.class)\n+    };\n@@ -209,22 +165,1 @@\n-      if (compat)\n-      {\n-        \/\/ Read an object serialized in the old serial form\n-        \/\/\n-        ObjectInputStream.GetField fields = in.readFields();\n-        roleList = (RoleList) fields.get(\"myRoleList\", null);\n-        if (fields.defaulted(\"myRoleList\"))\n-        {\n-          throw new NullPointerException(\"myRoleList\");\n-        }\n-        unresolvedRoleList = (RoleUnresolvedList) fields.get(\"myRoleUnresList\", null);\n-        if (fields.defaulted(\"myRoleUnresList\"))\n-        {\n-          throw new NullPointerException(\"myRoleUnresList\");\n-        }\n-      }\n-      else\n-      {\n-        \/\/ Read an object serialized in the new serial form\n-        \/\/\n-        in.defaultReadObject();\n-      }\n+      in.defaultReadObject();\n@@ -239,15 +174,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"myRoleList\", roleList);\n-        fields.put(\"myRoleUnresList\", unresolvedRoleList);\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RoleResult.java","additions":9,"deletions":88,"binary":false,"changes":97,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +55,0 @@\n-@SuppressWarnings(\"serial\")  \/\/ serialVersionUID not constant\n@@ -58,22 +57,6 @@\n-    \/\/ Serialization compatibility stuff:\n-    \/\/ Two serial forms are supported in this class. The selected form depends\n-    \/\/ on system property \"jmx.serial.form\":\n-    \/\/  - \"1.0\" for JMX 1.0\n-    \/\/  - any other value for JMX 1.1 and higher\n-    \/\/\n-    \/\/ Serial version for old serial form\n-    private static final long oldSerialVersionUID = -9026457686611660144L;\n-    \/\/\n-    \/\/ Serial version for new serial form\n-    private static final long newSerialVersionUID = -48350262537070138L;\n-    \/\/\n-    \/\/ Serializable fields in old serial form\n-    private static final ObjectStreamField[] oldSerialPersistentFields =\n-    {\n-      new ObjectStreamField(\"myRoleName\", String.class),\n-      new ObjectStreamField(\"myRoleValue\", ArrayList.class),\n-      new ObjectStreamField(\"myPbType\", int.class)\n-    };\n-    \/\/\n-    \/\/ Serializable fields in new serial form\n-    private static final ObjectStreamField[] newSerialPersistentFields =\n+    private static final long serialVersionUID = -48350262537070138L;\n+    \/** @serialField roleName String Role name\n+     *  @serialField roleValue List Role value ({@link List} of {@link ObjectName} objects)\n+     *  @serialField problemType int Problem type\n+     *\/\n+    private static final ObjectStreamField[] serialPersistentFields =\n@@ -85,28 +68,0 @@\n-    \/\/\n-    \/\/ Actual serial version and serial form\n-    private static final long serialVersionUID;\n-    \/** @serialField roleName String Role name\n-     *  @serialField roleValue List Role value ({@link List} of {@link ObjectName} objects)\n-     *  @serialField problemType int Problem type\n-     *\/\n-    private static final ObjectStreamField[] serialPersistentFields;\n-    private static boolean compat = false;\n-    static {\n-        try {\n-            GetPropertyAction act = new GetPropertyAction(\"jmx.serial.form\");\n-            @SuppressWarnings(\"removal\")\n-            String form = AccessController.doPrivileged(act);\n-            compat = (form != null && form.equals(\"1.0\"));\n-        } catch (Exception e) {\n-            \/\/ OK : Too bad, no compat with 1.0\n-        }\n-        if (compat) {\n-            serialPersistentFields = oldSerialPersistentFields;\n-            serialVersionUID = oldSerialVersionUID;\n-        } else {\n-            serialPersistentFields = newSerialPersistentFields;\n-            serialVersionUID = newSerialVersionUID;\n-        }\n-    }\n-    \/\/\n-    \/\/ END Serialization compatibility stuff\n@@ -307,27 +262,1 @@\n-      if (compat)\n-      {\n-        \/\/ Read an object serialized in the old serial form\n-        \/\/\n-        ObjectInputStream.GetField fields = in.readFields();\n-        roleName = (String) fields.get(\"myRoleName\", null);\n-        if (fields.defaulted(\"myRoleName\"))\n-        {\n-          throw new NullPointerException(\"myRoleName\");\n-        }\n-        roleValue = cast(fields.get(\"myRoleValue\", null));\n-        if (fields.defaulted(\"myRoleValue\"))\n-        {\n-          throw new NullPointerException(\"myRoleValue\");\n-        }\n-        problemType = fields.get(\"myPbType\", 0);\n-        if (fields.defaulted(\"myPbType\"))\n-        {\n-          throw new NullPointerException(\"myPbType\");\n-        }\n-      }\n-      else\n-      {\n-        \/\/ Read an object serialized in the new serial form\n-        \/\/\n-        in.defaultReadObject();\n-      }\n+      in.defaultReadObject();\n@@ -342,16 +271,1 @@\n-      if (compat)\n-      {\n-        \/\/ Serializes this instance in the old serial form\n-        \/\/\n-        ObjectOutputStream.PutField fields = out.putFields();\n-        fields.put(\"myRoleName\", roleName);\n-        fields.put(\"myRoleValue\", roleValue);\n-        fields.put(\"myPbType\", problemType);\n-        out.writeFields();\n-      }\n-      else\n-      {\n-        \/\/ Serializes this instance in the new serial form\n-        \/\/\n-        out.defaultWriteObject();\n-      }\n+      out.defaultWriteObject();\n","filename":"src\/java.management\/share\/classes\/javax\/management\/relation\/RoleUnresolved.java","additions":9,"deletions":95,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -1,263 +0,0 @@\n-\/*\n- * Copyright (c) 2004, 2015, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6211220 6616825\n- * @summary Test that jmx.serial.form=1.0 works for ObjectName\n- * @author Eamonn McManus, Daniel Fuchs\n- *\n- * @run clean SerialCompatTest\n- * @run build SerialCompatTest\n- * @run main\/othervm -Djdk.jmx.mbeans.allowNonPublic=true -Djmx.serial.form=1.0 SerialCompatTest\n- *\/\n-\n-import java.io.*;\n-import java.util.*;\n-import javax.management.ObjectName;\n-\n-public class SerialCompatTest {\n-\n-    public static void check6211220() throws Exception {\n-\n-        ObjectName on = new ObjectName(\"a:b=c\");\n-        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-        ObjectOutputStream oos = new ObjectOutputStream(bos);\n-        oos.writeObject(on);\n-        oos.close();\n-        byte[] bytes = bos.toByteArray();\n-        ByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n-        ObjectInputStream ois = new ObjectInputStream(bis);\n-        ObjectName on1 = (ObjectName) ois.readObject();\n-\n-        \/\/ if the bug is present, these will get NullPointerException\n-        for (int i = 0; i <= 11; i++) {\n-            String msg = \"6211220 case(\" + i + \")\";\n-            try {\n-                switch (i) {\n-                    case 0:\n-                        check(msg, on1.getDomain().equals(\"a\"));\n-                        break;\n-                    case 1:\n-                        check(msg, on1.getCanonicalName().equals(\"a:b=c\"));\n-                        break;\n-                    case 2:\n-                        check(msg, on1.getKeyPropertyListString()\n-                                .equals(\"b=c\"));\n-                        break;\n-                    case 3:\n-                        check(msg, on1.getCanonicalKeyPropertyListString()\n-                                .equals(\"b=c\"));\n-                        break;\n-                    case 4:\n-                        check(msg, on1.getKeyProperty(\"b\").equals(\"c\"));\n-                        break;\n-                    case 5:\n-                        check(msg, on1.getKeyPropertyList()\n-                                .equals(Collections.singletonMap(\"b\", \"c\")));\n-                        break;\n-                    case 6:\n-                        check(msg, !on1.isDomainPattern());\n-                        break;\n-                    case 7:\n-                        check(msg, !on1.isPattern());\n-                        break;\n-                    case 8:\n-                        check(msg, !on1.isPropertyPattern());\n-                        break;\n-                    case 9:\n-                        check(msg, on1.equals(on));\n-                        break;\n-                    case 10:\n-                        check(msg, on.equals(on1));\n-                        break;\n-                    case 11:\n-                        check(msg, on1.apply(on));\n-                        break;\n-                    default:\n-                        throw new Exception(msg + \": Test incorrect\");\n-                }\n-            } catch (Exception e) {\n-                System.out.println(msg + \": Test failed with exception:\");\n-                e.printStackTrace(System.out);\n-                failed = true;\n-            }\n-        }\n-\n-        if (failed) {\n-            throw new Exception(\"Some tests for 6211220 failed\");\n-        } else {\n-            System.out.println(\"All tests for 6211220 passed\");\n-        }\n-    }\n-\n-    static void checkName(String testname, ObjectName on)\n-            throws Exception {\n-        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n-        ObjectOutputStream oos = new ObjectOutputStream(bos);\n-        oos.writeObject(on);\n-        oos.close();\n-        byte[] bytes = bos.toByteArray();\n-        ByteArrayInputStream bis = new ByteArrayInputStream(bytes);\n-        ObjectInputStream ois = new ObjectInputStream(bis);\n-        ObjectName on1 = (ObjectName) ois.readObject();\n-        \/\/ if the bug is present, these will get NullPointerException\n-        for (int i = 0; i <= 11; i++) {\n-            String msg = testname + \" case(\" + i + \")\";\n-            try {\n-                switch (i) {\n-                    case 0:\n-                        check(msg, on1.getDomain().equals(on.getDomain()));\n-                        break;\n-                    case 1:\n-                        check(msg, on1.getCanonicalName().\n-                                equals(on.getCanonicalName()));\n-                        break;\n-                    case 2:\n-                        check(msg, on1.getKeyPropertyListString().\n-                                equals(on.getKeyPropertyListString()));\n-                        break;\n-                    case 3:\n-                        check(msg, on1.getCanonicalKeyPropertyListString().\n-                                equals(on.getCanonicalKeyPropertyListString()));\n-                        break;\n-                    case 4:\n-                        for (Object ko : on1.getKeyPropertyList().keySet()) {\n-                            final String key = (String) ko;\n-                            check(msg, on1.getKeyProperty(key).\n-                                    equals(on.getKeyProperty(key)));\n-                        }\n-                        for (Object ko : on.getKeyPropertyList().keySet()) {\n-                            final String key = (String) ko;\n-                            check(msg, on1.getKeyProperty(key).\n-                                    equals(on.getKeyProperty(key)));\n-                        }\n-                    case 5:\n-                        check(msg, on1.getKeyPropertyList()\n-                                .equals(on.getKeyPropertyList()));\n-                        break;\n-                    case 6:\n-                        check(msg, on1.isDomainPattern()==on.isDomainPattern());\n-                        break;\n-                    case 7:\n-                        check(msg, on1.isPattern() == on.isPattern());\n-                        break;\n-                    case 8:\n-                        check(msg,\n-                              on1.isPropertyPattern()==on.isPropertyPattern());\n-                        break;\n-                    case 9:\n-                        check(msg, on1.equals(on));\n-                        break;\n-                    case 10:\n-                        check(msg, on.equals(on1));\n-                        break;\n-                    case 11:\n-                        if (!on.isPattern()) {\n-                            check(msg, on1.apply(on));\n-                        }\n-                        break;\n-                    default:\n-                        throw new Exception(\"Test incorrect: case: \" + i);\n-                }\n-            } catch (Exception e) {\n-                System.out.println(\"Test (\" + i + \") failed with exception:\");\n-                e.printStackTrace(System.out);\n-                failed = true;\n-            }\n-        }\n-\n-    }\n-    private static String[] names6616825 = {\n-        \"a:b=c\", \"a:b=c,*\", \"*:*\", \":*\", \":b=c\", \":b=c,*\",\n-        \"a:*,b=c\", \":*\", \":*,b=c\", \"*x?:k=\\\"x\\\\*z\\\"\", \"*x?:k=\\\"x\\\\*z\\\",*\",\n-        \"*x?:*,k=\\\"x\\\\*z\\\"\", \"*x?:k=\\\"x\\\\*z\\\",*,b=c\"\n-    };\n-\n-    static void check6616825() throws Exception {\n-        System.out.println(\"Testing 616825\");\n-        for (String n : names6616825) {\n-            final ObjectName on;\n-            try {\n-                on = new ObjectName(n);\n-            } catch (Exception x) {\n-                failed = true;\n-                System.out.println(\"Unexpected failure for 6616825 [\" + n +\n-                        \"]: \" + x);\n-                x.printStackTrace(System.out);\n-                continue;\n-            }\n-            try {\n-                checkName(\"616825 \" + n, on);\n-            } catch (Exception x) {\n-                failed = true;\n-                System.out.println(\"6616825 failed for [\" + n + \"]: \" + x);\n-                x.printStackTrace(System.out);\n-            }\n-        }\n-\n-        if (failed) {\n-            throw new Exception(\"Some tests for 6616825 failed\");\n-        } else {\n-            System.out.println(\"All tests for 6616825 passed\");\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        \/* Check that we really are in jmx.serial.form=1.0 mode.\n-        The property is frozen the first time the ObjectName class\n-        is referenced so checking that it is set to the correct\n-        value now is not enough.  *\/\n-        ObjectStreamClass osc = ObjectStreamClass.lookup(ObjectName.class);\n-        if (osc.getFields().length != 6) {\n-            throw new Exception(\"Not using old serial form: fields: \" +\n-                    Arrays.asList(osc.getFields()));\n-        \/\/ new serial form has no fields, uses writeObject\n-        }\n-\n-        try {\n-            check6211220();\n-        } catch (Exception x) {\n-            System.err.println(x.getMessage());\n-        }\n-        try {\n-            check6616825();\n-        } catch (Exception x) {\n-            System.err.println(x.getMessage());\n-        }\n-\n-        if (failed) {\n-            throw new Exception(\"Some tests failed\");\n-        } else {\n-            System.out.println(\"All tests passed\");\n-        }\n-    }\n-\n-    private static void check(String msg, boolean condition) {\n-        if (!condition) {\n-            new Throwable(\"Test failed \" + msg).printStackTrace(System.out);\n-            failed = true;\n-        }\n-    }\n-    private static boolean failed;\n-}\n","filename":"test\/jdk\/javax\/management\/ObjectName\/SerialCompatTest.java","additions":0,"deletions":263,"binary":false,"changes":263,"status":"deleted"}]}