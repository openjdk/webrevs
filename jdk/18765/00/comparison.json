{"files":[{"patch":"@@ -223,0 +223,5 @@\n+  if (source == DCmd_Source_Internal && _args != nullptr && strcmp(_args, \"help\") == 0) {\n+     print_java_help(\"printStartupHelp\");\n+     vm_exit(0);\n+  }\n+\n@@ -244,1 +249,1 @@\n-void JfrDCmd::print_help(const char* name) const {\n+void JfrDCmd::print_java_help(const char* help_method) const {\n@@ -248,1 +253,1 @@\n-  JfrJavaArguments printHelp(&result, javaClass(), \"printHelp\", signature, thread);\n+  JfrJavaArguments printHelp(&result, javaClass(), help_method, signature, thread);\n@@ -253,0 +258,4 @@\n+void JfrDCmd::print_help(const char* name) const {\n+  print_java_help(\"printHelp\");\n+}\n+\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.cpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+  void print_java_help(const char* help_method) const;\n","filename":"src\/hotspot\/share\/jfr\/dcmd\/jfrDcmds.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -58,0 +58,1 @@\n+import jdk.jfr.internal.util.Utils;\n@@ -320,0 +321,12 @@\n+    public String[] printStartupHelp() {\n+        Map<String, String> parameters = Map.of(\n+            \"$SYNTAX\", \"-XX:StartFlightRecording:[options]\",\n+            \"$SOURCE\", \"-XX:StartFlightRecording:\",\n+            \"$DELIMITER\", \",\",\n+            \"$DELIMITER_NAME\", \"comma\",\n+            \"$DIRECTORY\", exampleDirectory(),\n+            \"$JFC_OPTIONS\", jfcOptions()\n+        );\n+        return Utils.format(helpTemplate(), parameters).lines().toArray(String[]::new);\n+    }\n+\n@@ -322,0 +335,12 @@\n+        Map<String, String> parameters = Map.of(\n+           \"$SYNTAX\", \"JFR.start [options]\",\n+           \"$SOURCE\", \"$ jcmd <pid> JFR.start \",\n+           \"$DELIMITER\", \" \",\n+           \"$DELIMITER_NAME\", \"whitespace\",\n+           \"$DIRECTORY\", exampleDirectory(),\n+           \"$JFC_OPTIONS\", jfcOptions()\n+        );\n+        return Utils.format(helpTemplate(), parameters).lines().toArray(String[]::new);\n+    }\n+\n+    private static String helpTemplate() {\n@@ -324,1 +349,1 @@\n-               Syntax : JFR.start [options]\n+               Syntax : $SYNTAX\n@@ -355,2 +380,2 @@\n-                                  Note: If a filename is given, '%%p' in the filename will be\n-                                  replaced by the PID, and '%%t' will be replaced by the time in\n+                                  Note: If a filename is given, '%p' in the filename will be\n+                                  replaced by the PID, and '%t' will be replaced by the time in\n@@ -412,2 +437,3 @@\n-               %s\n-               Options must be specified using the <key> or <key>=<value> syntax.\n+               $JFC_OPTIONS\n+               Options must be specified using the <key> or <key>=<value> syntax. Multiple\n+               options are separated with a $DELIMITER_NAME.\n@@ -417,16 +443,16 @@\n-                $ jcmd <pid> JFR.start\n-                $ jcmd <pid> JFR.start filename=dump.jfr\n-                $ jcmd <pid> JFR.start filename=%s\n-                $ jcmd <pid> JFR.start dumponexit=true\n-                $ jcmd <pid> JFR.start maxage=1h maxsize=1000M\n-                $ jcmd <pid> JFR.start settings=profile\n-                $ jcmd <pid> JFR.start delay=5m settings=my.jfc\n-                $ jcmd <pid> JFR.start gc=high method-profiling=high\n-                $ jcmd <pid> JFR.start jdk.JavaMonitorEnter#threshold=1ms\n-                $ jcmd <pid> JFR.start +HelloWorld#enabled=true +HelloWorld#stackTrace=true\n-                $ jcmd <pid> JFR.start settings=user.jfc com.example.UserDefined#enabled=true\n-                $ jcmd <pid> JFR.start settings=none +Hello#enabled=true\n-\n-               Note, if the default event settings are modified, overhead may exceed 1%%.\n-\n-               \"\"\".formatted(jfcOptions(), exampleDirectory()).lines().toArray(String[]::new);\n+                $SOURCE\n+                $SOURCEfilename=dump.jfr\n+                $SOURCEfilename=$DIRECTORY\n+                $SOURCEdumponexit=true\n+                $SOURCEmaxage=1h$DELIMITERmaxsize=1000M\n+                $SOURCEsettings=profile\n+                $SOURCEdelay=5m$DELIMITERsettings=my.jfc\n+                $SOURCEgc=high$DELIMITERmethod-profiling=high\n+                $SOURCEjdk.JavaMonitorEnter#threshold=1ms\n+                $SOURCE+HelloWorld#enabled=true$DELIMITER+HelloWorld#stackTrace=true\n+                $SOURCEsettings=user.jfc$DELIMITERcom.example.UserDefined#enabled=true\n+                $SOURCEsettings=none$DELIMITER+Hello#enabled=true\n+\n+               Note, if the default event settings are modified, overhead may exceed 1%.\n+\n+               \"\"\";\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/dcmd\/DCmdStart.java","additions":47,"deletions":21,"binary":false,"changes":68,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import java.util.Collection;\n@@ -448,0 +449,22 @@\n+\n+    public static String format(String template, Map<String, String> parameters) {\n+        StringBuilder sb = new StringBuilder(3 * template.length() \/ 2);\n+        List<String> keys = new ArrayList<>(parameters.keySet());\n+        \/\/ Sort so longest keys are checked first in case keys overlap.\n+        keys.sort((a, b) -> b.length() - a.length());\n+        for (int i = 0; i < template.length(); i++) {\n+            int index = i;\n+            for (int j = 0; j < keys.size(); j++) {\n+                String key = keys.get(j);\n+                if (template.startsWith(key, i)) {\n+                    sb.append(parameters.get(key));\n+                    i += key.length() - 1;\n+                    break;\n+                }\n+            }\n+            if (i == index) {\n+                sb.append(template.charAt(i));\n+            }\n+        }\n+        return sb.toString();\n+    }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/util\/Utils.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.startupargs;\n+\n+import jdk.jfr.Recording;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/**\n+ * @test\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib \/test\/jdk\n+ * @run main jdk.jfr.startupargs.TestStartHelp\n+ *\/\n+public class TestStartHelp {\n+\n+    public static void main(String[] args) throws Exception {\n+        ProcessBuilder pb = ProcessTools.createTestJavaProcessBuilder(\"-XX:StartFlightRecording:help\");\n+        OutputAnalyzer out = ProcessTools.executeProcess(pb);\n+        out.shouldContain(\"Syntax : -XX:StartFlightRecording:[options]\");\n+        out.shouldContain(\"options are separated with a comma.\");\n+        out.shouldHaveExitValue(0);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/startupargs\/TestStartHelp.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}