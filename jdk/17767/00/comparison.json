{"files":[{"patch":"@@ -4362,5 +4362,5 @@\n-  for (int i = 0; i < C->template_assertion_predicate_count(); i++) {\n-    Node* opaque4 = C->template_assertion_predicate_opaq_node(i);\n-    assert(opaque4->Opcode() == Op_Opaque4, \"must be\");\n-    if (!useful_predicates.member(opaque4)) { \/\/ not in the useful list\n-      _igvn.replace_node(opaque4, opaque4->in(2));\n+  for (int i = C->template_assertion_predicate_count(); i > 0; i--) {\n+    Node* n = C->template_assertion_predicate_opaq_node(i - 1);\n+    assert(n->Opcode() == Op_Opaque4, \"must be\");\n+    if (!useful_predicates.member(n)) { \/\/ not in the useful list\n+      _igvn.replace_node(n, n->in(2));\n","filename":"src\/hotspot\/share\/opto\/loopnode.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.predicates;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @bug 8325451\n+ * @summary Test basic loop predicates\n+ * @library \/test\/lib \/\n+ * @run driver compiler.predicates.TestPredicatesBasic\n+ *\/\n+public class TestPredicatesBasic {\n+    public static final int size = 100;\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @DontInline\n+    private void blackhole(int i) {}\n+\n+    @DontInline\n+    private int[] getArr() {\n+        int[] arr = new int[size];\n+        for (int i = 0; i < size; ++i) {\n+            arr[i] = i;\n+        }\n+        return arr;\n+    }\n+\n+    @Test\n+    \/\/ Null check, loop entrance check, array upper bound check\n+    @IR(counts = {IRNode.IF, \"3\"})\n+    public void basic() {\n+        int[] arr = getArr();\n+        for (int i = 0; i < arr.length; ++i) {\n+            blackhole(arr[i]);\n+        }\n+    }\n+\n+    @Test\n+    \/\/ Null check, loop entrance check, array upper bound check\n+    @IR(counts = {IRNode.IF, \"4\"})\n+    public void basicMinus() {\n+        int[] arr = getArr();\n+        for (int i = 0; i < arr.length - 1; ++i) {\n+            blackhole(arr[i]);\n+        }\n+    }\n+\n+    @Test\n+    \/\/ Null check, loop entrance check, array lower\/upper bound check\n+    @IR(counts = {IRNode.IF, \"4\"})\n+    public void basicNeg() {\n+        int[] arr = getArr();\n+        for (int i = arr.length - 1; i >= 0; --i) {\n+            blackhole(arr[i]);\n+        }\n+    }\n+\n+    @Test\n+    @Arguments({Argument.NUMBER_42})\n+    \/\/ Null check, loop entrance check, array lower\/upper bound check\n+    @IR(counts = {IRNode.IF, \"4\"})\n+    public void basicLimit(int limit) {\n+        int[] arr = getArr();\n+        for (int i = 0; i < limit; ++i) {\n+            blackhole(arr[i]);\n+        }\n+    }\n+}\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/predicates\/TestPredicatesBasic.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"}]}