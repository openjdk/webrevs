{"files":[{"patch":"@@ -254,3 +254,3 @@\n-  auto& orig_to_new = data_node_graph.clone(new_uncommon_proj);\n-  fix_cloned_data_node_controls(old_uncommon_proj, new_uncommon_proj, orig_to_new);\n-  Node** cloned_node_ptr = orig_to_new.get(start_node);\n+  const OrigToNewHashtable& orig_to_clone = data_node_graph.clone(new_uncommon_proj);\n+  fix_cloned_data_node_controls(old_uncommon_proj, new_uncommon_proj, orig_to_clone);\n+  Node** cloned_node_ptr = orig_to_clone.get(start_node);\n@@ -263,5 +263,4 @@\n-void PhaseIdealLoop::fix_cloned_data_node_controls(\n-    const ProjNode* old_uncommon_proj, Node* new_uncommon_proj,\n-    const ResizeableResourceHashtable<Node*, Node*, AnyObj::RESOURCE_AREA, mtCompiler>& orig_to_new) {\n-  orig_to_new.iterate_all([&](Node* node, Node* clone) {\n-    if (node->in(0) == old_uncommon_proj) {\n+void PhaseIdealLoop::fix_cloned_data_node_controls(const ProjNode* old_uncommon_proj, Node* new_uncommon_proj,\n+                                                   const OrigToNewHashtable& orig_to_clone) {\n+  auto orig_clone_action = [&](Node* orig, Node* clone) {\n+    if (orig->in(0) == old_uncommon_proj) {\n@@ -271,1 +270,2 @@\n-  });\n+  };\n+  orig_to_clone.iterate_all(orig_clone_action);\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1351,3 +1351,2 @@\n-  void fix_cloned_data_node_controls(\n-      const ProjNode* old_uncommon_proj, Node* new_uncommon_proj,\n-      const ResizeableResourceHashtable<Node*, Node*, AnyObj::RESOURCE_AREA, mtCompiler>& orig_to_new);\n+  void fix_cloned_data_node_controls(const ProjNode* orig, Node* new_uncommon_proj,\n+                                     const OrigToNewHashtable& orig_to_clone);\n@@ -1892,1 +1891,1 @@\n-  ResizeableResourceHashtable<Node*, Node*, AnyObj::RESOURCE_AREA, mtCompiler> _orig_to_new;\n+  OrigToNewHashtable _orig_to_new;\n@@ -1917,1 +1916,1 @@\n-  const ResizeableResourceHashtable<Node*, Node*, AnyObj::RESOURCE_AREA, mtCompiler>& clone(Node* new_ctrl) {\n+  const OrigToNewHashtable& clone(Node* new_ctrl) {\n","filename":"src\/hotspot\/share\/opto\/loopnode.hpp","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -210,0 +210,2 @@\n+typedef ResizeableResourceHashtable<Node*, Node*, AnyObj::RESOURCE_AREA, mtCompiler> OrigToNewHashtable;\n+\n","filename":"src\/hotspot\/share\/opto\/node.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -211,1 +211,1 @@\n-    ResizeableResourceHashtable<Node*, Node*, AnyObj::RESOURCE_AREA, mtCompiler> clones(hash_table_size, hash_table_size);\n+    OrigToNewHashtable clones(hash_table_size, hash_table_size);\n","filename":"src\/hotspot\/share\/opto\/replacednodes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}