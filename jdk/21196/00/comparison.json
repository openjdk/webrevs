{"files":[{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.Frame;\n+\n+\/*\n+ * @test\n+ * @bug 4964237\n+ * @requires (os.family == \"windows\")\n+ * @summary Win: Changing theme changes java dialogs title icon\n+ * @library jdk\/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DefaultIconTest\n+ *\/\n+\n+public class DefaultIconTest {\n+    static String instructions = \"\"\"\n+                    This test shows frame and two dialogs\n+                    Change windows theme. Resizable dialog should retain default icon\n+                    Non-resizable dialog should retain no icon\n+                    Press PASS if icons look correct, FAIL otherwise\n+                    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"ShownModalDialogSerializationTest Instructions\")\n+                .instructions(instructions)\n+                .testTimeOut(5)\n+                .rows(10)\n+                .columns(35)\n+                .testUI(DefaultIconTest::createGUIs)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createGUIs() {\n+        Frame f = new Frame(\"DefaultIconTest\");\n+        f.setSize(200, 100);\n+        Dialog d1 = new Dialog(f, \"Resizable Dialog, should show default icon\");\n+        d1.setSize(200, 100);\n+        d1.setVisible(true);\n+        d1.setLocation(0, 150);\n+        Dialog d2 = new Dialog(f, \"Non-resizable dialog, should have no icon\");\n+        d2.setSize(200, 100);\n+        d2.setVisible(true);\n+        d2.setResizable(false);\n+        d2.setLocation(0, 300);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/DefaultIconTest.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,97 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.Dimension;\n+import java.awt.Frame;\n+import java.awt.event.ComponentEvent;\n+import java.awt.event.ComponentListener;\n+\n+\/*\n+ * @test\n+ * @bug 4912551\n+ * @summary Checks that with resizable set to false before show()\n+ *          dialog can not be resized.\n+ * @library jdk\/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DialogInitialResizability\n+ *\/\n+\n+public class DialogInitialResizability {\n+    static String instructions = \"\"\"\n+                    Steps to try to reproduce the problem:\n+                    When this test is run a dialog will display (setResizable Test).\n+                    This dialog should not be resizable.\n+\n+                    Additionally ensure that there are NO componentResized events in the log section.\n+                    If the above conditions are true, then Press PASS else FAIL.\n+                    \"\"\";\n+\n+    private static final Dimension INITIAL_SIZE = new Dimension(400, 150);\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"DialogInitialResizability\")\n+                .instructions(instructions)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 2)\n+                .columns(40)\n+                .testUI(DialogInitialResizability::createGUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static MyDialog createGUI() {\n+        Frame f = new Frame(\"invisible dialog owner\");\n+\n+        MyDialog ld = new MyDialog(f);\n+        ld.setBounds(100, 100, INITIAL_SIZE.width, INITIAL_SIZE.height);\n+        ld.setResizable(false);\n+\n+        PassFailJFrame.log(\"Dialog isResizable is set to: \" + ld.isResizable());\n+        PassFailJFrame.log(\"Dialog Initial Size \" + ld.getSize());\n+        return ld;\n+    }\n+\n+    private static class MyDialog extends Dialog implements ComponentListener {\n+        public MyDialog(Frame f) {\n+            super(f, \"setResizable test\", false);\n+            this.addComponentListener(this);\n+        }\n+\n+        public void componentResized(ComponentEvent e) {\n+            if (!e.getComponent().getSize().equals(INITIAL_SIZE)) {\n+                PassFailJFrame.log(\"Component Resized. Test Failed!!\");\n+            }\n+        }\n+\n+        public void componentMoved(ComponentEvent e) {\n+        }\n+\n+        public void componentShown(ComponentEvent e) {\n+        }\n+\n+        public void componentHidden(ComponentEvent e) {\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/Dialog\/DialogInitialResizability.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"added"},{"patch":"@@ -0,0 +1,312 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Choice;\n+import java.awt.Dialog;\n+import java.awt.FileDialog;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.List;\n+import java.awt.Panel;\n+import java.awt.Point;\n+import java.awt.Window;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n+import java.util.Vector;\n+import java.util.Enumeration;\n+\n+\/*\n+ * @test\n+ * @bug 4110094 4178930 4178390\n+ * @summary Test: Rewrite of Win32 modal dialogs\n+ * @library jdk\/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual NestedDialogTest\n+ *\/\n+\n+public class NestedDialogTest {\n+    private static Vector windows = new Vector();\n+    static String instructions = \"\"\"\n+            To solve various race conditions, windows modal dialogs were rewritten. This\n+            test exercises various modal dialog boundary conditions and checks that\n+            previous fixes to modality are incorporated in the rewrite.\n+\n+            Check the following:\n+            - No IllegalMonitorStateException is thrown when a dialog closes\n+\n+            - Open multiple nested dialogs and verify that all other windows\n+            are disabled when modal dialog is active.\n+\n+            - Check that the proper window is activated when a modal dialog closes.\n+\n+            - Close nested dialogs out of order (e.g. close dialog1 before dialog2)\n+            and verify that this works and no deadlock occurs.\n+\n+            - Check that all other windows are disabled when a FileDialog is open.\n+\n+            - Check that the proper window is activated when a FileDialog closes.\n+\n+            - Verify that the active window nevers switches to another application\n+            when closing dialogs, even temporarily.\n+\n+            - Check that choosing Hide always sucessfully hides a dialog. You should\n+            try this multiple times to catch any race conditions.\n+\n+            - Check that the scrollbar on the Choice component in the dialog works, as opposed\n+              to just using drag-scrolling or the cursor keys\n+            \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"NestedDialogTest\")\n+                .instructions(instructions)\n+                .testTimeOut(5)\n+                .rows((int) instructions.lines().count() + 2)\n+                .columns(35)\n+                .testUI(NestedDialogTest::createGUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame createGUI() {\n+        Frame frame1 = new NestedDialogTestFrame(\"frame0\");\n+        Frame frame2 = new NestedDialogTestFrame(\"frame1\");\n+        frame2.setLocation(100, 100);\n+        return frame1;\n+    }\n+\n+    public static void addWindow(Window window) {\n+        \/\/ System.out.println(\"Pushing window \" + window);\n+        windows.removeElement(window);\n+        windows.addElement(window);\n+    }\n+\n+    public static void removeWindow(Window window) {\n+        \/\/ System.out.println(\"Popping window \" + window);\n+        windows.removeElement(window);\n+    }\n+\n+    public static Window getWindow(int index) {\n+        return (Window) windows.elementAt(index);\n+    }\n+\n+    public static Enumeration enumWindows() {\n+        return windows.elements();\n+    }\n+\n+    public static int getWindowIndex(Window win) {\n+        return windows.indexOf(win);\n+    }\n+}\n+\n+class NestedDialogTestFrame extends Frame {\n+    NestedDialogTestFrame(String name) {\n+        super(name);\n+        setSize(200, 200);\n+        show();\n+\n+        setLayout(new FlowLayout());\n+        Button btnDlg = new Button(\"Dialog...\");\n+        add(btnDlg);\n+        Button btnFileDlg = new Button(\"FileDialog...\");\n+        add(btnFileDlg);\n+\n+        addWindowListener(new WindowAdapter() {\n+            public void windowClosing(WindowEvent ev) {\n+                System.exit(0);\n+            }\n+        });\n+\n+        btnDlg.addActionListener(\n+                new ActionListener() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        Dialog d1 = new SimpleDialog(NestedDialogTestFrame.this, null, true);\n+                        System.out.println(\"Returned from showing dialog: \" + d1);\n+                    }\n+                }\n+        );\n+\n+        btnFileDlg.addActionListener(\n+                new ActionListener() {\n+                    public void actionPerformed(ActionEvent e) {\n+                        FileDialog dlg = new FileDialog(NestedDialogTestFrame.this);\n+                        dlg.show();\n+                    }\n+                }\n+        );\n+\n+        validate();\n+    }\n+\n+    public void show() {\n+        if (!isVisible()) {\n+            NestedDialogTest.addWindow(this);\n+        }\n+        super.show();\n+    }\n+\n+    public void dispose() {\n+        NestedDialogTest.removeWindow(this);\n+        super.dispose();\n+    }\n+}\n+\n+class SimpleDialog extends Dialog {\n+    Button btnNested;\n+    Button btnFileDlg;\n+    Button btnShow;\n+    Button btnHide;\n+    Button btnDispose;\n+    Button btnExit;\n+    List listWins;\n+    Dialog dlgPrev;\n+\n+    public SimpleDialog(Frame frame, Dialog prev, boolean isModal) {\n+        super(frame, \"\", isModal);\n+\n+        dlgPrev = prev;\n+\n+        addWindowListener(new WindowAdapter() {\n+            public void windowActivated(WindowEvent ev) {\n+                populateListWin();\n+            }\n+        });\n+\n+        setTitle(getName());\n+\n+        Panel panelNorth = new Panel();\n+        panelNorth.setLayout(new GridLayout(1, 1));\n+        listWins = new List();\n+        panelNorth.add(listWins);\n+\n+        Panel panelSouth = new Panel();\n+        panelSouth.setLayout(new FlowLayout());\n+        btnNested = new Button(\"Dialog...\");\n+        panelSouth.add(btnNested);\n+        btnFileDlg = new Button(\"FileDialog...\");\n+        panelSouth.add(btnFileDlg);\n+        btnShow = new Button(\"Show\");\n+        panelSouth.add(btnShow);\n+        btnHide = new Button(\"Hide\");\n+        panelSouth.add(btnHide);\n+        btnDispose = new Button(\"Dispose\");\n+        panelSouth.add(btnDispose);\n+\n+        Choice cbox = new Choice();\n+        cbox.add(\"Test1\");\n+        cbox.add(\"Test2\");\n+        cbox.add(\"Test3\");\n+        cbox.add(\"Test4\");\n+        cbox.add(\"Test5\");\n+        cbox.add(\"Test6\");\n+        cbox.add(\"Test7\");\n+        cbox.add(\"Test8\");\n+        cbox.add(\"Test9\");\n+        cbox.add(\"Test10\");\n+        cbox.add(\"Test11\");\n+        panelSouth.add(cbox);\n+\n+        validate();\n+\n+        add(\"Center\", panelNorth);\n+        add(\"South\", panelSouth);\n+\n+        btnNested.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                Dialog dlg = new SimpleDialog((Frame) getParent(), SimpleDialog.this, true);\n+                System.out.println(\"Returned from showing dialog: \" + dlg);\n+            }\n+        });\n+\n+        btnFileDlg.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                FileDialog dlg = new FileDialog((Frame) getParent());\n+                dlg.show();\n+            }\n+        });\n+\n+        btnHide.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                Window wnd = getSelectedWindow();\n+                System.out.println(wnd);\n+                wnd.hide();\n+            }\n+        });\n+\n+        btnShow.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                getSelectedWindow().show();\n+            }\n+        });\n+\n+        btnDispose.addActionListener(new ActionListener() {\n+            public void actionPerformed(ActionEvent e) {\n+                getSelectedWindow().dispose();\n+                populateListWin();\n+            }\n+        });\n+\n+        pack();\n+        setSize(getSize().width, getSize().height * 2);\n+        if (dlgPrev != null) {\n+            Point pt = dlgPrev.getLocation();\n+            setLocation(pt.x + 30, pt.y + 50);\n+        }\n+        show();\n+    }\n+\n+    private Window getSelectedWindow() {\n+        Window window;\n+        int index = listWins.getSelectedIndex();\n+\n+        window = NestedDialogTest.getWindow(index);\n+        return window;\n+    }\n+\n+    private void populateListWin() {\n+        Enumeration enumWindows = NestedDialogTest.enumWindows();\n+\n+        listWins.removeAll();\n+        while (enumWindows.hasMoreElements()) {\n+            Window win = (Window) enumWindows.nextElement();\n+            listWins.add(win.getName());\n+        }\n+        listWins.select(NestedDialogTest.getWindowIndex(this));\n+    }\n+\n+    public void show() {\n+        if (!isVisible()) {\n+            NestedDialogTest.addWindow(this);\n+        }\n+        super.show();\n+    }\n+\n+    public void dispose() {\n+        NestedDialogTest.removeWindow(this);\n+        super.dispose();\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/Dialog\/NestedDialogTest.java","additions":312,"deletions":0,"binary":false,"changes":312,"status":"added"},{"patch":"@@ -0,0 +1,92 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Dialog;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Label;\n+\n+import java.awt.TextArea;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.ObjectOutputStream;\n+\n+\/*\n+ * @test\n+ * @bug 4739757\n+ * @summary REGRESSION: Modal Dialog is not serializable after showing\n+ * @key headful\n+ * @run main ShownModalDialogSerializationTest\n+ *\/\n+\n+public class ShownModalDialogSerializationTest {\n+    static volatile Frame frame;\n+    static volatile Frame outputFrame;\n+    static volatile Dialog dialog;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        EventQueue.invokeLater(ShownModalDialogSerializationTest::createTestUI);\n+\n+        while (dialog == null || !dialog.isShowing()) {\n+            Thread.sleep(500);\n+        }\n+        File file = new File(\"dialog.ser\");\n+        FileOutputStream fos = new FileOutputStream(file);\n+        ObjectOutputStream oos = new ObjectOutputStream(fos);\n+        oos.writeObject(dialog);\n+        oos.flush();\n+        file.delete();\n+\n+        EventQueue.invokeAndWait(ShownModalDialogSerializationTest::deleteTestUI);\n+    }\n+\n+    static void deleteTestUI() {\n+        if (dialog != null) {\n+            dialog.setVisible(false);\n+            dialog.dispose();\n+        }\n+        if (frame != null) {\n+            frame.setVisible(false);\n+            frame.dispose();\n+        }\n+        if (outputFrame != null) {\n+            outputFrame.setVisible(false);\n+            outputFrame.dispose();\n+        }\n+    }\n+\n+    private static void createTestUI() {\n+        outputFrame = new Frame(\"ShownModalDialogSerializationTest\");\n+        TextArea output = new TextArea(40, 50);\n+        outputFrame.add(output);\n+\n+        frame = new Frame(\"invisible dialog owner\");\n+        dialog = new Dialog(frame, \"Dialog for Close\", true);\n+        dialog.add(new Label(\"Close This Dialog\"));\n+        outputFrame.setSize(200, 200);\n+        outputFrame.setVisible(true);\n+        dialog.pack();\n+        dialog.setVisible(true);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Dialog\/ShownModalDialogSerializationTest.java","additions":92,"deletions":0,"binary":false,"changes":92,"status":"added"}]}