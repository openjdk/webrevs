{"files":[{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2024, Intel Corporation. All rights reserved.\n+* Copyright (c) 2024, 2025, Intel Corporation. All rights reserved.\n@@ -49,1 +49,1 @@\n-\/\/ For |x| in [2^{-4},2^5):\n+\/\/ For |x| in [2^{-4},22):\n@@ -69,1 +69,1 @@\n-\/\/ For |x|>=2^32: return +\/-1\n+\/\/ For |x|>=22: return +\/-1\n@@ -73,1 +73,1 @@\n-\/\/  tanh(INF) = that INF\n+\/\/  tanh(+\/-INF) = +\/-1\n@@ -327,0 +327,6 @@\n+  __ pextrw(rcx, xmm0, 3);\n+  __ movl(rdx, 32768);\n+  __ andl(rdx, rcx);\n+  __ andl(rcx, 32767);\n+  __ cmpl(rcx, 16438);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_2_0_1); \/\/ Branch only if |x| >= 22\n@@ -334,1 +340,0 @@\n-  __ pextrw(rcx, xmm0, 3);\n@@ -338,3 +343,0 @@\n-  __ movl(rdx, 32768);\n-  __ andl(rdx, rcx);\n-  __ andl(rcx, 32767);\n@@ -342,2 +344,2 @@\n-  __ cmpl(rcx, 144);\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_1);\n+  __ cmpl(rcx, 134);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_1); \/\/ Branch only if |x| is not in [2^{-4},22)\n@@ -430,2 +432,2 @@\n-  __ cmpl(rcx, 1104);\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_1_0_1);\n+  __ cmpl(rcx, 1094);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_1_0_1); \/\/ Branch only if |x| not in [2^{-64}, 2^{-4})\n@@ -452,3 +454,0 @@\n-  __ addl(rcx, 15344);\n-  __ cmpl(rcx, 16448);\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_2_0_1);\n@@ -456,1 +455,1 @@\n-  __ jcc(Assembler::below, L_2TAG_PACKET_3_0_1);\n+  __ jcc(Assembler::below, L_2TAG_PACKET_3_0_1); \/\/ Branch only if |x| is denormalized\n@@ -471,1 +470,1 @@\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_4_0_1);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_4_0_1); \/\/ Branch only if |x| is INF or NaN\n@@ -492,1 +491,1 @@\n-  __ jcc(Assembler::equal, L_2TAG_PACKET_5_0_1);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_5_0_1); \/\/ Branch only if |x| is not NaN\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_tanh.cpp","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+\n@@ -65,0 +66,12 @@\n+    @Param(\"2048\")\n+    public int tanhValueCount;\n+\n+    @Param(\"0\")\n+    public double tanhBound1;\n+\n+    @Param(\"2.7755575615628914E-17\")\n+    public double tanhBound2;\n+\n+    public double [] tanhPosVector;\n+    public double [] tanhNegVector;\n+\n@@ -72,0 +85,8 @@\n+\n+        \/\/ Fill the positive and negative tanh vectors with random values\n+        tanhPosVector = new double[tanhValueCount];\n+        tanhNegVector = new double[tanhValueCount];\n+        for (int i = 0; i < tanhValueCount; i++) {\n+            tanhPosVector[i] = random.nextDouble(tanhBound1, tanhBound2);\n+            tanhNegVector[i] = random.nextDouble(-tanhBound2, -tanhBound1);\n+        }\n@@ -523,0 +544,9 @@\n+    @Benchmark\n+    public double  tanhRangeDouble() {\n+        double sum = 0.0;\n+        for (int i = 0; i < tanhValueCount; i++) {\n+            sum += Math.tanh(tanhPosVector[i]) + Math.tanh(tanhNegVector[i]);\n+        }\n+        return sum;\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MathBench.java","additions":31,"deletions":1,"binary":false,"changes":32,"status":"modified"}]}