{"files":[{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2024, Intel Corporation. All rights reserved.\n+* Copyright (c) 2024, 2025, Intel Corporation. All rights reserved.\n@@ -49,1 +49,1 @@\n-\/\/ For |x| in [2^{-4},2^5):\n+\/\/ For |x| in [2^{-4},22):\n@@ -69,1 +69,1 @@\n-\/\/ For |x|>=2^32: return +\/-1\n+\/\/ For |x|>=22: return +\/-1\n@@ -73,1 +73,1 @@\n-\/\/  tanh(INF) = that INF\n+\/\/  tanh(+\/-INF) = +\/-1\n@@ -327,0 +327,6 @@\n+  __ pextrw(rcx, xmm0, 3);\n+  __ movl(rdx, 32768);\n+  __ andl(rdx, rcx);\n+  __ andl(rcx, 32767);\n+  __ cmpl(rcx, 16438);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_2_0_1); \/\/ Branch only if |x| >= 22\n@@ -334,1 +340,0 @@\n-  __ pextrw(rcx, xmm0, 3);\n@@ -338,3 +343,0 @@\n-  __ movl(rdx, 32768);\n-  __ andl(rdx, rcx);\n-  __ andl(rcx, 32767);\n@@ -342,2 +344,2 @@\n-  __ cmpl(rcx, 144);\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_1);\n+  __ cmpl(rcx, 134);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_1); \/\/ Branch only if |x| is not in [2^{-4},22)\n@@ -430,2 +432,2 @@\n-  __ cmpl(rcx, 1104);\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_1_0_1);\n+  __ cmpl(rcx, 1094);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_1_0_1); \/\/ Branch only if |x| not in [2^{-64}, 2^{-4})\n@@ -452,3 +454,0 @@\n-  __ addl(rcx, 15344);\n-  __ cmpl(rcx, 16448);\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_2_0_1);\n@@ -456,1 +455,1 @@\n-  __ jcc(Assembler::below, L_2TAG_PACKET_3_0_1);\n+  __ jcc(Assembler::below, L_2TAG_PACKET_3_0_1); \/\/ Branch only if |x| is denormalized\n@@ -471,1 +470,1 @@\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_4_0_1);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_4_0_1); \/\/ Branch only if |x| is INF or NaN\n@@ -492,1 +491,1 @@\n-  __ jcc(Assembler::equal, L_2TAG_PACKET_5_0_1);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_5_0_1); \/\/ Branch only if |x| is not NaN\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_tanh.cpp","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+\n@@ -37,0 +38,1 @@\n+import org.openjdk.jmh.annotations.Level;\n@@ -64,0 +66,15 @@\n+    public static final double constDoubleNegative2 = -2.0d, constDoubleNegative1 = -1.0d, constDouble0 = 0.0d, constDouble1 = 1.0d, constDouble2 = 2.0d;\n+\n+    @Param(\"2048\")\n+    public int tanhInputCount;\n+\n+    @Param({\"0\", \"1\", \"2\", \"3\"})\n+    public int tanhRangeIndex;\n+\n+    public double [] tanhPosRandInputs;\n+    public double [] tanhNegRandInputs;\n+    public int tanhInputIndex = 0;\n+    public double tanhRangeInputs[][] = { {0.0, 0x1.0P-55},\n+                                          {0x1.0P-55, 1.0},\n+                                          {1.0, 22.0},\n+                                          {22.0, 1.7976931348623157E308} };\n@@ -72,0 +89,16 @@\n+\n+        \/\/ Fill the positive and negative tanh vectors with random values\n+        tanhPosRandInputs = new double[tanhInputCount];\n+        tanhNegRandInputs = new double[tanhInputCount];\n+        for (int i = 0; i < tanhInputCount; i++) {\n+            double tanhLowerBound = tanhRangeInputs[tanhRangeIndex][0];\n+            double tanhUpperBound = tanhRangeInputs[tanhRangeIndex][1];\n+            tanhPosRandInputs[i] = random.nextDouble(tanhLowerBound, tanhUpperBound);\n+            tanhNegRandInputs[i] = random.nextDouble(-tanhUpperBound, -tanhLowerBound);\n+        }\n+    }\n+\n+    @Setup(Level.Invocation)\n+    public void updateIndices() {\n+        \/\/ Update the tanh index for the next invocation\n+        tanhInputIndex = (tanhInputIndex + 1) % tanhInputCount;\n@@ -523,0 +556,32 @@\n+    @Benchmark\n+    public double  tanhConstDoubleNegative2() {\n+        return  Math.tanh(constDoubleNegative2);\n+    }\n+\n+    @Benchmark\n+    public double  tanhConstDoubleNegative1() {\n+        return  Math.tanh(constDoubleNegative1);\n+    }\n+\n+    @Benchmark\n+    public double  tanhConstDouble0() {\n+        return  Math.tanh(constDouble0);\n+    }\n+\n+    @Benchmark\n+    public double  tanhConstDouble1() {\n+        return  Math.tanh(constDouble1);\n+    }\n+\n+    @Benchmark\n+    public double  tanhConstDouble2() {\n+        return  Math.tanh(constDouble2);\n+    }\n+\n+    @Benchmark\n+    public double  tanhRangeDouble() {\n+        double posResult = Math.tanh(tanhPosRandInputs[tanhInputIndex]);\n+        double negResult = Math.tanh(tanhNegRandInputs[tanhInputIndex]);\n+        return  (posResult + negResult);\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MathBench.java","additions":66,"deletions":1,"binary":false,"changes":67,"status":"modified"}]}