{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-\n@@ -38,1 +37,0 @@\n-import org.openjdk.jmh.annotations.Level;\n@@ -66,15 +64,0 @@\n-    public static final double constDoubleNegative2 = -2.0d, constDoubleNegative1 = -1.0d, constDouble0 = 0.0d, constDouble1 = 1.0d, constDouble2 = 2.0d;\n-\n-    @Param(\"2048\")\n-    public int tanhInputCount;\n-\n-    @Param({\"0\", \"1\", \"2\", \"3\"})\n-    public int tanhRangeIndex;\n-\n-    public double [] tanhPosRandInputs;\n-    public double [] tanhNegRandInputs;\n-    public int tanhInputIndex = 0;\n-    public double tanhRangeInputs[][] = { {0.0, 0x1.0P-55},\n-                                          {0x1.0P-55, 1.0},\n-                                          {1.0, 22.0},\n-                                          {22.0, 1.7976931348623157E308} };\n@@ -89,16 +72,0 @@\n-\n-        \/\/ Fill the positive and negative tanh vectors with random values\n-        tanhPosRandInputs = new double[tanhInputCount];\n-        tanhNegRandInputs = new double[tanhInputCount];\n-        for (int i = 0; i < tanhInputCount; i++) {\n-            double tanhLowerBound = tanhRangeInputs[tanhRangeIndex][0];\n-            double tanhUpperBound = tanhRangeInputs[tanhRangeIndex][1];\n-            tanhPosRandInputs[i] = random.nextDouble(tanhLowerBound, tanhUpperBound);\n-            tanhNegRandInputs[i] = random.nextDouble(-tanhUpperBound, -tanhLowerBound);\n-        }\n-    }\n-\n-    @Setup(Level.Invocation)\n-    public void updateIndices() {\n-        \/\/ Update the tanh index for the next invocation\n-        tanhInputIndex = (tanhInputIndex + 1) % tanhInputCount;\n@@ -556,32 +523,0 @@\n-    @Benchmark\n-    public double  tanhConstDoubleNegative2() {\n-        return  Math.tanh(constDoubleNegative2);\n-    }\n-\n-    @Benchmark\n-    public double  tanhConstDoubleNegative1() {\n-        return  Math.tanh(constDoubleNegative1);\n-    }\n-\n-    @Benchmark\n-    public double  tanhConstDouble0() {\n-        return  Math.tanh(constDouble0);\n-    }\n-\n-    @Benchmark\n-    public double  tanhConstDouble1() {\n-        return  Math.tanh(constDouble1);\n-    }\n-\n-    @Benchmark\n-    public double  tanhConstDouble2() {\n-        return  Math.tanh(constDouble2);\n-    }\n-\n-    @Benchmark\n-    public double  tanhRangeDouble() {\n-        double posResult = Math.tanh(tanhPosRandInputs[tanhInputIndex]);\n-        double negResult = Math.tanh(tanhNegRandInputs[tanhInputIndex]);\n-        return  (posResult + negResult);\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/MathBench.java","additions":1,"deletions":66,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Random;\n+\n+public class TanhPerf {\n+\n+    @Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.MILLISECONDS)\n+    @Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.MILLISECONDS)\n+    @Fork(2)\n+    @BenchmarkMode(Mode.Throughput)\n+    @State(Scope.Thread)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public static class TanhPerfRanges {\n+        public static int tanhInputCount = 2048;\n+\n+        @Param({\"0\", \"1\", \"2\", \"3\"})\n+        public int tanhRangeIndex;\n+\n+        public double [] tanhPosRandInputs;\n+        public double [] tanhNegRandInputs;\n+        public int       tanhInputIndex = 0;\n+        public double    tanhRangeInputs[][] = {{0.0, 0x1.0P-55}, {0x1.0P-55, 1.0}, {1.0, 22.0}, {22.1, 1.7976931348623157E308} };\n+\n+        @Setup\n+        public void setupValues() {\n+            Random random = new Random(1023);\n+\n+            \/\/ Fill the positive and negative tanh vectors with random values\n+            tanhPosRandInputs = new double[tanhInputCount];\n+            tanhNegRandInputs = new double[tanhInputCount];\n+\n+            for (int i = 0; i < tanhInputCount; i++) {\n+                double tanhLowerBound = tanhRangeInputs[tanhRangeIndex][0];\n+                double tanhUpperBound = tanhRangeInputs[tanhRangeIndex][1];\n+                tanhPosRandInputs[i] = random.nextDouble(tanhLowerBound, tanhUpperBound);\n+                tanhNegRandInputs[i] = random.nextDouble(-tanhUpperBound, -tanhLowerBound);\n+            }\n+        }\n+\n+        @Benchmark\n+        @OperationsPerInvocation(2048)\n+        public double  tanhPosRangeDouble() {\n+            double res = 0.0;\n+            for (int i = 0; i < tanhInputCount; i++) {\n+                res += Math.tanh(tanhPosRandInputs[i]);\n+            }\n+            return res;\n+        }\n+\n+        @Benchmark\n+        @OperationsPerInvocation(2048)\n+        public double  tanhNegRangeDouble() {\n+            double res = 0.0;\n+            for (int i = 0; i < tanhInputCount; i++) {\n+                res += Math.tanh(tanhNegRandInputs[i]);\n+            }\n+            return res;\n+        }\n+    }\n+\n+    @Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Fork(2)\n+    @BenchmarkMode(Mode.Throughput)\n+    @State(Scope.Thread)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public static class TanhPerfConstant {\n+        public static final double constDoubleTiny  = 0x1.0P-57;\n+        public static final double constDoubleSmall = 0x1.0P-54;\n+        public static final double constDouble1     = 1.0;\n+        public static final double constDouble21    = 21.0;\n+        public static final double constDoubleLarge = 23.0;\n+\n+        @Benchmark\n+        public double  tanhConstDoubleTiny() {\n+            return  Math.tanh(constDoubleTiny);\n+        }\n+\n+        @Benchmark\n+        public double  tanhConstDoubleSmall() {\n+            return  Math.tanh(constDoubleSmall);\n+        }\n+\n+        @Benchmark\n+        public double  tanhConstDouble1() {\n+            return  Math.tanh(constDouble1);\n+        }\n+\n+        @Benchmark\n+        public double  tanhConstDouble21() {\n+            return  Math.tanh(constDouble21);\n+        }\n+\n+        @Benchmark\n+        public double  tanhConstDoubleLarge() {\n+            return  Math.tanh(constDoubleLarge);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws RunnerException {\n+        Options opt = new OptionsBuilder()\n+                .include(TanhPerfRanges.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+\n+        opt = new OptionsBuilder()\n+                .include(TanhPerfConstant.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/TanhPerf.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"}]}