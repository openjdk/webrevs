{"files":[{"patch":"@@ -2,1 +2,1 @@\n-* Copyright (c) 2024, Intel Corporation. All rights reserved.\n+* Copyright (c) 2024, 2025, Intel Corporation. All rights reserved.\n@@ -49,1 +49,1 @@\n-\/\/ For |x| in [2^{-4},2^5):\n+\/\/ For |x| in [2^{-4},22):\n@@ -69,1 +69,1 @@\n-\/\/ For |x|>=2^32: return +\/-1\n+\/\/ For |x|>=22: return +\/-1\n@@ -73,1 +73,1 @@\n-\/\/  tanh(INF) = that INF\n+\/\/  tanh(+\/-INF) = +\/-1\n@@ -327,0 +327,6 @@\n+  __ pextrw(rcx, xmm0, 3);\n+  __ movl(rdx, 32768);\n+  __ andl(rdx, rcx);\n+  __ andl(rcx, 32767);\n+  __ cmpl(rcx, 16438);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_2_0_1); \/\/ Branch only if |x| >= 22\n@@ -334,1 +340,0 @@\n-  __ pextrw(rcx, xmm0, 3);\n@@ -338,3 +343,0 @@\n-  __ movl(rdx, 32768);\n-  __ andl(rdx, rcx);\n-  __ andl(rcx, 32767);\n@@ -342,2 +344,2 @@\n-  __ cmpl(rcx, 144);\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_1);\n+  __ cmpl(rcx, 134);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_0_0_1); \/\/ Branch only if |x| is not in [2^{-4},22)\n@@ -430,2 +432,2 @@\n-  __ cmpl(rcx, 1104);\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_1_0_1);\n+  __ cmpl(rcx, 1094);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_1_0_1); \/\/ Branch only if |x| not in [2^{-64}, 2^{-4})\n@@ -452,3 +454,0 @@\n-  __ addl(rcx, 15344);\n-  __ cmpl(rcx, 16448);\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_2_0_1);\n@@ -456,1 +455,1 @@\n-  __ jcc(Assembler::below, L_2TAG_PACKET_3_0_1);\n+  __ jcc(Assembler::below, L_2TAG_PACKET_3_0_1); \/\/ Branch only if |x| is denormalized\n@@ -471,1 +470,1 @@\n-  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_4_0_1);\n+  __ jcc(Assembler::aboveEqual, L_2TAG_PACKET_4_0_1); \/\/ Branch only if |x| is INF or NaN\n@@ -492,1 +491,1 @@\n-  __ jcc(Assembler::equal, L_2TAG_PACKET_5_0_1);\n+  __ jcc(Assembler::equal, L_2TAG_PACKET_5_0_1); \/\/ Branch only if |x| is not NaN\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_tanh.cpp","additions":17,"deletions":18,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.lang;\n+\n+import java.util.concurrent.TimeUnit;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.RunnerException;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.util.Random;\n+\n+public class TanhPerf {\n+\n+    @Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.MILLISECONDS)\n+    @Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.MILLISECONDS)\n+    @Fork(2)\n+    @BenchmarkMode(Mode.Throughput)\n+    @State(Scope.Thread)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public static class TanhPerfRanges {\n+        public static int tanhInputCount = 2048;\n+\n+        @Param({\"0\", \"1\", \"2\", \"3\"})\n+        public int tanhRangeIndex;\n+\n+        public double [] tanhPosRandInputs;\n+        public double [] tanhNegRandInputs;\n+        public int       tanhInputIndex = 0;\n+        public double    tanhRangeInputs[][] = {{0.0, 0x1.0P-55}, {0x1.0P-55, 1.0}, {1.0, 22.0}, {22.1, 1.7976931348623157E308} };\n+\n+        @Setup\n+        public void setupValues() {\n+            Random random = new Random(1023);\n+\n+            \/\/ Fill the positive and negative tanh vectors with random values\n+            tanhPosRandInputs = new double[tanhInputCount];\n+            tanhNegRandInputs = new double[tanhInputCount];\n+\n+            for (int i = 0; i < tanhInputCount; i++) {\n+                double tanhLowerBound = tanhRangeInputs[tanhRangeIndex][0];\n+                double tanhUpperBound = tanhRangeInputs[tanhRangeIndex][1];\n+                tanhPosRandInputs[i] = random.nextDouble(tanhLowerBound, tanhUpperBound);\n+                tanhNegRandInputs[i] = random.nextDouble(-tanhUpperBound, -tanhLowerBound);\n+            }\n+        }\n+\n+        @Benchmark\n+        @OperationsPerInvocation(2048)\n+        public double  tanhPosRangeDouble() {\n+            double res = 0.0;\n+            for (int i = 0; i < tanhInputCount; i++) {\n+                res += Math.tanh(tanhPosRandInputs[i]);\n+            }\n+            return res;\n+        }\n+\n+        @Benchmark\n+        @OperationsPerInvocation(2048)\n+        public double  tanhNegRangeDouble() {\n+            double res = 0.0;\n+            for (int i = 0; i < tanhInputCount; i++) {\n+                res += Math.tanh(tanhNegRandInputs[i]);\n+            }\n+            return res;\n+        }\n+    }\n+\n+    @Warmup(iterations = 3, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Measurement(iterations = 4, time = 5, timeUnit = TimeUnit.SECONDS)\n+    @Fork(2)\n+    @BenchmarkMode(Mode.Throughput)\n+    @State(Scope.Thread)\n+    @OutputTimeUnit(TimeUnit.MILLISECONDS)\n+    public static class TanhPerfConstant {\n+        public static final double constDoubleTiny  = 0x1.0P-57;\n+        public static final double constDoubleSmall = 0x1.0P-54;\n+        public static final double constDouble1     = 1.0;\n+        public static final double constDouble21    = 21.0;\n+        public static final double constDoubleLarge = 23.0;\n+\n+        @Benchmark\n+        public double  tanhConstDoubleTiny() {\n+            return  Math.tanh(constDoubleTiny);\n+        }\n+\n+        @Benchmark\n+        public double  tanhConstDoubleSmall() {\n+            return  Math.tanh(constDoubleSmall);\n+        }\n+\n+        @Benchmark\n+        public double  tanhConstDouble1() {\n+            return  Math.tanh(constDouble1);\n+        }\n+\n+        @Benchmark\n+        public double  tanhConstDouble21() {\n+            return  Math.tanh(constDouble21);\n+        }\n+\n+        @Benchmark\n+        public double  tanhConstDoubleLarge() {\n+            return  Math.tanh(constDoubleLarge);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws RunnerException {\n+        Options opt = new OptionsBuilder()\n+                .include(TanhPerfRanges.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+\n+        opt = new OptionsBuilder()\n+                .include(TanhPerfConstant.class.getSimpleName())\n+                .build();\n+\n+        new Runner(opt).run();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/TanhPerf.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"}]}