{"files":[{"patch":"@@ -359,0 +359,5 @@\n+        \/\/ Eliminate trailing zeros.\n+        while (count > 1 && digits[count - 1] == '0') {\n+            --count;\n+        }\n+\n@@ -385,5 +390,0 @@\n-        \/\/ Eliminate trailing zeros.\n-        while (count > 1 && digits[count - 1] == '0') {\n-            --count;\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/java\/text\/DigitList.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8369050\n+ * @summary Check rounding of DecimalFormat on tie cases when the maximum\n+ *      fraction digits allowed is one less than the position of the first\n+ *      significant digit in the double.\n+ * @run junit RoundingToLSDTieTest\n+ *\/\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.math.RoundingMode;\n+import java.text.NumberFormat;\n+import java.util.Locale;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+public class RoundingToLSDTieTest {\n+\n+    \/\/ Safe to re-use since we are not testing any fast-path cases\n+    \/\/ so state is irrelevant\n+    private static final NumberFormat format = NumberFormat.getInstance(Locale.US);\n+\n+    @ParameterizedTest\n+    @MethodSource(\"ties\")\n+    void roundingTieTest(RoundingMode rm, int maxDigits, double db, String expected) {\n+        format.setRoundingMode(rm);\n+        format.setMaximumFractionDigits(maxDigits);\n+        assertEquals(expected, format.format(db), \"Rounding failed under \" + rm);\n+    }\n+\n+    static Stream<Arguments> ties() {\n+        return Stream.of(\n+                \/\/ 1) String is exact as binary\n+                \/\/ 0.5 -> 0.5\n+                Arguments.of(RoundingMode.HALF_EVEN, 0, 0.5, \"0\"),\n+                Arguments.of(RoundingMode.HALF_UP, 0, 0.5, \"1\"),\n+                Arguments.of(RoundingMode.HALF_DOWN, 0, 0.5, \"0\"),\n+                \/\/ 2) String is rounded up from binary\n+                \/\/ 0.0000005 -> 4.999999999999999773740559129431293428069693618454039096832275390625E-7\n+                Arguments.of(RoundingMode.HALF_EVEN, 6, 0.0000005, \"0\"),\n+                Arguments.of(RoundingMode.HALF_UP, 6, 0.0000005, \"0\"),\n+                Arguments.of(RoundingMode.HALF_DOWN, 6, 0.0000005, \"0\"),\n+                \/\/ 3) String is not rounded up from binary\n+                \/\/ Non-exponential notation\n+                \/\/ 0.05 -> 0.05000000000000000277555756156289135105907917022705078125\n+                Arguments.of(RoundingMode.HALF_EVEN, 1, 0.05, \"0.1\"),\n+                Arguments.of(RoundingMode.HALF_UP, 1, 0.05, \"0.1\"),\n+                Arguments.of(RoundingMode.HALF_DOWN, 1, 0.05, \"0.1\"),\n+                \/\/ Exponential notation\n+                \/\/ 0.00005 -> 0.0000500000000000000023960868011929647991564706899225711822509765625\n+                Arguments.of(RoundingMode.HALF_EVEN, 4, 0.00005, \"0.0001\"),\n+                Arguments.of(RoundingMode.HALF_UP, 4, 0.00005, \"0.0001\"),\n+                Arguments.of(RoundingMode.HALF_DOWN, 4, 0.00005, \"0.0001\")\n+        );\n+    }\n+}\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/RoundingToLSDTieTest.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -33,1 +33,1 @@\n- * 8174269\n+ * 8174269 8369050\n@@ -1779,1 +1779,1 @@\n-                \"0.04\", \"0.000\", \"0.002\",\n+                \"0.04\", \"0.001\", \"0.002\",\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/NumberRegression.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}