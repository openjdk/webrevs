{"files":[{"patch":"@@ -268,0 +268,1 @@\n+  \/\/ Single-iteration \"loop\"\n@@ -269,0 +270,1 @@\n+    \/\/ Case1: eden is enough without expansion\n@@ -270,1 +272,0 @@\n-      \/\/ Eden is enough without expansion\n@@ -276,0 +277,1 @@\n+    \/\/ Case2: eden needs expansion but no OS committing\n@@ -282,0 +284,1 @@\n+    \/\/ Case3: eden needs OS committing and expansion\n@@ -334,1 +337,1 @@\n-  assert(max_gen_size() > 2 * current_survivor_size, \"inv\");\n+  assert(current_eden_size + 2 * current_survivor_size <= max_gen_size(), \"inv\");\n@@ -377,1 +380,2 @@\n-  \/\/ We usually resize young-gen only after a successful young-gc. However, in emergency state, we wanna expand young-gen to its max-capacity.\n+  \/\/ We usually resize young-gen only after a successful young-gc. However, in\n+  \/\/ an emergency state, we want to expand young-gen to its max-capacity.\n@@ -379,1 +383,1 @@\n-  if (eden_space()->is_empty() && to_space()->is_empty()) {\n+  if (eden_space()->is_empty() && from_space()->is_empty() && to_space()->is_empty()) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.cpp","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -62,5 +62,0 @@\n-\n-    cname = PerfDataManager::counter_name(_name_space, \"gcTimeLimitExceeded\");\n-    _gc_overhead_limit_exceeded_counter =\n-        PerfDataManager::create_variable(SUN_GC, cname, PerfData::U_Events,\n-                                         CHECK);\n","filename":"src\/hotspot\/share\/gc\/shared\/gcPolicyCounters.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-  PerfVariable* _gc_overhead_limit_exceeded_counter;\n@@ -59,4 +58,0 @@\n-  inline PerfVariable* gc_overhead_limit_exceeded_counter() const {\n-    return _gc_overhead_limit_exceeded_counter;\n-  }\n-\n","filename":"src\/hotspot\/share\/gc\/shared\/gcPolicyCounters.hpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}