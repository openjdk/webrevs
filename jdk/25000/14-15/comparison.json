{"files":[{"patch":"@@ -840,1 +840,6 @@\n-  young_gen()->resize_after_full_gc();\n+  \/\/ We don't resize young-gen after full-gc because:\n+  \/\/ 1. eden-size directly affects young-gc frequency (GCTimeRatio), and we\n+  \/\/ don't have enough info to determine its desired size.\n+  \/\/ 2. eden can contain live objs after a full-gc, which is unsafe for\n+  \/\/ resizing. We will perform expansion on allocation if needed, in\n+  \/\/ satisfy_failed_allocation().\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -373,15 +373,0 @@\n-void PSYoungGen::resize_after_full_gc() {\n-  \/\/ We usually resize young-gen only after a successful young-gc. However, in\n-  \/\/ an emergency state, we want to expand young-gen to its max-capacity.\n-  \/\/ Young-gen should be empty normally after a full-gc.\n-  if (eden_space()->is_empty() && from_space()->is_empty() && to_space()->is_empty()) {\n-    return;\n-  }\n-\n-  \/\/ Emergency state; keep survivor size and expand eden to its max\n-  const size_t survivor_size = from_space()->capacity_in_bytes();\n-  const size_t eden_size = max_gen_size() - 2 * survivor_size;\n-\n-  resize_inner(eden_size, survivor_size);\n-}\n-\n@@ -421,0 +406,3 @@\n+  assert(eden_space()->is_empty(), \"precondition\");\n+  assert(to_space()->is_empty(), \"precondition\");\n+\n@@ -490,0 +478,1 @@\n+  assert(from_space()->bottom() < to_space()->bottom(), \"precondition\");\n@@ -491,23 +480,7 @@\n-  assert(requested_eden_size >= eden_space()->used_in_bytes(), \"precondition\");\n-  assert(requested_survivor_size >= from_space()->used_in_bytes(), \"precondition\");\n-  assert(requested_survivor_size >= to_space()->used_in_bytes(), \"precondition\");\n-\n-  char *from_start, *from_end, *to_start, *to_end, *eden_start, *eden_end;\n-\n-  if (from_space()->bottom() < to_space()->bottom()) {\n-    \/\/ layout: from, to, eden\n-    from_start = virtual_space()->low();\n-    from_end = from_start + requested_survivor_size;\n-    to_start = from_end;\n-    to_end = to_start + requested_survivor_size;\n-    eden_start = to_end;\n-    eden_end = eden_start + requested_eden_size;\n-  } else {\n-    \/\/ layout: to, from, eden\n-    to_start = virtual_space()->low();\n-    to_end = to_start + requested_survivor_size;\n-    from_start = to_end;\n-    from_end = from_start + requested_survivor_size;\n-    eden_start = from_end;\n-    eden_end = eden_start + requested_eden_size;\n-  }\n+  \/\/ layout: from, to, eden\n+  char* from_start = virtual_space()->low();\n+  char* from_end = from_start + requested_survivor_size;\n+  char* to_start = from_end;\n+  char* to_end = to_start + requested_survivor_size;\n+  char* eden_start = to_end;\n+  char* eden_end = eden_start + requested_eden_size;\n@@ -526,8 +499,0 @@\n-  if (!to_space()->is_empty()) {\n-    assert(toMR.start() == to_space()->bottom(), \"inv\");\n-    assert(toMR.contains(to_space()->used_region()), \"inv\");\n-  }\n-  if (!eden_space()->is_empty()) {\n-    assert(edenMR.start() == eden_space()->bottom(), \"inv\");\n-    assert(edenMR.contains(eden_space()->used_region()), \"inv\");\n-  }\n@@ -542,1 +507,1 @@\n-                           eden_space()->is_empty(),\n+                           SpaceDecorator::Clear,\n@@ -547,1 +512,1 @@\n-                           to_space()->is_empty(),\n+                           SpaceDecorator::Clear,\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.cpp","additions":13,"deletions":48,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -116,1 +116,0 @@\n-  void resize_after_full_gc();\n","filename":"src\/hotspot\/share\/gc\/parallel\/psYoungGen.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}