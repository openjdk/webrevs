{"files":[{"patch":"@@ -155,2 +155,0 @@\n-java\/awt\/Mixing\/AWT_Mixing\/HierarchyBoundsListenerMixingTest.java 8049405 macosx-all\n-java\/awt\/Mixing\/AWT_Mixing\/OpaqueOverlapping.java 8294264 windows-x64\n@@ -164,27 +162,0 @@\n-java\/awt\/Mixing\/AWT_Mixing\/JButtonInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JButtonOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JColorChooserOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JEditorPaneInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JEditorPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JLabelInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JLabelOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JListInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JListOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JPanelInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JPanelOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JProgressBarInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JProgressBarOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JScrollBarInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JScrollBarOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JSliderInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JSliderOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JSpinnerInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JSpinnerOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTableInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTableOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTextAreaInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTextAreaOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTextFieldInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JTextFieldOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JToggleButtonInGlassPaneOverlapping.java 8158801 windows-all\n-java\/awt\/Mixing\/AWT_Mixing\/JToggleButtonOverlapping.java 8158801 windows-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":29,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+import java.awt.Component;\n@@ -25,0 +26,1 @@\n+import java.awt.KeyboardFocusManager;\n@@ -26,0 +28,2 @@\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n@@ -29,0 +33,2 @@\n+import java.awt.event.WindowEvent;\n+import java.awt.event.WindowFocusListener;\n@@ -30,0 +36,4 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.swing.FocusManager;\n@@ -51,0 +61,3 @@\n+    {\n+        multiFramesTest = false;\n+    }\n@@ -86,0 +99,1 @@\n+        f.setLocationRelativeTo(null);\n@@ -109,0 +123,6 @@\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        f.addFocusListener(new FocusAdapter() {\n+            @Override public void focusGained(FocusEvent e) {\n+                latch.countDown();\n+            }\n+        });\n@@ -115,2 +135,11 @@\n-                        testedComponent.setBounds(0, 0, testedComponent.getPreferredSize().width, testedComponent.getPreferredSize().height + 20);\n-                        ancestorLoc = f.getLocationOnScreen();\n+                        testedComponent.setBounds(0, 0,\n+                                testedComponent.getPreferredSize().width,\n+                                testedComponent.getPreferredSize().height + 20);\n+                        Component focusOwner = KeyboardFocusManager.getCurrentKeyboardFocusManager()\n+                                .getFocusOwner();\n+                        if (focusOwner == f) {\n+                            \/\/ frame already had focus\n+                            latch.countDown();\n+                        } else {\n+                            f.requestFocusInWindow();\n+                        }\n@@ -126,14 +155,8 @@\n-\n-            \/* this is a workaround for certain jtreg(?) focus issue:\n-               tests fail starting after failing mixing tests but always pass alone.\n-             *\/\n-            Util.waitForIdle(robot);\n-            ancestorLoc.translate(isOel7orLater() ? 5 : f.getWidth() \/ 2 - 15, 2);\n-            robot.mouseMove(ancestorLoc.x, ancestorLoc.y);\n-            Util.waitForIdle(robot);\n-            robot.mousePress(InputEvent.BUTTON1_MASK);\n-            robot.delay(50);\n-            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-            Util.waitForIdle(robot);\n-\n-            clickAndBlink(robot, lLoc);\n+            try {\n+                if (!latch.await(1, TimeUnit.SECONDS)) {\n+                    throw new RuntimeException(\"Ancestor frame didn't receive focus\");\n+                }\n+                clickAndBlink(robot, lLoc);\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n@@ -142,0 +165,1 @@\n+            latch.countDown();\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/GlassPaneOverlappingTestBase.java","additions":41,"deletions":17,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,1 +67,0 @@\n-        frame.setVisible(true);\n@@ -82,0 +81,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JComboBoxOverlapping.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -120,0 +120,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JInternalFrameMoveOverlapping.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,0 +78,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JInternalFrameOverlapping.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -75,1 +75,0 @@\n-        frame.setVisible(true);\n@@ -107,0 +106,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JMenuBarOverlapping.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,0 +85,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JPopupMenuOverlapping.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,0 +98,1 @@\n+        f.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JScrollPaneOverlapping.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,0 +92,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/JSplitPaneOverlapping.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,0 +68,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/MixingFrameResizing.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -133,0 +133,1 @@\n+                frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/MixingPanelsResizing.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,0 +92,1 @@\n+        frame.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/OpaqueOverlapping.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,0 +37,1 @@\n+import java.awt.Window;\n@@ -174,0 +175,1 @@\n+                    frame.setLocationRelativeTo(null);\n@@ -262,0 +264,3 @@\n+                if(container instanceof Window){\n+                    ((Window) container).setLocationRelativeTo(null);\n+                }\n@@ -304,0 +309,1 @@\n+                eframe.setLocationRelativeTo(null);\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/OverlappingTestBase.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,4 +24,15 @@\n-import java.awt.*;\n-import java.awt.event.*;\n-import java.util.regex.*;\n-import javax.swing.*;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.FocusAdapter;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import javax.swing.JComponent;\n+import javax.swing.JFrame;\n+import javax.swing.SpringLayout;\n+\n@@ -43,0 +54,1 @@\n+    protected boolean multiFramesTest = true;\n@@ -117,0 +129,1 @@\n+        f.setLocationRelativeTo(null);\n@@ -144,10 +157,19 @@\n-        if( ancestor != null ) {\n-            Point ancestorLoc = ancestor.getLocationOnScreen();\n-            ancestorLoc.translate(isOel7orLater() ? 5 :\n-                                             ancestor.getWidth() \/ 2 - 15, 2);\n-            robot.mouseMove(ancestorLoc.x, ancestorLoc.y);\n-            Util.waitForIdle(robot);\n-            robot.mousePress(InputEvent.BUTTON1_MASK);\n-            robot.delay(50);\n-            robot.mouseRelease(InputEvent.BUTTON1_MASK);\n-            Util.waitForIdle(robot);\n+\n+        if (ancestor != null) {\n+            final CountDownLatch latch = new CountDownLatch(1);\n+            ancestor.addFocusListener(new FocusAdapter() {\n+                @Override public void focusGained(FocusEvent e) {\n+                    latch.countDown();\n+                }\n+            });\n+            ancestor.requestFocus();\n+            try {\n+                boolean await = latch.await(1L, TimeUnit.SECONDS);\n+                if (!await) {\n+                    throw new RuntimeException(\"Ancestor frame didn't receive \" +\n+                            \"focus\");\n+                }\n+            } catch (InterruptedException e) {\n+                throw new RuntimeException(e);\n+            }\n+\n@@ -156,2 +178,4 @@\n-        clickAndBlink(robot, lLoc);\n-        Util.waitForIdle(robot);\n+            clickAndBlink(robot, lLoc);\n+            if(ancestor != null && multiFramesTest){\n+                ancestor.dispose();\n+            }\n","filename":"test\/jdk\/java\/awt\/Mixing\/AWT_Mixing\/SimpleOverlappingTestBase.java","additions":41,"deletions":17,"binary":false,"changes":58,"status":"modified"}]}