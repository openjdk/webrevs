{"files":[{"patch":"@@ -36,0 +36,1 @@\n+#include \"compiler\/compilationFailureInfo.hpp\"\n@@ -40,0 +41,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n@@ -585,0 +587,1 @@\n+, _first_failure_details(nullptr)\n@@ -629,1 +632,1 @@\n-\n+  delete _first_failure_details;\n@@ -655,0 +658,3 @@\n+    if (CaptureBailoutInformation) {\n+      _first_failure_details = new CompilationFailureInfo(msg);\n+    }\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.cpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,0 +37,1 @@\n+class CompilationFailureInfo;\n@@ -88,0 +89,1 @@\n+  CompilationFailureInfo* _first_failure_details; \/\/ Details for the first failure happening during compilation\n@@ -215,0 +217,1 @@\n+  const CompilationFailureInfo* first_failure_details() const { return _first_failure_details; }\n","filename":"src\/hotspot\/share\/c1\/c1_Compilation.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -365,1 +365,1 @@\n-  CompileTask* task() { return _task; }\n+  CompileTask* task() const { return _task; }\n@@ -447,1 +447,1 @@\n-  void* compiler_data() { return _compiler_data; }\n+  void* compiler_data() const { return _compiler_data; }\n","filename":"src\/hotspot\/share\/ci\/ciEnv.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,121 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Red Hat, Inc. and\/or its affiliates.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+\n+#if defined(COMPILER1) || defined(COMPILER2)\n+\n+#ifdef COMPILER1\n+#include \"c1\/c1_Compilation.hpp\"\n+#endif\n+#include \"ci\/ciEnv.hpp\"\n+#include \"compiler\/abstractCompiler.hpp\"\n+#include \"compiler\/compilationFailureInfo.hpp\"\n+#include \"compiler\/compileTask.hpp\"\n+#ifdef COMPILER2\n+#include \"opto\/node.hpp\"\n+#include \"opto\/compile.hpp\"\n+#endif\n+#include \"runtime\/os.hpp\"\n+#include \"utilities\/ostream.hpp\"\n+#include \"utilities\/nativeCallStack.hpp\"\n+\n+CompilationFailureInfo::CompilationFailureInfo(const char* failure_reason) :\n+  _stack(2),\n+  _failure_reason(os::strdup(failure_reason)),\n+  _elapsed_seconds(os::elapsedTime()),\n+  _compile_id(ciEnv::current()->task()->compile_id())\n+{}\n+\n+CompilationFailureInfo::~CompilationFailureInfo() {\n+  os::free(_failure_reason);\n+}\n+\n+void CompilationFailureInfo::print_on(outputStream* st) const {\n+  st->print(\"  Time: \");\n+  os::print_elapsed_time(st, _elapsed_seconds);\n+  st->print_cr(\"  Compile id: %d\", _compile_id);\n+  st->print_cr(\"  Reason: '%s'\", _failure_reason);\n+  st->print_cr(\"  Callstack: \");\n+  _stack.print_on(st);\n+  st->cr();\n+}\n+\n+\/\/ Convenience function to print current compile failure iff\n+\/\/ current thread is compiler thread and there is a pending failure.\n+\/\/ Otherwise prints nothing.\n+bool CompilationFailureInfo::print_pending_compilation_failure(outputStream* st) {\n+\n+  const CompilationFailureInfo* info = nullptr;\n+\n+  \/\/ Carefully tiptoeing because we are called from the error reporter and\n+  \/\/ nothing is certain.\n+\n+  const Thread* const t = Thread::current();\n+  if (t == nullptr || !t->is_Compiler_thread()) {\n+    return false;\n+  }\n+\n+  const ciEnv* const env = ciEnv::current();\n+  if (env == nullptr) {\n+    return false;\n+  }\n+\n+  const CompileTask* const task = env->task();\n+  if (task == nullptr) {\n+    return false;\n+  }\n+\n+  const AbstractCompiler* const compiler = task->compiler();\n+  if (compiler == nullptr) {\n+    return false;\n+  }\n+\n+#ifdef COMPILER1\n+  if (compiler->type() == compiler_c1) {\n+    const Compilation* const C = (Compilation*)env->compiler_data();\n+    if (C != nullptr) {\n+      info = C->first_failure_details();\n+    }\n+  }\n+#endif\n+#ifdef COMPILER2\n+  if (compiler->type() == compiler_c2) {\n+    const Compile* const C = (Compile*)env->compiler_data();\n+    if (C != nullptr) {\n+      info = C->first_failure_details();\n+    }\n+  }\n+#endif\n+\n+  if (info != nullptr) {\n+    st->print_cr(\"Pending compilation failure details for thread \" PTR_FORMAT \":\", p2i(t));\n+    info->print_on(st);\n+  }\n+\n+  return true;\n+}\n+\n+#endif \/\/ defined(COMPILER1) || defined(COMPILER2)\n","filename":"src\/hotspot\/share\/compiler\/compilationFailureInfo.cpp","additions":121,"deletions":0,"binary":false,"changes":121,"status":"added"},{"patch":"@@ -0,0 +1,57 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, Red Hat, Inc. and\/or its affiliates.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_COMPILER_COMPILATIONFAILUREINFO_HPP\n+#define SHARE_COMPILER_COMPILATIONFAILUREINFO_HPP\n+\n+#if defined(COMPILER1) || defined(COMPILER2)\n+\n+#include \"memory\/allocation.hpp\"\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/nativeCallStack.hpp\"\n+\n+class outputStream;\n+class Symbol;\n+\n+class CompilationFailureInfo : public CHeapObj<mtCompiler> {\n+  NativeCallStack _stack;\n+  char* const _failure_reason;\n+  const double _elapsed_seconds;\n+  const int _compile_id;\n+public:\n+  CompilationFailureInfo(const char* failure_reason);\n+  ~CompilationFailureInfo();\n+  void print_on(outputStream* st) const;\n+\n+  \/\/ Convenience function to print, safely, current compile failure iff\n+  \/\/ current thread is compiler thread and there is an ongoing compilation\n+  \/\/ and a pending failure.\n+  \/\/ Otherwise prints nothing.\n+  static bool print_pending_compilation_failure(outputStream* st);\n+};\n+\n+#endif \/\/ defined(COMPILER1) || defined(COMPILER2)\n+\n+#endif \/\/ SHARE_COMPILER_COMPILATIONFAILUREINFO_HPP\n","filename":"src\/hotspot\/share\/compiler\/compilationFailureInfo.hpp","additions":57,"deletions":0,"binary":false,"changes":57,"status":"added"},{"patch":"@@ -382,0 +382,4 @@\n+  product(bool, CaptureBailoutInformation, trueInDebug, DIAGNOSTIC,         \\\n+          \"If compilation is stopped with an error, capture diagnostic \"    \\\n+          \"information at the bailout point\")                               \\\n+                                                                            \\\n","filename":"src\/hotspot\/share\/compiler\/compiler_globals.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"compiler\/compilationFailureInfo.hpp\"\n@@ -35,0 +36,1 @@\n+#include \"compiler\/compiler_globals.hpp\"\n@@ -640,0 +642,1 @@\n+                  _first_failure_details(nullptr),\n@@ -929,0 +932,1 @@\n+    _first_failure_details(nullptr),\n@@ -992,0 +996,5 @@\n+Compile::~Compile() {\n+  delete _print_inlining_stream;\n+  delete _first_failure_details;\n+};\n+\n@@ -4361,0 +4370,3 @@\n+    if (CaptureBailoutInformation) {\n+      _first_failure_details = new CompilationFailureInfo(reason);\n+    }\n","filename":"src\/hotspot\/share\/opto\/compile.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+class CompilationFailureInfo;\n@@ -366,0 +367,1 @@\n+  CompilationFailureInfo* _first_failure_details; \/\/ Details for the first failure happening during compilation\n@@ -812,0 +814,1 @@\n+  const CompilationFailureInfo* first_failure_details() const { return _first_failure_details; }\n@@ -1128,3 +1131,1 @@\n-  ~Compile() {\n-    delete _print_inlining_stream;\n-  };\n+  ~Compile();\n","filename":"src\/hotspot\/share\/opto\/compile.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1108,0 +1108,4 @@\n+static constexpr int secs_per_day  = 86400;\n+static constexpr int secs_per_hour = 3600;\n+static constexpr int secs_per_min  = 60;\n+\n@@ -1109,3 +1113,0 @@\n-  const int secs_per_day  = 86400;\n-  const int secs_per_hour = 3600;\n-  const int secs_per_min  = 60;\n@@ -1137,0 +1138,6 @@\n+  st->print(\" elapsed time: \");\n+  print_elapsed_time(st, t);\n+  st->cr();\n+}\n+\n+void os::print_elapsed_time(outputStream* st, double time) {\n@@ -1138,2 +1145,2 @@\n-  int eltime = (int)t;  \/\/ elapsed time in seconds\n-  int eltimeFraction = (int) ((t - eltime) * 1000000);\n+  int eltime = (int)time;  \/\/ elapsed time in seconds\n+  int eltimeFraction = (int) ((time - eltime) * 1000000);\n@@ -1149,1 +1156,1 @@\n-  st->print_cr(\" elapsed time: %d.%06d seconds (%dd %dh %dm %ds)\", eltime, eltimeFraction, eldays, elhours, elmins, elsecs);\n+  st->print(\"%d.%06d seconds (%dd %dh %dm %ds)\", eltime, eltimeFraction, eldays, elhours, elmins, elsecs);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":13,"deletions":6,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -792,0 +792,1 @@\n+  static void print_elapsed_time(outputStream* st, double time);\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"compiler\/compilationFailureInfo.hpp\"\n@@ -1056,0 +1057,6 @@\n+#if defined(COMPILER1) || defined(COMPILER2)\n+  STEP_IF(\"printing pending compilation failure\",\n+          _verbose && _thread != nullptr && _thread->is_Compiler_thread())\n+    CompilationFailureInfo::print_pending_compilation_failure(st);\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/vmError.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}