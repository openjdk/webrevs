{"files":[{"patch":"@@ -188,1 +188,1 @@\n-        return parse(header, false);\n+        return parse(header, false, -1L);\n@@ -194,2 +194,2 @@\n-    \/\/ class.\n-    private static List<HttpCookie> parse(String header, boolean retainHeader) {\n+    \/\/ class. Also, allows for testing by specifying the creation time.\n+    static List<HttpCookie> parse(String header, boolean retainHeader, long currentTimeMillis) {\n@@ -212,1 +212,1 @@\n-            HttpCookie cookie = parseInternal(header, retainHeader);\n+            HttpCookie cookie = parseInternal(header, retainHeader, currentTimeMillis);\n@@ -221,1 +221,1 @@\n-                HttpCookie cookie = parseInternal(cookieStr, retainHeader);\n+                HttpCookie cookie = parseInternal(cookieStr, retainHeader, currentTimeMillis);\n@@ -241,0 +241,5 @@\n+        return hasExpired(System.currentTimeMillis());\n+    }\n+\n+    \/\/ PP for testing\n+    boolean hasExpired(long currentTimeMillis) {\n@@ -248,1 +253,1 @@\n-        long deltaSecond = (System.currentTimeMillis() - whenCreated) \/ 1000;\n+        long deltaSecond = (currentTimeMillis - whenCreated) \/ 1000;\n@@ -825,1 +830,2 @@\n-                                            boolean retainHeader)\n+                                            boolean retainHeader,\n+                                            long currentTimeMillis)\n@@ -829,0 +835,2 @@\n+        if (currentTimeMillis == -1L)\n+            currentTimeMillis = System.currentTimeMillis();\n@@ -843,1 +851,1 @@\n-                                            header);\n+                                            header, currentTimeMillis);\n@@ -846,1 +854,2 @@\n-                                            stripOffSurroundingQuote(value));\n+                                            stripOffSurroundingQuote(value),\n+                                            null, currentTimeMillis);\n@@ -1023,1 +1032,1 @@\n-                    return HttpCookie.parse(header, true);\n+                    return HttpCookie.parse(header, true, -1L);\n","filename":"src\/java.base\/share\/classes\/java\/net\/HttpCookie.java","additions":19,"deletions":10,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8351983\n- * @summary HttpCookie Parser Incorrectly Handles Cookies with Expires Attribute\n- *\/\n-\n-import java.net.*;\n-import java.util.*;\n-\n-public class MaxAgeExpires {\n-\n-    static record Test(long maxAge, String expires, long expectedAge, boolean hasExpired) {\n-        public void run() throws RuntimeException {\n-            StringBuilder sb = new StringBuilder();\n-            sb.append(\"Set-Cookie: name=value\");\n-            if (expires() != null)\n-                sb.append(\"; expires=\" + expires());\n-            if (maxAge() != -1)\n-                sb.append(\"; max-age=\" + Long.toString(maxAge));\n-\n-            String s = sb.toString();\n-            System.out.println(s);\n-            var cookie = HttpCookie.parse(s).get(0);\n-\n-            if (expectedAge != -1 && cookie.getMaxAge() != expectedAge()) {\n-                System.out.println(\"getMaxAge() returned \" + cookie.getMaxAge());\n-                System.out.println(\"expectedAge() was \" + expectedAge());\n-                throw new RuntimeException(\"Test failed: wrong age\");\n-            }\n-\n-            if (cookie.hasExpired() != hasExpired()) {\n-                System.out.println(\"cookie.hasExpired() returned \" + cookie.hasExpired());\n-                System.out.println(\"hasExpired() was \" + hasExpired());\n-                System.out.println(\"getMaxAge() returned \" + cookie.getMaxAge());\n-                throw new RuntimeException(\"Test failed: wrong hasExpired\");\n-            }\n-        }\n-    }\n-\n-    static Test[] tests = new Test[] {\n-        \/\/ Date string in past.\n-        new Test(-1, \"Thu, 01 Jan 2024 00:00:00 GMT\", 0, true),\n-        new Test(1000, \"Thu, 01 Jan 2024 00:00:00 GMT\", 1000, false),\n-        new Test(0, \"Thu, 01 Jan 2024 00:00:00 GMT\", 0, true),\n-        \/\/ Far in the future. Just check hasExpired() not the exact maxAge\n-        new Test(-1, \"Thu, 01 Jan 3024 00:00:00 GMT\", -1, false)\n-    };\n-\n-    public static void main(String[] args) throws Exception {\n-        for (Test test : tests) {\n-            test.run();\n-        }\n-    }\n-}\n","filename":"test\/jdk\/java\/net\/HttpCookie\/MaxAgeExpires.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8351983\n+ * @summary HttpCookie Parser Incorrectly Handles Cookies with Expires Attribute\n+ * @run testng java.base\/java.net.MaxAgeExpires\n+ *\/\n+public class MaxAgeExpiresDriver {\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/net\/HttpCookie\/whitebox\/MaxAgeExpiresDriver.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,125 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.net;\n+\n+import java.time.*;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+\n+public class MaxAgeExpires {\n+\n+    static final DateTimeFormatter dtFormatter =\n+        DateTimeFormatter.RFC_1123_DATE_TIME;\n+\n+    static final String NOW_PLUS_500_SEC =\n+        dtFormatter.format(ZonedDateTime.ofInstant(Instant.now()\n+                                        .plusSeconds(500), ZoneId.of(\"UTC\")));\n+\n+    \/\/ Test dates 1 minute apart\n+    static final String DT1 = \"Mon, 01 Jan 2024 01:00:00 GMT\";\n+    static final String DT2 = \"Mon, 01 Jan 2024 01:01:00 GMT\";\n+    static final String DT3 = \"Mon, 01 Jan 2024 01:02:00 GMT\";\n+\n+    static final String FAR_FUTURE = \"Mon, 01 Jan 4024 01:02:00 GMT\";\n+\n+    static final ZonedDateTime zdt1 = ZonedDateTime.parse(DT1, dtFormatter);\n+    static final ZonedDateTime zdt2 = ZonedDateTime.parse(DT2, dtFormatter);\n+    static final ZonedDateTime zdt3 = ZonedDateTime.parse(DT3, dtFormatter);\n+\n+    static long zdtToMillis(ZonedDateTime zdt) {\n+        return zdt.toInstant().getEpochSecond() * 1000; \/\/ always exact seconds\n+    }\n+\n+    @DataProvider(name = \"testData\")\n+    public Object[][] testData() {\n+        return new Object[][] {\n+            \/\/ Date string in past. But checking based on current time.\n+            {-1L, -1L, -1L, DT1, 0, true},\n+            {-1L, -1L, 1000, DT1, 1000, false},\n+            {-1L, -1L, 0, DT1, 0, true},\n+            {-1L, -1L, 1000, NOW_PLUS_500_SEC, 1000, false},\n+\n+            \/\/ Far in the future. Just check hasExpired() not the exact maxAge\n+            {-1L, -1L, -1L, FAR_FUTURE, -1L, false},\n+\n+            \/\/ Tests using fixed creation and verification dates\n+            \/\/ (independent of current time)\n+            \/\/                                        expires=\n+            \/\/                                   maxAge= |\n+            \/\/ create time      expiry check time   |    |expected maxAge\n+            \/\/      |                   |           |    |    |  hasExpired()\n+            \/\/      |                   |           |    |    |   |  expected\n+            {zdtToMillis(zdt1), zdtToMillis(zdt3), -1L, DT2, 60, true},\n+            {zdtToMillis(zdt1), zdtToMillis(zdt3),  20, DT2, 20, true},\n+            {zdtToMillis(zdt1), zdtToMillis(zdt2),  40, DT3, 40, true},\n+            {zdtToMillis(zdt1), zdtToMillis(zdt2), -1L, DT3,120, false}\n+\n+        };\n+    };\n+\n+\n+    @Test(dataProvider = \"testData\")\n+    public void run(long creationInstant, \/\/ if -1, then current time is used\n+                    long expiryCheckInstant,  \/\/ if -1 then current time is used\n+                    long maxAge, \/\/ if -1, then not included in String\n+                    String expires, \/\/ if null, then not included in String\n+                    long expectedAge, \/\/ expected return value from getMaxAge()\n+                    boolean hasExpired) \/\/ expected return value from hasExpired()\n+    throws Exception\n+    {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Set-Cookie: name=value\");\n+        if (expires != null)\n+            sb.append(\"; expires=\" + expires);\n+        if (maxAge != -1)\n+            sb.append(\"; max-age=\" + Long.toString(maxAge));\n+\n+        String s = sb.toString();\n+        System.out.println(s);\n+        HttpCookie cookie;\n+        if (creationInstant == -1)\n+            cookie = HttpCookie.parse(s).get(0);\n+        else\n+            cookie = HttpCookie.parse(s, false, creationInstant).get(0);\n+\n+        if (expectedAge != -1 && cookie.getMaxAge() != expectedAge) {\n+            System.out.println(\"getMaxAge returned \" + cookie.getMaxAge());\n+            System.out.println(\"expectedAge was \" + expectedAge);\n+            throw new RuntimeException(\"Test failed: wrong age\");\n+        }\n+\n+        boolean expired = expiryCheckInstant == -1\n+            ? cookie.hasExpired()\n+            : cookie.hasExpired(expiryCheckInstant);\n+\n+        if (expired != hasExpired) {\n+            System.out.println(\"cookie.hasExpired() returned \" + expired);\n+            System.out.println(\"hasExpired was \" + hasExpired);\n+            System.out.println(\"getMaxAge() returned \" + cookie.getMaxAge());\n+            throw new RuntimeException(\"Test failed: wrong hasExpired\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/HttpCookie\/whitebox\/java.base\/java\/net\/MaxAgeExpires.java","additions":125,"deletions":0,"binary":false,"changes":125,"status":"added"}]}