{"files":[{"patch":"@@ -233,1 +233,3 @@\n-     * Reports whether this HTTP cookie has expired or not.\n+     * Reports whether this HTTP cookie has expired or not. This is\n+     * based on whether {@link #getMaxAge()} seconds have elapsed since\n+     * this object was created.\n@@ -414,2 +416,12 @@\n-     * Returns the maximum age of the cookie, specified in seconds. By default,\n-     * {@code -1} indicating the cookie will persist until browser shutdown.\n+     * Returns the maximum age of the cookie, specified in seconds from the time\n+     * the object was created. By default, {@code -1} indicating the cookie will\n+     * persist until browser shutdown.\n+     *\n+     * The value of this attribute is determined by the following steps:\n+     *\n+     * <ol><li>If {@link #setMaxAge(long)} was called, return the value set.<\/li>\n+     * <li>If previous step failed, and a {@code Max-Age} attribute was parsed\n+     * then return that value.<\/li>\n+     * <li>If previous step failed, and an {@code Expires} attribute was parsed\n+     * then the maxAge calculated at parsing time from that date, is returned<\/li>\n+     * <li>If previous step failed, then return {@code -1}.<\/li><\/ol>\n@@ -843,0 +855,4 @@\n+        \/\/ Attributes that require special handling\n+        String expiresValue = null;\n+        String maxAgeValue = null;\n+\n@@ -855,0 +871,8 @@\n+            if (name.equalsIgnoreCase(\"max-age\")) {\n+                maxAgeValue = value;\n+                continue;\n+            }\n+            if (name.equalsIgnoreCase(\"expires\")) {\n+                expiresValue = value;\n+                continue;\n+            }\n@@ -859,0 +883,1 @@\n+        assignMaxAgeAttribute(cookie, expiresValue, maxAgeValue);\n@@ -906,14 +931,0 @@\n-        assignors.put(\"max-age\", new CookieAttributeAssignor(){\n-                public void assign(HttpCookie cookie,\n-                                   String attrName,\n-                                   String attrValue) {\n-                    try {\n-                        long maxage = Long.parseLong(attrValue);\n-                        if (cookie.getMaxAge() == MAX_AGE_UNSPECIFIED)\n-                            cookie.setMaxAge(maxage);\n-                    } catch (NumberFormatException ignored) {\n-                        throw new IllegalArgumentException(\n-                                \"Illegal cookie max-age attribute\");\n-                    }\n-                }\n-            });\n@@ -962,10 +973,0 @@\n-        assignors.put(\"expires\", new CookieAttributeAssignor(){ \/\/ Netscape only\n-                public void assign(HttpCookie cookie,\n-                                   String attrName,\n-                                   String attrValue) {\n-                    if (cookie.getMaxAge() == MAX_AGE_UNSPECIFIED) {\n-                        long delta = cookie.expiryDate2DeltaSeconds(attrValue);\n-                        cookie.setMaxAge(delta > 0 ? delta : 0);\n-                    }\n-                }\n-            });\n@@ -973,0 +974,24 @@\n+\n+    private static void assignMaxAgeAttribute(HttpCookie cookie,\n+                                               String expiresValue,\n+                                               String maxAgeValue)\n+    {\n+        if (cookie.getMaxAge() != MAX_AGE_UNSPECIFIED)\n+            return;\n+\n+        try {\n+            if (maxAgeValue != null) {\n+                long maxAge = Long.parseLong(maxAgeValue);\n+                cookie.setMaxAge(maxAge);\n+                return;\n+            }\n+        } catch (NumberFormatException ignored) {}\n+\n+        try {\n+            if (expiresValue != null) {\n+                long delta = cookie.expiryDate2DeltaSeconds(expiresValue);\n+                cookie.setMaxAge(delta > 0 ? delta : 0);\n+            }\n+        } catch (NumberFormatException ignored) {}\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/net\/HttpCookie.java","additions":52,"deletions":27,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8351983\n+ * @summary HttpCookie Parser Incorrectly Handles Cookies with Expires Attribute\n+ *\/\n+\n+import java.net.*;\n+import java.util.*;\n+\n+public class MaxAgeExpires {\n+\n+    static record Test(long maxAge, String expires, long expectedAge, boolean hasExpired) {\n+        public void run() throws RuntimeException {\n+            StringBuilder sb = new StringBuilder();\n+            sb.append(\"Set-Cookie: name=value\");\n+            if (expires() != null)\n+                sb.append(\"; expires=\" + expires());\n+            if (maxAge() != -1)\n+                sb.append(\"; max-age=\" + Long.toString(maxAge));\n+\n+            String s = sb.toString();\n+            System.out.println(s);\n+            var cookie = HttpCookie.parse(s).get(0);\n+\n+            if (expectedAge != -1 && cookie.getMaxAge() != expectedAge()) {\n+                System.out.println(\"getMaxAge() returned \" + cookie.getMaxAge());\n+                System.out.println(\"expectedAge() was \" + expectedAge());\n+                throw new RuntimeException(\"Test failed: wrong age\");\n+            }\n+\n+            if (cookie.hasExpired() != hasExpired()) {\n+                System.out.println(\"cookie.hasExpired() returned \" + cookie.hasExpired());\n+                System.out.println(\"hasExpired() was \" + hasExpired());\n+                System.out.println(\"getMaxAge() returned \" + cookie.getMaxAge());\n+                throw new RuntimeException(\"Test failed: wrong hasExpired\");\n+            }\n+        }\n+    }\n+\n+    static Test[] tests = new Test[] {\n+        \/\/ Date string in past.\n+        new Test(-1, \"Thu, 01 Jan 2024 00:00:00 GMT\", 0, true),\n+        new Test(1000, \"Thu, 01 Jan 2024 00:00:00 GMT\", 1000, false),\n+        new Test(0, \"Thu, 01 Jan 2024 00:00:00 GMT\", 0, true),\n+        \/\/ Far in the future. Just check hasExpired() not the exact maxAge\n+        new Test(-1, \"Thu, 01 Jan 3024 00:00:00 GMT\", -1, false)\n+    };\n+\n+    public static void main(String[] args) throws Exception {\n+        for (Test test : tests) {\n+            test.run();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/HttpCookie\/MaxAgeExpires.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}