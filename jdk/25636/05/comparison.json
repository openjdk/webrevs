{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -74,0 +74,5 @@\n+\n+    \/\/ Following two only used during parsing\n+    private String maxAgeAttrVal;\n+    private String expiresAttrVal;\n+\n@@ -188,1 +193,1 @@\n-        return parse(header, false);\n+        return parse(header, false, -1L);\n@@ -194,2 +199,2 @@\n-    \/\/ class.\n-    private static List<HttpCookie> parse(String header, boolean retainHeader) {\n+    \/\/ class. Also, allows for testing by specifying the creation time.\n+    static List<HttpCookie> parse(String header, boolean retainHeader, long currentTimeMillis) {\n@@ -212,1 +217,1 @@\n-            HttpCookie cookie = parseInternal(header, retainHeader);\n+            HttpCookie cookie = parseInternal(header, retainHeader, currentTimeMillis);\n@@ -221,1 +226,1 @@\n-                HttpCookie cookie = parseInternal(cookieStr, retainHeader);\n+                HttpCookie cookie = parseInternal(cookieStr, retainHeader, currentTimeMillis);\n@@ -233,1 +238,3 @@\n-     * Reports whether this HTTP cookie has expired or not.\n+     * Reports whether this HTTP cookie has expired or not. This is\n+     * based on whether {@link #getMaxAge()} seconds have elapsed since\n+     * this object was created.\n@@ -239,0 +246,5 @@\n+        return hasExpired(System.currentTimeMillis());\n+    }\n+\n+    \/\/ PP for testing\n+    boolean hasExpired(long currentTimeMillis) {\n@@ -246,1 +258,1 @@\n-        long deltaSecond = (System.currentTimeMillis() - whenCreated) \/ 1000;\n+        long deltaSecond = (currentTimeMillis - whenCreated) \/ 1000;\n@@ -414,2 +426,12 @@\n-     * Returns the maximum age of the cookie, specified in seconds. By default,\n-     * {@code -1} indicating the cookie will persist until browser shutdown.\n+     * Returns the maximum age of the cookie, specified in seconds from the time\n+     * the object was created. By default, {@code -1} indicating the cookie will\n+     * persist until browser shutdown.\n+     *\n+     * The value of this attribute is determined by the following steps:\n+     *\n+     * <ol><li>If {@link #setMaxAge(long)} was called, return the value set.<\/li>\n+     * <li>If previous step failed, and a {@code Max-Age} attribute was parsed\n+     * then return that value.<\/li>\n+     * <li>If previous step failed, and an {@code Expires} attribute was parsed\n+     * then the maxAge calculated at parsing time from that date, is returned<\/li>\n+     * <li>If previous step failed, then return {@code -1}.<\/li><\/ol>\n@@ -813,1 +835,2 @@\n-                                            boolean retainHeader)\n+                                            boolean retainHeader,\n+                                            long currentTimeMillis)\n@@ -817,0 +840,2 @@\n+        if (currentTimeMillis == -1L)\n+            currentTimeMillis = System.currentTimeMillis();\n@@ -831,1 +856,1 @@\n-                                            header);\n+                                            header, currentTimeMillis);\n@@ -834,1 +859,2 @@\n-                                            stripOffSurroundingQuote(value));\n+                                            stripOffSurroundingQuote(value),\n+                                            null, currentTimeMillis);\n@@ -855,1 +881,0 @@\n-\n@@ -859,0 +884,1 @@\n+        setMaxAgeAttribute(cookie);\n@@ -906,14 +932,0 @@\n-        assignors.put(\"max-age\", new CookieAttributeAssignor(){\n-                public void assign(HttpCookie cookie,\n-                                   String attrName,\n-                                   String attrValue) {\n-                    try {\n-                        long maxage = Long.parseLong(attrValue);\n-                        if (cookie.getMaxAge() == MAX_AGE_UNSPECIFIED)\n-                            cookie.setMaxAge(maxage);\n-                    } catch (NumberFormatException ignored) {\n-                        throw new IllegalArgumentException(\n-                                \"Illegal cookie max-age attribute\");\n-                    }\n-                }\n-            });\n@@ -950,0 +962,14 @@\n+        assignors.put(\"max-age\", new CookieAttributeAssignor(){\n+            public void assign(HttpCookie cookie,\n+                               String attrName,\n+                               String attrValue) {\n+                cookie.maxAgeAttrVal = attrValue;\n+            }\n+        });\n+        assignors.put(\"expires\", new CookieAttributeAssignor(){\n+            public void assign(HttpCookie cookie,\n+                               String attrName,\n+                               String attrValue) {\n+                cookie.expiresAttrVal = attrValue;\n+            }\n+        });\n@@ -962,10 +988,0 @@\n-        assignors.put(\"expires\", new CookieAttributeAssignor(){ \/\/ Netscape only\n-                public void assign(HttpCookie cookie,\n-                                   String attrName,\n-                                   String attrValue) {\n-                    if (cookie.getMaxAge() == MAX_AGE_UNSPECIFIED) {\n-                        long delta = cookie.expiryDate2DeltaSeconds(attrValue);\n-                        cookie.setMaxAge(delta > 0 ? delta : 0);\n-                    }\n-                }\n-            });\n@@ -973,0 +989,28 @@\n+\n+    private static void setMaxAgeAttribute(HttpCookie cookie)\n+    {\n+        if (cookie.getMaxAge() != MAX_AGE_UNSPECIFIED)\n+            return;\n+        if (cookie.expiresAttrVal == null && cookie.maxAgeAttrVal == null)\n+            return;\n+\n+        \/\/ strip off the surrounding \"-sign if there's any\n+        String expiresValue = stripOffSurroundingQuote(cookie.expiresAttrVal);\n+        String maxAgeValue = stripOffSurroundingQuote(cookie.maxAgeAttrVal);\n+\n+        try {\n+            if (maxAgeValue != null) {\n+                long maxAge = Long.parseLong(maxAgeValue);\n+                cookie.maxAge = maxAge;\n+                return;\n+            }\n+        } catch (NumberFormatException ignored) {}\n+\n+        try {\n+            if (expiresValue != null) {\n+                long delta = cookie.expiryDate2DeltaSeconds(expiresValue);\n+                cookie.maxAge = (delta > 0 ? delta : 0);\n+            }\n+        } catch (NumberFormatException ignored) {}\n+    }\n+\n@@ -992,1 +1036,1 @@\n-                    return HttpCookie.parse(header, true);\n+                    return HttpCookie.parse(header, true, -1L);\n","filename":"src\/java.base\/share\/classes\/java\/net\/HttpCookie.java","additions":83,"deletions":39,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -0,0 +1,31 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8351983\n+ * @summary HttpCookie Parser Incorrectly Handles Cookies with Expires Attribute\n+ * @run testng java.base\/java.net.MaxAgeExpires\n+ *\/\n+public class MaxAgeExpiresDriver {\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/net\/HttpCookie\/whitebox\/MaxAgeExpiresDriver.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"added"},{"patch":"@@ -0,0 +1,137 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.net;\n+\n+import java.time.*;\n+import java.time.format.DateTimeFormatter;\n+import java.util.*;\n+import org.testng.Assert;\n+import org.testng.annotations.Test;\n+import org.testng.annotations.DataProvider;\n+\n+public class MaxAgeExpires {\n+\n+    static final DateTimeFormatter dtFormatter =\n+        DateTimeFormatter.RFC_1123_DATE_TIME;\n+\n+    static final String NOW_PLUS_500_SEC =\n+        dtFormatter.format(ZonedDateTime.ofInstant(Instant.now()\n+                                        .plusSeconds(500), ZoneId.of(\"UTC\")));\n+\n+    \/\/ Test dates 1 minute apart\n+    static final String DT1 = \"Mon, 01 Jan 2024 01:00:00 GMT\";\n+    static final String DT2 = \"Mon, 01 Jan 2024 01:01:00 GMT\";\n+    static final String DT3 = \"Mon, 01 Jan 2024 01:02:00 GMT\";\n+\n+    static final String FAR_FUTURE = \"Mon, 01 Jan 4024 01:02:00 GMT\";\n+\n+    static final ZonedDateTime zdt1 = ZonedDateTime.parse(DT1, dtFormatter);\n+    static final ZonedDateTime zdt2 = ZonedDateTime.parse(DT2, dtFormatter);\n+    static final ZonedDateTime zdt3 = ZonedDateTime.parse(DT3, dtFormatter);\n+\n+    static long zdtToMillis(ZonedDateTime zdt) {\n+        return zdt.toInstant().getEpochSecond() * 1000; \/\/ always exact seconds\n+    }\n+\n+    @DataProvider(name = \"testData\")\n+    public Object[][] testData() {\n+        return new Object[][] {\n+            \/\/ Date string in past. But checking based on current time.\n+            {-1L, -1L, -1L, DT1, 0, true},\n+            {-1L, -1L, 1000, DT1, 1000, false},\n+            {-1L, -1L, 0, DT1, 0, true},\n+            {-1L, -1L, 1000, NOW_PLUS_500_SEC, 1000, false},\n+\n+            \/\/ Far in the future. Just check hasExpired() not the exact maxAge\n+            {-1L, -1L, -1L, FAR_FUTURE, -1L, false},\n+\n+            \/\/ Tests using fixed creation and verification dates\n+            \/\/ (independent of current time)\n+            \/\/                                        expires=\n+            \/\/                                   maxAge= |\n+            \/\/ create time      expiry check time   |    |expected maxAge\n+            \/\/      |                   |           |    |    |  hasExpired()\n+            \/\/      |                   |           |    |    |   |  expected\n+            {zdtToMillis(zdt1), zdtToMillis(zdt3), -1L, DT2, 60, true},\n+            {zdtToMillis(zdt1), zdtToMillis(zdt3),  20, DT2, 20, true},\n+            {zdtToMillis(zdt1), zdtToMillis(zdt2),  40, DT3, 40, true},\n+            {zdtToMillis(zdt1), zdtToMillis(zdt2), -1L, DT3,120, false}\n+\n+        };\n+    };\n+\n+\n+    @Test(dataProvider = \"testData\")\n+    public void test1(long creationInstant, \/\/ if -1, then current time is used\n+                    long expiryCheckInstant,  \/\/ if -1 then current time is used\n+                    long maxAge, \/\/ if -1, then not included in String\n+                    String expires, \/\/ if null, then not included in String\n+                    long expectedAge, \/\/ expected return value from getMaxAge()\n+                    boolean hasExpired) \/\/ expected return value from hasExpired()\n+    throws Exception\n+    {\n+        StringBuilder sb = new StringBuilder();\n+        sb.append(\"Set-Cookie: name=value\");\n+        if (expires != null)\n+            sb.append(\"; expires=\" + expires);\n+        if (maxAge != -1)\n+            sb.append(\"; max-age=\" + Long.toString(maxAge));\n+\n+        String s = sb.toString();\n+        System.out.println(s);\n+        HttpCookie cookie;\n+        if (creationInstant == -1)\n+            cookie = HttpCookie.parse(s).get(0);\n+        else\n+            cookie = HttpCookie.parse(s, false, creationInstant).get(0);\n+\n+        if (expectedAge != -1 && cookie.getMaxAge() != expectedAge) {\n+            System.out.println(\"getMaxAge returned \" + cookie.getMaxAge());\n+            System.out.println(\"expectedAge was \" + expectedAge);\n+            throw new RuntimeException(\"Test failed: wrong age\");\n+        }\n+\n+        boolean expired = expiryCheckInstant == -1\n+            ? cookie.hasExpired()\n+            : cookie.hasExpired(expiryCheckInstant);\n+\n+        if (expired != hasExpired) {\n+            System.out.println(\"cookie.hasExpired() returned \" + expired);\n+            System.out.println(\"hasExpired was \" + hasExpired);\n+            System.out.println(\"getMaxAge() returned \" + cookie.getMaxAge());\n+            throw new RuntimeException(\"Test failed: wrong hasExpired\");\n+        }\n+    }\n+\n+    @Test\n+    public void test2() {\n+        \/\/ Miscellaneous tests that setMaxAge() overrides whatever was set already\n+        HttpCookie cookie = HttpCookie.parse(\"Set-Cookie: name=value; max-age=100\").get(0);\n+        Assert.assertEquals(cookie.getMaxAge(), 100);\n+        cookie.setMaxAge(200);\n+        Assert.assertEquals(cookie.getMaxAge(), 200);\n+        cookie.setMaxAge(-2);\n+        Assert.assertEquals(cookie.getMaxAge(), -2);\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/HttpCookie\/whitebox\/java.base\/java\/net\/MaxAgeExpires.java","additions":137,"deletions":0,"binary":false,"changes":137,"status":"added"}]}