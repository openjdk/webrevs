{"files":[{"patch":"@@ -51,0 +51,1 @@\n+  bool _needs_transition;\n@@ -64,1 +65,2 @@\n-                        int captured_state_mask)\n+                        int captured_state_mask,\n+                        bool needs_transition)\n@@ -74,0 +76,1 @@\n+     _needs_transition(needs_transition),\n@@ -111,1 +114,2 @@\n-                          needs_return_buffer, captured_state_mask);\n+                          needs_return_buffer, captured_state_mask,\n+                          needs_transition);\n@@ -164,1 +168,1 @@\n-  bool should_save_return_value = !_needs_return_buffer;\n+  bool should_save_return_value = !_needs_return_buffer && _needs_transition;\n@@ -194,1 +198,1 @@\n-  _oop_maps = new OopMapSet();\n+  _oop_maps = _needs_transition ? new OopMapSet() : nullptr;\n@@ -204,11 +208,13 @@\n-  __ block_comment(\"{ thread java2native\");\n-  address the_pc = __ pc();\n-  __ set_last_Java_frame(sp, fp, the_pc, t0);\n-  OopMap* map = new OopMap(_frame_size_slots, 0);\n-  _oop_maps->add_gc_map(the_pc - start, map);\n-\n-  \/\/ State transition\n-  __ mv(t0, _thread_in_native);\n-  __ membar(MacroAssembler::LoadStore | MacroAssembler::StoreStore);\n-  __ sw(t0, Address(xthread, JavaThread::thread_state_offset()));\n-  __ block_comment(\"} thread java2native\");\n+  if (_needs_transition) {\n+    __ block_comment(\"{ thread java2native\");\n+    address the_pc = __ pc();\n+    __ set_last_Java_frame(sp, fp, the_pc, t0);\n+    OopMap* map = new OopMap(_frame_size_slots, 0);\n+    _oop_maps->add_gc_map(the_pc - start, map);\n+\n+    \/\/ State transition\n+    __ mv(t0, _thread_in_native);\n+    __ membar(MacroAssembler::LoadStore | MacroAssembler::StoreStore);\n+    __ sw(t0, Address(xthread, JavaThread::thread_state_offset()));\n+    __ block_comment(\"} thread java2native\");\n+  }\n@@ -264,7 +270,0 @@\n-  __ block_comment(\"{ thread native2java\");\n-  __ mv(t0, _thread_in_native_trans);\n-  __ sw(t0, Address(xthread, JavaThread::thread_state_offset()));\n-\n-  \/\/ Force this write out before the read below\n-  __ membar(MacroAssembler::AnyAny);\n-\n@@ -273,3 +272,6 @@\n-  __ safepoint_poll(L_safepoint_poll_slow_path, true \/* at_return *\/, true \/* acquire *\/, false \/* in_nmethod *\/);\n-  __ lwu(t0, Address(xthread, JavaThread::suspend_flags_offset()));\n-  __ bnez(t0, L_safepoint_poll_slow_path);\n+  Label L_reguard;\n+  Label L_after_reguard;\n+  if (_needs_transition) {\n+    __ block_comment(\"{ thread native2java\");\n+    __ mv(t0, _thread_in_native_trans);\n+    __ sw(t0, Address(xthread, JavaThread::thread_state_offset()));\n@@ -277,1 +279,2 @@\n-  __ bind(L_after_safepoint_poll);\n+    \/\/ Force this write out before the read below\n+    __ membar(MacroAssembler::AnyAny);\n@@ -279,3 +282,3 @@\n-  __ mv(t0, _thread_in_Java);\n-  __ membar(MacroAssembler::LoadStore | MacroAssembler::StoreStore);\n-  __ sw(t0, Address(xthread, JavaThread::thread_state_offset()));\n+    __ safepoint_poll(L_safepoint_poll_slow_path, true \/* at_return *\/, true \/* acquire *\/, false \/* in_nmethod *\/);\n+    __ lwu(t0, Address(xthread, JavaThread::suspend_flags_offset()));\n+    __ bnez(t0, L_safepoint_poll_slow_path);\n@@ -283,7 +286,1 @@\n-  __ block_comment(\"reguard stack check\");\n-  Label L_reguard;\n-  Label L_after_reguard;\n-  __ lbu(t0, Address(xthread, JavaThread::stack_guard_state_offset()));\n-  __ mv(t1, StackOverflow::stack_guard_yellow_reserved_disabled);\n-  __ beq(t0, t1, L_reguard);\n-  __ bind(L_after_reguard);\n+    __ bind(L_after_safepoint_poll);\n@@ -291,2 +288,14 @@\n-  __ reset_last_Java_frame(true);\n-  __ block_comment(\"} thread native2java\");\n+    \/\/ change thread state\n+    __ mv(t0, _thread_in_Java);\n+    __ membar(MacroAssembler::LoadStore | MacroAssembler::StoreStore);\n+    __ sw(t0, Address(xthread, JavaThread::thread_state_offset()));\n+\n+    __ block_comment(\"reguard stack check\");\n+    __ lbu(t0, Address(xthread, JavaThread::stack_guard_state_offset()));\n+    __ mv(t1, StackOverflow::stack_guard_yellow_reserved_disabled);\n+    __ beq(t0, t1, L_reguard);\n+    __ bind(L_after_reguard);\n+\n+    __ reset_last_Java_frame(true);\n+    __ block_comment(\"} thread native2java\");\n+  }\n@@ -299,2 +308,3 @@\n-  __ block_comment(\"{ L_safepoint_poll_slow_path\");\n-  __ bind(L_safepoint_poll_slow_path);\n+  if (_needs_transition) {\n+    __ block_comment(\"{ L_safepoint_poll_slow_path\");\n+    __ bind(L_safepoint_poll_slow_path);\n@@ -302,4 +312,4 @@\n-  if (should_save_return_value) {\n-    \/\/ Need to save the native result registers around any runtime calls.\n-    out_reg_spiller.generate_spill(_masm, spill_offset);\n-  }\n+    if (should_save_return_value) {\n+      \/\/ Need to save the native result registers around any runtime calls.\n+      out_reg_spiller.generate_spill(_masm, spill_offset);\n+    }\n@@ -307,3 +317,3 @@\n-  __ mv(c_rarg0, xthread);\n-  assert(frame::arg_reg_save_area_bytes == 0, \"not expecting frame reg save area\");\n-  __ rt_call(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans));\n+    __ mv(c_rarg0, xthread);\n+    assert(frame::arg_reg_save_area_bytes == 0, \"not expecting frame reg save area\");\n+    __ rt_call(CAST_FROM_FN_PTR(address, JavaThread::check_special_condition_for_native_trans));\n@@ -311,5 +321,5 @@\n-  if (should_save_return_value) {\n-    out_reg_spiller.generate_fill(_masm, spill_offset);\n-  }\n-  __ j(L_after_safepoint_poll);\n-  __ block_comment(\"} L_safepoint_poll_slow_path\");\n+    if (should_save_return_value) {\n+      out_reg_spiller.generate_fill(_masm, spill_offset);\n+    }\n+    __ j(L_after_safepoint_poll);\n+    __ block_comment(\"} L_safepoint_poll_slow_path\");\n@@ -319,2 +329,2 @@\n-  __ block_comment(\"{ L_reguard\");\n-  __ bind(L_reguard);\n+    __ block_comment(\"{ L_reguard\");\n+    __ bind(L_reguard);\n@@ -322,4 +332,4 @@\n-  if (should_save_return_value) {\n-    \/\/ Need to save the native result registers around any runtime calls.\n-    out_reg_spiller.generate_spill(_masm, spill_offset);\n-  }\n+    if (should_save_return_value) {\n+      \/\/ Need to save the native result registers around any runtime calls.\n+      out_reg_spiller.generate_spill(_masm, spill_offset);\n+    }\n@@ -327,1 +337,1 @@\n-  __ rt_call(CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages));\n+    __ rt_call(CAST_FROM_FN_PTR(address, SharedRuntime::reguard_yellow_pages));\n@@ -329,3 +339,3 @@\n-  if (should_save_return_value) {\n-    out_reg_spiller.generate_fill(_masm, spill_offset);\n-  }\n+    if (should_save_return_value) {\n+      out_reg_spiller.generate_fill(_masm, spill_offset);\n+    }\n@@ -333,2 +343,3 @@\n-  __ j(L_after_reguard);\n-  __ block_comment(\"} L_reguard\");\n+    __ j(L_after_reguard);\n+    __ block_comment(\"} L_reguard\");\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/downcallLinker_riscv.cpp","additions":75,"deletions":64,"binary":false,"changes":139,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-  return false;\n+  return true;\n","filename":"src\/hotspot\/cpu\/riscv\/foreignGlobals_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -59,1 +59,1 @@\n- * <em>after<\/em> the automatic allocator (and all the segments allocated by it) become\n+ * <em>after<\/em> the automatic arena (and all the segments allocated by it) become\n@@ -89,1 +89,1 @@\n- * segment in a {@linkplain #ofShared() shared arena} instead.\n+ * segments in a {@linkplain #ofShared() shared arena} instead.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Arena.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -490,3 +490,3 @@\n-     * Finally, the returned method handle will throw an {@link IllegalArgumentException} if the {@link MemorySegment}\n-     * parameter passed to it is associated with the {@link MemorySegment#NULL} address, or a {@link NullPointerException}\n-     * if that parameter is {@code null}.\n+     * The returned method handle will throw an {@link IllegalArgumentException} if the {@link MemorySegment}\n+     * representing the target address of the foreign function is the {@link MemorySegment#NULL} address.\n+     * The returned method handle will additionally throw {@link NullPointerException} if any argument passed to it is {@code null}.\n@@ -633,0 +633,9 @@\n+         * The following snipet shows how to obtain the names of the supported captured value layouts:\n+         * {@snippet lang = java:\n+         *    String capturedNames = Linker.Option.captureStateLayout().memberLayouts().stream()\n+         *        .map(MemoryLayout::name)\n+         *        .filter(Optional::isPresent)\n+         *        .map(Optional::get)\n+         *        .map(Objects::toString)\n+         *        .collect(Collectors.joining(\", \"));\n+         * }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/Linker.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -697,4 +697,1 @@\n-        if (bitSize <= 0) {\n-            throw new IllegalArgumentException(\"Invalid bitSize: \" + bitSize);\n-        }\n-        return PaddingLayoutImpl.of(MemoryLayoutUtil.requireBitSizeValid(bitSize));\n+        return PaddingLayoutImpl.of(MemoryLayoutUtil.requireBitSizeValid(bitSize, false));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemoryLayout.java","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2309,2 +2309,2 @@\n-         * Returns {@code true}, if the provided object is also a scope, which models the same lifetime as that\n-         * modelled by this scope. In that case, it is always the case that\n+         * {@return {@code true}, if the provided object is also a scope, which models the same lifetime as that\n+         * modelled by this scope}. In that case, it is always the case that\n@@ -2313,2 +2313,0 @@\n-         * @return {@code true}, if the provided object is also a scope, which models the same lifetime as that\n-         * modelled by this scope.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -116,0 +116,1 @@\n+            \/\/ JDK-8301800\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/fallback\/FFIType.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-public class RISCV64Architecture implements Architecture {\n+public final class RISCV64Architecture implements Architecture {\n@@ -44,0 +44,3 @@\n+    \/\/ Suppresses default constructor, ensuring non-instantiability.\n+    private RISCV64Architecture() {}\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/abi\/riscv64\/RISCV64Architecture.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-        this.byteSize = MemoryLayoutUtil.requireBitSizeValid(bitSize) \/ 8;\n+        this.byteSize = MemoryLayoutUtil.requireBitSizeValid(bitSize, true) \/ 8;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/AbstractLayout.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,2 +40,2 @@\n-    public static long requireBitSizeValid(long bitSize) {\n-        if (bitSize < 0 || bitSize % 8 != 0) {\n+    public static long requireBitSizeValid(long bitSize, boolean allowZero) {\n+        if ((bitSize == 0 && !allowZero) || bitSize < 0 || bitSize % 8 != 0) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/layout\/MemoryLayoutUtil.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -76,1 +76,0 @@\n-    value_ptr++;\n@@ -78,0 +77,1 @@\n+  value_ptr++;\n@@ -80,1 +80,0 @@\n-    value_ptr++;\n@@ -82,0 +81,1 @@\n+  value_ptr++;\n","filename":"src\/java.base\/share\/native\/libfallbackLinker\/fallbackLinker.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\" | os.arch == \"riscv64\"\n","filename":"test\/jdk\/java\/foreign\/trivial\/TestTrivial.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\"\n+ * @requires ((os.arch == \"amd64\" | os.arch == \"x86_64\") & sun.arch.data.model == \"64\") | os.arch == \"aarch64\" | os.arch == \"riscv64\"\n","filename":"test\/jdk\/java\/foreign\/trivial\/TestTrivialUpcall.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}