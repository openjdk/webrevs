{"files":[{"patch":"@@ -808,7 +808,0 @@\n-            \/\/A backtracking record of the original patterns (in value) that\n-            \/\/were used to produce the pattern in the key.\n-            \/\/Note that there may be multiple equivalent patterns in the key\n-            \/\/that originate in different sets of different original patterns,\n-            \/\/hence using identity map, to get the exact source patterns\n-            \/\/on which the resulting pattern is based:\n-            Map<PatternDescription, Set<PatternDescription>> replaces = new IdentityHashMap<>();\n@@ -822,2 +815,2 @@\n-                    updatedPatterns = reduceNestedPatterns(updatedPatterns, replaces, useHashes);\n-                    updatedPatterns = reduceRecordPatterns(updatedPatterns, replaces);\n+                    updatedPatterns = reduceNestedPatterns(updatedPatterns, useHashes);\n+                    updatedPatterns = reduceRecordPatterns(updatedPatterns);\n@@ -1023,1 +1016,0 @@\n-                                                             Map<PatternDescription, Set<PatternDescription>> replaces,\n@@ -1074,1 +1066,1 @@\n-                                    nestedComponentsEquivalent(rpOne, rpOther, mismatchingCandidate, replaces, useHashes)) {\n+                                    nestedComponentsEquivalent(rpOne, rpOther, mismatchingCandidate, useHashes)) {\n@@ -1080,1 +1072,1 @@\n-                            var updatedPatterns = reduceNestedPatterns(nestedPatterns, replaces, useHashes);\n+                            var updatedPatterns = reduceNestedPatterns(nestedPatterns, useHashes);\n@@ -1082,1 +1074,1 @@\n-                            updatedPatterns = reduceRecordPatterns(updatedPatterns, replaces);\n+                            updatedPatterns = reduceRecordPatterns(updatedPatterns);\n@@ -1097,1 +1089,2 @@\n-                                                                    newNested);\n+                                                                    newNested,\n+                                                                    new HashSet<>(join));\n@@ -1099,1 +1092,0 @@\n-                                    replaces.put(nue, new HashSet<>(join));\n@@ -1126,1 +1118,0 @@\n-                                                   Map<PatternDescription, Set<PatternDescription>> replaces,\n@@ -1147,1 +1138,1 @@\n-                                    new ArrayList<>(replaces.getOrDefault(nestedCandidate, Set.of()));\n+                                    new ArrayList<>(nestedCandidate.sourcePatterns());\n@@ -1158,1 +1149,1 @@\n-                                pendingReplacedPatterns.addAll(replaces.getOrDefault(currentReplaced, Set.of()));\n+                                pendingReplacedPatterns.addAll(currentReplaced.sourcePatterns());\n@@ -1186,1 +1177,1 @@\n-        private Set<PatternDescription> reduceRecordPatterns(Set<PatternDescription> patterns, Map<PatternDescription, Set<PatternDescription>> replaces) {\n+        private Set<PatternDescription> reduceRecordPatterns(Set<PatternDescription> patterns) {\n@@ -1191,1 +1182,1 @@\n-                    PatternDescription reducedPattern = reduceRecordPattern(rpOne, replaces);\n+                    PatternDescription reducedPattern = reduceRecordPattern(rpOne);\n@@ -1203,1 +1194,1 @@\n-        private PatternDescription reduceRecordPattern(PatternDescription pattern, Map<PatternDescription, Set<PatternDescription>> replaces) {\n+        private PatternDescription reduceRecordPattern(PatternDescription pattern) {\n@@ -1213,1 +1204,1 @@\n-                    PatternDescription newNested = reduceRecordPattern(rpOne.nested[i], replaces);\n+                    PatternDescription newNested = reduceRecordPattern(rpOne.nested[i]);\n@@ -1224,2 +1215,1 @@\n-                    PatternDescription pd = new BindingPattern(rpOne.recordType);\n-                    replaces.put(pd, Set.of(pattern));\n+                    PatternDescription pd = new BindingPattern(rpOne.recordType, Set.of(pattern));\n@@ -1228,2 +1218,1 @@\n-                    PatternDescription pd = new RecordPattern(rpOne.recordType, rpOne.fullComponentTypes(), reducedNestedPatterns);\n-                    replaces.put(pd, Set.of(pattern));\n+                    PatternDescription pd = new RecordPattern(rpOne.recordType, rpOne.fullComponentTypes(), reducedNestedPatterns, Set.of(pattern));\n@@ -3545,1 +3534,3 @@\n-    sealed interface PatternDescription { }\n+    sealed interface PatternDescription {\n+        public Set<PatternDescription> sourcePatterns();\n+    }\n@@ -3580,1 +3571,6 @@\n-    record BindingPattern(Type type) implements PatternDescription {\n+    record BindingPattern(Type type, Set<PatternDescription> sourcePatterns) implements PatternDescription {\n+\n+        public BindingPattern(Type type) {\n+            this(type, Set.of());\n+        }\n+\n@@ -3595,1 +3591,1 @@\n-    record RecordPattern(Type recordType, int _hashCode, Type[] fullComponentTypes, PatternDescription... nested) implements PatternDescription {\n+    record RecordPattern(Type recordType, int _hashCode, Type[] fullComponentTypes, PatternDescription[] nested, Set<PatternDescription> sourcePatterns) implements PatternDescription {\n@@ -3598,1 +3594,5 @@\n-            this(recordType, hashCode(-1, recordType, nested), fullComponentTypes, nested);\n+            this(recordType, fullComponentTypes, nested, Set.of());\n+        }\n+\n+        public RecordPattern(Type recordType, Type[] fullComponentTypes, PatternDescription[] nested, Set<PatternDescription> sourcePatterns) {\n+            this(recordType, hashCode(-1, recordType, nested), fullComponentTypes, nested, sourcePatterns);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":30,"deletions":30,"binary":false,"changes":60,"status":"modified"}]}