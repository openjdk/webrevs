{"files":[{"patch":"@@ -327,1 +327,1 @@\n-                double ver = getNSSInfo(\"nss\");\n+                String ver = getNSSInfo(\"nss\");\n@@ -329,1 +329,4 @@\n-                if (ver > 3.139 && ver < 3.15 && osName.equals(\"Linux\")) {\n+                int idx = ver.indexOf(\".\");\n+                double major = Double.parseDouble(ver.substring(0, idx));\n+                double minor = Double.parseDouble(ver.substring(idx+1));\n+                if (major == 3 && minor > 13.9 && minor < 15 && osName.equals(\"Linux\")) {\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Cipher\/TestKATForGCM.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -119,5 +119,8 @@\n-        if (isNSS(provider) && expected.getAlgorithm().equals(\"AES\") &&\n-                (getNSSVersion() >= 3.12 && getNSSVersion() <= 3.122)) {\n-            System.out.println(\"NSS 3.12 bug returns incorrect AES key \"+\n-                    \"length breaking key storage. Aborting...\");\n-            return true;\n+        if (isNSS(provider) && expected.getAlgorithm().equals(\"AES\")) {\n+            String version = getNSSVersion();\n+            if (version.equals(\"3.12\") || version.equals(\"3.12.1\")\n+                    || version.equals(\"3.12.2\")) {\n+                System.out.println(\"NSS 3.12 bug returns incorrect AES key \" +\n+                        \"length breaking key storage. Aborting...\");\n+                return true;\n+            }\n@@ -171,1 +174,1 @@\n-                (getLibsoftokn3Version() != getLibnss3Version())) {\n+                (!getLibsoftokn3Version().equals(getLibnss3Version()))) {\n","filename":"test\/jdk\/sun\/security\/pkcs11\/KeyStore\/SecretKeysBasic.java","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -55,0 +55,2 @@\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n@@ -86,1 +88,1 @@\n-    static double nss_version = -1;\n+    static String nss_version = null;\n@@ -96,2 +98,2 @@\n-    static double softoken3_version = -1;\n-    static double nss3_version = -1;\n+    static String softoken3_version = null;\n+    static String nss3_version = null;\n@@ -261,5 +263,16 @@\n-        double nssVersion = getNSSVersion();\n-        if (isNSS(p) && nssVersion >= 3.11 && nssVersion < 3.12) {\n-            System.out.println(\"NSS 3.11 has a DER issue that recent \" +\n-                    \"version do not, skipping\");\n-            return true;\n+        String nssVersion = getNSSVersion();\n+        if (isNSS(p)) {\n+            \/\/ bad version is just between [3.11,3.12)\n+            \/\/ strings may include a trailing dash e.g., 3.111-debug\n+            Pattern  pattern = Pattern.compile(\"^(\\\\d+)(?:\\\\.(.*?))?(?:-.*)?$\");\n+            Matcher m = pattern.matcher(nssVersion);\n+            if (m.matches()) {\n+                int major = Integer.parseInt(m.group(1));\n+                String tmp = m.group(2);\n+                double minor = tmp == null ? 0 : Double.parseDouble(tmp);\n+                return major == 3 && (11 <= minor && minor < 12);\n+            } else {\n+                throw new RuntimeException(\"Unexpected version format: \" + nssVersion);\n+            }\n+        } else {\n+            return false;\n@@ -267,1 +280,0 @@\n-        return false;\n@@ -296,2 +308,2 @@\n-    static double getNSSVersion() {\n-        if (nss_version == -1)\n+    static String getNSSVersion() {\n+        if (nss_version == null)\n@@ -303,1 +315,1 @@\n-        if (nss_version == -1)\n+        if (nss_version == null)\n@@ -308,2 +320,2 @@\n-    public static double getLibsoftokn3Version() {\n-        if (softoken3_version == -1)\n+    public static String getLibsoftokn3Version() {\n+        if (softoken3_version == null)\n@@ -314,2 +326,2 @@\n-    public static double getLibnss3Version() {\n-        if (nss3_version == -1)\n+    public static String getLibnss3Version() {\n+        if (nss3_version == null)\n@@ -330,1 +342,1 @@\n-    static double getNSSInfo(String library) {\n+    static String getNSSInfo(String library) {\n@@ -339,1 +351,1 @@\n-        if (library.compareTo(\"softokn3\") == 0 && softoken3_version > -1)\n+        if (library.compareTo(\"softokn3\") == 0 && softoken3_version != null)\n@@ -341,1 +353,1 @@\n-        if (library.compareTo(\"nss3\") == 0 && nss3_version > -1)\n+        if (library.compareTo(\"nss3\") == 0 && nss3_version != null)\n@@ -347,1 +359,1 @@\n-                return 0.0;\n+                return \"0.0\";\n@@ -383,1 +395,1 @@\n-            nss_version = 0.0;\n+            nss_version = \"0.0\";\n@@ -396,20 +408,1 @@\n-        \/\/ If a \"dot dot\" release, strip the extra dots for double parsing\n-        String[] dot = version.toString().split(\"\\\\.\");\n-        if (dot.length > 2) {\n-            version = new StringBuilder(dot[0] + \".\" + dot[1]);\n-            for (int j = 2; dot.length > j; j++) {\n-                version.append(dot[j]);\n-            }\n-        }\n-\n-        \/\/ Convert to double for easier version value checking\n-        try {\n-            nss_version = Double.parseDouble(version.toString());\n-        } catch (NumberFormatException e) {\n-            System.out.println(\"===== Content start =====\");\n-            System.out.println(s);\n-            System.out.println(\"===== Content end =====\");\n-            System.out.println(\"Failed to parse lib\" + library +\n-                    \" version. Set to 0.0\");\n-            e.printStackTrace();\n-        }\n+        nss_version = version.toString();\n","filename":"test\/jdk\/sun\/security\/pkcs11\/PKCS11Test.java","additions":34,"deletions":41,"binary":false,"changes":75,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -124,4 +124,6 @@\n-        double nssVersion = getNSSVersion();\n-        if (p.getName().equalsIgnoreCase(\"SunPKCS11-NSSKeyStore\")\n-                && nssVersion >= 3.28 && nssVersion < 3.35) {\n-            return true;\n+        String nssVersion = getNSSVersion();\n+        if (p.getName().equalsIgnoreCase(\"SunPKCS11-NSSKeyStore\")) {\n+            int idx = nssVersion.indexOf(\".\");\n+            double major = Double.parseDouble(nssVersion.substring(0, idx));\n+            double minor = Double.parseDouble(nssVersion.substring(idx+1));\n+            return major == 3 && (minor >= 28 && minor < 35);\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Secmod\/AddTrustedCert.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,7 +50,12 @@\n-        double version = getNSSVersion();\n-        String[] versionStrs = Double.toString(version).split(\"\\\\.\");\n-        int major = Integer.parseInt(versionStrs[0]);\n-        int minor = Integer.parseInt(versionStrs[1]);\n-        if (isNSS(provider) && (version == 0.0 || (major >= 3 && minor >= 14))) {\n-            System.out.println(\"Skip testing NSS \" + version);\n-            return true;\n+        if (isNSS(provider)) {\n+            String version = getNSSVersion();\n+            if (version == null) {\n+                return true;\n+            }\n+            int idx = version.indexOf(\".\");\n+            double major = Double.parseDouble(version.substring(0, idx));\n+            double minor = Double.parseDouble(version.substring(idx+1));\n+            if (major >= 3 && minor >= 14){\n+                System.out.println(\"Skip testing NSS \" + version);\n+                return true;\n+            }\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Signature\/TestDSAKeyLength.java","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+        System.out.println(\"Testing provider \" + p.getName());\n","filename":"test\/jdk\/sun\/security\/pkcs11\/ec\/TestECDH.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}