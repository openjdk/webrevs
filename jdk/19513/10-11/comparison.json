{"files":[{"patch":"@@ -567,0 +567,29 @@\n+    @Override\n+    StringBuilder format(Object number,\n+                                     StringBuilder toAppendTo,\n+                                     FieldPosition fieldPosition) {\n+\n+        if (number == null) {\n+            throw new IllegalArgumentException(\"Cannot format null as a number\");\n+        }\n+\n+        if (number instanceof Long || number instanceof Integer\n+                    || number instanceof Short || number instanceof Byte\n+                    || number instanceof AtomicInteger\n+                    || number instanceof AtomicLong\n+                    || (number instanceof BigInteger\n+                                && ((BigInteger) number).bitLength() < 64)) {\n+            return format(((Number) number).longValue(), toAppendTo,\n+                    fieldPosition);\n+        } else if (number instanceof BigDecimal) {\n+            return format((BigDecimal) number, toAppendTo, fieldPosition);\n+        } else if (number instanceof BigInteger) {\n+            return format((BigInteger) number, toAppendTo, fieldPosition);\n+        } else if (number instanceof Number) {\n+            return format(((Number) number).doubleValue(), toAppendTo, fieldPosition);\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot format \"\n+                                                       + number.getClass().getName() + \" as a number\");\n+        }\n+    }\n+\n@@ -792,0 +821,8 @@\n+    private StringBuilder format(BigDecimal number, StringBuilder result,\n+                                 FieldPosition fieldPosition) {\n+        Objects.requireNonNull(number);\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+    }\n+\n@@ -878,0 +915,8 @@\n+    private StringBuilder format(BigInteger number, StringBuilder result,\n+                                 FieldPosition fieldPosition) {\n+        Objects.requireNonNull(number);\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuilder();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":45,"deletions":0,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -349,0 +349,13 @@\n+    @Override\n+    final StringBuilder format(Object obj, StringBuilder toAppendTo,\n+                               FieldPosition fieldPosition) {\n+        if (obj instanceof Date) {\n+            return format((Date) obj, toAppendTo, fieldPosition);\n+        } else if (obj instanceof Number) {\n+            return format(new Date(((Number) obj).longValue()),\n+                    toAppendTo, fieldPosition);\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot format given Object as a Date\");\n+        }\n+    }\n+\n@@ -374,0 +387,5 @@\n+    StringBuilder format(Date date, StringBuilder toAppendTo,\n+                         FieldPosition fieldPosition) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this method\");\n+    }\n+\n@@ -382,2 +400,7 @@\n-        return format(date, new StringBuffer(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (isInternalSubclass() && numberFormat.isInternalSubclass()) {\n+            return format(date, new StringBuilder(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(date, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormat.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -569,0 +569,22 @@\n+    @Override\n+    final StringBuilder format(Object number,\n+                               StringBuilder toAppendTo,\n+                               FieldPosition pos) {\n+        if (number instanceof Long || number instanceof Integer ||\n+                    number instanceof Short || number instanceof Byte ||\n+                    number instanceof AtomicInteger ||\n+                    number instanceof AtomicLong ||\n+                    (number instanceof BigInteger &&\n+                             ((BigInteger) number).bitLength() < 64)) {\n+            return format(((Number) number).longValue(), toAppendTo, pos);\n+        } else if (number instanceof BigDecimal) {\n+            return format((BigDecimal) number, toAppendTo, pos);\n+        } else if (number instanceof BigInteger) {\n+            return format((BigInteger) number, toAppendTo, pos);\n+        } else if (number instanceof Number) {\n+            return format(((Number) number).doubleValue(), toAppendTo, pos);\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n+        }\n+    }\n+\n@@ -879,0 +901,7 @@\n+    private StringBuilder format(BigDecimal number, StringBuilder result,\n+                                FieldPosition fieldPosition) {\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+    }\n+\n@@ -939,0 +968,8 @@\n+    private StringBuilder format(BigInteger number, StringBuilder result,\n+                                FieldPosition fieldPosition) {\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuilder();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -163,1 +163,5 @@\n-        return format(obj, new StringBuffer(), new FieldPosition(0)).toString();\n+        if (isInternalSubclass()) {\n+            return format(obj, new StringBuilder(), new FieldPosition(0)).toString();\n+        } else {\n+            return format(obj, new StringBuffer(), new FieldPosition(0)).toString();\n+        }\n@@ -188,0 +192,6 @@\n+    StringBuilder format(Object obj,\n+                         StringBuilder toAppendTo,\n+                         FieldPosition pos) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this method\");\n+    }\n+\n@@ -436,0 +446,2 @@\n+        String substring(int start);\n+\n@@ -444,0 +456,4 @@\n+        StringBuf append(CharSequence s, int start, int end);\n+\n+        boolean isProxyStringBuilder();\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/Format.java","additions":17,"deletions":1,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -359,2 +359,7 @@\n-        return format(input, new StringBuffer(),\n-                DontCareFieldPosition.INSTANCE).toString();\n+        if (isInternalSubclass()) {\n+            return format(input, new StringBuilder(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(input, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n@@ -384,0 +389,12 @@\n+        return format(obj, StringBufFactory.of(toAppendTo), pos).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuilder format(Object obj, StringBuilder toAppendTo, FieldPosition pos) {\n+        Objects.requireNonNull(obj);\n+        Objects.requireNonNull(toAppendTo);\n+\n+        return format(obj, StringBufFactory.of(toAppendTo), pos).asStringBuilder();\n+    }\n+\n+    private StringBuf format(Object obj, StringBuf toAppendTo, FieldPosition pos) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/ListFormat.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -1030,1 +1030,1 @@\n-        return subformat(arguments, result, pos, null);\n+        return subformat(arguments, StringBufFactory.of(result), pos, null).asStringBuffer();\n@@ -1079,0 +1079,11 @@\n+        return subformat((Object[]) arguments, StringBufFactory.of(result), pos, null).asStringBuffer();\n+    }\n+\n+    @Override\n+    final StringBuilder format(Object arguments, StringBuilder result,\n+                               FieldPosition pos) {\n+        return subformat((Object[]) arguments, StringBufFactory.of(result), pos, null).asStringBuilder();\n+    }\n+\n+    final StringBuf format(Object arguments, StringBuf result,\n+                           FieldPosition pos) {\n@@ -1119,1 +1130,1 @@\n-        StringBuffer result = new StringBuffer();\n+        StringBuilder result = new StringBuilder();\n@@ -1122,1 +1133,1 @@\n-        subformat((Object[]) arguments, result, null, iterators);\n+        subformat((Object[]) arguments, StringBufFactory.of(result), null, iterators);\n@@ -1475,1 +1486,1 @@\n-    private StringBuffer subformat(Object[] arguments, StringBuffer result,\n+    private StringBuf subformat(Object[] arguments, StringBuf result,\n@@ -1587,1 +1598,1 @@\n-    private void append(StringBuffer result, CharacterIterator iterator) {\n+    private void append(StringBuf result, CharacterIterator iterator) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -313,0 +313,16 @@\n+        } else {\n+            throw new IllegalArgumentException(\"Cannot format given Object as a Number\");\n+        }\n+    }\n+\n+    StringBuilder format(Object number,\n+                         StringBuilder toAppendTo,\n+                         FieldPosition pos) {\n+        if (number instanceof Long || number instanceof Integer ||\n+                    number instanceof Short || number instanceof Byte ||\n+                    number instanceof AtomicInteger || number instanceof AtomicLong ||\n+                    (number instanceof BigInteger &&\n+                             ((BigInteger) number).bitLength() < 64)) {\n+            return format(((Number) number).longValue(), toAppendTo, pos);\n+        } else if (number instanceof Number) {\n+            return format(((Number) number).doubleValue(), toAppendTo, pos);\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -971,1 +971,8 @@\n-        return format(date, toAppendTo, pos.getFieldDelegate());\n+        return format(date, StringBufFactory.of(toAppendTo), pos.getFieldDelegate()).asStringBuffer();\n+    }\n+\n+    @Override\n+    final StringBuilder format(Date date, StringBuilder toAppendTo,\n+                         FieldPosition pos) {\n+        pos.beginIndex = pos.endIndex = 0;\n+        return format(date, StringBufFactory.of(toAppendTo), pos.getFieldDelegate()).asStringBuilder();\n@@ -975,1 +982,1 @@\n-    private StringBuffer format(Date date, StringBuffer toAppendTo,\n+    private StringBuf format(Date date, StringBuf toAppendTo,\n@@ -1027,1 +1034,1 @@\n-        StringBuffer sb = new StringBuffer();\n+        StringBuilder sb = new StringBuilder();\n@@ -1032,1 +1039,1 @@\n-            format((Date)obj, sb, delegate);\n+            format((Date)obj, StringBufFactory.of(sb), delegate);\n@@ -1035,1 +1042,1 @@\n-            format(new Date(((Number)obj).longValue()), sb, delegate);\n+            format(new Date(((Number)obj).longValue()), StringBufFactory.of(sb), delegate);\n@@ -1133,1 +1140,1 @@\n-                           FieldDelegate delegate, StringBuffer buffer,\n+                           FieldDelegate delegate, StringBuf buffer,\n@@ -1323,1 +1330,5 @@\n-            CalendarUtils.sprintf0d(buffer, num, width);\n+            if (buffer.isProxyStringBuilder()) {\n+                CalendarUtils.sprintf0d(buffer.asStringBuilder(), num, width);\n+            } else {\n+                CalendarUtils.sprintf0d(buffer.asStringBuffer(), num, width);\n+            }\n@@ -1343,1 +1354,5 @@\n-            CalendarUtils.sprintf0d(buffer, value \/ 60, 2);\n+            if (buffer.isProxyStringBuilder()) {\n+                CalendarUtils.sprintf0d(buffer.asStringBuilder(), value \/ 60, 2);\n+            } else {\n+                CalendarUtils.sprintf0d(buffer.asStringBuffer(), value \/ 60, 2);\n+            }\n@@ -1351,1 +1366,5 @@\n-            CalendarUtils.sprintf0d(buffer, value % 60, 2);\n+            if (buffer.isProxyStringBuilder()) {\n+                CalendarUtils.sprintf0d(buffer.asStringBuilder(), value % 60, 2);\n+            } else {\n+                CalendarUtils.sprintf0d(buffer.asStringBuffer(), value % 60, 2);\n+            }\n@@ -1379,1 +1398,1 @@\n-        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), StringBufFactory.of(buffer));\n+        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), buffer);\n@@ -1385,1 +1404,1 @@\n-    private void zeroPaddingNumber(int value, int minDigits, int maxDigits, StringBuffer buffer)\n+    private void zeroPaddingNumber(int value, int minDigits, int maxDigits, StringBuf buffer)\n@@ -1428,1 +1447,5 @@\n-        numberFormat.format((long)value, buffer, DontCareFieldPosition.INSTANCE);\n+        if (buffer.isProxyStringBuilder()) {\n+            numberFormat.format((long)value, buffer.asStringBuilder(), DontCareFieldPosition.INSTANCE);\n+        } else {\n+            numberFormat.format((long)value, buffer.asStringBuffer(), DontCareFieldPosition.INSTANCE);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":35,"deletions":12,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -62,0 +62,5 @@\n+        @Override\n+        public String substring(int start) {\n+            return sb.substring(start);\n+        }\n+\n@@ -86,0 +91,11 @@\n+        @Override\n+        public Format.StringBuf append(CharSequence s, int start, int end) {\n+            sb.append(s, start, end);\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean isProxyStringBuilder() {\n+            return false;\n+        }\n+\n@@ -119,0 +135,5 @@\n+        @Override\n+        public String substring(int start) {\n+            return sb.substring(start);\n+        }\n+\n@@ -143,0 +164,11 @@\n+        @Override\n+        public Format.StringBuf append(CharSequence s, int start, int end) {\n+            sb.append(s, start, end);\n+            return this;\n+        }\n+\n+        @Override\n+        public boolean isProxyStringBuilder() {\n+            return true;\n+        }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/StringBufFactory.java","additions":32,"deletions":0,"binary":false,"changes":32,"status":"modified"}]}