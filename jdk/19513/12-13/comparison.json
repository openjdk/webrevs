{"files":[{"patch":"@@ -556,1 +556,1 @@\n-            return format((BigDecimal) number, toAppendTo, fieldPosition);\n+            return format((BigDecimal) number, StringBufFactory.of(toAppendTo), fieldPosition).asStringBuffer();\n@@ -558,1 +558,1 @@\n-            return format((BigInteger) number, toAppendTo, fieldPosition);\n+            return format((BigInteger) number, StringBufFactory.of(toAppendTo), fieldPosition).asStringBuffer();\n@@ -807,1 +807,1 @@\n-     * @return        the {@code StringBuffer} passed in as {@code result}\n+     * @return        the {@code StringBuf} passed in as {@code result}\n@@ -814,9 +814,0 @@\n-    private StringBuffer format(BigDecimal number, StringBuffer result,\n-            FieldPosition fieldPosition) {\n-\n-        Objects.requireNonNull(number);\n-        fieldPosition.setBeginIndex(0);\n-        fieldPosition.setEndIndex(0);\n-        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n-    }\n-\n@@ -902,1 +893,1 @@\n-     * @return        the {@code StringBuffer} passed in as {@code result}\n+     * @return        the {@code StringBuf} passed in as {@code result}\n@@ -909,9 +900,0 @@\n-    private StringBuffer format(BigInteger number, StringBuffer result,\n-            FieldPosition fieldPosition) {\n-\n-        Objects.requireNonNull(number);\n-        fieldPosition.setBeginIndex(0);\n-        fieldPosition.setEndIndex(0);\n-        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":4,"deletions":22,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -559,1 +559,1 @@\n-            return format((BigDecimal)number, toAppendTo, pos);\n+            return format((BigDecimal)number, StringBufFactory.of(toAppendTo), pos).asStringBuffer();\n@@ -561,1 +561,1 @@\n-            return format((BigInteger)number, toAppendTo, pos);\n+            return format((BigInteger)number, StringBufFactory.of(toAppendTo), pos).asStringBuffer();\n@@ -888,7 +888,0 @@\n-    private StringBuffer format(BigDecimal number, StringBuffer result,\n-                                FieldPosition fieldPosition) {\n-        fieldPosition.setBeginIndex(0);\n-        fieldPosition.setEndIndex(0);\n-        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n-    }\n-\n@@ -954,8 +947,0 @@\n-    private StringBuffer format(BigInteger number, StringBuffer result,\n-                               FieldPosition fieldPosition) {\n-        fieldPosition.setBeginIndex(0);\n-        fieldPosition.setEndIndex(0);\n-\n-        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package org.openjdk.bench.java.text;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.text.DateFormat;\n+import java.util.Date;\n+import java.util.Locale;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class DateFormatterBench {\n+\n+    private Date date;\n+\n+    private Object objDate;\n+\n+    @Setup\n+    public void setup() {\n+        date = new Date();\n+        objDate = new Date();\n+    }\n+\n+    private DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.FULL, Locale.ENGLISH);\n+\n+    @Benchmark\n+    public void testFormatDate() {\n+        dateFormat.format(date);\n+    }\n+\n+    @Benchmark\n+    public void testFormatObject() {\n+        dateFormat.format(objDate);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        Options opts = new OptionsBuilder().include(DateFormatterBench.class.getSimpleName()).shouldDoGC(true).build();\n+        new Runner(opts).run();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/text\/DateFormatterBench.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"},{"patch":"@@ -25,3 +25,0 @@\n-import java.text.DateFormat;\n-import java.text.ListFormat;\n-import java.text.MessageFormat;\n@@ -29,3 +26,0 @@\n-import java.text.SimpleDateFormat;\n-import java.util.Date;\n-import java.util.List;\n@@ -61,6 +55,0 @@\n-    private Date date;\n-\n-    private Object[] data;\n-\n-    private List<String> listData;\n-\n@@ -72,5 +60,0 @@\n-        date = new Date();\n-        int fileCount = 1273;\n-        String diskName = \"MyDisk\";\n-        data = new Object[]{Long.valueOf(fileCount), diskName};\n-        listData = List.of(\"Foo\", \"Bar\", \"Baz\");\n@@ -81,6 +64,0 @@\n-    private DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n-\n-    private MessageFormat messageFormat = new MessageFormat(\"The disk \\\"{1}\\\" contains {0} file(s).\");\n-\n-    private ListFormat listFormat = ListFormat.getInstance();\n-\n@@ -95,15 +72,0 @@\n-    @Benchmark\n-    public void testDateFormat(final Blackhole blackhole) {\n-        blackhole.consume(dateFormat.format(date));\n-    }\n-\n-    @Benchmark\n-    public void testMessageFormat(final Blackhole blackhole) {\n-        blackhole.consume(messageFormat.format(data));\n-    }\n-\n-    @Benchmark\n-    public void testListFormat(final Blackhole blackhole) {\n-        blackhole.consume(listFormat.format(listData));\n-    }\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/text\/DefFormatterBench.java","additions":0,"deletions":38,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.text;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.text.ListFormat;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class ListFormatterBench {\n+\n+    private List<String> data;\n+\n+    @Setup\n+    public void setup() {\n+        data = List.of(\"foo\", \"bar\", \"baz\", \"qux\", \"quux\", \"quuz\");\n+    }\n+\n+    private ListFormat listFormat = ListFormat.getInstance();\n+\n+    @Benchmark\n+    public void testListFormat() {\n+        listFormat.format(data);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        Options opts = new OptionsBuilder().include(ListFormatterBench.class.getSimpleName()).shouldDoGC(true).build();\n+        new Runner(opts).run();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/text\/ListFormatterBench.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"},{"patch":"@@ -0,0 +1,81 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.java.text;\n+\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OperationsPerInvocation;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+import org.openjdk.jmh.runner.Runner;\n+import org.openjdk.jmh.runner.options.Options;\n+import org.openjdk.jmh.runner.options.OptionsBuilder;\n+\n+import java.text.MessageFormat;\n+import java.util.Locale;\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.Throughput)\n+@OutputTimeUnit(TimeUnit.MILLISECONDS)\n+@Warmup(iterations = 5, time = 1)\n+@Measurement(iterations = 5, time = 1)\n+@Fork(3)\n+@State(Scope.Benchmark)\n+public class MessageFormatterBench {\n+\n+    private Object[][] values;\n+\n+    @Setup\n+    public void setup() {\n+        values = new Object[][]{\n+                new Object[]{Integer.valueOf(13), \"MyDisk1\"},\n+                new Object[]{Float.valueOf(25.6f), \"MyDisk2\"},\n+                new Object[]{Double.valueOf(123.89), \"MyDisk3\"},\n+                new Object[]{Long.valueOf(1234567), \"MyDisk4\"},\n+        };\n+    }\n+\n+    private MessageFormat messageFormat = new MessageFormat(\"There is {0} GB of free space on the {1}.\", Locale.ENGLISH);\n+\n+    @Benchmark\n+    @OperationsPerInvocation(4)\n+    public void testMessageFormat(final Blackhole bh) {\n+        for (Object[] value : values) {\n+            bh.consume(messageFormat.format(value));\n+        }\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        Options opts = new OptionsBuilder().include(MessageFormatterBench.class.getSimpleName()).shouldDoGC(true).build();\n+        new Runner(opts).run();\n+    }\n+}\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/text\/MessageFormatterBench.java","additions":81,"deletions":0,"binary":false,"changes":81,"status":"added"}]}