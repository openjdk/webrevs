{"files":[{"patch":"@@ -521,3 +521,3 @@\n-    StringBuilder format(long number, StringBuilder toAppendTo,\n-                         FieldPosition status) {\n-        return format((double) number, StringBufFactory.of(toAppendTo), status).asStringBuilder();\n+    StringBuf format(long number, StringBuf toAppendTo,\n+                     FieldPosition status) {\n+        return format((double) number, toAppendTo, status);\n@@ -544,7 +544,1 @@\n-    StringBuilder format(double number,\n-                         StringBuilder toAppendTo,\n-                         FieldPosition status) {\n-        return format(number, StringBufFactory.of(toAppendTo), status).asStringBuilder();\n-    }\n-\n-    private StringBuf format(double number, StringBuf toAppendTo,\n+    StringBuf format(double number, StringBuf toAppendTo,\n@@ -746,5 +740,0 @@\n-    @Override\n-    boolean isInternalSubclass() {\n-        return true;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -568,3 +568,3 @@\n-    StringBuilder format(Object number,\n-                                     StringBuilder toAppendTo,\n-                                     FieldPosition fieldPosition) {\n+    StringBuf format(Object number,\n+                     StringBuf toAppendTo,\n+                     FieldPosition fieldPosition) {\n@@ -629,2 +629,3 @@\n-    StringBuilder format(double number, StringBuilder result,\n-                         FieldPosition fieldPosition) {\n+    StringBuf format(double number, StringBuf result,\n+                     FieldPosition fieldPosition) {\n+\n@@ -633,1 +634,1 @@\n-        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+        return format(number, result, fieldPosition.getFieldDelegate());\n@@ -727,2 +728,3 @@\n-    StringBuilder format(long number, StringBuilder result,\n-                         FieldPosition fieldPosition) {\n+    StringBuf format(long number, StringBuf result,\n+                     FieldPosition fieldPosition) {\n+\n@@ -731,1 +733,1 @@\n-        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+        return format(number, result, fieldPosition.getFieldDelegate());\n@@ -821,2 +823,3 @@\n-    private StringBuilder format(BigDecimal number, StringBuilder result,\n-                                 FieldPosition fieldPosition) {\n+    private StringBuf format(BigDecimal number, StringBuf result,\n+                             FieldPosition fieldPosition) {\n+\n@@ -826,1 +829,1 @@\n-        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+        return format(number, result, fieldPosition.getFieldDelegate());\n@@ -915,2 +918,3 @@\n-    private StringBuilder format(BigInteger number, StringBuilder result,\n-                                 FieldPosition fieldPosition) {\n+    private StringBuf format(BigInteger number, StringBuf result,\n+                             FieldPosition fieldPosition) {\n+\n@@ -920,1 +924,1 @@\n-        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuilder();\n+        return format(number, result, fieldPosition.getFieldDelegate(), false);\n@@ -1198,1 +1202,1 @@\n-        StringBuffer sb = new StringBuffer();\n+        StringBuf sb = StringBufFactory.of();\n@@ -1201,1 +1205,1 @@\n-            format(((Number) obj).doubleValue(), StringBufFactory.of(sb), delegate);\n+            format(((Number) obj).doubleValue(), sb, delegate);\n@@ -1205,1 +1209,1 @@\n-            format(((Number) obj).longValue(), StringBufFactory.of(sb), delegate);\n+            format(((Number) obj).longValue(), sb, delegate);\n@@ -1207,1 +1211,1 @@\n-            format((BigDecimal) obj, StringBufFactory.of(sb), delegate);\n+            format((BigDecimal) obj, sb, delegate);\n@@ -1209,1 +1213,1 @@\n-            format((BigInteger) obj, StringBufFactory.of(sb), delegate, false);\n+            format((BigInteger) obj, sb, delegate, false);\n@@ -2585,5 +2589,0 @@\n-    @Override\n-    boolean isInternalSubclass() {\n-        return true;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":24,"deletions":25,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -350,2 +350,2 @@\n-    final StringBuilder format(Object obj, StringBuilder toAppendTo,\n-                               FieldPosition fieldPosition) {\n+    final StringBuf format(Object obj, StringBuf toAppendTo,\n+                           FieldPosition fieldPosition) {\n@@ -387,2 +387,2 @@\n-    StringBuilder format(Date date, StringBuilder toAppendTo,\n-                         FieldPosition fieldPosition) {\n+    StringBuf format(Date date, StringBuf toAppendTo,\n+                     FieldPosition fieldPosition) {\n@@ -400,2 +400,3 @@\n-        if (isInternalSubclass() && numberFormat.isInternalSubclass()) {\n-            return format(date, new StringBuilder(),\n+        if (\"java.text\".equals(getClass().getPackageName())\n+                    && \"java.text\".equals(numberFormat.getClass().getPackageName())) {\n+            return format(date, StringBufFactory.of(),\n","filename":"src\/java.base\/share\/classes\/java\/text\/DateFormat.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -570,3 +570,3 @@\n-    final StringBuilder format(Object number,\n-                               StringBuilder toAppendTo,\n-                               FieldPosition pos) {\n+    final StringBuf format(Object number,\n+                           StringBuf toAppendTo,\n+                           FieldPosition pos) {\n@@ -617,7 +617,2 @@\n-    StringBuilder format(double number, StringBuilder result,\n-                         FieldPosition fieldPosition) {\n-        return format(number, StringBufFactory.of(result), fieldPosition).asStringBuilder();\n-    }\n-\n-    private StringBuf format(double number, StringBuf result,\n-                             FieldPosition fieldPosition) {\n+    StringBuf format(double number, StringBuf result,\n+                     FieldPosition fieldPosition) {\n@@ -800,3 +795,2 @@\n-    @Override\n-    StringBuilder format(long number, StringBuilder result,\n-                         FieldPosition fieldPosition) {\n+    StringBuf format(long number, StringBuf result,\n+                     FieldPosition fieldPosition) {\n@@ -806,1 +800,1 @@\n-        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+        return format(number, result, fieldPosition.getFieldDelegate());\n@@ -901,2 +895,2 @@\n-    private StringBuilder format(BigDecimal number, StringBuilder result,\n-                                FieldPosition fieldPosition) {\n+    private StringBuf format(BigDecimal number, StringBuf result,\n+                             FieldPosition fieldPosition) {\n@@ -905,1 +899,1 @@\n-        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+        return format(number, result, fieldPosition.getFieldDelegate());\n@@ -968,2 +962,2 @@\n-    private StringBuilder format(BigInteger number, StringBuilder result,\n-                                FieldPosition fieldPosition) {\n+    private StringBuf format(BigInteger number, StringBuf result,\n+                             FieldPosition fieldPosition) {\n@@ -973,1 +967,1 @@\n-        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuilder();\n+        return format(number, result, fieldPosition.getFieldDelegate(), false);\n@@ -1046,1 +1040,1 @@\n-        StringBuffer sb = new StringBuffer();\n+        StringBuf sb = StringBufFactory.of();\n@@ -1049,1 +1043,1 @@\n-            format(((Number)obj).doubleValue(), StringBufFactory.of(sb), delegate);\n+            format(((Number)obj).doubleValue(), sb, delegate);\n@@ -1053,1 +1047,1 @@\n-            format(((Number)obj).longValue(), StringBufFactory.of(sb), delegate);\n+            format(((Number)obj).longValue(), sb, delegate);\n@@ -1055,1 +1049,1 @@\n-            format((BigDecimal)obj, StringBufFactory.of(sb), delegate);\n+            format((BigDecimal)obj, sb, delegate);\n@@ -1057,1 +1051,1 @@\n-            format((BigInteger)obj, StringBufFactory.of(sb), delegate, false);\n+            format((BigInteger)obj, sb, delegate, false);\n@@ -4227,5 +4221,0 @@\n-    @Override\n-    boolean isInternalSubclass() {\n-        return true;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":19,"deletions":30,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -163,2 +163,2 @@\n-        if (isInternalSubclass()) {\n-            return format(obj, new StringBuilder(), new FieldPosition(0)).toString();\n+        if (\"java.text\".equals(getClass().getPackageName())) {\n+            return format(obj, StringBufFactory.of(), new FieldPosition(0)).toString();\n@@ -192,3 +192,3 @@\n-    StringBuilder format(Object obj,\n-                         StringBuilder toAppendTo,\n-                         FieldPosition pos) {\n+    StringBuf format(Object obj,\n+                     StringBuf toAppendTo,\n+                     FieldPosition pos) {\n@@ -424,1 +424,0 @@\n-\n@@ -426,5 +425,2 @@\n-     * Used to distinguish JDK internal subclass and user-defined subclass\n-     * of {code Format}.\n-     *\n-     * @return {@code true}  if current class is a JDK internal subclass of {code Format};\n-     *         {@code false} otherwise\n+     * StringBuf is the minimal common interface of {@code StringBuffer} and {@code StringBuilder}.\n+     * It is used by the various {@code Format} implementations as the internal string buffer.\n@@ -432,9 +428,2 @@\n-    boolean isInternalSubclass() {\n-        return false;\n-    }\n-\n-    \/**\n-     * StringBuf is the minimal common interface of {code StringBuffer} and {code StringBuilder}.\n-     * It used by the various {code Format} implementations as the internal string buffer.\n-     *\/\n-    interface StringBuf {\n+    sealed interface StringBuf\n+            permits StringBufFactory.StringBufferImpl, StringBufFactory.StringBuilderImpl {\n@@ -458,0 +447,2 @@\n+        StringBuf append(StringBuffer sb);\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/Format.java","additions":11,"deletions":20,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -359,7 +359,2 @@\n-        if (isInternalSubclass()) {\n-            return format(input, new StringBuilder(),\n-                    DontCareFieldPosition.INSTANCE).toString();\n-        } else {\n-            return format(input, new StringBuffer(),\n-                    DontCareFieldPosition.INSTANCE).toString();\n-        }\n+        return format(input, StringBufFactory.of(),\n+                DontCareFieldPosition.INSTANCE).toString();\n@@ -389,1 +384,1 @@\n-        return format(obj, StringBufFactory.of(toAppendTo), pos).asStringBuffer();\n+        return format(obj, StringBufFactory.of(toAppendTo)).asStringBuffer();\n@@ -393,1 +388,1 @@\n-    StringBuilder format(Object obj, StringBuilder toAppendTo, FieldPosition pos) {\n+    StringBuf format(Object obj, StringBuf toAppendTo, FieldPosition pos) {\n@@ -397,1 +392,1 @@\n-        return format(obj, StringBufFactory.of(toAppendTo), pos).asStringBuilder();\n+        return format(obj, toAppendTo);\n@@ -400,1 +395,1 @@\n-    private StringBuf format(Object obj, StringBuf toAppendTo, FieldPosition pos) {\n+    private StringBuf format(Object obj, StringBuf toAppendTo) {\n@@ -588,5 +583,0 @@\n-    @Override\n-    boolean isInternalSubclass() {\n-        return true;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/text\/ListFormat.java","additions":6,"deletions":16,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -1083,5 +1083,0 @@\n-    final StringBuilder format(Object arguments, StringBuilder result,\n-                               FieldPosition pos) {\n-        return subformat((Object[]) arguments, StringBufFactory.of(result), pos, null).asStringBuilder();\n-    }\n-\n@@ -1130,1 +1125,1 @@\n-        StringBuilder result = new StringBuilder();\n+        StringBuf result = StringBufFactory.of();\n@@ -1133,1 +1128,1 @@\n-        subformat((Object[]) arguments, StringBufFactory.of(result), null, iterators);\n+        subformat((Object[]) arguments, result, null, iterators);\n@@ -2031,5 +2026,0 @@\n-\n-    @Override\n-    boolean isInternalSubclass() {\n-        return true;\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":2,"deletions":12,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -318,3 +318,4 @@\n-    StringBuilder format(Object number,\n-                         StringBuilder toAppendTo,\n-                         FieldPosition pos) {\n+    @Override\n+    StringBuf format(Object number,\n+                     StringBuf toAppendTo,\n+                     FieldPosition pos) {\n@@ -366,2 +367,2 @@\n-        if (isInternalSubclass()) {\n-            return format(number, new StringBuilder(),\n+        if (\"java.text\".equals(getClass().getPackageName())) {\n+            return format(number, StringBufFactory.of(),\n@@ -391,2 +392,2 @@\n-        if (isInternalSubclass()) {\n-            return format(number, new StringBuilder(),\n+        if (\"java.text\".equals(getClass().getPackageName())) {\n+            return format(number, StringBufFactory.of(),\n@@ -423,3 +424,3 @@\n-    StringBuilder format(double number,\n-                         StringBuilder toAppendTo,\n-                         FieldPosition pos) {\n+    StringBuf format(double number,\n+                     StringBuf toAppendTo,\n+                     FieldPosition pos) {\n@@ -452,3 +453,3 @@\n-    StringBuilder format(long number,\n-                         StringBuilder toAppendTo,\n-                         FieldPosition pos) {\n+    StringBuf format(long number,\n+                     StringBuf toAppendTo,\n+                     FieldPosition pos) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -975,2 +975,2 @@\n-    final StringBuilder format(Date date, StringBuilder toAppendTo,\n-                         FieldPosition pos) {\n+    final StringBuf format(Date date, StringBuf toAppendTo,\n+                           FieldPosition pos) {\n@@ -978,1 +978,1 @@\n-        return format(date, StringBufFactory.of(toAppendTo), pos.getFieldDelegate()).asStringBuilder();\n+        return format(date, toAppendTo, pos.getFieldDelegate());\n@@ -1034,1 +1034,1 @@\n-        StringBuilder sb = new StringBuilder();\n+        StringBuf sb = StringBufFactory.of();\n@@ -1039,1 +1039,1 @@\n-            format((Date)obj, StringBufFactory.of(sb), delegate);\n+            format((Date)obj, sb, delegate);\n@@ -1042,1 +1042,1 @@\n-            format(new Date(((Number)obj).longValue()), StringBufFactory.of(sb), delegate);\n+            format(new Date(((Number)obj).longValue()), sb, delegate);\n@@ -1448,1 +1448,7 @@\n-            numberFormat.format((long)value, buffer.asStringBuilder(), DontCareFieldPosition.INSTANCE);\n+            \/\/User can set numberFormat with a user-defined NumberFormat which\n+            \/\/not override format(long, StringBuf, FieldPosition).\n+            if (\"java.text\".equals(numberFormat.getClass().getPackageName())) {\n+                numberFormat.format((long) value, buffer, DontCareFieldPosition.INSTANCE);\n+            } else {\n+                buffer.append(numberFormat.format((long) value, new StringBuffer(), DontCareFieldPosition.INSTANCE));\n+            }\n@@ -1450,1 +1456,1 @@\n-            numberFormat.format((long)value, buffer.asStringBuffer(), DontCareFieldPosition.INSTANCE);\n+            numberFormat.format((long) value, buffer.asStringBuffer(), DontCareFieldPosition.INSTANCE);\n@@ -2591,5 +2597,0 @@\n-\n-    @Override\n-    boolean isInternalSubclass() {\n-        return true;\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import java.text.Format.StringBuf;\n+\n@@ -29,5 +31,5 @@\n- * StringBufFactory create {code Format.StringBuf}'s implements that\n- * backend with {code StringBuffer} and {code StringBuilder}.\n- * It used by {code Format}'s implements to replace inner string\n- * buffer from {code StringBuffer} to {code StringBuilder} to gain\n- * a better performance.\n+ * {@code StringBufFactory} creates implementations of {@code Format.StringBuf},\n+ * which is an interface with the minimum overlap required to support {@code StringBuffer}\n+ * and {@code StringBuilder} in {@code Format}. This allows for {@code StringBuilder} to be used\n+ * in place of {@code StringBuffer} to provide performance benefits for JDK internal\n+ * {@code Format} subclasses.\n@@ -37,1 +39,4 @@\n-    static Format.StringBuf of(StringBuffer sb) {\n+    private StringBufFactory() {\n+    }\n+\n+    static StringBuf of(StringBuffer sb) {\n@@ -41,1 +46,1 @@\n-    static Format.StringBuf of(StringBuilder sb) {\n+    static StringBuf of(StringBuilder sb) {\n@@ -45,1 +50,5 @@\n-    private static class StringBufferImpl implements Format.StringBuf {\n+    static StringBuf of() {\n+        return new StringBuilderImpl();\n+    }\n+\n+    final static class StringBufferImpl implements StringBuf {\n@@ -68,1 +77,1 @@\n-        public Format.StringBuf append(char c) {\n+        public StringBuf append(char c) {\n@@ -74,1 +83,1 @@\n-        public Format.StringBuf append(String str) {\n+        public StringBuf append(String str) {\n@@ -80,1 +89,1 @@\n-        public Format.StringBuf append(int i) {\n+        public StringBuf append(int i) {\n@@ -86,1 +95,1 @@\n-        public Format.StringBuf append(char[] str, int offset, int len) {\n+        public StringBuf append(char[] str, int offset, int len) {\n@@ -92,1 +101,1 @@\n-        public Format.StringBuf append(CharSequence s, int start, int end) {\n+        public StringBuf append(CharSequence s, int start, int end) {\n@@ -97,0 +106,6 @@\n+        @Override\n+        public StringBuf append(StringBuffer asb) {\n+            sb.append(asb);\n+            return this;\n+        }\n+\n@@ -118,1 +133,1 @@\n-    private static class StringBuilderImpl implements Format.StringBuf {\n+    final static class StringBuilderImpl implements StringBuf {\n@@ -125,0 +140,4 @@\n+        StringBuilderImpl() {\n+            this.sb = new StringBuilder();\n+        }\n+\n@@ -141,1 +160,1 @@\n-        public Format.StringBuf append(char c) {\n+        public StringBuf append(char c) {\n@@ -147,1 +166,1 @@\n-        public Format.StringBuf append(String str) {\n+        public StringBuf append(String str) {\n@@ -153,1 +172,1 @@\n-        public Format.StringBuf append(int i) {\n+        public StringBuf append(int i) {\n@@ -159,1 +178,1 @@\n-        public Format.StringBuf append(char[] str, int offset, int len) {\n+        public StringBuf append(char[] str, int offset, int len) {\n@@ -165,1 +184,1 @@\n-        public Format.StringBuf append(CharSequence s, int start, int end) {\n+        public StringBuf append(CharSequence s, int start, int end) {\n@@ -170,0 +189,7 @@\n+        @Override\n+        public StringBuf append(StringBuffer asb) {\n+            sb.append(asb);\n+            return this;\n+        }\n+\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/StringBufFactory.java","additions":45,"deletions":19,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -25,0 +25,3 @@\n+import java.text.DateFormat;\n+import java.text.ListFormat;\n+import java.text.MessageFormat;\n@@ -26,0 +29,3 @@\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n@@ -55,0 +61,6 @@\n+    private Date date;\n+\n+    private Object[] data;\n+\n+    private List<String> listData;\n+\n@@ -60,0 +72,5 @@\n+        date = new Date();\n+        int fileCount = 1273;\n+        String diskName = \"MyDisk\";\n+        data = new Object[]{Long.valueOf(fileCount), diskName};\n+        listData = List.of(\"Foo\", \"Bar\", \"Baz\");\n@@ -64,0 +81,6 @@\n+    private DateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss.SSS\");\n+\n+    private MessageFormat messageFormat = new MessageFormat(\"The disk \\\"{1}\\\" contains {0} file(s).\");\n+\n+    private ListFormat listFormat = ListFormat.getInstance();\n+\n@@ -72,0 +95,15 @@\n+    @Benchmark\n+    public void testDateFormat(final Blackhole blackhole) {\n+        blackhole.consume(dateFormat.format(date));\n+    }\n+\n+    @Benchmark\n+    public void testMessageFormat(final Blackhole blackhole) {\n+        blackhole.consume(messageFormat.format(data));\n+    }\n+\n+    @Benchmark\n+    public void testListFormat(final Blackhole blackhole) {\n+        blackhole.consume(listFormat.format(listData));\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/text\/DefFormatterBench.java","additions":38,"deletions":0,"binary":false,"changes":38,"status":"modified"}]}