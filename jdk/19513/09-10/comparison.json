{"files":[{"patch":"@@ -517,1 +517,1 @@\n-        return format((double) number, StringBuf.of(toAppendTo), status).asStringBuffer();\n+        return format((double) number, StringBufFactory.of(toAppendTo), status).asStringBuffer();\n@@ -523,1 +523,1 @@\n-        return format((double) number, StringBuf.of(toAppendTo), status).asStringBuilder();\n+        return format((double) number, StringBufFactory.of(toAppendTo), status).asStringBuilder();\n@@ -540,1 +540,1 @@\n-        return format(number, StringBuf.of(toAppendTo), status).asStringBuffer();\n+        return format(number, StringBufFactory.of(toAppendTo), status).asStringBuffer();\n@@ -547,1 +547,1 @@\n-        return format(number, StringBuf.of(toAppendTo), status).asStringBuilder();\n+        return format(number, StringBufFactory.of(toAppendTo), status).asStringBuilder();\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -596,1 +596,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -604,1 +604,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n@@ -694,1 +694,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -702,1 +702,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n@@ -789,1 +789,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -875,1 +875,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n@@ -1156,1 +1156,1 @@\n-            format(((Number) obj).doubleValue(), StringBuf.of(sb), delegate);\n+            format(((Number) obj).doubleValue(), StringBufFactory.of(sb), delegate);\n@@ -1160,1 +1160,1 @@\n-            format(((Number) obj).longValue(), StringBuf.of(sb), delegate);\n+            format(((Number) obj).longValue(), StringBufFactory.of(sb), delegate);\n@@ -1162,1 +1162,1 @@\n-            format((BigDecimal) obj, StringBuf.of(sb), delegate);\n+            format((BigDecimal) obj, StringBufFactory.of(sb), delegate);\n@@ -1164,1 +1164,1 @@\n-            format((BigInteger) obj, StringBuf.of(sb), delegate, false);\n+            format((BigInteger) obj, StringBufFactory.of(sb), delegate, false);\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -591,1 +591,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition).asStringBuffer();\n@@ -597,1 +597,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition).asStringBuilder();\n+        return format(number, StringBufFactory.of(result), fieldPosition).asStringBuilder();\n@@ -775,1 +775,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -784,1 +784,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n@@ -876,1 +876,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -936,1 +936,1 @@\n-        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n@@ -1012,1 +1012,1 @@\n-            format(((Number)obj).doubleValue(), StringBuf.of(sb), delegate);\n+            format(((Number)obj).doubleValue(), StringBufFactory.of(sb), delegate);\n@@ -1016,1 +1016,1 @@\n-            format(((Number)obj).longValue(), StringBuf.of(sb), delegate);\n+            format(((Number)obj).longValue(), StringBufFactory.of(sb), delegate);\n@@ -1018,1 +1018,1 @@\n-            format((BigDecimal)obj, StringBuf.of(sb), delegate);\n+            format((BigDecimal)obj, StringBufFactory.of(sb), delegate);\n@@ -1020,1 +1020,1 @@\n-            format((BigInteger)obj, StringBuf.of(sb), delegate, false);\n+            format((BigInteger)obj, StringBufFactory.of(sb), delegate, false);\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -447,122 +447,0 @@\n-\n-        static StringBuf of(StringBuffer sb) {\n-            return new StringBufferImpl(sb);\n-        }\n-\n-        static StringBuf of(StringBuilder sb) {\n-            return new StringBuilderImpl(sb);\n-        }\n-\n-        final class StringBufferImpl implements StringBuf {\n-            private final StringBuffer sb;\n-\n-            StringBufferImpl(StringBuffer sb) {\n-                this.sb = sb;\n-            }\n-\n-            @Override\n-            public int length() {\n-                return sb.length();\n-            }\n-\n-            @Override\n-            public String substring(int start, int end) {\n-                return sb.substring(start, end);\n-            }\n-\n-            @Override\n-            public StringBuf append(char c) {\n-                sb.append(c);\n-                return this;\n-            }\n-\n-            @Override\n-            public StringBuf append(String str) {\n-                sb.append(str);\n-                return this;\n-            }\n-\n-            @Override\n-            public StringBuf append(int i) {\n-                sb.append(i);\n-                return this;\n-            }\n-\n-            @Override\n-            public StringBuf append(char[] str, int offset, int len) {\n-                sb.append(str, offset, len);\n-                return this;\n-            }\n-\n-            @Override\n-            public StringBuffer asStringBuffer() {\n-                return sb;\n-            }\n-\n-            @Override\n-            public StringBuilder asStringBuilder() {\n-                throw new AssertionError(\"Can't cast StringBuffer to StringBuilder\");\n-            }\n-\n-            @Override\n-            public String toString() {\n-                return sb.toString();\n-            }\n-        }\n-\n-        final class StringBuilderImpl implements StringBuf {\n-            private final StringBuilder sb;\n-\n-            StringBuilderImpl(StringBuilder sb) {\n-                this.sb = sb;\n-            }\n-\n-            @Override\n-            public int length() {\n-                return sb.length();\n-            }\n-\n-            @Override\n-            public String substring(int start, int end) {\n-                return sb.substring(start, end);\n-            }\n-\n-            @Override\n-            public StringBuf append(char c) {\n-                sb.append(c);\n-                return this;\n-            }\n-\n-            @Override\n-            public StringBuf append(String str) {\n-                sb.append(str);\n-                return this;\n-            }\n-\n-            @Override\n-            public StringBuf append(int i) {\n-                sb.append(i);\n-                return this;\n-            }\n-\n-            @Override\n-            public StringBuf append(char[] str, int offset, int len) {\n-                sb.append(str, offset, len);\n-                return this;\n-            }\n-\n-            @Override\n-            public StringBuffer asStringBuffer() {\n-                throw new AssertionError(\"Can't cast StringBuilder to StringBuffer\");\n-            }\n-\n-            @Override\n-            public StringBuilder asStringBuilder() {\n-                return sb;\n-            }\n-\n-            @Override\n-            public String toString() {\n-                return sb.toString();\n-            }\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/text\/Format.java","additions":0,"deletions":122,"binary":false,"changes":122,"status":"modified"},{"patch":"@@ -1379,1 +1379,1 @@\n-        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), StringBuf.of(buffer));\n+        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), StringBufFactory.of(buffer));\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.text;\n+\n+\/**\n+ * StringBufFactory create {code Format.StringBuf}'s implements that\n+ * backend with {code StringBuffer} and {code StringBuilder}.\n+ * It used by {code Format}'s implements to replace inner string\n+ * buffer from {code StringBuffer} to {code StringBuilder} to gain\n+ * a better performance.\n+ *\/\n+final class StringBufFactory {\n+\n+    static Format.StringBuf of(StringBuffer sb) {\n+        return new StringBufferImpl(sb);\n+    }\n+\n+    static Format.StringBuf of(StringBuilder sb) {\n+        return new StringBuilderImpl(sb);\n+    }\n+\n+    private static class StringBufferImpl implements Format.StringBuf {\n+        private final StringBuffer sb;\n+\n+        StringBufferImpl(StringBuffer sb) {\n+            this.sb = sb;\n+        }\n+\n+        @Override\n+        public int length() {\n+            return sb.length();\n+        }\n+\n+        @Override\n+        public String substring(int start, int end) {\n+            return sb.substring(start, end);\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(char c) {\n+            sb.append(c);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(String str) {\n+            sb.append(str);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(int i) {\n+            sb.append(i);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(char[] str, int offset, int len) {\n+            sb.append(str, offset, len);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuffer asStringBuffer() {\n+            return sb;\n+        }\n+\n+        @Override\n+        public StringBuilder asStringBuilder() {\n+            throw new AssertionError(\"Can't cast StringBuffer to StringBuilder\");\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return sb.toString();\n+        }\n+    }\n+\n+    private static class StringBuilderImpl implements Format.StringBuf {\n+        private final StringBuilder sb;\n+\n+        StringBuilderImpl(StringBuilder sb) {\n+            this.sb = sb;\n+        }\n+\n+        @Override\n+        public int length() {\n+            return sb.length();\n+        }\n+\n+        @Override\n+        public String substring(int start, int end) {\n+            return sb.substring(start, end);\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(char c) {\n+            sb.append(c);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(String str) {\n+            sb.append(str);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(int i) {\n+            sb.append(i);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(char[] str, int offset, int len) {\n+            sb.append(str, offset, len);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuffer asStringBuffer() {\n+            throw new AssertionError(\"Can't cast StringBuilder to StringBuffer\");\n+        }\n+\n+        @Override\n+        public StringBuilder asStringBuilder() {\n+            return sb;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return sb.toString();\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/text\/StringBufFactory.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"}]}