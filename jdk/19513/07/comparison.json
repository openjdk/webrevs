{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -56,2 +56,2 @@\n-    public void formatted(Format.Field attr, Object value, int start, int end,\n-                          StringBuffer buffer) {\n+    public <T extends Appendable & CharSequence> void formatted(Format.Field attr, Object value, int start, int end,\n+                          T buffer) {\n@@ -79,1 +79,1 @@\n-                                          buffer.substring(size, start)));\n+                                          buffer.subSequence(size, start).toString()));\n@@ -86,1 +86,1 @@\n-                                   buffer.substring(aStart, end));\n+                                   buffer.subSequence(aStart, end).toString());\n@@ -95,2 +95,2 @@\n-    public void formatted(int fieldID, Format.Field attr, Object value,\n-                          int start, int end, StringBuffer buffer) {\n+    public <T extends Appendable & CharSequence> void formatted(int fieldID, Format.Field attr, Object value,\n+                          int start, int end, T buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/CharacterIteratorFieldDelegate.java","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.io.UncheckedIOException;\n@@ -517,1 +518,7 @@\n-        return format((double)number, toAppendTo, status);\n+        return formatWithGeneric((double)number, toAppendTo, status);\n+    }\n+\n+    @Override\n+    <T extends Appendable & CharSequence> T formatWithGeneric(long number, T toAppendTo,\n+                                                   FieldPosition status) {\n+        return formatWithGeneric((double) number, toAppendTo, status);\n@@ -534,0 +541,6 @@\n+        return formatWithGeneric(number, toAppendTo, status);\n+    }\n+\n+    @Override\n+    <T extends Appendable & CharSequence> T formatWithGeneric(double number, T toAppendTo,\n+                         FieldPosition status) {\n@@ -544,2 +557,12 @@\n-        \/\/ return either a formatted number, or a string\n-        return toAppendTo.append(choiceFormats[i]);\n+        try {\n+            \/\/ return either a formatted number, or a string\n+            toAppendTo.append(choiceFormats[i]);\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(ioe.getMessage(), ioe);\n+        }\n+        return toAppendTo;\n+    }\n+\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":26,"deletions":3,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.io.UncheckedIOException;\n@@ -599,1 +600,14 @@\n-    private StringBuffer format(double number, StringBuffer result,\n+    @Override\n+    <T extends Appendable & CharSequence> T formatWithGeneric(double number, T result,\n+                                                   FieldPosition fieldPosition) {\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+        return format(number, result, fieldPosition.getFieldDelegate());\n+    }\n+\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n+    private <T extends Appendable & CharSequence> T format(double number, T result,\n@@ -689,1 +703,9 @@\n-    private StringBuffer format(long number, StringBuffer result, FieldDelegate delegate) {\n+    @Override\n+    <T extends Appendable & CharSequence> T formatWithGeneric(long number, T result,\n+                                                   FieldPosition fieldPosition) {\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+        return format(number, result, fieldPosition.getFieldDelegate());\n+    }\n+\n+    private <T extends Appendable & CharSequence> T format(long number, T result, FieldDelegate delegate) {\n@@ -776,1 +798,1 @@\n-    private StringBuffer format(BigDecimal number, StringBuffer result,\n+    private <T extends Appendable & CharSequence> T format(BigDecimal number, T result,\n@@ -862,1 +884,1 @@\n-    private StringBuffer format(BigInteger number, StringBuffer result,\n+    private <T extends Appendable & CharSequence> T format(BigInteger number, T result,\n@@ -939,1 +961,1 @@\n-    private void appendPrefix(StringBuffer result, String prefix,\n+    private <T extends Appendable & CharSequence> void appendPrefix(T result, String prefix,\n@@ -955,1 +977,1 @@\n-    private void appendSuffix(StringBuffer result, String suffix,\n+    private <T extends Appendable & CharSequence> void appendSuffix(T result, String suffix,\n@@ -971,1 +993,1 @@\n-    private void append(StringBuffer result, String string,\n+    private <T extends Appendable & CharSequence> void append(T result, String string,\n@@ -975,1 +997,5 @@\n-            result.append(string);\n+            try {\n+                result.append(string);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(ioe.getMessage(), ioe);\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":34,"deletions":8,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -44,0 +44,1 @@\n+import java.io.UncheckedIOException;\n@@ -591,0 +592,6 @@\n+        return formatWithGeneric(number, result, fieldPosition);\n+    }\n+\n+    @Override\n+    <T extends Appendable & CharSequence> T formatWithGeneric(double number, T result,\n+                                                   FieldPosition fieldPosition) {\n@@ -604,1 +611,5 @@\n-                result.append(tempResult);\n+                try {\n+                    result.append(tempResult);\n+                } catch (IOException ioe) {\n+                    throw new UncheckedIOException(ioe.getMessage(), ioe);\n+                }\n@@ -613,0 +624,5 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n@@ -622,2 +638,2 @@\n-    StringBuffer format(double number, StringBuffer result,\n-                                FieldDelegate delegate) {\n+    <T extends Appendable & CharSequence> T format(double number, T result,\n+                     FieldDelegate delegate) {\n@@ -669,1 +685,1 @@\n-    boolean handleNaN(double number, StringBuffer result,\n+    <T extends Appendable & CharSequence> boolean handleNaN(double number, T result,\n@@ -674,1 +690,5 @@\n-            result.append(symbols.getNaN());\n+            try {\n+                result.append(symbols.getNaN());\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(ioe.getMessage(), ioe);\n+            }\n@@ -694,1 +714,1 @@\n-    boolean handleInfinity(double number, StringBuffer result,\n+    <T extends Appendable & CharSequence> boolean handleInfinity(double number, T result,\n@@ -706,1 +726,5 @@\n-            result.append(symbols.getInfinity());\n+            try {\n+                result.append(symbols.getInfinity());\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(ioe.getMessage(), ioe);\n+            }\n@@ -723,1 +747,1 @@\n-    StringBuffer doubleSubformat(double number, StringBuffer result,\n+    <T extends Appendable & CharSequence> T doubleSubformat(double number, T result,\n@@ -767,0 +791,9 @@\n+    @Override\n+    <T extends Appendable & CharSequence> T formatWithGeneric(long number, T result,\n+                                                   FieldPosition fieldPosition) {\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+\n+        return format(number, result, fieldPosition.getFieldDelegate());\n+    }\n+\n@@ -777,2 +810,2 @@\n-    StringBuffer format(long number, StringBuffer result,\n-                               FieldDelegate delegate) {\n+    <T extends Appendable & CharSequence> T format(long number, T result,\n+                     FieldDelegate delegate) {\n@@ -868,2 +901,2 @@\n-    StringBuffer format(BigDecimal number, StringBuffer result,\n-                                FieldDelegate delegate) {\n+    <T extends Appendable & CharSequence> T format(BigDecimal number, T result,\n+                     FieldDelegate delegate) {\n@@ -929,2 +962,2 @@\n-    StringBuffer format(BigInteger number, StringBuffer result,\n-                               FieldDelegate delegate, boolean formatLong) {\n+    <T extends Appendable & CharSequence> T format(BigInteger number, T result,\n+                     FieldDelegate delegate, boolean formatLong) {\n@@ -1782,1 +1815,1 @@\n-    private StringBuffer subformat(StringBuffer result, FieldDelegate delegate,\n+    private <T extends Appendable & CharSequence> T subformat(T result, FieldDelegate delegate,\n@@ -1812,0 +1845,11 @@\n+    <T extends Appendable & CharSequence> void subformatNumber(T result, FieldDelegate delegate,\n+                         boolean isNegative, boolean isInteger,\n+                         int maxIntDigits, int minIntDigits,\n+                         int maxFraDigits, int minFraDigits) {\n+        try {\n+            subformatNumberWithException(result, delegate, isNegative, isInteger, maxIntDigits, minIntDigits, maxFraDigits, minFraDigits);\n+        } catch (IOException ioe) {\n+            throw new UncheckedIOException(ioe.getMessage(), ioe);\n+        }\n+    }\n+\n@@ -1824,1 +1868,1 @@\n-    void subformatNumber(StringBuffer result, FieldDelegate delegate,\n+    <T extends Appendable & CharSequence> void subformatNumberWithException(T result, FieldDelegate delegate,\n@@ -1827,1 +1871,1 @@\n-            int maxFraDigits, int minFraDigits) {\n+            int maxFraDigits, int minFraDigits) throws IOException{\n@@ -2111,1 +2155,1 @@\n-    private void append(StringBuffer result, String string,\n+    private <T extends Appendable & CharSequence> void append(T result, String string,\n@@ -2118,1 +2162,5 @@\n-            result.append(string);\n+            try {\n+                result.append(string);\n+            } catch (IOException ioe) {\n+                throw new UncheckedIOException(ioe.getMessage(), ioe);\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":67,"deletions":19,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,2 @@\n-        public void formatted(Format.Field attr, Object value, int start,\n-                              int end, StringBuffer buffer) {\n+        public <T extends Appendable & CharSequence> void formatted(Format.Field attr, Object value, int start,\n+                              int end, T buffer) {\n@@ -41,2 +41,2 @@\n-        public void formatted(int fieldID, Format.Field attr, Object value,\n-                              int start, int end, StringBuffer buffer) {\n+        public <T extends Appendable & CharSequence> void formatted(int fieldID, Format.Field attr, Object value,\n+                              int start, int end, T buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/DontCareFieldPosition.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -292,2 +292,2 @@\n-        public void formatted(Format.Field attr, Object value, int start,\n-                              int end, StringBuffer buffer) {\n+        public <T extends Appendable & CharSequence> void formatted(Format.Field attr, Object value, int start,\n+                              int end, T buffer) {\n@@ -301,2 +301,2 @@\n-        public void formatted(int fieldID, Format.Field attr, Object value,\n-                              int start, int end, StringBuffer buffer) {\n+        public <T extends Appendable & CharSequence> void formatted(int fieldID, Format.Field attr, Object value,\n+                              int start, int end, T buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/FieldPosition.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -271,0 +271,11 @@\n+    \/**\n+     * Used to distinguish JDK internal subclass and user-defined subclass\n+     * of {code Format}.\n+     *\n+     * @return {@code true}  if current class is a JDK internal subclass of {code Format};\n+     *         {@code false} otherwise\n+     *\/\n+    boolean isInternalSubclass() {\n+        return false;\n+    }\n+\n@@ -396,2 +407,2 @@\n-        public void formatted(Format.Field attr, Object value, int start,\n-                              int end, StringBuffer buffer);\n+        public <T extends Appendable & CharSequence> void formatted(Format.Field attr, Object value, int start,\n+                              int end, T buffer);\n@@ -410,2 +421,2 @@\n-        public void formatted(int fieldID, Format.Field attr, Object value,\n-                              int start, int end, StringBuffer buffer);\n+        public <T extends Appendable & CharSequence> void formatted(int fieldID, Format.Field attr, Object value,\n+                              int start, int end, T buffer);\n","filename":"src\/java.base\/share\/classes\/java\/text\/Format.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -350,2 +350,7 @@\n-        return format(number, new StringBuffer(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (isInternalSubclass()) {\n+            return formatWithGeneric(number, new StringBuilder(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(number, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n@@ -370,2 +375,7 @@\n-        return format(number, new StringBuffer(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (isInternalSubclass()) {\n+            return formatWithGeneric(number, new StringBuilder(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(number, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n@@ -397,0 +407,6 @@\n+    <T extends Appendable & CharSequence> T formatWithGeneric(double number,\n+                                                   T toAppendTo,\n+                                                   FieldPosition pos) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this method\");\n+    }\n+\n@@ -420,0 +436,6 @@\n+    <T extends Appendable & CharSequence> T formatWithGeneric(long number,\n+                                                   T toAppendTo,\n+                                                   FieldPosition pos) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this method\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"}]}