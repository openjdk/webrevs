{"files":[{"patch":"@@ -56,2 +56,2 @@\n-    public <T extends Appendable & CharSequence> void formatted(Format.Field attr, Object value, int start, int end,\n-                          T buffer) {\n+    public void formatted(Format.Field attr, Object value, int start, int end,\n+                          Format.StringBuf buffer) {\n@@ -79,1 +79,1 @@\n-                                          buffer.subSequence(size, start).toString()));\n+                                          buffer.substring(size, start)));\n@@ -86,1 +86,1 @@\n-                                   buffer.subSequence(aStart, end).toString());\n+                                   buffer.substring(aStart, end));\n@@ -95,2 +95,2 @@\n-    public <T extends Appendable & CharSequence> void formatted(int fieldID, Format.Field attr, Object value,\n-                          int start, int end, T buffer) {\n+    public void formatted(int fieldID, Format.Field attr, Object value,\n+                          int start, int end, Format.StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/CharacterIteratorFieldDelegate.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import java.io.UncheckedIOException;\n@@ -518,1 +517,1 @@\n-        return formatWithGeneric((double)number, toAppendTo, status);\n+        return format((double) number, StringBuf.of(toAppendTo), status).asStringBuffer();\n@@ -522,3 +521,3 @@\n-    <T extends Appendable & CharSequence> T formatWithGeneric(long number, T toAppendTo,\n-                                                   FieldPosition status) {\n-        return formatWithGeneric((double) number, toAppendTo, status);\n+    StringBuilder format(long number, StringBuilder toAppendTo,\n+                         FieldPosition status) {\n+        return format((double) number, StringBuf.of(toAppendTo), status).asStringBuilder();\n@@ -541,1 +540,1 @@\n-        return formatWithGeneric(number, toAppendTo, status);\n+        return format(number, StringBuf.of(toAppendTo), status).asStringBuffer();\n@@ -545,1 +544,7 @@\n-    <T extends Appendable & CharSequence> T formatWithGeneric(double number, T toAppendTo,\n+    StringBuilder format(double number,\n+                         StringBuilder toAppendTo,\n+                         FieldPosition status) {\n+        return format(number, StringBuf.of(toAppendTo), status).asStringBuilder();\n+    }\n+\n+    private StringBuf format(double number, StringBuf toAppendTo,\n@@ -557,12 +562,2 @@\n-        try {\n-            \/\/ return either a formatted number, or a string\n-            toAppendTo.append(choiceFormats[i]);\n-        } catch (IOException ioe) {\n-            throw new UncheckedIOException(ioe.getMessage(), ioe);\n-        }\n-        return toAppendTo;\n-    }\n-\n-    @Override\n-    boolean isInternalSubclass() {\n-        return true;\n+        \/\/ return either a formatted number, or a string\n+        return toAppendTo.append(choiceFormats[i]);\n@@ -750,0 +745,6 @@\n+\t\n+\t\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.io.UncheckedIOException;\n@@ -597,1 +596,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -601,2 +600,2 @@\n-    <T extends Appendable & CharSequence> T formatWithGeneric(double number, T result,\n-                                                   FieldPosition fieldPosition) {\n+    StringBuilder format(double number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n@@ -605,1 +604,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n@@ -608,6 +607,1 @@\n-    @Override\n-    boolean isInternalSubclass() {\n-        return true;\n-    }\n-\n-    private <T extends Appendable & CharSequence> T format(double number, T result,\n+    private StringBuf format(double number, StringBuf result,\n@@ -700,1 +694,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -704,2 +698,2 @@\n-    <T extends Appendable & CharSequence> T formatWithGeneric(long number, T result,\n-                                                   FieldPosition fieldPosition) {\n+    StringBuilder format(long number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n@@ -708,1 +702,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n@@ -711,1 +705,1 @@\n-    private <T extends Appendable & CharSequence> T format(long number, T result, FieldDelegate delegate) {\n+    private StringBuf format(long number, StringBuf result, FieldDelegate delegate) {\n@@ -795,1 +789,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -798,1 +792,1 @@\n-    private <T extends Appendable & CharSequence> T format(BigDecimal number, T result,\n+    private StringBuf format(BigDecimal number, StringBuf result,\n@@ -881,1 +875,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate(), false);\n+        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n@@ -884,1 +878,1 @@\n-    private <T extends Appendable & CharSequence> T format(BigInteger number, T result,\n+    private StringBuf format(BigInteger number, StringBuf result,\n@@ -961,1 +955,1 @@\n-    private <T extends Appendable & CharSequence> void appendPrefix(T result, String prefix,\n+    private void appendPrefix(StringBuf result, String prefix,\n@@ -977,1 +971,1 @@\n-    private <T extends Appendable & CharSequence> void appendSuffix(T result, String suffix,\n+    private void appendSuffix(StringBuf result, String suffix,\n@@ -993,1 +987,1 @@\n-    private <T extends Appendable & CharSequence> void append(T result, String string,\n+    private void append(StringBuf result, String string,\n@@ -997,5 +991,1 @@\n-            try {\n-                result.append(string);\n-            } catch (IOException ioe) {\n-                throw new UncheckedIOException(ioe.getMessage(), ioe);\n-            }\n+            result.append(string);\n@@ -1166,1 +1156,1 @@\n-            format(((Number) obj).doubleValue(), sb, delegate);\n+            format(((Number) obj).doubleValue(), StringBuf.of(sb), delegate);\n@@ -1170,1 +1160,1 @@\n-            format(((Number) obj).longValue(), sb, delegate);\n+            format(((Number) obj).longValue(), StringBuf.of(sb), delegate);\n@@ -1172,1 +1162,1 @@\n-            format((BigDecimal) obj, sb, delegate);\n+            format((BigDecimal) obj, StringBuf.of(sb), delegate);\n@@ -1174,1 +1164,1 @@\n-            format((BigInteger) obj, sb, delegate, false);\n+            format((BigInteger) obj, StringBuf.of(sb), delegate, false);\n@@ -2550,0 +2540,5 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":27,"deletions":32,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import java.io.UncheckedIOException;\n@@ -592,1 +591,1 @@\n-        return formatWithGeneric(number, result, fieldPosition);\n+        return format(number, StringBuf.of(result), fieldPosition).asStringBuffer();\n@@ -596,2 +595,7 @@\n-    <T extends Appendable & CharSequence> T formatWithGeneric(double number, T result,\n-                                                   FieldPosition fieldPosition) {\n+    StringBuilder format(double number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n+        return format(number, StringBuf.of(result), fieldPosition).asStringBuilder();\n+    }\n+\n+    private StringBuf format(double number, StringBuf result,\n+                             FieldPosition fieldPosition) {\n@@ -611,5 +615,1 @@\n-                try {\n-                    result.append(tempResult);\n-                } catch (IOException ioe) {\n-                    throw new UncheckedIOException(ioe.getMessage(), ioe);\n-                }\n+                result.append(tempResult);\n@@ -624,5 +624,0 @@\n-    @Override\n-    boolean isInternalSubclass() {\n-        return true;\n-    }\n-\n@@ -638,1 +633,1 @@\n-    <T extends Appendable & CharSequence> T format(double number, T result,\n+    StringBuf format(double number, StringBuf result,\n@@ -685,1 +680,1 @@\n-    <T extends Appendable & CharSequence> boolean handleNaN(double number, T result,\n+    boolean handleNaN(double number, StringBuf result,\n@@ -690,5 +685,1 @@\n-            try {\n-                result.append(symbols.getNaN());\n-            } catch (IOException ioe) {\n-                throw new UncheckedIOException(ioe.getMessage(), ioe);\n-            }\n+            result.append(symbols.getNaN());\n@@ -714,1 +705,1 @@\n-    <T extends Appendable & CharSequence> boolean handleInfinity(double number, T result,\n+    boolean handleInfinity(double number, StringBuf result,\n@@ -726,5 +717,1 @@\n-            try {\n-                result.append(symbols.getInfinity());\n-            } catch (IOException ioe) {\n-                throw new UncheckedIOException(ioe.getMessage(), ioe);\n-            }\n+            result.append(symbols.getInfinity());\n@@ -747,1 +734,1 @@\n-    <T extends Appendable & CharSequence> T doubleSubformat(double number, T result,\n+    StringBuf doubleSubformat(double number, StringBuf result,\n@@ -788,1 +775,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -792,2 +779,2 @@\n-    <T extends Appendable & CharSequence> T formatWithGeneric(long number, T result,\n-                                                   FieldPosition fieldPosition) {\n+    StringBuilder format(long number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n@@ -797,1 +784,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n@@ -810,1 +797,1 @@\n-    <T extends Appendable & CharSequence> T format(long number, T result,\n+    StringBuf format(long number, StringBuf result,\n@@ -889,1 +876,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -901,1 +888,1 @@\n-    <T extends Appendable & CharSequence> T format(BigDecimal number, T result,\n+    StringBuf format(BigDecimal number, StringBuf result,\n@@ -949,1 +936,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate(), false);\n+        return format(number, StringBuf.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n@@ -962,1 +949,1 @@\n-    <T extends Appendable & CharSequence> T format(BigInteger number, T result,\n+    StringBuf format(BigInteger number, StringBuf result,\n@@ -1025,1 +1012,1 @@\n-            format(((Number)obj).doubleValue(), sb, delegate);\n+            format(((Number)obj).doubleValue(), StringBuf.of(sb), delegate);\n@@ -1029,1 +1016,1 @@\n-            format(((Number)obj).longValue(), sb, delegate);\n+            format(((Number)obj).longValue(), StringBuf.of(sb), delegate);\n@@ -1031,1 +1018,1 @@\n-            format((BigDecimal)obj, sb, delegate);\n+            format((BigDecimal)obj, StringBuf.of(sb), delegate);\n@@ -1033,1 +1020,1 @@\n-            format((BigInteger)obj, sb, delegate, false);\n+            format((BigInteger)obj, StringBuf.of(sb), delegate, false);\n@@ -1815,1 +1802,1 @@\n-    private <T extends Appendable & CharSequence> T subformat(T result, FieldDelegate delegate,\n+    private StringBuf subformat(StringBuf result, FieldDelegate delegate,\n@@ -1845,11 +1832,0 @@\n-    <T extends Appendable & CharSequence> void subformatNumber(T result, FieldDelegate delegate,\n-                         boolean isNegative, boolean isInteger,\n-                         int maxIntDigits, int minIntDigits,\n-                         int maxFraDigits, int minFraDigits) {\n-        try {\n-            subformatNumberWithException(result, delegate, isNegative, isInteger, maxIntDigits, minIntDigits, maxFraDigits, minFraDigits);\n-        } catch (IOException ioe) {\n-            throw new UncheckedIOException(ioe.getMessage(), ioe);\n-        }\n-    }\n-\n@@ -1868,1 +1844,1 @@\n-    <T extends Appendable & CharSequence> void subformatNumberWithException(T result, FieldDelegate delegate,\n+    void subformatNumber(StringBuf result, FieldDelegate delegate,\n@@ -1871,1 +1847,1 @@\n-            int maxFraDigits, int minFraDigits) throws IOException{\n+            int maxFraDigits, int minFraDigits) {\n@@ -2155,1 +2131,1 @@\n-    private <T extends Appendable & CharSequence> void append(T result, String string,\n+    private void append(StringBuf result, String string,\n@@ -2162,5 +2138,1 @@\n-            try {\n-                result.append(string);\n-            } catch (IOException ioe) {\n-                throw new UncheckedIOException(ioe.getMessage(), ioe);\n-            }\n+            result.append(string);\n@@ -4218,0 +4190,5 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":38,"deletions":61,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -38,2 +38,2 @@\n-        public <T extends Appendable & CharSequence> void formatted(Format.Field attr, Object value, int start,\n-                              int end, T buffer) {\n+        public void formatted(Format.Field attr, Object value, int start,\n+                              int end, Format.StringBuf buffer) {\n@@ -41,2 +41,2 @@\n-        public <T extends Appendable & CharSequence> void formatted(int fieldID, Format.Field attr, Object value,\n-                              int start, int end, T buffer) {\n+        public void formatted(int fieldID, Format.Field attr, Object value,\n+                              int start, int end, Format.StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/DontCareFieldPosition.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -292,2 +292,2 @@\n-        public <T extends Appendable & CharSequence> void formatted(Format.Field attr, Object value, int start,\n-                              int end, T buffer) {\n+        public void formatted(Format.Field attr, Object value, int start,\n+                              int end, Format.StringBuf buffer) {\n@@ -301,2 +301,2 @@\n-        public <T extends Appendable & CharSequence> void formatted(int fieldID, Format.Field attr, Object value,\n-                              int start, int end, T buffer) {\n+        public void formatted(int fieldID, Format.Field attr, Object value,\n+                              int start, int end, Format.StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/FieldPosition.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -271,11 +271,0 @@\n-    \/**\n-     * Used to distinguish JDK internal subclass and user-defined subclass\n-     * of {code Format}.\n-     *\n-     * @return {@code true}  if current class is a JDK internal subclass of {code Format};\n-     *         {@code false} otherwise\n-     *\/\n-    boolean isInternalSubclass() {\n-        return false;\n-    }\n-\n@@ -407,2 +396,2 @@\n-        public <T extends Appendable & CharSequence> void formatted(Format.Field attr, Object value, int start,\n-                              int end, T buffer);\n+        public void formatted(Format.Field attr, Object value, int start,\n+                              int end, StringBuf buffer);\n@@ -421,2 +410,159 @@\n-        public <T extends Appendable & CharSequence> void formatted(int fieldID, Format.Field attr, Object value,\n-                              int start, int end, T buffer);\n+        public void formatted(int fieldID, Format.Field attr, Object value,\n+                              int start, int end, StringBuf buffer);\n+    }\n+\n+\n+    \/**\n+     * Used to distinguish JDK internal subclass and user-defined subclass\n+     * of {code Format}.\n+     *\n+     * @return {@code true}  if current class is a JDK internal subclass of {code Format};\n+     *         {@code false} otherwise\n+     *\/\n+    boolean isInternalSubclass() {\n+        return false;\n+    }\n+\n+    \/**\n+     * StringBuf is the minimal common interface of {code StringBuffer} and {code StringBuilder}.\n+     * It used by the various {code Format} implementations as the internal string buffer.\n+     *\/\n+    interface StringBuf {\n+\n+        int length();\n+\n+        String substring(int start, int end);\n+\n+        StringBuf append(char c);\n+\n+        StringBuf append(String str);\n+\n+        StringBuf append(int i);\n+\n+        StringBuf append(char[] str, int offset, int len);\n+\n+        StringBuffer asStringBuffer();\n+\n+        StringBuilder asStringBuilder();\n+\n+        static StringBuf of(StringBuffer sb) {\n+            return new StringBufferImpl(sb);\n+        }\n+\n+        static StringBuf of(StringBuilder sb) {\n+            return new StringBuilderImpl(sb);\n+        }\n+\n+        final class StringBufferImpl implements StringBuf {\n+            private final StringBuffer sb;\n+\n+            StringBufferImpl(StringBuffer sb) {\n+                this.sb = sb;\n+            }\n+\n+            @Override\n+            public int length() {\n+                return sb.length();\n+            }\n+\n+            @Override\n+            public String substring(int start, int end) {\n+                return sb.substring(start, end);\n+            }\n+\n+            @Override\n+            public StringBuf append(char c) {\n+                sb.append(c);\n+                return this;\n+            }\n+\n+            @Override\n+            public StringBuf append(String str) {\n+                sb.append(str);\n+                return this;\n+            }\n+\n+            @Override\n+            public StringBuf append(int i) {\n+                sb.append(i);\n+                return this;\n+            }\n+\n+            @Override\n+            public StringBuf append(char[] str, int offset, int len) {\n+                sb.append(str, offset, len);\n+                return this;\n+            }\n+\n+            @Override\n+            public StringBuffer asStringBuffer() {\n+                return sb;\n+            }\n+\n+            @Override\n+            public StringBuilder asStringBuilder() {\n+                throw new AssertionError(\"Can't cast StringBuffer to StringBuilder\");\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return sb.toString();\n+            }\n+        }\n+\n+        final class StringBuilderImpl implements StringBuf {\n+            private final StringBuilder sb;\n+\n+            StringBuilderImpl(StringBuilder sb) {\n+                this.sb = sb;\n+            }\n+\n+            @Override\n+            public int length() {\n+                return sb.length();\n+            }\n+\n+            @Override\n+            public String substring(int start, int end) {\n+                return sb.substring(start, end);\n+            }\n+\n+            @Override\n+            public StringBuf append(char c) {\n+                sb.append(c);\n+                return this;\n+            }\n+\n+            @Override\n+            public StringBuf append(String str) {\n+                sb.append(str);\n+                return this;\n+            }\n+\n+            @Override\n+            public StringBuf append(int i) {\n+                sb.append(i);\n+                return this;\n+            }\n+\n+            @Override\n+            public StringBuf append(char[] str, int offset, int len) {\n+                sb.append(str, offset, len);\n+                return this;\n+            }\n+\n+            @Override\n+            public StringBuffer asStringBuffer() {\n+                throw new AssertionError(\"Can't cast StringBuilder to StringBuffer\");\n+            }\n+\n+            @Override\n+            public StringBuilder asStringBuilder() {\n+                return sb;\n+            }\n+\n+            @Override\n+            public String toString() {\n+                return sb.toString();\n+            }\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/text\/Format.java","additions":161,"deletions":15,"binary":false,"changes":176,"status":"modified"},{"patch":"@@ -571,0 +571,5 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/ListFormat.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2020,0 +2020,5 @@\n+\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -351,1 +351,1 @@\n-            return formatWithGeneric(number, new StringBuilder(),\n+            return format(number, new StringBuilder(),\n@@ -376,1 +376,1 @@\n-            return formatWithGeneric(number, new StringBuilder(),\n+            return format(number, new StringBuilder(),\n@@ -407,3 +407,3 @@\n-    <T extends Appendable & CharSequence> T formatWithGeneric(double number,\n-                                                   T toAppendTo,\n-                                                   FieldPosition pos) {\n+    StringBuilder format(double number,\n+                         StringBuilder toAppendTo,\n+                         FieldPosition pos) {\n@@ -436,3 +436,3 @@\n-    <T extends Appendable & CharSequence> T formatWithGeneric(long number,\n-                                                   T toAppendTo,\n-                                                   FieldPosition pos) {\n+    StringBuilder format(long number,\n+                         StringBuilder toAppendTo,\n+                         FieldPosition pos) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1379,1 +1379,1 @@\n-        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), buffer);\n+        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), StringBuf.of(buffer));\n@@ -2569,0 +2569,4 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"}]}