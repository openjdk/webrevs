{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-                          StringBuffer buffer) {\n+                          Format.StringBuf buffer) {\n@@ -96,1 +96,1 @@\n-                          int start, int end, StringBuffer buffer) {\n+                          int start, int end, Format.StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/CharacterIteratorFieldDelegate.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -517,1 +517,7 @@\n-        return format((double)number, toAppendTo, status);\n+        return format((double) number, StringBufFactory.of(toAppendTo), status).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuilder format(long number, StringBuilder toAppendTo,\n+                         FieldPosition status) {\n+        return format((double) number, StringBufFactory.of(toAppendTo), status).asStringBuilder();\n@@ -534,0 +540,12 @@\n+        return format(number, StringBufFactory.of(toAppendTo), status).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuilder format(double number,\n+                         StringBuilder toAppendTo,\n+                         FieldPosition status) {\n+        return format(number, StringBufFactory.of(toAppendTo), status).asStringBuilder();\n+    }\n+\n+    private StringBuf format(double number, StringBuf toAppendTo,\n+                         FieldPosition status) {\n@@ -728,0 +746,5 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":24,"deletions":1,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -596,1 +596,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -599,1 +599,9 @@\n-    private StringBuffer format(double number, StringBuffer result,\n+    @Override\n+    StringBuilder format(double number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+    }\n+\n+    private StringBuf format(double number, StringBuf result,\n@@ -686,1 +694,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -689,1 +697,9 @@\n-    private StringBuffer format(long number, StringBuffer result, FieldDelegate delegate) {\n+    @Override\n+    StringBuilder format(long number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+    }\n+\n+    private StringBuf format(long number, StringBuf result, FieldDelegate delegate) {\n@@ -773,1 +789,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -776,1 +792,1 @@\n-    private StringBuffer format(BigDecimal number, StringBuffer result,\n+    private StringBuf format(BigDecimal number, StringBuf result,\n@@ -859,1 +875,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate(), false);\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n@@ -862,1 +878,1 @@\n-    private StringBuffer format(BigInteger number, StringBuffer result,\n+    private StringBuf format(BigInteger number, StringBuf result,\n@@ -939,1 +955,1 @@\n-    private void appendPrefix(StringBuffer result, String prefix,\n+    private void appendPrefix(StringBuf result, String prefix,\n@@ -955,1 +971,1 @@\n-    private void appendSuffix(StringBuffer result, String suffix,\n+    private void appendSuffix(StringBuf result, String suffix,\n@@ -971,1 +987,1 @@\n-    private void append(StringBuffer result, String string,\n+    private void append(StringBuf result, String string,\n@@ -1140,1 +1156,1 @@\n-            format(((Number) obj).doubleValue(), sb, delegate);\n+            format(((Number) obj).doubleValue(), StringBufFactory.of(sb), delegate);\n@@ -1144,1 +1160,1 @@\n-            format(((Number) obj).longValue(), sb, delegate);\n+            format(((Number) obj).longValue(), StringBufFactory.of(sb), delegate);\n@@ -1146,1 +1162,1 @@\n-            format((BigDecimal) obj, sb, delegate);\n+            format((BigDecimal) obj, StringBufFactory.of(sb), delegate);\n@@ -1148,1 +1164,1 @@\n-            format((BigInteger) obj, sb, delegate, false);\n+            format((BigInteger) obj, StringBufFactory.of(sb), delegate, false);\n@@ -2524,0 +2540,5 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":36,"deletions":15,"binary":false,"changes":51,"status":"modified"},{"patch":"@@ -591,0 +591,11 @@\n+        return format(number, StringBufFactory.of(result), fieldPosition).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuilder format(double number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n+        return format(number, StringBufFactory.of(result), fieldPosition).asStringBuilder();\n+    }\n+\n+    private StringBuf format(double number, StringBuf result,\n+                             FieldPosition fieldPosition) {\n@@ -622,2 +633,2 @@\n-    StringBuffer format(double number, StringBuffer result,\n-                                FieldDelegate delegate) {\n+    StringBuf format(double number, StringBuf result,\n+                     FieldDelegate delegate) {\n@@ -669,1 +680,1 @@\n-    boolean handleNaN(double number, StringBuffer result,\n+    boolean handleNaN(double number, StringBuf result,\n@@ -694,1 +705,1 @@\n-    boolean handleInfinity(double number, StringBuffer result,\n+    boolean handleInfinity(double number, StringBuf result,\n@@ -723,1 +734,1 @@\n-    StringBuffer doubleSubformat(double number, StringBuffer result,\n+    StringBuf doubleSubformat(double number, StringBuf result,\n@@ -764,1 +775,10 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuilder format(long number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n@@ -777,2 +797,2 @@\n-    StringBuffer format(long number, StringBuffer result,\n-                               FieldDelegate delegate) {\n+    StringBuf format(long number, StringBuf result,\n+                     FieldDelegate delegate) {\n@@ -856,1 +876,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -868,2 +888,2 @@\n-    StringBuffer format(BigDecimal number, StringBuffer result,\n-                                FieldDelegate delegate) {\n+    StringBuf format(BigDecimal number, StringBuf result,\n+                     FieldDelegate delegate) {\n@@ -916,1 +936,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate(), false);\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n@@ -929,2 +949,2 @@\n-    StringBuffer format(BigInteger number, StringBuffer result,\n-                               FieldDelegate delegate, boolean formatLong) {\n+    StringBuf format(BigInteger number, StringBuf result,\n+                     FieldDelegate delegate, boolean formatLong) {\n@@ -992,1 +1012,1 @@\n-            format(((Number)obj).doubleValue(), sb, delegate);\n+            format(((Number)obj).doubleValue(), StringBufFactory.of(sb), delegate);\n@@ -996,1 +1016,1 @@\n-            format(((Number)obj).longValue(), sb, delegate);\n+            format(((Number)obj).longValue(), StringBufFactory.of(sb), delegate);\n@@ -998,1 +1018,1 @@\n-            format((BigDecimal)obj, sb, delegate);\n+            format((BigDecimal)obj, StringBufFactory.of(sb), delegate);\n@@ -1000,1 +1020,1 @@\n-            format((BigInteger)obj, sb, delegate, false);\n+            format((BigInteger)obj, StringBufFactory.of(sb), delegate, false);\n@@ -1782,1 +1802,1 @@\n-    private StringBuffer subformat(StringBuffer result, FieldDelegate delegate,\n+    private StringBuf subformat(StringBuf result, FieldDelegate delegate,\n@@ -1824,1 +1844,1 @@\n-    void subformatNumber(StringBuffer result, FieldDelegate delegate,\n+    void subformatNumber(StringBuf result, FieldDelegate delegate,\n@@ -2111,1 +2131,1 @@\n-    private void append(StringBuffer result, String string,\n+    private void append(StringBuf result, String string,\n@@ -4170,0 +4190,5 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":46,"deletions":21,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-                              int end, StringBuffer buffer) {\n+                              int end, Format.StringBuf buffer) {\n@@ -42,1 +42,1 @@\n-                              int start, int end, StringBuffer buffer) {\n+                              int start, int end, Format.StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/DontCareFieldPosition.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -293,1 +293,1 @@\n-                              int end, StringBuffer buffer) {\n+                              int end, Format.StringBuf buffer) {\n@@ -302,1 +302,1 @@\n-                              int start, int end, StringBuffer buffer) {\n+                              int start, int end, Format.StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/FieldPosition.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -397,1 +397,1 @@\n-                              int end, StringBuffer buffer);\n+                              int end, StringBuf buffer);\n@@ -411,1 +411,36 @@\n-                              int start, int end, StringBuffer buffer);\n+                              int start, int end, StringBuf buffer);\n+    }\n+\n+\n+    \/**\n+     * Used to distinguish JDK internal subclass and user-defined subclass\n+     * of {code Format}.\n+     *\n+     * @return {@code true}  if current class is a JDK internal subclass of {code Format};\n+     *         {@code false} otherwise\n+     *\/\n+    boolean isInternalSubclass() {\n+        return false;\n+    }\n+\n+    \/**\n+     * StringBuf is the minimal common interface of {code StringBuffer} and {code StringBuilder}.\n+     * It used by the various {code Format} implementations as the internal string buffer.\n+     *\/\n+    interface StringBuf {\n+\n+        int length();\n+\n+        String substring(int start, int end);\n+\n+        StringBuf append(char c);\n+\n+        StringBuf append(String str);\n+\n+        StringBuf append(int i);\n+\n+        StringBuf append(char[] str, int offset, int len);\n+\n+        StringBuffer asStringBuffer();\n+\n+        StringBuilder asStringBuilder();\n","filename":"src\/java.base\/share\/classes\/java\/text\/Format.java","additions":38,"deletions":3,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -571,0 +571,5 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/ListFormat.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2020,0 +2020,5 @@\n+\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/text\/MessageFormat.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -350,2 +350,7 @@\n-        return format(number, new StringBuffer(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (isInternalSubclass()) {\n+            return format(number, new StringBuilder(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(number, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n@@ -370,2 +375,7 @@\n-        return format(number, new StringBuffer(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (isInternalSubclass()) {\n+            return format(number, new StringBuilder(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(number, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n@@ -397,0 +407,6 @@\n+    StringBuilder format(double number,\n+                         StringBuilder toAppendTo,\n+                         FieldPosition pos) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this method\");\n+    }\n+\n@@ -420,0 +436,6 @@\n+    StringBuilder format(long number,\n+                         StringBuilder toAppendTo,\n+                         FieldPosition pos) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this method\");\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -1379,1 +1379,1 @@\n-        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), buffer);\n+        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), StringBufFactory.of(buffer));\n@@ -2569,0 +2569,4 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,158 @@\n+\/*\n+ * Copyright (c) 2024, Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package java.text;\n+\n+\/**\n+ * StringBufFactory create {code Format.StringBuf}'s implements that\n+ * backend with {code StringBuffer} and {code StringBuilder}.\n+ * It used by {code Format}'s implements to replace inner string\n+ * buffer from {code StringBuffer} to {code StringBuilder} to gain\n+ * a better performance.\n+ *\/\n+final class StringBufFactory {\n+\n+    static Format.StringBuf of(StringBuffer sb) {\n+        return new StringBufferImpl(sb);\n+    }\n+\n+    static Format.StringBuf of(StringBuilder sb) {\n+        return new StringBuilderImpl(sb);\n+    }\n+\n+    private static class StringBufferImpl implements Format.StringBuf {\n+        private final StringBuffer sb;\n+\n+        StringBufferImpl(StringBuffer sb) {\n+            this.sb = sb;\n+        }\n+\n+        @Override\n+        public int length() {\n+            return sb.length();\n+        }\n+\n+        @Override\n+        public String substring(int start, int end) {\n+            return sb.substring(start, end);\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(char c) {\n+            sb.append(c);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(String str) {\n+            sb.append(str);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(int i) {\n+            sb.append(i);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(char[] str, int offset, int len) {\n+            sb.append(str, offset, len);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuffer asStringBuffer() {\n+            return sb;\n+        }\n+\n+        @Override\n+        public StringBuilder asStringBuilder() {\n+            throw new AssertionError(\"Can't cast StringBuffer to StringBuilder\");\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return sb.toString();\n+        }\n+    }\n+\n+    private static class StringBuilderImpl implements Format.StringBuf {\n+        private final StringBuilder sb;\n+\n+        StringBuilderImpl(StringBuilder sb) {\n+            this.sb = sb;\n+        }\n+\n+        @Override\n+        public int length() {\n+            return sb.length();\n+        }\n+\n+        @Override\n+        public String substring(int start, int end) {\n+            return sb.substring(start, end);\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(char c) {\n+            sb.append(c);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(String str) {\n+            sb.append(str);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(int i) {\n+            sb.append(i);\n+            return this;\n+        }\n+\n+        @Override\n+        public Format.StringBuf append(char[] str, int offset, int len) {\n+            sb.append(str, offset, len);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuffer asStringBuffer() {\n+            throw new AssertionError(\"Can't cast StringBuilder to StringBuffer\");\n+        }\n+\n+        @Override\n+        public StringBuilder asStringBuilder() {\n+            return sb;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return sb.toString();\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/text\/StringBufFactory.java","additions":158,"deletions":0,"binary":false,"changes":158,"status":"added"}]}