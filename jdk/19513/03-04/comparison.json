{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/text\/CharacterIteratorFieldDelegate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -549,0 +549,5 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -608,0 +608,5 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -600,0 +600,5 @@\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/text\/DontCareFieldPosition.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/text\/FieldPosition.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/text\/Format.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -350,2 +350,7 @@\n-        return format(number, new StringBuilder(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (isInternalSubclass()) {\n+            return format(number, new StringBuilder(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(number, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n@@ -370,2 +375,7 @@\n-        return format(number, new StringBuilder(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (isInternalSubclass()) {\n+            return format(number, new StringBuilder(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(number, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n@@ -443,0 +453,12 @@\n+    \/**\n+     * Return true if current class is a JDK internal subclass.\n+     * If true, using {@code StringBuilder} instead of {@code StringBuffer}\n+     * in {@link #format(long)} and {@link #format(double)} to get a better performance.\n+     *\n+     * @return {@code true}  if current class is a JDK internal subclass;\n+     *         {@code false} otherwise\n+     *\/\n+    boolean isInternalSubclass() {\n+        return false;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":26,"deletions":4,"binary":false,"changes":30,"status":"modified"}]}