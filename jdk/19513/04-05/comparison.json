{"files":[{"patch":"@@ -57,1 +57,1 @@\n-                          StringBuilderBufferProxy buffer) {\n+                          StringBuf buffer) {\n@@ -96,1 +96,1 @@\n-                          int start, int end, StringBuilderBufferProxy buffer) {\n+                          int start, int end, StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/CharacterIteratorFieldDelegate.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-        return format((double) number, StringBuilderBufferProxy.of(toAppendTo), status).asStringBuilder();\n+        return format((double) number, StringBufFactory.of(toAppendTo), status).asStringBuilder();\n@@ -540,1 +540,1 @@\n-        return format(number, StringBuilderBufferProxy.of(toAppendTo), status).asStringBuffer();\n+        return format(number, StringBufFactory.of(toAppendTo), status).asStringBuffer();\n@@ -546,1 +546,1 @@\n-        return format(number, StringBuilderBufferProxy.of(toAppendTo), status).asStringBuilder();\n+        return format(number, StringBufFactory.of(toAppendTo), status).asStringBuilder();\n@@ -554,2 +554,2 @@\n-    private StringBuilderBufferProxy format(double number, StringBuilderBufferProxy toAppendTo,\n-                                            FieldPosition status) {\n+    private StringBuf format(double number, StringBuf toAppendTo,\n+                             FieldPosition status) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -596,1 +596,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -605,1 +605,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n@@ -613,1 +613,1 @@\n-    private StringBuilderBufferProxy format(double number, StringBuilderBufferProxy result,\n+    private StringBuf format(double number, StringBuf result,\n@@ -700,1 +700,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -709,1 +709,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n@@ -712,1 +712,1 @@\n-    private StringBuilderBufferProxy format(long number, StringBuilderBufferProxy result, FieldDelegate delegate) {\n+    private StringBuf format(long number, StringBuf result, FieldDelegate delegate) {\n@@ -796,1 +796,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -799,1 +799,1 @@\n-    private StringBuilderBufferProxy format(BigDecimal number, StringBuilderBufferProxy result,\n+    private StringBuf format(BigDecimal number, StringBuf result,\n@@ -882,1 +882,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n@@ -885,1 +885,1 @@\n-    private StringBuilderBufferProxy format(BigInteger number, StringBuilderBufferProxy result,\n+    private StringBuf format(BigInteger number, StringBuf result,\n@@ -962,1 +962,1 @@\n-    private void appendPrefix(StringBuilderBufferProxy result, String prefix,\n+    private void appendPrefix(StringBuf result, String prefix,\n@@ -978,1 +978,1 @@\n-    private void appendSuffix(StringBuilderBufferProxy result, String suffix,\n+    private void appendSuffix(StringBuf result, String suffix,\n@@ -994,1 +994,1 @@\n-    private void append(StringBuilderBufferProxy result, String string,\n+    private void append(StringBuf result, String string,\n@@ -1163,1 +1163,1 @@\n-            format(((Number) obj).doubleValue(), StringBuilderBufferProxy.of(sb), delegate);\n+            format(((Number) obj).doubleValue(), StringBufFactory.of(sb), delegate);\n@@ -1167,1 +1167,1 @@\n-            format(((Number) obj).longValue(), StringBuilderBufferProxy.of(sb), delegate);\n+            format(((Number) obj).longValue(), StringBufFactory.of(sb), delegate);\n@@ -1169,1 +1169,1 @@\n-            format((BigDecimal) obj, StringBuilderBufferProxy.of(sb), delegate);\n+            format((BigDecimal) obj, StringBufFactory.of(sb), delegate);\n@@ -1171,1 +1171,1 @@\n-            format((BigInteger) obj, StringBuilderBufferProxy.of(sb), delegate, false);\n+            format((BigInteger) obj, StringBufFactory.of(sb), delegate, false);\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -591,1 +591,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition).asStringBuffer();\n@@ -597,1 +597,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition).asStringBuilder();\n+        return format(number, StringBufFactory.of(result), fieldPosition).asStringBuilder();\n@@ -605,2 +605,2 @@\n-    private StringBuilderBufferProxy format(double number, StringBuilderBufferProxy result,\n-                                            FieldPosition fieldPosition) {\n+    private StringBuf format(double number, StringBuf result,\n+                             FieldPosition fieldPosition) {\n@@ -638,2 +638,2 @@\n-    StringBuilderBufferProxy format(double number, StringBuilderBufferProxy result,\n-                                FieldDelegate delegate) {\n+    StringBuf format(double number, StringBuf result,\n+                     FieldDelegate delegate) {\n@@ -685,1 +685,1 @@\n-    boolean handleNaN(double number, StringBuilderBufferProxy result,\n+    boolean handleNaN(double number, StringBuf result,\n@@ -710,1 +710,1 @@\n-    boolean handleInfinity(double number, StringBuilderBufferProxy result,\n+    boolean handleInfinity(double number, StringBuf result,\n@@ -739,1 +739,1 @@\n-    StringBuilderBufferProxy doubleSubformat(double number, StringBuilderBufferProxy result,\n+    StringBuf doubleSubformat(double number, StringBuf result,\n@@ -780,1 +780,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -789,1 +789,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n@@ -802,2 +802,2 @@\n-    StringBuilderBufferProxy format(long number, StringBuilderBufferProxy result,\n-                               FieldDelegate delegate) {\n+    StringBuf format(long number, StringBuf result,\n+                     FieldDelegate delegate) {\n@@ -881,1 +881,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -893,2 +893,2 @@\n-    StringBuilderBufferProxy format(BigDecimal number, StringBuilderBufferProxy result,\n-                                FieldDelegate delegate) {\n+    StringBuf format(BigDecimal number, StringBuf result,\n+                     FieldDelegate delegate) {\n@@ -941,1 +941,1 @@\n-        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n+        return format(number, StringBufFactory.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n@@ -954,2 +954,2 @@\n-    StringBuilderBufferProxy format(BigInteger number, StringBuilderBufferProxy result,\n-                               FieldDelegate delegate, boolean formatLong) {\n+    StringBuf format(BigInteger number, StringBuf result,\n+                     FieldDelegate delegate, boolean formatLong) {\n@@ -1017,1 +1017,1 @@\n-            format(((Number)obj).doubleValue(), StringBuilderBufferProxy.of(sb), delegate);\n+            format(((Number)obj).doubleValue(), StringBufFactory.of(sb), delegate);\n@@ -1021,1 +1021,1 @@\n-            format(((Number)obj).longValue(), StringBuilderBufferProxy.of(sb), delegate);\n+            format(((Number)obj).longValue(), StringBufFactory.of(sb), delegate);\n@@ -1023,1 +1023,1 @@\n-            format((BigDecimal)obj, StringBuilderBufferProxy.of(sb), delegate);\n+            format((BigDecimal)obj, StringBufFactory.of(sb), delegate);\n@@ -1025,1 +1025,1 @@\n-            format((BigInteger)obj, StringBuilderBufferProxy.of(sb), delegate, false);\n+            format((BigInteger)obj, StringBufFactory.of(sb), delegate, false);\n@@ -1807,1 +1807,1 @@\n-    private StringBuilderBufferProxy subformat(StringBuilderBufferProxy result, FieldDelegate delegate,\n+    private StringBuf subformat(StringBuf result, FieldDelegate delegate,\n@@ -1849,1 +1849,1 @@\n-    void subformatNumber(StringBuilderBufferProxy result, FieldDelegate delegate,\n+    void subformatNumber(StringBuf result, FieldDelegate delegate,\n@@ -2136,1 +2136,1 @@\n-    private void append(StringBuilderBufferProxy result, String string,\n+    private void append(StringBuf result, String string,\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":26,"deletions":26,"binary":false,"changes":52,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-                              int end, StringBuilderBufferProxy buffer) {\n+                              int end, StringBuf buffer) {\n@@ -42,1 +42,1 @@\n-                              int start, int end, StringBuilderBufferProxy buffer) {\n+                              int start, int end, StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/DontCareFieldPosition.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -293,1 +293,1 @@\n-                              int end, StringBuilderBufferProxy buffer) {\n+                              int end, StringBuf buffer) {\n@@ -302,1 +302,1 @@\n-                              int start, int end, StringBuilderBufferProxy buffer) {\n+                              int start, int end, StringBuf buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/FieldPosition.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -397,1 +397,1 @@\n-                              int end, StringBuilderBufferProxy buffer);\n+                              int end, StringBuf buffer);\n@@ -411,1 +411,1 @@\n-                              int start, int end, StringBuilderBufferProxy buffer);\n+                              int start, int end, StringBuf buffer);\n","filename":"src\/java.base\/share\/classes\/java\/text\/Format.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1379,1 +1379,1 @@\n-        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), StringBuilderBufferProxy.of(buffer));\n+        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), StringBufFactory.of(buffer));\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,84 @@\n+\/*\n+ * Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.text;\n+\n+\/**\n+ * Provide the least interfaces that replace {@code StringBuffer} with {@code StringBuilder}\n+ * as internal string buffer in NumberFormat#format(long) and NumberFormat#format(double).\n+ *\/\n+sealed interface StringBuf\n+        permits StringBufFactory.StringBufferImpl, StringBufFactory.StringBuilderImpl {\n+\n+    \/**\n+     * Return the actual StringBuffer instance\n+     *\n+     * @return the actual StringBuffer instance\n+     *\/\n+    StringBuffer asStringBuffer();\n+\n+    \/**\n+     * Return the actual StringBuilder instance.\n+     *\n+     * @return the actual StringBuilder instance.\n+     *\/\n+    StringBuilder asStringBuilder();\n+\n+    \/**\n+     * Returns a new {@code String} that contains a subsequence of\n+     * characters currently contained in this sequence. The\n+     * substring begins at the specified {@code start} and\n+     * extends to the character at index {@code end - 1}.\n+     *\n+     * @param start The beginning index, inclusive.\n+     * @param end   The ending index, exclusive.\n+     * @return The new string.\n+     *\/\n+    String substring(int start, int end);\n+\n+    \/**\n+     * Appends the specified string to this character sequence.\n+     *\n+     * @param str a string.\n+     * @return a reference to this object.\n+     *\/\n+    StringBuf append(String str);\n+\n+    \/**\n+     * Appends the string representation of the {@code char}\n+     * argument to this sequence.\n+     *\n+     * @param c a {@code char}.\n+     * @return a reference to this object.\n+     *\/\n+    StringBuf append(char c);\n+\n+    \/**\n+     * Returns the length (character count).\n+     *\n+     * @return the length of the sequence of characters currently\n+     * represented by this object\n+     *\/\n+    int length();\n+}\n","filename":"src\/java.base\/share\/classes\/java\/text\/StringBuf.java","additions":84,"deletions":0,"binary":false,"changes":84,"status":"added"},{"patch":"@@ -0,0 +1,138 @@\n+\/*\n+ * Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.text;\n+\n+\/**\n+ * A factory class that create {code StringBuf} instance\n+ * that accept {code StringBuffer} and {code StringBuilder}.\n+ *\/\n+class StringBufFactory {\n+\n+    private StringBufFactory() {\n+    }\n+\n+    \/**\n+     * A factory method return an instance with actual implementor\n+     * is a StringBuilder instance\n+     *\n+     * @param sb actual implementor instance\n+     * @return an instance that proxy StringBuilder\n+     *\/\n+    static StringBuf of(StringBuilder sb) {\n+        return new StringBuilderImpl(sb);\n+    }\n+\n+    \/**\n+     * A factory method return an instance with actual implementor\n+     * is a StringBuffer instance\n+     *\n+     * @param sb actual implementor instance\n+     * @return an instance that proxy StringBuffer\n+     *\/\n+    static StringBuf of(StringBuffer sb) {\n+        return new StringBufferImpl(sb);\n+    }\n+\n+    static final class StringBuilderImpl implements StringBuf {\n+        private final StringBuilder sb;\n+\n+        public StringBuilderImpl(StringBuilder sb) {\n+            this.sb = sb;\n+        }\n+\n+        @Override\n+        public int length() {\n+            return sb.length();\n+        }\n+\n+        @Override\n+        public StringBuffer asStringBuffer() {\n+            throw new RuntimeException(\"Can't cast to StringBuffer\");\n+        }\n+\n+        @Override\n+        public StringBuilder asStringBuilder() {\n+            return sb;\n+        }\n+\n+        @Override\n+        public String substring(int start, int end) {\n+            return sb.substring(start, end);\n+        }\n+\n+        @Override\n+        public StringBuf append(String str) {\n+            sb.append(str);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(char c) {\n+            sb.append(c);\n+            return this;\n+        }\n+    }\n+\n+    static final class StringBufferImpl implements StringBuf {\n+\n+        private StringBuffer sb;\n+\n+        public StringBufferImpl(StringBuffer sb) {\n+            this.sb = sb;\n+        }\n+\n+        @Override\n+        public int length() {\n+            return sb.length();\n+        }\n+\n+        @Override\n+        public StringBuffer asStringBuffer() {\n+            return sb;\n+        }\n+\n+        @Override\n+        public StringBuilder asStringBuilder() {\n+            throw new RuntimeException(\"Can't cast to StringBuilder\");\n+        }\n+\n+        @Override\n+        public String substring(int start, int end) {\n+            return sb.substring(start, end);\n+        }\n+\n+        @Override\n+        public StringBuf append(String str) {\n+            sb.append(str);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuf append(char c) {\n+            sb.append(c);\n+            return this;\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/text\/StringBufFactory.java","additions":138,"deletions":0,"binary":false,"changes":138,"status":"added"},{"patch":"@@ -1,188 +0,0 @@\n-\/*\n- * Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-package java.text;\n-\n-\/**\n- * Provide the least interfaces that support both:\n- * NumberFormat#format((double|long), StringBuilder, FieldPosition)\n- * and NumberFormat#format(double, StringBuffer, FieldPosition)\n- *\n- *\/\n-interface StringBuilderBufferProxy {\n-\n-    \/**\n-     * Return the actual StringBuffer instance\n-     *\n-     * @return the actual StringBuffer instance\n-     *\/\n-    StringBuffer asStringBuffer();\n-\n-    \/**\n-     * Return the actual StringBuilder instance.\n-     *\n-     * @return the actual StringBuilder instance.\n-     *\/\n-    StringBuilder asStringBuilder();\n-\n-    \/**\n-     * Returns a new {@code String} that contains a subsequence of\n-     * characters currently contained in this sequence. The\n-     * substring begins at the specified {@code start} and\n-     * extends to the character at index {@code end - 1}.\n-     *\n-     * @param start The beginning index, inclusive.\n-     * @param end   The ending index, exclusive.\n-     * @return The new string.\n-     *\/\n-    String substring(int start, int end);\n-\n-    \/**\n-     * Appends the specified string to this character sequence.\n-     *\n-     * @param str a string.\n-     * @return a reference to this object.\n-     *\/\n-    StringBuilderBufferProxy append(String str);\n-\n-    \/**\n-     * Appends the string representation of the {@code char}\n-     * argument to this sequence.\n-     *\n-     * @param c a {@code char}.\n-     * @return a reference to this object.\n-     *\/\n-    StringBuilderBufferProxy append(char c);\n-\n-    \/**\n-     * Returns the length (character count).\n-     *\n-     * @return the length of the sequence of characters currently\n-     * represented by this object\n-     *\/\n-    int length();\n-\n-    \/**\n-     * A factory method return an instance with actual implementor\n-     * is a StringBuilder instance\n-     *\n-     * @param sb actual implementor instance\n-     * @return an instance that proxy StringBuilder\n-     *\/\n-    static StringBuilderBufferProxy of(StringBuilder sb) {\n-        return new StringBuilderImpl(sb);\n-    }\n-\n-    \/**\n-     * A factory method return an instance with actual implementor\n-     * is a StringBuffer instance\n-     *\n-     * @param sb actual implementor instance\n-     * @return an instance that proxy StringBuffer\n-     *\/\n-    static StringBuilderBufferProxy of(StringBuffer sb) {\n-        return new StringBufferImpl(sb);\n-    }\n-\n-    class StringBuilderImpl implements StringBuilderBufferProxy {\n-        private final StringBuilder sb;\n-\n-        public StringBuilderImpl(StringBuilder sb) {\n-            this.sb = sb;\n-        }\n-\n-        @Override\n-        public int length() {\n-            return sb.length();\n-        }\n-\n-        @Override\n-        public StringBuffer asStringBuffer() {\n-            throw new RuntimeException(\"Can't cast to StringBuffer\");\n-        }\n-\n-        @Override\n-        public StringBuilder asStringBuilder() {\n-            return sb;\n-        }\n-\n-        @Override\n-        public String substring(int start, int end) {\n-            return sb.substring(start, end);\n-        }\n-\n-        @Override\n-        public StringBuilderBufferProxy append(String str) {\n-            sb.append(str);\n-            return this;\n-        }\n-\n-        @Override\n-        public StringBuilderBufferProxy append(char c) {\n-            sb.append(c);\n-            return this;\n-        }\n-    }\n-\n-    class StringBufferImpl implements StringBuilderBufferProxy {\n-\n-        private StringBuffer sb;\n-\n-        public StringBufferImpl(StringBuffer sb) {\n-            this.sb = sb;\n-        }\n-\n-        @Override\n-        public int length() {\n-            return sb.length();\n-        }\n-\n-        @Override\n-        public StringBuffer asStringBuffer() {\n-            return sb;\n-        }\n-\n-        @Override\n-        public StringBuilder asStringBuilder() {\n-            throw new RuntimeException(\"Can't cast to StringBuilder\");\n-        }\n-\n-        @Override\n-        public String substring(int start, int end) {\n-            return sb.substring(start, end);\n-        }\n-\n-        @Override\n-        public StringBuilderBufferProxy append(String str) {\n-            sb.append(str);\n-            return this;\n-        }\n-\n-        @Override\n-        public StringBuilderBufferProxy append(char c) {\n-            sb.append(c);\n-            return this;\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/text\/StringBuilderBufferProxy.java","additions":0,"deletions":188,"binary":false,"changes":188,"status":"deleted"}]}