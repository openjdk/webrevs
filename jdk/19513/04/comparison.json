{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,1 +57,1 @@\n-                          StringBuffer buffer) {\n+                          StringBuilderBufferProxy buffer) {\n@@ -96,1 +96,1 @@\n-                          int start, int end, StringBuffer buffer) {\n+                          int start, int end, StringBuilderBufferProxy buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/CharacterIteratorFieldDelegate.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -520,0 +520,6 @@\n+    @Override\n+    StringBuilder format(long number, StringBuilder toAppendTo,\n+                         FieldPosition status) {\n+        return format((double) number, StringBuilderBufferProxy.of(toAppendTo), status).asStringBuilder();\n+    }\n+\n@@ -534,0 +540,16 @@\n+        return format(number, StringBuilderBufferProxy.of(toAppendTo), status).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuilder format(double number, StringBuilder toAppendTo,\n+                         FieldPosition status) {\n+        return format(number, StringBuilderBufferProxy.of(toAppendTo), status).asStringBuilder();\n+    }\n+\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n+    private StringBuilderBufferProxy format(double number, StringBuilderBufferProxy toAppendTo,\n+                                            FieldPosition status) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/ChoiceFormat.java","additions":22,"deletions":0,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -596,1 +596,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -599,1 +599,15 @@\n-    private StringBuffer format(double number, StringBuffer result,\n+    @Override\n+    StringBuilder format(double number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n+\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+    }\n+\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n+    private StringBuilderBufferProxy format(double number, StringBuilderBufferProxy result,\n@@ -686,1 +700,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -689,1 +703,10 @@\n-    private StringBuffer format(long number, StringBuffer result, FieldDelegate delegate) {\n+    @Override\n+    StringBuilder format(long number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n+\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n+    }\n+\n+    private StringBuilderBufferProxy format(long number, StringBuilderBufferProxy result, FieldDelegate delegate) {\n@@ -773,1 +796,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -776,1 +799,1 @@\n-    private StringBuffer format(BigDecimal number, StringBuffer result,\n+    private StringBuilderBufferProxy format(BigDecimal number, StringBuilderBufferProxy result,\n@@ -859,1 +882,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate(), false);\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n@@ -862,1 +885,1 @@\n-    private StringBuffer format(BigInteger number, StringBuffer result,\n+    private StringBuilderBufferProxy format(BigInteger number, StringBuilderBufferProxy result,\n@@ -939,2 +962,2 @@\n-    private void appendPrefix(StringBuffer result, String prefix,\n-            FieldDelegate delegate) {\n+    private void appendPrefix(StringBuilderBufferProxy result, String prefix,\n+                              FieldDelegate delegate) {\n@@ -955,2 +978,2 @@\n-    private void appendSuffix(StringBuffer result, String suffix,\n-            FieldDelegate delegate) {\n+    private void appendSuffix(StringBuilderBufferProxy result, String suffix,\n+                              FieldDelegate delegate) {\n@@ -971,2 +994,2 @@\n-    private void append(StringBuffer result, String string,\n-            FieldDelegate delegate, List<FieldPosition> positions) {\n+    private void append(StringBuilderBufferProxy result, String string,\n+                        FieldDelegate delegate, List<FieldPosition> positions) {\n@@ -1140,1 +1163,1 @@\n-            format(((Number) obj).doubleValue(), sb, delegate);\n+            format(((Number) obj).doubleValue(), StringBuilderBufferProxy.of(sb), delegate);\n@@ -1144,1 +1167,1 @@\n-            format(((Number) obj).longValue(), sb, delegate);\n+            format(((Number) obj).longValue(), StringBuilderBufferProxy.of(sb), delegate);\n@@ -1146,1 +1169,1 @@\n-            format((BigDecimal) obj, sb, delegate);\n+            format((BigDecimal) obj, StringBuilderBufferProxy.of(sb), delegate);\n@@ -1148,1 +1171,1 @@\n-            format((BigInteger) obj, sb, delegate, false);\n+            format((BigInteger) obj, StringBuilderBufferProxy.of(sb), delegate, false);\n","filename":"src\/java.base\/share\/classes\/java\/text\/CompactNumberFormat.java","additions":41,"deletions":18,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -591,0 +591,16 @@\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuilder format(double number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition).asStringBuilder();\n+    }\n+\n+    @Override\n+    boolean isInternalSubclass() {\n+        return true;\n+    }\n+\n+    private StringBuilderBufferProxy format(double number, StringBuilderBufferProxy result,\n+                                            FieldPosition fieldPosition) {\n@@ -622,1 +638,1 @@\n-    StringBuffer format(double number, StringBuffer result,\n+    StringBuilderBufferProxy format(double number, StringBuilderBufferProxy result,\n@@ -669,1 +685,1 @@\n-    boolean handleNaN(double number, StringBuffer result,\n+    boolean handleNaN(double number, StringBuilderBufferProxy result,\n@@ -694,1 +710,1 @@\n-    boolean handleInfinity(double number, StringBuffer result,\n+    boolean handleInfinity(double number, StringBuilderBufferProxy result,\n@@ -723,1 +739,1 @@\n-    StringBuffer doubleSubformat(double number, StringBuffer result,\n+    StringBuilderBufferProxy doubleSubformat(double number, StringBuilderBufferProxy result,\n@@ -764,1 +780,10 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n+    }\n+\n+    @Override\n+    StringBuilder format(long number, StringBuilder result,\n+                         FieldPosition fieldPosition) {\n+        fieldPosition.setBeginIndex(0);\n+        fieldPosition.setEndIndex(0);\n+\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuilder();\n@@ -777,1 +802,1 @@\n-    StringBuffer format(long number, StringBuffer result,\n+    StringBuilderBufferProxy format(long number, StringBuilderBufferProxy result,\n@@ -856,1 +881,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate());\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate()).asStringBuffer();\n@@ -868,1 +893,1 @@\n-    StringBuffer format(BigDecimal number, StringBuffer result,\n+    StringBuilderBufferProxy format(BigDecimal number, StringBuilderBufferProxy result,\n@@ -916,1 +941,1 @@\n-        return format(number, result, fieldPosition.getFieldDelegate(), false);\n+        return format(number, StringBuilderBufferProxy.of(result), fieldPosition.getFieldDelegate(), false).asStringBuffer();\n@@ -929,1 +954,1 @@\n-    StringBuffer format(BigInteger number, StringBuffer result,\n+    StringBuilderBufferProxy format(BigInteger number, StringBuilderBufferProxy result,\n@@ -992,1 +1017,1 @@\n-            format(((Number)obj).doubleValue(), sb, delegate);\n+            format(((Number)obj).doubleValue(), StringBuilderBufferProxy.of(sb), delegate);\n@@ -996,1 +1021,1 @@\n-            format(((Number)obj).longValue(), sb, delegate);\n+            format(((Number)obj).longValue(), StringBuilderBufferProxy.of(sb), delegate);\n@@ -998,1 +1023,1 @@\n-            format((BigDecimal)obj, sb, delegate);\n+            format((BigDecimal)obj, StringBuilderBufferProxy.of(sb), delegate);\n@@ -1000,1 +1025,1 @@\n-            format((BigInteger)obj, sb, delegate, false);\n+            format((BigInteger)obj, StringBuilderBufferProxy.of(sb), delegate, false);\n@@ -1782,1 +1807,1 @@\n-    private StringBuffer subformat(StringBuffer result, FieldDelegate delegate,\n+    private StringBuilderBufferProxy subformat(StringBuilderBufferProxy result, FieldDelegate delegate,\n@@ -1824,1 +1849,1 @@\n-    void subformatNumber(StringBuffer result, FieldDelegate delegate,\n+    void subformatNumber(StringBuilderBufferProxy result, FieldDelegate delegate,\n@@ -2111,1 +2136,1 @@\n-    private void append(StringBuffer result, String string,\n+    private void append(StringBuilderBufferProxy result, String string,\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":42,"deletions":17,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +39,1 @@\n-                              int end, StringBuffer buffer) {\n+                              int end, StringBuilderBufferProxy buffer) {\n@@ -42,1 +42,1 @@\n-                              int start, int end, StringBuffer buffer) {\n+                              int start, int end, StringBuilderBufferProxy buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/DontCareFieldPosition.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -293,1 +293,1 @@\n-                              int end, StringBuffer buffer) {\n+                              int end, StringBuilderBufferProxy buffer) {\n@@ -302,1 +302,1 @@\n-                              int start, int end, StringBuffer buffer) {\n+                              int start, int end, StringBuilderBufferProxy buffer) {\n","filename":"src\/java.base\/share\/classes\/java\/text\/FieldPosition.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -397,1 +397,1 @@\n-                              int end, StringBuffer buffer);\n+                              int end, StringBuilderBufferProxy buffer);\n@@ -411,1 +411,1 @@\n-                              int start, int end, StringBuffer buffer);\n+                              int start, int end, StringBuilderBufferProxy buffer);\n","filename":"src\/java.base\/share\/classes\/java\/text\/Format.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -350,2 +350,7 @@\n-        return format(number, new StringBuffer(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (isInternalSubclass()) {\n+            return format(number, new StringBuilder(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(number, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n@@ -370,2 +375,7 @@\n-        return format(number, new StringBuffer(),\n-                      DontCareFieldPosition.INSTANCE).toString();\n+        if (isInternalSubclass()) {\n+            return format(number, new StringBuilder(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        } else {\n+            return format(number, new StringBuffer(),\n+                    DontCareFieldPosition.INSTANCE).toString();\n+        }\n@@ -397,0 +407,12 @@\n+\n+    \/**\n+     * Same as format(double, StringBuffer, FieldPosition), but using StringBuilder\n+     * instead of StringBuffer.\n+     *\/\n+    StringBuilder format(double number,\n+                         StringBuilder toAppendTo,\n+                         FieldPosition pos) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this \" +\n+                                                        \"method when implementing format with StringBuilder\");\n+    }\n+\n@@ -420,0 +442,23 @@\n+    \/**\n+     * Same as format(long, StringBuffer, FieldPosition), but using StringBuilder\n+     * instead of StringBuffer.\n+     *\/\n+    StringBuilder format(long number,\n+                         StringBuilder toAppendTo,\n+                         FieldPosition pos) {\n+        throw new UnsupportedOperationException(\"Subclasses should override this \" +\n+                                                        \"method when implementing format with StringBuilder\");\n+    }\n+\n+    \/**\n+     * Return true if current class is a JDK internal subclass.\n+     * If true, using {@code StringBuilder} instead of {@code StringBuffer}\n+     * in {@link #format(long)} and {@link #format(double)} to get a better performance.\n+     *\n+     * @return {@code true}  if current class is a JDK internal subclass;\n+     *         {@code false} otherwise\n+     *\/\n+    boolean isInternalSubclass() {\n+        return false;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/text\/NumberFormat.java","additions":49,"deletions":4,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -1379,1 +1379,1 @@\n-        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), buffer);\n+        delegate.formatted(fieldID, f, f, beginOffset, buffer.length(), StringBuilderBufferProxy.of(buffer));\n","filename":"src\/java.base\/share\/classes\/java\/text\/SimpleDateFormat.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,188 @@\n+\/*\n+ * Copyright (c) 2024 Alibaba Group Holding Limited. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package java.text;\n+\n+\/**\n+ * Provide the least interfaces that support both:\n+ * NumberFormat#format((double|long), StringBuilder, FieldPosition)\n+ * and NumberFormat#format(double, StringBuffer, FieldPosition)\n+ *\n+ *\/\n+interface StringBuilderBufferProxy {\n+\n+    \/**\n+     * Return the actual StringBuffer instance\n+     *\n+     * @return the actual StringBuffer instance\n+     *\/\n+    StringBuffer asStringBuffer();\n+\n+    \/**\n+     * Return the actual StringBuilder instance.\n+     *\n+     * @return the actual StringBuilder instance.\n+     *\/\n+    StringBuilder asStringBuilder();\n+\n+    \/**\n+     * Returns a new {@code String} that contains a subsequence of\n+     * characters currently contained in this sequence. The\n+     * substring begins at the specified {@code start} and\n+     * extends to the character at index {@code end - 1}.\n+     *\n+     * @param start The beginning index, inclusive.\n+     * @param end   The ending index, exclusive.\n+     * @return The new string.\n+     *\/\n+    String substring(int start, int end);\n+\n+    \/**\n+     * Appends the specified string to this character sequence.\n+     *\n+     * @param str a string.\n+     * @return a reference to this object.\n+     *\/\n+    StringBuilderBufferProxy append(String str);\n+\n+    \/**\n+     * Appends the string representation of the {@code char}\n+     * argument to this sequence.\n+     *\n+     * @param c a {@code char}.\n+     * @return a reference to this object.\n+     *\/\n+    StringBuilderBufferProxy append(char c);\n+\n+    \/**\n+     * Returns the length (character count).\n+     *\n+     * @return the length of the sequence of characters currently\n+     * represented by this object\n+     *\/\n+    int length();\n+\n+    \/**\n+     * A factory method return an instance with actual implementor\n+     * is a StringBuilder instance\n+     *\n+     * @param sb actual implementor instance\n+     * @return an instance that proxy StringBuilder\n+     *\/\n+    static StringBuilderBufferProxy of(StringBuilder sb) {\n+        return new StringBuilderImpl(sb);\n+    }\n+\n+    \/**\n+     * A factory method return an instance with actual implementor\n+     * is a StringBuffer instance\n+     *\n+     * @param sb actual implementor instance\n+     * @return an instance that proxy StringBuffer\n+     *\/\n+    static StringBuilderBufferProxy of(StringBuffer sb) {\n+        return new StringBufferImpl(sb);\n+    }\n+\n+    class StringBuilderImpl implements StringBuilderBufferProxy {\n+        private final StringBuilder sb;\n+\n+        public StringBuilderImpl(StringBuilder sb) {\n+            this.sb = sb;\n+        }\n+\n+        @Override\n+        public int length() {\n+            return sb.length();\n+        }\n+\n+        @Override\n+        public StringBuffer asStringBuffer() {\n+            throw new RuntimeException(\"Can't cast to StringBuffer\");\n+        }\n+\n+        @Override\n+        public StringBuilder asStringBuilder() {\n+            return sb;\n+        }\n+\n+        @Override\n+        public String substring(int start, int end) {\n+            return sb.substring(start, end);\n+        }\n+\n+        @Override\n+        public StringBuilderBufferProxy append(String str) {\n+            sb.append(str);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuilderBufferProxy append(char c) {\n+            sb.append(c);\n+            return this;\n+        }\n+    }\n+\n+    class StringBufferImpl implements StringBuilderBufferProxy {\n+\n+        private StringBuffer sb;\n+\n+        public StringBufferImpl(StringBuffer sb) {\n+            this.sb = sb;\n+        }\n+\n+        @Override\n+        public int length() {\n+            return sb.length();\n+        }\n+\n+        @Override\n+        public StringBuffer asStringBuffer() {\n+            return sb;\n+        }\n+\n+        @Override\n+        public StringBuilder asStringBuilder() {\n+            throw new RuntimeException(\"Can't cast to StringBuilder\");\n+        }\n+\n+        @Override\n+        public String substring(int start, int end) {\n+            return sb.substring(start, end);\n+        }\n+\n+        @Override\n+        public StringBuilderBufferProxy append(String str) {\n+            sb.append(str);\n+            return this;\n+        }\n+\n+        @Override\n+        public StringBuilderBufferProxy append(char c) {\n+            sb.append(c);\n+            return this;\n+        }\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/java\/text\/StringBuilderBufferProxy.java","additions":188,"deletions":0,"binary":false,"changes":188,"status":"added"}]}