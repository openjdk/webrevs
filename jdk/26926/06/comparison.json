{"files":[{"patch":"@@ -28,1 +28,0 @@\n-\n@@ -39,2 +38,0 @@\n-#include \"runtime\/osThread.hpp\"\n-#include \"runtime\/safepointMechanism.inline.hpp\"\n@@ -70,1 +67,1 @@\n-   _data(nullptr), _capacity(capacity), _head(0), _lost_samples(0) {\n+   _data(nullptr), _capacity(capacity), _head(0), _lost_samples(0), _lost_samples_due_to_queue_full(0) {\n@@ -113,1 +110,1 @@\n-  return _capacity;\n+  return Atomic::load_acquire(&_capacity);\n@@ -117,0 +114,3 @@\n+  if (capacity == Atomic::load(&_capacity)) {\n+    return;\n+  }\n@@ -127,1 +127,1 @@\n-  _capacity = capacity;\n+  Atomic::release_store(&_capacity, capacity);\n@@ -143,0 +143,4 @@\n+void JfrCPUTimeTraceQueue::increment_lost_samples_due_to_queue_full() {\n+  Atomic::inc(&_lost_samples_due_to_queue_full);\n+}\n+\n@@ -147,4 +151,2 @@\n-void JfrCPUTimeTraceQueue::resize(u4 capacity) {\n-  if (capacity != _capacity) {\n-    set_capacity(capacity);\n-  }\n+u4 JfrCPUTimeTraceQueue::get_and_reset_lost_samples_due_to_queue_full() {\n+  return Atomic::xchg(&_lost_samples_due_to_queue_full, (u4)0);\n@@ -153,6 +155,2 @@\n-void JfrCPUTimeTraceQueue::resize_for_period(u4 period_millis) {\n-  u4 capacity = CPU_TIME_QUEUE_CAPACITY;\n-  if (period_millis > 0 && period_millis < 10) {\n-    capacity = (u4) ((double) capacity * 10 \/ period_millis);\n-  }\n-  resize(capacity);\n+void JfrCPUTimeTraceQueue::init() {\n+  set_capacity(JfrCPUTimeTraceQueue::CPU_TIME_QUEUE_INITIAL_CAPACITY);\n@@ -165,0 +163,25 @@\n+void JfrCPUTimeTraceQueue::resize_if_needed() {\n+  u4 lost_samples_due_to_queue_full = get_and_reset_lost_samples_due_to_queue_full();\n+  if (lost_samples_due_to_queue_full == 0) {\n+    return;\n+  }\n+  u4 capacity = Atomic::load(&_capacity);\n+  if (capacity < CPU_TIME_QUEUE_MAX_CAPACITY) {\n+    float ratio = (float)lost_samples_due_to_queue_full \/ (float)capacity;\n+    int factor = 1;\n+    if (ratio > 8) { \/\/ idea is to quickly scale the queue in the worst case\n+      factor = ratio;\n+    } else if (ratio > 2) {\n+      factor = 8;\n+    } else if (ratio > 0.5) {\n+      factor = 4;\n+    } else if (ratio > 0.01) {\n+      factor = 2;\n+    }\n+    if (factor > 1) {\n+      u4 new_capacity = MIN2(CPU_TIME_QUEUE_MAX_CAPACITY, capacity * factor);\n+      set_capacity(new_capacity);\n+    }\n+  }\n+}\n+\n@@ -208,0 +231,2 @@\n+  DEBUG_ONLY(volatile bool _out_of_stack_walking_enabled;)\n+  DEBUG_ONLY(volatile u8 _out_of_stack_walking_iterations;)\n@@ -253,0 +278,10 @@\n+\n+  #ifdef ASSERT\n+  void set_out_of_stack_walking_enabled(bool runnable) {\n+    Atomic::release_store(&_out_of_stack_walking_enabled, runnable);\n+  }\n+\n+  u8 out_of_stack_walking_iterations() const {\n+    return Atomic::load(&_out_of_stack_walking_iterations);\n+  }\n+  #endif\n@@ -278,1 +313,1 @@\n-  tl->cpu_time_jfr_queue().resize_for_period(_current_sampling_period_ns \/ 1000000);\n+  tl->cpu_time_jfr_queue().init();\n@@ -297,0 +332,1 @@\n+  tl->acquire_cpu_time_jfr_dequeue_lock();\n@@ -303,0 +339,1 @@\n+  tl->release_cpu_time_jfr_queue_lock();\n@@ -355,4 +392,6 @@\n-\n-    if (Atomic::cmpxchg(&_is_async_processing_of_cpu_time_jfr_requests_triggered, true, false)) {\n-      stackwalk_threads_in_native();\n-    }\n+    DEBUG_ONLY(if (Atomic::load_acquire(&_out_of_stack_walking_enabled)) {)\n+      if (Atomic::cmpxchg(&_is_async_processing_of_cpu_time_jfr_requests_triggered, true, false)) {\n+        DEBUG_ONLY(Atomic::inc(&_out_of_stack_walking_iterations);)\n+        stackwalk_threads_in_native();\n+      }\n+    DEBUG_ONLY(})\n@@ -548,0 +587,15 @@\n+#ifdef ASSERT\n+void JfrCPUTimeThreadSampling::set_out_of_stack_walking_enabled(bool runnable) {\n+  if (_instance != nullptr && _instance->_sampler != nullptr) {\n+    _instance->_sampler->set_out_of_stack_walking_enabled(runnable);\n+  }\n+}\n+\n+u8 JfrCPUTimeThreadSampling::out_of_stack_walking_iterations() {\n+  if (_instance != nullptr && _instance->_sampler != nullptr) {\n+    return _instance->_sampler->out_of_stack_walking_iterations();\n+  }\n+  return 0;\n+}\n+#endif\n+\n@@ -593,0 +647,1 @@\n+    queue.increment_lost_samples_due_to_queue_full();\n@@ -810,0 +865,6 @@\n+#ifdef ASSERT\n+static void set_out_of_stack_walking_enabled(bool runnable) {\n+  warn();\n+}\n+#endif\n+\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":82,"deletions":21,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-  u4 _capacity;\n+  volatile u4 _capacity;\n@@ -58,0 +58,1 @@\n+  volatile u4 _lost_samples_due_to_queue_full;\n@@ -59,0 +60,2 @@\n+  static const u4 CPU_TIME_QUEUE_INITIAL_CAPACITY = 20;\n+  static const u4 CPU_TIME_QUEUE_MAX_CAPACITY     = 2000;\n@@ -84,0 +87,2 @@\n+  void increment_lost_samples_due_to_queue_full();\n+\n@@ -87,1 +92,3 @@\n-  void resize(u4 capacity);\n+  u4 get_and_reset_lost_samples_due_to_queue_full();\n+\n+  void resize_if_needed();\n@@ -89,1 +96,2 @@\n-  void resize_for_period(u4 period_millis);\n+  \/\/ init the queue capacity\n+  void init();\n@@ -133,0 +141,4 @@\n+\n+  DEBUG_ONLY(static void set_out_of_stack_walking_enabled(bool runnable);)\n+\n+  DEBUG_ONLY(static u8 out_of_stack_walking_iterations();)\n@@ -153,0 +165,2 @@\n+  DEBUG_ONLY(static void set_out_of_stack_walking_enabled(bool runnable));\n+  DEBUG_ONLY(static u8 out_of_stack_walking_iterations();)\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp","additions":17,"deletions":3,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -371,0 +371,1 @@\n+    queue.resize_if_needed();\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrThreadSampling.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -659,1 +659,1 @@\n-  cpu_time_jfr_queue().resize(0);\n+  cpu_time_jfr_queue().set_capacity(0);\n","filename":"src\/hotspot\/share\/jfr\/support\/jfrThreadLocal.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+#include \"jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.hpp\"\n@@ -2660,0 +2661,26 @@\n+WB_ENTRY(void, WB_BusyWait(JNIEnv* env, jobject wb, jint time))\n+  ThreadToNativeFromVM  ttn(thread);\n+  u8 start = os::current_thread_cpu_time();\n+  u8 target_duration = time * (u8)1000000;\n+  while (os::current_thread_cpu_time() - start < target_duration) {\n+    for (volatile int i = 0; i < 1000000; i++);\n+  }\n+WB_END\n+\n+WB_ENTRY(jboolean, WB_CPUSamplerSetOutOfStackWalking(JNIEnv* env, jobject wb, jboolean enable))\n+  #if defined(ASSERT) && defined(INCLUDE_JFR) && defined(LINUX)\n+    JfrCPUTimeThreadSampling::set_out_of_stack_walking_enabled(enable == JNI_TRUE);\n+    return JNI_TRUE;\n+  #else\n+    return JNI_FALSE;\n+  #endif\n+WB_END\n+\n+WB_ENTRY(jlong, WB_CPUSamplerOutOfStackWalkingIterations(JNIEnv* env, jobject wb))\n+  #if defined(ASSERT) && defined(INCLUDE_JFR) && defined(LINUX)\n+    return (jlong)JfrCPUTimeThreadSampling::out_of_stack_walking_iterations();\n+  #else\n+    return 0;\n+  #endif\n+WB_END\n+\n@@ -3013,0 +3040,3 @@\n+  {CC\"busyWait\", CC\"(I)V\",                            (void*)&WB_BusyWait},\n+  {CC\"cpuSamplerSetOutOfStackWalking\", CC\"(Z)Z\",      (void*)&WB_CPUSamplerSetOutOfStackWalking},\n+  {CC\"cpuSamplerOutOfStackWalkingIterations\", CC\"()J\",(void*)&WB_CPUSamplerOutOfStackWalkingIterations},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -0,0 +1,154 @@\n+\/*\n+ * Copyright (c) 2025 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.profiling;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.stream.Collectors;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.internal.JVM;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.whitebox.WhiteBox;\n+\n+\n+\/*\n+ * Tests the sample queues increase in size as needed, when loss is recorded.\n+ * @test\n+ * @requires vm.hasJFR & os.family == \"linux\" & vm.debug\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\/jdk.jfr.internal\n+ * @build  jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -Xbatch -XX:StartFlightRecording:dumponexit=true jdk.jfr.event.profiling.TestCPUTimeSampleQueueAutoSizes\n+ *\/\n+public class TestCPUTimeSampleQueueAutoSizes {\n+\n+    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    private static final String BURST_THREAD_NAME = \"Burst-Thread-1\";\n+\n+    static volatile boolean alive = true;\n+\n+    record LossEvent(long relativeTimeMillis, long lostSamples) {}\n+\n+    \/** A data collection from the CPUTimeSampleLost events for the burst thread *\/\n+    static class LossEventCollection {\n+        private final List<LossEvent> events = new ArrayList<>();\n+\n+        public synchronized void addEvent(LossEvent event) {\n+            events.add(event);\n+        }\n+\n+        public synchronized List<LossEvent> getSortedEvents() {\n+            return events.stream()\n+                         .sorted(Comparator.comparingLong(e -> e.relativeTimeMillis))\n+                         .collect(Collectors.toList());\n+        }\n+\n+        public List<LossEvent> getEventsPerInterval(long widthMillis, long stopTimeMillis) {\n+            List<LossEvent> ret = new ArrayList<>();\n+            for (long start = 0; start < stopTimeMillis; start += widthMillis) {\n+                long actualStart = Math.min(start, stopTimeMillis - widthMillis);\n+                long lostSamples = events.stream()\n+                                          .filter(e -> e.relativeTimeMillis >= actualStart && e.relativeTimeMillis < actualStart + widthMillis)\n+                                          .mapToLong(e -> e.lostSamples)\n+                                          .sum();\n+                ret.add(new LossEvent(actualStart, lostSamples));\n+            }\n+            return ret;\n+        }\n+\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try (RecordingStream rs = new RecordingStream()) {\n+            \/\/ setup recording\n+            AtomicLong firstSampleTimeMillis = new AtomicLong(0);\n+            AtomicLong lastSampleTimeMillis = new AtomicLong(0);\n+            LossEventCollection lossEvents = new LossEventCollection();\n+            rs.enable(EventNames.CPUTimeSample).with(\"throttle\", \"1ms\");\n+            rs.onEvent(EventNames.CPUTimeSample, e -> {\n+                if (firstSampleTimeMillis.get() == 0 && e.getThread(\"eventThread\").getJavaName().equals(BURST_THREAD_NAME)) {\n+                    firstSampleTimeMillis.set(e.getStartTime().toEpochMilli());\n+                }\n+                if (e.getThread(\"eventThread\").getJavaName().equals(BURST_THREAD_NAME)) {\n+                    lastSampleTimeMillis.set(e.getStartTime().toEpochMilli());\n+                }\n+            });\n+            rs.enable(EventNames.CPUTimeSamplesLost);\n+            rs.onEvent(EventNames.CPUTimeSamplesLost, e -> {\n+                if (e.getThread(\"eventThread\").getJavaName().equals(BURST_THREAD_NAME)) {\n+                    long eventTime = e.getStartTime().toEpochMilli();\n+                    long relativeTime = firstSampleTimeMillis.get() > 0 ? (eventTime - firstSampleTimeMillis.get()) : eventTime;\n+                    System.out.println(\"Lost samples: \" + e.getLong(\"lostSamples\") + \" at \" + relativeTime);\n+                    lossEvents.addEvent(new LossEvent(relativeTime, e.getLong(\"lostSamples\")));\n+                }\n+            });\n+            WHITE_BOX.cpuSamplerSetOutOfStackWalking(false);\n+            rs.startAsync();\n+            \/\/ this thread runs all along\n+            Thread burstThread = new Thread(() -> WHITE_BOX.busyWait(11000));\n+            burstThread.setName(BURST_THREAD_NAME);\n+            burstThread.start();\n+            \/\/ now we toggle out-of-stack-walking off, wait 1 second and then turn it on for 500ms a few times\n+            for (int i = 0; i < 5; i++) {\n+                boolean supported = WHITE_BOX.cpuSamplerSetOutOfStackWalking(false);\n+                if (!supported) {\n+                    System.out.println(\"Out-of-stack-walking not supported, skipping test\");\n+                    Asserts.assertFalse(true);\n+                    return;\n+                }\n+                Thread.sleep(700);\n+                long iterations = WHITE_BOX.cpuSamplerOutOfStackWalkingIterations();\n+                WHITE_BOX.cpuSamplerSetOutOfStackWalking(true);\n+                Thread.sleep(300);\n+                while (WHITE_BOX.cpuSamplerOutOfStackWalkingIterations() == iterations) {\n+                    Thread.sleep(50); \/\/ just to make sure the stack walking really ran\n+                }\n+            }\n+            rs.close();\n+            checkThatLossDecreased(lossEvents, lastSampleTimeMillis.get() - firstSampleTimeMillis.get());\n+        }\n+    }\n+\n+    static void checkThatLossDecreased(LossEventCollection lossEvents, long lastSampleTimeMillis) {\n+        List<LossEvent> intervalLosses = lossEvents.getEventsPerInterval(1000, lastSampleTimeMillis);\n+        for (LossEvent interval : intervalLosses) {\n+            System.out.println(\"Lost samples in interval \" + interval.relativeTimeMillis + \": \" + interval.lostSamples);\n+        }\n+        \/\/ check that there are at least 3 intervals\n+        Asserts.assertTrue(intervalLosses.size() > 2);\n+        \/\/ check that the second to last interval has far fewer lost samples than the first\n+        Asserts.assertTrue(intervalLosses.get(intervalLosses.size() - 2).lostSamples <\n+                           intervalLosses.get(0).lostSamples \/ 2);\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleQueueAutoSizes.java","additions":154,"deletions":0,"binary":false,"changes":154,"status":"added"},{"patch":"@@ -844,0 +844,7 @@\n+  public native void busyWait(int cpuTimeMs);\n+\n+  \/\/ returns true if supported, false if not\n+  public native boolean cpuSamplerSetOutOfStackWalking(boolean enable);\n+\n+  public native long cpuSamplerOutOfStackWalkingIterations();\n+\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"}]}