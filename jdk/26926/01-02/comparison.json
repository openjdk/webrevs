{"files":[{"patch":"@@ -185,1 +185,1 @@\n-      u4 new_capacity = capacity * factor > CPU_TIME_QUEUE_MAX_CAPACITY ? CPU_TIME_QUEUE_MAX_CAPACITY : capacity * factor;\n+      u4 new_capacity = MIN2(CPU_TIME_QUEUE_MAX_CAPACITY, capacity * factor);\n@@ -621,0 +621,1 @@\n+    queue.increment_lost_samples_due_to_queue_full();\n","filename":"src\/hotspot\/share\/jfr\/periodic\/sampling\/jfrCPUTimeThreadSampler.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2660,0 +2660,9 @@\n+WB_ENTRY(void, WB_BusyWait(JNIEnv* env, jobject wb, jint time))\n+  ThreadToNativeFromVM  ttn(thread);\n+  u8 start = os::current_thread_cpu_time();\n+  u8 target_duration = time * (u8)1000000;\n+  while (os::current_thread_cpu_time() - start < target_duration) {\n+    for (volatile int i = 0; i < 1000000; i++);\n+  }\n+WB_END\n+\n@@ -3013,0 +3022,1 @@\n+  {CC\"busyWait\", CC\"(I)V\",                            (void*)&WB_BusyWait},\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -0,0 +1,159 @@\n+\/*\n+ * Copyright (c) 2025 SAP SE. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.event.profiling;\n+\n+import java.time.Duration;\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.stream.Collectors;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordingStream;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.jfr.internal.JVM;\n+import jdk.test.lib.Asserts;\n+import jdk.test.lib.jfr.EventNames;\n+import jdk.test.whitebox.WhiteBox;\n+\n+\n+\/*\n+ * Tests the sample queues increase in size as needed, when loss is recorded.\n+ * @test\n+ * @requires vm.hasJFR & os.family == \"linux\"\n+ * @library \/test\/lib\n+ * @modules jdk.jfr\/jdk.jfr.internal\n+ * @build  jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI\n+ *                   -Xbatch -XX:StartFlightRecording:dumponexit=true jdk.jfr.event.profiling.TestCPUTimeSampleQueueAutoSizes\n+ *\/\n+public class TestCPUTimeSampleQueueAutoSizes {\n+\n+    private static final WhiteBox WHITE_BOX = WhiteBox.getWhiteBox();\n+\n+    private static final String BURST_THREAD_NAME = \"Burst-Thread-1\";\n+\n+    static volatile boolean alive = true;\n+\n+    record LossEvent(long relativeTimeMillis, long lostSamples) {}\n+\n+    \/** A data collection from the CPUTimeSampleLost events for the burst thread *\/\n+    static class LossEventCollection {\n+        private final List<LossEvent> events = new ArrayList<>();\n+\n+        public synchronized void addEvent(LossEvent event) {\n+            events.add(event);\n+        }\n+\n+        public synchronized List<LossEvent> getSortedEvents() {\n+            return events.stream()\n+                         .sorted(Comparator.comparingLong(e -> e.relativeTimeMillis))\n+                         .collect(Collectors.toList());\n+        }\n+\n+        public List<LossEvent> getEventsPerInterval(long widthMillis, long stopTimeMillis) {\n+            List<LossEvent> ret = new ArrayList<>();\n+            for (long start = 0; start < stopTimeMillis; start += widthMillis) {\n+                long actualStart = Math.min(start, stopTimeMillis - widthMillis);\n+                long lostSamples = events.stream()\n+                                          .filter(e -> e.relativeTimeMillis >= actualStart && e.relativeTimeMillis < actualStart + widthMillis)\n+                                          .mapToLong(e -> e.lostSamples)\n+                                          .sum();\n+                ret.add(new LossEvent(actualStart, lostSamples));\n+            }\n+            return ret;\n+        }\n+\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try (RecordingStream rs = new RecordingStream()) {\n+            \/\/ setup recording\n+            AtomicLong firstSampleTimeMillis = new AtomicLong(0);\n+            AtomicLong lastSampleTimeMillis = new AtomicLong(0);\n+            LossEventCollection lossEvents = new LossEventCollection();\n+            rs.enable(EventNames.CPUTimeSample).with(\"throttle\", \"1ms\");\n+            rs.onEvent(EventNames.CPUTimeSample, e -> {\n+                if (firstSampleTimeMillis.get() == 0 && e.getThread(\"eventThread\").getJavaName().equals(BURST_THREAD_NAME)) {\n+                    firstSampleTimeMillis.set(e.getStartTime().toEpochMilli());\n+                }\n+                if (e.getThread(\"eventThread\").getJavaName().equals(BURST_THREAD_NAME)) {\n+                    lastSampleTimeMillis.set(e.getStartTime().toEpochMilli());\n+                }\n+            });\n+            rs.enable(EventNames.CPUTimeSamplesLost);\n+            rs.onEvent(EventNames.CPUTimeSamplesLost, e -> {\n+                if (e.getThread(\"eventThread\").getJavaName().equals(BURST_THREAD_NAME)) {\n+                    long eventTime = e.getStartTime().toEpochMilli();\n+                    long relativeTime = firstSampleTimeMillis.get() > 0 ? (eventTime - firstSampleTimeMillis.get()) : eventTime;\n+                    System.out.println(\"Lost samples: \" + e.getLong(\"lostSamples\") + \" at \" + relativeTime);\n+                    lossEvents.addEvent(new LossEvent(relativeTime, e.getLong(\"lostSamples\")));\n+                }\n+            });\n+            rs.startAsync();\n+            \/\/ launch first burst\n+            Thread burstThread = new Thread(() -> runInBursts(10, 1000));\n+            burstThread.setName(BURST_THREAD_NAME);\n+            burstThread.start();\n+            \/\/ keep the out-of-start-sampler busy\n+            runMiscThreads(11000);\n+            burstThread.join();\n+            rs.close();\n+            checkThatLossDecreased(lossEvents, lastSampleTimeMillis.get() - firstSampleTimeMillis.get());\n+        }\n+    }\n+\n+    static void checkThatLossDecreased(LossEventCollection lossEvents, long lastSampleTimeMillis) {\n+        List<LossEvent> intervalLosses = lossEvents.getEventsPerInterval(1000, lastSampleTimeMillis);\n+        for (LossEvent interval : intervalLosses) {\n+            System.out.println(\"Lost samples in interval \" + interval.relativeTimeMillis + \": \" + interval.lostSamples);\n+        }\n+        \/\/ check that there are at least 3 intervals\n+        Asserts.assertTrue(intervalLosses.size() > 2);\n+        \/\/ check that the second to last interval has fewer lost samples than the first\n+        Asserts.assertTrue(intervalLosses.get(intervalLosses.size() - 2).lostSamples <\n+                           intervalLosses.get(0).lostSamples);\n+    }\n+\n+\n+\n+    static void runMiscThreads(int timeMs) throws Exception {\n+        Thread[] threads = new Thread[Runtime.getRuntime().availableProcessors() - 1];\n+        for (int i = 0; i < threads.length; i++) {\n+            threads[i] = new Thread(() -> WHITE_BOX.busyWait(timeMs));\n+            threads[i].start();\n+        }\n+        for (Thread thread : threads) {\n+            thread.join();\n+        }\n+    }\n+\n+    static void runInBursts(int count, int burstMs) {\n+        for (int i = 0; i < count; i++) {\n+            WHITE_BOX.busyWait(burstMs);\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/event\/profiling\/TestCPUTimeSampleQueueAutoSizes.java","additions":159,"deletions":0,"binary":false,"changes":159,"status":"added"},{"patch":"@@ -844,0 +844,2 @@\n+  public native void busyWait(int cpuTimeMs);\n+\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}