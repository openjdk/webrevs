{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -134,0 +134,1 @@\n+            final boolean resourceUnlockedSuccess;\n@@ -137,1 +138,1 @@\n-                    for (UpdateResourceAction extraAction: extraActions) {\n+                    for (UpdateResourceAction extraAction : extraActions) {\n@@ -142,2 +143,4 @@\n-                if (resourceLock != 0) {\n-                    unlockResource(resourceLock);\n+                if (resourceLock == 0) {\n+                    resourceUnlockedSuccess = true;\n+                } else {\n+                    resourceUnlockedSuccess = unlockResource(resourceLock);\n@@ -146,0 +149,5 @@\n+\n+            if (!resourceUnlockedSuccess) {\n+                throw new RuntimeException(MessageFormat.format(I18N.getString(\n+                        \"error.unlock-resource\"), target));\n+            }\n@@ -253,1 +261,1 @@\n-    private static native void unlockResource(long resourceLock);\n+    private static native boolean unlockResource(long resourceLock);\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/ExecutableRebrander.java","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+error.unlock-resource=Failed to unlock: {0}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+error.unlock-resource=Failed to unlock: {0}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_de.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+error.unlock-resource=Failed to unlock: {0}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_ja.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -56,0 +56,1 @@\n+error.unlock-resource=Failed to unlock: {0}\n","filename":"src\/jdk.jpackage\/windows\/classes\/jdk\/jpackage\/internal\/resources\/WinResources_zh_CN.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,1 @@\n+    notifyUnlockFailed();\n@@ -48,0 +49,1 @@\n+    notifyUnlockFailed();\n@@ -53,0 +55,3 @@\n+        if (unlockFailed) {\n+            *unlockFailed = true;\n+        }\n@@ -55,0 +60,2 @@\n+    } else if (unlockFailed) {\n+        *unlockFailed = false;\n","filename":"src\/jdk.jpackage\/windows\/native\/libjpackage\/ResourceEditor.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,1 @@\n-        void discard(bool v = true) {\n+        FileLock& discard(bool v = true) {\n@@ -48,0 +48,6 @@\n+            return *this;\n+        }\n+\n+        FileLock& notifyUnlockFailed(bool* v = 0) {\n+            unlockFailed = v;\n+            return *this;\n@@ -62,0 +68,1 @@\n+        bool* unlockFailed;\n","filename":"src\/jdk.jpackage\/windows\/native\/libjpackage\/ResourceEditor.h","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +59,1 @@\n-     * Signature: (J;)V\n+     * Signature: (J;)Z\n@@ -61,1 +61,1 @@\n-    JNIEXPORT void JNICALL\n+    JNIEXPORT jboolean JNICALL\n@@ -65,0 +65,1 @@\n+        bool unlockFailed = false;\n@@ -67,1 +68,3 @@\n-                reinterpret_cast<HANDLE>(jResourceLock)).ownHandle(true);\n+                reinterpret_cast<HANDLE>(jResourceLock))\n+                        .ownHandle(true)\n+                        .notifyUnlockFailed(&unlockFailed);\n@@ -69,0 +72,2 @@\n+\n+        return unlockFailed ? JNI_FALSE : JNI_TRUE;\n","filename":"src\/jdk.jpackage\/windows\/native\/libjpackage\/jpackage.cpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}