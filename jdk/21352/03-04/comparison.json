{"files":[{"patch":"@@ -1522,3 +1522,1 @@\n-  void evpsllw(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n-    Assembler::evpsllw(dst, mask, src, shift, merge, vector_len);\n-  }\n+  using Assembler::evpsllw;\n@@ -1569,3 +1567,1 @@\n-  void evpsraw(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n-    Assembler::evpsraw(dst, mask, src, shift, merge, vector_len);\n-  }\n+  using Assembler::evpsraw;\n@@ -1579,3 +1575,1 @@\n-  void evpsrad(XMMRegister dst, KRegister mask, XMMRegister src, int shift, bool merge, int vector_len) {\n-    Assembler::evpsrad(dst, mask, src, shift, merge, vector_len);\n-  }\n+  using Assembler::evpsrad;\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -85,4 +85,2 @@\n-    if (VM_Version::supports_evex()) {\n-      StubRoutines::_sha3_implCompress     = generate_sha3_implCompress(false,   \"sha3_implCompress\");\n-      StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress(true,    \"sha3_implCompressMB\");\n-    }\n+    StubRoutines::_sha3_implCompress   = generate_sha3_implCompress(false,\"sha3_implCompress\");\n+    StubRoutines::_sha3_implCompressMB = generate_sha3_implCompress(true, \"sha3_implCompressMB\");\n@@ -140,10 +138,10 @@\n-  __ mov64(rax,1);\n-  __ kmovbl(k1, rax);\n-  __ addl(rax,2);\n-  __ kmovbl(k2, rax);\n-  __ addl(rax, 4);\n-  __ kmovbl(k3, rax);\n-  __ addl(rax, 8);\n-  __ kmovbl(k4, rax);\n-  __ addl(rax, 16);\n-  __ kmovbl(k5, rax);\n+  __ mov64(rax, 0x1F);\n+  __ kmovwl(k5, rax);\n+  __ shrl(rax, 1);\n+  __ kmovwl(k4, rax);\n+  __ shrl(rax, 1);\n+  __ kmovwl(k3, rax);\n+  __ shrl(rax, 1);\n+  __ kmovwl(k2, rax);\n+  __ shrl(rax, 1);\n+  __ kmovwl(k1, rax);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_sha3.cpp","additions":12,"deletions":14,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -1316,1 +1316,2 @@\n-  if (UseAVX > 2) {\n+#ifdef _LP64\n+  if (supports_evex() && supports_avx512bw()) {\n@@ -1320,4 +1321,4 @@\n-  } else if (UseSHA3Intrinsics) {\n-      if (!FLAG_IS_DEFAULT(UseSHA3Intrinsics)) {\n-          warning(\"SHA3 intrinsics require AVX512 instructions\");\n-      }\n+  } else\n+#endif\n+   if (UseSHA3Intrinsics) {\n+      warning(\"Intrinsics for SHA3-224, SHA3-256, SHA3-384 and SHA3-512 crypto hash functions not available on this CPU.\");\n","filename":"src\/hotspot\/cpu\/x86\/vm_version_x86.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -35,0 +35,1 @@\n+import jdk.internal.util.Preconditions;\n@@ -102,0 +103,1 @@\n+        Preconditions.checkIndex(ofs + blockSize - 1, b.length, Preconditions.AIOOBE_FORMATTER);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SHA3.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,2 +107,4 @@\n-            \/\/ sha3 is only implemented on aarch64 for now\n-            = new CPUSpecificPredicate(\"aarch64.*\", new String[] {\"sha3\"          }, null);\n+            \/\/ sha3 is only implemented on aarch64 and avx512 for now\n+            = new OrPredicate(new CPUSpecificPredicate(\"aarch64.*\", new String[] {\"sha3\"               }, null),\n+              new OrPredicate(new CPUSpecificPredicate(\"amd64.*\",   new String[] {\"avx512f\", \"avx512bw\"}, null),\n+                              new CPUSpecificPredicate(\"x86_64\",    new String[] {\"avx512f\", \"avx512bw\"}, null)));\n","filename":"test\/hotspot\/jtreg\/compiler\/testlibrary\/sha\/predicate\/IntrinsicPredicates.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}