{"files":[{"patch":"@@ -33,0 +33,1 @@\n+import java.util.stream.Stream;\n@@ -39,1 +40,0 @@\n-import static org.junit.jupiter.params.provider.Arguments.arguments;\n@@ -42,0 +42,171 @@\n+    \/* blank padding, right adjusted, optional sign *\/\n+    static Stream<? extends Arguments> blankPaddingRightAdjustedOptionalSign() {\n+        var tenMillionBlanks = \" \".repeat(10_000_000);\n+        return Stream.of(\n+            Arguments.of(\"12\", \"%1d\", 12),\n+            Arguments.of(\"12\", \"%2d\", 12),\n+            Arguments.of(\" 12\", \"%3d\", 12),\n+            Arguments.of(\"  12\", \"%4d\", 12),\n+            Arguments.of(\"   12\", \"%5d\", 12),\n+            Arguments.of(\"        12\", \"%10d\", 12),\n+            Arguments.of(tenMillionBlanks + \"12\", \"%10000002d\", 12),\n+\n+            Arguments.of(\"-12\", \"%1d\", -12),\n+            Arguments.of(\"-12\", \"%2d\", -12),\n+            Arguments.of(\"-12\", \"%3d\", -12),\n+            Arguments.of(\" -12\", \"%4d\", -12),\n+            Arguments.of(\"  -12\", \"%5d\", -12),\n+            Arguments.of(\"       -12\", \"%10d\", -12),\n+            Arguments.of(tenMillionBlanks + \"-12\", \"%10000003d\", -12),\n+\n+            Arguments.of(\"1.2\", \"%1.1f\", 1.2),\n+            Arguments.of(\"1.2\", \"%2.1f\", 1.2),\n+            Arguments.of(\"1.2\", \"%3.1f\", 1.2),\n+            Arguments.of(\" 1.2\", \"%4.1f\", 1.2),\n+            Arguments.of(\"  1.2\", \"%5.1f\", 1.2),\n+            Arguments.of(\"       1.2\", \"%10.1f\", 1.2),\n+            Arguments.of(tenMillionBlanks + \"1.2\", \"%10000003.1f\", 1.2),\n+\n+            Arguments.of(\"-1.2\", \"%1.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%2.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%3.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%4.1f\", -1.2),\n+            Arguments.of(\" -1.2\", \"%5.1f\", -1.2),\n+            Arguments.of(\"      -1.2\", \"%10.1f\", -1.2),\n+            Arguments.of(tenMillionBlanks + \"-1.2\", \"%10000004.1f\", -1.2));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void blankPaddingRightAdjustedOptionalSign(String expected, String format, Object value) {\n+        assertEquals(expected, String.format(Locale.US, format, value));\n+    }\n+\n+    \/* blank padding, right adjusted, mandatory sign *\/\n+    static Stream<? extends Arguments> blankPaddingRightAdjustedMandatorySign() {\n+        var tenMillionBlanks = \" \".repeat(10_000_000);\n+        return Stream.of(\n+            Arguments.of(\"+12\", \"%+1d\", 12),\n+            Arguments.of(\"+12\", \"%+2d\", 12),\n+            Arguments.of(\"+12\", \"%+3d\", 12),\n+            Arguments.of(\" +12\", \"%+4d\", 12),\n+            Arguments.of(\"  +12\", \"%+5d\", 12),\n+            Arguments.of(\"       +12\", \"%+10d\", 12),\n+            Arguments.of(tenMillionBlanks + \"+12\", \"%+10000003d\", 12),\n+\n+            Arguments.of(\"-12\", \"%+1d\", -12),\n+            Arguments.of(\"-12\", \"%+2d\", -12),\n+            Arguments.of(\"-12\", \"%+3d\", -12),\n+            Arguments.of(\" -12\", \"%+4d\", -12),\n+            Arguments.of(\"  -12\", \"%+5d\", -12),\n+            Arguments.of(\"       -12\", \"%+10d\", -12),\n+            Arguments.of(tenMillionBlanks + \"-12\", \"%+10000003d\", -12),\n+\n+            Arguments.of(\"+1.2\", \"%+1.1f\", 1.2),\n+            Arguments.of(\"+1.2\", \"%+2.1f\", 1.2),\n+            Arguments.of(\"+1.2\", \"%+3.1f\", 1.2),\n+            Arguments.of(\"+1.2\", \"%+4.1f\", 1.2),\n+            Arguments.of(\" +1.2\", \"%+5.1f\", 1.2),\n+            Arguments.of(\"      +1.2\", \"%+10.1f\", 1.2),\n+            Arguments.of(tenMillionBlanks + \"+1.2\", \"%+10000004.1f\", 1.2),\n+\n+            Arguments.of(\"-1.2\", \"%+1.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%+2.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%+3.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%+4.1f\", -1.2),\n+            Arguments.of(\" -1.2\", \"%+5.1f\", -1.2),\n+            Arguments.of(\"      -1.2\", \"%+10.1f\", -1.2),\n+            Arguments.of(tenMillionBlanks + \"-1.2\", \"%+10000004.1f\", -1.2));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void blankPaddingRightAdjustedMandatorySign(String expected, String format, Object value) {\n+        assertEquals(expected, String.format(Locale.US, format, value));\n+    }\n+\n+    \/* blank padding, right adjusted, mandatory blank sign *\/\n+    static Stream<? extends Arguments> blankPaddingRightAdjustedMandatoryBlank() {\n+        var tenMillionBlanks = \" \".repeat(10_000_000);\n+        return Stream.of(\n+            Arguments.of(\" 12\", \"% 1d\", 12),\n+            Arguments.of(\" 12\", \"% 2d\", 12),\n+            Arguments.of(\" 12\", \"% 3d\", 12),\n+            Arguments.of(\"  12\", \"% 4d\", 12),\n+            Arguments.of(\"   12\", \"% 5d\", 12),\n+            Arguments.of(\"        12\", \"% 10d\", 12),\n+            Arguments.of(tenMillionBlanks + \"12\", \"% 10000002d\", 12),\n+\n+            Arguments.of(\"-12\", \"% 1d\", -12),\n+            Arguments.of(\"-12\", \"% 2d\", -12),\n+            Arguments.of(\"-12\", \"% 3d\", -12),\n+            Arguments.of(\" -12\", \"% 4d\", -12),\n+            Arguments.of(\"  -12\", \"% 5d\", -12),\n+            Arguments.of(\"       -12\", \"% 10d\", -12),\n+            Arguments.of(tenMillionBlanks + \"-12\", \"% 10000003d\", -12),\n+\n+            Arguments.of(\" 1.2\", \"% 1.1f\", 1.2),\n+            Arguments.of(\" 1.2\", \"% 2.1f\", 1.2),\n+            Arguments.of(\" 1.2\", \"% 3.1f\", 1.2),\n+            Arguments.of(\" 1.2\", \"% 4.1f\", 1.2),\n+            Arguments.of(\"  1.2\", \"% 5.1f\", 1.2),\n+            Arguments.of(\"       1.2\", \"% 10.1f\", 1.2),\n+            Arguments.of(tenMillionBlanks + \"1.2\", \"% 10000003.1f\", 1.2),\n+\n+            Arguments.of(\"-1.2\", \"% 1.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"% 2.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"% 3.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"% 4.1f\", -1.2),\n+            Arguments.of(\" -1.2\", \"% 5.1f\", -1.2),\n+            Arguments.of(\"      -1.2\", \"% 10.1f\", -1.2),\n+            Arguments.of(tenMillionBlanks + \"-1.2\", \"% 10000004.1f\", -1.2));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void blankPaddingRightAdjustedMandatoryBlank(String expected, String format, Object value) {\n+        assertEquals(expected, String.format(Locale.US, format, value));\n+    }\n+\n+    \/* blank padding, left adjusted, optional sign *\/\n+    static Stream<? extends Arguments> blankPaddingLeftAdjustedOptionalSign() {\n+        var tenMillionBlanks = \" \".repeat(10_000_000);\n+        return Stream.of(\n+            Arguments.of(\"12\", \"%-1d\", 12),\n+            Arguments.of(\"12\", \"%-2d\", 12),\n+            Arguments.of(\"12 \", \"%-3d\", 12),\n+            Arguments.of(\"12  \", \"%-4d\", 12),\n+            Arguments.of(\"12   \", \"%-5d\", 12),\n+            Arguments.of(\"12        \", \"%-10d\", 12),\n+            Arguments.of(\"12\" + tenMillionBlanks, \"%-10000002d\", 12),\n+\n+            Arguments.of(\"-12\", \"%-1d\", -12),\n+            Arguments.of(\"-12\", \"%-2d\", -12),\n+            Arguments.of(\"-12\", \"%-3d\", -12),\n+            Arguments.of(\"-12 \", \"%-4d\", -12),\n+            Arguments.of(\"-12  \", \"%-5d\", -12),\n+            Arguments.of(\"-12       \", \"%-10d\", -12),\n+            Arguments.of(\"-12\" + tenMillionBlanks, \"%-10000003d\", -12),\n+\n+            Arguments.of(\"1.2\", \"%-1.1f\", 1.2),\n+            Arguments.of(\"1.2\", \"%-2.1f\", 1.2),\n+            Arguments.of(\"1.2\", \"%-3.1f\", 1.2),\n+            Arguments.of(\"1.2 \", \"%-4.1f\", 1.2),\n+            Arguments.of(\"1.2  \", \"%-5.1f\", 1.2),\n+            Arguments.of(\"1.2       \", \"%-10.1f\", 1.2),\n+            Arguments.of(\"1.2\" + tenMillionBlanks, \"%-10000003.1f\", 1.2),\n+\n+            Arguments.of(\"-1.2\", \"%-1.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%-2.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%-3.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%-4.1f\", -1.2),\n+            Arguments.of(\"-1.2 \", \"%-5.1f\", -1.2),\n+            Arguments.of(\"-1.2      \", \"%-10.1f\", -1.2),\n+            Arguments.of(\"-1.2\" + tenMillionBlanks, \"%-10000004.1f\", -1.2));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void blankPaddingLeftAdjustedOptionalSign(String expected, String format, Object value) {\n+        assertEquals(expected, String.format(Locale.US, format, value));\n+    }\n@@ -43,303 +214,35 @@\n-    private static final String tenMillionZeros = \"0\".repeat(10_000_000);\n-    private static final String tenMillionBlanks = \" \".repeat(10_000_000);\n-\n-    static Arguments[] padding() {\n-        return new Arguments[] {\n-                \/* blank padding, right adjusted, optional plus sign *\/\n-                arguments(\"12\", \"%1d\", 12),\n-                arguments(\"12\", \"%2d\", 12),\n-                arguments(\" 12\", \"%3d\", 12),\n-                arguments(\"  12\", \"%4d\", 12),\n-                arguments(\"   12\", \"%5d\", 12),\n-                arguments(\"        12\", \"%10d\", 12),\n-                arguments(tenMillionBlanks + \"12\", \"%10000002d\", 12),\n-\n-                arguments(\"-12\", \"%1d\", -12),\n-                arguments(\"-12\", \"%2d\", -12),\n-                arguments(\"-12\", \"%3d\", -12),\n-                arguments(\" -12\", \"%4d\", -12),\n-                arguments(\"  -12\", \"%5d\", -12),\n-                arguments(\"       -12\", \"%10d\", -12),\n-                arguments(tenMillionBlanks + \"-12\", \"%10000003d\", -12),\n-\n-                arguments(\"1.2\", \"%1.1f\", 1.2),\n-                arguments(\"1.2\", \"%2.1f\", 1.2),\n-                arguments(\"1.2\", \"%3.1f\", 1.2),\n-                arguments(\" 1.2\", \"%4.1f\", 1.2),\n-                arguments(\"  1.2\", \"%5.1f\", 1.2),\n-                arguments(\"       1.2\", \"%10.1f\", 1.2),\n-                arguments(tenMillionBlanks + \"1.2\", \"%10000003.1f\", 1.2),\n-\n-                arguments(\"-1.2\", \"%1.1f\", -1.2),\n-                arguments(\"-1.2\", \"%2.1f\", -1.2),\n-                arguments(\"-1.2\", \"%3.1f\", -1.2),\n-                arguments(\"-1.2\", \"%4.1f\", -1.2),\n-                arguments(\" -1.2\", \"%5.1f\", -1.2),\n-                arguments(\"      -1.2\", \"%10.1f\", -1.2),\n-                arguments(tenMillionBlanks + \"-1.2\", \"%10000004.1f\", -1.2),\n-\n-                \/* blank padding, right adjusted, mandatory plus sign *\/\n-                arguments(\"+12\", \"%+1d\", 12),\n-                arguments(\"+12\", \"%+2d\", 12),\n-                arguments(\"+12\", \"%+3d\", 12),\n-                arguments(\" +12\", \"%+4d\", 12),\n-                arguments(\"  +12\", \"%+5d\", 12),\n-                arguments(\"       +12\", \"%+10d\", 12),\n-                arguments(tenMillionBlanks + \"+12\", \"%+10000003d\", 12),\n-\n-                arguments(\"-12\", \"%+1d\", -12),\n-                arguments(\"-12\", \"%+2d\", -12),\n-                arguments(\"-12\", \"%+3d\", -12),\n-                arguments(\" -12\", \"%+4d\", -12),\n-                arguments(\"  -12\", \"%+5d\", -12),\n-                arguments(\"       -12\", \"%+10d\", -12),\n-                arguments(tenMillionBlanks + \"-12\", \"%+10000003d\", -12),\n-\n-                arguments(\"+1.2\", \"%+1.1f\", 1.2),\n-                arguments(\"+1.2\", \"%+2.1f\", 1.2),\n-                arguments(\"+1.2\", \"%+3.1f\", 1.2),\n-                arguments(\"+1.2\", \"%+4.1f\", 1.2),\n-                arguments(\" +1.2\", \"%+5.1f\", 1.2),\n-                arguments(\"      +1.2\", \"%+10.1f\", 1.2),\n-                arguments(tenMillionBlanks + \"+1.2\", \"%+10000004.1f\", 1.2),\n-\n-                arguments(\"-1.2\", \"%+1.1f\", -1.2),\n-                arguments(\"-1.2\", \"%+2.1f\", -1.2),\n-                arguments(\"-1.2\", \"%+3.1f\", -1.2),\n-                arguments(\"-1.2\", \"%+4.1f\", -1.2),\n-                arguments(\" -1.2\", \"%+5.1f\", -1.2),\n-                arguments(\"      -1.2\", \"%+10.1f\", -1.2),\n-                arguments(tenMillionBlanks + \"-1.2\", \"%+10000004.1f\", -1.2),\n-\n-                \/* blank padding, right adjusted, mandatory blank sign *\/\n-                arguments(\" 12\", \"% 1d\", 12),\n-                arguments(\" 12\", \"% 2d\", 12),\n-                arguments(\" 12\", \"% 3d\", 12),\n-                arguments(\"  12\", \"% 4d\", 12),\n-                arguments(\"   12\", \"% 5d\", 12),\n-                arguments(\"        12\", \"% 10d\", 12),\n-                arguments(tenMillionBlanks + \"12\", \"% 10000002d\", 12),\n-\n-                arguments(\"-12\", \"% 1d\", -12),\n-                arguments(\"-12\", \"% 2d\", -12),\n-                arguments(\"-12\", \"% 3d\", -12),\n-                arguments(\" -12\", \"% 4d\", -12),\n-                arguments(\"  -12\", \"% 5d\", -12),\n-                arguments(\"       -12\", \"% 10d\", -12),\n-                arguments(tenMillionBlanks + \"-12\", \"% 10000003d\", -12),\n-\n-                arguments(\" 1.2\", \"% 1.1f\", 1.2),\n-                arguments(\" 1.2\", \"% 2.1f\", 1.2),\n-                arguments(\" 1.2\", \"% 3.1f\", 1.2),\n-                arguments(\" 1.2\", \"% 4.1f\", 1.2),\n-                arguments(\"  1.2\", \"% 5.1f\", 1.2),\n-                arguments(\"       1.2\", \"% 10.1f\", 1.2),\n-                arguments(tenMillionBlanks + \"1.2\", \"% 10000003.1f\", 1.2),\n-\n-                arguments(\"-1.2\", \"% 1.1f\", -1.2),\n-                arguments(\"-1.2\", \"% 2.1f\", -1.2),\n-                arguments(\"-1.2\", \"% 3.1f\", -1.2),\n-                arguments(\"-1.2\", \"% 4.1f\", -1.2),\n-                arguments(\" -1.2\", \"% 5.1f\", -1.2),\n-                arguments(\"      -1.2\", \"% 10.1f\", -1.2),\n-                arguments(tenMillionBlanks + \"-1.2\", \"% 10000004.1f\", -1.2),\n-\n-                \/* blank padding, left adjusted, optional sign *\/\n-                arguments(\"12\", \"%-1d\", 12),\n-                arguments(\"12\", \"%-2d\", 12),\n-                arguments(\"12 \", \"%-3d\", 12),\n-                arguments(\"12  \", \"%-4d\", 12),\n-                arguments(\"12   \", \"%-5d\", 12),\n-                arguments(\"12        \", \"%-10d\", 12),\n-                arguments(\"12\" + tenMillionBlanks, \"%-10000002d\", 12),\n-\n-                arguments(\"-12\", \"%-1d\", -12),\n-                arguments(\"-12\", \"%-2d\", -12),\n-                arguments(\"-12\", \"%-3d\", -12),\n-                arguments(\"-12 \", \"%-4d\", -12),\n-                arguments(\"-12  \", \"%-5d\", -12),\n-                arguments(\"-12       \", \"%-10d\", -12),\n-                arguments(\"-12\" + tenMillionBlanks, \"%-10000003d\", -12),\n-\n-                arguments(\"1.2\", \"%-1.1f\", 1.2),\n-                arguments(\"1.2\", \"%-2.1f\", 1.2),\n-                arguments(\"1.2\", \"%-3.1f\", 1.2),\n-                arguments(\"1.2 \", \"%-4.1f\", 1.2),\n-                arguments(\"1.2  \", \"%-5.1f\", 1.2),\n-                arguments(\"1.2       \", \"%-10.1f\", 1.2),\n-                arguments(\"1.2\" + tenMillionBlanks, \"%-10000003.1f\", 1.2),\n-\n-                arguments(\"-1.2\", \"%-1.1f\", -1.2),\n-                arguments(\"-1.2\", \"%-2.1f\", -1.2),\n-                arguments(\"-1.2\", \"%-3.1f\", -1.2),\n-                arguments(\"-1.2\", \"%-4.1f\", -1.2),\n-                arguments(\"-1.2 \", \"%-5.1f\", -1.2),\n-                arguments(\"-1.2      \", \"%-10.1f\", -1.2),\n-                arguments(\"-1.2\" + tenMillionBlanks, \"%-10000004.1f\", -1.2),\n-\n-                \/* blank padding, left adjusted, mandatory plus sign *\/\n-                arguments(\"+12\", \"%-+1d\", 12),\n-                arguments(\"+12\", \"%-+2d\", 12),\n-                arguments(\"+12\", \"%-+3d\", 12),\n-                arguments(\"+12 \", \"%-+4d\", 12),\n-                arguments(\"+12  \", \"%-+5d\", 12),\n-                arguments(\"+12       \", \"%-+10d\", 12),\n-                arguments(\"+12\" + tenMillionBlanks, \"%-+10000003d\", 12),\n-\n-                arguments(\"-12\", \"%-+1d\", -12),\n-                arguments(\"-12\", \"%-+2d\", -12),\n-                arguments(\"-12\", \"%-+3d\", -12),\n-                arguments(\"-12 \", \"%-+4d\", -12),\n-                arguments(\"-12  \", \"%-+5d\", -12),\n-                arguments(\"-12       \", \"%-+10d\", -12),\n-                arguments(\"-12\" + tenMillionBlanks, \"%-+10000003d\", -12),\n-\n-                arguments(\"+1.2\", \"%-+1.1f\", 1.2),\n-                arguments(\"+1.2\", \"%-+2.1f\", 1.2),\n-                arguments(\"+1.2\", \"%-+3.1f\", 1.2),\n-                arguments(\"+1.2\", \"%-+4.1f\", 1.2),\n-                arguments(\"+1.2 \", \"%-+5.1f\", 1.2),\n-                arguments(\"+1.2      \", \"%-+10.1f\", 1.2),\n-                arguments(\"+1.2\" + tenMillionBlanks, \"%-+10000004.1f\", 1.2),\n-\n-                arguments(\"-1.2\", \"%-+1.1f\", -1.2),\n-                arguments(\"-1.2\", \"%-+2.1f\", -1.2),\n-                arguments(\"-1.2\", \"%-+3.1f\", -1.2),\n-                arguments(\"-1.2\", \"%-+4.1f\", -1.2),\n-                arguments(\"-1.2 \", \"%-+5.1f\", -1.2),\n-                arguments(\"-1.2      \", \"%-+10.1f\", -1.2),\n-                arguments(\"-1.2\" + tenMillionBlanks, \"%-+10000004.1f\", -1.2),\n-\n-                \/* blank padding, left adjusted, mandatory blank sign *\/\n-                arguments(\" 12\", \"%- 1d\", 12),\n-                arguments(\" 12\", \"%- 2d\", 12),\n-                arguments(\" 12\", \"%- 3d\", 12),\n-                arguments(\" 12 \", \"%- 4d\", 12),\n-                arguments(\" 12  \", \"%- 5d\", 12),\n-                arguments(\" 12       \", \"%- 10d\", 12),\n-                arguments(\" 12\" + tenMillionBlanks, \"%- 10000003d\", 12),\n-\n-                arguments(\"-12\", \"%- 1d\", -12),\n-                arguments(\"-12\", \"%- 2d\", -12),\n-                arguments(\"-12\", \"%- 3d\", -12),\n-                arguments(\"-12 \", \"%- 4d\", -12),\n-                arguments(\"-12  \", \"%- 5d\", -12),\n-                arguments(\"-12       \", \"%- 10d\", -12),\n-                arguments(\"-12\" + tenMillionBlanks, \"%- 10000003d\", -12),\n-\n-                arguments(\" 1.2\", \"%- 1.1f\", 1.2),\n-                arguments(\" 1.2\", \"%- 2.1f\", 1.2),\n-                arguments(\" 1.2\", \"%- 3.1f\", 1.2),\n-                arguments(\" 1.2\", \"%- 4.1f\", 1.2),\n-                arguments(\" 1.2 \", \"%- 5.1f\", 1.2),\n-                arguments(\" 1.2      \", \"%- 10.1f\", 1.2),\n-                arguments(\" 1.2\" + tenMillionBlanks, \"%- 10000004.1f\", 1.2),\n-\n-                arguments(\"-1.2\", \"%- 1.1f\", -1.2),\n-                arguments(\"-1.2\", \"%- 2.1f\", -1.2),\n-                arguments(\"-1.2\", \"%- 3.1f\", -1.2),\n-                arguments(\"-1.2\", \"%- 4.1f\", -1.2),\n-                arguments(\"-1.2 \", \"%- 5.1f\", -1.2),\n-                arguments(\"-1.2      \", \"%- 10.1f\", -1.2),\n-                arguments(\"-1.2\" + tenMillionBlanks, \"%- 10000004.1f\", -1.2),\n-\n-                \/* zero padding, right adjusted, optional sign *\/\n-                arguments(\"12\", \"%01d\", 12),\n-                arguments(\"12\", \"%02d\", 12),\n-                arguments(\"012\", \"%03d\", 12),\n-                arguments(\"0012\", \"%04d\", 12),\n-                arguments(\"00012\", \"%05d\", 12),\n-                arguments(\"0000000012\", \"%010d\", 12),\n-                arguments(tenMillionZeros + \"12\", \"%010000002d\", 12),\n-\n-                arguments(\"-12\", \"%01d\", -12),\n-                arguments(\"-12\", \"%02d\", -12),\n-                arguments(\"-12\", \"%03d\", -12),\n-                arguments(\"-012\", \"%04d\", -12),\n-                arguments(\"-0012\", \"%05d\", -12),\n-                arguments(\"-000000012\", \"%010d\", -12),\n-                arguments(\"-\" + tenMillionZeros + \"12\", \"%010000003d\", -12),\n-\n-                arguments(\"1.2\", \"%01.1f\", 1.2),\n-                arguments(\"1.2\", \"%02.1f\", 1.2),\n-                arguments(\"1.2\", \"%03.1f\", 1.2),\n-                arguments(\"01.2\", \"%04.1f\", 1.2),\n-                arguments(\"001.2\", \"%05.1f\", 1.2),\n-                arguments(\"00000001.2\", \"%010.1f\", 1.2),\n-                arguments(tenMillionZeros + \"1.2\", \"%010000003.1f\", 1.2),\n-\n-                arguments(\"-1.2\", \"%01.1f\", -1.2),\n-                arguments(\"-1.2\", \"%02.1f\", -1.2),\n-                arguments(\"-1.2\", \"%03.1f\", -1.2),\n-                arguments(\"-1.2\", \"%04.1f\", -1.2),\n-                arguments(\"-01.2\", \"%05.1f\", -1.2),\n-                arguments(\"-0000001.2\", \"%010.1f\", -1.2),\n-                arguments(\"-\" + tenMillionZeros + \"1.2\", \"%010000004.1f\", -1.2),\n-\n-                \/* zero padding, right adjusted, mandatory plus sign *\/\n-                arguments(\"+12\", \"%+01d\", 12),\n-                arguments(\"+12\", \"%+02d\", 12),\n-                arguments(\"+12\", \"%+03d\", 12),\n-                arguments(\"+012\", \"%+04d\", 12),\n-                arguments(\"+0012\", \"%+05d\", 12),\n-                arguments(\"+000000012\", \"%+010d\", 12),\n-                arguments(\"+\" + tenMillionZeros + \"12\", \"%+010000003d\", 12),\n-\n-                arguments(\"-12\", \"%+01d\", -12),\n-                arguments(\"-12\", \"%+02d\", -12),\n-                arguments(\"-12\", \"%+03d\", -12),\n-                arguments(\"-012\", \"%+04d\", -12),\n-                arguments(\"-0012\", \"%+05d\", -12),\n-                arguments(\"-000000012\", \"%+010d\", -12),\n-                arguments(\"-\" + tenMillionZeros + \"12\", \"%+010000003d\", -12),\n-\n-                arguments(\"+1.2\", \"%+01.1f\", 1.2),\n-                arguments(\"+1.2\", \"%+02.1f\", 1.2),\n-                arguments(\"+1.2\", \"%+03.1f\", 1.2),\n-                arguments(\"+1.2\", \"%+04.1f\", 1.2),\n-                arguments(\"+01.2\", \"%+05.1f\", 1.2),\n-                arguments(\"+0000001.2\", \"%+010.1f\", 1.2),\n-                arguments(\"+\" + tenMillionZeros + \"1.2\", \"%+010000004.1f\", 1.2),\n-\n-                arguments(\"-1.2\", \"%+01.1f\", -1.2),\n-                arguments(\"-1.2\", \"%+02.1f\", -1.2),\n-                arguments(\"-1.2\", \"%+03.1f\", -1.2),\n-                arguments(\"-1.2\", \"%+04.1f\", -1.2),\n-                arguments(\"-01.2\", \"%+05.1f\", -1.2),\n-                arguments(\"-0000001.2\", \"%+010.1f\", -1.2),\n-                arguments(\"-\" + tenMillionZeros + \"1.2\", \"%+010000004.1f\", -1.2),\n-\n-                \/* zero padding, right adjusted, mandatory blank sign *\/\n-                arguments(\" 12\", \"% 01d\", 12),\n-                arguments(\" 12\", \"% 02d\", 12),\n-                arguments(\" 12\", \"% 03d\", 12),\n-                arguments(\" 012\", \"% 04d\", 12),\n-                arguments(\" 0012\", \"% 05d\", 12),\n-                arguments(\" 000000012\", \"% 010d\", 12),\n-                arguments(\" \" + tenMillionZeros + \"12\", \"% 010000003d\", 12),\n-\n-                arguments(\"-12\", \"% 01d\", -12),\n-                arguments(\"-12\", \"% 02d\", -12),\n-                arguments(\"-12\", \"% 03d\", -12),\n-                arguments(\"-012\", \"% 04d\", -12),\n-                arguments(\"-0012\", \"% 05d\", -12),\n-                arguments(\"-000000012\", \"% 010d\", -12),\n-                arguments(\"-\" + tenMillionZeros + \"12\", \"% 010000003d\", -12),\n-\n-                arguments(\" 1.2\", \"% 01.1f\", 1.2),\n-                arguments(\" 1.2\", \"% 02.1f\", 1.2),\n-                arguments(\" 1.2\", \"% 03.1f\", 1.2),\n-                arguments(\" 1.2\", \"% 04.1f\", 1.2),\n-                arguments(\" 01.2\", \"% 05.1f\", 1.2),\n-                arguments(\" 0000001.2\", \"% 010.1f\", 1.2),\n-                arguments(\" \" + tenMillionZeros + \"1.2\", \"% 010000004.1f\", 1.2),\n-\n-                arguments(\"-1.2\", \"% 01.1f\", -1.2),\n-                arguments(\"-1.2\", \"% 02.1f\", -1.2),\n-                arguments(\"-1.2\", \"% 03.1f\", -1.2),\n-                arguments(\"-1.2\", \"% 04.1f\", -1.2),\n-                arguments(\"-01.2\", \"% 05.1f\", -1.2),\n-                arguments(\"-0000001.2\", \"% 010.1f\", -1.2),\n-                arguments(\"-\" + tenMillionZeros + \"1.2\", \"% 010000004.1f\", -1.2),\n-\n-        };\n+    \/* blank padding, left adjusted, mandatory sign *\/\n+    static Stream<? extends Arguments> blankPaddingLeftAdjustedMandatorySign() {\n+        var tenMillionBlanks = \" \".repeat(10_000_000);\n+        return Stream.of(\n+            Arguments.of(\"+12\", \"%-+1d\", 12),\n+            Arguments.of(\"+12\", \"%-+2d\", 12),\n+            Arguments.of(\"+12\", \"%-+3d\", 12),\n+            Arguments.of(\"+12 \", \"%-+4d\", 12),\n+            Arguments.of(\"+12  \", \"%-+5d\", 12),\n+            Arguments.of(\"+12       \", \"%-+10d\", 12),\n+            Arguments.of(\"+12\" + tenMillionBlanks, \"%-+10000003d\", 12),\n+\n+            Arguments.of(\"-12\", \"%-+1d\", -12),\n+            Arguments.of(\"-12\", \"%-+2d\", -12),\n+            Arguments.of(\"-12\", \"%-+3d\", -12),\n+            Arguments.of(\"-12 \", \"%-+4d\", -12),\n+            Arguments.of(\"-12  \", \"%-+5d\", -12),\n+            Arguments.of(\"-12       \", \"%-+10d\", -12),\n+            Arguments.of(\"-12\" + tenMillionBlanks, \"%-+10000003d\", -12),\n+\n+            Arguments.of(\"+1.2\", \"%-+1.1f\", 1.2),\n+            Arguments.of(\"+1.2\", \"%-+2.1f\", 1.2),\n+            Arguments.of(\"+1.2\", \"%-+3.1f\", 1.2),\n+            Arguments.of(\"+1.2\", \"%-+4.1f\", 1.2),\n+            Arguments.of(\"+1.2 \", \"%-+5.1f\", 1.2),\n+            Arguments.of(\"+1.2      \", \"%-+10.1f\", 1.2),\n+            Arguments.of(\"+1.2\" + tenMillionBlanks, \"%-+10000004.1f\", 1.2),\n+\n+            Arguments.of(\"-1.2\", \"%-+1.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%-+2.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%-+3.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%-+4.1f\", -1.2),\n+            Arguments.of(\"-1.2 \", \"%-+5.1f\", -1.2),\n+            Arguments.of(\"-1.2      \", \"%-+10.1f\", -1.2),\n+            Arguments.of(\"-1.2\" + tenMillionBlanks, \"%-+10000004.1f\", -1.2));\n@@ -350,1 +253,1 @@\n-    void padding(String expected, String format, Object value) {\n+    void blankPaddingLeftAdjustedMandatorySign(String expected, String format, Object value) {\n@@ -354,0 +257,171 @@\n+    \/* blank padding, left adjusted, mandatory blank sign *\/\n+    static Stream<? extends Arguments> blankPaddingLeftAdjustedMandatoryBlank() {\n+        var tenMillionBlanks = \" \".repeat(10_000_000);\n+        return Stream.of(\n+            Arguments.of(\" 12\", \"%- 1d\", 12),\n+            Arguments.of(\" 12\", \"%- 2d\", 12),\n+            Arguments.of(\" 12\", \"%- 3d\", 12),\n+            Arguments.of(\" 12 \", \"%- 4d\", 12),\n+            Arguments.of(\" 12  \", \"%- 5d\", 12),\n+            Arguments.of(\" 12       \", \"%- 10d\", 12),\n+            Arguments.of(\" 12\" + tenMillionBlanks, \"%- 10000003d\", 12),\n+\n+            Arguments.of(\"-12\", \"%- 1d\", -12),\n+            Arguments.of(\"-12\", \"%- 2d\", -12),\n+            Arguments.of(\"-12\", \"%- 3d\", -12),\n+            Arguments.of(\"-12 \", \"%- 4d\", -12),\n+            Arguments.of(\"-12  \", \"%- 5d\", -12),\n+            Arguments.of(\"-12       \", \"%- 10d\", -12),\n+            Arguments.of(\"-12\" + tenMillionBlanks, \"%- 10000003d\", -12),\n+\n+            Arguments.of(\" 1.2\", \"%- 1.1f\", 1.2),\n+            Arguments.of(\" 1.2\", \"%- 2.1f\", 1.2),\n+            Arguments.of(\" 1.2\", \"%- 3.1f\", 1.2),\n+            Arguments.of(\" 1.2\", \"%- 4.1f\", 1.2),\n+            Arguments.of(\" 1.2 \", \"%- 5.1f\", 1.2),\n+            Arguments.of(\" 1.2      \", \"%- 10.1f\", 1.2),\n+            Arguments.of(\" 1.2\" + tenMillionBlanks, \"%- 10000004.1f\", 1.2),\n+\n+            Arguments.of(\"-1.2\", \"%- 1.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%- 2.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%- 3.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%- 4.1f\", -1.2),\n+            Arguments.of(\"-1.2 \", \"%- 5.1f\", -1.2),\n+            Arguments.of(\"-1.2      \", \"%- 10.1f\", -1.2),\n+            Arguments.of(\"-1.2\" + tenMillionBlanks, \"%- 10000004.1f\", -1.2));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void blankPaddingLeftAdjustedMandatoryBlank(String expected, String format, Object value) {\n+        assertEquals(expected, String.format(Locale.US, format, value));\n+    }\n+\n+    \/* zero padding, right adjusted, optional sign *\/\n+    static Stream<? extends Arguments> zeroPaddingRightAdjustedOptionalSign() {\n+        var tenMillionZeros = \"0\".repeat(10_000_000);\n+        return Stream.of(\n+            Arguments.of(\"12\", \"%01d\", 12),\n+            Arguments.of(\"12\", \"%02d\", 12),\n+            Arguments.of(\"012\", \"%03d\", 12),\n+            Arguments.of(\"0012\", \"%04d\", 12),\n+            Arguments.of(\"00012\", \"%05d\", 12),\n+            Arguments.of(\"0000000012\", \"%010d\", 12),\n+            Arguments.of(tenMillionZeros + \"12\", \"%010000002d\", 12),\n+\n+            Arguments.of(\"-12\", \"%01d\", -12),\n+            Arguments.of(\"-12\", \"%02d\", -12),\n+            Arguments.of(\"-12\", \"%03d\", -12),\n+            Arguments.of(\"-012\", \"%04d\", -12),\n+            Arguments.of(\"-0012\", \"%05d\", -12),\n+            Arguments.of(\"-000000012\", \"%010d\", -12),\n+            Arguments.of(\"-\" + tenMillionZeros + \"12\", \"%010000003d\", -12),\n+\n+            Arguments.of(\"1.2\", \"%01.1f\", 1.2),\n+            Arguments.of(\"1.2\", \"%02.1f\", 1.2),\n+            Arguments.of(\"1.2\", \"%03.1f\", 1.2),\n+            Arguments.of(\"01.2\", \"%04.1f\", 1.2),\n+            Arguments.of(\"001.2\", \"%05.1f\", 1.2),\n+            Arguments.of(\"00000001.2\", \"%010.1f\", 1.2),\n+            Arguments.of(tenMillionZeros + \"1.2\", \"%010000003.1f\", 1.2),\n+\n+            Arguments.of(\"-1.2\", \"%01.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%02.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%03.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%04.1f\", -1.2),\n+            Arguments.of(\"-01.2\", \"%05.1f\", -1.2),\n+            Arguments.of(\"-0000001.2\", \"%010.1f\", -1.2),\n+            Arguments.of(\"-\" + tenMillionZeros + \"1.2\", \"%010000004.1f\", -1.2));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void zeroPaddingRightAdjustedOptionalSign(String expected, String format, Object value) {\n+        assertEquals(expected, String.format(Locale.US, format, value));\n+    }\n+\n+    \/* zero padding, right adjusted, mandatory sign *\/\n+    static Stream<? extends Arguments> zeroPaddingRightAdjustedMandatorySign() {\n+        var tenMillionZeros = \"0\".repeat(10_000_000);\n+        return Stream.of(\n+            Arguments.of(\"+12\", \"%+01d\", 12),\n+            Arguments.of(\"+12\", \"%+02d\", 12),\n+            Arguments.of(\"+12\", \"%+03d\", 12),\n+            Arguments.of(\"+012\", \"%+04d\", 12),\n+            Arguments.of(\"+0012\", \"%+05d\", 12),\n+            Arguments.of(\"+000000012\", \"%+010d\", 12),\n+            Arguments.of(\"+\" + tenMillionZeros + \"12\", \"%+010000003d\", 12),\n+\n+            Arguments.of(\"-12\", \"%+01d\", -12),\n+            Arguments.of(\"-12\", \"%+02d\", -12),\n+            Arguments.of(\"-12\", \"%+03d\", -12),\n+            Arguments.of(\"-012\", \"%+04d\", -12),\n+            Arguments.of(\"-0012\", \"%+05d\", -12),\n+            Arguments.of(\"-000000012\", \"%+010d\", -12),\n+            Arguments.of(\"-\" + tenMillionZeros + \"12\", \"%+010000003d\", -12),\n+\n+            Arguments.of(\"+1.2\", \"%+01.1f\", 1.2),\n+            Arguments.of(\"+1.2\", \"%+02.1f\", 1.2),\n+            Arguments.of(\"+1.2\", \"%+03.1f\", 1.2),\n+            Arguments.of(\"+1.2\", \"%+04.1f\", 1.2),\n+            Arguments.of(\"+01.2\", \"%+05.1f\", 1.2),\n+            Arguments.of(\"+0000001.2\", \"%+010.1f\", 1.2),\n+            Arguments.of(\"+\" + tenMillionZeros + \"1.2\", \"%+010000004.1f\", 1.2),\n+\n+            Arguments.of(\"-1.2\", \"%+01.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%+02.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%+03.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"%+04.1f\", -1.2),\n+            Arguments.of(\"-01.2\", \"%+05.1f\", -1.2),\n+            Arguments.of(\"-0000001.2\", \"%+010.1f\", -1.2),\n+            Arguments.of(\"-\" + tenMillionZeros + \"1.2\", \"%+010000004.1f\", -1.2));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void zeroPaddingRightAdjustedMandatorySign(String expected, String format, Object value) {\n+        assertEquals(expected, String.format(Locale.US, format, value));\n+    }\n+\n+    \/* zero padding, right adjusted, mandatory blank sign *\/\n+    static Stream<? extends Arguments> zeroPaddingRightAdjustedMandatoryBlank() {\n+        var tenMillionZeros = \"0\".repeat(10_000_000);\n+        return Stream.of(\n+            Arguments.of(\" 12\", \"% 01d\", 12),\n+            Arguments.of(\" 12\", \"% 02d\", 12),\n+            Arguments.of(\" 12\", \"% 03d\", 12),\n+            Arguments.of(\" 012\", \"% 04d\", 12),\n+            Arguments.of(\" 0012\", \"% 05d\", 12),\n+            Arguments.of(\" 000000012\", \"% 010d\", 12),\n+            Arguments.of(\" \" + tenMillionZeros + \"12\", \"% 010000003d\", 12),\n+\n+            Arguments.of(\"-12\", \"% 01d\", -12),\n+            Arguments.of(\"-12\", \"% 02d\", -12),\n+            Arguments.of(\"-12\", \"% 03d\", -12),\n+            Arguments.of(\"-012\", \"% 04d\", -12),\n+            Arguments.of(\"-0012\", \"% 05d\", -12),\n+            Arguments.of(\"-000000012\", \"% 010d\", -12),\n+            Arguments.of(\"-\" + tenMillionZeros + \"12\", \"% 010000003d\", -12),\n+\n+            Arguments.of(\" 1.2\", \"% 01.1f\", 1.2),\n+            Arguments.of(\" 1.2\", \"% 02.1f\", 1.2),\n+            Arguments.of(\" 1.2\", \"% 03.1f\", 1.2),\n+            Arguments.of(\" 1.2\", \"% 04.1f\", 1.2),\n+            Arguments.of(\" 01.2\", \"% 05.1f\", 1.2),\n+            Arguments.of(\" 0000001.2\", \"% 010.1f\", 1.2),\n+            Arguments.of(\" \" + tenMillionZeros + \"1.2\", \"% 010000004.1f\", 1.2),\n+\n+            Arguments.of(\"-1.2\", \"% 01.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"% 02.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"% 03.1f\", -1.2),\n+            Arguments.of(\"-1.2\", \"% 04.1f\", -1.2),\n+            Arguments.of(\"-01.2\", \"% 05.1f\", -1.2),\n+            Arguments.of(\"-0000001.2\", \"% 010.1f\", -1.2),\n+            Arguments.of(\"-\" + tenMillionZeros + \"1.2\", \"% 010000004.1f\", -1.2));\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    void zeroPaddingRightAdjustedMandatoryBlank(String expected, String format, Object value) {\n+        assertEquals(expected, String.format(Locale.US, format, value));\n+    }\n","filename":"test\/jdk\/java\/util\/Formatter\/Padding.java","additions":379,"deletions":305,"binary":false,"changes":684,"status":"modified"}]}