{"files":[{"patch":"@@ -33,1 +33,1 @@\n-#include \"native_thread.h\"\n+#include \"native_thread.hpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/GetJNIFunctionTable\/getjniftab001\/getjniftab001.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"native_thread.h\"\n+#include \"native_thread.hpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/RedefineClasses\/redefclass028\/redefclass028.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"native_thread.h\"\n+#include \"native_thread.hpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/RedefineClasses\/redefclass029\/redefclass029.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-#include \"native_thread.h\"\n+#include \"native_thread.hpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/RedefineClasses\/redefclass030\/redefclass030.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-#include \"native_thread.h\"\n+#include \"native_thread.hpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/SetJNIFunctionTable\/setjniftab001\/setjniftab001.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-#include \"native_thread.h\"\n+#include \"native_thread.hpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/hotswap\/HS201\/hs201t003\/hs201t003.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"native_thread.h\"\n+#include \"native_thread.hpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/jni_interception\/JI05\/ji05t001\/ji05t001.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-#include \"native_thread.h\"\n+#include \"native_thread.hpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jvmti\/scenarios\/jni_interception\/JI06\/ji06t001\/ji06t001.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"native_thread.h\"\n+#include \"native_thread.hpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/jvmti\/agent_tools.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,1 +1,1 @@\n-Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n+Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,2 +39,2 @@\n-        native_thread.h\n-        native_thread.c\n+        native_thread.hpp\n+        native_thread.cpp\n@@ -103,1 +103,1 @@\n-native_thread.h\n+native_thread.hpp\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/native\/README","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-#include <native_thread.h>\n+#include <native_thread.hpp>\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/native\/native_thread.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,78 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-#ifndef NSK_SHARE_NATIVE_NATIVE_THREAD_H\n-#define NSK_SHARE_NATIVE_NATIVE_THREAD_H\n-\n-extern \"C\" {\n-\n-\/**\n- * A thread procedure with a void* argument and returning\n- * a status.\n- *\/\n-typedef int(*PROCEDURE)(void*);\n-\n-\/**\n- * Return a thread mirror, or NULL if failed.\n- *\/\n-void* THREAD_new(PROCEDURE procedure, void* context);\n-\n-\/**\n- * Return the thread if started OK, or NULL if failed.\n- *\/\n-void* THREAD_start(void* thread);\n-\n-\/**\n- * Return 1 if the thread has been started, or 0 if not,\n- * or -1 if thread==NULL.\n- *\/\n-int THREAD_isStarted(void* thread);\n-\n-\/**\n- * Return 1 if the thread has been started and already has finished,\n- * or 0 if the thread hasn't finish (or even hasn't been started),\n- * or -1 if thread==NULL.\n- *\/\n-int THREAD_hasFinished(void* thread);\n-\n-\/**\n- * Return thread->status if thread has finished,\n- * or return 0 if thread hasn't finished,\n- * or retuen -1 if thread==NULL.\n- *\/\n-int THREAD_status(void* thread);\n-\n-\/**\n- * Cycle with 1 second sleeps until the thread has finished;\n- * or return immediately, if thread==NULL.\n- *\/\n-void THREAD_waitFor(void* thread);\n-\n-\/**\n- * Current thread sleeps.\n- *\/\n-void THREAD_sleep(int seconds);\n-\n-}\n-\n-#endif\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/native\/native_thread.h","additions":0,"deletions":78,"binary":false,"changes":78,"status":"deleted"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#ifndef NSK_SHARE_NATIVE_NATIVE_THREAD_HPP\n+#define NSK_SHARE_NATIVE_NATIVE_THREAD_HPP\n+\n+extern \"C\" {\n+\n+\/**\n+ * A thread procedure with a void* argument and returning\n+ * a status.\n+ *\/\n+typedef int(*PROCEDURE)(void*);\n+\n+\/**\n+ * Return a thread mirror, or null if failed.\n+ *\/\n+void* THREAD_new(PROCEDURE procedure, void* context);\n+\n+\/**\n+ * Return the thread if started OK, or null if failed.\n+ *\/\n+void* THREAD_start(void* thread);\n+\n+\/**\n+ * Return 1 if the thread has been started, or 0 if not,\n+ * or -1 if thread==nullptr.\n+ *\/\n+int THREAD_isStarted(void* thread);\n+\n+\/**\n+ * Return 1 if the thread has been started and already has finished,\n+ * or 0 if the thread hasn't finish (or even hasn't been started),\n+ * or -1 if thread==nullptr.\n+ *\/\n+int THREAD_hasFinished(void* thread);\n+\n+\/**\n+ * Return thread->status if thread has finished,\n+ * or return 0 if thread hasn't finished,\n+ * or retuen -1 if thread==nullptr.\n+ *\/\n+int THREAD_status(void* thread);\n+\n+\/**\n+ * Cycle with 1 second sleeps until the thread has finished;\n+ * or return immediately, if thread==nullptr.\n+ *\/\n+void THREAD_waitFor(void* thread);\n+\n+\/**\n+ * Current thread sleeps.\n+ *\/\n+void THREAD_sleep(int seconds);\n+\n+}\n+\n+#endif\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/share\/native\/native_thread.hpp","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -24,1 +24,1 @@\n-#include \"native_thread.h\"\n+#include \"native_thread.hpp\"\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/vm\/share\/ProcessUtils.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}