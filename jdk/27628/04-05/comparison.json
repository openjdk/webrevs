{"files":[{"patch":"@@ -231,7 +231,7 @@\n-            if (CharacterDataLatin1.equalsIgnoreCase(b1, b2)) {\n-                continue;\n-            }\n-            int c1 = b1 & 0xff;\n-            int c2 = b2 & 0xff;\n-            if (c1 == 0xdf || c2 == 0xdf) {\n-                return compareToFC0(value, k, len, other, k, olen);\n+            if (!CharacterDataLatin1.equalsIgnoreCase(b1, b2)) {\n+                int c1 = b1 & 0xff;\n+                int c2 = b2 & 0xff;\n+                if (c1 == 0xdf || c2 == 0xdf) {  \/\/ 0xdf is the only 1:M in latin1 range\n+                    return compareToFC0(value, k, len, other, k, olen);\n+                }\n+                return Character.toLowerCase(c1) - Character.toLowerCase(c2);\n@@ -239,1 +239,0 @@\n-            return Character.toLowerCase(c1) - Character.toLowerCase(c2);\n@@ -293,7 +292,7 @@\n-            if (cp1 == cp2) {\n-                continue;\n-            }\n-            int[] folded = CaseFolding.foldIfDefined(cp1);\n-            if (folded != null) {\n-                if (folded.length > 1) {\n-                    return compareToFC0_UTF16(value, k, last, other, k, olast);\n+            if (cp1 != cp2) {\n+                int[] folded = CaseFolding.foldIfDefined(cp1);\n+                if (folded != null) {\n+                    if (folded.length > 1) {\n+                        return compareToFC0_UTF16(value, k, last, other, k, olast);\n+                    }\n+                    cp1 = folded[0];\n@@ -301,6 +300,9 @@\n-                cp1 = folded[0];\n-            }\n-            folded = CaseFolding.foldIfDefined(cp2);\n-            if (folded != null) {\n-                if (folded.length > 1) {\n-                    return compareToFC0_UTF16(value, k, last, other, k, olast);\n+                folded = CaseFolding.foldIfDefined(cp2);\n+                if (folded != null) {\n+                    if (folded.length > 1) {\n+                        return compareToFC0_UTF16(value, k, last, other, k, olast);\n+                    }\n+                    cp2 = folded[0];\n+                }\n+                if (cp1 != cp2) {\n+                    return cp1 - cp2;\n@@ -308,4 +310,0 @@\n-                cp2 = folded[0];\n-            }\n-            if (cp1 != cp2) {\n-                return cp1 - cp2;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringLatin1.java","additions":23,"deletions":25,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -645,0 +645,1 @@\n+        int lim = Math.min(tlast, olast);\n@@ -646,1 +647,1 @@\n-        while (k < tlast && k < olast) {\n+        while (k < lim) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringUTF16.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -73,18 +73,0 @@\n-   \/**\n-    * Returns the case-folded form of the specified code point, if there\n-    * is a 1:1 mapping defined by the Unicode case folding mappings.\n-    * <p>\n-    * If the code point has no case folding mapping defined, or if it has\n-    * a 1:M (one-to-many) mapping, this method returns {@code -1}.\n-    * Otherwise, it returns the single mapped code point.\n-    *\n-    * @param  cp\n-    *         the Unicode code point to fold\n-    * @return the case-folded code point, or {@code -1} if no 1:1 mapping\n-    *         is defined\n-    *\/\n-    public static int foldIfDefined11(int cp) {\n-        var folding = getDefined(cp);\n-        return folding != null && folding.length == 1 ? folding[0] : -1;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/lang\/CaseFolding.java.template","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"}]}