{"files":[{"patch":"@@ -1907,1 +1907,0 @@\n-  INSN(vsub_vv, 0b1010111, 0b000, 0b000010);\n@@ -1909,0 +1908,7 @@\n+  INSN(vsub_vv, 0b1010111, 0b000, 0b000010);\n+\n+  \/\/ Vector Saturating Integer Add and Subtract\n+  INSN(vsadd_vv,  0b1010111, 0b000, 0b100001);\n+  INSN(vsaddu_vv, 0b1010111, 0b000, 0b100000);\n+  INSN(vssub_vv,  0b1010111, 0b000, 0b100011);\n+  INSN(vssubu_vv, 0b1010111, 0b000, 0b100010);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -654,0 +654,138 @@\n+\/\/ -------- vector saturating integer operations\n+\n+\/\/ vector saturating signed integer addition\n+\n+instruct vsadd(vReg dst, vReg src1, vReg src2) %{\n+  predicate(n->is_SaturatingVector() && !n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingAddV src1 src2));\n+  ins_cost(VEC_COST);\n+  format %{ \"vsadd $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(is_integral_type(bt), \"unsupported type\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsadd_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src1$$reg), as_VectorRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector saturating unsigned integer addition\n+\n+instruct vsaddu(vReg dst, vReg src1, vReg src2) %{\n+  predicate(n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingAddV src1 src2));\n+  ins_cost(VEC_COST);\n+  format %{ \"vsaddu $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(is_integral_type(bt), \"unsupported type\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsaddu_vv(as_VectorRegister($dst$$reg),\n+                 as_VectorRegister($src1$$reg), as_VectorRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector saturating signed integer addition (predicated)\n+\n+instruct vsadd_masked(vReg dst_src, vReg src1, vRegMask_V0 v0) %{\n+  predicate(n->is_SaturatingVector() && !n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst_src (SaturatingAddV (Binary dst_src src1) v0));\n+  ins_cost(VEC_COST);\n+  format %{ \"vsadd_masked $dst_src, $dst_src, $src1, $v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(is_integral_type(bt), \"unsupported type\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsadd_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+                as_VectorRegister($src1$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector saturating unsigned integer addition (predicated)\n+\n+instruct vsaddu_masked(vReg dst_src, vReg src1, vRegMask_V0 v0) %{\n+  predicate(n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst_src (SaturatingAddV (Binary dst_src src1) v0));\n+  ins_cost(VEC_COST);\n+  format %{ \"vsaddu_masked $dst_src, $dst_src, $src1, $v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(is_integral_type(bt), \"unsupported type\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vsaddu_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+                 as_VectorRegister($src1$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector saturating signed integer subtraction\n+\n+instruct vssub(vReg dst, vReg src1, vReg src2) %{\n+  predicate(n->is_SaturatingVector() && !n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingSubV src1 src2));\n+  ins_cost(VEC_COST);\n+  format %{ \"vssub $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(is_integral_type(bt), \"unsupported type\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vssub_vv(as_VectorRegister($dst$$reg),\n+                as_VectorRegister($src1$$reg), as_VectorRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector saturating unsigned integer subtraction\n+\n+instruct vssubu(vReg dst, vReg src1, vReg src2) %{\n+  predicate(n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst (SaturatingSubV src1 src2));\n+  ins_cost(VEC_COST);\n+  format %{ \"vssubu $dst, $src1, $src2\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(is_integral_type(bt), \"unsupported type\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vssubu_vv(as_VectorRegister($dst$$reg),\n+                 as_VectorRegister($src1$$reg), as_VectorRegister($src2$$reg));\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector saturating signed integer subtraction (predicated)\n+\n+instruct vssub_masked(vReg dst_src, vReg src1, vRegMask_V0 v0) %{\n+  predicate(n->is_SaturatingVector() && !n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst_src (SaturatingSubV (Binary dst_src src1) v0));\n+  ins_cost(VEC_COST);\n+  format %{ \"vssub_masked $dst_src, $dst_src, $src1, $v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(is_integral_type(bt), \"unsupported type\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vssub_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+                as_VectorRegister($src1$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+\/\/ vector saturating unsigned integer subtraction (predicated)\n+\n+instruct vssubu_masked(vReg dst_src, vReg src1, vRegMask_V0 v0) %{\n+  predicate(n->is_SaturatingVector() && n->as_SaturatingVector()->is_unsigned());\n+  match(Set dst_src (SaturatingSubV (Binary dst_src src1) v0));\n+  ins_cost(VEC_COST);\n+  format %{ \"vssubu_masked $dst_src, $dst_src, $src1, $v0\" %}\n+  ins_encode %{\n+    BasicType bt = Matcher::vector_element_basic_type(this);\n+    assert(is_integral_type(bt), \"unsupported type\");\n+    __ vsetvli_helper(bt, Matcher::vector_length(this));\n+    __ vssubu_vv(as_VectorRegister($dst_src$$reg), as_VectorRegister($dst_src$$reg),\n+                 as_VectorRegister($src1$$reg), Assembler::v0_t);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":138,"deletions":0,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -150,1 +150,2 @@\n-    @IR(counts = {IRNode.SATURATING_ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \"}, applyIfCPUFeature = {\"avx2\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VI, IRNode.VECTOR_SIZE_ANY, \" 2 \"},\n+        applyIfCPUFeatureOr = {\"avx2\", \"true\", \"rvv\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorCommutativeOperSharingTest.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -169,1 +169,1 @@\n-    @IR(counts = {IRNode.SATURATING_ADD_VB, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VB, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -192,1 +192,1 @@\n-    @IR(counts = {IRNode.SATURATING_ADD_VS, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VS, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -215,1 +215,1 @@\n-    @IR(counts = {IRNode.SATURATING_ADD_VI, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VI, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -238,1 +238,1 @@\n-    @IR(counts = {IRNode.SATURATING_ADD_VL, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VL, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -263,1 +263,1 @@\n-        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -288,1 +288,1 @@\n-        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -313,1 +313,1 @@\n-        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -338,1 +338,1 @@\n-        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -361,1 +361,1 @@\n-    @IR(counts = {IRNode.SATURATING_SUB_VB, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VB, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -384,1 +384,1 @@\n-    @IR(counts = {IRNode.SATURATING_SUB_VS, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VS, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -407,1 +407,1 @@\n-    @IR(counts = {IRNode.SATURATING_SUB_VI, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VI, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -430,1 +430,1 @@\n-    @IR(counts = {IRNode.SATURATING_SUB_VL, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VL, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -455,1 +455,1 @@\n-        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -480,1 +480,1 @@\n-        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -505,1 +505,1 @@\n-        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -530,1 +530,1 @@\n-        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -553,1 +553,1 @@\n-    @IR(counts = {IRNode.SATURATING_ADD_VB, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_ADD_VB, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -579,1 +579,1 @@\n-    @IR(counts = {IRNode.SATURATING_SUB_VS, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+    @IR(counts = {IRNode.SATURATING_SUB_VS, \" >0 \"}, applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -607,1 +607,1 @@\n-        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n@@ -635,1 +635,1 @@\n-        applyIfCPUFeatureOr = {\"avx2\", \"true\", \"asimd\", \"true\"})\n+        applyIfCPUFeatureOr = {\"avx2\", \"true\", \"asimd\", \"true\", \"rvv\", \"true\"})\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/VectorSaturatedOperationsTest.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"}]}