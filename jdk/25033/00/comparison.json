{"files":[{"patch":"@@ -122,0 +122,1 @@\n+  OrderAccess::fence();\n@@ -147,0 +148,1 @@\n+  OrderAccess::fence();\n@@ -173,0 +175,1 @@\n+  OrderAccess::fence();\n","filename":"src\/hotspot\/share\/runtime\/mutex.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -52,0 +52,10 @@\n+\/\/ The Mutex class used to explicitly guarantee fence(); lock(); acquire(); semantics with\n+\/\/ a hand crafted implementation. That may or may not be a desirable contract for a Mutex,\n+\/\/ but is nevertheless something that older HotSpot code may or may not rely on for correctness.\n+\/\/ Newer code is encouraged not to rely more on this feature, but it is not generally safe to\n+\/\/ remove the fences, until all usages of Mutex have been evaluated on a case-by-case basis, whether\n+\/\/ they actually rely on this stronger contract, or not.\n+\n+\/\/ Having a fence does not have any significant impact on peformance, as this is an internal VM\n+\/\/ mutex and is generally not in hot code paths.\n+\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}