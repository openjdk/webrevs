{"files":[{"patch":"@@ -262,1 +262,1 @@\n-        } catch (InvocationTargetException e) {\n+        } catch (InvocationTargetException exception) {\n@@ -264,5 +264,8 @@\n-            int invocationFrames = e.getStackTrace().length;\n-            Throwable target = e.getCause();\n-            StackTraceElement[] targetTrace = target.getStackTrace();\n-            target.setStackTrace(Arrays.copyOfRange(targetTrace, 0, targetTrace.length - invocationFrames));\n-            throw e;\n+            Throwable cause = exception.getCause();\n+            if (cause == null) throw exception;\n+            StackTraceElement[] elements = cause.getStackTrace();\n+            int range = elements.length - exception.getStackTrace().length;\n+            if (range >= 0) {\n+                cause.setStackTrace(Arrays.copyOfRange(elements, 0, range));\n+            }\n+            throw exception;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/SourceLauncher.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+ *      8362237\n@@ -717,0 +718,36 @@\n+    \/*\n+     * Tests in which main throws an exception without a stacktrace.\n+     *\/\n+    @Test\n+    public void testTargetException2(Path base) throws IOException {\n+        tb.writeJavaFiles(base, \"\"\"\n+                public class TestLauncher {\n+                    public static TestLauncher testCheckcast(Object arg) {\n+                        return (TestLauncher)arg;\n+                    }\n+\n+                    public static void main(String[] args) {\n+                        \/\/ Warmup to trigger C2 compilation\n+                        TestLauncher t = new TestLauncher();\n+                        for (int i = 0; i < 10_000; ++i) {\n+                            testCheckcast(t);\n+                            try {\n+                                testCheckcast(42);\n+                            } catch (Exception e) {\n+                                \/\/ Expected\n+                            }\n+                        }\n+                        \/\/ This will throw a ClassCastException without\n+                        \/\/ a stack trace if OmitStackTraceInFastThrow\n+                        \/\/ is enabled (default)\n+                        testCheckcast(42);\n+                    }\n+                }\n+                \"\"\");\n+        Path file = base.resolve(\"TestLauncher.java\");\n+        Result r = run(file, Collections.emptyList(), List.of(\"3\"));\n+        checkEmpty(\"stdout\", r.stdOut);\n+        checkEmpty(\"stderr\", r.stdErr);\n+        checkTrace(\"exception\", r.exception, \"java.lang.ClassCastException\");\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/launcher\/SourceLauncherTest.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"}]}