{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -912,1 +912,1 @@\n-   do_alias(    getAndSetInt_signature,                                 \/*\"(Ljava\/lang\/Object;JI)I\"*\/ getAndAddInt_signature)   \\\n+   do_alias(    getAndSetInt_signature,                                 \/*\"(Ljava\/lang\/Object;JI)I\"*\/ getAndAddInt_signature) \\\n@@ -915,1 +915,1 @@\n-   do_alias(    getAndSetLong_signature,                                \/*\"(Ljava\/lang\/Object;JJ)J\"*\/ getAndAddLong_signature)  \\\n+   do_alias(    getAndSetLong_signature,                                \/*\"(Ljava\/lang\/Object;JJ)J\"*\/ getAndAddLong_signature)\\\n@@ -918,1 +918,1 @@\n-   do_alias(    getAndSetByte_signature,                                \/*\"(Ljava\/lang\/Object;JB)B\"*\/ getAndAddByte_signature)  \\\n+   do_alias(    getAndSetByte_signature,                                \/*\"(Ljava\/lang\/Object;JB)B\"*\/ getAndAddByte_signature)\\\n@@ -923,1 +923,1 @@\n-   do_name(     getAndSetReference_name,                                \"getAndSetReference\")                                  \\\n+   do_name(     getAndSetReference_name,                                \"getAndSetReference\")                                 \\\n@@ -925,1 +925,13 @@\n-                                                                                                                                               \\\n+                                                                                                                              \\\n+  do_class(jdk_internal_misc_JitCompiler, \"jdk\/internal\/misc\/JitCompiler\")                                                    \\\n+  do_intrinsic(_isConstantExpressionZ,    jdk_internal_misc_JitCompiler,isConstantExpression_name, bool_bool_signature, F_S)  \\\n+  do_intrinsic(_isConstantExpressionB,    jdk_internal_misc_JitCompiler,isConstantExpression_name, byte_bool_signature, F_S)  \\\n+  do_intrinsic(_isConstantExpressionS,    jdk_internal_misc_JitCompiler,isConstantExpression_name, short_bool_signature, F_S) \\\n+  do_intrinsic(_isConstantExpressionC,    jdk_internal_misc_JitCompiler,isConstantExpression_name, char_bool_signature, F_S)  \\\n+  do_intrinsic(_isConstantExpressionI,    jdk_internal_misc_JitCompiler,isConstantExpression_name, int_bool_signature, F_S)   \\\n+  do_intrinsic(_isConstantExpressionJ,    jdk_internal_misc_JitCompiler,isConstantExpression_name, long_bool_signature, F_S)  \\\n+  do_intrinsic(_isConstantExpressionF,    jdk_internal_misc_JitCompiler,isConstantExpression_name, float_bool_signature, F_S) \\\n+  do_intrinsic(_isConstantExpressionD,    jdk_internal_misc_JitCompiler,isConstantExpression_name, double_bool_signature, F_S)\\\n+  do_intrinsic(_isConstantExpressionL,    jdk_internal_misc_JitCompiler,isConstantExpression_name, object_boolean_signature, F_S) \\\n+   do_name(     isConstantExpression_name,                              \"isConstantExpression\")                               \\\n+                                                                                                                              \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -568,0 +568,4 @@\n+  template(bool_bool_signature,                       \"(Z)Z\")                                     \\\n+  template(byte_bool_signature,                       \"(B)Z\")                                     \\\n+  template(short_bool_signature,                      \"(S)Z\")                                     \\\n+  template(char_bool_signature,                       \"(C)Z\")                                     \\\n@@ -569,0 +573,1 @@\n+  template(long_bool_signature,                       \"(J)Z\")                                     \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -727,0 +727,9 @@\n+  case vmIntrinsics::_isConstantExpressionZ:\n+  case vmIntrinsics::_isConstantExpressionB:\n+  case vmIntrinsics::_isConstantExpressionS:\n+  case vmIntrinsics::_isConstantExpressionC:\n+  case vmIntrinsics::_isConstantExpressionI:\n+  case vmIntrinsics::_isConstantExpressionJ:\n+  case vmIntrinsics::_isConstantExpressionF:\n+  case vmIntrinsics::_isConstantExpressionD:\n+  case vmIntrinsics::_isConstantExpressionL:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -477,0 +477,10 @@\n+  case vmIntrinsics::_isConstantExpressionZ:\n+  case vmIntrinsics::_isConstantExpressionB:\n+  case vmIntrinsics::_isConstantExpressionS:\n+  case vmIntrinsics::_isConstantExpressionC:\n+  case vmIntrinsics::_isConstantExpressionI:\n+  case vmIntrinsics::_isConstantExpressionJ:\n+  case vmIntrinsics::_isConstantExpressionF:\n+  case vmIntrinsics::_isConstantExpressionD:\n+  case vmIntrinsics::_isConstantExpressionL:    return inline_isCompileConstant();\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.misc;\n+\n+import jdk.internal.vm.annotation.IntrinsicCandidate;\n+\n+\/**\n+ * Just-in-time-compiler-related queries\n+ *\/\n+public class JitCompiler {\n+    \/**\n+     * Determine if {@code expr} can be evaluated to a constant value by the JIT\n+     * compiler. For example, {@code isConstantExpression(5)} will be evaluated\n+     * to {@code true} by the JIT compiler, while\n+     * {@code isConstantExpression(random.nextLong())} will likely be evaluated\n+     * to {@code false}.\n+     *\n+     * <p>Note that the JIT compiler is responsible to change the return value\n+     * of this method to {@code true}, the interpreter always returns {@code false}.\n+     *\n+     * <p>Given the nondeterministic nature of this method, the result of the\n+     * program must not depend on the return value of this method. It must be\n+     * used as a pure optimization to take advantage of the constant nature of\n+     * {@code expr}. E.g. for a runtime variable, looking up a hashmap may be\n+     * the most efficient look up method, however, if the look up table is\n+     * constant, it may be better to use a chain of if-else in cases where the\n+     * input is also a constant.\n+     *\n+     * @param expr the expression to be evaluated\n+     * @return {@code true} if the JIT compiler determines the {@code expr} is\n+     *         always evaluated to a constant value, {@code false} otherwise\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(boolean expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(byte expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(short expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(char expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(int expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(long expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(float expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(double expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(Object expr) {\n+        return false;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/JitCompiler.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -0,0 +1,322 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.internal.misc.JitCompiler;\n+\n+\/*\n+ * @test\n+ * @bug 8324433\n+ * @summary Test that isConstantExpression is able to constant-fold the computation\n+ *          regarding constant inputs.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.IsConstantExpressionTests\n+ *\/\n+public class IsConstantExpressionTests {\n+    private record Point(int x, int y) {}\n+\n+    private static final boolean BOOL_CONSTANT = true;\n+    private static final byte BYTE_CONSTANT = 3;\n+    private static final short SHORT_CONSTANT = 3;\n+    private static final char CHAR_CONSTANT = 3;\n+    private static final int INT_CONSTANT = 3;\n+    private static final long LONG_CONSTANT = 3;\n+    private static final float FLOAT_CONSTANT = 3;\n+    private static final double DOUBLE_CONSTANT = 3;\n+    private static final Point POINT_CONSTANT = new Point(1, 2);\n+\n+    private static final int[] LOOKUP_TABLE;\n+    static {\n+        LOOKUP_TABLE = new int[4];\n+        LOOKUP_TABLE[0] = 125;\n+        LOOKUP_TABLE[1] = 341;\n+        LOOKUP_TABLE[2] = 97;\n+        LOOKUP_TABLE[3] = 460;\n+    }\n+\n+    private boolean boolVariable = true;\n+    private byte byteVariable = 3;\n+    private short shortVariable = 3;\n+    private char charVariable = 3;\n+    private int intVariable = 3;\n+    private long longVariable = 3;\n+    private float floatVariable = 3;\n+    private double doubleVariable = 3;\n+    private Point pointVariable = new Point(1, 2);\n+    private int hashCache = pointVariable.hashCode();\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int boolConstant() {\n+        return process(BOOL_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int boolVariable() {\n+        return process(boolVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int byteConstant() {\n+        return process(BYTE_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int byteVariable() {\n+        return process(byteVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int shortConstant() {\n+        return process(SHORT_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int shortVariable() {\n+        return process(shortVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int charConstant() {\n+        return process(CHAR_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int charVariable() {\n+        return process(charVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int intConstant() {\n+        return process(INT_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int intVariable() {\n+        return process(intVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int longConstant() {\n+        return process(LONG_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int longVariable() {\n+        return process(longVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int floatConstant() {\n+        return process(FLOAT_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int floatVariable() {\n+        return process(floatVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int doubleConstant() {\n+        return process(DOUBLE_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int doubleVariable() {\n+        return process(doubleVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int objectConstant() {\n+        return process(POINT_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"1\"})\n+    public int objectVariable() {\n+        return process(pointVariable);\n+    }\n+\n+    @ForceInline\n+    public int process(boolean input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            if (input) {\n+                return 125;\n+            } else {\n+                return 341;\n+            }\n+        }\n+\n+        return LOOKUP_TABLE[input ? 1 : 0];\n+    }\n+\n+    @ForceInline\n+    public int process(byte input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            return switch(input) {\n+                case 0 -> 125;\n+                case 1 -> 341;\n+                case 2 -> 97;\n+                case 3 -> 460;\n+                default -> throw new AssertionError();\n+            };\n+        }\n+\n+        return LOOKUP_TABLE[input];\n+    }\n+\n+    @ForceInline\n+    public int process(short input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            return switch(input) {\n+                case 0 -> 125;\n+                case 1 -> 341;\n+                case 2 -> 97;\n+                case 3 -> 460;\n+                default -> throw new AssertionError();\n+            };\n+        }\n+\n+        return LOOKUP_TABLE[input];\n+    }\n+\n+    @ForceInline\n+    public int process(char input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            return switch(input) {\n+                case 0 -> 125;\n+                case 1 -> 341;\n+                case 2 -> 97;\n+                case 3 -> 460;\n+                default -> throw new AssertionError();\n+            };\n+        }\n+\n+        return LOOKUP_TABLE[input];\n+    }\n+\n+    @ForceInline\n+    public int process(int input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            return switch(input) {\n+                case 0 -> 125;\n+                case 1 -> 341;\n+                case 2 -> 97;\n+                case 3 -> 460;\n+                default -> throw new AssertionError();\n+            };\n+        }\n+\n+        return LOOKUP_TABLE[input];\n+    }\n+\n+    @ForceInline\n+    public int process(long input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            if (input == 0) {\n+                return 125;\n+            } else if (input == 1) {\n+                return 341;\n+            } else if (input == 2) {\n+                return 97;\n+            } else if (input == 3) {\n+                return 460;\n+            } else {\n+                throw new AssertionError();\n+            }\n+        }\n+\n+        return LOOKUP_TABLE[(int)input];\n+    }\n+\n+    @ForceInline\n+    public int process(float input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            if (input == 0) {\n+                return 125;\n+            } else if (input == 1) {\n+                return 341;\n+            } else if (input == 2) {\n+                return 97;\n+            } else if (input == 3) {\n+                return 460;\n+            } else {\n+                throw new AssertionError();\n+            }\n+        }\n+\n+        return LOOKUP_TABLE[(int)input];\n+    }\n+\n+    @ForceInline\n+    public int process(double input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            if (input == 0) {\n+                return 125;\n+            } else if (input == 1) {\n+                return 341;\n+            } else if (input == 2) {\n+                return 97;\n+            } else if (input == 3) {\n+                return 460;\n+            } else {\n+                throw new AssertionError();\n+            }\n+        }\n+\n+        return LOOKUP_TABLE[(int)input];\n+    }\n+\n+    @ForceInline\n+    public int process(Point input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            return input.hashCode();\n+        }\n+\n+        return hashCache;\n+    }\n+\n+    public static void main(String[] args) {\n+        var test = new TestFramework(IsConstantExpressionTests.class);\n+        test.addFlags(\"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+        test.start();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/IsConstantExpressionTests.java","additions":322,"deletions":0,"binary":false,"changes":322,"status":"added"}]}