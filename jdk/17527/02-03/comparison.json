{"files":[{"patch":"@@ -642,3 +642,0 @@\n-  do_intrinsic(_isCompileConstant, java_lang_invoke_MethodHandleImpl, isCompileConstant_name, isCompileConstant_signature, F_S) \\\n-   do_name(     isCompileConstant_name,                          \"isCompileConstant\")                                   \\\n-   do_alias(    isCompileConstant_signature,                      object_boolean_signature)                             \\\n@@ -912,1 +909,1 @@\n-   do_alias(    getAndSetInt_signature,                                 \/*\"(Ljava\/lang\/Object;JI)I\"*\/ getAndAddInt_signature) \\\n+   do_alias(    getAndSetInt_signature,                                 \/*\"(Ljava\/lang\/Object;JI)I\"*\/ getAndAddInt_signature)   \\\n@@ -915,1 +912,1 @@\n-   do_alias(    getAndSetLong_signature,                                \/*\"(Ljava\/lang\/Object;JJ)J\"*\/ getAndAddLong_signature)\\\n+   do_alias(    getAndSetLong_signature,                                \/*\"(Ljava\/lang\/Object;JJ)J\"*\/ getAndAddLong_signature)  \\\n@@ -918,1 +915,1 @@\n-   do_alias(    getAndSetByte_signature,                                \/*\"(Ljava\/lang\/Object;JB)B\"*\/ getAndAddByte_signature)\\\n+   do_alias(    getAndSetByte_signature,                                \/*\"(Ljava\/lang\/Object;JB)B\"*\/ getAndAddByte_signature)  \\\n@@ -923,1 +920,1 @@\n-   do_name(     getAndSetReference_name,                                \"getAndSetReference\")                                 \\\n+   do_name(     getAndSetReference_name,                                \"getAndSetReference\")                                  \\\n@@ -926,12 +923,21 @@\n-  do_class(jdk_internal_misc_JitCompiler, \"jdk\/internal\/misc\/JitCompiler\")                                                    \\\n-  do_intrinsic(_isConstantExpressionZ,    jdk_internal_misc_JitCompiler,isConstantExpression_name, bool_bool_signature, F_S)  \\\n-  do_intrinsic(_isConstantExpressionB,    jdk_internal_misc_JitCompiler,isConstantExpression_name, byte_bool_signature, F_S)  \\\n-  do_intrinsic(_isConstantExpressionS,    jdk_internal_misc_JitCompiler,isConstantExpression_name, short_bool_signature, F_S) \\\n-  do_intrinsic(_isConstantExpressionC,    jdk_internal_misc_JitCompiler,isConstantExpression_name, char_bool_signature, F_S)  \\\n-  do_intrinsic(_isConstantExpressionI,    jdk_internal_misc_JitCompiler,isConstantExpression_name, int_bool_signature, F_S)   \\\n-  do_intrinsic(_isConstantExpressionJ,    jdk_internal_misc_JitCompiler,isConstantExpression_name, long_bool_signature, F_S)  \\\n-  do_intrinsic(_isConstantExpressionF,    jdk_internal_misc_JitCompiler,isConstantExpression_name, float_bool_signature, F_S) \\\n-  do_intrinsic(_isConstantExpressionD,    jdk_internal_misc_JitCompiler,isConstantExpression_name, double_bool_signature, F_S)\\\n-  do_intrinsic(_isConstantExpressionL,    jdk_internal_misc_JitCompiler,isConstantExpression_name, object_boolean_signature, F_S) \\\n-   do_name(     isConstantExpression_name,                              \"isConstantExpression\")                               \\\n-                                                                                                                              \\\n+  do_class(jdk_internal_misc_JitCompiler, \"jdk\/internal\/misc\/JitCompiler\")                                                                     \\\n+  do_intrinsic(_isCompileConstantZ,       jdk_internal_misc_JitCompiler,isCompileConstant_name, isCompileConstantZ_signature, F_S)             \\\n+   do_alias(    isCompileConstantZ_signature,                           bool_bool_signature)                                                   \\\n+  do_intrinsic(_isCompileConstantB,       jdk_internal_misc_JitCompiler,isCompileConstant_name, isCompileConstantB_signature, F_S)             \\\n+   do_alias(    isCompileConstantB_signature,                           byte_bool_signature)                                                   \\\n+  do_intrinsic(_isCompileConstantS,       jdk_internal_misc_JitCompiler,isCompileConstant_name, isCompileConstantS_signature, F_S)             \\\n+   do_alias(    isCompileConstantS_signature,                           short_bool_signature)                                                  \\\n+  do_intrinsic(_isCompileConstantC,       jdk_internal_misc_JitCompiler,isCompileConstant_name, isCompileConstantC_signature, F_S)             \\\n+   do_alias(    isCompileConstantC_signature,                           char_bool_signature)                                                   \\\n+  do_intrinsic(_isCompileConstantI,       jdk_internal_misc_JitCompiler,isCompileConstant_name, isCompileConstantI_signature, F_S)             \\\n+   do_alias(    isCompileConstantI_signature,                           int_bool_signature)                                                    \\\n+  do_intrinsic(_isCompileConstantJ,       jdk_internal_misc_JitCompiler,isCompileConstant_name, isCompileConstantJ_signature, F_S)             \\\n+   do_alias(    isCompileConstantJ_signature,                           long_bool_signature)                                                   \\\n+  do_intrinsic(_isCompileConstantF,       jdk_internal_misc_JitCompiler,isCompileConstant_name, isCompileConstantF_signature, F_S)             \\\n+   do_alias(    isCompileConstantF_signature,                           float_bool_signature)                                                  \\\n+  do_intrinsic(_isCompileConstantD,       jdk_internal_misc_JitCompiler,isCompileConstant_name, isCompileConstantD_signature, F_S)             \\\n+   do_alias(    isCompileConstantD_signature,                           double_bool_signature)                                                 \\\n+  do_intrinsic(_isCompileConstantL,       jdk_internal_misc_JitCompiler,isCompileConstant_name, isCompileConstantL_signature, F_S)             \\\n+   do_alias(    isCompileConstantL_signature,                           object_boolean_signature)                                              \\\n+   do_name(     isCompileConstant_name,                                 \"isCompileConstant\")                                                   \\\n+                                                                                                                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":25,"deletions":19,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -727,9 +727,9 @@\n-  case vmIntrinsics::_isConstantExpressionZ:\n-  case vmIntrinsics::_isConstantExpressionB:\n-  case vmIntrinsics::_isConstantExpressionS:\n-  case vmIntrinsics::_isConstantExpressionC:\n-  case vmIntrinsics::_isConstantExpressionI:\n-  case vmIntrinsics::_isConstantExpressionJ:\n-  case vmIntrinsics::_isConstantExpressionF:\n-  case vmIntrinsics::_isConstantExpressionD:\n-  case vmIntrinsics::_isConstantExpressionL:\n+  case vmIntrinsics::_isCompileConstantZ:\n+  case vmIntrinsics::_isCompileConstantB:\n+  case vmIntrinsics::_isCompileConstantS:\n+  case vmIntrinsics::_isCompileConstantC:\n+  case vmIntrinsics::_isCompileConstantI:\n+  case vmIntrinsics::_isCompileConstantJ:\n+  case vmIntrinsics::_isCompileConstantF:\n+  case vmIntrinsics::_isCompileConstantD:\n+  case vmIntrinsics::_isCompileConstantL:\n@@ -804,1 +804,0 @@\n-  case vmIntrinsics::_isCompileConstant:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -477,9 +477,9 @@\n-  case vmIntrinsics::_isConstantExpressionZ:\n-  case vmIntrinsics::_isConstantExpressionB:\n-  case vmIntrinsics::_isConstantExpressionS:\n-  case vmIntrinsics::_isConstantExpressionC:\n-  case vmIntrinsics::_isConstantExpressionI:\n-  case vmIntrinsics::_isConstantExpressionJ:\n-  case vmIntrinsics::_isConstantExpressionF:\n-  case vmIntrinsics::_isConstantExpressionD:\n-  case vmIntrinsics::_isConstantExpressionL:    return inline_isCompileConstant();\n+  case vmIntrinsics::_isCompileConstantZ:\n+  case vmIntrinsics::_isCompileConstantB:\n+  case vmIntrinsics::_isCompileConstantS:\n+  case vmIntrinsics::_isCompileConstantC:\n+  case vmIntrinsics::_isCompileConstantI:\n+  case vmIntrinsics::_isCompileConstantJ:\n+  case vmIntrinsics::_isCompileConstantF:\n+  case vmIntrinsics::_isCompileConstantD:\n+  case vmIntrinsics::_isCompileConstantL:    return inline_isCompileConstant();\n@@ -677,2 +677,0 @@\n-  case vmIntrinsics::_isCompileConstant:\n-    return inline_isCompileConstant();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+import jdk.internal.misc.JitCompiler;\n@@ -622,1 +623,1 @@\n-        if (MethodHandleImpl.isCompileConstant(mh)) {\n+        if (JitCompiler.isCompileConstant(mh)) {\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -616,7 +616,0 @@\n-    \/\/ Intrinsified by C2. Returns true if obj is a compile-time constant.\n-    @Hidden\n-    @jdk.internal.vm.annotation.IntrinsicCandidate\n-    static boolean isCompileConstant(Object obj) {\n-        return false;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-     * compiler. For example, {@code isConstantExpression(5)} will be evaluated\n+     * compiler. For example, {@code isCompileConstant(5)} will be evaluated\n@@ -37,1 +37,1 @@\n-     * {@code isConstantExpression(random.nextLong())} will likely be evaluated\n+     * {@code isCompileConstant(random.nextLong())} will likely be evaluated\n@@ -56,1 +56,1 @@\n-    public static boolean isConstantExpression(boolean expr) {\n+    public static boolean isCompileConstant(boolean expr) {\n@@ -61,1 +61,1 @@\n-     * @see #isConstantExpression(boolean)\n+     * @see #isCompileConstant(boolean)\n@@ -64,1 +64,1 @@\n-    public static boolean isConstantExpression(byte expr) {\n+    public static boolean isCompileConstant(byte expr) {\n@@ -69,1 +69,1 @@\n-     * @see #isConstantExpression(boolean)\n+     * @see #isCompileConstant(boolean)\n@@ -72,1 +72,1 @@\n-    public static boolean isConstantExpression(short expr) {\n+    public static boolean isCompileConstant(short expr) {\n@@ -77,1 +77,1 @@\n-     * @see #isConstantExpression(boolean)\n+     * @see #isCompileConstant(boolean)\n@@ -80,1 +80,1 @@\n-    public static boolean isConstantExpression(char expr) {\n+    public static boolean isCompileConstant(char expr) {\n@@ -85,1 +85,1 @@\n-     * @see #isConstantExpression(boolean)\n+     * @see #isCompileConstant(boolean)\n@@ -88,1 +88,1 @@\n-    public static boolean isConstantExpression(int expr) {\n+    public static boolean isCompileConstant(int expr) {\n@@ -93,1 +93,1 @@\n-     * @see #isConstantExpression(boolean)\n+     * @see #isCompileConstant(boolean)\n@@ -96,1 +96,1 @@\n-    public static boolean isConstantExpression(long expr) {\n+    public static boolean isCompileConstant(long expr) {\n@@ -101,1 +101,1 @@\n-     * @see #isConstantExpression(boolean)\n+     * @see #isCompileConstant(boolean)\n@@ -104,1 +104,1 @@\n-    public static boolean isConstantExpression(float expr) {\n+    public static boolean isCompileConstant(float expr) {\n@@ -109,1 +109,1 @@\n-     * @see #isConstantExpression(boolean)\n+     * @see #isCompileConstant(boolean)\n@@ -112,1 +112,1 @@\n-    public static boolean isConstantExpression(double expr) {\n+    public static boolean isCompileConstant(double expr) {\n@@ -117,1 +117,1 @@\n-     * @see #isConstantExpression(boolean)\n+     * @see #isCompileConstant(boolean)\n@@ -120,1 +120,1 @@\n-    public static boolean isConstantExpression(Object expr) {\n+    public static boolean isCompileConstant(Object expr) {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/JitCompiler.java","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n- * @summary Test that isConstantExpression is able to constant-fold the computation\n+ * @summary Test that isCompileConstant is able to constant-fold the computation\n@@ -35,1 +35,1 @@\n- * @run driver compiler.c2.irTests.IsConstantExpressionTests\n+ * @run driver compiler.c2.irTests.IsCompileConstantTests\n@@ -37,1 +37,1 @@\n-public class IsConstantExpressionTests {\n+public class IsCompileConstantTests {\n@@ -180,1 +180,1 @@\n-        if (JitCompiler.isConstantExpression(input)) {\n+        if (JitCompiler.isCompileConstant(input)) {\n@@ -193,1 +193,1 @@\n-        if (JitCompiler.isConstantExpression(input)) {\n+        if (JitCompiler.isCompileConstant(input)) {\n@@ -208,1 +208,1 @@\n-        if (JitCompiler.isConstantExpression(input)) {\n+        if (JitCompiler.isCompileConstant(input)) {\n@@ -223,1 +223,1 @@\n-        if (JitCompiler.isConstantExpression(input)) {\n+        if (JitCompiler.isCompileConstant(input)) {\n@@ -238,1 +238,1 @@\n-        if (JitCompiler.isConstantExpression(input)) {\n+        if (JitCompiler.isCompileConstant(input)) {\n@@ -253,1 +253,1 @@\n-        if (JitCompiler.isConstantExpression(input)) {\n+        if (JitCompiler.isCompileConstant(input)) {\n@@ -272,1 +272,1 @@\n-        if (JitCompiler.isConstantExpression(input)) {\n+        if (JitCompiler.isCompileConstant(input)) {\n@@ -291,1 +291,1 @@\n-        if (JitCompiler.isConstantExpression(input)) {\n+        if (JitCompiler.isCompileConstant(input)) {\n@@ -310,1 +310,1 @@\n-        if (JitCompiler.isConstantExpression(input)) {\n+        if (JitCompiler.isCompileConstant(input)) {\n@@ -318,1 +318,1 @@\n-        var test = new TestFramework(IsConstantExpressionTests.class);\n+        var test = new TestFramework(IsCompileConstantTests.class);\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/IsCompileConstantTests.java","additions":13,"deletions":13,"binary":false,"changes":26,"previous_filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/IsConstantExpressionTests.java","status":"renamed"}]}