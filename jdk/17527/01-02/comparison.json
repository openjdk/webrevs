{"files":[{"patch":"@@ -927,1 +927,9 @@\n-  do_intrinsic(_isConstantExpression,     jdk_internal_misc_JitCompiler,isConstantExpression_name, isConstantExpression_signature, F_S) \\\n+  do_intrinsic(_isConstantExpressionZ,    jdk_internal_misc_JitCompiler,isConstantExpression_name, bool_bool_signature, F_S)  \\\n+  do_intrinsic(_isConstantExpressionB,    jdk_internal_misc_JitCompiler,isConstantExpression_name, byte_bool_signature, F_S)  \\\n+  do_intrinsic(_isConstantExpressionS,    jdk_internal_misc_JitCompiler,isConstantExpression_name, short_bool_signature, F_S) \\\n+  do_intrinsic(_isConstantExpressionC,    jdk_internal_misc_JitCompiler,isConstantExpression_name, char_bool_signature, F_S)  \\\n+  do_intrinsic(_isConstantExpressionI,    jdk_internal_misc_JitCompiler,isConstantExpression_name, int_bool_signature, F_S)   \\\n+  do_intrinsic(_isConstantExpressionJ,    jdk_internal_misc_JitCompiler,isConstantExpression_name, long_bool_signature, F_S)  \\\n+  do_intrinsic(_isConstantExpressionF,    jdk_internal_misc_JitCompiler,isConstantExpression_name, float_bool_signature, F_S) \\\n+  do_intrinsic(_isConstantExpressionD,    jdk_internal_misc_JitCompiler,isConstantExpression_name, double_bool_signature, F_S)\\\n+  do_intrinsic(_isConstantExpressionL,    jdk_internal_misc_JitCompiler,isConstantExpression_name, object_boolean_signature, F_S) \\\n@@ -929,2 +937,1 @@\n-   do_signature(isConstantExpression_signature,                         \"(J)Z\")                                               \\\n-                                                                                                                                               \\\n+                                                                                                                              \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -568,0 +568,4 @@\n+  template(bool_bool_signature,                       \"(Z)Z\")                                     \\\n+  template(byte_bool_signature,                       \"(B)Z\")                                     \\\n+  template(short_bool_signature,                      \"(S)Z\")                                     \\\n+  template(char_bool_signature,                       \"(C)Z\")                                     \\\n@@ -569,0 +573,1 @@\n+  template(long_bool_signature,                       \"(J)Z\")                                     \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -727,1 +727,9 @@\n-  case vmIntrinsics::_isConstantExpression:\n+  case vmIntrinsics::_isConstantExpressionZ:\n+  case vmIntrinsics::_isConstantExpressionB:\n+  case vmIntrinsics::_isConstantExpressionS:\n+  case vmIntrinsics::_isConstantExpressionC:\n+  case vmIntrinsics::_isConstantExpressionI:\n+  case vmIntrinsics::_isConstantExpressionJ:\n+  case vmIntrinsics::_isConstantExpressionF:\n+  case vmIntrinsics::_isConstantExpressionD:\n+  case vmIntrinsics::_isConstantExpressionL:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -477,1 +477,9 @@\n-  case vmIntrinsics::_isConstantExpression:     return inline_isCompileConstant();\n+  case vmIntrinsics::_isConstantExpressionZ:\n+  case vmIntrinsics::_isConstantExpressionB:\n+  case vmIntrinsics::_isConstantExpressionS:\n+  case vmIntrinsics::_isConstantExpressionC:\n+  case vmIntrinsics::_isConstantExpressionI:\n+  case vmIntrinsics::_isConstantExpressionJ:\n+  case vmIntrinsics::_isConstantExpressionF:\n+  case vmIntrinsics::_isConstantExpressionD:\n+  case vmIntrinsics::_isConstantExpressionL:    return inline_isCompileConstant();\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -56,0 +56,40 @@\n+    public static boolean isConstantExpression(boolean expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(byte expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(short expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(char expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(int expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n@@ -59,0 +99,24 @@\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(float expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(double expr) {\n+        return false;\n+    }\n+\n+    \/**\n+     * @see #isConstantExpression(boolean)\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(Object expr) {\n+        return false;\n+    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/JitCompiler.java","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -38,1 +38,12 @@\n-    private static final int CONSTANT = 3;\n+    private record Point(int x, int y) {}\n+\n+    private static final boolean BOOL_CONSTANT = true;\n+    private static final byte BYTE_CONSTANT = 3;\n+    private static final short SHORT_CONSTANT = 3;\n+    private static final char CHAR_CONSTANT = 3;\n+    private static final int INT_CONSTANT = 3;\n+    private static final long LONG_CONSTANT = 3;\n+    private static final float FLOAT_CONSTANT = 3;\n+    private static final double DOUBLE_CONSTANT = 3;\n+    private static final Point POINT_CONSTANT = new Point(1, 2);\n+\n@@ -48,1 +59,34 @@\n-    private int variable = 3;\n+    private boolean boolVariable = true;\n+    private byte byteVariable = 3;\n+    private short shortVariable = 3;\n+    private char charVariable = 3;\n+    private int intVariable = 3;\n+    private long longVariable = 3;\n+    private float floatVariable = 3;\n+    private double doubleVariable = 3;\n+    private Point pointVariable = new Point(1, 2);\n+    private int hashCache = pointVariable.hashCode();\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int boolConstant() {\n+        return process(BOOL_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int boolVariable() {\n+        return process(boolVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int byteConstant() {\n+        return process(BYTE_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int byteVariable() {\n+        return process(byteVariable);\n+    }\n@@ -51,3 +95,3 @@\n-    @IR(failOn = IRNode.LOAD_I)\n-    public int constant() {\n-        return process(CONSTANT);\n+    @IR(failOn = IRNode.LOAD)\n+    public int shortConstant() {\n+        return process(SHORT_CONSTANT);\n@@ -57,3 +101,133 @@\n-    @IR(counts = {IRNode.LOAD_I, \"2\"})\n-    public int variable() {\n-        return process(variable);\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int shortVariable() {\n+        return process(shortVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int charConstant() {\n+        return process(CHAR_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int charVariable() {\n+        return process(charVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int intConstant() {\n+        return process(INT_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int intVariable() {\n+        return process(intVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int longConstant() {\n+        return process(LONG_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int longVariable() {\n+        return process(longVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int floatConstant() {\n+        return process(FLOAT_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int floatVariable() {\n+        return process(floatVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int doubleConstant() {\n+        return process(DOUBLE_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"2\"})\n+    public int doubleVariable() {\n+        return process(doubleVariable);\n+    }\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD)\n+    public int objectConstant() {\n+        return process(POINT_CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD, \"1\"})\n+    public int objectVariable() {\n+        return process(pointVariable);\n+    }\n+\n+    @ForceInline\n+    public int process(boolean input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            if (input) {\n+                return 125;\n+            } else {\n+                return 341;\n+            }\n+        }\n+\n+        return LOOKUP_TABLE[input ? 1 : 0];\n+    }\n+\n+    @ForceInline\n+    public int process(byte input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            return switch(input) {\n+                case 0 -> 125;\n+                case 1 -> 341;\n+                case 2 -> 97;\n+                case 3 -> 460;\n+                default -> throw new AssertionError();\n+            };\n+        }\n+\n+        return LOOKUP_TABLE[input];\n+    }\n+\n+    @ForceInline\n+    public int process(short input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            return switch(input) {\n+                case 0 -> 125;\n+                case 1 -> 341;\n+                case 2 -> 97;\n+                case 3 -> 460;\n+                default -> throw new AssertionError();\n+            };\n+        }\n+\n+        return LOOKUP_TABLE[input];\n+    }\n+\n+    @ForceInline\n+    public int process(char input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            return switch(input) {\n+                case 0 -> 125;\n+                case 1 -> 341;\n+                case 2 -> 97;\n+                case 3 -> 460;\n+                default -> throw new AssertionError();\n+            };\n+        }\n+\n+        return LOOKUP_TABLE[input];\n@@ -77,0 +251,66 @@\n+    @ForceInline\n+    public int process(long input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            if (input == 0) {\n+                return 125;\n+            } else if (input == 1) {\n+                return 341;\n+            } else if (input == 2) {\n+                return 97;\n+            } else if (input == 3) {\n+                return 460;\n+            } else {\n+                throw new AssertionError();\n+            }\n+        }\n+\n+        return LOOKUP_TABLE[(int)input];\n+    }\n+\n+    @ForceInline\n+    public int process(float input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            if (input == 0) {\n+                return 125;\n+            } else if (input == 1) {\n+                return 341;\n+            } else if (input == 2) {\n+                return 97;\n+            } else if (input == 3) {\n+                return 460;\n+            } else {\n+                throw new AssertionError();\n+            }\n+        }\n+\n+        return LOOKUP_TABLE[(int)input];\n+    }\n+\n+    @ForceInline\n+    public int process(double input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            if (input == 0) {\n+                return 125;\n+            } else if (input == 1) {\n+                return 341;\n+            } else if (input == 2) {\n+                return 97;\n+            } else if (input == 3) {\n+                return 460;\n+            } else {\n+                throw new AssertionError();\n+            }\n+        }\n+\n+        return LOOKUP_TABLE[(int)input];\n+    }\n+\n+    @ForceInline\n+    public int process(Point input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            return input.hashCode();\n+        }\n+\n+        return hashCache;\n+    }\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/IsConstantExpressionTests.java","additions":248,"deletions":8,"binary":false,"changes":256,"status":"modified"}]}