{"files":[{"patch":"@@ -912,1 +912,1 @@\n-   do_alias(    getAndSetInt_signature,                                 \/*\"(Ljava\/lang\/Object;JI)I\"*\/ getAndAddInt_signature)   \\\n+   do_alias(    getAndSetInt_signature,                                 \/*\"(Ljava\/lang\/Object;JI)I\"*\/ getAndAddInt_signature) \\\n@@ -915,1 +915,1 @@\n-   do_alias(    getAndSetLong_signature,                                \/*\"(Ljava\/lang\/Object;JJ)J\"*\/ getAndAddLong_signature)  \\\n+   do_alias(    getAndSetLong_signature,                                \/*\"(Ljava\/lang\/Object;JJ)J\"*\/ getAndAddLong_signature)\\\n@@ -918,1 +918,1 @@\n-   do_alias(    getAndSetByte_signature,                                \/*\"(Ljava\/lang\/Object;JB)B\"*\/ getAndAddByte_signature)  \\\n+   do_alias(    getAndSetByte_signature,                                \/*\"(Ljava\/lang\/Object;JB)B\"*\/ getAndAddByte_signature)\\\n@@ -923,1 +923,1 @@\n-   do_name(     getAndSetReference_name,                                \"getAndSetReference\")                                  \\\n+   do_name(     getAndSetReference_name,                                \"getAndSetReference\")                                 \\\n@@ -925,0 +925,5 @@\n+                                                                                                                              \\\n+  do_class(jdk_internal_misc_JitCompiler, \"jdk\/internal\/misc\/JitCompiler\")                                                    \\\n+  do_intrinsic(_isConstantExpression,     jdk_internal_misc_JitCompiler,isConstantExpression_name, isConstantExpression_signature, F_S) \\\n+   do_name(     isConstantExpression_name,                              \"isConstantExpression\")                               \\\n+   do_signature(isConstantExpression_signature,                         \"(J)Z\")                                               \\\n","filename":"src\/hotspot\/share\/classfile\/vmIntrinsics.hpp","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -727,0 +727,1 @@\n+  case vmIntrinsics::_isConstantExpression:\n","filename":"src\/hotspot\/share\/opto\/c2compiler.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -477,0 +477,2 @@\n+  case vmIntrinsics::_isConstantExpression:     return inline_is_constant_expression();\n+\n@@ -2753,0 +2755,8 @@\n+bool LibraryCallKit::inline_is_constant_expression() {\n+  Node* expr = argument(0);\n+  const Type* t = gvn().type(expr);\n+  int res = t->isa_long() && t->is_long()->is_con() ? 1 : 0;\n+  set_result(gvn().intcon(res));\n+  return true;\n+}\n+\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -286,0 +286,1 @@\n+  bool inline_is_constant_expression();\n","filename":"src\/hotspot\/share\/opto\/library_call.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package jdk.internal.misc;\n+\n+import jdk.internal.vm.annotation.IntrinsicCandidate;\n+\n+\/**\n+ * Just-in-time-compiler-related queries\n+ *\/\n+public class JitCompiler {\n+    \/**\n+     * Determine if {@code expr} can be evaluated to a constant value by the JIT\n+     * compiler. For example, {@code isConstantExpression(5)} will be evaluated\n+     * to {@code true} by the JIT compiler, while\n+     * {@code isConstantExpression(random.nextLong())} will likely be evaluated\n+     * to {@code false}.\n+     *\n+     * <p>Note that the JIT compiler is responsible to change the return value\n+     * of this method to {@code true}, the interpreter always returns {@code false}.\n+     *\n+     * <p>Given the nondeterministic nature of this method, the result of the\n+     * program must not depend on the return value of this method. It must be\n+     * used as a pure optimization to take advantage of the constant nature of\n+     * {@code expr}. E.g. for a runtime variable, looking up a hashmap may be\n+     * the most efficient look up method, however, if the look up table is\n+     * constant, it may be better to use a chain of if-else in cases where the\n+     * input is also a constant.\n+     *\n+     * @param expr the expression to be evaluated\n+     * @return {@code true} if the JIT compiler determines the {@code expr} is\n+     *         always evaluated to a constant value, {@code false} otherwise\n+     *\/\n+    @IntrinsicCandidate\n+    public static boolean isConstantExpression(long expr) {\n+        return false;\n+    }\n+}\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/JitCompiler.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+import jdk.internal.misc.JitCompiler;\n+\n+\/*\n+ * @test\n+ * @bug 8324433\n+ * @summary Test that isConstantExpression is able to constant-fold the computation\n+ *          regarding constant inputs.\n+ * @modules java.base\/jdk.internal.misc\n+ * @library \/test\/lib \/\n+ * @run driver compiler.c2.irTests.IsConstantExpressionTests\n+ *\/\n+public class IsConstantExpressionTests {\n+    private static final int CONSTANT = 3;\n+    private static final int[] LOOKUP_TABLE;\n+    static {\n+        LOOKUP_TABLE = new int[4];\n+        LOOKUP_TABLE[0] = 125;\n+        LOOKUP_TABLE[1] = 341;\n+        LOOKUP_TABLE[2] = 97;\n+        LOOKUP_TABLE[3] = 460;\n+    }\n+\n+    private int variable = 3;\n+\n+    @Test\n+    @IR(failOn = IRNode.LOAD_I)\n+    public int constant() {\n+        return process(CONSTANT);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.LOAD_I, \"2\"})\n+    public int variable() {\n+        return process(variable);\n+    }\n+\n+    @ForceInline\n+    public int process(int input) {\n+        if (JitCompiler.isConstantExpression(input)) {\n+            return switch(input) {\n+                case 0 -> 125;\n+                case 1 -> 341;\n+                case 2 -> 97;\n+                case 3 -> 460;\n+                default -> throw new AssertionError();\n+            };\n+        }\n+\n+        return LOOKUP_TABLE[input];\n+    }\n+\n+    public static void main(String[] args) {\n+        var test = new TestFramework(IsConstantExpressionTests.class);\n+        test.addFlags(\"--add-exports=java.base\/jdk.internal.misc=ALL-UNNAMED\");\n+        test.start();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/IsConstantExpressionTests.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"}]}