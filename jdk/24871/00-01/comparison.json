{"files":[{"patch":"@@ -0,0 +1,71 @@\n+\/*\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ *@test\n+ *@bug 4848242\n+ *@summary Verifies that sampled European locales use consistent short time zone names.\n+ *         Originally assumed all European locales had the same short names,\n+ *         but due to changes in time zone data and locale handling, that is no longer guaranteed.\n+ *         This test now verifies that a representative sample of locales (e.g., DE, FR, IT)\n+ *         still use the same short names (CET\/CEST).\n+ *\/\n+\n+import java.util.Locale;\n+import java.util.TimeZone;\n+import java.text.DateFormatSymbols;\n+\n+public class Bug4848242 {\n+\n+    public static void main(String[] args) {\n+        getTzInfo(\"es\", \"ES\");\n+        getTzInfo(\"fr\", \"FR\");\n+        getTzInfo(\"it\", \"IT\");\n+        getTzInfo(\"sv\", \"SV\");\n+    }\n+\n+    static void getTzInfo(String langName, String locName)\n+    {\n+        Locale tzLocale = Locale.of(langName, locName);\n+        TimeZone euroTz = TimeZone.getTimeZone(\"MET\");\n+        System.out.println(\"Locale is \" + langName + \"_\" + locName);\n+\n+        if ( euroTz.getID().equalsIgnoreCase(\"GMT\") ) {\n+            \/\/ if we don't have a timezone and default back to GMT\n+            throw new RuntimeException(\"Error: no time zone found\");\n+        }\n+\n+        \/\/ get the timezone info\n+        System.out.println(euroTz.getDisplayName(false, TimeZone.SHORT, tzLocale));\n+        if (!euroTz.getDisplayName(false, TimeZone.SHORT, tzLocale).equals(\"CET\"))\n+            throw new RuntimeException(\"Timezone name is incorrect (should be CET)\\n\");\n+        System.out.println(euroTz.getDisplayName(false, TimeZone.LONG, tzLocale));\n+\n+        System.out.println(euroTz.getDisplayName(true, TimeZone.SHORT, tzLocale));\n+        if (!euroTz.getDisplayName(true, TimeZone.SHORT, tzLocale).equals(\"CEST\"))\n+            throw new RuntimeException(\"Summer timezone name is incorrect (should be CEST)\\n\");\n+        System.out.println(euroTz.getDisplayName(true, TimeZone.LONG, tzLocale) + \"\\n\");\n+\n+    }\n+\n+}\n","filename":"test\/jdk\/sun\/util\/resources\/TimeZone\/Bug4848242.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"added"}]}