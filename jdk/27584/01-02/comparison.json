{"files":[{"patch":"@@ -2211,0 +2211,7 @@\n+  RegisterMap reg_map(thread,\n+                      RegisterMap::UpdateMap::skip,\n+                      RegisterMap::ProcessFrames::skip,\n+                      RegisterMap::WalkContinuation::skip);\n+  javaVFrame *jvf = thread->last_java_vframe(&reg_map);\n+  Method* method = jvf->method();\n+  address address = jvf->method()->code_base();\n@@ -2212,16 +2219,0 @@\n-  frame last_frame = thread->last_frame();\n-  Method *method;\n-  address address;\n-\n-  if (last_frame.is_interpreted_frame()) {\n-    method = last_frame.interpreter_frame_method();\n-    address = last_frame.interpreter_frame_bcp();\n-  } else {\n-    RegisterMap reg_map(thread,\n-                        RegisterMap::UpdateMap::skip,\n-                        RegisterMap::ProcessFrames::skip,\n-                        RegisterMap::WalkContinuation::skip);\n-    javaVFrame *jvf = thread->last_java_vframe(&reg_map);\n-    method = jvf->method();\n-    address = jvf->method()->code_base();\n-  }\n@@ -2318,16 +2309,7 @@\n-  frame last_frame = thread->last_frame();\n-  Method *method;\n-  address address;\n-\n-  if (last_frame.is_interpreted_frame()) {\n-    method = last_frame.interpreter_frame_method();\n-    address = last_frame.interpreter_frame_bcp();\n-  } else {\n-    RegisterMap reg_map(thread,\n-                        RegisterMap::UpdateMap::skip,\n-                        RegisterMap::ProcessFrames::skip,\n-                        RegisterMap::WalkContinuation::skip);\n-    javaVFrame *jvf = thread->last_java_vframe(&reg_map);\n-    method = jvf->method();\n-    address = jvf->method()->code_base();\n-  }\n+  RegisterMap reg_map(thread,\n+                      RegisterMap::UpdateMap::skip,\n+                      RegisterMap::ProcessFrames::skip,\n+                      RegisterMap::WalkContinuation::skip);\n+  javaVFrame *jvf = thread->last_java_vframe(&reg_map);\n+  Method* method = jvf->method();\n+  address address = jvf->method()->code_base();\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":14,"deletions":32,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -28,2 +28,1 @@\n- * @run main\/othervm\/native -agentlib:JvmtiFieldEventsFromJNI TestFieldsEventsFromJNI\n- * @run main\/othervm\/native -agentlib:JvmtiFieldEventsFromJNI -Xcomp TestFieldsEventsFromJNI\n+ * @run main\/othervm\/native -agentlib:JvmtiFieldEventsFromJNI FieldsEventsFromJNI\n@@ -31,1 +30,1 @@\n-public class TestFieldsEventsFromJNI {\n+public class FieldsEventsFromJNI {\n@@ -49,1 +48,1 @@\n-        TestFieldsEventsFromJNI c = new TestFieldsEventsFromJNI();\n+        FieldsEventsFromJNI c = new FieldsEventsFromJNI();\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/FieldEventsFromJNI\/FieldsEventsFromJNI.java","additions":3,"deletions":4,"binary":false,"changes":7,"previous_filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/FieldEventsFromJNI\/TestFieldsEventsFromJNI.java","status":"renamed"},{"patch":"@@ -35,10 +35,0 @@\n-static char*\n-get_object_class_name(jvmtiEnv *jvmti, JNIEnv* jni, jobject object) {\n-  char *obj_class_name = nullptr;\n-  jclass object_class = jni->GetObjectClass(object);\n-  jvmtiError err = jvmti->GetClassSignature(object_class, &obj_class_name, nullptr);\n-  check_jvmti_error(err, \"GetClassSignature\");\n-  jni->DeleteLocalRef(object_class);\n-  return obj_class_name;\n-}\n-\n@@ -68,1 +58,0 @@\n-\n@@ -71,1 +60,1 @@\n-  if (strcmp(obj_class_name, \"LTestFieldsEventsFromJNI;\") != 0) {\n+  if (strcmp(obj_class_name, \"LFieldsEventsFromJNI;\") != 0) {\n@@ -102,1 +91,0 @@\n-\n@@ -105,1 +93,1 @@\n-  if (strcmp(obj_class_name, \"LTestFieldsEventsFromJNI;\") != 0) {\n+  if (strcmp(obj_class_name, \"LFieldsEventsFromJNI;\") != 0) {\n@@ -137,1 +125,0 @@\n-\n@@ -140,1 +127,1 @@\n-Java_TestFieldsEventsFromJNI_enableEventsAndAccessField(\n+Java_FieldsEventsFromJNI_enableEventsAndAccessField(\n@@ -182,1 +169,1 @@\n-Java_TestFieldsEventsFromJNI_enableEventsAndModifyField(\n+Java_FieldsEventsFromJNI_enableEventsAndModifyField(\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/events\/FieldAccess\/FieldEventsFromJNI\/libJvmtiFieldEventsFromJNI.cpp","additions":4,"deletions":17,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -331,2 +331,1 @@\n-  char* generic = nullptr;\n-  jvmtiError err = jvmti->GetFieldName(field_class, field, &name, &signature, &generic);\n+  jvmtiError err = jvmti->GetFieldName(field_class, field, &name, &signature, nullptr);\n@@ -334,2 +333,1 @@\n-  deallocate(jvmti,jni, signature);\n-  deallocate(jvmti,jni, generic);\n+  deallocate(jvmti, jni, signature);\n@@ -339,0 +337,10 @@\n+static char*\n+get_object_class_name(jvmtiEnv *jvmti, JNIEnv* jni, jobject object) {\n+  char *obj_class_name = nullptr;\n+  jclass object_class = jni->GetObjectClass(object);\n+  jvmtiError err = jvmti->GetClassSignature(object_class, &obj_class_name, nullptr);\n+  check_jvmti_error(err, \"GetClassSignature\");\n+  jni->DeleteLocalRef(object_class);\n+  return obj_class_name;\n+}\n+\n","filename":"test\/lib\/jdk\/test\/lib\/jvmti\/jvmti_common.hpp","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"}]}