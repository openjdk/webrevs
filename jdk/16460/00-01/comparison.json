{"files":[{"patch":"@@ -1714,0 +1714,1 @@\n+  ResourceMark rm;\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1940,0 +1940,22 @@\n+\/\/ VM operation to support JvmtiHandshake for unmounted virtual threads.\n+\/\/ Used by the JvmtiHandshake class only.\n+class VM_HandshakeUnmountedVirtualThread : public VM_Operation {\n+private:\n+  JvmtiUnitedHandshakeClosure* _hs_cl;\n+  Handle _target_h;\n+\n+public:\n+  VM_HandshakeUnmountedVirtualThread(JvmtiUnitedHandshakeClosure* hs_cl, Handle target_h)\n+    : VM_Operation(),\n+      _hs_cl(hs_cl),\n+      _target_h(target_h) {}\n+  VMOp_Type type() const { return VMOp_HandshakeUnmountedVirtualThread; }\n+  void doit() {\n+    _hs_cl->do_vthread(_target_h);\n+  }\n+};\n+\n+\/\/ Supports platform and virtual threads.\n+\/\/ A VM_op is useed in a case if a JVMTI function implementation needs to walk\n+\/\/ the stack of an unmounted virtual thread.\n+\/\/ JvmtiVTMSTransitionDisabler is always set by this function.\n@@ -1959,0 +1981,6 @@\n+\/\/ Supports platform and virtual threads.\n+\/\/ A VM_op is useed in a case if a JVMTI function implementation needs to walk\n+\/\/ the stack of an unmounted virtual thread.\n+\/\/ A virtual thread is always identified by the target_h oop handle.\n+\/\/ The target_jt is always nullptr for an unmounted virtual thread.\n+\/\/ JvmtiVTMSTransitionDisabler has to be set before call to this function.\n@@ -1981,2 +2009,2 @@\n-    hs_cl->set_target_h(target_h);   \/\/ need this to differentiate between virtual and carrier thread\n-    if (self) {                      \/\/ target thread is current\n+    hs_cl->set_target_h(target_h); \/\/ need this to differentiate between virtual and carrier thread\n+    if (self) {                    \/\/ target thread is current\n@@ -2448,3 +2476,0 @@\n-  Thread* current = Thread::current();\n-  ResourceMark rm(current);\n-\n@@ -2455,0 +2480,2 @@\n+  Thread* current = Thread::current();\n+  ResourceMark rm(current);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":32,"deletions":5,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -466,0 +466,2 @@\n+\/\/ Used in combination with the JvmtiHandshake class.\n+\/\/ It is intended to support both platform and virtual threads.\n@@ -485,18 +487,0 @@\n-\/\/ VM operation o support JvmtiHandshake for unmounted virtual threads\n-class VM_HandshakeUnmountedVirtualThread : public VM_Operation {\n-private:\n-  JvmtiUnitedHandshakeClosure* _hs_cl;\n-  Handle _target_h;\n-\n-public:\n-  VM_HandshakeUnmountedVirtualThread(JvmtiUnitedHandshakeClosure* hs_cl, Handle target_h)\n-    : VM_Operation(),\n-      _hs_cl(hs_cl),\n-      _target_h(target_h) {}\n-  VMOp_Type type() const { return VMOp_HandshakeUnmountedVirtualThread; }\n-  void doit() {\n-    _hs_cl->do_vthread(_target_h);\n-  }\n-\n-};\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.hpp","additions":2,"deletions":18,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -124,4 +124,0 @@\n-  if (err == JVMTI_ERROR_THREAD_NOT_ALIVE ||\n-      err == JVMTI_ERROR_WRONG_PHASE) {\n-    return;\n-  }\n@@ -136,4 +132,0 @@\n-  if (err == JVMTI_ERROR_THREAD_NOT_ALIVE ||\n-      err == JVMTI_ERROR_WRONG_PHASE) {\n-    return;\n-  }\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/stress\/StackTrace\/Suspended\/libGetStackTraceSuspendedStress.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"}]}