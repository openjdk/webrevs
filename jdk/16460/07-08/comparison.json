{"files":[{"patch":"@@ -1943,0 +1943,19 @@\n+\/\/ AdapterClosure is to make use of JvmtiUnitedHandshakeClosure objects from\n+\/\/ Handshake::execute() which is unaware of the do_vthread() member functions.\n+class AdapterClosure : public HandshakeClosure {\n+  JvmtiUnitedHandshakeClosure* _hs_cl;\n+  Handle _target_h;\n+\n+ public:\n+  AdapterClosure(JvmtiUnitedHandshakeClosure* hs_cl, Handle target_h)\n+      : HandshakeClosure(hs_cl->name()), _hs_cl(hs_cl), _target_h(target_h) {}\n+\n+  virtual void do_thread(Thread* target) {\n+    if (java_lang_VirtualThread::is_instance(_target_h())) {\n+      _hs_cl->do_vthread(_target_h); \/\/ virtual thread\n+    } else {\n+      _hs_cl->do_thread(target);     \/\/ platform thread\n+    }\n+  }\n+};\n+\n@@ -1974,1 +1993,0 @@\n-  hs_cl->set_target_h(target_h);   \/\/ need this to differentiate between virtual and carrier thread\n@@ -1980,1 +1998,1 @@\n-    if (target_jt == nullptr) {    \/\/ unmounted virtual thread\n+    if (target_jt == nullptr) {    \/\/ current or unmounted virtual thread\n@@ -1985,2 +2003,3 @@\n-    if (self) {                    \/\/ target thread is current\n-      hs_cl->do_thread(target_jt); \/\/ execute handshake closure callback on current thread directly\n+    AdapterClosure acl(hs_cl, target_h);\n+    if (self) {                    \/\/ target platform thread is current\n+      acl.do_thread(target_jt);    \/\/ execute handshake closure callback on current thread directly\n@@ -1988,1 +2007,1 @@\n-      Handshake::execute(hs_cl, tlh, target_jt); \/\/ delegate to Handshake implementation\n+      Handshake::execute(&acl, tlh, target_jt); \/\/ delegate to Handshake implementation\n@@ -2387,4 +2406,0 @@\n-  if (java_lang_VirtualThread::is_instance(_target_h())) { \/\/ virtual thread\n-    do_vthread(_target_h);\n-    return;\n-  }\n@@ -2415,1 +2430,1 @@\n-  if (!_self && !JvmtiVTSuspender::is_vthread_suspended(_target_h())) {\n+  if (!_self && !JvmtiVTSuspender::is_vthread_suspended(target_h())) {\n@@ -2446,4 +2461,0 @@\n-  if (java_lang_VirtualThread::is_instance(_target_h())) { \/\/ virtual thread\n-    do_vthread(_target_h);\n-    return;\n-  }\n@@ -2526,5 +2537,0 @@\n-  if (java_lang_VirtualThread::is_instance(_target_h())) { \/\/ virtual thread\n-    do_vthread(_target_h);\n-    return;\n-  }\n-\n@@ -2546,4 +2552,0 @@\n-  if (java_lang_VirtualThread::is_instance(_target_h())) { \/\/ virtual thread\n-    do_vthread(_target_h);\n-    return;\n-  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":25,"deletions":23,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -470,1 +470,0 @@\n-  Handle _target_h;\n@@ -476,1 +475,0 @@\n-      _target_h(Handle()),\n@@ -480,2 +478,0 @@\n-  \/\/ used by JvmtiHandshake::execute\n-  void set_target_h(Handle target_h) { _target_h = target_h; }\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}