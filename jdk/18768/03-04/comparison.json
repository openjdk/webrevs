{"files":[{"patch":"@@ -1233,4 +1233,0 @@\n-    int skipped_insts_size   = code_buffer->total_skipped_instructions_size();\n-#ifdef ASSERT\n-    assert(((skipped_insts_size >> 16) == 0), \"size is bigger than 64Kb: %d\", skipped_insts_size);\n-\n@@ -1240,2 +1236,0 @@\n-#endif\n-    _skipped_instructions_size = (uint16_t)skipped_insts_size;\n@@ -1243,1 +1237,1 @@\n-    _stub_offset             = content_offset() + code_buffer->total_offset_of(code_buffer->stubs());\n+    _skipped_instructions_size = checked_cast<uint16_t>(code_buffer->total_skipped_instructions_size());\n@@ -1245,0 +1239,2 @@\n+    _stub_offset             = content_offset() + code_buffer->total_offset_of(code_buffer->stubs());\n+#ifdef ASSERT\n@@ -1249,3 +1245,3 @@\n-\n-    _metadata_offset         = (uint16_t)oops_size;\n-    _dependencies_offset     = _metadata_offset + (uint16_t)metadata_size;\n+#endif\n+    _metadata_offset         = checked_cast<uint16_t>(align_up(code_buffer->total_oop_size(), oopSize));\n+    _dependencies_offset     = _metadata_offset + checked_cast<uint16_t>(align_up(code_buffer->total_metadata_size(), wordSize));\n@@ -1267,2 +1263,2 @@\n-    _entry_offset            = (uint16_t)offsets->value(CodeOffsets::Entry);\n-    _verified_entry_offset   = (uint16_t)offsets->value(CodeOffsets::Verified_Entry);\n+    _entry_offset            = checked_cast<uint16_t>(offsets->value(CodeOffsets::Entry));\n+    _verified_entry_offset   = checked_cast<uint16_t>(offsets->value(CodeOffsets::Verified_Entry));\n@@ -1385,4 +1381,0 @@\n-    int skipped_insts_size = code_buffer->total_skipped_instructions_size();\n-#ifdef ASSERT\n-    assert(((skipped_insts_size >> 16) == 0), \"size is bigger than 64Kb: %d\", skipped_insts_size);\n-\n@@ -1392,2 +1384,2 @@\n-#endif\n-    _skipped_instructions_size = (uint16_t)skipped_insts_size;\n+\n+    _skipped_instructions_size = checked_cast<uint16_t>(code_buffer->total_skipped_instructions_size());\n@@ -1436,1 +1428,1 @@\n-\n+#ifdef ASSERT\n@@ -1442,4 +1434,4 @@\n-\n-    _metadata_offset      = (uint16_t)oops_size;\n-    _dependencies_offset  = _metadata_offset      + (uint16_t)metadata_size;\n-    _scopes_pcs_offset    = _dependencies_offset  + (uint16_t)deps_size;\n+#endif\n+    _metadata_offset      = checked_cast<uint16_t>(align_up(code_buffer->total_oop_size(), oopSize));\n+    _dependencies_offset  = _metadata_offset      + checked_cast<uint16_t>(align_up(code_buffer->total_metadata_size(), wordSize));\n+    _scopes_pcs_offset    = _dependencies_offset  + checked_cast<uint16_t>(align_up((int)dependencies->size_in_bytes(), oopSize));\n@@ -1459,2 +1451,2 @@\n-    _entry_offset          = (uint16_t)offsets->value(CodeOffsets::Entry);\n-    _verified_entry_offset = (uint16_t)offsets->value(CodeOffsets::Verified_Entry);\n+    _entry_offset          = checked_cast<uint16_t>(offsets->value(CodeOffsets::Entry));\n+    _verified_entry_offset = checked_cast<uint16_t>(offsets->value(CodeOffsets::Verified_Entry));\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":17,"deletions":25,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -969,0 +969,1 @@\n+    assert(is_native_method(), \"sanity\");\n@@ -972,0 +973,1 @@\n+    assert(is_native_method(), \"sanity\");\n","filename":"src\/hotspot\/share\/code\/nmethod.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,2 +57,1 @@\n-    LP64_ONLY( assert(((length >> 32) == 0), \"sanity\"); )\n-    _header._length = (uint32_t)length;\n+    _header._length = checked_cast<uint32_t>(length);\n@@ -63,1 +62,1 @@\n-  size_t length() const                          { return (size_t)_header._length; }\n+  size_t length() const                          { return _header._length; }\n","filename":"src\/hotspot\/share\/memory\/heap.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"}]}