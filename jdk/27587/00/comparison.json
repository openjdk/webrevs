{"files":[{"patch":"@@ -149,0 +149,4 @@\n+    private static final Float16 ZERO = valueOf(0);\n+\n+    private static final Float16 ONE  = valueOf(1);\n+\n@@ -615,1 +619,1 @@\n-            Float16.valueOf(1), Float16.valueOf(10), Float16.valueOf(100),\n+            Float16.ONE, Float16.valueOf(10), Float16.valueOf(100),\n@@ -652,1 +656,1 @@\n-                return Float16.valueOf(0);\n+                return ZERO;\n@@ -659,1 +663,1 @@\n-                return Float16.multiply(signum, Float16.valueOf(0));\n+                return Float16.multiply(signum, ZERO);\n@@ -732,1 +736,1 @@\n-        return ((bits & 0x7c00) == 0x7c00 && (bits & 0x03ff) != 0);\n+        return ((bits & EXP_BIT_MASK) == 0x7c00 && (bits & SIGNIF_BIT_MASK) != 0);\n@@ -751,2 +755,2 @@\n-        return ((float16ToRawShortBits(f16) ^\n-                 float16ToRawShortBits(POSITIVE_INFINITY)) & 0x7fff) == 0;\n+        return ((float16ToRawShortBits(f16) ^ float16ToRawShortBits(POSITIVE_INFINITY)) &\n+                (EXP_BIT_MASK | SIGNIF_BIT_MASK)) == 0;\n@@ -772,1 +776,1 @@\n-        return (float16ToRawShortBits(f16) & (short)0x0000_7FFF) <=\n+        return (float16ToRawShortBits(f16) & (EXP_BIT_MASK | SIGNIF_BIT_MASK)) <=\n@@ -1566,1 +1570,1 @@\n-            yield scalb(valueOf(1), exp - (PRECISION - 1));\n+            yield scalb(ONE, exp - (PRECISION - 1));\n@@ -1688,1 +1692,1 @@\n-        scaleFactor = Math.max(Math.min(scaleFactor, MAX_SCALE), -MAX_SCALE);\n+        scaleFactor = Math.clamp(scaleFactor, -MAX_SCALE, MAX_SCALE);\n@@ -1746,1 +1750,1 @@\n-        return (f.floatValue() == 0.0f || isNaN(f)) ? f : copySign(valueOf(1), f);\n+        return (f.floatValue() == 0.0f || isNaN(f)) ? f : copySign(ONE, f);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float16.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -411,2 +411,1 @@\n-            \/\/ Exponents are in-range for Float16\n-            Float16 result =  valueOfExact(getExponent(valueOfExact(arg)));\n+            float result =  (float)getExponent(valueOfExact(arg));\n@@ -414,2 +413,2 @@\n-            if (Float.compare(expected, result.floatValue()) != 0) {\n-                checkFloat16(result, expected, \"getExponent(\" + arg + \")\");\n+            if (Float.compare(expected, result) != 0) {\n+                checkFloat16(Float16.valueOf(result), expected, \"getExponent(\" + arg + \")\");\n@@ -447,2 +446,1 @@\n-            \/\/ Exponents are in-range for Float16\n-            Float16 result =  ulp(valueOfExact(arg));\n+            Float16 result = ulp(valueOfExact(arg));\n","filename":"test\/jdk\/jdk\/incubator\/vector\/BasicFloat16ArithTests.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}