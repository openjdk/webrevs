{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -350,0 +350,12 @@\n+    \/**\n+     * fchmodat(int fd, const char *path, mode_t mode, int flag)\n+     *\/\n+    static void fchmodat(int fd, UnixPath path, int mode, int flag)\n+        throws UnixException {\n+        try (NativeBuffer buffer = copyToNativeBuffer(path)) {\n+            fchmodat0(fd, buffer.address(), mode, flag);\n+        }\n+    }\n+    private static native void fchmodat0(int fd, long pathAddress, int mode, int flag)\n+        throws UnixException;\n+\n@@ -561,0 +573,8 @@\n+    \/**\n+     * Supports fchmodat with AT_SYMLINK_NOFOLLOW flag\n+     *\/\n+    static boolean fchmodatNoFollowSupported() {\n+        return fchmodatNoFollowSupported0();\n+    }\n+    private static native boolean fchmodatNoFollowSupported0();\n+\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixNativeDispatcher.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -417,8 +417,15 @@\n-                int fd = (file == null) ? dfd : open();\n-                try {\n-                    fchmod(fd, UnixFileModeAttribute.toUnixMode(perms));\n-                } catch (UnixException x) {\n-                    x.rethrowAsIOException(file);\n-                } finally {\n-                    if (file != null && fd >= 0)\n-                        UnixNativeDispatcher.close(fd, e-> null);\n+                if (file == null)\n+                    fchmod(dfd, UnixFileModeAttribute.toUnixMode(perms));\n+                else if (followLinks)\n+                    fchmodat(dfd, file, UnixFileModeAttribute.toUnixMode(perms), 0);\n+                else if (fchmodatNoFollowSupported())\n+                    fchmodat(dfd, file, UnixFileModeAttribute.toUnixMode(perms),\n+                             AT_SYMLINK_NOFOLLOW);\n+                else {\n+                    int fd = open();\n+                    try {\n+                        fchmod(fd, UnixFileModeAttribute.toUnixMode(perms));\n+                    } finally {\n+                        if (fd >= 0)\n+                            UnixNativeDispatcher.close(fd, e-> null);\n+                    }\n@@ -426,0 +433,2 @@\n+            } catch (UnixException x) {\n+                x.rethrowAsIOException(file);\n","filename":"src\/java.base\/unix\/classes\/sun\/nio\/fs\/UnixSecureDirectoryStream.java","additions":17,"deletions":8,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -401,0 +401,10 @@\n+JNIEXPORT jboolean JNICALL\n+Java_sun_nio_fs_UnixNativeDispatcher_fchmodatNoFollowSupported0(JNIEnv* env, jclass this) {\n+#if defined(__linux__)\n+    \/\/ Linux recognizes but does not support the AT_SYMLINK_NOFOLLOW flag\n+    return JNI_FALSE;\n+#else\n+    return JNI_TRUE;\n+#endif\n+}\n+\n@@ -800,0 +810,13 @@\n+JNIEXPORT void JNICALL\n+Java_sun_nio_fs_UnixNativeDispatcher_fchmodat0(JNIEnv* env, jclass this,\n+    jint fd, jlong pathAddress, jint mode, jint flag)\n+{\n+    int err;\n+    const char* path = (const char*)jlong_to_ptr(pathAddress);\n+\n+    RESTARTABLE(fchmodat((int)fd, path, (mode_t)mode, (int)flag), err);\n+    if (err == -1) {\n+        throwUnixException(env, errno);\n+    }\n+}\n+\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":23,"deletions":0,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2008, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2008, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4313887 6838333 8343020\n+ * @bug 4313887 6838333 8343020 8357425\n@@ -28,1 +28,3 @@\n- * @library ..\n+ * @library .. \/test\/lib\n+ * @build jdk.test.lib.Platform\n+ * @run main SecureDS\n@@ -40,0 +42,2 @@\n+import jdk.test.lib.Platform;\n+\n@@ -57,0 +61,1 @@\n+            doSetPermissions(dir);\n@@ -175,0 +180,56 @@\n+    \/\/ Exercise setting permisions on the SecureDirectoryStream's view\n+    static void doSetPermissions(Path dir) throws IOException {\n+        Path aDir = createDirectory(dir.resolve(\"dir\"));\n+\n+        Set<PosixFilePermission> noperms = EnumSet.noneOf(PosixFilePermission.class);\n+        Set<PosixFilePermission> permsDir = getPosixFilePermissions(aDir);\n+\n+        SecureDirectoryStream<Path> stream =\n+            (SecureDirectoryStream<Path>)newDirectoryStream(aDir);\n+\n+        \/\/ Test setting permission on directory with no permissions\n+        setPosixFilePermissions(aDir, noperms);\n+        assertTrue(getPosixFilePermissions(aDir).equals(noperms));\n+        PosixFileAttributeView view = stream.getFileAttributeView(aDir, PosixFileAttributeView.class);\n+        view.setPermissions(permsDir);\n+        assertTrue(getPosixFilePermissions(aDir).equals(permsDir));\n+\n+        if (supportsSymbolicLinks) {\n+            \/\/ Create a file and a link to the file\n+            Path fileEntry = Path.of(\"file\");\n+            Path file = createFile(aDir.resolve(fileEntry));\n+            Set<PosixFilePermission> permsFile = getPosixFilePermissions(file);\n+            Path linkEntry = Path.of(\"link\");\n+            Path link = createSymbolicLink(aDir.resolve(linkEntry), fileEntry);\n+            Set<PosixFilePermission> permsLink = getPosixFilePermissions(link, NOFOLLOW_LINKS);\n+\n+            \/\/ Test following link to file\n+            view = stream.getFileAttributeView(link, PosixFileAttributeView.class);\n+            view.setPermissions(noperms);\n+            assertTrue(getPosixFilePermissions(file).equals(noperms));\n+            assertTrue(getPosixFilePermissions(link, NOFOLLOW_LINKS).equals(permsLink));\n+            view.setPermissions(permsFile);\n+            assertTrue(getPosixFilePermissions(file).equals(permsFile));\n+            assertTrue(getPosixFilePermissions(link, NOFOLLOW_LINKS).equals(permsLink));\n+\n+            \/\/ Symbolic link permissions do not apply on Linux\n+            if (!Platform.isLinux()) {\n+                \/\/ Test not following link to file\n+                view = stream.getFileAttributeView(link, PosixFileAttributeView.class, NOFOLLOW_LINKS);\n+                view.setPermissions(noperms);\n+                assertTrue(getPosixFilePermissions(file).equals(permsFile));\n+                assertTrue(getPosixFilePermissions(link, NOFOLLOW_LINKS).equals(noperms));\n+                view.setPermissions(permsLink);\n+                assertTrue(getPosixFilePermissions(file).equals(permsFile));\n+                assertTrue(getPosixFilePermissions(link, NOFOLLOW_LINKS).equals(permsLink));\n+            }\n+\n+            delete(link);\n+            delete(file);\n+        }\n+\n+        \/\/ clean-up\n+        stream.close();\n+        delete(aDir);\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/file\/DirectoryStream\/SecureDS.java","additions":64,"deletions":3,"binary":false,"changes":67,"status":"modified"}]}