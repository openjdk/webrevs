{"files":[{"patch":"@@ -4641,0 +4641,3 @@\n+  \/\/ One does not need extra character in the end, from documentation:\n+  \/\/ \"If the function fails because lpszFilePath is too small to hold the string plus the terminating null character,\n+  \/\/ the return value is the required buffer size, in TCHARs. This value INCLUDES the size of the terminating null character.\"\n@@ -4649,1 +4652,1 @@\n-  WCHAR* path_to_target = NEW_C_HEAP_ARRAY(WCHAR, target_path_size + 1, mtInternal);\n+  WCHAR* path_to_target = NEW_C_HEAP_ARRAY(WCHAR, target_path_size, mtInternal);\n@@ -4651,1 +4654,5 @@\n-  const size_t res = ::GetFinalPathNameByHandleW(hFile, path_to_target, static_cast<DWORD>(target_path_size + 1),\n+  \/\/ Here is a tricky call of the same method. From documentation:\n+  \/\/ \"If the function succeeds, the return value is the length of the string received by lpszFilePath,\n+  \/\/ in TCHARs.This value DOES NOT INCLUDE the size of the terminating null character.\"\n+  \/\/ So the return value is ONE LESS than target_path_size if everything is ok\n+  const size_t res = ::GetFinalPathNameByHandleW(hFile, path_to_target, static_cast<DWORD>(target_path_size),\n@@ -4653,1 +4660,1 @@\n-  if (res == 0) {\n+  if (res != target_path_size - 1) {\n@@ -4665,1 +4672,1 @@\n-  path_to_target[target_path_size] = '\\0';\n+  path_to_target[target_path_size - 1] = '\\0';\n","filename":"src\/hotspot\/os\/windows\/os_windows.cpp","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -48,2 +48,0 @@\n-        Path classDir = Paths.get(System.getProperty(\"test.classes\"));\n-        Path destDir = classDir;\n@@ -52,1 +50,1 @@\n-        destDir = Paths.get(System.getProperty(\"test.classes\"), subPath);\n+        Path destDir = Paths.get(System.getProperty(\"test.classes\"), subPath);\n","filename":"test\/hotspot\/jtreg\/runtime\/LoadClass\/TestSymlinkLoad.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"}]}