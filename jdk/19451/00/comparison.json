{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -154,0 +154,1 @@\n+                                    result = tree;\n@@ -158,0 +159,1 @@\n+                                    result = tree;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/AttrRecover.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8301580 8322159 8332230\n+ * @bug 8301580 8322159 8333107 8332230\n@@ -160,0 +160,46 @@\n+    @Test \/\/JDK-8333107\n+    public void testNestedLambda() throws Exception {\n+        String code = \"\"\"\n+                      public class Dummy {\n+                          private void main() {\n+                              Stream l = null;\n+                              l.map(a -> {\n+                                  l.map(b -> {\n+                                      return null;\n+                                  });\n+                                  l.map(new FI() {\n+                                      public String convert(String s) {\n+                                          return null;\n+                                      }\n+                                  });\n+                                  class Local {}\n+                              });\n+                          }\n+                          public interface Stream {\n+                              public void map(FI fi);\n+                          }\n+                          public interface FI {\n+                              public String convert(String s);\n+                          }\n+                      }\n+                      \"\"\";\n+        Path curPath = Path.of(\".\");\n+        List<String> actual = new JavacTask(tb)\n+                .options(\"-XDrawDiagnostics\", \"-XDdev\",\n+                         \"-XDshould-stop.at=FLOW\")\n+                .sources(code)\n+                .outdir(curPath)\n+                .run(Expect.FAIL)\n+                .writeAll()\n+                .getOutputLines(OutputKind.DIRECT);\n+\n+        List<String> expected = List.of(\n+                \"Dummy.java:4:10: compiler.err.cant.apply.symbol: kindname.method, map, Dummy.FI, @15, kindname.interface, Dummy.Stream, (compiler.misc.no.conforming.assignment.exists: (compiler.misc.incompatible.ret.type.in.lambda: (compiler.misc.missing.ret.val: java.lang.String)))\",\n+                \"1 error\"\n+        );\n+\n+        if (!Objects.equals(actual, expected)) {\n+            error(\"Expected: \" + expected + \", but got: \" + actual);\n+        }\n+    }\n+\n","filename":"test\/langtools\/tools\/javac\/recovery\/AttrRecovery.java","additions":47,"deletions":1,"binary":false,"changes":48,"status":"modified"}]}