{"files":[{"patch":"@@ -333,0 +333,1 @@\n+                    decl.sym = syms.errModule;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.util.function.BiConsumer;\n@@ -53,1 +54,3 @@\n-    int expectedExitCode = 0;\n+    \/\/validator for exit codes, first parameter is the exit code\n+    \/\/the second the test name:\n+    private BiConsumer<Integer, String> exitCodeValidator = null;\n@@ -70,1 +73,1 @@\n-        expect(expect, Integer.MIN_VALUE);\n+        expect(expect, (_, _) -> {});\n@@ -86,0 +89,34 @@\n+    \/**\n+     * Sets the expected outcome of the task and calls {@code run()}.\n+     * @param expect the expected outcome\n+     * @param exitCodeValidator an exit code validator. The first parameter will\n+     *                          be the actual exit code, the second test name,\n+     *                          should throw TaskError is the exit code is not\n+     *                          as expected. Only used if the expected outcome\n+     *                          is {@code FAIL}\n+     * @return the result of calling {@code run()}\n+     *\/\n+    public Result run(Expect expect,\n+                      BiConsumer<Integer, String> exitCodeValidator) {\n+        expect(expect, exitCodeValidator);\n+        return run();\n+    }\n+\n+    \/**\n+     * Sets the expected outcome and expected exit code of the task.\n+     * The exit code will not be checked if the outcome is\n+     * {@code Expect.SUCCESS} or if the exit code is set to\n+     * {@code Integer.MIN_VALUE}.\n+     * @param expect the expected outcome\n+     * @param expectedExitCode the expected exit code\n+     *\/\n+    protected void expect(Expect expect, int expectedExitCode) {\n+        expect(expect, (exitCode, testName) -> {\n+            if (expectedExitCode != Integer.MIN_VALUE &&\n+                exitCode != expectedExitCode) {\n+                throw new TaskError(\"Task \" + testName + \"failed with unexpected exit code \"\n+                    + exitCode + \", expected \" + expectedExitCode);\n+            }\n+        });\n+    }\n+\n@@ -92,1 +129,5 @@\n-     * @param exitCode the expected exit code\n+     * @param exitCodeValidator an exit code validator. The first parameter will\n+     *                          be the actual exit code, the second test name,\n+     *                          should throw TaskError is the exit code is not\n+     *                          as expected. Only used if the expected outcome\n+     *                          is {@code FAIL}\n@@ -94,1 +135,2 @@\n-    protected void expect(Expect expect, int exitCode) {\n+    protected void expect(Expect expect,\n+                          BiConsumer<Integer, String> exitCodeValidator) {\n@@ -96,1 +138,1 @@\n-        this.expectedExitCode = exitCode;\n+        this.exitCodeValidator = exitCodeValidator;\n@@ -122,2 +164,3 @@\n-                if (expectedExitCode != Integer.MIN_VALUE\n-                        && result.exitCode != expectedExitCode) {\n+                try {\n+                    exitCodeValidator.accept(result.exitCode, name());\n+                } catch (Throwable t) {\n@@ -125,2 +168,1 @@\n-                    throw new TaskError(\"Task \" + name() + \"failed with unexpected exit code \"\n-                        + result.exitCode + \", expected \" + expectedExitCode);\n+                    throw t;\n","filename":"test\/langtools\/tools\/lib\/toolbox\/AbstractTask.java","additions":51,"deletions":9,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -317,0 +317,20 @@\n+    @Override\n+    public Result run(Expect expect) {\n+        int expectedExitCode = expect == Expect.SUCCESS ? 0 : 1;\n+\n+        return run(expect, (exitCode, testName) -> {\n+            if (exitCode == 4) {\n+                throw new TaskError(\"Task \" + testName + \" failed due to a javac crash \"\n+                    + \"(exit code 4)\");\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public Result run(Expect expect, int exitCode) {\n+        if (exitCode == 4) {\n+            throw new IllegalArgumentException(\"Disallowed exit code: 4\");\n+        }\n+        return super.run(expect, exitCode);\n+    }\n+\n","filename":"test\/langtools\/tools\/lib\/toolbox\/JavacTask.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}