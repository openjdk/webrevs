{"files":[{"patch":"@@ -742,3 +742,0 @@\n-  \/\/ returns the size of the instance of the given class\n-  static u4 instance_size(InstanceKlass* ik, DumperClassCacheTableEntry* class_cache_entry = nullptr);\n-\n@@ -1044,15 +1041,0 @@\n-\/\/ returns the size of the instance of the given class\n-u4 DumperSupport::instance_size(InstanceKlass* ik, DumperClassCacheTableEntry* class_cache_entry) {\n-  if (class_cache_entry != nullptr) {\n-    return class_cache_entry->instance_size();\n-  } else {\n-    u4 size = 0;\n-    for (HierarchicalFieldStream<JavaFieldStream> fld(ik); !fld.done(); fld.next()) {\n-      if (!fld.access_flags().is_static()) {\n-        size += sig2size(fld.signature());\n-      }\n-    }\n-    return size;\n-  }\n-}\n-\n@@ -1167,1 +1149,1 @@\n-  u4 is = instance_size(ik, cache_entry);\n+  u4 is = cache_entry->instance_size();\n@@ -1226,1 +1208,1 @@\n-  writer->write_u4(DumperSupport::instance_size(ik));\n+  writer->write_u4(checked_cast<u4>(HeapWordSize * ik->size_helper()));\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -748,2 +748,1 @@\n-        if (k instanceof InstanceKlass) {\n-            InstanceKlass ik = (InstanceKlass) k;\n+        if (k instanceof InstanceKlass ik) {\n@@ -757,3 +756,4 @@\n-            int instSize = getSizeForFields(fields);\n-            classDataCache.put(ik, new ClassData(instSize, fields));\n-            out.writeInt(instSize);\n+            int fieldSize = getSizeForFields(fields);\n+            classDataCache.put(ik, new ClassData(fieldSize, fields));\n+            long instanceSize = ik.getSizeHelper() * VM.getVM().getBytesPerWord();\n+            out.writeInt((int)instanceSize);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/HeapHprofBinWriter.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -75,0 +75,1 @@\n+serviceability\/sa\/HeapDumpInstanceSize.java                   8307393   generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList-generational-zgc.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,139 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.Collection;\n+import java.util.List;\n+import java.io.File;\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.hprof.model.JavaClass;\n+import jdk.test.lib.hprof.model.Snapshot;\n+import jdk.test.lib.hprof.parser.Reader;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jtreg.SkippedException;\n+\n+\/**\n+ * @test\n+ * @bug 8176520\n+ * @summary Test that heap dumpers (VM and SA) report correct instance size in HPROF_GC_CLASS_DUMP records\n+ * @requires vm.jvmti\n+ * @requires vm.hasSA\n+ * @library \/test\/lib\n+ * @run main\/othervm HeapDumpInstanceSize\n+ *\/\n+\n+public class HeapDumpInstanceSize {\n+\n+    private static Snapshot readHeapdump(File file) throws Exception {\n+        System.out.println(\"Reading \" + file + \"...\");\n+        Snapshot snapshot = Reader.readFile(file.getPath(), true, 0);\n+        System.out.println(\"Resolving snapshot...\");\n+        snapshot.resolve(true);\n+        System.out.println(\"Snapshot resolved.\");\n+        return snapshot;\n+    }\n+\n+    private static Snapshot heapdumpSA(long pid, String fileName) throws Exception {\n+        File dumpFile = new File(fileName);\n+        ClhsdbLauncher launcher = new ClhsdbLauncher();\n+        String command = \"dumpheap \" + fileName;\n+        List<String> cmds = List.of(command);\n+        launcher.run(pid, cmds, null, null);\n+        return readHeapdump(dumpFile);\n+    }\n+\n+    private static Snapshot heapdumpVM(long pid, String fileName) throws Exception {\n+        File dumpFile = new File(fileName);\n+        \/\/ jcmd <pid> GC.heap_dump <file_path>\n+        JDKToolLauncher launcher = JDKToolLauncher\n+                .createUsingTestJDK(\"jcmd\")\n+                .addToolArg(Long.toString(pid))\n+                .addToolArg(\"GC.heap_dump\")\n+                .addToolArg(dumpFile.getAbsolutePath());\n+        OutputAnalyzer oa = ProcessTools.executeProcess(new ProcessBuilder(launcher.getCommand()));\n+        System.out.println(\"Output: \");\n+        System.out.println(oa.getOutput());\n+\n+        return readHeapdump(dumpFile);\n+    }\n+\n+    private static void testClasses(String name, Snapshot snapshot, Snapshot otherSnapshot) {\n+        System.out.println(\"Testing \" + name + \" classes...\");\n+        int cnt = 0;\n+        \/\/ save the last error message to throw an exception\n+        String errorMsg = null;\n+        Collection<JavaClass> classes = snapshot.getClasses();\n+        for (JavaClass cls: classes) {\n+            JavaClass otherClass = otherSnapshot.findClass(cls.getName());\n+            int instSize = cls.getInstanceSize();\n+            if (otherClass == null) {\n+                \/\/ it's ok, just log it\n+                System.out.println(\"  - \" + cls.getName() + \": only in \" + name + \" heapdump\");\n+            } else {\n+                if (instSize != otherClass.getInstanceSize()) {\n+                    errorMsg = \"ERROR \" + cls.getName() + \" - different instance size: \"\n+                               + instSize + \" != \" + otherClass.getInstanceSize();\n+                    System.out.println(\"  - \" + errorMsg);\n+                }\n+            }\n+\n+            if (cls.isArray()) {\n+                \/\/ for arrays instance size should be 0\n+                if (instSize != 0) {\n+                    errorMsg = \"ERROR \" + cls.getName()\n+                               + \" - instance size for array is not 0: \" + instSize;\n+                    System.out.println(\"  - \" + errorMsg);\n+                }\n+            } else {\n+                \/\/ non-array should have >0 instance size\n+                if (instSize == 0) {\n+                    errorMsg = \"ERROR \" + cls.getName() + \": instance size is 0\";\n+                    System.out.println(\"  - \" + errorMsg);\n+                }\n+            }\n+\n+            cnt++;\n+        }\n+        System.out.println(name + \": found \" + cnt + \" classes.\");\n+        if (errorMsg != null) {\n+            throw new RuntimeException(errorMsg);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        LingeredApp theApp = null;\n+        try {\n+            theApp = new LingeredApp();\n+            LingeredApp.startApp(theApp);\n+\n+            try (Snapshot snapshot1 = heapdumpSA(theApp.getPid(), \"sa_heapdump.hprof\");\n+                 Snapshot snapshot2 = heapdumpVM(theApp.getPid(), \"vm_heapdump.hprof\")) {\n+                testClasses(\"SA\", snapshot1, snapshot2);\n+                testClasses(\"VM\", snapshot2, snapshot1);\n+            }\n+        } finally {\n+            LingeredApp.stopApp(theApp);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/HeapDumpInstanceSize.java","additions":139,"deletions":0,"binary":false,"changes":139,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2017, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -377,1 +377,1 @@\n-        return instanceSize + mySnapshot.getMinimumObjectSize();\n+        return instanceSize;\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/JavaClass.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -388,1 +388,1 @@\n-     * Return an Iterator of all of the classes in this snapshot.\n+     * Return a Collection of all of the classes in this snapshot.\n@@ -390,4 +390,2 @@\n-    public Iterator<JavaClass> getClasses() {\n-        \/\/ note that because classes is a TreeMap\n-        \/\/ classes are already sorted by name\n-        return classes.values().iterator();\n+    public Collection<JavaClass> getClasses() {\n+        return Collections.unmodifiableCollection(classes.values());\n","filename":"test\/lib\/jdk\/test\/lib\/hprof\/model\/Snapshot.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"}]}