{"files":[{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.util.Collection;\n+import java.io.File;\n+import jdk.test.lib.JDKToolLauncher;\n+import jdk.test.lib.apps.LingeredApp;\n+import jdk.test.lib.hprof.HprofParser;\n+import jdk.test.lib.hprof.model.JavaClass;\n+import jdk.test.lib.hprof.model.Snapshot;\n+import jdk.test.lib.hprof.parser.Reader;\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+\n+\/**\n+ * @test\n+ * @bug 8176520\n+ * @summary Test that heap dumper reports correct instance size in HPROF_GC_CLASS_DUMP records\n+ * @requires vm.jvmti\n+ * @library \/test\/lib\n+ * @run main\/othervm HeapDumpInstanceSize\n+ *\/\n+\n+public class HeapDumpInstanceSize {\n+\n+    private static File createDump(long pid, String fileName) throws Exception {\n+        File dumpFile = new File(fileName);\n+        \/\/ jcmd <pid> GC.heap_dump <file_path>\n+        JDKToolLauncher launcher = JDKToolLauncher\n+                .createUsingTestJDK(\"jcmd\")\n+                .addToolArg(Long.toString(pid))\n+                .addToolArg(\"GC.heap_dump\")\n+                .addToolArg(dumpFile.getAbsolutePath());\n+        OutputAnalyzer oa = ProcessTools.executeProcess(new ProcessBuilder(launcher.getCommand()));\n+        System.out.println(\"Output: \");\n+        System.out.println(oa.getOutput());\n+\n+        return dumpFile;\n+    }\n+\n+    private static Snapshot readDump(File file) throws Exception {\n+        System.out.println(\"Reading \" + file + \"...\");\n+        Snapshot snapshot = Reader.readFile(file.getPath(), true, 0);\n+        System.out.println(\"Resolving snapshot...\");\n+        snapshot.resolve(true);\n+        System.out.println(\"Snapshot resolved.\");\n+        return snapshot;\n+    }\n+\n+    private static void testClasses(Snapshot snapshot) {\n+        System.out.println(\"Testing classes...\");\n+        int cnt = 0;\n+        \/\/ save the last error message to throw an exception\n+        String errorMsg = null;\n+\n+        Collection<JavaClass> classes = snapshot.getClasses();\n+        for (JavaClass cls: classes) {\n+            int instSize = cls.getInstanceSize();\n+            if (cls.isArray()) {\n+                \/\/ for arrays instance size should be 0\n+                if (instSize != 0) {\n+                    errorMsg = \"ERROR \" + cls.getName()\n+                               + \" - instance size for array is not 0: \" + instSize;\n+                    System.out.println(\"  - \" + errorMsg);\n+                }\n+            } else {\n+                \/\/ non-array should have >0 instance size\n+                if (instSize == 0) {\n+                    errorMsg = \"ERROR \" + cls.getName() + \": instance size is 0\";\n+                    System.out.println(\"  - \" + errorMsg);\n+                }\n+            }\n+\n+            cnt++;\n+        }\n+        System.out.println(\"Found \" + cnt + \" classes.\");\n+        if (errorMsg != null) {\n+            throw new RuntimeException(errorMsg);\n+        }\n+    }\n+\n+    private static void verifyDump(File fileDump) throws Exception {\n+        System.out.println(\"Verifying \" + fileDump + \"...\");\n+        HprofParser.parseAndVerify(fileDump);\n+\n+        try (Snapshot snapshot = readDump(fileDump)) {\n+            testClasses(snapshot);\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        LingeredApp theApp = null;\n+        try {\n+            theApp = new LingeredApp();\n+            LingeredApp.startApp(theApp);\n+\n+            File dumpFile = createDump(theApp.getPid(), \"heapdump.hprof\");\n+            verifyDump(dumpFile);\n+        } finally {\n+            LingeredApp.stopApp(theApp);\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/serviceability\/HeapDump\/HeapDumpInstanceSize.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+import jdk.test.lib.hprof.HprofParser;\n@@ -39,1 +40,1 @@\n- * @summary Test that heap dumpers (VM and SA) report correct instance size in HPROF_GC_CLASS_DUMP records\n+ * @summary Test that heap dumpers (VM and SA) report consistent instance size in HPROF_GC_CLASS_DUMP records\n@@ -49,0 +50,2 @@\n+        System.out.println(\"Verifying \" + file + \"...\");\n+        HprofParser.parseAndVerify(file);\n@@ -81,2 +84,2 @@\n-    private static void testClasses(String name, Snapshot snapshot, Snapshot otherSnapshot) {\n-        System.out.println(\"Testing \" + name + \" classes...\");\n+    private static void testClasses(Snapshot snapshotSA, Snapshot snapshotVM) {\n+        System.out.println(\"Testing classes...\");\n@@ -86,1 +89,1 @@\n-        Collection<JavaClass> classes = snapshot.getClasses();\n+        Collection<JavaClass> classes = snapshotSA.getClasses();\n@@ -88,1 +91,1 @@\n-            JavaClass otherClass = otherSnapshot.findClass(cls.getName());\n+            JavaClass otherClass = snapshotVM.findClass(cls.getName());\n@@ -92,1 +95,1 @@\n-                System.out.println(\"  - \" + cls.getName() + \": only in \" + name + \" heapdump\");\n+                System.out.println(\"  - \" + cls.getName() + \": is not present in VM heapdump\");\n@@ -118,1 +121,1 @@\n-        System.out.println(name + \": found \" + cnt + \" classes.\");\n+        System.out.println(\"Found \" + cnt + \" classes.\");\n@@ -130,4 +133,3 @@\n-            try (Snapshot snapshot1 = heapdumpSA(theApp.getPid(), \"sa_heapdump.hprof\");\n-                 Snapshot snapshot2 = heapdumpVM(theApp.getPid(), \"vm_heapdump.hprof\")) {\n-                testClasses(\"SA\", snapshot1, snapshot2);\n-                testClasses(\"VM\", snapshot2, snapshot1);\n+            try (Snapshot snapshotSA = heapdumpSA(theApp.getPid(), \"sa_heapdump.hprof\");\n+                 Snapshot snapshotVM = heapdumpVM(theApp.getPid(), \"vm_heapdump.hprof\")) {\n+                testClasses(snapshotSA, snapshotVM);\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/HeapDumpInstanceSize.java","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"}]}