{"files":[{"patch":"@@ -70,2 +70,2 @@\n-    private final List<SettingDesc> settingsDescs;\n-    private final List<FieldDesc> fieldDescs;\n+    private final List<SettingDesc> settingsDescs = new ArrayList<>();\n+    private final List<FieldDesc> fieldDescs = new ArrayList<>();\n@@ -80,2 +80,0 @@\n-        this.settingsDescs = buildSettingDescs();\n-        this.fieldDescs = buildFieldDescs();\n@@ -92,1 +90,0 @@\n-\n@@ -167,1 +164,1 @@\n-    List<SettingDesc> getSettingDescs() {\n+    List<SettingDesc> getSettings() {\n@@ -171,1 +168,1 @@\n-    List<FieldDesc> getFieldDescs() {\n+    List<FieldDesc> getFields() {\n@@ -257,1 +254,1 @@\n-    private List<SettingDesc> buildSettingDescs() {\n+    void buildSettings() {\n@@ -259,4 +256,2 @@\n-        List<SettingDesc> settingDescs = new ArrayList<>();\n-        settingDescs.addAll(collectClassSettings(foundMethods));\n-        settingDescs.addAll(collectSuperClassSettings(foundMethods));\n-        return settingDescs;\n+        buildClassSettings(foundMethods);\n+        buildSuperClassSettings(foundMethods);\n@@ -265,2 +260,1 @@\n-    private List<SettingDesc> collectClassSettings(Set<String> foundMethods) {\n-        List<SettingDesc> list = new ArrayList<>();\n+    private void buildClassSettings(Set<String> foundMethods) {\n@@ -297,1 +291,1 @@\n-                                        list.add(new SettingDesc(type, methodName));\n+                                        settingsDescs.add(new SettingDesc(type, methodName));\n@@ -306,1 +300,0 @@\n-        return list;\n@@ -309,2 +302,1 @@\n-    private List<SettingDesc> collectSuperClassSettings(Set<String> foundMethods) {\n-        List<SettingDesc> list = new ArrayList<>();\n+    private void buildSuperClassSettings(Set<String> foundMethods) {\n@@ -314,12 +306,16 @@\n-                    \/\/ Skip private methods in base classes\n-                    if (!Modifier.isPrivate(method.getModifiers())) {\n-                        if (method.getReturnType().equals(Boolean.TYPE)) {\n-                            if (method.getParameterCount() == 1) {\n-                                Class<?> type = method.getParameters()[0].getType();\n-                                if (SettingControl.class.isAssignableFrom(type)) {\n-                                    ClassDesc paramType = Bytecode.classDesc(type);\n-                                    foundMethods.add(method.getName());\n-                                    list.add(new SettingDesc(paramType, method.getName()));\n-                                }\n-                            }\n-                        }\n+                    buildSettingsMethod(foundMethods, method);\n+                }\n+            }\n+        }\n+    }\n+\n+    private void buildSettingsMethod(Set<String> foundMethods, java.lang.reflect.Method method) {\n+        \/\/ Skip private methods in base classes\n+        if (!Modifier.isPrivate(method.getModifiers())) {\n+            if (method.getReturnType().equals(Boolean.TYPE)) {\n+                if (method.getParameterCount() == 1) {\n+                    Class<?> type = method.getParameters()[0].getType();\n+                    if (SettingControl.class.isAssignableFrom(type)) {\n+                        ClassDesc paramType = Bytecode.classDesc(type);\n+                        foundMethods.add(method.getName());\n+                        settingsDescs.add(new SettingDesc(paramType, method.getName()));\n@@ -330,1 +326,0 @@\n-        return list;\n@@ -333,3 +328,2 @@\n-    private List<FieldDesc> buildFieldDescs() {\n-        Set<String> fieldSet = new HashSet<>();\n-        List<FieldDesc> fieldDescs = new ArrayList<>(classModel.fields().size());\n+    void buildFields() {\n+        Set<String> foundFields = new HashSet<>();\n@@ -347,1 +341,1 @@\n-            if (!fieldSet.contains(field.fieldName().stringValue()) && isValidField(field.flags().flagsMask(), field.fieldTypeSymbol())) {\n+            if (!foundFields.contains(field.fieldName().stringValue()) && isValidField(field.flags().flagsMask(), field.fieldTypeSymbol())) {\n@@ -349,1 +343,1 @@\n-                fieldSet.add(field.fieldName().stringValue());\n+                foundFields.add(field.fieldName().stringValue());\n@@ -358,1 +352,1 @@\n-                        if (!fieldSet.contains(fieldName)) {\n+                        if (!foundFields.contains(fieldName)) {\n@@ -360,1 +354,1 @@\n-                            fieldSet.add(fieldName);\n+                            foundFields.add(fieldName);\n@@ -366,1 +360,0 @@\n-        return fieldDescs;\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/ClassInspector.java","additions":32,"deletions":39,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -102,0 +102,5 @@\n+        inspector.buildFields();\n+        if (!inspector.isJDK()) {\n+            \/\/ Only user-defined events have custom settings.\n+            inspector.buildSettings();\n+        }\n@@ -207,1 +212,1 @@\n-        List<SettingDesc> settingDescs = inspector.getSettingDescs();\n+        List<SettingDesc> settingDescs = inspector.getSettings();\n@@ -375,1 +380,1 @@\n-        List<FieldDesc> fieldDescs = inspector.getFieldDescs();\n+        List<FieldDesc> fieldDescs = inspector.getFields();\n@@ -486,1 +491,1 @@\n-        List<FieldDesc> fieldDescs = inspector.getFieldDescs();\n+        List<FieldDesc> fieldDescs = inspector.getFields();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":8,"deletions":3,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -83,0 +83,1 @@\n+            t.printStackTrace();\n@@ -133,0 +134,1 @@\n+            t.printStackTrace();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/JVMUpcalls.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"}]}