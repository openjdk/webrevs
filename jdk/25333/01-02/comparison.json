{"files":[{"patch":"@@ -974,7 +974,0 @@\n-    void delay () {\n-        Thread.yield();\n-        try {\n-            Thread.sleep (200);\n-        } catch (InterruptedException e) {}\n-    }\n-\n","filename":"src\/jdk.httpserver\/share\/classes\/sun\/net\/httpserver\/ServerImpl.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.test.lib.net.URIBuilder;\n@@ -35,0 +36,1 @@\n+import java.net.URISyntaxException;\n@@ -288,17 +290,23 @@\n-        final HttpRequest request = HttpRequest.newBuilder()\n-                .uri(URI.create(\"http:\/\/\"\n-                                + server.getAddress().getAddress().getHostAddress()\n-                                + \":\" + server.getAddress().getPort() + \"\/\"))\n-                \/\/ We need to use POST to prevent retries\n-                .POST(HttpRequest.BodyPublishers.ofString(\"\"))\n-                .build();\n-\n-        client.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n-                .whenCompleteAsync((r, t) -> {\n-                    System.out.println(\"request completed (\" + r + \", \" + t + \")\");\n-                    \/\/ count the latch down to allow the handler to complete\n-                    \/\/ and the server's dispatcher thread to proceed; The handler\n-                    \/\/ is called within the dispatcher thread since we haven't\n-                    \/\/ set any executor on the server side\n-                    complete.countDown();\n-                });\n+        try {\n+            final HttpRequest request = HttpRequest.newBuilder()\n+                    .uri(URIBuilder.newBuilder()\n+                            .scheme(\"http\")\n+                            .loopback()\n+                            .port(server.getAddress().getPort())\n+                            .build())\n+                    \/\/ We need to use POST to prevent retries\n+                    .POST(HttpRequest.BodyPublishers.ofString(\"\"))\n+                    .build();\n+\n+            client.sendAsync(request, HttpResponse.BodyHandlers.ofString())\n+                    .whenCompleteAsync((r, t) -> {\n+                        System.out.println(\"request completed (\" + r + \", \" + t + \")\");\n+                        \/\/ count the latch down to allow the handler to complete\n+                        \/\/ and the server's dispatcher thread to proceed; The handler\n+                        \/\/ is called within the dispatcher thread since we haven't\n+                        \/\/ set any executor on the server side\n+                        complete.countDown();\n+                    });\n+        } catch (final URISyntaxException e) {\n+            throw new RuntimeException(e);\n+        }\n","filename":"test\/jdk\/com\/sun\/net\/httpserver\/ServerStopTerminationTest.java","additions":25,"deletions":17,"binary":false,"changes":42,"status":"modified"}]}