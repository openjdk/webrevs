{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -116,1 +116,1 @@\n-    \/** Return the first Symbol from this or outward scopes with the given name.\n+    \/** Returns the first Symbol from this or outward scopes with the given name.\n@@ -123,1 +123,1 @@\n-    \/** Return the first Symbol from this or outward scopes with the given name that matches the\n+    \/** Returns the first Symbol from this or outward scopes with the given name that matches the\n@@ -131,1 +131,1 @@\n-    \/** Returns true iff there are is at least one Symbol in this scope matching the given filter.\n+    \/** Returns true iff there is at least one Symbol in this scope matching the given filter.\n@@ -156,1 +156,1 @@\n-    \/** Returns the Scope from which the givins Symbol originates in this scope.\n+    \/** Returns the Scope from which the given Symbol originates in this scope.\n@@ -235,1 +235,1 @@\n-         *  shares internal structures with the this scope. Used in connection with\n+         *  share internal structures with this scope. Used in connection with\n@@ -244,1 +244,1 @@\n-         *  shares internal structures with the this scope. Used in connection with\n+         *  share internal structures with this scope. Used in connection with\n@@ -279,1 +279,1 @@\n-        \/** Next enclosing scope (with whom this scope may share a hashtable)\n+        \/** Next enclosing scope (with whom this scope may share a hash table)\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Scope.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -840,4 +840,5 @@\n-                    return\n-                        types.rank(that.type) < types.rank(this.type) ||\n-                        types.rank(that.type) == types.rank(this.type) &&\n-                        that.getQualifiedName().compareTo(this.getQualifiedName()) < 0;\n+                    int thatRank = types.rank(that.type);\n+                    int thisRank = types.rank(this.type);\n+                    return thatRank < thisRank\n+                            || (thatRank == thisRank\n+                                && that.getQualifiedName().compareTo(this.getQualifiedName()) < 0);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2866,1 +2866,1 @@\n-     * The resulting preferred method has a thrown clause that is the intersection of the merged\n+     * The resulting preferred method has a throws clause that is the intersection of the merged\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -1219,1 +1219,1 @@\n-                \/\/ add intersection of all thrown clauses of initial constructors\n+                \/\/ add intersection of all throws clauses of initial constructors\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -540,3 +540,0 @@\n-    \/**\n-     * {@inheritDoc}\n-     *\/\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/model\/JavacElements.java","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import java.util.Collections;\n@@ -46,1 +47,1 @@\n-    private static class CompoundIterator<I, O> implements Iterator<O> {\n+    private static final class CompoundIterator<I, O> implements Iterator<O> {\n@@ -50,2 +51,1 @@\n-        @SuppressWarnings(\"unchecked\")\n-        private Iterator<O> currentIterator = EMPTY;\n+        private Iterator<O> currentIterator = Collections.emptyIterator();\n@@ -58,0 +58,1 @@\n+        @Override\n@@ -65,0 +66,1 @@\n+        @Override\n@@ -66,1 +68,1 @@\n-            if (currentIterator == EMPTY && !hasNext()) {\n+            if (!hasNext()) {\n@@ -72,4 +74,0 @@\n-        public void remove() {\n-            throw new UnsupportedOperationException();\n-        }\n-\n@@ -79,1 +77,1 @@\n-                if (currentIterator.hasNext()) return;\n+                if (currentIterator.hasNext()) return; \/\/ implicit null check\n@@ -85,12 +83,1 @@\n-    @SuppressWarnings(\"rawtypes\")\n-    private static final Iterator EMPTY = new Iterator() {\n-        public boolean hasNext() {\n-            return false;\n-        }\n-\n-        @Override\n-        public Object next() {\n-            return null;\n-        }\n-    };\n-\n+    \/\/ input.next() is assumed to never return null\n@@ -98,1 +85,1 @@\n-        return new Iterator<E>() {\n+        return new Iterator<>() {\n@@ -117,0 +104,3 @@\n+                if (current == null) {\n+                    throw new NoSuchElementException();\n+                }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Iterators.java","additions":13,"deletions":23,"binary":false,"changes":36,"status":"modified"}]}