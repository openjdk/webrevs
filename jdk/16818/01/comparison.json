{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -100,0 +100,2 @@\n+     * The readability relation is reflexive (every module reads itself). The\n+     * set of resolved modules returned by this method does not include itself.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/ResolvedModule.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -500,1 +500,0 @@\n-\n@@ -540,1 +539,0 @@\n-\n@@ -542,1 +540,0 @@\n-\n@@ -598,2 +595,1 @@\n-                        ResolvedModule m2\n-                            = computeIfAbsent(nameToResolved, name2, cf, mref2);\n+                        ResolvedModule m2 = computeIfAbsent(nameToResolved, name2, cf, mref2);\n@@ -625,2 +621,1 @@\n-        \/\/ Iteratively update g1 until there are no more requires transitive\n-        \/\/ to propagate\n+        \/\/ Iteratively update g1 until there are no more requires transitive to propagate\n@@ -631,9 +626,14 @@\n-            for (Set<ResolvedModule> m1Reads : g1.values()) {\n-                for (ResolvedModule m2 : m1Reads) {\n-                    Set<ResolvedModule> m2RequiresTransitive = g2.get(m2);\n-                    if (m2RequiresTransitive != null) {\n-                        for (ResolvedModule m3 : m2RequiresTransitive) {\n-                            if (!m1Reads.contains(m3)) {\n-                                \/\/ m1 reads m2, m2 requires transitive m3\n-                                \/\/ => need to add m1 reads m3\n-                                toAdd.add(m3);\n+            for (Map.Entry<ResolvedModule, Set<ResolvedModule>> e : g1.entrySet()) {\n+                ResolvedModule m1 = e.getKey();\n+                \/\/ automatic module already reads all selected modules so nothing to propagate\n+                if (!m1.descriptor().isAutomatic()) {\n+                    Set<ResolvedModule> m1Reads = e.getValue();\n+                    for (ResolvedModule m2 : m1Reads) {\n+                        Set<ResolvedModule> m2RequiresTransitive = g2.get(m2);\n+                        if (m2RequiresTransitive != null) {\n+                            for (ResolvedModule m3 : m2RequiresTransitive) {\n+                                if (!m1Reads.contains(m3)) {\n+                                    \/\/ m1 reads m2, m2 requires transitive m3\n+                                    \/\/ => need to add m1 reads m3\n+                                    toAdd.add(m3);\n+                                }\n@@ -643,5 +643,5 @@\n-                }\n-                if (!toAdd.isEmpty()) {\n-                    m1Reads.addAll(toAdd);\n-                    toAdd.clear();\n-                    changed = true;\n+                    if (!toAdd.isEmpty()) {\n+                        m1Reads.addAll(toAdd);\n+                        toAdd.clear();\n+                        changed = true;\n+                    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/module\/Resolver.java","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8142968 8253751 8262944\n+ * @bug 8142968 8253751 8262944 8314986\n@@ -31,1 +31,1 @@\n- * @run testng AutomaticModulesTest\n+ * @run junit AutomaticModulesTest\n@@ -57,3 +57,6 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import static org.testng.Assert.*;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import static org.junit.jupiter.api.Assertions.*;\n+import static org.junit.jupiter.params.provider.Arguments.arguments;\n@@ -61,1 +64,0 @@\n-@Test\n@@ -63,1 +65,0 @@\n-\n@@ -66,39 +67,35 @@\n-    @DataProvider(name = \"jarnames\")\n-    public Object[][] createJarNames() {\n-        return new Object[][] {\n-\n-            \/\/ JAR file name                module-name[\/version]\n-\n-            { \"foo.jar\",                    \"foo\" },\n-            { \"foo4j.jar\",                  \"foo4j\", },\n-\n-            { \"foo1.jar\",                   \"foo1\" },\n-            { \"foo10.jar\",                  \"foo10\" },\n-\n-            { \"foo-1.jar\",                  \"foo\/1\" },\n-            { \"foo-1.2.jar\",                \"foo\/1.2\" },\n-            { \"foo-1.2.3.jar\",              \"foo\/1.2.3\" },\n-            { \"foo-1.2.3.4.jar\",            \"foo\/1.2.3.4\" },\n-\n-            { \"foo-10.jar\",                 \"foo\/10\" },\n-            { \"foo-10.20.jar\",              \"foo\/10.20\" },\n-            { \"foo-10.20.30.jar\",           \"foo\/10.20.30\" },\n-            { \"foo-10.20.30.40.jar\",        \"foo\/10.20.30.40\" },\n-\n-            { \"foo-bar.jar\",                \"foo.bar\" },\n-            { \"foo-bar-1.jar\",              \"foo.bar\/1\" },\n-            { \"foo-bar-1.2.jar\",            \"foo.bar\/1.2\"},\n-            { \"foo-bar-10.jar\",             \"foo.bar\/10\" },\n-            { \"foo-bar-10.20.jar\",          \"foo.bar\/10.20\" },\n-\n-            { \"foo.bar1.jar\",               \"foo.bar1\" },\n-            { \"foo.bar10.jar\",              \"foo.bar10\" },\n-\n-            { \"foo-1.2-SNAPSHOT.jar\",       \"foo\/1.2-SNAPSHOT\" },\n-            { \"foo-bar-1.2-SNAPSHOT.jar\",   \"foo.bar\/1.2-SNAPSHOT\" },\n-\n-            { \"foo--bar-1.0.jar\",           \"foo.bar\/1.0\" },\n-            { \"-foo-bar-1.0.jar\",           \"foo.bar\/1.0\" },\n-            { \"foo-bar--1.0.jar\",           \"foo.bar\/1.0\" },\n-\n-        };\n+    \/\/ JAR file name to expected module name \/ version\n+    static Stream<Arguments> jarNames() {\n+        return Stream.of(\n+            arguments( \"foo.jar\",                    \"foo\" ),\n+            arguments( \"foo4j.jar\",                  \"foo4j\" ),\n+\n+            arguments( \"foo1.jar\",                   \"foo1\" ),\n+            arguments( \"foo10.jar\",                  \"foo10\" ),\n+\n+            arguments( \"foo-1.jar\",                  \"foo\/1\" ),\n+            arguments( \"foo-1.2.jar\",                \"foo\/1.2\" ),\n+            arguments( \"foo-1.2.3.jar\",              \"foo\/1.2.3\" ),\n+            arguments( \"foo-1.2.3.4.jar\",            \"foo\/1.2.3.4\" ),\n+\n+            arguments( \"foo-10.jar\",                 \"foo\/10\" ),\n+            arguments( \"foo-10.20.jar\",              \"foo\/10.20\" ),\n+            arguments( \"foo-10.20.30.jar\",           \"foo\/10.20.30\" ),\n+            arguments( \"foo-10.20.30.40.jar\",        \"foo\/10.20.30.40\" ),\n+\n+            arguments( \"foo-bar.jar\",                \"foo.bar\" ),\n+            arguments( \"foo-bar-1.jar\",              \"foo.bar\/1\" ),\n+            arguments( \"foo-bar-1.2.jar\",            \"foo.bar\/1.2\" ),\n+            arguments( \"foo-bar-10.jar\",             \"foo.bar\/10\" ),\n+            arguments( \"foo-bar-10.20.jar\",          \"foo.bar\/10.20\" ),\n+\n+            arguments(\"foo.bar1.jar\",                \"foo.bar1\" ),\n+            arguments( \"foo.bar10.jar\",              \"foo.bar10\" ),\n+\n+            arguments( \"foo-1.2-SNAPSHOT.jar\",       \"foo\/1.2-SNAPSHOT\" ),\n+            arguments( \"foo-bar-1.2-SNAPSHOT.jar\",   \"foo.bar\/1.2-SNAPSHOT\" ),\n+\n+            arguments( \"foo--bar-1.0.jar\",           \"foo.bar\/1.0\" ),\n+            arguments( \"-foo-bar-1.0.jar\",           \"foo.bar\/1.0\" ),\n+            arguments( \"foo-bar--1.0.jar\",           \"foo.bar\/1.0\" )\n+        );\n@@ -108,12 +105,8 @@\n-    @DataProvider(name = \"badjarnames\")\n-    public Object[][] createBadNames() {\n-        return new Object[][]{\n-\n-            { \".jar\",          null },\n-            { \"_.jar\",         null },\n-\n-            { \"foo.1.jar\",     null },\n-            { \"1foo.jar\",      null },\n-            { \"foo.1bar.jar\",  null },\n-\n-        };\n+    static Stream<String> barJarNames() {\n+        return Stream.of(\n+            \".jar\",\n+            \"_.jar\",\n+            \"foo.1.jar\",\n+            \"1foo.jar\",\n+            \"foo.1bar.jar\"\n+        );\n@@ -125,1 +118,2 @@\n-    @Test(dataProvider = \"jarnames\")\n+    @ParameterizedTest\n+    @MethodSource(\"jarNames\")\n@@ -146,1 +140,1 @@\n-        assertEquals(descriptor.name(), mn);\n+        assertEquals(mn, descriptor.name());\n@@ -150,1 +144,1 @@\n-            assertEquals(descriptor.version().get().toString(), vs);\n+            assertEquals(vs, descriptor.version().get().toString());\n@@ -157,2 +151,3 @@\n-    @Test(dataProvider = \"badjarnames\", expectedExceptions = FindException.class)\n-    public void testBadNames(String fn, String ignore) throws IOException {\n+    @ParameterizedTest\n+    @MethodSource(\"barJarNames\")\n+    public void testBadNames(String fn) throws IOException {\n@@ -166,1 +161,2 @@\n-        ModuleFinder.of(dir).findAll();\n+        var finder = ModuleFinder.of(dir);\n+        assertThrows(FindException.class, finder::findAll);\n@@ -169,10 +165,10 @@\n-    @DataProvider(name = \"modulenames\")\n-    public Object[][] createModuleNames() {\n-        return new Object[][] {\n-            { \"foo\",        null },\n-            { \"foo\",        \"1.0\" },\n-            { \"foo.bar\",    null },\n-            { \"foo.bar\",    \"1.0\" },\n-            { \"class_\",     null },\n-            { \"class_\",     \"1.0\" },\n-        };\n+    \/\/ Automatic-Module-Name attribute values and version in JAR file name\n+    static Stream<Arguments> automaticModuleNames() {\n+        return Stream.of(\n+            arguments( \"foo\",        null ),\n+            arguments( \"foo\",        \"1.0\" ),\n+            arguments( \"foo.bar\",    null ),\n+            arguments( \"foo.bar\",    \"1.0\" ),\n+            arguments( \"class_\",     null ),\n+            arguments( \"class_\",     \"1.0\" )\n+        );\n@@ -181,10 +177,7 @@\n-    @DataProvider(name = \"badmodulenames\")\n-    public Object[][] createBadModuleNames() {\n-        return new Object[][] {\n-            { \"\",            null },\n-            { \"\",            \"1.0\" },\n-            { \"666\",         null },\n-            { \"666\",         \"1.0\" },\n-            { \"foo.class\",   null },\n-            { \"foo.class\",   \"1.0\" },\n-        };\n+    \/\/ Bad Automatic-Module-Name attribute values\n+    static Stream<String> badAutomaticModuleNames() {\n+        return Stream.of(\n+            \"\",\n+            \"666\",\n+            \"foo.class\"\n+        );\n@@ -196,1 +189,2 @@\n-    @Test(dataProvider = \"modulenames\")\n+    @ParameterizedTest\n+    @MethodSource(\"automaticModuleNames\")\n@@ -221,2 +215,2 @@\n-        assertEquals(descriptor.name(), name);\n-        assertEquals(descriptor.version()\n+        assertEquals(name, descriptor.name());\n+        assertEquals(vs, descriptor.version()\n@@ -224,1 +218,1 @@\n-                .orElse(null), vs);\n+                .orElse(null));\n@@ -231,6 +225,4 @@\n-    @Test(dataProvider = \"badmodulenames\", expectedExceptions = FindException.class)\n-    public void testBadAutomaticModuleNameAttribute(String name, String ignore)\n-        throws IOException\n-    {\n-        \/\/ should throw FindException\n-        testAutomaticModuleNameAttribute(name, null);\n+    @ParameterizedTest\n+    @MethodSource(\"badAutomaticModuleNames\")\n+    public void testBadAutomaticModuleNameAttribute(String name) throws IOException {\n+        assertThrows(FindException.class, () -> testAutomaticModuleNameAttribute(name, null));\n@@ -242,0 +234,1 @@\n+    @Test\n@@ -266,0 +259,1 @@\n+    @Test\n@@ -287,0 +281,1 @@\n+    @Test\n@@ -310,1 +305,1 @@\n-    @Test(expectedExceptions = FindException.class)\n+    @Test\n@@ -314,2 +309,2 @@\n-        ModuleFinder finder = ModuleFinder.of(dir);\n-        finder.findAll();\n+        var finder = ModuleFinder.of(dir);\n+        assertThrows(FindException.class, finder::findAll);\n@@ -321,0 +316,1 @@\n+    @Test\n@@ -348,1 +344,1 @@\n-        assertEquals(provides.service(), service);\n+        assertEquals(service, provides.service());\n@@ -354,8 +350,5 @@\n-    @DataProvider(name = \"badservices\")\n-    public Object[][] createBadServices() {\n-        return new Object[][] {\n-\n-                \/\/ service type         provider type\n-                { \"-\",                  \"p.S1\" },\n-                { \".S\",                 \"p.S1\" },\n-        };\n+    static Stream<Arguments> badServices() {\n+        return Stream.of(\n+            arguments( \"-\",  \"p.S1\" ),\n+            arguments( \".S\", \"p.S1\" )\n+        );\n@@ -368,1 +361,2 @@\n-    @Test(dataProvider = \"badservices\")\n+    @ParameterizedTest\n+    @MethodSource(\"badServices\")\n@@ -386,9 +380,6 @@\n-    @DataProvider(name = \"badproviders\")\n-    public Object[][] createBadProviders() {\n-        return new Object[][] {\n-\n-                \/\/ service type         provider type\n-                { \"p.S\",                \"-\" },\n-                { \"p.S\",                \"p..S1\" },\n-                { \"p.S\",                \"S1.\" },\n-        };\n+    static Stream<Arguments> badProviders() {\n+        return Stream.of(\n+            arguments(\"p.S\", \"-\"),\n+            arguments(\"p.S\", \"p..S1\"),\n+            arguments(\"p.S\", \"S1.\")\n+        );\n@@ -401,1 +392,2 @@\n-    @Test(dataProvider = \"badproviders\", expectedExceptions = FindException.class)\n+    @ParameterizedTest\n+    @MethodSource(\"badProviders\")\n@@ -421,1 +413,2 @@\n-        ModuleFinder.of(dir).findAll();\n+        var finder = ModuleFinder.of(dir);\n+        assertThrows(FindException.class, finder::findAll);\n@@ -428,1 +421,1 @@\n-    @Test(expectedExceptions = FindException.class)\n+    @Test\n@@ -441,19 +434,7 @@\n-        \/\/ catch FindException, inspect its cause's type and details, and rethrow\n-        var expectedMessage = \"Provider class q.P not in JAR file \" + jarfile.getFileName();\n-        try {\n-            ModuleFinder.of(dir).findAll();\n-        } catch (FindException exception) {\n-            if (exception.getCause() instanceof InvalidModuleDescriptorException imde) {\n-                var actualMessage = imde.getMessage();\n-                if (actualMessage.equals(expectedMessage)) {\n-                    throw exception; \/\/ rethrow as expected\n-                }\n-                throw new AssertionError(\n-                    \"\"\"\n-                    Unexpected detail message in InvalidModuleDescriptorException:\n-                      Expected message -> '%s'\n-                        Actual message -> '%s'\n-                    \"\"\".formatted(expectedMessage, actualMessage));\n-            }\n-            throw new AssertionError(\"Unexpected exception cause: \" + exception.getCause());\n-        }\n+        \/\/ FindException should be thrown with InvalidModuleDescriptorException as cause\n+        var finder = ModuleFinder.of(dir);\n+        FindException ex = assertThrows(FindException.class, () -> finder.findAll());\n+        Throwable cause = ex.getCause();\n+        assertTrue(cause instanceof InvalidModuleDescriptorException);\n+        var imde = (InvalidModuleDescriptorException) cause;\n+        assertEquals(\"Provider class q.P not in JAR file \" + jarfile.getFileName(), imde.getMessage());\n@@ -466,0 +447,1 @@\n+    @Test\n@@ -484,3 +466,1 @@\n-\n-        assertTrue(descriptor.mainClass().isPresent());\n-        assertEquals(descriptor.mainClass().get(), mainClass);\n+        assertEquals(mainClass, descriptor.mainClass().get());\n@@ -489,8 +469,6 @@\n-    \/\/ Main-Class files that do not map to a legal qualified type name\n-    @DataProvider(name = \"badmainclass\")\n-    public Object[][] createBadMainClass() {\n-        return new Object[][] {\n-            { \"p..Main\",     null },\n-            { \"p-.Main\",     null },\n-\n-        };\n+    \/\/ Main-Class attribute values that do not map to a legal qualified type name\n+    static Stream<String> badMainClasses() {\n+        return Stream.of(\n+            \"p..Main\",\n+            \"p-.Main\"\n+        );\n@@ -503,2 +481,3 @@\n-    @Test(dataProvider = \"badmainclass\")\n-    public void testBadMainClass(String mainClass, String ignore) throws IOException {\n+    @ParameterizedTest\n+    @MethodSource(\"badMainClasses\")\n+    public void testBadMainClass(String mainClass) throws IOException {\n@@ -524,0 +503,1 @@\n+    @Test\n@@ -547,0 +527,1 @@\n+    @Test\n@@ -591,0 +572,1 @@\n+        assertFalse(b.reads().contains(b));\n@@ -596,0 +578,1 @@\n+        assertFalse(c.reads().contains(c));\n@@ -597,1 +580,0 @@\n-\n@@ -607,0 +589,1 @@\n+    @Test\n@@ -663,0 +646,1 @@\n+        assertFalse(c.reads().contains(c));\n@@ -669,0 +653,1 @@\n+        assertFalse(d.reads().contains(d));\n@@ -679,0 +664,1 @@\n+    @Test\n@@ -735,4 +721,0 @@\n-        assertTrue(reads(cf, \"b\", \"c\"));\n-        assertTrue(reads(cf, \"b\", \"d\"));\n-        assertTrue(reads(cf, \"b\", \"java.base\"));\n-\n@@ -741,0 +723,1 @@\n+        assertFalse(c.reads().contains(c));\n@@ -747,0 +730,1 @@\n+        assertFalse(d.reads().contains(d));\n@@ -754,0 +738,1 @@\n+    @Test\n@@ -783,0 +768,1 @@\n+    @Test\n@@ -839,0 +825,1 @@\n+        assertFalse(auto1.reads().contains(auto1));\n@@ -846,0 +833,1 @@\n+        assertFalse(auto2.reads().contains(auto2));\n@@ -853,0 +841,1 @@\n+        assertFalse(auto3.reads().contains(auto3));\n@@ -862,0 +851,1 @@\n+    @Test\n@@ -921,0 +911,1 @@\n+        assertFalse(auto2.reads().contains(auto2));\n@@ -927,0 +918,1 @@\n+        assertFalse(auto3.reads().contains(auto3));\n@@ -936,0 +928,1 @@\n+    @Test\n@@ -967,0 +960,1 @@\n+        assertFalse(auto1.reads().contains(auto1));\n@@ -972,0 +966,1 @@\n+        assertFalse(auto2.reads().contains(auto2));\n@@ -1002,1 +997,1 @@\n-    @Test(expectedExceptions = { ResolutionException.class })\n+    @Test\n@@ -1021,1 +1016,1 @@\n-        resolve(parent, finder, \"a\");\n+        assertThrows(ResolutionException.class, () -> resolve(parent, finder, \"a\"));\n@@ -1029,1 +1024,1 @@\n-    @Test(expectedExceptions = { ResolutionException.class })\n+    @Test\n@@ -1047,1 +1042,1 @@\n-        resolve(parent, finder, \"a\");\n+        assertThrows(ResolutionException.class, () -> resolve(parent, finder, \"a\"));\n@@ -1053,0 +1048,1 @@\n+    @Test\n@@ -1094,0 +1090,1 @@\n+    @Test\n@@ -1135,1 +1132,0 @@\n-\n@@ -1139,1 +1135,0 @@\n-\n@@ -1141,1 +1136,0 @@\n-\n@@ -1205,1 +1199,0 @@\n-\n","filename":"test\/jdk\/java\/lang\/module\/AutomaticModulesTest.java","additions":158,"deletions":165,"binary":false,"changes":323,"status":"modified"}]}