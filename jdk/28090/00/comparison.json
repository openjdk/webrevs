{"files":[{"patch":"@@ -1023,1 +1023,1 @@\n-                    factory.createExtended(font, cm, decorator, startPos, startPos + lmCount);\n+                    factory.createTextLabel(font, cm, decorator, startPos, startPos + lmCount);\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/font\/TextLine.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,1 +57,2 @@\n- * of this class and hand them off to ExtendedTextLabels or GraphicComponents.\n+ * of this class and hand them off to ExtendedTextSourceLabels or\n+ * GraphicComponents.\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/Decoration.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1,146 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- *\n- * (C) Copyright IBM Corp. 1998-2003- All Rights Reserved.\n- *\/\n-\n-package sun.font;\n-\n-import java.awt.Font;\n-\n-import java.awt.font.GlyphJustificationInfo;\n-import java.awt.font.LineMetrics;\n-\n-import java.awt.geom.Point2D;\n-import java.awt.geom.Rectangle2D;\n-\n-\/**\n- * An extension of TextLabel that maintains information\n- * about characters.\n- *\/\n-\n-public abstract class ExtendedTextLabel extends TextLabel\n-                            implements TextLineComponent{\n-  \/**\n-   * Return the number of characters represented by this label.\n-   *\/\n-  public abstract int getNumCharacters();\n-\n-  \/**\n-   * Return the line metrics for all text in this label.\n-   *\/\n-  public abstract CoreMetrics getCoreMetrics();\n-\n-  \/**\n-   * Return the x location of the character at the given logical index.\n-   *\/\n-  public abstract float getCharX(int logicalIndex);\n-\n-  \/**\n-   * Return the y location of the character at the given logical index.\n-   *\/\n-  public abstract float getCharY(int logicalIndex);\n-\n-  \/**\n-   * Return the advance of the character at the given logical index.\n-   *\/\n-  public abstract float getCharAdvance(int logicalIndex);\n-\n-  \/**\n-   * Return the visual bounds of the character at the given logical index.\n-   * This bounds encloses all the pixels of the character when the label is rendered\n-   * at x, y.\n-   *\/\n-  public abstract Rectangle2D getCharVisualBounds(int logicalIndex, float x, float y);\n-\n-  \/**\n-   * Return the visual index of the character at the given logical index.\n-   *\/\n-  public abstract int logicalToVisual(int logicalIndex);\n-\n-  \/**\n-   * Return the logical index of the character at the given visual index.\n-   *\/\n-  public abstract int visualToLogical(int visualIndex);\n-\n-  \/**\n-   * Return the logical index of the character, starting with the character at\n-   * logicalStart, whose accumulated advance exceeds width.  If the advances of\n-   * all characters do not exceed width, return getNumCharacters.  If width is\n-   * less than zero, return logicalStart - 1.\n-   *\/\n-  public abstract int getLineBreakIndex(int logicalStart, float width);\n-\n-  \/**\n-   * Return the accumulated advances of all characters between logicalStart and\n-   * logicalLimit.\n-   *\/\n-  public abstract float getAdvanceBetween(int logicalStart, int logicalLimit);\n-\n-  \/**\n-   * Return whether a caret can exist on the leading edge of the\n-   * character at offset.  If the character is part of a ligature\n-   * (for example) a caret may not be appropriate at offset.\n-   *\/\n-  public abstract boolean caretAtOffsetIsValid(int offset);\n-\n-  \/**\n-   * A convenience overload of getCharVisualBounds that defaults the label origin\n-   * to 0, 0.\n-   *\/\n-  public Rectangle2D getCharVisualBounds(int logicalIndex) {\n-    return getCharVisualBounds(logicalIndex, 0, 0);\n-  }\n-\n-  public abstract TextLineComponent getSubset(int start, int limit, int dir);\n-\n-  \/**\n-   * Return the number of justification records this uses.\n-   *\/\n-  public abstract int getNumJustificationInfos();\n-\n-  \/**\n-   * Return GlyphJustificationInfo objects for the characters between\n-   * charStart and charLimit, starting at offset infoStart.  Infos\n-   * will be in visual order.  All positions between infoStart and\n-   * getNumJustificationInfos will be set.  If a position corresponds\n-   * to a character outside the provided range, it is set to null.\n-   *\/\n-  public abstract void getJustificationInfos(GlyphJustificationInfo[] infos, int infoStart, int charStart, int charLimit);\n-\n-  \/**\n-   * Apply deltas to the data in this component, starting at offset\n-   * deltaStart, and return the new component.  There are two floats\n-   * for each justification info, for a total of 2 * getNumJustificationInfos.\n-   * The first delta is the left adjustment, the second is the right\n-   * adjustment.\n-   * <p>\n-   * If flags[0] is true on entry, rejustification is allowed.  If\n-   * the new component requires rejustification (ligatures were\n-   * formed or split), flags[0] will be set on exit.\n-   *\/\n-  public abstract TextLineComponent applyJustificationDeltas(float[] deltas, int deltaStart, boolean[] flags);\n-}\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/ExtendedTextLabel.java","additions":0,"deletions":146,"binary":false,"changes":146,"status":"deleted"},{"patch":"@@ -49,4 +49,0 @@\n-\/**\n- * Default implementation of ExtendedTextLabel.\n- *\/\n-\n@@ -56,2 +52,9 @@\n-\/* public *\/\n-class ExtendedTextSourceLabel extends ExtendedTextLabel implements Decoration.Label {\n+\/**\n+ * A label.\n+ * Visual bounds is a rect that encompasses the entire rendered area.\n+ * Logical bounds is a rect that defines how to position this next\n+ * to other objects.\n+ * Align bounds is a rect that defines how to align this to margins.\n+ * it generally allows some overhang that logical bounds would prevent.\n+ *\/\n+class ExtendedTextSourceLabel implements TextLineComponent, Decoration.Label {\n@@ -59,2 +62,2 @@\n-  TextSource source;\n-  private Decoration decorator;\n+  private final TextSource source;\n+  private final Decoration decorator;\n@@ -67,6 +70,6 @@\n-  Rectangle2D lb;\n-  Rectangle2D ab;\n-  Rectangle2D vb;\n-  Rectangle2D ib;\n-  StandardGlyphVector gv;\n-  float[] charinfo;\n+  private Rectangle2D lb;\n+  private Rectangle2D ab;\n+  private Rectangle2D vb;\n+  private Rectangle2D ib;\n+  private StandardGlyphVector gv;\n+  private float[] charinfo;\n@@ -74,1 +77,1 @@\n-  float advTracking;\n+  private float advTracking;\n@@ -119,7 +122,5 @@\n-\n-  \/\/ TextLabel API\n-\n-  public Rectangle2D getLogicalBounds() {\n-    return getLogicalBounds(0, 0);\n-  }\n-\n+  \/**\n+   * Return a rectangle that corresponds to the logical bounds of the text\n+   * when this label is rendered at x, y.\n+   * This rectangle is used when positioning text next to other text.\n+   *\/\n@@ -136,5 +137,3 @@\n-    public float getAdvance() {\n-        if (lb == null) {\n-            lb = createLogicalBounds();\n-        }\n-        return (float)lb.getWidth();\n+  public float getAdvance() {\n+    if (lb == null) {\n+      lb = createLogicalBounds();\n@@ -142,0 +141,2 @@\n+    return (float)lb.getWidth();\n+  }\n@@ -143,0 +144,3 @@\n+  \/**\n+   * Return a rectangle that surrounds the text outline when this label is rendered at x, y.\n+   *\/\n@@ -153,0 +157,6 @@\n+  \/**\n+   * Return a rectangle that corresponds to the alignment bounds of the text\n+   * when this label is rendered at x, y. This rectangle is used when positioning text next\n+   * to a margin.  It differs from the logical bounds in that it does not include leading or\n+   * trailing whitespace.\n+   *\/\n@@ -164,0 +174,4 @@\n+  \/**\n+   * Return a rectangle that corresponds to the logical bounds of the text, adjusted\n+   * to angle the leading and trailing edges by the italic angle.\n+   *\/\n@@ -192,0 +206,3 @@\n+  \/**\n+   * Return an outline of the characters in the label when rendered at x, y.\n+   *\/\n@@ -200,0 +217,3 @@\n+  \/**\n+   * Render the label at x, y in the graphics.\n+   *\/\n@@ -204,0 +224,50 @@\n+  \/**\n+   * A convenience method that returns the visual bounds when rendered at 0, 0.\n+   *\/\n+  public Rectangle2D getVisualBounds() {\n+    return getVisualBounds(0f, 0f);\n+  }\n+\n+  \/**\n+   * A convenience method that returns the logical bounds when rendered at 0, 0.\n+   *\/\n+  public Rectangle2D getLogicalBounds() {\n+    return getLogicalBounds(0f, 0f);\n+  }\n+\n+  \/**\n+   * A convenience method that returns the align bounds when rendered at 0, 0.\n+   *\/\n+  public Rectangle2D getAlignBounds() {\n+    return getAlignBounds(0f, 0f);\n+  }\n+\n+  \/**\n+   * A convenience method that returns the italic bounds when rendered at 0, 0.\n+   *\/\n+  public Rectangle2D getItalicBounds() {\n+    return getItalicBounds(0f, 0f);\n+  }\n+\n+  \/**\n+   * A convenience method that returns the outline when rendered at 0, 0.\n+   *\/\n+  public Shape getOutline() {\n+    return getOutline(0f, 0f);\n+  }\n+\n+  \/**\n+   * A convenience method that renders the label at 0, 0.\n+   *\/\n+  public void draw(Graphics2D g) {\n+    draw(g, 0f, 0f);\n+  }\n+\n+  \/**\n+   * A convenience overload of getCharVisualBounds that defaults the label origin\n+   * to 0, 0.\n+   *\/\n+  public Rectangle2D getCharVisualBounds(int logicalIndex) {\n+    return getCharVisualBounds(logicalIndex, 0, 0);\n+  }\n+\n@@ -339,2 +409,0 @@\n-  \/\/ ExtendedTextLabel API\n-\n@@ -351,0 +419,3 @@\n+  \/**\n+   * Return the number of characters represented by this label.\n+   *\/\n@@ -355,0 +426,3 @@\n+  \/**\n+   * Return the line metrics for all text in this label.\n+   *\/\n@@ -359,0 +433,3 @@\n+  \/**\n+   * Return the x location of the character at the given logical index.\n+   *\/\n@@ -370,0 +447,3 @@\n+  \/**\n+   * Return the y location of the character at the given logical index.\n+   *\/\n@@ -381,0 +461,3 @@\n+  \/**\n+   * Return the advance of the character at the given logical index.\n+   *\/\n@@ -406,0 +489,5 @@\n+  \/**\n+   * Return the visual bounds of the character at the given logical index.\n+   * This bounds encloses all the pixels of the character when the label is rendered\n+   * at x, y.\n+   *\/\n@@ -473,0 +561,3 @@\n+  \/**\n+   * Return the visual index of the character at the given logical index.\n+   *\/\n@@ -478,0 +569,3 @@\n+  \/**\n+   * Return the logical index of the character at the given visual index.\n+   *\/\n@@ -483,0 +577,6 @@\n+  \/**\n+   * Return the logical index of the character, starting with the character at\n+   * logicalStart, whose accumulated advance exceeds width.  If the advances of\n+   * all characters do not exceed width, return getNumCharacters.  If width is\n+   * less than zero, return logicalStart - 1.\n+   *\/\n@@ -507,0 +607,4 @@\n+  \/**\n+   * Return the accumulated advances of all characters between logicalStart and\n+   * logicalLimit.\n+   *\/\n@@ -526,0 +630,5 @@\n+  \/**\n+   * Return whether a caret can exist on the leading edge of the\n+   * character at offset.  If the character is part of a ligature\n+   * (for example) a caret may not be appropriate at offset.\n+   *\/\n@@ -915,4 +1024,3 @@\n-  \/\/public static ExtendedTextLabel create(TextSource source) {\n-  \/\/  return new ExtendedTextSourceLabel(source);\n-  \/\/}\n-\n+  \/**\n+   * Return the number of justification records this uses.\n+   *\/\n@@ -923,1 +1031,7 @@\n-\n+  \/**\n+   * Return GlyphJustificationInfo objects for the characters between\n+   * charStart and charLimit, starting at offset infoStart.  Infos\n+   * will be in visual order.  All positions between infoStart and\n+   * getNumJustificationInfos will be set.  If a position corresponds\n+   * to a character outside the provided range, it is set to null.\n+   *\/\n@@ -995,0 +1109,11 @@\n+  \/**\n+   * Apply deltas to the data in this component, starting at offset\n+   * deltaStart, and return the new component.  There are two floats\n+   * for each justification info, for a total of 2 * getNumJustificationInfos.\n+   * The first delta is the left adjustment, the second is the right\n+   * adjustment.\n+   * <p>\n+   * If flags[0] is true on entry, rejustification is allowed.  If\n+   * the new component requires rejustification (ligatures were\n+   * formed or split), flags[0] will be set on exit.\n+   *\/\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/ExtendedTextSourceLabel.java","additions":159,"deletions":34,"binary":false,"changes":193,"status":"modified"},{"patch":"@@ -1,124 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2003, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- *\n- * (C) Copyright IBM Corp. 1998-2003 All Rights Reserved\n- *\/\n-\n-package sun.font;\n-\n-import java.awt.Graphics2D;\n-import java.awt.Shape;\n-\n-import java.awt.geom.Rectangle2D;\n-\n-\/**\n- * A label.\n- * Visual bounds is a rect that encompasses the entire rendered area.\n- * Logical bounds is a rect that defines how to position this next\n- * to other objects.\n- * Align bounds is a rect that defines how to align this to margins.\n- * it generally allows some overhang that logical bounds would prevent.\n- *\/\n-public abstract class TextLabel {\n-\n-  \/**\n-   * Return a rectangle that surrounds the text outline when this label is rendered at x, y.\n-   *\/\n-  public abstract Rectangle2D getVisualBounds(float x, float y);\n-\n-  \/**\n-   * Return a rectangle that corresponds to the logical bounds of the text\n-   * when this label is rendered at x, y.\n-   * This rectangle is used when positioning text next to other text.\n-   *\/\n-  public abstract Rectangle2D getLogicalBounds(float x, float y);\n-\n-  \/**\n-   * Return a rectangle that corresponds to the alignment bounds of the text\n-   * when this label is rendered at x, y. This rectangle is used when positioning text next\n-   * to a margin.  It differs from the logical bounds in that it does not include leading or\n-   * trailing whitespace.\n-   *\/\n-  public abstract Rectangle2D getAlignBounds(float x, float y);\n-\n-  \/**\n-   * Return a rectangle that corresponds to the logical bounds of the text, adjusted\n-   * to angle the leading and trailing edges by the italic angle.\n-   *\/\n-  public abstract Rectangle2D getItalicBounds(float x, float y);\n-\n-  \/**\n-   * Return an outline of the characters in the label when rendered at x, y.\n-   *\/\n-  public abstract Shape getOutline(float x, float y);\n-\n-  \/**\n-   * Render the label at x, y in the graphics.\n-   *\/\n-  public abstract void draw(Graphics2D g, float x, float y);\n-\n-  \/**\n-   * A convenience method that returns the visual bounds when rendered at 0, 0.\n-   *\/\n-  public Rectangle2D getVisualBounds() {\n-    return getVisualBounds(0f, 0f);\n-  }\n-\n-  \/**\n-   * A convenience method that returns the logical bounds when rendered at 0, 0.\n-   *\/\n-  public Rectangle2D getLogicalBounds() {\n-    return getLogicalBounds(0f, 0f);\n-  }\n-\n-  \/**\n-   * A convenience method that returns the align bounds when rendered at 0, 0.\n-   *\/\n-  public Rectangle2D getAlignBounds() {\n-    return getAlignBounds(0f, 0f);\n-  }\n-\n-  \/**\n-   * A convenience method that returns the italic bounds when rendered at 0, 0.\n-   *\/\n-  public Rectangle2D getItalicBounds() {\n-    return getItalicBounds(0f, 0f);\n-  }\n-\n-  \/**\n-   * A convenience method that returns the outline when rendered at 0, 0.\n-   *\/\n-  public Shape getOutline() {\n-    return getOutline(0f, 0f);\n-  }\n-\n-  \/**\n-   * A convenience method that renders the label at 0, 0.\n-   *\/\n-  public void draw(Graphics2D g) {\n-    draw(g, 0f, 0f);\n-  }\n-}\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/TextLabel.java","additions":0,"deletions":124,"binary":false,"changes":124,"status":"deleted"},{"patch":"@@ -45,2 +45,1 @@\n-   * @see TextLabel\n-   * @see ExtendedTextLabel\n+   * @see ExtendedTextSourceLabel\n@@ -103,1 +102,1 @@\n-   * Create an extended glyph array for the text between start and limit.\n+   * Create a glyph array for the text between start and limit.\n@@ -116,5 +115,5 @@\n-  public ExtendedTextLabel createExtended(Font font,\n-                                          CoreMetrics lm,\n-                                          Decoration decorator,\n-                                          int start,\n-                                          int limit) {\n+  public ExtendedTextSourceLabel createTextLabel(Font font,\n+                                                 CoreMetrics lm,\n+                                                 Decoration decorator,\n+                                                 int start,\n+                                                 int limit) {\n@@ -135,25 +134,0 @@\n-\n-  \/**\n-   * Create a simple glyph array for the text between start and limit.\n-   *\n-   * @param font the font to use to generate glyphs and character positions.\n-   * @param start the start of the subrange for which to create the glyph array\n-   * @param limit the limit of the subrange for which to create glyph array\n-   *\/\n-  public TextLabel createSimple(Font font,\n-                                CoreMetrics lm,\n-                                int start,\n-                                int limit) {\n-\n-    if (start > limit || start < lineStart || limit > lineLimit) {\n-      throw new IllegalArgumentException(\"bad start: \" + start + \" or limit: \" + limit);\n-    }\n-\n-    int level = lineBidi == null ? 0 : lineBidi.getLevelAt(start - lineStart);\n-    int linedir = (lineBidi == null || lineBidi.baseIsLeftToRight()) ? 0 : 1;\n-    int layoutFlags = flags & ~0x9; \/\/ remove bidi, line direction flags\n-    if ((level & 0x1) != 0) layoutFlags |= 1; \/\/ rtl\n-    if ((linedir & 0x1) != 0) layoutFlags |= 8; \/\/ line rtl\n-    TextSource source = new StandardTextSource(text, start, limit - start, lineStart, lineLimit - lineStart, level, layoutFlags, font, frc, lm);\n-    return new TextSourceLabel(source);\n-  }\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/TextLabelFactory.java","additions":7,"deletions":33,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -1,173 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2017, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\/*\n- *\n- * (C) Copyright IBM Corp. 1998, 1999 - All Rights Reserved\n- *\/\n-\n-package sun.font;\n-\n-import java.awt.Font;\n-import java.awt.Graphics2D;\n-import java.awt.Rectangle;\n-import java.awt.Shape;\n-import java.awt.font.FontRenderContext;\n-import java.awt.font.GlyphVector;\n-import java.awt.geom.AffineTransform;\n-import java.awt.geom.Rectangle2D;\n-\n-\/**\n- * Implementation of TextLabel based on String.\n- *\/\n-\n-public class TextSourceLabel extends TextLabel {\n-  TextSource source;\n-\n-  \/\/ caches\n-  Rectangle2D lb;\n-  Rectangle2D ab;\n-  Rectangle2D vb;\n-  Rectangle2D ib;\n-  GlyphVector gv;\n-\n-  public TextSourceLabel(TextSource source) {\n-    this(source, null, null, null);\n-  }\n-\n-  public TextSourceLabel(TextSource source, Rectangle2D lb, Rectangle2D ab, GlyphVector gv) {\n-    this.source = source;\n-\n-    this.lb = lb;\n-    this.ab = ab;\n-    this.gv = gv;\n-  }\n-\n-  public TextSource getSource() {\n-    return source;\n-  }\n-\n-  public final Rectangle2D getLogicalBounds(float x, float y) {\n-    if (lb == null) {\n-      lb = createLogicalBounds();\n-    }\n-    return new Rectangle2D.Float((float)(lb.getX() + x),\n-                                 (float)(lb.getY() + y),\n-                                 (float)lb.getWidth(),\n-                                 (float)lb.getHeight());\n-  }\n-\n-  public final Rectangle2D getVisualBounds(float x, float y) {\n-    if (vb == null) {\n-      vb = createVisualBounds();\n-\n-    }\n-    return new Rectangle2D.Float((float)(vb.getX() + x),\n-                                 (float)(vb.getY() + y),\n-                                 (float)vb.getWidth(),\n-                                 (float)vb.getHeight());\n-  }\n-\n-  public final Rectangle2D getAlignBounds(float x, float y) {\n-    if (ab == null) {\n-      ab = createAlignBounds();\n-    }\n-    return new Rectangle2D.Float((float)(ab.getX() + x),\n-                                 (float)(ab.getY() + y),\n-                                 (float)ab.getWidth(),\n-                                 (float)ab.getHeight());\n-  }\n-\n-  public Rectangle2D getItalicBounds(float x, float y) {\n-    if (ib == null) {\n-      ib = createItalicBounds();\n-    }\n-    return new Rectangle2D.Float((float)(ib.getX() + x),\n-                                 (float)(ib.getY() + y),\n-                                 (float)ib.getWidth(),\n-                                 (float)ib.getHeight());\n-\n-  }\n-\n-  public Rectangle getPixelBounds(FontRenderContext frc, float x, float y) {\n-      return getGV().getPixelBounds(frc, x, y); \/\/ no cache\n-  }\n-\n-  public AffineTransform getBaselineTransform() {\n-      Font font = source.getFont();\n-      if (font.hasLayoutAttributes()) {\n-          return AttributeValues.getBaselineTransform(font.getAttributes());\n-      }\n-      return null;\n-  }\n-\n-  public Shape getOutline(float x, float y) {\n-    return getGV().getOutline(x, y);\n-  }\n-\n-  public void draw(Graphics2D g, float x, float y) {\n-    g.drawGlyphVector(getGV(), x, y);\n-  }\n-\n-  protected Rectangle2D createLogicalBounds() {\n-    return getGV().getLogicalBounds();\n-  }\n-\n-  protected Rectangle2D createVisualBounds() {\n-    return getGV().getVisualBounds();\n-  }\n-\n-  protected Rectangle2D createItalicBounds() {\n-      \/\/ !!! fix\n-    return getGV().getLogicalBounds();\n-  }\n-\n-  protected Rectangle2D createAlignBounds() {\n-    return createLogicalBounds();\n-  }\n-\n-  private GlyphVector getGV() {\n-    if (gv == null) {\n-      gv = createGV();\n-    }\n-\n-    return gv;\n-  }\n-\n-  protected GlyphVector createGV() {\n-    Font font = source.getFont();\n-    FontRenderContext frc = source.getFRC();\n-    int flags = source.getLayoutFlags();\n-    char[] context = source.getChars();\n-    int start = source.getStart();\n-    int length = source.getLength();\n-\n-    GlyphLayout gl = GlyphLayout.get(null); \/\/ !!! no custom layout engines\n-    StandardGlyphVector gv = gl.layout(font, frc, context, start, length,\n-                                       flags, null); \/\/ ??? use textsource\n-    GlyphLayout.done(gl);\n-\n-    return gv;\n-  }\n-}\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/TextSourceLabel.java","additions":0,"deletions":173,"binary":false,"changes":173,"status":"deleted"}]}