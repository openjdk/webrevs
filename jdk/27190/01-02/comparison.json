{"files":[{"patch":"@@ -614,6 +614,2 @@\n-  \/\/ If the VM is shutting down, we may have skipped VM_CollectForAllocation.\n-  \/\/ To avoid returning nullptr (which could cause premature OOME), we stall\n-  \/\/ allocation requests here allow the VM shutdown is complete.\n-  \/\/\n-  \/\/ We use a timed wait (2 seconds) instead of an indefinite wait to avoid blocking\n-  \/\/ VM shutdown if it happens to trigger a GC.\n+  \/\/ We use a timed wait (2 seconds) instead of an indefinite wait to avoid deadlock\n+  \/\/ if the VM shutdown triggers a GC.\n@@ -626,1 +622,2 @@\n-  ml.wait(2 * 1000);\n+  ml.wait(2 * MILLIUNITS);\n+  log_warning(gc, alloc)(\"%s: Stall for VM-Shutdown timed out; allocation may fail with OOME\", Thread::current()->name());\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.cpp","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -255,0 +255,3 @@\n+  \/\/ If the VM is shutting down, we may have skipped VM_CollectForAllocation.\n+  \/\/ In this case, stall the allocation request briefly in the hope that\n+  \/\/ the VM shutdown completes before the allocation request returns.\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -308,0 +308,1 @@\n+  \/\/ Run heap before exit (stop concurrent GC threads, log GC\/heap exit information)\n","filename":"src\/hotspot\/share\/memory\/universe.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -511,1 +511,0 @@\n-  \/\/ Run before exit and then stop concurrent GC threads\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}