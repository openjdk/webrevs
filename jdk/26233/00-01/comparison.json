{"files":[{"patch":"@@ -38,1 +38,1 @@\n-#include \"oops\/access.hpp\"\n+#include \"memory\/universe.hpp\"\n@@ -437,5 +437,3 @@\n-  oop* handle = oop_storage()->allocate();\n-  if (handle == nullptr) {\n-    vm_exit_out_of_memory(sizeof(oop), OOM_MALLOC_ERROR, \"Cannot allocate oop storage for mirror\");\n-  }\n-  NativeAccess<>::oop_store(handle, klass->java_mirror());\n+  \/\/ The OopHandle constructor will allocate a handle. We don't need to ever release it so we don't preserve\n+  \/\/ the handle object.\n+  OopHandle handle(Universe::vm_global(), klass->java_mirror());\n","filename":"src\/hotspot\/share\/oops\/trainingData.cpp","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"memory\/universe.hpp\"\n@@ -457,3 +456,0 @@\n-  static OopStorage* oop_storage() {\n-    return Universe::vm_global();\n-  }\n","filename":"src\/hotspot\/share\/oops\/trainingData.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}