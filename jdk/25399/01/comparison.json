{"files":[{"patch":"@@ -99,1 +99,1 @@\n- * information on AEAD and AAD algorithms such as GCM\/CCM.) Both\n+ * information on AEAD and AAD algorithms.) Both\n@@ -104,1 +104,1 @@\n- * AEAD modes such as GCM\/CCM perform all AAD authenticity calculations\n+ * AEAD modes perform all AAD authenticity calculations\n@@ -107,1 +107,1 @@\n- * must be supplied to GCM\/CCM implementations (via the {@code updateAAD}\n+ * must be supplied to their implementations (via the {@code updateAAD}\n@@ -111,17 +111,8 @@\n- * Note that GCM mode has a uniqueness requirement on IVs used in\n- * encryption with a given key. When IVs are repeated for GCM\n- * encryption, such usages are subject to forgery attacks. Thus, after\n- * each encryption operation using GCM mode, callers should re-initialize\n- * the {@code Cipher} objects with GCM parameters which have a different IV\n- * value.\n- * <pre>\n- *     GCMParameterSpec s = ...;\n- *     cipher.init(..., s);\n- *\n- *     \/\/ If the GCM parameters were generated by the provider, it can\n- *     \/\/ be retrieved by:\n- *     \/\/ cipher.getParameters().getParameterSpec(GCMParameterSpec.class);\n- *\n- *     cipher.updateAAD(...);  \/\/ AAD\n- *     cipher.update(...);     \/\/ Multi-part update\n- *     cipher.doFinal(...);    \/\/ conclusion of operation\n+ * When {@code doFinal} methods completes the operation, the {@code Cipher} object will attempt\n+ * to reset the state to the most recent call to {@code init}, allowing for additional\n+ * operations. A successful reset depends on the mode ({@code ENCRYPT_MODE} or\n+ * {@code DECRYPT_MODE}) and the algorithm. AEAD algorithms may not reset to prevent\n+ * forgery attacks due to Key and IV uniqueness requirements.\n+ * An {@link IllegalStateException} will be thrown when calling {@code update}\n+ * or {@code doFinal} methods when a reset did not occur. {@code init} may\n+ * re-initialize the {@code Cipher} object with new parameters.\n@@ -129,5 +120,2 @@\n- *     \/\/ Use a different IV value for every encryption\n- *     byte[] newIv = ...;\n- *     s = new GCMParameterSpec(s.getTLen(), newIv);\n- *     cipher.init(..., s);\n- *     ...\n+ *  @see javax.crypto.Cipher\n+ *  @see javax.crypto.spec.GCMParameterSpec\n@@ -135,7 +123,0 @@\n- * <\/pre>\n- * The ChaCha20 and ChaCha20-Poly1305 algorithms have a similar requirement\n- * for unique nonces with a given key.  After each encryption or decryption\n- * operation, callers should re-initialize their ChaCha20 or ChaCha20-Poly1305\n- * ciphers with parameters that specify a different nonce value.  Please\n- * see <a href=\"https:\/\/tools.ietf.org\/html\/rfc7539\">RFC 7539<\/a> for more\n- * information on the ChaCha20 and ChaCha20-Poly1305 algorithms.\n@@ -170,2 +151,0 @@\n- * @spec https:\/\/www.rfc-editor.org\/info\/rfc7539\n- *      RFC 7539: ChaCha20 and Poly1305 for IETF Protocols\n@@ -2107,10 +2086,0 @@\n-     * <p>Upon finishing, this method resets this {@code Cipher} object\n-     * to the state it was in when previously initialized via a call to\n-     * {@code init}.\n-     * That is, the object is reset and available to encrypt or decrypt\n-     * (depending on the operation mode that was specified in the call to\n-     * {@code init}) more data.\n-     *\n-     * <p>Note: if any exception is thrown, this {@code Cipher} object\n-     * may need to be reset before it can be used again.\n-     *\n@@ -2120,2 +2089,1 @@\n-     * is in a wrong state (e.g., has not been initialized, or is not\n-     * in {@code ENCRYPT_MODE} or {@code DECRYPT_MODE})\n+     * is in a wrong state or cannot be reset.\n@@ -2221,10 +2189,0 @@\n-     * <p>Upon finishing, this method resets this {@code Cipher} object\n-     * to the state it was in when previously initialized via a call to\n-     * {@code init}.\n-     * That is, the object is reset and available to encrypt or decrypt\n-     * (depending on the operation mode that was specified in the call to\n-     * {@code init}) more data.\n-     *\n-     * <p>Note: if any exception is thrown, this {@code Cipher} object\n-     * may need to be reset before it can be used again.\n-     *\n@@ -2236,2 +2194,1 @@\n-     * is in a wrong state (e.g., has not been initialized, or is not\n-     * in {@code ENCRYPT_MODE} or {@code DECRYPT_MODE})\n+     * is in a wrong state or cannot be reset.\n@@ -2277,10 +2234,0 @@\n-     * <p>Upon finishing, this method resets this {@code Cipher} object\n-     * to the state it was in when previously initialized via a call to\n-     * {@code init}.\n-     * That is, the object is reset and available to encrypt or decrypt\n-     * (depending on the operation mode that was specified in the call to\n-     * {@code init}) more data.\n-     *\n-     * <p>Note: if any exception is thrown, this {@code Cipher} object\n-     * may need to be reset before it can be used again.\n-     *\n@@ -2295,2 +2242,1 @@\n-     * is in a wrong state (e.g., has not been initialized, or is not\n-     * in {@code ENCRYPT_MODE} or {@code DECRYPT_MODE})\n+     * is in a wrong state or cannot be reset.\n@@ -2343,10 +2289,0 @@\n-     * <p>Upon finishing, this method resets this {@code Cipher} object\n-     * to the state it was in when previously initialized via a call to\n-     * {@code init}.\n-     * That is, the object is reset and available to encrypt or decrypt\n-     * (depending on the operation mode that was specified in the call to\n-     * {@code init}) more data.\n-     *\n-     * <p>Note: if any exception is thrown, this {@code Cipher} object\n-     * may need to be reset before it can be used again.\n-     *\n@@ -2367,2 +2303,1 @@\n-     * is in a wrong state (e.g., has not been initialized, or is not\n-     * in  or {@code ENCRYPT_MODE} or {@code DECRYPT_MODE})\n+     * is in a wrong state or cannot be reset.\n@@ -2422,10 +2357,0 @@\n-     * <p>Upon finishing, this method resets this {@code Cipher} object\n-     * to the state it was in when previously initialized via a call to\n-     * {@code init}.\n-     * That is, the object is reset and available to encrypt or decrypt\n-     * (depending on the operation mode that was specified in the call to\n-     * {@code init}) more data.\n-     *\n-     * <p>Note: if any exception is thrown, this {@code Cipher} object\n-     * may need to be reset before it can be used again.\n-     *\n@@ -2448,2 +2373,1 @@\n-     * is in a wrong state (e.g., has not been initialized, or is not\n-     * in {@code ENCRYPT_MODE} or {@code DECRYPT_MODE})\n+     * is in a wrong state or cannot be reset.\n@@ -2504,10 +2428,0 @@\n-     * <p>Upon finishing, this method resets this {@code Cipher} object\n-     * to the state it was in when previously initialized via a call to\n-     * {@code init}.\n-     * That is, the object is reset and available to encrypt or decrypt\n-     * (depending on the operation mode that was specified in the call to\n-     * {@code init}) more data.\n-     *\n-     * <p>Note: if any exception is thrown, this {@code Cipher} object\n-     * may need to be reset before it can be used again.\n-     *\n@@ -2525,2 +2439,1 @@\n-     * is in a wrong state (e.g., has not been initialized, or is not\n-     * in {@code ENCRYPT_MODE} or {@code DECRYPT_MODE})\n+     * is in a wrong state or cannot be reset.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/Cipher.java","additions":19,"deletions":106,"binary":false,"changes":125,"status":"modified"}]}