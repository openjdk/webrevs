{"files":[{"patch":"@@ -1,138 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.net.Socket;\n-import java.security.Principal;\n-import java.security.PrivateKey;\n-import java.security.cert.X509Certificate;\n-import javax.net.ssl.SSLEngine;\n-import javax.net.ssl.SSLSocket;\n-import javax.net.ssl.X509ExtendedKeyManager;\n-\n-public class MyX509ExtendedKeyManager extends X509ExtendedKeyManager {\n-\n-    static final String ERROR = \"ERROR\";\n-    X509ExtendedKeyManager akm;\n-    String expectedAP;\n-    boolean doCheck = true;\n-\n-    MyX509ExtendedKeyManager(X509ExtendedKeyManager akm) {\n-        this.akm = akm;\n-    }\n-\n-    public MyX509ExtendedKeyManager(\n-            X509ExtendedKeyManager akm, String expectedAP, boolean doCheck) {\n-        this.akm = akm;\n-        this.expectedAP = expectedAP;\n-        this.doCheck = doCheck;\n-\n-    }\n-\n-    @Override\n-    public String[] getClientAliases(String keyType, Principal[] issuers) {\n-        return akm.getClientAliases(keyType, issuers);\n-    }\n-\n-    @Override\n-    public String chooseClientAlias(String[] keyType, Principal[] issuers,\n-            Socket socket) {\n-        String nap = ((SSLSocket) socket).getHandshakeApplicationProtocol();\n-        checkALPN(nap);\n-\n-        return akm.chooseClientAlias(keyType, issuers, socket);\n-    }\n-\n-    @Override\n-    public String[] getServerAliases(String keyType, Principal[] issuers) {\n-        return akm.getServerAliases(keyType, issuers);\n-    }\n-\n-    @Override\n-    public String chooseServerAlias(String keyType, Principal[] issuers,\n-            Socket socket) {\n-        String nap = ((SSLSocket) socket).getHandshakeApplicationProtocol();\n-        checkALPN(nap);\n-\n-        return akm.chooseServerAlias(keyType, issuers, socket);\n-    }\n-\n-    @Override\n-    public X509Certificate[] getCertificateChain(String alias) {\n-        return akm.getCertificateChain(alias);\n-    }\n-\n-    @Override\n-    public PrivateKey getPrivateKey(String alias) {\n-        return akm.getPrivateKey(alias);\n-    }\n-\n-    @Override\n-    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers,\n-            SSLEngine engine) {\n-        String nap = engine.getHandshakeApplicationProtocol();\n-        checkALPN(nap);\n-\n-        return akm.chooseEngineClientAlias(keyType, issuers, engine);\n-    }\n-\n-    @Override\n-    public String chooseEngineServerAlias(String keyType, Principal[] issuers,\n-            SSLEngine engine) {\n-        String nap = engine.getHandshakeApplicationProtocol();\n-        checkALPN(nap);\n-\n-        return akm.chooseEngineServerAlias(keyType, issuers, engine);\n-    }\n-\n-    private void checkALPN(String ap) {\n-\n-        if (!doCheck) {\n-            System.out.println(\"Skipping KeyManager checks \" +\n-                \"because a callback has been registered\");\n-            return;\n-        }\n-\n-        if (ERROR.equals(expectedAP)) {\n-            throw new RuntimeException(\"Should not reach here\");\n-        }\n-\n-        System.out.println(\"Expected ALPN value: \" + expectedAP\n-                + \" Got: \" + ap);\n-\n-        if (ap == null) {\n-            throw new RuntimeException(\n-                    \"ALPN should be negotiated, but null was received\");\n-        }\n-        if (expectedAP.equals(\"NONE\")) {\n-            if (!ap.isEmpty()) {\n-                throw new RuntimeException(\"Expected no ALPN value\");\n-            } else {\n-                System.out.println(\"No ALPN value negotiated, as expected\");\n-            }\n-        } else if (!expectedAP.equals(ap)) {\n-            throw new RuntimeException(expectedAP\n-                    + \" ALPN value not available on negotiated connection\");\n-        }\n-\n-    }\n-}\n","filename":"test\/jdk\/javax\/net\/ssl\/ALPN\/MyX509ExtendedKeyManager.java","additions":0,"deletions":138,"binary":false,"changes":138,"status":"deleted"},{"patch":"@@ -31,1 +31,0 @@\n- * @compile MyX509ExtendedKeyManager.java\n@@ -240,3 +239,3 @@\n-        kms = new KeyManager[] { new MyX509ExtendedKeyManager(\n-                (X509ExtendedKeyManager) kms[0], expectedAP,\n-                !hasCallback && hasServerAPs) };\n+\/\/        kms = new KeyManager[] { new MyX509ExtendedKeyManager(\n+\/\/                (X509ExtendedKeyManager) kms[0], expectedAP,\n+\/\/                !hasCallback && hasServerAPs) };\n","filename":"test\/jdk\/javax\/net\/ssl\/ALPN\/SSLEngineAlpnTest.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"}]}