{"files":[{"patch":"@@ -1,138 +0,0 @@\n-\/*\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.net.Socket;\n-import java.security.Principal;\n-import java.security.PrivateKey;\n-import java.security.cert.X509Certificate;\n-import javax.net.ssl.SSLEngine;\n-import javax.net.ssl.SSLSocket;\n-import javax.net.ssl.X509ExtendedKeyManager;\n-\n-public class MyX509ExtendedKeyManager extends X509ExtendedKeyManager {\n-\n-    static final String ERROR = \"ERROR\";\n-    X509ExtendedKeyManager akm;\n-    String expectedAP;\n-    boolean doCheck = true;\n-\n-    MyX509ExtendedKeyManager(X509ExtendedKeyManager akm) {\n-        this.akm = akm;\n-    }\n-\n-    public MyX509ExtendedKeyManager(\n-            X509ExtendedKeyManager akm, String expectedAP, boolean doCheck) {\n-        this.akm = akm;\n-        this.expectedAP = expectedAP;\n-        this.doCheck = doCheck;\n-\n-    }\n-\n-    @Override\n-    public String[] getClientAliases(String keyType, Principal[] issuers) {\n-        return akm.getClientAliases(keyType, issuers);\n-    }\n-\n-    @Override\n-    public String chooseClientAlias(String[] keyType, Principal[] issuers,\n-            Socket socket) {\n-        String nap = ((SSLSocket) socket).getHandshakeApplicationProtocol();\n-        checkALPN(nap);\n-\n-        return akm.chooseClientAlias(keyType, issuers, socket);\n-    }\n-\n-    @Override\n-    public String[] getServerAliases(String keyType, Principal[] issuers) {\n-        return akm.getServerAliases(keyType, issuers);\n-    }\n-\n-    @Override\n-    public String chooseServerAlias(String keyType, Principal[] issuers,\n-            Socket socket) {\n-        String nap = ((SSLSocket) socket).getHandshakeApplicationProtocol();\n-        checkALPN(nap);\n-\n-        return akm.chooseServerAlias(keyType, issuers, socket);\n-    }\n-\n-    @Override\n-    public X509Certificate[] getCertificateChain(String alias) {\n-        return akm.getCertificateChain(alias);\n-    }\n-\n-    @Override\n-    public PrivateKey getPrivateKey(String alias) {\n-        return akm.getPrivateKey(alias);\n-    }\n-\n-    @Override\n-    public String chooseEngineClientAlias(String[] keyType, Principal[] issuers,\n-            SSLEngine engine) {\n-        String nap = engine.getHandshakeApplicationProtocol();\n-        checkALPN(nap);\n-\n-        return akm.chooseEngineClientAlias(keyType, issuers, engine);\n-    }\n-\n-    @Override\n-    public String chooseEngineServerAlias(String keyType, Principal[] issuers,\n-            SSLEngine engine) {\n-        String nap = engine.getHandshakeApplicationProtocol();\n-        checkALPN(nap);\n-\n-        return akm.chooseEngineServerAlias(keyType, issuers, engine);\n-    }\n-\n-    private void checkALPN(String ap) {\n-\n-        if (!doCheck) {\n-            System.out.println(\"Skipping KeyManager checks \" +\n-                \"because a callback has been registered\");\n-            return;\n-        }\n-\n-        if (ERROR.equals(expectedAP)) {\n-            throw new RuntimeException(\"Should not reach here\");\n-        }\n-\n-        System.out.println(\"Expected ALPN value: \" + expectedAP\n-                + \" Got: \" + ap);\n-\n-        if (ap == null) {\n-            throw new RuntimeException(\n-                    \"ALPN should be negotiated, but null was received\");\n-        }\n-        if (expectedAP.equals(\"NONE\")) {\n-            if (!ap.isEmpty()) {\n-                throw new RuntimeException(\"Expected no ALPN value\");\n-            } else {\n-                System.out.println(\"No ALPN value negotiated, as expected\");\n-            }\n-        } else if (!expectedAP.equals(ap)) {\n-            throw new RuntimeException(expectedAP\n-                    + \" ALPN value not available on negotiated connection\");\n-        }\n-\n-    }\n-}\n","filename":"test\/jdk\/javax\/net\/ssl\/ALPN\/MyX509ExtendedKeyManager.java","additions":0,"deletions":138,"binary":false,"changes":138,"status":"deleted"},{"patch":"@@ -31,1 +31,0 @@\n- * @compile MyX509ExtendedKeyManager.java\n@@ -240,4 +239,0 @@\n-        kms = new KeyManager[] { new MyX509ExtendedKeyManager(\n-                (X509ExtendedKeyManager) kms[0], expectedAP,\n-                !hasCallback && hasServerAPs) };\n-\n","filename":"test\/jdk\/javax\/net\/ssl\/ALPN\/SSLEngineAlpnTest.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @compile MyX509ExtendedKeyManager.java\n+ * @library \/javax\/net\/ssl\/templates\n@@ -82,1 +82,0 @@\n-import java.security.KeyStore;\n@@ -87,1 +86,1 @@\n-public class SSLServerSocketAlpnTest {\n+public class SSLServerSocketAlpnTest extends SSLSocketTemplate {\n@@ -89,27 +88,0 @@\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n-\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = false;\n-\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String pathToStores = \"..\/etc\";\n-    static String keyStoreFile = \"keystore\";\n-    static String trustStoreFile = \"truststore\";\n-    static String passwd = \"passphrase\";\n-\n-    static String keyFilename = System.getProperty(\"test.src\", \".\") + \"\/\"\n-            + pathToStores + \"\/\" + keyStoreFile;\n-    static String trustFilename = System.getProperty(\"test.src\", \".\") + \"\/\"\n-            + pathToStores + \"\/\" + trustStoreFile;\n-\n-    private static boolean hasServerAPs; \/\/ whether server APs are present\n@@ -118,10 +90,0 @@\n-    \/*\n-     * SSLContext\n-     *\/\n-    SSLContext mySSLContext = null;\n-\n-    \/*\n-     * Is the server ready to serve?\n-     *\/\n-    volatile static boolean serverReady = false;\n-\n@@ -131,1 +93,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -147,10 +109,2 @@\n-    \/*\n-     * Define the server side of the test.\n-     *\n-     * If the server prematurely exits, serverReady will be set to true\n-     * to avoid infinite hangs.\n-     *\/\n-    void doServerSide() throws Exception {\n-        SSLServerSocketFactory sslssf = mySSLContext.getServerSocketFactory();\n-        SSLServerSocket sslServerSocket\n-                = (SSLServerSocket) sslssf.createServerSocket(serverPort);\n+    @Override\n+    protected void configureServerSocket(SSLServerSocket sslServerSocket) {\n@@ -181,0 +135,1 @@\n+    }\n@@ -182,6 +137,8 @@\n-        \/*\n-         * Signal Client, we're ready for his connect.\n-         *\/\n-        serverReady = true;\n-\n-        SSLSocket sslSocket = (SSLSocket) sslServerSocket.accept();\n+    \/*\n+     * Define the server side of the test.\n+     *\n+     * If the server prematurely exits, serverReady will be set to true\n+     * to avoid infinite hangs.\n+     *\/\n+    @Override\n+    protected void runServerApplication(SSLSocket sslSocket) throws Exception {\n@@ -248,20 +205,3 @@\n-    \/*\n-     * Define the client side of the test.\n-     *\n-     * If the server prematurely exits, serverReady will be set to true\n-     * to avoid infinite hangs.\n-     *\/\n-    void doClientSide() throws Exception {\n-\n-        \/*\n-         * Wait for server to get started.\n-         *\/\n-        while (!serverReady) {\n-            Thread.sleep(50);\n-        }\n-\n-        SSLSocketFactory sslsf = mySSLContext.getSocketFactory();\n-        SSLSocket sslSocket\n-                = (SSLSocket) sslsf.createSocket(\"localhost\", serverPort);\n-\n-        SSLParameters sslp = sslSocket.getSSLParameters();\n+    @Override\n+    protected void configureClientSocket(SSLSocket socket) {\n+        SSLParameters sslp = socket.getSSLParameters();\n@@ -281,1 +221,11 @@\n-        sslSocket.setSSLParameters(sslp);\n+        socket.setSSLParameters(sslp);\n+    }\n+\n+    \/*\n+     * Define the client side of the test.\n+     *\n+     * If the server prematurely exits, serverReady will be set to true\n+     * to avoid infinite hangs.\n+     *\/\n+    @Override\n+    protected void runClientApplication(SSLSocket sslSocket) throws Exception {\n@@ -335,3 +285,0 @@\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n-\n@@ -354,1 +301,0 @@\n-        hasServerAPs = !args[0].equals(\"UNUSED\"); \/\/ are server APs being used?\n@@ -361,1 +307,1 @@\n-            new SSLServerSocketAlpnTest();\n+            new SSLServerSocketAlpnTest().run();\n@@ -373,34 +319,0 @@\n-    SSLContext getSSLContext(String keyFilename, String trustFilename)\n-            throws Exception {\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-\n-        \/\/ Keystores\n-        KeyStore keyKS = KeyStore.getInstance(\"JKS\");\n-        keyKS.load(new FileInputStream(keyFilename), passwd.toCharArray());\n-\n-        KeyStore trustKS = KeyStore.getInstance(\"JKS\");\n-        trustKS.load(new FileInputStream(trustFilename), passwd.toCharArray());\n-\n-        \/\/ Generate KeyManager and TrustManager\n-        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-        kmf.init(keyKS, passwd.toCharArray());\n-\n-        KeyManager[] kms = kmf.getKeyManagers();\n-        if (!(kms[0] instanceof X509ExtendedKeyManager)) {\n-            throw new Exception(\"kms[0] not X509ExtendedKeyManager\");\n-        }\n-\n-        kms = new KeyManager[] { new MyX509ExtendedKeyManager(\n-                (X509ExtendedKeyManager) kms[0], expectedAP,\n-                !hasCallback && hasServerAPs) };\n-\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n-        tmf.init(trustKS);\n-        TrustManager[] tms = tmf.getTrustManagers();\n-\n-        \/\/ initial SSLContext\n-        ctx.init(kms, tms, null);\n-\n-        return ctx;\n-    }\n-\n@@ -428,139 +340,0 @@\n-\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n-\n-    \/*\n-     * Primary constructor, used to drive remainder of the test.\n-     *\n-     * Fork off the other side, then do your work.\n-     *\/\n-    SSLServerSocketAlpnTest() throws Exception {\n-        Exception startException = null;\n-        mySSLContext = getSSLContext(keyFilename, trustFilename);\n-        try {\n-            if (separateServerThread) {\n-                startServer(true);\n-                startClient(false);\n-            } else {\n-                startClient(true);\n-                startServer(false);\n-            }\n-        } catch (Exception e) {\n-            startException = e;\n-        }\n-\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            if (serverThread != null) {\n-                serverThread.join();\n-            }\n-        } else {\n-            if (clientThread != null) {\n-                clientThread.join();\n-            }\n-        }\n-\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         * Which side threw the error?\n-         *\/\n-        Exception local;\n-        Exception remote;\n-\n-        if (separateServerThread) {\n-            remote = serverException;\n-            local = clientException;\n-        } else {\n-            remote = clientException;\n-            local = serverException;\n-        }\n-\n-        Exception exception = null;\n-\n-        \/*\n-         * Check various exception conditions.\n-         *\/\n-        if ((local != null) && (remote != null)) {\n-            \/\/ If both failed, return the curthread's exception.\n-            local.addSuppressed(remote);\n-            exception = local;\n-        } else if (local != null) {\n-            exception = local;\n-        } else if (remote != null) {\n-            exception = remote;\n-        } else if (startException != null) {\n-            exception = startException;\n-        }\n-\n-        \/*\n-         * If there was an exception *AND* a startException,\n-         * output it.\n-         *\/\n-        if (exception != null) {\n-            if (exception != startException && startException != null) {\n-                exception.addSuppressed(startException);\n-            }\n-            throw exception;\n-        }\n-\n-        \/\/ Fall-through: no exception to throw!\n-    }\n-\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                @Override\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            try {\n-                doServerSide();\n-            } catch (Exception e) {\n-                serverException = e;\n-            } finally {\n-                serverReady = true;\n-            }\n-        }\n-    }\n-\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                @Override\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            try {\n-                doClientSide();\n-            } catch (Exception e) {\n-                clientException = e;\n-            }\n-        }\n-    }\n","filename":"test\/jdk\/javax\/net\/ssl\/ALPN\/SSLServerSocketAlpnTest.java","additions":30,"deletions":257,"binary":false,"changes":287,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @compile MyX509ExtendedKeyManager.java\n+ * @library \/javax\/net\/ssl\/templates\n@@ -81,1 +81,0 @@\n-import java.security.KeyStore;\n@@ -86,1 +85,1 @@\n-public class SSLSocketAlpnTest {\n+public class SSLSocketAlpnTest extends SSLSocketTemplate {\n@@ -88,27 +87,0 @@\n-    \/*\n-     * =============================================================\n-     * Set the various variables needed for the tests, then\n-     * specify what tests to run on each side.\n-     *\/\n-\n-    \/*\n-     * Should we run the client or server in a separate thread?\n-     * Both sides can throw exceptions, but do you have a preference\n-     * as to which side should be the main thread.\n-     *\/\n-    static boolean separateServerThread = false;\n-\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    static String pathToStores = \"..\/etc\";\n-    static String keyStoreFile = \"keystore\";\n-    static String trustStoreFile = \"truststore\";\n-    static String passwd = \"passphrase\";\n-\n-    static String keyFilename = System.getProperty(\"test.src\", \".\") + \"\/\"\n-            + pathToStores + \"\/\" + keyStoreFile;\n-    static String trustFilename = System.getProperty(\"test.src\", \".\") + \"\/\"\n-            + pathToStores + \"\/\" + trustStoreFile;\n-\n-    private static boolean hasServerAPs; \/\/ whether server APs are present\n@@ -117,10 +89,0 @@\n-    \/*\n-     * SSLContext\n-     *\/\n-    SSLContext mySSLContext = null;\n-\n-    \/*\n-     * Is the server ready to serve?\n-     *\/\n-    volatile static boolean serverReady = false;\n-\n@@ -130,1 +92,1 @@\n-    static boolean debug = false;\n+    static boolean debug = Boolean.getBoolean(\"test.debug\");\n@@ -146,0 +108,5 @@\n+    @Override\n+    protected void configureServerSocket(SSLServerSocket socket) {\n+        socket.setNeedClientAuth(true);\n+    }\n+\n@@ -152,16 +119,3 @@\n-    void doServerSide() throws Exception {\n-        SSLServerSocketFactory sslssf = mySSLContext.getServerSocketFactory();\n-        SSLServerSocket sslServerSocket\n-                = (SSLServerSocket) sslssf.createServerSocket(serverPort);\n-        \/\/ for both client\/server to call into X509KM\n-        sslServerSocket.setNeedClientAuth(true);\n-\n-        serverPort = sslServerSocket.getLocalPort();\n-\n-        \/*\n-         * Signal Client, we're ready for his connect.\n-         *\/\n-        serverReady = true;\n-\n-        SSLSocket sslSocket = (SSLSocket) sslServerSocket.accept();\n-\n+    @Override\n+    protected void runServerApplication(SSLSocket sslSocket) throws Exception {\n+        System.out.println(\"in runServerApplication(SSLSocket)\");\n@@ -209,0 +163,1 @@\n+        System.out.println(\"server starting handshake\");\n@@ -250,12 +205,3 @@\n-    void doClientSide() throws Exception {\n-\n-        \/*\n-         * Wait for server to get started.\n-         *\/\n-        while (!serverReady) {\n-            Thread.sleep(50);\n-        }\n-\n-        SSLSocketFactory sslsf = mySSLContext.getSocketFactory();\n-        SSLSocket sslSocket\n-                = (SSLSocket) sslsf.createSocket(\"localhost\", serverPort);\n+    @Override\n+    protected void runClientApplication(SSLSocket sslSocket) throws Exception {\n+        System.out.println(\"in runClientApplication(SSLSocket)\");\n@@ -284,0 +230,1 @@\n+        System.out.println(\"Client starting handshake\");\n@@ -324,10 +271,0 @@\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n-    \/\/ use any free port by default\n-    volatile int serverPort = 0;\n-\n-    volatile Exception serverException = null;\n-    volatile Exception clientException = null;\n-\n@@ -350,1 +287,0 @@\n-        hasServerAPs = !args[0].equals(\"UNUSED\"); \/\/ are server APs being used?\n@@ -357,1 +293,1 @@\n-            new SSLSocketAlpnTest();\n+            new SSLSocketAlpnTest().run();\n@@ -369,34 +305,0 @@\n-    SSLContext getSSLContext(String keyFilename, String trustFilename)\n-            throws Exception {\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-\n-        \/\/ Keystores\n-        KeyStore keyKS = KeyStore.getInstance(\"JKS\");\n-        keyKS.load(new FileInputStream(keyFilename), passwd.toCharArray());\n-\n-        KeyStore trustKS = KeyStore.getInstance(\"JKS\");\n-        trustKS.load(new FileInputStream(trustFilename), passwd.toCharArray());\n-\n-        \/\/ Generate KeyManager and TrustManager\n-        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-        kmf.init(keyKS, passwd.toCharArray());\n-\n-        KeyManager[] kms = kmf.getKeyManagers();\n-        if (!(kms[0] instanceof X509ExtendedKeyManager)) {\n-            throw new Exception(\"kms[0] not X509ExtendedKeyManager\");\n-        }\n-\n-        kms = new KeyManager[] { new MyX509ExtendedKeyManager(\n-                (X509ExtendedKeyManager) kms[0], expectedAP,\n-                !hasCallback && hasServerAPs) };\n-\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n-        tmf.init(trustKS);\n-        TrustManager[] tms = tmf.getTrustManagers();\n-\n-        \/\/ initial SSLContext\n-        ctx.init(kms, tms, null);\n-\n-        return ctx;\n-    }\n-\n@@ -424,139 +326,0 @@\n-\n-    Thread clientThread = null;\n-    Thread serverThread = null;\n-\n-    \/*\n-     * Primary constructor, used to drive remainder of the test.\n-     *\n-     * Fork off the other side, then do your work.\n-     *\/\n-    SSLSocketAlpnTest() throws Exception {\n-        Exception startException = null;\n-        mySSLContext = getSSLContext(keyFilename, trustFilename);\n-        try {\n-            if (separateServerThread) {\n-                startServer(true);\n-                startClient(false);\n-            } else {\n-                startClient(true);\n-                startServer(false);\n-            }\n-        } catch (Exception e) {\n-            startException = e;\n-        }\n-\n-        \/*\n-         * Wait for other side to close down.\n-         *\/\n-        if (separateServerThread) {\n-            if (serverThread != null) {\n-                serverThread.join();\n-            }\n-        } else {\n-            if (clientThread != null) {\n-                clientThread.join();\n-            }\n-        }\n-\n-        \/*\n-         * When we get here, the test is pretty much over.\n-         * Which side threw the error?\n-         *\/\n-        Exception local;\n-        Exception remote;\n-\n-        if (separateServerThread) {\n-            remote = serverException;\n-            local = clientException;\n-        } else {\n-            remote = clientException;\n-            local = serverException;\n-        }\n-\n-        Exception exception = null;\n-\n-        \/*\n-         * Check various exception conditions.\n-         *\/\n-        if ((local != null) && (remote != null)) {\n-            \/\/ If both failed, return the curthread's exception.\n-            local.addSuppressed(remote);\n-            exception = local;\n-        } else if (local != null) {\n-            exception = local;\n-        } else if (remote != null) {\n-            exception = remote;\n-        } else if (startException != null) {\n-            exception = startException;\n-        }\n-\n-        \/*\n-         * If there was an exception *AND* a startException,\n-         * output it.\n-         *\/\n-        if (exception != null) {\n-            if (exception != startException && startException != null) {\n-                exception.addSuppressed(startException);\n-            }\n-            throw exception;\n-        }\n-\n-        \/\/ Fall-through: no exception to throw!\n-    }\n-\n-    void startServer(boolean newThread) throws Exception {\n-        if (newThread) {\n-            serverThread = new Thread() {\n-                @Override\n-                public void run() {\n-                    try {\n-                        doServerSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our server thread just died.\n-                         *\n-                         * Release the client, if not active already...\n-                         *\/\n-                        System.err.println(\"Server died...\");\n-                        serverReady = true;\n-                        serverException = e;\n-                    }\n-                }\n-            };\n-            serverThread.start();\n-        } else {\n-            try {\n-                doServerSide();\n-            } catch (Exception e) {\n-                serverException = e;\n-            } finally {\n-                serverReady = true;\n-            }\n-        }\n-    }\n-\n-    void startClient(boolean newThread) throws Exception {\n-        if (newThread) {\n-            clientThread = new Thread() {\n-                @Override\n-                public void run() {\n-                    try {\n-                        doClientSide();\n-                    } catch (Exception e) {\n-                        \/*\n-                         * Our client thread just died.\n-                         *\/\n-                        System.err.println(\"Client died...\");\n-                        clientException = e;\n-                    }\n-                }\n-            };\n-            clientThread.start();\n-        } else {\n-            try {\n-                doClientSide();\n-            } catch (Exception e) {\n-                clientException = e;\n-            }\n-        }\n-    }\n","filename":"test\/jdk\/javax\/net\/ssl\/ALPN\/SSLSocketAlpnTest.java","additions":18,"deletions":255,"binary":false,"changes":273,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class HandshakeWithInvalidRecordVersion implements SSLContextTemplate {\n+public class HandshakeWithInvalidRecordVersion extends SSLContextTemplate {\n@@ -43,10 +43,0 @@\n-    private static final String PATH_TO_STORES = \"..\/etc\";\n-    private static final String KEYSTORE_FILE = \"keystore\";\n-    private static final String TRUSTSTORE_FILE = \"truststore\";\n-\n-    private static final String KEYSTORE_PATH =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + PATH_TO_STORES +\n-                    \"\/\" + KEYSTORE_FILE;\n-    private static final String TRUSTSTORE_PATH =\n-            System.getProperty(\"test.src\", \".\/\") + \"\/\" + PATH_TO_STORES +\n-                    \"\/\" + TRUSTSTORE_FILE;\n","filename":"test\/jdk\/javax\/net\/ssl\/SSLEngine\/HandshakeWithInvalidRecordVersion.java","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,2 +45,0 @@\n-import java.net.*;\n-import java.util.*;\n@@ -50,8 +48,0 @@\n-import java.security.KeyStore;\n-import java.security.KeyFactory;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.util.Base64;\n-\n@@ -61,51 +51,0 @@\n-    \/*\n-     * Where do we find the keystores?\n-     *\/\n-    \/\/ Certificates and key used in the test.\n-    static String trustedCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICkjCCAfugAwIBAgIBADANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTEwODE5MDE1MjE5WhcNMzIwNzI5MDE1MjE5WjA7MQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwgZ8wDQYJ\\n\" +\n-        \"KoZIhvcNAQEBBQADgY0AMIGJAoGBAM8orG08DtF98TMSscjGsidd1ZoN4jiDpi8U\\n\" +\n-        \"ICz+9dMm1qM1d7O2T+KH3\/mxyox7Rc2ZVSCaUD0a3CkhPMnlAx8V4u0H+E9sqso6\\n\" +\n-        \"iDW3JpOyzMExvZiRgRG\/3nvp55RMIUV4vEHOZ1QbhuqG4ebN0Vz2DkRft7+flthf\\n\" +\n-        \"vDld6f5JAgMBAAGjgaUwgaIwHQYDVR0OBBYEFLl81dnfp0wDrv0OJ1sxlWzH83Xh\\n\" +\n-        \"MGMGA1UdIwRcMFqAFLl81dnfp0wDrv0OJ1sxlWzH83XhoT+kPTA7MQswCQYDVQQG\\n\" +\n-        \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n-        \"Y2WCAQAwDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEE\\n\" +\n-        \"BQADgYEALlgaH1gWtoBZ84EW8Hu6YtGLQ\/L9zIFmHonUPZwn3Pr\/\/icR9Sqhc3\/l\\n\" +\n-        \"pVTxOINuFHLRz4BBtEylzRIOPzK3tg8XwuLb1zd0db90x3KBCiAL6E6cklGEPwLe\\n\" +\n-        \"XYMHDn9eDsaq861Tzn6ZwzMgw04zotPMoZN0mVd\/3Qca8UJFucE=\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    static String targetCertStr =\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICNDCCAZ2gAwIBAgIBDDANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n-        \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n-        \"MTExMTA3MTM1NTUyWhcNMzEwNzI1MTM1NTUyWjBPMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n-        \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxEjAQBgNV\\n\" +\n-        \"BAMTCWxvY2FsaG9zdDBcMA0GCSqGSIb3DQEBAQUAA0sAMEgCQQC3Pb49OSPfOD2G\\n\" +\n-        \"HSXFCFx1GJEZfqG9ZUf7xuIi\/ra5dLjPGAaoY5QF2QOa8VnOriQCXDfyXHxsuRnE\\n\" +\n-        \"OomxL7EVAgMBAAGjeDB2MAsGA1UdDwQEAwID6DAdBgNVHQ4EFgQUXNCJK3\/dtCIc\\n\" +\n-        \"xb+zlA\/JINlvs\/MwHwYDVR0jBBgwFoAUuXzV2d+nTAOu\/Q4nWzGVbMfzdeEwJwYD\\n\" +\n-        \"VR0lBCAwHgYIKwYBBQUHAwEGCCsGAQUFBwMCBggrBgEFBQcDAzANBgkqhkiG9w0B\\n\" +\n-        \"AQQFAAOBgQB2qIDUxA2caMPpGtUACZAPRUtrGssCINIfItETXJZCx\/cRuZ5sP4D9\\n\" +\n-        \"N1acoNDn0hCULe3lhXAeTC9NZ97680yJzregQMV5wATjo1FGsKY30Ma+sc\/nfzQW\\n\" +\n-        \"+h\/7RhYtoG0OTsiaDCvyhI6swkNJzSzrAccPY4+ZgU8HiDLzZTmM3Q==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    \/\/ Private key in the format of PKCS#8, key size is 512 bits.\n-    static String targetPrivateKey =\n-        \"MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAtz2+PTkj3zg9hh0l\\n\" +\n-        \"xQhcdRiRGX6hvWVH+8biIv62uXS4zxgGqGOUBdkDmvFZzq4kAlw38lx8bLkZxDqJ\\n\" +\n-        \"sS+xFQIDAQABAkByx\/5Oo2hQ\/w2q4L8z+NTRlJ3vdl8iIDtC\/4XPnfYfnGptnpG6\\n\" +\n-        \"ZThQRvbMZiai0xHQPQMszvAHjZVme1eDl3EBAiEA3aKJHynPVCEJhpfCLWuMwX5J\\n\" +\n-        \"1LntwJO7NTOyU5m8rPECIQDTpzn5X44r2rzWBDna\/Sx7HW9IWCxNgUD2Eyi2nA7W\\n\" +\n-        \"ZQIgJerEorw4aCAuzQPxiGu57PB6GRamAihEAtoRTBQlH0ECIQDN08FgTtnesgCU\\n\" +\n-        \"DFYLLcw1CiHvc7fZw4neBDHCrC8NtQIgA8TOUkGnpCZlQ0KaI8KfKWI+vxFcgFnH\\n\" +\n-        \"3fnqsTgaUs4=\";\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n-\n@@ -117,0 +56,8 @@\n+    private final String enabledProtocol;\n+    private final String tmAlgorithm;\n+\n+    public DisabledShortRSAKeys(String tmAlgorithm, String enabledProtocol) {\n+        this.tmAlgorithm = tmAlgorithm;\n+        this.enabledProtocol = enabledProtocol;\n+    }\n+\n@@ -118,2 +65,3 @@\n-    protected SSLContext createClientSSLContext() throws Exception {\n-        return generateSSLContext(trustedCertStr, null, null);\n+    public SSLContext createClientSSLContext() throws Exception {\n+        return createSSLContext(new Cert[]{Cert.CA_RSA_512}, null,\n+                new ContextParameters(enabledProtocol, tmAlgorithm, \"NewSunX509\"));\n@@ -123,2 +71,3 @@\n-    protected SSLContext createServerSSLContext() throws Exception {\n-        return generateSSLContext(null, targetCertStr, targetPrivateKey);\n+    public SSLContext createServerSSLContext() throws Exception {\n+        return createSSLContext(null, new Cert[]{Cert.EE_RSA_512},\n+                new ContextParameters(enabledProtocol, tmAlgorithm, \"NewSunX509\"));\n@@ -162,78 +111,0 @@\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n-    private static String tmAlgorithm; \/\/ trust manager\n-    private static String enabledProtocol; \/\/ the target protocol\n-\n-    private static void parseArguments(String[] args) {\n-            tmAlgorithm = args[0];\n-            enabledProtocol = args[1];\n-    }\n-\n-    private static SSLContext generateSSLContext(String trustedCertStr,\n-                String keyCertStr, String keySpecStr) throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        Certificate trusedCert = null;\n-        ByteArrayInputStream is = null;\n-        if (trustedCertStr != null) {\n-            is = new ByteArrayInputStream(trustedCertStr.getBytes());\n-            trusedCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            ks.setCertificateEntry(\"RSA Export Signer\", trusedCert);\n-        }\n-\n-        if (keyCertStr != null) {\n-            \/\/ generate the private key.\n-            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                            Base64.getMimeDecoder().decode(keySpecStr));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSA\");\n-            RSAPrivateKey priKey =\n-                (RSAPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = cf.generateCertificate(is);\n-            is.close();\n-\n-            Certificate[] chain = null;\n-            if (trusedCert != null) {\n-                chain = new Certificate[2];\n-                chain[0] = keyCert;\n-                chain[1] = trusedCert;\n-            } else {\n-                chain = new Certificate[1];\n-                chain[0] = keyCert;\n-            }\n-\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"Whatever\", priKey, passphrase, chain);\n-        }\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmAlgorithm);\n-        tmf.init(ks);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n-        if (keyCertStr != null && !keyCertStr.isEmpty()) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n-            kmf.init(ks, passphrase);\n-\n-            ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-            ks = null;\n-        } else {\n-            ctx.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return ctx;\n-    }\n-\n@@ -250,4 +121,2 @@\n-        \/*\n-         * Get the customized arguments.\n-         *\/\n-        parseArguments(args);\n+        String tmAlgorithm = args[0];\n+        String enabledProtocol = args[1];\n@@ -258,1 +127,1 @@\n-        new DisabledShortRSAKeys().run();\n+        new DisabledShortRSAKeys(tmAlgorithm, enabledProtocol).run();\n@@ -260,1 +129,0 @@\n-\n","filename":"test\/jdk\/javax\/net\/ssl\/TLSv12\/DisabledShortRSAKeys.java","additions":18,"deletions":150,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,1 +42,19 @@\n-public interface SSLContextTemplate {\n+public abstract class SSLContextTemplate {\n+\n+    \/*\n+     * =======================================\n+     * Certificates and keys used in the test.\n+     *\/\n+    \/\/ Trusted certificates.\n+    Cert[] TRUSTED_CERTS = {\n+            Cert.CA_ECDSA_SECP256R1,\n+            Cert.CA_RSA_2048,\n+            Cert.CA_DSA_2048 };\n+\n+    \/\/ End entity certificate.\n+    Cert[] END_ENTITY_CERTS = {\n+            Cert.EE_ECDSA_SECP256R1,\n+            Cert.EE_RSA_2048,\n+            Cert.EE_EC_RSA_SECP256R1,\n+            Cert.EE_DSA_2048 };\n+\n@@ -46,1 +64,1 @@\n-    default SSLContext createClientSSLContext() throws Exception {\n+    protected SSLContext createClientSSLContext() throws Exception {\n@@ -48,1 +66,0 @@\n-                createClientKeyManager(),\n@@ -50,0 +67,1 @@\n+                createClientKeyManager(),\n@@ -56,1 +74,1 @@\n-    default SSLContext createServerSSLContext() throws Exception {\n+    protected SSLContext createServerSSLContext() throws Exception {\n@@ -58,1 +76,0 @@\n-                createServerKeyManager(),\n@@ -60,0 +77,1 @@\n+                createServerKeyManager(),\n@@ -63,10 +81,9 @@\n-    \/*\n-     * Create an instance of KeyManager for client use.\n-     *\/\n-    default KeyManager createClientKeyManager() throws Exception {\n-        return createKeyManager(\n-                endEntityCertStrs,\n-                endEntityPrivateKeys,\n-                endEntityPrivateKeyAlgs,\n-                endEntityPrivateKeyNames,\n-                getServerContextParameters());\n+    private SSLContext createSSLContext(TrustManager trustManager,\n+                                        KeyManager keyManager,\n+                                        ContextParameters params) throws Exception {\n+        SSLContext context = SSLContext.getInstance(params.contextProtocol);\n+        context.init(\n+            new KeyManager[] {keyManager},\n+            new TrustManager[] {trustManager},\n+            null);\n+        return  context;\n@@ -75,10 +92,2 @@\n-    \/*\n-     * Create an instance of TrustManager for client use.\n-     *\/\n-    default TrustManager createClientTrustManager() throws Exception {\n-        return createTrustManager(\n-                trustedCertStrs,\n-                getServerContextParameters());\n-    }\n-    \/*\n-     * Create an instance of KeyManager for server use.\n+    \/**\n+     * Creates a TrustManager with TRUSTED_CERTS and client context parameters\n@@ -86,7 +95,2 @@\n-    default KeyManager createServerKeyManager() throws Exception {\n-        return createKeyManager(\n-                endEntityCertStrs,\n-                endEntityPrivateKeys,\n-                endEntityPrivateKeyAlgs,\n-                endEntityPrivateKeyNames,\n-                getServerContextParameters());\n+    protected TrustManager createClientTrustManager() throws Exception {\n+        return createTrustManager(TRUSTED_CERTS, getClientContextParameters());\n@@ -95,2 +99,2 @@\n-    \/*\n-     * Create an instance of TrustManager for server use.\n+    \/**\n+     * Creates a TrustManager with TRUSTED_CERTS and server context parameters\n@@ -98,4 +102,2 @@\n-    default TrustManager createServerTrustManager() throws Exception {\n-        return createTrustManager(\n-                trustedCertStrs,\n-                getServerContextParameters());\n+    protected TrustManager createServerTrustManager() throws Exception {\n+        return createTrustManager(TRUSTED_CERTS, getServerContextParameters());\n@@ -104,2 +106,3 @@\n-    \/*\n-     * The parameters used to configure SSLContext.\n+    \/**\n+     * Creates a TrustManager with the given array of trusted certs and\n+     * context parameters.\n@@ -107,4 +110,4 @@\n-    static final class ContextParameters {\n-        final String contextProtocol;\n-        final String tmAlgorithm;\n-        final String kmAlgorithm;\n+    protected TrustManager createTrustManager(Cert[] trustedCerts,\n+                                              ContextParameters params) throws Exception {\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+        ByteArrayInputStream is;\n@@ -112,2 +115,2 @@\n-        ContextParameters(String contextProtocol,\n-                String tmAlgorithm, String kmAlgorithm) {\n+        KeyStore ts = KeyStore.getInstance(\"JKS\");\n+        ts.load(null, null);\n@@ -115,3 +118,13 @@\n-            this.contextProtocol = contextProtocol;\n-            this.tmAlgorithm = tmAlgorithm;\n-            this.kmAlgorithm = kmAlgorithm;\n+        if (trustedCerts != null && trustedCerts.length != 0) {\n+            Certificate[] trustedCert = new Certificate[trustedCerts.length];\n+            for (int i = 0; i < trustedCerts.length; i++) {\n+                is = new ByteArrayInputStream(trustedCerts[i].certStr.getBytes());\n+                try {\n+                    trustedCert[i] = cf.generateCertificate(is);\n+                } finally {\n+                    is.close();\n+                }\n+\n+                ts.setCertificateEntry(\n+                        \"trusted-cert-\" + trustedCerts[i].name(), trustedCert[i]);\n+            }\n@@ -119,0 +132,6 @@\n+\n+        \/\/ Create an SSLContext object.\n+        TrustManagerFactory tmf =\n+                TrustManagerFactory.getInstance(params.tmAlgorithm);\n+        tmf.init(ts);\n+        return tmf.getTrustManagers()[0];\n@@ -121,2 +140,3 @@\n-    \/*\n-     * Get the client side parameters of SSLContext.\n+    \/**\n+     * Create a key manager with Cert.END_ENTITY_CERTS and the client\n+     * context parameters.\n@@ -124,2 +144,2 @@\n-    default ContextParameters getClientContextParameters() {\n-        return new ContextParameters(\"TLS\", \"PKIX\", \"NewSunX509\");\n+    protected KeyManager createClientKeyManager() throws Exception {\n+        return createKeyManager(END_ENTITY_CERTS, getClientContextParameters());\n@@ -128,2 +148,3 @@\n-    \/*\n-     * Get the server side parameters of SSLContext.\n+    \/**\n+     * Create a key manager with Cert.END_ENTITY_CERTS and the server\n+     * context parameters\n@@ -131,2 +152,2 @@\n-    default ContextParameters getServerContextParameters() {\n-        return new ContextParameters(\"TLS\", \"PKIX\", \"NewSunX509\");\n+    protected KeyManager createServerKeyManager() throws Exception {\n+        return createKeyManager(END_ENTITY_CERTS, getServerContextParameters());\n@@ -135,3 +156,3 @@\n-    \/*\n-     * =======================================\n-     * Certificates and keys used in the test.\n+    \/**\n+     * Creates a KeyManager with the given end-entity Cert's and context\n+     * parameters\n@@ -139,133 +160,4 @@\n-    \/\/ Trusted certificates.\n-    final static String[] trustedCertStrs = {\n-        \/\/ SHA256withECDSA, curve prime256v1\n-        \/\/ Validity\n-        \/\/     Not Before: May 22 07:18:16 2018 GMT\n-        \/\/     Not After : May 17 07:18:16 2038 GMT\n-        \/\/ Subject Key Identifier:\n-        \/\/     60:CF:BD:73:FF:FA:1A:30:D2:A4:EC:D3:49:71:46:EF:1A:35:A0:86\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIBvjCCAWOgAwIBAgIJAIvFG6GbTroCMAoGCCqGSM49BAMCMDsxCzAJBgNVBAYT\\n\" +\n-        \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-        \"ZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMDsxCzAJBgNVBAYTAlVT\\n\" +\n-        \"MQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZjZTBZ\\n\" +\n-        \"MBMGByqGSM49AgEGCCqGSM49AwEHA0IABBz1WeVb6gM2mh85z3QlvaB\/l11b5h0v\\n\" +\n-        \"LIzmkC3DKlVukZT+ltH2Eq1oEkpXuf7QmbM0ibrUgtjsWH3mULfmcWmjUDBOMB0G\\n\" +\n-        \"A1UdDgQWBBRgz71z\/\/oaMNKk7NNJcUbvGjWghjAfBgNVHSMEGDAWgBRgz71z\/\/oa\\n\" +\n-        \"MNKk7NNJcUbvGjWghjAMBgNVHRMEBTADAQH\/MAoGCCqGSM49BAMCA0kAMEYCIQCG\\n\" +\n-        \"6wluh1r2\/T6L31mZXRKf9JxeSf9pIzoLj+8xQeUChQIhAJ09wAi1kV8yePLh2FD9\\n\" +\n-        \"2YEHlSQUAbwwqCDEVB5KxaqP\\n\" +\n-        \"-----END CERTIFICATE-----\",\n-        \/\/ -----BEGIN PRIVATE KEY-----\n-        \/\/ MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQg\/HcHdoLJCdq3haVd\n-        \/\/ XZTSKP00YzM3xX97l98vGL\/RI1KhRANCAAQc9VnlW+oDNpofOc90Jb2gf5ddW+Yd\n-        \/\/ LyyM5pAtwypVbpGU\/pbR9hKtaBJKV7n+0JmzNIm61ILY7Fh95lC35nFp\n-        \/\/ -----END PRIVATE KEY-----\n-\n-        \/\/ SHA256withRSA, 2048 bits\n-        \/\/ Validity\n-        \/\/     Not Before: May 22 07:18:16 2018 GMT\n-        \/\/     Not After : May 17 07:18:16 2038 GMT\n-        \/\/ Subject Key Identifier:\n-        \/\/     0D:DD:93:C9:FE:4B:BD:35:B7:E8:99:78:90:FB:DB:5A:3D:DB:15:4C\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDSTCCAjGgAwIBAgIJAI4ZF3iy8zG+MA0GCSqGSIb3DQEBCwUAMDsxCzAJBgNV\\n\" +\n-        \"BAYTAlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n-        \"aXZjZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMDsxCzAJBgNVBAYT\\n\" +\n-        \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-        \"ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALpMcY7aWieXDEM1\/YJf\\n\" +\n-        \"JW27b4nRIFZyEYhEloyGsKTuQiiQjc8cqRZFNXe2vwziDB4IyTEl0Hjl5QF6ZaQE\\n\" +\n-        \"huPzzwvQm1pv64KrRXrmj3FisQK8B5OWLty9xp6xDqsaMRoyObLK+oIb20T5fSlE\\n\" +\n-        \"evmo1vYjnh8CX0Yzx5Gr5ye6YSEHQvYOWEws8ad17OlyToR2KMeC8w4qo6rs59pW\\n\" +\n-        \"g7Mxn9vo22ImDzrtAbTbXbCias3xlE0Bp0h5luyf+5U4UgksoL9B9r2oP4GrLNEV\\n\" +\n-        \"oJk57t8lwaR0upiv3CnS8LcJELpegZub5ggqLY8ZPYFQPjlK6IzLOm6rXPgZiZ3m\\n\" +\n-        \"RL0CAwEAAaNQME4wHQYDVR0OBBYEFA3dk8n+S701t+iZeJD721o92xVMMB8GA1Ud\\n\" +\n-        \"IwQYMBaAFA3dk8n+S701t+iZeJD721o92xVMMAwGA1UdEwQFMAMBAf8wDQYJKoZI\\n\" +\n-        \"hvcNAQELBQADggEBAJTRC3rKUUhVH07\/1+stUungSYgpM08dY4utJq0BDk36BbmO\\n\" +\n-        \"0AnLDMbkwFdHEoqF6hQIfpm7SQTmXk0Fss6Eejm8ynYr6+EXiRAsaXOGOBCzF918\\n\" +\n-        \"\/RuKOzqABfgSU4UBKECLM5bMfQTL60qx+HdbdVIpnikHZOFfmjCDVxoHsGyXc1LW\\n\" +\n-        \"Jhkht8IGOgc4PMGvyzTtRFjz01kvrVQZ75aN2E0GQv6dCxaEY0i3ypSzjUWAKqDh\\n\" +\n-        \"3e2OLwUSvumcdaxyCdZAOUsN6pDBQ+8VRG7KxnlRlY1SMEk46QgQYLbPDe\/+W\/yH\\n\" +\n-        \"ca4PejicPeh+9xRAwoTpiE2gulfT7Lm+fVM7Ruc=\\n\" +\n-        \"-----END CERTIFICATE-----\",\n-\n-        \/\/ -----BEGIN PRIVATE KEY-----\n-        \/\/ MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC6THGO2lonlwxD\n-        \/\/ Nf2CXyVtu2+J0SBWchGIRJaMhrCk7kIokI3PHKkWRTV3tr8M4gweCMkxJdB45eUB\n-        \/\/ emWkBIbj888L0Jtab+uCq0V65o9xYrECvAeTli7cvcaesQ6rGjEaMjmyyvqCG9tE\n-        \/\/ +X0pRHr5qNb2I54fAl9GM8eRq+cnumEhB0L2DlhMLPGndezpck6EdijHgvMOKqOq\n-        \/\/ 7OfaVoOzMZ\/b6NtiJg867QG0212womrN8ZRNAadIeZbsn\/uVOFIJLKC\/Qfa9qD+B\n-        \/\/ qyzRFaCZOe7fJcGkdLqYr9wp0vC3CRC6XoGbm+YIKi2PGT2BUD45SuiMyzpuq1z4\n-        \/\/ GYmd5kS9AgMBAAECggEAFHSoU2MuWwJ+2jJnb5U66t2V1bAcuOE1g5zkWvG\/G5z9\n-        \/\/ rq6Qo5kmB8f5ovdx6tw3MGUOklLwnRXBG3RxDJ1iokz3AvkY1clMNsDPlDsUrQKF\n-        \/\/ JSO4QUBQTPSZhnsyfR8XHSU+qJ8Y+ohMfzpVv95BEoCzebtXdVgxVegBlcEmVHo2\n-        \/\/ kMmkRN+bYNsr8eb2r+b0EpyumS39ZgKYh09+cFb78y3T6IFMGcVJTP6nlGBFkmA\/\n-        \/\/ 25pYeCF2tSki08qtMJZQAvKfw0Kviibk7ZxRbJqmc7B1yfnOEHP6ftjuvKl2+RP\/\n-        \/\/ +5P5f8CfIP6gtA0LwSzAqQX\/hfIKrGV5j0pCqrD0kQKBgQDeNR6Xi4sXVq79lihO\n-        \/\/ a1bSeV7r8yoQrS8x951uO+ox+UIZ1MsAULadl7zB\/P0er92p198I9M\/0Jth3KBuS\n-        \/\/ zj45mucvpiiGvmQlMKMEfNq4nN7WHOu55kufPswQB2mR4J3xmwI+4fM\/nl1zc82h\n-        \/\/ De8JSazRldJXNhfx0RGFPmgzbwKBgQDWoVXrXLbCAn41oVnWB8vwY9wjt92ztDqJ\n-        \/\/ HMFA\/SUohjePep9UDq6ooHyAf\/Lz6oE5NgeVpPfTDkgvrCFVKnaWdwALbYoKXT2W\n-        \/\/ 9FlyJox6eQzrtHAacj3HJooXWuXlphKSizntfxj3LtMR9BmrmRJOfK+SxNOVJzW2\n-        \/\/ +MowT20EkwKBgHmpB8jdZBgxI7o\/\/m2BI5Y1UZ1KE5vx1kc7VXzHXSBjYqeV9FeF\n-        \/\/ 2ZZLP9POWh\/1Fh4pzTmwIDODGT2UPhSQy0zq3O0fwkyT7WzXRknsuiwd53u\/dejg\n-        \/\/ iEL2NPAJvulZ2+AuiHo5Z99LK8tMeidV46xoJDDUIMgTG+UQHNGhK5gNAoGAZn\/S\n-        \/\/ Cn7SgMC0CWSvBHnguULXZO9wH1wZAFYNLL44OqwuaIUFBh2k578M9kkke7woTmwx\n-        \/\/ HxQTjmWpr6qimIuY6q6WBN8hJ2Xz\/d1fwhYKzIp20zHuv5KDUlJjbFfqpsuy3u1C\n-        \/\/ kts5zwI7pr1ObRbDGVyOdKcu7HI3QtR5qqyjwaUCgYABo7Wq6oHva\/9V34+G3Goh\n-        \/\/ 63bYGUnRw2l5BD11yhQv8XzGGZFqZVincD8gltNThB0Dc\/BI+qu3ky4YdgdZJZ7K\n-        \/\/ z51GQGtaHEbrHS5caV79yQ8QGY5mUVH3E+VXSxuIqb6pZq2DH4sTAEFHyncddmOH\n-        \/\/ zoXBInYwRG9KE\/Bw5elhUw==\n-        \/\/ -----END PRIVATE KEY-----\n-\n-\n-        \/\/ SHA256withDSA, 2048 bits\n-        \/\/ Validity\n-        \/\/     Not Before: May 22 07:18:18 2018 GMT\n-        \/\/     Not After : May 17 07:18:18 2038 GMT\n-        \/\/ Subject Key Identifier:\n-        \/\/     76:66:9E:F7:3B:DD:45:E5:3B:D9:72:3C:3F:F0:54:39:86:31:26:53\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIErjCCBFSgAwIBAgIJAOktYLNCbr02MAsGCWCGSAFlAwQDAjA7MQswCQYDVQQG\\n\" +\n-        \"EwJVUzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n-        \"Y2UwHhcNMTgwNTIyMDcxODE4WhcNMzgwNTE3MDcxODE4WjA7MQswCQYDVQQGEwJV\\n\" +\n-        \"UzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2Y2Uw\\n\" +\n-        \"ggNHMIICOQYHKoZIzjgEATCCAiwCggEBAO5GyPhSm0ze3LSu+gicdULLj05iOfTL\\n\" +\n-        \"UvZQ29sYz41zmqrLBQbdKiHqgJu2Re9sgTb5suLNjF047TOLPnU3jhPtWm2X8Xzi\\n\" +\n-        \"VGIcHym\/Q\/MeZxStt\/88seqroI3WOKzIML2GcrishT+lcGrtH36Tf1+ue2Snn3PS\\n\" +\n-        \"WyxygNqPjllP5uUjYmFLvAf4QLMldkd\/D2VxcwsHjB8y5iUZsXezc\/LEhRZS\/02m\\n\" +\n-        \"ivqlRw3AMkq\/OVe\/ZtxFWsP0nsfxEGdZuaUFpppGfixxFvymrB3+J51cTt+pZBDq\\n\" +\n-        \"D2y0DYfc+88iCs4jwHTfcDIpLb538HBjBj2rEgtQESQmB0ooD\/+wsPsCIQC1bYch\\n\" +\n-        \"gElNtDYL3FgpLgNSUYp7gIWv9ehaC7LO2z7biQKCAQBitvFOnDkUja8NAF7lDpOV\\n\" +\n-        \"b5ipQ8SicBLW3kQamxhyuyxgZyy\/PojZ\/oPorkqW\/T\/A0rhnG6MssEpAtdiwVB+c\\n\" +\n-        \"rBYGo3bcwmExJhdOJ6dYuKFppPWhCwKMHs9npK+lqBMl8l5j58xlcFeC7ZfGf8GY\\n\" +\n-        \"GkhFW0c44vEQhMMbac6ZTTP4mw+1t7xJfmDMlLEyIpTXaAAk8uoVLWzQWnR40sHi\\n\" +\n-        \"ybvS0u3JxQkb7\/y8tOOZu8qlz\/YOS7lQ6UxUGX27Ce1E0+agfPphetoRAlS1cezq\\n\" +\n-        \"Wa7r64Ga0nkj1kwkcRqjgTiJx0NwnUXr78VAXFhVF95+O3lfqhvdtEGtkhDGPg7N\\n\" +\n-        \"A4IBBgACggEBAMmSHQK0w2i+iqUjOPzn0yNEZrzepLlLeQ1tqtn0xnlv5vBAeefD\\n\" +\n-        \"Pm9dd3tZOjufVWP7hhEz8xPobb1CS4e3vuQiv5UBfhdPL3f3l9T7JMAKPH6C9Vve\\n\" +\n-        \"OQXE5eGqbjsySbcmseHoYUt1WCSnSda1opX8zchX04e7DhGfE2\/L9flpYEoSt8lI\\n\" +\n-        \"vMNjgOwvKdW3yvPt1\/eBBHYNFG5gWPv\/Q5KoyCtHS03uqGm4rNc\/wZTIEEfd66C+\\n\" +\n-        \"QRaUltjOaHmtwOdDHaNqwhYZSVOip+Mo+TfyzHFREcdHLapo7ZXqbdYkRGxRR3d+\\n\" +\n-        \"3DfHaraJO0OKoYlPkr3JMvM\/MSGR9AnZOcejUDBOMB0GA1UdDgQWBBR2Zp73O91F\\n\" +\n-        \"5TvZcjw\/8FQ5hjEmUzAfBgNVHSMEGDAWgBR2Zp73O91F5TvZcjw\/8FQ5hjEmUzAM\\n\" +\n-        \"BgNVHRMEBTADAQH\/MAsGCWCGSAFlAwQDAgNHADBEAiBzriYE41M2y9Hy5ppkL0Qn\\n\" +\n-        \"dIlNc8JhXT\/PHW7GDtViagIgMko8Qoj9gDGPK3+O9E8DC3wGiiF9CObM4LN387ok\\n\" +\n-        \"J+g=\\n\" +\n-        \"-----END CERTIFICATE-----\"\n-        \/\/ -----BEGIN PRIVATE KEY-----\n-        \/\/ MIICZQIBADCCAjkGByqGSM44BAEwggIsAoIBAQDuRsj4UptM3ty0rvoInHVCy49O\n-        \/\/ Yjn0y1L2UNvbGM+Nc5qqywUG3Soh6oCbtkXvbIE2+bLizYxdOO0ziz51N44T7Vpt\n-        \/\/ l\/F84lRiHB8pv0PzHmcUrbf\/PLHqq6CN1jisyDC9hnK4rIU\/pXBq7R9+k39frntk\n-        \/\/ p59z0lsscoDaj45ZT+blI2JhS7wH+ECzJXZHfw9lcXMLB4wfMuYlGbF3s3PyxIUW\n-        \/\/ Uv9Npor6pUcNwDJKvzlXv2bcRVrD9J7H8RBnWbmlBaaaRn4scRb8pqwd\/iedXE7f\n-        \/\/ qWQQ6g9stA2H3PvPIgrOI8B033AyKS2+d\/BwYwY9qxILUBEkJgdKKA\/\/sLD7AiEA\n-        \/\/ tW2HIYBJTbQ2C9xYKS4DUlGKe4CFr\/XoWguyzts+24kCggEAYrbxTpw5FI2vDQBe\n-        \/\/ 5Q6TlW+YqUPEonAS1t5EGpsYcrssYGcsvz6I2f6D6K5Klv0\/wNK4ZxujLLBKQLXY\n-        \/\/ sFQfnKwWBqN23MJhMSYXTienWLihaaT1oQsCjB7PZ6SvpagTJfJeY+fMZXBXgu2X\n-        \/\/ xn\/BmBpIRVtHOOLxEITDG2nOmU0z+JsPtbe8SX5gzJSxMiKU12gAJPLqFS1s0Fp0\n-        \/\/ eNLB4sm70tLtycUJG+\/8vLTjmbvKpc\/2Dku5UOlMVBl9uwntRNPmoHz6YXraEQJU\n-        \/\/ tXHs6lmu6+uBmtJ5I9ZMJHEao4E4icdDcJ1F6+\/FQFxYVRfefjt5X6ob3bRBrZIQ\n-        \/\/ xj4OzQQjAiEAsceWOM8do4etxp2zgnoNXV8PUUyqWhz1+0srcKV7FR4=\n-        \/\/ -----END PRIVATE KEY-----\n-    };\n+    protected KeyManager createKeyManager(Cert[] endEntityCerts,\n+                                          ContextParameters params) throws Exception {\n+        KeyStore ks = null;     \/\/ key store\n+        char[] passphrase = \"passphrase\".toCharArray();\n@@ -273,183 +165,40 @@\n-    \/\/ End entity certificate.\n-    final static String[] endEntityCertStrs = {\n-        \/\/ SHA256withECDSA, curve prime256v1\n-        \/\/ Validity\n-        \/\/     Not Before: May 22 07:18:16 2018 GMT\n-        \/\/     Not After : May 17 07:18:16 2038 GMT\n-        \/\/ Authority Key Identifier:\n-        \/\/     60:CF:BD:73:FF:FA:1A:30:D2:A4:EC:D3:49:71:46:EF:1A:35:A0:86\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIBqjCCAVCgAwIBAgIJAPLY8qZjgNRAMAoGCCqGSM49BAMCMDsxCzAJBgNVBAYT\\n\" +\n-        \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-        \"ZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMFUxCzAJBgNVBAYTAlVT\\n\" +\n-        \"MQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZjZTEY\\n\" +\n-        \"MBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD\\n\" +\n-        \"QgAEb+9n05qfXnfHUb0xtQJNS4JeSi6IjOfW5NqchvKnfJey9VkJzR7QHLuOESdf\\n\" +\n-        \"xlR7q8YIWgih3iWLGfB+wxHiOqMjMCEwHwYDVR0jBBgwFoAUYM+9c\/\/6GjDSpOzT\\n\" +\n-        \"SXFG7xo1oIYwCgYIKoZIzj0EAwIDSAAwRQIgWpRegWXMheiD3qFdd8kMdrkLxRbq\\n\" +\n-        \"1zj8nQMEwFTUjjQCIQDRIrAjZX+YXHN9b0SoWWLPUq0HmiFIi8RwMnO\/\/wJIGQ==\\n\" +\n-        \"-----END CERTIFICATE-----\",\n-\n-        \/\/ SHA256withRSA, 2048 bits\n-        \/\/ Validity\n-        \/\/     Not Before: May 22 07:18:16 2018 GMT\n-        \/\/     Not After : May 17 07:18:16 2038 GMT\n-        \/\/ Authority Key Identifier:\n-        \/\/     0D:DD:93:C9:FE:4B:BD:35:B7:E8:99:78:90:FB:DB:5A:3D:DB:15:4C\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIDNjCCAh6gAwIBAgIJAO2+yPcFryUTMA0GCSqGSIb3DQEBCwUAMDsxCzAJBgNV\\n\" +\n-        \"BAYTAlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n-        \"aXZjZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMFUxCzAJBgNVBAYT\\n\" +\n-        \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-        \"ZTEYMBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOC\\n\" +\n-        \"AQ8AMIIBCgKCAQEAszfBobWfZIp8AgC6PiWDDavP65mSvgCXUGxACbxVNAfkLhNR\\n\" +\n-        \"QOsHriRB3X1Q3nvO9PetC6wKlvE9jlnDDj7D+1j1r1CHO7ms1fq8rfcQYdkanDtu\\n\" +\n-        \"4AlHo8v+SSWX16MIXFRYDj2VVHmyPtgbltcg4zGAuwT746FdLI94uXjJjq1IOr\/v\\n\" +\n-        \"0VIlwE5ORWH5Xc+5Tj+oFWK0E4a4GHDgtKKhn2m72hN56\/GkPKGkguP5NRS1qYYV\\n\" +\n-        \"\/EFkdyQMOV8J1M7HaicSft4OL6eKjTrgo93+kHk+tv0Dc6cpVBnalX3TorG8QI6B\\n\" +\n-        \"cHj1XQd78oAlAC+\/jF4pc0mwi0un49kdK9gRfQIDAQABoyMwITAfBgNVHSMEGDAW\\n\" +\n-        \"gBQN3ZPJ\/ku9NbfomXiQ+9taPdsVTDANBgkqhkiG9w0BAQsFAAOCAQEApXS0nKwm\\n\" +\n-        \"Kp8gpmO2yG1rpd1+2wBABiMU4JZaTqmma24DQ3RzyS+V2TeRb29dl5oTUEm98uc0\\n\" +\n-        \"GPZvhK8z5RFr4YE17dc04nI\/VaNDCw4y1NALXGs+AHkjoPjLyGbWpi1S+gfq2sNB\\n\" +\n-        \"Ekkjp6COb\/cb9yiFXOGVls7UOIjnVZVd0r7KaPFjZhYh82\/f4PA\/A1SnIKd1+nfH\\n\" +\n-        \"2yk7mSJNC7Z3qIVDL8MM\/jBVwiC3uNe5GPB2uwhd7k5LGAVN3j4HQQGB0Sz+VC1h\\n\" +\n-        \"92oi6xDa+YBva2fvHuCd8P50DDjxmp9CemC7rnZ5j8egj88w14X44Xjb\/Fd\/ApG9\\n\" +\n-        \"e57NnbT7KM+Grw==\\n\" +\n-        \"-----END CERTIFICATE-----\",\n-\n-        \/\/ SHA256withRSA, curv prime256v1\n-        \/\/ Validity\n-        \/\/     Not Before: May 22 07:18:16 2018 GMT\n-        \/\/     Not After : May 21 07:18:16 2028 GMT\n-        \/\/ Authority Key Identifier:\n-        \/\/     0D:DD:93:C9:FE:4B:BD:35:B7:E8:99:78:90:FB:DB:5A:3D:DB:15:4C\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIICazCCAVOgAwIBAgIJAO2+yPcFryUUMA0GCSqGSIb3DQEBCwUAMDsxCzAJBgNV\\n\" +\n-        \"BAYTAlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n-        \"aXZjZTAeFw0xODA1MjIwNzE4MTZaFw0yODA1MjEwNzE4MTZaMFUxCzAJBgNVBAYT\\n\" +\n-        \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-        \"ZTEYMBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MFkwEwYHKoZIzj0CAQYIKoZIzj0D\\n\" +\n-        \"AQcDQgAE59MERNTlVZ1eeps8Z3Oue5ZkgQdPtD+WIE6tj3PbIKpxGPDxvfNP959A\\n\" +\n-        \"yQjEK\/ehWQVrCMmNoEkIzY+IIBgB06MjMCEwHwYDVR0jBBgwFoAUDd2Tyf5LvTW3\\n\" +\n-        \"6Jl4kPvbWj3bFUwwDQYJKoZIhvcNAQELBQADggEBAFOTVEqs70ykhZiIdrEsF1Ra\\n\" +\n-        \"I3B2rLvwXZk52uSltk2\/bzVvewA577ZCoxQ1pL7ynkisPfBN1uVYtHjM1VA3RC+4\\n\" +\n-        \"+TAK78dnI7otYjWoHp5rvs4l6c\/IbOspS290IlNuDUxMErEm5wxIwj+Aukx\/1y68\\n\" +\n-        \"hOyCvHBLMY2c1LskH1MMBbDuS1aI+lnGpToi+MoYObxGcV458vxuT8+wwV8Fkpvd\\n\" +\n-        \"ll8IIFmeNPRv+1E+lXbES6CSNCVaZ\/lFhPgdgYKleN7sfspiz50DG4dqafuEAaX5\\n\" +\n-        \"xaK1NWXJxTRz0ROH\/IUziyuDW6jphrlgit4+3NCzp6vP9hAJQ8Vhcj0n15BKHIQ=\\n\" +\n-        \"-----END CERTIFICATE-----\",\n-\n-        \/\/ SHA256withDSA, 2048 bits\n-        \/\/ Validity\n-        \/\/     Not Before: May 22 07:18:20 2018 GMT\n-        \/\/     Not After : May 17 07:18:20 2038 GMT\n-        \/\/ Authority Key Identifier:\n-        \/\/     76:66:9E:F7:3B:DD:45:E5:3B:D9:72:3C:3F:F0:54:39:86:31:26:53\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIEnDCCBEGgAwIBAgIJAP\/jh1qVhNVjMAsGCWCGSAFlAwQDAjA7MQswCQYDVQQG\\n\" +\n-        \"EwJVUzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n-        \"Y2UwHhcNMTgwNTIyMDcxODIwWhcNMzgwNTE3MDcxODIwWjBVMQswCQYDVQQGEwJV\\n\" +\n-        \"UzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2Y2Ux\\n\" +\n-        \"GDAWBgNVBAMMD1JlZ3Jlc3Npb24gVGVzdDCCA0cwggI6BgcqhkjOOAQBMIICLQKC\\n\" +\n-        \"AQEAmlavgoJrMcjqWRVcDE2dmWAPREgnzQvneEDef68cprDzjSwvOs5QeFyx75ib\\n\" +\n-        \"ado1e6jO\/rW1prCGWHDD1oA\/Tn4Pk3vu0nUxzvl1qATc+aJbpUU5Op0bvp6LbCsQ\\n\" +\n-        \"QslV9FeRh7Eb7bP6gpc\/kHCBzEgC1VCK7prccXWy+t6SMOHbND3h+UbckfSaUuaV\\n\" +\n-        \"sVJNTD1D6GElfRj4Nmz1BGPfSYvKorwNZEU3gXwFgtDoAcGx7tcyClLpDHfqRfw\/\\n\" +\n-        \"7yiqLyeiP7D4hl5lMNouJWDlAdMFp0FMgS3s9VDFinIcr6VtBWMTG7+4+czHAB+3\\n\" +\n-        \"fvrwlqNzhBn3uFHrekN\/w8fNxwIhAJo7Sae1za7IMW0Q6hE5B4b+s2B\/FaKPoA4E\\n\" +\n-        \"jtZu13B9AoIBAQCOZqLMKfvqZWUgT0PQ3QjR7dAFdd06I9Y3+TOQzZk1+j+vw\/6E\\n\" +\n-        \"X4vFItX4gihb\/u5Q9CdmpwhVGi7bvo+7+\/IKeTgoQ6f5+PSug7SrWWUQ5sPwaZui\\n\" +\n-        \"zXZJ5nTeZDucFc2yFx0wgnjbPwiUxZklOT7xGiOMtzOTa2koCz5KuIBL+\/wPKKxm\\n\" +\n-        \"ypo9VoY9xfbdU6LMXZv\/lpD5XTM9rYHr\/vUTNkukvV6Hpm0YMEWhVZKUJiqCqTqG\\n\" +\n-        \"XHaleOxSw6uQWB\/+TznifcC7gB48UOQjCqOKf5VuwQneJLhlhU\/jhRV3xtr+hLZa\\n\" +\n-        \"hW1wYhVi8cjLDrZFKlgEQqhB4crnJU0mJY+tA4IBBQACggEAID0ezl00\/X8mv7eb\\n\" +\n-        \"bzovum1+DEEP7FM57k6HZEG2N3ve4CW+0m9Cd+cWPz8wkZ+M0j\/Eqa6F0IdbkXEc\\n\" +\n-        \"Q7CuzvUyJ57xQ3L\/WCgXsiS+Bh8O4Mz7GwW22CGmHqafbVv+hKBfr8MkskO6GJUt\\n\" +\n-        \"SUF\/CVLzB4gMIvZMH26tBP2xK+i7FeEK9kT+nGdzQSZBAhFYpEVCBplHZO24\/OYq\\n\" +\n-        \"1DNoU327nUuXIhmsfA8N0PjiWbIZIjTPwBGr9H0LpATI7DIDNcvRRvtROP+pBU9y\\n\" +\n-        \"fuykPkptg9C0rCM9t06bukpOSaEz\/2VIQdLE8fHYFA6pHZ6CIc2+5cfvMgTPhcjz\\n\" +\n-        \"W2jCt6MjMCEwHwYDVR0jBBgwFoAUdmae9zvdReU72XI8P\/BUOYYxJlMwCwYJYIZI\\n\" +\n-        \"AWUDBAMCA0gAMEUCIQCeI5fN08b9BpOaHdc3zQNGjp24FOL\/RxlBLeBAorswJgIg\\n\" +\n-        \"JEZ8DhYxQy1O7mmZ2UIT7op6epWMB4dENjs0qWPmcKo=\\n\" +\n-        \"-----END CERTIFICATE-----\"\n-    };\n-\n-    \/\/ Private key in the format of PKCS#8.\n-    final static String[] endEntityPrivateKeys = {\n-        \/\/\n-        \/\/ EC private key related to cert endEntityCertStrs[0].\n-        \/\/\n-        \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgn5K03bpTLjEtFQRa\\n\" +\n-        \"JUtx22gtmGEvvSUSQdimhGthdtihRANCAARv72fTmp9ed8dRvTG1Ak1Lgl5KLoiM\\n\" +\n-        \"59bk2pyG8qd8l7L1WQnNHtAcu44RJ1\/GVHurxghaCKHeJYsZ8H7DEeI6\",\n-\n-        \/\/\n-        \/\/ RSA private key related to cert endEntityCertStrs[1].\n-        \/\/\n-        \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCzN8GhtZ9kinwC\\n\" +\n-        \"ALo+JYMNq8\/rmZK+AJdQbEAJvFU0B+QuE1FA6weuJEHdfVDee870960LrAqW8T2O\\n\" +\n-        \"WcMOPsP7WPWvUIc7uazV+ryt9xBh2RqcO27gCUejy\/5JJZfXowhcVFgOPZVUebI+\\n\" +\n-        \"2BuW1yDjMYC7BPvjoV0sj3i5eMmOrUg6v+\/RUiXATk5FYfldz7lOP6gVYrQThrgY\\n\" +\n-        \"cOC0oqGfabvaE3nr8aQ8oaSC4\/k1FLWphhX8QWR3JAw5XwnUzsdqJxJ+3g4vp4qN\\n\" +\n-        \"OuCj3f6QeT62\/QNzpylUGdqVfdOisbxAjoFwePVdB3vygCUAL7+MXilzSbCLS6fj\\n\" +\n-        \"2R0r2BF9AgMBAAECggEASIkPkMCuw4WdTT44IwERus3IOIYOs2IP3BgEDyyvm4B6\\n\" +\n-        \"JP\/iihDWKfA4zEl1Gqcni1RXMHswSglXra682J4kui02Ov+vzEeJIY37Ibn2YnP5\\n\" +\n-        \"ZjRT2s9GtI\/S2o4hl8A\/mQb2IMViFC+xKehTukhV4j5d6NPKk0XzLR7gcMjnYxwn\\n\" +\n-        \"l21fS6D2oM1xRG\/di7sL+uLF8EXLRzfiWDNi12uQv4nwtxPKvuKhH6yzHt7YqMH0\\n\" +\n-        \"46pmDKDaxV4w1JdycjCb6NrCJOYZygoQobuZqOQ30UZoZsPJrtovkncFr1e+lNcO\\n\" +\n-        \"+aWDfOLCtTH046dEQh5oCShyXMybNlry\/QHsOtHOwQKBgQDh2iIjs+FPpQy7Z3EX\\n\" +\n-        \"DGEvHYqPjrYO9an2KSRr1m9gzRlWYxKY46WmPKwjMerYtra0GP+TBHrgxsfO8tD2\\n\" +\n-        \"wUAII6sd1qup0a\/Sutgf2JxVilLykd0+Ge4\/Cs51tCdJ8EqDV2B6WhTewOY2EGvg\\n\" +\n-        \"JiKYkeNwgRX\/9M9CFSAMAk0hUQKBgQDLJAartL3DoGUPjYtpJnfgGM23yAGl6G5r\\n\" +\n-        \"NSXDn80BiYIC1p0bG3N0xm3yAjqOtJAUj9jZbvDNbCe3GJfLARMr23legX4tRrgZ\\n\" +\n-        \"nEdKnAFKAKL01oM+A5\/lHdkwaZI9yyv+hgSVdYzUjB8rDmzeVQzo1BT7vXypt2yV\\n\" +\n-        \"6O1OnUpCbQKBgA\/0rzDChopv6KRcvHqaX0tK1P0rYeVQqb9ATNhpf9jg5Idb3HZ8\\n\" +\n-        \"rrk91BNwdVz2G5ZBpdynFl9G69rNAMJOCM4KZw5mmh4XOEq09Ivba8AHU7DbaTv3\\n\" +\n-        \"7QL7KnbaUWRB26HHzIMYVh0el6T+KADf8NXCiMTr+bfpfbL3dxoiF3zhAoGAbCJD\\n\" +\n-        \"Qse1dBs\/cKYCHfkSOsI5T6kx52Tw0jS6Y4X\/FOBjyqr\/elyEexbdk8PH9Ar931Qr\\n\" +\n-        \"NKMvn8oA4iA\/PRrXX7M2yi3YQrWwbkGYWYjtzrzEAdzmg+5eARKAeJrZ8\/bg9l3U\\n\" +\n-        \"ttKaItJsDPlizn8rngy3FsJpR9aSAMK6\/+wOiYkCgYEA1tZkI1rD1W9NYZtbI9BE\\n\" +\n-        \"qlJVFi2PBOJMKNuWdouPX3HLQ72GJSQff2BFzLTELjweVVJ0SvY4IipzpQOHQOBy\\n\" +\n-        \"5qh\/p6izXJZh3IHtvwVBjHoEVplg1b2+I5e3jDCfqnwcQw82dW5SxOJMg1h\/BD0I\\n\" +\n-        \"qAL3go42DYeYhu\/WnECMeis=\",\n-\n-        \/\/\n-        \/\/ EC private key related to cert endEntityCertStrs[2].\n-        \/\/\n-        \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgGVc7hICpmp91jbYe\\n\" +\n-        \"nrr8nYHD37RZP3VENY+szuA7WjuhRANCAATn0wRE1OVVnV56mzxnc657lmSBB0+0\\n\" +\n-        \"P5YgTq2Pc9sgqnEY8PG980\/3n0DJCMQr96FZBWsIyY2gSQjNj4ggGAHT\",\n-\n-        \/\/\n-        \/\/ DSA private key related to cert endEntityCertStrs[3].\n-        \/\/\n-        \"MIICZQIBADCCAjoGByqGSM44BAEwggItAoIBAQCaVq+CgmsxyOpZFVwMTZ2ZYA9E\\n\" +\n-        \"SCfNC+d4QN5\/rxymsPONLC86zlB4XLHvmJtp2jV7qM7+tbWmsIZYcMPWgD9Ofg+T\\n\" +\n-        \"e+7SdTHO+XWoBNz5olulRTk6nRu+notsKxBCyVX0V5GHsRvts\/qClz+QcIHMSALV\\n\" +\n-        \"UIrumtxxdbL63pIw4ds0PeH5RtyR9JpS5pWxUk1MPUPoYSV9GPg2bPUEY99Ji8qi\\n\" +\n-        \"vA1kRTeBfAWC0OgBwbHu1zIKUukMd+pF\/D\/vKKovJ6I\/sPiGXmUw2i4lYOUB0wWn\\n\" +\n-        \"QUyBLez1UMWKchyvpW0FYxMbv7j5zMcAH7d++vCWo3OEGfe4Uet6Q3\/Dx83HAiEA\\n\" +\n-        \"mjtJp7XNrsgxbRDqETkHhv6zYH8Voo+gDgSO1m7XcH0CggEBAI5moswp++plZSBP\\n\" +\n-        \"Q9DdCNHt0AV13Toj1jf5M5DNmTX6P6\/D\/oRfi8Ui1fiCKFv+7lD0J2anCFUaLtu+\\n\" +\n-        \"j7v78gp5OChDp\/n49K6DtKtZZRDmw\/Bpm6LNdknmdN5kO5wVzbIXHTCCeNs\/CJTF\\n\" +\n-        \"mSU5PvEaI4y3M5NraSgLPkq4gEv7\/A8orGbKmj1Whj3F9t1Tosxdm\/+WkPldMz2t\\n\" +\n-        \"gev+9RM2S6S9XoembRgwRaFVkpQmKoKpOoZcdqV47FLDq5BYH\/5POeJ9wLuAHjxQ\\n\" +\n-        \"5CMKo4p\/lW7BCd4kuGWFT+OFFXfG2v6EtlqFbXBiFWLxyMsOtkUqWARCqEHhyucl\\n\" +\n-        \"TSYlj60EIgIgLfA75+8KcKxdN8mr6gzGjQe7jPFGG42Ejhd7Q2F4wuw=\"\n-        };\n-\n-    \/\/ Private key algorithm of endEntityPrivateKeys.\n-    final static String[] endEntityPrivateKeyAlgs = {\n-        \"EC\",\n-        \"RSA\",\n-        \"EC\",\n-        \"DSA\",\n-    };\n-\n-    \/\/ Private key names of endEntityPrivateKeys.\n-    static final String[] endEntityPrivateKeyNames = {\n-        \"ecdsa\",\n-        \"rsa\",\n-        \"ec-rsa\",\n-        \"dsa\",\n-    };\n+        if (endEntityCerts == null || endEntityCerts.length == 0) {\n+            return null;\n+\n+        } else {\n+            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+            ks = KeyStore.getInstance(\"JKS\");\n+            ks.load(null, null);\n+\n+            for (Cert endEntityCert : endEntityCerts) {\n+                \/\/ generate the private key.\n+                PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n+                        Base64.getMimeDecoder().decode(endEntityCert.privKeyStr));\n+                KeyFactory kf =\n+                        KeyFactory.getInstance(\n+                                endEntityCert.keyAlgo);\n+                PrivateKey priKey = kf.generatePrivate(priKeySpec);\n+\n+                \/\/ generate certificate chain\n+                ByteArrayInputStream is = new ByteArrayInputStream(\n+                        endEntityCert.certStr.getBytes());\n+                Certificate keyCert = null;\n+                try {\n+                    keyCert = cf.generateCertificate(is);\n+                } finally {\n+                    is.close();\n+                }\n+\n+                Certificate[] chain = new Certificate[]{keyCert};\n+\n+                \/\/ import the key entry.\n+                ks.setKeyEntry(\"cert-\" + endEntityCert.name(),\n+                        priKey, passphrase, chain);\n+            }\n+\n+            KeyManagerFactory kmf =\n+                    KeyManagerFactory.getInstance(params.kmAlgorithm);\n+            kmf.init(ks, passphrase);\n+            return kmf.getKeyManagers()[0];\n+        }\n+    }\n@@ -460,3 +209,3 @@\n-    private SSLContext createSSLContext(\n-            KeyManager keyManager,\n-            TrustManager trustManager,\n+    protected SSLContext createSSLContext(\n+            Cert[] trustedCerts,\n+            Cert[] endEntityCerts,\n@@ -465,9 +214,2 @@\n-        SSLContext context = SSLContext.getInstance(params.contextProtocol);\n-        context.init(\n-                new KeyManager[] {\n-                        keyManager\n-                    },\n-                new TrustManager[] {\n-                        trustManager\n-                    },\n-                null);\n+        \/\/ Generate certificate from cert string.\n+        TrustManager tm = createTrustManager(trustedCerts, params);\n@@ -475,1 +217,5 @@\n-        return  context;\n+        KeyManager km = createKeyManager(endEntityCerts, params);\n+\n+        SSLContext context = SSLContext.getInstance(params.contextProtocol);\n+        context.init(km == null ? null : new KeyManager[]{km}, new TrustManager[]{tm}, null);\n+        return context;\n@@ -479,1 +225,1 @@\n-     * Create an instance of KeyManager with the specified key materials.\n+     * The parameters used to configure SSLContext.\n@@ -481,36 +227,4 @@\n-    static KeyManager createKeyManager(\n-            String[] keyMaterialCerts,\n-            String[] keyMaterialKeys,\n-            String[] keyMaterialKeyAlgs,\n-            String[] keyMaterialKeyNames,\n-            ContextParameters params) throws Exception {\n-\n-        char[] passphrase = \"passphrase\".toCharArray();\n-\n-        \/\/ Generate certificate from cert string.\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        \/\/ Import the key materials.\n-        \/\/\n-        \/\/ Note that certification paths bigger than one are not supported yet.\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-        ByteArrayInputStream is;\n-        for (int i = 0; i < keyMaterialCerts.length; i++) {\n-            String keyCertStr = keyMaterialCerts[i];\n-\n-            \/\/ generate the private key.\n-            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                    Base64.getMimeDecoder().decode(keyMaterialKeys[i]));\n-            KeyFactory kf =\n-                    KeyFactory.getInstance(keyMaterialKeyAlgs[i]);\n-            PrivateKey priKey = kf.generatePrivate(priKeySpec);\n-\n-            \/\/ generate certificate chain\n-            is = new ByteArrayInputStream(keyCertStr.getBytes());\n-            Certificate keyCert = null;\n-            try {\n-                keyCert = cf.generateCertificate(is);\n-            } finally {\n-                is.close();\n-            }\n+    static final class ContextParameters {\n+        final String contextProtocol;\n+        final String tmAlgorithm;\n+        final String kmAlgorithm;\n@@ -518,1 +232,2 @@\n-            Certificate[] chain = new Certificate[] { keyCert };\n+        ContextParameters(String contextProtocol,\n+                String tmAlgorithm, String kmAlgorithm) {\n@@ -520,3 +235,3 @@\n-            \/\/ import the key entry.\n-            ks.setKeyEntry(\"cert-\" + keyMaterialKeyNames[i],\n-                    priKey, passphrase, chain);\n+            this.contextProtocol = contextProtocol;\n+            this.tmAlgorithm = tmAlgorithm;\n+            this.kmAlgorithm = kmAlgorithm;\n@@ -524,8 +239,0 @@\n-\n-        KeyManagerFactory kmf =\n-                KeyManagerFactory.getInstance(params.kmAlgorithm);\n-        kmf.init(ks, passphrase);\n-\n-        KeyManager[] km = kmf.getKeyManagers();\n-\n-        return km[0];\n@@ -535,1 +242,1 @@\n-     * Create an instance of TrustManager with the specified trust materials.\n+     * Get the client side parameters of SSLContext.\n@@ -537,6 +244,3 @@\n-    static TrustManager createTrustManager(\n-            String[] trustedMaterials,\n-            ContextParameters params) throws Exception {\n-\n-        \/\/ Generate certificate from cert string.\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+    protected ContextParameters getClientContextParameters() {\n+        return new ContextParameters(\"TLS\", \"PKIX\", \"NewSunX509\");\n+    }\n@@ -544,3 +248,6 @@\n-        \/\/ Import the trusted certs.\n-        KeyStore ts = KeyStore.getInstance(\"PKCS12\");\n-        ts.load(null, null);\n+    \/*\n+     * Get the server side parameters of SSLContext.\n+     *\/\n+    protected ContextParameters getServerContextParameters() {\n+        return new ContextParameters(\"TLS\", \"PKIX\", \"NewSunX509\");\n+    }\n@@ -548,12 +255,0 @@\n-        Certificate[] trustedCert =\n-                new Certificate[trustedMaterials.length];\n-        ByteArrayInputStream is;\n-        for (int i = 0; i < trustedMaterials.length; i++) {\n-            String trustedCertStr = trustedMaterials[i];\n-\n-            is = new ByteArrayInputStream(trustedCertStr.getBytes());\n-            try {\n-                trustedCert[i] = cf.generateCertificate(is);\n-            } finally {\n-                is.close();\n-            }\n@@ -561,1 +256,695 @@\n-            ts.setCertificateEntry(\"trusted-cert-\" + i, trustedCert[i]);\n+    enum Cert {\n+\n+        CA_ECDSA_SECP256R1(\n+                \"EC\",\n+                \/\/ SHA256withECDSA, curve secp256r1\n+                \/\/ Validity\n+                \/\/     Not Before: May 22 07:18:16 2018 GMT\n+                \/\/     Not After : May 17 07:18:16 2038 GMT\n+                \/\/ Subject Key Identifier:\n+                \/\/     60:CF:BD:73:FF:FA:1A:30:D2:A4:EC:D3:49:71:46:EF:1A:35:A0:86\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIBvjCCAWOgAwIBAgIJAIvFG6GbTroCMAoGCCqGSM49BAMCMDsxCzAJBgNVBAYT\\n\" +\n+                \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n+                \"ZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMDsxCzAJBgNVBAYTAlVT\\n\" +\n+                \"MQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZjZTBZ\\n\" +\n+                \"MBMGByqGSM49AgEGCCqGSM49AwEHA0IABBz1WeVb6gM2mh85z3QlvaB\/l11b5h0v\\n\" +\n+                \"LIzmkC3DKlVukZT+ltH2Eq1oEkpXuf7QmbM0ibrUgtjsWH3mULfmcWmjUDBOMB0G\\n\" +\n+                \"A1UdDgQWBBRgz71z\/\/oaMNKk7NNJcUbvGjWghjAfBgNVHSMEGDAWgBRgz71z\/\/oa\\n\" +\n+                \"MNKk7NNJcUbvGjWghjAMBgNVHRMEBTADAQH\/MAoGCCqGSM49BAMCA0kAMEYCIQCG\\n\" +\n+                \"6wluh1r2\/T6L31mZXRKf9JxeSf9pIzoLj+8xQeUChQIhAJ09wAi1kV8yePLh2FD9\\n\" +\n+                \"2YEHlSQUAbwwqCDEVB5KxaqP\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQg\/HcHdoLJCdq3haVd\\n\" +\n+                \"XZTSKP00YzM3xX97l98vGL\/RI1KhRANCAAQc9VnlW+oDNpofOc90Jb2gf5ddW+Yd\\n\" +\n+                \"LyyM5pAtwypVbpGU\/pbR9hKtaBJKV7n+0JmzNIm61ILY7Fh95lC35nFp\"),\n+\n+        CA_ECDSA_SECP384R1(\n+                \"EC\",\n+                \/\/ SHA384withECDSA, curve secp384r1\n+                \/\/ Validity\n+                \/\/     Not Before: Jun 24 08:15:06 2019 GMT\n+                \/\/     Not After : Jun 19 08:15:06 2039 GMT\n+                \/\/ Subject Key Identifier:\n+                \/\/     0a:93:a9:a0:bf:e7:d5:48:9d:4f:89:15:c6:51:98:80:05:51:4e:4e\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIICCDCCAY6gAwIBAgIUCpOpoL\/n1UidT4kVxlGYgAVRTk4wCgYIKoZIzj0EAwMw\\n\" +\n+                \"OzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n+                \"VGVzdCBTZXJpdmNlMB4XDTE5MDYyNDA4MTUwNloXDTM5MDYxOTA4MTUwNlowOzEL\\n\" +\n+                \"MAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVz\\n\" +\n+                \"dCBTZXJpdmNlMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENVQN1wXWFdgC6u\/dDdiC\\n\" +\n+                \"y+WtMTF66oL\/0BSm+1ZqsogamzCryawOcHgiuXgWzx5CQ3LuOC+tDFyXpGfHuCvb\\n\" +\n+                \"dkzxPrP5n9NrR8\/uRPe5l1KOUbchviU8z9cTP+LZxnZDo1MwUTAdBgNVHQ4EFgQU\\n\" +\n+                \"SktSFArR1p\/5mXV0kyo0RxIVa\/UwHwYDVR0jBBgwFoAUSktSFArR1p\/5mXV0kyo0\\n\" +\n+                \"RxIVa\/UwDwYDVR0TAQH\/BAUwAwEB\/zAKBggqhkjOPQQDAwNoADBlAjBZvoNmq3\/v\\n\" +\n+                \"RD2gBTyvxjS9h0rsMRLHDnvul\/KWngytwGPTOBo0Y8ixQXSjdKoc3rkCMQDkiNgx\\n\" +\n+                \"IDxuHedmrLQKIPnVcthTmwv7\/\/jHiqGoKofwChMo2a1P+DQdhszmeHD\/ARQ=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDChlbt0NF8oIKODSxn2\\n\" +\n+                \"WXCXuJm3z78LRkzYQS3Nx5NMjei5ytkFZz4qvD4XXMWlTEyhZANiAAQ1VA3XBdYV\\n\" +\n+                \"2ALq790N2ILL5a0xMXrqgv\/QFKb7VmqyiBqbMKvJrA5weCK5eBbPHkJDcu44L60M\\n\" +\n+                \"XJekZ8e4K9t2TPE+s\/mf02tHz+5E97mXUo5RtyG+JTzP1xM\/4tnGdkM=\"),\n+\n+        CA_ECDSA_SECP521R1(\n+                \"EC\",\n+                \/\/ SHA512withECDSA, curve secp521r1\n+                \/\/ Validity\n+                \/\/     Not Before: Jun 24 08:15:06 2019 GMT\n+                \/\/     Not After : Jun 19 08:15:06 2039 GMT\n+                \/\/ Subject Key Identifier:\n+                \/\/     25:ca:68:76:6d:29:17:9b:71:78:45:2d:d4:c6:e4:5d:fe:25:ff:90\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIICUzCCAbSgAwIBAgIUJcpodm0pF5txeEUt1MbkXf4l\/5AwCgYIKoZIzj0EAwQw\\n\" +\n+                \"OzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n+                \"VGVzdCBTZXJpdmNlMB4XDTE5MDYyNDA4MTUwNloXDTM5MDYxOTA4MTUwNlowOzEL\\n\" +\n+                \"MAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVz\\n\" +\n+                \"dCBTZXJpdmNlMIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQAmFD5VmB2MdyJ6k+E\\n\" +\n+                \"eP4JncrE65ySL07gVmFwnr8otOt3NtRAyzmviMNNXXjo5R5NqNjKP4pr92JjT0sO\\n\" +\n+                \"D65yngkBtH151Ev\/fiKPLxkXL9GzfKdWHVhDX7Zg6DUydzukzZV2\/dIyloAIqwlz\\n\" +\n+                \"QVKJqT7RypDufdng8hnE9YfKo6ypZiujUzBRMB0GA1UdDgQWBBRAIrxa7WqtqUCe\\n\" +\n+                \"HFuKREDC92spvTAfBgNVHSMEGDAWgBRAIrxa7WqtqUCeHFuKREDC92spvTAPBgNV\\n\" +\n+                \"HRMBAf8EBTADAQH\/MAoGCCqGSM49BAMEA4GMADCBiAJCAe22iirZnODCmlpxcv57\\n\" +\n+                \"3g5BEE60C+dtYmTqR4DtFyDaTRQ5CFf4ZxvQPIbD+SXi5Cbrl6qtrZG0cjUihPkC\\n\" +\n+                \"Hi1hAkIAiEcO7nMPgQLny+GrciojfN+bZXME\/dPz6KHBm\/89f8Me+jawVnv6y+df\\n\" +\n+                \"2Sbafh1KV6ntWQtB4bK3MXV8Ym9Eg1I=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIHuAgEAMBAGByqGSM49AgEGBSuBBAAjBIHWMIHTAgEBBEIAV8dZszV6+nLw3LeA\\n\" +\n+                \"Q+qLJLGaqyjlsQkaopCPcmoRdy1HX6AzB\/YnKsPkHp\/9DQN6A2JgUhFG5B0XvKSk\\n\" +\n+                \"BqNNuSGhgYkDgYYABACYUPlWYHYx3InqT4R4\/gmdysTrnJIvTuBWYXCevyi063c2\\n\" +\n+                \"1EDLOa+Iw01deOjlHk2o2Mo\/imv3YmNPSw4PrnKeCQG0fXnUS\/9+Io8vGRcv0bN8\\n\" +\n+                \"p1YdWENftmDoNTJ3O6TNlXb90jKWgAirCXNBUompPtHKkO592eDyGcT1h8qjrKlm\\n\" +\n+                \"Kw==\"),\n+\n+        CA_RSA_2048(\n+                \"RSA\",\n+                \/\/ SHA256withRSA, 2048 bits\n+                \/\/ Validity\n+                \/\/     Not Before: May 22 07:18:16 2018 GMT\n+                \/\/     Not After : May 17 07:18:16 2038 GMT\n+                \/\/ Subject Key Identifier:\n+                \/\/     0D:DD:93:C9:FE:4B:BD:35:B7:E8:99:78:90:FB:DB:5A:3D:DB:15:4C\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIDSTCCAjGgAwIBAgIJAI4ZF3iy8zG+MA0GCSqGSIb3DQEBCwUAMDsxCzAJBgNV\\n\" +\n+                \"BAYTAlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n+                \"aXZjZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMDsxCzAJBgNVBAYT\\n\" +\n+                \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n+                \"ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALpMcY7aWieXDEM1\/YJf\\n\" +\n+                \"JW27b4nRIFZyEYhEloyGsKTuQiiQjc8cqRZFNXe2vwziDB4IyTEl0Hjl5QF6ZaQE\\n\" +\n+                \"huPzzwvQm1pv64KrRXrmj3FisQK8B5OWLty9xp6xDqsaMRoyObLK+oIb20T5fSlE\\n\" +\n+                \"evmo1vYjnh8CX0Yzx5Gr5ye6YSEHQvYOWEws8ad17OlyToR2KMeC8w4qo6rs59pW\\n\" +\n+                \"g7Mxn9vo22ImDzrtAbTbXbCias3xlE0Bp0h5luyf+5U4UgksoL9B9r2oP4GrLNEV\\n\" +\n+                \"oJk57t8lwaR0upiv3CnS8LcJELpegZub5ggqLY8ZPYFQPjlK6IzLOm6rXPgZiZ3m\\n\" +\n+                \"RL0CAwEAAaNQME4wHQYDVR0OBBYEFA3dk8n+S701t+iZeJD721o92xVMMB8GA1Ud\\n\" +\n+                \"IwQYMBaAFA3dk8n+S701t+iZeJD721o92xVMMAwGA1UdEwQFMAMBAf8wDQYJKoZI\\n\" +\n+                \"hvcNAQELBQADggEBAJTRC3rKUUhVH07\/1+stUungSYgpM08dY4utJq0BDk36BbmO\\n\" +\n+                \"0AnLDMbkwFdHEoqF6hQIfpm7SQTmXk0Fss6Eejm8ynYr6+EXiRAsaXOGOBCzF918\\n\" +\n+                \"\/RuKOzqABfgSU4UBKECLM5bMfQTL60qx+HdbdVIpnikHZOFfmjCDVxoHsGyXc1LW\\n\" +\n+                \"Jhkht8IGOgc4PMGvyzTtRFjz01kvrVQZ75aN2E0GQv6dCxaEY0i3ypSzjUWAKqDh\\n\" +\n+                \"3e2OLwUSvumcdaxyCdZAOUsN6pDBQ+8VRG7KxnlRlY1SMEk46QgQYLbPDe\/+W\/yH\\n\" +\n+                \"ca4PejicPeh+9xRAwoTpiE2gulfT7Lm+fVM7Ruc=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC6THGO2lonlwxD\\n\" +\n+                \"Nf2CXyVtu2+J0SBWchGIRJaMhrCk7kIokI3PHKkWRTV3tr8M4gweCMkxJdB45eUB\\n\" +\n+                \"emWkBIbj888L0Jtab+uCq0V65o9xYrECvAeTli7cvcaesQ6rGjEaMjmyyvqCG9tE\\n\" +\n+                \"+X0pRHr5qNb2I54fAl9GM8eRq+cnumEhB0L2DlhMLPGndezpck6EdijHgvMOKqOq\\n\" +\n+                \"7OfaVoOzMZ\/b6NtiJg867QG0212womrN8ZRNAadIeZbsn\/uVOFIJLKC\/Qfa9qD+B\\n\" +\n+                \"qyzRFaCZOe7fJcGkdLqYr9wp0vC3CRC6XoGbm+YIKi2PGT2BUD45SuiMyzpuq1z4\\n\" +\n+                \"GYmd5kS9AgMBAAECggEAFHSoU2MuWwJ+2jJnb5U66t2V1bAcuOE1g5zkWvG\/G5z9\\n\" +\n+                \"rq6Qo5kmB8f5ovdx6tw3MGUOklLwnRXBG3RxDJ1iokz3AvkY1clMNsDPlDsUrQKF\\n\" +\n+                \"JSO4QUBQTPSZhnsyfR8XHSU+qJ8Y+ohMfzpVv95BEoCzebtXdVgxVegBlcEmVHo2\\n\" +\n+                \"kMmkRN+bYNsr8eb2r+b0EpyumS39ZgKYh09+cFb78y3T6IFMGcVJTP6nlGBFkmA\/\\n\" +\n+                \"25pYeCF2tSki08qtMJZQAvKfw0Kviibk7ZxRbJqmc7B1yfnOEHP6ftjuvKl2+RP\/\\n\" +\n+                \"+5P5f8CfIP6gtA0LwSzAqQX\/hfIKrGV5j0pCqrD0kQKBgQDeNR6Xi4sXVq79lihO\\n\" +\n+                \"a1bSeV7r8yoQrS8x951uO+ox+UIZ1MsAULadl7zB\/P0er92p198I9M\/0Jth3KBuS\\n\" +\n+                \"zj45mucvpiiGvmQlMKMEfNq4nN7WHOu55kufPswQB2mR4J3xmwI+4fM\/nl1zc82h\\n\" +\n+                \"De8JSazRldJXNhfx0RGFPmgzbwKBgQDWoVXrXLbCAn41oVnWB8vwY9wjt92ztDqJ\\n\" +\n+                \"HMFA\/SUohjePep9UDq6ooHyAf\/Lz6oE5NgeVpPfTDkgvrCFVKnaWdwALbYoKXT2W\\n\" +\n+                \"9FlyJox6eQzrtHAacj3HJooXWuXlphKSizntfxj3LtMR9BmrmRJOfK+SxNOVJzW2\\n\" +\n+                \"+MowT20EkwKBgHmpB8jdZBgxI7o\/\/m2BI5Y1UZ1KE5vx1kc7VXzHXSBjYqeV9FeF\\n\" +\n+                \"2ZZLP9POWh\/1Fh4pzTmwIDODGT2UPhSQy0zq3O0fwkyT7WzXRknsuiwd53u\/dejg\\n\" +\n+                \"iEL2NPAJvulZ2+AuiHo5Z99LK8tMeidV46xoJDDUIMgTG+UQHNGhK5gNAoGAZn\/S\\n\" +\n+                \"Cn7SgMC0CWSvBHnguULXZO9wH1wZAFYNLL44OqwuaIUFBh2k578M9kkke7woTmwx\\n\" +\n+                \"HxQTjmWpr6qimIuY6q6WBN8hJ2Xz\/d1fwhYKzIp20zHuv5KDUlJjbFfqpsuy3u1C\\n\" +\n+                \"kts5zwI7pr1ObRbDGVyOdKcu7HI3QtR5qqyjwaUCgYABo7Wq6oHva\/9V34+G3Goh\\n\" +\n+                \"63bYGUnRw2l5BD11yhQv8XzGGZFqZVincD8gltNThB0Dc\/BI+qu3ky4YdgdZJZ7K\\n\" +\n+                \"z51GQGtaHEbrHS5caV79yQ8QGY5mUVH3E+VXSxuIqb6pZq2DH4sTAEFHyncddmOH\\n\" +\n+                \"zoXBInYwRG9KE\/Bw5elhUw==\"),\n+\n+        CA_RSA_512( \/\/ for DisabledShortRSAKeys test\n+                \"RSA\",\n+                \/\/ md5WithRSAEncryption, 1024 bits\n+                \/\/ Validity\n+                \/\/      Not Before: Aug 19 01:52:19 2011 GMT\n+                \/\/      Not After : Jul 29 01:52:19 2032 GMT\n+                \/\/ X509v3 Authority Key Identifier:\n+                \/\/      keyid:B9:7C:D5:D9:DF:A7:4C:03:AE:FD:0E:27:5B:31:95:6C:C7:F3:75:E1\n+                \/\/      DirName:\/C=US\/O=Java\/OU=SunJSSE Test Serivce\n+                \/\/      serial:00\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIICkjCCAfugAwIBAgIBADANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n+                \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n+                \"MTEwODE5MDE1MjE5WhcNMzIwNzI5MDE1MjE5WjA7MQswCQYDVQQGEwJVUzENMAsG\\n\" +\n+                \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwgZ8wDQYJ\\n\" +\n+                \"KoZIhvcNAQEBBQADgY0AMIGJAoGBAM8orG08DtF98TMSscjGsidd1ZoN4jiDpi8U\\n\" +\n+                \"ICz+9dMm1qM1d7O2T+KH3\/mxyox7Rc2ZVSCaUD0a3CkhPMnlAx8V4u0H+E9sqso6\\n\" +\n+                \"iDW3JpOyzMExvZiRgRG\/3nvp55RMIUV4vEHOZ1QbhuqG4ebN0Vz2DkRft7+flthf\\n\" +\n+                \"vDld6f5JAgMBAAGjgaUwgaIwHQYDVR0OBBYEFLl81dnfp0wDrv0OJ1sxlWzH83Xh\\n\" +\n+                \"MGMGA1UdIwRcMFqAFLl81dnfp0wDrv0OJ1sxlWzH83XhoT+kPTA7MQswCQYDVQQG\\n\" +\n+                \"EwJVUzENMAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n+                \"Y2WCAQAwDwYDVR0TAQH\/BAUwAwEB\/zALBgNVHQ8EBAMCAQYwDQYJKoZIhvcNAQEE\\n\" +\n+                \"BQADgYEALlgaH1gWtoBZ84EW8Hu6YtGLQ\/L9zIFmHonUPZwn3Pr\/\/icR9Sqhc3\/l\\n\" +\n+                \"pVTxOINuFHLRz4BBtEylzRIOPzK3tg8XwuLb1zd0db90x3KBCiAL6E6cklGEPwLe\\n\" +\n+                \"XYMHDn9eDsaq861Tzn6ZwzMgw04zotPMoZN0mVd\/3Qca8UJFucE=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAtz2+PTkj3zg9hh0l\\n\" +\n+                \"xQhcdRiRGX6hvWVH+8biIv62uXS4zxgGqGOUBdkDmvFZzq4kAlw38lx8bLkZxDqJ\\n\" +\n+                \"sS+xFQIDAQABAkByx\/5Oo2hQ\/w2q4L8z+NTRlJ3vdl8iIDtC\/4XPnfYfnGptnpG6\\n\" +\n+                \"ZThQRvbMZiai0xHQPQMszvAHjZVme1eDl3EBAiEA3aKJHynPVCEJhpfCLWuMwX5J\\n\" +\n+                \"1LntwJO7NTOyU5m8rPECIQDTpzn5X44r2rzWBDna\/Sx7HW9IWCxNgUD2Eyi2nA7W\\n\" +\n+                \"ZQIgJerEorw4aCAuzQPxiGu57PB6GRamAihEAtoRTBQlH0ECIQDN08FgTtnesgCU\\n\" +\n+                \"DFYLLcw1CiHvc7fZw4neBDHCrC8NtQIgA8TOUkGnpCZlQ0KaI8KfKWI+vxFcgFnH\\n\" +\n+                \"3fnqsTgaUs4=\"\n+\n+        ),\n+\n+        CA_DSA_2048(\n+                \"DSA\",\n+                \/\/ SHA256withDSA, 2048 bits\n+                \/\/ Validity\n+                \/\/     Not Before: May 22 07:18:18 2018 GMT\n+                \/\/     Not After : May 17 07:18:18 2038 GMT\n+                \/\/ Subject Key Identifier:\n+                \/\/     76:66:9E:F7:3B:DD:45:E5:3B:D9:72:3C:3F:F0:54:39:86:31:26:53\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIErjCCBFSgAwIBAgIJAOktYLNCbr02MAsGCWCGSAFlAwQDAjA7MQswCQYDVQQG\\n\" +\n+                \"EwJVUzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n+                \"Y2UwHhcNMTgwNTIyMDcxODE4WhcNMzgwNTE3MDcxODE4WjA7MQswCQYDVQQGEwJV\\n\" +\n+                \"UzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2Y2Uw\\n\" +\n+                \"ggNHMIICOQYHKoZIzjgEATCCAiwCggEBAO5GyPhSm0ze3LSu+gicdULLj05iOfTL\\n\" +\n+                \"UvZQ29sYz41zmqrLBQbdKiHqgJu2Re9sgTb5suLNjF047TOLPnU3jhPtWm2X8Xzi\\n\" +\n+                \"VGIcHym\/Q\/MeZxStt\/88seqroI3WOKzIML2GcrishT+lcGrtH36Tf1+ue2Snn3PS\\n\" +\n+                \"WyxygNqPjllP5uUjYmFLvAf4QLMldkd\/D2VxcwsHjB8y5iUZsXezc\/LEhRZS\/02m\\n\" +\n+                \"ivqlRw3AMkq\/OVe\/ZtxFWsP0nsfxEGdZuaUFpppGfixxFvymrB3+J51cTt+pZBDq\\n\" +\n+                \"D2y0DYfc+88iCs4jwHTfcDIpLb538HBjBj2rEgtQESQmB0ooD\/+wsPsCIQC1bYch\\n\" +\n+                \"gElNtDYL3FgpLgNSUYp7gIWv9ehaC7LO2z7biQKCAQBitvFOnDkUja8NAF7lDpOV\\n\" +\n+                \"b5ipQ8SicBLW3kQamxhyuyxgZyy\/PojZ\/oPorkqW\/T\/A0rhnG6MssEpAtdiwVB+c\\n\" +\n+                \"rBYGo3bcwmExJhdOJ6dYuKFppPWhCwKMHs9npK+lqBMl8l5j58xlcFeC7ZfGf8GY\\n\" +\n+                \"GkhFW0c44vEQhMMbac6ZTTP4mw+1t7xJfmDMlLEyIpTXaAAk8uoVLWzQWnR40sHi\\n\" +\n+                \"ybvS0u3JxQkb7\/y8tOOZu8qlz\/YOS7lQ6UxUGX27Ce1E0+agfPphetoRAlS1cezq\\n\" +\n+                \"Wa7r64Ga0nkj1kwkcRqjgTiJx0NwnUXr78VAXFhVF95+O3lfqhvdtEGtkhDGPg7N\\n\" +\n+                \"A4IBBgACggEBAMmSHQK0w2i+iqUjOPzn0yNEZrzepLlLeQ1tqtn0xnlv5vBAeefD\\n\" +\n+                \"Pm9dd3tZOjufVWP7hhEz8xPobb1CS4e3vuQiv5UBfhdPL3f3l9T7JMAKPH6C9Vve\\n\" +\n+                \"OQXE5eGqbjsySbcmseHoYUt1WCSnSda1opX8zchX04e7DhGfE2\/L9flpYEoSt8lI\\n\" +\n+                \"vMNjgOwvKdW3yvPt1\/eBBHYNFG5gWPv\/Q5KoyCtHS03uqGm4rNc\/wZTIEEfd66C+\\n\" +\n+                \"QRaUltjOaHmtwOdDHaNqwhYZSVOip+Mo+TfyzHFREcdHLapo7ZXqbdYkRGxRR3d+\\n\" +\n+                \"3DfHaraJO0OKoYlPkr3JMvM\/MSGR9AnZOcejUDBOMB0GA1UdDgQWBBR2Zp73O91F\\n\" +\n+                \"5TvZcjw\/8FQ5hjEmUzAfBgNVHSMEGDAWgBR2Zp73O91F5TvZcjw\/8FQ5hjEmUzAM\\n\" +\n+                \"BgNVHRMEBTADAQH\/MAsGCWCGSAFlAwQDAgNHADBEAiBzriYE41M2y9Hy5ppkL0Qn\\n\" +\n+                \"dIlNc8JhXT\/PHW7GDtViagIgMko8Qoj9gDGPK3+O9E8DC3wGiiF9CObM4LN387ok\\n\" +\n+                \"J+g=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIICZQIBADCCAjkGByqGSM44BAEwggIsAoIBAQDuRsj4UptM3ty0rvoInHVCy49O\" +\n+                \"Yjn0y1L2UNvbGM+Nc5qqywUG3Soh6oCbtkXvbIE2+bLizYxdOO0ziz51N44T7Vpt\" +\n+                \"l\/F84lRiHB8pv0PzHmcUrbf\/PLHqq6CN1jisyDC9hnK4rIU\/pXBq7R9+k39frntk\" +\n+                \"p59z0lsscoDaj45ZT+blI2JhS7wH+ECzJXZHfw9lcXMLB4wfMuYlGbF3s3PyxIUW\" +\n+                \"Uv9Npor6pUcNwDJKvzlXv2bcRVrD9J7H8RBnWbmlBaaaRn4scRb8pqwd\/iedXE7f\" +\n+                \"qWQQ6g9stA2H3PvPIgrOI8B033AyKS2+d\/BwYwY9qxILUBEkJgdKKA\/\/sLD7AiEA\" +\n+                \"tW2HIYBJTbQ2C9xYKS4DUlGKe4CFr\/XoWguyzts+24kCggEAYrbxTpw5FI2vDQBe\" +\n+                \"5Q6TlW+YqUPEonAS1t5EGpsYcrssYGcsvz6I2f6D6K5Klv0\/wNK4ZxujLLBKQLXY\" +\n+                \"sFQfnKwWBqN23MJhMSYXTienWLihaaT1oQsCjB7PZ6SvpagTJfJeY+fMZXBXgu2X\" +\n+                \"xn\/BmBpIRVtHOOLxEITDG2nOmU0z+JsPtbe8SX5gzJSxMiKU12gAJPLqFS1s0Fp0\" +\n+                \"eNLB4sm70tLtycUJG+\/8vLTjmbvKpc\/2Dku5UOlMVBl9uwntRNPmoHz6YXraEQJU\" +\n+                \"tXHs6lmu6+uBmtJ5I9ZMJHEao4E4icdDcJ1F6+\/FQFxYVRfefjt5X6ob3bRBrZIQ\" +\n+                \"xj4OzQQjAiEAsceWOM8do4etxp2zgnoNXV8PUUyqWhz1+0srcKV7FR4=\"),\n+\n+        CA_DSA_1024(\n+                \"DSA\",\n+                \/\/ dsaWithSHA1, 1024 bits\n+                \/\/ Validity\n+                \/\/     Not Before: Apr 24 12:25:43 2020 GMT\n+                \/\/     Not After : Apr 22 12:25:43 2030 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/     E1:3C:01:52:EB:D1:38:F7:CF:F1:E3:5E:DB:54:75:7F:5E:AB:2D:36\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIC9TCCArWgAwIBAgIUd52yKk0OxQuxdaYRAfq5VLuF1ZAwCQYHKoZIzjgEAzAu\\n\" +\n+                \"MQswCQYDVQQGEwJVUzENMAsGA1UECgwESmF2YTEQMA4GA1UECwwHU3VuSlNTRTAe\\n\" +\n+                \"Fw0yMDA0MjQxMjI1NDJaFw0zMDA0MjIxMjI1NDJaMC4xCzAJBgNVBAYTAlVTMQ0w\\n\" +\n+                \"CwYDVQQKDARKYXZhMRAwDgYDVQQLDAdTdW5KU1NFMIIBtjCCASsGByqGSM44BAEw\\n\" +\n+                \"ggEeAoGBAKgyb2XpANq43T8yBf5v0PTBOddLPxd0f0FotASron5rQr86JjBTfgIW\\n\" +\n+                \"oE4u7nYlO6bp\/M4Dw6qZr+HaDu9taIDOj6LL51eUShVsOgS7XZcUzLT8vPnkEDDo\\n\" +\n+                \"u326x0B7fuNCbMLm+ipM2d4FhLUTt4Qb5TcY6l7dOGHeWiL7nl43AhUAoGr8DY2m\\n\" +\n+                \"WHZPHk2XbZ5wpaM2lLcCgYBKiFbFFViH\/ylHJRPtYtjtJw4ls1scbVP4TRHnKoZc\\n\" +\n+                \"HPAird1fDYgGC2b0GQNAMABhI+L+ogxS7qakySpJCheuN25AjiSyilygQdlXoWRt\\n\" +\n+                \"Mggsh8EQZT7iP4V4e9m3xRHzb5ECvsSTdZB1BQMcC90W2Avq+orqgBnr2in9UEd8\\n\" +\n+                \"qwOBhAACgYAgVWxjYWlWIv7s4BnNMQoPKppi205f3aC6wv6Rqk4BnYYYrFONEmzQ\\n\" +\n+                \"hzj6lSXfxLpTu4lg2zNeIraZggoS0ztkbZNNADEmAHx+OLshiJJxu2\/KfoopJOZg\\n\" +\n+                \"8ARmuaKOkWbkW9y4hWhfBlVwZbckG3Eibff0xronIXXy7B7UKaccyqNTMFEwHQYD\\n\" +\n+                \"VR0OBBYEFOE8AVLr0Tj3z\/HjXttUdX9eqy02MB8GA1UdIwQYMBaAFOE8AVLr0Tj3\\n\" +\n+                \"z\/HjXttUdX9eqy02MA8GA1UdEwEB\/wQFMAMBAf8wCQYHKoZIzjgEAwMvADAsAhRC\\n\" +\n+                \"YLduLniBEJ51SfBWIkvNW6OG7QIUSKaTY6rgEFDEMoTqOjFChR22nkk=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIIBSgIBADCCASsGByqGSM44BAEwggEeAoGBAKgyb2XpANq43T8yBf5v0PTBOddL\\n\" +\n+                \"Pxd0f0FotASron5rQr86JjBTfgIWoE4u7nYlO6bp\/M4Dw6qZr+HaDu9taIDOj6LL\\n\" +\n+                \"51eUShVsOgS7XZcUzLT8vPnkEDDou326x0B7fuNCbMLm+ipM2d4FhLUTt4Qb5TcY\\n\" +\n+                \"6l7dOGHeWiL7nl43AhUAoGr8DY2mWHZPHk2XbZ5wpaM2lLcCgYBKiFbFFViH\/ylH\\n\" +\n+                \"JRPtYtjtJw4ls1scbVP4TRHnKoZcHPAird1fDYgGC2b0GQNAMABhI+L+ogxS7qak\\n\" +\n+                \"ySpJCheuN25AjiSyilygQdlXoWRtMggsh8EQZT7iP4V4e9m3xRHzb5ECvsSTdZB1\\n\" +\n+                \"BQMcC90W2Avq+orqgBnr2in9UEd8qwQWAhQ7rSn+WvIxeuZ\/CK4p04eMe5JzpA==\"),\n+\n+        CA_ED25519(\n+                \"EdDSA\",\n+                \/\/ ED25519\n+                \/\/ Validity\n+                \/\/     Not Before: May 24 23:32:35 2020 GMT\n+                \/\/     Not After : May 22 23:32:35 2030 GMT\n+                \/\/ X509v3 Authority Key Identifier:\n+                \/\/     keyid:06:76:DB:88:EB:61:55:4C:C9:63:41:C2:A0:A8:57:3F:D7:F1:B8:EC\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIByTCCAXugAwIBAgIUCyxKvhErehsygx50JYArsHby9hAwBQYDK2VwMDsxCzAJ\\n\" +\n+                \"BgNVBAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3Qg\\n\" +\n+                \"U2VyaXZjZTAeFw0yMDA1MjQyMzMyMzVaFw0zMDA1MjIyMzMyMzVaMDsxCzAJBgNV\\n\" +\n+                \"BAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n+                \"aXZjZTAqMAUGAytlcAMhAKdotuYIkH8PYbopSLbaf1BtqUY2d6AbTgK2prMzQ6B3\\n\" +\n+                \"o4GQMIGNMA8GA1UdEwEB\/wQFMAMBAf8wHQYDVR0OBBYEFAZ224jrYVVMyWNBwqCo\\n\" +\n+                \"Vz\/X8bjsMB8GA1UdIwQYMBaAFAZ224jrYVVMyWNBwqCoVz\/X8bjsMA4GA1UdDwEB\\n\" +\n+                \"\/wQEAwIBhjAqBgNVHSUBAf8EIDAeBggrBgEFBQcDAwYIKwYBBQUHAwgGCCsGAQUF\\n\" +\n+                \"BwMJMAUGAytlcANBADVAArvME8xFigFhCCCOTBoy\/4ldGkDZQ\/GT3Q6xnAP558FU\\n\" +\n+                \"0G32OprKQZP43D9bmFU0LMgCVM9bHWU+bu\/10AU=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MC4CAQAwBQYDK2VwBCIEII\/VYp8nu\/eqq2L5y7\/3IzavBgis4LWP6Rikv0N8SpgL\"),\n+\n+        CA_ED448(\n+                \"EdDSA\",\n+                \/\/ ED448\n+                \/\/ Validity\n+                \/\/     Not Before: May 24 23:23:43 2020 GMT\n+                \/\/     Not After : May 22 23:23:43 2030 GMT\n+                \/\/ X509v3 Authority Key Identifier:\n+                \/\/     keyid:F5:D5:9D:FB:6F:B7:50:29:DF:F0:B8:83:10:5F:9B:C4:A8:1C:E9:F4\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIICFDCCAZSgAwIBAgIUKcmLeKilq0LN40sniBJO7F1gb\/owBQYDK2VxMDsxCzAJ\\n\" +\n+                \"BgNVBAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3Qg\\n\" +\n+                \"U2VyaXZjZTAeFw0yMDA1MjQyMzIzNDNaFw0zMDA1MjIyMzIzNDNaMDsxCzAJBgNV\\n\" +\n+                \"BAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n+                \"aXZjZTBDMAUGAytlcQM6APYP8iSXS8xPVDike5RgCByfTtg4GGtpYfoBtt6G5szA\\n\" +\n+                \"55ExAKjm03wtk29nEPU2mCHF2QgfBzUrgKOBkDCBjTAPBgNVHRMBAf8EBTADAQH\/\\n\" +\n+                \"MB0GA1UdDgQWBBT11Z37b7dQKd\/wuIMQX5vEqBzp9DAfBgNVHSMEGDAWgBT11Z37\\n\" +\n+                \"b7dQKd\/wuIMQX5vEqBzp9DAOBgNVHQ8BAf8EBAMCAYYwKgYDVR0lAQH\/BCAwHgYI\\n\" +\n+                \"KwYBBQUHAwMGCCsGAQUFBwMIBggrBgEFBQcDCTAFBgMrZXEDcwAlRXA2gPb52yV3\\n\" +\n+                \"MKJErjmKlYSFExj5w5jafbbd0QgI1yDs+qSaZLjQ8ljwabmLDg+KR+167m0djQDI\\n\" +\n+                \"OOoVuL7bgM0RL836KnuuBzm+gTdPp0gCXy3k9lL0KA0V2YLJHXXzu3suu+7rdgoP\\n\" +\n+                \"plCh2hWdLgA=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MEcCAQAwBQYDK2VxBDsEOd6\/hRZqkUyTlJSwdN5gO\/HnoWYda1fD83YUm5j6m2Bg\\n\" +\n+                \"hAQi+QadFsQLD7R6PI\/4Q0twXqlKnxU5Ug==\"),\n+\n+        EE_ECDSA_SECP256R1(\n+                \"EC\",\n+                \/\/ SHA256withECDSA, curve secp256r1\n+                \/\/ Validity\n+                \/\/     Not Before: May 22 07:18:16 2018 GMT\n+                \/\/     Not After : May 17 07:18:16 2038 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/     60:CF:BD:73:FF:FA:1A:30:D2:A4:EC:D3:49:71:46:EF:1A:35:A0:86\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIBqjCCAVCgAwIBAgIJAPLY8qZjgNRAMAoGCCqGSM49BAMCMDsxCzAJBgNVBAYT\\n\" +\n+                \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n+                \"ZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMFUxCzAJBgNVBAYTAlVT\\n\" +\n+                \"MQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZjZTEY\\n\" +\n+                \"MBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD\\n\" +\n+                \"QgAEb+9n05qfXnfHUb0xtQJNS4JeSi6IjOfW5NqchvKnfJey9VkJzR7QHLuOESdf\\n\" +\n+                \"xlR7q8YIWgih3iWLGfB+wxHiOqMjMCEwHwYDVR0jBBgwFoAUYM+9c\/\/6GjDSpOzT\\n\" +\n+                \"SXFG7xo1oIYwCgYIKoZIzj0EAwIDSAAwRQIgWpRegWXMheiD3qFdd8kMdrkLxRbq\\n\" +\n+                \"1zj8nQMEwFTUjjQCIQDRIrAjZX+YXHN9b0SoWWLPUq0HmiFIi8RwMnO\/\/wJIGQ==\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgn5K03bpTLjEtFQRa\\n\" +\n+                \"JUtx22gtmGEvvSUSQdimhGthdtihRANCAARv72fTmp9ed8dRvTG1Ak1Lgl5KLoiM\\n\" +\n+                \"59bk2pyG8qd8l7L1WQnNHtAcu44RJ1\/GVHurxghaCKHeJYsZ8H7DEeI6\"),\n+\n+        EE_ECDSA_SECP384R1(\n+                \"EC\",\n+                \/\/ SHA384withECDSA, curve secp384r1\n+                \/\/ Validity\n+                \/\/     Not Before: Jun 24 08:15:06 2019 GMT\n+                \/\/     Not After : Jun 19 08:15:06 2039 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/     40:2D:AA:EE:66:AA:33:27:AD:9B:5D:52:9B:60:67:6A:2B:AD:52:D2\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIICEjCCAZegAwIBAgIUS3F0AqAXWRg07CnbknJzxofyBQMwCgYIKoZIzj0EAwMw\\n\" +\n+                \"OzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n+                \"VGVzdCBTZXJpdmNlMB4XDTE5MDYyNDA4MTUwNloXDTM5MDYxOTA4MTUwNlowVTEL\\n\" +\n+                \"MAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVz\\n\" +\n+                \"dCBTZXJpdmNlMRgwFgYDVQQDDA9SZWdyZXNzaW9uIFRlc3QwdjAQBgcqhkjOPQIB\\n\" +\n+                \"BgUrgQQAIgNiAARqElz8b6T07eyKomIinhztV3\/3XBk9bKGtJ0W+JOltjuhMmP\/w\\n\" +\n+                \"G8ASSevpgqgpi6EzpBZaaJxE3zNfkNnxXOZmQi2Ypd1uK0zRdbEOKg0XOcTTZwEj\\n\" +\n+                \"iLjYmt3O0pwpklijQjBAMB0GA1UdDgQWBBRALaruZqozJ62bXVKbYGdqK61S0jAf\\n\" +\n+                \"BgNVHSMEGDAWgBRKS1IUCtHWn\/mZdXSTKjRHEhVr9TAKBggqhkjOPQQDAwNpADBm\\n\" +\n+                \"AjEArVDFKf48xijN6huVUJzKCOP0zlWB5Js+DItIkZmLQuhciPLhLIB\/rChf3Y4C\\n\" +\n+                \"xuP4AjEAmfLhQRI0O3pifpYzYSVh2G7\/jHNG4eO+2dvgAcU+Lh2IIj\/cpLaPFSvL\\n\" +\n+                \"J8FXY9Nj\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDASuI9EtK29APXPipkc\\n\" +\n+                \"qDA+qwlewMjv\/OcjUJ77kP1Vz62oVF9iY9SRIyFIUju8wt+hZANiAARqElz8b6T0\\n\" +\n+                \"7eyKomIinhztV3\/3XBk9bKGtJ0W+JOltjuhMmP\/wG8ASSevpgqgpi6EzpBZaaJxE\\n\" +\n+                \"3zNfkNnxXOZmQi2Ypd1uK0zRdbEOKg0XOcTTZwEjiLjYmt3O0pwpklg=\"),\n+\n+        EE_ECDSA_SECP521R1(\n+                \"EC\",\n+                \/\/ SHA512withECDSA, curve secp521r1\n+                \/\/ Validity\n+                \/\/     Not Before: Jun 24 08:15:06 2019 GMT\n+                \/\/     Not After : Jun 19 08:15:06 2039 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/     7B:AA:79:A4:49:DD:59:34:F0:86:6C:51:C7:30:F4:CE:C5:81:8A:28\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIICXDCCAb2gAwIBAgIUck4QTsbHNqUfPxfGPJLYbedFPdswCgYIKoZIzj0EAwQw\\n\" +\n+                \"OzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n+                \"VGVzdCBTZXJpdmNlMB4XDTE5MDYyNDA4MTUwNloXDTM5MDYxOTA4MTUwNlowVTEL\\n\" +\n+                \"MAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVz\\n\" +\n+                \"dCBTZXJpdmNlMRgwFgYDVQQDDA9SZWdyZXNzaW9uIFRlc3QwgZswEAYHKoZIzj0C\\n\" +\n+                \"AQYFK4EEACMDgYYABAGa2zDLhYQHHCLI3YBqFYJTzrnDIjzwXrxhcRTS8DYkcrjZ\\n\" +\n+                \"+Fih1YyNhix0sdjH+3EqElXAHHuVzn3n3hPOtQCWlQCICkErB34S0cvmtRkeW8Fi\\n\" +\n+                \"hrR5tvJEzEZjPSgwn81kKyhV2L70je6i7Cw884Va8bODckpgw0vTmbQb7T9dupkv\\n\" +\n+                \"1aNCMEAwHQYDVR0OBBYEFHuqeaRJ3Vk08IZsUccw9M7FgYooMB8GA1UdIwQYMBaA\\n\" +\n+                \"FEAivFrtaq2pQJ4cW4pEQML3aym9MAoGCCqGSM49BAMEA4GMADCBiAJCAb33KHdY\\n\" +\n+                \"WDbusORWoY8Euglpd5zsF15hJsk7wtpD5HST1\/NWmdCx405w+TV6a9Gr4VPHeaIQ\\n\" +\n+                \"99i\/+f237ALL5p6IAkIBbwwFL1vt3c\/bx+niyuffQPNjly80rdC9puqAqriSiboS\\n\" +\n+                \"efhxjidJ9HLaIRCMEPyd6vAsC8mO8YvL1uCuEQLsiGM=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIHuAgEAMBAGByqGSM49AgEGBSuBBAAjBIHWMIHTAgEBBEIB8C\/2OX2Dt9vFszzV\\n\" +\n+                \"hcAe0CbkMlvu9uQ\/L7Vz88heuIj0rUZIPGshvgIJt1hCMT8HZxYHvDa4lbUvqjFB\\n\" +\n+                \"+zafvPWhgYkDgYYABAGa2zDLhYQHHCLI3YBqFYJTzrnDIjzwXrxhcRTS8DYkcrjZ\\n\" +\n+                \"+Fih1YyNhix0sdjH+3EqElXAHHuVzn3n3hPOtQCWlQCICkErB34S0cvmtRkeW8Fi\\n\" +\n+                \"hrR5tvJEzEZjPSgwn81kKyhV2L70je6i7Cw884Va8bODckpgw0vTmbQb7T9dupkv\\n\" +\n+                \"1Q==\"),\n+\n+        EE_RSA_2048(\n+                \"RSA\",\n+                \/\/ SHA256withRSA, 2048 bits\n+                \/\/ Validity\n+                \/\/     Not Before: May 22 07:18:16 2018 GMT\n+                \/\/     Not After : May 17 07:18:16 2038 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/     0D:DD:93:C9:FE:4B:BD:35:B7:E8:99:78:90:FB:DB:5A:3D:DB:15:4C\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIDNjCCAh6gAwIBAgIJAO2+yPcFryUTMA0GCSqGSIb3DQEBCwUAMDsxCzAJBgNV\\n\" +\n+                \"BAYTAlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n+                \"aXZjZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMFUxCzAJBgNVBAYT\\n\" +\n+                \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n+                \"ZTEYMBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOC\\n\" +\n+                \"AQ8AMIIBCgKCAQEAszfBobWfZIp8AgC6PiWDDavP65mSvgCXUGxACbxVNAfkLhNR\\n\" +\n+                \"QOsHriRB3X1Q3nvO9PetC6wKlvE9jlnDDj7D+1j1r1CHO7ms1fq8rfcQYdkanDtu\\n\" +\n+                \"4AlHo8v+SSWX16MIXFRYDj2VVHmyPtgbltcg4zGAuwT746FdLI94uXjJjq1IOr\/v\\n\" +\n+                \"0VIlwE5ORWH5Xc+5Tj+oFWK0E4a4GHDgtKKhn2m72hN56\/GkPKGkguP5NRS1qYYV\\n\" +\n+                \"\/EFkdyQMOV8J1M7HaicSft4OL6eKjTrgo93+kHk+tv0Dc6cpVBnalX3TorG8QI6B\\n\" +\n+                \"cHj1XQd78oAlAC+\/jF4pc0mwi0un49kdK9gRfQIDAQABoyMwITAfBgNVHSMEGDAW\\n\" +\n+                \"gBQN3ZPJ\/ku9NbfomXiQ+9taPdsVTDANBgkqhkiG9w0BAQsFAAOCAQEApXS0nKwm\\n\" +\n+                \"Kp8gpmO2yG1rpd1+2wBABiMU4JZaTqmma24DQ3RzyS+V2TeRb29dl5oTUEm98uc0\\n\" +\n+                \"GPZvhK8z5RFr4YE17dc04nI\/VaNDCw4y1NALXGs+AHkjoPjLyGbWpi1S+gfq2sNB\\n\" +\n+                \"Ekkjp6COb\/cb9yiFXOGVls7UOIjnVZVd0r7KaPFjZhYh82\/f4PA\/A1SnIKd1+nfH\\n\" +\n+                \"2yk7mSJNC7Z3qIVDL8MM\/jBVwiC3uNe5GPB2uwhd7k5LGAVN3j4HQQGB0Sz+VC1h\\n\" +\n+                \"92oi6xDa+YBva2fvHuCd8P50DDjxmp9CemC7rnZ5j8egj88w14X44Xjb\/Fd\/ApG9\\n\" +\n+                \"e57NnbT7KM+Grw==\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCzN8GhtZ9kinwC\\n\" +\n+                \"ALo+JYMNq8\/rmZK+AJdQbEAJvFU0B+QuE1FA6weuJEHdfVDee870960LrAqW8T2O\\n\" +\n+                \"WcMOPsP7WPWvUIc7uazV+ryt9xBh2RqcO27gCUejy\/5JJZfXowhcVFgOPZVUebI+\\n\" +\n+                \"2BuW1yDjMYC7BPvjoV0sj3i5eMmOrUg6v+\/RUiXATk5FYfldz7lOP6gVYrQThrgY\\n\" +\n+                \"cOC0oqGfabvaE3nr8aQ8oaSC4\/k1FLWphhX8QWR3JAw5XwnUzsdqJxJ+3g4vp4qN\\n\" +\n+                \"OuCj3f6QeT62\/QNzpylUGdqVfdOisbxAjoFwePVdB3vygCUAL7+MXilzSbCLS6fj\\n\" +\n+                \"2R0r2BF9AgMBAAECggEASIkPkMCuw4WdTT44IwERus3IOIYOs2IP3BgEDyyvm4B6\\n\" +\n+                \"JP\/iihDWKfA4zEl1Gqcni1RXMHswSglXra682J4kui02Ov+vzEeJIY37Ibn2YnP5\\n\" +\n+                \"ZjRT2s9GtI\/S2o4hl8A\/mQb2IMViFC+xKehTukhV4j5d6NPKk0XzLR7gcMjnYxwn\\n\" +\n+                \"l21fS6D2oM1xRG\/di7sL+uLF8EXLRzfiWDNi12uQv4nwtxPKvuKhH6yzHt7YqMH0\\n\" +\n+                \"46pmDKDaxV4w1JdycjCb6NrCJOYZygoQobuZqOQ30UZoZsPJrtovkncFr1e+lNcO\\n\" +\n+                \"+aWDfOLCtTH046dEQh5oCShyXMybNlry\/QHsOtHOwQKBgQDh2iIjs+FPpQy7Z3EX\\n\" +\n+                \"DGEvHYqPjrYO9an2KSRr1m9gzRlWYxKY46WmPKwjMerYtra0GP+TBHrgxsfO8tD2\\n\" +\n+                \"wUAII6sd1qup0a\/Sutgf2JxVilLykd0+Ge4\/Cs51tCdJ8EqDV2B6WhTewOY2EGvg\\n\" +\n+                \"JiKYkeNwgRX\/9M9CFSAMAk0hUQKBgQDLJAartL3DoGUPjYtpJnfgGM23yAGl6G5r\\n\" +\n+                \"NSXDn80BiYIC1p0bG3N0xm3yAjqOtJAUj9jZbvDNbCe3GJfLARMr23legX4tRrgZ\\n\" +\n+                \"nEdKnAFKAKL01oM+A5\/lHdkwaZI9yyv+hgSVdYzUjB8rDmzeVQzo1BT7vXypt2yV\\n\" +\n+                \"6O1OnUpCbQKBgA\/0rzDChopv6KRcvHqaX0tK1P0rYeVQqb9ATNhpf9jg5Idb3HZ8\\n\" +\n+                \"rrk91BNwdVz2G5ZBpdynFl9G69rNAMJOCM4KZw5mmh4XOEq09Ivba8AHU7DbaTv3\\n\" +\n+                \"7QL7KnbaUWRB26HHzIMYVh0el6T+KADf8NXCiMTr+bfpfbL3dxoiF3zhAoGAbCJD\\n\" +\n+                \"Qse1dBs\/cKYCHfkSOsI5T6kx52Tw0jS6Y4X\/FOBjyqr\/elyEexbdk8PH9Ar931Qr\\n\" +\n+                \"NKMvn8oA4iA\/PRrXX7M2yi3YQrWwbkGYWYjtzrzEAdzmg+5eARKAeJrZ8\/bg9l3U\\n\" +\n+                \"ttKaItJsDPlizn8rngy3FsJpR9aSAMK6\/+wOiYkCgYEA1tZkI1rD1W9NYZtbI9BE\\n\" +\n+                \"qlJVFi2PBOJMKNuWdouPX3HLQ72GJSQff2BFzLTELjweVVJ0SvY4IipzpQOHQOBy\\n\" +\n+                \"5qh\/p6izXJZh3IHtvwVBjHoEVplg1b2+I5e3jDCfqnwcQw82dW5SxOJMg1h\/BD0I\\n\" +\n+                \"qAL3go42DYeYhu\/WnECMeis=\"),\n+\n+        EE_EC_RSA_SECP256R1(\n+                \"EC\",\n+                \/\/ SHA256withRSA, curve secp256r1\n+                \/\/ Validity\n+                \/\/     Not Before: May 22 07:18:16 2018 GMT\n+                \/\/     Not After : May 21 07:18:16 2028 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/     0D:DD:93:C9:FE:4B:BD:35:B7:E8:99:78:90:FB:DB:5A:3D:DB:15:4C\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIICazCCAVOgAwIBAgIJAO2+yPcFryUUMA0GCSqGSIb3DQEBCwUAMDsxCzAJBgNV\\n\" +\n+                \"BAYTAlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n+                \"aXZjZTAeFw0xODA1MjIwNzE4MTZaFw0yODA1MjEwNzE4MTZaMFUxCzAJBgNVBAYT\\n\" +\n+                \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n+                \"ZTEYMBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MFkwEwYHKoZIzj0CAQYIKoZIzj0D\\n\" +\n+                \"AQcDQgAE59MERNTlVZ1eeps8Z3Oue5ZkgQdPtD+WIE6tj3PbIKpxGPDxvfNP959A\\n\" +\n+                \"yQjEK\/ehWQVrCMmNoEkIzY+IIBgB06MjMCEwHwYDVR0jBBgwFoAUDd2Tyf5LvTW3\\n\" +\n+                \"6Jl4kPvbWj3bFUwwDQYJKoZIhvcNAQELBQADggEBAFOTVEqs70ykhZiIdrEsF1Ra\\n\" +\n+                \"I3B2rLvwXZk52uSltk2\/bzVvewA577ZCoxQ1pL7ynkisPfBN1uVYtHjM1VA3RC+4\\n\" +\n+                \"+TAK78dnI7otYjWoHp5rvs4l6c\/IbOspS290IlNuDUxMErEm5wxIwj+Aukx\/1y68\\n\" +\n+                \"hOyCvHBLMY2c1LskH1MMBbDuS1aI+lnGpToi+MoYObxGcV458vxuT8+wwV8Fkpvd\\n\" +\n+                \"ll8IIFmeNPRv+1E+lXbES6CSNCVaZ\/lFhPgdgYKleN7sfspiz50DG4dqafuEAaX5\\n\" +\n+                \"xaK1NWXJxTRz0ROH\/IUziyuDW6jphrlgit4+3NCzp6vP9hAJQ8Vhcj0n15BKHIQ=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgGVc7hICpmp91jbYe\\n\" +\n+                \"nrr8nYHD37RZP3VENY+szuA7WjuhRANCAATn0wRE1OVVnV56mzxnc657lmSBB0+0\\n\" +\n+                \"P5YgTq2Pc9sgqnEY8PG980\/3n0DJCMQr96FZBWsIyY2gSQjNj4ggGAHT\"),\n+\n+        EE_RSA_512(\n+                \"RSA\",\n+                \/\/ md5WithRSAEncryption, 512 bits\n+                \/\/ Validity\n+                \/\/      Not Before: Nov  7 13:55:52 2011 GMT\n+                \/\/      Not After : Jul 25 13:55:52 2031 GMT\n+                \/\/ X509v3 Authority Key Identifier:\n+                \/\/      B9:7C:D5:D9:DF:A7:4C:03:AE:FD:0E:27:5B:31:95:6C:C7:F3:75:E1\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIICNDCCAZ2gAwIBAgIBDDANBgkqhkiG9w0BAQQFADA7MQswCQYDVQQGEwJVUzEN\\n\" +\n+                \"MAsGA1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UwHhcN\\n\" +\n+                \"MTExMTA3MTM1NTUyWhcNMzEwNzI1MTM1NTUyWjBPMQswCQYDVQQGEwJVUzENMAsG\\n\" +\n+                \"A1UEChMESmF2YTEdMBsGA1UECxMUU3VuSlNTRSBUZXN0IFNlcml2Y2UxEjAQBgNV\\n\" +\n+                \"BAMTCWxvY2FsaG9zdDBcMA0GCSqGSIb3DQEBAQUAA0sAMEgCQQC3Pb49OSPfOD2G\\n\" +\n+                \"HSXFCFx1GJEZfqG9ZUf7xuIi\/ra5dLjPGAaoY5QF2QOa8VnOriQCXDfyXHxsuRnE\\n\" +\n+                \"OomxL7EVAgMBAAGjeDB2MAsGA1UdDwQEAwID6DAdBgNVHQ4EFgQUXNCJK3\/dtCIc\\n\" +\n+                \"xb+zlA\/JINlvs\/MwHwYDVR0jBBgwFoAUuXzV2d+nTAOu\/Q4nWzGVbMfzdeEwJwYD\\n\" +\n+                \"VR0lBCAwHgYIKwYBBQUHAwEGCCsGAQUFBwMCBggrBgEFBQcDAzANBgkqhkiG9w0B\\n\" +\n+                \"AQQFAAOBgQB2qIDUxA2caMPpGtUACZAPRUtrGssCINIfItETXJZCx\/cRuZ5sP4D9\\n\" +\n+                \"N1acoNDn0hCULe3lhXAeTC9NZ97680yJzregQMV5wATjo1FGsKY30Ma+sc\/nfzQW\\n\" +\n+                \"+h\/7RhYtoG0OTsiaDCvyhI6swkNJzSzrAccPY4+ZgU8HiDLzZTmM3Q==\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAtz2+PTkj3zg9hh0l\\n\" +\n+                \"xQhcdRiRGX6hvWVH+8biIv62uXS4zxgGqGOUBdkDmvFZzq4kAlw38lx8bLkZxDqJ\\n\" +\n+                \"sS+xFQIDAQABAkByx\/5Oo2hQ\/w2q4L8z+NTRlJ3vdl8iIDtC\/4XPnfYfnGptnpG6\\n\" +\n+                \"ZThQRvbMZiai0xHQPQMszvAHjZVme1eDl3EBAiEA3aKJHynPVCEJhpfCLWuMwX5J\\n\" +\n+                \"1LntwJO7NTOyU5m8rPECIQDTpzn5X44r2rzWBDna\/Sx7HW9IWCxNgUD2Eyi2nA7W\\n\" +\n+                \"ZQIgJerEorw4aCAuzQPxiGu57PB6GRamAihEAtoRTBQlH0ECIQDN08FgTtnesgCU\\n\" +\n+                \"DFYLLcw1CiHvc7fZw4neBDHCrC8NtQIgA8TOUkGnpCZlQ0KaI8KfKWI+vxFcgFnH\\n\" +\n+                \"3fnqsTgaUs4=\"\n+        ),\n+\n+        EE_DSA_2048(\n+                \"DSA\",\n+                \/\/ SHA256withDSA, 2048 bits\n+                \/\/ Validity\n+                \/\/     Not Before: May 22 07:18:20 2018 GMT\n+                \/\/     Not After : May 17 07:18:20 2038 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/     76:66:9E:F7:3B:DD:45:E5:3B:D9:72:3C:3F:F0:54:39:86:31:26:53\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIEnDCCBEGgAwIBAgIJAP\/jh1qVhNVjMAsGCWCGSAFlAwQDAjA7MQswCQYDVQQG\\n\" +\n+                \"EwJVUzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n+                \"Y2UwHhcNMTgwNTIyMDcxODIwWhcNMzgwNTE3MDcxODIwWjBVMQswCQYDVQQGEwJV\\n\" +\n+                \"UzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2Y2Ux\\n\" +\n+                \"GDAWBgNVBAMMD1JlZ3Jlc3Npb24gVGVzdDCCA0cwggI6BgcqhkjOOAQBMIICLQKC\\n\" +\n+                \"AQEAmlavgoJrMcjqWRVcDE2dmWAPREgnzQvneEDef68cprDzjSwvOs5QeFyx75ib\\n\" +\n+                \"ado1e6jO\/rW1prCGWHDD1oA\/Tn4Pk3vu0nUxzvl1qATc+aJbpUU5Op0bvp6LbCsQ\\n\" +\n+                \"QslV9FeRh7Eb7bP6gpc\/kHCBzEgC1VCK7prccXWy+t6SMOHbND3h+UbckfSaUuaV\\n\" +\n+                \"sVJNTD1D6GElfRj4Nmz1BGPfSYvKorwNZEU3gXwFgtDoAcGx7tcyClLpDHfqRfw\/\\n\" +\n+                \"7yiqLyeiP7D4hl5lMNouJWDlAdMFp0FMgS3s9VDFinIcr6VtBWMTG7+4+czHAB+3\\n\" +\n+                \"fvrwlqNzhBn3uFHrekN\/w8fNxwIhAJo7Sae1za7IMW0Q6hE5B4b+s2B\/FaKPoA4E\\n\" +\n+                \"jtZu13B9AoIBAQCOZqLMKfvqZWUgT0PQ3QjR7dAFdd06I9Y3+TOQzZk1+j+vw\/6E\\n\" +\n+                \"X4vFItX4gihb\/u5Q9CdmpwhVGi7bvo+7+\/IKeTgoQ6f5+PSug7SrWWUQ5sPwaZui\\n\" +\n+                \"zXZJ5nTeZDucFc2yFx0wgnjbPwiUxZklOT7xGiOMtzOTa2koCz5KuIBL+\/wPKKxm\\n\" +\n+                \"ypo9VoY9xfbdU6LMXZv\/lpD5XTM9rYHr\/vUTNkukvV6Hpm0YMEWhVZKUJiqCqTqG\\n\" +\n+                \"XHaleOxSw6uQWB\/+TznifcC7gB48UOQjCqOKf5VuwQneJLhlhU\/jhRV3xtr+hLZa\\n\" +\n+                \"hW1wYhVi8cjLDrZFKlgEQqhB4crnJU0mJY+tA4IBBQACggEAID0ezl00\/X8mv7eb\\n\" +\n+                \"bzovum1+DEEP7FM57k6HZEG2N3ve4CW+0m9Cd+cWPz8wkZ+M0j\/Eqa6F0IdbkXEc\\n\" +\n+                \"Q7CuzvUyJ57xQ3L\/WCgXsiS+Bh8O4Mz7GwW22CGmHqafbVv+hKBfr8MkskO6GJUt\\n\" +\n+                \"SUF\/CVLzB4gMIvZMH26tBP2xK+i7FeEK9kT+nGdzQSZBAhFYpEVCBplHZO24\/OYq\\n\" +\n+                \"1DNoU327nUuXIhmsfA8N0PjiWbIZIjTPwBGr9H0LpATI7DIDNcvRRvtROP+pBU9y\\n\" +\n+                \"fuykPkptg9C0rCM9t06bukpOSaEz\/2VIQdLE8fHYFA6pHZ6CIc2+5cfvMgTPhcjz\\n\" +\n+                \"W2jCt6MjMCEwHwYDVR0jBBgwFoAUdmae9zvdReU72XI8P\/BUOYYxJlMwCwYJYIZI\\n\" +\n+                \"AWUDBAMCA0gAMEUCIQCeI5fN08b9BpOaHdc3zQNGjp24FOL\/RxlBLeBAorswJgIg\\n\" +\n+                \"JEZ8DhYxQy1O7mmZ2UIT7op6epWMB4dENjs0qWPmcKo=\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIICZQIBADCCAjoGByqGSM44BAEwggItAoIBAQCaVq+CgmsxyOpZFVwMTZ2ZYA9E\\n\" +\n+                \"SCfNC+d4QN5\/rxymsPONLC86zlB4XLHvmJtp2jV7qM7+tbWmsIZYcMPWgD9Ofg+T\\n\" +\n+                \"e+7SdTHO+XWoBNz5olulRTk6nRu+notsKxBCyVX0V5GHsRvts\/qClz+QcIHMSALV\\n\" +\n+                \"UIrumtxxdbL63pIw4ds0PeH5RtyR9JpS5pWxUk1MPUPoYSV9GPg2bPUEY99Ji8qi\\n\" +\n+                \"vA1kRTeBfAWC0OgBwbHu1zIKUukMd+pF\/D\/vKKovJ6I\/sPiGXmUw2i4lYOUB0wWn\\n\" +\n+                \"QUyBLez1UMWKchyvpW0FYxMbv7j5zMcAH7d++vCWo3OEGfe4Uet6Q3\/Dx83HAiEA\\n\" +\n+                \"mjtJp7XNrsgxbRDqETkHhv6zYH8Voo+gDgSO1m7XcH0CggEBAI5moswp++plZSBP\\n\" +\n+                \"Q9DdCNHt0AV13Toj1jf5M5DNmTX6P6\/D\/oRfi8Ui1fiCKFv+7lD0J2anCFUaLtu+\\n\" +\n+                \"j7v78gp5OChDp\/n49K6DtKtZZRDmw\/Bpm6LNdknmdN5kO5wVzbIXHTCCeNs\/CJTF\\n\" +\n+                \"mSU5PvEaI4y3M5NraSgLPkq4gEv7\/A8orGbKmj1Whj3F9t1Tosxdm\/+WkPldMz2t\\n\" +\n+                \"gev+9RM2S6S9XoembRgwRaFVkpQmKoKpOoZcdqV47FLDq5BYH\/5POeJ9wLuAHjxQ\\n\" +\n+                \"5CMKo4p\/lW7BCd4kuGWFT+OFFXfG2v6EtlqFbXBiFWLxyMsOtkUqWARCqEHhyucl\\n\" +\n+                \"TSYlj60EIgIgLfA75+8KcKxdN8mr6gzGjQe7jPFGG42Ejhd7Q2F4wuw=\"),\n+\n+        EE_DSA_1024(\n+                \"DSA\",\n+                \/\/ dsaWithSHA1, 1024 bits\n+                \/\/ Validity\n+                \/\/     Not Before: Apr 24 12:25:43 2020 GMT\n+                \/\/     Not After : Apr 22 12:25:43 2030 GMT\n+                \/\/ Authority Key Identifier:\n+                \/\/     E1:3C:01:52:EB:D1:38:F7:CF:F1:E3:5E:DB:54:75:7F:5E:AB:2D:36\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIDADCCAr+gAwIBAgIUd2XJ5F2VTbk9a92w\/NzLXR5zjUQwCQYHKoZIzjgEAzAu\\n\" +\n+                \"MQswCQYDVQQGEwJVUzENMAsGA1UECgwESmF2YTEQMA4GA1UECwwHU3VuSlNTRTAe\\n\" +\n+                \"Fw0yMDA0MjQxMjI1NDNaFw0zMDA0MjIxMjI1NDNaMEgxCzAJBgNVBAYTAlVTMQ0w\\n\" +\n+                \"CwYDVQQKDARKYXZhMRAwDgYDVQQLDAdTdW5KU1NFMRgwFgYDVQQDDA9SZWdyZXNz\\n\" +\n+                \"aW9uIFRlc3QwggG3MIIBLAYHKoZIzjgEATCCAR8CgYEA7fSkxYISlMJT+i8N5VOb\\n\" +\n+                \"lHhjrPYAy3oR2\/YXQW6T0hCMhm8jmxgk1bDId9ZKHrxsM05EkCtRYaqag4ZZeGde\\n\" +\n+                \"ywv3IwwYqCQfGtkPwT9QAsdSABYwGOrlhEtZtBG1yQ44c+Rz\/Vs+PtkAyZbf5VG1\\n\" +\n+                \"iSxFb9bI5QFJWJ9a2VpZh58CFQCCGALQoK4MsQP8V72WlB7Bvt9erwKBgQDCxu0G\\n\" +\n+                \"M2iZr0J8DaAo9\/ChS4m7E7h6Jz9KOm2cFhzYGekkUXNzny7nyz6Qpgbuf8KNFKjt\\n\" +\n+                \"qoUDC8tlcVQAUlTcESC0TZXR3h21hl9wzIBhE+kJ1j8v1KAxfOaJOxObk5QEvIaA\\n\" +\n+                \"5j+jiHGwRS5tDqywOatz+emwMZv1wKnCNBElNgOBhAACgYBHjuQKucCuuvy\/4DpG\\n\" +\n+                \"rSIzdueK+HrzOW8h2pfvz3lzpsyV6XJPC6we9CjaQjU01VcjwN2PoYtbGyml0pbK\\n\" +\n+                \"We4sdgn6LDL1aCM\/WKRSxGHVTx+wkhKQ719YtiC0T6sA+eLirc6VT3\/6+FbQWC+2\\n\" +\n+                \"bG7N19sGpV\/RAXMBpRXUnBJSQaNCMEAwHQYDVR0OBBYEFNNZxyxuQmKvWowofr\/S\\n\" +\n+                \"HdCIS+W8MB8GA1UdIwQYMBaAFOE8AVLr0Tj3z\/HjXttUdX9eqy02MAkGByqGSM44\\n\" +\n+                \"BAMDMAAwLQIUUzzMhZ9St\/Vo\/YdgNTHdTw4cm14CFQCE6tWG157Wl5YFyYsGHsLY\\n\" +\n+                \"NN8uCA==\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIIBSwIBADCCASwGByqGSM44BAEwggEfAoGBAO30pMWCEpTCU\/ovDeVTm5R4Y6z2\\n\" +\n+                \"AMt6Edv2F0Fuk9IQjIZvI5sYJNWwyHfWSh68bDNORJArUWGqmoOGWXhnXssL9yMM\\n\" +\n+                \"GKgkHxrZD8E\/UALHUgAWMBjq5YRLWbQRtckOOHPkc\/1bPj7ZAMmW3+VRtYksRW\/W\\n\" +\n+                \"yOUBSVifWtlaWYefAhUAghgC0KCuDLED\/Fe9lpQewb7fXq8CgYEAwsbtBjNoma9C\\n\" +\n+                \"fA2gKPfwoUuJuxO4eic\/SjptnBYc2BnpJFFzc58u58s+kKYG7n\/CjRSo7aqFAwvL\\n\" +\n+                \"ZXFUAFJU3BEgtE2V0d4dtYZfcMyAYRPpCdY\/L9SgMXzmiTsTm5OUBLyGgOY\/o4hx\\n\" +\n+                \"sEUubQ6ssDmrc\/npsDGb9cCpwjQRJTYEFgIUNRiLmNzfTYOuVsjkySPzP5gPImM=\"),\n+\n+        EE_ED25519(\n+                \"EdDSA\",\n+                \/\/ ED25519\n+                \/\/ Validity\n+                \/\/     Not Before: May 24 23:32:36 2020 GMT\n+                \/\/     Not After : May 22 23:32:36 2030 GMT\n+                \/\/ X509v3 Authority Key Identifier:\n+                \/\/     keyid:06:76:DB:88:EB:61:55:4C:C9:63:41:C2:A0:A8:57:3F:D7:F1:B8:EC\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIBlDCCAUagAwIBAgIUFTt\/jcgQ65nhTG8LkrWFJhhEGuwwBQYDK2VwMDsxCzAJ\\n\" +\n+                \"BgNVBAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3Qg\\n\" +\n+                \"U2VyaXZjZTAeFw0yMDA1MjQyMzMyMzZaFw0zMDA1MjIyMzMyMzZaMFUxCzAJBgNV\\n\" +\n+                \"BAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n+                \"aXZjZTEYMBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MCowBQYDK2VwAyEAGAYQmKb7\\n\" +\n+                \"WNYpVxIdsc49lI1emNjF06\/Jl85zlG0wc9OjQjBAMB0GA1UdDgQWBBQkJ2E4\/S8Z\\n\" +\n+                \"EIM1v9uTc0eYtYNk3zAfBgNVHSMEGDAWgBQGdtuI62FVTMljQcKgqFc\/1\/G47DAF\\n\" +\n+                \"BgMrZXADQQCVZnl\/AyIEtZ8r45e\/hcfxwuezgRX+7e9NHZFV1A\/TMGcBRORDfDUi\\n\" +\n+                \"bbh72K528fjT7P4\/WoXvm1zJKOAzUOUL\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MC4CAQAwBQYDK2VwBCIEIGBmdh4tfc0lng\/LWokhfFLlo0ZlmTn2lbI639qou2KP\"),\n+\n+        EE_ED448(\n+                \"EdDSA\",\n+                \/\/ ED448\n+                \/\/ Validity\n+                \/\/     Not Before: May 24 23:23:43 2020 GMT\n+                \/\/     Not After : May 22 23:23:43 2030 GMT\n+                \/\/ X509v3 Authority Key Identifier:\n+                \/\/     keyid:F5:D5:9D:FB:6F:B7:50:29:DF:F0:B8:83:10:5F:9B:C4:A8:1C:E9:F4\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIB3zCCAV+gAwIBAgIUNlWzFrH2+BILqM3SNYQjKoY98S8wBQYDK2VxMDsxCzAJ\\n\" +\n+                \"BgNVBAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3Qg\\n\" +\n+                \"U2VyaXZjZTAeFw0yMDA1MjQyMzIzNDNaFw0zMDA1MjIyMzIzNDNaMFUxCzAJBgNV\\n\" +\n+                \"BAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n+                \"aXZjZTEYMBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MEMwBQYDK2VxAzoAoIubPNAg\\n\" +\n+                \"F11u3MQ5d9wujg10+80I0xzYzTqzzXrfJNtw+eU8NbUk86xiCvlMzJRH0Oo3DbY8\\n\" +\n+                \"NAKAo0IwQDAdBgNVHQ4EFgQUUiI1+qT1x+HsDgfZRIU6hUaAbmUwHwYDVR0jBBgw\\n\" +\n+                \"FoAU9dWd+2+3UCnf8LiDEF+bxKgc6fQwBQYDK2VxA3MAx8P0mle08s5YDd\/p58dt\\n\" +\n+                \"yORqvDPwo5IYPasqN8Zeen1B9u1xF\/kvDGFxCJ6D9Gi4ynnDx0FZFMkA83evZcxJ\\n\" +\n+                \"+X+swt7FyHwXrdkZcvjRKEcsWhkj+0FlxYF\/NZzLTGuGIPYJnRLEwf\/zr+5NDxKs\\n\" +\n+                \"fCoA\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MEcCAQAwBQYDK2VxBDsEOfbhmUSuKP9WCO7Nr6JxVq5rfJESk1MNMyYhC134SiAP\\n\" +\n+                \"Suw0Cu7RZVadpfPR7Kiwb2b\/JXjMdY1HAA==\"),\n+\n+        EE_RSASSA_PSS(\n+                \"RSASSA-PSS\",\n+                \/\/ Signature Algorithm: rsassaPss\n+                \/\/ Hash Algorithm: sha256\n+                \/\/ Mask Algorithm: mgf1 with sha256\n+                \/\/\n+                \/\/ Validity\n+                \/\/      Not Before: Jun  6 07:11:00 2018 GMT\n+                \/\/      Not After : Jun  1 07:11:00 2038 GMT\n+                \/\/ X509v3 Authority Key Identifier:\n+                \/\/      1F:16:2B:79:8A:55:89:99:98:02:5F:84:18:D0:7B:1A:23:D8:88:0C\n+                \"-----BEGIN CERTIFICATE-----\\n\" +\n+                \"MIIDZjCCAh2gAwIBAgIUHxwPs3eAgJ057nJwiLgWZWeNqdgwPgYJKoZIhvcNAQEK\\n\" +\n+                \"MDGgDTALBglghkgBZQMEAgGhGjAYBgkqhkiG9w0BAQgwCwYJYIZIAWUDBAIBogQC\\n\" +\n+                \"AgDeMBQxEjAQBgNVBAMMCWxvY2FsaG9zdDAeFw0xODA2MDYwNzExMDBaFw0zODA2\\n\" +\n+                \"MDEwNzExMDBaMBQxEjAQBgNVBAMMCWxvY2FsaG9zdDCCASAwCwYJKoZIhvcNAQEK\\n\" +\n+                \"A4IBDwAwggEKAoIBAQCl8r4Qrg27BYUO\/1Va2Ix8QPGzN\/lvzmKvP5Ff26ovNW4v\\n\" +\n+                \"RUx68HzAhhiWtcl+PwLSbJqJreEkTlle7PnRAypby3fO7ZAK0Y3YiHquaBg7d+7Y\\n\" +\n+                \"FhhHwv8gG0lZcyA0BkXFJHqdq76qar0xHC6DVezXm0K3mcceymGtFR9BzWmAj+7D\\n\" +\n+                \"YsSwvtTQ7WNoQmf0cdDMSM71IwaTwIwvT2wzX1vv5hcdDyXdr64WFqWSA9sNJ2K6\\n\" +\n+                \"arxaaU1klwKSgDokF6njafWQ4UxdR67d5W1MYoiioDs2Yy3utsMpO2OUzZVBZNdT\\n\" +\n+                \"gkr1jsJhIurpz\/5K51lwJIRQBezEFSb+60AFVoMJAgMBAAGjUDBOMB0GA1UdDgQW\\n\" +\n+                \"BBQfFit5ilWJmZgCX4QY0HsaI9iIDDAfBgNVHSMEGDAWgBQfFit5ilWJmZgCX4QY\\n\" +\n+                \"0HsaI9iIDDAMBgNVHRMEBTADAQH\/MD4GCSqGSIb3DQEBCjAxoA0wCwYJYIZIAWUD\\n\" +\n+                \"BAIBoRowGAYJKoZIhvcNAQEIMAsGCWCGSAFlAwQCAaIEAgIA3gOCAQEAa4yUQ3gh\\n\" +\n+                \"d1YWPdEa1sv2hdkhtenw6m5yxbmaQl2+nIKSpk4RfpXC7K1EYwBF8TdfFbD8hGGh\\n\" +\n+                \"5n81BT0\/dn1R9SRGCv7KTxx4lfQt31frlsw\/tVciwyXQtcUZ6DqfnLP0\/aRVLNgx\\n\" +\n+                \"zaP542JUHFYLTC3EGz2zUgv70ZUTlIsPG3\/p8YO1iXdnYGQyzOuQPUBpI7nS7UtR\\n\" +\n+                \"Ug8VE9ACpBxxI3qChMahFZGHlXCCSjSmxpQa6UO4SQl8q5tPNnqdzWwvAW8qkCy4\\n\" +\n+                \"6barRQ4sMcGayhHh\/uSTx7bcl0FMJpcI1ygbw7\/Pc03zKtw0gMTBMns7q4yXjb\/u\\n\" +\n+                \"ef47nW0t+LRAAg==\\n\" +\n+                \"-----END CERTIFICATE-----\",\n+                \"MIIEuwIBADALBgkqhkiG9w0BAQoEggSnMIIEowIBAAKCAQEApfK+EK4NuwWFDv9V\\n\" +\n+                \"WtiMfEDxszf5b85irz+RX9uqLzVuL0VMevB8wIYYlrXJfj8C0myaia3hJE5ZXuz5\\n\" +\n+                \"0QMqW8t3zu2QCtGN2Ih6rmgYO3fu2BYYR8L\/IBtJWXMgNAZFxSR6nau+qmq9MRwu\\n\" +\n+                \"g1Xs15tCt5nHHsphrRUfQc1pgI\/uw2LEsL7U0O1jaEJn9HHQzEjO9SMGk8CML09s\\n\" +\n+                \"M19b7+YXHQ8l3a+uFhalkgPbDSdiumq8WmlNZJcCkoA6JBep42n1kOFMXUeu3eVt\\n\" +\n+                \"TGKIoqA7NmMt7rbDKTtjlM2VQWTXU4JK9Y7CYSLq6c\/+SudZcCSEUAXsxBUm\/utA\\n\" +\n+                \"BVaDCQIDAQABAoIBAAc4vRS0vlw5LUUtz2UYr2Ro3xvRf8Vh0eGWfpkRUiKjzJu6\\n\" +\n+                \"BE4FUSh\/rWpBlvcrfs\/xcfgz3OxbjIAZB\/YUkS9Vd21F4VLXM7kMl2onlYZg\/b\/h\\n\" +\n+                \"lkTpM3kONu7xl6Er9LVTlRJveuinpHwSoeONRbVMSGb9BjFM1VtW4\/lVGxZBG05D\\n\" +\n+                \"y9i\/o4vCZqULn9cAumOwicKuCyTcS58XcMJ+puSPfRA71PYLxqFkASAoJsUwCXpo\\n\" +\n+                \"gs39lLsIFgrfO8mBO1ux\/SE+QaRc+9XqFSHHKD1XqF\/9zSYBgWjE910EcpdYEdZx\\n\" +\n+                \"GEkwea7Fn4brO5OpIrHY\/45naqbUOBzv6gufMAECgYEAz7PHCdcrQvmOb8EiNbQH\\n\" +\n+                \"uvSimwObWJFeN1ykp6mfRbSnkXw7p8+M4Tc8HFi8QLpoq63Ev2AwoaQCQvHbFC2Y\\n\" +\n+                \"1Cz0EkC0aOp+tZP7U2AUBdkcDesZAJQTad0zV6KesyIUXdxZXDG8JJ1XSNWfTJV4\\n\" +\n+                \"QD+BjLZ0jiAyCIfVYvWQqYkCgYEAzIln1nKTixLMPr5CldSmR7ZarEtPJU+hHwVg\\n\" +\n+                \"dV\/Lc6d2Yy9JgunOXRo4BXB1TEo8JFbK3HBQH6tS8li4qDr7WK5wyYfh8qb4WZyu\\n\" +\n+                \"lc562f2WVYntcN8\/Ojb+Vyrt7lk9sq\/8KoVHxEAWd6mqL9VTPYuAu1Vw9fTGIZfB\\n\" +\n+                \"lDeELYECgYAvdzU4UXzofGGJtohb332YwwlaBZP9xJLUcg6K5l+orWVSASMc8XiP\\n\" +\n+                \"i3DoRXsYC8GZ4kdBOPlEJ1gA9oaLcPQpIPDSLwlLpLM6Scw4vI822uvnXl\/DWxOo\\n\" +\n+                \"sM1n7Jj59QLUhGPDhvYpI+\/rjC4wcUQe4qR3hMbUKBVnD6u7RsU9iQKBgQCQ17VK\\n\" +\n+                \"7bSCRfuRaxaoGADww7gOTv5rQ6qr1xjpxb7D1hFGR9Rc+smCsPB\/GZZXQjK44SWj\\n\" +\n+                \"WX3ED4Ubzaxmpe4cbNu+O5XMSmWQwB36RFBHUwdE5\/nXdqDFzu\/qNqJrqZLBmVKP\\n\" +\n+                \"ofaiiWffsaytVvotmT6+atElvAMbAua42V+nAQKBgHtIn3mYMHLriYGhQzpkFEA2\\n\" +\n+                \"8YcAMlKppueOMAKVy8nLu2r3MidmLAhMiKJQKG45I3Yg0\/t\/25tXLiOPJlwrOebh\\n\" +\n+                \"xQqUBI\/JUOIpGAEnr48jhOXnCS+i+z294G5U\/RgjXrlR4bCPvrtCmwzWwe0h79w2\\n\" +\n+                \"Q2hO5ZTW6UD9CVA85whf\");\n+\n+        final String keyAlgo;\n+        final String certStr;\n+        final String privKeyStr;\n+\n+        Cert(String keyAlgo, String certStr, String privKeyStr) {\n+            this.keyAlgo = keyAlgo;\n+            this.certStr = certStr;\n+            this.privKeyStr = privKeyStr;\n@@ -563,8 +952,0 @@\n-\n-        \/\/ Create an SSLContext object.\n-        TrustManagerFactory tmf =\n-                TrustManagerFactory.getInstance(params.tmAlgorithm);\n-        tmf.init(ts);\n-\n-        TrustManager[] tms = tmf.getTrustManagers();\n-        return tms[0];\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLContextTemplate.java","additions":851,"deletions":470,"binary":false,"changes":1321,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-public class SSLEngineTemplate implements SSLContextTemplate {\n+public class SSLEngineTemplate extends SSLContextTemplate {\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLEngineTemplate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,532 +0,0 @@\n-\/*\n- * Copyright (c) 2011, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/\n-\/\/ SunJSSE does not support dynamic system properties, no way to re-use\n-\/\/ system properties in samevm\/agentvm mode.\n-\/\/\n-\n-\/*\n- * @test\n- * @bug 7105780\n- * @summary Add SSLSocket client\/SSLEngine server to templates directory.\n- * @run main\/othervm SSLSocketSSLEngineTemplate TLSv1\n- * @run main\/othervm SSLSocketSSLEngineTemplate TLSv1.1\n- * @run main\/othervm SSLSocketSSLEngineTemplate TLSv1.2\n- * @run main\/othervm SSLSocketSSLEngineTemplate TLSv1.3\n- *\/\n-\n-\/**\n- * A SSLSocket\/SSLEngine interop test case.  This is not the way to\n- * code SSLEngine-based servers, but works for what we need to do here,\n- * which is to make sure that SSLEngine\/SSLSockets can talk to each other.\n- * SSLEngines can use direct or indirect buffers, and different code\n- * is used to get at the buffer contents internally, so we test that here.\n- *\n- * The test creates one SSLSocket (client) and one SSLEngine (server).\n- * The SSLSocket talks to a raw ServerSocket, and the server code\n- * does the translation between byte [] and ByteBuffers that the SSLEngine\n- * can use.  The \"transport\" layer consists of a Socket Input\/OutputStream\n- * and two byte buffers for the SSLEngines:  think of them\n- * as directly connected pipes.\n- *\n- * Again, this is a *very* simple example: real code will be much more\n- * involved.  For example, different threading and I\/O models could be\n- * used, transport mechanisms could close unexpectedly, and so on.\n- *\n- * When this application runs, notice that several messages\n- * (wrap\/unwrap) pass before any application data is consumed or\n- * produced.  (For more information, please see the SSL\/TLS\n- * specifications.)  There may several steps for a successful handshake,\n- * so it's typical to see the following series of operations:\n- *\n- *      client          server          message\n- *      ======          ======          =======\n- *      write()         ...             ClientHello\n- *      ...             unwrap()        ClientHello\n- *      ...             wrap()          ServerHello\/Certificate\n- *      read()          ...             ServerHello\/Certificate\n- *      write()         ...             ClientKeyExchange\n- *      write()         ...             ChangeCipherSpec\n- *      write()         ...             Finished\n- *      ...             unwrap()        ClientKeyExchange\n- *      ...             unwrap()        ChangeCipherSpec\n- *      ...             unwrap()        Finished\n- *      ...             wrap()          ChangeCipherSpec\n- *      ...             wrap()          Finished\n- *      read()          ...             ChangeCipherSpec\n- *      read()          ...             Finished\n- *\/\n-import javax.net.ssl.*;\n-import javax.net.ssl.SSLEngineResult.*;\n-import java.io.*;\n-import java.net.*;\n-import java.security.*;\n-import java.nio.*;\n-\n-public class SSLSocketSSLEngineTemplate {\n-\n-    \/*\n-     * Enables logging of the SSL\/TLS operations.\n-     *\/\n-    private static final boolean logging = true;\n-\n-    \/*\n-     * Enables the JSSE system debugging system property:\n-     *\n-     *     -Djavax.net.debug=all\n-     *\n-     * This gives a lot of low-level information about operations underway,\n-     * including specific handshake messages, and might be best examined\n-     * after gaining some familiarity with this application.\n-     *\/\n-    private static final boolean debug = false;\n-    private final SSLContext sslc;\n-    private SSLEngine serverEngine;     \/\/ server-side SSLEngine\n-    private SSLSocket clientSocket;\n-\n-    private final byte[] serverMsg =\n-        \"Hi there Client, I'm a Server.\".getBytes();\n-    private final byte[] clientMsg =\n-        \"Hello Server, I'm a Client! Pleased to meet you!\".getBytes();\n-\n-    private ByteBuffer serverOut;       \/\/ write side of serverEngine\n-    private ByteBuffer serverIn;        \/\/ read side of serverEngine\n-\n-    private volatile Exception clientException;\n-    private volatile Exception serverException;\n-\n-    \/*\n-     * For data transport, this example uses local ByteBuffers.\n-     *\/\n-    private ByteBuffer cTOs;            \/\/ \"reliable\" transport client->server\n-    private ByteBuffer sTOc;            \/\/ \"reliable\" transport server->client\n-\n-    \/*\n-     * The following is to set up the keystores\/trust material.\n-     *\/\n-    private static final String pathToStores = \"..\/etc\";\n-    private static final String keyStoreFile = \"keystore\";\n-    private static final String trustStoreFile = \"truststore\";\n-    private static final String keyFilename =\n-            System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores\n-            + \"\/\" + keyStoreFile;\n-    private static final String trustFilename =\n-            System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores\n-            + \"\/\" + trustStoreFile;\n-\n-    \/*\n-     * Main entry point for this test.\n-     *\/\n-    public static void main(String args[]) throws Exception {\n-        String protocol = args[0];\n-\n-        \/\/ reset security properties to make sure that the algorithms\n-        \/\/ and keys used in this test are not disabled.\n-        Security.setProperty(\"jdk.tls.disabledAlgorithms\", \"\");\n-        Security.setProperty(\"jdk.certpath.disabledAlgorithms\", \"\");\n-\n-        if (debug) {\n-            System.setProperty(\"javax.net.debug\", \"all\");\n-        }\n-\n-        \/*\n-         * Run the tests with direct and indirect buffers.\n-         *\/\n-        SSLSocketSSLEngineTemplate test =\n-            new SSLSocketSSLEngineTemplate(protocol);\n-        log(\"-------------------------------------\");\n-        log(\"Testing \" + protocol + \" for direct buffers ...\");\n-        test.runTest(true);\n-\n-        log(\"---------------------------------------\");\n-        log(\"Testing \" + protocol + \" for indirect buffers ...\");\n-        test.runTest(false);\n-\n-        log(\"Test Passed.\");\n-    }\n-\n-    \/*\n-     * Create an initialized SSLContext to use for these tests.\n-     *\/\n-    public SSLSocketSSLEngineTemplate(String protocol) throws Exception {\n-\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        KeyStore ts = KeyStore.getInstance(\"JKS\");\n-\n-        char[] passphrase = \"passphrase\".toCharArray();\n-\n-        try (FileInputStream keyFile = new FileInputStream(keyFilename);\n-                FileInputStream trustFile = new FileInputStream(trustFilename)) {\n-            ks.load(keyFile, passphrase);\n-            ts.load(trustFile, passphrase);\n-        }\n-\n-        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-        kmf.init(ks, passphrase);\n-\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n-        tmf.init(ts);\n-\n-        SSLContext sslCtx = SSLContext.getInstance(protocol);\n-\n-        sslCtx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-\n-        sslc = sslCtx;\n-    }\n-\n-    \/*\n-     * Run the test.\n-     *\n-     * Sit in a tight loop, with the server engine calling wrap\/unwrap\n-     * regardless of whether data is available or not.  We do this until\n-     * we get the application data.  Then we shutdown and go to the next one.\n-     *\n-     * The main loop handles all of the I\/O phases of the SSLEngine's\n-     * lifetime:\n-     *\n-     *     initial handshaking\n-     *     application data transfer\n-     *     engine closing\n-     *\n-     * One could easily separate these phases into separate\n-     * sections of code.\n-     *\/\n-    private void runTest(boolean direct) throws Exception {\n-        clientSocket = null;\n-        boolean serverClose = direct;\n-\n-        \/\/ generates the server-side Socket\n-        try (ServerSocket serverSocket = new ServerSocket()) {\n-            serverSocket.setReuseAddress(false);\n-            serverSocket.bind(null);\n-            int port = serverSocket.getLocalPort();\n-            log(\"Port: \" + port);\n-            Thread thread = createClientThread(port, serverClose);\n-\n-            createSSLEngine();\n-            createBuffers(direct);\n-\n-            \/\/ server-side socket that will read\n-            try (Socket socket = serverSocket.accept()) {\n-                socket.setSoTimeout(500);\n-\n-                boolean closed = false;\n-                \/\/ will try to read one more time in case client message\n-                \/\/ is fragmented to multiple pieces\n-                boolean retry = true;\n-\n-                InputStream is = socket.getInputStream();\n-                OutputStream os = socket.getOutputStream();\n-\n-                SSLEngineResult serverResult;   \/\/ results from last operation\n-\n-                \/*\n-                 * Examining the SSLEngineResults could be much more involved,\n-                 * and may alter the overall flow of the application.\n-                 *\n-                 * For example, if we received a BUFFER_OVERFLOW when trying\n-                 * to write to the output pipe, we could reallocate a larger\n-                 * pipe, but instead we wait for the peer to drain it.\n-                 *\/\n-                byte[] inbound = new byte[8192];\n-                byte[] outbound = new byte[8192];\n-\n-                while (!isEngineClosed(serverEngine)) {\n-                    int len;\n-\n-                    \/\/ Inbound data\n-                    log(\"================\");\n-\n-                    \/\/ Read from the Client side.\n-                    try {\n-                        len = is.read(inbound);\n-                        if (len == -1) {\n-                            logSocketStatus(clientSocket);\n-                            if (clientSocket.isClosed()\n-                                    || clientSocket.isOutputShutdown()) {\n-                                log(\"Client socket was closed or shutdown output\");\n-                                break;\n-                            } else {\n-                                throw new Exception(\"Unexpected EOF\");\n-                            }\n-                        }\n-                        cTOs.put(inbound, 0, len);\n-                    } catch (SocketTimeoutException ste) {\n-                        \/\/ swallow. Nothing yet, probably waiting on us.\n-                    }\n-\n-                    cTOs.flip();\n-\n-                    serverResult = serverEngine.unwrap(cTOs, serverIn);\n-                    log(\"server unwrap: \", serverResult);\n-                    runDelegatedTasks(serverResult, serverEngine);\n-                    cTOs.compact();\n-\n-                    \/\/ Outbound data\n-                    log(\"----\");\n-\n-                    serverResult = serverEngine.wrap(serverOut, sTOc);\n-                    log(\"server wrap: \", serverResult);\n-                    runDelegatedTasks(serverResult, serverEngine);\n-\n-                    sTOc.flip();\n-\n-                    if ((len = sTOc.remaining()) != 0) {\n-                        sTOc.get(outbound, 0, len);\n-                        os.write(outbound, 0, len);\n-                        \/\/ Give the other side a chance to process\n-                    }\n-\n-                    sTOc.compact();\n-\n-                    if (!closed && (serverOut.remaining() == 0)) {\n-                        closed = true;\n-\n-                        \/*\n-                         * We'll alternate initiatating the shutdown.\n-                         * When the server initiates, it will take one more\n-                         * loop, but tests the orderly shutdown.\n-                         *\/\n-                        if (serverClose) {\n-                            serverEngine.closeOutbound();\n-                        }\n-                        serverIn.flip();\n-\n-                        \/*\n-                         * A sanity check to ensure we got what was sent.\n-                         *\/\n-                        if (serverIn.remaining() !=  clientMsg.length) {\n-                            if (retry &&\n-                                    serverIn.remaining() < clientMsg.length) {\n-                                log(\"Need to read more from client\");\n-                                serverIn.compact();\n-                                retry = false;\n-                                continue;\n-                            } else {\n-                                throw new Exception(\n-                                        \"Client: Data length error\");\n-                            }\n-                        }\n-\n-                        for (int i = 0; i < clientMsg.length; i++) {\n-                            if (clientMsg[i] != serverIn.get()) {\n-                                throw new Exception(\n-                                        \"Client: Data content error\");\n-                            }\n-                        }\n-                        serverIn.compact();\n-                    }\n-                }\n-            } catch (Exception e) {\n-                serverException = e;\n-            } finally {\n-                \/\/ Wait for the client to join up with us.\n-                if (thread != null) {\n-                    thread.join();\n-                }\n-            }\n-        } finally {\n-            if (serverException != null) {\n-                if (clientException != null) {\n-                    serverException.addSuppressed(clientException);\n-                }\n-                throw serverException;\n-            }\n-            if (clientException != null) {\n-                if (serverException != null) {\n-                    clientException.addSuppressed(serverException);\n-                }\n-                throw clientException;\n-            }\n-        }\n-    }\n-\n-    \/*\n-     * Create a client thread which does simple SSLSocket operations.\n-     * We'll write and read one data packet.\n-     *\/\n-    private Thread createClientThread(final int port,\n-            final boolean serverClose) throws Exception {\n-\n-        Thread t = new Thread(\"ClientThread\") {\n-\n-            @Override\n-            public void run() {\n-                \/\/ client-side socket\n-                try (SSLSocket sslSocket = (SSLSocket)sslc.getSocketFactory().\n-                            createSocket(\"localhost\", port)) {\n-                    clientSocket = sslSocket;\n-\n-                    OutputStream os = sslSocket.getOutputStream();\n-                    InputStream is = sslSocket.getInputStream();\n-\n-                    \/\/ write(byte[]) goes in one shot.\n-                    os.write(clientMsg);\n-\n-                    byte[] inbound = new byte[2048];\n-                    int pos = 0;\n-\n-                    int len;\n-                    while ((len = is.read(inbound, pos, 2048 - pos)) != -1) {\n-                        pos += len;\n-                        \/\/ Let the client do the closing.\n-                        if ((pos == serverMsg.length) && !serverClose) {\n-                            sslSocket.close();\n-                            break;\n-                        }\n-                    }\n-\n-                    if (pos != serverMsg.length) {\n-                        throw new Exception(\"Client:  Data length error\");\n-                    }\n-\n-                    for (int i = 0; i < serverMsg.length; i++) {\n-                        if (inbound[i] != serverMsg[i]) {\n-                            throw new Exception(\"Client:  Data content error\");\n-                        }\n-                    }\n-                } catch (Exception e) {\n-                    clientException = e;\n-                }\n-            }\n-        };\n-        t.start();\n-        return t;\n-    }\n-\n-    \/*\n-     * Using the SSLContext created during object creation,\n-     * create\/configure the SSLEngines we'll use for this test.\n-     *\/\n-    private void createSSLEngine() throws Exception {\n-        \/*\n-         * Configure the serverEngine to act as a server in the SSL\/TLS\n-         * handshake.\n-         *\/\n-        serverEngine = sslc.createSSLEngine();\n-        serverEngine.setUseClientMode(false);\n-        serverEngine.getNeedClientAuth();\n-    }\n-\n-    \/*\n-     * Create and size the buffers appropriately.\n-     *\/\n-    private void createBuffers(boolean direct) {\n-\n-        SSLSession session = serverEngine.getSession();\n-        int appBufferMax = session.getApplicationBufferSize();\n-        int netBufferMax = session.getPacketBufferSize();\n-\n-        \/*\n-         * We'll make the input buffers a bit bigger than the max needed\n-         * size, so that unwrap()s following a successful data transfer\n-         * won't generate BUFFER_OVERFLOWS.\n-         *\n-         * We'll use a mix of direct and indirect ByteBuffers for\n-         * tutorial purposes only.  In reality, only use direct\n-         * ByteBuffers when they give a clear performance enhancement.\n-         *\/\n-        if (direct) {\n-            serverIn = ByteBuffer.allocateDirect(appBufferMax + 50);\n-            cTOs = ByteBuffer.allocateDirect(netBufferMax);\n-            sTOc = ByteBuffer.allocateDirect(netBufferMax);\n-        } else {\n-            serverIn = ByteBuffer.allocate(appBufferMax + 50);\n-            cTOs = ByteBuffer.allocate(netBufferMax);\n-            sTOc = ByteBuffer.allocate(netBufferMax);\n-        }\n-\n-        serverOut = ByteBuffer.wrap(serverMsg);\n-    }\n-\n-    \/*\n-     * If the result indicates that we have outstanding tasks to do,\n-     * go ahead and run them in this thread.\n-     *\/\n-    private static void runDelegatedTasks(SSLEngineResult result,\n-            SSLEngine engine) throws Exception {\n-\n-        if (result.getHandshakeStatus() == HandshakeStatus.NEED_TASK) {\n-            Runnable runnable;\n-            while ((runnable = engine.getDelegatedTask()) != null) {\n-                log(\"\\trunning delegated task...\");\n-                runnable.run();\n-            }\n-            HandshakeStatus hsStatus = engine.getHandshakeStatus();\n-            if (hsStatus == HandshakeStatus.NEED_TASK) {\n-                throw new Exception(\n-                        \"handshake shouldn't need additional tasks\");\n-            }\n-            log(\"\\tnew HandshakeStatus: \" + hsStatus);\n-        }\n-    }\n-\n-    private static boolean isEngineClosed(SSLEngine engine) {\n-        return (engine.isOutboundDone() && engine.isInboundDone());\n-    }\n-\n-    private static void logSocketStatus(Socket socket) {\n-        log(\"##### \" + socket + \" #####\");\n-        log(\"isBound: \" + socket.isBound());\n-        log(\"isConnected: \" + socket.isConnected());\n-        log(\"isClosed: \" + socket.isClosed());\n-        log(\"isInputShutdown: \" + socket.isInputShutdown());\n-        log(\"isOutputShutdown: \" + socket.isOutputShutdown());\n-    }\n-\n-    \/*\n-     * Logging code\n-     *\/\n-    private static boolean resultOnce = true;\n-\n-    private static void log(String str, SSLEngineResult result) {\n-        if (!logging) {\n-            return;\n-        }\n-        if (resultOnce) {\n-            resultOnce = false;\n-            log(\"The format of the SSLEngineResult is: \\n\"\n-                    + \"\\t\\\"getStatus() \/ getHandshakeStatus()\\\" +\\n\"\n-                    + \"\\t\\\"bytesConsumed() \/ bytesProduced()\\\"\\n\");\n-        }\n-        HandshakeStatus hsStatus = result.getHandshakeStatus();\n-        log(str\n-                + result.getStatus() + \"\/\" + hsStatus + \", \"\n-                + result.bytesConsumed() + \"\/\" + result.bytesProduced()\n-                + \" bytes\");\n-        if (hsStatus == HandshakeStatus.FINISHED) {\n-            log(\"\\t...ready for application data\");\n-        }\n-    }\n-\n-    private static void log(String str) {\n-        if (logging) {\n-            if (debug) {\n-                System.err.println(str);\n-            } else {\n-                System.out.println(str);\n-            }\n-        }\n-    }\n-}\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLSocketSSLEngineTemplate.java","additions":0,"deletions":532,"binary":false,"changes":532,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import java.io.ByteArrayInputStream;\n@@ -41,1 +40,0 @@\n-import javax.net.ssl.KeyManagerFactory;\n@@ -47,1 +45,0 @@\n-import javax.net.ssl.TrustManagerFactory;\n@@ -51,7 +48,0 @@\n-import java.security.KeyStore;\n-import java.security.PrivateKey;\n-import java.security.KeyFactory;\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.PKCS8EncodedKeySpec;\n-import java.util.Base64;\n@@ -69,1 +59,1 @@\n-public class SSLSocketTemplate {\n+public class SSLSocketTemplate extends SSLContextTemplate {\n@@ -131,47 +121,0 @@\n-    \/*\n-     * Create an instance of SSLContext for client use.\n-     *\/\n-    protected SSLContext createClientSSLContext() throws Exception {\n-        return createSSLContext(TRUSTED_CERTS, END_ENTITY_CERTS,\n-                getClientContextParameters());\n-    }\n-\n-    \/*\n-     * Create an instance of SSLContext for server use.\n-     *\/\n-    protected SSLContext createServerSSLContext() throws Exception {\n-        return createSSLContext(TRUSTED_CERTS, END_ENTITY_CERTS,\n-                getServerContextParameters());\n-    }\n-\n-    \/*\n-     * The parameters used to configure SSLContext.\n-     *\/\n-    protected static final class ContextParameters {\n-        final String contextProtocol;\n-        final String tmAlgorithm;\n-        final String kmAlgorithm;\n-\n-        ContextParameters(String contextProtocol,\n-                String tmAlgorithm, String kmAlgorithm) {\n-\n-            this.contextProtocol = contextProtocol;\n-            this.tmAlgorithm = tmAlgorithm;\n-            this.kmAlgorithm = kmAlgorithm;\n-        }\n-    }\n-\n-    \/*\n-     * Get the client side parameters of SSLContext.\n-     *\/\n-    protected ContextParameters getClientContextParameters() {\n-        return new ContextParameters(\"TLS\", \"PKIX\", \"NewSunX509\");\n-    }\n-\n-    \/*\n-     * Get the server side parameters of SSLContext.\n-     *\/\n-    protected ContextParameters getServerContextParameters() {\n-        return new ContextParameters(\"TLS\", \"PKIX\", \"NewSunX509\");\n-    }\n-\n@@ -363,108 +306,0 @@\n-    \/*\n-     * =============================================\n-     * Stuffs to customize the SSLContext instances.\n-     *\/\n-\n-    \/*\n-     * =======================================\n-     * Certificates and keys used in the test.\n-     *\/\n-    \/\/ Trusted certificates.\n-    protected final static Cert[] TRUSTED_CERTS = {\n-            Cert.CA_ECDSA_SECP256R1,\n-            Cert.CA_RSA_2048,\n-            Cert.CA_DSA_2048 };\n-\n-    \/\/ End entity certificate.\n-    protected final static Cert[] END_ENTITY_CERTS = {\n-            Cert.EE_ECDSA_SECP256R1,\n-            Cert.EE_RSA_2048,\n-            Cert.EE_EC_RSA_SECP256R1,\n-            Cert.EE_DSA_2048 };\n-\n-    \/*\n-     * Create an instance of SSLContext with the specified trust\/key materials.\n-     *\/\n-    public static SSLContext createSSLContext(\n-            Cert[] trustedCerts,\n-            Cert[] endEntityCerts,\n-            ContextParameters params) throws Exception {\n-\n-        KeyStore ts = null;     \/\/ trust store\n-        KeyStore ks = null;     \/\/ key store\n-        char passphrase[] = \"passphrase\".toCharArray();\n-\n-        \/\/ Generate certificate from cert string.\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        \/\/ Import the trused certs.\n-        ByteArrayInputStream is;\n-        if (trustedCerts != null && trustedCerts.length != 0) {\n-            ts = KeyStore.getInstance(\"JKS\");\n-            ts.load(null, null);\n-\n-            Certificate[] trustedCert = new Certificate[trustedCerts.length];\n-            for (int i = 0; i < trustedCerts.length; i++) {\n-                is = new ByteArrayInputStream(trustedCerts[i].certStr.getBytes());\n-                try {\n-                    trustedCert[i] = cf.generateCertificate(is);\n-                } finally {\n-                    is.close();\n-                }\n-\n-                ts.setCertificateEntry(\n-                        \"trusted-cert-\" + trustedCerts[i].name(), trustedCert[i]);\n-            }\n-        }\n-\n-        \/\/ Import the key materials.\n-        if (endEntityCerts != null && endEntityCerts.length != 0) {\n-            ks = KeyStore.getInstance(\"JKS\");\n-            ks.load(null, null);\n-\n-            for (int i = 0; i < endEntityCerts.length; i++) {\n-                \/\/ generate the private key.\n-                PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                    Base64.getMimeDecoder().decode(endEntityCerts[i].privKeyStr));\n-                KeyFactory kf =\n-                    KeyFactory.getInstance(\n-                            endEntityCerts[i].keyAlgo);\n-                PrivateKey priKey = kf.generatePrivate(priKeySpec);\n-\n-                \/\/ generate certificate chain\n-                is = new ByteArrayInputStream(\n-                        endEntityCerts[i].certStr.getBytes());\n-                Certificate keyCert = null;\n-                try {\n-                    keyCert = cf.generateCertificate(is);\n-                } finally {\n-                    is.close();\n-                }\n-\n-                Certificate[] chain = new Certificate[] { keyCert };\n-\n-                \/\/ import the key entry.\n-                ks.setKeyEntry(\"cert-\" + endEntityCerts[i].name(),\n-                        priKey, passphrase, chain);\n-            }\n-        }\n-\n-        \/\/ Create an SSLContext object.\n-        TrustManagerFactory tmf =\n-                TrustManagerFactory.getInstance(params.tmAlgorithm);\n-        tmf.init(ts);\n-\n-        SSLContext context = SSLContext.getInstance(params.contextProtocol);\n-        if (endEntityCerts != null && endEntityCerts.length != 0 && ks != null) {\n-            KeyManagerFactory kmf =\n-                    KeyManagerFactory.getInstance(params.kmAlgorithm);\n-            kmf.init(ks, passphrase);\n-\n-            context.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        } else {\n-            context.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return context;\n-    }\n-\n@@ -600,1 +435,1 @@\n-    private void startClient(boolean newThread) throws Exception {\n+    private void startClient(boolean newThread) {\n@@ -632,569 +467,0 @@\n-    public static enum Cert {\n-\n-        CA_ECDSA_SECP256R1(\n-                \"EC\",\n-                \/\/ SHA256withECDSA, curve secp256r1\n-                \/\/ Validity\n-                \/\/     Not Before: May 22 07:18:16 2018 GMT\n-                \/\/     Not After : May 17 07:18:16 2038 GMT\n-                \/\/ Subject Key Identifier:\n-                \/\/     60:CF:BD:73:FF:FA:1A:30:D2:A4:EC:D3:49:71:46:EF:1A:35:A0:86\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIIBvjCCAWOgAwIBAgIJAIvFG6GbTroCMAoGCCqGSM49BAMCMDsxCzAJBgNVBAYT\\n\" +\n-                \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-                \"ZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMDsxCzAJBgNVBAYTAlVT\\n\" +\n-                \"MQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZjZTBZ\\n\" +\n-                \"MBMGByqGSM49AgEGCCqGSM49AwEHA0IABBz1WeVb6gM2mh85z3QlvaB\/l11b5h0v\\n\" +\n-                \"LIzmkC3DKlVukZT+ltH2Eq1oEkpXuf7QmbM0ibrUgtjsWH3mULfmcWmjUDBOMB0G\\n\" +\n-                \"A1UdDgQWBBRgz71z\/\/oaMNKk7NNJcUbvGjWghjAfBgNVHSMEGDAWgBRgz71z\/\/oa\\n\" +\n-                \"MNKk7NNJcUbvGjWghjAMBgNVHRMEBTADAQH\/MAoGCCqGSM49BAMCA0kAMEYCIQCG\\n\" +\n-                \"6wluh1r2\/T6L31mZXRKf9JxeSf9pIzoLj+8xQeUChQIhAJ09wAi1kV8yePLh2FD9\\n\" +\n-                \"2YEHlSQUAbwwqCDEVB5KxaqP\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQg\/HcHdoLJCdq3haVd\\n\" +\n-                \"XZTSKP00YzM3xX97l98vGL\/RI1KhRANCAAQc9VnlW+oDNpofOc90Jb2gf5ddW+Yd\\n\" +\n-                \"LyyM5pAtwypVbpGU\/pbR9hKtaBJKV7n+0JmzNIm61ILY7Fh95lC35nFp\"),\n-\n-        CA_ECDSA_SECP384R1(\n-                \"EC\",\n-                \/\/ SHA384withECDSA, curve secp384r1\n-                \/\/ Validity\n-                \/\/     Not Before: Jun 24 08:15:06 2019 GMT\n-                \/\/     Not After : Jun 19 08:15:06 2039 GMT\n-                \/\/ Subject Key Identifier:\n-                \/\/     0a:93:a9:a0:bf:e7:d5:48:9d:4f:89:15:c6:51:98:80:05:51:4e:4e\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIICCDCCAY6gAwIBAgIUCpOpoL\/n1UidT4kVxlGYgAVRTk4wCgYIKoZIzj0EAwMw\\n\" +\n-                \"OzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n-                \"VGVzdCBTZXJpdmNlMB4XDTE5MDYyNDA4MTUwNloXDTM5MDYxOTA4MTUwNlowOzEL\\n\" +\n-                \"MAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVz\\n\" +\n-                \"dCBTZXJpdmNlMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENVQN1wXWFdgC6u\/dDdiC\\n\" +\n-                \"y+WtMTF66oL\/0BSm+1ZqsogamzCryawOcHgiuXgWzx5CQ3LuOC+tDFyXpGfHuCvb\\n\" +\n-                \"dkzxPrP5n9NrR8\/uRPe5l1KOUbchviU8z9cTP+LZxnZDo1MwUTAdBgNVHQ4EFgQU\\n\" +\n-                \"SktSFArR1p\/5mXV0kyo0RxIVa\/UwHwYDVR0jBBgwFoAUSktSFArR1p\/5mXV0kyo0\\n\" +\n-                \"RxIVa\/UwDwYDVR0TAQH\/BAUwAwEB\/zAKBggqhkjOPQQDAwNoADBlAjBZvoNmq3\/v\\n\" +\n-                \"RD2gBTyvxjS9h0rsMRLHDnvul\/KWngytwGPTOBo0Y8ixQXSjdKoc3rkCMQDkiNgx\\n\" +\n-                \"IDxuHedmrLQKIPnVcthTmwv7\/\/jHiqGoKofwChMo2a1P+DQdhszmeHD\/ARQ=\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDChlbt0NF8oIKODSxn2\\n\" +\n-                \"WXCXuJm3z78LRkzYQS3Nx5NMjei5ytkFZz4qvD4XXMWlTEyhZANiAAQ1VA3XBdYV\\n\" +\n-                \"2ALq790N2ILL5a0xMXrqgv\/QFKb7VmqyiBqbMKvJrA5weCK5eBbPHkJDcu44L60M\\n\" +\n-                \"XJekZ8e4K9t2TPE+s\/mf02tHz+5E97mXUo5RtyG+JTzP1xM\/4tnGdkM=\"),\n-\n-        CA_ECDSA_SECP521R1(\n-                \"EC\",\n-                \/\/ SHA512withECDSA, curve secp521r1\n-                \/\/ Validity\n-                \/\/     Not Before: Jun 24 08:15:06 2019 GMT\n-                \/\/     Not After : Jun 19 08:15:06 2039 GMT\n-                \/\/ Subject Key Identifier:\n-                \/\/     25:ca:68:76:6d:29:17:9b:71:78:45:2d:d4:c6:e4:5d:fe:25:ff:90\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIICUzCCAbSgAwIBAgIUJcpodm0pF5txeEUt1MbkXf4l\/5AwCgYIKoZIzj0EAwQw\\n\" +\n-                \"OzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n-                \"VGVzdCBTZXJpdmNlMB4XDTE5MDYyNDA4MTUwNloXDTM5MDYxOTA4MTUwNlowOzEL\\n\" +\n-                \"MAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVz\\n\" +\n-                \"dCBTZXJpdmNlMIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQAmFD5VmB2MdyJ6k+E\\n\" +\n-                \"eP4JncrE65ySL07gVmFwnr8otOt3NtRAyzmviMNNXXjo5R5NqNjKP4pr92JjT0sO\\n\" +\n-                \"D65yngkBtH151Ev\/fiKPLxkXL9GzfKdWHVhDX7Zg6DUydzukzZV2\/dIyloAIqwlz\\n\" +\n-                \"QVKJqT7RypDufdng8hnE9YfKo6ypZiujUzBRMB0GA1UdDgQWBBRAIrxa7WqtqUCe\\n\" +\n-                \"HFuKREDC92spvTAfBgNVHSMEGDAWgBRAIrxa7WqtqUCeHFuKREDC92spvTAPBgNV\\n\" +\n-                \"HRMBAf8EBTADAQH\/MAoGCCqGSM49BAMEA4GMADCBiAJCAe22iirZnODCmlpxcv57\\n\" +\n-                \"3g5BEE60C+dtYmTqR4DtFyDaTRQ5CFf4ZxvQPIbD+SXi5Cbrl6qtrZG0cjUihPkC\\n\" +\n-                \"Hi1hAkIAiEcO7nMPgQLny+GrciojfN+bZXME\/dPz6KHBm\/89f8Me+jawVnv6y+df\\n\" +\n-                \"2Sbafh1KV6ntWQtB4bK3MXV8Ym9Eg1I=\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIHuAgEAMBAGByqGSM49AgEGBSuBBAAjBIHWMIHTAgEBBEIAV8dZszV6+nLw3LeA\\n\" +\n-                \"Q+qLJLGaqyjlsQkaopCPcmoRdy1HX6AzB\/YnKsPkHp\/9DQN6A2JgUhFG5B0XvKSk\\n\" +\n-                \"BqNNuSGhgYkDgYYABACYUPlWYHYx3InqT4R4\/gmdysTrnJIvTuBWYXCevyi063c2\\n\" +\n-                \"1EDLOa+Iw01deOjlHk2o2Mo\/imv3YmNPSw4PrnKeCQG0fXnUS\/9+Io8vGRcv0bN8\\n\" +\n-                \"p1YdWENftmDoNTJ3O6TNlXb90jKWgAirCXNBUompPtHKkO592eDyGcT1h8qjrKlm\\n\" +\n-                \"Kw==\"),\n-\n-        CA_RSA_2048(\n-                \"RSA\",\n-                \/\/ SHA256withRSA, 2048 bits\n-                \/\/ Validity\n-                \/\/     Not Before: May 22 07:18:16 2018 GMT\n-                \/\/     Not After : May 17 07:18:16 2038 GMT\n-                \/\/ Subject Key Identifier:\n-                \/\/     0D:DD:93:C9:FE:4B:BD:35:B7:E8:99:78:90:FB:DB:5A:3D:DB:15:4C\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIIDSTCCAjGgAwIBAgIJAI4ZF3iy8zG+MA0GCSqGSIb3DQEBCwUAMDsxCzAJBgNV\\n\" +\n-                \"BAYTAlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n-                \"aXZjZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMDsxCzAJBgNVBAYT\\n\" +\n-                \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-                \"ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALpMcY7aWieXDEM1\/YJf\\n\" +\n-                \"JW27b4nRIFZyEYhEloyGsKTuQiiQjc8cqRZFNXe2vwziDB4IyTEl0Hjl5QF6ZaQE\\n\" +\n-                \"huPzzwvQm1pv64KrRXrmj3FisQK8B5OWLty9xp6xDqsaMRoyObLK+oIb20T5fSlE\\n\" +\n-                \"evmo1vYjnh8CX0Yzx5Gr5ye6YSEHQvYOWEws8ad17OlyToR2KMeC8w4qo6rs59pW\\n\" +\n-                \"g7Mxn9vo22ImDzrtAbTbXbCias3xlE0Bp0h5luyf+5U4UgksoL9B9r2oP4GrLNEV\\n\" +\n-                \"oJk57t8lwaR0upiv3CnS8LcJELpegZub5ggqLY8ZPYFQPjlK6IzLOm6rXPgZiZ3m\\n\" +\n-                \"RL0CAwEAAaNQME4wHQYDVR0OBBYEFA3dk8n+S701t+iZeJD721o92xVMMB8GA1Ud\\n\" +\n-                \"IwQYMBaAFA3dk8n+S701t+iZeJD721o92xVMMAwGA1UdEwQFMAMBAf8wDQYJKoZI\\n\" +\n-                \"hvcNAQELBQADggEBAJTRC3rKUUhVH07\/1+stUungSYgpM08dY4utJq0BDk36BbmO\\n\" +\n-                \"0AnLDMbkwFdHEoqF6hQIfpm7SQTmXk0Fss6Eejm8ynYr6+EXiRAsaXOGOBCzF918\\n\" +\n-                \"\/RuKOzqABfgSU4UBKECLM5bMfQTL60qx+HdbdVIpnikHZOFfmjCDVxoHsGyXc1LW\\n\" +\n-                \"Jhkht8IGOgc4PMGvyzTtRFjz01kvrVQZ75aN2E0GQv6dCxaEY0i3ypSzjUWAKqDh\\n\" +\n-                \"3e2OLwUSvumcdaxyCdZAOUsN6pDBQ+8VRG7KxnlRlY1SMEk46QgQYLbPDe\/+W\/yH\\n\" +\n-                \"ca4PejicPeh+9xRAwoTpiE2gulfT7Lm+fVM7Ruc=\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC6THGO2lonlwxD\\n\" +\n-                \"Nf2CXyVtu2+J0SBWchGIRJaMhrCk7kIokI3PHKkWRTV3tr8M4gweCMkxJdB45eUB\\n\" +\n-                \"emWkBIbj888L0Jtab+uCq0V65o9xYrECvAeTli7cvcaesQ6rGjEaMjmyyvqCG9tE\\n\" +\n-                \"+X0pRHr5qNb2I54fAl9GM8eRq+cnumEhB0L2DlhMLPGndezpck6EdijHgvMOKqOq\\n\" +\n-                \"7OfaVoOzMZ\/b6NtiJg867QG0212womrN8ZRNAadIeZbsn\/uVOFIJLKC\/Qfa9qD+B\\n\" +\n-                \"qyzRFaCZOe7fJcGkdLqYr9wp0vC3CRC6XoGbm+YIKi2PGT2BUD45SuiMyzpuq1z4\\n\" +\n-                \"GYmd5kS9AgMBAAECggEAFHSoU2MuWwJ+2jJnb5U66t2V1bAcuOE1g5zkWvG\/G5z9\\n\" +\n-                \"rq6Qo5kmB8f5ovdx6tw3MGUOklLwnRXBG3RxDJ1iokz3AvkY1clMNsDPlDsUrQKF\\n\" +\n-                \"JSO4QUBQTPSZhnsyfR8XHSU+qJ8Y+ohMfzpVv95BEoCzebtXdVgxVegBlcEmVHo2\\n\" +\n-                \"kMmkRN+bYNsr8eb2r+b0EpyumS39ZgKYh09+cFb78y3T6IFMGcVJTP6nlGBFkmA\/\\n\" +\n-                \"25pYeCF2tSki08qtMJZQAvKfw0Kviibk7ZxRbJqmc7B1yfnOEHP6ftjuvKl2+RP\/\\n\" +\n-                \"+5P5f8CfIP6gtA0LwSzAqQX\/hfIKrGV5j0pCqrD0kQKBgQDeNR6Xi4sXVq79lihO\\n\" +\n-                \"a1bSeV7r8yoQrS8x951uO+ox+UIZ1MsAULadl7zB\/P0er92p198I9M\/0Jth3KBuS\\n\" +\n-                \"zj45mucvpiiGvmQlMKMEfNq4nN7WHOu55kufPswQB2mR4J3xmwI+4fM\/nl1zc82h\\n\" +\n-                \"De8JSazRldJXNhfx0RGFPmgzbwKBgQDWoVXrXLbCAn41oVnWB8vwY9wjt92ztDqJ\\n\" +\n-                \"HMFA\/SUohjePep9UDq6ooHyAf\/Lz6oE5NgeVpPfTDkgvrCFVKnaWdwALbYoKXT2W\\n\" +\n-                \"9FlyJox6eQzrtHAacj3HJooXWuXlphKSizntfxj3LtMR9BmrmRJOfK+SxNOVJzW2\\n\" +\n-                \"+MowT20EkwKBgHmpB8jdZBgxI7o\/\/m2BI5Y1UZ1KE5vx1kc7VXzHXSBjYqeV9FeF\\n\" +\n-                \"2ZZLP9POWh\/1Fh4pzTmwIDODGT2UPhSQy0zq3O0fwkyT7WzXRknsuiwd53u\/dejg\\n\" +\n-                \"iEL2NPAJvulZ2+AuiHo5Z99LK8tMeidV46xoJDDUIMgTG+UQHNGhK5gNAoGAZn\/S\\n\" +\n-                \"Cn7SgMC0CWSvBHnguULXZO9wH1wZAFYNLL44OqwuaIUFBh2k578M9kkke7woTmwx\\n\" +\n-                \"HxQTjmWpr6qimIuY6q6WBN8hJ2Xz\/d1fwhYKzIp20zHuv5KDUlJjbFfqpsuy3u1C\\n\" +\n-                \"kts5zwI7pr1ObRbDGVyOdKcu7HI3QtR5qqyjwaUCgYABo7Wq6oHva\/9V34+G3Goh\\n\" +\n-                \"63bYGUnRw2l5BD11yhQv8XzGGZFqZVincD8gltNThB0Dc\/BI+qu3ky4YdgdZJZ7K\\n\" +\n-                \"z51GQGtaHEbrHS5caV79yQ8QGY5mUVH3E+VXSxuIqb6pZq2DH4sTAEFHyncddmOH\\n\" +\n-                \"zoXBInYwRG9KE\/Bw5elhUw==\"),\n-\n-        CA_DSA_2048(\n-                \"DSA\",\n-                \/\/ SHA256withDSA, 2048 bits\n-                \/\/ Validity\n-                \/\/     Not Before: May 22 07:18:18 2018 GMT\n-                \/\/     Not After : May 17 07:18:18 2038 GMT\n-                \/\/ Subject Key Identifier:\n-                \/\/     76:66:9E:F7:3B:DD:45:E5:3B:D9:72:3C:3F:F0:54:39:86:31:26:53\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIIErjCCBFSgAwIBAgIJAOktYLNCbr02MAsGCWCGSAFlAwQDAjA7MQswCQYDVQQG\\n\" +\n-                \"EwJVUzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n-                \"Y2UwHhcNMTgwNTIyMDcxODE4WhcNMzgwNTE3MDcxODE4WjA7MQswCQYDVQQGEwJV\\n\" +\n-                \"UzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2Y2Uw\\n\" +\n-                \"ggNHMIICOQYHKoZIzjgEATCCAiwCggEBAO5GyPhSm0ze3LSu+gicdULLj05iOfTL\\n\" +\n-                \"UvZQ29sYz41zmqrLBQbdKiHqgJu2Re9sgTb5suLNjF047TOLPnU3jhPtWm2X8Xzi\\n\" +\n-                \"VGIcHym\/Q\/MeZxStt\/88seqroI3WOKzIML2GcrishT+lcGrtH36Tf1+ue2Snn3PS\\n\" +\n-                \"WyxygNqPjllP5uUjYmFLvAf4QLMldkd\/D2VxcwsHjB8y5iUZsXezc\/LEhRZS\/02m\\n\" +\n-                \"ivqlRw3AMkq\/OVe\/ZtxFWsP0nsfxEGdZuaUFpppGfixxFvymrB3+J51cTt+pZBDq\\n\" +\n-                \"D2y0DYfc+88iCs4jwHTfcDIpLb538HBjBj2rEgtQESQmB0ooD\/+wsPsCIQC1bYch\\n\" +\n-                \"gElNtDYL3FgpLgNSUYp7gIWv9ehaC7LO2z7biQKCAQBitvFOnDkUja8NAF7lDpOV\\n\" +\n-                \"b5ipQ8SicBLW3kQamxhyuyxgZyy\/PojZ\/oPorkqW\/T\/A0rhnG6MssEpAtdiwVB+c\\n\" +\n-                \"rBYGo3bcwmExJhdOJ6dYuKFppPWhCwKMHs9npK+lqBMl8l5j58xlcFeC7ZfGf8GY\\n\" +\n-                \"GkhFW0c44vEQhMMbac6ZTTP4mw+1t7xJfmDMlLEyIpTXaAAk8uoVLWzQWnR40sHi\\n\" +\n-                \"ybvS0u3JxQkb7\/y8tOOZu8qlz\/YOS7lQ6UxUGX27Ce1E0+agfPphetoRAlS1cezq\\n\" +\n-                \"Wa7r64Ga0nkj1kwkcRqjgTiJx0NwnUXr78VAXFhVF95+O3lfqhvdtEGtkhDGPg7N\\n\" +\n-                \"A4IBBgACggEBAMmSHQK0w2i+iqUjOPzn0yNEZrzepLlLeQ1tqtn0xnlv5vBAeefD\\n\" +\n-                \"Pm9dd3tZOjufVWP7hhEz8xPobb1CS4e3vuQiv5UBfhdPL3f3l9T7JMAKPH6C9Vve\\n\" +\n-                \"OQXE5eGqbjsySbcmseHoYUt1WCSnSda1opX8zchX04e7DhGfE2\/L9flpYEoSt8lI\\n\" +\n-                \"vMNjgOwvKdW3yvPt1\/eBBHYNFG5gWPv\/Q5KoyCtHS03uqGm4rNc\/wZTIEEfd66C+\\n\" +\n-                \"QRaUltjOaHmtwOdDHaNqwhYZSVOip+Mo+TfyzHFREcdHLapo7ZXqbdYkRGxRR3d+\\n\" +\n-                \"3DfHaraJO0OKoYlPkr3JMvM\/MSGR9AnZOcejUDBOMB0GA1UdDgQWBBR2Zp73O91F\\n\" +\n-                \"5TvZcjw\/8FQ5hjEmUzAfBgNVHSMEGDAWgBR2Zp73O91F5TvZcjw\/8FQ5hjEmUzAM\\n\" +\n-                \"BgNVHRMEBTADAQH\/MAsGCWCGSAFlAwQDAgNHADBEAiBzriYE41M2y9Hy5ppkL0Qn\\n\" +\n-                \"dIlNc8JhXT\/PHW7GDtViagIgMko8Qoj9gDGPK3+O9E8DC3wGiiF9CObM4LN387ok\\n\" +\n-                \"J+g=\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIICZQIBADCCAjkGByqGSM44BAEwggIsAoIBAQDuRsj4UptM3ty0rvoInHVCy49O\" +\n-                \"Yjn0y1L2UNvbGM+Nc5qqywUG3Soh6oCbtkXvbIE2+bLizYxdOO0ziz51N44T7Vpt\" +\n-                \"l\/F84lRiHB8pv0PzHmcUrbf\/PLHqq6CN1jisyDC9hnK4rIU\/pXBq7R9+k39frntk\" +\n-                \"p59z0lsscoDaj45ZT+blI2JhS7wH+ECzJXZHfw9lcXMLB4wfMuYlGbF3s3PyxIUW\" +\n-                \"Uv9Npor6pUcNwDJKvzlXv2bcRVrD9J7H8RBnWbmlBaaaRn4scRb8pqwd\/iedXE7f\" +\n-                \"qWQQ6g9stA2H3PvPIgrOI8B033AyKS2+d\/BwYwY9qxILUBEkJgdKKA\/\/sLD7AiEA\" +\n-                \"tW2HIYBJTbQ2C9xYKS4DUlGKe4CFr\/XoWguyzts+24kCggEAYrbxTpw5FI2vDQBe\" +\n-                \"5Q6TlW+YqUPEonAS1t5EGpsYcrssYGcsvz6I2f6D6K5Klv0\/wNK4ZxujLLBKQLXY\" +\n-                \"sFQfnKwWBqN23MJhMSYXTienWLihaaT1oQsCjB7PZ6SvpagTJfJeY+fMZXBXgu2X\" +\n-                \"xn\/BmBpIRVtHOOLxEITDG2nOmU0z+JsPtbe8SX5gzJSxMiKU12gAJPLqFS1s0Fp0\" +\n-                \"eNLB4sm70tLtycUJG+\/8vLTjmbvKpc\/2Dku5UOlMVBl9uwntRNPmoHz6YXraEQJU\" +\n-                \"tXHs6lmu6+uBmtJ5I9ZMJHEao4E4icdDcJ1F6+\/FQFxYVRfefjt5X6ob3bRBrZIQ\" +\n-                \"xj4OzQQjAiEAsceWOM8do4etxp2zgnoNXV8PUUyqWhz1+0srcKV7FR4=\"),\n-\n-        CA_DSA_1024(\n-                \"DSA\",\n-                \/\/ dsaWithSHA1, 1024 bits\n-                \/\/ Validity\n-                \/\/     Not Before: Apr 24 12:25:43 2020 GMT\n-                \/\/     Not After : Apr 22 12:25:43 2030 GMT\n-                \/\/ Authority Key Identifier:\n-                \/\/     E1:3C:01:52:EB:D1:38:F7:CF:F1:E3:5E:DB:54:75:7F:5E:AB:2D:36\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIIC9TCCArWgAwIBAgIUd52yKk0OxQuxdaYRAfq5VLuF1ZAwCQYHKoZIzjgEAzAu\\n\" +\n-                \"MQswCQYDVQQGEwJVUzENMAsGA1UECgwESmF2YTEQMA4GA1UECwwHU3VuSlNTRTAe\\n\" +\n-                \"Fw0yMDA0MjQxMjI1NDJaFw0zMDA0MjIxMjI1NDJaMC4xCzAJBgNVBAYTAlVTMQ0w\\n\" +\n-                \"CwYDVQQKDARKYXZhMRAwDgYDVQQLDAdTdW5KU1NFMIIBtjCCASsGByqGSM44BAEw\\n\" +\n-                \"ggEeAoGBAKgyb2XpANq43T8yBf5v0PTBOddLPxd0f0FotASron5rQr86JjBTfgIW\\n\" +\n-                \"oE4u7nYlO6bp\/M4Dw6qZr+HaDu9taIDOj6LL51eUShVsOgS7XZcUzLT8vPnkEDDo\\n\" +\n-                \"u326x0B7fuNCbMLm+ipM2d4FhLUTt4Qb5TcY6l7dOGHeWiL7nl43AhUAoGr8DY2m\\n\" +\n-                \"WHZPHk2XbZ5wpaM2lLcCgYBKiFbFFViH\/ylHJRPtYtjtJw4ls1scbVP4TRHnKoZc\\n\" +\n-                \"HPAird1fDYgGC2b0GQNAMABhI+L+ogxS7qakySpJCheuN25AjiSyilygQdlXoWRt\\n\" +\n-                \"Mggsh8EQZT7iP4V4e9m3xRHzb5ECvsSTdZB1BQMcC90W2Avq+orqgBnr2in9UEd8\\n\" +\n-                \"qwOBhAACgYAgVWxjYWlWIv7s4BnNMQoPKppi205f3aC6wv6Rqk4BnYYYrFONEmzQ\\n\" +\n-                \"hzj6lSXfxLpTu4lg2zNeIraZggoS0ztkbZNNADEmAHx+OLshiJJxu2\/KfoopJOZg\\n\" +\n-                \"8ARmuaKOkWbkW9y4hWhfBlVwZbckG3Eibff0xronIXXy7B7UKaccyqNTMFEwHQYD\\n\" +\n-                \"VR0OBBYEFOE8AVLr0Tj3z\/HjXttUdX9eqy02MB8GA1UdIwQYMBaAFOE8AVLr0Tj3\\n\" +\n-                \"z\/HjXttUdX9eqy02MA8GA1UdEwEB\/wQFMAMBAf8wCQYHKoZIzjgEAwMvADAsAhRC\\n\" +\n-                \"YLduLniBEJ51SfBWIkvNW6OG7QIUSKaTY6rgEFDEMoTqOjFChR22nkk=\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIIBSgIBADCCASsGByqGSM44BAEwggEeAoGBAKgyb2XpANq43T8yBf5v0PTBOddL\\n\" +\n-                \"Pxd0f0FotASron5rQr86JjBTfgIWoE4u7nYlO6bp\/M4Dw6qZr+HaDu9taIDOj6LL\\n\" +\n-                \"51eUShVsOgS7XZcUzLT8vPnkEDDou326x0B7fuNCbMLm+ipM2d4FhLUTt4Qb5TcY\\n\" +\n-                \"6l7dOGHeWiL7nl43AhUAoGr8DY2mWHZPHk2XbZ5wpaM2lLcCgYBKiFbFFViH\/ylH\\n\" +\n-                \"JRPtYtjtJw4ls1scbVP4TRHnKoZcHPAird1fDYgGC2b0GQNAMABhI+L+ogxS7qak\\n\" +\n-                \"ySpJCheuN25AjiSyilygQdlXoWRtMggsh8EQZT7iP4V4e9m3xRHzb5ECvsSTdZB1\\n\" +\n-                \"BQMcC90W2Avq+orqgBnr2in9UEd8qwQWAhQ7rSn+WvIxeuZ\/CK4p04eMe5JzpA==\"),\n-\n-        CA_ED25519(\n-                \"EdDSA\",\n-                \/\/ ED25519\n-                \/\/ Validity\n-                \/\/     Not Before: May 24 23:32:35 2020 GMT\n-                \/\/     Not After : May 22 23:32:35 2030 GMT\n-                \/\/ X509v3 Authority Key Identifier:\n-                \/\/     keyid:06:76:DB:88:EB:61:55:4C:C9:63:41:C2:A0:A8:57:3F:D7:F1:B8:EC\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIIByTCCAXugAwIBAgIUCyxKvhErehsygx50JYArsHby9hAwBQYDK2VwMDsxCzAJ\\n\" +\n-                \"BgNVBAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3Qg\\n\" +\n-                \"U2VyaXZjZTAeFw0yMDA1MjQyMzMyMzVaFw0zMDA1MjIyMzMyMzVaMDsxCzAJBgNV\\n\" +\n-                \"BAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n-                \"aXZjZTAqMAUGAytlcAMhAKdotuYIkH8PYbopSLbaf1BtqUY2d6AbTgK2prMzQ6B3\\n\" +\n-                \"o4GQMIGNMA8GA1UdEwEB\/wQFMAMBAf8wHQYDVR0OBBYEFAZ224jrYVVMyWNBwqCo\\n\" +\n-                \"Vz\/X8bjsMB8GA1UdIwQYMBaAFAZ224jrYVVMyWNBwqCoVz\/X8bjsMA4GA1UdDwEB\\n\" +\n-                \"\/wQEAwIBhjAqBgNVHSUBAf8EIDAeBggrBgEFBQcDAwYIKwYBBQUHAwgGCCsGAQUF\\n\" +\n-                \"BwMJMAUGAytlcANBADVAArvME8xFigFhCCCOTBoy\/4ldGkDZQ\/GT3Q6xnAP558FU\\n\" +\n-                \"0G32OprKQZP43D9bmFU0LMgCVM9bHWU+bu\/10AU=\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MC4CAQAwBQYDK2VwBCIEII\/VYp8nu\/eqq2L5y7\/3IzavBgis4LWP6Rikv0N8SpgL\"),\n-\n-        CA_ED448(\n-                \"EdDSA\",\n-                \/\/ ED448\n-                \/\/ Validity\n-                \/\/     Not Before: May 24 23:23:43 2020 GMT\n-                \/\/     Not After : May 22 23:23:43 2030 GMT\n-                \/\/ X509v3 Authority Key Identifier:\n-                \/\/     keyid:F5:D5:9D:FB:6F:B7:50:29:DF:F0:B8:83:10:5F:9B:C4:A8:1C:E9:F4\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIICFDCCAZSgAwIBAgIUKcmLeKilq0LN40sniBJO7F1gb\/owBQYDK2VxMDsxCzAJ\\n\" +\n-                \"BgNVBAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3Qg\\n\" +\n-                \"U2VyaXZjZTAeFw0yMDA1MjQyMzIzNDNaFw0zMDA1MjIyMzIzNDNaMDsxCzAJBgNV\\n\" +\n-                \"BAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n-                \"aXZjZTBDMAUGAytlcQM6APYP8iSXS8xPVDike5RgCByfTtg4GGtpYfoBtt6G5szA\\n\" +\n-                \"55ExAKjm03wtk29nEPU2mCHF2QgfBzUrgKOBkDCBjTAPBgNVHRMBAf8EBTADAQH\/\\n\" +\n-                \"MB0GA1UdDgQWBBT11Z37b7dQKd\/wuIMQX5vEqBzp9DAfBgNVHSMEGDAWgBT11Z37\\n\" +\n-                \"b7dQKd\/wuIMQX5vEqBzp9DAOBgNVHQ8BAf8EBAMCAYYwKgYDVR0lAQH\/BCAwHgYI\\n\" +\n-                \"KwYBBQUHAwMGCCsGAQUFBwMIBggrBgEFBQcDCTAFBgMrZXEDcwAlRXA2gPb52yV3\\n\" +\n-                \"MKJErjmKlYSFExj5w5jafbbd0QgI1yDs+qSaZLjQ8ljwabmLDg+KR+167m0djQDI\\n\" +\n-                \"OOoVuL7bgM0RL836KnuuBzm+gTdPp0gCXy3k9lL0KA0V2YLJHXXzu3suu+7rdgoP\\n\" +\n-                \"plCh2hWdLgA=\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MEcCAQAwBQYDK2VxBDsEOd6\/hRZqkUyTlJSwdN5gO\/HnoWYda1fD83YUm5j6m2Bg\\n\" +\n-                \"hAQi+QadFsQLD7R6PI\/4Q0twXqlKnxU5Ug==\"),\n-\n-        EE_ECDSA_SECP256R1(\n-                \"EC\",\n-                \/\/ SHA256withECDSA, curve secp256r1\n-                \/\/ Validity\n-                \/\/     Not Before: May 22 07:18:16 2018 GMT\n-                \/\/     Not After : May 17 07:18:16 2038 GMT\n-                \/\/ Authority Key Identifier:\n-                \/\/     60:CF:BD:73:FF:FA:1A:30:D2:A4:EC:D3:49:71:46:EF:1A:35:A0:86\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIIBqjCCAVCgAwIBAgIJAPLY8qZjgNRAMAoGCCqGSM49BAMCMDsxCzAJBgNVBAYT\\n\" +\n-                \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-                \"ZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMFUxCzAJBgNVBAYTAlVT\\n\" +\n-                \"MQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZjZTEY\\n\" +\n-                \"MBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD\\n\" +\n-                \"QgAEb+9n05qfXnfHUb0xtQJNS4JeSi6IjOfW5NqchvKnfJey9VkJzR7QHLuOESdf\\n\" +\n-                \"xlR7q8YIWgih3iWLGfB+wxHiOqMjMCEwHwYDVR0jBBgwFoAUYM+9c\/\/6GjDSpOzT\\n\" +\n-                \"SXFG7xo1oIYwCgYIKoZIzj0EAwIDSAAwRQIgWpRegWXMheiD3qFdd8kMdrkLxRbq\\n\" +\n-                \"1zj8nQMEwFTUjjQCIQDRIrAjZX+YXHN9b0SoWWLPUq0HmiFIi8RwMnO\/\/wJIGQ==\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgn5K03bpTLjEtFQRa\\n\" +\n-                \"JUtx22gtmGEvvSUSQdimhGthdtihRANCAARv72fTmp9ed8dRvTG1Ak1Lgl5KLoiM\\n\" +\n-                \"59bk2pyG8qd8l7L1WQnNHtAcu44RJ1\/GVHurxghaCKHeJYsZ8H7DEeI6\"),\n-\n-        EE_ECDSA_SECP384R1(\n-                \"EC\",\n-                \/\/ SHA384withECDSA, curve secp384r1\n-                \/\/ Validity\n-                \/\/     Not Before: Jun 24 08:15:06 2019 GMT\n-                \/\/     Not After : Jun 19 08:15:06 2039 GMT\n-                \/\/ Authority Key Identifier:\n-                \/\/     40:2D:AA:EE:66:AA:33:27:AD:9B:5D:52:9B:60:67:6A:2B:AD:52:D2\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIICEjCCAZegAwIBAgIUS3F0AqAXWRg07CnbknJzxofyBQMwCgYIKoZIzj0EAwMw\\n\" +\n-                \"OzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n-                \"VGVzdCBTZXJpdmNlMB4XDTE5MDYyNDA4MTUwNloXDTM5MDYxOTA4MTUwNlowVTEL\\n\" +\n-                \"MAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVz\\n\" +\n-                \"dCBTZXJpdmNlMRgwFgYDVQQDDA9SZWdyZXNzaW9uIFRlc3QwdjAQBgcqhkjOPQIB\\n\" +\n-                \"BgUrgQQAIgNiAARqElz8b6T07eyKomIinhztV3\/3XBk9bKGtJ0W+JOltjuhMmP\/w\\n\" +\n-                \"G8ASSevpgqgpi6EzpBZaaJxE3zNfkNnxXOZmQi2Ypd1uK0zRdbEOKg0XOcTTZwEj\\n\" +\n-                \"iLjYmt3O0pwpklijQjBAMB0GA1UdDgQWBBRALaruZqozJ62bXVKbYGdqK61S0jAf\\n\" +\n-                \"BgNVHSMEGDAWgBRKS1IUCtHWn\/mZdXSTKjRHEhVr9TAKBggqhkjOPQQDAwNpADBm\\n\" +\n-                \"AjEArVDFKf48xijN6huVUJzKCOP0zlWB5Js+DItIkZmLQuhciPLhLIB\/rChf3Y4C\\n\" +\n-                \"xuP4AjEAmfLhQRI0O3pifpYzYSVh2G7\/jHNG4eO+2dvgAcU+Lh2IIj\/cpLaPFSvL\\n\" +\n-                \"J8FXY9Nj\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDASuI9EtK29APXPipkc\\n\" +\n-                \"qDA+qwlewMjv\/OcjUJ77kP1Vz62oVF9iY9SRIyFIUju8wt+hZANiAARqElz8b6T0\\n\" +\n-                \"7eyKomIinhztV3\/3XBk9bKGtJ0W+JOltjuhMmP\/wG8ASSevpgqgpi6EzpBZaaJxE\\n\" +\n-                \"3zNfkNnxXOZmQi2Ypd1uK0zRdbEOKg0XOcTTZwEjiLjYmt3O0pwpklg=\"),\n-\n-        EE_ECDSA_SECP521R1(\n-                \"EC\",\n-                \/\/ SHA512withECDSA, curve secp521r1\n-                \/\/ Validity\n-                \/\/     Not Before: Jun 24 08:15:06 2019 GMT\n-                \/\/     Not After : Jun 19 08:15:06 2039 GMT\n-                \/\/ Authority Key Identifier:\n-                \/\/     7B:AA:79:A4:49:DD:59:34:F0:86:6C:51:C7:30:F4:CE:C5:81:8A:28\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIICXDCCAb2gAwIBAgIUck4QTsbHNqUfPxfGPJLYbedFPdswCgYIKoZIzj0EAwQw\\n\" +\n-                \"OzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n-                \"VGVzdCBTZXJpdmNlMB4XDTE5MDYyNDA4MTUwNloXDTM5MDYxOTA4MTUwNlowVTEL\\n\" +\n-                \"MAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVz\\n\" +\n-                \"dCBTZXJpdmNlMRgwFgYDVQQDDA9SZWdyZXNzaW9uIFRlc3QwgZswEAYHKoZIzj0C\\n\" +\n-                \"AQYFK4EEACMDgYYABAGa2zDLhYQHHCLI3YBqFYJTzrnDIjzwXrxhcRTS8DYkcrjZ\\n\" +\n-                \"+Fih1YyNhix0sdjH+3EqElXAHHuVzn3n3hPOtQCWlQCICkErB34S0cvmtRkeW8Fi\\n\" +\n-                \"hrR5tvJEzEZjPSgwn81kKyhV2L70je6i7Cw884Va8bODckpgw0vTmbQb7T9dupkv\\n\" +\n-                \"1aNCMEAwHQYDVR0OBBYEFHuqeaRJ3Vk08IZsUccw9M7FgYooMB8GA1UdIwQYMBaA\\n\" +\n-                \"FEAivFrtaq2pQJ4cW4pEQML3aym9MAoGCCqGSM49BAMEA4GMADCBiAJCAb33KHdY\\n\" +\n-                \"WDbusORWoY8Euglpd5zsF15hJsk7wtpD5HST1\/NWmdCx405w+TV6a9Gr4VPHeaIQ\\n\" +\n-                \"99i\/+f237ALL5p6IAkIBbwwFL1vt3c\/bx+niyuffQPNjly80rdC9puqAqriSiboS\\n\" +\n-                \"efhxjidJ9HLaIRCMEPyd6vAsC8mO8YvL1uCuEQLsiGM=\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIHuAgEAMBAGByqGSM49AgEGBSuBBAAjBIHWMIHTAgEBBEIB8C\/2OX2Dt9vFszzV\\n\" +\n-                \"hcAe0CbkMlvu9uQ\/L7Vz88heuIj0rUZIPGshvgIJt1hCMT8HZxYHvDa4lbUvqjFB\\n\" +\n-                \"+zafvPWhgYkDgYYABAGa2zDLhYQHHCLI3YBqFYJTzrnDIjzwXrxhcRTS8DYkcrjZ\\n\" +\n-                \"+Fih1YyNhix0sdjH+3EqElXAHHuVzn3n3hPOtQCWlQCICkErB34S0cvmtRkeW8Fi\\n\" +\n-                \"hrR5tvJEzEZjPSgwn81kKyhV2L70je6i7Cw884Va8bODckpgw0vTmbQb7T9dupkv\\n\" +\n-                \"1Q==\"),\n-\n-        EE_RSA_2048(\n-                \"RSA\",\n-                \/\/ SHA256withRSA, 2048 bits\n-                \/\/ Validity\n-                \/\/     Not Before: May 22 07:18:16 2018 GMT\n-                \/\/     Not After : May 17 07:18:16 2038 GMT\n-                \/\/ Authority Key Identifier:\n-                \/\/     0D:DD:93:C9:FE:4B:BD:35:B7:E8:99:78:90:FB:DB:5A:3D:DB:15:4C\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIIDNjCCAh6gAwIBAgIJAO2+yPcFryUTMA0GCSqGSIb3DQEBCwUAMDsxCzAJBgNV\\n\" +\n-                \"BAYTAlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n-                \"aXZjZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMFUxCzAJBgNVBAYT\\n\" +\n-                \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-                \"ZTEYMBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MIIBIjANBgkqhkiG9w0BAQEFAAOC\\n\" +\n-                \"AQ8AMIIBCgKCAQEAszfBobWfZIp8AgC6PiWDDavP65mSvgCXUGxACbxVNAfkLhNR\\n\" +\n-                \"QOsHriRB3X1Q3nvO9PetC6wKlvE9jlnDDj7D+1j1r1CHO7ms1fq8rfcQYdkanDtu\\n\" +\n-                \"4AlHo8v+SSWX16MIXFRYDj2VVHmyPtgbltcg4zGAuwT746FdLI94uXjJjq1IOr\/v\\n\" +\n-                \"0VIlwE5ORWH5Xc+5Tj+oFWK0E4a4GHDgtKKhn2m72hN56\/GkPKGkguP5NRS1qYYV\\n\" +\n-                \"\/EFkdyQMOV8J1M7HaicSft4OL6eKjTrgo93+kHk+tv0Dc6cpVBnalX3TorG8QI6B\\n\" +\n-                \"cHj1XQd78oAlAC+\/jF4pc0mwi0un49kdK9gRfQIDAQABoyMwITAfBgNVHSMEGDAW\\n\" +\n-                \"gBQN3ZPJ\/ku9NbfomXiQ+9taPdsVTDANBgkqhkiG9w0BAQsFAAOCAQEApXS0nKwm\\n\" +\n-                \"Kp8gpmO2yG1rpd1+2wBABiMU4JZaTqmma24DQ3RzyS+V2TeRb29dl5oTUEm98uc0\\n\" +\n-                \"GPZvhK8z5RFr4YE17dc04nI\/VaNDCw4y1NALXGs+AHkjoPjLyGbWpi1S+gfq2sNB\\n\" +\n-                \"Ekkjp6COb\/cb9yiFXOGVls7UOIjnVZVd0r7KaPFjZhYh82\/f4PA\/A1SnIKd1+nfH\\n\" +\n-                \"2yk7mSJNC7Z3qIVDL8MM\/jBVwiC3uNe5GPB2uwhd7k5LGAVN3j4HQQGB0Sz+VC1h\\n\" +\n-                \"92oi6xDa+YBva2fvHuCd8P50DDjxmp9CemC7rnZ5j8egj88w14X44Xjb\/Fd\/ApG9\\n\" +\n-                \"e57NnbT7KM+Grw==\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCzN8GhtZ9kinwC\\n\" +\n-                \"ALo+JYMNq8\/rmZK+AJdQbEAJvFU0B+QuE1FA6weuJEHdfVDee870960LrAqW8T2O\\n\" +\n-                \"WcMOPsP7WPWvUIc7uazV+ryt9xBh2RqcO27gCUejy\/5JJZfXowhcVFgOPZVUebI+\\n\" +\n-                \"2BuW1yDjMYC7BPvjoV0sj3i5eMmOrUg6v+\/RUiXATk5FYfldz7lOP6gVYrQThrgY\\n\" +\n-                \"cOC0oqGfabvaE3nr8aQ8oaSC4\/k1FLWphhX8QWR3JAw5XwnUzsdqJxJ+3g4vp4qN\\n\" +\n-                \"OuCj3f6QeT62\/QNzpylUGdqVfdOisbxAjoFwePVdB3vygCUAL7+MXilzSbCLS6fj\\n\" +\n-                \"2R0r2BF9AgMBAAECggEASIkPkMCuw4WdTT44IwERus3IOIYOs2IP3BgEDyyvm4B6\\n\" +\n-                \"JP\/iihDWKfA4zEl1Gqcni1RXMHswSglXra682J4kui02Ov+vzEeJIY37Ibn2YnP5\\n\" +\n-                \"ZjRT2s9GtI\/S2o4hl8A\/mQb2IMViFC+xKehTukhV4j5d6NPKk0XzLR7gcMjnYxwn\\n\" +\n-                \"l21fS6D2oM1xRG\/di7sL+uLF8EXLRzfiWDNi12uQv4nwtxPKvuKhH6yzHt7YqMH0\\n\" +\n-                \"46pmDKDaxV4w1JdycjCb6NrCJOYZygoQobuZqOQ30UZoZsPJrtovkncFr1e+lNcO\\n\" +\n-                \"+aWDfOLCtTH046dEQh5oCShyXMybNlry\/QHsOtHOwQKBgQDh2iIjs+FPpQy7Z3EX\\n\" +\n-                \"DGEvHYqPjrYO9an2KSRr1m9gzRlWYxKY46WmPKwjMerYtra0GP+TBHrgxsfO8tD2\\n\" +\n-                \"wUAII6sd1qup0a\/Sutgf2JxVilLykd0+Ge4\/Cs51tCdJ8EqDV2B6WhTewOY2EGvg\\n\" +\n-                \"JiKYkeNwgRX\/9M9CFSAMAk0hUQKBgQDLJAartL3DoGUPjYtpJnfgGM23yAGl6G5r\\n\" +\n-                \"NSXDn80BiYIC1p0bG3N0xm3yAjqOtJAUj9jZbvDNbCe3GJfLARMr23legX4tRrgZ\\n\" +\n-                \"nEdKnAFKAKL01oM+A5\/lHdkwaZI9yyv+hgSVdYzUjB8rDmzeVQzo1BT7vXypt2yV\\n\" +\n-                \"6O1OnUpCbQKBgA\/0rzDChopv6KRcvHqaX0tK1P0rYeVQqb9ATNhpf9jg5Idb3HZ8\\n\" +\n-                \"rrk91BNwdVz2G5ZBpdynFl9G69rNAMJOCM4KZw5mmh4XOEq09Ivba8AHU7DbaTv3\\n\" +\n-                \"7QL7KnbaUWRB26HHzIMYVh0el6T+KADf8NXCiMTr+bfpfbL3dxoiF3zhAoGAbCJD\\n\" +\n-                \"Qse1dBs\/cKYCHfkSOsI5T6kx52Tw0jS6Y4X\/FOBjyqr\/elyEexbdk8PH9Ar931Qr\\n\" +\n-                \"NKMvn8oA4iA\/PRrXX7M2yi3YQrWwbkGYWYjtzrzEAdzmg+5eARKAeJrZ8\/bg9l3U\\n\" +\n-                \"ttKaItJsDPlizn8rngy3FsJpR9aSAMK6\/+wOiYkCgYEA1tZkI1rD1W9NYZtbI9BE\\n\" +\n-                \"qlJVFi2PBOJMKNuWdouPX3HLQ72GJSQff2BFzLTELjweVVJ0SvY4IipzpQOHQOBy\\n\" +\n-                \"5qh\/p6izXJZh3IHtvwVBjHoEVplg1b2+I5e3jDCfqnwcQw82dW5SxOJMg1h\/BD0I\\n\" +\n-                \"qAL3go42DYeYhu\/WnECMeis=\"),\n-\n-        EE_EC_RSA_SECP256R1(\n-                \"EC\",\n-                \/\/ SHA256withRSA, curve secp256r1\n-                \/\/ Validity\n-                \/\/     Not Before: May 22 07:18:16 2018 GMT\n-                \/\/     Not After : May 21 07:18:16 2028 GMT\n-                \/\/ Authority Key Identifier:\n-                \/\/     0D:DD:93:C9:FE:4B:BD:35:B7:E8:99:78:90:FB:DB:5A:3D:DB:15:4C\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIICazCCAVOgAwIBAgIJAO2+yPcFryUUMA0GCSqGSIb3DQEBCwUAMDsxCzAJBgNV\\n\" +\n-                \"BAYTAlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n-                \"aXZjZTAeFw0xODA1MjIwNzE4MTZaFw0yODA1MjEwNzE4MTZaMFUxCzAJBgNVBAYT\\n\" +\n-                \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-                \"ZTEYMBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MFkwEwYHKoZIzj0CAQYIKoZIzj0D\\n\" +\n-                \"AQcDQgAE59MERNTlVZ1eeps8Z3Oue5ZkgQdPtD+WIE6tj3PbIKpxGPDxvfNP959A\\n\" +\n-                \"yQjEK\/ehWQVrCMmNoEkIzY+IIBgB06MjMCEwHwYDVR0jBBgwFoAUDd2Tyf5LvTW3\\n\" +\n-                \"6Jl4kPvbWj3bFUwwDQYJKoZIhvcNAQELBQADggEBAFOTVEqs70ykhZiIdrEsF1Ra\\n\" +\n-                \"I3B2rLvwXZk52uSltk2\/bzVvewA577ZCoxQ1pL7ynkisPfBN1uVYtHjM1VA3RC+4\\n\" +\n-                \"+TAK78dnI7otYjWoHp5rvs4l6c\/IbOspS290IlNuDUxMErEm5wxIwj+Aukx\/1y68\\n\" +\n-                \"hOyCvHBLMY2c1LskH1MMBbDuS1aI+lnGpToi+MoYObxGcV458vxuT8+wwV8Fkpvd\\n\" +\n-                \"ll8IIFmeNPRv+1E+lXbES6CSNCVaZ\/lFhPgdgYKleN7sfspiz50DG4dqafuEAaX5\\n\" +\n-                \"xaK1NWXJxTRz0ROH\/IUziyuDW6jphrlgit4+3NCzp6vP9hAJQ8Vhcj0n15BKHIQ=\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgGVc7hICpmp91jbYe\\n\" +\n-                \"nrr8nYHD37RZP3VENY+szuA7WjuhRANCAATn0wRE1OVVnV56mzxnc657lmSBB0+0\\n\" +\n-                \"P5YgTq2Pc9sgqnEY8PG980\/3n0DJCMQr96FZBWsIyY2gSQjNj4ggGAHT\"),\n-\n-        EE_DSA_2048(\n-                \"DSA\",\n-                \/\/ SHA256withDSA, 2048 bits\n-                \/\/ Validity\n-                \/\/     Not Before: May 22 07:18:20 2018 GMT\n-                \/\/     Not After : May 17 07:18:20 2038 GMT\n-                \/\/ Authority Key Identifier:\n-                \/\/     76:66:9E:F7:3B:DD:45:E5:3B:D9:72:3C:3F:F0:54:39:86:31:26:53\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIIEnDCCBEGgAwIBAgIJAP\/jh1qVhNVjMAsGCWCGSAFlAwQDAjA7MQswCQYDVQQG\\n\" +\n-                \"EwJVUzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2\\n\" +\n-                \"Y2UwHhcNMTgwNTIyMDcxODIwWhcNMzgwNTE3MDcxODIwWjBVMQswCQYDVQQGEwJV\\n\" +\n-                \"UzENMAsGA1UECgwESmF2YTEdMBsGA1UECwwUU3VuSlNTRSBUZXN0IFNlcml2Y2Ux\\n\" +\n-                \"GDAWBgNVBAMMD1JlZ3Jlc3Npb24gVGVzdDCCA0cwggI6BgcqhkjOOAQBMIICLQKC\\n\" +\n-                \"AQEAmlavgoJrMcjqWRVcDE2dmWAPREgnzQvneEDef68cprDzjSwvOs5QeFyx75ib\\n\" +\n-                \"ado1e6jO\/rW1prCGWHDD1oA\/Tn4Pk3vu0nUxzvl1qATc+aJbpUU5Op0bvp6LbCsQ\\n\" +\n-                \"QslV9FeRh7Eb7bP6gpc\/kHCBzEgC1VCK7prccXWy+t6SMOHbND3h+UbckfSaUuaV\\n\" +\n-                \"sVJNTD1D6GElfRj4Nmz1BGPfSYvKorwNZEU3gXwFgtDoAcGx7tcyClLpDHfqRfw\/\\n\" +\n-                \"7yiqLyeiP7D4hl5lMNouJWDlAdMFp0FMgS3s9VDFinIcr6VtBWMTG7+4+czHAB+3\\n\" +\n-                \"fvrwlqNzhBn3uFHrekN\/w8fNxwIhAJo7Sae1za7IMW0Q6hE5B4b+s2B\/FaKPoA4E\\n\" +\n-                \"jtZu13B9AoIBAQCOZqLMKfvqZWUgT0PQ3QjR7dAFdd06I9Y3+TOQzZk1+j+vw\/6E\\n\" +\n-                \"X4vFItX4gihb\/u5Q9CdmpwhVGi7bvo+7+\/IKeTgoQ6f5+PSug7SrWWUQ5sPwaZui\\n\" +\n-                \"zXZJ5nTeZDucFc2yFx0wgnjbPwiUxZklOT7xGiOMtzOTa2koCz5KuIBL+\/wPKKxm\\n\" +\n-                \"ypo9VoY9xfbdU6LMXZv\/lpD5XTM9rYHr\/vUTNkukvV6Hpm0YMEWhVZKUJiqCqTqG\\n\" +\n-                \"XHaleOxSw6uQWB\/+TznifcC7gB48UOQjCqOKf5VuwQneJLhlhU\/jhRV3xtr+hLZa\\n\" +\n-                \"hW1wYhVi8cjLDrZFKlgEQqhB4crnJU0mJY+tA4IBBQACggEAID0ezl00\/X8mv7eb\\n\" +\n-                \"bzovum1+DEEP7FM57k6HZEG2N3ve4CW+0m9Cd+cWPz8wkZ+M0j\/Eqa6F0IdbkXEc\\n\" +\n-                \"Q7CuzvUyJ57xQ3L\/WCgXsiS+Bh8O4Mz7GwW22CGmHqafbVv+hKBfr8MkskO6GJUt\\n\" +\n-                \"SUF\/CVLzB4gMIvZMH26tBP2xK+i7FeEK9kT+nGdzQSZBAhFYpEVCBplHZO24\/OYq\\n\" +\n-                \"1DNoU327nUuXIhmsfA8N0PjiWbIZIjTPwBGr9H0LpATI7DIDNcvRRvtROP+pBU9y\\n\" +\n-                \"fuykPkptg9C0rCM9t06bukpOSaEz\/2VIQdLE8fHYFA6pHZ6CIc2+5cfvMgTPhcjz\\n\" +\n-                \"W2jCt6MjMCEwHwYDVR0jBBgwFoAUdmae9zvdReU72XI8P\/BUOYYxJlMwCwYJYIZI\\n\" +\n-                \"AWUDBAMCA0gAMEUCIQCeI5fN08b9BpOaHdc3zQNGjp24FOL\/RxlBLeBAorswJgIg\\n\" +\n-                \"JEZ8DhYxQy1O7mmZ2UIT7op6epWMB4dENjs0qWPmcKo=\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIICZQIBADCCAjoGByqGSM44BAEwggItAoIBAQCaVq+CgmsxyOpZFVwMTZ2ZYA9E\\n\" +\n-                \"SCfNC+d4QN5\/rxymsPONLC86zlB4XLHvmJtp2jV7qM7+tbWmsIZYcMPWgD9Ofg+T\\n\" +\n-                \"e+7SdTHO+XWoBNz5olulRTk6nRu+notsKxBCyVX0V5GHsRvts\/qClz+QcIHMSALV\\n\" +\n-                \"UIrumtxxdbL63pIw4ds0PeH5RtyR9JpS5pWxUk1MPUPoYSV9GPg2bPUEY99Ji8qi\\n\" +\n-                \"vA1kRTeBfAWC0OgBwbHu1zIKUukMd+pF\/D\/vKKovJ6I\/sPiGXmUw2i4lYOUB0wWn\\n\" +\n-                \"QUyBLez1UMWKchyvpW0FYxMbv7j5zMcAH7d++vCWo3OEGfe4Uet6Q3\/Dx83HAiEA\\n\" +\n-                \"mjtJp7XNrsgxbRDqETkHhv6zYH8Voo+gDgSO1m7XcH0CggEBAI5moswp++plZSBP\\n\" +\n-                \"Q9DdCNHt0AV13Toj1jf5M5DNmTX6P6\/D\/oRfi8Ui1fiCKFv+7lD0J2anCFUaLtu+\\n\" +\n-                \"j7v78gp5OChDp\/n49K6DtKtZZRDmw\/Bpm6LNdknmdN5kO5wVzbIXHTCCeNs\/CJTF\\n\" +\n-                \"mSU5PvEaI4y3M5NraSgLPkq4gEv7\/A8orGbKmj1Whj3F9t1Tosxdm\/+WkPldMz2t\\n\" +\n-                \"gev+9RM2S6S9XoembRgwRaFVkpQmKoKpOoZcdqV47FLDq5BYH\/5POeJ9wLuAHjxQ\\n\" +\n-                \"5CMKo4p\/lW7BCd4kuGWFT+OFFXfG2v6EtlqFbXBiFWLxyMsOtkUqWARCqEHhyucl\\n\" +\n-                \"TSYlj60EIgIgLfA75+8KcKxdN8mr6gzGjQe7jPFGG42Ejhd7Q2F4wuw=\"),\n-\n-        EE_DSA_1024(\n-                \"DSA\",\n-                \/\/ dsaWithSHA1, 1024 bits\n-                \/\/ Validity\n-                \/\/     Not Before: Apr 24 12:25:43 2020 GMT\n-                \/\/     Not After : Apr 22 12:25:43 2030 GMT\n-                \/\/ Authority Key Identifier:\n-                \/\/     E1:3C:01:52:EB:D1:38:F7:CF:F1:E3:5E:DB:54:75:7F:5E:AB:2D:36\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIIDADCCAr+gAwIBAgIUd2XJ5F2VTbk9a92w\/NzLXR5zjUQwCQYHKoZIzjgEAzAu\\n\" +\n-                \"MQswCQYDVQQGEwJVUzENMAsGA1UECgwESmF2YTEQMA4GA1UECwwHU3VuSlNTRTAe\\n\" +\n-                \"Fw0yMDA0MjQxMjI1NDNaFw0zMDA0MjIxMjI1NDNaMEgxCzAJBgNVBAYTAlVTMQ0w\\n\" +\n-                \"CwYDVQQKDARKYXZhMRAwDgYDVQQLDAdTdW5KU1NFMRgwFgYDVQQDDA9SZWdyZXNz\\n\" +\n-                \"aW9uIFRlc3QwggG3MIIBLAYHKoZIzjgEATCCAR8CgYEA7fSkxYISlMJT+i8N5VOb\\n\" +\n-                \"lHhjrPYAy3oR2\/YXQW6T0hCMhm8jmxgk1bDId9ZKHrxsM05EkCtRYaqag4ZZeGde\\n\" +\n-                \"ywv3IwwYqCQfGtkPwT9QAsdSABYwGOrlhEtZtBG1yQ44c+Rz\/Vs+PtkAyZbf5VG1\\n\" +\n-                \"iSxFb9bI5QFJWJ9a2VpZh58CFQCCGALQoK4MsQP8V72WlB7Bvt9erwKBgQDCxu0G\\n\" +\n-                \"M2iZr0J8DaAo9\/ChS4m7E7h6Jz9KOm2cFhzYGekkUXNzny7nyz6Qpgbuf8KNFKjt\\n\" +\n-                \"qoUDC8tlcVQAUlTcESC0TZXR3h21hl9wzIBhE+kJ1j8v1KAxfOaJOxObk5QEvIaA\\n\" +\n-                \"5j+jiHGwRS5tDqywOatz+emwMZv1wKnCNBElNgOBhAACgYBHjuQKucCuuvy\/4DpG\\n\" +\n-                \"rSIzdueK+HrzOW8h2pfvz3lzpsyV6XJPC6we9CjaQjU01VcjwN2PoYtbGyml0pbK\\n\" +\n-                \"We4sdgn6LDL1aCM\/WKRSxGHVTx+wkhKQ719YtiC0T6sA+eLirc6VT3\/6+FbQWC+2\\n\" +\n-                \"bG7N19sGpV\/RAXMBpRXUnBJSQaNCMEAwHQYDVR0OBBYEFNNZxyxuQmKvWowofr\/S\\n\" +\n-                \"HdCIS+W8MB8GA1UdIwQYMBaAFOE8AVLr0Tj3z\/HjXttUdX9eqy02MAkGByqGSM44\\n\" +\n-                \"BAMDMAAwLQIUUzzMhZ9St\/Vo\/YdgNTHdTw4cm14CFQCE6tWG157Wl5YFyYsGHsLY\\n\" +\n-                \"NN8uCA==\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MIIBSwIBADCCASwGByqGSM44BAEwggEfAoGBAO30pMWCEpTCU\/ovDeVTm5R4Y6z2\\n\" +\n-                \"AMt6Edv2F0Fuk9IQjIZvI5sYJNWwyHfWSh68bDNORJArUWGqmoOGWXhnXssL9yMM\\n\" +\n-                \"GKgkHxrZD8E\/UALHUgAWMBjq5YRLWbQRtckOOHPkc\/1bPj7ZAMmW3+VRtYksRW\/W\\n\" +\n-                \"yOUBSVifWtlaWYefAhUAghgC0KCuDLED\/Fe9lpQewb7fXq8CgYEAwsbtBjNoma9C\\n\" +\n-                \"fA2gKPfwoUuJuxO4eic\/SjptnBYc2BnpJFFzc58u58s+kKYG7n\/CjRSo7aqFAwvL\\n\" +\n-                \"ZXFUAFJU3BEgtE2V0d4dtYZfcMyAYRPpCdY\/L9SgMXzmiTsTm5OUBLyGgOY\/o4hx\\n\" +\n-                \"sEUubQ6ssDmrc\/npsDGb9cCpwjQRJTYEFgIUNRiLmNzfTYOuVsjkySPzP5gPImM=\"),\n-\n-        EE_ED25519(\n-                \"EdDSA\",\n-                \/\/ ED25519\n-                \/\/ Validity\n-                \/\/     Not Before: May 24 23:32:36 2020 GMT\n-                \/\/     Not After : May 22 23:32:36 2030 GMT\n-                \/\/ X509v3 Authority Key Identifier:\n-                \/\/     keyid:06:76:DB:88:EB:61:55:4C:C9:63:41:C2:A0:A8:57:3F:D7:F1:B8:EC\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIIBlDCCAUagAwIBAgIUFTt\/jcgQ65nhTG8LkrWFJhhEGuwwBQYDK2VwMDsxCzAJ\\n\" +\n-                \"BgNVBAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3Qg\\n\" +\n-                \"U2VyaXZjZTAeFw0yMDA1MjQyMzMyMzZaFw0zMDA1MjIyMzMyMzZaMFUxCzAJBgNV\\n\" +\n-                \"BAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n-                \"aXZjZTEYMBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MCowBQYDK2VwAyEAGAYQmKb7\\n\" +\n-                \"WNYpVxIdsc49lI1emNjF06\/Jl85zlG0wc9OjQjBAMB0GA1UdDgQWBBQkJ2E4\/S8Z\\n\" +\n-                \"EIM1v9uTc0eYtYNk3zAfBgNVHSMEGDAWgBQGdtuI62FVTMljQcKgqFc\/1\/G47DAF\\n\" +\n-                \"BgMrZXADQQCVZnl\/AyIEtZ8r45e\/hcfxwuezgRX+7e9NHZFV1A\/TMGcBRORDfDUi\\n\" +\n-                \"bbh72K528fjT7P4\/WoXvm1zJKOAzUOUL\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MC4CAQAwBQYDK2VwBCIEIGBmdh4tfc0lng\/LWokhfFLlo0ZlmTn2lbI639qou2KP\"),\n-\n-        EE_ED448(\n-                \"EdDSA\",\n-                \/\/ ED448\n-                \/\/ Validity\n-                \/\/     Not Before: May 24 23:23:43 2020 GMT\n-                \/\/     Not After : May 22 23:23:43 2030 GMT\n-                \/\/ X509v3 Authority Key Identifier:\n-                \/\/     keyid:F5:D5:9D:FB:6F:B7:50:29:DF:F0:B8:83:10:5F:9B:C4:A8:1C:E9:F4\n-                \"-----BEGIN CERTIFICATE-----\\n\" +\n-                \"MIIB3zCCAV+gAwIBAgIUNlWzFrH2+BILqM3SNYQjKoY98S8wBQYDK2VxMDsxCzAJ\\n\" +\n-                \"BgNVBAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3Qg\\n\" +\n-                \"U2VyaXZjZTAeFw0yMDA1MjQyMzIzNDNaFw0zMDA1MjIyMzIzNDNaMFUxCzAJBgNV\\n\" +\n-                \"BAYTAlVTMQ0wCwYDVQQKDARqYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2Vy\\n\" +\n-                \"aXZjZTEYMBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MEMwBQYDK2VxAzoAoIubPNAg\\n\" +\n-                \"F11u3MQ5d9wujg10+80I0xzYzTqzzXrfJNtw+eU8NbUk86xiCvlMzJRH0Oo3DbY8\\n\" +\n-                \"NAKAo0IwQDAdBgNVHQ4EFgQUUiI1+qT1x+HsDgfZRIU6hUaAbmUwHwYDVR0jBBgw\\n\" +\n-                \"FoAU9dWd+2+3UCnf8LiDEF+bxKgc6fQwBQYDK2VxA3MAx8P0mle08s5YDd\/p58dt\\n\" +\n-                \"yORqvDPwo5IYPasqN8Zeen1B9u1xF\/kvDGFxCJ6D9Gi4ynnDx0FZFMkA83evZcxJ\\n\" +\n-                \"+X+swt7FyHwXrdkZcvjRKEcsWhkj+0FlxYF\/NZzLTGuGIPYJnRLEwf\/zr+5NDxKs\\n\" +\n-                \"fCoA\\n\" +\n-                \"-----END CERTIFICATE-----\",\n-                \"MEcCAQAwBQYDK2VxBDsEOfbhmUSuKP9WCO7Nr6JxVq5rfJESk1MNMyYhC134SiAP\\n\" +\n-                \"Suw0Cu7RZVadpfPR7Kiwb2b\/JXjMdY1HAA==\");\n-\n-        final String keyAlgo;\n-        final String certStr;\n-        final String privKeyStr;\n-\n-        Cert(String keyAlgo, String certStr, String privKeyStr) {\n-            this.keyAlgo = keyAlgo;\n-            this.certStr = certStr;\n-            this.privKeyStr = privKeyStr;\n-        }\n-    }\n","filename":"test\/jdk\/javax\/net\/ssl\/templates\/SSLSocketTemplate.java","additions":3,"deletions":737,"binary":false,"changes":740,"status":"modified"},{"patch":"@@ -56,1 +56,1 @@\n-public class AlpnGreaseTest implements SSLContextTemplate {\n+public class AlpnGreaseTest extends SSLContextTemplate {\n","filename":"test\/jdk\/sun\/security\/ssl\/ALPN\/AlpnGreaseTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,0 +51,1 @@\n+    @Override\n@@ -53,4 +54,4 @@\n-                new SSLSocketTemplate.Cert[] {\n-                        SSLSocketTemplate.Cert.CA_ECDSA_SECP384R1 },\n-                new SSLSocketTemplate.Cert[] {\n-                        SSLSocketTemplate.Cert.EE_ECDSA_SECP384R1 },\n+                new SSLContextTemplate.Cert[] {\n+                        SSLContextTemplate.Cert.CA_ECDSA_SECP384R1 },\n+                new SSLContextTemplate.Cert[] {\n+                        SSLContextTemplate.Cert.EE_ECDSA_SECP384R1 },\n@@ -60,0 +61,1 @@\n+    @Override\n@@ -62,4 +64,4 @@\n-                new SSLSocketTemplate.Cert[] {\n-                        SSLSocketTemplate.Cert.CA_ECDSA_SECP384R1 },\n-                new SSLSocketTemplate.Cert[] {\n-                        SSLSocketTemplate.Cert.EE_ECDSA_SECP384R1 },\n+                new SSLContextTemplate.Cert[] {\n+                        SSLContextTemplate.Cert.CA_ECDSA_SECP384R1 },\n+                new SSLContextTemplate.Cert[] {\n+                        SSLContextTemplate.Cert.EE_ECDSA_SECP384R1 },\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/DisabledCurve.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,4 +31,1 @@\n-import java.io.ByteArrayInputStream;\n-import java.security.KeyFactory;\n-import java.security.KeyStore;\n-import java.security.PrivateKey;\n+\n@@ -36,3 +33,0 @@\n-import java.security.cert.Certificate;\n-import java.security.cert.CertificateFactory;\n-import java.security.spec.PKCS8EncodedKeySpec;\n@@ -40,2 +34,0 @@\n-import java.util.Base64;\n-import javax.net.ssl.KeyManagerFactory;\n@@ -45,1 +37,0 @@\n-import javax.net.ssl.TrustManagerFactory;\n@@ -61,1 +52,5 @@\n-        this.context = createSSLContext();\n+        this.context = createSSLContext(\n+                new Cert[]{Cert.EE_RSASSA_PSS},\n+                new Cert[]{Cert.EE_RSASSA_PSS},\n+                new ContextParameters(\"TLS\", \"PKIX\", \"NewSunX509\")\n+        );\n@@ -65,1 +60,1 @@\n-    protected SSLContext createClientSSLContext() throws Exception {\n+    public SSLContext createClientSSLContext() throws Exception {\n@@ -70,1 +65,1 @@\n-    protected SSLContext createServerSSLContext() throws Exception {\n+    public SSLContext createServerSSLContext() throws Exception {\n@@ -120,112 +115,0 @@\n-\n-\n-    private static final String trustedCertStr =\n-        \/**\n-        * Signature Algorithm: rsassaPss\n-        * Issuer: CN = localhost\n-        * Validity Not Before: Jun 6 07:11:00 2018 GMT\n-        * Not After : Jun 1 07:11:00 2038 GMT\n-        * Subject: CN = localhost\n-        * Public Key Algorithm: rsassaPss\n-        *\/\n-       \"-----BEGIN CERTIFICATE-----\\n\"\n-       + \"MIIDZjCCAh2gAwIBAgIUHxwPs3eAgJ057nJwiLgWZWeNqdgwPgYJKoZIhvcNAQEK\\n\"\n-       + \"MDGgDTALBglghkgBZQMEAgGhGjAYBgkqhkiG9w0BAQgwCwYJYIZIAWUDBAIBogQC\\n\"\n-       + \"AgDeMBQxEjAQBgNVBAMMCWxvY2FsaG9zdDAeFw0xODA2MDYwNzExMDBaFw0zODA2\\n\"\n-       + \"MDEwNzExMDBaMBQxEjAQBgNVBAMMCWxvY2FsaG9zdDCCASAwCwYJKoZIhvcNAQEK\\n\"\n-       + \"A4IBDwAwggEKAoIBAQCl8r4Qrg27BYUO\/1Va2Ix8QPGzN\/lvzmKvP5Ff26ovNW4v\\n\"\n-       + \"RUx68HzAhhiWtcl+PwLSbJqJreEkTlle7PnRAypby3fO7ZAK0Y3YiHquaBg7d+7Y\\n\"\n-       + \"FhhHwv8gG0lZcyA0BkXFJHqdq76qar0xHC6DVezXm0K3mcceymGtFR9BzWmAj+7D\\n\"\n-       + \"YsSwvtTQ7WNoQmf0cdDMSM71IwaTwIwvT2wzX1vv5hcdDyXdr64WFqWSA9sNJ2K6\\n\"\n-       + \"arxaaU1klwKSgDokF6njafWQ4UxdR67d5W1MYoiioDs2Yy3utsMpO2OUzZVBZNdT\\n\"\n-       + \"gkr1jsJhIurpz\/5K51lwJIRQBezEFSb+60AFVoMJAgMBAAGjUDBOMB0GA1UdDgQW\\n\"\n-       + \"BBQfFit5ilWJmZgCX4QY0HsaI9iIDDAfBgNVHSMEGDAWgBQfFit5ilWJmZgCX4QY\\n\"\n-       + \"0HsaI9iIDDAMBgNVHRMEBTADAQH\/MD4GCSqGSIb3DQEBCjAxoA0wCwYJYIZIAWUD\\n\"\n-       + \"BAIBoRowGAYJKoZIhvcNAQEIMAsGCWCGSAFlAwQCAaIEAgIA3gOCAQEAa4yUQ3gh\\n\"\n-       + \"d1YWPdEa1sv2hdkhtenw6m5yxbmaQl2+nIKSpk4RfpXC7K1EYwBF8TdfFbD8hGGh\\n\"\n-       + \"5n81BT0\/dn1R9SRGCv7KTxx4lfQt31frlsw\/tVciwyXQtcUZ6DqfnLP0\/aRVLNgx\\n\"\n-       + \"zaP542JUHFYLTC3EGz2zUgv70ZUTlIsPG3\/p8YO1iXdnYGQyzOuQPUBpI7nS7UtR\\n\"\n-       + \"Ug8VE9ACpBxxI3qChMahFZGHlXCCSjSmxpQa6UO4SQl8q5tPNnqdzWwvAW8qkCy4\\n\"\n-       + \"6barRQ4sMcGayhHh\/uSTx7bcl0FMJpcI1ygbw7\/Pc03zKtw0gMTBMns7q4yXjb\/u\\n\"\n-       + \"ef47nW0t+LRAAg==\\n\"\n-       + \"-----END CERTIFICATE-----\\n\";\n-\n-    private static final String keyCertStr = trustedCertStr;\n-\n-    private static final String privateKey =\n-        \"MIIEuwIBADALBgkqhkiG9w0BAQoEggSnMIIEowIBAAKCAQEApfK+EK4NuwWFDv9V\\n\"\n-        + \"WtiMfEDxszf5b85irz+RX9uqLzVuL0VMevB8wIYYlrXJfj8C0myaia3hJE5ZXuz5\\n\"\n-        + \"0QMqW8t3zu2QCtGN2Ih6rmgYO3fu2BYYR8L\/IBtJWXMgNAZFxSR6nau+qmq9MRwu\\n\"\n-        + \"g1Xs15tCt5nHHsphrRUfQc1pgI\/uw2LEsL7U0O1jaEJn9HHQzEjO9SMGk8CML09s\\n\"\n-        + \"M19b7+YXHQ8l3a+uFhalkgPbDSdiumq8WmlNZJcCkoA6JBep42n1kOFMXUeu3eVt\\n\"\n-        + \"TGKIoqA7NmMt7rbDKTtjlM2VQWTXU4JK9Y7CYSLq6c\/+SudZcCSEUAXsxBUm\/utA\\n\"\n-        + \"BVaDCQIDAQABAoIBAAc4vRS0vlw5LUUtz2UYr2Ro3xvRf8Vh0eGWfpkRUiKjzJu6\\n\"\n-        + \"BE4FUSh\/rWpBlvcrfs\/xcfgz3OxbjIAZB\/YUkS9Vd21F4VLXM7kMl2onlYZg\/b\/h\\n\"\n-        + \"lkTpM3kONu7xl6Er9LVTlRJveuinpHwSoeONRbVMSGb9BjFM1VtW4\/lVGxZBG05D\\n\"\n-        + \"y9i\/o4vCZqULn9cAumOwicKuCyTcS58XcMJ+puSPfRA71PYLxqFkASAoJsUwCXpo\\n\"\n-        + \"gs39lLsIFgrfO8mBO1ux\/SE+QaRc+9XqFSHHKD1XqF\/9zSYBgWjE910EcpdYEdZx\\n\"\n-        + \"GEkwea7Fn4brO5OpIrHY\/45naqbUOBzv6gufMAECgYEAz7PHCdcrQvmOb8EiNbQH\\n\"\n-        + \"uvSimwObWJFeN1ykp6mfRbSnkXw7p8+M4Tc8HFi8QLpoq63Ev2AwoaQCQvHbFC2Y\\n\"\n-        + \"1Cz0EkC0aOp+tZP7U2AUBdkcDesZAJQTad0zV6KesyIUXdxZXDG8JJ1XSNWfTJV4\\n\"\n-        + \"QD+BjLZ0jiAyCIfVYvWQqYkCgYEAzIln1nKTixLMPr5CldSmR7ZarEtPJU+hHwVg\\n\"\n-        + \"dV\/Lc6d2Yy9JgunOXRo4BXB1TEo8JFbK3HBQH6tS8li4qDr7WK5wyYfh8qb4WZyu\\n\"\n-        + \"lc562f2WVYntcN8\/Ojb+Vyrt7lk9sq\/8KoVHxEAWd6mqL9VTPYuAu1Vw9fTGIZfB\\n\"\n-        + \"lDeELYECgYAvdzU4UXzofGGJtohb332YwwlaBZP9xJLUcg6K5l+orWVSASMc8XiP\\n\"\n-        + \"i3DoRXsYC8GZ4kdBOPlEJ1gA9oaLcPQpIPDSLwlLpLM6Scw4vI822uvnXl\/DWxOo\\n\"\n-        + \"sM1n7Jj59QLUhGPDhvYpI+\/rjC4wcUQe4qR3hMbUKBVnD6u7RsU9iQKBgQCQ17VK\\n\"\n-        + \"7bSCRfuRaxaoGADww7gOTv5rQ6qr1xjpxb7D1hFGR9Rc+smCsPB\/GZZXQjK44SWj\\n\"\n-        + \"WX3ED4Ubzaxmpe4cbNu+O5XMSmWQwB36RFBHUwdE5\/nXdqDFzu\/qNqJrqZLBmVKP\\n\"\n-        + \"ofaiiWffsaytVvotmT6+atElvAMbAua42V+nAQKBgHtIn3mYMHLriYGhQzpkFEA2\\n\"\n-        + \"8YcAMlKppueOMAKVy8nLu2r3MidmLAhMiKJQKG45I3Yg0\/t\/25tXLiOPJlwrOebh\\n\"\n-        + \"xQqUBI\/JUOIpGAEnr48jhOXnCS+i+z294G5U\/RgjXrlR4bCPvrtCmwzWwe0h79w2\\n\"\n-        + \"Q2hO5ZTW6UD9CVA85whf\";\n-\n-    private static SSLContext createSSLContext() throws Exception {\n-        \/\/ Generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        \/\/ Create a key store\n-        KeyStore ts = KeyStore.getInstance(\"PKCS12\");\n-        KeyStore ks = KeyStore.getInstance(\"PKCS12\");\n-        ts.load(null, null);\n-        ks.load(null, null);\n-        char passphrase[] = \"passphrase\".toCharArray();\n-\n-        \/\/ Import the trusted cert\n-        ts.setCertificateEntry(\"trusted-cert-RSASSA-PSS\",\n-                cf.generateCertificate(new ByteArrayInputStream(\n-                        trustedCertStr.getBytes())));\n-\n-        boolean hasKeyMaterials = keyCertStr != null && privateKey != null;\n-        if (hasKeyMaterials) {\n-\n-            \/\/ Generate the private key.\n-            PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                    Base64.getMimeDecoder().decode(privateKey));\n-            KeyFactory kf = KeyFactory.getInstance(\"RSASSA-PSS\");\n-            PrivateKey priKey = kf.generatePrivate(priKeySpec);\n-\n-            \/\/ Generate certificate chain\n-            Certificate keyCert = cf.generateCertificate(\n-                    new ByteArrayInputStream(keyCertStr.getBytes()));\n-            Certificate[] chain = new Certificate[]{keyCert};\n-\n-            \/\/ Import the key entry.\n-            ks.setKeyEntry(\"cert-RSASSA-PSS\", priKey, passphrase, chain);\n-        }\n-\n-        \/\/ Create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(ts);\n-\n-        SSLContext context = SSLContext.getInstance(\"TLS\");\n-        if (hasKeyMaterials) {\n-            KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n-            kmf.init(ks, passphrase);\n-            context.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        } else {\n-            context.init(null, tmf.getTrustManagers(), null);\n-        }\n-\n-        return context;\n-    }\n","filename":"test\/jdk\/sun\/security\/ssl\/CipherSuite\/RestrictSignatureScheme.java","additions":9,"deletions":126,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @library \/test\/lib\n+ * @library \/test\/lib \/javax\/net\/ssl\/templates\n@@ -85,1 +85,0 @@\n-import java.security.*;\n@@ -92,1 +91,1 @@\n-public class SSLEngineBadBufferArrayAccess {\n+public class SSLEngineBadBufferArrayAccess extends SSLContextTemplate {\n@@ -97,1 +96,2 @@\n-    private static boolean logging = true;\n+    private final static boolean logging = Boolean.parseBoolean(\n+            System.getProperty(\"test.logging\", \"true\"));\n@@ -108,2 +108,3 @@\n-    private static boolean debug = false;\n-    private SSLContext sslc;\n+    private final static boolean debug = Boolean.getBoolean(\"test.debug\");\n+    private final String PROTOCOL;\n+\n@@ -127,14 +128,0 @@\n-    \/*\n-     * The following is to set up the keystores\/trust material.\n-     *\/\n-    private static final String pathToStores = \"..\/..\/..\/..\/javax\/net\/ssl\/etc\";\n-    private static final String keyStoreFile = \"keystore\";\n-    private static final String trustStoreFile = \"truststore\";\n-    private static final String passwd = \"passphrase\";\n-    private static String keyFilename =\n-            System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores\n-            + \"\/\" + keyStoreFile;\n-    private static String trustFilename =\n-            System.getProperty(\"test.src\", \".\") + \"\/\" + pathToStores\n-            + \"\/\" + trustStoreFile;\n-\n@@ -159,1 +146,1 @@\n-    public static void main(String args[]) throws Exception {\n+    public static void main(String[] args) throws Exception {\n@@ -168,1 +155,1 @@\n-            \"SSLv3\", \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\" };\n+            \"SSLv3\", \"TLSv1\", \"TLSv1.1\", \"TLSv1.2\", \"TLSv1.3\"};\n@@ -187,22 +174,3 @@\n-    public SSLEngineBadBufferArrayAccess(String protocol) throws Exception {\n-\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        KeyStore ts = KeyStore.getInstance(\"JKS\");\n-\n-        char[] passphrase = \"passphrase\".toCharArray();\n-\n-        try (FileInputStream fis = new FileInputStream(keyFilename)) {\n-            ks.load(fis, passphrase);\n-        }\n-\n-        try (FileInputStream fis = new FileInputStream(trustFilename)) {\n-            ts.load(fis, passphrase);\n-        }\n-\n-        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"SunX509\");\n-        kmf.init(ks, passphrase);\n-\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n-        tmf.init(ts);\n-\n-        SSLContext sslCtx = SSLContext.getInstance(protocol);\n+    public SSLEngineBadBufferArrayAccess(String protocol) {\n+        PROTOCOL = protocol;\n+    }\n@@ -210,1 +178,4 @@\n-        sslCtx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n+    @Override\n+    protected ContextParameters getServerContextParameters() {\n+        return new ContextParameters(PROTOCOL, \"PKIX\", \"NewSunX509\");\n+    }\n@@ -212,1 +183,3 @@\n-        sslc = sslCtx;\n+    @Override\n+    protected ContextParameters getClientContextParameters() {\n+        return new ContextParameters(PROTOCOL, \"PKIX\", \"NewSunX509\");\n@@ -235,0 +208,1 @@\n+        System.out.println(\"Running test serverClose = \" + serverClose);\n@@ -247,1 +221,1 @@\n-            socket = (Socket) serverSocket.accept();\n+            socket = serverSocket.accept();\n@@ -330,1 +304,1 @@\n-            int len = 0;\n+            int len;\n@@ -339,1 +313,8 @@\n-                    throw new Exception(\"Unexpected EOF\");\n+                    logSocketStatus(socket);\n+                    if (socket.isClosed()\n+                            || socket.isOutputShutdown()) {\n+                        log(\"Client socket was closed or shutdown output\");\n+                        break;\n+                    } else {\n+                        throw new Exception(\"Unexpected EOF\");\n+                    }\n@@ -375,1 +356,1 @@\n-                 * We'll alternate initiatating the shutdown.\n+                 * We'll alternate initiating the shutdown.\n@@ -382,3 +363,0 @@\n-            }\n-\n-            if (closed && isEngineClosed(serverEngine)) {\n@@ -406,0 +384,1 @@\n+                break;\n@@ -453,1 +432,1 @@\n-        SSLSocketFactory sslsf = sslc.getSocketFactory();\n+        SSLSocketFactory sslsf = createClientSSLContext().getSocketFactory();\n@@ -495,0 +474,1 @@\n+        System.out.println(\"writing message to server.\");\n@@ -502,0 +482,1 @@\n+            System.out.printf(\"Client read %d bytes. Waiting for %d from server.%n\", len, serverMsg.length);\n@@ -505,0 +486,1 @@\n+                System.out.println(\"Closing the socket\");\n@@ -509,1 +491,1 @@\n-\n+        System.out.println(\"Read everything we're going to, I guess.\");\n@@ -530,1 +512,1 @@\n-        serverEngine = sslc.createSSLEngine();\n+        serverEngine = createServerSSLContext().createSSLEngine();\n@@ -592,0 +574,9 @@\n+    private static void logSocketStatus(Socket socket) {\n+        log(\"##### \" + socket + \" #####\");\n+        log(\"isBound: \" + socket.isBound());\n+        log(\"isConnected: \" + socket.isConnected());\n+        log(\"isClosed: \" + socket.isClosed());\n+        log(\"isInputShutdown: \" + socket.isInputShutdown());\n+        log(\"isOutputShutdown: \" + socket.isOutputShutdown());\n+    }\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLEngineImpl\/SSLEngineBadBufferArrayAccess.java","additions":47,"deletions":56,"binary":false,"changes":103,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-public class InvalidateSession implements SSLContextTemplate {\n+public class InvalidateSession extends SSLContextTemplate {\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSessionImpl\/InvalidateSession.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-public class ClientSocketCloseHang implements SSLContextTemplate {\n+public class ClientSocketCloseHang extends SSLContextTemplate {\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/ClientSocketCloseHang.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,147 +0,0 @@\n-\/*\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/\/\n-\/\/ Please run in othervm mode.  SunJSSE does not support dynamic system\n-\/\/ properties, no way to re-use system properties in samevm\/agentvm mode.\n-\/\/\n-\n-\/*\n- * @test\n- * @bug 8209333\n- * @summary Socket reset issue for TLS 1.3 socket close\n- * @library \/javax\/net\/ssl\/templates\n- * @run main\/othervm SSLSocketBruceForceClose\n- *\/\n-\n-import javax.net.ssl.*;\n-import java.io.*;\n-import java.net.InetAddress;\n-\n-public class SSLSocketBruceForceClose implements SSLContextTemplate {\n-\n-    public static void main(String[] args) throws Exception {\n-        for (int i = 0; i<= 10; i++) {\n-            System.err.println(\"===================================\");\n-            System.err.println(\"loop \" + i);\n-            System.err.println(\"===================================\");\n-            new SSLSocketBruceForceClose().test();\n-        }\n-    }\n-\n-    private void test() throws Exception {\n-        SSLServerSocket listenSocket = null;\n-        SSLSocket serverSocket = null;\n-        ClientSocket clientSocket = null;\n-        try {\n-            SSLServerSocketFactory serversocketfactory =\n-                    createServerSSLContext().getServerSocketFactory();\n-            listenSocket =\n-                    (SSLServerSocket)serversocketfactory.createServerSocket(0);\n-            listenSocket.setNeedClientAuth(false);\n-            listenSocket.setEnableSessionCreation(true);\n-            listenSocket.setUseClientMode(false);\n-\n-\n-            System.err.println(\"Starting client\");\n-            clientSocket = new ClientSocket(listenSocket.getLocalPort());\n-            clientSocket.start();\n-\n-            System.err.println(\"Accepting client requests\");\n-            serverSocket = (SSLSocket) listenSocket.accept();\n-\n-            System.err.println(\"Reading data from client\");\n-            BufferedReader serverReader = new BufferedReader(\n-                    new InputStreamReader(serverSocket.getInputStream()));\n-            String data = serverReader.readLine();\n-            System.err.println(\"Received data from client: \" + data);\n-\n-            System.err.println(\"Reading more data from client\");\n-            data = serverReader.readLine();\n-            System.err.println(\"Received data from client: \" + data);\n-        } finally {\n-            if (listenSocket != null) {\n-                listenSocket.close();\n-            }\n-\n-            if (serverSocket != null) {\n-                serverSocket.close();\n-            }\n-        }\n-\n-        if (clientSocket != null && clientSocket.clientException != null) {\n-            throw clientSocket.clientException;\n-        }\n-    }\n-\n-    private class ClientSocket extends Thread{\n-        int serverPort = 0;\n-        Exception clientException;\n-\n-        public ClientSocket(int serverPort) {\n-            this.serverPort = serverPort;\n-        }\n-\n-        @Override\n-        public void run() {\n-            SSLSocket clientSocket = null;\n-            String clientData = \"Hi, I am client\";\n-            try {\n-                System.err.println(\n-                        \"Connecting to server at port \" + serverPort);\n-                SSLSocketFactory sslSocketFactory =\n-                        createClientSSLContext().getSocketFactory();\n-                clientSocket = (SSLSocket)sslSocketFactory.createSocket(\n-                        InetAddress.getLocalHost(), serverPort);\n-                clientSocket.setSoLinger(true, 3);\n-                clientSocket.setSoTimeout(1000);\n-\n-\n-                System.err.println(\"Sending data to server ...\");\n-\n-                BufferedWriter os = new BufferedWriter(\n-                        new OutputStreamWriter(clientSocket.getOutputStream()));\n-                os.write(clientData, 0, clientData.length());\n-                os.newLine();\n-                os.flush();\n-\n-                System.err.println(\"Sending more data to server ...\");\n-                os.write(clientData, 0, clientData.length());\n-                os.newLine();\n-                os.flush();\n-            } catch (Exception e) {\n-                clientException = e;\n-            } finally {\n-                if (clientSocket != null) {\n-                    try{\n-                        clientSocket.close();\n-                        System.err.println(\"client socket closed\");\n-                    } catch (IOException ioe) {\n-                        clientException = ioe;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}\n-\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketBruceForceClose.java","additions":0,"deletions":147,"binary":false,"changes":147,"status":"deleted"},{"patch":"@@ -0,0 +1,102 @@\n+\/*\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/\n+\/\/ Please run in othervm mode.  SunJSSE does not support dynamic system\n+\/\/ properties, no way to re-use system properties in samevm\/agentvm mode.\n+\/\/\n+\n+\/*\n+ * @test\n+ * @bug 8209333\n+ * @summary Socket reset issue for TLS 1.3 socket close\n+ * @library \/javax\/net\/ssl\/templates\n+ * @run main\/othervm SSLSocketBruteForceClose\n+ *\/\n+\n+import javax.net.ssl.*;\n+import java.io.*;\n+import java.net.SocketException;\n+\n+public class SSLSocketBruteForceClose extends SSLSocketTemplate {\n+\n+    public static void main(String[] args) throws Exception {\n+        for (int i = 0; i<= 10; i++) {\n+            System.err.println(\"===================================\");\n+            System.err.println(\"loop \" + i);\n+            System.err.println(\"===================================\");\n+            new SSLSocketBruteForceClose().run();\n+        }\n+    }\n+\n+    @Override\n+    protected void configureServerSocket(SSLServerSocket socket) {\n+        socket.setNeedClientAuth(false);\n+        socket.setEnableSessionCreation(true);\n+        socket.setUseClientMode(false);\n+    }\n+\n+    @Override\n+    protected void runServerApplication(SSLSocket socket) throws Exception {\n+        System.err.println(\"Reading data from client\");\n+        BufferedReader serverReader = new BufferedReader(\n+                new InputStreamReader(socket.getInputStream()));\n+        String data = serverReader.readLine();\n+        System.err.println(\"Received data from client: \" + data);\n+\n+        System.err.println(\"Reading more data from client\");\n+        data = serverReader.readLine();\n+        System.err.println(\"Received data from client: \" + data);\n+    }\n+\n+    @Override\n+    protected void configureClientSocket(SSLSocket socket) {\n+        try {\n+            socket.setSoLinger(true, 3);\n+            socket.setSoTimeout(1000);\n+        } catch (SocketException exc) {\n+            throw new RuntimeException(\"Could not configure client socket\", exc);\n+        }\n+    }\n+\n+    @Override\n+    protected void runClientApplication(SSLSocket socket) throws Exception {\n+        String clientData = \"Hi, I am client\";\n+\n+        System.err.println(\"Sending data to server ...\");\n+        BufferedWriter os = new BufferedWriter(\n+                new OutputStreamWriter(socket.getOutputStream()));\n+        os.write(clientData, 0, clientData.length());\n+        os.newLine();\n+        os.flush();\n+\n+        System.err.println(\"Sending more data to server ...\");\n+        os.write(clientData, 0, clientData.length());\n+        os.newLine();\n+        os.flush();\n+\n+        socket.close();\n+        System.err.println(\"client socket closed\");\n+    }\n+}\n+\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketBruteForceClose.java","additions":102,"deletions":0,"binary":false,"changes":102,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.net.SocketException;\n@@ -41,1 +42,1 @@\n-public class SSLSocketClose implements SSLContextTemplate {\n+public class SSLSocketClose extends SSLSocketTemplate {\n@@ -45,4 +46,4 @@\n-            System.err.println(\"===================================\");\n-            System.err.println(\"loop \" + i);\n-            System.err.println(\"===================================\");\n-            new SSLSocketClose().test();\n+            System.out.println(\"===================================\");\n+            System.out.println(\"loop \" + i);\n+            System.out.println(\"===================================\");\n+            new SSLSocketClose().run();\n@@ -52,51 +53,5 @@\n-    private void test() throws Exception {\n-        SSLServerSocket listenSocket = null;\n-        SSLSocket serverSocket = null;\n-        ClientSocket clientSocket = null;\n-        try {\n-            SSLServerSocketFactory serversocketfactory =\n-                    createServerSSLContext().getServerSocketFactory();\n-            listenSocket =\n-                    (SSLServerSocket)serversocketfactory.createServerSocket(0);\n-            listenSocket.setNeedClientAuth(false);\n-            listenSocket.setEnableSessionCreation(true);\n-            listenSocket.setUseClientMode(false);\n-\n-\n-            System.err.println(\"Starting client\");\n-            clientSocket = new ClientSocket(listenSocket.getLocalPort());\n-            clientSocket.start();\n-\n-            System.err.println(\"Accepting client requests\");\n-            serverSocket = (SSLSocket) listenSocket.accept();\n-\n-            System.err.println(\"Reading data from client\");\n-            BufferedReader serverReader = new BufferedReader(\n-                    new InputStreamReader(serverSocket.getInputStream()));\n-            String data = serverReader.readLine();\n-            System.err.println(\"Received data from client: \" + data);\n-\n-            System.err.println(\"Sending data to client ...\");\n-            String serverData = \"Hi, I am server\";\n-            BufferedWriter os = new BufferedWriter(\n-                    new OutputStreamWriter(serverSocket.getOutputStream()));\n-            os.write(serverData, 0, serverData.length());\n-            os.newLine();\n-            os.flush();\n-\n-            System.err.println(\"Reading more data from client\");\n-            data = serverReader.readLine();\n-            System.err.println(\"Received data from client: \" + data);\n-        } finally {\n-            if (listenSocket != null) {\n-                listenSocket.close();\n-            }\n-\n-            if (serverSocket != null) {\n-                serverSocket.close();\n-            }\n-        }\n-\n-        if (clientSocket != null && clientSocket.clientException != null) {\n-            throw clientSocket.clientException;\n-        }\n+    @Override\n+    protected void configureServerSocket(SSLServerSocket socket) {\n+        socket.setNeedClientAuth(false);\n+        socket.setEnableSessionCreation(true);\n+        socket.setUseClientMode(false);\n@@ -105,3 +60,20 @@\n-    private class ClientSocket extends Thread{\n-        int serverPort = 0;\n-        Exception clientException;\n+    @Override\n+    protected void runServerApplication(SSLSocket socket) throws Exception {\n+        System.out.println(\"Reading data from client\");\n+        BufferedReader serverReader = new BufferedReader(\n+                new InputStreamReader(socket.getInputStream()));\n+        String data = serverReader.readLine();\n+        System.out.println(\"Received data from client: \" + data);\n+\n+        System.out.println(\"Sending data to client ...\");\n+        String serverData = \"Hi, I am server\";\n+        BufferedWriter os = new BufferedWriter(\n+                new OutputStreamWriter(socket.getOutputStream()));\n+        os.write(serverData, 0, serverData.length());\n+        os.newLine();\n+        os.flush();\n+\n+        System.out.println(\"Reading more data from client\");\n+        data = serverReader.readLine();\n+        System.out.println(\"Received data from client: \" + data);\n+    }\n@@ -109,2 +81,6 @@\n-        public ClientSocket(int serverPort) {\n-            this.serverPort = serverPort;\n+    @Override\n+    protected void configureClientSocket(SSLSocket socket) {\n+        try {\n+            socket.setSoLinger(true, 3);\n+        } catch (SocketException e) {\n+            throw new RuntimeException(\"Could not configure client socket\", e);\n@@ -112,0 +88,1 @@\n+    }\n@@ -113,44 +90,23 @@\n-        @Override\n-        public void run() {\n-            SSLSocket clientSocket = null;\n-            String clientData = \"Hi, I am client\";\n-            try {\n-                System.err.println(\n-                        \"Connecting to server at port \" + serverPort);\n-                SSLSocketFactory sslSocketFactory =\n-                        createClientSSLContext().getSocketFactory();\n-                clientSocket = (SSLSocket)sslSocketFactory.createSocket(\n-                        InetAddress.getLocalHost(), serverPort);\n-                clientSocket.setSoLinger(true, 3);\n-\n-                System.err.println(\"Sending data to server ...\");\n-\n-                BufferedWriter os = new BufferedWriter(\n-                        new OutputStreamWriter(clientSocket.getOutputStream()));\n-                os.write(clientData, 0, clientData.length());\n-                os.newLine();\n-                os.flush();\n-\n-                System.err.println(\"Reading data from server\");\n-                BufferedReader is = new BufferedReader(\n-                        new InputStreamReader(clientSocket.getInputStream()));\n-                String data = is.readLine();\n-                System.err.println(\"Received Data from server: \" + data);\n-\n-                System.err.println(\"Sending more data to server ...\");\n-                os.write(clientData, 0, clientData.length());\n-                os.newLine();\n-                os.flush();\n-            } catch (Exception e) {\n-                clientException = e;\n-            } finally {\n-                if (clientSocket != null) {\n-                    try{\n-                        clientSocket.close();\n-                        System.err.println(\"client socket closed\");\n-                    } catch (IOException ioe) {\n-                        clientException = ioe;\n-                    }\n-                }\n-            }\n-        }\n+    @Override\n+    protected void runClientApplication(SSLSocket socket) throws Exception {\n+        String clientData = \"Hi, I am client\";\n+        System.out.println(\"Sending data to server ...\");\n+\n+        BufferedWriter os = new BufferedWriter(\n+                new OutputStreamWriter(socket.getOutputStream()));\n+        os.write(clientData, 0, clientData.length());\n+        os.newLine();\n+        os.flush();\n+\n+        System.out.println(\"Reading data from server\");\n+        BufferedReader is = new BufferedReader(\n+                new InputStreamReader(socket.getInputStream()));\n+        String data = is.readLine();\n+        System.out.println(\"Received Data from server: \" + data);\n+\n+        System.out.println(\"Sending more data to server ...\");\n+        os.write(clientData, 0, clientData.length());\n+        os.newLine();\n+        os.flush();\n+\n+        socket.close();\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SSLSocketClose.java","additions":62,"deletions":106,"binary":false,"changes":168,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n@@ -41,1 +43,3 @@\n-public class SocketExceptionForSocketIssues implements SSLContextTemplate {\n+public class SocketExceptionForSocketIssues extends SSLSocketTemplate {\n+\n+    private final CountDownLatch waitForClient = new CountDownLatch(1);\n@@ -44,2 +48,9 @@\n-        System.err.println(\"===================================\");\n-        new SocketExceptionForSocketIssues().test();\n+        System.out.println(\"===================================\");\n+        new SocketExceptionForSocketIssues().run();\n+    }\n+\n+    @Override\n+    protected void configureServerSocket(SSLServerSocket socket) {\n+        socket.setNeedClientAuth(false);\n+        socket.setEnableSessionCreation(true);\n+        socket.setUseClientMode(false);\n@@ -48,4 +59,2 @@\n-    private void test() throws Exception {\n-        SSLServerSocket listenSocket = null;\n-        SSLSocket serverSocket = null;\n-        ClientSocket clientSocket = null;\n+    @Override\n+    protected void runServerApplication(SSLSocket socket) throws Exception {\n@@ -53,18 +62,2 @@\n-            SSLServerSocketFactory serversocketfactory =\n-                    createServerSSLContext().getServerSocketFactory();\n-            listenSocket =\n-                    (SSLServerSocket)serversocketfactory.createServerSocket(0);\n-            listenSocket.setNeedClientAuth(false);\n-            listenSocket.setEnableSessionCreation(true);\n-            listenSocket.setUseClientMode(false);\n-\n-            System.err.println(\"Starting client\");\n-            clientSocket = new ClientSocket(listenSocket.getLocalPort());\n-            clientSocket.start();\n-\n-            System.err.println(\"Accepting client requests\");\n-            serverSocket = (SSLSocket)listenSocket.accept();\n-\n-            if (!clientSocket.isDone) {\n-                System.err.println(\"Waiting 3 seconds for client \");\n-                Thread.sleep(3000);\n+            if (!waitForClient.await(5, TimeUnit.SECONDS)) {\n+                throw new RuntimeException(\"Client didn't complete within 5 seconds.\");\n@@ -73,1 +66,1 @@\n-            System.err.println(\"Sending data to client ...\");\n+            System.out.println(\"Sending data to client ...\");\n@@ -76,1 +69,1 @@\n-                    new OutputStreamWriter(serverSocket.getOutputStream()));\n+                    new OutputStreamWriter(socket.getOutputStream()));\n@@ -80,2 +73,1 @@\n-        } catch (SSLProtocolException | SSLHandshakeException sslhe) {\n-            throw sslhe;\n+            throw new RuntimeException(\"The expected SocketException was not thrown.\");\n@@ -84,9 +76,1 @@\n-            System.err.println(\"server exception: \" + se);\n-        } finally {\n-            if (listenSocket != null) {\n-                listenSocket.close();\n-            }\n-\n-            if (serverSocket != null) {\n-                serverSocket.close();\n-            }\n+            System.out.println(\"Caught expected SocketException: \" + se);\n@@ -94,0 +78,1 @@\n+    }\n@@ -95,2 +80,7 @@\n-        if (clientSocket != null && clientSocket.clientException != null) {\n-            throw clientSocket.clientException;\n+    @Override\n+    protected void configureClientSocket(SSLSocket socket) {\n+        try {\n+            socket.setSoLinger(true, 3);\n+            socket.setSoTimeout(100);\n+        } catch (SocketException exc) {\n+            throw new RuntimeException(\"Could not configure client socket.\", exc);\n@@ -100,0 +90,15 @@\n+    @Override\n+    protected void runClientApplication(SSLSocket socket) throws Exception {\n+        try {\n+            String clientData = \"Hi, I am client\";\n+            BufferedWriter os = new BufferedWriter(\n+                    new OutputStreamWriter(socket.getOutputStream()));\n+            os.write(clientData, 0, clientData.length());\n+            os.newLine();\n+            os.flush();\n+\n+            System.out.println(\"Reading data from server\");\n+            BufferedReader is = new BufferedReader(\n+                    new InputStreamReader(socket.getInputStream()));\n+            String data = is.readLine();\n+            System.out.println(\"Received Data from server: \" + data);\n@@ -101,0 +106,1 @@\n+            throw new RuntimeException(\"The expected client exception was not thrown.\");\n@@ -102,4 +108,3 @@\n-    private class ClientSocket extends Thread{\n-        boolean isDone = false;\n-        int serverPort = 0;\n-        Exception clientException;\n+        } catch (SSLProtocolException | SSLHandshakeException sslhe) {\n+            System.err.println(\"Client had unexpected SSL exception: \" + sslhe);\n+            throw sslhe;\n@@ -107,3 +112,3 @@\n-        public ClientSocket(int serverPort) {\n-            this.serverPort = serverPort;\n-        }\n+        } catch (SSLException | SocketTimeoutException ssle) {\n+            \/\/ the expected exception, ignore it\n+            System.out.println(\"Caught expected client exception: \" + ssle);\n@@ -111,49 +116,2 @@\n-        @Override\n-        public void run() {\n-            SSLSocket clientSocket = null;\n-            String clientData = \"Hi, I am client\";\n-            try {\n-                System.err.println(\n-                        \"Connecting to server at port \" + serverPort);\n-                SSLSocketFactory sslSocketFactory =\n-                        createClientSSLContext().getSocketFactory();\n-                clientSocket = (SSLSocket)sslSocketFactory.createSocket(\n-                        InetAddress.getLocalHost(), serverPort);\n-                clientSocket.setSoLinger(true, 3);\n-                clientSocket.setSoTimeout(100);\n-\n-\n-                System.err.println(\"Sending data to server ...\");\n-\n-                BufferedWriter os = new BufferedWriter(\n-                        new OutputStreamWriter(clientSocket.getOutputStream()));\n-                os.write(clientData, 0, clientData.length());\n-                os.newLine();\n-                os.flush();\n-\n-                System.err.println(\"Reading data from server\");\n-                BufferedReader is = new BufferedReader(\n-                        new InputStreamReader(clientSocket.getInputStream()));\n-                String data = is.readLine();\n-                System.err.println(\"Received Data from server: \" + data);\n-            } catch (SSLProtocolException | SSLHandshakeException sslhe) {\n-                clientException = sslhe;\n-                System.err.println(\"unexpected client exception: \" + sslhe);\n-            } catch (SSLException | SocketTimeoutException ssle) {\n-                \/\/ the expected exception, ignore it\n-                System.err.println(\"expected client exception: \" + ssle);\n-            } catch (Exception e) {\n-                clientException = e;\n-                System.err.println(\"unexpected client exception: \" + e);\n-            } finally {\n-                if (clientSocket != null) {\n-                    try {\n-                        clientSocket.close();\n-                        System.err.println(\"client socket closed\");\n-                    } catch (IOException ioe) {\n-                        clientException = ioe;\n-                    }\n-                }\n-\n-                isDone = true;\n-            }\n+        } finally {\n+            waitForClient.countDown();\n","filename":"test\/jdk\/sun\/security\/ssl\/SSLSocketImpl\/SocketExceptionForSocketIssues.java","additions":54,"deletions":96,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -64,107 +64,0 @@\n-    private static final String[] CA_CERTS = new String[] {\n-            \/\/ SHA256withECDSA, curve secp256r1\n-            \/\/ Validity\n-            \/\/     Not Before: May 22 07:18:16 2018 GMT\n-            \/\/     Not After : May 17 07:18:16 2038 GMT\n-            \/\/ Subject Key Identifier:\n-            \/\/     60:CF:BD:73:FF:FA:1A:30:D2:A4:EC:D3:49:71:46:EF:1A:35:A0:86\n-            \"-----BEGIN CERTIFICATE-----\\n\" +\n-            \"MIIBvjCCAWOgAwIBAgIJAIvFG6GbTroCMAoGCCqGSM49BAMCMDsxCzAJBgNVBAYT\\n\" +\n-            \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-            \"ZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMDsxCzAJBgNVBAYTAlVT\\n\" +\n-            \"MQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZjZTBZ\\n\" +\n-            \"MBMGByqGSM49AgEGCCqGSM49AwEHA0IABBz1WeVb6gM2mh85z3QlvaB\/l11b5h0v\\n\" +\n-            \"LIzmkC3DKlVukZT+ltH2Eq1oEkpXuf7QmbM0ibrUgtjsWH3mULfmcWmjUDBOMB0G\\n\" +\n-            \"A1UdDgQWBBRgz71z\/\/oaMNKk7NNJcUbvGjWghjAfBgNVHSMEGDAWgBRgz71z\/\/oa\\n\" +\n-            \"MNKk7NNJcUbvGjWghjAMBgNVHRMEBTADAQH\/MAoGCCqGSM49BAMCA0kAMEYCIQCG\\n\" +\n-            \"6wluh1r2\/T6L31mZXRKf9JxeSf9pIzoLj+8xQeUChQIhAJ09wAi1kV8yePLh2FD9\\n\" +\n-            \"2YEHlSQUAbwwqCDEVB5KxaqP\\n\" +\n-            \"-----END CERTIFICATE-----\",\n-\n-            \/\/ SHA384withECDSA, curve secp384r1\n-            \/\/ Validity\n-            \/\/     Not Before: Jun 24 08:15:06 2019 GMT\n-            \/\/     Not After : Jun 19 08:15:06 2039 GMT\n-            \/\/ Subject Key Identifier:\n-            \/\/     0a:93:a9:a0:bf:e7:d5:48:9d:4f:89:15:c6:51:98:80:05:51:4e:4e\n-            \"-----BEGIN CERTIFICATE-----\\n\" +\n-            \"MIICCDCCAY6gAwIBAgIUCpOpoL\/n1UidT4kVxlGYgAVRTk4wCgYIKoZIzj0EAwMw\\n\" +\n-            \"OzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n-            \"VGVzdCBTZXJpdmNlMB4XDTE5MDYyNDA4MTUwNloXDTM5MDYxOTA4MTUwNlowOzEL\\n\" +\n-            \"MAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVz\\n\" +\n-            \"dCBTZXJpdmNlMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENVQN1wXWFdgC6u\/dDdiC\\n\" +\n-            \"y+WtMTF66oL\/0BSm+1ZqsogamzCryawOcHgiuXgWzx5CQ3LuOC+tDFyXpGfHuCvb\\n\" +\n-            \"dkzxPrP5n9NrR8\/uRPe5l1KOUbchviU8z9cTP+LZxnZDo1MwUTAdBgNVHQ4EFgQU\\n\" +\n-            \"SktSFArR1p\/5mXV0kyo0RxIVa\/UwHwYDVR0jBBgwFoAUSktSFArR1p\/5mXV0kyo0\\n\" +\n-            \"RxIVa\/UwDwYDVR0TAQH\/BAUwAwEB\/zAKBggqhkjOPQQDAwNoADBlAjBZvoNmq3\/v\\n\" +\n-            \"RD2gBTyvxjS9h0rsMRLHDnvul\/KWngytwGPTOBo0Y8ixQXSjdKoc3rkCMQDkiNgx\\n\" +\n-            \"IDxuHedmrLQKIPnVcthTmwv7\/\/jHiqGoKofwChMo2a1P+DQdhszmeHD\/ARQ=\\n\" +\n-            \"-----END CERTIFICATE-----\"\n-    };\n-\n-    private static final String[] EE_CERTS = new String[] {\n-            \/\/ SHA256withECDSA, curve secp256r1\n-            \/\/ Validity\n-            \/\/     Not Before: May 22 07:18:16 2018 GMT\n-            \/\/     Not After : May 17 07:18:16 2038 GMT\n-            \/\/ Authority Key Identifier:\n-            \/\/     60:CF:BD:73:FF:FA:1A:30:D2:A4:EC:D3:49:71:46:EF:1A:35:A0:86\n-            \"-----BEGIN CERTIFICATE-----\\n\" +\n-            \"MIIBqjCCAVCgAwIBAgIJAPLY8qZjgNRAMAoGCCqGSM49BAMCMDsxCzAJBgNVBAYT\\n\" +\n-            \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-            \"ZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMFUxCzAJBgNVBAYTAlVT\\n\" +\n-            \"MQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZjZTEY\\n\" +\n-            \"MBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD\\n\" +\n-            \"QgAEb+9n05qfXnfHUb0xtQJNS4JeSi6IjOfW5NqchvKnfJey9VkJzR7QHLuOESdf\\n\" +\n-            \"xlR7q8YIWgih3iWLGfB+wxHiOqMjMCEwHwYDVR0jBBgwFoAUYM+9c\/\/6GjDSpOzT\\n\" +\n-            \"SXFG7xo1oIYwCgYIKoZIzj0EAwIDSAAwRQIgWpRegWXMheiD3qFdd8kMdrkLxRbq\\n\" +\n-            \"1zj8nQMEwFTUjjQCIQDRIrAjZX+YXHN9b0SoWWLPUq0HmiFIi8RwMnO\/\/wJIGQ==\\n\" +\n-            \"-----END CERTIFICATE-----\",\n-\n-            \/\/ SHA384withECDSA, curve secp384r1\n-            \/\/ Validity\n-            \/\/     Not Before: Jun 24 08:15:06 2019 GMT\n-            \/\/     Not After : Jun 19 08:15:06 2039 GMT\n-            \/\/ Authority Key Identifier:\n-            \/\/     40:2D:AA:EE:66:AA:33:27:AD:9B:5D:52:9B:60:67:6A:2B:AD:52:D2\n-            \"-----BEGIN CERTIFICATE-----\\n\" +\n-            \"MIICEjCCAZegAwIBAgIUS3F0AqAXWRg07CnbknJzxofyBQMwCgYIKoZIzj0EAwMw\\n\" +\n-            \"OzELMAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0Ug\\n\" +\n-            \"VGVzdCBTZXJpdmNlMB4XDTE5MDYyNDA4MTUwNloXDTM5MDYxOTA4MTUwNlowVTEL\\n\" +\n-            \"MAkGA1UEBhMCVVMxDTALBgNVBAoMBEphdmExHTAbBgNVBAsMFFN1bkpTU0UgVGVz\\n\" +\n-            \"dCBTZXJpdmNlMRgwFgYDVQQDDA9SZWdyZXNzaW9uIFRlc3QwdjAQBgcqhkjOPQIB\\n\" +\n-            \"BgUrgQQAIgNiAARqElz8b6T07eyKomIinhztV3\/3XBk9bKGtJ0W+JOltjuhMmP\/w\\n\" +\n-            \"G8ASSevpgqgpi6EzpBZaaJxE3zNfkNnxXOZmQi2Ypd1uK0zRdbEOKg0XOcTTZwEj\\n\" +\n-            \"iLjYmt3O0pwpklijQjBAMB0GA1UdDgQWBBRALaruZqozJ62bXVKbYGdqK61S0jAf\\n\" +\n-            \"BgNVHSMEGDAWgBRKS1IUCtHWn\/mZdXSTKjRHEhVr9TAKBggqhkjOPQQDAwNpADBm\\n\" +\n-            \"AjEArVDFKf48xijN6huVUJzKCOP0zlWB5Js+DItIkZmLQuhciPLhLIB\/rChf3Y4C\\n\" +\n-            \"xuP4AjEAmfLhQRI0O3pifpYzYSVh2G7\/jHNG4eO+2dvgAcU+Lh2IIj\/cpLaPFSvL\\n\" +\n-            \"J8FXY9Nj\\n\" +\n-            \"-----END CERTIFICATE-----\"\n-    };\n-\n-    private static final String[] EE_KEYS = new String[] {\n-            \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgn5K03bpTLjEtFQRa\\n\" +\n-            \"JUtx22gtmGEvvSUSQdimhGthdtihRANCAARv72fTmp9ed8dRvTG1Ak1Lgl5KLoiM\\n\" +\n-            \"59bk2pyG8qd8l7L1WQnNHtAcu44RJ1\/GVHurxghaCKHeJYsZ8H7DEeI6\",\n-            \"MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDASuI9EtK29APXPipkc\\n\" +\n-            \"qDA+qwlewMjv\/OcjUJ77kP1Vz62oVF9iY9SRIyFIUju8wt+hZANiAARqElz8b6T0\\n\" +\n-            \"7eyKomIinhztV3\/3XBk9bKGtJ0W+JOltjuhMmP\/wG8ASSevpgqgpi6EzpBZaaJxE\\n\" +\n-            \"3zNfkNnxXOZmQi2Ypd1uK0zRdbEOKg0XOcTTZwEjiLjYmt3O0pwpklg=\"\n-    };\n-\n-    private static final String[] EE_ALGS = new String[] {\n-            \"EC\",\n-            \"EC\"\n-    };\n-\n-    private static final String[] EE_ALIASES = new String[] {\n-            \"EC-SHA256\",\n-            \"EC-SHA384\"\n-    };\n-\n-    private static final Map<Integer, String> SIG_SCHEMES_MAP = Map.of(\n-            0x0403, \"ecdsa_secp256r1_sha256\",\n-            0x0503, \"ecdsa_secp384r1_sha384\");\n-\n-    private static final int TLS_HS_CLI_HELLO = 1;\n@@ -172,1 +65,0 @@\n-    private static final int HELLO_EXT_SIG_ALGS = 13;\n@@ -181,7 +73,5 @@\n-    public KeyManager createClientKeyManager() throws Exception {\n-        return SSLContextTemplate.createKeyManager(\n-                EE_CERTS,\n-                EE_KEYS,\n-                EE_ALGS,\n-                EE_ALIASES,\n-                getServerContextParameters());\n+    @Override\n+    protected KeyManager createClientKeyManager() throws Exception {\n+        return createKeyManager(\n+                new Cert[]{Cert.EE_ECDSA_SECP256R1, Cert.EE_ECDSA_SECP384R1},\n+                getClientContextParameters());\n@@ -192,2 +82,2 @@\n-        return SSLContextTemplate.createTrustManager(\n-                CA_CERTS,\n+        return createTrustManager(\n+                new Cert[]{Cert.CA_ECDSA_SECP256R1, Cert.CA_ECDSA_SECP384R1},\n@@ -199,5 +89,2 @@\n-        return SSLContextTemplate.createKeyManager(\n-                EE_CERTS,\n-                EE_KEYS,\n-                EE_ALGS,\n-                EE_ALIASES,\n+        return createKeyManager(\n+                new Cert[]{Cert.EE_ECDSA_SECP256R1, Cert.EE_ECDSA_SECP384R1},\n@@ -209,2 +96,2 @@\n-        return SSLContextTemplate.createTrustManager(\n-                CA_CERTS,\n+        return createTrustManager(\n+                new Cert[]{Cert.CA_ECDSA_SECP256R1, Cert.CA_ECDSA_SECP384R1},\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/SigAlgosExtTestWithTLS12.java","additions":11,"deletions":124,"binary":false,"changes":135,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,2 +40,0 @@\n-import java.net.*;\n-import java.io.*;\n@@ -43,5 +41,0 @@\n-import java.security.*;\n-import java.security.cert.*;\n-import java.security.spec.*;\n-import java.security.interfaces.*;\n-import java.util.Base64;\n@@ -59,2 +52,4 @@\n-    protected SSLContext createServerSSLContext() throws Exception {\n-        return generateSSLContext();\n+    public SSLContext createServerSSLContext() throws Exception {\n+        return createSSLContext(new Cert[]{Cert.CA_ECDSA_SECP256R1},\n+                new Cert[]{Cert.EE_ECDSA_SECP256R1},\n+                new ContextParameters(\"TLSv1.3\", \"PKIX\", \"NewSunX509\"));\n@@ -69,118 +64,4 @@\n-    protected SSLContext createClientSSLContext() throws Exception {\n-        return generateSSLContext();\n-    }\n-\n-    \/*\n-     * =============================================================\n-     * The remainder is just support stuff\n-     *\/\n-\n-    \/\/ Certificates and key used in the test.\n-    \/\/\n-    \/\/ Trusted Certificate.\n-    static String trustedCertStr =\n-        \/\/ SHA256withECDSA, curve prime256v1\n-        \/\/ Validity\n-        \/\/     Not Before: May 22 07:18:16 2018 GMT\n-        \/\/     Not After : May 17 07:18:16 2038 GMT\n-        \/\/ Subject Key Identifier:\n-        \/\/     60:CF:BD:73:FF:FA:1A:30:D2:A4:EC:D3:49:71:46:EF:1A:35:A0:86\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIBvjCCAWOgAwIBAgIJAIvFG6GbTroCMAoGCCqGSM49BAMCMDsxCzAJBgNVBAYT\\n\" +\n-        \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-        \"ZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMDsxCzAJBgNVBAYTAlVT\\n\" +\n-        \"MQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZjZTBZ\\n\" +\n-        \"MBMGByqGSM49AgEGCCqGSM49AwEHA0IABBz1WeVb6gM2mh85z3QlvaB\/l11b5h0v\\n\" +\n-        \"LIzmkC3DKlVukZT+ltH2Eq1oEkpXuf7QmbM0ibrUgtjsWH3mULfmcWmjUDBOMB0G\\n\" +\n-        \"A1UdDgQWBBRgz71z\/\/oaMNKk7NNJcUbvGjWghjAfBgNVHSMEGDAWgBRgz71z\/\/oa\\n\" +\n-        \"MNKk7NNJcUbvGjWghjAMBgNVHRMEBTADAQH\/MAoGCCqGSM49BAMCA0kAMEYCIQCG\\n\" +\n-        \"6wluh1r2\/T6L31mZXRKf9JxeSf9pIzoLj+8xQeUChQIhAJ09wAi1kV8yePLh2FD9\\n\" +\n-        \"2YEHlSQUAbwwqCDEVB5KxaqP\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-        \/\/ -----BEGIN PRIVATE KEY-----\n-        \/\/ MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQg\/HcHdoLJCdq3haVd\n-        \/\/ XZTSKP00YzM3xX97l98vGL\/RI1KhRANCAAQc9VnlW+oDNpofOc90Jb2gf5ddW+Yd\n-        \/\/ LyyM5pAtwypVbpGU\/pbR9hKtaBJKV7n+0JmzNIm61ILY7Fh95lC35nFp\n-        \/\/ -----END PRIVATE KEY-----\n-\n-    \/\/ End entity certificate.\n-    static String targetCertStr =\n-        \/\/ SHA256withECDSA, curve prime256v1\n-        \/\/ Validity\n-        \/\/     Not Before: May 22 07:18:16 2018 GMT\n-        \/\/     Not After : May 17 07:18:16 2038 GMT\n-        \/\/ Authority Key Identifier:\n-        \/\/     60:CF:BD:73:FF:FA:1A:30:D2:A4:EC:D3:49:71:46:EF:1A:35:A0:86\n-        \"-----BEGIN CERTIFICATE-----\\n\" +\n-        \"MIIBqjCCAVCgAwIBAgIJAPLY8qZjgNRAMAoGCCqGSM49BAMCMDsxCzAJBgNVBAYT\\n\" +\n-        \"AlVTMQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZj\\n\" +\n-        \"ZTAeFw0xODA1MjIwNzE4MTZaFw0zODA1MTcwNzE4MTZaMFUxCzAJBgNVBAYTAlVT\\n\" +\n-        \"MQ0wCwYDVQQKDARKYXZhMR0wGwYDVQQLDBRTdW5KU1NFIFRlc3QgU2VyaXZjZTEY\\n\" +\n-        \"MBYGA1UEAwwPUmVncmVzc2lvbiBUZXN0MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD\\n\" +\n-        \"QgAEb+9n05qfXnfHUb0xtQJNS4JeSi6IjOfW5NqchvKnfJey9VkJzR7QHLuOESdf\\n\" +\n-        \"xlR7q8YIWgih3iWLGfB+wxHiOqMjMCEwHwYDVR0jBBgwFoAUYM+9c\/\/6GjDSpOzT\\n\" +\n-        \"SXFG7xo1oIYwCgYIKoZIzj0EAwIDSAAwRQIgWpRegWXMheiD3qFdd8kMdrkLxRbq\\n\" +\n-        \"1zj8nQMEwFTUjjQCIQDRIrAjZX+YXHN9b0SoWWLPUq0HmiFIi8RwMnO\/\/wJIGQ==\\n\" +\n-        \"-----END CERTIFICATE-----\";\n-\n-    \/\/ Private key in the format of PKCS#8.\n-    static String targetPrivateKey =\n-        \/\/\n-        \/\/ EC private key related to cert endEntityCertStrs[0].\n-        \/\/\n-        \"MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgn5K03bpTLjEtFQRa\\n\" +\n-        \"JUtx22gtmGEvvSUSQdimhGthdtihRANCAARv72fTmp9ed8dRvTG1Ak1Lgl5KLoiM\\n\" +\n-        \"59bk2pyG8qd8l7L1WQnNHtAcu44RJ1\/GVHurxghaCKHeJYsZ8H7DEeI6\";\n-\n-    static char passphrase[] = \"passphrase\".toCharArray();\n-\n-    \/\/ Create the SSLContext instance.\n-    private static SSLContext generateSSLContext() throws Exception {\n-\n-        \/\/ generate certificate from cert string\n-        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-\n-        \/\/ create a key store\n-        KeyStore ks = KeyStore.getInstance(\"JKS\");\n-        ks.load(null, null);\n-\n-        \/\/ import the trused cert\n-        X509Certificate trusedCert = null;\n-        ByteArrayInputStream is =\n-                new ByteArrayInputStream(trustedCertStr.getBytes());\n-        trusedCert = (X509Certificate)cf.generateCertificate(is);\n-        is.close();\n-\n-        ks.setCertificateEntry(\"Trusted EC Signer\", trusedCert);\n-\n-        \/\/ generate the private key.\n-        PKCS8EncodedKeySpec priKeySpec = new PKCS8EncodedKeySpec(\n-                            Base64.getMimeDecoder().decode(targetPrivateKey));\n-        KeyFactory kf = KeyFactory.getInstance(\"EC\");\n-        ECPrivateKey priKey =\n-                (ECPrivateKey)kf.generatePrivate(priKeySpec);\n-\n-        \/\/ generate certificate chain\n-        is = new ByteArrayInputStream(targetCertStr.getBytes());\n-        X509Certificate keyCert = (X509Certificate)cf.generateCertificate(is);\n-        is.close();\n-\n-        X509Certificate[] chain = new X509Certificate[2];\n-        chain[0] = keyCert;\n-        chain[1] = trusedCert;\n-\n-        \/\/ import the key entry and the chain\n-        ks.setKeyEntry(\"TheKey\", priKey, passphrase, chain);\n-\n-        \/\/ create SSL context\n-        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"PKIX\");\n-        tmf.init(ks);\n-\n-        KeyManagerFactory kmf = KeyManagerFactory.getInstance(\"NewSunX509\");\n-        kmf.init(ks, passphrase);\n-\n-        SSLContext ctx = SSLContext.getInstance(\"TLSv1.3\");\n-        ctx.init(kmf.getKeyManagers(), tmf.getTrustManagers(), null);\n-        ks = null;\n-\n-        return ctx;\n+    public SSLContext createClientSSLContext() throws Exception {\n+        return createSSLContext(new Cert[]{Cert.CA_ECDSA_SECP256R1},\n+                new Cert[]{Cert.EE_ECDSA_SECP256R1},\n+                new ContextParameters(\"TLSv1.3\", \"PKIX\", \"NewSunX509\"));\n","filename":"test\/jdk\/sun\/security\/ssl\/SignatureScheme\/Tls13NamedGroups.java","additions":9,"deletions":128,"binary":false,"changes":137,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import java.net.InetAddress;\n@@ -39,1 +38,1 @@\n-import java.util.Arrays;\n+import java.util.concurrent.CyclicBarrier;\n@@ -46,1 +45,1 @@\n-public class TooManyCAs implements SSLContextTemplate {\n+public class TooManyCAs extends SSLSocketTemplate {\n@@ -58,0 +57,6 @@\n+    \/*\n+     * Used to synchronize client and server; there were intermittent\n+     * failures on Windows due to the connection being killed.\n+     *\/\n+    private final CyclicBarrier barrier = new CyclicBarrier(2);\n+\n@@ -62,0 +67,6 @@\n+\n+        System.out.printf(\"Testing%n\\tclient protocols: %s%n\\t\" +\n+                \"server protocols: %s%n\\tneed client auth: %s%n\",\n+                String.join(\", \", clientProtocols),\n+                String.join(\", \", serverProtocols),\n+                needClientAuth);\n@@ -64,5 +75,4 @@\n-    \/\/ Servers are configured before clients, increment test case after.\n-    void configureClientSocket(SSLSocket clientSocket) {\n-        System.err.print(\"Setting client protocol(s): \");\n-        Arrays.stream(clientProtocols).forEachOrdered(System.err::print);\n-        System.err.println();\n+    @Override\n+    protected void configureClientSocket(SSLSocket clientSocket) {\n+        System.out.println(\"Setting client protocol(s): \"\n+                + String.join(\",\", clientProtocols));\n@@ -73,4 +83,8 @@\n-    void configureServerSocket(SSLServerSocket serverSocket) {\n-        System.err.print(\"Setting server protocol(s): \");\n-        Arrays.stream(serverProtocols).forEachOrdered(System.err::print);\n-        System.err.println();\n+    @Override\n+    protected void configureServerSocket(SSLServerSocket serverSocket) {\n+        serverSocket.setNeedClientAuth(needClientAuth);\n+        serverSocket.setEnableSessionCreation(true);\n+        serverSocket.setUseClientMode(false);\n+\n+        System.out.println(\"Setting server protocol(s): \"\n+                + String.join(\",\", serverProtocols));\n@@ -79,3 +93,0 @@\n-        if (needClientAuth) {\n-            serverSocket.setNeedClientAuth(true);\n-        }\n@@ -85,3 +96,2 @@\n-    public TrustManager createClientTrustManager() throws Exception {\n-        TrustManager trustManager =\n-                SSLContextTemplate.super.createClientTrustManager();\n+    protected TrustManager createClientTrustManager() throws Exception {\n+        TrustManager trustManager = super.createClientTrustManager();\n@@ -93,3 +103,2 @@\n-    public TrustManager createServerTrustManager() throws Exception {\n-        TrustManager trustManager =\n-                SSLContextTemplate.super.createServerTrustManager();\n+    protected TrustManager createServerTrustManager() throws Exception {\n+        TrustManager trustManager = super.createServerTrustManager();\n@@ -110,4 +119,2 @@\n-    private void run() throws Exception {\n-        SSLServerSocket listenSocket = null;\n-        SSLSocket serverSocket = null;\n-        ClientSocket clientSocket = null;\n+    @Override\n+    protected void runServerApplication(SSLSocket socket) throws Exception {\n@@ -115,22 +122,1 @@\n-            SSLServerSocketFactory serversocketfactory =\n-                    createServerSSLContext().getServerSocketFactory();\n-            listenSocket =\n-                    (SSLServerSocket)serversocketfactory.createServerSocket(0);\n-            listenSocket.setNeedClientAuth(false);\n-            listenSocket.setEnableSessionCreation(true);\n-            listenSocket.setUseClientMode(false);\n-            configureServerSocket(listenSocket);\n-\n-            System.err.println(\"Starting client\");\n-            clientSocket = new ClientSocket(listenSocket.getLocalPort());\n-            clientSocket.start();\n-\n-            System.err.println(\"Accepting client requests\");\n-            serverSocket = (SSLSocket)listenSocket.accept();\n-\n-            if (!clientSocket.isDone) {\n-                System.err.println(\"Waiting 3 seconds for client \");\n-                Thread.sleep(3000);\n-            }\n-\n-            System.err.println(\"Sending data to client ...\");\n+            System.out.println(\"Sending data to client ...\");\n@@ -139,1 +125,1 @@\n-                    new OutputStreamWriter(serverSocket.getOutputStream()));\n+                    new OutputStreamWriter(socket.getOutputStream()));\n@@ -144,11 +130,2 @@\n-            if (listenSocket != null) {\n-                listenSocket.close();\n-            }\n-\n-            if (serverSocket != null) {\n-                serverSocket.close();\n-            }\n-        }\n-\n-        if (clientSocket != null && clientSocket.clientException != null) {\n-            throw clientSocket.clientException;\n+            barrier.await();\n+            System.out.println(\"Server done\");\n@@ -158,4 +135,5 @@\n-    private class ClientSocket extends Thread{\n-        boolean isDone = false;\n-        int serverPort = 0;\n-        Exception clientException;\n+    @Override\n+    protected void runClientApplication(SSLSocket socket) throws Exception {\n+        try {\n+            String clientData = \"Hi, I am client\";\n+            System.out.println(\"Sending data to server ...\");\n@@ -163,3 +141,5 @@\n-        public ClientSocket(int serverPort) {\n-            this.serverPort = serverPort;\n-        }\n+            BufferedWriter os = new BufferedWriter(\n+                    new OutputStreamWriter(socket.getOutputStream()));\n+            os.write(clientData, 0, clientData.length());\n+            os.newLine();\n+            os.flush();\n@@ -167,41 +147,8 @@\n-        @Override\n-        public void run() {\n-            SSLSocket clientSocket = null;\n-            String clientData = \"Hi, I am client\";\n-            try {\n-                System.err.println(\n-                        \"Connecting to server at port \" + serverPort);\n-                SSLSocketFactory sslSocketFactory =\n-                        createClientSSLContext().getSocketFactory();\n-                clientSocket = (SSLSocket)sslSocketFactory.createSocket(\n-                        InetAddress.getLocalHost(), serverPort);\n-                configureClientSocket(clientSocket);\n-\n-                System.err.println(\"Sending data to server ...\");\n-\n-                BufferedWriter os = new BufferedWriter(\n-                        new OutputStreamWriter(clientSocket.getOutputStream()));\n-                os.write(clientData, 0, clientData.length());\n-                os.newLine();\n-                os.flush();\n-\n-                System.err.println(\"Reading data from server\");\n-                BufferedReader is = new BufferedReader(\n-                        new InputStreamReader(clientSocket.getInputStream()));\n-                String data = is.readLine();\n-                System.err.println(\"Received Data from server: \" + data);\n-            } catch (Exception e) {\n-                clientException = e;\n-                System.err.println(\"unexpected client exception: \" + e);\n-            } finally {\n-                if (clientSocket != null) {\n-                    try {\n-                        clientSocket.close();\n-                        System.err.println(\"client socket closed\");\n-                    } catch (IOException ioe) {\n-                        clientException = ioe;\n-                    }\n-                }\n-\n-                isDone = true;\n-            }\n+            System.out.println(\"Reading data from server\");\n+            BufferedReader is = new BufferedReader(\n+                    new InputStreamReader(socket.getInputStream()));\n+            String data = is.readLine();\n+            System.out.println(\"Received Data from server: \" + data);\n+        } finally {\n+            barrier.await();\n+            System.out.println(\"client done.\");\n@@ -276,1 +223,1 @@\n-                    i * trustedCerts.length + 0, trustedCerts.length);\n+                    i * trustedCerts.length, trustedCerts.length);\n","filename":"test\/jdk\/sun\/security\/ssl\/X509TrustManagerImpl\/TooManyCAs.java","additions":56,"deletions":109,"binary":false,"changes":165,"status":"modified"}]}