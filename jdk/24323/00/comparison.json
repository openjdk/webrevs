{"files":[{"patch":"@@ -329,1 +329,1 @@\n-  __ clinit_barrier(klass, r15_thread, &L_skip_barrier \/*L_fast_path*\/);\n+  __ clinit_barrier(klass, &L_skip_barrier \/*L_fast_path*\/);\n@@ -485,1 +485,1 @@\n-  __ safepoint_poll(*code_stub->entry(), r15_thread, true \/* at_return *\/, true \/* in_nmethod *\/);\n+  __ safepoint_poll(*code_stub->entry(), true \/* at_return *\/, true \/* in_nmethod *\/);\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -65,2 +65,1 @@\n-    const Register thread = r15_thread;\n-    lightweight_lock(disp_hdr, obj, hdr, thread, tmp, slow_case);\n+    lightweight_lock(disp_hdr, obj, hdr, tmp, slow_case);\n@@ -131,1 +130,1 @@\n-    lightweight_unlock(obj, disp_hdr, r15_thread, hdr, slow_case);\n+    lightweight_unlock(obj, disp_hdr, hdr, slow_case);\n","filename":"src\/hotspot\/cpu\/x86\/c1_MacroAssembler_x86.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -54,1 +54,1 @@\n-  const Register thread = r15_thread; \/\/ is callee-saved register (Visual C++ calling conventions)\n+  const Register thread = r15_thread;\n@@ -69,1 +69,1 @@\n-    set_last_Java_frame(thread, noreg, rbp, nullptr, rscratch1);\n+    set_last_Java_frame(noreg, rbp, nullptr, rscratch1);\n@@ -73,1 +73,1 @@\n-    set_last_Java_frame(thread, noreg, rbp, the_pc, rscratch1);\n+    set_last_Java_frame(noreg, rbp, the_pc, rscratch1);\n@@ -87,1 +87,1 @@\n-    get_thread(rax);\n+    get_thread_slow(rax);\n@@ -96,1 +96,1 @@\n-  reset_last_Java_frame(thread, true);\n+  reset_last_Java_frame(true);\n@@ -123,1 +123,1 @@\n-    get_vm_result(oop_result1, thread);\n+    get_vm_result(oop_result1);\n@@ -126,1 +126,1 @@\n-    get_vm_result_2(metadata_result, thread);\n+    get_vm_result_2(metadata_result);\n@@ -718,2 +718,1 @@\n-\n-  __ set_last_Java_frame(thread, noreg, rbp, nullptr, rscratch1);\n+  __ set_last_Java_frame(noreg, rbp, nullptr, rscratch1);\n@@ -729,1 +728,1 @@\n-    __ get_thread(rax);\n+    __ get_thread_slow(rax);\n@@ -737,1 +736,1 @@\n-  __ reset_last_Java_frame(thread, true);\n+  __ reset_last_Java_frame(true);\n","filename":"src\/hotspot\/cpu\/x86\/c1_Runtime1_x86.cpp","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-    __ safepoint_poll(L_safepoint_poll_slow_path, r15_thread, true \/* at_return *\/, false \/* in_nmethod *\/);\n+    __ safepoint_poll(L_safepoint_poll_slow_path, true \/* at_return *\/, false \/* in_nmethod *\/);\n@@ -308,1 +308,1 @@\n-    __ reset_last_Java_frame(r15_thread, true);\n+    __ reset_last_Java_frame(true);\n","filename":"src\/hotspot\/cpu\/x86\/downcallLinker_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -299,1 +299,0 @@\n-                                             Register java_thread,\n@@ -322,1 +321,1 @@\n-  MacroAssembler::call_VM_base(oop_result, noreg, last_java_sp,\n+  MacroAssembler::call_VM_base(oop_result, last_java_sp,\n@@ -382,1 +381,1 @@\n-void InterpreterMacroAssembler::check_and_handle_popframe(Register java_thread) {\n+void InterpreterMacroAssembler::check_and_handle_popframe() {\n@@ -392,1 +391,1 @@\n-    movl(pop_cond, Address(java_thread, JavaThread::popframe_condition_offset()));\n+    movl(pop_cond, Address(r15_thread, JavaThread::popframe_condition_offset()));\n@@ -433,1 +432,1 @@\n-void InterpreterMacroAssembler::check_and_handle_earlyret(Register java_thread) {\n+void InterpreterMacroAssembler::check_and_handle_earlyret() {\n@@ -813,1 +812,1 @@\n-  safepoint_poll(slow_path, rthread, true \/* at_return *\/, false \/* in_nmethod *\/);\n+  safepoint_poll(slow_path, true \/* at_return *\/, false \/* in_nmethod *\/);\n@@ -817,1 +816,1 @@\n-  set_last_Java_frame(rthread, noreg, rbp, (address)pc(), rscratch1);\n+  set_last_Java_frame(noreg, rbp, (address)pc(), rscratch1);\n@@ -819,1 +818,1 @@\n-  reset_last_Java_frame(rthread, true);\n+  reset_last_Java_frame(true);\n@@ -1034,2 +1033,1 @@\n-      const Register thread = r15_thread;\n-      lightweight_lock(lock_reg, obj_reg, swap_reg, thread, tmp_reg, slow_case);\n+      lightweight_lock(lock_reg, obj_reg, swap_reg, tmp_reg, slow_case);\n@@ -1144,1 +1142,1 @@\n-      lightweight_unlock(obj_reg, swap_reg, r15_thread, header_reg, slow_case);\n+      lightweight_unlock(obj_reg, swap_reg, header_reg, slow_case);\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-                            Register java_thread,\n@@ -61,2 +60,2 @@\n- virtual void check_and_handle_popframe(Register java_thread);\n- virtual void check_and_handle_earlyret(Register java_thread);\n+ virtual void check_and_handle_popframe();\n+ virtual void check_and_handle_earlyret();\n","filename":"src\/hotspot\/cpu\/x86\/interp_masm_x86.hpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -727,11 +727,0 @@\n-void MacroAssembler::reset_last_Java_frame(bool clear_fp) {\n-  reset_last_Java_frame(r15_thread, clear_fp);\n-}\n-\n-void MacroAssembler::set_last_Java_frame(Register last_java_sp,\n-                                         Register last_java_fp,\n-                                         address  last_java_pc,\n-                                         Register rscratch) {\n-  set_last_Java_frame(r15_thread, last_java_sp, last_java_fp, last_java_pc, rscratch);\n-}\n-\n@@ -1490,2 +1479,1 @@\n-  Register thread = LP64_ONLY(r15_thread) NOT_LP64(noreg);\n-  call_VM_base(oop_result, thread, last_java_sp, entry_point, number_of_arguments, check_exceptions);\n+  call_VM_base(oop_result, last_java_sp, entry_point, number_of_arguments, check_exceptions);\n@@ -1536,2 +1524,1 @@\n-  Register thread = LP64_ONLY(r15_thread) NOT_LP64(noreg);\n-  MacroAssembler::call_VM_base(oop_result, thread, last_java_sp, entry_point, number_of_arguments, check_exceptions);\n+  MacroAssembler::call_VM_base(oop_result, last_java_sp, entry_point, number_of_arguments, check_exceptions);\n@@ -1578,1 +1565,0 @@\n-                                  Register java_thread,\n@@ -1583,9 +1569,2 @@\n-  \/\/ determine java_thread register\n-  if (!java_thread->is_valid()) {\n-#ifdef _LP64\n-    java_thread = r15_thread;\n-#else\n-    java_thread = rdi;\n-    get_thread(java_thread);\n-#endif \/\/ LP64\n-  }\n+  Register java_thread = r15_thread;\n+\n@@ -1598,1 +1577,0 @@\n-  LP64_ONLY(assert(java_thread == r15_thread, \"unexpected register\"));\n@@ -1602,1 +1580,1 @@\n-  LP64_ONLY(if (UseCompressedOops && !TraceBytecodes) verify_heapbase(\"call_VM_base: heap base corrupted?\");)\n+  if (UseCompressedOops && !TraceBytecodes) verify_heapbase(\"call_VM_base: heap base corrupted?\");\n@@ -1610,2 +1588,1 @@\n-  NOT_LP64(push(java_thread); number_of_arguments++);\n-  LP64_ONLY(mov(c_rarg0, r15_thread));\n+  mov(c_rarg0, r15_thread);\n@@ -1617,1 +1594,1 @@\n-  set_last_Java_frame(java_thread, last_java_sp, rbp, nullptr, rscratch1);\n+  set_last_Java_frame(last_java_sp, rbp, nullptr, rscratch1);\n@@ -1622,5 +1599,0 @@\n-  \/\/ restore the thread (cannot use the pushed argument since arguments\n-  \/\/ may be overwritten by C code generated by an optimizing compiler);\n-  \/\/ however can use the register value directly if it is callee saved.\n-  if (LP64_ONLY(true ||) java_thread == rdi || java_thread == rsi) {\n-    \/\/ rdi & rsi (also r15) are callee saved -> nothing to do\n@@ -1628,13 +1600,9 @@\n-    guarantee(java_thread != rax, \"change this code\");\n-    push(rax);\n-    { Label L;\n-      get_thread(rax);\n-      cmpptr(java_thread, rax);\n-      jcc(Assembler::equal, L);\n-      STOP(\"MacroAssembler::call_VM_base: rdi not callee saved?\");\n-      bind(L);\n-    }\n-    pop(rax);\n-#endif\n-  } else {\n-    get_thread(java_thread);\n+  \/\/ Check that thread register is not clobbered.\n+  guarantee(java_thread != rax, \"change this code\");\n+  push(rax);\n+  { Label L;\n+    get_thread_slow(rax);\n+    cmpptr(java_thread, rax);\n+    jcc(Assembler::equal, L);\n+    STOP(\"MacroAssembler::call_VM_base: java_thread not callee saved?\");\n+    bind(L);\n@@ -1642,0 +1610,3 @@\n+  pop(rax);\n+#endif\n+\n@@ -1644,1 +1615,1 @@\n-  reset_last_Java_frame(java_thread, true);\n+  reset_last_Java_frame(true);\n@@ -1647,2 +1618,2 @@\n-  check_and_handle_popframe(java_thread);\n-  check_and_handle_earlyret(java_thread);\n+  check_and_handle_popframe();\n+  check_and_handle_earlyret();\n@@ -1652,5 +1623,1 @@\n-    cmpptr(Address(java_thread, Thread::pending_exception_offset()), NULL_WORD);\n-#ifndef _LP64\n-    jump_cc(Assembler::notEqual,\n-            RuntimeAddress(StubRoutines::forward_exception_entry()));\n-#else\n+    cmpptr(Address(r15_thread, Thread::pending_exception_offset()), NULL_WORD);\n@@ -1665,1 +1632,0 @@\n-#endif \/\/ LP64\n@@ -1670,1 +1636,1 @@\n-    get_vm_result(oop_result, java_thread);\n+    get_vm_result(oop_result);\n@@ -1675,0 +1641,4 @@\n+  \/\/ Calculate the value for last_Java_sp somewhat subtle.\n+  \/\/ call_VM does an intermediate call which places a return address on\n+  \/\/ the stack just under the stack pointer as the user finished with it.\n+  \/\/ This allows use to retrieve last_Java_pc from last_Java_sp[-1].\n@@ -1676,11 +1646,0 @@\n-  \/\/ Calculate the value for last_Java_sp\n-  \/\/ somewhat subtle. call_VM does an intermediate call\n-  \/\/ which places a return address on the stack just under the\n-  \/\/ stack pointer as the user finished with it. This allows\n-  \/\/ use to retrieve last_Java_pc from last_Java_sp[-1].\n-  \/\/ On 32bit we then have to push additional args on the stack to accomplish\n-  \/\/ the actual requested call. On 64bit call_VM only can use register args\n-  \/\/ so the only extra space is the return address that call_VM created.\n-  \/\/ This hopefully explains the calculations here.\n-\n-#ifdef _LP64\n@@ -1689,5 +1648,0 @@\n-#else\n-  lea(rax, Address(rsp, (1 + number_of_arguments) * wordSize));\n-#endif \/\/ LP64\n-\n-  call_VM_base(oop_result, noreg, rax, entry_point, number_of_arguments, check_exceptions);\n@@ -1695,0 +1649,1 @@\n+  call_VM_base(oop_result, rax, entry_point, number_of_arguments, check_exceptions);\n@@ -1771,3 +1726,3 @@\n-void MacroAssembler::get_vm_result(Register oop_result, Register java_thread) {\n-  movptr(oop_result, Address(java_thread, JavaThread::vm_result_offset()));\n-  movptr(Address(java_thread, JavaThread::vm_result_offset()), NULL_WORD);\n+void MacroAssembler::get_vm_result(Register oop_result) {\n+  movptr(oop_result, Address(r15_thread, JavaThread::vm_result_offset()));\n+  movptr(Address(r15_thread, JavaThread::vm_result_offset()), NULL_WORD);\n@@ -1777,3 +1732,3 @@\n-void MacroAssembler::get_vm_result_2(Register metadata_result, Register java_thread) {\n-  movptr(metadata_result, Address(java_thread, JavaThread::vm_result_2_offset()));\n-  movptr(Address(java_thread, JavaThread::vm_result_2_offset()), NULL_WORD);\n+void MacroAssembler::get_vm_result_2(Register metadata_result) {\n+  movptr(metadata_result, Address(r15_thread, JavaThread::vm_result_2_offset()));\n+  movptr(Address(r15_thread, JavaThread::vm_result_2_offset()), NULL_WORD);\n@@ -1782,1 +1737,1 @@\n-void MacroAssembler::check_and_handle_earlyret(Register java_thread) {\n+void MacroAssembler::check_and_handle_earlyret() {\n@@ -1785,1 +1740,1 @@\n-void MacroAssembler::check_and_handle_popframe(Register java_thread) {\n+void MacroAssembler::check_and_handle_popframe() {\n@@ -3173,5 +3128,1 @@\n-void MacroAssembler::reset_last_Java_frame(Register java_thread, bool clear_fp) { \/\/ determine java_thread register\n-  if (!java_thread->is_valid()) {\n-    java_thread = rdi;\n-    get_thread(java_thread);\n-  }\n+void MacroAssembler::reset_last_Java_frame(bool clear_fp) { \/\/ determine java_thread register\n@@ -3179,1 +3130,1 @@\n-  movptr(Address(java_thread, JavaThread::last_Java_sp_offset()), NULL_WORD);\n+  movptr(Address(r15_thread, JavaThread::last_Java_sp_offset()), NULL_WORD);\n@@ -3183,1 +3134,1 @@\n-    movptr(Address(java_thread, JavaThread::last_Java_fp_offset()), NULL_WORD);\n+    movptr(Address(r15_thread, JavaThread::last_Java_fp_offset()), NULL_WORD);\n@@ -3186,1 +3137,1 @@\n-  movptr(Address(java_thread, JavaThread::last_Java_pc_offset()), NULL_WORD);\n+  movptr(Address(r15_thread, JavaThread::last_Java_pc_offset()), NULL_WORD);\n@@ -3205,1 +3156,1 @@\n-void MacroAssembler::safepoint_poll(Label& slow_path, Register thread_reg, bool at_return, bool in_nmethod) {\n+void MacroAssembler::safepoint_poll(Label& slow_path, bool at_return, bool in_nmethod) {\n@@ -3209,1 +3160,1 @@\n-    cmpptr(in_nmethod ? rsp : rbp, Address(thread_reg, JavaThread::polling_word_offset()));\n+    cmpptr(in_nmethod ? rsp : rbp, Address(r15_thread, JavaThread::polling_word_offset()));\n@@ -3213,1 +3164,1 @@\n-  testb(Address(thread_reg, JavaThread::polling_word_offset()), SafepointMechanism::poll_bit());\n+  testb(Address(r15_thread, JavaThread::polling_word_offset()), SafepointMechanism::poll_bit());\n@@ -3222,2 +3173,1 @@\n-void MacroAssembler::set_last_Java_frame(Register java_thread,\n-                                         Register last_java_sp,\n+void MacroAssembler::set_last_Java_frame(Register last_java_sp,\n@@ -3228,5 +3178,0 @@\n-  \/\/ determine java_thread register\n-  if (!java_thread->is_valid()) {\n-    java_thread = rdi;\n-    get_thread(java_thread);\n-  }\n@@ -3239,1 +3184,1 @@\n-    movptr(Address(java_thread, JavaThread::last_Java_fp_offset()), last_java_fp);\n+    movptr(Address(r15_thread, JavaThread::last_Java_fp_offset()), last_java_fp);\n@@ -3243,1 +3188,1 @@\n-    Address java_pc(java_thread,\n+    Address java_pc(r15_thread,\n@@ -3247,1 +3192,1 @@\n-  movptr(Address(java_thread, JavaThread::last_Java_sp_offset()), last_java_sp);\n+  movptr(Address(r15_thread, JavaThread::last_Java_sp_offset()), last_java_sp);\n@@ -3250,1 +3195,0 @@\n-#ifdef _LP64\n@@ -3257,1 +3201,1 @@\n-  set_last_Java_frame(r15_thread, last_java_sp, last_java_fp, nullptr, scratch);\n+  set_last_Java_frame(last_java_sp, last_java_fp, nullptr, scratch);\n@@ -3259,1 +3203,0 @@\n-#endif\n@@ -4114,1 +4057,0 @@\n-                                     Register thread,\n@@ -4116,0 +4058,1 @@\n+  Register thread = r15_thread;\n@@ -4147,1 +4090,0 @@\n-                                            Register thread,\n@@ -4149,0 +4091,1 @@\n+  Register thread = r15_thread;\n@@ -5479,1 +5422,1 @@\n-void MacroAssembler::clinit_barrier(Register klass, Register thread, Label* L_fast_path, Label* L_slow_path) {\n+void MacroAssembler::clinit_barrier(Register klass, Label* L_fast_path, Label* L_slow_path) {\n@@ -5495,1 +5438,1 @@\n-  cmpptr(thread, Address(klass, InstanceKlass::init_thread_offset()));\n+  cmpptr(r15_thread, Address(klass, InstanceKlass::init_thread_offset()));\n@@ -10749,1 +10692,1 @@\n-void MacroAssembler::get_thread(Register thread) {\n+void MacroAssembler::get_thread_slow(Register thread) {\n@@ -10753,2 +10696,2 @@\n-  LP64_ONLY(push(rdi);)\n-  LP64_ONLY(push(rsi);)\n+  push(rdi);\n+  push(rsi);\n@@ -10757,1 +10700,0 @@\n-#ifdef _LP64\n@@ -10762,1 +10704,0 @@\n-#endif\n@@ -10766,1 +10707,0 @@\n-#ifdef _LP64\n@@ -10771,1 +10711,0 @@\n-#endif\n@@ -10774,2 +10713,2 @@\n-  LP64_ONLY(pop(rsi);)\n-  LP64_ONLY(pop(rdi);)\n+  pop(rsi);\n+  pop(rdi);\n@@ -10804,1 +10743,3 @@\n-void MacroAssembler::lightweight_lock(Register basic_lock, Register obj, Register reg_rax, Register thread, Register tmp, Label& slow) {\n+void MacroAssembler::lightweight_lock(Register basic_lock, Register obj, Register reg_rax, Register tmp, Label& slow) {\n+  Register thread = r15_thread;\n+\n@@ -10858,1 +10799,3 @@\n-void MacroAssembler::lightweight_unlock(Register obj, Register reg_rax, Register thread, Register tmp, Label& slow) {\n+void MacroAssembler::lightweight_unlock(Register obj, Register reg_rax, Register tmp, Label& slow) {\n+  Register thread = r15_thread;\n+\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":64,"deletions":121,"binary":false,"changes":185,"status":"modified"},{"patch":"@@ -62,4 +62,2 @@\n-  \/\/ If no java_thread register is specified (noreg) than rdi will be used instead. call_VM_base\n-  \/\/ returns the register which contains the thread upon return. If a thread register has been\n-  \/\/ specified, the return value will correspond to that register. If no last_java_sp is specified\n-  \/\/ (noreg) than rsp will be used instead.\n+  \/\/ call_VM_base returns the register which contains the thread upon return.\n+  \/\/ If no last_java_sp is specified (noreg) than rsp will be used instead.\n@@ -68,1 +66,0 @@\n-    Register java_thread,              \/\/ the thread if computed before     ; use noreg otherwise\n@@ -88,2 +85,2 @@\n- virtual void check_and_handle_popframe(Register java_thread);\n- virtual void check_and_handle_earlyret(Register java_thread);\n+ virtual void check_and_handle_popframe();\n+ virtual void check_and_handle_earlyret();\n@@ -227,3 +224,4 @@\n-  \/\/ Support for getting the JavaThread pointer (i.e.; a reference to thread-local information)\n-  \/\/ The pointer will be loaded into the thread register.\n-  void get_thread(Register thread);\n+  \/\/ Support for getting the JavaThread pointer (i.e.; a reference to thread-local information).\n+  \/\/ The pointer will be loaded into the thread register. This is a slow version that does native call.\n+  \/\/ Normally, JavaThread pointer is available in r15_thread, use that where possible.\n+  void get_thread_slow(Register thread);\n@@ -294,2 +292,2 @@\n-  void get_vm_result  (Register oop_result, Register thread);\n-  void get_vm_result_2(Register metadata_result, Register thread);\n+  void get_vm_result  (Register oop_result);\n+  void get_vm_result_2(Register metadata_result);\n@@ -326,8 +324,0 @@\n-  \/\/ last Java Frame (fills frame anchor)\n-  void set_last_Java_frame(Register thread,\n-                           Register last_java_sp,\n-                           Register last_java_fp,\n-                           address  last_java_pc,\n-                           Register rscratch);\n-\n-  \/\/ thread in the default location (r15_thread on 64bit)\n@@ -339,1 +329,0 @@\n-#ifdef _LP64\n@@ -344,3 +333,0 @@\n-#endif\n-\n-  void reset_last_Java_frame(Register thread, bool clear_fp);\n@@ -348,1 +334,0 @@\n-  \/\/ thread in the default location (r15_thread on 64bit)\n@@ -353,2 +338,2 @@\n-  void resolve_jobject(Register value, Register thread, Register tmp);\n-  void resolve_global_jobject(Register value, Register thread, Register tmp);\n+  void resolve_jobject(Register value, Register tmp);\n+  void resolve_global_jobject(Register value, Register tmp);\n@@ -765,1 +750,0 @@\n-                      Register thread,\n@@ -840,1 +824,1 @@\n-  void safepoint_poll(Label& slow_path, Register thread_reg, bool at_return, bool in_nmethod);\n+  void safepoint_poll(Label& slow_path, bool at_return, bool in_nmethod);\n@@ -2250,2 +2234,2 @@\n-  void lightweight_lock(Register basic_lock, Register obj, Register reg_rax, Register thread, Register tmp, Label& slow);\n-  void lightweight_unlock(Register obj, Register reg_rax, Register thread, Register tmp, Label& slow);\n+  void lightweight_lock(Register basic_lock, Register obj, Register reg_rax, Register tmp, Label& slow);\n+  void lightweight_unlock(Register obj, Register reg_rax, Register tmp, Label& slow);\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.hpp","additions":15,"deletions":31,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1107,1 +1107,1 @@\n-    __ clinit_barrier(klass, r15_thread, &L_skip_barrier \/*L_fast_path*\/);\n+    __ clinit_barrier(klass, &L_skip_barrier \/*L_fast_path*\/);\n@@ -2006,1 +2006,1 @@\n-    __ clinit_barrier(klass, r15_thread, &L_skip_barrier \/*L_fast_path*\/);\n+    __ clinit_barrier(klass, &L_skip_barrier \/*L_fast_path*\/);\n@@ -2283,1 +2283,1 @@\n-      __ lightweight_lock(lock_reg, obj_reg, swap_reg, r15_thread, rscratch1, slow_path_lock);\n+      __ lightweight_lock(lock_reg, obj_reg, swap_reg, rscratch1, slow_path_lock);\n@@ -2343,1 +2343,1 @@\n-    __ safepoint_poll(slow_path, r15_thread, true \/* at_return *\/, false \/* in_nmethod *\/);\n+    __ safepoint_poll(slow_path, true \/* at_return *\/, false \/* in_nmethod *\/);\n@@ -2434,1 +2434,1 @@\n-      __ lightweight_unlock(obj_reg, swap_reg, r15_thread, lock_reg, slow_path_unlock);\n+      __ lightweight_unlock(obj_reg, swap_reg, lock_reg, slow_path_unlock);\n@@ -2459,1 +2459,0 @@\n-                       r15_thread \/* thread *\/,\n@@ -3237,1 +3236,1 @@\n-  __ get_vm_result_2(rbx, r15_thread);\n+  __ get_vm_result_2(rbx);\n@@ -3664,1 +3663,1 @@\n-  __ resolve_global_jobject(rax, r15_thread, c_rarg0);\n+  __ resolve_global_jobject(rax, c_rarg0);\n","filename":"src\/hotspot\/cpu\/x86\/sharedRuntime_x86_64.cpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -342,1 +342,1 @@\n-    __ get_thread(rbx);\n+    __ get_thread_slow(rbx);\n@@ -429,1 +429,1 @@\n-    __ get_thread(rbx);\n+    __ get_thread_slow(rbx);\n@@ -1316,1 +1316,1 @@\n-  __ get_thread(r15_thread);\n+  __ get_thread_slow(r15_thread);\n@@ -1340,1 +1340,1 @@\n-  __ get_thread(r15_thread);\n+  __ get_thread_slow(r15_thread);\n@@ -3977,1 +3977,1 @@\n-  __ resolve_global_jobject(j_rarg0, r15_thread, rscratch1);\n+  __ resolve_global_jobject(j_rarg0, rscratch1);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2479,1 +2479,1 @@\n-    __ get_thread(r14);\n+    __ get_thread_slow(r14);\n","filename":"src\/hotspot\/cpu\/x86\/stubGenerator_x86_64_arraycopy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -207,1 +207,1 @@\n-     __ check_and_handle_popframe(r15_thread);\n+     __ check_and_handle_popframe();\n@@ -210,1 +210,1 @@\n-     __ check_and_handle_earlyret(r15_thread);\n+     __ check_and_handle_earlyret();\n@@ -994,1 +994,1 @@\n-    __ safepoint_poll(slow_path, thread, true \/* at_return *\/, false \/* in_nmethod *\/);\n+    __ safepoint_poll(slow_path, true \/* at_return *\/, false \/* in_nmethod *\/);\n@@ -1037,1 +1037,1 @@\n-  __ reset_last_Java_frame(thread, true);\n+  __ reset_last_Java_frame(true);\n@@ -1060,1 +1060,0 @@\n-                       thread \/* thread *\/,\n@@ -1498,1 +1497,1 @@\n-  __ reset_last_Java_frame(thread, true);\n+  __ reset_last_Java_frame(true);\n@@ -1551,1 +1550,1 @@\n-  __ get_vm_result(rax, thread);\n+  __ get_vm_result(rax);\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86.cpp","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-  __ safepoint_poll(slow_path, r15_thread, true \/* at_return *\/, false \/* in_nmethod *\/);\n+  __ safepoint_poll(slow_path, true \/* at_return *\/, false \/* in_nmethod *\/);\n@@ -237,1 +237,1 @@\n-  __ safepoint_poll(slow_path, r15_thread, false \/* at_return *\/, false \/* in_nmethod *\/);\n+  __ safepoint_poll(slow_path, false \/* at_return *\/, false \/* in_nmethod *\/);\n","filename":"src\/hotspot\/cpu\/x86\/templateInterpreterGenerator_x86_64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -481,1 +481,1 @@\n-  __ get_vm_result_2(flags, r15_thread);\n+  __ get_vm_result_2(flags);\n@@ -2266,2 +2266,0 @@\n-    const Register thread = r15_thread;\n-    assert(thread != noreg, \"x86_32 not supported\");\n@@ -2271,1 +2269,1 @@\n-    __ clinit_barrier(klass, thread, nullptr \/*L_fast_path*\/, &L_clinit_barrier_slow);\n+    __ clinit_barrier(klass, nullptr \/*L_fast_path*\/, &L_clinit_barrier_slow);\n@@ -3575,1 +3573,1 @@\n-  __ clinit_barrier(rcx, r15_thread, nullptr \/*L_fast_path*\/, &slow_case);\n+  __ clinit_barrier(rcx, nullptr \/*L_fast_path*\/, &slow_case);\n@@ -3715,1 +3713,1 @@\n-  __ get_vm_result_2(rax, r15_thread);\n+  __ get_vm_result_2(rax);\n@@ -3770,1 +3768,0 @@\n-  \/\/ vm_result_2 has metadata result\n@@ -3772,1 +3769,2 @@\n-  __ get_vm_result_2(rax, r15_thread);\n+  \/\/ vm_result_2 has metadata result\n+  __ get_vm_result_2(rax);\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":6,"deletions":8,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -848,1 +848,1 @@\n-    __ clinit_barrier(klass, r15_thread, &L_skip_barrier \/*L_fast_path*\/);\n+    __ clinit_barrier(klass, &L_skip_barrier \/*L_fast_path*\/);\n@@ -946,1 +946,1 @@\n-    __ safepoint_poll(*code_stub, r15_thread, true \/* at_return *\/, true \/* in_nmethod *\/);\n+    __ safepoint_poll(*code_stub, true \/* at_return *\/, true \/* in_nmethod *\/);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}