{"files":[{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2001, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4403624\n+ * @summary Tests JRootPane layout with invisible menubar\n+ * @key headful\n+ * @run main bug4403624\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.FlowLayout;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.event.InputEvent;\n+\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.SwingUtilities;\n+\n+public class bug4403624 {\n+    private static JFrame f;\n+    private static Container c;\n+    private static JButton b;\n+    private static volatile Point p;\n+    private static volatile int bWidth;\n+    private static volatile int bHeight;\n+    private static final int OFFSET = 2;\n+\n+    public static void main(String[] args) throws Exception {\n+        try {\n+            SwingUtilities.invokeAndWait(() -> {\n+                f = new JFrame(\"bug4403624 Test\");\n+                JMenuBar mbar;\n+                mbar = new JMenuBar();\n+                mbar.add(new JMenu(\"Menu\"));\n+                f.setJMenuBar(mbar);\n+                b = new JButton(\"Hide Menu\");\n+                b.addActionListener(e -> mbar.setVisible(false));\n+                c = f.getContentPane();\n+                c.setLayout(new FlowLayout());\n+                c.setBackground(Color.GREEN);\n+                c.add(b);\n+                f.pack();\n+                f.setLocationRelativeTo(null);\n+                f.setAlwaysOnTop(true);\n+                f.setVisible(true);\n+            });\n+\n+            Robot r = new Robot();\n+            r.setAutoDelay(200);\n+            r.waitForIdle();\n+            r.delay(1000);\n+\n+            SwingUtilities.invokeAndWait(() -> {\n+                p = b.getLocationOnScreen();\n+                bWidth = b.getWidth();\n+                bHeight = b.getHeight();\n+            });\n+\n+            r.mouseMove(p.x + (bWidth \/ 2), p.y + (bHeight \/ 2));\n+            r.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            r.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+            SwingUtilities.invokeAndWait(() -> p = c.getLocationOnScreen());\n+\n+            Color c = r.getPixelColor(p.x + OFFSET, p.y + OFFSET);\n+\n+            if (c.getGreen() < 240 && c.getBlue() > 10 && c.getRed() > 10) {\n+                System.out.println(\"EXPECTED: \" + Color.GREEN);\n+                System.out.println(\"ACTUAL: \" + c);\n+                throw new RuntimeException(\"Failure to hide menu bar.\");\n+            }\n+        } finally {\n+            SwingUtilities.invokeAndWait(() -> {\n+                if (f != null) {\n+                    f.dispose();\n+                }\n+            });\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JRootPane\/bug4403624.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -0,0 +1,234 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5078454\n+ * @summary Test horizontal wheel scroll behavior of (including RTL)\n+ * @requires (os.family == \"windows\")\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual HorizScrollers\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Color;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.Insets;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.MouseWheelEvent;\n+import java.awt.event.MouseWheelListener;\n+\n+import javax.swing.BorderFactory;\n+import javax.swing.JButton;\n+import javax.swing.JLabel;\n+import javax.swing.JOptionPane;\n+import javax.swing.JPanel;\n+import javax.swing.JTextArea;\n+import javax.swing.SwingConstants;\n+import javax.swing.SwingUtilities;\n+\n+public class HorizScrollers {\n+    private static final String INSTRUCTIONS = \"\"\"\n+            This is a semi-automatic test with three phases.\n+            For each phase, you will need to change the mouse setting, as\n+            directed by a dialog. Once the correct setting is confirmed,\n+            the next test phase will run automatically.\n+            DO NOT TOUCH ANYTHING DURING TESTING!\n+\n+            The test will automatically FAIL during testing if something\n+            fails. Otherwise, the test will automatically PASS after the\n+            third testing phase.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"HorizScrollers Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(45)\n+                .testTimeOut(10)\n+                .splitUIRight(ConfigPanel::new)\n+                .logArea(6)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static final int[] SCROLLAMTS = {1, 30, 3};\n+    private static final String[] CONFIG_MSGS = {\n+            \"Set the scrolling speed to the slowest value (1 line).\",\n+            \"Set the scrolling speed to the fastest value (30 lines).\",\n+            \"Set the scrolling speed to two ticks above the slowest value (3 lines).\"\n+    };\n+\n+    private static int current = 0;\n+    private static final String MW_TEXT = \"Rotate the mouse wheel here\";\n+    private static final String CONFIG_INSTRUCTION_TEMPLATE = \"\"\"\n+            Configure Mouse Wheel for Phase %d\n+\n+            Open the Mouse Control Panel and go to the 'Wheel' tab.\n+            If 'Wheel' tab is not available just press Pass.\n+\n+            %s\n+\n+            Test the setting on the area below.\n+            Once the mouse is setup correctly, the area will turn green.\n+            When you're ready for the next part of the test to run, press GO!\n+    \"\"\";\n+\n+    static class ConfigPanel extends JPanel\n+            implements ActionListener, MouseWheelListener {\n+        JTextArea msg;\n+        JButton goBtn;\n+        JLabel mwArea;\n+        int scrollAmount;\n+\n+        private final Color defaultBg;\n+\n+        ConfigPanel() {\n+            this.scrollAmount = SCROLLAMTS[current];\n+            Container content = this;\n+            content.setLayout(new BorderLayout());\n+            msg = new JTextArea();\n+            msg.setMargin(new Insets(5, 5, 5, 5));\n+            msg.setEditable(false);\n+            msg.setLineWrap(true);\n+            msg.setWrapStyleWord(true);\n+            content.add(msg, BorderLayout.NORTH);\n+\n+            mwArea = new JLabel(MW_TEXT, SwingConstants.CENTER);\n+            mwArea.setPreferredSize(new Dimension(200, 250));\n+            mwArea.setBorder(BorderFactory.createLineBorder(Color.BLACK));\n+            mwArea.setOpaque(true);\n+            mwArea.addMouseWheelListener(this);\n+            content.add(mwArea, BorderLayout.CENTER);\n+\n+            defaultBg = mwArea.getBackground();\n+            setPhase(current);\n+\n+            goBtn = new JButton(\"GO!\");\n+            goBtn.setEnabled(false);\n+            goBtn.addActionListener(this);\n+            JPanel flowPanel = new JPanel();\n+            flowPanel.setLayout(new FlowLayout());\n+            flowPanel.add(goBtn);\n+            content.add(flowPanel, BorderLayout.SOUTH);\n+\n+            setPreferredSize(new Dimension(600, 400));\n+        }\n+\n+        public void setPhase(int phase) {\n+            if (phase < 3) {\n+                setVisible(true);\n+                PassFailJFrame.log(\"Phase %d scroll speed %d\"\n+                        .formatted(phase + 1, SCROLLAMTS[phase]));\n+                PassFailJFrame.log(CONFIG_MSGS[phase]);\n+\n+                scrollAmount = SCROLLAMTS[phase];\n+                msg.setText(CONFIG_INSTRUCTION_TEMPLATE\n+                        .formatted(phase + 1, CONFIG_MSGS[phase]));\n+                mwArea.setBackground(defaultBg);\n+                mwArea.setText(MW_TEXT);\n+            } else {\n+                \/\/ all cases passed\n+                showFinalReminderIfNeeded(false);\n+            }\n+        }\n+\n+        private void showFinalReminderIfNeeded(boolean isFailure) {\n+            if (scrollAmount != 3) {\n+                JOptionPane.showMessageDialog(\n+                        ConfigPanel.this.getTopLevelAncestor(),\n+                        (\"Test %s. please make sure you have restored \" +\n+                                \"the original speed value blah blah\")\n+                                .formatted(isFailure\n+                                        ? \"failed\"\n+                                        : \"passed\"),\n+                        isFailure\n+                                ? \"Failure\"\n+                                : \"Success\",\n+                        isFailure\n+                                ? JOptionPane.WARNING_MESSAGE\n+                                : JOptionPane.INFORMATION_MESSAGE\n+                );\n+            }\n+\n+            if (isFailure) {\n+                PassFailJFrame.forceFail();\n+            } else {\n+                PassFailJFrame.forcePass();\n+            }\n+        }\n+\n+        public void actionPerformed(ActionEvent e) {\n+            if (e.getSource() == goBtn) {\n+                goBtn.setEnabled(false);\n+\n+                new Thread(() -> { \/\/ new thread to avoid running robot on EDT\n+                    boolean passed;\n+                    try {\n+                        passed = RTLScrollers.runTest(SCROLLAMTS[current]);\n+                    } catch (Exception ex) {\n+                        PassFailJFrame.log(\"Failure: \" + ex);\n+                        SwingUtilities.invokeLater(() ->\n+                                showFinalReminderIfNeeded(true));\n+                        return;\n+                    }\n+\n+                    PassFailJFrame.log(\"Phase %d passed: %b\\n\"\n+                            .formatted(current + 1, passed));\n+                    if (passed) {\n+                        SwingUtilities.invokeLater(() -> {\n+                            goBtn.setEnabled(true);\n+                            setPhase(++current);\n+                        });\n+                    } else {\n+                        SwingUtilities.invokeLater(() ->\n+                                showFinalReminderIfNeeded(true));\n+                    }\n+                }).start();\n+            }\n+        }\n+\n+        public void mouseWheelMoved(MouseWheelEvent e) {\n+            int eventScrollAmt = e.getScrollAmount();\n+            if (eventScrollAmt == scrollAmount) {\n+                mwArea.setBackground(Color.GREEN);\n+                mwArea.setText(\"Mouse wheel configured - press Go\");\n+                goBtn.setEnabled(true);\n+                goBtn.requestFocusInWindow();\n+                PassFailJFrame.log(\"Proceed to the test with go button\");\n+                return;\n+            }\n+            if (eventScrollAmt < scrollAmount) {\n+                mwArea.setText(\"Increase the scroll speed. (Want:\"\n+                        + scrollAmount + \" Got:\" + eventScrollAmt + \")\");\n+            } else {\n+                mwArea.setText(\"Decrease the scroll speed. (Want:\"\n+                        + scrollAmount + \" Got:\" + eventScrollAmt + \")\");\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/AcceleratedWheelScrolling\/HorizScrollers.java","additions":234,"deletions":0,"binary":false,"changes":234,"status":"added"},{"patch":"@@ -0,0 +1,677 @@\n+\/*\n+ * Copyright (c) 2004, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/\/ A few Swing components which use the mouse wheel to scroll\n+\n+import java.awt.AWTException;\n+import java.awt.Color;\n+import java.awt.ComponentOrientation;\n+import java.awt.Container;\n+import java.awt.Dimension;\n+import java.awt.Graphics;\n+import java.awt.GridBagConstraints;\n+import java.awt.GridBagLayout;\n+import java.awt.Insets;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseWheelEvent;\n+import java.awt.event.MouseWheelListener;\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n+\n+import javax.swing.DefaultListModel;\n+import javax.swing.ImageIcon;\n+import javax.swing.JCheckBoxMenuItem;\n+import javax.swing.JComponent;\n+import javax.swing.JDialog;\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.JMenu;\n+import javax.swing.JMenuBar;\n+import javax.swing.JMenuItem;\n+import javax.swing.JScrollBar;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.JTextArea;\n+import javax.swing.ListModel;\n+import javax.swing.ScrollPaneConstants;\n+import javax.swing.SwingUtilities;\n+import javax.swing.table.DefaultTableModel;\n+import javax.swing.table.TableColumn;\n+import javax.swing.table.TableModel;\n+\n+public class RTLScrollers extends JDialog\n+        implements MouseWheelListener, ActionListener {\n+    private static final int ROWS = 5;\n+    private static final int COLUMNS = 150;\n+    private static final int WINWIDTH = 1000;\n+\n+    static RTLScrollers rtl;\n+    static volatile boolean retVal;\n+    static volatile JScrollPane jsp;\n+    static volatile JScrollBar hsb;\n+    static volatile JScrollBar sb;\n+    static volatile Point loc;\n+    static volatile Dimension size;\n+    TestList list;\n+    JScrollPane listScroller;\n+    JTextArea text;\n+    JScrollPane textScroller;\n+    TestTable table;\n+    JScrollPane tableScroller;\n+    JCheckBoxMenuItem rightToLeft;\n+    ImageIcon photoIcon;\n+    int scrollAmount;\n+\n+    private static Robot robot;\n+    private static BufferedImage logo = genIcon(166, 39, Color.PINK);\n+    private static BufferedImage photo = genIcon(59, 80, Color.MAGENTA);\n+    private static BufferedImage photo2 = genIcon(80, 53, Color.ORANGE);\n+\n+    private static BufferedImage genIcon(int width, int height, Color color) {\n+        BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);\n+        Graphics g = image.getGraphics();\n+        g.setColor(color);\n+        g.fillRect(0, 0, width, height);\n+\n+        return image;\n+    }\n+\n+    public RTLScrollers() {\n+        this(0);\n+    }\n+\n+    public RTLScrollers(int scrollAmount) {\n+        super(new JFrame(), \"RTLScrollers\", false);\n+\n+        this.scrollAmount = scrollAmount;\n+        Container content = getContentPane();\n+        content.setLayout(new GridBagLayout());\n+\n+        DefaultListModel<Object> listModel = new DefaultListModel<>();\n+\n+        photoIcon = new ImageIcon(photo);\n+        for (int i = 0; i < COLUMNS \/ 4 ; i++) {\n+            for (int j = 0; j < ROWS; j++) {\n+                listModel.addElement(new ImageIcon(logo));\n+            }\n+            for (int j = 0; j < ROWS; j++) {\n+                listModel.addElement(photoIcon);\n+            }\n+            for (int j = 0; j < ROWS; j++) {\n+                listModel.addElement(new ImageIcon(photo2));\n+            }\n+            for (int j = 0; j < ROWS; j++) {\n+                listModel.addElement(\"Text Item \" + ((1 + i) * 3));\n+            }\n+        }\n+\n+        list = new TestList(listModel);\n+        list.setVisibleRowCount(ROWS);\n+        list.setLayoutOrientation(JList.VERTICAL_WRAP);\n+        listScroller = new JScrollPane(list);\n+        listScroller.addMouseWheelListener(this);\n+\n+        text = new JTextArea();\n+        for (int j = 0; j < ROWS ; j++) {\n+            for (int i = 0; i < COLUMNS ; i++) {\n+                text.append(i + \" some text, some more text, a really long line of text \");\n+            }\n+            text.append(\"\\n\");\n+        }\n+\n+        textScroller = new JScrollPane(text);\n+        textScroller.addMouseWheelListener(this);\n+\n+        DefaultTableModel model = new DefaultTableModel(ROWS, COLUMNS);\n+        table = new TestTable(model);\n+        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+        for (int i = 0; i < COLUMNS; i++) {\n+            for (int j = 0; j < ROWS; j++) {\n+                table.setValueAt(j + \", \" + i, j, i);\n+            }\n+\n+            TableColumn column = table.getColumnModel().getColumn(i);\n+\n+            if (i % 4 == 0) {\n+                column.setMinWidth(0);\n+                column.setPreferredWidth(0);\n+                column.setMaxWidth(0);\n+            }\n+            else if ((i + 1) % 4 == 0) {\n+                column.setMinWidth(95);\n+                column.setPreferredWidth(95);\n+                column.setMaxWidth(95);\n+            }\n+            else if ((i + 2) % 4 == 0) {\n+                column.setMinWidth(26);\n+                column.setPreferredWidth(26);\n+                column.setMaxWidth(26);\n+            }\n+            else {\n+                column.setMinWidth(50);\n+                column.setPreferredWidth(50);\n+                column.setMaxWidth(50);\n+            }\n+        }\n+        tableScroller = new JScrollPane(table);\n+        tableScroller.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);\n+        tableScroller.addMouseWheelListener(this);\n+\n+        GridBagConstraints tableGBC = new GridBagConstraints(0,\n+                0,\n+                1,\n+                1,\n+                1.0,\n+                0.3,\n+                GridBagConstraints.CENTER,\n+                GridBagConstraints.BOTH,\n+                new Insets(0,0,0,0),\n+                0,\n+                0);\n+        content.add(tableScroller, tableGBC);\n+        GridBagConstraints textGBC = new GridBagConstraints(0,\n+                1,\n+                1,\n+                1,\n+                1.0,\n+                0.3,\n+                GridBagConstraints.CENTER,\n+                GridBagConstraints.BOTH,\n+                new Insets(0,0,0,0),\n+                0,\n+                0);\n+        content.add(textScroller, textGBC);\n+\n+        GridBagConstraints listGBC = new GridBagConstraints(0,\n+                2,\n+                1,\n+                5,\n+                1.0,\n+                1.2,\n+                GridBagConstraints.CENTER,\n+                GridBagConstraints.BOTH,\n+                new Insets(0,0,0,0),\n+                0,\n+                0);\n+\n+        content.add(listScroller, listGBC);\n+\n+        rightToLeft = new JCheckBoxMenuItem(\"Right-To-Left\", false);\n+        rightToLeft.addActionListener(this);\n+        JMenu menu = new JMenu(\"Component Orientation\");\n+        menu.add(rightToLeft);\n+\n+        JMenuItem close = new JMenuItem(\"Close\");\n+        close.addActionListener(e -> RTLScrollers.this.setVisible(false));\n+        menu.add(close);\n+\n+        JMenuBar mb = new JMenuBar();\n+        mb.add(menu);\n+        setJMenuBar(mb);\n+        setBounds(0, 0, WINWIDTH, 760);\n+        setLocationRelativeTo(null);\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        if (rightToLeft.getState()) {\n+            applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+        }\n+        else {\n+            applyComponentOrientation(ComponentOrientation.LEFT_TO_RIGHT);\n+        }\n+    }\n+    public void mouseWheelMoved(MouseWheelEvent e) {\n+        System.out.println(\"Rotation: \" + e.getWheelRotation());\n+    }\n+\n+    public static boolean runTest(int scrollAmount)\n+            throws InterruptedException, InvocationTargetException {\n+        System.out.println(\"RTLS.runTest()\");\n+        if (robot == null) {\n+            try {\n+                robot = new Robot();\n+                robot.setAutoDelay(150);\n+                robot.setAutoWaitForIdle(true);\n+            }\n+            catch (AWTException e) {\n+                e.printStackTrace();\n+                return false;\n+            }\n+        }\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            rtl = new RTLScrollers(scrollAmount);\n+            rtl.setVisible(true);\n+        });\n+        robot.delay(100);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            try {\n+                retVal = rtl.runTests(scrollAmount);\n+                rtl.setVisible(false);\n+            } catch (Exception e) {\n+                e.printStackTrace();\n+            }\n+        });\n+\n+        robot.delay(100);\n+        System.out.println(\"RTLS.runTest(): \" + retVal);\n+        return retVal;\n+    }\n+\n+    private boolean runTests(int scrollAmount)\n+            throws InterruptedException, InvocationTargetException {\n+        if (robot == null) {\n+            try {\n+                robot = new Robot();\n+                robot.setAutoDelay(150);\n+                robot.setAutoWaitForIdle(true);\n+            }\n+            catch (AWTException e) {\n+                e.printStackTrace();\n+                return false;\n+            }\n+        }\n+\n+        \/\/\n+        \/\/ run robot tests\n+        \/\/\n+        robot.delay(500);\n+\n+        System.out.println(\"Testing Table\");\n+        testComp(table, scrollAmount);\n+\n+        System.out.println(\"Testing List\");\n+        testComp(list, scrollAmount);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            applyComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);\n+        });\n+        robot.delay(100);\n+\n+        System.out.println(\"Testing RTL Table\");\n+        testComp(table, scrollAmount);\n+\n+        System.out.println(\"Testing RTL List\");\n+        testComp(list, scrollAmount);\n+\n+        return true;\n+    }\n+\n+    public boolean testComp(TestTools comp, int scrollAmount)\n+            throws InterruptedException, InvocationTargetException {\n+        \/\/ Make sure we start from the beginning\n+        SwingUtilities.invokeAndWait(() -> {\n+            jsp = (JScrollPane)((JComponent)comp).getParent().getParent();\n+            hsb = jsp.getHorizontalScrollBar();\n+            hsb.setValue(hsb.getMinimum());\n+\n+            loc = jsp.getLocationOnScreen();\n+            size = jsp.getSize();\n+        });\n+        int midx = loc.x + size.width \/ 2;\n+        int midy = loc.y + size.height \/ 2;\n+        int maxIdx = 0;\n+        robot.mouseMove(midx, midy);\n+\n+        \/\/ Don't bother for max scroll w\/ RTL JList, because the block increment is broken\n+        if (scrollAmount != 30 || !(comp instanceof TestList)\n+                || getComponentOrientation().isLeftToRight()) {\n+            scrollToMiddle(jsp, robot);\n+\n+            \/\/ check that we're lined up\n+            comp.checkTopCellIsLinedUp();\n+\n+            int startVal = hsb.getValue();\n+            int leadingCell = comp.getLeadingCell().y;\n+            System.out.println(\"leadingCell is \" + leadingCell);\n+\n+            \/\/ become unaligned\n+            int width = comp.getLeadingCellWidth();\n+            int midVal = startVal + width \/ 2;\n+            System.out.println(\"becoming unaligned: startVal is \"\n+                    + startVal + \", midVal is \" + midVal);\n+            SwingUtilities.invokeAndWait(() -> hsb.setValue(midVal));\n+\n+            \/\/\n+            \/\/ Check partial inc up\n+            \/\/\n+            robot.mouseWheel(-1);\n+\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, -scrollAmount + 1);\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/\n+            \/\/ Check partial inc down\n+            \/\/\n+            SwingUtilities.invokeAndWait(() -> hsb.setValue(midVal));\n+            robot.delay(100);\n+            robot.mouseWheel(1);\n+\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, scrollAmount);\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/\n+            \/\/ Check full inc down (3 times)\n+            \/\/\n+            SwingUtilities.invokeAndWait(() -> hsb.setValue(startVal));\n+            leadingCell = comp.getLeadingCell().y;\n+\n+            \/\/ Once...\n+            robot.mouseWheel(1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, scrollAmount);\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/ Twice...\n+            robot.mouseWheel(1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, (2 * scrollAmount));\n+            }\n+\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/ Thrice...\n+            robot.mouseWheel(1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, (3 * scrollAmount));\n+\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/\n+            \/\/ Check full inc up (3 times)\n+            \/\/\n+            leadingCell = comp.getLeadingCell().y;\n+\n+            \/\/ Once...\n+            robot.mouseWheel(-1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, -scrollAmount);\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/ Twice...\n+            robot.mouseWheel(-1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, -(2 * scrollAmount));\n+            }\n+            comp.checkTopCellIsLinedUp();\n+\n+            \/\/ Thrice...\n+            robot.mouseWheel(-1);\n+            if (scrollAmount == 30) {  \/\/ hack for max scroll amount\n+                comp.checkTopCellIsMax(maxIdx++);\n+            }\n+            else {\n+                comp.checkTopCellIs(leadingCell, -(3 * scrollAmount));\n+            }\n+            comp.checkTopCellIsLinedUp();\n+        }\n+\n+        \/\/\n+        \/\/ Test acceleration for max scrolling\n+        \/\/ (this part should still work for RTL JList)\n+        if (scrollAmount == 30) {\n+            SwingUtilities.invokeAndWait(() -> {\n+                hsb.setValue(hsb.getMinimum());\n+            });\n+            robot.delay(100);\n+            robot.mouseWheel(2);\n+            robot.mouseWheel(2);\n+            robot.mouseWheel(2);\n+            if (hsb.getValue() < hsb.getMaximum() - hsb.getVisibleAmount()) {\n+                throw new RuntimeException(\"Wheel acceleration for max \" +\n+                        \"scrolling doesn't work: hsb value (\" + hsb.getValue() +\n+                        \" < hsb max (\" + hsb.getMaximum() +\n+                        \") - hsb vis (\" + hsb.getVisibleAmount() + \")\");\n+            }\n+            robot.delay(100);\n+            robot.mouseWheel(-2);\n+            robot.mouseWheel(-2);\n+            robot.mouseWheel(-2);\n+            if (hsb.getValue() > hsb.getMinimum()) {\n+                throw new RuntimeException(\"Wheel acceleration for max \" +\n+                        \"scrolling doesn't work: hsb value (\" +\n+                        hsb.getValue() + \" > hsb min (\" + hsb.getMinimum() + \")\");\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    class TestTable extends JTable implements TestTools {\n+        final int[] MAXVALS = {23, 67, 67, 89, 111, 89, 66, 45};  \/\/Lookup table\n+        public TestTable(TableModel model) {\n+            super(model);\n+        }\n+\n+        public void checkTopCellIsLinedUp() {\n+            boolean isLeftToRight = getComponentOrientation().isLeftToRight();\n+            Point leading = getLeadingCell();\n+            Rectangle visRect = getVisibleRect();\n+            Rectangle cellRect = getCellRect(leading.x, leading.y, true);\n+\n+            if (isLeftToRight) {\n+                if (cellRect.x != visRect.x) {\n+                    throw new RuntimeException(\"leading cell is not aligned!\");\n+                }\n+            }\n+            else {\n+                if (cellRect.x + cellRect.width != visRect.x + visRect.width) {\n+                    throw new RuntimeException(\"leading cell is not aligned!\");\n+                }\n+            }\n+        }\n+\n+        public void checkTopCellIs(int col) {\n+            Point cell = getLeadingCell();\n+            if (cell.y != col) {\n+                throw new RuntimeException(\"leading cell (\" + cell.y\n+                        + \") is not \" + col);\n+            }\n+        }\n+\n+        \/*\n+         * Account for 0-width cells\n+         *\n+         * shift is a non-0 number of visible cells to shift.  The shift is\n+         * augmented for zero-width cells, and the new sum is passed into\n+         * checkTopCellIs().\n+         *\/\n+        public void checkTopCellIs(int col, int shift) {\n+            if (shift == 0) {\n+                checkTopCellIs(col);\n+                return;\n+            }\n+\n+            int row = getLeadingCell().x;\n+            int newShift = 0;\n+            int foundCells = 0;\n+            int direction = shift > 0 ? 1 : -1;\n+            int index = col;\n+            Rectangle cellRect;\n+\n+            while (foundCells < Math.abs(shift)) {\n+                index += direction;\n+                cellRect = getCellRect(row, index, true);\n+                if (cellRect.width > 0) {\n+                    foundCells++;\n+                }\n+                newShift++;\n+            }\n+\n+            checkTopCellIs(col + (direction*newShift));\n+        }\n+\n+        public void checkTopCellIsMax(int idx) {\n+            checkTopCellIs(MAXVALS[idx]);\n+        }\n+\n+        public int getLeadingCellWidth() {\n+            Point leading = getLeadingCell();\n+            Rectangle cellRect = getCellRect(leading.x, leading.y, true);\n+            return cellRect.width;\n+        }\n+\n+        public Point getLeadingCell() {\n+            boolean isLeftToRight = getComponentOrientation().isLeftToRight();\n+            Rectangle visRect = getVisibleRect();\n+            int row = rowAtPoint(visRect.getLocation());\n+            int column;\n+            if (isLeftToRight) {\n+                column = columnAtPoint(visRect.getLocation());\n+            }\n+            else {\n+                column = columnAtPoint(new Point(visRect.x + visRect.width - 1, visRect.y));\n+            }\n+            return new Point(row, column);\n+        }\n+    }\n+\n+    class TestList extends JList implements TestTools {\n+        final int[] MAXVALS = {5, 16, 15, 20, 25, 20, 15, 10 };\n+        public TestList(ListModel model) {\n+            super(model);\n+        }\n+\n+        \/\/ Note - implemented in terms of columns\n+        public Point getLeadingCell() {\n+            System.out.println(\"TL.gLC(): first vis index is \"\n+                    + getFirstVisibleIndex());\n+            return new Point(getFirstVisibleIndex() \/ ROWS,\n+                    getFirstVisibleIndex() \/ ROWS);\n+        }\n+        public void checkTopCellIsLinedUp() {\n+            boolean isLeftToRight = getComponentOrientation().isLeftToRight();\n+            int visIdx = getFirstVisibleIndex();\n+            Rectangle cellRect = getCellBounds(visIdx, visIdx);\n+            Rectangle visRect = getVisibleRect();\n+            if (isLeftToRight) {\n+                if (cellRect.x != visRect.x) {\n+                    throw new RuntimeException(\"leading cell is not aligned!\");\n+                }\n+            }\n+            else {\n+                if (cellRect.x + cellRect.width != visRect.x + visRect.width) {\n+                    throw new RuntimeException(\"leading cell is not aligned!\");\n+                }\n+            }\n+        }\n+        public void checkTopCellIs(int col) {\n+            int firstVis = getLeadingCell().y;\n+            if (firstVis != col) {\n+                throw new RuntimeException(\"leading cell (\"\n+                        + firstVis + \") is not \" + col);\n+            }\n+        }\n+        public void checkTopCellIs(int idx, int shift) {\n+            checkTopCellIs(idx + shift);\n+\n+        }\n+        public void checkTopCellIsMax(int idx) {\n+            checkTopCellIs(MAXVALS[idx]);\n+        }\n+        public int getLeadingCellWidth() {\n+            int visIdx = getFirstVisibleIndex();\n+            Rectangle cellRect = getCellBounds(visIdx, visIdx);\n+            System.out.println(\"TL.gLCW(): leading cell width is \" + cellRect.width);\n+            return cellRect.width;\n+        }\n+    }\n+\n+    private interface TestTools {\n+        \/**\n+         * Throws a runtime exception if the top cell isn't lined up\n+         *\/\n+        void checkTopCellIsLinedUp();\n+        void checkTopCellIs(int col);\n+        void checkTopCellIs(int col, int shift);\n+        int getLeadingCellWidth();\n+        Point getLeadingCell();\n+\n+        void checkTopCellIsMax(int idx);\n+    }\n+\n+    public void scrollToMiddle(JScrollPane jsp, Robot robot)\n+            throws InterruptedException, InvocationTargetException {\n+        SwingUtilities.invokeAndWait(() -> {\n+            sb = jsp.getHorizontalScrollBar();\n+            loc = sb.getLocationOnScreen();\n+            size = sb.getSize();\n+        });\n+        robot.setAutoDelay(250);\n+\n+        robot.mouseMove(loc.x + size.width \/ 2,\n+                loc.y + size.height \/ 2);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+\n+        SwingUtilities.invokeAndWait(() -> {\n+            if (jsp == listScroller) {\n+                int idx = list.getFirstVisibleIndex();\n+                list.ensureIndexIsVisible(idx);\n+            }\n+        });\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        SwingUtilities.invokeAndWait(() -> {\n+            RTLScrollers f = new RTLScrollers();\n+            f.setVisible(true);\n+        });\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/AcceleratedWheelScrolling\/RTLScrollers.java","additions":677,"deletions":0,"binary":false,"changes":677,"status":"added"},{"patch":"@@ -0,0 +1,167 @@\n+\/*\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4166037\n+ * @summary Tests if changes to JScrollPane propagate to ScrollPaneLayout\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4166037\n+ *\/\n+\n+import java.awt.Color;\n+\n+import javax.swing.BoxLayout;\n+import javax.swing.JButton;\n+import javax.swing.JFrame;\n+import javax.swing.JLabel;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.ScrollPaneLayout;\n+\n+public class bug4166037 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        Press button \"Never\". Scroll bars should disappear.\n+        Press button \"Always\". Scroll bars should appear.\n+        Press button \"Colhead\". Label ColumnHeader should\n+        get replaced with yellow rectangles.\n+        Press button \"Corner\". You should see 4 green\n+        rectangles in the corners of the scroll pane.\n+        Press button \"Rowhead\". Label RowHeader should get\n+        replaced with yellow rectangles.\n+        Press button \"Viewport\". Viewport (the rest of the\n+        area except scrollbars) should get replaced with yellow\n+        rectangles.\n+        If the behavior is as described, the test PASSES.\n+        Otherwise, this test FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4166037 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4166037::createUI)\n+                .logArea()\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"JScrollPane in JScrollLayout Test\");\n+        JScrollPane scroll = new JScrollPane(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n+        JPanel p = new JPanel();\n+        scroll.setSize(200, 200);\n+        f.add(scroll);\n+        f.setLayout(new BoxLayout(f.getContentPane(), BoxLayout.Y_AXIS));\n+        JButton bn = new JButton(\"Never\");\n+        bn.addActionListener(e -> {\n+            PassFailJFrame.log(\"pane before: \"\n+                    + scroll.getVerticalScrollBarPolicy()\n+                    + scroll.getHorizontalScrollBarPolicy());\n+            PassFailJFrame.log(\"layout before: \"\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getVerticalScrollBarPolicy()\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getHorizontalScrollBarPolicy());\n+            scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);\n+            scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);\n+            PassFailJFrame.log(\"pane after: \"\n+                    + scroll.getVerticalScrollBarPolicy()\n+                    + scroll.getHorizontalScrollBarPolicy());\n+            PassFailJFrame.log(\"layout after: \"\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getVerticalScrollBarPolicy()\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getHorizontalScrollBarPolicy());\n+        });\n+        JButton ba = new JButton(\"Always\");\n+        ba.addActionListener(e -> {\n+            PassFailJFrame.log(\"pane before: \"\n+                    + scroll.getVerticalScrollBarPolicy()\n+                    + scroll.getHorizontalScrollBarPolicy());\n+            PassFailJFrame.log(\"layout before: \"\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getVerticalScrollBarPolicy()\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getHorizontalScrollBarPolicy());\n+            scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);\n+            scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);\n+            PassFailJFrame.log(\"pane after: \"\n+                    + scroll.getVerticalScrollBarPolicy()\n+                    + scroll.getHorizontalScrollBarPolicy());\n+            PassFailJFrame.log(\"layout after: \"\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getVerticalScrollBarPolicy()\n+                    + ((ScrollPaneLayout) scroll.getLayout()).getHorizontalScrollBarPolicy());\n+        });\n+        JLabel ch = new JLabel(\"ColumnHeader\");\n+        scroll.setColumnHeaderView(ch);\n+        JButton b1 = new JButton(\"Colhead\");\n+        b1.addActionListener(e -> {\n+            JPanel filler = new JPanel();\n+            filler.setSize(150, 150);\n+            filler.setBackground(Color.yellow);\n+            scroll.getColumnHeader().add(filler);\n+        });\n+        JButton b2 = new JButton(\"Corners\");\n+        b2.addActionListener(e -> {\n+            JPanel filler1 = new JPanel();\n+            filler1.setSize(150, 150);\n+            filler1.setBackground(Color.green);\n+            scroll.setCorner(JScrollPane.LOWER_RIGHT_CORNER, filler1);\n+            JPanel filler2 = new JPanel();\n+            filler2.setSize(150, 150);\n+            filler2.setBackground(Color.green);\n+            scroll.setCorner(JScrollPane.LOWER_LEFT_CORNER, filler2);\n+            JPanel filler3 = new JPanel();\n+            filler3.setSize(150, 150);\n+            filler3.setBackground(Color.green);\n+            scroll.setCorner(JScrollPane.UPPER_RIGHT_CORNER, filler3);\n+            JPanel filler4 = new JPanel();\n+            filler4.setSize(150, 150);\n+            filler4.setBackground(Color.green);\n+            scroll.setCorner(JScrollPane.UPPER_LEFT_CORNER, filler4);\n+        });\n+        JLabel rh = new JLabel(\"RowHeader\");\n+        scroll.setRowHeaderView(rh);\n+        JButton b3 = new JButton(\"Rowhead\");\n+        b3.addActionListener(e -> {\n+            JPanel filler = new JPanel();\n+            filler.setSize(150, 150);\n+            filler.setBackground(Color.yellow);\n+            scroll.getRowHeader().add(filler);\n+        });\n+        JButton b4 = new JButton(\"Viewport\");\n+        b4.addActionListener(e -> {\n+            JPanel filler = new JPanel();\n+            filler.setSize(150, 150);\n+            filler.setBackground(Color.yellow);\n+            scroll.getViewport().add(filler);\n+        });\n+\n+        p.add(bn);\n+        p.add(ba);\n+        p.add(b1);\n+        p.add(b2);\n+        p.add(b3);\n+        p.add(b4);\n+        f.add(p);\n+        f.setSize(300, 300);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/bug4166037.java","additions":167,"deletions":0,"binary":false,"changes":167,"status":"added"},{"patch":"@@ -0,0 +1,69 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4237517\n+ * @summary Tests that scrolling with blit draws the right thing\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4237517\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JList;\n+import javax.swing.JScrollPane;\n+\n+public class bug4237517 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        Select the first item in the list and hit PageDown\n+        key two times. If the list is redrawn correctly,\n+        i.e. if the digits go in order, then the test PASSES.\n+        Otherwise, the test FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4237517 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4237517::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"Scrolling Window Blit Test\");\n+        String[] data = new String[100];\n+\n+        for (int counter = 0; counter < data.length; counter++) {\n+            data[counter] = Integer.toString(counter);\n+        }\n+        JList list = new JList(data);\n+        JScrollPane sp = new JScrollPane(list);\n+        sp.getViewport().putClientProperty(\"EnableWindowBlit\", Boolean.TRUE);\n+        f.add(sp);\n+        f.setSize(200, 200);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/bug4237517.java","additions":69,"deletions":0,"binary":false,"changes":69,"status":"added"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4237560\n+ * @summary Tests that JScrollPane do not distort TAB order in an HTML page\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4237560\n+ *\/\n+\n+import javax.swing.JEditorPane;\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+\n+public class bug4237560 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        A JEditorPane contains 10 input fields and is inserted into\n+        JScrollPane. Click text field #8 so that it is selected. Press\n+        TAB three times (even if text field #9 and #10 are not visible in\n+        the ScrollPane). If this gives focus to the first text field (#1)\n+        the test PASSES, else it FAILS.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4237560 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4237560::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static final String TEXT = \"<html><body><form method=\\\"POST\\\"><table>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"1\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"2\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"3\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"4\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"5\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"6\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"7\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"8\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"9\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<tr><td><input type=\\\"text\\\" value=\\\"10\\\" size=\\\"20\\\"><\/td><\/tr>\\n\" +\n+            \"<\/table><\/form><\/body><\/html>\";\n+\n+    private static JFrame createUI() {\n+        JFrame frame = new JFrame(\"JScrollPane HTML TAB Test\");\n+        JEditorPane viewer = new JEditorPane(\"text\/html\", TEXT);\n+        viewer.setEditable(false);\n+        frame.add(new JScrollPane(viewer));\n+        frame.setSize(300, 300);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/bug4237560.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4244899\n+ * @summary Tests whether scrolling with blit has artifacts\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual bug4244899\n+ *\/\n+\n+import javax.swing.JFrame;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTable;\n+import javax.swing.table.AbstractTableModel;\n+\n+public class bug4244899 {\n+    static final String INSTRUCTIONS = \"\"\"\n+        Widen the first column of the table, so that\n+        you get a horizontal scrollbar. Click in the\n+        scrollbar (not on the thumb, but in the track).\n+        If you notice some artifacts\/flashing at\n+        the bottom of the frame, the test FAILS.\n+        Otherwise, the test PASSES.\n+    \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+                .title(\"bug4244899 Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(40)\n+                .testUI(bug4244899::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    static class TestModel extends AbstractTableModel {\n+        private final int rows = 20;\n+        private final int cols = 5;\n+\n+        private Integer[][] data;\n+\n+        public TestModel() {\n+            data = new Integer[rows][];\n+            int realCount = 0;\n+            for (int counter = 0; counter < rows; counter++) {\n+                data[counter] = new Integer[cols];\n+                for (int y = 0; y < cols; y++) {\n+                    data[counter][y] = Integer.valueOf(realCount);\n+                    realCount = (realCount + 1) % 23;\n+                }\n+            }\n+        }\n+\n+        public int getRowCount() {\n+            return data.length;\n+        }\n+\n+        public int getColumnCount() {\n+            return data[0].length;\n+        }\n+\n+        public Object getValueAt(int row, int column) {\n+            return data[row][column];\n+        }\n+    }\n+\n+    static JFrame createUI() {\n+        JFrame f = new JFrame(\"Scrolling Blit Artifact Test\");\n+        JTable table = new JTable(new TestModel());\n+        JScrollPane sp = new JScrollPane(table);\n+        sp.getViewport().putClientProperty(\"EnableWindowBlit\", Boolean.TRUE);\n+        table.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);\n+        f.add(sp);\n+        f.setSize(400, 400);\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JScrollPane\/bug4244899.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}