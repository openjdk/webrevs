{"files":[{"patch":"@@ -0,0 +1,88 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import javax.swing.JButton;\n+import javax.swing.JFileChooser;\n+import javax.swing.JPanel;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @bug 4913368\n+ * @requires (os.family == \"linux\")\n+ * @summary Test repainting when entering an empty directory w\/ GTK LAF\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual EnterEmptyDirectory\n+ *\/\n+\n+public class EnterEmptyDirectory {\n+\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This test is only for the GTK Look & Feel.\n+\n+        Step 1:\n+        Find or create an empty directory. This directory should\n+        be in a directory with other files and directories, such that\n+        there are items in both the Folders and Files lists of the\n+        JFileChooser.\n+\n+        Step 2:\n+        Click the \"Show JFileChooser\" button and enter the empty directory.\n+        If both lists are correctly repainted such that they are both empty\n+        (except for the .\/ and ..\/) then the test passes.\n+\n+        If the contents of the Folders or Files lists are unchanged, test FAILS. \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.gtk.GTKLookAndFeel\");\n+        PassFailJFrame.builder()\n+                .title(\"JFileChooser Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(15)\n+                .columns(40)\n+                .splitUI(EnterEmptyDirectory::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JPanel createAndShowUI() {\n+        JButton button = new JButton(\"Show JFileChooser\");\n+        button.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                JFileChooser jfc = new JFileChooser();\n+                jfc.setMultiSelectionEnabled(true);\n+                jfc.showOpenDialog(null);\n+            }\n+        });\n+        JPanel p = new JPanel();\n+        p.setLayout(new BorderLayout());\n+        p.setSize(200, 200);\n+        p.add(button);\n+        return p;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/EnterEmptyDirectory.java","additions":88,"deletions":0,"binary":false,"changes":88,"status":"added"},{"patch":"@@ -0,0 +1,145 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import javax.swing.JButton;\n+import javax.swing.JFileChooser;\n+import javax.swing.JPanel;\n+import javax.swing.UIManager;\n+\n+\/*\n+ * @test\n+ * @bug 4835633\n+ * @requires (os.family == \"windows\")\n+ * @summary Test various file selection scenarios\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual FileSelectionTests\n+ *\/\n+\n+public class FileSelectionTests {\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This test is only for the Windows Look & Feel.\n+        This is a test of file selection\/deselection using the mouse.\n+        There are quite a few steps. If any step doesn't behave as\n+        expected, press Fail else press Pass.\n+\n+        Make sure that you are in a directory with at least a few files.\n+        Note that if you don't wait long enough between mouse buttons presses\n+         that the action will be interpreted as a double-click and will dismiss\n+         the dialog. Just re-show the dialog in this case.\n+\n+        Press \"Show Windows JFileChooser\" button to show the JFileChooser.\n+\n+        TEST 1:\n+            Click on a filename.  The file should become selected.\n+        TEST 2:\n+            Clear any selection. Click to right of a filename,\n+             in the space between the filename and the file's icon in the next column.\n+             The file should NOT be selected.  If it becomes selected, press Fail.\n+        TEST 3:\n+            Select a filename. As in TEST 2, click in the empty space to the right of\n+             the filename. The file should be deselected.\n+        TEST 4:\n+            Clear any selection. If necessary, resize the file dialog and\/or change to\n+             a directory with only a couple files, so that there is some space between\n+             the list of files and the bottom of the file pane.\n+            Click below the file list, in the empty space between the last file and\n+             bottom of the file pane. The last file in the column above the cursor\n+             should NOT become selected. If any file becomes selected, press Fail.\n+        TEST 5:\n+            Select a file. As in TEST 4, click in the empty space below the file list.\n+            The selected file should become deselected.\n+        TEST 6:\n+            Clear any selection. As in TEST 4, click below the file list.\n+            Then click on the last filename in the list. It should NOT go into edit mode.\n+        TEST 7:\n+            Clear any selection. Double-click below file list. The dialog should not be\n+             dismissed, and no exception should be thrown.\n+        TEST 8:\n+            Clear any selection. As in TEST 2, press the mouse button in the empty space\n+             to the right of a filename, but this time drag the mouse onto the filename.\n+            The file should NOT become selected.\n+        TEST 9:\n+            Clear any selection. As in TEST 4, press the mouse button in the empty space\n+             below the file list, but this time drag onto the last filename in the column.\n+            The file should NOT become selected.\n+        TEST 10:\n+            Click on a filename, and then click again to go into rename mode.\n+            Modify the filename, and then click to the right of the edit box.\n+            The filename should be the new filename.\n+        TEST 11:\n+            As in TEST 10, rename a file, but this time end the editing by clicking below\n+             the file list.  Again, the file should retain the new name.\n+        TEST 12:\n+            Use shift-click to select several files.  Hold \"shift down\" and click in\n+             (1) the empty space to the right of a file name and\n+             (2) in the empty space below the list of files.\n+            The files should remain selected. If the selection is cleared press Fail.\n+        TEST 13:\n+            Switch to Details view. Repeat TESTS 1-11.\n+        TEST 14:\n+            Details view. Clear any selection. Click in the Size column.\n+            No file should become selected.\n+        TEST 15:\n+            Details view. Select a file. Click in the Size column.\n+            The file should be deselected.\n+        TEST 16:\n+            Details view. Shift-click to select several files. Shift-click in\n+             (1) the empty space to the right of a filename\n+             (2) in the Size column and\n+             (3) below the list of files.\n+            The files should remain selected. If the selection is cleared, press Fail. \"\"\";\n+\n+    public static void main(String[] args) throws Exception {\n+        UIManager.setLookAndFeel(\"com.sun.java.swing.plaf.windows.WindowsLookAndFeel\");\n+        PassFailJFrame.builder()\n+                .title(\"JFileChooser Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .rows(25)\n+                .columns(50)\n+                .testTimeOut(10)\n+                .splitUI(FileSelectionTests::createAndShowUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static JPanel createAndShowUI() {\n+        JButton button = new JButton(\"Show Windows JFileChooser\");\n+        button.addActionListener(new ActionListener() {\n+            @Override\n+            public void actionPerformed(ActionEvent e) {\n+                JFileChooser jfc = new JFileChooser();\n+                jfc.setMultiSelectionEnabled(true);\n+                jfc.showOpenDialog(null);\n+            }\n+        });\n+        JPanel p = new JPanel();\n+        p.setLayout(new BorderLayout());\n+        p.setSize(200, 200);\n+        p.add(button);\n+        return p;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/FileSelectionTests.java","additions":145,"deletions":0,"binary":false,"changes":145,"status":"added"},{"patch":"@@ -0,0 +1,209 @@\n+\/*\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.GridLayout;\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+import java.beans.PropertyChangeListener;\n+import java.beans.PropertyChangeEvent;\n+import javax.swing.JComponent;\n+import javax.swing.JButton;\n+import javax.swing.JFileChooser;\n+import javax.swing.JFrame;\n+import javax.swing.JPanel;\n+import javax.swing.JScrollPane;\n+import javax.swing.JTextArea;\n+\n+\/*\n+ * @test\n+ * @bug 4835479\n+ * @requires (os.family == \"windows\")\n+ * @summary JFileChooser should respect native setting for showing hidden files\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ShowHiddenFiles\n+ *\/\n+\n+public class ShowHiddenFiles\n+{\n+    private static final String INSTRUCTIONS = \"\"\"\n+        This tests JFileChooser's ability to track the native setting for\n+        displaying of hidden files.\n+        This test has four parts. If any portion of any of the tests don't\n+        behave as specified, press FAIL else press PASS.\n+        Before beginning the tests, you'll want to find the Folder Options\n+        dialog on your Windows platform. Open an Explorer window for c:\/\n+        and select Tools->Folder Options. Under the View tab, locate\n+        the option to show hidden files. You will need this for the tests.\n+\n+        TEST 1:\n+            This tests that JFileChooser tracks the native platform setting.\n+            Configure windows to Show Hidden Files, and in an Explorer window\n+            locate a hidden file that is now shown (there are usually hidden\n+            files in c:\/).\n+            Click on the TEST 1 button to display a JFileChooser.\n+            Confirm that the hidden files are shown in the JFileChooser.\n+            On Windows 98, TEST 1 is now complete.\n+            On Windows 2000 and later, configure Folder Options to hide hidden\n+            files. Confirm that\n+                (1) the files are hidden in the JFileChooser and\n+                (2) \"PropertyChangeEvent for FILE_HIDING_CHANGED_PROPERTY\"\n+            appears in the accessory text field.\n+            Re-enable showing of hidden files and confirm that\n+                (1) the hidden files are again shown and\n+                (2) you get another PropertyChangeEvent.\n+            Press \"Cancel\" button to close JFileChooser window.\n+\n+        TEST 2:\n+            This tests that JFileChooser.setFileHidingEnabled(true) overrides the\n+            native platform setting.\n+            Make sure Windows is configured to Show Hidden Files.\n+            Click on the TEST 2 button.\n+            Confirm that hidden files are NOT displayed in the JFileChooser.\n+            Press \"Cancel\" button to close JFileChooser window.\n+\n+        TEST 3:\n+            This tests that JFileChooser.setFileHidingEnabled(false) overrides the\n+            Make sure Windows is configured to NOT show hidden files.\n+            Click on the TEST 3 button.\n+            Confirm that hidden files ARE displayed in the JFileChooser.\n+            Press \"Cancel\" button to close JFileChooser window.\n+\n+        TEST 4:\n+            This tests that calling setFileHidingEnabled() on a showing\n+            JFileChooser will cause it to ignore further changes in the\n+            native platform setting.\n+            Click on the TEST 4 button. As in TEST 1, confirm that the\n+            JFileChooser tracks the native setting.\n+            Click on the \"Show Hidden Files\" button.\n+            Confirm that hidden files remain visible, even when you change\n+            the native setting.\n+            Repeat the test for the \"Hide Hidden Files\" button.\n+            Press \"Cancel\" button to close JFileChooser window.\n+        \"\"\";\n+    private static JButton test1, test2, test3, test4;\n+\n+    public static void main(String[] args) throws Exception {\n+        PassFailJFrame.builder()\n+            .title(\"JFileChooser Instructions\")\n+            .instructions(INSTRUCTIONS)\n+            .rows(25)\n+            .columns(50)\n+            .splitUI(ShowHiddenFiles::createAndShowUI)\n+            .build()\n+            .awaitAndCheck();\n+    }\n+\n+    public static JPanel createAndShowUI() {\n+        test1 = new JButton(\"TEST 1: Track native setting\");\n+        test2 = new JButton(\"TEST 2: setFileHidingEnabled(true)\");\n+        test3 = new JButton(\"TEST 3: setFileHidingEnabled(false)\");\n+        test4 = new JButton(\"TEST 4: setFileHidingEnabled() on showing JFC\");\n+\n+        ButtonListener bl = new ButtonListener();\n+        test1.addActionListener(bl);\n+        test2.addActionListener(bl);\n+        test3.addActionListener(bl);\n+        test4.addActionListener(bl);\n+\n+        JPanel p = new JPanel();\n+        p.setLayout(new GridLayout(4,1));\n+        p.setSize(200, 200);\n+        p.add(test1);\n+        p.add(test2);\n+        p.add(test3);\n+        p.add(test4);\n+        return p;\n+    }\n+\n+    private static class ButtonListener implements ActionListener {\n+        public void actionPerformed(ActionEvent e) {\n+            JFileChooser jfc = new JFileChooser(\"c:\/\");\n+            if (e.getSource() == test1) {\n+                jfc.setAccessory(createTest1Acc(jfc));\n+            }\n+            else if (e.getSource() == test2) {\n+                jfc.setAccessory(null);\n+                jfc.setFileHidingEnabled(true);\n+            }\n+            else if (e.getSource() == test3) {\n+                jfc.setAccessory(null);\n+                jfc.setFileHidingEnabled(false);\n+            }\n+            else if (e.getSource() == test4) {\n+                jfc.setAccessory(createTest4Acc(jfc));\n+            }\n+            else {\n+                return;\n+            }\n+            jfc.showOpenDialog(new JFrame());\n+        }\n+    }\n+\n+    private static class JFCHideButton extends JButton implements ActionListener {\n+        JFileChooser jfc;\n+        boolean setVal;\n+\n+        public JFCHideButton(String label, JFileChooser jfc, boolean setVal) {\n+            super(label);\n+            this.jfc = jfc;\n+            this.setVal = setVal;\n+            addActionListener(this);\n+        }\n+        public void actionPerformed(ActionEvent e) {\n+            jfc.setFileHidingEnabled(setVal);\n+        }\n+    }\n+\n+    private static JPanel createTest1Acc(JFileChooser jfc) {\n+        JPanel jpl = new JPanel();\n+        jpl.add(createTAListener(jfc));\n+        return jpl;\n+    }\n+\n+    private static JPanel createTest4Acc(JFileChooser jfc) {\n+        JPanel jpl = new JPanel();\n+        jpl.setLayout(new BorderLayout());\n+\n+        JPanel north = new JPanel();\n+        north.setLayout(new GridLayout(2,1));\n+        north.add(new JFCHideButton(\"Show Hidden Files\", jfc, false));\n+        north.add(new JFCHideButton(\"Hide Hidden Files\", jfc, true));\n+        jpl.add(BorderLayout.NORTH, north);\n+        jpl.add(BorderLayout.CENTER, createTAListener(jfc));\n+        return jpl;\n+    }\n+\n+    private static JComponent createTAListener(JFileChooser jfc) {\n+        final JTextArea jta = new JTextArea(10,20);\n+        PropertyChangeListener pcl = new PropertyChangeListener() {\n+            public void propertyChange(PropertyChangeEvent e) {\n+                jta.append(\"PropertyChangeEvent for FILE_HIDING_CHANGED_PROPERTY\\n\");\n+            }\n+        };\n+        jfc.addPropertyChangeListener(JFileChooser.FILE_HIDING_CHANGED_PROPERTY, pcl);\n+        JScrollPane jsp = new JScrollPane(jta);\n+        return jsp;\n+    }\n+}\n","filename":"test\/jdk\/javax\/swing\/JFileChooser\/ShowHiddenFiles.java","additions":209,"deletions":0,"binary":false,"changes":209,"status":"added"}]}