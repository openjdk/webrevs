{"files":[{"patch":"@@ -1112,0 +1112,1 @@\n+  bool valid_arg = !(std::is_integral<T>::value && x == std::numeric_limits<T>::min());\n@@ -1113,1 +1114,1 @@\n-  if (std::is_integral<T>::value && x == std::numeric_limits<T>::min()) {\n+  if (!valid_arg) {\n@@ -1117,7 +1118,2 @@\n-  T res = (x > 0) ? x : -x;\n-#ifdef ASSERT\n-  if (res < 0) {\n-    report_vm_error(file, line, \"ABS: result should be non-negative\");\n-  }\n-#endif\n-  return res;\n+  \/\/ Prevent exposure to UB by checking valid_arg here as well.\n+  return (x < 0 && valid_arg) ? -x : x;\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":4,"deletions":8,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"unittest.hpp\"\n+#include \"memory\/allocation.hpp\"\n+#include \"memory\/resourceArea.inline.hpp\"\n+#include \"runtime\/thread.hpp\"\n+\n+TEST(absTest, sanity) {\n+  \/\/ Simple integer cases\n+  EXPECT_EQ(0, ABS(0));\n+  EXPECT_EQ(1, ABS(1));\n+  EXPECT_EQ(1, ABS(-1));\n+\n+  \/\/ Simple floating point cases, should be exactly representable\n+  EXPECT_EQ(0.0f, ABS(0.0f));\n+  EXPECT_EQ(1.0f, ABS(1.0f));\n+  EXPECT_EQ(1.0f, ABS(-1.0f));\n+\n+  EXPECT_EQ(0.0, ABS(0.0));\n+  EXPECT_EQ(1.0, ABS(1.0));\n+  EXPECT_EQ(1.0, ABS(-1.0));\n+\n+  \/\/ Upper bounds for unsigned integers\n+  EXPECT_EQ(max_jubyte,  ABS(max_jubyte));\n+  EXPECT_EQ(max_jushort, ABS(max_jushort));\n+  EXPECT_EQ(max_juint,   ABS(max_juint));\n+  EXPECT_EQ(max_julong,  ABS(max_julong));\n+\n+  \/\/ Upper bounds for signed integers\n+  EXPECT_EQ(max_jbyte,  ABS(max_jbyte));\n+  EXPECT_EQ(max_jshort, ABS(max_jshort));\n+  EXPECT_EQ(max_jint,   ABS(max_jint));\n+  EXPECT_EQ(max_jlong,  ABS(max_jlong));\n+\n+  \/\/ Lower valid bounds for signed integers\n+  EXPECT_EQ(max_jbyte,  ABS(min_jbyte + 1));\n+  EXPECT_EQ(max_jshort, ABS(min_jshort + 1));\n+  EXPECT_EQ(max_jint,   ABS(min_jint + 1));\n+  EXPECT_EQ(max_jlong,  ABS(min_jlong + 1));\n+\n+  \/\/ Lower bounds for signed integers after explicit FP cast\n+  EXPECT_TRUE(ABS((float)min_jbyte)  > 0);\n+  EXPECT_TRUE(ABS((float)min_jshort) > 0);\n+  EXPECT_TRUE(ABS((float)min_jint)   > 0);\n+  EXPECT_TRUE(ABS((float)min_jlong)  > 0);\n+}\n+\n+\/\/ Now check what happens when we feed invalid arguments.\n+\n+#ifndef ASSERT\n+\n+\/\/ In release builds, ABS would return incorrect values.\n+\n+TEST(absTest, release_sanity) {\n+  EXPECT_EQ(min_jbyte,  ABS(min_jbyte));\n+  EXPECT_EQ(min_jshort, ABS(min_jshort));\n+  EXPECT_EQ(min_jint,   ABS(min_jint));\n+  EXPECT_EQ(min_jlong,  ABS(min_jlong));\n+}\n+\n+#else\n+\n+\/\/ In debug builds, ABS would assert.\n+\n+TEST_VM_ASSERT_MSG(absTest, debug_sanity_min_jbyte,\n+  \"Error: ABS: argument should not allow overflow\") {\n+\n+  jbyte r = ABS(min_jbyte); \/\/ should fail\n+  EXPECT_TRUE(r > 0); \/\/ should not be normally reachable\n+}\n+\n+TEST_VM_ASSERT_MSG(absTest, debug_sanity_min_jshort,\n+  \"Error: ABS: argument should not allow overflow\") {\n+\n+  jshort r = ABS(min_jshort); \/\/ should fail\n+  EXPECT_TRUE(r > 0); \/\/ should not be normally reachable\n+}\n+\n+TEST_VM_ASSERT_MSG(absTest, debug_sanity_min_jint,\n+  \"Error: ABS: argument should not allow overflow\") {\n+\n+  jint r = ABS(min_jint); \/\/ should fail\n+  EXPECT_TRUE(r > 0); \/\/ should not be normally reachable\n+}\n+\n+TEST_VM_ASSERT_MSG(absTest, debug_sanity_min_jlong,\n+  \"Error: ABS: argument should not allow overflow\") {\n+\n+  jlong r = ABS(min_jlong); \/\/ should fail\n+  EXPECT_TRUE(r > 0); \/\/ should not be normally reachable\n+}\n+\n+#endif\n","filename":"test\/hotspot\/gtest\/utilities\/test_abs.cpp","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}