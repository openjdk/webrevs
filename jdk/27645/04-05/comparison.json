{"files":[{"patch":"@@ -42,3 +42,2 @@\n-    \/\/ No hardware fence required, the members are declared volatile and a compiler barrier is\n-    \/\/ present so the compiler will not reorder and the profiler always reads from the same\n-    \/\/ thread and should observe the state in program order.\n+    \/\/ No hardware barriers are necessary. All members are volatile and the profiler\n+    \/\/ is run from a signal handler and only observers the thread its running on.\n@@ -48,1 +47,0 @@\n-    compiler_barrier();\n@@ -54,1 +52,3 @@\n-    \/\/ In order to make sure the transition state is valid for \"this\"\n+    \/\/ No hardware barriers are necessary. All members are volatile and the profiler\n+    \/\/ is run from a signal handler and only observers the thread its running on.\n+\n@@ -56,8 +56,0 @@\n-    \/\/\n-    \/\/ Hack Alert: Temporary bugfix for 4717480\/4721647\n-    \/\/ To act like previous version (pd_cache_state) don't null _last_Java_sp\n-    \/\/ unless the value is changing\n-    \/\/\n-    \/\/ No hardware fence required, the members are declared volatile and a compiler barrier is\n-    \/\/ present so the compiler will not reorder and the profiler always reads from the same\n-    \/\/ thread and should observe the state in program order.\n@@ -66,1 +58,0 @@\n-      compiler_barrier();\n@@ -71,1 +62,0 @@\n-    compiler_barrier();\n","filename":"src\/hotspot\/cpu\/aarch64\/javaFrameAnchor_aarch64.hpp","additions":5,"deletions":15,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -642,1 +642,1 @@\n-  \/\/ Must be last so profiler will always see valid frame if has_last_frame() is true\n+  \/\/ We must set sp last.\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n@@ -35,0 +33,5 @@\n+\/\/ A compiler barrier, forcing the C++ compiler to invalidate all memory assumptions\n+static inline void compiler_barrier() {\n+  __asm__ volatile (\"\" : : : \"memory\");\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/orderAccess_bsd_x86.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n@@ -59,1 +58,1 @@\n-#define inlasm_compiler_barrier() compiler_barrier()\n+#define inlasm_compiler_barrier() __asm__ volatile (\"\" : : : \"memory\");\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/orderAccess_linux_s390.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n@@ -37,0 +35,5 @@\n+\/\/ A compiler barrier, forcing the C++ compiler to invalidate all memory assumptions\n+static inline void compiler_barrier() {\n+  __asm__ volatile (\"\" : : : \"memory\");\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/orderAccess_linux_x86.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n-\n@@ -39,0 +37,5 @@\n+\/\/ A compiler barrier, forcing the C++ compiler to invalidate all memory assumptions\n+inline void compiler_barrier() {\n+  _ReadWriteBarrier();\n+}\n+\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/orderAccess_windows_x86.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -99,7 +99,0 @@\n-\/\/ Complier barrier which prevents the compiler from reordering loads and stores.\n-\/\/ It does not prevent the hardware from doing so. Typically you should use\n-\/\/ OrderAccess instead.\n-static inline void compiler_barrier() {\n-  __asm__ volatile (\"\" : : : \"memory\");\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_gcc.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,2 +39,1 @@\n-# include <float.h>    \/\/ for _isnan\n-# include <intrin.h>   \/\/ for _ReadWriteBarrier\n+# include <float.h> \/\/ for _isnan\n@@ -42,1 +41,1 @@\n-# include <io.h>       \/\/ for stream.cpp\n+# include <io.h>    \/\/ for stream.cpp\n@@ -46,1 +45,1 @@\n-# include <stddef.h>   \/\/ for offsetof\n+# include <stddef.h>\/\/ for offsetof\n@@ -107,7 +106,0 @@\n-\/\/ Complier barrier which prevents the compiler from reordering loads and stores.\n-\/\/ It does not prevent the hardware from doing so. Typically you should use\n-\/\/ OrderAccess instead.\n-static inline void compiler_barrier() {\n-  _ReadWriteBarrier();\n-}\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_visCPP.hpp","additions":3,"deletions":11,"binary":false,"changes":14,"status":"modified"}]}