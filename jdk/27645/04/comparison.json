{"files":[{"patch":"@@ -42,0 +42,4 @@\n+    \/\/ No hardware fence required, the members are declared volatile and a compiler barrier is\n+    \/\/ present so the compiler will not reorder and the profiler always reads from the same\n+    \/\/ thread and should observe the state in program order.\n+\n@@ -44,1 +48,1 @@\n-    OrderAccess::release();\n+    compiler_barrier();\n@@ -57,0 +61,3 @@\n+    \/\/ No hardware fence required, the members are declared volatile and a compiler barrier is\n+    \/\/ present so the compiler will not reorder and the profiler always reads from the same\n+    \/\/ thread and should observe the state in program order.\n@@ -59,1 +66,1 @@\n-      OrderAccess::release();\n+      compiler_barrier();\n@@ -64,0 +71,1 @@\n+    compiler_barrier();\n","filename":"src\/hotspot\/cpu\/aarch64\/javaFrameAnchor_aarch64.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -637,2 +637,0 @@\n-  str(last_java_sp, Address(rthread, JavaThread::last_Java_sp_offset()));\n-\n@@ -643,0 +641,3 @@\n+\n+  \/\/ Must be last so profiler will always see valid frame if has_last_frame() is true\n+  str(last_java_sp, Address(rthread, JavaThread::last_Java_sp_offset()));\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n@@ -33,5 +35,0 @@\n-\/\/ A compiler barrier, forcing the C++ compiler to invalidate all memory assumptions\n-static inline void compiler_barrier() {\n-  __asm__ volatile (\"\" : : : \"memory\");\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/bsd_x86\/orderAccess_bsd_x86.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -58,1 +59,1 @@\n-#define inlasm_compiler_barrier() __asm__ volatile (\"\" : : : \"memory\");\n+#define inlasm_compiler_barrier() compiler_barrier()\n","filename":"src\/hotspot\/os_cpu\/linux_s390\/orderAccess_linux_s390.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n@@ -35,5 +37,0 @@\n-\/\/ A compiler barrier, forcing the C++ compiler to invalidate all memory assumptions\n-static inline void compiler_barrier() {\n-  __asm__ volatile (\"\" : : : \"memory\");\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/linux_x86\/orderAccess_linux_x86.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n+\n@@ -37,5 +39,0 @@\n-\/\/ A compiler barrier, forcing the C++ compiler to invalidate all memory assumptions\n-inline void compiler_barrier() {\n-  _ReadWriteBarrier();\n-}\n-\n","filename":"src\/hotspot\/os_cpu\/windows_x86\/orderAccess_windows_x86.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -99,0 +99,7 @@\n+\/\/ Complier barrier which prevents the compiler from reordering loads and stores.\n+\/\/ It does not prevent the hardware from doing so. Typically you should use\n+\/\/ OrderAccess instead.\n+static inline void compiler_barrier() {\n+  __asm__ volatile (\"\" : : : \"memory\");\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_gcc.hpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,1 +39,2 @@\n-# include <float.h> \/\/ for _isnan\n+# include <float.h>    \/\/ for _isnan\n+# include <intrin.h>   \/\/ for _ReadWriteBarrier\n@@ -41,1 +42,1 @@\n-# include <io.h>    \/\/ for stream.cpp\n+# include <io.h>       \/\/ for stream.cpp\n@@ -45,1 +46,1 @@\n-# include <stddef.h>\/\/ for offsetof\n+# include <stddef.h>   \/\/ for offsetof\n@@ -106,0 +107,7 @@\n+\/\/ Complier barrier which prevents the compiler from reordering loads and stores.\n+\/\/ It does not prevent the hardware from doing so. Typically you should use\n+\/\/ OrderAccess instead.\n+static inline void compiler_barrier() {\n+  _ReadWriteBarrier();\n+}\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_visCPP.hpp","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"}]}