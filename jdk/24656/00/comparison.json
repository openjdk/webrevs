{"files":[{"patch":"@@ -0,0 +1,128 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4258667 4405602\n+ * @summary  Make sure TextComponents are grayed out when non-editable\n+ *           if the background color has not been set by client code.\n+ *           Make sure TextComponents are not grayed out when non-editable\n+ *           if the background color has been set by client code.\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual BackgroundTest\n+ *\/\n+\n+import java.awt.Button;\n+import java.awt.Color;\n+import java.awt.FlowLayout;\n+import java.awt.Frame;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+\n+public class BackgroundTest {\n+    private static final String enableString = \"EnableText\";\n+    private static final String disableString = \"DisableText\";\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. When the frame appears, it should have a blue background.\n+                2. The first TextField and TextArea will be the default color.\n+                   The second TextField and TextArea will be green.\n+                4. Press the \"DisableText\" button.\n+                   The first TextField and TextArea should change colors to the\n+                   default disabled color.  On Windows, this is usually gray.\n+                   On linux and macos it will match the environment settings.\n+                   If the TextField or the TextArea do not change colors as described,\n+                   the test FAILS.\n+                5. The second TextField and TextArea should still be green.\n+                   If either of them are not green, the test FAILS.\n+                   Press the \"EnableText\" button (same button as before).\n+                   The first TextField and TextArea should return to their\n+                   original colors as described in the first paragraph. If they\n+                   do not, the test FAILS.\n+                6. The second TextField and TextArea should still be green.\n+                   If either of them are not green, the test FAILS.\n+                   Otherwise, the test PASSES.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(BackgroundTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"Background Test\");\n+        frame.setLayout(new FlowLayout());\n+        TextField tf = new TextField(30);\n+        TextArea ta = new TextArea(4, 30);\n+        TextField setTf = new TextField(30);\n+        TextArea setTa = new TextArea(4, 30);\n+        Button enableButton = new Button(disableString);\n+\n+        enableButton.setBackground(Color.red);\n+        frame.setSize(500, 250);\n+\n+        frame.setBackground(Color.blue);\n+\n+        tf.setText(\"Background not set - should be default\");\n+        tf.setEditable(true);\n+        frame.add(tf);\n+        ta.setText(\"Background not set - should be default\");\n+        ta.setEditable(true);\n+        frame.add(ta);\n+\n+        setTf.setText(\"Background is set - should be Green\");\n+        setTf.setBackground(Color.green);\n+        setTf.setEditable(true);\n+        frame.add(setTf);\n+        setTa.setText(\"Background is set - should be Green\");\n+        setTa.setBackground(Color.green);\n+        setTa.setEditable(true);\n+        frame.add(setTa);\n+\n+        enableButton.addActionListener(e -> {\n+            boolean currentlyEditable = tf.isEditable();\n+\n+            if (currentlyEditable) {\n+                tf.setEditable(false);\n+                ta.setEditable(false);\n+                setTf.setEditable(false);\n+                setTa.setEditable(false);\n+                enableButton.setLabel(enableString);\n+            } else {\n+                tf.setEditable(true);\n+                ta.setEditable(true);\n+                setTf.setEditable(true);\n+                setTa.setEditable(true);\n+                enableButton.setLabel(disableString);\n+            }\n+        });\n+        frame.add(enableButton);\n+        return frame;\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/awt\/TextComponent\/BackgroundTest.java","additions":128,"deletions":0,"binary":false,"changes":128,"status":"added"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 5042122\n+ * @summary Verifies the TextComponent is grayed out when disabled\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual DisableTest\n+ *\/\n+\n+import javax.swing.BoxLayout;\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Component;\n+import java.awt.Frame;\n+import java.awt.Panel;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+import java.awt.event.ActionListener;\n+import java.util.Vector;\n+import java.util.Iterator;\n+\n+public class DisableTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Click \"Enable\" and \"Disable\" buttons and verify the text\n+                   components are disabled and enabled correctly.\n+                2. Verify that the disabled text components are grayed\n+                   out and are uneditable.\n+                3. Click PASS or FAIL accordingly.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(DisableTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"TextComponent Disabled test\");\n+        frame.setLayout(new BorderLayout());\n+        frame.setSize(200, 200);\n+        final Vector comps = new Vector();\n+        comps.add(new TextField(\"TextField\"));\n+        TextArea ta = new TextArea(\"TextArea\", 2, 100, TextArea.SCROLLBARS_NONE);\n+        comps.add(ta);\n+        Panel pc = new Panel();\n+        pc.setLayout(new BoxLayout(pc, BoxLayout.Y_AXIS));\n+        Iterator iter = comps.iterator();\n+        while (iter.hasNext()) {\n+            Component c = (Component) iter.next();\n+            c.setEnabled(false);\n+            pc.add(c);\n+        }\n+        frame.add(pc, BorderLayout.CENTER);\n+        Panel p = new Panel();\n+        final Button be = new Button(\"Enable\");\n+        final Button bd = new Button(\"Disable\");\n+        p.add(be);\n+        p.add(bd);\n+        ActionListener al = ev -> {\n+            boolean enable = (ev.getSource() == be);\n+            Iterator iterator = comps.iterator(); while(iterator.hasNext()) {\n+                Component c = (Component) iterator.next();\n+                c.setEnabled(enable);\n+            }\n+        };\n+        be.addActionListener(al);\n+        bd.addActionListener(al);\n+        frame.add(p, BorderLayout.SOUTH);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/DisableTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,86 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4035364\n+ * @summary Checks that Caps Lock key works\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual ModifiersTest\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.TextArea;\n+import java.awt.event.KeyAdapter;\n+import java.awt.event.KeyEvent;\n+\n+public class ModifiersTest {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Type some text in the TextArea in upper and lowercase,\n+                   using the Caps Lock ON\/OFF.\n+                2. If Caps Lock toggles correctly and you are able to type in\n+                     both cases, the test PASS. Else Test FAILS.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(ModifiersTest::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"Modifiers Test\");\n+        frame.setLayout(new GridLayout(1, 1));\n+        frame.addKeyListener(new KeyChecker());\n+        frame.setLayout(new GridLayout(2, 1));\n+        Label label = new Label(\"See if you can type in upper and lowercase using Caps Lock:\");\n+        frame.add(label);\n+        TextArea ta = new TextArea();\n+        frame.add(ta);\n+        ta.addKeyListener(new KeyChecker());\n+        ta.requestFocus();\n+        frame.setSize(400, 300);\n+        return frame;\n+    }\n+}\n+\n+\/\/ a KeyListener for debugging purposes\n+class KeyChecker extends KeyAdapter {\n+    public void keyPressed(KeyEvent ev) {\n+        System.out.println(ev);\n+    }\n+\n+    public void keyReleased(KeyEvent ev) {\n+        System.out.println(ev);\n+    }\n+\n+    public void keyTyped(KeyEvent ev) {\n+        System.out.println(ev);\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/ModifiersTest.java","additions":86,"deletions":0,"binary":false,"changes":86,"status":"added"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 4129511\n+ * @summary Tests that TextField margins are not exceedingly wide\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @run main\/manual TextFieldMargin\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.GridLayout;\n+import java.awt.Label;\n+import java.awt.TextArea;\n+import java.awt.TextField;\n+\n+public class TextFieldMargin {\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                1. Examine the TextField, Label, and TextArea to see\n+                   that the text is vertically aligned along the left\n+                2. If all are aligned along the left, then test PASS,\n+                   else test FAILS.\n+                \"\"\";\n+        PassFailJFrame.builder()\n+                .title(\"Test Instructions\")\n+                .instructions(INSTRUCTIONS)\n+                .columns(35)\n+                .testUI(TextFieldMargin::initialize)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public static Frame initialize() {\n+        Frame frame = new Frame(\"Frame with a text field & a label\");\n+        frame.setLayout(new GridLayout(5, 1));\n+        TextField text_field = new TextField(\"Left Textfield\");\n+        frame.add(text_field);\n+        Label label = new Label(\"Left Label\");\n+        frame.add(label);\n+        TextArea text_area = new TextArea(\"Left Textfield\");\n+        frame.add(text_area);\n+        frame.setBounds(50, 50, 300, 300);\n+        return frame;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/TextComponent\/TextFieldMargin.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}