{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4244499 4532049 4700978 4820807 4980042\n+ * @bug 4244499 4532049 4700978 4820807 4980042 7009069\n@@ -29,0 +29,1 @@\n+ * @run junit ZipCoding\n@@ -31,0 +32,2 @@\n+import org.junit.jupiter.api.Test;\n+\n@@ -36,1 +39,1 @@\n-public class ZipCoding {\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -38,1 +41,1 @@\n-    public static void main(String[] args) throws Exception {\n+public class ZipCoding {\n@@ -40,0 +43,7 @@\n+    \/**\n+     * Test ZIP file name and comment encoding using the MS code page 932 for the Japanese language\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void MS932() throws IOException {\n@@ -41,1 +51,2 @@\n-             \"\\u4e00\\u4e01\", \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\");\n+                \"\\u4e00\\u4e01\", \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\");\n+    }\n@@ -43,0 +54,7 @@\n+    \/**\n+     * Test ZIP file name and comment encoding using the code page for the IBM PC\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void ibm437() throws IOException {\n@@ -45,0 +63,1 @@\n+    }\n@@ -46,0 +65,7 @@\n+    \/**\n+     * Test ZIP file name and comment encoding using UTF-8 with Japanese characters\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void utf8Japanese() throws IOException {\n@@ -47,1 +73,2 @@\n-             \"\\u4e00\\u4e01\", \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\");\n+                \"\\u4e00\\u4e01\", \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\");\n+    }\n@@ -49,0 +76,7 @@\n+    \/**\n+     * Test ZIP file name and comment encoding using UTF-8 with characters in the Latin1 range\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void utf8InLat1Range() throws IOException {\n@@ -50,1 +84,2 @@\n-             \"\\u00e4\\u00fc\", \"German Umlaut \\u00fc in comment\");\n+                \"\\u00e4\\u00fc\", \"German Umlaut \\u00fc in comment\");\n+    }\n@@ -52,0 +87,7 @@\n+    \/**\n+     * Test ZIP file name and comment encoding using UTF-8 with surrogate pairs\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @Test\n+    public void utf8Surrogate() throws IOException {\n@@ -54,1 +96,0 @@\n-\n@@ -57,3 +98,17 @@\n-    static void testZipInputStream(InputStream is, Charset cs,\n-                                   String name, String comment, byte[] bb)\n-        throws Exception\n+    \/**\n+     * Verify that a ZIP entry with the given name and comment can be found\n+     * when opening the given ZIP file using ZipInputStream with the given charset\n+     *\n+     * @param zip the ZIP file to open\n+     * @param openCharset the Charset to pass to the ZipInputStream constructor\n+     * @param expectedName the expected name of the ZIP entry\n+     * @param expectedComment the expected comment of ZIP entry\n+     * @param expectedContent the expected contents of the ZIP entry\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    static void testZipInputStream(byte[] zip,\n+                                   Charset openCharset,\n+                                   String expectedName,\n+                                   String expectedComment,\n+                                   byte[] expectedContent) throws IOException\n@@ -61,1 +116,3 @@\n-        try (ZipInputStream zis = new ZipInputStream(is, cs)) {\n+\n+        try (InputStream in = new ByteArrayInputStream(zip);\n+             ZipInputStream zis = new ZipInputStream(in, openCharset)) {\n@@ -63,8 +120,4 @@\n-            if (e == null || ! name.equals(e.getName()))\n-                throw new RuntimeException(\"ZipIS name doesn't match!\");\n-            byte[] bBuf = new byte[bb.length << 1];\n-            int n = zis.read(bBuf, 0, bBuf.length);\n-            if (n != bb.length ||\n-                !Arrays.equals(bb, Arrays.copyOf(bBuf, n))) {\n-                throw new RuntimeException(\"ZipIS content doesn't match!\");\n-            }\n+            assertNotNull(e);\n+            assertEquals(expectedName, e.getName());\n+            byte[] content = zis.readAllBytes();\n+            assertArrayEquals(expectedContent, content, \"ZipIS content doesn't match!\");\n@@ -74,3 +127,18 @@\n-    static void testZipFile(File f, Charset cs,\n-                            String name, String comment, byte[] bb)\n-        throws Exception\n+    \/**\n+     * Verify that a ZIP entry with the given name and comment can be found\n+     * when opening the given ZIP file using ZipFile with the given charset\n+     *\n+     * @param zip the ZIP file to open\n+     * @param openCharset the Charset to pass to the ZipInputStream constructor\n+     * @param expectedName the expected name of the ZIP entry\n+     * @param expectedComment the expected comment of ZIP entry\n+     * @param expectedContent the expected contents of the ZIP entry\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    static void testZipFile(File zip,\n+                            Charset openCharset,\n+                            String expectedName,\n+                            String expectedComment,\n+                            byte[] expectedContent)\n+        throws IOException\n@@ -78,1 +146,2 @@\n-        try (ZipFile zf = new ZipFile(f, cs)) {\n+        try (ZipFile zf = new ZipFile(zip, openCharset)) {\n+            \/\/ Test using ZipFile.entries\n@@ -81,15 +150,13 @@\n-            if (! name.equals(e.getName()) ||\n-                ! comment.equals(e.getComment()))\n-                throw new RuntimeException(\"ZipFile: name\/comment doesn't match!\");\n-            InputStream is = zf.getInputStream(e);\n-            if (is == null)\n-                throw new RuntimeException(\"ZipFile: getIS failed!\");\n-            byte[] bBuf = new byte[bb.length << 1];\n-            int n = 0;\n-            int nn =0;\n-            while ((nn = is.read(bBuf, n, bBuf.length-n)) != -1) {\n-                n += nn;\n-            }\n-            if (n != bb.length ||\n-                !Arrays.equals(bb, Arrays.copyOf(bBuf, n))) {\n-                throw new RuntimeException(\"ZipFile content doesn't match!\");\n+            assertNotNull(e);\n+            assertEquals(expectedName, e.getName(), \"ZipFile.entries(): name doesn't match!\");\n+            assertEquals(expectedComment, e.getComment(), \"ZipFile.entries(): comment doesn't match!\");\n+\n+            \/\/ Test using ZipFile.getEntry\n+            e = zf.getEntry(expectedName);\n+            assertNotNull(e, \"ZipFile.getEntry(): Entry not found using charset \" + openCharset.name());\n+            assertEquals(expectedName, e.getName(), \"ZipFile.getEntry(): name doesn't match!\");\n+            assertEquals(expectedComment, e.getComment(), \"ZipFile.getEntry(): comment doesn't match!\");\n+            try (InputStream is = zf.getInputStream(e)) {\n+                assertNotNull(is);\n+                byte[] actualContent = is.readAllBytes();\n+                assertArrayEquals(expectedContent, actualContent, \"ZipFile content doesn't match!\");\n@@ -100,4 +167,15 @@\n-    static void test(String csn, String name, String comment)\n-        throws Exception\n-    {\n-        byte[] bb = \"This is the content of the zipfile\".getBytes(\"ISO-8859-1\");\n+    \/**\n+     * Verify that a ZIP file with a written using ZipOutputStream with an entry\n+     * with the given name and comment can be read back using the same charset\n+     * using both the ZipFile and ZipInputStream APIs.\n+     *\n+     * If the charset is \"utf-8\", also test that the entry is read with the expected\n+     * name when opened using a non-utf-8 charset.\n+     * @param csn the charset used when writing and opening the ZIP file\n+     * @param name the name of the entry to write and find\n+     * @param comment the comment to add to the entry\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    static void test(String csn, String name, String comment) throws IOException {\n+        byte[] entryData = \"This is the content of the zipfile\".getBytes(\"ISO-8859-1\");\n@@ -110,1 +188,1 @@\n-            zos.write(bb, 0, bb.length);\n+            zos.write(entryData, 0, entryData.length);\n@@ -113,2 +191,4 @@\n-        ByteArrayInputStream bis = new ByteArrayInputStream(baos.toByteArray());\n-        testZipInputStream(bis, cs, name, comment, bb);\n+\n+        byte[] zip = baos.toByteArray();\n+\n+        testZipInputStream(zip, cs, name, comment, entryData);\n@@ -118,2 +198,1 @@\n-            bis.reset();\n-            testZipInputStream(bis, Charset.forName(\"MS932\"), name, comment, bb);\n+            testZipInputStream(zip, Charset.forName(\"MS932\"), name, comment, entryData);\n@@ -127,1 +206,1 @@\n-        testZipFile(f, cs, name, comment, bb);\n+        testZipFile(f, cs, name, comment, entryData);\n@@ -129,1 +208,1 @@\n-            testZipFile(f, Charset.forName(\"MS932\"), name, comment, bb);\n+            testZipFile(f, Charset.forName(\"MS932\"), name, comment, entryData);\n","filename":"test\/jdk\/java\/util\/zip\/ZipCoding.java","additions":129,"deletions":50,"binary":false,"changes":179,"status":"modified"}]}