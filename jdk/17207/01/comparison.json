{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 4244499 4532049 4700978 4820807 4980042\n+ * @bug 4244499 4532049 4700978 4820807 4980042 7009069\n@@ -29,0 +29,1 @@\n+ * @run junit ZipCoding\n@@ -31,0 +32,4 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -33,0 +38,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -34,0 +41,1 @@\n+import java.util.stream.Stream;\n@@ -36,0 +44,2 @@\n+import static org.junit.jupiter.api.Assertions.*;\n+\n@@ -38,1 +48,3 @@\n-    public static void main(String[] args) throws Exception {\n+    \/\/ The data to write to ZIP entries in this test\n+    private static byte[] ENTRY_DATA = \"German Umlaut \\u00fc in entry data\"\n+            .getBytes(StandardCharsets.ISO_8859_1);\n@@ -40,2 +52,11 @@\n-        test(\"MS932\",\n-             \"\\u4e00\\u4e01\", \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\");\n+    \/**\n+     * Provide arguments used for parameterized tests\n+     * @return a stream of argument lists\n+     *\/\n+    public static Stream<Arguments> charsetsAndNames() {\n+        \/\/ Arguments are: Write charset, read charset, entry name, comment\n+        return Stream.of(\n+                \/\/ MS code page 932 for the Japanese language\n+                Arguments.of(\"MS932\", \"MS932\",\n+                        \"\\u4e00\\u4e01\",\n+                        \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\"),\n@@ -43,2 +64,4 @@\n-        test(\"ibm437\",\n-             \"\\u00e4\\u00fc\", \"German Umlaut \\u00fc in comment\");\n+                \/\/ Code page for the IBM PC\n+                Arguments.of(\"ibm437\", \"ibm437\",\n+                        \"\\u00e4\\u00fc\",\n+                        \"German Umlaut \\u00fc in comment\"),\n@@ -46,2 +69,4 @@\n-        test(\"utf-8\",\n-             \"\\u4e00\\u4e01\", \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\");\n+                \/\/ UTF-8 with Japanese characters\n+                Arguments.of(\"utf-8\", \"utf-8\",\n+                        \"\\u4e00\\u4e01\",\n+                        \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\"),\n@@ -49,2 +74,4 @@\n-        test(\"utf-8\",\n-             \"\\u00e4\\u00fc\", \"German Umlaut \\u00fc in comment\");\n+                \/\/ UTF-8 with characters in the Latin1 range\n+                Arguments.of(\"utf-8\", \"utf-8\",\n+                        \"\\u00e4\\u00fc\",\n+                        \"German Umlaut \\u00fc in comment\"),\n@@ -52,2 +79,4 @@\n-        test(\"utf-8\",\n-             \"Surrogate\\ud801\\udc01\", \"Surrogates \\ud800\\udc00 in comment\");\n+                \/\/ UTF-8 with surrogate pairs\n+                Arguments.of(\"utf-8\", \"utf-8\",\n+                        \"Surrogate\\ud801\\udc01\",\n+                        \"Surrogates \\ud800\\udc00 in comment\"),\n@@ -55,0 +84,6 @@\n+                \/\/ ZipOutputStream sets the 'Language encoding flag' when writing using UTF-8\n+                \/\/ UTF-8 should be used for decoding, even when opening with a different charset\n+                Arguments.of(\"utf-8\", \"iso-8859-1\",\n+                        \"\\u00e4\\u00fc\",\n+                        \"German Umlaut \\u00fc in comment\")\n+        );\n@@ -57,5 +92,23 @@\n-    static void testZipInputStream(InputStream is, Charset cs,\n-                                   String name, String comment, byte[] bb)\n-        throws Exception\n-    {\n-        try (ZipInputStream zis = new ZipInputStream(is, cs)) {\n+    \/**\n+     * Verify that ZipInputStream decodes entry names and comments\n+     * using the charset provided to its constructor, or that it decodes\n+     * using UTF-8 when the 'Language encoding flag' is set\n+     *\n+     * @param writeCharset the charset to use for ZipOutputStream when producing the ZIP\n+     * @param readCharset the charset to use when opening the ZipInputStream\n+     * @param name the entry name\n+     * @param comment the entry comment (not read by ZipInputStream)\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"charsetsAndNames\")\n+    public void testZipInputStream(String writeCharset,\n+                                   String readCharset,\n+                                   String name,\n+                                   String comment) throws IOException {\n+\n+        byte[] zip = createZIP(writeCharset, name, comment);\n+\n+        try (InputStream in = new ByteArrayInputStream(zip);\n+             ZipInputStream zis = new ZipInputStream(in, Charset.forName(readCharset))) {\n@@ -63,8 +116,4 @@\n-            if (e == null || ! name.equals(e.getName()))\n-                throw new RuntimeException(\"ZipIS name doesn't match!\");\n-            byte[] bBuf = new byte[bb.length << 1];\n-            int n = zis.read(bBuf, 0, bBuf.length);\n-            if (n != bb.length ||\n-                !Arrays.equals(bb, Arrays.copyOf(bBuf, n))) {\n-                throw new RuntimeException(\"ZipIS content doesn't match!\");\n-            }\n+            assertNotNull(e);\n+            assertEquals(name, e.getName());\n+            assertNull(e.getComment()); \/\/ No comment in the LOC header\n+            assertArrayEquals(ENTRY_DATA, zis.readAllBytes(), \"ZipIS content doesn't match!\");\n@@ -74,5 +123,26 @@\n-    static void testZipFile(File f, Charset cs,\n-                            String name, String comment, byte[] bb)\n-        throws Exception\n-    {\n-        try (ZipFile zf = new ZipFile(f, cs)) {\n+    \/**\n+     * Verify that ZipFile decodes entry names and comments\n+     * using the charset provided to its constructor, or that it decodes\n+     * using UTF-8 when the 'Language encoding flag' is set\n+     *\n+     * @param writeCharset the charset to use for ZipOutputStream when producing the ZIP\n+     * @param readCharset the charset to use when opening the ZipFile\n+     * @param name the name of the entry\n+     * @param comment the comment of the entry\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    @ParameterizedTest\n+    @MethodSource(\"charsetsAndNames\")\n+    public void testZipFile(String writeCharset,\n+                            String readCharset,\n+                            String name,\n+                            String comment) throws IOException {\n+\n+        byte[] zip = createZIP(writeCharset, name, comment);\n+\n+        Path f = Path.of(\"zfcoding.zip\");\n+        Files.write(f, zip);\n+\n+        try (ZipFile zf = new ZipFile(f.toFile(), Charset.forName(readCharset))) {\n+            \/\/ Test using ZipFile.entries\n@@ -81,15 +151,14 @@\n-            if (! name.equals(e.getName()) ||\n-                ! comment.equals(e.getComment()))\n-                throw new RuntimeException(\"ZipFile: name\/comment doesn't match!\");\n-            InputStream is = zf.getInputStream(e);\n-            if (is == null)\n-                throw new RuntimeException(\"ZipFile: getIS failed!\");\n-            byte[] bBuf = new byte[bb.length << 1];\n-            int n = 0;\n-            int nn =0;\n-            while ((nn = is.read(bBuf, n, bBuf.length-n)) != -1) {\n-                n += nn;\n-            }\n-            if (n != bb.length ||\n-                !Arrays.equals(bb, Arrays.copyOf(bBuf, n))) {\n-                throw new RuntimeException(\"ZipFile content doesn't match!\");\n+            assertNotNull(e);\n+            assertEquals(name, e.getName(), \"ZipFile.entries(): name doesn't match!\");\n+            assertEquals(comment, e.getComment(), \"ZipFile.entries(): comment doesn't match!\");\n+\n+            \/\/ Test using ZipFile.getEntry\n+            e = zf.getEntry(name);\n+            assertNotNull(e,\n+                    String.format(\"Entry not found for ZipFile encoded with %s and opened with %s\",\n+                            writeCharset, readCharset));\n+            assertEquals(name, e.getName(), \"ZipFile.getEntry(): name doesn't match!\");\n+            assertEquals(comment, e.getComment(), \"ZipFile.getEntry(): comment doesn't match!\");\n+            try (InputStream is = zf.getInputStream(e)) {\n+                assertNotNull(is);\n+                assertArrayEquals(ENTRY_DATA, is.readAllBytes(), \"ZipFile content doesn't match!\");\n@@ -98,0 +167,2 @@\n+\n+        Files.deleteIfExists(f);\n@@ -100,5 +171,14 @@\n-    static void test(String csn, String name, String comment)\n-        throws Exception\n-    {\n-        byte[] bb = \"This is the content of the zipfile\".getBytes(\"ISO-8859-1\");\n-        Charset cs = Charset.forName(csn);\n+    \/**\n+     * Create a ZIP file containing an entry with the given name\n+     * and comment, encoded using the given charset.\n+     * Note that if the charset is UTF-8, ZipOutputStream will\n+     * set the 'Language encoding flag' for the entry.\n+     *\n+     * @param charset the charset passed to the ZipOutputStream constructor\n+     * @param name the name of the entry to add\n+     * @param comment the comment of the entry to add\n+     * @return a byte array containing the ZIP file\n+     *\n+     * @throws IOException if an unexpected IOException occurs\n+     *\/\n+    private byte[] createZIP(String charset, String name, String comment) throws IOException {\n@@ -106,1 +186,1 @@\n-        try (ZipOutputStream zos = new ZipOutputStream(baos, cs)) {\n+        try (ZipOutputStream zos = new ZipOutputStream(baos, Charset.forName(charset))) {\n@@ -110,1 +190,1 @@\n-            zos.write(bb, 0, bb.length);\n+            zos.write(ENTRY_DATA);\n@@ -113,19 +193,1 @@\n-        ByteArrayInputStream bis = new ByteArrayInputStream(baos.toByteArray());\n-        testZipInputStream(bis, cs, name, comment, bb);\n-\n-        if (\"utf-8\".equals(csn)) {\n-            \/\/ USE_UTF8 should be set\n-            bis.reset();\n-            testZipInputStream(bis, Charset.forName(\"MS932\"), name, comment, bb);\n-        }\n-\n-        File f = new File(new File(System.getProperty(\"test.dir\", \".\")),\n-                          \"zfcoding.zip\");\n-        try (FileOutputStream fos = new FileOutputStream(f)) {\n-            baos.writeTo(fos);\n-        }\n-        testZipFile(f, cs, name, comment, bb);\n-        if (\"utf-8\".equals(csn)) {\n-            testZipFile(f, Charset.forName(\"MS932\"), name, comment, bb);\n-        }\n-        f.delete();\n+        return baos.toByteArray();\n","filename":"test\/jdk\/java\/util\/zip\/ZipCoding.java","additions":134,"deletions":72,"binary":false,"changes":206,"status":"modified"}]}