{"files":[{"patch":"@@ -32,1 +32,3 @@\n-import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -36,0 +38,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -37,0 +41,1 @@\n+import java.util.stream.Stream;\n@@ -43,10 +48,3 @@\n-    \/**\n-     * Test ZIP file name and comment encoding using the MS code page 932 for the Japanese language\n-     *\n-     * @throws IOException if an unexpected IOException occurs\n-     *\/\n-    @Test\n-    public void MS932() throws IOException {\n-        test(\"MS932\",\n-                \"\\u4e00\\u4e01\", \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\");\n-    }\n+    \/\/ The data to write to ZIP entries in this test\n+    private static byte[] ENTRY_DATA = \"German Umlaut \\u00fc in entry data\"\n+            .getBytes(StandardCharsets.ISO_8859_1);\n@@ -55,3 +53,2 @@\n-     * Test ZIP file name and comment encoding using the code page for the IBM PC\n-     *\n-     * @throws IOException if an unexpected IOException occurs\n+     * Provide arguments used for parameterized tests\n+     * @return a stream of argument lists\n@@ -59,4 +56,34 @@\n-    @Test\n-    public void ibm437() throws IOException {\n-        test(\"ibm437\",\n-             \"\\u00e4\\u00fc\", \"German Umlaut \\u00fc in comment\");\n+    public static Stream<Arguments> charsetsAndNames() {\n+        \/\/ Arguments are: Write charset, read charset, entry name, comment\n+        return Stream.of(\n+                \/\/ MS code page 932 for the Japanese language\n+                Arguments.of(\"MS932\", \"MS932\",\n+                        \"\\u4e00\\u4e01\",\n+                        \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\"),\n+\n+                \/\/ Code page for the IBM PC\n+                Arguments.of(\"ibm437\", \"ibm437\",\n+                        \"\\u00e4\\u00fc\",\n+                        \"German Umlaut \\u00fc in comment\"),\n+\n+                \/\/ UTF-8 with Japanese characters\n+                Arguments.of(\"utf-8\", \"utf-8\",\n+                        \"\\u4e00\\u4e01\",\n+                        \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\"),\n+\n+                \/\/ UTF-8 with characters in the Latin1 range\n+                Arguments.of(\"utf-8\", \"utf-8\",\n+                        \"\\u00e4\\u00fc\",\n+                        \"German Umlaut \\u00fc in comment\"),\n+\n+                \/\/ UTF-8 with surrogate pairs\n+                Arguments.of(\"utf-8\", \"utf-8\",\n+                        \"Surrogate\\ud801\\udc01\",\n+                        \"Surrogates \\ud800\\udc00 in comment\"),\n+\n+                \/\/ ZipOutputStream sets the 'Language encoding flag' when writing using UTF-8\n+                \/\/ UTF-8 should be used for decoding, even when opening with a different charset\n+                Arguments.of(\"utf-8\", \"iso-8859-1\",\n+                        \"\\u00e4\\u00fc\",\n+                        \"German Umlaut \\u00fc in comment\")\n+        );\n@@ -66,1 +93,3 @@\n-     * Test ZIP file name and comment encoding using UTF-8 with Japanese characters\n+     * Verify that ZipInputStream decodes entry names and comments\n+     * using the charset provided to its constructor, or that it decodes\n+     * using UTF-8 when the 'Language encoding flag' is set\n@@ -68,10 +97,4 @@\n-     * @throws IOException if an unexpected IOException occurs\n-     *\/\n-    @Test\n-    public void utf8Japanese() throws IOException {\n-        test(\"utf-8\",\n-                \"\\u4e00\\u4e01\", \"\\uff67\\uff68\\uff69\\uff6a\\uff6b\\uff6c\");\n-    }\n-\n-    \/**\n-     * Test ZIP file name and comment encoding using UTF-8 with characters in the Latin1 range\n+     * @param writeCharset the charset to use for ZipOutputStream when producing the ZIP\n+     * @param readCharset the charset to use when opening the ZipInputStream\n+     * @param name the entry name\n+     * @param comment the entry comment (not read by ZipInputStream)\n@@ -81,5 +104,6 @@\n-    @Test\n-    public void utf8InLat1Range() throws IOException {\n-        test(\"utf-8\",\n-                \"\\u00e4\\u00fc\", \"German Umlaut \\u00fc in comment\");\n-    }\n+    @ParameterizedTest\n+    @MethodSource(\"charsetsAndNames\")\n+    public void testZipInputStream(String writeCharset,\n+                                   String readCharset,\n+                                   String name,\n+                                   String comment) throws IOException {\n@@ -87,29 +111,1 @@\n-    \/**\n-     * Test ZIP file name and comment encoding using UTF-8 with surrogate pairs\n-     *\n-     * @throws IOException if an unexpected IOException occurs\n-     *\/\n-    @Test\n-    public void utf8Surrogate() throws IOException {\n-        test(\"utf-8\",\n-             \"Surrogate\\ud801\\udc01\", \"Surrogates \\ud800\\udc00 in comment\");\n-    }\n-\n-    \/**\n-     * Verify that a ZIP entry with the given name and comment can be found\n-     * when opening the given ZIP file using ZipInputStream with the given charset\n-     *\n-     * @param zip the ZIP file to open\n-     * @param openCharset the Charset to pass to the ZipInputStream constructor\n-     * @param expectedName the expected name of the ZIP entry\n-     * @param expectedComment the expected comment of ZIP entry\n-     * @param expectedContent the expected contents of the ZIP entry\n-     *\n-     * @throws IOException if an unexpected IOException occurs\n-     *\/\n-    static void testZipInputStream(byte[] zip,\n-                                   Charset openCharset,\n-                                   String expectedName,\n-                                   String expectedComment,\n-                                   byte[] expectedContent) throws IOException\n-    {\n+        byte[] zip = createZIP(writeCharset, name, comment);\n@@ -118,1 +114,1 @@\n-             ZipInputStream zis = new ZipInputStream(in, openCharset)) {\n+             ZipInputStream zis = new ZipInputStream(in, Charset.forName(readCharset))) {\n@@ -121,3 +117,3 @@\n-            assertEquals(expectedName, e.getName());\n-            byte[] content = zis.readAllBytes();\n-            assertArrayEquals(expectedContent, content, \"ZipIS content doesn't match!\");\n+            assertEquals(name, e.getName());\n+            assertNull(e.getComment()); \/\/ No comment in the LOC header\n+            assertArrayEquals(ENTRY_DATA, zis.readAllBytes(), \"ZipIS content doesn't match!\");\n@@ -128,2 +124,3 @@\n-     * Verify that a ZIP entry with the given name and comment can be found\n-     * when opening the given ZIP file using ZipFile with the given charset\n+     * Verify that ZipFile decodes entry names and comments\n+     * using the charset provided to its constructor, or that it decodes\n+     * using UTF-8 when the 'Language encoding flag' is set\n@@ -131,5 +128,4 @@\n-     * @param zip the ZIP file to open\n-     * @param openCharset the Charset to pass to the ZipInputStream constructor\n-     * @param expectedName the expected name of the ZIP entry\n-     * @param expectedComment the expected comment of ZIP entry\n-     * @param expectedContent the expected contents of the ZIP entry\n+     * @param writeCharset the charset to use for ZipOutputStream when producing the ZIP\n+     * @param readCharset the charset to use when opening the ZipFile\n+     * @param name the name of the entry\n+     * @param comment the comment of the entry\n@@ -139,8 +135,13 @@\n-    static void testZipFile(File zip,\n-                            Charset openCharset,\n-                            String expectedName,\n-                            String expectedComment,\n-                            byte[] expectedContent)\n-        throws IOException\n-    {\n-        try (ZipFile zf = new ZipFile(zip, openCharset)) {\n+    @ParameterizedTest\n+    @MethodSource(\"charsetsAndNames\")\n+    public void testZipFile(String writeCharset,\n+                            String readCharset,\n+                            String name,\n+                            String comment) throws IOException {\n+\n+        byte[] zip = createZIP(writeCharset, name, comment);\n+\n+        Path f = Path.of(\"zfcoding.zip\");\n+        Files.write(f, zip);\n+\n+        try (ZipFile zf = new ZipFile(f.toFile(), Charset.forName(readCharset))) {\n@@ -151,2 +152,2 @@\n-            assertEquals(expectedName, e.getName(), \"ZipFile.entries(): name doesn't match!\");\n-            assertEquals(expectedComment, e.getComment(), \"ZipFile.entries(): comment doesn't match!\");\n+            assertEquals(name, e.getName(), \"ZipFile.entries(): name doesn't match!\");\n+            assertEquals(comment, e.getComment(), \"ZipFile.entries(): comment doesn't match!\");\n@@ -155,4 +156,6 @@\n-            e = zf.getEntry(expectedName);\n-            assertNotNull(e, \"ZipFile.getEntry(): Entry not found using charset \" + openCharset.name());\n-            assertEquals(expectedName, e.getName(), \"ZipFile.getEntry(): name doesn't match!\");\n-            assertEquals(expectedComment, e.getComment(), \"ZipFile.getEntry(): comment doesn't match!\");\n+            e = zf.getEntry(name);\n+            assertNotNull(e,\n+                    String.format(\"Entry not found for ZipFile encoded with %s and opened with %s\",\n+                            writeCharset, readCharset));\n+            assertEquals(name, e.getName(), \"ZipFile.getEntry(): name doesn't match!\");\n+            assertEquals(comment, e.getComment(), \"ZipFile.getEntry(): comment doesn't match!\");\n@@ -161,2 +164,1 @@\n-                byte[] actualContent = is.readAllBytes();\n-                assertArrayEquals(expectedContent, actualContent, \"ZipFile content doesn't match!\");\n+                assertArrayEquals(ENTRY_DATA, is.readAllBytes(), \"ZipFile content doesn't match!\");\n@@ -165,0 +167,2 @@\n+\n+        Files.deleteIfExists(f);\n@@ -168,3 +172,4 @@\n-     * Verify that a ZIP file with a written using ZipOutputStream with an entry\n-     * with the given name and comment can be read back using the same charset\n-     * using both the ZipFile and ZipInputStream APIs.\n+     * Create a ZIP file containing an entry with the given name\n+     * and comment, encoded using the given charset.\n+     * Note that if the charset is UTF-8, ZipOutputStream will\n+     * set the 'Language encoding flag' for the entry.\n@@ -172,5 +177,4 @@\n-     * If the charset is \"utf-8\", also test that the entry is read with the expected\n-     * name when opened using a non-utf-8 charset.\n-     * @param csn the charset used when writing and opening the ZIP file\n-     * @param name the name of the entry to write and find\n-     * @param comment the comment to add to the entry\n+     * @param charset the charset passed to the ZipOutputStream constructor\n+     * @param name the name of the entry to add\n+     * @param comment the comment of the entry to add\n+     * @return a byte array containing the ZIP file\n@@ -180,3 +184,1 @@\n-    static void test(String csn, String name, String comment) throws IOException {\n-        byte[] entryData = \"This is the content of the zipfile\".getBytes(\"ISO-8859-1\");\n-        Charset cs = Charset.forName(csn);\n+    private byte[] createZIP(String charset, String name, String comment) throws IOException {\n@@ -184,1 +186,1 @@\n-        try (ZipOutputStream zos = new ZipOutputStream(baos, cs)) {\n+        try (ZipOutputStream zos = new ZipOutputStream(baos, Charset.forName(charset))) {\n@@ -188,1 +190,1 @@\n-            zos.write(entryData, 0, entryData.length);\n+            zos.write(ENTRY_DATA);\n@@ -191,20 +193,1 @@\n-\n-        byte[] zip = baos.toByteArray();\n-\n-        testZipInputStream(zip, cs, name, comment, entryData);\n-\n-        if (\"utf-8\".equals(csn)) {\n-            \/\/ USE_UTF8 should be set\n-            testZipInputStream(zip, Charset.forName(\"MS932\"), name, comment, entryData);\n-        }\n-\n-        File f = new File(new File(System.getProperty(\"test.dir\", \".\")),\n-                          \"zfcoding.zip\");\n-        try (FileOutputStream fos = new FileOutputStream(f)) {\n-            baos.writeTo(fos);\n-        }\n-        testZipFile(f, cs, name, comment, entryData);\n-        if (\"utf-8\".equals(csn)) {\n-            testZipFile(f, Charset.forName(\"MS932\"), name, comment, entryData);\n-        }\n-        f.delete();\n+        return baos.toByteArray();\n","filename":"test\/jdk\/java\/util\/zip\/ZipCoding.java","additions":106,"deletions":123,"binary":false,"changes":229,"status":"modified"}]}