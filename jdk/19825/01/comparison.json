{"files":[{"patch":"@@ -2329,1 +2329,2 @@\n-                                        VectorRegister vr1, VectorRegister vr2, VectorRegister vrs, bool islatin, Label &DONE) {\n+                                        VectorRegister vr1, VectorRegister vr2, VectorRegister vrs, bool islatin, Label &DONE,\n+                                        Assembler::LMUL lmul) {\n@@ -2334,1 +2335,1 @@\n-  vsetvli(tmp1, cnt, sew, Assembler::m2);\n+  vsetvli(tmp1, cnt, sew, lmul);\n@@ -2448,0 +2449,3 @@\n+  \/\/ We focus on the optimization of small sized string.\n+  \/\/ Please check below document for string size distribution statistics.\n+  \/\/ https:\/\/cr.openjdk.org\/~shade\/density\/string-density-report.pdf\n@@ -2449,1 +2453,8 @@\n-    element_compare(str1, str2, zr, cnt2, tmp1, tmp2, v2, v4, v2, encLL, DIFFERENCE);\n+    \/\/ Below construction of v regs and lmul is based on test on 2 different boards,\n+    \/\/ vlen == 128 and vlen == 256 respectively.\n+    if (!str1_isL && MaxVectorSize == 16) { \/\/ UU\n+      element_compare(str1, str2, zr, cnt2, tmp1, tmp2, v4, v8, v4, encLL, DIFFERENCE, Assembler::m4);\n+    } else { \/\/ UU + MaxVectorSize or LL\n+      element_compare(str1, str2, zr, cnt2, tmp1, tmp2, v2, v4, v2, encLL, DIFFERENCE, Assembler::m2);\n+    }\n+\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.cpp","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-                       bool is_latin, Label& DONE);\n+                       bool is_latin, Label& DONE, Assembler::LMUL lmul = Assembler::m2);\n","filename":"src\/hotspot\/cpu\/riscv\/c2_MacroAssembler_riscv.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -3566,0 +3566,22 @@\n+instruct vstring_compareUVlen16(iRegP_R11 str1, iRegI_R12 cnt1, iRegP_R13 str2, iRegI_R14 cnt2,\n+                          iRegI_R10 result, vReg_V4 v4, vReg_V5 v5, vReg_V6 v6, vReg_V7 v7,\n+                          vReg_V8 v8, vReg_V9 v9, vReg_V10 v10, vReg_V11 v11,\n+                          iRegP_R28 tmp1, iRegL_R29 tmp2)\n+%{\n+  predicate(UseRVV && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::UU &&\n+            MaxVectorSize == 16);\n+  match(Set result (StrComp (Binary str1 cnt1) (Binary str2 cnt2)));\n+  effect(KILL tmp1, KILL tmp2, USE_KILL str1, USE_KILL str2, USE_KILL cnt1, USE_KILL cnt2,\n+        TEMP v4, TEMP v5, TEMP v6, TEMP v7, TEMP v8, TEMP v9, TEMP v10, TEMP v11);\n+\n+  format %{ \"String Compare $str1, $cnt1, $str2, $cnt2 -> $result\\t#@string_compareU\" %}\n+  ins_encode %{\n+    \/\/ Count is in 8-bit bytes; non-Compact chars are 16 bits.\n+    __ string_compare_v($str1$$Register, $str2$$Register,\n+                        $cnt1$$Register, $cnt2$$Register, $result$$Register,\n+                        $tmp1$$Register, $tmp2$$Register,\n+                        StrIntrinsicNode::UU);\n+  %}\n+  ins_pipe(pipe_class_memory);\n+%}\n+\n@@ -3570,1 +3592,2 @@\n-  predicate(UseRVV && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::UU);\n+  predicate(UseRVV && ((StrCompNode *)n)->encoding() == StrIntrinsicNode::UU &&\n+            MaxVectorSize > 16);\n@@ -3573,1 +3596,1 @@\n-         TEMP v2, TEMP v3, TEMP v4, TEMP v5);\n+        TEMP v2, TEMP v3, TEMP v4, TEMP v5);\n@@ -3585,0 +3608,1 @@\n+\n@@ -3592,1 +3616,1 @@\n-         TEMP v2, TEMP v3, TEMP v4, TEMP v5);\n+        TEMP v2, TEMP v3, TEMP v4, TEMP v5);\n","filename":"src\/hotspot\/cpu\/riscv\/riscv_v.ad","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"}]}