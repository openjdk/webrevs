{"files":[{"patch":"@@ -1195,5 +1195,1 @@\n-            Chain exit = loopEnv.info.exit;\n-            if (exit != null) {\n-                code.resolve(exit);\n-                exit.state.defined.excludeFrom(code.nextreg);\n-            }\n+            code.resolve(loopEnv.info.exit);\n@@ -1209,5 +1205,1 @@\n-        Chain exit = localEnv.info.exit;\n-        if (exit != null) {\n-            code.resolve(exit);\n-            exit.state.defined.excludeFrom(code.nextreg);\n-        }\n+        code.resolve(localEnv.info.exit);\n@@ -1416,5 +1408,1 @@\n-            Chain exit = switchEnv.info.exit;\n-            if  (exit != null) {\n-                code.resolve(exit);\n-                exit.state.defined.excludeFrom(limit);\n-            }\n+            code.resolve(switchEnv.info.exit);\n@@ -2540,1 +2528,8 @@\n-    static class GenContext {\n+    final class GenContext {\n+\n+        \/**\n+         * The top defined local variables for exit or continue branches to merge into.\n+         * It may contain uninitialized variables to be initialized by branched code,\n+         * so we cannot use Code.State.defined bits.\n+         *\/\n+        final int limit;\n@@ -2566,0 +2561,5 @@\n+        GenContext() {\n+            var code = Gen.this.code;\n+            this.limit = code == null ? 0 : code.nextreg;\n+        }\n+\n@@ -2569,0 +2569,3 @@\n+            if (c != null) {\n+                c.state.defined.excludeFrom(limit);\n+            }\n@@ -2575,0 +2578,3 @@\n+            if (c != null) {\n+                c.state.defined.excludeFrom(limit);\n+            }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":22,"deletions":16,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -160,0 +160,1 @@\n+            System.err.println(method.toDebugString());\n","filename":"test\/langtools\/tools\/javac\/flow\/LVTHarness.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8067429\n+ * @bug 8067429 8332934\n","filename":"test\/langtools\/tools\/javac\/stackmap\/BranchToFewerDefines.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/langtools\/tools\/javac\/BranchToFewerDefines.java","status":"renamed"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8332934\n+ * @summary Incorrect defined locals escaped from continue in do loop\n+ * @library \/tools\/lib \/test\/lib\n+ * @run main DoLoopLocalEscapeThroughContinueTest\n+ *\/\n+\n+import jdk.test.lib.ByteCodeLoader;\n+import jdk.test.lib.compiler.InMemoryJavaCompiler;\n+\n+import java.lang.classfile.ClassFile;\n+import java.lang.invoke.MethodHandles;\n+\n+public class DoLoopLocalEscapeThroughContinueTest {\n+    public static void main(String... args) throws Throwable {\n+        String source = \"\"\"\n+                static void main(String[] k) {\n+                  do {\n+                    int b = 1;\n+                    continue;\n+                  } while (Math.random() > 0.5D) ;\n+                  switch (2) {\n+                  case 3:\n+                    double d;\n+                  case 4:\n+                    k.toString();\n+                  }\n+                }\n+                \"\"\";\n+        var bytes = InMemoryJavaCompiler.compile(\"Test\", source, \"-XDdebug.code\");\n+        System.out.println(ClassFile.of().parse(bytes).toDebugString());\n+        var clz = ByteCodeLoader.load(\"Test\", bytes);\n+        MethodHandles.privateLookupIn(clz, MethodHandles.lookup()).ensureInitialized(clz); \/\/ force verification\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/stackmap\/DoLoopLocalEscapeThroughContinueTest.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8160699\n+ * @bug 8160699 8332934\n","filename":"test\/langtools\/tools\/javac\/stackmap\/SwitchExitStateTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"test\/langtools\/tools\/javac\/SwitchExitStateTest.java","status":"renamed"}]}