{"files":[{"patch":"@@ -100,0 +100,1 @@\n+    invalid-offsetof \\\n@@ -104,1 +105,2 @@\n-DISABLED_WARNINGS_clang := delete-non-abstract-non-virtual-dtor missing-braces \\\n+DISABLED_WARNINGS_clang := delete-non-abstract-non-virtual-dtor \\\n+    invalid-offsetof missing-braces \\\n","filename":"make\/hotspot\/lib\/CompileJvm.gmk","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,0 +88,3 @@\n+\/\/ offset_of was a workaround for UB with offsetof uses that are no longer an\n+\/\/ issue.  This can be removed once all uses have been converted.\n+#define offset_of(klass, field) offsetof(klass, field)\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -87,18 +87,0 @@\n-\n-\/\/ gcc warns about applying offsetof() to non-POD object or calculating\n-\/\/ offset directly when base address is null. The -Wno-invalid-offsetof\n-\/\/ option could be used to suppress this warning, but we instead just\n-\/\/ avoid the use of offsetof().\n-\/\/\n-\/\/ FIXME: This macro is complex and rather arcane. Perhaps we should\n-\/\/ use offsetof() instead, with the invalid-offsetof warning\n-\/\/ temporarily disabled.\n-#define offset_of(klass,field)                          \\\n-([]() {                                                 \\\n-  alignas(16) char space[sizeof (klass)];               \\\n-  klass* dummyObj = (klass*)space;                      \\\n-  char* c = (char*)(void*)&dummyObj->field;             \\\n-  return (size_t)(c - space);                           \\\n-}())\n-\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_gcc.hpp","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -88,2 +88,0 @@\n-#define offset_of(klass,field) offsetof(klass,field)\n-\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions_visCPP.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}