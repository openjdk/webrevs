{"files":[{"patch":"@@ -36,3 +36,4 @@\n-    private Cache cache = new Cache();\n-    CFont fFont;\n-    int numGlyphs = -1;\n+    private final Cache rawCache = new Cache(true);\n+    private final Cache modCache = new Cache(false);\n+    private final CFont fFont;\n+    private int numGlyphs = -1;\n@@ -104,1 +105,2 @@\n-        int glyph = cache.get(unicode, raw);\n+        Cache cache = raw ? rawCache : modCache;\n+        int glyph = cache.get(unicode);\n@@ -107,4 +109,8 @@\n-        final char[] unicodeArray = new char[] { unicode };\n-        final int[] glyphArray = new int[1];\n-        nativeCharsToGlyphs(fFont.getNativeFontPtr(), 1, unicodeArray, glyphArray);\n-        glyph = glyphArray[0];\n+        if (isIgnorableWhitespace(unicode) || (isDefaultIgnorable(unicode) && !raw)) {\n+            glyph = INVISIBLE_GLYPH_ID;\n+        } else {\n+            final char[] unicodeArray = new char[]{unicode};\n+            final int[] glyphArray = new int[1];\n+            nativeCharsToGlyphs(fFont.getNativeFontPtr(), 1, unicodeArray, glyphArray);\n+            glyph = glyphArray[0];\n+        }\n@@ -134,1 +140,2 @@\n-            cache.get(2, surrogates, glyphs, raw);\n+            Cache cache = raw ? rawCache : modCache;\n+            cache.get(2, surrogates, glyphs);\n@@ -143,1 +150,1 @@\n-        cache.get(count, unicodes, glyphs, false);\n+        modCache.get(count, unicodes, glyphs);\n@@ -167,0 +174,1 @@\n+        private final boolean raw;\n@@ -171,1 +179,2 @@\n-        Cache() {\n+        Cache(boolean raw) {\n+            this.raw = raw;\n@@ -176,5 +185,1 @@\n-        public synchronized int get(final int index, final boolean raw) {\n-            if (isIgnorableWhitespace(index) || (isDefaultIgnorable(index) && !raw)) {\n-                return INVISIBLE_GLYPH_ID;\n-            }\n-\n+        public synchronized int get(final int index) {\n@@ -251,1 +256,1 @@\n-        public synchronized void get(int count, char[] indices, int[] values, boolean raw)\n+        public synchronized void get(int count, char[] indices, int[] values)\n@@ -273,1 +278,1 @@\n-                final int value = get(code, raw);\n+                final int value = get(code);\n@@ -280,0 +285,3 @@\n+                } else if (isIgnorableWhitespace(code) || (isDefaultIgnorable(code) && !raw)) {\n+                    values[i] = INVISIBLE_GLYPH_ID;\n+                    put(code, INVISIBLE_GLYPH_ID);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/font\/CCharToGlyphMapper.java","additions":26,"deletions":18,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-\/* remember that the API requires a Font use a\n+\/* Remember that the API requires a Font use a\n@@ -39,1 +39,1 @@\n- * to 216*256*4 bytes of storage per composite font. If an app\n+ * to 2*216*256*4 bytes of storage per composite font. If an app\n@@ -41,1 +41,1 @@\n- * over 1Mb of cached data. May need to employ WeakReferences if\n+ * over 2Mb of cached data. May need to employ WeakReferences if\n@@ -57,4 +57,5 @@\n-    CompositeFont font;\n-    CharToGlyphMapper[] slotMappers;\n-    int[][] glyphMaps;\n-    private boolean hasExcludes;\n+    private final CompositeFont font;\n+    private final CharToGlyphMapper[] slotMappers;\n+    private final int[][] glyphMapsRaw;\n+    private final int[][] glyphMapsMod;\n+    private final boolean hasExcludes;\n@@ -64,1 +65,6 @@\n-        initMapper();\n+        glyphMapsRaw = new int[NBLOCKS][];\n+        glyphMapsMod = new int[NBLOCKS][];\n+        slotMappers = new CharToGlyphMapper[font.numSlots];\n+        \/* This requires that slot 0 is never empty. *\/\n+        missingGlyph = font.getSlotFont(0).getMissingGlyphCode();\n+        missingGlyph = compositeGlyphCode(0, missingGlyph);\n@@ -76,13 +82,1 @@\n-    private void initMapper() {\n-        if (missingGlyph == CharToGlyphMapper.UNINITIALIZED_GLYPH) {\n-            if (glyphMaps == null) {\n-                glyphMaps = new int[NBLOCKS][];\n-            }\n-            slotMappers = new CharToGlyphMapper[font.numSlots];\n-            \/* This requires that slot 0 is never empty. *\/\n-            missingGlyph = font.getSlotFont(0).getMissingGlyphCode();\n-            missingGlyph = compositeGlyphCode(0, missingGlyph);\n-        }\n-    }\n-\n-    private int getCachedGlyphCode(int unicode) {\n+    private int getCachedGlyphCode(int unicode, boolean raw) {\n@@ -93,0 +87,1 @@\n+        int[][] glyphMaps = raw ? glyphMapsRaw : glyphMapsMod;\n@@ -99,1 +94,1 @@\n-    private void setCachedGlyphCode(int unicode, int glyphCode) {\n+    private void setCachedGlyphCode(int unicode, int glyphCode, boolean raw) {\n@@ -104,0 +99,1 @@\n+        int[][] glyphMaps = raw ? glyphMapsRaw : glyphMapsMod;\n@@ -123,4 +119,1 @@\n-        if (isIgnorableWhitespace(unicode) || (isDefaultIgnorable(unicode) && !raw)) {\n-            return INVISIBLE_GLYPH_ID;\n-        }\n-        int glyphCode = getCachedGlyphCode(unicode);\n+        int glyphCode = getCachedGlyphCode(unicode, raw);\n@@ -130,0 +123,5 @@\n+        if (isIgnorableWhitespace(unicode) || (isDefaultIgnorable(unicode) && !raw)) {\n+            glyphCode = INVISIBLE_GLYPH_ID;\n+            setCachedGlyphCode(unicode, glyphCode, raw);\n+            return glyphCode;\n+        }\n@@ -136,1 +134,1 @@\n-                    setCachedGlyphCode(unicode, glyphCode);\n+                    setCachedGlyphCode(unicode, glyphCode, raw);\n","filename":"src\/java.desktop\/share\/classes\/sun\/font\/CompositeGlyphMapper.java","additions":25,"deletions":27,"binary":false,"changes":52,"status":"modified"}]}