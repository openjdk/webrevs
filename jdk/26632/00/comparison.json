{"files":[{"patch":"@@ -143,1 +143,1 @@\n-    boolean isThrottled() {\n+    boolean isThrottled(MethodDesc staticThrottleMethod) {\n@@ -154,0 +154,3 @@\n+        if (isJDK()) {\n+            return hasStaticMethod(staticThrottleMethod);\n+        }\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/ClassInspector.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -127,5 +127,1 @@\n-        if (inspector.isJDK()) {\n-            this.throttled = inspector.hasStaticMethod(METHOD_EVENT_SHOULD_THROTTLE_COMMIT_LONG_LONG);\n-        } else {\n-            this.throttled = inspector.isThrottled();\n-        }\n+        this.throttled = inspector.isThrottled(METHOD_EVENT_SHOULD_THROTTLE_COMMIT_LONG_LONG);\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/EventInstrumentation.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,0 +32,2 @@\n+import java.util.ArrayList;\n+import java.util.List;\n@@ -33,0 +35,1 @@\n+import java.util.concurrent.CopyOnWriteArrayList;\n@@ -35,0 +38,1 @@\n+import jdk.jfr.AnnotationElement;\n@@ -37,0 +41,2 @@\n+import jdk.jfr.EventFactory;\n+import jdk.jfr.Name;\n@@ -135,0 +141,1 @@\n+        testThrottleDynamic();\n@@ -235,0 +242,34 @@\n+    private static void testThrottleDynamic() throws Exception {\n+        List<AnnotationElement> offAnnotations = new ArrayList<>();\n+        offAnnotations.add(new AnnotationElement(Name.class, \"DynamicZero\"));\n+        offAnnotations.add(new AnnotationElement(Throttle.class, \"0\/s\"));\n+        EventFactory offFactory = EventFactory.create(offAnnotations, List.of());\n+\n+        List<AnnotationElement> highRateAnnotations = new ArrayList<>();\n+        highRateAnnotations.add(new AnnotationElement(Name.class, \"DynamicHighRate\"));\n+        highRateAnnotations.add(new AnnotationElement(Throttle.class, \"1000\/s\"));\n+        EventFactory highRateFactory = EventFactory.create(highRateAnnotations, List.of());\n+\n+        List<RecordedEvent> events = new CopyOnWriteArrayList<>();\n+        try (RecordingStream r = new RecordingStream()) {\n+            r.enable(\"DynamicZero\");\n+            r.enable(\"DynamicHighRate\");\n+            r.onEvent(events::add);\n+            r.startAsync();\n+            Event offEvent = offFactory.newEvent();\n+            offEvent.commit();\n+            Event highRateEvent = highRateFactory.newEvent();\n+            highRateEvent.begin();\n+            highRateEvent.commit();\n+            r.stop();\n+            if (events.size() != 1) {\n+                System.out.println(events);\n+                throw new Exception(\"Expected one dynamic event\");\n+            }\n+            if (!events.get(0).getEventType().getName().equals(\"DynamicHighRate\")) {\n+                System.out.println(events);\n+                throw new Exception(\"Expected DynamicHighRate\");\n+            }\n+        }\n+    }\n+\n@@ -275,0 +316,2 @@\n+            } else {\n+                assertEvents(r, eventClass.getName(), 0);\n","filename":"test\/jdk\/jdk\/jfr\/api\/metadata\/annotations\/TestThrottle.java","additions":43,"deletions":0,"binary":false,"changes":43,"status":"modified"}]}