{"files":[{"patch":"@@ -32,0 +32,2 @@\n+import sun.net.util.IPAddressUtil;\n+\n@@ -39,2 +41,3 @@\n- * @param host   The host of the origin. If the host is an IPv6 address, then it must not be\n- *               enclosed in square brackets ({@code '['} and {@code ']'}). Cannot be null.\n+ * @param host   The host of the origin, cannot be null. If the host is an IPv6 address,\n+ *               then it must not be enclosed in square brackets ({@code '['} and {@code ']'}).\n+ *               If the host is a DNS hostname, then it must be passed as a lower case String.\n@@ -47,0 +50,3 @@\n+        if (!isValidScheme(scheme)) {\n+            throw new IllegalArgumentException(\"Unsupported scheme: \" + scheme);\n+        }\n@@ -50,0 +56,4 @@\n+        \/\/ expect DNS hostname to be passed as lower case\n+        if (isDNSHostName(host) && !host.toLowerCase(Locale.ROOT).equals(host)) {\n+            throw new IllegalArgumentException(\"non-lowercase hostname: \" + host);\n+        }\n@@ -53,3 +63,0 @@\n-        if (!isValidScheme(scheme)) {\n-            throw new IllegalArgumentException(\"Unsupported scheme: \" + scheme);\n-        }\n@@ -84,1 +91,1 @@\n-        final String effectiveHost;\n+        String effectiveHost;\n@@ -92,0 +99,11 @@\n+        \/\/ If the host is a DNS hostname, then convert the host to lower case.\n+        \/\/ The DNS hostname is expected to be ASCII characters and is case-insensitive.\n+        \/\/\n+        \/\/ Its usage in areas like SNI too match this expectation - RFC-6066, section 3:\n+        \/\/ \"HostName\" contains the fully qualified DNS hostname of the server,\n+        \/\/ as understood by the client.  The hostname is represented as a byte\n+        \/\/ string using ASCII encoding without a trailing dot. ... DNS hostnames\n+        \/\/ are case-insensitive.\n+        if (isDNSHostName(effectiveHost)) {\n+            effectiveHost = effectiveHost.toLowerCase(Locale.ROOT);\n+        }\n@@ -121,0 +139,7 @@\n+\n+    private static boolean isDNSHostName(final String host) {\n+        final boolean isLiteral = IPAddressUtil.isIPv4LiteralAddress(host)\n+                || IPAddressUtil.isIPv6LiteralAddress(host);\n+\n+        return !isLiteral;\n+    }\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/Origin.java","additions":31,"deletions":6,"binary":false,"changes":37,"status":"modified"}]}