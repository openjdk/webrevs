{"files":[{"patch":"@@ -0,0 +1,185 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.net.URI;\n+import java.util.Locale;\n+\n+import jdk.internal.net.http.Origin;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.ValueSource;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+\/*\n+ * @test\n+ * @summary verify the behaviour of jdk.internal.net.http.Origin\n+ * @modules java.net.http\/jdk.internal.net.http\n+ * @run junit OriginTest\n+ *\/\n+class OriginTest {\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"foo\", \"Bar\", \"HttPS\", \"HTTP\"})\n+    void testInvalidScheme(final String scheme) throws Exception {\n+        final String validHost = \"127.0.0.1\";\n+        final int validPort = 80;\n+        final IllegalArgumentException iae = assertThrows(IllegalArgumentException.class, () -> {\n+            new Origin(scheme, validHost, validPort);\n+        });\n+        assertTrue(iae.getMessage().contains(\"scheme\"),\n+                \"unexpected exception message: \" + iae.getMessage());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"http\", \"https\"})\n+    void testValidScheme(final String scheme) throws Exception {\n+        final String validHost = \"127.0.0.1\";\n+        final int validPort = 80;\n+        final Origin o1 = new Origin(scheme, validHost, validPort);\n+        assertEquals(validHost, o1.host(), \"unexpected host\");\n+        assertEquals(validPort, o1.port(), \"unexpected port\");\n+        assertEquals(scheme, o1.scheme(), \"unexpected scheme\");\n+\n+        final URI uri = URI.create(scheme + \":\/\/\" + validHost + \":\" + validPort);\n+        final Origin o2 = Origin.from(uri);\n+        assertNotNull(o2, \"null Origin for URI \" + uri);\n+        assertEquals(validHost, o2.host(), \"unexpected host\");\n+        assertEquals(validPort, o2.port(), \"unexpected port\");\n+        assertEquals(scheme, o2.scheme(), \"unexpected scheme\");\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"JDK.java.net\", \"[::1]\", \"[0:0:0:0:0:0:0:1]\"})\n+    void testInvalidHost(final String host) throws Exception {\n+        final String validScheme = \"http\";\n+        final int validPort = 8000;\n+        final IllegalArgumentException iae = assertThrows(IllegalArgumentException.class, () -> {\n+            new Origin(validScheme, host, validPort);\n+        });\n+        assertTrue(iae.getMessage().contains(\"host\"),\n+                \"unexpected exception message: \" + iae.getMessage());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(strings = {\"127.0.0.1\", \"localhost\", \"jdk.java.net\", \"::1\", \"0:0:0:0:0:0:0:1\"})\n+    void testValidHost(final String host) throws Exception {\n+        final String validScheme = \"https\";\n+        final int validPort = 42;\n+        final Origin o1 = new Origin(validScheme, host, validPort);\n+        assertEquals(host, o1.host(), \"unexpected host\");\n+        assertEquals(validPort, o1.port(), \"unexpected port\");\n+        assertEquals(validScheme, o1.scheme(), \"unexpected scheme\");\n+\n+        String uriHost = host;\n+        if (host.contains(\":\")) {\n+            uriHost = \"[\" + host + \"]\";\n+        }\n+        final URI uri = URI.create(validScheme + \":\/\/\" + uriHost + \":\" + validPort);\n+        final Origin o2 = Origin.from(uri);\n+        assertNotNull(o2, \"null Origin for URI \" + uri);\n+        assertEquals(host, o2.host(), \"unexpected host\");\n+        assertEquals(validPort, o2.port(), \"unexpected port\");\n+        assertEquals(validScheme, o2.scheme(), \"unexpected scheme\");\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(ints = {-1, 0})\n+    void testInvalidPort(final int port) throws Exception {\n+        final String validScheme = \"http\";\n+        final String validHost = \"127.0.0.1\";\n+        final IllegalArgumentException iae = assertThrows(IllegalArgumentException.class,\n+                () -> new Origin(validScheme, validHost, port));\n+        assertTrue(iae.getMessage().contains(\"port\"),\n+                \"unexpected exception message: \" + iae.getMessage());\n+    }\n+\n+    @ParameterizedTest\n+    @ValueSource(ints = {100, 1024, 80, 8080, 42})\n+    void testValidPort(final int port) throws Exception {\n+        final String validScheme = \"https\";\n+        final String validHost = \"localhost\";\n+        final Origin o1 = new Origin(validScheme, validHost, port);\n+        assertEquals(validHost, o1.host(), \"unexpected host\");\n+        assertEquals(port, o1.port(), \"unexpected port\");\n+        assertEquals(validScheme, o1.scheme(), \"unexpected scheme\");\n+\n+        final URI uri = URI.create(validScheme + \":\/\/\" + validHost + \":\" + port);\n+        final Origin o2 = Origin.from(uri);\n+        assertNotNull(o2, \"null Origin for URI \" + uri);\n+        assertEquals(validHost, o2.host(), \"unexpected host\");\n+        assertEquals(port, o2.port(), \"unexpected port\");\n+        assertEquals(validScheme, o2.scheme(), \"unexpected scheme\");\n+    }\n+\n+    @Test\n+    void testInferredPort() throws Exception {\n+        final URI httpURI = URI.create(\"http:\/\/localhost\");\n+        final Origin httpOrigin = Origin.from(httpURI);\n+        assertNotNull(httpOrigin, \"null Origin for URI \" + httpURI);\n+        assertEquals(\"localhost\", httpOrigin.host(), \"unexpected host\");\n+        assertEquals(80, httpOrigin.port(), \"unexpected port\");\n+        assertEquals(\"http\", httpOrigin.scheme(), \"unexpected scheme\");\n+\n+\n+        final URI httpsURI = URI.create(\"https:\/\/[::1]\");\n+        final Origin httpsOrigin = Origin.from(httpsURI);\n+        assertNotNull(httpsOrigin, \"null Origin for URI \" + httpsURI);\n+        assertEquals(\"::1\", httpsOrigin.host(), \"unexpected host\");\n+        assertEquals(443, httpsOrigin.port(), \"unexpected port\");\n+        assertEquals(\"https\", httpsOrigin.scheme(), \"unexpected scheme\");\n+    }\n+\n+    @Test\n+    void testFromURI() {\n+        \/\/ non-lower case URI scheme is expected to be converted to lowercase in the Origin\n+        \/\/ constructed through Origin.from(URI)\n+        for (final String scheme : new String[]{\"httPs\", \"HTTP\"}) {\n+            final String expectedScheme = scheme.toLowerCase(Locale.ROOT);\n+            final URI uri = URI.create(scheme + \":\/\/localhost:1234\");\n+            final Origin origin = Origin.from(uri);\n+            assertNotNull(origin, \"null Origin for URI \" + uri);\n+            assertEquals(\"localhost\", origin.host(), \"unexpected host\");\n+            assertEquals(1234, origin.port(), \"unexpected port\");\n+            assertEquals(expectedScheme, origin.scheme(), \"unexpected scheme\");\n+        }\n+        \/\/ URI without a port is expected to be defaulted to port 80 or 443 for http and https\n+        \/\/ schemes respectively\n+        for (final String scheme : new String[]{\"http\", \"https\"}) {\n+            final int expectedPort = switch (scheme) {\n+                case \"http\" -> 80;\n+                case \"https\" -> 443;\n+                default -> fail(\"unexpected scheme: \" + scheme);\n+            };\n+            final URI uri = URI.create(scheme + \":\/\/localhost\");\n+            final Origin origin = Origin.from(uri);\n+            assertNotNull(origin, \"null Origin for URI \" + uri);\n+            assertEquals(\"localhost\", origin.host(), \"unexpected host\");\n+            assertEquals(expectedPort, origin.port(), \"unexpected port\");\n+            assertEquals(scheme, origin.scheme(), \"unexpected scheme\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/net\/httpclient\/OriginTest.java","additions":185,"deletions":0,"binary":false,"changes":185,"status":"added"}]}