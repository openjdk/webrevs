{"files":[{"patch":"@@ -40,3 +40,1 @@\n-  _num_regions_evac_failed(0),\n-  _num_regions_pinned(0),\n-  _num_regions_alloc_failed(0) { }\n+  _num_regions_evac_failed(0) { }\n@@ -50,2 +48,0 @@\n-  Atomic::store(&_num_regions_pinned, 0u);\n-  Atomic::store(&_num_regions_alloc_failed, 0u);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -57,4 +57,0 @@\n-  \/\/ Number of regions evacuation failed due to pinning.\n-  volatile uint _num_regions_pinned;\n-  \/\/ Number of regions evacuation failed due to allocation failure.\n-  volatile uint _num_regions_alloc_failed;\n@@ -85,2 +81,0 @@\n-  inline uint num_regions_pinned() const;\n-  inline uint num_regions_alloc_failed() const;\n@@ -95,1 +89,1 @@\n-  inline bool record(uint region_idx, bool cause_pinned);\n+  inline bool record(uint worker_id, uint region_idx, bool cause_pinned);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.hpp","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"gc\/g1\/g1GCPhaseTimes.hpp\"\n@@ -36,8 +37,0 @@\n-uint G1EvacFailureRegions::num_regions_pinned() const {\n-  return Atomic::load(&_num_regions_pinned);\n-}\n-\n-uint G1EvacFailureRegions::num_regions_alloc_failed() const {\n-    return Atomic::load(&_num_regions_alloc_failed);\n-}\n-\n@@ -49,1 +42,4 @@\n-  return num_regions_pinned() > 0;\n+  G1GCPhaseTimes* p = G1CollectedHeap::heap()->phase_times();\n+  size_t count = p->sum_thread_work_items(G1GCPhaseTimes::RestoreEvacuationFailedRegions,\n+                                          G1GCPhaseTimes::RestoreEvacFailureRegionsPinnedNum);\n+  return count != 0;\n@@ -53,1 +49,4 @@\n-  return num_regions_alloc_failed() > 0;\n+  G1GCPhaseTimes* p = G1CollectedHeap::heap()->phase_times();\n+  size_t count = p->sum_thread_work_items(G1GCPhaseTimes::RestoreEvacuationFailedRegions,\n+                                          G1GCPhaseTimes::RestoreEvacFailureRegionsAllocFailedNum);\n+  return count != 0;\n@@ -56,1 +55,1 @@\n-bool G1EvacFailureRegions::record(uint region_idx, bool cause_pinned) {\n+bool G1EvacFailureRegions::record(uint worker_id, uint region_idx, bool cause_pinned) {\n@@ -58,1 +57,1 @@\n-                                                        memory_order_relaxed);\n+                                                  memory_order_relaxed);\n@@ -70,1 +69,5 @@\n-      Atomic::inc(&_num_regions_pinned, memory_order_relaxed);\n+      G1GCPhaseTimes* p = G1CollectedHeap::heap()->phase_times();\n+      p->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreEvacuationFailedRegions,\n+                                        worker_id,\n+                                        1,\n+                                        G1GCPhaseTimes::RestoreEvacFailureRegionsPinnedNum);\n@@ -74,1 +77,5 @@\n-      Atomic::inc(&_num_regions_alloc_failed, memory_order_relaxed);\n+      G1GCPhaseTimes* p = G1CollectedHeap::heap()->phase_times();\n+      p->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreEvacuationFailedRegions,\n+                                        worker_id,\n+                                        1,\n+                                        G1GCPhaseTimes::RestoreEvacFailureRegionsAllocFailedNum);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.inline.hpp","additions":21,"deletions":14,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -464,0 +464,1 @@\n+  \/\/ JNI only allows pinning of typeArrays, so we only need to keep those in place.\n@@ -639,1 +640,1 @@\n-    if (_evac_failure_regions->record(r->hrm_index(), cause_pinned)) {\n+    if (_evac_failure_regions->record(_worker_id, r->hrm_index(), cause_pinned)) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -916,10 +916,0 @@\n-    G1GCPhaseTimes* p = _g1h->phase_times();\n-    p->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreEvacuationFailedRegions,\n-                                      worker_id,\n-                                      _evac_failure_regions->num_regions_pinned(),\n-                                      G1GCPhaseTimes::RestoreEvacFailureRegionsPinnedNum);\n-    p->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreEvacuationFailedRegions,\n-                                      worker_id,\n-                                      _evac_failure_regions->num_regions_alloc_failed(),\n-                                      G1GCPhaseTimes::RestoreEvacFailureRegionsAllocFailedNum);\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-public:\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}