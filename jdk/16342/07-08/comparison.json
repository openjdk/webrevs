{"files":[{"patch":"@@ -372,1 +372,1 @@\n-    \/\/ G1NumCollectionsKeepUnreclaimable GCs and hence are considered \"long lived\".\n+    \/\/ G1NumCollectionsKeepPinned GCs and hence are considered \"long lived\".\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -79,1 +79,1 @@\n-    return _num_unreclaimed < G1NumCollectionsKeepUnreclaimable;\n+    return _num_unreclaimed < G1NumCollectionsKeepPinned;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -57,2 +57,0 @@\n-  inline bool has_pinned_objects(HeapRegion* hr) const;\n-\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -76,1 +76,1 @@\n-inline bool G1DetermineCompactionQueueClosure::has_pinned_objects(HeapRegion* hr) const {\n+static bool has_pinned_objects(HeapRegion* hr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -100,1 +100,1 @@\n-  _gc_par_phases[RestoreRetainedRegions] = new WorkerDataArray<double>(\"RestoreRetainedRegions\", \"Restore Retained Regions (ms):\", max_gc_threads);\n+  _gc_par_phases[RestoreEvacuationFailedRegions] = new WorkerDataArray<double>(\"RestoreEvacuationFailedRegions\", \"Restore Evacuation Failed Regions (ms):\", max_gc_threads);\n@@ -135,3 +135,3 @@\n-  _gc_par_phases[RestoreRetainedRegions]->create_thread_work_items(\"Evacuation Failed Regions:\", RestoreRetainedRegionsEvacFailedNum);\n-  _gc_par_phases[RestoreRetainedRegions]->create_thread_work_items(\"Pinned Regions:\", RestoreRetainedRegionsPinnedNum);\n-  _gc_par_phases[RestoreRetainedRegions]->create_thread_work_items(\"Allocation Failed Regions:\", RestoreRetainedRegionsAllocFailedNum);\n+  _gc_par_phases[RestoreEvacuationFailedRegions]->create_thread_work_items(\"Evacuation Failed Regions:\", RestoreEvacFailureRegionsEvacFailedNum);\n+  _gc_par_phases[RestoreEvacuationFailedRegions]->create_thread_work_items(\"Pinned Regions:\", RestoreEvacFailureRegionsPinnedNum);\n+  _gc_par_phases[RestoreEvacuationFailedRegions]->create_thread_work_items(\"Allocation Failed Regions:\", RestoreEvacFailureRegionsAllocFailedNum);\n@@ -482,1 +482,1 @@\n-double G1GCPhaseTimes::print_post_evacuate_collection_set(bool evacuation_retained) const {\n+double G1GCPhaseTimes::print_post_evacuate_collection_set(bool evacuation_failed) const {\n@@ -505,2 +505,2 @@\n-  if (evacuation_retained) {\n-    debug_phase(_gc_par_phases[RestoreRetainedRegions], 1);\n+  if (evacuation_failed) {\n+    debug_phase(_gc_par_phases[RestoreEvacuationFailedRegions], 1);\n@@ -511,1 +511,1 @@\n-  if (evacuation_retained) {\n+  if (evacuation_failed) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-    RestoreRetainedRegions,\n+    RestoreEvacuationFailedRegions,\n@@ -149,4 +149,4 @@\n-  enum RestoreRetainedRegionsWorkItems {\n-    RestoreRetainedRegionsEvacFailedNum,       \/\/ How many regions experienced an evacuation failure (pinned or allocation failure)\n-    RestoreRetainedRegionsPinnedNum,           \/\/ How many regions were found as pinned.\n-    RestoreRetainedRegionsAllocFailedNum       \/\/ How many regions were found experiencing an allocation failure.\n+  enum RestoreEvacFailureRegionsWorkItems {\n+    RestoreEvacFailureRegionsEvacFailedNum,       \/\/ How many regions experienced an evacuation failure (pinned or allocation failure)\n+    RestoreEvacFailureRegionsPinnedNum,           \/\/ How many regions were found as pinned.\n+    RestoreEvacFailureRegionsAllocFailedNum       \/\/ How many regions were found experiencing an allocation failure.\n@@ -244,1 +244,1 @@\n-  double print_post_evacuate_collection_set(bool evacuation_retained) const;\n+  double print_post_evacuate_collection_set(bool evacuation_failed) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -39,0 +39,3 @@\n+  \/\/ _is_pinned_t is essentially bool, but we want precise control\n+  \/\/ on the size, and sizeof(bool) is implementation specific.\n+  typedef uint8_t is_pinned_t;\n@@ -43,1 +46,1 @@\n-  bool _is_pinned;\n+  is_pinned_t _is_pinned;\n@@ -64,1 +67,1 @@\n-    _remset_is_tracked(remset_is_tracked), _type(type), _is_pinned(is_pinned) {\n+    _remset_is_tracked(remset_is_tracked ? 1 : 0), _type(type), _is_pinned(is_pinned ? 1 : 0) {\n@@ -85,1 +88,1 @@\n-  bool is_pinned() const               { return _is_pinned; }\n+  bool is_pinned() const               { return _is_pinned != 0; }\n@@ -94,1 +97,1 @@\n-  void set_is_pinned(bool value)       { _is_pinned = value; }\n+  void set_is_pinned(bool value)       { _is_pinned = value ? 1 : 0; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionAttr.hpp","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -523,1 +523,1 @@\n-  uint num_unreclaimable_regions = 0;\n+  uint num_pinned_regions = 0;\n@@ -536,1 +536,1 @@\n-      num_unreclaimable_regions++;\n+      num_pinned_regions++;\n@@ -547,2 +547,2 @@\n-  log_trace(gc, ergo, heap)(\"Selected %u of %u retained candidates (unreclaimable %u) taking %1.3fms additional time\",\n-                            num_regions, list.length(), num_unreclaimable_regions, result);\n+  log_trace(gc, ergo, heap)(\"Selected %u of %u retained candidates (pinned %u) taking %1.3fms additional time\",\n+                            num_regions, list.length(), num_pinned_regions, result);\n@@ -794,1 +794,1 @@\n-void G1Policy::record_young_collection_end(bool concurrent_operation_is_full_mark, bool evacuation_failure) {\n+void G1Policy::record_young_collection_end(bool concurrent_operation_is_full_mark, bool allocation_failure) {\n@@ -820,1 +820,1 @@\n-  bool update_stats = !evacuation_failure;\n+  bool update_stats = !allocation_failure;\n@@ -836,1 +836,1 @@\n-  record_pause(this_pause, start_time_sec, end_time_sec, evacuation_failure);\n+  record_pause(this_pause, start_time_sec, end_time_sec, allocation_failure);\n@@ -1368,1 +1368,1 @@\n-                            bool evacuation_failure) {\n+                            bool allocation_failure) {\n@@ -1374,1 +1374,1 @@\n-  if (!evacuation_failure) {\n+  if (!allocation_failure) {\n@@ -1476,1 +1476,1 @@\n-  uint num_unreclaimable_regions = 0;\n+  uint num_pinned_regions = 0;\n@@ -1506,1 +1506,1 @@\n-      num_unreclaimable_regions++;\n+      num_pinned_regions++;\n@@ -1555,1 +1555,1 @@\n-  log_debug(gc, ergo, cset)(\"Finish adding marking candidates to collection set. Initial: %u, optional: %u, unreclaimable: %u, \"\n+  log_debug(gc, ergo, cset)(\"Finish adding marking candidates to collection set. Initial: %u, optional: %u, pinned: %u, \"\n@@ -1557,1 +1557,1 @@\n-                            num_initial_regions_selected, num_optional_regions_selected, num_unreclaimable_regions,\n+                            num_initial_regions_selected, num_optional_regions_selected, num_pinned_regions,\n@@ -1576,1 +1576,1 @@\n-  uint num_unreclaimable_regions = 0;\n+  uint num_pinned_regions = 0;\n@@ -1600,1 +1600,1 @@\n-      num_unreclaimable_regions++;\n+      num_pinned_regions++;\n@@ -1638,1 +1638,1 @@\n-  log_debug(gc, ergo, cset)(\"Finish adding retained candidates to collection set. Initial: %u, optional: %u, unreclaimable: %u, \"\n+  log_debug(gc, ergo, cset)(\"Finish adding retained candidates to collection set. Initial: %u, optional: %u, pinned: %u, \"\n@@ -1641,1 +1641,1 @@\n-                            num_initial_regions_selected, num_optional_regions_selected, num_unreclaimable_regions,\n+                            num_initial_regions_selected, num_optional_regions_selected, num_pinned_regions,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -275,1 +275,1 @@\n-                    bool evacuation_failure = false);\n+                    bool alloocation_failure = false);\n@@ -314,1 +314,1 @@\n-  void record_young_collection_end(bool concurrent_operation_is_full_mark, bool evacuation_failure);\n+  void record_young_collection_end(bool concurrent_operation_is_full_mark, bool alllocation_failure);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -96,1 +96,1 @@\n-class G1PostEvacuateCollectionSetCleanupTask1::RestoreRetainedRegionsTask : public G1AbstractSubTask {\n+class G1PostEvacuateCollectionSetCleanupTask1::RestoreEvacFailureRegionsTask : public G1AbstractSubTask {\n@@ -101,2 +101,2 @@\n-  RestoreRetainedRegionsTask(G1EvacFailureRegions* evac_failure_regions) :\n-    G1AbstractSubTask(G1GCPhaseTimes::RestoreRetainedRegions),\n+  RestoreEvacFailureRegionsTask(G1EvacFailureRegions* evac_failure_regions) :\n+    G1AbstractSubTask(G1GCPhaseTimes::RestoreEvacuationFailedRegions),\n@@ -132,1 +132,1 @@\n-    add_parallel_task(new RestoreRetainedRegionsTask(evac_failure_regions));\n+    add_parallel_task(new RestoreEvacFailureRegionsTask(evac_failure_regions));\n@@ -572,1 +572,1 @@\n-    p->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreRetainedRegions,\n+    p->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreEvacuationFailedRegions,\n@@ -575,1 +575,1 @@\n-                                      G1GCPhaseTimes::RestoreRetainedRegionsEvacFailedNum);\n+                                      G1GCPhaseTimes::RestoreEvacFailureRegionsEvacFailedNum);\n@@ -730,1 +730,1 @@\n-    p->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreRetainedRegions,\n+    p->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreEvacuationFailedRegions,\n@@ -733,2 +733,2 @@\n-                                      G1GCPhaseTimes::RestoreRetainedRegionsPinnedNum);\n-    p->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreRetainedRegions,\n+                                      G1GCPhaseTimes::RestoreEvacFailureRegionsPinnedNum);\n+    p->record_or_add_thread_work_item(G1GCPhaseTimes::RestoreEvacuationFailedRegions,\n@@ -737,1 +737,1 @@\n-                                      G1GCPhaseTimes::RestoreRetainedRegionsAllocFailedNum);\n+                                      G1GCPhaseTimes::RestoreEvacFailureRegionsAllocFailedNum);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-\/\/ - Restore retained regions (on evacuation failure)\n+\/\/ - Restore evac failure regions (on evacuation failure)\n@@ -48,1 +48,1 @@\n-  class RestoreRetainedRegionsTask;\n+  class RestoreEvacFailureRegionsTask;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -327,3 +327,3 @@\n-  product(uint, G1NumCollectionsKeepUnreclaimable, 8, DIAGNOSTIC,           \\\n-          \"After how many GCs a region has been found unreclaimable G1 \"    \\\n-          \"should give up reclaiming it.\")                                  \\\n+  product(uint, G1NumCollectionsKeepPinned, 8, DIAGNOSTIC,                  \\\n+          \"After how many GCs a region has been found pinned G1 should \"    \\\n+          \"give up reclaiming it.\")                                         \\\n","filename":"src\/hotspot\/share\/gc\/g1\/g1_globals.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -735,0 +735,1 @@\n+  \/\/\n@@ -739,0 +740,4 @@\n+  \/\/\n+  \/\/ In particular String Deduplication might change the reference to the character\n+  \/\/ array of the j.l.String after native code obtained a raw reference to it (via\n+  \/\/ GetStringCritical()).\n","filename":"src\/hotspot\/share\/gc\/g1\/heapRegion.cpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -267,1 +267,1 @@\n-        new LogMessageWithLevel(\"Restore Retained Regions\", Level.DEBUG),\n+        new LogMessageWithLevel(\"Restore Evacuation Failed Regions\", Level.DEBUG),\n@@ -271,1 +271,1 @@\n-        new LogMessageWithLevel(\"Retained Regions\", Level.DEBUG),\n+        new LogMessageWithLevel(\"Allocation Failed Regions\", Level.DEBUG),\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestGCLogMessages.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -73,1 +73,1 @@\n-                                                                  \"-XX:G1NumCollectionsKeepUnreclaimable=2\",\n+                                                                  \"-XX:G1NumCollectionsKeepPinned=2\",\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedObjectsEvacuation.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -102,1 +102,1 @@\n-    \/\/   2) GC(<x>) Finish adding retained\/marking candidates to collection set. Initial: <y> ... unreclaimable: <z>\n+    \/\/   2) GC(<x>) Finish adding retained\/marking candidates to collection set. Initial: <y> ... pinned: <z>\n@@ -112,2 +112,1 @@\n-    \/\/ here) and the amount of unreclaimable (pinned regions) for every kind of collection set candidate sets (\"marking\" or\n-    \/\/ \"retained\").\n+    \/\/ here) and the amount of pinned regions for every kind of collection set candidate sets (\"marking\" or \"retained\").\n@@ -121,1 +120,1 @@\n-        final String reclaimEvents = \"GC\\\\((\\\\d+)\\\\) Finish adding (retained|marking) candidates to collection set\\\\. Initial: (\\\\d+).*unreclaimable: (\\\\d+)\";\n+        final String reclaimEvents = \"GC\\\\((\\\\d+)\\\\) Finish adding (retained|marking) candidates to collection set\\\\. Initial: (\\\\d+).*pinned: (\\\\d+)\";\n@@ -143,1 +142,1 @@\n-                    Asserts.assertEQ(actual, 1, \"Expected number of unreclaimable to be 1 after marking skip but is \" + actual);\n+                    Asserts.assertEQ(actual, 1, \"Expected number of pinned to be 1 after marking skip but is \" + actual);\n@@ -166,1 +165,1 @@\n-                    Asserts.assertEQ(actual, 1, \"Expected number of unreclaimable to be 1 after retained skip but is \" + actual);\n+                    Asserts.assertEQ(actual, 1, \"Expected number of pinned to be 1 after retained skip but is \" + actual);\n@@ -190,1 +189,1 @@\n-                        Asserts.fail(\"Expected number of unreclaimable to be 1 after dropping but is \" + actual);\n+                        Asserts.fail(\"Expected number of pinned to be 1 after dropping but is \" + actual);\n@@ -209,1 +208,1 @@\n-                    Asserts.fail(\"Expected number of unreclaimable to be 0 after marking reclaim but is \" + actual);\n+                    Asserts.fail(\"Expected number of pinned to be 0 after marking reclaim but is \" + actual);\n@@ -226,1 +225,1 @@\n-                    Asserts.fail(\"Expected number of unreclaimable to be 0 after retained reclaim but is \" + actual);\n+                    Asserts.fail(\"Expected number of pinned to be 0 after retained reclaim but is \" + actual);\n@@ -268,1 +267,1 @@\n-                                                                  \"-XX:G1NumCollectionsKeepUnreclaimable=3\",\n+                                                                  \"-XX:G1NumCollectionsKeepPinned=3\",\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/pinnedobjs\/TestPinnedOldObjectsEvacuation.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-            \"RestoreRetainedRegions\",\n+            \"RestoreEvacuationFailedRegions\",\n","filename":"test\/jdk\/jdk\/jfr\/event\/gc\/collection\/TestG1ParallelPhases.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}