{"files":[{"patch":"@@ -37,1 +37,1 @@\n-import jdk.internal.util.StaticProperty;\n+import sun.nio.cs.UTF_8;\n@@ -583,1 +583,2 @@\n-     * (e.g., keyboard and\/or display) specified by the host environment or user.\n+     * (e.g., keyboard and\/or display) specified by the host environment or user,\n+     * which defaults to the one based on {@link System##stdout.encoding stdtout.encoding}.\n@@ -617,1 +618,0 @@\n-    private static native String encoding();\n@@ -619,1 +619,3 @@\n-    static final Charset CHARSET;\n+    static final Charset CHARSET =\n+        Charset.forName(GetPropertyAction.privilegedGetProperty(\"stdout.encoding\"), UTF_8.INSTANCE);\n+    private static final Console cons = instantiateConsole();\n@@ -621,20 +623,0 @@\n-        Charset cs = null;\n-\n-        if (istty) {\n-            String csname = encoding();\n-            if (csname == null) {\n-                csname = GetPropertyAction.privilegedGetProperty(\"stdout.encoding\");\n-            }\n-            if (csname != null) {\n-                cs = Charset.forName(csname, null);\n-            }\n-        }\n-        if (cs == null) {\n-            cs = Charset.forName(StaticProperty.nativeEncoding(),\n-                    Charset.defaultCharset());\n-        }\n-\n-        CHARSET = cs;\n-\n-        cons = instantiateConsole();\n-\n@@ -692,1 +674,0 @@\n-    private static final Console cons;\n","filename":"src\/java.base\/share\/classes\/java\/io\/Console.java","additions":6,"deletions":25,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,6 +39,0 @@\n-\n-JNIEXPORT jstring JNICALL\n-Java_java_io_Console_encoding(JNIEnv *env, jclass cls)\n-{\n-    return NULL;\n-}\n","filename":"src\/java.base\/unix\/native\/libjava\/Console_md.c","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,14 +52,0 @@\n-\n-JNIEXPORT jstring JNICALL\n-Java_java_io_Console_encoding(JNIEnv *env, jclass cls)\n-{\n-    char buf[64];\n-    int cp = GetConsoleCP();\n-    if (cp >= 874 && cp <= 950)\n-        snprintf(buf, sizeof(buf), \"ms%d\", cp);\n-    else if (cp == 65001)\n-        snprintf(buf, sizeof(buf), \"UTF-8\");\n-    else\n-        snprintf(buf, sizeof(buf), \"cp%d\", cp);\n-    return JNU_NewStringPlatform(env, buf);\n-}\n","filename":"src\/java.base\/windows\/native\/libjava\/Console_md.c","additions":1,"deletions":15,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import org.junit.jupiter.api.Test;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+\/**\n+ * @test\n+ * @bug 8341975\n+ * @summary Tests the default charset. It should honor `stdout.encoding`\n+ *          which should be the same as System.out.charset()\n+ * @modules jdk.internal.le\n+ * @run junit\/othervm -Dstdout.encoding=UTF-8 DefaultCharsetTest\n+ * @run junit\/othervm -Dstdout.encoding=ISO-8859-1 DefaultCharsetTest\n+ * @run junit\/othervm -Dstdout.encoding=US-ASCII DefaultCharsetTest\n+ * @run junit\/othervm -Dstdout.encoding=foo DefaultCharsetTest\n+ * @run junit\/othervm DefaultCharsetTest\n+ *\/\n+public class DefaultCharsetTest {\n+    @Test\n+    public void testDefaultCharset() {\n+        var stdoutEncoding = System.getProperty(\"stdout.encoding\");\n+        var sysoutCharset = System.out.charset();\n+        var consoleCharset = System.console().charset();\n+        System.out.println(\"\"\"\n+                    stdout.encoding = %s\n+                    System.out.charset() = %s\n+                    System.console().charset() = %s\n+                \"\"\".formatted(stdoutEncoding, sysoutCharset.name(), consoleCharset.name()));\n+        assertEquals(consoleCharset, sysoutCharset,\n+            \"Charsets for System.out and Console differ for stdout.encoding: %s\".formatted(stdoutEncoding));\n+    }\n+}\n","filename":"test\/jdk\/java\/io\/Console\/DefaultCharsetTest.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}