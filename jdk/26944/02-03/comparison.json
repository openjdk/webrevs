{"files":[{"patch":"@@ -36,0 +36,1 @@\n+#include \"utilities\/align.hpp\"\n@@ -94,3 +95,3 @@\n-  address jal_pc = instruction_address() + 2 * NativeInstruction::instruction_size;\n-  uint32_t *jal_pos = (uint32_t *)jal_pc;\n-  assert(is_aligned(jal_pos, NativeInstruction::instruction_size), \"Must be naturally aligned\");\n+  address jmp_ins_pc = instruction_address() + 2 * NativeInstruction::instruction_size;\n+  \/\/ Rutime calls may be unaligned, but they are never changed after relocation.\n+  assert(!mt_safe || is_aligned(jmp_ins_pc, NativeInstruction::instruction_size), \"Must be naturally aligned: %p\", jmp_ins_pc);\n@@ -98,2 +99,2 @@\n-  if (Assembler::reachable_from_branch_at(jal_pc, dest)) {\n-    int64_t distance = dest - jal_pc;\n+  if (Assembler::reachable_from_branch_at(jmp_ins_pc, dest)) {\n+    int64_t distance = dest - jmp_ins_pc;\n@@ -101,2 +102,2 @@\n-    Atomic::store(jal_pos, new_jal);\n-  } else if (!MacroAssembler::is_jalr_at(jal_pc)) { \/\/ The jalr is always identical: jalr ra, 0(t1)\n+    Atomic::store((uint32_t *)jmp_ins_pc, new_jal);\n+  } else if (!MacroAssembler::is_jalr_at(jmp_ins_pc)) { \/\/ The jalr is always identical: jalr ra, 0(t1)\n@@ -104,1 +105,1 @@\n-    Atomic::store(jal_pos, new_jalr);\n+    Atomic::store((uint32_t *)jmp_ins_pc, new_jalr);\n@@ -113,1 +114,1 @@\n-    ICache::invalidate_range(jal_pc, NativeInstruction::instruction_size);\n+    ICache::invalidate_range(jmp_ins_pc, NativeInstruction::instruction_size);\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"}]}