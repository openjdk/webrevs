{"files":[{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.Point;\n+import java.awt.Robot;\n+import java.awt.Window;\n+import java.awt.event.InputEvent;\n+import java.awt.event.MouseAdapter;\n+import java.awt.event.MouseEvent;\n+\n+\/*\n+ * @test\n+ * @bug 5062118\n+ * @key headful\n+ * @summary Disabling of a parent should not disable Window.\n+ * @run main DisabledParentOfToplevel\n+ *\/\n+\n+public class DisabledParentOfToplevel {\n+    private static Button okBtn;\n+    private static Window ww;\n+    private static Frame parentFrame;\n+    private static volatile Point p;\n+    private static volatile Dimension d;\n+\n+    public static void main(String[] args) throws Exception {\n+        Robot robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                createAndShowUI();\n+            });\n+            robot.delay(1000);\n+            EventQueue.invokeAndWait(() -> {\n+                p = okBtn.getLocationOnScreen();\n+                d = okBtn.getSize();\n+            });\n+            robot.mouseMove(p.x + d.width \/ 2, p.x + d.height \/ 2);\n+            robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n+            robot.delay(500);\n+            if (ww.isVisible()) {\n+                throw new RuntimeException(\"Window is visible but should be hidden: failure.\");\n+            }\n+        } finally {\n+            EventQueue.invokeAndWait(() -> {\n+                if (parentFrame != null) {\n+                    parentFrame.dispose();\n+                }\n+            });\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        parentFrame = new Frame(\"parentFrame\");\n+        parentFrame.setSize(100, 100);\n+        parentFrame.setEnabled(false);\n+        ww = new Window(parentFrame);\n+        ww.setLayout(new BorderLayout());\n+        okBtn = new Button(\"Click to Close Me\");\n+        ww.add(okBtn);\n+        ww.setSize(250, 250);\n+        ww.setLocation(110, 110);\n+        okBtn.addMouseListener(new MouseAdapter() {\n+            public void mousePressed(MouseEvent me) {\n+                System.out.println(\"Pressed: close\");\n+                ww.setVisible(false);\n+            }\n+        });\n+        parentFrame.setVisible(true);\n+        ww.setVisible(true);\n+        okBtn.requestFocus();\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/DisabledParentOfToplevel.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"},{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.EventQueue;\n+import java.awt.Frame;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Point;\n+import java.awt.Rectangle;\n+import java.awt.Robot;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n+import java.io.IOException;\n+import javax.imageio.ImageIO;\n+\n+\/*\n+ * @test\n+ * @bug 4328588\n+ * @key headful\n+ * @summary Non-default visual on top-level Frame should work\n+ * @run main FrameVisualTest\n+ *\/\n+\n+public class FrameVisualTest {\n+    private static GraphicsConfiguration[] gcs;\n+    private static volatile Frame[] frames;\n+    private static volatile int index;\n+\n+    private static Frame f;\n+    private static Robot robot;\n+    private static volatile Point p;\n+    private static volatile Dimension d;\n+    private static final int TOLERANCE = 5;\n+\n+    public static void main(String[] args) throws Exception {\n+        gcs = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice().getConfigurations();\n+        robot = new Robot();\n+        robot.setAutoDelay(100);\n+        try {\n+            EventQueue.invokeAndWait(() -> {\n+                createAndShowUI();\n+            });\n+            robot.delay(1000);\n+            System.out.println(\"frames.length: \"+frames.length);\n+            for (index = 0; index < frames.length; index++) {\n+                EventQueue.invokeAndWait(() -> {\n+                    p = frames[index].getLocation();\n+                    d = frames[index].getSize();\n+                });\n+                Rectangle rect = new Rectangle(p, d);\n+                BufferedImage img = robot.createScreenCapture(rect);\n+                if (chkImgBackgroundColor(img)) {\n+                    try {\n+                        ImageIO.write(img, \"png\", new File(\"Frame_\" + index + \".png\"));\n+                    } catch (IOException ignored) {}\n+                    throw new RuntimeException(\"Frame visual test failed with non-white background color\");\n+                }\n+            }\n+        } finally {\n+            for (index = 0; index < frames.length; index++) {\n+                EventQueue.invokeAndWait(() -> {\n+                    if (frames[index] != null) {\n+                        frames[index].dispose();\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    private static void createAndShowUI() {\n+        frames = new Frame[gcs.length];\n+        for (int i = 0; i < frames.length; i++) {\n+            frames[i] = new Frame(\"Frame w\/ gc \" + i, gcs[i]);\n+            frames[i].setSize(100, 100);\n+            frames[i].setUndecorated(true);\n+            frames[i].setBackground(Color.WHITE);\n+            frames[i].setVisible(true);\n+        }\n+    }\n+\n+    private static boolean chkImgBackgroundColor(BufferedImage img) {\n+\n+        \/\/ scan for mid-line and if it is non-white color then return true.\n+        for (int x = 1; x < img.getWidth() - 1; ++x) {\n+            Color c = new Color(img.getRGB(x, img.getHeight() \/ 2));\n+            if ((c.getRed() - Color.WHITE.getRed()) > TOLERANCE &&\n+                    (c.getGreen() - Color.WHITE.getGreen()) > TOLERANCE &&\n+                    (c.getBlue() - Color.WHITE.getBlue()) > TOLERANCE) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+}\n+\n","filename":"test\/jdk\/java\/awt\/Frame\/FrameVisualTest.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"},{"patch":"@@ -0,0 +1,70 @@\n+\/*\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Frame;\n+import java.awt.Label;\n+import java.awt.Panel;\n+import java.awt.TextField;\n+\n+\/*\n+ * @test\n+ * @bug 4113040\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n+ * @summary Checks that IMStatusBar does not affect Frame layout\n+ * @run main\/manual\/othervm -Duser.language=ja -Duser.country=JP IMStatusBar\n+ *\/\n+\n+public class IMStatusBar {\n+\n+    public static void main(String[] args) throws Exception {\n+        String INSTRUCTIONS = \"\"\"\n+                If the window appears the right size, but then resizes so that the\n+                status field overlaps the bottom label, press Fail; otherwise press Pass.\n+                \"\"\";\n+\n+        PassFailJFrame.builder()\n+                .title(\"IMStatusBar Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testUI(IMStatusBar::createUI)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    private static Frame createUI() {\n+        Frame f = new Frame();\n+        Panel centerPanel = new Panel();\n+        f.setSize(200, 200);\n+        f.setLayout(new BorderLayout());\n+        f.add(new Label(\"Top\"), BorderLayout.NORTH);\n+        f.add(centerPanel, BorderLayout.CENTER);\n+        f.add(new Label(\"Bottom\"), BorderLayout.SOUTH);\n+        centerPanel.setLayout(new BorderLayout());\n+        centerPanel.add(new TextField(\"Middle\"), BorderLayout.CENTER);\n+        centerPanel.validate();\n+        return f;\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/IMStatusBar.java","additions":70,"deletions":0,"binary":false,"changes":70,"status":"added"},{"patch":"@@ -0,0 +1,484 @@\n+\/*\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.BorderLayout;\n+import java.awt.Button;\n+import java.awt.Canvas;\n+import java.awt.Choice;\n+import java.awt.Color;\n+import java.awt.Dimension;\n+import java.awt.FlowLayout;\n+import java.awt.FontMetrics;\n+import java.awt.Frame;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.GraphicsDevice;\n+import java.awt.GraphicsEnvironment;\n+import java.awt.Image;\n+import java.awt.Label;\n+import java.awt.LayoutManager;\n+import java.awt.Panel;\n+import java.awt.Rectangle;\n+import java.awt.RenderingHints;\n+import java.awt.TextField;\n+\n+import java.awt.event.ActionEvent;\n+import java.awt.event.ActionListener;\n+\n+import java.awt.image.ColorModel;\n+import java.awt.image.MemoryImageSource;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.swing.JFrame;\n+\n+import jtreg.SkippedException;\n+\n+\/*\n+ * @test\n+ * @bug 4312921\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @build PassFailJFrame\n+ * @summary Tests that no garbage is painted on primary screen with DGA\n+ * @run main\/manual MultiScreenTest\n+ *\/\n+\n+public class MultiScreenTest {\n+    static GraphicsEnvironment ge;\n+    static GraphicsDevice[] gs;\n+\n+    public static void main(String[] args) throws Exception {\n+        ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        gs = ge.getScreenDevices();\n+        if (gs.length < 2) {\n+            throw new SkippedException(\"You have only one monitor in your system - test passed\");\n+        }\n+        MultiScreenTest obj = new MultiScreenTest();\n+        String INSTRUCTIONS =\n+                \"This test is to be run only on multiscreen machine. \" +\n+                \"You have \" + gs.length + \" monitors in your system.\\n\" +\n+                \"Actively drag the DitherTest frames on the secondary screen and \" +\n+                \"if you see garbage appearing on your primary screen \" +\n+                \"test failed otherwise it passed.\";;\n+\n+        PassFailJFrame.builder()\n+                .title(\"MultiScreenTest Instruction\")\n+                .instructions(INSTRUCTIONS)\n+                .rows((int) INSTRUCTIONS.lines().count() + 2)\n+                .columns(40)\n+                .testUI(obj::init)\n+                .build()\n+                .awaitAndCheck();\n+    }\n+\n+    public List<JFrame> init() {\n+        List<JFrame> list = new ArrayList<>();\n+        for (int j = 0; j < gs.length; j++) {\n+            GraphicsConfiguration[] gc = gs[j].getConfigurations();\n+            if (gc.length > 0) {\n+                for (int i = 0; i < gc.length \/ 2; i++) {\n+                    JFrame f = new JFrame(gc[i]); \/\/test JFrame( gc )\n+                    GCCanvas c = new GCCanvas(gc[i]);\/\/test canvas( gc )\n+                    Rectangle gcBounds = gc[i].getBounds(); \/\/test getBounds()\n+                    int xoffs = gcBounds.x;\n+                    int yoffs = gcBounds.y;\n+\n+                    f.getContentPane().add(c);\n+                    f.setTitle(\"Screen# \" + Integer.toString(j) + \", GC#\" + Integer.toString(i));\n+                    f.setSize(300, 200);\n+                    f.setLocation(400 + xoffs, (i * 150) + yoffs);\/\/test displaying in right location\n+                    list.add(f);\n+\n+                    Frame ditherfs = new Frame(\"DitherTest GC#\" + Integer.toString(i), gc[i]);\n+                    ditherfs.setLayout(new BorderLayout()); \/\/showDitherTest\n+                    DitherTest ditherTest = new DitherTest(gc[i]);\n+                    ditherfs.add(\"Center\", ditherTest);\n+                    ditherfs.setBounds(300, 200, 300, 200);\n+                    ditherfs.setLocation(750 + xoffs, (i * 50) + yoffs);\n+                    ditherfs.pack();\n+                    ditherfs.show();\n+                    ditherTest.start();\n+                }\n+            }\n+        }\n+        return list;\n+    }\n+}\n+\n+class GCCanvas extends Canvas {\n+\n+    GraphicsConfiguration gc;\n+    Rectangle bounds;\n+    Graphics g = this.getGraphics();\n+    Dimension size = getSize();\n+\n+    public GCCanvas(GraphicsConfiguration gc) {\n+        super(gc);\n+        this.gc = gc;\n+        bounds = gc.getBounds();\n+    }\n+\n+    public void paint( Graphics _g ) {\n+\n+        Graphics2D g = (Graphics2D) _g;\n+\n+        g.drawRect(0, 0, size.width-1, size.height-1);\n+        g.setColor(Color.lightGray);\n+        g.draw3DRect(1, 1, size.width-3, size.height-3, true);\n+\n+        g.setColor(Color.red);\n+        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);\n+\n+        g.drawString(\"HELLO!\", 110, 10);\n+\n+        g.setColor(Color.blue);\n+        g.drawString(\"ScreenSize=\"+Integer.toString(bounds.width)+\"X\"+\n+                     Integer.toString(bounds.height), 10, 20);\n+        g.setColor(Color.green);\n+        g.drawString(gc.toString(), 10, 30);\n+        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_OFF);\n+\n+        g.setColor(Color.orange);\n+        g.fillRect(40, 20, 50, 50);\n+\n+        g.setColor(Color.red);\n+        g.drawRect(100, 20, 30, 30);\n+\n+        g.setColor(Color.gray);\n+        g.drawLine(220, 20, 280, 40);\n+\n+        g.setColor(Color.cyan);\n+        g.fillArc(150, 30, 30, 30, 0, 200);\n+    }\n+\n+    public Dimension getPreferredSize(){\n+         return new Dimension(300, 200);\n+    }\n+}\n+\n+class DitherCanvas extends Canvas {\n+    Image img;\n+    static String calcString = \"Calculating...\";\n+\n+    GraphicsConfiguration mGC;\n+\n+    public DitherCanvas(GraphicsConfiguration gc) {\n+        super(gc);\n+        mGC = gc;\n+    }\n+\n+    public GraphicsConfiguration getGraphicsConfig() {\n+        return mGC;\n+    }\n+\n+    public void paint(Graphics g) {\n+        int w = getSize().width;\n+        int h = getSize().height;\n+        if (img == null) {\n+            super.paint(g);\n+            g.setColor(Color.black);\n+            FontMetrics fm = g.getFontMetrics();\n+            int x = (w - fm.stringWidth(calcString)) \/ 2;\n+            int y = h \/ 2;\n+            g.drawString(calcString, x, y);\n+        } else {\n+            g.drawImage(img, 0, 0, w, h, this);\n+        }\n+    }\n+\n+    public void update(Graphics g) {\n+        paint(g);\n+    }\n+\n+    public Dimension getMinimumSize() {\n+        return new Dimension(20, 20);\n+    }\n+\n+    public Dimension getPreferredSize() {\n+        return new Dimension(200, 200);\n+    }\n+\n+    public Image getImage() {\n+        return img;\n+    }\n+\n+    public void setImage(Image img) {\n+        this.img = img;\n+        paint(getGraphics());\n+    }\n+}\n+\n+class DitherTest extends Panel implements Runnable {\n+    final static int NOOP = 0;\n+    final static int RED = 1;\n+    final static int GREEN = 2;\n+    final static int BLUE = 3;\n+    final static int ALPHA = 4;\n+    final static int SATURATION = 5;\n+\n+    Thread runner;\n+\n+    DitherControls XControls;\n+    DitherControls YControls;\n+    DitherCanvas canvas;\n+\n+    public DitherTest(GraphicsConfiguration gc) {\n+        String xspec, yspec;\n+        int xvals[] = new int[2];\n+        int yvals[] = new int[2];\n+\n+        xspec = \"red\";\n+        yspec = \"blue\";\n+        int xmethod = colormethod(xspec, xvals);\n+        int ymethod = colormethod(yspec, yvals);\n+\n+        setLayout(new BorderLayout());\n+        XControls = new DitherControls(this, xvals[0], xvals[1],\n+                xmethod, false);\n+        YControls = new DitherControls(this, yvals[0], yvals[1],\n+                ymethod, true);\n+        YControls.addRenderButton();\n+        add(\"North\", XControls);\n+        add(\"South\", YControls);\n+        add(\"Center\", canvas = new DitherCanvas(gc));\n+    }\n+\n+    public void start() {\n+        runner = new Thread(this);\n+        runner.start();\n+    }\n+\n+    int colormethod(String s, int vals[]) {\n+        int method = NOOP;\n+\n+        if (s == null) {\n+            s = \"\";\n+        }\n+\n+        String lower = s.toLowerCase();\n+        int len = 0;\n+        if (lower.startsWith(\"red\")) {\n+            method = RED;\n+            lower = lower.substring(3);\n+        } else if (lower.startsWith(\"green\")) {\n+            method = GREEN;\n+            lower = lower.substring(5);\n+        } else if (lower.startsWith(\"blue\")) {\n+            method = BLUE;\n+            lower = lower.substring(4);\n+        } else if (lower.startsWith(\"alpha\")) {\n+            method = ALPHA;\n+            lower = lower.substring(4);\n+        } else if (lower.startsWith(\"saturation\")) {\n+            method = SATURATION;\n+            lower = lower.substring(10);\n+        }\n+\n+        if (method == NOOP) {\n+            vals[0] = 0;\n+            vals[1] = 0;\n+            return method;\n+        }\n+\n+        int begval = 0;\n+        int endval = 255;\n+\n+        try {\n+            int dash = lower.indexOf('-');\n+            if (dash < 0) {\n+                begval = endval = Integer.parseInt(lower);\n+            } else {\n+                begval = Integer.parseInt(lower.substring(0, dash));\n+                endval = Integer.parseInt(lower.substring(dash + 1));\n+            }\n+        } catch (Exception e) {\n+        }\n+\n+        if (begval < 0) {\n+            begval = 0;\n+        }\n+        if (endval < 0) {\n+            endval = 0;\n+        }\n+        if (begval > 255) {\n+            begval = 255;\n+        }\n+        if (endval > 255) {\n+            endval = 255;\n+        }\n+\n+        vals[0] = begval;\n+        vals[1] = endval;\n+\n+        return method;\n+    }\n+\n+    void applymethod(int c[], int method, int step, int total, int vals[]) {\n+        if (method == NOOP)\n+            return;\n+        int val = ((total < 2)\n+                ? vals[0]\n+                : vals[0] + ((vals[1] - vals[0]) * step \/ (total - 1)));\n+        switch (method) {\n+            case RED:\n+                c[0] = val;\n+                break;\n+            case GREEN:\n+                c[1] = val;\n+                break;\n+            case BLUE:\n+                c[2] = val;\n+                break;\n+            case ALPHA:\n+                c[3] = val;\n+                break;\n+            case SATURATION:\n+                int max = Math.max(Math.max(c[0], c[1]), c[2]);\n+                int min = max * (255 - val) \/ 255;\n+                if (c[0] == 0) {\n+                    c[0] = min;\n+                }\n+                if (c[1] == 0) {\n+                    c[1] = min;\n+                }\n+                if (c[2] == 0) {\n+                    c[2] = min;\n+                }\n+                break;\n+        }\n+    }\n+\n+    public void run() {\n+        canvas.setImage(null);  \/\/ Wipe previous image\n+        Image img = calculateImage();\n+        synchronized (this) {\n+            if (img != null && runner == Thread.currentThread()) {\n+                canvas.setImage(img);\n+            }\n+        }\n+    }\n+\n+    \/**\n+     * Calculates and returns the image.  Halts the calculation and returns\n+     * null if stopped during the calculation.\n+     *\/\n+    Image calculateImage() {\n+        Thread me = Thread.currentThread();\n+\n+        int width = canvas.getSize().width;\n+        int height = canvas.getSize().height;\n+        int xvals[] = new int[2];\n+        int yvals[] = new int[2];\n+        int xmethod = XControls.getParams(xvals);\n+        int ymethod = YControls.getParams(yvals);\n+        int pixels[] = new int[width * height];\n+        int c[] = new int[4];\n+        int index = 0;\n+\n+        for (int j = 0; j < height; j++) {\n+            for (int i = 0; i < width; i++) {\n+                c[0] = c[1] = c[2] = 0;\n+                c[3] = 255;\n+                if (xmethod < ymethod) {\n+                    applymethod(c, xmethod, i, width, xvals);\n+                    applymethod(c, ymethod, j, height, yvals);\n+                } else {\n+                    applymethod(c, ymethod, j, height, yvals);\n+                    applymethod(c, xmethod, i, width, xvals);\n+                }\n+                pixels[index++] = ((c[3] << 24) |\n+                        (c[0] << 16) |\n+                        (c[1] << 8) |\n+                        (c[2] << 0));\n+\n+            }\n+            \/\/ Poll once per row to see if we've been told to stop.\n+            if (runner != me) {\n+                return null;\n+            }\n+        }\n+\n+        return createImage(new MemoryImageSource(width, height,\n+                ColorModel.getRGBdefault(), pixels, 0, width));\n+    }\n+\n+    public String getInfo() {\n+        return \"An interactive demonstration of dithering.\";\n+    }\n+\n+    public String[][] getParameterInfo() {\n+        String[][] info = {\n+                {\"xaxis\", \"{RED, GREEN, BLUE, PINK, ORANGE, MAGENTA, CYAN, WHITE, YELLOW, GRAY, DARKGRAY}\",\n+                 \"The color of the Y axis.  Default is RED.\"},\n+                {\"yaxis\", \"{RED, GREEN, BLUE, PINK, ORANGE, MAGENTA, CYAN, WHITE, YELLOW, GRAY, DARKGRAY}\",\n+                 \"The color of the X axis.  Default is BLUE.\"}\n+        };\n+        return info;\n+    }\n+}\n+\n+class DitherControls extends Panel implements ActionListener {\n+    TextField start;\n+    TextField end;\n+    Button button;\n+    Choice choice;\n+    DitherTest dt;\n+\n+    static LayoutManager dcLayout = new FlowLayout(FlowLayout.CENTER, 10, 5);\n+\n+    public DitherControls(DitherTest app, int s, int e, int type,\n+                          boolean vertical) {\n+        dt = app;\n+        setLayout(dcLayout);\n+        add(new Label(vertical ? \"Vertical\" : \"Horizontal\"));\n+        add(choice = new Choice());\n+        choice.addItem(\"Noop\");\n+        choice.addItem(\"Red\");\n+        choice.addItem(\"Green\");\n+        choice.addItem(\"Blue\");\n+        choice.addItem(\"Alpha\");\n+        choice.addItem(\"Saturation\");\n+        choice.select(type);\n+        add(start = new TextField(Integer.toString(s), 4));\n+        add(end = new TextField(Integer.toString(e), 4));\n+    }\n+\n+    public void addRenderButton() {\n+        add(button = new Button(\"New Image\"));\n+        button.addActionListener(this);\n+    }\n+\n+    public int getParams(int vals[]) {\n+        vals[0] = Integer.parseInt(start.getText());\n+        vals[1] = Integer.parseInt(end.getText());\n+        return choice.getSelectedIndex();\n+    }\n+\n+    public void actionPerformed(ActionEvent e) {\n+        if (e.getSource() == button) {\n+            dt.start();\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/Frame\/MultiScreenTest.java","additions":484,"deletions":0,"binary":false,"changes":484,"status":"added"}]}