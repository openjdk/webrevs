{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import sun.security.ec.point.AffinePoint;\n@@ -34,1 +33,0 @@\n-import sun.security.util.math.ImmutableIntegerModuloP;\n@@ -66,1 +64,1 @@\n-    ECOperations privateKeyOps;\n+    private ECOperations privateKeyOps;\n@@ -83,0 +81,4 @@\n+        privateKey = null;\n+        privateKeyOps = null;\n+        publicKey = null;\n+\n@@ -86,2 +88,2 @@\n-        privateKey = (ECPrivateKey)ECKeyFactory.toECKey(key);\n-        publicKey = null;\n+\n+        ECPrivateKey ecPrivateKey = (ECPrivateKey)ECKeyFactory.toECKey(key);\n@@ -89,1 +91,1 @@\n-            ECOperations.forParameters(privateKey.getParams());\n+            ECOperations.forParameters(ecPrivateKey.getParams());\n@@ -91,1 +93,1 @@\n-            NamedCurve nc = CurveDB.lookup(privateKey.getParams());\n+            NamedCurve nc = CurveDB.lookup(ecPrivateKey.getParams());\n@@ -96,1 +98,3 @@\n-        ECUtil.checkPrivateKey(privateKey);\n+        ECUtil.checkPrivateKey(ecPrivateKey);\n+\n+        privateKey = ecPrivateKey;\n@@ -142,0 +146,3 @@\n+        \/\/ Validate public key\n+        validate(privateKeyOps, (ECPublicKey) key);\n+\n@@ -148,3 +155,0 @@\n-        \/\/ Validate public key\n-        validate(privateKeyOps, publicKey);\n-\n@@ -157,5 +161,1 @@\n-        if (c.compareTo(BigInteger.ZERO) < 0) {\n-            throw new InvalidKeyException(\"Invalid coordinate\");\n-        }\n-\n-        if (c.compareTo(mod) >= 0) {\n+        if (c.compareTo(BigInteger.ZERO) < 0 || c.compareTo(mod) >= 0) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECDHKeyAgreement.java","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -0,0 +1,99 @@\n+\/*\n+ * Copyright (C) 2024, THL A29 Limited, a Tencent company. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8320449\n+ * @summary ECDHKeyAgreement should validate parameters before assigning them to fields.\n+ * @run junit ECDHKeyAgreementParamValidation\n+ *\/\n+\n+import javax.crypto.KeyAgreement;\n+import java.math.BigInteger;\n+import java.security.InvalidKeyException;\n+import java.security.KeyFactory;\n+import java.security.KeyPair;\n+import java.security.KeyPairGenerator;\n+import java.security.ProviderException;\n+import java.security.interfaces.ECPrivateKey;\n+import java.security.spec.ECPrivateKeySpec;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+public class ECDHKeyAgreementParamValidation {\n+\n+    @Test\n+    public void testInitWithInvalidKey() throws Exception {\n+        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"EC\");\n+        kpg.initialize(256);\n+        KeyPair kp = kpg.generateKeyPair();\n+        ECPrivateKey privateKey = (ECPrivateKey) kp.getPrivate();\n+\n+        KeyFactory keyFactory = KeyFactory.getInstance(\"EC\");\n+        ECPrivateKey invalidPrivateKey\n+                = (ECPrivateKey) keyFactory.generatePrivate(\n+                        new ECPrivateKeySpec(BigInteger.ZERO,\n+                                privateKey.getParams()));\n+\n+        KeyAgreement ka = KeyAgreement.getInstance(\"ECDH\");\n+\n+        \/\/ The first initiation should succeed.\n+        ka.init(privateKey);\n+\n+        \/\/ The second initiation should fail with invalid private key,\n+        \/\/ and the private key assigned by the first initiation should be cleared.\n+        Assertions.assertThrows(\n+                InvalidKeyException.class,\n+                () -> ka.init(invalidPrivateKey));\n+\n+        \/\/ Cannot doPhase due to no private key.\n+        Assertions.assertThrows(\n+                IllegalStateException.class,\n+                ()->ka.doPhase(kp.getPublic(), true));\n+    }\n+\n+    @Test\n+    public void testDoPhaseWithInvalidKey() throws Exception {\n+        \/\/ SECP256R1 key pair\n+        KeyPairGenerator kpgP256 = KeyPairGenerator.getInstance(\"EC\");\n+        kpgP256.initialize(256);\n+        KeyPair kpP256 = kpgP256.generateKeyPair();\n+\n+        \/\/ SECP384R1 key pair\n+        KeyPairGenerator kpgP384 = KeyPairGenerator.getInstance(\"EC\");\n+        kpgP384.initialize(384);\n+        KeyPair kpP384 = kpgP384.generateKeyPair();\n+\n+        KeyAgreement ka = KeyAgreement.getInstance(\"ECDH\");\n+        ka.init(kpP256.getPrivate());\n+        try {\n+            ka.doPhase(kpP384.getPublic(), true);\n+        } catch (InvalidKeyException e) {\n+            \/\/ Do nothing\n+        }\n+\n+        \/\/ Should not generate share key with SECP256R1 private key and SECP384R1 public key\n+        Assertions.assertThrows(IllegalStateException.class, ka::generateSecret);\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/ec\/ECDHKeyAgreementParamValidation.java","additions":99,"deletions":0,"binary":false,"changes":99,"status":"added"}]}