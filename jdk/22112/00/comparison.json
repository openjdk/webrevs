{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import java.security.AccessController;\n@@ -37,1 +36,0 @@\n-import java.security.PrivilegedAction;\n@@ -40,1 +38,0 @@\n-import java.security.SecurityPermission;\n@@ -245,3 +242,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String prop = AccessController.doPrivileged(\n-            (PrivilegedAction<String>) () -> System.getProperty(KEYSTORE_COMPATIBILITY_MODE_PROP));\n+        String prop = System.getProperty(KEYSTORE_COMPATIBILITY_MODE_PROP);\n@@ -698,4 +693,0 @@\n-     * @exception SecurityException if the security check for\n-     *  <code>SecurityPermission(\"authProvider.<i>name<\/i>\")<\/code> does not\n-     *  pass, where <i>name<\/i> is the value returned by\n-     *  this provider's <code>getName<\/code> method.\n@@ -713,10 +704,0 @@\n-        \/*\n-         * Use the same security check as AuthProvider.login\n-         *\/\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new SecurityPermission(\n-                \"authProvider.SunMSCAPI\"));\n-        }\n-\n","filename":"src\/jdk.crypto.mscapi\/windows\/classes\/sun\/security\/mscapi\/CKeyStore.java","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -53,7 +51,2 @@\n-        @SuppressWarnings({\"removal\", \"restricted\"})\n-        var dummy = AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                System.loadLibrary(\"sunmscapi\");\n-                return null;\n-            }\n-        });\n+        @SuppressWarnings(\"restricted\")\n+        System.loadLibrary(\"sunmscapi\");\n@@ -151,1 +144,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -156,109 +148,104 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                \/*\n-                 * Secure random\n-                 *\/\n-                HashMap<String, String> srattrs = new HashMap<>(1);\n-                srattrs.put(\"ThreadSafe\", \"true\");\n-                putService(new ProviderService(p, \"SecureRandom\",\n-                           \"Windows-PRNG\", \"sun.security.mscapi.PRNG\",\n-                           null, srattrs));\n-\n-                \/*\n-                 * Key store\n-                 *\/\n-                putService(new ProviderService(p, \"KeyStore\",\n-                           \"Windows-MY\", \"sun.security.mscapi.CKeyStore$MY\"));\n-                putService(new ProviderService(p, \"KeyStore\",\n-                            \"Windows-MY-CURRENTUSER\", \"sun.security.mscapi.CKeyStore$MY\"));\n-                putService(new ProviderService(p, \"KeyStore\",\n-                           \"Windows-ROOT\", \"sun.security.mscapi.CKeyStore$ROOT\"));\n-                putService(new ProviderService(p, \"KeyStore\",\n-                            \"Windows-ROOT-CURRENTUSER\", \"sun.security.mscapi.CKeyStore$ROOT\"));\n-                putService(new ProviderService(p, \"KeyStore\",\n-                            \"Windows-MY-LOCALMACHINE\", \"sun.security.mscapi.CKeyStore$MYLocalMachine\"));\n-                putService(new ProviderService(p, \"KeyStore\",\n-                            \"Windows-ROOT-LOCALMACHINE\", \"sun.security.mscapi.CKeyStore$ROOTLocalMachine\"));\n-\n-                \/*\n-                 * Signature engines\n-                 *\/\n-                HashMap<String, String> attrs = new HashMap<>(1);\n-                attrs.put(\"SupportedKeyClasses\", \"sun.security.mscapi.CKey\");\n-\n-                \/\/ NONEwithRSA must be supplied with a pre-computed message digest.\n-                \/\/ Only the following digest algorithms are supported: MD5, SHA-1,\n-                \/\/ SHA-256, SHA-384, SHA-512 and a special-purpose digest\n-                \/\/ algorithm which is a concatenation of SHA-1 and MD5 digests.\n-                putService(new ProviderService(p, \"Signature\",\n-                           \"NONEwithRSA\", \"sun.security.mscapi.CSignature$NONEwithRSA\",\n-                           null, attrs));\n-                putService(new ProviderService(p, \"Signature\",\n-                           \"SHA1withRSA\", \"sun.security.mscapi.CSignature$SHA1withRSA\",\n-                           null, attrs));\n-                putService(new ProviderServiceA(p, \"Signature\",\n-                           \"SHA256withRSA\",\n-                           \"sun.security.mscapi.CSignature$SHA256withRSA\",\n-                           attrs));\n-                putService(new ProviderServiceA(p, \"Signature\",\n-                           \"SHA384withRSA\",\n-                           \"sun.security.mscapi.CSignature$SHA384withRSA\",\n-                           attrs));\n-                putService(new ProviderServiceA(p, \"Signature\",\n-                           \"SHA512withRSA\",\n-                           \"sun.security.mscapi.CSignature$SHA512withRSA\",\n-                           attrs));\n-                putService(new ProviderServiceA(p, \"Signature\",\n-                           \"RSASSA-PSS\", \"sun.security.mscapi.CSignature$PSS\",\n-                           attrs));\n-                putService(new ProviderService(p, \"Signature\",\n-                           \"MD5withRSA\", \"sun.security.mscapi.CSignature$MD5withRSA\",\n-                           null, attrs));\n-                putService(new ProviderService(p, \"Signature\",\n-                           \"MD2withRSA\", \"sun.security.mscapi.CSignature$MD2withRSA\",\n-                           null, attrs));\n-                putService(new ProviderServiceA(p, \"Signature\",\n-                           \"SHA1withECDSA\",\n-                           \"sun.security.mscapi.CSignature$SHA1withECDSA\",\n-                           attrs));\n-                putService(new ProviderServiceA(p, \"Signature\",\n-                           \"SHA224withECDSA\",\n-                           \"sun.security.mscapi.CSignature$SHA224withECDSA\",\n-                           attrs));\n-                putService(new ProviderServiceA(p, \"Signature\",\n-                           \"SHA256withECDSA\",\n-                           \"sun.security.mscapi.CSignature$SHA256withECDSA\",\n-                           attrs));\n-                putService(new ProviderServiceA(p, \"Signature\",\n-                           \"SHA384withECDSA\",\n-                           \"sun.security.mscapi.CSignature$SHA384withECDSA\",\n-                           attrs));\n-                putService(new ProviderServiceA(p, \"Signature\",\n-                           \"SHA512withECDSA\",\n-                           \"sun.security.mscapi.CSignature$SHA512withECDSA\",\n-                           attrs));\n-                \/*\n-                 * Key Pair Generator engines\n-                 *\/\n-                attrs.clear();\n-                attrs.put(\"KeySize\", \"16384\");\n-                putService(new ProviderService(p, \"KeyPairGenerator\",\n-                           \"RSA\", \"sun.security.mscapi.CKeyPairGenerator$RSA\",\n-                           null, attrs));\n-\n-                \/*\n-                 * Cipher engines\n-                 *\/\n-                attrs.clear();\n-                attrs.put(\"SupportedModes\", \"ECB\");\n-                attrs.put(\"SupportedPaddings\", \"PKCS1PADDING\");\n-                attrs.put(\"SupportedKeyClasses\", \"sun.security.mscapi.CKey\");\n-                putService(new ProviderService(p, \"Cipher\",\n-                           \"RSA\", \"sun.security.mscapi.CRSACipher\",\n-                           null, attrs));\n-                putService(new ProviderService(p, \"Cipher\",\n-                           \"RSA\/ECB\/PKCS1Padding\", \"sun.security.mscapi.CRSACipher\",\n-                           null, attrs));\n-                return null;\n-            }\n-        });\n+        \/*\n+         * Secure random\n+         *\/\n+        HashMap<String, String> srattrs = new HashMap<>(1);\n+        srattrs.put(\"ThreadSafe\", \"true\");\n+        putService(new ProviderService(p, \"SecureRandom\",\n+                   \"Windows-PRNG\", \"sun.security.mscapi.PRNG\",\n+                   null, srattrs));\n+\n+        \/*\n+         * Key store\n+         *\/\n+        putService(new ProviderService(p, \"KeyStore\",\n+                   \"Windows-MY\", \"sun.security.mscapi.CKeyStore$MY\"));\n+        putService(new ProviderService(p, \"KeyStore\",\n+                   \"Windows-MY-CURRENTUSER\", \"sun.security.mscapi.CKeyStore$MY\"));\n+        putService(new ProviderService(p, \"KeyStore\",\n+                   \"Windows-ROOT\", \"sun.security.mscapi.CKeyStore$ROOT\"));\n+        putService(new ProviderService(p, \"KeyStore\",\n+                   \"Windows-ROOT-CURRENTUSER\", \"sun.security.mscapi.CKeyStore$ROOT\"));\n+        putService(new ProviderService(p, \"KeyStore\",\n+                   \"Windows-MY-LOCALMACHINE\", \"sun.security.mscapi.CKeyStore$MYLocalMachine\"));\n+        putService(new ProviderService(p, \"KeyStore\",\n+                   \"Windows-ROOT-LOCALMACHINE\", \"sun.security.mscapi.CKeyStore$ROOTLocalMachine\"));\n+\n+        \/*\n+         * Signature engines\n+         *\/\n+        HashMap<String, String> attrs = new HashMap<>(1);\n+        attrs.put(\"SupportedKeyClasses\", \"sun.security.mscapi.CKey\");\n+\n+        \/\/ NONEwithRSA must be supplied with a pre-computed message digest.\n+        \/\/ Only the following digest algorithms are supported: MD5, SHA-1,\n+        \/\/ SHA-256, SHA-384, SHA-512 and a special-purpose digest\n+        \/\/ algorithm which is a concatenation of SHA-1 and MD5 digests.\n+        putService(new ProviderService(p, \"Signature\",\n+                   \"NONEwithRSA\", \"sun.security.mscapi.CSignature$NONEwithRSA\",\n+                   null, attrs));\n+        putService(new ProviderService(p, \"Signature\",\n+                   \"SHA1withRSA\", \"sun.security.mscapi.CSignature$SHA1withRSA\",\n+                   null, attrs));\n+        putService(new ProviderServiceA(p, \"Signature\",\n+                   \"SHA256withRSA\",\n+                   \"sun.security.mscapi.CSignature$SHA256withRSA\",\n+                   attrs));\n+        putService(new ProviderServiceA(p, \"Signature\",\n+                   \"SHA384withRSA\",\n+                   \"sun.security.mscapi.CSignature$SHA384withRSA\",\n+                   attrs));\n+        putService(new ProviderServiceA(p, \"Signature\",\n+                   \"SHA512withRSA\",\n+                   \"sun.security.mscapi.CSignature$SHA512withRSA\",\n+                   attrs));\n+        putService(new ProviderServiceA(p, \"Signature\",\n+                   \"RSASSA-PSS\", \"sun.security.mscapi.CSignature$PSS\",\n+                   attrs));\n+        putService(new ProviderService(p, \"Signature\",\n+                   \"MD5withRSA\", \"sun.security.mscapi.CSignature$MD5withRSA\",\n+                   null, attrs));\n+        putService(new ProviderService(p, \"Signature\",\n+                   \"MD2withRSA\", \"sun.security.mscapi.CSignature$MD2withRSA\",\n+                   null, attrs));\n+        putService(new ProviderServiceA(p, \"Signature\",\n+                   \"SHA1withECDSA\",\n+                   \"sun.security.mscapi.CSignature$SHA1withECDSA\",\n+                   attrs));\n+        putService(new ProviderServiceA(p, \"Signature\",\n+                   \"SHA224withECDSA\",\n+                   \"sun.security.mscapi.CSignature$SHA224withECDSA\",\n+                   attrs));\n+        putService(new ProviderServiceA(p, \"Signature\",\n+                   \"SHA256withECDSA\",\n+                   \"sun.security.mscapi.CSignature$SHA256withECDSA\",\n+                   attrs));\n+        putService(new ProviderServiceA(p, \"Signature\",\n+                   \"SHA384withECDSA\",\n+                   \"sun.security.mscapi.CSignature$SHA384withECDSA\",\n+                   attrs));\n+        putService(new ProviderServiceA(p, \"Signature\",\n+                   \"SHA512withECDSA\",\n+                   \"sun.security.mscapi.CSignature$SHA512withECDSA\",\n+                   attrs));\n+        \/*\n+         * Key Pair Generator engines\n+         *\/\n+        attrs.clear();\n+        attrs.put(\"KeySize\", \"16384\");\n+        putService(new ProviderService(p, \"KeyPairGenerator\",\n+                   \"RSA\", \"sun.security.mscapi.CKeyPairGenerator$RSA\",\n+                   null, attrs));\n+\n+        \/*\n+         * Cipher engines\n+         *\/\n+        attrs.clear();\n+        attrs.put(\"SupportedModes\", \"ECB\");\n+        attrs.put(\"SupportedPaddings\", \"PKCS1PADDING\");\n+        attrs.put(\"SupportedKeyClasses\", \"sun.security.mscapi.CKey\");\n+        putService(new ProviderService(p, \"Cipher\",\n+                   \"RSA\", \"sun.security.mscapi.CRSACipher\",\n+                   null, attrs));\n+        putService(new ProviderService(p, \"Cipher\",\n+                   \"RSA\/ECB\/PKCS1Padding\", \"sun.security.mscapi.CRSACipher\",\n+                   null, attrs));\n","filename":"src\/jdk.crypto.mscapi\/windows\/classes\/sun\/security\/mscapi\/SunMSCAPI.java","additions":107,"deletions":120,"binary":false,"changes":227,"status":"modified"}]}