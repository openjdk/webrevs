{"files":[{"patch":"@@ -4361,5 +4361,1 @@\n-        return switch (a.length) {\n-            case 0 -> 1;\n-            case 1 -> 31 + a[0];\n-            default -> ArraysSupport.vectorizedHashCode(a, 0, a.length, 1, ArraysSupport.T_INT);\n-        };\n+        return ArraysSupport.hashCode(a, 0, a.length, 1);\n","filename":"src\/java.base\/share\/classes\/java\/util\/Arrays.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -167,0 +167,13 @@\n+    \/*\n+     * This method does not perform type checks or bounds checks.  It is the\n+     * responsibility of the caller to perform such checks before calling this\n+     * method.\n+     *\/\n+    public static int hashCode(int[] a, int fromIndex, int length, int initialValue) {\n+        return switch (length) {\n+            case 0 -> initialValue;\n+            case 1 -> 31 * initialValue + a[fromIndex];\n+            default -> vectorizedHashCode(a, fromIndex, length, initialValue, T_INT);\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/util\/ArraysSupport.java","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug     4906359 6239296\n+ * @bug     4906359 6239296 8311864\n@@ -56,0 +56,10 @@\n+        equal(Arrays.hashCode((byte[]) null), 0);\n+        equal(Arrays.hashCode((short[]) null), 0);\n+        equal(Arrays.hashCode((int[]) null), 0);\n+        equal(Arrays.hashCode((long[]) null), 0);\n+        equal(Arrays.hashCode((char[]) null), 0);\n+        equal(Arrays.hashCode((float[]) null), 0);\n+        equal(Arrays.hashCode((double[]) null), 0);\n+        equal(Arrays.hashCode((boolean[]) null), 0);\n+        equal(Arrays.hashCode((Object[]) null), 0);\n+\n","filename":"test\/jdk\/java\/util\/Arrays\/ArrayObjectMethods.java","additions":12,"deletions":2,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,119 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8311864\n+ * @modules java.base\/jdk.internal.util\n+ * @run junit HashCode\n+ * @summary Tests for ArraysSupport.hashCode\n+ *\/\n+\n+import java.util.Arrays;\n+import java.util.Objects;\n+import java.util.concurrent.Callable;\n+import java.util.stream.Stream;\n+\n+import jdk.internal.util.ArraysSupport;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+public class HashCode {\n+\n+    @ParameterizedTest\n+    @MethodSource\n+    public void testHashCode(Arguments args) {\n+        assertEqualBehavior(\n+                () ->      referenceHashCode(args.array, args.offset, args.length, args.initialValue),\n+                () -> ArraysSupport.hashCode(args.array, args.offset, args.length, args.initialValue)\n+        );\n+    }\n+\n+    \/\/ implement leveraging JUnit assertions\n+    private static <T> void assertEqualBehavior(Callable<? extends T> expected,\n+                                                Callable<? extends T> actual) {\n+        Objects.requireNonNull(expected);\n+        Objects.requireNonNull(actual);\n+        T expectedResult;\n+        try {\n+            expectedResult = expected.call();\n+        } catch (Throwable expectedException) {\n+            var actualException = assertThrows(expectedException.getClass(),\n+                    actual::call);\n+            System.err.println(expectedException.getClass() + \", \"\n+                    + actualException.getClass());\n+            return;\n+        }\n+        T actualResult = assertDoesNotThrow(actual::call);\n+        assertEquals(expectedResult, actualResult);\n+    }\n+\n+    static Stream<Arguments> testHashCode() {\n+        \/\/ use array initializer instead of vararg syntax because\n+        \/\/ the former allows trailing comma\n+        var array = new Arguments[]{\n+                new Arguments(null, 0, 0, 0),\n+\n+                new Arguments(new int[]{}, 0, 0, 0),\n+                new Arguments(new int[]{}, 0, 0, 1),\n+\n+                new Arguments(new int[]{2, 5, 7}, 0, 0, 0),\n+                new Arguments(new int[]{2, 5, 7}, 0, 0, 1),\n+                new Arguments(new int[]{2, 5, 7}, 0, 1, 0),\n+                new Arguments(new int[]{2, 5, 7}, 0, 1, 1),\n+                new Arguments(new int[]{2, 5, 7}, 1, 0, 0),\n+                new Arguments(new int[]{2, 5, 7}, 1, 0, 1),\n+                new Arguments(new int[]{2, 5, 7}, 1, 1, 0),\n+                new Arguments(new int[]{2, 5, 7}, 1, 1, 1),\n+\n+                new Arguments(new int[]{2, 5, 7}, 0, 3, 0),\n+\n+                new Arguments(new int[]{2, 5, 7}, 0, 3, 1),\n+                new Arguments(new int[]{2, 5, 7}, 0, 5, 5),\n+        };\n+        return Stream.of(array);\n+    }\n+\n+    record Arguments(int[] array, int offset, int length, int initialValue) {\n+\n+        \/\/ override for string representation of int[] more helpful\n+        \/\/ than int[].toString()\n+        @Override\n+        public String toString() {\n+            return \"%s, offset=%s, length=%s, initialValue=%s\".formatted(\n+                    Arrays.toString(array), offset, length, initialValue);\n+        }\n+    }\n+\n+    private static int referenceHashCode(int[] a,\n+                                         int offset,\n+                                         int length,\n+                                         int initialValue) {\n+        int result = initialValue;\n+        for (int i = offset; i < offset + length; i++)\n+            result = 31 * result + a[i];\n+        return result;\n+    }\n+}\n","filename":"test\/jdk\/jdk\/internal\/util\/ArraysSupport\/HashCode.java","additions":119,"deletions":0,"binary":false,"changes":119,"status":"added"}]}