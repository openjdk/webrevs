{"files":[{"patch":"@@ -42,3 +42,0 @@\n-import org.junit.jupiter.api.condition.DisabledOnOs;\n-import org.junit.jupiter.api.condition.OS;\n-import org.junit.jupiter.api.io.CleanupMode;\n@@ -58,0 +55,1 @@\n+import java.net.http.HttpRequest.BodyPublishers;\n@@ -79,1 +77,0 @@\n-import static java.net.http.HttpRequest.BodyPublishers.ofFileChannel;\n@@ -194,1 +191,1 @@\n-                } catch (Exception exception) {\n+                } catch (Throwable exception) {\n@@ -285,1 +282,1 @@\n-        assertThrows(NullPointerException.class, () -> ofFileChannel(null, 0, 1));\n+        assertThrows(NullPointerException.class, () -> BodyPublishers.ofFileChannel(null, 0, 1));\n@@ -296,1 +293,1 @@\n-    void testIllegalOffset(\n+    void testIllegalOffsetOrLength(\n@@ -300,1 +297,1 @@\n-            @TempDir(cleanup = CleanupMode.ON_SUCCESS) Path tempDir) throws Exception {\n+            @TempDir Path tempDir) throws Exception {\n@@ -304,1 +301,1 @@\n-                        () -> ofFileChannel(fileChannel, fileChannelOffset, fileChannelLength)));\n+                        () -> BodyPublishers.ofFileChannel(fileChannel, fileChannelOffset, fileChannelLength)));\n@@ -307,0 +304,7 @@\n+    \/**\n+     * Stresses corner cases in {@linkplain\n+     * BodyPublishers#ofFileChannel(FileChannel, long, long) the file channel\n+     * publisher}, which uses a {@linkplain #DEFAULT_BUFFER_SIZE fixed size}\n+     * buffer to read files, by providing sub-ranges and files that are\n+     * <em>smaller<\/em> than the buffer size.\n+     *\/\n@@ -309,3 +313,1 @@\n-    void testContentLessThanBufferSize(\n-            ServerRequestPair pair,\n-            @TempDir(cleanup = CleanupMode.ON_SUCCESS) Path tempDir) throws Exception {\n+    void testContentLessThanBufferSize(ServerRequestPair pair, @TempDir Path tempDir) throws Exception {\n@@ -313,0 +315,1 @@\n+        \/\/ Use a file of length smaller than the default buffer size\n@@ -316,0 +319,1 @@\n+        \/\/ Publish the `[0, fileLength)` sub-range\n@@ -320,0 +324,1 @@\n+        \/\/ Publish the `[1, fileLength)` sub-range to stress the inclusion of EOF\n@@ -332,0 +337,1 @@\n+        \/\/ Publish the `[1, fileLength - 1)` sub-range to stress the exclusion of EOF\n@@ -346,0 +352,7 @@\n+    \/**\n+     * Stresses corner cases in {@linkplain\n+     * BodyPublishers#ofFileChannel(FileChannel, long, long) the file channel\n+     * publisher}, which uses a {@linkplain #DEFAULT_BUFFER_SIZE fixed size}\n+     * buffer to read files, by providing sub-ranges and files that are\n+     * <em>bigger<\/em> than the buffer size.\n+     *\/\n@@ -348,3 +361,1 @@\n-    void testContentMoreThanBufferSize(\n-            ServerRequestPair pair,\n-            @TempDir(cleanup = CleanupMode.ON_SUCCESS) Path tempDir) throws Exception {\n+    void testContentMoreThanBufferSize(ServerRequestPair pair, @TempDir Path tempDir) throws Exception {\n@@ -352,0 +363,3 @@\n+        \/\/ Use a file of length that is\n+        \/\/ 1. greater than the default buffer size\n+        \/\/ 2. *not* a multitude of the buffer size\n@@ -354,0 +368,1 @@\n+        \/\/ Publish the `[0, fileLength)` sub-range\n@@ -358,0 +373,3 @@\n+        \/\/ Publish the `[1, fileLength)` sub-range such that\n+        \/\/ - EOF is included\n+        \/\/ - the total length is a multitude of the buffer size\n@@ -370,0 +388,3 @@\n+        \/\/ Publish the `[1, fileLength)` sub-range such that\n+        \/\/ - EOF is included\n+        \/\/ - the total length is *not* a multitude of the buffer size\n@@ -382,0 +403,3 @@\n+        \/\/ Publish the `[1, fileLength)` sub-range such that\n+        \/\/ - EOF is *not* included\n+        \/\/ - the total length is a multitude of the buffer size\n@@ -394,0 +418,3 @@\n+        \/\/ Publish the `[1, fileLength)` sub-range such that\n+        \/\/ - EOF is *not* included\n+        \/\/ - the total length is *not* a multitude of the buffer size\n@@ -439,1 +466,1 @@\n-                    .POST(ofFileChannel(fileChannel, fileChannelOffset, fileChannelLength))\n+                    .POST(BodyPublishers.ofFileChannel(fileChannel, fileChannelOffset, fileChannelLength))\n@@ -477,4 +504,1 @@\n-    void testChannelCloseDuringPublisherRead(\n-            ServerRequestPair pair,\n-            @TempDir(cleanup = CleanupMode.ON_SUCCESS) Path tempDir)\n-            throws Exception {\n+    void testChannelCloseDuringPublisherRead(ServerRequestPair pair, @TempDir Path tempDir) throws Exception {\n@@ -494,1 +518,1 @@\n-                        .POST(ofFileChannel(fileChannel, 0, fileLength))\n+                        .POST(BodyPublishers.ofFileChannel(fileChannel, 0, fileLength))\n@@ -512,3 +536,3 @@\n-            Exception requestFailure = assertThrows(ExecutionException.class, () -> responseFutureRef.get().get());\n-            assertInstanceOf(UncheckedIOException.class, requestFailure.getCause());\n-            assertInstanceOf(ClosedChannelException.class, requestFailure.getCause().getCause());\n+            Exception requestFailure0 = assertThrows(ExecutionException.class, () -> responseFutureRef.get().get());\n+            Exception requestFailure1 = assertInstanceOf(UncheckedIOException.class, requestFailure0.getCause());\n+            assertInstanceOf(ClosedChannelException.class, requestFailure1.getCause());\n@@ -526,7 +550,1 @@\n-    \/\/ On Windows, modification while reading is not possible.\n-    \/\/ Recall the infamous `The process cannot access the file because it is being used by another process`.\n-    @DisabledOnOs(OS.WINDOWS)\n-    void testFileModificationDuringPublisherRead(\n-            ServerRequestPair pair,\n-            @TempDir(cleanup = CleanupMode.ON_SUCCESS) Path tempDir)\n-            throws Exception {\n+    void testFileModificationDuringPublisherRead(ServerRequestPair pair, @TempDir Path tempDir) throws Exception {\n@@ -546,1 +564,1 @@\n-                        .POST(ofFileChannel(fileChannel, 0, fileLength))\n+                        .POST(BodyPublishers.ofFileChannel(fileChannel, 0, fileLength))\n@@ -564,2 +582,4 @@\n-                Exception requestFailure = assertThrows(ExecutionException.class, responseFuture::get);\n-                String requestFailureMessage = requestFailure.getMessage();\n+                Exception requestFailure0 = assertThrows(ExecutionException.class, responseFuture::get);\n+                Exception requestFailure1 = assertInstanceOf(UncheckedIOException.class, requestFailure0.getCause());\n+                Exception requestFailure2 = assertInstanceOf(IOException.class, requestFailure1.getCause());\n+                String requestFailure2Message = requestFailure2.getMessage();\n@@ -567,2 +587,2 @@\n-                        requestFailureMessage.contains(\"Unexpected EOF\"),\n-                        \"unexpected message: \" + requestFailureMessage);\n+                        requestFailure2Message.contains(\"Unexpected EOF\"),\n+                        \"unexpected message: \" + requestFailure2Message);\n@@ -591,4 +611,1 @@\n-    void testSlicedUpload(\n-            ServerRequestPair pair,\n-            @TempDir(cleanup = CleanupMode.ON_SUCCESS) Path tempDir)\n-            throws Exception {\n+    void testSlicedUpload(ServerRequestPair pair, @TempDir Path tempDir) throws Exception {\n@@ -613,1 +630,1 @@\n-                        .POST(ofFileChannel(fileChannel, sliceIndex * sliceLength, sliceLength))\n+                        .POST(BodyPublishers.ofFileChannel(fileChannel, sliceIndex * sliceLength, sliceLength))\n","filename":"test\/jdk\/java\/net\/httpclient\/FileChannelPublisherTest.java","additions":58,"deletions":41,"binary":false,"changes":99,"status":"modified"}]}