{"files":[{"patch":"@@ -728,5 +728,2 @@\n-         * The {@linkplain FileChannel file channel} will be read using\n-         * {@link FileChannel#read(ByteBuffer, long) FileChannel.read(ByteBuffer buffer, long position)},\n-         * which does not modify the channel's position. Thus, the same file\n-         * channel may be shared between several publishers passed to\n-         * concurrent requests.\n+         * This method and the returned {@code BodyPublisher} do not modify the\n+         * {@code channel}'s position.\n@@ -734,3 +731,11 @@\n-         * The file channel will not be closed upon completion. The caller is\n-         * expected to manage the life cycle of the channel, and close it\n-         * appropriately when not needed anymore.\n+         * This method does not close the {@code channel}. The caller is\n+         * expected to close the {@code channel} when no longer needed.\n+         *\n+         * @apiNote\n+         * This method can be used to either publish just a portion of a file's\n+         * content as the request body or to publish different portions of the\n+         * file's content concurrently. The typical approach to concurrently\n+         * publish different portions of a file's content is to create an\n+         * instance of {@link FileChannel} and then create multiple {@code\n+         * HttpRequest}s each of which use a {@code ofFileChannel\n+         * BodyPublisher} with a different non-overlapping offset and length.\n@@ -747,2 +752,2 @@\n-         * @throws IOException if the size of the file referred by the provided\n-         * channel cannot be read while verifying the specified byte range\n+         * @throws IOException if the {@linkplain FileChannel#size() channel's\n+         * size} cannot be determined or the {@code channel} is closed\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpRequest.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"}]}