{"files":[{"patch":"@@ -29,0 +29,1 @@\n+import java.io.IOException;\n@@ -742,2 +743,10 @@\n-         * found to be {@linkplain Objects.checkFromIndexSize(long, long, long) out of bounds}\n-         * compared with the size of the file referred by the channel\n+         * found to be {@linkplain Objects#checkFromIndexSize(long, long, long)\n+         * out of bounds} compared with the size of the file referred by the\n+         * channel\n+         *\n+         * @throws IOException if the size of the file referred by the provided\n+         * channel cannot be read while verifying the specified byte range\n+         *\n+         * @throws NullPointerException if {@code channel} is null\n+         *\n+         * @since 26\n@@ -745,1 +754,1 @@\n-        public static BodyPublisher ofFileChannel(FileChannel channel, long offset, long length) {\n+        public static BodyPublisher ofFileChannel(FileChannel channel, long offset, long length) throws IOException {\n","filename":"src\/java.net.http\/share\/classes\/java\/net\/http\/HttpRequest.java","additions":12,"deletions":3,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -430,1 +430,1 @@\n-        public FileChannelPublisher(FileChannel channel, long offset, long length) {\n+        public FileChannelPublisher(FileChannel channel, long offset, long length) throws IOException {\n@@ -432,1 +432,1 @@\n-            long fileSize = fileSize(channel);\n+            long fileSize = channel.size();\n@@ -438,8 +438,0 @@\n-        private static long fileSize(FileChannel channel) {\n-            try {\n-                return channel.size();\n-            } catch (IOException ioe) {\n-                throw new UncheckedIOException(ioe);\n-            }\n-        }\n-\n@@ -476,1 +468,1 @@\n-        public synchronized boolean hasNext() {\n+        public boolean hasNext() {\n@@ -481,1 +473,1 @@\n-        public synchronized ByteBuffer next() {\n+        public ByteBuffer next() {\n@@ -491,2 +483,1 @@\n-                    \/\/ We *must* throw to signal that the request needs to be cancelled.\n-                    \/\/ Otherwise, the server will continue waiting data.\n+                    \/\/ Throw to signal that the request needs to be cancelled\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/RequestPublishers.java","additions":5,"deletions":14,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -372,1 +372,1 @@\n-     * {@return a new {@link ByteBuffer} instance of configured capacity for the HTTP Client}\n+     * {@return a new {@link ByteBuffer} instance of {@link #BUFSIZE} capacity}\n@@ -384,1 +384,1 @@\n-     * @throws IllegalArgumentException if {@code capacity < 0}\n+     * @throws IllegalArgumentException if {@code maxCapacity < 0}\n","filename":"src\/java.net.http\/share\/classes\/jdk\/internal\/net\/http\/common\/Utils.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}