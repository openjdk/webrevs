{"files":[{"patch":"@@ -74,1 +74,0 @@\n-import java.util.function.Consumer;\n@@ -498,4 +497,2 @@\n-     * @see #testChannelCloseDuringPublisherReadAsync(ServerRequestPair, Path)\n-     * @see #testChannelCloseDuringPublisherReadSync(ServerRequestPair, Path)\n-     * @see #testFileModificationDuringPublisherReadAsync(ServerRequestPair, Path)\n-     * @see #testFileModificationDuringPublisherReadSync(ServerRequestPair, Path)\n+     * @see #testChannelCloseDuringPublisherRead(ServerRequestPair, Path)\n+     * @see #testFileModificationDuringPublisherRead(ServerRequestPair, Path)\n@@ -507,26 +504,1 @@\n-    void testChannelCloseDuringPublisherReadAsync(ServerRequestPair pair, @TempDir Path tempDir) throws Exception {\n-        testChannelCloseDuringPublisherRead(pair, tempDir, Requestor.ASYNC, responseFuture -> {\n-            Exception requestFailure0 = assertThrows(ExecutionException.class, responseFuture::get);\n-            Exception requestFailure1 = assertInstanceOf(UncheckedIOException.class, requestFailure0.getCause());\n-            assertInstanceOf(ClosedChannelException.class, requestFailure1.getCause());\n-        });\n-    }\n-\n-    @ParameterizedTest\n-    @MethodSource(\"serverRequestPairs\")\n-    void testChannelCloseDuringPublisherReadSync(ServerRequestPair pair, @TempDir Path tempDir) throws Exception {\n-        testChannelCloseDuringPublisherRead(pair, tempDir, Requestor.SYNC, responseFuture -> {\n-            Exception requestFailure0 = assertThrows(ExecutionException.class, responseFuture::get);\n-            Exception requestFailure1 = assertInstanceOf(RuntimeException.class, requestFailure0.getCause());\n-            Exception requestFailure2 = assertInstanceOf(IOException.class, requestFailure1.getCause());\n-            Exception requestFailure3 = assertInstanceOf(UncheckedIOException.class, requestFailure2.getCause());\n-            assertInstanceOf(ClosedChannelException.class, requestFailure3.getCause());\n-        });\n-    }\n-\n-    private static void testChannelCloseDuringPublisherRead(\n-            ServerRequestPair pair,\n-            Path tempDir,\n-            \/\/ Receiving an explicit requestor to cover exceptions thrown by both `send()` and `sendAsync()`\n-            Requestor requestor,\n-            Consumer<Future<HttpResponse<Void>>> responseVerifier) throws Exception {\n+    void testChannelCloseDuringPublisherRead(ServerRequestPair pair, @TempDir Path tempDir) throws Exception {\n@@ -548,1 +520,1 @@\n-                responseFutureRef.set(requestor.request(request, discarding()));\n+                responseFutureRef.set(CLIENT.sendAsync(request, discarding()));\n@@ -564,1 +536,3 @@\n-            responseVerifier.accept(responseFutureRef.get());\n+            Exception requestFailure0 = assertThrows(ExecutionException.class, () -> responseFutureRef.get().get());\n+            Exception requestFailure1 = assertInstanceOf(UncheckedIOException.class, requestFailure0.getCause());\n+            assertInstanceOf(ClosedChannelException.class, requestFailure1.getCause());\n@@ -576,34 +550,1 @@\n-    void testFileModificationDuringPublisherReadAsync(ServerRequestPair pair, @TempDir Path tempDir) throws Exception {\n-        testFileModificationDuringPublisherRead(pair, tempDir, Requestor.ASYNC, responseFuture -> {\n-            Exception requestFailure0 = assertThrows(ExecutionException.class, responseFuture::get);\n-            Exception requestFailure1 = assertInstanceOf(UncheckedIOException.class, requestFailure0.getCause());\n-            Exception requestFailure2 = assertInstanceOf(IOException.class, requestFailure1.getCause());\n-            String requestFailure2Message = requestFailure2.getMessage();\n-            assertTrue(\n-                    requestFailure2Message.contains(\"Unexpected EOF\"),\n-                    \"unexpected message: \" + requestFailure2Message);\n-        });\n-    }\n-\n-    @ParameterizedTest\n-    @MethodSource(\"serverRequestPairs\")\n-    void testFileModificationDuringPublisherReadSync(ServerRequestPair pair, @TempDir Path tempDir) throws Exception {\n-        testFileModificationDuringPublisherRead(pair, tempDir, Requestor.SYNC, responseFuture -> {\n-            Exception requestFailure0 = assertThrows(ExecutionException.class, responseFuture::get);\n-            Exception requestFailure1 = assertInstanceOf(RuntimeException.class, requestFailure0.getCause());\n-            Exception requestFailure2 = assertInstanceOf(IOException.class, requestFailure1.getCause());\n-            Exception requestFailure3 = assertInstanceOf(UncheckedIOException.class, requestFailure2.getCause());\n-            Exception requestFailure4 = assertInstanceOf(IOException.class, requestFailure3.getCause());\n-            String requestFailure4Message = requestFailure4.getMessage();\n-            assertTrue(\n-                    requestFailure4Message.contains(\"Unexpected EOF\"),\n-                    \"unexpected message: \" + requestFailure4Message);\n-        });\n-    }\n-\n-    private static void testFileModificationDuringPublisherRead(\n-            ServerRequestPair pair,\n-            Path tempDir,\n-            \/\/ Receiving an explicit requestor to cover exceptions thrown by both `send()` and `sendAsync()`\n-            Requestor requestor,\n-            Consumer<Future<HttpResponse<Void>>> responseVerifier) throws Exception {\n+    void testFileModificationDuringPublisherRead(ServerRequestPair pair, @TempDir Path tempDir) throws Exception {\n@@ -625,1 +566,1 @@\n-                Future<HttpResponse<Void>> responseFuture = requestor.request(request, discarding());\n+                Future<HttpResponse<Void>> responseFuture = CLIENT.sendAsync(request, discarding());\n@@ -641,1 +582,7 @@\n-                responseVerifier.accept(responseFuture);\n+                Exception requestFailure0 = assertThrows(ExecutionException.class, responseFuture::get);\n+                Exception requestFailure1 = assertInstanceOf(UncheckedIOException.class, requestFailure0.getCause());\n+                Exception requestFailure2 = assertInstanceOf(IOException.class, requestFailure1.getCause());\n+                String requestFailure2Message = requestFailure2.getMessage();\n+                assertTrue(\n+                        requestFailure2Message.contains(\"Unexpected EOF\"),\n+                        \"unexpected message: \" + requestFailure2Message);\n@@ -763,27 +710,0 @@\n-    @FunctionalInterface\n-    private interface Requestor {\n-\n-        Requestor ASYNC = CLIENT::sendAsync;\n-\n-        Requestor SYNC = new Requestor() {\n-            @Override\n-            public <V> Future<HttpResponse<V>> request(\n-                    HttpRequest request,\n-                    HttpResponse.BodyHandler<V> responseHandler) {\n-                return EXECUTOR.submit(() -> {\n-                    try {\n-                        return CLIENT.send(request, responseHandler);\n-                    } catch (Throwable t) {\n-                        if (t instanceof InterruptedException) {\n-                            Thread.currentThread().interrupt();     \/\/ Restore the interrupt\n-                        }\n-                        throw new RuntimeException(t);\n-                    }\n-                });\n-            }\n-        };\n-\n-        <V> Future<HttpResponse<V>> request(HttpRequest request, HttpResponse.BodyHandler<V> responseHandler);\n-\n-    }\n-\n","filename":"test\/jdk\/java\/net\/httpclient\/FileChannelPublisherTest.java","additions":16,"deletions":96,"binary":false,"changes":112,"status":"modified"}]}