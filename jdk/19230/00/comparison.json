{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -240,0 +240,4 @@\n+                    if (startPc > codeLength) {\n+                        throw new IllegalArgumentException(String.format(\"Line number out of range; start_pc=%d, codeLength=%d\",\n+                                                             startPc, codeLength));\n+                    }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/CodeImpl.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8320360 8330684 8331320 8331655\n+ * @bug 8320360 8330684 8331320 8331655 8331940\n@@ -38,0 +38,2 @@\n+import java.lang.classfile.attribute.LineNumberInfo;\n+import java.lang.classfile.attribute.LineNumberTableAttribute;\n@@ -40,0 +42,2 @@\n+import java.util.List;\n+import jdk.internal.classfile.impl.DirectCodeBuilder;\n@@ -164,0 +168,10 @@\n+\n+    @Test\n+    void testLineNumberOutOfBounds() {\n+        assertThrows(IllegalArgumentException.class, () ->\n+                ClassFile.of().parse(ClassFile.of().build(ClassDesc.of(\"LineNumberClass\"), cb -> cb.withMethodBody(\n+                \"lineNumberMethod\", MethodTypeDesc.of(ConstantDescs.CD_void), 0, cob -> ((DirectCodeBuilder)cob\n+                        .return_())\n+                        .writeAttribute(LineNumberTableAttribute.of(List.of(LineNumberInfo.of(500, 0))))\n+                ))).methods().get(0).code().get().elementList());\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"}]}