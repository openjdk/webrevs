{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+ * @requires vm.flagless\n@@ -29,1 +30,1 @@\n- * @run main\/othervm -Djava.security.manager=allow OpenLeak\n+ * @run junit\/othervm OpenLeak\n@@ -32,0 +33,2 @@\n+import java.io.IOException;\n+import java.net.ConnectException;\n@@ -34,0 +37,1 @@\n+import java.net.SocketAddress;\n@@ -35,0 +39,10 @@\n+import java.nio.channels.UnresolvedAddressException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n@@ -38,3 +52,9 @@\n-    public static void main(String[] args) throws Exception {\n-        InetAddress lh = InetAddress.getLocalHost();\n-        InetSocketAddress isa = new InetSocketAddress(lh, 12345);\n+    static final String OS_NAME = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n+    static final boolean IS_WINDOWS_2016 = OS_NAME.contains(\"windows\") && OS_NAME.contains(\"2016\");\n+\n+    \/\/ On Windows Server 2016 trying to connect to port 47 consumes the\n+    \/\/ whole connect timeout - which makes the test fail in timeout.\n+    \/\/ We skip this part of the test on Windows Server 2016\n+    static final boolean TEST_WITH_RESERVED_PORT = !IS_WINDOWS_2016;\n+\n+    private static final int MAX_LOOP = 250000;\n@@ -42,6 +62,22 @@\n-        System.setSecurityManager( new SecurityManager() );\n-        for (int i=0; i<100000; i++) {\n-            try {\n-                SocketChannel.open(isa);\n-                throw new RuntimeException(\"This should not happen\");\n-            } catch (SecurityException x) { }\n+\n+    \/\/ Try to find a suitable port to provoke a \"Connection Refused\"\n+    \/\/ error.\n+    private static InetSocketAddress findSuitableRefusedAddress(InetSocketAddress isa)\n+            throws IOException {\n+        if (!TEST_WITH_RESERVED_PORT) return null;\n+        var addr = isa.getAddress();\n+        try (SocketChannel sc1 = SocketChannel.open(isa)) {\n+            \/\/ If we manage to connect, let's try to use some other\n+            \/\/ port.\n+            \/\/ port 51 is reserved too - there should be nothing there...\n+            isa = new InetSocketAddress(addr, 51);\n+            try (SocketChannel sc2 = SocketChannel.open(isa)) {\n+            }\n+            \/\/ OK, last attempt...\n+            \/\/ port 61 is reserved too - there should be nothing there...\n+            isa = new InetSocketAddress(addr, 61);\n+            try (SocketChannel sc3 = SocketChannel.open(isa)) {\n+            }\n+            System.err.println(\"Could not find a suitable port\");\n+            return null;\n+        } catch (ConnectException x) {\n@@ -49,0 +85,7 @@\n+        return isa;\n+    }\n+\n+    private static InetSocketAddress createUnresolved(InetSocketAddress isa, InetSocketAddress def) {\n+       var sa = isa == null ? def : isa;\n+       return InetSocketAddress.createUnresolved(sa.getHostString(), sa.getPort());\n+    }\n@@ -50,0 +93,39 @@\n+\n+    \/\/ Builds a list of test cases\n+    static List<Object[]> testCases() throws Exception {\n+        InetAddress lo = InetAddress.getLoopbackAddress();\n+\n+        \/\/ Try to find a suitable port that will cause a\n+        \/\/ Connection Refused exception\n+        \/\/ port 47 is reserved - there should be nothing there...\n+        InetSocketAddress def = new InetSocketAddress(lo, 47);\n+        InetSocketAddress isa = findSuitableRefusedAddress(def);\n+        InetSocketAddress sa  = createUnresolved(isa, def);\n+\n+        final List<Object[]> cases = new ArrayList<>();\n+        cases.add(new Object[]{sa, UnresolvedAddressException.class});\n+        if (isa != null) {\n+            cases.add(new Object[]{isa, ConnectException.class});\n+        }\n+        return cases;\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"testCases\")\n+    public void test(SocketAddress sa, Class<? extends Throwable> expectedException) throws Exception {\n+        System.err.printf(\"%nExpecting %s for %s%n\", expectedException, sa);\n+\n+        int i = 0;\n+        try {\n+            for (i = 0; i < MAX_LOOP; i++) {\n+                Throwable x =\n+                        assertThrows(expectedException, () -> SocketChannel.open(sa));\n+                if (i < 5 || i >= MAX_LOOP - 5) {\n+                    \/\/ print a message for the first five and last 5 exceptions\n+                    System.err.println(x);\n+                }\n+            }\n+        } catch (Throwable t) {\n+            System.err.println(\"Failed at \" + i + \" with \" + t);\n+            throw t;\n+        }\n","filename":"test\/jdk\/java\/nio\/channels\/SocketChannel\/OpenLeak.java","additions":93,"deletions":11,"binary":false,"changes":104,"status":"modified"}]}