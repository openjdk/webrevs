{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n- * @key headful\n@@ -31,3 +30,4 @@\n-import java.awt.Toolkit;\n-import java.awt.event.WindowAdapter;\n-import java.awt.event.WindowEvent;\n+import java.awt.Color;\n+import java.awt.Graphics;\n+import java.awt.image.BufferedImage;\n+import java.io.File;\n@@ -35,2 +35,4 @@\n-import java.net.MalformedURLException;\n-import javax.swing.JDialog;\n+import java.util.Objects;\n+import java.util.stream.IntStream;\n+\n+import javax.imageio.ImageIO;\n@@ -38,11 +40,7 @@\n-import javax.swing.JFrame;\n-import javax.swing.JScrollPane;\n-import javax.swing.SwingUtilities;\n-import javax.swing.event.HyperlinkEvent;\n-import javax.swing.event.HyperlinkListener;\n-import javax.swing.text.html.HTMLFrameHyperlinkEvent;\n-import javax.swing.text.html.HTMLDocument;\n-import java.awt.Color;\n-import java.awt.Insets;\n-import java.awt.Point;\n-import java.awt.Robot;\n+import javax.swing.text.StyleConstants;\n+import javax.swing.text.View;\n+\n+import static java.awt.image.BufferedImage.TYPE_INT_RGB;\n+import static java.lang.Integer.toHexString;\n+\n+public final class TestBrowserBGColor {\n@@ -50,1 +48,6 @@\n-public class TestBrowserBGColor extends JFrame implements HyperlinkListener {\n+    private static final String HTML_DOC =\n+            \"<!DOCTYPE html>\"\n+            + \"<html><head>\"\n+            + \"<style> body { background: #FFF; } <\/style>\"\n+            + \"<title>Title<\/title><\/head>\"\n+            + \"<body> <\/body> <\/html>\";\n@@ -52,2 +55,1 @@\n-    private static TestBrowserBGColor b;\n-    private static JEditorPane browser;\n+    private static final int SIZE = 300;\n@@ -56,17 +58,3 @@\n-        Robot r = new Robot();\n-        SwingUtilities.invokeAndWait(() -> {\n-            try {\n-                b = new TestBrowserBGColor();\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-            b.setSize(Toolkit.getDefaultToolkit().getScreenSize());\n-            b.setVisible(true);\n-            b.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);\n-            b.addWindowListener(new WindowAdapter() {\n-                public void windowClosing(WindowEvent e) {\n-                    b.dispose();\n-                    b = null;\n-                }\n-            });\n-        });\n+        JEditorPane browser = new JEditorPane(\"text\/html\", HTML_DOC);\n+        browser.setEditable(false);\n+        browser.setSize(SIZE, SIZE);\n@@ -74,2 +62,4 @@\n-        r.waitForIdle();\n-        r.delay(500);\n+        BufferedImage image = new BufferedImage(SIZE, SIZE, TYPE_INT_RGB);\n+        Graphics g = image.getGraphics();\n+        browser.paint(g);\n+        g.dispose();\n@@ -77,10 +67,11 @@\n-        SwingUtilities.invokeAndWait(() -> {\n-            Insets insets = browser.getInsets();\n-            Point loc = browser.getLocationOnScreen();\n-            Color c = r.getPixelColor( loc.x + insets.left+100,\n-                                  loc.y + insets.top + 100);\n-            b.dispose();\n-            if (!c.equals(Color.WHITE)) {\n-                throw new RuntimeException(\"webpage background color wrong\");\n-            }\n-        });\n+        Color bgColor = StyleConstants.getBackground(\n+                getBodyView(browser.getUI()\n+                                   .getRootView(browser))\n+                .getAttributes());\n+        if (!bgColor.equals(Color.WHITE)) {\n+            saveImage(image);\n+            throw new RuntimeException(\"Wrong background color: \"\n+                                       + toHexString(bgColor.getRGB())\n+                                       + \" vs \"\n+                                       + toHexString(Color.WHITE.getRGB()));\n+        }\n@@ -89,0 +80,5 @@\n+    private static View getBodyView(final View view) {\n+        if (\"body\".equals(view.getElement()\n+                              .getName())) {\n+            return view;\n+        }\n@@ -90,8 +86,6 @@\n-    String htmlDoc = \" <!DOCTYPE html> <html><style> body { background: #FFF; } <\/style> <head> <title>Title<\/title> <\/head> <body> <\/body> <\/html>\";\n-\n-    public TestBrowserBGColor() throws IOException, MalformedURLException {\n-        browser = new JEditorPane(\"text\/html\", htmlDoc);\n-        browser.setEditable(false);\n-        browser.addHyperlinkListener(this);\n-        JScrollPane scroll = new JScrollPane(browser);\n-        getContentPane().add(scroll);\n+        return IntStream.range(0, view.getViewCount())\n+                        .mapToObj(view::getView)\n+                        .map(TestBrowserBGColor::getBodyView)\n+                        .filter(Objects::nonNull)\n+                        .findFirst()\n+                        .orElse(null);\n@@ -100,14 +94,5 @@\n-    public void hyperlinkUpdate(final HyperlinkEvent e) {\n-        if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {\n-            JEditorPane pane = (JEditorPane) e.getSource();\n-            if (e instanceof HTMLFrameHyperlinkEvent) {\n-                HTMLFrameHyperlinkEvent evt = (HTMLFrameHyperlinkEvent) e;\n-                HTMLDocument doc = (HTMLDocument) pane.getDocument();\n-                doc.processHTMLFrameHyperlinkEvent(evt);\n-            } else {\n-                try {\n-                    pane.setPage(e.getURL());\n-                } catch (Throwable t) {\n-                    t.printStackTrace();\n-                }\n-            }\n+    private static void saveImage(BufferedImage image) {\n+        try {\n+            ImageIO.write(image, \"png\",\n+                          new File(\"html-rendering.png\"));\n+        } catch (IOException ignored) {\n","filename":"test\/jdk\/javax\/swing\/JEditorPane\/TestBrowserBGColor.java","additions":57,"deletions":72,"binary":false,"changes":129,"status":"modified"}]}