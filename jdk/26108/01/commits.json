[{"commit":{"message":"remove the unused flag(GenerateSynchronizationCode)"},"files":[{"filename":".gitpod.yml"},{"filename":"src\/hotspot\/share\/c1\/c1_LIRGenerator.cpp"},{"filename":"src\/hotspot\/share\/opto\/callnode.cpp"},{"filename":"src\/hotspot\/share\/opto\/graphKit.cpp"},{"filename":"src\/hotspot\/share\/opto\/output.cpp"},{"filename":"src\/hotspot\/share\/opto\/parse1.cpp"},{"filename":"src\/hotspot\/share\/runtime\/globals.hpp"}],"sha":"972f324b7283496c9c515acc80339cc88177ceda"},{"commit":{"message":"8358568: C2 compilation hits \"must have a monitor\" assert with -XX:-GenerateSynchronizationCode\n\nThis PR fixes JDK-8358568, a JVM crash triggered when running with -XX:-GenerateSynchronizationCode\r\n\r\nProblem：\r\nWhen synchronization code generation is disabled by -XX:-GenerateSynchronizationCode, the compiler’s do_monitor_exit() method still tries to access monitor objects without checking if any monitors exist.This causes an assertion failure and JVM crash.\r\n\r\nRoot Cause：\r\nParse::do_monitor_exit() calls shared_unlock() using monitor info unconditionally,but with GenerateSynchronizationCode disabled, no monitor info is available, leading to invalid access.\r\n\r\nFix\r\nAdd a check in do_monitor_exit() to skip monitor unlocking if GenerateSynchronizationCode is false, avoiding invalid monitor access and preventing the crash."},"files":[],"sha":"597b89fd94969c54c6a1728f511abb0f56f6a7b8"}]