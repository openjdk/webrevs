{"files":[{"patch":"@@ -298,1 +298,2 @@\n-            \"testFoldableXorDifferingLength\", \"testXorMax\"\n+            \"testFoldableXorDifferingLength\", \"testXorMax\",\n+            \"testFoldableRange\",\"testRandomLimits\"\n@@ -320,0 +321,2 @@\n+        Asserts.assertEQ(testRandomLimitsInterpreted(a, b), testRandomLimits(a, b));\n+        Asserts.assertEQ(true, testFoldableRange(a, b));\n@@ -357,0 +360,86 @@\n+\n+    private static final Range RANGE_1 = Range.generate(G.restricted(0, MAX_VALUE));\n+    private static final Range RANGE_2 = Range.generate(G.restricted(0, MAX_VALUE));\n+    private static final int UPPER_BOUND = Integer.max(0, Integer.highestOneBit(RANGE_1.hi() | RANGE_2.hi()) * 2 - 1);\n+\n+    private static final int LIMIT_1 = G.next();\n+    private static final int LIMIT_2 = G.next();\n+    private static final int LIMIT_3 = G.next();\n+    private static final int LIMIT_4 = G.next();\n+    private static final int LIMIT_5 = G.next();\n+    private static final int LIMIT_6 = G.next();\n+    private static final int LIMIT_7 = G.next();\n+    private static final int LIMIT_8 = G.next();\n+\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    public boolean testFoldableRange(int x, int y) {\n+        return (RANGE_1.clamp(x) ^ RANGE_2.clamp(y)) <= UPPER_BOUND;\n+    }\n+\n+    @Test\n+    public int testRandomLimits(int x, int y) {\n+        x = RANGE_1.clamp(x);\n+        y = RANGE_2.clamp(y);\n+\n+        int z = x ^ y;\n+        \/\/ This should now have a new range, possibly some [0, max]\n+        \/\/ Now let's test the range with some random if branches.\n+        int sum = 0;\n+        if (z < LIMIT_1) { sum += 1; }\n+        if (z < LIMIT_2) { sum += 2; }\n+        if (z < LIMIT_3) { sum += 4; }\n+        if (z < LIMIT_4) { sum += 8; }\n+        if (z < LIMIT_5) { sum += 16; }\n+        if (z < LIMIT_6) { sum += 32; }\n+        if (z < LIMIT_7) { sum += 64; }\n+        if (z < LIMIT_8) { sum += 128; }\n+\n+        return sum;\n+    }\n+\n+    @DontCompile\n+    private int testRandomLimitsInterpreted(int x,int y) {\n+        x = RANGE_1.clamp(x);\n+        y = RANGE_2.clamp(y);\n+\n+        int z = x ^ y;\n+        \/\/ This should now have a new range, possibly some [0, max]\n+        \/\/ Now let's test the range with some random if branches.\n+        int sum = 0;\n+        if (z < LIMIT_1) { sum += 1; }\n+        if (z < LIMIT_2) { sum += 2; }\n+        if (z < LIMIT_3) { sum += 4; }\n+        if (z < LIMIT_4) { sum += 8; }\n+        if (z < LIMIT_5) { sum += 16; }\n+        if (z < LIMIT_6) { sum += 32; }\n+        if (z < LIMIT_7) { sum += 64; }\n+        if (z < LIMIT_8) { sum += 128; }\n+\n+        return sum;\n+    }\n+\n+    record Range(int lo, int hi) {\n+        Range {\n+            if (lo > hi) {\n+                throw new IllegalArgumentException(\"lo > hi\");\n+            }\n+        }\n+\n+        int clamp(int v) {\n+            return Math.min(hi, Math.max(v, lo));\n+        }\n+\n+        static Range generate(Generator<Integer> g) {\n+            var a = g.next();\n+            var b = g.next();\n+            if (a > b) {\n+                var tmp = a;\n+                a = b;\n+                b = tmp;\n+            }\n+            return new Range(a, b);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorINodeIdealizationTests.java","additions":90,"deletions":1,"binary":false,"changes":91,"status":"modified"}]}