{"files":[{"patch":"@@ -981,13 +981,0 @@\n-  \/\/ result of xor can only have bits sets where any of the\n-  \/\/ inputs have bits set. lo can always become 0.\n-  const TypeInt* t1i = t1->is_int();\n-  const TypeInt* t2i = t2->is_int();\n-  if ((t1i->_lo >= 0) &&\n-      (t1i->_hi > 0)  &&\n-      (t2i->_lo >= 0) &&\n-      (t2i->_hi > 0)) {\n-    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-    const TypeInt* t1x = TypeInt::make(0, round_down_power_of_2(t1i->_hi) + (round_down_power_of_2(t1i->_hi) - 1), t1i->_widen);\n-    const TypeInt* t2x = TypeInt::make(0, round_down_power_of_2(t2i->_hi) + (round_down_power_of_2(t2i->_hi) - 1), t2i->_widen);\n-    return t1x->meet(t2x);\n-  }\n@@ -998,0 +985,1 @@\n+\n@@ -1007,4 +995,4 @@\n-  \/\/ Complementing a boolean?\n-  if( r0 == TypeInt::BOOL && ( r1 == TypeInt::ONE\n-                               || r1 == TypeInt::BOOL))\n-    return TypeInt::BOOL;\n+  if (r0->is_con() && r1->is_con()) {\n+    \/\/ Constant fold: (c1 ^ c2) -> c3\n+    return TypeInt::make( r0->get_con() ^ r1->get_con() );\n+  }\n@@ -1012,2 +1000,9 @@\n-  if( !r0->is_con() || !r1->is_con() ) \/\/ Not constants\n-    return TypeInt::INT;        \/\/ Any integer, but still no symbols.\n+  \/\/ At least one of the arguments is not constant\n+\n+  \/\/ Result of xor can only have bits sets where any of the\n+  \/\/ inputs have bits set. lo can always become 0.\n+\n+  if (r0->_lo >= 0 && r1->_lo >= 0) {\n+      jint max = calc_xor_max<jint, juint>(r0->_hi, r1->_hi);\n+      return TypeInt::make(0, max, MAX2(r0->_widen, r1->_widen));\n+  }\n@@ -1015,2 +1010,1 @@\n-  \/\/ Otherwise just XOR them bits.\n-  return TypeInt::make( r0->get_con() ^ r1->get_con() );\n+  return TypeInt::INT;\n@@ -1025,3 +1019,4 @@\n-  \/\/ If either input is not a constant, just return all integers.\n-  if( !r0->is_con() || !r1->is_con() )\n-    return TypeLong::LONG;      \/\/ Any integer, but still no symbols.\n+  if (r0->is_con() && r1->is_con()) {\n+    \/\/ Constant fold: (c1 ^ c2) -> c3\n+    return TypeLong::make( r0->get_con() ^ r1->get_con() );\n+  }\n@@ -1029,2 +1024,11 @@\n-  \/\/ Otherwise just OR them bits.\n-  return TypeLong::make( r0->get_con() ^ r1->get_con() );\n+  \/\/ At least one of the arguments is not constant\n+\n+  \/\/ Result of xor can only have bits sets where any of the\n+  \/\/ inputs have bits set. lo can always become 0.\n+\n+  if (r0->_lo >= 0 && r1->_lo >= 0) {\n+      julong max = calc_xor_max<jlong, julong>(r0->_hi, r1->_hi);\n+      return TypeLong::make(0, max, MAX2(r0->_widen, r1->_widen));\n+  }\n+\n+  return TypeLong::LONG;\n@@ -1033,0 +1037,1 @@\n+\n@@ -1066,13 +1071,1 @@\n-  \/\/ result of xor can only have bits sets where any of the\n-  \/\/ inputs have bits set. lo can always become 0.\n-  const TypeLong* t1l = t1->is_long();\n-  const TypeLong* t2l = t2->is_long();\n-  if ((t1l->_lo >= 0) &&\n-      (t1l->_hi > 0)  &&\n-      (t2l->_lo >= 0) &&\n-      (t2l->_hi > 0)) {\n-    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-    const TypeLong* t1x = TypeLong::make(0, round_down_power_of_2(t1l->_hi) + (round_down_power_of_2(t1l->_hi) - 1), t1l->_widen);\n-    const TypeLong* t2x = TypeLong::make(0, round_down_power_of_2(t2l->_hi) + (round_down_power_of_2(t2l->_hi) - 1), t2l->_widen);\n-    return t1x->meet(t2x);\n-  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":32,"deletions":39,"binary":false,"changes":71,"status":"modified"},{"patch":"@@ -256,0 +256,32 @@\n+template<class S, class U>\n+static S calc_xor_max(const S hi_0, const S hi_1) {\n+  assert(hi_0 >= 0, \"must be non-negative\");\n+  assert(hi_1 >= 0, \"must be non-negative\");\n+\n+  \/\/ x ^ y cannot have any bit set that is higher than both the highest bits set in x and y\n+  \/\/ x cannot have any bit set that is higher than the highest bit set in r0->_hi\n+  \/\/ y cannot have any bit set that is higher than the highest bit set in r1->_hi\n+\n+  \/\/ We want to find a value that has all 1 bits everywhere up to and including\n+  \/\/ the highest bits set in r0->_hi as well as r1->_hi. For this,we can take the next\n+  \/\/ power of 2 strictly greater than both hi values and subtract 1 from it.\n+\n+  \/\/ Example 1:\n+  \/\/ r0->_hi =  5 (0b0101)        r1->_hi=1 (0b0001)\n+  \/\/    (5|1)+1       = 0b0110\n+  \/\/    round_up_pow2 = 0b1000\n+  \/\/    -1            = 0b0111 = max\n+\n+  \/\/ Example 2 - this demonstrates need for the +1:\n+  \/\/ r0->_hi =  4 (0b0100)        r1->_hi=4 (0b0100)\n+  \/\/    (4|4)+1       = 0b0101\n+  \/\/    round_up_pow2 = 0b1000\n+  \/\/    -1            = 0b0111 = max\n+  \/\/ Without the +1, round_up_pow2 would be 0b0100, resulting in 0b0011 as max\n+\n+  \/\/ Note: cast to unsigned happens before +1 to avoid signed overflow, and\n+  \/\/ round_up is safe because high bit is unset (0 <= lo <= hi)\n+\n+  return round_up_power_of_2(U(hi_0 | hi_1) + 1) - 1 ;\n+}\n+\n@@ -433,0 +465,3 @@\n+template<class S, class U> S calc_xor_max(const S hi_0, const S hi_1);\n+\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.hpp","additions":35,"deletions":0,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,94 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"opto\/addnode.hpp\"\n+#include \"unittest.hpp\"\n+\n+jint calc_max(const jint hi_0, const jint hi_1) {\n+  return calc_xor_max<jint, juint>(hi_0, hi_1);\n+}\n+\n+jlong calc_max(const jlong hi_0, const jlong hi_1) {\n+  return calc_xor_max<jlong, julong>(hi_0, hi_1);\n+}\n+\n+template <class S>\n+void test_xor_bounds(S hi_0, S hi_1, S val_0, S val_1) {\n+\n+  \/\/ Skip out-of-bounds values for convenience\n+  if(val_0> hi_0 || val_0 < S(0) || val_1 > hi_1 || val_1< S(0)) {\n+    return;\n+  }\n+\n+  S v = val_0 ^ val_1;\n+  S max = calc_max(hi_0, hi_1);\n+  EXPECT_LE(v, max);\n+}\n+\n+template <class S>\n+void test_exhaustive_values(S hi_0, S hi_1){\n+  for(S val_0 = 0; val_0 <= hi_0; val_0++){\n+    for(S val_1 = val_0; val_1 <= hi_1; val_1++){\n+      test_xor_bounds(hi_0, hi_1, val_0, val_1);\n+    }\n+  }\n+}\n+\n+template <class S>\n+void test_sample_values(S hi_0, S hi_1){\n+\n+  for(S i=0; i<=3; i++){\n+    for(S j=0; j<=3; j++){\n+      \/\/ Some bit combinations near the low and high ends of the range\n+      test_xor_bounds(hi_0, hi_1, i, j);\n+      test_xor_bounds(hi_0, hi_1, hi_0-i, hi_1-j);\n+    }\n+  }\n+}\n+\n+template <class S, class F>\n+void test_in_ranges(S lo, S hi, F f){\n+  for(S hi_0 = lo; hi_0 <= hi; hi_0++){\n+    for(S hi_1 = hi_0; hi_1 <=hi; hi_1++){\n+      f(hi_0, hi_1);\n+    }\n+  }\n+}\n+\n+TEST_VM(opto, xor_max) {\n+  auto maxjint = jint(std::numeric_limits<jint>::max());\n+  auto maxjlong = jint(std::numeric_limits<jint>::max());\n+\n+  test_in_ranges<jint>(0, 15, test_exhaustive_values<jint>);\n+  test_in_ranges<jlong>(0, 15, test_exhaustive_values<jlong>);\n+\n+  test_in_ranges<jint>(maxjint - 1, maxjint, test_sample_values<jlong>);\n+  test_in_ranges<jlong>(maxjlong - 1, maxjlong, test_sample_values<jlong>);\n+\n+  auto top_pos_bit_int = jint(1) << 30;\n+  auto top_pos_bit_long = jlong(1) << 62;\n+\n+  test_in_ranges<jint>(top_pos_bit_int - 1, top_pos_bit_long, test_sample_values<jint>);\n+  test_in_ranges<jlong>(top_pos_bit_long - 1, top_pos_bit_long, test_sample_values<jlong>);\n+}\n","filename":"test\/hotspot\/gtest\/opto\/test_xor_node.cpp","additions":94,"deletions":0,"binary":false,"changes":94,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import compiler.lib.generators.*;\n@@ -36,0 +37,6 @@\n+    private static final RestrictableGenerator<Integer> G = Generators.G.ints();\n+    private static final int CONST_1 = G.next();\n+    private static final int CONST_2 = G.next();\n+\n+\n+\n@@ -41,5 +48,7 @@\n-                 \"test4\", \"test5\", \"test6\",\n-                 \"test7\", \"test8\", \"test9\",\n-                 \"test10\", \"test11\", \"test12\",\n-                 \"test13\", \"test14\", \"test15\",\n-                 \"test16\", \"test17\"})\n+            \"test4\", \"test5\", \"test6\",\n+            \"test7\", \"test8\", \"test9\",\n+            \"test10\", \"test11\", \"test12\",\n+            \"test13\", \"test14\", \"test15\",\n+            \"test16\", \"test17\",\n+            \"testConstXor\", \"testXorSelf\"\n+    })\n@@ -80,0 +89,2 @@\n+        Asserts.assertEQ(CONST_1 ^ CONST_2, testConstXor());\n+        Asserts.assertEQ(0, testXorSelf(a));\n@@ -82,0 +93,1 @@\n+\n@@ -220,0 +232,124 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (c1 ^ c2)  => c3 (constant folded)\n+    public int testConstXor() {\n+        return CONST_1 ^ CONST_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public int testXorSelf(int x) {\n+        return x ^ x;\n+    }\n+\n+    private static final boolean CONST_BOOL_1 = RunInfo.getRandom().nextBoolean();\n+    private static final boolean CONST_BOOL_2 = RunInfo.getRandom().nextBoolean();\n+\n+    @Run(test={\n+            \"testConstXorBool\", \"testXorSelfBool\"\n+    })\n+    public void runBooleanTests() {\n+        assertBooleanResult(true);\n+        assertBooleanResult(false);\n+    }\n+\n+    @DontCompile\n+    public void assertBooleanResult(boolean b){\n+        Asserts.assertEQ(CONST_BOOL_1 ^ CONST_BOOL_2, testConstXorBool());\n+        Asserts.assertEQ(false, testXorSelfBool(b));\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (c1 ^ c2)  => c3 (constant folded)\n+    public boolean testConstXorBool() {\n+        return CONST_BOOL_1 ^ CONST_BOOL_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public boolean testXorSelfBool(boolean x) {\n+        return x ^ x;\n+    }\n+\n+    private static final Range RANGE_1;\n+    private static final Range RANGE_2;\n+    private static final int XOR_MAX_OF_RANGES;\n+\n+    static {\n+        var r1 = RANGE_1 = Range.generate(G);\n+        var r2 = RANGE_2 = Range.generate(G);\n+        if (r1.lo() >= 0 && r2.lo() >= 0 && r1.hi() != 0 && r2.hi() != 0) {\n+            XOR_MAX_OF_RANGES = Integer.highestOneBit(r1.hi() | r2.hi() * 2) - 1;\n+        } else {\n+            XOR_MAX_OF_RANGES = Integer.MAX_VALUE;\n+        }\n+    }\n+\n+    @Run(test = {\n+            \"testFoldableXor\", \"testXorConstRange\"\n+    })\n+    public void runRangeTests() {\n+        var rand1 = G.restricted(RANGE_1.lo(), RANGE_1.hi());\n+        var rand2 = G.restricted(RANGE_2.lo(), RANGE_2.hi());\n+\n+        for (int i = 0; i < 100; i++) {\n+            checkXor(rand1.next(), rand2.next());\n+        }\n+        checkXor(RANGE_1.hi(), RANGE_2.hi());\n+        checkXor(RANGE_1.lo(), RANGE_2.lo());\n+    }\n+\n+    @DontCompile\n+    public void checkXor(int a, int b) {\n+        Asserts.assertEQ(true, testFoldableXor(a, b));\n+        Asserts.assertEQ(RANGE_1.clamp(a) ^ RANGE_2.clamp(b), testXorConstRange(a, b));\n+    }\n+\n+    @Test\n+    public int testXorConstRange(int x, int y) {\n+        x = RANGE_1.clamp(x);\n+        y = RANGE_2.clamp(y);\n+\n+        return x ^ y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    public boolean testFoldableXor(int x, int y) {\n+        x = RANGE_1.clamp(x);\n+        y = RANGE_2.clamp(y);\n+        var xor = x ^ y;\n+        return xor <= XOR_MAX_OF_RANGES;\n+    }\n+\n+    record Range(int lo, int hi) {\n+        Range {\n+            if (lo > hi) {\n+                throw new IllegalArgumentException(\"lo > hi\");\n+            }\n+        }\n+\n+        int clamp(int v) {\n+            return Math.min(hi, Math.max(v, lo));\n+        }\n+\n+        static Range generate(Generator<Integer> g) {\n+            var a = g.next();\n+            var b = g.next();\n+            if (a > b) {\n+                var tmp = a;\n+                a = b;\n+                b = tmp;\n+            }\n+            return new Range(a, b);\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorINodeIdealizationTests.java","additions":142,"deletions":6,"binary":false,"changes":148,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import compiler.lib.generators.*;\n@@ -36,0 +37,4 @@\n+    private static final RestrictableGenerator<Long> G = Generators.G.longs();\n+    private static final long CONST_1 = G.next();\n+    private static final long CONST_2 = G.next();\n+\n@@ -45,1 +50,3 @@\n-                 \"test16\", \"test17\"})\n+                 \"test16\", \"test17\",\n+                 \"testConstXor\", \"testXorSelf\",\n+    })\n@@ -47,0 +54,3 @@\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n@@ -52,3 +62,0 @@\n-        long min = Long.MIN_VALUE;\n-        long max = Long.MAX_VALUE;\n-\n@@ -80,0 +87,2 @@\n+        Asserts.assertEQ(CONST_1 ^ CONST_2  , testConstXor());\n+        Asserts.assertEQ(0L                  , testXorSelf(a));\n@@ -220,0 +229,16 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (c1 ^ c2)  => c3 (constant folded)\n+    public long testConstXor() {\n+        return CONST_1 ^ CONST_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public long testXorSelf(long x) {\n+        return x ^ x;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorLNodeIdealizationTests.java","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"}]}