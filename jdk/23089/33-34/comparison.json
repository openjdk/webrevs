{"files":[{"patch":"@@ -1052,0 +1052,1 @@\n+      \/\/ Combine [0, lo_1] ^ [0, hi_1] -> [0, max]\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import static java.lang.Integer.MAX_VALUE;\n+\n@@ -60,1 +62,1 @@\n-        int max = Integer.MAX_VALUE;\n+        int max = MAX_VALUE;\n@@ -294,1 +296,2 @@\n-            \"testFoldableXor\", \"testFoldableXorPow2\", \"testUnfoldableXorPow2\"\n+            \"testFoldableXor\", \"testFoldableXorPow2\", \"testUnfoldableXorPow2\",\n+            \"testFoldableXorDifferingLength\", \"testXorMax\"\n@@ -301,2 +304,2 @@\n-        for (a = 0; a < 16; a++) {\n-            for (b = a; b < 16; b++) {\n+        for (a = 0; a < 32; a++) {\n+            for (b = a; b < 32; b++) {\n@@ -304,0 +307,1 @@\n+                checkXor(MAX_VALUE, MAX_VALUE - b);\n@@ -313,0 +317,2 @@\n+        Asserts.assertEQ(true, testFoldableXorDifferingLength(a, b));\n+        Asserts.assertEQ((a & MAX_VALUE) ^ (b & 0b11), testXorMax(a, b));\n@@ -335,0 +341,15 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    public boolean testFoldableXorDifferingLength(int x, int y) {\n+        var xor = (x & 0b111) ^ (y & 0b11);\n+        return xor < 0b1000;\n+    }\n+\n+    @Test\n+    public int testXorMax(int x, int y) {\n+        return (x & MAX_VALUE) ^ (y & 0b11);\n+        \/\/ can't do the folding range check here since xor <= MAX_VALUE is\n+        \/\/ constant with or without the xor\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorINodeIdealizationTests.java","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -29,0 +29,2 @@\n+import static java.lang.Long.MAX_VALUE;\n+\n@@ -60,1 +62,1 @@\n-        long max = Long.MAX_VALUE;\n+        long max = MAX_VALUE;\n@@ -247,1 +249,2 @@\n-            \"testFoldableXor\", \"testFoldableXorPow2\", \"testUnfoldableXorPow2\"\n+            \"testFoldableXor\", \"testFoldableXorPow2\", \"testUnfoldableXorPow2\",\n+            \"testFoldableXorDifferingLength\", \"testXorMax\"\n@@ -254,2 +257,2 @@\n-        for (a = 0; a < 16; a++) {\n-            for (b = a; b < 16; b++) {\n+        for (a = 0; a < 32; a++) {\n+            for (b = a; b < 32; b++) {\n@@ -257,0 +260,1 @@\n+                checkXor(MAX_VALUE, MAX_VALUE - b);\n@@ -266,0 +270,2 @@\n+        Asserts.assertEQ(true, testFoldableXorDifferingLength(a, b));\n+        Asserts.assertEQ((a & MAX_VALUE) ^ (b & 0b11), testXorMax(a, b));\n@@ -288,0 +294,15 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    public boolean testFoldableXorDifferingLength(long x, long y) {\n+        var xor = (x & 0b111) ^ (y & 0b11);\n+        return xor < 0b1000;\n+    }\n+\n+    @Test\n+    public long testXorMax(long x, long y) {\n+        return (x & MAX_VALUE) ^ (y & 0b11);\n+        \/\/ can't do the folding range check here since xor <= MAX_VALUE is\n+        \/\/ constant with or without the xor\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorLNodeIdealizationTests.java","additions":25,"deletions":4,"binary":false,"changes":29,"status":"modified"}]}