{"files":[{"patch":"@@ -994,1 +994,1 @@\n-  if( r0->is_con() && r1->is_con() ){\n+  if (r0->is_con() && r1->is_con()) {\n@@ -1004,8 +1004,10 @@\n-  if ( (r0->_lo >= 0) &&\n-      (r0->_hi > 0)  &&\n-      (r1->_lo >= 0) &&\n-      (r1->_hi > 0) ) {\n-    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-    const TypeInt* t1x = TypeInt::make(0, round_down_power_of_2(r0->_hi) + (round_down_power_of_2(r0->_hi) - 1), r0->_widen);\n-    const TypeInt* t2x = TypeInt::make(0, round_down_power_of_2(r1->_hi) + (round_down_power_of_2(r1->_hi) - 1), r1->_widen);\n-    return t1x->meet(t2x);\n+  if (r0->_lo >= 0 && r1->_lo >= 0) {\n+      \/\/ x ^ y cannot have any bit set that is higher than both the highest bits set in x and y\n+      \/\/ x cannot have any bit set that is higher than the highest bit set in r0->_hi\n+      \/\/ y cannot have any bit set that is higher than the highest bit set in r1->_hi\n+\n+      \/\/ note cast to unsigned happens before +1 to avoid signed overflow, and\n+      \/\/ round_up is safe because high bit is unset (0 <= lo <= hi)\n+      juint max = round_up_power_of_2(juint(r0->_hi | r1->_hi) + 1) - 1;\n+\n+      return TypeInt::make(0, max, MAX2(r0->_widen, r1->_widen));\n@@ -1023,1 +1025,1 @@\n-  if( r0->is_con() && r1->is_con() ){\n+  if (r0->is_con() && r1->is_con()) {\n@@ -1033,8 +1035,27 @@\n-  if ( (r0->_lo >= 0) &&\n-      (r0->_hi > 0)  &&\n-      (r1->_lo >= 0) &&\n-      (r1->_hi > 0) ) {\n-    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-    const TypeLong* t1x = TypeLong::make(0, round_down_power_of_2(r0->_hi) + (round_down_power_of_2(r0->_hi) - 1), r0->_widen);\n-    const TypeLong* t2x = TypeLong::make(0, round_down_power_of_2(r1->_hi) + (round_down_power_of_2(r1->_hi) - 1), r1->_widen);\n-    return t1x->meet(t2x);\n+  if (r0->_lo >= 0 && r1->_lo >= 0) {\n+      \/\/ x ^ y cannot have any bit set that is higher than both the highest bits set in x and y\n+      \/\/ x cannot have any bit set that is higher than the highest bit set in r0->_hi\n+      \/\/ y cannot have any bit set that is higher than the highest bit set in r1->_hi\n+\n+      \/\/ we want to find a value that has all 1 bits everywhere up to and including\n+      \/\/ the highest bits set in r0->_hi as well as r1->_hi. For this,we can take the next\n+      \/\/ power of 2 strictly greater than both hi values and subtract 1 from it.\n+\n+      \/\/ Example 1:\n+      \/\/ r0->_hi =  5 (0b0101)        r1->_hi=1 (0b0001)\n+      \/\/    (5|1)+1       = 0b0110\n+      \/\/    round_up_pow2 = 0b1000\n+      \/\/    -1            = 0b0111 = max\n+\n+      \/\/ Example 2 - this demonstrates need for the +1:\n+      \/\/ r0->_hi =  4 (0b0100)        r1->_hi=4 (0b0100)\n+      \/\/    (4|4)+1       = 0b0101\n+      \/\/    round_up_pow2 = 0b1000\n+      \/\/    -1            = 0b0111 = max\n+      \/\/ without the +1, round_up_pow2 would be 0b0100, resulting in 0b0011 as max\n+\n+      \/\/ note cast to unsigned happens before +1 to avoid signed overflow, and\n+      \/\/ round_up is safe because high bit is unset (0 <= lo <= hi)\n+      julong max = round_up_power_of_2(julong(r0->_hi | r1->_hi) + 1) - 1;\n+\n+      return TypeLong::make(0, max, MAX2(r0->_widen, r1->_widen));\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":39,"deletions":18,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+    private static final int CONST_POW_2 = Math.abs(1 << RunInfo.getRandom().nextInt());\n@@ -52,1 +53,3 @@\n-                 \"testConstXorBool\", \"testXorSelfBool\"\n+                 \"testConstXorBool\", \"testXorSelfBool\",\n+                 \"testMaxPow2\",\"testMaxPow2Folded\"\n+\n@@ -91,0 +94,2 @@\n+        Asserts.assertEQ(interpretedMaxPow2(a, b), testMaxPow2(a, b));\n+        Asserts.assertEQ(true, testMaxPow2Folded(a, b));\n@@ -263,0 +268,38 @@\n+\n+    \/\/ clamp value to [1,CONST_POW_2]\n+    @ForceInline\n+    private static int forceMinMax(int value){\n+        \/\/ equivalent to Math.min(CONST_POW_2, Math.max(value, 1))\n+        return 1 + (value & (CONST_POW_2 - 1));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"}) \/\/ must not be constant-folded\n+    \/\/ checks that add_ring computes correct max on exact powers of 2\n+    public boolean testMaxPow2(int x, int y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+\n+        long xor = x ^ y;\n+        return xor < CONST_POW_2;\n+    }\n+\n+    @DontCompile\n+    public boolean interpretedMaxPow2(int x, int y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+\n+        long xor = x ^ y;\n+        return xor < CONST_POW_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    public boolean testMaxPow2Folded(int x, int y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+\n+        long xor = x ^ y;\n+        return xor < (CONST_POW_2*2L);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorINodeIdealizationTests.java","additions":44,"deletions":1,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+    private static final long CONST_POW_2 = Math.abs(1L << RunInfo.getRandom().nextInt());\n@@ -50,1 +51,2 @@\n-                 \"testConstXor\", \"testXorSelf\"\n+                 \"testConstXor\", \"testXorSelf\",\n+                 \"testMaxPow2\",\"testMaxPow2Folded\"\n@@ -53,0 +55,3 @@\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n@@ -58,3 +63,0 @@\n-        long min = Long.MIN_VALUE;\n-        long max = Long.MAX_VALUE;\n-\n@@ -88,0 +90,2 @@\n+        Asserts.assertEQ(interpretedMaxPow2(a, b), testMaxPow2(a, b));\n+        Asserts.assertEQ(true, testMaxPow2Folded(a, b));\n@@ -244,0 +248,37 @@\n+\n+    \/\/ clamp value to [1,CONST_POW_2]\n+    @ForceInline\n+    private static long forceMinMax(long value) {\n+        \/\/ equivalent to Math.min(CONST_POW_2, Math.max(value, 1))\n+        return 1L + (value & (CONST_POW_2 - 1L));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"})  \/\/ must not be constant-folded\n+    \/\/ checks that add_ring computes correct max on exact powers of 2\n+    public boolean testMaxPow2(long x, long y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+        long xor = x ^ y;\n+        return xor < CONST_POW_2;\n+    }\n+\n+    @DontCompile\n+    public boolean interpretedMaxPow2(long x, long y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+\n+        long xor = x ^ y;\n+        return xor < CONST_POW_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    public boolean testMaxPow2Folded(long x, long y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+\n+        long xor = x ^ y;\n+        return xor < (CONST_POW_2*2L);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorLNodeIdealizationTests.java","additions":45,"deletions":4,"binary":false,"changes":49,"status":"modified"}]}