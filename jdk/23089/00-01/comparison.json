{"files":[{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.gvn;\n+\n+import compiler.lib.generators.Generator;\n+import compiler.lib.generators.Generators;\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @summary verify that constant folding is done on xor\n+ * @bug 8347645\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.c2.gvn.TestXorInt\n+ *\/\n+\n+public class TestXorInt {\n+    private static final Generator<Integer> G = Generators.G.ints();\n+    private static final int CONST_1 = G.next();\n+    private static final int CONST_2 = G.next();\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (c ^c)  => c (constant folded)\n+    public int testConstXor() {\n+        return CONST_1 ^ CONST_2;\n+    }\n+\n+    @Check(test = \"testConstXor\")\n+    public void checkTestConstXor(int result) {\n+        Asserts.assertEquals(interpretedXor(CONST_1, CONST_2), result);\n+    }\n+\n+    @DontCompile\n+    private static int interpretedXor(int x, int y) {\n+        return x ^ y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    @Arguments(values = Argument.RANDOM_EACH)\n+    public int testConstXorSelf(int x) {\n+        return x ^ x;\n+    }\n+\n+    @Check(test = \"testConstXorSelf\")\n+    public void checkTestConstXorSelf(int result) {\n+        Asserts.assertEquals(0, result);\n+    }\n+}\n+\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestXorInt.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -0,0 +1,83 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.gvn;\n+\n+import compiler.lib.generators.Generator;\n+import compiler.lib.generators.Generators;\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+\/*\n+ * @test\n+ * @summary verify that constant folding is done on xor\n+ * @bug 8347645\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.c2.gvn.TestXorLong\n+ *\/\n+\n+public class TestXorLong {\n+    private static final Generator<Long> G = Generators.G.longs();\n+    private static final long CONST_1 = G.next();\n+    private static final long CONST_2 = G.next();\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (c ^ c)  => c (constant folded)\n+    public long testConstXor() {\n+        return CONST_1 ^ CONST_2;\n+    }\n+\n+    @Check(test = \"testConstXor\")\n+    public void checkTestConstXor(long result) {\n+        Asserts.assertEquals(interpretedXor(CONST_1, CONST_2), result);\n+    }\n+\n+    @DontCompile\n+    private static long interpretedXor(long x, long y) {\n+        return x ^ y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    @Arguments(values = Argument.RANDOM_EACH)\n+    public long testConstXorSelf(long x) {\n+        return x ^ x;\n+    }\n+\n+    @Check(test = \"testConstXorSelf\")\n+    public void checkTestConstXorSelf(long result) {\n+        Asserts.assertEquals(0L, result);\n+    }\n+}\n+\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestXorLong.java","additions":83,"deletions":0,"binary":false,"changes":83,"status":"added"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.irTests;\n-\n-import compiler.lib.ir_framework.*;\n-\n-\/*\n- * @test\n- * @summary verify that constant folding is done on xor\n- * @library \/test\/lib \/\n- * @requires vm.compiler2.enabled\n- * @run driver compiler.c2.irTests.ConstFoldingTests\n- *\/\n-\n-public class ConstFoldingTests {\n-\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.CON_I, \"1\"})\n-    \/\/ Checks (c1 ^c2)  => c3 (constant folded)\n-    public int testConstXorI() {\n-        int c = 42;\n-        return c ^ 2025;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.CON_L, \"1\"})\n-    \/\/ Checks (c1 ^ c2)  => c3 (constant folded)\n-    public long testConstXorL() {\n-        long c = 42;\n-        return c ^ 2025L;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.CON_I, \"1\"})\n-    \/\/ Checks (x ^ x)  => c3 (constant folded)\n-    @Arguments(values = Argument.RANDOM_EACH)\n-    public int testConstXorISelf(int x) {\n-        return x ^ x;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.CON_L, \"1\"})\n-    \/\/ Checks (x ^ x)  => c3 (constant folded)\n-    @Arguments(values = Argument.RANDOM_EACH)\n-    public long testConstXorLSelf(long x) {\n-        return x ^ x;\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ConstFoldingTests.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"}]}