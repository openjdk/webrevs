{"files":[{"patch":"@@ -46,6 +46,6 @@\n-            \"test4\", \"test5\", \"test6\",\n-            \"test7\", \"test8\", \"test9\",\n-            \"test10\", \"test11\", \"test12\",\n-            \"test13\", \"test14\", \"test15\",\n-            \"test16\", \"test17\",\n-            \"testConstXor\", \"testXorSelf\"\n+                 \"test4\", \"test5\", \"test6\",\n+                 \"test7\", \"test8\", \"test9\",\n+                 \"test10\", \"test11\", \"test12\",\n+                 \"test13\", \"test14\", \"test15\",\n+                 \"test16\", \"test17\",\n+                 \"testConstXor\", \"testXorSelf\"\n@@ -87,2 +87,2 @@\n-        Asserts.assertEQ(CONST_1 ^ CONST_2, testConstXor());\n-        Asserts.assertEQ(0, testXorSelf(a));\n+        Asserts.assertEQ(CONST_1 ^ CONST_2  , testConstXor());\n+        Asserts.assertEQ(0                  , testXorSelf(a));\n@@ -91,1 +91,0 @@\n-\n@@ -280,0 +279,35 @@\n+    @Run(test = {\n+            \"testFoldableXor\", \"testXorConstRange\"\n+    })\n+    public void runRangeTests() {\n+        int a = G.next();\n+        int b = G.next();\n+        checkXor(a, b);\n+\n+        for (a = 0; a < 16; a++) {\n+            for (b = a; b < 16; b++) {\n+                checkXor(a, b);\n+            }\n+        }\n+    }\n+\n+    @DontCompile\n+    public void checkXor(int a, int b) {\n+        Asserts.assertEQ(true, testFoldableXor(a, b));\n+        Asserts.assertEQ((a & 0b1000) ^ (b & 0b1000), testXorConstRange(a, b));\n+    }\n+\n+    @Test\n+    public int testXorConstRange(int x, int y) {\n+        return (x & 0b1000) ^ (y & 0b1000);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    public boolean testFoldableXor(int x, int y) {\n+        var xor = (x & 0b111) ^ (y & 0b100);\n+        return xor < 0b1000;\n+    }\n+\n+\/*\n@@ -354,0 +388,1 @@\n+    *\/\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorINodeIdealizationTests.java","additions":44,"deletions":9,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -54,3 +54,0 @@\n-        long min = Long.MIN_VALUE;\n-        long max = Long.MAX_VALUE;\n-\n@@ -62,0 +59,3 @@\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n@@ -88,1 +88,1 @@\n-        Asserts.assertEQ(0L                  , testXorSelf(a));\n+        Asserts.assertEQ(0L                 , testXorSelf(a));\n@@ -245,0 +245,34 @@\n+\n+    @Run(test = {\n+            \"testFoldableXor\", \"testXorConstRange\"\n+    })\n+    public void runRangeTests() {\n+        long a = G.next();\n+        long b = G.next();\n+        checkXor(a, b);\n+\n+        for (a = 0; a < 16; a++) {\n+            for (b = a; b < 16; b++) {\n+                checkXor(a, b);\n+            }\n+        }\n+    }\n+\n+    @DontCompile\n+    public void checkXor(long a, long b) {\n+        Asserts.assertEQ(true, testFoldableXor(a, b));\n+        Asserts.assertEQ((a & 0b1000) ^ (b & 0b1000), testXorConstRange(a, b));\n+    }\n+\n+    @Test\n+    public long testXorConstRange(long x, long y) {\n+        return (x & 0b1000) ^ (y & 0b1000);\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"}) \/\/ note boolean is a CON_I\n+    public boolean testFoldableXor(long x, long y) {\n+        var xor = (x & 0b111) ^ (y & 0b100);\n+        return xor < 0b1000;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorLNodeIdealizationTests.java","additions":38,"deletions":4,"binary":false,"changes":42,"status":"modified"}]}