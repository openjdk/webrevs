{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,3 @@\n+#include <iostream>\n+#include <climits>\n+\n@@ -27,1 +30,0 @@\n-#include \"runtime\/interfaceSupport.inline.hpp\"\n@@ -29,2 +31,55 @@\n-TEST_VM(opto, xor) {\n-\/\/    ThreadInVMfromNative ThreadInVMfromNative(JavaThread::current());\n+void test_xor_bounds(jlong hi_0, jlong hi_1, jlong val_0, jlong val_1) {\n+\n+  \/\/ Skip out-of-bounds values for convenience\n+  if(val_0> hi_0 || val_0 < 0 || val_1 > hi_1 || val_1< 0) {\n+    return;\n+  }\n+\n+  EXPECT_LE(val_0 ^ val_1, XorLNode::calc_xor_max(hi_0, hi_1));\n+\n+  \/\/ check ints when in range\n+  if(hi_0 <= INT_MAX && hi_1 <= INT_MAX) {\n+    EXPECT_LE(val_0 ^ val_1, XorINode::calc_xor_max(hi_0, hi_1));\n+  }\n+}\n+\n+void test_exhaustive_values(jlong hi_0, jlong hi_1){\n+\n+  jlong fail_val_0, fail_val_1;\n+\n+  bool hit_bound=false;\n+  for(jlong val_0 = 0; val_0 <= hi_0; val_0++){\n+    for(jlong val_1 = val_0; val_1 <= hi_1; val_1++){\n+      test_xor_bounds(hi_0, hi_1, val_0, val_1);\n+    }\n+  }\n+}\n+\n+void test_sample_values(jlong hi_0, jlong hi_1){\n+\n+  jlong fail_val_0, fail_val_1;\n+\n+  for(int i=0; i<=3; i++){\n+    for(int j=0; j<=3; j++){\n+      \/\/ Some bit combinations near the low and high ends of the range\n+      test_xor_bounds(hi_0, hi_1, i, j);\n+      test_xor_bounds(hi_0, hi_1, hi_0-i, hi_1-j);\n+    }\n+  }\n+}\n+\n+void test_exhaustive_values_with_bounds_in_range(jlong lo, jlong hi){\n+  for(jlong hi_0 = lo; hi_0 <= hi; hi_0++){\n+    for(jlong hi_1 = hi_0; hi_1 <=hi; hi_1++){\n+      test_exhaustive_values(hi_0, hi_1);\n+    }\n+  }\n+}\n+\n+void test_sample_values_with_bounds_in_range(jlong lo, jlong hi){\n+  for(jlong hi_0 = lo; hi_0 <= hi; hi_0++){\n+    for(jlong hi_1 = hi_0; hi_1 <=hi; hi_1++){\n+      test_sample_values(hi_0, hi_1);\n+    }\n+  }\n+}\n@@ -32,1 +87,6 @@\n-\/\/    const TypeLong *v=TypeLong::make(0);\n+TEST_VM(opto, xor_max) {\n+  test_exhaustive_values_with_bounds_in_range(0, 15);\n+  test_sample_values_with_bounds_in_range(INT_MAX - 1, INT_MAX);\n+  test_sample_values_with_bounds_in_range((1 << 30) - 1, 1 << 30);\n+  test_sample_values_with_bounds_in_range(LONG_MAX - 1, LONG_MAX);\n+  test_sample_values_with_bounds_in_range((1L << 62) - 1, 1L << 62);\n","filename":"test\/hotspot\/gtest\/opto\/test_xor_node.cpp","additions":65,"deletions":5,"binary":false,"changes":70,"status":"modified"}]}