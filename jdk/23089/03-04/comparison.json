{"files":[{"patch":"@@ -994,15 +994,4 @@\n-  if( !r0->is_con() || !r1->is_con() ) {\n-    \/\/not a constant\n-\n-    \/\/ result of xor can only have bits sets where any of the\n-    \/\/ inputs have bits set. lo can always become 0.\n-\n-    if ((r0->_lo >= 0) &&\n-        (r0->_hi > 0)  &&\n-        (r1->_lo >= 0) &&\n-        (r1->_hi > 0)) {\n-      \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-      const TypeInt* t1x = TypeInt::make(0, round_down_power_of_2(r0->_hi) + (round_down_power_of_2(r0->_hi) - 1), r0->_widen);\n-      const TypeInt* t2x = TypeInt::make(0, round_down_power_of_2(r1->_hi) + (round_down_power_of_2(r1->_hi) - 1), r1->_widen);\n-      return t1x->meet(t2x);\n-    }\n+  if( r0->is_con() && r1->is_con() ){\n+    \/\/ just XOR them bits.\n+    return TypeInt::make( r0->get_con() ^ r1->get_con() );\n+  }\n@@ -1010,4 +999,1 @@\n-    \/\/ Complementing a boolean?\n-    if( r0 == TypeInt::BOOL && ( r1 == TypeInt::ONE\n-                                 || r1 == TypeInt::BOOL))\n-      return TypeInt::BOOL;\n+  \/\/ not constants\n@@ -1015,1 +1001,11 @@\n-    return TypeInt::INT;        \/\/ Any integer, but still no symbols.\n+  \/\/ result of xor can only have bits sets where any of the\n+  \/\/ inputs have bits set. lo can always become 0.\n+\n+  if ( (r0->_lo >= 0) &&\n+      (r0->_hi > 0)  &&\n+      (r1->_lo >= 0) &&\n+      (r1->_hi > 0) ) {\n+    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n+    const TypeInt* t1x = TypeInt::make(0, round_down_power_of_2(r0->_hi) + (round_down_power_of_2(r0->_hi) - 1), r0->_widen);\n+    const TypeInt* t2x = TypeInt::make(0, round_down_power_of_2(r1->_hi) + (round_down_power_of_2(r1->_hi) - 1), r1->_widen);\n+    return t1x->meet(t2x);\n@@ -1017,2 +1013,7 @@\n-  \/\/ Otherwise just XOR them bits.\n-  return TypeInt::make( r0->get_con() ^ r1->get_con() );\n+\n+  \/\/ Complementing a boolean?\n+  if( r0 == TypeInt::BOOL && ( r1 == TypeInt::ONE\n+                               || r1 == TypeInt::BOOL))\n+    return TypeInt::BOOL;\n+\n+  return TypeInt::INT;        \/\/ Any integer, but still no symbols.\n@@ -1027,2 +1028,4 @@\n-  if( !r0->is_con() || !r1->is_con() ) {\n-    \/\/not a constant\n+  if( r0->is_con() && r1->is_con() ){\n+    \/\/ just XOR them bits.\n+    return TypeLong::make( r0->get_con() ^ r1->get_con() );\n+  }\n@@ -1030,2 +1033,1 @@\n-    \/\/ result of xor can only have bits sets where any of the\n-    \/\/ inputs have bits set. lo can always become 0.\n+  \/\/ not constants\n@@ -1033,9 +1035,2 @@\n-    if ((r0->_lo >= 0) &&\n-        (r0->_hi > 0)  &&\n-        (r1->_lo >= 0) &&\n-        (r1->_hi > 0)) {\n-      \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-      const TypeLong* t1x = TypeLong::make(0, round_down_power_of_2(r0->_hi) + (round_down_power_of_2(r0->_hi) - 1), r0->_widen);\n-      const TypeLong* t2x = TypeLong::make(0, round_down_power_of_2(r1->_hi) + (round_down_power_of_2(r1->_hi) - 1), r1->_widen);\n-      return t1x->meet(t2x);\n-    }\n+  \/\/ result of xor can only have bits sets where any of the\n+  \/\/ inputs have bits set. lo can always become 0.\n@@ -1043,1 +1038,8 @@\n-    return TypeLong::LONG;      \/\/ Any integer, but still no symbols.\n+  if ( (r0->_lo >= 0) &&\n+      (r0->_hi > 0)  &&\n+      (r1->_lo >= 0) &&\n+      (r1->_hi > 0) ) {\n+    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n+    const TypeLong* t1x = TypeLong::make(0, round_down_power_of_2(r0->_hi) + (round_down_power_of_2(r0->_hi) - 1), r0->_widen);\n+    const TypeLong* t2x = TypeLong::make(0, round_down_power_of_2(r1->_hi) + (round_down_power_of_2(r1->_hi) - 1), r1->_widen);\n+    return t1x->meet(t2x);\n@@ -1046,2 +1048,1 @@\n-  \/\/ Otherwise just XOR them bits.\n-  return TypeLong::make( r0->get_con() ^ r1->get_con() );\n+  return TypeLong::LONG;      \/\/ Any integer, but still no symbols.\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":39,"deletions":38,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -0,0 +1,85 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.gvn;\n+\n+import compiler.lib.generators.Generator;\n+import compiler.lib.generators.Generators;\n+import compiler.lib.ir_framework.*;\n+import jdk.test.lib.Asserts;\n+\n+import java.util.List;\n+\n+\/*\n+ * @test\n+ * @summary verify that constant folding is done on xor\n+ * @bug 8347645\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.c2.gvn.TestXorBool\n+ *\/\n+\n+public class TestXorBool {\n+    private static final Generator<Boolean> G = Generators.G.randomElement(List.of(Boolean.TRUE, Boolean.FALSE));\n+    private static final boolean CONST_1 = G.next();\n+    private static final boolean CONST_2 = G.next();\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (c ^c)  => c (constant folded)\n+    public boolean testConstXor() {\n+        return CONST_1 ^ CONST_2;\n+    }\n+\n+    @Check(test = \"testConstXor\")\n+    public void checkTestConstXor(boolean result) {\n+        Asserts.assertEquals(interpretedXor(CONST_1, CONST_2), result);\n+    }\n+\n+    @DontCompile\n+    private static boolean interpretedXor(boolean x, boolean y) {\n+        return x ^ y;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    @Arguments(values = Argument.RANDOM_EACH)\n+    public boolean testXorSelf(boolean x) {\n+        return x ^ x;\n+    }\n+\n+    @Check(test = \"testXorSelf\")\n+    public void checkTestXorSelf(boolean result) {\n+        Asserts.assertEquals(false, result);\n+    }\n+}\n+\n+\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestXorBool.java","additions":85,"deletions":0,"binary":false,"changes":85,"status":"added"}]}