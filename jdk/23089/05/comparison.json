{"files":[{"patch":"@@ -981,13 +981,0 @@\n-  \/\/ result of xor can only have bits sets where any of the\n-  \/\/ inputs have bits set. lo can always become 0.\n-  const TypeInt* t1i = t1->is_int();\n-  const TypeInt* t2i = t2->is_int();\n-  if ((t1i->_lo >= 0) &&\n-      (t1i->_hi > 0)  &&\n-      (t2i->_lo >= 0) &&\n-      (t2i->_hi > 0)) {\n-    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-    const TypeInt* t1x = TypeInt::make(0, round_down_power_of_2(t1i->_hi) + (round_down_power_of_2(t1i->_hi) - 1), t1i->_widen);\n-    const TypeInt* t2x = TypeInt::make(0, round_down_power_of_2(t2i->_hi) + (round_down_power_of_2(t2i->_hi) - 1), t2i->_widen);\n-    return t1x->meet(t2x);\n-  }\n@@ -1007,4 +994,4 @@\n-  \/\/ Complementing a boolean?\n-  if( r0 == TypeInt::BOOL && ( r1 == TypeInt::ONE\n-                               || r1 == TypeInt::BOOL))\n-    return TypeInt::BOOL;\n+  if( r0->is_con() && r1->is_con() ){\n+    \/\/ just XOR them bits.\n+    return TypeInt::make( r0->get_con() ^ r1->get_con() );\n+  }\n@@ -1012,2 +999,1 @@\n-  if( !r0->is_con() || !r1->is_con() ) \/\/ Not constants\n-    return TypeInt::INT;        \/\/ Any integer, but still no symbols.\n+  \/\/ not constants\n@@ -1015,2 +1001,14 @@\n-  \/\/ Otherwise just XOR them bits.\n-  return TypeInt::make( r0->get_con() ^ r1->get_con() );\n+  \/\/ result of xor can only have bits sets where any of the\n+  \/\/ inputs have bits set. lo can always become 0.\n+\n+  if ( (r0->_lo >= 0) &&\n+      (r0->_hi > 0)  &&\n+      (r1->_lo >= 0) &&\n+      (r1->_hi > 0) ) {\n+    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n+    const TypeInt* t1x = TypeInt::make(0, round_down_power_of_2(r0->_hi) + (round_down_power_of_2(r0->_hi) - 1), r0->_widen);\n+    const TypeInt* t2x = TypeInt::make(0, round_down_power_of_2(r1->_hi) + (round_down_power_of_2(r1->_hi) - 1), r1->_widen);\n+    return t1x->meet(t2x);\n+  }\n+\n+  return TypeInt::INT;        \/\/ Any integer, but still no symbols.\n@@ -1025,3 +1023,4 @@\n-  \/\/ If either input is not a constant, just return all integers.\n-  if( !r0->is_con() || !r1->is_con() )\n-    return TypeLong::LONG;      \/\/ Any integer, but still no symbols.\n+  if( r0->is_con() && r1->is_con() ){\n+    \/\/ just XOR them bits.\n+    return TypeLong::make( r0->get_con() ^ r1->get_con() );\n+  }\n@@ -1029,2 +1028,16 @@\n-  \/\/ Otherwise just OR them bits.\n-  return TypeLong::make( r0->get_con() ^ r1->get_con() );\n+  \/\/ not constants\n+\n+  \/\/ result of xor can only have bits sets where any of the\n+  \/\/ inputs have bits set. lo can always become 0.\n+\n+  if ( (r0->_lo >= 0) &&\n+      (r0->_hi > 0)  &&\n+      (r1->_lo >= 0) &&\n+      (r1->_hi > 0) ) {\n+    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n+    const TypeLong* t1x = TypeLong::make(0, round_down_power_of_2(r0->_hi) + (round_down_power_of_2(r0->_hi) - 1), r0->_widen);\n+    const TypeLong* t2x = TypeLong::make(0, round_down_power_of_2(r1->_hi) + (round_down_power_of_2(r1->_hi) - 1), r1->_widen);\n+    return t1x->meet(t2x);\n+  }\n+\n+  return TypeLong::LONG;      \/\/ Any integer, but still no symbols.\n@@ -1066,13 +1079,1 @@\n-  \/\/ result of xor can only have bits sets where any of the\n-  \/\/ inputs have bits set. lo can always become 0.\n-  const TypeLong* t1l = t1->is_long();\n-  const TypeLong* t2l = t2->is_long();\n-  if ((t1l->_lo >= 0) &&\n-      (t1l->_hi > 0)  &&\n-      (t2l->_lo >= 0) &&\n-      (t2l->_hi > 0)) {\n-    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-    const TypeLong* t1x = TypeLong::make(0, round_down_power_of_2(t1l->_hi) + (round_down_power_of_2(t1l->_hi) - 1), t1l->_widen);\n-    const TypeLong* t2x = TypeLong::make(0, round_down_power_of_2(t2l->_hi) + (round_down_power_of_2(t2l->_hi) - 1), t2l->_widen);\n-    return t1x->meet(t2x);\n-  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":40,"deletions":39,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -36,0 +36,5 @@\n+    private static final int CONST_1 = RunInfo.getRandom().nextInt();\n+    private static final int CONST_2 = RunInfo.getRandom().nextInt();\n+    private static final boolean CONST_BOOL_1 = RunInfo.getRandom().nextBoolean();\n+    private static final boolean CONST_BOOL_2 = RunInfo.getRandom().nextBoolean();\n+\n@@ -45,1 +50,4 @@\n-                 \"test16\", \"test17\"})\n+                 \"test16\", \"test17\",\n+                 \"testConstXor\", \"testXorSelf\",\n+                 \"testConstXorBool\", \"testXorSelfBool\"\n+    })\n@@ -50,1 +58,1 @@\n-        int d = RunInfo.getRandom().nextInt();\n+        boolean d = RunInfo.getRandom().nextBoolean();\n@@ -55,1 +63,1 @@\n-        assertResult(0, 0, 0, 0);\n+        assertResult(0, 0, 0, false);\n@@ -57,2 +65,2 @@\n-        assertResult(min, min, min, min);\n-        assertResult(max, max, max, max);\n+        assertResult(min, min, min, false);\n+        assertResult(max, max, max, true);\n@@ -62,1 +70,1 @@\n-    public void assertResult(int a, int b, int c, int d) {\n+    public void assertResult(int a, int b, int c, boolean d) {\n@@ -79,1 +87,4 @@\n-        Asserts.assertEQ(-2023 - a          , test17(a));\n+        Asserts.assertEQ(CONST_1 ^ CONST_2  , testConstXor());\n+        Asserts.assertEQ(0                  , testXorSelf(a));\n+        Asserts.assertEQ(CONST_BOOL_1 ^ CONST_BOOL_2  , testConstXorBool());\n+        Asserts.assertEQ(false              , testXorSelfBool(d));\n@@ -220,0 +231,32 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (c ^c)  => c (constant folded)\n+    public int testConstXor() {\n+        return CONST_1 ^ CONST_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public int testXorSelf(int x) {\n+        return x ^ x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (c ^c)  => c (constant folded)\n+    public boolean testConstXorBool() {\n+        return CONST_BOOL_1 ^ CONST_BOOL_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public boolean testXorSelfBool(boolean x) {\n+        return x ^ x;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorINodeIdealizationTests.java","additions":50,"deletions":7,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -36,0 +36,4 @@\n+\n+    private static final long CONST_1 = RunInfo.getRandom().nextLong();\n+    private static final long CONST_2 = RunInfo.getRandom().nextLong();\n+\n@@ -45,1 +49,3 @@\n-                 \"test16\", \"test17\"})\n+                 \"test16\", \"test17\",\n+                 \"testConstXor\", \"testXorSelf\"\n+    })\n@@ -80,0 +86,2 @@\n+        Asserts.assertEQ(CONST_1 ^ CONST_2  , testConstXor());\n+        Asserts.assertEQ(0L                  , testXorSelf(a));\n@@ -220,0 +228,16 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (c ^c)  => c (constant folded)\n+    public long testConstXor() {\n+        return CONST_1 ^ CONST_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public long testXorSelf(long x) {\n+        return x ^ x;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorLNodeIdealizationTests.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"}]}