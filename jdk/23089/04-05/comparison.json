{"files":[{"patch":"@@ -1014,5 +1014,0 @@\n-  \/\/ Complementing a boolean?\n-  if( r0 == TypeInt::BOOL && ( r1 == TypeInt::ONE\n-                               || r1 == TypeInt::BOOL))\n-    return TypeInt::BOOL;\n-\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -1,85 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.gvn;\n-\n-import compiler.lib.generators.Generator;\n-import compiler.lib.generators.Generators;\n-import compiler.lib.ir_framework.*;\n-import jdk.test.lib.Asserts;\n-\n-import java.util.List;\n-\n-\/*\n- * @test\n- * @summary verify that constant folding is done on xor\n- * @bug 8347645\n- * @library \/test\/lib \/\n- * @requires vm.compiler2.enabled\n- * @run driver compiler.c2.gvn.TestXorBool\n- *\/\n-\n-public class TestXorBool {\n-    private static final Generator<Boolean> G = Generators.G.randomElement(List.of(Boolean.TRUE, Boolean.FALSE));\n-    private static final boolean CONST_1 = G.next();\n-    private static final boolean CONST_2 = G.next();\n-\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.CON_I, \"1\"})\n-    \/\/ Checks (c ^c)  => c (constant folded)\n-    public boolean testConstXor() {\n-        return CONST_1 ^ CONST_2;\n-    }\n-\n-    @Check(test = \"testConstXor\")\n-    public void checkTestConstXor(boolean result) {\n-        Asserts.assertEquals(interpretedXor(CONST_1, CONST_2), result);\n-    }\n-\n-    @DontCompile\n-    private static boolean interpretedXor(boolean x, boolean y) {\n-        return x ^ y;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.CON_I, \"1\"})\n-    \/\/ Checks (x ^ x)  => c (constant folded)\n-    @Arguments(values = Argument.RANDOM_EACH)\n-    public boolean testXorSelf(boolean x) {\n-        return x ^ x;\n-    }\n-\n-    @Check(test = \"testXorSelf\")\n-    public void checkTestXorSelf(boolean result) {\n-        Asserts.assertEquals(false, result);\n-    }\n-}\n-\n-\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestXorBool.java","additions":0,"deletions":85,"binary":false,"changes":85,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.gvn;\n-\n-import compiler.lib.generators.Generator;\n-import compiler.lib.generators.Generators;\n-import compiler.lib.ir_framework.*;\n-import jdk.test.lib.Asserts;\n-\n-\/*\n- * @test\n- * @summary verify that constant folding is done on xor\n- * @bug 8347645\n- * @library \/test\/lib \/\n- * @requires vm.compiler2.enabled\n- * @run driver compiler.c2.gvn.TestXorInt\n- *\/\n-\n-public class TestXorInt {\n-    private static final Generator<Integer> G = Generators.G.ints();\n-    private static final int CONST_1 = G.next();\n-    private static final int CONST_2 = G.next();\n-\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.CON_I, \"1\"})\n-    \/\/ Checks (c ^c)  => c (constant folded)\n-    public int testConstXor() {\n-        return CONST_1 ^ CONST_2;\n-    }\n-\n-    @Check(test = \"testConstXor\")\n-    public void checkTestConstXor(int result) {\n-        Asserts.assertEquals(interpretedXor(CONST_1, CONST_2), result);\n-    }\n-\n-    @DontCompile\n-    private static int interpretedXor(int x, int y) {\n-        return x ^ y;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.CON_I, \"1\"})\n-    \/\/ Checks (x ^ x)  => c (constant folded)\n-    @Arguments(values = Argument.RANDOM_EACH)\n-    public int testXorSelf(int x) {\n-        return x ^ x;\n-    }\n-\n-    @Check(test = \"testXorSelf\")\n-    public void checkTestXorSelf(int result) {\n-        Asserts.assertEquals(0, result);\n-    }\n-}\n-\n-\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestXorInt.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -1,83 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package compiler.c2.gvn;\n-\n-import compiler.lib.generators.Generator;\n-import compiler.lib.generators.Generators;\n-import compiler.lib.ir_framework.*;\n-import jdk.test.lib.Asserts;\n-\n-\/*\n- * @test\n- * @summary verify that constant folding is done on xor\n- * @bug 8347645\n- * @library \/test\/lib \/\n- * @requires vm.compiler2.enabled\n- * @run driver compiler.c2.gvn.TestXorLong\n- *\/\n-\n-public class TestXorLong {\n-    private static final Generator<Long> G = Generators.G.longs();\n-    private static final long CONST_1 = G.next();\n-    private static final long CONST_2 = G.next();\n-\n-    public static void main(String[] args) {\n-        TestFramework.run();\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.CON_L, \"1\"})\n-    \/\/ Checks (c ^ c)  => c (constant folded)\n-    public long testConstXor() {\n-        return CONST_1 ^ CONST_2;\n-    }\n-\n-    @Check(test = \"testConstXor\")\n-    public void checkTestConstXor(long result) {\n-        Asserts.assertEquals(interpretedXor(CONST_1, CONST_2), result);\n-    }\n-\n-    @DontCompile\n-    private static long interpretedXor(long x, long y) {\n-        return x ^ y;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.CON_L, \"1\"})\n-    \/\/ Checks (x ^ x)  => c (constant folded)\n-    @Arguments(values = Argument.RANDOM_EACH)\n-    public long testXorSelf(long x) {\n-        return x ^ x;\n-    }\n-\n-    @Check(test = \"testXorSelf\")\n-    public void checkTestXorSelf(long result) {\n-        Asserts.assertEquals(0L, result);\n-    }\n-}\n-\n-\n-\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/TestXorLong.java","additions":0,"deletions":83,"binary":false,"changes":83,"status":"deleted"},{"patch":"@@ -36,0 +36,5 @@\n+    private static final int CONST_1 = RunInfo.getRandom().nextInt();\n+    private static final int CONST_2 = RunInfo.getRandom().nextInt();\n+    private static final boolean CONST_BOOL_1 = RunInfo.getRandom().nextBoolean();\n+    private static final boolean CONST_BOOL_2 = RunInfo.getRandom().nextBoolean();\n+\n@@ -45,1 +50,4 @@\n-                 \"test16\", \"test17\"})\n+                 \"test16\", \"test17\",\n+                 \"testConstXor\", \"testXorSelf\",\n+                 \"testConstXorBool\", \"testXorSelfBool\"\n+    })\n@@ -50,1 +58,1 @@\n-        int d = RunInfo.getRandom().nextInt();\n+        boolean d = RunInfo.getRandom().nextBoolean();\n@@ -55,1 +63,1 @@\n-        assertResult(0, 0, 0, 0);\n+        assertResult(0, 0, 0, false);\n@@ -57,2 +65,2 @@\n-        assertResult(min, min, min, min);\n-        assertResult(max, max, max, max);\n+        assertResult(min, min, min, false);\n+        assertResult(max, max, max, true);\n@@ -62,1 +70,1 @@\n-    public void assertResult(int a, int b, int c, int d) {\n+    public void assertResult(int a, int b, int c, boolean d) {\n@@ -79,1 +87,4 @@\n-        Asserts.assertEQ(-2023 - a          , test17(a));\n+        Asserts.assertEQ(CONST_1 ^ CONST_2  , testConstXor());\n+        Asserts.assertEQ(0                  , testXorSelf(a));\n+        Asserts.assertEQ(CONST_BOOL_1 ^ CONST_BOOL_2  , testConstXorBool());\n+        Asserts.assertEQ(false              , testXorSelfBool(d));\n@@ -220,0 +231,32 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (c ^c)  => c (constant folded)\n+    public int testConstXor() {\n+        return CONST_1 ^ CONST_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public int testXorSelf(int x) {\n+        return x ^ x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (c ^c)  => c (constant folded)\n+    public boolean testConstXorBool() {\n+        return CONST_BOOL_1 ^ CONST_BOOL_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public boolean testXorSelfBool(boolean x) {\n+        return x ^ x;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorINodeIdealizationTests.java","additions":50,"deletions":7,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -36,0 +36,4 @@\n+\n+    private static final long CONST_1 = RunInfo.getRandom().nextLong();\n+    private static final long CONST_2 = RunInfo.getRandom().nextLong();\n+\n@@ -45,1 +49,3 @@\n-                 \"test16\", \"test17\"})\n+                 \"test16\", \"test17\",\n+                 \"testConstXor\", \"testXorSelf\"\n+    })\n@@ -80,0 +86,2 @@\n+        Asserts.assertEQ(CONST_1 ^ CONST_2  , testConstXor());\n+        Asserts.assertEQ(0L                  , testXorSelf(a));\n@@ -220,0 +228,16 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (c ^c)  => c (constant folded)\n+    public long testConstXor() {\n+        return CONST_1 ^ CONST_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public long testXorSelf(long x) {\n+        return x ^ x;\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorLNodeIdealizationTests.java","additions":25,"deletions":1,"binary":false,"changes":26,"status":"modified"}]}