{"files":[{"patch":"@@ -981,13 +981,0 @@\n-  \/\/ result of xor can only have bits sets where any of the\n-  \/\/ inputs have bits set. lo can always become 0.\n-  const TypeInt* t1i = t1->is_int();\n-  const TypeInt* t2i = t2->is_int();\n-  if ((t1i->_lo >= 0) &&\n-      (t1i->_hi > 0)  &&\n-      (t2i->_lo >= 0) &&\n-      (t2i->_hi > 0)) {\n-    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-    const TypeInt* t1x = TypeInt::make(0, round_down_power_of_2(t1i->_hi) + (round_down_power_of_2(t1i->_hi) - 1), t1i->_widen);\n-    const TypeInt* t2x = TypeInt::make(0, round_down_power_of_2(t2i->_hi) + (round_down_power_of_2(t2i->_hi) - 1), t2i->_widen);\n-    return t1x->meet(t2x);\n-  }\n@@ -1007,4 +994,6 @@\n-  \/\/ Complementing a boolean?\n-  if( r0 == TypeInt::BOOL && ( r1 == TypeInt::ONE\n-                               || r1 == TypeInt::BOOL))\n-    return TypeInt::BOOL;\n+  if (r0->is_con() && r1->is_con()) {\n+    \/\/ Constant fold: (c1 ^ c2) -> c3\n+    return TypeInt::make( r0->get_con() ^ r1->get_con() );\n+  }\n+\n+  \/\/ At least one of the arguments is not constant\n@@ -1012,2 +1001,0 @@\n-  if( !r0->is_con() || !r1->is_con() ) \/\/ Not constants\n-    return TypeInt::INT;        \/\/ Any integer, but still no symbols.\n@@ -1015,2 +1002,16 @@\n-  \/\/ Otherwise just XOR them bits.\n-  return TypeInt::make( r0->get_con() ^ r1->get_con() );\n+  \/\/ Result of xor can only have bits sets where any of the\n+  \/\/ inputs have bits set. lo can always become 0.\n+\n+  if (r0->_lo >= 0 && r1->_lo >= 0) {\n+      \/\/ x ^ y cannot have any bit set that is higher than both the highest bits set in x and y\n+      \/\/ x cannot have any bit set that is higher than the highest bit set in r0->_hi\n+      \/\/ y cannot have any bit set that is higher than the highest bit set in r1->_hi\n+\n+      \/\/ Note: cast to unsigned happens before +1 to avoid signed overflow, and\n+      \/\/ round_up is safe because high bit is unset (0 <= lo <= hi)\n+      juint max = round_up_power_of_2(juint(r0->_hi | r1->_hi) + 1) - 1;\n+\n+      return TypeInt::make(0, max, MAX2(r0->_widen, r1->_widen));\n+  }\n+\n+  return TypeInt::INT;        \/\/ Any integer, but still no symbols.\n@@ -1025,3 +1026,4 @@\n-  \/\/ If either input is not a constant, just return all integers.\n-  if( !r0->is_con() || !r1->is_con() )\n-    return TypeLong::LONG;      \/\/ Any integer, but still no symbols.\n+  if (r0->is_con() && r1->is_con()) {\n+    \/\/ Constant fold: (c1 ^ c2) -> c3\n+    return TypeLong::make( r0->get_con() ^ r1->get_con() );\n+  }\n@@ -1029,2 +1031,35 @@\n-  \/\/ Otherwise just OR them bits.\n-  return TypeLong::make( r0->get_con() ^ r1->get_con() );\n+  \/\/ At least one of the arguments is not constant\n+\n+  \/\/ Result of xor can only have bits sets where any of the\n+  \/\/ inputs have bits set. lo can always become 0.\n+\n+  if (r0->_lo >= 0 && r1->_lo >= 0) {\n+      \/\/ x ^ y cannot have any bit set that is higher than both the highest bits set in x and y\n+      \/\/ x cannot have any bit set that is higher than the highest bit set in r0->_hi\n+      \/\/ y cannot have any bit set that is higher than the highest bit set in r1->_hi\n+\n+      \/\/ We want to find a value that has all 1 bits everywhere up to and including\n+      \/\/ the highest bits set in r0->_hi as well as r1->_hi. For this,we can take the next\n+      \/\/ power of 2 strictly greater than both hi values and subtract 1 from it.\n+\n+      \/\/ Example 1:\n+      \/\/ r0->_hi =  5 (0b0101)        r1->_hi=1 (0b0001)\n+      \/\/    (5|1)+1       = 0b0110\n+      \/\/    round_up_pow2 = 0b1000\n+      \/\/    -1            = 0b0111 = max\n+\n+      \/\/ Example 2 - this demonstrates need for the +1:\n+      \/\/ r0->_hi =  4 (0b0100)        r1->_hi=4 (0b0100)\n+      \/\/    (4|4)+1       = 0b0101\n+      \/\/    round_up_pow2 = 0b1000\n+      \/\/    -1            = 0b0111 = max\n+      \/\/ Without the +1, round_up_pow2 would be 0b0100, resulting in 0b0011 as max\n+\n+      \/\/ Note: cast to unsigned happens before +1 to avoid signed overflow, and\n+      \/\/ round_up is safe because high bit is unset (0 <= lo <= hi)\n+      julong max = round_up_power_of_2(julong(r0->_hi | r1->_hi) + 1) - 1;\n+\n+      return TypeLong::make(0, max, MAX2(r0->_widen, r1->_widen));\n+  }\n+\n+  return TypeLong::LONG;      \/\/ Any integer, but still no symbols.\n@@ -1066,13 +1101,1 @@\n-  \/\/ result of xor can only have bits sets where any of the\n-  \/\/ inputs have bits set. lo can always become 0.\n-  const TypeLong* t1l = t1->is_long();\n-  const TypeLong* t2l = t2->is_long();\n-  if ((t1l->_lo >= 0) &&\n-      (t1l->_hi > 0)  &&\n-      (t2l->_lo >= 0) &&\n-      (t2l->_hi > 0)) {\n-    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-    const TypeLong* t1x = TypeLong::make(0, round_down_power_of_2(t1l->_hi) + (round_down_power_of_2(t1l->_hi) - 1), t1l->_widen);\n-    const TypeLong* t2x = TypeLong::make(0, round_down_power_of_2(t2l->_hi) + (round_down_power_of_2(t2l->_hi) - 1), t2l->_widen);\n-    return t1x->meet(t2x);\n-  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":62,"deletions":39,"binary":false,"changes":101,"status":"modified"},{"patch":"@@ -0,0 +1,33 @@\n+\/*\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"opto\/addnode.hpp\"\n+#include \"unittest.hpp\"\n+#include \"runtime\/interfaceSupport.inline.hpp\"\n+\n+TEST_VM(opto, xor) {\n+\/\/    ThreadInVMfromNative ThreadInVMfromNative(JavaThread::current());\n+\n+\/\/    const TypeLong *v=TypeLong::make(0);\n+}\n","filename":"test\/hotspot\/gtest\/opto\/test_xor_node.cpp","additions":33,"deletions":0,"binary":false,"changes":33,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import compiler.lib.generators.Generators;\n@@ -36,0 +37,7 @@\n+    private static final int CONST_1 = Generators.G.ints().next();\n+    private static final int CONST_2 = Generators.G.ints().next();\n+    private static final boolean CONST_BOOL_1 = RunInfo.getRandom().nextBoolean();\n+    private static final boolean CONST_BOOL_2 = RunInfo.getRandom().nextBoolean();\n+    private static final int CONST_POW_2 = Generators.G.powerOfTwoInts(0)\n+            .restricted(1, Integer.MAX_VALUE).next();\n+\n@@ -45,1 +53,6 @@\n-                 \"test16\", \"test17\"})\n+                 \"test16\", \"test17\",\n+                 \"testConstXor\", \"testXorSelf\",\n+                 \"testConstXorBool\", \"testXorSelfBool\",\n+                 \"testMaxPow2\",\"testMaxPow2Folded\"\n+\n+    })\n@@ -50,1 +63,1 @@\n-        int d = RunInfo.getRandom().nextInt();\n+        boolean d = RunInfo.getRandom().nextBoolean();\n@@ -55,1 +68,1 @@\n-        assertResult(0, 0, 0, 0);\n+        assertResult(0, 0, 0, false);\n@@ -57,2 +70,2 @@\n-        assertResult(min, min, min, min);\n-        assertResult(max, max, max, max);\n+        assertResult(min, min, min, false);\n+        assertResult(max, max, max, true);\n@@ -62,1 +75,1 @@\n-    public void assertResult(int a, int b, int c, int d) {\n+    public void assertResult(int a, int b, int c, boolean d) {\n@@ -79,1 +92,7 @@\n-        Asserts.assertEQ(-2023 - a          , test17(a));\n+        Asserts.assertEQ(CONST_1 ^ CONST_2  , testConstXor());\n+        Asserts.assertEQ(0                  , testXorSelf(a));\n+        Asserts.assertEQ(CONST_BOOL_1 ^ CONST_BOOL_2  , testConstXorBool());\n+        Asserts.assertEQ(false              , testXorSelfBool(d));\n+        String msg = String.format(\"CONST_POW_2=%d a=%d b=%d\", CONST_POW_2, a, b);\n+        Asserts.assertEQ(interpretedMaxPow2(a, b), testMaxPow2(a, b), msg);\n+        Asserts.assertEQ(true, testMaxPow2Folded(a, b), msg);\n@@ -220,0 +239,69 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (c ^c)  => c (constant folded)\n+    public int testConstXor() {\n+        return CONST_1 ^ CONST_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public int testXorSelf(int x) {\n+        return x ^ x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (c1 ^ c2)  => c3 (constant folded)\n+    public boolean testConstXorBool() {\n+        return CONST_BOOL_1 ^ CONST_BOOL_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public boolean testXorSelfBool(boolean x) {\n+        return x ^ x;\n+    }\n+\n+    \/\/ clamp value to [1,CONST_POW_2]\n+    @ForceInline\n+    private static int forceMinMax(int value){\n+        return Math.min(CONST_POW_2, Math.max(value, 1));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"}) \/\/ must not be constant-folded\n+    \/\/ checks that add_ring computes correct max on exact powers of 2\n+    public boolean testMaxPow2(int x, int y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+\n+        long xor = x ^ y;\n+        return xor < CONST_POW_2;\n+    }\n+\n+    @DontCompile\n+    public boolean interpretedMaxPow2(int x, int y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+\n+        long xor = x ^ y;\n+        return xor < CONST_POW_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    public boolean testMaxPow2Folded(int x, int y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+\n+        long xor = x ^ y;\n+        return xor < (CONST_POW_2*2L);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorINodeIdealizationTests.java","additions":96,"deletions":8,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+import compiler.lib.generators.Generators;\n@@ -36,0 +37,6 @@\n+\n+    private static final long CONST_1 = Generators.G.longs().next();\n+    private static final long CONST_2 = Generators.G.longs().next();\n+    private static final long CONST_POW_2 = Generators.G.powerOfTwoLongs(0)\n+            .restricted(1L, Long.MAX_VALUE).next();\n+\n@@ -45,1 +52,4 @@\n-                 \"test16\", \"test17\"})\n+                 \"test16\", \"test17\",\n+                 \"testConstXor\", \"testXorSelf\",\n+                 \"testMaxPow2\",\"testMaxPow2Folded\"\n+    })\n@@ -47,0 +57,3 @@\n+        long min = Long.MIN_VALUE;\n+        long max = Long.MAX_VALUE;\n+\n@@ -52,3 +65,0 @@\n-        long min = Long.MIN_VALUE;\n-        long max = Long.MAX_VALUE;\n-\n@@ -80,0 +90,5 @@\n+        Asserts.assertEQ(CONST_1 ^ CONST_2  , testConstXor());\n+        Asserts.assertEQ(0L                  , testXorSelf(a));\n+        String msg = String.format(\"CONST_POW_2=%d a=%d b=%d\", CONST_POW_2, a, b);\n+        Asserts.assertEQ(interpretedMaxPow2(a, b), testMaxPow2(a, b), msg);\n+        Asserts.assertEQ(true, testMaxPow2Folded(a, b), msg);\n@@ -220,0 +235,54 @@\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (c1 ^ c2)  => c3 (constant folded)\n+    public long testConstXor() {\n+        return CONST_1 ^ CONST_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (x ^ x)  => c (constant folded)\n+    public long testXorSelf(long x) {\n+        return x ^ x;\n+    }\n+\n+    \/\/ clamp value to [1,CONST_POW_2]\n+    @ForceInline\n+    private static long forceMinMax(long value) {\n+        \/\/ Equivalent to Math.min(CONST_POW_2, Math.max(value, 1)).\n+        \/\/ The bounds do not propagate to the type for longs with min\/max\n+        return 1L + (value & (CONST_POW_2 - 1L));\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.XOR, \"1\"})  \/\/ must not be constant-folded\n+    \/\/ checks that add_ring computes correct max on exact powers of 2\n+    public boolean testMaxPow2(long x, long y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+        long xor = x ^ y;\n+        return xor < CONST_POW_2;\n+    }\n+\n+    @DontCompile\n+    public boolean interpretedMaxPow2(long x, long y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+\n+        long xor = x ^ y;\n+        return xor < CONST_POW_2;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    public boolean testMaxPow2Folded(long x, long y) {\n+        x = forceMinMax(x);\n+        y = forceMinMax(y);\n+\n+        long xor = x ^ y;\n+        return xor < (CONST_POW_2*2L);\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorLNodeIdealizationTests.java","additions":74,"deletions":5,"binary":false,"changes":79,"status":"modified"}]}