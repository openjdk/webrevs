{"files":[{"patch":"@@ -1028,1 +1028,1 @@\n-    return TypeInt::make( r0->get_con() ^ r1->get_con() );\n+    return TypeInt::make(r0->get_con() ^ r1->get_con());\n@@ -1056,1 +1056,1 @@\n-    return TypeLong::make( r0->get_con() ^ r1->get_con() );\n+    return TypeLong::make(r0->get_con() ^ r1->get_con());\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -312,77 +312,0 @@\n-\n-\/*\n-    private static final Range RANGE_1;\n-    private static final Range RANGE_2;\n-    private static final int XOR_MAX_OF_RANGES;\n-\n-    static {\n-        var r1 = RANGE_1 = Range.generate(G);\n-        var r2 = RANGE_2 = Range.generate(G);\n-        if (r1.lo() >= 0 && r2.lo() >= 0 && r1.hi() != 0 && r2.hi() != 0) {\n-            XOR_MAX_OF_RANGES = Integer.highestOneBit(r1.hi() | r2.hi() * 2) - 1;\n-        } else {\n-            XOR_MAX_OF_RANGES = Integer.MAX_VALUE;\n-        }\n-    }\n-\n-    @Run(test = {\n-            \"testFoldableXor\", \"testXorConstRange\"\n-    })\n-    public void runRangeTests() {\n-        var rand1 = G.restricted(RANGE_1.lo(), RANGE_1.hi());\n-        var rand2 = G.restricted(RANGE_2.lo(), RANGE_2.hi());\n-\n-        for (int i = 0; i < 100; i++) {\n-            checkXor(rand1.next(), rand2.next());\n-        }\n-        checkXor(RANGE_1.hi(), RANGE_2.hi());\n-        checkXor(RANGE_1.lo(), RANGE_2.lo());\n-    }\n-\n-    @DontCompile\n-    public void checkXor(int a, int b) {\n-        Asserts.assertEQ(true, testFoldableXor(a, b));\n-        Asserts.assertEQ(RANGE_1.clamp(a) ^ RANGE_2.clamp(b), testXorConstRange(a, b));\n-    }\n-\n-    @Test\n-    public int testXorConstRange(int x, int y) {\n-        x = RANGE_1.clamp(x);\n-        y = RANGE_2.clamp(y);\n-\n-        return x ^ y;\n-    }\n-\n-    @Test\n-    @IR(failOn = {IRNode.XOR})\n-    @IR(counts = {IRNode.CON_I, \"1\"})\n-    public boolean testFoldableXor(int x, int y) {\n-        x = RANGE_1.clamp(x);\n-        y = RANGE_2.clamp(y);\n-        var xor = x ^ y;\n-        return xor <= XOR_MAX_OF_RANGES;\n-    }\n-\n-    record Range(int lo, int hi) {\n-        Range {\n-            if (lo > hi) {\n-                throw new IllegalArgumentException(\"lo > hi\");\n-            }\n-        }\n-\n-        int clamp(int v) {\n-            return Math.min(hi, Math.max(v, lo));\n-        }\n-\n-        static Range generate(Generator<Integer> g) {\n-            var a = g.next();\n-            var b = g.next();\n-            if (a > b) {\n-                var tmp = a;\n-                a = b;\n-                b = tmp;\n-            }\n-            return new Range(a, b);\n-        }\n-    }\n-    *\/\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/XorINodeIdealizationTests.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"modified"}]}