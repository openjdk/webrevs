{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -982,13 +982,0 @@\n-  \/\/ result of xor can only have bits sets where any of the\n-  \/\/ inputs have bits set. lo can always become 0.\n-  const TypeInt* t1i = t1->is_int();\n-  const TypeInt* t2i = t2->is_int();\n-  if ((t1i->_lo >= 0) &&\n-      (t1i->_hi > 0)  &&\n-      (t2i->_lo >= 0) &&\n-      (t2i->_hi > 0)) {\n-    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-    const TypeInt* t1x = TypeInt::make(0, round_down_power_of_2(t1i->_hi) + (round_down_power_of_2(t1i->_hi) - 1), t1i->_widen);\n-    const TypeInt* t2x = TypeInt::make(0, round_down_power_of_2(t2i->_hi) + (round_down_power_of_2(t2i->_hi) - 1), t2i->_widen);\n-    return t1x->meet(t2x);\n-  }\n@@ -1008,4 +995,2 @@\n-  \/\/ Complementing a boolean?\n-  if( r0 == TypeInt::BOOL && ( r1 == TypeInt::ONE\n-                               || r1 == TypeInt::BOOL))\n-    return TypeInt::BOOL;\n+  if( !r0->is_con() || !r1->is_con() ) {\n+    \/\/not a constant\n@@ -1013,2 +998,17 @@\n-  if( !r0->is_con() || !r1->is_con() ) \/\/ Not constants\n-    return TypeInt::INT;        \/\/ Any integer, but still no symbols.\n+    \/\/ result of xor can only have bits sets where any of the\n+    \/\/ inputs have bits set. lo can always become 0.\n+\n+    if ((r0->_lo >= 0) &&\n+        (r0->_hi > 0)  &&\n+        (r1->_lo >= 0) &&\n+        (r1->_hi > 0)) {\n+      \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n+      const TypeInt* t1x = TypeInt::make(0, round_down_power_of_2(r0->_hi) + (round_down_power_of_2(r0->_hi) - 1), r0->_widen);\n+      const TypeInt* t2x = TypeInt::make(0, round_down_power_of_2(r1->_hi) + (round_down_power_of_2(r1->_hi) - 1), r1->_widen);\n+      return t1x->meet(t2x);\n+    }\n+\n+    \/\/ Complementing a boolean?\n+    if( r0 == TypeInt::BOOL && ( r1 == TypeInt::ONE\n+                                 || r1 == TypeInt::BOOL))\n+      return TypeInt::BOOL;\n@@ -1016,0 +1016,2 @@\n+    return TypeInt::INT;        \/\/ Any integer, but still no symbols.\n+  }\n@@ -1026,2 +1028,16 @@\n-  \/\/ If either input is not a constant, just return all integers.\n-  if( !r0->is_con() || !r1->is_con() )\n+  if( !r0->is_con() || !r1->is_con() ) {\n+    \/\/not a constant\n+\n+    \/\/ result of xor can only have bits sets where any of the\n+    \/\/ inputs have bits set. lo can always become 0.\n+\n+    if ((r0->_lo >= 0) &&\n+        (r0->_hi > 0)  &&\n+        (r1->_lo >= 0) &&\n+        (r1->_hi > 0)) {\n+      \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n+      const TypeLong* t1x = TypeLong::make(0, round_down_power_of_2(r0->_hi) + (round_down_power_of_2(r0->_hi) - 1), r0->_widen);\n+      const TypeLong* t2x = TypeLong::make(0, round_down_power_of_2(r1->_hi) + (round_down_power_of_2(r1->_hi) - 1), r1->_widen);\n+      return t1x->meet(t2x);\n+    }\n+\n@@ -1029,0 +1045,1 @@\n+  }\n@@ -1030,1 +1047,1 @@\n-  \/\/ Otherwise just OR them bits.\n+  \/\/ Otherwise just XOR them bits.\n@@ -1067,13 +1084,1 @@\n-  \/\/ result of xor can only have bits sets where any of the\n-  \/\/ inputs have bits set. lo can always become 0.\n-  const TypeLong* t1l = t1->is_long();\n-  const TypeLong* t2l = t2->is_long();\n-  if ((t1l->_lo >= 0) &&\n-      (t1l->_hi > 0)  &&\n-      (t2l->_lo >= 0) &&\n-      (t2l->_hi > 0)) {\n-    \/\/ hi - set all bits below the highest bit. Using round_down to avoid overflow.\n-    const TypeLong* t1x = TypeLong::make(0, round_down_power_of_2(t1l->_hi) + (round_down_power_of_2(t1l->_hi) - 1), t1l->_widen);\n-    const TypeLong* t2x = TypeLong::make(0, round_down_power_of_2(t2l->_hi) + (round_down_power_of_2(t2l->_hi) - 1), t2l->_widen);\n-    return t1x->meet(t2x);\n-  }\n+\n","filename":"src\/hotspot\/share\/opto\/addnode.cpp","additions":41,"deletions":36,"binary":false,"changes":77,"status":"modified"},{"patch":"@@ -0,0 +1,77 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2.irTests;\n+\n+import compiler.lib.ir_framework.*;\n+\n+\/*\n+ * @test\n+ * @summary verify that constant folding is done on xor\n+ * @library \/test\/lib \/\n+ * @requires vm.compiler2.enabled\n+ * @run driver compiler.c2.irTests.ConstFoldingTests\n+ *\/\n+\n+public class ConstFoldingTests {\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (c1 ^c2)  => c3 (constant folded)\n+    public int testConstXorI() {\n+        int c = 42;\n+        return c ^ 2025;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (c1 ^ c2)  => c3 (constant folded)\n+    public long testConstXorL() {\n+        long c = 42;\n+        return c ^ 2025L;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_I, \"1\"})\n+    \/\/ Checks (x ^ x)  => c3 (constant folded)\n+    @Arguments(values = Argument.RANDOM_EACH)\n+    public int testConstXorISelf(int x) {\n+        return x ^ x;\n+    }\n+\n+    @Test\n+    @IR(failOn = {IRNode.XOR})\n+    @IR(counts = {IRNode.CON_L, \"1\"})\n+    \/\/ Checks (x ^ x)  => c3 (constant folded)\n+    @Arguments(values = Argument.RANDOM_EACH)\n+    public long testConstXorLSelf(long x) {\n+        return x ^ x;\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/irTests\/ConstFoldingTests.java","additions":77,"deletions":0,"binary":false,"changes":77,"status":"added"}]}