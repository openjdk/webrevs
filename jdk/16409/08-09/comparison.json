{"files":[{"patch":"@@ -181,1 +181,1 @@\n-    _bci2block_successors.at_put_grow(cur_bci, BlockList(), BlockList());\n+    _bci2block_successors.at_put_grow(cur_bci, BlockList());\n","filename":"src\/hotspot\/share\/c1\/c1_GraphBuilder.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-  public:\n+ public:\n","filename":"src\/hotspot\/share\/memory\/allocation.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -405,2 +405,2 @@\n-  template<typename... Args >\n-  E& at_grow(int i, const Args&... args) {\n+  template<typename Constructor>\n+  E& at_grow_with(int i, Constructor ctr) {\n@@ -412,1 +412,1 @@\n-        ::new (&this->_data[j]) E(args...);\n+        ctr(&this->_data[j]);\n@@ -419,2 +419,9 @@\n-  template<typename... Args>\n-  void at_put_grow(int i, const E& elem, const Args&... args) {\n+  template<typename... Args >\n+  E& at_grow(int i, const Args&... args) {\n+    return at_grow_with(i, [&](E* ptr) {\n+      ::new (ptr) E(args...);\n+    });\n+  }\n+\n+  template<typename Constructor>\n+  void at_put_grow_with(int i, Constructor ctr) {\n@@ -426,1 +433,1 @@\n-        ::new (&this->_data[j]) E(args...);\n+        ctr(&this->_data[j], \/* last elem *\/false);\n@@ -430,1 +437,12 @@\n-    this->_data[i] = elem;\n+    ctr(&this->_data[i], \/* last elem *\/true);\n+  }\n+\n+  template<typename... Args>\n+  void at_put_grow(int i, const E& elem, const Args&... args) {\n+    at_put_grow_with(i, [&](E* ptr, bool is_last_elem) {\n+      if (is_last_elem) {\n+        ::new (ptr) E(elem);\n+      } else {\n+        ::new (ptr) E(args...);\n+      }\n+    });\n","filename":"src\/hotspot\/share\/utilities\/growableArray.hpp","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -562,0 +562,48 @@\n+struct Elt {\n+  static int copy_calls;\n+  const char* str; int x;\n+\n+  Elt(const Elt& e)\n+    : str(e.str), x(e.x) {\n+    copy_calls++;\n+  }\n+  Elt(Elt&&) = default;\n+  Elt& operator=(const Elt&) = default;\n+  Elt& operator=(Elt&&) = default;\n+  Elt() {\n+  }\n+  Elt(const char* str, int x)\n+    : str(str),\n+      x(x) {\n+  }\n+};\n+int Elt::copy_calls = 0;\n+\n+TEST_VM_F(GrowableArrayTest, AtPutGrowOnlyCopiesLastElement) {\n+  Elt::copy_calls = 0;\n+  GrowableArray<Elt> arr;\n+  arr.at_put_grow(16, Elt{\"final_elt\", 16}, \"earlier_elt\", 1);\n+  for (int i = 0; i < 16; i++) {\n+    ASSERT_STREQ(arr.at(i).str, \"earlier_elt\");\n+    ASSERT_EQ(arr.at(i).x, 1);\n+  }\n+  ASSERT_STREQ(arr.at(16).str, \"final_elt\");\n+  ASSERT_EQ(arr.at(16).x, 16);\n+  \/\/ Last element is copied\n+  ASSERT_EQ(Elt::copy_calls, 1);\n+}\n+\n+TEST_VM_F(GrowableArrayTest, ShouldBeAbleToGrowByCopying) {\n+  Elt::copy_calls = 0;\n+  GrowableArray<Elt> arr{0};\n+  arr.at_put_grow(16, Elt{\"final_elt\", 16}, Elt{\"\",0});\n+  ASSERT_GE(Elt::copy_calls, 16);\n+}\n+\n+TEST_VM_F(GrowableArrayTest, CanGrowWithoutCopying) {\n+  Elt::copy_calls = 0;\n+  GrowableArray<Elt> arr{0};\n+  arr.at_grow(15, \"hello\", 5);\n+  ASSERT_EQ(Elt::copy_calls, 0);\n+}\n+\n@@ -604,40 +652,0 @@\n-\n-struct Elt {\n-  static int copy_calls;\n-  const char* str; int x;\n-\n-  Elt(const Elt& e)\n-    : str(e.str), x(e.x) {\n-    copy_calls++;\n-  }\n-  Elt(Elt&&) = default;\n-  Elt& operator=(const Elt&) = default;\n-  Elt& operator=(Elt&&) = default;\n-  Elt() {\n-  }\n-  Elt(const char* str, int x)\n-    : str(str),\n-      x(x) {\n-  }\n-};\n-int Elt::copy_calls = 0;\n-\n-TEST(GrowableArrayCHeap, ShouldBeAbleToGrowWithoutCopying) {\n-  Elt::copy_calls = 0;\n-  GrowableArrayCHeap<Elt, mtTest> arr;\n-  arr.at_put_grow(16, Elt{\"final_elt\", 16}, \"earlier_elt\", 1);\n-  for (int i = 0; i < 16; i++) {\n-    ASSERT_STREQ(arr.at(i).str, \"earlier_elt\");\n-    ASSERT_EQ(arr.at(i).x, 1);\n-  }\n-  ASSERT_STREQ(arr.at(16).str, \"final_elt\");\n-  ASSERT_EQ(arr.at(16).x, 16);\n-  ASSERT_EQ(Elt::copy_calls, 0);\n-}\n-TEST(GrowableArrayCHeap, ShouldBeAbleToGrowByCopying) {\n-  Elt::copy_calls = 0;\n-  GrowableArrayCHeap<Elt, mtTest> arr{0};\n-  arr.at_put_grow(16, Elt{\"final_elt\", 16}, Elt{\"\",0});\n-  ASSERT_GE(Elt::copy_calls, 16);\n-}\n-\n","filename":"test\/hotspot\/gtest\/utilities\/test_growableArray.cpp","additions":48,"deletions":40,"binary":false,"changes":88,"status":"modified"}]}