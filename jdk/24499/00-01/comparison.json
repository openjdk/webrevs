{"files":[{"patch":"@@ -76,0 +76,3 @@\n+        Set<String> errors = new LinkedHashSet<>();\n+        Diagnostics diagnostics = (context, error) ->\n+                errors.add(\"Error while processing method: \" + context + \": \" + error.getMessage());\n@@ -79,1 +82,1 @@\n-            NativeMethodFinder finder = NativeMethodFinder.create(err, classesToScan, systemClassResolver);\n+            NativeMethodFinder finder = NativeMethodFinder.create(diagnostics, classesToScan, systemClassResolver);\n@@ -87,1 +90,1 @@\n-            case DUMP_ALL -> dumpAll(allRestrictedMethods);\n+            case DUMP_ALL -> dumpAll(allRestrictedMethods, errors);\n@@ -161,1 +164,1 @@\n-    private void dumpAll(SortedMap<ClassFileSource, SortedMap<ClassDesc, List<RestrictedUse>>> allRestrictedMethods) {\n+    private void dumpAll(SortedMap<ClassFileSource, SortedMap<ClassDesc, List<RestrictedUse>>> allRestrictedMethods, Set<String> errors) {\n@@ -182,0 +185,4 @@\n+        if (!errors.isEmpty()) {\n+            err.println(\"Error(s) while processing classes:\");\n+            errors.forEach(error -> err.println(\"  \" + error));\n+        }\n@@ -197,0 +204,4 @@\n+\n+    interface Diagnostics {\n+        void error(MethodRef context, JNativeScanFatalError error);\n+    }\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jnativescan\/JNativeScanTask.java","additions":14,"deletions":3,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import com.sun.tools.jnativescan.JNativeScanTask.Diagnostics;\n@@ -31,1 +32,0 @@\n-import java.io.PrintWriter;\n@@ -48,1 +48,1 @@\n-    private final PrintWriter err;\n+    private final Diagnostics diagnostics;\n@@ -52,2 +52,2 @@\n-    private NativeMethodFinder(PrintWriter err, ClassResolver classesToScan, ClassResolver systemClassResolver) {\n-        this.err = err;\n+    private NativeMethodFinder(Diagnostics diagnostics, ClassResolver classesToScan, ClassResolver systemClassResolver) {\n+        this.diagnostics = diagnostics;\n@@ -58,1 +58,1 @@\n-    public static NativeMethodFinder create(PrintWriter err, ClassResolver classesToScan,\n+    public static NativeMethodFinder create(Diagnostics diagnostics, ClassResolver classesToScan,\n@@ -60,1 +60,1 @@\n-        return new NativeMethodFinder(err, classesToScan, systemClassResolver);\n+        return new NativeMethodFinder(diagnostics, classesToScan, systemClassResolver);\n@@ -75,17 +75,16 @@\n-                         try {\n-                             code.forEach(e -> {\n-                                 switch (e) {\n-                                     case InvokeInstruction invoke -> {\n-                                         MethodRef ref = MethodRef.ofInvokeInstruction(invoke);\n-                                         if (isRestrictedMethod(ref)) {\n-                                             perMethod.add(ref);\n-                                         }\n-                                     }\n-                                     default -> {\n-                                     }\n-                                 }\n-                             });\n-                         } catch (JNativeScanFatalError e) {\n-                             err.println(\"Error while processing method: \" +\n-                                     MethodRef.ofModel(methodModel) + \": \" + e.getMessage());\n-                         }\n+                        code.forEach(e -> {\n+                            switch (e) {\n+                                case InvokeInstruction invoke -> {\n+                                    MethodRef ref = MethodRef.ofInvokeInstruction(invoke);\n+                                    try {\n+                                        if (isRestrictedMethod(ref)) {\n+                                            perMethod.add(ref);\n+                                        }\n+                                    } catch (JNativeScanFatalError ex) {\n+                                        diagnostics.error(MethodRef.ofModel(methodModel), ex);\n+                                    }\n+                                }\n+                                default -> {\n+                                }\n+                            }\n+                        });\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/jnativescan\/NativeMethodFinder.java","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -38,0 +38,3 @@\n+import java.util.List;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -52,1 +55,1 @@\n-        assertSuccess(jnativescan(\"--class-path\", MISSING_SYSTEM.toString(), \"--release\", \"21\"))\n+        final List<String> stderr = assertSuccess(jnativescan(\"--class-path\", MISSING_SYSTEM.toString(), \"--release\", \"21\"))\n@@ -54,0 +57,1 @@\n+                .stderrShouldContain(\"Error(s) while processing classes\")\n@@ -57,1 +61,4 @@\n-                .stderrShouldContain(\"java.lang.Compiler\");\n+                .stderrShouldContain(\"java.lang.Compiler\")\n+                .stderrAsLines();\n+\n+        assertEquals(2, stderr.size(), \"Unexpected number of lines in stderr\");\n","filename":"test\/langtools\/tools\/jnativescan\/TestMissingSystemClass.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+        java.lang.Compiler.enable(); \/\/ should be de-duplicated in the error logs\n","filename":"test\/langtools\/tools\/jnativescan\/cases\/classpath\/missingsystem\/App.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}