{"files":[{"patch":"@@ -174,2 +174,0 @@\n-vmTestbase\/gc\/lock\/jni\/jnilock002\/TestDescription.java 8192647 generic-all\n-\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -77,1 +77,0 @@\n-java\/util\/Properties\/StoreReproducibilityTest.java 0000000 generic-all\n","filename":"test\/jdk\/ProblemList-Virtual.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -516,1 +516,0 @@\n-java\/lang\/management\/MemoryMXBean\/PendingAllGC.sh               8158837 generic-all\n@@ -668,1 +667,0 @@\n-javax\/swing\/JFileChooser\/6798062\/bug6798062.java 8146446 windows-all\n@@ -777,1 +775,0 @@\n-javax\/swing\/JTabbedPane\/4666224\/bug4666224.java 8144124  macosx-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,211 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Set;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * @test\n+ * @summary Checks that all ProblemList files under set of directories have a valid format\n+ *          and that each problem list entry refers to an existing test file.\n+ * @run main CheckProblemLists ..\/..\/..\n+ *\/\n+public class CheckProblemLists {\n+\n+    private static final Set<String> OPERATING_SYSTEMS = Set.of(\"aix\", \"generic\", \"linux\", \"macosx\", \"windows\");\n+    private static final Set<String> ARCHITECTURES = Set.of(\"aarch64\", \"all\", \"i586\", \"ppc64\", \"ppc64le\", \"s390x\", \"x64\");\n+    private static final Pattern BUG_NUMBER = Pattern.compile(\"(?:[A-Z]+-)?(\\\\d+)\");\n+\n+    record Error(Path path, int lineNum, String message, String line) {\n+        @Override\n+        public String toString() {\n+            return String.format(\"%s:%d: %s%n%s\", path, lineNum, message, line);\n+        }\n+    }\n+\n+    record TestAndIssue(String test, String issueId) {\n+    }\n+\n+    \/**\n+     * Searches for test roots (directories containing \"TEST.ROOT\" files) and problem lists (files\n+     * whose name starts with \"ProblemList\"). Relative paths in `args` are resolved against the\n+     * value of the test.src system property.\n+     *\n+     * All problem list files are then checked against the discovered set of test roots.\n+     *\/\n+    public static void main(String[] args) throws Exception {\n+        List<Path> problemLists = new ArrayList<>();\n+        Set<Path> testRoots = new HashSet<>();\n+\n+        scan(args, problemLists, testRoots);\n+        String[] extraTestRoots = System.getProperty(\"extraTestRoots\", \"\").split(\":\");\n+        if (extraTestRoots.length != 0) {\n+            scan(extraTestRoots, null, testRoots);\n+        }\n+\n+        problemLists.sort(Path::compareTo);\n+        ArrayList<Error> errors = new ArrayList<>();\n+        for (Path problemList : problemLists) {\n+            System.out.printf(\"Checking %s%n\", problemList.normalize());\n+            new CheckProblemLists(problemList, testRoots, errors).parse();\n+        }\n+\n+        System.out.printf(\"Checked %d problem list files%n\", problemLists.size());\n+        if (!errors.isEmpty()) {\n+            System.out.println(\"Test roots:\");\n+            for (Path testRoot : testRoots) {\n+                System.out.printf(\"  %s%n\", testRoot);\n+            }\n+            System.out.println(\"Following errors found:\");\n+            for (Error error : errors) {\n+                System.out.printf(\"%s%n%n\", error);\n+            }\n+            throw new AssertionError(\"%d errors found while checking %d problem list files\"\n+                                     .formatted(errors.size(), problemLists.size()));\n+        }\n+    }\n+\n+    static void scan(String[] args, List<Path> problemLists, Set<Path> testRoots) throws IOException {\n+        for (String arg : args) {\n+            Path testDir = Path.of(arg);\n+            if (!testDir.isAbsolute()) {\n+                String testSrc = Objects.requireNonNull(System.getProperty(\"test.src\"),\n+                 \"test.src property is required to resolve relative path: \" + testDir);\n+                testDir = Path.of(testSrc).resolve(testDir);\n+            }\n+            Files.walk(testDir.normalize()).forEach(path -> {\n+                String fileName = path.toFile().getName();\n+                if (fileName.startsWith(\"ProblemList\")) {\n+                    if (problemLists != null) {\n+                        problemLists.add(path);\n+                    }\n+                } else if (fileName.equals(\"TEST.ROOT\")) {\n+                    testRoots.add(path.getParent());\n+                }\n+            });\n+        }\n+    }\n+\n+    private CheckProblemLists(Path path, Set<Path> testRoots, List<Error> errors) {\n+        this.path = path;\n+        this.testRoots = testRoots;\n+        this.errors = errors;\n+    }\n+\n+    final Path path;\n+    final Set<Path> testRoots;\n+    final List<Error> errors;\n+    final Map<TestAndIssue, String> seen = new HashMap<>();\n+\n+    int lineNum = 1;\n+    String line;\n+\n+    void error(String format, Object... args) {\n+        errors.add(new Error(path, lineNum, format.formatted(args), line));\n+    }\n+\n+    boolean check(boolean condition, String format, Object... args) {\n+        if (!condition) {\n+            error(format, args);\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    void parse() throws IOException {\n+        Files.lines(path).forEach(l -> {\n+            line = l.trim();\n+            if (!line.isEmpty() && line.charAt(0) != '#') {\n+                var fields = line.split(\"\\\\s+\");\n+                if (!check(fields.length >= 3, \"expected 3 or more fields, got %d\", fields.length)) {\n+                    return;\n+                }\n+                \/\/ Check platforms field\n+                String platforms = fields[2];\n+                for (var platform : platforms.split(\",\")) {\n+                    if (!check(platform.contains(\"-\"), \"platform should be <os>-<arch>: %s\", platform)) {\n+                        return;\n+                    }\n+                    var parts = platform.split(\"-\", 2);\n+                    String os = parts[0];\n+                    String arch = parts[1];\n+                    if (!check(OPERATING_SYSTEMS.contains(os), \"unknown os: %\", os)) {\n+                        return;\n+                    }\n+                    if (!check(ARCHITECTURES.contains(arch), \"unknown arch: %s\", arch)) {\n+                        return;\n+                    }\n+                }\n+\n+                String test = fields[0];\n+                Path testPath = checkTestExists(test);\n+                if (testPath == null) {\n+                    error(\"%s does not exist under any test root\", test);\n+                    return;\n+                }\n+\n+                String issueIds = fields[1];\n+                for (String issueId : issueIds.split(\",\")) {\n+                    Matcher matcher = BUG_NUMBER.matcher(issueId);\n+                    if (!check(matcher.matches(), \"issue id does not match %s: %s\", BUG_NUMBER.pattern(), issueId)) {\n+                        continue;\n+                    }\n+                    TestAndIssue testAndIssue = new TestAndIssue(test, matcher.group(1));\n+                    String where = seen.get(testAndIssue);\n+                    if (!check(where == null, \"%s duplicates %s\", testAndIssue, where)) {\n+                        return;\n+                    }\n+                    seen.put(testAndIssue, \"%s:%d\".formatted(path, lineNum));\n+                }\n+            }\n+\n+            lineNum++;\n+        });\n+    }\n+\n+    \/**\n+     * Checks that a source file corresponding to `test` exists under a test root.\n+     *\/\n+    private Path checkTestExists(String test) {\n+        String testFile = test.contains(\"#\") ? test.split(\"#\")[0] : test;\n+        for (Path testRoot : testRoots) {\n+            Path testPath = testRoot.resolve(testFile);\n+            if (Files.exists(testPath)) {\n+                return testPath;\n+            }\n+        }\n+        return null;\n+    }\n+}\n","filename":"test\/jdk\/build\/problemLists\/CheckProblemLists.java","additions":211,"deletions":0,"binary":false,"changes":211,"status":"added"}]}