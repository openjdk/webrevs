{"files":[{"patch":"@@ -257,1 +257,1 @@\n-    dumper.dump(path, out, level, false, HeapDumper::default_num_of_dump_threads());\n+    dumper.dump(path, out, level);\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -496,1 +496,1 @@\n-  jlong parallel = HeapDumper::default_num_of_dump_threads();\n+  jlong parallel = -1; \/\/ auto select.\n@@ -523,1 +523,1 @@\n-  dumper.dump(_filename.value(), output(), (int) level, _overwrite.value(), (uint)parallel);\n+  dumper.dump(_filename.value(), output(), (int)level, _overwrite.value(), (int)parallel);\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2599,1 +2599,1 @@\n-int HeapDumper::dump(const char* path, outputStream* out, int compression, bool overwrite, uint num_dump_threads) {\n+int HeapDumper::dump(const char* path, outputStream* out, int compression, bool overwrite, int num_dump_threads) {\n@@ -2607,0 +2607,15 @@\n+\n+  if (num_dump_threads < 0) {\n+    num_dump_threads = default_num_of_dump_threads();\n+    if (_oome) {\n+      \/\/ Each additional parallel writer requires several MB of internal memory\n+      \/\/ (DumpWriter buffer, DumperClassCacheTable, GZipCompressor buffers).\n+      \/\/ For the OOM handling we may already be limited in memory.\n+      \/\/ Lets ensure we have at least 20MB per thread.\n+      julong max_threads = os::free_memory() \/ (20 * M);\n+      if (num_dump_threads > max_threads) {\n+        num_dump_threads = MAX2<int>(1, (int)max_threads);\n+      }\n+    }\n+  }\n+\n@@ -2633,1 +2648,1 @@\n-  VM_HeapDumper dumper(&writer, _gc_before_heap_dump, _oome, num_dump_threads);\n+  VM_HeapDumper dumper(&writer, _gc_before_heap_dump, _oome, (uint)num_dump_threads);\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":17,"deletions":2,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,2 @@\n-  \/\/ parallel_thread_num >= 0 indicates thread numbers of parallel object dump\n-  int dump(const char* path, outputStream* out = nullptr, int compression = -1, bool overwrite = false, uint parallel_thread_num = 1);\n+  \/\/ parallel_thread_num >= 0 indicates thread numbers of parallel object dump, -1 means \"auto select\".\n+  int dump(const char* path, outputStream* out = nullptr, int compression = -1, bool overwrite = false, int parallel_thread_num = -1);\n@@ -74,2 +74,2 @@\n-  static uint default_num_of_dump_threads() {\n-    return MAX2<uint>(1, (uint)os::initial_active_processor_count() * 3 \/ 8);\n+  static int default_num_of_dump_threads() {\n+    return MAX2<int>(1, os::initial_active_processor_count() * 3 \/ 8);\n","filename":"src\/hotspot\/share\/services\/heapDumper.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}