{"files":[{"patch":"@@ -257,1 +257,1 @@\n-    dumper.dump(path, out, level, false, HeapDumper::default_num_of_dump_threads());\n+    dumper.dump(path, out, level);\n","filename":"src\/hotspot\/share\/services\/attachListener.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2607,0 +2607,12 @@\n+\n+  if (_oome && num_dump_threads > 1) {\n+    \/\/ Each additional parallel writer requires several MB of internal memory\n+    \/\/ (DumpWriter buffer, DumperClassCacheTable, GZipCompressor buffers).\n+    \/\/ For the OOM handling we may already be limited in memory.\n+    \/\/ Lets ensure we have at least 20MB per thread.\n+    julong max_threads = os::free_memory() \/ (20 * M);\n+    if (num_dump_threads > max_threads) {\n+      num_dump_threads = MAX2<uint>(1, (uint)max_threads);\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/services\/heapDumper.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,2 +63,2 @@\n-  \/\/ parallel_thread_num >= 0 indicates thread numbers of parallel object dump\n-  int dump(const char* path, outputStream* out = nullptr, int compression = -1, bool overwrite = false, uint parallel_thread_num = 1);\n+  \/\/ parallel_thread_num >= 0 indicates thread numbers of parallel object dump.\n+  int dump(const char* path, outputStream* out = nullptr, int compression = -1, bool overwrite = false, uint parallel_thread_num = default_num_of_dump_threads());\n","filename":"src\/hotspot\/share\/services\/heapDumper.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}