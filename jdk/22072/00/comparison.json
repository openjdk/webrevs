{"files":[{"patch":"@@ -63,2 +63,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n@@ -296,2 +294,1 @@\n-            \/\/ Perform security check before returning address\n-            return Net.getRevealedLocalAddress(localAddress);\n+            return localAddress;\n@@ -576,14 +573,5 @@\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (connected || (sm == null)) {\n-                    \/\/ connected or no security manager\n-                    int n = receive(dst, connected);\n-                    if (blocking) {\n-                        while (IOStatus.okayToRetry(n) && isOpen()) {\n-                            park(Net.POLLIN);\n-                            n = receive(dst, connected);\n-                        }\n-                    }\n-                    if (n > 0 || (n == 0 && isOpen())) {\n-                        \/\/ sender address is in socket address buffer\n-                        sender = sourceSocketAddress();\n+                int n = receive(dst, connected);\n+                if (blocking) {\n+                    while (IOStatus.okayToRetry(n) && isOpen()) {\n+                        park(Net.POLLIN);\n+                        n = receive(dst, connected);\n@@ -591,3 +579,4 @@\n-                } else {\n-                    \/\/ security manager and unconnected\n-                    sender = untrustedReceive(dst);\n+                }\n+                if (n > 0 || (n == 0 && isOpen())) {\n+                    \/\/ sender address is in socket address buffer\n+                    sender = sourceSocketAddress();\n@@ -604,43 +593,0 @@\n-    \/**\n-     * Receives a datagram into an untrusted buffer. When there is a security\n-     * manager set, and the socket is not connected, datagrams have to be received\n-     * into a buffer that is not accessible to the user. The datagram is copied\n-     * into the user's buffer when the sender address is accepted by the security\n-     * manager.\n-     *\/\n-    private SocketAddress untrustedReceive(ByteBuffer dst) throws IOException {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        assert readLock.isHeldByCurrentThread()\n-                && sm != null && remoteAddress == null;\n-\n-        boolean blocking = isBlocking();\n-        for (;;) {\n-            int n;\n-            ByteBuffer bb = Util.getTemporaryDirectBuffer(dst.remaining());\n-            try {\n-                n = receive(bb, false);\n-                if (n >= 0) {\n-                    \/\/ sender address is in socket address buffer\n-                    InetSocketAddress isa = sourceSocketAddress();\n-                    try {\n-                        sm.checkAccept(isa.getAddress().getHostAddress(), isa.getPort());\n-                        bb.flip();\n-                        dst.put(bb);\n-                        return isa;\n-                    } catch (SecurityException se) {\n-                        \/\/ ignore datagram\n-                    }\n-                }\n-            } finally {\n-                Util.releaseTemporaryDirectBuffer(bb);\n-            }\n-\n-            if (blocking && IOStatus.okayToRetry(n) && isOpen()) {\n-                park(Net.POLLIN);\n-            } else {\n-                return null;\n-            }\n-        }\n-    }\n-\n@@ -678,3 +624,1 @@\n-            long startNanos = System.nanoTime();\n-            long remainingNanos = nanos;\n-            SocketAddress sender = null;\n+            boolean completed = false;\n@@ -684,3 +628,2 @@\n-                do {\n-                    ByteBuffer dst = tryBlockingReceive(connected, bufLength, remainingNanos);\n-\n+                ByteBuffer dst = tryBlockingReceive(connected, bufLength, nanos);\n+                if (dst != null) {\n@@ -688,37 +631,9 @@\n-                    if (dst != null) {\n-                        try {\n-                            \/\/ sender address is in socket address buffer\n-                            sender = sourceSocketAddress();\n-\n-                            \/\/ check sender when security manager set and not connected\n-                            @SuppressWarnings(\"removal\")\n-                            SecurityManager sm = System.getSecurityManager();\n-                            if (sm != null && !connected) {\n-                                InetSocketAddress isa = (InetSocketAddress) sender;\n-                                try {\n-                                    sm.checkAccept(isa.getAddress().getHostAddress(), isa.getPort());\n-                                } catch (SecurityException e) {\n-                                    sender = null;\n-                                }\n-                            }\n-\n-                            if (sender != null) {\n-                                \/\/ copy bytes to the DatagramPacket, and set length and sender\n-                                synchronized (p) {\n-                                    \/\/ re-read p.bufLength in case DatagramPacket changed\n-                                    int len = Math.min(dst.limit(), DatagramPackets.getBufLength(p));\n-                                    dst.get(p.getData(), p.getOffset(), len);\n-                                    DatagramPackets.setLength(p, len);\n-                                    p.setSocketAddress(sender);\n-                                }\n-                            } else {\n-                                \/\/ need to retry, adjusting timeout if needed\n-                                if (nanos > 0) {\n-                                    remainingNanos = nanos - (System.nanoTime() - startNanos);\n-                                    if (remainingNanos <= 0) {\n-                                        throw new SocketTimeoutException(\"Receive timed out\");\n-                                    }\n-                                }\n-                            }\n-                        } finally {\n-                            Util.offerFirstTemporaryDirectBuffer(dst);\n+                    try {\n+                        SocketAddress sender = sourceSocketAddress();\n+                        synchronized (p) {\n+                            \/\/ copy bytes to the DatagramPacket, and set length and sender.\n+                            \/\/ Need to re-read p.bufLength in case DatagramPacket changed\n+                            int len = Math.min(dst.limit(), DatagramPackets.getBufLength(p));\n+                            dst.get(p.getData(), p.getOffset(), len);\n+                            DatagramPackets.setLength(p, len);\n+                            p.setSocketAddress(sender);\n@@ -726,0 +641,2 @@\n+                    } finally {\n+                        Util.offerFirstTemporaryDirectBuffer(dst);\n@@ -727,1 +644,2 @@\n-                } while (sender == null && isOpen());\n+                    completed = true;\n+                }\n@@ -729,1 +647,1 @@\n-                endRead(true, (sender != null));\n+                endRead(true, completed);\n@@ -887,2 +805,0 @@\n-                    @SuppressWarnings(\"removal\")\n-                    SecurityManager sm = System.getSecurityManager();\n@@ -890,7 +806,0 @@\n-                    if (sm != null) {\n-                        if (ia.isMulticastAddress()) {\n-                            sm.checkMulticast(ia);\n-                        } else {\n-                            sm.checkConnect(ia.getHostAddress(), isa.getPort());\n-                        }\n-                    }\n@@ -1347,4 +1256,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkListen(isa.getPort());\n@@ -1376,11 +1281,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            InetAddress ia = isa.getAddress();\n-            if (ia.isMulticastAddress()) {\n-                sm.checkMulticast(ia);\n-            } else {\n-                sm.checkConnect(ia.getHostAddress(), isa.getPort());\n-                sm.checkAccept(ia.getHostAddress(), isa.getPort());\n-            }\n-        }\n@@ -1592,1 +1486,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -1597,6 +1490,3 @@\n-                PrivilegedExceptionAction<Method> pae = () -> {\n-                    Method m = AbstractSelectableChannel.class.getDeclaredMethod(\"forEach\", Consumer.class);\n-                    m.setAccessible(true);\n-                    return m;\n-                };\n-                FOREACH = AccessController.doPrivileged(pae);\n+                Method m = AbstractSelectableChannel.class.getDeclaredMethod(\"forEach\", Consumer.class);\n+                m.setAccessible(true);\n+                FOREACH = m;\n@@ -1649,5 +1539,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkMulticast(group);\n-\n@@ -2054,4 +1939,1 @@\n-                PrivilegedExceptionAction<MethodHandles.Lookup> pa = () ->\n-                    MethodHandles.privateLookupIn(DatagramPacket.class, MethodHandles.lookup());\n-                @SuppressWarnings(\"removal\")\n-                MethodHandles.Lookup l = AccessController.doPrivileged(pa);\n+                MethodHandles.Lookup l = MethodHandles.privateLookupIn(DatagramPacket.class, MethodHandles.lookup());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramChannelImpl.java","additions":31,"deletions":149,"binary":false,"changes":180,"status":"modified"},{"patch":"@@ -51,3 +51,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n@@ -170,2 +167,1 @@\n-        InetSocketAddress local = dc.localAddress();\n-        if (local == null || isClosed())\n+        if (isClosed()) {\n@@ -173,13 +169,2 @@\n-\n-        InetAddress addr = local.getAddress();\n-        if (addr.isAnyLocalAddress())\n-            return local;\n-\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            try {\n-                sm.checkConnect(addr.getHostAddress(), -1);\n-            } catch (SecurityException x) {\n-                return new InetSocketAddress(local.getPort());\n-            }\n+        } else {\n+            return dc.localAddress();\n@@ -187,1 +172,0 @@\n-        return local;\n@@ -226,11 +210,1 @@\n-        InetAddress result = local.getAddress();\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            try {\n-                sm.checkConnect(result.getHostAddress(), -1);\n-            } catch (SecurityException x) {\n-                return new InetSocketAddress(0).getAddress();\n-            }\n-        }\n-        return result;\n+        return local.getAddress();\n@@ -487,5 +461,0 @@\n-                \/\/ already a member but need to check permission anyway\n-                @SuppressWarnings(\"removal\")\n-                SecurityManager sm = System.getSecurityManager();\n-                if (sm != null)\n-                    sm.checkMulticast(group);\n@@ -504,4 +473,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null)\n-            sm.checkMulticast(group);\n@@ -544,6 +509,1 @@\n-                    PrivilegedAction<InetAddress> pa;\n-                    pa = () -> ni.inetAddresses().findFirst().orElse(null);\n-                    @SuppressWarnings(\"removal\")\n-                    InetAddress ia = AccessController.doPrivileged(pa);\n-                    if (ia == null)\n-                        throw new SocketException(\"Network interface has no IP address\");\n+                    InetAddress ia = ni.inetAddresses().findFirst().orElse(null);\n@@ -663,4 +623,1 @@\n-                PrivilegedExceptionAction<Lookup> pa = () ->\n-                    MethodHandles.privateLookupIn(NetworkInterface.class, MethodHandles.lookup());\n-                @SuppressWarnings(\"removal\")\n-                MethodHandles.Lookup l = AccessController.doPrivileged(pa);\n+                Lookup l = MethodHandles.privateLookupIn(NetworkInterface.class, MethodHandles.lookup());\n@@ -706,4 +663,1 @@\n-                PrivilegedExceptionAction<Lookup> pa = () ->\n-                    MethodHandles.privateLookupIn(DatagramSocket.class, MethodHandles.lookup());\n-                @SuppressWarnings(\"removal\")\n-                MethodHandles.Lookup l = AccessController.doPrivileged(pa);\n+                Lookup l = MethodHandles.privateLookupIn(DatagramSocket.class, MethodHandles.lookup());\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/DatagramSocketAdaptor.java","additions":7,"deletions":53,"binary":false,"changes":60,"status":"modified"}]}