{"files":[{"patch":"@@ -290,1 +290,0 @@\n-  auto i = [](MemTag f) -> uint8_t { return (uint8_t)f; };\n@@ -299,1 +298,1 @@\n-  \/\/ Take a list of testranges and check that those and only those are found in the tree.\n+  \/\/ Take a sorted list of testranges and check that those and only those are found in the tree.\n@@ -304,0 +303,1 @@\n+    VMATree::position previous_to = 0;\n@@ -306,0 +306,3 @@\n+      assert(previous_to == 0 || previous_to < expect.from, \"the expected list must be sorted\");\n+      previous_to = expect.to;\n+\n@@ -318,0 +321,3 @@\n+      \/\/ Same state\n+      EXPECT_EQ(expect.state, found.start->val().out.type());\n+      EXPECT_EQ(expect.state, found.end->val().in.type());\n@@ -319,0 +325,1 @@\n+    \/\/ expected must cover all nodes\n@@ -418,0 +425,13 @@\n+\n+  {\n+    testrange expected[]{\n+        { 0,  50,          mtGC, si, State::Reserved},\n+        {50,  75,          mtGC, si, State::Released},\n+        {75, 100, mtClassShared, si, State::Reserved}\n+    };\n+    VMATree tree;\n+    Tree::RegionData class_shared(si, mtClassShared);\n+    tree.reserve_mapping(0, 100, class_shared);\n+    tree.set_tag(0, 75, mtGC);\n+    expect_equivalent_form(expected, tree);\n+  }\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":22,"deletions":2,"binary":false,"changes":24,"status":"modified"}]}