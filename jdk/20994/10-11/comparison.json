{"files":[{"patch":"@@ -237,0 +237,4 @@\n+  int size() {\n+    return _node_count;\n+  }\n+\n","filename":"src\/hotspot\/share\/nmt\/nmtTreap.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -243,1 +243,1 @@\n-  position end = MIN2(from + size, range.end->key());\n+  position end = MIN2(from + size, pos(range.end));\n@@ -250,0 +250,2 @@\n+    \/\/ Using register_mapping may invalidate the already found range, so we must\n+    \/\/ use find_enclosing_range repeatedly\n@@ -256,1 +258,1 @@\n-    end = MIN2(from + size, range.end->key());\n+    end = MIN2(from + size, pos(range.end));\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-  IntervalState& in_state(TreapNode* node) {\n+  static IntervalState& in_state(TreapNode* node) {\n@@ -149,1 +149,1 @@\n-  IntervalState& out_state(TreapNode* node) {\n+  static IntervalState& out_state(TreapNode* node) {\n@@ -153,0 +153,4 @@\n+  static position pos(const TreapNode* node) {\n+    return node->key();\n+  }\n+\n@@ -208,0 +212,1 @@\n+  \/\/ Modify all ranges found in range [from, from+size) to have tag.\n@@ -218,0 +223,4 @@\n+  VMATreap& tree() {\n+    return _tree;\n+  }\n+\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+#include \"gtest\/gtest.h\"\n@@ -288,0 +289,1 @@\n+  using State = VMATree::StateType;\n@@ -289,0 +291,7 @@\n+  struct testrange {\n+    VMATree::position from;\n+    VMATree::position to;\n+    MemTag tag;\n+    NCS::StackIndex stack;\n+    State state;\n+  };\n@@ -290,0 +299,22 @@\n+  \/\/ Take a list of testranges and check that those and only those are found in the tree.\n+  auto expect_equivalent_form = [&](auto& expected, VMATree& tree) {\n+    int len = sizeof(expected) \/ sizeof(testrange);\n+    for (int i = 0; i < len; i++) {\n+      testrange expect = expected[i];\n+      VMATree::VMATreap::Range found = tree.tree().find_enclosing_range(expect.from);\n+      ASSERT_NE(nullptr, found.start);\n+      ASSERT_NE(nullptr, found.end);\n+      \/\/ Same region\n+      EXPECT_EQ(expect.from, found.start->key());\n+      EXPECT_EQ(expect.to, found.end->key());\n+      \/\/ Same tag\n+      EXPECT_EQ(expect.tag, found.start->val().out.mem_tag());\n+      EXPECT_EQ(expect.tag, found.end->val().in.mem_tag());\n+      \/\/ Same stack\n+      EXPECT_EQ(expect.stack, found.start->val().out.stack());\n+      EXPECT_EQ(expect.stack, found.end->val().in.stack());\n+    }\n+    EXPECT_EQ(len+1, tree.tree().size());\n+  };\n+  NCS::StackIndex si = NCS::StackIndex();\n+  Tree::RegionData rd(si, mtNone);\n@@ -292,2 +323,4 @@\n-    VMATree::SummaryDiff diff;\n-    Tree::RegionData rd(NCS::StackIndex(), mtNone);\n+    testrange expected[2]{\n+        {  0, 500,          mtGC, si, State::Reserved},\n+        {500, 600, mtClassShared, si, State::Reserved}\n+    };\n@@ -296,7 +329,1 @@\n-    VMATree::SummaryDiff result = tree.reserve_mapping(0, 500, rd);\n-    diff.add(result);\n-    EXPECT_EQ(500, diff.tag[i(mtNone)].reserve);\n-\n-    result = tree.reserve_mapping(500, 100, rd);\n-    diff.add(result);\n-    EXPECT_EQ(600, diff.tag[i(mtNone)].reserve);\n+    tree.reserve_mapping(0, 600, rd);\n@@ -304,10 +331,3 @@\n-    result = tree.set_tag(0, 500, mtGC);\n-    diff.add(result);\n-    EXPECT_EQ(100, diff.tag[i(mtNone)].reserve);\n-    EXPECT_EQ(500, diff.tag[i(mtGC)].reserve);\n-\n-    result = tree.set_tag(500, 100, mtClassShared);\n-    diff.add(result);\n-    EXPECT_EQ(0, diff.tag[i(mtNone)].reserve);\n-    EXPECT_EQ(500, diff.tag[i(mtGC)].reserve);\n-    EXPECT_EQ(100, diff.tag[i(mtClassShared)].reserve);\n+    tree.set_tag(0, 500, mtGC);\n+    tree.set_tag(500, 100, mtClassShared);\n+    expect_equivalent_form(expected, tree);\n@@ -318,2 +338,10 @@\n-    VMATree::SummaryDiff diff;\n-    Tree::RegionData rd(NCS::StackIndex(), mtNone);\n+    testrange expected[]{\n+        {  0, 100,          mtGC, si, State::Reserved},\n+        {100, 225,          mtGC, si, State::Committed},\n+        {225, 500,          mtGC, si, State::Reserved},\n+        {500, 550, mtClassShared, si, State::Reserved},\n+        {550, 560, mtClassShared, si, State::Committed},\n+        {560, 565, mtClassShared, si, State::Reserved},\n+        {565, 575, mtClassShared, si, State::Committed},\n+        {575, 600, mtClassShared, si, State::Reserved}\n+    };\n@@ -322,4 +350,1 @@\n-    VMATree::SummaryDiff result = tree.reserve_mapping(0, 600, rd);\n-    diff.add(result);\n-    EXPECT_EQ(600, diff.tag[i(mtNone)].reserve);\n-\n+    tree.reserve_mapping(0, 600, rd);\n@@ -327,7 +352,3 @@\n-    result = tree.commit_mapping(100, 125, rd);\n-    diff.add(result);\n-    result = tree.commit_mapping(550, 10, rd);\n-    diff.add(result);\n-    result = tree.commit_mapping(565, 10, rd);\n-    diff.add(result);\n-\n+    tree.commit_mapping(100, 125, rd);\n+    tree.commit_mapping(550, 10, rd);\n+    tree.commit_mapping(565, 10, rd);\n@@ -335,11 +356,4 @@\n-    result = tree.set_tag(0, 500, mtGC);\n-    diff.add(result);\n-    EXPECT_EQ(100, diff.tag[i(mtNone)].reserve);\n-    EXPECT_EQ(500, diff.tag[i(mtGC)].reserve);\n-    EXPECT_EQ(125, diff.tag[i(mtGC)].commit);\n-\n-    result = tree.set_tag(500, 100, mtClassShared);\n-    diff.add(result);\n-    EXPECT_EQ(0, diff.tag[i(mtNone)].reserve);\n-    EXPECT_EQ(100, diff.tag[i(mtClassShared)].reserve);\n-    EXPECT_EQ(20, diff.tag[i(mtClassShared)].commit);\n+    tree.set_tag(0, 500, mtGC);\n+    tree.set_tag(500, 100, mtClassShared);\n+\n+    expect_equivalent_form(expected, tree);\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":57,"deletions":43,"binary":false,"changes":100,"status":"modified"}]}