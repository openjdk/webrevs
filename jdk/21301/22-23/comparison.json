{"files":[{"patch":"@@ -64,0 +64,1 @@\n+        failures += scaleOverflowTest();\n@@ -200,1 +201,1 @@\n-                result = BigDecimal.TEN.sqrt(arbitrary);\n+                result = input.sqrt(arbitrary);\n@@ -214,1 +215,2 @@\n-            System.err.println(\"Unexpected sqrt with result.precision() > mc.precision: (\" + input + \").sqrt() = \" + result);\n+            System.err.println(\"Unexpected sqrt with result.precision() > mc.precision: (\"\n+                    + input + \").sqrt() = \" + result);\n@@ -240,1 +242,16 @@\n-            failures += equalNumerically(expected, result, \"Exact results\");\n+            failures += compare(expected, result, true, \"Exact results\");\n+        }\n+\n+        return failures;\n+    }\n+\n+    private static int scaleOverflowTest() {\n+        int failures = 0;\n+\n+        try {\n+            BigDecimal.valueOf(1, -1).sqrt(new MathContext((1 << 30) + 1, RoundingMode.UP));\n+            System.err.println(\"ArithmeticException expected: possible overflow undetected \"\n+                    + \"or the range of supported values for the algorithm has extended.\");\n+            failures += 1;\n+        } catch (ArithmeticException e) {\n+            \/\/ Expected\n","filename":"test\/jdk\/java\/math\/BigDecimal\/SquareRootTests.java","additions":20,"deletions":3,"binary":false,"changes":23,"status":"modified"}]}