{"files":[{"patch":"@@ -2162,1 +2162,1 @@\n-            int preferredScale = this.scale\/2;\n+            final int preferredScale = this.scale\/2;\n@@ -2175,5 +2175,1 @@\n-                    final int maxScale = mc.precision == 0 ?\n-                        preferredScale : (int) Math.min(preferredScale, result.scale + (mc.precision - 1L));\n-                    if (result.scale < maxScale)\n-                        result = result.setScale(maxScale);\n-\n+                    result = result.adjustToPreferredScale(preferredScale, mc.precision);\n@@ -2205,0 +2201,7 @@\n+\n+                \/\/ Test numerical properties at full precision before any\n+                \/\/ scale adjustments.\n+                assert squareRootResultAssertions(result, mc);\n+                \/\/ Adjust to requested precision and preferred\n+                \/\/ scale as appropriate.\n+                result = result.adjustToPreferredScale(preferredScale, mc.precision);\n@@ -2262,0 +2265,7 @@\n+                \/\/ Test numerical properties at full precision before any\n+                \/\/ scale adjustments.\n+                assert squareRootResultAssertions(result, mc);\n+                \/\/ Adjust to requested precision and preferred\n+                \/\/ scale as appropriate.\n+                if (result.scale > preferredScale) \/\/ else can't increase the result's precision to fit the preferred scale\n+                    result = stripZerosToMatchScale(result.intVal, result.intCompact, result.scale, preferredScale);\n@@ -2263,9 +2273,0 @@\n-\n-            \/\/ Test numerical properties at full precision before any\n-            \/\/ scale adjustments.\n-            assert squareRootResultAssertions(result, mc);\n-            \/\/ Adjust to requested precision and preferred\n-            \/\/ scale as appropriate.\n-            if (result.scale > preferredScale) \/\/ else can't increase the result's precision to fit the preferred scale\n-                result = stripZerosToMatchScale(result.intVal, result.intCompact, result.scale, preferredScale);\n-\n@@ -2290,0 +2291,21 @@\n+    \/**\n+     * Assumes {@code precision() <= maxPrecision}.\n+     * {@code maxPrecision == 0} means that the result can have arbitrary precision.\n+     * @param preferredScale the scale to reach\n+     * @param maxPrecision the largest precision the result can have\n+     * @return a BigDecimal numerically equivalent to this, whose precision\n+     *         does not exceed {@code maxPrecision} and whose scale is the closest\n+     *         to {@code preferredScale}\n+     *\/\n+    private BigDecimal adjustToPreferredScale(int preferredScale, int maxPrecision) {\n+        BigDecimal result = this;\n+        if (result.scale > preferredScale) {\n+            result = stripZerosToMatchScale(result.intVal, result.intCompact, result.scale, preferredScale);\n+        } else if (result.scale < preferredScale) {\n+            int maxScale = maxPrecision == 0 ?\n+                preferredScale : (int) Math.min(preferredScale, result.scale + (maxPrecision - result.precision()));\n+            result = result.setScale(maxScale);\n+        }\n+        return result;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":37,"deletions":15,"binary":false,"changes":52,"status":"modified"}]}