{"files":[{"patch":"@@ -63,0 +63,1 @@\n+        failures += exactResultTests();\n@@ -174,0 +175,71 @@\n+    private static int exactResultTests() {\n+        int failures = 0;\n+        MathContext unnecessary = new MathContext(1, RoundingMode.UNNECESSARY);\n+        MathContext arbitrary = new MathContext(0, RoundingMode.CEILING);\n+\n+        BigDecimal[] errCases = {\n+                \/\/ (strippedScale & 1) != 0\n+                BigDecimal.TEN,\n+                \/\/ (strippedScale & 1) == 0 && !stripped.isPowerOfTen() && sqrtRem[1].signum != 0\n+                BigDecimal.TWO,\n+        };\n+\n+        for (BigDecimal input : errCases) {\n+            BigDecimal result;\n+            \/\/ mc.roundingMode == RoundingMode.UNNECESSARY\n+            try {\n+                result = input.sqrt(unnecessary);\n+                System.err.println(\"Unexpected sqrt with UNNECESSARY RoundingMode: (\" + input + \").sqrt() = \" + result);\n+                failures += 1;\n+            } catch (ArithmeticException e) {\n+                \/\/ Expected\n+            }\n+\n+            \/\/ mc.roundingMode != RoundingMode.UNNECESSARY && mc.precision == 0\n+            try {\n+                result = BigDecimal.TEN.sqrt(arbitrary);\n+                System.err.println(\"Unexpected sqrt with mc.precision == 0: (\" + input + \").sqrt() = \" + result);\n+                failures += 1;\n+            } catch (ArithmeticException e) {\n+                \/\/ Expected\n+            }\n+        }\n+\n+        \/\/ (strippedScale & 1) == 0\n+\n+        \/\/ !stripped.isPowerOfTen() && sqrtRem[1].signum == 0 && (mc.precision != 0 && result.precision() > mc.precision)\n+        try {\n+            BigDecimal input = BigDecimal.valueOf(121);\n+            BigDecimal result = input.sqrt(unnecessary);\n+            System.err.println(\"Unexpected sqrt with result.precision() > mc.precision: (\" + input + \").sqrt() = \" + result);\n+            failures += 1;\n+        } catch (ArithmeticException e) {\n+            \/\/ Expected\n+        }\n+\n+        BigDecimal four = BigDecimal.valueOf(4);\n+        Object[][] cases = {\n+                \/\/ stripped.isPowerOfTen() && mc.roundingMode == RoundingMode.UNNECESSARY\n+                { BigDecimal.ONE, unnecessary, BigDecimal.ONE },\n+                \/\/ stripped.isPowerOfTen() && mc.roundingMode != RoundingMode.UNNECESSARY && mc.precision == 0\n+                { BigDecimal.ONE, arbitrary, BigDecimal.ONE },\n+                \/\/ !stripped.isPowerOfTen() && mc.roundingMode == RoundingMode.UNNECESSARY\n+                \/\/ && sqrtRem[1].signum == 0 && mc.precision == 0\n+                { four, new MathContext(0, RoundingMode.UNNECESSARY), BigDecimal.TWO },\n+                \/\/ !stripped.isPowerOfTen() && mc.roundingMode != RoundingMode.UNNECESSARY\n+                \/\/ && sqrtRem[1].signum == 0 && mc.precision == 0\n+                { four, arbitrary, BigDecimal.TWO },\n+                \/\/ !stripped.isPowerOfTen() && sqrtRem[1].signum == 0\n+                \/\/ && (mc.precision != 0 && result.precision() <= mc.precision)\n+                { four, unnecessary, BigDecimal.TWO },\n+        };\n+\n+        for (Object[] testCase : cases) {\n+            BigDecimal expected = (BigDecimal) testCase[2];\n+            BigDecimal result = ((BigDecimal) testCase[0]).sqrt((MathContext) testCase[1]);\n+            failures += equalNumerically(expected, result, \"Exact results\");\n+        }\n+\n+        return failures;\n+    }\n+\n","filename":"test\/jdk\/java\/math\/BigDecimal\/SquareRootTests.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"modified"}]}