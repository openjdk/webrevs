{"files":[{"patch":"@@ -2207,1 +2207,1 @@\n-                final boolean halfWay = mc.roundingMode.isHalfWay();\n+                final boolean halfWay = isHalfWay(mc.roundingMode);\n@@ -2224,5 +2224,6 @@\n-                if (mc.roundingMode == RoundingMode.DOWN || mc.roundingMode == RoundingMode.FLOOR) { \/\/ No need to round\n-                    sqrt = workingInt.sqrt();\n-                } else { \/\/ Round sqrt with the specified settings\n-                    BigInteger[] sqrtRem = workingInt.sqrtAndRemainder();\n-                    sqrt = sqrtRem[0];\n+                \/\/ Round sqrt with the specified settings\n+                if (halfWay) { \/\/ half-way rounding\n+                    \/\/ remove the one-tenth digit\n+                    BigInteger[] quotRem10 = workingInt.sqrt().divideAndRemainder(BigInteger.TEN);\n+                    sqrt = quotRem10[0];\n+                    resultScale--;\n@@ -2231,8 +2232,9 @@\n-                    if (halfWay) { \/\/ half-way rounding\n-                        \/\/ remove the one-tenth digit\n-                        BigInteger[] quotRem10 = sqrt.divideAndRemainder(BigInteger.TEN);\n-                        sqrt = quotRem10[0];\n-                        resultScale--;\n-\n-                        int digit = quotRem10[1].intValue();\n-                        if (digit > 5) {\n+                    int digit = quotRem10[1].intValue();\n+                    if (digit > 5) {\n+                        increment = true;\n+                    } else if (digit == 5) {\n+                        if (mc.roundingMode == RoundingMode.HALF_UP\n+                                || mc.roundingMode == RoundingMode.HALF_EVEN && sqrt.testBit(0)\n+                                \/\/ Check if remainder is non-zero\n+                                || workingInt.subtract(sqrt.multiply(sqrt)).signum != 0\n+                                || working.compareTo(new BigDecimal(workingInt)) != 0) {\n@@ -2240,7 +2242,0 @@\n-                        } else if (digit == 5) {\n-                            if (mc.roundingMode == RoundingMode.HALF_UP\n-                                    || mc.roundingMode == RoundingMode.HALF_EVEN && sqrt.testBit(0)\n-                                    \/\/ Check if remainder is non-zero\n-                                    || sqrtRem[1].signum != 0 || working.compareTo(new BigDecimal(workingInt)) != 0) {\n-                                increment = true;\n-                            }\n@@ -2248,4 +2243,0 @@\n-                    } else { \/\/ mc.roundingMode == RoundingMode.UP || mc.roundingMode == RoundingMode.CEILING\n-                        \/\/ Check if remainder is non-zero\n-                        if (sqrtRem[1].signum != 0 || working.compareTo(new BigDecimal(workingInt)) != 0)\n-                            increment = true;\n@@ -2253,0 +2244,1 @@\n+\n@@ -2255,0 +2247,14 @@\n+                } else {\n+                    switch (mc.roundingMode) {\n+                    case DOWN, FLOOR -> sqrt = workingInt.sqrt(); \/\/ No need to round\n+\n+                    case UP, CEILING -> {\n+                        BigInteger[] sqrtRem = workingInt.sqrtAndRemainder();\n+                        sqrt = sqrtRem[0];\n+                        \/\/ Check if remainder is non-zero\n+                        if (sqrtRem[1].signum != 0 || working.compareTo(new BigDecimal(workingInt)) != 0)\n+                            sqrt = sqrt.add(1L);\n+                    }\n+\n+                    default -> throw new AssertionError(\"Unexpected value for RoundingMode: \" + mc.roundingMode);\n+                    }\n@@ -2305,0 +2311,7 @@\n+    private static boolean isHalfWay(RoundingMode m) {\n+        return switch (m) {\n+            case HALF_DOWN, HALF_UP, HALF_EVEN -> true;\n+            case FLOOR, CEILING, DOWN, UP, UNNECESSARY -> false;\n+        };\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":38,"deletions":25,"binary":false,"changes":63,"status":"modified"},{"patch":"@@ -419,7 +419,0 @@\n-\n-    boolean isHalfWay() {\n-        return switch (this) {\n-            case HALF_DOWN, HALF_UP, HALF_EVEN -> true;\n-            default -> false;\n-        };\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/math\/RoundingMode.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}