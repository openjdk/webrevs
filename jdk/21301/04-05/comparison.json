{"files":[{"patch":"@@ -2222,3 +2222,0 @@\n-                BigInteger[] sqrtRem = workingInt.sqrtAndRemainder();\n-                BigInteger sqrt = sqrtRem[0];\n-                long resultScale = normScale >> 1;\n@@ -2226,16 +2223,17 @@\n-                \/\/ Round sqrt with the specified settings\n-                boolean increment = false;\n-                if (halfWay) { \/\/ half-way rounding\n-                    \/\/ remove the one-tenth digit\n-                    BigInteger[] quotRem10 = sqrt.divideAndRemainder(BigInteger.TEN);\n-                    sqrt = quotRem10[0];\n-                    resultScale--;\n-\n-                    int digit = quotRem10[1].intValue();\n-                    if (digit > 5) {\n-                        increment = true;\n-                    } else if (digit == 5) {\n-                        if (mc.roundingMode == RoundingMode.HALF_UP\n-                                || mc.roundingMode == RoundingMode.HALF_EVEN && sqrt.testBit(0)\n-                                \/\/ Check if remainder is non-zero\n-                                || sqrtRem[1].signum != 0 || working.compareTo(new BigDecimal(workingInt)) != 0) {\n+                BigInteger sqrt;\n+                long resultScale = normScale >> 1;\n+                if (mc.roundingMode == RoundingMode.DOWN || mc.roundingMode == RoundingMode.FLOOR) { \/\/ No need to round\n+                    sqrt = workingInt.sqrt();\n+                } else { \/\/ Round sqrt with the specified settings\n+                    BigInteger[] sqrtRem = workingInt.sqrtAndRemainder();\n+                    sqrt = sqrtRem[0];\n+\n+                    boolean increment = false;\n+                    if (halfWay) { \/\/ half-way rounding\n+                        \/\/ remove the one-tenth digit\n+                        BigInteger[] quotRem10 = sqrt.divideAndRemainder(BigInteger.TEN);\n+                        sqrt = quotRem10[0];\n+                        resultScale--;\n+    \n+                        int digit = quotRem10[1].intValue();\n+                        if (digit > 5) {\n@@ -2243,0 +2241,7 @@\n+                        } else if (digit == 5) {\n+                            if (mc.roundingMode == RoundingMode.HALF_UP\n+                                    || mc.roundingMode == RoundingMode.HALF_EVEN && sqrt.testBit(0)\n+                                    \/\/ Check if remainder is non-zero\n+                                    || sqrtRem[1].signum != 0 || working.compareTo(new BigDecimal(workingInt)) != 0) {\n+                                increment = true;\n+                            }\n@@ -2244,0 +2249,4 @@\n+                    } else { \/\/ mc.roundingMode == RoundingMode.UP || mc.roundingMode == RoundingMode.CEILING\n+                        \/\/ Check if remainder is non-zero\n+                        if (sqrtRem[1].signum != 0 || working.compareTo(new BigDecimal(workingInt)) != 0)\n+                            increment = true;\n@@ -2245,7 +2254,3 @@\n-                } else if (mc.roundingMode == RoundingMode.UP || mc.roundingMode == RoundingMode.CEILING) { \/\/ round up\n-                    \/\/ Check if remainder is non-zero\n-                    if (sqrtRem[1].signum != 0 || working.compareTo(new BigDecimal(workingInt)) != 0)\n-                        increment = true;\n-                } \/\/ else round down, but sqrt is already rounded down\n-                if (increment)\n-                    sqrt = sqrt.add(1L);\n+                    if (increment)\n+                        sqrt = sqrt.add(1L);\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/math\/BigDecimal.java","additions":31,"deletions":26,"binary":false,"changes":57,"status":"modified"}]}