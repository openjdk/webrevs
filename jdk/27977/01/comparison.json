{"files":[{"patch":"@@ -10736,0 +10736,1 @@\n+    __ movswl($dst$$Register, $dst$$Register);\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,156 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.c2;\n+\n+\/*\n+ * @test\n+ * @bug 8370409\n+ * @summary Incorrect computation in Float16 reduction loop\n+ *\n+ * @library \/test\/lib \/\n+ * @run main\/othervm compiler.c2.TestFloat16Reduction\n+ *\/\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.verify.*;\n+import compiler.lib.generators.Generator;\n+import static compiler.lib.generators.Generators.G;\n+import jdk.test.lib.Utils;\n+import java.util.Arrays;\n+\n+public class TestFloat16Reduction {\n+\n+    static short [] arr = new short[32];\n+    static Generator<Short> genHF = G.uniformFloat16s();\n+    static {\n+        G.fill(genHF, arr);\n+    }\n+\n+    public static long GOLDEN_ADD = ADDReduceLong();\n+    public static long GOLDEN_SUB = SUBReduceLong();\n+    public static long GOLDEN_MUL = MULReduceLong();\n+    public static long GOLDEN_DIV = DIVReduceLong();\n+    public static long GOLDEN_MAX = MAXReduceLong();\n+    public static long GOLDEN_MIN = MINReduceLong();\n+\n+    @Test\n+    @IR(counts = {IRNode.ADD_HF, \" >0 \"}, applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+    @IR(counts = {IRNode.ADD_HF, \" >0 \"}, applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n+    static long ADDReduceLong() {\n+        short res = 0;\n+        for (int i = 0; i < arr.length; i++) {\n+            res = Float.floatToFloat16(Float.float16ToFloat(res) + Float.float16ToFloat(arr[i]));\n+        }\n+        return (long)res;\n+    }\n+\n+    @Check(test=\"ADDReduceLong\")\n+    void checkADDReduceLong(long actual) {\n+        Verify.checkEQ(actual, GOLDEN_ADD);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.SUB_HF, \" >0 \"}, applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+    @IR(counts = {IRNode.SUB_HF, \" >0 \"}, applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n+    static long SUBReduceLong() {\n+        short res = 0;\n+        for (int i = 0; i < arr.length; i++) {\n+            res = Float.floatToFloat16(Float.float16ToFloat(res) - Float.float16ToFloat(arr[i]));\n+        }\n+        return (long)res;\n+    }\n+\n+    @Check(test=\"SUBReduceLong\")\n+    void checkSUBReduceLong(long actual) {\n+        Verify.checkEQ(actual, GOLDEN_SUB);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MUL_HF, \" >0 \"}, applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+    @IR(counts = {IRNode.MUL_HF, \" >0 \"}, applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n+    static long MULReduceLong() {\n+        short res = 0;\n+        for (int i = 0; i < arr.length; i++) {\n+            res = Float.floatToFloat16(Float.float16ToFloat(res) * Float.float16ToFloat(arr[i]));\n+        }\n+        return (long)res;\n+    }\n+\n+    @Check(test=\"MULReduceLong\")\n+    void checkMULReduceLong(long actual) {\n+        Verify.checkEQ(actual, GOLDEN_MUL);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.DIV_HF, \" >0 \"}, applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+    @IR(counts = {IRNode.DIV_HF, \" >0 \"}, applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n+    static long DIVReduceLong() {\n+        short res = 0;\n+        for (int i = 0; i < arr.length; i++) {\n+            res = Float.floatToFloat16(Float.float16ToFloat(res) \/ Float.float16ToFloat(arr[i]));\n+        }\n+        return (long)res;\n+    }\n+\n+    @Check(test=\"DIVReduceLong\")\n+    void checkDIVReduceLong(long actual) {\n+        Verify.checkEQ(actual, GOLDEN_DIV);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MAX_HF, \" >0 \"}, applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+    @IR(counts = {IRNode.MAX_HF, \" >0 \"}, applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n+    static long MAXReduceLong() {\n+        short res = 0;\n+        for (int i = 0; i < arr.length; i++) {\n+            res = Float.floatToFloat16(Math.max(Float.float16ToFloat(res), Float.float16ToFloat(arr[i])));\n+        }\n+        return (long)res;\n+    }\n+\n+    @Check(test=\"MAXReduceLong\")\n+    void checkMAXReduceLong(long actual) {\n+        Verify.checkEQ(actual, GOLDEN_MAX);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.MIN_HF, \" >0 \"}, applyIfCPUFeature = {\"avx512_fp16\", \"true\"})\n+    @IR(counts = {IRNode.MIN_HF, \" >0 \"}, applyIfCPUFeatureAnd = {\"fphp\", \"true\", \"asimdhp\", \"true\"})\n+    static long MINReduceLong() {\n+        short res = 0;\n+        for (int i = 0; i < arr.length; i++) {\n+            res = Float.floatToFloat16(Math.min(Float.float16ToFloat(res), Float.float16ToFloat(arr[i])));\n+        }\n+        return (long)res;\n+    }\n+\n+    @Check(test = \"MINReduceLong\")\n+    void checkMINReduceLong(long actual) {\n+        Verify.checkEQ(actual, GOLDEN_MIN);\n+    }\n+\n+    public static void main(String [] args) {\n+        TestFramework.run(TestFloat16Reduction.class);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestFloat16Reduction.java","additions":156,"deletions":0,"binary":false,"changes":156,"status":"added"}]}