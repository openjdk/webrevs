{"files":[{"patch":"@@ -3679,5 +3679,0 @@\n-    void vl1reXX_v(Assembler::SEW vset_sew, VectorRegister vr, Register sr) {\n-      if (vset_sew == Assembler::e32) __ vl1re32_v(vr, sr);\n-      else                            __ vl1re64_v(vr, sr);\n-    }\n-\n@@ -3792,1 +3787,1 @@\n-      __ vl1reXX_v(vset_sew, vtemp, scalarconst);\n+      __ vleXX_v(vset_sew, vtemp, scalarconst);\n@@ -3882,11 +3877,11 @@\n-      VectorRegister vindex = v1;\n-      VectorRegister vW0 = v2;\n-      VectorRegister vW1 = v4;\n-      VectorRegister vW2 = v6;\n-      VectorRegister vW3 = v8;\n-      VectorRegister vState0 = v10;\n-      VectorRegister vState1 = v12;\n-      VectorRegister vHash0  = v14;\n-      VectorRegister vHash1  = v16;\n-      VectorRegister vTmp0   = v18;\n-      VectorRegister vTmp1   = v20;\n+      VectorRegister vindex = v2;\n+      VectorRegister vW0 = v4;\n+      VectorRegister vW1 = v6;\n+      VectorRegister vW2 = v8;\n+      VectorRegister vW3 = v10;\n+      VectorRegister vState0 = v12;\n+      VectorRegister vState1 = v14;\n+      VectorRegister vHash0  = v16;\n+      VectorRegister vHash1  = v18;\n+      VectorRegister vTmp0   = v20;\n+      VectorRegister vTmp1   = v22;\n@@ -3931,1 +3926,3 @@\n-      \/\/ Set vectors as 4 * 32\/64 bits\n+      \/\/ vsha2ch\/vsha2cl uses EGW of 4*SEW.\n+      \/\/ SHA256 SEW = e32, EGW = 128-bits\n+      \/\/ SHA512 SEW = e64, EGW = 256-bits\n@@ -3933,2 +3930,4 @@\n-      \/\/ e32\/e64: vector of 32b\/64b\/4B\/8B elements\n-      \/\/ m1: LMUL=1\n+      \/\/ VLEN is required to be at least 128.\n+      \/\/ For the case of VLEN=128 and SHA512 we need LMUL=2 to work with 4*e64 (EGW = 256)\n+      \/\/\n+      \/\/ m1: LMUL=1\/2\n@@ -3939,1 +3938,1 @@\n-      if (vset_sew == Assembler::e64 && MaxVectorSize == 16) {\n+      if (vset_sew == Assembler::e64 && MaxVectorSize == 16) { \/\/ SHA512 and VLEN = 128\n@@ -3944,1 +3943,1 @@\n-      \/\/ Splat indexes in vindex if SEW = e64, but don't hurt anything.\n+\n@@ -3947,1 +3946,1 @@\n-      __ vmv_s_x(vindex, t0);\n+      __ vmv_v_x(vindex, t0);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -149,5 +149,0 @@\n-  if (UseSHA) {\n-    warning(\"SHA instructions are not available on this CPU\");\n-    FLAG_SET_DEFAULT(UseSHA, false);\n-  }\n-\n@@ -159,31 +154,0 @@\n-  if (UseZvkn) {\n-    if (!ext_V.enabled()) {\n-      FLAG_SET_DEFAULT(UseZvkn, false);\n-      warning(\"Cannot enable Zvkn on cpu without RVV support.\");\n-    }\n-    if (FLAG_IS_DEFAULT(UseRVV)) {\n-      FLAG_SET_DEFAULT(UseRVV, true);\n-    }\n-    if (UseRVV) {\n-      if (FLAG_IS_DEFAULT(UseSHA256Intrinsics)) {\n-        FLAG_SET_DEFAULT(UseSHA256Intrinsics, true);\n-      }\n-      if (FLAG_IS_DEFAULT(UseSHA256Intrinsics)) {\n-        FLAG_SET_DEFAULT(UseSHA256Intrinsics, true);\n-      }\n-    } else {\n-      FLAG_SET_DEFAULT(UseZvkn, false);\n-      warning(\"Cannot enabled Zvkn when RVV is disabled.\");\n-    }\n-  }\n-  if (!UseZvkn) {\n-    if (UseSHA256Intrinsics) {\n-      warning(\"Intrinsics for SHA-224 and SHA-256 crypto hash functions not available on this CPU, UseZvkn needed.\");\n-      FLAG_SET_DEFAULT(UseSHA256Intrinsics, false);\n-    }\n-    if (UseSHA512Intrinsics) {\n-      warning(\"Intrinsics for SHA-384 and SHA-512 crypto hash functions not available on this CPU, UseZvkn needed.\");\n-      FLAG_SET_DEFAULT(UseSHA512Intrinsics, false);\n-    }\n-  }\n-\n@@ -296,0 +260,4 @@\n+  if (UseZvkn && !UseRVV) {\n+    FLAG_SET_DEFAULT(UseZvkn, false);\n+    warning(\"Cannot enable Zvkn on cpu without RVV support.\");\n+  }\n@@ -301,1 +269,1 @@\n-  } else if (UseChaCha20Intrinsics) {\n+  } if (UseChaCha20Intrinsics) {\n@@ -307,0 +275,25 @@\n+\n+  if (!UseZvkn && UseSHA) {\n+    warning(\"SHA instructions are not available on this CPU\");\n+    FLAG_SET_DEFAULT(UseSHA, false);\n+  } else if (UseZvkn && FLAG_IS_DEFAULT(UseSHA)) {\n+    FLAG_SET_DEFAULT(UseSHA, true);\n+  }\n+\n+  if (!UseSHA) {\n+    if (UseSHA256Intrinsics) {\n+      warning(\"Intrinsics for SHA-224 and SHA-256 crypto hash functions not available on this CPU, UseZvkn needed.\");\n+      FLAG_SET_DEFAULT(UseSHA256Intrinsics, false);\n+    }\n+    if (UseSHA512Intrinsics) {\n+      warning(\"Intrinsics for SHA-384 and SHA-512 crypto hash functions not available on this CPU, UseZvkn needed.\");\n+      FLAG_SET_DEFAULT(UseSHA512Intrinsics, false);\n+    }\n+  } else {\n+    if (FLAG_IS_DEFAULT(UseSHA256Intrinsics)) {\n+       FLAG_SET_DEFAULT(UseSHA256Intrinsics, true);\n+    }\n+    if (FLAG_IS_DEFAULT(UseSHA512Intrinsics)) {\n+      FLAG_SET_DEFAULT(UseSHA512Intrinsics, true);\n+    }\n+  }\n","filename":"src\/hotspot\/cpu\/riscv\/vm_version_riscv.cpp","additions":30,"deletions":37,"binary":false,"changes":67,"status":"modified"}]}