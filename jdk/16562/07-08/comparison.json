{"files":[{"patch":"@@ -3702,2 +3702,2 @@\n-    \/\/    \/\/   v15 = {K[t+3], K[t+2], K[t+1], K[t+0]}\n-    \/\/    vl1reXX.v v15, ofs\n+    \/\/    \/\/   vTmp1 = {K[t+3], K[t+2], K[t+1], K[t+0]}\n+    \/\/    vl1reXX.v vTmp1, ofs\n@@ -3705,1 +3705,1 @@\n-    \/\/    \/\/ Increment word contant address by stride (16\/32 bytes, 4*4B\/8B, 128b\/256b)\n+    \/\/    \/\/ Increment word constant address by stride (16\/32 bytes, 4*4B\/8B, 128b\/256b)\n@@ -3710,2 +3710,2 @@\n-    \/\/    \/\/    v15 = {K[t+3], K[t+2], K[t+1], K[t+0]}\n-    \/\/    \/\/    v10 = {W[t+3], W[t+2], W[t+1], W[t+0]}; \/\/ Vt0 = W[3:0];\n+    \/\/    \/\/    vTmp1 = {K[t+3], K[t+2], K[t+1], K[t+0]}\n+    \/\/    \/\/    vW0 = {W[t+3], W[t+2], W[t+1], W[t+0]}; \/\/ Vt0 = W[3:0];\n@@ -3713,2 +3713,2 @@\n-    \/\/    \/\/    v14 = {W[t+3]+K[t+3], W[t+2]+K[t+2], W[t+1]+K[t+1], W[t+0]+K[t+0]}\n-    \/\/    vadd.vv v14, v15, v10\n+    \/\/    \/\/    vTmp0 = {W[t+3]+K[t+3], W[t+2]+K[t+2], W[t+1]+K[t+1], W[t+0]+K[t+0]}\n+    \/\/    vadd.vv vTmp0, vTmp1, vW0\n@@ -3717,1 +3717,1 @@\n-    \/\/    \/\/     v17[t+4] <- v17[t], v16[t], v14[t]\n+    \/\/    \/\/     vState1[t+4] <- vState1[t], vState0[t], vTmp0[t]\n@@ -3719,3 +3719,3 @@\n-    \/\/    \/\/    v17 = {c[t],d[t],g[t],h[t]}   \" = v17[t] \"\n-    \/\/    \/\/    v16 = {a[t],b[t],e[t],f[t]}\n-    \/\/    \/\/    v14 = {W[t+3]+K[t+3], W[t+2]+K[t+2], W[t+1]+K[t+1], W[t+0]+K[t+0]}\n+    \/\/    \/\/    vState1 = {c[t],d[t],g[t],h[t]}   \" = vState1[t] \"\n+    \/\/    \/\/    vState0 = {a[t],b[t],e[t],f[t]}\n+    \/\/    \/\/    vTmp0 = {W[t+3]+K[t+3], W[t+2]+K[t+2], W[t+1]+K[t+1], W[t+0]+K[t+0]}\n@@ -3723,3 +3723,3 @@\n-    \/\/    \/\/    v17 = {f[t+2],e[t+2],b[t+2],a[t+2]}  \" = v16[t+2] \"\n-    \/\/    \/\/        = {h[t+4],g[t+4],d[t+4],c[t+4]}  \" = v17[t+4] \"\n-    \/\/    vsha2cl.vv v17, v16, v14\n+    \/\/    \/\/    vState1 = {f[t+2],e[t+2],b[t+2],a[t+2]}  \" = vState0[t+2] \"\n+    \/\/    \/\/        = {h[t+4],g[t+4],d[t+4],c[t+4]}  \" = vState1[t+4] \"\n+    \/\/    vsha2cl.vv vState1, vState0, vTmp0\n@@ -3728,1 +3728,1 @@\n-    \/\/    \/\/     v16[t+4] <- v16[t], v16[t+2], v14[t]\n+    \/\/    \/\/     vState0[t+4] <- vState0[t], vState0[t+2], vTmp0[t]\n@@ -3730,4 +3730,4 @@\n-    \/\/    \/\/   v16 = {a[t],b[t],e[t],f[t]}       \" = v16[t] \"\n-    \/\/    \/\/       = {h[t+2],g[t+2],d[t+2],c[t+2]}   \" = v17[t+2] \"\n-    \/\/    \/\/   v17 = {f[t+2],e[t+2],b[t+2],a[t+2]}   \" = v16[t+2] \"\n-    \/\/    \/\/   v14 = {W[t+3]+K[t+3], W[t+2]+K[t+2], W[t+1]+K[t+1], W[t+0]+K[t+0]}\n+    \/\/    \/\/   vState0 = {a[t],b[t],e[t],f[t]}       \" = vState0[t] \"\n+    \/\/    \/\/       = {h[t+2],g[t+2],d[t+2],c[t+2]}   \" = vState1[t+2] \"\n+    \/\/    \/\/   vState1 = {f[t+2],e[t+2],b[t+2],a[t+2]}   \" = vState0[t+2] \"\n+    \/\/    \/\/   vTmp0 = {W[t+3]+K[t+3], W[t+2]+K[t+2], W[t+1]+K[t+1], W[t+0]+K[t+0]}\n@@ -3735,2 +3735,2 @@\n-    \/\/    \/\/   v16 = {f[t+4],e[t+4],b[t+4],a[t+4]}   \" = v16[t+4] \"\n-    \/\/    vsha2ch.vv v16, v17, v14\n+    \/\/    \/\/   vState0 = {f[t+4],e[t+4],b[t+4],a[t+4]}   \" = vState0[t+4] \"\n+    \/\/    vsha2ch.vv vState0, vState1, vTmp0\n@@ -3740,2 +3740,2 @@\n-    \/\/    \/\/ To generate the next 4 words, \"new_v10\"\/\"v14\" from v10-v13, vsha2ms needs\n-    \/\/    \/\/     v10[0..3], v11[0], v12[1..3], v13[0, 2..3]\n+    \/\/    \/\/ To generate the next 4 words, \"new_vW0\"\/\"vTmp0\" from vW0-vW3, vsha2ms needs\n+    \/\/    \/\/     vW0[0..3], vW1[0], vW2[1..3], vW3[0, 2..3]\n@@ -3743,1 +3743,1 @@\n-    \/\/    \/\/ v11[0] and v12[1..3] in a single vector.\n+    \/\/    \/\/ vW1[0] and vW2[1..3] in a single vector.\n@@ -3747,3 +3747,3 @@\n-    \/\/    \/\/  V0 = mask \/\/ first word from v12, 1..3 words from v11\n-    \/\/    \/\/  V12 = {Wt-8, Wt-7, Wt-6, Wt-5}\n-    \/\/    \/\/  V11 = {Wt-12, Wt-11, Wt-10, Wt-9}\n+    \/\/    \/\/  V0 = mask \/\/ first word from vW2, 1..3 words from vW1\n+    \/\/    \/\/  vW2 = {Wt-8, Wt-7, Wt-6, Wt-5}\n+    \/\/    \/\/  vW1 = {Wt-12, Wt-11, Wt-10, Wt-9}\n@@ -3752,1 +3752,1 @@\n-    \/\/    vmerge.vvm v14, v12, v11, v0\n+    \/\/    vmerge.vvm vTmp0, vW2, vW1, v0\n@@ -3756,3 +3756,3 @@\n-    \/\/    \/\/  V10 = {W[t+ 3], W[t+ 2], W[t+ 1], W[t+ 0]}     W[ 3: 0]\n-    \/\/    \/\/  V13 = {W[t+15], W[t+14], W[t+13], W[t+12]}     W[15:12]\n-    \/\/    \/\/  V14 = {W[t+11], W[t+10], W[t+ 9], W[t+ 4]}     W[11: 9,4]\n+    \/\/    \/\/  vW0 = {W[t+ 3], W[t+ 2], W[t+ 1], W[t+ 0]}     W[ 3: 0]\n+    \/\/    \/\/  vW3 = {W[t+15], W[t+14], W[t+13], W[t+12]}     W[15:12]\n+    \/\/    \/\/  vTmp0 = {W[t+11], W[t+10], W[t+ 9], W[t+ 4]}     W[11: 9,4]\n@@ -3760,2 +3760,2 @@\n-    \/\/    \/\/  v10 = {W[t+19],  W[t+18],  W[t+17],  W[t+16]}  W[19:16]\n-    \/\/    vsha2ms.vv v10, v14, v13\n+    \/\/    \/\/  vW0 = {W[t+19],  W[t+18],  W[t+17],  W[t+16]}  W[19:16]\n+    \/\/    vsha2ms.vv vW0, vTmp0, vW3\n@@ -3764,5 +3764,5 @@\n-    \/\/  v10 - v13 hold the message schedule words (initially the block words)\n-    \/\/    v10 = W[ 3: 0]   \"oldest\"\n-    \/\/    v11 = W[ 7: 4]\n-    \/\/    v12 = W[11: 8]\n-    \/\/    v13 = W[15:12]   \"newest\"\n+    \/\/  vW0 - vW3 hold the message schedule words (initially the block words)\n+    \/\/    vW0 = W[ 3: 0]   \"oldest\"\n+    \/\/    vW1 = W[ 7: 4]\n+    \/\/    vW2 = W[11: 8]\n+    \/\/    vW3 = W[15:12]   \"newest\"\n@@ -3771,2 +3771,2 @@\n-    \/\/    v16 = {a[t],b[t],e[t],f[t]}   \/\/ initially {H5,H4,H1,H0}\n-    \/\/    v17 = {c[t],d[t],g[t],h[t]}   \/\/ initially {H7,H6,H3,H2}\n+    \/\/    vState0 = {a[t],b[t],e[t],f[t]}   \/\/ initially {H5,H4,H1,H0}\n+    \/\/    vState1 = {c[t],d[t],g[t],h[t]}   \/\/ initially {H7,H6,H3,H2}\n@@ -3775,5 +3775,5 @@\n-    \/\/  v10 - v13 hold the message schedule words (initially the block words)\n-    \/\/    v11 = W[ 7: 4]   \"oldest\"\n-    \/\/    v12 = W[11: 8]\n-    \/\/    v13 = W[15:12]\n-    \/\/    v10 = W[19:16]   \"newest\"\n+    \/\/  vW0 - vW3 hold the message schedule words (initially the block words)\n+    \/\/    vW1 = W[ 7: 4]   \"oldest\"\n+    \/\/    vW2 = W[11: 8]\n+    \/\/    vW3 = W[15:12]\n+    \/\/    vW0 = W[19:16]   \"newest\"\n@@ -3781,3 +3781,3 @@\n-    \/\/  v16 and v17 hold the working state variables\n-    \/\/    v16 = {a[t+4],b[t+4],e[t+4],f[t+4]}\n-    \/\/    v17 = {c[t+4],d[t+4],g[t+4],h[t+4]}\n+    \/\/  vState0 and vState1 hold the working state variables\n+    \/\/    vState0 = {a[t+4],b[t+4],e[t+4],f[t+4]}\n+    \/\/    vState1 = {c[t+4],d[t+4],g[t+4],h[t+4]}\n@@ -3785,1 +3785,1 @@\n-    \/\/  The group of vectors v10,v11,v12,v13 is \"rotated\" by one in each quad-round,\n+    \/\/  The group of vectors vW0,vW1,vW2,vW3 is \"rotated\" by one in each quad-round,\n@@ -3790,1 +3790,1 @@\n-                         Register scalarconst, VectorRegister vtemp, VectorRegister vtemp2, VectorRegister vtemp3, VectorRegister vtemp4,\n+                         Register scalarconst, VectorRegister vtemp, VectorRegister vtemp2, VectorRegister v_abef, VectorRegister v_cdgh,\n@@ -3797,5 +3797,2 @@\n-      __ vsha2cl_vv(vtemp4, vtemp3, vtemp2);\n-      __ vsha2ch_vv(vtemp3, vtemp4, vtemp2);\n-      if ((vset_sew == Assembler::e64 && step_const) || gen_words) {\n-        __ vmerge_vvm(vtemp2, rot3, rot2);\n-      }\n+      __ vsha2cl_vv(v_cdgh, v_abef, vtemp2);\n+      __ vsha2ch_vv(v_abef, v_cdgh, vtemp2);\n@@ -3803,0 +3800,1 @@\n+        __ vmerge_vvm(vtemp2, rot3, rot2);\n@@ -3812,0 +3810,1 @@\n+      ShouldNotReachHere();\n@@ -3884,0 +3883,10 @@\n+      VectorRegister vW0 = v2;\n+      VectorRegister vW1 = v4;\n+      VectorRegister vW2 = v6;\n+      VectorRegister vW3 = v8;\n+      VectorRegister vState0 = v10;\n+      VectorRegister vState1 = v12;\n+      VectorRegister vHash0  = v14;\n+      VectorRegister vHash1  = v16;\n+      VectorRegister vTmp0   = v18;\n+      VectorRegister vTmp1   = v20;\n@@ -3895,1 +3904,1 @@\n-      \/\/  v10 - v13 (512\/1024-bits \/ 4*128\/256 bits \/ 4*4*32\/65 bits), hold the message\n+      \/\/  vW0 - vW3 (512\/1024-bits \/ 4*128\/256 bits \/ 4*4*32\/65 bits), hold the message\n@@ -3900,4 +3909,4 @@\n-      \/\/     v10 = W[  3:0] = { W3,  W2,  W1,  W0}\n-      \/\/     v11 = W[  7:4] = { W7,  W6,  W5,  W4}\n-      \/\/     v12 = W[ 11:8] = {W11, W10,  W9,  W8}\n-      \/\/     v13 = W[15:12] = {W15, W14, W13, W12}\n+      \/\/     vW0 = W[  3:0] = { W3,  W2,  W1,  W0}\n+      \/\/     vW1 = W[  7:4] = { W7,  W6,  W5,  W4}\n+      \/\/     vW2 = W[ 11:8] = {W11, W10,  W9,  W8}\n+      \/\/     vW3 = W[15:12] = {W15, W14, W13, W12}\n@@ -3905,3 +3914,3 @@\n-      \/\/  v16 - v17 hold the working state variables (a, b, ..., h)\n-      \/\/    v16 = {f[t],e[t],b[t],a[t]}\n-      \/\/    v17 = {h[t],g[t],d[t],c[t]}\n+      \/\/  vState0 - vState1 hold the working state variables (a, b, ..., h)\n+      \/\/    vState0 = {f[t],e[t],b[t],a[t]}\n+      \/\/    vState1 = {h[t],g[t],d[t],c[t]}\n@@ -3909,2 +3918,2 @@\n-      \/\/    v16 = {H5i-1, H4i-1, H1i-1 , H0i-1}\n-      \/\/    v17 = {H7i-i, H6i-1, H3i-1 , H2i-1}\n+      \/\/    vState0 = {H5i-1, H4i-1, H1i-1 , H0i-1}\n+      \/\/    vState1 = {H7i-i, H6i-1, H3i-1 , H2i-1}\n@@ -3914,5 +3923,2 @@\n-      \/\/  v14 = temporary, Wt+Kt\n-      \/\/  v15 = temporary, Kt\n-      \/\/\n-      \/\/  v18\/v19 = temporaries, in the epilogue, to re-arrange\n-      \/\/            and byte-swap v16\/v17\n+      \/\/  vTmp0 = temporary, Wt+Kt\n+      \/\/  vTmp1 = temporary, Kt\n@@ -3920,3 +3926,1 @@\n-      \/\/  v26\/v27 = hold the initial values of the hash, byte-swapped.\n-      \/\/\n-      \/\/  v30\/v31 = used to generate masks, vrgather indices.\n+      \/\/  vHash0\/vHash1 = hold the initial values of the hash, byte-swapped.\n@@ -3935,1 +3939,5 @@\n-      __ vsetivli(x0, 4, vset_sew, Assembler::m1, Assembler::ma, Assembler::ta);\n+      if (vset_sew == Assembler::e32 && MaxVectorSize == 16) {\n+        __ vsetivli(x0, 4, vset_sew, Assembler::m2, Assembler::ma, Assembler::ta);\n+      } else {\n+        __ vsetivli(x0, 4, vset_sew, Assembler::m1, Assembler::ma, Assembler::ta);\n+      }\n@@ -3946,2 +3954,2 @@\n-      __ vluxei8_v(v16, state, vindex);\n-      __ vluxei8_v(v17, state_c, vindex);\n+      __ vluxei8_v(vState0, state, vindex);\n+      __ vluxei8_v(vState1, state_c, vindex);\n@@ -3951,1 +3959,1 @@\n-      \/\/ Capture the initial H values in v26 and v27 to allow for computing\n+      \/\/ Capture the initial H values in vHash0 and vHash1 to allow for computing\n@@ -3953,2 +3961,2 @@\n-      __ vmv_v_v(v26, v16);\n-      __ vmv_v_v(v27, v17);\n+      __ vmv_v_v(vHash0, vState0);\n+      __ vmv_v_v(vHash1, vState1);\n@@ -3956,1 +3964,1 @@\n-      \/\/ Load the 512\/1024-bits of the message block in v10-v13 and perform\n+      \/\/ Load the 512\/1024-bits of the message block in vW0-vW3 and perform\n@@ -3964,2 +3972,2 @@\n-      __ vleXX_v(vset_sew, v10, buf);\n-      __ vrev8_v(v10, v10);\n+      __ vleXX_v(vset_sew, vW0, buf);\n+      __ vrev8_v(vW0, vW0);\n@@ -3967,2 +3975,2 @@\n-      __ vleXX_v(vset_sew, v11, buf);\n-      __ vrev8_v(v11, v11);\n+      __ vleXX_v(vset_sew, vW1, buf);\n+      __ vrev8_v(vW1, vW1);\n@@ -3970,2 +3978,2 @@\n-      __ vleXX_v(vset_sew, v12, buf);\n-      __ vrev8_v(v12, v12);\n+      __ vleXX_v(vset_sew, vW2, buf);\n+      __ vrev8_v(vW2, vW2);\n@@ -3973,2 +3981,2 @@\n-      __ vleXX_v(vset_sew, v13, buf);\n-      __ vrev8_v(v13, v13);\n+      __ vleXX_v(vset_sew, vW3, buf);\n+      __ vrev8_v(vW3, vW3);\n@@ -3981,1 +3989,1 @@\n-      VectorRegister rotation_regs[] = {v10, v11, v12, v13};\n+      VectorRegister rotation_regs[] = {vW0, vW1, vW2, vW3};\n@@ -3983,1 +3991,1 @@\n-      \/\/ Quad-round #0 (+0, v10->v11->v12->v13) ... #11 (+3, v13->v10->v11->v12)\n+      \/\/ Quad-round #0 (+0, vW0->vW1->vW2->vW3) ... #11 (+3, vW3->vW0->vW1->vW2)\n@@ -3992,1 +4000,1 @@\n-                   v15, v14, v16, v17);\n+                   vTmp1, vTmp0, vState0, vState1);\n@@ -3995,2 +4003,2 @@\n-      \/\/ Quad-round #12 (+0, v10->v11->v12->v13) ... #15 (+3, v13->v10->v11->v12)\n-      \/\/ Note that we stop generating new message schedule words (Wt, v10-13)\n+      \/\/ Quad-round #12 (+0, vW0->vW1->vW2->vW3) ... #15 (+3, vW3->vW0->vW1->vW2)\n+      \/\/ Note that we stop generating new message schedule words (Wt, vW0-13)\n@@ -4006,1 +4014,1 @@\n-                   v15, v14, v16, v17, false, i < (qr_c_end-1));\n+                   vTmp1, vTmp0, vState0, vState1, false, i < (qr_c_end-1));\n@@ -4017,2 +4025,2 @@\n-      __ vadd_vv(v16, v26, v16);\n-      __ vadd_vv(v17, v27, v17);\n+      __ vadd_vv(vState0, vHash0, vState0);\n+      __ vadd_vv(vState1, vHash1, vState1);\n@@ -4029,4 +4037,4 @@\n-      \/\/  v16 = {f,e,b,a}\n-      \/\/  v17 = {h,g,d,c}\n-      __ vsuxei8_v(v16, state,   vindex);\n-      __ vsuxei8_v(v17, state_c, vindex);\n+      \/\/  vState0 = {f,e,b,a}\n+      \/\/  vState1 = {h,g,d,c}\n+      __ vsuxei8_v(vState0, state,   vindex);\n+      __ vsuxei8_v(vState1, state_c, vindex);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":108,"deletions":100,"binary":false,"changes":208,"status":"modified"}]}