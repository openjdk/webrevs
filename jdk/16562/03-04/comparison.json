{"files":[{"filename":"src\/hotspot\/cpu\/riscv\/.macroAssembler_riscv.cpp.swp","binary":true,"status":"added"},{"patch":"@@ -1813,0 +1813,1 @@\n+  INSN( vluxei8_v, 0b0000111, 0b000, 0b01, 0b0);\n","filename":"src\/hotspot\/cpu\/riscv\/assembler_riscv.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1348,1 +1348,2 @@\n-  inline void vmsltu_vi(VectorRegister Vd, VectorRegister Vs2, int32_t imm, VectorMask vm = unmasked) {\n+  inline void vmsltu_vi(VectorRegister Vd, VectorRegister Vs2, uint32_t imm, VectorMask vm = unmasked) {\n+    guarantee(imm >= 1 && imm <= 16, \"imm is invalid\");\n@@ -1352,1 +1353,2 @@\n-  inline void vmsgeu_vi(VectorRegister Vd, VectorRegister Vs2, int32_t imm, VectorMask vm = unmasked) {\n+  inline void vmsgeu_vi(VectorRegister Vd, VectorRegister Vs2, uint32_t imm, VectorMask vm = unmasked) {\n+    guarantee(imm >= 1 && imm <= 16, \"imm is invalid\");\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3936,0 +3936,1 @@\n+\n@@ -3937,0 +3938,4 @@\n+      \/\/ Splat indexes in v26 if SEW = e64, but don't hurt anything.\n+      int64_t indexes = vset_sew == Assembler::e32 ? 0x00041014ul : 0x00082028ul;\n+      __ li(t0, indexes);\n+      __ vmv_s_x(v26, t0);\n@@ -3938,20 +3943,5 @@\n-      \/\/ Load H[0..8] to produce\n-      \/\/  v16 = {a,b,e,f}\n-      \/\/  v17 = {c,d,g,h}\n-      __ vleXX_v(vset_sew, v16, state);                \/\/ v16 = {d,c,b,a}\n-      __ addi(state, state, const_add);\n-      __ vleXX_v(vset_sew, v17, state);                \/\/ v17 = {h,g,f,e}\n-\n-      __ vid_v(v30);                                   \/\/ v30 = {3,2,1,0}\n-      __ vxor_vi(v30, v30, 0x3);                       \/\/ v30 = {0,1,2,3}\n-      __ vrgather_vv(v26, v16, v30);                   \/\/ v26 = {a,b,c,d}\n-      __ vrgather_vv(v27, v17, v30);                   \/\/ v27 = {e,f,g,h}\n-      __ vmsgeu_vi(v0, v30, 2);                        \/\/ v0  = {f,f,t,t}\n-      \/\/ Copy elements [3..2] of v26 ({d,c}) into elements [3..2] of v17.\n-      __ vslideup_vi(v17, v26, 2);                     \/\/ v17 = {c,d,_,_}\n-      \/\/ Merge elements [1..0] of v27 ({g,h}) into elements [1..0] of v17\n-      __ vmerge_vvm(v17, v17, v27);                    \/\/ v17 = {c,d,g,h}\n-      \/\/ Copy elements [1..0] of v27 ({f,e}) into elements [1..0] of v16.\n-      __ vslidedown_vi(v16, v27, 2);                   \/\/ v16 = {_,_,e,f}\n-      \/\/ Merge elements [3..2] of v26 ({a,b}) into elements [3..2] of v16\n-      __ vmerge_vvm(v16, v26, v16);                    \/\/ v16 = {a,b,e,f}\n+      \/\/ Use index-load to get {f,e,b,a},{h,g,d,c}\n+      __ vluxei8_v(v16, state, v26);\n+      \/\/ Step-over a,b, so we are pointing to c.\n+      __ addi(t0, state, const_add\/2);\n+      __ vluxei8_v(v17, t0, v26);\n@@ -4056,2 +4046,0 @@\n-      __ vseXX_v(vset_sew, v17, state);\n-      __ addi(state, state, -const_add);\n@@ -4059,0 +4047,2 @@\n+      __ addi(state, state, const_add);\n+      __ vseXX_v(vset_sew, v17, state);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"}]}