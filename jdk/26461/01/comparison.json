{"files":[{"patch":"@@ -532,0 +532,18 @@\n+    \/**\n+     * Returns the number of Unicode code points in\n+     * this sequence. Unpaired surrogates count\n+     * as one code point each.\n+     *\n+     * @return the number of Unicode code points in this String\n+     * @since  26\n+     *\/\n+    public int codePointCount() {\n+        byte coder = this.coder;\n+        int count = this.count;\n+        byte[] value = this.value;\n+        if (isLatin1(coder)) {\n+            return count;\n+        }\n+        return StringUTF16.codePointCount(value, 0, count);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/AbstractStringBuilder.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -9955,0 +9955,23 @@\n+    \/**\n+     * Returns the number of Unicode code points in the text range of\n+     * the specified char sequence. Unpaired surrogates count as one\n+     * code point each.\n+     *\n+     * @param seq the char sequence\n+     * @return the number of Unicode code points in the char sequence\n+     * @throws NullPointerException if {@code seq} is null.\n+     * @since  26\n+     *\/\n+    public static int codePointCount(CharSequence seq) {\n+        final int length = seq.length();\n+        int n = length;\n+        for (int i = 0; i < length; ) {\n+            if (isHighSurrogate(seq.charAt(i++)) && i < length &&\n+                isLowSurrogate(seq.charAt(i))) {\n+                n--;\n+                i++;\n+            }\n+        }\n+        return n;\n+    }\n+\n@@ -9979,0 +10002,14 @@\n+    \/**\n+     * Returns the number of Unicode code points in the\n+     * {@code char} array argument. Unpaired\n+     * surrogates count as one code point each.\n+     *\n+     * @param a the {@code char} array\n+     * @return the number of Unicode code points in the char array\n+     * @throws NullPointerException if {@code a} is null.\n+     * @since  26\n+     *\/\n+    public static int codePointCount(char[] a) {\n+        return codePointCountImpl(a, 0, a.length);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Character.java","additions":37,"deletions":0,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -1717,0 +1717,15 @@\n+    \/**\n+     * Returns the number of Unicode code points in\n+     * this {@code String}. Unpaired surrogates count\n+     * as one code point each.\n+     *\n+     * @return the number of Unicode code points in this String\n+     * @since  26\n+     *\/\n+    public int codePointCount() {\n+        if (isLatin1()) {\n+            return value.length;\n+        }\n+        return StringUTF16.codePointCount(value, 0, value.length >> 1);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -273,0 +273,8 @@\n+    \/**\n+     * @since     26\n+     *\/\n+    @Override\n+    public synchronized int codePointCount() {\n+        return super.codePointCount();\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringBuffer.java","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1661,1 +1661,1 @@\n-            if (nfd.codePointCount(0, nfd.length()) > 1) {\n+            if (nfd.codePointCount() > 1) {\n@@ -4160,1 +4160,1 @@\n-                        if (nfc.codePointCount(0, nfc.length()) == 1) {\n+                        if (nfc.codePointCount() == 1) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/regex\/Pattern.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1909,1 +1909,1 @@\n-                int cpNum = norm.codePointCount(0, length);\n+                int cpNum = norm.codePointCount();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/icu\/impl\/NormalizerImpl.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -337,0 +337,2 @@\n+     *      codePointCount(CharSequence)\n+     *      codePointCount(char[])\n@@ -350,0 +352,6 @@\n+        int n = Character.codePointCount(str);\n+        int m = codePointCount(str);\n+        checkCodePointCount(str, n, m);\n+        n = Character.codePointCount(a);\n+        checkCodePointCount(a, n, m);\n+\n@@ -352,1 +360,1 @@\n-        int n = Character.codePointCount(str, 0, 0);\n+        n = Character.codePointCount(str, 0, 0);\n","filename":"test\/jdk\/java\/lang\/Character\/Supplementary.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2010, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -391,1 +391,1 @@\n-     * This test case assumes that\n+     * This test case assumes that Character.codePointCount() &\n@@ -422,0 +422,4 @@\n+            int result = str.codePointCount();\n+            int expected = Character.codePointCount(str);\n+            check(result != expected, \"substring:codePointCount()\", result, expected);\n+\n","filename":"test\/jdk\/java\/lang\/String\/Supplementary.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2013, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -218,1 +218,1 @@\n-     * Test codePointCount(int, int)\n+     * Test codePointCount(int, int) & codePointCount()\n@@ -221,2 +221,2 @@\n-     * Character.codePointCount(CharSequence, int, int) works\n-     * correctly.\n+     * Character.codePointCount(CharSequence, int, int) &\n+     * Character.codePointCount(CharSequence) works correctly.\n@@ -242,0 +242,5 @@\n+\n+            int result = sb.codePointCount();\n+            int expected = Character.codePointCount(sb);\n+            check(result != expected, \"codePointCount()\", result, expected);\n+\n","filename":"test\/jdk\/java\/lang\/StringBuilder\/Supplementary.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"}]}