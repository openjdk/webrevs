{"files":[{"patch":"@@ -559,1 +559,0 @@\n-\n@@ -711,0 +710,1 @@\n+        List<JCExpression> elems = na.elems;\n@@ -713,0 +713,1 @@\n+            elems = List.nil();\n@@ -715,1 +716,1 @@\n-        for (List<JCExpression> l = na.elems; l.nonEmpty(); l=l.tail) {\n+        for (List<JCExpression> l = elems; l.nonEmpty(); l = l.tail) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Annotate.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,18 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8320144\n+ * @summary Compilation crashes when a custom annotation with invalid default value is used\n+ * @compile\/fail\/ref=T8320144.out -XDrawDiagnostics T8320144.java\n+ *\/\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+public class T8320144 {\n+    @Retention(RetentionPolicy.RUNTIME)\n+    @Target({ElementType.TYPE})\n+    public @interface TestAnnotation {\n+        public String[] excludeModules() default new String[0];\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/T8320144.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+T8320144.java:16:54: compiler.err.new.not.allowed.in.annotation\n+1 error\n","filename":"test\/langtools\/tools\/javac\/T8320144.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"}]}