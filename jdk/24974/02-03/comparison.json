{"files":[{"patch":"@@ -74,0 +74,3 @@\n+    private static final String RESOURCES_DIR = \"Resources\";\n+    private static final String LINKS_DIR = \"Links\";\n+\n@@ -102,2 +105,3 @@\n-                        if (name.toString().contains(\"Link\")) {\n-                            TKit.assertSymbolicLinkExists(getAppContentPath(cmd, name));\n+                        if (isSymlinkPath(name)) {\n+                            TKit.assertSymbolicLinkExists(getAppContentRoot(cmd)\n+                                .resolve(LINKS_DIR).resolve(name));\n@@ -105,1 +109,2 @@\n-                            TKit.assertPathExists(getAppContentPath(cmd, name), true);\n+                            TKit.assertPathExists(getAppContentRoot(cmd)\n+                                .resolve(name), true);\n@@ -114,1 +119,1 @@\n-    private static Path getAppContentPath(JPackageCommand cmd, Path name) {\n+    private static Path getAppContentRoot(JPackageCommand cmd) {\n@@ -116,3 +121,2 @@\n-        \/\/ Links are always created in \"Resources\"\n-        if (copyInResources || name.toString().contains(\"Link\")) {\n-            return contentDir.resolve(\"Resources\").resolve(name);\n+        if (copyInResources) {\n+            return contentDir.resolve(RESOURCES_DIR);\n@@ -120,1 +124,1 @@\n-            return contentDir.resolve(name);\n+            return contentDir;\n@@ -124,0 +128,4 @@\n+    private static boolean isSymlinkPath(Path v) {\n+        return v.getFileName().toString().contains(\"Link\");\n+    }\n+\n@@ -147,1 +155,1 @@\n-            Path appContentArg = TKit.createTempDirectory(\"app-content\").resolve(\"Resources\");\n+            var appContentArg = TKit.createTempDirectory(\"app-content\").resolve(RESOURCES_DIR);\n@@ -149,1 +157,1 @@\n-            Path dstPath = appContentArg.resolve(srcPath.getFileName());\n+            var dstPath = appContentArg.resolve(srcPath.getFileName());\n@@ -151,7 +159,10 @@\n-            if (dstPath.getFileName().toString().contains(\"Link\")) {\n-                String tagetName = dstPath.getFileName().toString().replace(\"Link\", \"\");\n-                Path targetPath = dstPath.getParent().resolve(tagetName);\n-                Files.write(targetPath, \"foo\".getBytes());\n-                Files.createSymbolicLink(dstPath, targetPath.getFileName());\n-            } else {\n-                FileUtils.copyRecursive(srcPath, dstPath);\n+            FileUtils.copyRecursive(srcPath, dstPath);\n+            return appContentArg;\n+        }\n+\n+        private static Path createAppContentLink(Path appContentPath) throws IOException {\n+            var appContentArg = TKit.createTempDirectory(\"app-content\");\n+            if (copyInResources) {\n+                appContentArg = appContentArg.resolve(RESOURCES_DIR).resolve(LINKS_DIR);\n+            }   else {\n+                appContentArg = appContentArg.resolve(LINKS_DIR);\n@@ -159,0 +170,11 @@\n+\n+            var dstPath = appContentArg.resolve(appContentPath.getFileName());\n+            Files.createDirectories(dstPath.getParent());\n+\n+            \/\/ Create target file for a link\n+            String tagetName = dstPath.getFileName().toString().replace(\"Link\", \"\");\n+            Path targetPath = dstPath.getParent().resolve(tagetName);\n+            Files.write(targetPath, \"foo\".getBytes());\n+            \/\/ Create link\n+            Files.createSymbolicLink(dstPath, targetPath.getFileName());\n+\n@@ -163,16 +185,15 @@\n-            boolean copy = (copyInResources || appContentPaths.stream()\n-                            .anyMatch(s -> s.toString().contains(\"Link\")));\n-\n-            if (copy) {\n-                return appContentPaths.stream().map(appContentPath -> {\n-                    if (appContentPath.endsWith(TEST_BAD)) {\n-                        return appContentPath;\n-                    } else {\n-                        return ThrowingFunction.toFunction(\n-                                AppContentInitializer::copyAppContentPath).apply(\n-                                        appContentPath);\n-                    }\n-                }).toList();\n-            } else {\n-                return appContentPaths.stream().map(TKit.TEST_SRC_ROOT::resolve).toList();\n-            }\n+            return appContentPaths.stream().map(appContentPath -> {\n+                if (appContentPath.endsWith(TEST_BAD)) {\n+                    return appContentPath;\n+                } else if (isSymlinkPath(appContentPath)) {\n+                    return ThrowingFunction.toFunction(\n+                            AppContentInitializer::createAppContentLink).apply(\n+                                    appContentPath);\n+                } else if (copyInResources) {\n+                    return ThrowingFunction.toFunction(\n+                            AppContentInitializer::copyAppContentPath).apply(\n+                                    appContentPath);\n+                } else {\n+                    return TKit.TEST_SRC_ROOT.resolve(appContentPath);\n+                }\n+            }).toList();\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":54,"deletions":33,"binary":false,"changes":87,"status":"modified"}]}