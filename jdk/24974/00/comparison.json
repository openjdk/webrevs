{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,0 +28,1 @@\n+import jdk.internal.util.OperatingSystem;\n@@ -31,0 +32,1 @@\n+import java.nio.file.LinkOption;\n@@ -109,2 +111,8 @@\n-            FileUtils.copyRecursive(Path.of(item),\n-                appLayout.contentDirectory().resolve(Path.of(item).getFileName()));\n+            if (OperatingSystem.isMacOS()) {\n+                FileUtils.copyRecursive(Path.of(item),\n+                    appLayout.contentDirectory().resolve(Path.of(item).getFileName()),\n+                    LinkOption.NOFOLLOW_LINKS);\n+            } else {\n+                FileUtils.copyRecursive(Path.of(item),\n+                    appLayout.contentDirectory().resolve(Path.of(item).getFileName()));\n+            }\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AbstractAppImageBuilder.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-            Executor.of(\"sudo\", \"cp\", \"-r\")\n+            Executor.of(\"sudo\", \"cp\", \"-R\")\n@@ -208,1 +208,1 @@\n-            Executor.of(\"cp\", \"-r\")\n+            Executor.of(\"cp\", \"-R\")\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,1 +30,1 @@\n-import jdk.jpackage.test.Annotations.Parameters;\n+import jdk.jpackage.test.Annotations.Parameter;\n@@ -36,0 +36,1 @@\n+import static jdk.internal.util.OperatingSystem.MACOS;\n@@ -59,0 +60,1 @@\n+    private static final String TEST_DUKE_LINK = \"dukeplugLink.png\";\n@@ -70,16 +72,0 @@\n-    private final List<String> testPathArgs;\n-\n-    @Parameters\n-    public static Collection<?> data() {\n-        return List.of(new String[][]{\n-            {TEST_JAVA, TEST_DUKE}, \/\/ include two files in two options\n-            {TEST_JAVA, TEST_BAD},  \/\/ try to include non-existant content\n-            {TEST_JAVA + \",\" + TEST_DUKE, TEST_DIR}, \/\/ two files in one option,\n-                                            \/\/ and a dir tree in another option.\n-        });\n-    }\n-\n-    public AppContentTest(String... testPathArgs) {\n-        this.testPathArgs = List.of(testPathArgs);\n-    }\n-\n@@ -87,1 +73,10 @@\n-    public void test() throws Exception {\n+    \/\/ include two files in two options\n+    @Parameter({TEST_JAVA, TEST_DUKE})\n+    \/\/ try to include non-existant content\n+    @Parameter({TEST_JAVA, TEST_BAD})\n+     \/\/ two files in one option and a dir tree in another option.\n+    @Parameter({TEST_JAVA + \",\" + TEST_DUKE, TEST_DIR})\n+     \/\/ include one file and one link to the file\n+    @Parameter(value = {TEST_JAVA, TEST_DUKE_LINK}, ifOS = MACOS)\n+    public void test(String... args) throws Exception {\n+        final List<String> testPathArgs = List.of(args);\n@@ -106,1 +101,5 @@\n-                        TKit.assertPathExists(baseDir.resolve(name), true);\n+                        if (name.toString().contains(\"Link\")) {\n+                            TKit.assertSymbolicLinkExists(baseDir.resolve(name));\n+                        } else {\n+                            TKit.assertPathExists(baseDir.resolve(name), true);\n+                        }\n@@ -149,1 +148,1 @@\n-            var dstPath = appContentArg.resolve(srcPath.getFileName());\n+            Path dstPath = appContentArg.resolve(srcPath.getFileName());\n@@ -151,1 +150,8 @@\n-            FileUtils.copyRecursive(srcPath, dstPath);\n+            if (dstPath.getFileName().toString().contains(\"Link\")) {\n+                String tagetName = dstPath.getFileName().toString().replace(\"Link\", \"\");\n+                Path targetPath = dstPath.getParent().resolve(tagetName);\n+                Files.createFile(targetPath);\n+                Files.createSymbolicLink(dstPath, targetPath.toAbsolutePath());\n+            } else {\n+                FileUtils.copyRecursive(srcPath, dstPath);\n+            }\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":27,"deletions":21,"binary":false,"changes":48,"status":"modified"}]}