{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+import java.nio.file.LinkOption;\n@@ -110,1 +111,2 @@\n-                appLayout.contentDirectory().resolve(Path.of(item).getFileName()));\n+                appLayout.contentDirectory().resolve(Path.of(item).getFileName()),\n+                LinkOption.NOFOLLOW_LINKS);\n","filename":"src\/jdk.jpackage\/share\/classes\/jdk\/jpackage\/internal\/AbstractAppImageBuilder.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-            Executor.of(\"sudo\", \"cp\", \"-r\")\n+            Executor.of(\"sudo\", \"cp\", \"-R\")\n@@ -208,1 +208,1 @@\n-            Executor.of(\"cp\", \"-r\")\n+            Executor.of(\"cp\", \"-R\")\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/MacHelper.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -24,0 +24,4 @@\n+import static jdk.internal.util.OperatingSystem.LINUX;\n+import static jdk.internal.util.OperatingSystem.MACOS;\n+import static java.util.stream.Collectors.joining;\n+\n@@ -30,1 +34,1 @@\n-import jdk.jpackage.test.Annotations.Parameters;\n+import jdk.jpackage.test.Annotations.Parameter;\n@@ -34,1 +38,0 @@\n-import static java.util.stream.Collectors.joining;\n@@ -59,0 +62,1 @@\n+    private static final String TEST_DUKE_LINK = \"dukeplugLink.txt\";\n@@ -70,15 +74,2 @@\n-    private final List<String> testPathArgs;\n-\n-    @Parameters\n-    public static Collection<?> data() {\n-        return List.of(new String[][]{\n-            {TEST_JAVA, TEST_DUKE}, \/\/ include two files in two options\n-            {TEST_JAVA, TEST_BAD},  \/\/ try to include non-existant content\n-            {TEST_JAVA + \",\" + TEST_DUKE, TEST_DIR}, \/\/ two files in one option,\n-                                            \/\/ and a dir tree in another option.\n-        });\n-    }\n-\n-    public AppContentTest(String... testPathArgs) {\n-        this.testPathArgs = List.of(testPathArgs);\n-    }\n+    private static final String RESOURCES_DIR = \"Resources\";\n+    private static final String LINKS_DIR = \"Links\";\n@@ -87,1 +78,10 @@\n-    public void test() throws Exception {\n+    \/\/ include two files in two options\n+    @Parameter({TEST_JAVA, TEST_DUKE})\n+    \/\/ try to include non-existant content\n+    @Parameter({TEST_JAVA, TEST_BAD})\n+     \/\/ two files in one option and a dir tree in another option.\n+    @Parameter({TEST_JAVA + \",\" + TEST_DUKE, TEST_DIR})\n+     \/\/ include one file and one link to the file\n+    @Parameter(value = {TEST_JAVA, TEST_DUKE_LINK}, ifOS = {MACOS,LINUX})\n+    public void test(String... args) throws Exception {\n+        final List<String> testPathArgs = List.of(args);\n@@ -101,1 +101,0 @@\n-                Path baseDir = getAppContentRoot(cmd);\n@@ -106,1 +105,7 @@\n-                        TKit.assertPathExists(baseDir.resolve(name), true);\n+                        if (isSymlinkPath(name)) {\n+                            TKit.assertSymbolicLinkExists(getAppContentRoot(cmd)\n+                                .resolve(LINKS_DIR).resolve(name));\n+                        } else {\n+                            TKit.assertPathExists(getAppContentRoot(cmd)\n+                                .resolve(name), true);\n+                        }\n@@ -109,1 +114,0 @@\n-\n@@ -118,1 +122,1 @@\n-            return contentDir.resolve(\"Resources\");\n+            return contentDir.resolve(RESOURCES_DIR);\n@@ -124,0 +128,4 @@\n+    private static boolean isSymlinkPath(Path v) {\n+        return v.getFileName().toString().contains(\"Link\");\n+    }\n+\n@@ -147,1 +155,1 @@\n-            var appContentArg = TKit.createTempDirectory(\"app-content\").resolve(\"Resources\");\n+            var appContentArg = TKit.createTempDirectory(\"app-content\").resolve(RESOURCES_DIR);\n@@ -155,1 +163,2 @@\n-        private static List<Path> initAppContentPaths(List<Path> appContentPaths) {\n+        private static Path createAppContentLink(Path appContentPath) throws IOException {\n+            var appContentArg = TKit.createTempDirectory(\"app-content\");\n@@ -157,11 +166,3 @@\n-                return appContentPaths.stream().map(appContentPath -> {\n-                    if (appContentPath.endsWith(TEST_BAD)) {\n-                        return appContentPath;\n-                    } else {\n-                        return ThrowingFunction.toFunction(\n-                                AppContentInitializer::copyAppContentPath).apply(\n-                                        appContentPath);\n-                    }\n-                }).toList();\n-            } else {\n-                return appContentPaths.stream().map(TKit.TEST_SRC_ROOT::resolve).toList();\n+                appContentArg = appContentArg.resolve(RESOURCES_DIR).resolve(LINKS_DIR);\n+            }   else {\n+                appContentArg = appContentArg.resolve(LINKS_DIR);\n@@ -169,0 +170,30 @@\n+\n+            var dstPath = appContentArg.resolve(appContentPath.getFileName());\n+            Files.createDirectories(dstPath.getParent());\n+\n+            \/\/ Create target file for a link\n+            String tagetName = dstPath.getFileName().toString().replace(\"Link\", \"\");\n+            Path targetPath = dstPath.getParent().resolve(tagetName);\n+            Files.write(targetPath, \"foo\".getBytes());\n+            \/\/ Create link\n+            Files.createSymbolicLink(dstPath, targetPath.getFileName());\n+\n+            return appContentArg;\n+        }\n+\n+        private static List<Path> initAppContentPaths(List<Path> appContentPaths) {\n+            return appContentPaths.stream().map(appContentPath -> {\n+                if (appContentPath.endsWith(TEST_BAD)) {\n+                    return appContentPath;\n+                } else if (isSymlinkPath(appContentPath)) {\n+                    return ThrowingFunction.toFunction(\n+                            AppContentInitializer::createAppContentLink).apply(\n+                                    appContentPath);\n+                } else if (copyInResources) {\n+                    return ThrowingFunction.toFunction(\n+                            AppContentInitializer::copyAppContentPath).apply(\n+                                    appContentPath);\n+                } else {\n+                    return TKit.TEST_SRC_ROOT.resolve(appContentPath);\n+                }\n+            }).toList();\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":66,"deletions":35,"binary":false,"changes":101,"status":"modified"}]}