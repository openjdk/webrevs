{"files":[{"patch":"@@ -210,1 +210,1 @@\n-  __ lsr(tmp1, tmp1, HeapRegion::LogOfHRGrainBytes);\n+  __ lsr(tmp1, tmp1, G1HeapRegion::LogOfHRGrainBytes);\n","filename":"src\/hotspot\/cpu\/aarch64\/gc\/g1\/g1BarrierSetAssembler_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -210,1 +210,1 @@\n-  __ movs(tmp1, AsmOperand(tmp1, lsr, HeapRegion::LogOfHRGrainBytes));\n+  __ movs(tmp1, AsmOperand(tmp1, lsr, G1HeapRegion::LogOfHRGrainBytes));\n","filename":"src\/hotspot\/cpu\/arm\/gc\/g1\/g1BarrierSetAssembler_arm.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -246,1 +246,1 @@\n-  __ srdi_(tmp1, tmp1, HeapRegion::LogOfHRGrainBytes);\n+  __ srdi_(tmp1, tmp1, G1HeapRegion::LogOfHRGrainBytes);\n","filename":"src\/hotspot\/cpu\/ppc\/gc\/g1\/g1BarrierSetAssembler_ppc.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -197,1 +197,1 @@\n-  __ srli(tmp1, tmp1, HeapRegion::LogOfHRGrainBytes);\n+  __ srli(tmp1, tmp1, G1HeapRegion::LogOfHRGrainBytes);\n","filename":"src\/hotspot\/cpu\/riscv\/gc\/g1\/g1BarrierSetAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -285,1 +285,1 @@\n-  __ z_srag(Rtmp1, Rtmp1, HeapRegion::LogOfHRGrainBytes);\n+  __ z_srag(Rtmp1, Rtmp1, G1HeapRegion::LogOfHRGrainBytes);\n","filename":"src\/hotspot\/cpu\/s390\/gc\/g1\/g1BarrierSetAssembler_s390.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -289,1 +289,1 @@\n-  __ shrptr(tmp, HeapRegion::LogOfHRGrainBytes);\n+  __ shrptr(tmp, G1HeapRegion::LogOfHRGrainBytes);\n","filename":"src\/hotspot\/cpu\/x86\/gc\/g1\/g1BarrierSetAssembler_x86.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-    guarantee(MIN_GC_REGION_ALIGNMENT <= \/*G1*\/HeapRegion::min_region_size_in_words() * HeapWordSize, \"must be\");\n+    guarantee(MIN_GC_REGION_ALIGNMENT <= G1HeapRegion::min_region_size_in_words() * HeapWordSize, \"must be\");\n@@ -440,1 +440,1 @@\n-    _requested_bottom = align_down(heap_end - heap_region_byte_size, HeapRegion::GrainBytes);\n+    _requested_bottom = align_down(heap_end - heap_region_byte_size, G1HeapRegion::GrainBytes);\n@@ -450,1 +450,1 @@\n-  assert(is_aligned(_requested_bottom, HeapRegion::GrainBytes), \"sanity\");\n+  assert(is_aligned(_requested_bottom, G1HeapRegion::GrainBytes), \"sanity\");\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2067,2 +2067,2 @@\n-  log_info(cds)(\"The current max heap size = \" SIZE_FORMAT \"M, HeapRegion::GrainBytes = \" SIZE_FORMAT,\n-                MaxHeapSize\/M, HeapRegion::GrainBytes);\n+  log_info(cds)(\"The current max heap size = \" SIZE_FORMAT \"M, G1HeapRegion::GrainBytes = \" SIZE_FORMAT,\n+                MaxHeapSize\/M, G1HeapRegion::GrainBytes);\n@@ -2133,1 +2133,1 @@\n-    assert(is_aligned(_mapped_heap_memregion.start(), HeapRegion::GrainBytes), \"must be\");\n+    assert(is_aligned(_mapped_heap_memregion.start(), G1HeapRegion::GrainBytes), \"must be\");\n@@ -2143,1 +2143,1 @@\n-    assert(heap_end - mapped_heap_region_end < (intx)(HeapRegion::GrainBytes),\n+    assert(heap_end - mapped_heap_region_end < (intx)(G1HeapRegion::GrainBytes),\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -161,1 +161,1 @@\n-                            LIR_OprFact::intConst(checked_cast<jint>(HeapRegion::LogOfHRGrainBytes)),\n+                            LIR_OprFact::intConst(checked_cast<jint>(G1HeapRegion::LogOfHRGrainBytes)),\n@@ -167,1 +167,1 @@\n-                            LIR_OprFact::intConst(checked_cast<jint>(HeapRegion::LogOfHRGrainBytes)),\n+                            LIR_OprFact::intConst(checked_cast<jint>(G1HeapRegion::LogOfHRGrainBytes)),\n","filename":"src\/hotspot\/share\/gc\/g1\/c1\/g1BarrierSetC1.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -456,2 +456,2 @@\n-    \/\/ Node* region_size = __ ConI(1 << HeapRegion::LogOfHRGrainBytes);\n-    Node* xor_res =  __ URShiftX ( __ XorX( cast,  __ CastPX(__ ctrl(), val)), __ ConI(checked_cast<jint>(HeapRegion::LogOfHRGrainBytes)));\n+    \/\/ Node* region_size = __ ConI(1 << G1HeapRegion::LogOfHRGrainBytes);\n+    Node* xor_res =  __ URShiftX ( __ XorX( cast,  __ CastPX(__ ctrl(), val)), __ ConI(checked_cast<jint>(G1HeapRegion::LogOfHRGrainBytes)));\n","filename":"src\/hotspot\/share\/gc\/g1\/c2\/g1BarrierSetC2.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-HeapRegion* G1AllocRegion::_dummy_region = nullptr;\n+G1HeapRegion* G1AllocRegion::_dummy_region = nullptr;\n@@ -39,1 +39,1 @@\n-void G1AllocRegion::setup(G1CollectedHeap* g1h, HeapRegion* dummy_region) {\n+void G1AllocRegion::setup(G1CollectedHeap* g1h, G1HeapRegion* dummy_region) {\n@@ -53,1 +53,1 @@\n-size_t G1AllocRegion::fill_up_remaining_space(HeapRegion* alloc_region) {\n+size_t G1AllocRegion::fill_up_remaining_space(G1HeapRegion* alloc_region) {\n@@ -97,1 +97,1 @@\n-size_t G1AllocRegion::retire_internal(HeapRegion* alloc_region, bool fill_up) {\n+size_t G1AllocRegion::retire_internal(G1HeapRegion* alloc_region, bool fill_up) {\n@@ -123,1 +123,1 @@\n-  HeapRegion* alloc_region = _alloc_region;\n+  G1HeapRegion* alloc_region = _alloc_region;\n@@ -138,1 +138,1 @@\n-  HeapRegion* new_alloc_region = allocate_new_region(word_size);\n+  G1HeapRegion* new_alloc_region = allocate_new_region(word_size);\n@@ -169,1 +169,1 @@\n-void G1AllocRegion::set(HeapRegion* alloc_region) {\n+void G1AllocRegion::set(G1HeapRegion* alloc_region) {\n@@ -184,1 +184,1 @@\n-void G1AllocRegion::update_alloc_region(HeapRegion* alloc_region) {\n+void G1AllocRegion::update_alloc_region(G1HeapRegion* alloc_region) {\n@@ -195,1 +195,1 @@\n-HeapRegion* G1AllocRegion::release() {\n+G1HeapRegion* G1AllocRegion::release() {\n@@ -197,1 +197,1 @@\n-  HeapRegion* alloc_region = _alloc_region;\n+  G1HeapRegion* alloc_region = _alloc_region;\n@@ -260,1 +260,1 @@\n-HeapRegion* MutatorAllocRegion::allocate_new_region(size_t word_size) {\n+G1HeapRegion* MutatorAllocRegion::allocate_new_region(size_t word_size) {\n@@ -264,1 +264,1 @@\n-void MutatorAllocRegion::retire_region(HeapRegion* alloc_region,\n+void MutatorAllocRegion::retire_region(G1HeapRegion* alloc_region,\n@@ -275,1 +275,1 @@\n-bool MutatorAllocRegion::should_retain(HeapRegion* region) {\n+bool MutatorAllocRegion::should_retain(G1HeapRegion* region) {\n@@ -292,1 +292,1 @@\n-  HeapRegion* current_region = get();\n+  G1HeapRegion* current_region = get();\n@@ -315,1 +315,1 @@\n-  HeapRegion* hr = get();\n+  G1HeapRegion* hr = get();\n@@ -327,2 +327,2 @@\n-HeapRegion* MutatorAllocRegion::release() {\n-  HeapRegion* ret = G1AllocRegion::release();\n+G1HeapRegion* MutatorAllocRegion::release() {\n+  G1HeapRegion* ret = G1AllocRegion::release();\n@@ -341,1 +341,1 @@\n-                               percent_of(_wasted_bytes, count() * HeapRegion::GrainBytes));\n+                               percent_of(_wasted_bytes, count() * G1HeapRegion::GrainBytes));\n@@ -345,1 +345,1 @@\n-HeapRegion* G1GCAllocRegion::allocate_new_region(size_t word_size) {\n+G1HeapRegion* G1GCAllocRegion::allocate_new_region(size_t word_size) {\n@@ -349,1 +349,1 @@\n-void G1GCAllocRegion::retire_region(HeapRegion* alloc_region,\n+void G1GCAllocRegion::retire_region(G1HeapRegion* alloc_region,\n@@ -355,1 +355,1 @@\n-  HeapRegion* retired = get();\n+  G1HeapRegion* retired = get();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.cpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-  HeapRegion* volatile _alloc_region;\n+  G1HeapRegion* volatile _alloc_region;\n@@ -79,1 +79,1 @@\n-  static HeapRegion* _dummy_region;\n+  static G1HeapRegion* _dummy_region;\n@@ -83,1 +83,1 @@\n-  void update_alloc_region(HeapRegion* alloc_region);\n+  void update_alloc_region(G1HeapRegion* alloc_region);\n@@ -101,1 +101,1 @@\n-  inline HeapWord* allocate(HeapRegion* alloc_region,\n+  inline HeapWord* allocate(G1HeapRegion* alloc_region,\n@@ -105,1 +105,1 @@\n-  inline HeapWord* par_allocate(HeapRegion* alloc_region,\n+  inline HeapWord* par_allocate(G1HeapRegion* alloc_region,\n@@ -111,1 +111,1 @@\n-  inline HeapWord* par_allocate(HeapRegion* alloc_region,\n+  inline HeapWord* par_allocate(G1HeapRegion* alloc_region,\n@@ -120,1 +120,1 @@\n-  size_t fill_up_remaining_space(HeapRegion* alloc_region);\n+  size_t fill_up_remaining_space(G1HeapRegion* alloc_region);\n@@ -128,1 +128,1 @@\n-  size_t retire_internal(HeapRegion* alloc_region, bool fill_up);\n+  size_t retire_internal(G1HeapRegion* alloc_region, bool fill_up);\n@@ -133,2 +133,2 @@\n-  virtual HeapRegion* allocate_new_region(size_t word_size) = 0;\n-  virtual void retire_region(HeapRegion* alloc_region,\n+  virtual G1HeapRegion* allocate_new_region(size_t word_size) = 0;\n+  virtual void retire_region(G1HeapRegion* alloc_region,\n@@ -140,1 +140,1 @@\n-  static void setup(G1CollectedHeap* g1h, HeapRegion* dummy_region);\n+  static void setup(G1CollectedHeap* g1h, G1HeapRegion* dummy_region);\n@@ -142,2 +142,2 @@\n-  HeapRegion* get() const {\n-    HeapRegion * hr = _alloc_region;\n+  G1HeapRegion* get() const {\n+    G1HeapRegion * hr = _alloc_region;\n@@ -180,1 +180,1 @@\n-  void set(HeapRegion* alloc_region);\n+  void set(G1HeapRegion* alloc_region);\n@@ -184,1 +184,1 @@\n-  virtual HeapRegion* release();\n+  virtual G1HeapRegion* release();\n@@ -202,1 +202,1 @@\n-  HeapRegion* volatile _retained_alloc_region;\n+  G1HeapRegion* volatile _retained_alloc_region;\n@@ -206,1 +206,1 @@\n-  bool should_retain(HeapRegion* region);\n+  bool should_retain(G1HeapRegion* region);\n@@ -208,2 +208,2 @@\n-  virtual HeapRegion* allocate_new_region(size_t word_size);\n-  virtual void retire_region(HeapRegion* alloc_region, size_t allocated_bytes);\n+  virtual G1HeapRegion* allocate_new_region(size_t word_size);\n+  virtual void retire_region(G1HeapRegion* alloc_region, size_t allocated_bytes);\n@@ -211,0 +211,1 @@\n+\n@@ -233,1 +234,1 @@\n-  virtual HeapRegion* release();\n+  virtual G1HeapRegion* release();\n@@ -244,2 +245,2 @@\n-  virtual HeapRegion* allocate_new_region(size_t word_size);\n-  virtual void retire_region(HeapRegion* alloc_region, size_t allocated_bytes);\n+  virtual G1HeapRegion* allocate_new_region(size_t word_size);\n+  virtual void retire_region(G1HeapRegion* alloc_region, size_t allocated_bytes);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.hpp","additions":23,"deletions":22,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-inline HeapWord* G1AllocRegion::allocate(HeapRegion* alloc_region,\n+inline HeapWord* G1AllocRegion::allocate(G1HeapRegion* alloc_region,\n@@ -51,1 +51,1 @@\n-inline HeapWord* G1AllocRegion::par_allocate(HeapRegion* alloc_region, size_t word_size) {\n+inline HeapWord* G1AllocRegion::par_allocate(G1HeapRegion* alloc_region, size_t word_size) {\n@@ -56,1 +56,1 @@\n-inline HeapWord* G1AllocRegion::par_allocate(HeapRegion* alloc_region,\n+inline HeapWord* G1AllocRegion::par_allocate(G1HeapRegion* alloc_region,\n@@ -69,1 +69,1 @@\n-  HeapRegion* alloc_region = _alloc_region;\n+  G1HeapRegion* alloc_region = _alloc_region;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1AllocRegion.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-bool G1Allocator::is_retained_old_region(HeapRegion* hr) {\n+bool G1Allocator::is_retained_old_region(G1HeapRegion* hr) {\n@@ -98,2 +98,2 @@\n-                                            HeapRegion** retained_old) {\n-  HeapRegion* retained_region = *retained_old;\n+                                            G1HeapRegion** retained_old) {\n+  G1HeapRegion* retained_region = *retained_old;\n@@ -193,1 +193,1 @@\n-  HeapRegion* hr = mutator_alloc_region(node_index)->get();\n+  G1HeapRegion* hr = mutator_alloc_region(node_index)->get();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  HeapRegion* _retained_old_gc_alloc_region;\n+  G1HeapRegion* _retained_old_gc_alloc_region;\n@@ -73,1 +73,1 @@\n-                                 HeapRegion** retained);\n+                                 G1HeapRegion** retained);\n@@ -111,1 +111,1 @@\n-  bool is_retained_old_region(HeapRegion* hr);\n+  bool is_retained_old_region(G1HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Allocator.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-  HeapRegion::setup_heap_region_size(MaxHeapSize);\n+  G1HeapRegion::setup_heap_region_size(MaxHeapSize);\n@@ -60,1 +60,1 @@\n-  SpaceAlignment = HeapRegion::GrainBytes;\n+  SpaceAlignment = G1HeapRegion::GrainBytes;\n@@ -74,1 +74,1 @@\n-  return HeapRegion::max_region_size();\n+  return G1HeapRegion::max_region_size();\n@@ -133,1 +133,1 @@\n-  assert(HeapRegion::LogOfHRGrainBytes != 0, \"not initialized\");\n+  assert(G1HeapRegion::LogOfHRGrainBytes != 0, \"not initialized\");\n@@ -137,2 +137,2 @@\n-  assert(HeapRegion::LogOfHRGrainBytes >= LOG_M, \"from the above\");\n-  uint region_size_log_mb = HeapRegion::LogOfHRGrainBytes - LOG_M;\n+  assert(G1HeapRegion::LogOfHRGrainBytes >= LOG_M, \"from the above\");\n+  uint region_size_log_mb = G1HeapRegion::LogOfHRGrainBytes - LOG_M;\n@@ -141,1 +141,1 @@\n-    uint max_cards_in_inline_ptr = G1CardSetConfiguration::max_cards_in_inline_ptr(HeapRegion::LogCardsPerRegion);\n+    uint max_cards_in_inline_ptr = G1CardSetConfiguration::max_cards_in_inline_ptr(G1HeapRegion::LogCardsPerRegion);\n@@ -148,1 +148,1 @@\n-    FLAG_SET_ERGO(G1RemSetHowlNumBuckets, G1CardSetHowl::num_buckets(HeapRegion::CardsPerRegion,\n+    FLAG_SET_ERGO(G1RemSetHowlNumBuckets, G1CardSetHowl::num_buckets(G1HeapRegion::CardsPerRegion,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Arguments.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -115,1 +115,1 @@\n-    DEBUG_ONLY(HeapRegion* containing_hr = G1CollectedHeap::heap()->heap_region_containing(mr.start());)\n+    DEBUG_ONLY(G1HeapRegion* containing_hr = G1CollectedHeap::heap()->heap_region_containing(mr.start());)\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BarrierSet.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -60,2 +60,2 @@\n-  if (card_container_limit < (uint)HeapRegion::LogCardsPerRegion) {\n-    log2_card_regions_per_heap_region = (uint)HeapRegion::LogCardsPerRegion - card_container_limit;\n+  if (card_container_limit < (uint)G1HeapRegion::LogCardsPerRegion) {\n+    log2_card_regions_per_heap_region = (uint)G1HeapRegion::LogCardsPerRegion - card_container_limit;\n@@ -68,1 +68,1 @@\n-  G1CardSetConfiguration(HeapRegion::LogCardsPerRegion - default_log2_card_regions_per_region(),                                                                                   \/* inline_ptr_bits_per_card *\/\n+  G1CardSetConfiguration(G1HeapRegion::LogCardsPerRegion - default_log2_card_regions_per_region(),                                                                                   \/* inline_ptr_bits_per_card *\/\n@@ -73,1 +73,1 @@\n-                         (uint)HeapRegion::CardsPerRegion >> default_log2_card_regions_per_region(),\n+                         (uint)G1HeapRegion::CardsPerRegion >> default_log2_card_regions_per_region(),\n@@ -77,1 +77,1 @@\n-  assert((_log2_card_regions_per_heap_region + _log2_cards_per_card_region) == (uint)HeapRegion::LogCardsPerRegion,\n+  assert((_log2_card_regions_per_heap_region + _log2_cards_per_card_region) == (uint)G1HeapRegion::LogCardsPerRegion,\n@@ -398,1 +398,1 @@\n-  const uint CardBitsWithinCardRegion = MIN2((uint)HeapRegion::LogCardsPerRegion, G1CardSetContainer::LogCardsPerRegionLimit);\n+  const uint CardBitsWithinCardRegion = MIN2((uint)G1HeapRegion::LogCardsPerRegion, G1CardSetContainer::LogCardsPerRegionLimit);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardSet.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-  MemRegion mr(G1CollectedHeap::heap()->bottom_addr_for_region(start_idx), num_regions * HeapRegion::GrainWords);\n+  MemRegion mr(G1CollectedHeap::heap()->bottom_addr_for_region(start_idx), num_regions * G1HeapRegion::GrainWords);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-  return (uint)(card_idx >> HeapRegion::LogCardsPerRegion);\n+  return (uint)(card_idx >> G1HeapRegion::LogCardsPerRegion);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CardTable.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -301,1 +301,1 @@\n-    HeapRegion* _hr;\n+    G1HeapRegion* _hr;\n@@ -312,1 +312,1 @@\n-    PointsIntoHRDetectionClosure(HeapRegion* hr) : _hr(hr), _points_into(false) {}\n+    PointsIntoHRDetectionClosure(G1HeapRegion* hr) : _hr(hr), _points_into(false) {}\n@@ -323,1 +323,1 @@\n-  CleanCallback(HeapRegion* hr) : _detector(hr), _nmethod_cl(&_detector, !NMethodToOopClosure::FixRelocations) {}\n+  CleanCallback(G1HeapRegion* hr) : _detector(hr), _nmethod_cl(&_detector, !NMethodToOopClosure::FixRelocations) {}\n@@ -332,1 +332,1 @@\n-void G1CodeRootSet::clean(HeapRegion* owner) {\n+void G1CodeRootSet::clean(G1HeapRegion* owner) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -56,1 +56,1 @@\n-  void clean(HeapRegion* owner);\n+  void clean(G1HeapRegion* owner);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CodeRootSet.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -148,1 +148,1 @@\n-  uint log_region_size = HeapRegion::LogOfHRGrainBytes;\n+  uint log_region_size = G1HeapRegion::LogOfHRGrainBytes;\n@@ -157,3 +157,3 @@\n-HeapRegion* G1CollectedHeap::new_heap_region(uint hrs_index,\n-                                             MemRegion mr) {\n-  return new HeapRegion(hrs_index, bot(), mr, &_card_set_config);\n+G1HeapRegion* G1CollectedHeap::new_heap_region(uint hrs_index,\n+                                               MemRegion mr) {\n+  return new G1HeapRegion(hrs_index, bot(), mr, &_card_set_config);\n@@ -164,5 +164,5 @@\n-HeapRegion* G1CollectedHeap::new_region(size_t word_size,\n-                                        HeapRegionType type,\n-                                        bool do_expand,\n-                                        uint node_index) {\n-  assert(!is_humongous(word_size) || word_size <= HeapRegion::GrainWords,\n+G1HeapRegion* G1CollectedHeap::new_region(size_t word_size,\n+                                          HeapRegionType type,\n+                                          bool do_expand,\n+                                          uint node_index) {\n+  assert(!is_humongous(word_size) || word_size <= G1HeapRegion::GrainWords,\n@@ -172,1 +172,1 @@\n-  HeapRegion* res = _hrm.allocate_free_region(type, node_index);\n+  G1HeapRegion* res = _hrm.allocate_free_region(type, node_index);\n@@ -183,1 +183,1 @@\n-    assert(word_size * HeapWordSize < HeapRegion::GrainBytes,\n+    assert(word_size * HeapWordSize < G1HeapRegion::GrainBytes,\n@@ -197,1 +197,1 @@\n-void G1CollectedHeap::set_humongous_metadata(HeapRegion* first_hr,\n+void G1CollectedHeap::set_humongous_metadata(G1HeapRegion* first_hr,\n@@ -204,1 +204,1 @@\n-  size_t word_size_sum = num_regions * HeapRegion::GrainWords;\n+  size_t word_size_sum = num_regions * G1HeapRegion::GrainWords;\n@@ -239,1 +239,1 @@\n-  HeapRegion* hr = nullptr;\n+  G1HeapRegion* hr = nullptr;\n@@ -280,1 +280,1 @@\n-G1CollectedHeap::humongous_obj_allocate_initialize_regions(HeapRegion* first_hr,\n+G1CollectedHeap::humongous_obj_allocate_initialize_regions(G1HeapRegion* first_hr,\n@@ -285,1 +285,1 @@\n-  assert(num_regions * HeapRegion::GrainWords >= word_size, \"pre-condition\");\n+  assert(num_regions * G1HeapRegion::GrainWords >= word_size, \"pre-condition\");\n@@ -321,1 +321,1 @@\n-  HeapRegion* last_hr = region_at(last);\n+  G1HeapRegion* last_hr = region_at(last);\n@@ -327,1 +327,1 @@\n-    HeapRegion *hr = region_at(i);\n+    G1HeapRegion *hr = region_at(i);\n@@ -337,1 +337,1 @@\n-  return align_up(word_size, HeapRegion::GrainWords) \/ HeapRegion::GrainWords;\n+  return align_up(word_size, G1HeapRegion::GrainWords) \/ G1HeapRegion::GrainWords;\n@@ -351,1 +351,1 @@\n-  HeapRegion* humongous_start = _hrm.allocate_humongous(obj_regions);\n+  G1HeapRegion* humongous_start = _hrm.allocate_humongous(obj_regions);\n@@ -476,2 +476,2 @@\n-  HeapRegion* curr_region = _hrm.addr_to_region(range.start());\n-  HeapRegion* end_region = _hrm.addr_to_region(range.last());\n+  G1HeapRegion* curr_region = _hrm.addr_to_region(range.start());\n+  G1HeapRegion* end_region = _hrm.addr_to_region(range.last());\n@@ -481,1 +481,1 @@\n-    HeapRegion* next_region = is_last ? nullptr : _hrm.next_region_in_heap(curr_region);\n+    G1HeapRegion* next_region = is_last ? nullptr : _hrm.next_region_in_heap(curr_region);\n@@ -507,1 +507,1 @@\n-  HeapWord* start_addr = reserved.end() - align_up(word_size, HeapRegion::GrainWords);\n+  HeapWord* start_addr = reserved.end() - align_up(word_size, G1HeapRegion::GrainWords);\n@@ -516,1 +516,1 @@\n-                              HeapRegion::GrainWords * HeapWordSize * commits);\n+                              G1HeapRegion::GrainWords * HeapWordSize * commits);\n@@ -521,1 +521,1 @@\n-  auto set_region_to_old = [&] (HeapRegion* r, bool is_last) {\n+  auto set_region_to_old = [&] (G1HeapRegion* r, bool is_last) {\n@@ -540,1 +540,1 @@\n-                           [&] (HeapRegion* r, bool is_last) {\n+                           [&] (G1HeapRegion* r, bool is_last) {\n@@ -562,1 +562,1 @@\n-  auto dealloc_archive_region = [&] (HeapRegion* r, bool is_last) {\n+  auto dealloc_archive_region = [&] (G1HeapRegion* r, bool is_last) {\n@@ -575,1 +575,1 @@\n-                              HeapRegion::GrainWords * HeapWordSize * shrink_count);\n+                              G1HeapRegion::GrainWords * HeapWordSize * shrink_count);\n@@ -653,1 +653,1 @@\n-          add_allocated_humongous_bytes_since_last_gc(size_in_regions * HeapRegion::GrainBytes);\n+          add_allocated_humongous_bytes_since_last_gc(size_in_regions * G1HeapRegion::GrainBytes);\n@@ -669,1 +669,1 @@\n-          record_collection_pause_humongous_allocation(size_in_regions * HeapRegion::GrainBytes);\n+          record_collection_pause_humongous_allocation(size_in_regions * G1HeapRegion::GrainBytes);\n@@ -715,1 +715,1 @@\n-  bool do_heap_region(HeapRegion* hr) {\n+  bool do_heap_region(G1HeapRegion* hr) {\n@@ -994,2 +994,1 @@\n-  aligned_expand_bytes = align_up(aligned_expand_bytes,\n-                                       HeapRegion::GrainBytes);\n+  aligned_expand_bytes = align_up(aligned_expand_bytes, G1HeapRegion::GrainBytes);\n@@ -1006,1 +1005,1 @@\n-  uint regions_to_expand = (uint)(aligned_expand_bytes \/ HeapRegion::GrainBytes);\n+  uint regions_to_expand = (uint)(aligned_expand_bytes \/ G1HeapRegion::GrainBytes);\n@@ -1016,1 +1015,1 @@\n-  size_t actual_expand_bytes = expanded_by * HeapRegion::GrainBytes;\n+  size_t actual_expand_bytes = expanded_by * G1HeapRegion::GrainBytes;\n@@ -1039,3 +1038,2 @@\n-  aligned_shrink_bytes = align_down(aligned_shrink_bytes,\n-                                         HeapRegion::GrainBytes);\n-  uint num_regions_to_remove = (uint)(shrink_bytes \/ HeapRegion::GrainBytes);\n+  aligned_shrink_bytes = align_down(aligned_shrink_bytes, G1HeapRegion::GrainBytes);\n+  uint num_regions_to_remove = (uint)(shrink_bytes \/ G1HeapRegion::GrainBytes);\n@@ -1044,1 +1042,1 @@\n-  size_t shrunk_bytes = num_regions_removed * HeapRegion::GrainBytes;\n+  size_t shrunk_bytes = num_regions_removed * G1HeapRegion::GrainBytes;\n@@ -1099,1 +1097,1 @@\n-  bool is_correct_type(HeapRegion* hr) { return hr->is_old(); }\n+  bool is_correct_type(G1HeapRegion* hr) { return hr->is_old(); }\n@@ -1123,1 +1121,1 @@\n-  bool is_correct_type(HeapRegion* hr) { return hr->is_humongous(); }\n+  bool is_correct_type(G1HeapRegion* hr) { return hr->is_humongous(); }\n@@ -1182,1 +1180,1 @@\n-  _humongous_object_threshold_in_words = humongous_threshold_for(HeapRegion::GrainWords);\n+  _humongous_object_threshold_in_words = humongous_threshold_for(G1HeapRegion::GrainWords);\n@@ -1188,1 +1186,1 @@\n-  _filler_array_max_size = HeapRegion::GrainWords;\n+  _filler_array_max_size = G1HeapRegion::GrainWords;\n@@ -1217,1 +1215,1 @@\n-                                         HeapRegion::GrainBytes,\n+                                         G1HeapRegion::GrainBytes,\n@@ -1263,2 +1261,2 @@\n-  Universe::check_alignment(init_byte_size, HeapRegion::GrainBytes, \"g1 heap\");\n-  Universe::check_alignment(reserved_byte_size, HeapRegion::GrainBytes, \"g1 heap\");\n+  Universe::check_alignment(init_byte_size, G1HeapRegion::GrainBytes, \"g1 heap\");\n+  Universe::check_alignment(reserved_byte_size, G1HeapRegion::GrainBytes, \"g1 heap\");\n@@ -1273,1 +1271,1 @@\n-  \/\/ HeapRegion::GrainBytes (i.e. the alignment that is passed\n+  \/\/ G1HeapRegion::GrainBytes (i.e. the alignment that is passed\n@@ -1305,1 +1303,1 @@\n-                                         HeapRegion::GrainBytes,\n+                                         G1HeapRegion::GrainBytes,\n@@ -1353,2 +1351,2 @@\n-  guarantee(HeapRegion::CardsPerRegion > 0, \"make sure it's initialized\");\n-  guarantee(HeapRegion::CardsPerRegion < max_cards_per_region,\n+  guarantee(G1HeapRegion::CardsPerRegion > 0, \"make sure it's initialized\");\n+  guarantee(G1HeapRegion::CardsPerRegion < max_cards_per_region,\n@@ -1364,1 +1362,1 @@\n-    size_t granularity = HeapRegion::GrainBytes;\n+    size_t granularity = G1HeapRegion::GrainBytes;\n@@ -1375,1 +1373,1 @@\n-  _numa->set_region_info(HeapRegion::GrainBytes, page_size);\n+  _numa->set_region_info(G1HeapRegion::GrainBytes, page_size);\n@@ -1408,1 +1406,1 @@\n-  \/\/ Here we allocate the dummy HeapRegion that is required by the\n+  \/\/ Here we allocate the dummy G1HeapRegion that is required by the\n@@ -1410,1 +1408,1 @@\n-  HeapRegion* dummy_region = _hrm.get_dummy_region();\n+  G1HeapRegion* dummy_region = _hrm.get_dummy_region();\n@@ -1524,1 +1522,1 @@\n-  return _hrm.length() * HeapRegion::GrainBytes;\n+  return _hrm.length() * G1HeapRegion::GrainBytes;\n@@ -1545,1 +1543,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n@@ -1890,1 +1888,1 @@\n-\/\/ Iterates an ObjectClosure over all objects within a HeapRegion.\n+\/\/ Iterates an ObjectClosure over all objects within a G1HeapRegion.\n@@ -1896,1 +1894,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n@@ -1989,1 +1987,1 @@\n-      HeapRegion* r = region_at(region_idx);\n+      G1HeapRegion* r = region_at(region_idx);\n@@ -2002,1 +2000,1 @@\n-  HeapRegion* hr = heap_region_containing(addr);\n+  G1HeapRegion* hr = heap_region_containing(addr);\n@@ -2004,1 +2002,1 @@\n-  \/\/ the heap. HeapRegion::block_start() has been optimized to not accept addresses\n+  \/\/ the heap. G1HeapRegion::block_start() has been optimized to not accept addresses\n@@ -2013,1 +2011,1 @@\n-  HeapRegion* hr = heap_region_containing(addr);\n+  G1HeapRegion* hr = heap_region_containing(addr);\n@@ -2018,1 +2016,1 @@\n-  return (_policy->young_list_target_length() - _survivor.length()) * HeapRegion::GrainBytes;\n+  return (_policy->young_list_target_length() - _survivor.length()) * G1HeapRegion::GrainBytes;\n@@ -2022,1 +2020,1 @@\n-  return _eden.length() * HeapRegion::GrainBytes;\n+  return _eden.length() * G1HeapRegion::GrainBytes;\n@@ -2036,1 +2034,1 @@\n-  return max_regions() * HeapRegion::GrainBytes;\n+  return max_regions() * G1HeapRegion::GrainBytes;\n@@ -2055,1 +2053,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n@@ -2062,1 +2060,1 @@\n-                                       const HeapRegion* hr,\n+                                       const G1HeapRegion* hr,\n@@ -2099,1 +2097,1 @@\n-  st->print(\"  region size \" SIZE_FORMAT \"K, \", HeapRegion::GrainBytes \/ K);\n+  st->print(\"  region size \" SIZE_FORMAT \"K, \", G1HeapRegion::GrainBytes \/ K);\n@@ -2102,1 +2100,1 @@\n-            (size_t) young_regions * HeapRegion::GrainBytes \/ K);\n+            (size_t) young_regions * G1HeapRegion::GrainBytes \/ K);\n@@ -2105,1 +2103,1 @@\n-            (size_t) survivor_regions * HeapRegion::GrainBytes \/ K);\n+            (size_t) survivor_regions * G1HeapRegion::GrainBytes \/ K);\n@@ -2172,1 +2170,1 @@\n-    (policy()->young_list_target_length() * HeapRegion::GrainBytes) - survivor_used_bytes;\n+    (policy()->young_list_target_length() * G1HeapRegion::GrainBytes) - survivor_used_bytes;\n@@ -2283,1 +2281,1 @@\n-bool G1CollectedHeap::is_potential_eager_reclaim_candidate(HeapRegion* r) const {\n+bool G1CollectedHeap::is_potential_eager_reclaim_candidate(G1HeapRegion* r) const {\n@@ -2295,1 +2293,1 @@\n-    virtual bool do_heap_region(HeapRegion* r) {\n+    virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -2548,1 +2546,1 @@\n-    bool do_heap_region(HeapRegion* hr) {\n+    bool do_heap_region(G1HeapRegion* hr) {\n@@ -2615,1 +2613,1 @@\n-void G1CollectedHeap::clear_bitmap_for_region(HeapRegion* hr) {\n+void G1CollectedHeap::clear_bitmap_for_region(G1HeapRegion* hr) {\n@@ -2619,1 +2617,1 @@\n-void G1CollectedHeap::free_region(HeapRegion* hr, FreeRegionList* free_list) {\n+void G1CollectedHeap::free_region(G1HeapRegion* hr, FreeRegionList* free_list) {\n@@ -2635,1 +2633,1 @@\n-void G1CollectedHeap::retain_region(HeapRegion* hr) {\n+void G1CollectedHeap::retain_region(G1HeapRegion* hr) {\n@@ -2640,1 +2638,1 @@\n-void G1CollectedHeap::free_humongous_region(HeapRegion* hr,\n+void G1CollectedHeap::free_humongous_region(G1HeapRegion* hr,\n@@ -2685,1 +2683,1 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n+  virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -2701,1 +2699,1 @@\n-bool G1CollectedHeap::is_old_gc_alloc_region(HeapRegion* hr) {\n+bool G1CollectedHeap::is_old_gc_alloc_region(G1HeapRegion* hr) {\n@@ -2705,1 +2703,1 @@\n-void G1CollectedHeap::set_region_short_lived_locked(HeapRegion* hr) {\n+void G1CollectedHeap::set_region_short_lived_locked(G1HeapRegion* hr) {\n@@ -2717,1 +2715,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n@@ -2740,2 +2738,2 @@\n-\/\/ Remove the given HeapRegion from the appropriate region set.\n-void G1CollectedHeap::prepare_region_for_full_compaction(HeapRegion* hr) {\n+\/\/ Remove the given G1HeapRegion from the appropriate region set.\n+void G1CollectedHeap::prepare_region_for_full_compaction(G1HeapRegion* hr) {\n@@ -2798,1 +2796,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n@@ -2848,1 +2846,1 @@\n-HeapRegion* G1CollectedHeap::new_mutator_alloc_region(size_t word_size,\n+G1HeapRegion* G1CollectedHeap::new_mutator_alloc_region(size_t word_size,\n@@ -2853,4 +2851,4 @@\n-    HeapRegion* new_alloc_region = new_region(word_size,\n-                                              HeapRegionType::Eden,\n-                                              false \/* do_expand *\/,\n-                                              node_index);\n+    G1HeapRegion* new_alloc_region = new_region(word_size,\n+                                                HeapRegionType::Eden,\n+                                                false \/* do_expand *\/,\n+                                                node_index);\n@@ -2867,1 +2865,1 @@\n-void G1CollectedHeap::retire_mutator_alloc_region(HeapRegion* alloc_region,\n+void G1CollectedHeap::retire_mutator_alloc_region(G1HeapRegion* alloc_region,\n@@ -2893,1 +2891,1 @@\n-HeapRegion* G1CollectedHeap::new_gc_alloc_region(size_t word_size, G1HeapRegionAttr dest, uint node_index) {\n+G1HeapRegion* G1CollectedHeap::new_gc_alloc_region(size_t word_size, G1HeapRegionAttr dest, uint node_index) {\n@@ -2907,4 +2905,4 @@\n-  HeapRegion* new_alloc_region = new_region(word_size,\n-                                            type,\n-                                            true \/* do_expand *\/,\n-                                            node_index);\n+  G1HeapRegion* new_alloc_region = new_region(word_size,\n+                                              type,\n+                                              true \/* do_expand *\/,\n+                                              node_index);\n@@ -2928,1 +2926,1 @@\n-void G1CollectedHeap::retire_gc_alloc_region(HeapRegion* alloc_region,\n+void G1CollectedHeap::retire_gc_alloc_region(G1HeapRegion* alloc_region,\n@@ -2946,1 +2944,1 @@\n-HeapRegion* G1CollectedHeap::alloc_highest_free_region() {\n+G1HeapRegion* G1CollectedHeap::alloc_highest_free_region() {\n@@ -2953,1 +2951,1 @@\n-                                HeapRegion::GrainWords * HeapWordSize);\n+                                G1HeapRegion::GrainWords * HeapWordSize);\n@@ -2979,1 +2977,1 @@\n-      HeapRegion* hr = _g1h->heap_region_containing(obj);\n+      G1HeapRegion* hr = _g1h->heap_region_containing(obj);\n@@ -3048,1 +3046,1 @@\n-  HeapRegion* region = heap_region_containing(start);\n+  G1HeapRegion* region = heap_region_containing(start);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":100,"deletions":102,"binary":false,"changes":202,"status":"modified"},{"patch":"@@ -82,1 +82,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -199,1 +199,1 @@\n-  void prepare_region_for_full_compaction(HeapRegion* hr);\n+  void prepare_region_for_full_compaction(G1HeapRegion* hr);\n@@ -385,1 +385,1 @@\n-  \/\/ Try to allocate a single non-humongous HeapRegion sufficient for\n+  \/\/ Try to allocate a single non-humongous G1HeapRegion sufficient for\n@@ -390,4 +390,4 @@\n-  HeapRegion* new_region(size_t word_size,\n-                         HeapRegionType type,\n-                         bool do_expand,\n-                         uint node_index = G1NUMA::AnyNodeIndex);\n+  G1HeapRegion* new_region(size_t word_size,\n+                           HeapRegionType type,\n+                           bool do_expand,\n+                           uint node_index = G1NUMA::AnyNodeIndex);\n@@ -398,1 +398,1 @@\n-  HeapWord* humongous_obj_allocate_initialize_regions(HeapRegion* first_hr,\n+  HeapWord* humongous_obj_allocate_initialize_regions(G1HeapRegion* first_hr,\n@@ -468,2 +468,2 @@\n-  HeapRegion* new_mutator_alloc_region(size_t word_size, uint node_index);\n-  void retire_mutator_alloc_region(HeapRegion* alloc_region,\n+  G1HeapRegion* new_mutator_alloc_region(size_t word_size, uint node_index);\n+  void retire_mutator_alloc_region(G1HeapRegion* alloc_region,\n@@ -474,2 +474,2 @@\n-  HeapRegion* new_gc_alloc_region(size_t word_size, G1HeapRegionAttr dest, uint node_index);\n-  void retire_gc_alloc_region(HeapRegion* alloc_region,\n+  G1HeapRegion* new_gc_alloc_region(size_t word_size, G1HeapRegionAttr dest, uint node_index);\n+  void retire_gc_alloc_region(G1HeapRegion* alloc_region,\n@@ -575,1 +575,1 @@\n-  \/\/ (Rounds up to a HeapRegion boundary.)\n+  \/\/ (Rounds up to a G1HeapRegion boundary.)\n@@ -596,1 +596,1 @@\n-  bool is_potential_eager_reclaim_candidate(HeapRegion* r) const;\n+  bool is_potential_eager_reclaim_candidate(G1HeapRegion* r) const;\n@@ -607,1 +607,1 @@\n-  void set_humongous_metadata(HeapRegion* first_hr,\n+  void set_humongous_metadata(G1HeapRegion* first_hr,\n@@ -614,1 +614,1 @@\n-  void register_young_region_with_region_attr(HeapRegion* r) {\n+  void register_young_region_with_region_attr(G1HeapRegion* r) {\n@@ -617,4 +617,4 @@\n-  inline void register_new_survivor_region_with_region_attr(HeapRegion* r);\n-  inline void register_region_with_region_attr(HeapRegion* r);\n-  inline void register_old_region_with_region_attr(HeapRegion* r);\n-  inline void register_optional_region_with_region_attr(HeapRegion* r);\n+  inline void register_new_survivor_region_with_region_attr(G1HeapRegion* r);\n+  inline void register_region_with_region_attr(G1HeapRegion* r);\n+  inline void register_old_region_with_region_attr(G1HeapRegion* r);\n+  inline void register_optional_region_with_region_attr(G1HeapRegion* r);\n@@ -622,1 +622,1 @@\n-  void clear_region_attr(const HeapRegion* hr) {\n+  void clear_region_attr(const G1HeapRegion* hr) {\n@@ -634,1 +634,1 @@\n-  void clear_bitmap_for_region(HeapRegion* hr);\n+  void clear_bitmap_for_region(G1HeapRegion* hr);\n@@ -670,1 +670,1 @@\n-  HeapRegion* new_heap_region(uint hrs_index, MemRegion mr);\n+  G1HeapRegion* new_heap_region(uint hrs_index, MemRegion mr);\n@@ -674,1 +674,1 @@\n-  HeapRegion* alloc_highest_free_region();\n+  G1HeapRegion* alloc_highest_free_region();\n@@ -682,1 +682,1 @@\n-  void free_region(HeapRegion* hr, FreeRegionList* free_list);\n+  void free_region(G1HeapRegion* hr, FreeRegionList* free_list);\n@@ -685,1 +685,1 @@\n-  void retain_region(HeapRegion* hr);\n+  void retain_region(G1HeapRegion* hr);\n@@ -699,1 +699,1 @@\n-  void free_humongous_region(HeapRegion* hr,\n+  void free_humongous_region(G1HeapRegion* hr,\n@@ -702,1 +702,1 @@\n-  \/\/ Execute func(HeapRegion* r, bool is_last) on every region covered by the\n+  \/\/ Execute func(G1HeapRegion* r, bool is_last) on every region covered by the\n@@ -728,1 +728,1 @@\n-  \/\/ (Rounds down to a HeapRegion boundary.)\n+  \/\/ (Rounds down to a G1HeapRegion boundary.)\n@@ -921,1 +921,1 @@\n-  inline bool is_collection_set_candidate(const HeapRegion* r) const;\n+  inline bool is_collection_set_candidate(const G1HeapRegion* r) const;\n@@ -996,1 +996,1 @@\n-  bool is_on_master_free_list(HeapRegion* hr) {\n+  bool is_on_master_free_list(G1HeapRegion* hr) {\n@@ -1001,2 +1001,2 @@\n-  inline void old_set_add(HeapRegion* hr);\n-  inline void old_set_remove(HeapRegion* hr);\n+  inline void old_set_add(G1HeapRegion* hr);\n+  inline void old_set_remove(G1HeapRegion* hr);\n@@ -1005,1 +1005,1 @@\n-    return (old_regions_count() + humongous_regions_count()) * HeapRegion::GrainBytes;\n+    return (old_regions_count() + humongous_regions_count()) * G1HeapRegion::GrainBytes;\n@@ -1010,1 +1010,1 @@\n-  bool is_old_gc_alloc_region(HeapRegion* hr);\n+  bool is_old_gc_alloc_region(G1HeapRegion* hr);\n@@ -1032,1 +1032,1 @@\n-  inline bool is_in_cset(const HeapRegion* hr) const;\n+  inline bool is_in_cset(const G1HeapRegion* hr) const;\n@@ -1079,2 +1079,2 @@\n-  inline HeapRegion* region_at(uint index) const;\n-  inline HeapRegion* region_at_or_null(uint index) const;\n+  inline G1HeapRegion* region_at(uint index) const;\n+  inline G1HeapRegion* region_at_or_null(uint index) const;\n@@ -1083,1 +1083,1 @@\n-  \/\/ region and apply the given method with the signature f(HeapRegion*) on them.\n+  \/\/ region and apply the given method with the signature f(G1HeapRegion*) on them.\n@@ -1085,1 +1085,1 @@\n-  void humongous_obj_regions_iterate(HeapRegion* start, const Func& f);\n+  void humongous_obj_regions_iterate(G1HeapRegion* start, const Func& f);\n@@ -1133,2 +1133,2 @@\n-  \/\/ Returns the HeapRegion that contains addr. addr must not be null.\n-  inline HeapRegion* heap_region_containing(const void* addr) const;\n+  \/\/ Returns the G1HeapRegion that contains addr. addr must not be null.\n+  inline G1HeapRegion* heap_region_containing(const void* addr) const;\n@@ -1136,1 +1136,1 @@\n-  \/\/ Returns the HeapRegion that contains addr, or null if that is an uncommitted\n+  \/\/ Returns the G1HeapRegion that contains addr, or null if that is an uncommitted\n@@ -1138,1 +1138,1 @@\n-  inline HeapRegion* heap_region_containing_or_null(const void* addr) const;\n+  inline G1HeapRegion* heap_region_containing_or_null(const void* addr) const;\n@@ -1200,1 +1200,1 @@\n-  void set_region_short_lived_locked(HeapRegion* hr);\n+  void set_region_short_lived_locked(G1HeapRegion* hr);\n@@ -1224,1 +1224,1 @@\n-  inline bool is_obj_dead(const oop obj, const HeapRegion* hr) const;\n+  inline bool is_obj_dead(const oop obj, const G1HeapRegion* hr) const;\n@@ -1232,1 +1232,1 @@\n-  inline bool is_obj_dead_full(const oop obj, const HeapRegion* hr) const;\n+  inline bool is_obj_dead_full(const oop obj, const G1HeapRegion* hr) const;\n@@ -1289,1 +1289,1 @@\n-                        const HeapRegion* hr,\n+                        const G1HeapRegion* hr,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":48,"deletions":48,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -106,1 +106,1 @@\n-inline HeapRegion* G1CollectedHeap::region_at(uint index) const { return _hrm.at(index); }\n+inline G1HeapRegion* G1CollectedHeap::region_at(uint index) const { return _hrm.at(index); }\n@@ -109,1 +109,1 @@\n-inline HeapRegion* G1CollectedHeap::region_at_or_null(uint index) const { return _hrm.at_or_null(index); }\n+inline G1HeapRegion* G1CollectedHeap::region_at_or_null(uint index) const { return _hrm.at_or_null(index); }\n@@ -112,1 +112,1 @@\n-inline void G1CollectedHeap::humongous_obj_regions_iterate(HeapRegion* start, const Func& f) {\n+inline void G1CollectedHeap::humongous_obj_regions_iterate(G1HeapRegion* start, const Func& f) {\n@@ -116,1 +116,1 @@\n-    HeapRegion* next = _hrm.next_region_in_humongous(start);\n+    G1HeapRegion* next = _hrm.next_region_in_humongous(start);\n@@ -126,1 +126,1 @@\n-  return (uint)(pointer_delta(addr, reserved().start(), sizeof(uint8_t)) >> HeapRegion::LogOfHRGrainBytes);\n+  return (uint)(pointer_delta(addr, reserved().start(), sizeof(uint8_t)) >> G1HeapRegion::LogOfHRGrainBytes);\n@@ -130,1 +130,1 @@\n-  return _hrm.reserved().start() + index * HeapRegion::GrainWords;\n+  return _hrm.reserved().start() + index * G1HeapRegion::GrainWords;\n@@ -134,1 +134,1 @@\n-inline HeapRegion* G1CollectedHeap::heap_region_containing(const void* addr) const {\n+inline G1HeapRegion* G1CollectedHeap::heap_region_containing(const void* addr) const {\n@@ -139,1 +139,1 @@\n-inline HeapRegion* G1CollectedHeap::heap_region_containing_or_null(const void* addr) const {\n+inline G1HeapRegion* G1CollectedHeap::heap_region_containing_or_null(const void* addr) const {\n@@ -144,1 +144,1 @@\n-inline void G1CollectedHeap::old_set_add(HeapRegion* hr) {\n+inline void G1CollectedHeap::old_set_add(G1HeapRegion* hr) {\n@@ -148,1 +148,1 @@\n-inline void G1CollectedHeap::old_set_remove(HeapRegion* hr) {\n+inline void G1CollectedHeap::old_set_remove(G1HeapRegion* hr) {\n@@ -163,1 +163,1 @@\n-  DEBUG_ONLY(HeapRegion* containing_hr = heap_region_containing(start);)\n+  DEBUG_ONLY(G1HeapRegion* containing_hr = heap_region_containing(start);)\n@@ -196,1 +196,1 @@\n-bool G1CollectedHeap::is_in_cset(const HeapRegion* hr) const {\n+bool G1CollectedHeap::is_in_cset(const G1HeapRegion* hr) const {\n@@ -218,1 +218,1 @@\n-void G1CollectedHeap::register_new_survivor_region_with_region_attr(HeapRegion* r) {\n+void G1CollectedHeap::register_new_survivor_region_with_region_attr(G1HeapRegion* r) {\n@@ -222,1 +222,1 @@\n-void G1CollectedHeap::register_region_with_region_attr(HeapRegion* r) {\n+void G1CollectedHeap::register_region_with_region_attr(G1HeapRegion* r) {\n@@ -227,1 +227,1 @@\n-void G1CollectedHeap::register_old_region_with_region_attr(HeapRegion* r) {\n+void G1CollectedHeap::register_old_region_with_region_attr(G1HeapRegion* r) {\n@@ -234,1 +234,1 @@\n-void G1CollectedHeap::register_optional_region_with_region_attr(HeapRegion* r) {\n+void G1CollectedHeap::register_optional_region_with_region_attr(G1HeapRegion* r) {\n@@ -255,1 +255,1 @@\n-inline bool G1CollectedHeap::is_obj_dead(const oop obj, const HeapRegion* hr) const {\n+inline bool G1CollectedHeap::is_obj_dead(const oop obj, const G1HeapRegion* hr) const {\n@@ -289,1 +289,1 @@\n-inline bool G1CollectedHeap::is_obj_dead_full(const oop obj, const HeapRegion* hr) const {\n+inline bool G1CollectedHeap::is_obj_dead_full(const oop obj, const G1HeapRegion* hr) const {\n@@ -314,1 +314,1 @@\n-inline bool G1CollectedHeap::is_collection_set_candidate(const HeapRegion* r) const {\n+inline bool G1CollectedHeap::is_collection_set_candidate(const G1HeapRegion* r) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.inline.hpp","additions":19,"deletions":19,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-void G1CollectionSet::add_old_region(HeapRegion* hr) {\n+void G1CollectionSet::add_old_region(G1HeapRegion* hr) {\n@@ -137,1 +137,1 @@\n-    HeapRegion* r = _g1h->region_at(_collection_set_regions[i]);\n+    G1HeapRegion* r = _g1h->region_at(_collection_set_regions[i]);\n@@ -155,1 +155,1 @@\n-  for (HeapRegion* r : _optional_old_regions) {\n+  for (G1HeapRegion* r : _optional_old_regions) {\n@@ -179,1 +179,1 @@\n-void G1CollectionSet::add_young_region_common(HeapRegion* hr) {\n+void G1CollectionSet::add_young_region_common(G1HeapRegion* hr) {\n@@ -199,1 +199,1 @@\n-void G1CollectionSet::add_survivor_regions(HeapRegion* hr) {\n+void G1CollectionSet::add_survivor_regions(G1HeapRegion* hr) {\n@@ -204,1 +204,1 @@\n-void G1CollectionSet::add_eden_region(HeapRegion* hr) {\n+void G1CollectionSet::add_eden_region(G1HeapRegion* hr) {\n@@ -216,1 +216,1 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n+  virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -254,1 +254,1 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n+  virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -390,1 +390,1 @@\n-  for (HeapRegion* r : *regions) {\n+  for (G1HeapRegion* r : *regions) {\n@@ -399,1 +399,1 @@\n-  for (HeapRegion* r : *regions) {\n+  for (G1HeapRegion* r : *regions) {\n@@ -415,1 +415,1 @@\n-  for (HeapRegion* r : *regions) {\n+  for (G1HeapRegion* r : *regions) {\n@@ -430,1 +430,1 @@\n-  for (HeapRegion* r : *regions) {\n+  for (G1HeapRegion* r : *regions) {\n@@ -460,1 +460,1 @@\n-  for (HeapRegion* r : _optional_old_regions) {\n+  for (G1HeapRegion* r : _optional_old_regions) {\n@@ -489,1 +489,1 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n+  virtual bool do_heap_region(G1HeapRegion* r) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -171,1 +171,1 @@\n-  void add_young_region_common(HeapRegion* hr);\n+  void add_young_region_common(G1HeapRegion* hr);\n@@ -174,1 +174,1 @@\n-  void add_old_region(HeapRegion* hr);\n+  void add_old_region(G1HeapRegion* hr);\n@@ -274,1 +274,1 @@\n-  void add_eden_region(HeapRegion* hr);\n+  void add_eden_region(G1HeapRegion* hr);\n@@ -277,1 +277,1 @@\n-  void add_survivor_regions(HeapRegion* hr);\n+  void add_survivor_regions(G1HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSet.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-void G1CollectionCandidateList::append_unsorted(HeapRegion* r) {\n+void G1CollectionCandidateList::append_unsorted(G1HeapRegion* r) {\n@@ -138,1 +138,1 @@\n-void G1CollectionCandidateRegionList::append(HeapRegion* r) {\n+void G1CollectionCandidateRegionList::append(G1HeapRegion* r) {\n@@ -147,1 +147,1 @@\n-  for (HeapRegion* r : *other) {\n+  for (G1HeapRegion* r : *other) {\n@@ -159,1 +159,1 @@\n-HeapRegion* G1CollectionCandidateRegionList::at(uint index) {\n+G1HeapRegion* G1CollectionCandidateRegionList::at(uint index) {\n@@ -179,1 +179,1 @@\n-bool G1CollectionSetCandidates::is_from_marking(HeapRegion* r) const {\n+bool G1CollectionSetCandidates::is_from_marking(G1HeapRegion* r) const {\n@@ -203,1 +203,1 @@\n-    HeapRegion* hr = (*iter)->_r;\n+    G1HeapRegion* hr = (*iter)->_r;\n@@ -219,1 +219,1 @@\n-    HeapRegion* r = candidate_infos[i]._r;\n+    G1HeapRegion* r = candidate_infos[i]._r;\n@@ -236,1 +236,1 @@\n-void G1CollectionSetCandidates::add_retained_region_unsorted(HeapRegion* r) {\n+void G1CollectionSetCandidates::add_retained_region_unsorted(G1HeapRegion* r) {\n@@ -252,1 +252,1 @@\n-  for (HeapRegion* r : *other) {\n+  for (G1HeapRegion* r : *other) {\n@@ -263,1 +263,1 @@\n-  for (HeapRegion* r : *other) {\n+  for (G1HeapRegion* r : *other) {\n@@ -292,1 +292,1 @@\n-    HeapRegion* r = list->at(i)._r;\n+    G1HeapRegion* r = list->at(i)._r;\n@@ -337,1 +337,1 @@\n-bool G1CollectionSetCandidates::contains(const HeapRegion* r) const {\n+bool G1CollectionSetCandidates::contains(const G1HeapRegion* r) const {\n@@ -343,1 +343,1 @@\n-const char* G1CollectionSetCandidates::get_short_type_str(const HeapRegion* r) const {\n+const char* G1CollectionSetCandidates::get_short_type_str(const G1HeapRegion* r) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.cpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -42,1 +42,1 @@\n-using G1CollectionCandidateRegionListIterator = GrowableArrayIterator<HeapRegion*>;\n+using G1CollectionCandidateRegionListIterator = GrowableArrayIterator<G1HeapRegion*>;\n@@ -44,1 +44,1 @@\n-\/\/ A set of HeapRegion*, a thin wrapper around GrowableArray.\n+\/\/ A set of G1HeapRegion*, a thin wrapper around GrowableArray.\n@@ -46,1 +46,1 @@\n-  GrowableArray<HeapRegion*> _regions;\n+  GrowableArray<G1HeapRegion*> _regions;\n@@ -51,1 +51,1 @@\n-  \/\/ Append a HeapRegion to the end of this list. The region must not be in the list\n+  \/\/ Append a G1HeapRegion to the end of this list. The region must not be in the list\n@@ -53,2 +53,2 @@\n-  void append(HeapRegion* r);\n-  \/\/ Remove the given list of HeapRegion* from this list. The given list must be a prefix\n+  void append(G1HeapRegion* r);\n+  \/\/ Remove the given list of G1HeapRegion* from this list. The given list must be a prefix\n@@ -61,1 +61,1 @@\n-  HeapRegion* at(uint index);\n+  G1HeapRegion* at(uint index);\n@@ -70,1 +70,1 @@\n-  HeapRegion* _r;\n+  G1HeapRegion* _r;\n@@ -75,1 +75,1 @@\n-  G1CollectionSetCandidateInfo(HeapRegion* r, double gc_efficiency) : _r(r), _gc_efficiency(gc_efficiency), _num_unreclaimed(0) { }\n+  G1CollectionSetCandidateInfo(G1HeapRegion* r, double gc_efficiency) : _r(r), _gc_efficiency(gc_efficiency), _num_unreclaimed(0) { }\n@@ -109,2 +109,2 @@\n-  \/\/ Add the given HeapRegion to this list at the end, (potentially) making the list unsorted.\n-  void append_unsorted(HeapRegion* r);\n+  \/\/ Add the given G1HeapRegion to this list at the end, (potentially) making the list unsorted.\n+  void append_unsorted(G1HeapRegion* r);\n@@ -155,1 +155,1 @@\n-  HeapRegion* operator*();\n+  G1HeapRegion* operator*();\n@@ -194,1 +194,1 @@\n-  bool is_from_marking(HeapRegion* r) const;\n+  bool is_from_marking(G1HeapRegion* r) const;\n@@ -222,1 +222,1 @@\n-  void add_retained_region_unsorted(HeapRegion* r);\n+  void add_retained_region_unsorted(G1HeapRegion* r);\n@@ -227,1 +227,1 @@\n-  bool contains(const HeapRegion* r) const;\n+  bool contains(const G1HeapRegion* r) const;\n@@ -229,1 +229,1 @@\n-  const char* get_short_type_str(const HeapRegion* r) const;\n+  const char* get_short_type_str(const G1HeapRegion* r) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.hpp","additions":17,"deletions":17,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-inline HeapRegion* G1CollectionSetCandidatesIterator::operator*() {\n+inline G1HeapRegion* G1CollectionSetCandidatesIterator::operator*() {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetCandidates.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -94,1 +94,1 @@\n-    void set(uint idx, HeapRegion* hr) {\n+    void set(uint idx, G1HeapRegion* hr) {\n@@ -127,1 +127,1 @@\n-    void add_region(HeapRegion* hr) {\n+    void add_region(G1HeapRegion* hr) {\n@@ -146,1 +146,1 @@\n-    bool do_heap_region(HeapRegion* r) {\n+    bool do_heap_region(G1HeapRegion* r) {\n@@ -215,1 +215,1 @@\n-      HeapRegion* r = data[num_candidates - num_pruned - 1]._r;\n+      G1HeapRegion* r = data[num_candidates - num_pruned - 1]._r;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    return HeapRegion::GrainBytes * (size_t) G1MixedGCLiveThresholdPercent \/ 100;\n+    return G1HeapRegion::GrainBytes * (size_t)G1MixedGCLiveThresholdPercent \/ 100;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectionSetChooser.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -583,1 +583,1 @@\n-void G1ConcurrentMark::clear_statistics(HeapRegion* r) {\n+void G1ConcurrentMark::clear_statistics(G1HeapRegion* r) {\n@@ -592,1 +592,1 @@\n-void G1ConcurrentMark::humongous_object_eagerly_reclaimed(HeapRegion* r) {\n+void G1ConcurrentMark::humongous_object_eagerly_reclaimed(G1HeapRegion* r) {\n@@ -605,1 +605,1 @@\n-                                      [&] (HeapRegion* r) {\n+                                      [&] (G1HeapRegion* r) {\n@@ -700,1 +700,1 @@\n-    HeapWord* region_clear_limit(HeapRegion* r) {\n+    HeapWord* region_clear_limit(G1HeapRegion* r) {\n@@ -724,1 +724,1 @@\n-    virtual bool do_heap_region(HeapRegion* r) {\n+    virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -786,1 +786,1 @@\n-  size_t const num_bytes_to_clear = (HeapRegion::GrainBytes * _g1h->num_regions()) \/ G1CMBitMap::heap_map_factor();\n+  size_t const num_bytes_to_clear = (G1HeapRegion::GrainBytes * _g1h->num_regions()) \/ G1CMBitMap::heap_map_factor();\n@@ -872,1 +872,1 @@\n-  bool do_heap_region(HeapRegion* r) override {\n+  bool do_heap_region(G1HeapRegion* r) override {\n@@ -1038,1 +1038,1 @@\n-  HeapRegion* hr = _g1h->heap_region_containing(last);\n+  G1HeapRegion* hr = _g1h->heap_region_containing(last);\n@@ -1102,1 +1102,1 @@\n-void G1ConcurrentMark::add_root_region(HeapRegion* r) {\n+void G1ConcurrentMark::add_root_region(G1HeapRegion* r) {\n@@ -1106,1 +1106,1 @@\n-bool G1ConcurrentMark::is_root_region(HeapRegion* r) {\n+bool G1ConcurrentMark::is_root_region(G1HeapRegion* r) {\n@@ -1236,1 +1236,1 @@\n-    void reclaim_empty_humongous_region(HeapRegion* hr) {\n+    void reclaim_empty_humongous_region(G1HeapRegion* hr) {\n@@ -1240,1 +1240,1 @@\n-      auto on_humongous_region = [&] (HeapRegion* hr) {\n+      auto on_humongous_region = [&] (G1HeapRegion* hr) {\n@@ -1256,1 +1256,1 @@\n-    void reclaim_empty_old_region(HeapRegion* hr) {\n+    void reclaim_empty_old_region(G1HeapRegion* hr) {\n@@ -1269,1 +1269,1 @@\n-    bool do_heap_region(HeapRegion* hr) override {\n+    bool do_heap_region(G1HeapRegion* hr) override {\n@@ -1278,1 +1278,1 @@\n-          auto on_humongous_region = [&] (HeapRegion* hr) {\n+          auto on_humongous_region = [&] (G1HeapRegion* hr) {\n@@ -1363,1 +1363,1 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n+  virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -1905,1 +1905,1 @@\n-void G1ConcurrentMark::clear_bitmap_for_region(HeapRegion* hr) {\n+void G1ConcurrentMark::clear_bitmap_for_region(G1HeapRegion* hr) {\n@@ -1910,1 +1910,1 @@\n-HeapRegion* G1ConcurrentMark::claim_region(uint worker_id) {\n+G1HeapRegion* G1ConcurrentMark::claim_region(uint worker_id) {\n@@ -1917,1 +1917,1 @@\n-    HeapRegion* curr_region = _g1h->heap_region_containing_or_null(finger);\n+    G1HeapRegion* curr_region = _g1h->heap_region_containing_or_null(finger);\n@@ -1922,1 +1922,1 @@\n-    HeapWord* end = curr_region != nullptr ? curr_region->end() : finger + HeapRegion::GrainWords;\n+    HeapWord* end = curr_region != nullptr ? curr_region->end() : finger + G1HeapRegion::GrainWords;\n@@ -1976,1 +1976,1 @@\n-    HeapRegion* r = _g1h->heap_region_containing(task_entry.obj());\n+    G1HeapRegion* r = _g1h->heap_region_containing(task_entry.obj());\n@@ -2001,1 +2001,1 @@\n-    \/\/ Since we always iterate over all regions, we might get a null HeapRegion\n+    \/\/ Since we always iterate over all regions, we might get a null G1HeapRegion\n@@ -2003,1 +2003,1 @@\n-    HeapRegion* global_hr = _g1h->heap_region_containing_or_null(global_finger);\n+    G1HeapRegion* global_hr = _g1h->heap_region_containing_or_null(global_finger);\n@@ -2016,1 +2016,1 @@\n-      HeapRegion* r = _g1h->heap_region_containing_or_null(task_finger);\n+      G1HeapRegion* r = _g1h->heap_region_containing_or_null(task_finger);\n@@ -2143,1 +2143,1 @@\n-void G1CMTask::setup_for_region(HeapRegion* hr) {\n+void G1CMTask::setup_for_region(G1HeapRegion* hr) {\n@@ -2152,1 +2152,1 @@\n-  HeapRegion* hr = _curr_region;\n+  G1HeapRegion* hr = _curr_region;\n@@ -2744,1 +2744,1 @@\n-      HeapRegion* claimed_region = _cm->claim_region(_worker_id);\n+      G1HeapRegion* claimed_region = _cm->claim_region(_worker_id);\n@@ -2999,1 +2999,1 @@\n-                          HeapRegion::GrainBytes);\n+                          G1HeapRegion::GrainBytes);\n@@ -3027,1 +3027,1 @@\n-bool G1PrintRegionLivenessInfoClosure::do_heap_region(HeapRegion* r) {\n+bool G1PrintRegionLivenessInfoClosure::do_heap_region(G1HeapRegion* r) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.cpp","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -510,1 +510,1 @@\n-  HeapRegion* claim_region(uint worker_id);\n+  G1HeapRegion* claim_region(uint worker_id);\n@@ -567,1 +567,1 @@\n-  inline void update_top_at_mark_start(HeapRegion* r);\n+  inline void update_top_at_mark_start(G1HeapRegion* r);\n@@ -569,1 +569,1 @@\n-  inline void reset_top_at_mark_start(HeapRegion* r);\n+  inline void reset_top_at_mark_start(G1HeapRegion* r);\n@@ -571,1 +571,1 @@\n-  inline HeapWord* top_at_mark_start(const HeapRegion* r) const;\n+  inline HeapWord* top_at_mark_start(const G1HeapRegion* r) const;\n@@ -577,1 +577,1 @@\n-  inline void update_top_at_rebuild_start(HeapRegion* r);\n+  inline void update_top_at_rebuild_start(G1HeapRegion* r);\n@@ -579,1 +579,1 @@\n-  inline HeapWord* top_at_rebuild_start(HeapRegion* r) const;\n+  inline HeapWord* top_at_rebuild_start(G1HeapRegion* r) const;\n@@ -583,1 +583,1 @@\n-  void clear_statistics(HeapRegion* r);\n+  void clear_statistics(G1HeapRegion* r);\n@@ -585,1 +585,1 @@\n-  void humongous_object_eagerly_reclaimed(HeapRegion* r);\n+  void humongous_object_eagerly_reclaimed(G1HeapRegion* r);\n@@ -662,2 +662,2 @@\n-  void add_root_region(HeapRegion* r);\n-  bool is_root_region(HeapRegion* r);\n+  void add_root_region(G1HeapRegion* r);\n+  bool is_root_region(G1HeapRegion* r);\n@@ -691,1 +691,1 @@\n-  void clear_bitmap_for_region(HeapRegion* hr);\n+  void clear_bitmap_for_region(G1HeapRegion* hr);\n@@ -761,1 +761,1 @@\n-  HeapRegion*                 _curr_region;\n+  G1HeapRegion*               _curr_region;\n@@ -809,1 +809,1 @@\n-  void setup_for_region(HeapRegion* hr);\n+  void setup_for_region(G1HeapRegion* hr);\n@@ -972,1 +972,1 @@\n-  virtual bool do_heap_region(HeapRegion* r);\n+  virtual bool do_heap_region(G1HeapRegion* r);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-  DEBUG_ONLY(HeapRegion* const hr = _g1h->heap_region_containing(obj);)\n+  DEBUG_ONLY(G1HeapRegion* const hr = _g1h->heap_region_containing(obj);)\n@@ -187,1 +187,1 @@\n-inline void G1ConcurrentMark::update_top_at_mark_start(HeapRegion* r) {\n+inline void G1ConcurrentMark::update_top_at_mark_start(G1HeapRegion* r) {\n@@ -193,1 +193,1 @@\n-inline void G1ConcurrentMark::reset_top_at_mark_start(HeapRegion* r) {\n+inline void G1ConcurrentMark::reset_top_at_mark_start(G1HeapRegion* r) {\n@@ -197,1 +197,1 @@\n-inline HeapWord* G1ConcurrentMark::top_at_mark_start(const HeapRegion* r) const {\n+inline HeapWord* G1ConcurrentMark::top_at_mark_start(const G1HeapRegion* r) const {\n@@ -212,1 +212,1 @@\n-inline HeapWord* G1ConcurrentMark::top_at_rebuild_start(HeapRegion* r) const {\n+inline HeapWord* G1ConcurrentMark::top_at_rebuild_start(G1HeapRegion* r) const {\n@@ -216,1 +216,1 @@\n-inline void G1ConcurrentMark::update_top_at_rebuild_start(HeapRegion* r) {\n+inline void G1ConcurrentMark::update_top_at_rebuild_start(G1HeapRegion* r) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.inline.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  MemRegion mr(G1CollectedHeap::heap()->bottom_addr_for_region(start_region), num_regions * HeapRegion::GrainWords);\n+  MemRegion mr(G1CollectedHeap::heap()->bottom_addr_for_region(start_region), num_regions * G1HeapRegion::GrainWords);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkBitMap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -39,1 +39,0 @@\n-class HeapRegion;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkBitMap.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  HeapRegion* r = g1h->heap_region_containing(slice);\n+  G1HeapRegion* r = g1h->heap_region_containing(slice);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMarkObjArrayProcessor.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -107,1 +107,1 @@\n-    bool should_rebuild_or_scrub(HeapRegion* hr) const {\n+    bool should_rebuild_or_scrub(G1HeapRegion* hr) const {\n@@ -115,1 +115,1 @@\n-    bool scan_large_object(HeapRegion* hr, const oop obj, MemRegion scan_range) {\n+    bool scan_large_object(G1HeapRegion* hr, const oop obj, MemRegion scan_range) {\n@@ -143,1 +143,1 @@\n-    size_t scan_object(HeapRegion* hr, HeapWord* current) {\n+    size_t scan_object(G1HeapRegion* hr, HeapWord* current) {\n@@ -169,1 +169,1 @@\n-    HeapWord* scrub_to_next_live(HeapRegion* hr, HeapWord* scrub_start, HeapWord* limit) {\n+    HeapWord* scrub_to_next_live(G1HeapRegion* hr, HeapWord* scrub_start, HeapWord* limit) {\n@@ -181,1 +181,1 @@\n-    bool scan_and_scrub_to_pb(HeapRegion* hr, HeapWord* start, HeapWord* const limit) {\n+    bool scan_and_scrub_to_pb(G1HeapRegion* hr, HeapWord* start, HeapWord* const limit) {\n@@ -208,1 +208,1 @@\n-    bool scan_from_pb_to_tars(HeapRegion* hr, HeapWord* start, HeapWord* const limit) {\n+    bool scan_from_pb_to_tars(G1HeapRegion* hr, HeapWord* start, HeapWord* const limit) {\n@@ -228,1 +228,1 @@\n-    bool scan_and_scrub_region(HeapRegion* hr, HeapWord* const pb) {\n+    bool scan_and_scrub_region(G1HeapRegion* hr, HeapWord* const pb) {\n@@ -258,1 +258,1 @@\n-    bool scan_humongous_region(HeapRegion* hr, HeapWord* const pb) {\n+    bool scan_humongous_region(G1HeapRegion* hr, HeapWord* const pb) {\n@@ -297,1 +297,1 @@\n-    bool do_heap_region(HeapRegion* hr) {\n+    bool do_heap_region(G1HeapRegion* hr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRebuildAndScrub.cpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -265,1 +265,1 @@\n-  bool do_heap_region(HeapRegion* r) override {\n+  bool do_heap_region(G1HeapRegion* r) override {\n@@ -320,1 +320,1 @@\n-      size_t young_bytes = _policy->young_list_target_length() * HeapRegion::GrainBytes;\n+      size_t young_bytes = _policy->young_list_target_length() * G1HeapRegion::GrainBytes;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefine.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  double alloc_bytes_rate = alloc_region_rate * HeapRegion::GrainBytes;\n+  double alloc_bytes_rate = alloc_region_rate * G1HeapRegion::GrainBytes;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentRefineThreadsNeeded.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  uint add(HeapRegion* hr) {\n+  uint add(G1HeapRegion* hr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EdenRegions.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-    HeapRegion* hr = g1h->region_at(region_idx);\n+    G1HeapRegion* hr = g1h->region_at(region_idx);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1EvacFailureRegions.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-  _region_attr_table.initialize(heap->reserved(), HeapRegion::GrainBytes);\n+  _region_attr_table.initialize(heap->reserved(), G1HeapRegion::GrainBytes);\n@@ -173,1 +173,1 @@\n-  bool do_heap_region(HeapRegion* hr) {\n+  bool do_heap_region(G1HeapRegion* hr) {\n@@ -258,1 +258,1 @@\n-void G1FullCollector::before_marking_update_attribute_table(HeapRegion* hr) {\n+void G1FullCollector::before_marking_update_attribute_table(G1HeapRegion* hr) {\n@@ -422,1 +422,1 @@\n-  HeapRegion* start_hr = _heap->region_at(start_serial);\n+  G1HeapRegion* start_hr = _heap->region_at(start_serial);\n@@ -431,1 +431,1 @@\n-      HeapRegion* current = _heap->region_at(i);\n+      G1HeapRegion* current = _heap->region_at(i);\n@@ -452,1 +452,1 @@\n-    HeapRegion* hr = _heap->region_at_or_null(region_index);\n+    G1HeapRegion* hr = _heap->region_at_or_null(region_index);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -48,1 +48,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -90,1 +90,1 @@\n-  GrowableArrayCHeap<HeapRegion*, mtGC> _humongous_compaction_regions;\n+  GrowableArrayCHeap<G1HeapRegion*, mtGC> _humongous_compaction_regions;\n@@ -128,1 +128,1 @@\n-  void before_marking_update_attribute_table(HeapRegion* hr);\n+  void before_marking_update_attribute_table(G1HeapRegion* hr);\n@@ -141,2 +141,2 @@\n-  inline void set_compaction_top(HeapRegion* r, HeapWord* value);\n-  inline HeapWord* compaction_top(HeapRegion* r) const;\n+  inline void set_compaction_top(G1HeapRegion* r, HeapWord* value);\n+  inline HeapWord* compaction_top(G1HeapRegion* r) const;\n@@ -147,2 +147,2 @@\n-  inline void add_humongous_region(HeapRegion* hr);\n-  inline GrowableArrayCHeap<HeapRegion*, mtGC>& humongous_compaction_regions();\n+  inline void add_humongous_region(G1HeapRegion* hr);\n+  inline GrowableArrayCHeap<G1HeapRegion*, mtGC>& humongous_compaction_regions();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-void G1FullCollector::set_compaction_top(HeapRegion* r, HeapWord* value) {\n+void G1FullCollector::set_compaction_top(G1HeapRegion* r, HeapWord* value) {\n@@ -69,1 +69,1 @@\n-HeapWord* G1FullCollector::compaction_top(HeapRegion* r) const {\n+HeapWord* G1FullCollector::compaction_top(G1HeapRegion* r) const {\n@@ -93,1 +93,1 @@\n-void G1FullCollector::add_humongous_region(HeapRegion* hr) {\n+void G1FullCollector::add_humongous_region(G1HeapRegion* hr) {\n@@ -97,1 +97,1 @@\n-GrowableArrayCHeap<HeapRegion*, mtGC>& G1FullCollector::humongous_compaction_regions() {\n+GrowableArrayCHeap<G1HeapRegion*, mtGC>& G1FullCollector::humongous_compaction_regions() {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullCollector.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -64,1 +64,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCAdjustTask.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-void G1FullGCCompactTask::compact_region(HeapRegion* hr) {\n+void G1FullGCCompactTask::compact_region(G1HeapRegion* hr) {\n@@ -90,2 +90,2 @@\n-  GrowableArray<HeapRegion*>* compaction_queue = collector()->compaction_point(worker_id)->regions();\n-  for (GrowableArrayIterator<HeapRegion*> it = compaction_queue->begin();\n+  GrowableArray<G1HeapRegion*>* compaction_queue = collector()->compaction_point(worker_id)->regions();\n+  for (GrowableArrayIterator<G1HeapRegion*> it = compaction_queue->begin();\n@@ -100,2 +100,2 @@\n-  GrowableArray<HeapRegion*>* compaction_queue = collector()->serial_compaction_point()->regions();\n-  for (GrowableArrayIterator<HeapRegion*> it = compaction_queue->begin();\n+  GrowableArray<G1HeapRegion*>* compaction_queue = collector()->serial_compaction_point()->regions();\n+  for (GrowableArrayIterator<G1HeapRegion*> it = compaction_queue->begin();\n@@ -111,1 +111,1 @@\n-  for (HeapRegion* hr : collector()->humongous_compaction_regions()) {\n+  for (G1HeapRegion* hr : collector()->humongous_compaction_regions()) {\n@@ -117,1 +117,1 @@\n-void G1FullGCCompactTask::compact_humongous_obj(HeapRegion* src_hr) {\n+void G1FullGCCompactTask::compact_humongous_obj(G1HeapRegion* src_hr) {\n@@ -149,1 +149,1 @@\n-    HeapRegion* hr = _g1h->region_at(i);\n+    G1HeapRegion* hr = _g1h->region_at(i);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -43,2 +43,2 @@\n-  void compact_region(HeapRegion* hr);\n-  void compact_humongous_obj(HeapRegion* hr);\n+  void compact_region(G1HeapRegion* hr);\n+  void compact_humongous_obj(G1HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactTask.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-  _compaction_regions = new (mtGC) GrowableArray<HeapRegion*>(32, mtGC);\n+  _compaction_regions = new (mtGC) GrowableArray<G1HeapRegion*>(32, mtGC);\n@@ -64,1 +64,1 @@\n-void G1FullGCCompactionPoint::initialize(HeapRegion* hr) {\n+void G1FullGCCompactionPoint::initialize(G1HeapRegion* hr) {\n@@ -69,1 +69,1 @@\n-HeapRegion* G1FullGCCompactionPoint::current_region() {\n+G1HeapRegion* G1FullGCCompactionPoint::current_region() {\n@@ -73,2 +73,2 @@\n-HeapRegion* G1FullGCCompactionPoint::next_region() {\n-  HeapRegion* next = *(++_compaction_region_iterator);\n+G1HeapRegion* G1FullGCCompactionPoint::next_region() {\n+  G1HeapRegion* next = *(++_compaction_region_iterator);\n@@ -79,1 +79,1 @@\n-GrowableArray<HeapRegion*>* G1FullGCCompactionPoint::regions() {\n+GrowableArray<G1HeapRegion*>* G1FullGCCompactionPoint::regions() {\n@@ -120,1 +120,1 @@\n-void G1FullGCCompactionPoint::add(HeapRegion* hr) {\n+void G1FullGCCompactionPoint::add(G1HeapRegion* hr) {\n@@ -125,1 +125,1 @@\n-  HeapRegion* cur = current_region();\n+  G1HeapRegion* cur = current_region();\n@@ -129,1 +129,1 @@\n-  for (HeapRegion* r : *_compaction_regions) {\n+  for (G1HeapRegion* r : *_compaction_regions) {\n@@ -139,1 +139,1 @@\n-void G1FullGCCompactionPoint::add_humongous(HeapRegion* hr) {\n+void G1FullGCCompactionPoint::add_humongous(G1HeapRegion* hr) {\n@@ -146,1 +146,1 @@\n-                                     [&] (HeapRegion* r) {\n+                                     [&] (G1HeapRegion* r) {\n@@ -152,1 +152,1 @@\n-void G1FullGCCompactionPoint::forward_humongous(HeapRegion* hr) {\n+void G1FullGCCompactionPoint::forward_humongous(G1HeapRegion* hr) {\n@@ -174,1 +174,1 @@\n-  HeapRegion* dest_hr = _compaction_regions->at(range_begin);\n+  G1HeapRegion* dest_hr = _compaction_regions->at(range_begin);\n@@ -187,1 +187,1 @@\n-uint G1FullGCCompactionPoint::find_contiguous_before(HeapRegion* hr, uint num_regions) {\n+uint G1FullGCCompactionPoint::find_contiguous_before(G1HeapRegion* hr, uint num_regions) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -39,2 +39,2 @@\n-  HeapRegion* _current_region;\n-  HeapWord*   _compaction_top;\n+  G1HeapRegion* _current_region;\n+  HeapWord* _compaction_top;\n@@ -42,2 +42,2 @@\n-  GrowableArray<HeapRegion*>* _compaction_regions;\n-  GrowableArrayIterator<HeapRegion*> _compaction_region_iterator;\n+  GrowableArray<G1HeapRegion*>* _compaction_regions;\n+  GrowableArrayIterator<G1HeapRegion*> _compaction_region_iterator;\n@@ -48,2 +48,2 @@\n-  HeapRegion* next_region();\n-  uint find_contiguous_before(HeapRegion* hr, uint num_regions);\n+  G1HeapRegion* next_region();\n+  uint find_contiguous_before(G1HeapRegion* hr, uint num_regions);\n@@ -57,1 +57,1 @@\n-  void initialize(HeapRegion* hr);\n+  void initialize(G1HeapRegion* hr);\n@@ -60,3 +60,3 @@\n-  void forward_humongous(HeapRegion* hr);\n-  void add(HeapRegion* hr);\n-  void add_humongous(HeapRegion* hr);\n+  void forward_humongous(G1HeapRegion* hr);\n+  void add(G1HeapRegion* hr);\n+  void add_humongous(G1HeapRegion* hr);\n@@ -65,1 +65,1 @@\n-  HeapRegion* current_region();\n+  G1HeapRegion* current_region();\n@@ -67,1 +67,1 @@\n-  GrowableArray<HeapRegion*>* regions();\n+  GrowableArray<G1HeapRegion*>* regions();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCCompactionPoint.hpp","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-\/\/ (1) the HeapRegion itself can not be moved during this phase of the full gc\n+\/\/ (1) the G1HeapRegion itself can not be moved during this phase of the full gc\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCHeapRegionAttr.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -46,1 +46,1 @@\n-bool G1FullGCPrepareTask::G1CalculatePointersClosure::do_heap_region(HeapRegion* hr) {\n+bool G1FullGCPrepareTask::G1CalculatePointersClosure::do_heap_region(G1HeapRegion* hr) {\n@@ -81,1 +81,1 @@\n-    for (GrowableArrayIterator<HeapRegion*> it = compaction_point->regions()->begin();\n+    for (GrowableArrayIterator<G1HeapRegion*> it = compaction_point->regions()->begin();\n@@ -116,1 +116,1 @@\n-void G1FullGCPrepareTask::G1CalculatePointersClosure::prepare_for_compaction(HeapRegion* hr) {\n+void G1FullGCPrepareTask::G1CalculatePointersClosure::prepare_for_compaction(G1HeapRegion* hr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -45,1 +45,1 @@\n-  inline void free_empty_humongous_region(HeapRegion* hr);\n+  inline void free_empty_humongous_region(G1HeapRegion* hr);\n@@ -47,1 +47,1 @@\n-  inline bool should_compact(HeapRegion* hr) const;\n+  inline bool should_compact(G1HeapRegion* hr) const;\n@@ -55,1 +55,1 @@\n-  inline void add_to_compaction_queue(HeapRegion* hr);\n+  inline void add_to_compaction_queue(G1HeapRegion* hr);\n@@ -60,1 +60,1 @@\n-  inline bool do_heap_region(HeapRegion* hr) override;\n+  inline bool do_heap_region(G1HeapRegion* hr) override;\n@@ -83,1 +83,1 @@\n-    void prepare_for_compaction(HeapRegion* hr);\n+    void prepare_for_compaction(G1HeapRegion* hr);\n@@ -89,1 +89,1 @@\n-    bool do_heap_region(HeapRegion* hr);\n+    bool do_heap_region(G1HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -36,1 +36,1 @@\n-void G1DetermineCompactionQueueClosure::free_empty_humongous_region(HeapRegion* hr) {\n+void G1DetermineCompactionQueueClosure::free_empty_humongous_region(G1HeapRegion* hr) {\n@@ -42,1 +42,1 @@\n-inline bool G1DetermineCompactionQueueClosure::should_compact(HeapRegion* hr) const {\n+inline bool G1DetermineCompactionQueueClosure::should_compact(G1HeapRegion* hr) const {\n@@ -64,1 +64,1 @@\n-inline void G1DetermineCompactionQueueClosure::add_to_compaction_queue(HeapRegion* hr) {\n+inline void G1DetermineCompactionQueueClosure::add_to_compaction_queue(G1HeapRegion* hr) {\n@@ -76,1 +76,1 @@\n-static bool has_pinned_objects(HeapRegion* hr) {\n+static bool has_pinned_objects(G1HeapRegion* hr) {\n@@ -81,1 +81,1 @@\n-inline bool G1DetermineCompactionQueueClosure::do_heap_region(HeapRegion* hr) {\n+inline bool G1DetermineCompactionQueueClosure::do_heap_region(G1HeapRegion* hr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCPrepareTask.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-void G1FullGCResetMetadataTask::G1ResetMetadataClosure::reset_region_metadata(HeapRegion* hr) {\n+void G1FullGCResetMetadataTask::G1ResetMetadataClosure::reset_region_metadata(G1HeapRegion* hr) {\n@@ -39,1 +39,1 @@\n-bool G1FullGCResetMetadataTask::G1ResetMetadataClosure::do_heap_region(HeapRegion* hr) {\n+bool G1FullGCResetMetadataTask::G1ResetMetadataClosure::do_heap_region(G1HeapRegion* hr) {\n@@ -57,1 +57,1 @@\n-void G1FullGCResetMetadataTask::G1ResetMetadataClosure::scrub_skip_compacting_region(HeapRegion* hr, bool update_bot_for_live) {\n+void G1FullGCResetMetadataTask::G1ResetMetadataClosure::scrub_skip_compacting_region(G1HeapRegion* hr, bool update_bot_for_live) {\n@@ -85,1 +85,1 @@\n-void G1FullGCResetMetadataTask::G1ResetMetadataClosure::reset_skip_compacting(HeapRegion* hr) {\n+void G1FullGCResetMetadataTask::G1ResetMetadataClosure::reset_skip_compacting(G1HeapRegion* hr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCResetMetadataTask.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-    void reset_region_metadata(HeapRegion* hr);\n+    void reset_region_metadata(G1HeapRegion* hr);\n@@ -42,1 +42,1 @@\n-    void scrub_skip_compacting_region(HeapRegion* hr, bool update_bot_for_live);\n+    void scrub_skip_compacting_region(G1HeapRegion* hr, bool update_bot_for_live);\n@@ -44,1 +44,1 @@\n-    void reset_skip_compacting(HeapRegion* r);\n+    void reset_skip_compacting(G1HeapRegion* r);\n@@ -49,1 +49,1 @@\n-    bool do_heap_region(HeapRegion* hr);\n+    bool do_heap_region(G1HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCResetMetadataTask.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -55,2 +55,2 @@\n-                                 HeapRegion::GrainWords :\n-                                 (1 - MarkSweepDeadRatio \/ 100.0) * HeapRegion::GrainWords) { }\n+                                 G1HeapRegion::GrainWords :\n+                                 (1 - MarkSweepDeadRatio \/ 100.0) * G1HeapRegion::GrainWords) { }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1FullGCScope.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,5 +51,5 @@\n-uint   HeapRegion::LogOfHRGrainBytes = 0;\n-uint   HeapRegion::LogCardsPerRegion = 0;\n-size_t HeapRegion::GrainBytes        = 0;\n-size_t HeapRegion::GrainWords        = 0;\n-size_t HeapRegion::CardsPerRegion    = 0;\n+uint   G1HeapRegion::LogOfHRGrainBytes = 0;\n+uint   G1HeapRegion::LogCardsPerRegion = 0;\n+size_t G1HeapRegion::GrainBytes        = 0;\n+size_t G1HeapRegion::GrainWords        = 0;\n+size_t G1HeapRegion::CardsPerRegion    = 0;\n@@ -57,1 +57,1 @@\n-size_t HeapRegion::max_region_size() {\n+size_t G1HeapRegion::max_region_size() {\n@@ -61,1 +61,1 @@\n-size_t HeapRegion::min_region_size_in_words() {\n+size_t G1HeapRegion::min_region_size_in_words() {\n@@ -65,1 +65,1 @@\n-void HeapRegion::setup_heap_region_size(size_t max_heap_size) {\n+void G1HeapRegion::setup_heap_region_size(size_t max_heap_size) {\n@@ -101,1 +101,1 @@\n-void HeapRegion::handle_evacuation_failure(bool retain) {\n+void G1HeapRegion::handle_evacuation_failure(bool retain) {\n@@ -111,1 +111,1 @@\n-void HeapRegion::unlink_from_list() {\n+void G1HeapRegion::unlink_from_list() {\n@@ -117,1 +117,1 @@\n-void HeapRegion::hr_clear(bool clear_space) {\n+void G1HeapRegion::hr_clear(bool clear_space) {\n@@ -135,1 +135,1 @@\n-void HeapRegion::clear_cardtable() {\n+void G1HeapRegion::clear_cardtable() {\n@@ -140,1 +140,1 @@\n-double HeapRegion::calc_gc_efficiency() {\n+double G1HeapRegion::calc_gc_efficiency() {\n@@ -152,1 +152,1 @@\n-void HeapRegion::set_free() {\n+void G1HeapRegion::set_free() {\n@@ -157,1 +157,1 @@\n-void HeapRegion::set_eden() {\n+void G1HeapRegion::set_eden() {\n@@ -162,1 +162,1 @@\n-void HeapRegion::set_eden_pre_gc() {\n+void G1HeapRegion::set_eden_pre_gc() {\n@@ -167,1 +167,1 @@\n-void HeapRegion::set_survivor() {\n+void G1HeapRegion::set_survivor() {\n@@ -172,1 +172,1 @@\n-void HeapRegion::move_to_old() {\n+void G1HeapRegion::move_to_old() {\n@@ -178,1 +178,1 @@\n-void HeapRegion::set_old() {\n+void G1HeapRegion::set_old() {\n@@ -183,1 +183,1 @@\n-void HeapRegion::set_starts_humongous(HeapWord* obj_top, size_t fill_size) {\n+void G1HeapRegion::set_starts_humongous(HeapWord* obj_top, size_t fill_size) {\n@@ -197,1 +197,1 @@\n-void HeapRegion::set_continues_humongous(HeapRegion* first_hr) {\n+void G1HeapRegion::set_continues_humongous(G1HeapRegion* first_hr) {\n@@ -207,1 +207,1 @@\n-void HeapRegion::clear_humongous() {\n+void G1HeapRegion::clear_humongous() {\n@@ -210,1 +210,1 @@\n-  assert(capacity() == HeapRegion::GrainBytes, \"pre-condition\");\n+  assert(capacity() == G1HeapRegion::GrainBytes, \"pre-condition\");\n@@ -214,1 +214,1 @@\n-void HeapRegion::prepare_remset_for_scan() {\n+void G1HeapRegion::prepare_remset_for_scan() {\n@@ -218,1 +218,1 @@\n-HeapRegion::HeapRegion(uint hrm_index,\n+G1HeapRegion::G1HeapRegion(uint hrm_index,\n@@ -251,1 +251,1 @@\n-void HeapRegion::initialize(bool clear_space, bool mangle_space) {\n+void G1HeapRegion::initialize(bool clear_space, bool mangle_space) {\n@@ -263,1 +263,1 @@\n-void HeapRegion::report_region_type_change(G1HeapRegionTraceType::Type to) {\n+void G1HeapRegion::report_region_type_change(G1HeapRegionTraceType::Type to) {\n@@ -271,1 +271,1 @@\n- void HeapRegion::note_evacuation_failure() {\n+ void G1HeapRegion::note_evacuation_failure() {\n@@ -279,1 +279,1 @@\n-void HeapRegion::note_self_forward_chunk_done(size_t garbage_bytes) {\n+void G1HeapRegion::note_self_forward_chunk_done(size_t garbage_bytes) {\n@@ -284,1 +284,1 @@\n-void HeapRegion::add_code_root(nmethod* nm) {\n+void G1HeapRegion::add_code_root(nmethod* nm) {\n@@ -288,1 +288,1 @@\n-void HeapRegion::remove_code_root(nmethod* nm) {\n+void G1HeapRegion::remove_code_root(nmethod* nm) {\n@@ -292,1 +292,1 @@\n-void HeapRegion::code_roots_do(NMethodClosure* blk) const {\n+void G1HeapRegion::code_roots_do(NMethodClosure* blk) const {\n@@ -297,1 +297,1 @@\n-  const HeapRegion* _hr;\n+  const G1HeapRegion* _hr;\n@@ -324,1 +324,1 @@\n-  VerifyCodeRootOopClosure(const HeapRegion* hr):\n+  VerifyCodeRootOopClosure(const G1HeapRegion* hr):\n@@ -335,1 +335,1 @@\n-  const HeapRegion* _hr;\n+  const G1HeapRegion* _hr;\n@@ -338,1 +338,1 @@\n-  VerifyCodeRootNMethodClosure(const HeapRegion* hr) :\n+  VerifyCodeRootNMethodClosure(const G1HeapRegion* hr) :\n@@ -361,1 +361,1 @@\n-bool HeapRegion::verify_code_roots(VerifyOption vo) const {\n+bool G1HeapRegion::verify_code_roots(VerifyOption vo) const {\n@@ -406,1 +406,1 @@\n-void HeapRegion::print() const { print_on(tty); }\n+void G1HeapRegion::print() const { print_on(tty); }\n@@ -408,1 +408,1 @@\n-void HeapRegion::print_on(outputStream* st) const {\n+void G1HeapRegion::print_on(outputStream* st) const {\n@@ -522,1 +522,1 @@\n-    void print_containing_obj(outputStream* out, HeapRegion* from) {\n+    void print_containing_obj(outputStream* out, G1HeapRegion* from) {\n@@ -528,1 +528,1 @@\n-    void print_referenced_obj(outputStream* out, HeapRegion* to, const char* explanation) {\n+    void print_referenced_obj(outputStream* out, G1HeapRegion* to, const char* explanation) {\n@@ -561,1 +561,1 @@\n-      HeapRegion* from = this->_g1h->heap_region_containing(this->_p);\n+      G1HeapRegion* from = this->_g1h->heap_region_containing(this->_p);\n@@ -567,1 +567,1 @@\n-        HeapRegion* to = this->_g1h->heap_region_containing(this->_obj);\n+        G1HeapRegion* to = this->_g1h->heap_region_containing(this->_obj);\n@@ -578,2 +578,2 @@\n-    HeapRegion* _from;\n-    HeapRegion* _to;\n+    G1HeapRegion* _from;\n+    G1HeapRegion* _to;\n@@ -661,1 +661,1 @@\n-bool HeapRegion::verify_liveness_and_remset(VerifyOption vo) const {\n+bool G1HeapRegion::verify_liveness_and_remset(VerifyOption vo) const {\n@@ -694,1 +694,1 @@\n-bool HeapRegion::verify(VerifyOption vo) const {\n+bool G1HeapRegion::verify(VerifyOption vo) const {\n@@ -713,1 +713,1 @@\n-void HeapRegion::clear(bool mangle_space) {\n+void G1HeapRegion::clear(bool mangle_space) {\n@@ -722,1 +722,1 @@\n-void HeapRegion::mangle_unused_area() {\n+void G1HeapRegion::mangle_unused_area() {\n@@ -727,1 +727,1 @@\n-void HeapRegion::object_iterate(ObjectClosure* blk) {\n+void G1HeapRegion::object_iterate(ObjectClosure* blk) {\n@@ -737,1 +737,1 @@\n-void HeapRegion::fill_with_dummy_object(HeapWord* address, size_t word_size, bool zap) {\n+void G1HeapRegion::fill_with_dummy_object(HeapWord* address, size_t word_size, bool zap) {\n@@ -746,1 +746,1 @@\n-void HeapRegion::fill_range_with_dead_objects(HeapWord* start, HeapWord* end) {\n+void G1HeapRegion::fill_range_with_dead_objects(HeapWord* start, HeapWord* end) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":52,"deletions":52,"binary":false,"changes":104,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -57,1 +57,1 @@\n-\/\/ A HeapRegion is the smallest piece of a G1CollectedHeap that\n+\/\/ A G1HeapRegion is the smallest piece of a G1CollectedHeap that\n@@ -69,1 +69,1 @@\n-class HeapRegion : public CHeapObj<mtGC> {\n+class G1HeapRegion : public CHeapObj<mtGC> {\n@@ -133,1 +133,1 @@\n-  \/\/ This version assumes that all allocation requests to this HeapRegion are properly\n+  \/\/ This version assumes that all allocation requests to this G1HeapRegion are properly\n@@ -136,1 +136,1 @@\n-  \/\/ Try to allocate at least min_word_size and up to desired_size from this HeapRegion.\n+  \/\/ Try to allocate at least min_word_size and up to desired_size from this G1HeapRegion.\n@@ -180,1 +180,1 @@\n-  \/\/ All allocated blocks are occupied by objects in a HeapRegion.\n+  \/\/ All allocated blocks are occupied by objects in a G1HeapRegion.\n@@ -185,1 +185,1 @@\n-  \/\/ current value of this HeapRegion.\n+  \/\/ current value of this G1HeapRegion.\n@@ -208,1 +208,1 @@\n-  HeapRegion* _humongous_start_region;\n+  G1HeapRegion* _humongous_start_region;\n@@ -217,2 +217,2 @@\n-  HeapRegion* _next;\n-  HeapRegion* _prev;\n+  G1HeapRegion* _next;\n+  G1HeapRegion* _prev;\n@@ -276,1 +276,1 @@\n-  HeapRegion(uint hrm_index,\n+  G1HeapRegion(uint hrm_index,\n@@ -285,1 +285,1 @@\n-  \/\/ Initializing the HeapRegion not only resets the data structure, but also\n+  \/\/ Initializing the G1HeapRegion not only resets the data structure, but also\n@@ -403,1 +403,1 @@\n-  HeapRegion* humongous_start_region() const {\n+  G1HeapRegion* humongous_start_region() const {\n@@ -418,1 +418,1 @@\n-  void set_continues_humongous(HeapRegion* first_hr);\n+  void set_continues_humongous(G1HeapRegion* first_hr);\n@@ -437,2 +437,2 @@\n-  void set_next(HeapRegion* next) { _next = next; }\n-  HeapRegion* next()              { return _next; }\n+  void set_next(G1HeapRegion* next) { _next = next; }\n+  G1HeapRegion* next()              { return _next; }\n@@ -440,2 +440,2 @@\n-  void set_prev(HeapRegion* prev) { _prev = prev; }\n-  HeapRegion* prev()              { return _prev; }\n+  void set_prev(G1HeapRegion* prev) { _prev = prev; }\n+  G1HeapRegion* prev()              { return _prev; }\n@@ -469,2 +469,2 @@\n-  \/\/ Reset the HeapRegion to default values and clear its remembered set.\n-  \/\/ If clear_space is true, clear the HeapRegion's memory.\n+  \/\/ Reset the G1HeapRegion to default values and clear its remembered set.\n+  \/\/ If clear_space is true, clear the G1HeapRegion's memory.\n@@ -571,1 +571,1 @@\n-  virtual bool do_heap_region(HeapRegion* r) = 0;\n+  virtual bool do_heap_region(G1HeapRegion* r) = 0;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.hpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-inline HeapWord* HeapRegion::allocate_impl(size_t min_word_size,\n+inline HeapWord* G1HeapRegion::allocate_impl(size_t min_word_size,\n@@ -62,1 +62,1 @@\n-inline HeapWord* HeapRegion::par_allocate_impl(size_t min_word_size,\n+inline HeapWord* G1HeapRegion::par_allocate_impl(size_t min_word_size,\n@@ -86,1 +86,1 @@\n-inline HeapWord* HeapRegion::block_start(const void* addr) const {\n+inline HeapWord* G1HeapRegion::block_start(const void* addr) const {\n@@ -90,1 +90,1 @@\n-inline HeapWord* HeapRegion::advance_to_block_containing_addr(const void* addr,\n+inline HeapWord* G1HeapRegion::advance_to_block_containing_addr(const void* addr,\n@@ -107,1 +107,1 @@\n-inline HeapWord* HeapRegion::block_start(const void* addr, HeapWord* const pb) const {\n+inline HeapWord* G1HeapRegion::block_start(const void* addr, HeapWord* const pb) const {\n@@ -113,1 +113,1 @@\n-inline bool HeapRegion::is_in_parsable_area(const void* const addr) const {\n+inline bool G1HeapRegion::is_in_parsable_area(const void* const addr) const {\n@@ -117,1 +117,1 @@\n-inline bool HeapRegion::is_in_parsable_area(const void* const addr, const void* const pb) {\n+inline bool G1HeapRegion::is_in_parsable_area(const void* const addr, const void* const pb) {\n@@ -121,1 +121,1 @@\n-inline bool HeapRegion::is_marked_in_bitmap(oop obj) const {\n+inline bool G1HeapRegion::is_marked_in_bitmap(oop obj) const {\n@@ -125,1 +125,1 @@\n-inline bool HeapRegion::block_is_obj(const HeapWord* const p, HeapWord* const pb) const {\n+inline bool G1HeapRegion::block_is_obj(const HeapWord* const p, HeapWord* const pb) const {\n@@ -144,1 +144,1 @@\n-inline HeapWord* HeapRegion::next_live_in_unparsable(G1CMBitMap* const bitmap, const HeapWord* p, HeapWord* const limit) const {\n+inline HeapWord* G1HeapRegion::next_live_in_unparsable(G1CMBitMap* const bitmap, const HeapWord* p, HeapWord* const limit) const {\n@@ -148,1 +148,1 @@\n-inline HeapWord* HeapRegion::next_live_in_unparsable(const HeapWord* p, HeapWord* const limit) const {\n+inline HeapWord* G1HeapRegion::next_live_in_unparsable(const HeapWord* p, HeapWord* const limit) const {\n@@ -153,1 +153,1 @@\n-inline bool HeapRegion::is_collection_set_candidate() const {\n+inline bool G1HeapRegion::is_collection_set_candidate() const {\n@@ -157,1 +157,1 @@\n-inline size_t HeapRegion::block_size(const HeapWord* p) const {\n+inline size_t G1HeapRegion::block_size(const HeapWord* p) const {\n@@ -161,1 +161,1 @@\n-inline size_t HeapRegion::block_size(const HeapWord* p, HeapWord* const pb) const {\n+inline size_t G1HeapRegion::block_size(const HeapWord* p, HeapWord* const pb) const {\n@@ -171,1 +171,1 @@\n-inline void HeapRegion::prepare_for_full_gc() {\n+inline void G1HeapRegion::prepare_for_full_gc() {\n@@ -178,1 +178,1 @@\n-inline void HeapRegion::reset_compacted_after_full_gc(HeapWord* new_top) {\n+inline void G1HeapRegion::reset_compacted_after_full_gc(HeapWord* new_top) {\n@@ -184,1 +184,1 @@\n-inline void HeapRegion::reset_skip_compacting_after_full_gc() {\n+inline void G1HeapRegion::reset_skip_compacting_after_full_gc() {\n@@ -190,1 +190,1 @@\n-inline void HeapRegion::reset_after_full_gc_common() {\n+inline void G1HeapRegion::reset_after_full_gc_common() {\n@@ -207,1 +207,1 @@\n-inline void HeapRegion::apply_to_marked_objects(G1CMBitMap* bitmap, ApplyToMarkedClosure* closure) {\n+inline void G1HeapRegion::apply_to_marked_objects(G1CMBitMap* bitmap, ApplyToMarkedClosure* closure) {\n@@ -227,1 +227,1 @@\n-inline HeapWord* HeapRegion::par_allocate(size_t min_word_size,\n+inline HeapWord* G1HeapRegion::par_allocate(size_t min_word_size,\n@@ -233,1 +233,1 @@\n-inline HeapWord* HeapRegion::allocate(size_t word_size) {\n+inline HeapWord* G1HeapRegion::allocate(size_t word_size) {\n@@ -238,1 +238,1 @@\n-inline HeapWord* HeapRegion::allocate(size_t min_word_size,\n+inline HeapWord* G1HeapRegion::allocate(size_t min_word_size,\n@@ -244,1 +244,1 @@\n-inline void HeapRegion::update_bot() {\n+inline void G1HeapRegion::update_bot() {\n@@ -256,1 +256,1 @@\n-inline void HeapRegion::update_bot_for_block(HeapWord* start, HeapWord* end) {\n+inline void G1HeapRegion::update_bot_for_block(HeapWord* start, HeapWord* end) {\n@@ -265,1 +265,1 @@\n-inline HeapWord* HeapRegion::parsable_bottom() const {\n+inline HeapWord* G1HeapRegion::parsable_bottom() const {\n@@ -270,1 +270,1 @@\n-inline HeapWord* HeapRegion::parsable_bottom_acquire() const {\n+inline HeapWord* G1HeapRegion::parsable_bottom_acquire() const {\n@@ -274,1 +274,1 @@\n-inline void HeapRegion::reset_parsable_bottom() {\n+inline void G1HeapRegion::reset_parsable_bottom() {\n@@ -278,1 +278,1 @@\n-inline void HeapRegion::note_end_of_marking(HeapWord* top_at_mark_start, size_t marked_bytes) {\n+inline void G1HeapRegion::note_end_of_marking(HeapWord* top_at_mark_start, size_t marked_bytes) {\n@@ -290,1 +290,1 @@\n-inline void HeapRegion::note_end_of_scrubbing() {\n+inline void G1HeapRegion::note_end_of_scrubbing() {\n@@ -294,1 +294,1 @@\n-inline bool HeapRegion::needs_scrubbing() const {\n+inline bool G1HeapRegion::needs_scrubbing() const {\n@@ -298,1 +298,1 @@\n-inline bool HeapRegion::in_collection_set() const {\n+inline bool G1HeapRegion::in_collection_set() const {\n@@ -303,1 +303,1 @@\n-HeapWord* HeapRegion::do_oops_on_memregion_in_humongous(MemRegion mr,\n+HeapWord* G1HeapRegion::do_oops_on_memregion_in_humongous(MemRegion mr,\n@@ -306,1 +306,1 @@\n-  HeapRegion* sr = humongous_start_region();\n+  G1HeapRegion* sr = humongous_start_region();\n@@ -345,1 +345,1 @@\n-inline HeapWord* HeapRegion::oops_on_memregion_iterate_in_unparsable(MemRegion mr, HeapWord* block_start, Closure* cl) {\n+inline HeapWord* G1HeapRegion::oops_on_memregion_iterate_in_unparsable(MemRegion mr, HeapWord* block_start, Closure* cl) {\n@@ -390,1 +390,1 @@\n-inline HeapWord* HeapRegion::oops_on_memregion_iterate(MemRegion mr, Closure* cl) {\n+inline HeapWord* G1HeapRegion::oops_on_memregion_iterate(MemRegion mr, Closure* cl) {\n@@ -454,1 +454,1 @@\n-HeapWord* HeapRegion::oops_on_memregion_seq_iterate_careful(MemRegion mr,\n+HeapWord* G1HeapRegion::oops_on_memregion_seq_iterate_careful(MemRegion mr,\n@@ -475,1 +475,1 @@\n-inline uint HeapRegion::age_in_surv_rate_group() const {\n+inline uint G1HeapRegion::age_in_surv_rate_group() const {\n@@ -481,1 +481,1 @@\n-inline bool HeapRegion::has_valid_age_in_surv_rate() const {\n+inline bool G1HeapRegion::has_valid_age_in_surv_rate() const {\n@@ -485,1 +485,1 @@\n-inline bool HeapRegion::has_surv_rate_group() const {\n+inline bool G1HeapRegion::has_surv_rate_group() const {\n@@ -489,1 +489,1 @@\n-inline double HeapRegion::surv_rate_prediction(G1Predictions const& predictor) const {\n+inline double G1HeapRegion::surv_rate_prediction(G1Predictions const& predictor) const {\n@@ -494,1 +494,1 @@\n-inline void HeapRegion::install_surv_rate_group(G1SurvRateGroup* surv_rate_group) {\n+inline void G1HeapRegion::install_surv_rate_group(G1SurvRateGroup* surv_rate_group) {\n@@ -503,1 +503,1 @@\n-inline void HeapRegion::uninstall_surv_rate_group() {\n+inline void G1HeapRegion::uninstall_surv_rate_group() {\n@@ -515,1 +515,1 @@\n-inline void HeapRegion::record_surv_words_in_group(size_t words_survived) {\n+inline void G1HeapRegion::record_surv_words_in_group(size_t words_survived) {\n@@ -520,1 +520,1 @@\n-inline void HeapRegion::add_pinned_object_count(size_t value) {\n+inline void G1HeapRegion::add_pinned_object_count(size_t value) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.inline.hpp","additions":44,"deletions":44,"binary":false,"changes":88,"status":"modified"},{"patch":"@@ -124,1 +124,1 @@\n-\/\/ in a HeapRegion, but only to what is interesting for the current young collection.\n+\/\/ in a G1HeapRegion, but only to what is interesting for the current young collection.\n@@ -183,1 +183,1 @@\n-  bool is_in_cset(const HeapRegion* hr) const { return get_by_index(hr->hrm_index()).is_in_cset(); }\n+  bool is_in_cset(const G1HeapRegion* hr) const { return get_by_index(hr->hrm_index()).is_in_cset(); }\n@@ -186,1 +186,1 @@\n-  void clear(const HeapRegion* hr) { return set_by_index(hr->hrm_index(), G1HeapRegionAttr(G1HeapRegionAttr::NotInCSet)); }\n+  void clear(const G1HeapRegion* hr) { return set_by_index(hr->hrm_index(), G1HeapRegionAttr(G1HeapRegionAttr::NotInCSet)); }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionAttr.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionEventSender.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -61,1 +61,1 @@\n-  bool is_correct_type(HeapRegion* hr) { return hr->is_free(); }\n+  bool is_correct_type(G1HeapRegion* hr) { return hr->is_free(); }\n@@ -88,1 +88,1 @@\n-  _regions.initialize(heap_storage->reserved(), HeapRegion::GrainBytes);\n+  _regions.initialize(heap_storage->reserved(), G1HeapRegion::GrainBytes);\n@@ -93,2 +93,2 @@\n-HeapRegion* HeapRegionManager::allocate_free_region(HeapRegionType type, uint requested_node_index) {\n-  HeapRegion* hr = nullptr;\n+G1HeapRegion* HeapRegionManager::allocate_free_region(HeapRegionType type, uint requested_node_index) {\n+  G1HeapRegion* hr = nullptr;\n@@ -121,1 +121,1 @@\n-HeapRegion* HeapRegionManager::allocate_humongous_from_free_list(uint num_regions) {\n+G1HeapRegion* HeapRegionManager::allocate_humongous_from_free_list(uint num_regions) {\n@@ -129,1 +129,1 @@\n-HeapRegion* HeapRegionManager::allocate_humongous_allow_expand(uint num_regions) {\n+G1HeapRegion* HeapRegionManager::allocate_humongous_allow_expand(uint num_regions) {\n@@ -138,1 +138,1 @@\n-HeapRegion* HeapRegionManager::allocate_humongous(uint num_regions) {\n+G1HeapRegion* HeapRegionManager::allocate_humongous(uint num_regions) {\n@@ -146,1 +146,1 @@\n-HeapRegion* HeapRegionManager::expand_and_allocate_humongous(uint num_regions) {\n+G1HeapRegion* HeapRegionManager::expand_and_allocate_humongous(uint num_regions) {\n@@ -151,1 +151,1 @@\n-bool HeapRegionManager::is_free(HeapRegion* hr) const {\n+bool HeapRegionManager::is_free(G1HeapRegion* hr) const {\n@@ -156,1 +156,1 @@\n-HeapRegion* HeapRegionManager::new_heap_region(uint hrm_index) {\n+G1HeapRegion* HeapRegionManager::new_heap_region(uint hrm_index) {\n@@ -159,1 +159,1 @@\n-  MemRegion mr(bottom, bottom + HeapRegion::GrainWords);\n+  MemRegion mr(bottom, bottom + G1HeapRegion::GrainWords);\n@@ -167,1 +167,1 @@\n-    HeapRegion* hr = _regions.get_by_index(i);\n+    G1HeapRegion* hr = _regions.get_by_index(i);\n@@ -200,1 +200,1 @@\n-      HeapRegion* hr = _regions.get_by_index(i);\n+      G1HeapRegion* hr = _regions.get_by_index(i);\n@@ -221,1 +221,1 @@\n-    HeapRegion* hr = at(i);\n+    G1HeapRegion* hr = at(i);\n@@ -251,1 +251,1 @@\n-    HeapRegion* hr = at(i);\n+    G1HeapRegion* hr = at(i);\n@@ -433,1 +433,1 @@\n-    HeapRegion* hr = _regions.get_by_index(i);\n+    G1HeapRegion* hr = _regions.get_by_index(i);\n@@ -489,1 +489,1 @@\n-HeapRegion* HeapRegionManager::next_region_in_heap(const HeapRegion* r) const {\n+G1HeapRegion* HeapRegionManager::next_region_in_heap(const G1HeapRegion* r) const {\n@@ -493,1 +493,1 @@\n-    HeapRegion* hr = _regions.get_by_index(i);\n+    G1HeapRegion* hr = _regions.get_by_index(i);\n@@ -508,1 +508,1 @@\n-    guarantee(at(i) != nullptr, \"Tried to access region %u that has a null HeapRegion*\", i);\n+    guarantee(at(i) != nullptr, \"Tried to access region %u that has a null G1HeapRegion*\", i);\n@@ -537,1 +537,1 @@\n-    HeapRegion *hr = _regions.get_by_index(curr);\n+    G1HeapRegion* hr = _regions.get_by_index(curr);\n@@ -566,1 +566,1 @@\n-    HeapRegion* curr_region  = _regions.get_by_index(curr_index);\n+    G1HeapRegion* curr_region  = _regions.get_by_index(curr_index);\n@@ -590,1 +590,1 @@\n-    HeapRegion* r = _regions.get_by_index(index);\n+    G1HeapRegion* r = _regions.get_by_index(index);\n@@ -702,1 +702,1 @@\n-    HeapRegion* hr = _regions.get_by_index(i);\n+    G1HeapRegion* hr = _regions.get_by_index(i);\n@@ -803,1 +803,1 @@\n-    FreeRegionList *free_list = worker_freelist(worker_id);\n+    FreeRegionList* free_list = worker_freelist(worker_id);\n@@ -805,1 +805,1 @@\n-      HeapRegion *region = _hrm->at_or_null(i);\n+      G1HeapRegion* region = _hrm->at_or_null(i);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -41,1 +41,1 @@\n-class G1HeapRegionTable : public G1BiasedMappedArray<HeapRegion*> {\n+class G1HeapRegionTable : public G1BiasedMappedArray<G1HeapRegion*> {\n@@ -43,1 +43,1 @@\n-  virtual HeapRegion* default_value() const { return nullptr; }\n+  virtual G1HeapRegion* default_value() const { return nullptr; }\n@@ -47,1 +47,1 @@\n-\/\/ and its metadata (i.e., HeapRegion instances) and the list of free regions.\n+\/\/ and its metadata (i.e., G1HeapRegion instances) and the list of free regions.\n@@ -58,1 +58,1 @@\n-\/\/ We create a HeapRegion when we commit the region's address space\n+\/\/ We create a G1HeapRegion when we commit the region's address space\n@@ -60,1 +60,1 @@\n-\/\/ region we retain the HeapRegion to be able to re-use it in the\n+\/\/ region we retain the G1HeapRegion to be able to re-use it in the\n@@ -84,1 +84,1 @@\n-  \/\/ Internal only. The highest heap region +1 we allocated a HeapRegion instance for.\n+  \/\/ Internal only. The highest heap region +1 we allocated a G1HeapRegion instance for.\n@@ -140,2 +140,2 @@\n-  \/\/ Allocate a new HeapRegion for the given index.\n-  HeapRegion* new_heap_region(uint hrm_index);\n+  \/\/ Allocate a new G1HeapRegion for the given index.\n+  G1HeapRegion* new_heap_region(uint hrm_index);\n@@ -144,2 +144,2 @@\n-  HeapRegion* allocate_humongous_from_free_list(uint num_regions);\n-  HeapRegion* allocate_humongous_allow_expand(uint num_regions);\n+  G1HeapRegion* allocate_humongous_from_free_list(uint num_regions);\n+  G1HeapRegion* allocate_humongous_allow_expand(uint num_regions);\n@@ -156,1 +156,1 @@\n-  bool is_free(HeapRegion* hr) const;\n+  bool is_free(G1HeapRegion* hr) const;\n@@ -168,1 +168,1 @@\n-  \/\/ new HeapRegion that owns HeapRegion at index 0. Since at the moment we commit\n+  \/\/ new G1HeapRegion that owns G1HeapRegion at index 0. Since at the moment we commit\n@@ -171,1 +171,1 @@\n-  HeapRegion* get_dummy_region() { return new_heap_region(0); }\n+  G1HeapRegion* get_dummy_region() { return new_heap_region(0); }\n@@ -173,1 +173,1 @@\n-  \/\/ Return the HeapRegion at the given index. Assume that the index\n+  \/\/ Return the G1HeapRegion at the given index. Assume that the index\n@@ -175,1 +175,1 @@\n-  inline HeapRegion* at(uint index) const;\n+  inline G1HeapRegion* at(uint index) const;\n@@ -177,1 +177,1 @@\n-  \/\/ Return the HeapRegion at the given index, null if the index\n+  \/\/ Return the G1HeapRegion at the given index, null if the index\n@@ -179,1 +179,1 @@\n-  inline HeapRegion* at_or_null(uint index) const;\n+  inline G1HeapRegion* at_or_null(uint index) const;\n@@ -186,1 +186,1 @@\n-  inline HeapRegion* next_region_in_humongous(HeapRegion* hr) const;\n+  inline G1HeapRegion* next_region_in_humongous(G1HeapRegion* hr) const;\n@@ -189,2 +189,2 @@\n-  \/\/ HeapRegion, otherwise return null.\n-  inline HeapRegion* addr_to_region(HeapWord* addr) const;\n+  \/\/ G1HeapRegion, otherwise return null.\n+  inline G1HeapRegion* addr_to_region(HeapWord* addr) const;\n@@ -193,1 +193,1 @@\n-  inline void insert_into_free_list(HeapRegion* hr);\n+  inline void insert_into_free_list(G1HeapRegion* hr);\n@@ -204,1 +204,1 @@\n-  HeapRegion* allocate_free_region(HeapRegionType type, uint requested_node_index);\n+  G1HeapRegion* allocate_free_region(HeapRegionType type, uint requested_node_index);\n@@ -207,1 +207,1 @@\n-  HeapRegion* allocate_humongous(uint num_regions);\n+  G1HeapRegion* allocate_humongous(uint num_regions);\n@@ -210,1 +210,1 @@\n-  HeapRegion* expand_and_allocate_humongous(uint num_regions);\n+  G1HeapRegion* expand_and_allocate_humongous(uint num_regions);\n@@ -212,1 +212,1 @@\n-  inline HeapRegion* allocate_free_regions_starting_at(uint first, uint num_regions);\n+  inline G1HeapRegion* allocate_free_regions_starting_at(uint first, uint num_regions);\n@@ -229,1 +229,1 @@\n-    return num_free_regions() * HeapRegion::GrainBytes;\n+    return num_free_regions() * G1HeapRegion::GrainBytes;\n@@ -250,1 +250,1 @@\n-  \/\/ sequence was expanded by. If a HeapRegion allocation fails, the resulting\n+  \/\/ sequence was expanded by. If a G1HeapRegion allocation fails, the resulting\n@@ -257,1 +257,1 @@\n-  HeapRegion* next_region_in_heap(const HeapRegion* r) const;\n+  G1HeapRegion* next_region_in_heap(const G1HeapRegion* r) const;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.hpp","additions":29,"deletions":29,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-inline HeapRegion* HeapRegionManager::addr_to_region(HeapWord* addr) const {\n+inline G1HeapRegion* HeapRegionManager::addr_to_region(HeapWord* addr) const {\n@@ -46,1 +46,1 @@\n-inline HeapRegion* HeapRegionManager::at(uint index) const {\n+inline G1HeapRegion* HeapRegionManager::at(uint index) const {\n@@ -48,1 +48,1 @@\n-  HeapRegion* hr = _regions.get_by_index(index);\n+  G1HeapRegion* hr = _regions.get_by_index(index);\n@@ -54,1 +54,1 @@\n-inline HeapRegion* HeapRegionManager::at_or_null(uint index) const {\n+inline G1HeapRegion* HeapRegionManager::at_or_null(uint index) const {\n@@ -58,2 +58,2 @@\n-  HeapRegion* hr = _regions.get_by_index(index);\n-  assert(hr != nullptr, \"All available regions must have a HeapRegion but index %u has not.\", index);\n+  G1HeapRegion* hr = _regions.get_by_index(index);\n+  assert(hr != nullptr, \"All available regions must have a G1HeapRegion but index %u has not.\", index);\n@@ -64,1 +64,1 @@\n-inline HeapRegion* HeapRegionManager::next_region_in_humongous(HeapRegion* hr) const {\n+inline G1HeapRegion* HeapRegionManager::next_region_in_humongous(G1HeapRegion* hr) const {\n@@ -76,1 +76,1 @@\n-inline void HeapRegionManager::insert_into_free_list(HeapRegion* hr) {\n+inline void HeapRegionManager::insert_into_free_list(G1HeapRegion* hr) {\n@@ -80,2 +80,2 @@\n-inline HeapRegion* HeapRegionManager::allocate_free_regions_starting_at(uint first, uint num_regions) {\n-  HeapRegion* start = at(first);\n+inline G1HeapRegion* HeapRegionManager::allocate_free_regions_starting_at(uint first, uint num_regions) {\n+  G1HeapRegion* start = at(first);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.inline.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-      HeapRegion* hr = iter.get_next();\n+      G1HeapRegion* hr = iter.get_next();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionPrinter.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,1 +37,1 @@\n-  static void print(const char* action, HeapRegion* hr) {\n+  static void print(const char* action, G1HeapRegion* hr) {\n@@ -42,1 +42,1 @@\n-  static void mark_reclaim(HeapRegion* hr) {\n+  static void mark_reclaim(G1HeapRegion* hr) {\n@@ -54,1 +54,1 @@\n-  static void alloc(HeapRegion* hr)                     { print(\"ALLOC\", hr); }\n+  static void alloc(G1HeapRegion* hr)                     { print(\"ALLOC\", hr); }\n@@ -56,1 +56,1 @@\n-  static void retire(HeapRegion* hr)                    { print(\"RETIRE\", hr); }\n+  static void retire(G1HeapRegion* hr)                    { print(\"RETIRE\", hr); }\n@@ -58,1 +58,1 @@\n-  static void reuse(HeapRegion* hr)                     { print(\"REUSE\", hr); }\n+  static void reuse(G1HeapRegion* hr)                     { print(\"REUSE\", hr); }\n@@ -60,1 +60,1 @@\n-  static void cset(HeapRegion* hr)                      { print(\"CSET\", hr); }\n+  static void cset(G1HeapRegion* hr)                      { print(\"CSET\", hr); }\n@@ -62,1 +62,1 @@\n-  static void evac_failure(HeapRegion* hr)              { print(\"EVAC-FAILURE\", hr); }\n+  static void evac_failure(G1HeapRegion* hr)              { print(\"EVAC-FAILURE\", hr); }\n@@ -66,1 +66,1 @@\n-  static void eager_reclaim(HeapRegion* hr)             { print(\"EAGER-RECLAIM\", hr); }\n+  static void eager_reclaim(G1HeapRegion* hr)             { print(\"EAGER-RECLAIM\", hr); }\n@@ -68,1 +68,1 @@\n-  static void evac_reclaim(HeapRegion* hr)              { print(\"EVAC-RECLAIM\", hr); }\n+  static void evac_reclaim(G1HeapRegion* hr)              { print(\"EVAC-RECLAIM\", hr); }\n@@ -70,1 +70,1 @@\n-  static void post_compaction(HeapRegion* hr)           { print(\"POST-COMPACTION\", hr); }\n+  static void post_compaction(G1HeapRegion* hr)           { print(\"POST-COMPACTION\", hr); }\n@@ -72,1 +72,1 @@\n-  static void commit(HeapRegion* hr)                    { print(\"COMMIT\", hr); }\n+  static void commit(G1HeapRegion* hr)                    { print(\"COMMIT\", hr); }\n@@ -74,1 +74,1 @@\n-  static void active(HeapRegion* hr)                    { print(\"ACTIVE\", hr); }\n+  static void active(G1HeapRegion* hr)                    { print(\"ACTIVE\", hr); }\n@@ -76,1 +76,1 @@\n-  static void inactive(HeapRegion* hr)                  { print(\"INACTIVE\", hr); }\n+  static void inactive(G1HeapRegion* hr)                  { print(\"INACTIVE\", hr); }\n@@ -78,1 +78,1 @@\n-  static void uncommit(HeapRegion* hr)                  { print(\"UNCOMMIT\", hr); }\n+  static void uncommit(G1HeapRegion* hr)                  { print(\"UNCOMMIT\", hr); }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionPrinter.hpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-HeapRegionRemSet::HeapRegionRemSet(HeapRegion* hr,\n+HeapRegionRemSet::HeapRegionRemSet(G1HeapRegion* hr,\n@@ -126,1 +126,1 @@\n-void HeapRegionRemSet::clean_code_roots(HeapRegion* hr) {\n+void HeapRegionRemSet::clean_code_roots(G1HeapRegion* hr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-  HeapRegion* _hr;\n+  G1HeapRegion* _hr;\n@@ -60,1 +60,1 @@\n-  HeapRegionRemSet(HeapRegion* hr, G1CardSetConfiguration* config);\n+  HeapRegionRemSet(G1HeapRegion* hr, G1CardSetConfiguration* config);\n@@ -158,1 +158,1 @@\n-  void clean_code_roots(HeapRegion* hr);\n+  void clean_code_roots(G1HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionRemSet.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-void HeapRegionSetBase::verify_region(HeapRegion* hr) {\n+void HeapRegionSetBase::verify_region(G1HeapRegion* hr) {\n@@ -102,1 +102,1 @@\n-  HeapRegion* curr = _head;\n+  G1HeapRegion* curr = _head;\n@@ -106,1 +106,1 @@\n-    HeapRegion* next = curr->next();\n+    G1HeapRegion* next = curr->next();\n@@ -137,1 +137,1 @@\n-    HeapRegion* hr = iter.get_next();\n+    G1HeapRegion* hr = iter.get_next();\n@@ -192,2 +192,2 @@\n-    HeapRegion* curr_to = _head;\n-    HeapRegion* curr_from = from_list->_head;\n+    G1HeapRegion* curr_to = _head;\n+    G1HeapRegion* curr_from = from_list->_head;\n@@ -206,1 +206,1 @@\n-        HeapRegion* next_from = curr_from->next();\n+        G1HeapRegion* next_from = curr_from->next();\n@@ -230,1 +230,1 @@\n-void FreeRegionList::verify_region_to_remove(HeapRegion* curr, HeapRegion* next) {\n+void FreeRegionList::verify_region_to_remove(G1HeapRegion* curr, G1HeapRegion* next) {\n@@ -238,1 +238,1 @@\n-  HeapRegion* prev = curr->prev();\n+  G1HeapRegion* prev = curr->prev();\n@@ -247,1 +247,1 @@\n-void FreeRegionList::remove_starting_at(HeapRegion* first, uint num_regions) {\n+void FreeRegionList::remove_starting_at(G1HeapRegion* first, uint num_regions) {\n@@ -257,1 +257,1 @@\n-  HeapRegion* const prev = first->prev();\n+  G1HeapRegion* const prev = first->prev();\n@@ -261,1 +261,1 @@\n-  HeapRegion* next = first->next();\n+  G1HeapRegion* next = first->next();\n@@ -263,1 +263,1 @@\n-  HeapRegion* curr = first;\n+  G1HeapRegion* curr = first;\n@@ -332,3 +332,3 @@\n-  HeapRegion* curr = _head;\n-  HeapRegion* prev1 = nullptr;\n-  HeapRegion* prev0 = nullptr;\n+  G1HeapRegion* curr = _head;\n+  G1HeapRegion* prev1 = nullptr;\n+  G1HeapRegion* prev0 = nullptr;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionSet.cpp","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-  \/\/ Returns true if the given HeapRegion is of the correct type for this HeapRegionSet.\n-  virtual bool is_correct_type(HeapRegion* hr) = 0;\n+  \/\/ Returns true if the given G1HeapRegion is of the correct type for this HeapRegionSet.\n+  virtual bool is_correct_type(G1HeapRegion* hr) = 0;\n@@ -82,1 +82,1 @@\n-  void verify_region(HeapRegion* hr) PRODUCT_RETURN;\n+  void verify_region(G1HeapRegion* hr) PRODUCT_RETURN;\n@@ -101,1 +101,1 @@\n-  inline void add(HeapRegion* hr);\n+  inline void add(G1HeapRegion* hr);\n@@ -105,1 +105,1 @@\n-  inline void remove(HeapRegion* hr);\n+  inline void remove(G1HeapRegion* hr);\n@@ -109,1 +109,1 @@\n-  void verify_next_region(HeapRegion* hr);\n+  void verify_next_region(G1HeapRegion* hr);\n@@ -166,2 +166,2 @@\n-  HeapRegion* _head;\n-  HeapRegion* _tail;\n+  G1HeapRegion* _head;\n+  G1HeapRegion* _tail;\n@@ -171,1 +171,1 @@\n-  HeapRegion* _last;\n+  G1HeapRegion* _last;\n@@ -177,2 +177,2 @@\n-  inline HeapRegion* remove_from_head_impl();\n-  inline HeapRegion* remove_from_tail_impl();\n+  inline G1HeapRegion* remove_from_head_impl();\n+  inline G1HeapRegion* remove_from_tail_impl();\n@@ -187,1 +187,1 @@\n-  void verify_region_to_remove(HeapRegion* curr, HeapRegion* next) NOT_DEBUG_RETURN;\n+  void verify_region_to_remove(G1HeapRegion* curr, G1HeapRegion* next) NOT_DEBUG_RETURN;\n@@ -199,1 +199,1 @@\n-  bool contains(HeapRegion* hr) const {\n+  bool contains(G1HeapRegion* hr) const {\n@@ -209,1 +209,1 @@\n-  inline void add_ordered(HeapRegion* hr);\n+  inline void add_ordered(G1HeapRegion* hr);\n@@ -211,1 +211,1 @@\n-  inline void add_to_tail(HeapRegion* region_to_add);\n+  inline void add_to_tail(G1HeapRegion* region_to_add);\n@@ -214,1 +214,1 @@\n-  HeapRegion* remove_region(bool from_head);\n+  G1HeapRegion* remove_region(bool from_head);\n@@ -216,1 +216,1 @@\n-  HeapRegion* remove_region_with_node_index(bool from_head,\n+  G1HeapRegion* remove_region_with_node_index(bool from_head,\n@@ -234,1 +234,1 @@\n-  void remove_starting_at(HeapRegion* first, uint num_regions);\n+  void remove_starting_at(G1HeapRegion* first, uint num_regions);\n@@ -248,1 +248,1 @@\n-  HeapRegion*     _curr;\n+  G1HeapRegion*   _curr;\n@@ -255,1 +255,1 @@\n-  HeapRegion* get_next() {\n+  G1HeapRegion* get_next() {\n@@ -262,1 +262,1 @@\n-    HeapRegion* hr = _curr;\n+    G1HeapRegion* hr = _curr;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionSet.hpp","additions":21,"deletions":21,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-inline void HeapRegionSetBase::add(HeapRegion* hr) {\n+inline void HeapRegionSetBase::add(G1HeapRegion* hr) {\n@@ -43,1 +43,1 @@\n-inline void HeapRegionSetBase::remove(HeapRegion* hr) {\n+inline void HeapRegionSetBase::remove(G1HeapRegion* hr) {\n@@ -54,1 +54,1 @@\n-inline void FreeRegionList::add_to_tail(HeapRegion* region_to_add) {\n+inline void FreeRegionList::add_to_tail(G1HeapRegion* region_to_add) {\n@@ -74,1 +74,1 @@\n-inline void FreeRegionList::add_ordered(HeapRegion* hr) {\n+inline void FreeRegionList::add_ordered(G1HeapRegion* hr) {\n@@ -83,1 +83,1 @@\n-    HeapRegion* curr;\n+    G1HeapRegion* curr;\n@@ -123,2 +123,2 @@\n-inline HeapRegion* FreeRegionList::remove_from_head_impl() {\n-  HeapRegion* result = _head;\n+inline G1HeapRegion* FreeRegionList::remove_from_head_impl() {\n+  G1HeapRegion* result = _head;\n@@ -135,2 +135,2 @@\n-inline HeapRegion* FreeRegionList::remove_from_tail_impl() {\n-  HeapRegion* result = _tail;\n+inline G1HeapRegion* FreeRegionList::remove_from_tail_impl() {\n+  G1HeapRegion* result = _tail;\n@@ -148,1 +148,1 @@\n-inline HeapRegion* FreeRegionList::remove_region(bool from_head) {\n+inline G1HeapRegion* FreeRegionList::remove_region(bool from_head) {\n@@ -157,1 +157,1 @@\n-  HeapRegion* hr;\n+  G1HeapRegion* hr;\n@@ -177,1 +177,1 @@\n-inline HeapRegion* FreeRegionList::remove_region_with_node_index(bool from_head,\n+inline G1HeapRegion* FreeRegionList::remove_region_with_node_index(bool from_head,\n@@ -182,1 +182,1 @@\n-  HeapRegion* cur;\n+  G1HeapRegion* cur;\n@@ -210,2 +210,2 @@\n-  HeapRegion* prev = cur->prev();\n-  HeapRegion* next = cur->next();\n+  G1HeapRegion* prev = cur->prev();\n+  G1HeapRegion* next = cur->next();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionSet.inline.hpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-    size_t min_expand_bytes = HeapRegion::GrainBytes;\n+    size_t min_expand_bytes = G1HeapRegion::GrainBytes;\n@@ -227,1 +227,1 @@\n-                               _g1h->eden_regions_count() * HeapRegion::GrainBytes;\n+                               _g1h->eden_regions_count() * G1HeapRegion::GrainBytes;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -85,1 +85,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n@@ -160,1 +160,1 @@\n-                      usage._survivor_used \/ K, ((after._survivor_length * HeapRegion::GrainBytes) - usage._survivor_used) \/ K);\n+                      usage._survivor_used \/ K, ((after._survivor_length * G1HeapRegion::GrainBytes) - usage._survivor_used) \/ K);\n@@ -165,1 +165,1 @@\n-                      usage._old_used \/ K, ((after._old_length * HeapRegion::GrainBytes) - usage._old_used) \/ K);\n+                      usage._old_used \/ K, ((after._old_length * G1HeapRegion::GrainBytes) - usage._old_used) \/ K);\n@@ -170,1 +170,1 @@\n-                      usage._humongous_used \/ K, ((after._humongous_length * HeapRegion::GrainBytes) - usage._humongous_used) \/ K);\n+                      usage._humongous_used \/ K, ((after._humongous_length * G1HeapRegion::GrainBytes) - usage._humongous_used) \/ K);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapTransition.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -113,1 +113,1 @@\n-      HeapRegion* hr = _g1h->heap_region_containing(obj);\n+      G1HeapRegion* hr = _g1h->heap_region_containing(obj);\n@@ -201,1 +201,1 @@\n-  HeapRegion *_hr;\n+  G1HeapRegion* _hr;\n@@ -205,1 +205,1 @@\n-  VerifyObjsInRegionClosure(HeapRegion *hr, VerifyOption vo)\n+  VerifyObjsInRegionClosure(G1HeapRegion* hr, VerifyOption vo)\n@@ -248,1 +248,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n@@ -397,1 +397,1 @@\n-  bool do_heap_region(HeapRegion* hr) {\n+  bool do_heap_region(G1HeapRegion* hr) {\n@@ -455,1 +455,1 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n+  virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -544,1 +544,1 @@\n-    virtual bool do_heap_region(HeapRegion* r) {\n+    virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -565,1 +565,1 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n+  virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -582,1 +582,1 @@\n-void G1HeapVerifier::verify_not_dirty_region(HeapRegion* hr) {\n+void G1HeapVerifier::verify_not_dirty_region(G1HeapRegion* hr) {\n@@ -589,1 +589,1 @@\n-void G1HeapVerifier::verify_dirty_region(HeapRegion* hr) {\n+void G1HeapVerifier::verify_dirty_region(G1HeapRegion* hr) {\n@@ -611,1 +611,1 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n+  virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -629,1 +629,1 @@\n-  virtual bool do_heap_region(HeapRegion* hr) {\n+  virtual bool do_heap_region(G1HeapRegion* hr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.cpp","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -83,2 +83,2 @@\n-  void verify_not_dirty_region(HeapRegion* hr) PRODUCT_RETURN;\n-  void verify_dirty_region(HeapRegion* hr) PRODUCT_RETURN;\n+  void verify_not_dirty_region(G1HeapRegion* hr) PRODUCT_RETURN;\n+  void verify_dirty_region(G1HeapRegion* hr) PRODUCT_RETURN;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapVerifier.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -256,2 +256,2 @@\n-  _survivor_space_committed = survivor_list_length * HeapRegion::GrainBytes;\n-  _old_gen_committed = HeapRegion::align_up_to_region_byte_size(_old_gen_used);\n+  _survivor_space_committed = survivor_list_length * G1HeapRegion::GrainBytes;\n+  _old_gen_committed = G1HeapRegion::align_up_to_region_byte_size(_old_gen_used);\n@@ -269,1 +269,1 @@\n-  _eden_space_committed = (size_t) eden_list_max_length * HeapRegion::GrainBytes;\n+  _eden_space_committed = (size_t) eden_list_max_length * G1HeapRegion::GrainBytes;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonitoringSupport.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-    HeapRegion* hr = _g1h->heap_region_containing(o);\n+    G1HeapRegion* hr = _g1h->heap_region_containing(o);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NMethodClosure.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -176,1 +176,1 @@\n-uint G1NUMA::index_for_region(HeapRegion* hr) const {\n+uint G1NUMA::index_for_region(G1HeapRegion* hr) const {\n@@ -197,3 +197,3 @@\n-\/\/      * Page #:       |-0--||-1--||-2--||-3--||-4--||-5--||-6--||-7--||-8--||-9--||-10-||-11-||-12-||-13-||-14-||-15-|\n-\/\/      * HeapRegion #: |----#0----||----#1----||----#2----||----#3----||----#4----||----#5----||----#6----||----#7----|\n-\/\/      * NUMA node #:  |----#0----||----#1----||----#2----||----#3----||----#0----||----#1----||----#2----||----#3----|\n+\/\/      * Page #:         |-0--||-1--||-2--||-3--||-4--||-5--||-6--||-7--||-8--||-9--||-10-||-11-||-12-||-13-||-14-||-15-|\n+\/\/      * G1HeapRegion #: |----#0----||----#1----||----#2----||----#3----||----#4----||----#5----||----#6----||----#7----|\n+\/\/      * NUMA node #:    |----#0----||----#1----||----#2----||----#3----||----#0----||----#1----||----#2----||----#3----|\n@@ -203,3 +203,3 @@\n-\/\/      * Page #:       |-----0----||-----1----||-----2----||-----3----||-----4----||-----5----||-----6----||-----7----|\n-\/\/      * HeapRegion #: |-#0-||-#1-||-#2-||-#3-||-#4-||-#5-||-#6-||-#7-||-#8-||-#9-||#10-||#11-||#12-||#13-||#14-||#15-|\n-\/\/      * NUMA node #:  |----#0----||----#1----||----#2----||----#3----||----#0----||----#1----||----#2----||----#3----|\n+\/\/      * Page #:         |-----0----||-----1----||-----2----||-----3----||-----4----||-----5----||-----6----||-----7----|\n+\/\/      * G1HeapRegion #: |-#0-||-#1-||-#2-||-#3-||-#4-||-#5-||-#6-||-#7-||-#8-||-#9-||#10-||#11-||#12-||#13-||#14-||#15-|\n+\/\/      * NUMA node #:    |----#0----||----#1----||----#2----||----#3----||----#0----||----#1----||----#2----||----#3----|\n@@ -291,1 +291,1 @@\n-bool G1NodeIndexCheckClosure::do_heap_region(HeapRegion* hr) {\n+bool G1NodeIndexCheckClosure::do_heap_region(G1HeapRegion* hr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMA.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-  \/\/ HeapRegion size\n+  \/\/ G1HeapRegion size\n@@ -97,1 +97,1 @@\n-  \/\/ Returns the preferred index for the given HeapRegion index.\n+  \/\/ Returns the preferred index for the given G1HeapRegion index.\n@@ -99,1 +99,1 @@\n-  \/\/ with the given HeapRegion index.\n+  \/\/ with the given G1HeapRegion index.\n@@ -110,1 +110,1 @@\n-  uint index_for_region(HeapRegion* hr) const;\n+  uint index_for_region(G1HeapRegion* hr) const;\n@@ -146,1 +146,1 @@\n-  bool do_heap_region(HeapRegion* hr);\n+  bool do_heap_region(G1HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1NUMA.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-class HeapRegion;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -91,1 +91,1 @@\n-  } else if (!HeapRegion::is_in_same_region(p, obj)) {\n+  } else if (!G1HeapRegion::is_in_same_region(p, obj)) {\n@@ -138,1 +138,1 @@\n-  if (HeapRegion::is_in_same_region(p, obj)) {\n+  if (G1HeapRegion::is_in_same_region(p, obj)) {\n@@ -177,1 +177,1 @@\n-  } else if (!HeapRegion::is_in_same_region(p, obj)) {\n+  } else if (!G1HeapRegion::is_in_same_region(p, obj)) {\n@@ -264,1 +264,1 @@\n-  if (HeapRegion::is_in_same_region(p, obj)) {\n+  if (G1HeapRegion::is_in_same_region(p, obj)) {\n@@ -268,1 +268,1 @@\n-  HeapRegion* to = _g1h->heap_region_containing(obj);\n+  G1HeapRegion* to = _g1h->heap_region_containing(obj);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -280,1 +280,1 @@\n-  \/\/ However, HeapRegion::is_survivor() is too expensive here.\n+  \/\/ However, G1HeapRegion::is_survivor() is too expensive here.\n@@ -447,1 +447,1 @@\n-  HeapRegion* region = _g1h->heap_region_containing(obj_start);\n+  G1HeapRegion* region = _g1h->heap_region_containing(obj_start);\n@@ -472,1 +472,1 @@\n-  HeapRegion* const from_region = _g1h->heap_region_containing(old);\n+  G1HeapRegion* const from_region = _g1h->heap_region_containing(old);\n@@ -555,1 +555,1 @@\n-    \/\/ However, HeapRegion::is_survivor() is too expensive here.\n+    \/\/ However, G1HeapRegion::is_survivor() is too expensive here.\n@@ -626,1 +626,1 @@\n-void G1ParScanThreadStateSet::record_unused_optional_region(HeapRegion* hr) {\n+void G1ParScanThreadStateSet::record_unused_optional_region(G1HeapRegion* hr) {\n@@ -643,1 +643,1 @@\n-    HeapRegion* r = _g1h->heap_region_containing(old);\n+    G1HeapRegion* r = _g1h->heap_region_containing(old);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -241,1 +241,1 @@\n-  inline G1OopStarChunkedList* oops_into_optional_region(const HeapRegion* hr);\n+  inline G1OopStarChunkedList* oops_into_optional_region(const G1HeapRegion* hr);\n@@ -268,1 +268,1 @@\n-  void record_unused_optional_region(HeapRegion* hr);\n+  void record_unused_optional_region(G1HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-G1OopStarChunkedList* G1ParScanThreadState::oops_into_optional_region(const HeapRegion* hr) {\n+G1OopStarChunkedList* G1ParScanThreadState::oops_into_optional_region(const G1HeapRegion* hr) {\n@@ -112,1 +112,1 @@\n-  assert(!HeapRegion::is_in_same_region(p, obj), \"Should have filtered out cross-region references already.\");\n+  assert(!G1HeapRegion::is_in_same_region(p, obj), \"Should have filtered out cross-region references already.\");\n@@ -123,1 +123,1 @@\n-  if (HeapRegion::is_in_same_region(p, obj)) {\n+  if (G1HeapRegion::is_in_same_region(p, obj)) {\n@@ -147,1 +147,1 @@\n-  assert(!HeapRegion::is_in_same_region(p, o), \"Should have filtered out cross-region references already.\");\n+  assert(!G1HeapRegion::is_in_same_region(p, o), \"Should have filtered out cross-region references already.\");\n@@ -154,1 +154,1 @@\n-  HeapRegion* const hr_obj = _g1h->heap_region_containing(o);\n+  G1HeapRegion* const hr_obj = _g1h->heap_region_containing(o);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.inline.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-    const size_t free_bytes = (_base_free_regions - young_length) * HeapRegion::GrainBytes;\n+    const size_t free_bytes = (_base_free_regions - young_length) * G1HeapRegion::GrainBytes;\n@@ -176,1 +176,1 @@\n-  _ihop_control->update_target_occupancy(new_number_of_regions * HeapRegion::GrainBytes);\n+  _ihop_control->update_target_occupancy(new_number_of_regions * G1HeapRegion::GrainBytes);\n@@ -510,1 +510,1 @@\n-  const GrowableArray<HeapRegion*>* survivor_regions = _g1h->survivor()->regions();\n+  const GrowableArray<G1HeapRegion*>* survivor_regions = _g1h->survivor()->regions();\n@@ -512,1 +512,1 @@\n-  for (GrowableArrayIterator<HeapRegion*> it = survivor_regions->begin();\n+  for (GrowableArrayIterator<G1HeapRegion*> it = survivor_regions->begin();\n@@ -532,1 +532,1 @@\n-    HeapRegion* r = ci->_r;\n+    G1HeapRegion* r = ci->_r;\n@@ -602,1 +602,1 @@\n-  _old_gen_alloc_tracker.reset_after_gc(_g1h->humongous_regions_count() * HeapRegion::GrainBytes);\n+  _old_gen_alloc_tracker.reset_after_gc(_g1h->humongous_regions_count() * G1HeapRegion::GrainBytes);\n@@ -666,1 +666,1 @@\n-  HeapRegion* r = _g1h->region_at(index);\n+  G1HeapRegion* r = _g1h->region_at(index);\n@@ -671,1 +671,1 @@\n-  size_t threshold = G1RetainRegionLiveThresholdPercent * HeapRegion::GrainBytes \/ 100;\n+  size_t threshold = G1RetainRegionLiveThresholdPercent * G1HeapRegion::GrainBytes \/ 100;\n@@ -957,1 +957,1 @@\n-    _old_gen_alloc_tracker.reset_after_gc(_g1h->humongous_regions_count() * HeapRegion::GrainBytes);\n+    _old_gen_alloc_tracker.reset_after_gc(_g1h->humongous_regions_count() * G1HeapRegion::GrainBytes);\n@@ -1043,1 +1043,1 @@\n-    size_t young_gen_size = young_list_desired_length() * HeapRegion::GrainBytes;\n+    size_t young_gen_size = young_list_desired_length() * G1HeapRegion::GrainBytes;\n@@ -1096,1 +1096,1 @@\n-size_t G1Policy::predict_bytes_to_copy(HeapRegion* hr) const {\n+size_t G1Policy::predict_bytes_to_copy(G1HeapRegion* hr) const {\n@@ -1114,1 +1114,1 @@\n-  size_t const expected_bytes = _eden_surv_rate_group->accum_surv_rate_pred(count - 1) * HeapRegion::GrainBytes;\n+  size_t const expected_bytes = _eden_surv_rate_group->accum_surv_rate_pred(count - 1) * G1HeapRegion::GrainBytes;\n@@ -1121,1 +1121,1 @@\n-double G1Policy::predict_region_copy_time_ms(HeapRegion* hr, bool for_young_only_phase) const {\n+double G1Policy::predict_region_copy_time_ms(G1HeapRegion* hr, bool for_young_only_phase) const {\n@@ -1126,1 +1126,1 @@\n-double G1Policy::predict_region_merge_scan_time(HeapRegion* hr, bool for_young_only_phase) const {\n+double G1Policy::predict_region_merge_scan_time(G1HeapRegion* hr, bool for_young_only_phase) const {\n@@ -1135,1 +1135,1 @@\n-double G1Policy::predict_region_code_root_scan_time(HeapRegion* hr, bool for_young_only_phase) const {\n+double G1Policy::predict_region_code_root_scan_time(G1HeapRegion* hr, bool for_young_only_phase) const {\n@@ -1142,1 +1142,1 @@\n-double G1Policy::predict_region_non_copy_time_ms(HeapRegion* hr,\n+double G1Policy::predict_region_non_copy_time_ms(G1HeapRegion* hr,\n@@ -1157,1 +1157,1 @@\n-double G1Policy::predict_region_total_time_ms(HeapRegion* hr, bool for_young_only_phase) const {\n+double G1Policy::predict_region_total_time_ms(G1HeapRegion* hr, bool for_young_only_phase) const {\n@@ -1178,1 +1178,1 @@\n-  size_t bytes_used = full * HeapRegion::GrainBytes;\n+  size_t bytes_used = full * G1HeapRegion::GrainBytes;\n@@ -1183,1 +1183,1 @@\n-  size_t const survivor_capacity = HeapRegion::GrainWords * max_regions;\n+  size_t const survivor_capacity = G1HeapRegion::GrainWords * max_regions;\n@@ -1340,1 +1340,1 @@\n-  for (HeapRegion* r : *candidates()) {\n+  for (G1HeapRegion* r : *candidates()) {\n@@ -1505,1 +1505,1 @@\n-    HeapRegion* hr = (*iter)->_r;\n+    G1HeapRegion* hr = (*iter)->_r;\n@@ -1600,1 +1600,1 @@\n-    HeapRegion* r = ci->_r;\n+    G1HeapRegion* r = ci->_r;\n@@ -1658,1 +1658,1 @@\n-  for (HeapRegion* r : *optional_regions) {\n+  for (G1HeapRegion* r : *optional_regions) {\n@@ -1681,1 +1681,1 @@\n-  for (GrowableArrayIterator<HeapRegion*> it = survivors->regions()->begin();\n+  for (GrowableArrayIterator<G1HeapRegion*> it = survivors->regions()->begin();\n@@ -1684,1 +1684,1 @@\n-    HeapRegion* curr = *it;\n+    G1HeapRegion* curr = *it;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.cpp","additions":25,"deletions":25,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -47,1 +47,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -125,1 +125,1 @@\n-  void set_region_eden(HeapRegion* hr) {\n+  void set_region_eden(G1HeapRegion* hr) {\n@@ -130,1 +130,1 @@\n-  void set_region_survivor(HeapRegion* hr) {\n+  void set_region_survivor(G1HeapRegion* hr) {\n@@ -148,1 +148,1 @@\n-  double predict_region_copy_time_ms(HeapRegion* hr, bool for_young_only_phase) const;\n+  double predict_region_copy_time_ms(G1HeapRegion* hr, bool for_young_only_phase) const;\n@@ -151,1 +151,1 @@\n-  double predict_region_merge_scan_time(HeapRegion* hr, bool for_young_only_phase) const;\n+  double predict_region_merge_scan_time(G1HeapRegion* hr, bool for_young_only_phase) const;\n@@ -153,1 +153,1 @@\n-  double predict_region_code_root_scan_time(HeapRegion* hr, bool for_young_only_phase) const;\n+  double predict_region_code_root_scan_time(G1HeapRegion* hr, bool for_young_only_phase) const;\n@@ -155,1 +155,1 @@\n-  double predict_region_non_copy_time_ms(HeapRegion* hr, bool for_young_only_phase) const;\n+  double predict_region_non_copy_time_ms(G1HeapRegion* hr, bool for_young_only_phase) const;\n@@ -166,1 +166,1 @@\n-  double predict_region_total_time_ms(HeapRegion* hr, bool for_young_only_phase) const;\n+  double predict_region_total_time_ms(G1HeapRegion* hr, bool for_young_only_phase) const;\n@@ -248,1 +248,1 @@\n-  size_t predict_bytes_to_copy(HeapRegion* hr) const;\n+  size_t predict_bytes_to_copy(G1HeapRegion* hr) const;\n@@ -403,1 +403,1 @@\n-  bool should_retain_evac_failed_region(HeapRegion* r) const {\n+  bool should_retain_evac_failed_region(G1HeapRegion* r) const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1Policy.hpp","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-uint G1RegionsOnNodes::add(HeapRegion* hr) {\n+uint G1RegionsOnNodes::add(G1HeapRegion* hr) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionsOnNodes.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -44,1 +44,1 @@\n-  uint add(HeapRegion* hr);\n+  uint add(G1HeapRegion* hr);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RegionsOnNodes.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -95,1 +95,1 @@\n-  \/\/ to (>=) HeapRegion::CardsPerRegion (completely scanned).\n+  \/\/ to (>=) G1HeapRegion::CardsPerRegion (completely scanned).\n@@ -226,1 +226,1 @@\n-      double num_cards = num_regions << HeapRegion::LogCardsPerRegion;\n+      double num_cards = num_regions << G1HeapRegion::LogCardsPerRegion;\n@@ -238,1 +238,1 @@\n-      const uint num_regions_per_worker = num_cards_per_worker \/ (uint)HeapRegion::CardsPerRegion;\n+      const uint num_regions_per_worker = num_cards_per_worker \/ (uint)G1HeapRegion::CardsPerRegion;\n@@ -245,1 +245,1 @@\n-          HeapRegion* r = _g1h->region_at(_regions->at(i));\n+          G1HeapRegion* r = _g1h->region_at(_regions->at(i));\n@@ -279,1 +279,1 @@\n-    _scan_chunks_shift = (uint8_t)log2i(HeapRegion::CardsPerRegion \/ _scan_chunks_per_region);\n+    _scan_chunks_shift = (uint8_t)log2i(G1HeapRegion::CardsPerRegion \/ _scan_chunks_per_region);\n@@ -320,1 +320,1 @@\n-    HeapRegion* hr = G1CollectedHeap::heap()->region_at_or_null(region_idx);\n+    G1HeapRegion* hr = G1CollectedHeap::heap()->region_at_or_null(region_idx);\n@@ -331,1 +331,1 @@\n-    return result * (HeapRegion::CardsPerRegion \/ _scan_chunks_per_region);\n+    return result * (G1HeapRegion::CardsPerRegion \/ _scan_chunks_per_region);\n@@ -335,1 +335,1 @@\n-    return _next_dirty_regions->size() * HeapRegion::CardsPerRegion;\n+    return _next_dirty_regions->size() * G1HeapRegion::CardsPerRegion;\n@@ -395,1 +395,1 @@\n-    return _card_table_scan_state[region] < HeapRegion::CardsPerRegion;\n+    return _card_table_scan_state[region] < G1HeapRegion::CardsPerRegion;\n@@ -405,1 +405,1 @@\n-   HeapRegion* hr = G1CollectedHeap::heap()->region_at(region);\n+   G1HeapRegion* hr = G1CollectedHeap::heap()->region_at(region);\n@@ -415,1 +415,1 @@\n-    HeapRegion* hr = G1CollectedHeap::heap()->region_at(region);\n+    G1HeapRegion* hr = G1CollectedHeap::heap()->region_at(region);\n@@ -464,1 +464,1 @@\n-    guarantee(size() <= HeapRegion::CardsPerRegion, \"Should not claim more space than possible.\");\n+    guarantee(size() <= G1HeapRegion::CardsPerRegion, \"Should not claim more space than possible.\");\n@@ -470,1 +470,1 @@\n-      if (_cur_claim >= HeapRegion::CardsPerRegion) {\n+      if (_cur_claim >= G1HeapRegion::CardsPerRegion) {\n@@ -512,1 +512,1 @@\n-    HeapRegion* const card_region = _g1h->region_at(region_idx_for_card);\n+    G1HeapRegion* const card_region = _g1h->region_at(region_idx_for_card);\n@@ -642,1 +642,1 @@\n-  void scan_heap_roots(HeapRegion* r) {\n+  void scan_heap_roots(G1HeapRegion* r) {\n@@ -658,1 +658,1 @@\n-      size_t const region_card_base_idx = ((size_t)region_idx << HeapRegion::LogCardsPerRegion) + claim.value();\n+      size_t const region_card_base_idx = ((size_t)region_idx << G1HeapRegion::LogCardsPerRegion) + claim.value();\n@@ -693,1 +693,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n@@ -779,1 +779,1 @@\n-  void scan_opt_rem_set_roots(HeapRegion* r) {\n+  void scan_opt_rem_set_roots(G1HeapRegion* r) {\n@@ -808,1 +808,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n@@ -883,1 +883,1 @@\n-void G1RemSet::prepare_region_for_scan(HeapRegion* r) {\n+void G1RemSet::prepare_region_for_scan(G1HeapRegion* r) {\n@@ -1047,1 +1047,1 @@\n-        _region_base_idx = (size_t)region_idx << HeapRegion::LogCardsPerRegion;\n+        _region_base_idx = (size_t)region_idx << G1HeapRegion::LogCardsPerRegion;\n@@ -1074,1 +1074,1 @@\n-    void merge_card_set_for_region(HeapRegion* r) {\n+    void merge_card_set_for_region(G1HeapRegion* r) {\n@@ -1083,1 +1083,1 @@\n-    virtual bool do_heap_region(HeapRegion* r) {\n+    virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -1104,1 +1104,1 @@\n-    void assert_bitmap_clear(HeapRegion* hr, const G1CMBitMap* bitmap) {\n+    void assert_bitmap_clear(G1HeapRegion* hr, const G1CMBitMap* bitmap) {\n@@ -1109,1 +1109,1 @@\n-    bool should_clear_region(HeapRegion* hr) const {\n+    bool should_clear_region(G1HeapRegion* hr) const {\n@@ -1129,1 +1129,1 @@\n-    bool do_heap_region(HeapRegion* hr) {\n+    bool do_heap_region(G1HeapRegion* hr) {\n@@ -1155,1 +1155,1 @@\n-    bool do_heap_region(HeapRegion* hr) {\n+    bool do_heap_region(G1HeapRegion* hr) {\n@@ -1176,1 +1176,1 @@\n-      HeapRegion* r = g1h->region_at(region_index);\n+      G1HeapRegion* r = g1h->region_at(region_index);\n@@ -1416,1 +1416,1 @@\n-      (g1h->num_regions() - (g1h->num_free_regions() - g1h->collection_set()->cur_length())) * HeapRegion::CardsPerRegion;\n+      (g1h->num_regions() - (g1h->num_free_regions() - g1h->collection_set()->cur_length())) * G1HeapRegion::CardsPerRegion;\n@@ -1499,1 +1499,1 @@\n-  HeapRegion* r = _g1h->heap_region_containing_or_null(start);\n+  G1HeapRegion* r = _g1h->heap_region_containing_or_null(start);\n@@ -1573,1 +1573,1 @@\n-  HeapRegion* r = _g1h->heap_region_containing(start);\n+  G1HeapRegion* r = _g1h->heap_region_containing(start);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.cpp","additions":31,"deletions":31,"binary":false,"changes":62,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-  void prepare_region_for_scan(HeapRegion* region);\n+  void prepare_region_for_scan(G1HeapRegion* region);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSet.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -193,1 +193,1 @@\n-  HeapRegion* _max_rs_mem_sz_region;\n+  G1HeapRegion* _max_rs_mem_sz_region;\n@@ -200,1 +200,1 @@\n-  HeapRegion* max_rs_mem_sz_region() const  { return _max_rs_mem_sz_region; }\n+  G1HeapRegion* max_rs_mem_sz_region() const  { return _max_rs_mem_sz_region; }\n@@ -203,1 +203,1 @@\n-  HeapRegion* _max_code_root_mem_sz_region;\n+  G1HeapRegion* _max_code_root_mem_sz_region;\n@@ -209,1 +209,1 @@\n-  HeapRegion* max_code_root_mem_sz_region() const { return _max_code_root_mem_sz_region; }\n+  G1HeapRegion* max_code_root_mem_sz_region() const { return _max_code_root_mem_sz_region; }\n@@ -218,1 +218,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetSummary.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-bool G1RemSetTrackingPolicy::needs_scan_for_rebuild(HeapRegion* r) const {\n+bool G1RemSetTrackingPolicy::needs_scan_for_rebuild(G1HeapRegion* r) const {\n@@ -41,1 +41,1 @@\n-void G1RemSetTrackingPolicy::update_at_allocate(HeapRegion* r) {\n+void G1RemSetTrackingPolicy::update_at_allocate(G1HeapRegion* r) {\n@@ -54,1 +54,1 @@\n-void G1RemSetTrackingPolicy::update_at_free(HeapRegion* r) {\n+void G1RemSetTrackingPolicy::update_at_free(G1HeapRegion* r) {\n@@ -58,1 +58,1 @@\n-bool G1RemSetTrackingPolicy::update_humongous_before_rebuild(HeapRegion* r) {\n+bool G1RemSetTrackingPolicy::update_humongous_before_rebuild(G1HeapRegion* r) {\n@@ -69,1 +69,1 @@\n-    auto on_humongous_region = [] (HeapRegion* r) {\n+    auto on_humongous_region = [] (G1HeapRegion* r) {\n@@ -79,1 +79,1 @@\n-bool G1RemSetTrackingPolicy::update_old_before_rebuild(HeapRegion* r) {\n+bool G1RemSetTrackingPolicy::update_old_before_rebuild(G1HeapRegion* r) {\n@@ -96,1 +96,1 @@\n-void G1RemSetTrackingPolicy::update_after_rebuild(HeapRegion* r) {\n+void G1RemSetTrackingPolicy::update_after_rebuild(G1HeapRegion* r) {\n@@ -110,1 +110,1 @@\n-                                         [&] (HeapRegion* r) {\n+                                         [&] (G1HeapRegion* r) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetTrackingPolicy.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  bool needs_scan_for_rebuild(HeapRegion* r) const;\n+  bool needs_scan_for_rebuild(G1HeapRegion* r) const;\n@@ -43,1 +43,1 @@\n-  void update_at_allocate(HeapRegion* r);\n+  void update_at_allocate(G1HeapRegion* r);\n@@ -46,1 +46,1 @@\n-  bool update_humongous_before_rebuild(HeapRegion* r);\n+  bool update_humongous_before_rebuild(G1HeapRegion* r);\n@@ -49,1 +49,1 @@\n-  bool update_old_before_rebuild(HeapRegion* r);\n+  bool update_old_before_rebuild(G1HeapRegion* r);\n@@ -52,1 +52,1 @@\n-  void update_after_rebuild(HeapRegion* r);\n+  void update_after_rebuild(G1HeapRegion* r);\n@@ -54,1 +54,1 @@\n-  void update_at_free(HeapRegion* r);\n+  void update_at_free(G1HeapRegion* r);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RemSetTrackingPolicy.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  double surv_rate = (double)surv_words \/ HeapRegion::GrainWords;\n+  double surv_rate = (double)surv_words \/ G1HeapRegion::GrainWords;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvRateGroup.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n-  _regions(new (mtGC) GrowableArray<HeapRegion*>(8, mtGC)),\n+  _regions(new (mtGC) GrowableArray<G1HeapRegion*>(8, mtGC)),\n@@ -36,1 +36,1 @@\n-uint G1SurvivorRegions::add(HeapRegion* hr) {\n+uint G1SurvivorRegions::add(G1HeapRegion* hr) {\n@@ -51,1 +51,1 @@\n-  for (GrowableArrayIterator<HeapRegion*> it = _regions->begin();\n+  for (GrowableArrayIterator<G1HeapRegion*> it = _regions->begin();\n@@ -54,1 +54,1 @@\n-    HeapRegion* hr = *it;\n+    G1HeapRegion* hr = *it;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvivorRegions.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-class HeapRegion;\n+class G1HeapRegion;\n@@ -37,1 +37,1 @@\n-  GrowableArray<HeapRegion*>* _regions;\n+  GrowableArray<G1HeapRegion*>* _regions;\n@@ -44,1 +44,1 @@\n-  uint add(HeapRegion* hr);\n+  uint add(G1HeapRegion* hr);\n@@ -53,1 +53,1 @@\n-  const GrowableArray<HeapRegion*>* regions() const {\n+  const GrowableArray<G1HeapRegion*>* regions() const {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1SurvivorRegions.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -86,2 +86,2 @@\n-                      byte_size_in_proper_unit(regions * HeapRegion::GrainBytes),\n-                      proper_unit_for_byte_size(regions * HeapRegion::GrainBytes),\n+                      byte_size_in_proper_unit(regions * G1HeapRegion::GrainBytes),\n+                      proper_unit_for_byte_size(regions * G1HeapRegion::GrainBytes),\n@@ -94,2 +94,2 @@\n-                      byte_size_in_proper_unit(_summary_region_count * HeapRegion::GrainBytes),\n-                      proper_unit_for_byte_size(_summary_region_count * HeapRegion::GrainBytes),\n+                      byte_size_in_proper_unit(_summary_region_count * G1HeapRegion::GrainBytes),\n+                      proper_unit_for_byte_size(_summary_region_count * G1HeapRegion::GrainBytes),\n","filename":"src\/hotspot\/share\/gc\/g1\/g1UncommitRegionTask.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -264,1 +264,1 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n+  virtual bool do_heap_region(G1HeapRegion* r) {\n@@ -297,1 +297,1 @@\n-    void sample_card_set_size(HeapRegion* hr) {\n+    void sample_card_set_size(G1HeapRegion* hr) {\n@@ -306,1 +306,1 @@\n-    bool humongous_region_is_candidate(HeapRegion* region) const {\n+    bool humongous_region_is_candidate(G1HeapRegion* region) const {\n@@ -378,1 +378,1 @@\n-    virtual bool do_heap_region(HeapRegion* hr) {\n+    virtual bool do_heap_region(G1HeapRegion* hr) {\n@@ -971,1 +971,1 @@\n-  for (HeapRegion* r : *candidates) {\n+  for (G1HeapRegion* r : *candidates) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -42,1 +42,1 @@\n-  bool do_heap_region(HeapRegion* r) override {\n+  bool do_heap_region(G1HeapRegion* r) override {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCAllocationFailureInjector.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -110,1 +110,1 @@\n-    for (HeapRegion* r : *candidates) {\n+    for (G1HeapRegion* r : *candidates) {\n@@ -179,1 +179,1 @@\n-  static size_t zap_dead_objects(HeapRegion* hr, HeapWord* start, HeapWord* end) {\n+  static size_t zap_dead_objects(G1HeapRegion* hr, HeapWord* start, HeapWord* end) {\n@@ -189,1 +189,1 @@\n-  static void update_garbage_words_in_hr(HeapRegion* hr, size_t garbage_words) {\n+  static void update_garbage_words_in_hr(G1HeapRegion* hr, size_t garbage_words) {\n@@ -208,1 +208,1 @@\n-    HeapRegion* hr = _g1h->region_at(region_idx);\n+    G1HeapRegion* hr = _g1h->region_at(region_idx);\n@@ -289,1 +289,1 @@\n-    _chunk_size = static_cast<uint>(HeapRegion::GrainWords \/ _num_chunks_per_region);\n+    _chunk_size = static_cast<uint>(G1HeapRegion::GrainWords \/ _num_chunks_per_region);\n@@ -390,1 +390,1 @@\n-    HeapRegion* r = _g1h->region_at(region_index);\n+    G1HeapRegion* r = _g1h->region_at(region_index);\n@@ -411,1 +411,1 @@\n-    auto free_humongous_region = [&] (HeapRegion* r) {\n+    auto free_humongous_region = [&] (G1HeapRegion* r) {\n@@ -507,1 +507,1 @@\n-  HeapRegion* region_for_card(CardValue* card_ptr) const {\n+  G1HeapRegion* region_for_card(CardValue* card_ptr) const {\n@@ -511,1 +511,1 @@\n-  bool will_become_free(HeapRegion* hr) const {\n+  bool will_become_free(G1HeapRegion* hr) const {\n@@ -526,1 +526,1 @@\n-    HeapRegion* hr = region_for_card(card_ptr);\n+    G1HeapRegion* hr = region_for_card(card_ptr);\n@@ -545,1 +545,1 @@\n-    bool do_heap_region(HeapRegion* r) override {\n+    bool do_heap_region(G1HeapRegion* r) override {\n@@ -680,1 +680,1 @@\n-  void account_failed_region(HeapRegion* r) {\n+  void account_failed_region(G1HeapRegion* r) {\n@@ -683,1 +683,1 @@\n-    _failure_waste_words += HeapRegion::GrainWords - used_words;\n+    _failure_waste_words += G1HeapRegion::GrainWords - used_words;\n@@ -692,1 +692,1 @@\n-      _bytes_allocated_in_old_since_last_gc += HeapRegion::GrainBytes;\n+      _bytes_allocated_in_old_since_last_gc += G1HeapRegion::GrainBytes;\n@@ -696,1 +696,1 @@\n-  void account_evacuated_region(HeapRegion* r) {\n+  void account_evacuated_region(G1HeapRegion* r) {\n@@ -703,1 +703,1 @@\n-  void account_card_rs_length(HeapRegion* r) {\n+  void account_card_rs_length(G1HeapRegion* r) {\n@@ -715,1 +715,1 @@\n-    JFREventForRegion(HeapRegion* region, uint worker_id) : _event() {\n+    JFREventForRegion(G1HeapRegion* region, uint worker_id) : _event() {\n@@ -751,1 +751,1 @@\n-  void assert_tracks_surviving_words(HeapRegion* r) {\n+  void assert_tracks_surviving_words(G1HeapRegion* r) {\n@@ -758,1 +758,1 @@\n-  void handle_evacuated_region(HeapRegion* r) {\n+  void handle_evacuated_region(G1HeapRegion* r) {\n@@ -767,1 +767,1 @@\n-  void handle_failed_region(HeapRegion* r) {\n+  void handle_failed_region(G1HeapRegion* r) {\n@@ -797,1 +797,1 @@\n-  Tickspan& timer_for_region(HeapRegion* r) {\n+  Tickspan& timer_for_region(G1HeapRegion* r) {\n@@ -820,1 +820,1 @@\n-  virtual bool do_heap_region(HeapRegion* r) {\n+  virtual bool do_heap_region(G1HeapRegion* r) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":22,"deletions":22,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-    _min_desired_young_length = MAX2((uint) (NewSize \/ HeapRegion::GrainBytes),\n+    _min_desired_young_length = MAX2((uint) (NewSize \/ G1HeapRegion::GrainBytes),\n@@ -59,1 +59,1 @@\n-                             MAX2((uint) (MaxNewSize \/ HeapRegion::GrainBytes),\n+                             MAX2((uint) (MaxNewSize \/ G1HeapRegion::GrainBytes),\n@@ -68,1 +68,1 @@\n-                             MAX2((uint) (MaxNewSize \/ HeapRegion::GrainBytes),\n+                             MAX2((uint) (MaxNewSize \/ G1HeapRegion::GrainBytes),\n@@ -122,1 +122,1 @@\n-  size_t max_young_size = result * HeapRegion::GrainBytes;\n+  size_t max_young_size = result * G1HeapRegion::GrainBytes;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGenSizer.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -37,2 +37,2 @@\n-  static_field(HeapRegion, GrainBytes,        size_t)                         \\\n-  static_field(HeapRegion, LogOfHRGrainBytes, uint)                           \\\n+  static_field(G1HeapRegion, GrainBytes,        size_t)                       \\\n+  static_field(G1HeapRegion, LogOfHRGrainBytes, uint)                         \\\n@@ -40,5 +40,5 @@\n-  nonstatic_field(HeapRegion, _type,           HeapRegionType)                \\\n-  nonstatic_field(HeapRegion, _bottom,         HeapWord* const)               \\\n-  nonstatic_field(HeapRegion, _top,            HeapWord* volatile)            \\\n-  nonstatic_field(HeapRegion, _end,            HeapWord* const)               \\\n-  volatile_nonstatic_field(HeapRegion, _pinned_object_count, size_t)          \\\n+  nonstatic_field(G1HeapRegion, _type,           HeapRegionType)              \\\n+  nonstatic_field(G1HeapRegion, _bottom,         HeapWord* const)             \\\n+  nonstatic_field(G1HeapRegion, _top,            HeapWord* volatile)          \\\n+  nonstatic_field(G1HeapRegion, _end,            HeapWord* const)             \\\n+  volatile_nonstatic_field(G1HeapRegion, _pinned_object_count, size_t)        \\\n@@ -96,1 +96,1 @@\n-  declare_toplevel_type(HeapRegion)                                           \\\n+  declare_toplevel_type(G1HeapRegion)                                         \\\n@@ -106,1 +106,1 @@\n-  declare_toplevel_type(HeapRegion*)                                          \\\n+  declare_toplevel_type(G1HeapRegion*)                                        \\\n","filename":"src\/hotspot\/share\/gc\/g1\/vmStructs_g1.hpp","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -842,1 +842,1 @@\n-  static_field(HeapRegion, LogOfHRGrainBytes, uint)\n+  static_field(G1HeapRegion, LogOfHRGrainBytes, uint)\n","filename":"src\/hotspot\/share\/jvmci\/vmStructs_jvmci.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -406,1 +406,1 @@\n-    const HeapRegion* hr = g1h->heap_region_containing(p);\n+    const G1HeapRegion* hr = g1h->heap_region_containing(p);\n@@ -481,1 +481,1 @@\n-    const HeapRegion* hr = g1h->heap_region_containing(result);\n+    const G1HeapRegion* hr = g1h->heap_region_containing(result);\n@@ -490,1 +490,1 @@\n-    const HeapRegion* hr = g1h->heap_region_containing((void*) addr);\n+    const G1HeapRegion* hr = g1h->heap_region_containing((void*) addr);\n@@ -499,1 +499,1 @@\n-    const HeapRegion* hr = g1h->heap_region_containing((void*) addr);\n+    const G1HeapRegion* hr = g1h->heap_region_containing((void*) addr);\n@@ -542,1 +542,1 @@\n-    return (jint)HeapRegion::GrainBytes;\n+    return (jint)G1HeapRegion::GrainBytes;\n@@ -629,1 +629,1 @@\n-  bool do_heap_region(HeapRegion* r) {\n+  bool do_heap_region(G1HeapRegion* r) {\n@@ -633,1 +633,1 @@\n-      size_t reg_size = HeapRegion::GrainBytes;\n+      size_t reg_size = G1HeapRegion::GrainBytes;\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1091,1 +1091,1 @@\n-                          HeapRegion region = heap.hrm().getByAddress(handle);\n+                          G1HeapRegion region = heap.hrm().getByAddress(handle);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/HSDB.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n-import sun.jvm.hotspot.gc.g1.HeapRegionClosure;\n+import sun.jvm.hotspot.gc.g1.G1HeapRegionClosure;\n@@ -50,1 +50,1 @@\n-    \/\/ HeapRegionManager _hrm;\n+    \/\/ G1HeapRegionManager _hrm;\n@@ -58,1 +58,1 @@\n-    \/\/ HeapRegionSet _old_set;\n+    \/\/ G1HeapRegionSet _old_set;\n@@ -60,1 +60,1 @@\n-    \/\/ HeapRegionSet _humongous_set;\n+    \/\/ G1HeapRegionSet _humongous_set;\n@@ -93,1 +93,1 @@\n-    public HeapRegionManager hrm() {\n+    public G1HeapRegionManager hrm() {\n@@ -95,1 +95,1 @@\n-        return VMObjectFactory.newObject(HeapRegionManager.class, hrmAddr);\n+        return VMObjectFactory.newObject(G1HeapRegionManager.class, hrmAddr);\n@@ -103,1 +103,1 @@\n-    public HeapRegionSetBase oldSet() {\n+    public G1HeapRegionSetBase oldSet() {\n@@ -105,1 +105,1 @@\n-        return VMObjectFactory.newObject(HeapRegionSetBase.class, oldSetAddr);\n+        return VMObjectFactory.newObject(G1HeapRegionSetBase.class, oldSetAddr);\n@@ -108,1 +108,1 @@\n-    public HeapRegionSetBase humongousSet() {\n+    public G1HeapRegionSetBase humongousSet() {\n@@ -110,1 +110,1 @@\n-        return VMObjectFactory.newObject(HeapRegionSetBase.class, humongousSetAddr);\n+        return VMObjectFactory.newObject(G1HeapRegionSetBase.class, humongousSetAddr);\n@@ -113,1 +113,1 @@\n-    private Iterator<HeapRegion> heapRegionIterator() {\n+    private Iterator<G1HeapRegion> heapRegionIterator() {\n@@ -117,2 +117,2 @@\n-    public void heapRegionIterate(HeapRegionClosure hrcl) {\n-        Iterator<HeapRegion> iter = heapRegionIterator();\n+    public void heapRegionIterate(G1HeapRegionClosure hrcl) {\n+        Iterator<G1HeapRegion> iter = heapRegionIterator();\n@@ -120,1 +120,1 @@\n-            HeapRegion hr = iter.next();\n+            G1HeapRegion hr = iter.next();\n@@ -125,2 +125,2 @@\n-    public HeapRegion heapRegionForAddress(Address addr) {\n-        Iterator<HeapRegion> iter = heapRegionIterator();\n+    public G1HeapRegion heapRegionForAddress(Address addr) {\n+        Iterator<G1HeapRegion> iter = heapRegionIterator();\n@@ -128,1 +128,1 @@\n-            HeapRegion hr = iter.next();\n+            G1HeapRegion hr = iter.next();\n@@ -142,1 +142,1 @@\n-        Iterator<HeapRegion> iter = heapRegionIterator();\n+        Iterator<G1HeapRegion> iter = heapRegionIterator();\n@@ -144,1 +144,1 @@\n-            HeapRegion hr = iter.next();\n+            G1HeapRegion hr = iter.next();\n@@ -155,1 +155,1 @@\n-        tty.println(\" region size \" + (HeapRegion.grainBytes() \/ 1024) + \"K\");\n+        tty.println(\" region size \" + (G1HeapRegion.grainBytes() \/ 1024) + \"K\");\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1CollectedHeap.java","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-\/\/ Mirror class for HeapRegion. Currently we don't actually include\n+\/\/ Mirror class for G1HeapRegion. Currently we don't actually include\n@@ -47,1 +47,1 @@\n-public class HeapRegion extends ContiguousSpace implements LiveRegionsProvider {\n+public class G1HeapRegion extends ContiguousSpace implements LiveRegionsProvider {\n@@ -69,1 +69,1 @@\n-        Type type = db.lookupType(\"HeapRegion\");\n+        Type type = db.lookupType(\"G1HeapRegion\");\n@@ -80,1 +80,1 @@\n-        pointerSize = db.lookupType(\"HeapRegion*\").getSize();\n+        pointerSize = db.lookupType(\"G1HeapRegion*\").getSize();\n@@ -87,1 +87,1 @@\n-    public HeapRegion(Address addr) {\n+    public G1HeapRegion(Address addr) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegion.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegion.java","status":"renamed"},{"patch":"@@ -27,2 +27,2 @@\n-public interface HeapRegionClosure {\n-    public void doHeapRegion(HeapRegion hr);\n+public interface G1HeapRegionClosure {\n+    public void doHeapRegion(G1HeapRegion hr);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegionClosure.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegionClosure.java","status":"renamed"},{"patch":"@@ -42,1 +42,1 @@\n-public class HeapRegionManager extends VMObject {\n+public class G1HeapRegionManager extends VMObject {\n@@ -66,1 +66,1 @@\n-        return length() * HeapRegion.grainBytes();\n+        return length() * G1HeapRegion.grainBytes();\n@@ -73,1 +73,1 @@\n-    public Iterator<HeapRegion> heapRegionIterator() {\n+    public Iterator<G1HeapRegion> heapRegionIterator() {\n@@ -77,1 +77,1 @@\n-    public HeapRegionManager(Address addr) {\n+    public G1HeapRegionManager(Address addr) {\n@@ -81,1 +81,1 @@\n-    public HeapRegion getByAddress(Address addr) {\n+    public G1HeapRegion getByAddress(Address addr) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegionManager.java","additions":5,"deletions":5,"binary":false,"changes":10,"previous_filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegionManager.java","status":"renamed"},{"patch":"@@ -42,1 +42,1 @@\n-public class HeapRegionSetBase extends VMObject {\n+public class G1HeapRegionSetBase extends VMObject {\n@@ -65,1 +65,1 @@\n-    public HeapRegionSetBase(Address addr) {\n+    public G1HeapRegionSetBase(Address addr) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegionSetBase.java","additions":2,"deletions":2,"binary":false,"changes":4,"previous_filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/HeapRegionSetBase.java","status":"renamed"},{"patch":"@@ -41,1 +41,1 @@\n-\/\/ Mirror class for G1HeapRegionTable. It's essentially an index -> HeapRegion map.\n+\/\/ Mirror class for G1HeapRegionTable. It's essentially an index -> G1HeapRegion map.\n@@ -44,1 +44,1 @@\n-    \/\/ HeapRegion** _base;\n+    \/\/ G1HeapRegion** _base;\n@@ -48,1 +48,1 @@\n-    \/\/ HeapRegion** _biased_base\n+    \/\/ G1HeapRegion** _biased_base\n@@ -73,1 +73,1 @@\n-    private HeapRegion at(long index) {\n+    private G1HeapRegion at(long index) {\n@@ -78,1 +78,1 @@\n-        return VMObjectFactory.newObject(HeapRegion.class, regionAddr);\n+        return VMObjectFactory.newObject(G1HeapRegion.class, regionAddr);\n@@ -93,1 +93,1 @@\n-    private class HeapRegionIterator implements Iterator<HeapRegion> {\n+    private class G1HeapRegionIterator implements Iterator<G1HeapRegion> {\n@@ -96,1 +96,1 @@\n-        private HeapRegion next;\n+        private G1HeapRegion next;\n@@ -98,2 +98,2 @@\n-        public HeapRegion positionToNext() {\n-          HeapRegion result = next;\n+        public G1HeapRegion positionToNext() {\n+          G1HeapRegion result = next;\n@@ -116,1 +116,1 @@\n-        public HeapRegion next() { return positionToNext(); }\n+        public G1HeapRegion next() { return positionToNext(); }\n@@ -121,1 +121,1 @@\n-        HeapRegionIterator(long totalLength) {\n+        G1HeapRegionIterator(long totalLength) {\n@@ -128,2 +128,2 @@\n-    public Iterator<HeapRegion> heapRegionIterator(long committedLength) {\n-        return new HeapRegionIterator(committedLength);\n+    public Iterator<G1HeapRegion> heapRegionIterator(long committedLength) {\n+        return new G1HeapRegionIterator(committedLength);\n@@ -136,1 +136,1 @@\n-    public HeapRegion getByAddress(Address target) {\n+    public G1HeapRegion getByAddress(Address target) {\n@@ -139,1 +139,1 @@\n-        long offset = biasedIndex * HeapRegion.getPointerSize();\n+        long offset = biasedIndex * G1HeapRegion.getPointerSize();\n@@ -141,1 +141,1 @@\n-        return VMObjectFactory.newObject(HeapRegion.class, regionAddr);\n+        return VMObjectFactory.newObject(G1HeapRegion.class, regionAddr);\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1HeapRegionTable.java","additions":16,"deletions":16,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -81,1 +81,1 @@\n-        return edenSpaceUsed() \/ HeapRegion.grainBytes();\n+        return edenSpaceUsed() \/ G1HeapRegion.grainBytes();\n@@ -93,1 +93,1 @@\n-        return survivorSpaceUsed() \/ HeapRegion.grainBytes();\n+        return survivorSpaceUsed() \/ G1HeapRegion.grainBytes();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/G1MonitoringSupport.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import sun.jvm.hotspot.gc.g1.HeapRegion;\n+import sun.jvm.hotspot.gc.g1.G1HeapRegion;\n@@ -30,1 +30,1 @@\n-public class PrintRegionClosure implements HeapRegionClosure {\n+public class PrintRegionClosure implements G1HeapRegionClosure {\n@@ -37,1 +37,1 @@\n-    public void doHeapRegion(HeapRegion hr) {\n+    public void doHeapRegion(G1HeapRegion hr) {\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/gc\/g1\/PrintRegionClosure.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        printValMB(\"G1HeapRegionSize         = \", HeapRegion.grainBytes());\n+        printValMB(\"G1HeapRegionSize       = \", G1HeapRegion.grainBytes());\n@@ -256,2 +256,2 @@\n-      HeapRegionSetBase oldSet = g1h.oldSet();\n-      HeapRegionSetBase humongousSet = g1h.humongousSet();\n+      G1HeapRegionSetBase oldSet = g1h.oldSet();\n+      G1HeapRegionSetBase humongousSet = g1h.humongousSet();\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/tools\/HeapSummary.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -126,2 +126,2 @@\n-        \/\/ memory, even if that area of memory is not in use by a G1 HeapRegion. So there\n-        \/\/ may in fact be no HeapRegion for the address even though it is in the heap.\n+        \/\/ memory, even if that area of memory is not in use by a G1HeapRegion. So there\n+        \/\/ may in fact be no G1HeapRegion for the address even though it is in the heap.\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/PointerFinder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-  HeapRegion hr;   \/\/ G1 heap region\n+  G1HeapRegion hr;   \/\/ G1 heap region\n@@ -131,1 +131,1 @@\n-  public HeapRegion getHeapRegion() {\n+  public G1HeapRegion getG1HeapRegion() {\n@@ -305,1 +305,1 @@\n-        } else if (getHeapRegion() != null) {\n+        } else if (getG1HeapRegion() != null) {\n@@ -309,1 +309,1 @@\n-                getHeapRegion().printOn(tty); \/\/ includes \"\\n\"\n+                getG1HeapRegion().printOn(tty); \/\/ includes \"\\n\"\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/utilities\/PointerLocation.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-  \/\/ Create a fake heap. It does not need to be valid, as the HeapRegion constructor\n+  \/\/ Create a fake heap. It does not need to be valid, as the G1HeapRegion constructor\n@@ -47,1 +47,1 @@\n-  MemRegion heap(nullptr, num_regions_in_test * HeapRegion::GrainWords);\n+  MemRegion heap(nullptr, num_regions_in_test * G1HeapRegion::GrainWords);\n@@ -49,1 +49,1 @@\n-  \/\/ Allocate a fake BOT because the HeapRegion constructor initializes\n+  \/\/ Allocate a fake BOT because the G1HeapRegion constructor initializes\n@@ -58,1 +58,1 @@\n-                                         HeapRegion::GrainBytes,\n+                                         G1HeapRegion::GrainBytes,\n@@ -65,5 +65,5 @@\n-  MemRegion mr0(heap.start(), HeapRegion::GrainWords);\n-  MemRegion mr1(mr0.end(), HeapRegion::GrainWords);\n-  MemRegion mr2(mr1.end(), HeapRegion::GrainWords);\n-  MemRegion mr3(mr2.end(), HeapRegion::GrainWords);\n-  MemRegion mr4(mr3.end(), HeapRegion::GrainWords);\n+  MemRegion mr0(heap.start(), G1HeapRegion::GrainWords);\n+  MemRegion mr1(mr0.end(), G1HeapRegion::GrainWords);\n+  MemRegion mr2(mr1.end(), G1HeapRegion::GrainWords);\n+  MemRegion mr3(mr2.end(), G1HeapRegion::GrainWords);\n+  MemRegion mr4(mr3.end(), G1HeapRegion::GrainWords);\n@@ -73,5 +73,5 @@\n-  HeapRegion hr0(0, &bot, mr0, &config);\n-  HeapRegion hr1(1, &bot, mr1, &config);\n-  HeapRegion hr2(2, &bot, mr2, &config);\n-  HeapRegion hr3(3, &bot, mr3, &config);\n-  HeapRegion hr4(4, &bot, mr4, &config);\n+  G1HeapRegion hr0(0, &bot, mr0, &config);\n+  G1HeapRegion hr1(1, &bot, mr1, &config);\n+  G1HeapRegion hr2(2, &bot, mr2, &config);\n+  G1HeapRegion hr3(3, &bot, mr3, &config);\n+  G1HeapRegion hr4(4, &bot, mr4, &config);\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_freeRegionList.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  HeapRegion* region = heap->heap_region_containing(heap->bottom_addr_for_region(0));\n+  G1HeapRegion* region = heap->heap_region_containing(heap->bottom_addr_for_region(0));\n@@ -91,1 +91,1 @@\n-  \/\/ will stop at HeapRegion::scan_limit which is equal to top.\n+  \/\/ will stop at G1HeapRegion::scan_limit which is equal to top.\n@@ -125,1 +125,1 @@\n-TEST_OTHER_VM(HeapRegion, apply_to_marked_object) {\n+TEST_OTHER_VM(G1HeapRegion, apply_to_marked_object) {\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_heapRegion.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -32,1 +32,1 @@\n- *              not enough space in the heapRegion to fit a filler object.\n+ *              not enough space in the G1HeapRegion to fit a filler object.\n@@ -65,1 +65,1 @@\n-                \/\/ 131069 is the number of longs it takes to fill a heapRegion except\n+                \/\/ 131069 is the number of longs it takes to fill a G1HeapRegion except\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousAllocNearlyFullRegion.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-    \/\/    Each 'int' represents a numa id of single HeapRegion (bottom page).\n+    \/\/    Each 'int' represents a numa id of single G1HeapRegion (bottom page).\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/numa\/TestG1NUMATouchRegions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,1 @@\n-        dumpOutput.shouldNotMatch(\"gc,region,cds. HeapRegion 0x[0-9a-f]* HUM\");\n+        dumpOutput.shouldNotMatch(\"gc,region,cds. G1HeapRegion 0x[0-9a-f]* HUM\");\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/SharedStringsHumongous.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import sun.jvm.hotspot.gc.g1.HeapRegion;\n+import sun.jvm.hotspot.gc.g1.G1HeapRegion;\n@@ -62,2 +62,2 @@\n-            HeapRegion hr = heap.hrm().heapRegionIterator().next();\n-            HeapRegion hrTop = heap.hrm().getByAddress(hr.top());\n+            G1HeapRegion hr = heap.hrm().heapRegionIterator().next();\n+            G1HeapRegion hrTop = heap.hrm().getByAddress(hr.top());\n@@ -66,1 +66,1 @@\n-                                 \"Address of HeapRegion does not match.\");\n+                                 \"Address of G1HeapRegion does not match.\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestG1HeapRegion.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n-                                 \"Address of HeapRegion does not match.\");\n+                                 \"Address of G1HeapRegion does not match.\");\n","filename":"test\/hotspot\/jtreg\/serviceability\/sa\/TestObjectAlignment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}