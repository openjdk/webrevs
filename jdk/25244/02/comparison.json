{"files":[{"patch":"@@ -37,0 +37,2 @@\n+import java.awt.image.BufferedImage;\n+import java.lang.reflect.InvocationTargetException;\n@@ -48,1 +50,1 @@\n-public class RootPaneDefaultButtonTest extends JDialog {\n+public class RootPaneDefaultButtonTest {\n@@ -50,2 +52,1 @@\n-    record ButtonRenderingExpectation(JButton button,\n-                                      boolean appearAsDefault) {}\n+    static class TestDialog extends JDialog {\n@@ -53,4 +54,8 @@\n-    public static void main(String[] args) throws Exception {\n-        if (!System.getProperty(\"os.name\").contains(\"OS X\")) {\n-            System.out.println(\"This test is for MacOS only.\");\n-            return;\n+        JButton button1 = new JButton(\"Button 1\");\n+        JButton button2 = new JButton(\"Button 2\");\n+\n+        TestDialog() {\n+            getContentPane().setLayout(new BorderLayout());\n+            getContentPane().add(createPushButtonRow(), BorderLayout.SOUTH);\n+            setUndecorated(true);\n+            pack();\n@@ -59,2 +64,8 @@\n-        RootPaneDefaultButtonTest window1 = new RootPaneDefaultButtonTest();\n-        RootPaneDefaultButtonTest window2 = new RootPaneDefaultButtonTest();\n+        private JPanel createPushButtonRow() {\n+            JPanel p = new JPanel(new GridLayout(1, 2));\n+            p.add(button1);\n+            p.add(button2);\n+            p.setBorder(new EmptyBorder(5,5,5,5));\n+            return p;\n+        }\n+    }\n@@ -62,4 +73,27 @@\n-        SwingUtilities.invokeAndWait(new Runnable() {\n-            @Override\n-            public void run() {\n-                Rectangle r1 = new Rectangle(0, 20,\n+    \/**\n+     * We want 2 dialogs: one in the foreground and one not in the foreground\n+     *\/\n+    static class TestScene {\n+        boolean isButton1Default, isButton2Default;\n+\n+        TestScene(boolean isButton1Default, boolean isButton2Default) {\n+            this.isButton1Default = isButton1Default;\n+            this.isButton2Default = isButton2Default;\n+        }\n+\n+        void run() throws Exception {\n+            SwingUtilities.invokeAndWait(() -> {\n+                System.out.println(\n+                        \"Testing isButton1Default = \" + isButton1Default +\n+                                \" isButton2Default = \" + isButton2Default);\n+                TestDialog window1 = new TestDialog();\n+                TestDialog window2 = new TestDialog();\n+\n+                if (isButton1Default) {\n+                    window1.getRootPane().setDefaultButton(window1.button1);\n+                }\n+                if (isButton2Default) {\n+                    window1.getRootPane().setDefaultButton(window1.button2);\n+                }\n+\n+                Rectangle r1 = new Rectangle(0, 100,\n@@ -69,1 +103,1 @@\n-                Rectangle r2 = new Rectangle((int) (r1.getMaxX() + 10), 20,\n+                Rectangle r2 = new Rectangle((int) (r1.getMaxX() + 10), 100,\n@@ -75,43 +109,0 @@\n-            }\n-        });\n-\n-        Robot robot = new Robot();\n-\n-        test(robot, window1.radioButton1,\n-                new ButtonRenderingExpectation(window1.button1, true),\n-                new ButtonRenderingExpectation(window1.button2, false),\n-                new ButtonRenderingExpectation(window2.button1, false),\n-                new ButtonRenderingExpectation(window2.button2, false));\n-\n-        test(robot, window1.radioButton2,\n-                new ButtonRenderingExpectation(window1.button1, false),\n-                new ButtonRenderingExpectation(window1.button2, true),\n-                new ButtonRenderingExpectation(window2.button1, false),\n-                new ButtonRenderingExpectation(window2.button2, false));\n-\n-        test(robot, window1.radioButton3,\n-                new ButtonRenderingExpectation(window1.button1, false),\n-                new ButtonRenderingExpectation(window1.button2, false),\n-                new ButtonRenderingExpectation(window2.button1, false),\n-                new ButtonRenderingExpectation(window2.button2, false));\n-\n-        test(robot, window2.radioButton1,\n-                new ButtonRenderingExpectation(window1.button1, false),\n-                new ButtonRenderingExpectation(window1.button2, false),\n-                new ButtonRenderingExpectation(window2.button1, true),\n-                new ButtonRenderingExpectation(window2.button2, false));\n-\n-        test(robot, window2.radioButton2,\n-                new ButtonRenderingExpectation(window1.button1, false),\n-                new ButtonRenderingExpectation(window1.button2, false),\n-                new ButtonRenderingExpectation(window2.button1, false),\n-                new ButtonRenderingExpectation(window2.button2, true));\n-\n-        test(robot, window2.radioButton3,\n-                new ButtonRenderingExpectation(window1.button1, false),\n-                new ButtonRenderingExpectation(window1.button2, false),\n-                new ButtonRenderingExpectation(window2.button1, false),\n-                new ButtonRenderingExpectation(window2.button2, false));\n-\n-        System.out.println(\"Test passed successfully\");\n-    }\n@@ -119,46 +110,69 @@\n-    private static void test(Robot robot, AbstractButton buttonToClick,\n-                             ButtonRenderingExpectation... expectations)\n-            throws Exception {\n-        robot.delay(100);\n-\n-        Point mouseLoc = buttonToClick.getLocationOnScreen();\n-        robot.mouseMove(mouseLoc.x + buttonToClick.getSize().width \/ 2,\n-                mouseLoc.y + buttonToClick.getSize().height \/ 2);\n-        robot.mousePress(InputEvent.BUTTON1_DOWN_MASK);\n-        robot.delay(20);\n-        robot.mouseRelease(InputEvent.BUTTON1_DOWN_MASK);\n-\n-        robot.delay(100);\n-\n-        \/\/ the colors may change depending on your system's appearance.\n-        \/\/ Depending on how you've configured \"Appearance\" in the\n-        \/\/ System Settings app: the default button may be blue (the default),\n-        \/\/ red, purple, etc. So instead of checking for a specific color: we'll\n-        \/\/ make sure 3-4 are the same color, and one is significantly\n-        \/\/ different.\n-        Color defaultColor = null;\n-        Color nonDefaultColor = null;\n-\n-        for (ButtonRenderingExpectation expectation : expectations) {\n-            int x = expectation.button.getLocationOnScreen().x + 20;\n-            int y = expectation.button.getLocationOnScreen().y + 10;\n-\n-            \/\/ this mouseMove is optional, but it helps debug this test to see\n-            \/\/ where we're sampling the pixel color from:\n-            robot.mouseMove(x, y);\n-\n-            Color c = robot.getPixelColor(x, y);\n-            if (expectation.appearAsDefault) {\n-                if (defaultColor == null) {\n-                    defaultColor = c;\n-                } else {\n-                    throw new IllegalStateException(\n-                            \"there should only be at most 1 default button\");\n-                }\n-            } else {\n-                if (nonDefaultColor == null) {\n-                    nonDefaultColor = c;\n-                } else if (!isSimilar(nonDefaultColor, c)) {\n-                    throw new IllegalStateException(\n-                            \"these two colors should match: \" + c + \", \" +\n-                                    nonDefaultColor);\n+                Rectangle sum = new Rectangle();\n+                sum.add(r1);\n+                sum.add(r2);\n+                BufferedImage bi = new BufferedImage(sum.width, sum.height,\n+                        BufferedImage.TYPE_INT_ARGB);\n+                Graphics2D g = bi.createGraphics();\n+                window1.paint(g.create(r1.x, r1.y, r1.width, r1.height));\n+                window2.paint(g.create(r2.x, r2.y, r2.width, r2.height));\n+                g.dispose();\n+\n+                \/\/ the exact colors may change depending on your system's\n+                \/\/ appearance. Depending on how you've configured \"Appearance\"\n+                \/\/ in the System Settings app: the default button may be blue\n+                \/\/ (the default), red, purple, etc. So instead of checking for\n+                \/\/ a specific color: we'll make sure 3-4 are the same color,\n+                \/\/ and one is significantly different.\n+                Color defaultColor = null;\n+                Color nonDefaultColor = null;\n+\n+                JButton[] buttons = new JButton[] {window1.button1,\n+                        window1.button2, window2.button1, window2.button2};\n+\n+                try {\n+                    for (int a = 0; a < buttons.length; a++) {\n+                        try {\n+                            JButton b = buttons[a];\n+\n+                            Point p = b.getLocationOnScreen();\n+                            int x = p.x + 20;\n+                            int y = p.y + 10;\n+\n+                            Color c = new Color(bi.getRGB(x - sum.x, y - sum.y));\n+                            if (b.isDefaultButton()) {\n+                                if (defaultColor == null) {\n+                                    defaultColor = c;\n+                                } else {\n+                                    throw new IllegalStateException(\n+                                            \"there should only be at most 1 \" +\n+                                                    \"default button\");\n+                                }\n+                            } else {\n+                                if (nonDefaultColor == null) {\n+                                    nonDefaultColor = c;\n+                                } else if (!isSimilar(nonDefaultColor, c)) {\n+                                    throw new IllegalStateException(\n+                                            \"these two colors should match: \" + c +\n+                                                    \", \" + nonDefaultColor);\n+                                }\n+                            }\n+\n+                            if (defaultColor != null && nonDefaultColor != null &&\n+                                    isSimilar(defaultColor, nonDefaultColor)) {\n+                                throw new IllegalStateException(\n+                                        \"The default button and non-default \" +\n+                                                \"buttons should look \" +\n+                                                \"different: \" + defaultColor +\n+                                                \" matches \" + nonDefaultColor);\n+                            }\n+                        } catch(Exception e) {\n+                            System.err.println(\"a = \" + a);\n+                            throw e;\n+                        }\n+                    }\n+                } finally {\n+                    System.out.println(\"defaultColor = \" + defaultColor +\n+                            \" nonDefaultColor = \" + nonDefaultColor);\n+\n+                    window1.dispose();\n+                    window2.dispose();\n@@ -166,2 +180,0 @@\n-            }\n-        }\n@@ -169,5 +181,2 @@\n-        if (defaultColor != null && isSimilar(defaultColor, nonDefaultColor)) {\n-            throw new IllegalStateException(\n-                    \"The default button and non-default buttons should \" +\n-                            \"look different: \" + defaultColor + \" matches \" +\n-                            nonDefaultColor);\n+                System.out.println(\"Test passed successfully\\n\");\n+            });\n@@ -190,50 +199,5 @@\n-    JRadioButton radioButton1 = new JRadioButton(\n-            \"\\\"Button 1\\\" is the default button\");\n-    JRadioButton radioButton2 = new JRadioButton(\n-            \"\\\"Button 2\\\" is the default button\");\n-    JRadioButton radioButton3 = new JRadioButton(\"No default button\");\n-\n-    JButton button1 = new JButton(\"Button 1\");\n-    JButton button2 = new JButton(\"Button 2\");\n-\n-    public RootPaneDefaultButtonTest() {\n-        getContentPane().setLayout(new BorderLayout());\n-        getContentPane().add(createRadioButtonPanel(), BorderLayout.NORTH);\n-        getContentPane().add(createPushButtonRow(), BorderLayout.SOUTH);\n-        pack();\n-\n-        radioButton1.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                getRootPane().setDefaultButton(button1);\n-            }\n-        });\n-\n-        radioButton2.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                getRootPane().setDefaultButton(button2);\n-            }\n-        });\n-\n-        radioButton3.addActionListener(new ActionListener() {\n-            @Override\n-            public void actionPerformed(ActionEvent e) {\n-                getRootPane().setDefaultButton(null);\n-            }\n-        });\n-\n-        ButtonGroup g = new ButtonGroup();\n-        g.add(radioButton1);\n-        g.add(radioButton2);\n-        g.add(radioButton3);\n-        radioButton1.doClick();\n-    }\n-\n-    private JPanel createPushButtonRow() {\n-        JPanel p = new JPanel(new GridLayout(1, 2));\n-        p.add(button1);\n-        p.add(button2);\n-        p.setBorder(new EmptyBorder(5,5,5,5));\n-        return p;\n-    }\n+    public static void main(String[] args) throws Exception {\n+        if (!System.getProperty(\"os.name\").contains(\"OS X\")) {\n+            System.out.println(\"This test is for MacOS only.\");\n+            return;\n+        }\n@@ -241,7 +205,3 @@\n-    private JPanel createRadioButtonPanel() {\n-        JPanel p = new JPanel(new GridLayout(3, 1));\n-        p.add(radioButton1);\n-        p.add(radioButton2);\n-        p.add(radioButton3);\n-        p.setBorder(new EmptyBorder(5,5,5,5));\n-        return p;\n+        new TestScene(true, false).run();\n+        new TestScene(false, true).run();\n+        new TestScene(false, false).run();\n","filename":"test\/jdk\/com\/apple\/laf\/RootPane\/RootPaneDefaultButtonTest.java","additions":127,"deletions":167,"binary":false,"changes":294,"status":"modified"}]}