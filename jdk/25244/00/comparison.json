{"files":[{"patch":"@@ -131,1 +131,1 @@\n-        robot.delay(100);\n+        robot.delay(1000);\n@@ -142,12 +142,18 @@\n-        for (ButtonRenderingExpectation expectation : expectations) {\n-            int x = expectation.button.getLocationOnScreen().x + 20;\n-            int y = expectation.button.getLocationOnScreen().y + 10;\n-\n-            \/\/ this mouseMove is optional, but it helps debug this test to see\n-            \/\/ where we're sampling the pixel color from:\n-            robot.mouseMove(x, y);\n-\n-            Color c = robot.getPixelColor(x, y);\n-            if (expectation.appearAsDefault) {\n-                if (defaultColor == null) {\n-                    defaultColor = c;\n+        for (int a = 0; a < expectations.length; a++) {\n+            try {\n+                ButtonRenderingExpectation expectation = expectations[a];\n+                int x = expectation.button.getLocationOnScreen().x + 20;\n+                int y = expectation.button.getLocationOnScreen().y + 10;\n+\n+                \/\/ this mouseMove is optional, but it helps debug this test to see\n+                \/\/ where we're sampling the pixel color from:\n+                robot.mouseMove(x, y);\n+\n+                Color c = robot.getPixelColor(x, y);\n+                if (expectation.appearAsDefault) {\n+                    if (defaultColor == null) {\n+                        defaultColor = c;\n+                    } else {\n+                        throw new IllegalStateException(\n+                                \"there should only be at most 1 default button\");\n+                    }\n@@ -155,2 +161,7 @@\n-                    throw new IllegalStateException(\n-                            \"there should only be at most 1 default button\");\n+                    if (nonDefaultColor == null) {\n+                        nonDefaultColor = c;\n+                    } else if (!isSimilar(nonDefaultColor, c)) {\n+                        throw new IllegalStateException(\n+                                \"these two colors should match: \" + c + \", \" +\n+                                        nonDefaultColor);\n+                    }\n@@ -158,4 +169,3 @@\n-            } else {\n-                if (nonDefaultColor == null) {\n-                    nonDefaultColor = c;\n-                } else if (!isSimilar(nonDefaultColor, c)) {\n+\n+                if (defaultColor != null && nonDefaultColor != null &&\n+                        isSimilar(defaultColor, nonDefaultColor)) {\n@@ -163,1 +173,2 @@\n-                            \"these two colors should match: \" + c + \", \" +\n+                            \"The default button and non-default buttons should \" +\n+                                    \"look different: \" + defaultColor + \" matches \" +\n@@ -166,0 +177,4 @@\n+            } catch(Exception e) {\n+                System.err.println(\"a = \" + a + \" defaultColor = \" +\n+                        defaultColor + \" nonDefaultColor = \" + nonDefaultColor);\n+                throw e;\n@@ -168,7 +183,0 @@\n-\n-        if (defaultColor != null && isSimilar(defaultColor, nonDefaultColor)) {\n-            throw new IllegalStateException(\n-                    \"The default button and non-default buttons should \" +\n-                            \"look different: \" + defaultColor + \" matches \" +\n-                            nonDefaultColor);\n-        }\n","filename":"test\/jdk\/com\/apple\/laf\/RootPane\/RootPaneDefaultButtonTest.java","additions":35,"deletions":27,"binary":false,"changes":62,"status":"modified"}]}