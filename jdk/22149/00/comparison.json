{"files":[{"patch":"@@ -3469,0 +3469,11 @@\n+  \/\/ NOTE:\n+  \/\/ Register _result_ may be the same register as _new_val_ or _expected_.\n+  \/\/ Hence do NOT use _result_ until after 'cas'.\n+  \/\/\n+  \/\/ Register _expected_ may be the same register as _new_val_ and is assumed to be preserved.\n+  \/\/ Hence do NOT change _expected_ or _new_val_.\n+  \/\/\n+  \/\/ Having _expected_ and _new_val_ being the same register is a very puzzling cas.\n+  \/\/\n+  \/\/ TODO: Address these issues.\n+\n@@ -3476,2 +3487,3 @@\n-      mv(result, expected);\n-      atomic_cas(result, new_val, addr, size, acquire, release);\n+      mv(t0, expected);\n+      atomic_cas(t0, new_val, addr, size, acquire, release);\n+      mv(result, t0);\n@@ -3513,4 +3525,0 @@\n-  if (UseZacas) {\n-    cmpxchg(addr, expected, new_val, size, acquire, release, result, true);\n-    return;\n-  }\n@@ -3522,0 +3530,5 @@\n+  if (UseZacas) {\n+    cmpxchg(addr, expected, new_val, size, acquire, release, result, true);\n+    return;\n+  }\n+\n@@ -3584,32 +3597,2 @@\n-#define ATOMIC_CAS(OP, AOP, ACQUIRE, RELEASE)                                        \\\n-void MacroAssembler::atomic_##OP(Register prev, Register newv, Register addr) {      \\\n-  assert(UseZacas, \"invariant\");                                                     \\\n-  prev = prev->is_valid() ? prev : zr;                                               \\\n-  AOP(prev, addr, newv, (Assembler::Aqrl)(ACQUIRE | RELEASE));                       \\\n-  return;                                                                            \\\n-}\n-\n-ATOMIC_CAS(cas, amocas_d, Assembler::relaxed, Assembler::relaxed)\n-ATOMIC_CAS(casw, amocas_w, Assembler::relaxed, Assembler::relaxed)\n-ATOMIC_CAS(casl, amocas_d, Assembler::relaxed, Assembler::rl)\n-ATOMIC_CAS(caslw, amocas_w, Assembler::relaxed, Assembler::rl)\n-ATOMIC_CAS(casal, amocas_d, Assembler::aq, Assembler::rl)\n-ATOMIC_CAS(casalw, amocas_w, Assembler::aq, Assembler::rl)\n-\n-#undef ATOMIC_CAS\n-\n-#define ATOMIC_CASU(OP1, OP2)                                                        \\\n-void MacroAssembler::atomic_##OP1(Register prev, Register newv, Register addr) {     \\\n-  atomic_##OP2(prev, newv, addr);                                                    \\\n-  zero_extend(prev, prev, 32);                                                       \\\n-  return;                                                                            \\\n-}\n-\n-ATOMIC_CASU(caswu, casw)\n-ATOMIC_CASU(caslwu, caslw)\n-ATOMIC_CASU(casalwu, casalw)\n-\n-#undef ATOMIC_CASU\n-\n-void MacroAssembler::atomic_cas(\n-    Register prev, Register newv, Register addr, enum operand_size size, Assembler::Aqrl acquire, Assembler::Aqrl release) {\n+void MacroAssembler::atomic_cas(Register prev, Register newv, Register addr,\n+                                enum operand_size size, Assembler::Aqrl acquire, Assembler::Aqrl release) {\n@@ -3618,13 +3601,1 @@\n-      switch ((Assembler::Aqrl)(acquire | release)) {\n-        case Assembler::relaxed:\n-          atomic_cas(prev, newv, addr);\n-          break;\n-        case Assembler::rl:\n-          atomic_casl(prev, newv, addr);\n-          break;\n-        case Assembler::aqrl:\n-          atomic_casal(prev, newv, addr);\n-          break;\n-        default:\n-          ShouldNotReachHere();\n-      }\n+      amocas_d(prev, addr, newv, (Assembler::Aqrl)(acquire | release));\n@@ -3633,13 +3604,1 @@\n-      switch ((Assembler::Aqrl)(acquire | release)) {\n-        case Assembler::relaxed:\n-          atomic_casw(prev, newv, addr);\n-          break;\n-        case Assembler::rl:\n-          atomic_caslw(prev, newv, addr);\n-          break;\n-        case Assembler::aqrl:\n-          atomic_casalw(prev, newv, addr);\n-          break;\n-        default:\n-          ShouldNotReachHere();\n-      }\n+      amocas_w(prev, addr, newv, (Assembler::Aqrl)(acquire | release));\n@@ -3648,13 +3607,2 @@\n-      switch ((Assembler::Aqrl)(acquire | release)) {\n-        case Assembler::relaxed:\n-          atomic_caswu(prev, newv, addr);\n-          break;\n-        case Assembler::rl:\n-          atomic_caslwu(prev, newv, addr);\n-          break;\n-        case Assembler::aqrl:\n-          atomic_casalwu(prev, newv, addr);\n-          break;\n-        default:\n-          ShouldNotReachHere();\n-      }\n+      amocas_w(prev, addr, newv, (Assembler::Aqrl)(acquire | release));\n+      zero_extend(prev, prev, 32);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":25,"deletions":77,"binary":false,"changes":102,"status":"modified"},{"patch":"@@ -1178,10 +1178,0 @@\n-  void atomic_cas(Register prev, Register newv, Register addr);\n-  void atomic_casw(Register prev, Register newv, Register addr);\n-  void atomic_casl(Register prev, Register newv, Register addr);\n-  void atomic_caslw(Register prev, Register newv, Register addr);\n-  void atomic_casal(Register prev, Register newv, Register addr);\n-  void atomic_casalw(Register prev, Register newv, Register addr);\n-  void atomic_caswu(Register prev, Register newv, Register addr);\n-  void atomic_caslwu(Register prev, Register newv, Register addr);\n-  void atomic_casalwu(Register prev, Register newv, Register addr);\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"}]}