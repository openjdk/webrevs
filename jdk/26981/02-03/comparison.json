{"files":[{"patch":"@@ -131,2 +131,2 @@\n-  if (key < vmem.start()) { return RBTreeOrdering::less; }\n-  if (key > vmem.end()) { return RBTreeOrdering::greater; }\n+  if (key < vmem.start()) { return RBTreeOrdering::LT; }\n+  if (key > vmem.end()) { return RBTreeOrdering::GT; }\n@@ -134,1 +134,1 @@\n-  return RBTreeOrdering::equal; \/\/ Containing\n+  return RBTreeOrdering::EQ; \/\/ Containing\n","filename":"src\/hotspot\/share\/gc\/z\/zMappedCache.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -54,3 +54,3 @@\n-      if (a < b) return RBTreeOrdering::less;\n-      if (a > b) return RBTreeOrdering::greater;\n-      return RBTreeOrdering::equal;\n+      if (a < b) return RBTreeOrdering::LT;\n+      if (a > b) return RBTreeOrdering::GT;\n+      return RBTreeOrdering::EQ;\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -71,3 +71,3 @@\n-      if (a < b) return RBTreeOrdering::less;\n-      if (a > b) return RBTreeOrdering::greater;\n-      return RBTreeOrdering::equal;\n+      if (a < b) return RBTreeOrdering::LT;\n+      if (a > b) return RBTreeOrdering::GT;\n+      return RBTreeOrdering::EQ;\n","filename":"src\/hotspot\/share\/opto\/printinlining.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,3 +38,3 @@\n-\/\/     - RBTreeOrdering::less when a < b\n-\/\/     - RBTreeOrdering::equal when a == b\n-\/\/     - RBTreeOrdering::greater when a > b\n+\/\/     - RBTreeOrdering::LT when a < b\n+\/\/     - RBTreeOrdering::EQ when a == b\n+\/\/     - RBTreeOrdering::GT when a > b\n@@ -53,3 +53,3 @@\n-\/\/     - RBTreeOrdering::less when a < b\n-\/\/     - RBTreeOrdering::equal when a == b\n-\/\/     - RBTreeOrdering::greater when a > b\n+\/\/     - RBTreeOrdering::LT when a < b\n+\/\/     - RBTreeOrdering::EQ when a == b\n+\/\/     - RBTreeOrdering::GT when a > b\n@@ -65,1 +65,1 @@\n-enum class RBTreeOrdering : int { less = -1, equal = 0, greater = 1 };\n+enum class RBTreeOrdering : int { LT, EQ, GT };\n@@ -128,1 +128,1 @@\n-  template <typename NodeType, typename NodeVerifier, typename USER_VERIFIER>\n+  template <typename NodeType, typename NODE_VERIFIER, typename USER_VERIFIER>\n@@ -131,1 +131,1 @@\n-              size_t& tree_depth, bool expect_visited, NodeVerifier verifier,\n+              size_t& tree_depth, bool expect_visited, NODE_VERIFIER verifier,\n@@ -245,1 +245,1 @@\n-    assert(COMPARATOR::cmp(a, b) != RBTreeOrdering::greater, \"key a must be less or equal to key b\");\n+    assert(COMPARATOR::cmp(a, b) != RBTreeOrdering::GT, \"key a must be less or equal to key b\");\n@@ -270,2 +270,2 @@\n-  template <typename NodeVerifier, typename USER_VERIFIER>\n-  void verify_self(NodeVerifier verifier, const USER_VERIFIER& extra_verifier) const;\n+  template <typename NODE_VERIFIER, typename USER_VERIFIER>\n+  void verify_self(NODE_VERIFIER verifier, const USER_VERIFIER& extra_verifier) const;\n@@ -454,1 +454,1 @@\n-    verify_self([](const NodeType* a, const NodeType* b){ return COMPARATOR::cmp(a->key(), b->key()) == RBTreeOrdering::less; }, extra_verifier);\n+    verify_self([](const NodeType* a, const NodeType* b){ return COMPARATOR::cmp(a->key(), b->key()) == RBTreeOrdering::LT; }, extra_verifier);\n@@ -480,0 +480,8 @@\n+  RBTree(const RBTree& other) : BaseType(), _allocator() {\n+    assert(std::is_copy_constructible<V>(), \"Value type must be copy-constructible\");\n+    other.visit_in_order([&](auto node) {\n+      this->upsert(node->key(), node->val());\n+      return true;\n+    });\n+  }\n+  RBTree& operator=(const RBTree& other) = delete;\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-template <typename NodeType, typename NodeVerifier, typename USER_VERIFIER>\n+template <typename NodeType, typename NODE_VERIFIER, typename USER_VERIFIER>\n@@ -129,1 +129,1 @@\n-    size_t& tree_depth, bool expect_visited, NodeVerifier verifier, const USER_VERIFIER& extra_verifier) const {\n+    size_t& tree_depth, bool expect_visited, NODE_VERIFIER verifier, const USER_VERIFIER& extra_verifier) const {\n@@ -199,2 +199,2 @@\n-      if ((parent_cmp != RBTreeOrdering::greater && hint_cmp == RBTreeOrdering::less) ||\n-          (parent_cmp != RBTreeOrdering::less    && hint_cmp == RBTreeOrdering::greater)) {\n+      if ((parent_cmp != RBTreeOrdering::GT && hint_cmp == RBTreeOrdering::LT) ||\n+          (parent_cmp != RBTreeOrdering::LT    && hint_cmp == RBTreeOrdering::GT)) {\n@@ -218,1 +218,1 @@\n-    if (key_cmp_k == RBTreeOrdering::equal) {\n+    if (key_cmp_k == RBTreeOrdering::EQ) {\n@@ -223,1 +223,1 @@\n-    if (key_cmp_k == RBTreeOrdering::less) {\n+    if (key_cmp_k == RBTreeOrdering::LT) {\n@@ -665,2 +665,2 @@\n-template <typename NodeVerifier, typename USER_VERIFIER>\n-inline void AbstractRBTree<K, NodeType, COMPARATOR>::verify_self(NodeVerifier verifier, const USER_VERIFIER& extra_verifier) const {\n+template <typename NODE_VERIFIER, typename USER_VERIFIER>\n+inline void AbstractRBTree<K, NodeType, COMPARATOR>::verify_self(NODE_VERIFIER verifier, const USER_VERIFIER& extra_verifier) const {\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -40,3 +40,3 @@\n-      if (a < b) return RBTreeOrdering::less;\n-      if (a > b) return RBTreeOrdering::greater;\n-      return RBTreeOrdering::equal;\n+      if (a < b) return RBTreeOrdering::LT;\n+      if (a > b) return RBTreeOrdering::GT;\n+      return RBTreeOrdering::EQ;\n@@ -52,3 +52,3 @@\n-      if (a < b) return RBTreeOrdering::greater;\n-      if (a > b) return RBTreeOrdering::less;\n-      return RBTreeOrdering::equal;\n+      if (a < b) return RBTreeOrdering::GT;\n+      if (a > b) return RBTreeOrdering::LT;\n+      return RBTreeOrdering::EQ;\n@@ -60,3 +60,3 @@\n-      if (a < b) return RBTreeOrdering::less;\n-      if (a > b) return RBTreeOrdering::greater;\n-      return RBTreeOrdering::equal;\n+      if (a < b) return RBTreeOrdering::LT;\n+      if (a > b) return RBTreeOrdering::GT;\n+      return RBTreeOrdering::EQ;\n@@ -103,3 +103,3 @@\n-      if (a < b) return RBTreeOrdering::less;\n-      if (a > b) return RBTreeOrdering::greater;\n-      return RBTreeOrdering::equal;\n+      if (a < b) return RBTreeOrdering::LT;\n+      if (a > b) return RBTreeOrdering::GT;\n+      return RBTreeOrdering::EQ;\n@@ -999,3 +999,3 @@\n-    if (ai < bi) return RBTreeOrdering::less;\n-    if (ai > bi) return RBTreeOrdering::greater;\n-    return RBTreeOrdering::equal;\n+    if (ai < bi) return RBTreeOrdering::LT;\n+    if (ai > bi) return RBTreeOrdering::GT;\n+    return RBTreeOrdering::EQ;\n@@ -1036,3 +1036,3 @@\n-    if (a < b) return RBTreeOrdering::less;\n-    if (a > b) return RBTreeOrdering::greater;\n-    return RBTreeOrdering::equal;\n+    if (a < b) return RBTreeOrdering::LT;\n+    if (a > b) return RBTreeOrdering::GT;\n+    return RBTreeOrdering::EQ;\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":18,"deletions":18,"binary":false,"changes":36,"status":"modified"}]}