{"files":[{"patch":"@@ -121,1 +121,1 @@\n-bool ZMappedCache::EntryCompare::less(const IntrusiveRBNode* a, const IntrusiveRBNode* b) {\n+bool ZMappedCache::EntryCompare::less_than(const IntrusiveRBNode* a, const IntrusiveRBNode* b) {\n@@ -171,1 +171,1 @@\n-  if (_left_most == nullptr || EntryCompare::less(node, _left_most)) {\n+  if (_left_most == nullptr || EntryCompare::less_than(node, _left_most)) {\n@@ -176,1 +176,1 @@\n-  if (_right_most == nullptr || EntryCompare::less(_right_most, node)) {\n+  if (_right_most == nullptr || EntryCompare::less_than(_right_most, node)) {\n","filename":"src\/hotspot\/share\/gc\/z\/zMappedCache.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-    static bool less(const IntrusiveRBNode*  a, const IntrusiveRBNode* b);\n+    static bool less_than(const IntrusiveRBNode*  a, const IntrusiveRBNode* b);\n","filename":"src\/hotspot\/share\/gc\/z\/zMappedCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-\/\/ A second static function `less(const IntrusiveRBNode* a, const IntrusiveRBNode* b)`\n+\/\/ A second static function `less_than(const IntrusiveRBNode* a, const IntrusiveRBNode* b)`\n@@ -56,1 +56,1 @@\n-\/\/ A second static function `less(const RBNode<K, V>* a, const RBNode<K, V>* b)`\n+\/\/ A second static function `less_than(const RBNode<K, V>* a, const RBNode<K, V>* b)`\n@@ -230,1 +230,1 @@\n-  bool less(const NodeType* a, const NodeType* b) const {\n+  bool less_than(const NodeType* a, const NodeType* b) const {\n@@ -235,2 +235,2 @@\n-  bool less(const NodeType* a, const NodeType* b) const {\n-    return COMPARATOR::less(a, b);\n+  bool less_than(const NodeType* a, const NodeType* b) const {\n+    return COMPARATOR::less_than(a, b);\n@@ -448,1 +448,1 @@\n-    verify_self([](const NodeType* a, const NodeType* b){ return COMPARATOR::less(a, b);}, extra_verifier);\n+    verify_self([](const NodeType* a, const NodeType* b){ return COMPARATOR::less_than(a, b);}, extra_verifier);\n","filename":"src\/hotspot\/share\/utilities\/rbTree.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -555,1 +555,1 @@\n-    assert(less(static_cast<const NodeType*>(new_node), static_cast<const NodeType*>(new_node->parent())), \"new node not < parent\");\n+    assert(less_than(static_cast<const NodeType*>(new_node), static_cast<const NodeType*>(new_node->parent())), \"new node not < parent\");\n@@ -557,1 +557,1 @@\n-    assert(less(static_cast<const NodeType*>(new_node->parent()), static_cast<const NodeType*>(new_node)), \"new node not > parent\");\n+    assert(less_than(static_cast<const NodeType*>(new_node->parent()), static_cast<const NodeType*>(new_node)), \"new node not > parent\");\n@@ -563,1 +563,1 @@\n-    assert(less(static_cast<const NodeType*>(new_node->_left), static_cast<const NodeType*>(new_node)), \"left child not < new node\");\n+    assert(less_than(static_cast<const NodeType*>(new_node->_left), static_cast<const NodeType*>(new_node)), \"left child not < new node\");\n@@ -567,1 +567,1 @@\n-    assert(less(static_cast<const NodeType*>(new_node), static_cast<const NodeType*>(new_node->_right)), \"right child not > new node\");\n+    assert(less_than(static_cast<const NodeType*>(new_node), static_cast<const NodeType*>(new_node->_right)), \"right child not > new node\");\n","filename":"src\/hotspot\/share\/utilities\/rbTree.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,1 +45,1 @@\n-    static bool less(const RBTreeIntNode* a, const RBTreeIntNode* b) {\n+    static bool less_than(const RBTreeIntNode* a, const RBTreeIntNode* b) {\n@@ -109,1 +109,1 @@\n-    static bool less(const IntrusiveTreeNode* a, const IntrusiveTreeNode* b) {\n+    static bool less_than(const IntrusiveTreeNode* a, const IntrusiveTreeNode* b) {\n","filename":"test\/hotspot\/gtest\/utilities\/test_rbtree.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}