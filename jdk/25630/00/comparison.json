{"files":[{"patch":"@@ -57,0 +57,1 @@\n+import java.util.function.Supplier;\n@@ -490,1 +491,14 @@\n-    private volatile Set<String> keySet;\n+    private final Supplier<Set<String>> keySet = StableValue.supplier(\n+            new Supplier<>() { public Set<String> get() { return keySet0(); }});\n+\n+    private Set<String> keySet0() {\n+        final Set<String> keys = new HashSet<>();\n+        final Enumeration<String> enumKeys = getKeys();\n+        while (enumKeys.hasMoreElements()) {\n+            final String key = enumKeys.nextElement();\n+            if (handleGetObject(key) != null) {\n+                keys.add(key);\n+            }\n+        }\n+        return keys;\n+    }\n@@ -2301,16 +2315,1 @@\n-        if (keySet == null) {\n-            synchronized (this) {\n-                if (keySet == null) {\n-                    Set<String> keys = new HashSet<>();\n-                    Enumeration<String> enumKeys = getKeys();\n-                    while (enumKeys.hasMoreElements()) {\n-                        String key = enumKeys.nextElement();\n-                        if (handleGetObject(key) != null) {\n-                            keys.add(key);\n-                        }\n-                    }\n-                    keySet = keys;\n-                }\n-            }\n-        }\n-        return keySet;\n+        return keySet.get();\n","filename":"src\/java.base\/share\/classes\/java\/util\/ResourceBundle.java","additions":16,"deletions":17,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.util.function.Supplier;\n@@ -52,1 +53,9 @@\n-    private volatile Set<String> keys;\n+    private final Supplier<Set<String>> keys = StableValue.supplier(\n+            new Supplier<>() { public Set<String> get() { return keys0(); }});\n+\n+    private Set<String> keys0() {\n+        final ResourceBundle info = getBreakIteratorInfo();\n+        final Set<String> k = info.keySet();\n+        k.removeAll(NON_DATA_KEYS);\n+        return k;\n+    }\n@@ -87,11 +96,1 @@\n-        if (keys == null) {\n-            ResourceBundle info = getBreakIteratorInfo();\n-            Set<String> k = info.keySet();\n-            k.removeAll(NON_DATA_KEYS);\n-            synchronized (this) {\n-                if (keys == null) {\n-                    keys = k;\n-                }\n-            }\n-        }\n-        return keys;\n+        return keys.get();\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/BreakIteratorResourceBundle.java","additions":12,"deletions":13,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -47,0 +47,1 @@\n+import java.util.Objects;\n@@ -49,0 +50,2 @@\n+import java.util.function.Supplier;\n+\n@@ -72,6 +75,3 @@\n-        if (key == null) {\n-            throw new NullPointerException();\n-        }\n-\n-        loadLookupTablesIfNecessary();\n-        return lookup.get(key); \/\/ this class ignores locales\n+        Objects.requireNonNull(key);\n+        return lookup.get()\n+                .get(key); \/\/ this class ignores locales\n@@ -96,2 +96,2 @@\n-        loadLookupTablesIfNecessary();\n-        return lookup.keySet();\n+        return lookup.get()\n+                .keySet();\n@@ -102,14 +102,1 @@\n-        if (keyset != null) {\n-            return keyset;\n-        }\n-        Set<String> ks = createSet();\n-        ks.addAll(handleKeySet());\n-        if (parent != null) {\n-            ks.addAll(parent.keySet());\n-        }\n-        synchronized (this) {\n-            if (keyset == null) {\n-                keyset = ks;\n-            }\n-        }\n-        return keyset;\n+        return keyset.get();\n@@ -123,32 +110,0 @@\n-    \/**\n-     * Load lookup tables if they haven't been loaded already.\n-     *\/\n-    void loadLookupTablesIfNecessary() {\n-        if (lookup == null) {\n-            loadLookup();\n-        }\n-    }\n-\n-    \/**\n-     * We lazily load the lookup hashtable.  This function does the\n-     * loading.\n-     *\/\n-    private void loadLookup() {\n-        Object[][] contents = getContents();\n-        Map<String, Object> temp = createMap(contents.length);\n-        for (int i = 0; i < contents.length; ++i) {\n-            \/\/ key must be non-null String, value must be non-null\n-            String key = (String) contents[i][0];\n-            Object value = contents[i][1];\n-            if (key == null || value == null) {\n-                throw new NullPointerException();\n-            }\n-            temp.put(key, value);\n-        }\n-        synchronized (this) {\n-            if (lookup == null) {\n-                lookup = temp;\n-            }\n-        }\n-    }\n-\n@@ -167,2 +122,27 @@\n-    private volatile Map<String, Object> lookup;\n-    private volatile Set<String> keyset;\n+    private final Supplier<Map<String, Object>> lookup = StableValue.supplier(\n+            new Supplier<>() { public Map<String, Object> get() { return lookup0(); }});\n+\n+    private Map<String, Object> lookup0() {\n+        final Object[][] contents = getContents();\n+        final Map<String, Object> temp = createMap(contents.length);\n+        for (Object[] content : contents) {\n+            \/\/ key must be non-null String, value must be non-null\n+            final String key = Objects.requireNonNull((String) content[0]);\n+            final Object value = Objects.requireNonNull(content[1]);\n+            temp.put(key, value);\n+        }\n+        return temp;\n+    }\n+\n+    private final Supplier<Set<String>> keyset = StableValue.supplier(\n+            new Supplier<>() { public Set<String> get() { return keyset0(); }});\n+\n+    private Set<String> keyset0() {\n+        final Set<String> ks = createSet();\n+        ks.addAll(handleKeySet());\n+        if (parent != null) {\n+            ks.addAll(parent.keySet());\n+        }\n+        return ks;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/sun\/util\/resources\/OpenListResourceBundle.java","additions":37,"deletions":57,"binary":false,"changes":94,"status":"modified"}]}