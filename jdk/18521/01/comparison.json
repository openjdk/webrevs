{"files":[{"patch":"@@ -3080,0 +3080,17 @@\n+\n+class G1ZeroUnusedClosure: public HeapRegionClosure {\n+  size_t _used;\n+public:\n+  G1ZeroUnusedClosure() : _used(0) {}\n+  bool do_heap_region(HeapRegion* r) {\n+    _used += r->zero_unused();\n+    return false;\n+  }\n+  size_t result() { return _used; }\n+};\n+\n+size_t G1CollectedHeap::zero_unused() {\n+  G1ZeroUnusedClosure blk;\n+  heap_region_iterate(&blk);\n+  return blk.result();\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -935,0 +935,2 @@\n+  size_t zero_unused() override;\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -709,0 +709,4 @@\n+size_t HeapRegion::zero_unused() {\n+  return SpaceMangler::zero_unused(MemRegion(top(), end()));\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -163,0 +163,2 @@\n+  size_t zero_unused();\n+\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegion.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -145,0 +145,8 @@\n+size_t MutableNUMASpace::zero_unused() {\n+  size_t res = 0;\n+  for (int i = 0; i < lgrp_spaces()->length(); i++) {\n+    res += lgrp_spaces()->at(i)->space()->zero_unused();\n+  }\n+  return res;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -187,0 +187,2 @@\n+  virtual size_t zero_unused();\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -187,0 +187,4 @@\n+size_t MutableSpace::zero_unused() {\n+  return mangler()->zero_unused();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -122,0 +122,2 @@\n+  virtual size_t zero_unused();\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableSpace.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -861,0 +861,8 @@\n+size_t ParallelScavengeHeap::zero_unused() {\n+  size_t res = young_gen()->eden_space()->zero_unused();\n+  res += young_gen()->to_space()->zero_unused();\n+  res += young_gen()->from_space()->zero_unused();\n+  res += old_gen()->object_space()->zero_unused();\n+  return res;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -257,0 +257,2 @@\n+  size_t zero_unused() override;\n+\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1012,0 +1012,7 @@\n+size_t DefNewGeneration::zero_unused() {\n+  size_t res = eden()->zero_unused();\n+  res += to()->zero_unused();\n+  res += from()->zero_unused();\n+  return res;\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":7,"deletions":0,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -239,0 +239,2 @@\n+  virtual size_t zero_unused();\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -166,0 +166,2 @@\n+  virtual size_t zero_unused() = 0;\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/generation.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1052,0 +1052,18 @@\n+\n+class GenGCZeroUnusedClosure: public SerialHeap::GenClosure {\n+  size_t res;\n+ public:\n+   GenGCZeroUnusedClosure() : res(0) {}\n+  void do_generation(Generation* gen) {\n+    res += gen->zero_unused();\n+  }\n+  size_t getResult() {\n+    return res;\n+  }\n+};\n+size_t SerialHeap::zero_unused() {\n+  GenGCZeroUnusedClosure blk;\n+  blk.do_generation(_young_gen);\n+  blk.do_generation(_old_gen);\n+  return blk.getResult();\n+}\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -327,0 +327,2 @@\n+  virtual size_t zero_unused() override;\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -515,0 +515,4 @@\n+size_t TenuredGeneration::zero_unused() {\n+  return _the_space->zero_unused();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -163,0 +163,2 @@\n+  virtual size_t zero_unused();\n+\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -311,0 +311,5 @@\n+\n+  virtual size_t zero_unused() {\n+    return size_t(-1);\n+  }\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/collectedHeap.hpp","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -110,0 +110,4 @@\n+size_t ContiguousSpace::zero_unused() {\n+  return mangler()->zero_unused();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shared\/space.cpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -169,0 +169,1 @@\n+  size_t zero_unused();\n","filename":"src\/hotspot\/share\/gc\/shared\/space.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -140,0 +140,12 @@\n+\n+size_t SpaceMangler::zero_unused() {\n+  size_t len = pointer_delta(end(), top(), 1);\n+  Copy::zero_to_bytes(top(), len);\n+  return len;\n+}\n+\n+size_t SpaceMangler::zero_unused(MemRegion mr) {\n+  size_t len = mr.byte_size();\n+  Copy::zero_to_bytes(mr.start(), len);\n+  return len;\n+}\n","filename":"src\/hotspot\/share\/gc\/shared\/spaceDecorator.cpp","additions":12,"deletions":0,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -109,0 +109,2 @@\n+  size_t zero_unused();\n+  static size_t zero_unused(MemRegion mr);\n","filename":"src\/hotspot\/share\/gc\/shared\/spaceDecorator.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1173,0 +1173,16 @@\n+class ShenandoahZeroUnusedClosure: public ShenandoahHeapRegionClosure {\n+  size_t _used;\n+public:\n+  ShenandoahZeroUnusedClosure() : _used(0) {}\n+  void heap_region_do(ShenandoahHeapRegion* r) {\n+    _used += r->zero_unused();\n+  }\n+  size_t result() { return _used; }\n+};\n+\n+size_t ShenandoahHeap::zero_unused() {\n+  ShenandoahZeroUnusedClosure blk;\n+  heap_region_iterate(&blk);\n+  return blk.result();\n+}\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -676,0 +676,2 @@\n+  size_t zero_unused() override;\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -671,0 +671,8 @@\n+\n+size_t ShenandoahHeapRegion::zero_unused() {\n+  if (is_committed()) {\n+    return SpaceMangler::zero_unused(MemRegion(top(), end()));\n+  } else {\n+    return 0;\n+  }\n+}\n\\ No newline at end of file\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -390,0 +390,2 @@\n+  size_t zero_unused();\n+\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -113,0 +113,1 @@\n+  template(ZeroUnusedMemory)                      \\\n","filename":"src\/hotspot\/share\/runtime\/vmOperation.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -151,0 +151,1 @@\n+  DCmdFactory::register_DCmdFactory(new DCmdFactoryImpl<ZeroUnusedMemoryDCmd>(full_export, true, false));\n@@ -1282,0 +1283,26 @@\n+\n+class VM_ZeroUnusedMemory : public VM_GC_Sync_Operation {\n+private:\n+  outputStream* _out;\n+public:\n+  VM_ZeroUnusedMemory(outputStream* out) : _out(out) {}\n+\n+  virtual VMOp_Type type() const { return VMOp_ZeroUnusedMemory; }\n+\n+  virtual void doit() {\n+    assert(SafepointSynchronize::is_at_safepoint(), \"must be a safepoint\");\n+    size_t res = Universe::heap()->zero_unused();\n+    if (res == size_t(-1)) {\n+      _out->print_cr(\"Zeroing unused memory not supported by %s\", Universe::heap()->name());\n+    } else {\n+      _out->print_cr(\"Successfully zeroed \" SIZE_FORMAT \" bytes of unused heap\", res);\n+    }\n+  }\n+};\n+\n+void ZeroUnusedMemoryDCmd::execute(DCmdSource source, TRAPS) {\n+  Universe::heap()->collect(GCCause::_dcmd_gc_run);\n+  \/\/ Do this at a safepoint to avoid that GC cuncurrently uncommits pages.\n+  VM_ZeroUnusedMemory vmop(output());\n+  VMThread::execute(&vmop);\n+}\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -1056,0 +1056,19 @@\n+class ZeroUnusedMemoryDCmd : public DCmd {\n+public:\n+  ZeroUnusedMemoryDCmd(outputStream* output, bool heap) : DCmd(output, heap) {}\n+  static const char* name() {\n+    return \"System.zero_unused_memory\";\n+  }\n+  static const char* description() {\n+    return \"Call System.gc() and zero unused memory.\";\n+  }\n+  static const char* impact() {\n+    return \"Medium: depends on the size of the unallocated part of the committed heap\";\n+  }\n+  static const JavaPermission permission() {\n+    JavaPermission p = { \"java.lang.management.ManagementPermission\", \"control\", nullptr };\n+    return p;\n+  }\n+  void execute(DCmdSource source, TRAPS) override;\n+};\n+\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}