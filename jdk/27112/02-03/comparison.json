{"files":[{"patch":"@@ -1832,2 +1832,2 @@\n-  \/\/ The post_method_exit_transition always makes transition to vm and back\n-  \/\/ where GC can happen. So it is needed to preserve result  and then restore it\n+  \/\/ This method always makes transition to vm and back where GC can happen.\n+  \/\/ So it is needed to preserve result  and then restore it\n@@ -1848,8 +1848,0 @@\n-  post_method_exit_transition(thread, mh, type, result, value);\n-  if (result.not_null() && !mh->is_native()) {\n-    *(oop*)current_frame.interpreter_frame_tos_address() = result();\n-  }\n-}\n-\n-void JvmtiExport::post_method_exit_transition(JavaThread* thread, methodHandle mh,\n-                                    BasicType type, Handle result, jvalue value) {\n@@ -1860,9 +1852,6 @@\n-    if (state == nullptr || !state->is_interp_only_mode()) {\n-      \/\/ The transition from vm to java\n-      return;\n-    }\n-\n-    if (state->is_enabled(JVMTI_EVENT_METHOD_EXIT)) {\n-      \/\/ Deferred saving Object result into value.\n-      if (is_reference_type(type)) {\n-       value.l = JNIHandles::make_local(thread, result());\n+    if (state != nullptr && state->is_interp_only_mode()) {\n+      if (state->is_enabled(JVMTI_EVENT_METHOD_EXIT)) {\n+        \/\/ Deferred saving Object result into value.\n+        if (is_reference_type(type)) {\n+          value.l = JNIHandles::make_local(thread, result());\n+        }\n@@ -1870,1 +1859,0 @@\n-    }\n@@ -1872,3 +1860,3 @@\n-    \/\/ Do not allow NotifyFramePop to add new FramePop event request at\n-    \/\/ depth 0 as it is already late in the method exiting dance.\n-    state->set_top_frame_is_exiting();\n+      \/\/ Do not allow NotifyFramePop to add new FramePop event request at\n+      \/\/ depth 0 as it is already late in the method exiting dance.\n+      state->set_top_frame_is_exiting();\n@@ -1876,1 +1864,2 @@\n-    post_method_exit_inner(thread, mh, state, false \/* not exception exit *\/, value);\n+      post_method_exit_inner(thread, mh, state, false \/* not exception exit *\/, value);\n+    }\n@@ -1878,4 +1867,8 @@\n-\n-  \/\/ The JRT_BLOCK_END can safepoint in ThreadInVMfromJava desctructor. Now it is safe to allow\n-  \/\/ adding FramePop event requests as no safepoint can happen before removing activation.\n-  state->clr_top_frame_is_exiting();\n+  if (state != nullptr && state->is_interp_only_mode()) {\n+    \/\/ The JRT_BLOCK_END can safepoint in ThreadInVMfromJava desctructor. Now it is safe to allow\n+    \/\/ adding FramePop event requests as no safepoint can happen before removing activation.\n+    state->clr_top_frame_is_exiting();\n+  }\n+  if (result.not_null() && !mh->is_native()) {\n+    *(oop*)current_frame.interpreter_frame_tos_address() = result();\n+  }\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.cpp","additions":21,"deletions":28,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -213,6 +213,0 @@\n-  static void post_method_exit_transition(JavaThread* thread,\n-                                          methodHandle mh,\n-                                          BasicType type,\n-                                          Handle result,\n-                                          jvalue value);\n-\n","filename":"src\/hotspot\/share\/prims\/jvmtiExport.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}