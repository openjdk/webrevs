{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,2 +125,0 @@\n-    private static final int dump = 0; \/\/ > 0 r, > 1 rw\n-\n@@ -130,1 +128,1 @@\n-    private boolean v3 = true;       \/\/ Set in setV3()\n+    private boolean v3 = true;     \/\/ Set in setV3()\n@@ -133,1 +131,1 @@\n-                         \/\/ used by StartTlsResponse when creating an SSL socket\n+                               \/\/ used by StartTlsResponse when creating an SSL socket\n@@ -135,1 +133,1 @@\n-                         \/\/ used by StartTlsResponse when creating an SSL socket\n+                               \/\/ used by StartTlsResponse when creating an SSL socket\n@@ -327,1 +325,1 @@\n-                                          int connectTimeout) throws Exception {\n+                                          int connectTimeout) throws IOException {\n@@ -330,0 +328,1 @@\n+        \/\/ if timeout is supplied, try to use unconnected socket for connecting with timeout\n@@ -331,8 +330,0 @@\n-            \/\/ create unconnected socket and then connect it if timeout\n-            \/\/ is supplied\n-            InetSocketAddress endpoint =\n-                    createInetSocketAddress(host, port);\n-            \/\/ unconnected socket\n-            socket = factory.createSocket();\n-            \/\/ connect socket with a timeout\n-            socket.connect(endpoint, connectTimeout);\n@@ -340,2 +331,15 @@\n-                System.err.println(\"Connection: creating socket with \" +\n-                        \"a connect timeout\");\n+                System.err.println(\"Connection: creating socket with a connect timeout\");\n+            }\n+            try {\n+                \/\/ unconnected socket\n+                socket = factory.createSocket();\n+            } catch (IOException e) {\n+                \/\/ unconnected socket is likely not supported by the SocketFactory\n+                if (debug) {\n+                    System.err.println(\"Connection: unconnected socket not supported by SocketFactory\");\n+                }\n+            }\n+            if (socket != null) {\n+                InetSocketAddress endpoint = createInetSocketAddress(host, port);\n+                \/\/ connect socket with a timeout\n+                socket.connect(endpoint, connectTimeout);\n@@ -344,0 +348,2 @@\n+\n+        \/\/ either no timeout was supplied or unconnected socket did not work\n@@ -346,1 +352,0 @@\n-            socket = factory.createSocket(host, port);\n@@ -348,2 +353,1 @@\n-                System.err.println(\"Connection: creating connected socket with\" +\n-                        \" no connect timeout\");\n+                System.err.println(\"Connection: creating connected socket with no connect timeout\");\n@@ -351,0 +355,1 @@\n+            socket = factory.createSocket(host, port);\n@@ -359,1 +364,1 @@\n-    private void initialSSLHandshake(SSLSocket sslSocket , int connectTimeout) throws Exception {\n+    private void initialSSLHandshake(SSLSocket sslSocket, int connectTimeout) throws Exception {\n","filename":"src\/java.naming\/share\/classes\/com\/sun\/jndi\/ldap\/Connection.java","additions":26,"deletions":21,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,6 @@\n+ *     <li>{@code java.naming.ldap.factory.socket}:\n+ *         <br>The value of this environment property specifies the fully\n+ *         qualified class name of the socket factory used by the LDAP provider.\n+ *         This class must implement the javax.net.SocketFactory abstract class.\n+ *         By default the environment property is not set.\n+ *     <\/li>\n@@ -40,4 +46,4 @@\n- *         <br>The value of this property is the string representation\n- *         of an integer representing the connection timeout in\n- *         milliseconds. If the LDAP provider cannot establish a\n- *         connection within that period, it aborts the connection attempt.\n+ *         <br>The value of this environment property is the string representation\n+ *         of an integer specifying the connection timeout in milliseconds.\n+ *         If the LDAP provider cannot establish a connection within that period,\n+ *         it aborts the connection attempt.\n@@ -50,0 +56,4 @@\n+ *         <br> If a custom socket factory is provided via environment property\n+ *         {@code java.naming.ldap.factory.socket} and unconnected sockets\n+ *         are not supported, the specified timeout is ignored\n+ *         and the provider behaves as if no connection timeout was set.\n@@ -53,1 +63,1 @@\n- *         of an integer representing the read timeout in milliseconds\n+ *         of an integer specifying the read timeout in milliseconds\n","filename":"src\/java.naming\/share\/classes\/module-info.java","additions":16,"deletions":6,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,7 +24,0 @@\n-import jdk.test.lib.net.URIBuilder;\n-\n-import javax.naming.Context;\n-import javax.naming.ldap.InitialLdapContext;\n-import javax.naming.ldap.LdapContext;\n-import javax.net.SocketFactory;\n-import javax.net.ssl.SSLServerSocketFactory;\n@@ -35,0 +28,1 @@\n+import java.lang.reflect.Field;\n@@ -39,0 +33,1 @@\n+import java.net.UnknownHostException;\n@@ -41,0 +36,9 @@\n+import javax.naming.Context;\n+import javax.naming.NamingException;\n+import javax.naming.ldap.InitialLdapContext;\n+import javax.naming.ldap.LdapContext;\n+import javax.net.SocketFactory;\n+import javax.net.ssl.SSLServerSocketFactory;\n+\n+import jdk.test.lib.net.URIBuilder;\n+\n@@ -43,1 +47,1 @@\n- * @bug 8314063\n+ * @bug 8314063 8325579\n@@ -45,8 +49,12 @@\n- * @summary For LDAPs connection, if the value of com.sun.jndi.ldap.connect.timeout is\n- * set too small or not an optimal value for the system, after the socket is created and\n- * connected to the server, but the handshake between the client and server fails due to\n- * socket time out, the opened socket is not closed properly. In this test case, the server\n- * is forced to sleep ten seconds and connection time out for client is one second. This\n- * will allow the socket opened and connected, and give the chance for the handshake to be\n- * timed out. Before this fix, the socket is kept opened. Right now the exception will be\n- * caught and the socket will be closed.\n+ * @summary Several scenarios for LDAP connection handshaking are tested here.\n+ * We test different combinations of com.sun.jndi.ldap.connect.timeout values\n+ * and server behavior, e.g. a server that replies immediately vs a server that\n+ * delays the initial answer. We also try to check whether the underlying Socket\n+ * object will be closed correctly.\n+ * We expect exceptions when using a custom SocketFactory that does not supply\n+ * SSL Sockets. In that case we instrument the supplied Socket object and check\n+ * if it was properly closed after the handshake failure.\n+ * When the value of com.sun.jndi.ldap.connect.timeout is set lower than the\n+ * server delay, we also expect an exception.\n+ * In all other cases a valid Context object shall be returned and we check\n+ * whether the socket is closed after closing the Context.\n@@ -54,6 +62,2 @@\n- * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactory true 6000\n- * @run main\/othervm LdapSSLHandshakeFailureTest -1000 true 6000\n- * @run main\/othervm LdapSSLHandshakeFailureTest -1000 false 6000\n- * @run main\/othervm LdapSSLHandshakeFailureTest 2000 false 6000\n- * @run main\/othervm LdapSSLHandshakeFailureTest 0 true 6000\n- * @run main\/othervm LdapSSLHandshakeFailureTest 0 false 6000\n+ * @modules java.naming\/javax.naming:+open java.naming\/com.sun.jndi.ldap:+open\n+ * @run main\/othervm LdapSSLHandshakeFailureTest\n@@ -61,1 +65,13 @@\n- * @run main\/othervm LdapSSLHandshakeFailureTest false\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 0\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 0 true\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 2000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest 2000 true\n+ * @run main\/othervm LdapSSLHandshakeFailureTest -1000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactoryNoUnconnected\n+ * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactoryNoUnconnected 1000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactoryNoUnconnected true\n+ * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactoryNoUnconnected 1000 true\n+ * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactory\n+ * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactory 1000\n+ * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactory true\n+ * @run main\/othervm LdapSSLHandshakeFailureTest LdapSSLHandshakeFailureTest$CustomSocketFactory 1000 true\n@@ -65,1 +81,13 @@\n-    private static String SOCKET_CLOSED_MSG = \"The socket has been closed.\";\n+    private static int SERVER_SLEEPING_TIME = 4000;\n+    private static String progArgs[];\n+    private static int curArg;\n+    private static String customSocketFactory;\n+    private static Integer connectTimeout;\n+    private static boolean serverSlowDown;\n+\n+    private static String popArg() {\n+        if (curArg >= progArgs.length) {\n+                return null;\n+        }\n+        return progArgs[curArg++];\n+    }\n@@ -67,1 +95,3 @@\n-    private static int serverSleepingTime = 5000;\n+    private static void parseArgs(String args[]) {\n+        progArgs = args;\n+        curArg = 0;\n@@ -69,1 +99,3 @@\n-    public static void main(String args[]) throws Exception {\n+        String arg = popArg();\n+        if (arg == null)\n+            return;\n@@ -71,5 +103,5 @@\n-        \/\/ Set the keystores\n-        setKeyStore();\n-        boolean serverSlowDown = Boolean.valueOf(args[0]);\n-        if (args.length == 2) {\n-            serverSlowDown = Boolean.valueOf(args[1]);\n+        if (arg.startsWith(\"LdapSSLHandshakeFailureTest$CustomSocketFactory\")) {\n+            customSocketFactory = arg;\n+            arg = popArg();\n+            if (arg == null)\n+                return;\n@@ -78,2 +110,7 @@\n-        if (args.length == 3) {\n-            serverSleepingTime = Integer.valueOf(args[2]);\n+        try {\n+            connectTimeout = Integer.valueOf(arg);\n+            arg = popArg();\n+            if (arg == null)\n+                return;\n+        } catch (NumberFormatException e) {\n+            \/\/ then it must be the boolean arg for serverSlowDown\n@@ -82,2 +119,14 @@\n-        boolean hasCustomSocketFactory = args[0]\n-                .equals(\"LdapSSLHandshakeFailureTest$CustomSocketFactory\");\n+        serverSlowDown = Boolean.valueOf(arg);\n+    }\n+\n+    public static void main(String args[]) {\n+        parseArgs(args);\n+\n+        System.out.println(\"Testing \" +\n+            (customSocketFactory == null ? \"without custom SocketFactory\" : \"with custom SocketFactory \\\"\" + customSocketFactory + \"\\\"\") +\n+            \", \" + (connectTimeout == null ? \"no connectTimeout\" : \"connectTimeout=\" + connectTimeout + \"\") +\n+            \", serverSlowDown=\" + serverSlowDown);\n+\n+        \/\/ Set the keystores\n+        setKeyStore();\n+\n@@ -85,1 +134,1 @@\n-        try (TestServer server = new TestServer(serverSlowDown, serverSleepingTime)) {\n+        try (TestServer server = new TestServer(serverSlowDown)) {\n@@ -96,3 +145,2 @@\n-            if (hasCustomSocketFactory) {\n-                env.put(\"java.naming.ldap.factory.socket\", args[0]);\n-                env.put(\"com.sun.jndi.ldap.connect.timeout\", \"1000\");\n+            if (customSocketFactory != null) {\n+                env.put(\"java.naming.ldap.factory.socket\", customSocketFactory);\n@@ -101,2 +149,2 @@\n-            if (args.length == 2 && !hasCustomSocketFactory) {\n-                env.put(\"com.sun.jndi.ldap.connect.timeout\", args[0]);\n+            if (connectTimeout != null) {\n+                env.put(\"com.sun.jndi.ldap.connect.timeout\", connectTimeout.toString());\n@@ -104,1 +152,0 @@\n-\n@@ -112,5 +159,9 @@\n-            } catch (Exception e) {\n-                if (CustomSocketFactory.customSocket.closeMethodCalledCount() > 0\n-                        && hasCustomSocketFactory\n-                        && Boolean.valueOf(args[1])) {\n-                    System.out.println(SOCKET_CLOSED_MSG);\n+            } catch (NamingException e) {\n+                if (customSocketFactory != null) {\n+                    System.out.println(\"Caught expected Exception with custom SocketFactory (no SSL Socket).\");\n+                    if (CustomSocketFactory.customSocket.closeMethodCalledCount() <= 0) {\n+                        System.err.println(\"Custom Socket was not closed.\");\n+                        System.exit(-1);\n+                    }\n+                } else if (connectTimeout > 0) {\n+                    System.out.println(\"Caught expected Exception with connectTimeout > 0.\");\n@@ -121,1 +172,3 @@\n-                if (ctx != null)\n+                if (ctx != null) {\n+                    System.out.println(\"Context was created, closing it.\");\n+                    Socket sock = getSocket(ctx);\n@@ -123,0 +176,4 @@\n+                    if (!checkSocketClosed(sock)) {\n+                        System.exit(-1);\n+                    }\n+                }\n@@ -124,0 +181,3 @@\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            System.exit(-1);\n@@ -127,2 +187,12 @@\n-    public static class CustomSocketFactory extends SocketFactory {\n-        private static CustomSocket customSocket;\n+    private static Socket getSocket(LdapContext ctx) throws Exception {\n+        Field defaultInitCtxField = ctx.getClass().getSuperclass().getSuperclass().getDeclaredField(\"defaultInitCtx\");\n+        defaultInitCtxField.setAccessible(true);\n+        Object defaultInitCtx = defaultInitCtxField.get(ctx);\n+        Field clntField = defaultInitCtx.getClass().getDeclaredField(\"clnt\");\n+        clntField.setAccessible(true);\n+        Object clnt = clntField.get(defaultInitCtx);\n+        Field connField = clnt.getClass().getDeclaredField(\"conn\");\n+        connField.setAccessible(true);\n+        Object conn = connField.get(clnt);\n+        return (Socket)conn.getClass().getDeclaredField(\"sock\").get(conn);\n+    }\n@@ -130,2 +200,7 @@\n-        public static CustomSocketFactory getDefault() {\n-            return new CustomSocketFactory();\n+    private static boolean checkSocketClosed(Socket s) throws Exception {\n+        if (s.isClosed()) {\n+            System.out.println(\"Socket is closed\");\n+            return true;\n+        } else {\n+            System.err.println(\"Socket isn't closed\");\n+            return false;\n@@ -133,0 +208,1 @@\n+    }\n@@ -134,4 +210,5 @@\n-        @Override\n-        public Socket createSocket() throws SocketException {\n-            customSocket = new CustomSocket();\n-            return customSocket;\n+    private static class CustomSocket extends Socket {\n+        private int closeMethodCalled;\n+\n+        public CustomSocket() {\n+            super();\n@@ -140,3 +217,6 @@\n-        @Override\n-        public Socket createSocket(String s, int timeout) {\n-            return customSocket;\n+        public CustomSocket(String s, int port) throws IOException {\n+            super(s, port);\n+        }\n+\n+        public int closeMethodCalledCount() {\n+            return closeMethodCalled;\n@@ -146,3 +226,11 @@\n-        public Socket createSocket(String host, int port, InetAddress localHost,\n-                                   int localPort) {\n-            return customSocket;\n+        public void close() throws java.io.IOException {\n+            closeMethodCalled++;\n+            super.close();\n+        }\n+    }\n+\n+    public static class CustomSocketFactoryNoUnconnected extends SocketFactory {\n+        static CustomSocket customSocket;\n+\n+        public static SocketFactory getDefault() {\n+            return new CustomSocketFactoryNoUnconnected();\n@@ -152,1 +240,2 @@\n-        public Socket createSocket(InetAddress host, int port) {\n+        public Socket createSocket(String s, int port) throws IOException {\n+            customSocket = new CustomSocket(s, port);\n@@ -157,3 +246,3 @@\n-        public Socket createSocket(InetAddress address, int port,\n-                                   InetAddress localAddress, int localPort) {\n-            return customSocket;\n+        public Socket createSocket(String host, int port, InetAddress localHost, int localPort)\n+                throws IOException, UnknownHostException {\n+            return null;\n@@ -161,1 +250,0 @@\n-    }\n@@ -163,2 +251,4 @@\n-    private static class CustomSocket extends Socket {\n-        private int closeMethodCalled = 0;\n+        @Override\n+        public Socket createSocket(InetAddress host, int port) throws IOException {\n+            return null;\n+        }\n@@ -166,2 +256,4 @@\n-        public CustomSocket() {\n-            closeMethodCalled = 0;\n+        @Override\n+        public Socket createSocket(InetAddress address, int port, InetAddress localAddress, int localPort)\n+                throws IOException {\n+            return null;\n@@ -169,0 +261,1 @@\n+    }\n@@ -170,2 +263,3 @@\n-        public int closeMethodCalledCount() {\n-            return closeMethodCalled;\n+    public static class CustomSocketFactory extends CustomSocketFactoryNoUnconnected {\n+        public static SocketFactory getDefault() {\n+            return new CustomSocketFactory();\n@@ -175,3 +269,3 @@\n-        public void close() throws java.io.IOException {\n-            closeMethodCalled++;\n-            super.close();\n+        public Socket createSocket() throws SocketException {\n+            customSocket = new CustomSocket();\n+            return customSocket;\n@@ -182,0 +276,1 @@\n+        String keystore = System.getProperty(\"test.src\", \".\") + File.separator + \"ksWithSAN\";\n@@ -183,3 +278,1 @@\n-        String fileName = \"ksWithSAN\", dir = System.getProperty(\"test.src\", \".\") + File.separator;\n-\n-        System.setProperty(\"javax.net.ssl.keyStore\", dir + fileName);\n+        System.setProperty(\"javax.net.ssl.keyStore\", keystore);\n@@ -187,1 +280,1 @@\n-        System.setProperty(\"javax.net.ssl.trustStore\", dir + fileName);\n+        System.setProperty(\"javax.net.ssl.trustStore\", keystore);\n@@ -193,1 +286,0 @@\n-        private int sleepingTime;\n@@ -197,1 +289,1 @@\n-        private TestServer(boolean isForceToSleep, int sleepingTime) {\n+        private TestServer(boolean isForceToSleep) {\n@@ -199,1 +291,0 @@\n-            this.sleepingTime = sleepingTime;\n@@ -220,1 +311,1 @@\n-                    Thread.sleep(sleepingTime);\n+                    Thread.sleep(SERVER_SLEEPING_TIME);\n@@ -236,1 +327,1 @@\n-                e.printStackTrace();\n+                \/\/ e.printStackTrace();\n@@ -248,2 +339,0 @@\n-\n-\n","filename":"test\/jdk\/com\/sun\/jndi\/ldap\/LdapSSLHandshakeFailureTest.java","additions":177,"deletions":88,"binary":false,"changes":265,"status":"modified"}]}