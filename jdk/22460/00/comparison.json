{"files":[{"patch":"@@ -4211,1 +4211,1 @@\n-                            if (token.name() == names.transitive && !isTransitive) {\n+                            if (token.name() == names.transitive) {\n@@ -4216,0 +4216,3 @@\n+                                if (isTransitive) {\n+                                    log.error(DiagnosticFlag.SYNTAX, token.pos, Errors.RepeatedModifier);\n+                                }\n@@ -4218,3 +4221,0 @@\n-                            } else if (token.name() == names.transitive && isTransitive) {\n-                                log.error(DiagnosticFlag.SYNTAX, token.pos, Errors.RepeatedModifier);\n-                                break;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -26,0 +26,1 @@\n+ * @bug 8345248\n@@ -37,0 +38,2 @@\n+import java.util.List;\n+import java.util.Objects;\n@@ -259,0 +262,100 @@\n+\n+    @Test \/\/JDK-8345248:\n+    public void testTransitiveModuleName(Path base) throws Exception {\n+        Path lib = base.resolve(\"lib\");\n+        Path libSrc = lib.resolve(\"src\");\n+        Path transitive = libSrc.resolve(\"transitive\");\n+        tb.writeJavaFiles(transitive,\n+                \"\"\"\n+                module transitive {\n+                }\n+                \"\"\"\n+        );\n+        Path transitiveA = libSrc.resolve(\"transitive.a\");\n+        tb.writeJavaFiles(transitiveA,\n+                \"\"\"\n+                module transitive.a {\n+                }\n+                \"\"\"\n+        );\n+\n+        Path libClasses = lib.resolve(\"classes\");\n+        Files.createDirectories(libClasses);\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .options(\"--module-source-path\", libSrc.toString())\n+                .files(findJavaFiles(libSrc))\n+                .outdir(libClasses)\n+                .run()\n+                .writeAll();\n+\n+        Path src = base.resolve(\"src\");\n+        Path classes = base.resolve(\"classes\");\n+\n+        Files.createDirectories(classes);\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                module m {\n+                    requires transitive;\n+                    requires transitive.a;\n+                }\n+                \"\"\"\n+        );\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .options(\"--module-path\", libClasses.toString())\n+                .sourcepath(src)\n+                .files(findJavaFiles(src))\n+                .outdir(classes)\n+                .run()\n+                .writeAll();\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                module m {\n+                    requires transitive transitive;\n+                    requires transitive transitive.a;\n+                }\n+                \"\"\"\n+        );\n+\n+        new JavacTask(tb, Task.Mode.CMDLINE)\n+                .options(\"--module-path\", libClasses.toString())\n+                .sourcepath(src)\n+                .files(findJavaFiles(src))\n+                .outdir(classes)\n+                .run()\n+                .writeAll();\n+\n+        tb.writeJavaFiles(src,\n+                \"\"\"\n+                module m {\n+                    requires transitive transitive transitive;\n+                    requires transitive transitive transitive.a;\n+                }\n+                \"\"\"\n+        );\n+\n+        List<String> log = new JavacTask(tb, Task.Mode.CMDLINE)\n+                .options(\"--module-path\", libClasses.toString(),\n+                         \"-XDrawDiagnostics\")\n+                .sourcepath(src)\n+                .files(findJavaFiles(src))\n+                .outdir(classes)\n+                .run()\n+                .writeAll()\n+                .getOutputLines(Task.OutputKind.DIRECT);\n+\n+\n+        List<String> expected = List.of(\n+                \"module-info.java:2:25: compiler.err.repeated.modifier\",\n+                \"module-info.java:3:25: compiler.err.repeated.modifier\",\n+                \"2 errors\"\n+        );\n+\n+        if (!Objects.equals(expected, log)) {\n+            throw new Exception(\"expected: \" + expected +\n+                                \", but got: \" + log);\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/modules\/RequiresTransitiveTest.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"modified"}]}