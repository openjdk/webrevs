{"files":[{"patch":"@@ -802,1 +802,1 @@\n-bool AOTCodeCache::store_code_blob(CodeBlob& blob, AOTCodeEntry::Kind entry_kind, uint id, const char* name, int entry_offset_count, int* entry_offsets) {\n+bool AOTCodeCache::store_code_blob(CodeBlob& blob, AOTCodeEntry::Kind entry_kind, uint id, const char* name) {\n@@ -886,12 +886,0 @@\n-  \/\/ Write entries offsets\n-  n = cache->write_bytes(&entry_offset_count, sizeof(int));\n-  if (n != sizeof(int)) {\n-    return false;\n-  }\n-  for (int i = 0; i < entry_offset_count; i++) {\n-    uint32_t off = (uint32_t)entry_offsets[i];\n-    n = cache->write_bytes(&off, sizeof(uint32_t));\n-    if (n != sizeof(uint32_t)) {\n-      return false;\n-    }\n-  }\n@@ -906,1 +894,1 @@\n-bool AOTCodeCache::store_code_blob(CodeBlob& blob, AOTCodeEntry::Kind entry_kind, BlobId id, int entry_offset_count, int* entry_offsets) {\n+bool AOTCodeCache::store_code_blob(CodeBlob& blob, AOTCodeEntry::Kind entry_kind, BlobId id) {\n@@ -909,1 +897,1 @@\n-  return store_code_blob(blob, entry_kind, (uint)id, StubInfo::name(id), entry_offset_count, entry_offsets);\n+  return store_code_blob(blob, entry_kind, (uint)id, StubInfo::name(id));\n@@ -912,1 +900,1 @@\n-CodeBlob* AOTCodeCache::load_code_blob(AOTCodeEntry::Kind entry_kind, uint id, const char* name, int entry_offset_count, int* entry_offsets) {\n+CodeBlob* AOTCodeCache::load_code_blob(AOTCodeEntry::Kind entry_kind, uint id, const char* name) {\n@@ -932,1 +920,1 @@\n-  CodeBlob* blob = reader.compile_code_blob(name, entry_offset_count, entry_offsets);\n+  CodeBlob* blob = reader.compile_code_blob(name);\n@@ -939,1 +927,1 @@\n-CodeBlob* AOTCodeCache::load_code_blob(AOTCodeEntry::Kind entry_kind, BlobId id, int entry_offset_count, int* entry_offsets) {\n+CodeBlob* AOTCodeCache::load_code_blob(AOTCodeEntry::Kind entry_kind, BlobId id) {\n@@ -942,1 +930,1 @@\n-  return load_code_blob(entry_kind, (uint)id, StubInfo::name(id), entry_offset_count, entry_offsets);\n+  return load_code_blob(entry_kind, (uint)id, StubInfo::name(id));\n@@ -945,1 +933,1 @@\n-CodeBlob* AOTCodeReader::compile_code_blob(const char* name, int entry_offset_count, int* entry_offsets) {\n+CodeBlob* AOTCodeReader::compile_code_blob(const char* name) {\n@@ -992,15 +980,0 @@\n-  \/\/ Read entries offsets\n-  offset = read_position();\n-  int stored_count = *(int*)addr(offset);\n-  assert(stored_count == entry_offset_count, \"entry offset count mismatch, count in AOT code cache=%d, expected=%d\", stored_count, entry_offset_count);\n-  offset += sizeof(int);\n-  set_read_position(offset);\n-  for (int i = 0; i < stored_count; i++) {\n-    uint32_t off = *(uint32_t*)addr(offset);\n-    offset += sizeof(uint32_t);\n-    const char* entry_name = (_entry->kind() == AOTCodeEntry::Adapter) ? AdapterHandlerEntry::entry_name(i) : \"\";\n-    log_trace(aot, codecache, stubs)(\"Reading adapter '%s:%s' (0x%x) offset: 0x%x from AOT Code Cache\",\n-                                      stored_name, entry_name, _entry->id(), off);\n-    entry_offsets[i] = off;\n-  }\n-\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.cpp","additions":8,"deletions":35,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -335,3 +335,1 @@\n-                              uint id, const char* name,\n-                              int entry_offset_count = 0,\n-                              int* entry_offsets = nullptr) NOT_CDS_RETURN_(false);\n+                              uint id, const char* name) NOT_CDS_RETURN_(false);\n@@ -340,3 +338,1 @@\n-                                  uint id, const char* name,\n-                                  int entry_offset_count = 0,\n-                                  int* entry_offsets = nullptr) NOT_CDS_RETURN_(nullptr);\n+                                  uint id, const char* name) NOT_CDS_RETURN_(nullptr);\n@@ -347,3 +343,1 @@\n-                              BlobId id,\n-                              int entry_offset_count = 0,\n-                              int* entry_offsets = nullptr) NOT_CDS_RETURN_(false);\n+                              BlobId id) NOT_CDS_RETURN_(false);\n@@ -352,3 +346,1 @@\n-                                  BlobId id,\n-                                  int entry_offset_count = 0,\n-                                  int* entry_offsets = nullptr) NOT_CDS_RETURN_(nullptr);\n+                                  BlobId id) NOT_CDS_RETURN_(nullptr);\n@@ -417,1 +409,1 @@\n-  CodeBlob* compile_code_blob(const char* name, int entry_offset_count, int* entry_offsets);\n+  CodeBlob* compile_code_blob(const char* name);\n","filename":"src\/hotspot\/share\/code\/aotCodeCache.hpp","additions":5,"deletions":13,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -449,1 +449,1 @@\n-AdapterBlob::AdapterBlob(int size, CodeBuffer* cb) :\n+AdapterBlob::AdapterBlob(int size, CodeBuffer* cb, int entry_offset[AdapterBlob::ENTRY_COUNT]) :\n@@ -451,0 +451,8 @@\n+  assert(entry_offset[0] == 0, \"sanity check\");\n+  for (int i = 1; i < AdapterBlob::ENTRY_COUNT; i++) {\n+    assert(entry_offset[i] > 0 && entry_offset[i] < cb->insts()->size(),\n+           \"invalid entry offset 0x%x\", entry_offset[i]);\n+  }\n+  _c2i_offset = entry_offset[1];\n+  _c2i_unverified_offset = entry_offset[2];\n+  _c2i_no_clinit_check_offset = entry_offset[3];\n@@ -454,1 +462,1 @@\n-AdapterBlob* AdapterBlob::create(CodeBuffer* cb) {\n+AdapterBlob* AdapterBlob::create(CodeBuffer* cb, int entry_offset[AdapterBlob::ENTRY_COUNT]) {\n@@ -463,1 +471,1 @@\n-    blob = new (size) AdapterBlob(size, cb);\n+    blob = new (size) AdapterBlob(size, cb, entry_offset);\n@@ -471,0 +479,7 @@\n+void AdapterBlob::get_offsets(int entry_offset[ENTRY_COUNT]) {\n+  entry_offset[0] = 0;\n+  entry_offset[1] = _c2i_offset;\n+  entry_offset[2] = _c2i_unverified_offset;\n+  entry_offset[3] = _c2i_no_clinit_check_offset;\n+}\n+\n","filename":"src\/hotspot\/share\/code\/codeBlob.cpp","additions":18,"deletions":3,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -407,0 +407,2 @@\n+public:\n+  static const int ENTRY_COUNT = 4;\n@@ -408,2 +410,5 @@\n-  AdapterBlob(int size, CodeBuffer* cb);\n-\n+  AdapterBlob(int size, CodeBuffer* cb, int entry_offset[ENTRY_COUNT]);\n+  \/\/ _i2c_offset is always 0 so no need to store it\n+  int _c2i_offset;\n+  int _c2i_unverified_offset;\n+  int _c2i_no_clinit_check_offset;\n@@ -412,1 +417,2 @@\n-  static AdapterBlob* create(CodeBuffer* cb);\n+  static AdapterBlob* create(CodeBuffer* cb, int entry_offset[ENTRY_COUNT]);\n+  void get_offsets(int entry_offset[ENTRY_COUNT]);\n","filename":"src\/hotspot\/share\/code\/codeBlob.hpp","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2772,1 +2772,1 @@\n-  int offsets[AdapterHandlerEntry::ENTRIES_COUNT];\n+  int offsets[AdapterBlob::ENTRY_COUNT];\n@@ -2775,1 +2775,1 @@\n-  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::Adapter, id, name, AdapterHandlerEntry::ENTRIES_COUNT, offsets);\n+  CodeBlob* blob = AOTCodeCache::load_code_blob(AOTCodeEntry::Adapter, id, name);\n@@ -2778,0 +2778,1 @@\n+    adapter_blob->get_offsets(offsets);\n@@ -2840,1 +2841,9 @@\n-  adapter_blob = AdapterBlob::create(&buffer);\n+  int entry_offset[AdapterBlob::ENTRY_COUNT];\n+  assert(AdapterBlob::ENTRY_COUNT == 4, \"sanity\");\n+  address i2c_entry = handler->get_i2c_entry();\n+  entry_offset[0] = 0; \/\/ i2c_entry offset\n+  entry_offset[1] = handler->get_c2i_entry() - i2c_entry;\n+  entry_offset[2] = handler->get_c2i_unverified_entry() - i2c_entry;\n+  entry_offset[3] = handler->get_c2i_no_clinit_check_entry() - i2c_entry;\n+\n+  adapter_blob = AdapterBlob::create(&buffer, entry_offset);\n@@ -2851,8 +2860,1 @@\n-    int entry_offset[AdapterHandlerEntry::ENTRIES_COUNT];\n-    assert(AdapterHandlerEntry::ENTRIES_COUNT == 4, \"sanity\");\n-    address i2c_entry = handler->get_i2c_entry();\n-    entry_offset[0] = 0; \/\/ i2c_entry offset\n-    entry_offset[1] = handler->get_c2i_entry() - i2c_entry;\n-    entry_offset[2] = handler->get_c2i_unverified_entry() - i2c_entry;\n-    entry_offset[3] = handler->get_c2i_no_clinit_check_entry() - i2c_entry;\n-    bool success = AOTCodeCache::store_code_blob(*adapter_blob, AOTCodeEntry::Adapter, id, name, AdapterHandlerEntry::ENTRIES_COUNT, entry_offset);\n+    bool success = AOTCodeCache::store_code_blob(*adapter_blob, AOTCodeEntry::Adapter, id, name);\n","filename":"src\/hotspot\/share\/runtime\/sharedRuntime.cpp","additions":13,"deletions":11,"binary":false,"changes":24,"status":"modified"}]}