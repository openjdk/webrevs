{"files":[{"patch":"@@ -143,1 +143,1 @@\n-        map.putAll(xOptFlags()); \/\/ -Xmx4g -> @requires vm.opt.x.Xmx == \"4g\" )\n+        map.putAll(xFlags()); \/\/ -Xmx4g -> @requires vm.opt.x.Xmx == \"4g\" )\n@@ -718,1 +718,1 @@\n-    private Stream<String> allFlags() {\n+    private static Stream<String> allFlags() {\n@@ -722,0 +722,47 @@\n+    public record Flag(String name, String value) {}\n+\n+    \/**\n+     * Split an -Xflag string into a name part (without leading dash)\n+       and a value part (\"true\" if no value was given)\n+     *\/\n+    public static Flag parseXFlag(String xflag) {\n+        Matcher m = Pattern.compile(\"-([a-zA-Z]+)(.*)\").matcher(xflag);\n+        if (!m.matches()) {\n+            throw new RuntimeException(\"Could not parse flag: \" + xflag);\n+        }\n+\n+        String name = m.group(1);\n+        String value = m.group(2);\n+\n+        if (value.equals(\"\")) {\n+            return new Flag(name, \"true\");  \/\/ xflag does not contain explicit value, e.g. [\"Xnoclassgc\"], use value \"true\"\n+        }\n+\n+        if (value.startsWith(\":\")) {        \/\/ xflag uses colon separator, e.g. [\"XshowSettings\", \":\", \"system\"]\n+            return new Flag(name, value.substring(1));\n+        }\n+\n+        return new Flag(name, value);       \/\/ xflag uses numeric separator, e.g. [\"Xmx\", \"4\", \"g\"], concatenate last two elements\n+    }\n+\n+    \/**\n+     * Check if flag is an -Xflag\n+     *\/\n+    private static boolean isXFlag(String flag) {\n+        return flag.startsWith(\"-X\") && !flag.startsWith(\"-XX:\") && !flag.equals(\"-X\");\n+    }\n+\n+    \/**\n+     * The problem with multiple -Xlog is that all values \/together\/\n+     * create meaning, it is therefore not meaningful to only use the\n+     * latest value of -Xlog. To guard against bad usage of @require\n+     * against such a composite value, the value is changed to a\n+     * nonsense value.\n+     *\/\n+    private static Flag xlogWorkaround(Flag flag) {\n+        if (flag.name.equals(\"Xlog\")) {\n+            return new Flag(flag.name(), \"NONEMPTY_TEST_SENTINEL\");\n+        }\n+        return flag;\n+    }\n+\n@@ -732,1 +779,1 @@\n-     * will always be NONEMPTY_TEST_SENTINEL (when pressent).\n+     * will always be NONEMPTY_TEST_SENTINEL (when present).\n@@ -734,1 +781,1 @@\n-    private Map<String, String> xOptFlags() {\n+    public static Map<String, String> xFlags() {\n@@ -736,11 +783,6 @@\n-            .filter(s -> s.startsWith(\"-X\") && !s.startsWith(\"-XX:\") && !s.equals(\"-X\"))\n-            .map(s -> s.replaceFirst(\"-Xlog:.*\", \"-Xlog:NONEMPTY_TEST_SENTINEL\")) \/\/ the value should never be tested, replace to be sure\n-            .map(s -> s.replaceFirst(\"-\", \"\"))\n-            .map(flag -> flag.splitWithDelimiters(\"[:0123456789]\", 2))\n-            .collect(Collectors.toMap(a -> \"vm.opt.x.\" + a[0],\n-                                      a -> (a.length == 1)\n-                                          ? \"true\" \/\/ -Xnoclassgc\n-                                          : (a[1].equals(\":\")\n-                                              ? a[2]            \/\/ [\"-XshowSettings\", \":\", \"system\"]\n-                                              : a[1] + a[2]),   \/\/ [\"-Xmx\", \"4\", \"g\"]\n-                                      (a, b) -> b));\n+            .filter(VMProps::isXFlag)\n+            .map(VMProps::parseXFlag)\n+            .map(VMProps::xlogWorkaround)\n+            .collect(Collectors.toMap(flag -> \"vm.opt.x.\" + flag.name(),\n+                                      flag -> flag.value(),\n+                                      (a, b) -> b)); \/\/ use the latest flag value if multiple are offered\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":57,"deletions":15,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test VMPropsTest\n+ * @bug 8320750\n+ * @library \/test\/lib\n+ * @library \/test\/jtreg-ext\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.base\/jdk.internal.foreign\n+ *          java.management\/sun.management\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions -XX:+WhiteBoxAPI VMPropsTest\n+ * @summary testing parsing of -Xflags\n+ *\/\n+\n+import static jdk.test.lib.Asserts.assertTrue;\n+import static jdk.test.lib.Asserts.assertEQ;\n+import requires.VMProps;\n+\n+\/**\n+ * This tests parsing of -Xflags.\n+ *\/\n+public class VMPropsTest {\n+    public static void main(String[] args) {\n+        assertEQ(VMProps.parseXFlag(\"-name\").name(), \"name\");\n+        assertEQ(VMProps.parseXFlag(\"-name\").value(), \"true\");\n+        assertEQ(VMProps.parseXFlag(\"-name:value\").name(), \"name\");\n+        assertEQ(VMProps.parseXFlag(\"-name:value\").value(), \"value\");\n+        assertEQ(VMProps.parseXFlag(\"-name4g\").name(), \"name\");\n+        assertEQ(VMProps.parseXFlag(\"-name4g\").value(), \"4g\");\n+        assertEQ(VMProps.parseXFlag(\"-name43g\").name(), \"name\");\n+        assertEQ(VMProps.parseXFlag(\"-name43g\").value(), \"43g\");\n+\n+        \/\/ Make sure that we handle several flags that are equal\n+        System.setProperty(\"test.java.opts\", \"-Xlog:gc* -Xlog:gc*\");\n+        VMProps.xFlags();\n+    }\n+}\n","filename":"test\/lib-test\/jtreg-ext\/requires\/VMPropsTest.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"}]}