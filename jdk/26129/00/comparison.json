{"files":[{"patch":"@@ -3762,1 +3762,1 @@\n-                log.mandatoryWarning(pos, Warnings.SunProprietary(s));\n+                log.warning(pos, Warnings.SunProprietary(s));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Check.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1972,0 +1972,1 @@\n+# flags: strict\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -461,1 +461,3 @@\n-        SOURCE_LEVEL;\n+        SOURCE_LEVEL,\n+        \/** Flag for warnings that cannot be disabled *\/\n+        STRICT;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/JCDiagnostic.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,0 +51,1 @@\n+import com.sun.tools.javac.util.JCDiagnostic.DiagnosticFlag;\n@@ -682,10 +683,0 @@\n-    \/** Report a warning that cannot be suppressed.\n-     *  @param pos    The source position at which to report the warning.\n-     *  @param key    The key for the localized warning message.\n-     *  @param args   Fields of the warning message.\n-     *\/\n-    public void strictWarning(DiagnosticPosition pos, String key, Object ... args) {\n-        writeDiagnostic(diags.warning(null, source, pos, key, args));\n-        nwarnings++;\n-    }\n-\n@@ -800,1 +791,8 @@\n-                \/\/ Emit warning unless not mandatory and warnings are disabled\n+                \/\/ Strict warnings are always emitted\n+                if (diagnostic.isFlagSet(DiagnosticFlag.STRICT)) {\n+                    writeDiagnostic(diagnostic);\n+                    nwarnings++;\n+                    return;\n+                }\n+\n+                \/\/ Emit other warning unless not mandatory and warnings are disabled\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -44,0 +44,4 @@\n+import javax.tools.Diagnostic;\n+import javax.tools.Diagnostic.Kind;\n+import javax.tools.DiagnosticListener;\n+import javax.tools.JavaFileObject;\n@@ -51,0 +55,1 @@\n+import java.util.Locale;\n@@ -113,6 +118,0 @@\n-        List<String> expected =\n-                expectDiagnostic\n-                        ? List.of(\n-                                \"Test.java:1:43: compiler.warn.sun.proprietary: sun.misc.Unsafe\",\n-                                \"1 warning\")\n-                        : List.of(\"\");\n@@ -124,11 +123,23 @@\n-        List<String> log =\n-                new JavacTask(tb)\n-                        .fileManager(fm)\n-                        .options(allOptions)\n-                        .outdir(classes)\n-                        .files(tb.findJavaFiles(src))\n-                        .run(Expect.SUCCESS)\n-                        .writeAll()\n-                        .getOutputLines(Task.OutputKind.DIRECT);\n-        if (!log.equals(expected)) {\n-            throw new AssertionError(\"expected: \" + expected + \"\\nactual: \" + log + \"\\n\");\n+        new JavacTask(tb)\n+                .fileManager(fm)\n+                .options(allOptions)\n+                .diagnosticListener(d -> sunAPIWarningChecker(d, expectDiagnostic))\n+                .outdir(classes)\n+                .files(tb.findJavaFiles(src))\n+                .run(Expect.SUCCESS)\n+                .writeAll();\n+    }\n+\n+    void sunAPIWarningChecker(Diagnostic<?> diag, boolean expectDiagnostic) {\n+        if (!expectDiagnostic) {\n+            throw new AssertionError(\"Unexpected diagnostic: \" + diag.getMessage(Locale.getDefault()));\n+        } else {\n+            if (diag.getKind() != Kind.WARNING) {\n+                throw new AssertionError(\"Bad diagnostic kind. Expected \" + Kind.WARNING + \", found: \" + diag.getKind() + \"\\n\");\n+            }\n+            if (!diag.getCode().equals(\"compiler.warn.sun.proprietary\")) {\n+                throw new AssertionError(\"Bad diagnostic code. Expected \\\"compiler.warn.sun.proprietary\\\", found: \" + diag.getCode() + \"\\n\");\n+            }\n+            if (diag.getLineNumber() != 1 || diag.getColumnNumber() != 43) {\n+                throw new AssertionError(\"Bad diagnostic position. Expected 1:43, found: \" + diag.getLineNumber() + \":\" + diag.getColumnNumber() + \"\\n\");\n+            }\n","filename":"test\/langtools\/tools\/javac\/options\/system\/SystemSunProprietary.java","additions":28,"deletions":17,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -40,0 +40,1 @@\n+import javax.tools.DiagnosticListener;\n@@ -65,0 +66,1 @@\n+    private DiagnosticListener<? super JavaFileObject> diagnosticListener;\n@@ -288,0 +290,8 @@\n+    \/**\n+     * Sets the diagnostic listener to be used.\n+     *\/\n+    public JavacTask diagnosticListener(DiagnosticListener<? super JavaFileObject> diagnosticListener) {\n+        this.diagnosticListener = diagnosticListener;\n+        return this;\n+    }\n+\n@@ -409,1 +419,1 @@\n-                    null,  \/\/ diagnostic listener; should optionally collect diags\n+                    diagnosticListener,  \/\/ diagnostic listener; should optionally collect diags\n","filename":"test\/langtools\/tools\/lib\/toolbox\/JavacTask.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"}]}