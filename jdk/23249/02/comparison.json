{"files":[{"patch":"@@ -81,1 +81,1 @@\n-  if (HeapShared::can_write()) {\n+  if (CDSConfig::is_dumping_heap()) {\n@@ -102,1 +102,1 @@\n-  assert(HeapShared::can_write(), \"sanity\");\n+  assert(CDSConfig::is_dumping_heap(), \"sanity\");\n","filename":"src\/hotspot\/share\/cds\/archiveHeapWriter.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+bool CDSConfig::_disable_heap_dumping = false;\n@@ -535,0 +536,2 @@\n+\/\/ If an incompatible VM options is found, return a text message that explains why\n+static const char* check_options_incompatible_with_dumping_heap() {\n@@ -536,0 +539,36 @@\n+  if (!UseCompressedClassPointers) {\n+    return \"UseCompressedClassPointers must be true\";\n+  }\n+\n+  \/\/ Almost all GCs support heap region dump, except ZGC (so far).\n+  if (UseZGC) {\n+    return \"ZGC is not supported\";\n+  }\n+\n+  return nullptr;\n+#else\n+  return \"JVM not configured for writing Java heap objects\";\n+#endif\n+}\n+\n+void CDSConfig::log_reasons_for_not_dumping_heap() {\n+  const char* reason;\n+\n+  assert(!is_dumping_heap(), \"sanity\");\n+\n+  if (_disable_heap_dumping) {\n+    reason = \"Programmatically disabled\";\n+  } else {\n+    reason = check_options_incompatible_with_dumping_heap();\n+  }\n+\n+  assert(reason != nullptr, \"sanity\");\n+  log_info(cds)(\"Archived java heap is not supported: %s\", reason);\n+}\n+\n+#if INCLUDE_CDS_JAVA_HEAP\n+bool CDSConfig::are_vm_options_incompatible_with_dumping_heap() {\n+  return check_options_incompatible_with_dumping_heap() != nullptr;\n+}\n+\n+\n@@ -537,2 +576,7 @@\n-  \/\/ heap dump is not supported in dynamic dump\n-  return is_dumping_static_archive() && HeapShared::can_write();\n+  if (!is_dumping_static_archive() \/\/ heap dump is not supported in dynamic dump\n+      || are_vm_options_incompatible_with_dumping_heap()\n+      || _disable_heap_dumping) {\n+    return false;\n+  }\n+\n+  return true;\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":46,"deletions":2,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,0 +49,1 @@\n+  static bool  _disable_heap_dumping;\n@@ -119,0 +120,4 @@\n+  static bool are_vm_options_incompatible_with_dumping_heap() NOT_CDS_JAVA_HEAP_RETURN_(true);\n+  static void log_reasons_for_not_dumping_heap();\n+\n+  static void disable_heap_dumping()                         { CDS_ONLY(_disable_heap_dumping = true); }\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1604,1 +1604,1 @@\n-    assert(HeapShared::can_write(), \"sanity\");\n+    assert(CDSConfig::is_dumping_heap(), \"sanity\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -89,1 +89,0 @@\n-bool HeapShared::_disable_writing = false;\n@@ -239,3 +238,0 @@\n-    if (!HeapShared::can_write()) {\n-      return nullptr;\n-    }\n@@ -717,1 +713,1 @@\n-  assert(HeapShared::can_write(), \"must be\");\n+  assert(CDSConfig::is_dumping_heap(), \"must be\");\n@@ -1877,1 +1873,1 @@\n-  assert(HeapShared::can_write(), \"must be\");\n+  assert(CDSConfig::is_dumping_heap(), \"must be\");\n@@ -1966,1 +1962,1 @@\n-  if (HeapShared::can_write()) {\n+  if (CDSConfig::is_dumping_heap()) {\n","filename":"src\/hotspot\/share\/cds\/heapShared.cpp","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -146,20 +146,0 @@\n-  \/\/ Can this VM write a heap region into the CDS archive?\n-  static bool can_write() {\n-    CDS_JAVA_HEAP_ONLY(\n-      if (_disable_writing) {\n-        return false;\n-      }\n-      \/\/ Need compressed class pointers for heap region dump.\n-      if (!UseCompressedClassPointers) {\n-        return false;\n-      }\n-      \/\/ Almost all GCs support heap region dump, except ZGC (so far).\n-      return !UseZGC;\n-    )\n-    NOT_CDS_JAVA_HEAP(return false;)\n-  }\n-\n-  static void disable_writing() {\n-    CDS_JAVA_HEAP_ONLY(_disable_writing = true;)\n-  }\n-\n@@ -176,1 +156,0 @@\n-  static bool _disable_writing;\n@@ -380,1 +359,0 @@\n-  static void write_heap(ArchiveHeapInfo* heap_info);\n@@ -427,0 +405,1 @@\n+  static void write_heap(ArchiveHeapInfo* heap_info) NOT_CDS_JAVA_HEAP_RETURN;\n","filename":"src\/hotspot\/share\/cds\/heapShared.hpp","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -555,1 +555,1 @@\n-  void dump_java_heap_objects(GrowableArray<Klass*>* klasses) NOT_CDS_JAVA_HEAP_RETURN;\n+  void dump_java_heap_objects();\n@@ -656,1 +656,1 @@\n-  if (HeapShared::can_write() && _extra_interned_strings != nullptr) {\n+  if (CDSConfig::is_dumping_heap() && _extra_interned_strings != nullptr) {\n@@ -678,1 +678,1 @@\n-  dump_java_heap_objects(_builder.klasses());\n+  dump_java_heap_objects();\n@@ -1046,9 +1046,5 @@\n-#if INCLUDE_CDS_JAVA_HEAP\n-void VM_PopulateDumpSharedSpace::dump_java_heap_objects(GrowableArray<Klass*>* klasses) {\n-  if (!HeapShared::can_write()) {\n-    log_info(cds)(\n-      \"Archived java heap is not supported as UseG1GC \"\n-      \"and UseCompressedClassPointers are required.\"\n-      \"Current settings: UseG1GC=%s, UseCompressedClassPointers=%s.\",\n-      BOOL_TO_STR(UseG1GC), BOOL_TO_STR(UseCompressedClassPointers));\n-    return;\n+void VM_PopulateDumpSharedSpace::dump_java_heap_objects() {\n+  if (CDSConfig::is_dumping_heap()) {\n+    HeapShared::write_heap(&_heap_info);\n+  } else {\n+    CDSConfig::log_reasons_for_not_dumping_heap();\n@@ -1056,1 +1052,0 @@\n-  HeapShared::write_heap(&_heap_info);\n@@ -1058,1 +1053,0 @@\n-#endif \/\/ INCLUDE_CDS_JAVA_HEAP\n","filename":"src\/hotspot\/share\/cds\/metaspaceShared.cpp","additions":8,"deletions":14,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -344,1 +344,1 @@\n-    HeapShared::disable_writing();\n+    CDSConfig::disable_heap_dumping();\n","filename":"src\/hotspot\/share\/classfile\/classLoaderExt.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1015,1 +1015,1 @@\n-  assert(HeapShared::can_write(), \"must be\");\n+  assert(CDSConfig::is_dumping_heap(), \"must be\");\n","filename":"src\/hotspot\/share\/classfile\/stringTable.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2191,1 +2191,1 @@\n-  return HeapShared::can_write();\n+  return !CDSConfig::are_vm_options_incompatible_with_dumping_heap();\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -81,4 +81,0 @@\n-    static final String COOPS_DUMP_WARNING =\n-        \"Cannot dump shared archive when UseCompressedOops or UseCompressedClassPointers is off\";\n-    static final String GC_WARNING =\n-        \"Archived java heap is not supported\";\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/sharedStrings\/IncompatibleOptions.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -455,1 +455,3 @@\n-     * @return true if this VM can write Java heap objects into the CDS archive\n+     * @return true if it's possible for \"java -Xshare:dump\" to write Java heap objects\n+     *         with the current set of jtreg VM options. For example, false will be returned\n+     *         if -XX:-UseCompressedClassPointers is specified,\n","filename":"test\/jtreg-ext\/requires\/VMProps.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}