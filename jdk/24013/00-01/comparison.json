{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +31,1 @@\n+#include \"opto\/predicates_enums.hpp\"\n@@ -63,4 +64,0 @@\n-\/\/ The success projection of a Parse Predicate is always an IfTrueNode and the uncommon projection an IfFalseNode\n-typedef IfTrueNode ParsePredicateSuccessProj;\n-typedef IfFalseNode ParsePredicateUncommonProj;\n-\n@@ -504,1 +501,4 @@\n-  bool is_useless() const;\n+  bool is_useless() const {\n+    return _predicate_state == PredicateState::Useless;\n+  }\n+\n@@ -506,3 +506,12 @@\n-  void mark_maybe_useful();\n-  bool is_useful() const;\n-  void mark_useful();\n+\n+  void mark_maybe_useful() {\n+    _predicate_state = PredicateState::MaybeUseful;\n+  }\n+\n+  bool is_useful() const {\n+    return _predicate_state == PredicateState::Useful;\n+  }\n+\n+  void mark_useful() {\n+    _predicate_state = PredicateState::Useful;\n+  }\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":18,"deletions":9,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -34,1 +34,1 @@\n-#include \"opto\/predicates.hpp\"\n+#include \"opto\/predicates_enums.hpp\"\n@@ -2189,4 +2189,0 @@\n-bool ParsePredicateNode::is_useless() const {\n-  return _predicate_state == PredicateState::Useless;\n-}\n-\n@@ -2198,12 +2194,0 @@\n-void ParsePredicateNode::mark_maybe_useful() {\n-  _predicate_state = PredicateState::MaybeUseful;\n-}\n-\n-bool ParsePredicateNode::is_useful() const {\n-  return _predicate_state == PredicateState::Useful;\n-}\n-\n-void ParsePredicateNode::mark_useful() {\n-  _predicate_state = PredicateState::Useful;\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":1,"deletions":17,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -144,4 +144,0 @@\n-bool OpaqueTemplateAssertionPredicateNode::is_useless() const {\n-  return _predicate_state == PredicateState::Useless;\n-}\n-\n@@ -153,12 +149,0 @@\n-void OpaqueTemplateAssertionPredicateNode::mark_maybe_useful() {\n-  _predicate_state = PredicateState::MaybeUseful;\n-}\n-\n-bool OpaqueTemplateAssertionPredicateNode::is_useful() const {\n-  return _predicate_state == PredicateState::Useful;\n-}\n-\n-void OpaqueTemplateAssertionPredicateNode::mark_useful() {\n-  _predicate_state = PredicateState::Useful;\n-}\n-\n","filename":"src\/hotspot\/share\/opto\/opaquenode.cpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+#include \"opto\/predicates_enums.hpp\"\n@@ -174,1 +175,5 @@\n-  bool is_useless() const;\n+\n+  bool is_useless() const {\n+    return _predicate_state == PredicateState::Useless;\n+  }\n+\n@@ -176,3 +181,12 @@\n-  void mark_maybe_useful();\n-  bool is_useful() const;\n-  void mark_useful();\n+\n+  void mark_maybe_useful() {\n+    _predicate_state = PredicateState::MaybeUseful;\n+  }\n+\n+  bool is_useful() const {\n+    return _predicate_state == PredicateState::Useful;\n+  }\n+\n+  void mark_useful() {\n+    _predicate_state = PredicateState::Useful;\n+  }\n","filename":"src\/hotspot\/share\/opto\/opaquenode.hpp","additions":18,"deletions":4,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+#include \"opto\/predicates_enums.hpp\"\n@@ -203,22 +204,0 @@\n-\/\/ Assertion Predicates are either emitted to check the initial value of a range check in the first iteration or the last\n-\/\/ value of a range check in the last iteration of a loop.\n-enum class AssertionPredicateType {\n-  None, \/\/ Not an Assertion Predicate\n-  InitValue,\n-  LastValue,\n-  \/\/ Used for the Initialized Assertion Predicate emitted during Range Check Elimination for the final IV value.\n-  FinalIv\n-};\n-\n-enum class PredicateState {\n-  \/\/ The Predicate is useless and will be cleaned up in the next round of IGVN. A useless Predicate is not visited\n-  \/\/ anymore by PredicateVisitors. If a Predicate loses its connection to a loop head, it will be marked useless by\n-  \/\/ EliminateUselessPredicates and cleaned up by the Value() methods of the associated Predicate IR nodes.\n-  Useless,\n-  \/\/ This state is used by EliminateUselessPredicates to temporarily mark a Predicate as neither useless nor useful.\n-  \/\/ Outside EliminateUselessPredicates, a Predicate should never be MaybeUseful.\n-  MaybeUseful,\n-  \/\/ Default state: The Predicate is useful and will be visited by PredicateVisitors.\n-  Useful\n-};\n-\n","filename":"src\/hotspot\/share\/opto\/predicates.hpp","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#ifndef SHARE_OPTO_PREDICATES_ENUMS_HPP\n+#define SHARE_OPTO_PREDICATES_ENUMS_HPP\n+\n+\/\/ The success projection of a Parse Predicate is always an IfTrueNode and the uncommon projection an IfFalseNode\n+typedef IfTrueNode ParsePredicateSuccessProj;\n+typedef IfFalseNode ParsePredicateUncommonProj;\n+\n+\/\/ Assertion Predicates are either emitted to check the initial value of a range check in the first iteration or the last\n+\/\/ value of a range check in the last iteration of a loop.\n+enum class AssertionPredicateType {\n+  None, \/\/ Not an Assertion Predicate\n+  InitValue,\n+  LastValue,\n+  \/\/ Used for the Initialized Assertion Predicate emitted during Range Check Elimination for the final IV value.\n+  FinalIv\n+};\n+\n+enum class PredicateState {\n+  \/\/ The Predicate is useless and will be cleaned up in the next round of IGVN. A useless Predicate is not visited\n+  \/\/ anymore by PredicateVisitors. If a Predicate loses its connection to a loop head, it will be marked useless by\n+  \/\/ EliminateUselessPredicates and cleaned up by the Value() methods of the associated Predicate IR nodes.\n+  Useless,\n+  \/\/ This state is used by EliminateUselessPredicates to temporarily mark a Predicate as neither useless nor useful.\n+  \/\/ Outside EliminateUselessPredicates, a Predicate should never be MaybeUseful.\n+  MaybeUseful,\n+  \/\/ Default state: The Predicate is useful and will be visited by PredicateVisitors.\n+  Useful\n+};\n+\n+#endif \/\/ SHARE_OPTO_PREDICATES_ENUMS_HPP\n","filename":"src\/hotspot\/share\/opto\/predicates_enums.hpp","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"}]}