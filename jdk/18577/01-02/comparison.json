{"files":[{"patch":"@@ -185,0 +185,1 @@\n+  \/\/ Count\n@@ -186,6 +187,3 @@\n-  for (int i = 0; i < _body.body().length(); i++) {\n-    MemNode* mem = _body.body().at(i)->isa_Mem();\n-    if (mem != nullptr && _vloop.in_bb(mem)) {\n-      number_of_vpointers++;\n-    }\n-  }\n+  _body.for_each_mem([&] (const MemNode* mem, int bb_idx) {\n+    number_of_vpointers++;\n+  });\n@@ -193,0 +191,1 @@\n+  \/\/ Allocate\n@@ -196,0 +195,1 @@\n+  \/\/ Compute and Cache\n@@ -197,9 +197,6 @@\n-  for (int i = 0; i < _body.body().length(); i++) {\n-    MemNode* mem = _body.body().at(i)->isa_Mem();\n-    if (mem != nullptr && _vloop.in_bb(mem)) {\n-      \/\/ Placement new: construct directly into the array.\n-      ::new (&_vpointers[pointers_idx]) VPointer(mem, _vloop);\n-      _bb_idx_to_vpointer.at_put(i, pointers_idx);\n-      pointers_idx++;\n-    }\n-  }\n+  _body.for_each_mem([&] (const MemNode* mem, int bb_idx) {\n+    \/\/ Placement new: construct directly into the array.\n+    ::new (&_vpointers[pointers_idx]) VPointer(mem, _vloop);\n+    _bb_idx_to_vpointer.at_put(bb_idx, pointers_idx);\n+    pointers_idx++;\n+  });\n","filename":"src\/hotspot\/share\/opto\/vectorization.cpp","additions":12,"deletions":15,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -365,0 +365,10 @@\n+  template<typename Callback>\n+  void for_each_mem(Callback callback) const {\n+    for (int i = 0; i < _body.length(); i++) {\n+      MemNode* mem = _body.at(i)->isa_Mem();\n+      if (mem != nullptr && _vloop.in_bb(mem)) {\n+        callback(mem, i);\n+      }\n+    }\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/vectorization.hpp","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"}]}