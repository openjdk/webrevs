{"files":[{"patch":"@@ -1815,0 +1815,3 @@\n+    log_debug(os,map)(\"Reserved [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes).\", p2i(result), p2i(result + bytes), bytes);\n+  } else {\n+    log_info(os,map)(\"Reserve failed (%zu bytes), errno %d %s\", bytes, get_last_error(), strerror(get_last_error()));\n@@ -1823,1 +1826,1 @@\n-    log_debug(os)(\"Reserved memory at \" INTPTR_FORMAT \" for \" SIZE_FORMAT \" bytes.\", p2i(addr), bytes);\n+    log_debug(os,map)(\"Reserved [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes).\", p2i(result), p2i(result + bytes), bytes);\n@@ -1825,2 +1828,2 @@\n-    log_debug(os)(\"Attempt to reserve memory at \" INTPTR_FORMAT \" for \"\n-                 SIZE_FORMAT \" bytes failed, errno %d\", p2i(addr), bytes, get_last_error());\n+    log_info(os,map)(\"Attempt to reserve [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes) failed, errno %d %s\",\n+      p2i(addr), p2i(addr + bytes), bytes, get_last_error(), strerror(get_last_error()));\n@@ -2034,0 +2037,5 @@\n+    log_debug(os,map)(\"Committed [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes).\",\n+      p2i(addr), p2i(addr + bytes), bytes);\n+  } else {\n+    log_info(os,map)(\"Failed to commit [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes), errno %d %s\",\n+      p2i(addr), p2i(addr + bytes), bytes, get_last_error(), strerror(get_last_error()));\n@@ -2044,0 +2052,5 @@\n+    log_debug(os,map)(\"Committed [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes).\",\n+      p2i(addr), p2i(addr + size), size);\n+  } else {\n+    log_info(os,map)(\"Failed to commit [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes), errno %d %s\",\n+      p2i(addr), p2i(addr + size), size, get_last_error(), strerror(get_last_error()));\n@@ -2074,0 +2087,9 @@\n+\n+  if (res) {\n+    log_debug(os,map)(\"Uncommitted [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes).\",\n+      p2i(addr), p2i(addr + bytes), bytes);\n+  } else {\n+    log_info(os,map)(\"Failed to uncommit [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes), errno %d %s\",\n+      p2i(addr), p2i(addr + bytes), bytes, get_last_error(), strerror(get_last_error()));\n+  }\n+\n@@ -2091,1 +2113,5 @@\n-    log_info(os)(\"os::release_memory failed (\" PTR_FORMAT \", \" SIZE_FORMAT \")\", p2i(addr), bytes);\n+    log_info(os,map)(\"Failed to release [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes), errno %d %s\",\n+      p2i(addr), p2i(addr + bytes), bytes, get_last_error(), strerror(get_last_error()));\n+  } else {\n+    log_debug(os,map)(\"Released [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes).\",\n+      p2i(addr), p2i(addr + bytes), bytes);\n@@ -2196,0 +2222,5 @@\n+    log_debug(os,map)(\"Reserved and committed [\" INTPTR_FORMAT \" - \" INTPTR_FORMAT\"] (%zu bytes).\",\n+      p2i(result), p2i(result + size), size);\n+  } else {\n+    log_info(os,map)(\"Reserve and commit failed (%zu bytes), errno %d %s\", size, get_last_error(),\n+      strerror(get_last_error()));\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":35,"deletions":4,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -0,0 +1,225 @@\n+\/*\n+ * Copyright (c) 2023 Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.IOException;\n+\n+import jdk.test.whitebox.WhiteBox;\n+\n+\n+\n+\/*\n+ * @test id=testSuccessfulFlow\n+ * @summary Test that memory allocation logging works when allocation operations run without error\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver TestMemoryAllocationLogging testSuccessfulFlow\n+ *\/\n+\n+\/*\n+ * @test id=testAttemptedReserveFailed\n+ * @summary Test that memory allocation logging warns when attempted reservation fails\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver TestMemoryAllocationLogging testAttemptedReserveFailed\n+ *\/\n+\n+\/*\n+ * @test id=testReserveFailed\n+ * @summary Test that memory allocation logging warns when reservation fails\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver TestMemoryAllocationLogging testReserveFailed\n+ *\/\n+\n+\/*\n+ * @test id=testCommitFailed\n+ * @summary Test that memory allocation logging warns when commit attempts fail\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver TestMemoryAllocationLogging testCommitFailed\n+ *\/\n+\n+\/*\n+ * @test id=testUncommitFailed\n+ * @summary Test that memory allocation logging warns when memory uncommitment fails\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver TestMemoryAllocationLogging testUncommitFailed\n+ *\/\n+\n+\/*\n+ * @test id=testReleaseFailed\n+ * @summary Test that memory allocation logging warns when memory release fails\n+ * @library \/test\/lib\n+ * @requires os.family == \"linux\"\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver TestMemoryAllocationLogging testReleaseFailed\n+ *\/\n+\n+public class TestMemoryAllocationLogging {\n+\n+    protected static final long PAGE_SIZE = 64 * 1024; \/\/ 64Kb - largest page size in any system\n+    protected static final long COMMIT_SIZE = 1024;\n+    protected static long tooBig = 1024L * 1000000000000L; \/\/ 1Tb\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            throw new RuntimeException(\"Argument error\");\n+        }\n+        String[] options = new String[] {\n+                \"-Xlog:os+map=debug\",\n+                \"-XX:-CreateCoredumpOnCrash\",\n+                \"-Xms17m\",\n+                \"-Xmx17m\",\n+                \/\/ Options for WhiteBox below\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:+WhiteBoxAPI\",\n+                \"-Xbootclasspath\/a:.\",\n+                TestMemoryAllocationLogging.Tester.class.getName(),\n+                args[0]};\n+\n+        String[] expectedLogs;\n+        switch (args[0]) {\n+            case \"testSuccessfulFlow\": {\n+                expectedLogs = new String[]{\n+                        String.format(\"Reserved \\\\[0x.* - 0x.*\\\\] \\\\(%d bytes\\\\).\", PAGE_SIZE),\n+                        String.format(\"Committed \\\\[0x.* - 0x.*\\\\] \\\\(%d bytes\\\\).\", COMMIT_SIZE),\n+                        String.format(\"Uncommitted \\\\[0x.* - 0x.*\\\\] \\\\(%d bytes\\\\).\", COMMIT_SIZE),\n+                        String.format(\"Released \\\\[0x.* - 0x.*\\\\] \\\\(%d bytes\\\\).\", PAGE_SIZE)\n+                };\n+                break;\n+            }\n+            case \"testAttemptedReserveFailed\": {\n+                expectedLogs = new String[] {\n+                        String.format(\"Reserved \\\\[0x.* - 0x.*\\\\] \\\\(%d bytes\\\\).\", PAGE_SIZE),\n+                        String.format(\"Attempt to reserve \\\\[0x.* - 0x.*\\\\] \\\\(%d bytes\\\\) failed, errno\", PAGE_SIZE)\n+                };\n+                break;\n+            }\n+            case \"testReserveFailed\": {\n+                expectedLogs = new String[] { \"Reserve failed \\\\(.* bytes\\\\), errno\"\n+                };\n+                break;\n+            }\n+            case \"testCommitFailed\": {\n+                expectedLogs = new String[] {\n+                        String.format(\"Failed to commit \\\\[0x.* - 0x.*\\\\] \\\\(%d bytes\\\\), errno\", COMMIT_SIZE)\n+                };\n+                break;\n+            }\n+            case \"testUncommitFailed\": {\n+                expectedLogs = new String[] {\n+                        String.format(\"Reserved \\\\[0x.* - 0x.*\\\\] \\\\(%d bytes\\\\).\", PAGE_SIZE),\n+                       \"Failed to uncommit \\\\[0x.* - 0x.*\\\\] \\\\(.* bytes\\\\), errno\"\n+                };\n+                break;\n+            }\n+            case \"testReleaseFailed\": {\n+                expectedLogs = new String[] {\n+                        \"Failed to release \\\\[0x.* - 0x.*\\\\] \\\\(.* bytes\\\\), errno\"\n+                };\n+                break;\n+            }\n+            default: {\n+                throw new RuntimeException(\"Invalid test \" + args[0]);\n+            }\n+        }\n+        OutputAnalyzer output = runTestWithOptions(options);\n+        checkExpectedLogMessages(output, expectedLogs);\n+    }\n+\n+    private static OutputAnalyzer runTestWithOptions(String[] options) throws IOException {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(options);\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        output.shouldHaveExitValue(0);\n+        return output;\n+    }\n+\n+    private static void checkExpectedLogMessages(OutputAnalyzer output, String[] regexs) throws RuntimeException {\n+        for (String regex : regexs) {\n+            output.shouldMatch(regex);\n+        }\n+    }\n+\n+    static class Tester {\n+        public static void main(String[] args) throws Exception {\n+            System.out.println(\"Tester execution...\");\n+            WhiteBox wb = WhiteBox.getWhiteBox();\n+\n+            switch (args[0]) {\n+                case \"testSuccessfulFlow\": {\n+                    long addr = wb.NMTReserveMemory(PAGE_SIZE);\n+                    wb.NMTCommitMemory(addr, COMMIT_SIZE);\n+                    wb.NMTUncommitMemory(addr, COMMIT_SIZE);\n+                    wb.NMTReleaseMemory(addr, PAGE_SIZE);\n+                    break;\n+                }\n+                case \"testAttemptedReserveFailed\": {\n+                    long addr = wb.NMTReserveMemory(PAGE_SIZE);\n+                    wb.NMTAttemptReserveMemoryAt(addr, PAGE_SIZE);\n+                    break;\n+                }\n+                case \"testReserveFailed\": {\n+                    wb.NMTReserveMemory(tooBig);\n+                    break;\n+                }\n+                case \"testCommitFailed\": {\n+                    wb.NMTCommitMemory(1, COMMIT_SIZE);\n+                    break;\n+                }\n+                case \"testUncommitFailed\": {\n+                    long addr = wb.NMTReserveMemory(PAGE_SIZE);\n+                    wb.NMTUncommitMemory(addr, tooBig);\n+                    break;\n+                }\n+                case \"testReleaseFailed\": {\n+                    wb.NMTReleaseMemory(-1, tooBig);\n+                    break;\n+                }\n+                default: {\n+                    throw new RuntimeException(\"Invalid test \" + args[0]);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestMemoryAllocationLogging.java","additions":225,"deletions":0,"binary":false,"changes":225,"status":"added"}]}