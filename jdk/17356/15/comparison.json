{"files":[{"patch":"@@ -318,1 +318,4 @@\n-      trcVerbose(\"Cannot disclaim %p - %p (errno %d)\\n\", p, p + maxDisclaimSize, errno);\n+      ErrnoPreserver ep;\n+      log_trace(os, map)(\"disclaim failed: \" RANGEFMT \" errno=(%s)\",\n+                         RANGEFMTARGS(p, maxDisclaimSize),\n+                         os::strerror(ep.saved_errno()));\n@@ -326,1 +329,4 @@\n-      trcVerbose(\"Cannot disclaim %p - %p (errno %d)\\n\", p, p + lastDisclaimSize, errno);\n+      ErrnoPreserver ep;\n+      log_trace(os, map)(\"disclaim failed: \" RANGEFMT \" errno=(%s)\",\n+                         RANGEFMTARGS(p, lastDisclaimSize),\n+                         os::strerror(ep.saved_errno()));\n@@ -1492,4 +1498,2 @@\n-      trcVerbose(\"[\" PTR_FORMAT \" - \" PTR_FORMAT \"] is not a sub \"\n-              \"range of [\" PTR_FORMAT \" - \" PTR_FORMAT \"].\",\n-              p2i(p), p2i(p + s), p2i(addr), p2i(addr + size));\n-      guarantee0(false);\n+      fatal(RANGEFMT \" is not a sub range of \" RANGEFMT, RANGEFMTARGS(p, s),\n+            RANGEFMTARGS(addr, size));\n@@ -1498,3 +1502,2 @@\n-      trcVerbose(\"range [\" PTR_FORMAT \" - \" PTR_FORMAT \"] is not\"\n-              \" aligned to pagesize (%lu)\", p2i(p), p2i(p + s), (unsigned long) pagesize);\n-      guarantee0(false);\n+      fatal(\"range \" RANGEFMT \" is not aligned to pagesize (%lu)\",\n+            RANGEFMTARGS(p, s), (unsigned long)pagesize);\n@@ -1567,1 +1570,3 @@\n-    trcVerbose(\"Wish address \" PTR_FORMAT \" is too close to the BRK segment.\", p2i(requested_addr));\n+    log_info(os, map)(\"Wish address \" PTR_FORMAT\n+                      \" is too close to the BRK segment.\",\n+                      p2i(requested_addr));\n@@ -1585,1 +1590,3 @@\n-    trcVerbose(\"shmget(.., \" UINTX_FORMAT \", ..) failed (errno: %d).\", size, errno);\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"shmget(.., \" UINTX_FORMAT \", ..) failed (errno=%s).\",\n+                       size, os::strerror(ep.saved_errno()));\n@@ -1599,4 +1606,4 @@\n-    trcVerbose(\"Failed to set page size (need \" UINTX_FORMAT \" 64K pages) - shmctl failed with %d.\",\n-               size \/ (64*K), errno);\n-    \/\/ I want to know if this ever happens.\n-    assert(false, \"failed to set page size for shmat\");\n+    assert(false,\n+           \"Failed to set page size (need \" UINTX_FORMAT\n+           \" 64K pages) - shmctl failed. (errno=%s).\",\n+           size \/ (64 * K), os::strerror(os::get_last_error()));\n@@ -1617,1 +1624,4 @@\n-    trcVerbose(\"shmctl(%u, IPC_RMID) failed (%d)\\n\", shmid, errno);\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"shmctl(%u, IPC_RMID) failed (errno=%s)\\n\",\n+                       shmid,\n+                       os::strerror(ep.saved_errno()));\n@@ -1623,1 +1633,4 @@\n-    trcVerbose(\"Failed to attach segment at \" PTR_FORMAT \" (%d).\", p2i(requested_addr), errno_shmat);\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"Failed to attach segment at \" PTR_FORMAT \" (errno=%s).\",\n+                       p2i(requested_addr),\n+                       os::strerror(ep.saved_errno()));\n@@ -1631,1 +1644,2 @@\n-    trcVerbose(\"pagesize is, surprisingly, \" SIZE_FORMAT, real_pagesize);\n+    log_trace(os, map)(\"pagesize is, surprisingly, \" SIZE_FORMAT,\n+                       real_pagesize);\n@@ -1635,2 +1649,5 @@\n-    trcVerbose(\"shm-allocated \" PTR_FORMAT \" .. \" PTR_FORMAT \" (\" UINTX_FORMAT \" bytes, \" UINTX_FORMAT \" %s pages)\",\n-      p2i(addr), p2i(addr + size - 1), size, size\/real_pagesize, describe_pagesize(real_pagesize));\n+    log_trace(os, map)(\"shm-allocated succeeded: \" RANGEFMT\n+                       \" (\" UINTX_FORMAT \" %s pages)\",\n+                       RANGEFMTARGS(addr, size),\n+                       size \/ real_pagesize,\n+                       describe_pagesize(real_pagesize));\n@@ -1639,1 +1656,2 @@\n-      trcVerbose(\"failed to shm-allocate \" UINTX_FORMAT \" bytes at with address \" PTR_FORMAT \".\", size, p2i(requested_addr));\n+      log_trace(os, map)(\"shm-allocate failed: \" RANGEFMT,\n+                         RANGEFMTARGS(requested_addr, size));\n@@ -1641,1 +1659,3 @@\n-      trcVerbose(\"failed to shm-allocate \" UINTX_FORMAT \" bytes at any address.\", size);\n+      log_trace(os, map)(\"failed to shm-allocate \" UINTX_FORMAT\n+                         \" bytes at any address.\",\n+                         size);\n@@ -1661,1 +1681,4 @@\n-    trcVerbose(\"error (%d).\", errno);\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"shmdt failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n@@ -1663,1 +1686,2 @@\n-    trcVerbose(\"ok.\");\n+    log_trace(os, map)(\"shmdt succeded: \" RANGEFMT,\n+                       RANGEFMTARGS(addr, size));\n@@ -1692,1 +1716,3 @@\n-    trcVerbose(\"Wish address \" PTR_FORMAT \" not aligned to page boundary.\", p2i(requested_addr));\n+    log_trace(os, map)(\"Wish address \" PTR_FORMAT\n+                       \" not aligned to page boundary.\",\n+                       p2i(requested_addr));\n@@ -1699,1 +1725,3 @@\n-    trcVerbose(\"Wish address \" PTR_FORMAT \" is too close to the BRK segment.\", p2i(requested_addr));\n+    log_trace(os, map)(\"Wish address \" PTR_FORMAT\n+                       \" is too close to the BRK segment.\",\n+                       p2i(requested_addr));\n@@ -1742,1 +1770,4 @@\n-    trcVerbose(\"mmap(\" PTR_FORMAT \", \" UINTX_FORMAT \", ..) failed (%d)\", p2i(requested_addr), size, errno);\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"mmap failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(requested_addr, size),\n+                       os::strerror(ep.saved_errno()));\n@@ -1745,2 +1776,5 @@\n-    trcVerbose(\"mmap(\" PTR_FORMAT \", \" UINTX_FORMAT \", ..) succeeded, but at a different address than requested (\" PTR_FORMAT \"), will unmap\",\n-               p2i(requested_addr), size, p2i(addr));\n+    log_trace(os, map)(\"mmap succeeded: \" RANGEFMT\n+                       \", but at a different address than\"\n+                       \"requested (\" PTR_FORMAT \"), will unmap\",\n+                       RANGEFMTARGS(requested_addr, size),\n+                       p2i(addr));\n@@ -1785,1 +1819,4 @@\n-    trcVerbose(\"failed (%d)\\n\", errno);\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"munmap failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n@@ -1788,1 +1825,2 @@\n-    trcVerbose(\"ok.\");\n+    log_trace(os, map)(\"munmap succeeded: \" RANGEFMT,\n+                       RANGEFMTARGS(addr, size));\n@@ -1806,1 +1844,4 @@\n-    trcVerbose(\"failed (%d)\\n\", errno);\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"msync failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n@@ -1809,1 +1850,2 @@\n-    trcVerbose(\"ok.\");\n+    log_trace(os, map)(\"msync succeeded: \" RANGEFMT,\n+                       RANGEFMTARGS(addr, size));\n","filename":"src\/hotspot\/os\/aix\/os_aix.cpp","additions":75,"deletions":33,"binary":false,"changes":108,"status":"modified"},{"patch":"@@ -1607,0 +1607,5 @@\n+  } else {\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"mprotect failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n@@ -1613,0 +1618,5 @@\n+    } else {\n+      ErrnoPreserver ep;\n+      log_trace(os, map)(\"mprotect failed: \" RANGEFMT \" errno=(%s)\",\n+                         RANGEFMTARGS(addr, size),\n+                         os::strerror(ep.saved_errno()));\n@@ -1619,0 +1629,5 @@\n+    } else {\n+      ErrnoPreserver ep;\n+      log_trace(os, map)(\"mmap failed: \" RANGEFMT \" errno=(%s)\",\n+                         RANGEFMTARGS(addr, size),\n+                         os::strerror(ep.saved_errno()));\n@@ -1626,0 +1641,5 @@\n+  } else {\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"mmap failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n@@ -1706,1 +1726,9 @@\n-  return ::mprotect(addr, size, PROT_NONE) == 0;\n+  if (::mprotect(addr, size, PROT_NONE) == 0) {\n+    return true;\n+  } else {\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"mprotect failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n+    return false;\n+  }\n@@ -1710,0 +1738,13 @@\n+      ErrnoPreserver ep;\n+      log_trace(os, map)(\"madvise failed: \" RANGEFMT \" errno=(%s)\",\n+                         RANGEFMTARGS(addr, size),\n+                         os::strerror(ep.saved_errno()));\n+      return false;\n+    }\n+    if (::mprotect(addr, size, PROT_NONE) == 0) {\n+      return true;\n+    } else {\n+      ErrnoPreserver ep;\n+      log_trace(os, map)(\"mprotect failed: \" RANGEFMT \" errno=(%s)\",\n+                         RANGEFMTARGS(addr, size),\n+                         os::strerror(ep.saved_errno()));\n@@ -1712,1 +1753,0 @@\n-    return ::mprotect(addr, size, PROT_NONE) == 0;\n@@ -1716,1 +1756,8 @@\n-    return res  != (uintptr_t) MAP_FAILED;\n+    if (res == (uintptr_t) MAP_FAILED) {\n+      ErrnoPreserver ep;\n+      log_trace(os, map)(\"mmap failed: \" RANGEFMT \" errno=(%s)\",\n+                         RANGEFMTARGS(addr, size),\n+                         os::strerror(ep.saved_errno()));\n+      return false;\n+    }\n+    return true;\n@@ -1721,1 +1768,8 @@\n-  return res  != (uintptr_t) MAP_FAILED;\n+  if (res == (uintptr_t) MAP_FAILED) {\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"mmap failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n+    return false;\n+  }\n+  return true;\n@@ -1747,2 +1801,8 @@\n-\n-  return addr == MAP_FAILED ? nullptr : addr;\n+  if (addr == MAP_FAILED) {\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"mmap failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(requested_addr, bytes),\n+                       os::strerror(ep.saved_errno()));\n+    return nullptr;\n+  }\n+  return addr;\n@@ -1752,1 +1812,9 @@\n-  return ::munmap(addr, size) == 0;\n+  if (::munmap(addr, size) == 0) {\n+    return 1;\n+  } else {\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"munmap failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n+    return 0;\n+  }\n","filename":"src\/hotspot\/os\/bsd\/os_bsd.cpp","additions":75,"deletions":7,"binary":false,"changes":82,"status":"modified"},{"patch":"@@ -2883,0 +2883,5 @@\n+  } else {\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"mmap failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n@@ -2888,0 +2893,4 @@\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"mmap failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n@@ -3419,1 +3428,8 @@\n-  return res  != (uintptr_t) MAP_FAILED;\n+  if (res == (uintptr_t) MAP_FAILED) {\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"mmap failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n+    return false;\n+  }\n+  return true;\n@@ -3638,2 +3654,8 @@\n-\n-  return addr == MAP_FAILED ? nullptr : addr;\n+  if (addr == MAP_FAILED) {\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"mmap failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(requested_addr, bytes),\n+                       os::strerror(ep.saved_errno()));\n+    return nullptr;\n+  }\n+  return addr;\n@@ -3660,1 +3682,6 @@\n-        ::munmap(start, extra_size);\n+        if (::munmap(start, extra_size) != 0) {\n+          ErrnoPreserver ep;\n+          log_trace(os, map)(\"munmap failed: \" RANGEFMT \" errno=(%s)\",\n+                             RANGEFMTARGS(start, extra_size),\n+                             os::strerror(ep.saved_errno()));\n+        }\n@@ -3668,1 +3695,7 @@\n-        ::munmap(start, start_aligned - start);\n+        const size_t l = start_aligned - start;\n+        if (::munmap(start, l) != 0) {\n+          ErrnoPreserver ep;\n+          log_trace(os, map)(\"munmap failed: \" RANGEFMT \" errno=(%s)\",\n+                             RANGEFMTARGS(start, l),\n+                             os::strerror(ep.saved_errno()));\n+        }\n@@ -3671,1 +3704,7 @@\n-        ::munmap(end_aligned, end - end_aligned);\n+        const size_t l = end - end_aligned;\n+        if (::munmap(end_aligned, l) != 0) {\n+          ErrnoPreserver ep;\n+          log_trace(os, map)(\"munmap failed: \" RANGEFMT \" errno=(%s)\",\n+                             RANGEFMTARGS(end_aligned, l),\n+                             os::strerror(ep.saved_errno()));\n+        }\n@@ -3680,1 +3719,8 @@\n-  return ::munmap(addr, size) == 0;\n+  if (::munmap(addr, size) != 0) {\n+    ErrnoPreserver ep;\n+    log_trace(os, map)(\"munmap failed: \" RANGEFMT \" errno=(%s)\",\n+                       RANGEFMTARGS(addr, size),\n+                       os::strerror(ep.saved_errno()));\n+    return 0;\n+  }\n+  return 1;\n@@ -4110,1 +4156,6 @@\n-    ::munmap(small_start, small_size);\n+    if (::munmap(small_start, small_size) != 0) {\n+      ErrnoPreserver ep;\n+      log_trace(os, map)(\"munmap failed: \" RANGEFMT \" errno=(%s)\",\n+                         RANGEFMTARGS(small_start, small_size),\n+                         os::strerror(ep.saved_errno()));\n+    }\n@@ -4119,1 +4170,6 @@\n-    ::munmap(aligned_start, large_bytes);\n+    if (::munmap(aligned_start, large_bytes) != 0) {\n+      ErrnoPreserver ep;\n+      log_trace(os, map)(\"munmap failed: \" RANGEFMT \" errno=(%s)\",\n+                         RANGEFMTARGS(aligned_start, large_bytes),\n+                         os::strerror(ep.saved_errno()));\n+    }\n@@ -4192,1 +4248,4 @@\n-    log_trace(os, map)(\"Kernel rejected \" PTR_FORMAT \", offered \" PTR_FORMAT \".\", p2i(requested_addr), p2i(addr));\n+    log_trace(os, map)(\"Kernel rejected \" PTR_FORMAT\n+                       \", offered \" PTR_FORMAT \".\",\n+                       p2i(requested_addr),\n+                       p2i(addr));\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":69,"deletions":10,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -506,7 +506,0 @@\n-class ErrnoPreserver: public StackObj {\n-  const int _saved;\n-public:\n-  ErrnoPreserver() : _saved(errno) {}\n-  ~ErrnoPreserver() { errno = _saved; }\n-};\n-\n","filename":"src\/hotspot\/os\/posix\/signals_posix.cpp","additions":1,"deletions":8,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1815,0 +1815,3 @@\n+    log_debug(os, map)(\"Reserved \" RANGEFMT, RANGEFMTARGS(result, bytes));\n+  } else {\n+    log_info(os, map)(\"Reserve failed (%zu bytes)\", bytes);\n@@ -1823,1 +1826,1 @@\n-    log_debug(os)(\"Reserved memory at \" INTPTR_FORMAT \" for \" SIZE_FORMAT \" bytes.\", p2i(addr), bytes);\n+    log_debug(os, map)(\"Reserved \" RANGEFMT, RANGEFMTARGS(result, bytes));\n@@ -1825,2 +1828,2 @@\n-    log_debug(os)(\"Attempt to reserve memory at \" INTPTR_FORMAT \" for \"\n-                 SIZE_FORMAT \" bytes failed, errno %d\", p2i(addr), bytes, get_last_error());\n+    log_info(os, map)(\"Attempt to reserve \" RANGEFMT \" failed\",\n+                      RANGEFMTARGS(addr, bytes));\n@@ -2034,0 +2037,3 @@\n+    log_debug(os, map)(\"Committed \" RANGEFMT, RANGEFMTARGS(addr, bytes));\n+  } else {\n+    log_info(os, map)(\"Failed to commit \" RANGEFMT, RANGEFMTARGS(addr, bytes));\n@@ -2044,0 +2050,3 @@\n+    log_debug(os, map)(\"Committed \" RANGEFMT, RANGEFMTARGS(addr, size));\n+  } else {\n+    log_info(os, map)(\"Failed to commit \" RANGEFMT, RANGEFMTARGS(addr, size));\n@@ -2074,0 +2083,7 @@\n+\n+  if (res) {\n+    log_debug(os, map)(\"Uncommitted \" RANGEFMT, RANGEFMTARGS(addr, bytes));\n+  } else {\n+    log_info(os, map)(\"Failed to uncommit \" RANGEFMT, RANGEFMTARGS(addr, bytes));\n+  }\n+\n@@ -2091,1 +2107,3 @@\n-    log_info(os)(\"os::release_memory failed (\" PTR_FORMAT \", \" SIZE_FORMAT \")\", p2i(addr), bytes);\n+    log_info(os, map)(\"Failed to release \" RANGEFMT, RANGEFMTARGS(addr, bytes));\n+  } else {\n+    log_debug(os, map)(\"Released \" RANGEFMT, RANGEFMTARGS(addr, bytes));\n@@ -2200,0 +2218,3 @@\n+    log_debug(os, map)(\"Reserved and committed \" RANGEFMT, RANGEFMTARGS(result, size));\n+  } else {\n+    log_info(os, map)(\"Reserve and commit failed (%zu bytes)\", size);\n","filename":"src\/hotspot\/share\/runtime\/os.cpp","additions":26,"deletions":5,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -155,0 +155,13 @@\n+\/\/ Preserve errno across a range of calls\n+\n+class ErrnoPreserver {\n+  int _e;\n+\n+public:\n+  ErrnoPreserver() { _e = errno; }\n+\n+  ~ErrnoPreserver() { errno = _e; }\n+\n+  int saved_errno() { return _e; }\n+};\n+\n","filename":"src\/hotspot\/share\/runtime\/os.hpp","additions":13,"deletions":0,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -382,0 +382,3 @@\n+#define RANGEFMT              \"[\" PTR_FORMAT \" - \" PTR_FORMAT \"), (\" SIZE_FORMAT \" bytes)\"\n+#define RANGEFMTARGS(p1, size) p2i(p1), p2i(p1 + size), size\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -0,0 +1,241 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, Red Hat Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+import java.io.IOException;\n+\n+import jdk.test.whitebox.WhiteBox;\n+\n+\n+\n+\/*\n+ * @test id=testSuccessfulFlow\n+ * @summary Test that memory allocation logging works when allocation operations run without error\n+ * @library \/test\/lib\n+ * @requires os.family != \"windows\" & os.family != \"aix\"\n+ * @requires vm.flagless\n+ * @requires vm.bits == \"64\"\n+ * @requires vm.debug == false\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver TestMemoryAllocationLogging testSuccessfulFlow\n+ *\/\n+\n+\/*\n+ * @test id=testAttemptedReserveFailed\n+ * @summary Test that memory allocation logging warns when attempted reservation fails\n+ * @library \/test\/lib\n+ * @requires os.family != \"windows\" & os.family != \"aix\"\n+ * @requires vm.flagless\n+ * @requires vm.bits == \"64\"\n+ * @requires vm.debug == false\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver TestMemoryAllocationLogging testAttemptedReserveFailed\n+ *\/\n+\n+\/*\n+ * @test id=testCommitFailed\n+ * @summary Test that memory allocation logging warns when commit attempts fail\n+ * @library \/test\/lib\n+ * @requires os.family != \"windows\" & os.family != \"aix\"\n+ * @requires vm.flagless\n+ * @requires vm.bits == \"64\"\n+ * @requires vm.debug == false\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver TestMemoryAllocationLogging testCommitFailed\n+ *\/\n+\n+\/*\n+ * @test id=testUncommitFailed\n+ * @summary Test that memory allocation logging warns when memory uncommitment fails\n+ * @library \/test\/lib\n+ * @requires os.family != \"windows\" & os.family != \"aix\"\n+ * @requires vm.flagless\n+ * @requires vm.bits == \"64\"\n+ * @requires vm.debug == false\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver TestMemoryAllocationLogging testUncommitFailed\n+ *\/\n+\n+\/*\n+ * @test id=testReleaseFailed\n+ * @summary Test that memory allocation logging warns when memory release fails\n+ * @library \/test\/lib\n+ * @requires os.family != \"windows\" & os.family != \"aix\"\n+ * @requires vm.flagless\n+ * @requires vm.bits == \"64\"\n+ * @requires vm.debug == false\n+ * @modules java.base\/jdk.internal.misc\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run driver TestMemoryAllocationLogging testReleaseFailed\n+ *\/\n+\n+public class TestMemoryAllocationLogging {\n+\n+    protected static final long PAGE_SIZE = 64 * 1024; \/\/ 64Kb - largest page size in any system\n+    protected static final long COMMIT_SIZE = 1024;\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length == 0) {\n+            throw new RuntimeException(\"Argument error\");\n+        }\n+        String[] options = new String[] {\n+                \"-Xlog:os+map=trace\", \/\/ trace level will also print debug level\n+                \"-XX:-CreateCoredumpOnCrash\",\n+                \"-Xms17m\",\n+                \"-Xmx17m\",\n+                \/\/ Options for WhiteBox below\n+                \"-XX:+UnlockDiagnosticVMOptions\",\n+                \"-XX:+WhiteBoxAPI\",\n+                \"-Xbootclasspath\/a:.\",\n+                TestMemoryAllocationLogging.Tester.class.getName(),\n+                args[0]};\n+\n+        String[] expectedLogs;\n+\n+        \/* Debug logging level tests *\/\n+        switch (args[0]) {\n+            case \"testSuccessfulFlow\": {\n+                expectedLogs = new String[]{\n+                        \/* Debug level log *\/\n+                        String.format(\"Reserved \\\\[0x.* - 0x.*\\\\), \\\\(%d bytes\\\\)\", PAGE_SIZE),\n+                        String.format(\"Committed \\\\[0x.* - 0x.*\\\\), \\\\(%d bytes\\\\)\", COMMIT_SIZE),\n+                        String.format(\"Uncommitted \\\\[0x.* - 0x.*\\\\), \\\\(%d bytes\\\\)\", COMMIT_SIZE),\n+                        String.format(\"Released \\\\[0x.* - 0x.*\\\\), \\\\(%d bytes\\\\)\", PAGE_SIZE)\n+                };\n+                break;\n+            }\n+            case \"testAttemptedReserveFailed\": {\n+                expectedLogs = new String[] {\n+                        \/* Debug level log *\/\n+                        String.format(\"Reserved \\\\[0x.* - 0x.*\\\\), \\\\(%d bytes\\\\)\", PAGE_SIZE),\n+                        String.format(\"Attempt to reserve \\\\[0x.* - 0x.*\\\\), \\\\(.* bytes\\\\) failed\"),\n+                };\n+                break;\n+            }\n+            case \"testCommitFailed\": {\n+                expectedLogs = new String[] {\n+                        \/* Debug level log *\/\n+                        String.format(\"Failed to commit \\\\[0x.* - 0x.*\\\\), \\\\(%d bytes\\\\)\", COMMIT_SIZE),\n+                        \/* Trace level log *\/\n+                        \"mmap failed: \\\\[0x.* - 0x.*\\\\), \\\\(.* bytes\\\\) errno=\\\\(Invalid argument\\\\)\"\n+                };\n+                break;\n+            }\n+            case \"testUncommitFailed\": {\n+                expectedLogs = new String[] {\n+                        \/* Debug level log *\/\n+                        String.format(\"Reserved \\\\[0x.* - 0x.*\\\\), \\\\(%d bytes\\\\)\", PAGE_SIZE),\n+                        \"Failed to uncommit \\\\[0x.* - 0x.*\\\\), \\\\(.* bytes\\\\)\",\n+                        \/* Trace level log *\/\n+                        \"mmap failed: \\\\[0x.* - 0x.*\\\\), \\\\(.* bytes\\\\) errno=\\\\(Invalid argument\\\\)\"\n+                };\n+                break;\n+            }\n+            case \"testReleaseFailed\": {\n+                expectedLogs = new String[] {\n+                        \/* Debug level log *\/\n+                        \"Failed to release \\\\[0x.* - 0x.*\\\\), \\\\(.* bytes\\\\)\",\n+                        \/* Trace level log *\/\n+                        \"munmap failed: \\\\[0x.* - 0x.*\\\\), \\\\(.* bytes\\\\) errno=\\\\(Invalid argument\\\\)\"\n+                };\n+                break;\n+            }\n+\n+            default: {\n+                throw new RuntimeException(\"Invalid test \" + args[0]);\n+            }\n+        }\n+\n+        OutputAnalyzer output = runTestWithOptions(options);\n+        checkExpectedLogMessages(output, expectedLogs);\n+    }\n+\n+    private static OutputAnalyzer runTestWithOptions(String[] options) throws IOException {\n+        ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(options);\n+        OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+        return output;\n+    }\n+\n+    private static void checkExpectedLogMessages(OutputAnalyzer output, String[] regexs) throws RuntimeException {\n+        for (String regex : regexs) {\n+            output.shouldMatch(regex);\n+        }\n+    }\n+\n+    static class Tester {\n+        public static void main(String[] args) throws Exception {\n+            System.out.println(\"Tester execution...\");\n+            WhiteBox wb = WhiteBox.getWhiteBox();\n+\n+            switch (args[0]) {\n+                case \"testSuccessfulFlow\": {\n+                    long addr = wb.NMTReserveMemory(PAGE_SIZE);\n+                    wb.NMTCommitMemory(addr, COMMIT_SIZE);\n+                    wb.NMTUncommitMemory(addr, COMMIT_SIZE);\n+                    wb.NMTReleaseMemory(addr, PAGE_SIZE);\n+                    break;\n+                }\n+                case \"testAttemptedReserveFailed\": {\n+                    long addr = wb.NMTReserveMemory(PAGE_SIZE);\n+                    \/* attempting to reserve the same address should fail *\/\n+                    wb.NMTAttemptReserveMemoryAt(addr, PAGE_SIZE);\n+                    break;\n+                }\n+                case \"testCommitFailed\": {\n+                    long addr = wb.NMTReserveMemory(PAGE_SIZE);\n+                    \/* addr is not a multiple of system page size, so it should fail *\/\n+                    wb.NMTCommitMemory(addr - 1, COMMIT_SIZE);\n+                    break;\n+                }\n+                case \"testUncommitFailed\": {\n+                    long addr = wb.NMTReserveMemory(PAGE_SIZE);\n+                    wb.NMTCommitMemory(addr, PAGE_SIZE);\n+                    \/* addr is not a multiple of a system page size, so it should fail *\/\n+                    wb.NMTUncommitMemory(addr - 1, PAGE_SIZE);\n+                    break;\n+                }\n+                case \"testReleaseFailed\": {\n+                    long addr = wb.NMTReserveMemory(PAGE_SIZE);\n+                    \/* addr is not a multiple of system page size, so it should fail *\/\n+                    wb.NMTReleaseMemory(addr - 1, PAGE_SIZE);\n+                    break;\n+                }\n+                default: {\n+                    throw new RuntimeException(\"Invalid test \" + args[0]);\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/os\/TestMemoryAllocationLogging.java","additions":241,"deletions":0,"binary":false,"changes":241,"status":"added"}]}