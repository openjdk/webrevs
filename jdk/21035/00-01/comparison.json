{"files":[{"patch":"@@ -253,5 +253,11 @@\n-        MethodType mtypeWithArg = mtype.appendParameterTypes(MemberName.class);\n-        if (doesAlloc)\n-            mtypeWithArg = mtypeWithArg\n-                    .insertParameterTypes(0, Object.class)  \/\/ insert newly allocated obj\n-                    .changeReturnType(void.class);          \/\/ <init> returns void\n+        MethodType mtypeWithArg;\n+        if (doesAlloc) {\n+            var ptypes = mtype.ptypes();\n+            var newPtypes = new Class<?>[ptypes.length + (doesAlloc ? 2 : 1)];\n+            newPtypes[0] = Object.class; \/\/ insert newly allocated obj\n+            System.arraycopy(ptypes, 0, newPtypes, 1, ptypes.length);\n+            newPtypes[newPtypes.length - 1] = MemberName.class;\n+            mtypeWithArg = MethodType.methodType(void.class, newPtypes, true);\n+        } else {\n+            mtypeWithArg = mtype.appendParameterTypes(MemberName.class);\n+        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":11,"deletions":5,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -592,3 +592,3 @@\n-        Name[] names = argumentsWithTrailingObjectArgument(nameCursor - INARG_LIMIT, mtype);\n-        assert(names.length == nameCursor);\n-        assert(names[APPENDIX_ARG] != null);\n+        Name[] names = arguments(nameCursor - INARG_LIMIT + 1, mtype);\n+        assert(names.length == nameCursor && names[APPENDIX_ARG] == null);\n+        names[APPENDIX_ARG] = argument(APPENDIX_ARG, BasicType.L_TYPE);\n@@ -599,1 +599,2 @@\n-        Object[] outArgs = Arrays.copyOfRange(names, ARG_BASE, OUTARG_LIMIT + PREPEND_COUNT, Object[].class);\n+        Object[] outArgs = new Object[OUTARG_LIMIT + PREPEND_COUNT];\n+        System.arraycopy(names, 0, outArgs, PREPEND_COUNT, outArgs.length - PREPEND_COUNT);\n@@ -601,1 +602,0 @@\n-        System.arraycopy(outArgs, 0, outArgs, PREPEND_COUNT, outArgs.length - PREPEND_COUNT);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -1640,9 +1640,0 @@\n-    static Name[] argumentsWithTrailingObjectArgument(int extra, MethodType types) {\n-        int length = types.parameterCount();\n-        Name[] names = new Name[length + extra + 1];\n-        for (int i = 0; i < length; i++)\n-            names[i] = argument(i, basicType(types.parameterType(i)));\n-        names[length] = argument(length, L_TYPE);\n-        return names;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}