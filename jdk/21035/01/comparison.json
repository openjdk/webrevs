{"files":[{"patch":"@@ -146,1 +146,1 @@\n-        LambdaForm.Name[] names = LambdaForm.arguments(nameCursor - ARG_LIMIT, mtype.invokerType());\n+        LambdaForm.Name[] names = LambdaForm.invokeArguments(nameCursor - ARG_LIMIT, mtype);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DelegatingMethodHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -253,5 +253,11 @@\n-        MethodType mtypeWithArg = mtype.appendParameterTypes(MemberName.class);\n-        if (doesAlloc)\n-            mtypeWithArg = mtypeWithArg\n-                    .insertParameterTypes(0, Object.class)  \/\/ insert newly allocated obj\n-                    .changeReturnType(void.class);          \/\/ <init> returns void\n+        MethodType mtypeWithArg;\n+        if (doesAlloc) {\n+            var ptypes = mtype.ptypes();\n+            var newPtypes = new Class<?>[ptypes.length + (doesAlloc ? 2 : 1)];\n+            newPtypes[0] = Object.class; \/\/ insert newly allocated obj\n+            System.arraycopy(ptypes, 0, newPtypes, 1, ptypes.length);\n+            newPtypes[newPtypes.length - 1] = MemberName.class;\n+            mtypeWithArg = MethodType.methodType(void.class, newPtypes, true);\n+        } else {\n+            mtypeWithArg = mtype.appendParameterTypes(MemberName.class);\n+        }\n@@ -273,1 +279,1 @@\n-        Name[] names = arguments(nameCursor - ARG_LIMIT, mtype.invokerType());\n+        Name[] names = invokeArguments(nameCursor - ARG_LIMIT, mtype);\n@@ -789,1 +795,1 @@\n-        Name[] names = arguments(nameCursor - ARG_LIMIT, mtype.invokerType());\n+        Name[] names = invokeArguments(nameCursor - ARG_LIMIT, mtype);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/DirectMethodHandle.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -317,1 +317,1 @@\n-        MethodType invokerFormType = mtype.invokerType();\n+        MethodType invokerFormType = mtype;\n@@ -324,1 +324,1 @@\n-        Name[] names = arguments(nameCursor - INARG_LIMIT, invokerFormType);\n+        Name[] names = invokeArguments(nameCursor - INARG_LIMIT, invokerFormType);\n@@ -393,1 +393,1 @@\n-        names[THIS_VH] = argument(THIS_VH, BasicType.basicType(Object.class));\n+        names[THIS_VH] = argument(THIS_VH, BasicType.L_TYPE);\n@@ -397,1 +397,1 @@\n-        names[VAD_ARG] = new Name(ARG_LIMIT, BasicType.basicType(Object.class));\n+        names[VAD_ARG] = new Name(ARG_LIMIT, BasicType.L_TYPE);\n@@ -449,2 +449,2 @@\n-        names[THIS_MH] = argument(THIS_MH, BasicType.basicType(Object.class));\n-        names[CALL_VH] = argument(CALL_VH, BasicType.basicType(Object.class));\n+        names[THIS_MH] = argument(THIS_MH, BasicType.L_TYPE);\n+        names[CALL_VH] = argument(CALL_VH, BasicType.L_TYPE);\n@@ -592,4 +592,3 @@\n-        MethodType invokerFormType = mtype.appendParameterTypes(skipCallSite ? MethodHandle.class : CallSite.class);\n-        Name[] names = arguments(nameCursor - INARG_LIMIT, invokerFormType);\n-        assert(names.length == nameCursor);\n-        assert(names[APPENDIX_ARG] != null);\n+        Name[] names = arguments(nameCursor - INARG_LIMIT + 1, mtype);\n+        assert(names.length == nameCursor && names[APPENDIX_ARG] == null);\n+        names[APPENDIX_ARG] = argument(APPENDIX_ARG, BasicType.L_TYPE);\n@@ -600,1 +599,2 @@\n-        Object[] outArgs = Arrays.copyOfRange(names, ARG_BASE, OUTARG_LIMIT + PREPEND_COUNT, Object[].class);\n+        Object[] outArgs = new Object[OUTARG_LIMIT + PREPEND_COUNT];\n+        System.arraycopy(names, 0, outArgs, PREPEND_COUNT, outArgs.length - PREPEND_COUNT);\n@@ -602,1 +602,0 @@\n-        System.arraycopy(outArgs, 0, outArgs, PREPEND_COUNT, outArgs.length - PREPEND_COUNT);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/Invokers.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1639,0 +1639,10 @@\n+\n+    static Name[] invokeArguments(int extra, MethodType types) {\n+        int length = types.parameterCount();\n+        Name[] names = new Name[length + extra + 1];\n+        names[0] = argument(0, L_TYPE);\n+        for (int i = 0; i < length; i++)\n+            names[i + 1] = argument(i + 1, basicType(types.parameterType(i)));\n+        return names;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/LambdaForm.java","additions":10,"deletions":0,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -813,2 +813,1 @@\n-        MethodType lambdaType = basicType.invokerType();\n-        Name[] names = arguments(nameCursor - ARG_LIMIT, lambdaType);\n+        Name[] names = invokeArguments(nameCursor - ARG_LIMIT, basicType);\n@@ -846,1 +845,1 @@\n-        lform = LambdaForm.create(lambdaType.parameterCount(), names, \/*forceInline=*\/true, Kind.GUARD);\n+        lform = LambdaForm.create(basicType.parameterCount() + 1, names, \/*forceInline=*\/true, Kind.GUARD);\n@@ -873,2 +872,0 @@\n-        MethodType lambdaType = basicType.invokerType();\n-\n@@ -893,1 +890,1 @@\n-        Name[] names = arguments(nameCursor - ARG_LIMIT, lambdaType);\n+        Name[] names = invokeArguments(nameCursor - ARG_LIMIT, basicType);\n@@ -922,1 +919,1 @@\n-        lform = LambdaForm.create(lambdaType.parameterCount(), names, Kind.GUARD_WITH_CATCH);\n+        lform = LambdaForm.create(basicType.parameterCount() + 1, names, Kind.GUARD_WITH_CATCH);\n@@ -1736,2 +1733,0 @@\n-        MethodType lambdaType = basicType.invokerType();\n-\n@@ -1752,1 +1747,1 @@\n-            Name[] names = arguments(nameCursor - ARG_LIMIT, lambdaType);\n+            Name[] names = invokeArguments(nameCursor - ARG_LIMIT, basicType);\n@@ -1780,1 +1775,1 @@\n-                    LambdaForm.create(lambdaType.parameterCount(), names, Kind.LOOP));\n+                    LambdaForm.create(basicType.parameterCount() + 1, names, Kind.LOOP));\n@@ -1969,2 +1964,0 @@\n-        MethodType lambdaType = basicType.invokerType();\n-\n@@ -1988,1 +1981,1 @@\n-        Name[] names = arguments(nameCursor - ARG_LIMIT, lambdaType);\n+        Name[] names = invokeArguments(nameCursor - ARG_LIMIT, basicType);\n@@ -2014,1 +2007,1 @@\n-        lform = LambdaForm.create(lambdaType.parameterCount(), names, Kind.TRY_FINALLY);\n+        lform = LambdaForm.create(basicType.parameterCount() + 1, names, Kind.TRY_FINALLY);\n@@ -2058,1 +2051,0 @@\n-        MethodType lambdaType = basicType.invokerType();\n@@ -2091,1 +2083,1 @@\n-        Name[] names = arguments(nameCursor - ARG_LIMIT, lambdaType);\n+        Name[] names = invokeArguments(nameCursor - ARG_LIMIT, basicType);\n@@ -2109,1 +2101,1 @@\n-        LambdaForm lform = LambdaForm.create(lambdaType.parameterCount(), names, CALL_NEW_ARRAY, Kind.COLLECTOR);\n+        LambdaForm lform = LambdaForm.create(basicType.parameterCount() + 1, names, CALL_NEW_ARRAY, Kind.COLLECTOR);\n@@ -2172,2 +2164,0 @@\n-        MethodType lambdaType = basicType.invokerType();\n-\n@@ -2205,1 +2195,1 @@\n-        Name[] names = arguments(nameCursor - ARG_LIMIT, lambdaType);\n+        Name[] names = invokeArguments(nameCursor - ARG_LIMIT, basicType);\n@@ -2234,1 +2224,1 @@\n-        lform = LambdaForm.create(lambdaType.parameterCount(), names, Kind.TABLE_SWITCH);\n+        lform = LambdaForm.create(basicType.parameterCount() + 1, names, Kind.TABLE_SWITCH);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandleImpl.java","additions":12,"deletions":22,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-        LambdaForm.Name[] names = arguments(nameCursor - ARG_LIMIT, mtype.invokerType());\n+        LambdaForm.Name[] names = invokeArguments(nameCursor - ARG_LIMIT, mtype);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/NativeMethodHandle.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}