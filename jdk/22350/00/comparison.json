{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.awt.AWTPermission;\n@@ -65,2 +64,0 @@\n-    private static AWTPermission fullScreenExclusivePermission;\n-\n@@ -263,17 +260,0 @@\n-        return isFSExclusiveModeAllowed();\n-    }\n-\n-    private static boolean isFSExclusiveModeAllowed() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            if (fullScreenExclusivePermission == null) {\n-                fullScreenExclusivePermission =\n-                    new AWTPermission(\"fullScreenExclusive\");\n-            }\n-            try {\n-                security.checkPermission(fullScreenExclusivePermission);\n-            } catch (SecurityException e) {\n-                return false;\n-            }\n-        }\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/awt\/CGraphicsDevice.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.awt.AWTPermission;\n@@ -130,6 +129,0 @@\n-        if (this.stub != null) {\n-            SecurityManager s = System.getSecurityManager();\n-            if (s != null) {\n-                s.checkPermission(new AWTPermission(\"setAppletStub\"));\n-            }\n-        }\n","filename":"src\/java.desktop\/share\/classes\/java\/applet\/Applet.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -36,1 +36,0 @@\n-import java.security.AccessControlException;\n@@ -45,1 +44,0 @@\n-import sun.awt.AWTPermissions;\n@@ -847,2 +845,0 @@\n-        checkModalityPermission(type);\n-\n@@ -1564,10 +1560,0 @@\n-    private void checkModalityPermission(ModalityType mt) {\n-        if (mt == ModalityType.TOOLKIT_MODAL) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(AWTPermissions.TOOLKIT_MODALITY_PERMISSION);\n-            }\n-        }\n-    }\n-\n@@ -1595,6 +1581,0 @@\n-        try {\n-            checkModalityPermission(localModalityType);\n-        } catch (@SuppressWarnings(\"removal\") AccessControlException ace) {\n-            localModalityType = DEFAULT_MODALITY_TYPE;\n-        }\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Dialog.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -229,1 +229,0 @@\n-        checkReplaceKFMPermission();\n@@ -357,6 +356,0 @@\n-    \/**\n-     * We cache the permission used to verify that the calling thread is\n-     * permitted to access the global focus state.\n-     *\/\n-    private static AWTPermission replaceKeyboardFocusManagerPermission;\n-\n@@ -476,1 +469,0 @@\n-            checkKFMSecurity();\n@@ -509,1 +501,0 @@\n-                checkKFMSecurity();\n@@ -587,1 +578,0 @@\n-        checkReplaceKFMPermission();\n@@ -663,1 +653,0 @@\n-            checkKFMSecurity();\n@@ -697,1 +686,0 @@\n-                checkKFMSecurity();\n@@ -758,1 +746,0 @@\n-            checkKFMSecurity();\n@@ -788,1 +775,0 @@\n-                checkKFMSecurity();\n@@ -850,1 +836,0 @@\n-            checkKFMSecurity();\n@@ -878,1 +863,0 @@\n-            checkKFMSecurity();\n@@ -1155,1 +1139,0 @@\n-            checkKFMSecurity();\n@@ -1175,1 +1158,0 @@\n-        checkReplaceKFMPermission();\n@@ -2979,36 +2961,0 @@\n-\n-    private static void checkReplaceKFMPermission()\n-        throws SecurityException\n-    {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            if (replaceKeyboardFocusManagerPermission == null) {\n-                replaceKeyboardFocusManagerPermission =\n-                    new AWTPermission(\"replaceKeyboardFocusManager\");\n-            }\n-            security.\n-                checkPermission(replaceKeyboardFocusManagerPermission);\n-        }\n-    }\n-\n-    \/\/ Checks if this KeyboardFocusManager instance is the current KFM,\n-    \/\/ or otherwise checks if the calling thread has \"replaceKeyboardFocusManager\"\n-    \/\/ permission. Here's the reasoning to do so:\n-    \/\/\n-    \/\/ A system KFM instance (which is the current KFM by default) may have no\n-    \/\/ \"replaceKFM\" permission when a client code is on the call stack beneath,\n-    \/\/ but still it should be able to execute the methods protected by this check\n-    \/\/ due to the system KFM is trusted (and so it does like \"privileged\").\n-    \/\/\n-    \/\/ If this KFM instance is not the current KFM but the client code has all\n-    \/\/ permissions we can't throw SecurityException because it would contradict\n-    \/\/ the security concepts. In this case the trusted client code is responsible\n-    \/\/ for calling the secured methods from KFM instance which is not current.\n-    private void checkKFMSecurity()\n-        throws SecurityException\n-    {\n-        if (this != getCurrentKeyboardFocusManager()) {\n-            checkReplaceKFMPermission();\n-        }\n-    }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/KeyboardFocusManager.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import sun.awt.AWTPermissions;\n@@ -69,6 +68,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.WATCH_MOUSE_PERMISSION);\n-        }\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/MouseInfo.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import sun.awt.AWTPermissions;\n@@ -166,1 +165,0 @@\n-        checkRobotAllowed();\n@@ -196,9 +194,0 @@\n-    \/* determine if the security policy allows Robot's to be created *\/\n-    private static void checkRobotAllowed() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.CREATE_ROBOT_PERMISSION);\n-        }\n-    }\n-\n@@ -440,1 +429,0 @@\n-        checkScreenCaptureAllowed();\n@@ -521,2 +509,0 @@\n-        checkScreenCaptureAllowed();\n-\n@@ -638,8 +624,0 @@\n-    private static void checkScreenCaptureAllowed() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.READ_DISPLAY_PIXELS_PERMISSION);\n-        }\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Robot.java","additions":0,"deletions":22,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-import sun.awt.AWTPermissions;\n@@ -163,1 +162,0 @@\n-        checkSystemTrayAllowed();\n@@ -497,8 +495,0 @@\n-    static void checkSystemTrayAllowed() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.ACCESS_SYSTEM_TRAY_PERMISSION);\n-        }\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/SystemTray.java","additions":0,"deletions":10,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -75,1 +75,0 @@\n-import sun.awt.AWTPermissions;\n@@ -1363,5 +1362,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.CHECK_AWT_EVENTQUEUE_PERMISSION);\n-        }\n@@ -1693,5 +1687,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-          security.checkPermission(AWTPermissions.ALL_AWT_EVENTS_PERMISSION);\n-        }\n@@ -1753,5 +1742,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.ALL_AWT_EVENTS_PERMISSION);\n-        }\n@@ -1810,5 +1794,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.ALL_AWT_EVENTS_PERMISSION);\n-        }\n@@ -1854,5 +1833,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.ALL_AWT_EVENTS_PERMISSION);\n-        }\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Toolkit.java","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-      throws UnsupportedOperationException, HeadlessException, SecurityException\n+      throws UnsupportedOperationException, HeadlessException\n@@ -123,1 +123,0 @@\n-        SystemTray.checkSystemTrayAllowed();\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/TrayIcon.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -67,1 +67,0 @@\n-import sun.awt.AWTPermissions;\n@@ -1630,7 +1629,0 @@\n-        if (exclusionType == Dialog.ModalExclusionType.TOOLKIT_EXCLUDE) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(AWTPermissions.TOOLKIT_MODALITY_PERMISSION);\n-            }\n-        }\n@@ -2172,6 +2164,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(AWTPermissions.SET_WINDOW_ALWAYS_ON_TOP_PERMISSION);\n-        }\n-\n","filename":"src\/java.desktop\/share\/classes\/java\/awt\/Window.java","additions":0,"deletions":14,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1099,2 +1099,1 @@\n-          try {\n-              java.awt.Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(\n+          java.awt.Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(\n@@ -1102,3 +1101,0 @@\n-          } catch (SecurityException e) {\n-              this.dispatchEvent(new sun.awt.UngrabEvent(this));\n-          }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/JInternalFrame.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -1973,8 +1973,0 @@\n-        public void dispose() {\n-            try {\n-                getToolkit().getSystemEventQueue();\n-                super.dispose();\n-            } catch (Exception e) {\n-                \/\/ untrusted code not allowed to dispose\n-            }\n-        }\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/SwingUtilities.java","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -531,6 +531,1 @@\n-        \/\/ Try posting event, unless there's a SecurityManager.\n-        try {\n-            Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(e);\n-        } catch (SecurityException se) {\n-            frame.dispatchEvent(e);\n-        }\n+        Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(e);\n","filename":"src\/java.desktop\/share\/classes\/javax\/swing\/plaf\/basic\/BasicInternalFrameTitlePane.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -38,24 +38,0 @@\n-\n-    public static final AWTPermission CHECK_AWT_EVENTQUEUE_PERMISSION =\n-        new AWTPermission(\"accessEventQueue\");\n-\n-    public static final AWTPermission TOOLKIT_MODALITY_PERMISSION =\n-        new AWTPermission(\"toolkitModality\");\n-\n-    public static final AWTPermission READ_DISPLAY_PIXELS_PERMISSION =\n-        new AWTPermission(\"readDisplayPixels\");\n-\n-    public static final AWTPermission CREATE_ROBOT_PERMISSION =\n-        new AWTPermission(\"createRobot\");\n-\n-    public static final AWTPermission WATCH_MOUSE_PERMISSION =\n-        new AWTPermission(\"watchMousePointer\");\n-\n-    public static final AWTPermission SET_WINDOW_ALWAYS_ON_TOP_PERMISSION =\n-        new AWTPermission(\"setWindowAlwaysOnTop\");\n-\n-    public static final AWTPermission ALL_AWT_EVENTS_PERMISSION =\n-        new AWTPermission(\"listenToAllAWTEvents\");\n-\n-    public static final AWTPermission ACCESS_SYSTEM_TRAY_PERMISSION =\n-        new AWTPermission(\"accessSystemTray\");\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/AWTPermissions.java","additions":0,"deletions":24,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -1085,2 +1085,0 @@\n-     * This is a default implementation of this method, which checks\n-     * corresponding security permission.\n@@ -1089,12 +1087,1 @@\n-        boolean result = true;\n-        try {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(AWTPermissions.SET_WINDOW_ALWAYS_ON_TOP_PERMISSION);\n-            }\n-        } catch (SecurityException se) {\n-            \/\/ There is no permission to show popups over the task bar\n-            result = false;\n-        }\n-        return result;\n+        return true;\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/SunToolkit.java","additions":1,"deletions":14,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -440,5 +440,0 @@\n-    protected void checkCustomComposite() {\n-        \/\/ BufferedImages always allow Custom Composite objects since\n-        \/\/ their pixels are immediately retrievable anyway.\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/BufImgSurfaceData.java","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -133,9 +133,0 @@\n-    \/**\n-     * Performs Security Permissions checks to see if a Custom\n-     * Composite object should be allowed access to the pixels\n-     * of this surface.\n-     *\/\n-    protected void checkCustomComposite() {\n-        return;\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/NullSurfaceData.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -977,1 +977,0 @@\n-            surfaceData.checkCustomComposite();\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/SunGraphics2D.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1005,19 +1005,0 @@\n-    static java.security.Permission compPermission;\n-\n-    \/**\n-     * Performs Security Permissions checks to see if a Custom\n-     * Composite object should be allowed access to the pixels\n-     * of this surface.\n-     *\/\n-    protected void checkCustomComposite() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            if (compPermission == null) {\n-                compPermission =\n-                    new java.awt.AWTPermission(\"readDisplayPixels\");\n-            }\n-            sm.checkPermission(compPermission);\n-        }\n-    }\n-\n","filename":"src\/java.desktop\/share\/classes\/sun\/java2d\/SurfaceData.java","additions":0,"deletions":19,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.awt.AWTPermission;\n@@ -68,1 +67,0 @@\n-    private static AWTPermission fullScreenExclusivePermission;\n@@ -338,17 +336,1 @@\n-        boolean fsAvailable = isXrandrExtensionSupported();\n-        if (fsAvailable) {\n-            @SuppressWarnings(\"removal\")\n-            SecurityManager security = System.getSecurityManager();\n-            if (security != null) {\n-                if (fullScreenExclusivePermission == null) {\n-                    fullScreenExclusivePermission =\n-                        new AWTPermission(\"fullScreenExclusive\");\n-                }\n-                try {\n-                    security.checkPermission(fullScreenExclusivePermission);\n-                } catch (SecurityException e) {\n-                    return false;\n-                }\n-            }\n-        }\n-        return fsAvailable;\n+        return isXrandrExtensionSupported();\n","filename":"src\/java.desktop\/unix\/classes\/sun\/awt\/X11GraphicsDevice.java","additions":1,"deletions":19,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.awt.AWTPermission;\n@@ -84,1 +83,0 @@\n-    private static AWTPermission fullScreenExclusivePermission;\n@@ -352,17 +350,0 @@\n-    private static boolean isFSExclusiveModeAllowed() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            if (fullScreenExclusivePermission == null) {\n-                fullScreenExclusivePermission =\n-                    new AWTPermission(\"fullScreenExclusive\");\n-            }\n-            try {\n-                security.checkPermission(fullScreenExclusivePermission);\n-            } catch (SecurityException e) {\n-                return false;\n-            }\n-        }\n-        return true;\n-    }\n-\n@@ -374,1 +355,1 @@\n-        return isFSExclusiveModeAllowed();\n+        return true;\n","filename":"src\/java.desktop\/windows\/classes\/sun\/awt\/Win32GraphicsDevice.java","additions":1,"deletions":20,"binary":false,"changes":21,"status":"modified"}]}