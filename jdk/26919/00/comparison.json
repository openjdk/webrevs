{"files":[{"patch":"@@ -2235,0 +2235,16 @@\n+void Assembler::evcvttss2sis(Register dst, XMMRegister src) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_F3, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x6D, (0xC0 | encode));\n+}\n+\n+void Assembler::evcvttss2sisl(Register dst, XMMRegister src) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_F3, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x6D, (0xC0 | encode));\n+}\n+\n@@ -2320,0 +2336,8 @@\n+void Assembler::evcvttps2dqs(XMMRegister dst, XMMRegister src, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x6D, (0xC0 | encode));\n+}\n+\n@@ -2327,0 +2351,8 @@\n+void Assembler::evcvttpd2dqs(XMMRegister dst, XMMRegister src, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_NONE, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x6D, (0xC0 | encode));\n+}\n+\n@@ -2342,0 +2374,8 @@\n+void Assembler::evcvttps2qqs(XMMRegister dst, XMMRegister src, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x6D, (0xC0 | encode));\n+}\n+\n@@ -2366,0 +2406,8 @@\n+void Assembler::evcvttpd2qqs(XMMRegister dst, XMMRegister src, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_66, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x6D, (0xC0 | encode));\n+}\n+\n@@ -14996,0 +15044,16 @@\n+void Assembler::evcvttsd2sis(Register dst, XMMRegister src) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_F2, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x6D, (0xC0 | encode));\n+}\n+\n+void Assembler::evcvttsd2sisl(Register dst, XMMRegister src) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_is_evex_instruction();\n+  int encode = vex_prefix_and_encode(dst->encoding(), 0, src->encoding(), VEX_SIMD_F2, VEX_OPCODE_MAP5, &attributes);\n+  emit_int16(0x6D, (0xC0 | encode));\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":64,"deletions":0,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -1312,0 +1312,2 @@\n+  void evcvttsd2sis(Register dst, XMMRegister src);\n+  void evcvttsd2sisl(Register dst, XMMRegister src);\n@@ -1317,0 +1319,2 @@\n+  void evcvttss2sis(Register dst, XMMRegister src);\n+  void evcvttss2sisl(Register dst, XMMRegister src);\n@@ -1328,0 +1332,1 @@\n+  void evcvttps2dqs(XMMRegister dst, XMMRegister src, int vector_len);\n@@ -1329,0 +1334,1 @@\n+  void evcvttps2qqs(XMMRegister dst, XMMRegister src, int vector_len);\n@@ -1337,0 +1343,1 @@\n+  void evcvttpd2qqs(XMMRegister dst, XMMRegister src, int vector_len);\n@@ -1340,0 +1347,1 @@\n+  void evcvttpd2dqs(XMMRegister dst, XMMRegister src, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -5061,1 +5061,1 @@\n- * Algorithm for vector D2L and F2I conversions:-\n+ * Algorithm for vector D2L and F2I conversions (AVX 10.2 unsupported):-\n@@ -5166,0 +5166,40 @@\n+void C2_MacroAssembler::vector_cast2F2X_evex(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, int vec_enc) {\n+  switch(to_elem_bt) {\n+    case T_LONG:\n+      evcvttps2qqs(dst, src, vec_enc);\n+      break;\n+    case T_INT:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      break;\n+    case T_SHORT:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      evpmovdw(dst, dst, vec_enc);\n+      break;\n+    case T_BYTE:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      evpmovdb(dst, dst, vec_enc);\n+      break;\n+    default: assert(false, \"%s\", type2name(to_elem_bt));\n+  }\n+}\n+\n+void C2_MacroAssembler::vector_cast2D2X_evex(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, int vec_enc) {\n+  switch(to_elem_bt) {\n+    case T_LONG:\n+      evcvttpd2qqs(dst, src, vec_enc);\n+      break;\n+    case T_INT:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      break;\n+    case T_SHORT:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      evpmovdw(dst, dst, vec_enc);\n+      break;\n+    case T_BYTE:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      evpmovdb(dst, dst, vec_enc);\n+      break;\n+    default: assert(false, \"%s\", type2name(to_elem_bt));\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":41,"deletions":1,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -350,0 +350,3 @@\n+  void vector_cast2F2X_evex(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, int vec_enc);\n+\n+  void vector_cast2D2X_evex(BasicType to_elem_bt, XMMRegister dst, XMMRegister src, int vec_enc);\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -7667,1 +7667,3 @@\n-  predicate(!VM_Version::supports_avx512vl() && Matcher::vector_length_in_bytes(n->in(1)) < 64 &&\n+  predicate(!VM_Version::supports_avx10_2() &&\n+            !VM_Version::supports_avx512vl() &&\n+            Matcher::vector_length_in_bytes(n->in(1)) < 64 &&\n@@ -7690,1 +7692,2 @@\n-  predicate((VM_Version::supports_avx512vl() || Matcher::vector_length_in_bytes(n->in(1)) == 64) &&\n+  predicate(!VM_Version::supports_avx10_2() &&\n+            (VM_Version::supports_avx512vl() || Matcher::vector_length_in_bytes(n->in(1)) == 64) &&\n@@ -7712,0 +7715,14 @@\n+instruct cast2FtoX_reg_evex(vec dst, vec src, rFlagsReg cr) %{\n+  predicate(VM_Version::supports_avx10_2() &&\n+            is_integral_type(Matcher::vector_element_basic_type(n)));\n+  match(Set dst (VectorCastF2X src));\n+  effect(KILL cr);\n+  format %{ \"vector_cast2_f2x $dst, $src\\t!\" %}\n+  ins_encode %{\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n+    int vlen_enc = (to_elem_bt == T_LONG) ? vector_length_encoding(this) : vector_length_encoding(this, $src);\n+    __ vector_cast2F2X_evex(to_elem_bt, $dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -7724,1 +7741,3 @@\n-  predicate(!VM_Version::supports_avx512vl() && Matcher::vector_length_in_bytes(n->in(1)) < 64 &&\n+  predicate(!VM_Version::supports_avx10_2() &&\n+            !VM_Version::supports_avx512vl() &&\n+            Matcher::vector_length_in_bytes(n->in(1)) < 64 &&\n@@ -7740,1 +7759,2 @@\n-  predicate((VM_Version::supports_avx512vl() || Matcher::vector_length_in_bytes(n->in(1)) == 64) &&\n+  predicate(!VM_Version::supports_avx10_2() &&\n+            (VM_Version::supports_avx512vl() || Matcher::vector_length_in_bytes(n->in(1)) == 64) &&\n@@ -7756,0 +7776,14 @@\n+instruct cast2DtoX_reg_evex(vec dst, vec src, rFlagsReg cr) %{\n+  predicate(VM_Version::supports_avx10_2() &&\n+            is_integral_type(Matcher::vector_element_basic_type(n)));\n+  match(Set dst (VectorCastD2X src));\n+  effect(KILL cr);\n+  format %{ \"vector_cast2_d2x $dst, $src\\t!\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this, $src);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_cast2D2X_evex(to_elem_bt, $dst$$XMMRegister, $src$$XMMRegister, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":38,"deletions":4,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -11718,0 +11718,1 @@\n+  predicate(!VM_Version::supports_avx10_2());\n@@ -11727,0 +11728,13 @@\n+\/\/ XXX do mem variants\n+instruct conv2F2I_reg_reg(rRegI dst, regF src, rFlagsReg cr)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvF2I src));\n+  effect(KILL cr);\n+  format %{ \"evcvttss2sis $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttss2sis($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -11729,0 +11743,1 @@\n+  predicate(!VM_Version::supports_avx10_2());\n@@ -11738,0 +11753,12 @@\n+instruct conv2F2L_reg_reg(rRegL dst, regF src, rFlagsReg cr)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvF2L src));\n+  effect(KILL cr);\n+  format %{ \"evcvttss2sisl $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttss2sisl($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -11740,0 +11767,1 @@\n+  predicate(!VM_Version::supports_avx10_2());\n@@ -11749,0 +11777,13 @@\n+\/\/ XXX do mem variants\n+instruct conv2D2I_reg_reg(rRegI dst, regD src, rFlagsReg cr)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvD2I src));\n+  effect(KILL cr);\n+  format %{ \"evcvttsd2sis $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttsd2sis($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n@@ -11751,0 +11792,1 @@\n+  predicate(!VM_Version::supports_avx10_2());\n@@ -11760,0 +11802,12 @@\n+instruct conv2D2L_reg_reg(rRegL dst, regD src, rFlagsReg cr)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvD2L src));\n+  effect(KILL cr);\n+  format %{ \"evcvttsd2sisl $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttsd2sisl($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":54,"deletions":0,"binary":false,"changes":54,"status":"modified"}]}