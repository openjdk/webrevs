{"files":[{"patch":"@@ -2235,1 +2235,1 @@\n-void Assembler::evcvttss2sis(Register dst, XMMRegister src) {\n+void Assembler::evcvttss2sisl(Register dst, XMMRegister src) {\n@@ -2243,1 +2243,12 @@\n-void Assembler::evcvttss2sisl(Register dst, XMMRegister src) {\n+void Assembler::evcvttss2sisl(Register dst, Address src) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_T1S, \/* input_size_in_bits *\/ EVEX_32bit);\n+  attributes.set_is_evex_instruction();\n+  vex_prefix(src, 0, dst->encoding(), VEX_SIMD_F3, VEX_OPCODE_MAP5, &attributes);\n+  emit_int8((unsigned char)0x6D);\n+  emit_operand(dst, src, 0);\n+}\n+\n+void Assembler::evcvttss2sisq(Register dst, XMMRegister src) {\n@@ -2251,0 +2262,11 @@\n+void Assembler::evcvttss2sisq(Register dst, Address src) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_T1S, \/* input_size_in_bits *\/ EVEX_32bit);\n+  attributes.set_is_evex_instruction();\n+  vex_prefix(src, 0, dst->encoding(), VEX_SIMD_F3, VEX_OPCODE_MAP5, &attributes);\n+  emit_int8((unsigned char)0x6D);\n+  emit_operand(dst, src, 0);\n+}\n+\n@@ -2344,0 +2366,11 @@\n+void Assembler::evcvttps2dqs(XMMRegister dst, Address src, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_FV, \/* input_size_in_bits *\/ EVEX_NObit);\n+  attributes.set_is_evex_instruction();\n+  vex_prefix(src, 0, dst->encoding(), VEX_SIMD_NONE, VEX_OPCODE_MAP5, &attributes);\n+  emit_int8((unsigned char)0x6D);\n+  emit_operand(dst, src, 0);\n+}\n+\n@@ -2359,0 +2392,11 @@\n+void Assembler::evcvttpd2dqs(XMMRegister dst, Address src, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_FV, \/* input_size_in_bits *\/ EVEX_NObit);\n+  attributes.set_is_evex_instruction();\n+  vex_prefix(src, 0, dst->encoding(), VEX_SIMD_NONE, VEX_OPCODE_MAP5, &attributes);\n+  emit_int8((unsigned char)0x6D);\n+  emit_operand(dst, src, 0);\n+}\n+\n@@ -2382,0 +2426,11 @@\n+void Assembler::evcvttps2qqs(XMMRegister dst, Address src, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_HV, \/* input_size_in_bits *\/ EVEX_NObit);\n+  attributes.set_is_evex_instruction();\n+  vex_prefix(src, 0, dst->encoding(), VEX_SIMD_66, VEX_OPCODE_MAP5, &attributes);\n+  emit_int8((unsigned char)0x6D);\n+  emit_operand(dst, src, 0);\n+}\n+\n@@ -2414,0 +2469,11 @@\n+void Assembler::evcvttpd2qqs(XMMRegister dst, Address src, int vector_len) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(vector_len, \/* rex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ true);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_FV, \/* input_size_in_bits *\/ EVEX_NObit);\n+  attributes.set_is_evex_instruction();\n+  vex_prefix(src, 0, dst->encoding(), VEX_SIMD_66, VEX_OPCODE_MAP5, &attributes);\n+  emit_int8((unsigned char)0x6D);\n+  emit_operand(dst, src, 0);\n+}\n+\n@@ -15044,1 +15110,1 @@\n-void Assembler::evcvttsd2sis(Register dst, XMMRegister src) {\n+void Assembler::evcvttsd2sisl(Register dst, XMMRegister src) {\n@@ -15052,1 +15118,12 @@\n-void Assembler::evcvttsd2sisl(Register dst, XMMRegister src) {\n+void Assembler::evcvttsd2sisl(Register dst, Address src) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ false, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_T1S, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_is_evex_instruction();\n+  vex_prefix(src, 0, dst->encoding(), VEX_SIMD_F2, VEX_OPCODE_MAP5, &attributes);\n+  emit_int8((unsigned char)0x6D);\n+  emit_operand(dst, src, 0);\n+}\n+\n+void Assembler::evcvttsd2sisq(Register dst, XMMRegister src) {\n@@ -15060,0 +15137,11 @@\n+void Assembler::evcvttsd2sisq(Register dst, Address src) {\n+  assert(VM_Version::supports_avx10_2(), \"\");\n+  InstructionMark im(this);\n+  InstructionAttr attributes(AVX_128bit, \/* vex_w *\/ true, \/* legacy_mode *\/ false, \/* no_mask_reg *\/ true, \/* uses_vl *\/ false);\n+  attributes.set_address_attributes(\/* tuple_type *\/ EVEX_T1S, \/* input_size_in_bits *\/ EVEX_64bit);\n+  attributes.set_is_evex_instruction();\n+  vex_prefix(src, 0, dst->encoding(), VEX_SIMD_F2, VEX_OPCODE_MAP5, &attributes);\n+  emit_int8((unsigned char)0x6D);\n+  emit_operand(dst, src, 0);\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.cpp","additions":92,"deletions":4,"binary":false,"changes":96,"status":"modified"},{"patch":"@@ -1312,1 +1312,0 @@\n-  void evcvttsd2sis(Register dst, XMMRegister src);\n@@ -1314,0 +1313,3 @@\n+  void evcvttsd2sisl(Register dst, Address src);\n+  void evcvttsd2sisq(Register dst, XMMRegister src);\n+  void evcvttsd2sisq(Register dst, Address src);\n@@ -1319,1 +1321,0 @@\n-  void evcvttss2sis(Register dst, XMMRegister src);\n@@ -1321,0 +1322,3 @@\n+  void evcvttss2sisl(Register dst, Address src);\n+  void evcvttss2sisq(Register dst, XMMRegister src);\n+  void evcvttss2sisq(Register dst, Address src);\n@@ -1333,0 +1337,1 @@\n+  void evcvttps2dqs(XMMRegister dst, Address src, int vector_len);\n@@ -1335,0 +1340,1 @@\n+  void evcvttps2qqs(XMMRegister dst, Address src, int vector_len);\n@@ -1344,0 +1350,1 @@\n+  void evcvttpd2qqs(XMMRegister dst, Address src, int vector_len);\n@@ -1348,0 +1355,1 @@\n+  void evcvttpd2dqs(XMMRegister dst, Address src, int vector_len);\n","filename":"src\/hotspot\/cpu\/x86\/assembler_x86.hpp","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -5186,0 +5186,20 @@\n+void C2_MacroAssembler::vector_cast2F2X_evex(BasicType to_elem_bt, XMMRegister dst, Address src, int vec_enc) {\n+  switch(to_elem_bt) {\n+    case T_LONG:\n+      evcvttps2qqs(dst, src, vec_enc);\n+      break;\n+    case T_INT:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      break;\n+    case T_SHORT:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      evpmovdw(dst, dst, vec_enc);\n+      break;\n+    case T_BYTE:\n+      evcvttps2dqs(dst, src, vec_enc);\n+      evpmovdb(dst, dst, vec_enc);\n+      break;\n+    default: assert(false, \"%s\", type2name(to_elem_bt));\n+  }\n+}\n+\n@@ -5206,0 +5226,20 @@\n+void C2_MacroAssembler::vector_cast2D2X_evex(BasicType to_elem_bt, XMMRegister dst, Address src, int vec_enc) {\n+  switch(to_elem_bt) {\n+    case T_LONG:\n+      evcvttpd2qqs(dst, src, vec_enc);\n+      break;\n+    case T_INT:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      break;\n+    case T_SHORT:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      evpmovdw(dst, dst, vec_enc);\n+      break;\n+    case T_BYTE:\n+      evcvttpd2dqs(dst, src, vec_enc);\n+      evpmovdb(dst, dst, vec_enc);\n+      break;\n+    default: assert(false, \"%s\", type2name(to_elem_bt));\n+  }\n+}\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.cpp","additions":40,"deletions":0,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -352,0 +352,2 @@\n+  void vector_cast2F2X_evex(BasicType to_elem_bt, XMMRegister dst, Address src, int vec_enc);\n+\n@@ -354,0 +356,2 @@\n+  void vector_cast2D2X_evex(BasicType to_elem_bt, XMMRegister dst, Address src, int vec_enc);\n+\n","filename":"src\/hotspot\/cpu\/x86\/c2_MacroAssembler_x86.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -7715,1 +7715,1 @@\n-instruct cast2FtoX_reg_evex(vec dst, vec src, rFlagsReg cr) %{\n+instruct cast2FtoX_reg_evex(vec dst, vec src) %{\n@@ -7719,2 +7719,1 @@\n-  effect(KILL cr);\n-  format %{ \"vector_cast2_f2x $dst, $src\\t!\" %}\n+  format %{ \"vector_cast2r_f2x $dst, $src\\t!\" %}\n@@ -7729,0 +7728,13 @@\n+instruct cast2FtoX_mem_evex(vec dst, memory src) %{\n+  predicate(VM_Version::supports_avx10_2() &&\n+            is_integral_type(Matcher::vector_element_basic_type(n)));\n+  match(Set dst (VectorCastF2X src));\n+  format %{ \"vector_cast2m_f2x $dst, $src\\t!\" %}\n+  ins_encode %{\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n+    int vlen_enc = (to_elem_bt == T_LONG) ? vector_length_encoding(this) : vector_length_encoding(this, $src);\n+    __ vector_cast2F2X_evex(to_elem_bt, $dst$$XMMRegister, $src$$Address, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n@@ -7776,1 +7788,1 @@\n-instruct cast2DtoX_reg_evex(vec dst, vec src, rFlagsReg cr) %{\n+instruct cast2DtoX_reg_evex(vec dst, vec src) %{\n@@ -7780,2 +7792,1 @@\n-  effect(KILL cr);\n-  format %{ \"vector_cast2_d2x $dst, $src\\t!\" %}\n+  format %{ \"vector_cast2r_d2x $dst, $src\\t!\" %}\n@@ -7790,0 +7801,13 @@\n+instruct cast2DtoX_mem_evex(vec dst, memory src) %{\n+  predicate(VM_Version::supports_avx10_2() &&\n+            is_integral_type(Matcher::vector_element_basic_type(n)));\n+  match(Set dst (VectorCastD2X src));\n+  format %{ \"vector_cast2m_d2x $dst, $src\\t!\" %}\n+  ins_encode %{\n+    int vlen_enc = vector_length_encoding(this, $src);\n+    BasicType to_elem_bt = Matcher::vector_element_basic_type(this);\n+    __ vector_cast2D2X_evex(to_elem_bt, $dst$$XMMRegister, $src$$Address, vlen_enc);\n+  %}\n+  ins_pipe( pipe_slow );\n+%}\n+\n","filename":"src\/hotspot\/cpu\/x86\/x86.ad","additions":30,"deletions":6,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -11728,2 +11728,1 @@\n-\/\/ XXX do mem variants\n-instruct conv2F2I_reg_reg(rRegI dst, regF src, rFlagsReg cr)\n+instruct conv2F2I_reg_reg(rRegI dst, regF src)\n@@ -11733,2 +11732,12 @@\n-  effect(KILL cr);\n-  format %{ \"evcvttss2sis $dst, $src\" %}\n+  format %{ \"evcvttss2sisl $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttss2sisl($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct conv2F2I_reg_mem(rRegI dst, memory src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvF2I src));\n+  format %{ \"evcvttss2sisl $dst, $src\" %}\n@@ -11736,1 +11745,1 @@\n-    __ evcvttss2sis($dst$$Register, $src$$XMMRegister);\n+    __ evcvttss2sisl($dst$$Register, $src$$Address);\n@@ -11753,1 +11762,1 @@\n-instruct conv2F2L_reg_reg(rRegL dst, regF src, rFlagsReg cr)\n+instruct conv2F2L_reg_reg(rRegL dst, regF src)\n@@ -11757,2 +11766,1 @@\n-  effect(KILL cr);\n-  format %{ \"evcvttss2sisl $dst, $src\" %}\n+  format %{ \"evcvttss2sisq $dst, $src\" %}\n@@ -11760,1 +11768,12 @@\n-    __ evcvttss2sisl($dst$$Register, $src$$XMMRegister);\n+    __ evcvttss2sisq($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct conv2F2L_reg_mem(rRegL dst, memory src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvF2L src));\n+  format %{ \"evcvttss2sisq $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttss2sisq($dst$$Register, $src$$Address);\n@@ -11777,2 +11796,1 @@\n-\/\/ XXX do mem variants\n-instruct conv2D2I_reg_reg(rRegI dst, regD src, rFlagsReg cr)\n+instruct conv2D2I_reg_reg(rRegI dst, regD src)\n@@ -11782,2 +11800,12 @@\n-  effect(KILL cr);\n-  format %{ \"evcvttsd2sis $dst, $src\" %}\n+  format %{ \"evcvttsd2sisl $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttsd2sisl($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct conv2D2I_reg_mem(rRegI dst, memory src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvD2I src));\n+  format %{ \"evcvttsd2sisl $dst, $src\" %}\n@@ -11785,1 +11813,1 @@\n-    __ evcvttsd2sis($dst$$Register, $src$$XMMRegister);\n+    __ evcvttsd2sisl($dst$$Register, $src$$Address);\n@@ -11802,1 +11830,1 @@\n-instruct conv2D2L_reg_reg(rRegL dst, regD src, rFlagsReg cr)\n+instruct conv2D2L_reg_reg(rRegL dst, regD src)\n@@ -11806,2 +11834,1 @@\n-  effect(KILL cr);\n-  format %{ \"evcvttsd2sisl $dst, $src\" %}\n+  format %{ \"evcvttsd2sisq $dst, $src\" %}\n@@ -11809,1 +11836,12 @@\n-    __ evcvttsd2sisl($dst$$Register, $src$$XMMRegister);\n+    __ evcvttsd2sisq($dst$$Register, $src$$XMMRegister);\n+  %}\n+  ins_pipe(pipe_slow);\n+%}\n+\n+instruct conv2D2L_reg_mem(rRegL dst, memory src)\n+%{\n+  predicate(VM_Version::supports_avx10_2());\n+  match(Set dst (ConvD2I src));\n+  format %{ \"evcvttsd2sisq $dst, $src\" %}\n+  ins_encode %{\n+    __ evcvttsd2sisq($dst$$Register, $src$$Address);\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":56,"deletions":18,"binary":false,"changes":74,"status":"modified"}]}