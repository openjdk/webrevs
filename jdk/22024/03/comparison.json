{"files":[{"patch":"@@ -342,5 +342,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null)\n-            security.checkPermission(new RuntimePermission(\"getenv.*\"));\n-\n@@ -1072,5 +1067,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null)\n-            security.checkExec(prog);\n-\n@@ -1115,11 +1105,0 @@\n-            String exceptionInfo = \": \" + e.getMessage();\n-            Throwable cause = e;\n-            if ((e instanceof IOException) && security != null) {\n-                \/\/ Can not disclose the fail reason for read-protected files.\n-                try {\n-                    security.checkRead(prog);\n-                } catch (SecurityException se) {\n-                    exceptionInfo = \"\";\n-                    cause = se;\n-                }\n-            }\n@@ -1131,2 +1110,2 @@\n-                + exceptionInfo,\n-                cause);\n+                + \": \" + e.getMessage(),\n+                e);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessBuilder.java","additions":2,"deletions":23,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,22 +87,22 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final Executor processReaperExecutor =\n-            AccessController.doPrivileged((PrivilegedAction<Executor>) () -> {\n-                \/\/ Initialize ThreadLocalRandom now to avoid using the smaller stack\n-                \/\/ of the processReaper threads.\n-                ThreadLocalRandom.current();\n-\n-                \/\/ For a debug build, the stack shadow zone is larger;\n-                \/\/ Increase the total stack size to avoid potential stack overflow.\n-                int debugDelta = \"release\".equals(System.getProperty(\"jdk.debug\")) ? 0 : (4*4096);\n-                final long stackSize = Boolean.getBoolean(\"jdk.lang.processReaperUseDefaultStackSize\")\n-                        ? 0 : REAPER_DEFAULT_STACKSIZE + debugDelta;\n-\n-                ThreadFactory threadFactory = grimReaper -> {\n-                    Thread t = InnocuousThread.newSystemThread(\"process reaper\", grimReaper,\n-                            stackSize, Thread.MAX_PRIORITY);\n-                    privilegedThreadSetDaemon(t, true);\n-                    return t;\n-                };\n-\n-                return Executors.newCachedThreadPool(threadFactory);\n-            });\n+    private static final Executor processReaperExecutor = initReaper();\n+\n+    private static Executor initReaper() {\n+        \/\/ Initialize ThreadLocalRandom now to avoid using the smaller stack\n+        \/\/ of the processReaper threads.\n+        ThreadLocalRandom.current();\n+\n+        \/\/ For a debug build, the stack shadow zone is larger;\n+        \/\/ Increase the total stack size to avoid potential stack overflow.\n+        int debugDelta = \"release\".equals(System.getProperty(\"jdk.debug\")) ? 0 : (4 * 4096);\n+        final long stackSize = Boolean.getBoolean(\"jdk.lang.processReaperUseDefaultStackSize\")\n+                ? 0 : REAPER_DEFAULT_STACKSIZE + debugDelta;\n+\n+        ThreadFactory threadFactory = grimReaper -> {\n+            Thread t = InnocuousThread.newSystemThread(\"process reaper\", grimReaper,\n+                    stackSize, Thread.MAX_PRIORITY);\n+            t.setDaemon(true);\n+            return t;\n+        };\n+\n+        return Executors.newCachedThreadPool(threadFactory);\n+    }\n@@ -118,16 +118,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static void privilegedThreadSetName(Thread thread, String name) {\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            thread.setName(name);\n-            return null;\n-        });\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    private static void privilegedThreadSetDaemon(Thread thread, boolean on) {\n-        AccessController.doPrivileged((PrivilegedAction<Void>) () -> {\n-            thread.setDaemon(on);\n-            return null;\n-        });\n-    }\n-\n@@ -161,1 +145,1 @@\n-                        privilegedThreadSetName(t, \"process reaper (pid \" + pid + \")\");\n+                        t.setName(\"process reaper (pid \" + pid + \")\");\n@@ -192,1 +176,1 @@\n-                            privilegedThreadSetName(t, threadName);\n+                            t.setName(threadName);\n@@ -258,1 +242,0 @@\n-     * @throws SecurityException if RuntimePermission(\"manageProcess\") is not granted\n@@ -261,5 +244,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"manageProcess\"));\n-        }\n@@ -299,1 +277,0 @@\n-     * @throws SecurityException if RuntimePermission(\"manageProcess\") is not granted\n@@ -302,5 +279,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"manageProcess\"));\n-        }\n@@ -322,2 +294,0 @@\n-     * @throws SecurityException           if permission is not granted by the\n-     *                                     security policy\n@@ -326,5 +296,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"manageProcess\"));\n-        }\n@@ -445,5 +410,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"manageProcess\"));\n-        }\n@@ -466,5 +426,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"manageProcess\"));\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ProcessHandleImpl.java","additions":25,"deletions":70,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -45,3 +45,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -52,1 +49,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -98,1 +94,1 @@\n-        String s = GetPropertyAction.privilegedGetProperty(\"jdk.lang.Process.launchMechanism\");\n+        String s = System.getProperty(\"jdk.lang.Process.launchMechanism\");\n@@ -285,1 +281,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -305,8 +300,1 @@\n-        try {\n-            AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                initStreams(fds, forceNullOutputStream);\n-                return null;\n-            });\n-        } catch (PrivilegedActionException ex) {\n-            throw (IOException) ex.getCause();\n-        }\n+        initStreams(fds, forceNullOutputStream);\n@@ -510,5 +498,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"manageProcess\"));\n-        }\n","filename":"src\/java.base\/unix\/classes\/java\/lang\/ProcessImpl.java","additions":2,"deletions":19,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -51,1 +49,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -74,1 +71,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -80,3 +76,0 @@\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null)\n-                sm.checkWrite(path);\n@@ -86,7 +79,1 @@\n-            return AccessController.doPrivileged(\n-                new PrivilegedAction<FileOutputStream>() {\n-                    public FileOutputStream run() {\n-                        return new FileOutputStream(fd);\n-                    }\n-                }\n-            );\n+            return new FileOutputStream(fd);\n@@ -427,1 +414,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -437,4 +423,1 @@\n-        final SecurityManager security = System.getSecurityManager();\n-        final String value = GetPropertyAction.\n-                privilegedGetProperty(\"jdk.lang.Process.allowAmbiguousCommands\",\n-                        (security == null ? \"true\" : \"false\"));\n+        final String value = System.getProperty(\"jdk.lang.Process.allowAmbiguousCommands\", \"true\"));\n@@ -443,1 +426,1 @@\n-        if (allowAmbiguousCommands && security == null) {\n+        if (allowAmbiguousCommands) {\n@@ -481,4 +464,0 @@\n-\n-                \/\/ Check new executable name once more\n-                if (security != null)\n-                    security.checkExec(executablePath);\n@@ -508,12 +487,9 @@\n-        java.security.AccessController.doPrivileged(\n-        new java.security.PrivilegedAction<Void>() {\n-        public Void run() {\n-            if (stdHandles[0] == -1L)\n-                stdin_stream = ProcessBuilder.NullOutputStream.INSTANCE;\n-            else {\n-                FileDescriptor stdin_fd = new FileDescriptor();\n-                fdAccess.setHandle(stdin_fd, stdHandles[0]);\n-                fdAccess.registerCleanup(stdin_fd);\n-                stdin_stream = new BufferedOutputStream(\n-                    new PipeOutputStream(stdin_fd));\n-            }\n+        if (stdHandles[0] == -1L)\n+            stdin_stream = ProcessBuilder.NullOutputStream.INSTANCE;\n+        else {\n+            FileDescriptor stdin_fd = new FileDescriptor();\n+            fdAccess.setHandle(stdin_fd, stdHandles[0]);\n+            fdAccess.registerCleanup(stdin_fd);\n+            stdin_stream = new BufferedOutputStream(\n+                new PipeOutputStream(stdin_fd));\n+        }\n@@ -521,9 +497,9 @@\n-            if (stdHandles[1] == -1L || forceNullOutputStream)\n-                stdout_stream = ProcessBuilder.NullInputStream.INSTANCE;\n-            else {\n-                FileDescriptor stdout_fd = new FileDescriptor();\n-                fdAccess.setHandle(stdout_fd, stdHandles[1]);\n-                fdAccess.registerCleanup(stdout_fd);\n-                stdout_stream = new BufferedInputStream(\n-                    new PipeInputStream(stdout_fd));\n-            }\n+        if (stdHandles[1] == -1L || forceNullOutputStream)\n+            stdout_stream = ProcessBuilder.NullInputStream.INSTANCE;\n+        else {\n+            FileDescriptor stdout_fd = new FileDescriptor();\n+            fdAccess.setHandle(stdout_fd, stdHandles[1]);\n+            fdAccess.registerCleanup(stdout_fd);\n+            stdout_stream = new BufferedInputStream(\n+                new PipeInputStream(stdout_fd));\n+        }\n@@ -531,8 +507,8 @@\n-            if (stdHandles[2] == -1L)\n-                stderr_stream = ProcessBuilder.NullInputStream.INSTANCE;\n-            else {\n-                FileDescriptor stderr_fd = new FileDescriptor();\n-                fdAccess.setHandle(stderr_fd, stdHandles[2]);\n-                fdAccess.registerCleanup(stderr_fd);\n-                stderr_stream = new PipeInputStream(stderr_fd);\n-            }\n+        if (stdHandles[2] == -1L)\n+            stderr_stream = ProcessBuilder.NullInputStream.INSTANCE;\n+        else {\n+            FileDescriptor stderr_fd = new FileDescriptor();\n+            fdAccess.setHandle(stderr_fd, stdHandles[2]);\n+            fdAccess.registerCleanup(stderr_fd);\n+            stderr_stream = new PipeInputStream(stderr_fd);\n+        }\n@@ -540,1 +516,1 @@\n-            return null; }});\n+        return null;\n@@ -635,5 +611,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            sm.checkPermission(new RuntimePermission(\"manageProcess\"));\n-        }\n","filename":"src\/java.base\/windows\/classes\/java\/lang\/ProcessImpl.java","additions":30,"deletions":59,"binary":false,"changes":89,"status":"modified"}]}