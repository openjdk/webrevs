{"files":[{"patch":"@@ -188,0 +188,1 @@\n+     * @sealedGraph\n@@ -191,2 +192,1 @@\n-    public sealed interface TypeArg\n-            permits SignaturesImpl.TypeArgImpl {\n+    public sealed interface TypeArg {\n@@ -195,4 +195,2 @@\n-         * Indicator for whether a wildcard has default bound, no bound,\n-         * an upper bound, or a lower bound\n-         *\n-         * @since 22\n+         * Models an unbounded type argument {@code *}.\n+         * @since 23\n@@ -201,11 +199,2 @@\n-        public enum WildcardIndicator {\n-\n-            \/**\n-             * default bound wildcard (empty)\n-             *\/\n-            DEFAULT,\n-\n-            \/**\n-             * unbounded indicator {@code *}\n-             *\/\n-            UNBOUNDED,\n+        public sealed interface Unbounded extends TypeArg permits SignaturesImpl.UnboundedTypeArgImpl {\n+        }\n@@ -213,4 +202,6 @@\n-            \/**\n-             * upper-bounded indicator {@code +}\n-             *\/\n-            EXTENDS,\n+        \/**\n+         * Models a type argument with an explicit bound type.\n+         * @since 23\n+         *\/\n+        @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+        public sealed interface Bounded extends TypeArg permits SignaturesImpl.TypeArgImpl {\n@@ -219,1 +210,2 @@\n-             * lower-bounded indicator {@code -}\n+             * Models a type argument's wildcard indicator.\n+             * @since 23\n@@ -221,1 +213,24 @@\n-            SUPER;\n+            @PreviewFeature(feature = PreviewFeature.Feature.CLASSFILE_API)\n+            public enum WildcardIndicator {\n+\n+                \/**\n+                 * no wildcard (empty), an exact type\n+                 *\/\n+                DEFAULT,\n+\n+                \/**\n+                 * upper-bounded indicator {@code +}\n+                 *\/\n+                EXTENDS,\n+\n+                \/**\n+                 * lower-bounded indicator {@code -}\n+                 *\/\n+                SUPER;\n+            }\n+\n+            \/** {@return the kind of wildcard} *\/\n+            WildcardIndicator wildcardIndicator();\n+\n+            \/** {@return the signature of the type bound} *\/\n+            RefTypeSig boundType();\n@@ -224,6 +239,0 @@\n-        \/** {@return the wildcard indicator} *\/\n-        WildcardIndicator wildcardIndicator();\n-\n-        \/** {@return the signature of the type bound, if any} *\/\n-        Optional<RefTypeSig> boundType();\n-\n@@ -234,1 +243,1 @@\n-        public static TypeArg of(RefTypeSig boundType) {\n+        public static TypeArg.Bounded of(RefTypeSig boundType) {\n@@ -236,1 +245,1 @@\n-            return of(WildcardIndicator.DEFAULT, Optional.of(boundType));\n+            return bounded(Bounded.WildcardIndicator.DEFAULT, boundType);\n@@ -242,2 +251,2 @@\n-        public static TypeArg unbounded() {\n-            return of(WildcardIndicator.UNBOUNDED, Optional.empty());\n+        public static TypeArg.Unbounded unbounded() {\n+            return SignaturesImpl.UnboundedTypeArgImpl.INSTANCE;\n@@ -250,1 +259,1 @@\n-        public static TypeArg extendsOf(RefTypeSig boundType) {\n+        public static TypeArg.Bounded extendsOf(RefTypeSig boundType) {\n@@ -252,1 +261,1 @@\n-            return of(WildcardIndicator.EXTENDS, Optional.of(boundType));\n+            return bounded(Bounded.WildcardIndicator.EXTENDS, boundType);\n@@ -259,1 +268,1 @@\n-        public static TypeArg superOf(RefTypeSig boundType) {\n+        public static TypeArg.Bounded superOf(RefTypeSig boundType) {\n@@ -261,1 +270,1 @@\n-            return of(WildcardIndicator.SUPER, Optional.of(boundType));\n+            return bounded(Bounded.WildcardIndicator.SUPER, boundType);\n@@ -269,1 +278,3 @@\n-        public static TypeArg of(WildcardIndicator wildcard, Optional<RefTypeSig> boundType) {\n+        public static TypeArg.Bounded bounded(Bounded.WildcardIndicator wildcard, RefTypeSig boundType) {\n+            requireNonNull(wildcard);\n+            requireNonNull(boundType);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/Signature.java","additions":49,"deletions":38,"binary":false,"changes":87,"status":"modified"},{"patch":"@@ -372,5 +372,5 @@\n-                        cts.typeArgs().stream()\n-                                .map(ta -> Signature.TypeArg.of(\n-                                        ta.wildcardIndicator(),\n-                                        ta.boundType().map(this::mapSignature)))\n-                                .toArray(Signature.TypeArg[]::new));\n+                        cts.typeArgs().stream().map(ta -> switch (ta) {\n+                            case Signature.TypeArg.Unbounded u -> u;\n+                            case Signature.TypeArg.Bounded bta -> Signature.TypeArg.bounded(\n+                                    bta.wildcardIndicator(), mapSignature(bta.boundType()));\n+                        }).toArray(Signature.TypeArg[]::new));\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassRemapperImpl.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -283,2 +283,12 @@\n-                for (var ta : typeArgs)\n-                    sb.append(((TypeArgImpl)ta).signatureString());\n+                for (var ta : typeArgs) {\n+                    switch (ta) {\n+                        case TypeArg.Bounded b -> {\n+                            switch (b.wildcardIndicator()) {\n+                                case SUPER -> sb.append('-');\n+                                case EXTENDS -> sb.append('+');\n+                            }\n+                            sb.append(b.boundType().signatureString());\n+                        }\n+                        case TypeArg.Unbounded _ -> sb.append('*');\n+                    }\n+                }\n@@ -291,1 +301,3 @@\n-    public static record TypeArgImpl(WildcardIndicator wildcardIndicator, Optional<RefTypeSig> boundType) implements Signature.TypeArg {\n+    public static enum UnboundedTypeArgImpl implements TypeArg.Unbounded {\n+        INSTANCE;\n+    }\n@@ -293,8 +305,1 @@\n-        public String signatureString() {\n-            return switch (wildcardIndicator) {\n-                case DEFAULT -> boundType.get().signatureString();\n-                case EXTENDS -> \"+\" + boundType.get().signatureString();\n-                case SUPER -> \"-\" + boundType.get().signatureString();\n-                case UNBOUNDED -> \"*\";\n-            };\n-        }\n+    public static record TypeArgImpl(WildcardIndicator wildcardIndicator, RefTypeSig boundType) implements Signature.TypeArg.Bounded {\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SignaturesImpl.java","additions":16,"deletions":11,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -369,10 +369,14 @@\n-            switch (ta.wildcardIndicator()) {\n-                case DEFAULT -> print(sb, ta.boundType().get());\n-                case UNBOUNDED -> sb.append('?');\n-                case EXTENDS -> {\n-                    sb.append(\"? extends \");\n-                    print(sb, ta.boundType().get());\n-                }\n-                case SUPER -> {\n-                    sb.append(\"? super \");\n-                    print(sb, ta.boundType().get());\n+            switch (ta) {\n+                case Signature.TypeArg.Unbounded _ -> sb.append('?');\n+                case Signature.TypeArg.Bounded bta -> {\n+                    switch (bta.wildcardIndicator()) {\n+                        case DEFAULT -> print(sb, bta.boundType());\n+                        case EXTENDS -> {\n+                            sb.append(\"? extends \");\n+                            print(sb, bta.boundType());\n+                        }\n+                        case SUPER -> {\n+                            sb.append(\"? super \");\n+                            print(sb, bta.boundType());\n+                        }\n+                    }\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -186,3 +186,4 @@\n-        var innerSig = (ClassTypeSig) sig.superclassSignature() \/\/ ArrayList\n-                .typeArgs().getFirst() \/\/ Outer<String>.Inner<Long>\n-                .boundType().orElseThrow(); \/\/ assert it's exact bound\n+        var arrayListSig = sig.superclassSignature(); \/\/ ArrayList\n+        var arrayListTypeArg = (TypeArg.Bounded) arrayListSig.typeArgs().getFirst(); \/\/ Outer<String>.Inner<Long>\n+        assertEquals(TypeArg.Bounded.WildcardIndicator.DEFAULT, arrayListTypeArg.wildcardIndicator());\n+        var innerSig = (ClassTypeSig) arrayListTypeArg.boundType();\n","filename":"test\/jdk\/jdk\/classfile\/SignaturesTest.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -315,15 +315,8 @@\n-            switch (type.wildcardIndicator()) {\n-                case UNBOUNDED -> {\n-                    return \"W{?}\";\n-                }\n-                case EXTENDS -> {\n-                    return \"W{e,\" + print(type.boundType().get()) + \"}\";\n-                }\n-                case SUPER -> {\n-                    return \"W{s,\" + print(type.boundType().get()) + \"}\";\n-                }\n-                default -> {\n-                    if (type.boundType().isPresent()) return print(type.boundType().get());\n-                    else throw new AssertionError();\n-                }\n-            }\n+            return switch (type) {\n+                case Signature.TypeArg.Unbounded _ -> \"W{?}\";\n+                case Signature.TypeArg.Bounded b -> switch (b.wildcardIndicator()) {\n+                    case EXTENDS -> \"W{e,\" + print(b.boundType()) + \"}\";\n+                    case SUPER -> \"W{s,\" + print(b.boundType()) + \"}\";\n+                    case DEFAULT -> print(b.boundType());\n+                };\n+            };\n","filename":"test\/langtools\/tools\/javap\/classfile\/6888367\/T6888367.java","additions":9,"deletions":16,"binary":false,"changes":25,"status":"modified"}]}