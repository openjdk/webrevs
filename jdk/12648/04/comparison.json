{"files":[{"patch":"@@ -16526,17 +16526,0 @@\n-\/\/ counted loop end branch near Unsigned\n-instruct branchLoopEndU(cmpOpU cmp, rFlagsRegU cr, label lbl)\n-%{\n-  match(CountedLoopEnd cmp cr);\n-\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-  \/\/ short variant.\n-  \/\/ ins_short_branch(1);\n-  format %{ \"b$cmp $lbl \\t\/\/ counted loop end unsigned\" %}\n-\n-  ins_encode(aarch64_enc_br_conU(cmp, lbl));\n-\n-  ins_pipe(pipe_branch);\n-%}\n-\n@@ -16544,1 +16527,0 @@\n-\/\/ counted loop end branch far unsigned\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":0,"deletions":18,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -8946,20 +8946,0 @@\n-instruct cmpU_loop(cmpOpU cmp, iRegI op1, iRegI op2, label lbl)\n-%{\n-  \/\/ Same match rule as `far_cmpU_loop'.\n-  match(CountedLoopEnd cmp (CmpU op1 op2));\n-\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-\n-  format %{ \"b$cmp  $op1, $op2, $lbl\\t#@cmpU_loop\" %}\n-\n-  ins_encode %{\n-    __ cmp_branch($cmp$$cmpcode | C2_MacroAssembler::unsigned_branch_mask, as_Register($op1$$reg),\n-                  as_Register($op2$$reg), *($lbl$$label));\n-  %}\n-\n-  ins_pipe(pipe_cmp_branch);\n-  ins_short_branch(1);\n-%}\n-\n@@ -9025,19 +9005,0 @@\n-instruct cmpUL_loop(cmpOpU cmp, iRegL op1, iRegL op2, label lbl)\n-%{\n-  \/\/ Same match rule as `far_cmpUL_loop'.\n-  match(CountedLoopEnd cmp (CmpUL op1 op2));\n-\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-  format %{ \"b$cmp  $op1, $op2, $lbl\\t#@cmpUL_loop\" %}\n-\n-  ins_encode %{\n-    __ cmp_branch($cmp$$cmpcode | C2_MacroAssembler::unsigned_branch_mask, as_Register($op1$$reg),\n-                  as_Register($op2$$reg), *($lbl$$label));\n-  %}\n-\n-  ins_pipe(pipe_cmp_branch);\n-  ins_short_branch(1);\n-%}\n-\n@@ -9065,20 +9026,0 @@\n-instruct cmpP_loop(cmpOpU cmp, iRegP op1, iRegP op2, label lbl)\n-%{\n-  \/\/ Same match rule as `far_cmpP_loop'.\n-  match(CountedLoopEnd cmp (CmpP op1 op2));\n-\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-\n-  format %{ \"b$cmp  $op1, $op2, $lbl\\t#@cmpP_loop\" %}\n-\n-  ins_encode %{\n-    __ cmp_branch($cmp$$cmpcode | C2_MacroAssembler::unsigned_branch_mask, as_Register($op1$$reg),\n-                  as_Register($op2$$reg), *($lbl$$label));\n-  %}\n-\n-  ins_pipe(pipe_cmp_branch);\n-  ins_short_branch(1);\n-%}\n-\n@@ -9106,20 +9047,0 @@\n-instruct cmpN_loop(cmpOpU cmp, iRegN op1, iRegN op2, label lbl)\n-%{\n-  \/\/ Same match rule as `far_cmpN_loop'.\n-  match(CountedLoopEnd cmp (CmpN op1 op2));\n-\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-\n-  format %{ \"b$cmp  $op1, $op2, $lbl\\t#@cmpN_loop\" %}\n-\n-  ins_encode %{\n-    __ cmp_branch($cmp$$cmpcode | C2_MacroAssembler::unsigned_branch_mask, as_Register($op1$$reg),\n-                  as_Register($op2$$reg), *($lbl$$label));\n-  %}\n-\n-  ins_pipe(pipe_cmp_branch);\n-  ins_short_branch(1);\n-%}\n-\n@@ -9145,17 +9066,0 @@\n-instruct cmpF_loop(cmpOp cmp, fRegF op1, fRegF op2, label lbl)\n-%{\n-  \/\/ Same match rule as `far_cmpF_loop'.\n-  match(CountedLoopEnd cmp (CmpF op1 op2));\n-  effect(USE lbl);\n-\n-  ins_cost(XFER_COST + BRANCH_COST);\n-  format %{ \"float_b$cmp $op1, $op2, $lbl\\t#@cmpF_loop\"%}\n-\n-  ins_encode %{\n-    __ float_cmp_branch($cmp$$cmpcode, as_FloatRegister($op1$$reg), as_FloatRegister($op2$$reg), *($lbl$$label));\n-  %}\n-\n-  ins_pipe(pipe_class_compare);\n-  ins_short_branch(1);\n-%}\n-\n@@ -9181,18 +9085,0 @@\n-instruct cmpD_loop(cmpOp cmp, fRegD op1, fRegD op2, label lbl)\n-%{\n-  \/\/ Same match rule as `far_cmpD_loop'.\n-  match(CountedLoopEnd cmp (CmpD op1 op2));\n-  effect(USE lbl);\n-\n-  ins_cost(XFER_COST + BRANCH_COST);\n-  format %{ \"double_b$cmp $op1, $op2, $lbl\\t#@cmpD_loop\"%}\n-\n-  ins_encode %{\n-    __ float_cmp_branch($cmp$$cmpcode | C2_MacroAssembler::double_branch_mask, as_FloatRegister($op1$$reg),\n-                        as_FloatRegister($op2$$reg), *($lbl$$label));\n-  %}\n-\n-  ins_pipe(pipe_class_compare);\n-  ins_short_branch(1);\n-%}\n-\n@@ -9257,20 +9143,0 @@\n-instruct cmpUEqNeLeGt_reg_imm0_loop(cmpOpUEqNeLeGt cmp, iRegI op1, immI0 zero, label lbl)\n-%{\n-  \/\/ Same match rule as `far_cmpUEqNeLeGt_reg_imm0_loop'.\n-  match(CountedLoopEnd cmp (CmpU op1 zero));\n-\n-  effect(USE op1, USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-\n-  format %{ \"b$cmp  $op1, zr, $lbl\\t#@cmpUEqNeLeGt_reg_imm0_loop\" %}\n-\n-\n-  ins_encode %{\n-    __ enc_cmpUEqNeLeGt_imm0_branch($cmp$$cmpcode, as_Register($op1$$reg), *($lbl$$label));\n-  %}\n-\n-  ins_pipe(pipe_cmpz_branch);\n-  ins_short_branch(1);\n-%}\n-\n@@ -9336,19 +9202,0 @@\n-instruct cmpULEqNeLeGt_reg_imm0_loop(cmpOpUEqNeLeGt cmp, iRegL op1, immL0 zero, label lbl)\n-%{\n-  \/\/ Same match rule as `far_cmpULEqNeLeGt_reg_imm0_loop'.\n-  match(CountedLoopEnd cmp (CmpUL op1 zero));\n-\n-  effect(USE op1, USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-\n-  format %{ \"b$cmp  $op1, zr, $lbl\\t#@cmpULEqNeLeGt_reg_imm0_loop\" %}\n-\n-  ins_encode %{\n-    __ enc_cmpUEqNeLeGt_imm0_branch($cmp$$cmpcode, as_Register($op1$$reg), *($lbl$$label));\n-  %}\n-\n-  ins_pipe(pipe_cmpz_branch);\n-  ins_short_branch(1);\n-%}\n-\n@@ -9372,16 +9219,0 @@\n-instruct cmpP_imm0_loop(cmpOpEqNe cmp, iRegP op1, immP0 zero, label lbl) %{\n-  \/\/ Same match rule as `far_cmpP_reg_imm0_loop'.\n-  match(CountedLoopEnd cmp (CmpP op1 zero));\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-  format %{ \"b$cmp   $op1, zr, $lbl\\t#@cmpP_imm0_loop\" %}\n-\n-  ins_encode %{\n-    __ enc_cmpEqNe_imm0_branch($cmp$$cmpcode, as_Register($op1$$reg), *($lbl$$label));\n-  %}\n-\n-  ins_pipe(pipe_cmpz_branch);\n-  ins_short_branch(1);\n-%}\n-\n@@ -9406,17 +9237,0 @@\n-instruct cmpN_imm0_loop(cmpOpEqNe cmp, iRegN op1, immN0 zero, label lbl) %{\n-  \/\/ Same match rule as `far_cmpN_reg_imm0_loop'.\n-  match(CountedLoopEnd cmp (CmpN op1 zero));\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-\n-  format %{ \"b$cmp  $op1, zr, $lbl\\t#@cmpN_imm0_loop\" %}\n-\n-  ins_encode %{\n-    __ enc_cmpEqNe_imm0_branch($cmp$$cmpcode, as_Register($op1$$reg), *($lbl$$label));\n-  %}\n-\n-  ins_pipe(pipe_cmpz_branch);\n-  ins_short_branch(1);\n-%}\n-\n@@ -9440,16 +9254,0 @@\n-instruct cmpP_narrowOop_imm0_loop(cmpOpEqNe cmp, iRegN op1, immP0 zero, label lbl) %{\n-  \/\/ Same match rule as `far_cmpP_narrowOop_imm0_loop'.\n-  match(CountedLoopEnd cmp (CmpP (DecodeN op1) zero));\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-  format %{ \"b$cmp   $op1, zr, $lbl\\t#@cmpP_narrowOop_imm0_loop\" %}\n-\n-  ins_encode %{\n-    __ enc_cmpEqNe_imm0_branch($cmp$$cmpcode, as_Register($op1$$reg), *($lbl$$label));\n-  %}\n-\n-  ins_pipe(pipe_cmpz_branch);\n-  ins_short_branch(1);\n-%}\n-\n@@ -9519,15 +9317,0 @@\n-instruct far_cmpU_loop(cmpOpU cmp, iRegI op1, iRegI op2, label lbl) %{\n-  match(CountedLoopEnd cmp (CmpU op1 op2));\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST * 2);\n-  format %{ \"far_b$cmp $op1, $op2, $lbl\\t#@far_cmpU_loop\" %}\n-\n-  ins_encode %{\n-    __ cmp_branch($cmp$$cmpcode | C2_MacroAssembler::unsigned_branch_mask, as_Register($op1$$reg),\n-                       as_Register($op2$$reg), *($lbl$$label), \/* is_far *\/ true);\n-  %}\n-\n-  ins_pipe(pipe_cmp_branch);\n-%}\n-\n@@ -9577,15 +9360,0 @@\n-instruct far_cmpUL_loop(cmpOpU cmp, iRegL op1, iRegL op2, label lbl) %{\n-  match(CountedLoopEnd cmp (CmpUL op1 op2));\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST * 2);\n-  format %{ \"far_b$cmp  $op1, $op2, $lbl\\t#@far_cmpUL_loop\" %}\n-\n-  ins_encode %{\n-    __ cmp_branch($cmp$$cmpcode | C2_MacroAssembler::unsigned_branch_mask, as_Register($op1$$reg),\n-                       as_Register($op2$$reg), *($lbl$$label), \/* is_far *\/ true);\n-  %}\n-\n-  ins_pipe(pipe_cmp_branch);\n-%}\n-\n@@ -9610,18 +9378,0 @@\n-instruct far_cmpP_loop(cmpOpU cmp, iRegP op1, iRegP op2, label lbl)\n-%{\n-  match(CountedLoopEnd cmp (CmpP op1 op2));\n-\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST * 2);\n-\n-  format %{ \"far_b$cmp  $op1, $op2, $lbl\\t#@far_cmpP_loop\" %}\n-\n-  ins_encode %{\n-    __ cmp_branch($cmp$$cmpcode | C2_MacroAssembler::unsigned_branch_mask, as_Register($op1$$reg),\n-                       as_Register($op2$$reg), *($lbl$$label), \/* is_far *\/ true);\n-  %}\n-\n-  ins_pipe(pipe_cmp_branch);\n-%}\n-\n@@ -9646,18 +9396,0 @@\n-instruct far_cmpN_loop(cmpOpU cmp, iRegN op1, iRegN op2, label lbl)\n-%{\n-  match(CountedLoopEnd cmp (CmpN op1 op2));\n-\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST * 2);\n-\n-  format %{ \"far_b$cmp  $op1, $op2, $lbl\\t#@far_cmpN_loop\" %}\n-\n-  ins_encode %{\n-    __ cmp_branch($cmp$$cmpcode | C2_MacroAssembler::unsigned_branch_mask, as_Register($op1$$reg),\n-                  as_Register($op2$$reg), *($lbl$$label), \/* is_far *\/ true);\n-  %}\n-\n-  ins_pipe(pipe_cmp_branch);\n-%}\n-\n@@ -9682,16 +9414,0 @@\n-instruct far_cmpF_loop(cmpOp cmp, fRegF op1, fRegF op2, label lbl)\n-%{\n-  match(CountedLoopEnd cmp (CmpF op1 op2));\n-  effect(USE lbl);\n-\n-  ins_cost(XFER_COST + BRANCH_COST * 2);\n-  format %{ \"far_float_b$cmp $op1, $op2, $lbl\\t#@far_cmpF_loop\"%}\n-\n-  ins_encode %{\n-    __ float_cmp_branch($cmp$$cmpcode, as_FloatRegister($op1$$reg), as_FloatRegister($op2$$reg),\n-                        *($lbl$$label), \/* is_far *\/ true);\n-  %}\n-\n-  ins_pipe(pipe_class_compare);\n-%}\n-\n@@ -9715,16 +9431,0 @@\n-instruct far_cmpD_loop(cmpOp cmp, fRegD op1, fRegD op2, label lbl)\n-%{\n-  match(CountedLoopEnd cmp (CmpD op1 op2));\n-  effect(USE lbl);\n-\n-  ins_cost(XFER_COST + BRANCH_COST * 2);\n-  format %{ \"far_double_b$cmp $op1, $op2, $lbl\\t#@far_cmpD_loop\"%}\n-\n-  ins_encode %{\n-    __ float_cmp_branch($cmp$$cmpcode | C2_MacroAssembler::double_branch_mask, as_FloatRegister($op1$$reg),\n-                        as_FloatRegister($op2$$reg), *($lbl$$label), \/* is_far *\/ true);\n-  %}\n-\n-  ins_pipe(pipe_class_compare);\n-%}\n-\n@@ -9782,18 +9482,0 @@\n-instruct far_cmpUEqNeLeGt_reg_imm0_loop(cmpOpUEqNeLeGt cmp, iRegI op1, immI0 zero, label lbl)\n-%{\n-  match(CountedLoopEnd cmp (CmpU op1 zero));\n-\n-  effect(USE op1, USE lbl);\n-\n-  ins_cost(BRANCH_COST * 2);\n-\n-  format %{ \"far_b$cmp  $op1, zr, $lbl\\t#@far_cmpUEqNeLeGt_reg_imm0_loop\" %}\n-\n-\n-  ins_encode %{\n-    __ enc_cmpUEqNeLeGt_imm0_branch($cmp$$cmpcode, as_Register($op1$$reg), *($lbl$$label), \/* is_far *\/ true);\n-  %}\n-\n-  ins_pipe(pipe_cmpz_branch);\n-%}\n-\n@@ -9816,15 +9498,0 @@\n-instruct far_cmpULtGe_reg_imm0_loop(cmpOpULtGe cmp, iRegI op1, immI0 zero, label lbl)\n-%{\n-  match(CountedLoopEnd cmp (CmpU op1 zero));\n-\n-  effect(USE op1, USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-\n-  format %{ \"j  $lbl if $cmp == ge\\t#@far_cmpULtGe_reg_imm0_loop\" %}\n-\n-  ins_encode(riscv_enc_far_cmpULtGe_imm0_branch(cmp, op1, lbl));\n-\n-  ins_pipe(pipe_cmpz_branch);\n-%}\n-\n@@ -9882,17 +9549,0 @@\n-instruct far_cmpULEqNeLeGt_reg_imm0_loop(cmpOpUEqNeLeGt cmp, iRegL op1, immL0 zero, label lbl)\n-%{\n-  match(CountedLoopEnd cmp (CmpUL op1 zero));\n-\n-  effect(USE op1, USE lbl);\n-\n-  ins_cost(BRANCH_COST * 2);\n-\n-  format %{ \"far_b$cmp  $op1, zr, $lbl\\t#@far_cmpULEqNeLeGt_reg_imm0_loop\" %}\n-\n-  ins_encode %{\n-    __ enc_cmpUEqNeLeGt_imm0_branch($cmp$$cmpcode, as_Register($op1$$reg), *($lbl$$label), \/* is_far *\/ true);\n-  %}\n-\n-  ins_pipe(pipe_cmpz_branch);\n-%}\n-\n@@ -9915,15 +9565,0 @@\n-instruct far_cmpULLtGe_reg_imm0_loop(cmpOpULtGe cmp, iRegL op1, immL0 zero, label lbl)\n-%{\n-  match(CountedLoopEnd cmp (CmpUL op1 zero));\n-\n-  effect(USE op1, USE lbl);\n-\n-  ins_cost(BRANCH_COST);\n-\n-  format %{ \"j  $lbl if $cmp == ge\\t#@far_cmpULLtGe_reg_imm0_loop\" %}\n-\n-  ins_encode(riscv_enc_far_cmpULtGe_imm0_branch(cmp, op1, lbl));\n-\n-  ins_pipe(pipe_cmpz_branch);\n-%}\n-\n@@ -9944,14 +9579,0 @@\n-instruct far_cmpP_imm0_loop(cmpOpEqNe cmp, iRegP op1, immP0 zero, label lbl) %{\n-  match(CountedLoopEnd cmp (CmpP op1 zero));\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST * 2);\n-  format %{ \"far_b$cmp   $op1, zr, $lbl\\t#@far_cmpP_imm0_loop\" %}\n-\n-  ins_encode %{\n-    __ enc_cmpEqNe_imm0_branch($cmp$$cmpcode, as_Register($op1$$reg), *($lbl$$label), \/* is_far *\/ true);\n-  %}\n-\n-  ins_pipe(pipe_cmpz_branch);\n-%}\n-\n@@ -9973,15 +9594,0 @@\n-instruct far_cmpN_imm0_loop(cmpOpEqNe cmp, iRegN op1, immN0 zero, label lbl) %{\n-  match(CountedLoopEnd cmp (CmpN op1 zero));\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST * 2);\n-\n-  format %{ \"far_b$cmp  $op1, zr, $lbl\\t#@far_cmpN_imm0_loop\" %}\n-\n-  ins_encode %{\n-    __ enc_cmpEqNe_imm0_branch($cmp$$cmpcode, as_Register($op1$$reg), *($lbl$$label), \/* is_far *\/ true);\n-  %}\n-\n-  ins_pipe(pipe_cmpz_branch);\n-%}\n-\n@@ -10002,14 +9608,0 @@\n-instruct far_cmpP_narrowOop_imm0_loop(cmpOpEqNe cmp, iRegN op1, immP0 zero, label lbl) %{\n-  match(CountedLoopEnd cmp (CmpP (DecodeN op1) zero));\n-  effect(USE lbl);\n-\n-  ins_cost(BRANCH_COST * 2);\n-  format %{ \"far_b$cmp   $op1, zr, $lbl\\t#@far_cmpP_narrowOop_imm0_loop\" %}\n-\n-  ins_encode %{\n-    __ enc_cmpEqNe_imm0_branch($cmp$$cmpcode, as_Register($op1$$reg), *($lbl$$label), \/* is_far *\/ true);\n-  %}\n-\n-  ins_pipe(pipe_cmpz_branch);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":0,"deletions":408,"binary":false,"changes":408,"status":"modified"},{"patch":"@@ -12684,29 +12684,0 @@\n-\/\/ Jump Direct Conditional - Label defines a relative address from Jcc+1\n-instruct jmpLoopEndU(cmpOpU cop, eFlagsRegU cmp, label labl) %{\n-  match(CountedLoopEnd cop cmp);\n-  effect(USE labl);\n-\n-  ins_cost(300);\n-  format %{ \"J$cop,u  $labl\\t# Loop end\" %}\n-  size(6);\n-  ins_encode %{\n-    Label* L = $labl$$label;\n-    __ jcc((Assembler::Condition)($cop$$cmpcode), *L, false); \/\/ Always long jump\n-  %}\n-  ins_pipe( pipe_jcc );\n-%}\n-\n-instruct jmpLoopEndUCF(cmpOpUCF cop, eFlagsRegUCF cmp, label labl) %{\n-  match(CountedLoopEnd cop cmp);\n-  effect(USE labl);\n-\n-  ins_cost(200);\n-  format %{ \"J$cop,u  $labl\\t# Loop end\" %}\n-  size(6);\n-  ins_encode %{\n-    Label* L = $labl$$label;\n-    __ jcc((Assembler::Condition)($cop$$cmpcode), *L, false); \/\/ Always long jump\n-  %}\n-  ins_pipe( pipe_jcc );\n-%}\n-\n@@ -12876,31 +12847,0 @@\n-\/\/ Jump Direct Conditional - Label defines a relative address from Jcc+1\n-instruct jmpLoopEndU_short(cmpOpU cop, eFlagsRegU cmp, label labl) %{\n-  match(CountedLoopEnd cop cmp);\n-  effect(USE labl);\n-\n-  ins_cost(300);\n-  format %{ \"J$cop,us $labl\\t# Loop end\" %}\n-  size(2);\n-  ins_encode %{\n-    Label* L = $labl$$label;\n-    __ jccb((Assembler::Condition)($cop$$cmpcode), *L);\n-  %}\n-  ins_pipe( pipe_jcc );\n-  ins_short_branch(1);\n-%}\n-\n-instruct jmpLoopEndUCF_short(cmpOpUCF cop, eFlagsRegUCF cmp, label labl) %{\n-  match(CountedLoopEnd cop cmp);\n-  effect(USE labl);\n-\n-  ins_cost(300);\n-  format %{ \"J$cop,us $labl\\t# Loop end\" %}\n-  size(2);\n-  ins_encode %{\n-    Label* L = $labl$$label;\n-    __ jccb((Assembler::Condition)($cop$$cmpcode), *L);\n-  %}\n-  ins_pipe( pipe_jcc );\n-  ins_short_branch(1);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86_32.ad","additions":0,"deletions":60,"binary":false,"changes":60,"status":"modified"},{"patch":"@@ -13056,29 +13056,0 @@\n-\/\/ Jump Direct Conditional - Label defines a relative address from Jcc+1\n-instruct jmpLoopEndU(cmpOpU cop, rFlagsRegU cmp, label labl) %{\n-  match(CountedLoopEnd cop cmp);\n-  effect(USE labl);\n-\n-  ins_cost(300);\n-  format %{ \"j$cop,u   $labl\\t# loop end\" %}\n-  size(6);\n-  ins_encode %{\n-    Label* L = $labl$$label;\n-    __ jcc((Assembler::Condition)($cop$$cmpcode), *L, false); \/\/ Always long jump\n-  %}\n-  ins_pipe(pipe_jcc);\n-%}\n-\n-instruct jmpLoopEndUCF(cmpOpUCF cop, rFlagsRegUCF cmp, label labl) %{\n-  match(CountedLoopEnd cop cmp);\n-  effect(USE labl);\n-\n-  ins_cost(200);\n-  format %{ \"j$cop,u   $labl\\t# loop end\" %}\n-  size(6);\n-  ins_encode %{\n-    Label* L = $labl$$label;\n-    __ jcc((Assembler::Condition)($cop$$cmpcode), *L, false); \/\/ Always long jump\n-  %}\n-  ins_pipe(pipe_jcc);\n-%}\n-\n@@ -13257,31 +13228,0 @@\n-\/\/ Jump Direct Conditional - Label defines a relative address from Jcc+1\n-instruct jmpLoopEndU_short(cmpOpU cop, rFlagsRegU cmp, label labl) %{\n-  match(CountedLoopEnd cop cmp);\n-  effect(USE labl);\n-\n-  ins_cost(300);\n-  format %{ \"j$cop,us  $labl\\t# loop end\" %}\n-  size(2);\n-  ins_encode %{\n-    Label* L = $labl$$label;\n-    __ jccb((Assembler::Condition)($cop$$cmpcode), *L);\n-  %}\n-  ins_pipe(pipe_jcc);\n-  ins_short_branch(1);\n-%}\n-\n-instruct jmpLoopEndUCF_short(cmpOpUCF cop, rFlagsRegUCF cmp, label labl) %{\n-  match(CountedLoopEnd cop cmp);\n-  effect(USE labl);\n-\n-  ins_cost(300);\n-  format %{ \"j$cop,us  $labl\\t# loop end\" %}\n-  size(2);\n-  ins_encode %{\n-    Label* L = $labl$$label;\n-    __ jccb((Assembler::Condition)($cop$$cmpcode), *L);\n-  %}\n-  ins_pipe(pipe_jcc);\n-  ins_short_branch(1);\n-%}\n-\n","filename":"src\/hotspot\/cpu\/x86\/x86_64.ad","additions":0,"deletions":60,"binary":false,"changes":60,"status":"modified"}]}