{"files":[{"patch":"@@ -443,0 +443,2 @@\n+      int min_count = (c1_only || c2_only) ? 1 : 2;\n+      int active_cpus = os::active_processor_count();\n@@ -444,1 +446,1 @@\n-      int log_cpu = log2i(os::active_processor_count());\n+      int log_cpu = log2i(active_cpus);\n@@ -446,1 +448,1 @@\n-      count = MAX2(log_cpu * loglog_cpu * 3 \/ 2, 2);\n+      count = MAX2(log_cpu * loglog_cpu * 3 \/ 2, min_count);\n@@ -456,1 +458,8 @@\n-      size_t buffer_size = c1_only ? c1_size : (c1_size\/3 + 2*c2_size\/3);\n+      size_t buffer_size = 0;\n+      if (c1_only) {\n+        buffer_size = c1_size;\n+      } else if (c2_only) {\n+        buffer_size = c2_size;\n+      } else {\n+        buffer_size = c1_size\/3 + 2*c2_size\/3;\n+      }\n@@ -460,1 +469,1 @@\n-        count = MAX2(max_count, c1_only ? 1 : 2);\n+        count = MAX2(max_count, min_count);\n@@ -462,0 +471,1 @@\n+      assert((!c1_only && !c2_only) || count <= active_cpus, \"Too many threads: %d\", count);\n@@ -479,1 +489,0 @@\n-      \/\/ No C2 compiler thread required\n","filename":"src\/hotspot\/share\/compiler\/compilationPolicy.cpp","additions":14,"deletions":5,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @library \/test\/lib \/\n+ * @bug 8356000\n+ * @requires vm.flagless\n+ * @requires vm.debug\n+ *\n+ * @summary Test compiler counts selection, verified by internal assertions\n+ * @run driver compiler.arguments.TestCompilerCounts\n+ *\/\n+\n+package compiler.arguments;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Arrays;\n+import java.util.ArrayList;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class TestCompilerCounts {\n+\n+    public static void main(String[] args) throws IOException {\n+        testWith(\"-XX:TieredStopAtLevel=0\");\n+        testWith(\"-XX:TieredStopAtLevel=1\");\n+        testWith(\"-XX:TieredStopAtLevel=2\");\n+        testWith(\"-XX:TieredStopAtLevel=3\");\n+        testWith(\"-XX:TieredStopAtLevel=4\");\n+        testWith(\"-XX:-TieredCompilation\");\n+    }\n+\n+    public static void testWith(String mode) throws IOException {\n+        for (int cpus = 1; cpus <= Runtime.getRuntime().availableProcessors(); cpus++) {\n+            String[] args = new String[] {\n+                mode,\n+                \"-XX:ActiveProcessorCount=\" + cpus,\n+                \"-version\"\n+            };\n+            ProcessBuilder pb = ProcessTools.createLimitedTestJavaProcessBuilder(args);\n+            OutputAnalyzer output = new OutputAnalyzer(pb.start());\n+            output.shouldHaveExitValue(0);\n+        }\n+    }\n+\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/arguments\/TestCompilerCounts.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"}]}