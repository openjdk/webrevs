{"files":[{"patch":"@@ -31,1 +31,0 @@\n-#include \"code\/relocInfo.hpp\"\n@@ -1656,4 +1655,0 @@\n-  \/\/ Enter a critical section to prevent a race with deopts that patch code and updates the relocation info.\n-  \/\/ Unfortunately, we have to lock the NMethodState_lock before the tty lock due to the deadlock rules and\n-  \/\/ cannot lock in a more finely grained manner.\n-  ConditionalMutexLocker ml(NMethodState_lock, !NMethodState_lock->owned_by_self(), Mutex::_no_safepoint_check_flag);\n@@ -2049,11 +2044,0 @@\n-\n-      \/\/ Update the relocation info for the patched entry.\n-      \/\/ First, get the old relocation info...\n-      RelocIterator iter(this, verified_entry_point(), verified_entry_point() + 8);\n-      if (iter.next() && iter.addr() == verified_entry_point()) {\n-        Relocation* old_reloc = iter.reloc();\n-        \/\/ ...then reset the iterator to update it.\n-        RelocIterator iter(this, verified_entry_point(), verified_entry_point() + 8);\n-        relocInfo::change_reloc_info_for_address(&iter, verified_entry_point(), old_reloc->type(),\n-                                                 relocInfo::relocType::runtime_call_type);\n-      }\n","filename":"src\/hotspot\/share\/code\/nmethod.cpp","additions":0,"deletions":16,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -1,77 +0,0 @@\n-\/*\n- * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 8258229\n- * @summary If a method is made not entrant while printing the assembly, hotspot crashes due to mismatched relocation information.\n- * @run main\/othervm -XX:+IgnoreUnrecognizedVMOptions -XX:-TieredCompilation -XX:+DeoptimizeALot\n- *                   -XX:CompileCommand=print,java\/math\/BitSieve.bit compiler.print.TestPrintAssemblyDeoptRace\n- *\/\n-\n-package compiler.print;\n-\n-import java.util.Arrays;\n-\n-import java.security.Security;\n-import java.security.Provider;\n-import java.security.KeyPair;\n-import java.security.KeyPairGenerator;\n-import java.security.interfaces.RSAPrivateKey;\n-import java.security.interfaces.RSAPublicKey;\n-import java.security.spec.MGF1ParameterSpec;\n-\n-import javax.crypto.Cipher;\n-import javax.crypto.spec.OAEPParameterSpec;\n-import javax.crypto.spec.PSource;\n-\n-public class TestPrintAssemblyDeoptRace {\n-    private static RSAPrivateKey privateKey;\n-    private static RSAPublicKey publicKey;\n-    static Provider cp;\n-\n-    public static void main(String args[]) throws Exception {\n-        cp = Security.getProvider(\"SunJCE\");\n-        System.out.println(\"Testing provider \" + cp.getName() + \"...\");\n-        Provider kfp = Security.getProvider(\"SunRsaSign\");\n-        KeyPairGenerator kpg = KeyPairGenerator.getInstance(\"RSA\", kfp);\n-        kpg.initialize(2048);\n-        KeyPair kp = kpg.generateKeyPair();\n-        privateKey = (RSAPrivateKey) kp.getPrivate();\n-        publicKey = (RSAPublicKey) kp.getPublic();\n-        testEncryptDecrypt(new OAEPParameterSpec(\"SHA-512\/256\", \"MGF1\",\n-                MGF1ParameterSpec.SHA512, PSource.PSpecified.DEFAULT), 190);\n-\n-    }\n-\n-    private static void testEncryptDecrypt(OAEPParameterSpec spec,\n-            int dataLength) throws Exception {\n-\n-        Cipher c = Cipher.getInstance(\"RSA\/ECB\/OAEPPadding\", cp);\n-        c.init(Cipher.ENCRYPT_MODE, publicKey, spec);\n-\n-        byte[] data = new byte[dataLength];\n-        byte[] enc = c.doFinal(data);\n-        c.init(Cipher.DECRYPT_MODE, privateKey, spec);\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/print\/TestPrintAssemblyDeoptRace.java","additions":0,"deletions":77,"binary":false,"changes":77,"status":"deleted"}]}