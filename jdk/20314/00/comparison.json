{"files":[{"patch":"@@ -65,0 +65,2 @@\n+import static com.sun.tools.javac.main.Option.DOE;\n+\n@@ -102,0 +104,1 @@\n+    public final boolean dumpStacktraceOnError;\n@@ -123,0 +126,2 @@\n+        Options options = Options.instance(context);\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -637,1 +642,12 @@\n-    public static class FunctionDescriptorLookupError extends RuntimeException {\n+    public static class CompilerInternalException extends RuntimeException {\n+        private static final long serialVersionUID = 0;\n+\n+        @SuppressWarnings(\"this-escape\")\n+        public CompilerInternalException(boolean dumpStackTraceOnError) {\n+            if (dumpStackTraceOnError) {\n+                super.fillInStackTrace();\n+            }\n+        }\n+    }\n+\n+    public static class FunctionDescriptorLookupError extends CompilerInternalException {\n@@ -642,1 +658,2 @@\n-        FunctionDescriptorLookupError() {\n+        FunctionDescriptorLookupError(boolean dumpStackTraceOnError) {\n+            super(dumpStackTraceOnError);\n@@ -657,1 +674,0 @@\n-            \/\/ This is an internal exception; the stack trace is irrelevant.\n@@ -812,1 +828,1 @@\n-            return new FunctionDescriptorLookupError().setMessage(diag);\n+            return new FunctionDescriptorLookupError(Types.this.dumpStacktraceOnError).setMessage(diag);\n@@ -5112,1 +5128,1 @@\n-        public static class InvalidSignatureException extends RuntimeException {\n+        public static class InvalidSignatureException extends CompilerInternalException {\n@@ -5117,1 +5133,2 @@\n-            InvalidSignatureException(Type type) {\n+            InvalidSignatureException(Type type, boolean dumpStackTraceOnError) {\n+                super(dumpStackTraceOnError);\n@@ -5127,1 +5144,0 @@\n-                \/\/ This is an internal exception; the stack trace is irrelevant.\n@@ -5133,0 +5149,1 @@\n+        private final boolean dumpStackTraceOnError;\n@@ -5139,1 +5156,1 @@\n-        protected SignatureGenerator(Types types) {\n+        protected SignatureGenerator(Types types, boolean dumpStackTraceOnError) {\n@@ -5141,0 +5158,1 @@\n+            this.dumpStackTraceOnError = dumpStackTraceOnError;\n@@ -5144,1 +5162,1 @@\n-            throw new InvalidSignatureException(t);\n+            throw new InvalidSignatureException(t, dumpStackTraceOnError);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":27,"deletions":9,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import com.sun.tools.javac.code.Types.CompilerInternalException;\n@@ -71,1 +72,1 @@\n-import java.util.Comparator;\n+import static com.sun.tools.javac.main.Option.DOE;\n@@ -100,0 +101,2 @@\n+    private final boolean dumpStacktraceOnError;\n+\n@@ -122,0 +125,1 @@\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -136,2 +140,2 @@\n-        InferenceException() {\n-            super(null);\n+        InferenceException(boolean dumpStacktrace) {\n+            super(null, dumpStacktrace);\n@@ -147,1 +151,1 @@\n-        InferenceException result = new InferenceException();\n+        InferenceException result = new InferenceException(dumpStacktraceOnError);\n@@ -1345,1 +1349,1 @@\n-        public static class NodeNotFoundException extends RuntimeException {\n+        class NodeNotFoundException extends CompilerInternalException {\n@@ -1350,1 +1354,2 @@\n-            public NodeNotFoundException(InferenceGraph graph) {\n+            public NodeNotFoundException(InferenceGraph graph, boolean dumpStacktraceOnError) {\n+                super(dumpStacktraceOnError);\n@@ -1356,1 +1361,0 @@\n-                \/\/ This is an internal exception; the stack trace is irrelevant.\n@@ -1378,1 +1382,1 @@\n-                throw new NodeNotFoundException(g);\n+                throw new NodeNotFoundException(g, Infer.this.dumpStacktraceOnError);\n@@ -1453,1 +1457,1 @@\n-                throw new NodeNotFoundException(g);\n+                throw new NodeNotFoundException(g, Infer.this.dumpStacktraceOnError);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+import static com.sun.tools.javac.main.Option.DOE;\n@@ -123,0 +124,3 @@\n+    \/** dump stacktrace on error *\/\n+    private final boolean dumpStacktraceOnError;\n+\n@@ -169,0 +173,1 @@\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -1799,1 +1804,1 @@\n-            super(types);\n+            super(types, LambdaToMethod.this.dumpStacktraceOnError);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+\n+import static com.sun.tools.javac.main.Option.DOE;\n@@ -110,0 +112,1 @@\n+    private final boolean dumpStacktraceOnError;\n@@ -142,0 +145,1 @@\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -2632,1 +2636,1 @@\n-            super(types);\n+            super(types, Lower.this.dumpStacktraceOnError);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import com.sun.tools.javac.code.Types.CompilerInternalException;\n@@ -82,0 +83,1 @@\n+import static com.sun.tools.javac.main.Option.DOE;\n@@ -115,0 +117,1 @@\n+    final boolean dumpStacktraceOnError;\n@@ -152,0 +155,1 @@\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -587,1 +591,1 @@\n-                throw new InapplicableMethodException(diags.fragment(Fragments.WrongNumberTypeArgs(Integer.toString(pmt.tvars.length()))));\n+                throw new InapplicableMethodException(diags.fragment(Fragments.WrongNumberTypeArgs(Integer.toString(pmt.tvars.length()))), dumpStacktraceOnError);\n@@ -596,1 +600,1 @@\n-                        throw new InapplicableMethodException(diags.fragment(Fragments.ExplicitParamDoNotConformToBounds(actuals.head, bounds)));\n+                        throw new InapplicableMethodException(diags.fragment(Fragments.ExplicitParamDoNotConformToBounds(actuals.head, bounds)), dumpStacktraceOnError);\n@@ -845,1 +849,1 @@\n-                super(null);\n+                super(null, Resolve.this.dumpStacktraceOnError);\n@@ -1039,1 +1043,1 @@\n-            throw new InapplicableMethodException(details);\n+            throw new InapplicableMethodException(details, Resolve.this.dumpStacktraceOnError);\n@@ -1395,1 +1399,1 @@\n-    public static class InapplicableMethodException extends RuntimeException {\n+    public static class InapplicableMethodException extends CompilerInternalException {\n@@ -1400,1 +1404,2 @@\n-        InapplicableMethodException(JCDiagnostic diag) {\n+        InapplicableMethodException(JCDiagnostic diag, boolean dumpStackTraceOnError) {\n+            super(dumpStackTraceOnError);\n@@ -1410,1 +1415,0 @@\n-            \/\/ This is an internal exception; the stack trace is irrelevant.\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":11,"deletions":7,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -82,0 +82,2 @@\n+import static com.sun.tools.javac.main.Option.DOE;\n+\n@@ -112,0 +114,1 @@\n+import com.sun.tools.javac.util.Options;\n@@ -137,0 +140,1 @@\n+    private final boolean dumpStacktraceOnError;\n@@ -197,0 +201,2 @@\n+        Options options = Options.instance(context);\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -789,1 +795,1 @@\n-            super(types);\n+            super(types, TransPatterns.this.dumpStacktraceOnError);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":7,"deletions":1,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -282,1 +282,1 @@\n-            super(types);\n+            super(types, PoolWriter.this.types.dumpStacktraceOnError);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-            super(types);\n+            super(types, types.dumpStacktraceOnError);\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/TreeDissector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}