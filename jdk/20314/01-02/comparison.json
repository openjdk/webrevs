{"files":[{"patch":"@@ -642,18 +642,0 @@\n-    public static class CompilerInternalException extends RuntimeException {\n-        private static final long serialVersionUID = 0;\n-\n-        @SuppressWarnings(\"this-escape\")\n-        public CompilerInternalException(boolean dumpStackTraceOnError) {\n-            if (dumpStackTraceOnError) {\n-                super.fillInStackTrace();\n-            } else {\n-                fillInStackTrace();\n-            }\n-        }\n-\n-        @Override\n-        public Throwable fillInStackTrace() {\n-            return this;\n-        }\n-    }\n-\n@@ -5128,1 +5110,1 @@\n-    public abstract static class SignatureGenerator {\n+    public abstract class SignatureGenerator {\n@@ -5130,1 +5112,1 @@\n-        public static class InvalidSignatureException extends CompilerInternalException {\n+        public class InvalidSignatureException extends CompilerInternalException {\n@@ -5145,3 +5127,0 @@\n-        private final Types types;\n-        private final boolean dumpStackTraceOnError;\n-\n@@ -5153,5 +5132,0 @@\n-        protected SignatureGenerator(Types types, boolean dumpStackTraceOnError) {\n-            this.types = types;\n-            this.dumpStackTraceOnError = dumpStackTraceOnError;\n-        }\n-\n@@ -5159,1 +5133,1 @@\n-            throw new InvalidSignatureException(t, dumpStackTraceOnError);\n+            throw new InvalidSignatureException(t, Types.this.dumpStacktraceOnError);\n@@ -5275,1 +5249,1 @@\n-                        c.name == types.names.empty; \/\/ or anonymous\n+                        c.name == Types.this.names.empty; \/\/ or anonymous\n@@ -5277,1 +5251,1 @@\n-                        ? types.erasure(outer)\n+                        ? Types.this.erasure(outer)\n@@ -5299,1 +5273,1 @@\n-                List<Type> bounds = types.getBounds(tvar);\n+                List<Type> bounds = Types.this.getBounds(tvar);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":6,"deletions":32,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n-import com.sun.tools.javac.code.Types.CompilerInternalException;\n@@ -51,0 +50,1 @@\n+import com.sun.tools.javac.util.CompilerInternalException;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -124,3 +124,0 @@\n-    \/** dump stacktrace on error *\/\n-    private final boolean dumpStacktraceOnError;\n-\n@@ -173,1 +170,0 @@\n-        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -1804,1 +1800,1 @@\n-            super(types, LambdaToMethod.this.dumpStacktraceOnError);\n+            types.super();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -112,1 +112,0 @@\n-    private final boolean dumpStacktraceOnError;\n@@ -145,1 +144,0 @@\n-        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -2636,1 +2634,1 @@\n-            super(types, Lower.this.dumpStacktraceOnError);\n+            types.super();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import com.sun.tools.javac.code.Types.CompilerInternalException;\n@@ -837,1 +836,1 @@\n-                methodCheckFailure.setMessage(diags.create(DiagnosticType.FRAGMENT, log.currentSource(), pos, key, args));\n+                getMethodCheckFailure().setMessage(diags.create(DiagnosticType.FRAGMENT, log.currentSource(), pos, key, args));\n@@ -858,1 +857,1 @@\n-        SharedInapplicableMethodException methodCheckFailure = new SharedInapplicableMethodException();\n+        private SharedInapplicableMethodException methodCheckFailure;\n@@ -864,0 +863,3 @@\n+        SharedInapplicableMethodException getMethodCheckFailure() {\n+            return methodCheckFailure == null ? methodCheckFailure = new SharedInapplicableMethodException() : methodCheckFailure;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -140,1 +140,0 @@\n-    private final boolean dumpStacktraceOnError;\n@@ -202,1 +201,0 @@\n-        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -795,1 +793,1 @@\n-            super(types, TransPatterns.this.dumpStacktraceOnError);\n+            types.super();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-        this.signatureGen = new SharedSignatureGenerator(types);\n+        this.signatureGen = new SharedSignatureGenerator();\n@@ -281,2 +281,2 @@\n-        SharedSignatureGenerator(Types types) {\n-            super(types, PoolWriter.this.types.dumpStacktraceOnError);\n+        SharedSignatureGenerator() {\n+            types.super();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.tools.javac.util;\n+\n+\/** The super class of all compiler internal exceptions\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class CompilerInternalException extends RuntimeException {\n+    private static final long serialVersionUID = 0;\n+\n+    @SuppressWarnings(\"this-escape\")\n+    public CompilerInternalException(boolean dumpStackTraceOnError) {\n+        \/* by default the stacktrace wont be filled, meaning that method CompilerInternalException::fillInStackTrace\n+         * will always be invoked, if we do want to dump the stacktrace then we will invoke super::fillInStackTrace\n+         * there is a bit of a dance here that could be fixed once flexible constructor bodies exits the preview\n+         * state\n+         *\/\n+        if (dumpStackTraceOnError) {\n+            super.fillInStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public Throwable fillInStackTrace() {\n+        return this;\n+    }\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/CompilerInternalException.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -249,1 +249,1 @@\n-            super(types, types.dumpStacktraceOnError);\n+            types.super();\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/TreeDissector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}