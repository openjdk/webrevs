{"files":[{"patch":"@@ -65,0 +65,2 @@\n+import static com.sun.tools.javac.main.Option.DOE;\n+\n@@ -102,0 +104,1 @@\n+    public final boolean dumpStacktraceOnError;\n@@ -123,0 +126,2 @@\n+        Options options = Options.instance(context);\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -637,1 +642,1 @@\n-    public static class FunctionDescriptorLookupError extends RuntimeException {\n+    public static class FunctionDescriptorLookupError extends CompilerInternalException {\n@@ -642,1 +647,2 @@\n-        FunctionDescriptorLookupError() {\n+        FunctionDescriptorLookupError(boolean dumpStackTraceOnError) {\n+            super(dumpStackTraceOnError);\n@@ -654,6 +660,0 @@\n-\n-        @Override\n-        public Throwable fillInStackTrace() {\n-            \/\/ This is an internal exception; the stack trace is irrelevant.\n-            return this;\n-        }\n@@ -812,1 +812,1 @@\n-            return new FunctionDescriptorLookupError().setMessage(diag);\n+            return new FunctionDescriptorLookupError(Types.this.dumpStacktraceOnError).setMessage(diag);\n@@ -5110,1 +5110,1 @@\n-    public abstract static class SignatureGenerator {\n+    public abstract class SignatureGenerator {\n@@ -5112,1 +5112,1 @@\n-        public static class InvalidSignatureException extends RuntimeException {\n+        public class InvalidSignatureException extends CompilerInternalException {\n@@ -5117,1 +5117,2 @@\n-            InvalidSignatureException(Type type) {\n+            InvalidSignatureException(Type type, boolean dumpStackTraceOnError) {\n+                super(dumpStackTraceOnError);\n@@ -5124,6 +5125,0 @@\n-\n-            @Override\n-            public Throwable fillInStackTrace() {\n-                \/\/ This is an internal exception; the stack trace is irrelevant.\n-                return this;\n-            }\n@@ -5132,2 +5127,0 @@\n-        private final Types types;\n-\n@@ -5139,4 +5132,0 @@\n-        protected SignatureGenerator(Types types) {\n-            this.types = types;\n-        }\n-\n@@ -5144,1 +5133,1 @@\n-            throw new InvalidSignatureException(t);\n+            throw new InvalidSignatureException(t, Types.this.dumpStacktraceOnError);\n@@ -5260,1 +5249,1 @@\n-                        c.name == types.names.empty; \/\/ or anonymous\n+                        c.name == Types.this.names.empty; \/\/ or anonymous\n@@ -5262,1 +5251,1 @@\n-                        ? types.erasure(outer)\n+                        ? Types.this.erasure(outer)\n@@ -5284,1 +5273,1 @@\n-                List<Type> bounds = types.getBounds(tvar);\n+                List<Type> bounds = Types.this.getBounds(tvar);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Types.java","additions":17,"deletions":28,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -50,0 +50,1 @@\n+import com.sun.tools.javac.util.CompilerInternalException;\n@@ -71,1 +72,1 @@\n-import java.util.Comparator;\n+import static com.sun.tools.javac.main.Option.DOE;\n@@ -100,0 +101,2 @@\n+    private final boolean dumpStacktraceOnError;\n+\n@@ -122,0 +125,1 @@\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -136,2 +140,2 @@\n-        InferenceException() {\n-            super(null);\n+        InferenceException(boolean dumpStacktrace) {\n+            super(null, dumpStacktrace);\n@@ -147,1 +151,1 @@\n-        InferenceException result = new InferenceException();\n+        InferenceException result = new InferenceException(dumpStacktraceOnError);\n@@ -1345,1 +1349,1 @@\n-        public static class NodeNotFoundException extends RuntimeException {\n+        class NodeNotFoundException extends CompilerInternalException {\n@@ -1350,1 +1354,2 @@\n-            public NodeNotFoundException(InferenceGraph graph) {\n+            public NodeNotFoundException(InferenceGraph graph, boolean dumpStacktraceOnError) {\n+                super(dumpStacktraceOnError);\n@@ -1353,6 +1358,0 @@\n-\n-            @Override\n-            public Throwable fillInStackTrace() {\n-                \/\/ This is an internal exception; the stack trace is irrelevant.\n-                return this;\n-            }\n@@ -1378,1 +1377,1 @@\n-                throw new NodeNotFoundException(g);\n+                throw new NodeNotFoundException(g, Infer.this.dumpStacktraceOnError);\n@@ -1453,1 +1452,1 @@\n-                throw new NodeNotFoundException(g);\n+                throw new NodeNotFoundException(g, Infer.this.dumpStacktraceOnError);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Infer.java","additions":13,"deletions":14,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -67,0 +67,1 @@\n+import static com.sun.tools.javac.main.Option.DOE;\n@@ -1799,1 +1800,1 @@\n-            super(types);\n+            types.super();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/LambdaToMethod.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+\n+import static com.sun.tools.javac.main.Option.DOE;\n@@ -2632,1 +2634,1 @@\n-            super(types);\n+            types.super();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -82,0 +82,1 @@\n+import static com.sun.tools.javac.main.Option.DOE;\n@@ -115,0 +116,1 @@\n+    final boolean dumpStacktraceOnError;\n@@ -152,0 +154,1 @@\n+        dumpStacktraceOnError = options.isSet(\"dev\") || options.isSet(DOE);\n@@ -587,1 +590,1 @@\n-                throw new InapplicableMethodException(diags.fragment(Fragments.WrongNumberTypeArgs(Integer.toString(pmt.tvars.length()))));\n+                throw new InapplicableMethodException(diags.fragment(Fragments.WrongNumberTypeArgs(Integer.toString(pmt.tvars.length()))), dumpStacktraceOnError);\n@@ -596,1 +599,1 @@\n-                        throw new InapplicableMethodException(diags.fragment(Fragments.ExplicitParamDoNotConformToBounds(actuals.head, bounds)));\n+                        throw new InapplicableMethodException(diags.fragment(Fragments.ExplicitParamDoNotConformToBounds(actuals.head, bounds)), dumpStacktraceOnError);\n@@ -833,1 +836,1 @@\n-                methodCheckFailure.setMessage(diags.create(DiagnosticType.FRAGMENT, log.currentSource(), pos, key, args));\n+                getMethodCheckFailure().setMessage(diags.create(DiagnosticType.FRAGMENT, log.currentSource(), pos, key, args));\n@@ -845,1 +848,1 @@\n-                super(null);\n+                super(null, Resolve.this.dumpStacktraceOnError);\n@@ -854,1 +857,1 @@\n-        SharedInapplicableMethodException methodCheckFailure = new SharedInapplicableMethodException();\n+        private SharedInapplicableMethodException methodCheckFailure;\n@@ -860,0 +863,3 @@\n+        SharedInapplicableMethodException getMethodCheckFailure() {\n+            return methodCheckFailure == null ? methodCheckFailure = new SharedInapplicableMethodException() : methodCheckFailure;\n+        }\n@@ -1039,1 +1045,1 @@\n-            throw new InapplicableMethodException(details);\n+            throw new InapplicableMethodException(details, Resolve.this.dumpStacktraceOnError);\n@@ -1395,1 +1401,1 @@\n-    public static class InapplicableMethodException extends RuntimeException {\n+    public static class InapplicableMethodException extends CompilerInternalException {\n@@ -1400,1 +1406,2 @@\n-        InapplicableMethodException(JCDiagnostic diag) {\n+        InapplicableMethodException(JCDiagnostic diag, boolean dumpStackTraceOnError) {\n+            super(dumpStackTraceOnError);\n@@ -1407,6 +1414,0 @@\n-\n-        @Override\n-        public Throwable fillInStackTrace() {\n-            \/\/ This is an internal exception; the stack trace is irrelevant.\n-            return this;\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -82,0 +82,2 @@\n+import static com.sun.tools.javac.main.Option.DOE;\n+\n@@ -112,0 +114,1 @@\n+import com.sun.tools.javac.util.Options;\n@@ -197,0 +200,1 @@\n+        Options options = Options.instance(context);\n@@ -789,1 +793,1 @@\n-            super(types);\n+            types.super();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -103,1 +103,1 @@\n-        this.signatureGen = new SharedSignatureGenerator(types);\n+        this.signatureGen = new SharedSignatureGenerator();\n@@ -281,2 +281,2 @@\n-        SharedSignatureGenerator(Types types) {\n-            super(types);\n+        SharedSignatureGenerator() {\n+            types.super();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/PoolWriter.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,54 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package com.sun.tools.javac.util;\n+\n+\/** The super class of all compiler internal exceptions\n+ *\n+ *  <p><b>This is NOT part of any supported API.\n+ *  If you write code that depends on this, you do so at your own risk.\n+ *  This code and its internal interfaces are subject to change or\n+ *  deletion without notice.<\/b>\n+ *\/\n+public class CompilerInternalException extends RuntimeException {\n+    private static final long serialVersionUID = 0;\n+\n+    @SuppressWarnings(\"this-escape\")\n+    public CompilerInternalException(boolean dumpStackTraceOnError) {\n+        \/* by default the stacktrace wont be filled, meaning that method CompilerInternalException::fillInStackTrace\n+         * will always be invoked, if we do want to dump the stacktrace then we will invoke super::fillInStackTrace\n+         * there is a bit of a dance here that could be fixed once flexible constructor bodies exits the preview\n+         * state\n+         *\/\n+        if (dumpStackTraceOnError) {\n+            super.fillInStackTrace();\n+        }\n+    }\n+\n+    @Override\n+    public Throwable fillInStackTrace() {\n+        return this;\n+    }\n+}\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/CompilerInternalException.java","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -249,1 +249,1 @@\n-            super(types);\n+            types.super();\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/TreeDissector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}