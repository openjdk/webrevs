{"files":[{"patch":"@@ -3492,0 +3492,71 @@\n+    \/**\n+     * Returns the largest of an unlimited number of {@code int} values.\n+     *\n+     * @param values the values to compare\n+     * @return the largest value among the provided {@code int} values\n+     * @throws IllegalArgumentException if no values are provided\n+     *\/\n+    public static int max(int... values) {\n+        if (values == null || values.length == 0) {\n+            throw new IllegalArgumentException(\"At least one value must be provided.\");\n+        }\n+        int maxValue = values[0];\n+        for (int value : values) {\n+            maxValue = Math.max(maxValue, value);\n+        }\n+        return maxValue;\n+    }\n+\n+    \/**\n+     * Returns the largest of an unlimited number of {@code double} values.\n+     *\n+     * @param values the values to compare\n+     * @return the largest value among the provided {@code double} values\n+     * @throws IllegalArgumentException if no values are provided\n+     *\/\n+    public static double max(double... values) {\n+        if (values == null || values.length == 0) {\n+            throw new IllegalArgumentException(\"At least one value must be provided.\");\n+        }\n+        double maxValue = values[0];\n+        for (double value : values) {\n+            maxValue = Math.max(maxValue, value);\n+        }\n+        return maxValue;\n+    }\n+\n+    \/**\n+     * Returns the largest of an unlimited number of {@code long} values.\n+     *\n+     * @param values the values to compare\n+     * @return the largest value among the provided {@code long} values\n+     * @throws IllegalArgumentException if no values are provided\n+     *\/\n+    public static long max(long... values) {\n+        if (values == null || values.length == 0) {\n+            throw new IllegalArgumentException(\"At least one value must be provided.\");\n+        }\n+        long maxValue = values[0];\n+        for (long value : values) {\n+            maxValue = Math.max(maxValue, value);\n+        }\n+        return maxValue;\n+    }\n+\n+    \/**\n+     * Returns the largest of an unlimited number of {@code float} values.\n+     *\n+     * @param values the values to compare\n+     * @return the largest value among the provided {@code float} values\n+     * @throws IllegalArgumentException if no values are provided\n+     *\/\n+    public static float max(float... values) {\n+        if (values == null || values.length == 0) {\n+            throw new IllegalArgumentException(\"At least one value must be provided.\");\n+        }\n+        float maxValue = values[0];\n+        for (float value : values) {\n+            maxValue = Math.max(maxValue, value);\n+        }\n+        return maxValue;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":71,"deletions":0,"binary":false,"changes":71,"status":"modified"}]}