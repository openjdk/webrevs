{"files":[{"patch":"@@ -3420,0 +3420,72 @@\n+    \/**\n+     * Returns the smallest of an unlimited number of {@code int} values.\n+     *\n+     * @param values the values to compare\n+     * @return the smallest value among the provided {@code int} values\n+     * @throws IllegalArgumentException if no values are provided\n+     *\/\n+    public static int min(int... values) {\n+        if (values == null || values.length == 0) {\n+            throw new IllegalArgumentException(\"At least one value must be provided.\");\n+        }\n+        int minValue = values[0];\n+        for (int value : values) {\n+            minValue = Math.min(minValue, value);\n+        }\n+        return minValue;\n+    }\n+\n+    \/**\n+     * Returns the smallest of an unlimited number of {@code double} values.\n+     *\n+     * @param values the values to compare\n+     * @return the smallest value among the provided {@code double} values\n+     * @throws IllegalArgumentException if no values are provided\n+     *\/\n+    public static double min(double... values) {\n+        if (values == null || values.length == 0) {\n+            throw new IllegalArgumentException(\"At least one value must be provided.\");\n+        }\n+        double minValue = values[0];\n+        for (double value : values) {\n+            minValue = Math.min(minValue, value);\n+        }\n+        return minValue;\n+    }\n+\n+    \/**\n+     * Returns the smallest of an unlimited number of {@code long} values.\n+     *\n+     * @param values the values to compare\n+     * @return the smallest value among the provided {@code long} values\n+     * @throws IllegalArgumentException if no values are provided\n+     *\/\n+    public static long min(long... values) {\n+        if (values == null || values.length == 0) {\n+            throw new IllegalArgumentException(\"At least one value must be provided.\");\n+        }\n+        long minValue = values[0];\n+        for (long value : values) {\n+            minValue = Math.min(minValue, value);\n+        }\n+        return minValue;\n+    }\n+\n+    \/**\n+     * Returns the smallest of an unlimited number of {@code float} values.\n+     *\n+     * @param values the values to compare\n+     * @return the smallest value among the provided {@code float} values\n+     * @throws IllegalArgumentException if no values are provided\n+     *\/\n+    public static float min(float... values) {\n+        if (values == null || values.length == 0) {\n+            throw new IllegalArgumentException(\"At least one value must be provided.\");\n+        }\n+        float minValue = values[0];\n+        for (float value : values) {\n+            minValue = Math.min(minValue, value);\n+        }\n+        return minValue;\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Math.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"modified"}]}