{"files":[{"patch":"@@ -1527,0 +1527,8 @@\n+    \/\/ Dominating CountedLoopEnd (left over from some now dead loop) will become the new loop exit. Outer strip mined\n+    \/\/ loop will go away. Mark this loop as no longer strip mined.\n+    if (is_CountedLoopEnd()) {\n+      CountedLoopNode* counted_loop_node = as_CountedLoopEnd()->loopnode();\n+      if (counted_loop_node != nullptr) {\n+        counted_loop_node->clear_strip_mined();\n+      }\n+    }\n","filename":"src\/hotspot\/share\/opto\/ifnode.cpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -761,1 +761,0 @@\n-  Node* entry = head->in(LoopNode::EntryControl);\n","filename":"src\/hotspot\/share\/opto\/loopTransform.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,66 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8340532\n+ * @summary C2: assert(is_OuterStripMinedLoop()) failed: invalid node class: IfTrue\n+ * @requires vm.compiler2.enabled\n+ * @run main\/othervm -XX:CompileOnly=TestIdenticalDominatingCLE::* -XX:CompileThreshold=100 -Xcomp -XX:-TieredCompilation\n+ *                   -XX:-RangeCheckElimination -XX:LoopMaxUnroll=0 TestIdenticalDominatingCLE\n+ *\n+ *\/\n+\n+\n+public class TestIdenticalDominatingCLE {\n+    boolean bFld;\n+    long lFld;\n+    float[][] fArr = new float[6][6];\n+\n+    public static void main(String[] var0) {\n+        TestIdenticalDominatingCLE t = new TestIdenticalDominatingCLE();\n+        t.test();\n+    }\n+\n+    void test() {\n+        int i = 0;\n+        do {\n+            for (int j = 0; j < 2; j++) {\n+                float f = fArr[j][3] \/ Float.valueOf((float)1.318095814E9);\n+                switch (i) {\n+                    case 1:\n+                        if (bFld ^ bFld) {\n+                        } else {\n+                            for (int k = 0; k < 600; k++) {\n+                            }\n+                        }\n+                        break;\n+                    default:\n+                        if (bFld) {\n+                        }\n+                }\n+            }\n+            lFld = ++i;\n+        } while (i < 6);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopstripmining\/TestIdenticalDominatingCLE.java","additions":66,"deletions":0,"binary":false,"changes":66,"status":"added"}]}