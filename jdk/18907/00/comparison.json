{"files":[{"patch":"@@ -153,1 +153,1 @@\n-            thisClass = readEntry(thisClassPos, ClassEntry.class);\n+            thisClass = readClassEntry(thisClassPos);\n@@ -359,17 +359,12 @@\n-                case TAG_CLASS -> new AbstractPoolEntry.ClassEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n-                case TAG_STRING -> new AbstractPoolEntry.StringEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n-                case TAG_FIELDREF -> new AbstractPoolEntry.FieldRefEntryImpl(this, index, (AbstractPoolEntry.ClassEntryImpl) readClassEntry(q),\n-                                                                             (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n-                case TAG_METHODREF -> new AbstractPoolEntry.MethodRefEntryImpl(this, index, (AbstractPoolEntry.ClassEntryImpl) readClassEntry(q),\n-                                                                               (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n-                case TAG_INTERFACEMETHODREF -> new AbstractPoolEntry.InterfaceMethodRefEntryImpl(this, index, (AbstractPoolEntry.ClassEntryImpl) readClassEntry(q),\n-                                                                                                 (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n-                case TAG_NAMEANDTYPE -> new AbstractPoolEntry.NameAndTypeEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q),\n-                                                                                   (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q + 2));\n-                case TAG_METHODHANDLE -> new AbstractPoolEntry.MethodHandleEntryImpl(this, index, readU1(q),\n-                                                                                     (AbstractPoolEntry.AbstractMemberRefEntry) readEntry(q + 1));\n-                case TAG_METHODTYPE -> new AbstractPoolEntry.MethodTypeEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n-                case TAG_CONSTANTDYNAMIC -> new AbstractPoolEntry.ConstantDynamicEntryImpl(this, index, readU2(q), (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n-                case TAG_INVOKEDYNAMIC -> new AbstractPoolEntry.InvokeDynamicEntryImpl(this, index, readU2(q), (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n-                case TAG_MODULE -> new AbstractPoolEntry.ModuleEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n-                case TAG_PACKAGE -> new AbstractPoolEntry.PackageEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n+                case TAG_CLASS -> new AbstractPoolEntry.ClassEntryImpl(this, index, readUtf8Entry(q));\n+                case TAG_STRING -> new AbstractPoolEntry.StringEntryImpl(this, index, readUtf8Entry(q));\n+                case TAG_FIELDREF -> new AbstractPoolEntry.FieldRefEntryImpl(this, index, readClassEntry(q), readNameAndTypeEntry(q + 2));\n+                case TAG_METHODREF -> new AbstractPoolEntry.MethodRefEntryImpl(this, index, readClassEntry(q), readNameAndTypeEntry(q + 2));\n+                case TAG_INTERFACEMETHODREF -> new AbstractPoolEntry.InterfaceMethodRefEntryImpl(this, index, readClassEntry(q), readNameAndTypeEntry(q + 2));\n+                case TAG_NAMEANDTYPE -> new AbstractPoolEntry.NameAndTypeEntryImpl(this, index, readUtf8Entry(q), readUtf8Entry(q + 2));\n+                case TAG_METHODHANDLE -> new AbstractPoolEntry.MethodHandleEntryImpl(this, index, readU1(q), readAbstractMemberRefEntry(q + 1));\n+                case TAG_METHODTYPE -> new AbstractPoolEntry.MethodTypeEntryImpl(this, index, readUtf8Entry(q));\n+                case TAG_CONSTANTDYNAMIC -> new AbstractPoolEntry.ConstantDynamicEntryImpl(this, index, readU2(q), readNameAndTypeEntry(q + 2));\n+                case TAG_INVOKEDYNAMIC -> new AbstractPoolEntry.InvokeDynamicEntryImpl(this, index, readU2(q), readNameAndTypeEntry(q + 2));\n+                case TAG_MODULE -> new AbstractPoolEntry.ModuleEntryImpl(this, index, readUtf8Entry(q));\n+                case TAG_PACKAGE -> new AbstractPoolEntry.PackageEntryImpl(this, index, readUtf8Entry(q));\n@@ -441,1 +436,1 @@\n-    public Utf8Entry readUtf8Entry(int pos) {\n+    public AbstractPoolEntry.Utf8EntryImpl readUtf8Entry(int pos) {\n@@ -465,0 +460,16 @@\n+    private int readIndex(int pos) {\n+        int index = readU2(pos);\n+        if (index <= 0 || index >= constantPoolCount) {\n+            throw new ConstantPoolException(\"Bad CP index: \" + index);\n+        }\n+        return index;\n+    }\n+\n+    private int getOffset(int index) {\n+        int offset = cpOffset[index];\n+        if (offset == 0) {\n+            throw new ConstantPoolException(\"Unusable CP index: \" + index);\n+        }\n+        return offset;\n+    }\n+\n@@ -466,2 +477,12 @@\n-    public ClassEntry readClassEntry(int pos) {\n-        return readEntry(pos, ClassEntry.class);\n+    public AbstractPoolEntry.ClassEntryImpl readClassEntry(int pos) {\n+        int index = readIndex(pos);\n+        PoolEntry info = cp[index];\n+        if (info == null) {\n+            int offset = getOffset(index);\n+            if (readU1(offset) == TAG_CLASS) {\n+                info = new AbstractPoolEntry.ClassEntryImpl(this, index, readUtf8Entry(offset + 1));\n+                cp[index] = info;\n+            }\n+        }\n+        if (info instanceof AbstractPoolEntry.ClassEntryImpl ce) return ce;\n+        throw new ConstantPoolException(\"Not a ClassEntry at index: \" + index);\n@@ -471,2 +492,29 @@\n-    public NameAndTypeEntry readNameAndTypeEntry(int pos) {\n-        return readEntry(pos, NameAndTypeEntry.class);\n+    public AbstractPoolEntry.NameAndTypeEntryImpl readNameAndTypeEntry(int pos) {\n+        int index = readIndex(pos);\n+        PoolEntry info = cp[index];\n+        if (info == null) {\n+            int offset = getOffset(index);\n+            if (readU1(offset) == TAG_NAMEANDTYPE) {\n+                info = new AbstractPoolEntry.NameAndTypeEntryImpl(this, index, readUtf8Entry(offset + 1), readUtf8Entry(offset + 3));\n+                cp[index] = info;\n+            }\n+        }\n+        if (info instanceof AbstractPoolEntry.NameAndTypeEntryImpl nte) return nte;\n+        throw new ConstantPoolException(\"Not a NameAndTypeEntry at index: \" + index);\n+    }\n+\n+    private AbstractPoolEntry.AbstractMemberRefEntry readAbstractMemberRefEntry(int pos) {\n+        int index = readIndex(pos);\n+        PoolEntry info = cp[index];\n+        if (info == null) {\n+            int offset = getOffset(index);\n+            info = switch (readU1(offset)) {\n+                case TAG_FIELDREF -> new AbstractPoolEntry.FieldRefEntryImpl(this, index, readClassEntry(offset + 1), readNameAndTypeEntry(offset + 3));\n+                case TAG_METHODREF -> new AbstractPoolEntry.MethodRefEntryImpl(this, index, readClassEntry(offset + 1), readNameAndTypeEntry(offset + 3));\n+                case TAG_INTERFACEMETHODREF -> new AbstractPoolEntry.InterfaceMethodRefEntryImpl(this, index, readClassEntry(offset + 1), readNameAndTypeEntry(offset + 3));\n+                default -> null;\n+            };\n+            cp[index] = info;\n+        }\n+        if (info instanceof AbstractPoolEntry.AbstractMemberRefEntry amre) return amre;\n+        throw new ConstantPoolException(\"Not a MemberRefEntry at index: \" + index);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":71,"deletions":23,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8320360\n+ * @bug 8320360 8330684\n@@ -34,0 +34,1 @@\n+import java.lang.classfile.constantpool.ConstantPoolException;\n@@ -95,0 +96,6 @@\n+\n+    @Test\n+    void testInvalidClassEntry() {\n+        assertThrows(ConstantPoolException.class, () -> ClassFile.of().parse(new byte[]{(byte)0xCA, (byte)0xFE, (byte)0xBA, (byte)0xBE,\n+            0, 0, 0, 0, 0, 2, ClassFile.TAG_METHODREF, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}).thisClass());\n+    }\n","filename":"test\/jdk\/jdk\/classfile\/LimitsTest.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"}]}