{"files":[{"patch":"@@ -342,0 +342,4 @@\n+        return entryByIndex(index, 0, 0xff);\n+    }\n+\n+    private PoolEntry entryByIndex(int index, int lowerBoundTag, int upperBoundTag) {\n@@ -352,0 +356,4 @@\n+            if (tag < lowerBoundTag || tag > upperBoundTag) {\n+                throw new ConstantPoolException(\n+                        \"Bad tag (\" + tag + \") at index (\" + index + \") position (\" + offset + \")\");\n+            }\n@@ -359,12 +367,17 @@\n-                case TAG_CLASS -> new AbstractPoolEntry.ClassEntryImpl(this, index, readUtf8Entry(q));\n-                case TAG_STRING -> new AbstractPoolEntry.StringEntryImpl(this, index, readUtf8Entry(q));\n-                case TAG_FIELDREF -> new AbstractPoolEntry.FieldRefEntryImpl(this, index, readClassEntry(q), readNameAndTypeEntry(q + 2));\n-                case TAG_METHODREF -> new AbstractPoolEntry.MethodRefEntryImpl(this, index, readClassEntry(q), readNameAndTypeEntry(q + 2));\n-                case TAG_INTERFACEMETHODREF -> new AbstractPoolEntry.InterfaceMethodRefEntryImpl(this, index, readClassEntry(q), readNameAndTypeEntry(q + 2));\n-                case TAG_NAMEANDTYPE -> new AbstractPoolEntry.NameAndTypeEntryImpl(this, index, readUtf8Entry(q), readUtf8Entry(q + 2));\n-                case TAG_METHODHANDLE -> new AbstractPoolEntry.MethodHandleEntryImpl(this, index, readU1(q), readAbstractMemberRefEntry(q + 1));\n-                case TAG_METHODTYPE -> new AbstractPoolEntry.MethodTypeEntryImpl(this, index, readUtf8Entry(q));\n-                case TAG_CONSTANTDYNAMIC -> new AbstractPoolEntry.ConstantDynamicEntryImpl(this, index, readU2(q), readNameAndTypeEntry(q + 2));\n-                case TAG_INVOKEDYNAMIC -> new AbstractPoolEntry.InvokeDynamicEntryImpl(this, index, readU2(q), readNameAndTypeEntry(q + 2));\n-                case TAG_MODULE -> new AbstractPoolEntry.ModuleEntryImpl(this, index, readUtf8Entry(q));\n-                case TAG_PACKAGE -> new AbstractPoolEntry.PackageEntryImpl(this, index, readUtf8Entry(q));\n+                case TAG_CLASS -> new AbstractPoolEntry.ClassEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n+                case TAG_STRING -> new AbstractPoolEntry.StringEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n+                case TAG_FIELDREF -> new AbstractPoolEntry.FieldRefEntryImpl(this, index, (AbstractPoolEntry.ClassEntryImpl) readClassEntry(q),\n+                                                                             (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n+                case TAG_METHODREF -> new AbstractPoolEntry.MethodRefEntryImpl(this, index, (AbstractPoolEntry.ClassEntryImpl) readClassEntry(q),\n+                                                                               (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n+                case TAG_INTERFACEMETHODREF -> new AbstractPoolEntry.InterfaceMethodRefEntryImpl(this, index, (AbstractPoolEntry.ClassEntryImpl) readClassEntry(q),\n+                                                                                                 (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n+                case TAG_NAMEANDTYPE -> new AbstractPoolEntry.NameAndTypeEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q),\n+                                                                                   (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q + 2));\n+                case TAG_METHODHANDLE -> new AbstractPoolEntry.MethodHandleEntryImpl(this, index, readU1(q),\n+                                                                                     readEntry(q + 1, AbstractPoolEntry.AbstractMemberRefEntry.class, TAG_FIELDREF, TAG_INTERFACEMETHODREF));\n+                case TAG_METHODTYPE -> new AbstractPoolEntry.MethodTypeEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n+                case TAG_CONSTANTDYNAMIC -> new AbstractPoolEntry.ConstantDynamicEntryImpl(this, index, readU2(q), (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n+                case TAG_INVOKEDYNAMIC -> new AbstractPoolEntry.InvokeDynamicEntryImpl(this, index, readU2(q), (AbstractPoolEntry.NameAndTypeEntryImpl) readNameAndTypeEntry(q + 2));\n+                case TAG_MODULE -> new AbstractPoolEntry.ModuleEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n+                case TAG_PACKAGE -> new AbstractPoolEntry.PackageEntryImpl(this, index, (AbstractPoolEntry.Utf8EntryImpl) readUtf8Entry(q));\n@@ -421,1 +434,5 @@\n-        var e = readEntry(pos);\n+        return readEntry(pos, cls, 0, 0xff);\n+    }\n+\n+    private <T extends PoolEntry> T readEntry(int pos, Class<T> cls, int lowerBoundTag, int upperBoundTag) {\n+        var e = entryByIndex(readU2(pos), lowerBoundTag, upperBoundTag);\n@@ -436,1 +453,1 @@\n-    public AbstractPoolEntry.Utf8EntryImpl readUtf8Entry(int pos) {\n+    public Utf8Entry readUtf8Entry(int pos) {\n@@ -452,1 +469,1 @@\n-        return readEntry(pos, ModuleEntry.class);\n+        return readEntry(pos, ModuleEntry.class, TAG_MODULE, TAG_MODULE);\n@@ -457,17 +474,1 @@\n-        return readEntry(pos, PackageEntry.class);\n-    }\n-\n-    private int readIndex(int pos) {\n-        int index = readU2(pos);\n-        if (index <= 0 || index >= constantPoolCount) {\n-            throw new ConstantPoolException(\"Bad CP index: \" + index);\n-        }\n-        return index;\n-    }\n-\n-    private int getOffset(int index) {\n-        int offset = cpOffset[index];\n-        if (offset == 0) {\n-            throw new ConstantPoolException(\"Unusable CP index: \" + index);\n-        }\n-        return offset;\n+        return readEntry(pos, PackageEntry.class, TAG_PACKAGE, TAG_PACKAGE);\n@@ -477,12 +478,2 @@\n-    public AbstractPoolEntry.ClassEntryImpl readClassEntry(int pos) {\n-        int index = readIndex(pos);\n-        PoolEntry info = cp[index];\n-        if (info == null) {\n-            int offset = getOffset(index);\n-            if (readU1(offset) == TAG_CLASS) {\n-                info = new AbstractPoolEntry.ClassEntryImpl(this, index, readUtf8Entry(offset + 1));\n-                cp[index] = info;\n-            }\n-        }\n-        if (info instanceof AbstractPoolEntry.ClassEntryImpl ce) return ce;\n-        throw new ConstantPoolException(\"Not a ClassEntry at index: \" + index);\n+    public ClassEntry readClassEntry(int pos) {\n+        return readEntry(pos, ClassEntry.class, TAG_CLASS, TAG_CLASS);\n@@ -492,29 +483,2 @@\n-    public AbstractPoolEntry.NameAndTypeEntryImpl readNameAndTypeEntry(int pos) {\n-        int index = readIndex(pos);\n-        PoolEntry info = cp[index];\n-        if (info == null) {\n-            int offset = getOffset(index);\n-            if (readU1(offset) == TAG_NAMEANDTYPE) {\n-                info = new AbstractPoolEntry.NameAndTypeEntryImpl(this, index, readUtf8Entry(offset + 1), readUtf8Entry(offset + 3));\n-                cp[index] = info;\n-            }\n-        }\n-        if (info instanceof AbstractPoolEntry.NameAndTypeEntryImpl nte) return nte;\n-        throw new ConstantPoolException(\"Not a NameAndTypeEntry at index: \" + index);\n-    }\n-\n-    private AbstractPoolEntry.AbstractMemberRefEntry readAbstractMemberRefEntry(int pos) {\n-        int index = readIndex(pos);\n-        PoolEntry info = cp[index];\n-        if (info == null) {\n-            int offset = getOffset(index);\n-            info = switch (readU1(offset)) {\n-                case TAG_FIELDREF -> new AbstractPoolEntry.FieldRefEntryImpl(this, index, readClassEntry(offset + 1), readNameAndTypeEntry(offset + 3));\n-                case TAG_METHODREF -> new AbstractPoolEntry.MethodRefEntryImpl(this, index, readClassEntry(offset + 1), readNameAndTypeEntry(offset + 3));\n-                case TAG_INTERFACEMETHODREF -> new AbstractPoolEntry.InterfaceMethodRefEntryImpl(this, index, readClassEntry(offset + 1), readNameAndTypeEntry(offset + 3));\n-                default -> null;\n-            };\n-            cp[index] = info;\n-        }\n-        if (info instanceof AbstractPoolEntry.AbstractMemberRefEntry amre) return amre;\n-        throw new ConstantPoolException(\"Not a MemberRefEntry at index: \" + index);\n+    public NameAndTypeEntry readNameAndTypeEntry(int pos) {\n+        return readEntry(pos, NameAndTypeEntry.class, TAG_NAMEANDTYPE, TAG_NAMEANDTYPE);\n@@ -525,1 +489,1 @@\n-        return readEntry(pos, MethodHandleEntry.class);\n+        return readEntry(pos, MethodHandleEntry.class, TAG_METHODHANDLE, TAG_METHODHANDLE);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/ClassReaderImpl.java","additions":38,"deletions":74,"binary":false,"changes":112,"status":"modified"}]}