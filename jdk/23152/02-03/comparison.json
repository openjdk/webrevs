{"files":[{"patch":"@@ -197,0 +197,7 @@\n+  \/\/ r27 is allocated conditionally. With compressed oops it holds\n+  \/\/ the heapbase value and is not visible to the allocator.\n+  bool preserve_rheapbase = i >= nof_caller_save_cpu_regs();\n+  if (!preserve_rheapbase) {\n+    map_register(i, r27); r27_opr = LIR_OprFact::single_cpu(i); i++; \/\/ rheapbase\n+  }\n+\n@@ -201,4 +208,0 @@\n-  \/\/ r27 is allocated conditionally. With compressed oops it holds\n-  \/\/ the heapbase value and is not visible to the allocator.\n-  map_register(i, r27); r27_opr = LIR_OprFact::single_cpu(i); i++; \/\/ rheapbase\n-\n@@ -207,0 +210,3 @@\n+  if (preserve_rheapbase) {\n+    map_register(i, r27); r27_opr = LIR_OprFact::single_cpu(i); i++; \/\/ rheapbase\n+  }\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_FrameMap_aarch64.cpp","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -44,1 +44,1 @@\n-  if (assigned_reg < pd_first_callee_saved_reg)\n+  if (assigned_reg < FrameMap::nof_caller_save_cpu_regs())\n@@ -46,1 +46,1 @@\n-  if (assigned_reg > pd_last_callee_saved_reg && assigned_reg < pd_first_callee_saved_fpu_reg)\n+  if (assigned_reg >= pd_first_fpu_reg && assigned_reg < pd_first_callee_saved_fpu_reg)\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LinearScan_aarch64.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -261,7 +261,6 @@\n-  for (int i = 0; i < FrameMap::nof_cpu_regs; i++) {\n-    Register r = as_Register(i);\n-    if (r == rthread || (i < 28 && i != rscratch1->encoding() && i != rscratch2->encoding())) {\n-      int sp_offset = cpu_reg_save_offsets[i];\n-      oop_map->set_callee_saved(VMRegImpl::stack2reg(sp_offset),\n-                                r->as_VMReg());\n-    }\n+  for (int i = 0; i < FrameMap::nof_caller_save_cpu_regs(); i++) {\n+    LIR_Opr opr = FrameMap::caller_save_cpu_reg_at(i);\n+    Register r = opr->as_register();\n+    int reg_num = r->encoding();\n+    int sp_offset = cpu_reg_save_offsets[reg_num];\n+    oop_map->set_callee_saved(VMRegImpl::stack2reg(cpu_reg_save_offsets[reg_num]), r->as_VMReg());\n@@ -270,0 +269,4 @@\n+  Register r = rthread;\n+  int reg_num = r->encoding();\n+  oop_map->set_callee_saved(VMRegImpl::stack2reg(cpu_reg_save_offsets[reg_num]), r->as_VMReg());\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_Runtime1_aarch64.cpp","additions":10,"deletions":7,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -53,1 +53,0 @@\n-  Runtime1::initialize(buffer_blob);\n@@ -55,0 +54,1 @@\n+  Runtime1::initialize(buffer_blob);\n","filename":"src\/hotspot\/share\/c1\/c1_Compiler.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}