{"files":[{"patch":"@@ -619,1 +619,0 @@\n-java\/rmi\/transport\/checkLeaseInfoLeak\/CheckLeaseLeak.java       8365398 generic-all\n","filename":"test\/jdk\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+import java.util.concurrent.CountDownLatch;\n@@ -65,1 +66,3 @@\n-    public void ping () throws RemoteException { }\n+    public void ping () throws RemoteException {\n+        remoteCallsComplete.countDown();\n+    }\n@@ -77,0 +80,3 @@\n+    private static final int NO_OF_CLIENTS = ITERATIONS;\n+    private static final int GOOD_LUCK_FACTOR = 2;\n+    private static CountDownLatch remoteCallsComplete = new CountDownLatch(NO_OF_CLIENTS);\n@@ -116,0 +122,7 @@\n+            try {\n+                remoteCallsComplete.await();\n+                System.out.println(\"remoteCallsComplete . . . \");\n+            } catch (InterruptedException intEx) {\n+                System.out.println(\"remoteCallsComplete.await interrupted . . . \");\n+            }\n+            Thread.sleep(NO_OF_CLIENTS * LEASE_VALUE * GOOD_LUCK_FACTOR);\n@@ -117,1 +130,0 @@\n-            Thread.sleep(3000);\n@@ -128,2 +140,2 @@\n-        \/* numLeft should be 4 - if 11 there is a problem. *\/\n-        if (numLeft > 4) {\n+        \/* numLeft should not be greater than 2 - if 11 there is a problem. *\/\n+        if (numLeft > 2) {\n@@ -207,2 +219,3 @@\n-\n-            numLeaseInfosLeft = leaseTable.size();\n+            synchronized (leaseTable) {\n+                numLeaseInfosLeft = leaseTable.size();\n+            }\n","filename":"test\/jdk\/java\/rmi\/transport\/checkLeaseInfoLeak\/CheckLeaseLeak.java","additions":19,"deletions":6,"binary":false,"changes":25,"status":"modified"}]}