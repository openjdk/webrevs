{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -78,1 +78,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -84,9 +83,4 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                putService(new ProviderService(p, \"KeyStore\",\n-                           \"KeychainStore\", \"apple.security.KeychainStore$USER\"));\n-                putService(new ProviderService(p, \"KeyStore\",\n-                           \"KeychainStore-ROOT\", \"apple.security.KeychainStore$ROOT\"));\n-                return null;\n-            }\n-        });\n+        putService(new ProviderService(p, \"KeyStore\",\n+                   \"KeychainStore\", \"apple.security.KeychainStore$USER\"));\n+        putService(new ProviderService(p, \"KeyStore\",\n+                   \"KeychainStore-ROOT\", \"apple.security.KeychainStore$ROOT\"));\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/AppleProvider.java","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -191,9 +191,0 @@\n-    private static void permissionCheck() {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sec = System.getSecurityManager();\n-\n-        if (sec != null) {\n-            sec.checkPermission(new RuntimePermission(\"useKeychainStore\"));\n-        }\n-    }\n-\n@@ -231,2 +222,0 @@\n-        permissionCheck();\n-\n@@ -335,2 +324,0 @@\n-        permissionCheck();\n-\n@@ -366,2 +353,0 @@\n-        permissionCheck();\n-\n@@ -423,2 +408,0 @@\n-        permissionCheck();\n-\n@@ -464,2 +447,0 @@\n-        permissionCheck();\n-\n@@ -535,2 +516,0 @@\n-        permissionCheck();\n-\n@@ -585,2 +564,0 @@\n-        permissionCheck();\n-\n@@ -600,1 +577,0 @@\n-        permissionCheck();\n@@ -612,1 +588,0 @@\n-        permissionCheck();\n@@ -622,1 +597,0 @@\n-        permissionCheck();\n@@ -634,1 +608,0 @@\n-        permissionCheck();\n@@ -647,1 +620,0 @@\n-        permissionCheck();\n@@ -669,1 +641,0 @@\n-        permissionCheck();\n@@ -707,2 +678,0 @@\n-        permissionCheck();\n-\n@@ -798,2 +767,0 @@\n-        permissionCheck();\n-\n","filename":"src\/java.base\/macosx\/classes\/apple\/security\/KeychainStore.java","additions":1,"deletions":34,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -92,1 +92,1 @@\n-        String ic = SecurityProperties.privilegedGetOverridable(\n+        String ic = SecurityProperties.getOverridableProperty(\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/KeyProtector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -181,1 +181,0 @@\n-        check(\"setIdentityPublicKey\");\n@@ -194,1 +193,0 @@\n-        check(\"setIdentityInfo\");\n@@ -224,2 +222,0 @@\n-        check(\"addIdentityCertificate\");\n-\n@@ -263,1 +259,0 @@\n-        check(\"removeIdentityCertificate\");\n@@ -361,1 +356,0 @@\n-        check(\"printIdentity\");\n@@ -432,7 +426,0 @@\n-\n-    private static void check(String directive) {\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkSecurityAccess(directive);\n-        }\n-    }\n","filename":"src\/java.base\/share\/classes\/java\/security\/Identity.java","additions":0,"deletions":13,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -79,7 +79,1 @@\n-        String classname = AccessController.doPrivileged(\n-                                new PrivilegedAction<>() {\n-            public String run() {\n-                return Security.getProperty(\"system.scope\");\n-            }\n-        });\n-\n+        String classname = Security.getProperty(\"system.scope\");\n@@ -156,1 +150,0 @@\n-        check(\"setSystemScope\");\n@@ -244,8 +237,0 @@\n-\n-    private static void check(String directive) {\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkSecurityAccess(directive);\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/security\/IdentityScope.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -990,3 +990,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String kstype = AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-            Security.getProperty(KEYSTORE_TYPE));\n+        String kstype = Security.getProperty(KEYSTORE_TYPE);\n@@ -1996,3 +1994,1 @@\n-            @SuppressWarnings(\"removal\")\n-            var acc = AccessController.getContext();\n-            return new FileBuilder(type, provider, file, protection, acc);\n+            return new FileBuilder(type, provider, file, protection);\n@@ -2051,2 +2047,0 @@\n-            @SuppressWarnings(\"removal\")\n-            private final AccessControlContext context;\n@@ -2059,2 +2053,1 @@\n-                    ProtectionParameter protection,\n-                    @SuppressWarnings(\"removal\") AccessControlContext context) {\n+                    ProtectionParameter protection) {\n@@ -2065,1 +2058,0 @@\n-                this.context = context;\n@@ -2068,1 +2060,0 @@\n-            @SuppressWarnings(\"removal\")\n@@ -2079,6 +2070,4 @@\n-                PrivilegedExceptionAction<KeyStore> action =\n-                        new PrivilegedExceptionAction<KeyStore>() {\n-                    public KeyStore run() throws Exception {\n-                        if (!(protection instanceof CallbackHandlerProtection)) {\n-                            return run0();\n-                        }\n+                try {\n+                    if (!(protection instanceof CallbackHandlerProtection)) {\n+                        keyStore = getKeyStore0();\n+                    } else {\n@@ -2091,1 +2080,1 @@\n-                                return run0();\n+                                keyStore = getKeyStore0();\n@@ -2101,3 +2090,7 @@\n-                    public KeyStore run0() throws Exception {\n-                        KeyStore ks;\n-                        char[] password;\n+                } catch (Exception e) {\n+                    oldException = e;\n+                    throw new KeyStoreException\n+                        (\"KeyStore instantiation failed\", oldException);\n+                }\n+                return keyStore;\n+            }\n@@ -2105,21 +2098,3 @@\n-                        \/\/ Acquire keystore password\n-                        if (protection instanceof PasswordProtection) {\n-                            password =\n-                                ((PasswordProtection)protection).getPassword();\n-                            keyProtection = protection;\n-                        } else {\n-                            CallbackHandler handler =\n-                                ((CallbackHandlerProtection)protection)\n-                                    .getCallbackHandler();\n-                            PasswordCallback callback = new PasswordCallback\n-                                (\"Password for keystore \" + file.getName(),\n-                                    false);\n-                            handler.handle(new Callback[] {callback});\n-                            password = callback.getPassword();\n-                            if (password == null) {\n-                                throw new KeyStoreException(\"No password\" +\n-                                                            \" provided\");\n-                            }\n-                            callback.clearPassword();\n-                            keyProtection = new PasswordProtection(password);\n-                        }\n+            private KeyStore getKeyStore0() throws Exception {\n+                KeyStore ks;\n+                char[] password;\n@@ -2127,16 +2102,14 @@\n-                        if (type.isEmpty()) {\n-                            \/\/ Instantiate keystore and load keystore data\n-                            ks = KeyStore.getInstance(file, password);\n-                        } else {\n-                            \/\/ Instantiate keystore\n-                            if (provider == null) {\n-                                ks = KeyStore.getInstance(type);\n-                            } else {\n-                                ks = KeyStore.getInstance(type, provider);\n-                            }\n-                            \/\/ Load keystore data\n-                            try (InputStream in = new FileInputStream(file)) {\n-                                ks.load(in, password);\n-                            }\n-                        }\n-                        return ks;\n+                \/\/ Acquire keystore password\n+                if (protection instanceof PasswordProtection) {\n+                    password = ((PasswordProtection)protection).getPassword();\n+                    keyProtection = protection;\n+                } else {\n+                    CallbackHandler handler =\n+                        ((CallbackHandlerProtection)protection)\n+                            .getCallbackHandler();\n+                    PasswordCallback callback = new PasswordCallback\n+                        (\"Password for keystore \" + file.getName(), false);\n+                    handler.handle(new Callback[] {callback});\n+                    password = callback.getPassword();\n+                    if (password == null) {\n+                        throw new KeyStoreException(\"No password\" + \" provided\");\n@@ -2144,8 +2117,2 @@\n-                };\n-                try {\n-                    keyStore = AccessController.doPrivileged(action, context);\n-                    return keyStore;\n-                } catch (PrivilegedActionException e) {\n-                    oldException = e.getCause();\n-                    throw new KeyStoreException\n-                        (\"KeyStore instantiation failed\", oldException);\n+                    callback.clearPassword();\n+                    keyProtection = new PasswordProtection(password);\n@@ -2153,0 +2120,17 @@\n+\n+                if (type.isEmpty()) {\n+                    \/\/ Instantiate keystore and load keystore data\n+                    ks = KeyStore.getInstance(file, password);\n+                } else {\n+                    \/\/ Instantiate keystore\n+                    if (provider == null) {\n+                        ks = KeyStore.getInstance(type);\n+                    } else {\n+                        ks = KeyStore.getInstance(type, provider);\n+                    }\n+                    \/\/ Load keystore data\n+                    try (InputStream in = new FileInputStream(file)) {\n+                        ks.load(in, password);\n+                    }\n+                }\n+                return ks;\n@@ -2198,2 +2182,0 @@\n-            @SuppressWarnings(\"removal\")\n-            final AccessControlContext context = AccessController.getContext();\n@@ -2204,4 +2186,8 @@\n-                private final PrivilegedExceptionAction<KeyStore> action\n-                        = new PrivilegedExceptionAction<>() {\n-\n-                    public KeyStore run() throws Exception {\n+                public synchronized KeyStore getKeyStore()\n+                        throws KeyStoreException {\n+                    if (oldException != null) {\n+                        throw new KeyStoreException\n+                            (\"Previous KeyStore instantiation failed\",\n+                             oldException);\n+                    }\n+                    try {\n@@ -2240,15 +2226,1 @@\n-                    }\n-                };\n-\n-                @SuppressWarnings(\"removal\")\n-                public synchronized KeyStore getKeyStore()\n-                        throws KeyStoreException {\n-                    if (oldException != null) {\n-                        throw new KeyStoreException\n-                            (\"Previous KeyStore instantiation failed\",\n-                             oldException);\n-                    }\n-                    try {\n-                        return AccessController.doPrivileged(action, context);\n-                    } catch (PrivilegedActionException e) {\n-                        Throwable cause = e.getCause();\n+                    } catch (Exception e) {\n@@ -2256,1 +2228,1 @@\n-                            (\"KeyStore instantiation failed\", cause);\n+                            (\"KeyStore instantiation failed\", e);\n","filename":"src\/java.base\/share\/classes\/java\/security\/KeyStore.java","additions":61,"deletions":89,"binary":false,"changes":150,"status":"modified"},{"patch":"@@ -102,1 +102,0 @@\n-        check(\"getSignerPrivateKey\");\n@@ -118,2 +117,1 @@\n-        check(\"setSignerKeyPair\");\n-        final PublicKey pub = pair.getPublic();\n+        PublicKey pub = pair.getPublic();\n@@ -125,11 +123,1 @@\n-        try {\n-            AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<>() {\n-                public Void run() throws KeyManagementException {\n-                    setPublicKey(pub);\n-                    return null;\n-                }\n-            });\n-        } catch (PrivilegedActionException pae) {\n-            throw (KeyManagementException) pae.getException();\n-        }\n+        setPublicKey(pub);\n@@ -159,8 +147,0 @@\n-\n-    private static void check(String directive) {\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkSecurityAccess(directive);\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/security\/Signer.java","additions":2,"deletions":22,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-import java.security.AccessController;\n@@ -39,1 +38,0 @@\n-import java.security.PrivilegedAction;\n@@ -69,1 +67,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -2654,2 +2651,1 @@\n-        return GetPropertyAction.privilegedGetProperty(\n-                USE_LEGACY_PROP) != null;\n+        return System.getProperty(USE_LEGACY_PROP) != null;\n@@ -2662,1 +2658,1 @@\n-        String result = SecurityProperties.privilegedGetOverridable(\n+        String result = SecurityProperties.getOverridableProperty(\n@@ -2672,1 +2668,1 @@\n-        String result = SecurityProperties.privilegedGetOverridable(\n+        String result = SecurityProperties.getOverridableProperty(\n@@ -2685,14 +2681,6 @@\n-        @SuppressWarnings(\"removal\")\n-        String result = AccessController.doPrivileged(new PrivilegedAction<String>() {\n-            public String run() {\n-                String result;\n-                String name1 = \"keystore.pkcs12.keyProtectionAlgorithm\";\n-                String name2 = \"keystore.PKCS12.keyProtectionAlgorithm\";\n-                result = System.getProperty(name1);\n-                if (result != null) {\n-                    return result;\n-                }\n-                result = System.getProperty(name2);\n-                if (result != null) {\n-                    return result;\n-                }\n+        String name1 = \"keystore.pkcs12.keyProtectionAlgorithm\";\n+        String name2 = \"keystore.PKCS12.keyProtectionAlgorithm\";\n+        String result = System.getProperty(name1);\n+        if (result == null) {\n+            result = System.getProperty(name2);\n+            if (result == null) {\n@@ -2700,2 +2688,2 @@\n-                if (result != null) {\n-                    return result;\n+                if (result == null) {\n+                    result = Security.getProperty(name2);\n@@ -2703,1 +2691,0 @@\n-                return Security.getProperty(name2);\n@@ -2705,1 +2692,1 @@\n-        });\n+        }\n@@ -2714,1 +2701,1 @@\n-        String result = SecurityProperties.privilegedGetOverridable(\n+        String result = SecurityProperties.getOverridableProperty(\n@@ -2725,1 +2712,1 @@\n-        String result = SecurityProperties.privilegedGetOverridable(\n+        String result = SecurityProperties.getOverridableProperty(\n@@ -2735,1 +2722,1 @@\n-        String result = SecurityProperties.privilegedGetOverridable(\n+        String result = SecurityProperties.getOverridableProperty(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs12\/PKCS12KeyStore.java","additions":15,"deletions":28,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -984,1 +984,1 @@\n-                        \"NONE\".equals(SecurityProperties.privilegedGetOverridable(\n+                        \"NONE\".equals(SecurityProperties.getOverridableProperty(\n@@ -986,1 +986,1 @@\n-                        && \"NONE\".equals(SecurityProperties.privilegedGetOverridable(\n+                        && \"NONE\".equals(SecurityProperties.getOverridableProperty(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -67,3 +67,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var prop = AccessController.doPrivileged((PrivilegedAction<String>) () ->\n-                        Security.getProperty(KEYSTORE_TYPE_COMPAT));\n+        var prop = Security.getProperty(KEYSTORE_TYPE_COMPAT);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyStoreDelegator.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2016, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -73,9 +73,3 @@\n-        AccessController.doPrivileged(new PrivilegedAction() {\n-            public Object run() {\n-                put(\"KeyStore.Pre15KeyStore\", \"EntryMethods$Pre15\");\n-                put(\"KeyStore.Post15KeyStore\", \"EntryMethods$Post15\");\n-                put(\"KeyStore.UnrecoverableKeyStore\",\n-                                        \"EntryMethods$UnrecoverableKS\");\n-                return null;\n-            }\n-        });\n+        put(\"KeyStore.Pre15KeyStore\", \"EntryMethods$Pre15\");\n+        put(\"KeyStore.Post15KeyStore\", \"EntryMethods$Post15\");\n+        put(\"KeyStore.UnrecoverableKeyStore\", \"EntryMethods$UnrecoverableKS\");\n","filename":"test\/jdk\/java\/security\/KeyStore\/EntryMethods.java","additions":4,"deletions":10,"binary":false,"changes":14,"status":"modified"}]}