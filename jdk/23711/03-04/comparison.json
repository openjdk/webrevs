{"files":[{"patch":"@@ -192,0 +192,3 @@\n+  if (virtual_space()->uncommitted_size() == 0) {\n+    return false;\n+  }\n","filename":"src\/hotspot\/share\/gc\/parallel\/psOldGen.cpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -81,10 +81,0 @@\n-template<typename T, typename A, ENABLE_IF(std::is_integral<T>::value)>\n-constexpr T align_up_or_min(T size, A alignment) {\n-  T mask = checked_cast<T>(alignment_mask(alignment));\n-  if (size > std::numeric_limits<T>::max() - mask) {\n-    return std::numeric_limits<T>::min();\n-  }\n-  T adjusted = size + mask;\n-  return align_down(adjusted, alignment);\n-}\n-\n@@ -107,2 +97,2 @@\n-  uintptr_t up = align_up_or_min((uintptr_t)ptr, alignment);\n-  if (up < (uintptr_t)ptr) { \/\/ we overflowed\n+  uintptr_t mask = checked_cast<uintptr_t>(alignment_mask(alignment));\n+  if ((uintptr_t)ptr > std::numeric_limits<uintptr_t>::max() - mask) {\n@@ -111,1 +101,2 @@\n-  return (T*)up;\n+  uintptr_t adjusted = (uintptr_t)ptr + mask;\n+  return (T*)align_down(adjusted, alignment);\n","filename":"src\/hotspot\/share\/utilities\/align.hpp","additions":4,"deletions":13,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -122,4 +122,0 @@\n-        \/\/ Check against `align_up_or_min`\n-        const uint64_t up2 = align_up_or_min(values[i], alignment);\n-        ASSERT_EQ(up, up2);\n-\n@@ -208,1 +204,0 @@\n-  ASSERT_EQ(align_up_or_min(value, alignment), std::numeric_limits<T>::min());\n","filename":"test\/hotspot\/gtest\/utilities\/test_align.cpp","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"}]}