{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,2 +42,2 @@\n-\n-\n+import java.security.spec.ECParameterSpec;\n+import java.security.spec.NamedParameterSpec;\n@@ -64,4 +64,1 @@\n-import sun.security.util.ConstraintsParameters;\n-import sun.security.util.ECKeySizeParameterSpec;\n-import sun.security.util.KeyUtil;\n-import sun.security.util.ObjectIdentifier;\n+import sun.security.util.*;\n@@ -72,5 +69,1 @@\n-import sun.security.util.KnownOIDs;\n-import sun.security.util.Password;\n-import sun.security.util.SecurityProperties;\n-import sun.security.util.SecurityProviderConstants;\n-import sun.security.util.SignatureUtil;\n+\n@@ -85,2 +78,0 @@\n-import sun.security.util.DerValue;\n-import sun.security.util.Pem;\n@@ -93,1 +84,0 @@\n-import sun.security.util.DisabledAlgorithmConstraints;\n@@ -2038,1 +2028,1 @@\n-                    (\"Generating.keysize.bit.keyAlgName.key.pair.and.a.certificate.sigAlgName.issued.by.signerAlias.with.a.validity.of.validality.days.for\"));\n+                    (\"Generating.full.keyAlgName.key.pair.and.a.certificate.sigAlgName.issued.by.signerAlias.with.a.validity.of.days.for\"));\n@@ -2040,2 +2030,1 @@\n-                    groupName == null ? keysize : KeyUtil.getKeySize(privKey),\n-                    KeyUtil.fullDisplayAlgName(privKey),\n+                    fullDisplayKeyName(privKey),\n@@ -2048,1 +2037,1 @@\n-                    (\"Generating.keysize.bit.keyAlgName.key.pair.and.self.signed.certificate.sigAlgName.with.a.validity.of.validality.days.for\"));\n+                    (\"Generating.full.keyAlgName.key.pair.and.self.signed.certificate.sigAlgName.with.a.validity.of.days.for\"));\n@@ -2050,2 +2039,1 @@\n-                    groupName == null ? keysize : KeyUtil.getKeySize(privKey),\n-                    KeyUtil.fullDisplayAlgName(privKey),\n+                    fullDisplayKeyName(privKey),\n@@ -2076,0 +2064,32 @@\n+    \/**\n+     * Returns the full display name of the given key object. Could be\n+     * - \"X25519\", if its getParams() is NamedParameterSpec\n+     * - \"EC (secp256r1)\", if it's an EC key\n+     * - \"1024-bit RSA\", other known keys\n+     * - plain algorithm name, otherwise\n+     *\n+     * Note: the same method appears in keytool and jarsigner which uses\n+     * same resource string defined in their own Resources.java.\n+     *\n+     * @param key the key object, cannot be null\n+     * @return the full name\n+     *\/\n+    private static String fullDisplayKeyName(Key key) {\n+        var alg = key.getAlgorithm();\n+        if (key instanceof AsymmetricKey ak) {\n+            var params = ak.getParams();\n+            if (params instanceof NamedParameterSpec nps) {\n+                return nps.getName(); \/\/ directly return\n+            } else if (params instanceof ECParameterSpec eps) {\n+                var nc = CurveDB.lookup(eps);\n+                if (nc != null) {\n+                    alg += \" (\" + nc.getNameAndAliases()[0] + \")\"; \/\/ append name\n+                }\n+            }\n+        }\n+        var size = KeyUtil.getKeySize(key);\n+        return size >= 0\n+                ? String.format(rb.getString(\"size.bit.alg\"), size, alg)\n+                : alg;\n+    }\n+\n@@ -3601,2 +3621,1 @@\n-        int kLen = KeyUtil.getKeySize(key);\n-        String displayAlg = KeyUtil.fullDisplayAlgName(key);\n+        String displayAlg = fullDisplayKeyName(key);\n@@ -3606,1 +3625,1 @@\n-            return String.format(rb.getString(\"key.bit.disabled\"), kLen, displayAlg);\n+            return String.format(rb.getString(\"key.bit.disabled\"), displayAlg);\n@@ -3610,5 +3629,1 @@\n-            if (kLen >= 0) {\n-                return String.format(rb.getString(\"key.bit\"), kLen, displayAlg);\n-            } else {\n-                return String.format(rb.getString(\"unknown.size.1\"), displayAlg);\n-            }\n+            return String.format(rb.getString(\"key.bit\"), displayAlg);\n@@ -3616,1 +3631,1 @@\n-            return String.format(rb.getString(\"key.bit.weak\"), kLen, displayAlg);\n+            return String.format(rb.getString(\"key.bit.weak\"), displayAlg);\n@@ -4980,2 +4995,1 @@\n-                            String.format(rb.getString(\"key.bit\"),\n-                            KeyUtil.getKeySize(key), KeyUtil.fullDisplayAlgName(key))));\n+                            String.format(rb.getString(\"key.bit\"), fullDisplayKeyName(key))));\n@@ -4986,2 +5000,1 @@\n-                        String.format(rb.getString(\"key.bit\"),\n-                        KeyUtil.getKeySize(key), KeyUtil.fullDisplayAlgName(key))));\n+                        String.format(rb.getString(\"key.bit\"), fullDisplayKeyName(key))));\n@@ -5007,2 +5020,1 @@\n-                    String.format(rb.getString(\"key.bit\"),\n-                    KeyUtil.getKeySize(key), KeyUtil.fullDisplayAlgName(key))));\n+                    String.format(rb.getString(\"key.bit\"), fullDisplayKeyName(key))));\n@@ -5012,2 +5024,1 @@\n-                    String.format(rb.getString(\"key.bit\"),\n-                    KeyUtil.getKeySize(key), KeyUtil.fullDisplayAlgName(key))));\n+                    String.format(rb.getString(\"key.bit\"), fullDisplayKeyName(key))));\n@@ -5078,1 +5089,1 @@\n-                        KeyUtil.getKeySize(secKey), secKeyAlg)));\n+                        fullDisplayKeyName(secKey))));\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Main.java","additions":50,"deletions":39,"binary":false,"changes":89,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -310,4 +310,6 @@\n-        {\"Generating.keysize.bit.keyAlgName.key.pair.and.self.signed.certificate.sigAlgName.with.a.validity.of.validality.days.for\",\n-                \"Generating {0} bit {1} key pair and self-signed certificate ({2}) with a validity of {3} days\\n\\tfor: {4}\"},\n-        {\"Generating.keysize.bit.keyAlgName.key.pair.and.a.certificate.sigAlgName.issued.by.signerAlias.with.a.validity.of.validality.days.for\",\n-                \"Generating {0} bit {1} key pair and a certificate ({2}) issued by <{3}> with a validity of {4} days\\n\\tfor: {5}\"},\n+        {\"size.bit.alg\",\n+                \"%1$d-bit %2$s\"},\n+        {\"Generating.full.keyAlgName.key.pair.and.self.signed.certificate.sigAlgName.with.a.validity.of.days.for\",\n+                \"Generating {0} key pair and self-signed certificate ({1}) with a validity of {2} days\\n\\tfor: {3}\"},\n+        {\"Generating.full.keyAlgName.key.pair.and.a.certificate.sigAlgName.issued.by.signerAlias.with.a.validity.of.days.for\",\n+                \"Generating {0} key pair and a certificate ({1}) issued by <{2}> with a validity of {3} days\\n\\tfor: {4}\"},\n@@ -482,4 +484,3 @@\n-        {\"key.bit\", \"%1$d-bit %2$s key\"},\n-        {\"key.bit.weak\", \"%1$d-bit %2$s key (weak)\"},\n-        {\"key.bit.disabled\", \"%1$d-bit %2$s key (disabled)\"},\n-        {\"unknown.size.1\", \"%s key of unknown size\"},\n+        {\"key.bit\", \"%s key\"},\n+        {\"key.bit.weak\", \"%s key (weak)\"},\n+        {\"key.bit.disabled\", \"%s key (disabled)\"},\n@@ -497,1 +498,1 @@\n-        {\"whose.key.weak\", \"%1$s uses a %2$s which is considered a security risk. This key size will be disabled in a future update.\"},\n+        {\"whose.key.weak\", \"%1$s uses a %2$s which is considered a security risk. It will be disabled in a future update.\"},\n","filename":"src\/java.base\/share\/classes\/sun\/security\/tools\/keytool\/Resources.java","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -177,21 +177,0 @@\n-    \/**\n-     * Returns the algorithm name of the given key object. If an EC key is\n-     * specified, returns the algorithm name and its named curve.\n-     *\n-     * @param key the key object, cannot be null\n-     * @return the algorithm name of the given key object, or return in the\n-     *       form of \"EC (named curve)\" if the given key object is an EC key\n-     *\/\n-    public static final String fullDisplayAlgName(Key key) {\n-        String result = key.getAlgorithm();\n-        if (key instanceof AsymmetricKey ak) {\n-            AlgorithmParameterSpec paramSpec = ak.getParams();\n-            if (paramSpec instanceof NamedCurve nc) {\n-                result += \" (\" + nc.getNameAndAliases()[0] + \")\";\n-            } else if (paramSpec instanceof NamedParameterSpec nps) {\n-                result = nps.getName();\n-            }\n-        }\n-        return result;\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/KeyUtil.java","additions":1,"deletions":22,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,2 @@\n-import java.security.interfaces.ECKey;\n+import java.security.spec.ECParameterSpec;\n+import java.security.spec.NamedParameterSpec;\n@@ -1245,2 +1246,2 @@\n-                        rb.getString(\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk..This.key.size.will.be.disabled.in.a.future.update.\"),\n-                        KeyUtil.fullDisplayAlgName(privateKey), KeyUtil.getKeySize(privateKey)));\n+                        rb.getString(\"The.full.keyAlgName.signing.key.is.considered.a.security.risk..It.will.be.disabled.in.a.future.update.\"),\n+                        fullDisplayKeyName(privateKey)));\n@@ -1251,2 +1252,2 @@\n-                        rb.getString(\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk.and.is.disabled.\"),\n-                        KeyUtil.fullDisplayAlgName(privateKey), KeyUtil.getKeySize(privateKey)));\n+                        rb.getString(\"The.full.keyAlgName.signing.key.is.considered.a.security.risk.and.is.disabled.\"),\n+                        fullDisplayKeyName(privateKey)));\n@@ -1275,2 +1276,2 @@\n-                        rb.getString(\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk..This.key.size.will.be.disabled.in.a.future.update.\"),\n-                        KeyUtil.fullDisplayAlgName(weakPublicKey), KeyUtil.getKeySize(weakPublicKey)));\n+                        rb.getString(\"The.full.keyAlgName.signing.key.is.considered.a.security.risk..It.will.be.disabled.in.a.future.update.\"),\n+                        fullDisplayKeyName(weakPublicKey)));\n@@ -1451,1 +1452,1 @@\n-        int kLen = KeyUtil.getKeySize(key);\n+        String fullName = fullDisplayKeyName(key);\n@@ -1456,6 +1457,1 @@\n-            if (key instanceof ECKey) {\n-                return String.format(rb.getString(\"key.bit.eccurve.disabled\"), kLen,\n-                        KeyUtil.fullDisplayAlgName(key));\n-            } else {\n-                return String.format(rb.getString(\"key.bit.disabled\"), kLen);\n-            }\n+            return String.format(rb.getString(\"key.bit.disabled\"), fullName);\n@@ -1465,5 +1461,1 @@\n-            if (kLen >= 0) {\n-                return String.format(rb.getString(\"key.bit\"), kLen);\n-            } else {\n-                return rb.getString(\"unknown.size\");\n-            }\n+            return String.format(rb.getString(\"key.bit\"), fullName);\n@@ -1473,5 +1465,28 @@\n-            if (key instanceof ECKey) {\n-                return String.format(rb.getString(\"key.bit.eccurve.weak\"), kLen,\n-                        KeyUtil.fullDisplayAlgName(key));\n-            } else {\n-                return String.format(rb.getString(\"key.bit.weak\"), kLen);\n+            return String.format(rb.getString(\"key.bit.weak\"), fullName);\n+        }\n+    }\n+\n+    \/**\n+     * Returns the full display name of the given key object. Could be\n+     * - \"X25519\", if its getParams() is NamedParameterSpec\n+     * - \"EC (secp256r1)\", if it's an EC key\n+     * - \"1024-bit RSA\", other known keys\n+     * - plain algorithm name, otherwise\n+     *\n+     * Note: the same method appears in keytool and jarsigner which uses\n+     * same resource string defined in their own Resources.java.\n+     *\n+     * @param key the key object, cannot be null\n+     * @return the full name\n+     *\/\n+    private static String fullDisplayKeyName(Key key) {\n+        var alg = key.getAlgorithm();\n+        if (key instanceof AsymmetricKey ak) {\n+            var params = ak.getParams();\n+            if (params instanceof NamedParameterSpec nps) {\n+                return nps.getName(); \/\/ directly return\n+            } else if (params instanceof ECParameterSpec eps) {\n+                var nc = CurveDB.lookup(eps);\n+                if (nc != null) {\n+                    alg += \" (\" + nc.getNameAndAliases()[0] + \")\"; \/\/ append name\n+                }\n@@ -1480,0 +1495,4 @@\n+        var size = KeyUtil.getKeySize(key);\n+        return size >= 0\n+                ? String.format(rb.getString(\"size.bit.alg\"), size, alg)\n+                : alg;\n@@ -1527,1 +1546,1 @@\n-        int kLen = KeyUtil.getKeySize(key);\n+        String fullName = fullDisplayKeyName(key);\n@@ -1531,6 +1550,1 @@\n-            if (key instanceof ECKey) {\n-                return String.format(rb.getString(\"key.bit.eccurve.disabled\"), kLen,\n-                        KeyUtil.fullDisplayAlgName(key));\n-            } else {\n-                return String.format(rb.getString(\"key.bit.disabled\"), kLen);\n-            }\n+            return String.format(rb.getString(\"key.bit.disabled\"), fullName);\n@@ -1540,5 +1554,1 @@\n-            if (kLen >= 0) {\n-                return String.format(rb.getString(\"key.bit\"), kLen);\n-            } else {\n-                return rb.getString(\"unknown.size\");\n-            }\n+            return String.format(rb.getString(\"key.bit\"), fullName);\n@@ -1546,6 +1556,1 @@\n-            if (key instanceof ECKey) {\n-                return String.format(rb.getString(\"key.bit.eccurve.weak\"), kLen,\n-                        KeyUtil.fullDisplayAlgName(key));\n-            } else {\n-                return String.format(rb.getString(\"key.bit.weak\"), kLen);\n-            }\n+            return String.format(rb.getString(\"key.bit.weak\"), fullName);\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Main.java","additions":48,"deletions":43,"binary":false,"changes":91,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -176,6 +176,3 @@\n-        {\"key.bit\", \"%d-bit key\"},\n-        {\"key.bit.weak\", \"%d-bit key (weak)\"},\n-        {\"key.bit.eccurve.weak\", \"%1$d-bit %2$s key (weak)\"},\n-        {\"key.bit.disabled\", \"%d-bit key (disabled)\"},\n-        {\"key.bit.eccurve.disabled\", \"%1$d-bit %2$s key (disabled)\"},\n-        {\"unknown.size\", \"unknown size\"},\n+        {\"key.bit\", \"%s key\"},\n+        {\"key.bit.weak\", \"%s key (weak)\"},\n+        {\"key.bit.disabled\", \"%s key (disabled)\"},\n@@ -300,4 +297,6 @@\n-        {\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk..This.key.size.will.be.disabled.in.a.future.update.\",\n-                \"The %1$s signing key has a keysize of %2$d which is considered a security risk. This key size will be disabled in a future update.\"},\n-        {\"The.1.signing.key.has.a.keysize.of.2.which.is.considered.a.security.risk.and.is.disabled.\",\n-                \"The %1$s signing key has a keysize of %2$d which is considered a security risk and is disabled.\"},\n+        {\"size.bit.alg\",\n+                \"%1$d-bit %2$s\"},\n+        {\"The.full.keyAlgName.signing.key.is.considered.a.security.risk..It.will.be.disabled.in.a.future.update.\",\n+                \"The %s signing key is considered a security risk. It will be disabled in a future update.\"},\n+        {\"The.full.keyAlgName.signing.key.is.considered.a.security.risk.and.is.disabled.\",\n+                \"The %s signing key is considered a security risk and is disabled.\"},\n","filename":"src\/jdk.jartool\/share\/classes\/sun\/security\/tools\/jarsigner\/Resources.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +84,1 @@\n-                .shouldContain(\"Signature algorithm: SHA1withRSA (disabled), 2048-bit key\")\n+                .shouldContain(\"Signature algorithm: SHA1withRSA (disabled), 2048-bit RSA key\")\n@@ -87,1 +87,1 @@\n-                .shouldContain(\"Signature algorithm: SHA1withRSA, 1024-bit key (weak)\")\n+                .shouldContain(\"Signature algorithm: SHA1withRSA, 1024-bit RSA key (weak)\")\n@@ -95,1 +95,1 @@\n-                .shouldContain(\"Signature algorithm: SHA1withRSA (disabled), 2048-bit key\")\n+                .shouldContain(\"Signature algorithm: SHA1withRSA (disabled), 2048-bit RSA key\")\n@@ -98,1 +98,1 @@\n-                .shouldContain(\"Signature algorithm: SHA1withRSA, 1024-bit key (weak)\")\n+                .shouldContain(\"Signature algorithm: SHA1withRSA, 1024-bit RSA key (weak)\")\n@@ -121,2 +121,2 @@\n-                .shouldNotContain(\"Signature algorithm: MD5withRSA (disabled), 2048-bit key\")\n-                .shouldContain(\"Signature algorithm: SHA384withRSA, 2048-bit key\")\n+                .shouldNotContain(\"Signature algorithm: MD5withRSA (disabled), 2048-bit RSA key\")\n+                .shouldContain(\"Signature algorithm: SHA384withRSA, 2048-bit RSA key\")\n@@ -137,2 +137,2 @@\n-                .shouldContain(\"Signature algorithm: MD5withRSA (disabled), 2048-bit key\")\n-                .shouldContain(\"Signature algorithm: SHA384withRSA, 2048-bit key\")\n+                .shouldContain(\"Signature algorithm: MD5withRSA (disabled), 2048-bit RSA key\")\n+                .shouldContain(\"Signature algorithm: SHA384withRSA, 2048-bit RSA key\")\n@@ -147,2 +147,2 @@\n-                .shouldContain(\"Signature algorithm: MD5withRSA (disabled), 2048-bit key\")\n-                .shouldContain(\"Signature algorithm: SHA384withRSA, 2048-bit key\")\n+                .shouldContain(\"Signature algorithm: MD5withRSA (disabled), 2048-bit RSA key\")\n+                .shouldContain(\"Signature algorithm: SHA384withRSA, 2048-bit RSA key\")\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/CheckSignerCertChain.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +63,1 @@\n-                .shouldContain(\"The EC (secp256r1) signing key has a keysize of 256 which is considered a security risk and is disabled\")\n+                .shouldContain(\"The 256-bit EC (secp256r1) signing key is considered a security risk and is disabled\")\n@@ -87,1 +87,1 @@\n-                .shouldContain(\"The EC (secp256r1) signing key has a keysize of 256 which is considered a security risk. This key size will be disabled in a future update\")\n+                .shouldContain(\"The 256-bit EC (secp256r1) signing key is considered a security risk. It will be disabled in a future update\")\n@@ -97,1 +97,1 @@\n-                .shouldContain(\"The EC (secp256r1) signing key has a keysize of 256 which is considered a security risk. This key size will be disabled in a future update\")\n+                .shouldContain(\"The 256-bit EC (secp256r1) signing key is considered a security risk. It will be disabled in a future update\")\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/DisableCurveTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -451,2 +451,2 @@\n-                        .shouldContain(\"The RSA signing key has a keysize \" +\n-                            \"of 1024 which is considered a security risk\")\n+                        .shouldContain(\"The 1024-bit RSA signing key \" +\n+                            \"is considered a security risk\")\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/TimestampCheck.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -721,1 +721,2 @@\n-                            expectedKeySize() + \"-bit key\"\n+                            expectedKeySize() + \"-bit \" + signItem.certInfo.\n+                            expectedKeyAlgorithm() + \" key\"\n@@ -1227,0 +1228,6 @@\n+        private String expectedKeyAlgorithm() {\n+            return keyAlgorithm.equals(\"EC\")\n+                    ? (\"EC .secp\" + expectedKeySize() + \"r1.\")\n+                    : keyAlgorithm;\n+        }\n+\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/compatibility\/Compatibility.java","additions":9,"deletions":2,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,1 +152,1 @@\n-            = \"This key size will be disabled in a future update.\";\n+            = \"It will be disabled in a future update.\";\n","filename":"test\/jdk\/sun\/security\/tools\/jarsigner\/warnings\/Test.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -80,1 +80,1 @@\n-                .shouldContain(\"Generating 255 bit Ed25519 key pair and self-signed certificate (Ed25519) with a validity of 90 days\")\n+                .shouldContain(\"Generating Ed25519 key pair and self-signed certificate (Ed25519) with a validity of 90 days\")\n@@ -87,1 +87,1 @@\n-                .shouldContain(\"Generating 255 bit X25519 key pair and a certificate (Ed25519) issued by <ca> with a validity of 90 days\")\n+                .shouldContain(\"Generating X25519 key pair and a certificate (Ed25519) issued by <ca> with a validity of 90 days\")\n@@ -121,1 +121,1 @@\n-                .shouldContain(\"Subject Public Key Algorithm: 255-bit X25519 key\")\n+                .shouldContain(\"Subject Public Key Algorithm: X25519 key\")\n@@ -153,1 +153,1 @@\n-                .shouldContain(\"Generating 448 bit X448 key pair and a certificate (SHA384withRSA) issued by <ca2> with a validity of 90 days\")\n+                .shouldContain(\"Generating X448 key pair and a certificate (SHA384withRSA) issued by <ca2> with a validity of 90 days\")\n@@ -180,1 +180,1 @@\n-                .shouldContain(\"Subject Public Key Algorithm: 448-bit X448 key\")\n+                .shouldContain(\"Subject Public Key Algorithm: X448 key\")\n@@ -189,1 +189,1 @@\n-                .shouldContain(\"Generating 3,072 bit DH key pair and a certificate (SHA256withDSA) issued by <ca3> with a validity of 90 days\")\n+                .shouldContain(\"Generating 3072-bit DH key pair and a certificate (SHA256withDSA) issued by <ca3> with a validity of 90 days\")\n@@ -242,1 +242,1 @@\n-                .shouldContain(\"Generating 1,024 bit DSA key pair and a certificate (SHA384withRSA) issued by <ca> with a validity of 90 days\")\n+                .shouldContain(\"Generating 1024-bit DSA key pair and a certificate (SHA384withRSA) issued by <ca> with a validity of 90 days\")\n@@ -252,1 +252,1 @@\n-                .shouldContain(\"Generating 255 bit X25519 key pair and a certificate (SHA256withDSA) issued by <ca1> with a validity of 90 days\")\n+                .shouldContain(\"Generating X25519 key pair and a certificate (SHA256withDSA) issued by <ca1> with a validity of 90 days\")\n@@ -288,1 +288,1 @@\n-                .shouldContain(\"Subject Public Key Algorithm: 255-bit X25519 key\")\n+                .shouldContain(\"Subject Public Key Algorithm: X25519 key\")\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/GenKeyPairSigner.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-                .shouldContain(\"Generating 256 bit EC (secp256r1) key pair\");\n+                .shouldContain(\"Generating 256-bit EC (secp256r1) key pair\");\n@@ -47,1 +47,1 @@\n-                .shouldContain(\"Generating 384 bit EC (secp384r1) key pair\");\n+                .shouldContain(\"Generating 384-bit EC (secp384r1) key pair\");\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/KeyAlg.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"}]}