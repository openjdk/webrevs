{"files":[{"patch":"@@ -1088,0 +1088,24 @@\n+      } else if (obj_node->is_SafePointScalarMerge()) {\n+        SafePointScalarMergeNode* smerge = obj_node->as_SafePointScalarMerge();\n+        ObjectMergeValue* mv = (ObjectMergeValue*) sv_for_node_id(objs, smerge->_idx);\n+\n+        if (mv == NULL) {\n+          GrowableArray<ScopeValue*> deps;\n+\n+          int merge_pointer_idx = smerge->merge_pointer_idx(youngest_jvms);\n+          FillLocArray(0, sfn, sfn->in(merge_pointer_idx), &deps, objs);\n+          assert(deps.length() == 1, \"missing value\");\n+\n+          int selector_idx = smerge->selector_idx(youngest_jvms);\n+          (void)FillLocArray(1, NULL, sfn->in(selector_idx), &deps, NULL);\n+          assert(deps.length() == 2, \"missing value\");\n+\n+          mv = new ObjectMergeValue(smerge->_idx, deps.at(0), deps.at(1));\n+          set_sv_for_object_node(objs, mv);\n+\n+          for (uint i = 1; i < smerge->req(); i++) {\n+            Node* obj_node = smerge->in(i);\n+            (void)FillLocArray(mv->possible_objects()->length(), sfn, obj_node, mv->possible_objects(), objs);\n+          }\n+        }\n+        scval = mv;\n","filename":"src\/hotspot\/share\/opto\/output.cpp","additions":24,"deletions":0,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/* \n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8323190\n+ * @summary C2 Segfaults during code generation because of unhandled SafePointScalarMerge monitor debug info.\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -Xcomp -XX:+ReduceAllocationMerges TestInvalidLocation\n+ *\/\n+\n+public class TestInvalidLocation {\n+    static boolean var2 = true;\n+    static double[] var4 = new double[1];\n+\n+    public static void main(String[] args) {\n+        for (int i = 0; i < 10; i++) {\n+            System.out.println(test());\n+        }\n+    }\n+\n+    static Class0 test() {\n+        double[] var14;\n+        double var3;\n+        StringBuilder var1 = new StringBuilder();\n+        Class0 var0 = Class1.Class1_sfield0;\n+        synchronized (var2 ? new StringBuilder() : var1) {\n+            var14 = var4;\n+            for (int i0 = 0; i0 < var0.Class0_field0.length && i0 < var14.length; i0 = 1) {\n+                var3 = var14[i0];\n+            }\n+        }\n+        return var0;\n+    }\n+\n+    static class Class0 {\n+        double[] Class0_field0;\n+        Class0() {\n+            Class0_field0 = new double[] { 85.42200639495138 };\n+        }\n+    }\n+\n+    class Class1 {\n+        static Class0 Class1_sfield0 = new Class0();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/escapeAnalysis\/TestInvalidLocation.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"}]}