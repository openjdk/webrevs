{"files":[{"patch":"@@ -2270,5 +2270,1 @@\n-      if (res == JNI_OK) {\n-        \/\/ Add jdk.patched system property when processing of args was OK\n-        PropertyList_unique_add(&_system_properties, \"jdk.patched\", \"true\",\n-                                AddProperty, UnwriteableProperty, ExternalProperty);\n-      } else {\n+      if (res != JNI_OK) {\n@@ -2484,0 +2480,6 @@\n+      if (match_option(option, \"-Djdk.patched=\", &value)) {\n+        \/\/ ignore any explicitly set 'jdk.patched' properties. Only\n+        \/\/ --patch-module changes the value to true. false otherwise.\n+        \/\/ See finalize_vm_init_args()\n+        continue;\n+      }\n@@ -2908,0 +2910,6 @@\n+  \/\/ Set a read-only, non-writable 'jdk.patched' JDK property if and only if\n+  \/\/ we have at least one module patch.\n+  bool jdk_patched = PropertyList_get_value(_system_properties, \"jdk.module.patch.0\") != nullptr;\n+  PropertyList_unique_add(&_system_properties, \"jdk.patched\", jdk_patched ? \"true\" : \"false\",\n+                          AddProperty, UnwriteableProperty, ExternalProperty);\n+\n","filename":"src\/hotspot\/share\/runtime\/arguments.cpp","additions":13,"deletions":5,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1,75 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Red Hat, Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import java.lang.reflect.Constructor;\n-\n-\/*\n- * @test id=unpatched\n- * @summary Test property jdk.patched for unpatched runtime\n- * @run main\/othervm ModulePatcherTest false\n- *\/\n-\n-\/*\n- * @test id=patched\n- * @summary Test property jdk.patched for patched runtime\n- * @compile --patch-module java.base=${test.src}\/patch\/java\/lang\n- *          ${test.src}\/patch\/java\/lang\/TestInteger.java ModulePatcherTest.java\n- * @run main\/othervm --patch-module=java.base=${test.classes} ModulePatcherTest true\n- *\/\n-public class ModulePatcherTest {\n-\n-    private static final String PATCHED_PROPERTY_NAME = \"jdk.patched\";\n-\n-    private final boolean expectPatched;\n-\n-    public ModulePatcherTest(boolean expectPatched) {\n-        this.expectPatched = expectPatched;\n-    }\n-\n-    public void runTest() throws Exception {\n-        boolean actual = Boolean.getBoolean(PATCHED_PROPERTY_NAME);\n-        if (expectPatched) {\n-            \/\/ Verify we find the TestInteger class from the module patch\n-            Class<?> testInt = Class.forName(\"java.lang.TestInteger\");\n-            Constructor<?> cons = testInt.getDeclaredConstructor();\n-            Object i = cons.newInstance();\n-            System.out.println(\"Found integer class from module patch: \" + i.getClass());\n-        }\n-        if (actual != expectPatched) {\n-            String msg = \"Expected \" + (expectPatched ? \"patched\" : \"unpatched\") +\n-                         \" runtime but detected \" + (actual ? \"patched\" : \"unpatched\") +\n-                         \" runtime via property \" + PATCHED_PROPERTY_NAME;\n-            throw new RuntimeException(msg);\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        if (args.length != 1) {\n-            throw new RuntimeException(\"Invalid test setup. Expected a single boolean argument\");\n-        }\n-        boolean expectPatched = Boolean.parseBoolean(args[0]);\n-        ModulePatcherTest t = new ModulePatcherTest(expectPatched);\n-        t.runTest();\n-    }\n-\n-}\n","filename":"test\/jdk\/java\/lang\/System\/patchedModule\/ModulePatcherTest.java","additions":0,"deletions":75,"binary":false,"changes":75,"status":"deleted"},{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.lang.reflect.Constructor;\n+\n+\/*\n+ * @test id=unpatched\n+ * @summary Test property jdk.patched for unpatched runtime\n+ * @run main\/othervm JdkPatchedProperty false\n+ *\/\n+\n+\/*\n+ * @test id=unpatched_override_cli\n+ * @summary Test CLI override of property jdk.patched for unpatched runtime\n+ * @run main\/othervm -Djdk.patched=true JdkPatchedProperty false\n+ *\/\n+\n+\/*\n+ * @test id=patched\n+ * @summary Test property jdk.patched for patched runtime\n+ * @compile --patch-module java.base=${test.src}\/patch\/java\/lang\n+ *          ${test.src}\/patch\/java\/lang\/TestInteger.java JdkPatchedProperty.java\n+ * @run main\/othervm --patch-module=java.base=${test.classes} JdkPatchedProperty true\n+ *\/\n+\n+\/*\n+ * @test id=patched_override_cli\n+ * @summary Test CLI override of property jdk.patched for patched runtime\n+ * @compile --patch-module java.base=${test.src}\/patch\/java\/lang\n+ *          ${test.src}\/patch\/java\/lang\/TestInteger.java JdkPatchedProperty.java\n+ * @run main\/othervm --patch-module=java.base=${test.classes} -Djdk.patched=false JdkPatchedProperty true\n+ *\/\n+public class JdkPatchedProperty {\n+\n+    private static final String PATCHED_PROPERTY_NAME = \"jdk.patched\";\n+\n+    private final boolean expectPatched;\n+\n+    public JdkPatchedProperty(boolean expectPatched) {\n+        this.expectPatched = expectPatched;\n+    }\n+\n+    public void runTest() throws Exception {\n+        boolean actual = Boolean.getBoolean(PATCHED_PROPERTY_NAME);\n+        if (expectPatched) {\n+            \/\/ Verify we find the TestInteger class from the module patch\n+            Class<?> testInt = Class.forName(\"java.lang.TestInteger\");\n+            Constructor<?> cons = testInt.getDeclaredConstructor();\n+            Object i = cons.newInstance();\n+            System.out.println(\"Found integer class from module patch: \" + i.getClass());\n+        }\n+        assertEquals(actual, expectPatched);\n+    }\n+\n+    private static void assertEquals(boolean actual, boolean expected) {\n+        if (actual != expected) {\n+            String msg = \"Expected \" + (expected ? \"patched\" : \"unpatched\") +\n+                         \" runtime but detected \" + (actual ? \"patched\" : \"unpatched\") +\n+                         \" runtime via property \" + PATCHED_PROPERTY_NAME;\n+            throw new AssertionError(msg);\n+        }\n+    }\n+\n+    public void runTestCode() throws Exception {\n+        \/\/ The System class happily lets you change JDK properties\n+        System.setProperty(PATCHED_PROPERTY_NAME, Boolean.valueOf(!expectPatched).toString());\n+        boolean actual = Boolean.getBoolean(PATCHED_PROPERTY_NAME);\n+        assertEquals(actual, !expectPatched);\n+\n+        \/\/ clear properties, which gets expected values from the VM\n+        System.setProperties(null);\n+        actual = Boolean.getBoolean(PATCHED_PROPERTY_NAME);\n+        assertEquals(actual, expectPatched);\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        if (args.length != 1) {\n+            throw new RuntimeException(\"Invalid test setup. Expected a single boolean argument\");\n+        }\n+        boolean expectPatched = Boolean.parseBoolean(args[0]);\n+        JdkPatchedProperty t = new JdkPatchedProperty(expectPatched);\n+        t.runTest();\n+        t.runTestCode();\n+    }\n+\n+}\n","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/property\/JdkPatchedProperty.java","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"","filename":"test\/jdk\/tools\/launcher\/modules\/patch\/property\/patch\/java\/lang\/TestInteger.java","additions":0,"deletions":0,"binary":false,"changes":0,"previous_filename":"test\/jdk\/java\/lang\/System\/patchedModule\/patch\/java\/lang\/TestInteger.java","status":"renamed"}]}