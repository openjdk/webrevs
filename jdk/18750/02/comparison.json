{"files":[{"patch":"@@ -34,1 +34,1 @@\n-void CardTableRS::scan_old_to_young_refs(TenuredGeneration* tg, HeapWord* saved_mark_word) {\n+void CardTableRS::scan_old_to_young_refs(TenuredGeneration* tg, HeapWord* saved_top) {\n@@ -36,1 +36,1 @@\n-  const MemRegion urasm = MemRegion(tg->space()->bottom(), saved_mark_word);\n+  const MemRegion urasm = MemRegion(tg->space()->bottom(), saved_top);\n@@ -39,1 +39,0 @@\n-         \"Did you forget to call save_marks()? \"\n","filename":"src\/hotspot\/share\/gc\/serial\/cardTableRS.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -63,1 +63,1 @@\n-  void scan_old_to_young_refs(TenuredGeneration* tg, HeapWord* saved_mark_word);\n+  void scan_old_to_young_refs(TenuredGeneration* tg, HeapWord* saved_top);\n","filename":"src\/hotspot\/share\/gc\/serial\/cardTableRS.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-#include \"gc\/serial\/defNewGeneration.inline.hpp\"\n@@ -681,3 +680,0 @@\n-  assert(heap->no_allocs_since_save_marks(),\n-         \"save marks have not been newly set.\");\n-\n@@ -691,3 +687,0 @@\n-  assert(heap->no_allocs_since_save_marks(),\n-         \"save marks have not been newly set.\");\n-\n@@ -703,0 +696,1 @@\n+    HeapWord* saved_top_in_old_gen = _old_gen->space()->top();\n@@ -709,1 +703,1 @@\n-    _old_gen->scan_old_to_young_refs();\n+    _old_gen->scan_old_to_young_refs(saved_top_in_old_gen);\n@@ -726,1 +720,0 @@\n-  assert(heap->no_allocs_since_save_marks(), \"save marks have not been newly set.\");\n@@ -733,3 +726,0 @@\n-  \/\/ Verify that the usage of keep_alive didn't copy any objects.\n-  assert(heap->no_allocs_since_save_marks(), \"save marks have not been newly set.\");\n-\n@@ -895,9 +885,0 @@\n-void DefNewGeneration::save_marks() {\n-  set_saved_mark_word();\n-}\n-\n-\n-bool DefNewGeneration::no_allocs_since_save_marks() {\n-  return saved_mark_at_top();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":2,"deletions":21,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -174,4 +174,0 @@\n-  HeapWord* saved_mark_word()   const    { return _saved_mark_word; }\n-  void set_saved_mark_word()             { _saved_mark_word = to()->top(); }\n-  bool saved_mark_at_top()               { return _saved_mark_word == _to_space->top(); }\n-\n@@ -246,11 +242,0 @@\n-  \/\/ Accessing marks\n-  void save_marks();\n-\n-  bool no_allocs_since_save_marks();\n-\n-  \/\/ Need to declare the full complement of closures, whether we'll\n-  \/\/ override them or not, or get message from the compiler:\n-  \/\/   oop_since_save_marks_iterate_nv hides virtual function...\n-  template <typename OopClosureType>\n-  void oop_since_save_marks_iterate(OopClosureType* cl);\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":0,"deletions":15,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -1,43 +0,0 @@\n-\/*\n- * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\n- *\/\n-\n-#ifndef SHARE_GC_SERIAL_DEFNEWGENERATION_INLINE_HPP\n-#define SHARE_GC_SERIAL_DEFNEWGENERATION_INLINE_HPP\n-\n-#include \"gc\/serial\/defNewGeneration.hpp\"\n-\n-#include \"gc\/serial\/cardTableRS.hpp\"\n-#include \"gc\/shared\/space.inline.hpp\"\n-#include \"oops\/access.inline.hpp\"\n-#include \"utilities\/devirtualizer.inline.hpp\"\n-\n-\/\/ Methods of protected closure types\n-\n-template <typename OopClosureType>\n-void DefNewGeneration::oop_since_save_marks_iterate(OopClosureType* cl) {\n-  Generation::oop_since_save_marks_iterate_impl(cl, to(), _saved_mark_word);\n-  set_saved_mark_word();\n-}\n-\n-#endif \/\/ SHARE_GC_SERIAL_DEFNEWGENERATION_INLINE_HPP\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.inline.hpp","additions":0,"deletions":43,"binary":false,"changes":43,"status":"deleted"},{"patch":"@@ -203,9 +203,0 @@\n-\n-  \/\/ Apply \"blk->do_oop\" to the addresses of all reference fields in objects\n-  \/\/ starting with the _saved_mark_word, which was noted during a generation's\n-  \/\/ save_marks and is required to denote the head of an object.\n-  \/\/ Fields in objects allocated by applications of the closure\n-  \/\/ *are* included in the iteration.\n-  \/\/ Updates saved_mark_word to point to just after the last object iterated over.\n-  template <typename OopClosureType>\n-  void oop_since_save_marks_iterate_impl(OopClosureType* blk, ContiguousSpace* space, HeapWord* saved_mark_word);\n@@ -214,17 +205,0 @@\n-template <typename OopClosureType>\n-void Generation::oop_since_save_marks_iterate_impl(OopClosureType* blk, ContiguousSpace* space, HeapWord* saved_mark_word) {\n-  HeapWord* t;\n-  HeapWord* p = saved_mark_word;\n-  assert(p != nullptr, \"expected saved mark\");\n-\n-  const intx interval = PrefetchScanIntervalInBytes;\n-  do {\n-    t = space->top();\n-    while (p < t) {\n-      Prefetch::write(p, interval);\n-      oop m = cast_to_oop(p);\n-      p += m->oop_iterate_size(blk);\n-    }\n-  } while (t < space->top());\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/generation.hpp","additions":0,"deletions":26,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -746,4 +746,0 @@\n-  \/\/ Set saved marks for allocation profiler (and other things? -- dld)\n-  \/\/ (Should this be in general part?)\n-  gch->save_marks();\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialFullGC.cpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-#include \"gc\/serial\/defNewGeneration.inline.hpp\"\n@@ -760,3 +759,16 @@\n-bool SerialHeap::no_allocs_since_save_marks() {\n-  return _young_gen->no_allocs_since_save_marks() &&\n-         _old_gen->no_allocs_since_save_marks();\n+template <typename OopClosureType>\n+static void oop_iterate_from(OopClosureType* blk, ContiguousSpace* space, HeapWord** from) {\n+  assert(*from != nullptr, \"precondition\");\n+  HeapWord* t;\n+  HeapWord* p = *from;\n+\n+  const intx interval = PrefetchScanIntervalInBytes;\n+  do {\n+    t = space->top();\n+    while (p < t) {\n+      Prefetch::write(p, interval);\n+      p += cast_to_oop(p)->oop_iterate_size(blk);\n+    }\n+  } while (t < space->top());\n+\n+  *from = space->top();\n@@ -767,0 +779,1 @@\n+  ContiguousSpace* to_space = young_gen()->to();\n@@ -768,3 +781,5 @@\n-    young_gen()->oop_since_save_marks_iterate(young_cl);\n-    old_gen()->oop_since_save_marks_iterate(old_cl);\n-  } while (!no_allocs_since_save_marks());\n+    oop_iterate_from(young_cl, to_space, &_young_gen_saved_top);\n+    oop_iterate_from(old_cl, old_gen()->space(), &_old_gen_saved_top);\n+    \/\/ Recheck to-space only, because postcondition of oop_iterate_from is no\n+    \/\/ unscanned objs\n+  } while (_young_gen_saved_top != to_space->top());\n@@ -937,2 +952,2 @@\n-  _young_gen->save_marks();\n-  _old_gen->save_marks();\n+  _young_gen_saved_top = _young_gen->to()->top();\n+  _old_gen_saved_top = _old_gen->space()->top();\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.cpp","additions":24,"deletions":9,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -88,1 +88,2 @@\n-\n+  HeapWord* _young_gen_saved_top;\n+  HeapWord* _old_gen_saved_top;\n@@ -282,4 +283,0 @@\n-  \/\/ Returns \"true\" iff no allocations have occurred since the last\n-  \/\/ call to \"save_marks\".\n-  bool no_allocs_since_save_marks();\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-#include \"gc\/serial\/defNewGeneration.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.inline.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -283,2 +283,2 @@\n-void TenuredGeneration::scan_old_to_young_refs() {\n-  _rs->scan_old_to_young_refs(this, saved_mark_word());\n+void TenuredGeneration::scan_old_to_young_refs(HeapWord* saved_top_in_old_gen) {\n+  _rs->scan_old_to_young_refs(this, saved_top_in_old_gen);\n@@ -507,8 +507,0 @@\n-void TenuredGeneration::save_marks() {\n-  set_saved_mark_word();\n-}\n-\n-bool TenuredGeneration::no_allocs_since_save_marks() {\n-  return saved_mark_at_top();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.cpp","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -93,2 +93,0 @@\n-  void set_saved_mark_word() { _saved_mark_word = _the_space->top(); }\n-  bool saved_mark_at_top() { return _saved_mark_word == space()->top(); }\n@@ -117,1 +115,1 @@\n-  void scan_old_to_young_refs();\n+  void scan_old_to_young_refs(HeapWord* saved_top_in_old_gen);\n@@ -141,7 +139,0 @@\n-  template <typename OopClosureType>\n-  void oop_since_save_marks_iterate(OopClosureType* cl);\n-\n-  void save_marks();\n-\n-  bool no_allocs_since_save_marks();\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.hpp","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -60,6 +60,0 @@\n-template <typename OopClosureType>\n-void TenuredGeneration::oop_since_save_marks_iterate(OopClosureType* blk) {\n-  Generation::oop_since_save_marks_iterate_impl(blk, _the_space, _saved_mark_word);\n-  set_saved_mark_word();\n-}\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/tenuredGeneration.inline.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"}]}