{"files":[{"patch":"@@ -208,3 +208,2 @@\n-        boolean canArchive = false;\n-        boolean hasSplitPackages;\n-        boolean hasIncubatorModules;\n+        boolean mayContainSplitPackages = true;\n+        boolean mayContainIncubatorModules = true;\n@@ -212,2 +211,2 @@\n-        \/\/ If the java heap was archived at CDS dump time and the environment\n-        \/\/ at dump time matches the current environment then use the archived\n+        \/\/ If the java heap was archived at CDS dump time, and the environment\n+        \/\/ at dump time matches the current environment, then use the archived\n@@ -222,2 +221,2 @@\n-            hasSplitPackages = archivedModuleGraph.hasSplitPackages();\n-            hasIncubatorModules = archivedModuleGraph.hasIncubatorModules();\n+            mayContainSplitPackages = archivedModuleGraph.hasSplitPackages();\n+            mayContainIncubatorModules = archivedModuleGraph.hasIncubatorModules();\n@@ -228,4 +227,5 @@\n-                if (systemModules != null && !isPatched) {\n-                    needResolution = (traceOutput != null);\n-                    if (CDS.isDumpingStaticArchive())\n-                        canArchive = true;\n+                if (systemModules != null && !isPatched && traceOutput == null) {\n+                    \/\/ use pre-generated configuration\n+                    needResolution = false;\n+                    mayContainSplitPackages = systemModules.hasSplitPackages();\n+                    mayContainIncubatorModules = systemModules.hasIncubatorModules();\n@@ -234,0 +234,1 @@\n+\n@@ -247,2 +248,0 @@\n-            hasSplitPackages = systemModules.hasSplitPackages();\n-            hasIncubatorModules = systemModules.hasIncubatorModules();\n@@ -436,1 +435,1 @@\n-        if (hasSplitPackages || isPatched || haveModulePath) {\n+        if (mayContainSplitPackages) {\n@@ -452,1 +451,1 @@\n-        if (hasIncubatorModules || haveModulePath) {\n+        if (mayContainIncubatorModules) {\n@@ -465,6 +464,1 @@\n-        \/\/ save module finders for later use\n-        if (savedModuleFinder != null) {\n-            unlimitedFinder = new SafeModuleFinder(savedModuleFinder);\n-            if (savedModuleFinder != finder)\n-                limitedFinder = new SafeModuleFinder(finder);\n-        }\n+        \/\/ Step 8: CDS dump phase\n@@ -472,15 +466,2 @@\n-        \/\/ If -Xshare:dump and mainModule are specified, check if the mainModule\n-        \/\/ is in the runtime image and not on the upgrade module path. If so,\n-        \/\/ set canArchive to true so that the module graph can be archived.\n-        if (CDS.isDumpingStaticArchive() && mainModule != null) {\n-            String scheme = systemModuleFinder.find(mainModule)\n-                    .stream()\n-                    .map(ModuleReference::location)\n-                    .flatMap(Optional::stream)\n-                    .findAny()\n-                    .map(URI::getScheme)\n-                    .orElse(null);\n-            if (\"jrt\".equalsIgnoreCase(scheme)) {\n-                canArchive = true;\n-            }\n-        }\n+        if (CDS.isDumpingStaticArchive() && !haveModulePath && addModules.isEmpty()) {\n+            assert !isPatched;\n@@ -488,2 +469,3 @@\n-        \/\/ Archive module graph and boot layer can be archived at CDS dump time.\n-        if (canArchive) {\n+            \/\/ Archive module graph and maybe boot layer\n+            boolean hasSplitPackages = containsSplitPackages(cf);\n+            boolean hasIncubatorModules = containsIncubatorModule(cf);\n@@ -501,0 +483,7 @@\n+        \/\/ save module finders for later use\n+        if (savedModuleFinder != null) {\n+            unlimitedFinder = new SafeModuleFinder(savedModuleFinder);\n+            if (savedModuleFinder != finder)\n+                limitedFinder = new SafeModuleFinder(finder);\n+        }\n+\n@@ -525,2 +514,12 @@\n-     * Checks for split packages between modules defined to the built-in class\n-     * loaders.\n+     * Returns true if the configuration contains modules with overlapping packages.\n+     *\/\n+    private static boolean containsSplitPackages(Configuration cf) {\n+        boolean found = cf.modules().stream()\n+                .map(m -> m.reference().descriptor().packages())\n+                .flatMap(Set::stream)\n+                .allMatch(new HashSet<>()::add);\n+        return !found;\n+    }\n+\n+    \/**\n+     * Checks for split packages between modules defined to the built-in class loaders.\n@@ -823,1 +822,3 @@\n-    private static void addEnableNativeAccess(ModuleLayer layer, Set<String> moduleNames, boolean shouldWarn) {\n+    private static void addEnableNativeAccess(ModuleLayer layer,\n+                                              Set<String> moduleNames,\n+                                              boolean shouldWarn) {\n@@ -954,0 +955,9 @@\n+    \/**\n+     * Returns true if the configuration contains an incubator module.\n+     *\/\n+    private static boolean containsIncubatorModule(Configuration cf) {\n+        return cf.modules().stream()\n+                .map(ResolvedModule::reference)\n+                .anyMatch(ModuleResolution::hasIncubatingWarning);\n+    }\n+\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":51,"deletions":41,"binary":false,"changes":92,"status":"modified"}]}