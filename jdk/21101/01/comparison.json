{"files":[{"patch":"@@ -28,1 +28,0 @@\n-import java.util.HexFormat;\n@@ -34,0 +33,1 @@\n+ * @bug 8340493\n@@ -52,0 +52,23 @@\n+    \/\/ equals() always returns true\n+    public static class Bar {\n+        private final int i;\n+        public Bar(int i) {\n+            this.i = i;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            return true;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return Integer.toString(i);\n+        }\n+    }\n+\n@@ -65,0 +88,13 @@\n+\n+        testErrorMessages();\n+    }\n+\n+    public static void testErrorMessages() throws Exception {\n+        try {\n+            Asserts.assertNotEquals(new Bar(1), new Bar(2));\n+            throw new Exception(\"Should fail\");\n+        } catch (RuntimeException e) {\n+            if (!e.getMessage().contains(\"was 2\")) {\n+                throw new Exception(\"msg is \" + e.getMessage());\n+            }\n+        }\n@@ -219,2 +255,1 @@\n-    private static void expectPass(Assertion assertion, byte[] b1, byte[] b2)\n-            throws Exception {\n+    private static void expectPass(Assertion assertion, byte[] b1, byte[] b2) {\n","filename":"test\/lib-test\/jdk\/test\/lib\/AssertsTest.java","additions":38,"deletions":3,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-     * Asserts that {@code lhs} is the same byte array as {@code rhs}.\n+     * Asserts that {@code actual} is the same byte array as {@code expected}.\n@@ -239,2 +239,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param expected The expected value\n+     * @param actual The actual value\n@@ -244,2 +244,2 @@\n-    public static void assertEqualsByteArray(byte[] lhs, byte[] rhs) {\n-        assertEqualsByteArray(lhs, rhs, null);\n+    public static void assertEqualsByteArray(byte[] expected, byte[] actual) {\n+        assertEqualsByteArray(expected, actual, null);\n@@ -249,1 +249,1 @@\n-     * Asserts that {@code lhs} is not the same byte array as {@code rhs}.\n+     * Asserts that {@code actual} is not the same byte array as {@code unexpected}.\n@@ -251,2 +251,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -256,2 +256,2 @@\n-    public static void assertNotEqualsByteArray(byte[] lhs, byte[] rhs) {\n-        assertNotEqualsByteArray(lhs, rhs, null);\n+    public static void assertNotEqualsByteArray(byte[] unexpected, byte[] actual) {\n+        assertNotEqualsByteArray(unexpected, actual, null);\n@@ -261,1 +261,1 @@\n-     * Asserts that {@code lhs} is the same byte array as {@code rhs}.\n+     * Asserts that {@code actual} is the same byte array as {@code expected}.\n@@ -263,2 +263,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param expected The expected value\n+     * @param actual The actual value\n@@ -268,2 +268,2 @@\n-    public static void assertEqualsByteArray(byte[] lhs, byte[] rhs, String msg) {\n-        if (!Arrays.equals(lhs, rhs)) {\n+    public static void assertEqualsByteArray(byte[] expected, byte[] actual, String msg) {\n+        if (!Arrays.equals(expected, actual)) {\n@@ -271,2 +271,2 @@\n-                    + \": expected \" + HexFormat.of().formatHex(lhs)\n-                    + \" to equal \" + HexFormat.of().formatHex(rhs);\n+                    + \": expected \" + HexFormat.of().formatHex(expected)\n+                    + \" but was \" + HexFormat.of().formatHex(actual);\n@@ -278,1 +278,1 @@\n-     * Asserts that {@code lhs} is not the same byte array as {@code rhs}.\n+     * Asserts that {@code actual} is not the same byte array as {@code unexpected}.\n@@ -280,2 +280,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -285,2 +285,2 @@\n-    public static void assertNotEqualsByteArray(byte[] lhs, byte[] rhs, String msg) {\n-        if (Arrays.equals(lhs, rhs)) {\n+    public static void assertNotEqualsByteArray(byte[] unexpected, byte[] actual, String msg) {\n+        if (Arrays.equals(unexpected, actual)) {\n@@ -288,2 +288,1 @@\n-                    + \": expected \" + HexFormat.of().formatHex(lhs)\n-                    + \" to not equal \" + HexFormat.of().formatHex(rhs);\n+                    + \": expected not equals but was \" + HexFormat.of().formatHex(actual);\n@@ -407,2 +406,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -411,2 +410,2 @@\n-    public static void assertNE(Object lhs, Object rhs) {\n-        assertNotEquals(lhs, rhs);\n+    public static void assertNE(Object unexpected, Object actual) {\n+        assertNotEquals(unexpected, actual);\n@@ -418,2 +417,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -423,2 +422,2 @@\n-    public static void assertNE(Object lhs, Object rhs, String msg) {\n-        assertNotEquals(lhs, rhs, msg);\n+    public static void assertNE(Object unexpected, Object actual, String msg) {\n+        assertNotEquals(unexpected, actual, msg);\n@@ -430,2 +429,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -434,2 +433,2 @@\n-    public static void assertNotEquals(Object lhs, Object rhs) {\n-        assertNotEquals(lhs, rhs, null);\n+    public static void assertNotEquals(Object unexpected, Object actual) {\n+        assertNotEquals(unexpected, actual, null);\n@@ -439,1 +438,1 @@\n-     * Asserts that {@code lhs} is not equal to {@code rhs}.\n+     * Asserts that {@code actual} is not equal to {@code unexpected}.\n@@ -441,2 +440,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -446,2 +445,2 @@\n-    public static void assertNotEquals(Object lhs, Object rhs, String msg) {\n-        if ((lhs == rhs) || (lhs != null && lhs.equals(rhs))) {\n+    public static void assertNotEquals(Object unexpected, Object actual, String msg) {\n+        if ((unexpected == actual) || (unexpected != null && unexpected.equals(actual))) {\n@@ -449,2 +448,1 @@\n-                    + \": expected \" + Objects.toString(lhs)\n-                    + \" to not equal \" + Objects.toString(rhs);\n+                    + \": expected not equals but was \" + Objects.toString(actual);\n","filename":"test\/lib\/jdk\/test\/lib\/Asserts.java","additions":41,"deletions":43,"binary":false,"changes":84,"status":"modified"}]}