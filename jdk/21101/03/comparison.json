{"files":[{"patch":"@@ -55,1 +55,1 @@\n-        Asserts.assertEqualsByteArray(prk.getEncoded(), expectedPrk,\n+        Asserts.assertEqualsByteArray(expectedPrk, prk.getEncoded(),\n@@ -58,1 +58,1 @@\n-        Asserts.assertEqualsByteArray(okm1.getEncoded(), expectedOkm,\n+        Asserts.assertEqualsByteArray(expectedOkm, okm1.getEncoded(),\n@@ -62,1 +62,1 @@\n-        Asserts.assertEqualsByteArray(okm2.getEncoded(), expectedOkm,\n+        Asserts.assertEqualsByteArray(expectedOkm, okm2.getEncoded(),\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/KDF\/HKDFBasicFunctionsTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -121,1 +121,1 @@\n-        Asserts.assertEqualsByteArray(secret, expectedSecret, \"Incorrect secret value\");\n+        Asserts.assertEqualsByteArray(expectedSecret, secret, \"Incorrect secret value\");\n@@ -144,1 +144,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/jdk\/sun\/security\/ec\/ECDHPrimitive.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -79,2 +79,2 @@\n-                Asserts.assertEqualsByteArray(pk, toByteArray(c.get(\"pk\").asString()));\n-                Asserts.assertEqualsByteArray(sk, toByteArray(c.get(\"sk\").asString()));\n+                Asserts.assertEqualsByteArray(toByteArray(c.get(\"pk\").asString()), pk);\n+                Asserts.assertEqualsByteArray(toByteArray(c.get(\"sk\").asString()), sk);\n@@ -107,1 +107,1 @@\n-                        sig, toByteArray(c.get(\"signature\").asString()));\n+                        toByteArray(c.get(\"signature\").asString()), sig);\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/ML_DSA_Test.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -73,2 +73,2 @@\n-                Asserts.assertEqualsByteArray(pk, toByteArray(c.get(\"ek\").asString()));\n-                Asserts.assertEqualsByteArray(sk, toByteArray(c.get(\"dk\").asString()));\n+                Asserts.assertEqualsByteArray(toByteArray(c.get(\"ek\").asString()), pk);\n+                Asserts.assertEqualsByteArray(toByteArray(c.get(\"dk\").asString()), sk);\n@@ -100,1 +100,1 @@\n-                            enc.encapsulation(), toByteArray(c.get(\"c\").asString()));\n+                            toByteArray(c.get(\"c\").asString()), enc.encapsulation());\n@@ -102,1 +102,1 @@\n-                            enc.key().getEncoded(), toByteArray(c.get(\"k\").asString()));\n+                            toByteArray(c.get(\"k\").asString()), enc.key().getEncoded());\n@@ -115,1 +115,1 @@\n-                    Asserts.assertEqualsByteArray(k.getEncoded(), toByteArray(c.get(\"k\").asString()));\n+                    Asserts.assertEqualsByteArray(toByteArray(c.get(\"k\").asString()), k.getEncoded());\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/ML_KEM_Test.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -49,2 +49,2 @@\n-                            Asserts.assertEqualsByteArray(md.digest(msg),\n-                                    toByteArray(c.get(\"md\").asString()));\n+                            Asserts.assertEqualsByteArray(\n+                                    toByteArray(c.get(\"md\").asString()), md.digest(msg));\n@@ -73,2 +73,2 @@\n-                                    Asserts.assertEqualsByteArray(MD,\n-                                            toByteArray(r.get(\"md\").asString()));\n+                                    Asserts.assertEqualsByteArray(\n+                                            toByteArray(r.get(\"md\").asString()), MD);\n@@ -91,2 +91,2 @@\n-                                    Asserts.assertEqualsByteArray(MD,\n-                                            toByteArray(r.get(\"md\").asString()));\n+                                    Asserts.assertEqualsByteArray(\n+                                            toByteArray(r.get(\"md\").asString()), MD);\n@@ -113,2 +113,2 @@\n-                        Asserts.assertEqualsByteArray(md.digest(),\n-                                toByteArray(c.get(\"md\").asString()));\n+                        Asserts.assertEqualsByteArray(\n+                                toByteArray(c.get(\"md\").asString()), md.digest());\n","filename":"test\/jdk\/sun\/security\/provider\/acvp\/SHA_Test.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -28,1 +28,0 @@\n-import java.util.HexFormat;\n@@ -34,0 +33,1 @@\n+ * @bug 8340493\n@@ -52,0 +52,23 @@\n+    \/\/ equals() always returns true\n+    public static class Bar {\n+        private final int i;\n+        public Bar(int i) {\n+            this.i = i;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return 0;\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            return true;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return Integer.toString(i);\n+        }\n+    }\n+\n@@ -65,0 +88,13 @@\n+\n+        testErrorMessages();\n+    }\n+\n+    public static void testErrorMessages() throws Exception {\n+        try {\n+            Asserts.assertNotEquals(new Bar(1), new Bar(2));\n+            throw new Exception(\"Should fail\");\n+        } catch (RuntimeException e) {\n+            if (!e.getMessage().contains(\"was 2\")) {\n+                throw new Exception(\"msg is \" + e.getMessage());\n+            }\n+        }\n@@ -219,2 +255,1 @@\n-    private static void expectPass(Assertion assertion, byte[] b1, byte[] b2)\n-            throws Exception {\n+    private static void expectPass(Assertion assertion, byte[] b1, byte[] b2) {\n","filename":"test\/lib-test\/jdk\/test\/lib\/AssertsTest.java","additions":38,"deletions":3,"binary":false,"changes":41,"status":"modified"},{"patch":"@@ -38,1 +38,1 @@\n-        Asserts.assertEqualsByteArray(b1, new byte[] {1, 2});\n+        Asserts.assertEqualsByteArray(new byte[] {1, 2}, b1);\n@@ -41,1 +41,1 @@\n-        Asserts.assertEqualsByteArray(b1, new byte[] {3, 4});\n+        Asserts.assertEqualsByteArray(new byte[] {3, 4}, b1);\n@@ -44,1 +44,1 @@\n-        Asserts.assertEqualsByteArray(b1, new byte[] {5, 6});\n+        Asserts.assertEqualsByteArray(new byte[] {5, 6}, b1);\n","filename":"test\/lib-test\/jdk\/test\/lib\/security\/FixedSecureRandomTest.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -237,1 +237,1 @@\n-     * Asserts that {@code lhs} is the same byte array as {@code rhs}.\n+     * Asserts that {@code actual} has the same content as {@code expected}.\n@@ -239,2 +239,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param expected The expected value\n+     * @param actual The actual value\n@@ -244,2 +244,2 @@\n-    public static void assertEqualsByteArray(byte[] lhs, byte[] rhs) {\n-        assertEqualsByteArray(lhs, rhs, null);\n+    public static void assertEqualsByteArray(byte[] expected, byte[] actual) {\n+        assertEqualsByteArray(expected, actual, null);\n@@ -249,1 +249,1 @@\n-     * Asserts that {@code lhs} is not the same byte array as {@code rhs}.\n+     * Asserts that {@code actual} does not have the same content as {@code unexpected}.\n@@ -251,2 +251,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -256,2 +256,2 @@\n-    public static void assertNotEqualsByteArray(byte[] lhs, byte[] rhs) {\n-        assertNotEqualsByteArray(lhs, rhs, null);\n+    public static void assertNotEqualsByteArray(byte[] unexpected, byte[] actual) {\n+        assertNotEqualsByteArray(unexpected, actual, null);\n@@ -261,1 +261,1 @@\n-     * Asserts that {@code lhs} is the same byte array as {@code rhs}.\n+     * Asserts that {@code actual} is the same byte array as {@code expected}.\n@@ -263,2 +263,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param expected The expected value\n+     * @param actual The actual value\n@@ -268,2 +268,2 @@\n-    public static void assertEqualsByteArray(byte[] lhs, byte[] rhs, String msg) {\n-        if (!Arrays.equals(lhs, rhs)) {\n+    public static void assertEqualsByteArray(byte[] expected, byte[] actual, String msg) {\n+        if (!Arrays.equals(expected, actual)) {\n@@ -271,2 +271,2 @@\n-                    + \": expected \" + HexFormat.of().formatHex(lhs)\n-                    + \" to equal \" + HexFormat.of().formatHex(rhs);\n+                    + \": expected \" + HexFormat.of().formatHex(expected)\n+                    + \" but was \" + HexFormat.of().formatHex(actual);\n@@ -278,1 +278,1 @@\n-     * Asserts that {@code lhs} is not the same byte array as {@code rhs}.\n+     * Asserts that {@code actual} is not the same byte array as {@code unexpected}.\n@@ -280,2 +280,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -285,2 +285,2 @@\n-    public static void assertNotEqualsByteArray(byte[] lhs, byte[] rhs, String msg) {\n-        if (Arrays.equals(lhs, rhs)) {\n+    public static void assertNotEqualsByteArray(byte[] unexpected, byte[] actual, String msg) {\n+        if (Arrays.equals(unexpected, actual)) {\n@@ -288,2 +288,1 @@\n-                    + \": expected \" + HexFormat.of().formatHex(lhs)\n-                    + \" to not equal \" + HexFormat.of().formatHex(rhs);\n+                    + \": expected not equals but was \" + HexFormat.of().formatHex(actual);\n@@ -407,2 +406,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -411,2 +410,2 @@\n-    public static void assertNE(Object lhs, Object rhs) {\n-        assertNotEquals(lhs, rhs);\n+    public static void assertNE(Object unexpected, Object actual) {\n+        assertNotEquals(unexpected, actual);\n@@ -418,2 +417,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -423,2 +422,2 @@\n-    public static void assertNE(Object lhs, Object rhs, String msg) {\n-        assertNotEquals(lhs, rhs, msg);\n+    public static void assertNE(Object unexpected, Object actual, String msg) {\n+        assertNotEquals(unexpected, actual, msg);\n@@ -430,2 +429,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -434,2 +433,2 @@\n-    public static void assertNotEquals(Object lhs, Object rhs) {\n-        assertNotEquals(lhs, rhs, null);\n+    public static void assertNotEquals(Object unexpected, Object actual) {\n+        assertNotEquals(unexpected, actual, null);\n@@ -439,1 +438,1 @@\n-     * Asserts that {@code lhs} is not equal to {@code rhs}.\n+     * Asserts that {@code actual} is not equal to {@code unexpected}.\n@@ -441,2 +440,2 @@\n-     * @param lhs The left hand side of the comparison.\n-     * @param rhs The right hand side of the comparison.\n+     * @param unexpected The unexpected value\n+     * @param actual The actual value\n@@ -446,2 +445,2 @@\n-    public static void assertNotEquals(Object lhs, Object rhs, String msg) {\n-        if ((lhs == rhs) || (lhs != null && lhs.equals(rhs))) {\n+    public static void assertNotEquals(Object unexpected, Object actual, String msg) {\n+        if ((unexpected == actual) || (unexpected != null && unexpected.equals(actual))) {\n@@ -449,2 +448,1 @@\n-                    + \": expected \" + Objects.toString(lhs)\n-                    + \" to not equal \" + Objects.toString(rhs);\n+                    + \": expected not equals but was \" + Objects.toString(actual);\n","filename":"test\/lib\/jdk\/test\/lib\/Asserts.java","additions":41,"deletions":43,"binary":false,"changes":84,"status":"modified"}]}