{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -70,0 +70,1 @@\n+import java.lang.reflect.InvocationTargetException;\n@@ -71,0 +72,1 @@\n+import java.util.ArrayList;\n@@ -72,0 +74,4 @@\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n@@ -74,0 +80,1 @@\n+import javax.swing.plaf.nimbus.NimbusLookAndFeel;\n@@ -77,9 +84,0 @@\n-\/**\n- * Font2DTest.java\n- *\n- * @author Shinsuke Fukuda\n- * @author Ankit Patel [Conversion to Swing - 01\/07\/30]\n- *\/\n-\n-\/\/\/ Main Font2DTest Class\n-\n@@ -98,0 +96,6 @@\n+    private JPanel fontMenuPanel;\n+    private JPanel stylePanel;\n+    private LabelV2 fontMenuLabel = null;\n+    private LabelV2 styleLabel = null;\n+    private ChoiceV2 fontNameMenu;\n+    private ChoiceV2 fontSubFamilyMenu;\n@@ -114,0 +118,3 @@\n+    private JRadioButtonMenuItem familyAndStyleRBMI;\n+    private JRadioButtonMenuItem familyAndSubFamilyRBMI;\n+    private JRadioButtonMenuItem fontNameRBMI;\n@@ -129,0 +136,1 @@\n+    private String currentFontName = Font.DIALOG;\n@@ -136,0 +144,1 @@\n+    private static final Locale l = Locale.getDefault();\n@@ -146,0 +155,2 @@\n+        fontNameMenu = new ChoiceV2( this, false );\n+        fontSubFamilyMenu = new ChoiceV2( this, false );\n@@ -150,0 +161,1 @@\n+        \/\/textMenu.setMinimumSize(new Dimension(160, 28));\n@@ -178,0 +190,40 @@\n+    private void addFontMenuToGBL(String labelText,\n+                                  JComponent menuContainer,\n+                                  GridBagLayout gbl,\n+                                  GridBagConstraints gbc,\n+                                  int leftInset,\n+                                  Container target) {\n+\n+        fontMenuLabel = new LabelV2(labelText);\n+        fontMenuLabel.setLabelFor(menuContainer);\n+        GridBagConstraints gbcLabel = (GridBagConstraints) gbc.clone();\n+        gbcLabel.insets = new Insets(2, leftInset, 2, 0);\n+        gbcLabel.gridwidth = 1;\n+        gbcLabel.weightx = 0;\n+        gbcLabel.anchor = GridBagConstraints.EAST;\n+        gbl.setConstraints(fontMenuLabel, gbcLabel);\n+        target.add(fontMenuLabel);\n+        gbl.setConstraints(menuContainer, gbc);\n+        target.add( menuContainer );\n+    }\n+\n+    private void addStyleMenuToGBL(String labelText,\n+                                  JComponent menuContainer,\n+                                  GridBagLayout gbl,\n+                                  GridBagConstraints gbc,\n+                                  int leftInset,\n+                                  Container target) {\n+\n+        styleLabel = new LabelV2(labelText);\n+        styleLabel.setLabelFor(menuContainer);\n+        GridBagConstraints gbcLabel = (GridBagConstraints) gbc.clone();\n+        gbcLabel.insets = new Insets(2, leftInset, 2, 0);\n+        gbcLabel.gridwidth = 1;\n+        gbcLabel.weightx = 0;\n+        gbcLabel.anchor = GridBagConstraints.EAST;\n+        gbl.setConstraints(styleLabel, gbcLabel);\n+        target.add(styleLabel);\n+        gbl.setConstraints(menuContainer, gbc);\n+        target.add(menuContainer);\n+    }\n+\n@@ -187,2 +239,10 @@\n-        addLabeledComponentToGBL( \"Font: \", fontMenu, gbl, gbc, this );\n-        addLabeledComponentToGBL( \"Size: \", sizeField, gbl, gbc, this );\n+        fontMenuPanel = new JPanel();\n+        fontMenuPanel.setLayout(new GridLayout());\n+        fontMenuPanel.add(fontMenu);\n+        addFontMenuToGBL(FAMILY_LABEL_TEXT, fontMenuPanel, gbl, gbc, 2, this );\n+\n+        stylePanel = new JPanel();\n+        stylePanel.setLayout(new GridLayout());\n+        stylePanel.add(styleMenu);\n+        addStyleMenuToGBL(STYLE_LABEL_TEXT, stylePanel, gbl, gbc, 40, this );\n+\n@@ -191,1 +251,1 @@\n-                                  transformMenu, gbl, gbc, this );\n+                                  transformMenu, gbl, gbc, 20, this );\n@@ -194,2 +254,2 @@\n-        addLabeledComponentToGBL( \"Range: \", rm, gbl, gbc, this );\n-        addLabeledComponentToGBL( \"Style: \", styleMenu, gbl, gbc, this );\n+        addLabeledComponentToGBL( \"Range: \", rm, gbl, gbc, 2, this );\n+        addLabeledComponentToGBL( \"Size: \", sizeField, gbl, gbc, 40, this );\n@@ -198,1 +258,1 @@\n-                                  transformMenuG2, gbl, gbc, this );\n+                                  transformMenuG2, gbl, gbc, 20, this );\n@@ -202,2 +262,2 @@\n-        addLabeledComponentToGBL( \"Method: \", methodsMenu, gbl, gbc, this );\n-        addLabeledComponentToGBL(\"\", null, gbl, gbc, this);\n+        addLabeledComponentToGBL( \"Method: \", methodsMenu, gbl, gbc, 2, this );\n+        addLabeledComponentToGBL(\"\", null, gbl, gbc, 40, this);\n@@ -205,0 +265,1 @@\n+\n@@ -206,1 +267,1 @@\n-        addLabeledComponentToGBL( \"Text to use:\", textMenu, gbl, gbc, this );\n+        addLabeledComponentToGBL( \"Text to use:\", textMenu, gbl, gbc, 20, this );\n@@ -208,1 +269,0 @@\n-        gbc.weightx=1;\n@@ -210,1 +270,0 @@\n-        gbc.fill = GridBagConstraints.HORIZONTAL;\n@@ -213,1 +272,1 @@\n-                                  contrastSlider, gbl, gbc, this);\n+                                  contrastSlider, gbl, gbc, 2, this);\n@@ -216,1 +275,0 @@\n-        gbc.fill = GridBagConstraints.NONE;\n@@ -218,1 +276,1 @@\n-                                  antiAliasMenu, gbl, gbc, this);\n+                                  antiAliasMenu, gbl, gbc, 40, this);\n@@ -223,1 +281,1 @@\n-                                  fracMetricsMenu, gbl, gbc, this);\n+                                  fracMetricsMenu, gbl, gbc, 20, this);\n@@ -244,0 +302,1 @@\n+                                           int leftInset,\n@@ -246,0 +305,1 @@\n+        l.setLabelFor(c);\n@@ -247,1 +307,5 @@\n-        gbcLabel.insets = new Insets( 2, 2, 2, 0 );\n+        if (gbcLabel.gridwidth == GridBagConstraints.REMAINDER) {\n+            gbcLabel.gridwidth = GridBagConstraints.RELATIVE;\n+        }\n+\n+        gbcLabel.insets = new Insets( 2, leftInset, 2, 0 );\n@@ -254,0 +318,1 @@\n+        gbcLabel.anchor = GridBagConstraints.EAST;\n@@ -280,0 +345,15 @@\n+        optionMenu.addSeparator();\n+        familyAndStyleRBMI = new JRadioButtonMenuItem(\"Select font using Family Name and Style\");\n+        familyAndStyleRBMI.addActionListener(this);\n+        familyAndSubFamilyRBMI = new JRadioButtonMenuItem(\"Select font using Family Name and SubFamily\");\n+        familyAndSubFamilyRBMI.addActionListener(this);\n+        fontNameRBMI = new JRadioButtonMenuItem(\"Select font using Full Name\");\n+        fontNameRBMI.addActionListener(this);\n+        ButtonGroup bg = new ButtonGroup();\n+        bg.add(familyAndStyleRBMI);\n+        bg.add(familyAndSubFamilyRBMI);\n+        bg.add(fontNameRBMI);\n+        familyAndStyleRBMI.setSelected(true);\n+        optionMenu.add(familyAndStyleRBMI);\n+        optionMenu.add(familyAndSubFamilyRBMI);\n+        optionMenu.add(fontNameRBMI);\n@@ -289,2 +369,5 @@\n-        String[] fontList =\n-          GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();\n+        String[] fontList = getAllFamilyNames();\n+        for (int i = 0; i < fontList.length; i++ ) {\n+            fontMenu.addItem( fontList[i] );\n+        }\n+        fontMenu.setSelectedItem(\"Dialog\");\n@@ -292,3 +375,5 @@\n-        for ( int i = 0; i < fontList.length; i++ )\n-          fontMenu.addItem( fontList[i] );\n-        fontMenu.setSelectedItem( \"Dialog\" );\n+        fontList = getAllFontNames();\n+        for (int i = 0; i < fontList.length; i++ ) {\n+           fontNameMenu.addItem( fontList[i] );\n+        }\n+        fontNameMenu.setSelectedItem(\"Dialog\");\n@@ -650,0 +735,4 @@\n+                fontSelectionType + \"\\n\" +\n+                (String)fontMenu.getSelectedItem() + \"\\n\" +\n+                (String)fontNameMenu.getSelectedItem() + \"\\n\" +\n+                (String)fontSubFamilyMenu.getSelectedItem() + \"\\n\" +\n@@ -727,0 +816,4 @@\n+            int fontSelType = Integer.parseInt( perLine.nextToken() );\n+            String fmItem = perLine.nextToken();\n+            String fnmItem = perLine.nextToken();\n+            String fsmItem = perLine.nextToken();\n@@ -759,1 +852,5 @@\n-            fontMenu.setSelectedItem( fontNameOpt );\n+            currentFontName = fontNameOpt;\n+            setFontSelectionType(fontSelType);\n+            fontMenu.setSelectedItem( fmItem );\n+            fontNameMenu.setSelectedItem( fnmItem );\n+            fontSubFamilyMenu.setSelectedItem( fsmItem );\n@@ -822,0 +919,83 @@\n+    static final int FAMILY_AND_STYLE     = 1;\n+    static final int FONT_NAME            = 2;\n+    static final int FAMILY_AND_SUBFAMILY = 3;\n+    static int fontSelectionType = FAMILY_AND_STYLE;\n+\n+    static final String FAMILY_LABEL_TEXT = \"Font Family:\";\n+    static final String NAME_LABEL_TEXT = \"Font Name:\";\n+    static final String STYLE_LABEL_TEXT = \"Style:\";\n+    static final String SUBFAMILY_LABEL_TEXT = \"Subfamily:\";\n+\n+    void setUseFamilyAndStyle() {\n+       if (fontSelectionType == FAMILY_AND_STYLE) {\n+           return;\n+       }\n+       fontMenuLabel.setText(FAMILY_LABEL_TEXT);\n+       fontMenuPanel.removeAll();\n+       fontMenuPanel.add(fontMenu);\n+       if (fontSelectionType == FAMILY_AND_SUBFAMILY) {\n+           styleLabel.setText(STYLE_LABEL_TEXT);\n+           stylePanel.removeAll();\n+           stylePanel.add(styleMenu);\n+       }\n+       fontSelectionType = FAMILY_AND_STYLE;\n+       if (!familyAndStyleRBMI.isSelected()) {\n+          familyAndStyleRBMI.setSelected(true);\n+       }\n+       revalidate();\n+    }\n+\n+    void setUseFontName() {\n+       if (fontSelectionType == FONT_NAME) {\n+           return;\n+       }\n+       fontMenuLabel.setText(NAME_LABEL_TEXT);\n+       fontMenuPanel.removeAll();\n+       fontMenuPanel.add(fontNameMenu);\n+       if (fontSelectionType == FAMILY_AND_SUBFAMILY) {\n+           styleLabel.setText(STYLE_LABEL_TEXT);\n+           stylePanel.removeAll();\n+           stylePanel.add(styleMenu);\n+       }\n+       fontSelectionType = FONT_NAME;\n+       if (!fontNameRBMI.isSelected()) {\n+          fontNameRBMI.setSelected(true);\n+       }\n+       revalidate();\n+    }\n+\n+    void setUseFamilyAndSubFamily() {\n+       if (fontSelectionType == FAMILY_AND_SUBFAMILY) {\n+           return;\n+       }\n+       fontMenuLabel.setText(FAMILY_LABEL_TEXT);\n+       fontMenuPanel.removeAll();\n+       fontMenuPanel.add(fontMenu);\n+       styleLabel.setText(SUBFAMILY_LABEL_TEXT);\n+       stylePanel.removeAll();\n+       updateSubFamilyMenu((String)fontMenu.getSelectedItem());\n+       stylePanel.add(fontSubFamilyMenu);\n+       fontSelectionType = FAMILY_AND_SUBFAMILY;\n+       if (!familyAndSubFamilyRBMI.isSelected()) {\n+          familyAndSubFamilyRBMI.setSelected(true);\n+       }\n+       revalidate();\n+    }\n+\n+    void setFontSelectionType(int fsType) {\n+         switch (fsType) {\n+             case FAMILY_AND_STYLE     :\n+                  setUseFamilyAndStyle();\n+                  \/\/fontMenu.setSelectedItem(fontName);\n+                  break;\n+             case FONT_NAME            :\n+                  setUseFontName();\n+                  \/\/fontNameMenu.setSelectedItem(fontName);\n+                  break;\n+             case FAMILY_AND_SUBFAMILY :\n+                  setUseFamilyAndSubFamily();\n+                  \/\/fontMenu.setSelectedItem(fontName);\n+                  break;\n+         }\n+    }\n+\n@@ -833,1 +1013,8 @@\n-            if ( itemName.equals( \"Save Selected Options...\" )) {\n+            if (source == familyAndStyleRBMI) {\n+               setUseFamilyAndStyle();\n+            } else if (source == familyAndSubFamilyRBMI) {\n+               setUseFamilyAndSubFamily();\n+            } else if (source == fontNameRBMI) {\n+               setUseFontName();\n+            }\n+            else if ( itemName.equals( \"Save Selected Options...\" )) {\n@@ -875,2 +1062,2 @@\n-            if ( tf == sizeField )\n-              fp.setFontParams( fontMenu.getSelectedItem(),\n+            if ( tf == sizeField ) {\n+               fp.setFontParams(currentFontName,\n@@ -880,0 +1067,1 @@\n+               }\n@@ -904,1 +1092,35 @@\n-            if ( c == fontMenu || c == styleMenu || c == transformMenu ) {\n+            if ( c == fontMenu || c == fontNameMenu || c == fontSubFamilyMenu ||\n+                 c == styleMenu || c == transformMenu )\n+            {\n+                if (c == fontNameMenu) {\n+                   currentFontName = (String)fontNameMenu.getSelectedItem();\n+                }\n+                else if ((c == fontMenu) && (fontSelectionType == FAMILY_AND_STYLE)) {\n+                   currentFontName = (String)fontMenu.getSelectedItem();\n+                }\n+                else if ((c == fontMenu) && (fontSelectionType == FAMILY_AND_SUBFAMILY)) {\n+                   String family = (String)fontMenu.getSelectedItem();\n+                   updateSubFamilyMenu(family);\n+                   String subname = (String)fontSubFamilyMenu.getSelectedItem();\n+                   Font font = FontFamily.getFont(family, subname);\n+                   if (font == null) return;\n+                   currentFontName = font.getFontName(l);\n+                }\n+                else if (c == fontSubFamilyMenu) {\n+                   \/*\n+                    * When switching families, all items are removed from the sub family list.\n+                    * This triggers a synchronous recursive ActionEvent on the EDT, which should\n+                    * be ignored here, the code removes them adds the new items and will then\n+                    *  use the new default selected item.\n+                    * If we do not return, we'll not find a match and can get an NPE.\n+                    * This feels unsatisfactory, but it works.\n+                    *\/\n+                   if (fontSubFamilyMenu.getItemCount() == 0) {\n+                       return;\n+                   }\n+                   String family = (String)fontMenu.getSelectedItem();\n+                   String subname = (String)fontSubFamilyMenu.getSelectedItem();\n+                   Font font = FontFamily.getFont(family, subname);\n+                   if (font == null) return;\n+                   currentFontName = font.getFontName(l);\n+                }\n@@ -915,1 +1137,1 @@\n-                fp.setFontParams(fontMenu.getSelectedItem(),\n+                fp.setFontParams(currentFontName,\n@@ -1011,0 +1233,166 @@\n+    static class FontFamily {\n+\n+        static Map<String, FontFamily> familyMap = new HashMap<>();\n+        private static Locale l = Locale.getDefault();\n+        private List<Font> fonts = new ArrayList<>();\n+        private List<String> subFamilyNames = new ArrayList<>();\n+        private Map<String, Font> nameToFontMap = new HashMap<>();\n+        private String familyName;\n+\n+        private FontFamily(String name) {\n+           this.familyName = name;\n+       }\n+\n+       String stripFamily(String family, String fullName) {\n+           if (family.equals(fullName)) {\n+               return \"\";\n+           }\n+           char[] familyChars = family.toCharArray();\n+           char[] fullChars = fullName.toCharArray();\n+           int familyIndex = 0;\n+           int fullIndex = 0;\n+           \/\/ there's probably a clever regexp way to do this\n+           \/\/ iterate over the chars in the family , if they are the same\n+           \/\/ keep going, if there's a '-' or ' ', skip it. In the font name,\n+           \/\/ do the same. If you reach the end of the family without some\n+           \/\/ other diff, return what's left of the fullName.\n+           while (familyIndex < familyChars.length && fullIndex < fullChars.length) {\n+           \/\/while (familyIndex < familyChars.length) {\n+              if (fullIndex == fullChars.length) {\n+                  System.err.println(\"WEIRD FONT \" + family + \" \" + fullName);\n+                  break;\n+              }\n+              if (familyChars[familyIndex] == fullChars[fullIndex]) {\n+                  familyIndex++; fullIndex++;\n+              }\n+              else if (familyChars[familyIndex] == ' ' && fullChars[fullIndex] == '-') {\n+                  familyIndex++; fullIndex++;\n+              }\n+              else if (familyChars[familyIndex] == '-' && fullChars[fullIndex] == ' ') {\n+                  familyIndex++; fullIndex++;\n+              }\n+              else if (familyChars[familyIndex] == ' ' || familyChars[familyIndex] == '-') {\n+                  familyIndex++;\n+              }\n+              else if (fullChars[fullIndex] == ' '  || fullChars[fullIndex] == '-') {\n+                  fullIndex++;\n+              } else {\n+                  break;\n+              }\n+           }\n+           if (fullIndex == fullChars.length) {\n+               return fullName;\n+           } else {\n+               return fullName.substring(fullIndex);\n+           }\n+       }\n+\n+       \/*\n+        * Getting the string to display here can be an art.\n+        * If the family is \"Arial Black\", then for a regular font, the\n+        * full name may be \"Arial Black\", or \"Arial-Black\", as reported on macOS.\n+        * For this case for the specific font might want to display the\n+        * full name, or synthesise \"Regular\". But to do that we have to\n+        * recognise that ' ' to '-' mapping.\n+        * For \"Arial Black Italic\" (Arial-Black-Italic) we want to be able to\n+        * trim so we display just \"Italic\".\n+        * Then we need to be able to map the text selection back to the\n+        * right font.\n+        *\/\n+       void add(Font f) {\n+           String fontName = f.getFontName(l);\n+           int flen = familyName.length();\n+           int nlen = fontName.length();\n+           String sfn;\n+\n+           if (fontName.equals(familyName)) {\n+               sfn = \"Regular\";\n+           }\n+           else {\n+               sfn = stripFamily(familyName, fontName);\n+               sfn = sfn.replace('-', ' ');\n+           }\n+\n+           fonts.add(f);\n+           subFamilyNames.add(sfn);\n+           nameToFontMap.put(sfn, f);\n+       }\n+\n+       String[] getSubFamilyNames() {\n+           return subFamilyNames.stream().sorted().toArray(String[]::new);\n+       }\n+\n+\n+       Font getFontForSubFamilyName(String name) {\n+           return nameToFontMap.get(name);\n+       }\n+\n+       static FontFamily getFontFamily(String name) {\n+           return familyMap.get(name);\n+       }\n+\n+       static FontFamily createFontFamily(String name) {\n+           FontFamily f = familyMap.get(name);\n+           if (f == null) {\n+               f = new FontFamily(name);\n+               familyMap.put(name, f);\n+           }\n+           return f;\n+       }\n+\n+       \/*\n+        * familyName must be a name of an existing FontFamily\n+        * name, must be a valid \"subFamilyName\" within that FontFamily\n+        * as returned by getSubFamilyNames()\n+        *\/\n+       static Font getFont(String familyName, String subFamilyName) {\n+           FontFamily family = getFontFamily(familyName);\n+           return family.getFontForSubFamilyName(subFamilyName);\n+        }\n+    }\n+\n+    static String[] familyNames;\n+    static Font[] allFonts;\n+    static List<String> allFontNames;\n+    static Map<String, FontFamily> familyMap = new HashMap<>();\n+\n+    private static void buildFontInfo() {\n+        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n+        familyNames = ge.getAvailableFontFamilyNames();\n+        allFonts = ge.getAllFonts();\n+        allFontNames = new ArrayList<String>();\n+        Locale l = Locale.getDefault();\n+        for (Font f : allFonts) {\n+           allFontNames.add(f.getFontName(l));\n+           String family = f.getFamily(l);\n+           FontFamily ff = FontFamily.getFontFamily(family);\n+           if (ff == null) {\n+              ff = FontFamily.createFontFamily(family);\n+           }\n+           ff.add(f);\n+        }\n+    }\n+\n+    String getFontNameFor(String family, String subFamily) {\n+         return family + \" \" + subFamily;\n+    }\n+\n+    void updateSubFamilyMenu(String name) {\n+         FontFamily family = FontFamily.getFontFamily(name);\n+         fontSubFamilyMenu.removeAllItems();\n+\n+         String [] sfNames = family.getSubFamilyNames();\n+         for (int i=0; i<sfNames.length; i++) {\n+             fontSubFamilyMenu.addItem(sfNames[i]);\n+         }\n+         fontSubFamilyMenu.setSelectedIndex(0); \/\/ better be at least one !\n+    }\n+\n+    static String[] getAllFontNames() {\n+        return allFontNames.stream().sorted().toArray(String[]::new);\n+    }\n+\n+   static String[] getAllFamilyNames() {\n+       return familyNames;\n+   }\n+\n@@ -1014,2 +1402,2 @@\n-        if(argv.length > 0) {\n-            if(argv[0].equalsIgnoreCase(\"-disablecandisplaycheck\") ||\n+        if (argv.length > 0) {\n+            if (argv[0].equalsIgnoreCase(\"-disablecandisplaycheck\") ||\n@@ -1024,11 +1412,17 @@\n-        UIManager.put(\"swing.boldMetal\", Boolean.FALSE);\n-        final JFrame f = new JFrame( \"Font2DTest\" );\n-        final Font2DTest f2dt = new Font2DTest( f);\n-        f.addWindowListener( new WindowAdapter() {\n-            public void windowOpening( WindowEvent e ) { f2dt.repaint(); }\n-            public void windowClosing( WindowEvent e ) { System.exit(0); }\n-        });\n-\n-        f.getContentPane().add( f2dt );\n-        f.pack();\n-        f.setVisible(true);\n+        buildFontInfo();\n+        try {\n+           UIManager.setLookAndFeel(new NimbusLookAndFeel());\n+            SwingUtilities.invokeAndWait(() -> {\n+                final JFrame f = new JFrame( \"Font2DTest\" );\n+                final Font2DTest f2dt = new Font2DTest( f);\n+                f.addWindowListener( new WindowAdapter() {\n+                    public void windowOpening( WindowEvent e ) { f2dt.repaint(); }\n+                    public void windowClosing( WindowEvent e ) { System.exit(0); }\n+                });\n+\n+                f.getContentPane().add( f2dt );\n+                f.pack();\n+                f.setVisible(true);\n+            });\n+        } catch (UnsupportedLookAndFeelException|InterruptedException|InvocationTargetException e) {\n+        }\n","filename":"src\/demo\/share\/jfc\/Font2DTest\/Font2DTest.java","additions":444,"deletions":50,"binary":false,"changes":494,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -743,1 +743,2 @@\n-              verticalBar.setEnabled( false );\n+              \/\/ the disabled scroll bar looks odd with Nimbus L&F.\n+              verticalBar.setEnabled( true );\n","filename":"src\/demo\/share\/jfc\/Font2DTest\/FontPanel.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}