{"files":[{"patch":"@@ -138,1 +138,1 @@\n-    __ movptr(tmp, addr->disp());\n+    __ movptr(tmp, (address)addr->disp());\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -45,4 +45,4 @@\n-  } else if (inst->is_movptr()) {\n-    return pc_offset + NativeMovConstReg::movptr_instruction_size;\n-  } else if (inst->is_li48()) {\n-    return pc_offset + NativeMovConstReg::li48_instruction_size;\n+  } else if (inst->is_movptr1()) {\n+    return pc_offset + NativeMovConstReg::movptr1_instruction_size;\n+  } else if (inst->is_movptr2()) {\n+    return pc_offset + NativeMovConstReg::movptr2_instruction_size;\n","filename":"src\/hotspot\/cpu\/riscv\/jvmciCodeInstaller_riscv.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -643,1 +643,1 @@\n-  li48(t0, t1, 0, offset); \/\/ lui + lui + ssli + add\n+  movptr(t0, 0, offset, t1); \/\/ lui + lui + ssli + add\n@@ -780,38 +780,0 @@\n-void MacroAssembler::li48(Register Rd, Register tmp, address addr, int32_t &offset) {\n-  assert_different_registers(Rd, tmp, noreg);\n-  li48_imp(Rd, tmp, (uintptr_t)addr, offset);\n-}\n-\n-void MacroAssembler::li48(Register Rd, Register tmp, address addr) {\n-  assert_different_registers(Rd, tmp, noreg);\n-  int offset = 0;\n-  li48_imp(Rd, tmp, (uintptr_t)addr, offset);\n-  addi(Rd, Rd, offset);\n-}\n-\n-void MacroAssembler::li48_imp(Register Rd, Register tmp, uintptr_t addr, int32_t &offset) {\n-  assert_different_registers(Rd, tmp, noreg);\n-  assert(addr < (1ull << 48), \"48-bit overflow in address constant\");\n-  unsigned int upper18 = (addr >> 30ull);\n-  int lower30 = (addr & 0x3fffffffu);\n-  int low12 = (lower30 << 20) >> 20;\n-  int mid18 = ((lower30 - low12) >> 12);\n-\n-#ifndef PRODUCT\n-  {\n-    char buffer[64];\n-    snprintf(buffer, sizeof(buffer), \"li48: 0x%\" PRIx64, addr);\n-    block_comment(buffer);\n-  }\n-#endif\n-\n-  lui(tmp, upper18 << 12);\n-  lui(Rd, mid18 << 12);\n-\n-  slli(tmp, tmp, 18);\n-  add(Rd, Rd, tmp);\n-\n-  offset = low12;\n-\n-}\n-\n@@ -1453,1 +1415,1 @@\n-static int patch_addr_in_movptr(address branch, address target) {\n+static int patch_addr_in_movptr1(address branch, address target) {\n@@ -1464,1 +1426,1 @@\n-static int patch_addr_in_li48(address instruction_address, address target) {\n+static int patch_addr_in_movptr2(address instruction_address, address target) {\n@@ -1564,1 +1526,1 @@\n-static address get_target_of_li48(address insn_addr) {\n+static address get_target_of_movptr2(address insn_addr) {\n@@ -1603,4 +1565,4 @@\n-  } else if (NativeInstruction::is_movptr_at(instruction_address)) {               \/\/ movptr\n-    return patch_addr_in_movptr(instruction_address, target);\n-  } else if (NativeInstruction::is_li48_at(instruction_address)) {                 \/\/ li48\n-    return patch_addr_in_li48(instruction_address, target);\n+  } else if (NativeInstruction::is_movptr1_at(instruction_address)) {              \/\/ movptr\n+    return patch_addr_in_movptr1(instruction_address, target);\n+  } else if (NativeInstruction::is_movptr2_at(instruction_address)) {              \/\/ movptr2\n+    return patch_addr_in_movptr2(instruction_address, target);\n@@ -1635,1 +1597,1 @@\n-  } else if (NativeInstruction::is_movptr_at(insn_addr)) {           \/\/ movptr\n+  } else if (NativeInstruction::is_movptr1_at(insn_addr)) {          \/\/ movptr\n@@ -1641,2 +1603,2 @@\n-  } else if (NativeInstruction::is_li48_at(insn_addr)) {             \/\/ li48\n-    return get_target_of_li48(insn_addr);\n+  } else if (NativeInstruction::is_movptr2_at(insn_addr)) {          \/\/ movptr2\n+    return get_target_of_movptr2(insn_addr);\n@@ -1657,1 +1619,4 @@\n-  } else if (NativeInstruction::is_movptr_at(insn_addr)) {\n+  } else if (NativeInstruction::is_movptr1_at(insn_addr)) {\n+    \/\/ Move wide OOP\n+    return patch_addr_in_movptr1(insn_addr, o);\n+  } else if (NativeInstruction::is_movptr2_at(insn_addr)) {\n@@ -1659,1 +1624,1 @@\n-    return patch_addr_in_movptr(insn_addr, o);\n+    return patch_addr_in_movptr2(insn_addr, o);\n@@ -1680,2 +1645,8 @@\n-void MacroAssembler::movptr(Register Rd, address addr, int32_t &offset) {\n-  int64_t imm64 = (int64_t)addr;\n+void MacroAssembler::movptr(Register Rd, address addr, Register temp) {\n+  int offset = 0;\n+  movptr(Rd, addr, offset, temp);\n+  addi(Rd, Rd, offset);\n+}\n+\n+void MacroAssembler::movptr(Register Rd, address addr, int32_t &offset, Register temp) {\n+  uint64_t uimm64 = (uint64_t)addr;\n@@ -1685,1 +1656,1 @@\n-    snprintf(buffer, sizeof(buffer), \"0x%\" PRIx64, imm64);\n+    snprintf(buffer, sizeof(buffer), \"0x%\" PRIx64, uimm64);\n@@ -1689,1 +1660,10 @@\n-  assert((uintptr_t)imm64 < (1ull << 48), \"48-bit overflow in address constant\");\n+  assert(uimm64 < (1ull << 48), \"48-bit overflow in address constant\");\n+\n+  if (temp == noreg) {\n+    movptr_1(Rd, uimm64, offset);\n+  } else {\n+    movptr_2(Rd, uimm64, offset, temp);\n+  }\n+}\n+\n+void MacroAssembler::movptr_1(Register Rd, uint64_t imm64, int32_t &offset) {\n@@ -1708,0 +1688,17 @@\n+void MacroAssembler::movptr_2(Register Rd, uint64_t addr, int32_t &offset, Register tmp) {\n+  assert_different_registers(Rd, tmp, noreg);\n+\n+  uint32_t upper18 = (addr >> 30ull);\n+  int32_t  lower30 = (addr & 0x3fffffffu);\n+  int32_t  low12   = (lower30 << 20) >> 20;\n+  int32_t  mid18   = ((lower30 - low12) >> 12);\n+\n+  lui(tmp, upper18 << 12);\n+  lui(Rd, mid18 << 12);\n+\n+  slli(tmp, tmp, 18);\n+  add(Rd, Rd, tmp);\n+\n+  offset = low12;\n+}\n+\n@@ -3621,1 +3618,1 @@\n-  li48(t1, t0, (address)Universe::non_oop_word());\n+  movptr(t1, (address)Universe::non_oop_word(), t0);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":53,"deletions":56,"binary":false,"changes":109,"status":"modified"},{"patch":"@@ -749,6 +749,0 @@\n-  void li48(Register Rd, Register tmp, address addr, int32_t &offset);\n-  void li48(Register Rd, Register tmp, address addr);\n- private:\n-  void li48_imp(Register Rd, Register tmp, uintptr_t addr, int32_t &offset);\n- public:\n-\n@@ -780,11 +774,10 @@\n-  void movptr(Register Rd, address addr, int32_t &offset);\n-\n-  void movptr(Register Rd, address addr) {\n-    int offset = 0;\n-    movptr(Rd, addr, offset);\n-    addi(Rd, Rd, offset);\n-  }\n-\n-  inline void movptr(Register Rd, uintptr_t imm64) {\n-    movptr(Rd, (address)imm64);\n-  }\n+  \/\/ Generates a load of a 48-bit constant which can be\n+  \/\/ patched to any 48-bit constant, i.e. address.\n+  \/\/ If common case supply additional temp register\n+  \/\/ to shorten the instruction sequence.\n+  void movptr(Register Rd, address addr, Register tmp = noreg);\n+  void movptr(Register Rd, address addr, int32_t &offset, Register tmp = noreg);\n+ private:\n+  void movptr_1(Register Rd, uintptr_t addr, int32_t &offset);\n+  void movptr_2(Register Rd, uintptr_t addr, int32_t &offset, Register tmp);\n+ public:\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":10,"deletions":17,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -87,1 +87,1 @@\n-bool NativeInstruction::is_movptr_at(address instr) {\n+bool NativeInstruction::is_movptr1_at(address instr) {\n@@ -99,1 +99,1 @@\n-bool NativeInstruction::is_li48_at(address instr) {\n+bool NativeInstruction::is_movptr2_at(address instr) {\n@@ -107,1 +107,1 @@\n-         check_li48_data_dependency(instr);\n+         check_movptr2_data_dependency(instr);\n@@ -216,1 +216,1 @@\n-  if (ni->is_movptr() || ni->is_auipc() || ni->is_li48()) {\n+  if (ni->is_movptr() || ni->is_auipc()) {\n@@ -219,1 +219,1 @@\n-  fatal(\"should be MOVPTR or AUIPC ot LI48\");\n+  fatal(\"should be MOVPTR or AUIPC\");\n@@ -238,1 +238,1 @@\n-    ICache::invalidate_range(instruction_address(), movptr_instruction_size \/* > li48_instruction_size *\/ );\n+    ICache::invalidate_range(instruction_address(), movptr1_instruction_size \/* > movptr2_instruction_size *\/ );\n@@ -416,1 +416,1 @@\n-  a.li48(t0, t1, entry, offset); \/\/ lui, addi, slli, addi, slli\n+  a.movptr(t0, entry, offset, t1); \/\/ lui, addi, slli, addi, slli\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -67,1 +67,4 @@\n-  bool is_movptr()                          const { return is_movptr_at(addr_at(0));      }\n+  bool is_movptr()                          const { return is_movptr1_at(addr_at(0)) ||\n+                                                           is_movptr2_at(addr_at(0));     }\n+  bool is_movptr1()                         const { return is_movptr1_at(addr_at(0));     }\n+  bool is_movptr2()                         const { return is_movptr2_at(addr_at(0));     }\n@@ -69,1 +72,0 @@\n-  bool is_li48()                            const { return is_li48_at(addr_at(0));        }\n@@ -133,1 +135,1 @@\n-  \/\/ the instruction sequence of li48 is as below:\n+  \/\/ the instruction sequence of movptr2 is as below:\n@@ -139,1 +141,1 @@\n-  static bool check_li48_data_dependency(address instr) {\n+  static bool check_movptr2_data_dependency(address instr) {\n@@ -230,2 +232,2 @@\n-  static bool is_movptr_at(address instr);\n-  static bool is_li48_at(address instr);\n+  static bool is_movptr1_at(address instr);\n+  static bool is_movptr2_at(address instr);\n@@ -378,5 +380,3 @@\n-    movptr_instruction_size             =    6 * NativeInstruction::instruction_size, \/\/ lui, addi, slli, addi, slli, addi.  See movptr().\n-    li48_instruction_size               =    5 * NativeInstruction::instruction_size, \/\/ lui, lui, slli, add, addi.  See li48_imp().\n-    load_pc_relative_instruction_size   =    2 * NativeInstruction::instruction_size, \/\/ auipc, ld\n-    instruction_offset                  =    0,\n-    displacement_offset                 =    0\n+    movptr1_instruction_size            =    6 * NativeInstruction::instruction_size, \/\/ lui, addi, slli, addi, slli, addi.  See movptr().\n+    movptr2_instruction_size            =    5 * NativeInstruction::instruction_size, \/\/ lui, lui, slli, add, addi.  See movptr2_imp().\n+    load_pc_relative_instruction_size   =    2 * NativeInstruction::instruction_size  \/\/ auipc, ld\n@@ -385,1 +385,1 @@\n-  address instruction_address() const       { return addr_at(instruction_offset); }\n+  address instruction_address() const       { return addr_at(0); }\n@@ -392,2 +392,2 @@\n-    if (nativeInstruction_at(instruction_address())->is_movptr()) {\n-      if (is_addi_at(addr_at(movptr_instruction_size - NativeInstruction::instruction_size))) {\n+    if (is_movptr1_at(instruction_address())) {\n+      if (is_addi_at(addr_at(movptr1_instruction_size - NativeInstruction::instruction_size))) {\n@@ -395,1 +395,1 @@\n-        return addr_at(movptr_instruction_size);\n+        return addr_at(movptr1_instruction_size);\n@@ -398,1 +398,1 @@\n-        return addr_at(movptr_instruction_size - NativeInstruction::instruction_size);\n+        return addr_at(movptr1_instruction_size - NativeInstruction::instruction_size);\n@@ -403,2 +403,2 @@\n-    } else if (nativeInstruction_at(instruction_address())->is_li48()) {\n-      if (is_addi_at(addr_at(li48_instruction_size - NativeInstruction::instruction_size))) {\n+    } else if (is_movptr2_at(instruction_address())) {\n+      if (is_addi_at(addr_at(movptr2_instruction_size - NativeInstruction::instruction_size))) {\n@@ -406,1 +406,1 @@\n-        return addr_at(li48_instruction_size);\n+        return addr_at(movptr2_instruction_size);\n@@ -409,1 +409,1 @@\n-        return addr_at(li48_instruction_size - NativeInstruction::instruction_size);\n+        return addr_at(movptr2_instruction_size - NativeInstruction::instruction_size);\n@@ -421,1 +421,1 @@\n-      ICache::invalidate_range(instruction_address(), movptr_instruction_size \/* > li48_instruction_size *\/);\n+      ICache::invalidate_range(instruction_address(), movptr1_instruction_size \/* > movptr2_instruction_size *\/);\n@@ -435,1 +435,1 @@\n-  NativeMovConstReg* test = (NativeMovConstReg*)(addr - NativeMovConstReg::instruction_offset);\n+  NativeMovConstReg* test = (NativeMovConstReg*)(addr);\n@@ -442,1 +442,1 @@\n-  NativeMovConstReg* test = (NativeMovConstReg*)(addr - NativeMovConstReg::instruction_size - NativeMovConstReg::instruction_offset);\n+  NativeMovConstReg* test = (NativeMovConstReg*)(addr - NativeMovConstReg::instruction_size);\n","filename":"src\/hotspot\/cpu\/riscv\/nativeInst_riscv.hpp","additions":23,"deletions":23,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -1247,1 +1247,1 @@\n-  return NativeMovConstReg::li48_instruction_size +  NativeInstruction::instruction_size; \/\/ li48, jal\n+  return NativeMovConstReg::movptr2_instruction_size +  NativeInstruction::instruction_size; \/\/ movptr2, jal\n@@ -1288,1 +1288,1 @@\n-  \/\/ skip the movptr in MacroAssembler::ic_call():\n+  \/\/ skip the movptr2 in MacroAssembler::ic_call():\n@@ -1292,1 +1292,1 @@\n-  current_offset += NativeMovConstReg::li48_instruction_size;\n+  current_offset += NativeMovConstReg::movptr2_instruction_size;\n","filename":"src\/hotspot\/cpu\/riscv\/riscv.ad","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -226,1 +226,1 @@\n-  __ movptr(c_rarg1, (intptr_t) receiver);\n+  __ movptr(c_rarg1, (address) receiver);\n","filename":"src\/hotspot\/cpu\/riscv\/upcallLinker_riscv.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}