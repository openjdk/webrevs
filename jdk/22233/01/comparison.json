{"files":[{"patch":"@@ -33,2 +33,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessController;\n@@ -39,2 +37,0 @@\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedExceptionAction;\n@@ -79,4 +75,0 @@\n-    \/* The context to be used when loading classes and resources *\/\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc;\n-\n@@ -97,1 +89,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -100,9 +91,1 @@\n-        this.acc = AccessController.getContext();\n-        this.ucp = new URLClassPath(urls, acc);\n-    }\n-\n-    URLClassLoader(String name, URL[] urls, ClassLoader parent,\n-                   @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        super(name, parent);\n-        this.acc = acc;\n-        this.ucp = new URLClassPath(urls, acc);\n+        this.ucp = new URLClassPath(urls);\n@@ -125,1 +108,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -128,8 +110,1 @@\n-        this.acc = AccessController.getContext();\n-        this.ucp = new URLClassPath(urls, acc);\n-    }\n-\n-    URLClassLoader(URL[] urls, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        super();\n-        this.acc = acc;\n-        this.ucp = new URLClassPath(urls, acc);\n+        this.ucp = new URLClassPath(urls);\n@@ -152,1 +127,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -156,2 +130,1 @@\n-        this.acc = AccessController.getContext();\n-        this.ucp = new URLClassPath(urls, factory, acc);\n+        this.ucp = new URLClassPath(urls, factory);\n@@ -179,1 +152,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -184,2 +156,1 @@\n-        this.acc = AccessController.getContext();\n-        this.ucp = new URLClassPath(urls, acc);\n+        this.ucp = new URLClassPath(urls);\n@@ -206,1 +177,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -210,2 +180,1 @@\n-        this.acc = AccessController.getContext();\n-        this.ucp = new URLClassPath(urls, factory, acc);\n+        this.ucp = new URLClassPath(urls, factory);\n@@ -302,5 +271,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkPermission(new RuntimePermission(\"closeClassLoader\"));\n-        }\n@@ -372,1 +336,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -376,28 +339,13 @@\n-        final Class<?> result;\n-        try {\n-            result = AccessController.doPrivileged(\n-                new PrivilegedExceptionAction<>() {\n-                    public Class<?> run() throws ClassNotFoundException {\n-                        String path = name.replace('.', '\/').concat(\".class\");\n-                        Resource res = ucp.getResource(path, false);\n-                        if (res != null) {\n-                            try {\n-                                return defineClass(name, res);\n-                            } catch (IOException e) {\n-                                throw new ClassNotFoundException(name, e);\n-                            } catch (ClassFormatError e2) {\n-                                if (res.getDataError() != null) {\n-                                    e2.addSuppressed(res.getDataError());\n-                                }\n-                                throw e2;\n-                            }\n-                        } else {\n-                            return null;\n-                        }\n-                    }\n-                }, acc);\n-        } catch (java.security.PrivilegedActionException pae) {\n-            throw (ClassNotFoundException) pae.getException();\n-        }\n-        if (result == null) {\n-            throw new ClassNotFoundException(name);\n+        String path = name.replace('.', '\/').concat(\".class\");\n+        Resource res = ucp.getResource(path);\n+        if (res != null) {\n+            try {\n+                return defineClass(name, res);\n+            } catch (IOException e) {\n+                throw new ClassNotFoundException(name, e);\n+            } catch (ClassFormatError e2) {\n+                if (res.getDataError() != null) {\n+                    e2.addSuppressed(res.getDataError());\n+                }\n+                throw e2;\n+            }\n@@ -405,1 +353,1 @@\n-        return result;\n+        throw new ClassNotFoundException(name);\n@@ -578,12 +526,1 @@\n-        \/*\n-         * The same restriction to finding classes applies to resources\n-         *\/\n-        @SuppressWarnings(\"removal\")\n-        URL url = AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public URL run() {\n-                    return ucp.findResource(name, true);\n-                }\n-            }, acc);\n-\n-        return url != null ? URLClassPath.checkURL(url) : null;\n+        return ucp.findResource(name);\n@@ -601,0 +538,1 @@\n+    @Override\n@@ -604,1 +542,1 @@\n-        final Enumeration<URL> e = ucp.findResources(name, true);\n+        final Enumeration<URL> e = ucp.findResources(name);\n@@ -613,14 +551,4 @@\n-                do {\n-                    @SuppressWarnings(\"removal\")\n-                    URL u = AccessController.doPrivileged(\n-                        new PrivilegedAction<>() {\n-                            public URL run() {\n-                                if (!e.hasMoreElements())\n-                                    return null;\n-                                return e.nextElement();\n-                            }\n-                        }, acc);\n-                    if (u == null)\n-                        break;\n-                    url = URLClassPath.checkURL(u);\n-                } while (url == null);\n+                if (!e.hasMoreElements()) {\n+                    return false;\n+                }\n+                url = e.nextElement();\n@@ -630,0 +558,1 @@\n+            @Override\n@@ -639,0 +568,1 @@\n+            @Override\n@@ -669,1 +599,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -715,1 +644,1 @@\n-                                         SecurityConstants.SOCKET_CONNECT_ACCEPT_ACTION);\n+                        SecurityConstants.SOCKET_CONNECT_ACCEPT_ACTION);\n@@ -722,10 +651,0 @@\n-            final SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                final Permission fp = p;\n-                AccessController.doPrivileged(new PrivilegedAction<>() {\n-                    public Void run() throws SecurityException {\n-                        sm.checkPermission(fp);\n-                        return null;\n-                    }\n-                }, acc);\n-            }\n@@ -749,12 +668,1 @@\n-        \/\/ Save the caller's context\n-        @SuppressWarnings(\"removal\")\n-        final AccessControlContext acc = AccessController.getContext();\n-        \/\/ Need a privileged block to create the class loader\n-        @SuppressWarnings(\"removal\")\n-        URLClassLoader ucl = AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public URLClassLoader run() {\n-                    return new FactoryURLClassLoader(null, urls, parent, acc);\n-                }\n-            });\n-        return ucl;\n+        return new URLClassLoader(null, urls, parent);\n@@ -773,12 +681,1 @@\n-        \/\/ Save the caller's context\n-        @SuppressWarnings(\"removal\")\n-        final AccessControlContext acc = AccessController.getContext();\n-        \/\/ Need a privileged block to create the class loader\n-        @SuppressWarnings(\"removal\")\n-        URLClassLoader ucl = AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public URLClassLoader run() {\n-                    return new FactoryURLClassLoader(urls, acc);\n-                }\n-            });\n-        return ucl;\n+        return new URLClassLoader(urls);\n@@ -791,32 +688,0 @@\n-\n-final class FactoryURLClassLoader extends URLClassLoader {\n-\n-    static {\n-        ClassLoader.registerAsParallelCapable();\n-    }\n-\n-    FactoryURLClassLoader(String name, URL[] urls, ClassLoader parent,\n-                          @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        super(name, urls, parent, acc);\n-    }\n-\n-    FactoryURLClassLoader(URL[] urls, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        super(urls, acc);\n-    }\n-\n-    public final Class<?> loadClass(String name, boolean resolve)\n-        throws ClassNotFoundException\n-    {\n-        \/\/ First check if we have permission to access the package. This\n-        \/\/ should go away once we've added support for exported packages.\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager sm = System.getSecurityManager();\n-        if (sm != null) {\n-            int i = name.lastIndexOf('.');\n-            if (i != -1) {\n-                sm.checkPackageAccess(name.substring(0, i));\n-            }\n-        }\n-        return super.loadClass(name, resolve);\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLClassLoader.java","additions":31,"deletions":166,"binary":false,"changes":197,"status":"modified"},{"patch":"@@ -318,1 +318,1 @@\n-                    url = findResource(module.name(), name); \/\/ checks URL\n+                    url = findResource(module.name(), name);\n@@ -358,1 +358,1 @@\n-        List<URL> checked = new ArrayList<>();  \/\/ list of checked URLs\n+        List<URL> resources = new ArrayList<>();  \/\/ list of resource URLs\n@@ -366,1 +366,1 @@\n-                URL url = findResource(module.name(), name); \/\/ checks URL\n+                URL url = findResource(module.name(), name);\n@@ -371,1 +371,1 @@\n-                    checked.add(url);\n+                    resources.add(url);\n@@ -379,1 +379,1 @@\n-                    checked.add(url);\n+                    resources.add(url);\n@@ -384,1 +384,1 @@\n-        \/\/ class path (not checked)\n+        \/\/ class path\n@@ -387,1 +387,1 @@\n-        \/\/ concat the checked URLs and the (not checked) class path\n+        \/\/ concat the resources from the modules and the class path\n@@ -389,1 +389,1 @@\n-            final Iterator<URL> iterator = checked.iterator();\n+            final Iterator<URL> iterator = resources.iterator();\n@@ -398,1 +398,0 @@\n-                    \/\/ need to check each URL\n@@ -488,1 +487,1 @@\n-            return ucp.findResource(name, false);\n+            return ucp.findResource(name);\n@@ -500,1 +499,1 @@\n-            return ucp.findResources(name, false);\n+            return ucp.findResources(name);\n@@ -689,1 +688,1 @@\n-        Resource res = ucp.getResource(path, false);\n+        Resource res = ucp.getResource(path);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/BuiltinClassLoader.java","additions":11,"deletions":12,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -42,3 +42,0 @@\n-import java.security.AccessControlContext;\n-import java.security.AccessControlException;\n-import java.security.AccessController;\n@@ -46,3 +43,0 @@\n-import java.security.Permission;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -73,1 +67,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -86,1 +79,0 @@\n-    private static final boolean DISABLE_ACC_CHECKING;\n@@ -91,1 +83,1 @@\n-        Properties props = GetPropertyAction.privilegedGetProperties();\n+        Properties props = System.getProperties();\n@@ -97,3 +89,0 @@\n-        p = props.getProperty(\"jdk.net.URLClassPath.disableRestrictedPermissions\");\n-        DISABLE_ACC_CHECKING = p != null ? p.equals(\"true\") || p.isEmpty() : false;\n-\n@@ -128,6 +117,0 @@\n-    \/* The context to be used when loading classes and resources.  If non-null\n-     * this is the context that was captured during the creation of the\n-     * URLClassLoader. null implies no additional security restrictions. *\/\n-    @SuppressWarnings(\"removal\")\n-    private final AccessControlContext acc;\n-\n@@ -143,2 +126,0 @@\n-     * @param acc the context to be used when loading classes and resources, may\n-     *            be null\n@@ -147,2 +128,1 @@\n-                        URLStreamHandlerFactory factory,\n-                        @SuppressWarnings(\"removal\") AccessControlContext acc) {\n+                        URLStreamHandlerFactory factory) {\n@@ -163,4 +143,0 @@\n-        if (DISABLE_ACC_CHECKING)\n-            this.acc = null;\n-        else\n-            this.acc = acc;\n@@ -169,2 +145,2 @@\n-    public URLClassPath(URL[] urls, @SuppressWarnings(\"removal\") AccessControlContext acc) {\n-        this(urls, null, acc);\n+    public URLClassPath(URL[] urls) {\n+        this(urls, null);\n@@ -212,1 +188,0 @@\n-        this.acc = null;\n@@ -282,1 +257,1 @@\n-     * or null if not found or security check fails.\n+     * or null if not found.\n@@ -285,1 +260,0 @@\n-     * @param check     whether to perform a security check\n@@ -289,1 +263,1 @@\n-    public URL findResource(String name, boolean check) {\n+    public URL findResource(String name) {\n@@ -292,1 +266,1 @@\n-            URL url = loader.findResource(name, check);\n+            URL url = loader.findResource(name);\n@@ -300,23 +274,0 @@\n-    \/**\n-     * Finds the first Resource on the URL search path which has the specified\n-     * name. Returns null if no Resource could be found.\n-     *\n-     * @param name the name of the Resource\n-     * @param check     whether to perform a security check\n-     * @return the Resource, or null if not found\n-     *\/\n-    public Resource getResource(String name, boolean check) {\n-        if (DEBUG) {\n-            System.err.println(\"URLClassPath.getResource(\\\"\" + name + \"\\\")\");\n-        }\n-\n-        Loader loader;\n-        for (int i = 0; (loader = getLoader(i)) != null; i++) {\n-            Resource res = loader.getResource(name, check);\n-            if (res != null) {\n-                return res;\n-            }\n-        }\n-        return null;\n-    }\n-\n@@ -330,2 +281,1 @@\n-    public Enumeration<URL> findResources(final String name,\n-                                     final boolean check) {\n+    public Enumeration<URL> findResources(final String name) {\n@@ -342,1 +292,1 @@\n-                        url = loader.findResource(name, check);\n+                        url = loader.findResource(name);\n@@ -366,0 +316,7 @@\n+    \/**\n+     * Finds the first Resource on the URL search path which has the specified\n+     * name. Returns null if no Resource could be found.\n+     *\n+     * @param name the name of the Resource\n+     * @return the Resource, or null if not found\n+     *\/\n@@ -367,1 +324,12 @@\n-        return getResource(name, true);\n+        if (DEBUG) {\n+            System.err.println(\"URLClassPath.getResource(\\\"\" + name + \"\\\")\");\n+        }\n+\n+        Loader loader;\n+        for (int i = 0; (loader = getLoader(i)) != null; i++) {\n+            Resource res = loader.getResource(name);\n+            if (res != null) {\n+                return res;\n+            }\n+        }\n+        return null;\n@@ -377,2 +345,1 @@\n-    public Enumeration<Resource> getResources(final String name,\n-                                    final boolean check) {\n+    public Enumeration<Resource> getResources(final String name) {\n@@ -389,1 +356,1 @@\n-                        res = loader.getResource(name, check);\n+                        res = loader.getResource(name);\n@@ -413,4 +380,0 @@\n-    public Enumeration<Resource> getResources(final String name) {\n-        return getResources(name, true);\n-    }\n-\n@@ -458,11 +421,0 @@\n-            } catch (SecurityException se) {\n-                \/\/ log the error and close the unusable loader (if any).\n-                \/\/ The context, if there is one, that this URLClassPath was\n-                \/\/ given during construction will never have permission to access the URL.\n-                if (DEBUG) {\n-                    System.err.println(\"Failed to access \" + url + \", \" + se );\n-                }\n-                if (loader != null) {\n-                    closeQuietly(loader);\n-                }\n-                continue;\n@@ -494,1 +446,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -496,26 +447,17 @@\n-        try {\n-            return AccessController.doPrivileged(\n-                    new PrivilegedExceptionAction<>() {\n-                        public Loader run() throws IOException {\n-                            String protocol = url.getProtocol();  \/\/ lower cased in URL\n-                            String file = url.getFile();\n-                            if (file != null && file.endsWith(\"\/\")) {\n-                                if (\"file\".equals(protocol)) {\n-                                    return new FileLoader(url);\n-                                } else if (\"jar\".equals(protocol) &&\n-                                        isDefaultJarHandler(url) &&\n-                                        file.endsWith(\"!\/\")) {\n-                                    \/\/ extract the nested URL\n-                                    @SuppressWarnings(\"deprecation\")\n-                                    URL nestedUrl = new URL(file.substring(0, file.length() - 2));\n-                                    return new JarLoader(nestedUrl, jarHandler, acc);\n-                                } else {\n-                                    return new Loader(url);\n-                                }\n-                            } else {\n-                                return new JarLoader(url, jarHandler, acc);\n-                            }\n-                        }\n-                    }, acc);\n-        } catch (PrivilegedActionException pae) {\n-            throw (IOException)pae.getException();\n+        String protocol = url.getProtocol();  \/\/ lower cased in URL\n+        String file = url.getFile();\n+        if (file != null && file.endsWith(\"\/\")) {\n+            if (\"file\".equals(protocol)) {\n+                return new FileLoader(url);\n+            } else if (\"jar\".equals(protocol) &&\n+                    isDefaultJarHandler(url) &&\n+                    file.endsWith(\"!\/\")) {\n+                \/\/ extract the nested URL\n+                @SuppressWarnings(\"deprecation\")\n+                URL nestedUrl = new URL(file.substring(0, file.length() - 2));\n+                return new JarLoader(nestedUrl, jarHandler);\n+            } else {\n+                return new Loader(url);\n+            }\n+        } else {\n+            return new JarLoader(url, jarHandler);\n@@ -544,53 +486,0 @@\n-    \/*\n-     * Checks whether the resource URL should be returned.\n-     * Returns null on security check failure.\n-     * Called by java.net.URLClassLoader.\n-     *\/\n-    public static URL checkURL(URL url) {\n-        if (url != null) {\n-            try {\n-                check(url);\n-            } catch (Exception e) {\n-                return null;\n-            }\n-        }\n-        return url;\n-    }\n-\n-    \/*\n-     * Checks whether the resource URL should be returned.\n-     * Throws exception on failure.\n-     * Called internally within this file.\n-     *\/\n-    public static void check(URL url) throws IOException {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            URLConnection urlConnection = url.openConnection();\n-            Permission perm = urlConnection.getPermission();\n-            if (perm != null) {\n-                try {\n-                    security.checkPermission(perm);\n-                } catch (SecurityException se) {\n-                    \/\/ fallback to checkRead\/checkConnect for pre 1.2\n-                    \/\/ security managers\n-                    if ((perm instanceof java.io.FilePermission) &&\n-                        perm.getActions().contains(\"read\")) {\n-                        security.checkRead(perm.getName());\n-                    } else if ((perm instanceof\n-                        java.net.SocketPermission) &&\n-                        perm.getActions().contains(\"connect\")) {\n-                        URL locUrl = url;\n-                        if (urlConnection instanceof JarURLConnection) {\n-                            locUrl = ((JarURLConnection)urlConnection).getJarFileURL();\n-                        }\n-                        security.checkConnect(locUrl.getHost(),\n-                                              locUrl.getPort());\n-                    } else {\n-                        throw se;\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n@@ -619,1 +508,1 @@\n-        URL findResource(final String name, boolean check) {\n+        URL findResource(final String name) {\n@@ -629,4 +518,0 @@\n-                if (check) {\n-                    URLClassPath.check(url);\n-                }\n-\n@@ -656,1 +541,5 @@\n-        Resource getResource(final String name, boolean check) {\n+        \/*\n+         * Returns the Resource for the specified name, or null if not\n+         * found.\n+         *\/\n+        Resource getResource(final String name) {\n@@ -666,3 +555,0 @@\n-                if (check) {\n-                    URLClassPath.check(url);\n-                }\n@@ -696,9 +582,0 @@\n-        \/*\n-         * Returns the Resource for the specified name, or null if not\n-         * found or the caller does not have the permission to get the\n-         * resource.\n-         *\/\n-        Resource getResource(final String name) {\n-            return getResource(name, true);\n-        }\n-\n@@ -730,2 +607,0 @@\n-        @SuppressWarnings(\"removal\")\n-        private final AccessControlContext acc;\n@@ -740,2 +615,1 @@\n-        private JarLoader(URL url, URLStreamHandler jarHandler,\n-                          @SuppressWarnings(\"removal\") AccessControlContext acc)\n+        private JarLoader(URL url, URLStreamHandler jarHandler)\n@@ -746,2 +620,0 @@\n-            this.acc = acc;\n-\n@@ -773,1 +645,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -776,14 +647,3 @@\n-                try {\n-                    AccessController.doPrivileged(\n-                        new PrivilegedExceptionAction<>() {\n-                            public Void run() throws IOException {\n-                                if (DEBUG) {\n-                                    System.err.println(\"Opening \" + csu);\n-                                    Thread.dumpStack();\n-                                }\n-                                jar = getJarFile(csu);\n-                                return null;\n-                            }\n-                        }, acc);\n-                } catch (PrivilegedActionException pae) {\n-                    throw (IOException)pae.getException();\n+                if (DEBUG) {\n+                    System.err.println(\"Opening \" + csu);\n+                    Thread.dumpStack();\n@@ -791,0 +651,1 @@\n+                jar = getJarFile(csu);\n@@ -829,2 +690,1 @@\n-         * Creates the resource and if the check flag is set to true, checks if\n-         * is its okay to return the resource.\n+         * Creates and returns the Resource. Returns null if the Resource couldn't be created.\n@@ -832,2 +692,1 @@\n-        Resource checkResource(final String name, boolean check,\n-            final JarEntry entry) {\n+        Resource createResource(final String name, final JarEntry entry) {\n@@ -845,4 +704,1 @@\n-                if (check) {\n-                    URLClassPath.check(url);\n-                }\n-            } catch (@SuppressWarnings(\"removal\") AccessControlException | IOException e) {\n+            } catch (IOException e) {\n@@ -888,2 +744,2 @@\n-        URL findResource(final String name, boolean check) {\n-            Resource rsc = getResource(name, check);\n+        URL findResource(final String name) {\n+            Resource rsc = getResource(name);\n@@ -900,1 +756,1 @@\n-        Resource getResource(final String name, boolean check) {\n+        Resource getResource(final String name) {\n@@ -907,4 +763,3 @@\n-            if (entry != null)\n-                return checkResource(name, check, entry);\n-\n-\n+            if (entry != null) {\n+                return createResource(name, entry);\n+            }\n@@ -1061,2 +916,2 @@\n-        URL findResource(final String name, boolean check) {\n-            Resource rsc = getResource(name, check);\n+        URL findResource(final String name) {\n+            Resource rsc = getResource(name);\n@@ -1070,1 +925,1 @@\n-        Resource getResource(final String name, boolean check) {\n+        Resource getResource(final String name) {\n@@ -1080,4 +935,0 @@\n-\n-                if (check)\n-                    URLClassPath.check(url);\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/URLClassPath.java","additions":70,"deletions":219,"binary":false,"changes":289,"status":"modified"}]}