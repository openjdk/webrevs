{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -860,9 +860,0 @@\n-            \/\/ Now position <= sz so remaining >= 0 and\n-            \/\/ remaining == 0 if and only if sz == 0\n-            long remaining = sz - position;\n-\n-            \/\/ Adjust count only if remaining > 0, i.e.,\n-            \/\/ sz > position which means sz > 0\n-            if (remaining > 0 && remaining < count)\n-                count = remaining;\n-\n@@ -872,2 +863,9 @@\n-                \/\/ Attempt a direct transfer, if the kernel supports it, limiting\n-                \/\/ the number of bytes according to which platform\n+                \/\/ Now sz > 0 and position <= sz so remaining >= 0 and\n+                \/\/ remaining == 0 if and only if sz == position\n+                long remaining = sz - position;\n+\n+                if (remaining >= 0 && remaining < count)\n+                    count = remaining;\n+\n+                \/\/ Attempt a direct transfer, if the kernel supports it,\n+                \/\/ limiting the number of bytes according to which platform\n","filename":"src\/java.base\/share\/classes\/sun\/nio\/ch\/FileChannelImpl.java","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4434723 4482726 4559072 4795550 5081340 5103988 6984545\n+ * @bug 4434723 4482726 4559072 4795550 5081340 5103988 6984545 8325382\n@@ -51,0 +51,1 @@\n+import java.nio.file.Files;\n@@ -161,0 +162,24 @@\n+    @Test\n+    public void transferToTrusted() throws IOException { \/\/ for bug 8325382\n+        File source = File.createTempFile(\"before\", \"after\");\n+        source.deleteOnExit();\n+\n+        CharSequence csq = \"Reality is greater than the sum of its parts.\";\n+        Files.writeString(source.toPath(), csq);\n+        final long length = csq.length();\n+        assert source.length() == length;\n+\n+        File target = File.createTempFile(\"before\", \"after\");\n+        target.deleteOnExit();\n+\n+        try (FileInputStream in = new FileInputStream(source);\n+             FileOutputStream out = new FileOutputStream(target);\n+             FileChannel chSource = in.getChannel();\n+             FileChannel chTarget = out.getChannel()) {\n+            \/\/ The count of bytes requested to transfer must exceed\n+            \/\/ FileChannelImpl.MAPPED_TRANSFER_THRESHOLD which is\n+            \/\/ currently 16384\n+            chSource.transferTo(length, 16385, chTarget);\n+        }\n+    }\n+\n","filename":"test\/jdk\/java\/nio\/channels\/FileChannel\/Transfer.java","additions":27,"deletions":2,"binary":false,"changes":29,"status":"modified"}]}