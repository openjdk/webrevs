{"files":[{"patch":"@@ -80,0 +80,3 @@\n+    stA.out.set_reserve_stack(metadata.stack_idx);\n+    stB.in.set_reserve_stack(metadata.stack_idx);\n+\n@@ -140,0 +143,6 @@\n+      if (is_uncommit_operation) {\n+        stA.out.set_reserve_stack(leqA_n->val().out.reserved_stack());\n+        stB.in.set_reserve_stack(leqA_n->val().out.reserved_stack());\n+        stA.out.set_commit_stack(NativeCallStackStorage::invalid);\n+        stB.in.set_commit_stack(NativeCallStackStorage::invalid);\n+      }\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":9,"deletions":0,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  constexpr static const int si_len = 3;\n+  constexpr static const int si_len = 4;\n@@ -46,1 +46,2 @@\n-    stacks[1] = make_stack(0xC);\n+    stacks[2] = make_stack(0xC);\n+    stacks[3] = make_stack(0xD);\n@@ -50,0 +51,1 @@\n+    si[3] = ncs.push(stacks[3]);\n@@ -757,0 +759,51 @@\n+template<int NodeCount> struct ExpectedTree {\n+  int nodes[NodeCount];\n+  MemTag tags[NodeCount + 1];\n+  VMATree::StateType states[NodeCount + 1];\n+  NativeCallStackStorage::StackIndex res_si[NodeCount + 1];\n+  NativeCallStackStorage::StackIndex com_si[NodeCount + 1];\n+};\n+template <int N>\n+void check_tree(Tree& tree,const ExpectedTree<N>& et, int line_no) {\n+  using Node = VMATree::TreapNode;\n+  auto left_released = [&](Node n) -> bool {\n+    return n.val().in.type() == VMATree::StateType::Released and\n+           n.val().in.mem_tag() == mtNone;\n+  };\n+  auto right_released = [&](Node n) -> bool {\n+    return n.val().out.type() == VMATree::StateType::Released and\n+           n.val().out.mem_tag() == mtNone;\n+  };\n+  char for_this_node[50];\n+  for (int i = 0; i < N; i++) {\n+    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(et.nodes[i]);\n+    ASSERT_TRUE(r.start != nullptr);\n+    Node node = *r.start;\n+    if (i == (N -1)) { \/\/ last node\n+      EXPECT_TRUE(right_released(node)) << \"right-of last node is not Released\";\n+      break;\n+    }\n+    if (i == 0) { \/\/ first node\n+      EXPECT_TRUE(left_released(node)) << \"left-of first node is not Released\";\n+    }\n+\n+    sprintf(for_this_node, \"test at line: %d, for node: %d\", line_no, et.nodes[i]);\n+    EXPECT_EQ(node.val().out.type(), et.states[i+1]) << for_this_node;\n+    EXPECT_EQ(node.val().out.mem_tag(), et.tags[i+1]) << for_this_node;\n+    if (et.res_si[i+1] >= 0) {\n+      EXPECT_EQ(node.val().out.reserved_stack(), et.res_si[i+1]) << for_this_node;\n+      EXPECT_EQ(r.end->val().in.reserved_stack(), et.res_si[i+1]) << for_this_node;\n+    } else {\n+      EXPECT_FALSE(node.val().out.has_reserved_stack()) << for_this_node;\n+      EXPECT_FALSE(r.end->val().in.has_reserved_stack()) << for_this_node;\n+    }\n+    if (et.com_si[i+1] >= 0) {\n+      EXPECT_EQ(node.val().out.committed_stack(), et.com_si[i+1]) << for_this_node;\n+      EXPECT_EQ(r.end->val().in.committed_stack(), et.com_si[i+1]) << for_this_node;\n+    } else {\n+      EXPECT_FALSE(node.val().out.has_committed_stack()) << for_this_node;\n+      EXPECT_FALSE(r.end->val().in.has_committed_stack()) << for_this_node;\n+    }\n+  }\n+}\n+\n@@ -759,0 +812,1 @@\n+  using State = VMATree::StateType;\n@@ -762,0 +816,3 @@\n+  const State Rs = State::Reserved;\n+  const State Rl = State::Released;\n+  const State C = State::Committed;\n@@ -764,18 +821,22 @@\n-  auto expected =  [&](Tree& tree, int p, SIndex reserve_stack, SIndex commit_stack, int line_no = __LINE__) {\n-    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(p);\n-    const char* at_line = \" at line: \";\n-    if (reserve_stack >= 0) {\n-      EXPECT_EQ(r.start->val().out.reserved_stack(), reserve_stack) << at_line << line_no;\n-      EXPECT_EQ(r.end->val().in.reserved_stack(), reserve_stack) << at_line << line_no;\n-    } else {\n-      EXPECT_FALSE(r.start->val().out.has_reserved_stack()) << at_line << line_no;\n-      EXPECT_FALSE(r.end->val().in.has_reserved_stack()) << at_line << line_no;\n-    }\n-    if (commit_stack >= 0) {\n-      EXPECT_EQ(r.start->val().out.committed_stack(), commit_stack) << at_line << line_no;\n-      EXPECT_EQ(r.end->val().in.committed_stack(), commit_stack) << at_line << line_no;\n-    } else {\n-      EXPECT_FALSE(r.start->val().out.has_committed_stack()) << at_line << line_no;\n-      EXPECT_FALSE(r.end->val().in.has_committed_stack()) << at_line << line_no;\n-    }\n-  };\n+\n+  \/\/ Visualization guide\n+  \/\/ Nodes in the tree are shown in ascending order as:\n+  \/\/ A....B-----C*****D---E... means:\n+  \/\/   [A,B) is released\n+  \/\/   [B,C) is reserved, same as [D,E)\n+  \/\/   [C,D) is committed\n+  \/\/ Each node A in the tree has this metada (MemTag, State, Reserve Call-Stack, Commit Call-Stack);\n+  \/\/  one for the region to its left (called 'in'), and one for the region to its right (called 'out').\n+  \/\/ For every adjacent nodes of [A,B), always A.out == B.in (required).\n+  \/\/ In visualizations, we can avoid repeating metadata of A.out for B.in and write them once.\n+  \/\/ So for example, we write:\n+  \/\/                     A....B-----C*****D-----E...\n+  \/\/ MemTag:               mt1   mt2   mt3  mt4\n+  \/\/ State:                Rl    Rs    C    Rs\n+  \/\/ Reserve Call-Stack:   -     CS2   CS3  CS4\n+  \/\/ Commit Call-Stack:    -     CS2   CS5  CS4\n+  \/\/\n+  \/\/ where Rl = Released, Rs = Reserved and C = Committed.\n+  \/\/ '-' for call-stack means 'empty'\n+\n+\n@@ -785,2 +846,13 @@\n-    tree.reserve_mapping(0, 100, call_stack_1);\n-    expected(tree,  0, si_1,   -1, __LINE__);\n+    tree.reserve_mapping(0, 100, call_stack_1); \/\/ reserve in an empty tree\n+    \/\/ Pre: empty tree.\n+    \/\/ Post: .........0---------100.........\n+    \/\/        mtNone    mtTest       mtNone\n+    \/\/        Rl        Rs           Rl\n+    \/\/        -         si_1         -\n+    \/\/        -         -            -\n+    ExpectedTree<2> et1 = {{      0  , 100        },\n+                           {mtNone, mtTest, mtNone},\n+                           {Rl    , Rs    , Rl    },\n+                           {-1    , si_1  , -1    },\n+                           {-1    , -1    , -1    }};\n+    check_tree(tree, et1, __LINE__);\n@@ -789,3 +861,12 @@\n-    expected(tree,  0, si_1,   -1, __LINE__);\n-    expected(tree, 25, si_1, si_2, __LINE__);\n-    expected(tree, 50, si_1,   -1, __LINE__);\n+    \/\/ Pre: post of previous\n+    \/\/ Post: .........0---------25*********50--------100.........\n+    \/\/        mtNone    mtTest       mtTest   mtTest     mtNone\n+    \/\/        Rl        Rs           C        Rs         Rl\n+    \/\/        -         si_1         si_1     si_1       -\n+    \/\/        -         -            si_2     -          -\n+    ExpectedTree<4> et2 = {{      0  , 25,      50,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_2  , -1    , -1    }};\n+    check_tree(tree, et2, __LINE__);\n@@ -794,1 +875,12 @@\n-    expected(tree, 0, si_1, si_2, __LINE__);\n+    \/\/ Pre: post of previous\n+    \/\/ Post: .........0********20---------25********50--------100.........\n+    \/\/        mtNone    mtTest    mtTest      mtTest   mtTest     mtNone\n+    \/\/        Rl        C         Rs          C        Rs         Rl\n+    \/\/        -         si_1      si_1        si_1     si_1       -\n+    \/\/        -         si_2      -           si_2     -          -\n+    ExpectedTree<5> et3 = {{     0,     20,     25,     50,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , C     , Rs    , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , si_2  , -1    , si_2  , -1    , -1    }};\n+    check_tree(tree, et3, __LINE__);\n@@ -797,1 +889,12 @@\n-    expected(tree, 80, si_1, si_2, __LINE__);\n+    \/\/ Pre: post of previous\n+    \/\/ Post: .........0********20---------25********50--------80********100.........\n+    \/\/        mtNone    mtTest    mtTest      mtTest   mtTest     mtTest    mtNone\n+    \/\/        Rl        C         Rs          C        Rs         C         Rl\n+    \/\/        -         si_1      si_1        si_1     si_1       si_1      -\n+    \/\/        -         si_2      -           si_2     -          si_2      -\n+    ExpectedTree<6> et4 = {{     0,     20,     25,     50,     80,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , C     , Rs    , C     , Rs    , C     , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , si_2  , -1    , si_2  , -1    , si_2  , -1    }};\n+    check_tree(tree, et4, __LINE__);\n@@ -801,2 +904,13 @@\n-    tree.reserve_mapping(0, 100, call_stack_1); \/\/ Nodes: 0 - 100\n-    expected(tree, 0, si_1, -1, __LINE__);\n+    tree.reserve_mapping(0, 100, call_stack_1); \/\/ reserving in an empty tree\n+    \/\/ Pre: empty tree.\n+    \/\/ Post: .........0---------100.........\n+    \/\/        mtNone    mtTest       mtNone\n+    \/\/        Rl        Rs           Rl\n+    \/\/        -         si_1         -\n+    \/\/        -         -            -\n+    ExpectedTree<2> et1 = {{      0  , 100        },\n+                           {mtNone, mtTest, mtNone},\n+                           {Rl    , Rs    , Rl    },\n+                           {-1    , si_1  , -1    },\n+                           {-1    , -1    , -1    }};\n+    check_tree(tree, et1, __LINE__);\n@@ -804,3 +918,13 @@\n-    tree.commit_mapping(20, 20, call_stack_2, true); \/\/ Nodes: 0 - 20 - 40 - 100\n-    expected(tree,  0, si_1,   -1, __LINE__);\n-    expected(tree, 20, si_1, si_2, __LINE__);\n+    tree.commit_mapping(20, 20, call_stack_2, true);\n+    \/\/ Pre: post of previous\n+    \/\/ Post: .........0---------20********40-------100.........\n+    \/\/        mtNone    mtTest     mtTest    mtTest    mtNone\n+    \/\/        Rl        Rs           C       Rs        Rl\n+    \/\/        -         si_1         si_1    si_1      -\n+    \/\/        -         -            si_2     -        -\n+    ExpectedTree<4> et2 = {{     0,     20,     40,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_2  , -1    , -1    }};\n+    check_tree(tree, et2, __LINE__);\n@@ -811,3 +935,16 @@\n-    tree.commit_mapping(10, 20, call_stack_3); \/\/ Nodes: 0 - 10 - 40 - 100\n-    expected(tree, 10, si_1, si_3, __LINE__);\n-\n+    tree.commit_mapping(10, 20, call_stack_3);\n+    \/\/ Pre: post of previous\n+    \/\/ Post: .........0---------10********30********40-------100.........\n+    \/\/        mtNone    mtTest     mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl        Rs           C       C         Rs        Rl\n+    \/\/        -         si_1         si_1    si_1      si_1      -\n+    \/\/        -         -            si_3    si_2        -       -\n+    ExpectedTree<5> et3 = {{     0,     10,     30,     40,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_3  , si_2  , -1    , -1    }};\n+    check_tree(tree, et3, __LINE__);\n+\n+    SIndex si_4 = si[3];\n+    VMATree::RegionData call_stack_4(si_4, mtTest);\n@@ -815,2 +952,13 @@\n-    tree.commit_mapping(30, 20, call_stack_3); \/\/ Nodes: 0 - 10 - 50 - 100\n-    expected(tree, 30, si_1, si_3, __LINE__);\n+    tree.commit_mapping(30, 20, call_stack_4);\n+    \/\/ Pre: post of previous\n+    \/\/ Post: .........0---------10********30********50-------100.........\n+    \/\/        mtNone    mtTest     mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl        Rs           C       C         Rs        Rl\n+    \/\/        -         si_1         si_1    si_1      si_1      -\n+    \/\/        -         -            si_3    si_4        -       -\n+    ExpectedTree<5> et4 = {{     0,     10,     30,     50,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_3  , si_4  , -1    , -1    }};\n+    check_tree(tree, et4, __LINE__);\n@@ -821,1 +969,0 @@\n-    expected(tree, 0, si_1, -1, __LINE__);\n@@ -824,2 +971,0 @@\n-    expected(tree,  0, si_1,   -1, __LINE__);\n-    expected(tree, 20, si_1, si_2, __LINE__);\n@@ -828,1 +973,0 @@\n-    expected(tree, 0, si_1, si_2, __LINE__);\n@@ -831,1 +975,16 @@\n-    expected(tree, 0, si_1, -1, __LINE__);\n+    \/\/ Pre:  .........0********10--------20********40-------100.........\n+    \/\/        mtNone    mtTest    mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl        C         Rs        C         Rs        Rl\n+    \/\/        -         si_1      si_1      si_1      si_1      -\n+    \/\/        -         si_2      -         si_2      -         -\n+    \/\/ Post: .........0--------5********10--------20********40-------100.........\n+    \/\/        mtNone    mtTest   mtTest    mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl        Rs       C         Rs        C         Rs        Rl\n+    \/\/        -         si_1     si_1      si_1      si_1      si_1      -\n+    \/\/        -         -        si_2      -         si_2      -         -\n+    ExpectedTree<6> et1 = {{     0,     5,      10,     20,     40,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , Rs    , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_2  , -1    , si_2  , -1    , -1    }};\n+    check_tree(tree, et1, __LINE__);\n@@ -834,1 +993,12 @@\n-    expected(tree, 20, si_1, -1, __LINE__);\n+    \/\/ Pre: post of previous\n+    \/\/ Post: .........0--------5********10--------30********40-------100.........\n+    \/\/        mtNone    mtTest   mtTest    mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl        Rs       C         Rs        C         Rs        Rl\n+    \/\/        -         si_1     si_1      si_1      si_1      si_1      -\n+    \/\/        -         -        si_2      -         si_2      -         -\n+    ExpectedTree<6> et2 = {{     0,     5,      10,     30,     40,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , Rs    , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_2  , -1    , si_2  , -1    , -1    }};\n+    check_tree(tree, et2, __LINE__);\n@@ -836,1 +1006,4 @@\n-  {\/\/ reserve after reserve\n+  {\/\/ reserve after reserve, but only different call-stacks\n+    SIndex si_4 = si[3];\n+    VMATree::RegionData call_stack_4(si_4, mtTest);\n+\n@@ -839,3 +1012,12 @@\n-    tree.reserve_mapping(10, 10, call_stack_2);\n-    expected(tree,  0, si_1, -1, __LINE__);\n-    expected(tree, 10, si_2, -1, __LINE__);\n+    tree.reserve_mapping(10, 10, call_stack_4);\n+    \/\/ Post: .........0--------10--------20--------100.........\n+    \/\/        mtNone   mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl       Rs        Rs         Rs       Rl\n+    \/\/        -        si_1      si_2      si_1      -\n+    \/\/        -        -         -         -         -\n+    ExpectedTree<4> et1 = {{     0,     10,     20,     100       },\n+                           {mtNone, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , Rs    , Rs    , Rl    },\n+                           {-1    , si_1  , si_4  , si_1  , -1    },\n+                           {-1    , -1    , -1    , -1    , -1    }};\n+    check_tree(tree, et1, __LINE__);\n@@ -846,1 +1028,6 @@\n-    expected(tree, 0, -1, si_1, __LINE__);\n+    ExpectedTree<2> et = {{     0,     100       },\n+                          {mtNone, mtTest, mtNone},\n+                          {Rl    , C     , Rl    },\n+                          {-1    , si_1  , -1    },\n+                          {-1    , si_1  , -1    }};\n+    check_tree(tree, et, __LINE__);\n@@ -850,3 +1037,8 @@\n-    tree.commit_mapping(0, 100, call_stack_1);\n-    tree.reserve_mapping(0, 100, call_stack_2);\n-    expected(tree, 0, si_2, -1, __LINE__);\n+    tree.commit_mapping(0, 100, call_stack_2);\n+    tree.reserve_mapping(0, 100, call_stack_1);\n+    ExpectedTree<2> et = {{     0,     100       },\n+                          {mtNone, mtTest, mtNone},\n+                          {Rl    , Rs    , Rl    },\n+                          {-1    , si_1  , -1    },\n+                          {-1    , -1    , -1    }};\n+    check_tree(tree, et, __LINE__);\n@@ -854,1 +1046,1 @@\n-}\n\\ No newline at end of file\n+}\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":244,"deletions":52,"binary":false,"changes":296,"status":"modified"}]}