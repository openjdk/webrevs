{"files":[{"patch":"@@ -94,1 +94,1 @@\n-        _stack_storage.get(prev->val().out.stack()).print_on(stream);\n+        _stack_storage.get(prev->val().out.reserved_stack()).print_on(stream);\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,1 +53,1 @@\n-    return a == invalid || a < 0;\n+    return a == invalid;\n","filename":"src\/hotspot\/share\/nmt\/nmtNativeCallStackStorage.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -91,10 +91,19 @@\n-      \/\/ call-stack in the second_stack of the node.\n-      if ((leqA_n->val().out.mem_tag() != leqA_n->val().in.mem_tag()\n-           || leqA_n->val().out.type() != leqA_n->val().in.type())          \/\/ leqA_n is the start of a reserved region\n-          && !(state == StateType::Reserved && !use_tag_inplace)            \/\/ we are not reserving a new region\n-          && !NativeCallStackStorage::is_invalid(leqA_n->val().out.stack()) \/\/ the primary stack is already filled\n-         ) {\n-        stA.out.set_stack(leqA_n->val().out.stack());\n-        stB.in.set_stack(leqA_n->val().out.stack());\n-        stA.out.set_second_stack(metadata.stack_idx);\n-        stB.in.set_second_stack(metadata.stack_idx);\n+      \/\/ call-stack in the secondary_stack of the node.\n+      bool memtag_changed_at_A = leqA_n->val().out.mem_tag() != leqA_n->val().in.mem_tag();\n+      bool state_changed_at_A = leqA_n->val().out.type() != leqA_n->val().in.type();\n+      bool reserved_rgn_starts_at_A = memtag_changed_at_A || state_changed_at_A;\n+      bool is_reserve_operation = state == StateType::Reserved && !use_tag_inplace;\n+      bool is_reserved_stack_filled = leqA_n->val().out.has_reserved_stack();\n+\n+      if (reserved_rgn_starts_at_A && is_reserved_stack_filled ) {\n+        if (is_reserve_operation) {    \/\/ we are not reserving a new region\n+          stA.out.set_stack(metadata.stack_idx);\n+          stB.in.set_stack(metadata.stack_idx);\n+          stA.out.set_secondary_stack(leqA_n->val().out.reserved_stack());\n+          stB.in.set_secondary_stack(leqA_n->val().out.reserved_stack());\n+        } else {\n+          stA.out.set_stack(leqA_n->val().out.reserved_stack());\n+          stB.in.set_stack(leqA_n->val().out.reserved_stack());\n+          stA.out.set_secondary_stack(metadata.stack_idx);\n+          stB.in.set_secondary_stack(metadata.stack_idx);\n+        }\n@@ -284,1 +293,1 @@\n-    RegionData new_data = RegionData(out.stack(), tag);\n+    RegionData new_data = RegionData(out.reserved_stack(), tag);\n@@ -305,1 +314,1 @@\n-      RegionData new_data = RegionData(out.stack(), tag);\n+      RegionData new_data = RegionData(out.reserved_stack(), tag);\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":21,"deletions":12,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -94,2 +94,2 @@\n-    NativeCallStackStorage::StackIndex sidx;       \/\/ call-stack of all operations\n-    NativeCallStackStorage::StackIndex second_idx; \/\/ call-stack when committing\/uncommitting the start-node of a reserved region\n+    NativeCallStackStorage::StackIndex primary_stack;   \/\/ call-stack of all operations\n+    NativeCallStackStorage::StackIndex secondary_stack; \/\/ call-stack when committing\/uncommitting the start-node of a reserved region\n@@ -98,1 +98,1 @@\n-    IntervalState() : type_tag{0,0}, sidx(), second_idx(NativeCallStackStorage::invalid) {}\n+    IntervalState() : type_tag{0,0}, primary_stack(NativeCallStackStorage::invalid), secondary_stack(NativeCallStackStorage::invalid) {}\n@@ -103,2 +103,2 @@\n-      sidx = data.stack_idx;\n-      second_idx = NativeCallStackStorage::invalid;\n+      primary_stack = data.stack_idx;\n+      secondary_stack = NativeCallStackStorage::invalid;\n@@ -116,1 +116,1 @@\n-      return RegionData{sidx, mem_tag()};\n+      return RegionData{primary_stack, mem_tag()};\n@@ -123,2 +123,2 @@\n-    NativeCallStackStorage::StackIndex stack() const {\n-      return sidx;\n+    NativeCallStackStorage::StackIndex reserved_stack() const {\n+      return primary_stack;\n@@ -127,2 +127,2 @@\n-    NativeCallStackStorage::StackIndex second_stack() const {\n-      return second_idx;\n+    NativeCallStackStorage::StackIndex committed_stack() const {\n+      return secondary_stack;\n@@ -132,1 +132,1 @@\n-      sidx = idx;\n+      primary_stack = idx;\n@@ -135,2 +135,10 @@\n-    void set_second_stack(NativeCallStackStorage::StackIndex idx) {\n-      second_idx = idx;\n+    void set_secondary_stack(NativeCallStackStorage::StackIndex idx) {\n+      secondary_stack = idx;\n+    }\n+\n+    bool has_reserved_stack() {\n+      return primary_stack != NativeCallStackStorage::invalid;\n+    }\n+\n+    bool has_committed_stack() {\n+      return secondary_stack != NativeCallStackStorage::invalid;\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":21,"deletions":13,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -317,2 +317,2 @@\n-      EXPECT_EQ(expect.stack, found.start->val().out.stack()) << \"Unexpected stack at test-line: \" << line_no;\n-      EXPECT_EQ(expect.stack, found.end->val().in.stack()) << \"Unexpected stack at test-line: \" << line_no;\n+      EXPECT_EQ(expect.stack, found.start->val().out.reserved_stack()) << \"Unexpected stack at test-line: \" << line_no;\n+      EXPECT_EQ(expect.stack, found.end->val().in.reserved_stack()) << \"Unexpected stack at test-line: \" << line_no;\n@@ -716,2 +716,2 @@\n-        const NativeCallStack& start_stack = ncss.get(startn->val().out.stack());\n-        const NativeCallStack& end_stack = ncss.get(endn->val().in.stack());\n+        const NativeCallStack& start_stack = ncss.get(startn->val().out.reserved_stack());\n+        const NativeCallStack& end_stack = ncss.get(endn->val().in.reserved_stack());\n@@ -719,2 +719,2 @@\n-        if (!NativeCallStackStorage::is_invalid(startn->val().out.second_stack())) {\n-          const NativeCallStack& start_second_stack = ncss.get(startn->val().out.second_stack());\n+        if (!NativeCallStackStorage::is_invalid(startn->val().out.committed_stack())) {\n+          const NativeCallStack& start_second_stack = ncss.get(startn->val().out.committed_stack());\n@@ -725,2 +725,2 @@\n-        if (!NativeCallStackStorage::is_invalid(endn->val().in.second_stack())) {\n-          const NativeCallStack& end_second_stack = ncss.get(endn->val().in.second_stack());\n+        if (!NativeCallStackStorage::is_invalid(endn->val().in.committed_stack())) {\n+          const NativeCallStack& end_second_stack = ncss.get(endn->val().in.committed_stack());\n@@ -756,1 +756,0 @@\n-  Tree tree;\n@@ -759,15 +758,34 @@\n-  tree.reserve_mapping(0, 100, call_stack_1);\n-\n-  tree.commit_mapping(0, 50, call_stack_2, true);\n-  VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(0);\n-  EXPECT_EQ(r.start->val().out.stack(), si[0]);\n-  EXPECT_EQ(r.end->val().in.stack(), si[0]);\n-  EXPECT_EQ(r.start->val().out.second_stack(), si[1]);\n-  EXPECT_EQ(r.end->val().in.second_stack(), si[1]);\n-\n-  tree.uncommit_mapping(0, 30, call_stack_2);\n-  r = tree.tree().find_enclosing_range(0);\n-  EXPECT_EQ(r.start->val().out.stack(), si[0]);\n-  EXPECT_EQ(r.end->val().in.stack(), si[0]);\n-  EXPECT_EQ(r.start->val().out.second_stack(), si[1]);\n-  EXPECT_EQ(r.end->val().in.second_stack(), si[1]);\n+\n+  {\n+    Tree tree;\n+    tree.reserve_mapping(0, 100, call_stack_1);\n+    tree.commit_mapping(25, 25, call_stack_2, true);\n+    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(0);\n+    EXPECT_EQ(r.start->val().out.reserved_stack(), si[0]);\n+    EXPECT_FALSE(r.start->val().out.has_committed_stack());\n+  }\n+  {\n+    Tree tree;\n+    tree.reserve_mapping(0, 100, call_stack_1);\n+    tree.reserve_mapping(10, 10, call_stack_2);\n+    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(0);\n+    EXPECT_EQ(r.start->val().out.reserved_stack(), si[0]);\n+    EXPECT_EQ(r.end->val().in.reserved_stack(), si[0]);\n+  }\n+\n+  {\n+    Tree tree;\n+    tree.commit_mapping(0, 100, call_stack_1);\n+    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(0);\n+    EXPECT_EQ(r.start->val().out.reserved_stack(), si[0]);\n+    EXPECT_FALSE(r.start->val().out.has_committed_stack());\n+  }\n+  {\n+    Tree tree;\n+    tree.commit_mapping(0, 100, call_stack_1);\n+    tree.reserve_mapping(0, 100, call_stack_2);\n+    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(0);\n+    EXPECT_EQ(r.start->val().out.reserved_stack(), si[1]);\n+    EXPECT_EQ(r.end->val().in.reserved_stack(), si[1]);\n+    EXPECT_EQ(r.start->val().out.committed_stack(), si[0]);\n+  }\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":42,"deletions":24,"binary":false,"changes":66,"status":"modified"}]}