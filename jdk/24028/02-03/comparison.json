{"files":[{"patch":"@@ -55,0 +55,15 @@\n+  bool is_reserve_operation = state == StateType::Reserved && !use_tag_inplace;\n+  bool is_uncommit_operation = state == StateType::Reserved && use_tag_inplace;\n+  bool is_commit_operation = state == StateType::Committed;\n+  if (is_reserve_operation) {\n+    stA.out.set_reserve_stack(metadata.stack_idx);\n+    stB.in.set_reserve_stack(metadata.stack_idx);\n+    stA.out.set_commit_stack(NativeCallStackStorage::invalid);\n+    stA.in.set_commit_stack(NativeCallStackStorage::invalid);\n+  }\n+  if (is_commit_operation) {\n+    stA.out.set_commit_stack(metadata.stack_idx);\n+    stB.in.set_commit_stack(metadata.stack_idx);\n+    stA.out.set_reserve_stack(NativeCallStackStorage::invalid);\n+    stB.in.set_reserve_stack(NativeCallStackStorage::invalid);\n+  }\n@@ -89,20 +104,3 @@\n-      \/\/ For NMT reports in detail mode, separate stacks are required for Reserve and Commit operations.\n-      \/\/ So, do not touch the stack of the node since it is for Reserve operation. Instead store the new\n-      \/\/ call-stack in the secondary_stack of the node.\n-      bool memtag_changed_at_A = leqA_n->val().out.mem_tag() != leqA_n->val().in.mem_tag();\n-      bool state_changed_at_A = leqA_n->val().out.type() != leqA_n->val().in.type();\n-      bool reserved_rgn_starts_at_A = memtag_changed_at_A || state_changed_at_A;\n-      bool is_reserve_operation = state == StateType::Reserved && !use_tag_inplace;\n-      bool is_reserved_stack_filled = leqA_n->val().out.has_reserved_stack();\n-\n-      if (reserved_rgn_starts_at_A && is_reserved_stack_filled ) {\n-        if (is_reserve_operation) {    \/\/ we are not reserving a new region\n-          stA.out.set_stack(metadata.stack_idx);\n-          stB.in.set_stack(metadata.stack_idx);\n-          stA.out.set_secondary_stack(leqA_n->val().out.reserved_stack());\n-          stB.in.set_secondary_stack(leqA_n->val().out.reserved_stack());\n-        } else {\n-          stA.out.set_stack(leqA_n->val().out.reserved_stack());\n-          stB.in.set_stack(leqA_n->val().out.reserved_stack());\n-          stA.out.set_secondary_stack(metadata.stack_idx);\n-          stB.in.set_secondary_stack(metadata.stack_idx);\n+      if (is_commit_operation) {\n+        if (leqA_n->val().out.has_reserved_stack()) {\n+          stA.out.set_reserve_stack(leqA_n->val().out.reserved_stack());\n@@ -111,0 +109,4 @@\n+      if (is_uncommit_operation) {\n+        stA.out.set_reserve_stack(leqA_n->val().out.reserved_stack());\n+        stA.out.set_commit_stack(NativeCallStackStorage::invalid);\n+      }\n@@ -134,0 +136,4 @@\n+      if (is_commit_operation) {\n+        stA.out.set_reserve_stack(leqA_n->val().out.reserved_stack());\n+        stB.in.set_reserve_stack(leqA_n->val().out.reserved_stack());\n+      }\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":26,"deletions":20,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -94,2 +94,2 @@\n-    NativeCallStackStorage::StackIndex primary_stack;   \/\/ call-stack of all operations\n-    NativeCallStackStorage::StackIndex secondary_stack; \/\/ call-stack when committing\/uncommitting the start-node of a reserved region\n+    NativeCallStackStorage::StackIndex _reserved_stack;\n+    NativeCallStackStorage::StackIndex _committed_stack;\n@@ -98,1 +98,1 @@\n-    IntervalState() : type_tag{0,0}, primary_stack(NativeCallStackStorage::invalid), secondary_stack(NativeCallStackStorage::invalid) {}\n+    IntervalState() : type_tag{0,0}, _reserved_stack(NativeCallStackStorage::invalid), _committed_stack(NativeCallStackStorage::invalid) {}\n@@ -103,2 +103,2 @@\n-      primary_stack = data.stack_idx;\n-      secondary_stack = NativeCallStackStorage::invalid;\n+      _reserved_stack = data.stack_idx;\n+      _committed_stack = NativeCallStackStorage::invalid;\n@@ -115,2 +115,5 @@\n-    RegionData regiondata() const {\n-      return RegionData{primary_stack, mem_tag()};\n+    RegionData reserved_regiondata() const {\n+      return RegionData{_reserved_stack, mem_tag()};\n+    }\n+    RegionData committed_regiondata() const {\n+      return RegionData{_committed_stack, mem_tag()};\n@@ -124,1 +127,1 @@\n-      return primary_stack;\n+      return _reserved_stack;\n@@ -128,1 +131,1 @@\n-      return secondary_stack;\n+      return _committed_stack;\n@@ -131,2 +134,2 @@\n-    void set_stack(NativeCallStackStorage::StackIndex idx) {\n-      primary_stack = idx;\n+    void set_reserve_stack(NativeCallStackStorage::StackIndex idx) {\n+      _reserved_stack = idx;\n@@ -135,2 +138,2 @@\n-    void set_secondary_stack(NativeCallStackStorage::StackIndex idx) {\n-      secondary_stack = idx;\n+    void set_commit_stack(NativeCallStackStorage::StackIndex idx) {\n+      _committed_stack = idx;\n@@ -140,1 +143,1 @@\n-      return primary_stack != NativeCallStackStorage::invalid;\n+      return _reserved_stack != NativeCallStackStorage::invalid;\n@@ -144,1 +147,1 @@\n-      return secondary_stack != NativeCallStackStorage::invalid;\n+      return _committed_stack != NativeCallStackStorage::invalid;\n@@ -156,1 +159,2 @@\n-             RegionData::equals(in.regiondata(), out.regiondata());\n+             RegionData::equals(in.reserved_regiondata(), out.reserved_regiondata()) &&\n+             RegionData::equals(in.committed_regiondata(), out.committed_regiondata());\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":20,"deletions":16,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-        EXPECT_EQ(x->val().out.regiondata().mem_tag, mtTest);\n+        EXPECT_EQ(x->val().out.reserved_regiondata().mem_tag, mtTest);\n@@ -268,1 +268,1 @@\n-        EXPECT_EQ(mtTest, x->val().out.regiondata().mem_tag);\n+        EXPECT_EQ(mtTest, x->val().out.reserved_regiondata().mem_tag);\n@@ -271,1 +271,1 @@\n-        EXPECT_EQ(mtTest, x->val().in.regiondata().mem_tag);\n+        EXPECT_EQ(mtTest, x->val().in.reserved_regiondata().mem_tag);\n@@ -292,1 +292,1 @@\n-    NCS::StackIndex stack;\n+    NCS::StackIndex reserve_stack;\n@@ -317,2 +317,2 @@\n-      EXPECT_EQ(expect.stack, found.start->val().out.reserved_stack()) << \"Unexpected stack at test-line: \" << line_no;\n-      EXPECT_EQ(expect.stack, found.end->val().in.reserved_stack()) << \"Unexpected stack at test-line: \" << line_no;\n+      EXPECT_EQ(expect.reserve_stack, found.start->val().out.reserved_stack()) << \"Unexpected stack at region: \" << i << \" and at test-line: \" << line_no;\n+      EXPECT_EQ(expect.reserve_stack, found.end->val().in.reserved_stack()) << \"Unexpected stack at region: \" << i << \" and at test-line: \" << line_no;\n@@ -756,2 +756,33 @@\n-  VMATree::RegionData call_stack_1(si[0], mtTest);\n-  VMATree::RegionData call_stack_2(si[1], mtNone);\n+  using SIndex = NativeCallStackStorage::StackIndex;\n+  SIndex si_1 = si[0];\n+  SIndex si_2 = si[1];\n+\n+  VMATree::RegionData call_stack_1(si_1, mtTest);\n+  VMATree::RegionData call_stack_2(si_2, mtNone);\n+  auto expected =  [&](Tree& tree, int p, SIndex reserve_stack, SIndex commit_stack, int line_no = __LINE__) {\n+    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(p);\n+    const bool check_end_node = true;\n+    const char* at_line = \" at line: \";\n+    if (reserve_stack >= 0) {\n+      EXPECT_EQ(r.start->val().out.reserved_stack(), reserve_stack) << at_line << line_no;\n+      if (check_end_node) {\n+        EXPECT_EQ(r.end->val().in.reserved_stack(), reserve_stack) << at_line << line_no;\n+      }\n+    } else {\n+      EXPECT_FALSE(r.start->val().out.has_reserved_stack()) << at_line << line_no;\n+      if (check_end_node) {\n+        EXPECT_FALSE(r.end->val().in.has_reserved_stack()) << at_line << line_no;\n+      }\n+    }\n+    if (commit_stack >= 0) {\n+      EXPECT_EQ(r.start->val().out.committed_stack(), commit_stack) << at_line << line_no;\n+      if (check_end_node) {\n+        EXPECT_EQ(r.end->val().in.committed_stack(), commit_stack) << at_line << line_no;\n+      }\n+    } else {\n+      EXPECT_FALSE(r.start->val().out.has_committed_stack()) << at_line << line_no;\n+      if (check_end_node) {\n+        EXPECT_FALSE(r.end->val().in.has_committed_stack()) << at_line << line_no;\n+      }\n+    }\n+  };\n@@ -762,4 +793,12 @@\n-    tree.commit_mapping(25, 25, call_stack_2, true);\n-    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(0);\n-    EXPECT_EQ(r.start->val().out.reserved_stack(), si[0]);\n-    EXPECT_FALSE(r.start->val().out.has_committed_stack());\n+    expected(tree,  0, si_1,   -1, __LINE__);\n+\n+    tree.commit_mapping(25, 25, call_stack_2, true); \/\/ commit at the middle of the region\n+    expected(tree,  0, si_1,   -1, __LINE__);\n+    expected(tree, 25, si_1, si_2, __LINE__);\n+\n+    tree.commit_mapping(0, 20, call_stack_2, true); \/\/ commit at the begin of the region\n+    expected(tree, 0, si_1, si_2, __LINE__);\n+\n+    tree.commit_mapping(80, 20, call_stack_2, true); \/\/ commit at the end of the region\n+    expected(tree, 80, si_1, si_2, __LINE__);\n+    tree.print_on(tty);\n@@ -770,5 +809,1 @@\n-    tree.reserve_mapping(10, 10, call_stack_2);\n-    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(0);\n-    EXPECT_EQ(r.start->val().out.reserved_stack(), si[0]);\n-    EXPECT_EQ(r.end->val().in.reserved_stack(), si[0]);\n-  }\n+    expected(tree, 0, si_1, -1, __LINE__);\n@@ -776,6 +811,7 @@\n-  {\n-    Tree tree;\n-    tree.commit_mapping(0, 100, call_stack_1);\n-    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(0);\n-    EXPECT_EQ(r.start->val().out.reserved_stack(), si[0]);\n-    EXPECT_FALSE(r.start->val().out.has_committed_stack());\n+    tree.commit_mapping(20, 20, call_stack_2, true);\n+    expected(tree,  0, si_1,   -1, __LINE__);\n+    expected(tree, 20, si_1, si_2, __LINE__);\n+\n+    tree.commit_mapping(10, 20, call_stack_1); \/\/ commit with overlap\n+    expected(tree, 10, si_1, si_1, __LINE__);\n+    tree.print_on(tty);\n@@ -785,6 +821,16 @@\n-    tree.commit_mapping(0, 100, call_stack_1);\n-    tree.reserve_mapping(0, 100, call_stack_2);\n-    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(0);\n-    EXPECT_EQ(r.start->val().out.reserved_stack(), si[1]);\n-    EXPECT_EQ(r.end->val().in.reserved_stack(), si[1]);\n-    EXPECT_EQ(r.start->val().out.committed_stack(), si[0]);\n+    tree.reserve_mapping(0, 100, call_stack_1);\n+    expected(tree, 0, si_1, -1, __LINE__);\n+\n+    tree.commit_mapping(20, 20, call_stack_2, true);\n+    expected(tree,  0, si_1,   -1, __LINE__);\n+    expected(tree, 20, si_1, si_2, __LINE__);\n+\n+    tree.commit_mapping(0, 10, call_stack_2, true);\n+    expected(tree, 0, si_1, si_2, __LINE__);\n+\n+    tree.uncommit_mapping(0, 5, call_stack_2);\n+    expected(tree, 0, si_1, -1, __LINE__);\n+\n+    tree.uncommit_mapping(20, 10, call_stack_2);\n+    expected(tree, 20, si_1, -1, __LINE__);\n+    tree.print_on(tty);\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":75,"deletions":29,"binary":false,"changes":104,"status":"modified"}]}