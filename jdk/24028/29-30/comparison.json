{"files":[{"patch":"@@ -217,0 +217,1 @@\n+  LOG_TAG(vmatree) \\\n","filename":"src\/hotspot\/share\/logging\/logTag.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -34,2 +34,2 @@\n-\/\/ The nodes in the tree are key-value pairs where key is the memory address and the value is the State of the memory regions.\n-\/\/ State of a region describes whether the region is released, reserved or committed, which MemTag it has and where in\n+\/\/ The nodes in the tree are key-value pairs where the key is the memory address and the value is the State of the memory regions.\n+\/\/ The State of a region describes whether the region is released, reserved or committed, which MemTag it has and where in\n@@ -43,2 +43,1 @@\n-\/\/ Virtual memory can be reserved, committed, uncommitted and released. During these operations, the tree should handle the\n-\/\/ changes needed for the affected regions in the tree. For each operation a request\n+\/\/ Virtual memory can be reserved, committed, uncommitted and released. For each operation a request\n@@ -94,0 +93,2 @@\n+  const Operation oper = req.op();\n+  assert(oper != Operation::Invalid && op >= 0 && op < 4, \"should be\");\n@@ -102,1 +103,2 @@\n-  if (op == 2 && ex == StateType::Released) {\n+  \/\/ When committing a Released region, the reserve-call-stack of the region should also be as what is in the request\n+  if (oper == Operation::Commit && ex == StateType::Released) {\n@@ -112,2 +114,3 @@\n-  const int op = req.op_to_index();\n-  assert(op >= 0 && op < 4, \"should be\");\n+  const int op_index = req.op_to_index();\n+  const Operation op = req.op();\n+  assert(op != Operation::Invalid && op_index >= 0 && op_index < 4, \"should be\");\n@@ -121,1 +124,1 @@\n-  return result[op][state_to_index(ex)];\n+  return result[op_index][state_to_index(ex)];\n@@ -141,2 +144,2 @@\n-  switch(req.op) {\n-    case StateType::Released:\n+  switch(req.op()) {\n+    case Operation::Release:\n@@ -144,3 +147,3 @@\n-    case StateType::Reserved:\n-      return req.use_tag_inplace ? ex : req.tag;\n-    case StateType::Committed:\n+    case Operation::Reserve:\n+      return req.tag;\n+    case Operation::Commit:\n@@ -148,0 +151,2 @@\n+    case Operation::Uncommit:\n+      return ex;\n@@ -155,1 +160,1 @@\n-                                   const MemTag t1,\n+                                   const MemTag current_tag,\n@@ -158,1 +163,1 @@\n-                                   const MemTag t2,\n+                                   const MemTag operation_tag,\n@@ -164,1 +169,2 @@\n-  assert(op >= 0 && op < 4, \"should be\");\n+  const Operation oper =  req.op();\n+  assert(oper != Operation::Invalid && op >= 0 && op < 4, \"should be\");\n@@ -168,3 +174,3 @@\n-  \/\/ The region has tag `t1` and the operation has tag `t2`.\n-  \/\/ For each state, we decide how much to be added\/subtracted from t1 to t2. Two tables for reserve and commit.\n-  \/\/ Each pair of <x,y> in the table means add `x` to t1 and add `y` to t2. There are 3 pairs in each row for 3 states.\n+  \/\/ The region has tag `current_tag` and the operation has tag `operation_tag`.\n+  \/\/ For each state, we decide how much to be added\/subtracted from current_tag to operation_tag. Two tables for reserve and commit.\n+  \/\/ Each pair of <x,y> in the table means add `x` to current_tag and add `y` to operation_tag. There are 3 pairs in each row for 3 states.\n@@ -172,4 +178,4 @@\n-  \/\/    - we are reserving with t2 a region which is already commited with t1\n-  \/\/    - since we are reserving, then `a` will be added to t2. (`y` is `a`)\n-  \/\/    - since we uncommitting (by reserving) then `a` is to be subtracted from t1. (`x` is `-a`).\n-  \/\/    - amount of uncommitted size is in table `commit[1][4,5]` which is `-a,0` that means subtract `a` from t1.\n+  \/\/    - we are reserving with operation_tag a region which is already commited with current_tag\n+  \/\/    - since we are reserving, then `a` will be added to operation_tag. (`y` is `a`)\n+  \/\/    - since we uncommitting (by reserving) then `a` is to be subtracted from current_tag. (`x` is `-a`).\n+  \/\/    - amount of uncommitted size is in table `commit[1][4,5]` which is `-a,0` that means subtract `a` from current_tag.\n@@ -189,2 +195,2 @@\n-  SingleDiff& from_rescom = diff.tag[NMTUtil::tag_to_index(t1)];\n-  SingleDiff&   to_rescom = diff.tag[NMTUtil::tag_to_index(t2)];\n+  SingleDiff& from_rescom = diff.tag[NMTUtil::tag_to_index(current_tag)];\n+  SingleDiff&   to_rescom = diff.tag[NMTUtil::tag_to_index(operation_tag)];\n@@ -202,0 +208,2 @@\n+  assert(n1 != nullptr,\"sanity\");\n+  assert(n2 != nullptr,\"sanity\");\n@@ -206,2 +214,0 @@\n-  assert(n1 != nullptr,\"sanity\");\n-  assert(n2 != nullptr,\"sanity\");\n@@ -370,10 +376,7 @@\n-  auto print_case = [&](int a = 1) {\n-    tty->print(\" req: %4d---%4d\", (int)_A, (int)_B);\n-    tty->print(\" row: %2d\", row);\n-    if (a) {\n-      tty->print(\" X: %4ld\", X_exists ? (long)X->key() : -1);\n-      tty->print(\" Y: %4ld\", Y_exists ? (long)Y->key() : -1);\n-      tty->print(\" W: %4ld\", W_exists ? (long)W->key() : -1);\n-      tty->print(\" U: %4ld\", U_exists ? (long)U->key() : -1);\n-    }\n-    tty->print_cr(\"\");\n+  auto print_case = [&]() {\n+    log_trace(vmatree)(\" req: %4d---%4d\", (int)_A, (int)_B);\n+    log_trace(vmatree)(\" row: %2d\", row);\n+    log_trace(vmatree)(\" X: %4ld\", X_exists ? (long)X->key() : -1);\n+    log_trace(vmatree)(\" Y: %4ld\", Y_exists ? (long)Y->key() : -1);\n+    log_trace(vmatree)(\" W: %4ld\", W_exists ? (long)W->key() : -1);\n+    log_trace(vmatree)(\" U: %4ld\", U_exists ? (long)U->key() : -1);\n@@ -639,1 +642,1 @@\n-  \/\/ ************************************************************************************ Remove the 'noop' nodes that found inside the loop\n+  \/\/ Remove the 'noop' nodes that found inside the loop\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":41,"deletions":38,"binary":false,"changes":79,"status":"modified"},{"patch":"@@ -249,0 +249,1 @@\n+  enum Operation {Release, Reserve, Commit, Uncommit, Invalid};\n@@ -251,1 +252,1 @@\n-    StateType op;\n+    StateType _op;\n@@ -255,0 +256,9 @@\n+    Operation op() const {\n+      return\n+            _op == StateType::Released                      ? Operation::Release  :\n+            _op == StateType::Reserved && !use_tag_inplace  ? Operation::Reserve  :\n+            _op == StateType::Committed                     ? Operation::Commit   :\n+            _op == StateType::Reserved &&  use_tag_inplace  ? Operation::Uncommit :\n+             Operation::Invalid; \/\/ should not reach here\n+    }\n+\n@@ -257,4 +267,5 @@\n-            op == StateType::Released ? 0 :\n-            op == StateType::Reserved && !use_tag_inplace ? 1 :\n-            op == StateType::Committed ? 2 :\n-            op == StateType::Reserved && use_tag_inplace ? 3 : -1;\n+            _op == StateType::Released                      ? 0 :\n+            _op == StateType::Reserved && !use_tag_inplace  ? 1 :\n+            _op == StateType::Committed                     ? 2 :\n+            _op == StateType::Reserved &&  use_tag_inplace  ? 3 :\n+             -1;\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -235,1 +235,1 @@\n-      if (et.res_si[i] >= 0)\n+      if (et.res_si[i] >= 0) {\n@@ -237,1 +237,1 @@\n-      else\n+      } else {\n@@ -239,1 +239,2 @@\n-      if (et.com_si[i] >= 0)\n+      }\n+      if (et.com_si[i] >= 0) {\n@@ -241,1 +242,1 @@\n-      else\n+      } else {\n@@ -243,0 +244,1 @@\n+      }\n@@ -246,1 +248,1 @@\n-      if (et.res_si[i+1] >= 0)\n+      if (et.res_si[i+1] >= 0) {\n@@ -248,1 +250,1 @@\n-      else\n+      } else {\n@@ -250,1 +252,2 @@\n-      if (et.com_si[i+1] >= 0)\n+      }\n+      if (et.com_si[i+1] >= 0) {\n@@ -252,1 +255,1 @@\n-      else\n+      } else {\n@@ -254,0 +257,1 @@\n+      }\n@@ -301,1 +305,0 @@\n-    print_tree(et, line_no);\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":12,"deletions":9,"binary":false,"changes":21,"status":"modified"}]}