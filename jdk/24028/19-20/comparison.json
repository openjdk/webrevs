{"files":[{"patch":"@@ -87,0 +87,14 @@\n+MemTag VMATree::get_new_tag(const MemTag ex, const RequestInfo& req) const {\n+  switch(req.op) {\n+    case StateType::Released:\n+      return mtNone;\n+    case StateType::Reserved:\n+      return req.use_tag_inplace ? ex : req.tag;\n+    case StateType::Committed:\n+      return req.use_tag_inplace ? ex : req.tag;\n+    default:\n+      break;\n+  }\n+  return mtNone;\n+}\n+\n@@ -118,1 +132,1 @@\n-                                        {0,a,  0,a, -a,0 },    \/\/ op == Reserve\n+                                        {0,0,  0,0, -a,0 },    \/\/ op == Reserve\n@@ -149,1 +163,1 @@\n-  MemTag    new_tag                     = req.use_tag_inplace ? n1->val().out.mem_tag() : req.tag;\n+  MemTag    new_tag                     = get_new_tag(n1->val().out.mem_tag(), req);\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":16,"deletions":2,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -100,0 +100,10 @@\n+    IntervalState(const StateType type,\n+                  const MemTag mt,\n+                  const NativeCallStackStorage::StackIndex res_stack,\n+                  const NativeCallStackStorage::StackIndex com_stack) {\n+      assert(!(type == StateType::Released) || mt == mtNone, \"Released state-type must have memory tag mtNone\");\n+      type_tag[0] = static_cast<uint8_t>(type);\n+      type_tag[1] = static_cast<uint8_t>(mt);\n+      _reserved_stack = res_stack;\n+      _committed_stack = com_stack;\n+    }\n@@ -209,14 +219,0 @@\n-  struct RequestInfo {\n-    position A, B;\n-    StateType op;\n-    MemTag tag;\n-    SIndex callstack;\n-    bool use_tag_inplace;\n-    int op_to_index() const {\n-      return\n-            op == StateType::Released ? 0 :\n-            op == StateType::Reserved && !use_tag_inplace ? 1 :\n-            op == StateType::Committed ? 2 :\n-            op == StateType::Reserved && use_tag_inplace ? 3 : -1;\n-    }\n-  };\n@@ -253,0 +249,15 @@\n+  struct RequestInfo {\n+    position A, B;\n+    StateType op;\n+    MemTag tag;\n+    SIndex callstack;\n+    bool use_tag_inplace;\n+    int op_to_index() const {\n+      return\n+            op == StateType::Released ? 0 :\n+            op == StateType::Reserved && !use_tag_inplace ? 1 :\n+            op == StateType::Committed ? 2 :\n+            op == StateType::Reserved && use_tag_inplace ? 3 : -1;\n+    }\n+  };\n+\n@@ -256,0 +267,1 @@\n+  MemTag get_new_tag(const MemTag existinting_tag, const RequestInfo& req) const;\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":26,"deletions":14,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -187,0 +187,40 @@\n+  using State = VMATree::StateType;\n+  using SIndex = VMATree::SIndex;\n+  enum OpType { Rel, Res, Com, ComF, Uncom };\n+\n+  struct UpdateCallInfo {\n+    VMATree::IntervalState ex_st;\n+    VMATree::RequestInfo req;\n+    VMATree::IntervalState new_st;\n+    int reserve[2], commit[2];\n+  };\n+\n+  void call_update_region(const UpdateCallInfo upd) {\n+    VMATree::TreapNode n1{upd.req.A, {}, 0}, n2{upd.req.B, {}, 0};\n+    n1.val().out= upd.ex_st;\n+    n2.val().in = n1.val().out;\n+    Tree tree;\n+    VMATree::SummaryDiff diff;\n+    tree.update_region(&n1, &n2, upd.req, diff);\n+    int from = NMTUtil::tag_to_index(upd.ex_st.mem_tag());\n+    int   to = NMTUtil::tag_to_index(upd.new_st.mem_tag());\n+    stringStream ss;\n+    ss.print(\"Ex. State: %d, op: %d, use-tag:%d, from==to: %d\",\n+             (int)upd.ex_st.type(), (int)upd.req.op_to_index(), upd.req.use_tag_inplace, from == to);\n+    const char* failed_case = ss.base();\n+    EXPECT_EQ(n1.val().out.type(), upd.new_st.type()) << failed_case;\n+    EXPECT_EQ(n1.val().out.mem_tag(), upd.new_st.mem_tag()) << failed_case;\n+    EXPECT_EQ(n1.val().out.reserved_stack(), upd.new_st.reserved_stack()) << failed_case;\n+    EXPECT_EQ(n1.val().out.committed_stack(), upd.new_st.committed_stack()) << failed_case;\n+\n+    if (from == to) {\n+      EXPECT_EQ(diff.tag[from].reserve, upd.reserve[0] + upd.reserve[1]) << failed_case;\n+      EXPECT_EQ(diff.tag[from].commit, upd.commit[0] + upd.commit[1]) << failed_case;\n+    } else {\n+      EXPECT_EQ(diff.tag[from].reserve, upd.reserve[0]) << failed_case;\n+      EXPECT_EQ(diff.tag[from].commit, upd.commit[0]) << failed_case;\n+      EXPECT_EQ(diff.tag[to].reserve, upd.reserve[1]) << failed_case;\n+      EXPECT_EQ(diff.tag[to].commit, upd.commit[1]) << failed_case;\n+    }\n+  }\n+\n@@ -2705,0 +2745,44 @@\n+\n+TEST_VM_F(NMTVMATreeTest, UpdateRegionTest) {\n+  using State = VMATree::StateType;\n+  using SIndex = VMATree::SIndex;\n+  SIndex ES = NativeCallStackStorage::invalid;\n+  SIndex s0 = si[0];\n+  SIndex s1 = si[1];\n+  SIndex s2 = si[2];\n+\n+  const State Rs = State::Reserved;\n+  const State Rl = State::Released;\n+  const State C = State::Committed;\n+  const int a = 100;\n+  const MemTag ReqTag = mtTest;\n+  const VMATree::RequestInfo       ReleaseRequest{0, a, Rl, mtNone, ES, false};\n+  const VMATree::RequestInfo       ReserveRequest{0, a, Rs, ReqTag, s2, false};\n+  const VMATree::RequestInfo        CommitRequest{0, a,  C, ReqTag, s2, false};\n+  const VMATree::RequestInfo      UncommitRequest{0, a, Rs, mtNone, ES, true};\n+  const VMATree::RequestInfo CopyTagCommitRequest{0, a,  C, ReqTag, s2, true};\n+                              \/\/  existing state           request              expected state     expected diff\n+                              \/\/ st   tag    stacks                           st   tag    stacks   reserve commit\n+                              \/\/ --  ------  ------  ----------------------   --  ------  ------   ------  -----\n+  UpdateCallInfo  call_info[]={{{Rl, mtNone, ES, ES},        ReleaseRequest, {Rl, mtNone, ES, ES}, {0,  0}, {0,  0}},\n+                               {{Rl, mtNone, ES, ES},        ReserveRequest, {Rs, ReqTag, s2, ES}, {0,  a}, {0,  0}},\n+                               {{Rl, mtNone, ES, ES},         CommitRequest, { C, ReqTag, s2, s2}, {0,  a}, {0,  a}},\n+                               {{Rl, mtNone, ES, ES},  CopyTagCommitRequest, { C, mtNone, s2, s2}, {0,  a}, {0,  a}},\n+                               {{Rl, mtNone, ES, ES},       UncommitRequest, {Rl, mtNone, ES, ES}, {0,  0}, {0,  0}},\n+                               {{Rs,   mtGC, s0, ES},        ReleaseRequest, {Rl, mtNone, ES, ES}, {-a, 0}, {0,  0}},\n+                               {{Rs,   mtGC, s0, ES},        ReserveRequest, {Rs, ReqTag, s2, ES}, {-a, a}, {0,  0}}, \/\/ diff tag\n+                               {{Rs, mtTest, s0, ES},        ReserveRequest, {Rs, ReqTag, s2, ES}, {0,  0}, {0,  0}}, \/\/ same tag\n+                               {{Rs,   mtGC, s0, ES},         CommitRequest, { C, ReqTag, s0, s2}, {0,  0}, {0,  a}},\n+                               {{Rs,   mtGC, s0, ES},  CopyTagCommitRequest, { C,   mtGC, s0, s2}, {0,  0}, {0,  a}},\n+                               {{Rs,   mtGC, s0, ES},       UncommitRequest, {Rs,   mtGC, s0, ES}, {0,  0}, {0,  0}},\n+                               {{ C,   mtGC, s0, s1},        ReleaseRequest, {Rl, mtNone, ES, ES}, {-a, 0}, {-a, 0}},\n+                               {{ C,   mtGC, s0, s1},        ReserveRequest, {Rs, ReqTag, s2, ES}, {-a, a}, {-a, 0}}, \/\/ diff tag\n+                               {{ C, mtTest, s0, s1},        ReserveRequest, {Rs, ReqTag, s2, ES}, {0,  0}, {-a, 0}}, \/\/ same tag\n+                               {{ C,   mtGC, s0, s1},         CommitRequest, { C, ReqTag, s0, s2}, {0,  0}, {-a, a}},\n+                               {{ C,   mtGC, s0, s1},  CopyTagCommitRequest, { C,   mtGC, s0, s2}, {0,  0}, {-a, a}},\n+                               {{ C,   mtGC, s0, s1},       UncommitRequest, {Rs,   mtGC, s0, ES}, {0,  0}, {-a, 0}}\n+                              };\n+  for (auto ci : call_info) {\n+    call_update_region(ci);\n+  }\n+}\n\\ No newline at end of file\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":84,"deletions":0,"binary":false,"changes":84,"status":"modified"}]}