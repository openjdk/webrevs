{"files":[{"patch":"@@ -94,1 +94,1 @@\n-        _stack_storage.get(prev->val().out.stack()).print_on(stream);\n+        _stack_storage.get(prev->val().out.reserved_stack()).print_on(stream);\n","filename":"src\/hotspot\/share\/nmt\/memoryFileTracker.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,2 +46,0 @@\n-\n-private:\n@@ -50,1 +48,0 @@\n-public:\n","filename":"src\/hotspot\/share\/nmt\/nmtNativeCallStackStorage.hpp","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -31,1 +31,1 @@\n-const VMATree::RegionData VMATree::empty_regiondata{NativeCallStackStorage::StackIndex{}, mtNone};\n+const VMATree::RegionData VMATree::empty_regiondata{NativeCallStackStorage::invalid, mtNone};\n@@ -37,0 +37,136 @@\n+NativeCallStackStorage::StackIndex VMATree::new_reserve_callstack(NativeCallStackStorage::StackIndex es, StateType ex, const RequestInfo& req){\n+  using SIndex = NativeCallStackStorage::StackIndex;\n+  const SIndex ES = NativeCallStackStorage::invalid; \/\/ Empty Stack\n+  const SIndex rq = req.callstack;\n+  auto st_to_index = [&](StateType st) -> int {\n+    return\n+      st == StateType::Released ? 0 :\n+      st == StateType::Reserved ? 1 :\n+      st == StateType::Committed ? 2 : -1;\n+  };\n+  const int op = req.op_to_index();\n+  assert(op >= 0 && op < 4, \"should be\");\n+                            \/\/ existing state\n+  SIndex result[4][3] = {\/\/ Rl  Rs   C\n+                           {ES, ES, ES},   \/\/ op == Release\n+                           {rq, rq, rq},   \/\/ op == Reserve\n+                           {es, es, es},   \/\/ op == Commit\n+                           {es, es, es}    \/\/ op == Uncommit\n+                           };\n+  return result[op][st_to_index(ex)];\n+}\n+\n+NativeCallStackStorage::StackIndex VMATree::new_commit_callstack(NativeCallStackStorage::StackIndex es, StateType ex, const RequestInfo& req){\n+  using SIndex = NativeCallStackStorage::StackIndex;\n+  const SIndex ES = NativeCallStackStorage::invalid; \/\/ Empty Stack\n+  const SIndex rq = req.callstack;\n+  auto st_to_index = [&](StateType st) -> int {\n+    return\n+      st == StateType::Released ? 0 :\n+      st == StateType::Reserved ? 1 :\n+      st == StateType::Committed ? 2 : -1;\n+  };\n+  const int op = req.op_to_index();\n+  assert(op >= 0 && op < 4, \"should be\");\n+                            \/\/ existing state\n+  SIndex result[4][3] = {\/\/ Rl  Rs   C\n+                           {ES, ES, ES},   \/\/ op == Release\n+                           {ES, ES, ES},   \/\/ op == Reserve\n+                           {rq, rq, rq},   \/\/ op == Commit\n+                           {ES, ES, ES}    \/\/ op == Uncommit\n+                           };\n+  return result[op][st_to_index(ex)];\n+}\n+\n+VMATree::StateType VMATree::new_state(StateType ex, const RequestInfo& req) {\n+  const StateType Rl = StateType::Released;\n+  const StateType Rs = StateType::Reserved;\n+  const StateType C = StateType::Committed;\n+  auto st_to_index = [&](StateType st) -> int {\n+    return\n+      st == StateType::Released ? 0 :\n+      st == StateType::Reserved ? 1 :\n+      st == StateType::Committed ? 2 : -1;\n+  };\n+  const int op = req.op_to_index();\n+  assert(op >= 0 && op < 4, \"should be\");\n+                            \/\/ existing state\n+  StateType result[4][3] = {\/\/ Rl  Rs   C\n+                              {Rl, Rl, Rl},   \/\/ op == Release\n+                              {Rs, Rs, Rs},   \/\/ op == Reserve\n+                              { C,  C,  C},   \/\/ op == Commit\n+                              {Rl, Rs, Rs}    \/\/ op == Uncommit\n+                           };\n+  return result[op][st_to_index(ex)];\n+}\n+\n+VMATree::SummaryDiff VMATree::register_mapping_new(position A, position B, StateType state,\n+                                               const RegionData& metadata, bool use_tag_inplace) {\n+\n+  assert(A < B, \"should be\");\n+  RequestInfo req{A, B, state, metadata.mem_tag, metadata.stack_idx, use_tag_inplace};\n+  SummaryDiff diff;\n+  VMATreap::Range rA = _tree.find_enclosing_range(A);\n+  VMATreap::Range rB = _tree.find_enclosing_range(B);\n+  bool no_node_before_A = rA.start == nullptr;\n+  bool no_node_before_B = rB.start == nullptr;\n+  bool no_overlap_before = no_node_before_A && no_node_before_B;\n+  bool no_node_after_A = rA.end == nullptr;\n+  bool no_node_after_B = rB.end == nullptr;\n+  bool no_overlap_after = no_node_after_A && no_node_after_B;\n+  bool no_overlap = no_overlap_before || no_overlap_after;\n+  \/\/ ...............X....Y.....Z.............\n+  \/\/   ^--^        ^--------------^  ^----^\n+  \/\/   no-overlap     with-overlap    no-overlap\n+  if (no_overlap) {\n+    \/\/ just insert A and B\n+    return diff;\n+  }\n+  \/\/ finding the X....Y region that overlaps with A---B\n+  \/\/ a--A--b---c---B---d\n+  const position impossible = -1;\n+  position X =   rA.start != nullptr ? rA.start->key()\n+               : rA.end   != nullptr ? rA.end->key()\n+               : rB.start != nullptr ? rB.start->key()\n+               : rB.end   != nullptr ? rB.end->key() : impossible;\n+  assert(X != impossible, \"should not\");\n+  TreapNode* nY = _tree.closest_gt(X);\n+  assert(nY != nullptr, \"should not\");\n+  position Y = nY->key();\n+\n+  enum overlap_case {         \/\/                      ........X..............Y......................\n+                     A_B_X_Y, \/\/ A < B < X < Y           A--B\n+                     A_BX__Y, \/\/ A < B = X < Y           A----B\n+                     A_X_B_Y, \/\/ A < X < B < Y           A--------B\n+                     A_X__BY, \/\/ A < X < Y = B           A-------------------B\n+                     A_X_Y_B, \/\/ A < X < Y < B           A-----------------------B\n+                     AX_B__Y, \/\/ A = X < B < Y                A----B\n+                     AX___BY, \/\/ A = X < B = Y                A--------------B\n+                     AX_Y__B, \/\/ A = X < Y < B                A--------------------B\n+                     X_A_B_Y, \/\/ X < A < B < Y                    A---B\n+                     X_A__BY, \/\/ X < A < B = Y                    A---------B\n+                     X_A_Y_B  \/\/ X < A < Y < B                    A-------------------B\n+  };\n+  overlap_case oc;\n+  if (B < X) oc = A_B_X_Y;\n+  if (B == X) oc = A_BX__Y;\n+  switch(oc) {    \/\/                      ........X..............Y......................\n+    case A_B_X_Y: \/\/ A < B < X < Y           A--B\n+    case A_BX__Y: \/\/ A < B = X < Y           A----B\n+    case A_X_B_Y: \/\/ A < X < B < Y           A--------B\n+    case A_X__BY: \/\/ A < X < Y = B           A-------------------B\n+    case A_X_Y_B: \/\/ A < X < Y < B           A-----------------------B\n+      \/\/ decompose into A--Y and Y--B\n+      \/\/ handle A--Y here and\n+      \/\/ recursive call of the register_mapping(Y, B, ...)\n+      break;\n+    case AX_B__Y: \/\/ A = X < B < Y                A----B\n+    case AX___BY: \/\/ A = X < B = Y                A--------------B\n+    case AX_Y__B: \/\/ A = X < Y < B                A--------------------B\n+    case X_A_B_Y: \/\/ X < A < B < Y                    A---B\n+    case X_A__BY: \/\/ X < A < B = Y                    A---------B\n+    case X_A_Y_B: \/\/ X < A < Y < B                    A-------------------B\n+      break;\n+  }\n+  return diff;\n+}\n@@ -55,0 +191,15 @@\n+  bool is_reserve_operation = state == StateType::Reserved && !use_tag_inplace;\n+  bool is_uncommit_operation = state == StateType::Reserved && use_tag_inplace;\n+  bool is_commit_operation = state == StateType::Committed;\n+  stA.out.set_reserve_stack(NativeCallStackStorage::invalid);\n+  stB.in.set_reserve_stack(NativeCallStackStorage::invalid);\n+  stA.out.set_commit_stack(NativeCallStackStorage::invalid);\n+  stA.in.set_commit_stack(NativeCallStackStorage::invalid);\n+  if (is_reserve_operation) {\n+    stA.out.set_reserve_stack(metadata.stack_idx);\n+    stB.in.set_reserve_stack(metadata.stack_idx);\n+  }\n+  if (is_commit_operation) {\n+    stA.out.set_commit_stack(metadata.stack_idx);\n+    stB.in.set_commit_stack(metadata.stack_idx);\n+  }\n@@ -65,0 +216,3 @@\n+    stA.out.set_reserve_stack(metadata.stack_idx);\n+    stB.in.set_reserve_stack(metadata.stack_idx);\n+\n@@ -89,0 +243,11 @@\n+      if (is_commit_operation) {\n+        if (leqA_n->val().out.has_reserved_stack()) {\n+          stA.out.set_reserve_stack(leqA_n->val().out.reserved_stack());\n+        } else {\n+          stA.out.set_reserve_stack(metadata.stack_idx);\n+        }\n+      }\n+      if (is_uncommit_operation) {\n+        stA.out.set_reserve_stack(leqA_n->val().out.reserved_stack());\n+        stA.out.set_commit_stack(NativeCallStackStorage::invalid);\n+      }\n@@ -112,0 +277,13 @@\n+      if (is_commit_operation) {\n+        if (leqA_n->val().out.has_reserved_stack()) {\n+          stA.out.set_reserve_stack(leqA_n->val().out.reserved_stack());\n+          stB.in.set_reserve_stack(leqA_n->val().out.reserved_stack());\n+        } else {\n+          stA.out.set_reserve_stack(metadata.stack_idx);\n+          stB.in.set_reserve_stack(metadata.stack_idx);\n+        }\n+      }\n+      if (is_uncommit_operation) {\n+        stA.out.set_reserve_stack(leqA_n->val().out.reserved_stack());\n+        stB.in.set_reserve_stack(leqA_n->val().out.reserved_stack());\n+      }\n@@ -222,2 +400,3 @@\n-    out->print(\"%zu (%s) - %s - \", current->key(), NMTUtil::tag_to_name(out_state(current).mem_tag()),\n-               statetype_to_string(out_state(current).type()));\n+    out->print(\"%zu (%s) - %s [%d, %d]- \", current->key(), NMTUtil::tag_to_name(out_state(current).mem_tag()),\n+               statetype_to_string(out_state(current).type()), current->val().out.reserved_stack(), current->val().out.committed_stack());\n+\n@@ -271,1 +450,1 @@\n-    RegionData new_data = RegionData(out.stack(), tag);\n+    RegionData new_data = RegionData(out.reserved_stack(), tag);\n@@ -292,1 +471,1 @@\n-      RegionData new_data = RegionData(out.stack(), tag);\n+      RegionData new_data = RegionData(out.reserved_stack(), tag);\n","filename":"src\/hotspot\/share\/nmt\/vmatree.cpp","additions":184,"deletions":5,"binary":false,"changes":189,"status":"modified"},{"patch":"@@ -94,1 +94,2 @@\n-    NativeCallStackStorage::StackIndex sidx;\n+    NativeCallStackStorage::StackIndex _reserved_stack;\n+    NativeCallStackStorage::StackIndex _committed_stack;\n@@ -97,1 +98,1 @@\n-    IntervalState() : type_tag{0,0}, sidx() {}\n+    IntervalState() : type_tag{0,0}, _reserved_stack(NativeCallStackStorage::invalid), _committed_stack(NativeCallStackStorage::invalid) {}\n@@ -102,1 +103,2 @@\n-      sidx = data.stack_idx;\n+      _reserved_stack = data.stack_idx;\n+      _committed_stack = NativeCallStackStorage::invalid;\n@@ -113,2 +115,5 @@\n-    RegionData regiondata() const {\n-      return RegionData{sidx, mem_tag()};\n+    RegionData reserved_regiondata() const {\n+      return RegionData{_reserved_stack, mem_tag()};\n+    }\n+    RegionData committed_regiondata() const {\n+      return RegionData{_committed_stack, mem_tag()};\n@@ -121,2 +126,22 @@\n-    NativeCallStackStorage::StackIndex stack() const {\n-     return sidx;\n+    NativeCallStackStorage::StackIndex reserved_stack() const {\n+      return _reserved_stack;\n+    }\n+\n+    NativeCallStackStorage::StackIndex committed_stack() const {\n+      return _committed_stack;\n+    }\n+\n+    void set_reserve_stack(NativeCallStackStorage::StackIndex idx) {\n+      _reserved_stack = idx;\n+    }\n+\n+    void set_commit_stack(NativeCallStackStorage::StackIndex idx) {\n+      _committed_stack = idx;\n+    }\n+\n+    bool has_reserved_stack() {\n+      return _reserved_stack != NativeCallStackStorage::invalid;\n+    }\n+\n+    bool has_committed_stack() {\n+      return _committed_stack != NativeCallStackStorage::invalid;\n@@ -133,0 +158,5 @@\n+      if (in.type() == StateType::Released &&\n+          in.type() == out.type() &&\n+          in.mem_tag() == out.mem_tag()) {\n+        return true;\n+      }\n@@ -134,1 +164,2 @@\n-             RegionData::equals(in.regiondata(), out.regiondata());\n+             RegionData::equals(in.reserved_regiondata(), out.reserved_regiondata()) &&\n+             RegionData::equals(in.committed_regiondata(), out.committed_regiondata());\n@@ -166,0 +197,14 @@\n+  struct RequestInfo {\n+    position A,B;\n+    StateType op;\n+    MemTag tag;\n+    NativeCallStackStorage::StackIndex callstack;\n+    bool use_tag_inplace;\n+    int op_to_index() const {\n+      return\n+            op == StateType::Released ? 0 :\n+            op == StateType::Reserved && !use_tag_inplace ? 1 :\n+            op == StateType::Committed ? 2 :\n+            op == StateType::Reserved && use_tag_inplace ? 3 : -1;\n+    }\n+  };\n@@ -198,0 +243,4 @@\n+  SummaryDiff register_mapping_new(position A, position B, StateType state, const RegionData& metadata, bool use_tag_inplace = false);\n+  StateType new_state(StateType existinting_state, const RequestInfo& req);\n+  NativeCallStackStorage::StackIndex new_reserve_callstack(NativeCallStackStorage::StackIndex existinting_stack, StateType ex, const RequestInfo& req);\n+  NativeCallStackStorage::StackIndex new_commit_callstack(NativeCallStackStorage::StackIndex existinting_stack, StateType ex, const RequestInfo& req);\n","filename":"src\/hotspot\/share\/nmt\/vmatree.hpp","additions":57,"deletions":8,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -39,1 +39,1 @@\n-  constexpr static const int si_len = 2;\n+  constexpr static const int si_len = 4;\n@@ -46,0 +46,2 @@\n+    stacks[2] = make_stack(0xC);\n+    stacks[3] = make_stack(0xD);\n@@ -47,1 +49,3 @@\n-    si[1] = ncs.push(stacks[0]);\n+    si[1] = ncs.push(stacks[1]);\n+    si[2] = ncs.push(stacks[2]);\n+    si[3] = ncs.push(stacks[3]);\n@@ -232,1 +236,1 @@\n-        EXPECT_EQ(x->val().out.regiondata().mem_tag, mtTest);\n+        EXPECT_EQ(x->val().out.reserved_regiondata().mem_tag, mtTest);\n@@ -268,1 +272,1 @@\n-        EXPECT_EQ(mtTest, x->val().out.regiondata().mem_tag);\n+        EXPECT_EQ(mtTest, x->val().out.reserved_regiondata().mem_tag);\n@@ -271,1 +275,1 @@\n-        EXPECT_EQ(mtTest, x->val().in.regiondata().mem_tag);\n+        EXPECT_EQ(mtTest, x->val().in.reserved_regiondata().mem_tag);\n@@ -292,1 +296,1 @@\n-    NCS::StackIndex stack;\n+    NCS::StackIndex reserve_stack;\n@@ -297,1 +301,1 @@\n-  auto expect_equivalent_form = [&](auto& expected, VMATree& tree) {\n+  auto expect_equivalent_form = [&](auto& expected, VMATree& tree, int line_no) {\n@@ -317,2 +321,2 @@\n-      EXPECT_EQ(expect.stack, found.start->val().out.stack());\n-      EXPECT_EQ(expect.stack, found.end->val().in.stack());\n+      EXPECT_EQ(expect.reserve_stack, found.start->val().out.reserved_stack()) << \"Unexpected stack at region: \" << i << \" and at test-line: \" << line_no;\n+      EXPECT_EQ(expect.reserve_stack, found.end->val().in.reserved_stack()) << \"Unexpected stack at region: \" << i << \" and at test-line: \" << line_no;\n@@ -327,0 +331,2 @@\n+  NCS::StackIndex es = NCS::invalid; \/\/ empty or no stack is stored\n+\n@@ -340,1 +346,1 @@\n-    expect_equivalent_form(expected, tree);\n+    expect_equivalent_form(expected, tree, __LINE__);\n@@ -364,1 +370,1 @@\n-    expect_equivalent_form(expected, tree);\n+    expect_equivalent_form(expected, tree, __LINE__);\n@@ -377,1 +383,1 @@\n-    expect_equivalent_form(expected, tree);\n+    expect_equivalent_form(expected, tree, __LINE__);\n@@ -393,1 +399,1 @@\n-    expect_equivalent_form(expected, tree);\n+    expect_equivalent_form(expected, tree, __LINE__);\n@@ -406,1 +412,1 @@\n-    expect_equivalent_form(expected, tree);\n+    expect_equivalent_form(expected, tree, __LINE__);\n@@ -421,1 +427,1 @@\n-    expect_equivalent_form(expected, tree);\n+    expect_equivalent_form(expected, tree, __LINE__);\n@@ -427,1 +433,1 @@\n-        {50,  75,        mtNone, si, State::Released},\n+        {50,  75,        mtNone, es, State::Released},\n@@ -436,1 +442,1 @@\n-    expect_equivalent_form(expected, tree);\n+    expect_equivalent_form(expected, tree, __LINE__);\n@@ -447,1 +453,1 @@\n-    expect_equivalent_form(expected, tree);\n+    expect_equivalent_form(expected, tree, __LINE__);\n@@ -453,1 +459,1 @@\n-        { 1,  50, mtNone, si, State::Released},\n+        { 1,  50, mtNone, es, State::Released},\n@@ -455,1 +461,1 @@\n-        {75,  99, mtNone, si, State::Released},\n+        {75,  99, mtNone, es, State::Released},\n@@ -464,1 +470,1 @@\n-    expect_equivalent_form(expected, tree);\n+    expect_equivalent_form(expected, tree, __LINE__);\n@@ -716,4 +722,15 @@\n-        const NativeCallStack& start_stack = ncss.get(startn->val().out.stack());\n-        const NativeCallStack& end_stack = ncss.get(endn->val().in.stack());\n-        ASSERT_TRUE(starti.stack.equals(start_stack));\n-        ASSERT_TRUE(endi.stack.equals(end_stack));\n+        const NativeCallStack& start_stack = ncss.get(startn->val().out.reserved_stack());\n+        const NativeCallStack& end_stack = ncss.get(endn->val().in.reserved_stack());\n+        \/\/ If start-node of a reserved region is committed, the stack is stored in the second_stack of the node.\n+        if (startn->val().out.has_committed_stack()) {\n+          const NativeCallStack& start_second_stack = ncss.get(startn->val().out.committed_stack());\n+          ASSERT_TRUE(starti.stack.equals(start_stack) || starti.stack.equals(start_second_stack));\n+        } else {\n+          ASSERT_TRUE(starti.stack.equals(start_stack));\n+        }\n+        if (endn->val().in.has_committed_stack()) {\n+          const NativeCallStack& end_second_stack = ncss.get(endn->val().in.committed_stack());\n+          ASSERT_TRUE(endi.stack.equals(end_stack) || endi.stack.equals(end_second_stack));\n+        } else {\n+          ASSERT_TRUE(endi.stack.equals(end_stack));\n+        }\n@@ -742,0 +759,1180 @@\n+}\n+\n+template<int NodeCount> struct ExpectedTree {\n+  int nodes[NodeCount];\n+  MemTag tags[NodeCount + 1];\n+  VMATree::StateType states[NodeCount + 1];\n+  NativeCallStackStorage::StackIndex res_si[NodeCount + 1];\n+  NativeCallStackStorage::StackIndex com_si[NodeCount + 1];\n+};\n+template <int N>\n+void check_tree(Tree& tree,const ExpectedTree<N>& et, int line_no) {\n+  using Node = VMATree::TreapNode;\n+  auto left_released = [&](Node n) -> bool {\n+    return n.val().in.type() == VMATree::StateType::Released and\n+           n.val().in.mem_tag() == mtNone;\n+  };\n+  auto right_released = [&](Node n) -> bool {\n+    return n.val().out.type() == VMATree::StateType::Released and\n+           n.val().out.mem_tag() == mtNone;\n+  };\n+  for (int i = 0; i < N; i++) {\n+    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(et.nodes[i]);\n+    ASSERT_TRUE(r.start != nullptr);\n+    Node node = *r.start;\n+    ASSERT_EQ(node.key(), (VMATree::position)et.nodes[i]) << \"at line \" << line_no;\n+    if (i == (N -1)) { \/\/ last node\n+      EXPECT_TRUE(right_released(node)) << \"right-of last node is not Released\";\n+      break;\n+    }\n+    if (i == 0) { \/\/ first node\n+      EXPECT_TRUE(left_released(node)) << \"left-of first node is not Released\";\n+    }\n+    stringStream ss(50);\n+    ss.print(\"test at line: %d, for node: %d\", line_no, et.nodes[i]);\n+    const char* for_this_node = ss.base();\n+    EXPECT_EQ(node.val().out.type(), et.states[i+1]) << for_this_node;\n+    EXPECT_EQ(node.val().out.mem_tag(), et.tags[i+1]) << for_this_node;\n+    if (et.res_si[i+1] >= 0) {\n+      EXPECT_EQ(node.val().out.reserved_stack(), et.res_si[i+1]) << for_this_node;\n+      EXPECT_EQ(r.end->val().in.reserved_stack(), et.res_si[i+1]) << for_this_node;\n+    } else {\n+      EXPECT_FALSE(node.val().out.has_reserved_stack()) << for_this_node;\n+      EXPECT_FALSE(r.end->val().in.has_reserved_stack()) << for_this_node;\n+    }\n+    if (et.com_si[i+1] >= 0) {\n+      EXPECT_EQ(node.val().out.committed_stack(), et.com_si[i+1]) << for_this_node;\n+      EXPECT_EQ(r.end->val().in.committed_stack(), et.com_si[i+1]) << for_this_node;\n+    } else {\n+      EXPECT_FALSE(node.val().out.has_committed_stack()) << for_this_node;\n+      EXPECT_FALSE(r.end->val().in.has_committed_stack()) << for_this_node;\n+    }\n+  }\n+}\n+\n+TEST_VM_F(NMTVMATreeTest, SeparateStacksForCommitAndReserve) {\n+  using SIndex = NativeCallStackStorage::StackIndex;\n+  using State = VMATree::StateType;\n+  SIndex si_1 = si[0];\n+  SIndex si_2 = si[1];\n+\n+  const State Rs = State::Reserved;\n+  const State Rl = State::Released;\n+  const State C = State::Committed;\n+  VMATree::RegionData call_stack_1(si_1, mtTest);\n+  VMATree::RegionData call_stack_2(si_2, mtNone);\n+\n+  \/\/ Visualization guide\n+  \/\/ Nodes in the tree are shown in ascending order as:\n+  \/\/ A....B-----C*****D---E... means:\n+  \/\/   [A,B) is released\n+  \/\/   [B,C) is reserved, same as [D,E)\n+  \/\/   [C,D) is committed\n+  \/\/ Each node A in the tree has this metada (MemTag, State, Reserve Call-Stack, Commit Call-Stack);\n+  \/\/  one for the region to its left (called 'in'), and one for the region to its right (called 'out').\n+  \/\/ For every adjacent nodes of [A,B), always A.out == B.in (required).\n+  \/\/ In visualizations, we can avoid repeating metadata of A.out for B.in and write them once.\n+  \/\/ So for example, we write:\n+  \/\/                     A....B-----C*****D-----E...\n+  \/\/ MemTag:               mt1   mt2   mt3  mt4\n+  \/\/ State:                Rl    Rs    C    Rs\n+  \/\/ Reserve Call-Stack:   -     CS2   CS3  CS4\n+  \/\/ Commit Call-Stack:    -     CS2   CS5  CS4\n+  \/\/\n+  \/\/ where Rl = Released, Rs = Reserved and C = Committed.\n+  \/\/ '-' for call-stack means 'empty'\n+\n+\n+\n+  {\/\/ Check committing into a reserved region inherits the call stacks\n+    Tree tree;\n+    tree.reserve_mapping(0, 100, call_stack_1); \/\/ reserve in an empty tree\n+    \/\/ Pre: empty tree.\n+    \/\/ Post: .........0---------100.........\n+    \/\/        mtNone    mtTest       mtNone\n+    \/\/        Rl        Rs           Rl\n+    \/\/        -         si_1         -\n+    \/\/        -         -            -\n+    ExpectedTree<2> et1 = {{      0  , 100        },\n+                           {mtNone, mtTest, mtNone},\n+                           {Rl    , Rs    , Rl    },\n+                           {-1    , si_1  , -1    },\n+                           {-1    , -1    , -1    }};\n+    check_tree(tree, et1, __LINE__);\n+\n+    tree.commit_mapping(25, 25, call_stack_2, true); \/\/ commit at the middle of the region\n+    \/\/ Pre : .........0------------------------------100.........\n+    \/\/ Post: .........0---------25*********50--------100.........\n+    \/\/        mtNone    mtTest       mtTest   mtTest     mtNone\n+    \/\/        Rl        Rs           C        Rs         Rl\n+    \/\/        -         si_1         si_1     si_1       -\n+    \/\/        -         -            si_2     -          -\n+    ExpectedTree<4> et2 = {{      0  , 25,      50,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_2  , -1    , -1    }};\n+    check_tree(tree, et2, __LINE__);\n+\n+    tree.commit_mapping(0, 20, call_stack_2, true); \/\/ commit at the beginning of the region\n+    \/\/ Pre:  .........0-------------------25********50--------100.........\n+    \/\/ Post: .........0********20---------25********50--------100.........\n+    \/\/        mtNone    mtTest    mtTest      mtTest   mtTest     mtNone\n+    \/\/        Rl        C         Rs          C        Rs         Rl\n+    \/\/        -         si_1      si_1        si_1     si_1       -\n+    \/\/        -         si_2      -           si_2     -          -\n+    ExpectedTree<5> et3 = {{     0,     20,     25,     50,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , C     , Rs    , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , si_2  , -1    , si_2  , -1    , -1    }};\n+    check_tree(tree, et3, __LINE__);\n+\n+    tree.commit_mapping(80, 20, call_stack_2, true); \/\/ commit at the end of the region\n+    \/\/ Pre:  .........0********20---------25********50------------------100.........\n+    \/\/ Post: .........0********20---------25********50--------80********100.........\n+    \/\/        mtNone    mtTest    mtTest      mtTest   mtTest     mtTest    mtNone\n+    \/\/        Rl        C         Rs          C        Rs         C         Rl\n+    \/\/        -         si_1      si_1        si_1     si_1       si_1      -\n+    \/\/        -         si_2      -           si_2     -          si_2      -\n+    ExpectedTree<6> et4 = {{     0,     20,     25,     50,     80,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , C     , Rs    , C     , Rs    , C     , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , si_2  , -1    , si_2  , -1    , si_2  , -1    }};\n+    check_tree(tree, et4, __LINE__);\n+  }\n+  {\/\/ committing overlapped regions does not destroy the old call-stacks\n+    Tree tree;\n+    tree.reserve_mapping(0, 100, call_stack_1); \/\/ reserving in an empty tree\n+    \/\/ Pre: empty tree.\n+    \/\/ Post: .........0---------100.........\n+    \/\/        mtNone    mtTest       mtNone\n+    \/\/        Rl        Rs           Rl\n+    \/\/        -         si_1         -\n+    \/\/        -         -            -\n+    ExpectedTree<2> et1 = {{      0  , 100        },\n+                           {mtNone, mtTest, mtNone},\n+                           {Rl    , Rs    , Rl    },\n+                           {-1    , si_1  , -1    },\n+                           {-1    , -1    , -1    }};\n+    check_tree(tree, et1, __LINE__);\n+\n+    tree.commit_mapping(20, 20, call_stack_2, true);\n+    \/\/ Pre:  .........0----------------------------100.........\n+    \/\/ Post: .........0---------20********40-------100.........\n+    \/\/        mtNone    mtTest     mtTest    mtTest    mtNone\n+    \/\/        Rl        Rs           C       Rs        Rl\n+    \/\/        -         si_1         si_1    si_1      -\n+    \/\/        -         -            si_2     -        -\n+    ExpectedTree<4> et2 = {{     0,     20,     40,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_2  , -1    , -1    }};\n+    check_tree(tree, et2, __LINE__);\n+\n+    SIndex si_3 = si[2];\n+    VMATree::RegionData call_stack_3(si_3, mtTest);\n+    \/\/ commit with overlap at the region's start\n+    tree.commit_mapping(10, 20, call_stack_3);\n+    \/\/ Pre:  .........0-------------20**************40-------100.........\n+    \/\/ Post: .........0---------10********30********40-------100.........\n+    \/\/        mtNone    mtTest     mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl        Rs           C       C         Rs        Rl\n+    \/\/        -         si_1         si_1    si_1      si_1      -\n+    \/\/        -         -            si_3    si_2        -       -\n+    ExpectedTree<5> et3 = {{     0,     10,     30,     40,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_3  , si_2  , -1    , -1    }};\n+    check_tree(tree, et3, __LINE__);\n+\n+    SIndex si_4 = si[3];\n+    VMATree::RegionData call_stack_4(si_4, mtTest);\n+    \/\/ commit with overlap at the region's end\n+    tree.commit_mapping(30, 20, call_stack_4);\n+    \/\/ Pre:  .........0---------10********30**40-------------100.........\n+    \/\/ Post: .........0---------10********30********50-------100.........\n+    \/\/        mtNone    mtTest     mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl        Rs           C       C         Rs        Rl\n+    \/\/        -         si_1         si_1    si_1      si_1      -\n+    \/\/        -         -            si_3    si_4        -       -\n+    ExpectedTree<5> et4 = {{     0,     10,     30,     50,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_3  , si_4  , -1    , -1    }};\n+    check_tree(tree, et4, __LINE__);\n+  }\n+  {\/\/ uncommit should not store any call-stack\n+    Tree tree;\n+    tree.reserve_mapping(0, 100, call_stack_1);\n+\n+    tree.commit_mapping(20, 20, call_stack_2, true);\n+\n+    tree.commit_mapping(0, 10, call_stack_2, true);\n+\n+    tree.uncommit_mapping(0, 5, call_stack_2);\n+    \/\/ Pre:  .........0*****************10--------20********40-------100.........\n+    \/\/        mtNone         mtTest        mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl             C             Rs        C         Rs        Rl\n+    \/\/        -              si_1          si_1      si_1      si_1      -\n+    \/\/        -              si_2          -         si_2      -         -\n+    \/\/ Post: .........0--------5********10--------20********40-------100.........\n+    \/\/        mtNone    mtTest   mtTest    mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl        Rs       C         Rs        C         Rs        Rl\n+    \/\/        -         si_1     si_1      si_1      si_1      si_1      -\n+    \/\/        -         -        si_2      -         si_2      -         -\n+    ExpectedTree<6> et1 = {{     0,     5,      10,     20,     40,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , Rs    , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_2  , -1    , si_2  , -1    , -1    }};\n+    check_tree(tree, et1, __LINE__);\n+\n+    tree.uncommit_mapping(20, 10, call_stack_2);\n+    \/\/ Pre:  .........0--------5********10---20*************40-------100.........\n+    \/\/ Post: .........0--------5********10--------30********40-------100.........\n+    \/\/        mtNone    mtTest   mtTest    mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl        Rs       C         Rs        C         Rs        Rl\n+    \/\/        -         si_1     si_1      si_1      si_1      si_1      -\n+    \/\/        -         -        si_2      -         si_2      -         -\n+    ExpectedTree<6> et2 = {{     0,     5,      10,     30,     40,    100        },\n+                           {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , C     , Rs    , C     , Rs    , Rl    },\n+                           {-1    , si_1  , si_1  , si_1  , si_1  , si_1  , -1    },\n+                           {-1    , -1    , si_2  , -1    , si_2  , -1    , -1    }};\n+    check_tree(tree, et2, __LINE__);\n+  }\n+  {\/\/ reserve after reserve, but only different call-stacks\n+    SIndex si_4 = si[3];\n+    VMATree::RegionData call_stack_4(si_4, mtTest);\n+\n+    Tree tree;\n+    tree.reserve_mapping(0, 100, call_stack_1);\n+    tree.reserve_mapping(10, 10, call_stack_4);\n+    \/\/ Pre:  .........0----------------------------100.........\n+    \/\/ Post: .........0--------10--------20--------100.........\n+    \/\/        mtNone   mtTest    mtTest    mtTest    mtNone\n+    \/\/        Rl       Rs        Rs         Rs       Rl\n+    \/\/        -        si_1      si_2      si_1      -\n+    \/\/        -        -         -         -         -\n+    ExpectedTree<4> et1 = {{     0,     10,     20,     100       },\n+                           {mtNone, mtTest, mtTest, mtTest, mtNone},\n+                           {Rl    , Rs    , Rs    , Rs    , Rl    },\n+                           {-1    , si_1  , si_4  , si_1  , -1    },\n+                           {-1    , -1    , -1    , -1    , -1    }};\n+    check_tree(tree, et1, __LINE__);\n+  }\n+  {\/\/ commit without reserve\n+    Tree tree;\n+    tree.commit_mapping(0, 100, call_stack_1);\n+    ExpectedTree<2> et = {{     0,     100       },\n+                          {mtNone, mtTest, mtNone},\n+                          {Rl    , C     , Rl    },\n+                          {-1    , si_1  , -1    },\n+                          {-1    , si_1  , -1    }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  {\/\/ reserve after commit\n+    Tree tree;\n+    tree.commit_mapping(0, 100, call_stack_2);\n+    tree.reserve_mapping(0, 100, call_stack_1);\n+    ExpectedTree<2> et = {{     0,     100       },\n+                          {mtNone, mtTest, mtNone},\n+                          {Rl    , Rs    , Rl    },\n+                          {-1    , si_1  , -1    },\n+                          {-1    , -1    , -1    }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+}\n+\n+\/\/ Nodes in the tree :   R.....X......W......U....Z\n+\/\/ New request (A!=X):           A-------B\n+\/\/ New request (A==X):         A-------B\n+\/\/ Operations: {Reserve, Commit, Uncommit, Release}\n+\/\/ State of [X, W) region: {released, reserved, committed}\n+\/\/ total number of cases:\n+\/\/  no.of(Operations) x no.of(States) x no.of{A == X | A != X} =\n+\/\/        4           x     3         x        2               = 24\n+\/\/ AllCases_A_eq_X contains 12 cases for A == X\n+\/\/ AllCases_A_neq_X contains 12 cases for A != X\n+TEST_VM_F(NMTVMATreeTest, AllCases_A_eq_X) {\n+  using SIndex = NativeCallStackStorage::StackIndex;\n+  using State = VMATree::StateType;\n+  SIndex si_1 = si[0];\n+  SIndex si_2 = si[1];\n+  SIndex si_3 = si[2];\n+\n+  const bool ok_to_run = false;\n+  const State Rs = State::Reserved;\n+  const State Rl = State::Released;\n+  const State C = State::Committed;\n+  VMATree::RegionData call_stack_1(si_1, mtTest);\n+  VMATree::RegionData call_stack_1_mtNone(si_1, mtNone);\n+  VMATree::RegionData call_stack_2(si_2, mtTest);\n+  VMATree::RegionData call_stack_2_mtNone(si_2, mtNone);\n+  VMATree::RegionData call_stack_3(si_3, mtTest);\n+\n+  { \/\/ Do 'Reserve' for a released region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.release_mapping(100, 100);\n+    \/\/ New request\n+    tree.reserve_mapping(100, 150, call_stack_2);\n+    \/\/ Pre:  ........0--------100................200------------------------300********400........\n+    \/\/ Request:               100--------------------------------250\n+    \/\/ Post: ........0--------100--------------------------------250--------300********400........\n+    \/\/        mtNone   mtTest                 mtTest                 mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs                     Rs                     Rs         C          Rl\n+    \/\/        -        si_1                   si_2                   si_1       si_1       -\n+    \/\/        -        -                      -                      -          si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    250,    300,    400         },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_2  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Commit' for a released region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.release_mapping(100, 100);\n+    \/\/ New request\n+    tree.commit_mapping(100, 150, call_stack_2);\n+    \/\/ Pre:  ........0--------100................200------------------------300********400........\n+    \/\/ Request:               100********************************250\n+    \/\/ Post: ........0--------100********************************250--------300********400........\n+    \/\/        mtNone   mtTest                 mtTest                 mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs                     C                      Rs         C          Rl\n+    \/\/        -        si_1                   si_2                   si_1       si_1       -\n+    \/\/        -        -                      si_2                   -          si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    250,    300,    400         },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , C     , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_2  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , si_2  , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Uncommit' for a released region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.release_mapping(100, 100);\n+    \/\/ New request\n+    \/\/ 8354115\n+    if (ok_to_run) tree.uncommit_mapping(100, 150, call_stack_2);\n+    \/\/\n+    \/\/ to be re-written after 8354115\n+    \/\/ Pre:  ........0--------100................200------------------------300********400........\n+    \/\/ Request:               100--------------------------------250\n+    \/\/ Post: ........0--------100????????????????200?????????????250--------300********400........\n+    \/\/        mtNone   mtTest                 mtTest                 mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs                     Rs                     Rs         C          Rl\n+    \/\/        -        si_1                   si_2                   si_1       si_1       -\n+    \/\/        -        -                      -                      -          si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    250,    300,    400         },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_2  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , si_1  , -1     }};\n+    if (ok_to_run) check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Release' for a released region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.release_mapping(100, 100);\n+    \/\/ New request\n+    tree.release_mapping(100, 150);\n+    \/\/ Pre:  ........0--------100................200------------------------300********400........\n+    \/\/ Request:               100................................250\n+    \/\/ Post: ........0--------100................................250--------300********400........\n+    \/\/        mtNone   mtTest                 mtNone                 mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs                     Rl                     Rs         C          Rl\n+    \/\/        -        si_1                   -                      si_1       si_1       -\n+    \/\/        -        -                      -                      -          si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    250,    300,    400         },\n+                          {mtNone, mtTest, mtNone, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , -1    , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Reserve' for a reserved region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.reserve_mapping(100, 100, call_stack_1);\n+    \/\/ New request\n+    tree.reserve_mapping(100, 150, call_stack_2);\n+    \/\/ Pre:  ........0--------100----------------200------------------------300********400........\n+    \/\/ Request:               100--------------------------------250\n+    \/\/ Post: ........0--------100--------------------------------250--------300********400........\n+    \/\/        mtNone   mtTest                 mtTest                 mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs                     Rs                     Rs         C          Rl\n+    \/\/        -        si_1                   si_2                   si_1       si_1       -\n+    \/\/        -        -                      -                      -          si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    250,    300,    400         },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_2  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Commit' for a reserved region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.reserve_mapping(100, 100, call_stack_1);\n+    \/\/ New request\n+    tree.commit_mapping(100, 150, call_stack_2);\n+    \/\/ Pre:  ........0--------100----------------200------------------------300********400........\n+    \/\/ Request:               100********************************250\n+    \/\/ Post: ........0--------100********************************250--------300********400........\n+    \/\/        mtNone   mtTest                 mtTest                 mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs                     C                      Rs         C          Rl\n+    \/\/        -        si_1                   si_2                   si_1       si_1       -\n+    \/\/        -        -                      si_2                   -          si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    250,    300,    400         },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , C     , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_1  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , si_2  , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Uncommit' over two different reserved regions\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.reserve_mapping(100, 100, call_stack_2);\n+    \/\/ New request\n+    tree.uncommit_mapping(100, 150, call_stack_1_mtNone);\n+    \/\/ Pre:  ........0--------100----------------200------------------------300********400........\n+    \/\/ Request:               100--------------------------------250\n+    \/\/ Post: ........0--------100----------------200-------------250--------300********400........\n+    \/\/        mtNone   mtTest        mtTest             mtTest       mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs            Rs                 Rs           Rs         C          Rl\n+    \/\/        -        si_1          si_2               si_1         si_1       si_1       -\n+    \/\/        -        -             -                  -            -          si_1       -\n+    ExpectedTree<6> et = {{     0,    100,    200,    250,    300,    400         },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rs    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_2  , si_1  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , -1    , si_1  , -1     }};\n+    if (ok_to_run) check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Release' for a reserved region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.reserve_mapping(100, 100, call_stack_1);\n+    \/\/ New request\n+    tree.release_mapping(100, 150);\n+    \/\/ Pre:  ........0--------100----------------200------------------------300********400........\n+    \/\/ Request:               100................................250\n+    \/\/ Post: ........0--------100................................250--------300********400........\n+    \/\/        mtNone   mtTest                 mtNone                 mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs                     Rl                     Rs         C          Rl\n+    \/\/        -        si_1                   -                      si_1       si_1       -\n+    \/\/        -        -                      -                      -          si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    250,    300,    400         },\n+                          {mtNone, mtTest, mtNone, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , -1    , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Reserve' for a committed region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.reserve_mapping(100, 150, call_stack_2);\n+    \/\/ Pre:  ........0--------100****************200------------------------300********400........\n+    \/\/ Request:               100--------------------------------250\n+    \/\/ Post: ........0--------100--------------------------------250--------300********400........\n+    \/\/        mtNone   mtTest                 mtTest                 mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs                     Rs                     Rs         C          Rl\n+    \/\/        -        si_1                   si_2                   si_1       si_1       -\n+    \/\/        -        -                      -                      -          si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    250,    300,    400         },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_2  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Commit' for a committed region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.commit_mapping(100, 150, call_stack_2);\n+    \/\/ Pre:  ........0--------100****************200------------------------300********400........\n+    \/\/ Request:               100********************************250\n+    \/\/ Post: ........0--------100********************************250--------300********400........\n+    \/\/        mtNone   mtTest                 mtTest                 mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs                     C                      Rs         C          Rl\n+    \/\/        -        si_1                   si_1                   si_1       si_1       -\n+    \/\/        -        -                      si_2                   -          si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    250,    300,    400         },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , C     , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_1  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , si_2  , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Uncommit' for a committed region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.uncommit_mapping(100, 150, call_stack_1_mtNone);\n+    \/\/ Pre:  ........0--------100****************200------------------300********400........\n+    \/\/ Request:               100--------------------------250\n+    \/\/ Post: ........0------------------------------------------------300********400........\n+    \/\/        mtNone                    mtTest                            mtTest     mtNone\n+    \/\/        Rl                        Rs                                C          Rl\n+    \/\/        -                         si_1                              si_1       -\n+    \/\/        -                         -                                 si_1       -\n+    ExpectedTree<3> et = {{     0,    300,    400         },\n+                          {mtNone, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_1  , -1     },\n+                          {-1    , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Release' for a committed region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.release_mapping(100, 150);\n+    \/\/ Pre:  ........0--------100****************200------------------------300********400........\n+    \/\/ Request:               100................................250\n+    \/\/ Post: ........0--------100................................250--------300********400........\n+    \/\/        mtNone   mtTest                 mtNone                 mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs                     Rl                     Rs         C          Rl\n+    \/\/        -        si_1                   -                      si_1       si_1       -\n+    \/\/        -        -                      -                      -          si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    250,    300,    400          },\n+                          {mtNone, mtTest, mtNone, mtTest, mtTest, mtNone  },\n+                          {Rl    , Rs    , Rl    , Rs    , C     , Rl      },\n+                          {-1    , si_1  , -1    , si_1  , si_1  , -1      },\n+                          {-1    , -1    , -1    , -1    , si_1  , -1      }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+}\n+\n+TEST_VM_F(NMTVMATreeTest, AllCases_A_neq_X) {\n+  using SIndex = NativeCallStackStorage::StackIndex;\n+  using State = VMATree::StateType;\n+  SIndex si_1 = si[0];\n+  SIndex si_2 = si[1];\n+  SIndex si_3 = si[2];\n+\n+  const bool ok_to_run = false;\n+  const State Rs = State::Reserved;\n+  const State Rl = State::Released;\n+  const State C = State::Committed;\n+  VMATree::RegionData call_stack_1(si_1, mtTest);\n+  VMATree::RegionData call_stack_1_mtNone(si_1, mtNone);\n+  VMATree::RegionData call_stack_2(si_2, mtTest);\n+  VMATree::RegionData call_stack_3(si_3, mtTest);\n+\n+  { \/\/ Do 'Reserve' for a released region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.release_mapping(100, 100);\n+    \/\/ New request\n+    tree.reserve_mapping(150, 100, call_stack_2);\n+    \/\/ Pre:  ........0--------100................200-----------------------300*********400........\n+    \/\/ Request:                          150----------------250\n+    \/\/ Post: ........0--------100........150----------------250------------300*********400........\n+    \/\/        mtNone   mtTest     mtNone         mtTest           mtTest        mtTest     mtNone\n+    \/\/        Rl       Rs         Rl             Rs               Rs            C          Rl\n+    \/\/        -        si_1       -              si_2             si_1          si_1       -\n+    \/\/        -        -          -              -                -             si_1       -\n+    ExpectedTree<6> et = {{     0,    100,    150,    250,    300,   400          },\n+                          {mtNone, mtTest, mtNone, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl    , Rs    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , -1    , si_2  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Commit' for a released region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.release_mapping(100, 100);\n+    \/\/ New request\n+    tree.commit_mapping(150, 100, call_stack_2);\n+    \/\/ Pre:  ........0--------100................200-----------------------300********400........\n+    \/\/ Request:                          150****************250\n+    \/\/ Post: ........0--------100........150****************250------------300********400........\n+    \/\/        mtNone   mtTest     mtNone         mtTest           mtTest       mtTest     mtNone\n+    \/\/        Rl       Rs         Rl             C                Rs           C          Rl\n+    \/\/        -        si_1       -1             si_2             si_1         si_1       -\n+    \/\/        -        -          -1             si_2             -            si_1       -\n+    ExpectedTree<6> et = {{     0,    100,    150,    250,    300,   400          },\n+                          {mtNone, mtTest, mtNone, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl    , C     , Rs    , C     , Rl     },\n+                          {-1    , si_1  , -1    , si_2  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , si_2  , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Uncommit' for a released region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.release_mapping(100, 100);\n+    \/\/ New request\n+    \/\/ 8354115\n+    if (ok_to_run) tree.uncommit_mapping(150, 100, call_stack_2);\n+    \/\/ To be re-written after 8354115\n+    \/\/ Pre:  ........0--------100................200-----------------------300********400........\n+    \/\/ Request:                          150----------------250\n+    \/\/ Post: ........0--------100........150----------------250------------300********400........\n+    \/\/        mtNone   mtTest     mtNone         mtTest           mtTest       mtTest     mtNone\n+    \/\/        Rl       Rs         Rl             Rs               Rs           C          Rl\n+    \/\/        -        si_1       -              si_2             si_1         si_1       -\n+    \/\/        -        -          -              -                -            si_1       -\n+    ExpectedTree<6> et = {{     0,    100,    150,    250,    300,   400          },\n+                          {mtNone, mtTest, mtNone, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl    , Rs    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , -1    , si_2  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , -1    , si_1  , -1     }};\n+    if (ok_to_run) check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Release' for a released region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.release_mapping(100, 100);\n+    \/\/ New request\n+    tree.release_mapping(150, 100);\n+    \/\/ Pre:  ........0--------100................200--------------------300********400........\n+    \/\/ Request:                           150............250\n+    \/\/ Post: ........0--------100........................250------------300********400........\n+    \/\/        mtNone   mtTest             mtNone               mtTest       mtTest     mtNone\n+    \/\/        Rl       Rs                 Rl                   Rs           C          Rl\n+    \/\/        -        si_1               -                    si_1         si_1       -\n+    \/\/        -        -                  -                    -            si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    250,    300,   400          },\n+                          {mtNone, mtTest,  mtNone, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    ,  Rl   , Rs    , C     , Rl     },\n+                          {-1    , si_1  ,  -1   , si_1  , si_1  , -1     },\n+                          {-1    , -1    ,  -1   , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Reserve' for a reserved region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.reserve_mapping(100, 100, call_stack_3);\n+    \/\/ New request\n+    tree.reserve_mapping(150, 100, call_stack_2);\n+    \/\/ Pre:  ........0--------100----------------200-----------------------300********400........\n+    \/\/ Request:                          150----------------250\n+    \/\/ Post: ........0--------100--------150----------------250------------300********400........\n+    \/\/        mtNone   mtTest     mtTest         mtTest           mtTest       mtTest     mtNone\n+    \/\/        Rl       Rs         Rs             Rs               Rs           C          Rl\n+    \/\/        -        si_1       si_3           si_2             si_1         si_1       -\n+    \/\/        -        -          -              -                -            si_1       -\n+    ExpectedTree<6> et = {{     0,    100,    150,    250,    300,   400          },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rs    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_3  , si_2  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Commit' over two different reserved regions\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.reserve_mapping(100, 100, call_stack_3);\n+    \/\/ New request\n+    tree.commit_mapping(150, 100, call_stack_2);\n+    \/\/ Pre:  ........0--------100-------------------200--------------------300********400........\n+    \/\/                   si_1         si_3                  si_1                si_1\n+    \/\/\n+    \/\/ Request:                          150*******************250\n+    \/\/ Post: ........0--------100--------150********200********250---------300********400........\n+    \/\/        mtNone   mtTest     mtTest     mtTest     mtTest      mtTest     mtTest     mtNone\n+    \/\/        Rl       Rs         Rs         C          C           Rs         C          Rl\n+    \/\/        -        si_1       si_3       si_3       si_1        si_1       si_1       -\n+    \/\/        -        -          -          si_2       si_2        -          si_1       -\n+    ExpectedTree<7> et = {{     0,    100,    150,    200,    250,    300,   400          },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , C     , C     , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_3  , si_3  , si_1  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , si_2  , si_2  , -1    , si_1  , -1     }};\n+    if (ok_to_run) check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Uncommit' over two different reserved regions\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.reserve_mapping(100, 100, call_stack_2);\n+    \/\/ New request\n+    tree.uncommit_mapping(150, 100, call_stack_1_mtNone);\n+    \/\/ Pre:  ........0--------100----------------200-----------------------300********400........\n+    \/\/                  si_1          si_2                 si_1                  si_1\n+    \/\/\n+    \/\/ Reqquest:                      150-------------------250\n+    \/\/ Pre:  ........0--------100----------------200-----------------------300********400........\n+    \/\/        mtNone   mtTest        mtTest                mtTest              mtTest     mtNone\n+    \/\/        Rl       Rs            Rs                    Rs                  C          Rl\n+    \/\/        -        si_1          si_2                  si_1                si_1       -\n+    \/\/        -        -             -                     -                   si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    200,    300,   400          },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_2  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , si_1  , -1     }};\n+    if (ok_to_run) check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Release' for a reserved region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.reserve_mapping(100, 100, call_stack_2);\n+    \/\/ New request\n+    tree.release_mapping(150, 100);\n+    \/\/ Pre:  ........0--------100----------------200-----------------------300********400........\n+    \/\/ Request:                          150................250\n+    \/\/ Post: ........0--------100--------150................250------------300********400........\n+    \/\/        mtNone   mtTest     mtTest         mtNone           mtTest       mtTest     mtNone\n+    \/\/        Rl       Rs         Rs             Rl               Rs           C          Rl\n+    \/\/        -        si_1       si_2           -                si_1         si_1       -\n+    \/\/        -        -          -              -                -            si_1       -\n+    ExpectedTree<6> et = {{     0,    100,    150,    250,    300,   400          },\n+                          {mtNone, mtTest, mtTest, mtNone, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rl    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_2  , -1    , si_1  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Reserve' for a committed region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.reserve_mapping(150, 100, call_stack_2);\n+    \/\/ Pre:  ........0--------100****************200-----------------------300********400........\n+    \/\/ Request:                          150----------------250\n+    \/\/ Post: ........0--------100********150----------------250------------300********400........\n+    \/\/        mtNone   mtTest     mtTest         mtTest           mtTest       mtTest     mtNone\n+    \/\/        Rl       Rs         C              Rs               Rs           C          Rl\n+    \/\/        -        si_1       si_1           si_2             si_1         si_1       -\n+    \/\/        -        -          si_1           -                -            si_1       -\n+    ExpectedTree<6> et = {{     0,    100,    150,    250,    300,   400          },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , C     , Rs    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_1  , si_2  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , si_1  , -1    , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Commit' for a committed region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.commit_mapping(150, 100, call_stack_2);\n+    \/\/ Pre:  ........0--------100****************200-----------------------300********400........\n+    \/\/ Request:                          150****************250\n+    \/\/ Post: ........0--------100********150****************250------------300********400........\n+    \/\/        mtNone   mtTest     mtTest         mtTest           mtTest       mtTest     mtNone\n+    \/\/        Rl       Rs         C              C                Rs           C          Rl\n+    \/\/        -        si_1       si_1           si_1             si_1         si_1       -\n+    \/\/        -        -          si_1           si_2             -            si_1       -\n+    ExpectedTree<6> et = {{     0,    100,    150,    250,    300,   400          },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , C     , C     , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_1  , si_1  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , si_1  , si_2  , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Uncommit' for a committed region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.uncommit_mapping(150, 100, call_stack_1_mtNone);\n+    \/\/ Pre:  ........0--------100*******************200--------------------300********400........\n+    \/\/ Request:                          150--------------------250\n+    \/\/ Post: ........0--------100********150-------------------------------300********400........\n+    \/\/        mtNone   mtTest     mtTest                mtTest                 mtTest     mtNone\n+    \/\/        Rl       Rs         C                     Rs                     C          Rl\n+    \/\/        -        si_1       si_1                  si_1                   si_1       -\n+    \/\/        -        -          si_1                  -                      si_1       -\n+    ExpectedTree<5> et = {{     0,    100,    150,    300,   400          },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , C     , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_1  , si_1  , si_1  , -1     },\n+                          {-1    , -1    , si_1  , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Release' for a committed region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 400, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.release_mapping(150, 100);\n+    \/\/ Pre:  ........0--------100****************200-----------------------300********400........\n+    \/\/ Request:                          150................250\n+    \/\/ Post: ........0--------100********150................250------------300********400........\n+    \/\/        mtNone   mtTest     mtTest         mtNone           mtTest       mtTest     mtNone\n+    \/\/        Rl       Rs         C              Rl               Rs           C          Rl\n+    \/\/        -        si_1       si_1           -                si_1         si_1       -\n+    \/\/        -        -          si_1           -                -            si_1       -\n+    ExpectedTree<6> et = {{     0,    100,    150,    250,    300,   400          },\n+                          {mtNone, mtTest, mtTest, mtNone, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , C     , Rl    , Rs    , C     , Rl     },\n+                          {-1    , si_1  , si_1  , -1    , si_1  , si_1  , -1     },\n+                          {-1    , -1    , si_1  , -1    , -1    , si_1  , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+}\n+\n+TEST_VM_F(NMTVMATreeTest, MultipleRegionsAllWithSameTag) {\n+  using SIndex = NativeCallStackStorage::StackIndex;\n+  using State = VMATree::StateType;\n+  SIndex si_1 = si[0];\n+  SIndex si_2 = si[1];\n+  SIndex si_3 = si[2];\n+\n+  const bool ok_to_run = false;\n+  const State Rs = State::Reserved;\n+  const State Rl = State::Released;\n+  const State C = State::Committed;\n+  VMATree::RegionData call_stack_1(si_1, mtTest);\n+  VMATree::RegionData call_stack_1_mtNone(si_1, mtNone);\n+  VMATree::RegionData call_stack_2(si_2, mtTest);\n+  VMATree::RegionData call_stack_2_mtNone(si_2, mtNone);\n+  VMATree::RegionData call_stack_3_mtNone(si_3, mtNone);\n+\n+  { \/\/ Do 'Reserve' over multiple committed\/reserved regions\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 1000, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(500, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.reserve_mapping(50, 900, call_stack_2);\n+    \/\/ Pre:     ........0----------------100*********200--------300********400--------500********600-------------------1000........\n+    \/\/ Request: (reserve)        50-------------------------------------------------------------------------950\n+    \/\/ Post:    ........0--------50-------------------------------------------------------------------------950--------1000........\n+    \/\/           mtNone   mtTest                                 mtTest                                         mtTest      mtNone\n+    \/\/           Rl       Rs                                     Rs                                             Rs          Rl\n+    \/\/           -        si_1                                   si_2                                           si_1        -\n+    \/\/           -        -                                      -                                              -           -\n+    ExpectedTree<4> et = {{     0,    50,    950,    1000         },\n+                          {mtNone, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rs    , Rl     },\n+                          {-1    , si_1  , si_2  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Reserve' [A, B) over multiple committed\/reserved regions where B already exists in nodes\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 1000, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(500, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.reserve_mapping(50, 550, call_stack_2);\n+    \/\/ Pre:     ........0----------------100*********200--------300********400--------500********600-------------------1000........\n+    \/\/ Request:                  50--------------------------------------------------------------600\n+    \/\/ Post:    ........0--------50--------------------------------------------------------------600-------------------1000........\n+    \/\/           mtNone                                          mtTest                                   mtTest            mtNone\n+    \/\/           Rl                                              Rs                                       Rs                Rl\n+    \/\/           -                                               si_2                                     si_1              -\n+    \/\/           -                                               -                                        -                 -\n+    ExpectedTree<4> et = {{     0,    50,    600,    1000         },\n+                          {mtNone, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rs    , Rl     },\n+                          {-1    , si_1  , si_2  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Reserve' [A, B) over multiple committed\/reserved regions where A already exists in nodes\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 1000, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(500, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.reserve_mapping(0, 950, call_stack_2);\n+    \/\/ Pre:     ........0----------------100*********200--------300********400--------500********600-------------------1000........\n+    \/\/ Request:         0-----------------------------------------------------------------------------------950\n+    \/\/ Post:    ........0-----------------------------------------------------------------------------------950--------1000........\n+    \/\/           mtNone                                          mtTest                                         mtTest      mtNone\n+    \/\/           Rl                                              Rs                                             Rs          Rl\n+    \/\/           -                                               si_2                                           si_1        -\n+    \/\/           -                                               -                                              -           -\n+    ExpectedTree<3> et = {{     0,    950,    1000        },\n+                          {mtNone, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rl     },\n+                          {-1    , si_2  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Uncommit' over multiple committed\/reserved regions\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 1000, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(500, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.uncommit_mapping(50, 900, call_stack_1_mtNone);\n+    \/\/ Pre:     ........0----------------100*********200--------300********400--------500********600-------------------1000........\n+    \/\/ Request: (uncommit)       50-------------------------------------------------------------------------950\n+    \/\/ Post:    ........0----------------------------------------------------------------------------------------------1000........\n+    \/\/           mtNone                                           mtTest                                                    mtNone\n+    \/\/           Rl                                               Rs                                                        Rl\n+    \/\/           -                                                si_1                                                      -\n+    \/\/           -                                                -                                                         -\n+    ExpectedTree<2> et = {{     0,   1000         },\n+                          {mtNone, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl     },\n+                          {-1    , si_1  , -1     },\n+                          {-1    , -1    , -1     }};\n+    check_tree(tree, et, __LINE__);\n+    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(50);\n+    EXPECT_EQ((int)r.start->key(), 0);\n+    EXPECT_EQ((int)r.end->key(), 1000);\n+  }\n+  { \/\/ Do 'Uncommit' over multiple committed\/reserved regions with different call-stacks\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 1000, call_stack_1);\n+    tree.reserve_mapping(100, 100, call_stack_2);\n+    tree.reserve_mapping(300, 100, call_stack_2);\n+    tree.reserve_mapping(500, 100, call_stack_2);\n+    \/\/ New request\n+    tree.uncommit_mapping(50, 900, call_stack_3_mtNone); \/\/ The call-stack should not be taken into account\n+\n+    \/\/ Pre:     ........0----------------100---------200--------300--------400--------500--------600-------------------1000........\n+    \/\/                         si_1             si_2       si_1      si_2       si_1       si_2          si_1               -\n+    \/\/\n+    \/\/ Request: (uncommit)       50-----------------------------------------------------------------------------950\n+    \/\/                                                       si_3\n+    \/\/\n+    \/\/ Post:    ........0----------------100---------200--------300--------400--------500--------600-------------------1000........\n+    \/\/           mtNone       mtTest         mtTest      mtTest     mtTest     mtTest     mtTest        mtTest              mtNone                                      mtNone\n+    \/\/           Rl           Rs             Rs          Rs         Rs         Rs         Rs            Rs                  Rl\n+    \/\/           -            si_1           si_2        si_1       si_2       si_1       si_2          si_1                -\n+    \/\/           -            -              -           -          -          -          -             -                   -\n+    ExpectedTree<8> et = {{     0,    100,    200,    300,    400,    500,    600,   1000         },\n+                          {mtNone, mtTest, mtTest, mtTest, mtTest, mtTest, mtTest, mtTest, mtNone },\n+                          {Rl    , Rs    , Rs    , Rs    , Rs    , Rs    , Rs    , Rs    , Rl     },\n+                          {-1    , si_1  , si_2  , si_1  , si_2  , si_1  , si_2  , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , -1    , -1    , -1    , -1    , -1     }};\n+    if (ok_to_run) check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Uncommit' [A,B) over multiple committed\/reserved regions where B already exists in the nodes\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 1000, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(500, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.uncommit_mapping(50, 550, call_stack_1_mtNone);\n+    \/\/ Pre:     ........0----------------100*********200--------300********400--------500********600-------------------1000........\n+    \/\/ Request: (uncommit)       50--------------------------------------------------------------600\n+    \/\/ Post:    ........0----------------------------------------------------------------------------------------------1000........\n+    \/\/           mtNone                                           mtTest                                                    mtNone\n+    \/\/           Rl                                               Rs                                                        Rl\n+    \/\/           -                                                si_1                                                      -\n+    \/\/           -                                                -                                                         -\n+    ExpectedTree<2> et = {{     0,   1000         },\n+                          {mtNone, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl     },\n+                          {-1    , si_1  , -1     },\n+                          {-1    , -1    , -1     }};\n+    check_tree(tree, et, __LINE__);\n+    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(50);\n+    EXPECT_EQ((int)r.start->key(), 0);  \/\/ make sure 600 is removed\n+    EXPECT_EQ((int)r.end->key(), 1000);\n+  }\n+  { \/\/ Do 'Uncommit' [A,B) over multiple committed\/reserved regions where A already exists in the nodes\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 1000, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(500, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.uncommit_mapping(100, 850, call_stack_1_mtNone);\n+    \/\/ Pre:     ........0----------------100*********200--------300********400--------500********600-------------------1000........\n+    \/\/ Request: (uncommit)               100--------------------------------------------------------------950\n+    \/\/ Post:    ........0----------------------------------------------------------------------------------------------1000........\n+    \/\/           mtNone                                           mtTest                                                    mtNone\n+    \/\/           Rl                                               Rs                                                        Rl\n+    \/\/           -                                                si_1                                                      -\n+    \/\/           -                                                -                                                         -\n+    ExpectedTree<2> et = {{     0,   1000         },\n+                          {mtNone, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl     },\n+                          {-1    , si_1  , -1     },\n+                          {-1    , -1    , -1     }};\n+    check_tree(tree, et, __LINE__);\n+    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(50);\n+    EXPECT_EQ((int)r.start->key(), 0);  \/\/ make sure both 50 and 600 are removed\n+    EXPECT_EQ((int)r.end->key(), 1000);\n+  }\n+  { \/\/ Do 'Release' over multiple committed\/reserved regions\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 1000, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(500, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.release_mapping(50, 900);\n+    \/\/ Pre:     ........0----------------100*********200--------300********400--------500********600-------------------1000........\n+    \/\/ Request:                  50-------------------------------------------------------------------------950\n+    \/\/ Post:    ........0--------50.........................................................................950--------1000........\n+    \/\/           mtNone   mtTest                                 mtNone                                         mtTest      mtNone\n+    \/\/           Rl       Rs                                     Rl                                             Rs          Rl\n+    \/\/           -        si_1                                   -                                              si_1        -\n+    \/\/           -        -                                      -                                              -           -\n+    ExpectedTree<4> et = {{     0,    50,    950,    1000         },\n+                          {mtNone, mtTest, mtNone, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl    , Rs    , Rl     },\n+                          {-1    , si_1  , -1    , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Release' [A,B) over multiple committed\/reserved regions where B already exists in the nodes\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 1000, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(500, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.release_mapping(50, 550);\n+    \/\/ Pre:     ........0----------------100*********200--------300********400--------500********600-------------------1000........\n+    \/\/ Request:                  50..............................................................600\n+    \/\/ Post:    ........0--------50..............................................................600-------------------1000........\n+    \/\/           mtNone   mtTest                                 mtNone                                    mtTest           mtNone\n+    \/\/           Rl       Rs                                     Rl                                        Rs               Rl\n+    \/\/           -        si_1                                   -                                         si_1             -\n+    \/\/           -        -                                      -                                         -               -\n+    ExpectedTree<4> et = {{     0,    50,    600,    1000         },\n+                          {mtNone, mtTest, mtNone, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl    , Rs    , Rl     },\n+                          {-1    , si_1  , -1    , si_1  , -1     },\n+                          {-1    , -1    , -1    , -1    , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Release' [A,B) over multiple committed\/reserved regions where B is start of a released region\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 1000, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(500, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.release_mapping(50, 950);\n+    \/\/ Pre:     ........0----------------100*********200--------300********400--------500********600-------------------1000........\n+    \/\/ Request:                  50....................................................................................1000\n+    \/\/ Post:    ........0--------50.........\n+    \/\/           mtNone   mtTest    mtNone\n+    \/\/           Rl       Rs        Rl\n+    \/\/           -        si_1      -\n+    \/\/           -        -         -\n+    ExpectedTree<2> et = {{     0,    50,         },\n+                          {mtNone, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl     },\n+                          {-1    , si_1  , -1     },\n+                          {-1    , -1    , -1     }};\n+    check_tree(tree, et, __LINE__);\n+  }\n+  { \/\/ Do 'Release' [A,B) over multiple committed\/reserved regions where A already exists in the nodes\n+    Tree tree;\n+    \/\/ Prepare pre-cond\n+    tree.reserve_mapping(0, 1000, call_stack_1);\n+    tree.commit_mapping(100, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(300, 100, call_stack_1_mtNone, true);\n+    tree.commit_mapping(500, 100, call_stack_1_mtNone, true);\n+    \/\/ New request\n+    tree.release_mapping(0, 700);\n+    \/\/ Pre:     ........0----------------100*********200--------300********400--------500********600-------------------1000........\n+    \/\/ Request:         0..................................................................................700\n+    \/\/ Post:    ...........................................................................................700---------1000........\n+    \/\/                                                   mtNone                                                 mtTest      mtNone\n+    \/\/                                                   Rl                                                     Rs          Rl\n+    \/\/                                                   -                                                      si_1        -\n+    \/\/                                                   -                                                      -           -\n+    ExpectedTree<2> et = {{   700,   1000,        },\n+                          {mtNone, mtTest, mtNone },\n+                          {Rl    , Rs    , Rl     },\n+                          {-1    , si_1  , -1     },\n+                          {-1    , -1    , -1     }};\n+    check_tree(tree, et, __LINE__);\n+    VMATree::VMATreap::Range r = tree.tree().find_enclosing_range(0);\n+    EXPECT_EQ(r.start, nullptr);  \/\/ make sure 0 is removed\n+    EXPECT_EQ((int)r.end->key(), 700);\n+ }\n","filename":"test\/hotspot\/gtest\/nmt\/test_vmatree.cpp","additions":1222,"deletions":25,"binary":false,"changes":1247,"status":"modified"}]}