{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng\/othervm RuleBasedCollatorTest\n+ * @run junit\/othervm RuleBasedCollatorTest\n@@ -32,0 +32,6 @@\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -34,1 +40,0 @@\n-import java.text.RuleBasedCollator;\n@@ -37,0 +42,1 @@\n+import java.text.RuleBasedCollator;\n@@ -40,5 +46,6 @@\n-import org.testng.annotations.BeforeClass;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-import org.testng.SkipException;\n-import static org.testng.Assert.*;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assumptions.assumeFalse;\n@@ -46,0 +53,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -48,2 +56,2 @@\n-    static RuleBasedCollator USC;\n-    static String US_RULES;\n+    private static RuleBasedCollator USC;\n+    private static String US_RULES;\n@@ -51,2 +59,2 @@\n-    @BeforeClass\n-    public void setup() {\n+    @BeforeAll\n+    void setup() {\n@@ -54,3 +62,1 @@\n-        if (!(c instanceof RuleBasedCollator)) {\n-            throw new SkipException(\"skip tests.\");\n-        }\n+        assumeFalse(!(c instanceof RuleBasedCollator), \"skip tests.\");\n@@ -62,1 +68,0 @@\n-    @DataProvider(name = \"rulesData\")\n@@ -94,2 +99,3 @@\n-    @Test(dataProvider = \"rulesData\")\n-    public void testRules(String rules, String[] testData, String[] expected)\n+    @ParameterizedTest\n+    @MethodSource(\"rulesData\")\n+    void testRules(String rules, String[] testData, String[] expected)\n@@ -98,1 +104,1 @@\n-        assertEquals(testData, expected);\n+        assertArrayEquals(expected, testData);\n@@ -102,1 +108,0 @@\n-    @DataProvider(name = \"FrenchSecondarySort\")\n@@ -114,2 +119,3 @@\n-    @Test(dataProvider = \"FrenchSecondarySort\")\n-    public void testFrenchSecondarySort(String sData, String tData,\n+    @ParameterizedTest\n+    @MethodSource(\"FrenchSecondarySort\")\n+    void testFrenchSecondarySort(String sData, String tData,\n@@ -124,1 +130,0 @@\n-    @DataProvider(name = \"ThaiLaoVowelConsonantSwapping\")\n@@ -132,2 +137,3 @@\n-    @Test(dataProvider = \"ThaiLaoVowelConsonantSwapping\")\n-    public void testThaiLaoVowelConsonantSwapping(String sData, String tData,\n+    @ParameterizedTest\n+    @MethodSource(\"ThaiLaoVowelConsonantSwapping\")\n+    void testThaiLaoVowelConsonantSwapping(String sData, String tData,\n@@ -143,1 +149,1 @@\n-    public void testIgnorableCharacter() throws ParseException {\n+    void testIgnorableCharacter() throws ParseException {\n@@ -149,1 +155,1 @@\n-        assertEquals(primary, 0);\n+        assertEquals(0, primary);\n@@ -152,1 +158,0 @@\n-    @DataProvider(name = \"Normalization\")\n@@ -165,2 +170,3 @@\n-    @Test(dataProvider = \"Normalization\")\n-    public void testNormalization(String sData, String tData, int decomp,\n+    @ParameterizedTest\n+    @MethodSource(\"Normalization\")\n+    void testNormalization(String sData, String tData, int decomp,\n@@ -170,1 +176,1 @@\n-        assertEquals(rc.compare(sData, tData), result);\n+        assertEquals(result, rc.compare(sData, tData));\n@@ -174,1 +180,1 @@\n-    public void testEquality() throws ParseException {\n+    void testEquality() throws ParseException {\n@@ -189,2 +195,2 @@\n-        assertEquals(array1, array2);\n-        assertEquals(array1, expected);\n+        assertArrayEquals(array2, array1);\n+        assertArrayEquals(expected, array1);\n@@ -194,1 +200,1 @@\n-    public void testBasicParsingOrder() throws ParseException {\n+    void testBasicParsingOrder() throws ParseException {\n@@ -206,1 +212,1 @@\n-        assertEquals(k1.compareTo(k2) == 0, false);\n+        assertNotEquals(0, k1.compareTo(k2));\n@@ -209,1 +215,1 @@\n-        assertEquals(k2.compareTo(k3) == 0, true);\n+        assertEquals(0, k2.compareTo(k3));\n@@ -212,1 +218,0 @@\n-    @DataProvider(name = \"ParseData\")\n@@ -223,4 +228,4 @@\n-    @Test(dataProvider = \"ParseData\",\n-            expectedExceptions = ParseException.class)\n-    public void testParseException(String rule) throws ParseException{\n-        new RuleBasedCollator(rule);\n+    @ParameterizedTest\n+    @MethodSource(\"ParseData\")\n+    void testParseException(String rule) {\n+        assertThrows(ParseException.class, () -> new RuleBasedCollator(rule));\n@@ -229,3 +234,3 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void testNullParseException() throws ParseException{\n-        new RuleBasedCollator(null);\n+    @Test\n+    void testNullParseException() {\n+        assertThrows(NullPointerException.class, () -> new RuleBasedCollator(null));\n","filename":"test\/jdk\/java\/text\/Collator\/RuleBasedCollatorTest.java","additions":50,"deletions":45,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,2 @@\n-import static org.testng.Assert.assertEquals;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -34,1 +35,1 @@\n-        assertEquals(result, expected, \"Incorrect formatting of the number '\"\n+        assertEquals(expected, result, \"Incorrect formatting of the number '\"\n@@ -49,1 +50,1 @@\n-            assertEquals(number.getClass(), returnType,\n+            assertEquals(returnType, number.getClass(),\n@@ -53,1 +54,1 @@\n-        assertEquals(number, expected, \"Incorrect parsing of the string '\"\n+        assertEquals(expected, number, \"Incorrect parsing of the string '\"\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/CompactFormatAndParseHelper.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -27,1 +28,1 @@\n- * @run testng\/othervm TestCNFRounding\n+ * @run junit\/othervm TestCNFRounding\n@@ -30,0 +31,5 @@\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -34,3 +40,0 @@\n-import static org.testng.Assert.*;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -38,0 +41,4 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -49,1 +56,0 @@\n-    @DataProvider(name = \"roundingData\")\n@@ -73,1 +79,0 @@\n-    @DataProvider(name = \"roundingFract\")\n@@ -97,1 +102,0 @@\n-    @DataProvider(name = \"rounding2Fract\")\n@@ -121,5 +125,7 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void testNullMode() {\n-        NumberFormat fmt = NumberFormat\n-                .getCompactNumberInstance(Locale.US, NumberFormat.Style.SHORT);\n-        fmt.setRoundingMode(null);\n+    @Test\n+    void testNullMode() {\n+        assertThrows(NullPointerException.class, () -> {\n+            NumberFormat fmt = NumberFormat\n+                    .getCompactNumberInstance(Locale.US, NumberFormat.Style.SHORT);\n+            fmt.setRoundingMode(null);\n+        });\n@@ -129,1 +135,1 @@\n-    public void testDefaultRoundingMode() {\n+    void testDefaultRoundingMode() {\n@@ -132,1 +138,1 @@\n-        assertEquals(fmt.getRoundingMode(), RoundingMode.HALF_EVEN,\n+        assertEquals(RoundingMode.HALF_EVEN, fmt.getRoundingMode(),\n@@ -136,2 +142,3 @@\n-    @Test(dataProvider = \"roundingData\")\n-    public void testRounding(Object number, String[] expected) {\n+    @ParameterizedTest\n+    @MethodSource(\"roundingData\")\n+    void testRounding(Object number, String[] expected) {\n@@ -143,2 +150,3 @@\n-    @Test(dataProvider = \"roundingFract\")\n-    public void testRoundingFract(Object number, String[] expected) {\n+    @ParameterizedTest\n+    @MethodSource(\"roundingFract\")\n+    void testRoundingFract(Object number, String[] expected) {\n@@ -150,2 +158,3 @@\n-    @Test(dataProvider = \"rounding2Fract\")\n-    public void testRounding2Fract(Object number, String[] expected) {\n+    @ParameterizedTest\n+    @MethodSource(\"rounding2Fract\")\n+    void testRounding2Fract(Object number, String[] expected) {\n@@ -164,1 +173,1 @@\n-        assertEquals(fmt.getRoundingMode(), rounding,\n+        assertEquals(rounding, fmt.getRoundingMode(),\n@@ -169,1 +178,1 @@\n-        assertEquals(result, expected, \"Incorrect formatting of number \"\n+        assertEquals(expected, result, \"Incorrect formatting of number \"\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestCNFRounding.java","additions":32,"deletions":23,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n- * @run testng\/othervm TestCompactNumber\n+ * @run junit\/othervm TestCompactNumber\n@@ -30,0 +30,6 @@\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -39,3 +45,0 @@\n-import static org.testng.Assert.*;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -43,0 +46,4 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -109,1 +116,0 @@\n-    @DataProvider(name = \"format\")\n@@ -381,1 +387,0 @@\n-    @DataProvider(name = \"parse\")\n@@ -494,1 +499,0 @@\n-    @DataProvider(name = \"exceptionParse\")\n@@ -511,1 +515,0 @@\n-    @DataProvider(name = \"invalidParse\")\n@@ -545,1 +548,0 @@\n-    @DataProvider(name = \"fieldPosition\")\n@@ -591,1 +593,0 @@\n-    @DataProvider(name = \"varParsePosition\")\n@@ -619,1 +620,1 @@\n-    public void testInstanceCreation() {\n+    void testInstanceCreation() {\n@@ -626,3 +627,5 @@\n-    @Test(expectedExceptions = IllegalArgumentException.class)\n-    public void testFormatWithNullParam() {\n-        FORMAT_EN_US_SHORT.format(null);\n+    @Test\n+    void testFormatWithNullParam() {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            FORMAT_EN_US_SHORT.format(null);\n+        });\n@@ -631,2 +634,3 @@\n-    @Test(dataProvider = \"format\")\n-    public void testFormat(NumberFormat cnf, Object number,\n+    @ParameterizedTest\n+    @MethodSource(\"compactFormatData\")\n+    void testFormat(NumberFormat cnf, Object number,\n@@ -637,2 +641,3 @@\n-    @Test(dataProvider = \"parse\")\n-    public void testParse(NumberFormat cnf, String parseString,\n+    @ParameterizedTest\n+    @MethodSource(\"compactParseData\")\n+    void testParse(NumberFormat cnf, String parseString,\n@@ -643,2 +648,3 @@\n-    @Test(dataProvider = \"parse\")\n-    public void testParsePosition(NumberFormat cnf, String parseString,\n+    @ParameterizedTest\n+    @MethodSource(\"compactParseData\")\n+    void testParsePosition(NumberFormat cnf, String parseString,\n@@ -648,2 +654,2 @@\n-        assertEquals(pos.getIndex(), parseString.length());\n-        assertEquals(pos.getErrorIndex(), -1);\n+        assertEquals(parseString.length(), pos.getIndex());\n+        assertEquals(-1, pos.getErrorIndex());\n@@ -652,2 +658,3 @@\n-    @Test(dataProvider = \"varParsePosition\")\n-    public void testVarParsePosition(NumberFormat cnf, String parseString,\n+    @ParameterizedTest\n+    @MethodSource(\"varParsePosition\")\n+    void testVarParsePosition(NumberFormat cnf, String parseString,\n@@ -658,2 +665,2 @@\n-        assertEquals(pos.getIndex(), indexPosition);\n-        assertEquals(pos.getErrorIndex(), errPosition);\n+        assertEquals(indexPosition, pos.getIndex());\n+        assertEquals(errPosition, pos.getErrorIndex());\n@@ -662,4 +669,5 @@\n-    @Test(dataProvider = \"exceptionParse\", expectedExceptions = ParseException.class)\n-    public void throwsParseException(NumberFormat cnf, String parseString,\n-            Number expected) throws ParseException {\n-        CompactFormatAndParseHelper.testParse(cnf, parseString, expected, null, null);\n+    @ParameterizedTest\n+    @MethodSource(\"exceptionParseData\")\n+    void throwsParseException(NumberFormat cnf, String parseString,\n+            Number expected) {\n+        assertThrows(ParseException.class, () -> CompactFormatAndParseHelper.testParse(cnf, parseString, expected, null, null));\n@@ -668,2 +676,3 @@\n-    @Test(dataProvider = \"invalidParse\")\n-    public void testInvalidParse(NumberFormat cnf, String parseString,\n+    @ParameterizedTest\n+    @MethodSource(\"invalidParseData\")\n+    void testInvalidParse(NumberFormat cnf, String parseString,\n@@ -674,2 +683,3 @@\n-    @Test(dataProvider = \"fieldPosition\")\n-    public void testFormatWithFieldPosition(NumberFormat nf,\n+    @ParameterizedTest\n+    @MethodSource(\"formatFieldPositionData\")\n+    void testFormatWithFieldPosition(NumberFormat nf,\n@@ -681,1 +691,1 @@\n-        assertEquals(result.toString(), expected, \"Incorrect formatting of the number '\"\n+        assertEquals(expected, result.toString(), \"Incorrect formatting of the number '\"\n@@ -683,1 +693,1 @@\n-        assertEquals(pos.getBeginIndex(), posStartExpected, \"Incorrect start position\"\n+        assertEquals(posStartExpected, pos.getBeginIndex(), \"Incorrect start position\"\n@@ -685,1 +695,1 @@\n-        assertEquals(pos.getEndIndex(), posEndExpected, \"Incorrect end position\"\n+        assertEquals(posEndExpected, pos.getEndIndex(), \"Incorrect end position\"\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestCompactNumber.java","additions":47,"deletions":37,"binary":false,"changes":84,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm TestCompactPatternsValidity\n+ * @run junit\/othervm TestCompactPatternsValidity\n@@ -31,0 +31,4 @@\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -38,2 +42,0 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -41,0 +43,3 @@\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -77,1 +82,0 @@\n-    @DataProvider(name = \"invalidPatterns\")\n@@ -93,1 +97,0 @@\n-    @DataProvider(name = \"validPatternsFormat\")\n@@ -119,1 +122,0 @@\n-    @DataProvider(name = \"validPatternsParse\")\n@@ -139,1 +141,0 @@\n-    @DataProvider(name = \"validPatternsFormatWithPluralRules\")\n@@ -147,1 +148,0 @@\n-    @DataProvider(name = \"validPatternsParseWithPluralRules\")\n@@ -155,5 +155,7 @@\n-    @Test(dataProvider = \"invalidPatterns\",\n-            expectedExceptions = IllegalArgumentException.class)\n-    public void testInvalidCompactPatterns(String[] compactPatterns) {\n-        new CompactNumberFormat(\"#,##0.0#\", DecimalFormatSymbols\n-                .getInstance(Locale.US), compactPatterns);\n+    @ParameterizedTest\n+    @MethodSource(\"invalidCompactPatterns\")\n+    void testInvalidCompactPatterns(String[] compactPatterns) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            new CompactNumberFormat(\"#,##0.0#\", DecimalFormatSymbols\n+                    .getInstance(Locale.US), compactPatterns);\n+        });\n@@ -162,2 +164,3 @@\n-    @Test(dataProvider = \"validPatternsFormat\")\n-    public void testValidPatternsFormat(String[] compactPatterns,\n+    @ParameterizedTest\n+    @MethodSource(\"validPatternsFormat\")\n+    void testValidPatternsFormat(String[] compactPatterns,\n@@ -173,2 +176,3 @@\n-    @Test(dataProvider = \"validPatternsParse\")\n-    public void testValidPatternsParse(String[] compactPatterns,\n+    @ParameterizedTest\n+    @MethodSource(\"validPatternsParse\")\n+    void testValidPatternsParse(String[] compactPatterns,\n@@ -184,2 +188,3 @@\n-    @Test(dataProvider = \"validPatternsFormatWithPluralRules\")\n-    public void testValidPatternsFormatWithPluralRules(String[] compactPatterns, String pluralRules,\n+    @ParameterizedTest\n+    @MethodSource(\"validPatternsFormatWithPluralRules\")\n+    void testValidPatternsFormatWithPluralRules(String[] compactPatterns, String pluralRules,\n@@ -195,2 +200,3 @@\n-    @Test(dataProvider = \"validPatternsParseWithPluralRules\")\n-    public void testValidPatternsParsewithPluralRules(String[] compactPatterns, String pluralRules,\n+    @ParameterizedTest\n+    @MethodSource(\"validPatternsParseWithPluralRules\")\n+    void testValidPatternsParsewithPluralRules(String[] compactPatterns, String pluralRules,\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestCompactPatternsValidity.java","additions":28,"deletions":22,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -28,2 +29,1 @@\n- * @run testng\/othervm TestEquality\n- *\n+ * @run junit\/othervm TestEquality\n@@ -32,0 +32,2 @@\n+import org.junit.jupiter.api.Test;\n+\n@@ -36,1 +38,0 @@\n-import org.testng.annotations.Test;\n@@ -41,1 +42,1 @@\n-    public void testEquality() {\n+    void testEquality() {\n@@ -163,1 +164,1 @@\n-    public void testHashCode() {\n+    void testHashCode() {\n@@ -178,1 +179,1 @@\n-    public void testEqualsAndHashCode() {\n+    void testEqualsAndHashCode() {\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestEquality.java","additions":8,"deletions":7,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -29,1 +30,1 @@\n- * @run testng\/othervm TestFormatToCharacterIterator\n+ * @run junit\/othervm TestFormatToCharacterIterator\n@@ -31,0 +32,5 @@\n+\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -39,3 +45,0 @@\n-import static org.testng.Assert.assertEquals;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -43,0 +46,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -57,1 +63,0 @@\n-    @DataProvider(name = \"fieldPositions\")\n@@ -152,2 +157,3 @@\n-    @Test(dataProvider = \"fieldPositions\")\n-    public void testFormatToCharacterIterator(NumberFormat fmt, Object number,\n+    @ParameterizedTest\n+    @MethodSource(\"compactFieldPositionData\")\n+    void testFormatToCharacterIterator(NumberFormat fmt, Object number,\n@@ -156,1 +162,1 @@\n-        assertEquals(getText(iterator), expected, \"Incorrect formatting of the number '\"\n+        assertEquals(expected, getText(iterator), \"Incorrect formatting of the number '\"\n@@ -161,1 +167,1 @@\n-        assertEquals(iterator.getBeginIndex(), 0, \"Incorrect start index: \"\n+        assertEquals(0, iterator.getBeginIndex(), \"Incorrect start index: \"\n@@ -163,1 +169,1 @@\n-        assertEquals(iterator.getEndIndex(), expected.length(), \"Incorrect end index: \"\n+        assertEquals(expected.length(), iterator.getEndIndex(), \"Incorrect end index: \"\n@@ -167,1 +173,1 @@\n-        assertEquals(iterator.getAllAttributeKeys(), Set.of(expectedFields),\n+        assertEquals(Set.of(expectedFields), iterator.getAllAttributeKeys(),\n@@ -176,1 +182,1 @@\n-            assertEquals(start, positions[currentPosition],\n+            assertEquals(positions[currentPosition], start,\n@@ -179,1 +185,1 @@\n-            assertEquals(end, positions[currentPosition + 1],\n+            assertEquals(positions[currentPosition + 1], end,\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestFormatToCharacterIterator.java","additions":20,"deletions":14,"binary":false,"changes":34,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -30,1 +31,1 @@\n- * @run testng\/othervm TestMutatingInstance\n+ * @run junit\/othervm TestMutatingInstance\n@@ -32,0 +33,6 @@\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -39,3 +46,0 @@\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -43,0 +47,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -64,2 +69,2 @@\n-    @BeforeTest\n-    public void mutateInstances() {\n+    @BeforeAll\n+    void mutateInstances() {\n@@ -78,1 +83,0 @@\n-    @DataProvider(name = \"format\")\n@@ -98,1 +102,0 @@\n-    @DataProvider(name = \"parse\")\n@@ -109,2 +112,3 @@\n-    @Test(dataProvider = \"format\")\n-    public void formatCompactNumber(NumberFormat nf,\n+    @ParameterizedTest\n+    @MethodSource(\"compactFormatData\")\n+    void formatCompactNumber(NumberFormat nf,\n@@ -115,2 +119,3 @@\n-    @Test(dataProvider = \"parse\")\n-    public void parseCompactNumber(NumberFormat nf,\n+    @ParameterizedTest\n+    @MethodSource(\"compactParseData\")\n+    void parseCompactNumber(NumberFormat nf,\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestMutatingInstance.java","additions":18,"deletions":13,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -28,1 +29,1 @@\n- * @run testng\/othervm TestParseBigDecimal\n+ * @run junit\/othervm TestParseBigDecimal\n@@ -31,3 +32,4 @@\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -41,0 +43,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -67,2 +70,2 @@\n-    @BeforeTest\n-    public void mutateInstances() {\n+    @BeforeAll\n+    void mutateInstances() {\n@@ -79,1 +82,0 @@\n-    @DataProvider(name = \"parse\")\n@@ -168,2 +170,3 @@\n-    @Test(dataProvider = \"parse\")\n-    public void testParse(NumberFormat cnf, String parseString,\n+    @ParameterizedTest\n+    @MethodSource(\"compactParseData\")\n+    void testParse(NumberFormat cnf, String parseString,\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestParseBigDecimal.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -27,1 +28,1 @@\n- * @run testng\/othervm TestPlurals\n+ * @run junit\/othervm TestPlurals\n@@ -30,0 +31,5 @@\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -34,3 +40,2 @@\n-import static org.testng.Assert.*;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -38,0 +43,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -48,1 +54,0 @@\n-    @DataProvider\n@@ -81,1 +86,0 @@\n-    @DataProvider\n@@ -95,4 +99,6 @@\n-    @Test(expectedExceptions = NullPointerException.class)\n-    public void testNullPluralRules() {\n-        String[] pattern = {\"\"};\n-        new CompactNumberFormat(\"#\", DFS, PATTERN, null);\n+    @Test\n+    void testNullPluralRules() {\n+        assertThrows(NullPointerException.class, () -> {\n+            String[] pattern = {\"\"};\n+            new CompactNumberFormat(\"#\", DFS, PATTERN, null);\n+        });\n@@ -101,2 +107,3 @@\n-    @Test(dataProvider = \"pluralRules\")\n-    public void testPluralRules(String rules, Number n, String expected) {\n+    @ParameterizedTest\n+    @MethodSource(\"pluralRules\")\n+    void testPluralRules(String rules, Number n, String expected) {\n@@ -104,1 +111,1 @@\n-        assertEquals(cnp.format(n), expected);\n+        assertEquals(expected, cnp.format(n));\n@@ -107,3 +114,5 @@\n-    @Test(dataProvider = \"invalidRules\", expectedExceptions = IllegalArgumentException.class)\n-    public void testInvalidRules(String rules) {\n-        new CompactNumberFormat(\"#\", DFS, PATTERN, rules);\n+    @ParameterizedTest\n+    @MethodSource(\"invalidRules\")\n+    void testInvalidRules(String rules) {\n+        assertThrows(IllegalArgumentException.class,\n+                () -> new CompactNumberFormat(\"#\", DFS, PATTERN, rules));\n@@ -112,5 +121,7 @@\n-    @Test(expectedExceptions = IllegalArgumentException.class)\n-    public void testLimitExceedingRules() {\n-        String andCond = \" and n = 1\";\n-        String invalid = \"one: n = 1\" + andCond.repeat(2_048 \/ andCond.length());\n-        new CompactNumberFormat(\"#\", DFS, PATTERN, invalid);\n+    @Test\n+    void testLimitExceedingRules() {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            String andCond = \" and n = 1\";\n+            String invalid = \"one: n = 1\" + andCond.repeat(2_048 \/ andCond.length());\n+            new CompactNumberFormat(\"#\", DFS, PATTERN, invalid);\n+        });\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestPlurals.java","additions":33,"deletions":22,"binary":false,"changes":55,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -28,1 +29,1 @@\n- * @run testng\/othervm TestSpecialValues\n+ * @run junit\/othervm TestSpecialValues\n@@ -30,0 +31,5 @@\n+\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -33,2 +39,0 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -36,0 +40,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -41,1 +46,0 @@\n-    @DataProvider(name = \"formatSpecialValues\")\n@@ -56,1 +60,0 @@\n-    @DataProvider(name = \"parseSpecialValues\")\n@@ -68,2 +71,3 @@\n-    @Test(dataProvider = \"formatSpecialValues\")\n-    public void testFormatSpecialValues(Object number, String expected) {\n+    @ParameterizedTest\n+    @MethodSource(\"formatSpecialValues\")\n+    void testFormatSpecialValues(Object number, String expected) {\n@@ -73,2 +77,3 @@\n-    @Test(dataProvider = \"parseSpecialValues\")\n-    public void testParseSpecialValues(String parseString, Number expected)\n+    @ParameterizedTest\n+    @MethodSource(\"parseSpecialValues\")\n+    void testParseSpecialValues(String parseString, Number expected)\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestSpecialValues.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -29,1 +30,1 @@\n- * @run testng\/othervm TestUExtensionOverride\n+ * @run junit\/othervm TestUExtensionOverride\n@@ -31,0 +32,5 @@\n+\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -34,2 +40,0 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -37,0 +41,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -39,1 +44,0 @@\n-    @DataProvider(name = \"compactFormatData\")\n@@ -64,1 +68,0 @@\n-    @DataProvider(name = \"compactParseData\")\n@@ -90,2 +93,3 @@\n-    @Test(dataProvider = \"compactFormatData\")\n-    public void testFormat(Locale locale, double num,\n+    @ParameterizedTest\n+    @MethodSource(\"compactFormatData\")\n+    void testFormat(Locale locale, double num,\n@@ -98,2 +102,3 @@\n-    @Test(dataProvider = \"compactParseData\")\n-    public void testParse(Locale locale, String parseString,\n+    @ParameterizedTest\n+    @MethodSource(\"compactParseData\")\n+    void testParse(Locale locale, String parseString,\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/TestUExtensionOverride.java","additions":15,"deletions":10,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,1 @@\n- * @run testng\/othervm TestDeserializeCNF\n+ * @run junit\/othervm TestDeserializeCNF\n@@ -34,2 +34,3 @@\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n@@ -44,1 +45,0 @@\n-import static org.testng.Assert.*;\n@@ -46,0 +46,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -63,2 +66,2 @@\n-    @BeforeTest\n-    public void mutateInstances() {\n+    @BeforeAll\n+    void mutateInstances() {\n@@ -74,1 +77,1 @@\n-    public void testDeserialization() throws IOException, ClassNotFoundException {\n+    void testDeserialization() throws IOException, ClassNotFoundException {\n@@ -81,1 +84,1 @@\n-            assertEquals(obj1, COMPACT_FORMAT1, \"Deserialized instance is not\"\n+            assertEquals(COMPACT_FORMAT1, obj1, \"Deserialized instance is not\"\n@@ -85,1 +88,1 @@\n-            assertEquals(obj2, COMPACT_FORMAT2, \"Deserialized instance is not\"\n+            assertEquals(COMPACT_FORMAT2, obj2, \"Deserialized instance is not\"\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/serialization\/TestDeserializeCNF.java","additions":13,"deletions":10,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -28,1 +29,1 @@\n- * @run testng\/othervm TestSerialization\n+ * @run junit\/othervm TestSerialization\n@@ -31,2 +32,3 @@\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n@@ -43,1 +45,0 @@\n-import static org.testng.Assert.*;\n@@ -45,0 +46,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -60,2 +64,2 @@\n-    @BeforeTest\n-    public void mutateInstances() {\n+    @BeforeAll\n+    void mutateInstances() {\n@@ -84,1 +88,1 @@\n-    public void testSerialization() throws IOException, ClassNotFoundException {\n+    void testSerialization() throws IOException, ClassNotFoundException {\n@@ -107,1 +111,1 @@\n-                assertEquals(fmt, obj, \"Serialized and deserialized\"\n+                assertEquals(obj, fmt, \"Serialized and deserialized\"\n@@ -113,1 +117,1 @@\n-                assertEquals(actual, expected, \"Serialized and deserialized\"\n+                assertEquals(expected, actual, \"Serialized and deserialized\"\n","filename":"test\/jdk\/java\/text\/Format\/CompactNumberFormat\/serialization\/TestSerialization.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -29,1 +30,1 @@\n- * @run testng\/othervm Bug8193444\n+ * @run junit\/othervm Bug8193444\n@@ -31,2 +32,4 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -39,1 +42,1 @@\n-import static org.testng.Assert.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -41,0 +44,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -45,1 +49,0 @@\n-    @DataProvider(name = \"dateFormat\")\n@@ -56,2 +59,3 @@\n-    @Test(dataProvider = \"dateFormat\")\n-    public void testDateFormatAndParse(int length)\n+    @ParameterizedTest\n+    @MethodSource(\"dateFormatData\")\n+    void testDateFormatAndParse(int length)\n@@ -69,1 +73,1 @@\n-        assertEquals(result, pattern, \"Failed to format the date using\"\n+        assertEquals(pattern, result, \"Failed to format the date using\"\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/Bug8193444.java","additions":13,"deletions":9,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,1 +28,0 @@\n- * @run testng\/othervm CaseInsensitiveParseTest\n@@ -30,0 +29,1 @@\n+ * @run junit\/othervm CaseInsensitiveParseTest\n@@ -32,0 +32,4 @@\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -40,3 +44,1 @@\n-import static org.testng.Assert.assertEquals;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -44,0 +46,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -49,2 +52,1 @@\n-    @DataProvider\n-    private Object[][] locales() {\n+    Object[][] locales() {\n@@ -57,2 +59,3 @@\n-    @Test(dataProvider = \"locales\")\n-    public void testUpperCase(Locale loc) throws ParseException {\n+    @ParameterizedTest\n+    @MethodSource(\"locales\")\n+    void testUpperCase(Locale loc) throws ParseException {\n@@ -61,1 +64,1 @@\n-        assertEquals(sdf.parse(formatted.toUpperCase(Locale.ROOT)), EPOCH,\n+        assertEquals(EPOCH, sdf.parse(formatted.toUpperCase(Locale.ROOT)),\n@@ -65,2 +68,3 @@\n-    @Test(dataProvider = \"locales\")\n-    public void testLowerCase(Locale loc) throws ParseException {\n+    @ParameterizedTest\n+    @MethodSource(\"locales\")\n+    void testLowerCase(Locale loc) throws ParseException {\n@@ -69,1 +73,1 @@\n-        assertEquals(sdf.parse(formatted.toLowerCase(Locale.ROOT)), EPOCH,\n+        assertEquals(EPOCH, sdf.parse(formatted.toLowerCase(Locale.ROOT)),\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/CaseInsensitiveParseTest.java","additions":18,"deletions":14,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,1 +28,0 @@\n- * @run testng LocaleDateFormats\n@@ -30,0 +29,1 @@\n+ * @run junit LocaleDateFormats\n@@ -32,0 +32,4 @@\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -35,3 +39,0 @@\n-import static org.testng.Assert.assertEquals;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n@@ -39,0 +40,3 @@\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -41,2 +45,3 @@\n-    @Test(dataProvider = \"dateFormats\")\n-    public void testDateFormat(Locale loc, int style, int year, int month, int date, String expectedString) {\n+    @ParameterizedTest\n+    @MethodSource(\"dateFormats\")\n+    void testDateFormat(Locale loc, int style, int year, int month, int date, String expectedString) {\n@@ -48,1 +53,1 @@\n-        assertEquals(df.format(cal.getTime()), expectedString);\n+        assertEquals(expectedString, df.format(cal.getTime()));\n@@ -51,1 +56,0 @@\n-    @DataProvider(name = \"dateFormats\" )\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/LocaleDateFormats.java","additions":14,"deletions":10,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm SimpleDateFormatPatternTest\n+ * @run junit\/othervm SimpleDateFormatPatternTest\n@@ -30,1 +30,5 @@\n-import java.lang.IllegalArgumentException;\n+\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -36,2 +40,1 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -39,0 +42,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -139,1 +143,0 @@\n-    @DataProvider(name = \"dfAllLocalesObj\")\n@@ -144,1 +147,0 @@\n-    @DataProvider(name = \"invalidPatternObj\")\n@@ -149,1 +151,0 @@\n-    @DataProvider(name = \"validPatternObj\")\n@@ -155,3 +156,3 @@\n-    @Test(dataProvider = \"invalidPatternObj\",\n-            expectedExceptions = IllegalArgumentException.class)\n-    public void testIllegalArgumentException1(String pattern, Locale loc)\n+    @ParameterizedTest\n+    @MethodSource(\"invalidPatternObj\")\n+    void testIllegalArgumentException1(String pattern, Locale loc)\n@@ -159,2 +160,4 @@\n-        Locale.setDefault(loc);\n-        new SimpleDateFormat(pattern);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Locale.setDefault(loc);\n+            new SimpleDateFormat(pattern);\n+        });\n@@ -163,3 +166,3 @@\n-    @Test(dataProvider = \"invalidPatternObj\",\n-            expectedExceptions = IllegalArgumentException.class)\n-    public void testIllegalArgumentException2(String pattern, Locale loc)\n+    @ParameterizedTest\n+    @MethodSource(\"invalidPatternObj\")\n+    void testIllegalArgumentException2(String pattern, Locale loc)\n@@ -167,2 +170,4 @@\n-        Locale.setDefault(loc);\n-        new SimpleDateFormat(pattern, new DateFormatSymbols());\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Locale.setDefault(loc);\n+            new SimpleDateFormat(pattern, new DateFormatSymbols());\n+        });\n@@ -171,3 +176,3 @@\n-    @Test(dataProvider = \"invalidPatternObj\",\n-            expectedExceptions = IllegalArgumentException.class)\n-    public void testIllegalArgumentException3 (String pattern, Locale loc)\n+    @ParameterizedTest\n+    @MethodSource(\"invalidPatternObj\")\n+    void testIllegalArgumentException3 (String pattern, Locale loc)\n@@ -175,2 +180,4 @@\n-        Locale.setDefault(loc);\n-        new SimpleDateFormat(pattern, Locale.getDefault());\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Locale.setDefault(loc);\n+            new SimpleDateFormat(pattern, Locale.getDefault());\n+        });\n@@ -179,3 +186,3 @@\n-    @Test(dataProvider = \"invalidPatternObj\",\n-            expectedExceptions = IllegalArgumentException.class)\n-    public void testIllegalArgumentException4(String pattern, Locale loc)\n+    @ParameterizedTest\n+    @MethodSource(\"invalidPatternObj\")\n+    void testIllegalArgumentException4(String pattern, Locale loc)\n@@ -183,2 +190,4 @@\n-        Locale.setDefault(loc);\n-        new SimpleDateFormat().applyPattern(pattern);\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            Locale.setDefault(loc);\n+            new SimpleDateFormat().applyPattern(pattern);\n+        });\n@@ -188,3 +197,3 @@\n-    @Test(dataProvider = \"dfAllLocalesObj\",\n-            expectedExceptions = NullPointerException.class)\n-    public void testNullPointerException1(Locale loc)\n+    @ParameterizedTest\n+    @MethodSource(\"dfAllLocalesObj\")\n+    void testNullPointerException1(Locale loc)\n@@ -192,2 +201,4 @@\n-        Locale.setDefault(loc);\n-        new SimpleDateFormat(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Locale.setDefault(loc);\n+            new SimpleDateFormat(null);\n+        });\n@@ -196,3 +207,3 @@\n-    @Test(dataProvider = \"dfAllLocalesObj\",\n-            expectedExceptions = NullPointerException.class)\n-    public void testNullPointerException2(Locale loc)\n+    @ParameterizedTest\n+    @MethodSource(\"dfAllLocalesObj\")\n+    void testNullPointerException2(Locale loc)\n@@ -200,2 +211,4 @@\n-        Locale.setDefault(loc);\n-        new SimpleDateFormat(null, new DateFormatSymbols());\n+        assertThrows(NullPointerException.class, () -> {\n+            Locale.setDefault(loc);\n+            new SimpleDateFormat(null, new DateFormatSymbols());\n+        });\n@@ -204,3 +217,3 @@\n-    @Test(dataProvider = \"dfAllLocalesObj\",\n-            expectedExceptions = NullPointerException.class)\n-    public void testNullPointerException3(Locale loc)\n+    @ParameterizedTest\n+    @MethodSource(\"dfAllLocalesObj\")\n+    void testNullPointerException3(Locale loc)\n@@ -208,2 +221,4 @@\n-        Locale.setDefault(loc);\n-        new SimpleDateFormat(null, Locale.getDefault());\n+        assertThrows(NullPointerException.class, () -> {\n+            Locale.setDefault(loc);\n+            new SimpleDateFormat(null, Locale.getDefault());\n+        });\n@@ -212,3 +227,3 @@\n-    @Test(dataProvider = \"dfAllLocalesObj\",\n-            expectedExceptions = NullPointerException.class)\n-    public void testNullPointerException4(Locale loc)\n+    @ParameterizedTest\n+    @MethodSource(\"dfAllLocalesObj\")\n+    void testNullPointerException4(Locale loc)\n@@ -216,2 +231,4 @@\n-        Locale.setDefault(loc);\n-        new SimpleDateFormat().applyPattern(null);\n+        assertThrows(NullPointerException.class, () -> {\n+            Locale.setDefault(loc);\n+            new SimpleDateFormat().applyPattern(null);\n+        });\n@@ -220,1 +237,1 @@\n-    @Test(dataProvider = \"validPatternObj\")\n+    @ParameterizedTest\n@@ -222,1 +239,2 @@\n-    public void testValidPattern(String pattern, Locale loc) {\n+    @MethodSource(\"validPatternObj\")\n+    void testValidPattern(String pattern, Locale loc) {\n","filename":"test\/jdk\/java\/text\/Format\/DateFormat\/SimpleDateFormatPatternTest.java","additions":69,"deletions":51,"binary":false,"changes":120,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n- * @run testng\/othervm SetGroupingSizeTest\n+ * @run junit\/othervm SetGroupingSizeTest\n@@ -32,0 +32,3 @@\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n@@ -34,3 +37,2 @@\n-import static org.testng.Assert.assertEquals;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertThrows;\n@@ -38,1 +40,0 @@\n-@Test\n@@ -41,2 +42,1 @@\n-    @DataProvider\n-    public static Object[][] validGroupingSizes() {\n+    static Object[][] validGroupingSizes() {\n@@ -49,2 +49,1 @@\n-    @DataProvider\n-    public static Object[][] invalidGroupingSizes() {\n+    static Object[][] invalidGroupingSizes() {\n@@ -61,2 +60,3 @@\n-    @Test(dataProvider = \"validGroupingSizes\")\n-    public void test_validGroupingSize(int newVal) {\n+    @ParameterizedTest\n+    @MethodSource(\"validGroupingSizes\")\n+    void test_validGroupingSize(int newVal) {\n@@ -65,1 +65,1 @@\n-        assertEquals(df.getGroupingSize(), newVal);\n+        assertEquals(newVal, df.getGroupingSize());\n@@ -68,5 +68,7 @@\n-    @Test(dataProvider = \"invalidGroupingSizes\",\n-        expectedExceptions = IllegalArgumentException.class)\n-    public void test_invalidGroupingSize(int newVal) {\n-        DecimalFormat df = new DecimalFormat();\n-        df.setGroupingSize(newVal);\n+    @ParameterizedTest\n+    @MethodSource(\"invalidGroupingSizes\")\n+    void test_invalidGroupingSize(int newVal) {\n+        assertThrows(IllegalArgumentException.class, () -> {\n+            DecimalFormat df = new DecimalFormat();\n+            df.setGroupingSize(newVal);\n+        });\n","filename":"test\/jdk\/java\/text\/Format\/DecimalFormat\/SetGroupingSizeTest.java","additions":20,"deletions":18,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,1 @@\n-\/**\n+\/*\n@@ -32,1 +32,1 @@\n- * @run testng\/othervm DFSMinusPerCentMill\n+ * @run junit\/othervm DFSMinusPerCentMill\n@@ -35,3 +35,13 @@\n-import java.io.*;\n-import java.util.*;\n-import java.text.*;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.ByteArrayOutputStream;\n+import java.io.ObjectInputStream;\n+import java.io.ObjectOutputStream;\n+import java.text.DecimalFormat;\n+import java.text.DecimalFormatSymbols;\n+import java.text.NumberFormat;\n+import java.util.Locale;\n@@ -39,3 +49,1 @@\n-import static org.testng.Assert.*;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -43,0 +51,1 @@\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -52,1 +61,0 @@\n-    @DataProvider\n@@ -72,1 +80,0 @@\n-    @DataProvider\n@@ -81,2 +88,3 @@\n-    @Test(dataProvider=\"formatData\")\n-    public void testFormatData(Locale l, Type style, String expected) {\n+    @ParameterizedTest\n+    @MethodSource(\"formatData\")\n+    void testFormatData(Locale l, Type style, String expected) {\n@@ -105,1 +113,1 @@\n-        assertEquals(nf.format(SRC_NUM), expected);\n+        assertEquals(expected, nf.format(SRC_NUM));\n@@ -108,2 +116,3 @@\n-    @Test(dataProvider=\"charSymbols\")\n-    public void testCharSymbols(Locale l, char percent, char permill, char minus) {\n+    @ParameterizedTest\n+    @MethodSource(\"charSymbols\")\n+    void testCharSymbols(Locale l, char percent, char permill, char minus) {\n@@ -111,3 +120,3 @@\n-        assertEquals(dfs.getPercent(), percent);\n-        assertEquals(dfs.getPerMill(), permill);\n-        assertEquals(dfs.getMinusSign(), minus);\n+        assertEquals(percent, dfs.getPercent());\n+        assertEquals(permill, dfs.getPerMill());\n+        assertEquals(minus, dfs.getMinusSign());\n@@ -117,1 +126,1 @@\n-    public void testSerialization() throws Exception {\n+    void testSerialization() throws Exception {\n@@ -125,1 +134,1 @@\n-        assertEquals(dfs, dfsSerialized);\n+        assertEquals(dfsSerialized, dfs);\n@@ -137,1 +146,1 @@\n-        assertEquals(dfs, dfsSerialized);\n+        assertEquals(dfsSerialized, dfs);\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/DFSMinusPerCentMill.java","additions":31,"deletions":22,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,1 @@\n- * @run testng\/othervm SquareEraCharacterTest\n+ * @run junit\/othervm SquareEraCharacterTest\n@@ -31,1 +31,3 @@\n-import static org.testng.Assert.assertEquals;\n+import org.junit.jupiter.api.TestInstance;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -35,2 +37,1 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n@@ -38,1 +39,1 @@\n-@Test\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n@@ -41,1 +42,0 @@\n-    @DataProvider\n@@ -54,6 +54,4 @@\n-    @Test(dataProvider=\"squareEras\")\n-    public void test_normalize(char squareChar, String expected) {\n-\n-        assertEquals(\n-            Normalizer.normalize(Character.toString(squareChar), Normalizer.Form.NFKD),\n-            expected,\n+    @ParameterizedTest\n+    @MethodSource(\"squareEras\")\n+    void test_normalize(char squareChar, String expected) {\n+        assertEquals(expected, Normalizer.normalize(Character.toString(squareChar), Normalizer.Form.NFKD),\n","filename":"test\/jdk\/java\/text\/Normalizer\/SquareEraCharacterTest.java","additions":11,"deletions":13,"binary":false,"changes":24,"status":"modified"}]}