{"files":[{"patch":"@@ -32,1 +32,1 @@\n-import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.Future;\n@@ -41,3 +41,1 @@\n-        CountDownLatch latch = new CountDownLatch(1);\n-\n-        ForkJoinPool.commonPool().execute(() -> {\n+        Future<?> future = ForkJoinPool.commonPool().submit(() -> {\n@@ -50,0 +48,1 @@\n+\n@@ -53,1 +52,0 @@\n-            latch.countDown();\n@@ -55,1 +53,20 @@\n-        latch.await();\n+\n+        try {\n+            future.get();\n+        } catch (Exception e) {\n+            \/\/ If the task threw an exception, unwrap it\n+            if (e instanceof java.util.concurrent.ExecutionException) {\n+                \/\/ Unwrap the ExecutionException to get the underlying cause\n+                Throwable cause = e.getCause();\n+                if (cause instanceof AssertionError) {\n+                    \/\/ If the cause is an AssertionError, rethrow the error\n+                    throw (AssertionError) cause;\n+                } else {\n+                    \/\/ Rethrow other exceptions as RuntimeException\n+                    throw new RuntimeException(\"Unexpected exception during test execution\", cause);\n+                }\n+            } else {\n+                \/\/ Rethrow if the exception isn't wrapped in ExecutionException\n+                throw new RuntimeException(\"Unexpected exception\", e);\n+            }\n+        }\n@@ -57,1 +74,2 @@\n-}\n\\ No newline at end of file\n+}\n+\n","filename":"test\/jdk\/java\/util\/concurrent\/forkjoin\/ContextClassLoaderTest.java","additions":25,"deletions":7,"binary":false,"changes":32,"status":"modified"}]}