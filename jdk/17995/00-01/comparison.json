{"files":[{"patch":"@@ -331,1 +331,1 @@\n-            } catch(IllegalArgumentException iae) {\n+            } catch (IllegalArgumentException iae) {\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -518,1 +518,1 @@\n-        ZipEntry e;\n+        String entryName;\n@@ -520,3 +520,3 @@\n-            e = createZipEntry(((flag & USE_UTF8) != 0)\n-                    ? ZipCoder.toStringUTF8(b, len)\n-                    : zc.toString(b, len));\n+            entryName = ((flag & USE_UTF8) != 0) ?\n+                    ZipCoder.toStringUTF8(b, len)\n+                    : zc.toString(b, len);\n@@ -527,0 +527,1 @@\n+        ZipEntry e = createZipEntry(entryName);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -47,3 +47,3 @@\n- * @summary Validate that a ZipException is thrown when opening a ZIP file via\n- * ZipFile, traversing a Zip File via ZipInputStream, with invalid UTF-8\n- * byte sequences in the name or comment fields fails with ZipException.\n+ * @summary Validate that a ZipException is thrown when a ZIP file with\n+ * invalid UTF-8 byte sequences in the name or comment fields is opened via\n+ * ZipFile or traversed via ZipInputStream.\n@@ -65,1 +65,1 @@\n-    private static final String LOC_BAD_ENTRY_NAME_OR_COMMENT = \"invalid LOC header (bad entry name)\";\n+    private static final String LOC_HEADER_BAD_ENTRY_NAME = \"invalid LOC header (bad entry name)\";\n@@ -182,1 +182,1 @@\n-     * @throws IOException if an entry occurs\n+     * @throws IOException if an error occurs\n@@ -196,1 +196,1 @@\n-     * @throws IOException if an entry occurs\n+     * @throws IOException if an error occurs\n@@ -201,1 +201,1 @@\n-        try( ZipInputStream zis = new ZipInputStream(new FileInputStream(ZIP_FILE.toFile()))) {\n+        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(ZIP_FILE.toFile()))) {\n@@ -203,1 +203,1 @@\n-            while((ze = zis.getNextEntry()) != null ) {\n+            while ((ze = zis.getNextEntry()) != null) {\n@@ -243,2 +243,2 @@\n-     * Validate that a ZipException is thrown when an entry name is encountered\n-     * within a LOC contains an invalid UTF-8 byte sequence.\n+     * Validate that a ZipException is thrown when an entry name\n+     * within a LOC file header contains an invalid UTF-8 byte sequence.\n@@ -257,1 +257,1 @@\n-        assertEquals(LOC_BAD_ENTRY_NAME_OR_COMMENT, ex.getMessage());\n+        assertEquals(LOC_HEADER_BAD_ENTRY_NAME, ex.getMessage());\n@@ -298,7 +298,5 @@\n-     * <pre>\n-     *     {@code\n-     *        var fooJar = Files.readAllBytes(Path.of(\"foo.jar\"));\n-     *        var result = createByteArray(fooJar, \"FOOBYTES\");\n-     *        System.out.println(result);\n-     *      }\n-     * <\/pre>\n+     * {@snippet :\n+     * var fooJar = Files.readAllBytes(Path.of(\"foo.jar\"));\n+     * var result = createByteArray(fooJar,\"FOOBYTES\");\n+     * System.out.println(result);\n+     * }\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/InvalidBytesInEntryNameOrComment.java","additions":16,"deletions":18,"binary":false,"changes":34,"status":"modified"}]}