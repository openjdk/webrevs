{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -311,1 +311,3 @@\n-     * Returns the zip file comment, or null if none.\n+     * Returns the zip file comment. If a comment does not exist or an error is\n+     * encountered decoding the comment using the charset specified\n+     * when opening the Zip file, then {@code null} is returned.\n@@ -325,1 +327,7 @@\n-            return res.zsrc.zc.toString(res.zsrc.comment);\n+            \/\/ If there is a problem decoding the byte array which represents\n+            \/\/ the Zip file comment, return null;\n+            try {\n+                return res.zsrc.zc.toString(res.zsrc.comment);\n+            } catch (IllegalArgumentException iae) {\n+                return null;\n+            }\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipFile.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -518,3 +518,10 @@\n-        ZipEntry e = createZipEntry(((flag & USE_UTF8) != 0)\n-                                    ? ZipCoder.toStringUTF8(b, len)\n-                                    : zc.toString(b, len));\n+        String entryName;\n+        try {\n+            entryName = ((flag & USE_UTF8) != 0) ?\n+                    ZipCoder.toStringUTF8(b, len)\n+                    : zc.toString(b, len);\n+        } catch (Exception ex) {\n+            throw (ZipException) new ZipException(\n+                    \"invalid LOC header (bad entry name)\").initCause(ex);\n+        }\n+        ZipEntry e = createZipEntry(entryName);\n","filename":"src\/java.base\/share\/classes\/java\/util\/zip\/ZipInputStream.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,5 @@\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n@@ -25,4 +30,1 @@\n-import org.testng.annotations.BeforeTest;\n-import org.testng.annotations.Test;\n-\n-import java.io.ByteArrayOutputStream;\n+import java.io.FileInputStream;\n@@ -33,1 +35,1 @@\n-import java.nio.channels.FileChannel;\n+import java.nio.file.Files;\n@@ -36,4 +38,3 @@\n-import java.util.zip.ZipEntry;\n-import java.util.zip.ZipException;\n-import java.util.zip.ZipFile;\n-import java.util.zip.ZipOutputStream;\n+import java.util.Formatter;\n+import java.util.stream.Stream;\n+import java.util.zip.*;\n@@ -41,2 +42,1 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.expectThrows;\n+import static org.junit.jupiter.api.Assertions.*;\n@@ -46,3 +46,7 @@\n- * @summary Validate that opening ZIP files files with invalid UTF-8\n- * byte sequences in the name or comment fields fails with ZipException\n- * @run testng\/othervm InvalidBytesInEntryNameOrComment\n+ * @bug 8301873 8321156\n+ * @summary Validate that a ZipException is thrown when a ZIP file with\n+ * invalid UTF-8 byte sequences in the name or comment fields is opened via\n+ * ZipFile or traversed via ZipInputStream.\n+ * Also validate that ZipFile::getComment will return null with invalid UTF-8\n+ * byte sequences in the ZIP file comment\n+ * @run junit InvalidBytesInEntryNameOrComment\n@@ -51,8 +55,2 @@\n-\n-    \/\/ Offsets for navigating the CEN fields\n-    private static final int EOC_OFF = 6;   \/\/ Offset from EOF to find CEN offset\n-    private static final int CEN_HDR = 45;  \/\/ Size of a CEN header\n-    private static final int NLEN = 28;     \/\/ Name length\n-    private static final int ELEN = 30;     \/\/ Extra length\n-    private static final int CLEN = 32;     \/\/ Comment length\n-\n+    \/\/ Zip file that is created and used by the test\n+    public static final Path ZIP_FILE = Path.of(\"BadName.zip\");\n@@ -61,0 +59,3 @@\n+    \/\/ Expected error message when an invalid entry name or entry comment is\n+    \/\/ encountered when accessing a CEN Header\n+    private static final String CEN_BAD_ENTRY_NAME_OR_COMMENT = \"invalid CEN header (bad entry name or comment)\";\n@@ -62,5 +63,21 @@\n-    \/\/ Expected ZipException regex\n-    private static final String BAD_ENTRY_NAME_OR_COMMENT = \"invalid CEN header (bad entry name or comment)\";\n-\n-    \/\/ ZIP file with invalid name field\n-    private Path invalidName;\n+    \/\/ Expected error message when an invalid entry name is encountered when\n+    \/\/ accessing a LOC Header\n+    private static final String LOC_HEADER_BAD_ENTRY_NAME = \"invalid LOC header (bad entry name)\";\n+    \/\/ Zip file comment starting offset\n+    private static final int ZIP_FILE_COMMENT_OFFSET = 0x93;\n+    \/\/ CEN Header offset for the entry comment to be modified\n+    private static final int CEN_FILE_HEADER_FILE_COMMENT_STARTING_OFFSET = 0x6D;\n+    \/\/ CEN Header offset for the entry name to be modified\n+    private static final int CEN_FILE_HEADER_FILENAME_STARTING_OFFSET = 0x66;\n+    \/\/ LOC Header offset for the entry name to be modified\n+    private static final int LOC_FILE_HEADER_FILENAME_STARTING_OFFSET = 0x1e;\n+    \/\/ CEN Entry comment\n+    public static final String ENTRY_COMMENT = \"entryComment\";\n+    \/\/ Entry name to be modified\/validated\n+    public static final String ENTRY_NAME = \"entryName\";\n+    \/\/ Zip file comment to be modified\/validated\n+    public static final String ZIP_FILE_COMMENT = \"ZipFileComment\";\n+    \/\/ Buffer used to massage the byte array containing the Zip File\n+    private ByteBuffer buffer;\n+    \/\/ Array used to copy VALID_ZIP into prior to each test run\n+    private byte[] zipArray;\n@@ -68,10 +85,72 @@\n-    \/\/ ZIP file with invalid comment field\n-    private Path invalidComment;\n-\n-    @BeforeTest\n-    public void setup() throws IOException {\n-        \/\/ Create a ZIP file with valid name and comment fields\n-        byte[] templateZip = templateZIP();\n-\n-        \/\/ Create a ZIP with a CEN name field containing an invalid byte sequence\n-        invalidName = invalidName(\"invalid-name.zip\", templateZip);\n+    \/**\n+     * Byte array representing a valid Zip file prior modifying the CEN\/LOC\n+     * entry name, CEN entry comment or Zip file comment with an invalid\n+     * UTF-8 byte sequence.\n+     * See the createZipByteArray method which was used to create the original\n+     * Zip file\n+     * ----------------#1--------------------\n+     * [Central Directory Header]\n+     * 0x3a: Signature        : 0x02014b50\n+     * 0x3e: Created Zip Spec :       0x14 [2.0]\n+     * 0x3f: Created OS       :        0x0 [MS-DOS]\n+     * 0x40: VerMadeby        :       0x14 [0, 2.0]\n+     * 0x41: VerExtract       :       0x14 [2.0]\n+     * 0x42: Flag             :      0x808\n+     * 0x44: Method           :        0x8 [DEFLATED]\n+     * 0x46: Last Mod Time    : 0x58506664 [Fri Feb 16 12:51:08 EST 2024]\n+     * 0x4a: CRC              : 0xd202ef8d\n+     * 0x4e: Compressed Size  :        0x3\n+     * 0x52: Uncompressed Size:        0x1\n+     * 0x56: Name Length      :        0x9\n+     * 0x58: Extra Length     :        0x0\n+     * 0x5a: Comment Length   :        0xc\n+     * 0x5c: Disk Start       :        0x0\n+     * 0x5e: Attrs            :        0x0\n+     * 0x60: AttrsEx          :        0x0\n+     * 0x64: Loc Header Offset:        0x0\n+     * 0x68: File Name        :  entryName\n+     * 0x71: Comment          : [entryComment]\n+     * [Local File Header]\n+     * 0x0: Signature   :   0x04034b50\n+     * 0x4: Version     :         0x14    [2.0]\n+     * 0x6: Flag        :        0x808\n+     * 0x8: Method      :          0x8    [DEFLATED]\n+     * 0xa: LastMTime   :   0x58506664    [Fri Feb 16 12:51:08 EST 2024]\n+     * 0xe: CRC         :          0x0\n+     * 0x12: CSize       :          0x0\n+     * 0x16: Size        :          0x0\n+     * 0x1a: Name Length :          0x9    [entryName]\n+     * 0x1c: ExtraLength :          0x0\n+     * 0x1e: File Name   : [entryName]\n+     * [End Central Directory Header]\n+     * 0x7d: Signature   :   0x06054b50\n+     * 0x85: Disk Entries:          0x1\n+     * 0x87: Total Entries:         0x1\n+     * 0x89: CEN Size    :         0x43\n+     * 0x8d: Offset CEN  :         0x3a\n+     * 0x91: Comment Len :          0xe\n+     * 0x93: Comment     :   [ZipFileComment]\n+     *\/\n+    public static byte[] VALID_ZIP = {\n+            (byte) 0x50, (byte) 0x4b, (byte) 0x3, (byte) 0x4, (byte) 0x14, (byte) 0x0, (byte) 0x8, (byte) 0x8,\n+            (byte) 0x8, (byte) 0x0, (byte) 0x7d, (byte) 0x6f, (byte) 0x50, (byte) 0x58, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x9, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x65, (byte) 0x6e,\n+            (byte) 0x74, (byte) 0x72, (byte) 0x79, (byte) 0x4e, (byte) 0x61, (byte) 0x6d, (byte) 0x65, (byte) 0x63,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x50, (byte) 0x4b, (byte) 0x7, (byte) 0x8, (byte) 0x8d, (byte) 0xef,\n+            (byte) 0x2, (byte) 0xd2, (byte) 0x3, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x50, (byte) 0x4b, (byte) 0x1, (byte) 0x2, (byte) 0x14, (byte) 0x0,\n+            (byte) 0x14, (byte) 0x0, (byte) 0x8, (byte) 0x8, (byte) 0x8, (byte) 0x0, (byte) 0x7d, (byte) 0x6f,\n+            (byte) 0x50, (byte) 0x58, (byte) 0x8d, (byte) 0xef, (byte) 0x2, (byte) 0xd2, (byte) 0x3, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x9, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0xc, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x65, (byte) 0x6e, (byte) 0x74, (byte) 0x72, (byte) 0x79, (byte) 0x4e, (byte) 0x61, (byte) 0x6d,\n+            (byte) 0x65, (byte) 0x65, (byte) 0x6e, (byte) 0x74, (byte) 0x72, (byte) 0x79, (byte) 0x43, (byte) 0x6f,\n+            (byte) 0x6d, (byte) 0x6d, (byte) 0x65, (byte) 0x6e, (byte) 0x74, (byte) 0x50, (byte) 0x4b, (byte) 0x5,\n+            (byte) 0x6, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x1, (byte) 0x0, (byte) 0x1,\n+            (byte) 0x0, (byte) 0x43, (byte) 0x0, (byte) 0x0, (byte) 0x0, (byte) 0x3a, (byte) 0x0, (byte) 0x0,\n+            (byte) 0x0, (byte) 0xe, (byte) 0x0, (byte) 0x5a, (byte) 0x69, (byte) 0x70, (byte) 0x46, (byte) 0x69,\n+            (byte) 0x6c, (byte) 0x65, (byte) 0x43, (byte) 0x6f, (byte) 0x6d, (byte) 0x6d, (byte) 0x65, (byte) 0x6e,\n+            (byte) 0x74,\n+    };\n@@ -79,2 +158,11 @@\n-        \/\/ Create a ZIP with a CEN comment field containing an invalid byte sequence\n-        invalidComment = invalidComment(\"invalid-comment.zip\", templateZip);\n+    \/**\n+     * Delete the Zip file if it exists prior to each run and create a copy\n+     * of the byte array representing a valid ZIP file to be used by each test run\n+     *\n+     * @throws IOException if an error occurs\n+     *\/\n+    @BeforeEach\n+    public void setupTest() throws IOException {\n+        Files.deleteIfExists(ZIP_FILE);\n+        zipArray = Arrays.copyOf(VALID_ZIP, VALID_ZIP.length);\n+        buffer = ByteBuffer.wrap(zipArray).order(ByteOrder.LITTLE_ENDIAN);\n@@ -84,3 +172,4 @@\n-     * Opening a ZipFile with an invalid UTF-8 byte sequence in\n-     * the name field of a CEN file header should throw a\n-     * ZipException with \"bad entry name or comment\"\n+     * The DataProvider of CEN offsets to modify with an invalid UTF-8 byte\n+     * sequence\n+     *\n+     * @return Arguments used in each test run\n@@ -88,6 +177,7 @@\n-    @Test\n-    public void shouldRejectInvalidName() throws IOException {\n-        ZipException ex = expectThrows(ZipException.class, () -> {\n-            new ZipFile(invalidName.toFile());\n-        });\n-        assertEquals(ex.getMessage(), BAD_ENTRY_NAME_OR_COMMENT);\n+    private static Stream<Arguments> CENCommentOffsets() {\n+        return Stream.of(\n+                \/\/ Entry's name starting offset\n+                Arguments.of(CEN_FILE_HEADER_FILENAME_STARTING_OFFSET),\n+                \/\/ Entry's comment starting offset\n+                Arguments.of(CEN_FILE_HEADER_FILE_COMMENT_STARTING_OFFSET)\n+        );\n@@ -97,3 +187,2 @@\n-     * Opening a ZipFile with an invalid UTF-8 byte sequence in\n-     * the comment field of a CEN file header should throw a\n-     * ZipException with \"bad entry name or comment\"\n+     * Validate that the original Zip file can be opened via ZipFile.\n+     * @throws IOException if an error occurs\n@@ -102,5 +191,6 @@\n-    public void shouldRejectInvalidComment() throws IOException {\n-        ZipException ex = expectThrows(ZipException.class, () -> {\n-            new ZipFile(invalidComment.toFile());\n-        });\n-        assertEquals(ex.getMessage(), BAD_ENTRY_NAME_OR_COMMENT);\n+    public void testValidEntryNameAndComment() throws IOException {\n+        Files.write(ZIP_FILE, zipArray);\n+        try (ZipFile zf = new ZipFile(ZIP_FILE.toFile())) {\n+            var comment = zf.getComment();\n+            assertEquals(ZIP_FILE_COMMENT, comment);\n+        }\n@@ -110,1 +200,3 @@\n-     * Make a valid ZIP file used as a template for invalid files\n+     * Validate that the original Zip file can be opened and traversed via\n+     * ZipinputStream::getNextEntry.\n+     * @throws IOException if an error occurs\n@@ -112,6 +204,8 @@\n-    private byte[] templateZIP() throws IOException {\n-        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n-        try (ZipOutputStream zo = new ZipOutputStream(bout)) {\n-            ZipEntry commentEntry = new ZipEntry(\"file\");\n-            commentEntry.setComment(\"Comment\");\n-            zo.putNextEntry(commentEntry);\n+    @Test\n+    public void traverseZipWithZipInputStreamTest() throws IOException {\n+        Files.write(ZIP_FILE, zipArray);\n+        try (ZipInputStream zis = new ZipInputStream(new FileInputStream(ZIP_FILE.toFile()))) {\n+            ZipEntry ze;\n+            while ((ze = zis.getNextEntry()) != null) {\n+                assertEquals(ENTRY_NAME, ze.getName());\n+            }\n@@ -119,1 +213,0 @@\n-        return bout.toByteArray();\n@@ -123,1 +216,6 @@\n-     * Make a ZIP with invalid bytes in the CEN name field\n+     * Validate that a ZipException is thrown when an entry name or entry comment\n+     * within a CEN file header contains an invalid UTF-8 byte sequence.\n+     *\n+     * @param offset the offset to the file name or file comment within the CEN\n+     *               file header\n+     * @throws IOException if an error occurs\n@@ -125,10 +223,11 @@\n-    private Path invalidName(String name, byte[] template) throws IOException {\n-        ByteBuffer buffer = copyTemplate(template);\n-        int off = cenStart(buffer);\n-        \/\/ Name field starts here\n-        int noff = off + CEN_HDR;\n-\n-        \/\/ Write invalid bytes\n-        buffer.put(noff, INVALID_UTF8_BYTE_SEQUENCE, 0, INVALID_UTF8_BYTE_SEQUENCE.length);\n-        return writeFile(name, buffer);\n-\n+    @ParameterizedTest\n+    @MethodSource(\"CENCommentOffsets\")\n+    public void testInValidEntryNameOrComment(int offset)\n+            throws IOException {\n+        createInvalidUTFEntryInZipFile(offset);\n+        Throwable ex = assertThrows(ZipException.class, () ->\n+                {\n+                    try (ZipFile zf = new ZipFile(ZIP_FILE.toFile())) {};\n+                }\n+        );\n+        assertEquals(CEN_BAD_ENTRY_NAME_OR_COMMENT, ex.getMessage());\n@@ -136,1 +235,0 @@\n-\n@@ -138,2 +236,3 @@\n-     * Make a copy of the ZIP template and wrap it in a little-endian\n-     * ByteBuffer\n+     * Validate that a null is returned from ZipFile::getComment when the\n+     * comment contains an invalid UTF-8 byte sequence.\n+     * @throws IOException if an error occurs\n@@ -141,3 +240,6 @@\n-    private ByteBuffer copyTemplate(byte[] template) {\n-        return ByteBuffer.wrap(Arrays.copyOf(template, template.length))\n-                .order(ByteOrder.LITTLE_ENDIAN);\n+    @Test\n+    public void testInValidZipFileComment() throws IOException {\n+        createInvalidUTFEntryInZipFile(ZIP_FILE_COMMENT_OFFSET);\n+        try (ZipFile zf = new ZipFile(ZIP_FILE.toFile())) {\n+            assertNull(zf.getComment());\n+        }\n@@ -147,1 +249,3 @@\n-     * Make a ZIP with invalid bytes in the CEN comment field\n+     * Validate that a ZipException is thrown when an entry name\n+     * within a LOC file header contains an invalid UTF-8 byte sequence.\n+     * @throws IOException if an error occurs\n@@ -149,13 +253,11 @@\n-    private Path invalidComment(String name, byte[] template) throws IOException {\n-        ByteBuffer buffer = copyTemplate(template);\n-        int off = cenStart(buffer);\n-        \/\/ Need to skip past the length of the name and extra fields\n-        int nlen = buffer.getShort(off + NLEN);\n-        int elen = buffer.getShort(off + ELEN);\n-\n-        \/\/ Comment field starts here\n-        int coff = off + CEN_HDR + nlen + elen;\n-\n-        \/\/ Write invalid bytes\n-        buffer.put(coff, INVALID_UTF8_BYTE_SEQUENCE, 0, INVALID_UTF8_BYTE_SEQUENCE.length);\n-        return writeFile(name, buffer);\n+    @Test\n+    public void invalidZipInputStreamTest() throws IOException {\n+        createInvalidUTFEntryInZipFile(LOC_FILE_HEADER_FILENAME_STARTING_OFFSET);\n+        Throwable ex = assertThrows(ZipException.class, () ->\n+                {\n+                    try (ZipInputStream zis =\n+                                 new ZipInputStream(new FileInputStream(ZIP_FILE.toFile()))) {\n+                        zis.getNextEntry();\n+                    };\n+                });\n+        assertEquals(LOC_HEADER_BAD_ENTRY_NAME, ex.getMessage());\n@@ -164,0 +266,12 @@\n+    \/**\n+     * Utility method which modifies a Zip file starting at the specified\n+     * offset to include an invalid UTF-8 byte sequence.\n+     *\n+     * @param offset starting offset within the Zip file to modify\n+     * @throws IOException if an error occurs\n+     *\/\n+    private void createInvalidUTFEntryInZipFile(int offset) throws IOException {\n+        buffer.put(offset, INVALID_UTF8_BYTE_SEQUENCE, 0,\n+                INVALID_UTF8_BYTE_SEQUENCE.length);\n+        Files.write(ZIP_FILE, zipArray);\n+    }\n@@ -166,4 +280,19 @@\n-     * Finds the offset of the start of the CEN directory\n-      *\/\n-    private int cenStart(ByteBuffer buffer) {\n-        return buffer.getInt(buffer.capacity() - EOC_OFF);\n+     * Utility method which creates the Zip file used by the tests and\n+     * converts Zip file to byte array declaration.\n+     *\n+     * @throws IOException if an error occurs\n+     *\/\n+    private void createZipByteArray() throws IOException {\n+        ZipOutputStream zos = new ZipOutputStream(\n+                new FileOutputStream(ZIP_FILE.toFile()));\n+        zos.setComment(ZIP_FILE_COMMENT);\n+        ZipEntry entry = new ZipEntry(ENTRY_NAME);\n+        entry.setComment(ENTRY_COMMENT);\n+        zos.putNextEntry(entry);\n+        zos.write(new byte[1]);\n+        zos.closeEntry();\n+        zos.close();\n+        \/\/ Now create the byte array entry declaration\n+        var fooJar = Files.readAllBytes(ZIP_FILE);\n+        var result = createByteArray(fooJar, \"VALID_ZIP\");\n+        System.out.println(result);\n@@ -173,1 +302,11 @@\n-     * Utility to write a ByteBuffer to disk\n+     * Utility method which takes a byte array and converts to byte array\n+     * declaration.  For example:\n+     * {@snippet :\n+     * var fooJar = Files.readAllBytes(Path.of(\"foo.jar\"));\n+     * var result = createByteArray(fooJar,\"FOOBYTES\");\n+     * System.out.println(result);\n+     * }\n+     *\n+     * @param bytes A byte array used to create a byte array declaration\n+     * @param name  Name to be used in the byte array declaration\n+     * @return The formatted byte array declaration\n@@ -175,5 +314,10 @@\n-    private Path writeFile(String name, ByteBuffer buffer) throws IOException {\n-        Path zip = Path.of(name);\n-        try (FileChannel ch = new FileOutputStream(zip.toFile()).getChannel()) {\n-            buffer.rewind();\n-            ch.write(buffer);\n+    public static String createByteArray(byte[] bytes, String name) {\n+        StringBuilder sb = new StringBuilder(bytes.length * 5);\n+        Formatter fmt = new Formatter(sb);\n+        fmt.format(\"    public static byte[] %s = {\", name);\n+        final int linelen = 8;\n+        for (int i = 0; i < bytes.length; i++) {\n+            if (i % linelen == 0) {\n+                fmt.format(\"%n        \");\n+            }\n+            fmt.format(\" (byte) 0x%x,\", bytes[i] & 0xff);\n@@ -181,1 +325,2 @@\n-        return zip;\n+        fmt.format(\"%n    };%n\");\n+        return sb.toString();\n","filename":"test\/jdk\/java\/util\/zip\/ZipFile\/InvalidBytesInEntryNameOrComment.java","additions":252,"deletions":107,"binary":false,"changes":359,"status":"modified"}]}