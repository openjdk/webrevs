{"files":[{"patch":"@@ -638,2 +638,5 @@\n-    \/\/ It is assumed that enter_for must enter on an object without contention.\n-    monitor = inflate_and_enter(obj(), ObjectSynchronizer::inflate_cause_monitor_enter, locking_thread, current);\n+    do {\n+      \/\/ It is assumed that enter_for must enter on an object without contention.\n+      monitor = inflate_and_enter(obj(), ObjectSynchronizer::inflate_cause_monitor_enter, locking_thread, current);\n+      \/\/ But there may still be a race with deflation.\n+    } while (monitor == nullptr);\n","filename":"src\/hotspot\/share\/runtime\/lightweightSynchronizer.cpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -161,0 +161,14 @@\n+ *\n+ * @bug 8341819\n+ * @test id=8341819\n+ * @comment Regression test for re-locking racing with deflation with LM_LIGHTWEIGHT.\n+ * @run driver EATests\n+ *                 -XX:+UnlockDiagnosticVMOptions\n+ *                 -Xms256m -Xmx256m\n+ *                 -Xbootclasspath\/a:.\n+ *                 -XX:CompileCommand=dontinline,*::dontinline_*\n+ *                 -XX:+WhiteBoxAPI\n+ *                 -Xbatch\n+ *                 -XX:+DoEscapeAnalysis -XX:+EliminateAllocations -XX:+EliminateLocks -XX:+EliminateNestedLocks\n+ *                 -XX:LockingMode=2\n+ *                 -XX:GuaranteedAsyncDeflationInterval=1\n","filename":"test\/jdk\/com\/sun\/jdi\/EATests.java","additions":14,"deletions":0,"binary":false,"changes":14,"status":"modified"}]}