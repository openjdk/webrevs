{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,0 +95,1 @@\n+                    System.err.println(getMessage(\"compress.warn.argumentdeprecated\", LEVEL_0));\n@@ -99,0 +100,1 @@\n+                    System.err.println(getMessage(\"compress.warn.argumentdeprecated\", LEVEL_1));\n@@ -102,0 +104,1 @@\n+                    System.err.println(getMessage(\"compress.warn.argumentdeprecated\", LEVEL_2));\n@@ -105,0 +108,7 @@\n+                    if (level.length() == 5 && level.startsWith(\"zip-\")) {\n+                        try {\n+                            int zipLevel = Integer.parseInt(level.substring(4));\n+                            zip = new ZipPlugin(resFilter, zipLevel);\n+                            break;\n+                        } catch (NumberFormatException ignored) {}\n+                    }\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/DefaultCompressPlugin.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,3 @@\n+    private static final int DEFAULT_COMPRESSION = 6;\n+    private final int compressionLevel;\n+\n@@ -57,0 +60,4 @@\n+        this(predicate, DEFAULT_COMPRESSION);\n+    }\n+\n+    ZipPlugin(Predicate<String> predicate, int compressionLevel) {\n@@ -59,0 +66,1 @@\n+        this.compressionLevel = compressionLevel;\n@@ -76,2 +84,2 @@\n-    static byte[] compress(byte[] bytesIn) {\n-        Deflater deflater = new Deflater();\n+    static byte[] compress(byte[] bytesIn, int compressionLevel) {\n+        Deflater deflater = new Deflater(compressionLevel);\n@@ -107,1 +115,1 @@\n-                compressed = compress(resource.contentBytes());\n+                compressed = compress(resource.contentBytes(), this.compressionLevel);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/plugins\/ZipPlugin.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -62,1 +62,1 @@\n-compress.argument=<0|1|2>[:filter=<pattern-list>]\n+compress.argument=<zip-[0-9]>[:filter=<pattern-list>]\n@@ -64,7 +64,1 @@\n-compress.description=\\\n-Compress all resources in the output image.\\n\\\n-Level 0: No compression\\n\\\n-Level 1: Constant string sharing\\n\\\n-Level 2: ZIP.\\n\\\n-An optional <pattern-list> filter can be specified to list the pattern of\\n\\\n-files to be included.\n+compress.description= Compression to use in compressing resources.\n@@ -73,21 +67,9 @@\n-\\  --compress <0|1|2>[:filter=<pattern-list>]\\n\\\n-\\                            Compress all resources in the output image.\\n\\\n-\\                            Level 0: No compression\\n\\\n-\\                            Level 1: Constant string sharing\\n\\\n-\\                            Level 2: ZIP.\\n\\\n-\\                            An optional <pattern-list> filter can be\\n\\\n-\\                            specified to list the pattern of \\n\\\n-\\                            files to be included.\n-\n-compact-cp.argument=<resource paths>\n-\n-compact-cp.description=Constant Pool strings sharing.\\n\\\n-By default, all resources are compressed. You can express the set \\n\\\n-of resources to compress or not compress (use ^ for negation).\n-\n-compact-cp.usage=\\\n-\\ --compact-cp <resource paths>\\n\\\n-\\                             Constant Pool strings sharing.\\n\\\n-\\                             By default, all resources are compressed.\\n\\\n-\\                             You can express the set of resources to\\n\\\n-\\                             compress or not compress (use ^ for negation).\n+\\  --compress <compress>     Compression to use in compressing resources:\\n\\\n+\\                            Accepted values are:\\n\\\n+\\                            zip-[0-9], where zip-0 provides no compression,\\n\\\n+\\                            and zip-9 provides the best compression.\\n\\\n+\\                            Default is zip-6.\n+\n+compress.warn.argumentdeprecated=\\\n+Warning: The {0} argument for --compress is deprecated and may be removed in a future release\n+\n@@ -326,4 +308,9 @@\n-\\  -c, --compress=<0|1|2>                Enable compression of resources:\\n\\\n-\\                                          Level 0: No compression\\n\\\n-\\                                          Level 1: Constant string sharing\\n\\\n-\\                                          Level 2: ZIP\n+\\      --compress <compress>             Compression to use in compressing resources:\\n\\\n+\\                                        Accepted values are:\\n\\\n+\\                                        zip-[0-9], where zip-0 provides no compression,\\n\\\n+\\                                        and zip-9 provides the best compression.\\n\\\n+\\                                        Default is zip-6.\\n\\\n+\\                                        Deprecated values to be removed in a future release:\\n\\\n+\\                                        0:  No compression. Equivalent to zip-0.\\n\\\n+\\                                        1:  Constant String Sharing\\n\\\n+\\                                        2:  Equivalent to zip-6.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/resources\/plugins.properties","additions":20,"deletions":33,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -85,1 +85,0 @@\n-\n","filename":"src\/jdk.jlink\/share\/classes\/module-info.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -312,0 +312,9 @@\n+        \/\/ Unix style compression arguments\n+        {\n+            testCompress(helper, \"compresscmdcompositezip6\", \"--compress\", \"zip-6\");\n+        }\n+\n+        {\n+            testCompress(helper, \"compresscmdcompositezip0\", \"--compress\", \"zip-0\");\n+        }\n+\n@@ -329,0 +338,17 @@\n+        \/\/ compress zip-0 with filter\n+        {\n+            testCompress(helper, \"compresszip0filtercmdcomposite2\",\n+                    \"--compress=zip-0:filter=^\/java.base\/java\/lang\/*\");\n+        }\n+\n+        \/\/ compress zip-6 with filter\n+        {\n+            testCompress(helper, \"compresszip6filtercmdcomposite2\",\n+                    \"--compress=zip-6:filter=^\/java.base\/java\/lang\/*\");\n+        }\n+\n+        \/\/ compress zip-9 with filter\n+        {\n+            testCompress(helper, \"compresszip9filtercmdcomposite2\",\n+                    \"--compress=zip-9:filter=^\/java.base\/java\/lang\/*\");\n+        }\n","filename":"test\/jdk\/tools\/jlink\/JLinkTest.java","additions":26,"deletions":0,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2023, Oracle and\/or its affiliates. All rights reserved.\n@@ -149,0 +149,61 @@\n+\n+        \/\/ compress level zip-0 == no compression\n+        Properties optionsZip0 = new Properties();\n+        DefaultCompressPlugin compressPluginZip0 = new DefaultCompressPlugin();\n+        optionsZip0.setProperty(compressPluginZip0.getName(), \"zip-0\");\n+        checkCompress(classes, compressPluginZip0,\n+                optionsZip0,\n+                new ResourceDecompressorFactory[]{\n+                });\n+\n+        \/\/ compress level zip-[1-9] == varied compression levels\n+        for(int i = 1; i < 10; i++) {\n+            Properties optionsZip = new Properties();\n+            compressPlugin = new DefaultCompressPlugin();\n+            optionsZip.setProperty(compressPlugin.getName(), \"zip-\" + i);\n+            checkCompress(classes, compressPlugin,\n+                    optionsZip,\n+                    new ResourceDecompressorFactory[]{\n+                            new ZipDecompressorFactory(),\n+                    });\n+        }\n+\n+        \/\/ compress level zip-[1-9] == varied compression levels + filter\n+        for(int i = 1; i < 10; i++) {\n+            Properties optionsZip = new Properties();\n+            compressPlugin = new DefaultCompressPlugin();\n+            optionsZip.setProperty(DefaultCompressPlugin.FILTER, \"**Exception.class\");\n+            optionsZip.setProperty(compressPlugin.getName(), \"zip-\" + i);\n+            checkCompress(classes, compressPlugin,\n+                    optionsZip,\n+                    new ResourceDecompressorFactory[]{\n+                            new ZipDecompressorFactory(),\n+                    }, Collections.singletonList(\".*Exception.class\"));\n+        }\n+\n+        testBadCompressProps(classes, \"zip-10\");\n+        testBadCompressProps(classes, \"zip-badarg\");\n+        testBadCompressProps(classes, \"zip-10000000\");\n+\n+    }\n+\n+    private void testBadCompressProps(ResourcePool classes, String compressArg) throws Exception {\n+        Properties badProps = new Properties();\n+        DefaultCompressPlugin compressPlugin = new DefaultCompressPlugin();\n+        badProps.setProperty(compressPlugin.getName(), compressArg);\n+        try {\n+            checkCompress(classes, compressPlugin,\n+                    badProps,\n+                    new ResourceDecompressorFactory[]{\n+                            new ZipDecompressorFactory(),\n+                    });\n+        } catch (IllegalArgumentException e) {\n+            if (e.getMessage().contains(\"Invalid compression level\")) {\n+                return;\n+            } else {\n+                throw e;\n+            }\n+        }\n+\n+        throw new Exception(\"Expected compression IAE with \" + compressArg + \" but didn't get one.\");\n+\n","filename":"test\/jdk\/tools\/jlink\/plugins\/CompressorPluginTest.java","additions":62,"deletions":1,"binary":false,"changes":63,"status":"modified"}]}