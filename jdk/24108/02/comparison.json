{"files":[{"patch":"@@ -32,0 +32,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -54,0 +55,16 @@\n+    private static final String STR_4 = \"null\";\n+    private static final byte[] STR_4_BYTES_LATIN1 = STR_4.getBytes(java.nio.charset.StandardCharsets.ISO_8859_1);\n+    private static final byte[] STR_4_BYTES_UTF16 = STR_4.getBytes(\n+            ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN ? StandardCharsets.UTF_16BE : StandardCharsets.UTF_16LE);\n+    private static final int STR_4_BYTES_LATIN1_INT = UNSAFE.getInt(STR_4_BYTES_LATIN1, Unsafe.ARRAY_BYTE_BASE_OFFSET);\n+    private static final long STR_4_BYTES_UTF16_LONG = UNSAFE.getLong(STR_4_BYTES_UTF16, Unsafe.ARRAY_BYTE_BASE_OFFSET);\n+\n+    private static final String STR_5 = \"false\";\n+    private static final byte[] STR_5_BYTES_LATIN1 = STR_5.getBytes(java.nio.charset.StandardCharsets.ISO_8859_1);\n+    private static final byte[] STR_5_BYTES_UTF16 = STR_5.getBytes(\n+            ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN ? StandardCharsets.UTF_16BE : StandardCharsets.UTF_16LE);\n+    private static final int STR_5_BYTES_LATIN1_INT = UNSAFE.getInt(STR_5_BYTES_LATIN1, Unsafe.ARRAY_BYTE_BASE_OFFSET);\n+    private static final byte STR_5_BYTES_LATIN1_BYTE = STR_5_BYTES_LATIN1[4];\n+    private static final long STR_5_BYTES_UTF16_LONG = UNSAFE.getLong(STR_5_BYTES_UTF16, Unsafe.ARRAY_BYTE_BASE_OFFSET);\n+    private static final short STR_5_BYTES_UTF16_SHORT = UNSAFE.getShort(STR_5_BYTES_UTF16, Unsafe.ARRAY_BYTE_BASE_OFFSET + 8);\n+\n@@ -57,0 +74,1 @@\n+    final byte[] bytes5 = new byte[NUMBERS * 5];\n@@ -58,0 +76,1 @@\n+    final byte[] bytes10 = new byte[NUMBERS * 10];\n@@ -61,0 +80,4 @@\n+    final char[] chars4 = new char[NUMBERS * 4];\n+    final char[] chars5 = new char[NUMBERS * 5];\n+    final StringBuilder sb = new StringBuilder(NUMBERS * 5);\n+    final StringBuilder sb_utf16 = new StringBuilder(NUMBERS * 10).append('\\u4e2d');\n@@ -494,0 +517,198 @@\n+    \/**\n+     * Test whether a constant String of length 4 is MergeStored when calling getBytes\n+     *\/\n+    @Benchmark\n+    @SuppressWarnings(\"deprecation\")\n+    public void putNull_getBytes(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            STR_4.getBytes(0, 4, bytes4, off);\n+            off += 4;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test whether a constant byte[] with a length of 4 is MergeStored when arraycopy is called\n+     *\/\n+    @Benchmark\n+    public void str4Arraycopy(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            System.arraycopy(STR_4_BYTES_LATIN1, 0, bytes4, off, 4);\n+            off += 4;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test the performance of Unsafe.putInt, used as a benchmark for comparison with other str4 Benchmarks\n+     *\/\n+    @Benchmark\n+    public void str4UnsafePutInt(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            UNSAFE.putInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_4_BYTES_LATIN1_INT);\n+            off += 4;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test whether StringBuilder is MergeStored when appending a constant String of length 4\n+     *\/\n+    @Benchmark\n+    public void str4StringBuilder(Blackhole BH) {\n+        sb.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            sb.append(STR_4);\n+        }\n+        BH.consume(sb.length());\n+    }\n+\n+    \/**\n+     * Test whether the constant String with a length of 4 calls the getChars method to mergestore\n+     *\/\n+    @Benchmark\n+    public void str4GetChars(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            STR_4.getChars(0, 4, chars4, off);\n+            off += 4;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test the performance of putLong for comparison with other str4Utf16 benchmarks\n+     *\/\n+    @Benchmark\n+    public void str4Utf16UnsafePutLong(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            UNSAFE.putLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_4_BYTES_UTF16_LONG);\n+            off += 8;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test whether the byte[] arraycopy with a length of 8 is MergeStore\n+     *\/\n+    @Benchmark\n+    public void str4Utf16ArrayCopy(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            System.arraycopy(STR_4_BYTES_UTF16, 0, bytes8, off, 8);\n+            off += 8;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test whether the UTF16 StringBuilder appends a constant String of length 4 to MergeStore\n+     *\/\n+    @Benchmark\n+    public void str4Utf16StringBuilder(Blackhole BH) {\n+        sb_utf16.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            sb_utf16.append(STR_4);\n+        }\n+        BH.consume(sb_utf16.length());\n+    }\n+\n+    \/**\n+     * Test whether a constant byte[] with a length of 5 is MergeStored when arraycopy is called\n+     *\/\n+    @Benchmark\n+    public void str5Arraycopy(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            System.arraycopy(STR_5_BYTES_LATIN1, 0, bytes5, off, 5);\n+            off += 5;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test the performance of Unsafe.putInt, used as a benchmark for comparison with other str5 Benchmarks\n+     *\/\n+    @Benchmark\n+    public void str5UnsafePutInt(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            UNSAFE.putInt(bytes5, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_5_BYTES_LATIN1_INT);\n+            UNSAFE.putByte(bytes5, Unsafe.ARRAY_BYTE_BASE_OFFSET + off + 4, STR_5_BYTES_LATIN1_BYTE);\n+            off += 5;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test whether StringBuilder is MergeStored when appending a constant String of length 5\n+     *\/\n+    @Benchmark\n+    public void str5StringBuilder(Blackhole BH) {\n+        sb.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            sb.append(STR_5);\n+        }\n+        BH.consume(sb.length());\n+    }\n+\n+    \/**\n+     * Test whether the constant String with a length of 5 calls the getChars method to mergestore\n+     *\/\n+    @Benchmark\n+    public void str5GetChars(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            STR_5.getChars(0, 5, chars5, off);\n+            off += 5;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test the performance of putLong for comparison with other str5Utf16 benchmarks\n+     *\/\n+    @Benchmark\n+    public void str5Utf16UnsafePutLong(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            UNSAFE.putLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_5_BYTES_UTF16_LONG);\n+            UNSAFE.putShort(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + off + 8, STR_5_BYTES_UTF16_SHORT);\n+            off += 10;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test whether the byte[] arraycopy with a length of 10 is MergeStore\n+     *\/\n+    @Benchmark\n+    public void str5Utf16ArrayCopy(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            System.arraycopy(STR_5_BYTES_UTF16, 0, bytes10, off, 10);\n+            off += 10;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test whether the UTF16 StringBuilder appends a constant String of length 5 to MergeStore\n+     *\/\n+    @Benchmark\n+    public void str5Utf16StringBuilder(Blackhole BH) {\n+        sb_utf16.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            sb_utf16.append(STR_5);\n+        }\n+        BH.consume(sb_utf16.length());\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MergeStoreBench.java","additions":221,"deletions":0,"binary":false,"changes":221,"status":"modified"}]}