{"files":[{"patch":"@@ -55,0 +55,10 @@\n+    final static long FIELD_OFFSET_STR_BUILDER_VALUE;\n+    final static long FIELD_OFFSET_STR_BUILDER_CODER;\n+    final static long FIELD_OFFSET_STR_BUILDER_COUNT;\n+    static {\n+        Class<?> clazz = StringBuilder.class.getSuperclass();\n+        FIELD_OFFSET_STR_BUILDER_VALUE = UNSAFE.objectFieldOffset(clazz, \"value\");\n+        FIELD_OFFSET_STR_BUILDER_CODER = UNSAFE.objectFieldOffset(clazz, \"coder\");\n+        FIELD_OFFSET_STR_BUILDER_COUNT = UNSAFE.objectFieldOffset(clazz, \"count\");\n+    }\n+\n@@ -111,2 +121,2 @@\n-    final StringBuilder sb = new StringBuilder(NUMBERS * 7);\n-    final StringBuilder sb_utf16 = new StringBuilder(NUMBERS * 14).append('\\u4e2d');\n+    final StringBuilder sb = new StringBuilder(NUMBERS * 10);\n+    final StringBuilder sb_utf16 = new StringBuilder(NUMBERS * 10).append('\\u4e2d');\n@@ -631,0 +641,41 @@\n+    private static void str4AppendUnsafePut(StringBuilder sb, char c0, char c1, char c2, char c3) {\n+        byte[] value = (byte[]) UNSAFE.getReference(sb, FIELD_OFFSET_STR_BUILDER_VALUE);\n+        byte coder = UNSAFE.getByte(sb, FIELD_OFFSET_STR_BUILDER_CODER);\n+        int count = UNSAFE.getInt(sb, FIELD_OFFSET_STR_BUILDER_COUNT);\n+        if (count + 4 >= (value.length >> coder)) {\n+            sb.ensureCapacity(count + 4);\n+            value = (byte[]) UNSAFE.getReference(sb, FIELD_OFFSET_STR_BUILDER_VALUE);\n+        }\n+        if (coder == 0) {\n+            value[count    ] = (byte) c0;\n+            value[count + 1] = (byte) c1;\n+            value[count + 2] = (byte) c2;\n+            value[count + 3] = (byte) c3;\n+        } else {\n+            long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + ((long) count << 1);\n+            UNSAFE.putChar(value, address    , c0);\n+            UNSAFE.putChar(value, address + 2, c1);\n+            UNSAFE.putChar(value, address + 4, c2);\n+            UNSAFE.putChar(value, address + 6, c3);\n+        }\n+        UNSAFE.putInt(sb, FIELD_OFFSET_STR_BUILDER_COUNT, count + 5); \/\/ disable auto vector\n+    }\n+\n+    \/**\n+     * Test whether StringBuilder is MergeStored when appending 4 constant characters\n+     *\/\n+    @Benchmark\n+    public void str4StringBuilderUnsafePut(Blackhole BH) {\n+        sb.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            str4AppendUnsafePut(\n+                    sb,\n+                    (char) STR_4_BYTES_LATIN1_BYTE_0,\n+                    (char) STR_4_BYTES_LATIN1_BYTE_1,\n+                    (char) STR_4_BYTES_LATIN1_BYTE_2,\n+                    (char) STR_4_BYTES_LATIN1_BYTE_3);\n+        }\n+        BH.consume(sb.length());\n+    }\n+\n@@ -691,1 +742,2 @@\n-        sb_utf16.setLength(0);\n+        var sb = sb_utf16;\n+        sb.setLength(0);\n@@ -694,1 +746,1 @@\n-            sb_utf16.append(STR_4);\n+            sb.append(STR_4);\n@@ -696,1 +748,1 @@\n-        BH.consume(sb_utf16.length());\n+        BH.consume(sb.length());\n@@ -704,1 +756,2 @@\n-        sb_utf16.setLength(0);\n+        var sb = sb_utf16;\n+        sb.setLength(0);\n@@ -707,4 +760,4 @@\n-            sb_utf16.append((char) STR_4_BYTES_LATIN1_BYTE_0);\n-            sb_utf16.append((char) STR_4_BYTES_LATIN1_BYTE_1);\n-            sb_utf16.append((char) STR_4_BYTES_LATIN1_BYTE_2);\n-            sb_utf16.append((char) STR_4_BYTES_LATIN1_BYTE_3);\n+            sb.append((char) STR_4_BYTES_LATIN1_BYTE_0);\n+            sb.append((char) STR_4_BYTES_LATIN1_BYTE_1);\n+            sb.append((char) STR_4_BYTES_LATIN1_BYTE_2);\n+            sb.append((char) STR_4_BYTES_LATIN1_BYTE_3);\n@@ -712,1 +765,20 @@\n-        BH.consume(sb_utf16.length());\n+        BH.consume(sb.length());\n+    }\n+\n+    \/**\n+     * Test whether StringBuilder is MergeStored when appending 4 constant characters\n+     *\/\n+    @Benchmark\n+    public void str4Utf16StringBuilderUnsafePut(Blackhole BH) {\n+        StringBuilder sb = sb_utf16;\n+        sb.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            str4AppendUnsafePut(\n+                    sb,\n+                    (char) STR_4_BYTES_LATIN1_BYTE_0,\n+                    (char) STR_4_BYTES_LATIN1_BYTE_1,\n+                    (char) STR_4_BYTES_LATIN1_BYTE_2,\n+                    (char) STR_4_BYTES_LATIN1_BYTE_3);\n+        }\n+        BH.consume(sb.length());\n@@ -803,0 +875,44 @@\n+    private static void str5AppendUnsafePut(StringBuilder sb, char c0, char c1, char c2, char c3, char c4) {\n+        byte[] value = (byte[]) UNSAFE.getReference(sb, FIELD_OFFSET_STR_BUILDER_VALUE);\n+        byte coder = UNSAFE.getByte(sb, FIELD_OFFSET_STR_BUILDER_CODER);\n+        int count = UNSAFE.getInt(sb, FIELD_OFFSET_STR_BUILDER_COUNT);\n+        if (count + 4 >= (value.length >> coder)) {\n+            sb.ensureCapacity(count + 4);\n+            value = (byte[]) UNSAFE.getReference(sb, FIELD_OFFSET_STR_BUILDER_VALUE);\n+        }\n+        if (coder == 0) {\n+            value[count    ] = (byte) c0;\n+            value[count + 1] = (byte) c1;\n+            value[count + 2] = (byte) c2;\n+            value[count + 3] = (byte) c3;\n+            value[count + 4] = (byte) c4;\n+        } else {\n+            long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + ((long) count << 1);\n+            UNSAFE.putChar(value, address    , c0);\n+            UNSAFE.putChar(value, address + 2, c1);\n+            UNSAFE.putChar(value, address + 4, c2);\n+            UNSAFE.putChar(value, address + 6, c3);\n+            UNSAFE.putChar(value, address + 8, c4);\n+        }\n+        UNSAFE.putInt(sb, FIELD_OFFSET_STR_BUILDER_COUNT, count + 6); \/\/ disable auto vector\n+    }\n+\n+    \/**\n+     * Test whether StringBuilder is MergeStored when appending 4 constant characters\n+     *\/\n+    @Benchmark\n+    public void str5StringBuilderUnsafePut(Blackhole BH) {\n+        sb.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            str5AppendUnsafePut(\n+                    sb,\n+                    (char) STR_5_BYTES_LATIN1_BYTE_0,\n+                    (char) STR_5_BYTES_LATIN1_BYTE_1,\n+                    (char) STR_5_BYTES_LATIN1_BYTE_2,\n+                    (char) STR_5_BYTES_LATIN1_BYTE_3,\n+                    (char) STR_5_BYTES_LATIN1_BYTE_4);\n+        }\n+        BH.consume(sb.length());\n+    }\n+\n@@ -865,1 +981,2 @@\n-        sb_utf16.setLength(0);\n+        StringBuilder sb = sb_utf16;\n+        sb.setLength(0);\n@@ -868,1 +985,1 @@\n-            sb_utf16.append(STR_5);\n+            sb.append(STR_5);\n@@ -870,1 +987,1 @@\n-        BH.consume(sb_utf16.length());\n+        BH.consume(sb.length());\n@@ -878,1 +995,19 @@\n-        sb_utf16.setLength(0);\n+        StringBuilder sb = sb_utf16;\n+        sb.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            sb.append((char) STR_5_BYTES_LATIN1_BYTE_0);\n+            sb.append((char) STR_5_BYTES_LATIN1_BYTE_1);\n+            sb.append((char) STR_5_BYTES_LATIN1_BYTE_2);\n+            sb.append((char) STR_5_BYTES_LATIN1_BYTE_3);\n+            sb.append((char) STR_5_BYTES_LATIN1_BYTE_4);\n+        }\n+        BH.consume(sb.length());\n+    }\n+\n+    \/**\n+     * Test whether StringBuilder is MergeStored when appending 4 constant characters\n+     *\/\n+    @Benchmark\n+    public void str5Utf16StringBuilderUnsafePut(Blackhole BH) {\n+        sb.setLength(0);\n@@ -881,5 +1016,7 @@\n-            sb_utf16.append((char) STR_5_BYTES_LATIN1_BYTE_0);\n-            sb_utf16.append((char) STR_5_BYTES_LATIN1_BYTE_1);\n-            sb_utf16.append((char) STR_5_BYTES_LATIN1_BYTE_2);\n-            sb_utf16.append((char) STR_5_BYTES_LATIN1_BYTE_3);\n-            sb_utf16.append((char) STR_5_BYTES_LATIN1_BYTE_4);\n+            str5AppendUnsafePut(\n+                    sb,\n+                    (char) STR_5_BYTES_LATIN1_BYTE_0,\n+                    (char) STR_5_BYTES_LATIN1_BYTE_1,\n+                    (char) STR_5_BYTES_LATIN1_BYTE_2,\n+                    (char) STR_5_BYTES_LATIN1_BYTE_3,\n+                    (char) STR_5_BYTES_LATIN1_BYTE_4);\n@@ -887,1 +1024,1 @@\n-        BH.consume(sb_utf16.length());\n+        BH.consume(sb.length());\n@@ -983,0 +1120,50 @@\n+    private static void str7AppendUnsafePut(StringBuilder sb, char c0, char c1, char c2, char c3, char c4, char c5, char c6) {\n+        byte[] value = (byte[]) UNSAFE.getReference(sb, FIELD_OFFSET_STR_BUILDER_VALUE);\n+        byte coder = UNSAFE.getByte(sb, FIELD_OFFSET_STR_BUILDER_CODER);\n+        int count = UNSAFE.getInt(sb, FIELD_OFFSET_STR_BUILDER_COUNT);\n+        if (count + 4 >= (value.length >> coder)) {\n+            sb.ensureCapacity(count + 4);\n+            value = (byte[]) UNSAFE.getReference(sb, FIELD_OFFSET_STR_BUILDER_VALUE);\n+        }\n+        if (coder == 0) {\n+            value[count    ] = (byte) c0;\n+            value[count + 1] = (byte) c1;\n+            value[count + 2] = (byte) c2;\n+            value[count + 3] = (byte) c3;\n+            value[count + 4] = (byte) c4;\n+            value[count + 5] = (byte) c5;\n+            value[count + 6] = (byte) c6;\n+        } else {\n+            long address = Unsafe.ARRAY_BYTE_BASE_OFFSET + ((long) count << 1);\n+            UNSAFE.putChar(value, address     , c0);\n+            UNSAFE.putChar(value, address +  2, c1);\n+            UNSAFE.putChar(value, address +  4, c2);\n+            UNSAFE.putChar(value, address +  6, c3);\n+            UNSAFE.putChar(value, address +  8, c4);\n+            UNSAFE.putChar(value, address + 10, c5);\n+            UNSAFE.putChar(value, address + 12, c6);\n+        }\n+        UNSAFE.putInt(sb, FIELD_OFFSET_STR_BUILDER_COUNT, count + 8); \/\/ disable auto vector\n+    }\n+\n+    \/**\n+     * Test whether StringBuilder is MergeStored when appending 4 constant characters\n+     *\/\n+    @Benchmark\n+    public void str7StringBuilderUnsafePut(Blackhole BH) {\n+        sb.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            str7AppendUnsafePut(\n+                    sb,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_0,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_1,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_2,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_3,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_4,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_5,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_6);\n+        }\n+        BH.consume(sb.length());\n+    }\n+\n@@ -1048,1 +1235,2 @@\n-        sb_utf16.setLength(0);\n+        var sb = sb_utf16;\n+        sb.setLength(0);\n@@ -1051,1 +1239,1 @@\n-            sb_utf16.append(STR_7);\n+            sb.append(STR_7);\n@@ -1053,1 +1241,1 @@\n-        BH.consume(sb_utf16.length());\n+        BH.consume(sb.length());\n@@ -1061,1 +1249,2 @@\n-        sb_utf16.setLength(0);\n+        var sb = sb_utf16;\n+        sb.setLength(0);\n@@ -1064,9 +1253,31 @@\n-            sb_utf16.append((char) STR_7_BYTES_LATIN1_BYTE_0);\n-            sb_utf16.append((char) STR_7_BYTES_LATIN1_BYTE_1);\n-            sb_utf16.append((char) STR_7_BYTES_LATIN1_BYTE_2);\n-            sb_utf16.append((char) STR_7_BYTES_LATIN1_BYTE_3);\n-            sb_utf16.append((char) STR_7_BYTES_LATIN1_BYTE_4);\n-            sb_utf16.append((char) STR_7_BYTES_LATIN1_BYTE_5);\n-            sb_utf16.append((char) STR_7_BYTES_LATIN1_BYTE_6);\n-        }\n-        BH.consume(sb_utf16.length());\n+            sb.append((char) STR_7_BYTES_LATIN1_BYTE_0);\n+            sb.append((char) STR_7_BYTES_LATIN1_BYTE_1);\n+            sb.append((char) STR_7_BYTES_LATIN1_BYTE_2);\n+            sb.append((char) STR_7_BYTES_LATIN1_BYTE_3);\n+            sb.append((char) STR_7_BYTES_LATIN1_BYTE_4);\n+            sb.append((char) STR_7_BYTES_LATIN1_BYTE_5);\n+            sb.append((char) STR_7_BYTES_LATIN1_BYTE_6);\n+        }\n+        BH.consume(sb.length());\n+    }\n+\n+    \/**\n+     * Test whether StringBuilder is MergeStored when appending 4 constant characters\n+     *\/\n+    @Benchmark\n+    public void str7Utf16StringBuilderUnsafePut(Blackhole BH) {\n+        var sb = sb_utf16;\n+        sb.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            str7AppendUnsafePut(\n+                    sb,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_0,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_1,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_2,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_3,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_4,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_5,\n+                    (char) STR_7_BYTES_LATIN1_BYTE_6);\n+        }\n+        BH.consume(sb.length());\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MergeStoreBench.java","additions":245,"deletions":34,"binary":false,"changes":279,"status":"modified"}]}