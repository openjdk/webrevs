{"files":[{"patch":"@@ -71,0 +71,11 @@\n+    private static final String STR_7 = \"truefalse\";\n+    private static final byte[] STR_7_BYTES_LATIN1 = STR_7.getBytes(java.nio.charset.StandardCharsets.ISO_8859_1);\n+    private static final byte[] STR_7_BYTES_UTF16 = STR_7.getBytes(\n+            ByteOrder.nativeOrder() == ByteOrder.BIG_ENDIAN ? StandardCharsets.UTF_16BE : StandardCharsets.UTF_16LE);\n+    private static final int STR_7_BYTES_LATIN1_INT = UNSAFE.getInt(STR_7_BYTES_LATIN1, Unsafe.ARRAY_BYTE_BASE_OFFSET);\n+    private static final short STR_7_BYTES_LATIN1_SHORT = UNSAFE.getShort(STR_7_BYTES_LATIN1, Unsafe.ARRAY_BYTE_BASE_OFFSET + 4);\n+    private static final byte STR_7_BYTES_LATIN1_BYTE = STR_7_BYTES_LATIN1[6];\n+    private static final long STR_7_BYTES_UTF16_LONG = UNSAFE.getLong(STR_7_BYTES_UTF16, Unsafe.ARRAY_BYTE_BASE_OFFSET);\n+    private static final int STR_7_BYTES_UTF16_INT = UNSAFE.getInt(STR_7_BYTES_UTF16, Unsafe.ARRAY_BYTE_BASE_OFFSET + 8);\n+    private static final short STR_7_BYTES_UTF16_SHORT = UNSAFE.getShort(STR_7_BYTES_UTF16, Unsafe.ARRAY_BYTE_BASE_OFFSET + 12);\n+\n@@ -77,0 +88,1 @@\n+    final byte[] bytes14 = new byte[NUMBERS * 14];\n@@ -80,1 +92,0 @@\n-    final char[] chars4 = new char[NUMBERS * 4];\n@@ -82,2 +93,3 @@\n-    final StringBuilder sb = new StringBuilder(NUMBERS * 5);\n-    final StringBuilder sb_utf16 = new StringBuilder(NUMBERS * 10).append('\\u4e2d');\n+    final char[] chars7 = new char[NUMBERS * 7];\n+    final StringBuilder sb = new StringBuilder(NUMBERS * 7);\n+    final StringBuilder sb_utf16 = new StringBuilder(NUMBERS * 14).append('\\u4e2d');\n@@ -522,1 +534,1 @@\n-    public void putNull_getBytes(Blackhole BH) {\n+    public void str4GetBytes(Blackhole BH) {\n@@ -525,2 +537,2 @@\n-            STR_4.getBytes(0, 4, bytes4, off);\n-            off += 4;\n+            STR_4.getBytes(0, 4, bytes5, off);\n+            off += 5; \/\/ disable auto vector\n@@ -538,2 +550,2 @@\n-            System.arraycopy(STR_4_BYTES_LATIN1, 0, bytes4, off, 4);\n-            off += 4;\n+            System.arraycopy(STR_4_BYTES_LATIN1, 0, bytes5, off, 4);\n+            off += 5; \/\/ disable auto vector\n@@ -548,1 +560,1 @@\n-    public void str4UnsafePutInt(Blackhole BH) {\n+    public void str4UnsafePut(Blackhole BH) {\n@@ -551,2 +563,2 @@\n-            UNSAFE.putInt(bytes4, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_4_BYTES_LATIN1_INT);\n-            off += 4;\n+            UNSAFE.putInt(bytes5, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_4_BYTES_LATIN1_INT);\n+            off += 5; \/\/ disable auto vector\n@@ -577,2 +589,2 @@\n-            STR_4.getChars(0, 4, chars4, off);\n-            off += 4;\n+            STR_4.getChars(0, 4, chars5, off);\n+            off += 5; \/\/ disable auto vector\n@@ -587,1 +599,1 @@\n-    public void str4Utf16UnsafePutLong(Blackhole BH) {\n+    public void str4Utf16UnsafePut(Blackhole BH) {\n@@ -590,2 +602,2 @@\n-            UNSAFE.putLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_4_BYTES_UTF16_LONG);\n-            off += 8;\n+            UNSAFE.putLong(bytes10, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_4_BYTES_UTF16_LONG);\n+            off += 10; \/\/ disable auto vector\n@@ -603,2 +615,2 @@\n-            System.arraycopy(STR_4_BYTES_UTF16, 0, bytes8, off, 8);\n-            off += 8;\n+            System.arraycopy(STR_4_BYTES_UTF16, 0, bytes10, off, 8);\n+            off += 10;\n@@ -622,0 +634,14 @@\n+    \/**\n+     * Test whether a constant String of length 5 is MergeStored when calling getBytes\n+     *\/\n+    @Benchmark\n+    @SuppressWarnings(\"deprecation\")\n+    public void str5GetBytes(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            STR_5.getBytes(0, 4, bytes5, off);\n+            off += 5;\n+        }\n+        BH.consume(off);\n+    }\n+\n@@ -639,1 +665,1 @@\n-    public void str5UnsafePutInt(Blackhole BH) {\n+    public void str5UnsafePut(Blackhole BH) {\n@@ -679,1 +705,1 @@\n-    public void str5Utf16UnsafePutLong(Blackhole BH) {\n+    public void str5Utf16UnsafePut(Blackhole BH) {\n@@ -682,2 +708,2 @@\n-            UNSAFE.putLong(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_5_BYTES_UTF16_LONG);\n-            UNSAFE.putShort(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + off + 8, STR_5_BYTES_UTF16_SHORT);\n+            UNSAFE.putLong(bytes10, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_5_BYTES_UTF16_LONG);\n+            UNSAFE.putShort(bytes10, Unsafe.ARRAY_BYTE_BASE_OFFSET + off + 8, STR_5_BYTES_UTF16_SHORT);\n@@ -715,0 +741,109 @@\n+    \/**\n+     * Test whether a constant String of length 5 is MergeStored when calling getBytes\n+     *\/\n+    @Benchmark\n+    @SuppressWarnings(\"deprecation\")\n+    public void str7GetBytes(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            STR_7.getBytes(0, 7, bytes8, off);\n+            off += 7;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test whether a constant byte[] with a length of 7 is MergeStored when arraycopy is called\n+     *\/\n+    @Benchmark\n+    public void str7Arraycopy(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            System.arraycopy(STR_7_BYTES_LATIN1, 0, bytes8, off, 7);\n+            off += 7;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test the performance of Unsafe.putInt, used as a benchmark for comparison with other str7 Benchmarks\n+     *\/\n+    @Benchmark\n+    public void str7UnsafePut(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            UNSAFE.putInt(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_7_BYTES_LATIN1_INT);\n+            UNSAFE.putShort(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + off + 4, STR_7_BYTES_LATIN1_SHORT);\n+            UNSAFE.putByte(bytes8, Unsafe.ARRAY_BYTE_BASE_OFFSET + off + 6, STR_7_BYTES_LATIN1_BYTE);\n+            off += 7;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test whether StringBuilder is MergeStored when appending a constant String of length 7\n+     *\/\n+    @Benchmark\n+    public void str7StringBuilder(Blackhole BH) {\n+        sb.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            sb.append(STR_7);\n+        }\n+        BH.consume(sb.length());\n+    }\n+\n+    \/**\n+     * Test whether the constant String with a length of 7 calls the getChars method to mergestore\n+     *\/\n+    @Benchmark\n+    public void str7GetChars(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            STR_7.getChars(0, 7, chars7, off);\n+            off += 7;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test the performance of putLong for comparison with other str7Utf16 benchmarks\n+     *\/\n+    @Benchmark\n+    public void str7Utf16UnsafePut(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            UNSAFE.putLong(bytes14, Unsafe.ARRAY_BYTE_BASE_OFFSET + off, STR_7_BYTES_UTF16_LONG);\n+            UNSAFE.putInt(bytes14, Unsafe.ARRAY_BYTE_BASE_OFFSET + off + 8, STR_7_BYTES_UTF16_INT);\n+            UNSAFE.putShort(bytes14, Unsafe.ARRAY_BYTE_BASE_OFFSET + off + 12, STR_7_BYTES_UTF16_SHORT);\n+            off += 14;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test whether the byte[] arraycopy with a length of 14 is MergeStore\n+     *\/\n+    @Benchmark\n+    public void str7Utf16ArrayCopy(Blackhole BH) {\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            System.arraycopy(STR_7_BYTES_UTF16, 0, bytes14, off, 14);\n+            off += 14;\n+        }\n+        BH.consume(off);\n+    }\n+\n+    \/**\n+     * Test whether the UTF16 StringBuilder appends a constant String of length 7 to MergeStore\n+     *\/\n+    @Benchmark\n+    public void str7Utf16StringBuilder(Blackhole BH) {\n+        sb_utf16.setLength(0);\n+        int off = 0;\n+        for (int i = 0; i < NUMBERS; i++) {\n+            sb_utf16.append(STR_7);\n+        }\n+        BH.consume(sb_utf16.length());\n+    }\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/MergeStoreBench.java","additions":157,"deletions":22,"binary":false,"changes":179,"status":"modified"}]}