{"files":[{"patch":"@@ -3123,1 +3123,1 @@\n-            if (u->in(j) == n) {\n+            if (u->in(j) == n && r->in(j) != nullptr) {\n","filename":"src\/hotspot\/share\/opto\/node.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,87 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8355230\n+ * @summary Crash in fuzzer tests: assert(n != nullptr) failed: must not be null\n+ * @run main\/othervm -XX:CompileCommand=compileonly,TestNullRegionInputAtPhiMakePathDead::* -Xcomp TestNullRegionInputAtPhiMakePathDead\n+ *\/\n+\n+public class TestNullRegionInputAtPhiMakePathDead {\n+\n+    public static long instanceCount=-37082278491330812L;\n+    public static float fFld=1.509F;\n+    public static int iFld=89;\n+\n+    public static long vMeth_check_sum = 0;\n+\n+    public void mainTest() {\n+\n+        int i19, i20=13736, i21, i24=5;\n+        boolean b2=true;\n+\n+        double d;\n+        int i3;\n+\n+        for (d = 5; d < 131; ++d) {\n+            i3 = 12;\n+            while (--i3 > 0) {\n+                TestNullRegionInputAtPhiMakePathDead.fFld *= -31237;\n+            }\n+        }\n+        TestNullRegionInputAtPhiMakePathDead.fFld %= 16334;\n+        TestNullRegionInputAtPhiMakePathDead.instanceCount = 0;\n+        for (i19 = 2; i19 < 281; i19++) {\n+            try {\n+                TestNullRegionInputAtPhiMakePathDead.iFld = (57 % i20);\n+            } catch (ArithmeticException a_e) {}\n+            i20 += (((i19 * TestNullRegionInputAtPhiMakePathDead.fFld) + TestNullRegionInputAtPhiMakePathDead.instanceCount) - i19);\n+            for (i21 = i19; i21 < 90; i21++) {\n+                if (b2) {\n+                } else {\n+                    \/\/ CastII of b2 to false added here becomes top during igvn. It's used by a Phi\n+                    \/\/ at a Region that merges paths from the switch and if. Some of those paths are\n+                    \/\/ found unreachable at parse time but added to the Region anyway.\n+                    switch ((((i21 >>> 1) % 4) * 5) + 115) {\n+                    case 129:\n+                        break;\n+                    case 135:\n+                        i24 |= i24;\n+                    }\n+                }\n+            }\n+        }\n+\n+        System.out.println(\"vMeth_check_sum: \" + vMeth_check_sum);\n+    }\n+    public static void main(String[] strArr) {\n+        try {\n+            TestNullRegionInputAtPhiMakePathDead _instance = new TestNullRegionInputAtPhiMakePathDead();\n+            for (int i = 0; i < 10; i++ ) {\n+                _instance.mainTest();\n+            }\n+         } catch (Exception ex) {\n+         }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestNullRegionInputAtPhiMakePathDead.java","additions":87,"deletions":0,"binary":false,"changes":87,"status":"added"}]}