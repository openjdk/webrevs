{"files":[{"patch":"@@ -760,0 +760,29 @@\n+#ifdef ASSERT\n+  \/\/ Support for testing an OOME raised in a context where the current thread cannot call Java\n+  \/\/ 1. Put -Dtest.jvmci.oome_in_lookupConstantInPool=<trace> on the command line to\n+  \/\/    discover possible values for step 2.\n+  \/\/    Example output:\n+  \/\/\n+  \/\/      CompilerToVM.lookupConstantInPool: \"Overflow: String length out of range\"{0x00000007ffeb2960}\n+  \/\/      CompilerToVM.lookupConstantInPool: \"null\"{0x00000007ffebdfe8}\n+  \/\/      CompilerToVM.lookupConstantInPool: \"Maximum lock count exceeded\"{0x00000007ffec4f90}\n+  \/\/      CompilerToVM.lookupConstantInPool: \"Negative length\"{0x00000007ffec4468}\n+  \/\/\n+  \/\/ 2. Choose a value shown in step 1.\n+  \/\/    Example: -Dtest.jvmci.oome_in_lookupConstantInPool=Negative\n+  const char* val = Arguments::PropertyList_get_value(Arguments::system_properties(), \"test.jvmci.oome_in_lookupConstantInPool\");\n+  if (val != nullptr) {\n+    const char* str = obj->print_value_string();\n+    if (strstr(val, \"<trace>\") != nullptr) {\n+      tty->print_cr(\"CompilerToVM.lookupConstantInPool: %s\", str);\n+    } else if (strstr(str, val) != nullptr) {\n+      Handle garbage;\n+      while (true) {\n+        \/\/ Trigger an OutOfMemoryError\n+        objArrayOop next = oopFactory::new_objectArray(0x7FFFFFFF, CHECK_NULL);\n+        next->obj_at_put(0, garbage());\n+        garbage = Handle(THREAD, next);\n+      }\n+    }\n+  }\n+#endif\n","filename":"src\/hotspot\/share\/jvmci\/jvmciCompilerToVM.cpp","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -402,1 +402,1 @@\n-    _encode_fail       = 3  \/\/ some other problem occured during encoding. If buffer != 0,\n+    _encode_fail       = 3, \/\/ some other problem occured during encoding. If buffer != 0,\n@@ -405,0 +405,2 @@\n+    _encode_oome_in_vm = 4  \/\/ an OutOfMemoryError thrown from within VM code on a\n+                            \/\/ thread that cannot call Java (OOME has no stack trace)\n@@ -491,0 +493,6 @@\n+      Symbol *ex_name = _throwable->klass()->name();\n+      if (ex_name == vmSymbols::java_lang_OutOfMemoryError()) {\n+        JVMCI_event_1(\"translating exception: OutOfMemoryError within VM code\");\n+        decode(THREAD, _encode_oome_in_vm, 0L);\n+        return 0;\n+      }\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":9,"deletions":1,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -114,1 +114,1 @@\n-  if (!thread->can_call_java()) {\n+  if (h_exception.is_null() && !thread->can_call_java()) {\n@@ -116,3 +116,1 @@\n-    const char* exc_value = h_exception.not_null() ? h_exception->print_value_string() :\n-                      h_name != nullptr ? h_name->as_C_string() :\n-                      \"null\";\n+    const char* exc_value = h_name != nullptr ? h_name->as_C_string() : \"null\";\n@@ -208,1 +206,1 @@\n-  if (special_exception(thread, file, line, h_cause)) return;\n+  if (special_exception(thread, file, line, Handle(), name)) return;\n","filename":"src\/hotspot\/share\/utilities\/exceptions.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -45,0 +45,4 @@\n+ *\n+ * Successfully translated exceptions are wrapped in a TranslatedException instance.\n+ * This allows callers to distiguish between a translated exception and an error\n+ * that arose during translation.\n@@ -47,1 +51,1 @@\n-final class TranslatedException extends Exception {\n+public final class TranslatedException extends Exception {\n@@ -64,2 +68,1 @@\n-                encodeThrowable(new TranslatedException(\"error during encoding\",\n-                                                        \"<unknown>\"), false);\n+                encodeThrowable(translationFailure(\"error during encoding\"), false);\n@@ -67,1 +70,1 @@\n-                encodeThrowable(new OutOfMemoryError(), false);\n+                encodeThrowable(translationFailure(\"OutOfMemoryError during encoding\"), false);\n@@ -73,0 +76,4 @@\n+    private static InternalError translationFailure(String messageFormat, Object... messageArgs) {\n+        return new InternalError(messageFormat.formatted(messageArgs));\n+    }\n+\n@@ -89,8 +96,2 @@\n-    \/**\n-     * Class name of exception that could not be instantiated.\n-     *\/\n-    private String originalExceptionClassName;\n-\n-    private TranslatedException(String message, String originalExceptionClassName) {\n-        super(message);\n-        this.originalExceptionClassName = originalExceptionClassName;\n+    TranslatedException(Throwable translated) {\n+        super(translated);\n@@ -109,12 +110,0 @@\n-    @Override\n-    public String toString() {\n-        String s;\n-        if (originalExceptionClassName.equals(TranslatedException.class.getName())) {\n-            s = getClass().getName();\n-        } else {\n-            s = getClass().getName() + \"[\" + originalExceptionClassName + \"]\";\n-        }\n-        String message = getMessage();\n-        return (message != null) ? (s + \": \" + message) : s;\n-    }\n-\n@@ -166,1 +155,1 @@\n-            return initCause(new TranslatedException(message, className), cause, debug);\n+            return initCause(translationFailure(\"%s [%s]\", message, className), cause, debug);\n@@ -311,1 +300,1 @@\n-            return throwable;\n+            return new TranslatedException(throwable);\n@@ -314,2 +303,1 @@\n-            return new TranslatedException(\"Error decoding exception: \" + encodedThrowable,\n-                                           translationFailure.getClass().getName());\n+            return translationFailure(\"error decoding exception: %s\", encodedThrowable);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/TranslatedException.java","additions":16,"deletions":28,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -125,0 +125,2 @@\n+     *             4: an OutOfMemoryError thrown from within VM code on a\n+     *                thread that cannot call Java (OOME has no stack trace)\n@@ -132,0 +134,3 @@\n+            if (format == 4) {\n+                throw new TranslatedException(new OutOfMemoryError(\"in VM code and current thread cannot call Java\"));\n+            }\n@@ -138,1 +143,1 @@\n-                throw new OutOfMemoryError(\"OutOfMemoryError occurred \" + context);\n+                throw new OutOfMemoryError(context);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/vm\/VMSupport.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import jdk.internal.vm.TranslatedException;\n@@ -103,0 +104,9 @@\n+        } catch (TranslatedException decoded) {\n+            Assert.assertEquals(decoded.getCause().getClass(), OutOfMemoryError.class);\n+        } catch (Throwable decoded) {\n+            throw new AssertionError(\"unexpected exception: \" + decoded);\n+        }\n+\n+        try {\n+            VMSupport.decodeAndThrowThrowable(5, 0L, true, false);\n+            throw new AssertionError(\"expected decodeAndThrowThrowable to throw an exception\");\n@@ -145,1 +155,1 @@\n-                        assertThrowableEquals(throwable, decoded);\n+                        assertThrowableEquals(throwable, decoded.getCause());\n@@ -155,1 +165,3 @@\n-    private static void assertThrowableEquals(Throwable original, Throwable decoded) {\n+    private static void assertThrowableEquals(Throwable originalIn, Throwable decodedIn) {\n+        Throwable original = originalIn;\n+        Throwable decoded = decodedIn;\n@@ -160,2 +172,2 @@\n-                    Assert.assertEquals(decoded.getClass().getName(), \"jdk.internal.vm.TranslatedException\");\n-                    Assert.assertEquals(decoded.toString(), \"jdk.internal.vm.TranslatedException[jdk.internal.vm.test.TestTranslatedException$Untranslatable]: test exception\");\n+                    Assert.assertEquals(decoded.getClass().getName(), \"java.lang.InternalError\");\n+                    Assert.assertEquals(decoded.toString(), \"java.lang.InternalError: test exception [jdk.internal.vm.test.TestTranslatedException$Untranslatable]\");\n@@ -185,1 +197,1 @@\n-            original.printStackTrace(System.err);\n+            originalIn.printStackTrace(System.err);\n@@ -188,1 +200,1 @@\n-            original.printStackTrace(System.err);\n+            decodedIn.printStackTrace(System.err);\n","filename":"test\/jdk\/jdk\/internal\/vm\/TestTranslatedException.java","additions":18,"deletions":6,"binary":false,"changes":24,"status":"modified"}]}