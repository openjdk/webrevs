{"files":[{"patch":"@@ -1551,10 +1551,0 @@\n-        public RecordComponent findRecordComponentToRemove(JCVariableDecl var) {\n-            RecordComponent toRemove = null;\n-            for (RecordComponent rc : recordComponents) {\n-                if (rc.name == var.name) {\n-                    toRemove = rc;\n-                }\n-            }\n-            return toRemove;\n-        }\n-\n@@ -1566,3 +1556,10 @@\n-            if (existing != null) {\n-                recordComponents = List.filter(recordComponents, existing);\n-                recordComponents = recordComponents.append(rc = new RecordComponent(varSym, existing.ast, existing.isVarargs));\n+            if (existing != null && !recordComponents.isEmpty()) {\n+                ListBuffer<RecordComponent> newRComps = new ListBuffer<>();\n+                for (RecordComponent rcomp : recordComponents) {\n+                    if (existing == rcomp) {\n+                        newRComps.add(rc = new RecordComponent(varSym, existing.ast, existing.isVarargs));\n+                    } else {\n+                        newRComps.add(rcomp);\n+                    }\n+                }\n+                recordComponents = newRComps.toList();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":10,"deletions":13,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -1142,2 +1142,1 @@\n-                                    (recordComponents.head != null &&\n-                                            recordComponents.head.isVarargs() != paramIsVarArgs)) {\n+                                    (recordComponents.head.isVarargs() != paramIsVarArgs)) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Attr.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1051,0 +1051,1 @@\n+                int fieldPos = 0;\n@@ -1066,2 +1067,2 @@\n-                     *  First, we find the record component by comparing its name with current field,\n-                     *  if any, and we mark it. Then we copy the annotations to the field so that annotations applicable only to the record component\n+                     *  First, we get the record component matching the field position. Then we copy the annotations\n+                     *  to the field so that annotations applicable only to the record component\n@@ -1072,1 +1073,1 @@\n-                    RecordComponent rc = sym.findRecordComponentToRemove(field);\n+                    RecordComponent rc = getRecordComponentAt(sym, fieldPos);\n@@ -1076,2 +1077,1 @@\n-                        List<JCAnnotation> originalAnnos = tc.copy(rc.getOriginalAnnos());\n-                        field.mods.annotations = originalAnnos;\n+                        field.mods.annotations = tc.copy(rc.getOriginalAnnos());\n@@ -1084,0 +1084,1 @@\n+                    fieldPos++;\n@@ -1098,0 +1099,12 @@\n+    \/\/ where\n+        private RecordComponent getRecordComponentAt(ClassSymbol sym, int componentPos) {\n+            int i = 0;\n+            for (RecordComponent rc : sym.getRecordComponents()) {\n+                if (i == componentPos) {\n+                    return rc;\n+                }\n+                i++;\n+            }\n+            return null;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":18,"deletions":5,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -140,0 +140,1 @@\n+        assertFail(\"compiler.err.already.defined\", \"record R(int x, int x, int x) {}\");\n","filename":"test\/langtools\/tools\/javac\/records\/RecordCompilationTests.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}