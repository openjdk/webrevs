{"files":[{"patch":"@@ -36,2 +36,7 @@\n-\/\/ Unfortunately, there is no good way to do a conditional RAII object in the\n-\/\/ middle of the method without dealing with macros.\n+\n+class ShenandoahNoBlockOp : public StackObj {\n+public:\n+  ShenandoahNoBlockOp(JavaThread* java_thread) {\n+    assert(java_thread == nullptr, \"Should not pass anything\");\n+  }\n+};\n@@ -42,1 +47,1 @@\n-    contended_lock_or_block(JavaThread::cast(thread));\n+    contended_lock_internal<ThreadBlockInVM>(JavaThread::cast(thread));\n@@ -44,18 +49,1 @@\n-    contended_lock_no_block();\n-  }\n-}\n-\n-void ShenandoahLock::contended_lock_no_block() {\n-  int ctr = 0;\n-  int yields = 0;\n-  while (Atomic::cmpxchg(&_state, 0, 1) != 0) {\n-    if ((++ctr & 0xFFF) == 0) {\n-      if (yields > 5) {\n-        os::naked_short_sleep(1);\n-      } else {\n-        os::naked_yield();\n-        yields++;\n-      }\n-    } else {\n-      SpinPause();\n-    }\n+    contended_lock_internal<ShenandoahNoBlockOp>(nullptr);\n@@ -65,1 +53,2 @@\n-void ShenandoahLock::contended_lock_or_block(JavaThread* java_thread) {\n+template<typename BlockOp>\n+void ShenandoahLock::contended_lock_internal(JavaThread* java_thread) {\n@@ -68,1 +57,1 @@\n-  while (Atomic::cmpxchg(&_state, 0, 1) != 0) {\n+  while (Atomic::cmpxchg(&_state, unlocked, locked) != unlocked) {\n@@ -70,1 +59,1 @@\n-      ThreadBlockInVM tbivm(java_thread);\n+      BlockOp block(java_thread);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLock.cpp","additions":13,"deletions":24,"binary":false,"changes":37,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+  enum LockState { unlocked = 0, locked = 1 };\n+\n@@ -36,1 +38,1 @@\n-  volatile int _state;\n+  volatile LockState _state;\n@@ -41,2 +43,2 @@\n-  void contended_lock_or_block(JavaThread* java_thread);\n-  void contended_lock_no_block();\n+  template<typename BlockOp>\n+  void contended_lock_internal(JavaThread* java_thread);\n@@ -45,1 +47,1 @@\n-  ShenandoahLock() : _state(0), _owner(nullptr) {};\n+  ShenandoahLock() : _state(unlocked), _owner(nullptr) {};\n@@ -48,1 +50,1 @@\n-    assert(_owner != Thread::current(), \"reentrant locking attempt, would deadlock\");\n+    assert(Atomic::load(&_owner) != Thread::current(), \"reentrant locking attempt, would deadlock\");\n@@ -51,1 +53,1 @@\n-    if (Atomic::cmpxchg(&_state, 0, 1) != 0) {\n+    if (Atomic::cmpxchg(&_state, unlocked, locked) != unlocked) {\n@@ -55,3 +57,3 @@\n-    assert(_state == 1, \"must be locked\");\n-    assert(_owner == nullptr, \"must not be owned\");\n-    DEBUG_ONLY(_owner = Thread::current();)\n+    assert(Atomic::load(&_state) == locked, \"must be locked\");\n+    assert(Atomic::load(&_owner) == nullptr, \"must not be owned\");\n+    DEBUG_ONLY(Atomic::store(&_owner, Thread::current());)\n@@ -61,2 +63,2 @@\n-    assert(_owner == Thread::current(), \"sanity\");\n-    DEBUG_ONLY(_owner = nullptr;)\n+    assert(Atomic::load(&_owner) == Thread::current(), \"sanity\");\n+    DEBUG_ONLY(Atomic::store(&_owner, (Thread*)nullptr);)\n@@ -64,1 +66,1 @@\n-    Atomic::store(&_state, 0);\n+    Atomic::store(&_state, unlocked);\n@@ -71,1 +73,1 @@\n-    return _state == 1 && _owner == Thread::current();\n+    return _state == locked && _owner == Thread::current();\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahLock.hpp","additions":15,"deletions":13,"binary":false,"changes":28,"status":"modified"}]}