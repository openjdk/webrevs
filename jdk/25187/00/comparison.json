{"files":[{"patch":"@@ -113,0 +113,1 @@\n+doclet.link.see.reference_not_visible=the specified link will not be shown because the referenced element has access-level \"{0}\" (see -{0})\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/resources\/standard.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -280,0 +280,7 @@\n+            if (!utils.isLinkable(containing, refMem)) {\n+                String suggestion = utils.isProtected(refMem) ? \"protected\" : \"private\";\n+                reportWarning.accept(\n+                        \"doclet.link.see.reference_not_visible\",\n+                        new Object[]{suggestion}\n+                );\n+            }\n","filename":"src\/jdk.javadoc\/share\/classes\/jdk\/javadoc\/internal\/doclets\/formats\/html\/taglets\/LinkTaglet.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -0,0 +1,103 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8139744 8356549\n+ * @summary Verify warning emitted for non-linkable {@link} targets\n+ * @library \/tools\/lib ..\/..\/lib\n+ * @modules jdk.javadoc\/jdk.javadoc.internal.tool\n+ * @build toolbox.ToolBox javadoc.tester.*\n+ * @run main TestNonLinkableLinkWarn\n+ *\/\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import javadoc.tester.JavadocTester;\n+import toolbox.ToolBox;\n+\n+public class TestNonLinkableLinkWarn extends JavadocTester {\n+\n+    public static void main(String... args) throws Exception {\n+        new TestNonLinkableLinkWarn().runTests();\n+    }\n+\n+    private final ToolBox tb = new ToolBox();\n+    private final Path src = Path.of(\"src\");\n+\n+    public TestNonLinkableLinkWarn() throws IOException {\n+        tb.writeJavaFiles(src, \"\"\"\n+            package p;\n+            public class A {\n+                \/**\n+                 * This should warn, because {@link #privateField} is private.\n+                 * This should warn, because {@link #protectedField} is protected.\n+                 *\/\n+                public void foo() { }\n+\n+                private int privateField;\n+                protected int protectedField;\n+            }\n+        \"\"\");\n+    }\n+\n+    @Test\n+    public void testWarnPrivateField(Path base) {\n+        javadoc(\n+                \"-d\", base.resolve(\"out\").toString(),\n+                \"-sourcepath\", src.toString(),\n+                \"p\"\n+        );\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\n+                Output.OUT, true, \"\"\"\n+                        warning: the specified link will not be shown because the referenced element has access-level \"private\" (see -private)\n+                                 * This should warn, because {@link #privateField} is private.\n+                                                             ^\"\"\"\n+        );\n+    }\n+\n+    @Test\n+    public void testWarnProtectedField(Path base) {\n+        javadoc(\n+                \"-d\", base.resolve(\"out\").toString(),\n+                \"-public\",\n+                \"-sourcepath\", src.toString(),\n+                \"p\"\n+        );\n+        checkExit(Exit.OK);\n+\n+        checkOutput(\n+                Output.OUT,\n+                true, \"\"\"\n+                        warning: the specified link will not be shown because the referenced element has access-level \"private\" (see -private)\n+                                 * This should warn, because {@link #privateField} is private.\n+                                                             ^\"\"\", \"\"\"\n+                        warning: the specified link will not be shown because the referenced element has access-level \"protected\" (see -protected)\n+                                 * This should warn, because {@link #protectedField} is protected.\n+                                                             ^\"\"\"\n+        );\n+    }\n+}\n","filename":"test\/langtools\/jdk\/javadoc\/doclet\/testNonLinkableTypeWarn\/TestNonLinkableLinkWarn.java","additions":103,"deletions":0,"binary":false,"changes":103,"status":"added"}]}