[{"commit":{"message":"8336245: AArch64: remove extra register copy when converting from long to pointer\n\nIn the cases like:\n```\n  UNSAFE.putLong(address + off1 + 1030, lseed);\n  UNSAFE.putLong(address + 1023, lseed);\n  UNSAFE.putLong(address + off2 + 1001, lseed);\n```\n\nUnsafe intrinsifies direct memory access using a long as\nthe base address, generating a `CastX2P` node converting\nlong to pointer in C2. Then we get optoassembly code like:\n```\n  ldr  R10, [R15, #120]    # int ! Field: address\n  ldr  R11, [R16, #136]    # int ! Field: off1\n  ldr  R12, [R16, #144]    # int ! Field: off2\n  add  R11, R11, R10\n  mov R11, R11    # long -> ptr\n  add  R12, R12, R10\n  mov R10, R10    # long -> ptr\n  add R11, R11, #1030    # ptr\n  str  R17, [R11]    # int\n  add R10, R10, #1023    # ptr\n  str  R17, [R10]    # int\n  mov R10, R12    # long -> ptr\n  add R10, R10, #1001    # ptr\n  str  R17, [R10]    # int\n```\n\nIn aarch64, the conversion from long to pointer could be\na nop but C2 doesn't know it. On the existing code, we\ndo nothing for `mov dst src` only when `dst` == `src` [1],\nthen we have assembly:\n```\n  ldr    x10, [x15,#120]\n  ldp    x11, x12, [x16,#136]\n  add    x11, x11, x10\n  add    x12, x12, x10\n  add    x11, x11, #0x406\n  str    x17, [x11]\n  add    x10, x10, #0x3ff\n  str    x17, [x10]\n  mov    x10, x12  <--- extra register copy\n  add    x10, x10, #0x3e9\n  str    x17, [x10]\n```\n\nThere is still one extra register copy, which we're trying\nto remove in this patch.\n\nThis patch folds `CastX2P` into memory operands by introducing\n`indirectX2P` and `indOffX2P`. We also create a new opclass\n`iRegPorL2P` to remove extra copies from `CastX2P` in pointer\naddition.\n\nTier 1~3 passed on aarch64. No obvious change in size\nof libjvm.so\n\n[1] https:\/\/github.com\/openjdk\/jdk\/blob\/5c612c230b0a852aed5fd36e58b82ebf2e1838af\/src\/hotspot\/cpu\/aarch64\/aarch64.ad#L7906"},"files":[{"filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/x\/x_aarch64.ad"},{"filename":"src\/hotspot\/cpu\/aarch64\/gc\/z\/z_aarch64.ad"},{"filename":"src\/hotspot\/share\/opto\/machnode.cpp"},{"filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestCastX2P.java"}],"sha":"06f62c6201744b7f8cd8179cbdf5a00a0ef239e1"}]