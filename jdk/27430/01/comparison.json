{"files":[{"patch":"@@ -534,1 +534,7 @@\n-     * @param asExecutionException true if wrap as ExecutionException\n+     * @param asExecutionException true if wrap the result as an\n+     * ExecutionException. This applies only to actual exceptions, not\n+     * implicit CancellationExceptions issued when not THROWN or\n+     * available, which are not wrapped because by default they are\n+     * issued separately from ExecutionExceptions by callers. Which\n+     * may require further handling when this is not true (currently\n+     * only in InvokeAnyTask).\n@@ -541,6 +547,3 @@\n-        else if ((s & THROWN) == 0 || (a = aux) == null || (ex = a.ex) == null) {\n-            ex = new CancellationException();\n-            if (!asExecutionException || !(this instanceof InterruptibleTask))\n-                return ex;         \/\/ else wrap below\n-        }\n-        else if (a.thread != Thread.currentThread()) {\n+        if ((s & THROWN) == 0 || (a = aux) == null || (ex = a.ex) == null)\n+            return new CancellationException();\n+        if (a.thread != Thread.currentThread()) {\n@@ -1817,0 +1820,2 @@\n+            } catch (CancellationException ce) {\n+                throw new ExecutionException(ce);\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/ForkJoinTask.java","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -34,3 +34,0 @@\n-import static java.util.concurrent.TimeUnit.MILLISECONDS;\n-import static java.util.concurrent.TimeUnit.NANOSECONDS;\n-\n@@ -44,0 +41,1 @@\n+import java.util.concurrent.CancellationException;\n@@ -54,0 +52,3 @@\n+import java.util.concurrent.TimeoutException;\n+import java.util.concurrent.TimeUnit;\n+import java.util.function.Function;\n@@ -56,0 +57,1 @@\n+import java.util.concurrent.atomic.AtomicReference;\n@@ -61,0 +63,2 @@\n+import static java.util.concurrent.TimeUnit.*;\n+\n@@ -485,0 +489,56 @@\n+    public void testCancellationExceptionInGet() throws Exception {\n+        final ExecutorService e = new ForkJoinPool(1);\n+        try (var cleaner = cleaner(e)) {\n+            assertCancellationExceptionFrom(\n+                e,\n+                e::submit,\n+                f -> () -> f.get(1000, TimeUnit.SECONDS)\n+            );\n+            assertCancellationExceptionFrom(\n+                e,\n+                e::submit,\n+                f -> f::get\n+            );\n+            assertCancellationExceptionFrom(\n+                e,\n+                c -> e.submit(() -> { try { c.call(); } catch (Exception ex) { throw new RuntimeException(ex); } }),\n+                f -> () -> f.get(1000, TimeUnit.SECONDS)\n+            );\n+            assertCancellationExceptionFrom(\n+                e,\n+                c -> e.submit(() -> { try { c.call(); } catch (Exception ex) { throw new RuntimeException(ex); } }),\n+                f -> f::get\n+            );\n+        }\n+    }\n+\n+    private void assertCancellationExceptionFrom(\n+            ExecutorService e,\n+            Function<Callable<Void>, Future<?>> createTask,\n+            Function<Future<?>, Callable<?>> getResult) throws Exception {\n+        final var t = new AtomicReference<Thread>();\n+        final var c = new CountDownLatch(1);\n+        final var task = createTask.apply(() -> {\n+            try {\n+                t.set(Thread.currentThread());\n+                c.await();\n+            } catch (InterruptedException ie) {\n+                Thread.currentThread().interrupt();;\n+            }\n+            return null;\n+        });\n+        Thread taskThread;\n+        while((taskThread = t.get()) == null || taskThread.getState() != Thread.State.WAITING) {\n+            if (Thread.interrupted())\n+                throw new InterruptedException();\n+            Thread.onSpinWait();\n+        }\n+        task.cancel(true);\n+        try {\n+            getResult.apply(task).call();\n+        } catch (CancellationException ce) {\n+            return; \/\/ Success\n+        }\n+        shouldThrow();\n+    }\n+\n","filename":"test\/jdk\/java\/util\/concurrent\/tck\/ForkJoinPoolTest.java","additions":63,"deletions":3,"binary":false,"changes":66,"status":"modified"}]}