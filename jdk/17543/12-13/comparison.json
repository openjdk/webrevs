{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,0 @@\n-import java.security.spec.EncodedKeySpec;\n@@ -40,3 +39,2 @@\n- * security objects provide standard binary encoding, like ASN.1, and type\n- * formats, like X.509 and PKCS#8.  These encodings are used in some form with\n- * {@link KeyFactory} and {@link java.security.cert.CertificateFactory},\n+ * security objects provide standard binary encoding, like ASN.1, and possible\n+ * type formats, like X.509 and PKCS#8.\n@@ -44,1 +42,1 @@\n- * @see Key\n+ * @see AsymmetricKey\n@@ -46,1 +44,2 @@\n- * @see EncodedKeySpec\n+ * @see PKCS8EncodedKeySpec\n+ * @see X509EncodedKeySpec\n@@ -50,0 +49,1 @@\n+ * @see PEMRecord\n@@ -51,1 +51,1 @@\n- * @since 24\n+ * @since 25\n@@ -55,1 +55,3 @@\n-public sealed interface DEREncodable permits AsymmetricKey, KeyPair, PEMRecord, X509CRL, X509Certificate, PKCS8EncodedKeySpec, X509EncodedKeySpec, EncryptedPrivateKeyInfo {\n+public sealed interface DEREncodable permits AsymmetricKey, KeyPair,\n+    PKCS8EncodedKeySpec, X509EncodedKeySpec, EncryptedPrivateKeyInfo,\n+    X509Certificate, X509CRL, PEMRecord {\n","filename":"src\/java.base\/share\/classes\/java\/security\/DEREncodable.java","additions":11,"deletions":9,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -58,1 +58,1 @@\n- * A specified return class must extend {@link DEREncodable} and be an\n+ * A specified return class must implement {@link DEREncodable} and be an\n@@ -81,1 +81,1 @@\n- * Here is an example of encoding a PrivateKey object:\n+ * Here is an example of decoding a PrivateKey object:\n@@ -143,6 +143,4 @@\n-                    KeyFactory kf = getKeyFactory(p8key.getAlgorithm());\n-                    DEREncodable d;\n-\n-                    d = kf.generatePrivate(\n-                        new PKCS8EncodedKeySpec(p8key.getEncoded(),\n-                            p8key.getAlgorithm()));\n+                    String algo = p8key.getAlgorithm();\n+                    KeyFactory kf = getKeyFactory(algo);\n+                    DEREncodable d = kf.generatePrivate(\n+                        new PKCS8EncodedKeySpec(p8key.getEncoded(), algo));\n@@ -154,2 +152,2 @@\n-                            p8key.getPubKeyEncoded(), p8key.getAlgorithm());\n-                        yield new KeyPair(getKeyFactory(p8key.getAlgorithm()).\n+                            p8key.getPubKeyEncoded(), algo);\n+                        yield new KeyPair(getKeyFactory(algo).\n@@ -164,2 +162,2 @@\n-                            p8.getPubKeyEncoded(), p8.getAlgorithm());\n-                        yield new KeyPair(getKeyFactory(p8.getAlgorithm()).\n+                            p8.getPubKeyEncoded(), algo);\n+                        yield new KeyPair(getKeyFactory(algo).\n@@ -174,1 +172,2 @@\n-                        yield new EncryptedPrivateKeyInfo(decoder.decode(pem.pem()));\n+                        yield new EncryptedPrivateKeyInfo(decoder.decode(\n+                            pem.pem()));\n@@ -192,1 +191,2 @@\n-                        RSAPrivateCrtKeyImpl.getKeySpec(decoder.decode(pem.pem())));\n+                        RSAPrivateCrtKeyImpl.getKeySpec(decoder.decode(\n+                            pem.pem())));\n@@ -208,0 +208,1 @@\n+     * @throws NullPointerException when {@code str} is null.\n@@ -231,1 +232,1 @@\n-     * @throws IOException on IO error with the InputStream\n+     * @throws IOException on IO error with the InputStream.\n@@ -234,0 +235,1 @@\n+     * @throws NullPointerException when {@code is} is null.\n@@ -257,1 +259,1 @@\n-     * @param <S> Class type parameter that extends {@code DEREncodable}\n+     * @param <S> Class type parameter that extends {@code DEREncodable}.\n@@ -259,1 +261,1 @@\n-     * @param tClass the returned object class that implementing\n+     * @param tClass the returned object class that implements\n@@ -264,0 +266,1 @@\n+     * @throws NullPointerException when any input values are null.\n@@ -280,1 +283,1 @@\n-     * @param <S> Class type parameter that extends {@code DEREncodable}\n+     * @param <S> Class type parameter that extends {@code DEREncodable}.\n@@ -282,1 +285,1 @@\n-     * @param tClass the returned object class that implementing\n+     * @param tClass the returned object class that implements\n@@ -284,1 +287,1 @@\n-     * @return A {@code DEREncodable} typecast to {@code tClass}\n+     * @return A {@code DEREncodable} typecast to {@code tClass}.\n@@ -288,0 +291,1 @@\n+     * @throws NullPointerException when any input values are null.\n@@ -299,1 +303,0 @@\n-        \/\/if (PEMRecord.class.isInstance(tClass)) {\n@@ -400,1 +403,1 @@\n-     * @throws NullPointerException if password is null.\n+     * @throws NullPointerException if {@code password} is null.\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMDecoder.java","additions":25,"deletions":22,"binary":false,"changes":47,"status":"modified"},{"patch":"@@ -64,3 +64,3 @@\n- * <p>PKCS8 v2.0 allows OneAsymmetricKey encoding, which is a private and public\n- * key in the same PEM.  This is supported by using the {@link KeyPair} class\n- * with the encode methods.\n+ * <p> PKCS8 2.0 allows OneAsymmetricKey encoding, which may contain both private\n+ * and public keys in the same PEM.This is supported by using the\n+ * {@link KeyPair} class with the encode methods.\n@@ -153,1 +153,1 @@\n-     *           DEREncodable.\n+     *           {@code DEREncodable}.\n@@ -157,1 +157,1 @@\n-     * configured for encryption while encoding a DEREncodable that does\n+     * configured for encryption while encoding a {@code DEREncodable} that does\n@@ -225,2 +225,2 @@\n-     * @param de the object that implements DEREncodable.\n-     * @return a PEM encoded byte[] of the given DEREncodable.\n+     * @param de the object that implements {@code DEREncodable}.\n+     * @return a PEM encoded byte[] of the given {@code DEREncodable}.\n@@ -229,1 +229,1 @@\n-     * configured for encryption while encoding a DEREncodable that does\n+     * configured for encryption while encoding a {@code DEREncodable} that does\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMEncoder.java","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+import java.util.Base64;\n@@ -31,1 +32,0 @@\n- *\n@@ -50,2 +50,0 @@\n- * There is no validity checking for {@code type} or {@code pem} during\n- * instantiation of this record.\n@@ -60,0 +58,2 @@\n+ * @spec https:\/\/www.rfc-editor.org\/info\/rfc7468\n+ *       RFC 7468: Textual Encodings of PKIX, PKCS, and CMS Structures\n@@ -67,1 +67,1 @@\n-     * When {@code type} is given a properly formatted PEM header, only the\n+     * <p> When {@code type} is given a properly formatted PEM header, only the\n@@ -71,1 +71,1 @@\n-     * When {@code type} is given a correctly formatted PEM header, only the\n+     * <p> When {@code type} is given a correctly formatted PEM header, only the\n@@ -132,0 +132,11 @@\n+\n+    \/**\n+     * Returns the binary encoding from the Base64 data contained in\n+     * {@code pem}.\n+     *\n+     * @exception IllegalArgumentException if {@code pem} could not be decoded.\n+     * @return binary encoding or null if {@code pem} is null.\n+     *\/\n+    public byte[] getEncoded() {\n+        return (pem == null ? null : Base64.getMimeDecoder().decode(pem));\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMRecord.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -111,1 +111,1 @@\n-implements X509Extension, DEREncodable {\n+    implements X509Extension, DEREncodable {\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509Certificate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -75,1 +75,2 @@\n-public final class PKCS8EncodedKeySpec extends EncodedKeySpec implements DEREncodable {\n+public final class PKCS8EncodedKeySpec extends EncodedKeySpec implements\n+    DEREncodable {\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/PKCS8EncodedKeySpec.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -561,2 +561,2 @@\n-     *                 {@code KeyFactory}.  A {@code null} value will use the default\n-     *                 provider configuration.\n+     *                 {@code KeyFactory}.  A {@code null} value will use the\n+     *                 default provider configuration.\n@@ -591,3 +591,4 @@\n-     * @exception NullPointerException if {@code decryptKey} is {@code null}.\n-     * @exception NoSuchAlgorithmException if cannot find appropriate cipher to\n-     * decrypt.\n+     * @exception NullPointerException if {@code decryptKey}\n+     * is {@code null}.\n+     * @exception NoSuchAlgorithmException if cannot find appropriate\n+     * cipher to decrypt the encrypted data.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/EncryptedPrivateKeyInfo.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -232,1 +232,1 @@\n-            if (p8key.hasPublicKey()) {\n+            if (!p8key.hasPublicKey()) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECKeyFactory.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n- * <p>\n+ *\n@@ -55,2 +55,2 @@\n- * <p>\n- * We support this format but do not parse attributes and publicKey now.\n+ *\n+ * We support this format but do not parse attributes.\n@@ -205,1 +205,1 @@\n-            byte[] internal = rawKey.generateEncoding();\n+\n@@ -207,1 +207,1 @@\n-                new PKCS8EncodedKeySpec(internal);\n+                new PKCS8EncodedKeySpec(rawKey.generateEncoding());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS8Key.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"}]}