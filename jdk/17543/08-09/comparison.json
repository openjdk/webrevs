{"files":[{"patch":"@@ -36,0 +36,1 @@\n+import javax.crypto.spec.PBEKeySpec;\n@@ -85,1 +86,1 @@\n-    private final char[] password;\n+    private final PBEKeySpec password;\n@@ -97,2 +98,2 @@\n-    private PEMDecoder(Provider withFactory, char[] withPassword) {\n-        password = withPassword != null ? withPassword.clone() : null;\n+    private PEMDecoder(Provider withFactory, PBEKeySpec withPassword) {\n+        password = withPassword;\n@@ -117,1 +118,1 @@\n-    private DEREncodable decode(PEMRecord pem) throws IOException {\n+    private DEREncodable decode(PEMRecord pem) {\n@@ -127,1 +128,0 @@\n-\n@@ -131,1 +131,0 @@\n-                    PrivateKey priKey;\n@@ -133,1 +132,3 @@\n-                    priKey = kf.generatePrivate(\n+                    DEREncodable d;\n+\n+                    d = kf.generatePrivate(\n@@ -136,2 +137,8 @@\n-                    \/\/ If there is a public key, it's an OAS.\n-                    if (p8key.getPubKeyEncoded() != null) {\n+                    \/\/ If a public key is available in the private key encoding.\n+                    if (d instanceof PKCS8Key p8 &&\n+                        p8.getPubKeyEncoded() != null) {\n+                        X509EncodedKeySpec spec = new X509EncodedKeySpec(\n+                            p8.getPubKeyEncoded(), p8.getAlgorithm());\n+                        yield new KeyPair(getKeyFactory(p8.getAlgorithm()).\n+                            generatePublic(spec), p8);\n+                    } else if (p8key.getPubKeyEncoded() != null) {\n@@ -141,1 +148,3 @@\n-                            generatePublic(spec), priKey);\n+                            generatePublic(spec), (PrivateKey) d);\n+                    } else {\n+                        yield d;\n@@ -143,1 +152,0 @@\n-                    yield priKey;\n@@ -150,1 +158,1 @@\n-                        getKey(password);\n+                        getKey(password.getPassword());\n@@ -172,1 +180,1 @@\n-        } catch (GeneralSecurityException e) {\n+        } catch (GeneralSecurityException | IOException e) {\n@@ -230,2 +238,1 @@\n-     * X.509 binary encoding is desired instead of a Key object.  An IOException\n-     * will be thrown if the class is incorrect for the given PEM data.\n+     * X.509 binary encoding is desired instead of a Key object.\n@@ -315,1 +322,1 @@\n-                    getKeyFactory(key.getAlgorithm()).\n+                    so = getKeyFactory(key.getAlgorithm()).\n@@ -318,1 +325,1 @@\n-                    getKeyFactory(key.getAlgorithm())\n+                    so = getKeyFactory(key.getAlgorithm())\n@@ -333,1 +340,0 @@\n-\n@@ -359,3 +365,3 @@\n-     * current instance that will use Factory classes from the specified\n-     * {@link Provider}.  Any errors using the {@code provider} will occur\n-     * during decoding.\n+     * current instance that will use KeyFactory and CertificateFactory classes\n+     * from the specified {@link Provider}.  Any errors using the\n+     * {@code provider} will occur during decoding.\n@@ -380,1 +386,1 @@\n-     * @return the decoder\n+     * @return a new PEM decoder instance.\n@@ -384,2 +390,1 @@\n-        char[] pwd = password.clone();\n-        return new PEMDecoder(factory, pwd);\n+        return new PEMDecoder(factory, new PBEKeySpec(password));\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMDecoder.java","additions":29,"deletions":24,"binary":false,"changes":53,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n- * <pre>\n+ * {@snippet lang = java:\n@@ -77,1 +77,1 @@\n- * <\/pre>\n+ * }\n@@ -160,1 +160,0 @@\n-\n@@ -177,1 +176,1 @@\n-                    throw new SecurityException(e);\n+                    throw new IllegalArgumentException(e);\n@@ -240,1 +239,1 @@\n-     *                stored in the new instance.\n+     *                stored in the new instance. {@null} is a valid entry.\n@@ -242,1 +241,0 @@\n-     * @throws NullPointerException if password is null.\n@@ -246,1 +244,0 @@\n-        Objects.requireNonNull(password);\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMEncoder.java","additions":4,"deletions":7,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -41,1 +41,5 @@\n- *   attributes [0] IMPLICIT Attributes OPTIONAL }\n+ *   attributes       [0] IMPLICIT Attributes OPTIONAL,\n+ *   ...,\n+ *   [[2: publicKey  [1] PublicKey OPTIONAL ]],\n+ *   ...\n+ * }\n@@ -43,1 +47,3 @@\n- * Version ::= INTEGER\n+ * PrivateKeyInfo ::= OneAsymmetricKey\n+ *\n+ * Version ::= INTEGER { v1(0), v2(1) }\n@@ -49,0 +55,2 @@\n+ * PublicKey ::= BIT STRING\n+ *\n","filename":"src\/java.base\/share\/classes\/java\/security\/spec\/PKCS8EncodedKeySpec.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import sun.security.jca.JCAUtil;\n@@ -82,1 +83,1 @@\n-     * @param encoded the ASN.1 encoding to be parsed.\n+     * @param encoded the ASN.1 encoding which is cloned and then parsed.\n@@ -319,7 +320,8 @@\n-     * Returns an {@code EncryptedPrivateKeyInfo} from a given PrivateKey.\n-     * A valid password-based encryption (PBE) algorithm and password must be\n-     * specified.  AlgorithmParameterSpec, {@code params}, will use the\n-     * provider default if {@code null} is passed.  If {@code provider} is\n-     * {@code null}, the provider will be selected through the default\n-     * provider list.\n-     * <p>\n+     * Creates and encrypts an {@code EncryptedPrivateKeyInfo} from a given\n+     * PrivateKey.  A valid password-based encryption (PBE) algorithm and\n+     * password must be specified.\n+     *\n+     * {@link AlgorithmParameterSpec} will use the provider default if\n+     * {@code params} is {@null}.  The {@link Provider} will be selected\n+     * through the default provider list if {@code provider} is {@null}\n+     *\n@@ -343,0 +345,4 @@\n+     * @implNote The encryption uses the algorithm set by\n+     * `jdk.epkcs8.defaultAlgorithm` Security Property\n+     *  and default the {@code AlgorithmParameterSpec} of that provider.\n+     *\n@@ -353,1 +359,0 @@\n-        Cipher cipher;\n@@ -360,1 +365,0 @@\n-                cipher = Cipher.getInstance(algorithm);\n@@ -363,1 +367,0 @@\n-                cipher = Cipher.getInstance(algorithm, provider);\n@@ -366,16 +369,1 @@\n-        } catch (NoSuchAlgorithmException | NoSuchPaddingException |\n-                 InvalidKeySpecException e) {\n-            throw new IllegalArgumentException(e);\n-        }\n-\n-        AlgorithmId algId;\n-        byte[] encryptedData;\n-        DerOutputStream out = new DerOutputStream();\n-        try {\n-            cipher.init(Cipher.ENCRYPT_MODE, skey, params);\n-            encryptedData = cipher.doFinal(key.getEncoded());\n-            algId = new AlgorithmId(Pem.getPBEID(algorithm),\n-                cipher.getParameters());\n-            algId.encode(out);\n-            out.putOctetString(encryptedData);\n-        } catch (InvalidAlgorithmParameterException e) {\n+        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\n@@ -383,3 +371,0 @@\n-        } catch (IllegalBlockSizeException | BadPaddingException |\n-                 InvalidKeyException e) {\n-            throw new SecurityException(e);\n@@ -387,3 +372,1 @@\n-        return new EncryptedPrivateKeyInfo(\n-            DerValue.wrap(DerValue.tag_Sequence, out).toByteArray(),\n-            encryptedData, algId, cipher.getParameters());\n+        return encryptKeyImpl(key, algorithm, skey, params, provider, null);\n@@ -393,6 +376,3 @@\n-     * Creates and encrypts an `EncryptedPrivateKeyInfo` from a given PrivateKey\n-     * and password.\n-     *\n-     * @implNote The encryption uses the algorithm set by `jdk.epkcs8.defaultAlgorithm`\n-     * Security Property by the default provider and default the\n-     * AlgorithmParameterSpec of that provider.\n+     * Creates and encrypts an {@code EncryptedPrivateKeyInfo} from a given\n+     * {@code PrivateKey} and password.  Default algorithm and parameters are\n+     * used.\n@@ -400,1 +380,1 @@\n-     * @param key The PrivateKey object to encrypt.\n+     * @param key The {@code PrivateKey} object to encrypt.\n@@ -403,1 +383,1 @@\n-     * @return an EncryptedPrivateKeyInfo.\n+     * @return an {@code EncryptedPrivateKeyInfo}.\n@@ -409,0 +389,4 @@\n+     * @implNote The `jdk.epkcs8.defaultAlgorithm` Security Property defines\n+     * the default encryption algorithm and the {@code AlgorithmParameterSpec}\n+     * are the provider's algorithm defaults.\n+     *\n@@ -425,1 +409,84 @@\n-     * Return a PrivateKey from the encrypted data in the object.\n+     * Creates and encrypts an {@code EncryptedPrivateKeyInfo} from a given\n+     * {@link PrivateKey} using the {@code encKey} and given parameters.\n+     *\n+     * If {@code algorithm} is {@null} the default algorithm will be used.\n+     * {@code params} is null, the provider default will be used.\n+     * {@code params} is {@null}.  The {@code provider} or {@code random} will\n+     * be selected through the default provider list if set to {@null}.\n+     *\n+     * @param key the {@code PrivateKey} object to encrypt.\n+     * @param encKey the encryption {@code Key}\n+     * @param algorithm the password-based encryption (PBE) algorithm used to\n+     *                  encrypt the key encoding.\n+     * @param params the {@code AlgorithmParameterSpec} to be used with\n+     *               encryption.\n+     * @param random the {@code SecureRandom} instance used during\n+     *               encryption.\n+     * @param provider the {@code Provider} is used for KeyFactory and\n+     *                 encryption operations.\n+     * @return an {@code EncryptedPrivateKeyInfo}.\n+     * @throws IllegalArgumentException on initialization errors based on the\n+     *                                  arguments passed to the method.\n+     * @throws SecurityException on a encryption errors.\n+     * @throws NullPointerException when the {@code key} or {@code encKey} are\n+     * null.\n+     *\n+     * @implNote The encryption uses the algorithm set by\n+     * `jdk.epkcs8.defaultAlgorithm` Security Property by the default provider\n+     * and default the {@code AlgorithmParameterSpec} of that provider.\n+     * @since 24\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.PEM_API)\n+    public static EncryptedPrivateKeyInfo encryptKey(PrivateKey key, Key encKey,\n+        String algorithm, AlgorithmParameterSpec params, Provider provider,\n+        SecureRandom random) {\n+        if (Pem.DEFAULT_ALGO == null || Pem.DEFAULT_ALGO.length() == 0) {\n+            throw new SecurityException(\"Security property \" +\n+                \"\\\"jdk.epkcs8.defaultAlgorithm\\\" may not specify a \" +\n+                \"valid algorithm.  Operation cannot be performed.\");\n+        }\n+        Objects.requireNonNull(key);\n+        Objects.requireNonNull(encKey);\n+        return encryptKeyImpl(key,\n+            (algorithm == null ? Pem.DEFAULT_ALGO : algorithm), encKey, params,\n+            provider, random);\n+    }\n+\n+\n+    private static EncryptedPrivateKeyInfo encryptKeyImpl(PrivateKey key,\n+        String algorithm, Key encryptKey, AlgorithmParameterSpec params,\n+        Provider provider, SecureRandom random) {\n+        AlgorithmId algId;\n+        byte[] encryptedData;\n+        Cipher c;\n+        DerOutputStream out;\n+\n+        if (random == null) {\n+            random = JCAUtil.getDefSecureRandom();\n+        }\n+        try {\n+            if (provider == null) {\n+                c = Cipher.getInstance(algorithm);\n+            } else {\n+                c = Cipher.getInstance(algorithm, provider);\n+            }\n+            c.init(Cipher.ENCRYPT_MODE, encryptKey, params, random);\n+            encryptedData = c.doFinal(key.getEncoded());\n+            algId = new AlgorithmId(Pem.getPBEID(algorithm), c.getParameters());\n+            out = new DerOutputStream();\n+            algId.encode(out);\n+            out.putOctetString(encryptedData);\n+        } catch (InvalidAlgorithmParameterException | NoSuchAlgorithmException |\n+                 NoSuchPaddingException e) {\n+            throw new IllegalArgumentException(e);\n+        } catch (IllegalBlockSizeException | BadPaddingException |\n+                 InvalidKeyException e) {\n+            throw new SecurityException(e);\n+        }\n+        return new EncryptedPrivateKeyInfo(\n+            DerValue.wrap(DerValue.tag_Sequence, out).toByteArray(),\n+            encryptedData, algId, c.getParameters());\n+    }\n+\n+    \/**\n+     * Returns a {@code PrivateKey} from the encrypted data in this instance.\n@@ -427,2 +494,3 @@\n-     * @param password the password used in the PBE encryption.\n-     * @return a PrivateKey\n+     * @param password this array is cloned and used for PBE decryption.\n+     *                 {@code null} may be used.\n+     * @return a {@code PrivateKey}\n@@ -440,2 +508,2 @@\n-     * Return a PrivateKey from the object's encrypted data with a KeyFactory\n-     * from the given Provider.\n+     * Returns a {@code PrivateKey} from the encrypted data in this instance.\n+     * using the given provider.\n@@ -443,3 +511,8 @@\n-     * @param password the password\n-     * @param provider the KeyFactory provider used to generate the key.\n-     * @return a PrivateKey\n+     * @param password this array is cloned and used for PBE decryption.\n+     *                 {@code null} may be used.\n+     * @param provider this {@code Provider} is used for all key generations.\n+     *                 It is used when generating the PBE encryption key,\n+     *                 {@code SecretKeyFactory}, and the {@code PrivateKey},\n+     *                 {@code KeyFactory}.  A {@null} value will use the default\n+     *                 provider configuration.\n+     * @return a {@code PrivateKey}\n@@ -454,0 +527,7 @@\n+        return getKeyImpl(new PBEKeySpec(password), provider);\n+    }\n+\n+    private PrivateKey getKeyImpl(PBEKeySpec keySpec, Provider provider)\n+        throws InvalidKeyException {\n+        SecretKeyFactory skf;\n+        PKCS8EncodedKeySpec p8KeySpec;\n@@ -455,3 +535,0 @@\n-            PBEKeySpec pks = new PBEKeySpec(password);\n-            SecretKeyFactory skf;\n-            PKCS8EncodedKeySpec keySpec;\n@@ -460,1 +537,1 @@\n-                keySpec = getKeySpec(skf.generateSecret(pks));\n+                p8KeySpec = getKeySpec(skf.generateSecret(keySpec));\n@@ -463,1 +540,1 @@\n-                keySpec = getKeySpec(skf.generateSecret(pks), provider);\n+                p8KeySpec = getKeySpec(skf.generateSecret(keySpec), provider);\n@@ -465,1 +542,2 @@\n-            return PKCS8Key.parseKey(keySpec.getEncoded());\n+\n+            return PKCS8Key.parseKey(p8KeySpec.getEncoded(), provider);\n@@ -471,0 +549,33 @@\n+    \/**\n+     * Returns a {@code PrivateKey} from the encrypted data in this instance.\n+     * using the given provider.\n+     *\n+     * @param decryptKey this is the decryption key and cannot be {@null}.\n+     * @param provider this {@code Provider} is used for all key generations.\n+     *                 It is used when generating the PBE encryption key,\n+     *                 {@code SecretKeyFactory}, and the {@code PrivateKey},\n+     *                 {@code KeyFactory}.  A {@null} value will use the default\n+     *                 provider configuration.\n+     * @return a {@code PrivateKey}\n+     * @throws InvalidKeyException if an error occurs during parsing of the\n+     * encrypted data or creation of the key object.\n+     * @throws NullPointerException if {@code key} is null.\n+     *\n+     * @since 24\n+     *\/\n+    @PreviewFeature(feature = PreviewFeature.Feature.PEM_API)\n+    public PrivateKey getKey(Key decryptKey, Provider provider)\n+        throws InvalidKeyException {\n+        try {\n+            PKCS8EncodedKeySpec p = getKeySpecImpl(decryptKey, provider);\n+            if (provider == null) {\n+                return KeyFactory.getInstance(p.getAlgorithm())\n+                    .generatePrivate(p);\n+            }\n+            return KeyFactory.getInstance(p.getAlgorithm(),\n+                provider).generatePrivate(p);\n+        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\n+            throw new InvalidKeyException(e);\n+        }\n+    }\n+\n@@ -477,1 +588,1 @@\n-     * @exception NoSuchAlgorithmException Cannot find appropriate cipher to\n+     * @exception NoSuchAlgorithmException if cannot find appropriate cipher to\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/EncryptedPrivateKeyInfo.java","additions":167,"deletions":56,"binary":false,"changes":223,"status":"modified"},{"patch":"@@ -43,0 +43,1 @@\n+import sun.security.x509.X509Key;\n@@ -168,0 +169,3 @@\n+    \/**\n+     * Parse the ASN.1 of the privateKey Octet\n+     *\/\n@@ -187,3 +191,17 @@\n-                    \/\/ ignore for now\n-                } else if (value.isContextSpecific((byte) 1)) {\n-                    \/\/ ignore for now\n+                    attributes = value.getDataBytes();  \/\/ Save DER sequence\n+                    if (data.available() == 0) {\n+                        return;\n+                    }\n+                    value = data.getDerValue();\n+                }\n+                if (value.isContextSpecific((byte) 1)) {\n+                    DerValue bits = value.withTag(DerValue.tag_BitString);\n+                    \/\/byte[] bytes = bits.getBitString();\n+                    \/\/BitArray bitArray = new BitArray(bytes[0] * 8 - 2, bytes, 3);\n+                    BitArray bitArray = bits.data.getUnalignedBitString();\n+                    pubKeyEncoded = new X509Key(algid,\n+                        bitArray).getEncoded();\n+\/*\n+                    pubKeyEncoded = new X509Key(algid,\n+                        bits.getUnalignedBitString()).getEncoded();\n+ *\/\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/ECPrivateKeyImpl.java","additions":21,"deletions":3,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    \/* The key bytes in octet form for the algorithm subclasses to decode *\/\n+    \/* The private key OctetString for the algorithm subclasses to decode *\/\n@@ -76,0 +76,6 @@\n+    \/* ASN.1 Attributes *\/\n+    protected byte[] attributes;\n+\n+    \/* PKCS8 version of the PEM *\/\n+    protected int version;\n+\n@@ -79,2 +85,0 @@\n-    private byte[] attributes;\n-    private int version;\n@@ -143,2 +147,2 @@\n-            \/\/ Uses 0xA0 constructed define-length or 0x80 constructed\n-            \/\/ indefinite.\n+            \/\/ Uses 0xA0 context-specific\/constructed or 0x80\n+            \/\/ context-specific\/primitive.\n@@ -193,0 +197,5 @@\n+        throws InvalidKeyException {\n+        return parseKey(encoded, null);\n+    }\n+\n+    public static PrivateKey parseKey(byte[] encoded, Provider provider)\n@@ -201,1 +210,2 @@\n-                result = KeyFactory.getInstance(rawKey.algid.getName())\n+                if (provider == null) {\n+                    result = KeyFactory.getInstance(rawKey.algid.getName())\n@@ -203,0 +213,4 @@\n+                } else {\n+                    result = KeyFactory.getInstance(rawKey.algid.getName(),\n+                        provider).generatePrivate(pkcs8KeySpec);\n+                }\n@@ -291,1 +305,0 @@\n-                e.printStackTrace();\n@@ -293,0 +306,1 @@\n+                throw new SecurityException(e);\n@@ -300,1 +314,1 @@\n-        out.putInteger((pubKeyEncoded == null) ? 0 : 1);\n+        out.putInteger(version);\n@@ -304,5 +318,6 @@\n-        if (attributes != null) {\n-            out.writeImplicit(\n-                DerValue.createTag((byte) (DerValue.TAG_CONTEXT |\n-                    DerValue.TAG_CONSTRUCT), false, (byte) 0),\n-                new DerOutputStream().putOctetString(attributes));\n+        if (version == V2) {\n+            if (attributes != null) {\n+                out.writeImplicit(\n+                    DerValue.createTag((byte) (DerValue.TAG_CONTEXT |\n+                        DerValue.TAG_CONSTRUCT), false, (byte) 0),\n+                    new DerOutputStream().putOctetString(attributes));\n@@ -310,1 +325,1 @@\n-        }\n+            }\n@@ -312,7 +327,8 @@\n-        if (pubKeyEncoded != null) {\n-            X509Key x = (X509Key) X509Key.parseKey(pubKeyEncoded);\n-            DerOutputStream pubOut = new DerOutputStream();\n-            pubOut.putUnalignedBitString(x.getKey());\n-            out.writeImplicit(\n-                DerValue.createTag(DerValue.TAG_CONTEXT, false, (byte) 1),\n-                pubOut);\n+            if (pubKeyEncoded != null) {\n+                X509Key x = (X509Key) X509Key.parseKey(pubKeyEncoded);\n+                DerOutputStream pubOut = new DerOutputStream();\n+                pubOut.putUnalignedBitString(x.getKey());\n+                out.writeImplicit(\n+                    DerValue.createTag(DerValue.TAG_CONTEXT, false,\n+                        (byte) 1), pubOut);\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS8Key.java","additions":37,"deletions":21,"binary":false,"changes":58,"status":"modified"},{"patch":"@@ -1,358 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.crypto.EncryptedPrivateKeyInfo;\n-import java.security.DEREncodable;\n-import java.security.cert.X509Certificate;\n-import java.security.interfaces.*;\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.regex.Pattern;\n-\n-\/**\n- * Library class for PEMEncoderTest and PEMDecoderTest\n- *\/\n-class PEMCerts {\n-    public static final Entry ecprivpem = new Entry(\"ecprivpem\",\n-        \"\"\"\n-        -----BEGIN PRIVATE KEY-----\n-        MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgkW3Jx561NlEgBnut\n-        KwDdi3cNwu7YYD\/QtJ+9+AEBdoqhRANCAASL+REY4vvAI9M3gonaml5K3lRgHq5w\n-        +OO4oO0VNduC44gUN1nrk7\/wdNSpL+xXNEX52Dsff+2RD\/fop224ANvB\n-        -----END PRIVATE KEY-----\n-        \"\"\", ECPrivateKey.class);\n-\n-    public static final Entry privpem = new Entry(\"privpem\",\n-        \"\"\"\n-        -----BEGIN PRIVATE KEY-----\n-        MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAOtjMnCzPy4jCeZb\n-        OdOvmvU3jl7+cvPFgL5MfqDCM5a8yI0yImg\/hzibJJHLk3emUVBSnekgHvCqyGLW\n-        3qGR2DuBEaMy0mkg8hfKcSpHLaYjDYaspO27d2qtb6d1qtsPoPjJFjWFYeW6K463\n-        OHG654K5\/2FcJgQdlLVyp3zCiQU\/AgMBAAECgYEAwNkDkTv5rlX8nWLuLJV5kh\/T\n-        H9a93SRZxw8qy5Bv7bZ7ZNrHP7uUkHbi7iPojKWRhwo43692SdzR0dCSk7LGgN9q\n-        CYvndsYR6gifVGBi0WF+St4+NdtcQ3VlNdsojy2BdIx0oC+r7i3bn+zc968O\/kI+\n-        EgdgrMcjjFqyx6tMHpECQQD8TYPKGHyN7Jdy28llCoUX\/sL\/yZ2vIi5mnDAFE5ae\n-        KZQSkNAXG+8i9Qbs\/Wdd5S3oZDqu+6DBn9gib80pYY05AkEA7tY59Oy8ka7nBlGP\n-        g6Wo1usF2bKqk8vjko9ioZQay7f86aB10QFcAjCr+cCUm16Lc9DwzWl02nNggRZa\n-        Jz8eNwJBAO+1zfLjFOPa14F\/JHdlaVKE8EwKCFDuztsapd0M4Vtf8Zk6ERsDpU63\n-        Ml9T2zOwnM9g+whpdjDAZ59ATdJ1JrECQQDReJQ2SxeL0lGPCiOLu9RcQp7L81aF\n-        79G1bgp8WlAyEjlAkloiqEWRKiz7DDuKFR7Lwhognng9S+n87aS+PS57AkBh75t8\n-        6onPAs4hkm+63dfzCojvEkALevO8J3OVX7YS5q9J1r75wDn60Ob0Zh+iiorpx8Ob\n-        WqcWcoJqfdLEyBT+\n-        -----END PRIVATE KEY-----\n-        \"\"\", RSAPrivateKey.class);\n-\n-    public static final Entry privpembc = new Entry(\"privpembc\",\n-        \"\"\"\n-        -----BEGIN PRIVATE KEY-----\n-        MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAOtjMnCzPy4jCeZb\n-        OdOvmvU3jl7+cvPFgL5MfqDCM5a8yI0yImg\/hzibJJHLk3emUVBSnekgHvCqyGLW\n-        3qGR2DuBEaMy0mkg8hfKcSpHLaYjDYaspO27d2qtb6d1qtsPoPjJFjWFYeW6K463\n-        OHG654K5\/2FcJgQdlLVyp3zCiQU\/AgMBAAECgYEAwNkDkTv5rlX8nWLuLJV5kh\/T\n-        H9a93SRZxw8qy5Bv7bZ7ZNrHP7uUkHbi7iPojKWRhwo43692SdzR0dCSk7LGgN9q\n-        CYvndsYR6gifVGBi0WF+St4+NdtcQ3VlNdsojy2BdIx0oC+r7i3bn+zc968O\/kI+\n-        EgdgrMcjjFqyx6tMHpECQQD8TYPKGHyN7Jdy28llCoUX\/sL\/yZ2vIi5mnDAFE5ae\n-        KZQSkNAXG+8i9Qbs\/Wdd5S3oZDqu+6DBn9gib80pYY05AkEA7tY59Oy8ka7nBlGP\n-        g6Wo1usF2bKqk8vjko9ioZQay7f86aB10QFcAjCr+cCUm16Lc9DwzWl02nNggRZa\n-        Jz8eNwJBAO+1zfLjFOPa14F\/JHdlaVKE8EwKCFDuztsapd0M4Vtf8Zk6ERsDpU63\n-        Ml9T2zOwnM9g+whpdjDAZ59ATdJ1JrECQQDReJQ2SxeL0lGPCiOLu9RcQp7L81aF\n-        79G1bgp8WlAyEjlAkloiqEWRKiz7DDuKFR7Lwhognng9S+n87aS+PS57AkBh75t8\n-        6onPAs4hkm+63dfzCojvEkALevO8J3OVX7YS5q9J1r75wDn60Ob0Zh+iiorpx8Ob\n-        WqcWcoJqfdLEyBT+\n-        -----END PRIVATE KEY-----\n-        \"\"\", RSAPrivateKey.class);\n-\n-    public static final Entry privec25519pem = new Entry(\"privpemed25519\",\n-        \"\"\"\n-        -----BEGIN PRIVATE KEY-----\n-        MC4CAQAwBQYDK2VwBCIEIFFZsmD+OKk67Cigc84\/2fWtlKsvXWLSoMJ0MHh4jI4I\n-        -----END PRIVATE KEY-----\n-        \"\"\", EdECPrivateKey.class);\n-\n-    public static final Entry pubrsapem = new Entry(\"pubrsapem\",\n-        \"\"\"\n-        -----BEGIN PUBLIC KEY-----\n-        MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDrYzJwsz8uIwnmWznTr5r1N45e\n-        \/nLzxYC+TH6gwjOWvMiNMiJoP4c4mySRy5N3plFQUp3pIB7wqshi1t6hkdg7gRGj\n-        MtJpIPIXynEqRy2mIw2GrKTtu3dqrW+ndarbD6D4yRY1hWHluiuOtzhxuueCuf9h\n-        XCYEHZS1cqd8wokFPwIDAQAB\n-        -----END PUBLIC KEY-----\n-        \"\"\", RSAPublicKey.class);\n-\n-    public static final Entry pubrsapembc = new Entry(\"pubrsapembc\",\n-        \"\"\"\n-        -----BEGIN PUBLIC KEY-----\n-        MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDrYzJwsz8uIwnmWznTr5r1N45e\n-        \/nLzxYC+TH6gwjOWvMiNMiJoP4c4mySRy5N3plFQUp3pIB7wqshi1t6hkdg7gRGj\n-        MtJpIPIXynEqRy2mIw2GrKTtu3dqrW+ndarbD6D4yRY1hWHluiuOtzhxuueCuf9h\n-        XCYEHZS1cqd8wokFPwIDAQAB\n-        -----END PUBLIC KEY-----\n-        \"\"\", RSAPublicKey.class);\n-\n-    public static final Entry pubecpem = new Entry(\"pubecpem\", \"\"\"\n-        -----BEGIN PUBLIC KEY-----\n-        MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEi\/kRGOL7wCPTN4KJ2ppeSt5UYB6u\n-        cPjjuKDtFTXbguOIFDdZ65O\/8HTUqS\/sVzRF+dg7H3\/tkQ\/36KdtuADbwQ==\n-        -----END PUBLIC KEY-----\n-        \"\"\", ECPublicKey.class);\n-\n-    \/\/ EC key with explicit parameters -- Not currently supported by SunEC\n-    public static final String pubec_explicit = \"\"\"\n-        -----BEGIN PUBLIC KEY-----\n-        MIIBSzCCAQMGByqGSM49AgEwgfcCAQEwLAYHKoZIzj0BAQIhAP\/\/\/\/8AAAABAAAA\n-        AAAAAAAAAAAA\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/MFsEIP\/\/\/\/8AAAABAAAAAAAAAAAAAAAA\/\/\/\/\n-        \/\/\/\/\/\/\/\/\/\/\/8BCBaxjXYqjqT57PrvVV2mIa8ZR0GsMxTsPY7zjw+J9JgSwMVAMSd\n-        NgiG5wSTamZ44ROdJreBn36QBEEEaxfR8uEsQkf4vOblY6RA8ncDfYEt6zOg9KE5\n-        RdiYwpZP40Li\/hp\/m47n60p8D54WK84zV2sxXs7LtkBoN79R9QIhAP\/\/\/\/8AAAAA\n-        \/\/\/\/\/\/\/\/\/\/+85vqtpxeehPO5ysL8YyVRAgEBA0IABIv5ERji+8Aj0zeCidqaXkre\n-        VGAernD447ig7RU124LjiBQ3WeuTv\/B01Kkv7Fc0RfnYOx9\/7ZEP9+inbbgA28E=\n-        -----END PUBLIC KEY-----\n-        \"\"\";\n-\n-    public static final Entry oasbcpem = new Entry(\"oasbcpem\",\n-        \"\"\"\n-        -----BEGIN PRIVATE KEY-----\n-        MIIDCAIBATANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAOtjMnCzPy4jCeZbOdOvmvU3jl7+\n-        cvPFgL5MfqDCM5a8yI0yImg\/hzibJJHLk3emUVBSnekgHvCqyGLW3qGR2DuBEaMy0mkg8hfKcSpH\n-        LaYjDYaspO27d2qtb6d1qtsPoPjJFjWFYeW6K463OHG654K5\/2FcJgQdlLVyp3zCiQU\/AgMBAAEC\n-        gYEAwNkDkTv5rlX8nWLuLJV5kh\/TH9a93SRZxw8qy5Bv7bZ7ZNrHP7uUkHbi7iPojKWRhwo43692\n-        SdzR0dCSk7LGgN9qCYvndsYR6gifVGBi0WF+St4+NdtcQ3VlNdsojy2BdIx0oC+r7i3bn+zc968O\n-        \/kI+EgdgrMcjjFqyx6tMHpECQQD8TYPKGHyN7Jdy28llCoUX\/sL\/yZ2vIi5mnDAFE5aeKZQSkNAX\n-        G+8i9Qbs\/Wdd5S3oZDqu+6DBn9gib80pYY05AkEA7tY59Oy8ka7nBlGPg6Wo1usF2bKqk8vjko9i\n-        oZQay7f86aB10QFcAjCr+cCUm16Lc9DwzWl02nNggRZaJz8eNwJBAO+1zfLjFOPa14F\/JHdlaVKE\n-        8EwKCFDuztsapd0M4Vtf8Zk6ERsDpU63Ml9T2zOwnM9g+whpdjDAZ59ATdJ1JrECQQDReJQ2SxeL\n-        0lGPCiOLu9RcQp7L81aF79G1bgp8WlAyEjlAkloiqEWRKiz7DDuKFR7Lwhognng9S+n87aS+PS57\n-        AkBh75t86onPAs4hkm+63dfzCojvEkALevO8J3OVX7YS5q9J1r75wDn60Ob0Zh+iiorpx8ObWqcW\n-        coJqfdLEyBT+gYGNADCBiQKBgQDrYzJwsz8uIwnmWznTr5r1N45e\/nLzxYC+TH6gwjOWvMiNMiJo\n-        P4c4mySRy5N3plFQUp3pIB7wqshi1t6hkdg7gRGjMtJpIPIXynEqRy2mIw2GrKTtu3dqrW+ndarb\n-        D6D4yRY1hWHluiuOtzhxuueCuf9hXCYEHZS1cqd8wokFPwIDAQAB\n-        -----END PRIVATE KEY-----\n-        \"\"\", DEREncodable.class);\n-\n-    public static final Entry oasrfc8410 = new Entry(\"oasrfc8410\",\n-        \"\"\"\n-        -----BEGIN PRIVATE KEY-----\n-        MHICAQEwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06\/nwoy\/HU++CXqI9EdVhC\n-        oB8wHQYKKoZIhvcNAQkJFDEPDA1DdXJkbGUgQ2hhaXJzgSEAGb9ECWmEzf6FQbrB\n-        Z9w7lshQhqowtrbLDFw4rXAxZuE=\n-        -----END PRIVATE KEY-----\n-        \"\"\", DEREncodable.class);\n-\n-    public static final Entry rsaOpenSSL = new Entry(\"rsaOpenSSL\",\n-        \"\"\"\n-        -----BEGIN RSA PRIVATE KEY-----\n-        MIIEowIBAAKCAQEAqozTLan1qFcOCWnS63jXQn5lLyGOKDv3GM11n2zkGGrChayj\n-        cSzB2KTlDmN9NgOyFdqGNWbSgdmXR5ToHGHYwaKubJoQIoPQcsipWDI156d3+X\/8\n-        BxCGY8l5nYwvS4olOXc+2kEjeFF1eamnm9IQ5DHZfaFPl0ri4Yfm1YHBAbt\/7HvF\n-        3MBjgBj1xSsSFLW4O6ws6guRVGDfKBVyyRNUhRTbSua\/nEz0wAjxF2PWT+ZTHS6M\n-        0siYwVTuPI4\/n4ItoYoahvGb9JskkXP+bc\/QZJCTFYdyxF5tKqVMSdYaJTxop02p\n-        Jo3oeafVKSlBrr0K731xgNBKqBud44aKT5R96QIDAQABAoIBAQCD9Q\/T7gOvayPm\n-        LqXOISJURV1emRTXloX5\/8Y5QtQ8\/CVjrg6Lm3ikefjsKBgR+cwJUpmyqcrIQyXk\n-        cZchlqdSMt\/IEW\/YdKqMlStJnRfOE+ok9lx2ztdcT9+0AWn6hXmFu\/i6f9nE1yoQ\n-        py6SxnbhSJyhsnTVd1CR9Uep\/InsHvYW\/15WlVMD1VuCSIt9sefqXwavbAfBaqbn\n-        mjwBB\/ulsqKhHSuRq\/QWqlj+jyGqhhYmTguC1Qwt0woDbThiHtK+suCTAlGBj\/A+\n-        IZ1U9d+VsHBcWDKBkxmlKWcJAGR3xXiKKy9vfzC+DU7L99kgay80VZarDyXgiy78\n-        9xMMzRMBAoGBANoxnZhu1bUFtLqTJ1HfDm6UB+1zVd2Mu4DXYdy\/AHjoaCLp05OQ\n-        0ZeyhO\/eXPT+eGpzCxkWD7465KO\/QDfnp54p\/NS73jaJVdWQHBhzJx1MymqURy3N\n-        JQeW4+ojzwSmVXcrs7Og6EBa4L+PWLpMLW2kODniCY+vp9f5LS6m8UPJAoGBAMgZ\n-        4rBw7B9YFZZW\/EE4eos4Q7KtA5tEP6wvCq04oxfiSytWXifYX0ToPp0CHhZlWOxk\n-        v9a\/BDGqM7AxAQJs7mmIvT5AT2V1w7oTbFPnnAo6pQtLcfaxdFFqr0h6t0sXSOKC\n-        rQeZAqqFqwuOyP7vT0goGlBruHkwS21NKkzCyzkhAoGAc2JjhbWu+8Cdt0CUPX5o\n-        ol9T5eTlFnkSuuqrTNIQzN+SGkxu341o2QDFvhdoLwLW6OwXhVeeUanROSqtKiMu\n-        B70Kf\/EtbMephXtk8CUNHTh7nmr1TSo8F8xakHoJQts3PQL2T9qal1W3nnWOpU4d\n-        g+qg9TMsfTiV2OdjVlVgJskCgYBSnjV1qjojuue22hVvDFW0c7en5z2M9wHfItEi\n-        sjbMnrdwnklj5Dd5qPZpNz2a+59ag0Kd9OJTazXKMoF7MeTCGB4ivMTLXHNCudBJ\n-        WGCZ7JrGbhEQzTX8g7L5lwlk7KlANLoiX++03lm\/\/OVKNR6j6ULsH33cM6+A4pJr\n-        fSYRYQKBgCr9iMTmL0x+n6AmMNecR+MhDxi99Oy0s2EBAYqN9g\/8yNgwM4KR0cjz\n-        EcgIOtkvoTrJ9Cquvuj+O7\/d2yNoH0SZQ4IYJKq47\/Z4kKhwXzJnBCCCBKgkjfub\n-        RTQSNnSEgTaBD29l7FrhNRHX9lIKFZ23caCTBS6o3q3+KgPbq7ao\n-        -----END RSA PRIVATE KEY-----\n-        \"\"\", RSAPrivateKey.class);\n-\n-    private static final Entry encEdECKey = new Entry(\"encEdECKey\",\n-        \"\"\"\n-        -----BEGIN ENCRYPTED PRIVATE KEY-----\n-        MIGqMGYGCSqGSIb3DQEFDTBZMDgGCSqGSIb3DQEFDDArBBRyYnoNyrcqvubzch00\n-        jyuAb5YizgICEAACARAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEAQIEEM8BgEgO\n-        vdMyi46+Dw7cOjwEQLtx5ME0NOOo7vlCGm3H\/4j+Tf5UXrMb1UrkPjqc8OiLbC0n\n-        IycFtI70ciPjgwDSjtCcPxR8fSxJPrm2yOJsRVo=\n-        -----END ENCRYPTED PRIVATE KEY-----\n-        \"\"\", EdECPrivateKey.class, \"fish\".toCharArray());\n-\n-    \/\/ This is not meant to be decrypted and to stay as an EKPI\n-    private static final Entry encEdECKeyEKPI = new Entry(\"encEdECKeyEPKI\",\n-        encEdECKey.pem(), EncryptedPrivateKeyInfo.class, null);\n-\n-    private static final Entry rsaCert = new Entry(\"rsaCert\",\n-        \"\"\"\n-        -----BEGIN CERTIFICATE-----\n-        MIIErDCCApQCCQD7ndjWbI\/x0DANBgkqhkiG9w0BAQsFADAXMRUwEwYDVQQDDAxQ\n-        RU0gVGVzdCBSU0EwIBcNMjQwMTA5MjMzNDIwWhgPMjA1MTA1MjYyMzM0MjBaMBcx\n-        FTATBgNVBAMMDFBFTSBUZXN0IFJTQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCC\n-        AgoCggIBAKgO\/Pciro8xn5iNjcVCR4IuXP+V1PNATtKAlMbWzwGVOupKgRcNeRbA\n-        N9RlljxSgEChIWs0\/DB9VsAw1wCIVeuIVxv0ZvhVAcuD8Yyl58eev1rptsSJhTkN\n-        YJFxEPSP2kfWDxS21ltbg1bnY\/c1SQbzWawDLJN16G+ICzQXo68UB5fCZV9Ugfgf\n-        9USPkCiC6aFt+RT7eQaN\/JrjtCm+mFf4VbK7jYW7D8AfjviEY1HQCnPoTjHBxdy+\n-        o5s4aIOx1Wuu9wMoGuLXgY3do5\/OSDCfByk7rc1drQB9GOKf2gkR8PL9TjK+R3Lq\n-        wCA0a3jlCBiGPlH3oeZJrnp7jhAh\/tVxbsd7yIdhQnasbiTfhew132AdPXoQE+ic\n-        PFoh8MMtG1bdzt8EbvePC3GOjeyIP6f2Ixrh3B6wXzzYmJqBwON+X8TLQolcI1pa\n-        Q7AUz5BScy3lO9nyJE\/FJkX+Mr6n7WCdudCrQNP+0M845UvkgFyf4FcM7uUVugBm\n-        AXy7sCqZgTeLdqHyTElMCoWzBa3MHKyiSCh8GUJH+I1yBY1gG95j3tITIOFvbZrk\n-        vDiMwNtV9T6Ta2mb0+38GfKjbI6PF4DVrzB6xc7Q6\/GwyhOb86YLOLlEHJfhuc+C\n-        Pdy8hQrrulm2jiCO\/skvHucABNJ2CENyWa7ljNJkcN6GNTziz4AhAgMBAAEwDQYJ\n-        KoZIhvcNAQELBQADggIBAKFQE2AgYgc7\/xzwveUAiZ55tfcds07UnazLCOdpz+JJ\n-        W4MOt\/1Qi9mUylqDEymfNZVLPd2dEjB4wJ57XBUjL+kXkH1SocuskxQPf05iz5zT\n-        pEwg2fTmU73ilKMs5Q113nBnL9ZZtlRKCh1Oc5LvLW799uVXnU4UdSpWOBU9ePGY\n-        +H1wUKf+e0\/BkveQsZERYcamH9O9U\/+h+bbhr3GpT1AVnuDRyF28OvRwARDCOVyy\n-        ifh+xCR3WCnNcgfwCoH6cE1aXDKHchlAAZtvjc1lLud7\/ECIg+15keVfTYk4HEbH\n-        j\/lprxyH7y99lMmRLQpnTve54RrZGGmg51UD7OmwPHLMGibfQkw6QgdNsggIYD6p\n-        L91spgRRB+i4PTovocndOMR2RYgQEelGNqv8MsoUC7oRNxPCHxIEGuUPH1Vf3jnk\n-        mTHbVzpjy57UtfcYp1uBFDf8WoWO1Mi6oXRw2YQA1YSMm1+3ftphxydcbRuBlS7O\n-        6Iiqk6XlFG9Dpd2jjAQQzJGtnC0QDgGz6\/KGp1bGEhRnOWju07eLWvPbyaX5zeSh\n-        8gOYV33zkPhziWJt4uFMFIi7N2DLEk5UVZv1KTLZlfPl55DRs7j\/Sb4vKHpB17AO\n-        meVknxVvifDVY0TIz57t28Accsk6ClBCxNPluPU\/8YLGAZJYsdDXjGcndQ13s5G7\n-        -----END CERTIFICATE-----\n-        \"\"\", X509Certificate.class);\n-\n-    private static final Entry ecCert = new Entry(\"ecCert\",\n-        \"\"\"\n-        -----BEGIN CERTIFICATE-----\n-        MIIBFzCBvgIJAOGVk\/ky59ojMAoGCCqGSM49BAMCMBMxETAPBgNVBAMMCFBFTSB0\n-        ZXN0MCAXDTI0MDEwOTIzMzEwNloYDzIwNTEwNTI2MjMzMTA2WjATMREwDwYDVQQD\n-        DAhQRU0gdGVzdDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGYI0jD7JZzw4RYD\n-        y9DCfaYNz0CHrpr9gJU5NXe6czvuNBdAOl\/lJGQ1pqpEQSQaMDII68obvQyQQyFY\n-        lU3G9QAwCgYIKoZIzj0EAwIDSAAwRQIgMwYld7aBzkcRt9mn27YOed5+n0xN1y8Q\n-        VEcFjLI\/tBYCIQDU3szDZ\/PK2mUZwtgQxLqHdh+f1JY0UwQS6M8QUvoDHw==\n-        -----END CERTIFICATE-----\n-        \"\"\", X509Certificate.class);\n-\n-    \/\/ EC cert with explicit parameters -- Not currently supported by SunEC\n-    private static final String ecCertEX = \"\"\"\n-        -----BEGIN CERTIFICATE-----\n-        MIICrDCCAjMCCQDKAlI7uc1CVDAKBggqhkjOPQQDAjATMREwDwYDVQQDDAhQRU0g\n-        dGVzdDAgFw0yNDAxMDkyMzIxNTlaGA8yMDUxMDUyNjIzMjE1OVowEzERMA8GA1UE\n-        AwwIUEVNIHRlc3QwggHMMIIBZAYHKoZIzj0CATCCAVcCAQEwPAYHKoZIzj0BAQIx\n-        AP\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/+\/\/\/\/\/wAAAAAAAAAA\/\/\/\/\n-        \/zB7BDD\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/v\/\/\/\/8AAAAAAAAA\n-        AP\/\/\/\/wEMLMxL6fiPufkmI4Fa+P4LRkYHZxu\/oFBEgMUCI9QE4daxlY5jYou0Z0q\n-        hcjt0+wq7wMVAKM1kmqjGaJ6HQCJamdzpIJ6zaxzBGEEqofKIr6LBTeOscce8yCt\n-        dG4dO2KLp5uYWfdB4IJUKjhVAvJdv1UpbDpUXjhydgq3NhfeSpYmLG9dnpi\/kpLc\n-        Kfj0Hb0omhR86doxE7XwuMAKYLHOHX6BnXpDHXyQ6g5fAjEA\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n-        \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/x2NNgfQ3Ld9YGg2ySLCneuzsGWrMxSlzAgEBA2IABO+IbTh6\n-        WqyzmxdCeJ0uUQ2v2jKxRuCKRyPlYAnpBmmQypsRS+GBdbBa0Mu6MTnVJh5uvqXn\n-        q7IuHVEiE3EFKw0DNW30nINuQg6lTv6PgN\/4nYBqsl5FQgzk2SYN3bw+7jAKBggq\n-        hkjOPQQDAgNnADBkAjATCnbbn3CgPRPi9Nym0hKpBAXc30D4eVB3mz8snK0oKU0+\n-        VP3F0EWcyM2QDSZCXIgCMHWknAhIGFTHxqypYUV8eAd3SY7ujZ6EPR0uG\/\/csBWG\n-        IqHcgr8slqi35ycQn5yMsQ==\n-        -----END CERTIFICATE-----\n-        \"\"\";\n-\n-    public record Entry(String name, String pem, Class clazz, char[] password) {\n-\n-        Entry(String name, String pem, Class clazz) {\n-            this(name, pem, clazz, null);\n-\n-        }\n-\n-        public Entry newClass(String name, Class c) {\n-            return new Entry(name, pem, c, password);\n-        }\n-\n-        public Entry newClass(Class c) {\n-            return newClass(name, c);\n-        }\n-\n-        Entry makeCRLF(String name) {\n-            return new Entry(name,\n-                Pattern.compile(System.lineSeparator()).matcher(pem).replaceAll(\"\\r\\n\"),\n-                clazz, password());\n-        }\n-\n-        Entry makeCR(String name) {\n-            return new Entry(name,\n-                Pattern.compile(System.lineSeparator()).matcher(pem).replaceAll(\"\\r\"),\n-                clazz, password());\n-        }\n-\n-        Entry makeNoCRLF(String name) {\n-            return new Entry(name,\n-                Pattern.compile(System.lineSeparator()).matcher(pem).replaceAll(\"\"),\n-                clazz, password());\n-        }\n-    }\n-\n-    static public Entry getEntry(String varname) {\n-        return getEntry(passList, varname);\n-    }\n-\n-    static public Entry getEntry(List<Entry> list, String varname) {\n-        for (Entry entry : list) {\n-            if (entry.name.compareToIgnoreCase(varname) == 0) {\n-                return entry;\n-            }\n-        }\n-        return null;\n-    }\n-\n-    static List<Entry> passList = new ArrayList<>();\n-    static List<Entry> entryList = new ArrayList<>();\n-    static List<Entry> pubList = new ArrayList<>();\n-    static List<Entry> privList = new ArrayList<>();\n-    static List<Entry> oasList = new ArrayList<>();\n-    static List<Entry> certList = new ArrayList<>();\n-    static List<Entry> encryptedList = new ArrayList<>();\n-    static List<Entry> failureEntryList = new ArrayList<>();\n-\n-    static {\n-        pubList.add(pubrsapem);\n-        pubList.add(pubrsapembc);\n-        pubList.add(pubecpem.makeCR(\"pubecpem-r\"));\n-        pubList.add(pubecpem.makeCRLF(\"pubecpem-rn\"));\n-        privList.add(privpem);\n-        privList.add(privpembc);\n-        privList.add(ecprivpem);\n-        privList.add(privec25519pem);\n-        privList.add(encEdECKeyEKPI);  \/\/ The non-EKPI version needs decryption\n-        privList.add(rsaOpenSSL);\n-        oasList.add(oasrfc8410);\n-        oasList.add(oasbcpem);\n-\n-        certList.add(rsaCert);\n-        certList.add(ecCert);\n-\n-        entryList.addAll(pubList);\n-        entryList.addAll(privList);\n-        entryList.addAll(oasList);\n-        entryList.addAll(certList);\n-\n-        encryptedList.add(encEdECKey);\n-\n-        passList.addAll(entryList);\n-        passList.addAll(encryptedList);\n-\n-        failureEntryList.add(new Entry(\"emptyPEM\", \"\", DEREncodable.class, null));\n-        failureEntryList.add(new Entry(\"nullPEM\", null, DEREncodable.class, null));\n-    }\n-}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/security\/PEM\/PEMCerts.java","additions":0,"deletions":358,"binary":false,"changes":358,"status":"deleted"},{"patch":"@@ -0,0 +1,388 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.crypto.EncryptedPrivateKeyInfo;\n+import java.security.DEREncodable;\n+import java.security.cert.X509Certificate;\n+import java.security.interfaces.*;\n+import java.util.ArrayList;\n+import java.util.Base64;\n+import java.util.List;\n+import java.util.regex.Pattern;\n+\n+\/**\n+ * Library class for PEMEncoderTest and PEMDecoderTest\n+ *\/\n+class PEMData {\n+    public static final Entry ecsecp256 = new Entry(\"ecsecp256\",\n+        \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgkW3Jx561NlEgBnut\n+        KwDdi3cNwu7YYD\/QtJ+9+AEBdoqhRANCAASL+REY4vvAI9M3gonaml5K3lRgHq5w\n+        +OO4oO0VNduC44gUN1nrk7\/wdNSpL+xXNEX52Dsff+2RD\/fop224ANvB\n+        -----END PRIVATE KEY-----\n+        \"\"\", ECPrivateKey.class);\n+\n+    public static final Entry rsapriv = new Entry(\"rsapriv\",\n+        \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAOtjMnCzPy4jCeZb\n+        OdOvmvU3jl7+cvPFgL5MfqDCM5a8yI0yImg\/hzibJJHLk3emUVBSnekgHvCqyGLW\n+        3qGR2DuBEaMy0mkg8hfKcSpHLaYjDYaspO27d2qtb6d1qtsPoPjJFjWFYeW6K463\n+        OHG654K5\/2FcJgQdlLVyp3zCiQU\/AgMBAAECgYEAwNkDkTv5rlX8nWLuLJV5kh\/T\n+        H9a93SRZxw8qy5Bv7bZ7ZNrHP7uUkHbi7iPojKWRhwo43692SdzR0dCSk7LGgN9q\n+        CYvndsYR6gifVGBi0WF+St4+NdtcQ3VlNdsojy2BdIx0oC+r7i3bn+zc968O\/kI+\n+        EgdgrMcjjFqyx6tMHpECQQD8TYPKGHyN7Jdy28llCoUX\/sL\/yZ2vIi5mnDAFE5ae\n+        KZQSkNAXG+8i9Qbs\/Wdd5S3oZDqu+6DBn9gib80pYY05AkEA7tY59Oy8ka7nBlGP\n+        g6Wo1usF2bKqk8vjko9ioZQay7f86aB10QFcAjCr+cCUm16Lc9DwzWl02nNggRZa\n+        Jz8eNwJBAO+1zfLjFOPa14F\/JHdlaVKE8EwKCFDuztsapd0M4Vtf8Zk6ERsDpU63\n+        Ml9T2zOwnM9g+whpdjDAZ59ATdJ1JrECQQDReJQ2SxeL0lGPCiOLu9RcQp7L81aF\n+        79G1bgp8WlAyEjlAkloiqEWRKiz7DDuKFR7Lwhognng9S+n87aS+PS57AkBh75t8\n+        6onPAs4hkm+63dfzCojvEkALevO8J3OVX7YS5q9J1r75wDn60Ob0Zh+iiorpx8Ob\n+        WqcWcoJqfdLEyBT+\n+        -----END PRIVATE KEY-----\n+        \"\"\", RSAPrivateKey.class);\n+\n+    public static final Entry rsaprivbc = new Entry(\"rsaprivbc\",\n+        \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAOtjMnCzPy4jCeZb\n+        OdOvmvU3jl7+cvPFgL5MfqDCM5a8yI0yImg\/hzibJJHLk3emUVBSnekgHvCqyGLW\n+        3qGR2DuBEaMy0mkg8hfKcSpHLaYjDYaspO27d2qtb6d1qtsPoPjJFjWFYeW6K463\n+        OHG654K5\/2FcJgQdlLVyp3zCiQU\/AgMBAAECgYEAwNkDkTv5rlX8nWLuLJV5kh\/T\n+        H9a93SRZxw8qy5Bv7bZ7ZNrHP7uUkHbi7iPojKWRhwo43692SdzR0dCSk7LGgN9q\n+        CYvndsYR6gifVGBi0WF+St4+NdtcQ3VlNdsojy2BdIx0oC+r7i3bn+zc968O\/kI+\n+        EgdgrMcjjFqyx6tMHpECQQD8TYPKGHyN7Jdy28llCoUX\/sL\/yZ2vIi5mnDAFE5ae\n+        KZQSkNAXG+8i9Qbs\/Wdd5S3oZDqu+6DBn9gib80pYY05AkEA7tY59Oy8ka7nBlGP\n+        g6Wo1usF2bKqk8vjko9ioZQay7f86aB10QFcAjCr+cCUm16Lc9DwzWl02nNggRZa\n+        Jz8eNwJBAO+1zfLjFOPa14F\/JHdlaVKE8EwKCFDuztsapd0M4Vtf8Zk6ERsDpU63\n+        Ml9T2zOwnM9g+whpdjDAZ59ATdJ1JrECQQDReJQ2SxeL0lGPCiOLu9RcQp7L81aF\n+        79G1bgp8WlAyEjlAkloiqEWRKiz7DDuKFR7Lwhognng9S+n87aS+PS57AkBh75t8\n+        6onPAs4hkm+63dfzCojvEkALevO8J3OVX7YS5q9J1r75wDn60Ob0Zh+iiorpx8Ob\n+        WqcWcoJqfdLEyBT+\n+        -----END PRIVATE KEY-----\n+        \"\"\", RSAPrivateKey.class);\n+\n+    public static final Entry ec25519priv = new Entry(\"ed25519priv\",\n+        \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MC4CAQAwBQYDK2VwBCIEIFFZsmD+OKk67Cigc84\/2fWtlKsvXWLSoMJ0MHh4jI4I\n+        -----END PRIVATE KEY-----\n+        \"\"\", EdECPrivateKey.class);\n+\n+    public static final Entry rsapub = new Entry(\"rsapub\",\n+        \"\"\"\n+        -----BEGIN PUBLIC KEY-----\n+        MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDrYzJwsz8uIwnmWznTr5r1N45e\n+        \/nLzxYC+TH6gwjOWvMiNMiJoP4c4mySRy5N3plFQUp3pIB7wqshi1t6hkdg7gRGj\n+        MtJpIPIXynEqRy2mIw2GrKTtu3dqrW+ndarbD6D4yRY1hWHluiuOtzhxuueCuf9h\n+        XCYEHZS1cqd8wokFPwIDAQAB\n+        -----END PUBLIC KEY-----\n+        \"\"\", RSAPublicKey.class);\n+\n+    public static final Entry rsapubbc = new Entry(\"rsapubbc\",\n+        \"\"\"\n+        -----BEGIN PUBLIC KEY-----\n+        MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDrYzJwsz8uIwnmWznTr5r1N45e\n+        \/nLzxYC+TH6gwjOWvMiNMiJoP4c4mySRy5N3plFQUp3pIB7wqshi1t6hkdg7gRGj\n+        MtJpIPIXynEqRy2mIw2GrKTtu3dqrW+ndarbD6D4yRY1hWHluiuOtzhxuueCuf9h\n+        XCYEHZS1cqd8wokFPwIDAQAB\n+        -----END PUBLIC KEY-----\n+        \"\"\", RSAPublicKey.class);\n+\n+    public static final Entry ecsecp256pub = new Entry(\"ecsecp256pub\", \"\"\"\n+        -----BEGIN PUBLIC KEY-----\n+        MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEi\/kRGOL7wCPTN4KJ2ppeSt5UYB6u\n+        cPjjuKDtFTXbguOIFDdZ65O\/8HTUqS\/sVzRF+dg7H3\/tkQ\/36KdtuADbwQ==\n+        -----END PUBLIC KEY-----\n+        \"\"\", ECPublicKey.class);\n+\n+    \/\/ EC key with explicit parameters -- Not currently supported by SunEC\n+    public static final String pubec_explicit = \"\"\"\n+        -----BEGIN PUBLIC KEY-----\n+        MIIBSzCCAQMGByqGSM49AgEwgfcCAQEwLAYHKoZIzj0BAQIhAP\/\/\/\/8AAAABAAAA\n+        AAAAAAAAAAAA\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/MFsEIP\/\/\/\/8AAAABAAAAAAAAAAAAAAAA\/\/\/\/\n+        \/\/\/\/\/\/\/\/\/\/\/8BCBaxjXYqjqT57PrvVV2mIa8ZR0GsMxTsPY7zjw+J9JgSwMVAMSd\n+        NgiG5wSTamZ44ROdJreBn36QBEEEaxfR8uEsQkf4vOblY6RA8ncDfYEt6zOg9KE5\n+        RdiYwpZP40Li\/hp\/m47n60p8D54WK84zV2sxXs7LtkBoN79R9QIhAP\/\/\/\/8AAAAA\n+        \/\/\/\/\/\/\/\/\/\/+85vqtpxeehPO5ysL8YyVRAgEBA0IABIv5ERji+8Aj0zeCidqaXkre\n+        VGAernD447ig7RU124LjiBQ3WeuTv\/B01Kkv7Fc0RfnYOx9\/7ZEP9+inbbgA28E=\n+        -----END PUBLIC KEY-----\n+        \"\"\";\n+\n+    public static final Entry oasbcpem = new Entry(\"oasbcpem\",\n+        \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MIIDCAIBATANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAOtjMnCzPy4jCeZbOdOvmvU3jl7+\n+        cvPFgL5MfqDCM5a8yI0yImg\/hzibJJHLk3emUVBSnekgHvCqyGLW3qGR2DuBEaMy0mkg8hfKcSpH\n+        LaYjDYaspO27d2qtb6d1qtsPoPjJFjWFYeW6K463OHG654K5\/2FcJgQdlLVyp3zCiQU\/AgMBAAEC\n+        gYEAwNkDkTv5rlX8nWLuLJV5kh\/TH9a93SRZxw8qy5Bv7bZ7ZNrHP7uUkHbi7iPojKWRhwo43692\n+        SdzR0dCSk7LGgN9qCYvndsYR6gifVGBi0WF+St4+NdtcQ3VlNdsojy2BdIx0oC+r7i3bn+zc968O\n+        \/kI+EgdgrMcjjFqyx6tMHpECQQD8TYPKGHyN7Jdy28llCoUX\/sL\/yZ2vIi5mnDAFE5aeKZQSkNAX\n+        G+8i9Qbs\/Wdd5S3oZDqu+6DBn9gib80pYY05AkEA7tY59Oy8ka7nBlGPg6Wo1usF2bKqk8vjko9i\n+        oZQay7f86aB10QFcAjCr+cCUm16Lc9DwzWl02nNggRZaJz8eNwJBAO+1zfLjFOPa14F\/JHdlaVKE\n+        8EwKCFDuztsapd0M4Vtf8Zk6ERsDpU63Ml9T2zOwnM9g+whpdjDAZ59ATdJ1JrECQQDReJQ2SxeL\n+        0lGPCiOLu9RcQp7L81aF79G1bgp8WlAyEjlAkloiqEWRKiz7DDuKFR7Lwhognng9S+n87aS+PS57\n+        AkBh75t86onPAs4hkm+63dfzCojvEkALevO8J3OVX7YS5q9J1r75wDn60Ob0Zh+iiorpx8ObWqcW\n+        coJqfdLEyBT+gYGNADCBiQKBgQDrYzJwsz8uIwnmWznTr5r1N45e\/nLzxYC+TH6gwjOWvMiNMiJo\n+        P4c4mySRy5N3plFQUp3pIB7wqshi1t6hkdg7gRGjMtJpIPIXynEqRy2mIw2GrKTtu3dqrW+ndarb\n+        D6D4yRY1hWHluiuOtzhxuueCuf9hXCYEHZS1cqd8wokFPwIDAQAB\n+        -----END PRIVATE KEY-----\n+        \"\"\", DEREncodable.class);\n+\n+    public static final Entry oasrfc8410 = new Entry(\"oasrfc8410\",\n+        \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MHICAQEwBQYDK2VwBCIEINTuctv5E1hK1bbY8fdp+K06\/nwoy\/HU++CXqI9EdVhC\n+        oB8wHQYKKoZIhvcNAQkJFDEPDA1DdXJkbGUgQ2hhaXJzgSEAGb9ECWmEzf6FQbrB\n+        Z9w7lshQhqowtrbLDFw4rXAxZuE=\n+        -----END PRIVATE KEY-----\n+        \"\"\", DEREncodable.class);\n+\n+    public static final Entry rsaOpenSSL = new Entry(\"rsaOpenSSL\",\n+        \"\"\"\n+        -----BEGIN RSA PRIVATE KEY-----\n+        MIIEowIBAAKCAQEAqozTLan1qFcOCWnS63jXQn5lLyGOKDv3GM11n2zkGGrChayj\n+        cSzB2KTlDmN9NgOyFdqGNWbSgdmXR5ToHGHYwaKubJoQIoPQcsipWDI156d3+X\/8\n+        BxCGY8l5nYwvS4olOXc+2kEjeFF1eamnm9IQ5DHZfaFPl0ri4Yfm1YHBAbt\/7HvF\n+        3MBjgBj1xSsSFLW4O6ws6guRVGDfKBVyyRNUhRTbSua\/nEz0wAjxF2PWT+ZTHS6M\n+        0siYwVTuPI4\/n4ItoYoahvGb9JskkXP+bc\/QZJCTFYdyxF5tKqVMSdYaJTxop02p\n+        Jo3oeafVKSlBrr0K731xgNBKqBud44aKT5R96QIDAQABAoIBAQCD9Q\/T7gOvayPm\n+        LqXOISJURV1emRTXloX5\/8Y5QtQ8\/CVjrg6Lm3ikefjsKBgR+cwJUpmyqcrIQyXk\n+        cZchlqdSMt\/IEW\/YdKqMlStJnRfOE+ok9lx2ztdcT9+0AWn6hXmFu\/i6f9nE1yoQ\n+        py6SxnbhSJyhsnTVd1CR9Uep\/InsHvYW\/15WlVMD1VuCSIt9sefqXwavbAfBaqbn\n+        mjwBB\/ulsqKhHSuRq\/QWqlj+jyGqhhYmTguC1Qwt0woDbThiHtK+suCTAlGBj\/A+\n+        IZ1U9d+VsHBcWDKBkxmlKWcJAGR3xXiKKy9vfzC+DU7L99kgay80VZarDyXgiy78\n+        9xMMzRMBAoGBANoxnZhu1bUFtLqTJ1HfDm6UB+1zVd2Mu4DXYdy\/AHjoaCLp05OQ\n+        0ZeyhO\/eXPT+eGpzCxkWD7465KO\/QDfnp54p\/NS73jaJVdWQHBhzJx1MymqURy3N\n+        JQeW4+ojzwSmVXcrs7Og6EBa4L+PWLpMLW2kODniCY+vp9f5LS6m8UPJAoGBAMgZ\n+        4rBw7B9YFZZW\/EE4eos4Q7KtA5tEP6wvCq04oxfiSytWXifYX0ToPp0CHhZlWOxk\n+        v9a\/BDGqM7AxAQJs7mmIvT5AT2V1w7oTbFPnnAo6pQtLcfaxdFFqr0h6t0sXSOKC\n+        rQeZAqqFqwuOyP7vT0goGlBruHkwS21NKkzCyzkhAoGAc2JjhbWu+8Cdt0CUPX5o\n+        ol9T5eTlFnkSuuqrTNIQzN+SGkxu341o2QDFvhdoLwLW6OwXhVeeUanROSqtKiMu\n+        B70Kf\/EtbMephXtk8CUNHTh7nmr1TSo8F8xakHoJQts3PQL2T9qal1W3nnWOpU4d\n+        g+qg9TMsfTiV2OdjVlVgJskCgYBSnjV1qjojuue22hVvDFW0c7en5z2M9wHfItEi\n+        sjbMnrdwnklj5Dd5qPZpNz2a+59ag0Kd9OJTazXKMoF7MeTCGB4ivMTLXHNCudBJ\n+        WGCZ7JrGbhEQzTX8g7L5lwlk7KlANLoiX++03lm\/\/OVKNR6j6ULsH33cM6+A4pJr\n+        fSYRYQKBgCr9iMTmL0x+n6AmMNecR+MhDxi99Oy0s2EBAYqN9g\/8yNgwM4KR0cjz\n+        EcgIOtkvoTrJ9Cquvuj+O7\/d2yNoH0SZQ4IYJKq47\/Z4kKhwXzJnBCCCBKgkjfub\n+        RTQSNnSEgTaBD29l7FrhNRHX9lIKFZ23caCTBS6o3q3+KgPbq7ao\n+        -----END RSA PRIVATE KEY-----\n+        \"\"\", RSAPrivateKey.class);\n+\n+    private static final Entry ed25519ep8 = new Entry(\"ed25519ep8\",\n+        \"\"\"\n+        -----BEGIN ENCRYPTED PRIVATE KEY-----\n+        MIGqMGYGCSqGSIb3DQEFDTBZMDgGCSqGSIb3DQEFDDArBBRyYnoNyrcqvubzch00\n+        jyuAb5YizgICEAACARAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEAQIEEM8BgEgO\n+        vdMyi46+Dw7cOjwEQLtx5ME0NOOo7vlCGm3H\/4j+Tf5UXrMb1UrkPjqc8OiLbC0n\n+        IycFtI70ciPjgwDSjtCcPxR8fSxJPrm2yOJsRVo=\n+        -----END ENCRYPTED PRIVATE KEY-----\n+        \"\"\", EdECPrivateKey.class, \"fish\".toCharArray());\n+\n+    \/\/ This is not meant to be decrypted and to stay as an EKPI\n+    private static final Entry ed25519ekpi = new Entry(\"ed25519ekpi\",\n+        ed25519ep8.pem(), EncryptedPrivateKeyInfo.class, null);\n+\n+    private static final Entry rsaCert = new Entry(\"rsaCert\",\n+        \"\"\"\n+        -----BEGIN CERTIFICATE-----\n+        MIIErDCCApQCCQD7ndjWbI\/x0DANBgkqhkiG9w0BAQsFADAXMRUwEwYDVQQDDAxQ\n+        RU0gVGVzdCBSU0EwIBcNMjQwMTA5MjMzNDIwWhgPMjA1MTA1MjYyMzM0MjBaMBcx\n+        FTATBgNVBAMMDFBFTSBUZXN0IFJTQTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCC\n+        AgoCggIBAKgO\/Pciro8xn5iNjcVCR4IuXP+V1PNATtKAlMbWzwGVOupKgRcNeRbA\n+        N9RlljxSgEChIWs0\/DB9VsAw1wCIVeuIVxv0ZvhVAcuD8Yyl58eev1rptsSJhTkN\n+        YJFxEPSP2kfWDxS21ltbg1bnY\/c1SQbzWawDLJN16G+ICzQXo68UB5fCZV9Ugfgf\n+        9USPkCiC6aFt+RT7eQaN\/JrjtCm+mFf4VbK7jYW7D8AfjviEY1HQCnPoTjHBxdy+\n+        o5s4aIOx1Wuu9wMoGuLXgY3do5\/OSDCfByk7rc1drQB9GOKf2gkR8PL9TjK+R3Lq\n+        wCA0a3jlCBiGPlH3oeZJrnp7jhAh\/tVxbsd7yIdhQnasbiTfhew132AdPXoQE+ic\n+        PFoh8MMtG1bdzt8EbvePC3GOjeyIP6f2Ixrh3B6wXzzYmJqBwON+X8TLQolcI1pa\n+        Q7AUz5BScy3lO9nyJE\/FJkX+Mr6n7WCdudCrQNP+0M845UvkgFyf4FcM7uUVugBm\n+        AXy7sCqZgTeLdqHyTElMCoWzBa3MHKyiSCh8GUJH+I1yBY1gG95j3tITIOFvbZrk\n+        vDiMwNtV9T6Ta2mb0+38GfKjbI6PF4DVrzB6xc7Q6\/GwyhOb86YLOLlEHJfhuc+C\n+        Pdy8hQrrulm2jiCO\/skvHucABNJ2CENyWa7ljNJkcN6GNTziz4AhAgMBAAEwDQYJ\n+        KoZIhvcNAQELBQADggIBAKFQE2AgYgc7\/xzwveUAiZ55tfcds07UnazLCOdpz+JJ\n+        W4MOt\/1Qi9mUylqDEymfNZVLPd2dEjB4wJ57XBUjL+kXkH1SocuskxQPf05iz5zT\n+        pEwg2fTmU73ilKMs5Q113nBnL9ZZtlRKCh1Oc5LvLW799uVXnU4UdSpWOBU9ePGY\n+        +H1wUKf+e0\/BkveQsZERYcamH9O9U\/+h+bbhr3GpT1AVnuDRyF28OvRwARDCOVyy\n+        ifh+xCR3WCnNcgfwCoH6cE1aXDKHchlAAZtvjc1lLud7\/ECIg+15keVfTYk4HEbH\n+        j\/lprxyH7y99lMmRLQpnTve54RrZGGmg51UD7OmwPHLMGibfQkw6QgdNsggIYD6p\n+        L91spgRRB+i4PTovocndOMR2RYgQEelGNqv8MsoUC7oRNxPCHxIEGuUPH1Vf3jnk\n+        mTHbVzpjy57UtfcYp1uBFDf8WoWO1Mi6oXRw2YQA1YSMm1+3ftphxydcbRuBlS7O\n+        6Iiqk6XlFG9Dpd2jjAQQzJGtnC0QDgGz6\/KGp1bGEhRnOWju07eLWvPbyaX5zeSh\n+        8gOYV33zkPhziWJt4uFMFIi7N2DLEk5UVZv1KTLZlfPl55DRs7j\/Sb4vKHpB17AO\n+        meVknxVvifDVY0TIz57t28Accsk6ClBCxNPluPU\/8YLGAZJYsdDXjGcndQ13s5G7\n+        -----END CERTIFICATE-----\n+        \"\"\", X509Certificate.class);\n+\n+    private static final Entry ecCert = new Entry(\"ecCert\",\n+        \"\"\"\n+        -----BEGIN CERTIFICATE-----\n+        MIIBFzCBvgIJAOGVk\/ky59ojMAoGCCqGSM49BAMCMBMxETAPBgNVBAMMCFBFTSB0\n+        ZXN0MCAXDTI0MDEwOTIzMzEwNloYDzIwNTEwNTI2MjMzMTA2WjATMREwDwYDVQQD\n+        DAhQRU0gdGVzdDBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABGYI0jD7JZzw4RYD\n+        y9DCfaYNz0CHrpr9gJU5NXe6czvuNBdAOl\/lJGQ1pqpEQSQaMDII68obvQyQQyFY\n+        lU3G9QAwCgYIKoZIzj0EAwIDSAAwRQIgMwYld7aBzkcRt9mn27YOed5+n0xN1y8Q\n+        VEcFjLI\/tBYCIQDU3szDZ\/PK2mUZwtgQxLqHdh+f1JY0UwQS6M8QUvoDHw==\n+        -----END CERTIFICATE-----\n+        \"\"\", X509Certificate.class);\n+\n+    \/\/ EC cert with explicit parameters -- Not currently supported by SunEC\n+    private static final String ecCertEX = \"\"\"\n+        -----BEGIN CERTIFICATE-----\n+        MIICrDCCAjMCCQDKAlI7uc1CVDAKBggqhkjOPQQDAjATMREwDwYDVQQDDAhQRU0g\n+        dGVzdDAgFw0yNDAxMDkyMzIxNTlaGA8yMDUxMDUyNjIzMjE1OVowEzERMA8GA1UE\n+        AwwIUEVNIHRlc3QwggHMMIIBZAYHKoZIzj0CATCCAVcCAQEwPAYHKoZIzj0BAQIx\n+        AP\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/+\/\/\/\/\/wAAAAAAAAAA\/\/\/\/\n+        \/zB7BDD\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/v\/\/\/\/8AAAAAAAAA\n+        AP\/\/\/\/wEMLMxL6fiPufkmI4Fa+P4LRkYHZxu\/oFBEgMUCI9QE4daxlY5jYou0Z0q\n+        hcjt0+wq7wMVAKM1kmqjGaJ6HQCJamdzpIJ6zaxzBGEEqofKIr6LBTeOscce8yCt\n+        dG4dO2KLp5uYWfdB4IJUKjhVAvJdv1UpbDpUXjhydgq3NhfeSpYmLG9dnpi\/kpLc\n+        Kfj0Hb0omhR86doxE7XwuMAKYLHOHX6BnXpDHXyQ6g5fAjEA\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+        \/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/x2NNgfQ3Ld9YGg2ySLCneuzsGWrMxSlzAgEBA2IABO+IbTh6\n+        WqyzmxdCeJ0uUQ2v2jKxRuCKRyPlYAnpBmmQypsRS+GBdbBa0Mu6MTnVJh5uvqXn\n+        q7IuHVEiE3EFKw0DNW30nINuQg6lTv6PgN\/4nYBqsl5FQgzk2SYN3bw+7jAKBggq\n+        hkjOPQQDAgNnADBkAjATCnbbn3CgPRPi9Nym0hKpBAXc30D4eVB3mz8snK0oKU0+\n+        VP3F0EWcyM2QDSZCXIgCMHWknAhIGFTHxqypYUV8eAd3SY7ujZ6EPR0uG\/\/csBWG\n+        IqHcgr8slqi35ycQn5yMsQ==\n+        -----END CERTIFICATE-----\n+        \"\"\";\n+\n+    private static final Entry ecsecp384 = new Entry(\"ecsecp384\",\n+        \"\"\"\n+        -----BEGIN PRIVATE KEY-----\n+        MIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDBVS52ZSKZ0oES7twD2\n+        GGwRIVu3uHlGIwlu0xzFe7sgIPntca2bHfYMhgGxrlCm0q+hZANiAAQNWgwWfLX8\n+        8pYVjvwbfvDF9f+Oa9w6JjrfpWwFAUI6b1OPgrNUh+yXtUXnQNXnfUcIu0Os53bM\n+        8fTqPkQl6RyWEDHeXqJK8zTBHMeBq9nLfDPSbzQgLDyC64Orn0D8exM=\n+        -----END PRIVATE KEY-----\n+        \"\"\", ECPrivateKey.class);\n+\n+    public record Entry(String name, String pem, Class clazz, char[] password,\n+                        byte[] der) {\n+\n+        public Entry(String name, String pem, Class clazz, char[] password,\n+            byte[] der) {\n+            this.name = name;\n+            this.pem = pem;\n+            this.clazz = clazz;\n+            this.password = password;\n+            if (pem != null && pem.length() > 0) {\n+                String[] pemtext = pem.split(\"-----\");\n+                this.der = Base64.getMimeDecoder().decode(pemtext[2]);\n+            } else {\n+                this.der = null;\n+            }\n+        }\n+        Entry(String name, String pem, Class clazz, char[] password) {\n+            this(name, pem, clazz, password, null);\n+        }\n+\n+        Entry(String name, String pem, Class clazz) {\n+            this(name, pem, clazz, null, null);\n+        }\n+\n+        public Entry newClass(String name, Class c) {\n+            return new Entry(name, pem, c, password);\n+        }\n+\n+        public Entry newClass(Class c) {\n+            return newClass(name, c);\n+        }\n+\n+        Entry makeCRLF(String name) {\n+            return new Entry(name,\n+                Pattern.compile(System.lineSeparator()).matcher(pem).replaceAll(\"\\r\\n\"),\n+                clazz, password());\n+        }\n+\n+        Entry makeCR(String name) {\n+            return new Entry(name,\n+                Pattern.compile(System.lineSeparator()).matcher(pem).replaceAll(\"\\r\"),\n+                clazz, password());\n+        }\n+\n+        Entry makeNoCRLF(String name) {\n+            return new Entry(name,\n+                Pattern.compile(System.lineSeparator()).matcher(pem).replaceAll(\"\"),\n+                clazz, password());\n+        }\n+    }\n+\n+    static public Entry getEntry(String varname) {\n+        return getEntry(passList, varname);\n+    }\n+\n+    static public Entry getEntry(List<Entry> list, String varname) {\n+        for (Entry entry : list) {\n+            if (entry.name.compareToIgnoreCase(varname) == 0) {\n+                return entry;\n+            }\n+        }\n+        return null;\n+    }\n+\n+    static List<Entry> passList = new ArrayList<>();\n+    static List<Entry> entryList = new ArrayList<>();\n+    static List<Entry> pubList = new ArrayList<>();\n+    static List<Entry> privList = new ArrayList<>();\n+    static List<Entry> oasList = new ArrayList<>();\n+    static List<Entry> certList = new ArrayList<>();\n+    static List<Entry> encryptedList = new ArrayList<>();\n+    static List<Entry> failureEntryList = new ArrayList<>();\n+\n+    static {\n+        pubList.add(rsapub);\n+        pubList.add(rsapubbc);\n+        pubList.add(ecsecp256pub.makeCR(\"ecsecp256pub-r\"));\n+        pubList.add(ecsecp256pub.makeCRLF(\"ecsecp256pub-rn\"));\n+        privList.add(rsapriv);\n+        privList.add(rsaprivbc);\n+        privList.add(ecsecp256);\n+        privList.add(ecsecp384);\n+        privList.add(ec25519priv);\n+        privList.add(ed25519ekpi);  \/\/ The non-EKPI version needs decryption\n+        privList.add(rsaOpenSSL);\n+        privList.add(ecsecp384);\n+        oasList.add(oasrfc8410);\n+        oasList.add(oasbcpem);\n+\n+        certList.add(rsaCert);\n+        certList.add(ecCert);\n+\n+        entryList.addAll(pubList);\n+        entryList.addAll(privList);\n+        entryList.addAll(oasList);\n+        entryList.addAll(certList);\n+\n+        encryptedList.add(ed25519ep8);\n+\n+        passList.addAll(entryList);\n+        passList.addAll(encryptedList);\n+\n+        failureEntryList.add(new Entry(\"emptyPEM\", \"\", DEREncodable.class, null));\n+        failureEntryList.add(new Entry(\"nullPEM\", null, DEREncodable.class, null));\n+    }\n+}\n\\ No newline at end of file\n","filename":"test\/jdk\/java\/security\/PEM\/PEMData.java","additions":388,"deletions":0,"binary":false,"changes":388,"status":"added"},{"patch":"@@ -29,0 +29,1 @@\n+ * @modules java.base\/sun.security.pkcs\n@@ -38,0 +39,1 @@\n+import java.security.spec.PKCS8EncodedKeySpec;\n@@ -46,3 +48,0 @@\n-    PEMDecoderTest() {\n-    }\n-\n@@ -51,1 +50,1 @@\n-        PEMCerts.entryList.forEach(PEMDecoderTest::test);\n+        PEMData.entryList.forEach(PEMDecoderTest::test);\n@@ -53,1 +52,1 @@\n-        PEMCerts.entryList.forEach(entry -> test(entry, DEREncodable.class));\n+        PEMData.entryList.forEach(entry -> test(entry, DEREncodable.class));\n@@ -55,1 +54,1 @@\n-        PEMCerts.encryptedList.forEach(PEMDecoderTest::testEncrypted);\n+        PEMData.encryptedList.forEach(PEMDecoderTest::testEncrypted);\n@@ -59,1 +58,1 @@\n-        test(PEMCerts.getEntry(\"privpem\"), RSAKey.class);\n+        test(PEMData.getEntry(\"rsapriv\"), RSAKey.class);\n@@ -61,9 +60,9 @@\n-        PEMCerts.failureEntryList.forEach(PEMDecoderTest::testFailure);\n-        System.out.println(\"Decoder test ECpriv PEM asking for ECPublicKey.class returned:\");\n-        testFailure(PEMCerts.getEntry(\"ecprivpem\"), ECPublicKey.class);\n-        System.out.println(\"Decoder test RSApriv PEM setting P8EKS.class returned:\");\n-        testClass(PEMCerts.getEntry(\"privpem\"), RSAPrivateKey.class);\n-        System.out.println(\"Decoder test RSApriv P1 PEM asking for RSAPublicKey.class returned:\");\n-        testFailure(PEMCerts.getEntry(PEMCerts.privList, \"rsaOpenSSL\"), RSAPublicKey.class);\n-        System.out.println(\"Decoder test RSApriv PEM asking X509EKS.class returned:\");\n-        testClass(PEMCerts.getEntry(\"privpem\"), X509EncodedKeySpec.class, false);\n+        PEMData.failureEntryList.forEach(PEMDecoderTest::testFailure);\n+        System.out.println(\"Decoder test ecsecp256 PEM asking for ECPublicKey.class returned:\");\n+        testFailure(PEMData.getEntry(\"ecsecp256\"), ECPublicKey.class);\n+        System.out.println(\"Decoder test rsapriv PEM setting P8EKS.class returned:\");\n+        testClass(PEMData.getEntry(\"rsapriv\"), RSAPrivateKey.class);\n+        System.out.println(\"Decoder test rsaOpenSSL P1 PEM asking for RSAPublicKey.class returned:\");\n+        testFailure(PEMData.getEntry(PEMData.privList, \"rsaOpenSSL\"), RSAPublicKey.class);\n+        System.out.println(\"Decoder test rsapriv PEM asking X509EKS.class returned:\");\n+        testClass(PEMData.getEntry(\"rsapriv\"), X509EncodedKeySpec.class, false);\n@@ -71,1 +70,1 @@\n-        testClass(PEMCerts.getEntry(\"rsaCert\"), X509EncodedKeySpec.class, false);\n+        testClass(PEMData.getEntry(\"rsaCert\"), X509EncodedKeySpec.class, false);\n@@ -73,4 +72,4 @@\n-        testClass(PEMCerts.getEntry(\"oasrfc8410\"), PrivateKey.class, true);\n-        testClass(PEMCerts.getEntry(\"oasrfc8410\"), PublicKey.class, true);\n-        System.out.println(\"Decoder test encEdECkey:\");\n-        testFailure(PEMCerts.pubecpem.makeNoCRLF(\"pubecpem-no\"));\n+        testClass(PEMData.getEntry(\"oasrfc8410\"), PrivateKey.class, true);\n+        testClass(PEMData.getEntry(\"oasrfc8410\"), PublicKey.class, true);\n+        System.out.println(\"Decoder test ecsecp256:\");\n+        testFailure(PEMData.ecsecp256pub.makeNoCRLF(\"pubecpem-no\"));\n@@ -79,3 +78,6 @@\n-        d.decode(PEMCerts.getEntry(\"rsaCert\").pem());\n-        System.out.println(\"Decoder test ECpriv with decryption Decoder:\");\n-        d.decode(PEMCerts.getEntry(\"ecprivpem\").pem());\n+        d.decode(PEMData.getEntry(\"rsaCert\").pem());\n+        System.out.println(\"Decoder test ecsecp256 with decryption Decoder:\");\n+        PrivateKey pkey = ((KeyPair)d.decode(PEMData.getEntry(\"ecsecp256\").pem())).getPrivate();\n+        System.out.println(\"Decoder test ecsecp256 to P8EKS:\");\n+        PKCS8EncodedKeySpec p8 = d.decode(PEMData.getEntry(\"ecsecp256\").pem(),\n+            PKCS8EncodedKeySpec.class);\n@@ -83,0 +85,7 @@\n+        System.out.println(\"Checking if decode() returns the same encoding:\");\n+        PEMData.privList.forEach(PEMDecoderTest::testDERCheck);\n+        PEMData.oasList.forEach(PEMDecoderTest::testDERCheck);\n+\n+        System.out.println(\"Signature\/Verify:\");\n+        PEMData.privList.forEach(PEMDecoderTest::testSignature);\n+        PEMData.oasList.forEach(PEMDecoderTest::testSignature);\n@@ -85,1 +94,1 @@\n-    static void testFailure(PEMCerts.Entry entry) {\n+    static void testFailure(PEMData.Entry entry) {\n@@ -89,1 +98,1 @@\n-    static void testFailure(PEMCerts.Entry entry, Class c) {\n+    static void testFailure(PEMData.Entry entry, Class c) {\n@@ -103,1 +112,1 @@\n-    static DEREncodable testEncrypted(PEMCerts.Entry entry) {\n+    static DEREncodable testEncrypted(PEMData.Entry entry) {\n@@ -118,1 +127,1 @@\n-    static DEREncodable test(PEMCerts.Entry entry, Class c) {\n+    static DEREncodable test(PEMData.Entry entry, Class c) {\n@@ -123,1 +132,1 @@\n-    static DEREncodable test(PEMCerts.Entry entry) {\n+    static DEREncodable test(PEMData.Entry entry) {\n@@ -161,2 +170,7 @@\n-    static DEREncodable test(String pem, Class clazz, PEMDecoder decoder) throws IOException {\n-        var pk = decoder.decode(pem);\n+    static DEREncodable test(String pem, Class clazz, PEMDecoder decoder)\n+        throws IOException {\n+        DEREncodable pk = decoder.decode(pem);\n+\n+        if (pk instanceof KeyPair kp) {\n+            pk = kp.getPrivate();\n+        }\n@@ -186,2 +200,2 @@\n-        p1 = pd.decode(PEMCerts.pubrsapem.pem(), RSAPublicKey.class);\n-        p2 = pd.decode(PEMCerts.pubrsapem.pem(), RSAPublicKey.class);\n+        p1 = pd.decode(PEMData.rsapub.pem(), RSAPublicKey.class);\n+        p2 = pd.decode(PEMData.rsapub.pem(), RSAPublicKey.class);\n@@ -192,2 +206,2 @@\n-            throw new AssertionError(\"Two decoding of the same key failed to\" +\n-                \" match: \");\n+            throw new AssertionError(\"Two decoding of the same\" +\n+                \" key failed to match: \");\n@@ -197,1 +211,1 @@\n-    static void testClass(PEMCerts.Entry entry, Class clazz) throws IOException {\n+    static void testClass(PEMData.Entry entry, Class clazz) throws IOException {\n@@ -201,1 +215,2 @@\n-    static void testClass(PEMCerts.Entry entry, Class clazz, boolean pass) throws RuntimeException {\n+    static void testClass(PEMData.Entry entry, Class clazz, boolean pass)\n+        throws RuntimeException {\n@@ -210,0 +225,81 @@\n+\n+    \/\/ Run test with a given Entry\n+    static void testDERCheck(PEMData.Entry entry) {\n+        if (entry.name().equals(\"rsaOpenSSL\") ||  \/\/ PKCS1 data\n+            entry.name().equals(\"ed25519ekpi\")) {\n+            return;\n+        }\n+\n+        PKCS8EncodedKeySpec p8 = PEMDecoder.of().decode(entry.pem(),\n+                PKCS8EncodedKeySpec.class);\n+        int result = Arrays.compare(entry.der(), p8.getEncoded());\n+        if (result != 0) {\n+            System.err.println(\"Compare error with \" + entry.name() + \"(\" +\n+                result + \")\");\n+            System.err.println(\"Expected DER: \" + HexFormat.of().\n+                formatHex(entry.der()));\n+            System.err.println(\"Returned DER: \" + HexFormat.of().\n+                formatHex(p8.getEncoded()));\n+                throw new AssertionError(\"Failed to match \" +\n+                \"expected DER\");\n+        }\n+        System.out.println(\"PASS (\" + entry.name() + \")\");\n+        System.out.flush();\n+    }\n+\n+    \/**\n+     * Run decoded keys through Signature to make sure they are valid keys\n+     *\/\n+    static void testSignature(PEMData.Entry entry) {\n+        Signature s;\n+        byte[] data = \"12345678\".getBytes();\n+        PrivateKey privateKey;\n+\n+        DEREncodable d = PEMDecoder.of().decode(entry.pem());\n+        switch (d) {\n+            case PrivateKey p -> privateKey = p;\n+            case KeyPair kp -> privateKey = kp.getPrivate();\n+            case EncryptedPrivateKeyInfo e -> {\n+                System.out.println(\"SKIP: EncryptedPrivateKeyInfo \" +\n+                    entry.name());\n+                return;\n+            }\n+            default -> throw new AssertionError(\"Private key \" +\n+                \"should not be null\");\n+        }\n+\n+        String algorithm = switch(privateKey.getAlgorithm()) {\n+            case \"EC\" -> \"SHA256withECDSA\";\n+            case \"EdDSA\" -> \"EdDSA\";\n+            case null -> {\n+                System.out.println(\"Algorithm is null \" +\n+                    entry.name());\n+                throw new AssertionError(\"PrivateKey algorithm\" +\n+                    \"should not be null\");\n+            }\n+            default -> \"SHA256with\" + privateKey.getAlgorithm();\n+        };\n+\n+        try {\n+            if (d instanceof PrivateKey) {\n+                s = Signature.getInstance(algorithm);\n+                s.initSign(privateKey);\n+                s.update(data);\n+                s.sign();\n+                System.out.println(\"PASS (Sign): \" + entry.name());\n+            } else if (d instanceof KeyPair) {\n+                s = Signature.getInstance(algorithm);\n+                s.initSign(privateKey);\n+                s.update(data);\n+                byte[] sig = s.sign();\n+                s.initVerify(((KeyPair)d).getPublic());\n+                s.verify(sig);\n+                System.out.println(\"PASS (Sign\/Verify): \" + entry.name());\n+            } else {\n+                System.out.println(\"SKIP: \" + entry.name());\n+            }\n+        } catch (Exception e) {\n+            System.out.println(\"FAIL: \" + entry.name());\n+            throw new AssertionError(e);\n+        }\n+    }\n","filename":"test\/jdk\/java\/security\/PEM\/PEMDecoderTest.java","additions":133,"deletions":37,"binary":false,"changes":170,"status":"modified"},{"patch":"@@ -56,2 +56,2 @@\n-        PEMCerts.entryList.remove(PEMCerts.getEntry(\"rsaOpenSSL\"));\n-        keymap = generateObjKeyMap(PEMCerts.entryList);\n+        PEMData.entryList.remove(PEMData.getEntry(\"rsaOpenSSL\"));\n+        keymap = generateObjKeyMap(PEMData.entryList);\n@@ -67,1 +67,1 @@\n-        keymap = generateObjKeyMap(PEMCerts.encryptedList);\n+        keymap = generateObjKeyMap(PEMData.encryptedList);\n@@ -86,1 +86,1 @@\n-    static Map generateObjKeyMap(List<PEMCerts.Entry> list) {\n+    static Map generateObjKeyMap(List<PEMData.Entry> list) {\n@@ -89,1 +89,1 @@\n-        for (PEMCerts.Entry entry : list) {\n+        for (PEMData.Entry entry : list) {\n@@ -95,1 +95,1 @@\n-                    keymap.put(entry.name(), pemd.decode(entry.pem()));\n+                    keymap.put(entry.name(), pemd.decode(entry.pem(), entry.clazz()));\n@@ -108,1 +108,1 @@\n-        PEMCerts.Entry entry = PEMCerts.getEntry(key);\n+        PEMData.Entry entry = PEMData.getEntry(key);\n@@ -122,1 +122,1 @@\n-        PEMCerts.Entry entry = PEMCerts.getEntry(key);\n+        PEMData.Entry entry = PEMData.getEntry(key);\n@@ -139,1 +139,1 @@\n-        PEMCerts.Entry entry = PEMCerts.getEntry(key);\n+        PEMData.Entry entry = PEMData.getEntry(key);\n@@ -158,1 +158,1 @@\n-        PEMCerts.Entry entry = PEMCerts.getEntry(key);\n+        PEMData.Entry entry = PEMData.getEntry(key);\n@@ -171,1 +171,1 @@\n-        PEMCerts.Entry entry = PEMCerts.getEntry(key);\n+        PEMData.Entry entry = PEMData.getEntry(key);\n@@ -192,1 +192,1 @@\n-    static void checkResults(PEMCerts.Entry entry, String result) {\n+    static void checkResults(PEMData.Entry entry, String result) {\n","filename":"test\/jdk\/java\/security\/PEM\/PEMEncoderTest.java","additions":12,"deletions":12,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -0,0 +1,82 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8298420\n+ * @summary Testing encryptKey\n+ * @enablePreview\n+ *\/\n+\n+import javax.crypto.EncryptedPrivateKeyInfo;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.PBEParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.security.AlgorithmParameters;\n+import java.security.PEMDecoder;\n+import java.security.PrivateKey;\n+import java.util.Arrays;\n+\n+public class EncryptKey {\n+\n+    private static final String encEdECKey =\n+        \"\"\"\n+        -----BEGIN ENCRYPTED PRIVATE KEY-----\n+        MIGqMGYGCSqGSIb3DQEFDTBZMDgGCSqGSIb3DQEFDDArBBRyYnoNyrcqvubzch00\n+        jyuAb5YizgICEAACARAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEAQIEEM8BgEgO\n+        vdMyi46+Dw7cOjwEQLtx5ME0NOOo7vlCGm3H\/4j+Tf5UXrMb1UrkPjqc8OiLbC0n\n+        IycFtI70ciPjgwDSjtCcPxR8fSxJPrm2yOJsRVo=\n+        -----END ENCRYPTED PRIVATE KEY-----\n+        \"\"\";\n+    private static final String passwdText = \"fish\";\n+    private static final char[] password = passwdText.toCharArray();\n+    private static final SecretKey key = new SecretKeySpec(\n+        passwdText.getBytes(), \"PBE\");\n+\n+    public static void main(String[] args) throws Exception {\n+        EncryptedPrivateKeyInfo ekpi = PEMDecoder.of().decode(encEdECKey,\n+            EncryptedPrivateKeyInfo.class);\n+        PrivateKey priKey = PEMDecoder.of().withDecryption(password).\n+            decode(encEdECKey, PrivateKey.class);\n+        AlgorithmParameters ap = ekpi.getAlgParameters();\n+\n+        \/\/ Test encryptKey(PrivateKey, char[], String, ... )\n+        var e = EncryptedPrivateKeyInfo.encryptKey(priKey, password,\n+            ekpi.getAlgName(), ap.getParameterSpec(PBEParameterSpec.class),\n+            null);\n+        if (!Arrays.equals(ekpi.getEncryptedData(), e.getEncryptedData())) {\n+            throw new AssertionError(\"encryptKey() didn't match\" +\n+                \" with expected.\");\n+        }\n+\n+        \/\/ Test encryptKey(PrivateKey, Key, String, ...)\n+        e = EncryptedPrivateKeyInfo.encryptKey(priKey, key, ekpi.getAlgName(),\n+            ap.getParameterSpec(PBEParameterSpec.class),null, null);\n+        if (!Arrays.equals(ekpi.getEncryptedData(), e.getEncryptedData())) {\n+            throw new AssertionError(\"encryptKey() didn't match\" +\n+                \" with expected.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/EncryptKey.java","additions":82,"deletions":0,"binary":false,"changes":82,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.  Oracle designates this\n+ * particular file as subject to the \"Classpath\" exception as provided\n+ * by Oracle in the LICENSE file that accompanied this code.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8298420\n+ * @summary Testing getKey\n+ * @enablePreview\n+ *\/\n+\n+import javax.crypto.EncryptedPrivateKeyInfo;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.security.PEMDecoder;\n+import java.security.PrivateKey;\n+import java.util.Arrays;\n+\n+public class GetKey {\n+\n+    private static final String encEdECKey =\n+        \"\"\"\n+        -----BEGIN ENCRYPTED PRIVATE KEY-----\n+        MIGqMGYGCSqGSIb3DQEFDTBZMDgGCSqGSIb3DQEFDDArBBRyYnoNyrcqvubzch00\n+        jyuAb5YizgICEAACARAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEAQIEEM8BgEgO\n+        vdMyi46+Dw7cOjwEQLtx5ME0NOOo7vlCGm3H\/4j+Tf5UXrMb1UrkPjqc8OiLbC0n\n+        IycFtI70ciPjgwDSjtCcPxR8fSxJPrm2yOJsRVo=\n+        -----END ENCRYPTED PRIVATE KEY-----\n+        \"\"\";\n+    private static final String passwdText = \"fish\";\n+    private static final char[] password = passwdText.toCharArray();\n+    private static final SecretKey key = new SecretKeySpec(\n+        passwdText.getBytes(), \"PBE\");\n+\n+    public static void main(String[] args) throws Exception {\n+        EncryptedPrivateKeyInfo ekpi = PEMDecoder.of().decode(encEdECKey,\n+            EncryptedPrivateKeyInfo.class);\n+        PrivateKey priKey = PEMDecoder.of().withDecryption(password).\n+            decode(encEdECKey, PrivateKey.class);\n+\n+        \/\/ Test getKey(password)\n+        if (!Arrays.equals(priKey.getEncoded(),\n+            ekpi.getKey(password).getEncoded())) {\n+            throw new AssertionError(\"getKey(char[]) didn't \"\n+                + \"match with expected.\");\n+        }\n+\n+        \/\/ Test getKey(key, provider)\n+        if (!Arrays.equals(priKey.getEncoded(),\n+            ekpi.getKey(key, null).getEncoded())) {\n+            throw new AssertionError(\"getKey(key, provider) \" +\n+                \"didn't match with expected.\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/javax\/crypto\/EncryptedPrivateKeyInfo\/GetKey.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}