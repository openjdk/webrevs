{"files":[{"patch":"@@ -117,1 +117,1 @@\n- * <p> Here is an example of a {@code PEMEncoder} configured with decryption\n+ * <p> Here is an example of a {@code PEMDecoder} configured with decryption\n@@ -120,1 +120,1 @@\n- *     PEMEncoder pe = PEMEncoder.of().withDecryption(password).\n+ *     PEMDecoder pe = PEMDecoder.of().withDecryption(password).\n@@ -122,1 +122,1 @@\n- *     byte[] pemData = pe.encode(privKey);\n+ *     byte[] pemData = pe.decode(privKey);\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMDecoder.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -277,1 +277,5 @@\n-        while ((c = is.read()) != eol && c != -1 && c != '\\r' && c != WS) {\n+        while ((c = is.read()) != eol && c != -1 && c != WS) {\n+            \/\/ skip when eol is '\\n', the line separator is likely \"\\r\\n\".\n+            if (c == '\\r') {\n+                continue;\n+            }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Pem.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -38,0 +38,1 @@\n+import java.nio.charset.StandardCharsets;\n@@ -140,0 +141,13 @@\n+        System.out.println(\"Check leadingData is null with back-to-back PEMs: \");\n+        String s = new PEMRecord(\"ONE\", \"1212\").toString()\n+            + new PEMRecord(\"TWO\", \"3434\").toString();\n+        var ins = new ByteArrayInputStream(s.getBytes(StandardCharsets.UTF_8));\n+        if (d.decode(ins, PEMRecord.class).leadingData() != null) {\n+            throw new AssertionError(\"leading data not null on first pem\");\n+        }\n+        if (d.decode(ins, PEMRecord.class).leadingData() != null) {\n+            throw new AssertionError(\"leading data not null on second pem\");\n+        }\n+        System.out.println(\"PASS\");\n+\n+        System.out.println(\"Decode to EncryptedPrivateKeyInfo: \");\n@@ -145,0 +159,1 @@\n+            System.out.println(\"PASS\");\n@@ -150,0 +165,1 @@\n+        System.out.println(\"EncryptedPrivateKeyInfo.encryptKey with PBE: \");\n@@ -154,0 +170,1 @@\n+            System.out.println(\"PASS\");\n@@ -159,0 +176,1 @@\n+        System.out.println(\"EncryptedPrivateKeyInfo.encryptKey with default: \");\n@@ -163,0 +181,1 @@\n+            System.out.println(\"PASS\");\n","filename":"test\/jdk\/java\/security\/PEM\/PEMDecoderTest.java","additions":19,"deletions":0,"binary":false,"changes":19,"status":"modified"}]}