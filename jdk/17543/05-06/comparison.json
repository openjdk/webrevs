{"files":[{"patch":"@@ -43,1 +43,1 @@\n- * PEMDecoder is an immutable Privacy-Enhanced Mail (PEM) decoding class.\n+ * {@code PEMDecoder} is an immutable Privacy-Enhanced Mail (PEM) decoding class.\n@@ -52,2 +52,2 @@\n- * If a return class is specified, an IllegalAlgorithmException is thrown if\n- * data is not valid for the class.\n+ * If a return class is specified, an {@link IllegalArgumentException}\n+ * is thrown if data is not valid for the class.\n@@ -55,3 +55,3 @@\n- * When passing input data into {@code decode}, the application is responsible\n- * for processing input data non-PEM text. All data before the PEM\n- * header will be ignored.\n+ * When passing input data into any {@code decode} methods, any non-PEM data\n+ * prior to the PEM header will be ignored.  If that data is important to the\n+ * application, it should be parsed before decoding.\n@@ -59,1 +59,1 @@\n- * A new immutable PEMDecoder instance is returned by\n+ * A new immutable {@code PEMDecoder} instance is returned by\n@@ -67,1 +67,1 @@\n- * PEMDecoder supports the follow types:\n+ * {@code PEMDecoder} supports the follow types:\n@@ -91,1 +91,2 @@\n-     * Creates a immutable instance with a specific KeyFactory and\/or password.\n+     * Creates an immutable instance with a specific KeyFactory and\/or\n+     * password.\n@@ -102,1 +103,1 @@\n-     * Returns an instance of PEMDecoder.  This instance may be repeatedly used\n+     * Returns an instance of {@code PEMDecoder}.  This instance may be repeatedly used\n@@ -105,1 +106,1 @@\n-     * @return returns a PEMDecoder\n+     * @return returns a {@code PEMDecoder}\n@@ -197,1 +198,2 @@\n-     * The method will read the {@code InputStream} until PEM data is\n+     *\n+     * <p>The method will read the {@code InputStream} until PEM data is\n@@ -356,2 +358,7 @@\n-     * Configures and return a new PEMDecoder instance from the current instance\n-     * that will use Factory classes from the specified Provider.\n+     * Configures and returns a new {@code PEMDecoder} instance from the\n+     * current instance that will use Factory classes from the specified\n+     * {@link Provider}.  Any errors using the {@code provider} will occur\n+     * during decoding.\n+     *\n+     * <p>If {@code params} is {@code null}, a new instance is returned with\n+     * the default provider configuration.\n@@ -367,2 +374,2 @@\n-     * Returns a new PEMDecoder instance from the current instance configured\n-     * to decrypt encrypted PEM data with given password.\n+     * Returns a new {@code PEMDecoder} instance from the current instance\n+     * configured to decrypt encrypted PEM data with given password.\n@@ -371,1 +378,2 @@\n-     * @param password the password to decrypt encrypted PEM data.\n+     * @param password the password to decrypt encrypted PEM data.  This array\n+     *                 is cloned and stored in the new instance.\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMDecoder.java","additions":25,"deletions":17,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -153,2 +153,2 @@\n-            case PublicKey pu -> build(null, pu.getEncoded());\n-            case PrivateKey pr -> build(pr.getEncoded(), null);\n+            case PublicKey pu -> buildKey(null, pu.getEncoded());\n+            case PrivateKey pr -> buildKey(pr.getEncoded(), null);\n@@ -165,1 +165,1 @@\n-                yield build(kp.getPrivate().getEncoded(),\n+                yield buildKey(kp.getPrivate().getEncoded(),\n@@ -168,2 +168,4 @@\n-            case X509EncodedKeySpec x -> build(null, x.getEncoded());\n-            case PKCS8EncodedKeySpec p -> build(p.getEncoded(), null);\n+            case X509EncodedKeySpec x ->\n+                buildKey(null, x.getEncoded());\n+            case PKCS8EncodedKeySpec p ->\n+                buildKey(p.getEncoded(), null);\n@@ -180,0 +182,4 @@\n+                    if (isEncrypted()) {\n+                        throw new IllegalArgumentException(\"Certificates \" +\n+                            \"cannot be encrypted\");\n+                    }\n@@ -188,0 +194,4 @@\n+                    if (isEncrypted()) {\n+                        throw new IllegalArgumentException(\"CRLs cannot be \" +\n+                            \"encrypted\");\n+                    }\n@@ -200,1 +210,1 @@\n-     * Encoded a given {@code DEREncodable} into PEM.\n+     * Encodes a given {@code DEREncodable} into PEM.\n@@ -229,1 +239,2 @@\n-     * @param password the password\n+     * @param password sets the encryption password.  The array is cloned and\n+     *                stored in the new instance.\n@@ -235,0 +246,1 @@\n+        Objects.requireNonNull(password);\n@@ -241,1 +253,1 @@\n-    private String build(byte[] privateBytes, byte[] publicBytes) {\n+    private String buildKey(byte[] privateBytes, byte[] publicBytes) {\n@@ -245,0 +257,5 @@\n+        if (privateBytes == null && publicBytes == null) {\n+            throw new IllegalArgumentException(\"No encoded data given by the \" +\n+                \"DEREncodable.\");\n+        }\n+\n@@ -300,0 +317,5 @@\n+            if (publicBytes.length == 0) {\n+                throw new IllegalArgumentException(\"No public key encoding \" +\n+                    \"given by the DEREncodable.\");\n+            }\n+\n@@ -302,0 +324,1 @@\n+\n@@ -304,0 +327,5 @@\n+            if (privateBytes.length == 0) {\n+                throw new IllegalArgumentException(\"No private key encoding \" +\n+                    \"given by the DEREncodable.\");\n+            }\n+\n@@ -307,0 +335,1 @@\n+\n@@ -309,0 +338,10 @@\n+            if (privateBytes.length == 0) {\n+                throw new IllegalArgumentException(\"No private key encoding \" +\n+                    \"given by the DEREncodable.\");\n+            }\n+\n+            if (publicBytes.length == 0) {\n+                throw new IllegalArgumentException(\"No public key encoding \" +\n+                    \"given by the DEREncodable.\");\n+            }\n+\n@@ -315,0 +354,4 @@\n+\n+    private boolean isEncrypted() {\n+        return (key != null || keySpec != null);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/security\/PEMEncoder.java","additions":51,"deletions":8,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509CRL.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/java\/security\/cert\/X509Certificate.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -337,1 +337,2 @@\n-     * @throws IllegalArgumentException when arguments passed are incorrect.\n+     * @throws IllegalArgumentException on initialization errors based on the\n+     * arguments passed to the method.\n@@ -339,1 +340,2 @@\n-     * @throws NullPointerException if an argument passed in is unexpectedly null.\n+     * @throws NullPointerException if an argument passed in is unexpectedly\n+     * null.\n@@ -378,2 +380,3 @@\n-        } catch (InvalidAlgorithmParameterException |\n-                 IllegalBlockSizeException | BadPaddingException |\n+        } catch (InvalidAlgorithmParameterException e) {\n+            throw new IllegalArgumentException(e);\n+        } catch (IllegalBlockSizeException | BadPaddingException |\n@@ -397,1 +400,2 @@\n-     * @param password the password used in the PBE encryption.\n+     * @param password the password used in the PBE encryption.  This array is\n+     *                 cloned before being used.\n@@ -399,2 +403,4 @@\n-     * @throws IllegalArgumentException when arguments passed are incorrect.\n-     * @throws SecurityException on a cryptographic errors.\n+     * @throws IllegalArgumentException on initialization errors based on the\n+     * arguments passed to the method.\n+     * @throws SecurityException on a encryption errors.\n+     * @throws NullPointerException when the password is null.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/EncryptedPrivateKeyInfo.java","additions":13,"deletions":7,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -67,1 +67,1 @@\n-    \/* The key bytes, without the algorithm information *\/\n+    \/* The key bytes in octet form for the algorithm subclasses to decode *\/\n@@ -70,1 +70,1 @@\n-    \/* The encoded for the key. Created on demand by encode(). *\/\n+    \/* The pkcs8 encoding of this key(s). Created on demand. *\/\n","filename":"src\/java.base\/share\/classes\/sun\/security\/pkcs\/PKCS8Key.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/KeyProtector.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -53,0 +53,3 @@\n+        if (pem == null) {\n+            throw new IllegalArgumentException(\"failed\");\n+        }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/PEMRecord.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -257,1 +257,1 @@\n-            throw new IOException(\"Illegal footer: \" + footer);\n+            throw new IllegalArgumentException(\"Illegal footer: \" + footer);\n@@ -264,2 +264,2 @@\n-            throw new IOException(\"Header and footer do not match: \" +\n-                headerType + \" \" + footerType);\n+            throw new IllegalArgumentException(\"Header and footer do not \" +\n+                \"match: \" + headerType + \" \" + footerType);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Pem.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -205,0 +205,1 @@\n+\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AlgorithmId.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}