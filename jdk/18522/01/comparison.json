{"files":[{"patch":"@@ -1312,1 +1312,1 @@\n-            return new AbstractSet<>() {\n+            return new AbstractImmutableSet<>() {\n@@ -1322,0 +1322,5 @@\n+\n+                @Override\n+                public int hashCode() {\n+                    return MapN.this.hashCode();\n+                }\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1330,0 +1330,1 @@\n+        check(m.hashCode() == m.entrySet().hashCode());\n","filename":"test\/jdk\/java\/util\/Collection\/MOAT.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -504,0 +504,30 @@\n+    @Test(expectedExceptions=UnsupportedOperationException.class)\n+    public void immutableEntrySetAddAllDisallowed() {\n+        Map.of().entrySet().addAll(List.of());\n+    }\n+\n+    @Test(expectedExceptions=UnsupportedOperationException.class)\n+    public void immutableEntrySetClearDisallowed() {\n+        Map.of().entrySet().clear();\n+    }\n+\n+    @Test(expectedExceptions=UnsupportedOperationException.class)\n+    public void immutableEntrySetRemoveDisallowed() {\n+        Map.of().entrySet().remove(\"x\");\n+    }\n+\n+    @Test(expectedExceptions=UnsupportedOperationException.class)\n+    public void immutableEntrySetRemoveIfDisallowed() {\n+        Map.of().entrySet().removeIf(x -> false);\n+    }\n+\n+    @Test(expectedExceptions=UnsupportedOperationException.class)\n+    public void immutableEntrySetRemoveAllDisallowed() {\n+        Map.of().entrySet().removeAll(List.of());\n+    }\n+\n+    @Test(expectedExceptions=UnsupportedOperationException.class)\n+    public void immutableEntrySetRetainAllDisallowed() {\n+        Map.of().entrySet().retainAll(List.of());\n+    }\n+\n","filename":"test\/jdk\/java\/util\/Map\/MapFactories.java","additions":30,"deletions":0,"binary":false,"changes":30,"status":"modified"}]}