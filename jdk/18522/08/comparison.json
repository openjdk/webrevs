{"files":[{"patch":"@@ -1122,0 +1122,10 @@\n+        @Override\n+        public Set<K> keySet() {\n+            return Set.of(k0);\n+        }\n+\n+        @Override\n+        public Collection<V> values() {\n+            return List.of(v0);\n+        }\n+\n@@ -1312,1 +1322,1 @@\n-            return new AbstractSet<>() {\n+            return new AbstractImmutableSet<>() {\n@@ -1322,0 +1332,5 @@\n+\n+                @Override\n+                public int hashCode() {\n+                    return MapN.this.hashCode();\n+                }\n@@ -1325,0 +1340,53 @@\n+        @Override\n+        public Set<K> keySet() {\n+            Set<K> ks = keySet;\n+            if (ks == null) {\n+                ks = new AbstractImmutableSet<>() {\n+                    @Override\n+                    public int size() {\n+                        return MapN.this.size;\n+                    }\n+\n+                    @Override\n+                    public Iterator<K> iterator() {\n+                        return new KeyIterator();\n+                    }\n+\n+                    @Override\n+                    public int hashCode() {\n+                        int hash = 0;\n+                        for (int i = 0; i < table.length; i += 2) {\n+                            Object k = table[i];\n+                            if (k != null) {\n+                                hash += k.hashCode();\n+                            }\n+                        }\n+                        return hash;\n+                    }\n+                };\n+                keySet = ks;\n+            }\n+            return ks;\n+        }\n+\n+        @Override\n+        public Collection<V> values() {\n+            Collection<V> vals = values;\n+            if (vals == null) {\n+                vals = new AbstractImmutableCollection<>() {\n+                    @Override\n+                    public int size() {\n+                        return MapN.this.size;\n+                    }\n+\n+                    @Override\n+                    public Iterator<V> iterator() {\n+                        return new ValueIterator();\n+                    }\n+                };\n+                values = vals;\n+            }\n+            return vals;\n+        }\n+\n+\n","filename":"src\/java.base\/share\/classes\/java\/util\/ImmutableCollections.java","additions":69,"deletions":1,"binary":false,"changes":70,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,2 +125,2 @@\n- * cannot be added, removed, or updated. Calling any mutator method on the Map\n- * will always cause {@code UnsupportedOperationException} to be thrown.\n+ * cannot be added, removed, or updated. Calling any mutator method on the Map or any derived view\n+ * collection will always cause {@code UnsupportedOperationException} to be thrown.\n","filename":"src\/java.base\/share\/classes\/java\/util\/Map.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n- *          4802647 7123424 8024709 8193128\n+ *          4802647 7123424 8024709 8193128 8328821\n@@ -357,0 +357,3 @@\n+        testEmptyCollMutatorsAlwaysThrow(Map.of().entrySet());\n+        testEmptyCollMutatorsAlwaysThrow(Map.of().keySet());\n+        testEmptyCollMutatorsAlwaysThrow(Map.of().values());\n@@ -373,0 +376,3 @@\n+            testCollMutatorsAlwaysThrow(map.entrySet(), Map.entry(42, 43));\n+            testCollMutatorsAlwaysThrow(map.keySet());\n+            testCollMutatorsAlwaysThrow(map.values());\n@@ -535,0 +541,4 @@\n+        testCollMutatorsAlwaysThrow(c, ABSENT_VALUE);\n+    }\n+\n+    private static <T> void testCollMutatorsAlwaysThrow(Collection<T> c, T t) {\n@@ -537,1 +547,1 @@\n-                () -> c.remove(ABSENT_VALUE),\n+                () -> c.remove(t),\n@@ -549,1 +559,1 @@\n-    private static void testEmptyCollMutatorsAlwaysThrow(Collection<Integer> c) {\n+    private static void testEmptyCollMutatorsAlwaysThrow(Collection<?> c) {\n@@ -1330,0 +1340,2 @@\n+        check(m.hashCode() == m.entrySet().hashCode());\n+        check(Set.copyOf(m.keySet()).hashCode() == m.keySet().hashCode());\n","filename":"test\/jdk\/java\/util\/Collection\/MOAT.java","additions":15,"deletions":3,"binary":false,"changes":18,"status":"modified"}]}