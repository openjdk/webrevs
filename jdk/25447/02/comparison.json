{"files":[{"patch":"@@ -32,1 +32,1 @@\n-  _biased_base(nullptr),\n+  _biased_base(0),\n@@ -54,1 +54,1 @@\n-  guarantee(_biased_base != nullptr, \"Array not initialized\");\n+  guarantee(_biased_base != 0, \"Array not initialized\");\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,1 +52,1 @@\n-    _biased_base = base - (bias * elem_size);\n+    _biased_base = (uintptr_t)base - (bias * elem_size);\n@@ -63,1 +63,1 @@\n-  address _biased_base;   \/\/ base address biased by \"bias\" elements\n+  uintptr_t _biased_base; \/\/ base address biased by \"bias\" elements\n@@ -105,1 +105,1 @@\n-  T* base() const { return (T*)G1BiasedMappedArrayBase::_base; }\n+  T* base() const { return (T*)this->_base; }\n@@ -107,2 +107,1 @@\n-  \/\/ The raw biased base pointer.\n-  T* biased_base() const { return (T*)G1BiasedMappedArrayBase::_biased_base; }\n+  T* biased_base_at(idx_t index) const { return (T*)(this->_biased_base + index * sizeof(T)); }\n@@ -134,1 +133,1 @@\n-    return biased_base()[biased_index];\n+    return *biased_base_at(biased_index);\n@@ -154,1 +153,1 @@\n-    biased_base()[biased_index] = value;\n+    *biased_base_at(biased_index) = value;\n@@ -183,1 +182,1 @@\n-    this->clear();\n+    clear();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1BiasedArray.hpp","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +51,1 @@\n-  nonstatic_field(G1HeapRegionTable, _biased_base,      address)              \\\n+  nonstatic_field(G1HeapRegionTable, _biased_base,      uintptr_t)            \\\n","filename":"src\/hotspot\/share\/gc\/g1\/vmStructs_g1.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,1 +29,1 @@\n-    guarantee(_biased_base != nullptr, \"Array not initialized\");\n+    guarantee(_biased_base != 0, \"Array not initialized\");\n@@ -40,1 +40,0 @@\n-  \/\/ Returns the address of the element the given address maps to\n@@ -44,1 +43,1 @@\n-    return biased_base() + biased_index;\n+    return biased_base_at(biased_index);\n@@ -48,3 +47,0 @@\n-\n-  \/\/ The raw biased base pointer.\n-  int* biased_base() const { return G1BiasedMappedArray<int>::biased_base(); }\n","filename":"test\/hotspot\/gtest\/gc\/g1\/test_g1BiasedArray.cpp","additions":2,"deletions":6,"binary":false,"changes":8,"status":"modified"}]}