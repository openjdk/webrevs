{"files":[{"patch":"@@ -1223,4 +1223,0 @@\n-void java_lang_Class::set_signers(oop java_class, objArrayOop signers) {\n-  assert(_signers_offset != 0, \"must be set\");\n-  java_class->obj_field_put(_signers_offset, signers);\n-}\n@@ -1421,6 +1417,8 @@\n-  macro(_classRedefinedCount_offset, k, \"classRedefinedCount\", int_signature,         false); \\\n-  macro(_class_loader_offset,        k, \"classLoader\",         classloader_signature, false); \\\n-  macro(_component_mirror_offset,    k, \"componentType\",       class_signature,       false); \\\n-  macro(_module_offset,              k, \"module\",              module_signature,      false); \\\n-  macro(_name_offset,                k, \"name\",                string_signature,      false); \\\n-  macro(_classData_offset,           k, \"classData\",           object_signature,      false);\n+  macro(_classRedefinedCount_offset, k, \"classRedefinedCount\", int_signature,              false); \\\n+  macro(_class_loader_offset,        k, \"classLoader\",         classloader_signature,      false); \\\n+  macro(_component_mirror_offset,    k, \"componentType\",       class_signature,            false); \\\n+  macro(_module_offset,              k, \"module\",              module_signature,           false); \\\n+  macro(_name_offset,                k, \"name\",                string_signature,           false); \\\n+  macro(_classData_offset,           k, \"classData\",           object_signature,           false); \\\n+  macro(_signers_offset,             k, \"signers\",             object_array_signature,     false); \\\n+  macro(_protection_domain_offset,   k, \"protectionDomain\",    protectiondomain_signature, false);\n@@ -4588,1 +4586,1 @@\n-  macro(_context_offset,           k, \"context\",      protectiondomain_signature, false); \\\n+  macro(_context_offset,           k, \"context\",      protectiondomain_array_signature, false); \\\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.cpp","additions":9,"deletions":11,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -210,2 +210,0 @@\n-  macro(java_lang_Class, protection_domain,      object_signature,  false) \\\n-  macro(java_lang_Class, signers,                object_signature,  false) \\\n@@ -303,1 +301,0 @@\n-  static void set_signers(oop java_class, objArrayOop signers);\n","filename":"src\/hotspot\/share\/classfile\/javaClasses.hpp","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -601,1 +601,2 @@\n-  template(protectiondomain_signature,                \"[Ljava\/security\/ProtectionDomain;\")                        \\\n+  template(protectiondomain_signature,                \"Ljava\/security\/ProtectionDomain;\")                         \\\n+  template(protectiondomain_array_signature,          \"[Ljava\/security\/ProtectionDomain;\")                        \\\n","filename":"src\/hotspot\/share\/classfile\/vmSymbols.hpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -555,9 +555,0 @@\n-JNIEXPORT jobjectArray JNICALL\n-JVM_GetClassSigners(JNIEnv *env, jclass cls);\n-\n-JNIEXPORT void JNICALL\n-JVM_SetClassSigners(JNIEnv *env, jclass cls, jobjectArray signers);\n-\n-JNIEXPORT jobject JNICALL\n-JVM_GetProtectionDomain(JNIEnv *env, jclass cls);\n-\n","filename":"src\/hotspot\/share\/include\/jvm.h","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -1255,56 +1255,0 @@\n-JVM_ENTRY(jobjectArray, JVM_GetClassSigners(JNIEnv *env, jclass cls))\n-  JvmtiVMObjectAllocEventCollector oam;\n-  oop mirror = JNIHandles::resolve_non_null(cls);\n-  if (java_lang_Class::is_primitive(mirror)) {\n-    \/\/ There are no signers for primitive types\n-    return nullptr;\n-  }\n-\n-  objArrayHandle signers(THREAD, java_lang_Class::signers(mirror));\n-\n-  \/\/ If there are no signers set in the class, or if the class\n-  \/\/ is an array, return null.\n-  if (signers == nullptr) return nullptr;\n-\n-  \/\/ copy of the signers array\n-  Klass* element = ObjArrayKlass::cast(signers->klass())->element_klass();\n-  objArrayOop signers_copy = oopFactory::new_objArray(element, signers->length(), CHECK_NULL);\n-  for (int index = 0; index < signers->length(); index++) {\n-    signers_copy->obj_at_put(index, signers->obj_at(index));\n-  }\n-\n-  \/\/ return the copy\n-  return (jobjectArray) JNIHandles::make_local(THREAD, signers_copy);\n-JVM_END\n-\n-\n-JVM_ENTRY(void, JVM_SetClassSigners(JNIEnv *env, jclass cls, jobjectArray signers))\n-  oop mirror = JNIHandles::resolve_non_null(cls);\n-  if (!java_lang_Class::is_primitive(mirror)) {\n-    \/\/ This call is ignored for primitive types and arrays.\n-    \/\/ Signers are only set once, ClassLoader.java, and thus shouldn't\n-    \/\/ be called with an array.  Only the bootstrap loader creates arrays.\n-    Klass* k = java_lang_Class::as_Klass(mirror);\n-    if (k->is_instance_klass()) {\n-      java_lang_Class::set_signers(k->java_mirror(), objArrayOop(JNIHandles::resolve(signers)));\n-    }\n-  }\n-JVM_END\n-\n-\n-JVM_ENTRY(jobject, JVM_GetProtectionDomain(JNIEnv *env, jclass cls))\n-  oop mirror = JNIHandles::resolve_non_null(cls);\n-  if (mirror == nullptr) {\n-    THROW_(vmSymbols::java_lang_NullPointerException(), nullptr);\n-  }\n-\n-  if (java_lang_Class::is_primitive(mirror)) {\n-    \/\/ Primitive types does not have a protection domain.\n-    return nullptr;\n-  }\n-\n-  oop pd = java_lang_Class::protection_domain(mirror);\n-  return (jobject) JNIHandles::make_local(THREAD, pd);\n-JVM_END\n-\n-\n","filename":"src\/hotspot\/share\/prims\/jvm.cpp","additions":0,"deletions":56,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -59,0 +59,1 @@\n+import java.security.ProtectionDomain;\n@@ -239,1 +240,1 @@\n-    private Class(ClassLoader loader, Class<?> arrayComponentType) {\n+    private Class(ClassLoader loader, Class<?> arrayComponentType, ProtectionDomain pd) {\n@@ -244,0 +245,1 @@\n+        protectionDomain = pd;\n@@ -1108,7 +1110,5 @@\n-    \/\/ Initialized in JVM not by private constructor\n-    \/\/ This field is filtered from reflection access, i.e. getDeclaredField\n-    \/\/ will throw NoSuchFieldException\n-    private final ClassLoader classLoader;\n-\n-    \/\/ Set by VM\n-    private transient Object classData;\n+    \/\/ Final fields are initialized in JVM not by private constructor\n+    private final ClassLoader classLoader; \/\/ Set by VM\n+    private final transient ProtectionDomain protectionDomain; \/\/ Set by VM\n+    private transient Object classData; \/\/ Set by VM\n+    private transient Object[] signers; \/\/ Read by VM, mutable\n@@ -1513,1 +1513,4 @@\n-    public native Object[] getSigners();\n+    public Object[] getSigners() {\n+        var signers = this.signers;\n+        return signers == null ? null : signers.clone();\n+    }\n@@ -1519,1 +1522,5 @@\n-    native void setSigners(Object[] signers);\n+    void setSigners(Object[] signers) {\n+        if (!isPrimitive() && !isArray()) {\n+            this.signers = signers;\n+        }\n+    }\n@@ -3270,1 +3277,3 @@\n-    private native java.security.ProtectionDomain getProtectionDomain0();\n+    ProtectionDomain getProtectionDomain0() {\n+        return isPrimitive() ? null : protectionDomain;\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Class.java","additions":20,"deletions":11,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -2606,2 +2606,2 @@\n-            public ProtectionDomain protectionDomain(Class<?> c) {\n-                return c.protectionDomain();\n+            public ProtectionDomain protectionDomain(Class<?> c, boolean raw) {\n+                return raw ? c.getProtectionDomain0() : c.protectionDomain();\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2519,1 +2519,1 @@\n-                cachedProtectionDomain = pd = SharedSecrets.getJavaLangAccess().protectionDomain(lookupClass);\n+                cachedProtectionDomain = pd = SharedSecrets.getJavaLangAccess().protectionDomain(lookupClass, false);\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/MethodHandles.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import jdk.internal.access.JavaLangAccess;\n+import jdk.internal.access.SharedSecrets;\n@@ -667,1 +669,6 @@\n-    private static native ProtectionDomain getProtectionDomain(final Class<?> caller);\n+    private static ProtectionDomain getProtectionDomain(final Class<?> caller) {\n+        class Lazy {\n+            static final JavaLangAccess JLA = SharedSecrets.getJavaLangAccess();\n+        }\n+        return Lazy.JLA.protectionDomain(caller, true);\n+    }\n","filename":"src\/java.base\/share\/classes\/java\/security\/AccessController.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -426,1 +426,3 @@\n-     * Get protection domain of the given Class\n+     * Get protection domain of the given Class bypassing SecurityManager.\n+     * If {@code raw}, returns {@link Class#getProtectionDomain0()} instead of\n+     * {@link Class#getProtectionDomain()}\n@@ -428,1 +430,1 @@\n-    ProtectionDomain protectionDomain(Class<?> c);\n+    ProtectionDomain protectionDomain(Class<?> c, boolean raw);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/access\/JavaLangAccess.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1997, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1997, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,9 +37,0 @@\n-JNIEXPORT jobject JNICALL\n-Java_java_security_AccessController_getProtectionDomain(\n-                                                              JNIEnv *env,\n-                                                              jclass cls,\n-                                                              jclass caller)\n-{\n-    return JVM_GetProtectionDomain(env, caller);\n-}\n-\n","filename":"src\/java.base\/share\/native\/libjava\/AccessController.c","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -61,2 +61,0 @@\n-    {\"getSigners\",       \"()[\" OBJ,         (void *)&JVM_GetClassSigners},\n-    {\"setSigners\",       \"([\" OBJ \")V\",     (void *)&JVM_SetClassSigners},\n@@ -70,1 +68,0 @@\n-    {\"getProtectionDomain0\", \"()\" PD,       (void *)&JVM_GetProtectionDomain},\n","filename":"src\/java.base\/share\/native\/libjava\/Class.c","additions":0,"deletions":3,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,4 +58,0 @@\n-  \/\/ See if mirror injected fields are printed.\n-  oop mirror = vmClasses::ClassLoader_klass()->java_mirror();\n-  mirror->print_on(&st);\n-  ASSERT_THAT(st.base(), HasSubstr(\"injected 'protection_domain'\")) << \"Must contain injected fields\";\n","filename":"test\/hotspot\/gtest\/oops\/test_instanceKlass.cpp","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,0 +39,1 @@\n+import java.security.ProtectionDomain;\n@@ -150,1 +151,1 @@\n-            = Class.class.getDeclaredConstructor(ClassLoader.class, Class.class);\n+            = Class.class.getDeclaredConstructor(ClassLoader.class, Class.class, ProtectionDomain.class);\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessibleObject\/ModuleSetAccessibleTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -40,0 +40,1 @@\n+import java.security.ProtectionDomain;\n@@ -196,1 +197,1 @@\n-            = Class.class.getDeclaredConstructor(ClassLoader.class, Class.class);\n+            = Class.class.getDeclaredConstructor(ClassLoader.class, Class.class, ProtectionDomain.class);\n","filename":"test\/jdk\/java\/lang\/reflect\/AccessibleObject\/TrySetAccessibleTest.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"}]}