{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ *      8354344\n@@ -32,1 +33,15 @@\n- * @run junit ValidateISO4217\n+ * @library \/test\/lib\n+ * @run junit\/othervm -DMOCKED.TIME=setup ValidateISO4217\n+ * @run main\/othervm --patch-module java.base=${test.class.path}\n+ *      -DMOCKED.TIME=check -Djava.util.currency.data=${test.src}\/currency.properties ValidateISO4217\n+ * @run junit\/othervm --patch-module java.base=${test.class.path}\n+ *      -DMOCKED.TIME=true ValidateISO4217\n+ *\/\n+\n+\/* The run invocation order is important. The first invocation will generate\n+ * class files for Currency that mock System.currentTimeMillis() as Long.MAX_VALUE,\n+ * which is required by the subsequent invocations. The second invocation ensures that\n+ * the module patch and mocked time are functioning correctly; it does not run any tests.\n+ * The third invocation using the modded class files via a module patch allow us\n+ * to test any cut-over dates after the transition.\n+ * Valid MOCKED.TIME values are \"setup\", \"check\", and \"true\".\n@@ -37,0 +52,1 @@\n+import java.io.FileOutputStream;\n@@ -38,0 +54,9 @@\n+import java.io.IOException;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n@@ -41,0 +66,1 @@\n+import java.util.Arrays;\n@@ -48,0 +74,1 @@\n+import java.util.stream.Stream;\n@@ -116,0 +143,75 @@\n+    private static final String MODULE_PATCH_LOCATION =\n+            System.getProperty(\"test.classes\") + \"\/java\/util\/\";\n+    private static final String MOCKED_TIME = System.getProperty(\"MOCKED.TIME\");\n+\n+    \/\/ Classes that should mock System.currentTimeMillis()\n+    private static final String[] CLASSES =\n+            Stream.concat(\n+                Stream.of(\"Currency.class\"),\n+                Arrays.stream(Currency.class.getDeclaredClasses())\n+                        .map(c -> \"Currency$\" + c.getSimpleName() + \".class\")\n+            ).toArray(String[]::new);\n+\n+    \/\/ \"check\" invocation only runs the main method (and not any tests) to determine if the\n+    \/\/ future time checking is correct\n+    public static void main(String[] args) {\n+        \/\/ Override for PK in test\/currency.properties is JPZ (in year 3000)\n+        if (MOCKED_TIME.equals(\"check\")) {\n+            if (!Currency.getInstance(Locale.of(\"\", \"PK\")).getCurrencyCode().equals(\"JPZ\")) {\n+                throw new RuntimeException(\n+                        \"Module patch and or mocked time is not functioning correctly\");\n+            } else {} \/\/ Properly working. Do nothing and move to third invocation\n+        } else {\n+            throw new RuntimeException(\n+                    \"Incorrect usage of ValidateISO4217. Main method invoked without proper system property value\");\n+        }\n+    }\n+\n+    @BeforeAll\n+    static void setUp() throws Exception {\n+        checkUsage();\n+        setUpPatchedClasses();\n+        setUpTestingData();\n+    }\n+\n+    \/\/ Enforce correct usage of ValidateISO4217\n+    static void checkUsage() {\n+        if (MOCKED_TIME == null\n+                || (!MOCKED_TIME.equals(\"setup\") && !MOCKED_TIME.equals(\"true\"))) {\n+            throw new RuntimeException(\n+                    \"Incorrect usage of ValidateISO4217. Missing \\\"MOCKED.TIME\\\" system property\");\n+        }\n+    }\n+\n+    \/\/ Patch the relevant classes required for module patch\n+    static void setUpPatchedClasses() throws IOException {\n+        if (MOCKED_TIME.equals(\"setup\")) {\n+            new File(MODULE_PATCH_LOCATION).mkdirs();\n+            for (String s : CLASSES) {\n+                patchClass(s);\n+            }\n+        }\n+    }\n+\n+    \/\/ Mock calls of System.currentTimeMillis() within Currency to Long.MAX_VALUE.\n+    \/\/ This effectively ensures that we are always past any cut-over dates.\n+    private static void patchClass(String name) throws IOException {\n+        CodeTransform codeTransform = (codeBuilder, e) -> {\n+            switch (e) {\n+                case InvokeInstruction i when i.name().stringValue().equals(\"currentTimeMillis\") ->\n+                        codeBuilder.loadConstant(Long.MAX_VALUE); \/\/ mock\n+                default -> codeBuilder.accept(e);\n+            }\n+        };\n+        MethodTransform methodTransform = MethodTransform.transformingCode(codeTransform);\n+        ClassTransform classTransform = ClassTransform.transformingMethods(methodTransform);\n+        ClassFile cf = ClassFile.of();\n+        byte[] newBytes = cf.transformClass(cf.parse(\n+                Files.readAllBytes(Paths.get(URI.create(\"jrt:\/java.base\/java\/util\/\" + name)))), classTransform);\n+\n+        String patchedClass = MODULE_PATCH_LOCATION + name;\n+        var file = new File(patchedClass);\n+        try (FileOutputStream fos = new FileOutputStream(file)) {\n+            fos.write(newBytes);\n+        }\n+    }\n@@ -119,1 +221,0 @@\n-    @BeforeAll\n@@ -172,2 +273,2 @@\n-                \/\/ If the cut-over already passed, use the new curency for ISO4217Codes\n-                if (format.parse(tokens.nextToken()).getTime() < System.currentTimeMillis()) {\n+                \/\/ If the cut-over already passed, use the new currency for ISO4217Codes\n+                if (format.parse(tokens.nextToken()).getTime() < currentTimeMillis()) {\n@@ -323,0 +424,6 @@\n+\n+    \/\/ Either the current system time, or a mocked value equal to Long.MAX_VALUE\n+    static long currentTimeMillis() {\n+        var mocked = MOCKED_TIME.equals(\"true\");\n+        return mocked ? Long.MAX_VALUE : System.currentTimeMillis();\n+    }\n","filename":"test\/jdk\/java\/util\/Currency\/ValidateISO4217.java","additions":112,"deletions":5,"binary":false,"changes":117,"status":"modified"},{"patch":"@@ -16,0 +16,1 @@\n+PK=JPZ,999,0,3000-01-01T00:00:00\n","filename":"test\/jdk\/java\/util\/Currency\/currency.properties","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"}]}