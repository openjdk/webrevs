{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,1 @@\n+ *      8354344\n@@ -32,1 +33,10 @@\n- * @run junit ValidateISO4217\n+ * @library \/test\/lib\n+ * @run junit\/othervm -DMOCKED.TIME=false ValidateISO4217\n+ * @run junit\/othervm --patch-module java.base=${test.class.path} -DMOCKED.TIME=true ValidateISO4217\n+ *\/\n+\n+\/* The run invocation order is important. The first invocation will generate\n+ * class files for Currency that mock System.currentTimeMillis() as Long.MAX_VALUE,\n+ * which is required by the second invocation. The second invocation using the\n+ * modded class files via a module patch allow us to test any cut-over dates after\n+ * the transition.\n@@ -37,0 +47,1 @@\n+import java.io.FileOutputStream;\n@@ -38,0 +49,9 @@\n+import java.io.IOException;\n+import java.lang.classfile.ClassFile;\n+import java.lang.classfile.ClassTransform;\n+import java.lang.classfile.CodeTransform;\n+import java.lang.classfile.MethodTransform;\n+import java.lang.classfile.instruction.InvokeInstruction;\n+import java.net.URI;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n@@ -41,0 +61,1 @@\n+import java.util.Arrays;\n@@ -48,0 +69,1 @@\n+import java.util.stream.Stream;\n@@ -49,0 +71,1 @@\n+import jtreg.SkippedException;\n@@ -116,0 +139,58 @@\n+    private static final String MODULE_PATCH_LOCATION =\n+            System.getProperty(\"test.classes\", \".\") + \"\/java\/util\/\";\n+\n+    \/\/ Classes that should mock System.currentTimeMillis()\n+    private static final String[] CLASSES =\n+            Stream.concat(\n+                Stream.of(\"Currency.class\"),\n+                Arrays.stream(Currency.class.getDeclaredClasses())\n+                        .map(c -> \"Currency$\" + c.getSimpleName() + \".class\")\n+            ).toArray(String[]::new);\n+\n+    @BeforeAll\n+    static void setUp() throws Exception {\n+        checkUsage();\n+        setUpPatchedClasses();\n+        setUpTestingData();\n+    }\n+\n+    \/\/ Enforce correct usage of ValidateISO4217\n+    static void checkUsage() {\n+        if (System.getProperty(\"MOCKED.TIME\") == null) {\n+            throw new SkippedException(\n+                    \"Incorrect usage of ValidateISO4217. Missing \\\"MOCKED.TIME\\\" system property\");\n+        }\n+    }\n+\n+    \/\/ Patch the relevant classes required for module patch\n+    static void setUpPatchedClasses() throws IOException {\n+        if (System.getProperty(\"MOCKED.TIME\").equals(\"false\")) {\n+            new File(MODULE_PATCH_LOCATION).mkdirs();\n+            for (String s : CLASSES) {\n+                patchClass(s);\n+            }\n+        }\n+    }\n+\n+    \/\/ Mock calls of System.currentTimeMillis() within Currency to Long.MAX_VALUE.\n+    \/\/ This effectively ensures that we are always past any cut-over dates.\n+    private static void patchClass(String name) throws IOException {\n+        CodeTransform codeTransform = (codeBuilder, e) -> {\n+            switch (e) {\n+                case InvokeInstruction i when i.name().stringValue().equals(\"currentTimeMillis\") ->\n+                        codeBuilder.loadConstant(Long.MAX_VALUE); \/\/ mock\n+                default -> codeBuilder.accept(e);\n+            }\n+        };\n+        MethodTransform methodTransform = MethodTransform.transformingCode(codeTransform);\n+        ClassTransform classTransform = ClassTransform.transformingMethods(methodTransform);\n+        ClassFile cf = ClassFile.of();\n+        byte[] newBytes = cf.transformClass(cf.parse(\n+                Files.readAllBytes(Paths.get(URI.create(\"jrt:\/java.base\/java\/util\/\" + name)))), classTransform);\n+\n+        String patchedClass = MODULE_PATCH_LOCATION + name;\n+        var file = new File(patchedClass);\n+        try (FileOutputStream fos = new FileOutputStream(file)) {\n+            fos.write(newBytes);\n+        }\n+    }\n@@ -119,1 +200,0 @@\n-    @BeforeAll\n@@ -172,2 +252,2 @@\n-                \/\/ If the cut-over already passed, use the new curency for ISO4217Codes\n-                if (format.parse(tokens.nextToken()).getTime() < System.currentTimeMillis()) {\n+                \/\/ If the cut-over already passed, use the new currency for ISO4217Codes\n+                if (format.parse(tokens.nextToken()).getTime() < currentTimeMillis()) {\n@@ -323,0 +403,6 @@\n+\n+    \/\/ Either the current system time, or a mocked value equal to Long.MAX_VALUE\n+    static long currentTimeMillis() {\n+        var mocked = System.getProperty(\"MOCKED.TIME\").equals(\"true\");\n+        return mocked ? Long.MAX_VALUE : System.currentTimeMillis();\n+    }\n","filename":"test\/jdk\/java\/util\/Currency\/ValidateISO4217.java","additions":91,"deletions":5,"binary":false,"changes":96,"status":"modified"}]}