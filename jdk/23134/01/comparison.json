{"files":[{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,2 +100,2 @@\n-  log_info(gc, ergo)(\"Adaptive CSet Selection. Target Free: \" SIZE_FORMAT \"%s, Actual Free: \"\n-                     SIZE_FORMAT \"%s, Max Evacuation: \" SIZE_FORMAT \"%s, Min Garbage: \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"Adaptive CSet Selection. Target Free: %zu%s, Actual Free: \"\n+                     \"%zu%s, Max Evacuation: %zu%s, Min Garbage: %zu%s\",\n@@ -145,1 +146,1 @@\n-    log_debug(gc, ergo)(\"Available: \" SIZE_FORMAT \" %sB, z-score=%.3f. Average available: %.1f %sB +\/- %.1f %sB.\",\n+    log_debug(gc, ergo)(\"Available: %zu %sB, z-score=%.3f. Average available: %.1f %sB +\/- %.1f %sB.\",\n@@ -240,2 +241,2 @@\n-  log_debug(gc)(\"should_start_gc? available: \" SIZE_FORMAT \", soft_max_capacity: \" SIZE_FORMAT\n-                \", allocated: \" SIZE_FORMAT, available, capacity, allocated);\n+  log_debug(gc)(\"should_start_gc? available: %zu, soft_max_capacity: %zu\"\n+                \", allocated: %zu\", available, capacity, allocated);\n@@ -249,1 +250,1 @@\n-    log_trigger(\"Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n+    log_trigger(\"Free (%zu%s) is below minimum threshold (%zu%s)\",\n@@ -260,1 +261,1 @@\n-      log_trigger(\"Learning \" SIZE_FORMAT \" of \" SIZE_FORMAT \". Free (\" SIZE_FORMAT \"%s) is below initial threshold (\" SIZE_FORMAT \"%s)\",\n+      log_trigger(\"Learning %zu of %zu. Free (%zu%s) is below initial threshold (%zu%s)\",\n@@ -285,1 +286,1 @@\n-                 \" to deplete free headroom (\" SIZE_FORMAT \"%s) (margin of error = %.2f)\",\n+                 \" to deplete free headroom (%zu%s) (margin of error = %.2f)\",\n@@ -290,1 +291,1 @@\n-    log_info(gc, ergo)(\"Free headroom: \" SIZE_FORMAT \"%s (free) - \" SIZE_FORMAT \"%s (spike) - \" SIZE_FORMAT \"%s (penalties) = \" SIZE_FORMAT \"%s\",\n+    log_info(gc, ergo)(\"Free headroom: %zu%s (free) - %zu%s (spike) - %zu%s (penalties) = %zu%s\",\n@@ -301,1 +302,1 @@\n-    log_trigger(\"Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (\" SIZE_FORMAT \"%s) (spike threshold = %.2f)\",\n+    log_trigger(\"Average GC time (%.2f ms) is above the time for instantaneous allocation rate (%.0f %sB\/s) to deplete free headroom (%zu%s) (spike threshold = %.2f)\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahAdaptiveHeuristics.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -61,1 +62,1 @@\n-    log_trigger(\"Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n+    log_trigger(\"Free (%zu%s) is below minimum threshold (%zu%s)\",\n@@ -69,1 +70,1 @@\n-    log_trigger(\"Allocated since last cycle (\" SIZE_FORMAT \"%s) is larger than allocation threshold (\" SIZE_FORMAT \"%s)\",\n+    log_trigger(\"Allocated since last cycle (%zu%s) is larger than allocation threshold (%zu%s)\",\n@@ -84,1 +85,1 @@\n-  log_info(gc, ergo)(\"CSet Selection. Actual Free: \" SIZE_FORMAT \"%s, Max CSet: \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"CSet Selection. Actual Free: %zu%s, Max CSet: %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahCompactHeuristics.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -137,1 +138,1 @@\n-             \"Humongous liveness and marks should agree. Region live: %s; Bitmap live: %s; Region Live Words: \" SIZE_FORMAT,\n+             \"Humongous liveness and marks should agree. Region live: %s; Bitmap live: %s; Region Live Words: %zu\",\n@@ -161,2 +162,2 @@\n-  log_info(gc, ergo)(\"Planning to promote in place \" SIZE_FORMAT \" humongous regions and \" SIZE_FORMAT\n-                     \" regular regions, spanning a total of \" SIZE_FORMAT \" used bytes\",\n+  log_info(gc, ergo)(\"Planning to promote in place %zu humongous regions and %zu\"\n+                     \" regular regions, spanning a total of %zu used bytes\",\n@@ -171,1 +172,1 @@\n-          \"Cannot have more immediate garbage than total garbage: \" SIZE_FORMAT \"%s vs \" SIZE_FORMAT \"%s\",\n+          \"Cannot have more immediate garbage than total garbage: %zu%s vs %zu%s\",\n@@ -196,3 +197,3 @@\n-  log_info(gc, ergo)(\"Collectable Garbage: \" SIZE_FORMAT \"%s (\" SIZE_FORMAT \"%%), \"\n-                     \"Immediate: \" SIZE_FORMAT \"%s (\" SIZE_FORMAT \"%%), \" SIZE_FORMAT \" regions, \"\n-                     \"CSet: \" SIZE_FORMAT \"%s (\" SIZE_FORMAT \"%%), \" SIZE_FORMAT \" regions\",\n+  log_info(gc, ergo)(\"Collectable Garbage: %zu%s (%zu%%), \"\n+                     \"Immediate: %zu%s (%zu%%), %zu regions, \"\n+                     \"CSet: %zu%s (%zu%%), %zu regions\",\n@@ -219,4 +220,4 @@\n-    log_info(gc, ergo)(\"Evacuation Targets: YOUNG: \" SIZE_FORMAT \"%s, \"\n-                       \"PROMOTE: \" SIZE_FORMAT \"%s, \"\n-                       \"OLD: \" SIZE_FORMAT \"%s, \"\n-                       \"TOTAL: \" SIZE_FORMAT \"%s\",\n+    log_info(gc, ergo)(\"Evacuation Targets: YOUNG: %zu%s, \"\n+                       \"PROMOTE: %zu%s, \"\n+                       \"OLD: %zu%s, \"\n+                       \"TOTAL: %zu%s\",\n@@ -285,2 +286,2 @@\n-          \"Chosen CSet evacuates young: \" SIZE_FORMAT \"%s (of which at least: \" SIZE_FORMAT \"%s are to be promoted), \"\n-          \"old: \" SIZE_FORMAT \"%s\",\n+          \"Chosen CSet evacuates young: %zu%s (of which at least: %zu%s are to be promoted), \"\n+          \"old: %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGenerationalHeuristics.cpp","additions":14,"deletions":13,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -95,2 +96,2 @@\n-  log_info(gc, ergo)(\"Adaptive CSet Selection for GLOBAL. Max Young Evacuation: \" SIZE_FORMAT\n-                     \"%s, Max Old Evacuation: \" SIZE_FORMAT \"%s, Actual Free: \" SIZE_FORMAT \"%s.\",\n+  log_info(gc, ergo)(\"Adaptive CSet Selection for GLOBAL. Max Young Evacuation: %zu\"\n+                     \"%s, Max Old Evacuation: %zu%s, Actual Free: %zu%s.\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahGlobalHeuristics.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -125,1 +125,1 @@\n-             \"Humongous liveness and marks should agree. Region live: %s; Bitmap live: %s; Region Live Words: \" SIZE_FORMAT,\n+             \"Humongous liveness and marks should agree. Region live: %s; Bitmap live: %s; Region Live Words: %zu\",\n@@ -146,1 +146,1 @@\n-          \"Cannot have more immediate garbage than total garbage: \" SIZE_FORMAT \"%s vs \" SIZE_FORMAT \"%s\",\n+          \"Cannot have more immediate garbage than total garbage: %zu%s vs %zu%s\",\n@@ -160,3 +160,3 @@\n-  log_info(gc, ergo)(\"Collectable Garbage: \" SIZE_FORMAT \"%s (\" SIZE_FORMAT \"%%), \"\n-                     \"Immediate: \" SIZE_FORMAT \"%s (\" SIZE_FORMAT \"%%), \" SIZE_FORMAT \" regions, \"\n-                     \"CSet: \" SIZE_FORMAT \"%s (\" SIZE_FORMAT \"%%), \" SIZE_FORMAT \" regions\",\n+  log_info(gc, ergo)(\"Collectable Garbage: %zu%s (%zu%%), \"\n+                     \"Immediate: %zu%s (%zu%%), %zu regions, \"\n+                     \"CSet: %zu%s (%zu%%), %zu regions\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahHeuristics.cpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -125,1 +126,1 @@\n-  log_debug(gc)(\"Choose old regions for mixed collection: old evacuation budget: \" SIZE_FORMAT \"%s, candidates: %u\",\n+  log_debug(gc)(\"Choose old regions for mixed collection: old evacuation budget: %zu%s, candidates: %u\",\n@@ -365,1 +366,1 @@\n-        log_debug(gc)(\"Trashed \" SIZE_FORMAT \" regions for humongous object.\", region_count);\n+        log_debug(gc)(\"Trashed %zu regions for humongous object.\", region_count);\n@@ -446,1 +447,1 @@\n-      assert(r->is_regular() || r->is_regular_pinned(), \"Region \" SIZE_FORMAT \" has wrong state for collection: %s\",\n+      assert(r->is_regular() || r->is_regular_pinned(), \"Region %zu has wrong state for collection: %s\",\n@@ -469,1 +470,1 @@\n-  log_info(gc, ergo)(\"Old-Gen Collectable Garbage: \" PROPERFMT \" consolidated with free: \" PROPERFMT \", over \" SIZE_FORMAT \" regions\",\n+  log_info(gc, ergo)(\"Old-Gen Collectable Garbage: \" PROPERFMT \" consolidated with free: \" PROPERFMT \", over %zu regions\",\n@@ -471,1 +472,1 @@\n-  log_info(gc, ergo)(\"Old-Gen Immediate Garbage: \" PROPERFMT \" over \" SIZE_FORMAT \" regions\",\n+  log_info(gc, ergo)(\"Old-Gen Immediate Garbage: \" PROPERFMT \" over %zu regions\",\n@@ -473,2 +474,2 @@\n-  log_info(gc, ergo)(\"Old regions selected for defragmentation: \" SIZE_FORMAT, defrag_count);\n-  log_info(gc, ergo)(\"Old regions not selected: \" SIZE_FORMAT, total_uncollected_old_regions);\n+  log_info(gc, ergo)(\"Old regions selected for defragmentation: %zu\", defrag_count);\n+  log_info(gc, ergo)(\"Old regions not selected: %zu\", total_uncollected_old_regions);\n@@ -611,1 +612,1 @@\n-         \"Old used (\" SIZE_FORMAT \", \" SIZE_FORMAT\") must not be more than heap capacity (\" SIZE_FORMAT \")\",\n+         \"Old used (%zu, %zu) must not be more than heap capacity (%zu)\",\n@@ -638,1 +639,1 @@\n-    log_trigger(\"Expansion failure, current size: \" SIZE_FORMAT \"%s which is %.1f%% of total heap size\",\n+    log_trigger(\"Expansion failure, current size: %zu%s which is %.1f%% of total heap size\",\n@@ -658,2 +659,2 @@\n-                SIZE_FORMAT \"%s available bytes spread between range spanned from \"\n-                SIZE_FORMAT \" to \" SIZE_FORMAT \" (\" SIZE_FORMAT \"), density: %.1f%%\",\n+                \"%zu%s available bytes spread between range spanned from \"\n+                \"%zu to %zu (%zu), density: %.1f%%\",\n@@ -676,2 +677,2 @@\n-      log_debug(gc)(\"Ignoring Trigger: Old has overgrown: usage (\" SIZE_FORMAT \"%s) is below threshold (\"\n-                    SIZE_FORMAT \"%s) after \" SIZE_FORMAT \" consecutive completed young GCs\",\n+      log_debug(gc)(\"Ignoring Trigger: Old has overgrown: usage (%zu%s) is below threshold (\"\n+                    \"%zu%s) after %zu consecutive completed young GCs\",\n@@ -686,1 +687,1 @@\n-                  SIZE_FORMAT \"%s, current usage: \" SIZE_FORMAT \"%s, percent growth: %.1f%%\",\n+                  \"%zu%s, current usage: %zu%s, percent growth: %.1f%%\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahOldHeuristics.cpp","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +64,1 @@\n-  log_info(gc, ergo)(\"CSet Selection. Actual Free: \" SIZE_FORMAT \"%s, Max CSet: \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"CSet Selection. Actual Free: %zu%s, Max CSet: %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahPassiveHeuristics.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -55,1 +56,1 @@\n-    log_trigger(\"Free (\" SIZE_FORMAT \"%s) is below minimum threshold (\" SIZE_FORMAT \"%s)\",\n+    log_trigger(\"Free (%zu%s) is below minimum threshold (%zu%s)\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahStaticHeuristics.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +86,1 @@\n-          \"Adaptive CSet Selection for YOUNG. Max Evacuation: \" SIZE_FORMAT \"%s, Actual Free: \" SIZE_FORMAT \"%s.\",\n+          \"Adaptive CSet Selection for YOUNG. Max Evacuation: %zu%s, Actual Free: %zu%s.\",\n@@ -153,1 +154,1 @@\n-    log_trigger(\"Expedite mixed evacuation of \" SIZE_FORMAT \" regions\", mixed_candidates);\n+    log_trigger(\"Expedite mixed evacuation of %zu regions\", mixed_candidates);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/heuristics\/shenandoahYoungHeuristics.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -36,2 +36,2 @@\n-      err_msg(\"ShenandoahGenerationalMinTenuringAge=\" SIZE_FORMAT\n-              \" should be no more than ShenandoahGenerationalMaxTenuringAge=\" SIZE_FORMAT,\n+      err_msg(\"ShenandoahGenerationalMinTenuringAge=%zu\"\n+              \" should be no more than ShenandoahGenerationalMaxTenuringAge=%zu\",\n@@ -330,1 +330,1 @@\n-        (\" (dark matter) Cohort population \" SIZE_FORMAT_W(10) \" to \" SIZE_FORMAT_W(10),\n+        (\" (dark matter) Cohort population %10zu to %10zu\",\n@@ -359,1 +359,1 @@\n-        (\" - age %3u: prev \" SIZE_FORMAT_W(10) \" bytes, curr \" SIZE_FORMAT_W(10) \" bytes, mortality %.2f \",\n+        (\" - age %3u: prev %10zu bytes, curr %10zu bytes, mortality %.2f \",\n@@ -378,2 +378,2 @@\n-    log_info(gc, age)(\"Skipped: \" SIZE_FORMAT_W(10) \" (%.2f),  R-Aged: \" SIZE_FORMAT_W(10) \" (%.2f),  \"\n-                      \"Clamped: \" SIZE_FORMAT_W(10) \" (%.2f),  R-Young: \" SIZE_FORMAT_W(10) \" (%.2f)\",\n+    log_info(gc, age)(\"Skipped: %10zu (%.2f),  R-Aged: %10zu (%.2f),  \"\n+                      \"Clamped: %10zu (%.2f),  R-Young: %10zu (%.2f)\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAgeCensus.cpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -63,1 +64,1 @@\n-      warning(\"Large pages size (\" SIZE_FORMAT \"K) is too large to afford page-sized regions, disabling uncommit\",\n+      warning(\"Large pages size (%zuK) is too large to afford page-sized regions, disabling uncommit\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahArguments.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,3 +35,3 @@\n-    log_info(gc,remset)(\"Card stats: dirty \" SIZE_FORMAT \" (max run: \" SIZE_FORMAT \"),\"\n-      \" clean \" SIZE_FORMAT \" (max run: \" SIZE_FORMAT \"),\"\n-      \" dirty scans\/objs \" SIZE_FORMAT,\n+    log_info(gc,remset)(\"Card stats: dirty %zu (max run: %zu),\"\n+      \" clean %zu (max run: %zu),\"\n+      \" dirty scans\/objs %zu\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCardStats.cpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -3,1 +3,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -189,1 +189,1 @@\n-                SIZE_FORMAT \", Garbage: \" SIZE_FORMAT \"%s, Live: \" SIZE_FORMAT \"%s, Used: \" SIZE_FORMAT \"%s\", count(),\n+                \"%zu, Garbage: %zu%s, Live: %zu%s, Used: %zu%s\", count(),\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectionSet.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -182,1 +183,1 @@\n-  out->print_cr(SIZE_FORMAT_W(5) \" Completed GCs\", completed_gcs);\n+  out->print_cr(\"%5zu Completed GCs\", completed_gcs);\n@@ -196,1 +197,1 @@\n-      out->print_cr(\"  \" SIZE_FORMAT_W(5) \" caused by %s (%.2f%%)\", cause_count, desc, percent_of(cause_count, completed_gcs));\n+      out->print_cr(\"  %5zu caused by %s (%.2f%%)\", cause_count, desc, percent_of(cause_count, completed_gcs));\n@@ -201,1 +202,1 @@\n-  out->print_cr(SIZE_FORMAT_W(5) \" Successful Concurrent GCs (%.2f%%)\", _success_concurrent_gcs, percent_of(_success_concurrent_gcs, completed_gcs));\n+  out->print_cr(\"%5zu Successful Concurrent GCs (%.2f%%)\", _success_concurrent_gcs, percent_of(_success_concurrent_gcs, completed_gcs));\n@@ -203,1 +204,1 @@\n-    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked explicitly (%.2f%%)\", explicit_requests, percent_of(explicit_requests, _success_concurrent_gcs));\n+    out->print_cr(\"  %5zu invoked explicitly (%.2f%%)\", explicit_requests, percent_of(explicit_requests, _success_concurrent_gcs));\n@@ -206,1 +207,1 @@\n-    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked implicitly (%.2f%%)\", implicit_requests, percent_of(implicit_requests, _success_concurrent_gcs));\n+    out->print_cr(\"  %5zu invoked implicitly (%.2f%%)\", implicit_requests, percent_of(implicit_requests, _success_concurrent_gcs));\n@@ -208,1 +209,1 @@\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" abbreviated (%.2f%%)\",  _abbreviated_concurrent_gcs, percent_of(_abbreviated_concurrent_gcs, _success_concurrent_gcs));\n+  out->print_cr(\"  %5zu abbreviated (%.2f%%)\",  _abbreviated_concurrent_gcs, percent_of(_abbreviated_concurrent_gcs, _success_concurrent_gcs));\n@@ -212,3 +213,3 @@\n-    out->print_cr(SIZE_FORMAT_W(5) \" Completed Old GCs (%.2f%%)\",        _success_old_gcs, percent_of(_success_old_gcs, completed_gcs));\n-    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" mixed\",                        _mixed_gcs);\n-    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" interruptions\",                _interrupted_old_gcs);\n+    out->print_cr(\"%5zu Completed Old GCs (%.2f%%)\",        _success_old_gcs, percent_of(_success_old_gcs, completed_gcs));\n+    out->print_cr(\"  %5zu mixed\",                        _mixed_gcs);\n+    out->print_cr(\"  %5zu interruptions\",                _interrupted_old_gcs);\n@@ -219,4 +220,4 @@\n-  out->print_cr(SIZE_FORMAT_W(5) \" Degenerated GCs (%.2f%%)\", degenerated_gcs, percent_of(degenerated_gcs, completed_gcs));\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" upgraded to Full GC (%.2f%%)\",          _alloc_failure_degenerated_upgrade_to_full, percent_of(_alloc_failure_degenerated_upgrade_to_full, degenerated_gcs));\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" caused by allocation failure (%.2f%%)\", _alloc_failure_degenerated, percent_of(_alloc_failure_degenerated, degenerated_gcs));\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" abbreviated (%.2f%%)\",                  _abbreviated_degenerated_gcs, percent_of(_abbreviated_degenerated_gcs, degenerated_gcs));\n+  out->print_cr(\"%5zu Degenerated GCs (%.2f%%)\", degenerated_gcs, percent_of(degenerated_gcs, completed_gcs));\n+  out->print_cr(\"  %5zu upgraded to Full GC (%.2f%%)\",          _alloc_failure_degenerated_upgrade_to_full, percent_of(_alloc_failure_degenerated_upgrade_to_full, degenerated_gcs));\n+  out->print_cr(\"  %5zu caused by allocation failure (%.2f%%)\", _alloc_failure_degenerated, percent_of(_alloc_failure_degenerated, degenerated_gcs));\n+  out->print_cr(\"  %5zu abbreviated (%.2f%%)\",                  _abbreviated_degenerated_gcs, percent_of(_abbreviated_degenerated_gcs, degenerated_gcs));\n@@ -226,1 +227,1 @@\n-      out->print_cr(\"    \" SIZE_FORMAT_W(5) \" happened at %s\", _degen_point_counts[c], desc);\n+      out->print_cr(\"    %5zu happened at %s\", _degen_point_counts[c], desc);\n@@ -231,1 +232,1 @@\n-  out->print_cr(SIZE_FORMAT_W(5) \" Full GCs (%.2f%%)\", _success_full_gcs, percent_of(_success_full_gcs, completed_gcs));\n+  out->print_cr(\"%5zu Full GCs (%.2f%%)\", _success_full_gcs, percent_of(_success_full_gcs, completed_gcs));\n@@ -233,1 +234,1 @@\n-    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked explicitly (%.2f%%)\", explicit_requests, percent_of(explicit_requests, _success_concurrent_gcs));\n+    out->print_cr(\"  %5zu invoked explicitly (%.2f%%)\", explicit_requests, percent_of(explicit_requests, _success_concurrent_gcs));\n@@ -236,1 +237,1 @@\n-    out->print_cr(\"  \" SIZE_FORMAT_W(5) \" invoked implicitly (%.2f%%)\", implicit_requests, percent_of(implicit_requests, _success_concurrent_gcs));\n+    out->print_cr(\"  %5zu invoked implicitly (%.2f%%)\", implicit_requests, percent_of(implicit_requests, _success_concurrent_gcs));\n@@ -238,2 +239,2 @@\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" caused by allocation failure (%.2f%%)\", _alloc_failure_full, percent_of(_alloc_failure_full, _success_full_gcs));\n-  out->print_cr(\"  \" SIZE_FORMAT_W(5) \" upgraded from Degenerated GC (%.2f%%)\", _alloc_failure_degenerated_upgrade_to_full, percent_of(_alloc_failure_degenerated_upgrade_to_full, _success_full_gcs));\n+  out->print_cr(\"  %5zu caused by allocation failure (%.2f%%)\", _alloc_failure_full, percent_of(_alloc_failure_full, _success_full_gcs));\n+  out->print_cr(\"  %5zu upgraded from Degenerated GC (%.2f%%)\", _alloc_failure_degenerated_upgrade_to_full, percent_of(_alloc_failure_degenerated_upgrade_to_full, _success_full_gcs));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahCollectorPolicy.cpp","additions":20,"deletions":19,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -596,1 +596,1 @@\n-    assert(!r->has_live(), \"Region \" SIZE_FORMAT \" should have no live data\", r->index());\n+    assert(!r->has_live(), \"Region %zu should have no live data\", r->index());\n@@ -606,1 +606,1 @@\n-             \"Region \" SIZE_FORMAT \" should already have correct TAMS\", r->index());\n+             \"Region %zu should already have correct TAMS\", r->index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahConcurrentGC.cpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +65,1 @@\n-    log_info(gc)(\"Failed to allocate %s, \" SIZE_FORMAT \"%s\",\n+    log_info(gc)(\"Failed to allocate %s, %zu%s\",\n@@ -87,1 +88,1 @@\n-    log_info(gc)(\"Failed to allocate \" SIZE_FORMAT \"%s for evacuation\",\n+    log_info(gc)(\"Failed to allocate %zu%s for evacuation\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahController.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -87,2 +88,2 @@\n-  st->print_cr(\"Evacuated \" SIZE_FORMAT \"%s across \" SIZE_FORMAT \" objects, \"\n-            \"abandoned \" SIZE_FORMAT \"%s across \" SIZE_FORMAT \" objects.\",\n+  st->print_cr(\"Evacuated %zu%s across %zu objects, \"\n+            \"abandoned %zu%s across %zu objects.\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahEvacTracker.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -276,1 +276,1 @@\n-          \"Must not use (\" SIZE_FORMAT \") more than capacity (\" SIZE_FORMAT \") after increase by \" SIZE_FORMAT,\n+          \"Must not use (%zu) more than capacity (%zu) after increase by %zu\",\n@@ -341,1 +341,1 @@\n-  assert ((low_idx < _max) && (high_idx < _max), \"Both indices are sane: \" SIZE_FORMAT \" and \" SIZE_FORMAT \" < \" SIZE_FORMAT,\n+  assert ((low_idx < _max) && (high_idx < _max), \"Both indices are sane: %zu and %zu < %zu\",\n@@ -356,1 +356,1 @@\n-  assert (idx < _max, \"index is sane: \" SIZE_FORMAT \" < \" SIZE_FORMAT, idx, _max);\n+  assert (idx < _max, \"index is sane: %zu < %zu\", idx, _max);\n@@ -370,1 +370,1 @@\n-  assert (idx < _max, \"index is sane: \" SIZE_FORMAT \" < \" SIZE_FORMAT, idx, _max);\n+  assert (idx < _max, \"index is sane: %zu < %zu\", idx, _max);\n@@ -402,1 +402,1 @@\n-  assert (idx < _max, \"index is sane: \" SIZE_FORMAT \" < \" SIZE_FORMAT, idx, _max);\n+  assert (idx < _max, \"index is sane: %zu < %zu\", idx, _max);\n@@ -409,1 +409,1 @@\n-          \"Used: \" SIZE_FORMAT \" + available: \" SIZE_FORMAT \" should equal region size: \" SIZE_FORMAT,\n+          \"Used: %zu + available: %zu should equal region size: %zu\",\n@@ -426,1 +426,1 @@\n-          \"Unexpected movement between partitions, available: \" SIZE_FORMAT \", _region_size_bytes: \" SIZE_FORMAT\n+          \"Unexpected movement between partitions, available: %zu, _region_size_bytes: %zu\"\n@@ -432,1 +432,1 @@\n-          \"Orig partition used: \" SIZE_FORMAT \" must exceed moved used: \" SIZE_FORMAT \" within region %zd\",\n+          \"Orig partition used: %zu must exceed moved used: %zu within region %zd\",\n@@ -455,1 +455,1 @@\n-  assert (idx < _max, \"index is sane: \" SIZE_FORMAT \" < \" SIZE_FORMAT, idx, _max);\n+  assert (idx < _max, \"index is sane: %zu < %zu\", idx, _max);\n@@ -468,1 +468,1 @@\n-  assert (idx < _max, \"index is sane: \" SIZE_FORMAT \" < \" SIZE_FORMAT, idx, _max);\n+  assert (idx < _max, \"index is sane: %zu < %zu\", idx, _max);\n@@ -941,1 +941,1 @@\n-      log_debug(gc, free)(\"Flipped region \" SIZE_FORMAT \" to gc for request: \" PTR_FORMAT, idx, p2i(&req));\n+      log_debug(gc, free)(\"Flipped region %zu to gc for request: \" PTR_FORMAT, idx, p2i(&req));\n@@ -1000,1 +1000,1 @@\n-  assert (has_alloc_capacity(r), \"Performance: should avoid full regions on this path: \" SIZE_FORMAT, r->index());\n+  assert (has_alloc_capacity(r), \"Performance: should avoid full regions on this path: %zu\", r->index());\n@@ -1009,3 +1009,4 @@\n-    log_debug(gc, free)(\"Using new region (\" SIZE_FORMAT \") for %s (\" PTR_FORMAT \").\",\n-                        r->index(), ShenandoahAllocRequest::alloc_type_to_string(req.type()), p2i(&req));\n-    assert(!r->is_affiliated(), \"New region \" SIZE_FORMAT \" should be unaffiliated\", r->index());\n+    log_debug(gc, free)(\"Using new region (%zu) for %s (\" PTR_FORMAT \").\",\n+                       r->index(), ShenandoahAllocRequest::alloc_type_to_string(req.type()), p2i(&req));\n+    assert(!r->is_affiliated(), \"New region %zu should be unaffiliated\", r->index());\n+\n@@ -1030,2 +1031,2 @@\n-    log_debug(gc, free)(\"Using new region (\" SIZE_FORMAT \") for %s (\" PTR_FORMAT \").\",\n-                        r->index(), ShenandoahAllocRequest::alloc_type_to_string(req.type()), p2i(&req));\n+    log_debug(gc, free)(\"Using new region (%zu) for %s (\" PTR_FORMAT \").\",\n+                       r->index(), ShenandoahAllocRequest::alloc_type_to_string(req.type()), p2i(&req));\n@@ -1033,1 +1034,1 @@\n-    assert(r->is_affiliated(), \"Region \" SIZE_FORMAT \" that is not new should be affiliated\", r->index());\n+    assert(r->is_affiliated(), \"Region %zu that is not new should be affiliated\", r->index());\n@@ -1064,2 +1065,2 @@\n-        log_trace(gc, free)(\"Failed to shrink PLAB request (\" SIZE_FORMAT \") in region \" SIZE_FORMAT \" to \" SIZE_FORMAT\n-                            \" because min_size() is \" SIZE_FORMAT, req.size(), r->index(), adjusted_size, req.min_size());\n+        log_trace(gc, free)(\"Failed to shrink PLAB request (%zu) in region %zu to %zu\"\n+                            \" because min_size() is %zu\", req.size(), r->index(), adjusted_size, req.min_size());\n@@ -1076,1 +1077,1 @@\n-        assert (result != nullptr, \"Allocation must succeed: free \" SIZE_FORMAT \", actual \" SIZE_FORMAT, free, adjusted_size);\n+        assert (result != nullptr, \"Allocation must succeed: free %zu, actual %zu\", free, adjusted_size);\n@@ -1079,2 +1080,2 @@\n-        log_trace(gc, free)(\"Failed to shrink TLAB or GCLAB request (\" SIZE_FORMAT \") in region \" SIZE_FORMAT \" to \" SIZE_FORMAT\n-                            \" because min_size() is \" SIZE_FORMAT, req.size(), r->index(), adjusted_size, req.min_size());\n+        log_trace(gc, free)(\"Failed to shrink TLAB or GCLAB request (%zu) in region %zu to %zu\"\n+                            \" because min_size() is %zu\", req.size(), r->index(), adjusted_size, req.min_size());\n@@ -1296,1 +1297,1 @@\n-    log_warning(gc, free)(\"Forcing transfer of \" SIZE_FORMAT \" to old reserve.\", idx);\n+    log_warning(gc, free)(\"Forcing transfer of %zu to old reserve.\", idx);\n@@ -1428,6 +1429,6 @@\n-  log_debug(gc, free)(\"  At end of prep_to_rebuild, mutator_leftmost: \" SIZE_FORMAT\n-                      \", mutator_rightmost: \" SIZE_FORMAT\n-                      \", mutator_leftmost_empty: \" SIZE_FORMAT\n-                      \", mutator_rightmost_empty: \" SIZE_FORMAT\n-                      \", mutator_regions: \" SIZE_FORMAT\n-                      \", mutator_used: \" SIZE_FORMAT,\n+  log_debug(gc, free)(\"  At end of prep_to_rebuild, mutator_leftmost: %zu\"\n+                      \", mutator_rightmost: %zu\"\n+                      \", mutator_leftmost_empty: %zu\"\n+                      \", mutator_rightmost_empty: %zu\"\n+                      \", mutator_regions: %zu\"\n+                      \", mutator_used: %zu\",\n@@ -1437,6 +1438,6 @@\n-  log_debug(gc, free)(\"  old_collector_leftmost: \" SIZE_FORMAT\n-                      \", old_collector_rightmost: \" SIZE_FORMAT\n-                      \", old_collector_leftmost_empty: \" SIZE_FORMAT\n-                      \", old_collector_rightmost_empty: \" SIZE_FORMAT\n-                      \", old_collector_regions: \" SIZE_FORMAT\n-                      \", old_collector_used: \" SIZE_FORMAT,\n+  log_debug(gc, free)(\"  old_collector_leftmost: %zu\"\n+                      \", old_collector_rightmost: %zu\"\n+                      \", old_collector_leftmost_empty: %zu\"\n+                      \", old_collector_rightmost_empty: %zu\"\n+                      \", old_collector_regions: %zu\"\n+                      \", old_collector_used: %zu\",\n@@ -1446,0 +1447,1 @@\n+\n@@ -1537,2 +1539,2 @@\n-  log_info(gc, ergo)(\"At start of update refs, moving \" SIZE_FORMAT \"%s to Mutator free set from Collector Reserve (\"\n-                     SIZE_FORMAT \"%s) and from Old Collector Reserve (\" SIZE_FORMAT \"%s)\",\n+  log_info(gc, ergo)(\"At start of update refs, moving %zu%s to Mutator free set from Collector Reserve (\"\n+                     \"%zu%s) and from Old Collector Reserve (%zu%s)\",\n@@ -1574,1 +1576,1 @@\n-      log_info(gc, ergo)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n+      log_info(gc, ergo)(\"Transfer %zu region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n@@ -1578,1 +1580,1 @@\n-      log_info(gc, ergo)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n+      log_info(gc, ergo)(\"Transfer %zu region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n@@ -1656,1 +1658,1 @@\n-           \"Cannot reserve (\" SIZE_FORMAT \" + \" SIZE_FORMAT\") more OLD than is available: \" SIZE_FORMAT,\n+           \"Cannot reserve (%zu + %zu) more OLD than is available: %zu\",\n@@ -1715,2 +1717,2 @@\n-        log_trace(gc, free)(\"  Shifting region \" SIZE_FORMAT \" from mutator_free to old_collector_free\", idx);\n-        log_trace(gc, free)(\"  Shifted Mutator range [%zd, %zd],\"\n+        log_debug(gc, free)(\"  Shifting region %zu from mutator_free to old_collector_free\", idx);\n+        log_debug(gc, free)(\"  Shifted Mutator range [%zd, %zd],\"\n@@ -1722,0 +1724,1 @@\n+\n@@ -1738,2 +1741,2 @@\n-      log_trace(gc, free)(\"  Shifting region \" SIZE_FORMAT \" from mutator_free to collector_free\", idx);\n-      log_trace(gc, free)(\"  Shifted Mutator range [%zd, %zd],\"\n+      log_debug(gc, free)(\"  Shifting region %zu from mutator_free to collector_free\", idx);\n+      log_debug(gc, free)(\"  Shifted Mutator range [%zd, %zd],\"\n@@ -1745,0 +1748,1 @@\n+\n@@ -1818,0 +1822,1 @@\n+\n@@ -1918,1 +1923,1 @@\n-      ls.print(\"Free: \" SIZE_FORMAT \"%s, Max: \" SIZE_FORMAT \"%s regular, \" SIZE_FORMAT \"%s humongous, \",\n+      ls.print(\"Free: %zu%s, Max: %zu%s regular, %zu%s humongous, \",\n@@ -1931,1 +1936,1 @@\n-      ls.print(SIZE_FORMAT \"%% external, \", frag_ext);\n+      ls.print(\"%zu%% external, \", frag_ext);\n@@ -1940,2 +1945,2 @@\n-      ls.print(SIZE_FORMAT \"%% internal; \", frag_int);\n-      ls.print(\"Used: \" SIZE_FORMAT \"%s, Mutator Free: \" SIZE_FORMAT,\n+      ls.print(\"%zu%% internal; \", frag_int);\n+      ls.print(\"Used: %zu%s, Mutator Free: %zu\",\n@@ -1961,1 +1966,1 @@\n-      ls.print(\" Collector Reserve: \" SIZE_FORMAT \"%s, Max: \" SIZE_FORMAT \"%s; Used: \" SIZE_FORMAT \"%s\",\n+      ls.print(\" Collector Reserve: %zu%s, Max: %zu%s; Used: %zu%s\",\n@@ -1982,1 +1987,1 @@\n-      ls.print_cr(\" Old Collector Reserve: \" SIZE_FORMAT \"%s, Max: \" SIZE_FORMAT \"%s; Used: \" SIZE_FORMAT \"%s\",\n+      ls.print_cr(\" Old Collector Reserve: %zu%s, Max: %zu%s; Used: %zu%s\",\n@@ -2002,1 +2007,1 @@\n-        assert(false, \"Trying to allocate TLAB in humongous region: \" SIZE_FORMAT, req.size());\n+        assert(false, \"Trying to allocate TLAB in humongous region: %zu\", req.size());\n@@ -2014,1 +2019,1 @@\n-  out->print_cr(\"Mutator Free Set: \" SIZE_FORMAT \"\", _partitions.count(ShenandoahFreeSetPartitionId::Mutator));\n+  out->print_cr(\"Mutator Free Set: %zu\", _partitions.count(ShenandoahFreeSetPartitionId::Mutator));\n@@ -2020,1 +2025,1 @@\n-  out->print_cr(\"Collector Free Set: \" SIZE_FORMAT \"\", _partitions.count(ShenandoahFreeSetPartitionId::Collector));\n+  out->print_cr(\"Collector Free Set: %zu\", _partitions.count(ShenandoahFreeSetPartitionId::Collector));\n@@ -2027,1 +2032,1 @@\n-    out->print_cr(\"Old Collector Free Set: \" SIZE_FORMAT \"\", _partitions.count(ShenandoahFreeSetPartitionId::OldCollector));\n+    out->print_cr(\"Old Collector Free Set: %zu\", _partitions.count(ShenandoahFreeSetPartitionId::OldCollector));\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFreeSet.cpp","additions":60,"deletions":55,"binary":false,"changes":115,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -504,1 +505,1 @@\n-  log_debug(gc)(\"Full GC calculating target humongous objects from end \" SIZE_FORMAT, to_end);\n+  log_debug(gc)(\"Full GC calculating target humongous objects from end %zu\", to_end);\n@@ -553,1 +554,1 @@\n-    assert (r->is_committed(), \"only committed regions in heap now, see region \" SIZE_FORMAT, r->index());\n+    assert (r->is_committed(), \"only committed regions in heap now, see region %zu\", r->index());\n@@ -575,1 +576,1 @@\n-        assert(!r->has_live(), \"Region \" SIZE_FORMAT \" is not marked, should not have live\", r->index());\n+        assert(!r->has_live(), \"Region %zu is not marked, should not have live\", r->index());\n@@ -578,1 +579,1 @@\n-        assert(r->has_live(), \"Region \" SIZE_FORMAT \" should have live\", r->index());\n+        assert(r->has_live(), \"Region %zu should have live\", r->index());\n@@ -582,1 +583,1 @@\n-      assert(r->humongous_start_region()->has_live(), \"Region \" SIZE_FORMAT \" should have live\", r->index());\n+      assert(r->humongous_start_region()->has_live(), \"Region %zu should have live\", r->index());\n@@ -718,2 +719,2 @@\n-      assert(ShenandoahPrepareForCompactionTask::is_candidate_region(r), \"Sanity: \" SIZE_FORMAT, idx);\n-      assert(!map.at(idx), \"No region distributed twice: \" SIZE_FORMAT, idx);\n+      assert(ShenandoahPrepareForCompactionTask::is_candidate_region(r), \"Sanity: %zu\", idx);\n+      assert(!map.at(idx), \"No region distributed twice: %zu\", idx);\n@@ -728,1 +729,1 @@\n-    assert(is_distributed || !is_candidate, \"All candidates are distributed: \" SIZE_FORMAT, rid);\n+    assert(is_distributed || !is_candidate, \"All candidates are distributed: %zu\", rid);\n@@ -1048,1 +1049,1 @@\n-      assert(r->is_stw_move_allowed(), \"Region \" SIZE_FORMAT \" should be movable\", r->index());\n+      assert(r->is_stw_move_allowed(), \"Region %zu should be movable\", r->index());\n@@ -1050,1 +1051,1 @@\n-      log_debug(gc)(\"Full GC compaction moves humongous object from region \" SIZE_FORMAT \" to region \" SIZE_FORMAT, old_start, new_start);\n+      log_debug(gc)(\"Full GC compaction moves humongous object from region %zu to region %zu\", old_start, new_start);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahFullGC.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -422,1 +423,1 @@\n-           \"Round-off errors should be less than 3.125%%, committed: \" SIZE_FORMAT \", reserved: \" SIZE_FORMAT,\n+           \"Round-off errors should be less than 3.125%%, committed: %zu, reserved: %zu\",\n@@ -452,1 +453,1 @@\n-           \"Round-off errors should be less than 3.125%%, committed: \" SIZE_FORMAT \", reserved: \" SIZE_FORMAT,\n+           \"Round-off errors should be less than 3.125%%, committed: %zu, reserved: %zu\",\n@@ -458,1 +459,1 @@\n-  assert(old_available >= old_consumed, \"Cannot consume (\" SIZE_FORMAT \") more than is available (\" SIZE_FORMAT \")\",\n+  assert(old_available >= old_consumed, \"Cannot consume (%zu) more than is available (%zu)\",\n@@ -497,1 +498,1 @@\n-           \"Cannot transfer (\" SIZE_FORMAT \", \" SIZE_FORMAT \") more than excess old (\" SIZE_FORMAT \")\",\n+           \"Cannot transfer (%zu, %zu) more than excess old (%zu)\",\n@@ -500,1 +501,1 @@\n-    log_debug(gc, ergo)(\"%s transferred \" SIZE_FORMAT \" excess regions to young before start of evacuation\",\n+    log_debug(gc, ergo)(\"%s transferred %zu excess regions to young before start of evacuation\",\n@@ -530,1 +531,1 @@\n-             \"Region \" SIZE_FORMAT \" should not be ready for in-place promotion\", r->index());\n+             \"Region %zu should not be ready for in-place promotion\", r->index());\n@@ -674,2 +675,2 @@\n-    log_debug(gc)(\"Preselected \" SIZE_FORMAT \" regions containing \" SIZE_FORMAT \" live bytes,\"\n-                 \" consuming: \" SIZE_FORMAT \" of budgeted: \" SIZE_FORMAT,\n+    log_debug(gc)(\"Preselected %zu regions containing %zu live bytes,\"\n+                 \" consuming: %zu of budgeted: %zu\",\n@@ -727,1 +728,1 @@\n-           SIZE_FORMAT \"\/\" SIZE_FORMAT, total_pop, total_census);\n+           \"%zu\/%zu\", total_pop, total_census);\n@@ -944,1 +945,1 @@\n-           \"Waste (\" SIZE_FORMAT \") cannot be negative (after subtracting \" SIZE_FORMAT \")\", _humongous_waste, bytes);\n+           \"Waste (%zu) cannot be negative (after subtracting %zu)\", _humongous_waste, bytes);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGeneration.cpp","additions":11,"deletions":10,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,2 +55,2 @@\n-      log_warning(gc, ergo)(\"NewSize (\" SIZE_FORMAT \"k) is greater than the MaxNewSize (\" SIZE_FORMAT \"k). \"\n-                            \"A new max generation size of \" SIZE_FORMAT \"k will be used.\",\n+      log_warning(gc, ergo)(\"NewSize (%zuk) is greater than the MaxNewSize (%zuk). \"\n+                            \"A new max generation size of %zuk will be used.\",\n@@ -141,1 +142,1 @@\n-  log_info(gc, ergo)(\"Transfer \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n+  log_info(gc, ergo)(\"Transfer %zu region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n@@ -193,1 +194,1 @@\n-  log_info(gc, ergo)(\"Forcing transfer of \" SIZE_FORMAT \" region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n+  log_info(gc, ergo)(\"Forcing transfer of %zu region(s) from %s to %s, yielding increased size: \" PROPERFMT,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationSizer.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -92,1 +93,1 @@\n-  ls->print_cr(\"GenerationalEvacuationTask, looking at %s region \" SIZE_FORMAT \", (age: %d) [%s, %s, %s]\",\n+  ls->print_cr(\"GenerationalEvacuationTask, looking at %s region %zu, (age: %d) [%s, %s, %s]\",\n@@ -129,1 +130,1 @@\n-      assert(r->has_live(), \"Region \" SIZE_FORMAT \" should have been reclaimed early\", r->index());\n+      assert(r->has_live(), \"Region %zu should have been reclaimed early\", r->index());\n@@ -180,1 +181,1 @@\n-    assert(region->garbage_before_padded_for_promote() < old_garbage_threshold, \"Region \" SIZE_FORMAT \" has too much garbage for promotion\", region->index());\n+    assert(region->garbage_before_padded_for_promote() < old_garbage_threshold, \"Region %zu has too much garbage for promotion\", region->index());\n@@ -184,1 +185,1 @@\n-    assert(region->get_top_before_promote() == tams, \"Region \" SIZE_FORMAT \" has been used for allocations before promotion\", region->index());\n+    assert(region->get_top_before_promote() == tams, \"Region %zu has been used for allocations before promotion\", region->index());\n@@ -283,1 +284,1 @@\n-    log_debug(gc)(\"promoting humongous region \" SIZE_FORMAT \", spanning \" SIZE_FORMAT, region->index(), spanned_regions);\n+    log_debug(gc)(\"promoting humongous region %zu, spanning %zu\", region->index(), spanned_regions);\n@@ -297,1 +298,1 @@\n-      log_debug(gc)(\"promoting humongous region \" SIZE_FORMAT \", from \" PTR_FORMAT \" to \" PTR_FORMAT,\n+      log_debug(gc)(\"promoting humongous region %zu, from \" PTR_FORMAT \" to \" PTR_FORMAT,\n@@ -317,1 +318,1 @@\n-    log_debug(gc)(\"Clean cards for promoted humongous object (Region \" SIZE_FORMAT \") from \" PTR_FORMAT \" to \" PTR_FORMAT,\n+    log_debug(gc)(\"Clean cards for promoted humongous object (Region %zu) from \" PTR_FORMAT \" to \" PTR_FORMAT,\n@@ -321,1 +322,1 @@\n-    log_debug(gc)(\"Dirty cards for promoted humongous object (Region \" SIZE_FORMAT \") from \" PTR_FORMAT \" to \" PTR_FORMAT,\n+    log_debug(gc)(\"Dirty cards for promoted humongous object (Region %zu) from \" PTR_FORMAT \" to \" PTR_FORMAT,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalEvacuationTask.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -222,1 +223,1 @@\n-  log_debug(gc)(\"Worker %u compacting %s Region \" SIZE_FORMAT \" which had used \" SIZE_FORMAT \" and %s live\",\n+  log_debug(gc)(\"Worker %u compacting %s Region %zu which had used %zu and %s live\",\n@@ -251,1 +252,1 @@\n-    log_debug(gc)(\"Planned compaction into Old Region \" SIZE_FORMAT \", used: \" SIZE_FORMAT \" tabulated by worker %u\",\n+    log_debug(gc)(\"Planned compaction into Old Region %zu, used: %zu tabulated by worker %u\",\n@@ -260,1 +261,1 @@\n-    log_debug(gc)(\"Worker %u planned compaction into Young Region \" SIZE_FORMAT \", used: \" SIZE_FORMAT,\n+    log_debug(gc)(\"Worker %u planned compaction into Young Region %zu, used: %zu\",\n@@ -310,1 +311,1 @@\n-      log_debug(gc)(\"Worker %u finishing old region \" SIZE_FORMAT \", compact_point: \" PTR_FORMAT \", obj_size: \" SIZE_FORMAT\n+      log_debug(gc)(\"Worker %u finishing old region %zu, compact_point: \" PTR_FORMAT \", obj_size: %zu\"\n@@ -357,1 +358,1 @@\n-      log_debug(gc)(\"Worker %u finishing young region \" SIZE_FORMAT \", compact_point: \" PTR_FORMAT \", obj_size: \" SIZE_FORMAT\n+      log_debug(gc)(\"Worker %u finishing young region %zu, compact_point: \" PTR_FORMAT \", obj_size: %zu\"\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalFullGC.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -463,2 +464,2 @@\n-  assert(is_aligned(future_size, CardTable::card_size_in_words()), \"Card multiple by construction, future_size: \" SIZE_FORMAT\n-          \", card_size: \" SIZE_FORMAT \", cur_size: \" SIZE_FORMAT \", max: \" SIZE_FORMAT,\n+  assert(is_aligned(future_size, CardTable::card_size_in_words()), \"Card multiple by construction, future_size: %zu\"\n+          \", card_size: %zu, cur_size: %zu, max: %zu\",\n@@ -471,1 +472,1 @@\n-  log_debug(gc, free)(\"Set new PLAB size: \" SIZE_FORMAT, future_size);\n+  log_debug(gc, free)(\"Set new PLAB size: %zu\", future_size);\n@@ -476,1 +477,1 @@\n-    log_debug(gc, free)(\"Current PLAB size (\" SIZE_FORMAT \") is too small for \" SIZE_FORMAT, cur_size, size);\n+    log_debug(gc, free)(\"Current PLAB size (%zu) is too small for %zu\", cur_size, size);\n@@ -573,1 +574,1 @@\n-    log_debug(gc)(\"retire_plab() is registering remnant of size \" SIZE_FORMAT \" at \" PTR_FORMAT,\n+    log_debug(gc)(\"retire_plab() is registering remnant of size %zu at \" PTR_FORMAT,\n@@ -717,1 +718,1 @@\n-  ss->print_cr(\"After %s, %s \" SIZE_FORMAT \" regions to %s to prepare for next gc, old available: \"\n+  ss->print_cr(\"After %s, %s %zu regions to %s to prepare for next gc, old available: \"\n@@ -822,1 +823,1 @@\n-      log_debug(gc)(\"Update refs worker \" UINT32_FORMAT \", looking at region \" SIZE_FORMAT, worker_id, r->index());\n+      log_debug(gc)(\"Update refs worker \" UINT32_FORMAT \", looking at region %zu\", worker_id, r->index());\n@@ -848,1 +849,1 @@\n-                 \"%s Region \" SIZE_FORMAT \" is_active but not recognized as YOUNG or OLD so must be newly transitioned from FREE\",\n+                 \"%s Region %zu is_active but not recognized as YOUNG or OLD so must be newly transitioned from FREE\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahGenerationalHeap.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -148,1 +148,1 @@\n-      assert (end <= _bitmap_size, \"end is sane: \" SIZE_FORMAT \" < \" SIZE_FORMAT, end, _bitmap_size);\n+      assert (end <= _bitmap_size, \"end is sane: %zu < %zu\", end, _bitmap_size);\n@@ -189,1 +189,1 @@\n-         \"Regions should cover entire heap exactly: \" SIZE_FORMAT \" != \" SIZE_FORMAT \"\/\" SIZE_FORMAT,\n+         \"Regions should cover entire heap exactly: %zu != %zu\/%zu\",\n@@ -279,1 +279,1 @@\n-            \"Bitmap bytes per region should be power of two: \" SIZE_FORMAT, bitmap_bytes_per_region);\n+            \"Bitmap bytes per region should be power of two: %zu\", bitmap_bytes_per_region);\n@@ -290,1 +290,1 @@\n-            \"Should have at least one region per slice: \" SIZE_FORMAT,\n+            \"Should have at least one region per slice: %zu\",\n@@ -294,1 +294,1 @@\n-            \"Bitmap slices should be page-granular: bps = \" SIZE_FORMAT \", page size = \" SIZE_FORMAT,\n+            \"Bitmap slices should be page-granular: bps = %zu, page size = %zu\",\n@@ -586,1 +586,1 @@\n-  st->print_cr(\" \" SIZE_FORMAT \"%s max, \" SIZE_FORMAT \"%s soft max, \" SIZE_FORMAT \"%s committed, \" SIZE_FORMAT \"%s used\",\n+  st->print_cr(\" %zu%s max, %zu%s soft max, %zu%s committed, %zu%s used\",\n@@ -591,1 +591,1 @@\n-  st->print_cr(\" \" SIZE_FORMAT \" x \" SIZE_FORMAT\"%s regions\",\n+  st->print_cr(\" %zu x %zu %s regions\",\n@@ -789,1 +789,1 @@\n-         \"Should be in bounds: \" SIZE_FORMAT \" <= \" SIZE_FORMAT \" <= \" SIZE_FORMAT,\n+         \"Should be in bounds: %zu <= %zu <= %zu\",\n@@ -796,1 +796,1 @@\n-         \"Should be in bounds: \" SIZE_FORMAT \" <= \" SIZE_FORMAT \" <= \" SIZE_FORMAT,\n+         \"Should be in bounds: %zu <= %zu <= %zu\",\n@@ -843,1 +843,1 @@\n-      log_info(gc)(\"Soft Max Heap Size: \" SIZE_FORMAT \"%s -> \" SIZE_FORMAT \"%s\",\n+      log_info(gc)(\"Soft Max Heap Size: %zu%s -> %zu%s\",\n@@ -882,1 +882,1 @@\n-  log_debug(gc, free)(\"Set new GCLAB size: \" SIZE_FORMAT, new_size);\n+  log_debug(gc, free)(\"Set new GCLAB size: %zu\", new_size);\n@@ -888,1 +888,1 @@\n-    log_debug(gc, free)(\"New gclab size (\" SIZE_FORMAT \") is too small for \" SIZE_FORMAT, new_size, size);\n+    log_debug(gc, free)(\"New gclab size (%zu) is too small for %zu\", new_size, size);\n@@ -997,2 +997,2 @@\n-        log_debug(gc, alloc)(\"Thread: %s, Result: \" PTR_FORMAT \", Request: %s, Size: \" SIZE_FORMAT\n-                             \", Original: \" SIZE_FORMAT \", Latest: \" SIZE_FORMAT,\n+        log_debug(gc, alloc)(\"Thread: %s, Result: \" PTR_FORMAT \", Request: %s, Size: %zu\"\n+                             \", Original: %zu, Latest: %zu\",\n@@ -1027,1 +1027,1 @@\n-            \"Only LAB allocations are elastic: %s, requested = \" SIZE_FORMAT \", actual = \" SIZE_FORMAT,\n+            \"Only LAB allocations are elastic: %s, requested = %zu, actual = %zu\",\n@@ -1179,1 +1179,1 @@\n-      assert(r->has_live(), \"Region \" SIZE_FORMAT \" should have been reclaimed early\", r->index());\n+      assert(r->has_live(), \"Region %zu should have been reclaimed early\", r->index());\n@@ -2226,1 +2226,1 @@\n-  assert(r->pin_count() > 0, \"Region \" SIZE_FORMAT \" should have non-zero pins\", r->index());\n+  assert(r->pin_count() > 0, \"Region %zu should have non-zero pins\", r->index());\n@@ -2258,1 +2258,1 @@\n-             \"Region \" SIZE_FORMAT \" pinning status is inconsistent\", i);\n+             \"Region %zu pinning status is inconsistent\", i);\n@@ -2416,1 +2416,1 @@\n-         \"sanity: old_region_count: \" SIZE_FORMAT \", first_old_region: \" SIZE_FORMAT \", last_old_region: \" SIZE_FORMAT,\n+         \"sanity: old_region_count: %zu, first_old_region: %zu, last_old_region: %zu\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.cpp","additions":20,"deletions":20,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -385,1 +386,1 @@\n-    assert(false, \"Bad affiliation (%d) for region \" SIZE_FORMAT, region_affiliation(index), index);\n+    assert(false, \"Bad affiliation (%d) for region %zu\", region_affiliation(index), index);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.inline.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -245,1 +245,1 @@\n-  assert(pin_count() > 0, \"Should have pins: \" SIZE_FORMAT, pin_count());\n+  assert(pin_count() > 0, \"Should have pins: %zu\", pin_count());\n@@ -267,1 +267,1 @@\n-  assert(pin_count() == 0, \"Should not have pins: \" SIZE_FORMAT, pin_count());\n+  assert(pin_count() == 0, \"Should not have pins: %zu\", pin_count());\n@@ -401,1 +401,1 @@\n-  st->print(SIZE_FORMAT_W(5), this->_index);\n+  st->print(\"%5zu\", this->_index);\n@@ -448,3 +448,3 @@\n-  st->print(\"|U \" SIZE_FORMAT_W(5) \"%1s\", byte_size_in_proper_unit(used()),                proper_unit_for_byte_size(used()));\n-  st->print(\"|T \" SIZE_FORMAT_W(5) \"%1s\", byte_size_in_proper_unit(get_tlab_allocs()),     proper_unit_for_byte_size(get_tlab_allocs()));\n-  st->print(\"|G \" SIZE_FORMAT_W(5) \"%1s\", byte_size_in_proper_unit(get_gclab_allocs()),    proper_unit_for_byte_size(get_gclab_allocs()));\n+  st->print(\"|U %5zu%1s\", byte_size_in_proper_unit(used()),                proper_unit_for_byte_size(used()));\n+  st->print(\"|T %5zu%1s\", byte_size_in_proper_unit(get_tlab_allocs()),     proper_unit_for_byte_size(get_tlab_allocs()));\n+  st->print(\"|G %5zu%1s\", byte_size_in_proper_unit(get_gclab_allocs()),    proper_unit_for_byte_size(get_gclab_allocs()));\n@@ -452,1 +452,1 @@\n-    st->print(\"|P \" SIZE_FORMAT_W(5) \"%1s\", byte_size_in_proper_unit(get_plab_allocs()),   proper_unit_for_byte_size(get_plab_allocs()));\n+    st->print(\"|P %5zu%1s\", byte_size_in_proper_unit(get_plab_allocs()),   proper_unit_for_byte_size(get_plab_allocs()));\n@@ -454,3 +454,3 @@\n-  st->print(\"|S \" SIZE_FORMAT_W(5) \"%1s\", byte_size_in_proper_unit(get_shared_allocs()),   proper_unit_for_byte_size(get_shared_allocs()));\n-  st->print(\"|L \" SIZE_FORMAT_W(5) \"%1s\", byte_size_in_proper_unit(get_live_data_bytes()), proper_unit_for_byte_size(get_live_data_bytes()));\n-  st->print(\"|CP \" SIZE_FORMAT_W(3), pin_count());\n+  st->print(\"|S %5zu%1s\", byte_size_in_proper_unit(get_shared_allocs()),   proper_unit_for_byte_size(get_shared_allocs()));\n+  st->print(\"|L %5zu%1s\", byte_size_in_proper_unit(get_live_data_bytes()), proper_unit_for_byte_size(get_live_data_bytes()));\n+  st->print(\"|CP %3zu\", pin_count());\n@@ -678,2 +678,2 @@\n-      err_msg message(\"Max heap size (\" SIZE_FORMAT \"%s) is too low to afford the minimum number \"\n-                      \"of regions (\" SIZE_FORMAT \") of minimum region size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"Max heap size (%zu%s) is too low to afford the minimum number \"\n+                      \"of regions (%zu) of minimum region size (%zu%s).\",\n@@ -686,1 +686,1 @@\n-      err_msg message(\"\" SIZE_FORMAT \"%s should not be lower than minimum region size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"%zu%s should not be lower than minimum region size (%zu%s).\",\n@@ -692,1 +692,1 @@\n-      err_msg message(\"\" SIZE_FORMAT \"%s should not be lower than TLAB size size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"%zu%s should not be lower than TLAB size size (%zu%s).\",\n@@ -698,1 +698,1 @@\n-      err_msg message(\"\" SIZE_FORMAT \"%s should not be lower than min region size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"%zu%s should not be lower than min region size (%zu%s).\",\n@@ -704,1 +704,1 @@\n-      err_msg message(\"Minimum (\" SIZE_FORMAT \"%s) should be larger than maximum (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"Minimum (%zu%s) should be larger than maximum (%zu%s).\",\n@@ -720,2 +720,2 @@\n-      err_msg message(\"Max heap size (\" SIZE_FORMAT \"%s) is too low to afford the minimum number \"\n-                              \"of regions (\" SIZE_FORMAT \") of requested size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"Max heap size (%zu%s) is too low to afford the minimum number \"\n+                              \"of regions (%zu) of requested size (%zu%s).\",\n@@ -728,1 +728,1 @@\n-      err_msg message(\"Heap region size (\" SIZE_FORMAT \"%s) should be larger than min region size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"Heap region size (%zu%s) should be larger than min region size (%zu%s).\",\n@@ -734,1 +734,1 @@\n-      err_msg message(\"Heap region size (\" SIZE_FORMAT \"%s) should be lower than max region size (\" SIZE_FORMAT \"%s).\",\n+      err_msg message(\"Heap region size (%zu%s) should be lower than max region size (%zu%s).\",\n@@ -846,1 +846,1 @@\n-  assert(pin_count() > 0, \"Region \" SIZE_FORMAT \" should have non-zero pins\", index());\n+  assert(pin_count() > 0, \"Region %zu should have non-zero pins\", index());\n@@ -860,1 +860,1 @@\n-    log_debug(gc)(\"Setting affiliation of Region \" SIZE_FORMAT \" from %s to %s, top: \" PTR_FORMAT \", TAMS: \" PTR_FORMAT\n+    log_debug(gc)(\"Setting affiliation of Region %zu from %s to %s, top: \" PTR_FORMAT \", TAMS: \" PTR_FORMAT\n@@ -874,1 +874,1 @@\n-           \"Region \" SIZE_FORMAT \", bitmap should be clear between top_bitmap: \" PTR_FORMAT \" and end: \" PTR_FORMAT, idx,\n+           \"Region %zu, bitmap should be clear between top_bitmap: \" PTR_FORMAT \" and end: \" PTR_FORMAT, idx,\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.cpp","additions":24,"deletions":24,"binary":false,"changes":48,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,1 +40,1 @@\n-  assert(is_object_aligned(size), \"alloc size breaks alignment: \" SIZE_FORMAT, size);\n+  assert(is_object_aligned(size), \"alloc size breaks alignment: %zu\", size);\n@@ -91,1 +92,1 @@\n-  assert(is_object_aligned(size), \"alloc size breaks alignment: \" SIZE_FORMAT, size);\n+  assert(is_object_aligned(size), \"alloc size breaks alignment: %zu\", size);\n@@ -163,1 +164,1 @@\n-         \"Live Data must be a subset of used() live: \" SIZE_FORMAT \" used: \" SIZE_FORMAT,\n+         \"Live Data must be a subset of used() live: %zu used: %zu\",\n@@ -174,1 +175,1 @@\n-         \"Live Data must be a subset of used before promotion live: \" SIZE_FORMAT \" used: \" SIZE_FORMAT,\n+         \"Live Data must be a subset of used before promotion live: %zu used: %zu\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegion.inline.hpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -85,1 +86,1 @@\n-    assert(!r->has_live(), \"Region \" SIZE_FORMAT \" should have no live data\", r->index());\n+    assert(!r->has_live(), \"Region %zu should have no live data\", r->index());\n@@ -87,1 +88,1 @@\n-           \"Region \" SIZE_FORMAT \" should have correct TAMS\", r->index());\n+           \"Region %zu should have correct TAMS\", r->index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionClosures.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,1 +95,1 @@\n-    ls.print_cr(JLONG_FORMAT \" \" JLONG_FORMAT \" \" SIZE_FORMAT \" \" SIZE_FORMAT \" \" SIZE_FORMAT,\n+    ls.print_cr(JLONG_FORMAT \" \" JLONG_FORMAT \" %zu %zu %zu\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionCounters.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -84,1 +85,1 @@\n-  out->print_cr(\"Region Set : \" SIZE_FORMAT \"\", count());\n+  out->print_cr(\"Region Set : %zu\", count());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeapRegionSet.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +44,1 @@\n-  log_info(gc, init)(\"Heap Region Count: \" SIZE_FORMAT, ShenandoahHeapRegion::region_count());\n+  log_info(gc, init)(\"Heap Region Count: %zu\", ShenandoahHeapRegion::region_count());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahInitLogger.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -131,1 +132,1 @@\n-    assert(region->is_affiliated(), \"Do not count live data within Free Regular Region \" SIZE_FORMAT, region_idx);\n+    assert(region->is_affiliated(), \"Do not count live data within Free Regular Region %zu\", region_idx);\n@@ -146,1 +147,1 @@\n-    assert(region->is_affiliated(), \"Do not count live data within FREE Humongous Start Region \" SIZE_FORMAT, region_idx);\n+    assert(region->is_affiliated(), \"Do not count live data within FREE Humongous Start Region %zu\", region_idx);\n@@ -150,1 +151,1 @@\n-      assert(chain_reg->is_affiliated(), \"Do not count live data within FREE Humongous Continuation Region \" SIZE_FORMAT, i);\n+      assert(chain_reg->is_affiliated(), \"Do not count live data within FREE Humongous Continuation Region %zu\", i);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMark.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,1 +157,1 @@\n-         \"BitMap index out of bounds: \" SIZE_FORMAT \" >= \" SIZE_FORMAT,\n+         \"BitMap index out of bounds: %zu >= %zu\",\n@@ -163,1 +163,1 @@\n-         \"BitMap limit out of bounds: \" SIZE_FORMAT \" > \" SIZE_FORMAT,\n+         \"BitMap limit out of bounds: %zu > %zu\",\n@@ -169,1 +169,1 @@\n-         \"BitMap range error: \" SIZE_FORMAT \" > \" SIZE_FORMAT, beg, end);\n+         \"BitMap range error: %zu > %zu\", beg, end);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkBitMap.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -59,1 +60,1 @@\n-    assert(start_idx == end_idx, \"Expected range to be within same region (\" SIZE_FORMAT \", \" SIZE_FORMAT \")\", start_idx, end_idx);\n+    assert(start_idx == end_idx, \"Expected range to be within same region (%zu, %zu)\", start_idx, end_idx);\n@@ -76,1 +77,1 @@\n-  log_debug(gc)(\"SMC:initialize_top_at_mark_start for Region \" SIZE_FORMAT \", TAMS: \" PTR_FORMAT \", TopOfBitMap: \" PTR_FORMAT,\n+  log_debug(gc)(\"SMC:initialize_top_at_mark_start for Region %zu, TAMS: \" PTR_FORMAT \", TopOfBitMap: \" PTR_FORMAT,\n@@ -88,1 +89,1 @@\n-  log_debug(gc)(\"SMC:clear_bitmap for %s Region \" SIZE_FORMAT \", top_bitmap: \" PTR_FORMAT,\n+  log_debug(gc)(\"SMC:clear_bitmap for %s Region %zu, top_bitmap: \" PTR_FORMAT,\n@@ -97,1 +98,1 @@\n-         \"Region \" SIZE_FORMAT \" should have no marks in bitmap\", r->index());\n+         \"Region %zu should have no marks in bitmap\", r->index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +97,1 @@\n-         \"Region \" SIZE_FORMAT\", TAMS updates should be monotonic: \" PTR_FORMAT \" -> \" PTR_FORMAT,\n+         \"Region %zu, TAMS updates should be monotonic: \" PTR_FORMAT \" -> \" PTR_FORMAT,\n@@ -99,1 +100,1 @@\n-         \"Region \" SIZE_FORMAT\", top_bitmaps updates should be monotonic: \" PTR_FORMAT \" -> \" PTR_FORMAT,\n+         \"Region %zu, top_bitmaps updates should be monotonic: \" PTR_FORMAT \" -> \" PTR_FORMAT,\n@@ -102,1 +103,1 @@\n-         \"Region \" SIZE_FORMAT \", bitmap should be clear while adjusting TAMS: \" PTR_FORMAT \" -> \" PTR_FORMAT,\n+         \"Region %zu, bitmap should be clear while adjusting TAMS: \" PTR_FORMAT \" -> \" PTR_FORMAT,\n@@ -105,1 +106,1 @@\n-  log_debug(gc)(\"Capturing TAMS for %s Region \" SIZE_FORMAT \", was: \" PTR_FORMAT \", now: \" PTR_FORMAT,\n+  log_debug(gc)(\"Capturing TAMS for %s Region %zu, was: \" PTR_FORMAT \", now: \" PTR_FORMAT,\n@@ -122,1 +123,1 @@\n-         \"Region \" SIZE_FORMAT \" should have no marks in bitmap\", r->index());\n+         \"Region %zu should have no marks in bitmap\", r->index());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMarkingContext.inline.hpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -57,3 +58,3 @@\n-  assert(initial <= max,    \"initial: \"   SIZE_FORMAT \", max: \"       SIZE_FORMAT, initial,   max);\n-  assert(used <= max,       \"used: \"      SIZE_FORMAT \", max: \"       SIZE_FORMAT, used,      max);\n-  assert(committed <= max,  \"committed: \" SIZE_FORMAT \", max: \"       SIZE_FORMAT, committed, max);\n+  assert(initial <= max,    \"initial: %zu, max: %zu\",   initial,   max);\n+  assert(used <= max,       \"used: %zu, max: %zu\",      used,      max);\n+  assert(committed <= max,  \"committed: %zu, max: %zu\", committed, max);\n@@ -65,1 +66,1 @@\n-  assert(used <= committed, \"used: \"      SIZE_FORMAT \", committed: \" SIZE_FORMAT, used,      committed);\n+  assert(used <= committed, \"used: %zu, committed: %zu\", used,      committed);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMemoryPool.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -51,1 +52,1 @@\n-  log_info(gc, ergo)(\"%s progress for free space: \" SIZE_FORMAT \"%s, need \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"%s progress for free space: %zu%s, need %zu%s\",\n@@ -63,1 +64,1 @@\n-  log_info(gc, ergo)(\"%s progress for used space: \" SIZE_FORMAT \"%s, need \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"%s progress for used space: %zu%s, need %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahMetrics.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -4,0 +4,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -211,1 +212,1 @@\n-    assert (false, \"bucket index (%d) underflow for value (\" SIZE_FORMAT \")\", mag, val);\n+    assert (false, \"bucket index (%d) underflow for value (%zu)\", mag, val);\n@@ -216,1 +217,1 @@\n-    assert (false, \"bucket index (%d) overflow for value (\" SIZE_FORMAT \")\", mag, val);\n+    assert (false, \"bucket index (%d) overflow for value (%zu)\", mag, val);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahNumberSeq.cpp","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -111,1 +112,1 @@\n-      log_debug(gc)(\"Purged \" SIZE_FORMAT \" oops from old generation SATB buffers\", _trashed_oops);\n+      log_debug(gc)(\"Purged %zu oops from old generation SATB buffers\", _trashed_oops);\n@@ -656,3 +657,3 @@\n-    log_info(gc, ergo)(\"Promotion failed, size \" SIZE_FORMAT \", has plab? %s, PLAB remaining: \" SIZE_FORMAT\n-                       \", plab promotions %s, promotion reserve: \" SIZE_FORMAT \", promotion expended: \" SIZE_FORMAT\n-                       \", old capacity: \" SIZE_FORMAT \", old_used: \" SIZE_FORMAT \", old unaffiliated regions: \" SIZE_FORMAT,\n+    log_info(gc, ergo)(\"Promotion failed, size %zu, has plab? %s, PLAB remaining: %zu\"\n+                       \", plab promotions %s, promotion reserve: %zu, promotion expended: %zu\"\n+                       \", old capacity: %zu, old_used: %zu, old unaffiliated regions: %zu\",\n@@ -703,1 +704,1 @@\n-  log_info(gc, ergo)(\"After choosing global collection set, mixed candidates: \" UINT32_FORMAT \", coalescing candidates: \" SIZE_FORMAT,\n+  log_info(gc, ergo)(\"After choosing global collection set, mixed candidates: \" UINT32_FORMAT \", coalescing candidates: %zu\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahOldGeneration.cpp","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -76,2 +77,2 @@\n-  log_info(gc, ergo)(\"Pacer for Mark. Expected Live: \" SIZE_FORMAT \"%s, Free: \" SIZE_FORMAT \"%s, \"\n-                     \"Non-Taxable: \" SIZE_FORMAT \"%s, Alloc Tax Rate: %.1fx\",\n+  log_info(gc, ergo)(\"Pacer for Mark. Expected Live: %zu%s, Free: %zu%s, \"\n+                     \"Non-Taxable: %zu%s, Alloc Tax Rate: %.1fx\",\n@@ -101,2 +102,2 @@\n-  log_info(gc, ergo)(\"Pacer for Evacuation. Used CSet: \" SIZE_FORMAT \"%s, Free: \" SIZE_FORMAT \"%s, \"\n-                     \"Non-Taxable: \" SIZE_FORMAT \"%s, Alloc Tax Rate: %.1fx\",\n+  log_info(gc, ergo)(\"Pacer for Evacuation. Used CSet: %zu%s, Free: %zu%s, \"\n+                     \"Non-Taxable: %zu%s, Alloc Tax Rate: %.1fx\",\n@@ -126,2 +127,2 @@\n-  log_info(gc, ergo)(\"Pacer for Update Refs. Used: \" SIZE_FORMAT \"%s, Free: \" SIZE_FORMAT \"%s, \"\n-                     \"Non-Taxable: \" SIZE_FORMAT \"%s, Alloc Tax Rate: %.1fx\",\n+  log_info(gc, ergo)(\"Pacer for Update Refs. Used: %zu%s, Free: %zu%s, \"\n+                     \"Non-Taxable: %zu%s, Alloc Tax Rate: %.1fx\",\n@@ -151,1 +152,1 @@\n-  log_info(gc, ergo)(\"Pacer for Idle. Initial: \" SIZE_FORMAT \"%s, Alloc Tax Rate: %.1fx\",\n+  log_info(gc, ergo)(\"Pacer for Idle. Initial: %zu%s, Alloc Tax Rate: %.1fx\",\n@@ -167,1 +168,1 @@\n-  log_info(gc, ergo)(\"Pacer for Reset. Non-Taxable: \" SIZE_FORMAT \"%s\",\n+  log_info(gc, ergo)(\"Pacer for Reset. Non-Taxable: %zu%s\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahPacer.cpp","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -676,1 +676,1 @@\n-  log_info(gc,ref)(\"Encountered references: Soft: \" SIZE_FORMAT \", Weak: \" SIZE_FORMAT \", Final: \" SIZE_FORMAT \", Phantom: \" SIZE_FORMAT,\n+  log_info(gc,ref)(\"Encountered references: Soft: %zu, Weak: %zu, Final: %zu, Phantom: %zu\",\n@@ -678,1 +678,1 @@\n-  log_info(gc,ref)(\"Discovered  references: Soft: \" SIZE_FORMAT \", Weak: \" SIZE_FORMAT \", Final: \" SIZE_FORMAT \", Phantom: \" SIZE_FORMAT,\n+  log_info(gc,ref)(\"Discovered  references: Soft: %zu, Weak: %zu, Final: %zu, Phantom: %zu\",\n@@ -680,1 +680,1 @@\n-  log_info(gc,ref)(\"Enqueued    references: Soft: \" SIZE_FORMAT \", Weak: \" SIZE_FORMAT \", Final: \" SIZE_FORMAT \", Phantom: \" SIZE_FORMAT,\n+  log_info(gc,ref)(\"Enqueued    references: Soft: %zu, Weak: %zu, Final: %zu, Phantom: %zu\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahReferenceProcessor.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -689,1 +690,1 @@\n-                  SIZE_FORMAT \" at offset \" SIZE_FORMAT \", size: \" SIZE_FORMAT,\n+                  \"%zu at offset %zu, size: %zu\",\n@@ -859,1 +860,1 @@\n-  assert(smallest_chunk_size_words() == expected_chunk_size_words, \"_smallest_chunk_size (\" SIZE_FORMAT\") is not valid because it does not equal (\" SIZE_FORMAT \")\",\n+  assert(smallest_chunk_size_words() == expected_chunk_size_words, \"_smallest_chunk_size (%zu) is not valid because it does not equal (%zu)\",\n@@ -900,2 +901,2 @@\n-           heap->num_regions() * words_in_region, \"Total region chunks (\" SIZE_FORMAT\n-           \") do not span total heap regions (\" SIZE_FORMAT \")\", _total_chunks, _heap->num_regions());\n+           heap->num_regions() * words_in_region, \"Total region chunks (%zu\"\n+           \") do not span total heap regions (%zu)\", _total_chunks, _heap->num_regions());\n@@ -905,2 +906,2 @@\n-  assert(previous_group_span == heap->num_regions() * words_in_region, \"Total region chunks (\" SIZE_FORMAT\n-         \") do not span total heap regions (\" SIZE_FORMAT \"): \" SIZE_FORMAT \" does not equal \" SIZE_FORMAT,\n+  assert(previous_group_span == heap->num_regions() * words_in_region, \"Total region chunks (%zu\"\n+         \") do not span total heap regions (%zu): %zu does not equal %zu\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.cpp","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,2 +73,2 @@\n-  log_debug(gc, remset)(\"Worker %u: cluster = \" SIZE_FORMAT \" count = \" SIZE_FORMAT \" eor = \" INTPTR_FORMAT\n-                        \" start_addr = \" INTPTR_FORMAT \" end_addr = \" INTPTR_FORMAT \" cards = \" SIZE_FORMAT,\n+  log_debug(gc, remset)(\"Worker %u: cluster = %zu count = %zu eor = \" INTPTR_FORMAT\n+                        \" start_addr = \" INTPTR_FORMAT \" end_addr = \" INTPTR_FORMAT \" cards = %zu\",\n@@ -344,1 +345,1 @@\n-  log_debug(gc)(\"Remembered set scan processing Region \" SIZE_FORMAT \", from \" PTR_FORMAT \" to \" PTR_FORMAT \", using %s table\",\n+  log_debug(gc)(\"Remembered set scan processing Region %zu, from \" PTR_FORMAT \" to \" PTR_FORMAT \", using %s table\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahScanRemembered.inline.hpp","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -387,1 +387,1 @@\n-    log_debug(gc)(\"ShenandoahCalculateRegionStatsClosure: adding \" SIZE_FORMAT \" for %s Region \" SIZE_FORMAT \", yielding: \" SIZE_FORMAT,\n+    log_debug(gc)(\"ShenandoahCalculateRegionStatsClosure: adding %zu for %s Region %zu, yielding: %zu\",\n@@ -426,1 +426,1 @@\n-    log_debug(gc)(\"Safepoint verification: %s verified usage: \" SIZE_FORMAT \"%s, recorded usage: \" SIZE_FORMAT \"%s\",\n+    log_debug(gc)(\"Safepoint verification: %s verified usage: %zu%s, recorded usage: %zu%s\",\n@@ -447,1 +447,1 @@\n-              \"%s: generation (%s) used regions (\" SIZE_FORMAT \") must equal regions that are in use (\" SIZE_FORMAT \")\",\n+              \"%s: generation (%s) used regions (%zu) must equal regions that are in use (%zu)\",\n@@ -452,1 +452,1 @@\n-              \"%s: generation (%s) size spanned by regions (\" SIZE_FORMAT \") * region size (\" PROPERFMT\n+              \"%s: generation (%s) size spanned by regions (%zu) * region size (\" PROPERFMT\n@@ -875,1 +875,1 @@\n-                \"%s: heap used size must be consistent: heap-used = \" SIZE_FORMAT \"%s, regions-used = \" SIZE_FORMAT \"%s\",\n+                \"%s: heap used size must be consistent: heap-used = %zu%s, regions-used = %zu%s\",\n@@ -882,1 +882,1 @@\n-              \"%s: heap committed size must be consistent: heap-committed = \" SIZE_FORMAT \"%s, regions-committed = \" SIZE_FORMAT \"%s\",\n+              \"%s: heap committed size must be consistent: heap-committed = %zu%s, regions-committed = %zu%s\",\n@@ -1029,1 +1029,1 @@\n-        fatal(\"%s: Live data should match: region-live = \" SIZE_FORMAT \", verifier-live = \" UINT32_FORMAT \"\\n%s\",\n+        fatal(\"%s: Live data should match: region-live = %zu, verifier-live = \" UINT32_FORMAT \"\\n%s\",\n@@ -1038,1 +1038,1 @@\n-  log_info(gc)(\"Verify %s, Level %zd (\" SIZE_FORMAT \" reachable, \" SIZE_FORMAT \" marked)\",\n+  log_info(gc)(\"Verify %s, Level %zd (%zu reachable, %zu marked)\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}