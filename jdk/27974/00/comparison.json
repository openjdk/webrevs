{"files":[{"patch":"@@ -40,1 +40,1 @@\n-import java.util.function.Consumer;\n+import java.util.function.Function;\n@@ -239,0 +239,1 @@\n+                return allModules;\n@@ -252,0 +253,1 @@\n+            return modules;\n@@ -255,1 +257,1 @@\n-    private boolean enter(List<JCCompilationUnit> trees, Consumer<Set<ModuleSymbol>> init, ClassSymbol c) {\n+    private boolean enter(List<JCCompilationUnit> trees, Function<Set<ModuleSymbol>, Set<ModuleSymbol>> init, ClassSymbol c) {\n@@ -273,1 +275,1 @@\n-            init.accept(roots);\n+            Set<ModuleSymbol> initialized = init.apply(roots);\n@@ -275,1 +277,1 @@\n-            for (ModuleSymbol msym: roots) {\n+            for (ModuleSymbol msym : initialized) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":6,"deletions":4,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -675,0 +675,31 @@\n+    @Test\n+    public void testImportModules(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+        Path mod = Paths.get(src.toString(), \"m1\");\n+        tb.writeJavaFiles(mod,\n+                \"\"\"\n+                import module m1;\n+                module m1 {\n+                    exports p;\n+                    uses Service;\n+                    provides Service with ServiceImpl;\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p;\n+                public interface Service {\n+                }\n+                \"\"\",\n+                \"\"\"\n+                package p;\n+                public class ServiceImpl implements Service {\n+                }\n+                \"\"\");\n+        execTask(\"--module-source-path\", src.toString(),\n+                 \"--module\", \"m1\");\n+        checkModulesSpecified(\"m1\");\n+        checkPackagesIncluded(\"p\");\n+        checkTypesIncluded(\"p.Service\");\n+        checkTypesIncluded(\"p.ServiceImpl\");\n+    }\n+\n","filename":"test\/langtools\/jdk\/javadoc\/tool\/modules\/Modules.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8167975 8173596\n+ * @bug 8167975 8173596 8370334\n@@ -38,0 +38,1 @@\n+import java.util.List;\n@@ -281,0 +282,34 @@\n+\n+    @Test \/\/JDK-8370334\n+    public void testModuleImportAndAddModules(Path base) throws Exception {\n+        Path src = base.resolve(\"src\");\n+\n+        \/\/module that will be inserted using addModules:\n+        Path src_m = src.resolve(\"m\");\n+        tb.writeJavaFiles(src_m,\n+                          \"import module m; module m { exports p1; }\",\n+                          \"package p1; public class C1 { }\");\n+        \/\/test module:\n+        Path src_test = src.resolve(\"test\");\n+        tb.writeJavaFiles(src_test,\n+                          \"import module test; module test { exports p2; }\",\n+                          \"package p2; public class C2 { }\");\n+\n+        Path classes = base.resolve(\"classes\");\n+        tb.createDirectories(classes);\n+\n+        JavaCompiler c = ToolProvider.getSystemJavaCompiler();\n+        try (StandardJavaFileManager fm = c.getStandardFileManager(null, null, null)) {\n+            List<String> options = List.of(\n+                \"--module-source-path\", src.toString(),\n+                \"-d\", classes.toString()\n+            );\n+            Iterable<? extends JavaFileObject> files =\n+                    fm.getJavaFileObjects(findJavaFiles(src_test));\n+\n+            CompilationTask t = c.getTask(null, fm, null, options, null, files);\n+            t.addModules(Arrays.asList(\"m\"));\n+            \/\/expecting no errors\/crashes:\n+            Assert.check(t.call());\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/modules\/AddModulesTest.java","additions":36,"deletions":1,"binary":false,"changes":37,"status":"modified"}]}