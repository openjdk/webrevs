{"files":[{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n@@ -32,1 +33,0 @@\n-#include \"runtime\/globals.hpp\"\n@@ -35,0 +35,5 @@\n+void ShenandoahInitLogger::print() {\n+  ShenandoahInitLogger init_log;\n+  init_log.print_all();\n+}\n+\n@@ -38,22 +43,4 @@\n-  ShenandoahHeap* heap = ShenandoahHeap::heap();\n-\n-  log_info(gc, init)(\"Mode: %s\",\n-                     heap->mode()->name());\n-\n-  log_info(gc, init)(\"Heuristics: %s\",\n-                     heap->heuristics()->name());\n-\n-  log_info(gc, init)(\"Heap Region Count: \" SIZE_FORMAT,\n-                     ShenandoahHeapRegion::region_count());\n-\n-  log_info(gc, init)(\"Heap Region Size: \" SIZE_FORMAT \"%s\",\n-                     byte_size_in_exact_unit(ShenandoahHeapRegion::region_size_bytes()),\n-                     exact_unit_for_byte_size(ShenandoahHeapRegion::region_size_bytes()));\n-\n-  log_info(gc, init)(\"TLAB Size Max: \" SIZE_FORMAT \"%s\",\n-                     byte_size_in_exact_unit(ShenandoahHeapRegion::max_tlab_size_bytes()),\n-                     exact_unit_for_byte_size(ShenandoahHeapRegion::max_tlab_size_bytes()));\n-\n-  log_info(gc, init)(\"Humongous Object Threshold: \" SIZE_FORMAT \"%s\",\n-          byte_size_in_exact_unit(ShenandoahHeapRegion::humongous_threshold_bytes()),\n-          exact_unit_for_byte_size(ShenandoahHeapRegion::humongous_threshold_bytes()));\n+  log_info(gc, init)(\"Heap Region Count: \" SIZE_FORMAT, ShenandoahHeapRegion::region_count());\n+  log_info(gc, init)(\"Heap Region Size: \" EXACTFMT, EXACTFMTARGS(ShenandoahHeapRegion::region_size_bytes()));\n+  log_info(gc, init)(\"TLAB Size Max: \" EXACTFMT, EXACTFMTARGS(ShenandoahHeapRegion::max_tlab_size_bytes()));\n+  log_info(gc, init)(\"Humongous Object Threshold: \" EXACTFMT, EXACTFMTARGS(ShenandoahHeapRegion::humongous_threshold_bytes()));\n@@ -62,3 +49,6 @@\n-void ShenandoahInitLogger::print() {\n-  ShenandoahInitLogger init_log;\n-  init_log.print_all();\n+void ShenandoahInitLogger::print_gc_specific() {\n+  GCInitLogger::print_gc_specific();\n+\n+  ShenandoahHeap* heap = ShenandoahHeap::heap();\n+  log_info(gc, init)(\"Mode: %s\", heap->mode()->name());\n+  log_info(gc, init)(\"Heuristics: %s\", heap->heuristics()->name());\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahInitLogger.cpp","additions":16,"deletions":26,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -32,1 +32,2 @@\n-  virtual void print_heap();\n+  void print_heap() override;\n+  void print_gc_specific() override;\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahInitLogger.hpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}