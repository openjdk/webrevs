{"files":[{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2024, Red Hat, Inc.\n+ *\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import javax.crypto.*;\n+import java.security.Key;\n+import java.security.KeyPairGenerator;\n+import java.security.Provider;\n+\n+\/*\n+ * @test\n+ * @bug 8328556\n+ * @library \/test\/lib ..\n+ * @run main\/othervm\/timeout=30 -DCUSTOM_P11_CONFIG_NAME=p11-nss-sensitive.txt TestLargeSecretKeys\n+ *\/\n+\n+public final class TestLargeSecretKeys extends PKCS11Test {\n+\n+    public void main(Provider p) throws Exception {\n+        Key k = generateLargeSecretKey(p);\n+        Mac m = Mac.getInstance(\"HmacSHA512\", p);\n+        m.init(k);\n+        m.doFinal(new byte[10]);\n+        \/\/ Before the fix for 8328556, the next call would require to re-build\n+        \/\/ the key in the NSS Software Token by means of a call to\n+        \/\/ C_UnwrapKey because the key's CKA_SENSITIVE attribute is CK_TRUE.\n+        \/\/ Thid call would fail with a CKR_TEMPLATE_INCONSISTENT error due to\n+        \/\/ secret key length checks in NSS: length of 384 bytes is greater\n+        \/\/ than 256 (defined as MAX_KEY_LEN in pkcs11i.h). With 8328556, the\n+        \/\/ key was never extracted after its first use so re-building for the\n+        \/\/ second use is not necessary.\n+        m.init(k);\n+        m.doFinal(new byte[10]);\n+    }\n+\n+    private static Key generateLargeSecretKey(Provider p) throws Exception {\n+        KeyPairGenerator kpg1 = KeyPairGenerator.getInstance(\"DH\", p);\n+        KeyPairGenerator kpg2 = KeyPairGenerator.getInstance(\"DH\", p);\n+        kpg1.initialize(3072);\n+        kpg2.initialize(3072);\n+        Key privK = kpg1.generateKeyPair().getPrivate();\n+        Key pubK = kpg2.generateKeyPair().getPublic();\n+        KeyAgreement ka = KeyAgreement.getInstance(\"DH\", p);\n+        ka.init(privK);\n+        ka.doPhase(pubK, true);\n+        return ka.generateSecret(\"TlsPremasterSecret\");\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        main(new TestLargeSecretKeys());\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/pkcs11\/Mac\/TestLargeSecretKeys.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"}]}