{"files":[{"patch":"@@ -1803,3 +1803,1 @@\n-void CodeCache::write_perf_map() {\n-  MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n-\n+CodeCache::DefaultPerfMapFile::DefaultPerfMapFile() {\n@@ -1807,2 +1805,6 @@\n-  char fname[32];\n-  jio_snprintf(fname, sizeof(fname), \"\/tmp\/perf-%d.map\", os::current_process_id());\n+  \/\/ It is used as the default file name.\n+  jio_snprintf(_name, sizeof(_name), \"\/tmp\/perf-%d.map\", os::current_process_id());\n+}\n+\n+void CodeCache::write_perf_map(const char* filename) {\n+  MutexLocker mu(CodeCache_lock, Mutex::_no_safepoint_check_flag);\n@@ -1810,1 +1812,1 @@\n-  fileStream fs(fname, \"w\");\n+  fileStream fs(filename, \"w\");\n@@ -1812,1 +1814,1 @@\n-    log_warning(codecache)(\"Failed to create %s for perf map\", fname);\n+    log_warning(codecache)(\"Failed to create %s for perf map\", filename);\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":9,"deletions":7,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -226,0 +226,7 @@\n+  LINUX_ONLY(class DefaultPerfMapFile {\n+    char _name[32];\n+  public:\n+    DefaultPerfMapFile();\n+    const char* name() const  { return _name; }\n+  };)\n+\n@@ -234,1 +241,1 @@\n-  LINUX_ONLY(static void write_perf_map();)\n+  LINUX_ONLY(static void write_perf_map(const char* filename);)\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -506,1 +506,2 @@\n-    CodeCache::write_perf_map();\n+    CodeCache::DefaultPerfMapFile file;\n+    CodeCache::write_perf_map(file.name());\n","filename":"src\/hotspot\/share\/runtime\/java.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -845,0 +845,7 @@\n+PerfMapDCmd::PerfMapDCmd(outputStream* output, bool heap) :\n+             DCmdWithParser(output, heap),\n+  _filename(\"filename\", \"Name of the map file\", \"STRING\", false)\n+{\n+  _dcmdparser.add_dcmd_argument(&_filename);\n+}\n+\n@@ -846,1 +853,6 @@\n-  CodeCache::write_perf_map();\n+  if (_filename.value() != nullptr) {\n+    CodeCache::write_perf_map(_filename.value());\n+  } else {\n+    CodeCache::DefaultPerfMapFile file;\n+    CodeCache::write_perf_map(file.name());\n+  }\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -580,1 +580,3 @@\n-class PerfMapDCmd : public DCmd {\n+class PerfMapDCmd : public DCmdWithParser {\n+protected:\n+  DCmdArgument<char*> _filename;\n@@ -582,1 +584,2 @@\n-  PerfMapDCmd(outputStream* output, bool heap) : DCmd(output, heap) {}\n+  static int num_arguments() { return 1; }\n+  PerfMapDCmd(outputStream* output, bool heap);\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -49,0 +49,1 @@\n+import java.util.UUID;\n@@ -61,2 +62,2 @@\n-    public void run(CommandExecutor executor) {\n-        OutputAnalyzer output = executor.execute(\"Compiler.perfmap\");\n+    public void run(CommandExecutor executor, String cmd, Path path) {\n+        OutputAnalyzer output = executor.execute(cmd);\n@@ -67,3 +68,0 @@\n-        final long pid = ProcessHandle.current().pid();\n-        final Path path = Paths.get(String.format(\"\/tmp\/perf-%d.map\", pid));\n-\n@@ -84,2 +82,14 @@\n-    public void jmx() {\n-        run(new JMXExecutor());\n+    public void defaultMapFile() {\n+        final long pid = ProcessHandle.current().pid();\n+        final Path path = Paths.get(String.format(\"\/tmp\/perf-%d.map\", pid));\n+        run(new JMXExecutor(), \"Compiler.perfmap\", path);\n+    }\n+\n+    @Test\n+    public void specifiedMapFile() {\n+        String test_dir = System.getProperty(\"test.dir\", \".\");\n+        Path path = null;\n+        do {\n+            path = Paths.get(String.format(\"%s\/%s.map\", test_dir, UUID.randomUUID().toString()));\n+        } while(Files.exists(path));\n+        run(new JMXExecutor(), \"Compiler.perfmap filename=\" + path.toString(), path);\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/PerfMapTest.java","additions":17,"deletions":7,"binary":false,"changes":24,"status":"modified"}]}