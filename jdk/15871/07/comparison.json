{"files":[{"patch":"@@ -1803,1 +1803,1 @@\n-void CodeCache::write_perf_map() {\n+void CodeCache::write_perf_map(const char* filename) {\n@@ -1806,1 +1806,2 @@\n-  \/\/ Perf expects to find the map file at \/tmp\/perf-<pid>.map.\n+  \/\/ Perf expects to find the map file at \/tmp\/perf-<pid>.map\n+  \/\/ if the file name is not specified.\n@@ -1808,1 +1809,4 @@\n-  jio_snprintf(fname, sizeof(fname), \"\/tmp\/perf-%d.map\", os::current_process_id());\n+  if (filename == nullptr) {\n+    jio_snprintf(fname, sizeof(fname), \"\/tmp\/perf-%d.map\", os::current_process_id());\n+    filename = fname;\n+  }\n@@ -1810,1 +1814,1 @@\n-  fileStream fs(fname, \"w\");\n+  fileStream fs(filename, \"w\");\n@@ -1812,1 +1816,1 @@\n-    log_warning(codecache)(\"Failed to create %s for perf map\", fname);\n+    log_warning(codecache)(\"Failed to create %s for perf map\", filename);\n","filename":"src\/hotspot\/share\/code\/codeCache.cpp","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -234,1 +234,1 @@\n-  LINUX_ONLY(static void write_perf_map();)\n+  LINUX_ONLY(static void write_perf_map(const char* filename = nullptr);)\n","filename":"src\/hotspot\/share\/code\/codeCache.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -845,0 +845,7 @@\n+PerfMapDCmd::PerfMapDCmd(outputStream* output, bool heap) :\n+             DCmdWithParser(output, heap),\n+  _filename(\"filename\", \"Name of the map file\", \"STRING\", false)\n+{\n+  _dcmdparser.add_dcmd_argument(&_filename);\n+}\n+\n@@ -846,1 +853,1 @@\n-  CodeCache::write_perf_map();\n+  CodeCache::write_perf_map(_filename.value());\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.cpp","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -580,1 +580,3 @@\n-class PerfMapDCmd : public DCmd {\n+class PerfMapDCmd : public DCmdWithParser {\n+protected:\n+  DCmdArgument<char*> _filename;\n@@ -582,1 +584,2 @@\n-  PerfMapDCmd(outputStream* output, bool heap) : DCmd(output, heap) {}\n+  static int num_arguments() { return 1; }\n+  PerfMapDCmd(outputStream* output, bool heap);\n","filename":"src\/hotspot\/share\/services\/diagnosticCommand.hpp","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -181,1 +181,1 @@\n-\\f[V]Compiler.perfmap\\f[R] (Linux only)\n+\\f[V]Compiler.perfmap\\f[R] [\\f[I]arguments\\f[R]] (Linux only)\n@@ -186,0 +186,10 @@\n+.PP\n+\\f[I]arguments\\f[R]:\n+.IP \\[bu] 2\n+\\f[V]filename\\f[R]: (Optional) Name of the map file (STRING, no default\n+value)\n+.PP\n+If \\f[V]filename\\f[R] is not specified, a default file name is chosen\n+using the pid of the target JVM process.\n+For example, if the pid is \\f[V]12345\\f[R], then the default\n+\\f[V]filename\\f[R] will be \\f[V]\/tmp\/perf-12345.map\\f[R].\n","filename":"src\/jdk.jcmd\/share\/man\/jcmd.1","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,2 +2,2 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n- * Copyright (c) 2020, Arm Limited. All rights reserved.\n+ * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2023, Arm Limited. All rights reserved.\n@@ -49,0 +49,1 @@\n+import java.util.UUID;\n@@ -61,2 +62,2 @@\n-    public void run(CommandExecutor executor) {\n-        OutputAnalyzer output = executor.execute(\"Compiler.perfmap\");\n+    public void run(CommandExecutor executor, String cmd, Path path) {\n+        OutputAnalyzer output = executor.execute(cmd);\n@@ -67,3 +68,0 @@\n-        final long pid = ProcessHandle.current().pid();\n-        final Path path = Paths.get(String.format(\"\/tmp\/perf-%d.map\", pid));\n-\n@@ -84,2 +82,14 @@\n-    public void jmx() {\n-        run(new JMXExecutor());\n+    public void defaultMapFile() {\n+        final long pid = ProcessHandle.current().pid();\n+        final Path path = Paths.get(String.format(\"\/tmp\/perf-%d.map\", pid));\n+        run(new JMXExecutor(), \"Compiler.perfmap\", path);\n+    }\n+\n+    @Test\n+    public void specifiedMapFile() {\n+        String test_dir = System.getProperty(\"test.dir\", \".\");\n+        Path path = null;\n+        do {\n+            path = Paths.get(String.format(\"%s\/%s.map\", test_dir, UUID.randomUUID().toString()));\n+        } while(Files.exists(path));\n+        run(new JMXExecutor(), \"Compiler.perfmap \" + path.toString(), path);\n","filename":"test\/hotspot\/jtreg\/serviceability\/dcmd\/compiler\/PerfMapTest.java","additions":19,"deletions":9,"binary":false,"changes":28,"status":"modified"}]}