{"files":[{"patch":"@@ -37,1 +37,0 @@\n- *             jdk.test.whitebox.WhiteBox$WhiteBoxPermission\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestHumongousConcurrentStartUndo.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -133,30 +133,0 @@\n-    \/\/ Add commonly used inner classes that are often omitted by mistake. Currently\n-    \/\/ we support only jdk\/test\/whitebox\/WhiteBox$WhiteBoxPermission.\n-    \/\/ See JDK-8199290\n-    private static String[] addInnerClasses(String[] classes, int startIdx) {\n-        boolean seenNewWb = false;\n-        boolean seenNewWbInner = false;\n-        \/\/ This method is different than ClassFileInstaller.addInnerClasses which\n-        \/\/ uses \".\" as the package delimiter :-(\n-        final String newWb = \"jdk\/test\/whitebox\/WhiteBox\";\n-        final String newWbInner = newWb + \"$WhiteBoxPermission\";\n-\n-        ArrayList<String> list = new ArrayList<>();\n-\n-        for (int i = startIdx; i < classes.length; i++) {\n-            String cls = classes[i];\n-            list.add(cls);\n-            switch (cls) {\n-            case newWb:      seenNewWb      = true; break;\n-            case newWbInner: seenNewWbInner = true; break;\n-            }\n-        }\n-        if (seenNewWb && !seenNewWbInner) {\n-            list.add(newWbInner);\n-        }\n-        String[] array = new String[list.size()];\n-        list.toArray(array);\n-        return array;\n-    }\n-\n-\n@@ -178,2 +148,0 @@\n-        classNames = addInnerClasses(classNames, 0);\n-\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/JarBuilder.java","additions":0,"deletions":32,"binary":false,"changes":32,"status":"modified"},{"patch":"@@ -42,2 +42,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -114,1 +112,1 @@\n-     * @param ni2 An other network interface, may be {@code null}\n+     * @param ni2 Another network interface, may be {@code null}\n@@ -450,1 +448,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -452,1 +449,0 @@\n-        PrivilegedAction<Void> pa = () -> {\n@@ -459,1 +455,0 @@\n-            return null;\n@@ -462,2 +457,1 @@\n-        }};\n-        AccessController.doPrivileged(pa);\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/NetworkConfiguration.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -41,3 +39,3 @@\n-    public  static final String vmName      = privilegedGetProperty(\"java.vm.name\");\n-    public  static final String vmInfo      = privilegedGetProperty(\"java.vm.info\");\n-    private static final String osVersion   = privilegedGetProperty(\"os.version\");\n+    public  static final String vmName      = System.getProperty(\"java.vm.name\");\n+    public  static final String vmInfo      = System.getProperty(\"java.vm.info\");\n+    private static final String osVersion   = System.getProperty(\"os.version\");\n@@ -46,14 +44,8 @@\n-    private static final String osName      = privilegedGetProperty(\"os.name\");\n-    private static final String dataModel   = privilegedGetProperty(\"sun.arch.data.model\");\n-    private static final String vmVersion   = privilegedGetProperty(\"java.vm.version\");\n-    private static final String jdkDebug    = privilegedGetProperty(\"jdk.debug\");\n-    private static final String osArch      = privilegedGetProperty(\"os.arch\");\n-    private static final String userName    = privilegedGetProperty(\"user.name\");\n-    private static final String compiler    = privilegedGetProperty(\"sun.management.compiler\");\n-    private static final String testJdk     = privilegedGetProperty(\"test.jdk\");\n-\n-    @SuppressWarnings(\"removal\")\n-    private static String privilegedGetProperty(String key) {\n-        return AccessController.doPrivileged((\n-                PrivilegedAction<String>) () -> System.getProperty(key));\n-    }\n+    private static final String osName      = System.getProperty(\"os.name\");\n+    private static final String dataModel   = System.getProperty(\"sun.arch.data.model\");\n+    private static final String vmVersion   = System.getProperty(\"java.vm.version\");\n+    private static final String jdkDebug    = System.getProperty(\"jdk.debug\");\n+    private static final String osArch      = System.getProperty(\"os.arch\");\n+    private static final String userName    = System.getProperty(\"user.name\");\n+    private static final String compiler    = System.getProperty(\"sun.management.compiler\");\n+    private static final String testJdk     = System.getProperty(\"test.jdk\");\n","filename":"test\/lib\/jdk\/test\/lib\/Platform.java","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,3 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -206,1 +203,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -211,12 +207,6 @@\n-            try {\n-                var bb = AccessController.doPrivileged(\n-                    (PrivilegedExceptionAction<byte[]>) () -> Files.readAllBytes(deny_ptrace));\n-                if (bb.length == 0) {\n-                    throw new Error(\"deny_ptrace is empty\");\n-                }\n-                if (bb[0] != '0') {\n-                    return false;\n-                }\n-            } catch (PrivilegedActionException e) {\n-                IOException t = (IOException) e.getException();\n-                throw t;\n+            var bb = Files.readAllBytes(deny_ptrace);\n+            if (bb.length == 0) {\n+                throw new Error(\"deny_ptrace is empty\");\n+            }\n+            if (bb[0] != '0') {\n+                return false;\n@@ -233,10 +223,8 @@\n-            try {\n-                var bb = AccessController.doPrivileged(\n-                    (PrivilegedExceptionAction<byte[]>) () -> Files.readAllBytes(ptrace_scope));\n-                if (bb.length == 0) {\n-                    throw new Error(\"ptrace_scope is empty\");\n-                }\n-                byte yama_scope = bb[0];\n-                if (yama_scope == '3') {\n-                    return false;\n-                }\n+            var bb = Files.readAllBytes(ptrace_scope);\n+            if (bb.length == 0) {\n+                throw new Error(\"ptrace_scope is empty\");\n+            }\n+            byte yama_scope = bb[0];\n+            if (yama_scope == '3') {\n+                return false;\n+            }\n@@ -244,6 +232,2 @@\n-                if (!Platform.isRoot() && yama_scope != '0') {\n-                    return false;\n-                }\n-            } catch (PrivilegedActionException e) {\n-                IOException t = (IOException) e.getException();\n-                throw t;\n+            if (!Platform.isRoot() && yama_scope != '0') {\n+                return false;\n","filename":"test\/lib\/jdk\/test\/lib\/SA\/SATestUtils.java","additions":17,"deletions":33,"binary":false,"changes":50,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.Arrays;\n@@ -89,1 +90,1 @@\n-            String[] classes = addInnerClasses(args, 2);\n+            String[] classes = Arrays.copyOfRange(args, 2, args.length);\n@@ -95,1 +96,1 @@\n-            String[] classes = addInnerClasses(args, 0);\n+            String[] classes = Arrays.copyOfRange(args, 0, args.length);\n@@ -102,27 +103,0 @@\n-    \/\/ Add commonly used inner classes that are often omitted by mistake. Currently\n-    \/\/ we support only jdk.test.whitebox.WhiteBox$WhiteBoxPermission.\n-    \/\/ See JDK-8199290\n-    private static String[] addInnerClasses(String[] classes, int startIdx) {\n-        boolean seenNewWb = false;\n-        boolean seenNewWbInner = false;\n-        final String newWb = \"jdk.test.whitebox.WhiteBox\";\n-        final String newWbInner = newWb + \"$WhiteBoxPermission\";\n-\n-        ArrayList<String> list = new ArrayList<>();\n-\n-        for (int i = startIdx; i < classes.length; i++) {\n-            String cls = classes[i];\n-            list.add(cls);\n-            switch (cls) {\n-            case newWb:      seenNewWb      = true; break;\n-            case newWbInner: seenNewWbInner = true; break;\n-            }\n-        }\n-        if (seenNewWb && !seenNewWbInner) {\n-            list.add(newWbInner);\n-        }\n-        String[] array = new String[list.size()];\n-        list.toArray(array);\n-        return array;\n-    }\n-\n@@ -191,1 +165,0 @@\n-        classes = addInnerClasses(classes, 0);\n@@ -197,1 +170,0 @@\n-        classes = addInnerClasses(classes, 0);\n","filename":"test\/lib\/jdk\/test\/lib\/helpers\/ClassFileInstaller.java","additions":4,"deletions":32,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.io.UncheckedIOException;\n@@ -38,4 +37,1 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.concurrent.Callable;\n+\n@@ -58,6 +54,4 @@\n-        hasIPv4 = runPrivilegedAction(() -> isSupported(Inet4Address.class));\n-        hasIPv6 = runPrivilegedAction(() -> isSupported(Inet6Address.class));\n-        preferIPv4Stack = runPrivilegedAction(() -> Boolean.parseBoolean(\n-            System.getProperty(\"java.net.preferIPv4Stack\")));\n-        preferIPv6Addresses = runPrivilegedAction(() -> Boolean.parseBoolean(\n-            System.getProperty(\"java.net.preferIPv6Addresses\")));\n+        hasIPv4 = isSupported(Inet4Address.class);\n+        hasIPv6 = isSupported(Inet6Address.class);\n+        preferIPv4Stack = Boolean.parseBoolean(System.getProperty(\"java.net.preferIPv4Stack\"));\n+        preferIPv6Addresses = Boolean.parseBoolean(System.getProperty(\"java.net.preferIPv6Addresses\"));\n@@ -79,10 +73,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static <T> T runPrivilegedAction(Callable<T> callable) {\n-        try {\n-            PrivilegedExceptionAction<T> pa = () -> callable.call();\n-            return AccessController.doPrivileged(pa);\n-        } catch (PrivilegedActionException pae) {\n-            throw new UncheckedIOException((IOException) pae.getCause());\n-        }\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/net\/IPSupport.java","additions":6,"deletions":22,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-\n@@ -3,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -105,1 +104,1 @@\n-                    } catch (IllegalArgumentException | FileSystemNotFoundException | SecurityException ex) {\n+                    } catch (IllegalArgumentException | FileSystemNotFoundException ex) {\n","filename":"test\/lib\/jdk\/test\/lib\/net\/SimpleHttpServer.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,7 +37,0 @@\n- *\n- * Using this class with a security manager requires the following\n- * permissions to be granted:\n- *\n- * permission \"java.util.PropertyPermission\" \"test.src.path\", \"read\";\n- * permission java.io.FilePermission \"\/path\/to\/test\/lib\/jdk\/test\/lib\/testkeys\", \"read\";\n- * The exact path above depends on the location of the test.\n@@ -57,1 +50,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -59,28 +51,10 @@\n-        try {\n-            final String proto = protocols.get();\n-            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n-                @Override\n-                public Void run() throws Exception {\n-                    String paths = System.getProperty(\"test.src.path\");\n-                    StringTokenizer st = new StringTokenizer(paths, File.pathSeparator);\n-                    boolean securityExceptions = false;\n-                    while (st.hasMoreTokens()) {\n-                        String path = st.nextToken();\n-                        try {\n-                            File f = new File(path, \"jdk\/test\/lib\/net\/testkeys\");\n-                            if (f.exists()) {\n-                                try (FileInputStream fis = new FileInputStream(f)) {\n-                                    init(fis, proto);\n-                                    return null;\n-                                }\n-                            }\n-                        } catch (SecurityException e) {\n-                            \/\/ catch and ignore because permission only required\n-                            \/\/ for one entry on path (at most)\n-                            securityExceptions = true;\n-                        }\n-                    }\n-                    if (securityExceptions) {\n-                        System.err.println(\"SecurityExceptions thrown on loading testkeys\");\n-                    }\n-                    return null;\n+        final String proto = protocols.get();\n+\n+        String paths = System.getProperty(\"test.src.path\");\n+        StringTokenizer st = new StringTokenizer(paths, File.pathSeparator);\n+        while (st.hasMoreTokens()) {\n+            String path = st.nextToken();\n+            File f = new File(path, \"jdk\/test\/lib\/net\/testkeys\");\n+            if (f.exists()) {\n+                try (FileInputStream fis = new FileInputStream(f)) {\n+                    init(fis, proto);\n@@ -88,10 +62,1 @@\n-            });\n-        } catch (PrivilegedActionException pae) {\n-            Throwable t = pae.getCause() != null ? pae.getCause() : pae;\n-            if (t instanceof IOException)\n-                throw (IOException)t;\n-            if (t instanceof RuntimeException)\n-                throw (RuntimeException)t;\n-            if (t instanceof Error)\n-                throw (Error)t;\n-            throw new RuntimeException(t);\n+            }\n","filename":"test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.java","additions":12,"deletions":47,"binary":false,"changes":59,"status":"modified"},{"patch":"@@ -42,3 +42,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -255,1 +252,1 @@\n-        Process p = privilegedStart(processBuilder);\n+        Process p = processBuilder.start();\n@@ -719,1 +716,1 @@\n-            p = privilegedStart(pb);\n+            p = pb.start();\n@@ -735,4 +732,1 @@\n-                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                    Files.writeString(Path.of(fileName), processOutput);\n-                    return null;\n-                });\n+                Files.writeString(Path.of(fileName), processOutput);\n@@ -886,10 +880,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static Process privilegedStart(ProcessBuilder pb) throws IOException {\n-        try {\n-            return AccessController.doPrivileged(\n-                    (PrivilegedExceptionAction<Process>) pb::start);\n-        } catch (PrivilegedActionException e) {\n-            throw (IOException) e.getException();\n-        }\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.security.BasicPermission;\n@@ -38,6 +37,0 @@\n-  @SuppressWarnings(\"serial\")\n-  public static class WhiteBoxPermission extends BasicPermission {\n-    public WhiteBoxPermission(String s) {\n-      super(s);\n-    }\n-  }\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}