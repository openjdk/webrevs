{"files":[{"patch":"@@ -33,2 +33,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -41,3 +39,3 @@\n-    public  static final String vmName      = privilegedGetProperty(\"java.vm.name\");\n-    public  static final String vmInfo      = privilegedGetProperty(\"java.vm.info\");\n-    private static final String osVersion   = privilegedGetProperty(\"os.version\");\n+    public  static final String vmName      = System.getProperty(\"java.vm.name\");\n+    public  static final String vmInfo      = System.getProperty(\"java.vm.info\");\n+    private static final String osVersion   = System.getProperty(\"os.version\");\n@@ -46,14 +44,8 @@\n-    private static final String osName      = privilegedGetProperty(\"os.name\");\n-    private static final String dataModel   = privilegedGetProperty(\"sun.arch.data.model\");\n-    private static final String vmVersion   = privilegedGetProperty(\"java.vm.version\");\n-    private static final String jdkDebug    = privilegedGetProperty(\"jdk.debug\");\n-    private static final String osArch      = privilegedGetProperty(\"os.arch\");\n-    private static final String userName    = privilegedGetProperty(\"user.name\");\n-    private static final String compiler    = privilegedGetProperty(\"sun.management.compiler\");\n-    private static final String testJdk     = privilegedGetProperty(\"test.jdk\");\n-\n-    @SuppressWarnings(\"removal\")\n-    private static String privilegedGetProperty(String key) {\n-        return AccessController.doPrivileged((\n-                PrivilegedAction<String>) () -> System.getProperty(key));\n-    }\n+    private static final String osName      = System.getProperty(\"os.name\");\n+    private static final String dataModel   = System.getProperty(\"sun.arch.data.model\");\n+    private static final String vmVersion   = System.getProperty(\"java.vm.version\");\n+    private static final String jdkDebug    = System.getProperty(\"jdk.debug\");\n+    private static final String osArch      = System.getProperty(\"os.arch\");\n+    private static final String userName    = System.getProperty(\"user.name\");\n+    private static final String compiler    = System.getProperty(\"sun.management.compiler\");\n+    private static final String testJdk     = System.getProperty(\"test.jdk\");\n","filename":"test\/lib\/jdk\/test\/lib\/Platform.java","additions":11,"deletions":19,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -105,1 +105,1 @@\n-                    } catch (IllegalArgumentException | FileSystemNotFoundException | SecurityException ex) {\n+                    } catch (IllegalArgumentException | FileSystemNotFoundException ex) {\n","filename":"test\/lib\/jdk\/test\/lib\/net\/SimpleHttpServer.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -37,7 +37,0 @@\n- *\n- * Using this class with a security manager requires the following\n- * permissions to be granted:\n- *\n- * permission \"java.util.PropertyPermission\" \"test.src.path\", \"read\";\n- * permission java.io.FilePermission \"\/path\/to\/test\/lib\/jdk\/test\/lib\/testkeys\", \"read\";\n- * The exact path above depends on the location of the test.\n@@ -57,1 +50,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -59,28 +51,10 @@\n-        try {\n-            final String proto = protocols.get();\n-            AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n-                @Override\n-                public Void run() throws Exception {\n-                    String paths = System.getProperty(\"test.src.path\");\n-                    StringTokenizer st = new StringTokenizer(paths, File.pathSeparator);\n-                    boolean securityExceptions = false;\n-                    while (st.hasMoreTokens()) {\n-                        String path = st.nextToken();\n-                        try {\n-                            File f = new File(path, \"jdk\/test\/lib\/net\/testkeys\");\n-                            if (f.exists()) {\n-                                try (FileInputStream fis = new FileInputStream(f)) {\n-                                    init(fis, proto);\n-                                    return null;\n-                                }\n-                            }\n-                        } catch (SecurityException e) {\n-                            \/\/ catch and ignore because permission only required\n-                            \/\/ for one entry on path (at most)\n-                            securityExceptions = true;\n-                        }\n-                    }\n-                    if (securityExceptions) {\n-                        System.err.println(\"SecurityExceptions thrown on loading testkeys\");\n-                    }\n-                    return null;\n+        final String proto = protocols.get();\n+\n+        String paths = System.getProperty(\"test.src.path\");\n+        StringTokenizer st = new StringTokenizer(paths, File.pathSeparator);\n+        while (st.hasMoreTokens()) {\n+            String path = st.nextToken();\n+            File f = new File(path, \"jdk\/test\/lib\/net\/testkeys\");\n+            if (f.exists()) {\n+                try (FileInputStream fis = new FileInputStream(f)) {\n+                    init(fis, proto);\n@@ -88,10 +62,1 @@\n-            });\n-        } catch (PrivilegedActionException pae) {\n-            Throwable t = pae.getCause() != null ? pae.getCause() : pae;\n-            if (t instanceof IOException)\n-                throw (IOException)t;\n-            if (t instanceof RuntimeException)\n-                throw (RuntimeException)t;\n-            if (t instanceof Error)\n-                throw (Error)t;\n-            throw new RuntimeException(t);\n+            }\n","filename":"test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.java","additions":11,"deletions":46,"binary":false,"changes":57,"status":"modified"},{"patch":"@@ -42,3 +42,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -255,1 +252,1 @@\n-        Process p = privilegedStart(processBuilder);\n+        Process p = processBuilder.start();\n@@ -719,1 +716,1 @@\n-            p = privilegedStart(pb);\n+            p = pb.start();\n@@ -735,4 +732,1 @@\n-                AccessController.doPrivileged((PrivilegedExceptionAction<Void>) () -> {\n-                    Files.writeString(Path.of(fileName), processOutput);\n-                    return null;\n-                });\n+                Files.writeString(Path.of(fileName), processOutput);\n@@ -886,10 +880,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static Process privilegedStart(ProcessBuilder pb) throws IOException {\n-        try {\n-            return AccessController.doPrivileged(\n-                    (PrivilegedExceptionAction<Process>) pb::start);\n-        } catch (PrivilegedActionException e) {\n-            throw (IOException) e.getException();\n-        }\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/process\/ProcessTools.java","additions":3,"deletions":19,"binary":false,"changes":22,"status":"modified"}]}