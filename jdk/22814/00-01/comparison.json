{"files":[{"patch":"@@ -42,2 +42,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -114,1 +112,1 @@\n-     * @param ni2 An other network interface, may be {@code null}\n+     * @param ni2 Another network interface, may be {@code null}\n@@ -450,1 +448,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -452,1 +449,0 @@\n-        PrivilegedAction<Void> pa = () -> {\n@@ -459,1 +455,0 @@\n-            return null;\n@@ -462,2 +457,1 @@\n-        }};\n-        AccessController.doPrivileged(pa);\n+        }\n","filename":"test\/lib\/jdk\/test\/lib\/NetworkConfiguration.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,3 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -211,12 +208,6 @@\n-            try {\n-                var bb = AccessController.doPrivileged(\n-                    (PrivilegedExceptionAction<byte[]>) () -> Files.readAllBytes(deny_ptrace));\n-                if (bb.length == 0) {\n-                    throw new Error(\"deny_ptrace is empty\");\n-                }\n-                if (bb[0] != '0') {\n-                    return false;\n-                }\n-            } catch (PrivilegedActionException e) {\n-                IOException t = (IOException) e.getException();\n-                throw t;\n+            var bb = Files.readAllBytes(deny_ptrace);\n+            if (bb.length == 0) {\n+                throw new Error(\"deny_ptrace is empty\");\n+            }\n+            if (bb[0] != '0') {\n+                return false;\n@@ -233,10 +224,8 @@\n-            try {\n-                var bb = AccessController.doPrivileged(\n-                    (PrivilegedExceptionAction<byte[]>) () -> Files.readAllBytes(ptrace_scope));\n-                if (bb.length == 0) {\n-                    throw new Error(\"ptrace_scope is empty\");\n-                }\n-                byte yama_scope = bb[0];\n-                if (yama_scope == '3') {\n-                    return false;\n-                }\n+            var bb = Files.readAllBytes(ptrace_scope);\n+            if (bb.length == 0) {\n+                throw new Error(\"ptrace_scope is empty\");\n+            }\n+            byte yama_scope = bb[0];\n+            if (yama_scope == '3') {\n+                return false;\n+            }\n@@ -244,6 +233,2 @@\n-                if (!Platform.isRoot() && yama_scope != '0') {\n-                    return false;\n-                }\n-            } catch (PrivilegedActionException e) {\n-                IOException t = (IOException) e.getException();\n-                throw t;\n+            if (!Platform.isRoot() && yama_scope != '0') {\n+                return false;\n","filename":"test\/lib\/jdk\/test\/lib\/SA\/SATestUtils.java","additions":17,"deletions":32,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,0 +36,1 @@\n+import java.util.Arrays;\n@@ -89,1 +90,1 @@\n-            String[] classes = addInnerClasses(args, 2);\n+            String[] classes = Arrays.copyOfRange(args, 2, args.length);\n@@ -95,1 +96,1 @@\n-            String[] classes = addInnerClasses(args, 0);\n+            String[] classes = Arrays.copyOfRange(args,0, args.length);\n@@ -102,27 +103,0 @@\n-    \/\/ Add commonly used inner classes that are often omitted by mistake. Currently\n-    \/\/ we support only jdk.test.whitebox.WhiteBox$WhiteBoxPermission.\n-    \/\/ See JDK-8199290\n-    private static String[] addInnerClasses(String[] classes, int startIdx) {\n-        boolean seenNewWb = false;\n-        boolean seenNewWbInner = false;\n-        final String newWb = \"jdk.test.whitebox.WhiteBox\";\n-        final String newWbInner = newWb + \"$WhiteBoxPermission\";\n-\n-        ArrayList<String> list = new ArrayList<>();\n-\n-        for (int i = startIdx; i < classes.length; i++) {\n-            String cls = classes[i];\n-            list.add(cls);\n-            switch (cls) {\n-            case newWb:      seenNewWb      = true; break;\n-            case newWbInner: seenNewWbInner = true; break;\n-            }\n-        }\n-        if (seenNewWb && !seenNewWbInner) {\n-            list.add(newWbInner);\n-        }\n-        String[] array = new String[list.size()];\n-        list.toArray(array);\n-        return array;\n-    }\n-\n@@ -191,1 +165,0 @@\n-        classes = addInnerClasses(classes, 0);\n@@ -197,1 +170,0 @@\n-        classes = addInnerClasses(classes, 0);\n","filename":"test\/lib\/jdk\/test\/lib\/helpers\/ClassFileInstaller.java","additions":4,"deletions":32,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.io.UncheckedIOException;\n@@ -38,4 +37,1 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.concurrent.Callable;\n+\n@@ -58,6 +54,4 @@\n-        hasIPv4 = runPrivilegedAction(() -> isSupported(Inet4Address.class));\n-        hasIPv6 = runPrivilegedAction(() -> isSupported(Inet6Address.class));\n-        preferIPv4Stack = runPrivilegedAction(() -> Boolean.parseBoolean(\n-            System.getProperty(\"java.net.preferIPv4Stack\")));\n-        preferIPv6Addresses = runPrivilegedAction(() -> Boolean.parseBoolean(\n-            System.getProperty(\"java.net.preferIPv6Addresses\")));\n+        hasIPv4 = isSupported(Inet4Address.class);\n+        hasIPv6 = isSupported(Inet6Address.class);\n+        preferIPv4Stack = Boolean.parseBoolean(System.getProperty(\"java.net.preferIPv4Stack\"));\n+        preferIPv6Addresses = Boolean.parseBoolean(System.getProperty(\"java.net.preferIPv6Addresses\"));\n@@ -79,10 +73,0 @@\n-    @SuppressWarnings(\"removal\")\n-    private static <T> T runPrivilegedAction(Callable<T> callable) {\n-        try {\n-            PrivilegedExceptionAction<T> pa = () -> callable.call();\n-            return AccessController.doPrivileged(pa);\n-        } catch (PrivilegedActionException pae) {\n-            throw new UncheckedIOException((IOException) pae.getCause());\n-        }\n-    }\n-\n","filename":"test\/lib\/jdk\/test\/lib\/net\/IPSupport.java","additions":6,"deletions":22,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1,1 +0,0 @@\n-\n@@ -3,1 +2,1 @@\n- * Copyright (c) 2017, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/lib\/jdk\/test\/lib\/net\/SimpleHttpServer.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/lib\/jdk\/test\/lib\/net\/SimpleSSLContext.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.security.BasicPermission;\n@@ -38,6 +37,0 @@\n-  @SuppressWarnings(\"serial\")\n-  public static class WhiteBoxPermission extends BasicPermission {\n-    public WhiteBoxPermission(String s) {\n-      super(s);\n-    }\n-  }\n","filename":"test\/lib\/jdk\/test\/whitebox\/WhiteBox.java","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"}]}