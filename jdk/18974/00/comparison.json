{"files":[{"patch":"@@ -83,1 +83,1 @@\n- * l.lock();\n+ * l.lock(); \/\/ lock() as the last statement before the try block\n@@ -87,1 +87,1 @@\n- *   l.unlock();\n+ *   l.unlock(); \/\/ unlock() as the first statement in the finally block\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/locks\/Lock.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -74,2 +74,3 @@\n- * follow a call to {@code lock} with a {@code try} block, most\n- * typically in a before\/after construction such as:\n+ * follow a call to {@code lock} with a {@code try} block, and\n+ * to <em>always<\/em> immediately call {@code unlock} as the\n+ * first statement in the finally block, as follows:\n@@ -83,1 +84,1 @@\n- *     lock.lock();  \/\/ block until condition holds\n+ *     lock.lock();  \/\/ lock() as the last statement before the try block\n@@ -87,1 +88,1 @@\n- *       lock.unlock();\n+ *       lock.unlock(); \/\/ unlock() as the first statement in the finally block\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/locks\/ReentrantLock.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -144,0 +144,1 @@\n+ *     \/\/ Code between the lock() above, and the unlock() below must not throw\n@@ -161,1 +162,1 @@\n- *\n+ *     \/\/ Make sure that code which could throw is executed inside the try block\n","filename":"src\/java.base\/share\/classes\/java\/util\/concurrent\/locks\/ReentrantReadWriteLock.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"}]}