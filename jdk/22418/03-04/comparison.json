{"files":[{"patch":"@@ -1,96 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.action;\n-\n-import java.security.AccessController;\n-\n-\/**\n- * A convenience class for retrieving the boolean value of a system property\n- * as a privileged action.\n- *\n- * <p>An instance of this class can be used as the argument of\n- * <code>AccessController.doPrivileged<\/code>.\n- *\n- * <p>The following code retrieves the boolean value of the system\n- * property named <code>\"prop\"<\/code> as a privileged action:\n- *\n- * <pre>\n- * boolean b = java.security.AccessController.doPrivileged\n- *              (new GetBooleanAction(\"prop\")).booleanValue();\n- * <\/pre>\n- *\n- * @author Roland Schemers\n- * @see java.security.PrivilegedAction\n- * @see java.security.AccessController\n- * @since 1.2\n- *\/\n-\n-public class GetBooleanAction\n-        implements java.security.PrivilegedAction<Boolean> {\n-    private final String theProp;\n-\n-    \/**\n-     * Constructor that takes the name of the system property whose boolean\n-     * value needs to be determined.\n-     *\n-     * @param theProp the name of the system property.\n-     *\/\n-    public GetBooleanAction(String theProp) {\n-        this.theProp = theProp;\n-    }\n-\n-    \/**\n-     * Determines the boolean value of the system property whose name was\n-     * specified in the constructor.\n-     *\n-     * @return the <code>Boolean<\/code> value of the system property.\n-     *\/\n-    public Boolean run() {\n-        return Boolean.getBoolean(theProp);\n-    }\n-\n-    \/**\n-     * Convenience method to get a property without going through doPrivileged\n-     * if no security manager is present. This is unsafe for inclusion in a\n-     * public API but allowable here since this class is now encapsulated.\n-     *\n-     * Note that this method performs a privileged action using caller-provided\n-     * inputs. The caller of this method should take care to ensure that the\n-     * inputs are not tainted and the returned property is not made accessible\n-     * to untrusted code if it contains sensitive information.\n-     *\n-     * @param theProp the name of the system property.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public static boolean privilegedGetProperty(String theProp) {\n-        if (System.getSecurityManager() == null) {\n-            return Boolean.getBoolean(theProp);\n-        } else {\n-            return AccessController.doPrivileged(\n-                    new GetBooleanAction(theProp));\n-        }\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/action\/GetBooleanAction.java","additions":0,"deletions":96,"binary":false,"changes":96,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import java.util.Locale;\n@@ -32,1 +31,0 @@\n-import sun.security.util.Debug;\n@@ -165,95 +163,0 @@\n-\n-    \/**\n-     * Convenience method for fetching System property values that are timeouts.\n-     * Accepted timeout values may be purely numeric, a numeric value\n-     * followed by \"s\" (both interpreted as seconds), or a numeric value\n-     * followed by \"ms\" (interpreted as milliseconds).\n-     *\n-     * @param prop the name of the System property\n-     * @param def a default value (in milliseconds)\n-     * @param dbg a Debug object, if null no debug messages will be sent\n-     *\n-     * @return an integer value corresponding to the timeout value in the System\n-     *      property in milliseconds.  If the property value is empty, negative,\n-     *      or contains non-numeric characters (besides a trailing \"s\" or \"ms\")\n-     *      then the default value will be returned.  If a negative value for\n-     *      the \"def\" parameter is supplied, zero will be returned if the\n-     *      property's value does not conform to the allowed syntax.\n-     *\/\n-    public static int privilegedGetTimeoutProp(String prop, int def, Debug dbg) {\n-        if (def < 0) {\n-            def = 0;\n-        }\n-\n-        String rawPropVal = privilegedGetProperty(prop, \"\").trim();\n-        if (rawPropVal.length() == 0) {\n-            return def;\n-        }\n-\n-        \/\/ Determine if \"ms\" or just \"s\" is on the end of the string.\n-        \/\/ We may do a little surgery on the value so we'll retain\n-        \/\/ the original value in rawPropVal for debug messages.\n-        boolean isMillis = false;\n-        String propVal = rawPropVal;\n-        if (rawPropVal.toLowerCase(Locale.ROOT).endsWith(\"ms\")) {\n-            propVal = rawPropVal.substring(0, rawPropVal.length() - 2);\n-            isMillis = true;\n-        } else if (rawPropVal.toLowerCase(Locale.ROOT).endsWith(\"s\")) {\n-            propVal = rawPropVal.substring(0, rawPropVal.length() - 1);\n-        }\n-\n-        \/\/ Next check to make sure the string is built only from digits\n-        if (propVal.matches(\"^\\\\d+$\")) {\n-            try {\n-                int timeout = Integer.parseInt(propVal);\n-                return isMillis ? timeout : timeout * 1000;\n-            } catch (NumberFormatException nfe) {\n-                if (dbg != null) {\n-                    dbg.println(\"Warning: Unexpected \" + nfe +\n-                            \" for timeout value \" + rawPropVal +\n-                            \". Using default value of \" + def + \" msec.\");\n-                }\n-                return def;\n-            }\n-        } else {\n-            if (dbg != null) {\n-                dbg.println(\"Warning: Incorrect syntax for timeout value \" +\n-                        rawPropVal + \". Using default value of \" + def +\n-                        \" msec.\");\n-            }\n-            return def;\n-        }\n-    }\n-\n-    \/**\n-     * Convenience method for fetching System property values that are booleans.\n-     *\n-     * @param prop the name of the System property\n-     * @param def a default value\n-     * @param dbg a Debug object, if null no debug messages will be sent\n-     *\n-     * @return a boolean value corresponding to the value in the System property.\n-     *      If the property value is neither \"true\" or \"false\", the default value\n-     *      will be returned.\n-     *\/\n-    public static boolean privilegedGetBooleanProp(String prop, boolean def, Debug dbg) {\n-        String rawPropVal = privilegedGetProperty(prop, \"\");\n-        if (\"\".equals(rawPropVal)) {\n-            return def;\n-        }\n-\n-        String lower = rawPropVal.toLowerCase(Locale.ROOT);\n-        if (\"true\".equals(lower)) {\n-            return true;\n-        } else if (\"false\".equals(lower)) {\n-            return false;\n-        } else {\n-            if (dbg != null) {\n-                dbg.println(\"Warning: Unexpected value for \" + prop +\n-                            \": \" + rawPropVal +\n-                            \". Using default value: \" + def);\n-            }\n-            return def;\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/sun\/security\/action\/GetPropertyAction.java","additions":1,"deletions":98,"binary":false,"changes":99,"status":"modified"},{"patch":"@@ -1,56 +0,0 @@\n-\/*\n- * Copyright (c) 2003, 2011, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.action;\n-\n-import java.util.Map;\n-\n-import java.security.Provider;\n-import java.security.PrivilegedAction;\n-\n-\/**\n- * A convenience PrivilegedAction class for setting the properties of\n- * a provider. See the SunRsaSign provider for a usage example.\n- *\n- * @see sun.security.rsa.SunRsaSign\n- * @author  Andreas Sterbenz\n- * @since   1.5\n- *\/\n-public class PutAllAction implements PrivilegedAction<Void> {\n-\n-    private final Provider provider;\n-    private final Map<?, ?> map;\n-\n-    public PutAllAction(Provider provider, Map<?, ?> map) {\n-        this.provider = provider;\n-        this.map = map;\n-    }\n-\n-    public Void run() {\n-        provider.putAll(map);\n-        return null;\n-    }\n-\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/action\/PutAllAction.java","additions":0,"deletions":56,"binary":false,"changes":56,"status":"deleted"},{"patch":"@@ -41,1 +41,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -45,0 +44,1 @@\n+import sun.security.util.SecurityProperties;\n@@ -117,1 +117,1 @@\n-                GetPropertyAction.privilegedGetTimeoutProp(prop, def, debug);\n+                SecurityProperties.getTimeoutSystemProp(prop, def, debug);\n@@ -126,1 +126,1 @@\n-                GetPropertyAction.privilegedGetBooleanProp(prop, def, debug);\n+                SecurityProperties.getBooleanSystemProp(prop, def, debug);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/OCSP.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2006, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,1 +54,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -60,0 +59,1 @@\n+import sun.security.util.SecurityProperties;\n@@ -178,1 +178,1 @@\n-                GetPropertyAction.privilegedGetTimeoutProp(prop, def, debug);\n+                SecurityProperties.getTimeoutSystemProp(prop, def, debug);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/certpath\/URICertStore.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -30,0 +30,1 @@\n+import java.util.Locale;\n@@ -31,0 +32,3 @@\n+\/**\n+ * Utility methods for retrieving security and system properties.\n+ *\/\n@@ -75,0 +79,94 @@\n+\n+    \/**\n+     * Convenience method for fetching System property values that are timeouts.\n+     * Accepted timeout values may be purely numeric, a numeric value\n+     * followed by \"s\" (both interpreted as seconds), or a numeric value\n+     * followed by \"ms\" (interpreted as milliseconds).\n+     *\n+     * @param prop the name of the System property\n+     * @param def a default value (in milliseconds)\n+     * @param dbg a Debug object, if null no debug messages will be sent\n+     *\n+     * @return an integer value corresponding to the timeout value in the System\n+     *      property in milliseconds.  If the property value is empty, negative,\n+     *      or contains non-numeric characters (besides a trailing \"s\" or \"ms\")\n+     *      then the default value will be returned.  If a negative value for\n+     *      the \"def\" parameter is supplied, zero will be returned if the\n+     *      property's value does not conform to the allowed syntax.\n+     *\/\n+    public static int getTimeoutSystemProp(String prop, int def, Debug dbg) {\n+        if (def < 0) {\n+            def = 0;\n+        }\n+\n+        String rawPropVal = System.getProperty(prop, \"\").trim();\n+        if (rawPropVal.length() == 0) {\n+            return def;\n+        }\n+\n+        \/\/ Determine if \"ms\" or just \"s\" is on the end of the string.\n+        \/\/ We may do a little surgery on the value so we'll retain\n+        \/\/ the original value in rawPropVal for debug messages.\n+        boolean isMillis = false;\n+        String propVal = rawPropVal;\n+        if (rawPropVal.toLowerCase(Locale.ROOT).endsWith(\"ms\")) {\n+            propVal = rawPropVal.substring(0, rawPropVal.length() - 2);\n+            isMillis = true;\n+        } else if (rawPropVal.toLowerCase(Locale.ROOT).endsWith(\"s\")) {\n+            propVal = rawPropVal.substring(0, rawPropVal.length() - 1);\n+        }\n+\n+        \/\/ Next check to make sure the string is built only from digits\n+        if (propVal.matches(\"^\\\\d+$\")) {\n+            try {\n+                int timeout = Integer.parseInt(propVal);\n+                return isMillis ? timeout : timeout * 1000;\n+            } catch (NumberFormatException nfe) {\n+                if (dbg != null) {\n+                    dbg.println(\"Warning: Unexpected \" + nfe +\n+                            \" for timeout value \" + rawPropVal +\n+                            \". Using default value of \" + def + \" msec.\");\n+                }\n+                return def;\n+            }\n+        } else {\n+            if (dbg != null) {\n+                dbg.println(\"Warning: Incorrect syntax for timeout value \" +\n+                        rawPropVal + \". Using default value of \" + def +\n+                        \" msec.\");\n+            }\n+            return def;\n+        }\n+    }\n+\n+    \/**\n+     * Convenience method for fetching System property values that are booleans.\n+     *\n+     * @param prop the name of the System property\n+     * @param def a default value\n+     * @param dbg a Debug object, if null no debug messages will be sent\n+     *\n+     * @return a boolean value corresponding to the value in the System property.\n+     *      If the property value is neither \"true\" or \"false\", the default value\n+     *      will be returned.\n+     *\/\n+    public static boolean getBooleanSystemProp(String prop, boolean def, Debug dbg) {\n+        String rawPropVal = System.getProperty(prop, \"\");\n+        if (\"\".equals(rawPropVal)) {\n+            return def;\n+        }\n+     \n+        String lower = rawPropVal.toLowerCase(Locale.ROOT);\n+        if (\"true\".equals(lower)) {\n+            return true;\n+        } else if (\"false\".equals(lower)) {\n+            return false;\n+        } else {\n+            if (dbg != null) {\n+                dbg.println(\"Warning: Unexpected value for \" + prop +\n+                            \": \" + rawPropVal +\n+                            \". Using default value: \" + def);\n+            } \n+            return def;\n+        }\n+    }   \n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityProperties.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"modified"},{"patch":"@@ -38,1 +38,0 @@\n-        System.setProperty(\"boolean\", \"true\");\n@@ -41,8 +40,0 @@\n-        Boolean b = AccessController.doPrivileged\n-                        (new GetBooleanAction(\"boolean\"));\n-        if (b.booleanValue() == true) {\n-            System.out.println(\"boolean test passed\");\n-        } else {\n-            throw new SecurityException(\"boolean test failed\");\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/action\/Generify.java","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"}]}