{"files":[{"patch":"@@ -362,1 +362,1 @@\n-        check(\"clearProviderProperties.\"+name);\n+        checkInitialized();\n@@ -379,1 +379,1 @@\n-        check(\"putProviderProperty.\"+name);\n+        checkInitialized();\n@@ -397,1 +397,1 @@\n-        check(\"putProviderProperty.\"+name);\n+        checkInitialized();\n@@ -464,1 +464,1 @@\n-        check(\"putProviderProperty.\"+name);\n+        checkInitialized();\n@@ -481,1 +481,1 @@\n-        check(\"putProviderProperty.\"+name);\n+        checkInitialized();\n@@ -497,1 +497,1 @@\n-        check(\"removeProviderProperty.\"+name);\n+        checkInitialized();\n@@ -512,1 +512,1 @@\n-        check(\"removeProviderProperty.\"+name);\n+        checkInitialized();\n@@ -528,1 +528,1 @@\n-        check(\"putProviderProperty.\" + name);\n+        checkInitialized();\n@@ -543,1 +543,1 @@\n-        check(\"putProviderProperty.\" + name);\n+        checkInitialized();\n@@ -561,1 +561,1 @@\n-        check(\"putProviderProperty.\" + name);\n+        checkInitialized();\n@@ -578,2 +578,1 @@\n-        check(\"putProviderProperty.\" + name);\n-        check(\"removeProviderProperty.\" + name);\n+        checkInitialized();\n@@ -597,2 +596,1 @@\n-        check(\"putProviderProperty.\" + name);\n-        check(\"removeProviderProperty.\" + name);\n+        checkInitialized();\n@@ -616,2 +614,1 @@\n-        check(\"putProviderProperty.\" + name);\n-        check(\"removeProviderProperty.\" + name);\n+        checkInitialized();\n@@ -638,2 +635,1 @@\n-        check(\"putProviderProperty.\" + name);\n-        check(\"removeProviderProperty.\" + name);\n+        checkInitialized();\n@@ -697,9 +693,0 @@\n-    private void check(String directive) {\n-        checkInitialized();\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkSecurityAccess(directive);\n-        }\n-    }\n-\n@@ -1242,1 +1229,1 @@\n-        check(\"putProviderProperty.\" + name);\n+        checkInitialized();\n@@ -1349,1 +1336,1 @@\n-        check(\"removeProviderProperty.\" + name);\n+        checkInitialized();\n","filename":"src\/java.base\/share\/classes\/java\/security\/Provider.java","additions":16,"deletions":29,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -945,5 +945,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String property = AccessController.doPrivileged(\n-                (PrivilegedAction<String>) () -> Security.getProperty(\n-                    \"securerandom.strongAlgorithms\"));\n-\n+        String property = Security.getProperty(\"securerandom.strongAlgorithms\");\n","filename":"src\/java.base\/share\/classes\/java\/security\/SecureRandom.java","additions":1,"deletions":5,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -315,8 +315,1 @@\n-        \/\/ doPrivileged here because there are multiple\n-        \/\/ things in initialize that might require privs.\n-        \/\/ (the FileInputStream call and the File.exists call, etc)\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n-            initialize();\n-            return null;\n-        });\n+        initialize();\n@@ -478,2 +471,0 @@\n-        String providerName = provider.getName();\n-        checkInsertProvider(providerName);\n@@ -486,1 +477,1 @@\n-        return newList.getIndex(providerName) + 1;\n+        return newList.getIndex(provider.getName()) + 1;\n@@ -530,1 +521,0 @@\n-        check(\"removeProvider.\" + name);\n@@ -825,1 +815,0 @@\n-        check(\"getProperty.\" + key);\n@@ -848,1 +837,0 @@\n-        check(\"setProperty.\" + key);\n@@ -862,26 +850,0 @@\n-    private static void check(String directive) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            security.checkSecurityAccess(directive);\n-        }\n-    }\n-\n-    private static void checkInsertProvider(String name) {\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            try {\n-                security.checkSecurityAccess(\"insertProvider\");\n-            } catch (SecurityException se1) {\n-                try {\n-                    security.checkSecurityAccess(\"insertProvider.\" + name);\n-                } catch (SecurityException se2) {\n-                    \/\/ throw first exception, but add second to suppressed\n-                    se1.addSuppressed(se2);\n-                    throw se1;\n-                }\n-            }\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/java\/security\/Security.java","additions":2,"deletions":40,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -1,165 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.action;\n-\n-import java.security.AccessController;\n-\n-\/**\n- * A convenience class for retrieving the integer value of a system property\n- * as a privileged action.\n- *\n- * <p>An instance of this class can be used as the argument of\n- * <code>AccessController.doPrivileged<\/code>.\n- *\n- * <p>The following code retrieves the integer value of the system\n- * property named <code>\"prop\"<\/code> as a privileged action. Since it does\n- * not pass a default value to be used in case the property\n- * <code>\"prop\"<\/code> is not defined, it has to check the result for\n- * <code>null<\/code>:\n- *\n- * <pre>\n- * Integer tmp = java.security.AccessController.doPrivileged\n- *     (new sun.security.action.GetIntegerAction(\"prop\"));\n- * int i;\n- * if (tmp != null) {\n- *     i = tmp.intValue();\n- * }\n- * <\/pre>\n- *\n- * <p>The following code retrieves the integer value of the system\n- * property named <code>\"prop\"<\/code> as a privileged action, and also passes\n- * a default value to be used in case the property <code>\"prop\"<\/code> is not\n- * defined:\n- *\n- * <pre>\n- * int i = ((Integer)java.security.AccessController.doPrivileged(\n- *                         new GetIntegerAction(\"prop\", 3))).intValue();\n- * <\/pre>\n- *\n- * @author Roland Schemers\n- * @see java.security.PrivilegedAction\n- * @see java.security.AccessController\n- * @since 1.2\n- *\/\n-\n-public class GetIntegerAction\n-        implements java.security.PrivilegedAction<Integer> {\n-    private final String theProp;\n-    private final int defaultVal;\n-    private final boolean defaultSet;\n-\n-    \/**\n-     * Constructor that takes the name of the system property whose integer\n-     * value needs to be determined.\n-     *\n-     * @param theProp the name of the system property.\n-     *\/\n-    public GetIntegerAction(String theProp) {\n-        this.theProp = theProp;\n-        this.defaultVal = 0;\n-        this.defaultSet = false;\n-    }\n-\n-    \/**\n-     * Constructor that takes the name of the system property and the default\n-     * value of that property.\n-     *\n-     * @param theProp the name of the system property.\n-     * @param defaultVal the default value.\n-     *\/\n-    public GetIntegerAction(String theProp, int defaultVal) {\n-        this.theProp = theProp;\n-        this.defaultVal = defaultVal;\n-        this.defaultSet = true;\n-    }\n-\n-    \/**\n-     * Determines the integer value of the system property whose name was\n-     * specified in the constructor.\n-     *\n-     * <p>If there is no property of the specified name, or if the property\n-     * does not have the correct numeric format, then an <code>Integer<\/code>\n-     * object representing the default value that was specified in the\n-     * constructor is returned, or <code>null<\/code> if no default value was\n-     * specified.\n-     *\n-     * @return the <code>Integer<\/code> value of the property.\n-     *\/\n-    public Integer run() {\n-        Integer value = Integer.getInteger(theProp);\n-        if ((value == null) && defaultSet)\n-            return defaultVal;\n-        return value;\n-    }\n-\n-    \/**\n-     * Convenience method to get a property without going through doPrivileged\n-     * if no security manager is present. This is unsafe for inclusion in a\n-     * public API but allowable here since this class is now encapsulated.\n-     *\n-     * Note that this method performs a privileged action using caller-provided\n-     * inputs. The caller of this method should take care to ensure that the\n-     * inputs are not tainted and the returned property is not made accessible\n-     * to untrusted code if it contains sensitive information.\n-     *\n-     * @param theProp the name of the system property.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public static Integer privilegedGetProperty(String theProp) {\n-        if (System.getSecurityManager() == null) {\n-            return Integer.getInteger(theProp);\n-        } else {\n-            return AccessController.doPrivileged(\n-                    new GetIntegerAction(theProp));\n-        }\n-    }\n-\n-    \/**\n-     * Convenience method to get a property without going through doPrivileged\n-     * if no security manager is present. This is unsafe for inclusion in a\n-     * public API but allowable here since this class is now encapsulated.\n-     *\n-     * Note that this method performs a privileged action using caller-provided\n-     * inputs. The caller of this method should take care to ensure that the\n-     * inputs are not tainted and the returned property is not made accessible\n-     * to untrusted code if it contains sensitive information.\n-     *\n-     * @param theProp the name of the system property.\n-     * @param defaultVal the default value.\n-     *\/\n-    @SuppressWarnings(\"removal\")\n-    public static Integer privilegedGetProperty(String theProp,\n-            int defaultVal) {\n-        Integer value;\n-        if (System.getSecurityManager() == null) {\n-            value = Integer.getInteger(theProp);\n-        } else {\n-            value = AccessController.doPrivileged(\n-                    new GetIntegerAction(theProp));\n-        }\n-        return (value != null) ? value : defaultVal;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/action\/GetIntegerAction.java","additions":0,"deletions":165,"binary":false,"changes":165,"status":"deleted"},{"patch":"@@ -1,114 +0,0 @@\n-\/*\n- * Copyright (c) 1998, 2022, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.action;\n-\n-\/**\n- * A convenience class for retrieving the <code>Long<\/code> value of a system\n- * property as a privileged action.\n- *\n- * <p>An instance of this class can be used as the argument of\n- * <code>AccessController.doPrivileged<\/code>.\n- *\n- * <p>The following code retrieves the <code>Long<\/code> value of the system\n- * property named <code>\"prop\"<\/code> as a privileged action. Since it does\n- * not pass a default value to be used in case the property\n- * <code>\"prop\"<\/code> is not defined, it has to check the result for\n- * <code>null<\/code>:\n- *\n- * <pre>\n- * Long tmp = java.security.AccessController.doPrivileged\n- *     (new sun.security.action.GetLongAction(\"prop\"));\n- * long l;\n- * if (tmp != null) {\n- *     l = tmp.longValue();\n- * }\n- * <\/pre>\n- *\n- * <p>The following code retrieves the <code>Long<\/code> value of the system\n- * property named <code>\"prop\"<\/code> as a privileged action, and also passes\n- * a default value to be used in case the property <code>\"prop\"<\/code> is not\n- * defined:\n- *\n- * <pre>\n- * long l = java.security.AccessController.doPrivileged\n- *      (new GetLongAction(\"prop\")).longValue();\n- * <\/pre>\n- *\n- * @author Roland Schemers\n- * @see java.security.PrivilegedAction\n- * @see java.security.AccessController\n- * @since 1.2\n- *\/\n-\n-public class GetLongAction implements java.security.PrivilegedAction<Long> {\n-    private final String theProp;\n-    private final long defaultVal;\n-    private final boolean defaultSet;\n-\n-    \/**\n-     * Constructor that takes the name of the system property whose\n-     * <code>Long<\/code> value needs to be determined.\n-     *\n-     * @param theProp the name of the system property.\n-     *\/\n-    public GetLongAction(String theProp) {\n-        this.theProp = theProp;\n-        this.defaultVal = 0;\n-        this.defaultSet = false;\n-    }\n-\n-    \/**\n-     * Constructor that takes the name of the system property and the default\n-     * value of that property.\n-     *\n-     * @param theProp the name of the system property.\n-     * @param defaultVal the default value.\n-     *\/\n-    public GetLongAction(String theProp, long defaultVal) {\n-        this.theProp = theProp;\n-        this.defaultVal = defaultVal;\n-        this.defaultSet = true;\n-    }\n-\n-    \/**\n-     * Determines the <code>Long<\/code> value of the system property whose\n-     * name was specified in the constructor.\n-     *\n-     * <p>If there is no property of the specified name, or if the property\n-     * does not have the correct numeric format, then a <code>Long<\/code>\n-     * object representing the default value that was specified in the\n-     * constructor is returned, or <code>null<\/code> if no default value was\n-     * specified.\n-     *\n-     * @return the <code>Long<\/code> value of the property.\n-     *\/\n-    public Long run() {\n-        Long value = Long.getLong(theProp);\n-        if ((value == null) && defaultSet)\n-            return defaultVal;\n-        return value;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/action\/GetLongAction.java","additions":0,"deletions":114,"binary":false,"changes":114,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -31,1 +30,0 @@\n-import java.security.PrivilegedAction;\n@@ -183,1 +181,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -186,6 +183,1 @@\n-        AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                putEntries();\n-                return null;\n-            }\n-        });\n+        putEntries();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/ec\/SunEC.java","additions":2,"deletions":10,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import sun.security.action.GetBooleanAction;\n-\n@@ -57,2 +55,2 @@\n-    private static final boolean rsaPreMasterSecretFix = GetBooleanAction\n-            .privilegedGetProperty(\"com.sun.net.ssl.rsaPreMasterSecretFix\");\n+    private static final boolean rsaPreMasterSecretFix =\n+            Boolean.getBoolean(\"com.sun.net.ssl.rsaPreMasterSecretFix\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/internal\/spec\/TlsRsaPremasterSecretParameterSpec.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -97,17 +97,5 @@\n-        @SuppressWarnings(\"removal\")\n-        Boolean o = AccessController.doPrivileged(\n-                                new PrivilegedAction<Boolean>() {\n-            public Boolean run() {\n-                File file = new File(\"\/usr\/lib\/libpkcs11.so\");\n-                if (file.exists() == false) {\n-                    return Boolean.FALSE;\n-                }\n-                if (\"false\".equalsIgnoreCase(System.getProperty\n-                        (\"sun.security.pkcs11.enable-solaris\"))) {\n-                    return Boolean.FALSE;\n-                }\n-                return Boolean.TRUE;\n-            }\n-        });\n-        if (o == Boolean.FALSE) {\n-            tries = MAX_LOAD_TRIES;\n+        File file = new File(\"\/usr\/lib\/libpkcs11.so\");\n+        if (file.exists() == false ||\n+            (\"false\".equalsIgnoreCase(System.getProperty\n+                (\"sun.security.pkcs11.enable-solaris\")))) {\n+             tries = MAX_LOAD_TRIES;\n@@ -193,22 +181,16 @@\n-                    @SuppressWarnings(\"removal\")\n-                    var tmp = AccessController.doPrivileged(\n-                        new PrivilegedAction<Provider>() {\n-                            public Provider run() {\n-                                try {\n-                                    Class<?> c = Class.forName(\n-                                        \"apple.security.AppleProvider\");\n-                                    if (Provider.class.isAssignableFrom(c)) {\n-                                        @SuppressWarnings(\"deprecation\")\n-                                        Object tmp = c.newInstance();\n-                                        return (Provider) tmp;\n-                                    }\n-                                } catch (Exception ex) {\n-                                    if (debug != null) {\n-                                        debug.println(\"Error loading provider Apple\");\n-                                        ex.printStackTrace();\n-                                    }\n-                                }\n-                                return null;\n-                            }\n-                        });\n-                    yield tmp;\n+                    Provider ap = null;\n+                    try {\n+                        Class<?> c = Class.forName(\n+                            \"apple.security.AppleProvider\");\n+                        if (Provider.class.isAssignableFrom(c)) {\n+                            @SuppressWarnings(\"deprecation\")\n+                            Object tmp = c.newInstance();\n+                            ap = (Provider) tmp;\n+                        }\n+                    } catch (Exception ex) {\n+                        if (debug != null) {\n+                            debug.println(\"Error loading provider Apple\");\n+                            ex.printStackTrace();\n+                        }\n+                    }\n+                    yield ap;\n@@ -243,2 +225,0 @@\n-     * NOTE use of doPrivileged().\n-     *\n@@ -250,1 +230,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -252,2 +231,9 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<Provider>() {\n-            public Provider run() {\n+        if (debug != null) {\n+            debug.println(\"Loading provider \" + ProviderConfig.this);\n+        }\n+        try {\n+            Provider p = ProviderLoader.INSTANCE.load(provName);\n+            if (p != null) {\n+                if (hasArgument()) {\n+                    p = p.configure(argument);\n+                }\n@@ -255,1 +241,1 @@\n-                    debug.println(\"Loading provider \" + ProviderConfig.this);\n+                    debug.println(\"Loaded provider \" + p.getName());\n@@ -257,38 +243,4 @@\n-                try {\n-                    Provider p = ProviderLoader.INSTANCE.load(provName);\n-                    if (p != null) {\n-                        if (hasArgument()) {\n-                            p = p.configure(argument);\n-                        }\n-                        if (debug != null) {\n-                            debug.println(\"Loaded provider \" + p.getName());\n-                        }\n-                    } else {\n-                        if (debug != null) {\n-                            debug.println(\"Error loading provider \" +\n-                                ProviderConfig.this);\n-                        }\n-                        disableLoad();\n-                    }\n-                    return p;\n-                } catch (Exception e) {\n-                    if (e instanceof ProviderException) {\n-                        \/\/ pass up\n-                        throw e;\n-                    } else {\n-                        if (debug != null) {\n-                            debug.println(\"Error loading provider \" +\n-                                ProviderConfig.this);\n-                            e.printStackTrace();\n-                        }\n-                        disableLoad();\n-                        return null;\n-                    }\n-                } catch (ExceptionInInitializerError err) {\n-                    \/\/ no sufficient permission to initialize provider class\n-                    if (debug != null) {\n-                        debug.println(\"Error loading provider \" + ProviderConfig.this);\n-                        err.printStackTrace();\n-                    }\n-                    disableLoad();\n-                    return null;\n+            } else {\n+                if (debug != null) {\n+                    debug.println(\"Error loading provider \" +\n+                        ProviderConfig.this);\n@@ -296,0 +248,15 @@\n+                disableLoad();\n+            }\n+            return p;\n+        } catch (Exception e) {\n+            if (e instanceof ProviderException) {\n+                \/\/ pass up\n+                throw e;\n+            } else {\n+                if (debug != null) {\n+                    debug.println(\"Error loading provider \" +\n+                        ProviderConfig.this);\n+                    e.printStackTrace();\n+                }\n+                disableLoad();\n+                return null;\n@@ -297,1 +264,9 @@\n-        });\n+        } catch (ExceptionInInitializerError err) {\n+            \/\/ unable to initialize provider class\n+            if (debug != null) {\n+                debug.println(\"Error loading provider \" + ProviderConfig.this);\n+                err.printStackTrace();\n+            }\n+            disableLoad();\n+            return null;\n+        }\n@@ -302,2 +277,0 @@\n-     *\n-     * NOTE use of doPrivileged().\n@@ -305,1 +278,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -311,9 +283,5 @@\n-        return AccessController.doPrivileged(new PrivilegedAction<String>() {\n-            public String run() {\n-                try {\n-                    return PropertyExpander.expand(value);\n-                } catch (GeneralSecurityException e) {\n-                    throw new ProviderException(e);\n-                }\n-            }\n-        });\n+        try {\n+            return PropertyExpander.expand(value);\n+        } catch (GeneralSecurityException e) {\n+            throw new ProviderException(e);\n+        }\n@@ -359,1 +327,1 @@\n-                } catch (SecurityException | ServiceConfigurationError |\n+                } catch (ServiceConfigurationError |\n@@ -361,1 +329,1 @@\n-                    \/\/ if provider loading fail due to security permission,\n+                    \/\/ if provider loading failed\n@@ -388,0 +356,1 @@\n+        @SuppressWarnings(\"deprecation\") \/\/ Class.newInstance\n@@ -406,9 +375,1 @@\n-                @SuppressWarnings(\"removal\")\n-                Provider p = AccessController.doPrivileged\n-                    (new PrivilegedExceptionAction<Provider>() {\n-                    @SuppressWarnings(\"deprecation\") \/\/ Class.newInstance\n-                    public Provider run() throws Exception {\n-                        return (Provider) provClass.newInstance();\n-                    }\n-                });\n-                return p;\n+                return (Provider) provClass.newInstance();\n@@ -432,1 +393,1 @@\n-                \/\/ no sufficient permission to access\/initialize provider class\n+                \/\/ unable to access\/initialize provider class\n","filename":"src\/java.base\/share\/classes\/sun\/security\/jca\/ProviderConfig.java","additions":70,"deletions":109,"binary":false,"changes":179,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -90,1 +88,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -92,7 +89,1 @@\n-        \/\/ doPrivileged() because of Security.getProperty()\n-        return AccessController.doPrivileged(\n-                        new PrivilegedAction<ProviderList>() {\n-            public ProviderList run() {\n-                return new ProviderList();\n-            }\n-        });\n+        return new ProviderList();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/jca\/ProviderList.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,4 +32,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n@@ -40,1 +36,0 @@\n-import javax.security.auth.AuthPermission;\n@@ -162,1 +157,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -165,25 +159,10 @@\n-            \/\/ call in a doPrivileged\n-            \/\/\n-            \/\/ We have already passed the Configuration.getInstance\n-            \/\/ security check.  Also, this class is not freely accessible\n-            \/\/ (it is in the \"sun\" package).\n-\n-            try {\n-                AccessController.doPrivileged(new PrivilegedExceptionAction<Void>() {\n-                    public Void run() throws IOException {\n-                        if (params == null) {\n-                            init();\n-                        } else {\n-                            if (!(params instanceof URIParameter)) {\n-                                throw new IllegalArgumentException\n-                                        (\"Unrecognized parameter: \" + params);\n-                            }\n-                            URIParameter uriParam = (URIParameter)params;\n-                            url = uriParam.getURI().toURL();\n-                            init();\n-                        }\n-                        return null;\n-                    }\n-                });\n-            } catch (PrivilegedActionException pae) {\n-                throw (IOException)pae.getException();\n+            if (params == null) {\n+                init();\n+            } else {\n+                if (!(params instanceof URIParameter)) {\n+                    throw new IllegalArgumentException\n+                            (\"Unrecognized parameter: \" + params);\n+                }\n+                URIParameter uriParam = (URIParameter)params;\n+                url = uriParam.getURI().toURL();\n+                init();\n@@ -201,2 +180,0 @@\n-         * @throws SecurityException if the caller does not have permission\n-         *                           to initialize the Configuration\n@@ -380,3 +357,0 @@\n-         *\n-         * @throws SecurityException if the caller does not have permission\n-         *                           to refresh the Configuration.\n@@ -384,1 +358,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -388,4 +361,4 @@\n-            SecurityManager sm = System.getSecurityManager();\n-            if (sm != null) {\n-                sm.checkPermission(\n-                    new AuthPermission(\"refreshLoginConfiguration\"));\n+            try {\n+                init();\n+            } catch (IOException ioe) {\n+                throw new SecurityException(ioe.getLocalizedMessage(), ioe);\n@@ -393,12 +366,0 @@\n-\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                public Void run() {\n-                    try {\n-                        init();\n-                    } catch (IOException ioe) {\n-                        throw new SecurityException(ioe.getLocalizedMessage(),\n-                                                    ioe);\n-                    }\n-                    return null;\n-                }\n-            });\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/ConfigFile.java","additions":15,"deletions":54,"binary":false,"changes":69,"status":"modified"},{"patch":"@@ -30,1 +30,0 @@\n-import java.security.AccessController;\n@@ -32,1 +31,0 @@\n-import java.security.PrivilegedAction;\n@@ -96,4 +94,1 @@\n-\n-        @SuppressWarnings(\"removal\")\n-        String config = AccessController.doPrivileged((PrivilegedAction<String>)\n-                () -> Security.getProperty(PROP_NAME));\n+        String config = Security.getProperty(PROP_NAME);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/DRBG.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -68,3 +68,0 @@\n-     * @throws SecurityException     if a security manager exists and its\n-     *                               <code>checkRead<\/code> method denies read\n-     *                               access to the file.\n@@ -81,3 +78,0 @@\n-        \/\/ (this also checks the read permission on the file if SecurityManager\n-        \/\/ is present, so no checking is needed later when we just return the\n-        \/\/ already opened stream)\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/FileInputStreamPool.java","additions":1,"deletions":7,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -72,7 +72,1 @@\n-        @SuppressWarnings(\"removal\")\n-        var dummy = AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-            public Void run() {\n-                md4Provider.put(\"MessageDigest.MD4\", \"sun.security.provider.MD4\");\n-                return null;\n-            }\n-        });\n+        md4Provider.put(\"MessageDigest.MD4\", \"sun.security.provider.MD4\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/MD4.java","additions":2,"deletions":8,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -152,1 +152,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -167,11 +166,7 @@\n-        java.security.AccessController.doPrivileged\n-            (new java.security.PrivilegedAction<>() {\n-                @Override\n-                public Void run() {\n-                    try {\n-                        \/\/ System properties can change from machine to machine\n-                        Properties p = System.getProperties();\n-                        for (String s: p.stringPropertyNames()) {\n-                            md.update(s.getBytes());\n-                            md.update(p.getProperty(s).getBytes());\n-                        }\n+        try {\n+            \/\/ System properties can change from machine to machine\n+            Properties p = System.getProperties();\n+            for (String s: p.stringPropertyNames()) {\n+                md.update(s.getBytes());\n+                md.update(p.getProperty(s).getBytes());\n+            }\n@@ -179,27 +174,17 @@\n-                        \/\/ Include network adapter names (and a Mac address)\n-                        addNetworkAdapterInfo(md);\n-\n-                        \/\/ The temporary dir\n-                        File f = new File(p.getProperty(\"java.io.tmpdir\"));\n-                        int count = 0;\n-                        try (\n-                            DirectoryStream<Path> stream =\n-                                Files.newDirectoryStream(f.toPath())) {\n-                            \/\/ We use a Random object to choose what file names\n-                            \/\/ should be used. Otherwise, on a machine with too\n-                            \/\/ many files, the same first 1024 files always get\n-                            \/\/ used. Any, We make sure the first 512 files are\n-                            \/\/ always used.\n-                            Random r = new Random();\n-                            for (Path entry: stream) {\n-                                if (count < 512 || r.nextBoolean()) {\n-                                    md.update(entry.getFileName()\n-                                        .toString().getBytes());\n-                                }\n-                                if (count++ > 1024) {\n-                                    break;\n-                                }\n-                            }\n-                        }\n-                    } catch (Exception ex) {\n-                        md.update((byte)ex.hashCode());\n+            \/\/ Include network adapter names (and a Mac address)\n+            addNetworkAdapterInfo(md);\n+\n+            \/\/ The temporary dir\n+            File f = new File(p.getProperty(\"java.io.tmpdir\"));\n+            int count = 0;\n+            try (DirectoryStream<Path> stream =\n+                    Files.newDirectoryStream(f.toPath())) {\n+                \/\/ We use a Random object to choose what file names\n+                \/\/ should be used. Otherwise, on a machine with too\n+                \/\/ many files, the same first 1024 files always get\n+                \/\/ used. Any, We make sure the first 512 files are\n+                \/\/ always used.\n+                Random r = new Random();\n+                for (Path entry: stream) {\n+                    if (count < 512 || r.nextBoolean()) {\n+                        md.update(entry.getFileName().toString().getBytes());\n@@ -207,0 +192,8 @@\n+                    if (count++ > 1024) {\n+                        break;\n+                    }\n+                }\n+            }\n+        } catch (Exception ex) {\n+            md.update((byte)ex.hashCode());\n+        }\n@@ -208,6 +201,6 @@\n-                    \/\/ get Runtime memory stats\n-                    Runtime rt = Runtime.getRuntime();\n-                    byte[] memBytes = longToByteArray(rt.totalMemory());\n-                    md.update(memBytes, 0, memBytes.length);\n-                    memBytes = longToByteArray(rt.freeMemory());\n-                    md.update(memBytes, 0, memBytes.length);\n+        \/\/ get Runtime memory stats\n+        Runtime rt = Runtime.getRuntime();\n+        byte[] memBytes = longToByteArray(rt.totalMemory());\n+        md.update(memBytes, 0, memBytes.length);\n+        memBytes = longToByteArray(rt.freeMemory());\n+        md.update(memBytes, 0, memBytes.length);\n@@ -215,3 +208,0 @@\n-                    return null;\n-                }\n-            });\n@@ -296,23 +286,13 @@\n-            final ThreadGroup[] finalsg = new ThreadGroup[1];\n-            @SuppressWarnings(\"removal\")\n-            Thread t = java.security.AccessController.doPrivileged\n-                (new java.security.PrivilegedAction<>() {\n-                        @Override\n-                        public Thread run() {\n-                            ThreadGroup parent, group =\n-                                Thread.currentThread().getThreadGroup();\n-                            while ((parent = group.getParent()) != null) {\n-                                group = parent;\n-                            }\n-                            finalsg[0] = new ThreadGroup\n-                                (group, \"SeedGenerator ThreadGroup\");\n-                            Thread newT = new Thread(finalsg[0],\n-                                ThreadedSeedGenerator.this,\n-                                \"SeedGenerator Thread\",\n-                                0,\n-                                false);\n-                            newT.setPriority(Thread.MIN_PRIORITY);\n-                            newT.setDaemon(true);\n-                            return newT;\n-                        }\n-                    });\n+            ThreadGroup[] finalsg = new ThreadGroup[1];\n+            ThreadGroup parent, group = Thread.currentThread().getThreadGroup();\n+            while ((parent = group.getParent()) != null) {\n+                group = parent;\n+            }\n+            finalsg[0] = new ThreadGroup(group, \"SeedGenerator ThreadGroup\");\n+            Thread t = new Thread(finalsg[0],\n+                ThreadedSeedGenerator.this,\n+                \"SeedGenerator Thread\",\n+                0,\n+                false);\n+            t.setPriority(Thread.MIN_PRIORITY);\n+            t.setDaemon(true);\n@@ -505,1 +485,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -508,1 +487,1 @@\n-            final URL device = new URL(deviceName);\n+            URL device = new URL(deviceName);\n@@ -510,23 +489,15 @@\n-                seedStream = java.security.AccessController.doPrivileged\n-                    (new java.security.PrivilegedExceptionAction<>() {\n-                        @Override\n-                        public InputStream run() throws IOException {\n-                            \/*\n-                             * return a shared InputStream for file URLs and\n-                             * avoid buffering.\n-                             * The URL.openStream() call wraps InputStream in a\n-                             * BufferedInputStream which\n-                             * can buffer up to 8K bytes. This read is a\n-                             * performance issue for entropy sources which\n-                             * can be slow to replenish.\n-                             *\/\n-                            if (device.getProtocol().equalsIgnoreCase(\"file\")) {\n-                                File deviceFile =\n-                                    SunEntries.getDeviceFile(device);\n-                                return FileInputStreamPool\n-                                    .getInputStream(deviceFile);\n-                            } else {\n-                                return device.openStream();\n-                            }\n-                        }\n-                    });\n+                \/*\n+                 * return a shared InputStream for file URLs and\n+                 * avoid buffering.\n+                 * The URL.openStream() call wraps InputStream in a\n+                 * BufferedInputStream which\n+                 * can buffer up to 8K bytes. This read is a\n+                 * performance issue for entropy sources which\n+                 * can be slow to replenish.\n+                 *\/\n+                if (device.getProtocol().equalsIgnoreCase(\"file\")) {\n+                    File deviceFile = SunEntries.getDeviceFile(device);\n+                    seedStream = FileInputStreamPool.getInputStream(deviceFile);\n+                } else {\n+                    seedStream = device.openStream();\n+                }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SeedGenerator.java","additions":68,"deletions":97,"binary":false,"changes":165,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -50,1 +50,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -58,18 +57,2 @@\n-        \/\/ if there is no security manager installed, put directly into\n-        \/\/ the provider\n-        if (System.getSecurityManager() == null) {\n-            putEntries(serviceIter);\n-        } else {\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                @Override\n-                public Void run() {\n-                    putEntries(serviceIter);\n-                    return null;\n-                }\n-            });\n-        }\n-    }\n-\n-    void putEntries(Iterator<Provider.Service> i) {\n-        while (i.hasNext()) {\n-            putService(i.next());\n+        while (serviceIter.hasNext()) {\n+            putService(serviceIter.next());\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/Sun.java","additions":3,"deletions":20,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -42,1 +40,0 @@\n-import sun.security.action.GetBooleanAction;\n@@ -348,2 +345,1 @@\n-        GetBooleanAction.privilegedGetProperty\n-            (\"jdk.security.legacyDSAKeyPairGenerator\");\n+        Boolean.getBoolean(\"jdk.security.legacyDSAKeyPairGenerator\");\n@@ -354,17 +350,13 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final String seedSource = AccessController.doPrivileged(\n-                new PrivilegedAction<String>() {\n-\n-            @Override\n-            public String run() {\n-                String egdSource = System.getProperty(PROP_EGD, \"\");\n-                if (egdSource.length() != 0) {\n-                    return egdSource;\n-                }\n-                egdSource = Security.getProperty(PROP_RNDSOURCE);\n-                if (egdSource == null) {\n-                    return \"\";\n-                }\n-                return egdSource;\n-            }\n-        });\n+    private static final String seedSource = getOverridableSeedSource();\n+\n+    private static String getOverridableSeedSource() {\n+        String egdSource = System.getProperty(PROP_EGD, \"\");\n+        if (egdSource.length() != 0) {\n+            return egdSource;\n+        }\n+        egdSource = Security.getProperty(PROP_RNDSOURCE);\n+        if (egdSource == null) {\n+            return \"\";\n+        }\n+        return egdSource;\n+    }\n@@ -389,2 +381,0 @@\n-     * Method called within PrivilegedExceptionAction block.\n-     *\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/SunEntries.java","additions":14,"deletions":24,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1996, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1996, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,1 +64,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -78,14 +77,2 @@\n-        \/\/ if there is no security manager installed, put directly into\n-        \/\/ the provider\n-        if (System.getSecurityManager() == null) {\n-            putEntries(sunIter);\n-            putEntries(rsaIter);\n-        } else {\n-            AccessController.doPrivileged(new PrivilegedAction<Object>() {\n-                public Void run() {\n-                    putEntries(sunIter);\n-                    putEntries(rsaIter);\n-                    return null;\n-                }\n-            });\n-        }\n+        putEntries(sunIter);\n+        putEntries(rsaIter);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/provider\/VerificationProvider.java","additions":3,"deletions":16,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -94,1 +93,1 @@\n-        \"true\".equalsIgnoreCase(GetPropertyAction.privilegedGetProperty(\n+        \"true\".equalsIgnoreCase(System.getProperty(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/RSAKeyFactory.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -46,1 +46,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -51,15 +50,1 @@\n-        Iterator<Provider.Service> serviceIter = new SunRsaSignEntries(p).iterator();\n-\n-        if (System.getSecurityManager() == null) {\n-            putEntries(serviceIter);\n-        } else {\n-            AccessController.doPrivileged(new PrivilegedAction<Void>() {\n-                @Override\n-                public Void run() {\n-                    putEntries(serviceIter);\n-                    return null;\n-                }\n-            });\n-        }\n-    }\n-    void putEntries(Iterator<Provider.Service> i) {\n+        Iterator<Provider.Service> i = new SunRsaSignEntries(p).iterator();\n","filename":"src\/java.base\/share\/classes\/sun\/security\/rsa\/SunRsaSign.java","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.security.AccessController;\n@@ -30,1 +29,0 @@\n-import java.security.PrivilegedAction;\n@@ -51,8 +49,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String property = AccessController.doPrivileged(\n-                new PrivilegedAction<String>() {\n-                    @Override\n-                    public String run() {\n-                        return Security.getProperty(propertyName);\n-                    }\n-                });\n+        String property = Security.getProperty(propertyName);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/AbstractAlgorithmConstraints.java","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -57,1 +56,1 @@\n-        args = GetPropertyAction.privilegedGetProperty(\"java.security.debug\");\n+        args = System.getProperty(\"java.security.debug\");\n@@ -59,2 +58,1 @@\n-        String args2 = GetPropertyAction\n-                .privilegedGetProperty(\"java.security.auth.debug\");\n+        String args2 = System.getProperty(\"java.security.auth.debug\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Debug.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -208,15 +206,6 @@\n-            @SuppressWarnings(\"removal\")\n-            InputStream is = AccessController.doPrivileged(\n-                new PrivilegedAction<>() {\n-                    @Override\n-                    public InputStream run() {\n-                        File f = new File(StaticProperty.javaHome(),\n-                            \"lib\/security\/public_suffix_list.dat\");\n-                        try {\n-                            return new FileInputStream(f);\n-                        } catch (FileNotFoundException e) {\n-                            return null;\n-                        }\n-                    }\n-                }\n-            );\n+            InputStream is = null;\n+            File f = new File(System.getProperty(\"java.home\"),\n+                \"lib\/security\/public_suffix_list.dat\");\n+            try {\n+                is = new FileInputStream(f);\n+            } catch (FileNotFoundException e) { }\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/DomainName.java","additions":6,"deletions":17,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2016, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2016, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,1 +43,1 @@\n-        String flag = SecurityProperties.privilegedGetOverridable(\n+        String flag = SecurityProperties.getOverridableProperty(\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/FilePermCompat.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -156,1 +156,1 @@\n-                    } catch (UnknownHostException | SecurityException e) {}\n+                    } catch (UnknownHostException e) {}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/HostnameChecker.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,128 +0,0 @@\n-\/*\n- * Copyright (c) 2019, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package sun.security.util;\n-\n-import java.io.File;\n-import java.io.FilePermission;\n-import java.io.IOException;\n-import java.net.URL;\n-import java.security.CodeSource;\n-import java.security.Permission;\n-import java.security.PermissionCollection;\n-import java.util.Enumeration;\n-\n-\/**\n- * This {@code PermissionCollection} implementation delegates to another\n- * {@code PermissionCollection}, taking care to lazily add the permission needed\n- * to read from the given {@code CodeSource} at first use, i.e., when either of\n- * {@link #elements}, {@link #implies} or {@link #toString} is called, or when\n- * the collection is serialized.\n- *\/\n-public final class LazyCodeSourcePermissionCollection\n-        extends PermissionCollection\n-{\n-    @java.io.Serial\n-    private static final long serialVersionUID = -6727011328946861783L;\n-    private final PermissionCollection perms;\n-    private final CodeSource cs;\n-    private volatile boolean permissionAdded;\n-\n-    public LazyCodeSourcePermissionCollection(PermissionCollection perms,\n-                                              CodeSource cs) {\n-        this.perms = perms;\n-        this.cs = cs;\n-    }\n-\n-    private void ensureAdded() {\n-        if (!permissionAdded) {\n-            synchronized(perms) {\n-                if (permissionAdded)\n-                    return;\n-\n-                \/\/ open connection to determine the permission needed\n-                URL location = cs.getLocation();\n-                if (location != null) {\n-                    try {\n-                        Permission p = location.openConnection().getPermission();\n-                        if (p != null) {\n-                            \/\/ for directories then need recursive access\n-                            if (p instanceof FilePermission) {\n-                                String path = p.getName();\n-                                if (path.endsWith(File.separator)) {\n-                                    path += \"-\";\n-                                    p = new FilePermission(path,\n-                                            SecurityConstants.FILE_READ_ACTION);\n-                                }\n-                            }\n-                            perms.add(p);\n-                        }\n-                    } catch (IOException ioe) {\n-                    }\n-                }\n-                if (isReadOnly()) {\n-                    perms.setReadOnly();\n-                }\n-                permissionAdded = true;\n-            }\n-        }\n-    }\n-\n-    @Override\n-    public void add(Permission permission) {\n-        if (isReadOnly())\n-            throw new SecurityException(\n-                    \"attempt to add a Permission to a readonly PermissionCollection\");\n-        perms.add(permission);\n-    }\n-\n-    @Override\n-    public boolean implies(Permission permission) {\n-        ensureAdded();\n-        return perms.implies(permission);\n-    }\n-\n-    @Override\n-    public Enumeration<Permission> elements() {\n-        ensureAdded();\n-        return perms.elements();\n-    }\n-\n-    @Override\n-    public String toString() {\n-        ensureAdded();\n-        return perms.toString();\n-    }\n-\n-    \/**\n-     * On serialization, initialize and replace with the underlying\n-     * permissions. This removes the laziness on deserialization.\n-     *\/\n-    @java.io.Serial\n-    private Object writeReplace() {\n-        ensureAdded();\n-        return perms;\n-    }\n-}\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/LazyCodeSourcePermissionCollection.java","additions":0,"deletions":128,"binary":false,"changes":128,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -52,2 +52,2 @@\n-     * allows the actual formatting (and associated permission checks) to be\n-     * avoided unless the resulting string is needed.\n+     * allows the actual formatting to be avoided unless the resulting string\n+     * is needed.\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/LocalizedMessage.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -28,3 +28,0 @@\n-import java.lang.reflect.ReflectPermission;\n-import java.net.NetPermission;\n-import java.net.SocketPermission;\n@@ -32,2 +29,0 @@\n-import java.security.SecurityPermission;\n-import sun.security.action.GetPropertyAction;\n@@ -66,3 +61,1 @@\n-    \/\/ java.lang.Class, java.lang.SecurityManager, java.lang.System,\n-    \/\/ java.net.URLConnection, java.security.AllPermission, java.security.Policy,\n-    \/\/ sun.security.provider.PolicyFile\n+    \/\/ java.lang.Class, java.net.URLConnection, java.security.AllPermission\n@@ -71,29 +64,1 @@\n-    \/\/ java.net.URL\n-    public static final NetPermission SPECIFY_HANDLER_PERMISSION =\n-       new NetPermission(\"specifyStreamHandler\");\n-\n-    \/\/ java.net.ServerSocket, java.net.Socket\n-    public static final NetPermission SET_SOCKETIMPL_PERMISSION =\n-        new NetPermission(\"setSocketImpl\");\n-\n-    \/\/ java.lang.SecurityManager, sun.applet.AppletPanel\n-    public static final RuntimePermission CREATE_CLASSLOADER_PERMISSION =\n-        new RuntimePermission(\"createClassLoader\");\n-\n-    \/\/ java.lang.SecurityManager\n-    public static final RuntimePermission CHECK_MEMBER_ACCESS_PERMISSION =\n-        new RuntimePermission(\"accessDeclaredMembers\");\n-\n-    \/\/ java.lang.SecurityManager, sun.applet.AppletSecurity\n-    public static final RuntimePermission MODIFY_THREAD_PERMISSION =\n-        new RuntimePermission(\"modifyThread\");\n-\n-    \/\/ java.lang.SecurityManager, sun.applet.AppletSecurity\n-    public static final RuntimePermission MODIFY_THREADGROUP_PERMISSION =\n-        new RuntimePermission(\"modifyThreadGroup\");\n-\n-    \/\/ java.lang.Class\n-    public static final RuntimePermission GET_PD_PERMISSION =\n-        new RuntimePermission(\"getProtectionDomain\");\n-\n-    \/\/ java.lang.Class, java.lang.ClassLoader, java.lang.Thread\n+    \/\/ com.sun.jndi.ldap.LdapDnsProviderService\n@@ -103,24 +68,0 @@\n-    \/\/ java.lang.Thread\n-    public static final RuntimePermission GET_STACK_TRACE_PERMISSION =\n-       new RuntimePermission(\"getStackTrace\");\n-\n-    \/\/ java.lang.Thread\n-    public static final RuntimePermission SUBCLASS_IMPLEMENTATION_PERMISSION =\n-        new RuntimePermission(\"enableContextClassLoaderOverride\");\n-\n-    \/\/ java.security.AccessControlContext\n-    public static final SecurityPermission CREATE_ACC_PERMISSION =\n-       new SecurityPermission(\"createAccessControlContext\");\n-\n-    \/\/ java.security.AccessControlContext\n-    public static final SecurityPermission GET_COMBINER_PERMISSION =\n-       new SecurityPermission(\"getDomainCombiner\");\n-\n-    \/\/ java.security.Policy, java.security.ProtectionDomain\n-    public static final SecurityPermission GET_POLICY_PERMISSION =\n-        new SecurityPermission (\"getPolicy\");\n-\n-    \/\/ java.lang.SecurityManager\n-    public static final SocketPermission LOCAL_LISTEN_PERMISSION =\n-        new SocketPermission(\"localhost:0\", SOCKET_LISTEN_ACTION);\n-\n@@ -128,10 +69,1 @@\n-        GetPropertyAction.privilegedGetProperty(\"java.specification.version\");\n-\n-    \/\/ java.lang.reflect.AccessibleObject\n-    public static final ReflectPermission ACCESS_PERMISSION =\n-        new ReflectPermission(\"suppressAccessChecks\");\n-\n-    \/\/ sun.reflect.ReflectionFactory\n-    public static final RuntimePermission REFLECTION_FACTORY_ACCESS_PERMISSION =\n-        new RuntimePermission(\"reflectionFactoryAccess\");\n-\n+        System.getProperty(\"java.specification.version\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityConstants.java","additions":3,"deletions":71,"binary":false,"changes":74,"status":"modified"},{"patch":"@@ -72,1 +72,1 @@\n-        String val = privilegedGetOverridable(\"jdk.includeInExceptions\");\n+        String val = getOverridableProperty(\"jdk.includeInExceptions\");\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityProperties.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2017, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2017, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,1 +37,0 @@\n-import sun.security.action.GetPropertyAction;\n@@ -178,2 +177,1 @@\n-        String keyLengthStr = GetPropertyAction.privilegedGetProperty\n-            (KEY_LENGTH_PROP);\n+        String keyLengthStr = System.getProperty(KEY_LENGTH_PROP);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SecurityProviderConstants.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-import sun.security.action.GetIntegerAction;\n@@ -850,2 +849,1 @@\n-        int tmp = GetIntegerAction.privilegedGetProperty(\n-                \"jdk.jar.maxSignatureFileSize\", 16000000);\n+        int tmp = Integer.getInteger(\"jdk.jar.maxSignatureFileSize\", 16000000);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/SignatureFileVerifier.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -38,2 +38,0 @@\n-        long larg = 1234567890L;\n-\n@@ -41,2 +39,0 @@\n-        System.setProperty(\"integer\", \"9\");\n-        System.setProperty(\"long\", Long.toString(larg));\n@@ -53,16 +49,0 @@\n-        Integer i = AccessController.doPrivileged\n-                        (new GetIntegerAction(\"integer\"));\n-        if (i.intValue() == 9) {\n-            System.out.println(\"integer test passed\");\n-        } else {\n-            throw new SecurityException(\"integer test failed\");\n-        }\n-\n-        Long l = AccessController.doPrivileged\n-                        (new GetLongAction(\"long\"));\n-        if (l.longValue() == larg) {\n-            System.out.println(\"long test passed\");\n-        } else {\n-            throw new SecurityException(\"long test failed\");\n-        }\n-\n","filename":"test\/jdk\/sun\/security\/action\/Generify.java","additions":0,"deletions":20,"binary":false,"changes":20,"status":"modified"},{"patch":"@@ -1,54 +0,0 @@\n-\/*\n- * Copyright (c) 1998, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 4173993\n- * @summary Make sure \"null\" is returned if property does not exist (or has\n- * wrong numeric format) and no default has been specified.\n- * @modules java.base\/sun.security.action\n- *\/\n-\n-import sun.security.action.*;\n-\n-public class ReturnNullIfNoDefault {\n-\n-    public static void main(String[] args) throws Exception {\n-        long larg = 1234567890L;\n-\n-        GetLongAction ac = new GetLongAction(\"test\");\n-        if (ac.run() != null)\n-            throw new Exception(\"Returned value is not null\");\n-\n-        ac = new GetLongAction(\"test\", larg);\n-        long ret = ((Long)ac.run()).longValue();\n-        if (ret != larg)\n-            throw new Exception(\"Returned value differs from default\");\n-\n-        System.setProperty(\"test\", Long.toString(larg));\n-        ac = new GetLongAction(\"test\");\n-        ret = ((Long)ac.run()).longValue();\n-        if (ret != larg)\n-            throw new Exception(\"Returned value differs from property\");\n-    }\n-}\n","filename":"test\/jdk\/sun\/security\/action\/GetLongAction\/ReturnNullIfNoDefault.java","additions":0,"deletions":54,"binary":false,"changes":54,"status":"deleted"}]}