{"files":[{"patch":"@@ -224,4 +224,0 @@\n-  if (!UseCompressedOops) {\n-    \/\/ Pointer relocation for uncompressed oops is unimplemented.\n-    return false;\n-  }\n@@ -231,0 +227,19 @@\n+class ArchiveHeapLoader::PatchUncompressedLoadedRegionPointers: public BitMapClosure {\n+  oop* _start;\n+  intx _runtime_offset;\n+\n+ public:\n+  PatchUncompressedLoadedRegionPointers(oop* start, LoadedArchiveHeapRegion* loaded_region)\n+    : _start(start),\n+      _runtime_offset(loaded_region->_runtime_offset) {}\n+\n+  bool do_bit(size_t offset) {\n+    oop* p = _start + offset;\n+    intptr_t dumptime_oop = (intptr_t)((void*)*p);\n+    assert(dumptime_oop != 0, \"null oops should have been filtered out at dump time\");\n+    intptr_t runtime_oop = dumptime_oop + _runtime_offset;\n+    RawAccess<IS_NOT_NULL>::oop_store(p, cast_to_oop(runtime_oop));\n+    return true;\n+  }\n+};\n+\n@@ -315,2 +330,7 @@\n-  PatchLoadedRegionPointers patcher((narrowOop*)load_address + FileMapInfo::current_info()->heap_oopmap_start_pos(), loaded_region);\n-  bm.iterate(&patcher);\n+  if (UseCompressedOops) {\n+    PatchLoadedRegionPointers patcher((narrowOop*)load_address + FileMapInfo::current_info()->heap_oopmap_start_pos(), loaded_region);\n+    bm.iterate(&patcher);\n+  } else {\n+    PatchUncompressedLoadedRegionPointers patcher((oop*)load_address + FileMapInfo::current_info()->heap_oopmap_start_pos(), loaded_region);\n+    bm.iterate(&patcher);\n+  }\n@@ -321,1 +341,1 @@\n-  assert(UseCompressedOops, \"loaded heap for !UseCompressedOops is unimplemented\");\n+  assert(can_load(), \"loaded heap for must be supported\");\n@@ -361,2 +381,6 @@\n-    \/\/ Uncompressed oops are not supported by loaded heaps.\n-    Unimplemented();\n+    oop v = *p;\n+    if(v != nullptr) {\n+      uintptr_t u = cast_from_oop<uintptr_t>(v);\n+      ArchiveHeapLoader::assert_in_loaded_heap(u);\n+      guarantee(_table->contains(u), \"must point to beginning of object in loaded archived region\");\n+    }\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.cpp","additions":33,"deletions":9,"binary":false,"changes":42,"status":"modified"},{"patch":"@@ -149,0 +149,1 @@\n+  class PatchUncompressedLoadedRegionPointers;\n","filename":"src\/hotspot\/share\/cds\/archiveHeapLoader.hpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2057,2 +2057,1 @@\n-        \/\/ TODO - remove implicit knowledge of G1\n-        log_info(cds)(\"Cannot use CDS heap data. UseG1GC is required for -XX:-UseCompressedOops\");\n+        log_info(cds)(\"Cannot use CDS heap data. Selected GC not compatible -XX:-UseCompressedOops\");\n@@ -2138,1 +2137,1 @@\n-  assert(ArchiveHeapLoader::can_map(), \"cannot be used by ArchiveHeapLoader::can_load() mode\");\n+  assert(ArchiveHeapLoader::can_use(), \"cannot be used by ArchiveHeapLoader::can_load() mode\");\n","filename":"src\/hotspot\/share\/cds\/filemap.cpp","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-  bool can_load_archived_objects() const override { return UseCompressedOops; }\n+  bool can_load_archived_objects() const override { return true; }\n","filename":"src\/hotspot\/share\/gc\/epsilon\/epsilonHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -249,1 +249,1 @@\n-  bool can_load_archived_objects() const override { return UseCompressedOops; }\n+  bool can_load_archived_objects() const override { return true; }\n","filename":"src\/hotspot\/share\/gc\/parallel\/parallelScavengeHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -294,1 +294,1 @@\n-  bool can_load_archived_objects() const override { return UseCompressedOops; }\n+  bool can_load_archived_objects() const override { return true; }\n","filename":"src\/hotspot\/share\/gc\/serial\/serialHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -546,1 +546,1 @@\n-  bool can_load_archived_objects() const override { return UseCompressedOops; }\n+  bool can_load_archived_objects() const override { return true; }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahHeap.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2162,2 +2162,1 @@\n-  return HeapShared::can_write()\n-      && ArchiveHeapLoader::can_use(); \/\/ work-around JDK-8341371\n+  return HeapShared::can_write() && ArchiveHeapLoader::can_use();\n","filename":"src\/hotspot\/share\/prims\/whitebox.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,19 @@\n+\/\/ Below is exactly the same as above, except:\n+\/\/ - requires vm.bits == \"64\"\n+\/\/ - extra argument \"false\"\n+\n+\/*\n+ * @test Loading CDS archived heap objects into EpsilonGC\n+ * @bug 8234679\n+ * @requires vm.cds\n+ * @requires vm.gc.Epsilon\n+ * @requires vm.gc.G1\n+ *\n+ * @comment don't run this test if any -XX::+Use???GC options are specified, since they will\n+ *          interfere with the test.\n+ * @requires vm.gc == null\n+ *\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/Hello.java\n+ * @run driver TestEpsilonGCWithCDS false\n+ *\/\n@@ -46,0 +65,1 @@\n+    static boolean useCompressedOops = true;\n@@ -50,0 +70,4 @@\n+        if (args.length > 0 && args[0].equals(\"false\")) {\n+            useCompressedOops = false;\n+        }\n+\n@@ -73,0 +97,2 @@\n+        String errMsg = \"Cannot use CDS heap data. Selected GC not compatible -XX:-UseCompressedOops\";\n+        String coops = useCompressedOops ? \"-XX:+UseCompressedOops\" : \"-XX:-UseCompressedOops\";\n@@ -82,0 +108,1 @@\n+                              coops,\n@@ -92,0 +119,1 @@\n+                              coops,\n@@ -95,0 +123,1 @@\n+        out.shouldNotContain(errMsg);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestEpsilonGCWithCDS.java","additions":29,"deletions":0,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -40,0 +40,19 @@\n+\/\/ Below is exactly the same as above, except:\n+\/\/ - requires vm.bits == \"64\"\n+\/\/ - extra argument \"false\"\n+\n+ \/*\n+ * @test Loading CDS archived heap objects into ParallelGC\n+ * @bug 8274788\n+ * @requires vm.cds\n+ * @requires vm.gc.Parallel\n+ * @requires vm.gc.G1\n+ *\n+ * @comment don't run this test if any -XX::+Use???GC options are specified, since they will\n+ *          interfere with the test.\n+ * @requires vm.gc == null\n+ *\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/Hello.java\n+ * @run driver TestParallelGCWithCDS false\n+ *\/\n@@ -46,0 +65,1 @@\n+    static boolean useCompressedOops = true;\n@@ -50,0 +70,4 @@\n+        if (args.length > 0 && args[0].equals(\"false\")) {\n+            useCompressedOops = false;\n+        }\n+\n@@ -72,0 +96,2 @@\n+        String errMsg = \"Cannot use CDS heap data. Selected GC not compatible -XX:-UseCompressedOops\";\n+        String coops = useCompressedOops ? \"-XX:+UseCompressedOops\" : \"-XX:-UseCompressedOops\";\n@@ -80,0 +106,1 @@\n+                              coops,\n@@ -89,0 +116,1 @@\n+                              coops,\n@@ -92,0 +120,1 @@\n+        out.shouldNotContain(errMsg);\n@@ -112,0 +141,1 @@\n+                                      coops,\n@@ -116,0 +146,1 @@\n+                    out.shouldNotContain(errMsg);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestParallelGCWithCDS.java","additions":31,"deletions":0,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -101,0 +101,1 @@\n+        String errMsg = \"Cannot use CDS heap data. Selected GC not compatible -XX:-UseCompressedOops\";\n@@ -128,1 +129,1 @@\n-        checkExecOutput(dumpWithSerial, execWithSerial, out);\n+        out.shouldNotContain(errMsg);\n@@ -139,1 +140,1 @@\n-        checkExecOutput(dumpWithSerial, execWithSerial, out);\n+        out.shouldNotContain(errMsg);\n@@ -163,1 +164,1 @@\n-                    checkExecOutput(dumpWithSerial, execWithSerial, out);\n+                    out.shouldNotContain(errMsg);\n@@ -176,15 +177,0 @@\n-\n-    static void checkExecOutput(boolean dumpWithSerial, boolean execWithSerial, OutputAnalyzer out) {\n-        String errMsg = \"Cannot use CDS heap data. UseG1GC is required for -XX:-UseCompressedOops\";\n-        if (Platform.is64bit() &&\n-            !Platform.isWindows() && \/\/ archive heap not supported on Windows.\n-            !dumpWithSerial && \/\/ Dumped with G1, so we have an archived heap\n-            execWithSerial && \/\/ Running with serial\n-            !useCompressedOops) { \/\/ ArchiveHeapLoader::can_load() always returns false when COOP is disabled\n-            out.shouldContain(errMsg);\n-        }\n-        if (!execWithSerial) {\n-            \/\/ We should never see this message with G1\n-            out.shouldNotContain(errMsg);\n-        }\n-    }\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestSerialGCWithCDS.java","additions":4,"deletions":18,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -38,0 +38,17 @@\n+\/\/ Below is exactly the same as above, except:\n+\/\/ - requires vm.bits == \"64\"\n+\/\/ - extra argument \"false\"\n+\n+\/*\n+ * @test\n+ * @bug 8293650\n+ * @requires vm.cds\n+ * @requires vm.bits == 64\n+ * @requires vm.gc.Shenandoah\n+ * @requires vm.gc.G1\n+ * @requires vm.gc == null\n+ * @library \/test\/lib \/test\/hotspot\/jtreg\/runtime\/cds\/appcds\n+ * @compile test-classes\/Hello.java\n+ * @run driver TestShenandoahWithCDS false\n+ *\/\n+\n@@ -44,0 +61,1 @@\n+    static boolean useCompressedOops = true;\n@@ -48,0 +66,4 @@\n+        if (args.length > 0 && args[0].equals(\"false\")) {\n+            useCompressedOops = false;\n+        }\n+\n@@ -65,0 +87,2 @@\n+        String errMsg = \"Cannot use CDS heap data. Selected GC not compatible -XX:-UseCompressedOops\";\n+        String coops = useCompressedOops ? \"-XX:+UseCompressedOops\" : \"-XX:-UseCompressedOops\";\n@@ -74,0 +98,1 @@\n+                              coops,\n@@ -84,0 +109,1 @@\n+                              coops,\n@@ -87,0 +113,1 @@\n+        out.shouldNotContain(errMsg);\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/appcds\/TestShenandoahWithCDS.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"}]}