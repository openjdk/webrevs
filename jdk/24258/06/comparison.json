{"files":[{"patch":"@@ -187,1 +187,0 @@\n-  const TypePtr* adr_type = access.addr().type();\n@@ -210,1 +209,1 @@\n-                            adr_type, val_type, access.type(), mo, dep, requires_atomic_access,\n+                            val_type, access.type(), mo, dep, requires_atomic_access,\n@@ -224,2 +223,2 @@\n-    Node* mem = mm->memory_at(gvn.C->get_alias_index(adr_type));\n-    load = LoadNode::make(gvn, control, mem, adr, adr_type, val_type, access.type(), mo, dep,\n+    Node* mem = mm->memory_at(gvn.C->get_alias_index(access.addr().type()));\n+    load = LoadNode::make(gvn, control, mem, adr, val_type, access.type(), mo, dep,\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/barrierSetC2.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -94,3 +94,0 @@\n-  \/\/ Get the alias_index for raw card-mark memory\n-  int adr_type = Compile::AliasIdxRaw;\n-\n@@ -108,1 +105,1 @@\n-    Node* card_val = __ load( __ ctrl(), card_adr, TypeInt::BYTE, T_BYTE, adr_type);\n+    Node* card_val = __ load( __ ctrl(), card_adr, TypeInt::BYTE, T_BYTE);\n@@ -113,1 +110,1 @@\n-  __ store(__ ctrl(), card_adr, dirty, T_BYTE, adr_type, MemNode::unordered);\n+  __ store(__ ctrl(), card_adr, dirty, T_BYTE, MemNode::unordered);\n","filename":"src\/hotspot\/share\/gc\/shared\/c2\/cardTableBarrierSetC2.cpp","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -218,1 +218,1 @@\n-  Node* ld = __ load(__ ctrl(), gc_state, TypeInt::BYTE, T_BYTE, Compile::AliasIdxRaw);\n+  Node* ld = __ load(__ ctrl(), gc_state, TypeInt::BYTE, T_BYTE);\n@@ -226,1 +226,1 @@\n-    Node* index   = __ load(__ ctrl(), index_adr, TypeX_X, index_bt, Compile::AliasIdxRaw);\n+    Node* index   = __ load(__ ctrl(), index_adr, TypeX_X, index_bt);\n@@ -236,1 +236,1 @@\n-      Node* buffer  = __ load(__ ctrl(), buffer_adr, TypeRawPtr::NOTNULL, T_ADDRESS, Compile::AliasIdxRaw);\n+      Node* buffer  = __ load(__ ctrl(), buffer_adr, TypeRawPtr::NOTNULL, T_ADDRESS);\n@@ -246,1 +246,1 @@\n-        __ store(__ ctrl(), log_addr, pre_val, T_OBJECT, Compile::AliasIdxRaw, MemNode::unordered);\n+        __ store(__ ctrl(), log_addr, pre_val, T_OBJECT, MemNode::unordered);\n@@ -248,1 +248,1 @@\n-        __ store(__ ctrl(), index_adr, next_index, index_bt, Compile::AliasIdxRaw, MemNode::unordered);\n+        __ store(__ ctrl(), index_adr, next_index, index_bt, MemNode::unordered);\n@@ -486,1 +486,1 @@\n-  Node* curr_ct_base_addr = __ load( __ ctrl(), curr_ct_holder_addr, TypeRawPtr::NOTNULL, T_ADDRESS, Compile::AliasIdxRaw);\n+  Node* curr_ct_base_addr = __ load( __ ctrl(), curr_ct_holder_addr, TypeRawPtr::NOTNULL, T_ADDRESS);\n@@ -494,2 +494,0 @@\n-  \/\/ Get the alias_index for raw card-mark memory\n-  int adr_type = Compile::AliasIdxRaw;\n@@ -506,1 +504,1 @@\n-    Node* card_val = __ load( __ ctrl(), card_adr, TypeInt::BYTE, T_BYTE, adr_type);\n+    Node* card_val = __ load( __ ctrl(), card_adr, TypeInt::BYTE, T_BYTE);\n@@ -511,1 +509,1 @@\n-  __ store(__ ctrl(), card_adr, zero, T_BYTE, adr_type, MemNode::unordered);\n+  __ store(__ ctrl(), card_adr, zero, T_BYTE, MemNode::unordered);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/c2\/shenandoahBarrierSetC2.cpp","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -1664,0 +1664,1 @@\n+\n@@ -1669,1 +1670,1 @@\n-    mark_node = LoadNode::make(*phase, control, mem, proto_adr, TypeRawPtr::BOTTOM, TypeX_X, TypeX_X->basic_type(), MemNode::unordered);\n+    mark_node = LoadNode::make(*phase, control, mem, proto_adr, TypeX_X, TypeX_X->basic_type(), MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/callnode.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1579,1 +1579,1 @@\n-  Node* ld = LoadNode::make(_gvn, ctl, mem, adr, adr_type, t, bt, mo, control_dependency, require_atomic_access, unaligned, mismatched, unsafe, barrier_data);\n+  Node* ld = LoadNode::make(_gvn, ctl, mem, adr, t, bt, mo, control_dependency, require_atomic_access, unaligned, mismatched, unsafe, barrier_data);\n@@ -2982,2 +2982,1 @@\n-                                    adr->bottom_type()->is_ptr(), TypeInt::BYTE,\n-                                    T_BYTE, MemNode::acquire);\n+                                    TypeInt::BYTE, T_BYTE, MemNode::acquire);\n@@ -3001,2 +3000,1 @@\n-                                     adr->bottom_type()->is_ptr(), TypePtr::NOTNULL,\n-                                     T_ADDRESS, MemNode::unordered);\n+                                     TypePtr::NOTNULL, T_ADDRESS, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -350,1 +350,0 @@\n-                     int adr_idx,\n@@ -354,1 +353,1 @@\n-\n+  int adr_idx = C->get_alias_index(_gvn.type(adr)->isa_ptr());\n@@ -359,1 +358,1 @@\n-  Node* ld = LoadNode::make(_gvn, ctl, mem, adr, adr_type, t, bt, mo, control_dependency, require_atomic_access);\n+  Node* ld = LoadNode::make(_gvn, ctl, mem, adr, t, bt, mo, control_dependency, require_atomic_access);\n@@ -364,1 +363,0 @@\n-                      int adr_idx,\n@@ -367,0 +365,1 @@\n+  int adr_idx = C->get_alias_index(_gvn.type(adr)->isa_ptr());\n","filename":"src\/hotspot\/share\/opto\/idealKit.cpp","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -222,1 +222,0 @@\n-             int adr_idx,\n@@ -232,1 +231,0 @@\n-              int adr_idx,\n","filename":"src\/hotspot\/share\/opto\/idealKit.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -977,1 +977,1 @@\n-      ? LoadNode::make(_gvn, nullptr, immutable_memory(), p, p->bottom_type()->is_ptr(),\n+      ? LoadNode::make(_gvn, nullptr, immutable_memory(), p,\n@@ -3008,1 +3008,1 @@\n-  Node* notify_jvmti_enabled = ideal.load(ideal.ctrl(), addr, TypeInt::BOOL, T_BOOLEAN, Compile::AliasIdxRaw);\n+  Node* notify_jvmti_enabled = ideal.load(ideal.ctrl(), addr, TypeInt::BOOL, T_BOOLEAN);\n@@ -3090,1 +3090,1 @@\n-    Node* kls_trace_id_raw = ideal.load(ideal.ctrl(), kls_trace_id_addr,TypeLong::LONG, T_LONG, Compile::AliasIdxRaw);\n+    Node* kls_trace_id_raw = ideal.load(ideal.ctrl(), kls_trace_id_addr,TypeLong::LONG, T_LONG);\n@@ -3093,1 +3093,1 @@\n-    Node* epoch = ideal.load(ideal.ctrl(), epoch_address, TypeInt::BOOL, T_BOOLEAN, Compile::AliasIdxRaw);\n+    Node* epoch = ideal.load(ideal.ctrl(), epoch_address, TypeInt::BOOL, T_BOOLEAN);\n@@ -3118,1 +3118,1 @@\n-      Node* array_kls_trace_id_raw = ideal.load(ideal.ctrl(), array_kls_trace_id_addr, TypeLong::LONG, T_LONG, Compile::AliasIdxRaw);\n+      Node* array_kls_trace_id_raw = ideal.load(ideal.ctrl(), array_kls_trace_id_addr, TypeLong::LONG, T_LONG);\n@@ -3127,1 +3127,1 @@\n-    Node* signaled = ideal.load(ideal.ctrl(), signaled_flag_address, TypeInt::BOOL, T_BOOLEAN, Compile::AliasIdxRaw, true, MemNode::acquire);\n+    Node* signaled = ideal.load(ideal.ctrl(), signaled_flag_address, TypeInt::BOOL, T_BOOLEAN, true, MemNode::acquire);\n@@ -3129,1 +3129,1 @@\n-      ideal.store(ideal.ctrl(), signaled_flag_address, ideal.ConI(1), T_BOOLEAN, Compile::AliasIdxRaw, MemNode::release, true);\n+      ideal.store(ideal.ctrl(), signaled_flag_address, ideal.ConI(1), T_BOOLEAN, MemNode::release, true);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1169,2 +1169,1 @@\n-  const TypePtr* adr_type = adr->bottom_type()->is_ptr();\n-  Node* value = LoadNode::make(_igvn, ctl, mem, adr, adr_type, value_type, bt, MemNode::unordered);\n+  Node* value = LoadNode::make(_igvn, ctl, mem, adr, value_type, bt, MemNode::unordered);\n","filename":"src\/hotspot\/share\/opto\/macro.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1030,1 +1030,1 @@\n-          LoadNode::make(_igvn, *ctrl, (*mem)->memory_at(s_alias_idx), sptr, s_adr_type,\n+          LoadNode::make(_igvn, *ctrl, (*mem)->memory_at(s_alias_idx), sptr,\n","filename":"src\/hotspot\/share\/opto\/macroArrayCopy.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -947,1 +947,1 @@\n-Node* LoadNode::make(PhaseGVN& gvn, Node* ctl, Node* mem, Node* adr, const TypePtr* adr_type, const Type* rt, BasicType bt, MemOrd mo,\n+Node* LoadNode::make(PhaseGVN& gvn, Node* ctl, Node* mem, Node* adr, const Type* rt, BasicType bt, MemOrd mo,\n@@ -950,0 +950,1 @@\n+  const TypePtr* adr_type = gvn.type(adr)->isa_ptr();\n@@ -1355,1 +1356,1 @@\n-                        raw_adr_type(), rt, bt, _mo, _control_dependency,\n+                        rt, bt, _mo, _control_dependency,\n@@ -1375,1 +1376,1 @@\n-                        raw_adr_type(), rt, bt, _mo, _control_dependency,\n+                        rt, bt, _mo, _control_dependency,\n@@ -1403,1 +1404,1 @@\n-                        raw_adr_type(), rt, bt, _mo, _control_dependency,\n+                        rt, bt, _mo, _control_dependency,\n","filename":"src\/hotspot\/share\/opto\/memnode.cpp","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -236,2 +236,1 @@\n-  static Node* make(PhaseGVN& gvn, Node* c, Node* mem, Node* adr,\n-                    const TypePtr* at, const Type* rt, BasicType bt,\n+  static Node* make(PhaseGVN& gvn, Node* c, Node* mem, Node* adr, const Type* rt, BasicType bt,\n","filename":"src\/hotspot\/share\/opto\/memnode.hpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1542,1 +1542,1 @@\n-      __ store(__ ctrl(), adr, val, T_BYTE, byte_adr_idx, MemNode::unordered);\n+      __ store(__ ctrl(), adr, val, T_BYTE, MemNode::unordered);\n@@ -1560,1 +1560,1 @@\n-      __ store(__ ctrl(), adr, __ ConI(val), T_CHAR, byte_adr_idx, MemNode::unordered, false \/* require_atomic_access *\/,\n+      __ store(__ ctrl(), adr, __ ConI(val), T_CHAR, MemNode::unordered, false \/* require_atomic_access *\/,\n@@ -1640,1 +1640,1 @@\n-    __ store(__ ctrl(), adr, val, T_BYTE, byte_adr_idx, MemNode::unordered);\n+    __ store(__ ctrl(), adr, val, T_BYTE, MemNode::unordered);\n@@ -1648,1 +1648,1 @@\n-    __ store(__ ctrl(), adr, val, T_CHAR, byte_adr_idx, MemNode::unordered, false \/* require_atomic_access *\/,\n+    __ store(__ ctrl(), adr, val, T_CHAR, MemNode::unordered, false \/* require_atomic_access *\/,\n","filename":"src\/hotspot\/share\/opto\/stringopts.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}