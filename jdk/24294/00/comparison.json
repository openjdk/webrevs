{"files":[{"patch":"@@ -86,0 +86,3 @@\n+        if (currentTypes.isEmpty()) {\n+            PackageType.throwSkippedExceptionIfNativePackagingUnavailable();\n+        }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageTest.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -25,0 +25,2 @@\n+import static jdk.jpackage.internal.util.function.ExceptionBox.rethrowUnchecked;\n+\n@@ -29,0 +31,2 @@\n+import java.util.LinkedHashSet;\n+import java.util.List;\n@@ -36,1 +40,0 @@\n-import static jdk.jpackage.internal.util.function.ExceptionBox.rethrowUnchecked;\n@@ -96,0 +99,9 @@\n+    public static RuntimeException throwSkippedExceptionIfNativePackagingUnavailable() {\n+        if (NATIVE.stream().noneMatch(PackageType::isSupported)) {\n+            TKit.throwSkippedException(\"None of the native packagers supported in this environment\");\n+        } else if (NATIVE.stream().noneMatch(PackageType::isEnabled)) {\n+            TKit.throwSkippedException(\"All native packagers supported in this environment are disabled\");\n+        }\n+        return null;\n+    }\n+\n@@ -134,0 +146,4 @@\n+    private static Set<PackageType> orderedSet(PackageType... types) {\n+        return new LinkedHashSet<>(List.of(types));\n+    }\n+\n@@ -139,3 +155,3 @@\n-    public static final Set<PackageType> LINUX = Set.of(LINUX_DEB, LINUX_RPM);\n-    public static final Set<PackageType> WINDOWS = Set.of(WIN_EXE, WIN_MSI);\n-    public static final Set<PackageType> MAC = Set.of(MAC_PKG, MAC_DMG);\n+    public static final Set<PackageType> LINUX = orderedSet(LINUX_DEB, LINUX_RPM);\n+    public static final Set<PackageType> WINDOWS = orderedSet(WIN_MSI, WIN_EXE);\n+    public static final Set<PackageType> MAC = orderedSet(MAC_DMG, MAC_PKG);\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/PackageType.java","additions":20,"deletions":4,"binary":false,"changes":24,"status":"modified"},{"patch":"@@ -46,0 +46,1 @@\n+import java.util.Base64;\n@@ -521,3 +522,3 @@\n-        RuntimeException ex = ThrowingSupplier.toSupplier(\n-                () -> (RuntimeException) Class.forName(\"jtreg.SkippedException\").getConstructor(\n-                        String.class).newInstance(reason)).get();\n+        RuntimeException ex = ThrowingSupplier.toSupplier(() -> {\n+            return JtregSkippedExceptionClass.INSTANCE.getConstructor(String.class).newInstance(reason);\n+        }).get();\n@@ -1143,0 +1144,26 @@\n+\n+    private static final class JtregSkippedExceptionClass extends ClassLoader {\n+        @SuppressWarnings(\"unchecked\")\n+        JtregSkippedExceptionClass() {\n+            super(TKit.class.getClassLoader());\n+\n+            final byte[] bytes = Base64.getDecoder().decode(\n+                    \/\/ Base64-encoded \"jtreg\/SkippedException.class\" file\n+                    \/\/ emitted by jdk8's javac from \"$OPEN_JDK\/test\/lib\/jtreg\/SkippedException.java\"\n+                    \"yv66vgAAADQAFQoABAARCgAEABIHABMHABQBABBzZXJpYWxWZXJzaW9uVUlEAQABSgEADUNvbnN0\"\n+                    + \"YW50VmFsdWUFErH6BHk+kr0BAAY8aW5pdD4BACooTGphdmEvbGFuZy9TdHJpbmc7TGphdmEvbGFu\"\n+                    + \"Zy9UaHJvd2FibGU7KVYBAARDb2RlAQAPTGluZU51bWJlclRhYmxlAQAVKExqYXZhL2xhbmcvU3Ry\"\n+                    + \"aW5nOylWAQAKU291cmNlRmlsZQEAFVNraXBwZWRFeGNlcHRpb24uamF2YQwACgALDAAKAA4BABZq\"\n+                    + \"dHJlZy9Ta2lwcGVkRXhjZXB0aW9uAQAaamF2YS9sYW5nL1J1bnRpbWVFeGNlcHRpb24AMQADAAQA\"\n+                    + \"AAABABoABQAGAAEABwAAAAIACAACAAEACgALAAEADAAAACMAAwADAAAAByorLLcAAbEAAAABAA0A\"\n+                    + \"AAAKAAIAAAAiAAYAIwABAAoADgABAAwAAAAiAAIAAgAAAAYqK7cAArEAAAABAA0AAAAKAAIAAAAm\"\n+                    + \"AAUAJwABAA8AAAACABA\");\n+\n+            clazz = (Class<RuntimeException>)defineClass(\"jtreg.SkippedException\", bytes, 0, bytes.length);\n+        }\n+\n+        private final Class<RuntimeException> clazz;\n+\n+        static final Class<RuntimeException> INSTANCE = new JtregSkippedExceptionClass().clazz;\n+\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/TKit.java","additions":30,"deletions":3,"binary":false,"changes":33,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import jdk.jpackage.test.Annotations.Parameter;\n@@ -123,1 +122,59 @@\n-    public record TestSpec(Optional<PackageType> type, Optional<String> appDesc, List<String> addArgs,\n+    record PackageTypeSpec(Optional<PackageType> type, boolean anyNativeType) implements CannedFormattedString.CannedArgument {\n+        PackageTypeSpec {\n+            Objects.requireNonNull(type);\n+            if (type.isPresent() && anyNativeType) {\n+                throw new IllegalArgumentException();\n+            }\n+        }\n+\n+        PackageTypeSpec(PackageType type) {\n+            this(Optional.of(type), false);\n+        }\n+\n+        boolean isSupported() {\n+            if (anyNativeType) {\n+                return NATIVE_TYPE.isPresent();\n+            } else {\n+                return type.orElseThrow().isSupported();\n+            }\n+        }\n+\n+        PackageType resolvedType() {\n+            return type.or(() -> NATIVE_TYPE).orElseThrow(PackageType::throwSkippedExceptionIfNativePackagingUnavailable);\n+        }\n+\n+        @Override\n+        public String value() {\n+            return resolvedType().getType();\n+        }\n+\n+        @Override\n+        public final String toString() {\n+            if (anyNativeType) {\n+                return \"NATIVE\";\n+            } else {\n+                return type.orElseThrow().toString();\n+            }\n+        }\n+\n+        private static Optional<PackageType> defaultNativeType() {\n+            final Collection<PackageType> nativeTypes;\n+            if (TKit.isLinux()) {\n+                nativeTypes = PackageType.LINUX;\n+            } else if (TKit.isOSX()) {\n+                nativeTypes = PackageType.MAC;\n+            } else if (TKit.isWindows()) {\n+                nativeTypes = List.of(PackageType.WIN_MSI);\n+            } else {\n+                throw TKit.throwUnknownPlatformError();\n+            }\n+\n+            return nativeTypes.stream().filter(PackageType::isSupported).findFirst();\n+        }\n+\n+        static final PackageTypeSpec NATIVE = new PackageTypeSpec(Optional.empty(), true);\n+\n+        private static final Optional<PackageType> NATIVE_TYPE = defaultNativeType();\n+    }\n+\n+    public record TestSpec(Optional<PackageTypeSpec> type, Optional<String> appDesc, List<String> addArgs,\n@@ -129,1 +186,1 @@\n-                type = v;\n+                type = Optional.ofNullable(v).map(PackageTypeSpec::new).orElse(null);\n@@ -138,1 +195,2 @@\n-                return type(NATIVE_TYPE);\n+                type = PackageTypeSpec.NATIVE;\n+                return this;\n@@ -211,1 +269,2 @@\n-                return addArgs(arg).addArgs(otherArgs).error(\"ERR_InvalidTypeOption\", arg, type.getType());\n+                Objects.requireNonNull(type);\n+                return addArgs(arg).addArgs(otherArgs).error(\"ERR_InvalidTypeOption\", arg, type);\n@@ -223,1 +282,1 @@\n-            private PackageType type = PackageType.IMAGE;\n+            private PackageTypeSpec type = new PackageTypeSpec(PackageType.IMAGE);\n@@ -246,0 +305,4 @@\n+        boolean isSupported() {\n+            return type.map(PackageTypeSpec::isSupported).orElse(true);\n+        }\n+\n@@ -248,1 +311,1 @@\n-            type.ifPresent(cmd::setPackageType);\n+            type.map(PackageTypeSpec::resolvedType).ifPresent(cmd::setPackageType);\n@@ -411,0 +474,1 @@\n+    @ParameterSupplier(\"testRuntimeInstallerInvalidOptions\")\n@@ -422,13 +486,21 @@\n-    @Test\n-    @Parameter({\"--input\", \"foo\"})\n-    @Parameter({\"--module-path\", \"dir\"})\n-    @Parameter({\"--add-modules\", \"java.base\"})\n-    @Parameter({\"--main-class\", \"Hello\"})\n-    @Parameter({\"--arguments\", \"foo\"})\n-    @Parameter({\"--java-options\", \"-Dfoo.bar=10\"})\n-    @Parameter({\"--add-launcher\", \"foo=foo.properties\"})\n-    @Parameter({\"--app-content\", \"dir\"})\n-    @Parameter(value=\"--win-console\", ifOS = WINDOWS)\n-    public static void testRuntimeInstallerInvalidOptions(String... args) {\n-        testSpec().noAppDesc().nativeType().addArgs(\"--runtime-image\", Token.JAVA_HOME.token()).addArgs(args)\n-                .error(\"ERR_NoInstallerEntryPoint\", args[0]).create().test();\n+    public static Collection<Object[]> testRuntimeInstallerInvalidOptions() {\n+        Stream<List<String>> argsStream = Stream.of(\n+                List.of(\"--input\", \"foo\"),\n+                List.of(\"--module-path\", \"dir\"),\n+                List.of(\"--add-modules\", \"java.base\"),\n+                List.of(\"--main-class\", \"Hello\"),\n+                List.of(\"--arguments\", \"foo\"),\n+                List.of(\"--java-options\", \"-Dfoo.bar=10\"),\n+                List.of(\"--add-launcher\", \"foo=foo.properties\"),\n+                List.of(\"--app-content\", \"dir\"));\n+\n+        if (TKit.isWindows()) {\n+            argsStream = Stream.concat(argsStream, Stream.of(List.of(\"--win-console\")));\n+        }\n+\n+        return fromTestSpecBuilders(argsStream.map(args -> {\n+            return testSpec().noAppDesc().nativeType()\n+                    .addArgs(\"--runtime-image\", Token.JAVA_HOME.token())\n+                    .addArgs(args)\n+                    .error(\"ERR_NoInstallerEntryPoint\", args.getFirst());\n+        }));\n@@ -599,3 +671,1 @@\n-        ).map(TestSpec.Builder::create).filter(spec -> {\n-            return spec.type().orElseThrow().isSupported();\n-        }).toList());\n+        ).map(TestSpec.Builder::create).toList());\n@@ -701,12 +771,0 @@\n-    private static PackageType defaultNativeType() {\n-        if (TKit.isLinux()) {\n-            return PackageType.LINUX.stream().filter(PackageType::isSupported).findFirst().orElseThrow();\n-        } else if (TKit.isOSX()) {\n-            return PackageType.MAC_DMG;\n-        } else if (TKit.isWindows()) {\n-            return PackageType.WIN_MSI;\n-        } else {\n-            throw new UnsupportedOperationException();\n-        }\n-    }\n-\n@@ -714,1 +772,7 @@\n-        return stream.map(v -> {\n+        return stream.filter(v -> {\n+            if (v instanceof TestSpec ts) {\n+                return ts.isSupported();\n+            } else {\n+                return true;\n+            }\n+        }).map(v -> {\n@@ -728,2 +792,0 @@\n-\n-    private static final PackageType NATIVE_TYPE = defaultNativeType();\n","filename":"test\/jdk\/tools\/jpackage\/share\/ErrorTest.java","additions":100,"deletions":38,"binary":false,"changes":138,"status":"modified"},{"patch":"@@ -48,1 +48,0 @@\n- * @library \/test\/lib\n@@ -50,1 +49,0 @@\n- * @build jtreg.SkippedException\n","filename":"test\/jdk\/tools\/jpackage\/share\/ServiceTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -43,1 +43,0 @@\n- * @library \/test\/lib\n@@ -46,1 +45,0 @@\n- * @build jtreg.SkippedException\n","filename":"test\/jdk\/tools\/jpackage\/windows\/WinLongPathTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"}]}