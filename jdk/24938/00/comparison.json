{"files":[{"patch":"@@ -2486,1 +2486,1 @@\n-            bsArguments.add(BytecodeHelpers.constantEntry(constantPool(), constantValue));\n+            bsArguments.add(constantPool().loadableConstantEntry(requireNonNull(constantValue)));\n@@ -2944,1 +2944,1 @@\n-        return ldc(BytecodeHelpers.constantEntry(constantPool(), value));\n+        return ldc(constantPool().loadableConstantEntry(requireNonNull(value)));\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/CodeBuilder.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+import jdk.internal.classfile.impl.AbstractPoolEntry;\n@@ -388,1 +389,1 @@\n-        return methodHandleEntry(descriptor.refKind(), switch (descriptor.kind()) {\n+        var ret = methodHandleEntry(descriptor.refKind(), switch (descriptor.kind()) {\n@@ -393,0 +394,2 @@\n+        ((AbstractPoolEntry.MethodHandleEntryImpl) ret).sym = descriptor;\n+        return ret;\n@@ -417,1 +420,3 @@\n-        return invokeDynamicEntry(bsmEntry((DirectMethodHandleDesc)dcsd.bootstrapMethod(), List.of(dcsd.bootstrapArgs())), nameAndTypeEntry(dcsd.invocationName(), dcsd.invocationType()));\n+        var ret = invokeDynamicEntry(bsmEntry((DirectMethodHandleDesc)dcsd.bootstrapMethod(), List.of(dcsd.bootstrapArgs())), nameAndTypeEntry(dcsd.invocationName(), dcsd.invocationType()));\n+        ((AbstractPoolEntry.InvokeDynamicEntryImpl) ret).sym = dcsd;\n+        return ret;\n@@ -443,1 +448,3 @@\n-        return constantDynamicEntry(bsmEntry(dcd.bootstrapMethod(), List.of(dcd.bootstrapArgs())), nameAndTypeEntry(dcd.constantName(), dcd.constantType()));\n+        var ret = constantDynamicEntry(bsmEntry(dcd.bootstrapMethod(), List.of(dcd.bootstrapArgs())), nameAndTypeEntry(dcd.constantName(), dcd.constantType()));\n+        ((AbstractPoolEntry.ConstantDynamicEntryImpl) ret).sym = dcd;\n+        return ret;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/classfile\/constantpool\/ConstantPoolBuilder.java","additions":10,"deletions":3,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -301,1 +301,1 @@\n-            return (state == State.STRING && rawBytes == null)\n+            var ret = (state == State.STRING && rawBytes == null)\n@@ -304,0 +304,4 @@\n+            var mySym = this.typeSym;\n+            if (ret.typeSym == null && mySym != null)\n+                ret.typeSym = mySym;\n+            return ret;\n@@ -840,0 +844,2 @@\n+        public @Stable DynamicCallSiteDesc sym;\n+\n@@ -858,1 +864,13 @@\n-            return cp.invokeDynamicEntry(bootstrap(), nameAndType());\n+            var ret = (InvokeDynamicEntryImpl) cp.invokeDynamicEntry(bootstrap(), nameAndType());\n+            var mySym = this.sym;\n+            if (ret.sym == null && mySym != null)\n+                ret.sym = mySym;\n+            return ret;\n+        }\n+\n+        @Override\n+        public DynamicCallSiteDesc asSymbol() {\n+            var cache = this.sym;\n+            if (cache != null)\n+                return cache;\n+            return this.sym = InvokeDynamicEntry.super.asSymbol();\n@@ -865,0 +883,2 @@\n+        public @Stable DynamicConstantDesc<?> sym;\n+\n@@ -883,1 +903,13 @@\n-            return cp.constantDynamicEntry(bootstrap(), nameAndType());\n+            var ret = (ConstantDynamicEntryImpl) cp.constantDynamicEntry(bootstrap(), nameAndType());\n+            var mySym = this.sym;\n+            if (ret.sym == null && mySym != null)\n+                ret.sym = mySym;\n+            return ret;\n+        }\n+\n+        @Override\n+        public DynamicConstantDesc<?> asSymbol() {\n+            var cache = this.sym;\n+            if (cache != null)\n+                return cache;\n+            return this.sym = ConstantDynamicEntry.super.asSymbol();\n@@ -892,0 +924,1 @@\n+        public @Stable DirectMethodHandleDesc sym;\n@@ -924,1 +957,8 @@\n-            return MethodHandleDesc.of(\n+            var cache = this.sym;\n+            if (cache != null)\n+                return cache;\n+            return computeSymbol();\n+        }\n+\n+        private DirectMethodHandleDesc computeSymbol() {\n+            return this.sym = MethodHandleDesc.of(\n@@ -938,1 +978,5 @@\n-            return cp.methodHandleEntry(refKind, reference);\n+            var ret = (MethodHandleEntryImpl) cp.methodHandleEntry(refKind, reference);\n+            var mySym = this.sym;\n+            if (ret.sym == null && mySym != null)\n+                ret.sym = mySym;\n+            return ret;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/AbstractPoolEntry.java","additions":50,"deletions":6,"binary":false,"changes":56,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,0 @@\n-import java.lang.constant.ClassDesc;\n@@ -37,1 +36,0 @@\n-import java.lang.constant.MethodTypeDesc;\n@@ -518,32 +516,0 @@\n-    public static LoadableConstantEntry constantEntry(ConstantPoolBuilder constantPool,\n-                                                      ConstantDesc constantValue) {\n-        \/\/ this method is invoked during JVM bootstrap - cannot use pattern switch\n-        if (constantValue instanceof Integer value) {\n-            return constantPool.intEntry(value);\n-        }\n-        if (constantValue instanceof String value) {\n-            return constantPool.stringEntry(value);\n-        }\n-        if (constantValue instanceof ClassDesc value && !value.isPrimitive()) {\n-            return constantPool.classEntry(value);\n-        }\n-        if (constantValue instanceof Long value) {\n-            return constantPool.longEntry(value);\n-        }\n-        if (constantValue instanceof Float value) {\n-            return constantPool.floatEntry(value);\n-        }\n-        if (constantValue instanceof Double value) {\n-            return constantPool.doubleEntry(value);\n-        }\n-        if (constantValue instanceof MethodTypeDesc value) {\n-            return constantPool.methodTypeEntry(value);\n-        }\n-        if (constantValue instanceof DirectMethodHandleDesc value) {\n-            return handleDescToHandleInfo(constantPool, value);\n-        } if (constantValue instanceof DynamicConstantDesc<?> value) {\n-            return handleConstantDescToHandleInfo(constantPool, value);\n-        }\n-        throw new UnsupportedOperationException(\"not yet: \" + requireNonNull(constantValue));\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/BytecodeHelpers.java","additions":1,"deletions":35,"binary":false,"changes":36,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.lang.constant.DynamicCallSiteDesc;\n@@ -524,0 +525,4 @@\n+            var mySym = e.sym;\n+            if (ce.sym == null && mySym != null) {\n+                ce.sym = mySym;\n+            }\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/SplitConstantPool.java","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -719,1 +719,1 @@\n-                currentFrame.pushStack(cp.entryByIndex(index, ConstantDynamicEntry.class).asSymbol().constantType());\n+                currentFrame.pushStack(cp.entryByIndex(index, ConstantDynamicEntry.class).typeSymbol());\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/StackMapGenerator.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}