{"files":[{"patch":"@@ -704,0 +704,21 @@\n+\n+        \/\/ Module, package, class, method, and variable declarations remember their end positions\n+        switch (tree.getTag()) {\n+        case MODULEDEF:\n+            ((JCModuleDecl)tree).endPos = endpos;\n+            break;\n+        case PACKAGEDEF:\n+            ((JCPackageDecl)tree).endPos = endpos;\n+            break;\n+        case CLASSDEF:\n+            ((JCClassDecl)tree).endPos = endpos;\n+            break;\n+        case METHODDEF:\n+            ((JCMethodDecl)tree).endPos = endpos;\n+            break;\n+        case VARDEF:\n+            ((JCVariableDecl)tree).endPos = endpos;\n+            break;\n+        default:\n+            break;\n+        }\n@@ -2764,0 +2785,1 @@\n+            storeEnd(body, S.prevToken().endPos);\n@@ -4021,0 +4043,1 @@\n+            storeEnd(pd, S.prevToken().endPos);\n@@ -4130,1 +4153,1 @@\n-        List<JCTree> topLevelDefs = isImplicitClass ?  constructImplicitClass(defs.toList()) : defs.toList();\n+        List<JCTree> topLevelDefs = isImplicitClass ? constructImplicitClass(defs.toList(), S.prevToken().endPos) : defs.toList();\n@@ -4146,1 +4169,1 @@\n-    private List<JCTree> constructImplicitClass(List<JCTree> origDefs) {\n+    private List<JCTree> constructImplicitClass(List<JCTree> origDefs, int endPos) {\n@@ -4176,0 +4199,1 @@\n+        storeEnd(implicit, endPos);\n@@ -4191,0 +4215,1 @@\n+        int endPos = S.prevToken().endPos;\n@@ -4194,0 +4219,1 @@\n+        storeEnd(result, endPos);\n@@ -4396,0 +4422,1 @@\n+        storeEnd(result, S.prevToken().endPos);\n@@ -4419,0 +4446,1 @@\n+        int endPos = S.prevToken().endPos;\n@@ -4444,0 +4472,1 @@\n+        storeEnd(result, endPos);\n@@ -4484,0 +4513,1 @@\n+        storeEnd(result, S.prevToken().endPos);\n@@ -4532,0 +4562,1 @@\n+        storeEnd(result, S.prevToken().endPos);\n@@ -4670,0 +4701,1 @@\n+        int endPos = S.prevToken().endPos;\n@@ -4671,1 +4703,1 @@\n-            storeEnd(create, S.prevToken().endPos);\n+            storeEnd(create, endPos);\n@@ -4674,0 +4706,1 @@\n+        storeEnd(result, endPos);\n@@ -5103,0 +5136,1 @@\n+            storeEnd(result, S.prevToken().endPos);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":37,"deletions":3,"binary":false,"changes":40,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -644,0 +644,2 @@\n+        \/** Position of closing semicolon, optional. *\/\n+        public int endPos = Position.NOPOS;\n@@ -840,0 +842,2 @@\n+        \/** position of closing brace, optional. *\/\n+        public int endPos = Position.NOPOS;\n@@ -934,0 +938,2 @@\n+        \/** position of closing brace or semicolon, optional. *\/\n+        public int endPos = Position.NOPOS;\n@@ -1019,0 +1025,2 @@\n+        \/** position of closing semicolon, optional. *\/\n+        public int endPos = Position.NOPOS;\n@@ -3129,0 +3137,2 @@\n+        \/** position of closing brace, optional. *\/\n+        public int endPos = Position.NOPOS;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":11,"deletions":1,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1999, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1999, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -503,2 +503,1 @@\n-    \/** The end position of given tree, if it is a block with\n-     *  defined endpos.\n+    \/** The end position of the given tree, if defined.\n@@ -507,3 +506,6 @@\n-        if (tree.hasTag(BLOCK) && ((JCBlock) tree).endpos != Position.NOPOS)\n-            return ((JCBlock) tree).endpos;\n-        else if (tree.hasTag(SYNCHRONIZED))\n+        int endPos;\n+        switch (tree.getTag()) {\n+        case BLOCK:\n+            endPos = ((JCBlock) tree).endpos;\n+            break;\n+        case SYNCHRONIZED:\n@@ -511,1 +513,1 @@\n-        else if (tree.hasTag(TRY)) {\n+        case TRY:\n@@ -515,7 +517,22 @@\n-        } else if (tree.hasTag(SWITCH) &&\n-                   ((JCSwitch) tree).endpos != Position.NOPOS) {\n-            return ((JCSwitch) tree).endpos;\n-        } else if (tree.hasTag(SWITCH_EXPRESSION) &&\n-                   ((JCSwitchExpression) tree).endpos != Position.NOPOS) {\n-            return ((JCSwitchExpression) tree).endpos;\n-        } else\n+        case SWITCH:\n+            endPos = ((JCSwitch) tree).endpos;\n+            break;\n+        case SWITCH_EXPRESSION:\n+            endPos = ((JCSwitchExpression) tree).endpos;\n+            break;\n+        case MODULEDEF:\n+            endPos = ((JCModuleDecl) tree).endPos;\n+            break;\n+        case PACKAGEDEF:\n+            endPos = ((JCPackageDecl) tree).endPos;\n+            break;\n+        case CLASSDEF:\n+            endPos = ((JCClassDecl) tree).endPos;\n+            break;\n+        case METHODDEF:\n+            endPos = ((JCMethodDecl) tree).endPos;\n+            break;\n+        case VARDEF:\n+            endPos = ((JCVariableDecl) tree).endPos;\n+            break;\n+        default:\n@@ -523,0 +540,4 @@\n+        }\n+        if (endPos != Position.NOPOS)\n+            return endPos;\n+        return tree.pos;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":35,"deletions":14,"binary":false,"changes":49,"status":"modified"},{"patch":"@@ -0,0 +1,123 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8350212\n+ * @summary Verify ending source positions are calculated for declarations supporting SuppressWarnings\n+ * @modules jdk.compiler\/com.sun.tools.javac.tree\n+ * @run main DeclarationEndPositions\n+ *\/\n+\n+import com.sun.source.tree.CompilationUnitTree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.tree.Tree;\n+import com.sun.source.util.JavacTask;\n+import com.sun.source.util.TreeScanner;\n+import com.sun.tools.javac.tree.JCTree;\n+import com.sun.tools.javac.tree.JCTree.*;\n+import com.sun.tools.javac.tree.TreeInfo;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.List;\n+\n+import javax.tools.JavaCompiler;\n+import javax.tools.JavaFileObject;\n+import javax.tools.SimpleJavaFileObject;\n+import javax.tools.ToolProvider;\n+\n+public class DeclarationEndPositions {\n+\n+    public static void checkEndPosition(Class<? extends JCTree> nodeType, String input, String marker) throws IOException {\n+\n+        \/\/ Create source\n+        var source = new SimpleJavaFileObject(URI.create(\"file:\/\/T.java\"), JavaFileObject.Kind.SOURCE) {\n+            @Override\n+            public CharSequence getCharContent(boolean ignoreEncodingErrors) throws IOException {\n+                return input;\n+            }\n+        };\n+\n+        \/\/ Parse source\n+        JavaCompiler compiler = ToolProvider.getSystemJavaCompiler();\n+        JavaCompiler.CompilationTask task = compiler.getTask(null, null, null, List.of(), List.of(), List.of(source));\n+        Iterable<? extends CompilationUnitTree> units = ((JavacTask)task).parse();\n+\n+        \/\/ Find node and check end position\n+        JCTree.JCCompilationUnit unit = (JCTree.JCCompilationUnit)units.iterator().next();\n+        unit.accept(new TreeScanner<Void, Void>() {\n+            @Override\n+            public Void scan(Tree node, Void aVoid) {\n+                if (nodeType.isInstance(node)) {\n+                    JCTree tree = (JCTree)node;\n+                    int actual = TreeInfo.endPos(tree);\n+                    int expected = marker.indexOf('^') + 1;\n+                    if (actual != expected) {\n+                        throw new AssertionError(String.format(\n+                          \"wrong end pos %d != %d for \\\"%s\\\" @ %d\", actual, expected, input, tree.pos));\n+                    }\n+                }\n+                return super.scan(node, aVoid);\n+            }\n+        }, null);\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+\n+        \/\/ JCModuleDecl\n+        checkEndPosition(JCModuleDecl.class,\n+        \/\/  0         1         2         3         4         5\n+        \/\/  012345678901234567890123456789012345678901234567890123456789\n+           \"\/* comment *\/ module fred { \/* comment *\/ } \/* comment *\/\",\n+           \"                                          ^              \");\n+\n+        \/\/ JCPackageDecl\n+        checkEndPosition(JCPackageDecl.class,\n+        \/\/  0         1         2         3         4         5\n+        \/\/  012345678901234567890123456789012345678901234567890123456789\n+           \"\/* comment *\/ package fred; \/* comment *\/\",\n+           \"                          ^              \");\n+\n+        \/\/ JCClassDecl\n+        checkEndPosition(JCClassDecl.class,\n+        \/\/  0         1         2         3         4         5\n+        \/\/  012345678901234567890123456789012345678901234567890123456789\n+           \"\/* comment *\/ class Fred { \/* comment *\/ } \/* comment *\/\",\n+           \"                                         ^              \");\n+\n+        \/\/ JCMethodDecl\n+        checkEndPosition(JCMethodDecl.class,\n+        \/\/  0         1         2         3         4         5\n+        \/\/  012345678901234567890123456789012345678901234567890123456789\n+           \"\/* comment *\/ class Fred { void m() { \/* comment *\/ } } \/* comment *\/\",\n+           \"                                                    ^                \");\n+\n+        \/\/ JCVariableDecl\n+        checkEndPosition(JCVariableDecl.class,\n+        \/\/  0         1         2         3         4         5\n+        \/\/  012345678901234567890123456789012345678901234567890123456789\n+           \"\/* comment *\/ class Fred { int x = 123; } \/* comment *\/\",\n+           \"                                      ^                \");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/parser\/DeclarationEndPositions.java","additions":123,"deletions":0,"binary":false,"changes":123,"status":"added"},{"patch":"@@ -2301,4 +2301,3 @@\n-        String code = \"\"\"\n-                      void main() {\n-                      }\n-                      \"\"\";\n+        \/\/             0         1         2\n+        \/\/             012345678901234567890\n+        String code = \"void main() { }\";\n@@ -2316,1 +2315,1 @@\n-                assertEquals(\"Wrong end position\", -1, sp.getEndPosition(cut, node));\n+                assertEquals(\"Wrong end position\", 15, sp.getEndPosition(cut, node));\n","filename":"test\/langtools\/tools\/javac\/parser\/JavacParserTest.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"}]}