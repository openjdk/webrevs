{"files":[{"patch":"@@ -382,0 +382,4 @@\n+        \/** Table of ending positions.\n+         *\/\n+        EndPosTable endPositions;\n+\n@@ -617,1 +621,1 @@\n-                    log.error(TreeInfo.diagEndPos(tree.body), Errors.MissingRetStmt);\n+                    log.error(TreeInfo.diagEndPos(endPositions, tree.body), Errors.MissingRetStmt);\n@@ -759,1 +763,1 @@\n-                        log.error(TreeInfo.diagEndPos(c.body),\n+                        log.error(TreeInfo.diagEndPos(endPositions, c.body),\n@@ -762,1 +766,1 @@\n-                        log.error(TreeInfo.diagEndPos(tree),\n+                        log.error(TreeInfo.diagEndPos(endPositions, tree),\n@@ -1235,1 +1239,1 @@\n-                    lint.logIfEnabled(TreeInfo.diagEndPos(tree.finalizer),\n+                    lint.logIfEnabled(TreeInfo.diagEndPos(endPositions, tree.finalizer),\n@@ -1341,0 +1345,1 @@\n+                endPositions = env.toplevel.endPositions;\n@@ -1344,0 +1349,1 @@\n+                endPositions = null;\n@@ -1925,0 +1931,1 @@\n+                endPositions = env.toplevel.endPositions;\n@@ -1930,0 +1937,1 @@\n+                endPositions = null;\n@@ -2539,1 +2547,1 @@\n-                                            checkInit(TreeInfo.diagEndPos(tree.body), var);\n+                                            checkInit(TreeInfo.diagEndPos(endPositions, tree.body), var);\n@@ -2545,1 +2553,1 @@\n-                                    checkInit(TreeInfo.diagEndPos(tree.body), var);\n+                                    checkInit(TreeInfo.diagEndPos(endPositions, tree.body), var);\n@@ -3226,1 +3234,1 @@\n-        public void analyzeTree(Env<?> env, TreeMaker make) {\n+        public void analyzeTree(Env<AttrContext> env, TreeMaker make) {\n@@ -3230,1 +3238,1 @@\n-        public void analyzeTree(Env<?> env, JCTree tree, TreeMaker make) {\n+        public void analyzeTree(Env<AttrContext> env, JCTree tree, TreeMaker make) {\n@@ -3243,0 +3251,1 @@\n+                endPositions = env.toplevel.endPositions;\n@@ -3258,0 +3267,1 @@\n+                endPositions = null;\n@@ -3470,0 +3480,1 @@\n+                endPositions = env.toplevel.endPositions;\n@@ -3472,0 +3483,1 @@\n+                endPositions = null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Flow.java","additions":20,"deletions":8,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -1608,1 +1608,1 @@\n-        make.at(TreeInfo.endPos(block));\n+        make.at(TreeInfo.endPos(endPosTable, block));\n@@ -2051,1 +2051,1 @@\n-            if (endPosTable != null && result != tree) {\n+            if (endPosTable != null && result != null && result != tree) {\n@@ -3681,1 +3681,1 @@\n-            body.endpos = TreeInfo.endPos(tree.body);\n+            body.bracePos = TreeInfo.endPos(endPosTable, tree.body);\n@@ -3839,1 +3839,1 @@\n-                JCBreak b = make.at(TreeInfo.endPos(c.stats.last())).Break(null);\n+                JCBreak b = make.at(TreeInfo.endPos(endPosTable, c.stats.last())).Break(null);\n@@ -4142,1 +4142,1 @@\n-                res.endpos = TreeInfo.endPos(tree);\n+                res.bracePos = TreeInfo.endPos(endPosTable, tree);\n@@ -4386,0 +4386,1 @@\n+            this.endPosTable = env.toplevel.endPositions;\n@@ -4392,0 +4393,1 @@\n+            this.endPosTable = null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Lower.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -85,0 +85,1 @@\n+import com.sun.tools.javac.tree.EndPosTable;\n@@ -138,0 +139,1 @@\n+    private EndPosTable endPositions;\n@@ -754,1 +756,1 @@\n-            JCBreak brk = make.at(TreeInfo.endPos(pos)).Break(null);\n+            JCBreak brk = make.at(TreeInfo.endPos(endPositions, pos)).Break(null);\n@@ -1394,0 +1396,1 @@\n+            this.endPositions = env.toplevel.endPositions;\n@@ -1399,0 +1402,1 @@\n+            this.endPositions = null;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TransPatterns.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -503,1 +503,1 @@\n-            block.endpos = TreeInfo.endPos(clinitStats.last());\n+            block.bracePos = TreeInfo.endPos(endPosTable, clinitStats.last());\n@@ -556,2 +556,2 @@\n-            if (md.body.endpos == Position.NOPOS)\n-                md.body.endpos = TreeInfo.endPos(md.body.stats.last());\n+            if (md.body.bracePos == Position.NOPOS)\n+                md.body.bracePos = TreeInfo.endPos(endPosTable, md.body.stats.last());\n@@ -964,1 +964,1 @@\n-                    code.statBegin(TreeInfo.endPos(tree.body));\n+                    code.statBegin(TreeInfo.endPos(endPosTable, tree.body));\n@@ -1018,1 +1018,1 @@\n-                                        genCrt ? new CRTable(tree, env.toplevel.endPositions)\n+                                        genCrt ? new CRTable(tree, endPosTable)\n@@ -1124,1 +1124,1 @@\n-            code.statBegin(tree.endpos);\n+            code.statBegin(tree.bracePos);\n@@ -1453,1 +1453,1 @@\n-                 code.statBegin(TreeInfo.endPos(swtch));\n+                 code.statBegin(TreeInfo.endPos(endPosTable, swtch));\n@@ -1562,1 +1562,1 @@\n-            code.statBegin(TreeInfo.endPos(body));\n+            code.statBegin(TreeInfo.endPos(endPosTable, body));\n@@ -1564,1 +1564,1 @@\n-            code.statBegin(TreeInfo.endPos(env.tree));\n+            code.statBegin(TreeInfo.endPos(endPosTable, env.tree));\n@@ -1583,1 +1583,1 @@\n-                    code.statBegin(TreeInfo.endPos(env.tree));\n+                    code.statBegin(TreeInfo.endPos(endPosTable, env.tree));\n@@ -1611,1 +1611,1 @@\n-                code.statBegin(TreeInfo.finalizerPos(env.tree, PosKind.FIRST_STAT_POS));\n+                code.statBegin(TreeInfo.finalizerPos(endPosTable, env.tree, PosKind.FIRST_STAT_POS));\n@@ -1618,1 +1618,1 @@\n-                code.statBegin(TreeInfo.finalizerPos(env.tree, PosKind.END_POS));\n+                code.statBegin(TreeInfo.finalizerPos(endPosTable, env.tree, PosKind.END_POS));\n@@ -1634,1 +1634,1 @@\n-                    code.statBegin(TreeInfo.finalizerPos(env.tree, PosKind.FIRST_STAT_POS));\n+                    code.statBegin(TreeInfo.finalizerPos(endPosTable, env.tree, PosKind.FIRST_STAT_POS));\n@@ -1721,1 +1721,1 @@\n-            code.statBegin(TreeInfo.endPos(tree.body));\n+            code.statBegin(TreeInfo.endPos(endPosTable, tree.body));\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/Gen.java","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -231,2 +231,2 @@\n-                ? new SimpleEndPosTable(this)\n-                : new EmptyEndPosTable(this);\n+                ? new SimpleEndPosTable()\n+                : new MinimalEndPosTable();\n@@ -633,0 +633,1 @@\n+     *  @return {@code tree}\n@@ -634,1 +635,1 @@\n-    protected void attach(JCTree tree, Comment dc) {\n+    protected <T extends JCTree> T attach(T tree, Comment dc) {\n@@ -639,0 +640,1 @@\n+        return tree;\n@@ -702,23 +704,9 @@\n-    protected void storeEnd(JCTree tree, int endpos) {\n-        endPosTable.storeEnd(tree, endpos);\n-\n-        \/\/ Module, package, class, method, and variable declarations remember their end positions\n-        switch (tree.getTag()) {\n-        case MODULEDEF:\n-            ((JCModuleDecl)tree).endPos = endpos;\n-            break;\n-        case PACKAGEDEF:\n-            ((JCPackageDecl)tree).endPos = endpos;\n-            break;\n-        case CLASSDEF:\n-            ((JCClassDecl)tree).endPos = endpos;\n-            break;\n-        case METHODDEF:\n-            ((JCMethodDecl)tree).endPos = endpos;\n-            break;\n-        case VARDEF:\n-            ((JCVariableDecl)tree).endPos = endpos;\n-            break;\n-        default:\n-            break;\n-        }\n+    \/**\n+     * Store ending position for a tree, the value of which is the greater of\n+     * last error position in {@link #endPosTable} and the given ending position.\n+     * @param tree tree node\n+     * @param endpos the ending position to associate with {@code tree}\n+     * @return {@code tree}\n+     *\/\n+    protected <T extends JCTree> T storeEnd(T tree, int endpos) {\n+        return endPosTable.storeEnd(tree, endpos);\n@@ -727,2 +715,8 @@\n-    protected <T extends JCTree> T to(T t) {\n-        return endPosTable.to(t);\n+    \/**\n+     * Store current token's ending position for a tree, the value of which\n+     * will be the greater of last error position in {@link #endPosTable}\n+     * and the ending position of the current token.\n+     * @param tree tree node\n+     *\/\n+    protected <T extends JCTree> T to(T tree) {\n+        return storeEnd(tree, token.endPos);\n@@ -731,2 +725,8 @@\n-    protected <T extends JCTree> T toP(T t) {\n-        return endPosTable.toP(t);\n+    \/**\n+     * Store current token's ending position for a tree, the value of which\n+     * will be the greater of last error position in {@link #endPosTable}\n+     * and the ending position of the previous token.\n+     * @param tree tree node\n+     *\/\n+    protected <T extends JCTree> T toP(T tree) {\n+        return storeEnd(tree, S.prevToken().endPos);\n@@ -1762,1 +1762,1 @@\n-                    e.endpos = token.pos;\n+                    e.bracePos = token.pos;\n@@ -2785,1 +2785,0 @@\n-            storeEnd(body, S.prevToken().endPos);\n@@ -2841,1 +2840,1 @@\n-        \/\/ the Block node has a field \"endpos\" for first char of last token, which is\n+        \/\/ the Block node has a field \"bracePos\" for first char of last token, which is\n@@ -2843,1 +2842,1 @@\n-        t.endpos = token.pos;\n+        t.bracePos = token.pos;\n@@ -3164,1 +3163,0 @@\n-            t.endpos = token.endPos;\n@@ -3680,3 +3678,1 @@\n-\n-        storeEnd(ann, S.prevToken().endPos);\n-        return ann;\n+        return toP(ann);\n@@ -3857,1 +3853,0 @@\n-        attach(result, dc);\n@@ -3859,2 +3854,1 @@\n-        storeEnd(result, S.prevToken().endPos);\n-        return result;\n+        return attach(result, dc);\n@@ -3948,3 +3942,1 @@\n-                JCVariableDecl result = toP(F.at(pos).ReceiverVarDef(mods, pn, type));\n-                storeEnd(result, S.prevToken().endPos);\n-                return result;\n+                return toP(F.at(pos).ReceiverVarDef(mods, pn, type));\n@@ -3975,1 +3967,1 @@\n-        JCVariableDecl result = toP(F.at(pos).VarDef(mods, name, type, null,\n+        return toP(F.at(pos).VarDef(mods, name, type, null,\n@@ -3977,2 +3969,0 @@\n-        storeEnd(result, S.prevToken().endPos);\n-        return result;\n@@ -4048,1 +4038,0 @@\n-            storeEnd(pd, S.prevToken().endPos);\n@@ -4168,1 +4157,0 @@\n-        this.endPosTable.setParser(null); \/\/ remove reference to parser\n@@ -4223,1 +4211,1 @@\n-        JCModuleDecl result = toP(F.at(pos).ModuleDef(mods, kind, name, directives));\n+        JCModuleDecl result = F.at(pos).ModuleDef(mods, kind, name, directives);\n@@ -4225,2 +4213,1 @@\n-        attach(result, dc);\n-        return result;\n+        return attach(result, dc);\n@@ -4427,3 +4414,1 @@\n-        storeEnd(result, S.prevToken().endPos);\n-        attach(result, dc);\n-        return result;\n+        return attach(result, dc);\n@@ -4451,1 +4436,0 @@\n-        int endPos = S.prevToken().endPos;\n@@ -4477,3 +4461,1 @@\n-        storeEnd(result, endPos);\n-        attach(result, dc);\n-        return result;\n+        return attach(result, dc);\n@@ -4518,3 +4500,1 @@\n-        storeEnd(result, S.prevToken().endPos);\n-        attach(result, dc);\n-        return result;\n+        return attach(result, dc);\n@@ -4567,3 +4547,1 @@\n-        storeEnd(result, S.prevToken().endPos);\n-        attach(result, dc);\n-        return result;\n+        return attach(result, dc);\n@@ -4706,1 +4684,0 @@\n-        int endPos = S.prevToken().endPos;\n@@ -4708,1 +4685,1 @@\n-            storeEnd(create, endPos);\n+            storeEnd(create, S.prevToken().endPos);\n@@ -4711,3 +4688,1 @@\n-        storeEnd(result, endPos);\n-        attach(result, dc);\n-        return result;\n+        return attach(result, dc);\n@@ -5141,3 +5116,1 @@\n-            storeEnd(result, S.prevToken().endPos);\n-            attach(result, dc);\n-            return result;\n+            return attach(result, dc);\n@@ -5440,2 +5413,1 @@\n-            storeEnd(type, origEndPos);\n-            return type;\n+            return storeEnd(type, origEndPos);\n@@ -5654,2 +5626,2 @@\n-    \/*\n-     * a functional source tree and end position mappings\n+    \/**\n+     * A straightforward {@link EndPosTable} implementation.\n@@ -5659,10 +5631,1 @@\n-        private final IntHashTable endPosMap;\n-\n-        SimpleEndPosTable(JavacParser parser) {\n-            super(parser);\n-            endPosMap = new IntHashTable();\n-        }\n-\n-        public void storeEnd(JCTree tree, int endpos) {\n-            endPosMap.put(tree, errorEndPos > endpos ? errorEndPos : endpos);\n-        }\n+        private final IntHashTable endPosMap = new IntHashTable();\n@@ -5670,8 +5633,4 @@\n-        protected <T extends JCTree> T to(T t) {\n-            storeEnd(t, parser.token.endPos);\n-            return t;\n-        }\n-\n-        protected <T extends JCTree> T toP(T t) {\n-            storeEnd(t, parser.S.prevToken().endPos);\n-            return t;\n+        @Override\n+        public <T extends JCTree> T storeEnd(T tree, int endpos) {\n+            endPosMap.put(tree, Math.max(endpos, errorEndPos));\n+            return tree;\n@@ -5680,0 +5639,1 @@\n+        @Override\n@@ -5686,0 +5646,1 @@\n+        @Override\n@@ -5696,2 +5657,2 @@\n-    \/*\n-     * a default skeletal implementation without any mapping overhead.\n+    \/**\n+     * A minimal implementation that only stores what's required.\n@@ -5699,7 +5660,1 @@\n-    protected static class EmptyEndPosTable extends AbstractEndPosTable {\n-\n-        EmptyEndPosTable(JavacParser parser) {\n-            super(parser);\n-        }\n-\n-        public void storeEnd(JCTree tree, int endpos) { \/* empty *\/ }\n+    protected static class MinimalEndPosTable extends SimpleEndPosTable {\n@@ -5707,14 +5662,16 @@\n-        protected <T extends JCTree> T to(T t) {\n-            return t;\n-        }\n-\n-        protected <T extends JCTree> T toP(T t) {\n-            return t;\n-        }\n-\n-        public int getEndPos(JCTree tree) {\n-            return Position.NOPOS;\n-        }\n-\n-        public int replaceTree(JCTree oldTree, JCTree newTree) {\n-            return Position.NOPOS;\n+        @Override\n+        public <T extends JCTree> T storeEnd(T tree, int endpos) {\n+            switch (tree.getTag()) {\n+            case MODULEDEF:\n+            case PACKAGEDEF:\n+            case CLASSDEF:\n+            case METHODDEF:\n+            case VARDEF:\n+            case BLOCK:\n+            case SWITCH:\n+            case SWITCH_EXPRESSION:\n+                break;\n+            default:\n+                return tree;\n+            }\n+            return super.storeEnd(tree, endpos);\n@@ -5722,1 +5679,0 @@\n-\n@@ -5726,4 +5682,0 @@\n-        \/**\n-         * The current parser.\n-         *\/\n-        protected JavacParser parser;\n@@ -5736,25 +5688,1 @@\n-        public AbstractEndPosTable(JavacParser parser) {\n-            this.parser = parser;\n-        }\n-\n-        \/**\n-         * Store current token's ending position for a tree, the value of which\n-         * will be the greater of last error position and the ending position of\n-         * the current token.\n-         * @param t The tree.\n-         *\/\n-        protected abstract <T extends JCTree> T to(T t);\n-\n-        \/**\n-         * Store current token's ending position for a tree, the value of which\n-         * will be the greater of last error position and the ending position of\n-         * the previous token.\n-         * @param t The tree.\n-         *\/\n-        protected abstract <T extends JCTree> T toP(T t);\n-\n-        \/**\n-         * Set the error position during the parsing phases, the value of which\n-         * will be set only if it is greater than the last stored error position.\n-         * @param errPos The error position\n-         *\/\n+        @Override\n@@ -5766,4 +5694,0 @@\n-\n-        public void setParser(JavacParser parser) {\n-            this.parser = parser;\n-        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/parser\/JavacParser.java","additions":76,"deletions":152,"binary":false,"changes":228,"status":"modified"},{"patch":"@@ -28,0 +28,2 @@\n+import com.sun.tools.javac.util.Position;\n+\n@@ -30,0 +32,14 @@\n+ *\n+ * <p>\n+ * Implementations <b>must<\/b> store end positions for at least these node types:\n+ * <ul>\n+ *  <li>{@link JCTree.JCModuleDecl}\n+ *  <li>{@link JCTree.JCPackageDecl}\n+ *  <li>{@link JCTree.JCClassDecl}\n+ *  <li>{@link JCTree.JCMethodDecl}\n+ *  <li>{@link JCTree.JCVariableDecl}\n+ *  <li>{@link JCTree.JCBlock}\n+ *  <li>{@link JCTree.JCSwitch}\n+ *  <li>{@link JCTree.JCSwitchExpression}\n+ * <\/ul>\n+ *\n@@ -43,1 +59,1 @@\n-    public int getEndPos(JCTree tree);\n+    int getEndPos(JCTree tree);\n@@ -50,0 +66,8 @@\n+     * @return the {@code tree}\n+     *\/\n+    <T extends JCTree> T storeEnd(T tree, int endpos);\n+\n+    \/**\n+     * Set the error position during the parsing phases, the value of which\n+     * will be set only if it is greater than the last stored error position.\n+     * @param errPos The error position\n@@ -51,1 +75,1 @@\n-    public abstract void storeEnd(JCTree tree, int endpos);\n+    void setErrorEndPos(int errPos);\n@@ -61,1 +85,1 @@\n-    public int replaceTree(JCTree oldtree, JCTree newtree);\n+    int replaceTree(JCTree oldtree, JCTree newtree);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/EndPosTable.java","additions":27,"deletions":3,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -644,2 +644,0 @@\n-        \/** Position of closing semicolon, optional. *\/\n-        public int endPos = Position.NOPOS;\n@@ -842,2 +840,0 @@\n-        \/** position of closing brace, optional. *\/\n-        public int endPos = Position.NOPOS;\n@@ -938,2 +934,0 @@\n-        \/** position of closing brace or semicolon, optional. *\/\n-        public int endPos = Position.NOPOS;\n@@ -1025,2 +1019,0 @@\n-        \/** position of closing semicolon, optional. *\/\n-        public int endPos = Position.NOPOS;\n@@ -1132,1 +1124,1 @@\n-        public int endpos = Position.NOPOS;\n+        public int bracePos = Position.NOPOS;\n@@ -1340,2 +1332,0 @@\n-        \/** Position of closing brace, optional. *\/\n-        public int endpos = Position.NOPOS;\n@@ -1441,1 +1431,1 @@\n-        public int endpos = Position.NOPOS;\n+        public int bracePos = Position.NOPOS;\n@@ -3137,2 +3127,0 @@\n-        \/** position of closing brace, optional. *\/\n-        public int endPos = Position.NOPOS;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/JCTree.java","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -55,1 +55,1 @@\n-import java.util.function.ToIntFunction;\n+import java.util.function.ToIntBiFunction;\n@@ -505,2 +505,1 @@\n-    public static int endPos(JCTree tree) {\n-        int endPos;\n+    public static int endPos(EndPosTable endPosTable, JCTree tree) {\n@@ -509,2 +508,3 @@\n-            endPos = ((JCBlock) tree).endpos;\n-            break;\n+            return ((JCBlock)tree).bracePos;\n+        case SWITCH_EXPRESSION:\n+            return ((JCSwitchExpression)tree).bracePos;\n@@ -512,1 +512,1 @@\n-            return endPos(((JCSynchronized) tree).body);\n+            return endPos(endPosTable, ((JCSynchronized)tree).body);\n@@ -515,1 +515,1 @@\n-            return endPos((t.finalizer != null) ? t.finalizer\n+            return endPos(endPosTable, (t.finalizer != null) ? t.finalizer\n@@ -517,21 +517,0 @@\n-        case SWITCH:\n-            endPos = ((JCSwitch) tree).endpos;\n-            break;\n-        case SWITCH_EXPRESSION:\n-            endPos = ((JCSwitchExpression) tree).endpos;\n-            break;\n-        case MODULEDEF:\n-            endPos = ((JCModuleDecl) tree).endPos;\n-            break;\n-        case PACKAGEDEF:\n-            endPos = ((JCPackageDecl) tree).endPos;\n-            break;\n-        case CLASSDEF:\n-            endPos = ((JCClassDecl) tree).endPos;\n-            break;\n-        case METHODDEF:\n-            endPos = ((JCMethodDecl) tree).endPos;\n-            break;\n-        case VARDEF:\n-            endPos = ((JCVariableDecl) tree).endPos;\n-            break;\n@@ -539,1 +518,1 @@\n-            return tree.pos;\n+            break;\n@@ -541,0 +520,1 @@\n+        int endPos = endPosTable.getEndPos(tree);\n@@ -670,5 +650,0 @@\n-        if (endPosTable == null) {\n-            \/\/ fall back on limited info in the tree\n-            return endPos(tree);\n-        }\n-\n@@ -758,2 +733,2 @@\n-    public static DiagnosticPosition diagEndPos(final JCTree tree) {\n-        final int endPos = TreeInfo.endPos(tree);\n+    public static DiagnosticPosition diagEndPos(EndPosTable endPosTable, final JCTree tree) {\n+        final int endPos = TreeInfo.endPos(endPosTable, tree);\n@@ -771,2 +746,2 @@\n-        START_POS(TreeInfo::getStartPos),\n-        FIRST_STAT_POS(TreeInfo::firstStatPos),\n+        START_POS((table, tree) -> TreeInfo.getStartPos(tree)),\n+        FIRST_STAT_POS((table, tree) -> TreeInfo.firstStatPos(tree)),\n@@ -775,1 +750,1 @@\n-        final ToIntFunction<JCTree> posFunc;\n+        final ToIntBiFunction<EndPosTable, JCTree> posFunc;\n@@ -777,1 +752,1 @@\n-        PosKind(ToIntFunction<JCTree> posFunc) {\n+        PosKind(ToIntBiFunction<EndPosTable, JCTree> posFunc) {\n@@ -781,2 +756,2 @@\n-        int toPos(JCTree tree) {\n-            return posFunc.applyAsInt(tree);\n+        int toPos(EndPosTable endPosTable, JCTree tree) {\n+            return posFunc.applyAsInt(endPosTable, tree);\n@@ -788,1 +763,1 @@\n-    public static int finalizerPos(JCTree tree, PosKind posKind) {\n+    public static int finalizerPos(EndPosTable endPosTable, JCTree tree, PosKind posKind) {\n@@ -792,1 +767,1 @@\n-            return posKind.toPos(t.finalizer);\n+            return posKind.toPos(endPosTable, t.finalizer);\n@@ -794,1 +769,1 @@\n-            return endPos(((JCSynchronized) tree).body);\n+            return endPos(endPosTable, ((JCSynchronized)tree).body);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/tree\/TreeInfo.java","additions":20,"deletions":45,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -144,1 +144,0 @@\n-        this.endPosTable.setParser(null); \/\/ remove reference to parser\n","filename":"src\/jdk.jshell\/share\/classes\/jdk\/jshell\/ReplParser.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -154,1 +154,1 @@\n-                lineNumber = env.toplevel.lineMap.getLineNumber(tryTree.finalizer.endpos);\n+                lineNumber = env.toplevel.lineMap.getLineNumber(tryTree.finalizer.bracePos);\n","filename":"test\/langtools\/tools\/javac\/T8180660\/MissingLNTEntryForFinalizerTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -74,1 +74,1 @@\n-                    int actual = TreeInfo.endPos(tree);\n+                    int actual = TreeInfo.endPos(unit.endPositions, tree);\n","filename":"test\/langtools\/tools\/javac\/parser\/DeclarationEndPositions.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -142,1 +142,0 @@\n-        this.endPosTable.setParser(null); \/\/ remove reference to parser\n","filename":"test\/langtools\/tools\/javac\/parser\/extend\/TrialParser.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}