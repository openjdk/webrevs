{"files":[{"patch":"@@ -48,2 +48,4 @@\n-        if (System.in != SharedSecrets.getJavaLangAccess().initialSystemIn() ||\n-                System.console() == null) {\n+        \/\/ If the password is piped into the command, typically\n+        \/\/ System.in.available() will not be zero. We don't show\n+        \/\/ the warning in this case.\n+        if (System.in.available() == 0 && System.console() == null) {\n","filename":"src\/java.base\/share\/classes\/sun\/security\/util\/Password.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -129,0 +129,5 @@\n+ * <p id=\"addButton\">\n+ * If you call {@link Builder#addButton(JButton)}, a new button will be added\n+ * to the left side of the <i>Pass<\/i> button. This allows some customized\n+ * actions to be performed. The method can be called multiple times.\n+ *\n@@ -584,0 +589,1 @@\n+                                           null,\n@@ -602,0 +608,1 @@\n+                                         builder.moreButtons,\n@@ -623,0 +630,1 @@\n+                                                       List<JButton> moreButtons,\n@@ -659,0 +667,6 @@\n+        if (moreButtons != null) {\n+            for (JButton title : moreButtons) {\n+                buttonsPanel.add(title);\n+            }\n+        }\n+\n@@ -1368,0 +1382,1 @@\n+        private List<JButton> moreButtons;\n@@ -1448,0 +1463,12 @@\n+        \/**\n+         * Adds one more button to the left of the \"pass\" button.\n+         *\n+         * @param button the new button\n+         * @return this builder\n+         *\/\n+        public Builder addButton(JButton button) {\n+            if (moreButtons == null) moreButtons = new ArrayList<>();\n+            moreButtons.add(button);\n+            return this;\n+        }\n+\n","filename":"test\/jdk\/java\/awt\/regtesthelpers\/PassFailJFrame.java","additions":27,"deletions":0,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -28,1 +28,2 @@\n- * @library \/test\/lib\n+ * @library \/java\/awt\/regtesthelpers\n+ * @build PassFailJFrame\n@@ -31,1 +32,0 @@\n-import javax.swing.*;\n@@ -33,1 +33,1 @@\n-import jdk.test.lib.UIBuilder;\n+import javax.swing.*;\n@@ -35,0 +35,2 @@\n+import java.awt.*;\n+import java.awt.datatransfer.StringSelection;\n@@ -39,4 +41,1 @@\n-    private static final int TIMEOUT_MS = 240000;\n-    private volatile boolean failed = false;\n-    private volatile boolean aborted = false;\n-    private Thread currentThread = null;\n+    static int counter = 0;\n@@ -47,3 +46,0 @@\n-        boolean testFailed = new EchoPassword().validate(\n-                \"Please copy and run the following commands in a Terminal or Windows Command Prompt window:\",\n-                String.format(\"\"\"\n@@ -51,1 +47,5 @@\n-                1. %s -genkeypair\n+        final String[] titles = {\n+                \"Copy first command\",\n+                \"Copy second command\",\n+                \"Copy third command\"\n+        };\n@@ -53,3 +53,5 @@\n-                   When prompted, enter \"password\" and press Enter. Verify that the input is hidden,\n-                   and no warning about password echoing appears. At the Re-enter password prompt,\n-                   press Ctrl-C to exit.\n+        final String[] commands = {\n+                keytool + \" -genkeypair\",\n+                keytool + \" -genkeypair | type\",\n+                \"(echo changeit & echo changeit ) | \" + keytool + \" -genkeypair\"\n+        };\n@@ -57,1 +59,2 @@\n-                2. %s -genkeypair | type\n+        final String message = \"\"\"\n+                Perform the following steps and record the final result:\n@@ -59,3 +62,1 @@\n-                   When prompted, enter \"password\" and press Enter. Verify that the input is echoed,\n-                   and a warning about password echoing is shown. At the Re-enter password prompt,\n-                   press Ctrl-C to exit.\n+                1. Open a terminal or Windows Command Prompt window.\n@@ -63,6 +64,2 @@\n-                Press \"pass\" if the behavior matches expectations; otherwise, press \"fail\".\n-                \"\"\", keytool, keytool));\n-        if (testFailed) {\n-            throw new RuntimeException(\"Test has failed\");\n-        }\n-    }\n+                2. Press \"Copy First Command\" to copy the first command into the system clipboard.\n+                   Paste it into the terminal window and execute the command.\n@@ -70,19 +67,2 @@\n-    public boolean validate(String instruction, String message) {\n-        failed = false;\n-        currentThread = Thread.currentThread();\n-        final JDialog dialog = new UIBuilder.DialogBuilder()\n-                .setTitle(\"Password\")\n-                .setInstruction(instruction)\n-                .setMessage(message)\n-                .setPassAction(e -> pass())\n-                .setFailAction(e -> fail())\n-                .setCloseAction(this::abort)\n-                .build();\n-\n-        SwingUtilities.invokeLater(() -> {\n-            try {\n-                dialog.setVisible(true);\n-            } catch (Exception e) {\n-                throw new RuntimeException(e);\n-            }\n-        });\n+                   When prompted, enter some characters and press Enter. Verify that the input is\n+                   hidden, and no warning about password echoing appears. Press Ctrl-C to exit.\n@@ -90,22 +70,2 @@\n-        try {\n-            Thread.sleep(TIMEOUT_MS);\n-            \/\/Timed out, so fail the test\n-            throw new RuntimeException(\n-                    \"Timed out after \" + TIMEOUT_MS \/ 1000 + \" seconds\");\n-        } catch (final InterruptedException e) {\n-            if (aborted) {\n-                throw new RuntimeException(\"TEST ABORTED\");\n-            }\n-\n-            if (failed) {\n-                System.out.println(\"TEST FAILED\");\n-                System.out.println(message);\n-            } else {\n-                System.out.println(\"TEST PASSED\");\n-            }\n-        } finally {\n-            dialog.dispose();\n-        }\n-\n-        return failed;\n-    }\n+                3. Press \"Copy Second Command\" to copy the second command into the system clipboard.\n+                   Paste it into the terminal window and execute the command.\n@@ -113,4 +73,2 @@\n-    public void pass() {\n-        failed = false;\n-        currentThread.interrupt();\n-    }\n+                   When prompted, enter some characters and press Enter. Verify that the input is\n+                   echoed, and a warning about password echoing is shown. Press Ctrl-C to exit.\n@@ -118,4 +76,16 @@\n-    public void fail() {\n-        failed = true;\n-        currentThread.interrupt();\n-    }\n+                4. Press \"Copy Third Command\" to copy the third command into the system clipboard.\n+                   Paste it into the terminal window and execute the command.\n+\n+                   Verify that the password \"changeit\" is not shown in the command output, and\n+                   no warning about password echoing appears. It's OK to see an exception.\n+\n+                Press \"pass\" if the behavior matches expectations; otherwise, press \"fail\".\n+                \"\"\";\n+\n+        var copyButton = new JButton(\"Copy First Command\");\n+        copyButton.addActionListener(_ -> {\n+            Toolkit.getDefaultToolkit().getSystemClipboard().setContents(\n+                    new StringSelection(commands[counter]), null);\n+            counter = (counter + 1) % titles.length;\n+            copyButton.setText(titles[counter]);\n+        });\n@@ -123,3 +93,6 @@\n-    public void abort() {\n-        aborted = true;\n-        currentThread.interrupt();\n+        PassFailJFrame.builder()\n+                .instructions(message)\n+                .columns(60)\n+                .addButton(copyButton)\n+                .build()\n+                .awaitAndCheck();\n","filename":"test\/jdk\/sun\/security\/tools\/keytool\/EchoPassword.java","additions":49,"deletions":76,"binary":false,"changes":125,"status":"modified"}]}