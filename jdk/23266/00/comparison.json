{"files":[{"patch":"@@ -181,0 +181,1 @@\n+- `-DPrintRuleMatchingTime=true`: Print the time of matching IR rules per method. Slows down the execution as the rules are warmed up before meassurement.\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/README.md","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -151,0 +151,1 @@\n+    public static final boolean PRINT_RULE_MATCHING_TIME = Boolean.getBoolean(\"PrintRuleMatchingTime\");\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/TestFramework.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -42,0 +42,2 @@\n+import static compiler.lib.ir_framework.TestFramework.PRINT_RULE_MATCHING_TIME;\n+\n@@ -86,1 +88,15 @@\n-        return new IRMethodMatchResult(method, matcher.match());\n+        if (!PRINT_RULE_MATCHING_TIME) {\n+            return new IRMethodMatchResult(method, matcher.match());\n+        }\n+\n+        List<MatchResult> match;\n+        for (int i = 0; i < 10; i++) {  \/\/ warm up\n+            match = matcher.match();\n+        }\n+\n+        long startTime = System.nanoTime();\n+        match = matcher.match();\n+        long endTime = System.nanoTime();\n+        long duration = (endTime - startTime);\n+        System.out.println(\"Verifying IR rules for \" + name() + \": \" + duration + \" ns = \" + (duration \/ 1000000) + \" ms\");\n+        return new IRMethodMatchResult(method, match);\n","filename":"test\/hotspot\/jtreg\/compiler\/lib\/ir_framework\/driver\/irmatching\/irmethod\/IRMethod.java","additions":18,"deletions":2,"binary":false,"changes":20,"status":"modified"}]}