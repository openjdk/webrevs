{"files":[{"patch":"@@ -1368,0 +1368,1 @@\n+  int modifiers = klass()->modifier_flags();\n@@ -1375,0 +1376,1 @@\n+    args.push_int(modifiers);\n@@ -1391,1 +1393,1 @@\n-                                                        pointer));\n+                                                        pointer, modifiers));\n","filename":"src\/hotspot\/share\/jvmci\/jvmciEnv.cpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  template(klass_fromMetaspace_signature,                         \"(J)Ljdk\/vm\/ci\/hotspot\/HotSpotResolvedObjectTypeImpl;\")                 \\\n+  template(klass_fromMetaspace_signature,                         \"(JI)Ljdk\/vm\/ci\/hotspot\/HotSpotResolvedObjectTypeImpl;\")                \\\n","filename":"src\/hotspot\/share\/jvmci\/vmSymbols_jvmci.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -690,1 +690,1 @@\n-    synchronized HotSpotResolvedObjectTypeImpl fromMetaspace(Long klassPointer) {\n+    synchronized HotSpotResolvedObjectTypeImpl fromMetaspace(Long klassPointer, int modifiers) {\n@@ -703,1 +703,5 @@\n-            javaType = new HotSpotResolvedObjectTypeImpl(klassPointer, name);\n+            char charModifiers = (char) modifiers;\n+            if (charModifiers != modifiers) {\n+                throw new IllegalArgumentException(String.format(\"%x != %x\", modifiers, charModifiers));\n+            }\n+            javaType = new HotSpotResolvedObjectTypeImpl(klassPointer, name, charModifiers);\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -95,0 +95,7 @@\n+    \/**\n+     * The JVM defined modifiers. This is different from {@code Klass::_access_flags}\n+     * in the case of inner classes where the modifiers are provided by an\n+     * InnerClasses attribute.\n+     *\/\n+    private final char modifiers;\n+\n@@ -110,0 +117,1 @@\n+     * @param modifiers the {@linkplain Class#getModifiers() class modifiers}\n@@ -114,2 +122,2 @@\n-    private static HotSpotResolvedObjectTypeImpl fromMetaspace(long klassPointer) {\n-        return runtime().fromMetaspace(klassPointer);\n+    private static HotSpotResolvedObjectTypeImpl fromMetaspace(long klassPointer, int modifiers) {\n+        return runtime().fromMetaspace(klassPointer, modifiers);\n@@ -126,0 +134,1 @@\n+     * @param modifiers the {@linkplain Class#getModifiers() class modifiers}\n@@ -128,1 +137,1 @@\n-    HotSpotResolvedObjectTypeImpl(long klass, String name) {\n+    HotSpotResolvedObjectTypeImpl(long klass, String name, char modifiers) {\n@@ -132,0 +141,1 @@\n+        this.modifiers = modifiers;\n@@ -160,10 +170,1 @@\n-        if (isArray()) {\n-            return (getElementalType().getModifiers() & (Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED)) | Modifier.FINAL | Modifier.ABSTRACT;\n-        } else {\n-            return getAccessFlags() & jvmClassModifiers();\n-        }\n-    }\n-\n-    public int getAccessFlags() {\n-        HotSpotVMConfig config = config();\n-        return UNSAFE.getInt(getKlassPointer() + config.klassAccessFlagsOffset);\n+        return modifiers;\n@@ -464,1 +465,1 @@\n-        return (getAccessFlags() & config().jvmAccInterface) != 0;\n+        return (modifiers & config().jvmAccInterface) != 0;\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotResolvedObjectTypeImpl.java","additions":15,"deletions":14,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -25,0 +25,1 @@\n+import java.lang.reflect.Member;\n@@ -38,1 +39,4 @@\n-     * Returns the modifiers for this element.\n+     * Returns the Java language modifiers for this element.\n+     *\n+     * @see Class#getModifiers\n+     * @see Member#getModifiers\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/meta\/ModifiersProvider.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -228,13 +228,2 @@\n-            int mask = Modifier.classModifiers() & ~Modifier.STATIC;\n-            int expected = c.getModifiers() & mask;\n-            int actual = type.getModifiers() & mask;\n-            Class<?> elementalType = c;\n-            while (elementalType.isArray()) {\n-                elementalType = elementalType.getComponentType();\n-            }\n-            if (elementalType.isMemberClass()) {\n-                \/\/ member class get their modifiers from the inner-class attribute in the JVM and\n-                \/\/ from the classfile header in jvmci\n-                expected &= ~(Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED);\n-                actual &= ~(Modifier.PUBLIC | Modifier.PRIVATE | Modifier.PROTECTED);\n-            }\n+            int expected = c.getModifiers();\n+            int actual = type.getModifiers();\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TestResolvedJavaType.java","additions":2,"deletions":13,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -42,0 +42,1 @@\n+import java.util.LinkedHashSet;\n@@ -72,1 +73,1 @@\n-    public static final Collection<Class<?>> classes = new HashSet<>();\n+    public static final Collection<Class<?>> classes = new LinkedHashSet<>();\n@@ -75,1 +76,1 @@\n-    public static final Map<Class<?>, Class<?>> arrayClasses = new HashMap<>();\n+    public static final Map<Class<?>, Class<?>> arrayClasses = new LinkedHashMap<>();\n@@ -95,0 +96,3 @@\n+    private static class PrivateStaticInnerClass {\n+\n+    }\n@@ -99,0 +103,12 @@\n+    protected static class ProtectedStaticInnerClass {\n+\n+    }\n+\n+    protected interface ProtectedInnerInterface {\n+\n+    }\n+\n+    protected static interface ProtectedStaticInnerInterface {\n+\n+    }\n+\n@@ -119,1 +135,1 @@\n-                        InnerStaticFinalClass.class, PrivateInnerClass.class, ProtectedInnerClass.class, ScopedMemoryAccess.class};\n+                        ScopedMemoryAccess.class, TypeUniverse.class};\n","filename":"test\/hotspot\/jtreg\/compiler\/jvmci\/jdk.vm.ci.runtime.test\/src\/jdk\/vm\/ci\/runtime\/test\/TypeUniverse.java","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"}]}