{"files":[{"patch":"@@ -111,0 +111,4 @@\n+    char jvm_path[JVM_MAXPATHLEN];\n+    os::jvm_path(jvm_path, sizeof(jvm_path));\n+    char *end = strrchr(jvm_path, *os::file_separator());\n+    if (end != nullptr) *end = '\\0';\n@@ -112,3 +116,1 @@\n-    const char* subdir = WINDOWS_ONLY(\"bin\") NOT_WINDOWS(\"lib\");\n-    tmp.print(\"%s%s%s%s%s%sclasses\", Arguments::get_java_home(), os::file_separator(), subdir,\n-              os::file_separator(), Abstract_VM_Version::vm_variant(), os::file_separator());\n+    tmp.print(\"%s%sclasses\", jvm_path, os::file_separator());\n","filename":"src\/hotspot\/share\/cds\/cdsConfig.cpp","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -0,0 +1,89 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+\/*\n+ * @test\n+ * @summary Test that CDS archive can be loaded if the archive is in a non-JVM variant directory.\n+ * @bug 8353504\n+ * @requires vm.cds\n+ * @requires vm.flagless\n+ * @requires vm.flavor == \"server\"\n+ * @comment This test doesn't work on Windows because it depends on symlinks\n+ * @requires os.family != \"windows\"\n+ * @library \/test\/lib appcds\n+ * @run driver NonJVMVariantLocation\n+ *\/\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.List;\n+import jdk.test.lib.cds.CDSTestUtils;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n+public class NonJVMVariantLocation {\n+    public static void main(String[] args) throws Exception {\n+        String java_home_src = System.getProperty(\"java.home\");\n+        String java_home_dst = CDSTestUtils.getOutputDir() + File.separator + \"moved_jdk\";\n+        String homeJava = java_home_src + File.separator + \"bin\" + File.separator + \"java\";\n+        String dstJava  = java_home_dst + File.separator + \"bin\" + File.separator + \"java\";\n+\n+        CDSTestUtils.clone(new File(java_home_src), new File(java_home_dst));\n+        System.out.println(\"============== Cloned JDK at \" + java_home_dst);\n+\n+        \/\/ Replace \"server\" with \"release\" in jvm.cfg.\n+        \/\/ The jvm.cfg is parsed by the java launcher in java.c.\n+        String locDir = java_home_dst + File.separator + \"lib\";\n+        String jvmCfg = locDir + File.separator + \"jvm.cfg\";\n+        String serverDir = \"server\";\n+        String releaseDir = \"release\";\n+        replaceTextInFile(jvmCfg, serverDir, releaseDir);\n+\n+        \/\/ Rename \"server\" dir to \"release\" dir.\n+        CDSTestUtils.rename(new File(locDir + File.separator + serverDir),\n+                            new File(locDir + File.separator + releaseDir));\n+\n+        \/\/ Test runtime with cloned JDK\n+        {\n+            ProcessBuilder pb = CDSTestUtils.makeBuilder(dstJava,\n+                                                         \"-Xshare:on\",\n+                                                         \"-Xlog:cds\",\n+                                                         \"-version\");\n+            OutputAnalyzer out = TestCommon.executeAndLog(pb, \"exec-dst\");\n+            out.shouldHaveExitValue(0)\n+               .shouldMatch(\".info..cds. Opened shared archive file.*classes.*\\\\.jsa\");\n+        }\n+    }\n+\n+    private static void replaceTextInFile(String filePath, String oldText, String newText) {\n+        try {\n+            List<String> lines = Files.readAllLines(Paths.get(filePath));\n+            lines.replaceAll(line -> line.replace(oldText, newText));\n+            Files.write(Paths.get(filePath), lines);\n+        } catch (IOException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/runtime\/cds\/NonJVMVariantLocation.java","additions":89,"deletions":0,"binary":false,"changes":89,"status":"added"},{"patch":"@@ -781,2 +781,4 @@\n-    \/\/ Set a list of {jvm, \"java\"} which will be physically copied. If a file needs copied physically, add it to the list.\n-    private static String[] phCopied = {System.mapLibraryName(\"jvm\"), \"java\"};\n+    \/\/ The jvm.cfg file must be copied because the cds\/NonJVMVariantLocation.java\n+    \/\/ test is testing a CDS archive can be loaded from a non-JVM variant directory.\n+    \/\/ Set a list of {jvm, \"java\", \"jvm.cfg\"} which will be physically copied. If a file needs copied physically, add it to the list.\n+    private static String[] phCopied = {System.mapLibraryName(\"jvm\"), \"java\", \"jvm.cfg\"};\n","filename":"test\/lib\/jdk\/test\/lib\/cds\/CDSTestUtils.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}