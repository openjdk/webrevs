{"files":[{"patch":"@@ -410,0 +410,15 @@\n+ * <h2 id=\"string-conversion\">String conversion<\/h2>\n+ * All methods involving conversion to or from Strings (such as\n+ * {@linkplain #setString(long, String, Charset)} and\n+ * {@linkplain #getString(long, Charset)}) are restricted to the\n+ * {@linkplain StandardCharsets standard charsets}, all of which encodes bytes that are\n+ * {@code N}-aligned (including the string terminator). Hence, every character in the\n+ * segment (including the terminator) will be at an {@code N}-aligned offset counted from\n+ * the beginning where conversion is about to begin. For example:\n+ * <ul>\n+ *     <li>{@code N}=1 for {@link StandardCharsets#UTF_8} (e.g., A BBB C DD 0)<\/li>\n+ *     <li>{@code N}=2 for {@link StandardCharsets#UTF_16} (e.g., AA BBBB CC DDDD 00)<\/li>\n+ *     <li>{@code N}=4 for {@link StandardCharsets#UTF_32} (e.g., AAAA BBBB CCCC DDDD 0000)<\/li>\n+ * <\/ul>\n+ * Note: UTF_8 and UFT_16 are using a variable-length encoder whereas UTF_32 is using\n+ *       a constant-length encoder.\n@@ -1310,1 +1325,2 @@\n-     *                {@linkplain StandardCharsets standard charset}\n+     *                {@linkplain StandardCharsets standard charset} as described\n+     *                in the {@link ##string-conversion String conversion} section\n@@ -1377,1 +1393,2 @@\n-     *                {@linkplain StandardCharsets standard charset}\n+     *                {@linkplain StandardCharsets standard charset} as described\n+     *                in the {@link ##string-conversion String conversion} section\n","filename":"src\/java.base\/share\/classes\/java\/lang\/foreign\/MemorySegment.java","additions":19,"deletions":2,"binary":false,"changes":21,"status":"modified"}]}