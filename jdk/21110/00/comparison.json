{"files":[{"patch":"@@ -1171,2 +1171,2 @@\n-    __ ldrb(rscratch1, Address(op->klass()->as_register(),\n-                               InstanceKlass::init_state_offset()));\n+    __ lea(rscratch1, Address(op->klass()->as_register(), InstanceKlass::init_state_offset()));\n+    __ ldarb(rscratch1, rscratch1);\n","filename":"src\/hotspot\/cpu\/aarch64\/c1_LIRAssembler_aarch64.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1841,1 +1841,2 @@\n-  ldrb(scratch, Address(klass, InstanceKlass::init_state_offset()));\n+  lea(scratch, Address(klass, InstanceKlass::init_state_offset()));\n+  ldarb(scratch, scratch);\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -951,0 +951,1 @@\n+    __ membar(MacroAssembler::Membar_mask_bits(MacroAssembler::LoadLoad | MacroAssembler::LoadStore), Rtemp);\n","filename":"src\/hotspot\/cpu\/arm\/c1_LIRAssembler_arm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3977,0 +3977,1 @@\n+  __ membar(MacroAssembler::Membar_mask_bits(MacroAssembler::LoadLoad | MacroAssembler::LoadStore), Rtemp);\n","filename":"src\/hotspot\/cpu\/arm\/templateTable_arm.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2277,0 +2277,1 @@\n+    __ lwsync(); \/\/ acquire\n","filename":"src\/hotspot\/cpu\/ppc\/c1_LIRAssembler_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2422,0 +2422,1 @@\n+  lwsync(); \/\/ acquire\n","filename":"src\/hotspot\/cpu\/ppc\/macroAssembler_ppc.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -983,0 +983,1 @@\n+    __ membar(MacroAssembler::LoadLoad | MacroAssembler::LoadStore);\n","filename":"src\/hotspot\/cpu\/riscv\/c1_LIRAssembler_riscv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -496,0 +496,1 @@\n+  membar(MacroAssembler::LoadLoad | MacroAssembler::LoadStore);\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2353,0 +2353,1 @@\n+    \/\/ init_state needs acquire, but S390 is TSO, and so we are already good.\n","filename":"src\/hotspot\/cpu\/s390\/c1_LIRAssembler_s390.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -3461,1 +3461,2 @@\n-  \/\/ Fast path check: class is fully initialized\n+  \/\/ Fast path check: class is fully initialized.\n+  \/\/ init_state needs acquire, but S390 is TSO, and so we are already good.\n","filename":"src\/hotspot\/cpu\/s390\/macroAssembler_s390.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -1581,0 +1581,1 @@\n+    \/\/ init_state needs acquire, but x86 is TSO, and so we are already good.\n","filename":"src\/hotspot\/cpu\/x86\/c1_LIRAssembler_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -5087,1 +5087,2 @@\n-  \/\/ Fast path check: class is fully initialized\n+  \/\/ Fast path check: class is fully initialized.\n+  \/\/ init_state needs acquire, but x86 is TSO, and so we are already good.\n","filename":"src\/hotspot\/cpu\/x86\/macroAssembler_x86.cpp","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -4051,0 +4051,1 @@\n+  \/\/ init_state needs acquire, but x86 is TSO, and so we are already good.\n","filename":"src\/hotspot\/cpu\/x86\/templateTable_x86.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -4099,1 +4099,1 @@\n-  _init_state = state;\n+  Atomic::release_store_fence(&_init_state, state);\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -510,6 +510,6 @@\n-  bool is_loaded() const                   { return _init_state >= loaded; }\n-  bool is_linked() const                   { return _init_state >= linked; }\n-  bool is_initialized() const              { return _init_state == fully_initialized; }\n-  bool is_not_initialized() const          { return _init_state <  being_initialized; }\n-  bool is_being_initialized() const        { return _init_state == being_initialized; }\n-  bool is_in_error_state() const           { return _init_state == initialization_error; }\n+  bool is_loaded() const                   { return init_state() >= loaded; }\n+  bool is_linked() const                   { return init_state() >= linked; }\n+  bool is_initialized() const              { return init_state() == fully_initialized; }\n+  bool is_not_initialized() const          { return init_state() <  being_initialized; }\n+  bool is_being_initialized() const        { return init_state() == being_initialized; }\n+  bool is_in_error_state() const           { return init_state() == initialization_error; }\n@@ -517,1 +517,1 @@\n-  ClassState  init_state() const           { return _init_state; }\n+  ClassState  init_state() const           { return Atomic::load_acquire(&_init_state); }\n","filename":"src\/hotspot\/share\/oops\/instanceKlass.hpp","additions":7,"deletions":7,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -3011,1 +3011,1 @@\n-                                    T_BYTE, MemNode::unordered);\n+                                    T_BYTE, MemNode::acquire);\n","filename":"src\/hotspot\/share\/opto\/graphKit.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2898,1 +2898,1 @@\n-    Node* inst = make_load(nullptr, insp, TypeInt::UBYTE, T_BOOLEAN, MemNode::unordered);\n+    Node* inst = make_load(nullptr, insp, TypeInt::UBYTE, T_BOOLEAN, MemNode::acquire);\n","filename":"src\/hotspot\/share\/opto\/library_call.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}