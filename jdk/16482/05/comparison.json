{"files":[{"patch":"@@ -2279,0 +2279,15 @@\n+        public Type implicitReceiverType() {\n+            ClassSymbol enclosingClass = enclClass();\n+            if (enclosingClass == null) {\n+                return null;\n+            }\n+            Type enclosingType = enclosingClass.type;\n+            if (isConstructor()) {\n+                return enclosingType.getEnclosingType();\n+            }\n+            if (!isStatic()) {\n+                return enclosingType;\n+            }\n+            return null;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":15,"deletions":0,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2336,2 +2336,5 @@\n-            if (mt.recvtype != null) {\n-                mt.recvtype = addTypeAnnotations(mt.recvtype, TargetType.METHOD_RECEIVER);\n+\n+            Type recvtype = mt.recvtype != null ? mt.recvtype : s.implicitReceiverType();\n+            Type annotated = addTypeAnnotations(recvtype, TargetType.METHOD_RECEIVER);\n+            if (annotated != recvtype) {\n+                mt.recvtype = annotated;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -31,0 +31,1 @@\n+ * @compile\/process -processor TestExecutableReceiverType -proc:only MethodHost\n@@ -48,2 +49,8 @@\n-            count += testType(elements.getTypeElement(\"MethodHost\"));\n-            count += testType(elements.getTypeElement(\"MethodHost.Nested\"));\n+            for (ExecutableElement e : ElementFilter.methodsIn(\n+                  roundEnv.getElementsAnnotatedWith(ReceiverTypeKind.class))) {\n+                count += testExecutable(e);\n+            }\n+            for (ExecutableElement e : ElementFilter.constructorsIn(\n+                  roundEnv.getElementsAnnotatedWith(ReceiverTypeKind.class))) {\n+                count += testExecutable(e);\n+            }\n@@ -58,14 +65,0 @@\n-    int testType(TypeElement typeElement) {\n-        int count = 0;\n-        for (ExecutableElement executable :\n-                 ElementFilter.constructorsIn(typeElement.getEnclosedElements())) {\n-            count += testExecutable(executable);\n-        }\n-\n-        for (ExecutableElement executable :\n-                 ElementFilter.methodsIn(typeElement.getEnclosedElements())) {\n-            count += testExecutable(executable);\n-        }\n-        return count;\n-    }\n-\n@@ -73,2 +66,5 @@\n-        TypeKind expectedKind = executable.getAnnotation(ReceiverTypeKind.class).value();\n-        TypeKind actualKind = executable.getReceiverType().getKind();\n+        ReceiverTypeKind expected = executable.getAnnotation(ReceiverTypeKind.class);\n+        TypeKind expectedKind = expected.value();\n+        String expectedType = expected.type();\n+        TypeMirror actualType = executable.getReceiverType();\n+        TypeKind actualKind = actualType.getKind();\n@@ -79,1 +75,6 @@\n-                                              executable, expectedKind, actualKind));\n+                                              executable, expectedKind, actualKind), executable);\n+        }\n+        if (!expectedType.isEmpty() && !actualType.toString().equals(expectedType)) {\n+            messager.printError(String.format(\"Unexpected receiver type of %s:\" +\n+                                              \" expected %s\\t got %s%n\",\n+                                              executable, expectedType, actualType), executable);\n@@ -83,1 +84,1 @@\n-        TypeKind kindFromType = new TypeKindVisitor<TypeKind, Object>(null) {\n+        TypeMirror fromType = new TypeKindVisitor<TypeMirror, Object>(null) {\n@@ -85,2 +86,2 @@\n-            public TypeKind visitExecutable(ExecutableType t, Object p) {\n-                return t.getReceiverType().getKind();\n+            public TypeMirror visitExecutable(ExecutableType t, Object p) {\n+                return t.getReceiverType();\n@@ -89,0 +90,1 @@\n+        TypeKind kindFromType = fromType.getKind();\n@@ -93,1 +95,6 @@\n-                                              executable, expectedKind, kindFromType));\n+                                              executable, expectedKind, kindFromType), executable);\n+        }\n+        if (!expectedType.isEmpty() && !fromType.toString().equals(expectedType)) {\n+            messager.printError(String.format(\"Unexpected receiver type of %s:\" +\n+                                              \" expected %s\\t got %s%n\",\n+                                              executable, expectedType, fromType), executable);\n@@ -102,0 +109,1 @@\n+    String type() default \"\";\n@@ -104,0 +112,3 @@\n+@Target(ElementType.TYPE_USE)\n+@interface TA {}\n+\n@@ -117,2 +128,2 @@\n-    @ReceiverTypeKind(TypeKind.DECLARED)\n-    public void quux(MethodHost this) {return;}\n+    @ReceiverTypeKind(value = TypeKind.DECLARED, type = \"@TA MethodHost\")\n+    public void quux(@TA MethodHost this) {return;}\n@@ -121,2 +132,20 @@\n-        @ReceiverTypeKind(TypeKind.DECLARED)\n-        public Nested(MethodHost MethodHost.this) {}\n+        @ReceiverTypeKind(value = TypeKind.DECLARED, type = \"@TA MethodHost\")\n+        public Nested(@TA MethodHost MethodHost.this) {}\n+\n+        @ReceiverTypeKind(TypeKind.NONE)\n+        public Nested(int foo) {}\n+    }\n+\n+    private static class StaticNested {\n+        @ReceiverTypeKind(TypeKind.NONE)\n+        public StaticNested() {}\n+    }\n+\n+    private static class Generic<X> {\n+      private class GenericNested<Y> {\n+        @ReceiverTypeKind(value = TypeKind.DECLARED, type = \"MethodHost.@TA Generic<X>\")\n+        GenericNested(@TA Generic<X> Generic.this) {}\n+\n+        @ReceiverTypeKind(TypeKind.NONE)\n+        GenericNested(int x) {}\n+      }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestExecutableReceiverType.java","additions":56,"deletions":27,"binary":false,"changes":83,"status":"modified"},{"patch":"@@ -576,0 +576,16 @@\n+\n+    \/\/ receiver parameters\n+    class Inner110 {\n+        @Test(posn=2, annoType = TA.class, expect = \"110\")\n+        void f(@TA(110) Inner110 this) {}\n+\n+        @Test(posn=2, annoType = TA.class, expect = \"111\")\n+        Inner110(@TA(111) BasicAnnoTests BasicAnnoTests.this) {}\n+    }\n+\n+    static class GenericInner120<X> {\n+        private class GenericNested<Y> {\n+            @Test(posn=2, annoType = TA.class, expect = \"120\")\n+            GenericNested(@TA(120) GenericInner120<X> GenericInner120.this) {}\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/type\/BasicAnnoTests.java","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}