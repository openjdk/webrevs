{"files":[{"patch":"@@ -2279,0 +2279,11 @@\n+        public Type implicitReceiverType() {\n+            Type enclosingType = enclClass().type;\n+            if (isConstructor()) {\n+                return enclosingType.getEnclosingType();\n+            }\n+            if (!isStatic()) {\n+                return enclosingType;\n+            }\n+            return Type.noType;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Symbol.java","additions":11,"deletions":0,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -131,1 +131,1 @@\n-            recvtype = null;\n+            recvtype = msym.implicitReceiverType();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/MemberEnter.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2342,0 +2342,1 @@\n+        m.type.asMethodType().recvtype = m.implicitReceiverType();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/jvm\/ClassReader.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8222369 8225488\n+ * @bug 8222369 8225488 8319196\n@@ -31,0 +31,1 @@\n+ * @compile\/process -processor TestExecutableReceiverType -proc:only MethodHost\n@@ -48,2 +49,8 @@\n-            count += testType(elements.getTypeElement(\"MethodHost\"));\n-            count += testType(elements.getTypeElement(\"MethodHost.Nested\"));\n+            for (ExecutableElement e : ElementFilter.methodsIn(\n+                  roundEnv.getElementsAnnotatedWith(ReceiverTypeKind.class))) {\n+              count += testExecutable(e);\n+            }\n+            for (ExecutableElement e : ElementFilter.constructorsIn(\n+                  roundEnv.getElementsAnnotatedWith(ReceiverTypeKind.class))) {\n+              count += testExecutable(e);\n+            }\n@@ -58,14 +65,0 @@\n-    int testType(TypeElement typeElement) {\n-        int count = 0;\n-        for (ExecutableElement executable :\n-                 ElementFilter.constructorsIn(typeElement.getEnclosedElements())) {\n-            count += testExecutable(executable);\n-        }\n-\n-        for (ExecutableElement executable :\n-                 ElementFilter.methodsIn(typeElement.getEnclosedElements())) {\n-            count += testExecutable(executable);\n-        }\n-        return count;\n-    }\n-\n@@ -73,2 +66,5 @@\n-        TypeKind expectedKind = executable.getAnnotation(ReceiverTypeKind.class).value();\n-        TypeKind actualKind = executable.getReceiverType().getKind();\n+        ReceiverTypeKind expected = executable.getAnnotation(ReceiverTypeKind.class);\n+        TypeKind expectedKind = expected.value();\n+        String expectedType = expected.type();\n+        TypeMirror actualType = executable.getReceiverType();\n+        TypeKind actualKind = actualType.getKind();\n@@ -79,1 +75,6 @@\n-                                              executable, expectedKind, actualKind));\n+                                              executable, expectedKind, actualKind), executable);\n+        }\n+        if (!expectedType.isEmpty() && !actualType.toString().equals(expectedType)) {\n+            messager.printError(String.format(\"Unexpected receiver type of %s:\" +\n+                                              \" expected %s\\t got %s%n\",\n+                                              executable, expectedType, actualType), executable);\n@@ -83,1 +84,1 @@\n-        TypeKind kindFromType = new TypeKindVisitor<TypeKind, Object>(null) {\n+        TypeMirror fromType = new TypeKindVisitor<TypeMirror, Object>(null) {\n@@ -85,2 +86,2 @@\n-            public TypeKind visitExecutable(ExecutableType t, Object p) {\n-                return t.getReceiverType().getKind();\n+            public TypeMirror visitExecutable(ExecutableType t, Object p) {\n+                return t.getReceiverType();\n@@ -89,0 +90,1 @@\n+        TypeKind kindFromType = fromType.getKind();\n@@ -93,1 +95,6 @@\n-                                              executable, expectedKind, kindFromType));\n+                                              executable, expectedKind, kindFromType), executable);\n+        }\n+        if (!expectedType.isEmpty() && !fromType.toString().equals(expectedType)) {\n+            messager.printError(String.format(\"Unexpected receiver type of %s:\" +\n+                                              \" expected %s\\t got %s%n\",\n+                                              executable, expectedType, fromType), executable);\n@@ -102,0 +109,1 @@\n+    String type() default \"\";\n@@ -114,1 +122,1 @@\n-    @ReceiverTypeKind(TypeKind.NONE)\n+    @ReceiverTypeKind(value = TypeKind.DECLARED, type = \"MethodHost\")\n@@ -117,1 +125,1 @@\n-    @ReceiverTypeKind(TypeKind.DECLARED)\n+    @ReceiverTypeKind(value = TypeKind.DECLARED, type = \"MethodHost\")\n@@ -121,1 +129,1 @@\n-        @ReceiverTypeKind(TypeKind.DECLARED)\n+        @ReceiverTypeKind(value = TypeKind.DECLARED, type = \"MethodHost\")\n@@ -123,0 +131,18 @@\n+\n+        @ReceiverTypeKind(value = TypeKind.DECLARED, type = \"MethodHost\")\n+        public Nested(int foo) {}\n+    }\n+\n+    private static class StaticNested {\n+        @ReceiverTypeKind(TypeKind.NONE)\n+        public StaticNested() {}\n+    }\n+\n+    private static class Generic<X> {\n+      private class GenericNested<Y> {\n+        @ReceiverTypeKind(value = TypeKind.DECLARED, type = \"MethodHost.Generic<X>\")\n+        GenericNested(Generic<X> Generic.this) {}\n+\n+        @ReceiverTypeKind(value = TypeKind.DECLARED, type = \"MethodHost.Generic<X>\")\n+        GenericNested(int x) {}\n+      }\n","filename":"test\/langtools\/tools\/javac\/processing\/model\/element\/TestExecutableReceiverType.java","additions":53,"deletions":27,"binary":false,"changes":80,"status":"modified"}]}