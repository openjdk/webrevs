{"files":[{"patch":"@@ -499,10 +499,0 @@\n-     * @implNote {@code HashMap}'s resize policy is intentionally conservative to\n-     *           avoid an unnecessarily large capacity if {@code m} contains many\n-     *           duplicate keys. This can lead to a potentially expensive, extra\n-     *           resize operation. To avoid such an additional resize operation,\n-     *           callers of {@link putAll} can use the\n-     *           {@link #HashMap(int) HashMap(int initialCapacity)} constructor or\n-     *           {@link #newHashMap(int) newHashMap} to create a map with a large\n-     *           enough capacity before calling {@link putAll} to ensure that the\n-     *           map is only resized and copied once.\n-     *\n@@ -798,0 +788,10 @@\n+     * @implNote {@code HashMap}'s resize policy is intentionally conservative to\n+     *           avoid an unnecessarily large capacity if {@code m} contains many\n+     *           duplicate keys. This can lead to a potentially expensive, extra\n+     *           resize operation. To avoid such an additional resize operation,\n+     *           callers of {@link putAll} can use the\n+     *           {@link #HashMap(int) HashMap(int initialCapacity)} constructor or\n+     *           {@link #newHashMap(int) newHashMap} to create a map with a large\n+     *           enough capacity before calling {@link putAll} to ensure that the\n+     *           map is only resized and copied once.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/util\/HashMap.java","additions":10,"deletions":10,"binary":false,"changes":20,"status":"modified"}]}