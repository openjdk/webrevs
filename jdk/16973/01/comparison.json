{"files":[{"patch":"@@ -45,0 +45,1 @@\n+\/\/ The expected size in bytes of a cache line.\n@@ -47,0 +48,3 @@\n+\/\/ The default padding size for data structures to avoid false sharing.\n+#define DEFAULT_PADDING_SIZE DEFAULT_CACHE_LINE_SIZE\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/globalDefinitions_aarch64.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -52,0 +52,1 @@\n+\/\/ The expected size in bytes of a cache line.\n@@ -54,0 +55,3 @@\n+\/\/ The default padding size for data structures to avoid false sharing.\n+#define DEFAULT_PADDING_SIZE DEFAULT_CACHE_LINE_SIZE\n+\n","filename":"src\/hotspot\/cpu\/arm\/globalDefinitions_arm.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,1 +51,1 @@\n-\/\/ The expected size in bytes of a cache line, used to pad data structures.\n+\/\/ The expected size in bytes of a cache line.\n@@ -54,0 +54,3 @@\n+\/\/ The default padding size for data structures to avoid false sharing.\n+#define DEFAULT_PADDING_SIZE DEFAULT_CACHE_LINE_SIZE\n+\n","filename":"src\/hotspot\/cpu\/ppc\/globalDefinitions_ppc.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -53,0 +53,1 @@\n+\/\/ The expected size in bytes of a cache line.\n@@ -55,0 +56,3 @@\n+\/\/ The default padding size for data structures to avoid false sharing.\n+#define DEFAULT_PADDING_SIZE DEFAULT_CACHE_LINE_SIZE\n+\n","filename":"src\/hotspot\/cpu\/riscv\/globalDefinitions_riscv.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -51,0 +51,3 @@\n+\/\/ The default padding size for data structures to avoid false sharing.\n+#define DEFAULT_PADDING_SIZE DEFAULT_CACHE_LINE_SIZE\n+\n","filename":"src\/hotspot\/cpu\/s390\/globalDefinitions_s390.hpp","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -41,23 +41,12 @@\n-\/\/ The expected size in bytes of a cache line, used to pad data structures.\n-#if COMPILER1_AND_COMPILER2\n-  #ifdef _LP64\n-    \/\/ tiered, 64-bit, large machine\n-    #define DEFAULT_CACHE_LINE_SIZE 128\n-    #define OM_CACHE_LINE_SIZE 64\n-  #else\n-    \/\/ tiered, 32-bit, medium machine\n-    #define DEFAULT_CACHE_LINE_SIZE 64\n-  #endif\n-#elif defined(COMPILER1)\n-  \/\/ pure C1, 32-bit, small machine\n-  \/\/ i486 was the last Intel chip with 16-byte cache line size\n-  #define DEFAULT_CACHE_LINE_SIZE 32\n-#elif defined(COMPILER2)\n-  #ifdef _LP64\n-    \/\/ pure C2, 64-bit, large machine\n-    #define DEFAULT_CACHE_LINE_SIZE 128\n-    #define OM_CACHE_LINE_SIZE 64\n-  #else\n-    \/\/ pure C2, 32-bit, medium machine\n-    #define DEFAULT_CACHE_LINE_SIZE 64\n-  #endif\n+\/\/ The expected size in bytes of a cache line.\n+#define DEFAULT_CACHE_LINE_SIZE 64\n+\n+\/\/ The default padding size for data structures to avoid false sharing.\n+#ifdef _LP64\n+\/\/ The common wisdom is that adjacent cache line prefetchers on some hardware\n+\/\/ may pull two cache lines on access, so we have to pessimistically assume twice\n+\/\/ the cache line size for padding. TODO: Check if this is still true for modern\n+\/\/ hardware. If not, DEFAULT_CACHE_LINE_SIZE might as well suffice.\n+#define DEFAULT_PADDING_SIZE (DEFAULT_CACHE_LINE_SIZE*2)\n+#else\n+#define DEFAULT_PADDING_SIZE DEFAULT_CACHE_LINE_SIZE\n","filename":"src\/hotspot\/cpu\/x86\/globalDefinitions_x86.hpp","additions":12,"deletions":23,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+\/\/ The expected size in bytes of a cache line.\n@@ -35,0 +36,3 @@\n+\/\/ The default padding size for data structures to avoid false sharing.\n+#define DEFAULT_PADDING_SIZE DEFAULT_CACHE_LINE_SIZE\n+\n","filename":"src\/hotspot\/cpu\/zero\/globalDefinitions_zero.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -144,1 +144,1 @@\n-  char _pad0[DEFAULT_CACHE_LINE_SIZE];\n+  char _pad0[DEFAULT_PADDING_SIZE];\n@@ -146,1 +146,1 @@\n-  char _pad1[DEFAULT_CACHE_LINE_SIZE - sizeof(TaskQueueEntryChunk*)];\n+  char _pad1[DEFAULT_PADDING_SIZE - sizeof(TaskQueueEntryChunk*)];\n@@ -149,1 +149,1 @@\n-  char _pad2[DEFAULT_CACHE_LINE_SIZE - sizeof(TaskQueueEntryChunk*) - sizeof(size_t)];\n+  char _pad2[DEFAULT_PADDING_SIZE - sizeof(TaskQueueEntryChunk*) - sizeof(size_t)];\n@@ -152,1 +152,1 @@\n-  char _pad4[DEFAULT_CACHE_LINE_SIZE - sizeof(size_t)];\n+  char _pad4[DEFAULT_PADDING_SIZE - sizeof(size_t)];\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ConcurrentMark.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -138,1 +138,1 @@\n-    DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, sizeof(PausedList*));\n+    DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, sizeof(PausedList*));\n@@ -160,1 +160,1 @@\n-  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, 0);\n+  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_PADDING_SIZE, 0);\n@@ -163,1 +163,1 @@\n-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, sizeof(size_t));\n+  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, sizeof(size_t));\n@@ -167,1 +167,1 @@\n-  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_CACHE_LINE_SIZE, sizeof(size_t));\n+  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_PADDING_SIZE, sizeof(size_t));\n@@ -172,1 +172,1 @@\n-  DEFINE_PAD_MINUS_SIZE(3, DEFAULT_CACHE_LINE_SIZE, sizeof(BufferNode*));\n+  DEFINE_PAD_MINUS_SIZE(3, DEFAULT_PADDING_SIZE, sizeof(BufferNode*));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1DirtyCardQueue.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -128,1 +128,1 @@\n-  static size_t header_size() { return align_up(sizeof(Segment), DEFAULT_CACHE_LINE_SIZE); }\n+  static size_t header_size() { return align_up(sizeof(Segment), DEFAULT_PADDING_SIZE); }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1MonotonicArena.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,1 @@\n-  const size_t padding_elem_num = (DEFAULT_CACHE_LINE_SIZE \/ sizeof(size_t));\n+  const size_t padding_elem_num = (DEFAULT_PADDING_SIZE \/ sizeof(size_t));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -69,1 +69,1 @@\n-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, 0);\n+  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, 0);\n@@ -71,1 +71,1 @@\n-  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_CACHE_LINE_SIZE, sizeof(size_t));\n+  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_PADDING_SIZE, sizeof(size_t));\n@@ -73,1 +73,1 @@\n-  DEFINE_PAD_MINUS_SIZE(3, DEFAULT_CACHE_LINE_SIZE, sizeof(BufferNode*));\n+  DEFINE_PAD_MINUS_SIZE(3, DEFAULT_PADDING_SIZE, sizeof(BufferNode*));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1RedirtyCardsQueue.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -112,1 +112,1 @@\n-  char _name[DEFAULT_CACHE_LINE_SIZE - sizeof(FreeListConfig*)];  \/\/ Use name as padding.\n+  char _name[DEFAULT_PADDING_SIZE - sizeof(FreeListConfig*)];  \/\/ Use name as padding.\n@@ -115,1 +115,1 @@\n-  Type Name; DEFINE_PAD_MINUS_SIZE(Id, DEFAULT_CACHE_LINE_SIZE, sizeof(Type))\n+  Type Name; DEFINE_PAD_MINUS_SIZE(Id, DEFAULT_PADDING_SIZE, sizeof(Type))\n","filename":"src\/hotspot\/share\/gc\/shared\/freeListAllocator.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -88,1 +88,1 @@\n-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, 0);\n+  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, 0);\n@@ -96,1 +96,1 @@\n-  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_CACHE_LINE_SIZE, 4 * sizeof(size_t));\n+  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_PADDING_SIZE, 4 * sizeof(size_t));\n","filename":"src\/hotspot\/share\/gc\/shared\/satbMarkQueue.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -75,1 +75,1 @@\n-  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, 0);\n+  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_PADDING_SIZE, 0);\n@@ -77,1 +77,1 @@\n-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, sizeof(volatile uint));\n+  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, sizeof(volatile uint));\n","filename":"src\/hotspot\/share\/gc\/shared\/taskTerminator.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -236,1 +236,1 @@\n-  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, 0);\n+  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_PADDING_SIZE, 0);\n@@ -240,1 +240,1 @@\n-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, sizeof(uint));\n+  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, sizeof(uint));\n@@ -248,1 +248,1 @@\n-  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_CACHE_LINE_SIZE, sizeof(Age));\n+  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_PADDING_SIZE, sizeof(Age));\n@@ -399,1 +399,1 @@\n-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, sizeof(E*));\n+  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, sizeof(E*));\n@@ -407,1 +407,1 @@\n-  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_CACHE_LINE_SIZE, sizeof(uint) + sizeof(int));\n+  DEFINE_PAD_MINUS_SIZE(2, DEFAULT_PADDING_SIZE, sizeof(uint) + sizeof(int));\n","filename":"src\/hotspot\/share\/gc\/shared\/taskqueue.hpp","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -108,1 +108,1 @@\n-    DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, 0);\n+    DEFINE_PAD_MINUS_SIZE(0, DEFAULT_PADDING_SIZE, 0);\n@@ -110,1 +110,1 @@\n-    DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, sizeof(volatile Type));\n+    DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, sizeof(volatile Type));\n","filename":"src\/hotspot\/share\/jfr\/utilities\/jfrVersionSystem.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -43,1 +43,1 @@\n-template <class T, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n+template <class T, size_t alignment = DEFAULT_PADDING_SIZE>\n@@ -50,1 +50,1 @@\n-template <class T, typename Arg1T, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n+template <class T, typename Arg1T, size_t alignment = DEFAULT_PADDING_SIZE>\n@@ -78,1 +78,1 @@\n-template <class T, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n+template <class T, size_t alignment = DEFAULT_PADDING_SIZE>\n@@ -92,1 +92,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n+template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_PADDING_SIZE>\n@@ -103,1 +103,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n+template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_PADDING_SIZE>\n@@ -115,1 +115,1 @@\n-template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_CACHE_LINE_SIZE>\n+template <class T, MEMFLAGS flags, size_t alignment = DEFAULT_PADDING_SIZE>\n","filename":"src\/hotspot\/share\/memory\/padded.hpp","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -224,1 +224,1 @@\n-    CACHE_LINE_PADDING = (int)DEFAULT_CACHE_LINE_SIZE - (int)sizeof(Mutex),\n+    CACHE_LINE_PADDING = (int)DEFAULT_PADDING_SIZE - (int)sizeof(Mutex),\n@@ -235,1 +235,1 @@\n-    CACHE_LINE_PADDING = (int)DEFAULT_CACHE_LINE_SIZE - (int)sizeof(Monitor),\n+    CACHE_LINE_PADDING = (int)DEFAULT_PADDING_SIZE - (int)sizeof(Monitor),\n","filename":"src\/hotspot\/share\/runtime\/mutex.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -124,3 +124,0 @@\n-#ifndef OM_CACHE_LINE_SIZE\n-\/\/ Use DEFAULT_CACHE_LINE_SIZE if not already specified for\n-\/\/ the current build platform.\n@@ -128,1 +125,0 @@\n-#endif\n","filename":"src\/hotspot\/share\/runtime\/objectMonitor.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -49,1 +49,1 @@\n-    DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, 0);\n+    DEFINE_PAD_MINUS_SIZE(0, DEFAULT_PADDING_SIZE, 0);\n@@ -51,1 +51,1 @@\n-    DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, sizeof(volatile uintx));\n+    DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, sizeof(volatile uintx));\n","filename":"src\/hotspot\/share\/utilities\/globalCounter.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -605,1 +605,1 @@\n-\/\/ The expected size in bytes of a cache line, used to pad data structures.\n+\/\/ The expected size in bytes of a cache line.\n@@ -610,0 +610,5 @@\n+\/\/ The default padding size for data structures to avoid false sharing.\n+#ifndef DEFAULT_PADDING_SIZE\n+#error \"Platform should define DEFAULT_PADDING_SIZE\"\n+#endif\n+\n","filename":"src\/hotspot\/share\/utilities\/globalDefinitions.hpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -65,1 +65,1 @@\n-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, sizeof(T*));\n+  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, sizeof(T*));\n","filename":"src\/hotspot\/share\/utilities\/nonblockingQueue.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -41,1 +41,1 @@\n-    DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, 0);\n+    DEFINE_PAD_MINUS_SIZE(0, DEFAULT_PADDING_SIZE, 0);\n@@ -84,1 +84,1 @@\n-  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_CACHE_LINE_SIZE, 0);\n+  DEFINE_PAD_MINUS_SIZE(0, DEFAULT_PADDING_SIZE, 0);\n@@ -91,1 +91,1 @@\n-  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_CACHE_LINE_SIZE, 0);\n+  DEFINE_PAD_MINUS_SIZE(1, DEFAULT_PADDING_SIZE, 0);\n","filename":"src\/hotspot\/share\/utilities\/waitBarrier_generic.hpp","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -242,1 +242,1 @@\n-  const size_t buffer_capacity = DEFAULT_CACHE_LINE_SIZE \/ sizeof(void*);\n+  const size_t buffer_capacity = DEFAULT_PADDING_SIZE \/ sizeof(void*);\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_bufferNodeAllocator.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}