{"files":[{"patch":"@@ -493,1 +493,8 @@\n-        return canonicalize0(path);\n+        String canonicalPath = canonicalize0(path);\n+        String finalPath = null;\n+        try {\n+            finalPath = getFinalPath(canonicalPath);\n+        } catch (IOException ignored) {\n+            finalPath = canonicalPath;\n+        }\n+        return finalPath;\n@@ -499,0 +506,7 @@\n+    private String getFinalPath(String path) throws IOException {\n+        return getFinalPath0(path);\n+    }\n+\n+    private native String getFinalPath0(String path)\n+            throws IOException;\n+\n","filename":"src\/java.base\/windows\/classes\/java\/io\/WinNTFileSystem.java","additions":15,"deletions":1,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -49,6 +49,0 @@\n-\/**\n- * GetFinalPathNameByHandle is available on Windows Vista and newer\n- *\/\n-typedef BOOL (WINAPI* GetFinalPathNameByHandleProc) (HANDLE, LPWSTR, DWORD, DWORD);\n-static GetFinalPathNameByHandleProc GetFinalPathNameByHandle_func;\n-\n@@ -58,1 +52,0 @@\n-    HMODULE handle;\n@@ -65,9 +58,0 @@\n-\n-    \/\/ GetFinalPathNameByHandle requires Windows Vista or newer\n-    if (GetModuleHandleExW((GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS |\n-                            GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT),\n-                           (LPCWSTR)&CreateFileW, &handle) != 0)\n-    {\n-        GetFinalPathNameByHandle_func = (GetFinalPathNameByHandleProc)\n-            GetProcAddress(handle, \"GetFinalPathNameByHandleW\");\n-    }\n@@ -91,4 +75,0 @@\n-    \/* Need Windows Vista or newer to get the final path *\/\n-    if (GetFinalPathNameByHandle_func == NULL)\n-        return NULL;\n-\n@@ -112,1 +92,1 @@\n-        DWORD len = (*GetFinalPathNameByHandle_func)(h, result, MAX_PATH, 0);\n+        DWORD len = GetFinalPathNameByHandleW(h, result, MAX_PATH, 0);\n@@ -118,1 +98,1 @@\n-                len = (*GetFinalPathNameByHandle_func)(h, result, len, 0);\n+                len = GetFinalPathNameByHandleW(h, result, len, 0);\n@@ -354,0 +334,19 @@\n+JNIEXPORT jstring JNICALL\n+Java_java_io_WinNTFileSystem_getFinalPath0(JNIEnv* env, jobject this, jstring pathname) {\n+    jstring rv = NULL;\n+\n+    WITH_UNICODE_STRING(env, pathname, path) {\n+        WCHAR* finalPath = getFinalPath(env, path);\n+        if (finalPath != NULL) {\n+            rv = (*env)->NewString(env, finalPath, (jsize)wcslen(finalPath));\n+            free(finalPath);\n+        }\n+    } END_UNICODE_STRING(env, path);\n+\n+    if (rv == NULL && !(*env)->ExceptionCheck(env)) {\n+        JNU_ThrowIOExceptionWithLastError(env, \"Bad pathname\");\n+    }\n+\n+    return rv;\n+}\n+\n","filename":"src\/java.base\/windows\/native\/libjava\/WinNTFileSystem_md.c","additions":22,"deletions":23,"binary":false,"changes":45,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4899022\n+ * @bug 4899022 8003887\n@@ -32,0 +32,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -36,0 +38,2 @@\n+import org.junit.jupiter.api.Assumptions;\n+import org.junit.jupiter.api.BeforeAll;\n@@ -125,0 +129,84 @@\n+\n+    \/\/ Create a File with the given pathname and return the File as a Path\n+    private static Path createFile(String pathname) throws IOException {\n+        File file = new File(pathname);\n+        file.deleteOnExit();\n+        return file.toPath();\n+    }\n+\n+    private static boolean supportsLinks = true;\n+    private static String linkMessage;\n+\n+    private static Path link;\n+    private static Path sublink;\n+    private static Path subsub;\n+\n+    @BeforeAll\n+    static void createSymlinks() throws IOException {\n+        final String DIR     = \"dir\";\n+        final String SUBDIR  = \"subdir\";\n+        final String TARGET  = \"target.txt\";\n+        final String LINK    = \"link\";\n+        final String SUBLINK = \"sublink\";\n+        final String FILE    = \"file.txt\";\n+\n+        \/\/ Create directories dir\/subdir\n+        Path dir = createFile(DIR);\n+        Path subdir = createFile(dir.resolve(SUBDIR).toString());\n+        Files.createDirectories(subdir);\n+\n+        \/\/ Create file dir\/subdir\/target.txt\n+        Path target = createFile(subdir.resolve(TARGET).toString());\n+        Files.createFile(target);\n+\n+        \/\/ Create symbolic link link -> dir\n+        link = createFile(Path.of(LINK).toString());\n+        try {\n+            Files.createSymbolicLink(link, dir);\n+        } catch (UnsupportedOperationException | IOException x) {\n+            if (OS.WINDOWS.isCurrentOs()) {\n+                supportsLinks = false;\n+                linkMessage = \"\\\"\" + x.getMessage() + \"\\\"\";\n+                return;\n+            } else {\n+                throw x;\n+            }\n+        }\n+\n+        sublink = createFile(Path.of(DIR, SUBDIR, SUBLINK).toString());\n+        Path file = createFile(Path.of(DIR, SUBDIR, FILE).toString());\n+        Files.createFile(file);\n+\n+        \/\/ Create symbolic link dir\/subdir\/sublink -> file.txt\n+        Files.createSymbolicLink(sublink, Path.of(FILE));\n+        sublink.toFile().deleteOnExit();\n+\n+        subsub = createFile(Path.of(LINK, SUBDIR, SUBLINK).toString());\n+    }\n+\n+    @Test\n+    void linkToDir() throws IOException {\n+        Assumptions.assumeTrue(supportsLinks, linkMessage);\n+\n+        \/\/ Check link evaluates to dir\n+        assertEquals(link.toRealPath().toString(),\n+                     link.toFile().getCanonicalPath());\n+    }\n+\n+    @Test\n+    void linkToFile() throws IOException {\n+        Assumptions.assumeTrue(supportsLinks, linkMessage);\n+\n+        \/\/ Check sublink evaluates to file.txt\n+        assertEquals(sublink.toRealPath().toString(),\n+                     sublink.toFile().getCanonicalPath());\n+    }\n+\n+    @Test\n+    void linkToFileInSubdir() throws IOException {\n+        Assumptions.assumeTrue(supportsLinks, linkMessage);\n+\n+        \/\/ Check link\/subdir\/sublink evaluates to dir\/subdir\/file.txt\n+        assertEquals(subsub.toRealPath().toString(),\n+                     subsub.toFile().getCanonicalPath());\n+    }\n","filename":"test\/jdk\/java\/io\/File\/GetCanonicalPath.java","additions":90,"deletions":2,"binary":false,"changes":92,"status":"modified"}]}