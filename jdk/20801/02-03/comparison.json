{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @bug 4899022\n+ * @bug 4899022 8003887\n@@ -32,0 +32,2 @@\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -36,0 +38,1 @@\n+import org.junit.jupiter.api.BeforeAll;\n@@ -125,0 +128,92 @@\n+\n+    private static Path createPath(String pathname) throws IOException {\n+        File file = new File(pathname);\n+        file.deleteOnExit();\n+        return file.toPath();\n+    }\n+\n+    private static boolean testLinks = true;\n+    private static String linkMessage;\n+\n+    private static Path link;\n+    private static Path sublink;\n+    private static Path subsub;\n+\n+    @BeforeAll\n+    static void createSymlinks() throws IOException {\n+        final String DIR     = \"dir\";\n+        final String SUBDIR  = \"subdir\";\n+        final String TARGET  = \"target.txt\";\n+        final String LINK    = \"link\";\n+        final String SUBLINK = \"sublink\";\n+        final String FILE    = \"file.txt\";\n+\n+        \/\/ Create directories dir\/subdir\n+        Path dir = createPath(DIR);\n+        Path subdir = createPath(dir.resolve(SUBDIR).toString());\n+        Files.createDirectories(subdir);\n+\n+        \/\/ Create file dir\/subdir\/target.txt\n+        Path target = createPath(subdir.resolve(TARGET).toString());\n+        Files.createFile(target);\n+\n+        \/\/ Create symbolic link link -> dir\n+        link = createPath(Path.of(LINK).toString());\n+        try {\n+            Files.createSymbolicLink(link, dir);\n+        } catch (UnsupportedOperationException | IOException x) {\n+            if (OS.WINDOWS.isCurrentOs()) {\n+                testLinks = false;\n+                linkMessage = x.getMessage();\n+                return;\n+            } else {\n+                throw x;\n+            }\n+        }\n+\n+        sublink = createPath(Path.of(DIR, SUBDIR, SUBLINK).toString());\n+        Path file = createPath(Path.of(DIR, SUBDIR, FILE).toString());\n+        Files.createFile(file);\n+\n+        \/\/ Create symbolic link dir\/subdir\/sublink -> file.txt\n+        Files.createSymbolicLink(sublink, Path.of(FILE));\n+        sublink.toFile().deleteOnExit();\n+\n+        subsub = createPath(Path.of(LINK, SUBDIR, SUBLINK).toString());\n+    }\n+\n+    @Test\n+    void linkToDir() throws IOException {\n+        if (!testLinks) {\n+            System.err.println(\"Links not tested: \\\"\" + linkMessage + \"\\\"\");\n+            return;\n+        }\n+\n+        \/\/ Check link evaluates to dir\n+        assertEquals(link.toRealPath().toString(),\n+                     link.toFile().getCanonicalPath());\n+    }\n+\n+    @Test\n+    void linkToFile() throws IOException {\n+        if (!testLinks) {\n+            System.err.println(\"Links not tested: \\\"\" + linkMessage + \"\\\"\");\n+            return;\n+        }\n+\n+        \/\/ Check sublink evaluates to file.txt\n+        assertEquals(sublink.toRealPath().toString(),\n+                     sublink.toFile().getCanonicalPath());\n+    }\n+\n+    @Test\n+    void linkToFileInSubdir() throws IOException {\n+        if (!testLinks) {\n+            System.err.println(\"Links not tested: \\\"\" + linkMessage + \"\\\"\");\n+            return;\n+        }\n+\n+        \/\/ Check link\/subdir\/sublink evaluates to dir\/subdir\/file.txt\n+        assertEquals(subsub.toRealPath().toString(),\n+                     subsub.toFile().getCanonicalPath());\n+    }\n","filename":"test\/jdk\/java\/io\/File\/GetCanonicalPath.java","additions":97,"deletions":2,"binary":false,"changes":99,"status":"modified"}]}