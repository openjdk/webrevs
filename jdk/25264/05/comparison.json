{"files":[{"patch":"@@ -346,0 +346,1 @@\n+    private boolean isSimpleSavedImageComparison;\n@@ -399,1 +400,1 @@\n-            if (saved_image != null && model.equals(saved_model)) {\n+            if (isSimpleSavedImageComparison) {\n@@ -600,0 +601,10 @@\n+\n+        isSimpleSavedImageComparison = saved_image != null && model.equals(saved_model);\n+        if (isSimpleSavedImageComparison) {\n+            for (int a = 0; a < saved_image.length; a++) {\n+                if ((saved_image[a] & 0xff) == trans_pixel) {\n+                    isSimpleSavedImageComparison = false;\n+                    break;\n+                }\n+            }\n+        }\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/GifImageDecoder.java","additions":12,"deletions":1,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -68,0 +68,3 @@\n+     *\n+     * @param frameDir an optional directory to write all frames as PNGs to.\n+     *                 See {@link GifComparison#run(URL, File)}\n@@ -69,1 +72,2 @@\n-    public static void test(FrameDescription... frameDescriptions)\n+    public static void test(FrameDescription[] frameDescriptions,\n+                            File frameDir)\n@@ -73,1 +77,1 @@\n-            GifComparison.run(file.toURI().toURL());\n+            GifComparison.run(file.toURI().toURL(), frameDir);\n","filename":"test\/jdk\/sun\/awt\/image\/gif\/GifBuilder.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -41,0 +41,1 @@\n+import java.io.File;\n@@ -62,0 +63,7 @@\n+     * @param frameDir an optional directory to write frames to as PNG images.\n+     *                 The frames should render identically whether we use\n+     *                 the ImageIO model or the ToolkitImage model. If they're\n+     *                 identical, then we only output one image, such as\n+     *                 \"frame_0.png\". If they're different then we'll\n+     *                 output two images: \"frame_0_iio.png\" and\n+     *                 \"frame_0_awt.png\".\n@@ -68,1 +76,2 @@\n-    public static BufferedImage run(URL srcURL) throws Throwable {\n+    public static BufferedImage run(URL srcURL, File frameDir)\n+            throws Throwable {\n@@ -76,3 +85,3 @@\n-        int a = ioModel.frames.size() - 1;\n-        BufferedImage ioImg = ioModel.getFrame(a);\n-        BufferedImage awtImage = awtModel.getFrame(a);\n+        \/\/ if frameDir exists: test & export all frames.\n+        \/\/ Otherwise: only test the last frame\n+        int startIndex = frameDir == null ? ioModel.frames.size() - 1 : 0;\n@@ -80,1 +89,3 @@\n-        lastImage = awtImage;\n+        for (int a = startIndex; a < ioModel.frames.size(); a++) {\n+            BufferedImage ioImg = ioModel.getFrame(a);\n+            BufferedImage awtImage = awtModel.getFrame(a);\n@@ -82,5 +93,1 @@\n-        if (!(ioImg.getWidth() == awtImage.getWidth() &&\n-                ioImg.getHeight() == awtImage.getHeight()))\n-            throw new Error(\"These images are not the same size: \" +\n-                    ioImg.getWidth() + \"x\" + ioImg.getHeight() + \" vs \" +\n-                    awtImage.getWidth() + \"x\" + awtImage.getHeight());\n+            lastImage = awtImage;\n@@ -88,4 +95,7 @@\n-        for (int y = 0; y < ioImg.getHeight(); y++) {\n-            for (int x = 0; x < ioImg.getWidth(); x++) {\n-                int argb1 = ioImg.getRGB(x, y);\n-                int argb2 = awtImage.getRGB(x, y);\n+            try {\n+                if (!(ioImg.getWidth() == awtImage.getWidth() &&\n+                        ioImg.getHeight() == awtImage.getHeight()))\n+                    throw new Error(\"These images are not the same size: \" +\n+                            ioImg.getWidth() + \"x\" + ioImg.getHeight() +\n+                            \" vs \" +\n+                            awtImage.getWidth() + \"x\" + awtImage.getHeight());\n@@ -93,9 +103,33 @@\n-                int alpha1 = (argb1 & 0xff000000) >> 24;\n-                int alpha2 = (argb2 & 0xff000000) >> 24;\n-                if (alpha1 == 0 && alpha2 == 0) {\n-                    continue;\n-                } else if (alpha1 == 0 || alpha2 == 0) {\n-                    throw new Error(\"pixels at (\" + x + \", \" + y +\n-                            \") have different opacities: \" +\n-                            Integer.toUnsignedString(argb1, 16) + \" vs \" +\n-                            Integer.toUnsignedString(argb2, 16));\n+                for (int y = 0; y < ioImg.getHeight(); y++) {\n+                    for (int x = 0; x < ioImg.getWidth(); x++) {\n+                        int argb1 = ioImg.getRGB(x, y);\n+                        int argb2 = awtImage.getRGB(x, y);\n+\n+                        int alpha1 = (argb1 & 0xff000000) >> 24;\n+                        int alpha2 = (argb2 & 0xff000000) >> 24;\n+                        if (alpha1 == 0 && alpha2 == 0) {\n+                            continue;\n+                        } else if (alpha1 == 0 || alpha2 == 0) {\n+                            throw new Error(\"pixels at (\" + x + \", \" + y +\n+                                    \") have different opacities: \" +\n+                                    Integer.toUnsignedString(argb1, 16) +\n+                                    \" vs \" +\n+                                    Integer.toUnsignedString(argb2, 16));\n+                        }\n+                        int rgb1 = argb1 & 0xffffff;\n+                        int rgb2 = argb2 & 0xffffff;\n+                        if (rgb1 != rgb2) {\n+                            throw new Error(\"pixels at (\" + x + \", \" + y +\n+                                    \") have different opaque RGB values: \" +\n+                                    Integer.toUnsignedString(rgb1, 16) +\n+                                    \" vs \" +\n+                                    Integer.toUnsignedString(rgb2, 16));\n+                        }\n+                    }\n+                }\n+\n+                if (frameDir != null) {\n+                    \/\/ the two models are identical, so simply write one image:\n+                    File pngFile = new File(frameDir, \"frame_\" + a + \".png\");\n+                    ImageIO.write(ioImg, \"png\", pngFile);\n+                    System.out.println(\"\\tWrote \" + pngFile);\n@@ -103,7 +137,7 @@\n-                int rgb1 = argb1 & 0xffffff;\n-                int rgb2 = argb2 & 0xffffff;\n-                if (rgb1 != rgb2) {\n-                    throw new Error(\"pixels at (\" + x + \", \" + y +\n-                            \") have different opaque RGB values: \" +\n-                            Integer.toUnsignedString(rgb1, 16) + \" vs \" +\n-                            Integer.toUnsignedString(rgb2, 16));\n+            } catch (Throwable t) {\n+                if (frameDir != null) {\n+                    File f1 = new File(frameDir, \"frame_\" + + a + \"_iio.png\");\n+                    File f2 = new File(frameDir, \"frame_\" + + a + \"_awt.png\");\n+                    ImageIO.write(ioImg, \"png\", f1);\n+                    ImageIO.write(awtImage, \"png\", f2);\n+                    System.out.println(\"\\tWrote \" + f1 + \" vs \" + f2);\n@@ -111,0 +145,1 @@\n+                throw t;\n","filename":"test\/jdk\/sun\/awt\/image\/gif\/GifComparison.java","additions":65,"deletions":30,"binary":false,"changes":95,"status":"modified"},{"patch":"@@ -31,0 +31,2 @@\n+import java.io.File;\n+\n@@ -33,1 +35,2 @@\n-        GifBuilder.test(\n+        GifBuilder.FrameDescription[] frames =\n+            new GifBuilder.FrameDescription[] {\n@@ -39,1 +42,10 @@\n-                        GifBuilder.Disposal.doNotDispose, false) );\n+                        GifBuilder.Disposal.doNotDispose, false)\n+        };\n+\n+        File dir = null;\n+\n+        \/\/ un-comment to visually inspect the frames:\n+\/\/        dir = new File(\"8356137-frames\");\n+\/\/        dir.mkdir();\n+\n+        GifBuilder.test(frames, dir);\n","filename":"test\/jdk\/sun\/awt\/image\/gif\/GifEmptyBackgroundTest.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -0,0 +1,53 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8357034\n+ * @summary This test verifies that when the transparent pixel index changes\n+ * and we're rendering on top of another frame we respect the new transparency.\n+ *\/\n+\n+import java.io.File;\n+\n+public class GifSavedImageTransparentTest {\n+    public static void main(String[] args) throws Throwable {\n+        GifBuilder.FrameDescription[] frames =\n+                new GifBuilder.FrameDescription[] {\n+                        new GifBuilder.FrameDescription(\n+                                GifBuilder.Disposal.doNotDispose, false),\n+                        new GifBuilder.FrameDescription(\n+                                GifBuilder.Disposal.doNotDispose, true),\n+                        new GifBuilder.FrameDescription(\n+                                GifBuilder.Disposal.doNotDispose, true)\n+                };\n+\n+        File dir = null;\n+\n+        \/\/ un-comment to visually inspect the frames:\n+\/\/        dir = new File(\"8357034-frames\");\n+\/\/        dir.mkdir();\n+\n+        GifBuilder.test(frames, dir);\n+    }\n+}\n","filename":"test\/jdk\/sun\/awt\/image\/gif\/GifSavedImageTransparentTest.java","additions":53,"deletions":0,"binary":false,"changes":53,"status":"added"}]}