{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -262,3 +262,1 @@\n-                        TypeElement e2 = (TypeElement)\n-                            ((DeclaredType) supertype).asElement();\n-                        if (e2.getSuperclass().getKind() != TypeKind.NONE)\n+                        if (!isUnimportantObjectType(supertype))\n@@ -527,1 +525,1 @@\n-                             .map(tpe -> annotationsToString(tpe) + tpe.toString())\n+                             .map(tpe -> annotationsToString(tpe) + tpe.toString() + printTypeVariableBoundsIfNeeded(tpe))\n@@ -534,0 +532,16 @@\n+        private String printTypeVariableBoundsIfNeeded(TypeParameterElement tpe) {\n+            List<? extends TypeMirror> printableBounds =\n+                    tpe.getBounds()\n+                       .stream()\n+                       .filter(type -> !isUnimportantObjectType(type))\n+                       .toList();\n+\n+            if (printableBounds.isEmpty()) {\n+                return \"\";\n+            }\n+\n+            return \" extends \" + printableBounds.stream()\n+                                                .map(t -> t.toString())\n+                                                .collect(Collectors.joining(\" & \"));\n+        }\n+\n@@ -773,0 +787,11 @@\n+        private boolean isUnimportantObjectType(TypeMirror type) {\n+            if (!type.getAnnotationMirrors().isEmpty()) {\n+                return false;\n+            }\n+            TypeElement e2 = (TypeElement)\n+                ((DeclaredType) type).asElement();\n+            if (!e2.getKind().isClass()) {\n+                return false;\n+            }\n+            return e2.getSuperclass().getKind() == TypeKind.NONE;\n+        }\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/PrintingProcessor.java","additions":30,"deletions":5,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -0,0 +1,65 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8356057\n+ * @summary Verify annotated supertypes and type variable bounds are printed properly\n+ * @compile\/ref=XprintTypeAnnotationsAndTypeVarBounds.out -Xprint  XprintTypeAnnotationsAndTypeVarBounds.java\n+ *\/\n+\n+import java.lang.annotation.*;\n+\n+class AnnotatedObjectSuperType extends @TA Object {\n+}\n+\n+class UnannotatedObjectSuperType extends Object {\n+}\n+\n+class TypeVariableWithAnnotation1<@TA T> {\n+}\n+\n+class TypeVariableWithAnnotation2<@TA T extends Object> {\n+}\n+\n+class TypeVariableWithBound1<T extends @TA Object> {\n+}\n+\n+class TypeVariableWithBound2<T extends @TA CharSequence> {\n+}\n+\n+class TypeVariableWithBound3<T extends @TA Object & CharSequence> {\n+}\n+\n+class TypeVariableWithBound4<T extends Object & @TA CharSequence> {\n+}\n+\n+class TypeVariableWithBound5<T extends CharSequence> {\n+}\n+\n+class TypeVariableWithBound6<T extends Object & CharSequence> {\n+}\n+\n+@Target(ElementType.TYPE_USE)\n+@interface TA {\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/options\/XprintTypeAnnotationsAndTypeVarBounds.java","additions":65,"deletions":0,"binary":false,"changes":65,"status":"added"},{"patch":"@@ -0,0 +1,54 @@\n+\n+class AnnotatedObjectSuperType extends java.lang.@TA Object {\n+\n+  AnnotatedObjectSuperType();\n+}\n+\n+class UnannotatedObjectSuperType {\n+\n+  UnannotatedObjectSuperType();\n+}\n+\n+class TypeVariableWithAnnotation1<@TA T> {\n+\n+  TypeVariableWithAnnotation1();\n+}\n+\n+class TypeVariableWithAnnotation2<@TA T> {\n+\n+  TypeVariableWithAnnotation2();\n+}\n+\n+class TypeVariableWithBound1<T extends java.lang.@TA Object> {\n+\n+  TypeVariableWithBound1();\n+}\n+\n+class TypeVariableWithBound2<T extends java.lang.@TA CharSequence> {\n+\n+  TypeVariableWithBound2();\n+}\n+\n+class TypeVariableWithBound3<T extends java.lang.@TA Object & java.lang.CharSequence> {\n+\n+  TypeVariableWithBound3();\n+}\n+\n+class TypeVariableWithBound4<T extends java.lang.@TA CharSequence> {\n+\n+  TypeVariableWithBound4();\n+}\n+\n+class TypeVariableWithBound5<T extends java.lang.CharSequence> {\n+\n+  TypeVariableWithBound5();\n+}\n+\n+class TypeVariableWithBound6<T extends java.lang.CharSequence> {\n+\n+  TypeVariableWithBound6();\n+}\n+\n+@java.lang.annotation.Target({TYPE_USE})\n+@interface TA {\n+}\n","filename":"test\/langtools\/tools\/javac\/processing\/options\/XprintTypeAnnotationsAndTypeVarBounds.out","additions":54,"deletions":0,"binary":false,"changes":54,"status":"added"},{"patch":"@@ -5,1 +5,1 @@\n-public class GeneratedSource<T> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n+public class GeneratedSource<T extends java.lang.CharSequence> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n@@ -15,1 +15,1 @@\n-public class GeneratedClass<T> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n+public class GeneratedClass<T extends java.lang.CharSequence> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n@@ -26,1 +26,1 @@\n-public class GeneratedSource<T> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n+public class GeneratedSource<T extends java.lang.CharSequence> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n@@ -36,1 +36,1 @@\n-public class GeneratedClass<T> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n+public class GeneratedClass<T extends java.lang.CharSequence> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n","filename":"test\/langtools\/tools\/javac\/processing\/rounds\/OverwriteBetweenCompilations_1.out","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-public class GeneratedSource<T> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n+public class GeneratedSource<T extends java.lang.CharSequence> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n@@ -14,1 +14,1 @@\n-public class GeneratedClass<T> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n+public class GeneratedClass<T extends java.lang.CharSequence> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n@@ -25,1 +25,1 @@\n-public abstract class GeneratedSource<E> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n+public abstract class GeneratedSource<E extends java.lang.Number> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n@@ -33,1 +33,1 @@\n-public abstract class GeneratedClass<E> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n+public abstract class GeneratedClass<E extends java.lang.Number> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n@@ -42,1 +42,1 @@\n-public abstract class GeneratedSource<E> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n+public abstract class GeneratedSource<E extends java.lang.Number> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n@@ -50,1 +50,1 @@\n-public abstract class GeneratedClass<E> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n+public abstract class GeneratedClass<E extends java.lang.Number> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n","filename":"test\/langtools\/tools\/javac\/processing\/rounds\/OverwriteBetweenCompilations_2.out","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -4,1 +4,1 @@\n-public abstract class GeneratedSource<E> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n+public abstract class GeneratedSource<E extends java.lang.Number> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n@@ -12,1 +12,1 @@\n-public abstract class GeneratedClass<E> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n+public abstract class GeneratedClass<E extends java.lang.Number> extends java.util.LinkedList<java.lang.Number> implements java.lang.Runnable, java.lang.CharSequence {\n@@ -21,1 +21,1 @@\n-public class GeneratedSource<T> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n+public class GeneratedSource<T extends java.lang.CharSequence> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n@@ -31,1 +31,1 @@\n-public class GeneratedClass<T> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n+public class GeneratedClass<T extends java.lang.CharSequence> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n@@ -42,1 +42,1 @@\n-public class GeneratedSource<T> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n+public class GeneratedSource<T extends java.lang.CharSequence> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n@@ -52,1 +52,1 @@\n-public class GeneratedClass<T> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n+public class GeneratedClass<T extends java.lang.CharSequence> extends java.util.ArrayList<java.lang.String> implements java.lang.Runnable {\n","filename":"test\/langtools\/tools\/javac\/processing\/rounds\/OverwriteBetweenCompilations_3.out","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"}]}