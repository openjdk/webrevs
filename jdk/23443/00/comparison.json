{"files":[{"patch":"@@ -162,0 +162,3 @@\n+            if (a.isDefault() != b.isDefault()) {\n+                return a.isDefault() ? -1 : 1; \/\/ default methods go first\n+            }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/MethodInfo.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -26,1 +26,1 @@\n- * @bug 8071693\n+ * @bug 8071693 8347826\n@@ -33,0 +33,1 @@\n+import java.beans.MethodDescriptor;\n@@ -35,0 +36,1 @@\n+import java.util.Arrays;\n@@ -81,5 +83,4 @@\n-        verifyProperties(D1.class,\n-            \"getClass\",     \/\/ inherited method\n-            \"getValue\",     \/\/ inherited default method\n-            \"getFoo\",       \/\/ overridden interface method\n-            \"getObj\"        \/\/ overridden default method\n+        verify(D1.class,\n+            \"public default int DefaultMethodBeanPropertyTest$A1.getValue()\",\n+            \"public java.lang.Integer DefaultMethodBeanPropertyTest$D1.getFoo()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$D1.getObj()\"\n@@ -87,0 +88,1 @@\n+\n@@ -111,4 +113,3 @@\n-        verifyProperties(D2.class,\n-            \"getClass\",\n-            \"getFoo\"\n-        );\n+        verify(D2.class,\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A2.getFoo()\"\n+    );\n@@ -147,3 +148,46 @@\n-        verifyProperties(D3.class,\n-            \"getClass\",\n-            \"getFoo\"\n+        verify(D3.class,\n+            \"public java.util.NavigableSet DefaultMethodBeanPropertyTest$D3.getFoo()\"\n+        );\n+    }\n+\n+    public interface A4 {\n+        default Object getDefault0() {\n+            return null;\n+        }\n+        default Object getDefault1() {\n+            return null;\n+        }\n+        default Object getDefault2() {\n+            return null;\n+        }\n+        default Object getDefault3() {\n+            return null;\n+        }\n+        Object getNonDefault();\n+    }\n+\n+    public class B4 implements A4 {\n+        @Override\n+        public Object getDefault1() {\n+            return new B4();\n+        }\n+        @Override\n+        public String getDefault2() {\n+            return null;\n+        }\n+        @Override\n+        public Float getDefault3() {\n+            return null;\n+        }\n+        public Long getNonDefault() {\n+            return null;\n+        }\n+    }\n+\n+    public static void testScenario4() {\n+        verify(B4.class,\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A4.getDefault0()\",\n+            \"public java.lang.Object DefaultMethodBeanPropertyTest$B4.getDefault1()\",\n+            \"public java.lang.String DefaultMethodBeanPropertyTest$B4.getDefault2()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$B4.getDefault3()\",\n+            \"public java.lang.Long DefaultMethodBeanPropertyTest$B4.getNonDefault()\"\n@@ -155,18 +199,25 @@\n-    public static void verifyProperties(Class<?> type, String... getterNames) {\n-\n-        \/\/ Gather expected properties\n-        final HashSet<PropertyDescriptor> expected = new HashSet<>();\n-        for (String methodName : getterNames) {\n-            final String suffix = methodName.substring(3);\n-            final String propName = Introspector.decapitalize(suffix);\n-            final Method getter;\n-            try {\n-                getter = type.getMethod(methodName);\n-            } catch (NoSuchMethodException e) {\n-                throw new Error(\"unexpected error\", e);\n-            }\n-            final PropertyDescriptor propDesc;\n-            try {\n-                propDesc = new PropertyDescriptor(propName, getter, null);\n-            } catch (IntrospectionException e) {\n-                throw new Error(\"unexpected error\", e);\n+    public static void verify(Class<?> type, String... getterNames) {\n+        \/\/ Verify properties\n+        try {\n+            \/\/ Gather expected properties\n+            final Set<String> expected = new HashSet<>(Arrays.asList(getterNames));\n+            expected.add(\"public final native java.lang.Class java.lang.Object.getClass()\");\n+\n+            \/\/ Gather actual properties\n+            final Set<String> actual = Arrays\n+                    .stream(Introspector.getBeanInfo(type).getPropertyDescriptors())\n+                    .map(PropertyDescriptor::getReadMethod)\n+                    .map(Method::toString)\n+                    .collect(Collectors.toSet());\n+\n+            \/\/ Verify the two sets are the same\n+            if (!actual.equals(expected)) {\n+                throw new Error(\"properties mismatch: \" + type\n+                        + \"\\nACTUAL:\\n  \"\n+                        + actual.stream()\n+                                .map(Object::toString)\n+                                .collect(Collectors.joining(\"\\n  \"))\n+                        + \"\\nEXPECTED:\\n  \"\n+                        + expected.stream()\n+                                .map(Object::toString)\n+                                .collect(Collectors.joining(\"\\n  \")));\n@@ -174,1 +225,2 @@\n-            expected.add(propDesc);\n+        } catch (IntrospectionException exception) {\n+            throw new Error(\"unexpected exception\", exception);\n@@ -177,8 +229,4 @@\n-        \/\/ Verify properties can be found directly\n-        expected.stream()\n-                .map(PropertyDescriptor::getName)\n-                .filter(name -> BeanUtils.getPropertyDescriptor(type, name) == null)\n-                .findFirst()\n-                .ifPresent(name -> {\n-                    throw new Error(\"property \\\"\" + name + \"\\\" not found in \" + type);\n-                });\n+        \/\/ Verify methods\n+        try {\n+            \/\/ Gather expected properties\n+            final Set<String> expected = new HashSet<>(Arrays.asList(getterNames));\n@@ -186,3 +234,6 @@\n-        \/\/ Gather actual properties\n-        final Set<PropertyDescriptor> actual =\n-                Set.of(BeanUtils.getPropertyDescriptors(type));\n+            \/\/ Gather actual methods\n+            final Set<String> actualMethods = Arrays\n+                    .stream(Introspector.getBeanInfo(type, Object.class).getMethodDescriptors())\n+                    .map(MethodDescriptor::getMethod)\n+                    .map(Method::toString)\n+                    .collect(Collectors.toSet());\n@@ -190,11 +241,14 @@\n-        \/\/ Verify the two sets are the same\n-        if (!actual.equals(expected)) {\n-            throw new Error(\"mismatch: \" + type\n-              + \"\\nACTUAL:\\n  \"\n-              + actual.stream()\n-                      .map(Object::toString)\n-                      .collect(Collectors.joining(\"\\n  \"))\n-              + \"\\nEXPECTED:\\n  \"\n-              + expected.stream()\n-                        .map(Object::toString)\n-                        .collect(Collectors.joining(\"\\n  \")));\n+            \/\/ Verify the two sets are the same\n+            if (!actualMethods.equals(expected)) {\n+                throw new Error(\"methods mismatch: \" + type\n+                        + \"\\nACTUAL:\\n  \"\n+                        + actualMethods.stream()\n+                                .map(Object::toString)\n+                                .collect(Collectors.joining(\"\\n  \"))\n+                        + \"\\nEXPECTED:\\n  \"\n+                        + expected.stream()\n+                                .map(Object::toString)\n+                                .collect(Collectors.joining(\"\\n  \")));\n+            }\n+        } catch (IntrospectionException exception) {\n+            throw new Error(\"unexpected exception\", exception);\n@@ -210,0 +264,1 @@\n+        testScenario4();\n","filename":"test\/jdk\/java\/beans\/Introspector\/DefaultMethodBeanPropertyTest.java","additions":109,"deletions":54,"binary":false,"changes":163,"status":"modified"}]}