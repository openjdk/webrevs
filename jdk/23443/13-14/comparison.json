{"files":[{"patch":"@@ -31,0 +31,1 @@\n+import java.beans.BeanInfo;\n@@ -35,0 +36,1 @@\n+import java.beans.SimpleBeanInfo;\n@@ -420,0 +422,75 @@\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 10              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public static class A10 {\n+        public Object getProp() {\n+            return null;\n+        }\n+    }\n+\n+    public static interface B10 {\n+        Object getProp();\n+    }\n+\n+    public static class C10_1 extends A10 implements B10 {\n+    }\n+\n+    public static class C10_2 extends A10 implements B10 {\n+    }\n+\n+    public static class A10BeanInfo extends SimpleBeanInfo {\n+        public MethodDescriptor[] getMethodDescriptors() {\n+            try {\n+                Class params[] = {};\n+                MethodDescriptor md = new MethodDescriptor(A10.class.getDeclaredMethod(\"getProp\", params));\n+                md.setDisplayName(\"display name\");\n+                MethodDescriptor res[] = { md };\n+                return res;\n+            } catch (Exception e) {\n+                throw new Error(e);\n+            }\n+        }\n+    }\n+\n+    public static class C10_1BeanInfo extends SimpleBeanInfo {\n+        public BeanInfo[] getAdditionalBeanInfo() {\n+            try {\n+                BeanInfo res[] = {\n+                    Introspector.getBeanInfo(A10.class),\n+                    Introspector.getBeanInfo(B10.class)\n+                };\n+                return res;\n+            } catch (IntrospectionException exception) {\n+                throw new Error(\"unexpected exception\", exception);\n+            }\n+        }\n+    }\n+\n+    public static class C10_2BeanInfo extends SimpleBeanInfo {\n+        public BeanInfo[] getAdditionalBeanInfo() {\n+            try {\n+                BeanInfo res[] = {\n+                    Introspector.getBeanInfo(B10.class),\n+                    Introspector.getBeanInfo(A10.class)\n+                };\n+                return res;\n+            } catch (IntrospectionException exception) {\n+                throw new Error(\"unexpected exception\", exception);\n+            }\n+        }\n+    }\n+\n+    public static void testScenario10() {\n+        {\n+            var md = getMethodDescriptor(C10_1.class, A10.class, \"getProp\");\n+            assertEquals(\"display name\", md.getDisplayName(), \"getDisplayName()\");\n+        }\n+        {\n+            var md = getMethodDescriptor(C10_2.class, A10.class, \"getProp\");\n+            assertEquals(\"display name\", md.getDisplayName(), \"getDisplayName()\");\n+        }\n+    }\n+\n@@ -467,0 +544,19 @@\n+    private static MethodDescriptor getMethodDescriptor(Class cls, Class stop, String name) {\n+        try {\n+            for (var md : Introspector.getBeanInfo(cls, stop).getMethodDescriptors()) {\n+                if (md.getName().equals(name)) {\n+                    return md;\n+                }\n+            }\n+            return null;\n+        } catch (IntrospectionException exception) {\n+            throw new Error(\"unexpected exception\", exception);\n+        }\n+    }\n+\n+    private static void assertEquals(Object expected, Object actual, String msg) {\n+        if (!expected.equals(actual)) {\n+            throw new Error(msg + \":\\nACTUAL: \" + actual + \"\\nEXPECTED: \" + expected);\n+        }\n+    }\n+\n@@ -479,0 +575,1 @@\n+        testScenario10();\n","filename":"test\/jdk\/java\/beans\/Introspector\/DefaultMethodBeanPropertyTest.java","additions":97,"deletions":0,"binary":false,"changes":97,"status":"modified"}]}