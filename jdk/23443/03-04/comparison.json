{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,1 @@\n-                    if (!Modifier.isAbstract(method.getModifiers())) {\n+                    if (!Modifier.isAbstract(method.getModifiers()) && !method.isBridge()) {\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/MethodInfo.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,0 +94,3 @@\n+                } else if (isParentOfIncoming(this.write, info)) {\n+                    this.write = info;\n+                    writeType = info.type;\n@@ -310,0 +313,12 @@\n+\n+    private static boolean isParentOfIncoming(MethodInfo current, MethodInfo incoming) {\n+        if (null == current) {\n+            return false;\n+        }\n+        Class<?> currentClass = current.method.getDeclaringClass();\n+        Class<?> incomingClass = incoming.method.getDeclaringClass();\n+        if (currentClass == incomingClass) {\n+            return false;\n+        }\n+        return currentClass.isAssignableFrom(incomingClass);\n+    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/PropertyInfo.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,1 @@\n- * @test\n+ * @test id=testScenario1\n@@ -29,0 +29,1 @@\n+ * @run main DefaultMethodBeanPropertyTest testScenario1\n@@ -31,1 +32,49 @@\n-import java.beans.IntrospectionException;\n+\/*\n+ * @test id=testScenario2\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario2\n+ *\/\n+\n+\/*\n+ * @test id=testScenario3\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario3\n+ *\/\n+\n+\/*\n+ * @test id=testScenario4\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario4\n+ *\/\n+\n+\/*\n+ * @test id=testScenario5\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario5\n+ *\/\n+\n+\/*\n+ * @test id=testScenario6\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario6\n+ *\/\n+\n+\/*\n+ * @test id=testScenario7\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario7\n+ *\/\n+\n+ import java.beans.IntrospectionException;\n@@ -83,1 +132,7 @@\n-        verify(D1.class,\n+        verifyMethods(D1.class,\n+            \"public default int DefaultMethodBeanPropertyTest$A1.getValue()\",\n+            \"public java.lang.Integer DefaultMethodBeanPropertyTest$D1.getFoo()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$D1.getObj()\"\n+        );\n+        verifyProperties(D1.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n@@ -88,1 +143,0 @@\n-\n@@ -113,1 +167,5 @@\n-        verify(D2.class,\n+        verifyMethods(D2.class,\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A2.getFoo()\"\n+        );\n+        verifyProperties(D2.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n@@ -115,1 +173,1 @@\n-    );\n+        );\n@@ -148,1 +206,5 @@\n-        verify(D3.class,\n+        verifyMethods(D3.class,\n+            \"public java.util.NavigableSet DefaultMethodBeanPropertyTest$D3.getFoo()\"\n+        );\n+        verifyProperties(D3.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n@@ -194,1 +256,1 @@\n-        verify(B4.class,\n+        verifyMethods(B4.class,\n@@ -201,0 +263,115 @@\n+        verifyProperties(B4.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A4.getDefault0()\",\n+            \"public java.lang.Object DefaultMethodBeanPropertyTest$B4.getDefault1()\",\n+            \"public java.lang.String DefaultMethodBeanPropertyTest$B4.getDefault2()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$B4.getDefault3()\",\n+            \"public java.lang.Long DefaultMethodBeanPropertyTest$B4.getNonDefault()\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 5              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public interface A5 {\n+        default public void setParentFoo(Integer num) {\n+        }\n+        default public void setFoo(Integer num) {\n+        }\n+    }\n+\n+    public class B5 implements A5 {\n+        public void setFoo(Number num) {\n+        }\n+        public void setLocalFoo(Long num) {\n+        }\n+        \/\/ PropertyInfo behavior is undefined if the same setter\n+        \/\/ with different arg type exists in the same class.\n+        \/\/ public void setLocalFoo(Float num) {\n+        \/\/ }\n+    }\n+\n+    public static void testScenario5() {\n+        verifyMethods(B5.class,\n+            \"public default void DefaultMethodBeanPropertyTest$A5.setFoo(java.lang.Integer)\",\n+            \"public default void DefaultMethodBeanPropertyTest$A5.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setLocalFoo(java.lang.Long)\"\n+        );\n+        verifyProperties(B5.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default void DefaultMethodBeanPropertyTest$A5.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setLocalFoo(java.lang.Long)\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 6              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public class A6 {\n+        public void setParentFoo(Integer num) {\n+        }\n+        public void setFoo(Integer num) {\n+        }\n+    }\n+\n+    public class B6 extends A6 {\n+        public void setFoo(Number num) {\n+        }\n+        public void setLocalFoo(Long num) {\n+        }\n+    }\n+\n+    public static void testScenario6() {\n+        verifyMethods(B6.class,\n+            \"public void DefaultMethodBeanPropertyTest$A6.setFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$A6.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setLocalFoo(java.lang.Long)\"\n+        );\n+        verifyProperties(B6.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public void DefaultMethodBeanPropertyTest$A6.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setLocalFoo(java.lang.Long)\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 7              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    interface A7<T> {\n+        T getValue();\n+    }\n+\n+    interface B7 {\n+        Runnable getValue();\n+    }\n+\n+    interface AB7 extends B7, A7<Object> {\n+        Runnable getValue();\n+    }\n+\n+    abstract class D7 implements AB7 {\n+        public void setValue(Runnable value) {\n+        }\n+    }\n+\n+    public static void testScenario7() {\n+        verifyMethods(D7.class,\n+            \"public void DefaultMethodBeanPropertyTest$D7.setValue(java.lang.Runnable)\"\n+        );\n+        verifyProperties(D7.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public void DefaultMethodBeanPropertyTest$D7.setValue(java.lang.Runnable)\"\n+        );\n@@ -219,2 +396,1 @@\n-    public static void verify(Class<?> type, String... getterNames) {\n-        \/\/ Verify properties\n+    public static void verifyProperties(Class<?> type,  String... methodNames) {\n@@ -222,2 +398,1 @@\n-            final Set<String> expected = new HashSet<>(Arrays.asList(getterNames));\n-            expected.add(\"public final native java.lang.Class java.lang.Object.getClass()\");\n+            final Set<String> expected = new HashSet<>(Arrays.asList(methodNames));\n@@ -226,1 +401,2 @@\n-                    .map(PropertyDescriptor::getReadMethod)\n+                    .flatMap(pd -> Arrays.stream(new Method[]{pd.getReadMethod(), pd.getWriteMethod()}))\n+                    .filter(method -> method != null)\n@@ -233,0 +409,1 @@\n+    }\n@@ -234,1 +411,1 @@\n-        \/\/ Verify methods\n+    public static void verifyMethods(Class<?> type, String... methodNames) {\n@@ -236,2 +413,2 @@\n-            final Set<String> expected = new HashSet<>(Arrays.asList(getterNames));\n-            final Set<String> actualMethods = Arrays\n+            final Set<String> expected = new HashSet<>(Arrays.asList(methodNames));\n+            final Set<String> actual = Arrays\n@@ -242,1 +419,1 @@\n-            verifyEquality(\"methods\", expected, actualMethods);\n+            verifyEquality(\"methods\", expected, actual);\n@@ -251,4 +428,1 @@\n-        testScenario1();\n-        testScenario2();\n-        testScenario3();\n-        testScenario4();\n+        DefaultMethodBeanPropertyTest.class.getMethod(args[0]).invoke(null);\n","filename":"test\/jdk\/java\/beans\/Introspector\/DefaultMethodBeanPropertyTest.java","additions":196,"deletions":22,"binary":false,"changes":218,"status":"modified"}]}