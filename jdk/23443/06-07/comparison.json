{"files":[{"patch":"@@ -94,1 +94,1 @@\n-                } else if (null != this.write && this.write.method.isDefault()) {\n+                } else if (isParentOfIncoming(this.write, info)) {\n@@ -98,1 +98,1 @@\n-                    if ((this.write == null) || (!info.method.isDefault() && this.write.type.isAssignableFrom(info.type))) {\n+                    if ((this.write == null) || this.write.type.isAssignableFrom(info.type)) {\n@@ -313,0 +313,12 @@\n+\n+    private static boolean isParentOfIncoming(MethodInfo current, MethodInfo incoming) {\n+        if (null == current) {\n+            return false;\n+        }\n+        Class<?> currentClass = current.method.getDeclaringClass();\n+        Class<?> incomingClass = incoming.method.getDeclaringClass();\n+        if (currentClass == incomingClass) {\n+            return false;\n+        }\n+        return currentClass.isAssignableFrom(incomingClass);\n+    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/PropertyInfo.java","additions":14,"deletions":2,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -233,1 +233,1 @@\n-        default public void setFoo(Integer num) {\n+        default public void setFoo(String num) {\n@@ -242,4 +242,0 @@\n-        \/\/ PropertyInfo behavior is undefined if the same setter\n-        \/\/ with different arg type exists in the same class.\n-        \/\/ public void setLocalFoo(Float num) {\n-        \/\/ }\n@@ -250,1 +246,1 @@\n-            \"public default void DefaultMethodBeanPropertyTest$A5.setFoo(java.lang.Integer)\",\n+            \"public default void DefaultMethodBeanPropertyTest$A5.setFoo(java.lang.String)\",\n@@ -277,1 +273,1 @@\n-        public void setFoo(Number num) {\n+        public void setFoo(String num) {\n@@ -287,1 +283,1 @@\n-            \"public void DefaultMethodBeanPropertyTest$B6.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setFoo(java.lang.String)\",\n@@ -293,1 +289,1 @@\n-            \"public void DefaultMethodBeanPropertyTest$B6.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setFoo(java.lang.String)\",\n@@ -331,0 +327,70 @@\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 8              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public interface A8 {\n+        default public void setFoo(Float num) {\n+        }\n+        default public void setFoo2(Integer num) {\n+        }\n+    }\n+    public interface B8 extends A8 {\n+        default public void setFoo(Integer num) {\n+        }\n+        default public void setFoo2(Float num) {\n+        }\n+    }\n+\n+    public class C8 implements B8 {\n+    }\n+\n+    public static void testScenario8() {\n+        verifyMethods(C8.class,\n+            \"public default void DefaultMethodBeanPropertyTest$A8.setFoo(java.lang.Float)\",\n+            \"public default void DefaultMethodBeanPropertyTest$A8.setFoo2(java.lang.Integer)\",\n+            \"public default void DefaultMethodBeanPropertyTest$B8.setFoo(java.lang.Integer)\",\n+            \"public default void DefaultMethodBeanPropertyTest$B8.setFoo2(java.lang.Float)\"\n+        );\n+        verifyProperties(C8.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default void DefaultMethodBeanPropertyTest$B8.setFoo(java.lang.Integer)\",\n+            \"public default void DefaultMethodBeanPropertyTest$B8.setFoo2(java.lang.Float)\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 9              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public class A9 {\n+        public void setFoo(Object value) {\n+        }\n+        public void setFoo(String value) {\n+        }\n+        public void setFoo2(Object value) {\n+        }\n+        public void setFoo2(Integer value) {\n+        }\n+        \/\/ For the same setters with inconvertible arg types PropertyInfo behavior is undefined.\n+        \/\/ public void setLocalFoo3(Long num) { }\n+        \/\/ public void setLocalFoo3(Float num) { }\n+    }\n+\n+    public static void testScenario9() {\n+        verifyMethods(A9.class,\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo(java.lang.String)\",\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo(java.lang.Object)\",\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo2(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo2(java.lang.Object)\"\n+        );\n+        verifyProperties(A9.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo(java.lang.String)\",\n+            \"public void DefaultMethodBeanPropertyTest$A9.setFoo2(java.lang.Integer)\"\n+        );\n+    }\n+\n@@ -386,0 +452,2 @@\n+        testScenario8();\n+        testScenario9();\n","filename":"test\/jdk\/java\/beans\/Introspector\/DefaultMethodBeanPropertyTest.java","additions":77,"deletions":9,"binary":false,"changes":86,"status":"modified"}]}