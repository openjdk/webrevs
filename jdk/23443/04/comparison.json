{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -114,1 +114,1 @@\n-                    if (!Modifier.isAbstract(method.getModifiers())) {\n+                    if (!Modifier.isAbstract(method.getModifiers()) && !method.isBridge()) {\n@@ -162,0 +162,3 @@\n+            if (a.isDefault() != b.isDefault()) {\n+                return a.isDefault() ? -1 : 1; \/\/ default methods go first\n+            }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/MethodInfo.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -94,0 +94,3 @@\n+                } else if (isParentOfIncoming(this.write, info)) {\n+                    this.write = info;\n+                    writeType = info.type;\n@@ -310,0 +313,12 @@\n+\n+    private static boolean isParentOfIncoming(MethodInfo current, MethodInfo incoming) {\n+        if (null == current) {\n+            return false;\n+        }\n+        Class<?> currentClass = current.method.getDeclaringClass();\n+        Class<?> incomingClass = incoming.method.getDeclaringClass();\n+        if (currentClass == incomingClass) {\n+            return false;\n+        }\n+        return currentClass.isAssignableFrom(incomingClass);\n+    }\n","filename":"src\/java.desktop\/share\/classes\/com\/sun\/beans\/introspect\/PropertyInfo.java","additions":16,"deletions":1,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,2 +25,2 @@\n- * @test\n- * @bug 8071693\n+ * @test id=testScenario1\n+ * @bug 8071693 8347826\n@@ -29,0 +29,1 @@\n+ * @run main DefaultMethodBeanPropertyTest testScenario1\n@@ -31,1 +32,49 @@\n-import java.beans.IntrospectionException;\n+\/*\n+ * @test id=testScenario2\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario2\n+ *\/\n+\n+\/*\n+ * @test id=testScenario3\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario3\n+ *\/\n+\n+\/*\n+ * @test id=testScenario4\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario4\n+ *\/\n+\n+\/*\n+ * @test id=testScenario5\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario5\n+ *\/\n+\n+\/*\n+ * @test id=testScenario6\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario6\n+ *\/\n+\n+\/*\n+ * @test id=testScenario7\n+ * @bug 8071693 8347826\n+ * @summary Verify that the Introspector finds default methods inherited\n+ *          from interfaces\n+ * @run main DefaultMethodBeanPropertyTest testScenario7\n+ *\/\n+\n+ import java.beans.IntrospectionException;\n@@ -33,0 +82,1 @@\n+import java.beans.MethodDescriptor;\n@@ -35,0 +85,1 @@\n+import java.util.Arrays;\n@@ -81,0 +132,5 @@\n+        verifyMethods(D1.class,\n+            \"public default int DefaultMethodBeanPropertyTest$A1.getValue()\",\n+            \"public java.lang.Integer DefaultMethodBeanPropertyTest$D1.getFoo()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$D1.getObj()\"\n+        );\n@@ -82,4 +138,4 @@\n-            \"getClass\",     \/\/ inherited method\n-            \"getValue\",     \/\/ inherited default method\n-            \"getFoo\",       \/\/ overridden interface method\n-            \"getObj\"        \/\/ overridden default method\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default int DefaultMethodBeanPropertyTest$A1.getValue()\",\n+            \"public java.lang.Integer DefaultMethodBeanPropertyTest$D1.getFoo()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$D1.getObj()\"\n@@ -111,0 +167,3 @@\n+        verifyMethods(D2.class,\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A2.getFoo()\"\n+        );\n@@ -112,2 +171,2 @@\n-            \"getClass\",\n-            \"getFoo\"\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A2.getFoo()\"\n@@ -147,0 +206,3 @@\n+        verifyMethods(D3.class,\n+            \"public java.util.NavigableSet DefaultMethodBeanPropertyTest$D3.getFoo()\"\n+        );\n@@ -148,2 +210,167 @@\n-            \"getClass\",\n-            \"getFoo\"\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public java.util.NavigableSet DefaultMethodBeanPropertyTest$D3.getFoo()\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 4              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public interface A4 {\n+        default Object getDefault0() {\n+            return null;\n+        }\n+        default Object getDefault1() {\n+            return null;\n+        }\n+        default Object getDefault2() {\n+            return null;\n+        }\n+        default Object getDefault3() {\n+            return null;\n+        }\n+        Object getNonDefault();\n+    }\n+\n+    public class B4 implements A4 {\n+        @Override\n+        public Object getDefault1() {\n+            return new B4();\n+        }\n+        @Override\n+        public String getDefault2() {\n+            return null;\n+        }\n+        @Override\n+        public Float getDefault3() {\n+            return null;\n+        }\n+        public Long getNonDefault() {\n+            return null;\n+        }\n+    }\n+\n+    public static void testScenario4() {\n+        verifyMethods(B4.class,\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A4.getDefault0()\",\n+            \"public java.lang.Object DefaultMethodBeanPropertyTest$B4.getDefault1()\",\n+            \"public java.lang.String DefaultMethodBeanPropertyTest$B4.getDefault2()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$B4.getDefault3()\",\n+            \"public java.lang.Long DefaultMethodBeanPropertyTest$B4.getNonDefault()\"\n+        );\n+        verifyProperties(B4.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default java.lang.Object DefaultMethodBeanPropertyTest$A4.getDefault0()\",\n+            \"public java.lang.Object DefaultMethodBeanPropertyTest$B4.getDefault1()\",\n+            \"public java.lang.String DefaultMethodBeanPropertyTest$B4.getDefault2()\",\n+            \"public java.lang.Float DefaultMethodBeanPropertyTest$B4.getDefault3()\",\n+            \"public java.lang.Long DefaultMethodBeanPropertyTest$B4.getNonDefault()\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 5              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public interface A5 {\n+        default public void setParentFoo(Integer num) {\n+        }\n+        default public void setFoo(Integer num) {\n+        }\n+    }\n+\n+    public class B5 implements A5 {\n+        public void setFoo(Number num) {\n+        }\n+        public void setLocalFoo(Long num) {\n+        }\n+        \/\/ PropertyInfo behavior is undefined if the same setter\n+        \/\/ with different arg type exists in the same class.\n+        \/\/ public void setLocalFoo(Float num) {\n+        \/\/ }\n+    }\n+\n+    public static void testScenario5() {\n+        verifyMethods(B5.class,\n+            \"public default void DefaultMethodBeanPropertyTest$A5.setFoo(java.lang.Integer)\",\n+            \"public default void DefaultMethodBeanPropertyTest$A5.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setLocalFoo(java.lang.Long)\"\n+        );\n+        verifyProperties(B5.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public default void DefaultMethodBeanPropertyTest$A5.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B5.setLocalFoo(java.lang.Long)\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 6              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    public class A6 {\n+        public void setParentFoo(Integer num) {\n+        }\n+        public void setFoo(Integer num) {\n+        }\n+    }\n+\n+    public class B6 extends A6 {\n+        public void setFoo(Number num) {\n+        }\n+        public void setLocalFoo(Long num) {\n+        }\n+    }\n+\n+    public static void testScenario6() {\n+        verifyMethods(B6.class,\n+            \"public void DefaultMethodBeanPropertyTest$A6.setFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$A6.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setLocalFoo(java.lang.Long)\"\n+        );\n+        verifyProperties(B6.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public void DefaultMethodBeanPropertyTest$A6.setParentFoo(java.lang.Integer)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setFoo(java.lang.Number)\",\n+            \"public void DefaultMethodBeanPropertyTest$B6.setLocalFoo(java.lang.Long)\"\n+        );\n+    }\n+\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\/\/                                  \/\/\n+\/\/          SCENARIO 7              \/\/\n+\/\/                                  \/\/\n+\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\/\n+\n+    interface A7<T> {\n+        T getValue();\n+    }\n+\n+    interface B7 {\n+        Runnable getValue();\n+    }\n+\n+    interface AB7 extends B7, A7<Object> {\n+        Runnable getValue();\n+    }\n+\n+    abstract class D7 implements AB7 {\n+        public void setValue(Runnable value) {\n+        }\n+    }\n+\n+    public static void testScenario7() {\n+        verifyMethods(D7.class,\n+            \"public void DefaultMethodBeanPropertyTest$D7.setValue(java.lang.Runnable)\"\n+        );\n+        verifyProperties(D7.class,\n+            \"public final native java.lang.Class java.lang.Object.getClass()\",\n+            \"public void DefaultMethodBeanPropertyTest$D7.setValue(java.lang.Runnable)\"\n@@ -155,36 +382,1 @@\n-    public static void verifyProperties(Class<?> type, String... getterNames) {\n-\n-        \/\/ Gather expected properties\n-        final HashSet<PropertyDescriptor> expected = new HashSet<>();\n-        for (String methodName : getterNames) {\n-            final String suffix = methodName.substring(3);\n-            final String propName = Introspector.decapitalize(suffix);\n-            final Method getter;\n-            try {\n-                getter = type.getMethod(methodName);\n-            } catch (NoSuchMethodException e) {\n-                throw new Error(\"unexpected error\", e);\n-            }\n-            final PropertyDescriptor propDesc;\n-            try {\n-                propDesc = new PropertyDescriptor(propName, getter, null);\n-            } catch (IntrospectionException e) {\n-                throw new Error(\"unexpected error\", e);\n-            }\n-            expected.add(propDesc);\n-        }\n-\n-        \/\/ Verify properties can be found directly\n-        expected.stream()\n-                .map(PropertyDescriptor::getName)\n-                .filter(name -> BeanUtils.getPropertyDescriptor(type, name) == null)\n-                .findFirst()\n-                .ifPresent(name -> {\n-                    throw new Error(\"property \\\"\" + name + \"\\\" not found in \" + type);\n-                });\n-\n-        \/\/ Gather actual properties\n-        final Set<PropertyDescriptor> actual =\n-                Set.of(BeanUtils.getPropertyDescriptors(type));\n-\n-        \/\/ Verify the two sets are the same\n+    private static void verifyEquality(String title, Set<String> expected, Set<String> actual) {\n@@ -192,9 +384,38 @@\n-            throw new Error(\"mismatch: \" + type\n-              + \"\\nACTUAL:\\n  \"\n-              + actual.stream()\n-                      .map(Object::toString)\n-                      .collect(Collectors.joining(\"\\n  \"))\n-              + \"\\nEXPECTED:\\n  \"\n-              + expected.stream()\n-                        .map(Object::toString)\n-                        .collect(Collectors.joining(\"\\n  \")));\n+            throw new Error(title + \" mismatch: \"\n+                    + \"\\nACTUAL:\\n  \"\n+                    + actual.stream()\n+                            .map(Object::toString)\n+                            .collect(Collectors.joining(\"\\n  \"))\n+                    + \"\\nEXPECTED:\\n  \"\n+                    + expected.stream()\n+                            .map(Object::toString)\n+                            .collect(Collectors.joining(\"\\n  \")));\n+        }\n+    }\n+\n+    public static void verifyProperties(Class<?> type,  String... methodNames) {\n+        try {\n+            final Set<String> expected = new HashSet<>(Arrays.asList(methodNames));\n+            final Set<String> actual = Arrays\n+                    .stream(Introspector.getBeanInfo(type).getPropertyDescriptors())\n+                    .flatMap(pd -> Arrays.stream(new Method[]{pd.getReadMethod(), pd.getWriteMethod()}))\n+                    .filter(method -> method != null)\n+                    .map(Method::toString)\n+                    .collect(Collectors.toSet());\n+            verifyEquality(\"properties\", expected, actual);\n+        } catch (IntrospectionException exception) {\n+            throw new Error(\"unexpected exception\", exception);\n+        }\n+    }\n+\n+    public static void verifyMethods(Class<?> type, String... methodNames) {\n+        try {\n+            final Set<String> expected = new HashSet<>(Arrays.asList(methodNames));\n+            final Set<String> actual = Arrays\n+                    .stream(Introspector.getBeanInfo(type, Object.class).getMethodDescriptors())\n+                    .map(MethodDescriptor::getMethod)\n+                    .map(Method::toString)\n+                    .collect(Collectors.toSet());\n+            verifyEquality(\"methods\", expected, actual);\n+        } catch (IntrospectionException exception) {\n+            throw new Error(\"unexpected exception\", exception);\n@@ -207,3 +428,1 @@\n-        testScenario1();\n-        testScenario2();\n-        testScenario3();\n+        DefaultMethodBeanPropertyTest.class.getMethod(args[0]).invoke(null);\n","filename":"test\/jdk\/java\/beans\/Introspector\/DefaultMethodBeanPropertyTest.java","additions":279,"deletions":60,"binary":false,"changes":339,"status":"modified"}]}