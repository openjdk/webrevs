{"files":[{"patch":"@@ -66,0 +66,4 @@\n+      this(dbg, cfa, rip, dwarf, finalFrame, false);\n+   }\n+\n+   private LinuxAMD64CFrame(LinuxDebugger dbg, Address cfa, Address rip, DwarfParser dwarf, boolean finalFrame, boolean use1ByteBeforeToLookup) {\n@@ -72,0 +76,1 @@\n+      this.use1ByteBeforeToLookup = use1ByteBeforeToLookup;\n@@ -76,0 +81,1 @@\n+      Address symAddr = use1ByteBeforeToLookup ? pc().addOffsetTo(-1) : pc();\n@@ -77,1 +83,1 @@\n-      return dbg.lookup(dbg.getAddressValue(pc()));\n+      return dbg.lookup(dbg.getAddressValue(symAddr));\n@@ -148,10 +154,6 @@\n-     Address libptr = dbg.findLibPtrByAddress(nextPC);\n-     if (libptr != null) {\n-       try {\n-         nextDwarf = new DwarfParser(libptr);\n-       } catch (DebuggerException e) {\n-         \/\/ Bail out to Java frame\n-       }\n-     }\n-\n-     if (nextDwarf != null) {\n+     boolean fallback = false;\n+     try {\n+       nextDwarf = createDwarfParser(nextPC);\n+     } catch (DebuggerException _) {\n+       \/\/ Try again with RIP-1 in case RIP is just outside function bounds,\n+       \/\/ due to function ending with a `call` instruction.\n@@ -159,2 +161,3 @@\n-         nextDwarf.processDwarf(nextPC);\n-       } catch (DebuggerException e) {\n+         nextDwarf = createDwarfParser(nextPC.addOffsetTo(-1));\n+         fallback = true;\n+       } catch (DebuggerException _) {\n@@ -169,1 +172,1 @@\n-     return isValidFrame(nextCFA, context) ? new LinuxAMD64CFrame(dbg, nextCFA, nextPC, nextDwarf)\n+     return isValidFrame(nextCFA, context) ? new LinuxAMD64CFrame(dbg, nextCFA, nextPC, nextDwarf, false, fallback)\n@@ -173,0 +176,18 @@\n+   private DwarfParser createDwarfParser(Address pc) throws DebuggerException {\n+     DwarfParser nextDwarf = null;\n+     Address libptr = dbg.findLibPtrByAddress(pc);\n+     if (libptr != null) {\n+       try {\n+         nextDwarf = new DwarfParser(libptr);\n+       } catch (DebuggerException _) {\n+         \/\/ Bail out to Java frame\n+       }\n+     }\n+\n+     if (nextDwarf != null) {\n+       nextDwarf.processDwarf(pc);\n+     }\n+\n+     return nextDwarf;\n+   }\n+\n@@ -180,0 +201,1 @@\n+   private boolean use1ByteBeforeToLookup;\n","filename":"src\/jdk.hotspot.agent\/share\/classes\/sun\/jvm\/hotspot\/debugger\/linux\/amd64\/LinuxAMD64CFrame.java","additions":36,"deletions":14,"binary":false,"changes":50,"status":"modified"}]}