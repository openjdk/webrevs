{"files":[{"patch":"@@ -146,32 +146,3 @@\n-\n-        \/\/ Already initialized?\n-        if (values != null)\n-            return;\n-\n-        \/\/ Initialize enabled categories based on \"-Xlint\" flags\n-        if (options.isSet(Option.XLINT) || options.isSet(Option.XLINT_CUSTOM, \"all\")) {\n-            \/\/ If -Xlint or -Xlint:all is given, enable all categories by default\n-            values = EnumSet.allOf(LintCategory.class);\n-        } else if (options.isSet(Option.XLINT_CUSTOM, \"none\")) {\n-            \/\/ if -Xlint:none is given, disable all categories by default\n-            values = LintCategory.newEmptySet();\n-        } else {\n-            \/\/ otherwise, enable on-by-default categories\n-            values = LintCategory.newEmptySet();\n-\n-            Source source = Source.instance(context);\n-            if (source.compareTo(Source.JDK9) >= 0) {\n-                values.add(LintCategory.DEP_ANN);\n-            }\n-            if (Source.Feature.REDUNDANT_STRICTFP.allowedInSource(source)) {\n-                values.add(LintCategory.STRICTFP);\n-            }\n-            values.add(LintCategory.REQUIRES_TRANSITIVE_AUTOMATIC);\n-            values.add(LintCategory.OPENS);\n-            values.add(LintCategory.MODULE);\n-            values.add(LintCategory.REMOVAL);\n-            if (!options.isSet(Option.PREVIEW)) {\n-                values.add(LintCategory.PREVIEW);\n-            }\n-            values.add(LintCategory.SYNCHRONIZATION);\n-            values.add(LintCategory.INCUBATING);\n+        if (values == null) {\n+            values = options.getLintCategories(Option.XLINT, this::populateDefaults);\n+            suppressedValues = LintCategory.newEmptySet();\n@@ -179,0 +150,1 @@\n+    }\n@@ -180,7 +152,4 @@\n-        \/\/ Look for specific overrides\n-        for (LintCategory lc : LintCategory.values()) {\n-            if (options.isSet(Option.XLINT_CUSTOM, lc.option)) {\n-                values.add(lc);\n-            } else if (options.isSet(Option.XLINT_CUSTOM, \"-\" + lc.option)) {\n-                values.remove(lc);\n-            }\n+    private void populateDefaults(EnumSet<LintCategory> values) {\n+        Source source = Source.instance(context);\n+        if (source.compareTo(Source.JDK9) >= 0) {\n+            values.add(LintCategory.DEP_ANN);\n@@ -188,2 +157,12 @@\n-\n-        suppressedValues = LintCategory.newEmptySet();\n+        if (Source.Feature.REDUNDANT_STRICTFP.allowedInSource(source)) {\n+            values.add(LintCategory.STRICTFP);\n+        }\n+        values.add(LintCategory.REQUIRES_TRANSITIVE_AUTOMATIC);\n+        values.add(LintCategory.OPENS);\n+        values.add(LintCategory.MODULE);\n+        values.add(LintCategory.REMOVAL);\n+        if (!options.isSet(Option.PREVIEW)) {\n+            values.add(LintCategory.PREVIEW);\n+        }\n+        values.add(LintCategory.SYNCHRONIZATION);\n+        values.add(LintCategory.INCUBATING);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":20,"deletions":41,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -208,1 +208,1 @@\n-        lintOptions = options.isUnset(Option.XLINT_CUSTOM, \"-\" + LintCategory.OPTIONS.option);\n+        lintOptions = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.OPTIONS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Modules.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -506,2 +506,1 @@\n-                    boolean lintPaths = options.isUnset(Option.XLINT_CUSTOM,\n-                            \"-\" + LintCategory.PATH.option);\n+                    boolean lintPaths = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.PATH);\n@@ -580,1 +579,1 @@\n-        boolean lintOptions = options.isUnset(Option.XLINT_CUSTOM, \"-\" + LintCategory.OPTIONS.option);\n+        boolean lintOptions = !options.isExplicitlyDisabled(Option.XLINT, LintCategory.OPTIONS);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Arguments.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.EnumSet;\n@@ -447,1 +448,2 @@\n-        werror        = options.isSet(WERROR);\n+        werrorAny     = options.isSet(WERROR) || options.isSet(WERROR_CUSTOM, Option.LINT_CUSTOM_ALL);\n+        werrorLint    = options.getLintCategories(WERROR, null);\n@@ -520,1 +522,1 @@\n-    \/** Switch: treat warnings as errors\n+    \/** Switch: treat any kind of warning (including non-lint warnings) as an error.\n@@ -522,1 +524,5 @@\n-    protected boolean werror;\n+    protected boolean werrorAny;\n+\n+    \/** Switch: treat lint warnings in the specified {@link LintCategory}s as errors.\n+     *\/\n+    protected EnumSet<LintCategory> werrorLint;\n@@ -587,1 +593,2 @@\n-        if (werror && log.nerrors == 0 && log.nwarnings > 0) {\n+        if (log.nerrors == 0 && log.nwarnings > 0 &&\n+                (werrorAny || werrorLint.clone().removeAll(log.lintWarnings))) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -494,1 +494,1 @@\n-                                            \"all\",\n+                                            LINT_CUSTOM_ALL,\n@@ -505,1 +505,1 @@\n-                                            \"none\",\n+                                            LINT_CUSTOM_NONE,\n@@ -536,0 +536,2 @@\n+    WERROR_CUSTOM(\"-Werror:\", \"opt.arg.Werror\", \"opt.Werror.custom\", STANDARD, BASIC, ANYOF, getXLintChoices()),\n+\n@@ -838,0 +840,10 @@\n+    \/**\n+     * Special lint category key meaning \"all lint categories\".\n+     *\/\n+    public static final String LINT_CUSTOM_ALL = \"all\";\n+\n+    \/**\n+     * Special lint category key meaning \"no lint categories\".\n+     *\/\n+    public static final String LINT_CUSTOM_NONE = \"none\";\n+\n@@ -1084,0 +1096,11 @@\n+    \/**\n+     * If this option is named {@code FOO}, obtain the option named {@code FOO_CUSTOM}.\n+     *\n+     * @param option regular option\n+     * @return corresponding custom option\n+     * @throws IllegalArgumentException if no such option exists\n+     *\/\n+    public Option getCustom() {\n+        return Option.valueOf(name() + \"_CUSTOM\");\n+    }\n+\n@@ -1367,1 +1390,1 @@\n-        choices.add(\"all\");\n+        choices.add(LINT_CUSTOM_ALL);\n@@ -1372,1 +1395,1 @@\n-        choices.add(\"none\");\n+        choices.add(LINT_CUSTOM_NONE);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Option.java","additions":27,"deletions":4,"binary":false,"changes":31,"status":"modified"},{"patch":"@@ -216,1 +216,1 @@\n-        werror = options.isSet(Option.WERROR);\n+        werror = options.isSet(Option.WERROR, PROCESSING, false);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,7 @@\n-    Terminate compilation if warnings occur\n+    Terminate compilation if any warnings occur\n+javac.opt.arg.Werror=\\\n+    <key>(,<key>)*\n+javac.opt.Werror.custom=\\\n+    Specify warnings that should terminate compilation, separated by comma.\\n\\\n+    Precede a key by ''-'' to exclude the specified warning.\\n\\\n+    Use --help-lint to see the supported keys.\n@@ -327,1 +333,1 @@\n-    Print the supported keys for -Xlint\n+    Print the supported keys for -Xlint and -Werror\n@@ -329,1 +335,1 @@\n-    The supported keys for -Xlint are:\n+    The supported keys for -Xlint and -Werror are:\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,0 +33,1 @@\n+import java.util.EnumSet;\n@@ -44,0 +45,1 @@\n+import com.sun.tools.javac.code.Lint.LintCategory;\n@@ -406,1 +408,1 @@\n-    \/** The number of warnings encountered so far.\n+    \/** The total number of warnings encountered so far.\n@@ -410,0 +412,4 @@\n+    \/** Tracks whether any warnings have been encountered per {@link LintCategory}.\n+     *\/\n+    public final EnumSet<LintCategory> lintWarnings = LintCategory.newEmptySet();\n+\n@@ -674,1 +680,0 @@\n-        nwarnings++;\n@@ -692,0 +697,1 @@\n+        lintWarnings.clear();\n@@ -733,1 +739,0 @@\n-                        nwarnings++;\n@@ -745,1 +750,0 @@\n-                        nerrors++;\n@@ -759,1 +763,1 @@\n-     * Write out a diagnostic.\n+     * Write out a diagnostic and bump the warning and error counters as needed.\n@@ -762,0 +766,16 @@\n+\n+        \/\/ Increment counter(s)\n+        switch (diag.getType()) {\n+        case WARNING:\n+            nwarnings++;\n+            Optional.of(diag)\n+              .map(JCDiagnostic::getLintCategory)\n+              .ifPresent(lintWarnings::add);\n+            break;\n+        case ERROR:\n+            nerrors++;\n+            break;\n+        default:\n+            break;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":25,"deletions":5,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -32,0 +32,1 @@\n+import com.sun.tools.javac.code.Lint.LintCategory;\n@@ -173,0 +174,93 @@\n+    \/**\n+     * Collect the set of {@link LintCategory}s specified by option flag(s) of the form\n+     * {@code -Flag} and\/or {@code -Flag:[-]key,[-]key,...}, starting with the provided defaults.\n+     *\n+     * <p>\n+     * The set of categories is calculated as folllows. First, an initial set is created:\n+     * <ul>\n+     *  <li>If the {@code -Flag:all} flag appears, the initial set contains all categories; otherwise,\n+     *  <li>If the {@code -Flag:none} flag appears, the initial set is empty; otherwise,\n+     *  <li>If {@code defaults} is not null, it is invoked to populate an initial set; otherwise,\n+     *  <li>The initial set is empty.\n+     * <\/ul>\n+     * Next, for each lint category {@code key}:\n+     * <ul>\n+     *  <li>If the {@code -Flag:key} flag appears, the category is added to the set; otherwise\n+     *  <li>If the {@code -Flag:-key} flag appears, the category is removed to the set\n+     * <\/ul>\n+     * Unrecognized {@code key}s are ignored.\n+     *\n+     * @param option the plain option\n+     * @param defaults populates the default set, or null for an empty default set\n+     * @return the specified set of categories\n+     *\/\n+    public EnumSet<LintCategory> getLintCategories(Option option, Consumer<? super EnumSet<LintCategory>> defaults) {\n+\n+        \/\/ Create the initial set\n+        EnumSet<LintCategory> categories;\n+        Option customOption = option.getCustom();\n+        if (isSet(option) || isSet(customOption, Option.LINT_CUSTOM_ALL)) {\n+            categories = EnumSet.allOf(LintCategory.class);\n+        } else if (isSet(customOption, Option.LINT_CUSTOM_NONE)) {\n+            categories = LintCategory.newEmptySet();\n+        } else {\n+            categories = EnumSet.noneOf(LintCategory.class);\n+            if (defaults != null) {\n+                defaults.accept(categories);\n+            }\n+        }\n+\n+        \/\/ Apply specific overrides\n+        for (LintCategory category : LintCategory.values()) {\n+            if (isSet(customOption, category.option)) {\n+                categories.add(category);\n+            } else if (isSet(customOption, \"-\" + category.option)) {\n+                categories.remove(category);\n+            }\n+        }\n+\n+        \/\/ Done\n+        return categories;\n+    }\n+\n+    \/**\n+     * Apply the logic of {@link #getLintCategories} to a single {@link LintCategory}.\n+     *\n+     * <p>\n+     * This returns true if and only if the specified {@link LintCategory} would be included\n+     * in the set returned by {@link #getLintCategories} given the provided given default value.\n+     *\n+     * @param option the plain option\n+     * @param category the {@link LintCategory} in question\n+     * @param defaultValue presumed default value\n+     * @return true if {@code category} would be included\n+     *\/\n+    public boolean isSet(Option option, LintCategory category, boolean defaultValue) {\n+        Option customOption = option.getCustom();\n+        if (isSet(customOption, category.option)) {\n+            return true;\n+        }\n+        if (isSet(customOption, \"-\" + category.option)) {\n+            return false;\n+        }\n+        if (isSet(option) || isSet(customOption, Option.LINT_CUSTOM_ALL)) {\n+            return true;\n+        }\n+        if (isSet(customOption, Option.LINT_CUSTOM_NONE)) {\n+            return false;\n+        }\n+        return defaultValue;\n+    }\n+\n+    \/**\n+     * Determine if a specific {@link LintCategory} was explicitly disabled via an option flag\n+     * of the form {@code -Flag:none} or {@code -Flag:-key}.\n+     *\n+     * @param category the {@link LintCategory} in question\n+     * @param option the option\n+     * @return true if {@code category} has been explicitly disabled\n+     *\/\n+    public boolean isExplicitlyDisabled(Option option, LintCategory category) {\n+        return !isSet(option, category, true);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Options.java","additions":94,"deletions":0,"binary":false,"changes":94,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+WerrorLint.java:20:19: compiler.warn.strictfp\n+- compiler.err.warnings.and.werror\n+1 error\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/warnings\/WerrorLint.e1.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+WerrorLint.java:20:19: compiler.warn.strictfp\n+WerrorLint.java:21:30: compiler.warn.empty.if\n+- compiler.err.warnings.and.werror\n+1 error\n+2 warnings\n","filename":"test\/langtools\/tools\/javac\/warnings\/WerrorLint.e2.out","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8349847\n+ *\n+ * @compile                             -XDrawDiagnostics -Xlint:none                         WerrorLint.java\n+ * @compile                             -XDrawDiagnostics -Xlint:none     -Werror             WerrorLint.java\n+ * @compile                             -XDrawDiagnostics -Xlint:none     -Werror:empty       WerrorLint.java\n+ * @compile                             -XDrawDiagnostics -Xlint:none     -Werror:strictfp    WerrorLint.java\n+ * @compile\/ref=WerrorLint.w2.out       -XDrawDiagnostics -Xlint:all                          WerrorLint.java\n+ * @compile\/fail\/ref=WerrorLint.e2.out  -XDrawDiagnostics -Xlint:all      -Werror             WerrorLint.java\n+ * @compile\/fail\/ref=WerrorLint.e2.out  -XDrawDiagnostics -Xlint:all      -Werror:empty       WerrorLint.java\n+ * @compile\/fail\/ref=WerrorLint.e2.out  -XDrawDiagnostics -Xlint:all      -Werror:strictfp    WerrorLint.java\n+ * @compile\/ref=WerrorLint.w1.out       -XDrawDiagnostics                                     WerrorLint.java\n+ * @compile\/fail\/ref=WerrorLint.e1.out  -XDrawDiagnostics                 -Werror             WerrorLint.java\n+ * @compile\/ref=WerrorLint.w1.out       -XDrawDiagnostics                 -Werror:empty       WerrorLint.java\n+ * @compile\/fail\/ref=WerrorLint.e1.out  -XDrawDiagnostics                 -Werror:strictfp    WerrorLint.java\n+ *\/\n+\n+class WerrorLint {\n+    strictfp void m() {             \/\/ [strictfp] - this category is enabled by default\n+        if (hashCode() == 1) ;      \/\/ [empty]    - this category is disabled by default\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/warnings\/WerrorLint.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+WerrorLint.java:20:19: compiler.warn.strictfp\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/warnings\/WerrorLint.w1.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+WerrorLint.java:20:19: compiler.warn.strictfp\n+WerrorLint.java:21:30: compiler.warn.empty.if\n+2 warnings\n","filename":"test\/langtools\/tools\/javac\/warnings\/WerrorLint.w2.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}