{"files":[{"patch":"@@ -150,24 +150,3 @@\n-\n-        \/\/ Already initialized?\n-        if (values != null)\n-            return;\n-\n-        \/\/ Initialize enabled categories based on \"-Xlint\" flags\n-        if (options.isSet(Option.XLINT) || options.isSet(Option.XLINT_CUSTOM, Option.LINT_CUSTOM_ALL)) {\n-            \/\/ If -Xlint or -Xlint:all is given, enable all categories by default\n-            values = EnumSet.allOf(LintCategory.class);\n-        } else if (options.isSet(Option.XLINT_CUSTOM, Option.LINT_CUSTOM_NONE)) {\n-            \/\/ if -Xlint:none is given, disable all categories by default\n-            values = LintCategory.newEmptySet();\n-        } else {\n-            \/\/ otherwise, enable on-by-default categories\n-            values = getDefaults();\n-        }\n-\n-        \/\/ Look for specific overrides\n-        for (LintCategory lc : LintCategory.values()) {\n-            if (options.isLintExplicitlyEnabled(lc)) {\n-                values.add(lc);\n-            } else if (options.isLintExplicitlyDisabled(lc)) {\n-                values.remove(lc);\n-            }\n+        if (values == null) {\n+            values = options.getLintCategoriesOf(Option.XLINT, this::getDefaults);\n+            suppressedValues = LintCategory.newEmptySet();\n@@ -175,2 +154,0 @@\n-\n-        suppressedValues = LintCategory.newEmptySet();\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Lint.java","additions":3,"deletions":26,"binary":false,"changes":29,"status":"modified"},{"patch":"@@ -34,0 +34,1 @@\n+import java.util.EnumSet;\n@@ -58,0 +59,1 @@\n+import com.sun.tools.javac.code.Lint.LintCategory;\n@@ -443,1 +445,2 @@\n-        werror        = options.isSet(WERROR);\n+        werrorAny     = options.isSet(WERROR) || options.isSet(WERROR_CUSTOM, Option.LINT_CUSTOM_ALL);\n+        werrorLint    = options.getLintCategoriesOf(WERROR, LintCategory::newEmptySet);\n@@ -516,1 +519,1 @@\n-    \/** Switch: treat warnings as errors\n+    \/** Switch: treat any kind of warning (lint or non-lint) as an error.\n@@ -518,1 +521,5 @@\n-    protected boolean werror;\n+    protected boolean werrorAny;\n+\n+    \/** Switch: treat lint warnings in the specified {@link LintCategory}s as errors.\n+     *\/\n+    protected EnumSet<LintCategory> werrorLint;\n@@ -584,1 +591,2 @@\n-        if (werror && log.nerrors == 0 && log.nwarnings > 0) {\n+        if (log.nerrors == 0 && log.nwarnings > 0 &&\n+                (werrorAny || werrorLint.clone().removeAll(log.lintWarnings))) {\n@@ -590,0 +598,7 @@\n+    \/**\n+     * Should warnings in the given lint category be treated as errors due to a {@code -Werror} flag?\n+     *\/\n+    public boolean isWerror(LintCategory lc) {\n+        return werrorAny || werrorLint.contains(lc);\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/JavaCompiler.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -566,0 +566,2 @@\n+    WERROR_CUSTOM(\"-Werror:\", \"opt.arg.Werror\", \"opt.Werror.custom\", STANDARD, BASIC, ANYOF, getXLintChoices()),\n+\n@@ -1135,0 +1137,16 @@\n+    \/**\n+     * Like {@link #getCustom} but also requires that the custom option supports lint categories.\n+     *\n+     * <p>\n+     * In practice, that means {@code option} must be {@link Option#LINT} or {@link Option#WERROR}.\n+     *\n+     * @param option regular option\n+     * @return corresponding lint custom option\n+     * @throws IllegalArgumentException if no such option exists\n+     *\/\n+    public Option getLintCustom() {\n+        if (this == XLINT || this == WERROR)\n+            return getCustom();\n+        throw new IllegalArgumentException();\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/main\/Option.java","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -214,1 +214,1 @@\n-        werror = options.isSet(Option.WERROR);\n+        werror = compiler.isWerror(PROCESSING);\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/processing\/JavacProcessingEnvironment.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -98,1 +98,7 @@\n-    Terminate compilation if warnings occur\n+    Terminate compilation if any warnings occur\n+javac.opt.arg.Werror=\\\n+    <key>(,<key>)*\n+javac.opt.Werror.custom=\\\n+    Specify lint categories for which warnings should terminate compilation,\\n\\\n+    separated by comma. Precede a key by ''-'' to exclude the specified category.\\n\\\n+    Use --help-lint to see the supported keys.\n@@ -333,1 +339,1 @@\n-    Print the supported keys for -Xlint\n+    Print the supported keys for -Xlint and -Werror\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/javac.properties","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -174,1 +174,1 @@\n-                    !options.isLintDisabled(category);                  \/\/ ...suppression happens via -Xlint:-category\n+                    !options.isDisabled(Option.XLINT, category);        \/\/ ...suppression happens via -Xlint:-category\n@@ -556,1 +556,1 @@\n-    \/** The number of warnings encountered so far.\n+    \/** The total number of warnings encountered so far.\n@@ -560,0 +560,4 @@\n+    \/** Tracks whether any warnings have been encountered in each {@link LintCategory}.\n+     *\/\n+    public final EnumSet<LintCategory> lintWarnings = LintCategory.newEmptySet();\n+\n@@ -888,0 +892,1 @@\n+        lintWarnings.clear();\n@@ -943,1 +948,0 @@\n-                    nwarnings++;\n@@ -951,1 +955,0 @@\n-                        nwarnings++;\n@@ -962,1 +965,0 @@\n-                        nerrors++;\n@@ -976,1 +978,1 @@\n-     * Write out a diagnostic.\n+     * Write out a diagnostic and bump the warning and error counters as needed.\n@@ -979,0 +981,16 @@\n+\n+        \/\/ Increment counter(s)\n+        switch (diag.getType()) {\n+        case WARNING:\n+            nwarnings++;\n+            Optional.of(diag)\n+              .map(JCDiagnostic::getLintCategory)\n+              .ifPresent(lintWarnings::add);\n+            break;\n+        case ERROR:\n+            nerrors++;\n+            break;\n+        default:\n+            break;\n+        }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Log.java","additions":24,"deletions":6,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -176,1 +176,4 @@\n-     * option flag of the form {@code -Xlint}, {@code -Xlint:all}, or {@code -Xlint:key}.\n+     * option flag of the form {@code -Flag}, {@code -Flag:all}, or {@code -Flag:key}.\n+     *\n+     * <p>\n+     * The given {@code option} must have a custom lint variant (available via {@link Option#getLintCustom}).\n@@ -181,0 +184,1 @@\n+     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n@@ -182,1 +186,2 @@\n-     * @return true if {@code lc} has been enabled\n+     * @return true if {@code lc} is enabled via {@code option}'s lint custom variant (e.g., {@link Option#XLINT_CUSTOM})\n+     * @throws IllegalArgumentException if there is no lint custom variant of {@code option}\n@@ -184,4 +189,3 @@\n-    public boolean isLintEnabled(LintCategory lc) {\n-        return isLintExplicitlyEnabled(lc) ||\n-            isSet(Option.XLINT_CUSTOM) ||\n-            isSet(Option.XLINT_CUSTOM, Option.LINT_CUSTOM_ALL);\n+    public boolean isEnabled(Option option, LintCategory lc) {\n+        Option custom = option.getLintCustom();\n+        return isExplicitlyEnabled(option, lc) || isSet(custom) || isSet(custom, Option.LINT_CUSTOM_ALL);\n@@ -192,1 +196,4 @@\n-     * option flag of the form {@code -Xlint:none} or {@code -Xlint:-key}.\n+     * option flag of the form {@code -Flag:none} or {@code -Flag:-key}.\n+     *\n+     * <p>\n+     * The given {@code option} must have a custom lint variant (available via {@link Option#getLintCustom}).\n@@ -197,0 +204,1 @@\n+     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n@@ -198,1 +206,2 @@\n-     * @return true if {@code lc} has been disabled\n+     * @return true if {@code lc} is disabled via {@code option}'s lint custom variant (e.g., {@link Option#XLINT_CUSTOM})\n+     * @throws IllegalArgumentException if there is no lint custom variant of {@code option}\n@@ -200,2 +209,2 @@\n-    public boolean isLintDisabled(LintCategory lc) {\n-        return isLintExplicitlyDisabled(lc) || isSet(Option.XLINT_CUSTOM, Option.LINT_CUSTOM_NONE);\n+    public boolean isDisabled(Option option, LintCategory lc) {\n+        return isExplicitlyDisabled(option, lc) || isSet(option.getLintCustom(), Option.LINT_CUSTOM_NONE);\n@@ -206,1 +215,4 @@\n-     * option flag of the form {@code -Xlint:key}.\n+     * option flag of the form {@code -Flag:key}.\n+     *\n+     * <p>\n+     * The given {@code option} must have a custom lint variant (available via {@link Option#getLintCustom}).\n@@ -209,1 +221,1 @@\n-     * Note: This does not check for option flags of the form {@code -Xlint} or {@code -Xlint:all}.\n+     * Note: This does not check for option flags of the form {@code -Flag} or {@code -Flag:all}.\n@@ -214,0 +226,1 @@\n+     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n@@ -215,1 +228,2 @@\n-     * @return true if {@code lc} has been explicitly enabled\n+     * @return true if {@code lc} is explicitly enabled via {@code option}'s lint custom variant (e.g., {@link Option#XLINT_CUSTOM})\n+     * @throws IllegalArgumentException if there is no lint custom variant of {@code option}\n@@ -217,2 +231,3 @@\n-    public boolean isLintExplicitlyEnabled(LintCategory lc) {\n-        return lc.optionList.stream().anyMatch(alias -> isSet(Option.XLINT_CUSTOM, alias));\n+    public boolean isExplicitlyEnabled(Option option, LintCategory lc) {\n+        Option customOption = option.getLintCustom();\n+        return lc.optionList.stream().anyMatch(alias -> isSet(customOption, alias));\n@@ -223,1 +238,4 @@\n-     * option flag of the form {@code -Xlint:-key}.\n+     * option flag of the form {@code -Flag:-key}.\n+     *\n+     * <p>\n+     * The given {@code option} must have a custom lint variant (available via {@link Option#getLintCustom}).\n@@ -226,1 +244,1 @@\n-     * Note: This does not check for an option flag of the form {@code -Xlint:none}.\n+     * Note: This does not check for an option flag of the form {@code -Flag:none}.\n@@ -231,0 +249,1 @@\n+     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n@@ -232,1 +251,33 @@\n-     * @return true if {@code lc} has been explicitly disabled\n+     * @return true if {@code lc} is explicitly disabled via {@code option}'s lint custom variant (e.g., {@link Option#XLINT_CUSTOM})\n+     * @throws IllegalArgumentException if there is no lint custom variant of {@code option}\n+     *\/\n+    public boolean isExplicitlyDisabled(Option option, LintCategory lc) {\n+        Option customOption = option.getLintCustom();\n+        return lc.optionList.stream().anyMatch(alias -> isSet(customOption, \"-\" + alias));\n+    }\n+\n+    \/**\n+     * Collect the set of {@link LintCategory}s specified by option flag(s) of the form\n+     * {@code -Flag} and\/or {@code -Flag:[-]key,[-]key,...}.\n+     *\n+     * <p>\n+     * The given {@code option} must have a custom lint variant (available via {@link Option#getLintCustom}).\n+     *\n+     * <p>\n+     * The set of categories is calculated as follows. First, an initial set is created:\n+     * <ul>\n+     *  <li>If {@code -Flag} or {@code -Flag:all} appears, the initial set contains all categories; otherwise,\n+     *  <li>If {@code -Flag:none} appears, the initial set is empty; otherwise,\n+     *  <li>The {@code defaults} parameter is invoked to construct an initial set.\n+     * <\/ul>\n+     * Next, for each lint category key {@code key}:\n+     * <ul>\n+     *  <li>If {@code -Flag:key} flag appears, the corresponding category is added to the set; otherwise\n+     *  <li>If {@code -Flag:-key} flag appears, the corresponding category is removed to the set\n+     * <\/ul>\n+     * Unrecognized {@code key}s are ignored.\n+     *\n+     * @param option the plain (non-custom) version of the option (e.g., {@link Option#XLINT})\n+     * @param defaults populates the default set, or null for an empty default set\n+     * @return the specified set of categories\n+     * @throws IllegalArgumentException if there is no lint custom variant of {@code option}\n@@ -234,2 +285,24 @@\n-    public boolean isLintExplicitlyDisabled(LintCategory lc) {\n-        return lc.optionList.stream().anyMatch(alias -> isSet(Option.XLINT_CUSTOM, \"-\" + alias));\n+    public EnumSet<LintCategory> getLintCategoriesOf(Option option, Supplier<? extends EnumSet<LintCategory>> defaults) {\n+\n+        \/\/ Create the initial set\n+        EnumSet<LintCategory> categories;\n+        Option customOption = option.getLintCustom();\n+        if (isSet(option) || isSet(customOption, Option.LINT_CUSTOM_ALL)) {\n+            categories = EnumSet.allOf(LintCategory.class);\n+        } else if (isSet(customOption, Option.LINT_CUSTOM_NONE)) {\n+            categories = EnumSet.noneOf(LintCategory.class);\n+        } else {\n+            categories = defaults.get();\n+        }\n+\n+        \/\/ Apply specific overrides\n+        for (LintCategory category : LintCategory.values()) {\n+            if (isExplicitlyEnabled(option, category)) {\n+                categories.add(category);\n+            } else if (isExplicitlyDisabled(option, category)) {\n+                categories.remove(category);\n+            }\n+        }\n+\n+        \/\/ Done\n+        return categories;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/util\/Options.java","additions":93,"deletions":20,"binary":false,"changes":113,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 1994, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 1994, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -451,1 +451,10 @@\n-:   Terminates compilation when warnings occur.\n+:   Terminates compilation when any warnings occur; this includes warnings in all lint\n+    categories, as well as non-lint warnings.\n+\n+<a id=\"option-Werror-custom\">`-Werror:`\\[`-`\\]*key*(`,`\\[`-`\\]*key*)\\*<\/a>\n+:   Specify lint categories for which warnings should terminate compilation. The keys\n+    `all` and `none` include or exclude all categories (respectively); other keys include\n+    the corresponding category, or exclude it if preceded by a hyphen (`-`). By default,\n+    no categories are included. In order to terminate compilation, the category must also\n+    be enabled (via [`-Xlint`](#option-Xlint-custom), if necessary).\n+    See [`-Xlint`](#option-Xlint-custom) below for the list of lint category keys.\n","filename":"src\/jdk.compiler\/share\/man\/javac.md","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -0,0 +1,4 @@\n+WerrorLint.java:20:19: compiler.warn.strictfp\n+- compiler.err.warnings.and.werror\n+1 error\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/warnings\/WerrorLint.e1.out","additions":4,"deletions":0,"binary":false,"changes":4,"status":"added"},{"patch":"@@ -0,0 +1,5 @@\n+WerrorLint.java:20:19: compiler.warn.strictfp\n+WerrorLint.java:21:30: compiler.warn.empty.if\n+- compiler.err.warnings.and.werror\n+1 error\n+2 warnings\n","filename":"test\/langtools\/tools\/javac\/warnings\/WerrorLint.e2.out","additions":5,"deletions":0,"binary":false,"changes":5,"status":"added"},{"patch":"@@ -0,0 +1,23 @@\n+\/*\n+ * @test \/nodynamiccopyright\/\n+ * @bug 8349847\n+ *\n+ * @compile                             -XDrawDiagnostics -Xlint:none                         WerrorLint.java\n+ * @compile                             -XDrawDiagnostics -Xlint:none     -Werror             WerrorLint.java\n+ * @compile                             -XDrawDiagnostics -Xlint:none     -Werror:empty       WerrorLint.java\n+ * @compile                             -XDrawDiagnostics -Xlint:none     -Werror:strictfp    WerrorLint.java\n+ * @compile\/ref=WerrorLint.w2.out       -XDrawDiagnostics -Xlint:all                          WerrorLint.java\n+ * @compile\/fail\/ref=WerrorLint.e2.out  -XDrawDiagnostics -Xlint:all      -Werror             WerrorLint.java\n+ * @compile\/fail\/ref=WerrorLint.e2.out  -XDrawDiagnostics -Xlint:all      -Werror:empty       WerrorLint.java\n+ * @compile\/fail\/ref=WerrorLint.e2.out  -XDrawDiagnostics -Xlint:all      -Werror:strictfp    WerrorLint.java\n+ * @compile\/ref=WerrorLint.w1.out       -XDrawDiagnostics                                     WerrorLint.java\n+ * @compile\/fail\/ref=WerrorLint.e1.out  -XDrawDiagnostics                 -Werror             WerrorLint.java\n+ * @compile\/ref=WerrorLint.w1.out       -XDrawDiagnostics                 -Werror:empty       WerrorLint.java\n+ * @compile\/fail\/ref=WerrorLint.e1.out  -XDrawDiagnostics                 -Werror:strictfp    WerrorLint.java\n+ *\/\n+\n+class WerrorLint {\n+    strictfp void m() {             \/\/ [strictfp] - this category is enabled by default\n+        if (hashCode() == 1) ;      \/\/ [empty]    - this category is disabled by default\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/warnings\/WerrorLint.java","additions":23,"deletions":0,"binary":false,"changes":23,"status":"added"},{"patch":"@@ -0,0 +1,2 @@\n+WerrorLint.java:20:19: compiler.warn.strictfp\n+1 warning\n","filename":"test\/langtools\/tools\/javac\/warnings\/WerrorLint.w1.out","additions":2,"deletions":0,"binary":false,"changes":2,"status":"added"},{"patch":"@@ -0,0 +1,3 @@\n+WerrorLint.java:20:19: compiler.warn.strictfp\n+WerrorLint.java:21:30: compiler.warn.empty.if\n+2 warnings\n","filename":"test\/langtools\/tools\/javac\/warnings\/WerrorLint.w2.out","additions":3,"deletions":0,"binary":false,"changes":3,"status":"added"}]}