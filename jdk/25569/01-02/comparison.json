{"files":[{"patch":"@@ -56,1 +56,0 @@\n-        var classFile = ClassFile.of();\n@@ -60,0 +59,1 @@\n+        AccessFlag[] noFlags = {};\n@@ -61,8 +61,8 @@\n-            of(createClassFile(classFile, major17, 0), false),\n-            of(createClassFile(classFile, major17, preview), false),\n-            of(createClassFile(classFile, 0, 0), false),\n-            of(createClassFile(classFile, major17, 0, AccessFlag.PUBLIC), false),\n-            of(createClassFile(classFile, major17, preview, AccessFlag.PUBLIC), false),\n-            of(createClassFile(classFile, majorLatest, preview, AccessFlag.PUBLIC), false),\n-            of(createClassFile(classFile, majorLatest, 0, AccessFlag.BRIDGE), true), \/\/ misplaced access flag\n-            of(createClassFile(classFile, majorLatest, preview, AccessFlag.BRIDGE), true) \/\/ misplaced access flag\n+            of(false, major17, 0, noFlags),\n+            of(false, major17, preview, noFlags),\n+            of(false, 0, 0, noFlags),\n+            of(false, major17, 0, new AccessFlag[]{AccessFlag.PUBLIC}),\n+            of(false, major17, preview, new AccessFlag[]{AccessFlag.PUBLIC}),\n+            of(false, majorLatest, preview, new AccessFlag[]{AccessFlag.PUBLIC}),\n+            of(true, majorLatest, 0, new AccessFlag[]{AccessFlag.BRIDGE}), \/\/ misplaced access flag\n+            of(true, majorLatest, preview, new AccessFlag[]{AccessFlag.BRIDGE}) \/\/ misplaced access flag\n@@ -72,2 +72,2 @@\n-    private static Object createClassFile(ClassFile classFile, int major, int minor, AccessFlag... classFlags) {\n-        return classFile.build(ClassDesc.of(\"Test\"), (builder) -> {\n+    private static byte[] createClassFile(int major, int minor, AccessFlag[] classFlags) {\n+        return ClassFile.of().build(ClassDesc.of(\"Test\"), (builder) -> {\n@@ -85,1 +85,1 @@\n-    void test(byte[] classFile, boolean shouldError) throws Throwable {\n+    void test(boolean shouldError, int major, int minor, AccessFlag[] classFlags) throws Throwable {\n@@ -87,1 +87,1 @@\n-        Files.write(Path.of(\"cf.class\"), classFile);\n+        Files.write(Path.of(\"cf.class\"), createClassFile(major, minor, classFlags));\n","filename":"test\/langtools\/tools\/javap\/ClassFileVersionTest.java","additions":13,"deletions":13,"binary":false,"changes":26,"status":"modified"}]}