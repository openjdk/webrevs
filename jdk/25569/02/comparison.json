{"files":[{"patch":"@@ -121,1 +121,2 @@\n-            return null;\n+            \/\/ something not representable by CFFV, let's fall back\n+            return ClassFileFormatVersion.latest();\n@@ -123,1 +124,2 @@\n-            return null;\n+            \/\/ preview versions aren't explicitly supported, but latest is good enough for now\n+            return ClassFileFormatVersion.latest();\n","filename":"src\/jdk.jdeps\/share\/classes\/com\/sun\/tools\/javap\/ClassWriter.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8358078\n+ * @summary javap should not crash due to class file versions\n+ * @library \/tools\/lib\n+ * @modules jdk.jdeps\/com.sun.tools.javap\n+ * @run junit ClassFileVersionTest\n+ *\/\n+\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.Arguments;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import toolbox.JavapTask;\n+import toolbox.Task;\n+import toolbox.ToolBox;\n+\n+import java.lang.classfile.ClassFile;\n+import java.lang.constant.ClassDesc;\n+import java.lang.reflect.AccessFlag;\n+import java.lang.reflect.ClassFileFormatVersion;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.stream.Stream;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.params.provider.Arguments.of;\n+\n+public class ClassFileVersionTest {\n+\n+    final ToolBox toolBox = new ToolBox();\n+\n+    public static Stream<Arguments> classFiles() {\n+        int major17 = ClassFileFormatVersion.RELEASE_17.major();\n+        int preview = Character.MAX_VALUE;\n+        int majorLatest = ClassFileFormatVersion.latest().major();\n+        AccessFlag[] noFlags = {};\n+        return Stream.of(\n+            of(false, major17, 0, noFlags),\n+            of(false, major17, preview, noFlags),\n+            of(false, 0, 0, noFlags),\n+            of(false, major17, 0, new AccessFlag[]{AccessFlag.PUBLIC}),\n+            of(false, major17, preview, new AccessFlag[]{AccessFlag.PUBLIC}),\n+            of(false, majorLatest, preview, new AccessFlag[]{AccessFlag.PUBLIC}),\n+            of(true, majorLatest, 0, new AccessFlag[]{AccessFlag.BRIDGE}), \/\/ misplaced access flag\n+            of(true, majorLatest, preview, new AccessFlag[]{AccessFlag.BRIDGE}) \/\/ misplaced access flag\n+        );\n+    }\n+\n+    private static byte[] createClassFile(int major, int minor, AccessFlag[] classFlags) {\n+        return ClassFile.of().build(ClassDesc.of(\"Test\"), (builder) -> {\n+            \/\/ manually assemble flag bits to avoid exception in ClassFile api\n+            int flags = 0;\n+            for (AccessFlag classFlag : classFlags) {\n+                flags |= classFlag.mask();\n+            }\n+            builder.withVersion(major, minor).withFlags(flags);\n+        });\n+    }\n+\n+    @ParameterizedTest\n+    @MethodSource(\"classFiles\")\n+    void test(boolean shouldError, int major, int minor, AccessFlag[] classFlags) throws Throwable {\n+\n+        Files.write(Path.of(\"cf.class\"), createClassFile(major, minor, classFlags));\n+\n+        var lines = new JavapTask(toolBox)\n+            .classes(\"cf.class\")\n+            .options(\"-c\", \"-p\", \"-v\")\n+            .run(shouldError ? Task.Expect.FAIL : Task.Expect.SUCCESS)\n+            .writeAll()\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        assertEquals(shouldError, lines.stream().anyMatch(l -> l.startsWith(\"Error: Access Flags:\")), \"printed error\");\n+    }\n+}\n","filename":"test\/langtools\/tools\/javap\/ClassFileVersionTest.java","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"}]}