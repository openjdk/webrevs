{"files":[{"patch":"@@ -2,1 +2,1 @@\n-# Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+# Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -106,0 +106,1 @@\n+    jdk.compiler \\\n","filename":"make\/conf\/module-loader-map.conf","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -837,0 +837,4 @@\n+     * <p>\n+     * In case of being in \"source\" launchmode, warnings about unknown modules are\n+     * deferred to the source launcher logic in the jdk.compiler module, as those\n+     * modules might be not compiled, yet.\n@@ -839,1 +843,3 @@\n-        addEnableNativeAccess(layer, USER_NATIVE_ACCESS_MODULES, true);\n+        String launchMode = getAndRemoveProperty(\"jdk.internal.java.launchmode\");\n+        boolean shouldWarn = !\"source\".equals(launchMode);\n+        addEnableNativeAccess(layer, USER_NATIVE_ACCESS_MODULES, shouldWarn);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/module\/ModuleBootstrap.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1995, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1995, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -1375,0 +1375,2 @@\n+        \/\/ signal module bootstrap to defer warnings about unknown modules\n+        AddOption(\"-Djdk.internal.java.launchmode=source\", NULL);\n","filename":"src\/java.base\/share\/native\/libjli\/java.c","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -211,1 +211,3 @@\n-            var modulePathLayer = ModuleLayer.defineModulesWithOneLoader(modulePathConfiguration, List.of(bootLayer), parent).layer();\n+            var modulePathController = ModuleLayer.defineModulesWithOneLoader(modulePathConfiguration, List.of(bootLayer), parent);\n+            enableNativeAccess(modulePathController, false);\n+            var modulePathLayer = modulePathController.layer();\n@@ -229,0 +231,3 @@\n+        \/\/ Configure native access for the modular application.\n+        enableNativeAccess(memoryController, true);\n+\n@@ -241,0 +246,18 @@\n+    @SuppressWarnings(\"restricted\")\n+    private void enableNativeAccess(ModuleLayer.Controller controller, boolean shouldWarn) {\n+        var layer = controller.layer();\n+        for (var name : options.enableNativeAccessForModules()) {\n+            var found = layer.findModule(name);\n+            if (found.isPresent()) {\n+                var module = found.get();\n+                if (!module.isNativeAccessEnabled()) {\n+                    controller.enableNativeAccess(module);\n+                }\n+                continue;\n+            }\n+            if (shouldWarn) {\n+                out.println(\"WARNING: Unknown module: \" + name + \" specified to --enable-native-access\");\n+            }\n+        }\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/MemoryContext.java","additions":25,"deletions":2,"binary":false,"changes":27,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -44,1 +44,2 @@\n-                            List<String> forSubsequentCompilations) {\n+                            List<String> forSubsequentCompilations,\n+                            List<String> enableNativeAccessForModules) {\n@@ -58,0 +59,1 @@\n+        var enableNativeAccessForModules = new ArrayList<String>();\n@@ -97,1 +99,1 @@\n-                        var modules = computeListOfAddModules(program, value);\n+                        var modules = computeListOfModules(program, value);\n@@ -120,0 +122,13 @@\n+                case \"--enable-native-access\" -> {\n+                    if (value == null) {\n+                        if (i == runtimeArgs.length - 1) {\n+                            \/\/ should not happen when invoked from launcher\n+                            throw new Fault(Errors.NoValueForOption(opt));\n+                        }\n+                        value = runtimeArgs[++i];\n+                    }\n+                    var modules = computeListOfModules(program, value);\n+                    if (program.isModular()) {\n+                        enableNativeAccessForModules.addAll(modules);\n+                    }\n+                }\n@@ -148,1 +163,4 @@\n-        return new RelevantJavacOptions(List.copyOf(programOptions), List.copyOf(subsequentOptions));\n+        return new RelevantJavacOptions(\n+                List.copyOf(programOptions),\n+                List.copyOf(subsequentOptions),\n+                List.copyOf(enableNativeAccessForModules));\n@@ -151,1 +169,1 @@\n-    private static List<String> computeListOfAddModules(ProgramDescriptor program, String value) {\n+    private static List<String> computeListOfModules(ProgramDescriptor program, String value) {\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/launcher\/RelevantJavacOptions.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8304400 8332226\n+ * @bug 8304400 8332226 8346778\n@@ -195,0 +195,2 @@\n+                    System.out.println(\"bar=\" + Prog1.class.getModule().isNativeAccessEnabled());\n+                    System.out.println(\"foo=\" + foo.Foo.class.getModule().isNativeAccessEnabled());\n@@ -202,0 +204,1 @@\n+                \"--enable-native-access\", \"foo,bar,baz\",\n@@ -215,1 +218,1 @@\n-                () -> assertEquals(0, code),\n+                () -> assertEquals(0, code, out.toString()),\n@@ -219,0 +222,2 @@\n+                      bar=true\n+                      foo=true\n@@ -220,1 +225,4 @@\n-                () -> assertTrue(err.isEmpty())\n+                () -> assertLinesMatch(\n+                      \"\"\"\n+                      WARNING: Unknown module: baz specified to --enable-native-access\n+                      \"\"\".lines(), err.stream())\n","filename":"test\/langtools\/tools\/javac\/launcher\/ModuleSourceLauncherTests.java","additions":12,"deletions":4,"binary":false,"changes":16,"status":"modified"}]}