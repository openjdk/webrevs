{"files":[{"patch":"@@ -472,1 +472,1 @@\n-          if (n->is_CFG() || n->depends_only_on_test() || n->in(0) == nullptr || !_phase->is_member(_lpt, n->in(0))) {\n+          if (n->is_CFG() || (n->depends_only_on_test() && _phase->igvn().no_dependent_zero_check(n)) || n->in(0) == nullptr || !_phase->is_member(_lpt, n->in(0))) {\n","filename":"src\/hotspot\/share\/opto\/loopPredicate.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,60 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8331717\n+ * @summary C2: Crash with SIGFPE\n+ *\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*TestLoopPredicationDivZeroCheck*::* -XX:-TieredCompilation -Xbatch TestLoopPredicationDivZeroCheck\n+ *\/\n+\n+\/*\n+ * The division 2 \/ i4 requires a non-zero check. As the result is an array access, it will be the input to a range\n+ * check. Loop predication will try to move the range check and the division to right before the loop as the division\n+ * appears to be invariant (i4 is always 0). However, the division is not truly invariant as it requires the zero\n+ * check for i4 that can throw an exception. The bug fixed in 8331717 caused the division to still be moved before the\n+ * for loop with the range check.\n+ *\/\n+public class TestLoopPredicationDivZeroCheck {\n+    static int iArr[] = new int[100];\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 10000; i++) {\n+            test();\n+        }\n+    }\n+\n+    static void test() {\n+        int i1 = 0;\n+\n+        for (int i4 : iArr) {\n+            i4 = i1;\n+            try {\n+                iArr[0] = 1 \/ i4;\n+                i4 = iArr[2 \/ i4];\n+           } catch (ArithmeticException a_e) {\n+           }\n+       }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLoopPredicationDivZeroCheck.java","additions":60,"deletions":0,"binary":false,"changes":60,"status":"added"},{"patch":"@@ -0,0 +1,63 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8331717\n+ * @summary C2: Crash with SIGFPE\n+ *\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*TestLoopPredicationDivZeroCheck2*::* -XX:-TieredCompilation -Xbatch TestLoopPredicationDivZeroCheck2\n+ *\/\n+\n+\/*\n+ * Loop predication will try to move 3 \/ y (input to the range check for bArr[x \/ 30]) before its containing for loop\n+ * but it may not as y must be zero-checked. See TestLoopPredicationDivZeroCheck for a more detailed explanation.\n+ *\/\n+public class TestLoopPredicationDivZeroCheck2 {\n+    static volatile long lFld;\n+    static int iFld;\n+\n+    public static void main(String[] strArr) {\n+        test();\n+    }\n+\n+    static void test() {\n+        int x = 0;\n+        int y = iFld;\n+        long lArr[] = new long[400];\n+        boolean bArr[] = new boolean[400];\n+        for (int i = 0; i < 10000; i++) {\n+            for (int j = 1; j < 13; j++) {\n+                for (int k = 1; k < 2; k++) {\n+                    lFld = 0;\n+                    lArr[1] = 7;\n+                    try {\n+                        x = 3 \/ y;\n+                    } catch (ArithmeticException a_e) {\n+                    }\n+                    bArr[x \/ 30] = true;\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLoopPredicationDivZeroCheck2.java","additions":63,"deletions":0,"binary":false,"changes":63,"status":"added"}]}