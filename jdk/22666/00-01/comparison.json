{"files":[{"patch":"@@ -32,7 +32,0 @@\n-\/*\n- * The division 2 \/ i4 requires a non-zero check. As the result is an array access, it will be the input to a range\n- * check. Loop predication will try to move the range check and the division to right before the loop as the division\n- * appears to be invariant (i4 is always 0). However, the division is not truly invariant as it requires the zero\n- * check for i4 that can throw an exception. The bug fixed in 8331717 caused the division to still be moved before the\n- * for loop with the range check.\n- *\/\n@@ -41,0 +34,2 @@\n+    static volatile long lFld;\n+    static int iFld;\n@@ -46,0 +41,3 @@\n+        for (int i = 0; i < 10000; i++) {\n+            test2();\n+        }\n@@ -48,0 +46,7 @@\n+    \/*\n+     * The division 2 \/ i4 requires a non-zero check. As the result is an array access, it will be the input to a range\n+     * check. Loop predication will try to move the range check and the division to right before the loop as the division\n+     * appears to be invariant (i4 is always 0). However, the division is not truly invariant as it requires the zero\n+     * check for i4 that can throw an exception. The bug fixed in 8331717 caused the division to still be moved before the\n+     * for loop with the range check.\n+     *\/\n@@ -60,0 +65,24 @@\n+\n+    \/*\n+     * Loop predication will try to move 3 \/ y (input to the range check for bArr[x \/ 30]) before its containing for loop\n+     * but it may not as y must be zero-checked. The same problem as above occurred before the fix in 8331717.\n+     *\/\n+    static void test2() {\n+        int x = 0;\n+        int y = iFld;\n+        long lArr[] = new long[400];\n+        boolean bArr[] = new boolean[400];\n+        for (int i = 0; i < 10000; i++) {\n+            for (int j = 1; j < 13; j++) {\n+                for (int k = 1; k < 2; k++) {\n+                    lFld = 0;\n+                    lArr[1] = 7;\n+                    try {\n+                        x = 3 \/ y;\n+                    } catch (ArithmeticException a_e) {\n+                    }\n+                    bArr[x \/ 30] = true;\n+                }\n+            }\n+        }\n+    }\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLoopPredicationDivZeroCheck.java","additions":36,"deletions":7,"binary":false,"changes":43,"status":"modified"},{"patch":"@@ -1,63 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * @test\n- * @bug 8331717\n- * @summary C2: Crash with SIGFPE\n- *\n- * @run main\/othervm -XX:CompileCommand=compileonly,*TestLoopPredicationDivZeroCheck2*::* -XX:-TieredCompilation -Xbatch TestLoopPredicationDivZeroCheck2\n- *\/\n-\n-\/*\n- * Loop predication will try to move 3 \/ y (input to the range check for bArr[x \/ 30]) before its containing for loop\n- * but it may not as y must be zero-checked. See TestLoopPredicationDivZeroCheck for a more detailed explanation.\n- *\/\n-public class TestLoopPredicationDivZeroCheck2 {\n-    static volatile long lFld;\n-    static int iFld;\n-\n-    public static void main(String[] strArr) {\n-        test();\n-    }\n-\n-    static void test() {\n-        int x = 0;\n-        int y = iFld;\n-        long lArr[] = new long[400];\n-        boolean bArr[] = new boolean[400];\n-        for (int i = 0; i < 10000; i++) {\n-            for (int j = 1; j < 13; j++) {\n-                for (int k = 1; k < 2; k++) {\n-                    lFld = 0;\n-                    lArr[1] = 7;\n-                    try {\n-                        x = 3 \/ y;\n-                    } catch (ArithmeticException a_e) {\n-                    }\n-                    bArr[x \/ 30] = true;\n-                }\n-            }\n-        }\n-    }\n-}\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestLoopPredicationDivZeroCheck2.java","additions":0,"deletions":63,"binary":false,"changes":63,"status":"deleted"}]}