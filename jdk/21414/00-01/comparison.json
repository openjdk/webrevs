{"files":[{"patch":"@@ -2485,7 +2485,7 @@\n-const TypeVect *TypeVect::VECTA = nullptr; \/\/ vector length agnostic\n-const TypeVect *TypeVect::VECTS = nullptr; \/\/  32-bit vectors\n-const TypeVect *TypeVect::VECTD = nullptr; \/\/  64-bit vectors\n-const TypeVect *TypeVect::VECTX = nullptr; \/\/ 128-bit vectors\n-const TypeVect *TypeVect::VECTY = nullptr; \/\/ 256-bit vectors\n-const TypeVect *TypeVect::VECTZ = nullptr; \/\/ 512-bit vectors\n-const TypeVect *TypeVect::VECTMASK = nullptr; \/\/ predicate\/mask vector\n+const TypeVect* TypeVect::VECTA = nullptr; \/\/ vector length agnostic\n+const TypeVect* TypeVect::VECTS = nullptr; \/\/  32-bit vectors\n+const TypeVect* TypeVect::VECTD = nullptr; \/\/  64-bit vectors\n+const TypeVect* TypeVect::VECTX = nullptr; \/\/ 128-bit vectors\n+const TypeVect* TypeVect::VECTY = nullptr; \/\/ 256-bit vectors\n+const TypeVect* TypeVect::VECTZ = nullptr; \/\/ 512-bit vectors\n+const TypeVect* TypeVect::VECTMASK = nullptr; \/\/ predicate\/mask vector\n@@ -2521,1 +2521,1 @@\n-const TypeVect *TypeVect::makemask(BasicType elem_bt, uint length) {\n+const TypeVect* TypeVect::makemask(BasicType elem_bt, uint length) {\n@@ -2531,1 +2531,2 @@\n-\/\/ Compute the MEET of two types. It returns a new Type object.\n+\/\/ Compute the MEET of two types. Since each TypeVect is the only instance of\n+\/\/ its species, meetting often returns itself\n@@ -2546,7 +2547,1 @@\n-  case VectorMask: {\n-    const TypeVectMask* v = t->is_vectmask();\n-    assert(base() == v->base(), \"\");\n-    assert(length() == v->length(), \"\");\n-    assert(element_basic_type() == v->element_basic_type(), \"\");\n-    return this;\n-  }\n+  case VectorMask:\n@@ -2572,2 +2567,2 @@\n-\/\/ Dual: compute field-by-field dual\n-const Type *TypeVect::xdual() const {\n+\/\/ Since each TypeVect is the only instance of its species, it is self-dual\n+const Type* TypeVect::xdual() const {\n@@ -2579,1 +2574,1 @@\n-bool TypeVect::eq(const Type *t) const {\n+bool TypeVect::eq(const Type* t) const {\n@@ -2606,1 +2601,1 @@\n-void TypeVect::dump2(Dict &d, uint depth, outputStream *st) const {\n+void TypeVect::dump2(Dict& d, uint depth, outputStream* st) const {\n","filename":"src\/hotspot\/share\/opto\/type.cpp","additions":15,"deletions":20,"binary":false,"changes":35,"status":"modified"},{"patch":"@@ -801,1 +801,1 @@\n-  virtual bool eq(const Type *t) const;\n+  virtual bool eq(const Type* t) const;\n","filename":"src\/hotspot\/share\/opto\/type.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}