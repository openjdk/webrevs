{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,1 +268,3 @@\n-            buf.position(offset + blockMultipleLength);\n+            \/\/ Advance the buffer position to account for processing on\n+            \/\/ the underlying array.\n+            buf.position(buf.position() + blockMultipleLength);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/Poly1305.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,187 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8366833\n+ * @summary Poly1305 does not always correctly update position for array-backed\n+ *          ByteBuffers after processMultipleBlocks\n+ * @run main UpdateAADTest\n+ *\/\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.KeyGenerator;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+import javax.crypto.spec.SecretKeySpec;\n+import java.lang.foreign.MemorySegment;\n+import java.nio.ByteBuffer;\n+import java.nio.charset.StandardCharsets;\n+import java.security.GeneralSecurityException;\n+import java.security.SecureRandom;\n+import java.util.HexFormat;\n+\n+public class UpdateAADTest {\n+    private static final SecureRandom RAND;\n+    private static final KeyGenerator CC20GEN;\n+    private static final HexFormat HEX = HexFormat.of();\n+\n+    private static final byte[] TEST_KEY_BYTES = HEX.parseHex(\n+            \"3cb1283912536e4108c3094dc2940d0d020afbd7701de267bbfb359bc7d54dd7\");\n+    private static final byte[] TEST_NONCE_BYTES = HEX.parseHex(\n+            \"9bd647a43b6fa7826e2cc26d\");\n+    private static final byte[] TEST_AAD_BYTES =\n+            \"This is a bunch of additional data to throw into the mix.\".\n+                    getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] TEST_INPUT_BYTES =\n+        \"This is a plaintext message\".getBytes(StandardCharsets.UTF_8);\n+    private static final byte[] TEST_CT_BYTES = HEX.parseHex(\n+            \"8536c999809f4b9d6a1594ee1084c751d1bd8a991e6a4b4ac26386f04b9a1303\" +\n+            \"f40cbe6788d72af2d0c617\");\n+    private static final ByteBuffer EXPOUTBUF = ByteBuffer.wrap(TEST_CT_BYTES);\n+\n+    static {\n+        try {\n+            RAND = new SecureRandom();\n+            CC20GEN = KeyGenerator.getInstance(\"ChaCha20\");\n+        } catch (GeneralSecurityException gse) {\n+            throw new RuntimeException(\"Failed to init static JCE components\",\n+                    gse);\n+        }\n+    }\n+\n+    public interface TestAction {\n+        void runTest(ByteBuffer buffer) throws Exception;\n+    }\n+\n+    public static void main(final String[] args) throws Exception {\n+        ByteBuffer twoKBuf = ByteBuffer.allocate(2048);\n+        ByteBuffer nonBABuf = ByteBuffer.allocate(1329);\n+\n+        System.out.println(\"----- Test 1: Baseline test -----\");\n+        System.out.println(\"Make an array backed buffer that is 16-byte \" +\n+                           \"aligned, treat all data as AAD and feed it to \" +\n+                           \" updateAAD.\");\n+        aadUpdateTest.runTest(twoKBuf);\n+\n+        System.out.println(\"----- Test 2: Non Block Aligned Offset -----\");\n+        System.out.println(\"Use the same buffer, but place the offset such \" +\n+                           \"that the remaining data is not block aligned.\");\n+        aadUpdateTest.runTest(twoKBuf.position(395));\n+\n+        System.out.println(\"----- Test 3: Non Block Aligned Buf\/Off -----\");\n+        System.out.println(\"Make a buffer of non-block aligned size with an \" +\n+                           \"offset that keeps the remaining data non-block \" +\n+                           \"aligned.\");\n+        aadUpdateTest.runTest(nonBABuf.position(602));\n+\n+        System.out.println(\"----- Test 4: Aligned Buffer Slice -----\");\n+        System.out.println(\"Use a buffer of block aligned size, but slice \" +\n+                           \"the buffer such that the slice offset is part \" +\n+                           \"way into the original buffer.\");\n+        aadUpdateTest.runTest(twoKBuf.rewind().slice(1024,1024).position(42));\n+\n+        System.out.println(\"----- Test 5: Non-Aligned Buffer Slice -----\");\n+        System.out.println(\"Try the same test as #4, this time with \" +\n+                           \"non-block aligned buffers\/slices.\");\n+        aadUpdateTest.runTest(nonBABuf.rewind().slice(347, 347).position(86));\n+\n+        System.out.println(\"----- Test 6: MemorySegment Buffer -----\");\n+        System.out.println(\"Make a ByteBuffer from an array-backed \" +\n+                           \"MemorySegment, and try updating\");\n+        MemorySegment mseg = MemorySegment.ofArray(new byte[2048]);\n+        ByteBuffer msegBuf = mseg.asByteBuffer();\n+        aadUpdateTest.runTest(msegBuf.position(55));\n+\n+        System.out.println(\"----- Test 7: Buffer of MemorySegment Slice -----\");\n+        System.out.println(\"Use a slice from the MemorySegment and create a \" +\n+                           \"buffer from that for testing\");\n+        MemorySegment msegSlice = mseg.asSlice(1024);\n+        aadUpdateTest.runTest(msegSlice.asByteBuffer().position(55));\n+\n+        System.out.println(\"----- Test 8: MemorySegment Buffer Slice -----\");\n+        System.out.println(\"Create a slice from the ByteBuffer from the \" +\n+                           \"original MemorySegment.\");\n+        aadUpdateTest.runTest(msegBuf.rewind().slice(1024, 1024));\n+\n+        System.out.println(\"Test vector processing\");\n+        System.out.println(\"----------------------\");\n+        System.out.println(\"----- Test 9: AAD + Plaintext on buffer ------\");\n+        System.out.println(\"Place the AAD, followed by plaintext and verify \" +\n+                           \"the ciphertext\");\n+        \/\/ Create a ByteBuffer where the AAD and plaintext actually sit\n+        \/\/ somewhere in the middle of the underlying array, with non-test-vector\n+        \/\/ memory on either side of the data.\n+        ByteBuffer vectorBuf = ByteBuffer.allocate(1024).position(600).\n+                put(TEST_AAD_BYTES).put(TEST_INPUT_BYTES).flip().position(600);\n+        vectorTest.runTest(vectorBuf);\n+\n+        System.out.println(\"----- Test 10: AAD + Plaintext on slice -----\");\n+        System.out.println(\"Perform the same test, this time on a slice\" +\n+                           \"of the test vector buffer\");\n+        ByteBuffer vectorSlice = vectorBuf.slice(600,\n+                TEST_AAD_BYTES.length + TEST_INPUT_BYTES.length);\n+        vectorTest.runTest(vectorSlice);\n+    }\n+\n+    \/\/ Simple test callback for taking a ByteBuffer and throwing all\n+    \/\/ remaining bytes into an updateAAD call.\n+    public static TestAction aadUpdateTest = buffer -> {\n+        SecretKey key = CC20GEN.generateKey();\n+        byte[] nonce = new byte[12];\n+        RAND.nextBytes(nonce);\n+\n+        Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305\");\n+        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(nonce));\n+\n+        cipher.updateAAD(buffer);\n+        \/\/ Per the API the buffer's position and limit should be equal\n+        if (buffer.position() != buffer.limit()) {\n+            throw new RuntimeException(\"Buffer position and limit \" +\n+                    \"should be equal but are not: p = \" +\n+                    buffer.position() + \", l = \" + buffer.limit());\n+        }\n+    };\n+\n+    \/\/ Test callback for making sure that the updateAAD method, when\n+    \/\/ put in with a complete encryption operation still gets the\n+    \/\/ expected answer.\n+    public static TestAction vectorTest = buffer -> {\n+        Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305\");\n+        cipher.init(Cipher.ENCRYPT_MODE,\n+                new SecretKeySpec(TEST_KEY_BYTES, \"ChaCha20\"),\n+                new IvParameterSpec(TEST_NONCE_BYTES));\n+        ByteBuffer outbuf = ByteBuffer.allocate(cipher.getOutputSize(\n+                TEST_INPUT_BYTES.length));\n+\n+        \/\/ Adjust the limit to be the end of the aad\n+        int origLim = buffer.limit();\n+        buffer.limit(buffer.position() + TEST_AAD_BYTES.length);\n+        cipher.updateAAD(buffer);\n+        buffer.limit(origLim);\n+        cipher.doFinal(buffer, outbuf);\n+        if (!outbuf.flip().equals(EXPOUTBUF)) {\n+            throw new RuntimeException(\"Output data mismatch\");\n+        }\n+    };\n+}\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/ChaCha20\/UpdateAADTest.java","additions":187,"deletions":0,"binary":false,"changes":187,"status":"added"}]}