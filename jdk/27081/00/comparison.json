{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -268,1 +268,3 @@\n-            buf.position(offset + blockMultipleLength);\n+            \/\/ Advance the buffer position to account for processing on\n+            \/\/ the underlying array.\n+            buf.position(buf.position() + blockMultipleLength);\n","filename":"src\/java.base\/share\/classes\/com\/sun\/crypto\/provider\/Poly1305.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -0,0 +1,131 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8366833\n+ * @summary Poly1305 does not always correctly update position for array-backed\n+ *          ByteBuffers after processMultipleBlocks\n+ * @run main UpdateAADTest\n+ *\/\n+\n+import javax.crypto.Cipher;\n+import javax.crypto.KeyGenerator;\n+import javax.crypto.SecretKey;\n+import javax.crypto.spec.IvParameterSpec;\n+import java.nio.ByteBuffer;\n+import java.security.GeneralSecurityException;\n+import java.security.SecureRandom;\n+import java.util.Objects;\n+\n+public class UpdateAADTest {\n+    private static final SecureRandom RAND;\n+    private static final KeyGenerator CC20GEN;\n+\n+    static {\n+        try {\n+            RAND = new SecureRandom();\n+            CC20GEN = KeyGenerator.getInstance(\"ChaCha20\");\n+        } catch (GeneralSecurityException gse) {\n+            throw new RuntimeException(\"Failed to init static JCE components\",\n+                    gse);\n+        }\n+    }\n+\n+    public static void main(final String[] args) throws Exception {\n+        ByteBuffer twoKBuf = ByteBuffer.allocate(2048);\n+        ByteBuffer nonBABuf = ByteBuffer.allocate(1329);\n+\n+        System.out.println(\"----- Test 1: Baseline test -----\");\n+        System.out.println(\"Make an array backed buffer that is 16-byte \" +\n+                           \"aligned, treat all data as AAD and feed it to \" +\n+                           \" updateAAD.\");\n+        new AADUpdateTest(twoKBuf, true).run();\n+\n+        System.out.println(\"----- Test 2: Non Block Aligned Offset -----\");\n+        System.out.println(\"Use the same buffer, but place the offset such \" +\n+                           \"that the remaining data is not block aligned.\");\n+        new AADUpdateTest(twoKBuf.position(395), true).run();\n+\n+        System.out.println(\"----- Test 3: Non Block Aligned Buf\/Off -----\");\n+        System.out.println(\"Make a buffer of non-block aligned size with an \" +\n+                           \"offset that keeps the remaining data non-block \" +\n+                           \"aligned.\");\n+        new AADUpdateTest(nonBABuf.position(602), true).run();\n+\n+        System.out.println(\"----- Test 4: Aligned Buffer Slice -----\");\n+        System.out.println(\"Use a buffer of block aligned size, but slice \" +\n+                           \"the buffer such that the slice offset is part \" +\n+                           \"way into the original buffer.\");\n+        new AADUpdateTest(twoKBuf.rewind().slice(1024,1024).position(42),\n+                true).run();\n+\n+        \/\/ Test 5: Try the same test, this time with non-block aligned\n+        \/\/ buffers\/slices.\n+        System.out.println(\"----- Test 5: Non-Aligned Buffer Slice -----\");\n+        System.out.println(\"Try the same test as #4, this time with \" +\n+                           \"non-block aligned buffers\/slices.\");\n+        new AADUpdateTest(nonBABuf.rewind().slice(347, 347).position(86),\n+                true).run();\n+    }\n+\n+    public static class AADUpdateTest implements Runnable {\n+        private final ByteBuffer buffer;\n+        private final boolean expectedPass;\n+\n+        AADUpdateTest(ByteBuffer buf, boolean expPass) {\n+            buffer = Objects.requireNonNull(buf);\n+            expectedPass = expPass;\n+        }\n+\n+        @Override\n+        public void run() {\n+            Cipher cipher;\n+            try {\n+                SecretKey key = CC20GEN.generateKey();\n+                byte[] nonce = new byte[12];\n+                RAND.nextBytes(nonce);\n+\n+                cipher = Cipher.getInstance(\"ChaCha20-Poly1305\");\n+                cipher.init(Cipher.ENCRYPT_MODE, key,\n+                        new IvParameterSpec(nonce));\n+            } catch (GeneralSecurityException gse) {\n+                throw new RuntimeException(\"Failed during test setup\", gse);\n+            }\n+\n+            try {\n+                cipher.updateAAD(buffer);\n+                if (!expectedPass) {\n+                    throw new RuntimeException(\n+                            \"Expected failing test did not throw exception\");\n+                }\n+            } catch (Exception exc) {\n+                if (expectedPass) {\n+                    throw new RuntimeException(\n+                            \"FAIL: Expected passing test failed\", exc);\n+                }\n+            }\n+        }\n+    }\n+}\n+\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/ChaCha20\/UpdateAADTest.java","additions":131,"deletions":0,"binary":false,"changes":131,"status":"added"}]}