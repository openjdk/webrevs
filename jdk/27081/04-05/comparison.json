{"files":[{"patch":"@@ -74,1 +74,1 @@\n-        void runTest(ByteBuffer buffer);\n+        void runTest(ByteBuffer buffer) throws Exception;\n@@ -150,18 +150,13 @@\n-        try {\n-            SecretKey key = CC20GEN.generateKey();\n-            byte[] nonce = new byte[12];\n-            RAND.nextBytes(nonce);\n-\n-            Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305\");\n-            cipher.init(Cipher.ENCRYPT_MODE, key,\n-                    new IvParameterSpec(nonce));\n-\n-            cipher.updateAAD(buffer);\n-            \/\/ Per the API the buffer's position and limit should be equal\n-            if (buffer.position() != buffer.limit()) {\n-                throw new RuntimeException(\"Buffer position and limit \" +\n-                        \"should be equal but are not: p = \" +\n-                        buffer.position() + \", l = \" + buffer.limit());\n-            }\n-        } catch (GeneralSecurityException gse) {\n-            throw new RuntimeException(\"Failed during test setup\", gse);\n+        SecretKey key = CC20GEN.generateKey();\n+        byte[] nonce = new byte[12];\n+        RAND.nextBytes(nonce);\n+\n+        Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305\");\n+        cipher.init(Cipher.ENCRYPT_MODE, key, new IvParameterSpec(nonce));\n+\n+        cipher.updateAAD(buffer);\n+        \/\/ Per the API the buffer's position and limit should be equal\n+        if (buffer.position() != buffer.limit()) {\n+            throw new RuntimeException(\"Buffer position and limit \" +\n+                    \"should be equal but are not: p = \" +\n+                    buffer.position() + \", l = \" + buffer.limit());\n@@ -175,19 +170,15 @@\n-        try {\n-            Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305\");\n-            cipher.init(Cipher.ENCRYPT_MODE,\n-                    new SecretKeySpec(TEST_KEY_BYTES, \"ChaCha20\"),\n-                    new IvParameterSpec(TEST_NONCE_BYTES));\n-            ByteBuffer outbuf = ByteBuffer.allocate(\n-                    cipher.getOutputSize(TEST_INPUT_BYTES.length));\n-\n-            \/\/ Adjust the limit to be the end of the aad\n-            int origLim = buffer.limit();\n-            buffer.limit(buffer.position() + TEST_AAD_BYTES.length);\n-            cipher.updateAAD(buffer);\n-            buffer.limit(origLim);\n-            cipher.doFinal(buffer, outbuf);\n-            if (!outbuf.flip().equals(EXPOUTBUF)) {\n-                throw new RuntimeException(\"Output data mismatch\");\n-            }\n-        } catch (GeneralSecurityException gse) {\n-            throw new RuntimeException(\"Failed during test setup\", gse);\n+        Cipher cipher = Cipher.getInstance(\"ChaCha20-Poly1305\");\n+        cipher.init(Cipher.ENCRYPT_MODE,\n+                new SecretKeySpec(TEST_KEY_BYTES, \"ChaCha20\"),\n+                new IvParameterSpec(TEST_NONCE_BYTES));\n+        ByteBuffer outbuf = ByteBuffer.allocate(cipher.getOutputSize(\n+                TEST_INPUT_BYTES.length));\n+\n+        \/\/ Adjust the limit to be the end of the aad\n+        int origLim = buffer.limit();\n+        buffer.limit(buffer.position() + TEST_AAD_BYTES.length);\n+        cipher.updateAAD(buffer);\n+        buffer.limit(origLim);\n+        cipher.doFinal(buffer, outbuf);\n+        if (!outbuf.flip().equals(EXPOUTBUF)) {\n+            throw new RuntimeException(\"Output data mismatch\");\n","filename":"test\/jdk\/com\/sun\/crypto\/provider\/Cipher\/ChaCha20\/UpdateAADTest.java","additions":29,"deletions":38,"binary":false,"changes":67,"status":"modified"}]}