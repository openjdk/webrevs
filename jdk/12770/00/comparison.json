{"files":[{"patch":"@@ -160,1 +160,2 @@\n-        System.Logger log = getRuntimeExitLogger(); \/\/ Locate the logger without holding the lock;\n+        logRuntimeExit(status);         \/\/ Log without holding the lock;\n+\n@@ -165,5 +166,0 @@\n-            if (log != null) {\n-                Throwable throwable = new Throwable(\"Runtime.exit(\" + status + \")\");\n-                log.log(System.Logger.Level.DEBUG, \"Runtime.exit() called with status: \" + status,\n-                        throwable);\n-            }\n@@ -176,2 +172,2 @@\n-    \/* Locate and return the logger for Shutdown.exit, if it is functional and DEBUG enabled.\n-     * Exceptions should not prevent System.exit; the exception is printed and otherwise ignored.\n+    \/* Locate the logger and log the Runtime.exit(status).\n+     * Catch and ignore any and all exceptions.\n@@ -179,1 +175,1 @@\n-    private static System.Logger getRuntimeExitLogger() {\n+    private static void logRuntimeExit(int status) {\n@@ -182,1 +178,5 @@\n-            return (log.isLoggable(System.Logger.Level.DEBUG)) ? log : null;\n+            if (log.isLoggable(System.Logger.Level.DEBUG)) {\n+                Throwable throwable = new Throwable(\"Runtime.exit(\" + status + \")\");\n+                log.log(System.Logger.Level.DEBUG, \"Runtime.exit() called with status: \" + status,\n+                        throwable);\n+            }\n@@ -184,2 +184,6 @@\n-            \/\/ Exceptions from locating the Logger are printed but do not prevent exit\n-            System.err.println(\"Runtime.exit() log finder failed with: \" + throwable.getMessage());\n+            try {\n+                \/\/ Exceptions from the Logger are printed but do not prevent exit\n+                System.err.println(\"Runtime.exit() logging failed: \" + throwable.getMessage());\n+            } catch (Throwable throwable2) {\n+                \/\/ Ignore\n+            }\n@@ -187,1 +191,0 @@\n-        return null;\n@@ -190,1 +193,0 @@\n-\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Shutdown.java","additions":16,"deletions":14,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -29,1 +29,3 @@\n-import java.util.Optional;\n+import java.util.logging.LogRecord;\n+import java.util.logging.Logger;\n+import java.util.logging.StreamHandler;\n@@ -50,0 +52,2 @@\n+    private static Object HOLD_LOGGER;\n+\n@@ -56,0 +60,3 @@\n+        if (System.getProperty(\"ThrowingHandler\") != null) {\n+            HOLD_LOGGER = ThrowingHandler.installHandler();\n+        }\n@@ -67,1 +74,2 @@\n-                        Path.of(TEST_SRC, \"ExitLogging-FINE.properties\").toString()), 1, true),\n+                        Path.of(TEST_SRC, \"ExitLogging-FINE.properties\").toString()), 1,\n+                        \"Runtime.exit() called with status: 1\"),\n@@ -70,1 +78,2 @@\n-                        Path.of(TEST_SRC, \"ExitLogging-INFO.properties\").toString()), 2, false),\n+                        Path.of(TEST_SRC, \"ExitLogging-INFO.properties\").toString()), 2,\n+                        \"\"),\n@@ -73,1 +82,2 @@\n-                        \"-Djdk.system.logger.level=DEBUG\"), 3, true),\n+                        \"-Djdk.system.logger.level=DEBUG\"), 3,\n+                        \"Runtime.exit() called with status: 3\"),\n@@ -75,2 +85,7 @@\n-                Arguments.of(List.of(), 4, false)\n-        );\n+                Arguments.of(List.of(), 4, \"\"),\n+                \/\/ Throwing Handler\n+                Arguments.of(List.of(\"-DThrowingHandler\",\n+                        \"-Djava.util.logging.config.file=\" +\n+                        Path.of(TEST_SRC, \"ExitLogging-FINE.properties\").toString()), 5,\n+                        \"Runtime.exit() logging failed: Exception in publish\")\n+                );\n@@ -83,1 +98,1 @@\n-     * @param shouldLog true if the log should contain the message expected from Runtime.exit(status)\n+     * @param expectMessage log should contain the message\n@@ -87,1 +102,1 @@\n-    public void checkLogger(List<String> logProps, int status, boolean shouldLog) {\n+    public void checkLogger(List<String> logProps, int status, String expectMessage) {\n@@ -101,4 +116,7 @@\n-                final String expected = \"Runtime.exit() called with status: \" + status;\n-                Optional<String> found = lines.stream().filter(s -> s.contains(expected)).findFirst();\n-                if (found.isPresent() != shouldLog) {\n-                    System.err.println(\"---- Process output begin\");\n+                boolean match = (expectMessage.isEmpty())\n+                        ? lines.size() == 0\n+                        : lines.stream().filter(s -> s.contains(expectMessage)).findFirst().isPresent();\n+                if (!match) {\n+                    \/\/ Output lines for debug\n+                    System.err.println(\"Expected: \\\"\" + expectMessage + \"\\\"\");\n+                    System.err.println(\"---- Actual output begin\");\n@@ -106,1 +124,1 @@\n-                    System.err.println(\"---- Process output end\");\n+                    System.err.println(\"---- Actual output end\");\n@@ -116,0 +134,19 @@\n+\n+    \/**\n+     * A LoggingHandler that throws an Exception.\n+     *\/\n+    public static class ThrowingHandler extends StreamHandler {\n+\n+        \/\/ Install this handler for java.lang.Runtime\n+        public static Logger installHandler() {\n+            Logger logger = Logger.getLogger(\"java.lang.Runtime\");\n+            logger.addHandler(new ThrowingHandler());\n+            return logger;\n+        }\n+\n+        @Override\n+        public synchronized void publish(LogRecord record) {\n+            super.publish(record);\n+            throw new RuntimeException(\"Exception in publish\");\n+        }\n+    }\n","filename":"test\/jdk\/java\/lang\/RuntimeTests\/RuntimeExitLogTest.java","additions":50,"deletions":13,"binary":false,"changes":63,"status":"modified"}]}