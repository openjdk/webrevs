{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2011, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,0 +48,1 @@\n+import javax.swing.ListModel;\n@@ -138,3 +139,6 @@\n-            getDelegate().setSkipStateChangedEvent(true);\n-            getDelegate().getView().setSelectedIndex(index);\n-            getDelegate().setSkipStateChangedEvent(false);\n+            ListModel<String> model = getDelegate().getModel();\n+            if (index >= 0 && index < model.getSize()) {\n+                getDelegate().setSkipStateChangedEvent(true);\n+                getDelegate().getView().addSelectionInterval(index, index);\n+                getDelegate().setSkipStateChangedEvent(false);\n+            }\n@@ -147,2 +151,1 @@\n-            getDelegate().getView().getSelectionModel().\n-                    removeSelectionInterval(index, index);\n+            getDelegate().getView().removeSelectionInterval(index, index);\n","filename":"src\/java.desktop\/macosx\/classes\/sun\/lwawt\/LWListPeer.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -153,0 +153,1 @@\n+java\/awt\/List\/SelectInvalid.java 8369455 linux-all\n","filename":"test\/jdk\/ProblemList.txt","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -0,0 +1,176 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.List;\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 8369327\n+ * @summary Test awt list deselection methods\n+ *\/\n+public final class DeselectionUnitTest {\n+\n+    public static void main(String[] args) {\n+        \/\/ non-displayable list\n+        testSingleMode(null);\n+        testMultipleMode(null);\n+        testInvalidDeselection(null);\n+        testEmptyListDeselection(null);\n+\n+        \/\/ displayable list\n+        testDisplayable(DeselectionUnitTest::testSingleMode);\n+        testDisplayable(DeselectionUnitTest::testMultipleMode);\n+        testDisplayable(DeselectionUnitTest::testInvalidDeselection);\n+        testDisplayable(DeselectionUnitTest::testEmptyListDeselection);\n+    }\n+\n+    interface Test {\n+        void execute(Frame frame);\n+    }\n+\n+    private static void testDisplayable(Test test) {\n+        Frame frame = new Frame();\n+        try {\n+            frame.setSize(300, 200);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+            test.execute(frame);\n+        } finally {\n+            frame.dispose();\n+        }\n+    }\n+\n+    private static void testSingleMode(Frame frame) {\n+        List list = new List(4, false);\n+        if (frame != null) {\n+            frame.add(list);\n+        }\n+        list.add(\"Item1\");\n+        list.add(\"Item2\");\n+        list.add(\"Item3\");\n+\n+        \/\/ Select and deselect single item\n+        list.select(1);\n+        assertTrue(list.isIndexSelected(1));\n+        list.deselect(1);\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(0, list.getSelectedIndexes().length);\n+        assertFalse(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertFalse(list.isIndexSelected(2));\n+\n+        \/\/ Deselect non-selected item (should be no-op)\n+        list.select(0);\n+        list.deselect(2);\n+        assertEquals(0, list.getSelectedIndex());\n+        assertTrue(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertFalse(list.isIndexSelected(2));\n+    }\n+\n+    private static void testMultipleMode(Frame frame) {\n+        List list = new List(4, true);\n+        if (frame != null) {\n+            frame.add(list);\n+        }\n+        list.add(\"Item1\");\n+        list.add(\"Item2\");\n+        list.add(\"Item3\");\n+\n+        \/\/ Select multiple items and deselect one\n+        list.select(0);\n+        list.select(1);\n+        list.select(2);\n+        assertEquals(3, list.getSelectedIndexes().length);\n+\n+        list.deselect(1);\n+        assertEquals(2, list.getSelectedIndexes().length);\n+        assertTrue(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertTrue(list.isIndexSelected(2));\n+\n+        \/\/ Deselect all remaining\n+        list.deselect(0);\n+        list.deselect(2);\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(0, list.getSelectedIndexes().length);\n+        assertFalse(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertFalse(list.isIndexSelected(2));\n+    }\n+\n+    private static void testInvalidDeselection(Frame frame) {\n+        List list = new List(4, false);\n+        if (frame != null) {\n+            frame.add(list);\n+        }\n+        list.add(\"Item1\");\n+        list.add(\"Item2\");\n+        list.add(\"Item3\");\n+\n+        \/\/ Deselect invalid indices (should be no-op)\n+        list.select(0);\n+        list.deselect(-1);\n+        list.deselect(5);\n+        assertEquals(0, list.getSelectedIndex());\n+        assertTrue(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertFalse(list.isIndexSelected(2));\n+    }\n+\n+    private static void testEmptyListDeselection(Frame frame) {\n+        List list = new List();\n+        if (frame != null) {\n+            frame.add(list);\n+        }\n+\n+        \/\/ Deselect on empty list (should be no-op)\n+        list.deselect(0);\n+        list.deselect(-1);\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(0, list.getSelectedIndexes().length);\n+        assertFalse(list.isIndexSelected(0));\n+    }\n+\n+    private static void assertEquals(int expected, int actual) {\n+        if (expected != actual) {\n+            System.err.println(\"Expected: \" + expected);\n+            System.err.println(\"Actual: \" + actual);\n+            throw new RuntimeException(\"Values are not equal\");\n+        }\n+    }\n+\n+    private static void assertTrue(boolean condition) {\n+        if (!condition) {\n+            throw new RuntimeException(\"Expected true but got false\");\n+        }\n+    }\n+\n+    private static void assertFalse(boolean condition) {\n+        if (condition) {\n+            throw new RuntimeException(\"Expected false but got true\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/DeselectionUnitTest.java","additions":176,"deletions":0,"binary":false,"changes":176,"status":"added"},{"patch":"@@ -0,0 +1,228 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.List;\n+import jdk.test.lib.Platform;\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 8369327\n+ * @library \/java\/awt\/regtesthelpers \/test\/lib\n+ * @summary Test awt list selection of invalid indexes\n+ *\/\n+public final class SelectInvalid {\n+\n+    \/**\n+     * A special index on windows, selects or deselects all elements.\n+     *\/\n+    private static final int WINDOWS_INVALID = -1;\n+\n+    \/**\n+     * The list of invalid indexes, their usages should be noop.\n+     *\/\n+    private static final int[] INVALID = {\n+            WINDOWS_INVALID, Integer.MIN_VALUE, -100, 3, 100, Integer.MAX_VALUE\n+    };\n+\n+    public static void main(String[] args) {\n+        for (int i : INVALID) {\n+            if (Platform.isWindows() && i == WINDOWS_INVALID) {\n+                testDisplayable(SelectInvalid::testWinDeselectAllSingleMode, i);\n+                testDisplayable(SelectInvalid::testWinSelectAllMultipleMode, i);\n+            } else {\n+                testDisplayable(SelectInvalid::testSingleMode, i);\n+                testDisplayable(SelectInvalid::testMultipleMode, i);\n+                testDisplayable(SelectInvalid::testEmptySelection, i);\n+            }\n+        }\n+    }\n+\n+    interface Test {\n+        void execute(Frame frame, int invalid);\n+    }\n+\n+    private static void testDisplayable(Test test, int invalid) {\n+        Frame frame = new Frame();\n+        try {\n+            frame.setSize(300, 200);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+            test.execute(frame, invalid);\n+        } finally {\n+            frame.dispose();\n+        }\n+    }\n+\n+    private static void testSingleMode(Frame frame, int invalid) {\n+        List list = new List(4, false);\n+        frame.add(list);\n+        list.add(\"Item1\");\n+        list.add(\"Item2\");\n+        list.add(\"Item3\");\n+\n+        \/\/ Test initial state\n+        list.select(invalid);\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(0, list.getSelectedIndexes().length);\n+        assertFalse(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertFalse(list.isIndexSelected(2));\n+\n+        \/\/ Test single selection\n+        list.select(1);\n+        list.select(invalid);\n+        assertEquals(1, list.getSelectedIndex());\n+        assertEquals(1, list.getSelectedIndexes().length);\n+        assertEquals(1, list.getSelectedIndexes()[0]);\n+        assertFalse(list.isIndexSelected(0));\n+        assertTrue(list.isIndexSelected(1));\n+        assertFalse(list.isIndexSelected(2));\n+\n+        \/\/ Test selection replacement in single mode\n+        list.select(2);\n+        list.select(invalid);\n+        assertEquals(2, list.getSelectedIndex());\n+        assertEquals(1, list.getSelectedIndexes().length);\n+        assertEquals(2, list.getSelectedIndexes()[0]);\n+        assertFalse(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertTrue(list.isIndexSelected(2));\n+    }\n+\n+    private static void testMultipleMode(Frame frame, int invalid) {\n+        List list = new List(4, true);\n+        frame.add(list);\n+        list.add(\"Item1\");\n+        list.add(\"Item2\");\n+        list.add(\"Item3\");\n+\n+        \/\/ Test multiple selections\n+        list.select(0);\n+        list.select(2);\n+        list.select(invalid);\n+        \/\/ Returns -1 for multiple selections\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(2, list.getSelectedIndexes().length);\n+        assertTrue(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertTrue(list.isIndexSelected(2));\n+\n+        \/\/ Test partial deselection\n+        list.deselect(0);\n+        list.select(invalid);\n+        \/\/ Single selection remaining\n+        assertEquals(2, list.getSelectedIndex());\n+        assertEquals(1, list.getSelectedIndexes().length);\n+        assertEquals(2, list.getSelectedIndexes()[0]);\n+        assertFalse(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertTrue(list.isIndexSelected(2));\n+    }\n+\n+    private static void testEmptySelection(Frame frame, int invalid) {\n+        List list = new List();\n+        frame.add(list);\n+        list.select(invalid);\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(0, list.getSelectedIndexes().length);\n+        assertFalse(list.isIndexSelected(0));\n+    }\n+\n+    private static void assertEquals(int expected, int actual) {\n+        if (expected != actual) {\n+            System.err.println(\"Expected: \" + expected);\n+            System.err.println(\"Actual: \" + actual);\n+            throw new RuntimeException(\"Values are not equal\");\n+        }\n+    }\n+\n+    private static void testWinDeselectAllSingleMode(Frame frame, int invalid) {\n+        List list = new List(4, false);\n+        frame.add(list);\n+        list.add(\"Item1\");\n+        list.add(\"Item2\");\n+        list.add(\"Item3\");\n+\n+        list.select(invalid);\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(0, list.getSelectedIndexes().length);\n+        assertFalse(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertFalse(list.isIndexSelected(2));\n+\n+        list.select(1);\n+        list.select(invalid);\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(0, list.getSelectedIndexes().length);\n+        assertFalse(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertFalse(list.isIndexSelected(2));\n+\n+        list.select(2);\n+        list.select(invalid);\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(0, list.getSelectedIndexes().length);\n+        assertFalse(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertFalse(list.isIndexSelected(2));\n+    }\n+\n+    private static void testWinSelectAllMultipleMode(Frame frame, int invalid) {\n+        List list = new List(4, true);\n+        frame.add(list);\n+        list.add(\"Item1\");\n+        list.add(\"Item2\");\n+        list.add(\"Item3\");\n+\n+        list.select(0);\n+        list.select(2);\n+        list.select(invalid);\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(3, list.getSelectedIndexes().length);\n+        assertTrue(list.isIndexSelected(0));\n+        assertTrue(list.isIndexSelected(1));\n+        assertTrue(list.isIndexSelected(2));\n+\n+        list.deselect(0);\n+        list.select(invalid);\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(3, list.getSelectedIndexes().length);\n+        assertTrue(list.isIndexSelected(0));\n+        assertTrue(list.isIndexSelected(1));\n+        assertTrue(list.isIndexSelected(2));\n+    }\n+\n+    private static void assertTrue(boolean condition) {\n+        if (!condition) {\n+            throw new RuntimeException(\"Expected true but got false\");\n+        }\n+    }\n+\n+    private static void assertFalse(boolean condition) {\n+        if (condition) {\n+            throw new RuntimeException(\"Expected false but got true\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/SelectInvalid.java","additions":228,"deletions":0,"binary":false,"changes":228,"status":"added"},{"patch":"@@ -0,0 +1,157 @@\n+\/*\n+ * Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.awt.Frame;\n+import java.awt.List;\n+\n+\/**\n+ * @test\n+ * @key headful\n+ * @bug 8369327\n+ * @summary Test awt list selection methods\n+ *\/\n+public final class SelectionUnitTest {\n+\n+    public static void main(String[] args) {\n+        \/\/ non-displayable list\n+        testSingleMode(null);\n+        testMultipleMode(null);\n+        testEmptySelection(null);\n+\n+        \/\/ displayable list\n+        testDisplayable(SelectionUnitTest::testSingleMode);\n+        testDisplayable(SelectionUnitTest::testMultipleMode);\n+        testDisplayable(SelectionUnitTest::testEmptySelection);\n+    }\n+\n+    interface Test {\n+        void execute(Frame frame);\n+    }\n+\n+    private static void testDisplayable(Test test) {\n+        Frame frame = new Frame();\n+        try {\n+            frame.setSize(300, 200);\n+            frame.setLocationRelativeTo(null);\n+            frame.setVisible(true);\n+            test.execute(frame);\n+        } finally {\n+            frame.dispose();\n+        }\n+    }\n+\n+    private static void testSingleMode(Frame frame) {\n+        List list = new List(4, false);\n+        if (frame != null) {\n+            frame.add(list);\n+        }\n+        list.add(\"Item1\");\n+        list.add(\"Item2\");\n+        list.add(\"Item3\");\n+\n+        \/\/ Test initial state\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(0, list.getSelectedIndexes().length);\n+        assertFalse(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertFalse(list.isIndexSelected(2));\n+\n+        \/\/ Test single selection\n+        list.select(1);\n+        assertEquals(1, list.getSelectedIndex());\n+        assertEquals(1, list.getSelectedIndexes().length);\n+        assertEquals(1, list.getSelectedIndexes()[0]);\n+        assertFalse(list.isIndexSelected(0));\n+        assertTrue(list.isIndexSelected(1));\n+        assertFalse(list.isIndexSelected(2));\n+\n+        \/\/ Test selection replacement in single mode\n+        list.select(2);\n+        assertEquals(2, list.getSelectedIndex());\n+        assertEquals(1, list.getSelectedIndexes().length);\n+        assertEquals(2, list.getSelectedIndexes()[0]);\n+        assertFalse(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertTrue(list.isIndexSelected(2));\n+    }\n+\n+    private static void testMultipleMode(Frame frame) {\n+        List list = new List(4, true);\n+        if (frame != null) {\n+            frame.add(list);\n+        }\n+        list.add(\"Item1\");\n+        list.add(\"Item2\");\n+        list.add(\"Item3\");\n+\n+        \/\/ Test multiple selections\n+        list.select(0);\n+        list.select(2);\n+        \/\/ Returns -1 for multiple selections\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(2, list.getSelectedIndexes().length);\n+        assertTrue(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertTrue(list.isIndexSelected(2));\n+\n+        \/\/ Test partial deselection\n+        list.deselect(0);\n+        \/\/ Single selection remaining\n+        assertEquals(2, list.getSelectedIndex());\n+        assertEquals(1, list.getSelectedIndexes().length);\n+        assertEquals(2, list.getSelectedIndexes()[0]);\n+        assertFalse(list.isIndexSelected(0));\n+        assertFalse(list.isIndexSelected(1));\n+        assertTrue(list.isIndexSelected(2));\n+    }\n+\n+    private static void testEmptySelection(Frame frame) {\n+        List list = new List();\n+        if (frame != null) {\n+            frame.add(list);\n+        }\n+        assertEquals(-1, list.getSelectedIndex());\n+        assertEquals(0, list.getSelectedIndexes().length);\n+        assertFalse(list.isIndexSelected(0));\n+    }\n+\n+    private static void assertEquals(int expected, int actual) {\n+        if (expected != actual) {\n+            System.err.println(\"Expected: \" + expected);\n+            System.err.println(\"Actual: \" + actual);\n+            throw new RuntimeException(\"Values are not equal\");\n+        }\n+    }\n+\n+    private static void assertTrue(boolean condition) {\n+        if (!condition) {\n+            throw new RuntimeException(\"Expected true but got false\");\n+        }\n+    }\n+\n+    private static void assertFalse(boolean condition) {\n+        if (condition) {\n+            throw new RuntimeException(\"Expected false but got true\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/java\/awt\/List\/SelectionUnitTest.java","additions":157,"deletions":0,"binary":false,"changes":157,"status":"added"}]}