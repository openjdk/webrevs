{"files":[{"patch":"@@ -4,1 +4,1 @@\n- * Copyright (c) 2020, 2023, Huawei Technologies Co., Ltd. All rights reserved.\n+ * Copyright (c) 2020, 2025, Huawei Technologies Co., Ltd. All rights reserved.\n@@ -2079,2 +2079,2 @@\n-          __ test_bit(t0, to, 0);\n-          __ beqz(t0, L_skip_align1);\n+          __ test_bit(tmp_reg, to, 0);\n+          __ beqz(tmp_reg, L_skip_align1);\n@@ -2088,2 +2088,2 @@\n-          __ test_bit(t0, to, 1);\n-          __ beqz(t0, L_skip_align2);\n+          __ test_bit(tmp_reg, to, 1);\n+          __ beqz(tmp_reg, L_skip_align2);\n@@ -2097,2 +2097,2 @@\n-          __ test_bit(t0, to, 2);\n-          __ beqz(t0, L_skip_align4);\n+          __ test_bit(tmp_reg, to, 2);\n+          __ beqz(tmp_reg, L_skip_align4);\n@@ -2124,2 +2124,4 @@\n-    \/\/ Remaining count is less than 8 bytes and address is heapword aligned.\n-    Label L_fill_1, L_fill_2, L_exit1;\n+    \/\/ Handle copies less than 8 bytes.\n+    \/\/ Address may not be heapword aligned.\n+    Label L_fill_1, L_fill_2, L_exit;\n+    __ bind(L_fill_elements);\n@@ -2128,3 +2130,6 @@\n-        __ test_bit(t0, count, 2);\n-        __ beqz(t0, L_fill_2);\n-        __ sw(value, Address(to, 0));\n+        __ test_bit(tmp_reg, count, 2);\n+        __ beqz(tmp_reg, L_fill_2);\n+        __ sb(value, Address(to, 0));\n+        __ sb(value, Address(to, 1));\n+        __ sb(value, Address(to, 2));\n+        __ sb(value, Address(to, 3));\n@@ -2132,0 +2137,1 @@\n+\n@@ -2133,3 +2139,4 @@\n-        __ test_bit(t0, count, 1);\n-        __ beqz(t0, L_fill_1);\n-        __ sh(value, Address(to, 0));\n+        __ test_bit(tmp_reg, count, 1);\n+        __ beqz(tmp_reg, L_fill_1);\n+        __ sb(value, Address(to, 0));\n+        __ sb(value, Address(to, 1));\n@@ -2137,0 +2144,1 @@\n+\n@@ -2138,2 +2146,2 @@\n-        __ test_bit(t0, count, 0);\n-        __ beqz(t0, L_exit1);\n+        __ test_bit(tmp_reg, count, 0);\n+        __ beqz(tmp_reg, L_exit);\n@@ -2143,7 +2151,2 @@\n-        __ test_bit(t0, count, 1);\n-        __ beqz(t0, L_fill_2);\n-        __ sw(value, Address(to, 0));\n-        __ addi(to, to, 4);\n-        __ bind(L_fill_2);\n-        __ test_bit(t0, count, 0);\n-        __ beqz(t0, L_exit1);\n+        __ test_bit(tmp_reg, count, 1);\n+        __ beqz(tmp_reg, L_fill_2);\n@@ -2151,10 +2154,2 @@\n-        break;\n-      case T_INT:\n-        __ beqz(count, L_exit1);\n-        __ sw(value, Address(to, 0));\n-        break;\n-      default: ShouldNotReachHere();\n-    }\n-    __ bind(L_exit1);\n-    __ leave();\n-    __ ret();\n+        __ sh(value, Address(to, 2));\n+        __ addi(to, to, 4);\n@@ -2162,14 +2157,3 @@\n-    \/\/ Handle copies less than 8 bytes.\n-    Label L_loop1, L_loop2, L_exit2;\n-    __ bind(L_fill_elements);\n-    __ beqz(count, L_exit2);\n-    switch (t) {\n-      case T_BYTE:\n-        __ bind(L_loop1);\n-        __ sb(value, Address(to, 0));\n-        __ addi(to, to, 1);\n-        __ subiw(count, count, 1);\n-        __ bnez(count, L_loop1);\n-        break;\n-      case T_SHORT:\n-        __ bind(L_loop2);\n+        __ bind(L_fill_2);\n+        __ test_bit(tmp_reg, count, 0);\n+        __ beqz(tmp_reg, L_exit);\n@@ -2177,3 +2161,0 @@\n-        __ addi(to, to, 2);\n-        __ subiw(count, count, 2 >> shift);\n-        __ bnez(count, L_loop2);\n@@ -2182,0 +2163,1 @@\n+        __ beqz(count, L_exit);\n@@ -2186,1 +2168,1 @@\n-    __ bind(L_exit2);\n+    __ bind(L_exit);\n","filename":"src\/hotspot\/cpu\/riscv\/stubGenerator_riscv.cpp","additions":34,"deletions":52,"binary":false,"changes":86,"status":"modified"}]}