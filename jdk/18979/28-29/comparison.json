{"files":[{"patch":"@@ -0,0 +1,106 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+\n+ *\/\n+\n+#ifndef SHARE_NMT_ARRAYWITHFREELIST_HPP\n+#define SHARE_NMT_ARRAYWITHFREELIST_HPP\n+\n+#include \"utilities\/growableArray.hpp\"\n+#include <type_traits>\n+\n+\/\/ A flat array of elements E, backed by C-heap, growing on-demand. It allows for\n+\/\/ returning arbitrary elements and keeps them in a freelist. Elements can be uniquely\n+\/\/ identified via array index.\n+template<typename E, MEMFLAGS flag>\n+class ArrayWithFreeList {\n+\n+  \/\/ An E must be trivially copyable and destructible, but it may be constructed\n+  \/\/ however it likes.\n+  constexpr bool E_satisfies_type_requirements() {\n+    return std::is_trivially_copyable<E>::value && std::is_trivially_destructible<E>::value;\n+  }\n+\n+public:\n+  using I = int32_t;\n+  static constexpr const I nil = -1;\n+\n+private:\n+  \/\/ A free list allocator element is either a link to the next free space\n+  \/\/ Or an actual element.\n+  union alignas(E) BackingElement {\n+    I link;\n+    char e[sizeof(E)];\n+  };\n+\n+  GrowableArrayCHeap<BackingElement, flag> _backing_storage;\n+  I _free_start;\n+\n+  bool is_in_bounds(I i) {\n+    return i >= 0 && i < _backing_storage.length();\n+  }\n+\n+public:\n+  NONCOPYABLE(ArrayWithFreeList<E COMMA flag>);\n+\n+  ArrayWithFreeList(int initial_capacity = 8)\n+    : _backing_storage(initial_capacity),\n+    _free_start(nil) {}\n+\n+  template<typename... Args>\n+  I allocate(Args... args) {\n+    static_assert(E_satisfies_type_requirements(), \"must be\");\n+    BackingElement* be;\n+    I i;\n+    if (_free_start != nil) {\n+      \/\/ Must point to already existing index\n+      be = &_backing_storage.at(_free_start);\n+      i = _free_start;\n+      _free_start = be->link;\n+    } else {\n+      \/\/ There are no free elements, allocate a new one.\n+      i = _backing_storage.append(BackingElement());\n+      be = _backing_storage.adr_at(i);\n+    }\n+\n+    ::new (be) E{args...};\n+    return i;\n+  }\n+\n+  void deallocate(I i) {\n+    static_assert(E_satisfies_type_requirements(), \"must be\");\n+    assert(i == nil || is_in_bounds(i), \"out of bounds free\");\n+    if (i == nil) return;\n+    BackingElement& be_freed = _backing_storage.at(i);\n+    be_freed.link = _free_start;\n+    _free_start = i;\n+  }\n+\n+  E& at(I i) {\n+    static_assert(E_satisfies_type_requirements(), \"must be\");\n+    assert(i != nil, \"null pointer dereference\");\n+    assert(is_in_bounds(i), \"out of bounds dereference\");\n+    return reinterpret_cast<E&>(_backing_storage.at(i).e);\n+  }\n+};\n+\n+#endif \/\/ SHARE_NMT_ARRAYWITHFREELIST_HPP\n","filename":"src\/hotspot\/share\/nmt\/arrayWithFreeList.hpp","additions":106,"deletions":0,"binary":false,"changes":106,"status":"added"},{"patch":"@@ -1,98 +0,0 @@\n-\/*\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n-\n- *\/\n-\n-#ifndef SHARE_NMT_HOMOGENOUSOBJECTARRAY_HPP\n-#define SHARE_NMT_HOMOGENOUSOBJECTARRAY_HPP\n-\n-#include \"utilities\/growableArray.hpp\"\n-\n-\/\/ A flat array of elements E, backed by C-heap, growing on-demand. It allows for\n-\/\/ returning arbitrary elements and keeps them in a freelist. Elements can be uniquely\n-\/\/ identified via array index.\n-template<typename E, MEMFLAGS flag>\n-class HomogenousObjectArray {\n-public:\n-  using I = int32_t;\n-  static constexpr const I nil = -1;\n-\n-private:\n-  \/\/ A free list allocator element is either a link to the next free space\n-  \/\/ Or an actual element.\n-  union alignas(E) BackingElement {\n-    I link;\n-    char e[sizeof(E)];\n-  };\n-\n-  GrowableArrayCHeap<BackingElement, flag> _backing_storage;\n-  I _free_start;\n-\n-  bool is_in_bounds(I i) {\n-    return i >= 0 && i < _backing_storage.length();\n-  }\n-\n-public:\n-  NONCOPYABLE(HomogenousObjectArray<E COMMA flag>);\n-\n-  HomogenousObjectArray(int initial_capacity = 8)\n-    : _backing_storage(initial_capacity),\n-    _free_start(nil) {}\n-\n-  template<typename... Args>\n-  I allocate(Args... args) {\n-    static_assert(std::is_trivial<E>::value, \"must be\");\n-    BackingElement* be;\n-    I i;\n-    if (_free_start != nil) {\n-      \/\/ Must point to already existing index\n-      be = &_backing_storage.at(_free_start);\n-      i = _free_start;\n-      _free_start = be->link;\n-    } else {\n-      \/\/ There are no free elements, allocate a new one.\n-      i = _backing_storage.append(BackingElement());\n-      be = _backing_storage.adr_at(i);\n-    }\n-\n-    ::new (be) E{args...};\n-    return i;\n-  }\n-\n-  void deallocate(I i) {\n-    static_assert(std::is_trivial<E>::value, \"must be\");\n-    assert(i == nil || is_in_bounds(i), \"out of bounds free\");\n-    if (i == nil) return;\n-    BackingElement& be_freed = _backing_storage.at(i);\n-    be_freed.link = _free_start;\n-    _free_start = i;\n-  }\n-\n-  E& at(I i) {\n-    static_assert(std::is_trivial<E>::value, \"must be\");\n-    assert(i != nil, \"null pointer dereference\");\n-    assert(is_in_bounds(i), \"out of bounds dereference\");\n-    return reinterpret_cast<E&>(_backing_storage.at(i).e);\n-  }\n-};\n-\n-#endif \/\/ SHARE_NMT_HOMOGENOUSOBJECTARRAY_HPP\n","filename":"src\/hotspot\/share\/nmt\/homogenousObjectArray.hpp","additions":0,"deletions":98,"binary":false,"changes":98,"status":"deleted"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"nmt\/homogenousObjectArray.hpp\"\n+#include \"nmt\/arrayWithFreeList.hpp\"\n@@ -61,1 +61,1 @@\n-  using TableEntryStorage = HomogenousObjectArray<TableEntry, mtNMT>;\n+  using TableEntryStorage = ArrayWithFreeList<TableEntry, mtNMT>;\n","filename":"src\/hotspot\/share\/nmt\/nmtNativeCallStackStorage.hpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -27,1 +27,1 @@\n-#include \"nmt\/homogenousObjectArray.hpp\"\n+#include \"nmt\/arrayWithFreeList.hpp\"\n@@ -29,1 +29,1 @@\n-using A = HomogenousObjectArray<int, mtTest>;\n+using A = ArrayWithFreeList<int, mtTest>;\n@@ -38,1 +38,1 @@\n-  using NodeAllocator = HomogenousObjectArray<Node, mtTest>;\n+  using NodeAllocator = ArrayWithFreeList<Node, mtTest>;\n@@ -128,1 +128,1 @@\n-    LL2<int, HomogenousObjectArray> list;\n+    LL2<int, ArrayWithFreeList> list;\n","filename":"test\/hotspot\/gtest\/nmt\/test_homogenousObjectArray.cpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}