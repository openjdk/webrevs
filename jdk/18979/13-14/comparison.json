{"files":[{"patch":"@@ -41,1 +41,1 @@\n-  class I {\n+  struct I {\n@@ -58,1 +58,1 @@\n-  static const I nil;\n+  static constexpr const I nil = I{-1};\n@@ -76,1 +76,1 @@\n-      _free_start(I(nil._idx)) {}\n+    _free_start(I{nil._idx}) {}\n@@ -94,1 +94,1 @@\n-    return I(i);\n+    return I{i};\n@@ -117,4 +117,0 @@\n-template<typename E, MEMFLAGS flag>\n-const typename IndexedFreeListAllocator<E, flag>::I\n-    IndexedFreeListAllocator<E, flag>::nil(-1);\n-\n@@ -133,0 +129,4 @@\n+\n+    bool is_nil() {\n+      return e == nullptr;\n+    }\n@@ -171,0 +171,3 @@\n+    bool is_nil() {\n+      return e == nullptr;\n+    }\n","filename":"src\/hotspot\/share\/nmt\/indexedFreeListAllocator.hpp","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -29,1 +29,0 @@\n-#include <chrono>\n@@ -65,72 +64,0 @@\n-\n-TEST_VM_F(NativeCallStackStorageTest, PerfTest) {\n-  using std::chrono::duration;\n-  using std::chrono::duration_cast;\n-  using std::chrono::high_resolution_clock;\n-  using std::chrono::milliseconds;\n-\n-  NativeCallStackStorage ncss(true);\n-  NativeCallStackStorageWithAllocator<CHeapAllocator> ncss_cheap(true);\n-  NativeCallStackStorageWithAllocator<ArenaAllocator> ncss_arena(true);\n-\n-  auto make_stack = []() -> NativeCallStack {\n-    size_t a = os::random();\n-    size_t b = os::random();\n-    size_t c = os::random();\n-    size_t d = os::random();\n-    address as[4] = {(address)a, (address)b, (address)c, (address)d};\n-    NativeCallStack stack(as, 4);\n-    return stack;\n-  };\n-\n-  constexpr const int size = 1000000;\n-  tty->print(\"Generate stacks... \");\n-  NativeCallStack* all = NEW_C_HEAP_ARRAY(NativeCallStack, size, mtTest);\n-  for (int i = 0; i < size; i++) {\n-    all[i] = make_stack();\n-  }\n-  tty->print_cr(\"Done\");\n-\n-  auto t1 = high_resolution_clock::now();\n-  for (int i = 0; i < size; i++) {\n-    ncss.push(all[i]);\n-  }\n-  auto t2 = high_resolution_clock::now();\n-\n-  auto ms_int = duration_cast<milliseconds>(t2 - t1);\n-  duration<double, std::milli> ms_double = t2 - t1;\n-  tty->print_cr(\"Time taken with GrowableArray: %f\", ms_double.count());\n-\n-  t1 = high_resolution_clock::now();\n-  for (int i = 0; i < size; i++) {\n-    ncss_cheap.push(all[i]);\n-  }\n-  t2 = high_resolution_clock::now();\n-\n-  ms_int = duration_cast<milliseconds>(t2 - t1);\n-  ms_double = t2 - t1;\n-  tty->print_cr(\"Time taken with CHeap: %f\", ms_double.count());\n-\n-  t1 = high_resolution_clock::now();\n-  for (int i = 0; i < size; i++) {\n-    ncss_arena.push(all[i]);\n-  }\n-  t2 = high_resolution_clock::now();\n-\n-  ms_int = duration_cast<milliseconds>(t2 - t1);\n-  ms_double = t2 - t1;\n-  tty->print_cr(\"Time taken with Arena: %f\", ms_double.count());\n-\n-  {\n-    NativeCallStackStorage ncss(true);\n-    auto t1 = high_resolution_clock::now();\n-    for (int i = 0; i < size; i++) {\n-      ncss.push(all[i]);\n-    }\n-    auto t2 = high_resolution_clock::now();\n-\n-    auto ms_int = duration_cast<milliseconds>(t2 - t1);\n-    duration<double, std::milli> ms_double = t2 - t1;\n-    tty->print_cr(\"Time taken with GrowableArray again: %f\", ms_double.count());\n-  }\n-}\n","filename":"test\/hotspot\/gtest\/nmt\/test_nmt_nativecallstackstorage.cpp","additions":0,"deletions":73,"binary":false,"changes":73,"status":"modified"}]}