{"files":[{"patch":"@@ -14,1 +14,0 @@\n-  \/\/ Make the index opaque.\n@@ -29,0 +28,3 @@\n+\n+    I(int32_t idx DEBUG_ONLY(COMMA IndexedFreeListAllocator<E COMMA flag>* owner))\n+    : _idx(idx), _owner(owner) {}\n@@ -30,1 +32,1 @@\n-  static constexpr const I nil = I{-1};\n+  static const I nil;\n@@ -42,4 +44,0 @@\n-\n-    BackingElement(I link) {\n-      this->link = link;\n-    }\n@@ -47,0 +45,1 @@\n+\n@@ -51,3 +50,3 @@\n-  IndexedFreeListAllocator()\n-  : _backing_storage(8),\n-  _free_start(I{0}) {}\n+  IndexedFreeListAllocator(int initial_capacity = 8)\n+    : _backing_storage(initial_capacity),\n+      _free_start(I(nil._idx, this)) {}\n@@ -57,6 +56,7 @@\n-    int32_t i = _free_start._idx;\n-    _backing_storage.at_grow(i);\n-    BackingElement& be = _backing_storage.at(i);\n-    if (be.link == nil) {\n-      \/\/ Must be at end, simply increment\n-      _free_start._idx += 1;\n+    BackingElement* be;\n+    int i = -1;\n+    if (_free_start != nil) {\n+      \/\/ Must point to already existing index\n+      be = &_backing_storage.at(_free_start._idx);\n+      i = _free_start._idx;\n+      _free_start = be->link;\n@@ -64,2 +64,3 @@\n-      \/\/ Follow the link to the next free element\n-      _free_start = be.link;\n+      \/\/ There are no free elements, allocate a new one.\n+      i = _backing_storage.append(BackingElement());\n+      be = _backing_storage.adr_at(i);\n@@ -67,1 +68,2 @@\n-    ::new (&be) E(args...);\n+\n+    ::new (be) E(args...);\n@@ -72,1 +74,1 @@\n-    assert(i == nil || i._owner == this, \"attempt to free to wrong allocator\");\n+    assert(i == nil || i._owner == this, \"attempt to free via wrong allocator\");\n@@ -81,0 +83,1 @@\n+    assert(i._owner == this, \"attempt to access via wrong allocator\");\n@@ -86,0 +89,1 @@\n+    assert(i._owner == this, \"attempt to access via wrong allocator\");\n@@ -90,0 +94,4 @@\n+template<typename E, MEMFLAGS flag>\n+const typename IndexedFreeListAllocator<E, flag>::I\n+    IndexedFreeListAllocator<E, flag>::nil(-1 DEBUG_ONLY(COMMA nullptr));\n+\n","filename":"src\/hotspot\/share\/nmt\/indexedFreeListAllocator.hpp","additions":27,"deletions":19,"binary":false,"changes":46,"status":"modified"},{"patch":"@@ -68,0 +68,1 @@\n+      NodePtr next_start = n.next;\n@@ -69,1 +70,1 @@\n-      start = n.next;\n+      start = next_start;\n@@ -113,0 +114,1 @@\n+      NodePtr next_start = n.next;\n@@ -114,1 +116,1 @@\n-      start = n.next;\n+      start = next_start;\n","filename":"test\/hotspot\/gtest\/nmt\/test_indexedFreeListAllocator.cpp","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"}]}