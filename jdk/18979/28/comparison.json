{"files":[{"patch":"@@ -0,0 +1,98 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+\n+ *\/\n+\n+#ifndef SHARE_NMT_HOMOGENOUSOBJECTARRAY_HPP\n+#define SHARE_NMT_HOMOGENOUSOBJECTARRAY_HPP\n+\n+#include \"utilities\/growableArray.hpp\"\n+\n+\/\/ A flat array of elements E, backed by C-heap, growing on-demand. It allows for\n+\/\/ returning arbitrary elements and keeps them in a freelist. Elements can be uniquely\n+\/\/ identified via array index.\n+template<typename E, MEMFLAGS flag>\n+class HomogenousObjectArray {\n+public:\n+  using I = int32_t;\n+  static constexpr const I nil = -1;\n+\n+private:\n+  \/\/ A free list allocator element is either a link to the next free space\n+  \/\/ Or an actual element.\n+  union alignas(E) BackingElement {\n+    I link;\n+    char e[sizeof(E)];\n+  };\n+\n+  GrowableArrayCHeap<BackingElement, flag> _backing_storage;\n+  I _free_start;\n+\n+  bool is_in_bounds(I i) {\n+    return i >= 0 && i < _backing_storage.length();\n+  }\n+\n+public:\n+  NONCOPYABLE(HomogenousObjectArray<E COMMA flag>);\n+\n+  HomogenousObjectArray(int initial_capacity = 8)\n+    : _backing_storage(initial_capacity),\n+    _free_start(nil) {}\n+\n+  template<typename... Args>\n+  I allocate(Args... args) {\n+    static_assert(std::is_trivial<E>::value, \"must be\");\n+    BackingElement* be;\n+    I i;\n+    if (_free_start != nil) {\n+      \/\/ Must point to already existing index\n+      be = &_backing_storage.at(_free_start);\n+      i = _free_start;\n+      _free_start = be->link;\n+    } else {\n+      \/\/ There are no free elements, allocate a new one.\n+      i = _backing_storage.append(BackingElement());\n+      be = _backing_storage.adr_at(i);\n+    }\n+\n+    ::new (be) E{args...};\n+    return i;\n+  }\n+\n+  void deallocate(I i) {\n+    static_assert(std::is_trivial<E>::value, \"must be\");\n+    assert(i == nil || is_in_bounds(i), \"out of bounds free\");\n+    if (i == nil) return;\n+    BackingElement& be_freed = _backing_storage.at(i);\n+    be_freed.link = _free_start;\n+    _free_start = i;\n+  }\n+\n+  E& at(I i) {\n+    static_assert(std::is_trivial<E>::value, \"must be\");\n+    assert(i != nil, \"null pointer dereference\");\n+    assert(is_in_bounds(i), \"out of bounds dereference\");\n+    return reinterpret_cast<E&>(_backing_storage.at(i).e);\n+  }\n+};\n+\n+#endif \/\/ SHARE_NMT_HOMOGENOUSOBJECTARRAY_HPP\n","filename":"src\/hotspot\/share\/nmt\/homogenousObjectArray.hpp","additions":98,"deletions":0,"binary":false,"changes":98,"status":"added"},{"patch":"@@ -0,0 +1,43 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"nmt\/nmtNativeCallStackStorage.hpp\"\n+\n+NativeCallStackStorage::StackIndex NativeCallStackStorage::put(const NativeCallStack& value) {\n+  int bucket = value.calculate_hash() % _table_size;\n+  TableEntryIndex link = _table[bucket];\n+  while (link != TableEntryStorage::nil) {\n+    TableEntry& l = _entry_storage.at(link);\n+    if (value.equals(get(l.stack))) {\n+      return l.stack;\n+    }\n+    link = l.next;\n+  }\n+  int idx = _stacks.append(value);\n+  StackIndex si{idx};\n+  TableEntryIndex new_link = _entry_storage.allocate(_table[bucket], si);\n+  _table[bucket] = new_link;\n+  return si;\n+}\n","filename":"src\/hotspot\/share\/nmt\/nmtNativeCallStackStorage.cpp","additions":43,"deletions":0,"binary":false,"changes":43,"status":"added"},{"patch":"@@ -29,1 +29,1 @@\n-#include \"memory\/arena.hpp\"\n+#include \"nmt\/homogenousObjectArray.hpp\"\n@@ -43,1 +43,1 @@\n-class NativeCallStackStorage : public CHeapObj<mtNMT> {\n+class NativeCallStackStorage : public CHeapObjBase {\n@@ -47,4 +47,0 @@\n-\n-  private:\n-    static constexpr const int32_t _invalid = -1;\n-\n@@ -52,4 +48,0 @@\n-    StackIndex(int32_t stack_index)\n-      : _stack_index(stack_index) {\n-    }\n-\n@@ -57,0 +49,1 @@\n+    static constexpr const int32_t invalid = -1;\n@@ -62,5 +55,1 @@\n-      return _stack_index == _invalid;\n-    }\n-\n-    StackIndex()\n-      : _stack_index(_invalid) {\n+      return _stack_index == invalid;\n@@ -71,2 +60,8 @@\n-  struct Link : public ArenaObj {\n-    Link* next;\n+  struct TableEntry;\n+  using TableEntryStorage = HomogenousObjectArray<TableEntry, mtNMT>;\n+  using TableEntryIndex = typename TableEntryStorage::I;\n+\n+  TableEntryStorage _entry_storage;\n+\n+  struct TableEntry {\n+    TableEntryIndex next;\n@@ -74,4 +69,0 @@\n-    Link(Link* next, StackIndex v)\n-      : next(next),\n-        stack(v) {\n-    }\n@@ -79,14 +70,0 @@\n-  StackIndex put(const NativeCallStack& value) {\n-    int bucket = value.calculate_hash() % _table_size;\n-    Link* link = _table[bucket];\n-    while (link != nullptr) {\n-      if (value.equals(get(link->stack))) {\n-        return link->stack;\n-      }\n-      link = link->next;\n-    }\n-    int idx = _stacks.append(value);\n-    Link* new_link = new (&_arena) Link(_table[bucket], StackIndex(idx));\n-    _table[bucket] = new_link;\n-    return new_link->stack;\n-  }\n@@ -94,2 +71,2 @@\n-  \/\/ For storage of the Links\n-  Arena _arena;\n+  StackIndex put(const NativeCallStack& value);\n+\n@@ -100,1 +77,1 @@\n-  Link** _table;\n+  TableEntryIndex* _table;\n@@ -110,1 +87,1 @@\n-      return StackIndex();\n+      return StackIndex{StackIndex::invalid};\n@@ -123,1 +100,1 @@\n-  : _arena(mtNMT), _table_size(table_size), _table(nullptr), _stacks(),\n+  : _table_size(table_size), _table(nullptr), _stacks(),\n@@ -126,1 +103,1 @@\n-      _table = NEW_ARENA_ARRAY(&_arena, Link*, _table_size);\n+      _table = NEW_C_HEAP_ARRAY(TableEntryIndex, _table_size, mtNMT);\n@@ -128,1 +105,1 @@\n-        _table[i] = nullptr;\n+        _table[i] = TableEntryStorage::nil;\n@@ -132,0 +109,4 @@\n+\n+  ~NativeCallStackStorage() {\n+    FREE_C_HEAP_ARRAY(LinkPtr, _table);\n+  }\n","filename":"src\/hotspot\/share\/nmt\/nmtNativeCallStackStorage.hpp","additions":23,"deletions":42,"binary":false,"changes":65,"status":"modified"},{"patch":"@@ -0,0 +1,152 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+\n+ *\/\n+\n+#include \"precompiled.hpp\"\n+#include \"unittest.hpp\"\n+#include \"nmt\/homogenousObjectArray.hpp\"\n+\n+using A = HomogenousObjectArray<int, mtTest>;\n+\n+class HomogenousObjectArrayTest  : public testing::Test {\n+};\n+\n+\/\/ A linked list which sets the allocator itself\n+template<typename E>\n+struct LL {\n+  struct Node;\n+  using NodeAllocator = HomogenousObjectArray<Node, mtTest>;\n+  using NodePtr = typename NodeAllocator::I;\n+  NodeAllocator alloc;\n+  struct Node {\n+    E e;\n+    NodePtr next;\n+  };\n+\n+  NodePtr start;\n+  LL()\n+  : start{NodeAllocator::nil} {\n+  }\n+\n+  void push(E e) {\n+    NodePtr new_element = alloc.allocate(e, NodeAllocator::nil);\n+    NodePtr& current = start;\n+    if (current == NodeAllocator::nil) {\n+      current = new_element;\n+      return;\n+    }\n+    alloc.at(new_element).next = current;\n+    current = new_element;\n+  };\n+\n+  E pop() {\n+    assert(start != NodeAllocator::nil, \"must be\");\n+    Node& n = alloc.at(start);\n+    E e = n.e;\n+    NodePtr next_start = n.next;\n+    alloc.deallocate(start);\n+    start = next_start;\n+    return e;\n+  }\n+};\n+\/\/ A linked list which is capable of having multiple different allocators. This is done through higher-kinded types.\n+\/\/ That's a very fancy word that means that a templated type like Foo<E> can be passed around like only Foo at first\n+\/\/ and then be 'applied' to some E. Think of it like passing around a lambda or function pointer, but on a template level,\n+\/\/ where Foo is a function that can be called on some type with the return type being Foo<E>.\n+template<typename E, template<typename, MEMFLAGS> class Allocator>\n+struct LL2 {\n+  struct Node;\n+  using NodeAllocator = Allocator<Node, mtTest>;\n+  using NodePtr = typename NodeAllocator::I;\n+  NodeAllocator alloc;\n+  struct Node {\n+    E e;\n+    NodePtr next;\n+  };\n+\n+  NodePtr start;\n+  LL2()\n+    : start(NodeAllocator::nil) {\n+  }\n+\n+  void push(E e) {\n+    NodePtr new_element = alloc.allocate(e, NodeAllocator::nil);\n+    NodePtr& current = start;\n+    if (current == NodeAllocator::nil) {\n+      current = new_element;\n+      return;\n+    }\n+    alloc.at(new_element).next = current;\n+    current = new_element;\n+  };\n+\n+  E pop() {\n+    assert(start != NodeAllocator::nil, \"must be\");\n+    Node& n = alloc.at(start);\n+    E e = n.e;\n+    NodePtr next_start = n.next;\n+    alloc.deallocate(start);\n+    start = next_start;\n+    return e;\n+  }\n+};\n+\n+template<typename List>\n+void test_with_list(List& list) {\n+  list.push(1);\n+  list.push(2);\n+  EXPECT_EQ(2, list.pop());\n+  EXPECT_EQ(1, list.pop());\n+}\n+\n+TEST_VM_F(HomogenousObjectArrayTest, TestLinkedLists) {\n+  {\n+    LL<int> list;\n+    test_with_list(list);\n+  }\n+  {\n+    LL2<int, HomogenousObjectArray> list;\n+    test_with_list(list);\n+  }\n+}\n+\n+TEST_VM_F(HomogenousObjectArrayTest, FreeingShouldReuseMemory) {\n+  A alloc;\n+  A::I i = alloc.allocate(1);\n+  int* x = &alloc.at(i);\n+  alloc.deallocate(i);\n+  i = alloc.allocate(1);\n+  int* y = &alloc.at(i);\n+  EXPECT_EQ(x, y);\n+}\n+\n+TEST_VM_F(HomogenousObjectArrayTest, FreeingInTheMiddleWorks) {\n+  A alloc;\n+  A::I i0 = alloc.allocate(0);\n+  A::I i1 = alloc.allocate(0);\n+  A::I i2 = alloc.allocate(0);\n+  int* p1 = &alloc.at(i1);\n+  alloc.deallocate(i1);\n+  A::I i3 = alloc.allocate(0);\n+  EXPECT_EQ(p1, &alloc.at(i3));\n+}\n","filename":"test\/hotspot\/gtest\/nmt\/test_homogenousObjectArray.cpp","additions":152,"deletions":0,"binary":false,"changes":152,"status":"added"}]}