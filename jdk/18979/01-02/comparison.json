{"files":[{"patch":"@@ -68,4 +68,0 @@\n-  E& operator[](I i) {\n-    return backing_storage.at(i.idx).e;\n-  }\n-\n@@ -74,1 +70,1 @@\n-    return reinterpret_cast<E>(backing_storage.at(i.idx).e);\n+    return reinterpret_cast<E&>(backing_storage.at(i.idx).e);\n@@ -79,1 +75,1 @@\n-    return reinterpret_cast<E>(backing_storage.at(i.idx).e);\n+    return reinterpret_cast<const E&>(backing_storage.at(i.idx).e);\n@@ -109,4 +105,0 @@\n-  E& operator[](I i) {\n-    return *i.e;\n-  }\n-\n@@ -151,4 +143,0 @@\n-  E& operator[](I i) {\n-    return *i.e;\n-  }\n-\n","filename":"src\/hotspot\/share\/nmt\/indexedFreeListAllocator.hpp","additions":2,"deletions":14,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -58,2 +58,2 @@\n-      while (alloc[current].next != NodeAllocator::nil) {\n-        current = alloc[current].next;\n+      while (alloc.at(current).next != NodeAllocator::nil) {\n+        current = alloc.at(current).next;\n@@ -61,1 +61,1 @@\n-      alloc[current].next = new_element;\n+      alloc.at(current).next = new_element;\n@@ -66,1 +66,1 @@\n-      Node& n = alloc[start];\n+      Node& n = alloc.at(start);\n@@ -103,2 +103,2 @@\n-      while (alloc[current].next != NodeAllocator::nil) {\n-        current = alloc[current].next;\n+      while (alloc.at(current).next != NodeAllocator::nil) {\n+        current = alloc.at(current).next;\n@@ -106,1 +106,1 @@\n-      alloc[current].next = new_element;\n+      alloc.at(current).next = new_element;\n@@ -111,1 +111,1 @@\n-      Node& n = alloc[start];\n+      Node& n = alloc.at(start);\n","filename":"test\/hotspot\/gtest\/nmt\/test_indexedFreeListAllocator.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}