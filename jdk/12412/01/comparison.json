{"files":[{"patch":"@@ -165,52 +165,31 @@\n-            \/\/ Changes backed out for compatibility with Solaris\n-\n-            \/\/ Several AlgorithmId should omit the whole parameter part when\n-            \/\/ it's NULL. They are ---\n-            \/\/ RFC 3370 2.1: Implementations SHOULD generate SHA-1\n-            \/\/ AlgorithmIdentifiers with absent parameters.\n-            \/\/ RFC 3447 C1: When id-sha1, id-sha224, id-sha256, id-sha384 and\n-            \/\/ id-sha512 are used in an AlgorithmIdentifier the parameters\n-            \/\/ (which are optional) SHOULD be omitted.\n-            \/\/ RFC 3279 2.3.2: The id-dsa algorithm syntax includes optional\n-            \/\/ domain parameters... When omitted, the parameters component\n-            \/\/ MUST be omitted entirely\n-            \/\/ RFC 3370 3.1: When the id-dsa-with-sha1 algorithm identifier\n-            \/\/ is used, the AlgorithmIdentifier parameters field MUST be absent.\n-            \/*if (\n-                algid.equals((Object)SHA_oid) ||\n-                algid.equals((Object)SHA224_oid) ||\n-                algid.equals((Object)SHA256_oid) ||\n-                algid.equals((Object)SHA384_oid) ||\n-                algid.equals((Object)SHA512_oid) ||\n-                algid.equals((Object)SHA512_224_oid) ||\n-                algid.equals((Object)SHA512_256_oid) ||\n-                algid.equals((Object)SHA3_224_oid) ||\n-                algid.equals((Object)SHA3_256_oid) ||\n-                algid.equals((Object)SHA3_384_oid) ||\n-                algid.equals((Object)SHA3_512_oid) ||\n-                algid.equals((Object)DSA_oid) ||\n-                algid.equals((Object)sha1WithDSA_oid)) {\n-                ; \/\/ no parameter part encoded\n-            } else {\n-                bytes.putNull();\n-            }*\/\n-            if (algid.equals(RSASSA_PSS_oid) || algid.equals(ed448_oid)\n-                    || algid.equals(ed25519_oid)\n-                    || algid.equals(x448_oid)\n-                    || algid.equals(x25519_oid)\n-                    || algid.equals(SHA1withECDSA_oid)\n-                    || algid.equals(SHA224withECDSA_oid)\n-                    || algid.equals(SHA256withECDSA_oid)\n-                    || algid.equals(SHA384withECDSA_oid)\n-                    || algid.equals(SHA512withECDSA_oid)) {\n-                \/\/ RFC 3279 2.2.3: When the ecdsa-with-SHA1 algorithm identifier\n-                \/\/ appears as the algorithm field in an AlgorithmIdentifier,\n-                \/\/ the encoding MUST omit the parameters field.\n-                \/\/ RFC 4055 3.3: when an RSASSA-PSS key does not require\n-                \/\/ parameter validation, field is absent.\n-                \/\/ RFC 8410 3: for id-X25519, id-X448, id-Ed25519, and\n-                \/\/ id-Ed448, the parameters must be absent.\n-                \/\/ RFC 5758 3.2: the encoding must omit the parameters field\n-                \/\/ for ecdsa-with-SHA224, ecdsa-with-SHA256, ecdsa-with-SHA384\n-                \/\/ and ecdsa-with-SHA512.\n-            } else {\n+            \/\/ MessageDigest algorithms usually have a NULL parameters even\n+            \/\/ if most RFCs suggested absent.\n+            \/\/ RSA key and signature algorithms requires the NULL parameters\n+            \/\/ to be present, see A.1 and A.2.4 of RFC 8017.\n+            if (algid.equals(RSAEncryption_oid)\n+                    || algid.equals(MD2_oid)\n+                    || algid.equals(MD5_oid)\n+                    || algid.equals(SHA_oid)\n+                    || algid.equals(SHA224_oid)\n+                    || algid.equals(SHA256_oid)\n+                    || algid.equals(SHA384_oid)\n+                    || algid.equals(SHA512_oid)\n+                    || algid.equals(SHA512_224_oid)\n+                    || algid.equals(SHA512_256_oid)\n+                    || algid.equals(SHA3_224_oid)\n+                    || algid.equals(SHA3_256_oid)\n+                    || algid.equals(SHA3_384_oid)\n+                    || algid.equals(SHA3_512_oid)\n+                    || algid.equals(SHA1withRSA_oid)\n+                    || algid.equals(SHA224withRSA_oid)\n+                    || algid.equals(SHA256withRSA_oid)\n+                    || algid.equals(SHA384withRSA_oid)\n+                    || algid.equals(SHA512withRSA_oid)\n+                    || algid.equals(SHA512$224withRSA_oid)\n+                    || algid.equals(SHA512$256withRSA_oid)\n+                    || algid.equals(MD2withRSA_oid)\n+                    || algid.equals(MD5withRSA_oid)\n+                    || algid.equals(SHA3_224withRSA_oid)\n+                    || algid.equals(SHA3_256withRSA_oid)\n+                    || algid.equals(SHA3_384withRSA_oid)\n+                    || algid.equals(SHA3_512withRSA_oid)) {\n@@ -671,20 +650,26 @@\n-    public static final ObjectIdentifier ed25519_oid =\n-            ObjectIdentifier.of(KnownOIDs.Ed25519);\n-    public static final ObjectIdentifier ed448_oid =\n-            ObjectIdentifier.of(KnownOIDs.Ed448);\n-\n-    public static final ObjectIdentifier x25519_oid =\n-            ObjectIdentifier.of(KnownOIDs.X25519);\n-    public static final ObjectIdentifier x448_oid =\n-            ObjectIdentifier.of(KnownOIDs.X448);\n-\n-    public static final ObjectIdentifier SHA1withECDSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA1withECDSA);\n-    public static final ObjectIdentifier SHA224withECDSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA224withECDSA);\n-    public static final ObjectIdentifier SHA256withECDSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA256withECDSA);\n-    public static final ObjectIdentifier SHA384withECDSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA384withECDSA);\n-    public static final ObjectIdentifier SHA512withECDSA_oid =\n-            ObjectIdentifier.of(KnownOIDs.SHA512withECDSA);\n+    public static final ObjectIdentifier SHA1withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA1withRSA);\n+    public static final ObjectIdentifier SHA224withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA224withRSA);\n+    public static final ObjectIdentifier SHA256withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA256withRSA);\n+    public static final ObjectIdentifier SHA384withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA384withRSA);\n+    public static final ObjectIdentifier SHA512withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA512withRSA);\n+    public static final ObjectIdentifier SHA512$224withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA512$224withRSA);\n+    public static final ObjectIdentifier SHA512$256withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA512$256withRSA);\n+    public static final ObjectIdentifier MD2withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.MD2withRSA);\n+    public static final ObjectIdentifier MD5withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.MD5withRSA);\n+    public static final ObjectIdentifier SHA3_224withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA3_224withRSA);\n+    public static final ObjectIdentifier SHA3_256withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA3_256withRSA);\n+    public static final ObjectIdentifier SHA3_384withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA3_384withRSA);\n+    public static final ObjectIdentifier SHA3_512withRSA_oid =\n+            ObjectIdentifier.of(KnownOIDs.SHA3_512withRSA);\n","filename":"src\/java.base\/share\/classes\/sun\/security\/x509\/AlgorithmId.java","additions":57,"deletions":72,"binary":false,"changes":129,"status":"modified"},{"patch":"@@ -0,0 +1,115 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8301793\n+ * @summary AlgorithmId should not encode a missing parameters field as NULL unless hardcoded\n+ * @modules java.base\/sun.security.x509\n+ *          java.base\/sun.security.util\n+ *\/\n+\n+import sun.security.util.DerInputStream;\n+import sun.security.util.DerValue;\n+import sun.security.x509.AlgorithmId;\n+\n+public class NullParams {\n+\n+    static boolean failed = false;\n+\n+    public static void main(String[] args) throws Exception {\n+\n+        \/\/ Full new list: must have NULL\n+        test(\"MD2\", true);\n+        test(\"MD5\", true);\n+        test(\"SHA-1\", true);\n+        test(\"SHA-224\", true);\n+        test(\"SHA-256\", true);\n+        test(\"SHA-384\", true);\n+        test(\"SHA-512\", true);\n+        test(\"SHA-512\/224\", true);\n+        test(\"SHA-512\/256\", true);\n+        test(\"SHA3-224\", true);\n+        test(\"SHA3-256\", true);\n+        test(\"SHA3-384\", true);\n+        test(\"SHA3-512\", true);\n+        test(\"RSA\", true);\n+        test(\"MD2withRSA\", true);\n+        test(\"MD5withRSA\", true);\n+        test(\"SHA1withRSA\", true);\n+        test(\"SHA224withRSA\", true);\n+        test(\"SHA256withRSA\", true);\n+        test(\"SHA384withRSA\", true);\n+        test(\"SHA512\/224withRSA\", true);\n+        test(\"SHA512\/256withRSA\", true);\n+        test(\"SHA512withRSA\", true);\n+        test(\"SHA3-224withRSA\", true);\n+        test(\"SHA3-256withRSA\", true);\n+        test(\"SHA3-384withRSA\", true);\n+        test(\"SHA3-512withRSA\", true);\n+\n+        \/\/ Full old list: must be absent\n+        test(\"SHA1withECDSA\", false);\n+        test(\"SHA224withECDSA\", false);\n+        test(\"SHA256withECDSA\", false);\n+        test(\"SHA384withECDSA\", false);\n+        test(\"SHA512withECDSA\", false);\n+        test(\"Ed25519\", false);\n+        test(\"Ed448\", false);\n+        test(\"X25519\", false);\n+        test(\"X448\", false);\n+        test(\"RSASSA-PSS\", false);\n+\n+        \/\/ Others\n+        test(\"DSA\", false);\n+        test(\"SHA1withDSA\", false);\n+        test(\"HmacSHA1\", false);\n+\n+        if (failed) {\n+            throw new RuntimeException(\"At least one failed\");\n+        }\n+    }\n+\n+    static void test(String name, boolean hasNull) throws Exception {\n+        System.out.printf(\"%20s  \", name);\n+        AlgorithmId aid = AlgorithmId.get(name);\n+        byte[] encoding = aid.encode();\n+        DerValue v = new DerValue(encoding);\n+        DerInputStream data = v.data();\n+        data.getOID();\n+        if (hasNull) {\n+            if (data.available() == 0) {\n+                System.out.println(\"NULL missing\");\n+                failed = true;\n+                return;\n+            }\n+        } else {\n+            if (data.available() != 0) {\n+                System.out.println(\"Has unexpected NULL\");\n+                failed = true;\n+                return;\n+            }\n+        }\n+        System.out.println(\"OK\");\n+    }\n+}\n","filename":"test\/jdk\/sun\/security\/x509\/AlgorithmId\/NullParams.java","additions":115,"deletions":0,"binary":false,"changes":115,"status":"added"}]}