{"files":[{"patch":"@@ -80,0 +80,4 @@\n+  if (obj_klass == vmClasses::Class_klass()) {\n+    msg.append(\"  mirrored klass:       \" PTR_FORMAT \"\\n\", p2i(obj->metadata_field(java_lang_Class::klass_offset())));\n+    msg.append(\"  mirrored array klass: \" PTR_FORMAT \"\\n\", p2i(obj->metadata_field(java_lang_Class::array_klass_offset())));\n+  }\n@@ -271,1 +275,3 @@\n-  \/\/ We want to check class loading\/unloading did not corrupt them.\n+  \/\/ We want to check class loading\/unloading did not corrupt them. We can only reasonably\n+  \/\/ trust the forwarded objects, as the from-space object can have the klasses effectively\n+  \/\/ dead.\n@@ -274,8 +280,0 @@\n-    \/\/ During class redefinition the old Klass gets reclaimed and the old mirror oop's Klass reference\n-    \/\/ nulled out (hence the \"klass != nullptr\" condition below). However, the mirror oop may have been\n-    \/\/ forwarded if we are in the mids of an evacuation. In that case, the forwardee's Klass reference\n-    \/\/ is nulled out. The old, forwarded, still still carries the old invalid Klass pointer. It will be\n-    \/\/ eventually collected.\n-    \/\/ This checking code may encounter the old copy of the mirror, and its referee Klass pointer may\n-    \/\/ already be reclaimed and therefore be invalid. We must therefore check the forwardee's Klass\n-    \/\/ reference.\n@@ -285,1 +283,1 @@\n-                    \"Instance class mirror should point to Metaspace\",\n+                    \"Mirrored instance class should point to Metaspace\",\n@@ -289,1 +287,1 @@\n-    Metadata* array_klass = obj->metadata_field(java_lang_Class::array_klass_offset());\n+    const Metadata* array_klass = fwd->metadata_field(java_lang_Class::array_klass_offset());\n@@ -292,1 +290,1 @@\n-                    \"Array class mirror should point to Metaspace\",\n+                    \"Mirrored array class should point to Metaspace\",\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahAsserts.cpp","additions":10,"deletions":12,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -247,1 +247,3 @@\n-    \/\/ We want to check class loading\/unloading did not corrupt them.\n+    \/\/ We want to check class loading\/unloading did not corrupt them. We can only reasonably\n+    \/\/ trust the forwarded objects, as the from-space object can have the klasses effectively\n+    \/\/ dead.\n@@ -250,9 +252,1 @@\n-      \/\/ During class redefinition the old Klass gets reclaimed and the old mirror oop's Klass reference\n-      \/\/ nulled out (hence the \"klass != nullptr\" condition below). However, the mirror oop may have been\n-      \/\/ forwarded if we are in the mids of an evacuation. In that case, the forwardee's Klass reference\n-      \/\/ is nulled out. The old, forwarded, still still carries the old invalid Klass pointer. It will be\n-      \/\/ eventually collected.\n-      \/\/ This checking code may encounter the old copy of the mirror, and its referee Klass pointer may\n-      \/\/ already be reclaimed and therefore be invalid. We must therefore check the forwardee's Klass\n-      \/\/ reference.\n-      Metadata* klass = fwd->metadata_field(java_lang_Class::klass_offset());\n+      const Metadata* klass = fwd->metadata_field(java_lang_Class::klass_offset());\n@@ -261,1 +255,1 @@\n-            \"Instance class mirror should point to Metaspace\");\n+            \"Mirrored instance class should point to Metaspace\");\n@@ -263,1 +257,1 @@\n-      Metadata* array_klass = obj->metadata_field(java_lang_Class::array_klass_offset());\n+      const Metadata* array_klass = obj->metadata_field(java_lang_Class::array_klass_offset());\n@@ -266,1 +260,1 @@\n-            \"Array class mirror should point to Metaspace\");\n+            \"Mirrored array class should point to Metaspace\");\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahVerifier.cpp","additions":7,"deletions":13,"binary":false,"changes":20,"status":"modified"}]}