{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2012, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2012, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,1 @@\n+import java.time.DateTimeException;\n@@ -31,1 +32,1 @@\n-import java.time.ZonedDateTime;\n+import java.time.ZoneOffset;\n@@ -84,1 +85,1 @@\n-        ZonedDateTime timestamp = ZonedDateTime.now();\n+        LocalDateTime timestamp = timestamp();\n@@ -96,1 +97,1 @@\n-            String filename = chunkFilename.next(timestamp.toLocalDateTime());\n+            String filename = chunkFilename.next(timestamp);\n@@ -106,0 +107,9 @@\n+    private static LocalDateTime timestamp() {\n+        try {\n+            return LocalDateTime.now();\n+        } catch (DateTimeException d) {\n+            Logger.log(LogTag.JFR, LogLevel.INFO, \"Could not create LocalDateTime with the default time zone. Using UTC time zone for chunk filename.\");\n+            return LocalDateTime.ofEpochSecond(System.currentTimeMillis(), 0, ZoneOffset.UTC);\n+        }\n+    }\n+\n@@ -110,1 +120,1 @@\n-        String basename = ValueFormatter.formatDateTime(LocalDateTime.now()) + \"_\" + JVM.getPid();\n+        String basename = ValueFormatter.formatDateTime(timestamp()) + \"_\" + JVM.getPid();\n","filename":"src\/jdk.jfr\/share\/classes\/jdk\/jfr\/internal\/Repository.java","additions":15,"deletions":5,"binary":false,"changes":20,"status":"modified"}]}