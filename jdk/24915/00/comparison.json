{"files":[{"patch":"@@ -901,7 +901,12 @@\n-  \/\/ In a G1 heap, we're supposed to keep allocation from failing by\n-  \/\/ incremental pauses.  Therefore, at least for now, we'll favor\n-  \/\/ expansion over collection.  (This might change in the future if we can\n-  \/\/ do something smarter than full collection to satisfy a failed alloc.)\n-  result = expand_and_allocate(word_size);\n-  if (result != nullptr) {\n-    return result;\n+  if (!is_humongous(word_size)) {\n+    \/\/ In a G1 heap, we're supposed to keep allocation from failing by\n+    \/\/ incremental pauses.  Therefore, at least for now, we'll favor\n+    \/\/ expansion over collection.  (This might change in the future if we can\n+    \/\/ do something smarter than full collection to satisfy a failed alloc.)\n+    \/\/\n+    \/\/ For humongous objects, we should have expanded the heap on the first\n+    \/\/ attempt_allocation_at_safepoint above.\n+    result = expand_and_allocate(word_size);\n+    if (result != nullptr) {\n+      return result;\n+    }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":12,"deletions":7,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -481,1 +481,1 @@\n-  if (num_regions > available()) {\n+  if (num_regions > (num_free_regions() + available())) {\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapRegionManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}