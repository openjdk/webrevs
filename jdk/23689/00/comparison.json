{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,3 @@\n+import jdk.internal.foreign.Utils;\n+import org.testng.annotations.DataProvider;\n+\n@@ -27,2 +30,6 @@\n-import java.lang.foreign.*;\n-\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n@@ -39,3 +46,0 @@\n-import jdk.internal.foreign.Utils;\n-import org.testng.annotations.*;\n-\n","filename":"test\/jdk\/java\/foreign\/CallGeneratorHelper.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,1 @@\n+import org.testng.annotations.DataProvider;\n@@ -26,1 +27,2 @@\n-import java.lang.foreign.*;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n@@ -31,2 +33,0 @@\n-import org.testng.annotations.*;\n-\n","filename":"test\/jdk\/java\/foreign\/CompositeLookupTest.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -27,1 +27,0 @@\n-import java.lang.foreign.*;\n@@ -29,0 +28,4 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n","filename":"test\/jdk\/java\/foreign\/LibraryLookupTest.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,9 @@\n-import java.lang.foreign.*;\n+\n+import java.lang.foreign.AddressLayout;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.PaddingLayout;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.StructLayout;\n+import java.lang.foreign.UnionLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -34,1 +42,1 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n","filename":"test\/jdk\/java\/foreign\/MemoryLayoutPrincipalTotalityTest.java","additions":11,"deletions":3,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,7 @@\n-import java.lang.foreign.*;\n+import java.lang.foreign.AddressLayout;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.PaddingLayout;\n+import java.lang.foreign.StructLayout;\n+import java.lang.foreign.UnionLayout;\n+import java.lang.foreign.ValueLayout;\n","filename":"test\/jdk\/java\/foreign\/MemoryLayoutTypeRetentionTest.java","additions":8,"deletions":2,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,1 +38,0 @@\n-\n","filename":"test\/jdk\/java\/foreign\/NativeTestHelper.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -40,0 +40,2 @@\n+import org.testng.annotations.*;\n+\n@@ -41,1 +43,0 @@\n-import java.lang.foreign.Linker;\n@@ -43,1 +44,1 @@\n-import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.Linker;\n@@ -45,1 +46,1 @@\n-\n+import java.lang.foreign.MemorySegment;\n@@ -49,1 +50,0 @@\n-\n@@ -52,2 +52,0 @@\n-import org.testng.annotations.*;\n-\n","filename":"test\/jdk\/java\/foreign\/SafeFunctionAccessTest.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,8 @@\n+import org.testng.annotations.*;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n@@ -46,4 +54,0 @@\n-import java.lang.foreign.*;\n-\n-import org.testng.annotations.*;\n-\n","filename":"test\/jdk\/java\/foreign\/StdLibTest.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -32,1 +32,10 @@\n-import java.lang.foreign.*;\n+import org.testng.annotations.Test;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.StructLayout;\n+import java.lang.foreign.SymbolLookup;\n@@ -36,1 +45,0 @@\n-import org.testng.annotations.Test;\n","filename":"test\/jdk\/java\/foreign\/Test4BAlignedDouble.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,1 +32,8 @@\n-import java.lang.foreign.*;\n+import org.testng.annotations.*;\n+\n+import java.lang.foreign.AddressLayout;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n@@ -43,1 +50,2 @@\n-import org.testng.annotations.*;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n@@ -45,1 +53,0 @@\n-import static org.testng.Assert.*;\n","filename":"test\/jdk\/java\/foreign\/TestAccessModes.java","additions":11,"deletions":4,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,2 +33,0 @@\n-import java.lang.foreign.*;\n-\n@@ -36,1 +34,0 @@\n-import static org.testng.Assert.*;\n@@ -38,0 +35,3 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n@@ -44,0 +44,3 @@\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n","filename":"test\/jdk\/java\/foreign\/TestAdaptVarHandles.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -30,0 +30,2 @@\n+import org.testng.annotations.*;\n+\n@@ -44,2 +46,0 @@\n-import org.testng.annotations.*;\n-\n","filename":"test\/jdk\/java\/foreign\/TestAddressDereference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -36,2 +39,0 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n","filename":"test\/jdk\/java\/foreign\/TestArrayCopy.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,2 +30,1 @@\n-import java.lang.foreign.*;\n-import java.lang.foreign.MemoryLayout.PathElement;\n+import org.testng.annotations.*;\n@@ -33,3 +32,5 @@\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout.PathElement;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n@@ -42,10 +43,3 @@\n-import org.testng.annotations.*;\n-\n-import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n-import static java.lang.foreign.ValueLayout.JAVA_CHAR;\n-import static java.lang.foreign.ValueLayout.JAVA_DOUBLE;\n-import static java.lang.foreign.ValueLayout.JAVA_FLOAT;\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-import static java.lang.foreign.ValueLayout.JAVA_LONG;\n-import static java.lang.foreign.ValueLayout.JAVA_SHORT;\n-import static org.testng.Assert.*;\n+import static java.lang.foreign.ValueLayout.*;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n","filename":"test\/jdk\/java\/foreign\/TestArrays.java","additions":10,"deletions":16,"binary":false,"changes":26,"status":"modified"},{"patch":"@@ -30,2 +30,4 @@\n-import java.lang.foreign.*;\n-import java.lang.foreign.MemoryLayout.PathElement;\n+import org.testng.SkipException;\n+import org.testng.annotations.*;\n+\n+import sun.nio.ch.DirectBuffer;\n@@ -35,0 +37,6 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout.PathElement;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -72,4 +80,0 @@\n-import org.testng.SkipException;\n-import org.testng.annotations.*;\n-import sun.nio.ch.DirectBuffer;\n-\n","filename":"test\/jdk\/java\/foreign\/TestByteBuffer.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -29,1 +29,2 @@\n-import java.lang.foreign.Arena;\n+import org.testng.annotations.Test;\n+\n@@ -32,2 +33,0 @@\n-import java.nio.ByteOrder;\n-import org.testng.annotations.Test;\n","filename":"test\/jdk\/java\/foreign\/TestClassLoaderFindNative.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,0 @@\n-import java.lang.foreign.*;\n@@ -36,0 +35,3 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n","filename":"test\/jdk\/java\/foreign\/TestDeadlock.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import org.testng.annotations.*;\n+\n@@ -34,1 +36,0 @@\n-\n@@ -36,3 +37,0 @@\n-\n-import org.testng.annotations.*;\n-\n@@ -40,1 +38,2 @@\n-import static org.testng.Assert.*;\n+\n+import static org.testng.Assert.assertEquals;\n","filename":"test\/jdk\/java\/foreign\/TestDereferencePath.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import java.lang.foreign.Linker;\n@@ -27,1 +26,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -29,0 +27,1 @@\n+import java.lang.foreign.MemorySegment;\n@@ -32,1 +31,0 @@\n-import java.util.concurrent.atomic.AtomicReference;\n","filename":"test\/jdk\/java\/foreign\/TestDowncallBase.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,5 @@\n-import java.lang.foreign.*;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n","filename":"test\/jdk\/java\/foreign\/TestDowncallScope.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -36,1 +36,5 @@\n-import java.lang.foreign.*;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n","filename":"test\/jdk\/java\/foreign\/TestDowncallStack.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,0 @@\n-import static org.testng.Assert.*;\n@@ -34,0 +33,2 @@\n+import static org.testng.Assert.assertTrue;\n+\n","filename":"test\/jdk\/java\/foreign\/TestFallbackLookup.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import org.testng.annotations.Test;\n+\n@@ -35,1 +37,0 @@\n-import org.testng.annotations.Test;\n@@ -37,4 +38,1 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertNotEquals;\n-import static org.testng.Assert.assertTrue;\n+import static org.testng.Assert.*;\n","filename":"test\/jdk\/java\/foreign\/TestFunctionDescriptor.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -32,1 +32,11 @@\n-import java.lang.foreign.*;\n+import org.testng.annotations.Test;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.ValueLayout;\n@@ -36,1 +46,0 @@\n-import org.testng.annotations.Test;\n","filename":"test\/jdk\/java\/foreign\/TestHFA.java","additions":11,"deletions":2,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,3 @@\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -49,3 +52,0 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n@@ -54,1 +54,2 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertFalse;\n+import static org.testng.Assert.assertTrue;\n","filename":"test\/jdk\/java\/foreign\/TestHandshake.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,4 @@\n-import java.lang.foreign.AddressLayout;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n+import java.lang.foreign.Arena;\n@@ -32,1 +35,0 @@\n-import java.lang.foreign.Arena;\n@@ -37,2 +39,0 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n","filename":"test\/jdk\/java\/foreign\/TestHeapAlignment.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,4 @@\n+import jdk.internal.foreign.CABI;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -31,1 +35,0 @@\n-import java.lang.foreign.Linker;\n@@ -33,1 +36,1 @@\n-import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.Linker;\n@@ -35,0 +38,1 @@\n+import java.lang.foreign.MemorySegment;\n@@ -44,6 +48,1 @@\n-import jdk.internal.foreign.CABI;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n-import static java.lang.foreign.ValueLayout.*;\n-\n+import static java.lang.foreign.ValueLayout.ADDRESS;\n","filename":"test\/jdk\/java\/foreign\/TestIllegalLink.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -33,2 +33,1 @@\n-import java.lang.foreign.Linker;\n-import java.lang.foreign.FunctionDescriptor;\n+import org.testng.annotations.*;\n@@ -36,0 +35,3 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n@@ -41,3 +43,0 @@\n-import java.lang.foreign.MemoryLayout;\n-import org.testng.annotations.*;\n-\n@@ -45,1 +44,0 @@\n-import static java.lang.invoke.MethodType.methodType;\n","filename":"test\/jdk\/java\/foreign\/TestIntrinsics.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,0 @@\n-import java.lang.foreign.*;\n-import java.lang.foreign.MemoryLayout.PathElement;\n-\n@@ -35,0 +32,7 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout.PathElement;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -40,1 +44,0 @@\n-import java.util.Arrays;\n@@ -43,1 +46,0 @@\n-import java.util.stream.Stream;\n","filename":"test\/jdk\/java\/foreign\/TestLayoutPaths.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import java.lang.foreign.*;\n+import org.testng.annotations.*;\n@@ -31,0 +31,7 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.PaddingLayout;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.StructLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -39,2 +46,0 @@\n-import org.testng.annotations.*;\n-\n","filename":"test\/jdk\/java\/foreign\/TestLayouts.java","additions":9,"deletions":4,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,0 +35,2 @@\n+import org.testng.annotations.Test;\n+\n@@ -47,3 +49,1 @@\n-import org.testng.annotations.Test;\n-\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertTrue;\n","filename":"test\/jdk\/java\/foreign\/TestMappedHandshake.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,1 @@\n-import java.lang.foreign.*;\n-import java.lang.foreign.MemoryLayout.PathElement;\n+import org.testng.annotations.*;\n@@ -35,0 +34,7 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout.PathElement;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -39,2 +45,1 @@\n-import org.testng.annotations.*;\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccess.java","additions":10,"deletions":5,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,3 @@\n-import java.lang.foreign.MemorySegment;\n+import org.testng.SkipException;\n+import org.testng.annotations.*;\n+\n@@ -32,0 +34,1 @@\n+import java.lang.foreign.MemorySegment;\n@@ -36,2 +39,0 @@\n-import org.testng.annotations.*;\n-import org.testng.SkipException;\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAccessInstance.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import org.testng.annotations.*;\n+\n@@ -31,1 +33,3 @@\n-import java.lang.foreign.*;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n@@ -33,0 +37,3 @@\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -43,2 +50,0 @@\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n@@ -49,1 +54,0 @@\n-import org.testng.annotations.*;\n","filename":"test\/jdk\/java\/foreign\/TestMemoryAlignment.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import java.lang.foreign.MemorySegment;\n+import org.testng.annotations.*;\n@@ -31,0 +31,1 @@\n+import java.lang.foreign.MemorySegment;\n@@ -34,3 +35,0 @@\n-import java.lang.foreign.ValueLayout;\n-import org.testng.annotations.*;\n-\n@@ -38,1 +36,1 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n","filename":"test\/jdk\/java\/foreign\/TestMemoryDereference.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,4 @@\n+import jdk.internal.foreign.MemorySessionImpl;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -31,1 +35,0 @@\n-import java.lang.reflect.Method;\n@@ -38,3 +41,0 @@\n-import jdk.internal.foreign.MemorySessionImpl;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n","filename":"test\/jdk\/java\/foreign\/TestMemorySession.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,3 @@\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -31,0 +34,2 @@\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n@@ -32,1 +37,0 @@\n-import java.util.Arrays;\n@@ -36,3 +40,0 @@\n-\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.ValueLayout;\n@@ -42,2 +43,0 @@\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n","filename":"test\/jdk\/java\/foreign\/TestMismatch.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import java.lang.foreign.Linker;\n@@ -35,0 +34,1 @@\n+import java.lang.foreign.Linker;\n@@ -40,1 +40,1 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertTrue;\n","filename":"test\/jdk\/java\/foreign\/TestNULLAddress.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -30,3 +30,0 @@\n-import java.lang.foreign.*;\n-import java.lang.foreign.MemoryLayout.PathElement;\n-\n@@ -36,0 +33,6 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemoryLayout.PathElement;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n","filename":"test\/jdk\/java\/foreign\/TestNative.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n-import java.lang.foreign.*;\n+import java.lang.foreign.Linker;\n","filename":"test\/jdk\/java\/foreign\/TestNoForeignUnsafeOverride.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.lang.foreign.*;\n-\n@@ -40,0 +38,1 @@\n+import java.lang.foreign.AddressLayout;\n@@ -41,0 +40,12 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.PaddingLayout;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.StructLayout;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.UnionLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -56,1 +67,8 @@\n-import java.util.*;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.StringJoiner;\n@@ -65,1 +83,1 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n","filename":"test\/jdk\/java\/foreign\/TestNulls.java","additions":23,"deletions":5,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.fail;\n","filename":"test\/jdk\/java\/foreign\/TestOfBufferIssue.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,2 @@\n+import org.testng.annotations.*;\n+\n@@ -37,2 +39,1 @@\n-import org.testng.annotations.*;\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n","filename":"test\/jdk\/java\/foreign\/TestReshape.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-import java.lang.foreign.ValueLayout;\n@@ -37,2 +36,0 @@\n-import java.util.HexFormat;\n-import java.util.stream.LongStream;\n@@ -40,1 +37,2 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotEquals;\n","filename":"test\/jdk\/java\/foreign\/TestScope.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,5 +29,0 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.ValueLayout;\n-\n@@ -39,0 +34,3 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n@@ -49,4 +47,1 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertNotNull;\n-import static org.testng.Assert.assertTrue;\n-import static org.testng.Assert.fail;\n+import static org.testng.Assert.*;\n","filename":"test\/jdk\/java\/foreign\/TestScopedOperations.java","additions":5,"deletions":10,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,2 +31,0 @@\n-import java.lang.foreign.*;\n-\n@@ -35,0 +33,1 @@\n+import java.lang.foreign.AddressLayout;\n@@ -36,0 +35,4 @@\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.ValueLayout;\n","filename":"test\/jdk\/java\/foreign\/TestSegmentAllocators.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,4 @@\n+import org.testng.SkipException;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -40,4 +44,0 @@\n-import org.testng.SkipException;\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n@@ -45,1 +45,2 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n","filename":"test\/jdk\/java\/foreign\/TestSegmentCopy.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,3 +29,0 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n-\n@@ -36,0 +33,2 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n@@ -39,0 +38,1 @@\n+\n","filename":"test\/jdk\/java\/foreign\/TestSegmentOffset.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,0 +29,3 @@\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -32,0 +35,1 @@\n+import java.lang.foreign.MemorySegment;\n@@ -38,1 +42,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -40,2 +43,0 @@\n-import org.testng.annotations.Test;\n-import org.testng.annotations.DataProvider;\n@@ -43,1 +44,2 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n","filename":"test\/jdk\/java\/foreign\/TestSegmentOverlap.java","additions":7,"deletions":5,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -30,2 +30,0 @@\n-import java.lang.foreign.*;\n-\n@@ -35,0 +33,4 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n","filename":"test\/jdk\/java\/foreign\/TestSegments.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,5 @@\n-import java.lang.foreign.*;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -41,1 +45,0 @@\n-\n","filename":"test\/jdk\/java\/foreign\/TestSharedAccess.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,2 @@\n+import org.testng.annotations.*;\n+\n@@ -33,1 +35,0 @@\n-import org.testng.annotations.*;\n","filename":"test\/jdk\/java\/foreign\/TestSlices.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,1 +29,1 @@\n-import java.lang.foreign.*;\n+import org.testng.annotations.*;\n@@ -31,1 +31,5 @@\n-import java.lang.invoke.VarHandle;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -40,3 +44,1 @@\n-import org.testng.annotations.*;\n-\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n","filename":"test\/jdk\/java\/foreign\/TestSpliterator.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,0 +25,5 @@\n+import org.testng.annotations.*;\n+\n+import jdk.internal.foreign.AbstractMemorySegmentImpl;\n+import jdk.internal.foreign.StringSupport;\n+\n@@ -42,4 +47,0 @@\n-import jdk.internal.foreign.AbstractMemorySegmentImpl;\n-import jdk.internal.foreign.StringSupport;\n-import org.testng.annotations.*;\n-\n","filename":"test\/jdk\/java\/foreign\/TestStringEncoding.java","additions":6,"deletions":5,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,2 +36,3 @@\n-import static java.lang.foreign.ValueLayout.*;\n-import static org.testng.Assert.*;\n+import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertThrows;\n","filename":"test\/jdk\/java\/foreign\/TestStringEncodingJumbo.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -34,1 +34,7 @@\n-import java.lang.foreign.*;\n+import org.testng.annotations.Test;\n+\n+import java.io.IOException;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n@@ -37,1 +43,0 @@\n-import java.io.IOException;\n@@ -42,2 +47,0 @@\n-import org.testng.annotations.Test;\n-\n","filename":"test\/jdk\/java\/foreign\/TestStubAllocFailure.java","additions":8,"deletions":5,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,0 +30,2 @@\n+import org.testng.annotations.*;\n+\n@@ -33,2 +35,0 @@\n-import org.testng.annotations.*;\n-\n","filename":"test\/jdk\/java\/foreign\/TestTypeAccess.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -35,2 +35,0 @@\n-import java.lang.foreign.*;\n-\n@@ -39,0 +37,5 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.GroupLayout;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/jdk\/java\/foreign\/TestUpcallAsync.java","additions":5,"deletions":2,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -25,1 +25,0 @@\n-import java.lang.foreign.*;\n@@ -27,1 +26,3 @@\n-\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n@@ -31,1 +32,0 @@\n-import java.util.function.Function;\n","filename":"test\/jdk\/java\/foreign\/TestUpcallBase.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,2 +35,0 @@\n-import java.lang.foreign.*;\n-\n@@ -40,0 +38,4 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/jdk\/java\/foreign\/TestUpcallHighArity.java","additions":5,"deletions":3,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -34,0 +34,2 @@\n+import org.testng.annotations.Test;\n+\n@@ -37,3 +39,0 @@\n-\n-import org.testng.annotations.Test;\n-\n","filename":"test\/jdk\/java\/foreign\/TestUpcallScope.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -35,0 +35,2 @@\n+import org.testng.annotations.Test;\n+\n@@ -38,3 +40,0 @@\n-\n-import org.testng.annotations.Test;\n-\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStack.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,2 @@\n+import org.testng.annotations.Test;\n+\n@@ -46,3 +48,0 @@\n-\n-import org.testng.annotations.Test;\n-\n@@ -52,0 +51,2 @@\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n@@ -53,1 +54,0 @@\n-import java.util.concurrent.*;\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStress.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,0 @@\n-import java.lang.foreign.*;\n-\n@@ -42,0 +40,3 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/jdk\/java\/foreign\/TestUpcallStructScope.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,2 +32,0 @@\n-import java.lang.foreign.*;\n-import java.nio.ByteOrder;\n@@ -36,0 +34,4 @@\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.nio.ByteOrder;\n+\n@@ -37,1 +39,2 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n","filename":"test\/jdk\/java\/foreign\/TestValueLayouts.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -31,0 +31,3 @@\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -32,1 +35,0 @@\n-import java.lang.foreign.Linker;\n@@ -34,0 +36,1 @@\n+import java.lang.foreign.Linker;\n@@ -35,1 +38,0 @@\n-import java.lang.foreign.ValueLayout;\n@@ -37,4 +39,0 @@\n-\n-import org.testng.annotations.DataProvider;\n-import org.testng.annotations.Test;\n-\n@@ -49,1 +47,1 @@\n-import static java.lang.foreign.MemoryLayout.PathElement.*;\n+import static java.lang.foreign.MemoryLayout.PathElement.groupElement;\n","filename":"test\/jdk\/java\/foreign\/TestVarArgs.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,3 +30,0 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.ValueLayout;\n-\n@@ -35,0 +32,1 @@\n+import java.lang.foreign.Arena;\n@@ -36,1 +34,1 @@\n-import java.lang.invoke.MethodHandles;\n+import java.lang.foreign.ValueLayout;\n","filename":"test\/jdk\/java\/foreign\/TestVarHandleCombinators.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,0 @@\n-import jdk.test.lib.Utils;\n","filename":"test\/jdk\/java\/foreign\/UpcallTestHelper.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,3 +33,0 @@\n-import java.lang.foreign.AddressLayout;\n-import java.lang.foreign.ValueLayout;\n-\n@@ -37,1 +34,0 @@\n-import platform.PlatformLayouts;\n@@ -40,0 +36,1 @@\n+import platform.PlatformLayouts;\n@@ -41,0 +38,2 @@\n+import java.lang.foreign.AddressLayout;\n+import java.lang.foreign.ValueLayout;\n@@ -45,1 +44,1 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertEquals;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestLayoutEquality.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,4 +36,0 @@\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.StructLayout;\n-import java.lang.foreign.MemorySegment;\n@@ -49,0 +45,4 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.StructLayout;\n@@ -54,1 +54,0 @@\n-import static jdk.internal.foreign.abi.aarch64.AArch64Architecture.*;\n@@ -56,0 +55,3 @@\n+import static jdk.internal.foreign.abi.aarch64.AArch64Architecture.StorageType;\n+import static jdk.internal.foreign.abi.aarch64.AArch64Architecture.stackStorage;\n+import static org.testng.Assert.*;\n@@ -58,4 +60,0 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n-\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestLinuxAArch64CallArranger.java","additions":8,"deletions":10,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,4 +36,0 @@\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.StructLayout;\n-import java.lang.foreign.MemorySegment;\n@@ -46,1 +42,0 @@\n-import org.testng.annotations.DataProvider;\n@@ -49,0 +44,4 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.StructLayout;\n@@ -54,1 +53,0 @@\n-import static jdk.internal.foreign.abi.aarch64.AArch64Architecture.*;\n@@ -56,1 +54,2 @@\n-import static platform.PlatformLayouts.AArch64.*;\n+import static jdk.internal.foreign.abi.aarch64.AArch64Architecture.StorageType;\n+import static jdk.internal.foreign.abi.aarch64.AArch64Architecture.stackStorage;\n@@ -59,1 +58,1 @@\n-import static org.testng.Assert.assertTrue;\n+import static platform.PlatformLayouts.AArch64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestMacOsAArch64CallArranger.java","additions":8,"deletions":9,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -39,3 +39,0 @@\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.MemorySegment;\n@@ -45,1 +42,0 @@\n-import jdk.internal.foreign.abi.riscv64.linux.LinuxRISCV64CallArranger;\n@@ -48,0 +44,1 @@\n+import jdk.internal.foreign.abi.riscv64.linux.LinuxRISCV64CallArranger;\n@@ -51,1 +48,3 @@\n-import java.lang.foreign.ValueLayout;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n@@ -57,1 +56,0 @@\n-import static jdk.internal.foreign.abi.riscv64.RISCV64Architecture.*;\n@@ -59,0 +57,3 @@\n+import static jdk.internal.foreign.abi.riscv64.RISCV64Architecture.StorageType;\n+import static jdk.internal.foreign.abi.riscv64.RISCV64Architecture.stackStorage;\n+import static org.testng.Assert.*;\n@@ -61,4 +62,0 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n-\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestRISCV64CallArranger.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,3 +36,0 @@\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.MemorySegment;\n@@ -47,0 +44,3 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n@@ -51,1 +51,0 @@\n-import static jdk.internal.foreign.abi.x64.X86_64Architecture.*;\n@@ -53,0 +52,3 @@\n+import static jdk.internal.foreign.abi.x64.X86_64Architecture.StorageType;\n+import static jdk.internal.foreign.abi.x64.X86_64Architecture.stackStorage;\n+import static org.testng.Assert.*;\n@@ -55,4 +57,0 @@\n-import static org.testng.Assert.assertEquals;\n-import static org.testng.Assert.assertFalse;\n-import static org.testng.Assert.assertTrue;\n-\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestSysVCallArranger.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,3 +35,0 @@\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.MemorySegment;\n@@ -44,1 +41,0 @@\n-import org.testng.annotations.DataProvider;\n@@ -47,0 +43,3 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n@@ -52,1 +51,0 @@\n-import static jdk.internal.foreign.abi.aarch64.AArch64Architecture.*;\n@@ -54,1 +52,2 @@\n-import static platform.PlatformLayouts.AArch64.*;\n+import static jdk.internal.foreign.abi.aarch64.AArch64Architecture.StorageType;\n+import static jdk.internal.foreign.abi.aarch64.AArch64Architecture.stackStorage;\n@@ -57,1 +56,1 @@\n-import static org.testng.Assert.assertTrue;\n+import static platform.PlatformLayouts.AArch64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsAArch64CallArranger.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -37,3 +37,0 @@\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.MemorySegment;\n@@ -48,0 +45,3 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n@@ -53,2 +53,0 @@\n-import static jdk.internal.foreign.abi.Binding.copy;\n-import static jdk.internal.foreign.abi.x64.X86_64Architecture.*;\n@@ -56,2 +54,2 @@\n-import static platform.PlatformLayouts.Win64.*;\n-\n+import static jdk.internal.foreign.abi.x64.X86_64Architecture.StorageType;\n+import static jdk.internal.foreign.abi.x64.X86_64Architecture.stackStorage;\n@@ -59,0 +57,1 @@\n+import static platform.PlatformLayouts.Win64.*;\n","filename":"test\/jdk\/java\/foreign\/callarranger\/TestWindowsCallArranger.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -47,3 +47,1 @@\n-import static java.lang.foreign.ValueLayout.JAVA_DOUBLE;\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-import static java.lang.foreign.ValueLayout.JAVA_LONG;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"test\/jdk\/java\/foreign\/capturecallstate\/TestCaptureCallState.java","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,0 +24,3 @@\n+import jdk.test.lib.RandomFactory;\n+import org.testng.annotations.DataProvider;\n+\n@@ -34,3 +37,0 @@\n-import jdk.test.lib.RandomFactory;\n-import org.testng.annotations.*;\n-\n@@ -38,1 +38,1 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertTrue;\n","filename":"test\/jdk\/java\/foreign\/channels\/AbstractChannelsTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -54,0 +54,1 @@\n+\n@@ -55,1 +56,0 @@\n-import static java.util.concurrent.TimeUnit.SECONDS;\n@@ -57,0 +57,1 @@\n+import static java.util.concurrent.TimeUnit.SECONDS;\n","filename":"test\/jdk\/java\/foreign\/channels\/TestAsyncSocketChannels.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,0 +33,1 @@\n+import java.lang.foreign.MemorySegment;\n@@ -44,2 +45,0 @@\n-import java.lang.foreign.MemorySegment;\n-\n","filename":"test\/jdk\/java\/foreign\/channels\/TestSocketChannels.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,7 +36,8 @@\n-import java.lang.foreign.*;\n-import java.lang.invoke.*;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.util.List;\n-\n-import static jdk.test.lib.Asserts.*;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.invoke.MethodHandle;\n","filename":"test\/jdk\/java\/foreign\/critical\/TestStressAllowHeap.java","additions":9,"deletions":8,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,6 +24,0 @@\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.lang.Module;\n-import java.lang.ModuleLayer;\n-import java.lang.module.ModuleFinder;\n-import java.lang.module.ModuleReference;\n@@ -31,0 +25,1 @@\n+import java.lang.module.ModuleFinder;\n@@ -33,0 +28,2 @@\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n@@ -35,1 +32,0 @@\n-import java.util.stream.Stream;\n@@ -37,0 +33,1 @@\n+import java.util.stream.Stream;\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/NativeAccessDynamicMain.java","additions":5,"deletions":8,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -40,4 +40,0 @@\n-import java.util.List;\n-import java.util.stream.Stream;\n-\n-import jdk.test.lib.process.ProcessTools;\n@@ -45,1 +41,1 @@\n-\n+import jdk.test.lib.process.ProcessTools;\n@@ -48,1 +44,5 @@\n-import static org.testng.Assert.*;\n+\n+import java.util.List;\n+import java.util.stream.Stream;\n+\n+import static org.testng.Assert.assertTrue;\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccess.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -24,1 +24,2 @@\n-import java.util.List;\n+import jdk.test.lib.process.OutputAnalyzer;\n+\n@@ -26,0 +27,1 @@\n+import java.util.List;\n@@ -28,3 +30,1 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n-\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertTrue;\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessBase.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -36,4 +36,0 @@\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import jdk.test.lib.process.ProcessTools;\n@@ -41,1 +37,1 @@\n-\n+import jdk.test.lib.process.ProcessTools;\n@@ -45,0 +41,3 @@\n+import java.util.ArrayList;\n+import java.util.List;\n+\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessDynamic.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -39,0 +39,6 @@\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jdk.test.lib.process.ProcessTools;\n+import jdk.test.lib.util.JarUtils;\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -42,1 +48,0 @@\n-import java.util.List;\n@@ -44,0 +49,1 @@\n+import java.util.List;\n@@ -47,7 +53,0 @@\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jdk.test.lib.process.ProcessTools;\n-import jdk.test.lib.util.JarUtils;\n-\n-import org.testng.annotations.Test;\n-import org.testng.annotations.DataProvider;\n-\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/TestEnableNativeAccessJarManifest.java","additions":7,"deletions":8,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,2 @@\n-import java.lang.foreign.*;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/org\/openjdk\/foreigntest\/unnamed\/PanamaMainUnnamedModule.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,2 @@\n+import org.openjdk.jni.def.PanamaJNIDef;\n+\n@@ -29,2 +31,0 @@\n-import org.openjdk.jni.def.PanamaJNIDef;\n-\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_jni_use_module\/org\/openjdk\/jni\/use\/PanamaJNIUse.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,3 @@\n-import java.lang.foreign.*;\n-import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainDirect.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,3 +26,6 @@\n-import java.lang.foreign.*;\n-import java.lang.foreign.Arena;\n-import java.lang.invoke.*;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainInvoke.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,2 @@\n-import java.lang.foreign.*;\n-import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n@@ -29,0 +29,1 @@\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/jdk\/java\/foreign\/enablenativeaccess\/panama_module\/org\/openjdk\/foreigntest\/PanamaMainReflection.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,1 +28,0 @@\n-import java.lang.foreign.Linker;\n@@ -30,0 +29,1 @@\n+import java.lang.foreign.Linker;\n@@ -35,1 +35,0 @@\n-\n","filename":"test\/jdk\/java\/foreign\/handles\/invoker_module\/handle\/invoker\/MethodHandleInvoker.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,3 @@\n+import org.testng.annotations.DataProvider;\n+import org.testng.annotations.Test;\n+\n@@ -27,0 +30,1 @@\n+import java.lang.foreign.FunctionDescriptor;\n@@ -28,1 +32,2 @@\n-\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n@@ -32,5 +37,0 @@\n-\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.SymbolLookup;\n-\n@@ -40,2 +40,0 @@\n-import org.testng.annotations.*;\n-\n","filename":"test\/jdk\/java\/foreign\/handles\/lookup_module\/handle\/lookup\/MethodHandleLookup.java","additions":7,"deletions":9,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -31,2 +31,2 @@\n-import java.lang.foreign.*;\n-import java.lang.reflect.*;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.reflect.Method;\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/TestLoaderLookup.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -28,1 +28,1 @@\n-import static org.testng.Assert.*;\n+import static org.testng.Assert.assertTrue;\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/TestLoaderLookupJNI.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -29,0 +29,3 @@\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n@@ -33,4 +36,1 @@\n-import org.junit.jupiter.api.Assertions;\n-import org.junit.jupiter.api.Test;\n-\n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertThrows;\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/TestSymbolLookupFindOrThrow.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,3 @@\n-import java.lang.foreign.*;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/jdk\/java\/foreign\/loaderLookup\/invoker\/Invoker.java","additions":4,"deletions":2,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -37,1 +37,5 @@\n-import java.lang.foreign.*;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n@@ -42,6 +46,1 @@\n-import static java.lang.foreign.ValueLayout.ADDRESS;\n-import static java.lang.foreign.ValueLayout.JAVA_BOOLEAN;\n-import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n-import static java.lang.foreign.ValueLayout.JAVA_CHAR;\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-import static java.lang.foreign.ValueLayout.JAVA_SHORT;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"test\/jdk\/java\/foreign\/normalize\/TestNormalize.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -34,1 +34,4 @@\n-import java.lang.foreign.*;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/jdk\/java\/foreign\/passheapsegment\/TestPassHeapSegment.java","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+import jdk.test.whitebox.WhiteBox;\n+\n@@ -78,1 +80,0 @@\n-import java.lang.foreign.Linker;\n@@ -80,0 +81,1 @@\n+import java.lang.foreign.Linker;\n@@ -81,1 +83,0 @@\n-\n@@ -85,2 +86,0 @@\n-import jdk.test.whitebox.WhiteBox;\n-\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestAsyncStackWalk.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -39,0 +39,2 @@\n+import jdk.test.whitebox.WhiteBox;\n+\n@@ -42,1 +44,0 @@\n-\n@@ -47,2 +48,0 @@\n-import jdk.test.whitebox.WhiteBox;\n-\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestReentrantUpcalls.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -77,0 +77,2 @@\n+import jdk.test.whitebox.WhiteBox;\n+\n@@ -78,1 +80,0 @@\n-import java.lang.foreign.Linker;\n@@ -80,0 +81,1 @@\n+import java.lang.foreign.Linker;\n@@ -81,1 +83,0 @@\n-\n@@ -86,2 +87,0 @@\n-import jdk.test.whitebox.WhiteBox;\n-\n","filename":"test\/jdk\/java\/foreign\/stackwalk\/TestStackWalk.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -41,0 +41,2 @@\n+import jdk.test.whitebox.WhiteBox;\n+\n@@ -42,1 +44,0 @@\n-import java.lang.foreign.Linker;\n@@ -44,0 +45,1 @@\n+import java.lang.foreign.Linker;\n@@ -45,1 +47,0 @@\n-\n@@ -50,2 +51,0 @@\n-import jdk.test.whitebox.WhiteBox;\n-\n","filename":"test\/jdk\/java\/foreign\/upcalldeopt\/TestUpcallDeopt.java","additions":3,"deletions":4,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import java.lang.foreign.Linker;\n@@ -34,1 +33,1 @@\n-\n+import java.lang.foreign.Linker;\n","filename":"test\/jdk\/java\/foreign\/virtual\/TestVirtualCalls.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.openjdk.jmh.annotations.TearDown;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocFromSliceTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.openjdk.jmh.annotations.TearDown;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocFromTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -33,1 +33,0 @@\n-import org.openjdk.jmh.annotations.Setup;\n@@ -43,1 +42,0 @@\n-import java.lang.foreign.SegmentAllocator;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/AllocTest.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -38,1 +39,0 @@\n-import jdk.internal.misc.Unsafe;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/BulkOps.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,1 +27,0 @@\n-import java.lang.foreign.Linker;\n@@ -29,0 +28,1 @@\n+import java.lang.foreign.Linker;\n@@ -32,1 +32,0 @@\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CLayouts.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,11 @@\n-import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Warmup;\n@@ -28,2 +38,7 @@\n-import java.lang.foreign.*;\n-import java.lang.invoke.*;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.foreign.ValueLayout;\n+import java.lang.invoke.MethodHandle;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallByRefHighArity.java","additions":19,"deletions":4,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -25,1 +26,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -35,0 +35,1 @@\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadConstant.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,1 +24,1 @@\n-import java.lang.foreign.*;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -27,0 +26,7 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.SymbolLookup;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadHelper.java","additions":9,"deletions":3,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -25,1 +26,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -35,0 +35,1 @@\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CallOverheadVirtual.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -25,0 +26,13 @@\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Group;\n+import org.openjdk.jmh.annotations.GroupThreads;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n@@ -27,1 +41,0 @@\n-import java.lang.invoke.MethodHandle;\n@@ -32,3 +45,1 @@\n-import org.openjdk.jmh.annotations.*;\n-\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ConcurrentClose.java","additions":16,"deletions":5,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,8 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.FunctionDescriptor;\n-import java.lang.foreign.Linker;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.SegmentAllocator;\n-import java.lang.foreign.SymbolLookup;\n-\n-import java.lang.invoke.MethodHandle;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -45,0 +37,7 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n+import java.lang.foreign.SymbolLookup;\n+import java.lang.invoke.MethodHandle;\n@@ -47,1 +46,2 @@\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.ADDRESS;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/CriticalCalls.java","additions":11,"deletions":11,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,4 +30,1 @@\n-import static java.lang.foreign.ValueLayout.JAVA_INT;\n-import static java.lang.foreign.ValueLayout.JAVA_INT_UNALIGNED;\n-import static java.lang.foreign.ValueLayout.JAVA_LONG;\n-import static java.lang.foreign.ValueLayout.JAVA_LONG_UNALIGNED;\n+import static java.lang.foreign.ValueLayout.*;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/JavaLayouts.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -36,1 +37,0 @@\n-import java.lang.foreign.Linker;\n@@ -38,0 +38,1 @@\n+import java.lang.foreign.Linker;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LinkUpcall.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -25,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -27,1 +29,0 @@\n-import org.openjdk.jmh.annotations.CompilerControl;\n@@ -32,1 +33,0 @@\n-import org.openjdk.jmh.annotations.Setup;\n@@ -34,1 +34,0 @@\n-import org.openjdk.jmh.annotations.TearDown;\n@@ -36,1 +35,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -38,1 +36,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -40,0 +37,1 @@\n+import java.lang.foreign.MemorySegment;\n@@ -44,1 +42,1 @@\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverConstant.java","additions":5,"deletions":7,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,1 +24,1 @@\n-import java.lang.foreign.*;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -27,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,1 +33,0 @@\n-import org.openjdk.jmh.annotations.Setup;\n@@ -37,1 +36,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -39,0 +37,4 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SegmentAllocator;\n@@ -43,1 +45,1 @@\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNew.java","additions":8,"deletions":6,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -25,1 +26,1 @@\n-import java.lang.foreign.MemorySegment;\n+import jdk.internal.misc.Unsafe;\n@@ -36,1 +37,0 @@\n-import org.openjdk.jmh.annotations.TearDown;\n@@ -38,1 +38,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -40,0 +39,1 @@\n+import java.lang.foreign.MemorySegment;\n@@ -43,1 +43,1 @@\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNewHeap.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,3 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemoryLayout;\n-import java.lang.foreign.MemorySegment;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -29,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -39,1 +37,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -41,0 +38,3 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstant.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,2 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -28,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -30,1 +29,0 @@\n-import org.openjdk.jmh.annotations.CompilerControl;\n@@ -40,1 +38,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -42,0 +39,2 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n@@ -50,1 +49,1 @@\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantAsType.java","additions":6,"deletions":7,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,2 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -28,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -38,1 +37,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -40,0 +38,2 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantFP.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,2 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -28,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -37,1 +36,0 @@\n-import org.openjdk.jmh.annotations.TearDown;\n@@ -39,1 +37,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -41,0 +38,2 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantHeap.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,2 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -28,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -38,1 +37,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -42,0 +40,2 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n@@ -51,1 +51,1 @@\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantMapped.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,2 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -28,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -38,1 +37,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -40,0 +38,2 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverNonConstantShared.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,2 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -34,1 +32,0 @@\n-import org.openjdk.jmh.annotations.Setup;\n@@ -36,1 +33,0 @@\n-import org.openjdk.jmh.annotations.TearDown;\n@@ -39,0 +35,2 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverOfAddress.java","additions":4,"deletions":6,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -26,0 +27,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -36,1 +38,0 @@\n-import jdk.internal.misc.Unsafe;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverPollutedBuffer.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,2 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -28,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -38,1 +37,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -40,0 +38,2 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverPollutedSegments.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,5 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n-import java.lang.foreign.ValueLayout;\n-import java.util.Random;\n-import java.util.concurrent.TimeUnit;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -31,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -33,0 +29,1 @@\n+import org.openjdk.jmh.annotations.CompilerControl;\n@@ -37,3 +34,0 @@\n-import org.openjdk.jmh.annotations.CompilerControl;\n-import org.openjdk.jmh.annotations.State;\n-import org.openjdk.jmh.annotations.Warmup;\n@@ -41,0 +35,1 @@\n+import org.openjdk.jmh.annotations.State;\n@@ -42,1 +37,7 @@\n-import jdk.internal.misc.Unsafe;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.ValueLayout;\n+import java.util.Random;\n+import java.util.concurrent.TimeUnit;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverRandom.java","additions":12,"deletions":11,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,2 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -39,0 +37,2 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/LoopOverSlice.java","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -25,3 +25,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n-\n+import jdk.internal.misc.Unsafe;\n@@ -37,1 +35,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -39,0 +36,2 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n@@ -41,1 +40,1 @@\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentCopyUnsafe.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,7 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n-\n-import java.lang.invoke.MethodHandle;\n-import java.lang.invoke.MethodHandles;\n-import java.lang.invoke.MethodType;\n-import java.lang.invoke.VarHandle;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -33,0 +26,1 @@\n+import jdk.internal.misc.Unsafe;\n@@ -42,1 +36,0 @@\n-import jdk.internal.misc.Unsafe;\n@@ -44,0 +37,6 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n+import java.lang.invoke.VarHandle;\n@@ -46,1 +45,1 @@\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_INT;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentGetUnsafe.java","additions":10,"deletions":11,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -48,1 +48,2 @@\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n+import static java.lang.foreign.ValueLayout.JAVA_LONG_UNALIGNED;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentVsBits.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,1 @@\n-import org.openjdk.jmh.annotations.Mode;\n-import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.annotations.Fork;\n@@ -32,1 +31,1 @@\n-import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Mode;\n@@ -34,1 +33,0 @@\n-import org.openjdk.jmh.annotations.Fork;\n@@ -37,0 +35,3 @@\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n@@ -39,1 +40,0 @@\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySegmentZeroUnsafe.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,1 +24,1 @@\n-import java.lang.foreign.MemorySegment;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -40,0 +39,1 @@\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/MemorySessionClose.java","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import java.lang.foreign.*;\n-\n@@ -40,0 +38,5 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SequenceLayout;\n+import java.lang.foreign.ValueLayout;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ParallelSum.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import java.lang.foreign.*;\n-\n@@ -31,1 +29,0 @@\n-import org.openjdk.jmh.annotations.TearDown;\n@@ -36,0 +33,1 @@\n+import org.openjdk.jmh.annotations.TearDown;\n@@ -38,0 +36,5 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/PointerInvoke.java","additions":7,"deletions":4,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,1 +24,1 @@\n-import java.lang.foreign.*;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -37,0 +36,5 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n@@ -41,1 +45,0 @@\n-import static java.lang.invoke.MethodHandles.lookup;\n@@ -43,0 +46,1 @@\n+import static java.lang.invoke.MethodHandles.lookup;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/QSort.java","additions":8,"deletions":4,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -31,2 +32,0 @@\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.Setup;\n@@ -34,1 +33,0 @@\n-import org.openjdk.jmh.annotations.TearDown;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ResourceScopeCloseMin.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -45,1 +45,1 @@\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/SegmentBulkMismatch.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import java.lang.foreign.*;\n-\n@@ -31,3 +29,0 @@\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.Param;\n-import org.openjdk.jmh.annotations.TearDown;\n@@ -37,0 +32,2 @@\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n@@ -38,0 +35,1 @@\n+import org.openjdk.jmh.annotations.TearDown;\n@@ -40,0 +38,4 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n@@ -41,0 +43,1 @@\n+import java.lang.foreign.SegmentAllocator;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/StrLenTest.java","additions":9,"deletions":6,"binary":false,"changes":15,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- *  Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ *  Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -27,2 +27,0 @@\n-import java.lang.foreign.MemorySegment;\n-\n@@ -39,0 +37,1 @@\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/TestAdaptVarHandles.java","additions":2,"deletions":3,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,2 +26,0 @@\n-import java.lang.foreign.MemorySegment;\n-\n@@ -30,1 +28,0 @@\n-import org.openjdk.jmh.annotations.CompilerControl;\n@@ -41,0 +38,1 @@\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/TestLoadBytes.java","additions":2,"deletions":4,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,0 @@\n-import org.openjdk.jmh.annotations.TearDown;\n@@ -42,2 +41,0 @@\n-import java.lang.foreign.MemorySegment.Scope;\n-import java.lang.foreign.SegmentAllocator;\n@@ -47,2 +44,0 @@\n-import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n-\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/ToCStringTest.java","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,7 +26,0 @@\n-import java.lang.foreign.*;\n-import java.lang.foreign.Arena;\n-import java.lang.invoke.VarHandle;\n-import org.openjdk.jmh.annotations.*;\n-import org.openjdk.jmh.runner.Runner;\n-import org.openjdk.jmh.runner.options.Options;\n-import org.openjdk.jmh.runner.options.OptionsBuilder;\n@@ -34,0 +27,11 @@\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.lang.foreign.MemorySegment;\n@@ -36,1 +40,2 @@\n-import static java.lang.foreign.ValueLayout.*;\n+import static java.lang.foreign.ValueLayout.JAVA_LONG;\n+import static java.lang.foreign.ValueLayout.JAVA_LONG_UNALIGNED;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/UnrolledAccess.java","additions":14,"deletions":9,"binary":false,"changes":23,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,1 +24,1 @@\n-import java.lang.foreign.*;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -37,0 +36,4 @@\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/Upcalls.java","additions":6,"deletions":3,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,1 +23,0 @@\n-package org.openjdk.bench.java.lang.foreign;\n@@ -25,2 +24,1 @@\n-import java.lang.foreign.Arena;\n-import java.lang.foreign.MemorySegment;\n+package org.openjdk.bench.java.lang.foreign;\n@@ -39,1 +37,2 @@\n-import java.lang.invoke.MethodHandles;\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.MemorySegment;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/VarHandleExact.java","additions":4,"deletions":5,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -25,0 +26,3 @@\n+import org.openjdk.bench.java.lang.foreign.points.support.BBPoint;\n+import org.openjdk.bench.java.lang.foreign.points.support.JNIPoint;\n+import org.openjdk.bench.java.lang.foreign.points.support.PanamaPoint;\n@@ -35,3 +39,0 @@\n-import org.openjdk.bench.java.lang.foreign.points.support.BBPoint;\n-import org.openjdk.bench.java.lang.foreign.points.support.JNIPoint;\n-import org.openjdk.bench.java.lang.foreign.points.support.PanamaPoint;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/PointsAccess.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -25,0 +26,3 @@\n+import org.openjdk.bench.java.lang.foreign.points.support.BBPoint;\n+import org.openjdk.bench.java.lang.foreign.points.support.JNIPoint;\n+import org.openjdk.bench.java.lang.foreign.points.support.PanamaPoint;\n@@ -33,3 +37,0 @@\n-import org.openjdk.bench.java.lang.foreign.points.support.BBPoint;\n-import org.openjdk.bench.java.lang.foreign.points.support.JNIPoint;\n-import org.openjdk.bench.java.lang.foreign.points.support.PanamaPoint;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/PointsAlloc.java","additions":5,"deletions":4,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -23,0 +23,1 @@\n+\n@@ -25,0 +26,2 @@\n+import org.openjdk.bench.java.lang.foreign.points.support.JNIPoint;\n+import org.openjdk.bench.java.lang.foreign.points.support.PanamaPoint;\n@@ -35,2 +38,0 @@\n-import org.openjdk.bench.java.lang.foreign.points.support.JNIPoint;\n-import org.openjdk.bench.java.lang.foreign.points.support.PanamaPoint;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/PointsFree.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -25,2 +25,0 @@\n-import java.lang.foreign.*;\n-\n@@ -29,0 +27,6 @@\n+import java.lang.foreign.Arena;\n+import java.lang.foreign.FunctionDescriptor;\n+import java.lang.foreign.Linker;\n+import java.lang.foreign.MemoryLayout;\n+import java.lang.foreign.MemorySegment;\n+import java.lang.foreign.SymbolLookup;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/points\/support\/PanamaPoint.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -33,1 +33,2 @@\n-import static org.openjdk.bench.java.lang.foreign.CLayouts.*;\n+import static org.openjdk.bench.java.lang.foreign.CLayouts.C_INT;\n+import static org.openjdk.bench.java.lang.foreign.CLayouts.C_POINTER;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/xor\/GetArrayForeignXorOpCriticalImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2023, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2023, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -35,1 +35,2 @@\n-import static org.openjdk.bench.java.lang.foreign.CLayouts.*;\n+import static org.openjdk.bench.java.lang.foreign.CLayouts.C_INT;\n+import static org.openjdk.bench.java.lang.foreign.CLayouts.C_POINTER;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/xor\/GetArrayForeignXorOpImpl.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -26,1 +26,0 @@\n-import org.openjdk.bench.java.lang.foreign.Utils;\n@@ -28,0 +27,1 @@\n+import org.openjdk.bench.java.lang.foreign.Utils;\n@@ -30,1 +30,0 @@\n-import java.lang.foreign.Arena;\n@@ -33,1 +32,0 @@\n-import java.lang.foreign.MemorySegment;\n@@ -38,2 +36,2 @@\n-import static java.lang.foreign.ValueLayout.JAVA_BYTE;\n-import static org.openjdk.bench.java.lang.foreign.CLayouts.*;\n+import static org.openjdk.bench.java.lang.foreign.CLayouts.C_INT;\n+import static org.openjdk.bench.java.lang.foreign.CLayouts.C_POINTER;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/xor\/GetArrayUnsafeXorOpImpl.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -29,2 +29,0 @@\n-import org.openjdk.jmh.annotations.Setup;\n-import org.openjdk.jmh.annotations.Param;\n@@ -34,0 +32,2 @@\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Setup;\n","filename":"test\/micro\/org\/openjdk\/bench\/java\/lang\/foreign\/xor\/XorTest.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"}]}