{"files":[{"patch":"@@ -2058,0 +2058,41 @@\n+\/\/ Check if splitting a bot memory Phi through a parent MergeMem may lead to\n+\/\/ non-termination. For more details, see comments at the call site in\n+\/\/ PhiNode::Ideal. This is really a const method, but Node_List currently only\n+\/\/ permits non-const elements.\n+bool PhiNode::is_split_through_mergemem_terminating() {\n+  ResourceMark rm;\n+  VectorSet visited;\n+  Node_List worklist;\n+  worklist.push(this);\n+  visited.set(this->_idx);\n+  auto maybe_add_to_worklist = [&](Node* input) {\n+    if (input != nullptr &&\n+        (input->is_MergeMem() || input->is_memory_phi()) &&\n+        !visited.test_set(input->_idx)) {\n+      worklist.push(input);\n+      assert(input->adr_type() == TypePtr::BOTTOM,\n+          \"should only visit bottom memory\");\n+    }\n+  };\n+  while (worklist.size() > 0) {\n+    Node* n = worklist.pop();\n+    if (n->is_MergeMem()) {\n+      Node* input = n->as_MergeMem()->base_memory();\n+      if (input == this) {\n+        return false;\n+      }\n+      maybe_add_to_worklist(input);\n+    } else {\n+      assert(n->is_memory_phi(), \"invariant\");\n+      for (uint i = PhiNode::Input; i < n->req(); i++) {\n+        Node* input = n->in(i);\n+        if (input == this) {\n+          return false;\n+        }\n+        maybe_add_to_worklist(input);\n+      }\n+    }\n+  }\n+  return true;\n+}\n+\n@@ -2393,1 +2434,1 @@\n-    bool split_must_terminate = false; \/\/ Is splitting guaranteed to terminate?\n+    bool split_always_terminates = false; \/\/ Is splitting guaranteed to terminate?\n@@ -2406,1 +2447,1 @@\n-          split_must_terminate = true;\n+          split_always_terminates = true;\n@@ -2431,1 +2472,1 @@\n-    if (!split_must_terminate && adr_type() == TypePtr::BOTTOM &&\n+    if (!split_always_terminates && adr_type() == TypePtr::BOTTOM &&\n@@ -2433,36 +2474,1 @@\n-      ResourceMark rm;\n-      VectorSet visited;\n-      Node_List worklist;\n-      worklist.push(this);\n-      visited.set(this->_idx);\n-      auto maybe_add_to_worklist = [&](Node* input) {\n-        if (input != nullptr &&\n-            (input->is_MergeMem() || input->is_memory_phi()) &&\n-            !visited.test_set(input->_idx)) {\n-          worklist.push(input);\n-          assert(input->adr_type() == TypePtr::BOTTOM,\n-                 \"should only visit bottom memory\");\n-        }\n-      };\n-      split_must_terminate = true; \/\/ Assume no circularity until proven otherwise.\n-      while (split_must_terminate && worklist.size() > 0) {\n-        Node* n = worklist.pop();\n-        if (n->is_MergeMem()) {\n-          Node* input = n->as_MergeMem()->base_memory();\n-          if (input == this) {\n-            split_must_terminate = false;\n-            break;\n-          }\n-          maybe_add_to_worklist(input);\n-        } else {\n-          assert(n->is_memory_phi(), \"invariant\");\n-          for (uint i = PhiNode::Input; i < n->req(); i++) {\n-            Node* input = n->in(i);\n-            if (input == this) {\n-              split_must_terminate = false;\n-              break;\n-            }\n-            maybe_add_to_worklist(input);\n-          }\n-        }\n-      }\n+      split_always_terminates = is_split_through_mergemem_terminating();\n@@ -2501,1 +2507,1 @@\n-      } else if (split_must_terminate) {\n+      } else if (split_always_terminates) {\n","filename":"src\/hotspot\/share\/opto\/cfgnode.cpp","additions":46,"deletions":40,"binary":false,"changes":86,"status":"modified"},{"patch":"@@ -185,0 +185,2 @@\n+  bool is_split_through_mergemem_terminating();\n+\n","filename":"src\/hotspot\/share\/opto\/cfgnode.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -30,3 +30,1 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions\n- *                   -XX:CompileCommand=quiet\n- *                   -XX:CompileCommand=compileonly,*Test*::test\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*Test*::test\n@@ -37,3 +35,1 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions\n- *                   -XX:CompileCommand=quiet\n- *                   -XX:CompileCommand=compileonly,*Test*::test\n+ * @run main\/othervm -XX:CompileCommand=compileonly,*Test*::test\n@@ -43,0 +39,1 @@\n+ *                   -XX:+UnlockDiagnosticVMOptions\n@@ -45,2 +42,1 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions\n- *                   -XX:LoopMaxUnroll=0 -XX:CompileCommand=quiet\n+ * @run main\/othervm -XX:LoopMaxUnroll=0\n@@ -51,2 +47,1 @@\n- * @run main\/othervm -XX:+UnlockDiagnosticVMOptions\n- *                   -XX:LoopMaxUnroll=0 -XX:CompileCommand=quiet\n+ * @run main\/othervm -XX:LoopMaxUnroll=0\n@@ -56,0 +51,1 @@\n+ *                   -XX:+UnlockDiagnosticVMOptions\n@@ -101,1 +97,1 @@\n-            for (int i = 0; i < 50; ++i)\n+            for (int i = 0; i < 50; ++i) {\n@@ -108,0 +104,1 @@\n+            }\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestGCMLoadPlacement.java","additions":8,"deletions":11,"binary":false,"changes":19,"status":"modified"}]}