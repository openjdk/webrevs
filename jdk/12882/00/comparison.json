{"files":[{"patch":"@@ -861,0 +861,20 @@\n+    \/**\n+     * Gets the {@code jobject} value wrapped by {@code peerObject}. The returned \"naked\" value is\n+     * only valid as long as {@code peerObject} is valid. Note that the latter may be shorter than\n+     * the lifetime of {@code peerObject}. As such, this method should only be used to pass an\n+     * object parameter across a JNI call from the JVMCI shared library to HotSpot. This method must\n+     * only be called from within the JVMCI shared library.\n+     *\n+     * @param peerObject a reference to an object in the peer runtime\n+     * @return the {@code jobject} value wrapped by {@code peerObject}\n+     * @throws IllegalArgumentException if the current runtime is not the JVMCI shared library or\n+     *             {@code peerObject} is not a peer object reference\n+     *\/\n+    public long getJObjectValue(HotSpotObjectConstant peerObject) {\n+        if (peerObject instanceof IndirectHotSpotObjectConstantImpl) {\n+            IndirectHotSpotObjectConstantImpl remote = (IndirectHotSpotObjectConstantImpl) peerObject;\n+            return remote.getHandle();\n+        }\n+        throw new IllegalArgumentException(\"Cannot get jobject value for \" + peerObject + \" (\" + peerObject.getClass().getName() + \")\");\n+    }\n+\n","filename":"src\/jdk.internal.vm.ci\/share\/classes\/jdk\/vm\/ci\/hotspot\/HotSpotJVMCIRuntime.java","additions":20,"deletions":0,"binary":false,"changes":20,"status":"modified"}]}