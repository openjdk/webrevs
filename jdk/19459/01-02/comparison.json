{"files":[{"patch":"@@ -43,0 +43,6 @@\n+  friend class NativeInstruction;\n+  friend class NativeCall;\n+  friend class NativeMovConstReg;\n+  friend class NativeCallTrampolineStub;\n+  friend class NativePostCallNop;\n+\n@@ -58,0 +64,36 @@\n+  static bool is_load_pc_relative_at(address branch);\n+  static bool is_li16u_at(address instr);\n+\n+  static bool is_trampoline_stub_at(address addr) {\n+    \/\/ Ensure that the stub is exactly\n+    \/\/      ld   t0, L--->auipc + ld\n+    \/\/      jr   t0\n+    \/\/ L:\n+\n+    \/\/ judge inst + register + imm\n+    \/\/ 1). check the instructions: auipc + ld + jalr\n+    \/\/ 2). check if auipc[11:7] == t0 and ld[11:7] == t0 and ld[19:15] == t0 && jr[19:15] == t0\n+    \/\/ 3). check if the offset in ld[31:20] equals the data_offset\n+    assert_cond(addr != nullptr);\n+    const int instr_size = instruction_size;\n+    if (is_auipc_at(addr) &&\n+        is_ld_at(addr + instr_size) &&\n+        is_jalr_at(addr + 2 * instr_size) &&\n+        (extract_rd(addr)                    == x5) &&\n+        (extract_rd(addr + instr_size)       == x5) &&\n+        (extract_rs1(addr + instr_size)      == x5) &&\n+        (extract_rs1(addr + 2 * instr_size)  == x5) &&\n+        (Assembler::extract(Assembler::ld_instr(addr + 4), 31, 20) == trampoline_stub_data_offset)) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+  static bool is_call_at(address instr) {\n+    if (is_jal_at(instr) || is_jalr_at(instr)) {\n+      return true;\n+    }\n+    return false;\n+  }\n+\n+ private:\n@@ -217,1 +259,0 @@\n-  static bool is_li16u_at(address instr);\n@@ -221,1 +262,0 @@\n-  static bool is_load_pc_relative_at(address branch);\n@@ -223,6 +263,0 @@\n-  static bool is_call_at(address instr) {\n-    if (is_jal_at(instr) || is_jalr_at(instr)) {\n-      return true;\n-    }\n-    return false;\n-  }\n@@ -231,27 +265,0 @@\n-  static bool is_trampoline_stub_at(address addr) {\n-    \/\/ Ensure that the stub is exactly\n-    \/\/      ld   t0, L--->auipc + ld\n-    \/\/      jr   t0\n-    \/\/ L:\n-\n-    \/\/ judge inst + register + imm\n-    \/\/ 1). check the instructions: auipc + ld + jalr\n-    \/\/ 2). check if auipc[11:7] == t0 and ld[11:7] == t0 and ld[19:15] == t0 && jr[19:15] == t0\n-    \/\/ 3). check if the offset in ld[31:20] equals the data_offset\n-    assert_cond(addr != nullptr);\n-    const int instr_size = instruction_size;\n-    if (is_auipc_at(addr) &&\n-        is_ld_at(addr + instr_size) &&\n-        is_jalr_at(addr + 2 * instr_size) &&\n-        (extract_rd(addr)                    == x5) &&\n-        (extract_rd(addr + instr_size)       == x5) &&\n-        (extract_rs1(addr + instr_size)      == x5) &&\n-        (extract_rs1(addr + 2 * instr_size)  == x5) &&\n-        (Assembler::extract(Assembler::ld_instr(addr + 4), 31, 20) == trampoline_stub_data_offset)) {\n-      return true;\n-    }\n-    return false;\n-  }\n-\n- private:\n-\n","filename":"src\/hotspot\/cpu\/riscv\/macroAssembler_riscv.hpp","additions":42,"deletions":35,"binary":false,"changes":77,"status":"modified"}]}