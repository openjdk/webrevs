{"files":[{"patch":"@@ -483,1 +483,1 @@\n-    CFLAGS_OS_DEF_JDK=\"-D_GNU_SOURCE -D_REENTRANT -D_LARGEFILE64_SOURCE\"\n+    CFLAGS_OS_DEF_JDK=\"-D_GNU_SOURCE -D_REENTRANT -D_FILE_OFFSET_BITS=64\"\n@@ -489,0 +489,1 @@\n+    CFLAGS_OS_DEF_JDK=\"-D_LARGE_FILES\"\n@@ -546,1 +547,1 @@\n-    ALWAYS_DEFINES_JDK=\"-D_GNU_SOURCE -D_REENTRANT -D_LARGEFILE64_SOURCE -DSTDC\"\n+    ALWAYS_DEFINES_JDK=\"-D_GNU_SOURCE -D_REENTRANT -DSTDC\"\n","filename":"make\/autoconf\/flags-cflags.m4","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -30,4 +30,1 @@\n-ifeq ($(call isTargetOs, linux), true)\n-  SA_CFLAGS := -D_FILE_OFFSET_BITS=64\n-\n-else ifeq ($(call isTargetOs, macosx), true)\n+ifeq ($(call isTargetOs, macosx), true)\n","filename":"make\/modules\/jdk.hotspot.agent\/Lib.gmk","additions":1,"deletions":4,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -141,1 +141,1 @@\n-    struct stat64 stat_buf;\n+    struct stat stat_buf;\n@@ -147,1 +147,1 @@\n-    if (stat64(fn, &stat_buf) == 0) {\n+    if (stat(fn, &stat_buf) == 0) {\n","filename":"src\/java.base\/linux\/native\/libjava\/ProcessHandleImpl_linux.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -60,1 +60,1 @@\n-    off64_t offset = (off64_t)position;\n+    loff_t offset = (loff_t)position;\n@@ -94,1 +94,1 @@\n-    off64_t offset = (off64_t)position;\n+    loff_t offset = (loff_t)position;\n","filename":"src\/java.base\/linux\/native\/libnio\/ch\/FileDispatcherImpl.c","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -168,1 +168,1 @@\n-    return posix_fadvise64((int)fd, (off64_t)offset, (off64_t)len, (int)advice);\n+    return posix_fadvise((int)fd, (off_t)offset, (off_t)len, (int)advice);\n","filename":"src\/java.base\/linux\/native\/libnio\/fs\/LinuxNativeDispatcher.c","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -103,8 +103,0 @@\n-#ifdef __linux__\n-#define _LARGFILE64_SOURCE\n-#define JLI_Lseek                       lseek64\n-#endif\n-#ifdef MACOSX\n-#define JLI_Lseek                       lseek\n-#endif\n-#ifdef _AIX\n@@ -112,1 +104,0 @@\n-#endif\n","filename":"src\/java.base\/share\/native\/libjli\/jli_util.h","additions":0,"deletions":9,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -103,8 +103,0 @@\n-#if defined(_AIX)\n-  #define DIR DIR64\n-  #define dirent dirent64\n-  #define opendir opendir64\n-  #define readdir readdir64\n-  #define closedir closedir64\n-#endif\n-\n","filename":"src\/java.base\/share\/native\/libjli\/wildcard.c","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,5 +49,0 @@\n-#ifdef _ALLBSD_SOURCE\n-#define off64_t off_t\n-#define mmap64 mmap\n-#endif\n-\n@@ -659,1 +654,1 @@\n-            mappedAddr = mmap64(0, zip->mlen, PROT_READ, MAP_SHARED, zip->zfd, (off64_t) offset);\n+            mappedAddr = mmap(0, zip->mlen, PROT_READ, MAP_SHARED, zip->zfd, (off_t) offset);\n","filename":"src\/java.base\/share\/native\/libzip\/zip_util.c","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -52,5 +52,0 @@\n-  #define DIR DIR64\n-  #define dirent dirent64\n-  #define opendir opendir64\n-  #define readdir readdir64\n-  #define closedir closedir64\n","filename":"src\/java.base\/unix\/native\/libjava\/ProcessHandleImpl_unix.c","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -57,6 +57,0 @@\n-#if defined(_ALLBSD_SOURCE)\n-#define stat64 stat\n-#define lstat64 lstat\n-#define fstat64 fstat\n-#endif\n-\n@@ -222,1 +216,1 @@\n-    struct stat64 statbuf;\n+    struct stat statbuf;\n@@ -227,1 +221,1 @@\n-    RESTARTABLE(stat64(pathname, &statbuf), res);\n+    RESTARTABLE(stat(pathname, &statbuf), res);\n@@ -267,1 +261,1 @@\n-    struct stat64 statbuf;\n+    struct stat statbuf;\n@@ -304,1 +298,1 @@\n-    RESTARTABLE(lstat64(DEFAULT_ZONEINFO_FILE, &statbuf), res);\n+    RESTARTABLE(lstat(DEFAULT_ZONEINFO_FILE, &statbuf), res);\n@@ -346,1 +340,1 @@\n-    RESTARTABLE(fstat64(fd, &statbuf), res);\n+    RESTARTABLE(fstat(fd, &statbuf), res);\n","filename":"src\/java.base\/unix\/native\/libjava\/TimeZone_md.c","additions":5,"deletions":11,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -54,17 +54,2 @@\n-#if defined(_AIX)\n-  #if !defined(NAME_MAX)\n-    #define NAME_MAX MAXNAMLEN\n-  #endif\n-  #define DIR DIR64\n-  #define dirent dirent64\n-  #define opendir opendir64\n-  #define readdir readdir64\n-  #define closedir closedir64\n-  #define stat stat64\n-#endif\n-\n-#if defined(_ALLBSD_SOURCE)\n-  #ifndef MACOSX\n-    #define statvfs64 statvfs\n-    #define stat64 stat\n-  #endif\n+#if defined(_AIX) && !defined(NAME_MAX)\n+  #define NAME_MAX MAXNAMLEN\n@@ -120,2 +105,2 @@\n-    struct stat64 sb;\n-    if (stat64(path, &sb) == 0) {\n+    struct stat sb;\n+    if (stat(path, &sb) == 0) {\n@@ -232,2 +217,2 @@\n-        struct stat64 sb;\n-        if (stat64(path, &sb) == 0) {\n+        struct stat sb;\n+        if (stat(path, &sb) == 0) {\n@@ -257,2 +242,2 @@\n-        struct stat64 sb;\n-        if (stat64(path, &sb) == 0) {\n+        struct stat sb;\n+        if (stat(path, &sb) == 0) {\n@@ -412,1 +397,1 @@\n-        struct stat64 sb;\n+        struct stat sb;\n@@ -414,1 +399,1 @@\n-        if (stat64(path, &sb) == 0) {\n+        if (stat(path, &sb) == 0) {\n@@ -470,1 +455,1 @@\n-        struct statvfs64 fsstat;\n+        struct statvfs fsstat;\n@@ -494,1 +479,1 @@\n-        RESTARTABLE(statvfs64(path, &fsstat), res);\n+        RESTARTABLE(statvfs(path, &fsstat), res);\n","filename":"src\/java.base\/unix\/native\/libjava\/UnixFileSystem_md.c","additions":12,"deletions":27,"binary":false,"changes":39,"status":"modified"},{"patch":"@@ -62,5 +62,0 @@\n-  #define DIR DIR64\n-  #define dirent dirent64\n-  #define opendir opendir64\n-  #define readdir readdir64\n-  #define closedir closedir64\n","filename":"src\/java.base\/unix\/native\/libjava\/childproc.c","additions":0,"deletions":5,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -77,1 +77,1 @@\n-    RESTARTABLE(open64(path, oflag, mode), fd);\n+    RESTARTABLE(open(path, oflag, mode), fd);\n@@ -79,1 +79,1 @@\n-        struct stat64 buf64;\n+        struct stat buf;\n@@ -81,1 +81,1 @@\n-        RESTARTABLE(fstat64(fd, &buf64), result);\n+        RESTARTABLE(fstat(fd, &buf), result);\n@@ -83,1 +83,1 @@\n-            if (S_ISDIR(buf64.st_mode)) {\n+            if (S_ISDIR(buf.st_mode)) {\n@@ -204,1 +204,1 @@\n-    struct stat64 buf64;\n+    struct stat buf;\n@@ -208,1 +208,1 @@\n-    RESTARTABLE(fstat64(fd, &buf64), result);\n+    RESTARTABLE(fstat(fd, &buf), result);\n@@ -210,1 +210,1 @@\n-        mode = buf64.st_mode;\n+        mode = buf.st_mode;\n@@ -220,1 +220,1 @@\n-            size = buf64.st_size;\n+            size = buf.st_size;\n@@ -224,1 +224,1 @@\n-    if ((current = lseek64(fd, 0, SEEK_CUR)) == -1) {\n+    if ((current = lseek(fd, 0, SEEK_CUR)) == -1) {\n@@ -229,1 +229,1 @@\n-        if ((size = lseek64(fd, 0, SEEK_END)) == -1)\n+        if ((size = lseek(fd, 0, SEEK_END)) == -1)\n@@ -231,1 +231,1 @@\n-        else if (lseek64(fd, current, SEEK_SET) == -1)\n+        else if (lseek(fd, current, SEEK_SET) == -1)\n@@ -243,1 +243,1 @@\n-    RESTARTABLE(ftruncate64(fd, length), result);\n+    RESTARTABLE(ftruncate(fd, length), result);\n@@ -250,1 +250,1 @@\n-    struct stat64 sb;\n+    struct stat sb;\n@@ -252,1 +252,1 @@\n-    RESTARTABLE(fstat64(fd, &sb), result);\n+    RESTARTABLE(fstat(fd, &sb), result);\n","filename":"src\/java.base\/unix\/native\/libjava\/io_util_md.c","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -62,0 +62,1 @@\n+#define IO_Lseek lseek\n@@ -69,11 +70,0 @@\n-#ifdef _ALLBSD_SOURCE\n-#define open64 open\n-#define fstat64 fstat\n-#define stat64 stat\n-#define lseek64 lseek\n-#define ftruncate64 ftruncate\n-#define IO_Lseek lseek\n-#else\n-#define IO_Lseek lseek64\n-#endif\n-\n","filename":"src\/java.base\/unix\/native\/libjava\/io_util_md.h","additions":1,"deletions":11,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -33,6 +33,0 @@\n-#ifdef _ALLBSD_SOURCE\n-#define stat64 stat\n-\n-#define fstat64 fstat\n-#endif\n-\n@@ -54,1 +48,1 @@\n-    struct stat64 fbuf;\n+    struct stat fbuf;\n@@ -57,1 +51,1 @@\n-    RESTARTABLE(fstat64(fdval(env, fdo), &fbuf), res);\n+    RESTARTABLE(fstat(fdval(env, fdo), &fbuf), res);\n@@ -59,1 +53,1 @@\n-        JNU_ThrowIOExceptionWithLastError(env, \"fstat64 failed\");\n+        JNU_ThrowIOExceptionWithLastError(env, \"fstat failed\");\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/FileKey.c","additions":3,"deletions":9,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -32,10 +32,0 @@\n-#define lseek64 lseek\n-#define stat64 stat\n-#define flock64 flock\n-#define off64_t off_t\n-#define F_SETLKW64 F_SETLKW\n-#define F_SETLK64 F_SETLK\n-#define pread64 pread\n-#define pwrite64 pwrite\n-#define ftruncate64 ftruncate\n-#define fstat64 fstat\n@@ -43,3 +33,0 @@\n-#define mmap64 mmap\n-#define statvfs64 statvfs\n-#define fstatvfs64 fstatvfs\n@@ -77,1 +64,1 @@\n-    return convertReturnVal(env, pread64(fd, buf, len, offset), JNI_TRUE);\n+    return convertReturnVal(env, pread(fd, buf, len, offset), JNI_TRUE);\n@@ -106,1 +93,1 @@\n-    return convertReturnVal(env, pwrite64(fd, buf, len, offset), JNI_FALSE);\n+    return convertReturnVal(env, pwrite(fd, buf, len, offset), JNI_FALSE);\n@@ -134,1 +121,1 @@\n-    off64_t result;\n+    off_t result;\n@@ -136,1 +123,1 @@\n-        result = lseek64(fd, 0, SEEK_CUR);\n+        result = lseek(fd, 0, SEEK_CUR);\n@@ -138,1 +125,1 @@\n-        result = lseek64(fd, offset, SEEK_SET);\n+        result = lseek(fd, offset, SEEK_SET);\n@@ -140,1 +127,1 @@\n-    return handle(env, (jlong)result, \"lseek64 failed\");\n+    return handle(env, (jlong)result, \"lseek failed\");\n@@ -164,1 +151,1 @@\n-                  ftruncate64(fdval(env, fdo), size),\n+                  ftruncate(fdval(env, fdo), size),\n@@ -172,1 +159,1 @@\n-    struct stat64 fbuf;\n+    struct stat fbuf;\n@@ -174,1 +161,1 @@\n-    if (fstat64(fd, &fbuf) < 0)\n+    if (fstat(fd, &fbuf) < 0)\n@@ -197,1 +184,1 @@\n-    struct flock64 fl;\n+    struct flock fl;\n@@ -201,1 +188,1 @@\n-        fl.l_len = (off64_t)0;\n+        fl.l_len = (off_t)0;\n@@ -203,1 +190,1 @@\n-        fl.l_len = (off64_t)size;\n+        fl.l_len = (off_t)size;\n@@ -205,1 +192,1 @@\n-    fl.l_start = (off64_t)pos;\n+    fl.l_start = (off_t)pos;\n@@ -212,1 +199,1 @@\n-        cmd = F_SETLKW64;\n+        cmd = F_SETLKW;\n@@ -214,1 +201,1 @@\n-        cmd = F_SETLK64;\n+        cmd = F_SETLK;\n@@ -218,1 +205,1 @@\n-        if ((cmd == F_SETLK64) && (errno == EAGAIN || errno == EACCES))\n+        if ((cmd == F_SETLK) && (errno == EAGAIN || errno == EACCES))\n@@ -233,2 +220,2 @@\n-    struct flock64 fl;\n-    int cmd = F_SETLK64;\n+    struct flock fl;\n+    int cmd = F_SETLK;\n@@ -238,1 +225,1 @@\n-        fl.l_len = (off64_t)0;\n+        fl.l_len = (off_t)0;\n@@ -240,1 +227,1 @@\n-        fl.l_len = (off64_t)size;\n+        fl.l_len = (off_t)size;\n@@ -242,1 +229,1 @@\n-    fl.l_start = (off64_t)pos;\n+    fl.l_start = (off_t)pos;\n@@ -322,1 +309,1 @@\n-    mapAddress = mmap64(\n+    mapAddress = mmap(\n@@ -362,1 +349,1 @@\n-    struct statvfs64 file_stat;\n+    struct statvfs file_stat;\n@@ -390,1 +377,1 @@\n-    result = fstatvfs64(fd, &file_stat);\n+    result = fstatvfs(fd, &file_stat);\n","filename":"src\/java.base\/unix\/native\/libnio\/ch\/UnixFileDispatcherImpl.c","additions":24,"deletions":37,"binary":false,"changes":61,"status":"modified"},{"patch":"@@ -28,0 +28,1 @@\n+#include <string.h>\n@@ -57,18 +58,0 @@\n-#if defined(__linux__) || defined(_AIX)\n-#include <string.h>\n-#endif\n-\n-#ifdef _ALLBSD_SOURCE\n-#include <string.h>\n-\n-#define stat64 stat\n-#ifndef MACOSX\n-#define statvfs64 statvfs\n-#endif\n-\n-#define open64 open\n-#define fstat64 fstat\n-#define lstat64 lstat\n-#define readdir64 readdir\n-#endif\n-\n@@ -173,8 +156,0 @@\n-#if defined(_AIX)\n-  #define DIR DIR64\n-  #define dirent dirent64\n-  #define opendir opendir64\n-  #define readdir readdir64\n-  #define closedir closedir64\n-#endif\n-\n@@ -234,2 +209,2 @@\n-typedef int openat64_func(int, const char *, int, ...);\n-typedef int fstatat64_func(int, const char *, struct stat64 *, int);\n+typedef int openat_func(int, const char *, int, ...);\n+typedef int fstatat_func(int, const char *, struct stat *, int);\n@@ -247,2 +222,2 @@\n-static openat64_func* my_openat64_func = NULL;\n-static fstatat64_func* my_fstatat64_func = NULL;\n+static openat_func* my_openat_func = NULL;\n+static fstatat_func* my_fstatat_func = NULL;\n@@ -264,2 +239,2 @@\n-static int fstatat64_wrapper(int dfd, const char *path,\n-                             struct stat64 *statbuf, int flag)\n+static int fstatat_wrapper(int dfd, const char *path,\n+                             struct stat *statbuf, int flag)\n@@ -276,2 +251,2 @@\n-static int fstatat64_wrapper(int dfd, const char *path,\n-                             struct stat64 *statbuf, int flag)\n+static int fstatat_wrapper(int dfd, const char *path,\n+                             struct stat *statbuf, int flag)\n@@ -378,2 +353,2 @@\n-    my_openat64_func = (openat64_func*)dlsym(RTLD_DEFAULT, \"openat\");\n-    my_fstatat64_func = (fstatat64_func*)dlsym(RTLD_DEFAULT, \"fstatat\");\n+    my_openat_func = (openat_func*)dlsym(RTLD_DEFAULT, \"openat\");\n+    my_fstatat_func = (fstatat_func*)dlsym(RTLD_DEFAULT, \"fstatat\");\n@@ -381,2 +356,3 @@\n-    my_openat64_func = (openat64_func*) dlsym(RTLD_DEFAULT, \"openat64\");\n-    my_fstatat64_func = (fstatat64_func*) dlsym(RTLD_DEFAULT, \"fstatat64\");\n+    \/\/ Make sure we link to the 64-bit version of the functions\n+    my_openat_func = (openat_func*) dlsym(RTLD_DEFAULT, \"openat64\");\n+    my_fstatat_func = (fstatat_func*) dlsym(RTLD_DEFAULT, \"fstatat64\");\n@@ -392,0 +368,1 @@\n+    \/\/ Make sure we link to the 64-bit version of the function\n@@ -399,2 +376,2 @@\n-    if (my_fstatat64_func == NULL)\n-        my_fstatat64_func = (fstatat64_func*)&fstatat64_wrapper;\n+    if (my_fstatat_func == NULL)\n+        my_fstatat_func = (fstatat_func*)&fstatat_wrapper;\n@@ -419,1 +396,1 @@\n-    if (my_openat64_func != NULL &&  my_fstatat64_func != NULL &&\n+    if (my_openat_func != NULL &&  my_fstatat_func != NULL &&\n@@ -546,1 +523,1 @@\n-    RESTARTABLE(open64(path, (int)oflags, (mode_t)mode), fd);\n+    RESTARTABLE(open(path, (int)oflags, (mode_t)mode), fd);\n@@ -560,1 +537,1 @@\n-    if (my_openat64_func == NULL) {\n+    if (my_openat_func == NULL) {\n@@ -565,1 +542,1 @@\n-    RESTARTABLE((*my_openat64_func)(dfd, path, (int)oflags, (mode_t)mode), fd);\n+    RESTARTABLE((*my_openat_func)(dfd, path, (int)oflags, (mode_t)mode), fd);\n@@ -641,1 +618,1 @@\n- * Copy stat64 members into sun.nio.fs.UnixFileAttributes\n+ * Copy stat members into sun.nio.fs.UnixFileAttributes\n@@ -643,1 +620,1 @@\n-static void copy_stat64_attributes(JNIEnv* env, struct stat64* buf, jobject attrs) {\n+static void copy_stat_attributes(JNIEnv* env, struct stat* buf, jobject attrs) {\n@@ -677,1 +654,1 @@\n-    struct stat64 buf;\n+    struct stat buf;\n@@ -685,1 +662,1 @@\n-        \/\/ Prefer statx over stat64 on Linux if it's available\n+        \/\/ Prefer statx over stat on Linux if it's available\n@@ -695,1 +672,1 @@\n-    RESTARTABLE(stat64(path, &buf), err);\n+    RESTARTABLE(stat(path, &buf), err);\n@@ -697,1 +674,1 @@\n-        copy_stat64_attributes(env, &buf, attrs);\n+        copy_stat_attributes(env, &buf, attrs);\n@@ -709,1 +686,1 @@\n-    struct stat64 buf;\n+    struct stat buf;\n@@ -717,1 +694,1 @@\n-        \/\/ Prefer statx over stat64 on Linux if it's available\n+        \/\/ Prefer statx over stat on Linux if it's available\n@@ -728,1 +705,1 @@\n-    RESTARTABLE(lstat64(path, &buf), err);\n+    RESTARTABLE(lstat(path, &buf), err);\n@@ -732,1 +709,1 @@\n-        copy_stat64_attributes(env, &buf, attrs);\n+        copy_stat_attributes(env, &buf, attrs);\n@@ -741,1 +718,1 @@\n-    struct stat64 buf;\n+    struct stat buf;\n@@ -760,1 +737,1 @@\n-    RESTARTABLE(fstat64((int)fd, &buf), err);\n+    RESTARTABLE(fstat((int)fd, &buf), err);\n@@ -764,1 +741,1 @@\n-        copy_stat64_attributes(env, &buf, attrs);\n+        copy_stat_attributes(env, &buf, attrs);\n@@ -773,1 +750,1 @@\n-    struct stat64 buf;\n+    struct stat buf;\n@@ -781,1 +758,1 @@\n-        \/\/ Prefer statx over stat64 on Linux if it's available\n+        \/\/ Prefer statx over stat on Linux if it's available\n@@ -796,1 +773,1 @@\n-    if (my_fstatat64_func == NULL) {\n+    if (my_fstatat_func == NULL) {\n@@ -800,1 +777,1 @@\n-    RESTARTABLE((*my_fstatat64_func)((int)dfd, path, &buf, (int)flag), err);\n+    RESTARTABLE((*my_fstatat_func)((int)dfd, path, &buf, (int)flag), err);\n@@ -804,1 +781,1 @@\n-        copy_stat64_attributes(env, &buf, attrs);\n+        copy_stat_attributes(env, &buf, attrs);\n@@ -1213,1 +1190,1 @@\n-    struct statvfs64 buf;\n+    struct statvfs buf;\n@@ -1220,1 +1197,1 @@\n-    RESTARTABLE(statvfs64(path, &buf), err);\n+    RESTARTABLE(statvfs(path, &buf), err);\n","filename":"src\/java.base\/unix\/native\/libnio\/fs\/UnixNativeDispatcher.c","additions":41,"deletions":64,"binary":false,"changes":105,"status":"modified"},{"patch":"@@ -58,6 +58,0 @@\n-#if defined(_ALLBSD_SOURCE)\n-typedef struct flock FLOCK;\n-#else\n-typedef struct flock64 FLOCK;\n-#endif\n-\n@@ -77,1 +71,1 @@\n-    FLOCK fl;\n+    struct flock fl;\n@@ -104,1 +98,0 @@\n-#if defined(_ALLBSD_SOURCE)\n@@ -106,3 +99,0 @@\n-#else\n-        rc = fcntl(fd, F_SETLK64, &fl);\n-#endif\n@@ -133,1 +123,1 @@\n-    FLOCK fl;\n+    struct flock fl;\n@@ -139,1 +129,0 @@\n-#if defined(_ALLBSD_SOURCE)\n@@ -141,4 +130,0 @@\n-#else\n-    rc = fcntl(fd, F_SETLK64, &fl);\n-#endif\n-\n","filename":"src\/java.prefs\/unix\/native\/libprefs\/FileSystemPreferences.c","additions":2,"deletions":17,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -136,1 +136,1 @@\n-        struct stat64 sb;\n+        struct stat sb;\n@@ -140,1 +140,1 @@\n-        memset(&sb, 0, sizeof(struct stat64));\n+        memset(&sb, 0, sizeof(struct stat));\n@@ -149,1 +149,1 @@\n-        res = stat64(p, &sb);\n+        res = stat(p, &sb);\n","filename":"src\/jdk.attach\/aix\/native\/libattach\/VirtualMachineImpl.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -139,1 +139,1 @@\n-        struct stat64 sb;\n+        struct stat sb;\n@@ -143,1 +143,1 @@\n-        memset(&sb, 0, sizeof(struct stat64));\n+        memset(&sb, 0, sizeof(struct stat));\n@@ -152,1 +152,1 @@\n-        res = stat64(p, &sb);\n+        res = stat(p, &sb);\n","filename":"src\/jdk.attach\/linux\/native\/libattach\/VirtualMachineImpl.c","additions":3,"deletions":3,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,4 +33,0 @@\n-#ifdef _ALLBSD_SOURCE\n-#define stat64 stat\n-#endif\n-\n@@ -63,2 +59,2 @@\n-        struct stat64 sb;\n-        if (stat64(path, &sb) == 0) {\n+        struct stat sb;\n+        if (stat(path, &sb) == 0) {\n@@ -67,1 +63,1 @@\n-            JNU_ThrowIOExceptionWithLastError(env, \"stat64 failed\");\n+            JNU_ThrowIOExceptionWithLastError(env, \"stat failed\");\n","filename":"src\/jdk.management.agent\/unix\/native\/libmanagement_agent\/FileSystemImpl.c","additions":3,"deletions":7,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -77,8 +77,0 @@\n-#if defined(_AIX)\n-  #define DIR DIR64\n-  #define dirent dirent64\n-  #define opendir opendir64\n-  #define readdir readdir64\n-  #define closedir closedir64\n-#endif\n-\n","filename":"src\/jdk.management\/unix\/native\/libmanagement_ext\/OperatingSystemImpl.c","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"}]}