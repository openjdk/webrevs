{"files":[{"patch":"@@ -161,1 +161,1 @@\n-                clb.accept(EnclosingMethodAttribute.of(outerName,\n+                clb.with(EnclosingMethodAttribute.of(outerName,\n@@ -174,1 +174,1 @@\n-                clb.accept(InnerClassesAttribute.of(\n+                clb.with(InnerClassesAttribute.of(\n@@ -187,1 +187,1 @@\n-                clb.accept(InnerClassesAttribute.of(\n+                clb.with(InnerClassesAttribute.of(\n@@ -201,1 +201,1 @@\n-                clb.accept(InnerClassesAttribute.of(\n+                clb.with(InnerClassesAttribute.of(\n@@ -216,1 +216,1 @@\n-                clb.accept(InnerClassesAttribute.of(\n+                clb.with(InnerClassesAttribute.of(\n","filename":"test\/jdk\/java\/lang\/Class\/getSimpleName\/GetSimpleNameTest.java","additions":5,"deletions":5,"binary":false,"changes":10,"status":"modified"},{"patch":"@@ -126,1 +126,1 @@\n-                                    TypeKind kind = TypeKind.fromDescriptor(mt.parameterType(i).descriptorString());\n+                                    TypeKind kind = TypeKind.from(mt.parameterType(i));\n@@ -133,1 +133,1 @@\n-                                cb.returnInstruction(TypeKind.fromDescriptor(mt.returnType().descriptorString()));\n+                                cb.returnInstruction(TypeKind.from(mt.returnType()));\n","filename":"test\/jdk\/java\/lang\/instrument\/asmlib\/Instrumentor.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -145,1 +145,1 @@\n-                    ACC_PUBLIC | ACC_STATIC, mb -> {});\n+                    ACC_PUBLIC , mb -> {});\n","filename":"test\/jdk\/java\/lang\/invoke\/lambda\/LambdaStackTrace.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"}]}