{"files":[{"patch":"@@ -38,2 +38,0 @@\n-import sun.awt.AppContext;\n-\n@@ -154,3 +152,0 @@\n-        final T get() {\n-            return AppContext.getSoftReferenceValue(this, () -> getInstance());\n-        }\n@@ -158,2 +153,7 @@\n-        void reset() {\n-            AppContext.getAppContext().remove(this);\n+        T instance;\n+\n+        final T get() {\n+            if (instance == null) {\n+                instance = getInstance();\n+            }\n+            return instance;\n@@ -203,2 +203,2 @@\n-            final String sizeProperty = System.getProperty(ANIMATIONS_PROPERTY);\n-            return !\"false\".equals(sizeProperty); \/\/ should be true by default\n+            final String animationsProperty = System.getProperty(ANIMATIONS_PROPERTY);\n+            return !\"false\".equals(animationsProperty); \/\/ should be true by default\n","filename":"src\/java.desktop\/macosx\/classes\/com\/apple\/laf\/AquaUtils.java","additions":9,"deletions":9,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -810,17 +810,0 @@\n-    public static <T> T getSoftReferenceValue(Object key,\n-            Supplier<T> supplier) {\n-\n-        final AppContext appContext = AppContext.getAppContext();\n-        @SuppressWarnings(\"unchecked\")\n-        SoftReference<T> ref = (SoftReference<T>) appContext.get(key);\n-        if (ref != null) {\n-            final T object = ref.get();\n-            if (object != null) {\n-                return object;\n-            }\n-        }\n-        final T object = supplier.get();\n-        ref = new SoftReference<>(object);\n-        appContext.put(key, ref);\n-        return object;\n-    }\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/AppContext.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -32,1 +32,0 @@\n-import sun.awt.AppContext;\n@@ -40,2 +39,0 @@\n- * The ImageCache must be used from the thread with an AppContext only.\n- *\n@@ -59,0 +56,2 @@\n+    private static final ImageCache instance = new ImageCache();\n+\n@@ -60,2 +59,1 @@\n-        return AppContext.getSoftReferenceValue(ImageCache.class,\n-                () -> new ImageCache());\n+        return instance;\n","filename":"src\/java.desktop\/share\/classes\/sun\/awt\/image\/ImageCache.java","additions":3,"deletions":5,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -1,108 +0,0 @@\n-\/*\n- * Copyright (c) 2009, 2018, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/*\n- * @test\n- * @bug 6657138\n- * @summary Verifies that buttons and labels don't share their ui's across appContexts\n- * @author Alexander Potochkin\n- * @modules java.desktop\/sun.awt\n- *\/\n-\n-import sun.awt.SunToolkit;\n-\n-import javax.swing.*;\n-import javax.swing.plaf.ButtonUI;\n-import javax.swing.plaf.ComponentUI;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.Set;\n-\n-public class bug6657138 implements Runnable {\n-\n-    private static Map<JComponent, Map<String, ComponentUI>> componentMap =\n-            Collections.synchronizedMap(\n-            new HashMap<JComponent, Map<String, ComponentUI>>());\n-\n-    public void run() {\n-        SunToolkit.createNewAppContext();\n-        try {\n-            testUIMap();\n-        } catch (Exception e) {\n-            throw new RuntimeException(e);\n-        }\n-    }\n-\n-    private static void testUIMap() throws Exception {\n-        UIManager.LookAndFeelInfo[] lafs = UIManager.getInstalledLookAndFeels();\n-        Set<JComponent> components = componentMap.keySet();\n-        for (JComponent c : components) {\n-            Map<String, ComponentUI> uiMap = componentMap.get(c);\n-\n-            for (UIManager.LookAndFeelInfo laf : lafs) {\n-                if (\"Nimbus\".equals(laf.getName())) {\n-                    \/\/ for some unclear reasons\n-                    \/\/ Nimbus ui delegate for a button is null\n-                    \/\/ when this method is called from the new AppContext\n-                    continue;\n-                }\n-                String className = laf.getClassName();\n-                try {\n-                    UIManager.setLookAndFeel(className);\n-                } catch (final UnsupportedLookAndFeelException ignored) {\n-                    continue;\n-                }\n-                ComponentUI ui = UIManager.getUI(c);\n-                if (ui == null) {\n-                    throw new RuntimeException(\"UI is null for \" + c);\n-                }\n-                if (ui == uiMap.get(laf.getName())) {\n-                    throw new RuntimeException(\n-                            \"Two AppContexts share the same UI delegate! \\n\" +\n-                                    c + \"\\n\" + ui);\n-                }\n-                uiMap.put(laf.getName(), ui);\n-            }\n-        }\n-    }\n-\n-    public static void main(String[] args) throws Exception {\n-        componentMap.put(new JButton(\"JButton\"),\n-                new HashMap<String, ComponentUI>());\n-        componentMap.put(new JToggleButton(\"JToggleButton\"),\n-                new HashMap<String, ComponentUI>());\n-        componentMap.put(new JRadioButton(\"JRadioButton\"),\n-                new HashMap<String, ComponentUI>());\n-        componentMap.put(new JCheckBox(\"JCheckBox\"),\n-                new HashMap<String, ComponentUI>());\n-        componentMap.put(new JCheckBox(\"JLabel\"),\n-                new HashMap<String, ComponentUI>());\n-        testUIMap();\n-        ThreadGroup group = new ThreadGroup(\"6657138\");\n-        Thread thread = new Thread(group, new bug6657138());\n-        thread.start();\n-        thread.join();\n-    }\n-}\n-\n","filename":"test\/jdk\/javax\/swing\/Security\/6657138\/bug6657138.java","additions":0,"deletions":108,"binary":false,"changes":108,"status":"deleted"}]}