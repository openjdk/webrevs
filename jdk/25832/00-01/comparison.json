{"files":[{"patch":"@@ -721,1 +721,0 @@\n-  HeapWord* result = nullptr;\n@@ -723,1 +722,1 @@\n-    result = _allocator->attempt_allocation_locked(node_index, word_size);\n+    return _allocator->attempt_allocation_locked(node_index, word_size);\n@@ -725,1 +724,1 @@\n-    result = humongous_obj_allocate(word_size);\n+    HeapWord* result = humongous_obj_allocate(word_size);\n@@ -729,0 +728,1 @@\n+    return result;\n@@ -730,1 +730,2 @@\n-  return result;\n+\n+  ShouldNotReachHere();\n@@ -1013,1 +1014,0 @@\n-  HeapWord* result = nullptr;\n@@ -1017,2 +1017,2 @@\n-    result = attempt_allocation_at_safepoint(word_size,\n-                                             false \/* expect_null_mutator_alloc_region *\/);\n+    return attempt_allocation_at_safepoint(word_size,\n+                                           false \/* expect_null_mutator_alloc_region *\/);\n@@ -1020,1 +1020,1 @@\n-  return result;\n+  return nullptr;\n@@ -1030,2 +1030,2 @@\n-  log_debug(gc, ergo, heap)(\"Heap resize. Requested expansion amount: %zuM aligned expansion amount: %zuM (%u regions)\",\n-                            expand_bytes \/ M, aligned_expand_bytes \/ M, num_regions_to_expand);\n+  log_debug(gc, ergo, heap)(\"Heap resize. Requested expansion amount: %zuB aligned expansion amount: %zuB (%u regions)\",\n+                            expand_bytes, aligned_expand_bytes, num_regions_to_expand);\n@@ -1066,2 +1066,2 @@\n-         \"Shrink request for %zuM not aligned to heap region size %zuM\",\n-         shrink_bytes \/ M, G1HeapRegion::GrainBytes \/ M);\n+         \"Shrink request for %zuB not aligned to heap region size %zuB\",\n+         shrink_bytes, G1HeapRegion::GrainBytes);\n@@ -1074,2 +1074,2 @@\n-  log_debug(gc, ergo, heap)(\"Heap resize. Requested shrinking amount: %zuM actual shrinking amount: %zuM (%u regions)\",\n-                            shrink_bytes \/ M, shrunk_bytes \/ M, num_regions_removed);\n+  log_debug(gc, ergo, heap)(\"Heap resize. Requested shrinking amount: %zuB actual shrinking amount: %zuB (%u regions)\",\n+                            shrink_bytes, shrunk_bytes, num_regions_removed);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":14,"deletions":14,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -127,1 +127,1 @@\n-                            \"at limit %s resize by %zuM expand %s\",\n+                            \"at limit %s resize by %zuB expand %s\",\n@@ -134,1 +134,1 @@\n-                            resize_bytes \/ M,\n+                            resize_bytes,\n@@ -417,3 +417,3 @@\n-                              \"Capacity: %zuMB occupancy: %zuMB live: %zuMB \"\n-                              \"min_desired_capacity: %zuMB (%zu %%)\",\n-                              capacity_after_gc \/ M, used_after_gc \/ M, _g1h->used() \/ M, minimum_desired_capacity \/ M, MinHeapFreeRatio);\n+                              \"Capacity: %zuB occupancy: %zuB live: %zuB \"\n+                              \"min_desired_capacity: %zuB (%zu %%)\",\n+                              capacity_after_gc, used_after_gc, _g1h->used(), minimum_desired_capacity, MinHeapFreeRatio);\n@@ -429,3 +429,3 @@\n-                              \"Capacity: %zuMB occupancy: %zuMB live: %zuMB \"\n-                              \"maximum_desired_capacity: %zuMB (%zu %%)\",\n-                              capacity_after_gc \/ M, used_after_gc \/ M, _g1h->used() \/ M, maximum_desired_capacity \/ M, MaxHeapFreeRatio);\n+                              \"Capacity: %zuB occupancy: %zuB live: %zuB \"\n+                              \"maximum_desired_capacity: %zuB (%zu %%)\",\n+                              capacity_after_gc, used_after_gc, _g1h->used(), maximum_desired_capacity, MaxHeapFreeRatio);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1HeapSizingPolicy.cpp","additions":8,"deletions":8,"binary":false,"changes":16,"status":"modified"}]}