{"files":[{"patch":"@@ -32,1 +32,1 @@\n-\n+\/\/\n@@ -35,1 +35,1 @@\n-\n+\/\/\n@@ -38,1 +38,1 @@\n-\n+\/\/\n@@ -40,1 +40,1 @@\n-\n+\/\/\n@@ -42,1 +42,1 @@\n-\n+\/\/\n@@ -44,1 +44,1 @@\n-\n+\/\/\n@@ -46,1 +46,1 @@\n-\n+\/\/\n@@ -48,1 +48,1 @@\n-\n+\/\/\n@@ -50,1 +50,1 @@\n-\n+\/\/\n@@ -52,1 +52,1 @@\n-\n+\/\/\n@@ -54,1 +54,1 @@\n-\n+\/\/\n@@ -56,1 +56,1 @@\n-\n+\/\/\n@@ -58,1 +58,1 @@\n-\n+\/\/\n@@ -60,1 +60,1 @@\n-\n+\/\/\n@@ -62,1 +62,1 @@\n-\n+\/\/\n@@ -64,1 +64,1 @@\n-\n+\/\/\n@@ -66,1 +66,1 @@\n-\n+\/\/\n@@ -69,1 +69,1 @@\n-\n+\/\/\n@@ -72,1 +72,1 @@\n-\n+\/\/\n@@ -78,1 +78,1 @@\n-\n+\/\/\n@@ -80,1 +80,1 @@\n-\n+\/\/\n@@ -82,1 +82,1 @@\n-\n+\/\/\n@@ -84,1 +84,1 @@\n-\n+\/\/\n@@ -86,1 +86,1 @@\n-\n+\/\/\n@@ -88,1 +88,1 @@\n-\n+\/\/\n@@ -90,1 +90,1 @@\n-\n+\/\/\n@@ -94,1 +94,1 @@\n-\n+\/\/\n@@ -97,1 +97,1 @@\n-\n+\/\/\n@@ -104,1 +104,1 @@\n-\n+\/\/\n@@ -106,1 +106,1 @@\n-\n+\/\/\n@@ -108,1 +108,1 @@\n-\n+\/\/\n@@ -110,1 +110,1 @@\n-\n+\/\/\n@@ -112,1 +112,1 @@\n-\n+\/\/\n@@ -116,1 +116,1 @@\n-\n+\/\/\n@@ -121,1 +121,1 @@\n-\n+\/\/\n@@ -123,1 +123,1 @@\n-\n+\/\/\n","filename":"src\/hotspot\/share\/opto\/divconstants.cpp","additions":36,"deletions":36,"binary":false,"changes":72,"status":"modified"},{"patch":"@@ -85,2 +85,2 @@\n-\/\/ magic_divide_constants in utilities\/javaArithmetic.hpp calculates the constant c, s\n-\/\/ such that division(x \/ d) = floor(x * c \/ m) + (x < 0 ? 1 : 0) for every integer x in\n+\/\/ magic_divide_constants in divconstants.cpp calculates the constant c, s\n+\/\/ such that division(x \/ d) = floor(x * c \/ 2**s) + (x < 0 ? 1 : 0) for every integer x in\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -26,2 +26,2 @@\n-\n-#include <random>\n+#include \"utilities\/globalDefinitions.hpp\"\n+#include \"utilities\/growableArray.hpp\"\n@@ -29,1 +29,1 @@\n-#include <vector>\n+#include \"unittest.hpp\"\n@@ -31,1 +31,2 @@\n-#undef assert\n+template <class T, class UT>\n+static UT random();\n@@ -33,2 +34,29 @@\n-#include \"utilities\/globalDefinitions.hpp\"\n-#include \"unittest.hpp\"\n+template <>\n+juint random<jint, juint>() {\n+  juint bits = juint(os::random()) % 31 + 1;\n+  juint mask = (juint(1) << bits) - 1;\n+  return os::random() & mask;\n+}\n+\n+template <>\n+juint random<juint, juint>() {\n+  juint bits = juint(os::random()) % 32 + 1;\n+  juint mask = bits == 32 ? std::numeric_limits<juint>::max() : (juint(1) << bits) - 1;\n+  return os::random() & mask;\n+}\n+\n+template <>\n+julong random<jlong, julong>() {\n+  juint bits = juint(os::random()) & 63 + 1;\n+  julong mask = (julong(1) << bits) - 1;\n+  julong full = (julong(os::random()) << 32) | os::random();\n+  return full & mask;\n+}\n+\n+template <>\n+julong random<julong, julong>() {\n+  juint bits = juint(os::random()) & 64 + 1;\n+  julong mask = bits == 64 ? std::numeric_limits<julong>::max() : (julong(1) << bits) - 1;\n+  julong full = (julong(os::random()) << 32) | os::random();\n+  return full & mask;\n+}\n@@ -94,5 +122,0 @@\n-  std::random_device rd;\n-  std::minstd_rand rng(rd());\n-  std::uniform_int_distribution<UT> N_dist(0, std::numeric_limits<T>::max());\n-  std::uniform_int_distribution<UT> d_dist(0, std::numeric_limits<T>::max());\n-  std::uniform_int_distribution<juint> min_s_dist(0, sizeof(T) * 8);\n@@ -100,4 +123,4 @@\n-    UT d = d_dist(rng);\n-    UT N_neg = std::is_signed<T>::value ? N_dist(rng) + 1 : 0;\n-    UT N_pos = N_dist(rng);\n-    juint min_s = min_s_dist(rng);\n+    UT d = random<T, UT>();\n+    UT N_neg = std::is_signed<T>::value ? random<T, UT>() + 1 : 0;\n+    UT N_pos = random<T, UT>();\n+    juint min_s = juint(os::random()) % (sizeof(T) * 8 + 1);\n@@ -109,1 +132,1 @@\n-static void test_division_fixed(const std::vector<julong>& values) {\n+static void test_division_fixed(const GrowableArrayView<const julong>& values) {\n@@ -129,1 +152,1 @@\n-  std::vector<julong> values{0, 1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 19, 29, 60, 101, 1000, 9999, 1000000,\n+  static const julong raw_values[] = {0, 1, 2, 3, 5, 6, 7, 8, 11, 14, 15, 19, 29, 60, 101, 1000, 9999, 1000000,\n@@ -135,0 +158,2 @@\n+  GrowableArrayFromArray<const julong> values(raw_values, sizeof(raw_values) \/ sizeof(julong));\n+\n","filename":"test\/hotspot\/gtest\/opto\/test_constant_division.cpp","additions":42,"deletions":17,"binary":false,"changes":59,"status":"modified"}]}