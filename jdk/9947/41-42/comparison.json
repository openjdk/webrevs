{"files":[{"patch":"@@ -27,0 +27,1 @@\n+\n","filename":"src\/hotspot\/share\/opto\/divconstants.cpp","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -26,2 +26,0 @@\n-#include <limits>\n-#include <type_traits>\n@@ -42,0 +40,2 @@\n+#include <limits>\n+#include <type_traits>\n","filename":"src\/hotspot\/share\/opto\/divnode.cpp","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -29,0 +29,1 @@\n+\n@@ -34,0 +35,3 @@\n+\/\/ We are dealing with inputs of divisions so it makes more sense\n+\/\/ to have inputs following approximately a reciprocal (log-uniform)\n+\/\/ distribution\n@@ -39,1 +43,1 @@\n-  juint bits = juint(os::random()) % 31 + 1;\n+  juint bits = (juint(os::random()) % 31) + 1;\n@@ -46,1 +50,1 @@\n-  juint bits = juint(os::random()) % 32 + 1;\n+  juint bits = (juint(os::random()) % 32) + 1;\n@@ -54,1 +58,1 @@\n-  juint bits = juint(os::random()) % 63 + 1;\n+  juint bits = (juint(os::random()) % 63) + 1;\n@@ -62,1 +66,1 @@\n-  juint bits = juint(os::random()) % 64 + 1;\n+  juint bits = (juint(os::random()) % 64) + 1;\n@@ -100,0 +104,1 @@\n+  \/\/ This also filters out d = 0 so don't use is_power_of_2\n@@ -133,1 +138,1 @@\n-      continue;\n+      d = 7;\n@@ -139,1 +144,1 @@\n-      continue;\n+      N_pos = d;\n@@ -175,1 +180,1 @@\n-      continue;\n+      d = 7;\n@@ -181,1 +186,1 @@\n-      continue;\n+      d = 7;\n","filename":"test\/hotspot\/gtest\/opto\/test_constant_division.cpp","additions":13,"deletions":8,"binary":false,"changes":21,"status":"modified"}]}