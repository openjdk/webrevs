{"files":[{"patch":"@@ -1731,0 +1731,28 @@\n+\n+  \/* AndNode has a special handling when one of the operands is a LShiftNode:\n+   * (LHS << s) & RHS\n+   * if RHS fits in less than s bits, the value of this expression is 0.\n+   * The difficulty is that there might be a conversion node (ConvI2L) between\n+   * the LShiftINode and the AndLNode, like so:\n+   * AndLNode(ConvI2L(LShiftI(LHS, s)), RHS)\n+   * This case is handled by And[IL]Node::Value(PhaseGVN*)\n+   * (see `AndIL_min_trailing_zeros`).\n+   *\n+   * But, when the shift is updated during IGVN, pushing the user (ConvI2L)\n+   * is not enough: there might be no update happening there. We need to\n+   * directly push the And[IL]Node on the worklist, jumping over ConvI2L.\n+   *\n+   * Moreover we can have ConstraintCasts in between. It may look like\n+   * ConstraintCast+ -> ConvI2L -> ConstraintCast+ -> And\n+   * and And[IL]Node::Value(PhaseGVN*) still handles that by looking through casts.\n+   * So we must deal with that as well.\n+   *\/\n+  if (use->is_ConstraintCast() || use_op == Op_ConvI2L) {\n+    auto is_boundary = [](Node* n){ return !n->is_ConstraintCast() && n->Opcode() != Op_ConvI2L; };\n+    auto push_and_to_worklist = [&worklist](Node* n){\n+      if (n->Opcode() == Op_AndL || n->Opcode() == Op_AndI) {\n+        worklist.push(n);\n+      }\n+    };\n+    use->visit_uses(push_and_to_worklist, is_boundary);\n+  }\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":28,"deletions":0,"binary":false,"changes":28,"status":"modified"},{"patch":"@@ -0,0 +1,68 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8319372 8320909\n+ * @summary Missed optimization in IGVN because `CastIINode::Value` used to\n+ *          look for deep structures. Reported in 8320909. Fixed in 8319372.\n+ *\n+ * @run main\/othervm\n+ *           -XX:CompileCommand=quiet\n+ *           -XX:CompileCommand=compileonly,MissedOptCastII::*\n+ *           -XX:-TieredCompilation -Xcomp\n+ *           -XX:+IgnoreUnrecognizedVMOptions\n+ *           -XX:+StressIGVN -XX:VerifyIterativeGVN=10\n+ *           MissedOptCastII\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8319372 8320909\n+ *\n+ * @run main\/othervm MissedOptCastII\n+ *\/\n+\n+public class MissedOptCastII {\n+    static long res = 0;\n+\n+    static void test() {\n+        int i, i1 = 0, k, l = -4;\n+        for (i = 0; i < 100; i++) {\n+            for (int j = 0; j < 10; j++) {\n+                for (k = 1; k < 2; k++) {\n+                    i1 = l;\n+                    l += k * k;\n+                    if (l != 0) {\n+                        res = i + i1 + Float.floatToIntBits(2);\n+                    }\n+                }\n+            }\n+        }\n+        res = i + i1;\n+    }\n+\n+    public static void main(String[] args) {\n+        test();\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/MissedOptCastII.java","additions":68,"deletions":0,"binary":false,"changes":68,"status":"added"},{"patch":"@@ -0,0 +1,72 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8320909\n+ * @summary AndNode has a special handling when one of the operands is a LShiftNode:\n+ *          (LHS << s) & RHS\n+ *          if RHS fits in less than s bits, the value of this expression is 0.\n+ *          The case where there is a conversion node between the Shift and the And as in:\n+ *          AndLNode(ConvI2L(LShiftI(LHS, s)), RHS)\n+ *          is also handled, but the AndL must be pushed directly in IGVN's worklist because\n+ *          ConvI2L might not have an update when its input change. In this example, the\n+ *          input was a Phi with a dead branch and becomes a LShiftI with the same type.\n+ *\n+ * @run main\/othervm\n+ *          -XX:CompileOnly=MissedOptWithShiftConvAnd::test\n+ *          -XX:-TieredCompilation -Xbatch\n+ *          -XX:+IgnoreUnrecognizedVMOptions -XX:VerifyIterativeGVN=10\n+ *          MissedOptWithShiftConvAnd\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8320909\n+ *\n+ * @run main\/othervm MissedOptWithShiftConvAnd\n+ *\/\n+\n+public class MissedOptWithShiftConvAnd {\n+    static long lFld;\n+\n+    public static void main(String[] strArr) {\n+        for (int i = 0; i < 100; i++) {\n+            test();\n+        }\n+    }\n+\n+    static void test() {\n+        long l3 = 0;\n+        int i13 = 1;\n+        for (l3 = 8; l3 < 200; ++l3) {\n+            for (int i12 = 1; i12 < 2; i12++) {\n+                i13 <<= 73;\n+            }\n+        }\n+        for (int i14 = 1; 2 > i14; ++i14) {\n+            i13 &= l3;\n+            lFld = i13;\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/MissedOptWithShiftConvAnd.java","additions":72,"deletions":0,"binary":false,"changes":72,"status":"added"},{"patch":"@@ -0,0 +1,76 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8320909\n+ * @summary Similar to MissedOptWithShiftConvAnd, but with CastII on the way.\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm\n+ *          -XX:CompileOnly=MissedOptWithShiftConvCastAnd::test\n+ *          -XX:-TieredCompilation -Xbatch\n+ *          -XX:+IgnoreUnrecognizedVMOptions -XX:VerifyIterativeGVN=10\n+ *          MissedOptWithShiftConvCastAnd\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8320909\n+ * @library \/test\/lib\n+ *\n+ * @run main\/othervm MissedOptWithShiftConvCastAnd\n+ *\/\n+\n+import jdk.test.lib.Utils;\n+\n+public class MissedOptWithShiftConvCastAnd {\n+    static long instanceCount;\n+\n+    public static void main(String[] args) throws Exception {\n+        Thread thread = new Thread() {\n+            public void run() {\n+                test(0);\n+            }\n+        };\n+        \/\/ Give thread some time to trigger compilation\n+        thread.setDaemon(true);\n+        thread.start();\n+        Thread.sleep(Utils.adjustTimeout(500));\n+    }\n+\n+    static void test(int x) {\n+        for (int i = 3; ; ++i) {\n+            for (int j = 5; j > 1; --j) {\n+                instanceCount >>= x <<= 16;\n+            }\n+            x >>>= 16;\n+            for (int j = 1; j < 5; j++) {\n+                try {\n+                    x = 1;\n+                } catch (ArithmeticException a_e) {\n+                }\n+            }\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/gvn\/MissedOptWithShiftConvCastAnd.java","additions":76,"deletions":0,"binary":false,"changes":76,"status":"added"}]}