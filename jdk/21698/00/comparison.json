{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2019, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2019, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -718,0 +718,6 @@\n+    public JPackageCommand setExecuteWithoutExitCodeCheck(boolean v) {\n+        verifyMutable();\n+        executeWithoutExitCodeCheck = v;\n+        return this;\n+    }\n+\n@@ -789,4 +795,12 @@\n-        Executor.Result result = new JPackageCommand(this)\n-                .adjustArgumentsBeforeExecution()\n-                .createExecutor()\n-                .execute(expectedExitCode);\n+        Executor.Result result;\n+        if (executeWithoutExitCodeCheck) {\n+            result = new JPackageCommand(this)\n+                    .adjustArgumentsBeforeExecution()\n+                    .createExecutor()\n+                    .executeWithoutExitCodeCheck();\n+        } else {\n+            result = new JPackageCommand(this)\n+                    .adjustArgumentsBeforeExecution()\n+                    .createExecutor()\n+                    .execute(expectedExitCode);\n+        }\n@@ -1111,0 +1125,1 @@\n+    private boolean executeWithoutExitCodeCheck;\n","filename":"test\/jdk\/tools\/jpackage\/helpers\/jdk\/jpackage\/test\/JPackageCommand.java","additions":20,"deletions":5,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -27,0 +27,1 @@\n+import jdk.jpackage.test.JPackageCommand;\n@@ -37,2 +38,0 @@\n-import jdk.internal.util.OSVersion;\n-\n@@ -52,1 +51,0 @@\n- * @modules java.base\/jdk.internal.util\n@@ -85,3 +83,4 @@\n-\n-        \/\/ On macOS signing may or may not work for modified app bundles.\n-        \/\/ It works on macOS 15 and up, but fails on macOS below 15.\n+        \/\/ On macOS signing may or may not work for modified app bundles, so\n+        \/\/ generating package might fail. We still want to test if app image\n+        \/\/ with addtional content was generated correctly, so on macOS we\n+        \/\/ only generating app image and ignoring jpackage exit code.\n@@ -89,3 +88,1 @@\n-        final boolean isMacOS15 = (OSVersion.current().compareTo(\n-                                      new OSVersion(15, 0, 0)) > 0);\n-        if (testPathArgs.contains(TEST_BAD) || (TKit.isOSX() && !isMacOS15)) {\n+        if (testPathArgs.contains(TEST_BAD)) {\n@@ -97,0 +94,27 @@\n+        if (TKit.isOSX()) {\n+            testOSX(expectedJPackageExitCode);\n+        } else {\n+            testWindowsOrLinux(expectedJPackageExitCode);\n+        }\n+    }\n+\n+    private void testOSX(int expectedJPackageExitCode) throws Exception {\n+        JPackageCommand cmd = JPackageCommand.helloAppImage();\n+        for (String arg : testPathArgs) {\n+            cmd.addArguments(\"--app-content\", arg);\n+        }\n+        if (expectedJPackageExitCode == 0) {\n+            \/\/ If expected code is 0, jpackage might still fail when doing\n+            \/\/ signing. Which is expected on some macOS versions due to\n+            \/\/ additional content.\n+            cmd.setExecuteWithoutExitCodeCheck(true);\n+        }\n+\n+        cmd.execute(expectedJPackageExitCode);\n+\n+        if (expectedJPackageExitCode == 0) {\n+            verify(cmd);\n+        }\n+    }\n+\n+    private void testWindowsOrLinux(int expectedJPackageExitCode) throws Exception {\n@@ -103,12 +127,1 @@\n-            .addInstallVerifier(cmd -> {\n-                ApplicationLayout appLayout = cmd.appLayout();\n-                Path contentDir = appLayout.contentDirectory();\n-                for (String arg : testPathArgs) {\n-                    List<String> paths = Arrays.asList(arg.split(\",\"));\n-                    for (String p : paths) {\n-                        Path name = Path.of(p).getFileName();\n-                        TKit.assertPathExists(contentDir.resolve(name), true);\n-                    }\n-                }\n-\n-            })\n+            .addInstallVerifier(cmd -> { verify(cmd); })\n@@ -117,0 +130,11 @@\n+    }\n+\n+    protected void verify(JPackageCommand cmd) {\n+        ApplicationLayout appLayout = cmd.appLayout();\n+        Path contentDir = appLayout.contentDirectory();\n+        for (String arg : testPathArgs) {\n+            List<String> paths = Arrays.asList(arg.split(\",\"));\n+            for (String p : paths) {\n+                Path name = Path.of(p).getFileName();\n+                TKit.assertPathExists(contentDir.resolve(name), true);\n+            }\n@@ -118,0 +142,1 @@\n+    }\n","filename":"test\/jdk\/tools\/jpackage\/share\/AppContentTest.java","additions":46,"deletions":21,"binary":false,"changes":67,"status":"modified"}]}