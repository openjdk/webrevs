{"files":[{"patch":"@@ -165,3 +165,13 @@\n-        return cleanup != null ?\n-                () -> cleanup.accept(SegmentFactories.makeNativeSegmentUnchecked(address, newSize)) :\n-                null;\n+\n+        record CleanupAction(long address, long newSize, Consumer<MemorySegment> cleanup) implements Runnable {\n+            @Override\n+            public void run() {\n+                cleanup().accept(SegmentFactories.makeNativeSegmentUnchecked(address(), newSize()));\n+            }\n+        }\n+\n+        return cleanup != null\n+                \/\/ Use a record (which is always static) instead of a lambda to avoid\n+                \/\/ capturing and to enable early use in the init sequence.\n+                ? new CleanupAction(address, newSize, cleanup)\n+                : null;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":13,"deletions":3,"binary":false,"changes":16,"status":"modified"}]}