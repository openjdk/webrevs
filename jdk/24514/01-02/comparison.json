{"files":[{"patch":"@@ -165,0 +165,8 @@\n+\n+        record CleanupAction(long address, long newSize, Consumer<MemorySegment> cleanup) implements Runnable {\n+            @Override\n+            public void run() {\n+                cleanup().accept(SegmentFactories.makeNativeSegmentUnchecked(address(), newSize()));\n+            }\n+        }\n+\n@@ -166,8 +174,3 @@\n-                \/\/ Use an anonymous class instead of a lambda to enable early\n-                \/\/ use in the init sequence.\n-                ? new Runnable() {\n-                    @Override\n-                    public void run() {\n-                        cleanup.accept(SegmentFactories.makeNativeSegmentUnchecked(address, newSize));\n-                    }\n-                }\n+                \/\/ Use a record (which is always static) instead of a lambda to avoid\n+                \/\/ capturing and to enable early use in the init sequence.\n+                ? new CleanupAction(address, newSize, cleanup)\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/foreign\/AbstractMemorySegmentImpl.java","additions":11,"deletions":8,"binary":false,"changes":19,"status":"modified"}]}