{"files":[{"patch":"@@ -871,6 +871,1 @@\n-\n-  if (java_lang_VirtualThread::is_instance(thread_oop)) {\n-    *thread_state_ptr = JvmtiEnvBase::get_vthread_state(thread_oop, java_thread);\n-  } else {\n-    *thread_state_ptr = JvmtiEnvBase::get_thread_state(thread_oop, java_thread);\n-  }\n+  *thread_state_ptr = JvmtiEnvBase::get_thread_or_vthread_state(thread_oop, java_thread);\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnv.cpp","additions":1,"deletions":6,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -816,0 +816,11 @@\n+jint\n+JvmtiEnvBase::get_thread_or_vthread_state(oop thread_oop, JavaThread* java_thread) {\n+  jint state = 0;\n+  if (java_lang_VirtualThread::is_instance(thread_oop)) {\n+    state = JvmtiEnvBase::get_vthread_state(thread_oop, java_thread);\n+  } else {\n+    state = JvmtiEnvBase::get_thread_state(thread_oop, java_thread);\n+  }\n+  return state;\n+}\n+\n@@ -936,1 +947,0 @@\n-    \/\/ implied else: no contended ObjectMonitor\n@@ -939,2 +949,8 @@\n-    obj = mon->object();\n-    assert(obj != nullptr, \"Object.wait() should have an object\");\n+    oop thread_oop = get_vthread_or_thread_oop(java_thread);\n+    jint state = get_thread_or_vthread_state(thread_oop, java_thread);\n+\n+    if (state & JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER) {\n+      \/\/ thread is re-entering the monitor in an Object.wait() call\n+      obj = mon->object();\n+      assert(obj != nullptr, \"Object.wait() should have an object\");\n+    }\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.cpp","additions":19,"deletions":3,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -391,1 +391,1 @@\n-  \/\/ get virtual thread thread state\n+  \/\/ get virtual thread state\n@@ -394,0 +394,3 @@\n+  \/\/ get platform or virtual thread state\n+  static jint get_thread_or_vthread_state(oop thread_oop, JavaThread* jt);\n+\n","filename":"src\/hotspot\/share\/prims\/jvmtiEnvBase.hpp","additions":4,"deletions":1,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 1998, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 1998, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -1983,3 +1983,3 @@\n-        \"thread may be waiting to enter a monitor, or it may be waiting, via \"\n-        \"the java.lang.Object.wait method, for another thread to invoke the \"\n-        \"notify method. \"\n+        \"thread may be waiting to enter the object's monitor, or in \"\n+        \"java.lang.Object.wait waiting to re-enter the monitor after being \"\n+        \"notified, interrupted, or timed-out.\"\n","filename":"src\/java.se\/share\/data\/jdwp\/jdwp.spec","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -313,2 +313,2 @@\n-     * {@link Object#wait}.  The {@link #status} method can be used\n-     * to differentiate between the first two cases and the third.\n+     * {@link Object#wait} waiting to re-enter the monitor\n+     * after being notified, interrupted, or timed-out.\n","filename":"src\/jdk.jdi\/share\/classes\/com\/sun\/jdi\/ThreadReference.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -157,0 +157,1 @@\n+\n@@ -164,0 +165,6 @@\n+                            debuggee.VM().resume();\n+                            debuggee.sendSignal(SIGNAL_GO);\n+                            debuggee.receiveExpectedSignal(SIGNAL_GO);\n+                            \/\/ tested thread must be blocked on re-entering monitor in lockingObject.wait()\n+                            debuggee.VM().suspend();\n+\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ObjectReference\/waitingThreads\/waitingthreads004.java","additions":8,"deletions":1,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n- *        waiting for this object's monitor.\n+ *        waiting to re-enter this object's monitor.\n@@ -39,1 +39,2 @@\n- *        - An object with threads waiting in Object.wait(long) method.\n+ *        - An object with threads waiting to re-enter the monitor after being\n+ *          notified during execution of the Object.wait(long) method.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ObjectReference\/waitingThreads\/waitingthreads004\/TestDescription.java","additions":3,"deletions":2,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -99,1 +99,1 @@\n-                receiveSignal(waitingthreads004.SIGNAL_QUIT);\n+                receiveSignal(waitingthreads004.SIGNAL_GO);\n@@ -106,0 +106,4 @@\n+\n+                \/\/ tested thread must be blocked on re-entering monitor in lockingObject.wait()\n+                pipe.println(waitingthreads004.SIGNAL_GO);\n+                receiveSignal(waitingthreads004.SIGNAL_QUIT);\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdi\/ObjectReference\/waitingThreads\/waitingthreads004a.java","additions":6,"deletions":2,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -49,1 +49,2 @@\n- *     thread is waiting for the object at this moment.\n+ *     thread is waiting to re-enter the object monitor after being\n+ *     notified during execution of the Object.wait(long) method.\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/ThreadReference\/CurrentContendedMonitor\/curcontmonitor001\/TestDescription.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2001, 2018, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2001, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -64,0 +64,1 @@\n+        String signal = null;\n@@ -87,0 +88,2 @@\n+                TestedClass.thread.monitor.notifyAll();\n+\n@@ -90,0 +93,5 @@\n+\n+               \/\/ wait for signal QUIT from debugeer\n+               log.display(\"Waiting for signal from debugger: \" + curcontmonitor001.QUIT);\n+               signal = pipe.readln();\n+               log.display(\"Received signal from debugger: \" + signal);\n@@ -93,9 +101,0 @@\n-        \/\/ wait for signal QUIT from debugeer\n-        log.display(\"Waiting for signal from debugger: \" + curcontmonitor001.QUIT);\n-        String signal = pipe.readln();\n-        log.display(\"Received signal from debugger: \" + signal);\n-\n-        \/\/ interrupt waiting thread\n-        log.display(\"Interrupting tested thread being waited\");\n-        TestedClass.thread.interrupt();\n-\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/nsk\/jdwp\/ThreadReference\/CurrentContendedMonitor\/curcontmonitor001a.java","additions":9,"deletions":10,"binary":false,"changes":19,"status":"modified"}]}