{"files":[{"patch":"@@ -849,4 +849,0 @@\n-  if (UseNUMA) {\n-    thread->update_lgrp_id();\n-  }\n-\n@@ -1178,4 +1174,0 @@\n-  if (UseNUMA) {\n-    thread->update_lgrp_id();\n-  }\n-\n","filename":"src\/hotspot\/os\/linux\/os_linux.cpp","additions":0,"deletions":8,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -39,0 +39,1 @@\n+#include \"utilities\/globalDefinitions.hpp\"\n@@ -97,2 +98,2 @@\n-  for (int i = 0; i < lgrp_spaces()->length(); i++) {\n-    s += lgrp_spaces()->at(i)->space()->used_in_words();\n+  for (LGRPSpace* ls : *lgrp_spaces()) {\n+    s += ls->space()->used_in_words();\n@@ -105,2 +106,2 @@\n-  for (int i = 0; i < lgrp_spaces()->length(); i++) {\n-    s += lgrp_spaces()->at(i)->space()->free_in_words();\n+  for (LGRPSpace* ls : *lgrp_spaces()) {\n+    s += ls->space()->free_in_words();\n@@ -111,13 +112,4 @@\n-MutableNUMASpace::LGRPSpace *MutableNUMASpace::lgrp_space_for_thread(Thread* thr) const {\n-  guarantee(thr != nullptr, \"No thread\");\n-\n-  int lgrp_id = thr->lgrp_id();\n-  assert(lgrp_id != -1, \"lgrp_id must be set during thread creation\");\n-\n-  int lgrp_spaces_index = lgrp_spaces()->find_if([&](LGRPSpace* space) {\n-    return space->lgrp_id() == (uint)lgrp_id;\n-  });\n-\n-  if (lgrp_spaces_index == -1) {\n-    \/\/ Running on a CPU with no memory; pick another CPU based on %.\n-    lgrp_spaces_index = lgrp_id % lgrp_spaces()->length();\n+size_t MutableNUMASpace::tlab_capacity(Thread *ignored) const {\n+  size_t s = 0;\n+  for (LGRPSpace* ls : *lgrp_spaces()) {\n+    s += ls->space()->capacity_in_bytes();\n@@ -125,5 +117,1 @@\n-  return lgrp_spaces()->at(lgrp_spaces_index);\n-}\n-\n-size_t MutableNUMASpace::tlab_capacity(Thread *thr) const {\n-  return lgrp_space_for_thread(thr)->space()->capacity_in_bytes();\n+  return s \/ (size_t)lgrp_spaces()->length();\n@@ -132,2 +120,6 @@\n-size_t MutableNUMASpace::tlab_used(Thread *thr) const {\n-  return lgrp_space_for_thread(thr)->space()->used_in_bytes();\n+size_t MutableNUMASpace::tlab_used(Thread *ignored) const {\n+  size_t s = 0;\n+  for (LGRPSpace* ls : *lgrp_spaces()) {\n+    s += ls->space()->used_in_bytes();\n+  }\n+  return s \/ (size_t)lgrp_spaces()->length();\n@@ -136,2 +128,6 @@\n-size_t MutableNUMASpace::unsafe_max_tlab_alloc(Thread *thr) const {\n-  return lgrp_space_for_thread(thr)->space()->free_in_bytes();\n+size_t MutableNUMASpace::unsafe_max_tlab_alloc(Thread *ignored) const {\n+  size_t s = 0;\n+  for (LGRPSpace* ls : *lgrp_spaces()) {\n+    s += ls->space()->free_in_bytes();\n+  }\n+  return align_down(s \/ (size_t)lgrp_spaces()->length(), MinObjAlignmentInBytes);\n@@ -445,2 +441,5 @@\n-HeapWord* MutableNUMASpace::cas_allocate(size_t size) {\n-  Thread *thr = Thread::current();\n+MutableNUMASpace::LGRPSpace *MutableNUMASpace::lgrp_space_for_current_thread() const {\n+  const int lgrp_id = os::numa_get_group_id();\n+  int lgrp_spaces_index = lgrp_spaces()->find_if([&](LGRPSpace* space) {\n+    return space->lgrp_id() == (uint)lgrp_id;\n+  });\n@@ -448,2 +447,4 @@\n-  \/\/ Update the locality group to match where the thread actually is.\n-  thr->update_lgrp_id();\n+  if (lgrp_spaces_index == -1) {\n+    \/\/ Running on a CPU with no memory; pick another CPU based on %.\n+    lgrp_spaces_index = lgrp_id % lgrp_spaces()->length();\n+  }\n@@ -451,1 +452,5 @@\n-  LGRPSpace *ls = lgrp_space_for_thread(thr);\n+  return lgrp_spaces()->at(lgrp_spaces_index);\n+}\n+\n+HeapWord* MutableNUMASpace::cas_allocate(size_t size) {\n+  LGRPSpace *ls = lgrp_space_for_current_thread();\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.cpp","additions":36,"deletions":31,"binary":false,"changes":67,"status":"modified"},{"patch":"@@ -143,1 +143,1 @@\n-  LGRPSpace *lgrp_space_for_thread(Thread *thr) const;\n+  LGRPSpace *lgrp_space_for_current_thread() const;\n@@ -169,3 +169,3 @@\n-  virtual size_t tlab_capacity(Thread* thr) const;\n-  virtual size_t tlab_used(Thread* thr) const;\n-  virtual size_t unsafe_max_tlab_alloc(Thread* thr) const;\n+  virtual size_t tlab_capacity(Thread* ignored) const;\n+  virtual size_t tlab_used(Thread* ignored) const;\n+  virtual size_t unsafe_max_tlab_alloc(Thread* ignored) const;\n","filename":"src\/hotspot\/share\/gc\/parallel\/mutableNUMASpace.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -68,1 +68,0 @@\n-  _lgrp_id = -1;\n","filename":"src\/hotspot\/share\/runtime\/thread.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -525,1 +525,0 @@\n-  int              _lgrp_id;\n@@ -540,3 +539,0 @@\n-  int     lgrp_id() const  { return _lgrp_id; }\n-  void    update_lgrp_id() { _lgrp_id = os::numa_get_group_id(); }\n-\n","filename":"src\/hotspot\/share\/runtime\/thread.hpp","additions":0,"deletions":4,"binary":false,"changes":4,"status":"modified"}]}