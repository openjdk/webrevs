{"files":[{"patch":"@@ -88,0 +88,1 @@\n+import java.util.concurrent.atomic.AtomicReferenceArray;\n@@ -138,1 +139,3 @@\n-    private static final ConcurrentMap<Integer, ZoneOffset> SECONDS_CACHE = new ConcurrentHashMap<>(16, 0.75f, 4);\n+    private static final int MINUTES_15_SECONDS = 15 * SECONDS_PER_MINUTE;\n+    private static final AtomicReferenceArray<ZoneOffset> MINUTES_15_CACHE = new AtomicReferenceArray<>(256);\n+\n@@ -426,3 +429,4 @@\n-        if (totalSeconds % (15 * SECONDS_PER_MINUTE) == 0) {\n-            Integer totalSecs = totalSeconds;\n-            ZoneOffset result = SECONDS_CACHE.get(totalSecs);\n+        int minutes15Rem = totalSeconds \/ MINUTES_15_SECONDS;\n+        if (totalSeconds - minutes15Rem * MINUTES_15_SECONDS == 0) {\n+            int cacheIndex = minutes15Rem & 0xff;\n+            ZoneOffset result = MINUTES_15_CACHE.getOpaque(cacheIndex);\n@@ -431,1 +435,1 @@\n-                var existing = SECONDS_CACHE.putIfAbsent(totalSecs, result);\n+                var existing = MINUTES_15_CACHE.compareAndExchange(cacheIndex, null, result);\n","filename":"src\/java.base\/share\/classes\/java\/time\/ZoneOffset.java","additions":9,"deletions":5,"binary":false,"changes":14,"status":"modified"}]}