{"files":[{"patch":"@@ -2635,0 +2635,17 @@\n+\n+  \/\/ Loads and stores with indirect memory input (e.g., volatile loads and\n+  \/\/ stores) do not subsume the input into complex addressing expressions. If\n+  \/\/ the addressing expression is input to at least one such load or store, do\n+  \/\/ not clone the addressing expression. Query needs_acquiring_load and\n+  \/\/ needs_releasing_store as a proxy for indirect memory input, as it is not\n+  \/\/ possible to directly query for indirect memory input at this stage.\n+  for (DUIterator_Fast imax, i = m->fast_outs(imax); i < imax; i++) {\n+    Node* n = m->fast_out(i);\n+    if (n->is_Load() && needs_acquiring_load(n)) {\n+      return false;\n+    }\n+    if (n->is_Store() && needs_releasing_store(n)) {\n+      return false;\n+    }\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/aarch64.ad","additions":17,"deletions":0,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +30,1 @@\n- * @run main\/othervm -Xbatch -XX:CompileCommand=option,*::*,bool,Vectorize,true -XX:CompileCommand=memlimit,compiler.c2.TestFindNode::*,0\n+ * @run main\/othervm -Xbatch -XX:CompileCommand=option,*::*,bool,Vectorize,true\n","filename":"test\/hotspot\/jtreg\/compiler\/c2\/TestFindNode.java","additions":2,"deletions":2,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -0,0 +1,232 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8331295\n+ * @requires os.simpleArch == \"aarch64\"\n+ * @summary Check that the matcher does not needlessly clone an addressing\n+ *          expression that will in any case not be subsumed into complex\n+ *          loads and stores.\n+ * @library \/test\/lib \/\n+ * @run driver compiler.codegen.TestMatcherClone\n+ *\/\n+\n+package compiler.codegen;\n+\n+import compiler.lib.ir_framework.*;\n+\n+public class TestMatcherClone {\n+    static volatile int[] iArr;\n+    static volatile int x;\n+    static int[] iArr2 = new int[100];\n+    static int[] iArr3 = new int[100];\n+\n+    public static void main(String[] args) {\n+        TestFramework.run();\n+    }\n+\n+    @Test(compLevel = CompLevel.C2)\n+    @IR(counts = {IRNode.ADD_P_OF, \"reg_imm\", \"<200\"},\n+        phase = CompilePhase.MATCHING)\n+    public void test() {\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+        iArr = new int[] {x % 2};\n+\n+        for (int i = 0; i < 50; i++) {\n+            iArr2[i] = iArr3[i];\n+        }\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/codegen\/TestMatcherClone.java","additions":232,"deletions":0,"binary":false,"changes":232,"status":"added"},{"patch":"@@ -31,1 +31,0 @@\n- *                               -XX:CompileCommand=memlimit,compiler.loopopts.TestDeepGraphVerifyIterativeGVN::*,0\n","filename":"test\/hotspot\/jtreg\/compiler\/loopopts\/TestDeepGraphVerifyIterativeGVN.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}