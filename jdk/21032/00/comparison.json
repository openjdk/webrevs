{"files":[{"patch":"@@ -0,0 +1,1454 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+package org.openjdk.bench.vm.compiler;\n+\n+import org.openjdk.jmh.annotations.*;\n+import org.openjdk.jmh.infra.*;\n+\n+import java.util.concurrent.TimeUnit;\n+import java.util.Random;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+@State(Scope.Thread)\n+@Warmup(iterations = 2, time = 1, timeUnit = TimeUnit.SECONDS)\n+@Measurement(iterations = 3, time = 1, timeUnit = TimeUnit.SECONDS)\n+public abstract class VectorReduction2 {\n+    @Param({\"2048\"})\n+    public int SIZE;\n+\n+    private byte[] in1B;\n+    private byte[] in2B;\n+    private byte[] in3B;\n+    private char[] in1C;\n+    private char[] in2C;\n+    private char[] in3C;\n+    private short[] in1S;\n+    private short[] in2S;\n+    private short[] in3S;\n+\n+    private int[] in1I;\n+    private int[] in2I;\n+    private int[] in3I;\n+    private long[] in1L;\n+    private long[] in2L;\n+    private long[] in3L;\n+\n+    private float[] in1F;\n+    private float[] in2F;\n+    private float[] in3F;\n+    private double[] in1D;\n+    private double[] in2D;\n+    private double[] in3D;\n+\n+    @Param(\"0\")\n+    private int seed;\n+    private Random r = new Random(seed);\n+\n+    private static int globalResI;\n+\n+    @Setup\n+    public void init() {\n+        in1B = new byte[SIZE];\n+        in2B = new byte[SIZE];\n+        in3B = new byte[SIZE];\n+        in1C = new char[SIZE];\n+        in2C = new char[SIZE];\n+        in3C = new char[SIZE];\n+        in1S = new short[SIZE];\n+        in2S = new short[SIZE];\n+        in3S = new short[SIZE];\n+\n+        in1I = new int[SIZE];\n+        in2I = new int[SIZE];\n+        in3I = new int[SIZE];\n+        in1L = new long[SIZE];\n+        in2L = new long[SIZE];\n+        in3L = new long[SIZE];\n+\n+        in1F = new float[SIZE];\n+        in2F = new float[SIZE];\n+        in3F = new float[SIZE];\n+        in1D = new double[SIZE];\n+        in2D = new double[SIZE];\n+        in3D = new double[SIZE];\n+\n+        for (int i = 0; i < SIZE; i++) {\n+            in1B[i] = (byte)r.nextInt();\n+            in2B[i] = (byte)r.nextInt();\n+            in3B[i] = (byte)r.nextInt();\n+            in1C[i] = (char)r.nextInt();\n+            in2C[i] = (char)r.nextInt();\n+            in3C[i] = (char)r.nextInt();\n+            in1S[i] = (short)r.nextInt();\n+            in2S[i] = (short)r.nextInt();\n+            in3S[i] = (short)r.nextInt();\n+\n+            in1I[i] = r.nextInt();\n+            in2I[i] = r.nextInt();\n+            in3I[i] = r.nextInt();\n+            in1L[i] = r.nextLong();\n+            in2L[i] = r.nextLong();\n+            in3L[i] = r.nextLong();\n+\n+            in1F[i] = r.nextFloat();\n+            in2F[i] = r.nextFloat();\n+            in3F[i] = r.nextFloat();\n+            in1D[i] = r.nextDouble();\n+            in2D[i] = r.nextDouble();\n+            in3D[i] = r.nextDouble();\n+        }\n+    }\n+\n+    \/\/ Naming convention:\n+    \/\/   How much work?\n+    \/\/     - simple:   val = a[i]\n+    \/\/     - dotprod:  val = a[i] * b[i]\n+    \/\/     - big:      val = (a[i] * b[i]) + (a[i] * c[i]) + (b[i] * c[i])\n+    \/\/   Reduction operator:\n+    \/\/     - and:     acc &= val\n+    \/\/     - or:      acc |= val\n+    \/\/     - xor:     acc ^= val\n+    \/\/     - add:     acc += val\n+    \/\/     - mul:     acc *= val\n+    \/\/     - min:     acc = min(acc, val)\n+    \/\/     - max:     acc = max(acc, val)\n+\n+    \/\/ ---------byte***Simple ------------------------------------------------------------\n+    @Benchmark\n+    public void byteAndSimple(Blackhole bh) {\n+        byte acc = (byte)0xFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = in1B[i];\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteOrSimple(Blackhole bh) {\n+        byte acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = in1B[i];\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteXorSimple(Blackhole bh) {\n+        byte acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = in1B[i];\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteAddSimple(Blackhole bh) {\n+        byte acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = in1B[i];\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteMulSimple(Blackhole bh) {\n+        byte acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = in1B[i];\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteMinSimple(Blackhole bh) {\n+        byte acc = Byte.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = in1B[i];\n+            acc = (byte)Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteMaxSimple(Blackhole bh) {\n+        byte acc = Byte.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = in1B[i];\n+            acc = (byte)Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------byte***DotProduct ------------------------------------------------------------\n+    @Benchmark\n+    public void byteAndDotProduct(Blackhole bh) {\n+        byte acc = (byte)0xFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)(in1B[i] * in2B[i]);\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteOrDotProduct(Blackhole bh) {\n+        byte acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)(in1B[i] * in2B[i]);\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteXorDotProduct(Blackhole bh) {\n+        byte acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)(in1B[i] * in2B[i]);\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteAddDotProduct(Blackhole bh) {\n+        byte acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)(in1B[i] * in2B[i]);\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteMulDotProduct(Blackhole bh) {\n+        byte acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)(in1B[i] * in2B[i]);\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteMinDotProduct(Blackhole bh) {\n+        byte acc = Byte.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)(in1B[i] * in2B[i]);\n+            acc = (byte)Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteMaxDotProduct(Blackhole bh) {\n+        byte acc = Byte.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)(in1B[i] * in2B[i]);\n+            acc = (byte)Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------byte***Big ------------------------------------------------------------\n+    @Benchmark\n+    public void byteAndBig(Blackhole bh) {\n+        byte acc = (byte)0xFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)((in1B[i] * in2B[i]) + (in1B[i] * in3B[i]) + (in2B[i] * in3B[i]));\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteOrBig(Blackhole bh) {\n+        byte acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)((in1B[i] * in2B[i]) + (in1B[i] * in3B[i]) + (in2B[i] * in3B[i]));\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteXorBig(Blackhole bh) {\n+        byte acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)((in1B[i] * in2B[i]) + (in1B[i] * in3B[i]) + (in2B[i] * in3B[i]));\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteAddBig(Blackhole bh) {\n+        byte acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)((in1B[i] * in2B[i]) + (in1B[i] * in3B[i]) + (in2B[i] * in3B[i]));\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteMulBig(Blackhole bh) {\n+        byte acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)((in1B[i] * in2B[i]) + (in1B[i] * in3B[i]) + (in2B[i] * in3B[i]));\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteMinBig(Blackhole bh) {\n+        byte acc = Byte.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)((in1B[i] * in2B[i]) + (in1B[i] * in3B[i]) + (in2B[i] * in3B[i]));\n+            acc = (byte)Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void byteMaxBig(Blackhole bh) {\n+        byte acc = Byte.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            byte val = (byte)((in1B[i] * in2B[i]) + (in1B[i] * in3B[i]) + (in2B[i] * in3B[i]));\n+            acc = (byte)Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------char***Simple ------------------------------------------------------------\n+    @Benchmark\n+    public void charAndSimple(Blackhole bh) {\n+        char acc = (char)0xFFFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = in1C[i];\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charOrSimple(Blackhole bh) {\n+        char acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = in1C[i];\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charXorSimple(Blackhole bh) {\n+        char acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = in1C[i];\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charAddSimple(Blackhole bh) {\n+        char acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = in1C[i];\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charMulSimple(Blackhole bh) {\n+        char acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = in1C[i];\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charMinSimple(Blackhole bh) {\n+        char acc = Character.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = in1C[i];\n+            acc = (char)Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charMaxSimple(Blackhole bh) {\n+        char acc = Character.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = in1C[i];\n+            acc = (char)Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------char***DotProduct ------------------------------------------------------------\n+    @Benchmark\n+    public void charAndDotProduct(Blackhole bh) {\n+        char acc = (char)0xFFFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)(in1C[i] * in2C[i]);\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charOrDotProduct(Blackhole bh) {\n+        char acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)(in1C[i] * in2C[i]);\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charXorDotProduct(Blackhole bh) {\n+        char acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)(in1C[i] * in2C[i]);\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charAddDotProduct(Blackhole bh) {\n+        char acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)(in1C[i] * in2C[i]);\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charMulDotProduct(Blackhole bh) {\n+        char acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)(in1C[i] * in2C[i]);\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charMinDotProduct(Blackhole bh) {\n+        char acc = Character.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)(in1C[i] * in2C[i]);\n+            acc = (char)Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charMaxDotProduct(Blackhole bh) {\n+        char acc = Character.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)(in1C[i] * in2C[i]);\n+            acc = (char)Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------char***Big ------------------------------------------------------------\n+    @Benchmark\n+    public void charAndBig(Blackhole bh) {\n+        char acc = (char)0xFFFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)((in1C[i] * in2C[i]) + (in1C[i] * in3C[i]) + (in2C[i] * in3C[i]));\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charOrBig(Blackhole bh) {\n+        char acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)((in1C[i] * in2C[i]) + (in1C[i] * in3C[i]) + (in2C[i] * in3C[i]));\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charXorBig(Blackhole bh) {\n+        char acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)((in1C[i] * in2C[i]) + (in1C[i] * in3C[i]) + (in2C[i] * in3C[i]));\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charAddBig(Blackhole bh) {\n+        char acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)((in1C[i] * in2C[i]) + (in1C[i] * in3C[i]) + (in2C[i] * in3C[i]));\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charMulBig(Blackhole bh) {\n+        char acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)((in1C[i] * in2C[i]) + (in1C[i] * in3C[i]) + (in2C[i] * in3C[i]));\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charMinBig(Blackhole bh) {\n+        char acc = Character.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)((in1C[i] * in2C[i]) + (in1C[i] * in3C[i]) + (in2C[i] * in3C[i]));\n+            acc = (char)Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void charMaxBig(Blackhole bh) {\n+        char acc = Character.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            char val = (char)((in1C[i] * in2C[i]) + (in1C[i] * in3C[i]) + (in2C[i] * in3C[i]));\n+            acc = (char)Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------short***Simple ------------------------------------------------------------\n+    @Benchmark\n+    public void shortAndSimple(Blackhole bh) {\n+        short acc = (short)0xFFFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = in1S[i];\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortOrSimple(Blackhole bh) {\n+        short acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = in1S[i];\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortXorSimple(Blackhole bh) {\n+        short acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = in1S[i];\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortAddSimple(Blackhole bh) {\n+        short acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = in1S[i];\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortMulSimple(Blackhole bh) {\n+        short acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = in1S[i];\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortMinSimple(Blackhole bh) {\n+        short acc = Short.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = in1S[i];\n+            acc = (short)Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortMaxSimple(Blackhole bh) {\n+        short acc = Short.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = in1S[i];\n+            acc = (short)Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------short***DotProduct ------------------------------------------------------------\n+    @Benchmark\n+    public void shortAndDotProduct(Blackhole bh) {\n+        short acc = (short)0xFFFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)(in1S[i] * in2S[i]);\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortOrDotProduct(Blackhole bh) {\n+        short acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)(in1S[i] * in2S[i]);\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortXorDotProduct(Blackhole bh) {\n+        short acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)(in1S[i] * in2S[i]);\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortAddDotProduct(Blackhole bh) {\n+        short acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)(in1S[i] * in2S[i]);\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortMulDotProduct(Blackhole bh) {\n+        short acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)(in1S[i] * in2S[i]);\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortMinDotProduct(Blackhole bh) {\n+        short acc = Short.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)(in1S[i] * in2S[i]);\n+            acc = (short)Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortMaxDotProduct(Blackhole bh) {\n+        short acc = Short.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)(in1S[i] * in2S[i]);\n+            acc = (short)Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------short***Big ------------------------------------------------------------\n+    @Benchmark\n+    public void shortAndBig(Blackhole bh) {\n+        short acc = (short)0xFFFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)((in1S[i] * in2S[i]) + (in1S[i] * in3S[i]) + (in2S[i] * in3S[i]));\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortOrBig(Blackhole bh) {\n+        short acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)((in1S[i] * in2S[i]) + (in1S[i] * in3S[i]) + (in2S[i] * in3S[i]));\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortXorBig(Blackhole bh) {\n+        short acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)((in1S[i] * in2S[i]) + (in1S[i] * in3S[i]) + (in2S[i] * in3S[i]));\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortAddBig(Blackhole bh) {\n+        short acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)((in1S[i] * in2S[i]) + (in1S[i] * in3S[i]) + (in2S[i] * in3S[i]));\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortMulBig(Blackhole bh) {\n+        short acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)((in1S[i] * in2S[i]) + (in1S[i] * in3S[i]) + (in2S[i] * in3S[i]));\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortMinBig(Blackhole bh) {\n+        short acc = Short.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)((in1S[i] * in2S[i]) + (in1S[i] * in3S[i]) + (in2S[i] * in3S[i]));\n+            acc = (short)Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void shortMaxBig(Blackhole bh) {\n+        short acc = Short.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            short val = (short)((in1S[i] * in2S[i]) + (in1S[i] * in3S[i]) + (in2S[i] * in3S[i]));\n+            acc = (short)Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------int***Simple ------------------------------------------------------------\n+    @Benchmark\n+    public void intAndSimple(Blackhole bh) {\n+        int acc = 0xFFFFFFFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i];\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intOrSimple(Blackhole bh) {\n+        int acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i];\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intXorSimple(Blackhole bh) {\n+        int acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i];\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intAddSimple(Blackhole bh) {\n+        int acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i];\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intMulSimple(Blackhole bh) {\n+        int acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i];\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intMinSimple(Blackhole bh) {\n+        int acc = Integer.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i];\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intMaxSimple(Blackhole bh) {\n+        int acc = Integer.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i];\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------int***DotProduct ------------------------------------------------------------\n+    @Benchmark\n+    public void intAndDotProduct(Blackhole bh) {\n+        int acc = 0xFFFFFFFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i] * in2I[i];\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intOrDotProduct(Blackhole bh) {\n+        int acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i] * in2I[i];\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intXorDotProduct(Blackhole bh) {\n+        int acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i] * in2I[i];\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intAddDotProduct(Blackhole bh) {\n+        int acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i] * in2I[i];\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intMulDotProduct(Blackhole bh) {\n+        int acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i] * in2I[i];\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intMinDotProduct(Blackhole bh) {\n+        int acc = Integer.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i] * in2I[i];\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intMaxDotProduct(Blackhole bh) {\n+        int acc = Integer.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = in1I[i] * in2I[i];\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------int***Big ------------------------------------------------------------\n+    @Benchmark\n+    public void intAndBig(Blackhole bh) {\n+        int acc = 0xFFFFFFFF; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = (in1I[i] * in2I[i]) + (in1I[i] * in3I[i]) + (in2I[i] * in3I[i]);\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intOrBig(Blackhole bh) {\n+        int acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = (in1I[i] * in2I[i]) + (in1I[i] * in3I[i]) + (in2I[i] * in3I[i]);\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intXorBig(Blackhole bh) {\n+        int acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = (in1I[i] * in2I[i]) + (in1I[i] * in3I[i]) + (in2I[i] * in3I[i]);\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intAddBig(Blackhole bh) {\n+        int acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = (in1I[i] * in2I[i]) + (in1I[i] * in3I[i]) + (in2I[i] * in3I[i]);\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intMulBig(Blackhole bh) {\n+        int acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = (in1I[i] * in2I[i]) + (in1I[i] * in3I[i]) + (in2I[i] * in3I[i]);\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intMinBig(Blackhole bh) {\n+        int acc = Integer.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = (in1I[i] * in2I[i]) + (in1I[i] * in3I[i]) + (in2I[i] * in3I[i]);\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void intMaxBig(Blackhole bh) {\n+        int acc = Integer.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            int val = (in1I[i] * in2I[i]) + (in1I[i] * in3I[i]) + (in2I[i] * in3I[i]);\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------long***Simple ------------------------------------------------------------\n+    @Benchmark\n+    public void longAndSimple(Blackhole bh) {\n+        long acc = 0xFFFFFFFFFFFFFFFFL; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i];\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longOrSimple(Blackhole bh) {\n+        long acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i];\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longXorSimple(Blackhole bh) {\n+        long acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i];\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longAddSimple(Blackhole bh) {\n+        long acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i];\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longMulSimple(Blackhole bh) {\n+        long acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i];\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longMinSimple(Blackhole bh) {\n+        long acc = Long.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i];\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longMaxSimple(Blackhole bh) {\n+        long acc = Long.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i];\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------long***DotProduct ------------------------------------------------------------\n+    @Benchmark\n+    public void longAndDotProduct(Blackhole bh) {\n+        long acc = 0xFFFFFFFFFFFFFFFFL; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i] * in2L[i];\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longOrDotProduct(Blackhole bh) {\n+        long acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i] * in2L[i];\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longXorDotProduct(Blackhole bh) {\n+        long acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i] * in2L[i];\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longAddDotProduct(Blackhole bh) {\n+        long acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i] * in2L[i];\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longMulDotProduct(Blackhole bh) {\n+        long acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i] * in2L[i];\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longMinDotProduct(Blackhole bh) {\n+        long acc = Long.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i] * in2L[i];\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longMaxDotProduct(Blackhole bh) {\n+        long acc = Long.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = in1L[i] * in2L[i];\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------long***Big ------------------------------------------------------------\n+    @Benchmark\n+    public void longAndBig(Blackhole bh) {\n+        long acc = 0xFFFFFFFFFFFFFFFFL; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = (in1L[i] * in2L[i]) + (in1L[i] * in3L[i]) + (in2L[i] * in3L[i]);\n+            acc &= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longOrBig(Blackhole bh) {\n+        long acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = (in1L[i] * in2L[i]) + (in1L[i] * in3L[i]) + (in2L[i] * in3L[i]);\n+            acc |= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longXorBig(Blackhole bh) {\n+        long acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = (in1L[i] * in2L[i]) + (in1L[i] * in3L[i]) + (in2L[i] * in3L[i]);\n+            acc ^= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longAddBig(Blackhole bh) {\n+        long acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = (in1L[i] * in2L[i]) + (in1L[i] * in3L[i]) + (in2L[i] * in3L[i]);\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longMulBig(Blackhole bh) {\n+        long acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = (in1L[i] * in2L[i]) + (in1L[i] * in3L[i]) + (in2L[i] * in3L[i]);\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longMinBig(Blackhole bh) {\n+        long acc = Long.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = (in1L[i] * in2L[i]) + (in1L[i] * in3L[i]) + (in2L[i] * in3L[i]);\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void longMaxBig(Blackhole bh) {\n+        long acc = Long.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            long val = (in1L[i] * in2L[i]) + (in1L[i] * in3L[i]) + (in2L[i] * in3L[i]);\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------float***Simple ------------------------------------------------------------\n+    @Benchmark\n+    public void floatAddSimple(Blackhole bh) {\n+        float acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = in1F[i];\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void floatMulSimple(Blackhole bh) {\n+        float acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = in1F[i];\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void floatMinSimple(Blackhole bh) {\n+        float acc = Float.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = in1F[i];\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void floatMaxSimple(Blackhole bh) {\n+        float acc = Float.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = in1F[i];\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------float***DotProduct ------------------------------------------------------------\n+    @Benchmark\n+    public void floatAddDotProduct(Blackhole bh) {\n+        float acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = in1F[i] * in2F[i];\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void floatMulDotProduct(Blackhole bh) {\n+        float acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = in1F[i] * in2F[i];\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void floatMinDotProduct(Blackhole bh) {\n+        float acc = Float.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = in1F[i] * in2F[i];\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void floatMaxDotProduct(Blackhole bh) {\n+        float acc = Float.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = in1F[i] * in2F[i];\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------float***Big ------------------------------------------------------------\n+    @Benchmark\n+    public void floatAddBig(Blackhole bh) {\n+        float acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = (in1F[i] * in2F[i]) + (in1F[i] * in3F[i]) + (in2F[i] * in3F[i]);\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void floatMulBig(Blackhole bh) {\n+        float acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = (in1F[i] * in2F[i]) + (in1F[i] * in3F[i]) + (in2F[i] * in3F[i]);\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void floatMinBig(Blackhole bh) {\n+        float acc = Float.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = (in1F[i] * in2F[i]) + (in1F[i] * in3F[i]) + (in2F[i] * in3F[i]);\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void floatMaxBig(Blackhole bh) {\n+        float acc = Float.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            float val = (in1F[i] * in2F[i]) + (in1F[i] * in3F[i]) + (in2F[i] * in3F[i]);\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------double***Simple ------------------------------------------------------------\n+    @Benchmark\n+    public void doubleAddSimple(Blackhole bh) {\n+        double acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = in1D[i];\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void doubleMulSimple(Blackhole bh) {\n+        double acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = in1D[i];\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void doubleMinSimple(Blackhole bh) {\n+        double acc = Double.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = in1D[i];\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void doubleMaxSimple(Blackhole bh) {\n+        double acc = Double.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = in1D[i];\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------double***DotProduct ------------------------------------------------------------\n+    @Benchmark\n+    public void doubleAddDotProduct(Blackhole bh) {\n+        double acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = in1D[i] * in2D[i];\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void doubleMulDotProduct(Blackhole bh) {\n+        double acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = in1D[i] * in2D[i];\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void doubleMinDotProduct(Blackhole bh) {\n+        double acc = Double.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = in1D[i] * in2D[i];\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void doubleMaxDotProduct(Blackhole bh) {\n+        double acc = Double.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = in1D[i] * in2D[i];\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    \/\/ ---------double***Big ------------------------------------------------------------\n+    @Benchmark\n+    public void doubleAddBig(Blackhole bh) {\n+        double acc = 0; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = (in1D[i] * in2D[i]) + (in1D[i] * in3D[i]) + (in2D[i] * in3D[i]);\n+            acc += val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void doubleMulBig(Blackhole bh) {\n+        double acc = 1; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = (in1D[i] * in2D[i]) + (in1D[i] * in3D[i]) + (in2D[i] * in3D[i]);\n+            acc *= val;\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void doubleMinBig(Blackhole bh) {\n+        double acc = Double.MAX_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = (in1D[i] * in2D[i]) + (in1D[i] * in3D[i]) + (in2D[i] * in3D[i]);\n+            acc = Math.min(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Benchmark\n+    public void doubleMaxBig(Blackhole bh) {\n+        double acc = Double.MIN_VALUE; \/\/ neutral element\n+        for (int i = 0; i < SIZE; i++) {\n+            double val = (in1D[i] * in2D[i]) + (in1D[i] * in3D[i]) + (in2D[i] * in3D[i]);\n+            acc = Math.max(acc, val);\n+        }\n+        bh.consume(acc);\n+    }\n+\n+    @Fork(value = 1, jvmArgsPrepend = {\"-XX:+UseSuperWord\"})\n+    public static class WithSuperword extends VectorReduction2 {}\n+\n+    @Fork(value = 1, jvmArgsPrepend = {\"-XX:-UseSuperWord\"})\n+    public static class NoSuperword extends VectorReduction2 {}\n+}\n+\n","filename":"test\/micro\/org\/openjdk\/bench\/vm\/compiler\/VectorReduction2.java","additions":1454,"deletions":0,"binary":false,"changes":1454,"status":"added"}]}