{"files":[{"patch":"@@ -95,0 +95,4 @@\n+    \/** Are we attributing a permits clause?\n+     *\/\n+    boolean isPermitsClause = false;\n+\n@@ -152,0 +156,1 @@\n+        info.isPermitsClause = isPermitsClause;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/AttrContext.java","additions":5,"deletions":0,"binary":false,"changes":5,"status":"modified"},{"patch":"@@ -428,1 +428,5 @@\n-                 sym.owner.outermostClass())\n+                 sym.owner.outermostClass()\n+                 ||\n+                 (env.info.isPermitsClause\n+                 &&\n+                 ((JCClassDecl) env.tree).sym.outermostClass() == sym.owner.outermostClass()))\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -982,3 +982,10 @@\n-                for (JCExpression permitted : permittedTrees) {\n-                    Type pt = attr.attribBase(permitted, baseEnv, false, false, false);\n-                    permittedSubtypeSymbols.append(pt.tsym);\n+                var isPermitsClause = baseEnv.info.isPermitsClause;\n+                try {\n+                    baseEnv.info.isPermitsClause = true;\n+                    for (JCExpression permitted : permittedTrees) {\n+                        Type pt = attr.attribBase(permitted, baseEnv, false, false, false);\n+                        permittedSubtypeSymbols.append(pt.tsym);\n+                    }\n+                    sym.setPermittedSubclasses(permittedSubtypeSymbols.toList());\n+                } finally {\n+                    baseEnv.info.isPermitsClause = isPermitsClause;\n@@ -986,1 +993,0 @@\n-                sym.setPermittedSubclasses(permittedSubtypeSymbols.toList());\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":10,"deletions":4,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -0,0 +1,175 @@\n+\/*\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8338981\n+ * @summary Access to private classes should be permitted inside the permits clause of the enclosing top-level class\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ *                     jdk.compiler\/com.sun.tools.javac.main\n+ *                     jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask toolbox.Task\n+ * @run main PrivateMembersInPermitClause\n+ *\/\n+\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import toolbox.Task;\n+import java.util.List;\n+\n+public class PrivateMembersInPermitClause extends toolbox.TestRunner {\n+\n+    private final toolbox.ToolBox tb;\n+\n+    public PrivateMembersInPermitClause() {\n+        super(System.err);\n+        tb = new toolbox.ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new PrivateMembersInPermitClause().runTests();\n+    }\n+\n+    public void runTests() throws Exception {\n+        runTests(_ -> new Object[] {});\n+    }\n+\n+    @Test\n+    public void givenPrivateClassInPermitsClause_whenCompiling_thenShouldCompile() throws Exception {\n+        var root = Path.of(\"src\");\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            sealed class S permits S.A {\n+                private static final class A extends S {}\n+            }\n+            \"\"\"\n+        );\n+\n+        new toolbox.JavacTask(tb)\n+            .files(root.resolve(\"S.java\"))\n+            .run(toolbox.Task.Expect.SUCCESS);\n+    }\n+\n+    @Test\n+    public void givenPrivateClassOfOtherTopLevelClassInPermitsClause_whenCompiling_thenShouldFail() throws Exception {\n+        var root = Path.of(\"src\");\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            public class S {\n+                private static final class A extends S {}\n+            }\n+            \"\"\",\n+            \"\"\"\n+            public sealed class T permits S.A {\n+                private static final class A {}\n+            }\n+            \"\"\"\n+        );\n+        var expectedErrors = List.of(\n+            \"T.java:1:32: compiler.err.report.access: S.A, private, S\",\n+            \"1 error\"\n+        );\n+\n+        var compileErrors = new toolbox.JavacTask(tb)\n+            .files(root.resolve(\"S.java\"), root.resolve(\"T.java\"))\n+            .options(\"-XDrawDiagnostics\")\n+            .run(toolbox.Task.Expect.FAIL)\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!Objects.equals(compileErrors, expectedErrors)) {\n+            throw new AssertionError(\"Expected errors: \" + expectedErrors + \", but got: \" + compileErrors);\n+        }\n+\n+    }\n+\n+    @Test\n+    public void givenPrivateClassInPermitsClauseOfInnerClass_whenCompiling_thenShouldCompile() throws Exception {\n+        var root = Path.of(\"src\");\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            public sealed class S permits S.T.A {\n+                static class T {\n+                    private static final class A extends S {}\n+                }\n+            }\n+            \"\"\"\n+        );\n+\n+        new toolbox.JavacTask(tb)\n+            .files(root.resolve(\"S.java\"))\n+            .run(toolbox.Task.Expect.SUCCESS);\n+    }\n+\n+    @Test\n+    public void givenPrivateClassInPermitsClauseContainedInSiblingPrivateInnerClass_whenCompiling_thenShouldCompile() throws Exception {\n+        var root = Path.of(\"src\");\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            public class S {\n+                private static class A {\n+                    private static class B extends C.D {}\n+                }\n+                private static class C {\n+                    private static class D {}\n+                }\n+            }\n+            \"\"\"\n+        );\n+\n+        new toolbox.JavacTask(tb)\n+            .files(root.resolve(\"S.java\"))\n+            .run(toolbox.Task.Expect.SUCCESS);\n+    }\n+\n+    @Test\n+    public void givenPrivateClassInPermitsClause_whenThanCompilingOtherClassThatReferencesPrivateClassInPermitsClause_thenShouldFail() throws Exception {\n+        var root = Path.of(\"src\");\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            sealed class S permits S.A {\n+                private static final class A extends S {}\n+            }\n+            \"\"\",\n+            \"\"\"\n+            sealed class T permits S.A {\n+            }\n+            \"\"\"\n+        );\n+\n+        var expectedErrors = List.of(\n+            \"T.java:1:25: compiler.err.report.access: S.A, private, S\",\n+            \"1 error\"\n+        );\n+\n+        var compileErrors = new toolbox.JavacTask(tb)\n+            .files(root.resolve(\"S.java\"), root.resolve(\"T.java\"))\n+            .options(\"-XDrawDiagnostics\")\n+            .run(toolbox.Task.Expect.FAIL)\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!Objects.equals(compileErrors, expectedErrors)) {\n+            throw new AssertionError(\"Expected errors: \" + expectedErrors + \", but got: \" + compileErrors);\n+        }\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/sealed\/PrivateMembersInPermitClause.java","additions":175,"deletions":0,"binary":false,"changes":175,"status":"added"}]}