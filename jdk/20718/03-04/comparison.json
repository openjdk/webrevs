{"files":[{"patch":"@@ -56,1 +56,1 @@\n-    public void testPrivateMembersInPermitClause() throws Exception {\n+    public void givenPrivateClassInPermitsClause_whenCompiling_thenShouldCompile() throws Exception {\n@@ -70,0 +70,89 @@\n+\n+    @Test\n+    public void givenPrivateClassOfOtherTopLevelClassInPermitsClause_whenCompiling_thenShouldFail() throws Exception {\n+        var root = Path.of(\"src\");\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            public class S {\n+                private static final class A extends S {}\n+            }\n+            \"\"\"\n+        );\n+\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            public sealed class T permits S.A {\n+                private static final class A extends T {}\n+            }\n+            \"\"\"\n+        );\n+\n+        new toolbox.JavacTask(tb)\n+            .files(root.resolve(\"S.java\"), root.resolve(\"T.java\"))\n+            .run(toolbox.Task.Expect.FAIL);\n+    }\n+\n+    @Test\n+    public void givenPrivateClassInPermitsClauseOfInnerClass_whenCompiling_thenShouldCompile() throws Exception {\n+        var root = Path.of(\"src\");\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            public class S  permits S.T.A {\n+                static class T {\n+                    private static final class A extends T {}\n+                }\n+            }\n+            \"\"\"\n+        );\n+\n+        new toolbox.JavacTask(tb)\n+            .files(root.resolve(\"S.java\"))\n+            .run(toolbox.Task.Expect.SUCCESS);\n+    }\n+\n+    @Test\n+    public void givenPrivateClassInPermitsClauseContainedInSiblingPrivateInnerClass_whenCompiling_thenShouldCompile() throws Exception {\n+        var root = Path.of(\"src\");\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            public class S {\n+                private static class A {\n+                    private static class B extends C.D {}\n+                }\n+                private static class C {\n+                    private static class D {}\n+                }\n+            }\n+            \"\"\"\n+        );\n+\n+        new toolbox.JavacTask(tb)\n+            .files(root.resolve(\"S.java\"))\n+            .run(toolbox.Task.Expect.SUCCESS);\n+    }\n+\n+    @Test\n+    public void givenPrivateClassInPermitsClause_whenThanCompilingClassThatReferencesPrivateClassInExtendsClause_thenShouldFail() throws Exception {\n+        var root = Path.of(\"src\");\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            sealed class S permits S.A {\n+                private static final class A extends S {}\n+            }\n+            \"\"\"\n+        );\n+\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            import S;\n+            \n+            class T extends T.A {\n+                private static final class A extends T {}\n+            }\n+            \"\"\"\n+        );\n+\n+        new toolbox.JavacTask(tb)\n+            .files(root.resolve(\"S.java\"), root.resolve(\"T.java\"))\n+            .run(toolbox.Task.Expect.FAIL);\n+    }\n","filename":"test\/langtools\/tools\/javac\/sealed\/PrivateMembersInPermitClause.java","additions":90,"deletions":1,"binary":false,"changes":91,"status":"modified"}]}