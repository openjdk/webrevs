{"files":[{"patch":"@@ -156,0 +156,1 @@\n+        info.isPermitsClause = isPermitsClause;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/AttrContext.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -426,4 +426,0 @@\n-                 ||\n-                 env.info.isPermitsClause\n-                 &&\n-                 ((JCClassDecl) env.tree).sym.outermostClass() == sym.owner.outermostClass()\n@@ -432,1 +428,5 @@\n-                 sym.owner.outermostClass())\n+                 sym.owner.outermostClass()\n+                 ||\n+                 (env.info.isPermitsClause\n+                 &&\n+                 ((JCClassDecl) env.tree).sym.outermostClass() == sym.owner.outermostClass()))\n@@ -465,1 +465,0 @@\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":5,"deletions":6,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -982,4 +982,10 @@\n-                baseEnv.info.isPermitsClause = true;\n-                for (JCExpression permitted : permittedTrees) {\n-                    Type pt = attr.attribBase(permitted, baseEnv, false, false, false);\n-                    permittedSubtypeSymbols.append(pt.tsym);\n+                var isPermitsClause = baseEnv.info.isPermitsClause;\n+                try {\n+                    baseEnv.info.isPermitsClause = true;\n+                    for (JCExpression permitted : permittedTrees) {\n+                        Type pt = attr.attribBase(permitted, baseEnv, false, false, false);\n+                        permittedSubtypeSymbols.append(pt.tsym);\n+                    }\n+                    sym.setPermittedSubclasses(permittedSubtypeSymbols.toList());\n+                } finally {\n+                    baseEnv.info.isPermitsClause = isPermitsClause;\n@@ -987,2 +993,0 @@\n-                sym.setPermittedSubclasses(permittedSubtypeSymbols.toList());\n-                baseEnv.info.isPermitsClause = false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":10,"deletions":6,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -24,2 +24,0 @@\n-import java.nio.file.Path;\n-\n@@ -32,2 +30,2 @@\n- * jdk.compiler\/com.sun.tools.javac.main\n- * jdk.compiler\/com.sun.tools.javac.util\n+ *                     jdk.compiler\/com.sun.tools.javac.main\n+ *                     jdk.compiler\/com.sun.tools.javac.util\n@@ -38,0 +36,5 @@\n+import java.nio.file.Path;\n+import java.util.Objects;\n+import toolbox.Task;\n+import java.util.List;\n+\n@@ -79,4 +82,1 @@\n-            \"\"\"\n-        );\n-\n-        tb.writeJavaFiles(root,\n+            \"\"\",\n@@ -85,1 +85,1 @@\n-                private static final class A extends T {}\n+                private static final class A {}\n@@ -89,0 +89,4 @@\n+        var expectedErrors = List.of(\n+            \"T.java:1:30: compiler.err.report.access: A, private, S.A\",\n+            \"1 error\"\n+        );\n@@ -90,1 +94,1 @@\n-        new toolbox.JavacTask(tb)\n+        var compileErrors = new toolbox.JavacTask(tb)\n@@ -92,1 +96,8 @@\n-            .run(toolbox.Task.Expect.FAIL);\n+            .options(\"-XDrawDiagnostics\")\n+            .run(toolbox.Task.Expect.FAIL)\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!Objects.equals(compileErrors, expectedErrors)) {\n+            throw new AssertionError(\"Expected errors: \" + expectedErrors + \", but got: \" + compileErrors);\n+        }\n+\n@@ -135,1 +146,1 @@\n-    public void givenPrivateClassInPermitsClause_whenThanCompilingClassThatReferencesPrivateClassInExtendsClause_thenShouldFail() throws Exception {\n+    public void givenPrivateClassInPermitsClause_whenThanCompilingOtherClassThatReferencesPrivateClassInPermitsClause_thenShouldFail() throws Exception {\n@@ -142,0 +153,1 @@\n+            \"\"\",\n@@ -143,7 +155,1 @@\n-        );\n-\n-        tb.writeJavaFiles(root,\n-            \"\"\"\n-            import S;\n-            class T extends T.A {\n-                private static final class A extends T {}\n+            class T permits S.A {\n@@ -154,1 +160,6 @@\n-        new toolbox.JavacTask(tb)\n+        var expectedErrors = List.of(\n+            \"T.java:1:17: compiler.err.report.access: A, private, S.A\",\n+            \"1 error\"\n+        );\n+\n+        var compileErrors = new toolbox.JavacTask(tb)\n@@ -156,1 +167,6 @@\n-            .run(toolbox.Task.Expect.FAIL);\n+            .run(toolbox.Task.Expect.FAIL)\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!Objects.equals(compileErrors, expectedErrors)) {\n+            throw new AssertionError(\"Expected errors: \" + expectedErrors + \", but got: \" + compileErrors);\n+        }\n","filename":"test\/langtools\/tools\/javac\/sealed\/PrivateMembersInPermitClause.java","additions":37,"deletions":21,"binary":false,"changes":58,"status":"modified"}]}