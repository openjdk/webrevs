{"files":[{"patch":"@@ -95,0 +95,4 @@\n+    \/** Are we attributing a permits clause?\n+     *\/\n+    boolean isPermitsClause = false;\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/AttrContext.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -427,1 +427,1 @@\n-                 isCurrentlyResolvingPermitting(env)\n+                 env.info.isPermitsClause\n@@ -466,15 +466,0 @@\n-    \/\/ it's a bit hacky, but basically if we are currently resolving symbol inside permitting block\n-    \/\/ then at least one symbol in permitting block should be unresolved,\n-    \/\/ while extending and implementing should be resolved\n-    private boolean isCurrentlyResolvingPermitting(Env<AttrContext> env) {\n-        return env.tree instanceof JCClassDecl classDecl\n-            && classDecl.permitting.stream().anyMatch(permitting -> !symNotNull(permitting))\n-            && (classDecl.extending == null || symNotNull(classDecl.extending))\n-            && classDecl.implementing.stream().allMatch(this::symNotNull);\n-    }\n-\n-    private boolean symNotNull(JCTree tree) {\n-        return tree instanceof JCFieldAccess fieldAccess && fieldAccess.sym != null\n-            || tree instanceof JCIdent ident && ident.sym != null;\n-    }\n-\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":1,"deletions":16,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -982,0 +982,1 @@\n+                baseEnv.info.isPermitsClause = true;\n@@ -987,0 +988,1 @@\n+                baseEnv.info.isPermitsClause = false;\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/TypeEnter.java","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,47 @@\n+import java.nio.file.Path;\n+\n+\/**\n+ * @test\n+ * @bug 8338981\n+ * @summary Access to private classes should be permitted inside the permits clause of the enclosing top-level class\n+ * @library \/tools\/lib\n+ * @modules jdk.compiler\/com.sun.tools.javac.api\n+ * jdk.compiler\/com.sun.tools.javac.main\n+ * jdk.compiler\/com.sun.tools.javac.util\n+ * @build toolbox.ToolBox toolbox.JavacTask toolbox.Task\n+ * @run main PrivateMembersInPermitClause\n+ *\/\n+\n+public class PrivateMembersInPermitClause extends toolbox.TestRunner {\n+\n+    private final toolbox.ToolBox tb;\n+\n+    public PrivateMembersInPermitClause() {\n+        super(System.err);\n+        tb = new toolbox.ToolBox();\n+    }\n+\n+    public static void main(String... args) throws Exception {\n+        new PrivateMembersInPermitClause().runTests();\n+    }\n+\n+    public void runTests() throws Exception {\n+        runTests(_ -> new Object[] {});\n+    }\n+\n+    @Test\n+    public void testPrivateMembersInPermitClause() throws Exception {\n+        var root = Path.of(\"src\");\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            sealed class S permits S.A {\n+                private static final class A extends S {}\n+            }\n+            \"\"\"\n+        );\n+\n+        new toolbox.JavacTask(tb)\n+            .files(root.resolve(\"S.java\"))\n+            .run(toolbox.Task.Expect.SUCCESS);\n+    }\n+}\n","filename":"test\/langtools\/tools\/javac\/sealed\/PrivateMembersInPermitClause.java","additions":47,"deletions":0,"binary":false,"changes":47,"status":"added"}]}