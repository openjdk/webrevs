{"files":[{"patch":"@@ -265,0 +265,1 @@\n+        PRIVATE_MEMBERS_IN_PERMITS_CLAUSE(JDK19, Fragments.FeaturePrivateMembersInPermitsClause, DiagKind.PLURAL),\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/code\/Source.java","additions":1,"deletions":0,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -114,0 +114,1 @@\n+    private final boolean allowPrivateMembersInPermitsClause;\n@@ -150,0 +151,1 @@\n+        allowPrivateMembersInPermitsClause = Feature.PRIVATE_MEMBERS_IN_PERMITS_CLAUSE.allowedInSource(source);\n@@ -430,3 +432,1 @@\n-                 (env.info.isPermitsClause\n-                 &&\n-                 ((JCClassDecl) env.tree).sym.outermostClass() == sym.owner.outermostClass()))\n+                 privateMemberInPermitsClauseIfAllowed(env, sym))\n@@ -465,0 +465,13 @@\n+\n+    private boolean privateMemberInPermitsClauseIfAllowed(Env<AttrContext> env, Symbol sym) {\n+        if (env.info.isPermitsClause && ((JCClassDecl) env.tree).sym.outermostClass() == sym.owner.outermostClass()) {\n+            if (allowPrivateMembersInPermitsClause) {\n+                return true;\n+            } else {\n+                log.error(env.tree.pos(), Errors.PrivateMembersInPermitsClause);\n+                return false;\n+            }\n+        }\n+        return false;\n+    }\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/comp\/Resolve.java","additions":16,"deletions":3,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -3238,0 +3238,3 @@\n+compiler.misc.feature.private.members.in.permits.clause=\\\n+    private members in permits clause\n+\n@@ -3255,0 +3258,3 @@\n+compiler.err.private.members.in.permits.clause=\\\n+    private members in permits clause are only supported in release 19 and above\n+\n","filename":"src\/jdk.compiler\/share\/classes\/com\/sun\/tools\/javac\/resources\/compiler.properties","additions":6,"deletions":0,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -33,1 +33,1 @@\n- * @run main PrivateMembersInPermitClause\n+ * @run main PrivateMembersInPermitClause -source 19+\n@@ -188,0 +188,32 @@\n+\n+    \/**\n+     * Tests that a private class in the permits clause of a sealed class does not compile when the source is lower than 19.\n+     *\/\n+    @Test\n+    public void testSourceLowerThan19() throws Exception {\n+        var root = Path.of(\"src\");\n+        tb.writeJavaFiles(root,\n+            \"\"\"\n+            sealed class S permits S.A {\n+                private static final class A extends S {}\n+            }\n+            \"\"\"\n+        );\n+\n+        var expectedErrors = List.of(\n+            \"S.java:1:8: compiler.err.private.members.in.permits.clause\",\n+            \"S.java:1:25: compiler.err.report.access: S.A, private, S\",\n+            \"S.java:2:26: compiler.err.cant.inherit.from.sealed: S\",\n+            \"3 errors\"\n+        );\n+\n+        var actualOutput = new toolbox.JavacTask(tb)\n+            .files(root.resolve(\"S.java\"))\n+            .options(\"--release\", \"18\", \"-XDrawDiagnostics\")\n+            .run(toolbox.Task.Expect.FAIL)\n+            .getOutputLines(Task.OutputKind.DIRECT);\n+\n+        if (!Objects.equals(actualOutput, expectedErrors)) {\n+            throw new AssertionError(\"Expected errors: \" + expectedErrors + \", but got: \" + actualOutput);\n+        }\n+    }\n","filename":"test\/langtools\/tools\/javac\/sealed\/PrivateMembersInPermitClause.java","additions":33,"deletions":1,"binary":false,"changes":34,"status":"modified"}]}