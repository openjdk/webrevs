{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2000, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2000, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -98,0 +98,2 @@\n+  product(bool, UseSIMDForSHA3Intrinsic, true,                          \\\n+          \"Use SIMD SHA3 instructions for SHA3 intrinsic\")              \\\n","filename":"src\/hotspot\/cpu\/aarch64\/globals_aarch64.hpp","additions":3,"deletions":1,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -326,0 +326,21 @@\n+  inline void rolw(Register Rd, Register Rn, unsigned imm) {\n+    extrw(Rd, Rn, Rn, ((32 - imm) & 31));\n+  }\n+\n+  inline void rol(Register Rd, Register Rn, unsigned imm) {\n+    extr(Rd, Rn, Rn, ((64 - imm) & 63));\n+  }\n+\n+  using Assembler::rax1;\n+  using Assembler::eor3;\n+\n+  inline void rax1(Register Rd, Register Rn, Register Rm) {\n+    eor(Rd, Rn, Rm, ROR, 63); \/\/ Rd = Rn ^ rol(Rm, 1)\n+  }\n+\n+  inline void eor3(Register Rd, Register Rn, Register Rm, Register Rk) {\n+    assert(Rd != Rn, \"Use tmp register\");\n+    eor(Rd, Rm, Rk);\n+    eor(Rd, Rd, Rn);\n+  }\n+\n","filename":"src\/hotspot\/cpu\/aarch64\/macroAssembler_aarch64.hpp","additions":21,"deletions":0,"binary":false,"changes":21,"status":"modified"},{"patch":"@@ -7084,0 +7084,360 @@\n+  void bcax5(Register a0, Register a1, Register a2, Register a3, Register a4,\n+             Register tmp0, Register tmp1, Register tmp2) {\n+    __ bic(tmp0, a2, a1); \/\/ for a0\n+    __ bic(tmp1, a3, a2); \/\/ for a1\n+    __ bic(tmp2, a4, a3); \/\/ for a2\n+    __ eor(a2, a2, tmp2);\n+    __ bic(tmp2, a0, a4); \/\/ for a3\n+    __ eor(a3, a3, tmp2);\n+    __ bic(tmp2, a1, a0); \/\/ for a4\n+    __ eor(a0, a0, tmp0);\n+    __ eor(a1, a1, tmp1);\n+    __ eor(a4, a4, tmp2);\n+  }\n+\n+  void keccak_round_gpr(bool can_use_fp, bool can_use_r18, Register rc,\n+                        Register a0, Register a1, Register a2, Register a3, Register a4,\n+                        Register a5, Register a6, Register a7, Register a8, Register a9,\n+                        Register a10, Register a11, Register a12, Register a13, Register a14,\n+                        Register a15, Register a16, Register a17, Register a18, Register a19,\n+                        Register a20, Register a21, Register a22, Register a23, Register a24,\n+                        Register tmp0, Register tmp1, Register tmp2) {\n+    __ eor3(tmp1, a4, a9, a14);\n+    __ eor3(tmp0, tmp1, a19, a24); \/\/ tmp0 = a4^a9^a14^a19^a24 = c4\n+    __ eor3(tmp2, a1, a6, a11);\n+    __ eor3(tmp1, tmp2, a16, a21); \/\/ tmp1 = a1^a6^a11^a16^a21 = c1\n+    __ rax1(tmp2, tmp0, tmp1); \/\/ d0\n+    {\n+\n+      Register tmp3, tmp4;\n+      if (can_use_fp && can_use_r18) {\n+        tmp3 = rfp;\n+        tmp4 = r18_tls;\n+      } else {\n+        tmp3 = a4;\n+        tmp4 = a9;\n+        __ stp(tmp3, tmp4, __ pre(sp, -16));\n+      }\n+\n+      __ eor3(tmp3, a0, a5, a10);\n+      __ eor3(tmp4, tmp3, a15, a20); \/\/ tmp4 = a0^a5^a10^a15^a20 = c0\n+      __ eor(a0, a0, tmp2);\n+      __ eor(a5, a5, tmp2);\n+      __ eor(a10, a10, tmp2);\n+      __ eor(a15, a15, tmp2);\n+      __ eor(a20, a20, tmp2); \/\/ d0(tmp2)\n+      __ eor3(tmp3, a2, a7, a12);\n+      __ eor3(tmp2, tmp3, a17, a22); \/\/ tmp2 = a2^a7^a12^a17^a22 = c2\n+      __ rax1(tmp3, tmp4, tmp2); \/\/ d1\n+      __ eor(a1, a1, tmp3);\n+      __ eor(a6, a6, tmp3);\n+      __ eor(a11, a11, tmp3);\n+      __ eor(a16, a16, tmp3);\n+      __ eor(a21, a21, tmp3); \/\/ d1(tmp3)\n+      __ rax1(tmp3, tmp2, tmp0); \/\/ d3\n+      __ eor3(tmp2, a3, a8, a13);\n+      __ eor3(tmp0, tmp2, a18, a23);  \/\/ tmp0 = a3^a8^a13^a18^a23 = c3\n+      __ eor(a3, a3, tmp3);\n+      __ eor(a8, a8, tmp3);\n+      __ eor(a13, a13, tmp3);\n+      __ eor(a18, a18, tmp3);\n+      __ eor(a23, a23, tmp3);\n+      __ rax1(tmp2, tmp1, tmp0); \/\/ d2\n+      __ eor(a2, a2, tmp2);\n+      __ eor(a7, a7, tmp2);\n+      __ eor(a12, a12, tmp2);\n+      __ rax1(tmp0, tmp0, tmp4); \/\/ d4\n+      if (!can_use_fp || !can_use_r18) {\n+        __ ldp(tmp3, tmp4, __ post(sp, 16));\n+      }\n+      __ eor(a17, a17, tmp2);\n+      __ eor(a22, a22, tmp2);\n+      __ eor(a4, a4, tmp0);\n+      __ eor(a9, a9, tmp0);\n+      __ eor(a14, a14, tmp0);\n+      __ eor(a19, a19, tmp0);\n+      __ eor(a24, a24, tmp0);\n+    }\n+\n+    __ rol(tmp0, a10, 3);\n+    __ rol(a10, a1, 1);\n+    __ rol(a1, a6, 44);\n+    __ rol(a6, a9, 20);\n+    __ rol(a9, a22, 61);\n+    __ rol(a22, a14, 39);\n+    __ rol(a14, a20, 18);\n+    __ rol(a20, a2, 62);\n+    __ rol(a2, a12, 43);\n+    __ rol(a12, a13, 25);\n+    __ rol(a13, a19, 8) ;\n+    __ rol(a19, a23, 56);\n+    __ rol(a23, a15, 41);\n+    __ rol(a15, a4, 27);\n+    __ rol(a4, a24, 14);\n+    __ rol(a24, a21, 2);\n+    __ rol(a21, a8, 55);\n+    __ rol(a8, a16, 45);\n+    __ rol(a16, a5, 36);\n+    __ rol(a5, a3, 28);\n+    __ rol(a3, a18, 21);\n+    __ rol(a18, a17, 15);\n+    __ rol(a17, a11, 10);\n+    __ rol(a11, a7, 6);\n+    __ mov(a7, tmp0);\n+\n+    bcax5(a0, a1, a2, a3, a4, tmp0, tmp1, tmp2);\n+    bcax5(a5, a6, a7, a8, a9, tmp0, tmp1, tmp2);\n+    bcax5(a10, a11, a12, a13, a14, tmp0, tmp1, tmp2);\n+    bcax5(a15, a16, a17, a18, a19, tmp0, tmp1, tmp2);\n+    bcax5(a20, a21, a22, a23, a24, tmp0, tmp1, tmp2);\n+\n+    __ ldr(tmp1, __ post(rc, 8));\n+    __ eor(a0, a0, tmp1);\n+\n+  }\n+\n+  \/\/ Arguments:\n+  \/\/\n+  \/\/ Inputs:\n+  \/\/   c_rarg0   - byte[]  source+offset\n+  \/\/   c_rarg1   - byte[]  SHA.state\n+  \/\/   c_rarg2   - int     block_size\n+  \/\/   c_rarg3   - int     offset\n+  \/\/   c_rarg4   - int     limit\n+  \/\/\n+  address generate_sha3_implCompress_gpr(StubGenStubId stub_id) {\n+    bool multi_block;\n+    switch (stub_id) {\n+    case sha3_implCompress_id:\n+      multi_block = false;\n+      break;\n+    case sha3_implCompressMB_id:\n+      multi_block = true;\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+    }\n+\n+    static const uint64_t round_consts[24] = {\n+      0x0000000000000001L, 0x0000000000008082L, 0x800000000000808AL,\n+      0x8000000080008000L, 0x000000000000808BL, 0x0000000080000001L,\n+      0x8000000080008081L, 0x8000000000008009L, 0x000000000000008AL,\n+      0x0000000000000088L, 0x0000000080008009L, 0x000000008000000AL,\n+      0x000000008000808BL, 0x800000000000008BL, 0x8000000000008089L,\n+      0x8000000000008003L, 0x8000000000008002L, 0x8000000000000080L,\n+      0x000000000000800AL, 0x800000008000000AL, 0x8000000080008081L,\n+      0x8000000000008080L, 0x0000000080000001L, 0x8000000080008008L\n+    };\n+\n+    __ align(CodeEntryAlignment);\n+    StubCodeMark mark(this, stub_id);\n+    address start = __ pc();\n+\n+    Register buf           = c_rarg0;\n+    Register state         = c_rarg1;\n+    Register block_size    = c_rarg2;\n+    Register ofs           = c_rarg3;\n+    Register limit         = c_rarg4;\n+\n+    \/\/ use r3.r17,r19..r28 to keep a0..a24.\n+    \/\/ a0..a24 are respective locals from SHA3.java\n+    Register a0 = r25,\n+             a1 = r26,\n+             a2 = r27,\n+             a3 = r3,\n+             a4 = r4,\n+             a5 = r5,\n+             a6 = r6,\n+             a7 = r7,\n+             a8 = rscratch1, \/\/ r8\n+             a9 = rscratch2, \/\/ r9\n+             a10 = r10,\n+             a11 = r11,\n+             a12 = r12,\n+             a13 = r13,\n+             a14 = r14,\n+             a15 = r15,\n+             a16 = r16,\n+             a17 = r17,\n+             a18 = r28,\n+             a19 = r19,\n+             a20 = r20,\n+             a21 = r21,\n+             a22 = r22,\n+             a23 = r23,\n+             a24 = r24;\n+\n+    Register tmp0 = block_size, tmp1 = buf, tmp2 = state, tmp3 = r30;\n+\n+    Label sha3_loop, rounds24_preloop, loop_body;\n+    Label sha3_512_or_sha3_384, shake128;\n+\n+    bool can_use_r18 = false;\n+#ifndef R18_RESERVED\n+    can_use_r18 = true;\n+#endif\n+    bool can_use_fp = !PreserveFramePointer;\n+\n+    __ enter();\n+\n+    \/\/ save almost all yet unsaved gpr registers on stack\n+    __ str(block_size, __ pre(sp, -128));\n+    if (multi_block) {\n+      __ stpw(ofs, limit, Address(sp, 8));\n+    }\n+    \/\/ 8 bytes at sp+16 will be used to keep buf\n+    __ stp(r19, r20, Address(sp, 32));\n+    __ stp(r21, r22, Address(sp, 48));\n+    __ stp(r23, r24, Address(sp, 64));\n+    __ stp(r25, r26, Address(sp, 80));\n+    __ stp(r27, r28, Address(sp, 96));\n+    if (can_use_r18 && can_use_fp) {\n+      __ stp(r18_tls, state, Address(sp, 112));\n+    } else {\n+      __ str(state, Address(sp, 112));\n+    }\n+\n+    \/\/ begin sha3 calculations: loading a0..a24 from state arrary\n+    __ ldp(a0, a1, state);\n+    __ ldp(a2, a3, Address(state, 16));\n+    __ ldp(a4, a5, Address(state, 32));\n+    __ ldp(a6, a7, Address(state, 48));\n+    __ ldp(a8, a9, Address(state, 64));\n+    __ ldp(a10, a11, Address(state, 80));\n+    __ ldp(a12, a13, Address(state, 96));\n+    __ ldp(a14, a15, Address(state, 112));\n+    __ ldp(a16, a17, Address(state, 128));\n+    __ ldp(a18, a19, Address(state, 144));\n+    __ ldp(a20, a21, Address(state, 160));\n+    __ ldp(a22, a23, Address(state, 176));\n+    __ ldr(a24, Address(state, 192));\n+\n+    __ BIND(sha3_loop);\n+\n+    \/\/ load input\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a0, a0, tmp3);\n+    __ eor(a1, a1, tmp2);\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a2, a2, tmp3);\n+    __ eor(a3, a3, tmp2);\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a4, a4, tmp3);\n+    __ eor(a5, a5, tmp2);\n+    __ ldr(tmp3, __ post(buf, 8));\n+    __ eor(a6, a6, tmp3);\n+\n+    \/\/ block_size == 72, SHA3-512; block_size == 104, SHA3-384\n+    __ tbz(block_size, 7, sha3_512_or_sha3_384);\n+\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a7, a7, tmp3);\n+    __ eor(a8, a8, tmp2);\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a9, a9, tmp3);\n+    __ eor(a10, a10, tmp2);\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a11, a11, tmp3);\n+    __ eor(a12, a12, tmp2);\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a13, a13, tmp3);\n+    __ eor(a14, a14, tmp2);\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a15, a15, tmp3);\n+    __ eor(a16, a16, tmp2);\n+\n+    \/\/ block_size == 136, bit4 == 0 and bit5 == 0, SHA3-256 or SHAKE256\n+    __ andw(tmp2, block_size, 48);\n+    __ cbzw(tmp2, rounds24_preloop);\n+    __ tbnz(block_size, 5, shake128);\n+    \/\/ block_size == 144, bit5 == 0, SHA3-244\n+    __ ldr(tmp3, __ post(buf, 8));\n+    __ eor(a17, a17, tmp3);\n+    __ b(rounds24_preloop);\n+\n+    __ BIND(shake128);\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a17, a17, tmp3);\n+    __ eor(a18, a18, tmp2);\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a19, a19, tmp3);\n+    __ eor(a20, a20, tmp2);\n+    __ b(rounds24_preloop); \/\/ block_size == 168, SHAKE128\n+\n+    __ BIND(sha3_512_or_sha3_384);\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a7, a7, tmp3);\n+    __ eor(a8, a8, tmp2);\n+    __ tbz(block_size, 5, rounds24_preloop); \/\/ SHA3-512\n+\n+    \/\/ SHA3-384\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a9, a9, tmp3);\n+    __ eor(a10, a10, tmp2);\n+    __ ldp(tmp3, tmp2, __ post(buf, 16));\n+    __ eor(a11, a11, tmp3);\n+    __ eor(a12, a12, tmp2);\n+\n+    __ BIND(rounds24_preloop);\n+    __ fmovs(v0, 24.0); \/\/ float loop counter,\n+    __ fmovs(v1, 1.0);  \/\/ exact representation\n+\n+    __ str(buf, Address(sp, 16));\n+    __ lea(tmp3, ExternalAddress((address) round_consts));\n+\n+    __ BIND(loop_body);\n+    keccak_round_gpr(can_use_fp, can_use_r18, tmp3,\n+                     a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12,\n+                     a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24,\n+                     tmp0, tmp1, tmp2);\n+    __ fsubs(v0, v0, v1);\n+    __ fcmps(v0, 0.0);\n+    __ br(__ NE, loop_body);\n+\n+    if (multi_block) {\n+      __ ldrw(block_size, sp); \/\/ block_size\n+      __ ldpw(tmp2, tmp1, Address(sp, 8)); \/\/ offset, limit\n+      __ addw(tmp2, tmp2, block_size);\n+      __ cmpw(tmp2, tmp1);\n+      __ strw(tmp2, Address(sp, 8)); \/\/ store offset in case we're jumping\n+      __ ldr(buf, Address(sp, 16)); \/\/ restore buf in case we're jumping\n+      __ br(Assembler::LE, sha3_loop);\n+      __ movw(c_rarg0, tmp2); \/\/ return offset\n+    }\n+    if (can_use_fp && can_use_r18) {\n+      __ ldp(r18_tls, state, Address(sp, 112));\n+    } else {\n+      __ ldr(state, Address(sp, 112));\n+    }\n+    \/\/ saving calculated sha3 state\n+    __ stp(a0, a1, Address(state));\n+    __ stp(a2, a3, Address(state, 16));\n+    __ stp(a4, a5, Address(state, 32));\n+    __ stp(a6, a7, Address(state, 48));\n+    __ stp(a8, a9, Address(state, 64));\n+    __ stp(a10, a11, Address(state, 80));\n+    __ stp(a12, a13, Address(state, 96));\n+    __ stp(a14, a15, Address(state, 112));\n+    __ stp(a16, a17, Address(state, 128));\n+    __ stp(a18, a19, Address(state, 144));\n+    __ stp(a20, a21, Address(state, 160));\n+    __ stp(a22, a23, Address(state, 176));\n+    __ str(a24, Address(state, 192));\n+\n+    \/\/ restore required registers from stack\n+    __ ldp(r19, r20, Address(sp, 32));\n+    __ ldp(r21, r22, Address(sp, 48));\n+    __ ldp(r23, r24, Address(sp, 64));\n+    __ ldp(r25, r26, Address(sp, 80));\n+    __ ldp(r27, r28, Address(sp, 96));\n+    if (can_use_fp && can_use_r18) {\n+      __ add(rfp, sp, 128); \/\/ leave() will copy rfp to sp below\n+    } \/\/ else no need to recalculate rfp, since it wasn't changed\n+\n+    __ leave();\n+\n+    __ ret(lr);\n+\n+    return start;\n+  }\n+\n@@ -11515,1 +11875,1 @@\n-      StubRoutines::_sha3_implCompress     = generate_sha3_implCompress(StubGenStubId::sha3_implCompress_id);\n+\n@@ -11517,1 +11877,7 @@\n-      StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress(StubGenStubId::sha3_implCompressMB_id);\n+      if (UseSIMDForSHA3Intrinsic) {\n+         StubRoutines::_sha3_implCompress     = generate_sha3_implCompress(StubGenStubId::sha3_implCompress_id);\n+         StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress(StubGenStubId::sha3_implCompressMB_id);\n+      } else {\n+         StubRoutines::_sha3_implCompress     = generate_sha3_implCompress_gpr(StubGenStubId::sha3_implCompress_id);\n+         StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress_gpr(StubGenStubId::sha3_implCompressMB_id);\n+      }\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":368,"deletions":2,"binary":false,"changes":370,"status":"modified"},{"patch":"@@ -382,1 +382,1 @@\n-  } else if (UseSHA3Intrinsics) {\n+  } else if (UseSHA3Intrinsics && UseSIMDForSHA3Intrinsic) {\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -61,0 +62,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -79,0 +81,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -97,0 +100,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -113,0 +117,122 @@\n+\/**\n+ * @test\n+ * @bug 8337666\n+ * @requires os.arch == \"aarch64\"\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 intrinsic is actually used.\n+ *          -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log positive_384.log positive_512.log\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8337666\n+ * @requires os.arch == \"aarch64\"\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 intrinsic is actually used.\n+ *          -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log positive_384.log positive_512.log\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3Intrinsics.java","additions":127,"deletions":1,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -53,0 +54,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -70,0 +72,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -80,0 +83,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -97,0 +101,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -107,0 +112,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -124,0 +130,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -134,0 +141,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -150,0 +158,220 @@\n+\/**\n+ * @test\n+ * @bug 8337666\n+ * @requires os.arch == \"aarch64\"\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 multi block intrinsic is actually used.\n+ *          -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-224\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-256\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-384\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-512\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log\n+ *                    positive_384.log positive_512.log positive_224_def.log positive_256_def.log\n+ *                    positive_384_def.log positive_512_def.log\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8337666\n+ * @requires os.arch == \"aarch64\"\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 multi block intrinsic is actually used.\n+ *          -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-224\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-256\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-384\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-512\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log\n+ *                    positive_384.log positive_512.log positive_224_def.log positive_256_def.log\n+ *                    positive_384_def.log positive_512_def.log\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3MultiBlockIntrinsics.java","additions":229,"deletions":1,"binary":false,"changes":230,"status":"modified"}]}