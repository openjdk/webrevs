{"files":[{"patch":"@@ -100,0 +100,2 @@\n+  product(bool, UseSIMDForSHA3Intrinsic, true,                          \\\n+          \"Use SIMD SHA3 instructions for SHA3 intrinsic\")              \\\n","filename":"src\/hotspot\/cpu\/aarch64\/globals_aarch64.hpp","additions":2,"deletions":0,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -4408,0 +4408,390 @@\n+  \/\/ Arguments:\n+  \/\/\n+  \/\/ Inputs:\n+  \/\/   c_rarg0   - byte[]  source+offset\n+  \/\/   c_rarg1   - byte[]  SHA.state\n+  \/\/   c_rarg2   - int     block_size\n+  \/\/   c_rarg3   - int     offset\n+  \/\/   c_rarg4   - int     limit\n+  \/\/\n+  address generate_sha3_implCompress_gpr(StubGenStubId stub_id) {\n+    bool multi_block;\n+    switch (stub_id) {\n+    case sha3_implCompress_id:\n+      multi_block = false;\n+      break;\n+    case sha3_implCompressMB_id:\n+      multi_block = true;\n+      break;\n+    default:\n+      ShouldNotReachHere();\n+    }\n+\n+    static const uint64_t round_consts[24] = {\n+      0x0000000000000001L, 0x0000000000008082L, 0x800000000000808AL,\n+      0x8000000080008000L, 0x000000000000808BL, 0x0000000080000001L,\n+      0x8000000080008081L, 0x8000000000008009L, 0x000000000000008AL,\n+      0x0000000000000088L, 0x0000000080008009L, 0x000000008000000AL,\n+      0x000000008000808BL, 0x800000000000008BL, 0x8000000000008089L,\n+      0x8000000000008003L, 0x8000000000008002L, 0x8000000000000080L,\n+      0x000000000000800AL, 0x800000008000000AL, 0x8000000080008081L,\n+      0x8000000000008080L, 0x0000000080000001L, 0x8000000080008008L\n+    };\n+\n+    __ align(CodeEntryAlignment);\n+    StubCodeMark mark(this, stub_id);\n+    address start = __ pc();\n+\n+    Register buf           = c_rarg0;\n+    Register state         = c_rarg1;\n+    Register block_size    = c_rarg2;\n+    Register ofs           = c_rarg3;\n+    Register limit         = c_rarg4;\n+\n+    \/\/ use r3.r17,r19..r28 to keep a0..a24.\n+    \/\/ a0..a24 are respective locals from SHA3.java\n+    Register a0 = r25,\n+             a1 = r26,\n+             a2 = r27,\n+             a3 = r3,\n+             a4 = r4,\n+             a5 = r5,\n+             a6 = r6,\n+             a7 = r7,\n+             a8 = r8,\n+             a9 = r9,\n+             a10 = r10,\n+             a11 = r11,\n+             a12 = r12,\n+             a13 = r13,\n+             a14 = r14,\n+             a15 = r15,\n+             a16 = r16,\n+             a17 = r17,\n+             a18 = r28,\n+             a19 = r19,\n+             a20 = r20,\n+             a21 = r21,\n+             a22 = r22,\n+             a23 = r23,\n+             a24 = r24;\n+\n+    Register tmp1 = block_size, tmp2 = buf, tmp3 = state, tmp4 = r30;\n+\n+    Label sha3_loop, rounds24_preloop, loop_body;\n+    Label sha3_512_or_sha3_384, shake128;\n+\n+    bool can_use_r18 = false;\n+#ifndef R18_RESERVED\n+    can_use_r18 = true;\n+#endif\n+    bool can_use_fp = !PreserveFramePointer;\n+\n+    __ enter();\n+\n+    \/\/ save almost all yet unsaved gpr registers on stack\n+    __ str(block_size, __ pre(sp, -128));\n+    if (multi_block) {\n+      __ stpw(ofs, limit, Address(sp, 8));\n+    }\n+    \/\/ 16 bytes at st+16 will be used to keep buf and loop counter\n+    __ stp(r19, r20, Address(sp, 32));\n+    __ stp(r21, r22, Address(sp, 48));\n+    __ stp(r23, r24, Address(sp, 64));\n+    __ stp(r25, r26, Address(sp, 80));\n+    __ stp(r27, r28, Address(sp, 96));\n+    if (can_use_r18 && can_use_fp) {\n+      __ stp(r18_tls, state, Address(sp, 112));\n+    } else {\n+      __ str(state, Address(sp, 112));\n+    }\n+\n+    \/\/ begin sha3 calculations: loading a0..a24 from state arrary\n+    __ ldp(a0, a1, state);\n+    __ ldp(a2, a3, Address(state, 16));\n+    __ ldp(a4, a5, Address(state, 32));\n+    __ ldp(a6, a7, Address(state, 48));\n+    __ ldp(a8, a9, Address(state, 64));\n+    __ ldp(a10, a11, Address(state, 80));\n+    __ ldp(a12, a13, Address(state, 96));\n+    __ ldp(a14, a15, Address(state, 112));\n+    __ ldp(a16, a17, Address(state, 128));\n+    __ ldp(a18, a19, Address(state, 144));\n+    __ ldp(a20, a21, Address(state, 160));\n+    __ ldp(a22, a23, Address(state, 176));\n+    __ ldr(a24, Address(state, 192));\n+\n+    __ BIND(sha3_loop);\n+\n+    \/\/ load input\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a0, a0, tmp4);\n+    __ eor(a1, a1, tmp3);\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a2, a2, tmp4);\n+    __ eor(a3, a3, tmp3);\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a4, a4, tmp4);\n+    __ eor(a5, a5, tmp3);\n+    __ ldr(tmp4, __ post(buf, 8));\n+    __ eor(a6, a6, tmp4);\n+\n+    \/\/ block_size == 72, SHA3-512; block_size == 104, SHA3-384\n+    __ tbz(block_size, 7, sha3_512_or_sha3_384);\n+\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a7, a7, tmp4);\n+    __ eor(a8, a8, tmp3);\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a9, a9, tmp4);\n+    __ eor(a10, a10, tmp3);\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a11, a11, tmp4);\n+    __ eor(a12, a12, tmp3);\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a13, a13, tmp4);\n+    __ eor(a14, a14, tmp3);\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a15, a15, tmp4);\n+    __ eor(a16, a16, tmp3);\n+\n+    \/\/ block_size == 136, bit4 == 0 and bit5 == 0, SHA3-256 or SHAKE256\n+    __ andw(tmp3, block_size, 48);\n+    __ cbzw(tmp3, rounds24_preloop);\n+    __ tbnz(block_size, 5, shake128);\n+    \/\/ block_size == 144, bit5 == 0, SHA3-244\n+    __ ldr(tmp4, __ post(buf, 8));\n+    __ eor(a17, a17, tmp4);\n+    __ b(rounds24_preloop);\n+\n+    __ BIND(shake128);\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a17, a17, tmp4);\n+    __ eor(a18, a18, tmp3);\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a19, a19, tmp4);\n+    __ eor(a20, a20, tmp3);\n+    __ b(rounds24_preloop); \/\/ block_size == 168, SHAKE128\n+\n+    __ BIND(sha3_512_or_sha3_384);\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a7, a7, tmp4);\n+    __ eor(a8, a8, tmp3);\n+    __ tbz(block_size, 5, rounds24_preloop); \/\/ SHA3-512\n+\n+    \/\/ SHA3-384\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a9, a9, tmp4);\n+    __ eor(a10, a10, tmp3);\n+    __ ldp(tmp4, tmp3, __ post(buf, 16));\n+    __ eor(a11, a11, tmp4);\n+    __ eor(a12, a12, tmp3);\n+\n+    __ BIND(rounds24_preloop);\n+    __ mov(tmp1, 24);\n+    __ stp(buf, tmp1, Address(sp, 16));\n+    __ lea(tmp4, ExternalAddress((address) round_consts));\n+\n+    __ BIND(loop_body);\n+\n+    __ eor(tmp1, a4, a9); \/\/ tmp1 = a4^a9\n+    __ eor(tmp2, a14, a19); \/\/ tmp2 = a14^a19\n+    __ eor(tmp3, a1, a6); \/\/ tmp3 = a1^a6\n+    __ eor(tmp1, tmp1, tmp2); \/\/ tmp1 = a4^a9^a14^19\n+    __ eor(tmp2, a11, a16); \/\/ tmp2 = a11^16\n+    __ eor(tmp1, tmp1, a24); \/\/ tmp1 = a4^a9^a14^a19^a24 = c4\n+    __ eor(tmp2, tmp2, tmp3); \/\/ tmp2 = a1^a6^a11^a16\n+    __ eor(tmp2, tmp2, a21); \/\/ tmp2 = a1^a6^a11^a16^a21 = c1\n+    __ eor(tmp3, tmp1, tmp2, __ ROR, 63); \/\/ d0\n+    {\n+      Register tmp5, tmp6;\n+      if (can_use_fp && can_use_r18) {\n+        tmp5 = rfp;\n+        tmp6 = r18_tls;\n+      } else {\n+        tmp5 = a4;\n+        tmp6 = a9;\n+        __ stp(tmp5, tmp6, __ pre(sp, -16));\n+      }\n+      __ eor(tmp6, a0, a5); \/\/ tmp6 = a0^a5\n+      __ eor(a0, a0, tmp3);\n+      __ eor(a5, a5, tmp3);\n+      __ eor(tmp5, a10, a15); \/\/ tmp5 = a10^a15\n+      __ eor(a10, a10, tmp3);\n+      __ eor(a15, a15, tmp3);\n+      __ eor(tmp6, tmp6, tmp5); \/\/ tmp6 = a0^a5^a10^a15\n+      __ eor(tmp6, tmp6, a20); \/\/ tmp6 = a0^a5^a10^a15^a20 = c0\n+      __ eor(a20, a20, tmp3); \/\/ d0(tmp3)\n+      __ eor(tmp5, a2, a7); \/\/ tmp5 = a2^a7\n+      __ eor(tmp3, a12, a17); \/\/ tmp3 = a12^a17\n+      __ eor(tmp3, tmp3, tmp5); \/\/ tmp3 = a2^a7^a12^a17\n+      __ eor(tmp3, tmp3, a22); \/\/ tmp3 = a2^a7^a12^a17^a22 = c2\n+      __ eor(tmp5, tmp6, tmp3, __ ROR, 63); \/\/ d1.\n+      __ eor(a1, a1, tmp5);\n+      __ eor(a6, a6, tmp5);\n+      __ eor(a11, a11, tmp5);\n+      __ eor(a16, a16, tmp5);\n+      __ eor(a21, a21, tmp5); \/\/ d1(tmp5)\n+      __ eor(tmp5, tmp3, tmp1, __ ROR, 63); \/\/ d3\n+      __ eor(tmp1, a3, a8); \/\/ tmp1 = a3^a8\n+      __ eor(a3, a3, tmp5);\n+      __ eor(a8, a8, tmp5);\n+      __ eor(tmp3, a13, a18); \/\/ tmp3 = a13^a18\n+      __ eor(a13, a13, tmp5);\n+      __ eor(a18, a18, tmp5);\n+      __ eor(tmp1, tmp1, tmp3); \/\/ tmp1 = a3^a8^a13^a18\n+      __ eor(tmp1, tmp1, a23);  \/\/ tmp1 = a3^a8^a13^a18^a23 = c3\n+      __ eor(a23, a23, tmp5);\n+      __ eor(tmp3, tmp2, tmp1, __ ROR, 63); \/\/ d2\n+      __ eor(a2, a2, tmp3);\n+      __ eor(a7, a7, tmp3);\n+      __ eor(a12, a12, tmp3);\n+      __ eor(tmp1, tmp1, tmp6, __ ROR, 63); \/\/ d4\n+      if (!can_use_fp || !can_use_r18) {\n+        __ ldp(tmp5, tmp6, __ post(sp, 16));\n+      }\n+      __ eor(a17, a17, tmp3);\n+      __ eor(a22, a22, tmp3);\n+      __ eor(a4, a4, tmp1);\n+      __ eor(a9, a9, tmp1);\n+      __ eor(a14, a14, tmp1);\n+      __ eor(a19, a19, tmp1);\n+      __ eor(a24, a24, tmp1);\n+    }\n+\n+    __ ror(tmp1, a10, 64 - 3);\n+    __ ror(a10, a1, 64 - 1);\n+    __ ror(a1, a6, 64 - 44);\n+    __ ror(a6, a9, 64 - 20);\n+    __ ror(a9, a22, 64 - 61);\n+    __ ror(a22, a14, 64 - 39);\n+    __ ror(a14, a20, 64 - 18);\n+    __ ror(a20, a2, 64 - 62);\n+    __ ror(a2, a12, 64 - 43);\n+    __ ror(a12, a13, 64 - 25);\n+    __ ror(a13, a19, 64 - 8) ;\n+    __ ror(a19, a23, 64 - 56);\n+    __ ror(a23, a15, 64 - 41);\n+    __ ror(a15, a4, 64 - 27);\n+    __ ror(a4, a24, 64 - 14);\n+    __ ror(a24, a21, 64 - 2);\n+    __ ror(a21, a8, 64 - 55);\n+    __ ror(a8, a16, 64 - 45);\n+    __ ror(a16, a5, 64 - 36);\n+    __ ror(a5, a3, 64 - 28);\n+    __ ror(a3, a18, 64 - 21);\n+    __ ror(a18, a17, 64 - 15);\n+    __ ror(a17, a11, 64 - 10);\n+    __ ror(a11, a7, 64 - 6);\n+    __ mov(a7, tmp1);\n+\n+    __ bic(tmp1, a2, a1); \/\/ for a0\n+    __ bic(tmp2, a3, a2); \/\/ for a1\n+    __ bic(tmp3, a4, a3); \/\/ for a2\n+    __ eor(a2, a2, tmp3);\n+    __ bic(tmp3, a0, a4); \/\/ for a3\n+    __ eor(a3, a3, tmp3);\n+    __ bic(tmp3, a1, a0); \/\/ for a4\n+    __ eor(a0, a0, tmp1);\n+    __ eor(a1, a1, tmp2);\n+    __ eor(a4, a4, tmp3);\n+\n+    __ bic(tmp1, a7, a6); \/\/ for a5\n+    __ bic(tmp2, a8, a7); \/\/ for a6\n+    __ bic(tmp3, a9, a8); \/\/ for a7\n+    __ eor(a7, a7, tmp3);\n+    __ bic(tmp3, a5, a9); \/\/ for a8\n+    __ eor(a8, a8, tmp3);\n+    __ bic(tmp3, a6, a5); \/\/ for a9\n+    __ eor(a5, a5, tmp1);\n+    __ eor(a6, a6, tmp2);\n+    __ eor(a9, a9, tmp3);\n+\n+    __ bic(tmp1, a12, a11); \/\/ for a10\n+    __ bic(tmp2, a13, a12); \/\/ for a11\n+    __ bic(tmp3, a14, a13); \/\/ for a12\n+    __ eor(a12, a12, tmp3);\n+    __ bic(tmp3, a10, a14); \/\/ for a13\n+    __ eor(a13, a13, tmp3);\n+    __ bic(tmp3, a11, a10); \/\/ for a14\n+    __ eor(a10, a10, tmp1);\n+    __ eor(a11, a11, tmp2);\n+    __ eor(a14, a14, tmp3);\n+\n+    __ bic(tmp1, a17, a16); \/\/ for a15\n+    __ bic(tmp2, a18, a17); \/\/ for a16\n+    __ bic(tmp3, a19, a18); \/\/ for a17\n+    __ eor(a17, a17, tmp3);\n+    __ bic(tmp3, a15, a19); \/\/ for a18\n+    __ eor(a18, a18, tmp3);\n+    __ bic(tmp3, a16, a15); \/\/ for a19\n+    __ eor(a15, a15, tmp1);\n+    __ eor(a16, a16, tmp2);\n+    __ eor(a19, a19, tmp3);\n+\n+    __ bic(tmp1, a22, a21); \/\/ for a20\n+    __ bic(tmp2, a23, a22); \/\/ for a21\n+    __ bic(tmp3, a24, a23); \/\/ for a22\n+    __ eor(a22, a22, tmp3);\n+    __ bic(tmp3, a20, a24); \/\/ for a23\n+    __ eor(a23, a23, tmp3);\n+    __ bic(tmp3, a21, a20); \/\/ for a24\n+    __ eor(a20, a20, tmp1);\n+    __ eor(a21, a21, tmp2);\n+    __ eor(a24, a24, tmp3);\n+\n+    __ ldr(tmp1, Address(sp, 24)); \/\/ loop counter\n+    __ ldr(tmp2, __ post(tmp4, 8));\n+    __ eor(a0, a0, tmp2);\n+\n+    __ subsw(tmp1, tmp1, 1); \/\/ decrease loop counter\n+    __ str(tmp1, Address(sp, 24)); \/\/ save loop counter\n+    __ br(__ NE, loop_body);\n+\n+    if (multi_block) {\n+      __ ldrw(block_size, sp); \/\/ block_size\n+      __ ldpw(tmp3, tmp2, Address(sp, 8)); \/\/ offset, limit\n+      __ addw(tmp3, tmp3, block_size);\n+      __ cmpw(tmp3, tmp2);\n+      __ strw(tmp3, Address(sp, 8)); \/\/ store offset in case we're jumping\n+      __ ldr(buf, Address(sp, 16)); \/\/ restore buf in case we're jumping\n+      __ br(Assembler::LE, sha3_loop);\n+      __ movw(c_rarg0, tmp3); \/\/ return offset\n+    }\n+    if (can_use_fp && can_use_r18) {\n+      __ ldp(r18_tls, state, Address(sp, 112));\n+    } else {\n+      __ ldr(state, Address(sp, 112));\n+    }\n+    \/\/ saving calculated sha3 state\n+    __ stp(a0, a1, Address(state));\n+    __ stp(a2, a3, Address(state, 16));\n+    __ stp(a4, a5, Address(state, 32));\n+    __ stp(a6, a7, Address(state, 48));\n+    __ stp(a8, a9, Address(state, 64));\n+    __ stp(a10, a11, Address(state, 80));\n+    __ stp(a12, a13, Address(state, 96));\n+    __ stp(a14, a15, Address(state, 112));\n+    __ stp(a16, a17, Address(state, 128));\n+    __ stp(a18, a19, Address(state, 144));\n+    __ stp(a20, a21, Address(state, 160));\n+    __ stp(a22, a23, Address(state, 176));\n+    __ str(a24, Address(state, 192));\n+\n+    \/\/ restore required registers from stack\n+    __ ldp(r19, r20, Address(sp, 32));\n+    __ ldp(r21, r22, Address(sp, 48));\n+    __ ldp(r23, r24, Address(sp, 64));\n+    __ ldp(r25, r26, Address(sp, 80));\n+    __ ldp(r27, r28, Address(sp, 96));\n+    if (can_use_fp && can_use_r18) {\n+      __ add(rfp, sp, 128); \/\/ leave() will copy rfp to sp below\n+    } \/\/ else no need to recalculate rfp, since it wasn't changed\n+\n+    __ leave();\n+\n+    __ ret(lr);\n+\n+    return start;\n+  }\n+\n@@ -10055,1 +10445,0 @@\n-      StubRoutines::_sha3_implCompress     = generate_sha3_implCompress(StubGenStubId::sha3_implCompress_id);\n@@ -10057,1 +10446,7 @@\n-      StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress(StubGenStubId::sha3_implCompressMB_id);\n+      if (UseSIMDForSHA3Intrinsic) {\n+         StubRoutines::_sha3_implCompress     = generate_sha3_implCompress(StubGenStubId::sha3_implCompress_id);\n+         StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress(StubGenStubId::sha3_implCompressMB_id);\n+      } else {\n+         StubRoutines::_sha3_implCompress     = generate_sha3_implCompress_gpr(StubGenStubId::sha3_implCompress_id);\n+         StubRoutines::_sha3_implCompressMB   = generate_sha3_implCompress_gpr(StubGenStubId::sha3_implCompressMB_id);\n+      }\n","filename":"src\/hotspot\/cpu\/aarch64\/stubGenerator_aarch64.cpp","additions":397,"deletions":2,"binary":false,"changes":399,"status":"modified"},{"patch":"@@ -379,1 +379,1 @@\n-  } else if (UseSHA3Intrinsics) {\n+  } else if (UseSHA3Intrinsics && UseSIMDForSHA3Intrinsic) {\n","filename":"src\/hotspot\/cpu\/aarch64\/vm_version_aarch64.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -61,0 +62,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -79,0 +81,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -97,0 +100,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -113,0 +117,122 @@\n+\/**\n+ * @test\n+ * @bug 8337666\n+ * @requires os.arch == \"aarch64\"\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 intrinsic is actually used.\n+ *          -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log positive_384.log positive_512.log\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8337666\n+ * @requires os.arch == \"aarch64\"\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 intrinsic is actually used.\n+ *          -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3Intrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log positive_384.log positive_512.log\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3Intrinsics.java","additions":127,"deletions":1,"binary":false,"changes":128,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2021, 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2021, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -43,0 +43,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -53,0 +54,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -70,0 +72,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -80,0 +83,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -97,0 +101,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -107,0 +112,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -124,0 +130,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -134,0 +141,1 @@\n+ *                   -XX:+IgnoreUnrecognizedVMOptions -XX:+UseSIMDForSHA3Intrinsic\n@@ -150,0 +158,220 @@\n+\/**\n+ * @test\n+ * @bug 8337666\n+ * @requires os.arch == \"aarch64\"\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 multi block intrinsic is actually used.\n+ *          -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-224\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-256\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-384\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-512\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:-PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log\n+ *                    positive_384.log positive_512.log positive_224_def.log positive_256_def.log\n+ *                    positive_384_def.log positive_512_def.log\n+ *\/\n+\n+\/**\n+ * @test\n+ * @bug 8337666\n+ * @requires os.arch == \"aarch64\"\n+ * @summary Verify that SHA3-224, SHA3-256, SHA3-384, SHA3-512 multi block intrinsic is actually used.\n+ *          -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *\n+ * @library \/test\/lib \/\n+ * @modules java.base\/jdk.internal.misc\n+ *          java.management\n+ *\n+ * @build jdk.test.whitebox.WhiteBox\n+ * @run driver jdk.test.lib.helpers.ClassFileInstaller jdk.test.whitebox.WhiteBox\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-224\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_224_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-224\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-256\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_256_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-256\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-384\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_384_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-384\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ *\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -XX:-UseMD5Intrinsics\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   -XX:-UseSHA1Intrinsics -XX:-UseSHA256Intrinsics\n+ *                   -XX:-UseSHA512Intrinsics -Dalgorithm=SHA3-512\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -Xbootclasspath\/a:. -XX:+UnlockDiagnosticVMOptions\n+ *                   -XX:+WhiteBoxAPI -Xbatch -XX:CompileThreshold=500\n+ *                   -XX:Tier4InvocationThreshold=500\n+ *                   -XX:+LogCompilation -XX:LogFile=positive_512_def.log\n+ *                   -XX:CompileOnly=sun.security.provider.DigestBase::*\n+ *                   -XX:CompileOnly=sun.security.provider.SHA3::*\n+ *                   -XX:+UseSHA3Intrinsics -Dalgorithm=SHA3-512\n+ *                   -XX:+IgnoreUnrecognizedVMOptions\n+ *                   -XX:-UseSIMDForSHA3Intrinsic -XX:+PreserveFramePointer\n+ *                   compiler.intrinsics.sha.sanity.TestSHA3MultiBlockIntrinsics\n+ * @run main\/othervm -DverificationStrategy=VERIFY_INTRINSIC_USAGE\n+ *                    compiler.testlibrary.intrinsics.Verifier positive_224.log positive_256.log\n+ *                    positive_384.log positive_512.log positive_224_def.log positive_256_def.log\n+ *                    positive_384_def.log positive_512_def.log\n+ *\/\n+\n","filename":"test\/hotspot\/jtreg\/compiler\/intrinsics\/sha\/sanity\/TestSHA3MultiBlockIntrinsics.java","additions":229,"deletions":1,"binary":false,"changes":230,"status":"modified"}]}