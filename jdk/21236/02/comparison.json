{"files":[{"patch":"@@ -26,1 +26,1 @@\n-#include \"gc\/shenandoah\/shenandoahSimpleBitMap.hpp\"\n+#include \"gc\/shenandoah\/shenandoahSimpleBitMap.inline.hpp\"\n@@ -46,2 +46,2 @@\n-  uintx bit_number = start_idx & right_n_bits(LogBitsPerWord);\n-  uintx mask = ~right_n_bits(bit_number);\n+  uintx bit_number = start_idx & get_right_n_bits(LogBitsPerWord);\n+  uintx mask = ~get_right_n_bits(bit_number);\n@@ -73,1 +73,1 @@\n-  uintx bit_number = last_idx & right_n_bits(LogBitsPerWord);\n+  uintx bit_number = last_idx & get_right_n_bits(LogBitsPerWord);\n@@ -75,1 +75,1 @@\n-  uintx mask = right_n_bits(bit_number + 1);\n+  uintx mask = get_right_n_bits(bit_number + 1);\n@@ -102,1 +102,1 @@\n-    uintx bit_number = start_idx & right_n_bits(LogBitsPerWord);\n+    uintx bit_number = start_idx & get_right_n_bits(LogBitsPerWord);\n@@ -131,1 +131,1 @@\n-    uintx bit_number = last_idx & right_n_bits(LogBitsPerWord);\n+    uintx bit_number = last_idx & get_right_n_bits(LogBitsPerWord);\n@@ -164,1 +164,1 @@\n-  uintx bit_number = beg & right_n_bits(LogBitsPerWord);\n+  uintx bit_number = beg & get_right_n_bits(LogBitsPerWord);\n@@ -167,1 +167,1 @@\n-    uintx mask_out = right_n_bits(bit_number);\n+    uintx mask_out = get_right_n_bits(bit_number);\n@@ -225,1 +225,1 @@\n-      bit_number = beg & right_n_bits(LogBitsPerWord);\n+      bit_number = beg & get_right_n_bits(LogBitsPerWord);\n@@ -227,1 +227,1 @@\n-        size_t mask_out = right_n_bits(bit_number);\n+        size_t mask_out = get_right_n_bits(bit_number);\n@@ -245,1 +245,1 @@\n-  uintx bit_number = end & right_n_bits(LogBitsPerWord);\n+  uintx bit_number = end & get_right_n_bits(LogBitsPerWord);\n@@ -248,1 +248,1 @@\n-    uintx mask_in = right_n_bits(bit_number + 1);\n+    uintx mask_in = get_right_n_bits(bit_number + 1);\n@@ -283,1 +283,1 @@\n-      bit_number = end & right_n_bits(LogBitsPerWord);\n+      bit_number = end & get_right_n_bits(LogBitsPerWord);\n@@ -286,1 +286,1 @@\n-        size_t mask_in = right_n_bits(bit_number + 1);\n+        size_t mask_in = get_right_n_bits(bit_number + 1);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.cpp","additions":15,"deletions":15,"binary":false,"changes":30,"status":"modified"},{"patch":"@@ -83,0 +83,4 @@\n+  template<typename T>\n+  static T get_right_n_bits(T n) {\n+    return nth_bit(n) - T(1);\n+  }\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.hpp","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -35,1 +35,1 @@\n-    uintx bit_number = beg & right_n_bits(LogBitsPerWord);\n+    uintx bit_number = beg & get_right_n_bits(LogBitsPerWord);\n@@ -38,1 +38,1 @@\n-      uintx mask_out = right_n_bits(bit_number);\n+      uintx mask_out = get_right_n_bits(bit_number);\n@@ -65,1 +65,1 @@\n-    uintx bit_number = end & right_n_bits(LogBitsPerWord);\n+    uintx bit_number = end & get_right_n_bits(LogBitsPerWord);\n@@ -68,1 +68,1 @@\n-      uintx mask_in = right_n_bits(bit_number + 1);\n+      uintx mask_in = get_right_n_bits(bit_number + 1UL);\n","filename":"src\/hotspot\/share\/gc\/shenandoah\/shenandoahSimpleBitMap.inline.hpp","additions":4,"deletions":4,"binary":false,"changes":8,"status":"modified"}]}