{"files":[{"patch":"@@ -1725,2 +1725,1 @@\n-         assert(cnt->bottom_type()->isa_long() &&\n-                cnt->bottom_type()->is_long()->is_con(), \"Long constant expected\");\n+         assert(cnt->bottom_type()->isa_long(), \"long type shift count expected\");\n","filename":"src\/hotspot\/share\/opto\/vectornode.cpp","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -0,0 +1,129 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package compiler.vectorapi;\n+\n+import compiler.lib.ir_framework.*;\n+import compiler.lib.verify.Verify;\n+import jdk.incubator.vector.*;\n+\n+\/*\n+ * @test\n+ * @bug 8351635\n+ * @summary Test missing pattern in vector rotate generation\n+ * @modules jdk.incubator.vector\n+ * @library \/test\/lib \/\n+ * @run driver compiler.vectorapi.TestVectorRotateScalarCount\n+ *\/\n+public class TestVectorRotateScalarCount {\n+    public static void main(String[] args) {\n+        TestFramework.runWithFlags(\"--add-modules=jdk.incubator.vector\", \"-XX:+IgnoreUnrecognizedVMOptions\", \"-XX:UseAVX=2\");\n+    }\n+\n+    public static long long_shift = 31L;\n+    public static int int_shift = 12;\n+\n+    static final Object GOLD_PATTERN1a = pattern1a();\n+    static final Object GOLD_PATTERN1b = pattern1b();\n+    static final Object GOLD_PATTERN2 = pattern2();\n+    static final Object GOLD_PATTERN3 = pattern3();\n+    static final Object GOLD_PATTERN4 = pattern4();\n+\n+    @Test\n+    @IR(counts = {IRNode.URSHIFT_VL, IRNode.VECTOR_SIZE_2, \"1\",\n+                  IRNode.LSHIFT_VL, IRNode.VECTOR_SIZE_2, \"1\",\n+                  IRNode.OR_VL, IRNode.VECTOR_SIZE_2, \"1\"},\n+                  applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512f\", \"false\", \"avx512vl\", \"false\"})\n+    public static Object pattern1a() {\n+        LongVector lv1 = LongVector.broadcast(LongVector.SPECIES_128, 1);\n+        long x = Long.divideUnsigned(long_shift, Long.MIN_VALUE);\n+        return lv1.lanewise(VectorOperators.ROL, x);\n+    }\n+\n+    @Check(test = \"pattern1a\")\n+    public static void check_pattern1a(Object param) {\n+        Verify.checkEQ(GOLD_PATTERN1a, param);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.URSHIFT_VL, IRNode.VECTOR_SIZE_2, \"1\",\n+                  IRNode.LSHIFT_VL, IRNode.VECTOR_SIZE_2, \"1\",\n+                  IRNode.OR_VL, IRNode.VECTOR_SIZE_2, \"1\"},\n+                  applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512f\", \"false\", \"avx512vl\", \"false\"})\n+    public static Object pattern1b() {\n+        LongVector lv1 = LongVector.broadcast(LongVector.SPECIES_128, 1);\n+        long x = Long.min(32, Long.max(Long.reverse(long_shift), 0));\n+        return lv1.lanewise(VectorOperators.ROR, x);\n+    }\n+\n+    @Check(test = \"pattern1b\")\n+    public static void check_pattern1b(Object param) {\n+        Verify.checkEQ(GOLD_PATTERN1b, param);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.URSHIFT_VL, IRNode.VECTOR_SIZE_2, \"1\",\n+                  IRNode.LSHIFT_VL, IRNode.VECTOR_SIZE_2, \"1\",\n+                  IRNode.OR_VL, IRNode.VECTOR_SIZE_2, \"1\"},\n+                  applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512f\", \"false\", \"avx512vl\", \"false\"})\n+    public static Object pattern2() {\n+        LongVector lv1 = LongVector.broadcast(LongVector.SPECIES_128, 1);\n+        return lv1.lanewise(VectorOperators.ROL, int_shift);\n+    }\n+\n+    @Check(test = \"pattern2\")\n+    public static void check_pattern2(Object param) {\n+       Verify.checkEQ(GOLD_PATTERN2, param);\n+    }\n+\n+    @Test\n+    @IR(counts = {IRNode.URSHIFT_VL, IRNode.VECTOR_SIZE_2, \"1\",\n+                  IRNode.LSHIFT_VL, IRNode.VECTOR_SIZE_2, \"1\",\n+                  IRNode.OR_VL, IRNode.VECTOR_SIZE_2, \"1\"},\n+                  applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512f\", \"false\", \"avx512vl\", \"false\"})\n+    public static Object pattern3() {\n+        LongVector lv1 = LongVector.broadcast(LongVector.SPECIES_128, 1);\n+        return lv1.lanewise(VectorOperators.ROL, lv1);\n+    }\n+\n+    @Check(test = \"pattern3\")\n+    public static void check_pattern3(Object param) {\n+       Verify.checkEQ(GOLD_PATTERN3, param);\n+    }\n+\n+\n+    @Test\n+    @IR(counts = {IRNode.URSHIFT_VL, IRNode.VECTOR_SIZE_2, \"1\",\n+                  IRNode.LSHIFT_VL, IRNode.VECTOR_SIZE_2, \"1\",\n+                  IRNode.OR_VL, IRNode.VECTOR_SIZE_2, \"1\"},\n+                  applyIfCPUFeatureAnd = {\"avx2\", \"true\", \"avx512f\", \"false\", \"avx512vl\", \"false\"})\n+    public static Object pattern4() {\n+        LongVector lv1 = LongVector.broadcast(LongVector.SPECIES_128, 1);\n+        return lv1.lanewise(VectorOperators.ROL, 15L);\n+    }\n+\n+    @Check(test = \"pattern4\")\n+    public static void check_pattern4(Object param) {\n+       Verify.checkEQ(GOLD_PATTERN4, param);\n+    }\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/vectorapi\/TestVectorRotateScalarCount.java","additions":129,"deletions":0,"binary":false,"changes":129,"status":"added"}]}