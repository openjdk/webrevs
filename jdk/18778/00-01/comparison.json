{"files":[{"patch":"@@ -35,1 +35,0 @@\n-static jrawMonitorID event_lock = nullptr;\n@@ -80,2 +79,0 @@\n-  event_lock = create_raw_monitor(jvmti, \"Events Monitor\");\n-\n@@ -171,5 +168,0 @@\n-  jvmtiError err;\n-  jvmtiEventMode event_mode = (monitor != nullptr) ? JVMTI_ENABLE : JVMTI_DISABLE;\n-\n-  RawMonitorLocker rml(jvmti, jni, event_lock);\n-\n@@ -182,10 +174,0 @@\n-static void wait_for_state(JNIEnv *jni, jthread thread, jint exp_state) {\n-  RawMonitorLocker rml(jvmti, jni, event_lock);\n-  while (true) {\n-    if (get_thread_state(jvmti, jni, thread) & exp_state) {\n-      break;\n-    }\n-    rml.wait(100);\n-  }\n-}\n-\n@@ -194,1 +176,1 @@\n-  wait_for_state(jni, thread, JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER);\n+  wait_for_state(jvmti, jni, thread, JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER);\n@@ -199,1 +181,1 @@\n-  wait_for_state(jni, thread, JVMTI_THREAD_STATE_WAITING_INDEFINITELY);\n+  wait_for_state(jvmti, jni, thread, JVMTI_THREAD_STATE_WAITING_INDEFINITELY);\n","filename":"test\/hotspot\/jtreg\/serviceability\/jvmti\/ObjectMonitorUsage\/libObjectMonitorUsage.cpp","additions":2,"deletions":20,"binary":false,"changes":22,"status":"modified"},{"patch":"@@ -383,0 +383,18 @@\n+\/\/ Wait for target thread to reach the required JVMTI thread state.\n+\/\/ The state jint bitmask is returned by the JVMTI GetThreadState.\n+\/\/ Some examples are:\n+\/\/ - JVMTI_THREAD_STATE_WAITING\n+\/\/ - JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER\n+\/\/ - JVMTI_THREAD_STATE_SLEEPING\n+static void\n+wait_for_state(jvmtiEnv *jvmti, JNIEnv *jni, jthread thread, jint exp_state) {\n+  jrawMonitorID lock = create_raw_monitor(jvmti, \"Waiting Monitor\");\n+  RawMonitorLocker rml(jvmti, jni, lock);\n+  while (true) {\n+    if (get_thread_state(jvmti, jni, thread) & exp_state) {\n+      break;\n+    }\n+    rml.wait(100);\n+  }\n+}\n+\n","filename":"test\/lib\/jdk\/test\/lib\/jvmti\/jvmti_common.hpp","additions":18,"deletions":0,"binary":false,"changes":18,"status":"modified"}]}