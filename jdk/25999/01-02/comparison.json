{"files":[{"patch":"@@ -46,0 +46,2 @@\n+import java.io.BufferedReader;\n+import java.io.IOException;\n@@ -52,1 +54,1 @@\n-import java.util.Arrays;\n+import java.util.StringTokenizer;\n@@ -65,0 +67,1 @@\n+        volatile String testPath = null;\n@@ -96,21 +99,21 @@\n-                    control.acceptingSocket = control.serverSocket.accept();\n-                    InputStream inputStream = control.acceptingSocket.getInputStream();\n-                    InputStreamReader inputStreamReader = new InputStreamReader(inputStream);\n-\n-                    StringBuilder stringBuilder = new StringBuilder();\n-\n-                    \/\/ Read initial request\n-                    byte b;\n-                    while (true) {\n-                        b = (byte) inputStreamReader.read();\n-                        stringBuilder.append((char) b);\n-\n-                        if (stringBuilder.length() >= 4) {\n-                            char[] lastBytes = new char[4];\n-                            stringBuilder.getChars(\n-                                    stringBuilder.length() - 4,\n-                                    stringBuilder.length(), lastBytes, 0);\n-                            if (Arrays.equals(lastBytes, new char[]{'\\r', '\\n', '\\r', '\\n'})) {\n-                                break;\n-                            }\n-                        }\n+                    Socket socket = control.serverSocket.accept();\n+                    String path = getPath(socket);\n+\n+                    OutputStream outputStream;\n+                    if (path.equals(control.testPath)) {\n+                        control.acceptingSocket = socket;\n+                        outputStream = control.acceptingSocket.getOutputStream();\n+\n+                        \/\/ send a wrong response and then shutdown\n+                        outputStream.write(control.response.getBytes());\n+                        outputStream.flush();\n+                        control.acceptingSocket.shutdownOutput();\n+                    } else {\n+                        \/\/ stray request showed up, return 500 and close socket\n+                        outputStream = socket.getOutputStream();\n+                        outputStream.write(\"HTTP\/1.1 500 Internal Server Error\\r\\n\".getBytes());\n+                        outputStream.write(\"Connection: close\\r\\n\".getBytes());\n+                        outputStream.write(\"Content-Length: 0\\r\\n\".getBytes());\n+                        outputStream.write(\"\\r\\n\".getBytes());\n+                        outputStream.flush();\n+                        socket.close();\n@@ -118,6 +121,0 @@\n-                    OutputStream outputStream = control.acceptingSocket.getOutputStream();\n-\n-                    \/\/send a wrong response\n-                    outputStream.write(control.response.getBytes());\n-                    outputStream.flush();\n-                    control.acceptingSocket.shutdownOutput();\n@@ -133,0 +130,16 @@\n+    private static String getPath(Socket socket) throws IOException {\n+        InputStream inputStream = socket.getInputStream();\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(inputStream));\n+\n+        StringBuilder reqBuilder = new StringBuilder();\n+        String line = null;\n+        while (!(line = reader.readLine()).isEmpty()) {\n+            reqBuilder.append(line + \"\\r\\n\");\n+        }\n+        String req = reqBuilder.toString();\n+        StringTokenizer tokenizer = new StringTokenizer(req);\n+        String method = tokenizer.nextToken();\n+        String path = tokenizer.nextToken();\n+        return path;\n+    }\n+\n@@ -149,0 +162,14 @@\n+        control.testPath = \"\/ContinueResponseMessageTest\/\" + expectedCode;\n+\n+        URL url = URIBuilder.newBuilder()\n+                .scheme(\"http\")\n+                .loopback()\n+                .port(control.serverSocket.getLocalPort())\n+                .path(control.testPath)\n+                .toURL();\n+\n+        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n+        connection.setDoOutput(true);\n+        connection.setRequestMethod(\"POST\");\n+        connection.setRequestProperty(\"Connection\", \"Close\");\n+        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n@@ -150,1 +177,0 @@\n-        HttpURLConnection connection = createConnection();\n@@ -170,17 +196,0 @@\n-\n-    \/\/ Creates a connection with all the common settings used in each test\n-    private HttpURLConnection createConnection() throws Exception {\n-        URL url = URIBuilder.newBuilder()\n-                .scheme(\"http\")\n-                .loopback()\n-                .port(control.serverSocket.getLocalPort())\n-                .toURL();\n-\n-        HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n-        connection.setDoOutput(true);\n-        connection.setRequestMethod(\"POST\");\n-        connection.setRequestProperty(\"Connection\", \"Close\");\n-        connection.setRequestProperty(\"Expect\", \"100-Continue\");\n-\n-        return connection;\n-    }\n","filename":"test\/jdk\/java\/net\/HttpURLConnection\/HttpUrlConnectionExpectContinueResponseMessageTest.java","additions":55,"deletions":46,"binary":false,"changes":101,"status":"modified"}]}