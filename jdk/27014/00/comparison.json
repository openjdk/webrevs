{"files":[{"patch":"@@ -3520,0 +3520,4 @@\n+        \/\/ Verify position can fit length wise before checking char by char\n+        if (position + alen > tlen || position < 0) {\n+            return false;\n+        }\n@@ -3524,3 +3528,0 @@\n-        if (position >= tlen) {\n-            return false;\n-        }\n","filename":"src\/java.base\/share\/classes\/java\/text\/DecimalFormat.java","additions":4,"deletions":3,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2024, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,1 +26,1 @@\n- * @bug 8327640 8331485 8333456 8335668\n+ * @bug 8327640 8331485 8333456 8335668 8366400\n@@ -165,0 +165,8 @@\n+    @Test \/\/ Non-localized, only run once\n+    @EnabledIfSystemProperty(named = \"user.language\", matches = \"en\")\n+    public void invalidPositionParseTest() {\n+        \/\/ -1 index should fail properly. Ensure SIOOBE not thrown during\n+        \/\/ affix matching when position may be less than 0\n+        assertNull(assertDoesNotThrow(() -> new DecimalFormat().parse(\"1\", new ParsePosition(-1))));\n+    }\n+\n","filename":"test\/jdk\/java\/text\/Format\/NumberFormat\/LenientParseTest.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"}]}