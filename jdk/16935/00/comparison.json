{"files":[{"patch":"@@ -0,0 +1,117 @@\n+\/*\n+ * Copyright (c) 2023, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+package jdk.jfr.api.consumer;\n+\n+import java.lang.reflect.Modifier;\n+import java.util.List;\n+\n+import jdk.jfr.Event;\n+import jdk.jfr.Recording;\n+import jdk.jfr.consumer.RecordedClass;\n+import jdk.jfr.consumer.RecordedEvent;\n+import jdk.test.lib.jfr.Events;\n+\n+\/**\n+ * @test\n+ * @summary Verifies methods of RecordedClass\n+ * @key jfr\n+ * @requires vm.hasJFR\n+ * @library \/test\/lib\n+ * @run main\/othervm jdk.jfr.api.consumer.TestRecordedClass\n+ *\/\n+public class TestRecordedClass {\n+\n+    static class TestEvent extends Event {\n+        Class<?> typeA;\n+        Class<?> typeB;\n+    }\n+\n+    private static class TypeA {\n+    }\n+\n+    public final static class TypeB {\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        try (Recording recording = new Recording()) {\n+            recording.start();\n+            TestEvent event = new TestEvent();\n+            event.typeA = TypeA.class;\n+            event.typeB = TypeB.class;\n+            event.commit();\n+            recording.stop();\n+\n+            List<RecordedEvent> events = Events.fromRecording(recording);\n+            Events.hasEvents(events);\n+            for (RecordedEvent recordedEvent : events) {\n+                RecordedClass typeA = recordedEvent.getClass(\"typeA\");\n+                RecordedClass typeB = recordedEvent.getClass(\"typeB\");\n+                System.out.println(typeA);\n+                \/\/ Disabled until fixed. See JDK-8321220\n+                \/\/ assertModifiers(typeA, TypeA.class);\n+                \/\/ assertModifiers(typeB, TypeB.class);\n+                assertName(typeA, TypeA.class);\n+                assertName(typeB, TypeB.class);\n+                assertClassLoader(typeA, TypeA.class.getClassLoader());\n+                assertClassLoader(typeB, TypeB.class.getClassLoader());\n+                assertId(typeA);\n+                assertId(typeB);\n+                if (typeA.getId() == typeB.getId()) {\n+                    throw new Exception(\"Same ID for different classes\");\n+                }\n+            }\n+        }\n+    }\n+\n+    private static void assertId(RecordedClass recordedClass) throws Exception {\n+        long id = recordedClass.getId();\n+        if (id < 1 || id >= 1024 * 1024) {\n+            throw new Exception(\"Expected class ID to be above 1 and below 1 M\");\n+        }\n+    }\n+\n+    private static void assertClassLoader(RecordedClass recordedClass, ClassLoader classLoader) throws Exception {\n+        String expected = classLoader.getClass().getName();\n+        String actual = recordedClass.getClassLoader().getType().getName();\n+        if (!expected.equals(actual)) {\n+            throw new Exception(\"Expected class loader to be \" + expected + \", was \" + actual);\n+        }\n+    }\n+\n+    private static void assertName(RecordedClass recordedClass, Class<?> clazz) throws Exception {\n+        String className = clazz.getClass().getName();\n+        if (className.equals(recordedClass.getName())) {\n+            throw new Exception(\"Expected class to be named \" + className);\n+        }\n+    }\n+\n+    public static void assertModifiers(RecordedClass recordedClass, Class<?> clazz) throws Exception {\n+        int modifiers = clazz.getModifiers();\n+        if (modifiers != recordedClass.getModifiers()) {\n+            String expected = Modifier.toString(modifiers);\n+            String actual = Modifier.toString(recordedClass.getModifiers());\n+            throw new Exception(\"Expected modifier to be '\" + expected + \"', was '\" + actual + \"'\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/jdk\/jfr\/api\/consumer\/TestRecordedClass.java","additions":117,"deletions":0,"binary":false,"changes":117,"status":"added"}]}