{"files":[{"patch":"@@ -88,1 +88,0 @@\n-#include \"gc\/shared\/preservedMarks.inline.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1CollectedHeap.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -108,1 +108,0 @@\n-  _gc_par_phases[RestorePreservedMarks] = new WorkerDataArray<double>(\"RestorePreservedMarks\", \"Restore Preserved Marks (ms):\", max_gc_threads);\n@@ -515,1 +514,0 @@\n-    debug_phase(_gc_par_phases[RestorePreservedMarks], 1);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.cpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -90,1 +90,0 @@\n-    RestorePreservedMarks,\n","filename":"src\/hotspot\/share\/gc\/g1\/g1GCPhaseTimes.hpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -231,1 +231,1 @@\n-      forwardee = m.forwardee();\n+      forwardee = obj->forwardee(m);\n","filename":"src\/hotspot\/share\/gc\/g1\/g1OopClosures.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -40,1 +40,0 @@\n-#include \"gc\/shared\/preservedMarks.inline.hpp\"\n@@ -62,1 +61,0 @@\n-                                           PreservedMarks* preserved_marks,\n@@ -93,1 +91,0 @@\n-    _preserved_marks(preserved_marks),\n@@ -219,1 +216,1 @@\n-    obj = m.forwardee();\n+    obj = obj->forwardee(m);\n@@ -598,1 +595,0 @@\n-                               _preserved_marks_set.get(worker_id),\n@@ -658,1 +654,1 @@\n-  oop forward_ptr = old->forward_to_atomic(old, m, memory_order_relaxed);\n+  oop forward_ptr = old->forward_to_self_atomic(m, memory_order_relaxed);\n@@ -671,2 +667,0 @@\n-    _preserved_marks->push_if_necessary(old, m);\n-\n@@ -730,1 +724,0 @@\n-    _preserved_marks_set(true \/* in_c_heap *\/),\n@@ -739,1 +732,0 @@\n-  _preserved_marks_set.init(num_workers);\n@@ -752,1 +744,0 @@\n-  _preserved_marks_set.reclaim();\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.cpp","additions":2,"deletions":11,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -37,1 +37,0 @@\n-#include \"gc\/shared\/preservedMarks.hpp\"\n@@ -51,2 +50,0 @@\n-class PreservedMarks;\n-class PreservedMarksSet;\n@@ -111,1 +108,0 @@\n-  PreservedMarks* _preserved_marks;\n@@ -130,1 +126,0 @@\n-                       PreservedMarks* preserved_marks,\n@@ -251,1 +246,0 @@\n-  PreservedMarksSet _preserved_marks_set;\n@@ -269,1 +263,0 @@\n-  PreservedMarksSet* preserved_marks_set() { return &_preserved_marks_set; }\n","filename":"src\/hotspot\/share\/gc\/g1\/g1ParScanThreadState.hpp","additions":0,"deletions":7,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -56,1 +56,0 @@\n-#include \"gc\/shared\/preservedMarks.hpp\"\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungCollector.cpp","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -45,1 +45,0 @@\n-#include \"gc\/shared\/preservedMarks.inline.hpp\"\n@@ -255,1 +254,1 @@\n-        obj->init_mark();\n+        obj->unset_self_forwarded();\n@@ -480,21 +479,0 @@\n-class G1PostEvacuateCollectionSetCleanupTask2::RestorePreservedMarksTask : public G1AbstractSubTask {\n-  PreservedMarksSet* _preserved_marks;\n-  WorkerTask* _task;\n-\n-public:\n-  RestorePreservedMarksTask(PreservedMarksSet* preserved_marks) :\n-    G1AbstractSubTask(G1GCPhaseTimes::RestorePreservedMarks),\n-    _preserved_marks(preserved_marks),\n-    _task(preserved_marks->create_task()) { }\n-\n-  virtual ~RestorePreservedMarksTask() {\n-    delete _task;\n-  }\n-\n-  double worker_cost() const override {\n-    return _preserved_marks->num();\n-  }\n-\n-  void do_work(uint worker_id) override { _task->work(worker_id); }\n-};\n-\n@@ -982,1 +960,0 @@\n-    add_parallel_task(new RestorePreservedMarksTask(per_thread_states->preserved_marks_set()));\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.cpp","additions":1,"deletions":24,"binary":false,"changes":25,"status":"modified"},{"patch":"@@ -59,1 +59,0 @@\n-\/\/ - Restore Preserved Marks (on evacuation failure)\n@@ -70,1 +69,0 @@\n-  class RestorePreservedMarksTask;\n","filename":"src\/hotspot\/share\/gc\/g1\/g1YoungGCPostEvacuateTasks.hpp","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -322,1 +322,1 @@\n-  if (obj->forward_to_atomic(obj, obj_mark) == nullptr) {\n+  if (obj->forward_to_self_atomic(obj_mark) == nullptr) {\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.cpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -152,1 +152,1 @@\n-    return m.forwardee();\n+    return o->forwardee(m);\n","filename":"src\/hotspot\/share\/gc\/parallel\/psPromotionManager.inline.hpp","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -42,1 +42,0 @@\n-#include \"gc\/shared\/preservedMarks.inline.hpp\"\n@@ -230,1 +229,0 @@\n-    _preserved_marks_set(false \/* in_c_heap *\/),\n@@ -612,2 +610,0 @@\n-  \/\/ The preserved marks should be empty at the start of the GC.\n-  _preserved_marks_set.init(1);\n@@ -684,2 +680,0 @@\n-  \/\/ We should have processed and cleared all the preserved marks.\n-  _preserved_marks_set.reclaim();\n@@ -709,1 +703,3 @@\n-      if (obj->is_forwarded()) {\n+      if (obj->is_self_forwarded()) {\n+        obj->unset_self_forwarded();\n+      } else if (obj->is_forwarded()) {\n@@ -716,6 +712,0 @@\n-\n-  restore_preserved_marks();\n-}\n-\n-void DefNewGeneration::restore_preserved_marks() {\n-  _preserved_marks_set.restore(nullptr);\n@@ -729,1 +719,0 @@\n-  _preserved_marks_set.get()->push_if_necessary(old, old->mark());\n@@ -734,1 +723,1 @@\n-  old->forward_to(old);\n+  old->forward_to_self();\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.cpp","additions":4,"deletions":15,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -35,1 +35,0 @@\n-#include \"gc\/shared\/preservedMarks.hpp\"\n@@ -102,5 +101,0 @@\n-  virtual void restore_preserved_marks();\n-\n-  \/\/ Preserved marks\n-  PreservedMarksSet _preserved_marks_set;\n-\n","filename":"src\/hotspot\/share\/gc\/serial\/defNewGeneration.hpp","additions":0,"deletions":6,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -40,1 +40,1 @@\n-\/\/             hash:25 ------------>| age:4  unused_gap:1  lock:2 (normal object)\n+\/\/             hash:25 ------------>| age:4  self-fwd:1  lock:2 (normal object)\n@@ -44,1 +44,1 @@\n-\/\/  unused:25 hash:31 -->| unused_gap:1  age:4  unused_gap:1  lock:2 (normal object)\n+\/\/  unused:25 hash:31 -->| unused_gap:1  age:4  self-fwd:1  lock:2 (normal object)\n@@ -106,2 +106,2 @@\n-  static const int first_unused_gap_bits          = 1;\n-  static const int max_hash_bits                  = BitsPerWord - age_bits - lock_bits - first_unused_gap_bits;\n+  static const int self_fwd_bits                  = 1;\n+  static const int max_hash_bits                  = BitsPerWord - age_bits - lock_bits - self_fwd_bits;\n@@ -109,1 +109,1 @@\n-  static const int second_unused_gap_bits         = LP64_ONLY(1) NOT_LP64(0);\n+  static const int unused_gap_bits                = LP64_ONLY(1) NOT_LP64(0);\n@@ -112,2 +112,3 @@\n-  static const int age_shift                      = lock_bits + first_unused_gap_bits;\n-  static const int hash_shift                     = age_shift + age_bits + second_unused_gap_bits;\n+  static const int self_fwd_shift                 = lock_shift + lock_bits;\n+  static const int age_shift                      = self_fwd_shift + self_fwd_bits;\n+  static const int hash_shift                     = age_shift + age_bits + unused_gap_bits;\n@@ -117,0 +118,2 @@\n+  static const uintptr_t self_fwd_mask            = right_n_bits(self_fwd_bits);\n+  static const uintptr_t self_fwd_mask_in_place   = self_fwd_mask << self_fwd_shift;\n@@ -146,2 +149,3 @@\n-  bool is_forwarded()   const {\n-    return (mask_bits(value(), lock_mask_in_place) == marked_value);\n+  bool is_forwarded() const {\n+    \/\/ Returns true for normal forwarded (0b011) and self-forwarded (0b1xx).\n+    return mask_bits(value(), lock_mask_in_place | self_fwd_mask_in_place) >= static_cast<intptr_t>(marked_value);\n@@ -149,0 +153,1 @@\n+\n@@ -276,0 +281,15 @@\n+  inline bool is_self_forwarded() const {\n+    NOT_LP64(assert(LockingMode != LM_LEGACY, \"incorrect with LM_LEGACY on 32 bit\");)\n+    return mask_bits(value(), self_fwd_mask_in_place) != 0;\n+  }\n+\n+  inline markWord set_self_forwarded() const {\n+    NOT_LP64(assert(LockingMode != LM_LEGACY, \"incorrect with LM_LEGACY on 32 bit\");)\n+    return markWord(value() | self_fwd_mask_in_place);\n+  }\n+\n+  inline markWord unset_self_forwarded() const {\n+    NOT_LP64(assert(LockingMode != LM_LEGACY, \"incorrect with LM_LEGACY on 32 bit\");)\n+    return markWord(value() & ~self_fwd_mask_in_place);\n+  }\n+\n","filename":"src\/hotspot\/share\/oops\/markWord.hpp","additions":29,"deletions":9,"binary":false,"changes":38,"status":"modified"},{"patch":"@@ -65,0 +65,2 @@\n+  inline oop cas_set_forwardee(markWord new_mark, markWord old_mark, atomic_memory_order order);\n+\n@@ -261,0 +263,1 @@\n+  inline bool is_self_forwarded() const;\n@@ -263,0 +266,1 @@\n+  inline void forward_to_self();\n@@ -269,0 +273,1 @@\n+  inline oop forward_to_self_atomic(markWord compare, atomic_memory_order order = memory_order_conservative);\n@@ -271,0 +276,3 @@\n+  inline oop forwardee(markWord header) const;\n+\n+  inline void unset_self_forwarded();\n","filename":"src\/hotspot\/share\/oops\/oop.hpp","additions":8,"deletions":0,"binary":false,"changes":8,"status":"modified"},{"patch":"@@ -270,0 +270,4 @@\n+bool oopDesc::is_self_forwarded() const {\n+  return mark().is_self_forwarded();\n+}\n+\n@@ -277,4 +281,6 @@\n-oop oopDesc::forward_to_atomic(oop p, markWord compare, atomic_memory_order order) {\n-  markWord m = markWord::encode_pointer_as_mark(p);\n-  assert(m.decode_pointer() == p, \"encoding must be reversible\");\n-  markWord old_mark = cas_set_mark(m, compare, order);\n+void oopDesc::forward_to_self() {\n+  set_mark(mark().set_self_forwarded());\n+}\n+\n+oop oopDesc::cas_set_forwardee(markWord new_mark, markWord compare, atomic_memory_order order) {\n+  markWord old_mark = cas_set_mark(new_mark, compare, order);\n@@ -284,1 +290,23 @@\n-    return cast_to_oop(old_mark.decode_pointer());\n+    assert(old_mark.is_forwarded(), \"must be forwarded here\");\n+    return forwardee(old_mark);\n+  }\n+}\n+\n+oop oopDesc::forward_to_atomic(oop p, markWord compare, atomic_memory_order order) {\n+  markWord m = markWord::encode_pointer_as_mark(p);\n+  assert(forwardee(m) == p, \"encoding must be reversible\");\n+  return cas_set_forwardee(m, compare, order);\n+}\n+\n+oop oopDesc::forward_to_self_atomic(markWord old_mark, atomic_memory_order order) {\n+  markWord new_mark = old_mark.set_self_forwarded();\n+  assert(forwardee(new_mark) == cast_to_oop(this), \"encoding must be reversible\");\n+  return cas_set_forwardee(new_mark, old_mark, order);\n+}\n+\n+oop oopDesc::forwardee(markWord mark) const {\n+  assert(mark.is_forwarded(), \"only decode when actually forwarded\");\n+  if (mark.is_self_forwarded()) {\n+    return cast_to_oop(this);\n+  } else {\n+    return mark.forwardee();\n@@ -292,1 +320,5 @@\n-  return mark().forwardee();\n+  return forwardee(mark());\n+}\n+\n+void oopDesc::unset_self_forwarded() {\n+  set_mark(mark().unset_self_forwarded());\n","filename":"src\/hotspot\/share\/oops\/oop.inline.hpp","additions":38,"deletions":6,"binary":false,"changes":44,"status":"modified"},{"patch":"@@ -32,1 +32,5 @@\n-  oopDesc _oop;\n+  \/\/ Align at least to 8 bytes, otherwise the lowest address bit\n+  \/\/ could be interpreted as 'self-forwarded' when encoded as\n+  \/\/ forwardee in the mark-word. This is required on 32 bit builds,\n+  \/\/ where the oop could be 4-byte-aligned.\n+  alignas(BytesPerLong) oopDesc _oop;\n","filename":"test\/hotspot\/gtest\/gc\/shared\/test_preservedMarks.cpp","additions":5,"deletions":1,"binary":false,"changes":6,"status":"modified"},{"patch":"@@ -262,1 +262,0 @@\n-        new LogMessageWithLevel(\"Restore Preserved Marks \\\\(ms\\\\):\", Level.DEBUG),\n","filename":"test\/hotspot\/jtreg\/gc\/g1\/TestGCLogMessages.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"}]}