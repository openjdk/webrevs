{"files":[{"patch":"@@ -176,1 +176,0 @@\n-vmTestbase\/gc\/memory\/Nio\/Nio.java 8340728 generic-all\n","filename":"test\/hotspot\/jtreg\/ProblemList.txt","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2013, 2020, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2013, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -58,1 +58,7 @@\n-    static final int MAX_SIZE = (int)VM.maxDirectMemory();\n+    static final int MAX_VM_SIZE = (int)VM.maxDirectMemory();\n+\n+    \/\/ Maximum direct memory allowed to be allocated before this test is run\n+    static final int MAX_ALLOC_SIZE = 8*1024;\n+\n+    \/\/ Direct memory actually allocated by this test\n+    static int max_size = 0;\n@@ -73,1 +79,1 @@\n-        \/\/ Step1: allocate the all available direct memory\n+        \/\/ Step1: allocate all the available direct memory\n@@ -75,1 +81,2 @@\n-        System.out.println(\"Allocating all the direct memory: \" + MAX_SIZE);\n+        System.out.printf(\"Allocating all available direct memory: [%d, %d]%n\",\n+            MAX_VM_SIZE - MAX_ALLOC_SIZE, MAX_VM_SIZE);\n@@ -77,5 +84,16 @@\n-        try {\n-            bb = ByteBuffer.allocateDirect((int)MAX_SIZE);\n-            System.out.println(\"... success\");\n-        } catch (OutOfMemoryError oom) {\n-            throw new Fault(\"Unexpected OOME during the first allocation \" + oom);\n+        max_size = MAX_VM_SIZE;\n+        while (true) {\n+            try {\n+                System.out.printf(\"Trying to allocate %d bytes,,,%n\", max_size);\n+                bb = ByteBuffer.allocateDirect((int)max_size);\n+                System.out.println(\"... success\");\n+            } catch (OutOfMemoryError oom) {\n+                max_size -= 1024;\n+                if (max_size < MAX_VM_SIZE - MAX_ALLOC_SIZE)\n+                    throw new Fault(\"Insufficient direct memory is available\");\n+                continue;\n+            }\n+            System.out.println(\"max_size: \" + max_size);\n+            System.out.println(\"MAX_VM_SIZE - max_size: \" +\n+                (MAX_VM_SIZE - max_size));\n+            break;\n@@ -83,0 +101,1 @@\n+\n@@ -103,4 +122,4 @@\n-        bb.putDouble(MAX_SIZE\/2, d0);\n-        bb.putFloat(MAX_SIZE - 17, f0);\n-        double d1 = bb.getDouble(MAX_SIZE\/2);\n-        float f1 = bb.getFloat(MAX_SIZE - 17);\n+        bb.putDouble(max_size\/2, d0);\n+        bb.putFloat(max_size - 17, f0);\n+        double d1 = bb.getDouble(max_size\/2);\n+        float f1 = bb.getFloat(max_size - 17);\n@@ -165,1 +184,1 @@\n-        if (h_after - h_before > MAX_SIZE * 0.75) {\n+        if (h_after - h_before > max_size * 0.75) {\n@@ -173,1 +192,1 @@\n-        if (nh_after - nh_before > MAX_SIZE * 0.75) {\n+        if (nh_after - nh_before > max_size * 0.75) {\n","filename":"test\/hotspot\/jtreg\/vmTestbase\/gc\/memory\/Nio\/Nio.java","additions":34,"deletions":15,"binary":false,"changes":49,"status":"modified"}]}