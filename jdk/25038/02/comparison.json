{"files":[{"patch":"@@ -435,1 +435,1 @@\n-        int newLength = (s1.length() + s2.length()) << coder;\n+        int newLength = checkOverflow(s1.length() + s2.length()) << coder;\n","filename":"src\/java.base\/share\/classes\/java\/lang\/StringConcatHelper.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,74 @@\n+\/*\n+ * Copyright (c) 2025, Oracle and\/or its affiliates. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8356152\n+ * @summary Check that huge concatenations throw OutOfMemoryError\n+ * @requires os.maxMemory > 6G\n+ * @run junit\/othervm -Xmx6G -XX:+CompactStrings -Dcompact=true HugeConcatTest\n+ * @run junit\/othervm -Xmx6G -XX:-CompactStrings -Dcompact=false HugeConcatTest\n+ *\/\n+\n+import org.junit.jupiter.api.BeforeAll;\n+import org.junit.jupiter.api.Test;\n+\n+import static org.junit.Assert.assertThrows;\n+\n+public class HugeConcatTest {\n+\n+    private static final int HUGE_LENGTH_UTF16 = Integer.MAX_VALUE \/ 2 - 2;\n+\n+    private static String hugeLatin1;\n+    private static final String hugeUTF16 = \"\\u20AC\".repeat(HUGE_LENGTH_UTF16);\n+\n+    @BeforeAll\n+    public static void initHugeLatin1() {\n+        String compact = System.getProperty(\"compact\", \"true\");\n+        int hugeLatin1Length = Boolean.parseBoolean(compact)\n+                ? Integer.MAX_VALUE - 2\n+                : HUGE_LENGTH_UTF16;\n+        hugeLatin1 = \"a\".repeat(hugeLatin1Length);\n+    }\n+\n+    @Test\n+    public void testConcat_Latin1_Latin1() {\n+        assertThrows(OutOfMemoryError.class, () -> hugeLatin1.concat(hugeLatin1));\n+    }\n+\n+    @Test\n+    public void testConcat_Latin1_UTF16() {\n+        assertThrows(OutOfMemoryError.class, () -> hugeLatin1.concat(hugeUTF16));\n+    }\n+\n+    @Test\n+    public void testConcat_UTF16_Latin1() {\n+        assertThrows(OutOfMemoryError.class, () -> hugeUTF16.concat(hugeLatin1));\n+    }\n+\n+    @Test\n+    public void testConcat_UTF16_UTF16() {\n+        assertThrows(OutOfMemoryError.class, () -> hugeUTF16.concat(hugeUTF16));\n+    }\n+\n+}\n","filename":"test\/jdk\/java\/lang\/String\/concat\/HugeConcatTest.java","additions":74,"deletions":0,"binary":false,"changes":74,"status":"added"}]}