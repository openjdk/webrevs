{"files":[{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,0 +32,1 @@\n+import java.nio.file.Files;\n@@ -32,1 +34,0 @@\n-import java.nio.file.Paths;\n@@ -64,4 +65,5 @@\n-        try {\n-            return CgroupUtil.readStringValue(controller, param);\n-        }\n-        catch (IOException e) {\n+        Path filePath = Path.of(controller.path(), param);\n+        try (Stream<String> lines = Files.lines(filePath)) {\n+            Optional<String> firstLine = lines.findFirst();\n+            return firstLine.orElse(null);\n+        } catch (UncheckedIOException | IOException e) {\n@@ -70,1 +72,0 @@\n-\n@@ -95,2 +96,2 @@\n-            Path filePath = Paths.get(controller.path(), param);\n-            List<String> lines = CgroupUtil.readAllLinesPrivileged(filePath);\n+            Path filePath = Path.of(controller.path(), param);\n+            List<String> lines = Files.readAllLines(filePath);\n@@ -164,1 +165,1 @@\n-        try (Stream<String> lines = CgroupUtil.readFilePrivileged(Paths.get(controller.path(), param))) {\n+        try (Stream<String> lines = Files.lines(Path.of(controller.path(), param))) {\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupSubsystemController.java","additions":10,"deletions":9,"binary":false,"changes":19,"status":"modified"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -32,0 +33,1 @@\n+import java.nio.file.Files;\n@@ -33,1 +35,0 @@\n-import java.nio.file.Paths;\n@@ -143,1 +144,1 @@\n-        List<String> lines = CgroupUtil.readAllLinesPrivileged(Paths.get(cgroups));\n+        List<String> lines = Files.readAllLines(Path.of(cgroups));\n@@ -183,1 +184,1 @@\n-        lines = CgroupUtil.readAllLinesPrivileged(Paths.get(mountInfo));\n+        lines = Files.readAllLines(Path.of(mountInfo));\n@@ -199,2 +200,1 @@\n-        try (Stream<String> selfCgroupLines =\n-             CgroupUtil.readFilePrivileged(Paths.get(selfCgroup))) {\n+        try (Stream<String> selfCgroupLines = Files.lines(Path.of(selfCgroup))) {\n@@ -314,1 +314,1 @@\n-                Path p = Paths.get(mountPath);\n+                Path p = Path.of(mountPath);\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupSubsystemFactory.java","additions":6,"deletions":6,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -1,92 +0,0 @@\n-\/*\n- * Copyright (c) 2020, Red Hat Inc.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package jdk.internal.platform;\n-\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.UncheckedIOException;\n-import java.nio.file.Files;\n-import java.nio.file.Path;\n-import java.nio.file.Paths;\n-import java.security.AccessController;\n-import java.security.PrivilegedActionException;\n-import java.security.PrivilegedExceptionAction;\n-import java.util.List;\n-import java.util.stream.Stream;\n-\n-public final class CgroupUtil {\n-\n-    @SuppressWarnings(\"removal\")\n-    public static Stream<String> readFilePrivileged(Path path) throws IOException {\n-        try {\n-            PrivilegedExceptionAction<Stream<String>> pea = () -> Files.lines(path);\n-            return AccessController.doPrivileged(pea);\n-        } catch (PrivilegedActionException e) {\n-            unwrapIOExceptionAndRethrow(e);\n-            throw new InternalError(e.getCause());\n-        } catch (UncheckedIOException e) {\n-            throw e.getCause();\n-        }\n-    }\n-\n-    static void unwrapIOExceptionAndRethrow(PrivilegedActionException pae) throws IOException {\n-        Throwable x = pae.getCause();\n-        if (x instanceof IOException)\n-            throw (IOException) x;\n-        if (x instanceof RuntimeException)\n-            throw (RuntimeException) x;\n-        if (x instanceof Error)\n-            throw (Error) x;\n-    }\n-\n-    static String readStringValue(CgroupSubsystemController controller, String param) throws IOException {\n-        PrivilegedExceptionAction<BufferedReader> pea = () ->\n-                Files.newBufferedReader(Paths.get(controller.path(), param));\n-        try (@SuppressWarnings(\"removal\") BufferedReader bufferedReader =\n-                     AccessController.doPrivileged(pea)) {\n-            String line = bufferedReader.readLine();\n-            return line;\n-        } catch (PrivilegedActionException e) {\n-            unwrapIOExceptionAndRethrow(e);\n-            throw new InternalError(e.getCause());\n-        } catch (UncheckedIOException e) {\n-            throw e.getCause();\n-        }\n-    }\n-\n-    @SuppressWarnings(\"removal\")\n-    public static List<String> readAllLinesPrivileged(Path path) throws IOException {\n-        try {\n-            PrivilegedExceptionAction<List<String>> pea = () -> Files.readAllLines(path);\n-            return AccessController.doPrivileged(pea);\n-        } catch (PrivilegedActionException e) {\n-            unwrapIOExceptionAndRethrow(e);\n-            throw new InternalError(e.getCause());\n-        } catch (UncheckedIOException e) {\n-            throw e.getCause();\n-        }\n-    }\n-}\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/CgroupUtil.java","additions":0,"deletions":92,"binary":false,"changes":92,"status":"deleted"},{"patch":"@@ -3,0 +3,1 @@\n+ * Copyright (c) 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -30,1 +31,2 @@\n-import java.nio.file.Paths;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n@@ -34,0 +36,1 @@\n+import java.util.stream.Stream;\n@@ -38,1 +41,0 @@\n-import jdk.internal.platform.CgroupUtil;\n@@ -331,4 +333,3 @@\n-        try {\n-            return CgroupUtil.readFilePrivileged(Paths.get(unified.path(), \"io.stat\"))\n-                                .map(mapFunc)\n-                                .collect(Collectors.summingLong(e -> e));\n+        try (Stream<String> lines = Files.lines(Path.of(unified.path(), \"io.stat\"))) {\n+            return lines.map(mapFunc)\n+                        .collect(Collectors.summingLong(e -> e));\n","filename":"src\/java.base\/linux\/classes\/jdk\/internal\/platform\/cgroupv2\/CgroupV2Subsystem.java","additions":7,"deletions":6,"binary":false,"changes":13,"status":"modified"},{"patch":"@@ -286,1 +286,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/java\/io\/FilePermission.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -552,1 +552,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -790,1 +789,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/String.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1381,1 +1381,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -1485,1 +1484,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/System.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -581,1 +581,0 @@\n-        @SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/invoke\/ClassSpecializer.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -106,1 +106,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/java\/lang\/reflect\/ProxyGenerator.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -1391,1 +1391,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/java\/net\/URLConnection.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -293,1 +293,0 @@\n-    \/\/ This is called from within an doPrivileged block.\n","filename":"src\/java.base\/share\/classes\/javax\/crypto\/JceSecurity.java.template","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -33,2 +33,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -326,1 +324,0 @@\n-        @SuppressWarnings(\"removal\")\n@@ -332,6 +329,2 @@\n-            return AccessController.doPrivileged(new PrivilegedAction<>() {\n-                public Boolean run() {\n-                    File file = new File(name);\n-                    return file.exists();\n-                }\n-            });\n+            File file = new File(name);\n+            return file.exists();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/loader\/NativeLibraries.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -345,2 +345,0 @@\n-            \/\/ This is just an optimization to avoid the cost of calling\n-            \/\/ doPrivileged every time.\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/logger\/LazyLoggers.java","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -34,1 +34,0 @@\n-@SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/misc\/InnocuousThread.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2002, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2002, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -28,2 +28,0 @@\n-import java.security.Permission;\n-import java.security.PrivilegedAction;\n@@ -52,1 +50,0 @@\n- * @see      jdk.internal.perf.Perf.GetPerfAction\n@@ -61,40 +58,0 @@\n-    \/**\n-     * The GetPerfAction class is a convenience class for acquiring access\n-     * to the singleton Perf instance using the\n-     * <code>AccessController.doPrivileged()<\/code> method.\n-     * <p>\n-     * An instance of this class can be used as the argument to\n-     * <code>AccessController.doPrivileged(PrivilegedAction)<\/code>.\n-     * <p> Here is a suggested idiom for use of this class:\n-     *\n-     * <blockquote><pre>{@code\n-     * class MyTrustedClass {\n-     *   private static final Perf perf =\n-     *       AccessController.doPrivileged(new Perf.GetPerfAction<Perf>());\n-     *   ...\n-     * }\n-     * }<\/pre><\/blockquote>\n-     * <p>\n-     * In the presence of a security manager, the <code>MyTrustedClass<\/code>\n-     * class in the above example will need to be granted the\n-     * <em>\"sun.misc.Perf.getPerf\"<\/em> <code>RuntimePermission<\/code>\n-     * permission in order to successfully acquire the singleton Perf instance.\n-     * <p>\n-     * Please note that the <em>\"sun.misc.Perf.getPerf\"<\/em> permission\n-     * is not a JDK specified permission.\n-     *\n-     * @see  java.security.AccessController#doPrivileged(PrivilegedAction)\n-     * @see  java.lang.RuntimePermission\n-     *\/\n-    public static class GetPerfAction implements PrivilegedAction<Perf>\n-    {\n-        \/**\n-         * Run the <code>Perf.getPerf()<\/code> method in a privileged context.\n-         *\n-         * @see #getPerf\n-         *\/\n-        public Perf run() {\n-            return getPerf();\n-        }\n-    }\n-\n@@ -109,5 +66,0 @@\n-     * If a security manager is installed, its <code>checkPermission<\/code>\n-     * method is called with a <code>RuntimePermission<\/code> with a target\n-     * of <em>\"sun.misc.Perf.getPerf\"<\/em>. A security exception will result\n-     * if the caller has not been granted this permission.\n-     * <p>\n@@ -122,3 +74,0 @@\n-     * <p>\n-     * Please note that the <em>\"sun.misc.Perf.getPerf\"<\/em> permission\n-     * is not a JDK specified permission.\n@@ -127,4 +76,0 @@\n-     * @throws SecurityException  if a security manager exists and its\n-     *         <code>checkPermission<\/code> method doesn't allow access\n-     *         to the <em>\"jdk.internal.perf.Perf.getPerf\"\"<\/em> target.\n-     * @see  java.lang.RuntimePermission\n@@ -135,7 +80,0 @@\n-        @SuppressWarnings(\"removal\")\n-        SecurityManager security = System.getSecurityManager();\n-        if (security != null) {\n-            Permission perm = new RuntimePermission(\"jdk.internal.perf.Perf.getPerf\");\n-            security.checkPermission(perm);\n-        }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/perf\/Perf.java","additions":1,"deletions":63,"binary":false,"changes":64,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2009, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2009, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.security.AccessController;\n@@ -51,3 +50,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final Perf perf =\n-        AccessController.doPrivileged(new Perf.GetPerfAction());\n+    private static final Perf perf = Perf.getPerf();\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/perf\/PerfCounter.java","additions":2,"deletions":5,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2021, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -139,1 +137,0 @@\n-    @SuppressWarnings(\"removal\")\n@@ -146,8 +143,5 @@\n-            AccessController.doPrivileged(new PrivilegedAction<>() {\n-                    public Void run() {\n-                        if (System.err != null)\n-                            new Error(\"Cleaner terminated abnormally\", x)\n-                                .printStackTrace();\n-                        System.exit(1);\n-                        return null;\n-                    }});\n+            if (System.err != null) {\n+                new Error(\"Cleaner terminated abnormally\", x)\n+                        .printStackTrace();\n+            }\n+            System.exit(1);\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/ref\/Cleaner.java","additions":6,"deletions":12,"binary":false,"changes":18,"status":"modified"},{"patch":"@@ -44,1 +44,0 @@\n-import java.security.PrivilegedAction;\n@@ -78,16 +77,0 @@\n-    \/**\n-     * A convenience class for acquiring the capability to instantiate\n-     * reflective objects.  Use this instead of a raw call to {@link\n-     * #getReflectionFactory} in order to avoid being limited by the\n-     * permissions of your callers.\n-     *\n-     * <p>An instance of this class can be used as the argument of\n-     * <code>AccessController.doPrivileged<\/code>.\n-     *\/\n-    public static final class GetReflectionFactoryAction\n-        implements PrivilegedAction<ReflectionFactory> {\n-        public ReflectionFactory run() {\n-            return getReflectionFactory();\n-        }\n-    }\n-\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/reflect\/ReflectionFactory.java","additions":0,"deletions":17,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -157,1 +157,0 @@\n-    @SuppressWarnings(\"removal\")\n","filename":"src\/java.base\/share\/classes\/sun\/net\/www\/http\/KeepAliveStream.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2003, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2003, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -38,2 +38,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -206,8 +204,1 @@\n-        @SuppressWarnings(\"removal\")\n-        String name =  AccessController.doPrivileged(\n-            new PrivilegedAction<>() {\n-                public String run() {\n-                    return System.getProperty(\"sun.management.compiler\");\n-                }\n-            });\n-        return name;\n+        return System.getProperty(\"sun.management.compiler\");\n@@ -258,2 +249,1 @@\n-        @SuppressWarnings(\"removal\")\n-        Perf perf =  AccessController.doPrivileged(new Perf.GetPerfAction());\n+        Perf perf = Perf.getPerf();\n","filename":"src\/java.management\/share\/classes\/sun\/management\/VMManagementImpl.java","additions":3,"deletions":13,"binary":false,"changes":16,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2020, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2020, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,2 +29,0 @@\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n@@ -34,3 +32,2 @@\n-    @SuppressWarnings(\"removal\")\n-    static final int VECTOR_ACCESS_OOB_CHECK = AccessController.doPrivileged((PrivilegedAction<Integer>) () ->\n-            Integer.getInteger(\"jdk.incubator.vector.VECTOR_ACCESS_OOB_CHECK\", 2));\n+    static final int VECTOR_ACCESS_OOB_CHECK =\n+            Integer.getInteger(\"jdk.incubator.vector.VECTOR_ACCESS_OOB_CHECK\", 2);\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/VectorIntrinsics.java","additions":3,"deletions":6,"binary":false,"changes":9,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2004, 2022, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2004, 2024, Oracle and\/or its affiliates. All rights reserved.\n@@ -31,1 +31,0 @@\n-import java.util.*;\n@@ -34,3 +33,0 @@\n-import java.nio.channels.FileChannel;\n-import java.lang.reflect.Constructor;\n-import java.security.AccessController;\n@@ -48,2 +44,0 @@\n-\/\/ Suppreess unchecked conversion warning at line 34.\n-\/\/@SuppressWarnings(\"unchecked\")\n@@ -51,2 +45,1 @@\n-    @SuppressWarnings(\"removal\")\n-    private static final Perf perf = AccessController.doPrivileged(new Perf.GetPerfAction());\n+    private static final Perf perf = Perf.getPerf();\n","filename":"src\/jdk.internal.jvmstat\/share\/classes\/sun\/jvmstat\/perfdata\/monitor\/protocol\/local\/PerfDataBuffer.java","additions":2,"deletions":9,"binary":false,"changes":11,"status":"modified"}]}