{"files":[{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Red Hat, Inc.\n+ * Copyright (c) 2024, 2025, Red Hat, Inc.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JRTArchive.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/Jlink.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -202,1 +202,0 @@\n-                Path file = Paths.get(arg.substring(1));\n@@ -208,0 +207,9 @@\n+                \/\/\n+                \/\/ Allow for JAVA_HOME relative paths for the file, by replacing\n+                \/\/ the ${java.home} token in the file name\n+                String fileName = arg.substring(1);\n+                if (fileName.startsWith(\"${java.home}\")) {\n+                    String javaHome = System.getProperty(\"java.home\");\n+                    fileName = javaHome + fileName.substring(12 \/* ${java.home}.length() *\/);\n+                }\n+                Path file = Paths.get(fileName);\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/JlinkTask.java","additions":10,"deletions":2,"binary":false,"changes":12,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Red Hat, Inc.\n+ * Copyright (c) 2024, 2025, Red Hat, Inc.\n","filename":"src\/jdk.jlink\/share\/classes\/jdk\/tools\/jlink\/internal\/LinkableRuntimeImage.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2015, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2015, 2025, Oracle and\/or its affiliates. All rights reserved.\n","filename":"test\/jdk\/tools\/jlink\/IntegrationTest.java","additions":1,"deletions":1,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -0,0 +1,111 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.security.MessageDigest;\n+import java.util.ArrayList;\n+import java.util.HexFormat;\n+import java.util.List;\n+\n+import jdk.test.lib.process.OutputAnalyzer;\n+import jtreg.SkippedException;\n+import tests.Helper;\n+\n+\/*\n+ * Base class for sha overrides tests\n+ *\/\n+public abstract class ModifiedFilesWithShaOverrideBase extends ModifiedFilesTest {\n+\n+    protected static final String SHA_OVERRIDE_FLAG = \"--sha-overrides\";\n+\n+    @Override\n+    protected Path modifyFileInImage(Path jmodLessImg) {\n+        try {\n+            Path libJVM = jmodLessImg.resolve(\"lib\").resolve(\"server\").resolve(System.mapLibraryName(\"jvm\"));\n+            String shaBefore = buildSHA512(libJVM);\n+            List<String> objcopy = new ArrayList<>();\n+            objcopy.add(\"objcopy\");\n+            \/\/ The OpenJDK build doesn't strip all symbols by default. In order\n+            \/\/ to get a different libjvm.so file, we strip everything. The\n+            \/\/ expectation is for the sha to be different before and after the\n+            \/\/ stripping of the file.\n+            objcopy.add(\"--strip-all\");\n+            objcopy.add(libJVM.toString());\n+            ProcessBuilder builder = new ProcessBuilder(objcopy);\n+            Process p = builder.start();\n+            int returnVal = p.waitFor();\n+            if (returnVal != 0) {\n+                throw new SkippedException(\"Stripping of libjvm failed. Is objcopy installed?\");\n+            }\n+            String shaAfter = buildSHA512(libJVM);\n+            if (shaBefore.equals(shaAfter)) {\n+                throw new SkippedException(\"Binary file would be the same before after - test skipped\");\n+            }\n+            return libJVM;\n+        } catch (IOException | InterruptedException e) {\n+            throw new SkippedException(\"Stripping of libjvm failed: \" + e.getMessage());\n+        }\n+    }\n+\n+    @Override\n+    void testAndAssert(Path modifiedFile, Helper helper, Path initialImage) throws Exception {\n+        String extraJlinkOption = getShaOverrideOption(modifiedFile, initialImage);\n+        CapturingHandler handler = new CapturingHandler();\n+        jlinkUsingImage(new JlinkSpecBuilder()\n+                                .helper(helper)\n+                                .imagePath(initialImage)\n+                                .name(getTargetName())\n+                                .addModule(\"java.base\")\n+                                .validatingModule(\"java.base\")\n+                                .extraJlinkOpt(extraJlinkOption) \/\/ allow for the modified sha\n+                                .build(), handler);\n+        OutputAnalyzer out = handler.analyzer();\n+        \/\/ verify we don't get a warning message for the modified file\n+        out.stdoutShouldNotMatch(\".* has been modified\");\n+        out.stdoutShouldNotContain(\"java.lang.IllegalArgumentException\");\n+        out.stdoutShouldNotContain(\"IOException\");\n+    }\n+\n+    public abstract String getTargetName();\n+    public abstract String getShaOverrideOption(Path modifiedFile, Path initialImage);\n+\n+    protected String buildSHA512(Path modifiedFile) {\n+        try {\n+            MessageDigest digest = MessageDigest.getInstance(\"SHA-512\");\n+            try (InputStream is = Files.newInputStream(modifiedFile)) {\n+                byte[] buf = new byte[1024];\n+                int readBytes = -1;\n+                while ((readBytes = is.read(buf)) != -1) {\n+                    digest.update(buf, 0, readBytes);\n+                }\n+            }\n+            byte[] actual = digest.digest();\n+            return HexFormat.of().formatHex(actual);\n+        } catch (Exception e) {\n+            throw new AssertionError(\"SHA-512 sum generation failed\");\n+        }\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/ModifiedFilesWithShaOverrideBase.java","additions":111,"deletions":0,"binary":false,"changes":111,"status":"added"},{"patch":"@@ -0,0 +1,78 @@\n+\/*\n+ * Copyright (c) 2025, Red Hat, Inc.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+import java.io.File;\n+import java.io.FileWriter;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.nio.file.Path;\n+\n+\/*\n+ * @test\n+ * @summary Verify no warnings are being produced on a modified file which\n+ *          gets the SHA override from a file\n+ * @requires (vm.compMode != \"Xcomp\" & os.maxMemory >= 2g & os.family == \"linux\")\n+ * @library ..\/..\/lib \/test\/lib\n+ * @enablePreview\n+ * @modules java.base\/jdk.internal.jimage\n+ *          jdk.jlink\/jdk.tools.jlink.internal\n+ *          jdk.jlink\/jdk.tools.jlink.plugin\n+ *          jdk.jlink\/jdk.tools.jimage\n+ * @build tests.* jdk.test.lib.process.OutputAnalyzer\n+ *        jdk.test.lib.process.ProcessTools\n+ * @run main\/othervm -Xmx1g ModifiedFilesWithShaOverrideFileTest\n+ *\/\n+public class ModifiedFilesWithShaOverrideFileTest extends ModifiedFilesWithShaOverrideBase {\n+\n+    public static void main(String[] args) throws Exception {\n+        ModifiedFilesWithShaOverrideFileTest test = new ModifiedFilesWithShaOverrideFileTest();\n+        test.run();\n+    }\n+\n+    @Override\n+    String initialImageName() {\n+        return \"java-base-jlink-with-sha-override-file\";\n+    }\n+\n+    @Override\n+    public String getTargetName() {\n+        return \"java-base-jlink-with-sha-override-file-target\";\n+    }\n+\n+    @Override\n+    public String getShaOverrideOption(Path modifiedFile, Path initialImage) {\n+        String strippedSha = buildSHA512(modifiedFile);\n+        Path relativePath = initialImage.relativize(modifiedFile);\n+        \/\/ Modified file is libjvm.so, which is in java.base\n+        String overrideVal = String.format(\"%s|%s|%s\", \"java.base\", relativePath.toString(), strippedSha);\n+        \/\/ Write a file in JAVA_HOME of the linkable runtime with the sha\n+        \/\/ override.\n+        File overrideFile = initialImage.resolve(\"test_sha_override.txt\").toFile();\n+        try (PrintWriter pw = new PrintWriter(new FileWriter(overrideFile))) {\n+            pw.println(overrideVal);\n+        } catch (IOException e) {\n+            throw new AssertionError(\"Test failed unexpectedly: \", e);\n+        }\n+        return SHA_OVERRIDE_FLAG + \"=@${java.home}\/test_sha_override.txt\";\n+    }\n+}\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/ModifiedFilesWithShaOverrideFileTest.java","additions":78,"deletions":0,"binary":false,"changes":78,"status":"added"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2024, Red Hat, Inc.\n+ * Copyright (c) 2025, Red Hat, Inc.\n@@ -24,3 +24,0 @@\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.nio.file.Files;\n@@ -28,8 +25,0 @@\n-import java.security.MessageDigest;\n-import java.util.ArrayList;\n-import java.util.HexFormat;\n-import java.util.List;\n-\n-import jdk.test.lib.process.OutputAnalyzer;\n-import jtreg.SkippedException;\n-import tests.Helper;\n@@ -40,1 +29,1 @@\n- *          gets the SHA override from CLI\/file\n+ *          gets the SHA override from command line\n@@ -52,3 +41,1 @@\n-public class ModifiedFilesWithShaOverrideTest extends ModifiedFilesTest {\n-\n-    private static final String SHA_OVERRIDE_FLAG = \"--sha-overrides\";\n+public class ModifiedFilesWithShaOverrideTest extends ModifiedFilesWithShaOverrideBase {\n@@ -67,26 +54,2 @@\n-    protected Path modifyFileInImage(Path jmodLessImg) {\n-        try {\n-            Path libJVM = jmodLessImg.resolve(\"lib\").resolve(\"server\").resolve(System.mapLibraryName(\"jvm\"));\n-            String shaBefore = buildSHA512(libJVM);\n-            List<String> objcopy = new ArrayList<>();\n-            objcopy.add(\"objcopy\");\n-            \/\/ The OpenJDK build doesn't strip all symbols by default. In order\n-            \/\/ to get a different libjvm.so file, we strip everything. The\n-            \/\/ expectation is for the sha to be different before and after the\n-            \/\/ stripping of the file.\n-            objcopy.add(\"--strip-all\");\n-            objcopy.add(libJVM.toString());\n-            ProcessBuilder builder = new ProcessBuilder(objcopy);\n-            Process p = builder.start();\n-            int returnVal = p.waitFor();\n-            if (returnVal != 0) {\n-                throw new SkippedException(\"Stripping of libjvm failed. Is objcopy installed?\");\n-            }\n-            String shaAfter = buildSHA512(libJVM);\n-            if (shaBefore.equals(shaAfter)) {\n-                throw new SkippedException(\"Binary file would be the same before after - test skipped\");\n-            }\n-            return libJVM;\n-        } catch (IOException | InterruptedException e) {\n-            throw new SkippedException(\"Stripping of libjvm failed: \" + e.getMessage());\n-        }\n+    public String getTargetName() {\n+        return \"java-base-jlink-with-sha-override-target\";\n@@ -96,1 +59,1 @@\n-    void testAndAssert(Path modifiedFile, Helper helper, Path initialImage) throws Exception {\n+    public String getShaOverrideOption(Path modifiedFile, Path initialImage) {\n@@ -99,0 +62,1 @@\n+        \/\/ Modified file is libjvm.so, which is in java.base\n@@ -100,32 +64,1 @@\n-        String extraJlinkOpt = SHA_OVERRIDE_FLAG + \"=\" + overrideVal;\n-        CapturingHandler handler = new CapturingHandler();\n-        jlinkUsingImage(new JlinkSpecBuilder()\n-                                .helper(helper)\n-                                .imagePath(initialImage)\n-                                .name(\"java-base-jlink-with-sha-override-target\")\n-                                .addModule(\"java.base\")\n-                                .validatingModule(\"java.base\")\n-                                .extraJlinkOpt(extraJlinkOpt) \/\/ allow for the modified sha\n-                                .build(), handler);\n-        OutputAnalyzer out = handler.analyzer();\n-        \/\/ verify we don't get a warning message for the modified file\n-        out.stdoutShouldNotMatch(\".* has been modified\");\n-        out.stdoutShouldNotContain(\"java.lang.IllegalArgumentException\");\n-        out.stdoutShouldNotContain(\"IOException\");\n-    }\n-\n-    private String buildSHA512(Path modifiedFile) {\n-        try {\n-            MessageDigest digest = MessageDigest.getInstance(\"SHA-512\");\n-            try (InputStream is = Files.newInputStream(modifiedFile)) {\n-                byte[] buf = new byte[1024];\n-                int readBytes = -1;\n-                while ((readBytes = is.read(buf)) != -1) {\n-                    digest.update(buf, 0, readBytes);\n-                }\n-            }\n-            byte[] actual = digest.digest();\n-            return HexFormat.of().formatHex(actual);\n-        } catch (Exception e) {\n-            throw new AssertionError(\"SHA-512 sum generation failed\");\n-        }\n+        return SHA_OVERRIDE_FLAG + \"=\" + overrideVal;\n","filename":"test\/jdk\/tools\/jlink\/runtimeImage\/ModifiedFilesWithShaOverrideTest.java","additions":8,"deletions":75,"binary":false,"changes":83,"status":"modified"}]}