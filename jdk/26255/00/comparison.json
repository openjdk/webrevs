{"files":[{"patch":"@@ -209,1 +209,0 @@\n-                handlersSize++;\n","filename":"src\/java.base\/share\/classes\/jdk\/internal\/classfile\/impl\/DirectCodeBuilder.java","additions":0,"deletions":1,"binary":false,"changes":1,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2022, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2022, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -26,0 +26,1 @@\n+ * @bug 8361908\n@@ -31,0 +32,1 @@\n+import java.lang.classfile.instruction.ExceptionCatch;\n@@ -35,0 +37,1 @@\n+import java.util.Optional;\n@@ -44,0 +47,2 @@\n+import static java.lang.constant.ConstantDescs.*;\n+\n@@ -74,0 +79,15 @@\n+    @Test \/\/ JDK-8361908\n+    void testFilterMixedExceptionCatch() {\n+        var cc = ClassFile.of(ClassFile.DeadLabelsOption.DROP_DEAD_LABELS);\n+        var code = cc.parse(cc.build(CD_Void, clb ->\n+                clb.withMethodBody(\"m\", MTD_void, 0, cob -> {\n+                    cob.return_();\n+                    var l = cob.newBoundLabel();\n+                    cob.pop().return_();\n+                    cob.exceptionCatch(cob.startLabel(), l, l, Optional.empty());\n+                    cob.exceptionCatch(cob.newLabel(), l, l, CD_Exception);\n+                }))).methods().get(0).code().get();\n+        assertEquals(1, code.exceptionHandlers().size(), () -> code.exceptionHandlers().toString());\n+        assertEquals(Optional.empty(), code.exceptionHandlers().getFirst().catchType());\n+    }\n+\n","filename":"test\/jdk\/jdk\/classfile\/FilterDeadLabelsTest.java","additions":21,"deletions":1,"binary":false,"changes":22,"status":"modified"}]}