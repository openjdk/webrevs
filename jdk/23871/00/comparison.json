{"files":[{"patch":"@@ -1994,3 +1994,3 @@\n-\/\/ AndI\/L::Value() optimizes patterns similar to (v << 2) & 3 to zero if they are bitwise disjoint.\n-\/\/ Add the AndI\/L nodes back to the worklist to re-apply Value() in case the shift value changed.\n-\/\/ Pattern: parent -> LShift (use) -> (ConstraintCast | ConvI2L)* -> And\n+\/\/ AndI\/L::Value() optimizes patterns similar to (v << 2) & 3, or CON & 3 to zero if they are bitwise disjoint.\n+\/\/ Add the AndI\/L nodes back to the worklist to re-apply Value() in case the value is now a constant or shift\n+\/\/ value changed.\n@@ -1998,0 +1998,3 @@\n+  const Node* to_push = nullptr;\n+\n+  const TypeInteger* new_type = type(parent)->isa_integer(type(parent)->basic_type());\n@@ -1999,12 +2002,9 @@\n-  if ((use_op == Op_LShiftI || use_op == Op_LShiftL)\n-      && use->in(2) == parent) { \/\/ is shift value (right-hand side of LShift)\n-    auto push_and_uses_to_worklist = [&](Node* n){\n-      uint opc = n->Opcode();\n-      if (opc == Op_AndI || opc == Op_AndL) {\n-        push_if_not_bottom_type(worklist, n);\n-      }\n-    };\n-    auto is_boundary = [](Node* n) {\n-      return !(n->is_ConstraintCast() || n->Opcode() == Op_ConvI2L);\n-    };\n-    use->visit_uses(push_and_uses_to_worklist, is_boundary);\n+  if (new_type != nullptr && new_type->is_con()) {\n+    \/\/ Pattern: parent (now constant) -> (ConstraintCast | ConvI2L)* -> And\n+    to_push = parent;\n+  } else if ((use_op == Op_LShiftI || use_op == Op_LShiftL) && use->in(2) == parent) {\n+    \/\/ Pattern: parent -> LShift (use) -> (ConstraintCast | ConvI2L)* -> And\n+    to_push = use;\n+  }\n+  if (to_push == nullptr) {\n+    return;\n@@ -2012,0 +2012,11 @@\n+\n+  auto is_boundary = [](Node* n) {\n+    return !(n->is_ConstraintCast() || n->Opcode() == Op_ConvI2L);\n+  };\n+  auto push_and_uses_to_worklist = [&](Node* n){\n+    uint opc = n->Opcode();\n+    if (opc == Op_AndI || opc == Op_AndL) {\n+      push_if_not_bottom_type(worklist, n);\n+    }\n+  };\n+  to_push->visit_uses(push_and_uses_to_worklist, is_boundary);\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":26,"deletions":15,"binary":false,"changes":41,"status":"modified"}]}