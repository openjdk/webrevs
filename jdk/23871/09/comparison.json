{"files":[{"patch":"@@ -2204,1 +2204,0 @@\n-  expr = expr->uncast();\n@@ -2210,0 +2209,6 @@\n+  expr = expr->uncast();\n+  type = phase->type(expr)->isa_integer(bt);\n+  if (type == nullptr) {\n+    return 0;\n+  }\n+\n","filename":"src\/hotspot\/share\/opto\/mulnode.cpp","additions":6,"deletions":1,"binary":false,"changes":7,"status":"modified"},{"patch":"@@ -1996,3 +1996,3 @@\n-\/\/ AndI\/L::Value() optimizes patterns similar to (v << 2) & 3 to zero if they are bitwise disjoint.\n-\/\/ Add the AndI\/L nodes back to the worklist to re-apply Value() in case the shift value changed.\n-\/\/ Pattern: parent -> LShift (use) -> (ConstraintCast | ConvI2L)* -> And\n+\/\/ AndI\/L::Value() optimizes patterns similar to (v << 2) & 3, or CON & 3 to zero if they are bitwise disjoint.\n+\/\/ Add the AndI\/L nodes back to the worklist to re-apply Value() in case the value is now a constant or shift\n+\/\/ value changed.\n@@ -2000,0 +2000,1 @@\n+  const TypeInteger* parent_type = type(parent)->isa_integer(type(parent)->basic_type());\n@@ -2001,3 +2002,7 @@\n-  if ((use_op == Op_LShiftI || use_op == Op_LShiftL)\n-      && use->in(2) == parent) { \/\/ is shift value (right-hand side of LShift)\n-    auto push_and_uses_to_worklist = [&](Node* n){\n+  if (\n+    \/\/ Pattern: parent (now constant) -> (ConstraintCast | ConvI2L)* -> And\n+    (parent_type != nullptr && parent_type->is_con()) ||\n+    \/\/ Pattern: parent -> LShift (use) -> (ConstraintCast | ConvI2L)* -> And\n+    ((use_op == Op_LShiftI || use_op == Op_LShiftL) && use->in(2) == parent)) {\n+\n+    auto push_and_uses_to_worklist = [&](Node* n) {\n","filename":"src\/hotspot\/share\/opto\/phaseX.cpp","additions":11,"deletions":6,"binary":false,"changes":17,"status":"modified"},{"patch":"@@ -0,0 +1,59 @@\n+\/*\n+ * Copyright (c) 2025, Google LLC. All rights reserved.\n+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n+ *\n+ * This code is free software; you can redistribute it and\/or modify it\n+ * under the terms of the GNU General Public License version 2 only, as\n+ * published by the Free Software Foundation.\n+ *\n+ * This code is distributed in the hope that it will be useful, but WITHOUT\n+ * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n+ * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n+ * version 2 for more details (a copy is included in the LICENSE file that\n+ * accompanied this code).\n+ *\n+ * You should have received a copy of the GNU General Public License version\n+ * 2 along with this work; if not, write to the Free Software Foundation,\n+ * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n+ *\n+ * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n+ * or visit www.oracle.com if you need additional information or have any\n+ * questions.\n+ *\/\n+\n+\/*\n+ * @test\n+ * @bug 8350563\n+ * @summary Test that And nodes are monotonic and added to the CCP worklist if they have a constant as input.\n+ * @run main\/othervm -Xbatch -XX:-TieredCompilation compiler.ccp.TestAndConZeroCCP\n+ * @run main\/othervm -XX:+UnlockDiagnosticVMOptions -XX:RepeatCompilation=300 -XX:+StressIGVN -XX:+StressCCP -Xcomp\n+ *                   -XX:CompileOnly=java.lang.Integer::parseInt compiler.ccp.TestAndConZeroCCP compileonly\n+ * @run main compiler.ccp.TestAndConZeroCCP\n+ *\/\n+package compiler.ccp;\n+\n+import java.util.Arrays;\n+\n+public class TestAndConZeroCCP {\n+\n+    public static void main(String[] args) {\n+        Integer.parseInt(\"1\");\n+        if (args.length != 0) {\n+            return;\n+        }\n+\n+        for (int i = 0; i < 10000; ++i) {\n+            run();\n+        }\n+    }\n+\n+    private static void run() {\n+        for (int cp = 0; cp <= 1 << 16; cp++) {\n+            Arrays.binarySearch(array, cp);\n+            Character.getType(cp);\n+            Character.isAlphabetic(cp);\n+        }\n+    }\n+\n+    private static final int[] array = new int[3];\n+}\n","filename":"test\/hotspot\/jtreg\/compiler\/ccp\/TestAndConZeroCCP.java","additions":59,"deletions":0,"binary":false,"changes":59,"status":"added"}]}