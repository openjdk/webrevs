{"files":[{"patch":"@@ -1428,1 +1428,1 @@\n-\n+     *\n@@ -1435,0 +1435,12 @@\n+     * @apiNote\n+     * The inclusion of a total order idiom in the Java SE API\n+     * predates the inclusion of that functionality in the IEEE 754\n+     * standard. The ordering of the totalOrder predicate chosen by\n+     * IEEE 754 differs from the total order chosen by this method. In\n+     * particular IEEE 754 regards \"negative\" NaN representations,\n+     * that is NaN representations whose sign bit is set, to be less\n+     * than any finite or infinite value, including negative\n+     * infinity. Also in the IEEE 754 ordering, \"positive\" NaN values\n+     * are greater than any finite or infinite value and also greater\n+     * than negative NaN values.\n+     *\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Double.java","additions":13,"deletions":1,"binary":false,"changes":14,"status":"modified"},{"patch":"@@ -1256,0 +1256,3 @@\n+     * @apiNote\n+     * Copy or cross-reference corresponding note in {@code Double}\n+     * once that text is finalized.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/Float.java","additions":3,"deletions":0,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -972,0 +972,4 @@\n+     * @apiNote\n+     * Copy or cross-reference corresponding note in {@code Double}\n+     * once that text is finalized.\n+     *\n","filename":"src\/jdk.incubator.vector\/share\/classes\/jdk\/incubator\/vector\/Float16.java","additions":4,"deletions":0,"binary":false,"changes":4,"status":"modified"}]}