{"files":[{"patch":"@@ -30,2 +30,0 @@\n-COPY += .js\n-CLEAN += .properties\n","filename":"make\/modules\/java.scripting\/Java.gmk","additions":0,"deletions":2,"binary":false,"changes":2,"status":"modified"},{"patch":"@@ -1,39 +0,0 @@\n-#\n-# Copyright (c) 2011, 2025, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-################################################################################\n-\n-include LauncherCommon.gmk\n-\n-################################################################################\n-## Build jrunscript\n-################################################################################\n-\n-$(eval $(call SetupBuildLauncher, jrunscript, \\\n-    MAIN_CLASS := com.sun.tools.script.shell.Main, \\\n-    JAVA_ARGS := --add-modules ALL-DEFAULT, \\\n-))\n-\n-################################################################################\n","filename":"make\/modules\/java.scripting\/Launcher.gmk","additions":0,"deletions":39,"binary":false,"changes":39,"status":"deleted"},{"patch":"@@ -1,595 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2025, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-package com.sun.tools.script.shell;\n-\n-import java.io.*;\n-import java.net.*;\n-import java.nio.charset.Charset;\n-import java.text.*;\n-import java.util.*;\n-import javax.script.*;\n-\n-\/**\n- * This is the main class for Java script shell.\n- *\/\n-public class Main {\n-    \/**\n-     * main entry point to the command line tool\n-     * @param args command line argument array\n-     *\/\n-    public static void main(String[] args) {\n-        \/\/ print deprecation warning\n-        getError().println(getMessage(\"deprecated.warning\",\n-                new Object[] { PROGRAM_NAME }));\n-\n-        \/\/ parse command line options\n-        String[] scriptArgs = processOptions(args);\n-\n-        \/\/ process each script command\n-        for (Command cmd : scripts) {\n-            cmd.run(scriptArgs);\n-        }\n-\n-        System.exit(EXIT_SUCCESS);\n-    }\n-\n-    \/\/ Each -e or -f or interactive mode is represented\n-    \/\/ by an instance of Command.\n-    private static interface Command {\n-        public void run(String[] arguments);\n-    }\n-\n-    \/**\n-     * Parses and processes command line options.\n-     * @param args command line argument array\n-     *\/\n-    private static String[] processOptions(String[] args) {\n-        \/\/ current scripting language selected\n-        String currentLanguage = DEFAULT_LANGUAGE;\n-        \/\/ current script file encoding selected\n-        String currentEncoding = null;\n-\n-        \/\/ check for -classpath or -cp first\n-        checkClassPath(args);\n-\n-        \/\/ have we seen -e or -f ?\n-        boolean seenScript = false;\n-        \/\/ have we seen -f - already?\n-        boolean seenStdin = false;\n-        for (int i=0; i < args.length; i++) {\n-            String arg = args[i];\n-            if (arg.equals(\"-classpath\") ||\n-                    arg.equals(\"-cp\")) {\n-                \/\/ handled already, just continue\n-                i++;\n-                continue;\n-            }\n-\n-            \/\/ collect non-option arguments and pass these as script arguments\n-            if (!arg.startsWith(\"-\")) {\n-                int numScriptArgs;\n-                int startScriptArg;\n-                if (seenScript) {\n-                    \/\/ if we have seen -e or -f already all non-option arguments\n-                    \/\/ are passed as script arguments\n-                    numScriptArgs = args.length - i;\n-                    startScriptArg = i;\n-                } else {\n-                    \/\/ if we have not seen -e or -f, first non-option argument\n-                    \/\/ is treated as script file name and rest of the non-option\n-                    \/\/ arguments are passed to script as script arguments\n-                    numScriptArgs = args.length - i - 1;\n-                    startScriptArg = i + 1;\n-                    ScriptEngine se = getScriptEngine(currentLanguage);\n-                    addFileSource(se, args[i], currentEncoding);\n-                }\n-                \/\/ collect script arguments and return to main\n-                String[] result = new String[numScriptArgs];\n-                System.arraycopy(args, startScriptArg, result, 0, numScriptArgs);\n-                return result;\n-            }\n-\n-            if (arg.startsWith(\"-D\")) {\n-                String value = arg.substring(2);\n-                int eq = value.indexOf('=');\n-                if (eq != -1) {\n-                    System.setProperty(value.substring(0, eq),\n-                            value.substring(eq + 1));\n-                } else {\n-                    if (!value.isEmpty()) {\n-                        System.setProperty(value, \"\");\n-                    } else {\n-                        \/\/ do not allow empty property name\n-                        usage(EXIT_CMD_NO_PROPNAME);\n-                    }\n-                }\n-                continue;\n-            } else if (arg.equals(\"-?\") ||\n-                       arg.equals(\"-h\") ||\n-                       arg.equals(\"--help\") ||\n-                       \/\/ -help: legacy.\n-                       arg.equals(\"-help\")) {\n-                usage(EXIT_SUCCESS);\n-            } else if (arg.equals(\"-e\")) {\n-                seenScript = true;\n-                if (++i == args.length)\n-                    usage(EXIT_CMD_NO_SCRIPT);\n-\n-                ScriptEngine se = getScriptEngine(currentLanguage);\n-                addStringSource(se, args[i]);\n-                continue;\n-            } else if (arg.equals(\"-encoding\")) {\n-                if (++i == args.length)\n-                    usage(EXIT_CMD_NO_ENCODING);\n-                currentEncoding = args[i];\n-                continue;\n-            } else if (arg.equals(\"-f\")) {\n-                seenScript = true;\n-                if (++i == args.length)\n-                    usage(EXIT_CMD_NO_FILE);\n-                ScriptEngine se = getScriptEngine(currentLanguage);\n-                if (args[i].equals(\"-\")) {\n-                    if (seenStdin) {\n-                        usage(EXIT_MULTIPLE_STDIN);\n-                    } else {\n-                        seenStdin = true;\n-                    }\n-                    addInteractiveMode(se);\n-                } else {\n-                    addFileSource(se, args[i], currentEncoding);\n-                }\n-                continue;\n-            } else if (arg.equals(\"-l\")) {\n-                if (++i == args.length)\n-                    usage(EXIT_CMD_NO_LANG);\n-                currentLanguage = args[i];\n-                continue;\n-            } else if (arg.equals(\"-q\")) {\n-                listScriptEngines();\n-            }\n-            \/\/ some unknown option...\n-            usage(EXIT_UNKNOWN_OPTION);\n-        }\n-\n-        if (! seenScript) {\n-            ScriptEngine se = getScriptEngine(currentLanguage);\n-            addInteractiveMode(se);\n-        }\n-        return new String[0];\n-    }\n-\n-    \/**\n-     * Adds interactive mode Command\n-     * @param se ScriptEngine to use in interactive mode.\n-     *\/\n-    private static void addInteractiveMode(final ScriptEngine se) {\n-        scripts.add(new Command() {\n-            public void run(String[] args) {\n-                setScriptArguments(se, args);\n-                processSource(se, \"-\", null);\n-            }\n-        });\n-    }\n-\n-    \/**\n-     * Adds script source file Command\n-     * @param se ScriptEngine used to evaluate the script file\n-     * @param fileName script file name\n-     * @param encoding script file encoding\n-     *\/\n-    private static void addFileSource(final ScriptEngine se,\n-            final String fileName,\n-            final String encoding) {\n-        scripts.add(new Command() {\n-            public void run(String[] args) {\n-                setScriptArguments(se, args);\n-                processSource(se, fileName, encoding);\n-            }\n-        });\n-    }\n-\n-    \/**\n-     * Adds script string source Command\n-     * @param se ScriptEngine to be used to evaluate the script string\n-     * @param source Script source string\n-     *\/\n-    private static void addStringSource(final ScriptEngine se,\n-            final String source) {\n-        scripts.add(new Command() {\n-            public void run(String[] args) {\n-                setScriptArguments(se, args);\n-                String oldFile = setScriptFilename(se, \"<string>\");\n-                try {\n-                    evaluateString(se, source);\n-                } finally {\n-                    setScriptFilename(se, oldFile);\n-                }\n-            }\n-        });\n-    }\n-\n-    \/**\n-     * Prints list of script engines available and exits.\n-     *\/\n-    private static void listScriptEngines() {\n-        List<ScriptEngineFactory> factories = engineManager.getEngineFactories();\n-        for (ScriptEngineFactory factory: factories) {\n-            getError().println(getMessage(\"engine.info\",\n-                    new Object[] { factory.getLanguageName(),\n-                            factory.getLanguageVersion(),\n-                            factory.getEngineName(),\n-                            factory.getEngineVersion()\n-            }));\n-        }\n-        System.exit(EXIT_SUCCESS);\n-    }\n-\n-    \/**\n-     * Processes a given source file or standard input.\n-     * @param se ScriptEngine to be used to evaluate\n-     * @param filename file name, can be null\n-     * @param encoding script file encoding, can be null\n-     *\/\n-    private static void processSource(ScriptEngine se, String filename,\n-            String encoding) {\n-        if (filename.equals(\"-\")) {\n-            Charset charset = Charset.forName(System.getProperty(\"stdin.encoding\"), Charset.defaultCharset());\n-            BufferedReader in = new BufferedReader(new InputStreamReader(System.in, charset));\n-            boolean hitEOF = false;\n-            String prompt = getPrompt(se);\n-            se.put(ScriptEngine.FILENAME, \"<STDIN>\");\n-            while (!hitEOF) {\n-                getError().print(prompt);\n-                String source = \"\";\n-                try {\n-                    source = in.readLine();\n-                } catch (IOException ioe) {\n-                    getError().println(ioe.toString());\n-                }\n-                if (source == null) {\n-                    hitEOF = true;\n-                    break;\n-                }\n-                Object res = evaluateString(se, source, false);\n-                if (res != null) {\n-                    res = res.toString();\n-                    if (res == null) {\n-                        res = \"null\";\n-                    }\n-                    getError().println(res);\n-                }\n-            }\n-        } else {\n-            FileInputStream fis = null;\n-            try {\n-                fis = new FileInputStream(filename);\n-            } catch (FileNotFoundException fnfe) {\n-                getError().println(getMessage(\"file.not.found\",\n-                        new Object[] { filename }));\n-                        System.exit(EXIT_FILE_NOT_FOUND);\n-            }\n-            evaluateStream(se, fis, filename, encoding);\n-        }\n-    }\n-\n-    \/**\n-     * Evaluates given script source\n-     * @param se ScriptEngine to evaluate the string\n-     * @param script Script source string\n-     * @param exitOnError whether to exit the process on script error\n-     *\/\n-    private static Object evaluateString(ScriptEngine se,\n-            String script, boolean exitOnError) {\n-        try {\n-            return se.eval(script);\n-        } catch (ScriptException sexp) {\n-            getError().println(getMessage(\"string.script.error\",\n-                    new Object[] { sexp.getMessage() }));\n-                    if (exitOnError)\n-                        System.exit(EXIT_SCRIPT_ERROR);\n-        } catch (Exception exp) {\n-            exp.printStackTrace(getError());\n-            if (exitOnError)\n-                System.exit(EXIT_SCRIPT_ERROR);\n-        }\n-\n-        return null;\n-    }\n-\n-    \/**\n-     * Evaluate script string source and exit on script error\n-     * @param se ScriptEngine to evaluate the string\n-     * @param script Script source string\n-     *\/\n-    private static void evaluateString(ScriptEngine se, String script) {\n-        evaluateString(se, script, true);\n-    }\n-\n-    \/**\n-     * Evaluates script from given reader\n-     * @param se ScriptEngine to evaluate the string\n-     * @param reader Reader from which is script is read\n-     * @param name file name to report in error.\n-     *\/\n-    private static Object evaluateReader(ScriptEngine se,\n-            Reader reader, String name) {\n-        String oldFilename = setScriptFilename(se, name);\n-        try {\n-            return se.eval(reader);\n-        } catch (ScriptException sexp) {\n-            getError().println(getMessage(\"file.script.error\",\n-                    new Object[] { name, sexp.getMessage() }));\n-                    System.exit(EXIT_SCRIPT_ERROR);\n-        } catch (Exception exp) {\n-            exp.printStackTrace(getError());\n-            System.exit(EXIT_SCRIPT_ERROR);\n-        } finally {\n-            setScriptFilename(se, oldFilename);\n-        }\n-        return null;\n-    }\n-\n-    \/**\n-     * Evaluates given input stream\n-     * @param se ScriptEngine to evaluate the string\n-     * @param is InputStream from which script is read\n-     * @param name file name to report in error\n-     *\/\n-    private static Object evaluateStream(ScriptEngine se,\n-            InputStream is, String name,\n-            String encoding) {\n-        BufferedReader reader = null;\n-        if (encoding != null) {\n-            try {\n-                reader = new BufferedReader(new InputStreamReader(is,\n-                        encoding));\n-            } catch (UnsupportedEncodingException uee) {\n-                getError().println(getMessage(\"encoding.unsupported\",\n-                        new Object[] { encoding }));\n-                        System.exit(EXIT_NO_ENCODING_FOUND);\n-            }\n-        } else {\n-            reader = new BufferedReader(new InputStreamReader(is));\n-        }\n-        return evaluateReader(se, reader, name);\n-    }\n-\n-    \/**\n-     * Prints usage message and exits\n-     * @param exitCode process exit code\n-     *\/\n-    private static void usage(int exitCode) {\n-        getError().println(getMessage(\"main.usage\",\n-                new Object[] { PROGRAM_NAME }));\n-                System.exit(exitCode);\n-    }\n-\n-    \/**\n-     * Gets prompt for interactive mode\n-     * @return prompt string to use\n-     *\/\n-    private static String getPrompt(ScriptEngine se) {\n-        List<String> names = se.getFactory().getNames();\n-        return names.get(0) + \"> \";\n-    }\n-\n-    \/**\n-     * Get formatted, localized error message\n-     *\/\n-    private static String getMessage(String key, Object[] params) {\n-        return MessageFormat.format(msgRes.getString(key), params);\n-    }\n-\n-    \/\/ stream to print error messages\n-    private static PrintStream getError() {\n-        return System.err;\n-    }\n-\n-    \/\/ get current script engine\n-    private static ScriptEngine getScriptEngine(String lang) {\n-        ScriptEngine se = engines.get(lang);\n-        if (se == null) {\n-            se = engineManager.getEngineByName(lang);\n-            if (se == null) {\n-                getError().println(getMessage(\"engine.not.found\",\n-                        new Object[] { lang }));\n-                        System.exit(EXIT_ENGINE_NOT_FOUND);\n-            }\n-\n-            \/\/ initialize the engine\n-            initScriptEngine(se);\n-            \/\/ to avoid re-initialization of engine, store it in a map\n-            engines.put(lang, se);\n-        }\n-        return se;\n-    }\n-\n-    \/\/ initialize a given script engine\n-    private static void initScriptEngine(ScriptEngine se) {\n-        \/\/ put engine global variable\n-        se.put(\"engine\", se);\n-\n-        \/\/ load init.<ext> file from resource\n-        List<String> exts = se.getFactory().getExtensions();\n-        InputStream sysIn = null;\n-        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n-        for (String ext : exts) {\n-            try {\n-                sysIn = Main.class.getModule().getResourceAsStream(\"com\/sun\/tools\/script\/shell\/init.\" + ext);\n-            } catch (IOException ioe) {\n-                throw new RuntimeException(ioe);\n-            }\n-            if (sysIn != null) break;\n-        }\n-        if (sysIn != null) {\n-            evaluateStream(se, sysIn, \"<system-init>\", null);\n-        }\n-    }\n-\n-    \/**\n-     * Checks for -classpath, -cp in command line args. Creates a ClassLoader\n-     * and sets it as Thread context loader for current thread.\n-     *\n-     * @param args command line argument array\n-     *\/\n-    private static void checkClassPath(String[] args) {\n-        String classPath = null;\n-        for (int i = 0; i < args.length; i++) {\n-            if (args[i].equals(\"-classpath\") ||\n-                    args[i].equals(\"-cp\")) {\n-                if (++i == args.length) {\n-                    \/\/ just -classpath or -cp with no value\n-                    usage(EXIT_CMD_NO_CLASSPATH);\n-                } else {\n-                    classPath = args[i];\n-                }\n-            }\n-        }\n-\n-        if (classPath != null) {\n-            \/* We create a class loader, configure it with specified\n-             * classpath values and set the same as context loader.\n-             * Note that ScriptEngineManager uses context loader to\n-             * load script engines. So, this ensures that user defined\n-             * script engines will be loaded. For classes referred\n-             * from scripts, Rhino engine uses thread context loader\n-             * but this is script engine dependent. We don't have\n-             * script engine independent solution anyway. Unless we\n-             * know the class loader used by a specific engine, we\n-             * can't configure correct loader.\n-             *\/\n-            URL[] urls = pathToURLs(classPath);\n-            URLClassLoader loader = new URLClassLoader(urls);\n-            Thread.currentThread().setContextClassLoader(loader);\n-        }\n-\n-        \/\/ now initialize script engine manager. Note that this has to\n-        \/\/ be done after setting the context loader so that manager\n-        \/\/ will see script engines from user specified classpath\n-        engineManager = new ScriptEngineManager();\n-    }\n-\n-    \/**\n-     * Utility method for converting a search path string to an array\n-     * of directory and JAR file URLs.\n-     *\n-     * @param path the search path string\n-     * @return the resulting array of directory and JAR file URLs\n-     *\/\n-    private static URL[] pathToURLs(String path) {\n-        String[] components = path.split(File.pathSeparator);\n-        URL[] urls = new URL[components.length];\n-        int count = 0;\n-        while(count < components.length) {\n-            URL url = fileToURL(new File(components[count]));\n-            if (url != null) {\n-                urls[count++] = url;\n-            }\n-        }\n-        if (urls.length != count) {\n-            URL[] tmp = new URL[count];\n-            System.arraycopy(urls, 0, tmp, 0, count);\n-            urls = tmp;\n-        }\n-        return urls;\n-    }\n-\n-    \/**\n-     * Returns the directory or JAR file URL corresponding to the specified\n-     * local file name.\n-     *\n-     * @param file the File object\n-     * @return the resulting directory or JAR file URL, or null if unknown\n-     *\/\n-    private static URL fileToURL(File file) {\n-        String name;\n-        try {\n-            name = file.getCanonicalPath();\n-        } catch (IOException e) {\n-            name = file.getAbsolutePath();\n-        }\n-        name = name.replace(File.separatorChar, '\/');\n-        if (!name.startsWith(\"\/\")) {\n-            name = \"\/\" + name;\n-        }\n-        \/\/ If the file does not exist, then assume that it's a directory\n-        if (!file.isFile()) {\n-            name = name + \"\/\";\n-        }\n-        try {\n-            @SuppressWarnings(\"deprecation\")\n-            var result = new URL(\"file\", \"\", name);\n-            return result;\n-        } catch (MalformedURLException e) {\n-            throw new IllegalArgumentException(\"file\");\n-        }\n-    }\n-\n-    private static void setScriptArguments(ScriptEngine se, String[] args) {\n-        se.put(\"arguments\", args);\n-        se.put(ScriptEngine.ARGV, args);\n-    }\n-\n-    private static String setScriptFilename(ScriptEngine se, String name) {\n-        String oldName = (String) se.get(ScriptEngine.FILENAME);\n-        se.put(ScriptEngine.FILENAME, name);\n-        return oldName;\n-    }\n-\n-    \/\/ exit codes\n-    private static final int EXIT_SUCCESS            = 0;\n-    private static final int EXIT_CMD_NO_CLASSPATH   = 1;\n-    private static final int EXIT_CMD_NO_FILE        = 2;\n-    private static final int EXIT_CMD_NO_SCRIPT      = 3;\n-    private static final int EXIT_CMD_NO_LANG        = 4;\n-    private static final int EXIT_CMD_NO_ENCODING    = 5;\n-    private static final int EXIT_CMD_NO_PROPNAME    = 6;\n-    private static final int EXIT_UNKNOWN_OPTION     = 7;\n-    private static final int EXIT_ENGINE_NOT_FOUND   = 8;\n-    private static final int EXIT_NO_ENCODING_FOUND  = 9;\n-    private static final int EXIT_SCRIPT_ERROR       = 10;\n-    private static final int EXIT_FILE_NOT_FOUND     = 11;\n-    private static final int EXIT_MULTIPLE_STDIN     = 12;\n-\n-    \/\/ default scripting language\n-    private static final String DEFAULT_LANGUAGE = \"js\";\n-    \/\/ list of scripts to process\n-    private static List<Command> scripts;\n-    \/\/ the script engine manager\n-    private static ScriptEngineManager engineManager;\n-    \/\/ map of engines we loaded\n-    private static Map<String, ScriptEngine> engines;\n-    \/\/ error messages resource\n-    private static ResourceBundle msgRes;\n-    private static String BUNDLE_NAME = \"com.sun.tools.script.shell.messages\";\n-    private static String PROGRAM_NAME = \"jrunscript\";\n-\n-    static {\n-        scripts = new ArrayList<Command>();\n-        engines = new HashMap<String, ScriptEngine>();\n-        msgRes = ResourceBundle.getBundle(BUNDLE_NAME, Locale.getDefault());\n-    }\n-}\n","filename":"src\/java.scripting\/share\/classes\/com\/sun\/tools\/script\/shell\/Main.java","additions":0,"deletions":595,"binary":false,"changes":595,"status":"deleted"},{"patch":"@@ -1,927 +0,0 @@\n-\/*\n- * Copyright (c) 2005, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.  Oracle designates this\n- * particular file as subject to the \"Classpath\" exception as provided\n- * by Oracle in the LICENSE file that accompanied this code.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * jrunscript JavaScript built-in functions and objects.\n- *\/\n-\n-\/**\n- * Creates an object that delegates all method calls on\n- * it to the 'invoke' method on the given delegate object.<br>\n- *\n- * Example:\n- * <pre>\n- * <code>\n- *     var x  = { invoke: function(name, args) { \/\/code...}\n- *     var y = new JSInvoker(x);\n- *     y.func(3, 3); \/\/ calls x.invoke('func', args); where args is array of arguments\n- * <\/code>\n- * <\/pre>\n- * @param obj object to be wrapped by JSInvoker\n- * @constructor\n- *\/\n-function JSInvoker(obj) {\n-    return new JSAdapter({\n-        __get__ : function(name) {\n-            return function() {\n-                return obj.invoke(name, arguments);\n-            }\n-        }\n-    });\n-}\n-\n-\/**\n- * This variable represents OS environment. Environment\n- * variables can be accessed as fields of this object. For\n- * example, env.PATH will return PATH value configured.\n- *\/\n-var env = new JSAdapter({\n-    __get__ : function (name) {\n-        return java.lang.System.getenv(name);\n-    },\n-    __has__ : function (name) {\n-        return java.lang.System.getenv().containsKey(name);\n-    },\n-    __getIds__ : function() {\n-        return java.lang.System.getenv().keySet().toArray();\n-    },\n-    __delete__ : function(name) {\n-        println(\"can't delete env item\");\n-    },\n-    __put__ : function (name, value) {\n-        println(\"can't change env item\");\n-    },\n-    toString: function() {\n-        return java.lang.System.getenv().toString();\n-    }\n-});\n-\n-\/**\n- * Creates a convenient script object to deal with java.util.Map instances.\n- * The result script object's field names are keys of the Map. For example,\n- * scriptObj.keyName can be used to access value associated with given key.<br>\n- * Example:\n- * <pre>\n- * <code>\n- *     var x = java.lang.SystemProperties();\n- *     var y = jmap(x);\n- *     println(y['java.class.path']); \/\/ prints java.class.path System property\n- *     delete y['java.class.path']; \/\/ remove java.class.path System property\n- * <\/code>\n- * <\/pre>\n- *\n- * @param map java.util.Map instance that will be wrapped\n- * @constructor\n- *\/\n-function jmap(map) {\n-    return new JSAdapter({\n-        __get__ : function(name) {\n-            if (map.containsKey(name)) {\n-                return map.get(name);\n-            } else {\n-                return undefined;\n-            }\n-        },\n-        __has__ :  function(name) {\n-            return map.containsKey(name);\n-        },\n-\n-        __delete__ : function (name) {\n-            return map.remove(name);\n-        },\n-        __put__ : function(name, value) {\n-            map.put(name, value);\n-        },\n-        __getIds__ : function() {\n-            return map.keySet().toArray();\n-        },\n-        toString: function() {\n-            return map.toString();\n-        }\n-    });\n-}\n-\n-\/**\n- * Creates a convenient script object to deal with java.util.List instances.\n- * The result script object behaves like an array. For example,\n- * scriptObj[index] syntax can be used to access values in the List instance.\n- * 'length' field gives size of the List. <br>\n- *\n- * Example:\n- * <pre>\n- * <code>\n- *    var x = new java.util.ArrayList(4);\n- *    x.add('Java');\n- *    x.add('JavaScript');\n- *    x.add('SQL');\n- *    x.add('XML');\n- *\n- *    var y = jlist(x);\n- *    println(y[2]); \/\/ prints third element of list\n- *    println(y.length); \/\/ prints size of the list\n- *\n- * @param map java.util.List instance that will be wrapped\n- * @constructor\n- *\/\n-function jlist(list) {\n-    function isValid(index) {\n-        return typeof(index) == 'number' &&\n-            index > -1 && index < list.size();\n-    }\n-    return new JSAdapter({\n-        __get__ :  function(name) {\n-            if (isValid(name)) {\n-                return list.get(name);\n-            } else if (name == 'length') {\n-                return list.size();\n-            } else {\n-                return undefined;\n-            }\n-        },\n-        __has__ : function (name) {\n-            return isValid(name) || name == 'length';\n-        },\n-        __delete__ : function(name) {\n-            if (isValid(name)) {\n-                list.remove(name);\n-            }\n-        },\n-        __put__ : function(name, value) {\n-            if (isValid(name)) {\n-                list.set(name, value);\n-            }\n-        },\n-        __getIds__: function() {\n-            var res = new Array(list.size());\n-            for (var i = 0; i < res.length; i++) {\n-                res[i] = i;\n-            }\n-            return res;\n-        },\n-        toString: function() {\n-            return list.toString();\n-        }\n-    });\n-}\n-\n-\/**\n- * This is java.lang.System properties wrapped by JSAdapter.\n- * For eg. to access java.class.path property, you can use\n- * the syntax sysProps[\"java.class.path\"]\n- *\/\n-var sysProps = new JSAdapter({\n-    __get__ : function (name) {\n-        return java.lang.System.getProperty(name);\n-    },\n-    __has__ : function (name) {\n-        return java.lang.System.getProperty(name) != null;\n-    },\n-    __getIds__ : function() {\n-        return java.lang.System.getProperties().keySet().toArray();\n-    },\n-    __delete__ : function(name) {\n-        java.lang.System.clearProperty(name);\n-        return true;\n-    },\n-    __put__ : function (name, value) {\n-        java.lang.System.setProperty(name, value);\n-    },\n-    toString: function() {\n-        return \"<system properties>\";\n-    }\n-});\n-\n-\/\/ stdout, stderr & stdin\n-var out = java.lang.System.out;\n-var err = java.lang.System.err;\n-\/\/ can't use 'in' because it is a JavaScript keyword :-(\n-var inp = java.lang.System[\"in\"];\n-\n-var BufferedInputStream = java.io.BufferedInputStream;\n-var BufferedOutputStream = java.io.BufferedOutputStream;\n-var BufferedReader = java.io.BufferedReader;\n-var DataInputStream = java.io.DataInputStream;\n-var File = java.io.File;\n-var FileInputStream = java.io.FileInputStream;\n-var FileOutputStream = java.io.FileOutputStream;\n-var InputStream = java.io.InputStream;\n-var InputStreamReader = java.io.InputStreamReader;\n-var OutputStream = java.io.OutputStream;\n-var Reader = java.io.Reader;\n-var URL = java.net.URL;\n-\n-\/**\n- * Generic any object to input stream mapper\n- * @param str input file name, URL or InputStream\n- * @return InputStream object\n- * @private\n- *\/\n-function inStream(str) {\n-    if (typeof(str) == \"string\") {\n-        \/\/ '-' means standard input\n-        if (str == '-') {\n-            return java.lang.System[\"in\"];\n-        }\n-        \/\/ try file first\n-        var file = null;\n-        try {\n-            file = pathToFile(str);\n-        } catch (e) {\n-        }\n-        if (file && file.exists()) {\n-            return new FileInputStream(file);\n-        } else {\n-            try {\n-                \/\/ treat the string as URL\n-                return new URL(str).openStream();\n-            } catch (e) {\n-                throw 'file or URL ' + str + ' not found';\n-            }\n-        }\n-    } else {\n-        if (str instanceof InputStream) {\n-            return str;\n-        } else if (str instanceof URL) {\n-            return str.openStream();\n-        } else if (str instanceof File) {\n-            return new FileInputStream(str);\n-        }\n-    }\n-    \/\/ everything failed, just give input stream\n-    return java.lang.System[\"in\"];\n-}\n-\n-\/**\n- * Generic any object to output stream mapper\n- *\n- * @param out output file name or stream\n- * @return OutputStream object\n- * @private\n- *\/\n-function outStream(out) {\n-    if (typeof(out) == \"string\") {\n-        if (out == '>') {\n-            return java.lang.System.out;\n-        } else {\n-            \/\/ treat it as file\n-            return new FileOutputStream(pathToFile(out));\n-        }\n-    } else {\n-        if (out instanceof OutputStream) {\n-            return out;\n-        } else if (out instanceof File) {\n-            return new FileOutputStream(out);\n-        }\n-    }\n-\n-    \/\/ everything failed, just return System.out\n-    return java.lang.System.out;\n-}\n-\n-\/**\n- * stream close takes care not to close stdin, out & err.\n- * @private\n- *\/\n-function streamClose(stream) {\n-    if (stream) {\n-        if (stream != java.lang.System[\"in\"] &&\n-            stream != java.lang.System.out &&\n-            stream != java.lang.System.err) {\n-            try {\n-                stream.close();\n-            } catch (e) {\n-                println(e);\n-            }\n-        }\n-    }\n-}\n-\n-\/**\n- * Loads and evaluates JavaScript code from a stream or file or URL<br>\n- *\n- * Examples:\n- * <pre>\n- * <code>\n- *    load('test.js'); \/\/ load script file 'test.js'\n- *    load('http:\/\/java.sun.com\/foo.js'); \/\/ load from a URL\n- * <\/code>\n- * <\/pre>\n- *\n- * @param str input from which script is loaded and evaluated\n- *\/\n-if (typeof(load) == 'undefined') {\n-    this.load = function(str) {\n-        var stream = inStream(str);\n-        var bstream = new BufferedInputStream(stream);\n-        var reader = new BufferedReader(new InputStreamReader(bstream));\n-        var oldFilename = engine.get(engine.FILENAME);\n-        engine.put(engine.FILENAME, str);\n-        try {\n-            engine.eval(reader);\n-        } finally {\n-            engine.put(engine.FILENAME, oldFilename);\n-            streamClose(stream);\n-        }\n-    }\n-}\n-\n-\/\/ file system utilities\n-\n-\/**\n- * Creates a Java byte[] of given length\n- * @param len size of the array to create\n- * @private\n- *\/\n-function javaByteArray(len) {\n-    return java.lang.reflect.Array.newInstance(java.lang.Byte.TYPE, len);\n-}\n-\n-var curDir = new File('.');\n-\n-\/**\n- * Print present working directory\n- *\/\n-function pwd() {\n-    println(curDir.getAbsolutePath());\n-}\n-\n-\/**\n- * Changes present working directory to given directory\n- * @param target directory to change to. optional, defaults to user's HOME\n- *\/\n-function cd(target) {\n-    if (target == undefined) {\n-        target = sysProps[\"user.home\"];\n-    }\n-    if (!(target instanceof File)) {\n-        target = pathToFile(target);\n-    }\n-    if (target.exists() && target.isDirectory()) {\n-        curDir = target;\n-    } else {\n-        println(target + \" is not a directory\");\n-    }\n-}\n-\n-\/**\n- * Converts path to java.io.File taking care of shell present working dir\n- *\n- * @param pathname file path to be converted\n- * @private\n- *\/\n-function pathToFile(pathname) {\n-    var tmp = pathname;\n-    if (!(tmp instanceof File)) {\n-        tmp = new File(tmp);\n-    }\n-    if (!tmp.isAbsolute()) {\n-        return new File(curDir, pathname);\n-    } else {\n-        return tmp;\n-    }\n-}\n-\n-\/**\n- * Copies a file or URL or stream to another file or stream\n- *\n- * @param from input file or URL or stream\n- * @param to output stream or file\n- *\/\n-function cp(from, to) {\n-    if (from == to) {\n-        println(\"file \" + from + \" cannot be copied onto itself!\");\n-        return;\n-    }\n-    var inp = inStream(from);\n-    var out = outStream(to);\n-    var binp = new BufferedInputStream(inp);\n-    var bout = new BufferedOutputStream(out);\n-    var buff = javaByteArray(1024);\n-    var len;\n-    while ((len = binp.read(buff)) > 0 )\n-        bout.write(buff, 0, len);\n-\n-    bout.flush();\n-    streamClose(inp);\n-    streamClose(out);\n-}\n-\n-\/**\n- * Shows the content of a file or URL or any InputStream<br>\n- * Examples:\n- * <pre>\n- * <code>\n- *    cat('test.txt'); \/\/ show test.txt file contents\n- *    cat('http:\/\/java.net'); \/\/ show the contents from the URL http:\/\/java.net\n- * <\/code>\n- * <\/pre>\n- * @param obj input to show\n- * @param pattern optional. show only the lines matching the pattern\n- *\/\n-function cat(obj, pattern) {\n-    if (obj instanceof File && obj.isDirectory()) {\n-        ls(obj);\n-        return;\n-    }\n-\n-    var inp = null;\n-    if (!(obj instanceof Reader)) {\n-        inp = inStream(obj);\n-        obj = new BufferedReader(new InputStreamReader(inp));\n-    }\n-    var line;\n-    if (pattern) {\n-        var count = 1;\n-        while ((line=obj.readLine()) != null) {\n-            if (line.match(pattern)) {\n-                println(count + \"\\t: \" + line);\n-            }\n-            count++;\n-        }\n-    } else {\n-        while ((line=obj.readLine()) != null) {\n-            println(line);\n-        }\n-    }\n-}\n-\n-\/**\n- * Returns directory part of a filename\n- *\n- * @param pathname input path name\n- * @return directory part of the given file name\n- *\/\n-function dirname(pathname) {\n-    var dirName = \".\";\n-    \/\/ Normalize '\/' to local file separator before work.\n-    var i = pathname.replace('\/', File.separatorChar ).lastIndexOf(\n-        File.separator );\n-    if ( i != -1 )\n-        dirName = pathname.substring(0, i);\n-    return dirName;\n-}\n-\n-\/**\n- * Creates a new dir of given name\n- *\n- * @param dir name of the new directory\n- *\/\n-function mkdir(dir) {\n-    dir = pathToFile(dir);\n-    println(dir.mkdir()? \"created\" : \"can not create dir\");\n-}\n-\n-\/**\n- * Creates the directory named by given pathname, including\n- * any necessary but nonexistent parent directories.\n- *\n- * @param dir input path name\n- *\/\n-function mkdirs(dir) {\n-    dir = pathToFile(dir);\n-    println(dir.mkdirs()? \"created\" : \"can not create dirs\");\n-}\n-\n-\/**\n- * Removes a given file\n- *\n- * @param pathname name of the file\n- *\/\n-function rm(pathname) {\n-    var file = pathToFile(pathname);\n-    if (!file.exists()) {\n-        println(\"file not found: \" + pathname);\n-        return false;\n-    }\n-    \/\/ note that delete is a keyword in JavaScript!\n-    println(file[\"delete\"]()? \"deleted\" : \"can not delete\");\n-}\n-\n-\/**\n- * Removes a given directory\n- *\n- * @param pathname name of the directory\n- *\/\n-function rmdir(pathname) {\n-    rm(pathname);\n-}\n-\n-\/**\n- * Synonym for 'rm'\n- *\/\n-function del(pathname) {\n-    rm(pathname);\n-}\n-\n-\/**\n- * Moves a file to another\n- *\n- * @param from original name of the file\n- * @param to new name for the file\n- *\/\n-function mv(from, to) {\n-    println(pathToFile(from).renameTo(pathToFile(to))?\n-        \"moved\" : \"can not move\");\n-}\n-\n-\/**\n- * Synonym for 'mv'.\n- *\/\n-function ren(from, to) {\n-    mv(from, to);\n-}\n-\n-var months = [ \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n-        \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\" ];\n-\n-\/**\n- * Helper function called by ls\n- * @private\n- *\/\n-function printFile(f) {\n-    var sb = new java.lang.StringBuffer();\n-    sb.append(f.isDirectory()? \"d\" : \"-\");\n-    sb.append(f.canRead() ? \"r\": \"-\" );\n-    sb.append(f.canWrite() ? \"w\": \"-\" );\n-    sb.append(\" \");\n-\n-    var d = new java.util.Date(f.lastModified());\n-    var c = new java.util.GregorianCalendar();\n-    c.setTime(d);\n-    var day    = c.get(java.util.Calendar.DAY_OF_MONTH);\n-    sb.append(months[c.get(java.util.Calendar.MONTH)]\n-         + \" \" + day );\n-    if (day < 10) {\n-        sb.append(\" \");\n-    }\n-\n-    \/\/ to get fixed length 'length' field\n-    var fieldlen = 8;\n-    var len = new java.lang.StringBuffer();\n-    for(var j=0; j<fieldlen; j++)\n-        len.append(\" \");\n-    len.insert(0, java.lang.Long.toString(f.length()));\n-    len.setLength(fieldlen);\n-    \/\/ move the spaces to the front\n-    var si = len.toString().indexOf(\" \");\n-    if ( si != -1 ) {\n-        var pad = len.toString().substring(si);\n-        len.setLength(si);\n-        len.insert(0, pad);\n-    }\n-    sb.append(len.toString());\n-    sb.append(\" \");\n-    sb.append(f.getName());\n-    if (f.isDirectory()) {\n-        sb.append('\/');\n-    }\n-    println(sb.toString());\n-}\n-\n-\/**\n- * Lists the files in a directory\n- *\n- * @param dir directory from which to list the files. optional, default to pwd\n- * @param filter pattern to filter the files listed. optional, default is '.'.\n- *\/\n-function ls(dir, filter) {\n-    if (dir) {\n-        dir = pathToFile(dir);\n-    } else {\n-        dir = curDir;\n-    }\n-    if (dir.isDirectory()) {\n-        var files = dir.listFiles();\n-        for (var i in files) {\n-            var f = files[i];\n-            if (filter) {\n-                if(!f.getName().match(filter)) {\n-                    continue;\n-                }\n-            }\n-            printFile(f);\n-        }\n-    } else {\n-        printFile(dir);\n-    }\n-}\n-\n-\/**\n- * Synonym for 'ls'.\n- *\/\n-function dir(d, filter) {\n-    ls(d, filter);\n-}\n-\n-\/**\n- * Unix-like grep, but accepts JavaScript regex patterns\n- *\n- * @param pattern to search in files\n- * @param files one or more files\n- *\/\n-function grep(pattern, files \/*, one or more files *\/) {\n-    if (arguments.length < 2) return;\n-    for (var i = 1; i < arguments.length; i++) {\n-        println(arguments[i] + \":\");\n-        cat(arguments[i], pattern);\n-    }\n-}\n-\n-\/**\n- * Find in files. Calls arbitrary callback function\n- * for each matching file.<br>\n- *\n- * Examples:\n- * <pre>\n- * <code>\n- *    find('.')\n- *    find('.', '.*\\.class', rm);  \/\/ remove all .class files\n- *    find('.', '.*\\.java');       \/\/ print fullpath of each .java file\n- *    find('.', '.*\\.java', cat);  \/\/ print all .java files\n- * <\/code>\n- * <\/pre>\n- *\n- * @param dir directory to search files\n- * @param pattern to search in the files\n- * @param callback function to call for matching files\n- *\/\n-function find(dir, pattern, callback) {\n-    dir = pathToFile(dir);\n-    if (!callback) callback = print;\n-    var files = dir.listFiles();\n-    for (var f in files) {\n-        var file = files[f];\n-        if (file.isDirectory()) {\n-            find(file, pattern, callback);\n-        } else {\n-            if (pattern) {\n-                if (file.getName().match(pattern)) {\n-                    callback(file);\n-                }\n-            } else {\n-                callback(file);\n-            }\n-        }\n-    }\n-}\n-\n-\/\/ process utilities\n-\n-\/**\n- * Exec's a child process, waits for completion &amp; returns exit code\n- *\n- * @param cmd command to execute in child process\n- *\/\n-function exec(cmd) {\n-    var process = java.lang.Runtime.getRuntime().exec(cmd);\n-    var inp = new DataInputStream(process.getInputStream());\n-    var line = null;\n-    while ((line = inp.readLine()) != null) {\n-        println(line);\n-    }\n-    process.waitFor();\n-    $exit = process.exitValue();\n-}\n-\n-if (typeof(exit) == 'undefined') {\n-    \/**\n-     * Exit the shell program.\n-     *\n-     * @param exitCode integer code returned to OS shell.\n-     * optional, defaults to 0\n-     *\/\n-    this.exit = function (code) {\n-        if (code) {\n-            java.lang.System.exit(code + 0);\n-        } else {\n-            java.lang.System.exit(0);\n-        }\n-    }\n-}\n-\n-if (typeof(quit) == 'undefined') {\n-    \/**\n-     * synonym for exit\n-     *\/\n-    this.quit = function (code) {\n-        exit(code);\n-    }\n-}\n-\n-\/\/ XML utilities\n-\n-\/**\n- * Converts input to DOM Document object\n- *\n- * @param inp file or reader. optional, without this param,\n- * this function returns a new DOM Document.\n- * @return returns a DOM Document object\n- *\/\n-function XMLDocument(inp) {\n-    var factory = javax.xml.parsers.DocumentBuilderFactory.newInstance();\n-    var builder = factory.newDocumentBuilder();\n-    if (inp) {\n-        if (typeof(inp) == \"string\") {\n-            return builder.parse(pathToFile(inp));\n-        } else {\n-            return builder.parse(inp);\n-        }\n-    } else {\n-        return builder.newDocument();\n-    }\n-}\n-\n-\/**\n- * Converts arbitrary stream, file, URL to XMLSource\n- *\n- * @param inp input stream or file or URL\n- * @return XMLSource object\n- *\/\n-function XMLSource(inp) {\n-    if (inp instanceof javax.xml.transform.Source) {\n-        return inp;\n-    } else if (inp instanceof Packages.org.w3c.dom.Document) {\n-        return new javax.xml.transform.dom.DOMSource(inp);\n-    } else {\n-        inp = new BufferedInputStream(inStream(inp));\n-        return new javax.xml.transform.stream.StreamSource(inp);\n-    }\n-}\n-\n-\/**\n- * Converts arbitrary stream, file to XMLResult\n- *\n- * @param inp output stream or file\n- * @return XMLResult object\n- *\/\n-function XMLResult(out) {\n-    if (out instanceof javax.xml.transform.Result) {\n-        return out;\n-    } else if (out instanceof Packages.org.w3c.dom.Document) {\n-        return new javax.xml.transform.dom.DOMResult(out);\n-    } else {\n-        out = new BufferedOutputStream(outStream(out));\n-        return new javax.xml.transform.stream.StreamResult(out);\n-    }\n-}\n-\n-\/**\n- * Perform XSLT transform\n- *\n- * @param inp Input XML to transform (URL, File or InputStream)\n- * @param style XSL Stylesheet to be used (URL, File or InputStream). optional.\n- * @param out Output XML (File or OutputStream\n- *\/\n-function XSLTransform(inp, style, out) {\n-    switch (arguments.length) {\n-    case 2:\n-        inp = arguments[0];\n-        out = arguments[1];\n-        break;\n-    case 3:\n-        inp = arguments[0];\n-        style = arguments[1];\n-        out = arguments[2];\n-        break;\n-    default:\n-        println(\"XSL transform requires 2 or 3 arguments\");\n-        return;\n-    }\n-\n-    var factory = javax.xml.transform.TransformerFactory.newInstance();\n-    var transformer;\n-    if (style) {\n-        transformer = factory.newTransformer(XMLSource(style));\n-    } else {\n-        transformer = factory.newTransformer();\n-    }\n-    var source = XMLSource(inp);\n-    var result = XMLResult(out);\n-    transformer.transform(source, result);\n-    if (source.getInputStream) {\n-        streamClose(source.getInputStream());\n-    }\n-    if (result.getOutputStream) {\n-        streamClose(result.getOutputStream());\n-    }\n-}\n-\n-\/\/ miscellaneous utilities\n-\n-\/**\n- * Prints which command is selected from PATH\n- *\n- * @param cmd name of the command searched from PATH\n- *\/\n-function which(cmd) {\n-    var st = new java.util.StringTokenizer(env.PATH, File.pathSeparator);\n-    while (st.hasMoreTokens()) {\n-        var file = new File(st.nextToken(), cmd);\n-        if (file.exists()) {\n-            println(file.getAbsolutePath());\n-            return;\n-        }\n-    }\n-}\n-\n-\/**\n- * Prints IP addresses of given domain name\n- *\n- * @param name domain name\n- *\/\n-function ip(name) {\n-    var addrs = InetAddress.getAllByName(name);\n-    for (var i in addrs) {\n-        println(addrs[i]);\n-    }\n-}\n-\n-\/**\n- * Prints current date in current locale\n- *\/\n-function date() {\n-    println(new Date().toLocaleString());\n-}\n-\n-\/**\n- * Echoes the given string arguments\n- *\/\n-function echo(x) {\n-    for (var i = 0; i < arguments.length; i++) {\n-        println(arguments[i]);\n-    }\n-}\n-\n-if (typeof(printf) == 'undefined') {\n-    \/**\n-     * This is C-like printf \n-     *\n-     * @param format string to format the rest of the print items\n-     * @param args variadic argument list\n-     *\/\n-    this.printf = function (format, args\/*, more args*\/) {  \n-        var array = java.lang.reflect.Array.newInstance(java.lang.Object, \n-                    arguments.length - 1);\n-        for (var i = 0; i < array.length; i++) {\n-            array[i] = arguments[i+1];\n-        }\n-        java.lang.System.out.printf(format, array);\n-    }\n-}\n-\n-\/**\n- * Reads one or more lines from stdin after printing prompt\n- *\n- * @param prompt optional, default is '>'\n- * @param multiline to tell whether to read single line or multiple lines\n- *\/\n-function read(prompt, multiline) {\n-    if (!prompt) {\n-        prompt = '>';\n-    }\n-    var inp = java.lang.System[\"in\"];\n-    var reader = new BufferedReader(new InputStreamReader(inp));\n-    if (multiline) {\n-        var line = '';\n-        while (true) {\n-            java.lang.System.err.print(prompt);\n-            java.lang.System.err.flush();\n-            var tmp = reader.readLine();\n-            if (tmp == '' || tmp == null) break;\n-            line += tmp + '\\n';\n-        }\n-        return line;\n-    } else {\n-        java.lang.System.err.print(prompt);\n-        java.lang.System.err.flush();\n-        return reader.readLine();\n-    }\n-}\n-\n-if (typeof(println) == 'undefined') {\n-    \/\/ just synonym to print\n-    this.println = print;\n-}\n-\n","filename":"src\/java.scripting\/share\/classes\/com\/sun\/tools\/script\/shell\/init.js","additions":0,"deletions":927,"binary":false,"changes":927,"status":"deleted"},{"patch":"@@ -1,68 +0,0 @@\n-#\n-# Copyright (c) 2005, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.  Oracle designates this\n-# particular file as subject to the \"Classpath\" exception as provided\n-# by Oracle in the LICENSE file that accompanied this code.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-string.script.error=\\\n-        script error: {0}\n-\n-file.script.error=\\\n-        script error in file {0} : {1}\n-\n-file.not.found=\\\n-        script file {0} is not found\n-\n-engine.not.found=\\\n-        script engine for language {0} can not be found\n-\n-engine.info=\\\n-        Language {0} {1} implementation \"{2}\" {3}\n-\n-encoding.unsupported=\\\n-        encoding {0} is not supported\n-\n-main.usage=\\\n-Usage: {0} [options] [arguments...]\\n\\\n-\\n\\\n-where [options] include:\\n\\\n-\\  \\-classpath <path>    Specify where to find user class files \\n\\\n-\\  \\-cp <path>           Specify where to find user class files \\n\\\n-\\  \\-D<name>=<value>     Set a system property \\n\\\n-\\  \\-J<flag>             Pass <flag> directly to the runtime system \\n\\\n-\\  \\-l <language>        Use specified scripting language \\n\\\n-\\  \\-e <script>          Evaluate given script \\n\\\n-\\  \\-encoding <encoding> Specify character encoding used by script files \\n\\\n-\\  \\-f <script file>     Evaluate given script file \\n\\\n-\\  \\-f -                 Interactive mode, read script from standard input \\n\\\n-\\  \\                     If this is used, this should be the last -f option \\n\\\n-\\  \\-? -h --help -help   Print this help message and exit \\n\\\n-\\  \\-q                   List all scripting engines available and exit \\n\\\n-\\  \\n\\\n-If [arguments..] are present and if no -e or -f option is used, then first\\n\\\n-argument is script file and the rest of the arguments, if any, are passed\\n\\\n-as script arguments. If [arguments..] and -e or -f option is used, then all\\n\\\n-[arguments..] are passed as script arguments. If [arguments..], -e, -f are\\n\\\n-missing, then interactive mode is used.\n-\n-deprecated.warning=\\\n-        Warning: {0} is deprecated and will be removed in a future release.\n\\ No newline at end of file\n","filename":"src\/java.scripting\/share\/classes\/com\/sun\/tools\/script\/shell\/messages.properties","additions":0,"deletions":68,"binary":false,"changes":68,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2014, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2014, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -29,9 +29,0 @@\n- * <p> The JDK implementation of this module includes a language-independent\n- * command-line script shell, <em>{@index jrunscript jrunscript tool}<\/em>,\n- * that supports executing JavaScript and other languages if its corresponding\n- * script engine is installed.\n- * <p> The {@code jrunscript} tool is deprecated and will be removed\n- * in a future release.\n- *\n- * @toolGuide jrunscript\n- *\n","filename":"src\/java.scripting\/share\/classes\/module-info.java","additions":1,"deletions":10,"binary":false,"changes":11,"status":"modified"},{"patch":"@@ -1,141 +0,0 @@\n----\n-# Copyright (c) 2006, 2024, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-title: 'JRUNSCRIPT(1) JDK @@VERSION_SHORT@@ | JDK Commands'\n-date: @@COPYRIGHT_YEAR@@\n-lang: en\n----\n-\n-## Name\n-\n-jrunscript - run a command-line script shell that supports interactive and\n-batch modes\n-\n-## Synopsis\n-\n-**Note:**\n-\n-This tool is **experimental** and unsupported. It is deprecated and will be\n-removed in a future release.\n-\n-`jrunscript` \\[*options*\\] \\[*arguments*\\]\n-\n-*options*\n-:   This represents the `jrunscript` command-line options that can be used. See\n-    [Options for the jrunscript Command].\n-\n-*arguments*\n-:   Arguments, when used, follow immediately after options or the command name.\n-    See [Arguments].\n-\n-## Description\n-\n-The `jrunscript` command is a language-independent command-line script shell.\n-The `jrunscript` command supports both an interactive (read-eval-print) mode\n-and a batch (`-f` option) mode of script execution. By default, JavaScript is\n-the language used, but the `-l` option can be used to specify a different\n-language. By using Java to scripting language communication, the `jrunscript`\n-command supports an exploratory programming style.\n-\n-If JavaScript is used, then before it evaluates a user defined script, the\n-`jrunscript` command initializes certain built-in functions and objects, which\n-are documented in the API Specification for `jrunscript` JavaScript built-in\n-functions.\n-\n-## Options for the jrunscript Command\n-\n-`-cp` *path* or `-classpath` *path*\n-:   Indicates where any class files are that the script needs to access.\n-\n-`-D`*name*`=`*value*\n-:   Sets a Java system property.\n-\n-`-J`*flag*\n-:   Passes *flag* directly to the Java Virtual Machine where the `jrunscript`\n-    command is running.\n-\n-`-l` *language*\n-:   Uses the specified scripting language. By default, JavaScript is used. To\n-    use other scripting languages, you must specify the corresponding script\n-    engine's JAR file with the `-cp` or `-classpath` option.\n-\n-`-e` *script*\n-:   Evaluates the specified script. This option can be used to run one-line\n-    scripts that are specified completely on the command line.\n-\n-`-encoding` *encoding*\n-:   Specifies the character encoding used to read script files.\n-\n-`-f` *script-file*\n-:   Evaluates the specified script file (batch mode).\n-\n-`-f -`\n-:   Enters interactive mode to read and evaluate a script from standard input.\n-\n-`-help` or `-?`\n-:   Displays a help message and exits.\n-\n-`-q`\n-:   Lists all script engines available and exits.\n-\n-## Arguments\n-\n-If arguments are present and if no `-e` or `-f` option is used, then the first\n-argument is the script file and the rest of the arguments, if any, are passed\n-as script arguments. If arguments and the `-e` or the `-f` option are used,\n-then all arguments are passed as script arguments. If arguments `-e` and `-f`\n-are missing, then the interactive mode is used.\n-\n-## Example of Executing Inline Scripts\n-\n->   `jrunscript -e \"print('hello world')\"`\n-\n->   `jrunscript -e \"cat('http:\/\/www.example.com')\"`\n-\n-## Example of Using Specified Language and Evaluate the Script File\n-\n->   `jrunscript -l js -f test.js`\n-\n-## Example of Interactive Mode\n-\n-```\n-jrunscript\n-js> print('Hello World\\n');\n-Hello World\n-js> 34 + 55\n-89.0\n-js> t = new java.lang.Thread(function() { print('Hello World\\n'); })\n-Thread[Thread-0,5,main]\n-js> t.start()\n-js> Hello World\n-\n-js>\n-```\n-\n-## Run Script File with Script Arguments\n-\n-In this example, the `test.js` file is the script file. The `arg1`, `arg2`, and\n-`arg3` arguments are passed to the script. The script can access these\n-arguments with an arguments array.\n-\n->   `jrunscript test.js arg1 arg2 arg3`\n","filename":"src\/java.scripting\/share\/man\/jrunscript.md","additions":0,"deletions":141,"binary":false,"changes":141,"status":"deleted"},{"patch":"@@ -320,2 +320,1 @@\n-    jdk\/internal\/jrtfs \\\n-    sun\/tools\/jrunscript\n+    jdk\/internal\/jrtfs\n@@ -326,1 +325,0 @@\n-    -sun\/tools\/jrunscript \\\n","filename":"test\/jdk\/TEST.groups","additions":1,"deletions":3,"binary":false,"changes":4,"status":"modified"},{"patch":"@@ -1,36 +0,0 @@\n-\/*\n- * Copyright (c) 2008, 2013, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-import javax.script.*;\n-\n-\/*\n- * If the JDK being tested is <b>not<\/b> a Sun product JDK and a js\n- * engine is not present, return an exit code of 2 to indicate that\n- * the jrunscript tests which assume a js engine can be vacuously\n- * passed.\n- *\/\n-public class CheckEngine {\n-    public static void main(String... args) {\n-        System.exit(2);\n-    }\n-}\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/CheckEngine.java","additions":0,"deletions":36,"binary":false,"changes":36,"status":"deleted"},{"patch":"@@ -1,34 +0,0 @@\n-\/*\n- * Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n- *\n- * This code is free software; you can redistribute it and\/or modify it\n- * under the terms of the GNU General Public License version 2 only, as\n- * published by the Free Software Foundation.\n- *\n- * This code is distributed in the hope that it will be useful, but WITHOUT\n- * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n- * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n- * version 2 for more details (a copy is included in the LICENSE file that\n- * accompanied this code).\n- *\n- * You should have received a copy of the GNU General Public License version\n- * 2 along with this work; if not, write to the Free Software Foundation,\n- * Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n- *\n- * Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n- * or visit www.oracle.com if you need additional information or have any\n- * questions.\n- *\/\n-\n-\/**\n- * This is a test program used in the test jrunscript-cp.sh\n- *\n- *\n- *\/\n-public class Hello {\n-   public Hello() {}\n-   public String getString() {\n-       return \"hello\";\n-   }\n-}\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/Hello.java","additions":0,"deletions":34,"binary":false,"changes":34,"status":"deleted"},{"patch":"@@ -1,66 +0,0 @@\n-#\n-# Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-#\n-\n-setup() {\n-    # Verify directory context variables are set\n-    if [ \"${TESTJAVA}\" = \"\" ] ; then\n-        echo \"TESTJAVA not set. Test cannot execute.  Failed.\"\n-        exit 1\n-    fi\n-\n-    if [ \"${TESTCLASSES}\" = \"\" ] ; then\n-        TESTCLASSES=\".\"\n-    fi\n-\n-    if [ \"${TESTSRC}\" = \"\" ] ; then\n-        TESTSRC=\".\"\n-    fi\n-\n-    OS=`uname -s`\n-    case ${OS} in\n-    Windows_*)\n-        PS=\";\"\n-        FS=\"\\\\\"\n-        # MKS diff deals with trailing CRs automatically\n-        golden_diff=\"diff\"\n-        ;;\n-    CYGWIN*)\n-        PS=\":\"\n-        FS=\"\/\"\n-        # Cygwin diff needs to be told to ignore trailing CRs\n-        golden_diff=\"diff --strip-trailing-cr\"\n-        ;;\n-    *)\n-        PS=\":\"\n-        FS=\"\/\"\n-        # Assume any other platform doesn't have the trailing CR stuff\n-        golden_diff=\"diff\"\n-        ;;\n-    esac\n-\n-    JRUNSCRIPT=\"${TESTJAVA}\/bin\/jrunscript\"\n-    JAVAC=\"${TESTJAVA}\/bin\/javac\"\n-    JAVA=\"${TESTJAVA}\/bin\/java\"\n-}\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/common.sh","additions":0,"deletions":66,"binary":false,"changes":66,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-hello\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/dash-e.out","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,1 +0,0 @@\n-hello\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/dash-f.out","additions":0,"deletions":1,"binary":false,"changes":1,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-\/*\n- *\n- *\n- * This is the test JavaScript program used in jrunscript-f.sh\n- *\/\n-\n-println('hello');\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/hello.js","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -1,55 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2005, 2008, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-\n-# @test\n-# @bug 6265810 6705893\n-# @build CheckEngine\n-# @run shell jrunscript-DTest.sh\n-# @summary Test that output of 'jrunscript -D' \n-\n-. ${TESTSRC-.}\/common.sh\n-\n-setup\n-${JAVA} ${TESTVMOPTS} ${TESTJAVAOPTS} -cp ${TESTCLASSES} CheckEngine\n-if [ $? -eq 2 ]; then\n-    echo \"No js engine found and engine not required; test vacuously passes.\"\n-    exit 0\n-fi\n-\n-# test whether value specifieD by -D option is passed\n-# to script as java.lang.System property.  sysProps is\n-# jrunscript shell built-in variable for System properties.\n-\n-${JRUNSCRIPT} -l nashorn -Djrunscript.foo=bar <<EOF\n-if (sysProps[\"jrunscript.foo\"] == \"bar\") { println(\"Passed\"); exit(0); }\n-\/\/ unexpected value\n-println(\"Unexpected System property value\");\n-exit(1);\n-EOF\n-\n-if [ $? -ne 0 ]; then \n-    exit 1\n-fi\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/jrunscript-DTest.sh","additions":0,"deletions":55,"binary":false,"changes":55,"status":"deleted"},{"patch":"@@ -1,60 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-\n-# @test\n-# @bug 6265810 6705893\n-# @build CheckEngine\n-# @run shell jrunscript-argsTest.sh\n-# @summary Test passing of script arguments from command line\n-\n-. ${TESTSRC-.}\/common.sh\n-\n-setup\n-${JAVA} ${TESTVMOPTS} ${TESTJAVAOPTS} -cp ${TESTCLASSES} CheckEngine\n-if [ $? -eq 2 ]; then\n-    echo \"No js engine found and engine not required; test vacuously passes.\"\n-    exit 0\n-fi\n-\n-# we check whether \"excess\" args are passed as script arguments\n-\n-${JRUNSCRIPT} -l nashorn -J-Djava.awt.headless=true -f - hello world <<EOF\n-\n-if (typeof(arguments) == 'undefined') { println(\"arguments expected\"); exit(1); }\n-\n-if (arguments.length != 2) { println(\"2 arguments are expected here\"); exit(1); }\n-\n-if (arguments[0] != 'hello') { println(\"First arg should be 'hello'\"); exit(1); }\n-  \n-if (arguments[1] != 'world') { println(\"Second arg should be 'world'\"); exit(1); }\n-\n-println(\"Passed\");\n-exit(0);\n-EOF\n-\n-if [ $? -ne 0 ]; then\n-    exit 1\n-fi\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/jrunscript-argsTest.sh","additions":0,"deletions":60,"binary":false,"changes":60,"status":"deleted"},{"patch":"@@ -1,73 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2005, 2008, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-\n-# @test\n-# @bug 6265810 6705893\n-# @build CheckEngine\n-# @run shell jrunscript-cpTest.sh\n-# @summary Test -cp option to set classpath\n-\n-. ${TESTSRC-.}\/common.sh\n-\n-setup\n-${JAVA} ${TESTVMOPTS} ${TESTJAVAOPTS} -cp ${TESTCLASSES} CheckEngine\n-if [ $? -eq 2 ]; then\n-    echo \"No js engine found and engine not required; test vacuously passes.\"\n-    exit 0\n-fi\n-\n-rm -f Hello.class\n-${JAVAC} ${TESTTOOLVMOPTS} ${TESTJAVACOPTS} ${TESTSRC}\/Hello.java -d .\n-\n-# we check whether classpath setting for app classes\n-# work with jrunscript. Script should be able to\n-# access Java class \"Hello\".\n-\n-${JRUNSCRIPT} -l nashorn -cp . <<EOF\n-var v;  \n-try { v = new Packages.Hello(); } catch (e) { println(e); exit(1) }\n-if (v.string != 'hello') { println(\"Unexpected property value\"); exit(1); }\n-EOF\n-\n-if [ $? -ne 0 ]; then\n-   exit 1\n-fi\n-\n-# -classpath and -cp are synonyms\n-\n-${JRUNSCRIPT} -l nashorn -classpath . <<EOF\n-var v;\n-try { v = new Packages.Hello(); } catch (e) { println(e); exit(1) }\n-if (v.string != 'hello') { println(\"unexpected property value\"); exit(1); }\n-EOF\n-\n-if [ $? -ne 0 ]; then\n-   exit 1\n-fi\n-\n-rm -f Hello.class\n-echo \"Passed\"\n-exit 0\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/jrunscript-cpTest.sh","additions":0,"deletions":73,"binary":false,"changes":73,"status":"deleted"},{"patch":"@@ -1,57 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2005, 2021, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-\n-# @test\n-# @bug 6265810 6705893\n-# @build CheckEngine\n-# @run shell jrunscript-eTest.sh\n-# @summary Test that output of 'jrunscript -e' matches the dash-e.out file\n-\n-. ${TESTSRC-.}\/common.sh\n-\n-setup\n-${JAVA} ${TESTVMOPTS} ${TESTJAVAOPTS} -cp ${TESTCLASSES} CheckEngine\n-if [ $? -eq 2 ]; then\n-    echo \"No js engine found and engine not required; test vacuously passes.\"\n-    exit 0\n-fi\n-\n-# -e option with JavaScript explicitly chosen as language\n-\n-rm -f jrunscript-eTest.out 2>\/dev\/null\n-${JRUNSCRIPT} -J-Dnashorn.args.prepend=--no-deprecation-warning -J-Djava.awt.headless=true -l nashorn -e \"println('hello')\" > jrunscript-eTest.out 2>&1\n-\n-$golden_diff jrunscript-eTest.out ${TESTSRC}\/dash-e.out\n-if [ $? != 0 ]\n-then\n-  echo \"Output of jrunscript -e differ from expected output. Failed.\"\n-  rm -f jrunscript-eTest.out 2>\/dev\/null\n-  exit 1\n-fi\n-\n-rm -f jrunscript-eTest.out\n-echo \"Passed\"\n-exit 0\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/jrunscript-eTest.sh","additions":0,"deletions":57,"binary":false,"changes":57,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-\n-# @test\n-# @bug 6265810 6705893\n-# @build CheckEngine\n-# @run shell jrunscript-fTest.sh\n-# @summary Test that output of 'jrunscript -f' matches the dash-f.out file\n-\n-. ${TESTSRC-.}\/common.sh\n-\n-setup\n-${JAVA} ${TESTVMOPTS} ${TESTJAVAOPTS} -cp ${TESTCLASSES} CheckEngine\n-if [ $? -eq 2 ]; then\n-    echo \"No js engine found and engine not required; test vacuously passes.\"\n-    exit 0\n-fi\n-\n-# -f option used with JavaScript as language chosen explicitly\n-# with -l option\n-\n-rm -f jrunscript-fTest.out 2>\/dev\/null\n-${JRUNSCRIPT} -J-Dnashorn.args.prepend=--no-deprecation-warning -J-Djava.awt.headless=true -l nashorn -f ${TESTSRC}\/hello.js > jrunscript-fTest.out 2>&1\n-\n-$golden_diff jrunscript-fTest.out ${TESTSRC}\/dash-f.out\n-if [ $? != 0 ]\n-then\n-  echo \"Output of jrunscript -f differ from expected output. Failed.\"\n-  rm -f jrunscript-fTest.out 2>\/dev\/null\n-  exit 1\n-fi\n-\n-rm -f jrunscript-fTest.out\n-echo \"Passed\"\n-exit 0\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/jrunscript-fTest.sh","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,58 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2005, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-\n-# @test\n-# @bug 6265810\n-# @run shell jrunscript-helpTest.sh\n-# @summary Test that output of 'jrunscript -?' is not empty\n-\n-. ${TESTSRC-.}\/common.sh\n-\n-setup\n-\n-rm -f jrunscript-helpTest.out 2>\/dev\/null\n-${JRUNSCRIPT} -? > jrunscript-helpTest.out 2>&1\n-\n-if [ ! -s jrunscript-helpTest.out ]\n-then\n-  echo \"Output of jrunscript -? is empty. Failed.\"\n-  rm -f jrunscript-helpTest.out 2>\/dev\/null\n-  exit 1\n-fi\n-\n-rm -f jrunscript-helpTest.out 2>\/dev\/null\n-${JRUNSCRIPT} -help > jrunscript-helpTest.out 2>&1\n-\n-if [ ! -s jrunscript-helpTest.out ]\n-then\n-  echo \"Output of jrunscript -help is empty. Failed.\"\n-  rm -f jrunscript-helpTest.out 2>\/dev\/null\n-  exit 1\n-fi\n-\n-rm -f jrunscript-helpTest.out\n-echo \"Passed\"\n-exit 0\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/jrunscript-helpTest.sh","additions":0,"deletions":58,"binary":false,"changes":58,"status":"deleted"},{"patch":"@@ -1,62 +0,0 @@\n-#!\/bin\/sh\n-\n-#\n-# Copyright (c) 2005, 2012, Oracle and\/or its affiliates. All rights reserved.\n-# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.\n-#\n-# This code is free software; you can redistribute it and\/or modify it\n-# under the terms of the GNU General Public License version 2 only, as\n-# published by the Free Software Foundation.\n-#\n-# This code is distributed in the hope that it will be useful, but WITHOUT\n-# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or\n-# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License\n-# version 2 for more details (a copy is included in the LICENSE file that\n-# accompanied this code).\n-#\n-# You should have received a copy of the GNU General Public License version\n-# 2 along with this work; if not, write to the Free Software Foundation,\n-# Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.\n-#\n-# Please contact Oracle, 500 Oracle Parkway, Redwood Shores, CA 94065 USA\n-# or visit www.oracle.com if you need additional information or have any\n-# questions.\n-#\n-\n-\n-# @test\n-# @bug 6265810 6705893\n-# @build CheckEngine\n-# @run shell jrunscriptTest.sh\n-# @summary Test that output of 'jrunscript' interactive matches the repl.out file\n-\n-. ${TESTSRC-.}\/common.sh\n-\n-setup\n-${JAVA} ${TESTVMOPTS} ${TESTJAVAOPTS} -cp ${TESTCLASSES} CheckEngine\n-if [ $? -eq 2 ]; then\n-    echo \"No js engine found and engine not required; test vacuously passes.\"\n-    exit 0\n-fi\n-\n-rm -f jrunscriptTest.out 2>\/dev\/null\n-${JRUNSCRIPT} -J-Dnashorn.args.prepend=--no-deprecation-warning -J-Djava.awt.headless=true -l nashorn > jrunscriptTest.out 2>&1 <<EOF\n-v = 2 + 5;\n-v *= 5; v.doubleValue();\n-v = v + \" is the value\";\n-if (v != 0) { println('yes v != 0'); }\n-java.lang.System.out.println('hello world from script');\n-new java.lang.Runnable() { run: function() { println('I am runnable'); }}.run();\n-EOF\n-\n-$golden_diff jrunscriptTest.out ${TESTSRC}\/repl.out\n-if [ $? != 0 ]\n-then\n-  echo \"Output of jrunscript -l nashorn differ from expected output. Failed.\"\n-  rm -f jrunscriptTest.out 2>\/dev\/null\n-  exit 1\n-fi\n-\n-rm -f jrunscriptTest.out\n-echo \"Passed\"\n-exit 0\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/jrunscriptTest.sh","additions":0,"deletions":62,"binary":false,"changes":62,"status":"deleted"},{"patch":"@@ -1,7 +0,0 @@\n-nashorn> 7\n-nashorn> 35.0\n-nashorn> 35 is the value\n-nashorn> yes v != 0\n-nashorn> hello world from script\n-nashorn> I am runnable\n-nashorn> \n\\ No newline at end of file\n","filename":"test\/jdk\/sun\/tools\/jrunscript\/repl.out","additions":0,"deletions":7,"binary":false,"changes":7,"status":"deleted"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2018, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2018, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -145,1 +145,0 @@\n-        new ToolHelpSpec(\"jrunscript\",  1,   1,   1,   0,         1,    1,     7),     \/\/ -?, -h, --help -help, Documents -help\n","filename":"test\/jdk\/tools\/launcher\/HelpFlagsTest.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -2,1 +2,1 @@\n- * Copyright (c) 2007, 2024, Oracle and\/or its affiliates. All rights reserved.\n+ * Copyright (c) 2007, 2025, Oracle and\/or its affiliates. All rights reserved.\n@@ -96,1 +96,0 @@\n-        \"jrunscript\",\n","filename":"test\/jdk\/tools\/launcher\/VersionCheck.java","additions":1,"deletions":2,"binary":false,"changes":3,"status":"modified"}]}