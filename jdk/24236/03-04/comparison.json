{"files":[{"patch":"@@ -661,1 +661,2 @@\n-     * WARNING: Make sure this method does not trigger any class loading.\n+     * WARNING: Make sure this method does not trigger any class loading,\n+     * because a ClassPrepareEvent can deadlock the debugger and debug agent.\n","filename":"src\/java.base\/share\/classes\/java\/lang\/ThreadGroup.java","additions":2,"deletions":1,"binary":false,"changes":3,"status":"modified"},{"patch":"@@ -237,0 +237,16 @@\n+        #if 0\n+        \/\/ This is a workaround for 8352088. GetThreadGroupChildren does an upcall to \n+        \/\/ java which may trigger class loading the first time it is called. Call is now\n+        \/\/ for the first time when we know it will be safe to trigger the class loading.\n+        jint threadCount;\n+        jthread *theThreads;\n+        jthread *theGroups;\n+        error = JVMTI_FUNC_PTR(gdata->jvmti,GetThreadGroupChildren)\n+                    (gdata->jvmti, gdata->systemThreadGroup,\n+                     &threadCount,&theThreads,\n+                     &groupCount, &theGroups);\n+        if (error != JVMTI_ERROR_NONE) {\n+            EXIT_ERROR(error, \"JDWP unable to call GetThreadGroupChildren\");\n+        }\n+        #endif\n+\n","filename":"src\/jdk.jdwp.agent\/share\/native\/libjdwp\/util.c","additions":16,"deletions":0,"binary":false,"changes":16,"status":"modified"}]}